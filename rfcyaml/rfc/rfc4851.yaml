- title: __initial_text__
  contents:
  - "           The Flexible Authentication via Secure Tunneling\n          Extensible\
    \ Authentication Protocol Method (EAP-FAST)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the Extensible Authentication Protocol (EAP)\n\
    \   based Flexible Authentication via Secure Tunneling (EAP-FAST)\n   protocol.\
    \  EAP-FAST is an EAP method that enables secure\n   communication between a peer\
    \ and a server by using the Transport\n   Layer Security (TLS) to establish a\
    \ mutually authenticated tunnel.\n   Within the tunnel, Type-Length-Value (TLV)\
    \ objects are used to convey\n   authentication related data between the peer\
    \ and the EAP server.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n     1.1.  Specification Requirements . . . . . . . . . . .\
    \ . . . . .  5\n     1.2.  Terminology  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  5\n   2.  Protocol Overview  . . . . . . . . . . . . . . . . . . .\
    \ . . .  6\n     2.1.  Architectural Model  . . . . . . . . . . . . . . . . .\
    \ . .  6\n     2.2.  Protocol Layering Model  . . . . . . . . . . . . . . . .\
    \ .  7\n   3.  EAP-FAST Protocol  . . . . . . . . . . . . . . . . . . . . . .\
    \  8\n     3.1.  Version Negotiation  . . . . . . . . . . . . . . . . . . .  8\n\
    \     3.2.  EAP-FAST Authentication Phase 1: Tunnel Establishment  . .  9\n  \
    \     3.2.1.  TLS Session Resume Using Server State  . . . . . . . . 10\n    \
    \   3.2.2.  TLS Session Resume Using a PAC . . . . . . . . . . . . 10\n      \
    \ 3.2.3.  Transition between Abbreviated and Full TLS\n               Handshake\
    \  . . . . . . . . . . . . . . . . . . . . . . 12\n     3.3.  EAP-FAST Authentication\
    \ Phase 2: Tunneled\n           Authentication . . . . . . . . . . . . . . . .\
    \ . . . . . . 12\n       3.3.1.  EAP Sequences  . . . . . . . . . . . . . . .\
    \ . . . . . 13\n       3.3.2.  Protected Termination and Acknowledged Result\n\
    \               Indication . . . . . . . . . . . . . . . . . . . . . . 13\n  \
    \   3.4.  Determining Peer-Id and Server-Id  . . . . . . . . . . . . 14\n    \
    \ 3.5.  EAP-FAST Session Identifier  . . . . . . . . . . . . . . . 15\n     3.6.\
    \  Error Handling . . . . . . . . . . . . . . . . . . . . . . 15\n       3.6.1.\
    \  TLS Layer Errors . . . . . . . . . . . . . . . . . . . 15\n       3.6.2.  Phase\
    \ 2 Errors . . . . . . . . . . . . . . . . . . . . 16\n     3.7.  Fragmentation\
    \  . . . . . . . . . . . . . . . . . . . . . . 16\n   4.  Message Formats  . .\
    \ . . . . . . . . . . . . . . . . . . . . . 18\n     4.1.  EAP-FAST Message Format\
    \  . . . . . . . . . . . . . . . . . 18\n       4.1.1.  Authority ID Data  . .\
    \ . . . . . . . . . . . . . . . . 20\n     4.2.  EAP-FAST TLV Format and Support\
    \  . . . . . . . . . . . . . 20\n       4.2.1.  General TLV Format . . . . . .\
    \ . . . . . . . . . . . . 21\n       4.2.2.  Result TLV . . . . . . . . . . .\
    \ . . . . . . . . . . . 22\n       4.2.3.  NAK TLV  . . . . . . . . . . . . .\
    \ . . . . . . . . . . 23\n       4.2.4.  Error TLV  . . . . . . . . . . . . .\
    \ . . . . . . . . . 24\n       4.2.5.  Vendor-Specific TLV  . . . . . . . . .\
    \ . . . . . . . . 25\n       4.2.6.  EAP-Payload TLV  . . . . . . . . . . . .\
    \ . . . . . . . 26\n       4.2.7.  Intermediate-Result TLV  . . . . . . . . .\
    \ . . . . . . 28\n       4.2.8.  Crypto-Binding TLV . . . . . . . . . . . . .\
    \ . . . . . 29\n       4.2.9.  Request-Action TLV . . . . . . . . . . . . . .\
    \ . . . . 31\n     4.3.  Table of TLVs  . . . . . . . . . . . . . . . . . . .\
    \ . . . 32\n   5.  Cryptographic Calculations . . . . . . . . . . . . . . . .\
    \ . . 32\n     5.1.  EAP-FAST Authentication Phase 1: Key Derivations . . . .\
    \ . 32\n     5.2.  Intermediate Compound Key Derivations  . . . . . . . . . .\
    \ 33\n     5.3.  Computing the Compound MAC . . . . . . . . . . . . . . . . 34\n\
    \     5.4.  EAP Master Session Key Generation  . . . . . . . . . . . . 35\n  \
    \   5.5.  T-PRF  . . . . . . . . . . . . . . . . . . . . . . . . . . 35\n   6.\
    \  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 36\n   7.  Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . . 37\n     7.1.  Mutual\
    \ Authentication and Integrity Protection . . . . . . 37\n     7.2.  Method Negotiation\
    \ . . . . . . . . . . . . . . . . . . . . 38\n     7.3.  Separation of Phase 1\
    \ and Phase 2 Servers  . . . . . . . . 38\n     7.4.  Mitigation of Known Vulnerabilities\
    \ and Protocol\n           Deficiencies . . . . . . . . . . . . . . . . . . .\
    \ . . . . 39\n       7.4.1.  User Identity Protection and Verification  . . .\
    \ . . . 39\n       7.4.2.  Dictionary Attack Resistance . . . . . . . . . . .\
    \ . . 40\n       7.4.3.  Protection against Man-in-the-Middle Attacks . . . .\
    \ . 40\n       7.4.4.  PAC Binding to User Identity . . . . . . . . . . . . .\
    \ 41\n     7.5.  Protecting against Forged Clear Text EAP Packets . . . . . 41\n\
    \     7.6.  Server Certificate Validation  . . . . . . . . . . . . . . 42\n  \
    \   7.7.  Tunnel PAC Considerations  . . . . . . . . . . . . . . . . 42\n    \
    \ 7.8.  Security Claims  . . . . . . . . . . . . . . . . . . . . . 43\n   8. \
    \ Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 44\n   9.  References\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 44\n     9.1.  Normative\
    \ References . . . . . . . . . . . . . . . . . . . 44\n     9.2.  Informative\
    \ References . . . . . . . . . . . . . . . . . . 45\n   Appendix A.  Examples\
    \  . . . . . . . . . . . . . . . . . . . . . . 46\n     A.1.  Successful Authentication\
    \  . . . . . . . . . . . . . . . . 46\n     A.2.  Failed Authentication  . . .\
    \ . . . . . . . . . . . . . . . 47\n     A.3.  Full TLS Handshake using Certificate-based\
    \ Ciphersuite . . 48\n     A.4.  Client Authentication during Phase 1 with Identity\n\
    \           Privacy  . . . . . . . . . . . . . . . . . . . . . . . . . 50\n  \
    \   A.5.  Fragmentation and Reassembly . . . . . . . . . . . . . . . 52\n    \
    \ A.6.  Sequence of EAP Methods  . . . . . . . . . . . . . . . . . 53\n     A.7.\
    \  Failed Crypto-Binding  . . . . . . . . . . . . . . . . . . 56\n     A.8.  Sequence\
    \ of EAP Method with Vendor-Specific TLV\n           Exchange . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 57\n   Appendix B.  Test Vectors  . . . .\
    \ . . . . . . . . . . . . . . . . 60\n     B.1.  Key Derivation . . . . . . .\
    \ . . . . . . . . . . . . . . . 60\n     B.2.  Crypto-Binding MIC . . . . . .\
    \ . . . . . . . . . . . . . . 62\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Network access solutions requiring user friendly and easily\n\
    \   deployable secure authentication mechanisms highlight the need for\n   strong\
    \ mutual authentication protocols that enable the use of weaker\n   user credentials.\
    \  This document defines an Extensible Authentication\n   Protocol (EAP), which\
    \ consists of establishing a Transport Layer\n   Security (TLS) tunnel using TLS\
    \ 1.0 [RFC2246], TLS 1.1 [RFC4346], or\n   a successor version of TLS, using the\
    \ latest version supported by\n   both parties.  Once the tunnel is established,\
    \ the protocol further\n   exchanges data in the form of type, length, and value\
    \ objects (TLV)\n   to perform further authentication.  EAP-FAST supports the\
    \ TLS\n   extension defined in [RFC4507] to support fast re-establishment of\n\
    \   the secure tunnel without having to maintain per-session state on the\n  \
    \ server.  [EAP-PROV] defines EAP-FAST-based mechanisms to provision\n   the credential\
    \ for this extension which is called a Protected Access\n   Credential (PAC).\n\
    \   EAP-FAST's design motivations included:\n   o  Mutual authentication: an EAP\
    \ server must be able to verify the\n      identity and authenticity of the peer,\
    \ and the peer must be able\n      to verify the authenticity of the EAP server.\n\
    \   o  Immunity to passive dictionary attacks: many authentication\n      protocols\
    \ require a password to be explicitly provided (either as\n      cleartext or\
    \ hashed) by the peer to the EAP server; at minimum,\n      the communication\
    \ of the weak credential (e.g., password) must be\n      immune from eavesdropping.\n\
    \   o  Immunity to man-in-the-middle (MitM) attacks: in establishing a\n     \
    \ mutually authenticated protected tunnel, the protocol must prevent\n      adversaries\
    \ from successfully interjecting information into the\n      conversation between\
    \ the peer and the EAP server.\n   o  Flexibility to enable support for most password\
    \ authentication\n      interfaces: as many different password interfaces (e.g.,\
    \ Microsoft\n      Challenge Handshake Authentication Protocol (MS-CHAP), Lightweight\n\
    \      Directory Access Protocol (LDAP), One-Time Password (OTP), etc.)\n    \
    \  exist to authenticate a peer, the protocol must provide this\n      support\
    \ seamlessly.\n   o  Efficiency: specifically when using wireless media, peers\
    \ will be\n      limited in computational and power resources.  The protocol must\n\
    \      enable the network access communication to be computationally\n      lightweight.\n\
    \   With these motivational goals defined, further secondary design\n   criteria\
    \ are imposed:\n   o  Flexibility to extend the communications inside the tunnel:\
    \ with\n      the growing complexity in network infrastructures, the need to\n\
    \      gain authentication, authorization, and accounting is also\n      evolving.\
    \  For instance, there may be instances in which multiple\n      existing authentication\
    \ protocols are required to achieve mutual\n      authentication.  Similarly,\
    \ different protected conversations may\n      be required to achieve the proper\
    \ authorization once a peer has\n      successfully authenticated.\n   o  Minimize\
    \ the authentication server's per user authentication state\n      requirements:\
    \ with large deployments, it is typical to have many\n      servers acting as\
    \ the authentication servers for many peers.  It\n      is also highly desirable\
    \ for a peer to use the same shared secret\n      to secure a tunnel much the\
    \ same way it uses the username and\n      password to gain access to the network.\
    \  The protocol must\n      facilitate the use of a single strong shared secret\
    \ by the peer\n      while enabling the servers to minimize the per user and device\n\
    \      state it must cache and manage.\n"
- title: 1.1.  Specification Requirements
  contents:
  - "1.1.  Specification Requirements\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119] .\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   Much of the terminology in this document comes from [RFC3748].\n\
    \   Additional terms are defined below:\n   Protected Access Credential (PAC)\n\
    \      Credentials distributed to a peer for future optimized network\n      authentication.\
    \  The PAC consists of, at most, three components: a\n      shared secret, an\
    \ opaque element, and optionally other\n      information.  The shared secret\
    \ component contains the pre-shared\n      key between the peer and the authentication\
    \ server.  The opaque\n      part is provided to the peer and is presented to\
    \ the\n      authentication server when the peer wishes to obtain access to\n\
    \      network resources.  Finally, a PAC may optionally include other\n     \
    \ information that may be useful to the peer.  The opaque part of\n      the PAC\
    \ is the same type of data as the ticket in [RFC4507] and\n      the shared secret\
    \ is used to derive the TLS master secret.\n"
- title: 2.  Protocol Overview
  contents:
  - "2.  Protocol Overview\n   EAP-FAST is an authentication protocol similar to EAP-TLS\
    \ [RFC2716]\n   that enables mutual authentication and cryptographic context\n\
    \   establishment by using the TLS handshake protocol.  EAP-FAST allows\n   for\
    \ the established TLS tunnel to be used for further authentication\n   exchanges.\
    \  EAP-FAST makes use of TLVs to carry out the inner\n   authentication exchanges.\
    \  The tunnel is then used to protect weaker\n   inner authentication methods,\
    \ which may be based on passwords, and to\n   communicate the results of the authentication.\n\
    \   EAP-FAST makes use of the TLS enhancements in [RFC4507] to enable an\n   optimized\
    \ TLS tunnel session resume while minimizing server state.\n   The secret key\
    \ used in EAP-FAST is referred to as the Protected\n   Access Credential key (or\
    \ PAC-Key); the PAC-Key is used to mutually\n   authenticate the peer and the\
    \ server when securing a tunnel.  The\n   ticket is referred to as the Protected\
    \ Access Credential opaque data\n   (or PAC-Opaque).  The secret key and ticket\
    \ used to establish the\n   tunnel may be provisioned through mechanisms that\
    \ do not involve the\n   TLS handshake.  It is RECOMMENDED that implementations\
    \ support the\n   capability to distribute the ticket and secret key within the\
    \ EAP-\n   FAST tunnel as specified in [EAP-PROV].\n   The EAP-FAST conversation\
    \ is used to establish or resume an existing\n   session to typically establish\
    \ network connectivity between a peer\n   and the network.  Upon successful execution\
    \ of EAP-FAST, both EAP\n   peer and EAP server derive strong session key material\
    \ that can then\n   be communicated to the network access server (NAS) for use\
    \ in\n   establishing a link layer security association.\n"
- title: 2.1.  Architectural Model
  contents:
  - "2.1.  Architectural Model\n   The network architectural model for EAP-FAST usage\
    \ is shown below:\n    +----------+      +----------+      +----------+      +----------+\n\
    \    |          |      |          |      |          |      |  Inner   |\n    |\
    \   Peer   |<---->|  Authen- |<---->| EAP-FAST |<---->|  Method  |\n    |    \
    \      |      |  ticator |      |  server  |      |  server  |\n    |        \
    \  |      |          |      |          |      |          |\n    +----------+ \
    \     +----------+      +----------+      +----------+\n                     \
    \  EAP-FAST Architectural Model\n   The entities depicted above are logical entities\
    \ and may or may not\n   correspond to separate network components.  For example,\
    \ the EAP-FAST\n   server and inner method server might be a single entity; the\n\
    \   authenticator and EAP-FAST server might be a single entity; or the\n   functions\
    \ of the authenticator, EAP-FAST server, and inner method\n   server might be\
    \ combined into a single physical device.  For example,\n   typical 802.11 deployments\
    \ place the Authenticator in an access point\n   (AP) while a Radius server may\
    \ provide the EAP-FAST and inner method\n   server components.  The above diagram\
    \ illustrates the division of\n   labor among entities in a general manner and\
    \ shows how a distributed\n   system might be constructed; however, actual systems\
    \ might be\n   realized more simply.  The security considerations Section 7.3\n\
    \   provides an additional discussion of the implications of separating\n   the\
    \ EAP-FAST server from the inner method server.\n"
- title: 2.2.  Protocol Layering Model
  contents:
  - "2.2.  Protocol Layering Model\n   EAP-FAST packets are encapsulated within EAP;\
    \ EAP in turn requires a\n   carrier protocol for transport.  EAP-FAST packets\
    \ encapsulate TLS,\n   which is then used to encapsulate user authentication information.\n\
    \   Thus, EAP-FAST messaging can be described using a layered model,\n   where\
    \ each layer encapsulates the layer above it.  The following\n   diagram clarifies\
    \ the relationship between protocols:\n    +---------------------------------------------------------------+\n\
    \    |       Inner EAP Method     |     Other TLV information        |\n    |---------------------------------------------------------------|\n\
    \    |                 TLV Encapsulation (TLVs)                      |\n    |---------------------------------------------------------------|\n\
    \    |                         TLS                                   |\n    |---------------------------------------------------------------|\n\
    \    |                       EAP-FAST                                |\n    |---------------------------------------------------------------|\n\
    \    |                         EAP                                   |\n    |---------------------------------------------------------------|\n\
    \    |   Carrier Protocol (EAP over LAN, RADIUS, Diameter, etc.)     |\n    +---------------------------------------------------------------+\n\
    \                          Protocol Layering Model\n   The TLV layer is a payload\
    \ with Type-Length-Value (TLV) Objects\n   defined in Section 4.2.  The TLV objects\
    \ are used to carry arbitrary\n   parameters between an EAP peer and an EAP server.\
    \  All conversations\n   in the EAP-FAST protected tunnel must be encapsulated\
    \ in a TLV layer.\n   Methods for encapsulating EAP within carrier protocols are\
    \ already\n   defined.  For example, IEEE 802.1X [IEEE.802-1X.2004] may be used\
    \ to\n   transport EAP between the peer and the authenticator; RADIUS\n   [RFC3579]\
    \ or Diameter [RFC4072] may be used to transport EAP between\n   the authenticator\
    \ and the EAP-FAST server.\n"
- title: 3.  EAP-FAST Protocol
  contents:
  - "3.  EAP-FAST Protocol\n   EAP-FAST authentication occurs in two phases.  In the\
    \ first phase,\n   EAP-FAST employs the TLS handshake to provide an authenticated\
    \ key\n   exchange and to establish a protected tunnel.  Once the tunnel is\n\
    \   established the second phase begins with the peer and server engaging\n  \
    \ in further conversations to establish the required authentication and\n   authorization\
    \ policies.  The operation of the protocol, including\n   Phase 1 and Phase 2,\
    \ are the topic of this section.  The format of\n   EAP-FAST messages is given\
    \ in Section 4 and the cryptographic\n   calculations are given in Section 5.\n"
- title: 3.1.  Version Negotiation
  contents:
  - "3.1.  Version Negotiation\n   EAP-FAST packets contain a 3-bit version field,\
    \ following the TLS\n   Flags field, which enables EAP-FAST implementations to\
    \ be backward\n   compatible with previous versions of the protocol.  This\n \
    \  specification documents the EAP-FAST version 1 protocol;\n   implementations\
    \ of this specification MUST use a version field set to\n   1.\n   Version negotiation\
    \ proceeds as follows:\n      In the first EAP-Request sent with EAP type=EAP-FAST,\
    \ the EAP\n      server must set the version field to the highest supported version\n\
    \      number.\n      If the EAP peer supports this version of the protocol, it\
    \ MUST\n      respond with an EAP-Response of EAP type=EAP-FAST, and the version\n\
    \      number proposed by the EAP-FAST server.\n      If the EAP-FAST peer does\
    \ not support this version, it responds\n      with an EAP-Response of EAP type=EAP-FAST\
    \ and the highest\n      supported version number.\n      If the EAP-FAST server\
    \ does not support the version number\n      proposed by the EAP-FAST peer, it\
    \ terminates the conversation.\n      Otherwise the EAP-FAST conversation continues.\n\
    \   The version negotiation procedure guarantees that the EAP-FAST peer\n   and\
    \ server will agree to the latest version supported by both\n   parties.  If version\
    \ negotiation fails, then use of EAP-FAST will not\n   be possible, and another\
    \ mutually acceptable EAP method will need to\n   be negotiated if authentication\
    \ is to proceed.\n   The EAP-FAST version is not protected by TLS; and hence can\
    \ be\n   modified in transit.  In order to detect a modification of the EAP-\n\
    \   FAST version, the peers MUST exchange the EAP-FAST version number\n   received\
    \ during version negotiation using the Crypto-Binding TLV\n   described in Section\
    \ 4.2.8.  The receiver of the Crypto-Binding TLV\n   MUST verify that the version\
    \ received in the Crypto-Binding TLV\n   matches the version sent by the receiver\
    \ in the EAP-FAST version\n   negotiation.\n"
- title: '3.2.  EAP-FAST Authentication Phase 1: Tunnel Establishment'
  contents:
  - "3.2.  EAP-FAST Authentication Phase 1: Tunnel Establishment\n   EAP-FAST is based\
    \ on the TLS handshake [RFC2246] to establish an\n   authenticated and protected\
    \ tunnel.  The TLS version offered by the\n   peer and server MUST be TLS v1.0\
    \ or later.  This version of the EAP-\n   FAST implementation MUST support the\
    \ following TLS ciphersuites:\n      TLS_RSA_WITH_RC4_128_SHA\n      TLS_RSA_WITH_AES_128_CBC_SHA\
    \ [RFC3268]\n      TLS_DHE_RSA_WITH_AES_128_CBC_SHA [RFC3268]\n   Other ciphersuites\
    \ MAY be supported.  It is RECOMMENDED that\n   anonymous ciphersuites such as\
    \ TLS_DH_anon_WITH_AES_128_CBC_SHA only\n   be used in the context of the provisioning\
    \ described in [EAP-PROV].\n   Care must be taken to address potential man-in-the-middle\
    \ attacks\n   when ciphersuites that do not provide authenticated tunnel\n   establishment\
    \ are used.  During the EAP-FAST Phase 1 conversation the\n   EAP-FAST endpoints\
    \ MAY negotiate TLS compression.\n   The EAP server initiates the EAP-FAST conversation\
    \ with an EAP\n   request containing an EAP-FAST/Start packet.  This packet includes\
    \ a\n   set Start (S) bit, the EAP-FAST version as specified in Section 3.1,\n\
    \   and an authority identity.  The TLS payload in the initial packet is\n   empty.\
    \  The authority identity (A-ID) is used to provide the peer a\n   hint of the\
    \ server's identity that may be useful in helping the peer\n   select the appropriate\
    \ credential to use.  Assuming that the peer\n   supports EAP-FAST the conversation\
    \ continues with the peer sending an\n   EAP-Response packet with EAP type of\
    \ EAP-FAST with the Start (S) bit\n   clear and the version as specified in Section\
    \ 3.1.  This message\n   encapsulates one or more TLS records containing the TLS\
    \ handshake\n   messages.  If the EAP-FAST version negotiation is successful then\
    \ the\n   EAP-FAST conversation continues until the EAP server and EAP peer are\n\
    \   ready to enter Phase 2.  When the full TLS handshake is performed,\n   then\
    \ the first payload of EAP-FAST Phase 2 MAY be sent along with\n   server-finished\
    \ handshake message to reduce the number of round\n   trips.\n   After the TLS\
    \ session is established, another EAP exchange MAY occur\n   within the tunnel\
    \ to authenticate the EAP peer.  EAP-FAST\n   implementations MUST support client\
    \ authentication during tunnel\n   establishment using the TLS ciphersuites specified\
    \ in Section 3.2.\n   EAP-FAST implementations SHOULD also support the immediate\n\
    \   renegotiation of a TLS session to initiate a new handshake message\n   exchange\
    \ under the protection of the current ciphersuite.  This\n   allows support for\
    \ protection of the peer's identity.  Note that the\n   EAP peer does not need\
    \ to authenticate as part of the TLS exchange,\n   but can alternatively be authenticated\
    \ through additional EAP\n   exchanges carried out in Phase 2.\n   The EAP-FAST\
    \ tunnel protects peer identity information from\n   disclosure outside the tunnel.\
    \  Implementations that wish to provide\n   identity privacy for the peer identity\
    \ must carefully consider what\n   information is disclosed outside the tunnel.\n\
    \   The following sections describe resuming a TLS session based on\n   server-side\
    \ or client-side state.\n"
- title: 3.2.1.  TLS Session Resume Using Server State
  contents:
  - "3.2.1.  TLS Session Resume Using Server State\n   EAP-FAST session resumption\
    \ is achieved in the same manner TLS\n   achieves session resume.  To support\
    \ session resumption, the server\n   and peer must minimally cache the SessionID,\
    \ master secret, and\n   ciphersuite.  The peer attempts to resume a session by\
    \ including a\n   valid SessionID from a previous handshake in its ClientHello\
    \ message.\n   If the server finds a match for the SessionID and is willing to\n\
    \   establish a new connection using the specified session state, the\n   server\
    \ will respond with the same SessionID and proceed with the EAP-\n   FAST Authentication\
    \ Phase 1 tunnel establishment based on a TLS\n   abbreviated handshake.  After\
    \ a successful conclusion of the EAP-FAST\n   Authentication Phase 1 conversation,\
    \ the conversation then continues\n   on to Phase 2.\n"
- title: 3.2.2.  TLS Session Resume Using a PAC
  contents:
  - "3.2.2.  TLS Session Resume Using a PAC\n   EAP-FAST supports the resumption of\
    \ sessions based on client-side\n   state using techniques described in [RFC4507].\
    \  This version of EAP-\n   FAST does not support the provisioning of a ticket\
    \ through the use of\n   the SessionTicket handshake message.  Instead it supports\
    \ the\n   provisioning of a ticket called a Protected Access Credential (PAC)\n\
    \   as described in [EAP-PROV].  Implementations may provide additional\n   ways\
    \ to provision the PAC, such as manual configuration.  Since the\n   PAC mentioned\
    \ here is used for establishing the TLS Tunnel, it is\n   more specifically referred\
    \ to as the Tunnel PAC.  The Tunnel PAC is a\n   security credential provided\
    \ by the EAP server to a peer and\n   comprised of:\n   1.  PAC-Key: this is a\
    \ 32-octet key used by the peer to establish the\n       EAP-FAST Phase 1 tunnel.\
    \  This key is used to derive the TLS\n       premaster secret as described in\
    \ Section 5.1.  The PAC-Key is\n       randomly generated by the EAP server to\
    \ produce a strong entropy\n       32-octet key.  The PAC-Key is a secret and\
    \ MUST be treated\n       accordingly.  For example, as the PAC-Key is a separate\
    \ component\n       provisioned by the server to establish a secure tunnel, the\n\
    \       server may deliver this component protected by a secure channel,\n   \
    \    and it must be stored securely by the peer.\n   2.  PAC-Opaque: this is a\
    \ variable length field that is sent to the\n       EAP server during the EAP-FAST\
    \ Phase 1 tunnel establishment.  The\n       PAC-Opaque can only be interpreted\
    \ by the EAP server to recover\n       the required information for the server\
    \ to validate the peer's\n       identity and authentication.  For example, the\
    \ PAC-Opaque\n       includes the PAC-Key and may contain the PAC's peer identity.\n\
    \       The PAC-Opaque format and contents are specific to the PAC\n       issuing\
    \ server.  The PAC-Opaque may be presented in the clear, so\n       an attacker\
    \ MUST NOT be able to gain useful information from the\n       PAC-Opaque itself.\
    \  The server issuing the PAC-Opaque must ensure\n       it is protected with\
    \ strong cryptographic keys and algorithms.\n   3.  PAC-Info: this is a variable\
    \ length field used to provide, at a\n       minimum, the authority identity of\
    \ the PAC issuer.  Other useful\n       but not mandatory information, such as\
    \ the PAC-Key lifetime, may\n       also be conveyed by the PAC issuing server\
    \ to the peer during PAC\n       provisioning or refreshment.\n   The use of the\
    \ PAC is based on the SessionTicket extension defined in\n   [RFC4507].  The EAP\
    \ server initiates the EAP-FAST conversation as\n   normal.  Upon receiving the\
    \ A-ID from the server, the peer checks to\n   see if it has an existing valid\
    \ PAC-Key and PAC-Opaque for the\n   server.  If it does, then it obtains the\
    \ PAC-Opaque and puts it in\n   the SessionTicket extension in the ClientHello.\
    \  It is RECOMMENDED in\n   EAP-FAST that the peer include an empty Session ID\
    \ in a ClientHello\n   containing a PAC-Opaque.  EAP-FAST does not currently support\
    \ the\n   SessionTicket Handshake message so an empty SessionTicket extension\n\
    \   MUST NOT be included in the ClientHello.  If the PAC-Opaque included\n   in\
    \ the SessionTicket extension is valid and the EAP server permits\n   the abbreviated\
    \ TLS handshake, it will select the ciphersuite allowed\n   to be used from information\
    \ within the PAC and finish with the\n   abbreviated TLS handshake.  If the server\
    \ receives a Session ID and a\n   PAC-Opaque in the SessionTicket extension in\
    \ a ClientHello, it should\n   place the same Session ID in the ServerHello if\
    \ it is resuming a\n   session based on the PAC-Opaque.  The conversation then\
    \ proceeds as\n   described in [RFC4507] until the handshake completes or a fatal\
    \ error\n   occurs.  After the abbreviated handshake completes, the peer and\n\
    \   server are ready to commence Phase 2.  Note that when a PAC is used,\n   the\
    \ TLS master secret is calculated from the PAC-Key, client random,\n   and server\
    \ random as described in Section 5.1.\n   Specific details for the Tunnel PAC\
    \ format, provisioning and security\n   considerations are best described in [EAP-PROV]\n"
- title: 3.2.3.  Transition between Abbreviated and Full TLS Handshake
  contents:
  - "3.2.3.  Transition between Abbreviated and Full TLS Handshake\n   If session\
    \ resumption based on server-side or client-side state\n   fails, the server can\
    \ gracefully fall back to a full TLS handshake.\n   If the ServerHello received\
    \ by the peer contains a empty Session ID\n   or a Session ID that is different\
    \ than in the ClientHello, the server\n   may be falling back to a full handshake.\
    \  The peer can distinguish\n   the server's intent of negotiating full or abbreviated\
    \ TLS handshake\n   by checking the next TLS handshake messages in the server\
    \ response to\n   the ClientHello.  If ChangeCipherSpec follows the ServerHello\
    \ in\n   response to the ClientHello, then the server has accepted the session\n\
    \   resumption and intends to negotiate the abbreviated handshake.\n   Otherwise,\
    \ the server intends to negotiate the full TLS handshake.  A\n   peer can request\
    \ for a new PAC to be provisioned after the full TLS\n   handshake and mutual\
    \ authentication of the peer and the server.  In\n   order to facilitate the fallback\
    \ to a full handshake, the peer SHOULD\n   include ciphersuites that allow for\
    \ a full handshake and possibly PAC\n   provisioning so the server can select\
    \ one of these in case session\n   resumption fails.  An example of the transition\
    \ is shown in\n   Appendix A.\n"
- title: '3.3.  EAP-FAST Authentication Phase 2: Tunneled Authentication'
  contents:
  - "3.3.  EAP-FAST Authentication Phase 2: Tunneled Authentication\n   The second\
    \ portion of the EAP-FAST Authentication occurs immediately\n   after successful\
    \ completion of Phase 1.  Phase 2 occurs even if both\n   peer and authenticator\
    \ are authenticated in the Phase 1 TLS\n   negotiation.  Phase 2 MUST NOT occur\
    \ if the Phase 1 TLS handshake\n   fails.  Phase 2 consists of a series of requests\
    \ and responses\n   encapsulated in TLV objects defined in Section 4.2.  Phase\
    \ 2 MUST\n   always end with a protected termination exchange described in\n \
    \  Section 3.3.2.  The TLV exchange may include the execution of zero or\n   more\
    \ EAP methods within the protected tunnel as described in\n   Section 3.3.1. \
    \ A server MAY proceed directly to the protected\n   termination exchange if it\
    \ does not wish to request further\n   authentication from the peer.  However,\
    \ the peer and server must not\n   assume that either will skip inner EAP methods\
    \ or other TLV\n   exchanges.  The peer may have roamed to a network that requires\n\
    \   conformance with a different authentication policy or the peer may\n   request\
    \ the server take additional action through the use of the\n   Request-Action\
    \ TLV.\n"
- title: 3.3.1.  EAP Sequences
  contents:
  - "3.3.1.  EAP Sequences\n   EAP [RFC3748] prohibits use of multiple authentication\
    \ methods within\n   a single EAP conversation in order to limit vulnerabilities\
    \ to man-\n   in-the-middle attacks.  EAP-FAST addresses man-in-the-middle attacks\n\
    \   through support for cryptographic protection of the inner EAP\n   exchange\
    \ and cryptographic binding of the inner authentication\n   method(s) to the protected\
    \ tunnel.  EAP methods are executed serially\n   in a sequence.  This version\
    \ of EAP-FAST does not support initiating\n   multiple EAP methods simultaneously\
    \ in parallel.  The methods need\n   not be distinct.  For example, EAP-TLS could\
    \ be run twice as an inner\n   method, first using machine credentials followed\
    \ by a second instance\n   using user credentials.\n   EAP method messages are\
    \ carried within EAP-Payload TLVs defined in\n   Section 4.2.6.  If more than\
    \ one method is going to be executed in\n   the tunnel then, upon completion of\
    \ a method, a server MUST send an\n   Intermediate-Result TLV indicating the result.\
    \  The peer MUST respond\n   to the Intermediate-Result TLV indicating its result.\
    \  If the result\n   indicates success, the Intermediate-Result TLV MUST be accompanied\
    \ by\n   a Crypto-Binding TLV.  The Crypto-Binding TLV is further discussed in\n\
    \   Section 4.2.8 and Section 5.3.  The Intermediate-Result TLVs can be\n   included\
    \ with other TLVs such as EAP-Payload TLVs starting a new EAP\n   conversation\
    \ or with the Result TLV used in the protected termination\n   exchange.  In the\
    \ case where only one EAP method is executed in the\n   tunnel, the Intermediate-Result\
    \ TLV MUST NOT be sent with the Result\n   TLV.  In this case, the status of the\
    \ inner EAP method is represented\n   by the final Result TLV, which also represents\
    \ the result of the\n   whole EAP-FAST conversation.  This is to maintain backward\n\
    \   compatibility with existing implementations.\n   If both peer and server indicate\
    \ success, then the method is\n   considered complete.  If either indicates failure.\
    \ then the method is\n   considered failed.  The result of failure of an EAP method\
    \ does not\n   always imply a failure of the overall authentication.  If one\n\
    \   authentication method fails, the server may attempt to authenticate\n   the\
    \ peer with a different method.\n"
- title: 3.3.2.  Protected Termination and Acknowledged Result Indication
  contents:
  - "3.3.2.  Protected Termination and Acknowledged Result Indication\n   A successful\
    \ EAP-FAST Phase 2 conversation MUST always end in a\n   successful Result TLV\
    \ exchange.  An EAP-FAST server may initiate the\n   Result TLV exchange without\
    \ initiating any EAP conversation in EAP-\n   FAST Phase 2.  After the final Result\
    \ TLV exchange, the TLS tunnel is\n   terminated and a clear text EAP-Success\
    \ or EAP-Failure is sent by the\n   server.  The format of the Result TLV is described\
    \ in Section 4.2.2.\n   A server initiates a successful protected termination\
    \ exchange by\n   sending a Result TLV indicating success.  The server may send\
    \ the\n   Result TLV along with an Intermediate-Result TLV and a Crypto-Binding\n\
    \   TLV.  If the peer requires nothing more from the server it will\n   respond\
    \ with a Result TLV indicating success accompanied by an\n   Intermediate-Result\
    \ TLV and Crypto-Binding TLV if necessary.  The\n   server then tears down the\
    \ tunnel and sends a clear text EAP-Success.\n   If the peer receives a Result\
    \ TLV indicating success from the server,\n   but its authentication policies\
    \ are not satisfied (for example it\n   requires a particular authentication mechanism\
    \ be run or it wants to\n   request a PAC), it may request further action from\
    \ the server using\n   the Request-Action TLV.  The Request-Action TLV is sent\
    \ along with\n   the Result TLV indicating what EAP Success/Failure result the\
    \ peer\n   would expect if the requested action is not granted.  The value of\n\
    \   the Request-Action TLV indicates what the peer would like to do next.\n  \
    \ The format and values for the Request-Action TLV are defined in\n   Section\
    \ 4.2.9.\n   Upon receiving the Request-Action TLV the server may process the\n\
    \   request or ignore it, based on its policy.  If the server ignores the\n  \
    \ request, it proceeds with termination of the tunnel and send the\n   clear text\
    \ EAP Success or Failure message based on the value of the\n   peer's result TLV.\
    \  If the server honors and processes the request,\n   it continues with the requested\
    \ action.  The conversation completes\n   with a Result TLV exchange.  The Result\
    \ TLV may be included with the\n   TLV that completes the requested action.\n\
    \   Error handling for Phase 2 is discussed in Section 3.6.2.\n"
- title: 3.4.  Determining Peer-Id and Server-Id
  contents:
  - "3.4.  Determining Peer-Id and Server-Id\n   The Peer-Id and Server-Id may be\
    \ determined based on the types of\n   credentials used during either the EAP-FAST\
    \ tunnel creation or\n   authentication.\n   When X.509 certificates are used\
    \ for peer authentication, the Peer-Id\n   is determined by the subject or subjectAltName\
    \ fields in the peer\n   certificate.  As noted in [RFC3280] (updated by [RFC4630]):\n\
    \      The subject field identifies the entity associated with the public\n  \
    \    key stored in the subject public key field.  The subject name MAY\n     \
    \ be carried in the subject field and/or the subjectAltName\n      extension....\
    \  If subject naming information is present only in\n      the subjectAltName\
    \ extension (e.g., a key bound only to an email\n      address or URI), then the\
    \ subject name MUST be an empty sequence\n      and the subjectAltName extension\
    \ MUST be critical.\n      Where it is non-empty, the subject field MUST contain\
    \ an X.500\n      distinguished name (DN).\n   If an inner EAP method is run,\
    \ then the Peer-Id is obtained from the\n   inner method.\n   When the server\
    \ uses an X.509 certificate to establish the TLS\n   tunnel, the Server-Id is\
    \ determined in a similar fashion as stated\n   above for the Peer-Id; e.g., the\
    \ subject or subjectAltName field in\n   the server certificate defines the Server-Id.\n"
- title: 3.5.  EAP-FAST Session Identifier
  contents:
  - "3.5.  EAP-FAST Session Identifier\n   The EAP session identifier is constructed\
    \ using the random values\n   provided by the peer and server during the TLS tunnel\
    \ establishment.\n   The Session-Id is defined as follows:\n      Session-Id \
    \ = 0x2B || client_random || server_random)\n     client_random = 32 byte nonce\
    \ generated by the peer\n     server_random = 32 byte nonce generated by the server\n"
- title: 3.6.  Error Handling
  contents:
  - "3.6.  Error Handling\n   EAP-FAST uses the following error handling rules summarized\
    \ below:\n   1.  Errors in the TLS layer are communicated via TLS alert messages\n\
    \       in all phases of EAP-FAST.\n   2.  The Intermediate-Result TLVs carry\
    \ success or failure indications\n       of the individual EAP methods in EAP-FAST\
    \ Phase 2.  Errors within\n       the EAP conversation in Phase 2 are expected\
    \ to be handled by\n       individual EAP methods.\n   3.  Violations of the TLV\
    \ rules are handled using Result TLVs\n       together with Error TLVs.\n   4.\
    \  Tunnel compromised errors (errors caused by Crypto-Binding failed\n       or\
    \ missing) are handled using Result TLVs and Error TLVs.\n"
- title: 3.6.1.  TLS Layer Errors
  contents:
  - "3.6.1.  TLS Layer Errors\n   If the EAP-FAST server detects an error at any point\
    \ in the TLS\n   Handshake or the TLS layer, the server SHOULD send an EAP-FAST\n\
    \   request encapsulating a TLS record containing the appropriate TLS\n   alert\
    \ message rather than immediately terminating the conversation so\n   as to allow\
    \ the peer to inform the user of the cause of the failure\n   and possibly allow\
    \ for a restart of the conversation.  The peer MUST\n   send an EAP-FAST response\
    \ to an alert message.  The EAP-Response\n   packet sent by the peer may encapsulate\
    \ a TLS ClientHello handshake\n   message, in which case the EAP-FAST server MAY\
    \ allow the EAP-FAST\n   conversation to be restarted, or it MAY contain an EAP-FAST\
    \ response\n   with a zero-length message, in which case the server MUST terminate\n\
    \   the conversation with an EAP-Failure packet.  It is up to the EAP-\n   FAST\
    \ server whether to allow restarts, and if so, how many times the\n   conversation\
    \ can be restarted.  An EAP-FAST Server implementing\n   restart capability SHOULD\
    \ impose a limit on the number of restarts,\n   so as to protect against denial-of-service\
    \ attacks.\n   If the EAP-FAST peer detects an error at any point in the TLS layer,\n\
    \   the EAP-FAST peer should send an EAP-FAST response encapsulating a\n   TLS\
    \ record containing the appropriate TLS alert message.  The server\n   may restart\
    \ the conversation by sending an EAP-FAST request packet\n   encapsulating the\
    \ TLS HelloRequest handshake message.  The peer may\n   allow the EAP-FAST conversation\
    \ to be restarted or it may terminate\n   the conversation by sending an EAP-FAST\
    \ response with an zero-length\n   message.\n"
- title: 3.6.2.  Phase 2 Errors
  contents:
  - "3.6.2.  Phase 2 Errors\n   Any time the peer or the server finds a fatal error\
    \ outside of the\n   TLS layer during Phase 2 TLV processing, it MUST send a Result\
    \ TLV of\n   failure and an Error TLV with the appropriate error code.  For errors\n\
    \   involving the processing of the sequence of exchanges, such as a\n   violation\
    \ of TLV rules (e.g., multiple EAP-Payload TLVs), the error\n   code is Unexpected_TLVs_Exchanged.\
    \  For errors involving a tunnel\n   compromise, the error-code is Tunnel_Compromise_Error.\
    \  Upon sending\n   a Result TLV with a fatal Error TLV the sender terminates\
    \ the TLS\n   tunnel.  Note that a server will still wait for a message from the\n\
    \   peer after it sends a failure, however the server does not need to\n   process\
    \ the contents of the response message.\n   If a server receives a Result TLV\
    \ of failure with a fatal Error TLV,\n   it SHOULD send a clear text EAP-Failure.\
    \  If a peer receives a Result\n   TLV of failure, it MUST respond with a Result\
    \ TLV indicating failure.\n   If the server has sent a Result TLV of failure,\
    \ it ignores the peer\n   response, and it SHOULD send a clear text EAP-Failure.\n"
- title: 3.7.  Fragmentation
  contents:
  - "3.7.  Fragmentation\n   A single TLS record may be up to 16384 octets in length,\
    \ but a TLS\n   message may span multiple TLS records, and a TLS certificate message\n\
    \   may in principle be as long as 16 MB.  This is larger than the\n   maximum\
    \ size for a message on most media types, therefore it is\n   desirable to support\
    \ fragmentation.  Note that in order to protect\n   against reassembly lockup\
    \ and denial-of-service attacks, it may be\n   desirable for an implementation\
    \ to set a maximum size for one such\n   group of TLS messages.  Since a typical\
    \ certificate chain is rarely\n   longer than a few thousand octets, and no other\
    \ field is likely to be\n   anywhere near as long, a reasonable choice of maximum\
    \ acceptable\n   message length might be 64 KB.  This is still a fairly large\
    \ message\n   packet size so an EAP-FAST implementation MUST provide its own\n\
    \   support for fragmentation and reassembly.\n   Since EAP is an lock-step protocol,\
    \ fragmentation support can be\n   added in a simple manner.  In EAP, fragments\
    \ that are lost or damaged\n   in transit will be retransmitted, and since sequencing\
    \ information is\n   provided by the Identifier field in EAP, there is no need\
    \ for a\n   fragment offset field.\n   EAP-FAST fragmentation support is provided\
    \ through the addition of\n   flag bits within the EAP-Response and EAP-Request\
    \ packets, as well as\n   a TLS Message Length field of four octets.  Flags include\
    \ the Length\n   included (L), More fragments (M), and EAP-FAST Start (S) bits.\
    \  The L\n   flag is set to indicate the presence of the four-octet TLS Message\n\
    \   Length field, and MUST be set for the first fragment of a fragmented\n   TLS\
    \ message or set of messages.  The M flag is set on all but the\n   last fragment.\
    \  The S flag is set only within the EAP-FAST start\n   message sent from the\
    \ EAP server to the peer.  The TLS Message Length\n   field is four octets, and\
    \ provides the total length of the TLS\n   message or set of messages that is\
    \ being fragmented; this simplifies\n   buffer allocation.\n   When an EAP-FAST\
    \ peer receives an EAP-Request packet with the M bit\n   set, it MUST respond\
    \ with an EAP-Response with EAP-Type of EAP-FAST\n   and no data.  This serves\
    \ as a fragment ACK.  The EAP server must\n   wait until it receives the EAP-Response\
    \ before sending another\n   fragment.  In order to prevent errors in processing\
    \ of fragments, the\n   EAP server MUST increment the Identifier field for each\
    \ fragment\n   contained within an EAP-Request, and the peer must include this\n\
    \   Identifier value in the fragment ACK contained within the EAP-\n   Response.\
    \  Retransmitted fragments will contain the same Identifier\n   value.\n   Similarly,\
    \ when the EAP-FAST server receives an EAP-Response with the\n   M bit set, it\
    \ must respond with an EAP-Request with EAP-Type of EAP-\n   FAST and no data.\
    \  This serves as a fragment ACK.  The EAP peer MUST\n   wait until it receives\
    \ the EAP-Request before sending another\n   fragment.  In order to prevent errors\
    \ in the processing of fragments,\n   the EAP server MUST increment the Identifier\
    \ value for each fragment\n   ACK contained within an EAP-Request, and the peer\
    \ MUST include this\n   Identifier value in the subsequent fragment contained\
    \ within an EAP-\n   Response.\n"
- title: 4.  Message Formats
  contents:
  - "4.  Message Formats\n   The following sections describe the message formats used\
    \ in EAP-FAST.\n   The fields are transmitted from left to right in network byte\
    \ order.\n"
- title: 4.1.  EAP-FAST Message Format
  contents:
  - "4.1.  EAP-FAST Message Format\n   A summary of the EAP-FAST Request/Response\
    \ packet format is shown\n   below.\n    0                   1               \
    \    2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |   Identifier  |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |   Flags | Ver |        Message Length         :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :         Message Length        |           Data...             +\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Code\n         The code field is one octet in length defined as follows:\n\
    \         1  Request\n         2  Response\n      Identifier\n         The Identifier\
    \ field is one octet and aids in matching\n         responses with requests. \
    \ The Identifier field MUST be changed\n         on each Request packet.  The\
    \ Identifier field in the Response\n         packet MUST match the Identifier\
    \ field from the corresponding\n         request.\n      Length\n         The\
    \ Length field is two octets and indicates the length of the\n         EAP packet\
    \ including the Code, Identifier, Length, Type, Flags,\n         Ver, Message\
    \ Length, and Data fields.  Octets outside the range\n         of the Length field\
    \ should be treated as Data Link Layer\n         padding and should be ignored\
    \ on reception.\n      Type\n         43 for EAP-FAST\n      Flags\n         \
    \ 0 1 2 3 4\n         +-+-+-+-+-+\n         |L M S R R|\n         +-+-+-+-+-+\n\
    \         L  Length included; set to indicate the presence of the four-\n    \
    \        octet Message Length field\n         M  More fragments; set on all but\
    \ the last fragment\n         S  EAP-FAST start; set in an EAP-FAST Start message\n\
    \         R  Reserved (must be zero)\n      Ver\n         This field contains\
    \ the version of the protocol.  This document\n         describes version 1 (001\
    \ in binary) of EAP-FAST.\n      Message Length\n         The Message Length field\
    \ is four octets, and is present only if\n         the L bit is set.  This field\
    \ provides the total length of the\n         message that may be fragmented over\
    \ the data fields of multiple\n         packets.\n      Data\n         In the\
    \ case of an EAP-FAST Start request (i.e., when the S bit\n         is set) the\
    \ Data field consists of the A-ID described in\n         Section 4.1.1.  In other\
    \ cases, when the Data field is present,\n         it consists of an encapsulated\
    \ TLS packet in TLS record format.\n         An EAP-FAST packet with Flags and\
    \ Version fields, but with zero\n         length data field, is used to indicate\
    \ EAP-FAST acknowledgement\n         for either a fragmented message, a TLS Alert\
    \ message or a TLS\n         Finished message.\n"
- title: 4.1.1.  Authority ID Data
  contents:
  - "4.1.1.  Authority ID Data\n    0                   1                   2    \
    \               3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Type (0x04)          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              ID\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Type\n         The Type field is two octets.  It is set to 0x0004 for\n\
    \         Authority ID\n      Length\n         The Length filed is two octets,\
    \ which contains the length of\n         the ID field in octets.\n      ID\n \
    \        Hint of the identity of the server.  It should be unique across\n   \
    \      the deployment.\n"
- title: 4.2.  EAP-FAST TLV Format and Support
  contents:
  - "4.2.  EAP-FAST TLV Format and Support\n   The TLVs defined here are standard\
    \ Type-Length-Value (TLV) objects.\n   The TLV objects could be used to carry\
    \ arbitrary parameters between\n   EAP peer and EAP server within the protected\
    \ TLS tunnel.\n   The EAP peer may not necessarily implement all the TLVs supported\
    \ by\n   the EAP server.  To allow for interoperability, TLVs are designed to\n\
    \   allow an EAP server to discover if a TLV is supported by the EAP\n   peer,\
    \ using the NAK TLV.  The mandatory bit in a TLV indicates\n   whether support\
    \ of the TLV is required.  If the peer or server does\n   not support a TLV marked\
    \ mandatory, then it MUST send a NAK TLV in\n   the response, and all the other\
    \ TLVs in the message MUST be ignored.\n   If an EAP peer or server finds an unsupported\
    \ TLV that is marked as\n   optional, it can ignore the unsupported TLV.  It MUST\
    \ NOT send an NAK\n   TLV for a TLV that is not marked mandatory.\n   Note that\
    \ a peer or server may support a TLV with the mandatory bit\n   set, but may not\
    \ understand the contents.  The appropriate response\n   to a supported TLV with\
    \ content that is not understood is defined by\n   the individual TLV specification.\n\
    \   EAP implementations compliant with this specification MUST support\n   TLV\
    \ exchanges, as well as the processing of mandatory/optional\n   settings on the\
    \ TLV.  Implementations conforming to this\n   specification MUST support the\
    \ following TLVs:\n      Result TLV\n      NAK TLV\n      Error TLV\n      EAP-Payload\
    \ TLV\n      Intermediate-Result TLV\n      Crypto-Binding TLV\n      Request-Action\
    \ TLV\n"
- title: 4.2.1.  General TLV Format
  contents:
  - "4.2.1.  General TLV Format\n   TLVs are defined as described below.  The fields\
    \ are transmitted from\n   left to right.\n    0                   1         \
    \          2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|R|            TLV Type       |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              Value...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      M\n         0  Optional TLV\n         1  Mandatory TLV\n      R\n     \
    \    Reserved, set to zero (0)\n      TLV Type\n         A 14-bit field, denoting\
    \ the TLV type.  Allocated Types\n         include:\n            0  Reserved\n\
    \            1  Reserved\n            2  Reserved\n            3  Result TLV \
    \             (Section 4.2.2)\n            4  NAK TLV                 (Section\
    \ 4.2.3)\n            5  Error TLV               (Section 4.2.4)\n           \
    \ 7  Vendor-Specific TLV     (Section 4.2.5)\n            9  EAP-Payload TLV \
    \        (Section 4.2.6)\n            10 Intermediate-Result TLV (Section 4.2.7)\n\
    \            11 PAC TLV                 [EAP-PROV]\n            12 Crypto-Binding\
    \ TLV      (Section 4.2.8)\n            18 Server-Trusted-Root TLV [EAP-PROV]\n\
    \            19 Request-Action TLV      (Section 4.2.9)\n            20 PKCS#7\
    \ TLV              [EAP-PROV]\n      Length\n         The length of the Value\
    \ field in octets.\n      Value\n         The value of the TLV.\n"
- title: 4.2.2.  Result TLV
  contents:
  - "4.2.2.  Result TLV\n   The Result TLV provides support for acknowledged success\
    \ and failure\n   messages for protected termination within EAP-FAST.  If the\
    \ Status\n   field does not contain one of the known values, then the peer or\
    \ EAP\n   server MUST treat this as a fatal error of Unexpected_TLVs_Exchanged.\n\
    \   The behavior of the Result TLV is further discussed in Section 3.3.2\n   and\
    \ Section 3.6.2.  A Result TLV indicating failure MUST NOT be\n   accompanied\
    \ by the following TLVs: NAK, EAP-Payload TLV, or Crypto-\n   Binding TLV.  The\
    \ Result TLV is defined as follows:\n    0                   1               \
    \    2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|R|         TLV Type          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             Status            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      M\n         Mandatory, set to one (1)\n      R\n         Reserved, set\
    \ to zero (0)\n      TLV Type\n         3 for Result TLV\n      Length\n     \
    \    2\n      Status\n         The Status field is two octets.  Values include:\n\
    \         1  Success\n         2  Failure\n"
- title: 4.2.3.  NAK TLV
  contents:
  - "4.2.3.  NAK TLV\n   The NAK TLV allows a peer to detect TLVs that are not supported\
    \ by\n   the other peer.  An EAP-FAST packet can contain 0 or more NAK TLVs.\n\
    \   A NAK TLV should not be accompanied by other TLVs.  A NAK TLV MUST\n   NOT\
    \ be sent in response to a message containing a Result TLV, instead\n   a Result\
    \ TLV of failure should be sent indicating failure and an\n   Error TLV of Unexpected_TLVs_Exchanged.\
    \  The NAK TLV is defined as\n   follows:\n    0                   1         \
    \          2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|R|         TLV Type          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Vendor-Id                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            NAK-Type           |           TLVs...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      M\n         Mandatory, set to one (1)\n      R\n         Reserved, set\
    \ to zero (0)\n      TLV Type\n         4 for NAK TLV\n      Length\n        \
    \ >=6\n      Vendor-Id\n         The Vendor-Id field is four octets, and contains\
    \ the Vendor-Id\n         of the TLV that was not supported.  The high-order octet\
    \ is 0\n         and the low-order three octets are the Structure of Management\n\
    \         Information (SMI) Network Management Private Enterprise Code of\n  \
    \       the Vendor in network byte order.  The Vendor-Id field MUST be\n     \
    \    zero for TLVs that are not Vendor-Specific TLVs.\n      NAK-Type\n      \
    \   The NAK-Type field is two octets.  The field contains the Type\n         of\
    \ the TLV that was not supported.  A TLV of this Type MUST\n         have been\
    \ included in the previous packet.\n      TLVs\n         This field contains a\
    \ list of zero or more TLVs, each of which\n         MUST NOT have the mandatory\
    \ bit set.  These optional TLVs are\n         for future extensibility to communicate\
    \ why the offending TLV\n         was determined to be unsupported.\n"
- title: 4.2.4.  Error TLV
  contents:
  - "4.2.4.  Error TLV\n   The Error TLV allows an EAP peer or server to indicate\
    \ errors to the\n   other party.  An EAP-FAST packet can contain 0 or more Error\
    \ TLVs.\n   The Error-Code field describes the type of error.  Error Codes 1-999\n\
    \   represent successful outcomes (informative messages), 1000-1999\n   represent\
    \ warnings, and codes 2000-2999 represent fatal errors.  A\n   fatal Error TLV\
    \ MUST be accompanied by a Result TLV indicating\n   failure and the conversation\
    \ must be terminated as described in\n   Section 3.6.2.  The Error TLV is defined\
    \ as follows:\n    0                   1                   2                 \
    \  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |M|R|\
    \         TLV Type          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Error-Code                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      M\n         Mandatory, set to one (1)\n      R\n         Reserved, set\
    \ to zero (0)\n      TLV Type\n         5 for Error TLV\n      Length\n      \
    \   4\n      Error-Code\n         The Error-Code field is four octets.  Currently\
    \ defined values\n         for Error-Code include:\n            2001 Tunnel_Compromise_Error\n\
    \            2002 Unexpected_TLVs_Exchanged\n"
- title: 4.2.5.  Vendor-Specific TLV
  contents:
  - "4.2.5.  Vendor-Specific TLV\n   The Vendor-Specific TLV is available to allow\
    \ vendors to support\n   their own extended attributes not suitable for general\
    \ usage.  A\n   Vendor-Specific TLV attribute can contain one or more TLVs, referred\n\
    \   to as Vendor TLVs.  The TLV-type of a Vendor-TLV is defined by the\n   vendor.\
    \  All the Vendor TLVs inside a single Vendor-Specific TLV\n   belong to the same\
    \ vendor.  There can be multiple Vendor-Specific\n   TLVs from different vendors\
    \ in the same message.\n   Vendor TLVs may be optional or mandatory.  Vendor TLVs\
    \ sent with\n   Result TLVs MUST be marked as optional.\n   The Vendor-Specific\
    \ TLV is defined as follows:\n    0                   1                   2  \
    \                 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|R|         TLV Type          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Vendor-Id                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Vendor TLVs...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      M\n         0 or 1\n      R\n         Reserved, set to zero (0)\n     \
    \ TLV Type\n         7 for Vendor Specific TLV\n      Length\n         4 + cumulative\
    \ length of all included Vendor TLVs\n      Vendor-Id\n         The Vendor-Id\
    \ field is four octets, and contains the Vendor-Id\n         of the TLV.  The\
    \ high-order octet is 0 and the low-order 3\n         octets are the SMI Network\
    \ Management Private Enterprise Code\n         of the Vendor in network byte order.\n\
    \      Vendor TLVs\n         This field is of indefinite length.  It contains\
    \ vendor-\n         specific TLVs, in a format defined by the vendor.\n"
- title: 4.2.6.  EAP-Payload TLV
  contents:
  - "4.2.6.  EAP-Payload TLV\n   To allow piggybacking an EAP request or response\
    \ with other TLVs, the\n   EAP-Payload TLV is defined, which includes an encapsulated\
    \ EAP packet\n   and a list of optional TLVs.  The optional TLVs are provided\
    \ for\n   future extensibility to provide hints about the current EAP\n   authentication.\
    \  Only one EAP-Payload TLV is allowed in a message.\n   The EAP-Payload TLV is\
    \ defined as follows:\n   0                   1                   2          \
    \         3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |M|R|         TLV Type          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          EAP packet...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             TLVs...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      M\n         Mandatory, set to (1)\n      R\n         Reserved, set to zero\
    \ (0)\n      TLV Type\n         9 for EAP-Payload TLV\n      Length\n        \
    \ length of embedded EAP packet + cumulative length of additional\n         TLVs\n\
    \      EAP packet\n         This field contains a complete EAP packet, including\
    \ the EAP\n         header (Code, Identifier, Length, Type) fields.  The length\
    \ of\n         this field is determined by the Length field of the\n         encapsulated\
    \ EAP packet.\n       TLVs\n         This field contains a list of zero or more\
    \ TLVs associated with\n         the EAP packet field.  The TLVs MUST NOT have\
    \ the mandatory bit\n         set.  The total length of this field is equal to\
    \ the Length\n         field of the EAP-Payload TLV, minus the Length field in\
    \ the EAP\n         header of the EAP packet field.\n"
- title: 4.2.7.  Intermediate-Result TLV
  contents:
  - "4.2.7.  Intermediate-Result TLV\n   The Intermediate-Result TLV provides support\
    \ for acknowledged\n   intermediate Success and Failure messages between multiple\
    \ inner EAP\n   methods within EAP.  An Intermediate-Result TLV indicating success\n\
    \   MUST be accompanied by a Crypto-Binding TLV.  The optional TLVs\n   associated\
    \ with this TLV are provided for future extensibility to\n   provide hints about\
    \ the current result.  The Intermediate-Result TLV\n   is defined as follows:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|R|         TLV Type          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             Status            |        TLVs...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      M\n         Mandatory, set to (1)\n      R\n         Reserved, set to zero\
    \ (0)\n      TLV Type\n         10 for Intermediate-Result TLV\n      Length\n\
    \         2 + cumulative length of the embedded associated TLVs\n      Status\n\
    \         The Status field is two octets.  Values include:\n         1  Success\n\
    \         2  Failure\n      TLVs\n         This field is of indeterminate length,\
    \ and contains zero or\n         more of the TLVs associated with the Intermediate\
    \ Result TLV.\n         The TLVs in this field MUST NOT have the mandatory bit\
    \ set.\n"
- title: 4.2.8.  Crypto-Binding TLV
  contents:
  - "4.2.8.  Crypto-Binding TLV\n   The Crypto-Binding TLV is used to prove that both\
    \ the peer and server\n   participated in the tunnel establishment and sequence\
    \ of\n   authentications.  It also provides verification of the EAP-FAST\n   version\
    \ negotiated before TLS tunnel establishment, see Section 3.1.\n   The Crypto-Binding\
    \ TLV MUST be included with the Intermediate-Result\n   TLV to perform Cryptographic\
    \ Binding after each successful EAP method\n   in a sequence of EAP methods. \
    \ The Crypto-Binding TLV can be issued\n   at other times as well.\n   The Crypto-Binding\
    \ TLV is valid only if the following checks pass:\n   o  The Crypto-Binding TLV\
    \ version is supported\n   o  The MAC verifies correctly\n   o  The received version\
    \ in the Crypto-Binding TLV matches the version\n      sent by the receiver during\
    \ the EAP version negotiation\n   o  The subtype is set to the correct value\n\
    \   If any of the above checks fail, then the TLV is invalid.  An invalid\n  \
    \ Crypto-Binding TLV is a fatal error and is handled as described in\n   Section\
    \ 3.6.2.\n   The Crypto-Binding TLV is defined as follows:\n    0            \
    \       1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|R|         TLV Type          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Reserved   |    Version    | Received Ver. |    Sub-Type   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                           Nonce                             ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                        Compound MAC                         ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      M\n         Mandatory, set to (1)\n      R\n         Reserved, set to zero\
    \ (0)\n      TLV Type\n         12 for Crypto-Binding TLV\n      Length\n    \
    \     56\n      Reserved\n         Reserved, set to zero (0)\n      Version\n\
    \         The Version field is a single octet, which is set to the\n         version\
    \ of Crypto-Binding TLV the EAP method is using.  For an\n         implementation\
    \ compliant with this version of EAP-FAST, the\n         version number MUST be\
    \ set to 1.\n      Received Version\n         The Received Version field is a\
    \ single octet and MUST be set to\n         the EAP version number received during\
    \ version negotiation.\n         Note that this field only provides protection\
    \ against downgrade\n         attacks, where a version of EAP requiring support\
    \ for this TLV\n         is required on both sides.\n      Sub-Type\n        \
    \ The Sub-Type field is one octet.  Defined values include:\n         0  Binding\
    \ Request\n         1  Binding Response\n      Nonce\n         The Nonce field\
    \ is 32 octets.  It contains a 256-bit nonce that\n         is temporally unique,\
    \ used for compound MAC key derivation at\n         each end.  The nonce in a\
    \ request MUST have its least\n         significant bit set to 0 and the nonce\
    \ in a response MUST have\n         the same value as the request nonce except\
    \ the least\n         significant bit MUST be set to 1.\n      Compound MAC\n\
    \         The Compound MAC field is 20 octets.  This can be the Server\n     \
    \    MAC (B1_MAC) or the Client MAC (B2_MAC).  The computation of\n         the\
    \ MAC is described in Section 5.3.\n"
- title: 4.2.9.  Request-Action TLV
  contents:
  - "4.2.9.  Request-Action TLV\n   The Request-Action TLV MAY be sent by the peer\
    \ along with a Result\n   TLV in response to a server's successful Result TLV.\
    \  It allows the\n   peer to request the EAP server to negotiate additional EAP\
    \ methods or\n   process TLVs specified in the response packet.  The server MAY\
    \ ignore\n   this TLV.\n   The Request-Action TLV is defined as follows:\n   \
    \ 0                   1                   2                   3\n    0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|R|         TLV Type          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             Action            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      M\n         Mandatory set to one (1)\n      R\n         Reserved, set to\
    \ zero (0)\n      TLV Type\n         19 for Request-Action TLV\n      Length\n\
    \         2\n      Action\n         The Action field is two octets.  Values include:\n\
    \            Process-TLV\n            Negotiate-EAP\n"
- title: 4.3.  Table of TLVs
  contents:
  - "4.3.  Table of TLVs\n   The following table provides a guide to which TLVs may\
    \ be found in\n   which kinds of messages, and in what quantity.  The messages\
    \ are as\n   follows: Request is an EAP-FAST Request, Response is an EAP-FAST\n\
    \   Response, Success is a message containing a successful Result TLV,\n   and\
    \ Failure is a message containing a failed Result TLV.\n   Request  Response \
    \   Success   Failure   TLVs\n   0-1      0-1         0-1       0-1       Intermediate-Result\n\
    \   0-1      0-1         0         0         EAP-Payload\n   0-1      0-1    \
    \     1         1         Result\n   0-1      0-1         0-1       0-1      \
    \ Crypto-Binding\n   0+       0+          0+        0+        Error\n   0+   \
    \    0+          0         0         NAK\n   0+       0+          0+        0+\
    \        Vendor-Specific [NOTE1]\n   0        0-1         0-1       0-1      \
    \ Request-Action\n   [NOTE1] Vendor TLVs (included in Vendor-Specific TLVs) sent\
    \ with a\n   Result TLV MUST be marked as optional.\n   The following table defines\
    \ the meaning of the table entries in the\n   sections below:\n   0   This TLV\
    \ MUST NOT be present in the message.\n   0+  Zero or more instances of this TLV\
    \ MAY be present in the message.\n   0-1 Zero or one instance of this TLV MAY\
    \ be present in the message.\n   1   Exactly one instance of this TLV MUST be\
    \ present in the message.\n"
- title: 5.  Cryptographic Calculations
  contents:
  - '5.  Cryptographic Calculations

    '
- title: '5.1.  EAP-FAST Authentication Phase 1: Key Derivations'
  contents:
  - "5.1.  EAP-FAST Authentication Phase 1: Key Derivations\n   The EAP-FAST Authentication\
    \ tunnel key is calculated similarly to the\n   TLS key calculation with an additional\
    \ 40 octets (referred to as the\n   session_key_seed) generated.  The additional\
    \ session_key_seed is used\n   in the Session Key calculation in the EAP-FAST\
    \ Tunneled\n   Authentication conversation.\n   To generate the key material required\
    \ for the EAP-FAST Authentication\n   tunnel, the following construction from\
    \ [RFC4346] is used:\n      key_block = PRF(master_secret, \"key expansion\",\n\
    \           server_random + client_random)\n   where '+' denotes concatenation.\n\
    \   The PRF function used to generate keying material is defined by\n   [RFC4346].\n\
    \   For example, if the EAP-FAST Authentication employs 128-bit RC4 and\n   SHA1,\
    \ the key_block is 112 octets long and is partitioned as follows:\n      client_write_MAC_secret[20]\n\
    \      server_write_MAC_secret[20]\n      client_write_key[16]\n      server_write_key[16]\n\
    \      client_write_IV[0]\n      server_write_IV[0]\n      session_key_seed[40]\n\
    \   The session_key_seed is used by the EAP-FAST Authentication Phase 2\n   conversation\
    \ to both cryptographically bind the inner method(s) to\n   the tunnel as well\
    \ as generate the resulting EAP-FAST session keys.\n   The other quantities are\
    \ used as they are defined in [RFC4346].\n   The master_secret is generated as\
    \ specified in TLS unless a PAC is\n   used to establish the TLS tunnel.  When\
    \ a PAC is used to establish\n   the TLS tunnel, the master_secret is calculated\
    \ from the specified\n   client_random, server_random, and PAC-Key as follows:\n\
    \      master_secret = T-PRF(PAC-Key, \"PAC to master secret label hash\",\n \
    \          server_random + client_random, 48)\n   where T-PRF is described in\
    \ Section 5.5.\n"
- title: 5.2.  Intermediate Compound Key Derivations
  contents:
  - "5.2.  Intermediate Compound Key Derivations\n   The session_key_seed derived\
    \ as part of EAP-FAST Phase 2 is used in\n   EAP-FAST Phase 2 to generate an Intermediate\
    \ Compound Key (IMCK) used\n   to verify the integrity of the TLS tunnel after\
    \ each successful inner\n   authentication and in the generation of Master Session\
    \ Key (MSK) and\n   Extended Master Session Key (EMSK) defined in [RFC3748]. \
    \ Note that\n   the IMCK must be recalculated after each successful inner EAP\
    \ method.\n   The first step in these calculations is the generation of the base\n\
    \   compound key, IMCK[n] from the session_key_seed and any session keys\n   derived\
    \ from the successful execution of n inner EAP methods.  The\n   inner EAP method(s)\
    \ may provide Master Session Keys, MSK1..MSKn,\n   corresponding to inner methods\
    \ 1 through n.  The MSK is truncated at\n   32 octets if it is longer than 32\
    \ octets or padded to a length of 32\n   octets with zeros if it is less than\
    \ 32 octets.  If the ith inner\n   method does not generate an MSK, then MSKi\
    \ is set to zero (e.g., MSKi\n   = 32 octets of 0x00s).  If an inner method fails,\
    \ then it is not\n   included in this calculation.  The derivations of S-IMCK\
    \ is as\n   follows:\n      S-IMCK[0] = session_key_seed\n      For j = 1 to n-1\
    \ do\n           IMCK[j] = T-PRF(S-IMCK[j-1], \"Inner Methods Compound Keys\"\
    ,\n                MSK[j], 60)\n           S-IMCK[j] = first 40 octets of IMCK[j]\n\
    \           CMK[j] = last 20 octets of IMCK[j]\n   where T-PRF is described in\
    \ Section 5.5.\n"
- title: 5.3.  Computing the Compound MAC
  contents:
  - "5.3.  Computing the Compound MAC\n   For authentication methods that generate\
    \ keying material, further\n   protection against man-in-the-middle attacks is\
    \ provided through\n   cryptographically binding keying material established by\
    \ both EAP-\n   FAST Phase 1 and EAP-FAST Phase 2 conversations.  After each\n\
    \   successful inner EAP authentication, EAP MSKs are cryptographically\n   combined\
    \ with key material from EAP-FAST Phase 1 to generate a\n   compound session key,\
    \ CMK.  The CMK is used to calculate the Compound\n   MAC as part of the Crypto-Binding\
    \ TLV described in Section 4.2.8,\n   which helps provide assurance that the same\
    \ entities are involved in\n   all communications in EAP-FAST.  During the calculation\
    \ of the\n   Compound-MAC the MAC field is filled with zeros.\n   The Compound\
    \ MAC computation is as follows:\n      CMK = CMK[j]\n      Compound-MAC = HMAC-SHA1(\
    \ CMK, Crypto-Binding TLV )\n   where j is the number of the last successfully\
    \ executed inner EAP\n   method.\n"
- title: 5.4.  EAP Master Session Key Generation
  contents:
  - "5.4.  EAP Master Session Key Generation\n   EAP-FAST Authentication assures the\
    \ master session key (MSK) and\n   Extended Master Session Key (EMSK) output from\
    \ the EAP method are the\n   result of all authentication conversations by generating\
    \ an\n   Intermediate Compound Key (IMCK).  The IMCK is mutually derived by\n\
    \   the peer and the server as described in Section 5.2 by combining the\n   MSKs\
    \ from inner EAP methods with key material from EAP-FAST Phase 1.\n   The resulting\
    \ MSK and EMSK are generated as part of the IMCKn key\n   hierarchy as follows:\n\
    \      MSK  = T-PRF(S-IMCK[j], \"Session Key Generating Function\", 64)\n    \
    \  EMSK = T-PRF(S-IMCK[j],\n             \"Extended Session Key Generating Function\"\
    , 64)\n   where j is the number of the last successfully executed inner EAP\n\
    \   method.\n   The EMSK is typically only known to the EAP-FAST peer and server\
    \ and\n   is not provided to a third party.  The derivation of additional keys\n\
    \   and transportation of these keys to a third party is outside the\n   scope\
    \ of this document.\n   If no EAP methods have been negotiated inside the tunnel\
    \ or no EAP\n   methods have been successfully completed inside the tunnel, the\
    \ MSK\n   and EMSK will be generated directly from the session_key_seed meaning\n\
    \   S-IMCK = session_key_seed.\n"
- title: 5.5.  T-PRF
  contents:
  - "5.5.  T-PRF\n   EAP-FAST employs the following PRF prototype and definition:\n\
    \      T-PRF = F(key, label, seed, outputlength)\n   Where label is intended to\
    \ be a unique label for each different use\n   of the T-PRF.  The outputlength\
    \ parameter is a two-octet value that\n   is represented in big endian order.\
    \  Also note that the seed value\n   may be optional and may be omitted as in\
    \ the case of the MSK\n   derivation described in Section 5.4.\n   To generate\
    \ the desired outputlength octets of key material, the\n   T-PRF is calculated\
    \ as follows:\n      S = label + 0x00 + seed\n      T-PRF output = T1 + T2 + T3\
    \  + ... + Tn\n      T1 = HMAC-SHA1 (key, S + outputlength + 0x01)\n      T2 =\
    \ HMAC-SHA1 (key, T1 + S + outputlength + 0x02)\n      T3 = HMAC-SHA1 (key, T2\
    \ + S + outputlength + 0x03)\n      Tn = HMAC-SHA1 (key, Tn-1 + S + outputlength\
    \ + 0xnn)\n   where '+' indicates concatenation.  Each Ti generates 20-octets\
    \ of\n   keying material.  The last Tn may be truncated to accommodate the\n \
    \  desired length specified by outputlength.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This section provides guidance to the Internet Assigned\
    \ Numbers\n   Authority (IANA) regarding registration of values related to the\
    \ EAP-\n   FAST protocol, in accordance with BCP 26, [RFC2434].\n   EAP-FAST has\
    \ already been assigned the EAP Method Type number 43.\n   The document defines\
    \ a registry for EAP-FAST TLV types, which may be\n   assigned by Specification\
    \ Required as defined in [RFC2434].\n   Section 4.2 defines the TLV types that\
    \ initially populate the\n   registry.  A summary of the EAP-FAST TLV types is\
    \ given below:\n   0  Reserved\n   1  Reserved\n   2  Reserved\n   3  Result TLV\n\
    \   4  NAK TLV\n   5  Error TLV\n   7  Vendor-Specific TLV\n   9  EAP-Payload\
    \ TLV\n   10 Intermediate-Result TLV\n   11 PAC TLV [EAP-PROV]\n   12 Crypto-Binding\
    \ TLV\n   18 Server-Trusted-Root TLV [EAP-PROV]\n   19 Request-Action TLV\n  \
    \ 20 PKCS#7 TLV [EAP-PROV]\n   The Error-TLV defined in Section 4.2.4 requires\
    \ an error-code.  EAP-\n   FAST Error-TLV error-codes are assigned based on specifications\n\
    \   required as defined in [RFC2434].  The initial list of error codes is\n  \
    \ as follows:\n      2001 Tunnel_Compromise_Error\n      2002 Unexpected_TLVs_Exchanged\n\
    \   The Request-Action TLV defined in Section 4.2.9 contains an action\n   code\
    \ which is assigned on a specification required basis as defined\n   in [RFC2434].\
    \  The initial actions defined are:\n      1  Process-TLV\n      2  Negotiate-EAP\n\
    \   The various values under Vendor-Specific TLV are assigned by Private\n   Use\
    \ and do not need to be assigned by IANA.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   EAP-FAST is designed with a focus on wireless\
    \ media, where the medium\n   itself is inherent to eavesdropping.  Whereas in\
    \ wired media, an\n   attacker would have to gain physical access to the wired\
    \ medium;\n   wireless media enables anyone to capture information as it is\n\
    \   transmitted over the air, enabling passive attacks.  Thus, physical\n   security\
    \ can not be assumed and security vulnerabilities are far\n   greater.  The threat\
    \ model used for the security evaluation of EAP-\n   FAST is defined in the EAP\
    \ [RFC3748].\n"
- title: 7.1.  Mutual Authentication and Integrity Protection
  contents:
  - "7.1.  Mutual Authentication and Integrity Protection\n   EAP-FAST as a whole,\
    \ provides message and integrity protection by\n   establishing a secure tunnel\
    \ for protecting the authentication\n   method(s).  The confidentiality and integrity\
    \ protection is defined\n   by TLS and provides the same security strengths afforded\
    \ by TLS\n   employing a strong entropy shared master secret.  The integrity of\n\
    \   the key generating authentication methods executed within the EAP-\n   FAST\
    \ tunnel is verified through the calculation of the Crypto-Binding\n   TLV.  This\
    \ ensures that the tunnel endpoints are the same as the\n   inner method endpoints.\n\
    \   The Result TLV is protected and conveys the true Success or Failure\n   of\
    \ EAP-FAST, and should be used as the indicator of its success or\n   failure\
    \ respectively.  However, as EAP must terminate with a clear\n   text EAP Success\
    \ or Failure, a peer will also receive a clear text\n   EAP Success or Failure.\
    \  The received clear text EAP success or\n   failure must match that received\
    \ in the Result TLV; the peer SHOULD\n   silently discard those clear text EAP\
    \ Success or Failure messages\n   that do not coincide with the status sent in\
    \ the protected Result\n   TLV.\n"
- title: 7.2.  Method Negotiation
  contents:
  - "7.2.  Method Negotiation\n   As is true for any negotiated EAP protocol, NAK\
    \ packets used to\n   suggest an alternate authentication method are sent unprotected\
    \ and\n   as such, are subject to spoofing.  During unprotected EAP method\n \
    \  negotiation, NAK packets may be interjected as active attacks to\n   negotiate\
    \ down to a weaker form of authentication, such as EAP-MD5\n   (which only provides\
    \ one-way authentication and does not derive a\n   key).  Both the peer and server\
    \ should have a method selection policy\n   that prevents them from negotiating\
    \ down to weaker methods.  Inner\n   method negotiation resists attacks because\
    \ it is protected by the\n   mutually authenticated TLS tunnel established.  Selection\
    \ of EAP-FAST\n   as an authentication method does not limit the potential inner\n\
    \   authentication methods, so EAP-FAST should be selected when\n   available.\n\
    \   An attacker cannot readily determine the inner EAP method used,\n   except\
    \ perhaps by traffic analysis.  It is also important that peer\n   implementations\
    \ limit the use of credentials with an unauthenticated\n   or unauthorized server.\n"
- title: 7.3.  Separation of Phase 1 and Phase 2 Servers
  contents:
  - "7.3.  Separation of Phase 1 and Phase 2 Servers\n   Separation of the EAP-FAST\
    \ Phase 1 from the Phase 2 conversation is\n   not recommended.  Allowing the\
    \ Phase 1 conversation to be terminated\n   at a different server than the Phase\
    \ 2 conversation can introduce\n   vulnerabilities if there is not a proper trust\
    \ relationship and\n   protection for the protocol between the two servers.  Some\n\
    \   vulnerabilities include:\n   o  Loss of identity protection\n   o  Offline\
    \ dictionary attacks\n   o  Lack of policy enforcement\n   There may be cases\
    \ where a trust relationship exists between the\n   Phase 1 and Phase 2 servers,\
    \ such as on a campus or between two\n   offices within the same company, where\
    \ there is no danger in\n   revealing the inner identity and credentials of the\
    \ peer to entities\n   between the two servers.  In these cases, using a proxy\
    \ solution\n   without end-to-end protection of EAP-FAST MAY be used.  The EAP-FAST\n\
    \   encrypting/decrypting gateway SHOULD, at a minimum, provide support\n   for\
    \ IPsec or similar protection in order to provide confidentiality\n   for the\
    \ portion of the conversation between the gateway and the EAP\n   server.\n"
- title: 7.4.  Mitigation of Known Vulnerabilities and Protocol Deficiencies
  contents:
  - "7.4.  Mitigation of Known Vulnerabilities and Protocol Deficiencies\n   EAP-FAST\
    \ addresses the known deficiencies and weaknesses in the EAP\n   method.  By employing\
    \ a shared secret between the peer and server to\n   establish a secured tunnel,\
    \ EAP-FAST enables:\n   o  Per packet confidentiality and integrity protection\n\
    \   o  User identity protection\n   o  Better support for notification messages\n\
    \   o  Protected EAP inner method negotiation\n   o  Sequencing of EAP methods\n\
    \   o  Strong mutually derived master session keys\n   o  Acknowledged success/failure\
    \ indication\n   o  Faster re-authentications through session resumption\n   o\
    \  Mitigation of dictionary attacks\n   o  Mitigation of man-in-the-middle attacks\n\
    \   o  Mitigation of some denial-of-service attacks\n   It should be noted that\
    \ with EAP-FAST, as in many other\n   authentication protocols, a denial-of-service\
    \ attack can be mounted\n   by adversaries sending erroneous traffic to disrupt\
    \ the protocol.\n   This is a problem in many authentication or key agreement\
    \ protocols\n   and is therefore noted for EAP-FAST as well.\n   EAP-FAST was\
    \ designed with a focus on protected authentication\n   methods that typically\
    \ rely on weak credentials, such as password-\n   based secrets.  To that extent,\
    \ the EAP-FAST Authentication mitigates\n   several vulnerabilities, such as dictionary\
    \ attacks, by protecting\n   the weak credential-based authentication method.\
    \  The protection is\n   based on strong cryptographic algorithms in TLS to provide\
    \ message\n   confidentiality and integrity.  The keys derived for the protection\n\
    \   relies on strong random challenges provided by both peer and server\n   as\
    \ well as an established key with strong entropy.  Implementations\n   should\
    \ follow the recommendation in [RFC4086] when generating random\n   numbers.\n"
- title: 7.4.1.  User Identity Protection and Verification
  contents:
  - "7.4.1.  User Identity Protection and Verification\n   The initial identity request\
    \ response exchange is sent in cleartext\n   outside the protection of EAP-FAST.\
    \  Typically the Network Access\n   Identifier (NAI) [RFC4282] in the identity\
    \ response is useful only\n   for the realm information that is used to route\
    \ the authentication\n   requests to the right EAP server.  This means that the\
    \ identity\n   response may contain an anonymous identity and just contain realm\n\
    \   information.  In other cases, the identity exchange may be eliminated\n  \
    \ altogether if there are other means for establishing the destination\n   realm\
    \ of the request.  In no case should an intermediary place any\n   trust in the\
    \ identity information in the identity response since it\n   is unauthenticated\
    \ an may not have any relevance to the authenticated\n   identity.  EAP-FAST implementations\
    \ should not attempt to compare any\n   identity disclosed in the initial cleartext\
    \ EAP Identity response\n   packet with those Identities authenticated in Phase\
    \ 2\n   Identity request-response exchanges sent after the EAP-FAST tunnel is\n\
    \   established are protected from modification and eavesdropping by\n   attackers.\n\
    \   Note that since TLS client certificates are sent in the clear, if\n   identity\
    \ protection is required, then it is possible for the TLS\n   authentication to\
    \ be re-negotiated after the first server\n   authentication.  To accomplish this,\
    \ the server will typically not\n   request a certificate in the server_hello,\
    \ then after the\n   server_finished message is sent, and before EAP-FAST Phase\
    \ 2, the\n   server MAY send a TLS hello_request.  This allows the client to\n\
    \   perform client authentication by sending a client_hello if it wants\n   to,\
    \ or send a no_renegotiation alert to the server indicating that it\n   wants\
    \ to continue with EAP-FAST Phase 2 instead.  Assuming that the\n   client permits\
    \ renegotiation by sending a client_hello, then the\n   server will respond with\
    \ server_hello, a certificate and\n   certificate_request messages.  The client\
    \ replies with certificate,\n   client_key_exchange and certificate_verify messages.\
    \  Since this re-\n   negotiation occurs within the encrypted TLS channel, it\
    \ does not\n   reveal client certificate details.  It is possible to perform\n\
    \   certificate authentication using an EAP method (for example: EAP-TLS)\n  \
    \ within the TLS session in EAP-FAST Phase 2 instead of using TLS\n   handshake\
    \ renegotiation.\n"
- title: 7.4.2.  Dictionary Attack Resistance
  contents:
  - "7.4.2.  Dictionary Attack Resistance\n   EAP-FAST was designed with a focus on\
    \ protected authentication\n   methods that typically rely on weak credentials,\
    \ such as password-\n   based secrets.  EAP-FAST mitigates dictionary attacks\
    \ by allowing the\n   establishment of a mutually authenticated encrypted TLS\
    \ tunnel\n   providing confidentiality and integrity to protect the weak\n   credential\
    \ based authentication method.\n"
- title: 7.4.3.  Protection against Man-in-the-Middle Attacks
  contents:
  - "7.4.3.  Protection against Man-in-the-Middle Attacks\n   Allowing methods to\
    \ be executed both with and without the protection\n   of a secure tunnel opens\
    \ up a possibility of a man-in-the-middle\n   attack.  To avoid man-in-the-middle\
    \ attacks it is recommended to\n   always deploy authentication methods with protection\
    \ of EAP-FAST.\n   EAP-FAST provides protection from man-in-the-middle attacks\
    \ even if a\n   deployment chooses to execute inner EAP methods both with and\
    \ without\n   EAP-FAST protection, EAP-FAST prevents this attack in two ways:\n\
    \   1.  By using the PAC-Key to mutually authenticate the peer and server\n  \
    \     during EAP-FAST Authentication Phase 1 establishment of a secure\n     \
    \  tunnel.\n   2.  By using the keys generated by the inner authentication method\n\
    \       (if the inner methods are key generating) in the crypto-binding\n    \
    \   exchange and in the generation of the key material exported by\n       the\
    \ EAP method described in Section 5.\n"
- title: 7.4.4.  PAC Binding to User Identity
  contents:
  - "7.4.4.  PAC Binding to User Identity\n   A PAC may be bound to a user identity.\
    \  A compliant implementation of\n   EAP-FAST MUST validate that an identity obtained\
    \ in the PAC-Opaque\n   field matches at minimum one of the identities provided\
    \ in the EAP-\n   FAST Phase 2 authentication method.  This validation provides\
    \ another\n   binding to ensure that the intended peer (based on identity) has\n\
    \   successfully completed the EAP-FAST Phase 1 and proved identity in\n   the\
    \ Phase 2 conversations.\n"
- title: 7.5.  Protecting against Forged Clear Text EAP Packets
  contents:
  - "7.5.  Protecting against Forged Clear Text EAP Packets\n   EAP Success and EAP\
    \ Failure packets are, in general, sent in clear\n   text and may be forged by\
    \ an attacker without detection.  Forged EAP\n   Failure packets can be used to\
    \ attempt to convince an EAP peer to\n   disconnect.  Forged EAP Success packets\
    \ may be used to attempt to\n   convince a peer that authentication has succeeded,\
    \ even though the\n   authenticator has not authenticated itself to the peer.\n\
    \   By providing message confidentiality and integrity, EAP-FAST provides\n  \
    \ protection against these attacks.  Once the peer and AS initiate the\n   EAP-FAST\
    \ Authentication Phase 2, compliant EAP-FAST implementations\n   must silently\
    \ discard all clear text EAP messages, unless both the\n   EAP-FAST peer and server\
    \ have indicated success or failure using a\n   protected mechanism.  Protected\
    \ mechanisms include TLS alert\n   mechanism and the protected termination mechanism\
    \ described in\n   Section 3.3.2.\n   The success/failure decisions within the\
    \ EAP-FAST tunnel indicate the\n   final decision of the EAP-FAST authentication\
    \ conversation.  After a\n   success/failure result has been indicated by a protected\
    \ mechanism,\n   the EAP-FAST peer can process unprotected EAP success and EAP\
    \ failure\n   messages; however the peer MUST ignore any unprotected EAP success\
    \ or\n   failure messages where the result does not match the result of the\n\
    \   protected mechanism.\n   To abide by [RFC3748], the server must send a clear\
    \ text EAP Success\n   or EAP Failure packet to terminate the EAP conversation.\
    \  However,\n   since EAP Success and EAP Failure packets are not retransmitted,\
    \ the\n   final packet may be lost.  While an EAP-FAST protected EAP Success or\n\
    \   EAP Failure packet should not be a final packet in an EAP-FAST\n   conversation,\
    \ it may occur based on the conditions stated above, so\n   an EAP peer should\
    \ not rely upon the unprotected EAP success and\n   failure messages.\n"
- title: 7.6.  Server Certificate Validation
  contents:
  - "7.6.  Server Certificate Validation\n   As part of the TLS negotiation, the server\
    \ presents a certificate to\n   the peer.  The peer MUST verify the validity of\
    \ the EAP server\n   certificate, and SHOULD also examine the EAP server name\
    \ presented in\n   the certificate, in order to determine whether the EAP server\
    \ can be\n   trusted.  Please note that in the case where the EAP authentication\n\
    \   is remote, the EAP server will not reside on the same machine as the\n   authenticator,\
    \ and therefore the name in the EAP server's certificate\n   cannot be expected\
    \ to match that of the intended destination.  In\n   this case, a more appropriate\
    \ test might be whether the EAP server's\n   certificate is signed by a CA controlling\
    \ the intended domain and\n   whether the authenticator can be authorized by a\
    \ server in that\n   domain.\n"
- title: 7.7.  Tunnel PAC Considerations
  contents:
  - "7.7.  Tunnel PAC Considerations\n   Since the Tunnel PAC is stored by the peer,\
    \ special care should be\n   given to the overall security of the peer.  The Tunnel\
    \ PAC must be\n   securely stored by the peer to prevent theft or forgery of any\
    \ of the\n   Tunnel PAC components.\n   In particular, the peer must securely\
    \ store the PAC-Key and protect\n   it from disclosure or modification.  Disclosure\
    \ of the PAC-Key\n   enables an attacker to establish the EAP-FAST tunnel; however,\n\
    \   disclosure of the PAC-Key does not reveal the peer or server identity\n  \
    \ or compromise any other peer's PAC credentials.  Modification of the\n   PAC-Key\
    \ or PAC-Opaque components of the Tunnel PAC may also lead to\n   denial of service\
    \ as the tunnel establishment will fail.\n   The PAC-Opaque component is the effective\
    \ TLS ticket extension used\n   to establish the tunnel using the techniques of\
    \ [RFC4507].  Thus, the\n   security considerations defined by [RFC4507] also\
    \ apply to the PAC-\n   Opaque.\n   The PAC-Info may contain information about\
    \ the Tunnel PAC such as the\n   identity of the PAC issuer and the Tunnel PAC\
    \ lifetime for use in the\n   management of the Tunnel PAC.  The PAC-Info should\
    \ be securely stored\n   by the peer to protect it from disclosure and modification.\n"
- title: 7.8.  Security Claims
  contents:
  - "7.8.  Security Claims\n   This section provides the needed security claim requirement\
    \ for EAP\n   [RFC3748].\n   Auth. mechanism:         Certificate based, shared\
    \ secret based and\n                            various tunneled authentication\
    \ mechanisms.\n   Ciphersuite negotiation: Yes\n   Mutual authentication:   Yes\n\
    \   Integrity protection:    Yes, Any method executed within the EAP-FAST\n  \
    \                          tunnel is integrity protected.  The\n             \
    \               cleartext EAP headers outside the tunnel are\n               \
    \             not integrity protected.\n   Replay protection:       Yes\n   Confidentiality:\
    \         Yes\n   Key derivation:          Yes\n   Key strength:            See\
    \ Note 1 below.\n   Dictionary attack prot.: Yes\n   Fast reconnect:         \
    \ Yes\n   Cryptographic binding:   Yes\n   Session independence:    Yes\n   Fragmentation:\
    \           Yes\n   Key Hierarchy:           Yes\n   Channel binding:        \
    \ No, but TLVs could be defined for this.\n   Notes\n   1.  BCP 86 [RFC3766] offers\
    \ advice on appropriate key sizes.  The\n       National Institute for Standards\
    \ and Technology (NIST) also\n       offers advice on appropriate key sizes in\
    \ [NIST.SP800-57].\n       [RFC3766] Section 5 advises use of the following required\
    \ RSA or\n       DH module and DSA subgroup size in bits, for a given level of\n\
    \       attack resistance in bits.  Based on the table below, a 2048-bit\n   \
    \    RSA key is required to provide 128-bit equivalent key strength:\n      Attack\
    \ Resistance     RSA or DH Modulus            DSA subgroup\n       (bits)    \
    \              size (bits)                size (bits)\n      -----------------\
    \     -----------------            ------------\n         70                 \
    \       947                        129\n         80                       1228\
    \                        148\n         90                       1553         \
    \               167\n        100                       1926                  \
    \      186\n        150                       4575                        284\n\
    \        200                       8719                        383\n        250\
    \                      14596                        482\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The EAP-FAST design and protocol specification is based\
    \ on the ideas\n   and hard efforts of Pad Jakkahalli, Mark Krischer, Doug Smith,\
    \ and\n   Glen Zorn of Cisco Systems, Inc.\n   The TLV processing was inspired\
    \ from work on the Protected Extensible\n   Authentication Protocol version 2\
    \ (PEAPv2) with Ashwin Palekar, Dan\n   Smith, and Simon Josefsson.  Helpful review\
    \ comments were provided by\n   Russ Housley, Jari Arkko, Bernard Aboba, Ilan\
    \ Frenkel, and Jeremy\n   Steiglitz.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]           Bradner, S., \"Key words for\
    \ use in RFCs to\n                       Indicate Requirement Levels\", BCP 14,\
    \ RFC 2119,\n                       March 1997.\n   [RFC2246]           Dierks,\
    \ T. and C. Allen, \"The TLS Protocol\n                       Version 1.0\", RFC\
    \ 2246, January 1999.\n   [RFC2434]           Narten, T. and H. Alvestrand, \"\
    Guidelines for\n                       Writing an IANA Considerations Section\
    \ in RFCs\",\n                       BCP 26, RFC 2434, October 1998.\n   [RFC3268]\
    \           Chown, P., \"Advanced Encryption Standard (AES)\n                \
    \       Ciphersuites for Transport Layer Security (TLS)\",\n                 \
    \      RFC 3268, June 2002.\n   [RFC3748]           Aboba, B., Blunk, L., Vollbrecht,\
    \ J., Carlson,\n                       J., and H. Levkowetz, \"Extensible Authentication\n\
    \                       Protocol (EAP)\", RFC 3748, June 2004.\n   [RFC4346] \
    \          Dierks, T. and E. Rescorla, \"The Transport Layer\n               \
    \        Security (TLS) Protocol Version 1.1\", RFC 4346,\n                  \
    \     April 2006.\n   [RFC4507]           Salowey, J., Zhou, H., Eronen, P., and\
    \ H.\n                       Tschofenig, \"Transport Layer Security (TLS)\n  \
    \                     Session Resumption without Server-Side State\",\n      \
    \                 RFC 4507, May 2006.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [EAP-PROV]          Cam-Winget, N., \"Dynamic\
    \ Provisioning using EAP-\n                       FAST\", Work in Progress, January\
    \ 2007.\n   [IEEE.802-1X.2004]  \"Local and Metropolitan Area Networks: Port-Based\n\
    \                       Network Access Control\", IEEE Standard 802.1X,\n    \
    \                   December 2004.\n   [NIST.SP800-57]     National Institute\
    \ of Standards and Technology,\n                       \"Recommendation for Key\
    \ Management\", Special\n                       Publication 800-57, May 2006.\n\
    \   [RFC2716]           Aboba, B. and D. Simon, \"PPP EAP TLS\n              \
    \         Authentication Protocol\", RFC 2716, October 1999.\n   [RFC3280]   \
    \        Housley, R., Polk, W., Ford, W., and D. Solo,\n                     \
    \  \"Internet X.509 Public Key Infrastructure\n                       Certificate\
    \ and Certificate Revocation List (CRL)\n                       Profile\", RFC\
    \ 3280, April 2002.\n   [RFC3579]           Aboba, B. and P. Calhoun, \"RADIUS\
    \ (Remote\n                       Authentication Dial In User Service) Support\
    \ For\n                       Extensible Authentication Protocol (EAP)\",\n  \
    \                     RFC 3579, September 2003.\n   [RFC3766]           Orman,\
    \ H. and P. Hoffman, \"Determining Strengths\n                       For Public\
    \ Keys Used For Exchanging Symmetric\n                       Keys\", BCP 86, RFC\
    \ 3766, April 2004.\n   [RFC4072]           Eronen, P., Hiller, T., and G. Zorn,\
    \ \"Diameter\n                       Extensible Authentication Protocol (EAP)\n\
    \                       Application\", RFC 4072, August 2005.\n   [RFC4086]  \
    \         Eastlake, D., Schiller, J., and S. Crocker,\n                      \
    \ \"Randomness Requirements for Security\", BCP 106,\n                       RFC\
    \ 4086, June 2005.\n   [RFC4282]           Aboba, B., Beadles, M., Arkko, J.,\
    \ and P. Eronen,\n                       \"The Network Access Identifier\", RFC\
    \ 4282,\n                       December 2005.\n   [RFC4630]           Housley,\
    \ R. and S. Santesson, \"Update to\n                       DirectoryString Processing\
    \ in the Internet X.509\n                       Public Key Infrastructure Certificate\
    \ and\n                       Certificate Revocation List (CRL) Profile\",\n \
    \                      RFC 4630, August 2006.\n"
- title: Appendix A.  Examples
  contents:
  - "Appendix A.  Examples\n   In the following examples the version field in EAP\
    \ Fast is always\n   assumed to be 1.  The S, M, and L bits are assumed to be\
    \ 0 unless\n   otherwise specified.\n"
- title: A.1.  Successful Authentication
  contents:
  - "A.1.  Successful Authentication\n   The following exchanges show a successful\
    \ EAP-FAST authentication\n   with optional PAC refreshment; the conversation\
    \ will appear as\n   follows:\n       Authenticating Peer     Authenticator\n\
    \       -------------------     -------------\n                              \
    \ <- EAP-Request/\n                               Identity\n       EAP-Response/\n\
    \       Identity (MyID1) ->\n                               <- EAP-Request/EAP-FAST\n\
    \                               (S=1, A-ID)\n       EAP-Response/EAP-FAST\n  \
    \     (TLS client_hello with\n        PAC-Opaque in SessionTicket extension)->\n\
    \                               <- EAP-Request/EAP-FAST\n                    \
    \           (TLS server_hello,\n                                TLS change_cipher_spec,\n\
    \                                TLS finished)\n       EAP-Response/EAP-FAST\n\
    \       (TLS change_cipher_spec,\n        TLS finished) ->\n       TLS channel\
    \ established\n       (Subsequent messages sent within the TLS channel,\n    \
    \                              encapsulated within EAP-FAST)\n               \
    \               <- EAP Payload TLV\n                              (EAP-Request/EAP-GTC(Challenge))\n\
    \       EAP Payload TLV (EAP-Response/\n       EAP-GTC(Response with both\n  \
    \     user name and password)) ->\n       optional additional exchanges (new pin\
    \ mode,\n       password change etc.) ...\n                               <- Intermediate-Result\
    \ TLV (Success)\n                                  Crypto-Binding TLV (Request)\n\
    \       Intermediate-Result TLV (Success)\n       Crypto-Binding TLV(Response)\
    \ ->\n                                <- Result TLV (Success)\n              \
    \                    [Optional PAC TLV]\n       Result TLV (Success)\n       [PAC\
    \ TLV Acknowledgment] ->\n       TLS channel torn down\n       (messages sent\
    \ in clear text)\n                               <- EAP-Success\n"
- title: A.2.  Failed Authentication
  contents:
  - "A.2.  Failed Authentication\n   The following exchanges show a failed EAP-FAST\
    \ authentication due to\n   wrong user credentials; the conversation will appear\
    \ as follows:\n       Authenticating Peer     Authenticator\n       -------------------\
    \     -------------\n                               <- EAP-Request/\n        \
    \                       Identity\n       EAP-Response/\n       Identity (MyID1)\
    \ ->\n                               <- EAP-Request/EAP-FAST\n               \
    \                (S=1, A-ID)\n       EAP-Response/EAP-FAST\n       (TLS client_hello\
    \ with\n        PAC-Opaque in SessionTicket extension)->\n                   \
    \            <- EAP-Request/EAP-FAST\n                               (TLS server_hello,\n\
    \                                TLS change_cipher_spec,\n                   \
    \             TLS finished)\n       EAP-Response/EAP-FAST\n       (TLS change_cipher_spec,\n\
    \        TLS finished) ->\n       TLS channel established\n       (Subsequent\
    \ messages sent within the TLS channel,\n                                  encapsulated\
    \ within EAP-FAST)\n                              <- EAP Payload TLV (EAP-Request/\n\
    \                                EAP-GTC (Challenge))\n       EAP Payload TLV\
    \ (EAP-Response/\n       EAP-GTC (Response with both\n       user name and password))\
    \ ->\n                              <- EAP Payload TLV (EAP-Request/\n       \
    \                         EAP-GTC (error message))\n       EAP Payload TLV (EAP-Response/\n\
    \       EAP-GTC (empty data packet to\n       acknowledge unrecoverable error))\
    \ ->\n                               <- Result TLV (Failure)\n       Result TLV\
    \ (Failure) ->\n       TLS channel torn down\n       (messages sent in clear text)\n\
    \                               <- EAP-Failure\n"
- title: A.3.  Full TLS Handshake using Certificate-based Ciphersuite
  contents:
  - "A.3.  Full TLS Handshake using Certificate-based Ciphersuite\n   In the case\
    \ where an abbreviated TLS handshake is tried and failed,\n   and a fallback to\
    \ certificate-based full TLS handshake occurs within\n   EAP-FAST Phase 1, the\
    \ conversation will appear as follows:\n      Authenticating Peer    Authenticator\n\
    \      -------------------    -------------\n                             <- EAP-Request/Identity\n\
    \      EAP-Response/\n      Identity (MyID1) ->\n      // Identity sent in the\
    \ clear.  May be a hint to help route\n         the authentication request to\
    \ EAP server, instead of the\n         full user identity.\n                 \
    \             <- EAP-Request/EAP-FAST\n                              (S=1, A-ID)\n\
    \      EAP-Response/EAP-FAST\n      (TLS client_hello\n       with PAC-Opaque\
    \ extension)->\n      // Peer sends PAC-Opaque of Tunnel PAC along with a list\
    \ of\n         ciphersuites supported.  If the server rejects the PAC-\n     \
    \    Opaque, it falls through to the full TLS handshake\n                    \
    \          <- EAP-Request/EAP-FAST\n                              (TLS server_hello,\n\
    \                               TLS certificate,\n                           \
    \   [TLS server_key_exchange,]\n                              [TLS certificate_request,]\n\
    \                               TLS server_hello_done)\n      EAP-Response/EAP-FAST\n\
    \      ([TLS certificate,]\n       TLS client_key_exchange,\n      [TLS certificate_verify,]\n\
    \       TLS change_cipher_spec,\n       TLS finished) ->\n                   \
    \           <- EAP-Request/EAP-FAST\n                              (TLS change_cipher_spec,\n\
    \                               TLS finished,\n                              \
    \ EAP-Payload-TLV\n                               (EAP-Request/Identity))\n  \
    \    // TLS channel established\n         (Subsequent messages sent within the\
    \ TLS channel,\n                                  encapsulated within EAP-FAST)\n\
    \      // First EAP Payload TLV is piggybacked to the TLS Finished as\n      \
    \   Application Data and protected by the TLS tunnel\n      EAP-Payload-TLV\n\
    \      (EAP-Response/Identity (MyID2))->\n      // identity protected by TLS.\n\
    \                               <- EAP-Payload-TLV\n                         \
    \       (EAP-Request/Method X)\n      EAP-Payload-TLV\n      (EAP-Response/Method\
    \ X) ->\n      // Method X exchanges followed by Protected Termination\n     \
    \                          <- Crypto-Binding TLV (Version=1,\n               \
    \                EAP-FAST Version=1, Nonce,\n                               CompoundMAC),\n\
    \                               Result TLV (Success)\n      Crypto-Binding TLV\
    \ (Version=1,\n      EAP-FAST Version=1, Nonce,\n      CompoundMAC),\n      Result-TLV\
    \ (Success) ->\n      // TLS channel torn down\n      (messages sent in clear\
    \ text)\n                              <- EAP-Success\n"
- title: A.4.  Client Authentication during Phase 1 with Identity Privacy
  contents:
  - "A.4.  Client Authentication during Phase 1 with Identity Privacy\n   In the case\
    \ where a certificate-based TLS handshake occurs within\n   EAP-FAST Phase 1,\
    \ and client certificate authentication and identity\n   privacy is desired, the\
    \ conversation will appear as follows:\n      Authenticating Peer     Authenticator\n\
    \      -------------------     -------------\n                             <-\
    \ EAP-Request/Identity\n      EAP-Response/\n      Identity (MyID1) ->\n     \
    \ // Identity sent in the clear.  May be a hint to help route\n         the authentication\
    \ request to EAP server, instead of the\n         full user identity.\n      \
    \                        <- EAP-Request/EAP-FAST\n                           \
    \   (S=1, A-ID)\n      EAP-Response/EAP-FAST\n      (TLS client_hello)->\n   \
    \                           <- EAP-Request/EAP-FAST\n                        \
    \      (TLS server_hello,\n                               TLS certificate,\n \
    \                             [TLS server_key_exchange,]\n                   \
    \           [TLS certificate_request,]\n                               TLS server_hello_done)\n\
    \      EAP-Response/EAP-FAST\n      (TLS client_key_exchange,\n       TLS change_cipher_spec,\n\
    \       TLS finished) ->\n                              <- EAP-Request/EAP-FAST\n\
    \                              (TLS change_cipher_spec,\n                    \
    \           TLS finished,TLS Hello-Request)\n      // TLS channel established\n\
    \         (Subsequent messages sent within the TLS channel,\n                \
    \                  encapsulated within EAP-FAST)\n      // TLS Hello-Request is\
    \ piggybacked to the TLS Finished as\n         Handshake Data and protected by\
    \ the TLS tunnel\n      // Subsequent messages are protected by the TLS Tunnel\n\
    \      EAP-Response/EAP-FAST\n      (TLS client_hello) ->\n                  \
    \            <- EAP-Request/EAP-FAST\n                               (TLS server_hello,\n\
    \                               TLS certificate,\n                           \
    \    [TLS server_key_exchange,]\n                               [TLS certificate_request,]\n\
    \                               TLS server_hello_done)\n      EAP-Response/EAP-FAST\n\
    \      ([TLS certificate,]\n       TLS client_key_exchange,\n      [TLS certificate_verify,]\n\
    \       TLS change_cipher_spec,\n       TLS finished) ->\n                   \
    \           <- EAP-Request/EAP-FAST\n                                (TLS change_cipher_spec,\n\
    \                                 TLS finished,\n                            \
    \     Result TLV (Success))\n      EAP-Response/EAP-FAST\n      (Result-TLV (Success))\
    \ ->\n      //TLS channel torn down\n      (messages sent in clear text)\n   \
    \                           <- EAP-Success\n"
- title: A.5.  Fragmentation and Reassembly
  contents:
  - "A.5.  Fragmentation and Reassembly\n   In the case where EAP-FAST fragmentation\
    \ is required, the\n   conversation will appear as follows:\n      Authenticating\
    \ Peer     Authenticator\n      -------------------     -------------\n      \
    \                        <- EAP-Request/\n                              Identity\n\
    \      EAP-Response/\n      Identity (MyID) ->\n                             \
    \ <- EAP-Request/EAP-FAST\n                              (S=1, A-ID)\n      EAP-Response/EAP-FAST\n\
    \      (TLS client_hello)->\n                              <- EAP-Request/EAP-FAST\n\
    \                              (L=1,M=1, TLS server_hello,\n                 \
    \              TLS certificate,\n                              [TLS server_key_exchange,]\n\
    \                              [TLS certificate_request,])\n      EAP-Response/EAP-FAST\
    \ ->\n                              <- EAP-Request/EAP-FAST\n                \
    \               (M=1,\n                               [TLS certificate_request(con't),])\n\
    \      EAP-Response/EAP-FAST ->\n                              <- EAP-Request/EAP-FAST\n\
    \                              ([TLS certificate_request(con't),]\n          \
    \                     TLS server_hello_done)\n      EAP-Response/EAP-FAST,\n \
    \     (L=1,M=1,[TLS certificate,])->\n                               <- EAP-Request/EAP-FAST\n\
    \      EAP-Response/EAP-FAST\n      ([TLS certificate(con't),]\n       TLS client_key_exchange,\n\
    \      [TLS certificate_verify,]\n       TLS change_cipher_spec,\n       TLS finished))->\n\
    \                             <- EAP-Request/EAP-FAST\n                      \
    \        ( TLS change_cipher_spec,\n                               TLS finished,\n\
    \                              EAP-Payload-TLV\n                             \
    \ (EAP-Request/Identity))\n      // TLS channel established\n         (Subsequent\
    \ messages sent within the TLS channel,\n                                  encapsulated\
    \ within EAP-FAST)\n      // First EAP Payload TLV is piggybacked to the TLS Finished\
    \ as\n         Application Data and protected by the TLS tunnel\n      EAP-Payload-TLV\n\
    \      (EAP-Response/Identity (MyID2))->\n      // identity protected by TLS.\n\
    \                               <- EAP-Payload-TLV\n                         \
    \      (EAP-Request/Method X)\n      EAP-Payload-TLV\n      (EAP-Response/Method\
    \ X) ->\n      // Method X exchanges followed by Protected Termination\n     \
    \                          <- Crypto-Binding TLV (Version=1,\n               \
    \                EAP-FAST Version=1, Nonce,\n                               CompoundMAC),\n\
    \                               Result TLV (Success)\n      Crypto-Binding TLV\
    \ (Version=1,\n      EAP-FAST Version=1, Nonce,\n      CompoundMAC),\n      Result-TLV\
    \ (Success) ->\n      // TLS channel torn down\n      (messages sent in clear\
    \ text)\n                              <- EAP-Success\n"
- title: A.6.  Sequence of EAP Methods
  contents:
  - "A.6.  Sequence of EAP Methods\n   Where EAP-FAST is negotiated, with a sequence\
    \ of EAP method X\n   followed by method Y, the conversation will occur as follows:\n\
    \      Authenticating Peer     Authenticator\n      -------------------     -------------\n\
    \                              <- EAP-Request/\n                             \
    \ Identity\n      EAP-Response/\n      Identity (MyID1) ->\n                 \
    \             <- EAP-Request/EAP-FAST\n                              (S=1, A-ID)\n\
    \      EAP-Response/EAP-FAST\n      (TLS client_hello)->\n                   \
    \           <- EAP-Request/EAP-FAST\n                              (TLS server_hello,\n\
    \                               TLS certificate,\n                           \
    \   [TLS server_key_exchange,]\n                              [TLS certificate_request,]\n\
    \                               TLS server_hello_done)\n      EAP-Response/EAP-FAST\n\
    \      ([TLS certificate,]\n       TLS client_key_exchange,\n      [TLS certificate_verify,]\n\
    \       TLS change_cipher_spec,\n       TLS finished) ->\n                   \
    \          <- EAP-Request/EAP-FAST\n                              (TLS change_cipher_spec,\n\
    \                               TLS finished,\n                              EAP-Payload-TLV(\n\
    \                              EAP-Request/Identity))\n      // TLS channel established\n\
    \         (Subsequent messages sent within the TLS channel,\n                \
    \                  encapsulated within EAP-FAST)\n      // First EAP Payload TLV\
    \ is piggybacked to the TLS Finished as\n         Application Data and protected\
    \ by the TLS tunnel\n      EAP-Payload-TLV\n      (EAP-Response/Identity) ->\n\
    \                              <- EAP-Payload-TLV\n                          \
    \     (EAP-Request/Method X)\n      EAP-Payload-TLV\n      (EAP-Response/Method\
    \ X) ->\n             // Optional additional X Method exchanges...\n         \
    \                    <- EAP-Payload-TLV\n                              (EAP-Request/Method\
    \ X)\n      EAP-Payload-TLV\n      (EAP-Response/EAP-Type X)->\n             \
    \                 <- Intermediate Result TLV (Success),\n                    \
    \           Crypto-Binding TLV (Version=1\n                               EAP-FAST\
    \ Version=1, Nonce,\n                               CompoundMAC),\n          \
    \                     EAP Payload TLV (EAP-Request/Method Y)\n      // Next EAP\
    \ conversation started after successful completion\n         of previous method\
    \ X.  The Intermediate-Result and Crypto-\n         Binding TLVs are sent in this\
    \ packet to minimize round-\n         trips.  In this example, identity request\
    \ is not sent\n         before negotiating EAP-Type=Y.\n      // Compound MAC\
    \ calculated using Keys generated from\n         EAP methods X and the TLS tunnel.\n\
    \      Intermediate Result TLV (Success),\n      Crypto-Binding TLV (Version=1,\n\
    \      EAP-FAST Version=1, Nonce,\n      CompoundMAC),\n      EAP-Payload-TLV\
    \ (EAP-Response/Method Y) ->\n             // Optional additional Y Method exchanges...\n\
    \                             <- EAP Payload TLV\n                           \
    \    (EAP-Request/Method Y)\n      EAP Payload TLV\n      (EAP-Response/Method\
    \ Y) ->\n                             <- Intermediate-Result-TLV (Success),\n\
    \                               Crypto-Binding TLV (Version=1\n              \
    \                 EAP-FAST Version=1, Nonce,\n                               CompoundMAC),\n\
    \                               Result TLV (Success)\n      Intermediate-Result-TLV\
    \ (Success),\n      Crypto-Binding TLV (Version=1,\n      EAP-FAST Version=1,\
    \ Nonce,\n      CompoundMAC),\n      Result-TLV (Success) ->\n      // Compound\
    \ MAC calculated using Keys generated from EAP\n         methods X and Y and the\
    \ TLS tunnel.  Compound Keys\n         generated using Keys generated from EAP\
    \ methods X and Y;\n         and the TLS tunnel.\n      // TLS channel torn down\
    \ (messages sent in clear text)\n                              <- EAP-Success\n"
- title: A.7.  Failed Crypto-Binding
  contents:
  - "A.7.  Failed Crypto-Binding\n   The following exchanges show a failed crypto-binding\
    \ validation.  The\n   conversation will appear as follows:\n   Authenticating\
    \ Peer     Authenticator\n   -------------------     -------------\n         \
    \                  <- EAP-Request/\n                           Identity\n   EAP-Response/\n\
    \   Identity (MyID1) ->\n                           <- EAP-Request/EAP-FAST\n\
    \                           (S=1, A-ID)\n   EAP-Response/EAP-FAST\n   (TLS client_hello\
    \ without\n   PAC-Opaque extension)->\n                           <- EAP-Request/EAP-FAST\n\
    \                           (TLS Server Key Exchange,\n                      \
    \      TLS Server Hello Done)\n   EAP-Response/EAP-FAST\n   (TLS Client Key Exchange,\n\
    \    TLS change_cipher_spec,\n    TLS finished)->\n                          \
    \ <- EAP-Request/EAP-FAST\n                           (TLS change_cipher_spec,\n\
    \                            TLS finished)\n                            EAP-Payload-TLV(\n\
    \                            EAP-Request/Identity))\n      // TLS channel established\n\
    \         (messages sent within the TLS channel)\n      // First EAP Payload TLV\
    \ is piggybacked to the TLS Finished as\n         Application Data and protected\
    \ by the TLS tunnel\n   EAP-Payload TLV\n   (EAP-Response/Identity) ->\n     \
    \                     <-  EAP Payload TLV (EAP-Request/\n                    \
    \          EAP-MSCHAPV2 (Challenge))\n   EAP Payload TLV  (EAP-Response/\n   EAP-MSCHAPV2\
    \ (Response)) ->\n                          <-  EAP Payload TLV  (EAP-Request/\n\
    \                              EAP-MSCHAPV2  (Success Request))\n   EAP Payload\
    \ TLV  (EAP-Response/\n   EAP-MSCHAPV2 (Success Response)) ->\n              \
    \              <- Crypto-Binding TLV (Version=1,\n                           \
    \    EAP-FAST Version=1, Nonce,\n                               CompoundMAC),\n\
    \                               Result TLV (Success)\n      Result TLV (Failure),\n\
    \      Error TLV (Error Code = 2001) ->\n   // TLS channel torn down\n      (messages\
    \ sent in clear text)\n                           <- EAP-Failure\n"
- title: A.8.  Sequence of EAP Method with Vendor-Specific TLV Exchange
  contents:
  - "A.8.  Sequence of EAP Method with Vendor-Specific TLV Exchange\n   Where EAP-FAST\
    \ is negotiated, with a sequence of EAP method followed\n   by Vendor-Specific\
    \ TLV exchange, the conversation will occur as\n   follows:\n      Authenticating\
    \ Peer     Authenticator\n      -------------------     -------------\n      \
    \                        <- EAP-Request/\n                              Identity\n\
    \      EAP-Response/\n      Identity (MyID1) ->\n                            \
    \  <- EAP-Request/EAP-FAST\n                              (S=1, A-ID)\n      EAP-Response/EAP-FAST\n\
    \      (TLS client_hello)->\n                              <- EAP-Request/EAP-FAST\n\
    \                              (TLS server_hello,\n                          \
    \     TLS certificate,\n                              [TLS server_key_exchange,]\n\
    \                              [TLS certificate_request,]\n                  \
    \             TLS server_hello_done)\n      EAP-Response/EAP-FAST\n      ([TLS\
    \ certificate,]\n       TLS client_key_exchange,\n      [TLS certificate_verify,]\n\
    \       TLS change_cipher_spec,\n       TLS finished) ->\n                   \
    \          <- EAP-Request/EAP-FAST\n                              (TLS change_cipher_spec,\n\
    \                               TLS finished,\n                              \
    \ EAP-Payload-TLV\n                               (EAP-Request/Identity))\n  \
    \    // TLS channel established\n         (Subsequent messages sent within the\
    \ TLS channel,\n                                  encapsulated within EAP-FAST)\n\
    \      // First EAP Payload TLV is piggybacked to the TLS Finished as\n      \
    \   Application Data and protected by the TLS tunnel\n      EAP-Payload-TLV\n\
    \      (EAP-Response/Identity) ->\n                            <- EAP-Payload-TLV\n\
    \                            (EAP-Request/Method X)\n      EAP-Payload-TLV\n \
    \     (EAP-Response/Method X) ->\n                             <- EAP-Payload-TLV\n\
    \                            (EAP-Request/Method X)\n      EAP-Payload-TLV\n \
    \     (EAP-Response/Method X)->\n                              <- Intermediate\
    \ Result TLV (Success),\n                               Crypto-Binding TLV (Version=1\n\
    \                               EAP-FAST Version=1, Nonce,\n                 \
    \              CompoundMAC),\n                               Vendor-Specific TLV\n\
    \      // Vendor Specific TLV exchange started after successful\n         completion\
    \ of previous method X.  The Intermediate-Result\n         and Crypto-Binding\
    \ TLVs are sent with Vendor Specific TLV\n         in this packet to minimize\
    \ round-trips.\n      // Compound MAC calculated using Keys generated from\n \
    \        EAP methods X and the TLS tunnel.\n      Intermediate Result TLV (Success),\n\
    \      Crypto-Binding TLV (Version=1,\n      EAP-FAST Version=1, Nonce,\n    \
    \  CompoundMAC),\n      Vendor-Specific TLV ->\n          // Optional additional\
    \ Vendor-Specific TLV exchanges...\n                             <- Vendor-Specific\
    \ TLV\n      Vendor Specific TLV ->\n                             <- Result TLV\
    \ (Success)\n      Result-TLV (Success) ->\n      // TLS channel torn down (messages\
    \ sent in clear text)\n                              <- EAP-Success\n"
- title: Appendix B.  Test Vectors
  contents:
  - 'Appendix B.  Test Vectors

    '
- title: B.1.  Key Derivation
  contents:
  - "B.1.  Key Derivation\n       PAC KEY:\n       0B 97 39 0F 37 51 78 09 81 1E FD\
    \ 9C 6E 65 94 2B\n       63 2C E9 53 89 38 08 BA 36 0B 03 7C D1 85 E4 14\n   \
    \    Server_hello Random\n       3F FB 11 C4 6C BF A5 7A 54 40 DA E8 22 D3 11\
    \ D3\n       F7 6D E4 1D D9 33 E5 93 70 97 EB A9 B3 66 F4 2A\n       Client_hello\
    \ Random\n       00 00 00 02 6A 66 43 2A 8D 14 43 2C EC 58 2D 2F\n       C7 9C\
    \ 33 64 BA 04 AD 3A 52 54 D6 A5 79 AD 1E 00\n       Master_secret = T-PRF(PAC-Key,\n\
    \                        \"PAC to master secret label hash\",\n              \
    \               server_random + Client_random,\n                             48)\n\
    \       4A 1A 51 2C 01 60 BC 02 3C CF BC 83 3F 03 BC 64\n       88 C1 31 2F 0B\
    \ A9 A2 77 16 A8 D8 E8 BD C9 D2 29\n       38 4B 7A 85 BE 16 4D 27 33 D5 24 79\
    \ 87 B1 C5 A2\n       Key_block  = PRF(Master_secret,\n                   \"key\
    \ expansion\",\n                         server_random + Client_random)\n    \
    \   59 59 BE 8E 41 3A 77 74 8B B2 E5 D3 60 AC 4D 35\n       DF FB C8 1E 9C 24\
    \ 9C 8B 0E C3 1D 72 C8 84 9D 57\n       48 51 2E 45 97 6C 88 70 BE 5F 01 D3 64\
    \ E7 4C BB\n       11 24 E3 49 E2 3B CD EF 7A B3 05 39 5D 64 8A 44\n       11\
    \ B6 69 88 34 2E 8E 29 D6 4B 7D 72 17 59 28 05\n       AF F9 B7 FF 66 6D A1 96\
    \ 8F 0B 5E 06 46 7A 44 84\n       64 C1 C8 0C 96 44 09 98 FF 92 A8 B4 C6 42 28\
    \ 71\n       Session Key Seed\n       D6 4B 7D 72 17 59 28 05 AF F9 B7 FF 66 6D\
    \ A1 96\n       8F 0B 5E 06 46 7A 44 84 64 C1 C8 0C 96 44 09 98\n       FF 92\
    \ A8 B4 C6 42 28 71\n       IMCK = T-PRF(SKS,\n                    \"Inner Methods\
    \ Compound Keys\",\n                    ISK,\n                    60)\n      \
    \        Note: ISK is 32 octets 0's.\n       16 15 3C 3F 21 55 EF D9 7F 34 AE\
    \ C8 1A 4E 66 80\n       4C C3 76 F2 8A A9 6F 96 C2 54 5F 8C AB 65 02 E1\n   \
    \    18 40 7B 56 BE EA A7 C5 76 5D 8F 0B C5 07 C6 B9\n       04 D0 69 56 72 8B\
    \ 6B B8 15 EC 57 7B\n       [SIMCK 1]\n       16 15 3C 3F 21 55 EF D9 7F 34 AE\
    \ C8 1A 4E 66 80\n       4C C3 76 F2 8A A9 6F 96 C2 54 5F 8C AB 65 02 E1\n   \
    \    18 40 7B 56 BE EA A7 C5\n       MSK = T-PRF(S-IMCKn,\n                  \
    \ \"Session Key Generating Function\",\n                    64);\n       4D 83\
    \ A9 BE 6F 8A 74 ED 6A 02 66 0A 63 4D 2C 33\n       C2 DA 60 15 C6 37 04 51 90\
    \ 38 63 DA 54 3E 14 B9\n       27 99 18 1E 07 BF 0F 5A 5E 3C 32 93 80 8C 6C 49\n\
    \       67 ED 24 FE 45 40 A0 59 5E 37 C2 E9 D0 5D 0A E3\n       EMSK = T-PRF(S-IMCKn,\n\
    \                    \"Extended Session Key Generating Function\",\n         \
    \           64);\n       3A D4 AB DB 76 B2 7F 3B EA 32 2C 2B 74 F4 28 55\n   \
    \    EF 2D BA 78 C9 57 2F 0D 06 CD 51 7C 20 93 98 A9\n       76 EA 70 21 D7 0E\
    \ 25 54 97 ED B2 8A F6 ED FD 0A\n       2A E7 A1 58 90 10 50 44 B3 82 85 DB 06\
    \ 14 D2 F9\n"
- title: B.2.  Crypto-Binding MIC
  contents:
  - "B.2.  Crypto-Binding MIC\n       [Compound MAC Key 1]\n       76 5D 8F 0B C5\
    \ 07 C6 B9 04 D0 69 56 72 8B 6B B8\n       15 EC 57 7B\n       [Crypto-Binding\
    \ TLV]\n       80 0C 00 38 00 01 01 00 D8 6A 8C 68 3C 32 31 A8 56 63 B6 40 21\
    \ FE\n       21 14 4E E7 54 20 79 2D 42 62 C9 BF 53 7F 54 FD AC 58 43 24 6E 30\n\
    \       92 17 6D CF E6 E0 69 EB 33 61 6A CC 05 C5 5B B7\n       [Server Nonce]\n\
    \       D8 6A 8C 68 3C 32 31 A8 56 63 B6 40 21 FE 21 14\n       4E E7 54 20 79\
    \ 2D 42 62 C9 BF 53 7F 54 FD AC 58\n       [Compound MAC]\n       43 24 6E 30\
    \ 92 17 6D CF E6 E0 69 EB 33 61 6A CC\n       05 C5 5B B7\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Nancy Cam-Winget\n   Cisco Systems\n   3625 Cisco Way\n\
    \   San Jose, CA  95134\n   US\n   EMail: ncamwing@cisco.com\n   David McGrew\n\
    \   Cisco Systems\n   San Jose, CA  95134\n   US\n   EMail: mcgrew@cisco.com\n\
    \   Joseph Salowey\n   Cisco Systems\n   2901 3rd Ave\n   Seattle, WA  98121\n\
    \   US\n   EMail: jsalowey@cisco.com\n   Hao Zhou\n   Cisco Systems\n   4125 Highlander\
    \ Parkway\n   Richfield, OH  44286\n   US\n   EMail: hzhou@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
