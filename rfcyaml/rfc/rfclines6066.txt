Abstract This document provides specifications for existing TLS extensions.
It is a companion document for RFC 5246, "
The Transport Layer Security (TLS) Protocol Version 1.2".
The extensions specified are server name, max fragment length, client certificate url, trusted ca keys, truncated hmac, and status request.
The Transport Layer Security (TLS)
Protocol Version 1.2 is specified in [RFC5246].
That specification includes the framework for extensions to TLS, considerations in designing such extensions (see Section 7.4.1.4 of [RFC5246]), and IANA Considerations for the allocation of new extension code points; however, it does not specify any particular extensions other than Signature Algorithms (see Section 7.4.1.4.1 of [RFC5246]).
This document provides the specifications for existing TLS extensions.
It is, for the most part, the adaptation and editing of material from RFC 4366, which covered TLS extensions for TLS 1.0 (RFC 2246) and TLS 1.1 (RFC 4346).
Specific Extensions Covered The extensions described here focus on extending the functionality provided by the TLS protocol message formats.
Other issues, such as the addition of new cipher suites, are deferred.
The extension types defined in this document are: enum { server name(0), max fragment length(1), client certificate url(2), trusted ca keys(3), truncated hmac(4), status request(5),
(65535) } ExtensionType; Specifically, the extensions described in this document:  Allow TLS clients to provide to the TLS server the name of the server they are contacting.
This functionality is desirable in order to facilitate secure connections to servers that host multiple 'virtual' servers at a single underlying network address.
Allow TLS clients and servers to negotiate the maximum fragment length to be sent.
This functionality is desirable as a result of memory constraints among some clients, and bandwidth constraints among some access networks.
Allow TLS clients and servers to negotiate the use of client certificate URLs.
This functionality is desirable in order to conserve memory on constrained clients.
Allow TLS clients to indicate to TLS servers which certification authority (CA)
This functionality is desirable in order to prevent multiple handshake failures involving TLS clients that are only able to store a small number of CA root keys due to memory limitations.
Allow TLS clients and servers to negotiate the use of truncated Message Authentication Codes (MACs).
This functionality is desirable in order to conserve bandwidth in constrained access networks.
Allow TLS clients and servers to negotiate that the server sends the client certificate status information (e.g., an Online Certificate Status Protocol (OCSP)
[RFC2560] response) during a TLS handshake.
This functionality is desirable in order to avoid sending a Certificate Revocation List (CRL) over a constrained access network and therefore saving bandwidth.
TLS clients and servers may use the extensions described in this document.
The extensions are designed to be backwards compatible, meaning that TLS clients that support the extensions can talk to TLS servers that do not support the extensions, and vice versa.
Note that any messages associated with these extensions that are sent during the TLS handshake MUST be included in the hash calculations involved in "Finished" messages.
Note also that all the extensions defined in this document are relevant only when a session is initiated.
A client that requests session resumption does not in general know whether the server will accept this request, and therefore it SHOULD send the same extensions as it would send if it were not attempting resumption.
When a client includes one or more of the defined extension types in an extended client hello while requesting session resumption:
The server name indication extension MAY be used by the server when deciding whether or not to resume a session as described in Section 3.
If the resumption request is denied, the use of the extensions is negotiated as normal.
If, on the other hand, the older session is resumed, then the server MUST ignore the extensions and send a server hello containing none of the extension types.
In this case, the functionality of these extensions negotiated during the original session initiation is applied to the resumed session.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
Extensions to the Handshake Protocol
This document specifies the use of two new handshake messages, "CertificateURL" and "CertificateStatus".
These messages are described in Sections 5 and 8, respectively.
hello done:   ServerHelloDone; case certificate verify:  CertificateVerify; case client key exchange:
Server Name Indication TLS does not provide a mechanism for a client to tell a server the name of the server it is contacting.
It may be desirable for clients to provide this information to facilitate secure connections to servers that host multiple 'virtual' servers at a single underlying network address.
In order to provide any of the server names, clients MAY include an extension of type "server name" in the (extended) client hello.
The "extension data" field of this extension SHALL contain "ServerNameList" where: struct { NameType name type; select (name type) { case host name: HostName; } name; } ServerName; enum { host name(0), (255)
^16 1>; struct { ServerName server name
1> } ServerNameList; The ServerNameList MUST NOT contain more than one name of the same name type.
If the server understood the ClientHello extension but does not recognize the server name, the server SHOULD take one of two actions: either abort the handshake by sending a fatal level unrecognized name(112) alert or continue the handshake.
It is NOT RECOMMENDED to send a warning level unrecognized name(112) alert, because the client's behavior in response to warning level alerts is unpredictable.
If there is a mismatch between the server name used by the client application and the server name of the credential chosen by the server, this mismatch will become apparent when the client application performs the server endpoint identification, at which point the client application will have to decide whether to proceed with the communication.
TLS implementations are encouraged to make information available to application callers about warning  level alerts that were received or sent during a TLS handshake.
Such information can be useful for diagnostic purposes.
Note: Earlier versions of this specification permitted multiple names of the same name type.
In practice, current client implementations only send one name, and the client cannot necessarily find out which name the server selected.
Multiple names of the same name type are therefore now prohibited.
Currently, the only server names supported are DNS hostnames; however, this does not imply any dependency of TLS on DNS, and other name types may be added in the future (by an RFC that updates this document).
The data structure associated with the host name NameType is a variable length vector that begins with a 16 bit length.
For backward compatibility, all future data structures associated with new NameTypes MUST begin with a 16 bit length field.
TLS MAY treat provided server names as opaque data and pass the names and types to the application. "
HostName" contains the fully qualified DNS hostname of the server, as understood by the client.
The hostname is represented as a byte string using ASCII encoding without a trailing dot.
This allows the support of internationalized domain names through the use of A labels defined in [RFC5890].
DNS hostnames are case insensitive.
The algorithm to compare hostnames is described in [RFC5890], Section 2.3.2.4.
Literal IPv4 and IPv6 addresses are not permitted in "HostName".
It is RECOMMENDED that clients include an extension of type "server name" in the client hello whenever they locate a server by a supported name type.
A server that receives a client hello containing the "server name" extension MAY use the information contained in the extension to guide its selection of an appropriate certificate to return to the client, and/or other aspects of security policy.
In this event, the server SHALL include an extension of type "server name" in the (extended) server hello.
The "extension data" field of this extension SHALL be empty.
When the server is deciding whether or not to accept a request to resume a session, the contents of a server name extension MAY be used in the lookup of the session in the session cache.
The client SHOULD include the same server name extension in the session resumption request as it did in the full handshake that established the session.
A server that implements this extension MUST NOT accept the request to resume the session if the server name extension contains a different name.
Instead, it proceeds with a full handshake to establish a new session.
When resuming a session, the server MUST NOT include a server name extension in the server hello.
If an application negotiates a server name using an application protocol and then upgrades to TLS, and if a server name extension is sent, then the extension SHOULD contain the same name that was negotiated in the application protocol.
If the server name is established in the TLS session handshake, the client SHOULD NOT attempt to request a different server name at the application layer.
Without this extension, TLS specifies a fixed maximum plaintext fragment length of 2^14 bytes.
It may be desirable for constrained clients to negotiate a smaller maximum fragment length due to memory limitations or bandwidth limitations.
In order to negotiate smaller maximum fragment lengths, clients MAY include an extension of type "max fragment length" in the (extended) client hello.
The "extension data" field of this extension SHALL contain: enum{ 2^9(1), 2^10(2), 2^11(3), 2^12(4), (255) } MaxFragmentLength; whose value is the desired maximum fragment length.
The allowed values for this field are: 2^9, 2^10, 2^11, and 2^12.
Servers that receive an extended client hello containing a "max fragment length" extension MAY accept the requested maximum fragment length by including an extension of type "max fragment length" in the (extended) server
The "extension data" field of this extension SHALL contain a "MaxFragmentLength" whose value is the same as the requested maximum fragment length.
If a server receives a maximum fragment length negotiation request for a value other than the allowed values, it MUST abort the handshake with an "illegal parameter" alert.
Similarly, if a client receives a maximum fragment length negotiation response that differs from the length it requested, it MUST also abort the handshake with an "illegal parameter" alert.
Once a maximum fragment length
14 has been successfully negotiated, the client and server MUST immediately begin fragmenting messages (including handshake messages) to ensure that no fragment larger than the negotiated length is sent.
Note that TLS already requires clients and servers to support fragmentation of handshake messages.
The negotiated length applies for the duration of the session including session resumptions.
The negotiated length limits the input that the record layer may process without fragmentation (that is, the maximum value of TLSPlaintext.length; see [RFC5246], Section 6.2.1).
Note that the output of the record layer may be larger.
For example, if the negotiated length is 2^9 512, then, when using currently defined cipher suites (those defined in [RFC5246] and [RFC2712]) and null compression, the record layer output can be at most 805 bytes: 5 bytes of headers, 512 bytes of application data, 256 bytes of padding, and 32 bytes of MAC.
This means that in this event a TLS record layer peer receiving a TLS record layer message larger than 805 bytes MUST discard the message and send a "record overflow" alert, without decrypting the message.
When this extension is used with Datagram Transport Layer Security (DTLS), implementations SHOULD NOT generate record overflow alerts unless the packet passes message authentication.
Client Certificate URLs Without this extension
, TLS specifies that when client authentication is performed, client certificates are sent by clients to servers during the TLS handshake.
It may be desirable for constrained clients to send certificate URLs in place of certificates, so that they do not need to store their certificates and can therefore save memory.
In order to negotiate sending certificate URLs to a server, clients MAY include an extension of type "client certificate url" in the (extended) client hello.
The "extension data" field of this extension SHALL be empty.
(Note that it is necessary to negotiate the use of client certificate URLs in order to avoid "breaking" existing TLS servers.)
Servers that receive an extended client hello containing a "client certificate url" extension MAY indicate that they are willing to accept certificate URLs by including an extension of type "client certificate url" in the (extended) server hello.
The "extension data" field of this extension SHALL be empty.
After negotiation of the use of client certificate URLs has been successfully completed (by exchanging hellos including "client certificate url" extensions), clients MAY send a "CertificateURL" message in place of a "Certificate" message as follows (see also Section 2): enum { individual certs(0), pkipath(1), (255) } CertChainType; struct { CertChainType type; URLAndHash url and hash
Each "url" MUST be an absolute URI reference according to [RFC3986] that can be immediately used to fetch the certificate(s).
When X.509 certificates are used, there are two possibilities:  If CertificateURL.type is "individual certs", each URL refers to a single DER encoded X.509v3 certificate, with the URL for the client's certificate first.
If CertificateURL.type is "pkipath", the list contains a single URL referring to a DER encoded certificate chain, using the type PkiPath described in Section 10.1.
When any other certificate format is used, the specification that describes use of that format in TLS should define the encoding format of certificates or certificate chains, and any constraint on their ordering.
The "padding" byte MUST be 0x01.
It is present to make the structure backwards compatible.
The hash corresponding to each URL is the SHA 1 hash of the certificate or certificate chain (in the case of X.509 certificates, the DER encoded certificate or the DER encoded PkiPath).
Note that when a list of URLs for X.509 certificates is used, the ordering of URLs is the same as that used in the TLS Certificate message (see [RFC5246], Section 7.4.2), but opposite to the order in which certificates are encoded in PkiPath.
In either case, the self  signed root certificate MAY be omitted from the chain, under the assumption that the server must already possess it in order to validate it.
SHALL attempt to retrieve the client's certificate chain from the URLs and then process the certificate chain as usual.
A cached copy of the content of any URL in the chain MAY be used, provided that the SHA 1 hash matches the hash of the cached copy.
Servers that support this extension MUST support the 'http' URI scheme for certificate URLs and MAY support other schemes.
Use of other schemes than 'http', 'https', or 'ftp' may create unexpected problems.
If the protocol used is HTTP, then the HTTP server can be configured to use the Cache Control and Expires directives described in [RFC2616] to specify whether and for how long certificates or certificate chains should be cached.
The TLS server MUST NOT follow HTTP redirects when retrieving the certificates or certificate chain.
The URLs used in this extension MUST NOT be chosen to depend on such redirects.
If the protocol used to retrieve certificates or certificate chains returns a MIME formatted response (as HTTP does), then the following MIME Content Types SHALL be used: when a single X.509v3 certificate is returned, the Content Type is "application/pkix cert" [RFC2585], and when a chain of X.509v3 certificates is returned, the Content  Type is "application/pkix pkipath" (Section 10.1).
The server MUST check that the SHA 1 hash of the contents of the object retrieved from that URL (after decoding any MIME Content  Transfer Encoding) matches the given hash.
If any retrieved object does not have the correct SHA 1 hash, the server MUST abort the handshake with a bad certificate hash value(114) alert.
This alert is always fatal.
Clients may choose to send either "Certificate" or "CertificateURL" after successfully negotiating the option to send certificate URLs.
The option to send a certificate is included to provide flexibility to clients possessing multiple certificates.
If a server is unable to obtain certificates in a given CertificateURL, it MUST send a fatal certificate unobtainable(111) alert if it requires the certificates to complete the handshake.
If the server does not require the certificates, then the server continues the handshake.
The server MAY send a warning level alert in this case.
Clients receiving such an alert SHOULD log the alert and continue with the handshake if possible.
clients that, due to memory limitations, possess only a small number of CA root keys may wish to indicate to servers which root keys they possess, in order to avoid repeated handshake failures.
In order to indicate which CA root keys they possess, clients MAY include an extension of type "trusted ca keys" in the (extended) client hello.
1>; Here, "TrustedAuthorities" provides a list of CA root key identifiers that the client possesses.
Each CA root key is identified via either:  "pre agreed": no CA root key identity supplied.
"key sha1 hash": contains the SHA 1 hash of the CA root key.
For Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA) keys, this is the hash of the "subjectPublicKey" value.
For RSA keys, the hash is of the big  endian byte string representation of the modulus without any initial zero valued bytes.
(This copies the key hash formats deployed in other environments.)
"x509 name": contains the DER encoded X.509 DistinguishedName of the CA.
"cert sha1 hash": contains the SHA 1 hash of a DER encoded Certificate containing the CA root key.
Note that clients may include none, some, or all of the CA root keys they possess in this extension.
Note also that it is possible that a key hash or a Distinguished Name alone may not uniquely identify a certificate issuer (for example, if a particular CA has multiple key pairs).
However, here we assume this is the case following the use of Distinguished Names to identify certificate issuers in TLS.
The option to include no CA root keys is included to allow the client to indicate possession of some pre defined set of CA root keys.
Servers that receive a client hello containing the "trusted ca keys" extension MAY use the information contained in the extension to guide their selection of an appropriate certificate chain to return to the client.
In this event, the server SHALL include an extension of type "trusted ca keys" in the (extended) server hello.
The "extension data" field of this extension SHALL be empty.
Truncated HMAC Currently defined TLS cipher suites use the MAC construction HMAC [RFC2104] to authenticate record layer communications.
In TLS, the entire output of the hash function is used as the MAC tag.
However, it may be desirable in constrained environments to save bandwidth by truncating the output of the hash function to 80 bits when forming MAC tags.
In order to negotiate the use of 80 bit truncated HMAC, clients MAY include an extension of type "truncated hmac" in the extended client hello.
The "extension data" field of this extension SHALL be empty.
Servers that receive an extended hello containing a "truncated hmac" extension MAY agree to use a truncated HMAC by including an extension of type "truncated hmac", with empty "extension data", in the extended server hello.
Note that if new cipher suites are added that do not use HMAC, and the session negotiates one of these cipher suites, this extension will have no effect.
It is strongly recommended that any new cipher suites using other MACs consider the MAC size an integral part of the cipher suite definition, taking into account both security and bandwidth considerations.
If HMAC truncation has been successfully negotiated during a TLS handshake, and the negotiated cipher suite uses HMAC, both the client and the server pass this fact to the TLS record layer along with the other negotiated security parameters.
Subsequently during the session, clients and servers MUST use truncated HMACs, calculated as specified in [RFC2104].
That is, SecurityParameters.mac length is 10 bytes, and only the first 10 bytes of the HMAC output are transmitted and checked.
Note that this extension does not affect the calculation of the pseudo random function (PRF) as part of handshaking or key derivation.
The negotiated HMAC truncation size applies for the duration of the session including session resumptions.
Constrained clients may wish to use a certificate status protocol such as OCSP [RFC2560] to check the validity of server certificates, in order to avoid transmission of CRLs and therefore save bandwidth on constrained networks.
This extension allows for such information to be sent in the TLS handshake, saving roundtrips and resources.
In order to indicate their desire to receive certificate status information, clients MAY include an extension of type "status request" in the (extended) client hello.
The "extension data" field of this extension SHALL contain "CertificateStatusRequest" where: struct { CertificateStatusType status type; select (status type) { case ocsp: OCSPStatusRequest; } request; } CertificateStatusRequest;
enum { ocsp(1), (255) } CertificateStatusType; struct { ResponderID responder
1>; Extensions  request extensions; } OCSPStatusRequest; opaque ResponderID<1..
^16 1>; In the OCSPStatusRequest, the "ResponderIDs" provides a list of OCSP responders that the client trusts.
"responder id list" sequence has the special meaning that the responders are implicitly known to the server, e.g., by prior arrangement.
"Extensions" is a DER encoding of OCSP request extensions.
Both "ResponderID" and "Extensions" are DER encoded ASN.1 types as defined in [RFC2560].
"Extensions" is imported from [RFC5280].
A zero length "request extensions" value means that there are no extensions (as opposed to a zero length ASN.1 SEQUENCE, which is not valid for the "Extensions" type).
In the case of the "id pkix ocsp nonce" OCSP extension, [RFC2560] is unclear about its encoding; for clarification, the nonce MUST be a DER encoded OCTET STRING, which is encapsulated as another OCTET STRING (note that implementations based on an existing OCSP client will need to be checked for conformance to this requirement).
Servers that receive a client hello containing the "status request" extension
MAY return a suitable certificate status response to the client along with their certificate.
If OCSP is requested, they SHOULD use the information contained in the extension when selecting an OCSP responder and SHOULD include request extensions in the OCSP request.
Servers return a certificate response along with their certificate by sending a "CertificateStatus" message immediately after the "Certificate" message (and before any "ServerKeyExchange" or "CertificateRequest" messages).
If a server returns a "CertificateStatus" message, then the server MUST have included an extension of type "status request" with empty "extension data" in the extended server hello.
The "CertificateStatus" message is conveyed using the handshake message type "certificate status" as follows (see also Section 2): struct { CertificateStatusType status type; select (status type)
{ case ocsp: OCSPResponse; } response; } CertificateStatus;
; An "ocsp response" contains a complete, DER encoded OCSP response (using the ASN.1 type OCSPResponse defined in [RFC2560]).
Only one OCSP response may be sent.
Note that a server MAY also choose not to send a "CertificateStatus" message, even if has received a "status request" extension in the client hello message and has sent a "status request" extension in the server hello message.
Note in addition that a server MUST NOT send the "CertificateStatus" message unless it received a "status request" extension in the client hello message and sent a "status request" extension in the server hello message.
Clients requesting an OCSP response and receiving an OCSP response in a "CertificateStatus" message MUST check the OCSP response and abort the handshake if the response is not satisfactory with bad certificate status response(113) alert.
This alert is always fatal.
Four new error alerts are defined for use with the TLS extensions defined in this document.
To avoid "breaking" existing clients and servers, these alerts MUST NOT be sent unless the sending party has received an extended hello message from the party they are communicating with.
These error alerts are conveyed using the following syntax.
The new alerts are the last four, as indicated by the comments on the same line as the error alert number.
, illegal parameter(47), unknown ca(48), access denied(49), decode error(50), decrypt error(51), export restriction(60), protocol version(70), insufficient security(71), internal error(80), user canceled(90), no renegotiation(100), unsupported extension(110)
} AlertDescription; "certificate unobtainable" is described in Section 5. "
unrecognized name" is described in Section 3.
bad certificate status response" is described in Section 8.
bad certificate hash value" is described in Section 5.
IANA Considerations IANA Considerations for TLS extensions and
the creation of a registry are covered in Section 12 of [RFC5246] except for the registration of MIME type application/pkix pkipath, which appears below.
The IANA TLS extensions and MIME type application/pkix pkipath registry entries that reference RFC 4366 have been updated to reference this document.
pkipath MIME Type Registration MIME media type name:
application MIME subtype name: pkix pkipath Required parameters: none Optional parameters: version (default value is "1")
Binary; this MIME type is a DER encoding of the ASN.1 type PkiPath, defined as follows:
Within the sequence, the order of certificates is such that the subject of the first certificate is the issuer of the second certificate, etc.
This is identical to the definition published in [X509 4th TC1]; note that it is different from that in [X509 4th].
All Certificates MUST conform to [RFC5280].
(This should be interpreted as a requirement to encode only PKIX conformant certificates using this type.
It does not necessarily require that all certificates that are not strictly PKIX conformant must be rejected by relying parties, although the security consequences of accepting any such certificates should be considered carefully.)
DER (as opposed to BER) encoding MUST be used.
If this type is sent over a 7 bit transport, base64 encoding SHOULD be used.
The security considerations of [X509 4th] and [RFC5280] (or any updates to them) apply, as well as those of any protocol that uses this type (e.g., TLS).
Note that this type only specifies a certificate chain that can be assessed for validity according to the relying party's existing configuration of trusted CAs; it is not intended to be used to specify any change to that configuration.
No specific interoperability problems are known with this type, but for recommendations relating to X.509 certificates in general, see [RFC5280].
Applications that use this media type: TLS.
It may also be used by other protocols or for general interchange of PKIX certificate chains.
DER encoded ASN.1 can be easily recognized.
Further parsing is required to distinguish it from other ASN.1 types.
: not specified Person & email address to contact for further information:
COMMON Change controller: IESG <iesg@ietf.org
Reference for TLS Alerts, TLS HandshakeTypes, and ExtensionTypes
The following values in the TLS Alert Registry have been updated to reference this document: 111 certificate unobtainable 112 unrecognized name 113 bad certificate status response 114 bad certificate hash value
The following values in the TLS HandshakeType Registry have been updated to reference this document: 21 certificate url 22 certificate status
The following ExtensionType values have been updated to reference this document: 0 server name 1 max fragment length 2 client certificate url 3 trusted ca keys 4 truncated hmac 5 status request 11.
Security Considerations General security considerations for TLS extensions are covered in [RFC5246].
Security Considerations for particular extensions specified in this document are given below.
In general, implementers should continue to monitor the state of the art and address any weaknesses identified.
Security Considerations for server name
If a single server hosts several domains, then clearly it is necessary for the owners of each domain to ensure that this satisfies their security needs.
Apart from this, server name does not appear to introduce significant security issues.
Since it is possible for a client to present a different server name in the application protocol, application server implementations that rely upon these names being the same MUST check to make sure the client did not present a different name in the application protocol.
Implementations MUST ensure that a buffer overflow does not occur, whatever the values of the length fields in server name.
Security Considerations for max fragment length
The maximum fragment length takes effect immediately, including for handshake messages.
However, that does not introduce any security complications that are not already present in TLS, since TLS requires implementations to be able to handle fragmented handshake messages.
Note that, as described in Section 4, once a non null cipher suite has been activated, the effective maximum fragment length depends on the cipher suite and compression method, as well as on the negotiated max fragment length.
This must be taken into account when sizing buffers and checking for buffer overflow.
Security Considerations for client certificate url Support for client certificate url involves the server's acting as a client in another URI scheme dependent protocol.
The server therefore becomes subject to many of the same security concerns that clients of the URI scheme are subject to, with the added concern that the client can attempt to prompt the server to connect to some (possibly weird looking) URL.
In general, this issue means that an attacker might use the server to indirectly attack another host that is vulnerable to some security flaw.
It also introduces the possibility of denial of service attacks in which an attacker makes many connections to the server, each of which results in the server's attempting a connection to the target of the attack.
Note that the server may be behind a firewall or otherwise able to access hosts that would not be directly accessible from the public Internet.
This could exacerbate the potential security and denial  of service problems described above, as well as allow the existence of internal hosts to be confirmed when they would otherwise be hidden.
The detailed security concerns involved will depend on the URI schemes supported by the server.
In the case of HTTP, the concerns are similar to those that apply to a publicly accessible HTTP proxy server.
In the case of HTTPS, loops and deadlocks may be created, and this should be addressed.
In the case of FTP, attacks arise that are similar to FTP bounce attacks.
As a result of this issue, it is RECOMMENDED that the client certificate url extension should have to be specifically enabled by a server administrator, rather than be enabled by default.
It is also RECOMMENDED that URI schemes be enabled by the administrator individually, and only a minimal set of schemes be enabled.
Unusual protocols that offer limited security or whose security is not well understood SHOULD be avoided.
As discussed in [RFC3986], URLs that specify ports other than the default may cause problems, as may very long URLs (which are more likely to be useful in exploiting buffer overflow bugs).
This extension continues to use SHA 1 (as in RFC 4366) and does not provide algorithm agility.
The property required of SHA 1 in this case is second pre image resistance, not collision resistance.
Furthermore, even if second pre image attacks against SHA 1 are found in the future, an attack against client certificate url would require a second pre image that is accepted as a valid certificate by the server and contains the same public key.
Also note that HTTP caching proxies are common on the Internet, and some proxies do not check for the latest version of an object correctly.
If a request using HTTP (or another caching protocol) goes through a misconfigured or otherwise broken proxy, the proxy may return an out of date response.
Security Considerations for trusted ca keys
Potentially, the CA root keys a client possesses could be regarded as confidential information.
As a result, the CA root key indication extension should be used with care.
The use of the SHA 1 certificate hash alternative ensures that each certificate is specified unambiguously.
This context does not require a cryptographic hash function, so the use of SHA 1 is considered acceptable, and no algorithm agility is provided.
Security Considerations for truncated hmac
It is possible that truncated MACs are weaker than "un truncated" MACs.
However, no significant weaknesses are currently known or expected to exist for HMAC with MD5 or SHA 1, truncated to 80 bits.
Note that the output length of a MAC need not be as long as the length of a symmetric cipher key, since forging of MAC values cannot be done off line: in TLS, a single failed MAC guess will cause the immediate termination of the TLS session.
Since the MAC algorithm only takes effect after all handshake messages that affect extension parameters have been authenticated by the hashes in the Finished messages, it is not possible for an active attacker to force negotiation of the truncated HMAC extension where it would not otherwise be used (to the extent that the handshake authentication is secure).
Therefore, in the event that any security problems were found with truncated HMAC in the future, if either the client or the server for a given session were updated to take the problem into account, it would be able to veto use of this extension.
Security Considerations for status request
If a client requests an OCSP response, it must take into account that an attacker's server using a compromised key could (and probably would) pretend not to support the extension.
In this case, a client that requires OCSP validation of certificates SHOULD either contact the OCSP server directly or abort the handshake.
Use of the OCSP nonce request extension (id pkix ocsp nonce) may improve security against attacks that attempt to replay OCSP responses; see Section 4.4.1 of [RFC2560] for further details.
Appendix A.  Changes from RFC 4366
The significant changes between RFC 4366 and this document are described below.
RFC 4366 described both general extension mechanisms (for the TLS handshake and client and server hellos) as well as specific extensions.
RFC 4366 was associated with RFC 4346, TLS 1.1.
The client and server hello extension mechanisms have been moved into RFC 5246, TLS 1.2, so this document, which is associated with RFC 5246, includes only the handshake extension mechanisms and the specific extensions from RFC 4366.
RFC 5246 also specifies the unknown extension error and new extension specification considerations, so that material has been removed from this document.
The Server Name extension now specifies only ASCII representation, eliminating UTF 8.
It is provided that the ServerNameList can contain more than only one name of any particular name type.
If a server name is provided but not recognized, the server should either continue the handshake without an error or send a fatal error.
Sending a warning level message is not recommended because client behavior will be unpredictable.
Provision was added for the user using the server name extension in deciding whether or not to resume a session.
Furthermore, this extension should be the same in a session resumption request as it was in the full handshake that established the session.
Such a resumption request must not be accepted if the server name extension is different, but instead a full handshake must be done to possibly establish a new session.
The Client Certificate URLs extension has been changed to make the presence of a hash mandatory.
For the case of DTLS, the requirement to report an overflow of the negotiated maximum fragment length is made conditional on passing authentication.
TLS servers are now prohibited from following HTTP redirects when retrieving certificates.
The material was also re organized in minor ways.
For example, information as to which errors are fatal is moved from the "Error Alerts" section to the individual extension specifications.
