- title: __initial_text__
  contents:
  - '              A Mail-Safe Transformation Format of Unicode

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Unicode Standard, version 2.0, and ISO/IEC 10646-1:1993(E) (as\n\
    \   amended) jointly define a character set (hereafter referred to as\n   Unicode)\
    \ which encompasses most of the world's writing systems.\n   However, Internet\
    \ mail (STD 11, RFC 822) currently supports only 7-\n   bit US ASCII as a character\
    \ set. MIME (RFC 2045 through 2049) extends\n   Internet mail to support different\
    \ media types and character sets,\n   and thus could support Unicode in mail messages.\
    \ MIME neither defines\n   Unicode as a permitted character set nor specifies\
    \ how it would be\n   encoded, although it does provide for the registration of\
    \ additional\n   character sets over time.\n   This document describes a transformation\
    \ format of Unicode that\n   contains only 7-bit ASCII octets and is intended\
    \ to be readable by\n   humans in the limiting case that the document consists\
    \ of characters\n   from the US-ASCII repertoire. It also specifies how this\n\
    \   transformation format is used in the context of MIME and RFC 1641,\n   \"\
    Using Unicode with MIME\".\n"
- title: Motivation
  contents:
  - "Motivation\n   Although other transformation formats of Unicode exist and could\n\
    \   conceivably be used in this context (most notably UTF-8, also known\n   as\
    \ UTF-2 or UTF-FSS), they suffer the disadvantage that they use\n   octets in\
    \ the range decimal 128 through 255 to encode Unicode\n   characters outside the\
    \ US-ASCII range. Thus, in the context of mail,\n   those octets must themselves\
    \ be encoded. This requires putting text\n   through two successive encoding processes,\
    \ and leads to a significant\n   expansion of characters outside the US-ASCII\
    \ range, putting non-\n   English speakers at a disadvantage. For example, using\
    \ UTF-8 together\n   with the Quoted-Printable content transfer encoding of MIME\n\
    \   represents US-ASCII characters in one octet, but other characters may\n  \
    \ require up to nine octets.\n"
- title: Overview
  contents:
  - "Overview\n   UTF-7 encodes Unicode characters as US-ASCII octets, together with\n\
    \   shift sequences to encode characters outside that range. For this\n   purpose,\
    \ one of the characters in the US-ASCII repertoire is reserved\n   for use as\
    \ a shift character.\n   Many mail gateways and systems cannot handle the entire\
    \ US-ASCII\n   character set (those based on EBCDIC, for example), and so UTF-7\n\
    \   contains provisions for encoding characters within US-ASCII in a way\n   that\
    \ all mail systems can accomodate.\n   UTF-7 should normally be used only in the\
    \ context of 7 bit\n   transports, such as mail. In other contexts, straight Unicode\
    \ or\n   UTF-8 is preferred.\n   See RFC 1641, \"Using Unicode with MIME\" for\
    \ the overall specification\n   on usage of Unicode transformation formats with\
    \ MIME.\n"
- title: Definitions
  contents:
  - "Definitions\n   First, the definition of Unicode:\n      The 16 bit character\
    \ set Unicode is defined by \"The Unicode\n      Standard, Version 2.0\". This\
    \ character set is identical with the\n      character repertoire and coding of\
    \ the international standard\n      ISO/IEC 10646-1:1993(E); Coded Representation\
    \ Form=UCS-2;\n      Subset=300; Implementation Level=3, including the first 7\n\
    \      amendments to 10646 plus editorial corrections.\n      Note. Unicode 2.0\
    \ further specifies the use and interaction of\n      these character codes beyond\
    \ the ISO standard. However, any valid\n      10646 sequence is a valid Unicode\
    \ sequence, and vice versa;\n      Unicode supplies interpretations of sequences\
    \ on which the ISO\n      standard is silent as to interpretation.\n   Next, some\
    \ handy definitions of US-ASCII character subsets:\n      Set D (directly encoded\
    \ characters) consists of the following\n      characters (derived from RFC 1521,\
    \ Appendix B, which no longer\n      appears in RFC 2045): the upper and lower\
    \ case letters A through Z\n      and a through z, the 10 digits 0-9, and the\
    \ following nine special\n      characters (note that \"+\" and \"=\" are omitted):\n\
    \               Character   ASCII & Unicode Value (decimal)\n                \
    \  '           39\n                  (           40\n                  )     \
    \      41\n                  ,           44\n                  -           45\n\
    \                  .           46\n                  /           47\n        \
    \          :           58\n                  ?           63\n      Set O (optional\
    \ direct characters) consists of the following\n      characters (note that \"\
    \\\" and \"~\" are omitted):\n               Character   ASCII & Unicode Value\
    \ (decimal)\n                  !           33\n                  \"          \
    \ 34\n                  #           35\n                  $           36\n   \
    \               %           37\n                  &           38\n           \
    \       *           42\n                  ;           59\n                  <\
    \           60\n                  =           61\n                  >        \
    \   62\n                  @           64\n                  [           91\n \
    \                 ]           93\n                  ^           94\n         \
    \         _           95\n                  '           96\n                 \
    \ {           123\n                  |           124\n                  }    \
    \       125\n   Rationale. The characters \"\\\" and \"~\" are omitted because\
    \ they are\n   often redefined in variants of ASCII.\n   Set B (Modified Base\
    \ 64) is the set of characters in the Base64\n   alphabet defined in RFC 2045,\
    \ excluding the pad character \"=\"\n   (decimal value 61).\n   Rationale. The\
    \ pad character = is excluded because UTF-7 is designed\n   for use within header\
    \ fields as set forth in RFC 2047. Since the only\n   readable encoding in RFC\
    \ 2047 is \"Q\" (based on RFC 2045's Quoted-\n   Printable), the \"=\" character\
    \ is not available for use (without a lot\n   of escape sequences). This was very\
    \ unfortunate but unavoidable. The\n   \"=\" character could otherwise have been\
    \ used as the UTF-7 escape\n   character as well (rather than using \"+\").\n\
    \   Note that all characters in US-ASCII have the same value in Unicode\n   when\
    \ zero-extended to 16 bits.\n"
- title: UTF-7 Definition
  contents:
  - "UTF-7 Definition\n   A UTF-7 stream represents 16-bit Unicode characters using\
    \ 7-bit US-\n   ASCII octets as follows:\n      Rule 1: (direct encoding) Unicode\
    \ characters in set D above may be\n      encoded directly as their ASCII equivalents.\
    \ Unicode characters in\n      Set O may optionally be encoded directly as their\
    \ ASCII\n      equivalents, bearing in mind that many of these characters are\n\
    \      illegal in header fields, or may not pass correctly through some\n    \
    \  mail gateways.\n      Rule 2: (Unicode shifted encoding) Any Unicode character\
    \ sequence\n      may be encoded using a sequence of characters in set B, when\n\
    \      preceded by the shift character \"+\" (US-ASCII character value\n     \
    \ decimal 43). The \"+\" signals that subsequent octets are to be\n      interpreted\
    \ as elements of the Modified Base64 alphabet until a\n      character not in\
    \ that alphabet is encountered. Such characters\n      include control characters\
    \ such as carriage returns and line\n      feeds; thus, a Unicode shifted sequence\
    \ always terminates at the\n      of a line. As a special case, if the sequence\
    \ terminates with the\n      character \"-\" (US-ASCII decimal 45) then that character\
    \ is\n      absorbed; other terminating characters are not absorbed and are\n\
    \      processed normally.\n      Note that if the first character after the shifted\
    \ sequence is \"-\"\n      then an extra \"-\" must be present to terminate the\
    \ shifted\n      sequence so that the actual \"-\" is not itself absorbed.\n \
    \     Rationale. A terminating character is necessary for cases where\n      the\
    \ next character after the Modified Base64 sequence is part of\n      character\
    \ set B or is itself the terminating character. It can\n      also enhance readability\
    \ by delimiting encoded sequences.\n      Also as a special case, the sequence\
    \ \"+-\" may be used to encode\n      the character \"+\". A \"+\" character followed\
    \ immediately by any\n      character other than members of set B or \"-\" is\
    \ an ill-formed\n      sequence.\n      Unicode is encoded using Modified Base64\
    \ by first converting\n      Unicode 16-bit quantities to an octet stream (with\
    \ the most\n      significant octet first). Surrogate pairs (UTF-16) are converted\n\
    \      by treating each half of the pair as a separate 16 bit quantity\n     \
    \ (i.e., no special treatment). Text with an odd number of octets is\n      ill-formed.\
    \ ISO 10646 characters outside the range addressable via\n      surrogate pairs\
    \ cannot be encoded.\n      Rationale. ISO/IEC 10646-1:1993(E) specifies that\
    \ when characters\n      the UCS-2 form are serialized as octets, that the most\
    \ significant\n      octet appear first.  This is also in keeping with common\
    \ network\n      practice of choosing a canonical format for transmission.\n \
    \     Rationale. The policy for code point allocation within ISO 10646\n     \
    \ and Unicode is that the repertoires be kept synchronized. No code\n      points\
    \ will be allocated in ISO 10646 outside the range\n      addressable by surrogate\
    \ pairs.\n      Next, the octet stream is encoded by applying the Base64 content\n\
    \      transfer encoding algorithm as defined in RFC 2045, modified to\n     \
    \ omit the \"=\" pad character. Instead, when encoding, zero bits are\n      added\
    \ to pad to a Base64 character boundary. When decoding, any\n      bits at the\
    \ end of the Modified Base64 sequence that do not\n      constitute a complete\
    \ 16-bit Unicode character are discarded. If\n      such discarded bits are non-zero\
    \ the sequence is ill-formed.\n      Rationale. The pad character \"=\" is not\
    \ used when encoding\n      Modified Base64 because of the conflict with its use\
    \ as an escape\n      character for the Q content transfer encoding in RFC 2047\
    \ header\n      fields, as mentioned above.\n      Rule 3: The space (decimal\
    \ 32), tab (decimal 9), carriage return\n      (decimal 13), and line feed (decimal\
    \ 10) characters may be\n      directly represented by their ASCII equivalents.\
    \ However, note\n      that MIME content transfer encodings have rules concerning\
    \ the use\n      of such characters. Usage that does not conform to the\n    \
    \  restrictions of RFC 822, for example, would have to be encoded\n      using\
    \ MIME content transfer encodings other than 7bit or 8bit,\n      such as quoted-printable,\
    \ binary, or base64.\n   Given this set of rules, Unicode characters which may\
    \ be encoded via\n   rules 1 or 3 take one octet per character, and other Unicode\n\
    \   characters are encoded on average with 2 2/3 octets per character\n   plus\
    \ one octet to switch into Modified Base64 and an optional octet\n   to switch\
    \ out.\n      Example. The Unicode sequence \"A<NOT IDENTICAL TO><ALPHA>.\"\n\
    \      (hexadecimal 0041,2262,0391,002E) may be encoded as follows:\n        \
    \    A+ImIDkQ.\n      Example. The Unicode sequence \"Hi Mom -<WHITE SMILING FACE>-!\"\
    \n      (hexadecimal 0048, 0069, 0020, 004D, 006F, 006D, 0020, 002D, 263A,\n \
    \      002D, 0021) may be encoded as follows:\n            Hi Mom -+Jjo--!\n \
    \     Example. The Unicode sequence representing the Han characters for\n    \
    \  the Japanese word \"nihongo\" (hexadecimal 65E5,672C,8A9E) may be\n      encoded\
    \ as follows:\n            +ZeVnLIqe-\n"
- title: Use of Character Set UTF-7 Within MIME
  contents:
  - "Use of Character Set UTF-7 Within MIME\n   Character set UTF-7 is safe for mail\
    \ transmission and therefore may\n   be used with any content transfer encoding\
    \ in MIME (except where line\n   length and line break restrictions are violated).\
    \ Specifically, the 7\n   bit encoding for bodies and the Q encoding for headers\
    \ are both\n   acceptable. The MIME character set tag is UTF-7. This signifies\
    \ any\n   version of Unicode equal to or greater than 2.0.\n      Example. Here\
    \ is a text portion of a MIME message containing the\n      Unicode sequence \"\
    Hi Mom <WHITE SMILING FACE>!\" (hexadecimal 0048,\n      0069, 0020, 004D, 006F,\
    \ 006D, 0020, 263A, 0021).\n      Content-Type: text/plain; charset=UTF-7\n  \
    \    Hi Mom +Jjo-!\n      Example. Here is a text portion of a MIME message containing\
    \ the\n      Unicode sequence representing the Han characters for the Japanese\n\
    \      word \"nihongo\" (hexadecimal 65E5,672C,8A9E).\n      Content-Type: text/plain;\
    \ charset=UTF-7\n      +ZeVnLIqe-\n      Example. Here is a text portion of a\
    \ MIME message containing the\n      Unicode sequence \"A<NOT IDENTICAL TO><ALPHA>.\"\
    \ (hexadecimal\n      0041,2262,0391,002E).\n      Content-Type: text/plain; charset=utf-7\n\
    \      A+ImIDkQ.\n      Example. Here is a text portion of a MIME message containing\
    \ the\n      Unicode sequence \"Item 3 is <POUND SIGN>1.\"  (hexadecimal 0049,\n\
    \      0074, 0065, 006D, 0020, 0033, 0020, 0069, 0073, 0020, 00A3, 0031,\n   \
    \   002E).\n      Content-Type: text/plain; charset=UTF-7\n      Item 3 is +AKM-1.\n\
    \   Note that to achieve the best interoperability with systems that may\n   not\
    \ support Unicode or MIME, when preparing text for mail\n   transmission line\
    \ breaks should follow Internet conventions. This\n   means that lines should\
    \ be short and terminated with the proper SMTP\n   CRLF sequence. Unicode LINE\
    \ SEPARATOR (hexadecimal 2028) and\n   PARAGRAPH SEPARATOR (hexadecimal 2029)\
    \ should be converted to SMTP\n   line breaks. Ideally, this would be handled\
    \ transparently by a\n   Unicode-aware user agent.\n   This preparation is not\
    \ absolutely necessary, since UTF-7 and the\n   appropriate MIME content transfer\
    \ encoding can handle text that does\n   not follow Internet conventions, but\
    \ readability by systems without\n   Unicode or MIME will be impaired. See RFC\
    \ 2045 for a discussion of\n   mail interoperability issues.\n   Lines should\
    \ never be broken in the middle of a UTF-7 shifted\n   sequence, since such sequences\
    \ may not cross line breaks. Therefore,\n   UTF-7 encoding should take place after\
    \ line breaking. If a line\n   containing a shifted sequence is too long after\
    \ encoding, a MIME\n   content transfer encoding such as Quoted Printable can\
    \ be used to\n   encode the text. Another possibility is to perform line breaking\
    \ and\n   UTF-7 encoding at the same time, so that lines containing shifted\n\
    \   sequences already conform to length restrictions.\n"
- title: Discussion
  contents:
  - "Discussion\n   In this section we will motivate the introduction of UTF-7 as\
    \ opposed\n   to the alternative of using the existing transformation formats\
    \ of\n   Unicode (e.g., UTF-8) with MIME's content transfer encodings. Before\n\
    \   discussing this, it will be useful to list some assumptions about\n   character\
    \ frequency within typical natural language text strings that\n   we use to estimate\
    \ typical storage requirements:\n   1. Most Western European languages use roughly\
    \ 7/8 of their letters\n      from US-ASCII and 1/8 from Latin 1 (ISO-8859-1).\n\
    \   2. Most non-Roman alphabet-based languages (e.g., Greek) use about\n     \
    \ 1/6 of their letters from ASCII (since white space is in the 7-bit\n      area)\
    \ and the rest from their alphabets.\n   3. East Asian ideographic-based languages\
    \ (including Japanese) use\n      essentially all of their characters from the\
    \ Han or CJK syllabary\n      area.\n   4. Non-directly encoded punctuation characters\
    \ do not occur\n      frequently enough to affect the results.\n   Notice that\
    \ current 8 bit standards, such as ISO-8859-x, require use\n   of a content transfer\
    \ encoding. For comparison with the subsequent\n   discussion, the costs break\
    \ down as follows (note that many of these\n   figures are approximate since they\
    \ depend on the exact composition of\n   the text):\n   8859-x in Base64\n   \
    \   Text type          Average octets/character\n      All                   \
    \   1.33\n   8859-x in Quoted Printable\n      Text type          Average octets/character\n\
    \      US-ASCII                 1\n      Western European         1.25\n     \
    \ Other                    2.67\n   Note also that Unicode encoded in Base64 takes\
    \ a constant 2.67 octets\n   per character. For purposes of comparison, we will\
    \ look at UTF-8 in\n   Base64 and Quoted Printable, and UTF-7. Also note that\
    \ fixed overhead\n   for long strings is relative to 1/n, where n is the encoded\
    \ string\n   length in octets.\n   UTF-8 in Base64\n      Text type          Average\
    \ octets/character\n      US-ASCII                 1.33\n      Western European\
    \         1.5\n      Some Alphabetics         2.44\n      All others         \
    \      4\n   UTF-8 in Quoted Printable\n      Text type          Average octets/character\n\
    \      US-ASCII                 1\n      Western European         1.63\n     \
    \ Some Alphabetics         5.17\n      All others               7-9\n   UTF-7\n\
    \      Text type          Average octets/character\n      Most US-ASCII      \
    \      1\n      Western European         1.5\n      All others               2.67+2/n\n\
    \   We feel that the UTF-8 in Quoted Printable option is not viable due\n   to\
    \ the very large expansion of all text except Western European. This\n   would\
    \ only be viable in texts consisting of large expanses of US-\n   ASCII or Latin\
    \ characters with occasional other characters\n   interspersed. We would prefer\
    \ to introduce one encoding that works\n   reasonably well for all users.\n  \
    \ We also feel that UTF-8 in Base64 has high expansion for non-\n   Western-European\
    \ users, and is less desirable because it cannot be\n   read directly, even when\
    \ the content is largely US-ASCII. The base\n   encoding of UTF-7 gives competitive\
    \ results and is readable for ASCII\n   text.\n   UTF-7 gives results competitive\
    \ with ISO-8859-x, with access to all\n   of the Unicode character set. We believe\
    \ this justifies the\n   introduction of a new transformation format of Unicode.\n\
    \   As an alternative to use of UTF-7, it might be possible to intermix\n   Unicode\
    \ characters with other character sets using an existing MIME\n   mechanism, the\
    \ multipart/mixed content type, ignoring for the moment\n   the issues with line\
    \ breaks (thanks to Nathaniel Borenstein for\n   suggesting this). For instance\
    \ (repeating an earlier example):\n      Content-type: multipart/mixed; boundary=foo\n\
    \      Content-Disposition: inline\n      --foo\n      Content-type: text/plain;\
    \ charset=us-ascii\n      Hi Mom\n      --foo\n      Content-type: text/plain;\
    \ charset=UNICODE-2-0\n      Content-transfer-encoding: base64\n      Jjo=\n \
    \     --foo\n      Content-type: text/plain; charset=us-ascii\n      !\n     \
    \ --foo--\n   Theoretically, this removes the need for UTF-7 in message bodies\n\
    \   (multipart may not be used in header fields). However, we feel that\n   as\
    \ use of the Unicode character set becomes more widespread,\n   intermittent use\
    \ of specialized Unicode characters (such as dingbats\n   and mathematical symbols)\
    \ will occur, and that text will also\n   typically include small snippets from\
    \ other scripts, such as\n   Cyrillic, Greek, or East Asian languages (anything\
    \ in the Roman\n   script is already handled adequately by existing MIME character\n\
    \   sets). Although the multipart technique works well for large chunks\n   of\
    \ text in alternating character sets, we feel it does not adequately\n   support\
    \ the kinds of uses just discussed, and so we still believe the\n   introduction\
    \ of UTF-7 is justified.\n"
- title: Summary
  contents:
  - "Summary\n   The UTF-7 encoding allows Unicode characters to be encoded within\
    \ the\n   US-ASCII 7 bit character set. It is most effective for Unicode\n   sequences\
    \ which contain relatively long strings of US-ASCII\n   characters interspersed\
    \ with either single Unicode characters or\n   strings of Unicode characters,\
    \ as it allows the US-ASCII portions to\n   be read on systems without direct\
    \ Unicode support.\n   UTF-7 should only be used with 7 bit transports such as\
    \ mail. In\n   other contexts, use of straight Unicode or UTF-8 is preferred.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Many thanks to the following people for their contributions,\n\
    \   comments, and suggestions. If we have omitted anyone it was through\n   oversight\
    \ and not intentionally.\n         Glenn Adams\n         Harald T. Alvestrand\n\
    \         Nathaniel Borenstein\n         Lee Collins\n         Jim Conklin\n \
    \        Dave Crocker\n         Steve Dorner\n         Dana S. Emery\n       \
    \  Ned Freed\n         Kari E. Hurtta\n         John H. Jenkins\n         John\
    \ C. Klensin\n         Valdis Kletnieks\n         Keith Moore\n         Masataka\
    \ Ohta\n         Einar Stefferud\n         Erik M. van der Poel\n"
- title: Appendix A -- Examples
  contents:
  - "Appendix A -- Examples\n   Here is a longer example, taken from a document originally\
    \ in Big5\n   code. It has been condensed for brevity. There are two versions:\
    \ the\n   first uses optional characters from set O (and so may not pass\n   through\
    \ some mail gateways), and the second does not.\n   Content-type: text/plain;\
    \ charset=utf-7\n   Below is the full Chinese text of the Analects (+itaKng-).\n\
    \   The sources for the text are:\n   \"The sayings of Confucius,\" James R. Ware,\
    \ trans.  +U/BTFw-:\n   +ZYeB9FH6ckh5Pg-, 1980.  (Chinese text with English translation)\n\
    \   +Vttm+E6UfZM-, +W4tRQ066bOg-, +UxdOrA-:  +Ti1XC2b4Xpc-, 1990.\n   \"The Chinese\
    \ Classics with a Translation, Critical and Exegetical\n   Notes, Prolegomena,\
    \ and Copius Indexes,\" James Legge, trans., Taipei:\n   Southern Materials Center\
    \ Publishing, Inc., 1991.  (Chinese text with\n   English translation)\n   Big\
    \ Five and GB versions of the text are being made available\n   separately.\n\
    \   Neither the Big Five nor GB contain all the characters used in this\n   text.\
    \  Missing characters have been indicated using their Unicode/ISO\n   10646 code\
    \ points.  \"U+-\" followed by four hexadecimal digits\n   indicates a Unicode/10646\
    \ code (e.g., U+-9F08).  There is no good\n   solution to the problem of the small\
    \ size of the Big Five/GB\n   character sets; this represents the solution I find\
    \ personally most\n   satisfactory.\n   (omitted...)\n   I have tried to minimize\
    \ this problem by using variant characters\n   where they were available and the\
    \ character actually in the text was\n   not.  Only variants listed as such in\
    \ the +XrdxmVtXUXg- were used.\n   (omitted...)\n   John H. Jenkins +TpVPXGBG-\
    \ jenkins@apple.com 5 January 1993\n   (omitted...)\n   Content-type: text/plain;\
    \ charset=utf-7\n   Below is the full Chinese text of the Analects (+itaKng-).\n\
    \   The sources for the text are:\n   +ACI-The sayings of Confucius,+ACI- James\
    \ R. Ware, trans.  +U/BTFw-:\n   +ZYeB9FH6ckh5Pg-, 1980.  (Chinese text with English\
    \ translation)\n   +Vttm+E6UfZM-, +W4tRQ066bOg-, +UxdOrA-:  +Ti1XC2b4Xpc-, 1990.\n\
    \   +ACI-The Chinese Classics with a Translation, Critical and Exegetical\n  \
    \ Notes, Prolegomena, and Copius Indexes,+ACI- James Legge, trans.,\n   Taipei:\
    \  Southern Materials Center Publishing, Inc., 1991.  (Chinese\n   text with English\
    \ translation)\n   Big Five and GB versions of the text are being made available\n\
    \   separately.\n   Neither the Big Five nor GB contain all the characters used\
    \ in this\n   text.  Missing characters have been indicated using their Unicode/ISO\n\
    \   10646 code points.  +ACI-U+-+ACI- followed by four hexadecimal digits\n  \
    \ indicates a Unicode/10646 code (e.g., U+-9F08).  There is no good\n   solution\
    \ to the problem of the small size of the Big Five/GB\n   character sets+ADs-\
    \ this represents the solution I find personally\n   most satisfactory.\n   (omitted...)\n\
    \   I have tried to minimize this problem by using variant characters\n   where\
    \ they were available and the character actually in the text was\n   not.  Only\
    \ variants listed as such in the +XrdxmVtXUXg- were used.\n   (omitted...)\n \
    \  John H. Jenkins +TpVPXGBG- jenkins+AEA-apple.com 5 January 1993\n   (omitted...)\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: References
  contents:
  - 'References

    '
- title: '[UNICODE 2.0]  "The Unicode Standard, Version 2.0", The Unicode'
  contents:
  - "[UNICODE 2.0]  \"The Unicode Standard, Version 2.0\", The Unicode\n         \
    \      Consortium, Addison-Wesley, 1996. ISBN 0-201-48345-9.\n"
- title: '[ISO 10646]    ISO/IEC 10646-1:1993(E) Information Technology--Universal'
  contents:
  - "[ISO 10646]    ISO/IEC 10646-1:1993(E) Information Technology--Universal\n  \
    \             Multiple-octet Coded Character Set (UCS). See also\n           \
    \    amendments 1 through 7, plus editorial corrections.\n"
- title: '[RFC-1641]     Goldsmith, D., and M. Davis, "Using Unicode with MIME",'
  contents:
  - "[RFC-1641]     Goldsmith, D., and M. Davis, \"Using Unicode with MIME\",\n  \
    \             RFC 1641, Taligent, Inc., July 1994.\n"
- title: '[US-ASCII]     Coded Character Set--7-bit American Standard Code for'
  contents:
  - "[US-ASCII]     Coded Character Set--7-bit American Standard Code for\n      \
    \         Information Interchange, ANSI X3.4-1986.\n"
- title: '[ISO-8859]     Information Processing -- 8-bit Single-Byte Coded Graphic'
  contents:
  - "[ISO-8859]     Information Processing -- 8-bit Single-Byte Coded Graphic\n  \
    \             Character Sets -- Part 1: Latin Alphabet No. 1, ISO\n          \
    \     8859-1:1987.  Part 2: Latin alphabet No.  2, ISO 8859-2,\n             \
    \  1987.  Part 3: Latin alphabet No. 3, ISO 8859-3, 1988.\n               Part\
    \ 4: Latin alphabet No.  4, ISO 8859-4, 1988.  Part 5:\n               Latin/Cyrillic\
    \ alphabet, ISO 8859-5, 1988.  Part 6:\n               Latin/Arabic alphabet,\
    \ ISO 8859-6, 1987.  Part 7:\n               Latin/Greek alphabet, ISO 8859-7,\
    \ 1987.  Part 8:\n               Latin/Hebrew alphabet, ISO 8859-8, 1988.  Part\
    \ 9: Latin\n               alphabet No. 5, ISO 8859-9, 1990.\n"
- title: '[RFC822]       Crocker, D., "Standard for the Format of ARPA Internet'
  contents:
  - "[RFC822]       Crocker, D., \"Standard for the Format of ARPA Internet\n    \
    \           Text Messages\", STD 11, RFC 822, UDEL, August 1982.\n"
- title: '[MIME]         Borenstein N., N. Freed, K. Moore, J. Klensin, and J.'
  contents:
  - "[MIME]         Borenstein N., N. Freed, K. Moore, J. Klensin, and J.\n      \
    \         Postel, \"MIME (Multipurpose Internet Mail Extensions)\n           \
    \    Parts One through Five\", RFC 2045, 2046, 2047, 2048, and\n             \
    \  2049, November 1996.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   David Goldsmith\n   Apple Computer, Inc.\n   2 Infinite\
    \ Loop, MS: 302-2IS\n   Cupertino, CA 95014\n   Phone: 408-974-1957\n   Fax: 408-862-4566\n\
    \   EMail: goldsmith@apple.com\n   Mark Davis\n   Taligent, Inc.\n   10201 N.\
    \ DeAnza Blvd.\n   Cupertino, CA 95014-2233\n   Phone: 408-777-5116\n   Fax: 408-777-5081\n\
    \   EMail: mark_davis@taligent.com\n"
