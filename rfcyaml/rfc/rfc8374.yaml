- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                    K. Sriram, Ed.
  contents:
  - "Independent Submission                                    K. Sriram, Ed.\n  \
    \    BGPsec Design Choices and Summary of Supporting Discussions\n"
- title: Abstract
  contents:
  - "Abstract\n   This document captures the design rationale of the initial draft\n\
    \   version of what became RFC 8205 (the BGPsec protocol specification).\n   The\
    \ designers needed to balance many competing factors, and this\n   document lists\
    \ the decisions that were made in favor of or against\n   each design choice.\
    \  This document also presents brief summaries of\n   the arguments that aided\
    \ the decision process.  Where appropriate,\n   this document also provides brief\
    \ notes on design decisions that\n   changed as the specification was reviewed\
    \ and updated by the IETF\n   SIDR Working Group and that resulted in RFC 8205.\
    \  These notes\n   highlight the differences and provide pointers to details and\n\
    \   rationale regarding those design changes.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not candidates for any level of Internet\
    \ Standard;\n   see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8374.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Creating Signatures and the Structure of BGPsec Update\n      Messages\
    \ ........................................................5\n      2.1. Origin\
    \ Validation Using ROAs ...............................5\n      2.2. Attributes\
    \ Signed by an Originating AS .....................6\n      2.3. Attributes Signed\
    \ by an Upstream AS ........................7\n      2.4. Attributes That Are\
    \ Not Signed .............................8\n      2.5. Receiving Router Actions\
    \ ...................................9\n      2.6. Prepending of ASes in AS Path\
    \ .............................10\n      2.7. RPKI Data That Needs to Be Included\
    \ in Updates ............10\n   3. Withdrawal Protection ..........................................11\n\
    \      3.1. Withdrawals Not Signed ....................................11\n  \
    \    3.2. Signature Expire Time for Withdrawal Protection\n           (a.k.a.\
    \ Mitigation of Replay Attacks) .....................12\n      3.3. Should Route\
    \ Expire Time be Communicated in a\n           Separate Message? .........................................13\n\
    \      3.4. Effect of Expire Time Updates in BGPsec on RFD ............14\n  \
    \ 4. Signature Algorithms and Router Keys ...........................16\n    \
    \  4.1. Signature Algorithms ......................................16\n      4.2.\
    \ Agility of Signature Algorithms ...........................17\n      4.3. Sequential\
    \ Aggregate Signatures ...........................18\n      4.4. Protocol Extensibility\
    \ ....................................19\n      4.5. Key per Router (Rogue Router\
    \ Problem) .....................20\n      4.6. Router ID .................................................20\n\
    \   5. Optimizations and Resource Sizing ..............................21\n  \
    \    5.1. Update Packing and Repacking ..............................21\n    \
    \  5.2. Signature per Prefix vs. Signature per Update .............22\n      5.3.\
    \ Maximum BGPsec Update PDU Size ............................22\n      5.4. Temporary\
    \ Suspension of Attestations and Validations ......23\n   6. Incremental Deployment\
    \ and Negotiation of BGPsec ...............24\n      6.1. Downgrade Attacks .........................................24\n\
    \      6.2. Inclusion of Address Family in Capability Advertisement ...24\n  \
    \    6.3. Incremental Deployment: Capability Negotiation ............25\n    \
    \  6.4. Partial Path Signing ......................................25\n      6.5.\
    \ Consideration of Stub ASes with Resource\n           Constraints: Encouraging\
    \ Early Adoption ...................26\n      6.6. Proxy Signing .............................................27\n\
    \      6.7. Multiple Peering Sessions between ASes ....................28\n  \
    \ 7. Interaction of BGPsec with Common BGP Features .................29\n    \
    \  7.1. Peer Groups ...............................................29\n      7.2.\
    \ Communities ...............................................29\n      7.3. Consideration\
    \ of iBGP Speakers and Confederations .........30\n      7.4. Consideration of\
    \ Route Servers in IXPs ....................31\n      7.5. Proxy Aggregation (a.k.a.\
    \ AS_SETs) ........................32\n      7.6. 4-Byte AS Numbers .........................................32\n\
    \   8. BGPsec Validation ..............................................33\n  \
    \    8.1. Sequence of BGPsec Validation Processing in a Receiver ....33\n    \
    \  8.2. Signing and Forwarding Updates when Signatures\n           Failed Validation\
    \ .........................................34\n      8.3. Enumeration of Error\
    \ Conditions ...........................35\n      8.4. Procedure for Processing\
    \ Unsigned Updates .................36\n      8.5. Response to Syntactic Errors\
    \ in Signatures and\n           Recommendations for How to React to Them ..................36\n\
    \      8.6. Enumeration of Validation States ..........................37\n  \
    \    8.7. Mechanism for Transporting Validation State through iBGP ..39\n   9.\
    \ Operational Considerations .....................................41\n      9.1.\
    \ Interworking with BGP Graceful Restart ....................41\n      9.2. BCP\
    \ Recommendations for Minimizing Churn:\n           Certificate Expiry/Revocation\
    \ and Signature Expire Time ...42\n      9.3. Outsourcing Update Validation .............................42\n\
    \      9.4. New Hardware Capability ...................................43\n  \
    \    9.5. Signed Peering Registrations ..............................44\n   10.\
    \ Security Considerations .......................................44\n   11. IANA\
    \ Considerations ...........................................44\n   12. Informative\
    \ References ........................................44\n   Acknowledgements ..................................................49\n\
    \   Contributors ......................................................49\n  \
    \ Author's Address ..................................................50\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The goal of the BGPsec effort is to enhance the security\
    \ of BGP by\n   enabling full Autonomous System (AS) path validation based on\n\
    \   cryptographic principles.  Standards work on route origin validation\n   based\
    \ on a Resource PKI (RPKI) is already completed or nearing\n   completion in the\
    \ IETF SIDR WG [RFC6480] [RFC6482] [RFC6483]\n   [RFC6487] [RFC6811].  The BGPsec\
    \ effort is aimed at taking advantage\n   of the same RPKI infrastructure developed\
    \ in the SIDR WG to add\n   cryptographic signatures to BGP updates, so that routers\
    \ can perform\n   full AS path validation [RFC7132] [RFC7353] [RFC8205].  The\
    \ BGPsec\n   protocol specification, [RFC8205], was published recently.  The key\n\
    \   high-level design goals of the BGPsec protocol are as follows\n   [RFC7353]:\n\
    \   o  Rigorous path validation for all announced prefixes -- not merely\n   \
    \   showing that a path is not impossible.\n   o  Incremental deployment capability\
    \ -- no flag-day requirement for\n      global deployment.\n   o  Protection of\
    \ AS paths only in inter-domain routing (External BGP\n      (eBGP)) -- not applicable\
    \ to Internal BGP (iBGP) (or to IGPs).\n   o  Aiming for no increase in a provider's\
    \ data exposure (e.g., not\n      requiring any disclosure of peering relations).\n\
    \   This document provides design justifications for the initial draft\n   version\
    \ of the BGPsec protocol specification [BGPsec-Initial].  The\n   designers needed\
    \ to balance many competing factors, and this document\n   lists the decisions\
    \ that were made in favor of or against each design\n   choice.  This document\
    \ also presents brief summaries of the\n   discussions that weighed in on the\
    \ pros and cons and aided the\n   decision process.  Where appropriate, this document\
    \ provides brief\n   notes (starting with \"Note:\") on design decisions that\
    \ changed from\n   the approach taken in the initial draft version of the BGPsec\n\
    \   protocol specification as the specification was reviewed and updated\n   by\
    \ the IETF SIDR WG.  (These design decisions resulted in RFC 8205\n   [RFC8205].)\
    \  The notes provide pointers to the details and/or\n   discussions about the\
    \ design changes.\n   The design choices and discussions are presented in the\
    \ following\n   sections (under the following eight broad categories, with many\n\
    \   subtopics within each category):\n   o  Section 2 (\"Creating Signatures and\
    \ the Structure of BGPsec Update\n      Messages\")\n   o  Section 3 (\"Withdrawal\
    \ Protection\")\n   o  Section 4 (\"Signature Algorithms and Router Keys\")\n\
    \   o  Section 5 (\"Optimizations and Resource Sizing\")\n   o  Section 6 (\"\
    Incremental Deployment and Negotiation of BGPsec\")\n   o  Section 7 (\"Interaction\
    \ of BGPsec with Common BGP Features\")\n   o  Section 8 (\"BGPsec Validation\"\
    )\n   o  Section 9 (\"Operational Considerations\")\n"
- title: 2.  Creating Signatures and the Structure of BGPsec Update Messages
  contents:
  - '2.  Creating Signatures and the Structure of BGPsec Update Messages

    '
- title: 2.1.  Origin Validation Using ROAs
  contents:
  - '2.1.  Origin Validation Using ROAs

    '
- title: 2.1.1.  Decision
  contents:
  - "2.1.1.  Decision\n   Route origin validation using Route Origin Authorizations\
    \ (ROAs)\n   [RFC6482] [RFC6811] is necessary and complements AS path attestation\n\
    \   based on signed updates.  Thus, the BGPsec design makes use of the\n   origin\
    \ validation capability facilitated by the ROAs in the RPKI.\n   Note: In the\
    \ finalized BGPsec protocol specification [RFC8205],\n   BGPsec is synonymous\
    \ with cryptographic AS path attestation.  Origin\n   validation and BGPsec (path\
    \ signatures) are the two key pieces of the\n   SIDR WG solution for BGP security.\n"
- title: 2.1.2.  Discussion
  contents:
  - "2.1.2.  Discussion\n   Route origin validation using RPKI constructs, as developed\
    \ in the\n   IETF SIDR WG, is a necessary component of BGP security.  It provides\n\
    \   cryptographic validation that the first-hop AS is authorized to\n   originate\
    \ a route for the prefix in question.\n"
- title: 2.2.  Attributes Signed by an Originating AS
  contents:
  - '2.2.  Attributes Signed by an Originating AS

    '
- title: 2.2.1.  Decision
  contents:
  - "2.2.1.  Decision\n   An originating AS will sign over the Network Layer Reachability\n\
    \   Information (NLRI) length, NLRI prefix, its own AS number (ASN), the\n   next\
    \ ASN, the signature algorithm suite ID, and a signature\n   Expire Time (see\
    \ Section 3.2) for the update.  The update signatures\n   will be carried in a\
    \ new optional, non-transitive BGP attribute.\n   Note: The finalized BGPsec protocol\
    \ specification [RFC8205] differs\n   from the above.  There is no mention in\
    \ RFC 8205 of a signature\n   Expire Time field in the BGPsec update.  Further,\
    \ there are some\n   additional details concerning attributes signed by the origin\
    \ AS that\n   can be found in Figure 8 in Section 4.2 of RFC 8205 [RFC8205]. \
    \ In\n   particular, the signed data also includes the Address Family\n   Identifier\
    \ (AFI) as described in RFC 8205.  By adding the AFI in the\n   data covered by\
    \ a signature, a specific security concern was\n   alleviated; see [Mandelberg1]\
    \ (post to the SIDR WG Mailing List) and\n   the discussion thread that followed\
    \ on the topic.  The AFI is\n   obtained from the MP_REACH_NLRI attribute in the\
    \ BGPsec update.  As\n   stated in Section 4.1 of RFC 8205, a BGPsec update message\
    \ \"MUST use\n   the MP_REACH_NLRI attribute [RFC4760] to encode the prefix.\"\
    \n"
- title: 2.2.2.  Discussion
  contents:
  - "2.2.2.  Discussion\n   The next-hop ASN is included in the data covered by the\
    \ signature.\n   Without this inclusion, the AS path cannot be secured; for example,\n\
    \   the path can be shortened (by a MITM (man in the middle)) without\n   being\
    \ detected.\n   It was decided that only the originating AS needs to insert a\n\
    \   signature Expire Time in the update, as it is the originator of the\n   route.\
    \  The origin AS also will re-originate, i.e., beacon, the\n   update prior to\
    \ the Expire Time of the advertisement (see\n   Section 3.2).  (For an explanation\
    \ of why upstream ASes do not insert\n   their respective signature Expire Times,\
    \ please see Section 3.2.2.)\n   Note: Expire Time and beaconing were eventually\
    \ replaced by router\n   key rollover.  The BGPsec protocol [RFC8205] is expected\
    \ to make use\n   of router key rollover to mitigate replay attacks and withdrawal\n\
    \   suppression [BGPsec-Rollover] [Replay-Protection].\n   It was decided that\
    \ each signed update would include only one NLRI\n   prefix.  If more than one\
    \ NLRI prefix were included and an upstream\n   AS elected to propagate the advertisement\
    \ for a subset of the\n   prefixes, then the signature(s) on the update would\
    \ break (see\n   Sections 5.1 and 5.2).  If a mechanism were employed to preserve\n\
    \   prefixes that were dropped, this would reveal information to\n   subsequent\
    \ ASes that is not revealed in normal BGP operation.  Thus,\n   a trade-off was\
    \ made to preserve the level of route information\n   exposure that is intrinsic\
    \ to BGP over the performance hit implied by\n   limiting each update to carry\
    \ only one prefix.\n   The signature data is carried in an optional, non-transitive\
    \ BGP\n   attribute.  The attribute is optional because this is the standard\n\
    \   mechanism available in BGP to propagate new types of data.  It was\n   decided\
    \ that the attribute should be non-transitive because of\n   concern about the\
    \ impact of sending the (potentially large)\n   signatures to routers that don't\
    \ understand them.  Also, if a router\n   that does not understand BGPsec somehow\
    \ gets an update message with\n   path signatures (i.e., the update includes the\
    \ BGPsec_PATH attribute\n   (see Section 3 of RFC 8205)), then it would be undesirable\
    \ for that\n   router to forward the update to all of its neighbors, especially\n\
    \   those who do not understand BGPsec and may choke if they receive many\n  \
    \ updates with large optional BGP attributes.  It is envisioned that\n   BGPsec\
    \ and traditional BGP will coexist while BGPsec is deployed\n   incrementally.\n"
- title: 2.3.  Attributes Signed by an Upstream AS
  contents:
  - "2.3.  Attributes Signed by an Upstream AS\n   In the context of BGPsec and throughout\
    \ this document, an \"upstream\n   AS\" simply refers to an AS that is further\
    \ along in an AS path (the\n   origin AS being the nearest to a prefix).  In principle,\
    \ an AS that\n   is upstream from an originating AS would digitally sign the combined\n\
    \   information, including the NLRI length, NLRI prefix, AS path, next\n   ASN,\
    \ signature algorithm suite ID, and Expire Time.  There are\n   multiple choices\
    \ regarding what is signed by an upstream AS, as\n   follows:\n   o  Method 1:\
    \ The signature protects the combination of the NLRI\n      length, NLRI prefix,\
    \ AS path, next ASN, signature algorithm suite\n      ID, and Expire Time,\n \
    \  o  Method 2: The signature protects just the combination of the\n      previous\
    \ signature (i.e., the signature of the neighbor AS who\n      forwarded the update)\
    \ and the next ASN, or\n   o  Method 3: The signature protects everything that\
    \ was received from\n      the preceding AS plus the next (i.e., target) ASN;\
    \ thus, ASi signs\n      over the NLRI length, NLRI prefix, signature algorithm\
    \ suite ID,\n      Expire Time, {ASi, AS(i-1), AS(i-2), ..., AS2, AS1}, AS(i+1)\n\
    \      (i.e., the next ASN), and {Sig(i-1), Sig(i-2), ..., Sig2, Sig1}.\n   Note:\
    \ Please see the notes in Sections 2.2.1 and 2.2.2 regarding the\n   elimination\
    \ of the Expire Time field in the finalized BGPsec protocol\n   specification\
    \ [RFC8205].\n"
- title: 2.3.1.  Decision
  contents:
  - "2.3.1.  Decision\n   It was decided that Method 2 will be used.  Please see\n\
    \   [BGPsec-Initial] for additional protocol details and syntax.\n   Note: The\
    \ finalized BGPsec protocol specification [RFC8205]\n   essentially uses Method\
    \ 3 (except for Expire Time).  Additional\n   details concerning attributes signed\
    \ by an upstream AS can be found\n   in Figure 8 in Section 4.2 of RFC 8205 [RFC8205].\
    \  The decision to go\n   with Method 3 (with suitable additions to the data signed)\
    \ was\n   motivated by a security concern that was associated with Method 2;\n\
    \   see [Mandelberg2] (post to the SIDR WG Mailing List) and the\n   discussion\
    \ thread that followed on the topic.  Also, there is a\n   strong rationale for\
    \ the sequence of octets to be hashed (as shown in\n   Figure 8 in Section 4.2\
    \ of RFC 8205); this sequencing of data is\n   motivated by implementation efficiency\
    \ considerations.  See\n   [Borchert] (post to the SIDR WG Mailing List) for an\
    \ explanation.\n"
- title: 2.3.2.  Discussion
  contents:
  - "2.3.2.  Discussion\n   The rationale for this choice (Method 2) was as follows.\
    \  Signatures\n   are performed over hash blocks.  When the number of bytes to\
    \ be\n   signed exceeds one hash block, the remaining bytes will overflow into\n\
    \   a second hash block, resulting in a performance penalty.  So, it is\n   advantageous\
    \ to minimize the number of bytes being hashed.  Also, an\n   analysis of the\
    \ three options noted above did not identify any\n   vulnerabilities associated\
    \ with this approach.\n"
- title: 2.4.  Attributes That Are Not Signed
  contents:
  - '2.4.  Attributes That Are Not Signed

    '
- title: 2.4.1.  Decision
  contents:
  - "2.4.1.  Decision\n   Any attributes other than those identified in Sections 2.2\
    \ and 2.3\n   are not signed.  Examples of such attributes include the community\n\
    \   attribute, the NO-EXPORT attribute, and Local_Pref.\n"
- title: 2.4.2.  Discussion
  contents:
  - "2.4.2.  Discussion\n   Any of the above-mentioned attributes that are not signed\
    \ are viewed\n   as local (e.g., do not need to propagate beyond the next hop)\
    \ or lack\n   clear security needs.  NO-EXPORT is sent over a secured next hop\
    \ and\n   does not need signing.  The BGPsec design should work with any\n   transport-layer\
    \ protections.  It is well understood that the\n   transport layer must be protected\
    \ hop by hop (if only to prevent\n   malicious session termination).\n"
- title: 2.5.  Receiving Router Actions
  contents:
  - '2.5.  Receiving Router Actions

    '
- title: 2.5.1.  Decision
  contents:
  - "2.5.1.  Decision\n   The following example describes the expected router actions\
    \ on\n   receipt of a signed update.  Consider an update that was originated\n\
    \   by AS1 with NLRI prefix p and has traversed the AS path [AS(i-1)\n   AS(i-2)\
    \ ... AS2 AS1] before arriving at ASi.  Let the Expire Time\n   (inserted by AS1)\
    \ for the signature in this update be denoted as Te.\n   Let AlgID represent the\
    \ ID of the signature algorithm suite that is\n   in use.  The update is to be\
    \ processed at ASi and possibly forwarded\n   to AS(i+1).  Let the attestations\
    \ (signatures) inserted by each\n   router in the AS path be denoted by Sig1,\
    \ Sig2, ..., Sig(i-2), and\n   Sig(i-1) corresponding to AS1, AS2, ..., AS(i-2),\
    \ and AS(i-1),\n   respectively.\n   The method (Method 2 in Section 2.3) selected\
    \ for signing requires a\n   receiving router in ASi to perform the following\
    \ actions:\n   o  Validate the route origin pair (p, AS1) by performing a ROA\
    \ match.\n   o  Verify that Te is greater than the clock time at the router\n\
    \      performing these checks.\n   o  Check Sig1 with inputs {NLRI length, p,\
    \ AlgID, Te, AS1, AS2}.\n   o  Check Sig2 with inputs {Sig1, AS3}.\n   o  Check\
    \ Sig3 with inputs {Sig2, AS4}.\n   o  ...\n   o  ...\n   o  Check Sig(i-2) with\
    \ inputs {Sig(i-3), AS(i-1)}.\n   o  Check Sig(i-1) with inputs {Sig(i-2), ASi}.\n\
    \   o  If the route that has been verified is selected as the best path\n    \
    \  (for prefix p), then generate Sig(i) with inputs {Sig(i-1),\n      AS(i+1)},\
    \ and generate an update including Sig(i) to AS(i+1).\n   Note: The above description\
    \ of BGPsec update validation and\n   forwarding differs in its details from the\
    \ published BGPsec protocol\n   specification [RFC8205].  Please see Sections\
    \ 4 and 5 of [RFC8205].\n"
- title: 2.5.2.  Discussion
  contents:
  - "2.5.2.  Discussion\n   See Section 8.1 for suggestions regarding efficient sequencing\
    \ of\n   BGPsec validation processing in a receiving router.  Some or all of\n\
    \   the validation actions may be performed by an off-board server (see\n   Section\
    \ 9.3).\n"
- title: 2.6.  Prepending of ASes in AS Path
  contents:
  - '2.6.  Prepending of ASes in AS Path

    '
- title: 2.6.1.  Decision
  contents:
  - "2.6.1.  Decision\n   Prepending will be allowed.  Prepending is defined as including\
    \ more\n   than one instance of the AS number (ASN) of the router that is\n  \
    \ signing the update.\n   Note: The finalized BGPsec protocol specification [RFC8205]\
    \ uses a\n   pCount field associated with each AS in the path to indicate the\n\
    \   number of prepends for that AS (see Figure 5 in Section 3.1 of\n   [RFC8205]).\n"
- title: 2.6.2.  Discussion
  contents:
  - "2.6.2.  Discussion\n   The initial version [BGPsec-Initial] of the BGPsec specification\n\
    \   calls for a signature to be associated with each prepended AS.  The\n   optimization\
    \ of having just one signature for multiple prepended ASes\n   was pursued later.\
    \  The pCount field is now used to represent AS\n   prepends; see Section 3.1\
    \ in RFC 8205.\n"
- title: 2.7.  RPKI Data That Needs to Be Included in Updates
  contents:
  - '2.7.  RPKI Data That Needs to Be Included in Updates

    '
- title: 2.7.1.  Decision
  contents:
  - "2.7.1.  Decision\n   Concerning the inclusion of RPKI data in an update, it was\
    \ decided\n   that only the Subject Key Identifier (SKI) of the router certificate\n\
    \   must be included in a signed update.  This information identifies the\n  \
    \ router certificate, based on the SKI generation criteria defined in\n   [RFC6487].\n"
- title: 2.7.2.  Discussion
  contents:
  - "2.7.2.  Discussion\n   Whether or not each router public key certificate should\
    \ be included\n   in a signed update was discussed.  Inclusion of this information\n\
    \   might be helpful for routers that do not have access to RPKI servers\n   or\
    \ temporarily lose connectivity to them.  It is safe to assume that\n   in the\
    \ majority of network environments, intermittent connectivity\n   would not be\
    \ a problem.  So, it is best to avoid this complexity,\n   because the majority\
    \ of the use environments do not have connectivity\n   constraints.  Because the\
    \ SKI of a router certificate is a hash of\n   the public key of that certificate,\
    \ it suffices to select the public\n   key from that certificate.  This design\
    \ assumes that each BGPsec\n   router has access to a cache containing the relevant\
    \ data from\n   (validated) router certificates.\n"
- title: 3.  Withdrawal Protection
  contents:
  - '3.  Withdrawal Protection

    '
- title: 3.1.  Withdrawals Not Signed
  contents:
  - '3.1.  Withdrawals Not Signed

    '
- title: 3.1.1.  Decision
  contents:
  - "3.1.1.  Decision\n   Withdrawals are not signed.\n"
- title: 3.1.2.  Discussion
  contents:
  - "3.1.2.  Discussion\n   In the current BGP protocol, any AS can withdraw, at any\
    \ time, any\n   prefix it previously announced.  The rationale for not signing\n\
    \   withdrawals is that BGPsec assumes the use of transport security\n   between\
    \ neighboring BGPsec routers.  Thus, no external entity can\n   inject an update\
    \ that withdraws a route or replay a previously\n   transmitted update containing\
    \ a withdrawal.  Because the rationale\n   for withdrawing a route is not visible\
    \ to a neighboring BGPsec\n   router, there are residual vulnerabilities associated\
    \ with\n   withdrawals.  For example, a router that advertised a (valid) route\n\
    \   may fail to withdraw that route when it is no longer viable.  A\n   router\
    \ also might re-advertise a route that it previously withdrew,\n   before the\
    \ route is again viable.  This latter vulnerability is\n   mitigated by the Expire\
    \ Time associated with the origin AS's\n   signature (see Section 3.2).\n   Repeated\
    \ withdrawals and announcements for a prefix can run up the\n   BGP Route Flap\
    \ Damping (RFD) penalty [RFC2439] and may result in\n   unreachability for that\
    \ prefix at upstream routers.  But what can the\n   attacker gain from doing so?\
    \  This phenomenon is intrinsic to the\n   design and operation of RFD.\n"
- title: 3.2.  Signature Expire Time for Withdrawal Protection (a.k.a.
  contents:
  - "3.2.  Signature Expire Time for Withdrawal Protection (a.k.a.\n      Mitigation\
    \ of Replay Attacks)\n"
- title: 3.2.1.  Decision
  contents:
  - "3.2.1.  Decision\n   Note: As mentioned earlier (Section 2.2.2), the Expire Time\
    \ approach\n   to mitigation of replay attacks and withdrawal suppression was\n\
    \   subsequently changed to an approach based on router key rollover\n   [BGPsec-Rollover]\
    \ [Replay-Protection].\n   Only the originating AS inserts a signature Expire\
    \ Time in the\n   update; all other ASes along an AS path do not insert Expire\
    \ Times\n   associated with their respective signatures.  Further, the\n   originating\
    \ AS will re-originate a route sufficiently in advance of\n   the Expire Time\
    \ of its signature so that other ASes along an AS path\n   will typically receive\
    \ the re-originated route well ahead of the\n   current Expire Time for that route.\n\
    \   It is recommended that the duration of the signature Expire Time be\n   on\
    \ the order of days (preferably), but it may be on the order of\n   hours (about\
    \ 4 to 8 hours) in some cases on the basis of perceived\n   need for extra protection\
    \ from replay attacks (i.e., where extra\n   replay protection is perceived to\
    \ be critical).\n   Each AS should stagger the Expire Time values in the routes\
    \ it\n   originates.  Re-origination will be done, say, at time Tb after\n   origination\
    \ or the last re-origination, where Tb will equal a certain\n   percentage of\
    \ the Expire Time, Te (for example, Tb = 0.75 x Te).  The\n   percentage will\
    \ be configurable.  Additional guidance can be provided\n   via an operational\
    \ considerations document later.  Further, the\n   actual re-origination time\
    \ should be jittered with a uniform random\n   distribution over a short interval\
    \ {Tb1, Tb2} centered at Tb.\n   It is also recommended that a receiving BGPsec\
    \ router detect that the\n   only attribute change in an announcement (relative\
    \ to the current\n   best path) is the Expire Time (besides, of course, the signatures).\n\
    \   In that case, assuming that the update is found valid, the route\n   processor\
    \ should not re-announce the route to non-BGPsec peers.  (It\n   should sign and\
    \ re-announce the route to BGPsec speakers only.)  This\n   procedure will reduce\
    \ BGP chattiness for the non-BGPsec border\n   routers.\n"
- title: 3.2.2.  Discussion
  contents:
  - "3.2.2.  Discussion\n   Mitigation of BGPsec update replay attacks can be thought\
    \ of as\n   protection against malicious re-advertisements of withdrawn routes.\n\
    \   If each AS along a path were to insert its own signature Expire Time,\n  \
    \ then there would be much additional BGP chattiness and an increase in\n   BGP\
    \ processing load due to the need to detect and react to multiple\n   (possibly\
    \ redundant) signature Expire Times.  Furthermore, there\n   would be no extra\
    \ benefit from the point of view of mitigation of\n   replay attacks as compared\
    \ to having a single Expire Time\n   corresponding to the signature of the originating\
    \ AS.\n   As noted in Section 3.2.1, the recommended Expire Time value is on\n\
    \   the order of days, but 4 to 8 hours may be used in some cases on the\n   basis\
    \ of perceived need for extra protection from replay attacks.\n   Thus, different\
    \ ASes may choose different values based on the\n   perceived need to protect\
    \ against malicious route replays.  (A\n   shorter Expire Time reduces the window\
    \ during which an AS can\n   maliciously replay the route.  However, shorter Expire\
    \ Time values\n   cause routes to be refreshed more often, thus causing more BGP\n\
    \   chatter.)  Even a 4-hour duration seems long enough to keep the\n   re-origination\
    \ workload manageable.  For example, if 500K routes are\n   re-originated every\
    \ 4 hours, it amounts to an increase in BGP update\n   load of 35 updates per\
    \ second; this can be considered reasonable.\n   However, further analysis is\
    \ needed to confirm these recommendations.\n   As stated in Section 3.2.1, the\
    \ originating AS will re-originate a\n   route sufficiently in advance of its\
    \ Expire Time.  What is considered\n   \"sufficiently in advance\"?  To answer\
    \ this question, modeling should\n   be performed to determine the 95th-percentile\
    \ convergence time of\n   update propagation in a BGPsec-enabled Internet.\n \
    \  Each BGPsec router should stagger the Expire Time values in the\n   updates\
    \ it originates, especially during table dumps to a neighbor or\n   during its\
    \ own recovery from a BGP session failure.  By doing this,\n   the re-origination\
    \ (i.e., beaconing) workload at the router will be\n   dispersed.\n"
- title: 3.3.  Should Route Expire Time be Communicated in a Separate Message?
  contents:
  - '3.3.  Should Route Expire Time be Communicated in a Separate Message?

    '
- title: 3.3.1.  Decision
  contents:
  - "3.3.1.  Decision\n   The idea of sending a new signature Expire Time in a special\
    \ message\n   (rather than retransmitting the entire update with signatures) was\n\
    \   considered.  However, the decision was made to not do this.\n   Re-origination\
    \ to communicate a new signature Expire Time will be\n   done by propagating a\
    \ normal update message; no special type of\n   message will be required.\n"
- title: 3.3.2.  Discussion
  contents:
  - "3.3.2.  Discussion\n   It was suggested that if the re-beaconing of the signature\n\
    \   Expire Time is carried in a separate special message, then any\n   processing\
    \ load related to the update may be reduced.  But it was\n   recognized that such\
    \ a re-beaconing message by necessity entails AS\n   path and prefix information\
    \ and, hence, cannot be separated from the\n   update.\n   It was observed that\
    \ at the edge of the Internet, there are frequent\n   updates that may result\
    \ from such simple situations as a BGP session\n   being switched from one interface\
    \ to another (e.g., from primary to\n   backup) between two peering ASes (e.g.,\
    \ customer and provider).  With\n   traditional BGP, these updates do not propagate\
    \ beyond the two ASes\n   involved.  But with BGPsec, the customer AS will put\
    \ in a new\n   signature Expire Time each time such an event happens; hence, the\n\
    \   update will need to propagate throughout the Internet (limited only\n   by\
    \ the process of best-path selection).  It was accepted that this\n   cost of\
    \ added churn will be unavoidable.\n"
- title: 3.4.  Effect of Expire Time Updates in BGPsec on RFD
  contents:
  - '3.4.  Effect of Expire Time Updates in BGPsec on RFD

    '
- title: 3.4.1.  Decision
  contents:
  - "3.4.1.  Decision\n   With regard to the RFD protocol [RFC2439] [JunOS] [CiscoIOS],\
    \ no\n   differential treatment is required for Expire-Time-triggered\n   (re-beaconed)\
    \ BGPsec updates.\n   However, it was noted that it would be preferable if these\
    \ updates\n   did not cause route churn (and perhaps did not even require any\n\
    \   RFD-related processing), since they are identical except for the\n   change\
    \ in the Expire Time value.  This can be accomplished by not\n   assigning an\
    \ RFD penalty to Expire-Time-triggered updates.  If the\n   community agrees,\
    \ this could be accommodated, but a change to the\n   BGP-RFD protocol will be\
    \ required.\n"
- title: 3.4.2.  Discussion
  contents:
  - "3.4.2.  Discussion\n   To summarize, this decision is supported by the following\n\
    \   observations:\n   1.  Expire-Time-triggered updates are generally not preceded\
    \ by\n       withdrawals; hence, the path hunting and associated RFD\n       exacerbation\
    \ [Mao02] [RIPE580] problems are not anticipated.\n   2.  Such updates would not\
    \ normally change the best path (unless\n       another concurrent event impacts\
    \ the best path).\n   3.  Expire-Time-triggered updates would have a negligible\
    \ impact on\n       RFD penalty accumulation because the re-advertisement interval\
    \ is\n       much longer relative to the half-time of RFD penalty decay.\n   Elaborating\
    \ further on the third observation above, it may be noted\n   that the re-advertisements\
    \ (i.e., beacons) of a route for a given\n   address prefix from a given peer\
    \ will be received at intervals of\n   several hours (see Section 3.2).  During\
    \ that time period, any\n   incremental contribution to the RFD penalty due to\
    \ an Expire-Time-\n   triggered update would decay sufficiently to have negligible\
    \ (if any)\n   impact on damping the address prefix in question.\n   Additional\
    \ details regarding this analysis and justification are as\n   follows:\n   The\
    \ frequency with which RFD penalty increments may be triggered for\n   a given\
    \ prefix from a given peer is the same as the re-beaconing\n   frequency for that\
    \ prefix from its origin AS.  The re-beaconing\n   frequency is on the order of\
    \ once every several hours (see\n   Section 3.2).  The incremental RFD penalty\
    \ assigned to a prefix due\n   to a re-beaconed update varies, depending on the\
    \ implementation.  For\n   example, it appears that the JunOS implementation [JunOS]\
    \ would\n   assign a penalty of 1000 or 500, depending on whether the re-beaconed\n\
    \   update is regarded as a re-advertisement or an attribute change,\n   respectively.\
    \  Normally, a re-beaconed update would be treated as an\n   attribute change.\
    \  On the other hand, the Cisco implementation\n   [CiscoIOS] assigns an RFD penalty\
    \ only in the case of an actual flap\n   (i.e., a route is available, then unavailable,\
    \ or vice versa).  So,\n   it appears that Cisco's implementation of RFD would\
    \ not assign any\n   penalty for a re-beaconed update (i.e., a route was already\n\
    \   advertised previously and was not withdrawn, and the re-beaconed\n   update\
    \ is merely updating the Expire Time attribute).  Even if one\n   assumes that\
    \ an RFD penalty of 500 is assigned (corresponding to an\n   attribute change\
    \ according to the JunOS RFD implementation), it can\n   be illustrated that the\
    \ incremental effect it would have on damping\n   the prefix in question would\
    \ be negligible: the half-time of RFD\n   penalty decay is normally set to 15\
    \ minutes, whereas the re-beaconing\n   frequency is on the order of once every\
    \ several hours.  An\n   incremental penalty of 500 would decay to 31.25 in 1\
    \ hour, 0.12 in\n   2 hours, and 3x10^(-5) in 3 hours.  It may also be noted that\
    \ the\n   threshold for route suppression is 3000 in JunOS and 2000 in\n   Cisco\
    \ IOS.  Based on the foregoing analysis, it may be concluded that\n   routine\
    \ re-beaconing by itself would not result in RFD suppression of\n   routes in\
    \ the BGPsec protocol.\n"
- title: 4.  Signature Algorithms and Router Keys
  contents:
  - '4.  Signature Algorithms and Router Keys

    '
- title: 4.1.  Signature Algorithms
  contents:
  - '4.1.  Signature Algorithms

    '
- title: 4.1.1.  Decision
  contents:
  - "4.1.1.  Decision\n   Initially, the Elliptic Curve Digital Signature Algorithm\
    \ (ECDSA)\n   with curve P-256 and SHA-256 will be used for generating BGPsec\
    \ path\n   signatures.  One other signature algorithm, e.g., RSA-2048, will also\n\
    \   be used during prototyping and testing.  The use of a second\n   signature\
    \ algorithm is needed to verify the ability of the BGPsec\n   implementations\
    \ to change from a current algorithm to the next\n   algorithm.\n   Note: The\
    \ BGPsec cryptographic algorithms document [RFC8208]\n   specifies only the ECDSA\
    \ with curve P-256 and SHA-256.\n"
- title: 4.1.2.  Discussion
  contents:
  - "4.1.2.  Discussion\n   Initially, the RSA-2048 algorithm for BGPsec update signatures\
    \ was\n   considered as a choice because it is being used ubiquitously in the\n\
    \   RPKI system.  However, the use of ECDSA P-256 was decided upon\n   because\
    \ it yields a smaller signature size; hence, the update size\n   and (in turn)\
    \ the RIB size needed in BGPsec routers would be much\n   smaller [RIB_size].\n\
    \   Using two different signature algorithms (e.g., ECDSA P-256 and\n   RSA-2048)\
    \ to test the transition from one algorithm to the other will\n   increase confidence\
    \ in prototype implementations.\n   Optimizations and specialized algorithms (e.g.,\
    \ for speedups) built\n   on Elliptic Curve Cryptography (ECC) algorithms may\
    \ have active IPR\n   (intellectual property rights), but at the time of publication\
    \ of\n   this document no IPR had been disclosed to the IETF for the basic\n \
    \  (unoptimized) algorithms.  (To understand this better, [RFC6090] can\n   be\
    \ useful as a starting point.)\n   Note: Recently, even open-source implementations\
    \ have incorporated\n   certain cryptographic optimizations and demonstrated significant\n\
    \   performance speedup [Gueron].  Researchers continue to devote\n   significant\
    \ effort toward demonstrating substantial speedup for the\n   ECDSA as part of\
    \ BGPsec implementations [Mehmet1] [Mehmet2].\n"
- title: 4.2.  Agility of Signature Algorithms
  contents:
  - '4.2.  Agility of Signature Algorithms

    '
- title: 4.2.1.  Decision
  contents:
  - "4.2.1.  Decision\n   During the transition period from one algorithm (i.e., the\
    \ current\n   algorithm) to the next (new) algorithm, the updates will carry two\n\
    \   sets of signatures (i.e., two Signature_Blocks), one corresponding to\n  \
    \ each algorithm.  Each Signature_Block will be preceded by its\n   type-length\
    \ field and an algorithm suite identifier.  A BGPsec\n   speaker that has been\
    \ upgraded to handle the new algorithm should\n   validate both Signature_Blocks\
    \ and then add its corresponding\n   signature to each Signature_Block for forwarding\
    \ the update to the\n   next AS.  A BGPsec speaker that has not been upgraded\
    \ to handle the\n   new algorithm will strip off the Signature_Block of the new\
    \ algorithm\n   and then will forward the update after adding its own signature\
    \ to\n   the Signature_Block of the current algorithm.\n   It was decided that\
    \ there will be at most two Signature_Blocks per\n   update.\n   Note: BGPsec\
    \ path signatures are carried in the Signature_Block,\n   which is an attribute\
    \ contained in the BGPsec_PATH attribute (see\n   Section 3.2 in [RFC8205]). \
    \ The algorithm agility scheme described in\n   the published BGPsec protocol\
    \ specification is consistent with the\n   above; see Section 6.1 of [RFC8205].\n"
- title: 4.2.2.  Discussion
  contents:
  - "4.2.2.  Discussion\n   A length field in the Signature_Block allows for delineation\
    \ of the\n   two signature blocks.  Hence, a BGPsec router that doesn't know about\n\
    \   a particular algorithm suite (and, hence, doesn't know how long\n   signatures\
    \ were for that algorithm suite) could still skip over the\n   corresponding Signature_Block\
    \ when parsing the message.\n   The overlap period between the two algorithms\
    \ is expected to last\n   2 to 4 years.  The RIB memory and cryptographic processing\
    \ capacity\n   will have to be sized to cope with such overlap periods when updates\n\
    \   would contain two sets of signatures [RIB_size].\n   The lifetime of a signature\
    \ algorithm is anticipated to be much\n   longer than the duration of a transition\
    \ period from the current\n   algorithm to a new algorithm.  It is fully expected\
    \ that all ASes\n   will have converted to the required new algorithm within a\
    \ certain\n   amount of time that is much shorter than the interval in which a\n\
    \   subsequent newer algorithm may be investigated and standardized for\n   BGPsec.\
    \  Hence, the need for more than two Signature_Blocks per\n   update is not envisioned.\n"
- title: 4.3.  Sequential Aggregate Signatures
  contents:
  - '4.3.  Sequential Aggregate Signatures

    '
- title: 4.3.1.  Decision
  contents:
  - "4.3.1.  Decision\n   There is currently weak or no support for the Sequential\
    \ Aggregate\n   Signature (SAS) approach.  Please see Section 4.3.2 for a brief\n\
    \   description of what the SAS is and what its pros and cons are.\n"
- title: 4.3.2.  Discussion
  contents:
  - "4.3.2.  Discussion\n   In the SAS method, there would be only one (aggregated)\
    \ signature per\n   signature block, irrespective of the number of AS hops.  For\
    \ example,\n   ASn (the nth AS) takes as input the signatures of all previous\
    \ ASes\n   [AS1, ..., AS(n-1)] and produces a single composite signature.  This\n\
    \   composite signature has the property that a recipient who has the\n   public\
    \ keys for AS1, ..., ASn can verify (using only the single\n   composite signature)\
    \ that all of the ASes actually signed the\n   message.  The SAS could potentially\
    \ result in savings in bandwidth\n   and in Protocol Data Unit (PDU) size, and\
    \ maybe in RIB size, but the\n   signature generation and validation costs will\
    \ be higher as compared\n   to one signature per AS hop.\n   SAS schemes exist\
    \ in the literature, typically based on RSA or its\n   equivalent.  For a SAS\
    \ with RSA and for the cryptographic strength\n   needed for BGPsec signatures,\
    \ a 2048-bit signature size (RSA-2048)\n   would be required.  However, without\
    \ a SAS, the ECDSA with a 512-bit\n   signature (256-bit key) would suffice for\
    \ equivalent cryptographic\n   strength.  The larger signature size of RSA used\
    \ with a SAS\n   undermines the advantages of the SAS, because the average hop\
    \ count,\n   i.e., the number of ASes, for a route is about 3.8.  In the end,\
    \ it\n   may turn out that the SAS has more complexity and does not provide\n\
    \   sufficient savings in PDU size or RIB size to merit its use.  Further\n  \
    \ exploration of this is needed to better understand SAS properties and\n   applicability\
    \ for BGPsec.  There is also a concern that the SAS is\n   not a time-tested cryptographic\
    \ technique, and thus its adoption is\n   potentially risky.\n"
- title: 4.4.  Protocol Extensibility
  contents:
  - "4.4.  Protocol Extensibility\n   There is clearly a need to specify a transition\
    \ path from a current\n   protocol specification to a new version.  When changes\
    \ to the\n   processing of the BGPsec path signatures are required, a new version\n\
    \   of BGPsec will be required.  Examples of this include changes to the\n   data\
    \ that is protected by the BGPsec signatures or adoption of a\n   signature algorithm\
    \ in which the number of signatures in the\n   signature block may not correspond\
    \ to one signature per AS in the\n   AS path (e.g., aggregate signatures).\n"
- title: 4.4.1.  Decision
  contents:
  - "4.4.1.  Decision\n   This protocol-version transition mechanism is analogous\
    \ to the\n   algorithm transition discussed in Section 4.2.  During the transition\n\
    \   period from one protocol version (i.e., the current version) to the\n   next\
    \ (new) version, updates will carry two sets of signatures (i.e.,\n   two Signature_Blocks),\
    \ one corresponding to each version.  A\n   protocol-version identifier is associated\
    \ with each Signature_Block.\n   Hence, each Signature_Block will be preceded\
    \ by its type-length field\n   and a protocol-version identifier.  A BGPsec speaker\
    \ that has been\n   upgraded to handle the new version should validate both\n\
    \   Signature_Blocks and then add its corresponding signature to each\n   Signature_Block\
    \ for forwarding the update to the next AS.  A BGPsec\n   speaker that has not\
    \ been upgraded to handle the new protocol version\n   will strip off the Signature_Block\
    \ of the new version and then will\n   forward the update with an attachment of\
    \ its own signature to the\n   Signature_Block of the current version.\n   Note:\
    \ The details of protocol extensibility (i.e., transition to a\n   new version\
    \ of BGPsec) in the published BGPsec protocol specification\n   (see Section 6.3\
    \ in [RFC8205]) differ somewhat from the above.  In\n   particular, the protocol-version\
    \ identifier is not part of the BGPsec\n   update.  Instead, it is negotiated\
    \ during the BGPsec capability\n   exchange portion of BGPsec session negotiation.\n"
- title: 4.4.2.  Discussion
  contents:
  - "4.4.2.  Discussion\n   In the case that a change to BGPsec is deemed desirable,\
    \ it is\n   expected that a subsequent version of BGPsec would be created and\n\
    \   that this version of BGPsec would specify a new BGP path attribute\n   (let's\
    \ call it \"BGPsec_PATH_TWO\") that is designed to accommodate the\n   desired\
    \ changes to BGPsec.  At this point, a transition would begin\n   that is analogous\
    \ to the algorithm transition discussed in\n   Section 4.2.  During the transition\
    \ period, all BGPsec speakers will\n   simultaneously include both the BGPsec_PATH\
    \ (current) attribute (see\n   Section 3 of RFC 8205) and the new BGPsec_PATH_TWO\
    \ attribute.  Once\n   the transition is complete, the use of BGPsec_PATH could\
    \ then be\n   deprecated, at which point BGPsec speakers will include only the\
    \ new\n   BGPsec_PATH_TWO attribute.  Such a process could facilitate a\n   transition\
    \ to new BGPsec semantics in a backwards-compatible fashion.\n"
- title: 4.5.  Key per Router (Rogue Router Problem)
  contents:
  - '4.5.  Key per Router (Rogue Router Problem)

    '
- title: 4.5.1.  Decision
  contents:
  - "4.5.1.  Decision\n   Within each AS, each individual BGPsec router can have a\
    \ unique pair\n   of private and public keys [RFC8207].\n"
- title: 4.5.2.  Discussion
  contents:
  - "4.5.2.  Discussion\n   Given a unique key pair per router, if a router is compromised,\
    \ its\n   key pair can be revoked independently, without disrupting the other\n\
    \   routers in the AS.  Each per-router key pair will be represented in\n   an\
    \ end-entity certificate issued under the certification authority\n   (CA) certificate\
    \ of the AS.  The Subject Key Identifier (SKI) in the\n   signature points to\
    \ the router certificate (and thus the unique\n   public key) of the router that\
    \ affixed its signature, so that a\n   validating router can reliably identify\
    \ the public key to use for\n   signature verification.\n"
- title: 4.6.  Router ID
  contents:
  - '4.6.  Router ID

    '
- title: 4.6.1.  Decision
  contents:
  - "4.6.1.  Decision\n   The router certificate subject name will be the string \"\
    ROUTER\"\n   followed by a decimal representation of a 4-byte ASN followed by\
    \ the\n   router ID.  (Note: The details are specified in Section 3.1 in\n   [RFC8209].)\n"
- title: 4.6.2.  Discussion
  contents:
  - "4.6.2.  Discussion\n   Every X.509 certificate requires a subject name [RFC6487].\
    \  The\n   stylized subject name adopted here is intended to facilitate\n   debugging\
    \ by including the ASN and router ID.\n"
- title: 5.  Optimizations and Resource Sizing
  contents:
  - '5.  Optimizations and Resource Sizing

    '
- title: 5.1.  Update Packing and Repacking
  contents:
  - "5.1.  Update Packing and Repacking\n   With traditional BGP [RFC4271], an originating\
    \ BGP router normally\n   packs multiple prefix announcements into one update\
    \ if the prefixes\n   all share the same BGP attributes.  When an upstream BGP\
    \ router\n   forwards eBGP updates to its peers, it can also pack multiple\n \
    \  prefixes (based on the shared AS path and attributes) into one\n   update.\
    \  The update propagated by the upstream BGP router may include\n   only a subset\
    \ of the prefixes that were packed in a received update.\n"
- title: 5.1.1.  Decision
  contents:
  - "5.1.1.  Decision\n   Each update contains exactly one prefix.  This avoids a\
    \ level of\n   complexity that would otherwise be inevitable if the origin had\n\
    \   packed and signed multiple prefixes in an update and an upstream AS\n   decided\
    \ to propagate an update containing only a subset of the\n   prefixes in that\
    \ update.  BGPsec recommendations regarding packing\n   and repacking may be revisited\
    \ when optimizations are considered in\n   the future.\n"
- title: 5.1.2.  Discussion
  contents:
  - "5.1.2.  Discussion\n   Currently, with traditional BGP, there are, on average,\
    \ approximately\n   four prefixes announced per update [RIB_size].  So, the number\
    \ of BGP\n   updates (carrying announcements) is about four times fewer, on\n\
    \   average, as compared to the number of prefixes announced.\n   The current\
    \ decision is to include only one prefix per secured update\n   (see Section 2.2.2).\
    \  When optimizations are considered in the\n   future, the possibility of packing\
    \ multiple prefixes into an update\n   can also be considered.  (Please see Section\
    \ 5.2 for a discussion of\n   signature per prefix vs. signature per update.)\
    \  Repacking could be\n   performed if signatures were generated on a per-prefix\
    \ basis.\n   However, one problem regarding this approach -- multiple prefixes\
    \ in\n   a BGP update but with a separate signature for each prefix -- is that\n\
    \   the resulting BGP update violates the basic definition of a BGP\n   update:\
    \ the different prefixes will have different signatures and\n   Expire Time attributes,\
    \ while a BGP update (by definition) must have\n   the same set of shared attributes\
    \ for all prefixes it carries.\n"
- title: 5.2.  Signature per Prefix vs. Signature per Update
  contents:
  - '5.2.  Signature per Prefix vs. Signature per Update

    '
- title: 5.2.1.  Decision
  contents:
  - "5.2.1.  Decision\n   The initial design calls for including exactly one prefix\
    \ per update;\n   hence, there is only one signature in each secured update (modulo\n\
    \   algorithm transition conditions).\n"
- title: 5.2.2.  Discussion
  contents:
  - "5.2.2.  Discussion\n   Some notes to assist in future optimization discussions\
    \ follow:\n   In the general case of one signature per update, multiple prefixes\n\
    \   may be signed with one signature together with their shared AS path,\n   next\
    \ ASN, and Expire Time.  If the \"signature per update\" technique\n   is used,\
    \ then there are potential savings in update PDU size as well\n   as RIB memory\
    \ size.  But if there are any changes made to the\n   announced prefix set along\
    \ the AS path, then the AS where the change\n   occurs would need to insert an\
    \ Explicit Path Attribute (EPA)\n   [Secure-BGP].  The EPA conveys information\
    \ regarding what the prefix\n   set contained prior to the change.  There would\
    \ be one EPA for each\n   AS that made such a modification, and there would be\
    \ a way to\n   associate each EPA with its corresponding AS.  This enables an\n\
    \   upstream AS to know and verify what was announced and signed by prior\n  \
    \ ASes in the AS path (in spite of changes made to the announced prefix\n   set\
    \ along the way).  The EPA adds complexity to processing (signature\n   generation\
    \ and validation); further increases the size of updates\n   and, thus, of the\
    \ RIB; and exposes data to downstream ASes that would\n   not otherwise be exposed.\
    \  Not all of the pros and cons of packing\n   and repacking in the context of\
    \ signature per prefix vs. signature\n   per update (with packing) have been evaluated.\
    \  But the current\n   recommendation is for having only one prefix per update\
    \ (no packing),\n   so there is no need for the EPA.\n"
- title: 5.3.  Maximum BGPsec Update PDU Size
  contents:
  - "5.3.  Maximum BGPsec Update PDU Size\n   The current BGP update message PDU size\
    \ is limited to 4096 bytes\n   [RFC4271].  The question was raised as to whether\
    \ or not BGPsec would\n   require a larger update PDU size.\n"
- title: 5.3.1.  Decision
  contents:
  - "5.3.1.  Decision\n   The current thinking is that the maximum PDU size should\
    \ be increased\n   to 64 KB [BGP-Ext-Msg] so that there is sufficient room to\n\
    \   accommodate two Signature_Blocks (i.e., one block with a current\n   algorithm\
    \ and another block with a new signature algorithm during a\n   future transition\
    \ period) for long AS paths.\n   Note: RFC 8205 states the following: \"All BGPsec\
    \ UPDATE messages MUST\n   conform to BGP's maximum message size.  If the resulting\
    \ message\n   exceeds the maximum message size, then the guidelines in Section\
    \ 9.2\n   of RFC 4271 [RFC4271] MUST be followed.\"\n"
- title: 5.3.2.  Discussion
  contents:
  - "5.3.2.  Discussion\n   The current maximum message size for BGP updates is 4096\
    \ octets.  An\n   effort is underway in the IETF to extend it to a larger size\n\
    \   [BGP-Ext-Msg].  BGPsec will conform to whatever maximum message size\n   is\
    \ available for BGP while adhering to the guidelines in Section 9.2\n   of RFC\
    \ 4271 [RFC4271].\n   Note: Estimates for the average and maximum sizes anticipated\
    \ for\n   BGPsec update messages are provided in [MsgSize].\n"
- title: 5.4.  Temporary Suspension of Attestations and Validations
  contents:
  - '5.4.  Temporary Suspension of Attestations and Validations

    '
- title: 5.4.1.  Decision
  contents:
  - "5.4.1.  Decision\n   If a BGPsec-capable router needs to temporarily suspend/defer\
    \ signing\n   and/or validation of BGPsec updates during periods of route processor\n\
    \   overload, the router may do so even though such suspension/deferment\n   is\
    \ not desirable; the specification does not forbid it.  Following\n   any temporary\
    \ suspension, the router should subsequently send signed\n   updates corresponding\
    \ to the updates for which validation and signing\n   were skipped.  The router\
    \ also may choose to skip only validation but\n   still sign and forward updates\
    \ during periods of congestion.\n"
- title: 5.4.2.  Discussion
  contents:
  - "5.4.2.  Discussion\n   In some situations, a BGPsec router may be unable to keep\
    \ up with the\n   workload of performing signing and/or validation.  This can\
    \ happen,\n   for example, during BGP session recovery when a router has to send\n\
    \   the entire routing table to a recovering router in a neighboring AS\n   (see\
    \ [CPUworkload]).  So, it is possible that a BGPsec router\n   temporarily pauses\
    \ performing the validation or signing of updates.\n   When the workload eases,\
    \ the BGPsec router should clear the\n   validation or signing backlog and send\
    \ signed updates corresponding\n   to the updates for which validation and signing\
    \ were skipped.  During\n   periods of overload, the router may simply send unsigned\
    \ updates\n   (with signatures dropped) or may sign and forward the updates with\n\
    \   signatures (even though the router itself has not yet verified the\n   signatures\
    \ it received).\n   A BGPsec-capable AS may request (out of band) that a BGPsec-capable\n\
    \   peer AS never downgrade a signed update to an unsigned update.\n   However,\
    \ in partial-deployment scenarios, it is not possible for a\n   BGPsec router\
    \ to require a BGPsec-capable eBGP peer to send only\n   signed updates, except\
    \ for prefixes originated by the peer's AS.\n   Note: If BGPsec has not been negotiated\
    \ with a peer, then a BGPsec\n   router forwards only unsigned updates to that\
    \ peer; the sending\n   router does so by following the reconstruction procedure\
    \ in\n   Section 4.4 of [RFC8205] to generate an AS_PATH attribute\n   corresponding\
    \ to the BGPsec_PATH attribute in a received signed\n   update.  If the above-mentioned\
    \ temporary suspension is ever applied,\n   then the same AS_PATH reconstruction\
    \ procedure should be utilized.\n"
- title: 6.  Incremental Deployment and Negotiation of BGPsec
  contents:
  - '6.  Incremental Deployment and Negotiation of BGPsec

    '
- title: 6.1.  Downgrade Attacks
  contents:
  - '6.1.  Downgrade Attacks

    '
- title: 6.1.1.  Decision
  contents:
  - "6.1.1.  Decision\n   No attempt will be made in the BGPsec design to prevent\
    \ downgrade\n   attacks, i.e., a BGPsec-capable router sending unsigned updates\
    \ when\n   it is capable of sending signed updates.\n"
- title: 6.1.2.  Discussion
  contents:
  - "6.1.2.  Discussion\n   BGPsec allows routers to temporarily suspend signing updates\
    \ (see\n   Section 5.4).  Therefore, it would be contradictory if we were to try\n\
    \   to incorporate in the BGPsec protocol a way to detect and reject\n   downgrade\
    \ attacks.  One proposed way to detect downgrade attacks was\n   considered, based\
    \ on signed peering registrations (see Section 9.5).\n"
- title: 6.2.  Inclusion of Address Family in Capability Advertisement
  contents:
  - '6.2.  Inclusion of Address Family in Capability Advertisement

    '
- title: 6.2.1.  Decision
  contents:
  - "6.2.1.  Decision\n   It was decided that during capability negotiation, the address\
    \ family\n   for which the BGPsec speaker is advertising support for BGPsec will\n\
    \   be shared using the Address Family Identifier (AFI).  Initially, two\n   address\
    \ families would be included, namely, IPv4 and IPv6.  BGPsec\n   for use with\
    \ other address families may be specified in the future.\n   Simultaneous use\
    \ of the two (i.e., IPv4 and IPv6) address families\n   for the same BGPsec session\
    \ will require that the BGPsec speaker\n   include two instances of this capability\
    \ (one for each address\n   family) during BGPsec capability negotiation.\n"
- title: 6.2.2.  Discussion
  contents:
  - "6.2.2.  Discussion\n   If new address families are supported in the future, they\
    \ will be\n   added in future versions of the specification.  A comment was made\n\
    \   that too many version numbers are bad for interoperability.\n   Renegotiation\
    \ on the fly to add a new address family (i.e., without\n   changeover to a new\
    \ version number) is desirable.\n"
- title: '6.3.  Incremental Deployment: Capability Negotiation'
  contents:
  - '6.3.  Incremental Deployment: Capability Negotiation

    '
- title: 6.3.1.  Decision
  contents:
  - "6.3.1.  Decision\n   BGPsec will be incrementally deployable.  BGPsec routers\
    \ will use\n   capability negotiation to agree to run BGPsec between them.  If\
    \ a\n   BGPsec router's peer does not agree to run BGPsec, then the BGPsec\n \
    \  router will run only traditional BGP with that peer, i.e., it will\n   not\
    \ send BGPsec (i.e., signed) updates to the peer.\n   Note: See Section 7.9 of\
    \ [RFC8205] for a discussion of incremental /\n   partial-deployment considerations.\
    \  Also, Section 6 of [RFC8207]\n   describes how edge sites (stub ASes) can sign\
    \ updates that they\n   originate but can receive only unsigned updates.  This\
    \ facilitates a\n   less expensive upgrade to BGPsec in resource-limited stub\
    \ ASes and\n   expedites incremental deployment.\n"
- title: 6.3.2.  Discussion
  contents:
  - "6.3.2.  Discussion\n   The partial-deployment approach to incremental deployment\
    \ will result\n   in \"BGPsec islands\".  Updates that originate within a BGPsec\
    \ island\n   will generally propagate with signed AS paths to the edges of that\n\
    \   island.  As BGPsec adoption grows, the BGPsec islands will expand\n   outward\
    \ (subsuming non-BGPsec portions of the Internet) and/or pairs\n   of islands\
    \ may join to form larger BGPsec islands.\n"
- title: 6.4.  Partial Path Signing
  contents:
  - "6.4.  Partial Path Signing\n   \"Partial path signing\" means that a BGPsec AS\
    \ can be permitted to\n   sign an update that was received unsigned from a downstream\
    \ neighbor.\n   That is, the AS would add its ASN to the AS path and sign the\n\
    \   (previously unsigned) update to other neighboring (upstream)\n   BGPsec ASes.\n"
- title: 6.4.1.  Decision
  contents:
  - "6.4.1.  Decision\n   It was decided that partial path signing in BGPsec will\
    \ not be\n   allowed.  A BGPsec update must be fully signed, i.e., each AS in\
    \ the\n   AS path must sign the update.  So, in a signed update, there must be\n\
    \   a signature corresponding to each AS in the AS path.\n"
- title: 6.4.2.  Discussion
  contents:
  - "6.4.2.  Discussion\n   Partial path signing (as described above) implies that\
    \ the AS path is\n   not rigorously protected.  Rigorous AS path protection is\
    \ a key\n   requirement of BGPsec [RFC7353].  Partial path signing clearly\n \
    \  reintroduces the following attack vulnerability: if a BGPsec speaker\n   is\
    \ allowed to sign an unsigned update and if signed (i.e., partially\n   or fully\
    \ signed) updates would be preferred over unsigned updates,\n   then a faulty,\
    \ misconfigured, or subverted BGPsec speaker can\n   manufacture any unsigned\
    \ update it wants (by inserting a valid origin\n   AS) and add a signature to\
    \ it to increase the chance that its update\n   will be preferred.\n"
- title: '6.5.  Consideration of Stub ASes with Resource Constraints: Encouraging'
  contents:
  - "6.5.  Consideration of Stub ASes with Resource Constraints: Encouraging\n   \
    \   Early Adoption\n"
- title: 6.5.1.  Decision
  contents:
  - "6.5.1.  Decision\n   The protocol permits each pair of BGPsec-capable ASes to\n\
    \   asymmetrically negotiate the use of BGPsec.  Thus, a stub AS (or\n   downstream\
    \ customer AS) can agree to perform BGPsec only in the\n   transmit direction\
    \ and speak traditional BGP in the receive\n   direction.  In this arrangement,\
    \ the ISP's (upstream) AS will not\n   send signed updates to this stub or customer\
    \ AS.  Thus, the stub AS\n   can avoid the need to hardware-upgrade its route\
    \ processor and RIB\n   memory to support BGPsec update validation.\n"
- title: 6.5.2.  Discussion
  contents:
  - "6.5.2.  Discussion\n   Various other options were also considered for accommodating\
    \ a\n   resource-constrained stub AS, as discussed below:\n   1.  An arrangement\
    \ that can be effected outside of the BGPsec\n       specification is as follows.\
    \  Through a private arrangement\n       (invisible to other ASes), an ISP's AS\
    \ (upstream AS) can truncate\n       the stub AS (or downstream AS) from the path\
    \ and sign the update\n       as if the prefix is originating from the ISP's AS\
    \ (even though\n       the update originated unsigned from the customer AS). \
    \ This way,\n       the path will appear fully signed to the rest of the network.\n\
    \       This alternative will require the owner of the prefix at the stub\n  \
    \     AS to issue a ROA for the upstream AS, so that the upstream AS is\n    \
    \   authorized to originate routes for the prefix.\n   2.  Another type of arrangement\
    \ that can also be effected outside of\n       the BGPsec specification is as\
    \ follows.  The stub AS does not\n       sign updates, but it obtains an RPKI\
    \ (CA) certificate and issues\n       a router certificate under that CA certificate.\
    \  It passes on the\n       private key for the router certificate to its upstream\
    \ provider.\n       That ISP (i.e., the second-hop AS) would insert a signature\
    \ on\n       behalf of the stub AS using the private key obtained from the\n \
    \      stub AS.  This arrangement is called \"proxy signing\" (see\n       Section\
    \ 6.6).\n   3.  An extended ROA is created that includes the stub AS as the\n\
    \       originator of the prefix and the upstream provider as the\n       second-hop\
    \ AS, and partial signatures would be allowed (i.e., the\n       stub AS need\
    \ not sign the updates).  It is recognized that this\n       approach is also\
    \ authoritative and not trust based.  It was\n       observed that the extended\
    \ ROA is not much different from what is\n       done with the ROA (in its current\
    \ form) when a Provider-\n       Independent (PI) address is originated from a\
    \ provider's AS.\n       This approach was rejected due to possible complications\
    \ with the\n       creation and use of a new RPKI object, namely, the extended\
    \ ROA.\n       Also, the validating BGPsec router has to perform a level of\n\
    \       indirection with this approach, i.e., it must detect that an\n       update\
    \ is not fully signed and then look for the extended ROA to\n       validate.\n\
    \   4.  Another method, based on a different form of indirection, would\n    \
    \   be as follows.  The customer (stub) AS registers something like a\n      \
    \ Proxy Signer Authorization, which authorizes the second-hop\n       (i.e., provider)\
    \ AS to sign on behalf of the customer AS using\n       the provider's own key\
    \ [Dynamics].  This method allows for fully\n       signed updates (unlike the\
    \ approach based on the extended ROA).\n       But this approach also requires\
    \ the creation of a new RPKI\n       object, namely, the Proxy Signer Authorization.\
    \  In this\n       approach, the second-hop AS and validating ASes have to perform\
    \ a\n       level of indirection.  This approach was also rejected.\n   The various\
    \ inputs regarding ISP preferences were taken into\n   consideration, and eventually\
    \ the decision in favor of asymmetric\n   BGPsec was reached (Section 6.5.1).\
    \  An advantage for a stub AS that\n   does asymmetric BGPsec is that it only\
    \ needs to minimally upgrade to\n   BGPsec so it can sign updates to its upstream\
    \ AS while it receives\n   only unsigned updates.  Thus, it can avoid the cost\
    \ of increased\n   processing and memory needed to perform update validations\
    \ and to\n   store signed updates in the RIBs, respectively.\n"
- title: 6.6.  Proxy Signing
  contents:
  - '6.6.  Proxy Signing

    '
- title: 6.6.1.  Decision
  contents:
  - "6.6.1.  Decision\n   An ISP's AS (or upstream AS) can proxy-sign BGP announcements\
    \ for a\n   customer (downstream) AS, provided that the customer AS obtains an\n\
    \   RPKI (CA) certificate, issues a router certificate under that CA\n   certificate,\
    \ and passes on the private key for that certificate to\n   its upstream provider.\
    \  That ISP (i.e., the second-hop AS) would\n   insert a signature on behalf of\
    \ the customer AS using the private key\n   provided by the customer AS.  This\
    \ is a private arrangement between\n   the two ASes and is invisible to other\
    \ ASes.  Thus, this arrangement\n   is not part of the BGPsec protocol specification.\n\
    \   BGPsec will not make any special provisions for an ISP to use its own\n  \
    \ private key to proxy-sign updates for a customer's AS.  This type of\n   proxy\
    \ signing is considered a bad idea.\n"
- title: 6.6.2.  Discussion
  contents:
  - "6.6.2.  Discussion\n   Consider a scenario when a customer's AS (say, AS8) is\
    \ multihomed to\n   two ISPs, i.e., AS8 peers with AS1 and AS2 of ISP-1 and ISP-2,\n\
    \   respectively.  In this case, AS8 would have an RPKI (CA) certificate;\n  \
    \ it issues two separate router certificates (corresponding to AS1 and\n   AS2)\
    \ under that CA certificate, and it passes on the respective\n   private keys\
    \ for those two certificates to its upstream providers AS1\n   and AS2.  Thus,\
    \ AS8 has a proxy-signing service from both of its\n   upstream ASes.  In the\
    \ future, if AS8 were to disconnect from ISP-2,\n   then it would revoke the router\
    \ certificate corresponding to AS2.\n"
- title: 6.7.  Multiple Peering Sessions between ASes
  contents:
  - '6.7.  Multiple Peering Sessions between ASes

    '
- title: 6.7.1.  Decision
  contents:
  - "6.7.1.  Decision\n   No problems are anticipated when BGPsec-capable ASes have\
    \ multiple\n   peering sessions between them (between distinct routers).\n"
- title: 6.7.2.  Discussion
  contents:
  - "6.7.2.  Discussion\n   In traditional BGP, multiple peering sessions between\
    \ different pairs\n   of routers (between two neighboring ASes) may be simultaneously\
    \ used\n   for load sharing.  Similarly, BGPsec-capable ASes can also have\n \
    \  multiple peering sessions between them.  Because routers in an AS can\n   have\
    \ distinct private keys, the same update, when propagated over\n   these multiple\
    \ peering sessions, will result in multiple updates that\n   may differ in their\
    \ signatures.  The peer (upstream) AS will apply\n   its normal procedures for\
    \ selecting a best path from those multiple\n   updates (and updates from other\
    \ peers).\n   This decision regarding load balancing (vs. using one peering session\n\
    \   as the primary for carrying data and another as the backup) is\n   entirely\
    \ local and is up to the two neighboring ASes.\n"
- title: 7.  Interaction of BGPsec with Common BGP Features
  contents:
  - '7.  Interaction of BGPsec with Common BGP Features

    '
- title: 7.1.  Peer Groups
  contents:
  - "7.1.  Peer Groups\n   In traditional BGP, the idea of peer groups is used in\
    \ BGP routers to\n   save on processing when generating and sending updates. \
    \ Multiple\n   peers for whom the same policies apply can be organized into peer\n\
    \   groups.  A peer group can typically have tens of ASes (and maybe as\n   many\
    \ as 300) in it.\n"
- title: 7.1.1.  Decision
  contents:
  - "7.1.1.  Decision\n   It was decided that BGPsec updates are generated to target\
    \ unique AS\n   peers, so there is no support for peer groups in BGPsec.\n"
- title: 7.1.2.  Discussion
  contents:
  - "7.1.2.  Discussion\n   BGPsec router processing can make use of peer groups preceding\
    \ the\n   signing of updates to peers.  Some of the update processing prior to\n\
    \   forwarding to members of a peer group can be done only once per\n   update,\
    \ as is done in traditional BGP.  Prior to forwarding the\n   update, a BGPsec\
    \ speaker adds the peer's ASN to the data that needs\n   to be signed and signs\
    \ the update for each peer AS in the group\n   individually.\n   If updates were\
    \ to be signed per peer group, information about the\n   forward AS set that constitutes\
    \ a peer group would have to be\n   divulged (since the ASN of each peer would\
    \ have to be included in the\n   update).  Some ISPs do not like to share this\
    \ kind of information\n   globally.\n"
- title: 7.2.  Communities
  contents:
  - "7.2.  Communities\n   The need to provide protection in BGPsec for the community\
    \ attribute\n   was discussed.\n"
- title: 7.2.1.  Decision
  contents:
  - "7.2.1.  Decision\n   Community attribute(s) will not be included in any message\
    \ that is\n   signed in BGPsec.\n"
- title: 7.2.2.  Discussion
  contents:
  - "7.2.2.  Discussion\n   From a security standpoint, the community attribute, as\
    \ currently\n   defined, may be inherently defective.  A substantial amount of\
    \ work\n   on the semantics of the community attribute is needed, and additional\n\
    \   work on its security aspects also needs to be done.  The community\n   attribute\
    \ is not necessarily transitive; it is often used only\n   between neighbors.\
    \  In those contexts, transport-security mechanisms\n   suffice to provide integrity\
    \ and authentication.  (There is no need\n   to sign data when it is passed only\
    \ between peers.)  It was suggested\n   that one could include only the transitive\
    \ community attributes in\n   any message that is signed and propagated (across\
    \ the AS path).  It\n   was noted that there is a flag available (i.e., unused)\
    \ in the\n   community attribute, and it might be used by BGPsec (in some\n  \
    \ fashion).  However, little information is available at this point\n   about\
    \ the use and function of this flag.  It was speculated that this\n   flag could\
    \ potentially be used to indicate to BGPsec whether or not\n   the community attribute\
    \ needs protection.  For now, community\n   attributes will not be secured by\
    \ BGPsec path signatures.\n"
- title: 7.3.  Consideration of iBGP Speakers and Confederations
  contents:
  - '7.3.  Consideration of iBGP Speakers and Confederations

    '
- title: 7.3.1.  Decision
  contents:
  - "7.3.1.  Decision\n   An iBGP speaker that is also an eBGP speaker and that executes\
    \ BGPsec\n   will by necessity carry BGPsec data and perform eBGPsec functions.\n\
    \   Confederations are eBGP clouds for administrative purposes and\n   contain\
    \ multiple Member-ASes.  A Member-AS is not required to sign\n   updates sent\
    \ to another Member-AS within the same confederation.\n   However, if BGPsec signing\
    \ is applied in eBGP within a confederation,\n   i.e., each Member-AS signs to\
    \ the next Member-AS in the path within\n   the confederation, then upon egress\
    \ from the confederation, the\n   Member-AS at the boundary must remove any and\
    \ all signatures applied\n   within the confederation.  The Member-AS at the boundary\
    \ of the\n   confederation will sign the update to an eBGPsec peer using the\n\
    \   public ASN of the confederation and its private key.  The BGPsec\n   specification\
    \ will not specify how to perform this process.\n   Note: In RFC 8205, signing\
    \ a BGPsec update between Member-ASes within\n   a confederation is required if\
    \ the update were to propagate with\n   signatures within the confederation. \
    \ A Confed_Segment flag exists in\n   each Secure_Path segment, and when set,\
    \ it indicates that the\n   corresponding signature belongs to a Member-AS.  At\
    \ the confederation\n   boundary, all signatures with Confed_Segment flags set\
    \ are removed\n   from the update.  RFC 8205 specifies in detail how all of this\
    \ is\n   done.  Please see Figure 5 in Section 3.1 of [RFC8205], as well as\n\
    \   Section 4.3 of [RFC8205], for details.\n"
- title: 7.3.2.  Discussion
  contents:
  - "7.3.2.  Discussion\n   This topic may need to be revisited to flesh out the details\n\
    \   carefully.\n"
- title: 7.4.  Consideration of Route Servers in IXPs
  contents:
  - '7.4.  Consideration of Route Servers in IXPs

    '
- title: 7.4.1.  Decision
  contents:
  - "7.4.1.  Decision\n   [BGPsec-Initial] made no special provisions to accommodate\
    \ route\n   servers in Internet Exchange Points (IXPs).\n   Note: The above decision\
    \ subsequently changed: RFC 8205 allows the\n   accommodation of IXPs, especially\
    \ for transparent route servers.  The\n   pCount (AS prepend count) field is set\
    \ to zero for transparent route\n   servers (see Section 4.2 of [RFC8205]).  The\
    \ operational guidance for\n   preventing the misuse of pCount=0 is given in Section\
    \ 7.2 of\n   RFC 8205.  Also, see Section 8.4 of RFC 8205 for a discussion of\n\
    \   security considerations concerning pCount=0.\n"
- title: 7.4.2.  Discussion
  contents:
  - "7.4.2.  Discussion\n   There are basically three methods that an IXP may use\
    \ to propagate\n   routes: (A) direct bilateral peering through the IXP, (B) BGP\
    \ peering\n   between clients via peering with a route server at the IXP (without\n\
    \   the IXP inserting its ASN in the path), and (C) BGP peering with an\n   IXP\
    \ route server, where the IXP inserts its ASN in the path.\n   (Note: The IXP's\
    \ route server does not change the NEXT_HOP attribute\n   even if it inserts its\
    \ ASN in the path.)  It is very rare for an IXP\n   to use Method C because it\
    \ is less attractive for the clients if\n   their AS path length increases by\
    \ one due to the IXP.  A measure of\n   the extent of the use of Method A vs.\
    \ Method B is given in terms of\n   the corresponding IP traffic load percentages.\
    \  As an example, at a\n   major European IXP, these percentages are about 80%\
    \ and 20% for\n   Methods A and B, respectively (this data is based on private\n\
    \   communication with IXPs circa 2011).  However, as the IXP grows (in\n   terms\
    \ of number of clients), it tends to migrate more towards\n   Method B because\
    \ of the difficulties of managing up to n x (n-1)/2\n   direct interconnections\
    \ between n peers in Method A.\n   To the extent that an IXP is providing direct\
    \ bilateral peering\n   between clients (Method A), that model works naturally\
    \ with BGPsec.\n   Also, if the route server in the IXP plays the role of a regular\n\
    \   BGPsec speaker (minus the routing part for payload) and inserts its\n   own\
    \ ASN in the path (Method C), then that model would also work well\n   in the\
    \ BGPsec Internet and this case is trivially supported in\n   BGPsec.\n"
- title: 7.5.  Proxy Aggregation (a.k.a. AS_SETs)
  contents:
  - '7.5.  Proxy Aggregation (a.k.a. AS_SETs)

    '
- title: 7.5.1.  Decision
  contents:
  - "7.5.1.  Decision\n   Proxy aggregation (i.e., the use of AS_SETs in the AS path)\
    \ will not\n   be supported in BGPsec.  There is no provision in BGPsec to sign\
    \ an\n   update when an AS_SET is part of an AS path.  If a BGPsec-capable\n \
    \  router receives an update that contains an AS_SET and also finds that\n   the\
    \ update is signed, then the router will consider the update\n   malformed (i.e.,\
    \ a protocol error).\n   Note: Section 5.2 of RFC 8205 specifies that a receiving\
    \ BGPsec\n   router \"MUST handle any syntactical or protocol errors in the\n\
    \   BGPsec_PATH attribute by using the 'treat-as-withdraw' approach as\n   defined\
    \ in RFC 7606 [RFC7606].\"\n"
- title: 7.5.2.  Discussion
  contents:
  - "7.5.2.  Discussion\n   Proxy aggregation does occur in the Internet today, but\
    \ it is very\n   rare.  Only a very small fraction (about 0.1%) of observed updates\n\
    \   contain AS_SETs in the AS path [ASset].  Since traditional BGP\n   currently\
    \ allows for proxy aggregation with the inclusion of AS_SETs\n   in the AS path,\
    \ it is necessary that BGPsec specify what action a\n   receiving router must\
    \ take if such an update is received with\n   attestation.  BCP 172 [RFC6472]\
    \ recommends against the use of AS_SETs\n   in updates, so it is anticipated that\
    \ the use of AS_SETs will\n   diminish over time.\n"
- title: 7.6.  4-Byte AS Numbers
  contents:
  - "7.6.  4-Byte AS Numbers\n   Not all (currently deployed) BGP speakers are capable\
    \ of dealing with\n   4-byte ASNs [RFC6793].  The standard mechanism used to accommodate\n\
    \   such speakers requires a peer AS to translate each 4-byte ASN in the\n   AS\
    \ path to a reserved 2-byte ASN (23456) before forwarding the\n   update.  This\
    \ mechanism is incompatible with the use of BGPsec, since\n   the ASN translation\
    \ is equivalent to a route modification attack and\n   will cause signatures corresponding\
    \ to the translated 4-byte ASNs to\n   fail validation.\n"
- title: 7.6.1.  Decision
  contents:
  - "7.6.1.  Decision\n   BGP speakers that are BGPsec capable are required to process\n\
    \   4-byte ASNs.\n"
- title: 7.6.2.  Discussion
  contents:
  - "7.6.2.  Discussion\n   It is reasonable to assume that upgrades for 4-byte ASN\
    \ support will\n   be in place prior to the deployment of BGPsec.\n"
- title: 8.  BGPsec Validation
  contents:
  - '8.  BGPsec Validation

    '
- title: 8.1.  Sequence of BGPsec Validation Processing in a Receiver
  contents:
  - "8.1.  Sequence of BGPsec Validation Processing in a Receiver\n   It is natural\
    \ to ask in what sequence a receiver must perform BGPsec\n   update validation\
    \ so that if a failure were to occur (i.e., the\n   update was determined to be\
    \ invalid) the processor would have spent\n   the least amount of processing or\
    \ other resources.\n"
- title: 8.1.1.  Decision
  contents:
  - "8.1.1.  Decision\n   There was agreement that the following sequence of receiver\n\
    \   operations is quite meaningful; the following steps are included in\n   [BGPsec-Initial].\
    \  However, the ordering of these validation-\n   processing steps is not a normative\
    \ part of the BGPsec specification.\n   1.  Verify that the signed update is syntactically\
    \ correct.  For\n       example, check to see if the number of signatures matches\
    \ the\n       number of ASes in the AS path (after duly accounting for AS\n  \
    \     prepending).\n   2.  Verify that the origin AS is authorized to advertise\
    \ the prefix\n       in question.  This verification is based on data from ROAs\
    \ and\n       does not require any cryptographic operations.\n   3.  Verify that\
    \ the advertisement has not yet expired.\n   4.  Verify that the target ASN in\
    \ the signature data matches the ASN\n       of the router that is processing\
    \ the advertisement.  Note that\n       the target-ASN check is also a non-cryptographic\
    \ operation and\n       is fast.\n   5.  Validate the signature data starting\
    \ from the most recent AS to\n       the origin.\n   6.  Locate the public key\
    \ for the router from which the advertisement\n       was received, using the\
    \ SKI from the signature data.\n   7.  Hash the data covered by the signature\
    \ algorithm.  Invoke the\n       signature validation algorithm on the following\
    \ three inputs: the\n       locally computed hash, the received signature, and\
    \ the public\n       key.  There will be one output: valid or invalid.\n   8.\
    \  Repeat steps 5 and 6 for each preceding signature in the\n       Signature_Block\
    \ until (a) the signature data for the origin AS is\n       encountered and processed\
    \ or (b) either of these steps fails.\n   Note: Significant refinements to the\
    \ above list occurred in the\n   progress towards RFC 8205.  The detailed syntactic-error\
    \ checklist is\n   presented and explained in Section 5.2 of [RFC8205].  Also,\
    \ a logical\n   sequence of steps to be followed in the validation of\n   Signature_Blocks\
    \ is described in Section 5.2 of [RFC8205].\n"
- title: 8.1.2.  Discussion
  contents:
  - "8.1.2.  Discussion\n   If the goal is to minimize computational costs associated\
    \ with\n   cryptographic operations, the sequence of receiver operations that\
    \ is\n   suggested above is viewed as appropriate.  One additional interesting\n\
    \   suggestion was that when there are two Signature_Blocks in an update,\n  \
    \ the validating router can first verify which of the two algorithms is\n   cheaper,\
    \ to save on processing.  If that Signature_Block verifies,\n   then the router\
    \ can skip validating the other Signature_Block.\n"
- title: 8.2.  Signing and Forwarding Updates when Signatures Failed Validation
  contents:
  - '8.2.  Signing and Forwarding Updates when Signatures Failed Validation

    '
- title: 8.2.1.  Decision
  contents:
  - "8.2.1.  Decision\n   A BGPsec router should sign and forward a signed update\
    \ to upstream\n   peers if it selected the update as the best path, regardless\
    \ of\n   whether the update passed or failed validation (at this router).\n"
- title: 8.2.2.  Discussion
  contents:
  - "8.2.2.  Discussion\n   The availability of RPKI data at different routers (in\
    \ the same AS or\n   different ASes) may differ, depending on the sources used\
    \ to acquire\n   RPKI data.  Hence, an update may fail validation in one AS, and\
    \ the\n   same update may pass validation in another AS.  Also, an update may\n\
    \   fail validation at one router in an AS, and the same update may pass\n   validation\
    \ at another router in the same AS.\n   A BCP may be published later that will\
    \ identify some update-failure\n   conditions that may present unambiguous cases\
    \ for rejecting the\n   update (in which case the router would not select the\
    \ AS path in the\n   update).  These cases are \"TBD\" (to be determined).\n"
- title: 8.3.  Enumeration of Error Conditions
  contents:
  - "8.3.  Enumeration of Error Conditions\n   Enumeration of error conditions and\
    \ the recommendations for how to\n   react to them are still under discussion.\n"
- title: 8.3.1.  Decision
  contents:
  - "8.3.1.  Decision\n   TBD.  Also, please see Section 8.5 for the decision and\
    \ discussion\n   specifically related to syntactic errors in signatures.\n   Note:\
    \ Section 5.2 of RFC 8205 describes the detection of syntactic\n   and protocol\
    \ errors in BGPsec updates as well as how the updates with\n   such errors are\
    \ to be handled.\n"
- title: 8.3.2.  Discussion
  contents:
  - "8.3.2.  Discussion\n   The following list is a first attempt to provide some\
    \ possible error\n   conditions and recommended receiver reactions in response\
    \ to the\n   detection of those errors.  Refinements will follow after further\n\
    \   discussions.\n   E1  Abnormalities where a peer (i.e., the preceding AS) should\n\
    \       definitely not have propagated to a receiving eBGPsec router.\n      \
    \ For example, (A) the number of signatures does not match the\n       number\
    \ of ASes in the AS path (after accounting for AS\n       prepending), (B) there\
    \ is an AS_SET in the received update and\n       the update has signatures, or\
    \ (C) other syntactic errors with\n       signatures have occurred.\n       Reaction:\
    \ See Section 8.5.\n   E2  Situations where a receiving eBGPsec router cannot\
    \ find the\n       certificate for an AS in the AS path.\n       Reaction: Mark\
    \ the update as \"Invalid\".  It is acceptable to\n       consider the update\
    \ in the best-path selection.  If it is chosen,\n       then the router should\
    \ sign and propagate the update.\n   E3  Situations where a receiving eBGPsec\
    \ router cannot find a ROA for\n       the {prefix, origin} pair in the update.\n\
    \       Reaction: Same as in (E2) above.\n   E4  Situations where the receiving\
    \ eBGPsec router verifies signatures\n       and finds that the update is \"Invalid\"\
    \ (even though its peer\n       might not have known, e.g., due to RPKI skew).\n\
    \       Reaction: Same as in (E2) above.\n       In some networks, the best-path-selection\
    \ policy may specify\n       choosing an unsigned update over one with invalid\
    \ signature(s).\n       Hence, the signatures must not be stripped even if the\
    \ update is\n       \"Invalid\".  No evil bit is set in the update (when it is\n\
    \       \"Invalid\") because an upstream peer may not get that same answer\n \
    \      when it tries to validate.\n"
- title: 8.4.  Procedure for Processing Unsigned Updates
  contents:
  - "8.4.  Procedure for Processing Unsigned Updates\n   An update may come in unsigned\
    \ from an eBGP peer or internally (e.g.,\n   as an iBGP update).  In the latter\
    \ case, the route is being\n   originated from within the AS in question.\n"
- title: 8.4.1.  Decision
  contents:
  - "8.4.1.  Decision\n   If an unsigned route is received from an eBGP peer and if\
    \ it is\n   selected, then the route will be forwarded unsigned to other eBGP\n\
    \   peers -- even BGPsec-capable peers.  If the route originated in this\n   AS\
    \ (IGP or iBGP) and is unsigned, then it should be signed and\n   announced to\
    \ external BGPsec-capable peers.\n"
- title: 8.4.2.  Discussion
  contents:
  - "8.4.2.  Discussion\n   It is also possible that an update received in IGP (or\
    \ iBGP) may have\n   private ASNs in the AS path.  These private ASNs would normally\n\
    \   appear in the rightmost portion of the AS path.  It was noted that in\n  \
    \ this case the private ASNs to the right would be removed (as done in\n   traditional\
    \ BGP), and then the update will be signed by the\n   originating AS and announced\
    \ to BGPsec-capable eBGP peers.\n   Note: See Section 7.5 of [RFC8205] for operational\
    \ considerations for\n   BGPsec in the context of private ASNs.\n"
- title: 8.5.  Response to Syntactic Errors in Signatures and Recommendations for
  contents:
  - "8.5.  Response to Syntactic Errors in Signatures and Recommendations for\n  \
    \    How to React to Them\n   Note: The contents of this subsection (i.e., Section\
    \ 8.5) differ\n   substantially from the recommendations in RFC 8205 regarding\
    \ the\n   handling of syntactic errors and protocol errors.  Hence, the reader\n\
    \   may skip this subsection and instead read Section 5.2 of [RFC8205].\n   This\
    \ subsection (Section 8.5) is kept here for the sake of archival\n   value concerning\
    \ design discussions.\n   Different types of error conditions were discussed in\
    \ Section 8.3.\n   Here, the focus is only on syntactic-error conditions in signatures.\n"
- title: 8.5.1.  Decision
  contents:
  - "8.5.1.  Decision\n   If there are syntactic-error conditions such as (A) AS_SET\
    \ and\n   BGPsec_PATH both appearing in an update, (B) the number of signatures\n\
    \   not matching the number of ASes (after accounting for any AS\n   prepending),\
    \ or (C) a parsing issue occurring with the BGPsec_PATH\n   attribute, then the\
    \ update (with the signatures stripped) will still\n   be considered in the best-path-selection\
    \ algorithm.  (**Note: This is\n   not true in RFC 8205**.)  If the update is\
    \ selected as the best path,\n   then the update will be propagated unsigned.\
    \  The error condition\n   will be logged locally.\n   A BGPsec router will follow\
    \ whatever the current IETF (IDR WG)\n   recommendations are for notifying a peer\
    \ that it is sending malformed\n   messages.\n   In the case when there are two\
    \ Signature_Blocks in an update, and one\n   or more syntactic errors are found\
    \ to occur within one of them but\n   the other one is free of any syntactic errors,\
    \ then the update will\n   still be considered in the best-path-selection algorithm\
    \ after the\n   syntactically bad Signature_Block has been removed.  (**Note:\
    \ This is\n   not true in RFC 8205**.)  If the update is selected as the best\
    \ path,\n   then the update will be propagated with only one (i.e., the\n   error-free)\
    \ Signature_Block.  The error condition will be logged\n   locally.\n"
- title: 8.5.2.  Discussion
  contents:
  - "8.5.2.  Discussion\n   As stated above, a BGPsec router will follow whatever\
    \ the current\n   IETF (IDR WG) recommendations are for notifying a peer that\
    \ it is\n   sending malformed messages.  Question: If the error is persistent\
    \ and\n   a full BGP table dump occurs, then would there be 500K such errors\n\
    \   resulting in 500K \"notify\" messages sent to the peer that is\n   generating\
    \ the errors?  Answer: Rate limiting would be applied to the\n   notify messages\
    \ and should prevent any overload due to these\n   messages.\n"
- title: 8.6.  Enumeration of Validation States
  contents:
  - "8.6.  Enumeration of Validation States\n   Various validation conditions are\
    \ possible that can be mapped to\n   validation states for possible input to the\
    \ BGPsec decision process.\n   These conditions can be related to whether an update\
    \ is signed,\n   Expire Time is checked, route origin validation is checked against\
    \ a\n   ROA, signature verification passed, etc.\n"
- title: 8.6.1.  Decision
  contents:
  - "8.6.1.  Decision\n   It was decided that BGPsec validation outcomes will be mapped\
    \ to one\n   of only two validation states: (1) Valid -- passed all validation\n\
    \   checks (i.e., Expire Time check, route origin and Signature_Block\n   validation)\
    \ and (2) Invalid -- all other possibilities.  \"Invalid\"\n   would include situations\
    \ such as the following:\n   1.  Due to a lack of RPKI data or insufficient RPKI\
    \ data, validation\n       was not performed.\n   2.  The signature Expire Time\
    \ check failed.\n   3.  Route origin validation failed.\n   4.  Signature checks\
    \ were performed, and one or more of them failed.\n   Note: Expire Time is obsolete\
    \ (see the notes in Sections 2.2.1 and\n   2.2.2).  RFC 8205 uses the states \"\
    Valid\" and \"Not Valid\", but only\n   with respect to AS path validation (i.e.,\
    \ not including the result of\n   origin validation); see Section 5.1 of [RFC8205].\
    \  \"Not Valid\"\n   includes all conditions in which path validation was attempted\
    \ but a\n   \"Valid\" result could not be reached.  (Note: Path validation is\
    \ not\n   attempted in the case of syntactic or protocol errors in a BGPsec\n\
    \   update; see Section 5.2 of [RFC8205].)  Each Relying Party (RP) is\n   expected\
    \ to devise its own policy to suitably factor the results of\n   origin validation\
    \ [RFC6811] and path validation [RFC8205] into its\n   path-selection decision.\n"
- title: 8.6.2.  Discussion
  contents:
  - "8.6.2.  Discussion\n   It may be noted that the result of update validation is\
    \ just an\n   additional input for the BGP decision process.  The router's local\n\
    \   policy ultimately has control over what action (regarding BGP path\n   selection)\
    \ is taken.\n   Initially, four validation states were considered:\n   1.  The\
    \ update is not signed.\n   2.  The update is signed, but the router does not\
    \ have corresponding\n       RPKI data to perform a validation check.\n   3. \
    \ The validation check was performed, and the check failed\n       (Invalid).\n\
    \   4.  The validation check was performed, and the check passed (Valid).\n  \
    \ As stated above, it was later decided that BGPsec validation outcomes\n   will\
    \ be mapped to one of only two validation states.  It was observed\n   that an\
    \ update can be invalid for many different reasons.  To begin\n   to differentiate\
    \ these numerous reasons and to try to enumerate\n   different flavors of the\
    \ Invalid state will not likely be\n   constructive in route-selection decisions\
    \ and may even introduce new\n   vulnerabilities in the system.  However, some\
    \ questions remain, such\n   as the following:\n   Question: Is there a need to\
    \ define a separate validation state for\n   the case when an update is not signed\
    \ but the {prefix, origin} pair\n   matches the ROA information?  After some discussion,\
    \ a tentative\n   conclusion was reached: this is in principle similar to validation\n\
    \   based on partial path signing (which was ruled out; see Section 6.4).\n  \
    \ So, there is no need to add another validation state for this case;\n   treat\
    \ it as \"Invalid\", considering that it is unsigned.\n   Another remaining question:\
    \ Would the RP want to give the update a\n   higher preference over another unsigned\
    \ update that failed origin\n   validation or over a signed update that failed\
    \ both signature and ROA\n   validation?\n"
- title: 8.7.  Mechanism for Transporting Validation State through iBGP
  contents:
  - '8.7.  Mechanism for Transporting Validation State through iBGP

    '
- title: 8.7.1.  Decision
  contents:
  - "8.7.1.  Decision\n   BGPsec validation need be performed only at eBGP edges.\
    \  The\n   validation status of a BGP signed/unsigned update may be conveyed via\n\
    \   iBGP from an ingress edge router to an egress edge router.  Local\n   policy\
    \ in the AS will determine how the validation status is conveyed\n   internally,\
    \ using various preexisting mechanisms, e.g., setting a BGP\n   community, or\
    \ modifying a metric value such as Local_Pref or MED.  A\n   signed update that\
    \ cannot be validated (except those with syntax\n   errors) should be forwarded\
    \ with signatures from the ingress router\n   to the egress router, where it is\
    \ signed when propagated towards\n   other eBGPsec speakers in neighboring ASes.\
    \  Based entirely on local\n   policy settings, an egress router may trust the\
    \ validation status\n   conveyed by an ingress router, or it may perform its own\
    \ validation.\n   The latter approach may be used at an operator's discretion,\
    \ under\n   circumstances when RPKI skew is known to happen at different routers\n\
    \   within an AS.\n   Note: An extended community for carrying the origin validation\
    \ state\n   in iBGP has been specified in RFC 8097 [RFC8097].\n"
- title: 8.7.2.  Discussion
  contents:
  - "8.7.2.  Discussion\n   The attribute used to represent the validation state can\
    \ be carried\n   between ASes, if desired.  ISPs may like to carry it over their\
    \ eBGP\n   links between their own ASes (e.g., sibling ASes).  A peer (or\n  \
    \ customer) may receive it over an eBGP link from a provider and may\n   want\
    \ to use it to shortcut their own validation check.  However, the\n   peer (or\
    \ customer) should be aware that this validation-state\n   attribute is just a\
    \ preview of a neighbor's validation and must\n   perform their own validation\
    \ check to be sure of the actual state of\n   the update's validation.  Question:\
    \ Should validation-state\n   propagation be protected by attestation in cases\
    \ where it is useful\n   for diagnostics purposes?  The decision was made to not\
    \ protect the\n   validation-state information using signatures.\n   The following\
    \ validation states may be needed for propagation via\n   iBGP between edge routers\
    \ in an AS:\n   o  Validation states communicated in iBGP for an unsigned update\n\
    \      (route origin validation result): (1) Valid, (2) Invalid,\n      (3) NotFound\
    \ (see [RFC6811]), (4) Validation Deferred.\n      *  An update could be unsigned\
    \ for either of the following two\n         reasons, but they need not be distinguished:\
    \ (a) it had no\n         signatures (i.e., came in unsigned from an eBGP peer)\
    \ or\n         (b) signatures were present but stripped.\n   o  Validation states\
    \ communicated in iBGP for a signed update:\n      (1) Valid, (2) Invalid, (3)\
    \ Validation Deferred.\n   The reason for conveying the additional \"Validation\
    \ Deferred\" state\n   may be illustrated as follows.  An ingress edge Router\
    \ A receiving an\n   update from an eBGPsec peer may not attempt to validate signatures\n\
    \   (e.g., in a processor overload situation), and in that case Router A\n   should\
    \ convey \"Validation Deferred\" state for that signed update (if\n   selected\
    \ for best path) in iBGP to other edge routers.  An egress\n   edge Router B,\
    \ upon receiving the update from ingress Router A, would\n   then be able to perform\
    \ its own validation (origin validation for an\n   unsigned update or origin/signature\
    \ validation for a signed update).\n   As stated before, the egress router (Router\
    \ B in this example) may\n   always choose to perform its own validation when\
    \ it receives an\n   update from iBGP (independently of the update's validation\
    \ status\n   conveyed in iBGP) to account for the possibility of RPKI data skew\
    \ at\n   different routers.  These various choices are local and entirely at\n\
    \   the operator's discretion.\n"
- title: 9.  Operational Considerations
  contents:
  - "9.  Operational Considerations\n   Note: Significant thought has been devoted\
    \ to operations and\n   management considerations subsequent to the writing of\n\
    \   [BGPsec-Initial].  The reader is referred to [RFC8207] and Section 7\n   of\
    \ [RFC8205] for details.\n"
- title: 9.1.  Interworking with BGP Graceful Restart
  contents:
  - "9.1.  Interworking with BGP Graceful Restart\n   BGP Graceful Restart (BGP-GR)\
    \ [RFC4724] is a mechanism currently used\n   to facilitate nonstop packet forwarding\
    \ when the control plane is\n   recovering from a fault (i.e., the BGP session\
    \ is restarted) but the\n   data plane is functioning.  Two questions were raised:\
    \ Are there any\n   special concerns about how BGP-GR works while BGPsec is operational?\n\
    \   Also, what happens if the BGP router operation transitions from\n   traditional\
    \ BGP operation to BGP-GR to BGPsec, in that order?\n"
- title: 9.1.1.  Decision
  contents:
  - "9.1.1.  Decision\n   No decision was made relative to this issue (at the time\
    \ that\n   [BGPsec-Initial] was written).\n   Note: See Section 7.7 of [RFC8205]\
    \ for comments concerning the\n   operation of BGP-GR with BGPsec.  They are consistent\
    \ with the\n   discussion below.\n"
- title: 9.1.2.  Discussion
  contents:
  - "9.1.2.  Discussion\n   BGP-GR can be implemented with BGPsec, just as it is currently\n\
    \   implemented with traditional BGP.  The Restart State bit, Forwarding\n   State\
    \ bit, End-of-RIB marker, staleness marker (in the Adj-RIB-In),\n   and Selection_Deferral_Timer\
    \ are key parameters associated with\n   BGP-GR [RFC4724].  These parameters would\
    \ apply to BGPsec, just as\n   they apply to traditional BGP.\n   Regarding what\
    \ happens if the BGP router transitions from traditional\n   BGP to BGP-GR to\
    \ BGPsec, the answer would simply be as follows.  If\n   there is a software upgrade\
    \ to BGPsec during BGP-GR (assuming that\n   the upgrade is being done on a live\
    \ BGP speaker), then the BGP-GR\n   session should be terminated before a BGPsec\
    \ session is initiated.\n   Once the eBGPsec peering session is established, the\
    \ receiving\n   eBGPsec speaker will see signed updates from the sending (newly\n\
    \   upgraded) eBGPsec speaker.  There is no apparent harm (it may, in\n   fact,\
    \ be desirable) if the receiving speaker continues to use\n   previously learned\
    \ unsigned BGP routes from the sending speaker until\n   they are replaced by\
    \ new BGPsec routes.  However, if the Forwarding\n   State bit is set to zero\
    \ by the sending speaker (i.e., the newly\n   upgraded speaker) during BGPsec\
    \ session negotiation, then the\n   receiving speaker would mark all previously\
    \ learned unsigned BGP\n   routes from that sending speaker as \"stale\" in its\
    \ Adj-RIB-In.  Then,\n   as BGPsec updates are received (possibly interspersed\
    \ with unsigned\n   BGP updates), the \"stale\" routes will be replaced or refreshed.\n"
- title: '9.2.  BCP Recommendations for Minimizing Churn: Certificate Expiry/'
  contents:
  - "9.2.  BCP Recommendations for Minimizing Churn: Certificate Expiry/\n      Revocation\
    \ and Signature Expire Time\n"
- title: 9.2.1.  Decision
  contents:
  - "9.2.1.  Decision\n   Work related to this topic is still in progress.\n"
- title: 9.2.2.  Discussion
  contents:
  - "9.2.2.  Discussion\n   BCP recommendations for minimizing churn in BGPsec have\
    \ been\n   discussed.  There are various potential strategies on how routers\n\
    \   should react to such events as certificate expiry/revocation and\n   signature\
    \ Expire Time exhaustion [Dynamics].  The details will be\n   documented in the\
    \ near future after additional work is completed.\n"
- title: 9.3.  Outsourcing Update Validation
  contents:
  - '9.3.  Outsourcing Update Validation

    '
- title: 9.3.1.  Decision
  contents:
  - "9.3.1.  Decision\n   Update signature validation and signing can be outsourced\
    \ to an\n   off-board server or processor.\n"
- title: 9.3.2.  Discussion
  contents:
  - "9.3.2.  Discussion\n   Possibly, an off-router box (one or more per AS) can be\
    \ used that\n   performs path validation.  For example, these capabilities might\
    \ be\n   incorporated into a route reflector.  At an ingress router, one needs\n\
    \   the Adj-RIB-In entries validated but not the RIB-out entries.  So,\n   the\
    \ off-router box is probably unlike the traditional route\n   reflector; it sits\
    \ at the network edge and validates all incoming\n   BGPsec updates.  Thus, it\
    \ appears that each router passes each BGPsec\n   update it receives to the off-router\
    \ box and receives a validation\n   result before it stores the route in the Adj-RIB-In.\
    \  Question: What\n   about failure modes here?  The failure modes would be dependent\
    \ on\n   the following:\n   1.  How much of the control plane is outsourced.\n\
    \   2.  How reliable the off-router box is (or, equivalently,\n       communication\
    \ to and from it).\n   3.  How centralized vs. distributed this arrangement is.\n\
    \   When any kind of outsourcing is done, the user needs to be watchful\n   and\
    \ ensure that the outsourcing does not cross trust/security\n   boundaries.\n"
- title: 9.4.  New Hardware Capability
  contents:
  - '9.4.  New Hardware Capability

    '
- title: 9.4.1.  Decision
  contents:
  - "9.4.1.  Decision\n   It is assumed that BGPsec routers (Provider Edge (PE) routers\
    \ and\n   route reflectors) will require significantly upgraded hardware --\n\
    \   much more memory for RIBs and hardware cryptographic assistance.\n   However,\
    \ stub ASes would not need to make such upgrades because they\n   can negotiate\
    \ asymmetric BGPsec capability with their upstream ASes,\n   i.e., they sign updates\
    \ to the upstream AS but receive only unsigned\n   BGP updates (see Section 6.5).\n"
- title: 9.4.2.  Discussion
  contents:
  - "9.4.2.  Discussion\n   It is accepted that it might take several years to go\
    \ beyond test\n   deployment of BGPsec because of the need for additional route\n\
    \   processor CPU and memory.  However, because BGPsec deployment will be\n  \
    \ incremental and because signed updates are not sent outside of a set\n   of\
    \ contiguous BGPsec-enabled ASes, it is not clear how much\n   additional (RIB)\
    \ memory will be required during initial deployment.\n   See [RIB_size] for preliminary\
    \ results on modeling and estimation of\n   BGPsec RIB size and its projected\
    \ growth.  Hardware cryptographic\n   support reduces the computation burden on\
    \ the route processor and\n   offers good security for router private keys.  However,\
    \ given the\n   incremental-deployment model, it also is not clear how substantial\
    \ a\n   cryptographic processing load will be incurred in the early phases of\n\
    \   deployment.\n   Note: There are recent detailed studies that considered software\n\
    \   optimizations for BGPsec.  In [Mehmet1] and [Mehmet2], computational\n   optimizations\
    \ for cryptographic processing (i.e., ECDSA speedup) are\n   considered for BGPsec\
    \ implementations on general-purpose CPUs.  In\n   [V_Sriram], software optimizations\
    \ at the level of update processing\n   and path selection are proposed and quantified\
    \ for BGPsec\n   implementations.\n"
- title: 9.5.  Signed Peering Registrations
  contents:
  - '9.5.  Signed Peering Registrations

    '
- title: 9.5.1.  Decision
  contents:
  - "9.5.1.  Decision\n   The idea of signed BGP peering registrations (for the purpose\
    \ of path\n   validation) was rejected.\n"
- title: 9.5.2.  Discussion
  contents:
  - "9.5.2.  Discussion\n   The idea of using a secure map of AS relationships to\
    \ \"validate\"\n   updates was discussed and rejected: such solutions were not\
    \ pursued\n   because they cannot provide strong guarantees regarding the validity\n\
    \   of updates.  Using these techniques, one can say only that an update\n   is\
    \ \"plausible\"; one cannot say that it is \"definitely\" valid (based\n   on\
    \ signed peering relations alone).\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   This document requires no security considerations.\
    \  See [RFC8205] for\n   security considerations for the BGPsec protocol.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 12.  Informative References
  contents:
  - "12.  Informative References\n   [ASset]    Sriram, K. and D. Montgomery, \"Measurement\
    \ Data on AS_SET\n              and AGGREGATOR: Implications for {Prefix, Origin}\n\
    \              Validation Algorithms\", IETF SIDR WG presentation,\n         \
    \     IETF 78, July 2010, <http://www.nist.gov/itl/antd/upload/\n            \
    \  AS_SET_Aggregator_Stats.pdf>.\n   [BGP-Ext-Msg]\n              Bush, R., Patel,\
    \ K., and D. Ward, \"Extended Message\n              support for BGP\", Work in\
    \ Progress, draft-ietf-idr-bgp-\n              extended-messages-24, November\
    \ 2017.\n   [BGPsec-Initial]\n              Lepinski, M., \"BGPSEC Protocol Specification\"\
    , Work in\n              Progress, draft-lepinski-bgpsec-protocol-00, March 2011.\n\
    \   [BGPsec-Rollover]\n              Weis, B., Gagliano, R., and K. Patel, \"\
    BGPsec Router\n              Certificate Rollover\", Work in Progress, draft-ietf-\n\
    \              sidrops-bgpsec-rollover-04, December 2017.\n   [Borchert]\n   \
    \           Borchert, O. and M. Baer, \"Subject: Modifiation [sic]\n         \
    \     request: draft-ietf-sidr-bgpsec-protocol-14\", message to\n            \
    \  the IETF SIDR WG Mailing List, 10 February 2016,\n              <https://www.ietf.org/mail-archive/web/sidr/current/\n\
    \              msg07509.html>.\n   [CiscoIOS]\n              \"Cisco IOS: Configuring\
    \ Route Dampening\", February 2014,\n              <https://www.cisco.com/c/en/us/td/docs/ios/12_2/ip/\n\
    \              configuration/guide/fipr_c/1cfbgp.html>.\n   [CPUworkload]\n  \
    \            Sriram, K. and R. Bush, \"Estimating CPU Cost of BGPSEC on\n    \
    \          a Router\", Presented at RIPE-63; also at IETF 83 SIDR WG\n       \
    \       Meeting, March 2012, <https://www.ietf.org/proceedings/\n            \
    \  83/slides/slides-83-sidr-7.pdf>.\n   [Dynamics]\n              Sriram, K.,\
    \ Montgomery, D., Borchert, O., Kim, O., and P.\n              Gleichmann, \"\
    Potential Impact of BGPSEC Mechanisms on\n              Global BGP Dynamics\"\
    , Presentation to the BGPsec\n              authors/designers team, October 2009,\n\
    \              <https://www.nist.gov/file/448631>.\n   [Gueron]   Gueron, S. and\
    \ V. Krasnov, \"Fast and side channel\n              protected implementation\
    \ of the NIST P-256 Elliptic Curve\n              for x86-64 platforms\", OpenSSL\
    \ patch ID 3149,\n              October 2013, <https://rt.openssl.org/Ticket/\n\
    \              Display.html?id=3149&user=guest&pass=guest>.\n   [JunOS]    \"\
    Juniper JunOS: Using Routing Policies to Damp BGP Route\n              Flapping\"\
    , November 2010, <http://www.juniper.net/\n              techpubs/en_US/junos10.4/topics/usage-guidelines/\n\
    \              policy-using-routing-policies-to-damp-bgp-route-\n            \
    \  flapping.html>.\n   [Mandelberg1]\n              Mandelberg, D., \"Subject:\
    \ wglc for draft-ietf-sidr-bgpsec-\n              protocol-11 (Specific topic:\
    \ Include Address Family\n              Identifier in the data protected under\
    \ signature -- to\n              alleviate a security concern)\", message to the\
    \ IETF SIDR\n              WG Mailing List, 10 February 2015, <https://www.ietf.org/\n\
    \              mail-archive/web/sidr/current/msg06930.html>.\n   [Mandelberg2]\n\
    \              Mandelberg, D., \"Subject: draft-ietf-sidr-bgpsec-\n          \
    \    protocol-13's security guarantees (Specific topic: Sign\n              all\
    \ of the preceding signed data (rather than just the\n              immediate,\
    \ previous signature) -- to alleviate a security\n              concern)\", message\
    \ to the IETF SIDR WG Mailing List,\n              26 August 2015, <https://www.ietf.org/mail-archive/\n\
    \              web/sidr/current/msg07241.html>.\n   [Mao02]    Mao, Z., et al.,\
    \ \"Route Flap Damping Exacerbates Internet\n              Routing Convergence\"\
    , August 2002,\n              <http://www.eecs.umich.edu/~zmao/Papers/sig02.pdf>.\n\
    \   [Mehmet1]  Adalier, M., \"Efficient and Secure Elliptic Curve\n          \
    \    Cryptography Implementation of Curve P-256\", NIST Workshop\n           \
    \   on ECC Standards, June 2015,\n              <http://csrc.nist.gov/groups/ST/ecc-workshop-2015/papers/\n\
    \              session6-adalier-Mehmet.pdf>.\n   [Mehmet2]  Adalier, M., Sriram,\
    \ K., Borchert, O., Lee, K., and D.\n              Montgomery, \"High Performance\
    \ BGP Security: Algorithms and\n              Architectures\", North American\
    \ Network Operators Group\n              Meeting NANOG69, February 2017,\n   \
    \           <https://www.nanog.org/meetings/abstract?id=3043>.\n   [MsgSize] \
    \ Sriram, K., \"Decoupling BGPsec Documents and Extended\n              Messages\
    \ draft\", Presented at the IETF SIDROPS WG\n              Meeting, IETF 98, March\
    \ 2017,\n              <https://www.ietf.org/proceedings/98/slides/\n        \
    \      slides-98-sidrops-decoupling-bgpsec-documents-and-\n              extended-messages-draft-00.pdf>.\n\
    \   [Replay-Protection]\n              Sriram, K. and D. Montgomery, \"Design\
    \ Discussion and\n              Comparison of Protection Mechanisms for Replay\
    \ Attack and\n              Withdrawal Suppression in BGPsec\", Work in Progress,\n\
    \              draft-sriram-replay-protection-design-discussion-10,\n        \
    \      April 2018.\n   [RFC2439]  Villamizar, C., Chandra, R., and R. Govindan,\
    \ \"BGP Route\n              Flap Damping\", RFC 2439, DOI 10.17487/RFC2439,\n\
    \              November 1998, <https://www.rfc-editor.org/info/rfc2439>.\n   [RFC4271]\
    \  Rekhter, Y., Ed., Li, T., Ed., and S. Hares, Ed., \"A\n              Border\
    \ Gateway Protocol 4 (BGP-4)\", RFC 4271,\n              DOI 10.17487/RFC4271,\
    \ January 2006,\n              <https://www.rfc-editor.org/info/rfc4271>.\n  \
    \ [RFC4724]  Sangli, S., Chen, E., Fernando, R., Scudder, J., and Y.\n       \
    \       Rekhter, \"Graceful Restart Mechanism for BGP\", RFC 4724,\n         \
    \     DOI 10.17487/RFC4724, January 2007,\n              <https://www.rfc-editor.org/info/rfc4724>.\n\
    \   [RFC4760]  Bates, T., Chandra, R., Katz, D., and Y. Rekhter,\n           \
    \   \"Multiprotocol Extensions for BGP-4\", RFC 4760,\n              DOI 10.17487/RFC4760,\
    \ January 2007,\n              <https://www.rfc-editor.org/info/rfc4760>.\n  \
    \ [RFC6090]  McGrew, D., Igoe, K., and M. Salter, \"Fundamental Elliptic\n   \
    \           Curve Cryptography Algorithms\", RFC 6090,\n              DOI 10.17487/RFC6090,\
    \ February 2011,\n              <https://www.rfc-editor.org/info/rfc6090>.\n \
    \  [RFC6472]  Kumari, W. and K. Sriram, \"Recommendation for Not Using\n     \
    \         AS_SET and AS_CONFED_SET in BGP\", BCP 172, RFC 6472,\n            \
    \  DOI 10.17487/RFC6472, December 2011,\n              <https://www.rfc-editor.org/info/rfc6472>.\n\
    \   [RFC6480]  Lepinski, M. and S. Kent, \"An Infrastructure to Support\n    \
    \          Secure Internet Routing\", RFC 6480, DOI 10.17487/RFC6480,\n      \
    \        February 2012, <https://www.rfc-editor.org/info/rfc6480>.\n   [RFC6482]\
    \  Lepinski, M., Kent, S., and D. Kong, \"A Profile for Route\n              Origin\
    \ Authorizations (ROAs)\", RFC 6482,\n              DOI 10.17487/RFC6482, February\
    \ 2012,\n              <https://www.rfc-editor.org/info/rfc6482>.\n   [RFC6483]\
    \  Huston, G. and G. Michaelson, \"Validation of Route\n              Origination\
    \ Using the Resource Certificate Public Key\n              Infrastructure (PKI)\
    \ and Route Origin Authorizations\n              (ROAs)\", RFC 6483, DOI 10.17487/RFC6483,\
    \ February 2012,\n              <https://www.rfc-editor.org/info/rfc6483>.\n \
    \  [RFC6487]  Huston, G., Michaelson, G., and R. Loomans, \"A Profile for\n  \
    \            X.509 PKIX Resource Certificates\", RFC 6487,\n              DOI\
    \ 10.17487/RFC6487, February 2012,\n              <https://www.rfc-editor.org/info/rfc6487>.\n\
    \   [RFC6793]  Vohra, Q. and E. Chen, \"BGP Support for Four-Octet\n         \
    \     Autonomous System (AS) Number Space\", RFC 6793,\n              DOI 10.17487/RFC6793,\
    \ December 2012,\n              <https://www.rfc-editor.org/info/rfc6793>.\n \
    \  [RFC6811]  Mohapatra, P., Scudder, J., Ward, D., Bush, R., and R.\n       \
    \       Austein, \"BGP Prefix Origin Validation\", RFC 6811,\n              DOI\
    \ 10.17487/RFC6811, January 2013,\n              <https://www.rfc-editor.org/info/rfc6811>.\n\
    \   [RFC7132]  Kent, S. and A. Chi, \"Threat Model for BGP Path Security\",\n\
    \              RFC 7132, DOI 10.17487/RFC7132, February 2014,\n              <https://www.rfc-editor.org/info/rfc7132>.\n\
    \   [RFC7353]  Bellovin, S., Bush, R., and D. Ward, \"Security\n             \
    \ Requirements for BGP Path Validation\", RFC 7353,\n              DOI 10.17487/RFC7353,\
    \ August 2014,\n              <https://www.rfc-editor.org/info/rfc7353>.\n   [RFC7606]\
    \  Chen, E., Ed., Scudder, J., Ed., Mohapatra, P., and K.\n              Patel,\
    \ \"Revised Error Handling for BGP UPDATE Messages\",\n              RFC 7606,\
    \ DOI 10.17487/RFC7606, August 2015,\n              <https://www.rfc-editor.org/info/rfc7606>.\n\
    \   [RFC8097]  Mohapatra, P., Patel, K., Scudder, J., Ward, D., and R.\n     \
    \         Bush, \"BGP Prefix Origin Validation State Extended\n              Community\"\
    , RFC 8097, DOI 10.17487/RFC8097, March 2017,\n              <https://www.rfc-editor.org/info/rfc8097>.\n\
    \   [RFC8205]  Lepinski, M., Ed., and K. Sriram, Ed., \"BGPsec Protocol\n    \
    \          Specification\", RFC 8205, DOI 10.17487/RFC8205,\n              September\
    \ 2017, <https://www.rfc-editor.org/info/rfc8205>.\n   [RFC8207]  Bush, R., \"\
    BGPsec Operational Considerations\", BCP 211,\n              RFC 8207, DOI 10.17487/RFC8207,\
    \ September 2017,\n              <https://www.rfc-editor.org/info/rfc8207>.\n\
    \   [RFC8208]  Turner, S. and O. Borchert, \"BGPsec Algorithms, Key\n        \
    \      Formats, and Signature Formats\", RFC 8208,\n              DOI 10.17487/RFC8208,\
    \ September 2017,\n              <https://www.rfc-editor.org/info/rfc8208>.\n\
    \   [RFC8209]  Reynolds, M., Turner, S., and S. Kent, \"A Profile for\n      \
    \        BGPsec Router Certificates, Certificate Revocation Lists,\n         \
    \     and Certification Requests\", RFC 8209,\n              DOI 10.17487/RFC8209,\
    \ September 2017,\n              <https://www.rfc-editor.org/info/rfc8209>.\n\
    \   [RIB_size]\n              Sriram, K., et al., \"RIB Size Estimation for BGPSEC\"\
    ,\n              May 2011, <http://www.nist.gov/itl/antd/upload/\n           \
    \   BGPSEC_RIB_Estimation.pdf>.\n   [RIPE580]  Bush, R., et al., \"RIPE-580: RIPE\
    \ Routing Working Group\n              Recommendations on Route Flap Damping\"\
    , January 2013,\n              <http://www.ripe.net/ripe/docs/ripe-580>.\n   [Secure-BGP]\n\
    \              Lynn, C., Mikkelson, J., and K. Seo, \"Secure BGP (S-BGP)\",\n\
    \              Work in Progress, draft-clynn-s-bgp-protocol-01,\n            \
    \  June 2003.\n   [V_Sriram]\n              Sriram, V. and D. Montgomery, \"Design\
    \ and analysis of\n              optimization algorithms to minimize cryptographic\n\
    \              processing in BGP security protocols\", Computer\n            \
    \  Communications, Vol. 106, pp. 75-85,\n              DOI 10.1016/j.comcom.2017.03.007,\
    \ July 2017,\n              <https://www.sciencedirect.com/science/article/pii/\n\
    \              S0140366417303365>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The author would like to thank Jeff Haas and Wes George\
    \ for serving\n   as reviewers for this document for the Independent Submissions\n\
    \   stream.  The author is grateful to Nevil Brownlee for shepherding\n   this\
    \ document through the Independent Submissions review process.\n   Many thanks\
    \ are also due to Michael Baer, Oliver Borchert, David\n   Mandelberg, Sean Turner,\
    \ Alvaro Retana, Matthias Waehlisch, Tim Polk,\n   Russ Mundy, Wes Hardaker, Sharon\
    \ Goldberg, Ed Kern, Chris Hall, Shane\n   Amante, Luke Berndt, Doug Maughan,\
    \ Pradosh Mohapatra, Mark Reynolds,\n   Heather Schiller, Jason Schiller, Ruediger\
    \ Volk, and David Ward for\n   their review, comments, and suggestions during\
    \ the course of\n   this work.\n"
- title: Contributors
  contents:
  - "Contributors\n   The following people made significant contributions to this\
    \ document\n   and should be considered co-authors:\n   Rob Austein\n   Dragon\
    \ Research Labs\n   Email: sra@hactrn.net\n   Steven Bellovin\n   Columbia University\n\
    \   Email: smb@cs.columbia.edu\n   Russ Housley\n   Vigil Security, LLC\n   Email:\
    \ housley@vigilsec.com\n   Stephen Kent\n   Independent\n   Email: kent@alum.mit.edu\n\
    \   Warren Kumari\n   Google\n   Email: warren@kumari.net\n   Matt Lepinski\n\
    \   New College of Florida\n   Email: mlepinski@ncf.edu\n   Doug Montgomery\n\
    \   USA National Institute of Standards and Technology\n   Email: dougm@nist.gov\n\
    \   Chris Morrow\n   Google, Inc.\n   Email: morrowc@google.com\n   Sandy Murphy\n\
    \   Parsons, Inc.\n   Email: sandy@tislabs.com\n   Keyur Patel\n   Arrcus\n  \
    \ Email: keyur@arrcus.com\n   John Scudder\n   Juniper Networks\n   Email: jgs@juniper.net\n\
    \   Samuel Weiler\n   W3C/MIT\n   Email: weiler@csail.mit.edu\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Kotikalapudi Sriram (editor)\n   USA National Institute\
    \ of Standards and Technology\n   100 Bureau Drive\n   Gaithersburg, MD  20899\n\
    \   United States of America\n   Email: ksriram@nist.gov\n"
