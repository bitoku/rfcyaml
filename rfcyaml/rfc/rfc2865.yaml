- contents:
  - '          Remote Authentication Dial In User Service (RADIUS)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n
    \  This protocol is widely implemented and used.  Experience has shown\n   that
    it can suffer degraded performance and lost data when used in\n   large scale
    systems, in part because it does not include provisions\n   for congestion control.
    \ Readers of this document may find it\n   beneficial to track the progress of
    the IETF's AAA working group,\n   which may develop a successor protocol that
    better addresses the\n   scaling and congestion control issues.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes a protocol for carrying authentication,\n
    \  authorization, and configuration information between a Network Access\n   Server
    which desires to authenticate its links and a shared\n   Authentication Server.\n"
  title: Abstract
- contents:
  - "Implementation Note\n   This memo documents the RADIUS protocol.  The early deployment
    of\n   RADIUS was done using UDP port number 1645, which conflicts with the\n
    \  \"datametrics\" service.  The officially assigned port number for\n   RADIUS
    is 1812.\n"
  title: Implementation Note
- contents:
  - "Table of Contents\n   1.     Introduction ..........................................
    \   3\n      1.1       Specification of Requirements ...................    4\n
    \     1.2       Terminology .....................................    5\n   2.
    \    Operation .............................................    5\n      2.1       Challenge/Response
    ..............................    7\n      2.2       Interoperation with PAP and
    CHAP ................    8\n      2.3       Proxy ...........................................
    \   8\n      2.4       Why UDP? ........................................   11\n
    \     2.5       Retransmission Hints ............................   12\n      2.6
    \      Keep-Alives Considered Harmful ..................   13\n   3.     Packet
    Format .........................................   13\n   4.     Packet Types
    ..........................................   17\n      4.1       Access-Request
    ..................................   17\n      4.2       Access-Accept ...................................
    \  18\n      4.3       Access-Reject ...................................   20\n
    \     4.4       Access-Challenge ................................   21\n   5.
    \    Attributes ............................................   22\n      5.1       User-Name
    .......................................   26\n      5.2       User-Password ...................................
    \  27\n      5.3       CHAP-Password ...................................   28\n
    \     5.4       NAS-IP-Address ..................................   29\n      5.5
    \      NAS-Port ........................................   30\n      5.6       Service-Type
    ....................................   31\n      5.7       Framed-Protocol .................................
    \  33\n      5.8       Framed-IP-Address ...............................   34\n
    \     5.9       Framed-IP-Netmask ...............................   34\n      5.10
    \     Framed-Routing ..................................   35\n      5.11      Filter-Id
    .......................................   36\n      5.12      Framed-MTU ......................................
    \  37\n      5.13      Framed-Compression ..............................   37\n
    \     5.14      Login-IP-Host ...................................   38\n      5.15
    \     Login-Service ...................................   39\n      5.16      Login-TCP-Port
    ..................................   40\n      5.17      (unassigned) ....................................
    \  41\n      5.18      Reply-Message ...................................   41\n
    \     5.19      Callback-Number .................................   42\n      5.20
    \     Callback-Id .....................................   42\n      5.21      (unassigned)
    ....................................   43\n      5.22      Framed-Route ....................................
    \  43\n      5.23      Framed-IPX-Network ..............................   44\n
    \     5.24      State ...........................................   45\n      5.25
    \     Class ...........................................   46\n      5.26      Vendor-Specific
    .................................   47\n      5.27      Session-Timeout .................................
    \  48\n      5.28      Idle-Timeout ....................................   49\n
    \     5.29      Termination-Action ..............................   49\n      5.30
    \     Called-Station-Id ...............................   50\n      5.31      Calling-Station-Id
    ..............................   51\n      5.32      NAS-Identifier ..................................
    \  52\n      5.33      Proxy-State .....................................   53\n
    \     5.34      Login-LAT-Service ...............................   54\n      5.35
    \     Login-LAT-Node ..................................   55\n      5.36      Login-LAT-Group
    .................................   56\n      5.37      Framed-AppleTalk-Link
    ...........................   57\n      5.38      Framed-AppleTalk-Network ........................
    \  58\n      5.39      Framed-AppleTalk-Zone ...........................   58\n
    \     5.40      CHAP-Challenge ..................................   59\n      5.41
    \     NAS-Port-Type ...................................   60\n      5.42      Port-Limit
    ......................................   61\n      5.43      Login-LAT-Port ..................................
    \  62\n      5.44      Table of Attributes .............................   63\n
    \  6.     IANA Considerations ...................................   64\n      6.1
    \      Definition of Terms .............................   64\n      6.2       Recommended
    Registration Policies ...............   65\n   7.     Examples ..............................................
    \  66\n      7.1       User Telnet to Specified Host ...................   66\n
    \     7.2       Framed User Authenticating with CHAP ............   67\n      7.3
    \      User with Challenge-Response card ...............   68\n   8.     Security
    Considerations ...............................   71\n   9.     Change Log ............................................
    \  71\n   10.    References ............................................   73\n
    \  11.    Acknowledgements ......................................   74\n   12.
    \   Chair's Address .......................................   74\n   13.    Authors'
    Addresses ....................................   75\n   14.    Full Copyright
    Statement ..............................   76\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document obsoletes RFC 2138 [1].  A summary of the
    changes\n   between this document and RFC 2138 is available in the \"Change Log\"\n
    \  appendix.\n   Managing dispersed serial line and modem pools for large numbers
    of\n   users can create the need for significant administrative support.\n   Since
    modem pools are by definition a link to the outside world, they\n   require careful
    attention to security, authorization and accounting.\n   This can be best achieved
    by managing a single \"database\" of users,\n   which allows for authentication
    (verifying user name and password) as\n   well as configuration information detailing
    the type of service to\n   deliver to the user (for example, SLIP, PPP, telnet,
    rlogin).\n   Key features of RADIUS are:\n   Client/Server Model\n      A Network
    Access Server (NAS) operates as a client of RADIUS.  The\n      client is responsible
    for passing user information to designated\n      RADIUS servers, and then acting
    on the response which is returned.\n      RADIUS servers are responsible for receiving
    user connection\n      requests, authenticating the user, and then returning all\n
    \     configuration information necessary for the client to deliver\n      service
    to the user.\n      A RADIUS server can act as a proxy client to other RADIUS
    servers\n      or other kinds of authentication servers.\n   Network Security\n
    \     Transactions between the client and RADIUS server are\n      authenticated
    through the use of a shared secret, which is never\n      sent over the network.
    \ In addition, any user passwords are sent\n      encrypted between the client
    and RADIUS server, to eliminate the\n      possibility that someone snooping on
    an unsecure network could\n      determine a user's password.\n   Flexible Authentication
    Mechanisms\n      The RADIUS server can support a variety of methods to authenticate\n
    \     a user.  When it is provided with the user name and original\n      password
    given by the user, it can support PPP PAP or CHAP, UNIX\n      login, and other
    authentication mechanisms.\n   Extensible Protocol\n      All transactions are
    comprised of variable length Attribute-\n      Length-Value 3-tuples.  New attribute
    values can be added without\n      disturbing existing implementations of the
    protocol.\n"
  - contents:
    - "1.1.  Specification of Requirements\n   The key words \"MUST\", \"MUST NOT\",
      \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
      \ \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
      in BCP 14 [2].  These key\n   words mean the same thing whether capitalized
      or not.\n   An implementation is not compliant if it fails to satisfy one or
      more\n   of the must or must not requirements for the protocols it implements.\n
      \  An implementation that satisfies all the must, must not, should and\n   should
      not requirements for its protocols is said to be\n   \"unconditionally compliant\";
      one that satisfies all the must and must\n   not requirements but not all the
      should or should not requirements\n   for its protocols is said to be \"conditionally
      compliant\".\n   A NAS that does not implement a given service MUST NOT implement
      the\n   RADIUS attributes for that service.  For example, a NAS that is\n   unable
      to offer ARAP service MUST NOT implement the RADIUS attributes\n   for ARAP.
      \ A NAS MUST treat a RADIUS access-accept authorizing an\n   unavailable service
      as an access-reject instead.\n"
    title: 1.1.  Specification of Requirements
  - contents:
    - "1.2.  Terminology\n   This document frequently uses the following terms:\n
      \  service   The NAS provides a service to the dial-in user, such as PPP\n             or
      Telnet.\n   session   Each service provided by the NAS to a dial-in user\n             constitutes
      a session, with the beginning of the session\n             defined as the point
      where service is first provided and\n             the end of the session defined
      as the point where service\n             is ended.  A user may have multiple
      sessions in parallel or\n             series if the NAS supports that.\n   silently
      discard\n             This means the implementation discards the packet without\n
      \            further processing.  The implementation SHOULD provide the\n             capability
      of logging the error, including the contents of\n             the silently discarded
      packet, and SHOULD record the event\n             in a statistics counter.\n"
    title: 1.2.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Operation\n   When a client is configured to use RADIUS, any user of the
    client\n   presents authentication information to the client.  This might be\n
    \  with a customizable login prompt, where the user is expected to enter\n   their
    username and password.  Alternatively, the user might use a\n   link framing protocol
    such as the Point-to-Point Protocol (PPP),\n   which has authentication packets
    which carry this information.\n   Once the client has obtained such information,
    it may choose to\n   authenticate using RADIUS.  To do so, the client creates
    an \"Access-\n   Request\" containing such Attributes as the user's name, the
    user's\n   password, the ID of the client and the Port ID which the user is\n
    \  accessing.  When a password is present, it is hidden using a method\n   based
    on the RSA Message Digest Algorithm MD5 [3].\n   The Access-Request is submitted
    to the RADIUS server via the network.\n   If no response is returned within a
    length of time, the request is\n   re-sent a number of times.  The client can
    also forward requests to\n   an alternate server or servers in the event that
    the primary server\n   is down or unreachable.  An alternate server can be used
    either after\n   a number of tries to the primary server fail, or in a round-robin\n
    \  fashion.  Retry and fallback algorithms are the topic of current\n   research
    and are not specified in detail in this document.\n   Once the RADIUS server receives
    the request, it validates the sending\n   client.  A request from a client for
    which the RADIUS server does not\n   have a shared secret MUST be silently discarded.
    \ If the client is\n   valid, the RADIUS server consults a database of users to
    find the\n   user whose name matches the request.  The user entry in the database\n
    \  contains a list of requirements which must be met to allow access for\n   the
    user.  This always includes verification of the password, but can\n   also specify
    the client(s) or port(s) to which the user is allowed\n   access.\n   The RADIUS
    server MAY make requests of other servers in order to\n   satisfy the request,
    in which case it acts as a client.\n   If any Proxy-State attributes were present
    in the Access-Request,\n   they MUST be copied unmodified and in order into the
    response packet.\n   Other Attributes can be placed before, after, or even between
    the\n   Proxy-State attributes.\n   If any condition is not met, the RADIUS server
    sends an \"Access-\n   Reject\" response indicating that this user request is
    invalid.  If\n   desired, the server MAY include a text message in the Access-Reject\n
    \  which MAY be displayed by the client to the user.  No other\n   Attributes
    (except Proxy-State) are permitted in an Access-Reject.\n   If all conditions
    are met and the RADIUS server wishes to issue a\n   challenge to which the user
    must respond, the RADIUS server sends an\n   \"Access-Challenge\" response.  It
    MAY include a text message to be\n   displayed by the client to the user prompting
    for a response to the\n   challenge, and MAY include a State attribute.\n   If
    the client receives an Access-Challenge and supports\n   challenge/response it
    MAY display the text message, if any, to the\n   user, and then prompt the user
    for a response.  The client then re-\n   submits its original Access-Request with
    a new request ID, with the\n   User-Password Attribute replaced by the response
    (encrypted), and\n   including the State Attribute from the Access-Challenge,
    if any.\n   Only 0 or 1 instances of the State Attribute SHOULD be\n   present
    in a request.  The server can respond to this new Access-\n   Request with either
    an Access-Accept, an Access-Reject, or another\n   Access-Challenge.\n   If all
    conditions are met, the list of configuration values for the\n   user are placed
    into an \"Access-Accept\" response.  These values\n   include the type of service
    (for example: SLIP, PPP, Login User) and\n   all necessary values to deliver the
    desired service.  For SLIP and\n   PPP, this may include values such as IP address,
    subnet mask, MTU,\n   desired compression, and desired packet filter identifiers.
    \ For\n   character mode users, this may include values such as desired\n   protocol
    and host.\n"
  - contents:
    - "2.1.  Challenge/Response\n   In challenge/response authentication, the user
      is given an\n   unpredictable number and challenged to encrypt it and give back
      the\n   result. Authorized users are equipped with special devices such as\n
      \  smart cards or software that facilitate calculation of the correct\n   response
      with ease. Unauthorized users, lacking the appropriate\n   device or software
      and lacking knowledge of the secret key necessary\n   to emulate such a device
      or software, can only guess at the response.\n   The Access-Challenge packet
      typically contains a Reply-Message\n   including a challenge to be displayed
      to the user, such as a numeric\n   value unlikely ever to be repeated. Typically
      this is obtained from\n   an external server that knows what type of authenticator
      is in the\n   possession of the authorized user and can therefore choose a random\n
      \  or non-repeating pseudorandom number of an appropriate radix and\n   length.\n
      \  The user then enters the challenge into his device (or software) and\n   it
      calculates a response, which the user enters into the client which\n   forwards
      it to the RADIUS server via a second Access-Request.  If the\n   response matches
      the expected response the RADIUS server replies with\n   an Access-Accept, otherwise
      an Access-Reject.\n   Example: The NAS sends an Access-Request packet to the
      RADIUS Server\n   with NAS-Identifier, NAS-Port, User-Name, User-Password (which
      may\n   just be a fixed string like \"challenge\" or ignored).  The server\n
      \  sends back an Access-Challenge packet with State and a Reply-Message\n   along
      the lines of \"Challenge 12345678, enter your response at the\n   prompt\" which
      the NAS displays.  The NAS prompts for the response and\n   sends a NEW Access-Request
      to the server (with a new ID) with NAS-\n   Identifier, NAS-Port, User-Name,
      User-Password (the response just\n   entered by the user, encrypted), and the
      same State Attribute that\n   came with the Access-Challenge.  The server then
      sends back either an\n   Access-Accept or Access-Reject based on whether the
      response matches\n   the required value, or it can even send another Access-Challenge.\n"
    title: 2.1.  Challenge/Response
  - contents:
    - "2.2.  Interoperation with PAP and CHAP\n   For PAP, the NAS takes the PAP ID
      and password and sends them in an\n   Access-Request packet as the User-Name
      and User-Password. The NAS MAY\n   include the Attributes Service-Type = Framed-User
      and Framed-Protocol\n   = PPP as a hint to the RADIUS server that PPP service
      is expected.\n   For CHAP, the NAS generates a random challenge (preferably
      16 octets)\n   and sends it to the user, who returns a CHAP response along with
      a\n   CHAP ID and CHAP username.  The NAS then sends an Access-Request\n   packet
      to the RADIUS server with the CHAP username as the User-Name\n   and with the
      CHAP ID and CHAP response as the CHAP-Password\n   (Attribute 3).  The random
      challenge can either be included in the\n   CHAP-Challenge attribute or, if
      it is 16 octets long, it can be\n   placed in the Request Authenticator field
      of the Access-Request\n   packet.  The NAS MAY include the Attributes Service-Type
      = Framed-\n   User and Framed-Protocol = PPP as a hint to the RADIUS server
      that\n   PPP service is expected.\n   The RADIUS server looks up a password
      based on the User-Name,\n   encrypts the challenge using MD5 on the CHAP ID
      octet, that password,\n   and the CHAP challenge (from the CHAP-Challenge attribute
      if present,\n   otherwise from the Request Authenticator), and compares that
      result\n   to the CHAP-Password.  If they match, the server sends back an\n
      \  Access-Accept, otherwise it sends back an Access-Reject.\n   If the RADIUS
      server is unable to perform the requested\n   authentication it MUST return
      an Access-Reject.  For example, CHAP\n   requires that the user's password be
      available in cleartext to the\n   server so that it can encrypt the CHAP challenge
      and compare that to\n   the CHAP response.  If the password is not available
      in cleartext to\n   the RADIUS server then the server MUST send an Access-Reject
      to the\n   client.\n"
    title: 2.2.  Interoperation with PAP and CHAP
  - contents:
    - "2.3.  Proxy\n   With proxy RADIUS, one RADIUS server receives an authentication
      (or\n   accounting) request from a RADIUS client (such as a NAS), forwards\n
      \  the request to a remote RADIUS server, receives the reply from the\n   remote
      server, and sends that reply to the client, possibly with\n   changes to reflect
      local administrative policy.  A common use for\n   proxy RADIUS is roaming.
      \ Roaming permits two or more administrative\n   entities to allow each other's
      users to dial in to either entity's\n   network for service.\n   The NAS sends
      its RADIUS access-request to the \"forwarding server\"\n   which forwards it
      to the \"remote server\".  The remote server sends a\n   response (Access-Accept,
      Access-Reject, or Access-Challenge) back to\n   the forwarding server, which
      sends it back to the NAS.  The User-Name\n   attribute MAY contain a Network
      Access Identifier [8] for RADIUS\n   Proxy operations.  The choice of which
      server receives the forwarded\n   request SHOULD be based on the authentication
      \"realm\". The\n   authentication realm MAY be the realm part of a Network Access\n
      \  Identifier (a \"named realm\").  Alternatively, the choice of which\n   server
      receives the forwarded request MAY be based on whatever other\n   criteria the
      forwarding server is configured to use, such as Called-\n   Station-Id (a \"numbered
      realm\").\n   A RADIUS server can function as both a forwarding server and a
      remote\n   server, serving as a forwarding server for some realms and a remote\n
      \  server for other realms.  One forwarding server can act as a\n   forwarder
      for any number of remote servers.  A remote server can have\n   any number of
      servers forwarding to it and can provide authentication\n   for any number of
      realms.  One forwarding server can forward to\n   another forwarding server
      to create a chain of proxies, although care\n   must be taken to avoid introducing
      loops.\n   The following scenario illustrates a proxy RADIUS communication\n
      \  between a NAS and the forwarding and remote RADIUS servers:\n   1. A NAS
      sends its access-request to the forwarding server.\n   2. The forwarding server
      forwards the access-request to the remote\n      server.\n   3. The remote server
      sends an access-accept, access-reject or\n      access-challenge back to the
      forwarding server.  For this example,\n      an access-accept is sent.\n   4.
      The forwarding server sends the access-accept to the NAS.\n   The forwarding
      server MUST treat any Proxy-State attributes already\n   in the packet as opaque
      data.  Its operation MUST NOT depend on the\n   content of Proxy-State attributes
      added by previous servers.\n   If there are any Proxy-State attributes in the
      request received from\n   the client, the forwarding server MUST include those
      Proxy-State\n   attributes in its reply to the client.  The forwarding server
      MAY\n   include the Proxy-State attributes in the access-request when it\n   forwards
      the request, or MAY omit them in the forwarded request.  If\n   the forwarding
      server omits the Proxy-State attributes in the\n   forwarded access-request,
      it MUST attach them to the response before\n   sending it to the client.\n   We
      now examine each step in more detail.\n   1. A NAS sends its access-request
      to the forwarding server.  The\n      forwarding server decrypts the User-Password,
      if present, using\n      the shared secret it knows for the NAS.  If a CHAP-Password\n
      \     attribute is present in the packet and no CHAP-Challenge attribute\n      is
      present, the forwarding server MUST leave the Request-\n      Authenticator
      untouched or copy it to a CHAP-Challenge attribute.\n   '' The forwarding server
      MAY add one Proxy-State attribute to the\n      packet.  (It MUST NOT add more
      than one.)  If it adds a Proxy-\n      State, the Proxy-State MUST appear after
      any other Proxy-States in\n      the packet.  The forwarding server MUST NOT
      modify any other\n      Proxy-States that were in the packet (it may choose
      not to forward\n      them, but it MUST NOT change their contents).  The forwarding\n
      \     server MUST NOT change the order of any attributes of the same\n      type,
      including Proxy-State.\n   2. The forwarding server encrypts the User-Password,
      if present,\n      using the secret it shares with the remote server, sets the\n
      \     Identifier as needed, and forwards the access-request to the\n      remote
      server.\n   3. The remote server (if the final destination) verifies the user\n
      \     using User-Password, CHAP-Password, or such method as future\n      extensions
      may dictate, and returns an access-accept, access-\n      reject or access-challenge
      back to the forwarding server.  For\n      this example, an access-accept is
      sent.  The remote server MUST\n      copy all Proxy-State attributes (and only
      the Proxy-State\n      attributes) in order from the access-request to the response\n
      \     packet, without modifying them.\n   4. The forwarding server verifies
      the Response Authenticator using\n      the secret it shares with the remote
      server, and silently discards\n      the packet if it fails verification.  If
      the packet passes\n      verification, the forwarding server removes the last
      Proxy-State\n      (if it attached one), signs the Response Authenticator using
      the\n      secret it shares with the NAS, restores the Identifier to match\n
      \     the one in the original request by the NAS, and sends the access-\n      accept
      to the NAS.\n   A forwarding server MAY need to modify attributes to enforce
      local\n   policy.  Such policy is outside the scope of this document, with the\n
      \  following restrictions.  A forwarding server MUST not modify existing\n   Proxy-State,
      State, or Class attributes present in the packet.\n   Implementers of forwarding
      servers should consider carefully which\n   values it is willing to accept for
      Service-Type.  Careful\n   consideration must be given to the effects of passing
      along Service-\n   Types of NAS-Prompt or Administrative in a proxied Access-Accept,
      and\n   implementers may wish to provide mechanisms to block those or other\n
      \  service types, or other attributes.  Such mechanisms are outside the\n   scope
      of this document.\n"
    title: 2.3.  Proxy
  - contents:
    - "2.4.  Why UDP?\n   A frequently asked question is why RADIUS uses UDP instead
      of TCP as\n   a transport protocol.  UDP was chosen for strictly technical reasons.\n
      \  There are a number of issues which must be understood.  RADIUS is a\n   transaction
      based protocol which has several interesting\n   characteristics:\n   1. If
      the request to a primary Authentication server fails, a\n      secondary server
      must be queried.\n      To meet this requirement, a copy of the request must
      be kept above\n      the transport layer to allow for alternate transmission.
      \ This\n      means that retransmission timers are still required.\n   2. The
      timing requirements of this particular protocol are\n      significantly different
      than TCP provides.\n      At one extreme, RADIUS does not require a \"responsive\"
      detection\n      of lost data.  The user is willing to wait several seconds
      for the\n      authentication to complete.  The generally aggressive TCP\n      retransmission
      (based on average round trip time) is not required,\n      nor is the acknowledgement
      overhead of TCP.\n      At the other extreme, the user is not willing to wait
      several\n      minutes for authentication.  Therefore the reliable delivery
      of\n      TCP data two minutes later is not useful.  The faster use of an\n
      \     alternate server allows the user to gain access before giving up.\n   3.
      The stateless nature of this protocol simplifies the use of UDP.\n      Clients
      and servers come and go.  Systems are rebooted, or are\n      power cycled independently.
      \ Generally this does not cause a\n      problem and with creative timeouts
      and detection of lost TCP\n      connections, code can be written to handle
      anomalous events.  UDP\n      however completely eliminates any of this special
      handling.  Each\n      client and server can open their UDP transport just once
      and leave\n      it open through all types of failure events on the network.\n
      \  4. UDP simplifies the server implementation.\n      In the earliest implementations
      of RADIUS, the server was single\n      threaded.  This means that a single
      request was received,\n      processed, and returned.  This was found to be
      unmanageable in\n      environments where the back-end security mechanism took
      real time\n      (1 or more seconds).  The server request queue would fill and
      in\n      environments where hundreds of people were being authenticated\n      every
      minute, the request turn-around time increased to longer\n      than users were
      willing to wait (this was especially severe when a\n      specific lookup in
      a database or over DNS took 30 or more\n      seconds).  The obvious solution
      was to make the server multi-\n      threaded.  Achieving this was simple with
      UDP.  Separate processes\n      were spawned to serve each request and these
      processes could\n      respond directly to the client NAS with a simple UDP
      packet to the\n      original transport of the client.\n   It's not all a panacea.
      \ As noted, using UDP requires one thing which\n   is built into TCP: with UDP
      we must artificially manage\n   retransmission timers to the same server, although
      they don't require\n   the same attention to timing provided by TCP.  This one
      penalty is a\n   small price to pay for the advantages of UDP in this protocol.\n
      \  Without TCP we would still probably be using tin cans connected by\n   string.
      \ But for this particular protocol, UDP is a better choice.\n"
    title: 2.4.  Why UDP?
  - contents:
    - "2.5.  Retransmission Hints\n   If the RADIUS server and alternate RADIUS server
      share the same\n   shared secret, it is OK to retransmit the packet to the alternate\n
      \  RADIUS server with the same ID and Request Authenticator, because the\n   content
      of the attributes haven't changed.  If you want to use a new\n   Request Authenticator
      when sending to the alternate server, you may.\n   If you change the contents
      of the User-Password attribute (or any\n   other attribute), you need a new
      Request Authenticator and therefore\n   a new ID.\n   If the NAS is retransmitting
      a RADIUS request to the same server as\n   before, and the attributes haven't
      changed, you MUST use the same\n   Request Authenticator, ID, and source port.
      \ If any attributes have\n   changed, you MUST use a new Request Authenticator
      and ID.\n   A NAS MAY use the same ID across all servers, or MAY keep track
      of\n   IDs separately for each server, it is up to the implementer.  If a\n
      \  NAS needs more than 256 IDs for outstanding requests, it MAY use\n   additional
      source ports to send requests from, and keep track of IDs\n   for each source
      port.  This allows up to 16 million or so outstanding\n   requests at one time
      to a single server.\n"
    title: 2.5.  Retransmission Hints
  - contents:
    - "2.6.  Keep-Alives Considered Harmful\n   Some implementers have adopted the
      practice of sending test RADIUS\n   requests to see if a server is alive.  This
      practice is strongly\n   discouraged, since it adds to load and harms scalability
      without\n   providing any additional useful information.  Since a RADIUS request\n
      \  is contained in a single datagram, in the time it would take you to\n   send
      a ping you could just send the RADIUS request, and getting a\n   reply tells
      you that the RADIUS server is up.  If you do not have a\n   RADIUS request to
      send, it does not matter if the server is up or\n   not, because you are not
      using it.\n   If you want to monitor your RADIUS server, use SNMP.  That's what\n
      \  SNMP is for.\n"
    title: 2.6.  Keep-Alives Considered Harmful
  title: 2.  Operation
- contents:
  - "3.  Packet Format\n   Exactly one RADIUS packet is encapsulated in the UDP Data
    field [4],\n   where the UDP Destination Port field indicates 1812 (decimal).\n
    \  When a reply is generated, the source and destination ports are\n   reversed.\n
    \  This memo documents the RADIUS protocol.  The early deployment of\n   RADIUS
    was done using UDP port number 1645, which conflicts with the\n   \"datametrics\"
    service.  The officially assigned port number for\n   RADIUS is 1812.\n   A summary
    of the RADIUS data format is shown below.  The fields are\n   transmitted from
    left to right.\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                                                               |\n   |                         Authenticator
    \                        |\n   |                                                               |\n
    \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |  Attributes ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-\n   Code\n      The Code field
    is one octet, and identifies the type of RADIUS\n      packet.  When a packet
    is received with an invalid Code field, it\n      is silently discarded.\n      RADIUS
    Codes (decimal) are assigned as follows:\n        1       Access-Request\n        2
    \      Access-Accept\n        3       Access-Reject\n        4       Accounting-Request\n
    \       5       Accounting-Response\n       11       Access-Challenge\n       12
    \      Status-Server (experimental)\n       13       Status-Client (experimental)\n
    \     255       Reserved\n   Codes 4 and 5 are covered in the RADIUS Accounting
    document [5].\n   Codes 12 and 13 are reserved for possible use, but are not further\n
    \  mentioned here.\n   Identifier\n      The Identifier field is one octet, and
    aids in matching requests\n      and replies.  The RADIUS server can detect a
    duplicate request if\n      it has the same client source IP address and source
    UDP port and\n      Identifier within a short span of time.\n   Length\n      The
    Length field is two octets.  It indicates the length of the\n      packet including
    the Code, Identifier, Length, Authenticator and\n      Attribute fields.  Octets
    outside the range of the Length field\n      MUST be treated as padding and ignored
    on reception.  If the\n      packet is shorter than the Length field indicates,
    it MUST be\n      silently discarded.  The minimum length is 20 and maximum length\n
    \     is 4096.\n   Authenticator\n      The Authenticator field is sixteen (16)
    octets.  The most\n      significant octet is transmitted first.  This value is
    used to\n      authenticate the reply from the RADIUS server, and is used in the\n
    \     password hiding algorithm.\n      Request Authenticator\n         In Access-Request
    Packets, the Authenticator value is a 16\n         octet random number, called
    the Request Authenticator.  The\n         value SHOULD be unpredictable and unique
    over the lifetime of a\n         secret (the password shared between the client
    and the RADIUS\n         server), since repetition of a request value in conjunction\n
    \        with the same secret would permit an attacker to reply with a\n         previously
    intercepted response.  Since it is expected that the\n         same secret MAY
    be used to authenticate with servers in\n         disparate geographic regions,
    the Request Authenticator field\n         SHOULD exhibit global and temporal uniqueness.\n
    \        The Request Authenticator value in an Access-Request packet\n         SHOULD
    also be unpredictable, lest an attacker trick a server\n         into responding
    to a predicted future request, and then use the\n         response to masquerade
    as that server to a future Access-\n         Request.\n         Although protocols
    such as RADIUS are incapable of protecting\n         against theft of an authenticated
    session via realtime active\n         wiretapping attacks, generation of unique
    unpredictable\n         requests can protect against a wide range of active attacks\n
    \        against authentication.\n         The NAS and RADIUS server share a secret.
    \ That shared secret\n         followed by the Request Authenticator is put through
    a one-way\n         MD5 hash to create a 16 octet digest value which is xored
    with\n         the password entered by the user, and the xored result placed\n
    \        in the User-Password attribute in the Access-Request packet.\n         See
    the entry for User-Password in the section on Attributes\n         for a more
    detailed description.\n      Response Authenticator\n         The value of the
    Authenticator field in Access-Accept, Access-\n         Reject, and Access-Challenge
    packets is called the Response\n         Authenticator, and contains a one-way
    MD5 hash calculated over\n         a stream of octets consisting of: the RADIUS
    packet, beginning\n         with the Code field, including the Identifier, the
    Length, the\n         Request Authenticator field from the Access-Request packet,
    and\n         the response Attributes, followed by the shared secret.  That\n
    \        is, ResponseAuth =\n         MD5(Code+ID+Length+RequestAuth+Attributes+Secret)
    where +\n         denotes concatenation.\n   Administrative Note\n      The secret
    (password shared between the client and the RADIUS\n      server) SHOULD be at
    least as large and unguessable as a well-\n      chosen password.  It is preferred
    that the secret be at least 16\n      octets.  This is to ensure a sufficiently
    large range for the\n      secret to provide protection against exhaustive search
    attacks.\n      The secret MUST NOT be empty (length 0) since this would allow\n
    \     packets to be trivially forged.\n      A RADIUS server MUST use the source
    IP address of the RADIUS UDP\n      packet to decide which shared secret to use,
    so that RADIUS\n      requests can be proxied.\n      When using a forwarding
    proxy, the proxy must be able to alter the\n      packet as it passes through
    in each direction - when the proxy\n      forwards the request, the proxy MAY
    add a Proxy-State Attribute,\n      and when the proxy forwards a response, it
    MUST remove its Proxy-\n      State Attribute if it added one.  Proxy-State is
    always added or\n      removed after any other Proxy-States, but no other assumptions\n
    \     regarding its location within the list of attributes can be made.\n      Since
    Access-Accept and Access-Reject replies are authenticated on\n      the entire
    packet contents, the stripping of the Proxy-State\n      attribute invalidates
    the signature in the packet - so the proxy\n      has to re-sign it.\n      Further
    details of RADIUS proxy implementation are outside the\n      scope of this document.\n"
  title: 3.  Packet Format
- contents:
  - "4.  Packet Types\n   The RADIUS Packet type is determined by the Code field in
    the first\n   octet of the Packet.\n"
  - contents:
    - "4.1.  Access-Request\n   Description\n      Access-Request packets are sent
      to a RADIUS server, and convey\n      information used to determine whether
      a user is allowed access to\n      a specific NAS, and any special services
      requested for that user.\n      An implementation wishing to authenticate a
      user MUST transmit a\n      RADIUS packet with the Code field set to 1 (Access-Request).\n
      \     Upon receipt of an Access-Request from a valid client, an\n      appropriate
      reply MUST be transmitted.\n      An Access-Request SHOULD contain a User-Name
      attribute.  It MUST\n      contain either a NAS-IP-Address attribute or a NAS-Identifier\n
      \     attribute (or both).\n      An Access-Request MUST contain either a User-Password
      or a CHAP-\n      Password or a State.  An Access-Request MUST NOT contain both
      a\n      User-Password and a CHAP-Password.  If future extensions allow\n      other
      kinds of authentication information to be conveyed, the\n      attribute for
      that can be used in an Access-Request instead of\n      User-Password or CHAP-Password.\n
      \     An Access-Request SHOULD contain a NAS-Port or NAS-Port-Type\n      attribute
      or both unless the type of access being requested does\n      not involve a
      port or the NAS does not distinguish among its\n      ports.\n      An Access-Request
      MAY contain additional attributes as a hint to\n      the server, but the server
      is not required to honor the hint.\n      When a User-Password is present, it
      is hidden using a method based\n      on the RSA Message Digest Algorithm MD5
      [3].\n   A summary of the Access-Request packet format is shown below.  The\n
      \  fields are transmitted from left to right.\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   |                     Request
      Authenticator                     |\n   |                                                               |\n
      \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  Attributes ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-\n   Code\n      1 for Access-Request.\n
      \  Identifier\n      The Identifier field MUST be changed whenever the content
      of the\n      Attributes field changes, and whenever a valid reply has been\n
      \     received for a previous request.  For retransmissions, the\n      Identifier
      MUST remain unchanged.\n   Request Authenticator\n      The Request Authenticator
      value MUST be changed each time a new\n      Identifier is used.\n   Attributes\n
      \     The Attribute field is variable in length, and contains the list\n      of
      Attributes that are required for the type of service, as well\n      as any
      desired optional Attributes.\n"
    title: 4.1.  Access-Request
  - contents:
    - "4.2.  Access-Accept\n   Description\n      Access-Accept packets are sent by
      the RADIUS server, and provide\n      specific configuration information necessary
      to begin delivery of\n      service to the user.  If all Attribute values received
      in an\n      Access-Request are acceptable then the RADIUS implementation MUST\n
      \     transmit a packet with the Code field set to 2 (Access-Accept).\n      On
      reception of an Access-Accept, the Identifier field is matched\n      with a
      pending Access-Request.  The Response Authenticator field\n      MUST contain
      the correct response for the pending Access-Request.\n      Invalid packets
      are silently discarded.\n   A summary of the Access-Accept packet format is
      shown below.  The\n   fields are transmitted from left to right.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   |                     Response
      Authenticator                    |\n   |                                                               |\n
      \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  Attributes ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-\n   Code\n      2 for Access-Accept.\n
      \  Identifier\n      The Identifier field is a copy of the Identifier field
      of the\n      Access-Request which caused this Access-Accept.\n   Response Authenticator\n
      \     The Response Authenticator value is calculated from the Access-\n      Request
      value, as described earlier.\n   Attributes\n      The Attribute field is variable
      in length, and contains a list of\n      zero or more Attributes.\n"
    title: 4.2.  Access-Accept
  - contents:
    - "4.3.  Access-Reject\n   Description\n      If any value of the received Attributes
      is not acceptable, then\n      the RADIUS server MUST transmit a packet with
      the Code field set\n      to 3 (Access-Reject).  It MAY include one or more
      Reply-Message\n      Attributes with a text message which the NAS MAY display
      to the\n      user.\n   A summary of the Access-Reject packet format is shown
      below.  The\n   fields are transmitted from left to right.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   |                     Response
      Authenticator                    |\n   |                                                               |\n
      \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  Attributes ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-\n   Code\n      3 for Access-Reject.\n
      \  Identifier\n      The Identifier field is a copy of the Identifier field
      of the\n      Access-Request which caused this Access-Reject.\n   Response Authenticator\n
      \     The Response Authenticator value is calculated from the Access-\n      Request
      value, as described earlier.\n   Attributes\n      The Attribute field is variable
      in length, and contains a list of\n      zero or more Attributes.\n"
    title: 4.3.  Access-Reject
  - contents:
    - "4.4.  Access-Challenge\n   Description\n      If the RADIUS server desires
      to send the user a challenge\n      requiring a response, then the RADIUS server
      MUST respond to the\n      Access-Request by transmitting a packet with the
      Code field set to\n      11 (Access-Challenge).\n      The Attributes field
      MAY have one or more Reply-Message\n      Attributes, and MAY have a single
      State Attribute, or none.\n      Vendor-Specific, Idle-Timeout, Session-Timeout
      and Proxy-State\n      attributes MAY also be included.  No other Attributes
      defined in\n      this document are permitted in an Access-Challenge.\n      On
      receipt of an Access-Challenge, the Identifier field is matched\n      with
      a pending Access-Request.  Additionally, the Response\n      Authenticator field
      MUST contain the correct response for the\n      pending Access-Request.  Invalid
      packets are silently discarded.\n      If the NAS does not support challenge/response,
      it MUST treat an\n      Access-Challenge as though it had received an Access-Reject\n
      \     instead.\n      If the NAS supports challenge/response, receipt of a valid\n
      \     Access-Challenge indicates that a new Access-Request SHOULD be\n      sent.
      \ The NAS MAY display the text message, if any, to the user,\n      and then
      prompt the user for a response.  It then sends its\n      original Access-Request
      with a new request ID and Request\n      Authenticator, with the User-Password
      Attribute replaced by the\n      user's response (encrypted), and including
      the State Attribute\n      from the Access-Challenge, if any.  Only 0 or 1 instances
      of the\n      State Attribute can be present in an Access-Request.\n      A
      NAS which supports PAP MAY forward the Reply-Message to the\n      dialing client
      and accept a PAP response which it can use as\n      though the user had entered
      the response.  If the NAS cannot do\n      so, it MUST treat the Access-Challenge
      as though it had received\n      an Access-Reject instead.\n   A summary of
      the Access-Challenge packet format is shown below.  The\n   fields are transmitted
      from left to right.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   |                     Response
      Authenticator                    |\n   |                                                               |\n
      \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  Attributes ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-\n   Code\n      11 for Access-Challenge.\n
      \  Identifier\n      The Identifier field is a copy of the Identifier field
      of the\n      Access-Request which caused this Access-Challenge.\n   Response
      Authenticator\n      The Response Authenticator value is calculated from the
      Access-\n      Request value, as described earlier.\n   Attributes\n      The
      Attributes field is variable in length, and contains a list of\n      zero or
      more Attributes.\n"
    title: 4.4.  Access-Challenge
  title: 4.  Packet Types
- contents:
  - "5.  Attributes\n   RADIUS Attributes carry the specific authentication, authorization,\n
    \  information and configuration details for the request and reply.\n   The end
    of the list of Attributes is indicated by the Length of the\n   RADIUS packet.\n
    \  Some Attributes MAY be included more than once.  The effect of this\n   is
    Attribute specific, and is specified in each Attribute\n   description.  A summary
    table is provided at the end of the\n   \"Attributes\" section.\n   If multiple
    Attributes with the same Type are present, the order of\n   Attributes with the
    same Type MUST be preserved by any proxies.  The\n   order of Attributes of different
    Types is not required to be\n   preserved.  A RADIUS server or client MUST NOT
    have any dependencies\n   on the order of attributes of different types.  A RADIUS
    server or\n   client MUST NOT require attributes of the same type to be contiguous.\n
    \  Where an Attribute's description limits which kinds of packet it can\n   be
    contained in, this applies only to the packet types defined in\n   this document,
    namely Access-Request, Access-Accept, Access-Reject\n   and Access-Challenge (Codes
    1, 2, 3, and 11).  Other documents\n   defining other packet types may also use
    Attributes described here.\n   To determine which Attributes are allowed in Accounting-Request
    and\n   Accounting-Response packets (Codes 4 and 5) refer to the RADIUS\n   Accounting
    document [5].\n   Likewise where packet types defined here state that only certain\n
    \  Attributes are permissible in them, future memos defining new\n   Attributes
    should indicate which packet types the new Attributes may\n   be present in.\n
    \  A summary of the Attribute format is shown below.  The fields are\n   transmitted
    from left to right.\n    0                   1                   2\n    0 1 2
    3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
    \  |     Type      |    Length     |  Value ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
    \  Type\n      The Type field is one octet.  Up-to-date values of the RADIUS Type\n
    \     field are specified in the most recent \"Assigned Numbers\" RFC [6].\n      Values
    192-223 are reserved for experimental use, values 224-240\n      are reserved
    for implementation-specific use, and values 241-255\n      are reserved and should
    not be used.\n      A RADIUS server MAY ignore Attributes with an unknown Type.\n
    \     A RADIUS client MAY ignore Attributes with an unknown Type.\n      This
    specification concerns the following values:\n          1      User-Name\n          2
    \     User-Password\n          3      CHAP-Password\n          4      NAS-IP-Address\n
    \         5      NAS-Port\n          6      Service-Type\n          7      Framed-Protocol\n
    \         8      Framed-IP-Address\n          9      Framed-IP-Netmask\n         10
    \     Framed-Routing\n         11      Filter-Id\n         12      Framed-MTU\n
    \        13      Framed-Compression\n         14      Login-IP-Host\n         15
    \     Login-Service\n         16      Login-TCP-Port\n         17      (unassigned)\n
    \        18      Reply-Message\n         19      Callback-Number\n         20
    \     Callback-Id\n         21      (unassigned)\n         22      Framed-Route\n
    \        23      Framed-IPX-Network\n         24      State\n         25      Class\n
    \        26      Vendor-Specific\n         27      Session-Timeout\n         28
    \     Idle-Timeout\n         29      Termination-Action\n         30      Called-Station-Id\n
    \        31      Calling-Station-Id\n         32      NAS-Identifier\n         33
    \     Proxy-State\n         34      Login-LAT-Service\n         35      Login-LAT-Node\n
    \        36      Login-LAT-Group\n         37      Framed-AppleTalk-Link\n         38
    \     Framed-AppleTalk-Network\n         39      Framed-AppleTalk-Zone\n         40-59
    \  (reserved for accounting)\n         60      CHAP-Challenge\n         61      NAS-Port-Type\n
    \        62      Port-Limit\n         63      Login-LAT-Port\n   Length\n      The
    Length field is one octet, and indicates the length of this\n      Attribute including
    the Type, Length and Value fields.  If an\n      Attribute is received in an Access-Request
    but with an invalid\n      Length, an Access-Reject SHOULD be transmitted.  If
    an Attribute\n      is received in an Access-Accept, Access-Reject or Access-Challenge\n
    \     packet with an invalid length, the packet MUST either be treated\n      as
    an Access-Reject or else silently discarded.\n   Value\n      The Value field
    is zero or more octets and contains information\n      specific to the Attribute.
    \ The format and length of the Value\n      field is determined by the Type and
    Length fields.\n      Note that none of the types in RADIUS terminate with a NUL
    (hex\n      00).  In particular, types \"text\" and \"string\" in RADIUS do not\n
    \     terminate with a NUL (hex 00).  The Attribute has a length field\n      and
    does not use a terminator.  Text contains UTF-8 encoded 10646\n      [7] characters
    and String contains 8-bit binary data.  Servers and\n      servers and clients
    MUST be able to deal with embedded nulls.\n      RADIUS implementers using C are
    cautioned not to use strcpy() when\n      handling strings.\n      The format
    of the value field is one of five data types.  Note\n      that type \"text\"
    is a subset of type \"string\".\n      text      1-253 octets containing UTF-8
    encoded 10646 [7]\n                characters.  Text of length zero (0) MUST NOT
    be sent;\n                omit the entire attribute instead.\n      string    1-253
    octets containing binary data (values 0 through\n                255 decimal,
    inclusive).  Strings of length zero (0)\n                MUST NOT be sent; omit
    the entire attribute instead.\n      address   32 bit value, most significant
    octet first.\n      integer   32 bit unsigned value, most significant octet first.\n
    \     time      32 bit unsigned value, most significant octet first --\n                seconds
    since 00:00:00 UTC, January 1, 1970.  The\n                standard Attributes
    do not use this data type but it is\n                presented here for possible
    use in future attributes.\n"
  - contents:
    - "5.1.  User-Name\n   Description\n      This Attribute indicates the name of
      the user to be authenticated.\n      It MUST be sent in Access-Request packets
      if available.\n      It MAY be sent in an Access-Accept packet, in which case
      the\n      client SHOULD use the name returned in the Access-Accept packet in\n
      \     all Accounting-Request packets for this session.  If the Access-\n      Accept
      includes Service-Type = Rlogin and the User-Name attribute,\n      a NAS MAY
      use the returned User-Name when performing the Rlogin\n      function.\n   A
      summary of the User-Name Attribute format is shown below.  The\n   fields are
      transmitted from left to right.\n    0                   1                   2\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      1 for User-Name.\n   Length\n      >= 3\n   String\n      The
      String field is one or more octets.  The NAS may limit the\n      maximum length
      of the User-Name but the ability to handle at least\n      63 octets is recommended.\n
      \     The format of the username MAY be one of several forms:\n      text      Consisting
      only of UTF-8 encoded 10646 [7] characters.\n      network access identifier\n
      \               A Network Access Identifier as described in RFC 2486\n                [8].\n
      \     distinguished name\n                A name in ASN.1 form used in Public
      Key authentication\n                systems.\n"
    title: 5.1.  User-Name
  - contents:
    - "5.2.  User-Password\n   Description\n      This Attribute indicates the password
      of the user to be\n      authenticated, or the user's input following an Access-Challenge.\n
      \     It is only used in Access-Request packets.\n      On transmission, the
      password is hidden.  The password is first\n      padded at the end with nulls
      to a multiple of 16 octets.  A one-\n      way MD5 hash is calculated over a
      stream of octets consisting of\n      the shared secret followed by the Request
      Authenticator.  This\n      value is XORed with the first 16 octet segment of
      the password and\n      placed in the first 16 octets of the String field of
      the User-\n      Password Attribute.\n      If the password is longer than 16
      characters, a second one-way MD5\n      hash is calculated over a stream of
      octets consisting of the\n      shared secret followed by the result of the
      first xor.  That hash\n      is XORed with the second 16 octet segment of the
      password and\n      placed in the second 16 octets of the String field of the
      User-\n      Password Attribute.\n      If necessary, this operation is repeated,
      with each xor result\n      being used along with the shared secret to generate
      the next hash\n      to xor the next segment of the password, to no more than
      128\n      characters.\n      The method is taken from the book \"Network Security\"
      by Kaufman,\n      Perlman and Speciner [9] pages 109-110.  A more precise\n
      \     explanation of the method follows:\n      Call the shared secret S and
      the pseudo-random 128-bit Request\n      Authenticator RA.  Break the password
      into 16-octet chunks p1, p2,\n      etc.  with the last one padded at the end
      with nulls to a 16-octet\n      boundary.  Call the ciphertext blocks c(1),
      c(2), etc.  We'll need\n      intermediate values b1, b2, etc.\n         b1
      = MD5(S + RA)       c(1) = p1 xor b1\n         b2 = MD5(S + c(1))     c(2) =
      p2 xor b2\n                .                       .\n                .                       .\n
      \               .                       .\n         bi = MD5(S + c(i-1))   c(i)
      = pi xor bi\n      The String will contain c(1)+c(2)+...+c(i) where + denotes\n
      \     concatenation.\n      On receipt, the process is reversed to yield the
      original\n      password.\n   A summary of the User-Password Attribute format
      is shown below.  The\n   fields are transmitted from left to right.\n    0                   1
      \                  2\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      2 for User-Password.\n   Length\n      At least 18 and no larger
      than 130.\n   String\n      The String field is between 16 and 128 octets long,
      inclusive.\n"
    title: 5.2.  User-Password
  - contents:
    - "5.3.  CHAP-Password\n   Description\n      This Attribute indicates the response
      value provided by a PPP\n      Challenge-Handshake Authentication Protocol (CHAP)
      user in\n      response to the challenge.  It is only used in Access-Request\n
      \     packets.\n      The CHAP challenge value is found in the CHAP-Challenge
      Attribute\n      (60) if present in the packet, otherwise in the Request\n      Authenticator
      field.\n   A summary of the CHAP-Password Attribute format is shown below.  The\n
      \  fields are transmitted from left to right.\n    0                   1                   2\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  CHAP Ident   |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      3 for CHAP-Password.\n   Length\n      19\n   CHAP Ident\n      This
      field is one octet, and contains the CHAP Identifier from the\n      user's
      CHAP Response.\n   String\n      The String field is 16 octets, and contains
      the CHAP Response from\n      the user.\n"
    title: 5.3.  CHAP-Password
  - contents:
    - "5.4.  NAS-IP-Address\n   Description\n      This Attribute indicates the identifying
      IP Address of the NAS\n      which is requesting authentication of the user,
      and SHOULD be\n      unique to the NAS within the scope of the RADIUS server.
      NAS-IP-\n      Address is only used in Access-Request packets.  Either NAS-IP-\n
      \     Address or NAS-Identifier MUST be present in an Access-Request\n      packet.\n
      \     Note that NAS-IP-Address MUST NOT be used to select the shared\n      secret
      used to authenticate the request.  The source IP address of\n      the Access-Request
      packet MUST be used to select the shared\n      secret.\n   A summary of the
      NAS-IP-Address Attribute format is shown below.  The\n   fields are transmitted
      from left to right.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |            Address\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           Address (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      4 for NAS-IP-Address.\n   Length\n      6\n   Address\n      The
      Address field is four octets.\n"
    title: 5.4.  NAS-IP-Address
  - contents:
    - "5.5.  NAS-Port\n   Description\n      This Attribute indicates the physical
      port number of the NAS which\n      is authenticating the user.  It is only
      used in Access-Request\n      packets.  Note that this is using \"port\" in
      its sense of a\n      physical connection on the NAS, not in the sense of a
      TCP or UDP\n      port number.  Either NAS-Port or NAS-Port-Type (61) or both
      SHOULD\n      be present in an Access-Request packet, if the NAS differentiates\n
      \     among its ports.\n   A summary of the NAS-Port Attribute format is shown
      below.  The\n   fields are transmitted from left to right.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |             Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Value (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      5 for NAS-Port.\n   Length\n      6\n   Value\n      The Value
      field is four octets.\n"
    title: 5.5.  NAS-Port
  - contents:
    - "5.6.  Service-Type\n   Description\n      This Attribute indicates the type
      of service the user has\n      requested, or the type of service to be provided.
      \ It MAY be used\n      in both Access-Request and Access-Accept packets.  A
      NAS is not\n      required to implement all of these service types, and MUST
      treat\n      unknown or unsupported Service-Types as though an Access-Reject\n
      \     had been received instead.\n   A summary of the Service-Type Attribute
      format is shown below.  The\n   fields are transmitted from left to right.\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |             Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Value (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      6 for Service-Type.\n   Length\n      6\n   Value\n      The
      Value field is four octets.\n       1      Login\n       2      Framed\n       3
      \     Callback Login\n       4      Callback Framed\n       5      Outbound\n
      \      6      Administrative\n       7      NAS Prompt\n       8      Authenticate
      Only\n       9      Callback NAS Prompt\n      10      Call Check\n      11
      \     Callback Administrative\n      The service types are defined as follows
      when used in an Access-\n      Accept.  When used in an Access-Request, they
      MAY be considered to\n      be a hint to the RADIUS server that the NAS has
      reason to believe\n      the user would prefer the kind of service indicated,
      but the\n      server is not required to honor the hint.\n      Login               The
      user should be connected to a host.\n      Framed              A Framed Protocol
      should be started for the\n                          User, such as PPP or SLIP.\n
      \     Callback Login      The user should be disconnected and called\n                          back,
      then connected to a host.\n      Callback Framed     The user should be disconnected
      and called\n                          back, then a Framed Protocol should be
      started\n                          for the User, such as PPP or SLIP.\n      Outbound
      \           The user should be granted access to outgoing\n                          devices.\n
      \     Administrative      The user should be granted access to the\n                          administrative
      interface to the NAS from which\n                          privileged commands
      can be executed.\n      NAS Prompt          The user should be provided a command
      prompt\n                          on the NAS from which non-privileged commands\n
      \                         can be executed.\n      Authenticate Only   Only Authentication
      is requested, and no\n                          authorization information needs
      to be returned\n                          in the Access-Accept (typically used
      by proxy\n                          servers rather than the NAS itself).\n      Callback
      NAS Prompt The user should be disconnected and called\n                          back,
      then provided a command prompt on the\n                          NAS from which
      non-privileged commands can be\n                          executed.\n      Call
      Check          Used by the NAS in an Access-Request packet to\n                          indicate
      that a call is being received and\n                          that the RADIUS
      server should send back an\n                          Access-Accept to answer
      the call, or an\n                          Access-Reject to not accept the call,\n
      \                         typically based on the Called-Station-Id or\n                          Calling-Station-Id
      attributes.  It is\n                          recommended that such Access-Requests
      use the\n                          value of Calling-Station-Id as the value
      of\n                          the User-Name.\n      Callback Administrative\n
      \                         The user should be disconnected and called\n                          back,
      then granted access to the\n                          administrative interface
      to the NAS from which\n                          privileged commands can be
      executed.\n"
    title: 5.6.  Service-Type
  - contents:
    - "5.7.  Framed-Protocol\n   Description\n      This Attribute indicates the framing
      to be used for framed access.\n      It MAY be used in both Access-Request and
      Access-Accept packets.\n   A summary of the Framed-Protocol Attribute format
      is shown below.\n   The fields are transmitted from left to right.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |             Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Value (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      7 for Framed-Protocol.\n   Length\n      6\n   Value\n      The
      Value field is four octets.\n      1      PPP\n      2      SLIP\n      3      AppleTalk
      Remote Access Protocol (ARAP)\n      4      Gandalf proprietary SingleLink/MultiLink
      protocol\n      5      Xylogics proprietary IPX/SLIP\n      6      X.75 Synchronous\n"
    title: 5.7.  Framed-Protocol
  - contents:
    - "5.8.  Framed-IP-Address\n   Description\n      This Attribute indicates the
      address to be configured for the\n      user.  It MAY be used in Access-Accept
      packets.  It MAY be used in\n      an Access-Request packet as a hint by the
      NAS to the server that\n      it would prefer that address, but the server is
      not required to\n      honor the hint.\n   A summary of the Framed-IP-Address
      Attribute format is shown below.\n   The fields are transmitted from left to
      right.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |            Address\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           Address (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      8 for Framed-IP-Address.\n   Length\n      6\n   Address\n      The
      Address field is four octets.  The value 0xFFFFFFFF indicates\n      that the
      NAS Should allow the user to select an address (e.g.\n      Negotiated).  The
      value 0xFFFFFFFE indicates that the NAS should\n      select an address for
      the user (e.g. Assigned from a pool of\n      addresses kept by the NAS).  Other
      valid values indicate that the\n      NAS should use that value as the user's
      IP address.\n"
    title: 5.8.  Framed-IP-Address
  - contents:
    - "5.9.  Framed-IP-Netmask\n   Description\n      This Attribute indicates the
      IP netmask to be configured for the\n      user when the user is a router to
      a network.  It MAY be used in\n      Access-Accept packets.  It MAY be used
      in an Access-Request packet\n      as a hint by the NAS to the server that it
      would prefer that\n      netmask, but the server is not required to honor the
      hint.\n   A summary of the Framed-IP-Netmask Attribute format is shown below.\n
      \  The fields are transmitted from left to right.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |            Address\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           Address (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      9 for Framed-IP-Netmask.\n   Length\n      6\n   Address\n      The
      Address field is four octets specifying the IP netmask of the\n      user.\n"
    title: 5.9.  Framed-IP-Netmask
  - contents:
    - "5.10.  Framed-Routing\n   Description\n      This Attribute indicates the routing
      method for the user, when the\n      user is a router to a network.  It is only
      used in Access-Accept\n      packets.\n   A summary of the Framed-Routing Attribute
      format is shown below.  The\n   fields are transmitted from left to right.\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |             Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Value (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      10 for Framed-Routing.\n   Length\n      6\n   Value\n      The
      Value field is four octets.\n       0      None\n       1      Send routing
      packets\n       2      Listen for routing packets\n       3      Send and Listen\n"
    title: 5.10.  Framed-Routing
  - contents:
    - "5.11.  Filter-Id\n   Description\n      This Attribute indicates the name of
      the filter list for this\n      user.  Zero or more Filter-Id attributes MAY
      be sent in an\n      Access-Accept packet.\n      Identifying a filter list
      by name allows the filter to be used on\n      different NASes without regard
      to filter-list implementation\n      details.\n   A summary of the Filter-Id
      Attribute format is shown below.  The\n   fields are transmitted from left to
      right.\n    0                   1                   2\n    0 1 2 3 4 5 6 7 8
      9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  Text ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      11 for Filter-Id.\n   Length\n      >= 3\n   Text\n      The
      Text field is one or more octets, and its contents are\n      implementation
      dependent.  It is intended to be human readable and\n      MUST NOT affect operation
      of the protocol.  It is recommended that\n      the message contain UTF-8 encoded
      10646 [7] characters.\n"
    title: 5.11.  Filter-Id
  - contents:
    - "5.12.  Framed-MTU\n   Description\n      This Attribute indicates the Maximum
      Transmission Unit to be\n      configured for the user, when it is not negotiated
      by some other\n      means (such as PPP).  It MAY be used in Access-Accept packets.
      \ It\n      MAY be used in an Access-Request packet as a hint by the NAS to\n
      \     the server that it would prefer that value, but the server is not\n      required
      to honor the hint.\n   A summary of the Framed-MTU Attribute format is shown
      below.  The\n   fields are transmitted from left to right.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |             Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Value (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      12 for Framed-MTU.\n   Length\n      6\n   Value\n      The Value
      field is four octets.  Despite the size of the field,\n      values range from
      64 to 65535.\n"
    title: 5.12.  Framed-MTU
  - contents:
    - "5.13.  Framed-Compression\n   Description\n      This Attribute indicates a
      compression protocol to be used for the\n      link.  It MAY be used in Access-Accept
      packets.  It MAY be used in\n      an Access-Request packet as a hint to the
      server that the NAS\n      would prefer to use that compression, but the server
      is not\n      required to honor the hint.\n      More than one compression protocol
      Attribute MAY be sent.  It is\n      the responsibility of the NAS to apply
      the proper compression\n      protocol to appropriate link traffic.\n   A summary
      of the Framed-Compression Attribute format is shown below.\n   The fields are
      transmitted from left to right.\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |             Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Value (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      13 for Framed-Compression.\n   Length\n      6\n   Value\n      The
      Value field is four octets.\n       0      None\n       1      VJ TCP/IP header
      compression [10]\n       2      IPX header compression\n       3      Stac-LZS
      compression\n"
    title: 5.13.  Framed-Compression
  - contents:
    - "5.14.  Login-IP-Host\n   Description\n      This Attribute indicates the system
      with which to connect the user,\n      when the Login-Service Attribute is included.
      \ It MAY be used in\n      Access-Accept packets.  It MAY be used in an Access-Request
      packet as\n      a hint to the server that the NAS would prefer to use that
      host, but\n      the server is not required to honor the hint.\n   A summary
      of the Login-IP-Host Attribute format is shown below.  The\n   fields are transmitted
      from left to right.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |            Address\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           Address (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      14 for Login-IP-Host.\n   Length\n      6\n   Address\n      The
      Address field is four octets.  The value 0xFFFFFFFF indicates\n      that the
      NAS SHOULD allow the user to select an address.  The\n      value 0 indicates
      that the NAS SHOULD select a host to connect the\n      user to.  Other values
      indicate the address the NAS SHOULD connect\n      the user to.\n"
    title: 5.14.  Login-IP-Host
  - contents:
    - "5.15.  Login-Service\n   Description\n      This Attribute indicates the service
      to use to connect the user to\n      the login host.  It is only used in Access-Accept
      packets.\n   A summary of the Login-Service Attribute format is shown below.
      \ The\n   fields are transmitted from left to right.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |             Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Value (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      15 for Login-Service.\n   Length\n      6\n   Value\n      The
      Value field is four octets.\n       0   Telnet\n       1   Rlogin\n       2
      \  TCP Clear\n       3   PortMaster (proprietary)\n       4   LAT\n       5
      \  X25-PAD\n       6   X25-T3POS\n       8   TCP Clear Quiet (suppresses any
      NAS-generated connect string)\n"
    title: 5.15.  Login-Service
  - contents:
    - "5.16.  Login-TCP-Port\n   Description\n      This Attribute indicates the TCP
      port with which the user is to be\n      connected, when the Login-Service Attribute
      is also present.  It\n      is only used in Access-Accept packets.\n   A summary
      of the Login-TCP-Port Attribute format is shown below.  The\n   fields are transmitted
      from left to right.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |             Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Value (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      16 for Login-TCP-Port.\n   Length\n      6\n   Value\n      The
      Value field is four octets.  Despite the size of the field,\n      values range
      from 0 to 65535.\n"
    title: 5.16.  Login-TCP-Port
  - contents:
    - "5.17.  (unassigned)\n   Description\n      ATTRIBUTE TYPE 17 HAS NOT BEEN ASSIGNED.\n"
    title: 5.17.  (unassigned)
  - contents:
    - "5.18.  Reply-Message\n   Description\n      This Attribute indicates text which
      MAY be displayed to the user.\n      When used in an Access-Accept, it is the
      success message.\n      When used in an Access-Reject, it is the failure message.
      \ It MAY\n      indicate a dialog message to prompt the user before another\n
      \     Access-Request attempt.\n      When used in an Access-Challenge, it MAY
      indicate a dialog message\n      to prompt the user for a response.\n      Multiple
      Reply-Message's MAY be included and if any are displayed,\n      they MUST be
      displayed in the same order as they appear in the\n      packet.\n   A summary
      of the Reply-Message Attribute format is shown below.  The\n   fields are transmitted
      from left to right.\n    0                   1                   2\n    0 1
      2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  Text ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      18 for Reply-Message.\n   Length\n      >= 3\n   Text\n      The
      Text field is one or more octets, and its contents are\n      implementation
      dependent.  It is intended to be human readable,\n      and MUST NOT affect
      operation of the protocol.  It is recommended\n      that the message contain
      UTF-8 encoded 10646 [7] characters.\n"
    title: 5.18.  Reply-Message
  - contents:
    - "5.19.  Callback-Number\n   Description\n      This Attribute indicates a dialing
      string to be used for callback.\n      It MAY be used in Access-Accept packets.
      \ It MAY be used in an\n      Access-Request packet as a hint to the server
      that a Callback\n      service is desired, but the server is not required to
      honor the\n      hint.\n   A summary of the Callback-Number Attribute format
      is shown below.\n   The fields are transmitted from left to right.\n    0                   1
      \                  2\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      19 for Callback-Number.\n   Length\n      >= 3\n   String\n      The
      String field is one or more octets.  The actual format of the\n      information
      is site or application specific, and a robust\n      implementation SHOULD support
      the field as undistinguished octets.\n      The codification of the range of
      allowed usage of this field is\n      outside the scope of this specification.\n"
    title: 5.19.  Callback-Number
  - contents:
    - "5.20.  Callback-Id\n   Description\n      This Attribute indicates the name
      of a place to be called, to be\n      interpreted by the NAS.  It MAY be used
      in Access-Accept packets.\n   A summary of the Callback-Id Attribute format
      is shown below.  The\n   fields are transmitted from left to right.\n    0                   1
      \                  2\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      20 for Callback-Id.\n   Length\n      >= 3\n   String\n      The
      String field is one or more octets.  The actual format of the\n      information
      is site or application specific, and a robust\n      implementation SHOULD support
      the field as undistinguished octets.\n      The codification of the range of
      allowed usage of this field is\n      outside the scope of this specification.\n"
    title: 5.20.  Callback-Id
  - contents:
    - "5.21.  (unassigned)\n   Description\n      ATTRIBUTE TYPE 21 HAS NOT BEEN ASSIGNED.\n"
    title: 5.21.  (unassigned)
  - contents:
    - "5.22.  Framed-Route\n   Description\n      This Attribute provides routing
      information to be configured for\n      the user on the NAS.  It is used in
      the Access-Accept packet and\n      can appear multiple times.\n   A summary
      of the Framed-Route Attribute format is shown below.  The\n   fields are transmitted
      from left to right.\n    0                   1                   2\n    0 1
      2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  Text ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      22 for Framed-Route.\n   Length\n      >= 3\n   Text\n      The
      Text field is one or more octets, and its contents are\n      implementation
      dependent.  It is intended to be human readable and\n      MUST NOT affect operation
      of the protocol.  It is recommended that\n      the message contain UTF-8 encoded
      10646 [7] characters.\n      For IP routes, it SHOULD contain a destination
      prefix in dotted\n      quad form optionally followed by a slash and a decimal
      length\n      specifier stating how many high order bits of the prefix to use.\n
      \     That is followed by a space, a gateway address in dotted quad\n      form,
      a space, and one or more metrics separated by spaces.  For\n      example, \"192.168.1.0/24
      192.168.1.1 1 2 -1 3 400\". The length\n      specifier may be omitted, in which
      case it defaults to 8 bits for\n      class A prefixes, 16 bits for class B
      prefixes, and 24 bits for\n      class C prefixes.  For example, \"192.168.1.0
      192.168.1.1 1\".\n      Whenever the gateway address is specified as \"0.0.0.0\"
      the IP\n      address of the user SHOULD be used as the gateway address.\n"
    title: 5.22.  Framed-Route
  - contents:
    - "5.23.  Framed-IPX-Network\n   Description\n      This Attribute indicates the
      IPX Network number to be configured\n      for the user.  It is used in Access-Accept
      packets.\n   A summary of the Framed-IPX-Network Attribute format is shown below.\n
      \  The fields are transmitted from left to right.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |             Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Value (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      23 for Framed-IPX-Network.\n   Length\n      6\n   Value\n      The
      Value field is four octets.  The value 0xFFFFFFFE indicates\n      that the
      NAS should select an IPX network for the user (e.g.\n      assigned from a pool
      of one or more IPX networks kept by the NAS).\n      Other values should be
      used as the IPX network for the link to the\n      user.\n"
    title: 5.23.  Framed-IPX-Network
  - contents:
    - "5.24.  State\n   Description\n      This Attribute is available to be sent
      by the server to the client\n      in an Access-Challenge and MUST be sent unmodified
      from the client\n      to the server in the new Access-Request reply to that
      challenge,\n      if any.\n      This Attribute is available to be sent by the
      server to the client\n      in an Access-Accept that also includes a Termination-Action\n
      \     Attribute with the value of RADIUS-Request.  If the NAS performs\n      the
      Termination-Action by sending a new Access-Request upon\n      termination of
      the current session, it MUST include the State\n      attribute unchanged in
      that Access-Request.\n      In either usage, the client MUST NOT interpret the
      attribute\n      locally.  A packet must have only zero or one State Attribute.\n
      \     Usage of the State Attribute is implementation dependent.\n   A summary
      of the State Attribute format is shown below.  The fields\n   are transmitted
      from left to right.\n    0                   1                   2\n    0 1
      2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      24 for State.\n   Length\n      >= 3\n   String\n      The String
      field is one or more octets.  The actual format of the\n      information is
      site or application specific, and a robust\n      implementation SHOULD support
      the field as undistinguished octets.\n      The codification of the range of
      allowed usage of this field is\n      outside the scope of this specification.\n"
    title: 5.24.  State
  - contents:
    - "5.25.  Class\n   Description\n      This Attribute is available to be sent
      by the server to the client\n      in an Access-Accept and SHOULD be sent unmodified
      by the client to\n      the accounting server as part of the Accounting-Request
      packet if\n      accounting is supported.  The client MUST NOT interpret the\n
      \     attribute locally.\n   A summary of the Class Attribute format is shown
      below.  The fields\n   are transmitted from left to right.\n    0                   1
      \                  2\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      25 for Class.\n   Length\n      >= 3\n   String\n      The String
      field is one or more octets.  The actual format of the\n      information is
      site or application specific, and a robust\n      implementation SHOULD support
      the field as undistinguished octets.\n      The codification of the range of
      allowed usage of this field is\n      outside the scope of this specification.\n"
    title: 5.25.  Class
  - contents:
    - "5.26.  Vendor-Specific\n   Description\n      This Attribute is available to
      allow vendors to support their own\n      extended Attributes not suitable for
      general usage.  It MUST not\n      affect the operation of the RADIUS protocol.\n
      \     Servers not equipped to interpret the vendor-specific information\n      sent
      by a client MUST ignore it (although it may be reported).\n      Clients which
      do not receive desired vendor-specific information\n      SHOULD make an attempt
      to operate without it, although they may do\n      so (and report they are doing
      so) in a degraded mode.\n   A summary of the Vendor-Specific Attribute format
      is shown below.\n   The fields are transmitted from left to right.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |  Length       |            Vendor-Id\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \       Vendor-Id (cont)           |  String...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      26 for Vendor-Specific.\n   Length\n      >= 7\n   Vendor-Id\n
      \     The high-order octet is 0 and the low-order 3 octets are the SMI\n      Network
      Management Private Enterprise Code of the Vendor in\n      network byte order,
      as defined in the \"Assigned Numbers\" RFC [6].\n   String\n      The String
      field is one or more octets.  The actual format of the\n      information is
      site or application specific, and a robust\n      implementation SHOULD support
      the field as undistinguished octets.\n      The codification of the range of
      allowed usage of this field is\n      outside the scope of this specification.\n
      \     It SHOULD be encoded as a sequence of vendor type / vendor length\n      /
      value fields, as follows.  The Attribute-Specific field is\n      dependent
      on the vendor's definition of that attribute.  An\n      example encoding of
      the Vendor-Specific attribute using this\n      method follows:\n       0                   1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     Type      |  Length       |            Vendor-Id\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \          Vendor-Id (cont)           | Vendor type   | Vendor length |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |    Attribute-Specific...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n      Multiple
      subattributes MAY be encoded within a single Vendor-\n      Specific attribute,
      although they do not have to be.\n"
    title: 5.26.  Vendor-Specific
  - contents:
    - "5.27.  Session-Timeout\n   Description\n      This Attribute sets the maximum
      number of seconds of service to be\n      provided to the user before termination
      of the session or prompt.\n      This Attribute is available to be sent by the
      server to the client\n      in an Access-Accept or Access-Challenge.\n   A summary
      of the Session-Timeout Attribute format is shown below.\n   The fields are transmitted
      from left to right.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |             Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Value (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      27 for Session-Timeout.\n   Length\n      6\n   Value\n      The
      field is 4 octets, containing a 32-bit unsigned integer with\n      the maximum
      number of seconds this user should be allowed to\n      remain connected by
      the NAS.\n"
    title: 5.27.  Session-Timeout
  - contents:
    - "5.28.  Idle-Timeout\n   Description\n      This Attribute sets the maximum
      number of consecutive seconds of\n      idle connection allowed to the user
      before termination of the\n      session or prompt.  This Attribute is available
      to be sent by the\n      server to the client in an Access-Accept or Access-Challenge.\n
      \  A summary of the Idle-Timeout Attribute format is shown below.  The\n   fields
      are transmitted from left to right.\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |             Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Value (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      28 for Idle-Timeout.\n   Length\n      6\n   Value\n      The
      field is 4 octets, containing a 32-bit unsigned integer with\n      the maximum
      number of consecutive seconds of idle time this user\n      should be permitted
      before being disconnected by the NAS.\n"
    title: 5.28.  Idle-Timeout
  - contents:
    - "5.29.  Termination-Action\n   Description\n      This Attribute indicates what
      action the NAS should take when the\n      specified service is completed.  It
      is only used in Access-Accept\n      packets.\n   A summary of the Termination-Action
      Attribute format is shown below.\n   The fields are transmitted from left to
      right.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |             Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Value (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      29 for Termination-Action.\n   Length\n      6\n   Value\n      The
      Value field is four octets.\n       0      Default\n       1      RADIUS-Request\n
      \     If the Value is set to RADIUS-Request, upon termination of the\n      specified
      service the NAS MAY send a new Access-Request to the\n      RADIUS server, including
      the State attribute if any.\n"
    title: 5.29.  Termination-Action
  - contents:
    - "5.30.  Called-Station-Id\n   Description\n      This Attribute allows the NAS
      to send in the Access-Request packet\n      the phone number that the user called,
      using Dialed Number\n      Identification (DNIS) or similar technology.  Note
      that this may\n      be different from the phone number the call comes in on.
      \ It is\n      only used in Access-Request packets.\n   A summary of the Called-Station-Id
      Attribute format is shown below.\n   The fields are transmitted from left to
      right.\n    0                   1                   2\n    0 1 2 3 4 5 6 7 8
      9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      30 for Called-Station-Id.\n   Length\n      >= 3\n   String\n
      \     The String field is one or more octets, containing the phone\n      number
      that the user's call came in on.\n      The actual format of the information
      is site or application\n      specific.  UTF-8 encoded 10646 [7] characters
      are recommended, but\n      a robust implementation SHOULD support the field
      as\n      undistinguished octets.\n      The codification of the range of allowed
      usage of this field is\n      outside the scope of this specification.\n"
    title: 5.30.  Called-Station-Id
  - contents:
    - "5.31.  Calling-Station-Id\n   Description\n      This Attribute allows the
      NAS to send in the Access-Request packet\n      the phone number that the call
      came from, using Automatic Number\n      Identification (ANI) or similar technology.
      \ It is only used in\n      Access-Request packets.\n   A summary of the Calling-Station-Id
      Attribute format is shown below.\n   The fields are transmitted from left to
      right.\n    0                   1                   2\n    0 1 2 3 4 5 6 7 8
      9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      31 for Calling-Station-Id.\n   Length\n      >= 3\n   String\n
      \     The String field is one or more octets, containing the phone\n      number
      that the user placed the call from.\n      The actual format of the information
      is site or application\n      specific.  UTF-8 encoded 10646 [7] characters
      are recommended, but\n      a robust implementation SHOULD support the field
      as\n      undistinguished octets.\n      The codification of the range of allowed
      usage of this field is\n      outside the scope of this specification.\n"
    title: 5.31.  Calling-Station-Id
  - contents:
    - "5.32.  NAS-Identifier\n   Description\n      This Attribute contains a string
      identifying the NAS originating\n      the Access-Request.  It is only used
      in Access-Request packets.\n      Either NAS-IP-Address or NAS-Identifier MUST
      be present in an\n      Access-Request packet.\n      Note that NAS-Identifier
      MUST NOT be used to select the shared\n      secret used to authenticate the
      request.  The source IP address of\n      the Access-Request packet MUST be
      used to select the shared\n      secret.\n   A summary of the NAS-Identifier
      Attribute format is shown below.  The\n   fields are transmitted from left to
      right.\n    0                   1                   2\n    0 1 2 3 4 5 6 7 8
      9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      32 for NAS-Identifier.\n   Length\n      >= 3\n   String\n      The
      String field is one or more octets, and should be unique to\n      the NAS within
      the scope of the RADIUS server.  For example, a\n      fully qualified domain
      name would be suitable as a NAS-Identifier.\n      The actual format of the
      information is site or application\n      specific, and a robust implementation
      SHOULD support the field as\n      undistinguished octets.\n      The codification
      of the range of allowed usage of this field is\n      outside the scope of this
      specification.\n"
    title: 5.32.  NAS-Identifier
  - contents:
    - "5.33.  Proxy-State\n   Description\n      This Attribute is available to be
      sent by a proxy server to\n      another server when forwarding an Access-Request
      and MUST be\n      returned unmodified in the Access-Accept, Access-Reject or\n
      \     Access-Challenge.  When the proxy server receives the response to\n      its
      request, it MUST remove its own Proxy-State (the last Proxy-\n      State in
      the packet) before forwarding the response to the NAS.\n      If a Proxy-State
      Attribute is added to a packet when forwarding\n      the packet, the Proxy-State
      Attribute MUST be added after any\n      existing Proxy-State attributes.\n
      \     The content of any Proxy-State other than the one added by the\n      current
      server should be treated as opaque octets and MUST NOT\n      affect operation
      of the protocol.\n      Usage of the Proxy-State Attribute is implementation
      dependent.  A\n      description of its function is outside the scope of this\n
      \     specification.\n   A summary of the Proxy-State Attribute format is shown
      below.  The\n   fields are transmitted from left to right.\n    0                   1
      \                  2\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      33 for Proxy-State.\n   Length\n      >= 3\n   String\n      The
      String field is one or more octets.  The actual format of the\n      information
      is site or application specific, and a robust\n      implementation SHOULD support
      the field as undistinguished octets.\n      The codification of the range of
      allowed usage of this field is\n      outside the scope of this specification.\n"
    title: 5.33.  Proxy-State
  - contents:
    - "5.34.  Login-LAT-Service\n   Description\n      This Attribute indicates the
      system with which the user is to be\n      connected by LAT.  It MAY be used
      in Access-Accept packets, but\n      only when LAT is specified as the Login-Service.
      \ It MAY be used\n      in an Access-Request packet as a hint to the server,
      but the\n      server is not required to honor the hint.\n      Administrators
      use the service attribute when dealing with\n      clustered systems, such as
      a VAX or Alpha cluster. In such an\n      environment several different time
      sharing hosts share the same\n      resources (disks, printers, etc.), and administrators
      often\n      configure each to offer access (service) to each of the shared\n
      \     resources. In this case, each host in the cluster advertises its\n      services
      through LAT broadcasts.\n      Sophisticated users often know which service
      providers (machines)\n      are faster and tend to use a node name when initiating
      a LAT\n      connection.  Alternately, some administrators want particular\n
      \     users to use certain machines as a primitive form of load\n      balancing
      (although LAT knows how to do load balancing itself).\n   A summary of the Login-LAT-Service
      Attribute format is shown below.\n   The fields are transmitted from left to
      right.\n    0                   1                   2\n    0 1 2 3 4 5 6 7 8
      9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      34 for Login-LAT-Service.\n   Length\n      >= 3\n   String\n
      \     The String field is one or more octets, and contains the identity\n      of
      the LAT service to use.  The LAT Architecture allows this\n      string to contain
      $ (dollar), - (hyphen), . (period), _\n      (underscore), numerics, upper and
      lower case alphabetics, and the\n      ISO Latin-1 character set extension [11].
      \ All LAT string\n      comparisons are case insensitive.\n"
    title: 5.34.  Login-LAT-Service
  - contents:
    - "5.35.  Login-LAT-Node\n   Description\n      This Attribute indicates the Node
      with which the user is to be\n      automatically connected by LAT.  It MAY
      be used in Access-Accept\n      packets, but only when LAT is specified as the
      Login-Service.  It\n      MAY be used in an Access-Request packet as a hint
      to the server,\n      but the server is not required to honor the hint.\n   A
      summary of the Login-LAT-Node Attribute format is shown below.  The\n   fields
      are transmitted from left to right.\n    0                   1                   2\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      35 for Login-LAT-Node.\n   Length\n      >= 3\n   String\n      The
      String field is one or more octets, and contains the identity\n      of the
      LAT Node to connect the user to.  The LAT Architecture\n      allows this string
      to contain $ (dollar), - (hyphen), . (period),\n      _ (underscore), numerics,
      upper and lower case alphabetics, and\n      the ISO Latin-1 character set extension.
      \ All LAT string\n      comparisons are case insensitive.\n"
    title: 5.35.  Login-LAT-Node
  - contents:
    - "5.36.  Login-LAT-Group\n   Description\n      This Attribute contains a string
      identifying the LAT group codes\n      which this user is authorized to use.
      \ It MAY be used in Access-\n      Accept packets, but only when LAT is specified
      as the Login-\n      Service.  It MAY be used in an Access-Request packet as
      a hint to\n      the server, but the server is not required to honor the hint.\n
      \     LAT supports 256 different group codes, which LAT uses as a form\n      of
      access rights.  LAT encodes the group codes as a 256 bit\n      bitmap.\n      Administrators
      can assign one or more of the group code bits at\n      the LAT service provider;
      it will only accept LAT connections that\n      have these group codes set in
      the bit map. The administrators\n      assign a bitmap of authorized group codes
      to each user; LAT gets\n      these from the operating system, and uses these
      in its requests to\n      the service providers.\n   A summary of the Login-LAT-Group
      Attribute format is shown below.\n   The fields are transmitted from left to
      right.\n    0                   1                   2\n    0 1 2 3 4 5 6 7 8
      9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      36 for Login-LAT-Group.\n   Length\n      34\n   String\n      The
      String field is a 32 octet bit map, most significant octet\n      first.  A
      robust implementation SHOULD support the field as\n      undistinguished octets.\n
      \     The codification of the range of allowed usage of this field is\n      outside
      the scope of this specification.\n"
    title: 5.36.  Login-LAT-Group
  - contents:
    - "5.37.  Framed-AppleTalk-Link\n   Description\n      This Attribute indicates
      the AppleTalk network number which should\n      be used for the serial link
      to the user, which is another\n      AppleTalk router.  It is only used in Access-Accept
      packets.  It\n      is never used when the user is not another router.\n   A
      summary of the Framed-AppleTalk-Link Attribute format is shown\n   below.  The
      fields are transmitted from left to right.\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |             Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Value (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      37 for Framed-AppleTalk-Link.\n   Length\n      6\n   Value\n
      \     The Value field is four octets.  Despite the size of the field,\n      values
      range from 0 to 65535.  The special value of 0 indicates\n      that this is
      an unnumbered serial link.  A value of 1-65535 means\n      that the serial
      line between the NAS and the user should be\n      assigned that value as an
      AppleTalk network number.\n"
    title: 5.37.  Framed-AppleTalk-Link
  - contents:
    - "5.38.  Framed-AppleTalk-Network\n   Description\n      This Attribute indicates
      the AppleTalk Network number which the\n      NAS should probe to allocate an
      AppleTalk node for the user.  It\n      is only used in Access-Accept packets.
      \ It is never used when the\n      user is another router.  Multiple instances
      of this Attribute\n      indicate that the NAS may probe using any of the network
      numbers\n      specified.\n   A summary of the Framed-AppleTalk-Network Attribute
      format is shown\n   below.  The fields are transmitted from left to right.\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |             Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Value (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      38 for Framed-AppleTalk-Network.\n   Length\n      6\n   Value\n
      \     The Value field is four octets.  Despite the size of the field,\n      values
      range from 0 to 65535.  The special value 0 indicates that\n      the NAS should
      assign a network for the user, using its default\n      cable range.  A value
      between 1 and 65535 (inclusive) indicates\n      the AppleTalk Network the NAS
      should probe to find an address for\n      the user.\n"
    title: 5.38.  Framed-AppleTalk-Network
  - contents:
    - "5.39.  Framed-AppleTalk-Zone\n   Description\n      This Attribute indicates
      the AppleTalk Default Zone to be used for\n      this user.  It is only used
      in Access-Accept packets.  Multiple\n      instances of this attribute in the
      same packet are not allowed.\n   A summary of the Framed-AppleTalk-Zone Attribute
      format is shown\n   below.  The fields are transmitted from left to right.\n
      \   0                   1                   2\n    0 1 2 3 4 5 6 7 8 9 0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      39 for Framed-AppleTalk-Zone.\n   Length\n      >= 3\n   String\n
      \     The name of the Default AppleTalk Zone to be used for this user.\n      A
      robust implementation SHOULD support the field as\n      undistinguished octets.\n
      \     The codification of the range of allowed usage of this field is\n      outside
      the scope of this specification.\n"
    title: 5.39.  Framed-AppleTalk-Zone
  - contents:
    - "5.40.  CHAP-Challenge\n   Description\n      This Attribute contains the CHAP
      Challenge sent by the NAS to a\n      PPP Challenge-Handshake Authentication
      Protocol (CHAP) user.  It\n      is only used in Access-Request packets.\n      If
      the CHAP challenge value is 16 octets long it MAY be placed in\n      the Request
      Authenticator field instead of using this attribute.\n   A summary of the CHAP-Challenge
      Attribute format is shown below.  The\n   fields are transmitted from left to
      right.\n    0                   1                   2\n    0 1 2 3 4 5 6 7 8
      9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |    String...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      60 for CHAP-Challenge.\n   Length\n      >= 7\n   String\n      The
      String field contains the CHAP Challenge.\n"
    title: 5.40.  CHAP-Challenge
  - contents:
    - "5.41.  NAS-Port-Type\n   Description\n      This Attribute indicates the type
      of the physical port of the NAS\n      which is authenticating the user.  It
      can be used instead of or in\n      addition to the NAS-Port (5) attribute.
      \ It is only used in\n      Access-Request packets.  Either NAS-Port (5) or
      NAS-Port-Type or\n      both SHOULD be present in an Access-Request packet,
      if the NAS\n      differentiates among its ports.\n   A summary of the NAS-Port-Type
      Attribute format is shown below.  The\n   fields are transmitted from left to
      right.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |             Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Value (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      61 for NAS-Port-Type.\n   Length\n      6\n   Value\n      The
      Value field is four octets.  \"Virtual\" refers to a connection\n      to the
      NAS via some transport protocol, instead of through a\n      physical port.
      \ For example, if a user telnetted into a NAS to\n      authenticate himself
      as an Outbound-User, the Access-Request might\n      include NAS-Port-Type =
      Virtual as a hint to the RADIUS server\n      that the user was not on a physical
      port.\n      0       Async\n      1       Sync\n      2       ISDN Sync\n      3
      \      ISDN Async V.120\n      4       ISDN Async V.110\n      5       Virtual\n
      \     6       PIAFS\n      7       HDLC Clear Channel\n      8       X.25\n
      \     9       X.75\n      10      G.3 Fax\n      11      SDSL - Symmetric DSL\n
      \     12      ADSL-CAP - Asymmetric DSL, Carrierless Amplitude Phase\n              Modulation\n
      \     13      ADSL-DMT - Asymmetric DSL, Discrete Multi-Tone\n      14      IDSL
      - ISDN Digital Subscriber Line\n      15      Ethernet\n      16      xDSL -
      Digital Subscriber Line of unknown type\n      17      Cable\n      18      Wireless
      - Other\n      19      Wireless - IEEE 802.11\n      PIAFS is a form of wireless
      ISDN commonly used in Japan, and\n      stands for PHS (Personal Handyphone
      System) Internet Access Forum\n      Standard (PIAFS).\n"
    title: 5.41.  NAS-Port-Type
  - contents:
    - "5.42.  Port-Limit\n   Description\n      This Attribute sets the maximum number
      of ports to be provided to\n      the user by the NAS.  This Attribute MAY be
      sent by the server to\n      the client in an Access-Accept packet.  It is intended
      for use in\n      conjunction with Multilink PPP [12] or similar uses.  It MAY
      also\n      be sent by the NAS to the server as a hint that that many ports\n
      \     are desired for use, but the server is not required to honor the\n      hint.\n
      \  A summary of the Port-Limit Attribute format is shown below.  The\n   fields
      are transmitted from left to right.\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |             Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Value (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      62 for Port-Limit.\n   Length\n      6\n   Value\n      The field
      is 4 octets, containing a 32-bit unsigned integer with\n      the maximum number
      of ports this user should be allowed to connect\n      to on the NAS.\n"
    title: 5.42.  Port-Limit
  - contents:
    - "5.43.  Login-LAT-Port\n   Description\n      This Attribute indicates the Port
      with which the user is to be\n      connected by LAT.  It MAY be used in Access-Accept
      packets, but\n      only when LAT is specified as the Login-Service.  It MAY
      be used\n      in an Access-Request packet as a hint to the server, but the\n
      \     server is not required to honor the hint.\n   A summary of the Login-LAT-Port
      Attribute format is shown below.  The\n   fields are transmitted from left to
      right.\n    0                   1                   2\n    0 1 2 3 4 5 6 7 8
      9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  |     Type      |    Length     |  String ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \  Type\n      63 for Login-LAT-Port.\n   Length\n      >= 3\n   String\n      The
      String field is one or more octets, and contains the identity\n      of the
      LAT port to use.  The LAT Architecture allows this string\n      to contain
      $ (dollar), - (hyphen), . (period), _ (underscore),\n      numerics, upper and
      lower case alphabetics, and the ISO Latin-1\n      character set extension.
      \ All LAT string comparisons are case\n      insensitive.\n"
    title: 5.43.  Login-LAT-Port
  - contents:
    - "5.44.  Table of Attributes\n   The following table provides a guide to which
      attributes may be found\n   in which kinds of packets, and in what quantity.\n
      \  Request   Accept   Reject   Challenge   #    Attribute\n   0-1       0-1
      \     0        0            1   User-Name\n   0-1       0        0        0
      \           2   User-Password [Note 1]\n   0-1       0        0        0            3
      \  CHAP-Password [Note 1]\n   0-1       0        0        0            4   NAS-IP-Address
      [Note 2]\n   0-1       0        0        0            5   NAS-Port\n   0-1       0-1
      \     0        0            6   Service-Type\n   0-1       0-1      0        0
      \           7   Framed-Protocol\n   0-1       0-1      0        0            8
      \  Framed-IP-Address\n   0-1       0-1      0        0            9   Framed-IP-Netmask\n
      \  0         0-1      0        0           10   Framed-Routing\n   0         0+
      \      0        0           11   Filter-Id\n   0-1       0-1      0        0
      \          12   Framed-MTU\n   0+        0+       0        0           13   Framed-Compression\n
      \  0+        0+       0        0           14   Login-IP-Host\n   0         0-1
      \     0        0           15   Login-Service\n   0         0-1      0        0
      \          16   Login-TCP-Port\n   0         0+       0+       0+          18
      \  Reply-Message\n   0-1       0-1      0        0           19   Callback-Number\n
      \  0         0-1      0        0           20   Callback-Id\n   0         0+
      \      0        0           22   Framed-Route\n   0         0-1      0        0
      \          23   Framed-IPX-Network\n   0-1       0-1      0        0-1         24
      \  State [Note 1]\n   0         0+       0        0           25   Class\n   0+
      \       0+       0        0+          26   Vendor-Specific\n   0         0-1
      \     0        0-1         27   Session-Timeout\n   0         0-1      0        0-1
      \        28   Idle-Timeout\n   0         0-1      0        0           29   Termination-Action\n
      \  0-1       0        0        0           30   Called-Station-Id\n   0-1       0
      \       0        0           31   Calling-Station-Id\n   0-1       0        0
      \       0           32   NAS-Identifier [Note 2]\n   0+        0+       0+       0+
      \         33   Proxy-State\n   0-1       0-1      0        0           34   Login-LAT-Service\n
      \  0-1       0-1      0        0           35   Login-LAT-Node\n   0-1       0-1
      \     0        0           36   Login-LAT-Group\n   0         0-1      0        0
      \          37   Framed-AppleTalk-Link\n   0         0+       0        0           38
      \  Framed-AppleTalk-Network\n   0         0-1      0        0           39   Framed-AppleTalk-Zone\n
      \  0-1       0        0        0           60   CHAP-Challenge\n   0-1       0
      \       0        0           61   NAS-Port-Type\n   0-1       0-1      0        0
      \          62   Port-Limit\n   0-1       0-1      0        0           63   Login-LAT-Port\n
      \  Request   Accept   Reject   Challenge   #    Attribute\n   [Note 1] An Access-Request
      MUST contain either a User-Password or a\n   CHAP-Password or State.  An Access-Request
      MUST NOT contain both a\n   User-Password and a CHAP-Password.  If future extensions
      allow other\n   kinds of authentication information to be conveyed, the attribute
      for\n   that can be used in an Access-Request instead of User-Password or\n
      \  CHAP-Password.\n   [Note 2] An Access-Request MUST contain either a NAS-IP-Address
      or a\n   NAS-Identifier (or both).\n   The following table defines the meaning
      of the above table entries.\n"
    - '0     This attribute MUST NOT be present in packet.

      '
    - '0+    Zero or more instances of this attribute MAY be present in packet.

      '
    - '0-1   Zero or one instance of this attribute MAY be present in packet.

      '
    - '1     Exactly one instance of this attribute MUST be present in packet.

      '
    title: 5.44.  Table of Attributes
  title: 5.  Attributes
- contents:
  - "6.  IANA Considerations\n   This section provides guidance to the Internet Assigned
    Numbers\n   Authority (IANA) regarding registration of values related to the\n
    \  RADIUS protocol, in accordance with BCP 26 [13].\n   There are three name spaces
    in RADIUS that require registration:\n   Packet Type Codes, Attribute Types, and
    Attribute Values (for certain\n   Attributes).\n   RADIUS is not intended as a
    general-purpose Network Access Server\n   (NAS) management protocol, and allocations
    should not be made for\n   purposes unrelated to Authentication, Authorization
    or Accounting.\n"
  - contents:
    - "6.1.  Definition of Terms\n   The following terms are used here with the meanings
      defined in\n   BCP 26: \"name space\", \"assigned value\", \"registration\".\n
      \  The following policies are used here with the meanings defined in\n   BCP
      26: \"Private Use\", \"First Come First Served\", \"Expert Review\",\n   \"Specification
      Required\", \"IETF Consensus\", \"Standards Action\".\n"
    title: 6.1.  Definition of Terms
  - contents:
    - "6.2.  Recommended Registration Policies\n   For registration requests where
      a Designated Expert should be\n   consulted, the IESG Area Director for Operations
      should appoint the\n   Designated Expert.\n   For registration requests requiring
      Expert Review, the ietf-radius\n   mailing list should be consulted.\n   Packet
      Type Codes have a range from 1 to 254, of which 1-5,11-13 have\n   been allocated.
      \ Because a new Packet Type has considerable impact on\n   interoperability,
      a new Packet Type Code requires Standards Action,\n   and should be allocated
      starting at 14.\n   Attribute Types have a range from 1 to 255, and are the
      scarcest\n   resource in RADIUS, thus must be allocated with care.  Attributes\n
      \  1-53,55,60-88,90-91 have been allocated, with 17 and 21 available for\n   re-use.
      \ Attributes 17, 21, 54, 56-59, 89, 92-191 may be allocated\n   following Expert
      Review, with Specification Required.  Release of\n   blocks of Attribute Types
      (more than 3 at a time for a given purpose)\n   should require IETF Consensus.
      \ It is recommended that attributes 17\n   and 21 be used only after all others
      are exhausted.\n   Note that RADIUS defines a mechanism for Vendor-Specific
      extensions\n   (Attribute 26) and the use of that should be encouraged instead
      of\n   allocation of global attribute types, for functions specific only to\n
      \  one vendor's implementation of RADIUS, where no interoperability is\n   deemed
      useful.\n   As stated in the \"Attributes\" section above:\n      \"[Attribute
      Type] Values 192-223 are reserved for experimental\n      use, values 224-240
      are reserved for implementation-specific use,\n      and values 241-255 are
      reserved and should not be used.\"\n   Therefore Attribute values 192-240 are
      considered Private Use, and\n   values 241-255 require Standards Action.\n   Certain
      attributes (for example, NAS-Port-Type) in RADIUS define a\n   list of values
      to correspond with various meanings.  There can be 4\n   billion (2^32) values
      for each attribute. Adding additional values to\n   the list can be done on
      a First Come, First Served basis by the IANA.\n"
    title: 6.2.  Recommended Registration Policies
  title: 6.  IANA Considerations
- contents:
  - "7.  Examples\n   A few examples are presented to illustrate the flow of packets
    and\n   use of typical attributes.  These examples are not intended to be\n   exhaustive,
    many others are possible.  Hexadecimal dumps of the\n   example packets are given
    in network byte order, using the shared\n   secret \"xyzzy5461\".\n"
  - contents:
    - "7.1.  User Telnet to Specified Host\n   The NAS at 192.168.1.16 sends an Access-Request
      UDP packet to the\n   RADIUS Server for a user named nemo logging in on port
      3 with\n   password \"arctangent\".\n   The Request Authenticator is a 16 octet
      random number generated by\n   the NAS.\n   The User-Password is 16 octets of
      password padded at end with nulls,\n   XORed with MD5(shared secret|Request
      Authenticator).\n      01 00 00 38 0f 40 3f 94 73 97 80 57 bd 83 d5 cb\n      98
      f4 22 7a 01 06 6e 65 6d 6f 02 12 0d be 70 8d\n      93 d4 13 ce 31 96 e4 3f
      78 2a 0a ee 04 06 c0 a8\n      01 10 05 06 00 00 00 03\n       1 Code = Access-Request
      (1)\n       1 ID = 0\n       2 Length = 56\n      16 Request Authenticator\n
      \     Attributes:\n       6  User-Name = \"nemo\"\n      18  User-Password\n
      \      6  NAS-IP-Address = 192.168.1.16\n       6  NAS-Port = 3\n   The RADIUS
      server authenticates nemo, and sends an Access-Accept UDP\n   packet to the
      NAS telling it to telnet nemo to host 192.168.1.3.\n   The Response Authenticator
      is a 16-octet MD5 checksum of the code\n   (2), id (0), Length (38), the Request
      Authenticator from above, the\n   attributes in this reply, and the shared secret.\n
      \     02 00 00 26 86 fe 22 0e 76 24 ba 2a 10 05 f6 bf\n      9b 55 e0 b2 06
      06 00 00 00 01 0f 06 00 00 00 00\n      0e 06 c0 a8 01 03\n       1 Code = Access-Accept
      (2)\n       1 ID = 0 (same as in Access-Request)\n       2 Length = 38\n      16
      Response Authenticator\n      Attributes:\n       6  Service-Type (6) = Login
      (1)\n       6  Login-Service (15) = Telnet (0)\n       6  Login-IP-Host (14)
      = 192.168.1.3\n"
    title: 7.1.  User Telnet to Specified Host
  - contents:
    - "7.2.  Framed User Authenticating with CHAP\n   The NAS at 192.168.1.16 sends
      an Access-Request UDP packet to the\n   RADIUS Server for a user named flopsy
      logging in on port 20 with PPP,\n   authenticating using CHAP.  The NAS sends
      along the Service-Type and\n   Framed-Protocol attributes as a hint to the RADIUS
      server that this\n   user is looking for PPP, although the NAS is not required
      to do so.\n   The Request Authenticator is a 16 octet random number generated
      by\n   the NAS, and is also used as the CHAP Challenge.\n   The CHAP-Password
      consists of a 1 octet CHAP ID, in this case 22,\n   followed by the 16 octet
      CHAP response.\n      01 01 00 47 2a ee 86 f0 8d 0d 55 96 9c a5 97 8e\n      0d
      33 67 a2 01 08 66 6c 6f 70 73 79 03 13 16 e9\n      75 57 c3 16 18 58 95 f2
      93 ff 63 44 07 72 75 04\n      06 c0 a8 01 10 05 06 00 00 00 14 06 06 00 00
      00\n      02 07 06 00 00 00 01\n       1 Code = 1     (Access-Request)\n       1
      ID = 1\n       2 Length = 71\n      16 Request Authenticator\n      Attributes:\n
      \      8  User-Name (1) = \"flopsy\"\n      19  CHAP-Password (3)\n       6
      \ NAS-IP-Address (4) = 192.168.1.16\n       6  NAS-Port (5) = 20\n       6  Service-Type
      (6) = Framed (2)\n       6  Framed-Protocol (7) = PPP (1)\n   The RADIUS server
      authenticates flopsy, and sends an Access-Accept\n   UDP packet to the NAS telling
      it to start PPP service and assign an\n   address for the user out of its dynamic
      address pool.\n   The Response Authenticator is a 16-octet MD5 checksum of the
      code\n   (2), id (1), Length (56), the Request Authenticator from above, the\n
      \  attributes in this reply, and the shared secret.\n      02 01 00 38 15 ef
      bc 7d ab 26 cf a3 dc 34 d9 c0\n      3c 86 01 a4 06 06 00 00 00 02 07 06 00
      00 00 01\n      08 06 ff ff ff fe 0a 06 00 00 00 02 0d 06 00 00\n      00 01
      0c 06 00 00 05 dc\n       1 Code = Access-Accept (2)\n       1 ID = 1 (same
      as in Access-Request)\n       2 Length = 56\n      16 Response Authenticator\n
      \     Attributes:\n       6  Service-Type (6) = Framed (2)\n       6  Framed-Protocol
      (7) = PPP (1)\n       6  Framed-IP-Address (8) = 255.255.255.254\n       6  Framed-Routing
      (10) = None (0)\n       6  Framed-Compression (13) = VJ TCP/IP Header Compression
      (1)\n       6  Framed-MTU (12) = 1500\n"
    title: 7.2.  Framed User Authenticating with CHAP
  - contents:
    - "7.3.  User with Challenge-Response card\n   The NAS at 192.168.1.16 sends an
      Access-Request UDP packet to the\n   RADIUS Server for a user named mopsy logging
      in on port 7.  The user\n   enters the dummy password \"challenge\" in this
      example.  The challenge\n   and response generated by the smart card for this
      example are\n   \"32769430\" and \"99101462\".\n   The Request Authenticator
      is a 16 octet random number generated by\n   the NAS.\n   The User-Password
      is 16 octets of password, in this case \"challenge\",\n   padded at the end
      with nulls, XORed with MD5(shared secret|Request\n   Authenticator).\n      01
      02 00 39 f3 a4 7a 1f 6a 6d 76 71 0b 94 7a b9\n      30 41 a0 39 01 07 6d 6f
      70 73 79 02 12 33 65 75\n      73 77 82 89 b5 70 88 5e 15 08 48 25 c5 04 06
      c0\n      a8 01 10 05 06 00 00 00 07\n       1 Code = Access-Request (1)\n       1
      ID = 2\n       2 Length = 57\n      16 Request Authenticator\n      Attributes:\n
      \      7 User-Name (1) = \"mopsy\"\n      18 User-Password (2)\n       6  NAS-IP-Address
      (4) = 192.168.1.16\n       6  NAS-Port (5) = 7\n   The RADIUS server decides
      to challenge mopsy, sending back a\n   challenge string and looking for a response.
      \ The RADIUS server\n   therefore and sends an Access-Challenge UDP packet to
      the NAS.\n   The Response Authenticator is a 16-octet MD5 checksum of the code\n
      \  (11), id (2), length (78), the Request Authenticator from above, the\n   attributes
      in this reply, and the shared secret.\n   The Reply-Message is \"Challenge 32769430.
      \ Enter response at prompt.\"\n   The State is a magic cookie to be returned
      along with user's\n   response; in this example 8 octets of data (33 32 37 36
      39 34 33 30\n   in hex).\n      0b 02 00 4e 36 f3 c8 76 4a e8 c7 11 57 40 3c
      0c\n      71 ff 9c 45 12 30 43 68 61 6c 6c 65 6e 67 65 20\n      33 32 37 36
      39 34 33 30 2e 20 20 45 6e 74 65 72\n      20 72 65 73 70 6f 6e 73 65 20 61
      74 20 70 72 6f\n      6d 70 74 2e 18 0a 33 32 37 36 39 34 33 30\n       1 Code
      = Access-Challenge (11)\n       1 ID = 2 (same as in Access-Request)\n       2
      Length = 78\n      16 Response Authenticator\n      Attributes:\n      48  Reply-Message
      (18)\n      10  State (24)\n   The user enters his response, and the NAS send
      a new Access-Request\n   with that response, and includes the State Attribute.\n
      \  The Request Authenticator is a new 16 octet random number.\n   The User-Password
      is 16 octets of the user's response, in this case\n   \"99101462\", padded at
      the end with nulls, XORed with MD5(shared\n   secret|Request Authenticator).\n
      \  The state is the magic cookie from the Access-Challenge packet,\n   unchanged.\n
      \     01 03 00 43 b1 22 55 6d 42 8a 13 d0 d6 25 38 07\n      c4 57 ec f0 01
      07 6d 6f 70 73 79 02 12 69 2c 1f\n      20 5f c0 81 b9 19 b9 51 95 f5 61 a5
      81 04 06 c0\n      a8 01 10 05 06 00 00 00 07 18 10 33 32 37 36 39\n      34
      33 30\n       1 Code = Access-Request (1)\n       1 ID = 3 (Note that this changes.)\n
      \      2 Length = 67\n      16 Request Authenticator\n      Attributes:\n       7
      \ User-Name = \"mopsy\"\n      18  User-Password\n       6  NAS-IP-Address (4)
      = 192.168.1.16\n       6  NAS-Port (5) = 7\n      10  State (24)\n   The Response
      was incorrect (for the sake of example), so the RADIUS\n   server tells the
      NAS to reject the login attempt.\n   The Response Authenticator is a 16 octet
      MD5 checksum of the code\n   (3), id (3), length(20), the Request Authenticator
      from above, the\n   attributes in this reply (in this case, none), and the shared
      secret.\n      03 03 00 14 a4 2f 4f ca 45 91 6c 4e 09 c8 34 0f\n      9e 74
      6a a0\n       1 Code = Access-Reject (3)\n       1 ID = 3 (same as in Access-Request)\n
      \      2 Length = 20\n      16 Response Authenticator\n      Attributes:\n         (none,
      although a Reply-Message could be sent)\n"
    title: 7.3.  User with Challenge-Response card
  title: 7.  Examples
- contents:
  - "8.  Security Considerations\n   Security issues are the primary topic of this
    document.\n   In practice, within or associated with each RADIUS server, there
    is a\n   database which associates \"user\" names with authentication\n   information
    (\"secrets\").  It is not anticipated that a particular\n   named user would be
    authenticated by multiple methods.  This would\n   make the user vulnerable to
    attacks which negotiate the least secure\n   method from among a set.  Instead,
    for each named user there should\n   be an indication of exactly one method used
    to authenticate that user\n   name.  If a user needs to make use of different
    authentication\n   methods under different circumstances, then distinct user names\n
    \  SHOULD be employed, each of which identifies exactly one\n   authentication
    method.\n   Passwords and other secrets should be stored at the respective ends\n
    \  such that access to them is as limited as possible.  Ideally, the\n   secrets
    should only be accessible to the process requiring access in\n   order to perform
    the authentication.\n   The secrets should be distributed with a mechanism that
    limits the\n   number of entities that handle (and thus gain knowledge of) the\n
    \  secret.  Ideally, no unauthorized person should ever gain knowledge\n   of
    the secrets.  It is possible to achieve this with SNMP Security\n   Protocols
    [14], but such a mechanism is outside the scope of this\n   specification.\n   Other
    distribution methods are currently undergoing research and\n   experimentation.
    \ The SNMP Security document [14] also has an\n   excellent overview of threats
    to network protocols.\n   The User-Password hiding mechanism described in Section
    5.2 has not\n   been subjected to significant amounts of cryptanalysis in the\n
    \  published literature.  Some in the IETF community are concerned that\n   this
    method might not provide sufficient confidentiality protection\n   [15] to passwords
    transmitted using RADIUS.  Users should evaluate\n   their threat environment
    and consider whether additional security\n   mechanisms should be employed.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  Change Log\n   The following changes have been made from RFC 2138:\n   Strings
    should use UTF-8 instead of US-ASCII and should be handled as\n   8-bit data.\n
    \  Integers and dates are now defined as 32 bit unsigned values.\n   Updated list
    of attributes that can be included in Access-Challenge\n   to be consistent with
    the table of attributes.\n   User-Name mentions Network Access Identifiers.\n
    \  User-Name may now be sent in Access-Accept for use with accounting\n   and
    Rlogin.\n   Values added for Service-Type, Login-Service, Framed-Protocol,\n   Framed-Compression,
    and NAS-Port-Type.\n   NAS-Port can now use all 32 bits.\n   Examples now include
    hexadecimal displays of the packets.\n   Source UDP port must be used in conjunction
    with the Request\n   Identifier when identifying duplicates.\n   Multiple subattributes
    may be allowed in a Vendor-Specific attribute.\n   An Access-Request is now required
    to contain either a NAS-IP-Address\n   or NAS-Identifier (or may contain both).\n
    \  Added notes under \"Operations\" with more information on proxy,\n   retransmissions,
    and keep-alives.\n   If multiple Attributes with the same Type are present, the
    order of\n   Attributes with the same Type MUST be preserved by any proxies.\n
    \  Clarified Proxy-State.\n   Clarified that Attributes must not depend on position
    within the\n   packet, as long as Attributes of the same type are kept in order.\n
    \  Added IANA Considerations section.\n   Updated section on \"Proxy\" under \"Operations\".\n
    \  Framed-MTU can now be sent in Access-Request as a hint.\n   Updated Security
    Considerations.\n   Text strings identified as a subset of string, to clarify
    use of\n   UTF-8.\n"
  title: 9.  Change Log
- contents:
  - "10.  References\n   [1]   Rigney, C., Rubens, A., Simpson, W. and S. Willens,
    \"Remote\n         Authentication Dial In User Service (RADIUS)\", RFC 2138, April\n
    \        1997.\n   [2]   Bradner, S., \"Key words for use in RFCs to Indicate
    Requirement\n         Levels\", BCP 14, RFC 2119, March, 1997.\n   [3]   Rivest,
    R. and S. Dusse, \"The MD5 Message-Digest Algorithm\",\n         RFC 1321, April
    1992.\n   [4]   Postel, J., \"User Datagram Protocol\", STD 6, RFC 768, August\n
    \        1980.\n   [5]   Rigney, C., \"RADIUS Accounting\", RFC 2866, June 2000.\n
    \  [6]   Reynolds, J. and J. Postel, \"Assigned Numbers\", STD 2, RFC\n         1700,
    October 1994.\n   [7]   Yergeau, F., \"UTF-8, a transformation format of ISO 10646\",
    RFC\n         2279, January 1998.\n   [8]   Aboba, B. and M. Beadles, \"The Network
    Access Identifier\", RFC\n         2486, January 1999.\n   [9]   Kaufman, C.,
    Perlman, R., and Speciner, M., \"Network Security:\n         Private Communications
    in a Public World\", Prentice Hall, March\n         1995, ISBN 0-13-061466-1.\n
    \  [10]  Jacobson, V., \"Compressing TCP/IP headers for low-speed serial\n         links\",
    RFC 1144, February 1990.\n   [11]  ISO 8859. International Standard -- Information
    Processing --\n         8-bit Single-Byte Coded Graphic Character Sets -- Part
    1: Latin\n         Alphabet No. 1, ISO 8859-1:1987.\n   [12]  Sklower, K., Lloyd,
    B., McGregor, G., Carr, D. and T.\n         Coradetti, \"The PPP Multilink Protocol
    (MP)\", RFC 1990, August\n         1996.\n   [13]  Alvestrand, H. and T. Narten,
    \"Guidelines for Writing an IANA\n         Considerations Section in RFCs\", BCP
    26, RFC 2434, October\n         1998.\n   [14]  Galvin, J., McCloghrie, K. and
    J. Davin, \"SNMP Security\n         Protocols\", RFC 1352, July 1992.\n   [15]
    \ Dobbertin, H., \"The Status of MD5 After a Recent Attack\",\n         CryptoBytes
    Vol.2 No.2, Summer 1996.\n"
  title: 10.  References
- contents:
  - "11.  Acknowledgements\n   RADIUS was originally developed by Steve Willens of
    Livingston\n   Enterprises for their PortMaster series of Network Access Servers.\n"
  title: 11.  Acknowledgements
- contents:
  - "12.  Chair's Address\n   The working group can be contacted via the current chair:\n
    \  Carl Rigney\n   Livingston Enterprises\n   4464 Willow Road\n   Pleasanton,
    California  94588\n   Phone: +1 925 737 2100\n   EMail: cdr@telemancy.com\n"
  title: 12.  Chair's Address
- contents:
  - "13.  Authors' Addresses\n   Questions about this memo can also be directed to:\n
    \  Carl Rigney\n   Livingston Enterprises\n   4464 Willow Road\n   Pleasanton,
    California  94588\n   Phone: +1 925 737 2100\n   EMail: cdr@telemancy.com\n   Allan
    C. Rubens\n   Merit Network, Inc.\n   4251 Plymouth Road\n   Ann Arbor, Michigan
    \ 48105-2785\n   EMail: acr@merit.edu\n   William Allen Simpson\n   Daydreamer\n
    \  Computer Systems Consulting Services\n   1384 Fontaine\n   Madison Heights,
    Michigan  48071\n   EMail: wsimpson@greendragon.com\n   Steve Willens\n   Livingston
    Enterprises\n   4464 Willow Road\n   Pleasanton, California  94588\n   EMail:
    steve@livingston.com\n"
  title: 13.  Authors' Addresses
- contents:
  - "14.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 14.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
