- title: __initial_text__
  contents:
  - "                     FTP Server-Server Interaction\n   The current ARPANET File\
    \ Transfer Protocol as specified by RFC 354\n   and updated by RFC's 385, 414\
    \ and 418 allows for \"third host\"\n   participation but does not specify a mechanism\
    \ by which the process\n   at the third site may be the FTP server at that site.\
    \  This RFC\n   suggests a simple extension to FTP which would allow an FTP user\n\
    \   process at one site to arrange for FTP server processes at other\n   sites\
    \ to act cooperatively on its behalf.\n   Such server-server cooperation may appear\
    \ to be of limited utility.\n   Consider, however, the requirements placed on\
    \ FTP by a Resource\n   Sharing Executive (RSEXEC) program -  a command language\
    \ interpreter\n   which extends the range of a user's commands beyond the boundaries\
    \ of\n   the user's local system.  Among its services such as RSEXEC could\n \
    \  provide its users with a network-wide file system, perhaps allowing,\n   in\
    \ certain contexts, the use of partially qualified pathnames which\n   omit site\
    \ specification.  Consider, for example the response of the\n   RSEXEC to the\
    \ user command:\n      APPEND (FILE) PROG1.PL1 (TO FILE) PROG2.PL1\n   for the\
    \ case in which the two files are at different sites (PROG1.PL1\n   at SITE1,\
    \ PROG2.PL1 at SITE2) neither of which is the user's site.  A\n   straightforward\
    \ way for the RSEXEC to \"perform\" the APPEND would be\n   to establish FTP control\
    \ connections to the FTP servers at SITE1 and\n   at SITE2, instruct the server\
    \ at SITE1 to\n      RETR PROG1.PL1\n   using data connection C and instruct the\
    \ server at SITE2 to\n      APPE PROG2.PL1\n   using the same data connection\
    \ C.\n   Unfortunately, at present there is no way within FTP to arrange for\n\
    \   such server-server cooperation.  This is due primarily to the lack of\n  \
    \ symmetry in the way that FTP treats the ends of data connections\n   during\
    \ connection establishment.  It specifies one end to be the\n   \"server\" end,\
    \ the other to be the \"user\" end and specifies different\n   means for establishing\
    \ the connections from the two ends.\n   FTP could be modified to support server-server\
    \ interaction by:\n      1. making the establishment of data connections symmetric,\
    \ or;\n      2. providing a mechanism for instructing a server to establish its\n\
    \         end of a data connection as if it were a user.\n   The second alternative\
    \ probably requires fewer changes to the\n   existing protocol.\n   The following\
    \ proposed extension to FTP uses the second method.   It\n   involves the addition\
    \ of a single new command (LSTN) and minor\n   modifications to several existing\
    \ commands (SOCK, APPE, RETR, STOR):\n   a. The LSTN (Listen) command requests\
    \ the FTP server to allocate a\n      socket for use as a data connection.  To\
    \ establish the\n      corresponding data connection the server is to \"listen\"\
    \ on the\n      socket allocated when an appropriate transfer command is given.\n\
    \      syntax: LSTN <direction> CRLF\n         where <direction> is either \"\
    S\" for send or \"R\" for receive.\n      The server responds to LSTN by:\n  \
    \       1. refusing to allocate such a socket, or:\n         2. sending the user\
    \ the number of the socket allocated (the 255\n            FTP server data socket\
    \ reply could be used for this\n            purpose).\n   b. Receipt of an appropriate\
    \ STOR, RETR or APPE command following a\n      successful LSTN command causes\
    \ the server to \"listen\" for an RFC\n      for the socket allocated.   Data\
    \ transfer may proceed after the\n      server receives an RFC for the socket\
    \ and responds with a matching\n      RFC.   Once established, a data connection\
    \ corresponding to a\n      successful LSTN command has the same duration as one\
    \ established\n      in the usual way.\n   c. The user may insure the security\
    \ of his data transfer by using the\n      SOCK command to instruct the server\
    \ to accept an RFC for the\n      listening socket only if it is from a specified\
    \ host and socket.\n   d. The SOCK command is modified in two ways:\n      1.\
    \ On success the reply must be the 255 FTP server data socket\n         reply;\
    \ that is, the 255 reply can not be deferred until receipt\n         of a data\
    \ transfer command.  (This is to allow the user to\n         transmit the server's\
    \ response to the program at the third\n         site; see the example below.)\n\
    \      2. After a LSTN command the SOCK command is to be interpreted by\n    \
    \     the server as specification of the acceptable RFC for\n         subsequent\
    \ data transfer command that use the allocated socket.\n   With this extension\
    \ to FTP, the RSEXEC program could accomplish the\n   APPEND in the example above\
    \ as follows:\n        to SITE1:                       to SITE2:\n           .\
    \                                .\n           .                             \
    \   .\n           .                                .\n   1.                  \
    \                 LSTN R CRLF\n                                        (let X\
    \ = socket\n                                         allocated)\n   2.   SOCK\
    \ SITE2,X CRLF\n        (let Y = socket in 255\n         reply from SITE1)\n \
    \  3.                                   SOCK SITE1,Y CRLF\n   4.  RETR PROG1.PL1\
    \                   APPE PROG2.Pl1 CRLF\n          .                         \
    \        .\n          .                                 .\n          .       \
    \                          .\n   In closing it is appropriate to note that an\
    \ experimental RSEXEC\n   program of the sort suggested above has been operational\
    \ on TENEXs\n   for about 8 months.  It currently uses a private, resource sharing\n\
    \   protocol (RSP) that includes file transfer operations.  RSP supports\n   server-server\
    \ cooperation; in RSP data connections are established in\n   a symmetric way\
    \ (alternative 1 above).\n         [ This RFC was put into machine readable form\
    \ for entry ]\n         [ into the online RFC archives by Mirsad Todorovac 5/98\
    \ ]\n"
