- contents:
  - '                   Secure Shell Public Key Subsystem

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   Secure Shell defines a user authentication mechanism that is based
    on\n   public keys, but does not define any mechanism for key distribution.\n
    \  No common key management solution exists in current implementations.\n   This
    document describes a protocol that can be used to configure\n   public keys in
    an implementation-independent fashion, allowing client\n   software to take on
    the burden of this configuration.\n   The Public Key Subsystem provides a server-independent
    mechanism for\n   clients to add public keys, remove public keys, and list the
    current\n   public keys known by the server.  Rights to manage public keys are\n
    \  specific and limited to the authenticated user.\n   A public key may also be
    associated with various restrictions,\n   including a mandatory command or subsystem.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n   3.  Public Key Subsystem Overview  . . . . . . . . . . . . . .
    . .  3\n     3.1.  Opening the Public Key Subsystem . . . . . . . . . . . . .
    \ 4\n     3.2.  Requests and Responses . . . . . . . . . . . . . . . . . .  5\n
    \    3.3.  The Status Message . . . . . . . . . . . . . . . . . . . .  5\n       3.3.1.
    \ Status Codes . . . . . . . . . . . . . . . . . . . . .  5\n     3.4.  The Version
    Packet . . . . . . . . . . . . . . . . . . . .  6\n   4.  Public Key Subsystem
    Operations  . . . . . . . . . . . . . . .  7\n     4.1.  Adding a Public Key  .
    . . . . . . . . . . . . . . . . . .  7\n     4.2.  Removing a Public Key  . .
    . . . . . . . . . . . . . . . . 10\n     4.3.  Listing Public Keys  . . . . .
    . . . . . . . . . . . . . . 10\n     4.4.  Listing Server Capabilities  . . .
    . . . . . . . . . . . . 10\n   5.  Security Considerations  . . . . . . . . .
    . . . . . . . . . . 11\n   6.  IANA Considerations  . . . . . . . . . . . . .
    . . . . . . . . 12\n     6.1.  Registrations  . . . . . . . . . . . . . . . .
    . . . . . . 12\n     6.2.  Names  . . . . . . . . . . . . . . . . . . . . . .
    . . . . 12\n       6.2.1.  Conventions for Names  . . . . . . . . . . . . . .
    . . 12\n       6.2.2.  Future Assignments of Names  . . . . . . . . . . . . .
    13\n     6.3.  Public Key Subsystem Request Names . . . . . . . . . . . . 13\n
    \    6.4.  Public Key Subsystem Response Names  . . . . . . . . . . . 13\n     6.5.
    \ Public Key Subsystem Attribute Names . . . . . . . . . . . 13\n     6.6.  Public
    Key Subsystem Status Codes  . . . . . . . . . . . . 14\n       6.6.1.  Conventions
    \ . . . . . . . . . . . . . . . . . . . . . 14\n       6.6.2.  Initial Assignments
    \ . . . . . . . . . . . . . . . . . 14\n       6.6.3.  Future Assignments . .
    . . . . . . . . . . . . . . . . 15\n   7.  References . . . . . . . . . . . .
    . . . . . . . . . . . . . . 15\n     7.1.  Normative References . . . . . . .
    . . . . . . . . . . . . 15\n     7.2.  Informative References . . . . . . . .
    . . . . . . . . . . 15\n   8.  Acknowledgements . . . . . . . . . . . . . . .
    . . . . . . . . 16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Secure Shell (SSH) is a protocol for secure remote login
    and other\n   secure network services over an insecure network.  Secure Shell\n
    \  defines a user authentication mechanism that is based on public keys,\n   but
    does not define any mechanism for key distribution.  Common\n   practice is to
    authenticate once with password authentication and\n   transfer the public key
    to the server.  However, to date no two\n   implementations use the same mechanism
    to configure a public key for\n   use.\n   This document describes a subsystem
    that can be used to configure\n   public keys in an implementation-independent
    fashion.  This approach\n   allows client software to take on the burden of this
    configuration.\n   The Public Key Subsystem protocol is designed for extreme simplicity\n
    \  in implementation.  It is not intended as a Public Key Infrastructure\n   for
    X.509 Certificates (PKIX) replacement.\n   The Secure Shell Public Key Subsystem
    has been designed to run on top\n   of the Secure Shell transport layer [2] and
    user authentication\n   protocols [3].  It provides a simple mechanism for the
    client to\n   manage public keys on the server.\n   This document should be read
    only after reading the Secure Shell\n   architecture [1] and Secure Shell connection
    [4] documents.\n   This protocol is intended to be used from the Secure Shell
    Connection\n   Protocol [4] as a subsystem, as described in the section \"Starting
    a\n   Shell or a Command\".  The subsystem name used with this protocol is\n   \"publickey\".\n
    \  This protocol requires that the user be able to authenticate in some\n   fashion
    before it can be used.  If password authentication is used,\n   servers SHOULD
    provide a configuration option to disable the use of\n   password authentication
    after the first public key is added.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [5].\n"
  title: 2.  Terminology
- contents:
  - "3.  Public Key Subsystem Overview\n   The Public Key Subsystem provides a server-independent
    mechanism for\n   clients to add public keys, remove public keys, and list the
    current\n   public keys known by the server.  The subsystem name is \"publickey\".\n
    \  The public keys added, removed, and listed using this protocol are\n   specific
    and limited to those of the authenticated user.\n   The operations to add, remove,
    and list the authenticated user's\n   public keys are performed as request packets
    sent to the server.  The\n   server sends response packets that indicate success
    or failure as\n   well as provide specific response data.\n   The format of public
    key blobs are detailed in Section 6.6, \"Public\n   Key Algorithms\" of the SSH
    Transport Protocol document [2].\n"
  - contents:
    - "3.1.  Opening the Public Key Subsystem\n   The Public Key Subsystem is started
      by a client sending an\n   SSH_MSG_CHANNEL_REQUEST over an existing session's
      channel.\n   The details of how a session is opened are described in the SSH\n
      \  Connection Protocol document [4] in the section \"Opening a Session\".\n
      \  To open the Public Key Subsystem, the client sends:\n        byte      SSH_MSG_CHANNEL_REQUEST\n
      \       uint32    recipient channel\n        string    \"subsystem\"\n        boolean
      \  want reply\n        string    \"publickey\"\n   Client implementations SHOULD
      reject this request; it is normally\n   sent only by the client.\n   If want
      reply is TRUE, the server MUST respond with\n   SSH_MSG_CHANNEL_SUCCESS if the
      Public Key Subsystem was successfully\n   started, or SSH_MSG_CHANNEL_FAILURE
      if the server failed to start or\n   does not support the Public Key Subsystem.\n
      \  The server SHOULD respond with SSH_MSG_CHANNEL_FAILURE if the user is\n   not
      allowed access to the Public Key Subsystem (for example, because\n   the user
      authenticated with a restricted public key).\n   It is RECOMMENDED that clients
      request and check the reply for this\n   request.\n"
    title: 3.1.  Opening the Public Key Subsystem
  - contents:
    - "3.2.  Requests and Responses\n   All Public Key Subsystem requests and responses
      are sent in the\n   following form:\n        uint32    length\n        string
      \   name\n        ... request/response specific data follows\n   The length
      field describes the length of the name field and of the\n   request/response-specific
      data, but does not include the length of\n   the length field itself.  The client
      MUST receive acknowledgement of\n   each request prior to sending a new request.\n
      \  The version packet, as well as all requests and responses described\n   in
      Section 4, are a description of the 'name' field and the data part\n   of the
      packet.\n"
    title: 3.2.  Requests and Responses
  - contents:
    - "3.3.  The Status Message\n   A request is acknowledged by sending a status
      packet.  If there is\n   data in response to the request, the status packet
      is sent after all\n   data has been sent.\n        string    \"status\"\n        uint32
      \   status code\n        string    description [7]\n        string    language
      tag [6]\n   A status message MUST be sent for any unrecognized packets, and
      the\n   request SHOULD NOT close the subsystem.\n"
    - contents:
      - "3.3.1.  Status Codes\n   The status code gives the status in a more machine-readable
        format\n   (suitable for localization), and can have the following values:\n
        \       SSH_PUBLICKEY_SUCCESS                      0\n        SSH_PUBLICKEY_ACCESS_DENIED
        \               1\n        SSH_PUBLICKEY_STORAGE_EXCEEDED             2\n
        \       SSH_PUBLICKEY_VERSION_NOT_SUPPORTED        3\n        SSH_PUBLICKEY_KEY_NOT_FOUND
        \               4\n        SSH_PUBLICKEY_KEY_NOT_SUPPORTED            5\n
        \       SSH_PUBLICKEY_KEY_ALREADY_PRESENT          6\n        SSH_PUBLICKEY_GENERAL_FAILURE
        \             7\n        SSH_PUBLICKEY_REQUEST_NOT_SUPPORTED        8\n        SSH_PUBLICKEY_ATTRIBUTE_NOT_SUPPORTED
        \     9\n   If a request completed successfully, the server MUST send the
        status\n   code SSH_PUBLICKEY_SUCCESS.  The meaning of the failure codes is
        as\n   implied by their names.\n"
      title: 3.3.1.  Status Codes
    title: 3.3.  The Status Message
  - contents:
    - "3.4.  The Version Packet\n   Both sides MUST start a connection by sending
      a version packet that\n   indicates the version of the protocol they are using.\n
      \       string \"version\"\n        uint32 protocol-version-number\n   This
      document describes version 2 of the protocol.  Version 1 was\n   used by an
      early draft of this document.  The version number was\n   incremented after
      changes in the handling of status packets.\n   Both sides send the highest version
      that they implement.  The lower\n   of the version numbers is the version of
      the protocol to use.  If\n   either side can't support the lower version, it
      should close the\n   subsystem and notify the other side by sending an\n   SSH_MSG_CHANNEL_CLOSE
      message.  Before closing the subsystem, a\n   status message with the status
      SSH_PUBLICKEY_VERSION_NOT_SUPPORTED\n   SHOULD be sent.  Note that, normally,
      status messages are only sent\n   by the server (in response to requests from
      the client).  This is the\n   only occasion on which the client sends a status
      message.\n   Both sides MUST wait to receive this version before continuing.
      \ The\n   \"version\" packet MUST NOT be sent again after this initial exchange.\n
      \  The SSH_PUBLICKEY_VERSION_NOT_SUPPORTED status code must not be sent\n   in
      response to any other request.\n   Implementations MAY use the first 15 bytes
      of the version packet as a\n   \"magic cookie\" to avoid processing spurious
      output from the user's\n   shell (as described in Section 6.5 of [4]).  These
      bytes will always\n   be:\n   0x00 0x00 0x00 0x0F 0x00 0x00 0x00 0x07 0x76 0x65
      0x72 0x73 0x69 0x6F\n   0x6E\n"
    title: 3.4.  The Version Packet
  title: 3.  Public Key Subsystem Overview
- contents:
  - "4.  Public Key Subsystem Operations\n   The Public Key Subsystem currently defines
    four operations: add,\n   remove, list, and listattributes.\n"
  - contents:
    - "4.1.  Adding a Public Key\n   If the client wishes to add a public key, the
      client sends:\n        string    \"add\"\n        string    public key algorithm
      name\n        string    public key blob\n        boolean   overwrite\n        uint32
      \   attribute-count\n         string    attrib-name\n         string    attrib-value\n
      \        bool      critical\n        repeated attribute-count times\n   The
      server MUST attempt to store the public key for the user in the\n   appropriate
      location so the public key can be used for subsequent\n   public key authentications.
      \ If the overwrite field is false and the\n   specified key already exists,
      the server MUST return\n   SSH_PUBLICKEY_KEY_ALREADY_PRESENT.  If the server
      returns this, the\n   client SHOULD provide an option to the user to overwrite
      the key.  If\n   the overwrite field is true and the specified key already exists,
      but\n   cannot be overwritten, the server MUST return\n   SSH_PUBLICKEY_ACCESS_DENIED.\n
      \  Attribute names are defined following the same scheme laid out for\n   algorithm
      names in [1].  If the server does not implement a critical\n   attribute, it
      MUST fail the add, with the status code\n   SSH_PUBLICKEY_ATTRIBUTE_NOT_SUPPORTED.
      \ For the purposes of a\n   critical attribute, mere storage of the attribute
      is not sufficient\n   -- rather, the server must understand and implement the
      intent of the\n   attribute.\n   The following attributes are currently defined:\n
      \  \"comment\"\n   The value of the comment attribute contains user-specified
      text about\n   the public key.  The server SHOULD make every effort to preserve
      this\n   value and return it with the key during any subsequent list\n   operation.
      \ The server MUST NOT attempt to interpret or act upon the\n   content of the
      comment field in any way.  The comment attribute must\n   be specified in UTF-8
      format [7].\n   The comment field is useful so the user can identify the key
      without\n   resorting to comparing its fingerprint.  This attribute SHOULD NOT
      be\n   critical.\n   \"comment-language\"\n   If this attribute is specified,
      it MUST immediately follow a\n   \"comment\" attribute and specify the language
      for that attribute [6].\n   The client MAY specify more than one comment if
      it additionally\n   specifies a different language for each of those comments.
      \ The\n   server SHOULD attempt to store each comment with its language\n   attribute.
      \ This attribute SHOULD NOT be critical.\n   \"command-override\"\n   \"command-override\"
      specifies a command to be executed when this key\n   is in use.  The command
      should be executed by the server when it\n   receives an \"exec\" or \"shell\"
      request from the client, in place of\n   the command or shell which would otherwise
      have been executed as a\n   result of that request.  If the command string is
      empty, both \"exec\"\n   and \"shell\" requests should be denied.  If no \"command-override\"\n
      \  attribute is specified, all \"exec\" and \"shell\" requests should be\n   permitted
      (as long as they satisfy other security or authorization\n   checks the server
      may perform).  This attribute SHOULD be critical.\n   \"subsystem\"\n   \"subsystem\"
      specifies a comma-separated list of subsystems that may\n   be started (using
      a \"subsystem\" request) when this key is in use.\n   This attribute SHOULD
      be critical.  If the value is empty, no\n   subsystems may be started.  If the
      \"subsystem\" attribute is not\n   specified, no restrictions are placed on
      which subsystems may be\n   started when authenticated using this key.\n   \"x11\"\n
      \  \"x11\" specifies that X11 forwarding may not be performed when this\n   key
      is in use.  The attribute-value field SHOULD be empty for this\n   attribute.
      \ This attribute SHOULD be critical.\n   \"shell\"\n   \"shell\" specifies that
      session channel \"shell\" requests should be\n   denied when this key is in
      use.  The attribute-value field SHOULD be\n   empty for this attribute.  This
      attribute SHOULD be critical.\n   \"exec\"\n   \"exec\" specifies that session
      channel \"exec\" requests should be\n   denied when this key is in use.  The
      attribute-value field SHOULD be\n   empty for this attribute.  This attribute
      SHOULD be critical.\n   \"agent\"\n   \"agent\" specifies that session channel
      \"auth-agent-req\" requests\n   should be denied when this key is in use.  The
      attribute-value field\n   SHOULD be empty for this attribute.  This attribute
      SHOULD be\n   critical.\n   \"env\"\n   \"env\" specifies that session channel
      \"env\" requests should be denied\n   when this key is in use.  The attribute-value
      field SHOULD be empty\n   for this attribute.  This attribute SHOULD be critical.\n
      \  \"from\"\n   \"from\" specifies a comma-separated list of hosts from which
      the key\n   may be used.  If a host not in this list attempts to use this key
      for\n   authorization purposes, the authorization attempt MUST be denied.\n
      \  The server SHOULD make a log entry regarding this.  The server MAY\n   provide
      a method for administrators to disallow the appearance of a\n   host in this
      list.  The server should use whatever method is\n   appropriate for its platform
      to identify the host -- e.g., for IP-\n   based networks, checking the IP address
      or performing a reverse DNS\n   lookup.  For IP-based networks, it is anticipated
      that each element\n   of the \"from\" parameter will take the form of a specific
      IP address\n   or hostname.\n   \"port-forward\"\n   \"port-forward\" specifies
      that no \"direct-tcpip\" requests should be\n   accepted, except those to hosts
      specified in the comma-separated list\n   supplied as a value to this attribute.
      \ If the value of this\n   attribute is empty, all \"direct-tcpip\" requests
      should be refused\n   when using this key.  This attribute SHOULD be critical.\n
      \  \"reverse-forward\"\n   \"reverse-forward\" specifies that no \"tcpip-forward\"
      requests should\n   be accepted, except for the port numbers in the comma-separated
      list\n   supplied as a value to this attribute.  If the value of this\n   attribute
      is empty, all \"tcpip-forward\" requests should be refused\n   when using this
      key.  This attribute SHOULD be critical.\n   In addition to the attributes specified
      by the client, the server MAY\n   provide a method for administrators to enforce
      certain attributes\n   compulsorily.\n"
    title: 4.1.  Adding a Public Key
  - contents:
    - "4.2.  Removing a Public Key\n   If the client wishes to remove a public key,
      the client sends:\n        string    \"remove\"\n        string    public key
      algorithm name\n        string    public key blob\n   The server MUST attempt
      to remove the public key for the user from\n   the appropriate location, so
      that the public key cannot be used for\n   subsequent authentications.\n"
    title: 4.2.  Removing a Public Key
  - contents:
    - "4.3.  Listing Public Keys\n   If the client wishes to list the known public
      keys, the client sends:\n        string    \"list\"\n   The server will respond
      with zero or more of the following responses:\n        string    \"publickey\"\n
      \       string    public key algorithm name\n        string    public key blob\n
      \       uint32    attribute-count\n         string    attrib-name\n         string
      \   attrib-value\n        repeated attribute-count times\n   There is no requirement
      that the responses be in any particular\n   order.  Whilst some server implementations
      may send the responses in\n   some order, client implementations should not
      rely on responses being\n   in any order.\n   Following the last \"publickey\"
      response, a status packet MUST be\n   sent.\n   Implementations SHOULD support
      this request.\n"
    title: 4.3.  Listing Public Keys
  - contents:
    - "4.4.  Listing Server Capabilities\n   If the client wishes to know which key
      attributes the server\n   supports, it sends:\n        string    \"listattributes\"\n
      \  The server will respond with zero or more of the following responses:\n        string
      \   \"attribute\"\n        string    attribute name\n        boolean   compulsory\n
      \  The \"compulsory\" field indicates whether this attribute will be\n   compulsorily
      applied to any added keys (irrespective of whether the\n   attribute has been
      specified by the client) due to administrative\n   settings on the server.  If
      the server does not support\n   administrative settings of this nature, it MUST
      return false in the\n   compulsory field.  An example of use of the \"compulsory\"
      attribute\n   would be a server with a configuration file specifying that the
      user\n   is not permitted shell access.  Given this, the server would return\n
      \  the \"shell\" attribute, with \"compulsory\" marked true.  Whatever\n   attributes
      the user subsequently asked the server to apply to their\n   key, the server
      would also apply the \"shell\" attribute, rendering it\n   impossible for the
      user to use a shell.\n   Following the last \"attribute\" response, a status
      packet MUST be\n   sent.\n   An implementation MAY choose not to support this
      request.\n"
    title: 4.4.  Listing Server Capabilities
  title: 4.  Public Key Subsystem Operations
- contents:
  - "5.  Security Considerations\n   This protocol assumes that it is run over a secure
    channel and that\n   the endpoints of the channel have been authenticated.  Thus,
    this\n   protocol assumes that it is externally protected from network-level\n
    \  attacks.\n   This protocol provides a mechanism that allows client authentication\n
    \  data to be uploaded and manipulated.  It is the responsibility of the\n   server
    implementation to enforce any access controls that may be\n   required to limit
    the access allowed for any particular user (the\n   user being authenticated externally
    to this protocol, typically using\n   the SSH User Authentication Protocol [3]).
    \ In particular, it is\n   possible for users to overwrite an existing key on
    the server with\n   this protocol, whilst at the same time specifying fewer restrictions\n
    \  for the new key than were previously present.  Servers should take\n   care
    that when doing this, clients are not able to override presets\n   from the server's
    administrator.\n   This protocol requires the client to assume that the server
    will\n   correctly implement and observe attributes applied to keys.\n   Implementation
    errors in the server could cause clients to authorize\n   keys for access they
    were not intended to have, or to apply fewer\n   restrictions than were intended.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   This section contains conventions used in naming
    the namespaces, the\n   initial state of the registry, and instructions for future\n
    \  assignments.\n"
  - contents:
    - "6.1.  Registrations\n   Consistent with Section 4.9.5 of [8], this document
      makes the\n   following registration:\n   The subsystem name \"publickey\".\n"
    title: 6.1.  Registrations
  - contents:
    - "6.2.  Names\n   In the following sections, the values for the namespaces are
      textual.\n   The conventions and instructions to the IANA for future assignments\n
      \  are given in this section.  The initial assignments are given in\n   their
      respective sections.\n"
    - contents:
      - "6.2.1.  Conventions for Names\n   All names registered by the IANA in the
        following sections MUST be\n   printable US-ASCII strings, and MUST NOT contain
        the characters\n   at-sign (\"@\"), comma (\",\"), or whitespace or control
        characters\n   (ASCII codes 32 or less).  Names are case-sensitive, and MUST
        NOT be\n   longer than 64 characters.\n   A provision is made here for locally
        extensible names.  The IANA will\n   not register and will not control names
        with the at-sign in them.\n   Names with the at-sign in them will have the
        format of\n   \"name@domainname\" (without the double quotes) where the part\n
        \  preceding the at-sign is the name.  The format of the part preceding\n
        \  the at-sign is not specified; however, these names MUST be printable\n
        \  US-ASCII strings, and MUST NOT contain the comma character (\",\"), or\n
        \  whitespace, or control characters (ASCII codes 32 or less).  The part\n
        \  following the at-sign MUST be a valid, fully qualified Internet\n   domain
        name [10] controlled by the person or organization defining\n   the name.
        \ Names are case-sensitive, and MUST NOT be longer than 64\n   characters.
        \ It is up to each domain how it manages its local\n   namespace.  It has
        been noted that these names resemble STD 11 [9]\n   email addresses.  This
        is purely coincidental and actually has\n   nothing to do with STD 11 [9].
        \ An example of a locally defined name\n   is \"our-attribute@example.com\"
        (without the double quotes).\n"
      title: 6.2.1.  Conventions for Names
    - contents:
      - "6.2.2.  Future Assignments of Names\n   Requests for assignments of new Names
        MUST be done through the IETF\n   Consensus method as described in [11].\n"
      title: 6.2.2.  Future Assignments of Names
    title: 6.2.  Names
  - contents:
    - "6.3.  Public Key Subsystem Request Names\n   The following table lists the
      initial assignments of Public Key\n   Subsystem Request names.\n           Request
      Name\n           -------------\n           version\n           add\n           remove\n
      \          list\n           listattributes\n"
    title: 6.3.  Public Key Subsystem Request Names
  - contents:
    - "6.4.  Public Key Subsystem Response Names\n   The following table lists the
      initial assignments of Public Key\n   Subsystem Response names.\n           Response
      Name\n           --------------\n           version\n           status\n           publickey\n
      \          attribute\n"
    title: 6.4.  Public Key Subsystem Response Names
  - contents:
    - "6.5.  Public Key Subsystem Attribute Names\n   Attributes are used to define
      properties or restrictions for public\n   keys.  The following table lists the
      initial assignments of Public\n   Key Subsystem Attribute names.\n           Attribute
      Name\n           ---------------\n           comment\n           comment-language\n
      \          command-override\n           subsystem\n           x11\n           shell\n
      \          exec\n           agent\n           env\n           from\n           port-forward\n
      \          reverse-forward\n"
    title: 6.5.  Public Key Subsystem Attribute Names
  - contents:
    - "6.6.  Public Key Subsystem Status Codes\n   The status code is a byte value,
      describing the status of a request.\n"
    - contents:
      - "6.6.1.  Conventions\n   Status responses have status codes in the range 0
        to 255.  These\n   numbers are allocated as follows.  Of these, the range
        192 to 255 is\n   reserved for use by local, private extensions.\n"
      title: 6.6.1.  Conventions
    - contents:
      - "6.6.2.  Initial Assignments\n   The following table identifies the initial
        assignments of the Public\n   Key Subsystem status code values.\n           Status
        code                           Value    Reference\n           ------------
        \                         -----    ---------\n           SSH_PUBLICKEY_SUCCESS
        \                  0\n           SSH_PUBLICKEY_ACCESS_DENIED             1\n
        \          SSH_PUBLICKEY_STORAGE_EXCEEDED          2\n           SSH_PUBLICKEY_VERSION_NOT_SUPPORTED
        \    3\n           SSH_PUBLICKEY_KEY_NOT_FOUND             4\n           SSH_PUBLICKEY_KEY_NOT_SUPPORTED
        \        5\n           SSH_PUBLICKEY_KEY_ALREADY_PRESENT       6\n           SSH_PUBLICKEY_GENERAL_FAILURE
        \          7\n           SSH_PUBLICKEY_REQUEST_NOT_SUPPORTED     8\n           SSH_PUBLICKEY_ATTRIBUTE_NOT_SUPPORTED
        \  9\n"
      title: 6.6.2.  Initial Assignments
    - contents:
      - "6.6.3.  Future Assignments\n   Requests for assignments of new status codes
        in the range of 0 to 191\n   MUST be done through the Standards Action method
        as described in\n   [11].\n   The IANA will not control the status code range
        of 192 through 255.\n   This range is for private use.\n"
      title: 6.6.3.  Future Assignments
    title: 6.6.  Public Key Subsystem Status Codes
  title: 6.  IANA Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [1]   Ylonen, T. and C. Lonvick, \"The Secure
      Shell (SSH) Protocol\n         Architecture\", RFC 4251, January 2006.\n   [2]
      \  Ylonen, T. and C. Lonvick, \"The Secure Shell (SSH) Transport\n         Layer
      Protocol\", RFC 4253, January 2006.\n   [3]   Ylonen, T. and C. Lonvick, \"The
      Secure Shell (SSH)\n         Authentication Protocol\", RFC 4252, January 2006.\n
      \  [4]   Ylonen, T. and C. Lonvick, \"The Secure Shell (SSH) Connection\n         Protocol\",
      RFC 4254, January 2006.\n   [5]   Bradner, S., \"Key words for use in RFCs to
      Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n   [6]
      \  Phillips, A. and M. Davis, \"Tags for Identifying Languages\",\n         BCP
      47, RFC 4646, September 2006.\n   [7]   Yergeau, F., \"UTF-8, a transformation
      format of ISO 10646\",\n         STD 63, RFC 3629, November 2003.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [8]   Lehtinen, S. and C. Lonvick, \"The Secure
      Shell (SSH) Protocol\n         Assigned Numbers\", RFC 4250, January 2006.\n
      \  [9]   Crocker, D., \"Standard for the format of ARPA Internet text\n         messages\",
      STD 11, RFC 822, August 1982.\n   [10]  Mockapetris, P., \"Domain names - concepts
      and facilities\",\n         STD 13, RFC 1034, November 1987.\n   [11]  Narten,
      T. and H. Alvestrand, \"Guidelines for Writing an IANA\n         Considerations
      Section in RFCs\", BCP 26, RFC 2434,\n         October 1998.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "8.  Acknowledgements\n   Brent McClure contributed to the writing of this document.\n"
  title: 8.  Acknowledgements
- contents:
  - "Authors' Addresses\n   Joseph Galbraith\n   VanDyke Software\n   4848 Tramway
    Ridge Blvd\n   Suite 101\n   Albuquerque, NM  87111\n   US\n   Phone: +1 505 332
    5700\n   EMail: galb@vandyke.com\n   Jeff P. Van Dyke\n   VanDyke Software\n   4848
    Tramway Ridge Blvd\n   Suite 101\n   Albuquerque, NM  87111\n   US\n   Phone:
    +1 505 332 5700\n   EMail: jpv@vandyke.com\n   Jon Bright\n   Silicon Circus\n
    \  24 Jubilee Road\n   Chichester, West Sussex  PO19 7XB\n   UK\n   Phone: +49
    172 524 0521\n   EMail: jon@siliconcircus.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
