- contents:
  - '                    IMAP4 Authentication Mechanisms

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "1. Introduction\n   The Internet Message Access Protocol, Version 4 [IMAP4] contains
    the\n   AUTHENTICATE command, for identifying and authenticating a user to an\n
    \  IMAP4 server and for optionally negotiating a protection mechanism\n   for
    subsequent protocol interactions.  This document describes\n   several authentication
    mechanisms for use by the IMAP4 AUTHENTICATE\n   command.\n"
  title: 1. Introduction
- contents:
  - "2. Kerberos version 4 authentication mechanism\n   The authentication type associated
    with Kerberos version 4 is\n   \"KERBEROS_V4\".\n   The data encoded in the first
    ready response contains a random 32-bit\n   number in network byte order.  The
    client should respond with a\n   Kerberos ticket and an authenticator for the
    principal\n   \"imap.hostname@realm\", where \"hostname\" is the first component
    of the\n   host name of the server with all letters in lower case and where\n
    \  \"realm\" is the Kerberos realm of the server.  The encrypted checksum\n   field
    included within the Kerberos authenticator should contain the\n   server provided
    32-bit number in network byte order.\n   Upon decrypting and verifying the ticket
    and authenticator, the\n   server should verify that the contained checksum field
    equals the\n   original server provided random 32-bit number.  Should the\n   verification
    be successful, the server must add one to the checksum\n   and construct 8 octets
    of data, with the first four octets containing\n   the incremented checksum in
    network byte order, the fifth octet\n   containing a bit-mask specifying the protection
    mechanisms supported\n   by the server, and the sixth through eighth octets containing,
    in\n   network byte order, the maximum cipher-text buffer size the server is\n
    \  able to receive.  The server must encrypt the 8 octets of data in the\n   session
    key and issue that encrypted data in a second ready response.\n   The client should
    consider the server authenticated if the first four\n   octets the un-encrypted
    data is equal to one plus the checksum it\n   previously sent.\n   The client
    must construct data with the first four octets containing\n   the original server-issued
    checksum in network byte order, the fifth\n   octet containing the bit-mask specifying
    the selected protection\n   mechanism, the sixth through eighth octets containing
    in network byte\n   order the maximum cipher-text buffer size the client is able
    to\n   receive, and the following octets containing a user name string.  The\n
    \  client must then append from one to eight octets so that the length\n   of
    the data is a multiple of eight octets. The client must then PCBC\n   encrypt
    the data with the session key and respond to the second ready\n   response with
    the encrypted data.  The server decrypts the data and\n   verifies the contained
    checksum.  The username field identifies the\n   user for whom subsequent IMAP
    operations are to be performed; the\n   server must verify that the principal
    identified in the Kerberos\n   ticket is authorized to connect as that user.  After
    these\n   verifications, the authentication process is complete.\n   The protection
    mechanisms and their corresponding bit-masks are as\n   follows:\n      1 No protection
    mechanism\n      2 Integrity (krb_mk_safe) protection\n      4 Privacy (krb_mk_priv)
    protection\n   EXAMPLE: The following are two Kerberos version 4 login scenarios\n
    \  (note that the line breaks in the sample authenticators are for\n   editorial
    clarity and are not in real authenticators)\n      S: * OK IMAP4 Server\n      C:
    A001 AUTHENTICATE KERBEROS_V4\n      S: + AmFYig==\n      C: BAcAQU5EUkVXLkNNVS5FRFUAOCAsho84kLN3/IJmrMG+25a4DT\n
    \        +nZImJjnTNHJUtxAA+o0KPKfHEcAFs9a3CL5Oebe/ydHJUwYFd\n         WwuQ1MWiy6IesKvjL5rL9WjXUb9MwT9bpObYLGOKi1Qh\n
    \     S: + or//EoAADZI=\n      C: DiAF5A4gA+oOIALuBkAAmw==\n      S: A001 OK Kerberos
    V4 authentication successful\n      S: * OK IMAP4 Server\n      C: A001 AUTHENTICATE
    KERBEROS_V4\n      S: + gcfgCA==\n      C: BAcAQU5EUkVXLkNNVS5FRFUAOCAsho84kLN3/IJmrMG+25a4DT\n
    \        +nZImJjnTNHJUtxAA+o0KPKfHEcAFs9a3CL5Oebe/ydHJUwYFd\n         WwuQ1MWiy6IesKvjL5rL9WjXUb9MwT9bpObYLGOKi1Qh\n
    \     S: A001 NO Kerberos V4 authentication failed\n"
  title: 2. Kerberos version 4 authentication mechanism
- contents:
  - "3. GSSAPI authentication mechanism\n   The authentication type associated with
    all mechanisms employing the\n   GSSAPI [RFC1508] is \"GSSAPI\".\n   The first
    ready response issued by the server contains no data.  The\n   client should call
    GSS_Init_sec_context, passing in 0 for\n   input_context_handle (initially) and
    a targ_name equal to output_name\n   from GSS_Import_Name called with input_name_type
    of NULL and\n   input_name_string of \"SERVICE:imap@hostname\" where \"hostname\"
    is the\n   fully qualified host name of the server with all letters in lower\n
    \  case.  The client must then respond with the resulting output_token.\n   If
    GSS_Init_sec_context returns GSS_CONTINUE_NEEDED, then the client\n   should expect
    the server to issue a token in a subsequent ready\n   response.  The client must
    pass the token to another call to\n   GSS_Init_sec_context.\n   If GSS_Init_sec_context
    returns GSS_COMPLETE, then the client should\n   respond with any resulting output_token.
    \ If there is no\n   output_token, the client should respond with no data.  The
    client\n   should then expect the server to issue a token in a subsequent ready\n
    \  response.  The client should pass this token to GSS_Unseal and\n   interpret
    the first octet of resulting cleartext as a bit-mask\n   specifying the protection
    mechanisms supported by the server and the\n   second through fourth octets as
    the maximum size output_message to\n   send to the server.  The client should
    construct data, with the first\n   octet containing the bit-mask specifying the
    selected protection\n   mechanism, the second through fourth octets containing
    in network\n   byte order the maximum size output_message the client is able to\n
    \  receive, and the remaining octets containing a user name string.  The\n   client
    must pass the data to GSS_Seal with conf_flag set to FALSE,\n   and respond with
    the generated output_message.  The client can then\n   consider the server authenticated.\n
    \  The server must issue a ready response with no data and pass the\n   resulting
    client supplied token to GSS_Accept_sec_context as\n   input_token, setting acceptor_cred_handle
    to NULL (for \"use default\n   credentials\"), and 0 for input_context_handle
    (initially).  If\n   GSS_Accept_sec_context returns GSS_CONTINUE_NEEDED, the server
    should\n   return the generated output_token to the client in a ready response\n
    \  and pass the resulting client supplied token to another call to\n   GSS_Accept_sec_context.\n
    \  If GSS_Accept_sec_context returns GSS_COMPLETE, then if an\n   output_token
    is returned, the server should return it to the client\n   in a ready response
    and expect a reply from the client with no data.\n   Whether or not an output_token
    was returned, the server then should\n   then construct 4 octets of data, with
    the first octet containing a\n   bit-mask specifying the protection mechanisms
    supported by the server\n   and the second through fourth octets containing in
    network byte order\n   the maximum size output_token the server is able to receive.
    \ The\n   server must then pass the plaintext to GSS_Seal with conf_flag set to\n
    \  FALSE and issue the generated output_message to the client in a ready\n   response.
    \ The server must then pass the resulting client supplied\n   token to GSS_Unseal
    and interpret the first octet of resulting\n   cleartext as the bit-mask for the
    selected protection mechanism, the\n   second through fourth octets as the maximum
    size output_message to\n   send to the client, and the remaining octets as the
    user name.  Upon\n   verifying the src_name is authorized to authenticate as the
    user\n   name, The server should then consider the client authenticated.\n   The
    protection mechanisms and their corresponding bit-masks are as\n   follows:\n
    \     1 No protection mechanism\n      2 Integrity protection.\n        Sender
    calls GSS_Seal with conf_flag set to FALSE\n      4 Privacy protection.\n        Sender
    calls GSS_Seal with conf_flag set to TRUE\n"
  title: 3. GSSAPI authentication mechanism
- contents:
  - "4. S/Key authentication mechanism\n   The authentication type associated with
    S/Key [SKEY] is \"SKEY\".\n   The first ready response issued by the server contains
    no data.  The\n   client responds with the user name string.\n   The data encoded
    in the second ready response contains the decimal\n   sequence number followed
    by a single space and the seed string for\n   the indicated user.  The client
    responds with the one-time-password,\n   as either a 64-bit value in network byte
    order or encoded in the \"six\n   English words\" format.\n   Upon successful
    verification of the one-time-password, the server\n   should consider the client
    authenticated.\n   S/Key authentication does not provide for any protection mechanisms.\n
    \  EXAMPLE: The following are two S/Key login scenarios.\n      S: * OK IMAP4
    Server\n      C: A001 AUTHENTICATE SKEY\n      S: +\n      C: bW9yZ2Fu\n      S:
    + OTUgUWE1ODMwOA==\n      C: Rk9VUiBNQU5OIFNPT04gRklSIFZBUlkgTUFTSA==\n      S:
    A001 OK S/Key authentication successful\n      S: * OK IMAP4 Server\n      C:
    A001 AUTHENTICATE SKEY\n      S: +\n      C: c21pdGg=\n      S: + OTUgUWE1ODMwOA==\n
    \     C: BsAY3g4gBNo=\n      S: A001 NO S/Key authentication failed\n"
  title: 4. S/Key authentication mechanism
- contents:
  - "5. References\n   [IMAP4] Crispin, M., \"Internet Message Access Protocol - Version
    4\",\n   RFC 1730, University of Washington, December 1994.\n   [RFC1508] Linn,
    J., \"Generic Security Service Application Program\n   Interface\", RFC 1508,
    Geer Zolot Associates, September 1993.\n   [SKEY] Haller, Neil M. \"The S/Key
    One-Time Password System\",\n   Bellcore, Morristown, New Jersey, October 1993,\n
    \  thumper.bellcore.com:pub/nmh/docs/ISOC.symp.ps\n"
  title: 5. References
- contents:
  - "6. Security Considerations\n   Security issues are discussed throughout this
    memo.\n"
  title: 6. Security Considerations
- contents:
  - "7. Author's Address\n   John G. Myers\n   Carnegie-Mellon University\n   5000
    Forbes Ave.\n   Pittsburgh PA, 15213-3890\n   EMail: jgm+@cmu.edu\n"
  title: 7. Author's Address
