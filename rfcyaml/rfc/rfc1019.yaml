- title: __initial_text__
  contents:
  - "  Report of the Workshop on Environments for Computational Mathematics\n    \
    \                      ACM SIGGRAPH Conference\n              Anaheim Convention\
    \ Center, Anaheim, California\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo is a report on the discussion of the representation\
    \ of\n   equations in a workshop at the ACM SIGGRAPH Conference held in\n   Anaheim,\
    \ California on 30 July 1987.  Distribution of this memo is\n   unlimited.\n"
- title: Introduction
  contents:
  - "Introduction\n   Since the 1950's, many researchers have worked to realize the\
    \ vision\n   of natural and powerful computer systems for interactive mathematical\n\
    \   work.  Nowadays this vision can be expressed as the goal of an\n   integrated\
    \ system for symbolic, numerical, graphical, and\n   documentational mathematical\
    \ work.  Recently the development of\n   personal computers (with high resolution\
    \ screens, window systems, and\n   mice), high-speed networks, electronic mail,\
    \ and electronic\n   publishing, have created a technological base that is more\
    \ than\n   adequate for the realization of such systems.  However, the growth\
    \ of\n   separate Mathematical Typesetting, Multimedia Electronic Mail,\n   Numerical\
    \ Computation, and Computer Algebra communities, each with\n   its own conventions,\
    \ threatens to prevent these systems from being\n   built.\n   To be specific,\
    \ little thought has been given to unifying the\n   different expression representations\
    \ currently used in the different\n   communities.  This must take place if there\
    \ is to be interchange of\n   mathematical expressions among Document, Display,\
    \ and Computation\n   systems. Also, tools that are wanted in several communities\
    \ (e.g.,\n   WYSIWYG mathematical expression editors), are being built\n   independently\
    \ by each, with little awareness of the duplication of\n   effort that thereby\
    \ occurs.  Worst of all, the ample opportunities\n   for cross-fertilization among\
    \ the different communities are not being\n   exploited.  For example, some Computer\
    \ Algebra systems explicitly\n   associate a type with a mathematical expression\
    \ (e.g.,   3 x 3 matrix\n   of polynomials with complex number coefficients),\
    \ which could enable\n   automated math proofreaders, analogous to spelling checkers.\n\
    \   The goal of the Workshop on Environments for Computational\n   Mathematics\
    \ was to open a dialogue among representatives of the\n   Computer Algebra, Numerical\
    \ Computation, Multimedia Electronic Mail,\n   and Mathematical Typesetting communities.\
    \  In July 1986, during the\n   Computers and Mathematics Conference at Stanford\
    \ University, a subset\n   of this year's participants met at Xerox PARC to discuss\
    \ User\n   Interfaces for Computer Algebra Systems.  This group agreed to hold\n\
    \   future meetings, of which the present Workshop is the first.  Alan\n   Katz's\
    \ recent essay, \"Issues in Defining an Equations Representation\n   Standard\"\
    , RFC-1003, DDN Network Information Center, March 1987\n   (reprinted in the ACM\
    \ SIGSAM Bulletin May 1987, pp. 19-24),\n   influenced the discussion at the Workshop,\
    \ especially since it\n   discusses the interchange of mathematical expressions.\n\
    \   This report does not aim to be a transcript of the Workshop, but\n   rather\
    \ tries to extract the major points upon which (in the Editor's\n   view) rough\
    \ consensus was reached.  It is the Editor's view that the\n   Workshop discussion\
    \ can be summarized in the form of a basic\n   architecture for \"Standard Mathematical\
    \ Systems\", presented in\n   Section II below.  Meeting participants seemed to\
    \ agree that: (1)\n   existing mathematical systems should be augmented or modified\
    \ to\n   conform to this architecture, and (2) future systems should be built\n\
    \   in accordance with it.\n   The Talks and Panel-Audience discussions at the\
    \ Workshop were\n   videotaped.  Currently, these tapes are being edited for submission\n\
    \   to the SIGGRAPH Video Review, to form a \"Video Proceedings\".  If\n   accepted\
    \ by SIGGRAPH, the Video Proceedings will be publicly\n   available for a nominal\
    \ distribution charge.\n   One aspect of the mathematical systems vision that\
    \ we explicitly left\n   out of this Workshop is the question of \"intelligence\"\
    \ in\n   mathematical systems.  This has been a powerful motivation to systems\n\
    \   builders since the early days.  Despite its importance, we do not\n   expect\
    \ intelligent behavior in mathematical systems to be realized in\n   the short\
    \ term, and so we leave it aside.  Computer Assisted\n   Instruction for mathematics\
    \ also lies beyond the scope of the\n   Workshop.  And although it might have\
    \ been appropriate to invite\n   representatives of the Spreadsheets and Graphics\
    \ communities, we did\n   not.  Many of those who were at the Workshop have given\
    \ considerable\n   thought to Spreadsheets and Graphics in mathematical systems.\n\
    \   Financial support from the Xerox Corporation for AudioVisual\n   equipment\
    \ rental at SIGGRAPH is gratefully acknowledged.  Thanks are\n   due to Kevin\
    \ McIsaac for serving as chief cameraman, providing\n   critical comments on this\
    \ report, and contributing in diverse other\n   ways to the Workshop.  Thanks\
    \ also to Richard Fateman, Michael\n   Spivak, and Neil Soiffer for critical comments\
    \ on this report.\n   Subhana Menis and Erin Foley have helped with logistics\
    \ and\n   documentation at several points along the way.\n   Information on the\
    \ Video Proceedings, and any other aspect of the\n   Workshop can be obtained\
    \ from the author of this report.\n"
- title: I. Particulars of the meeting
  contents:
  - "I. Particulars of the meeting\n   The Workshop had four parts: (1) Talks, (2)\
    \ Panel Discussion, (3)\n   Panel and Audience discussion, (4) and Live demos.\
    \  Only a few of the\n   systems presented in the talks were demonstrated live.\
    \ However, many\n   of the talks contained videotapes of the systems being discussed.\n\
    \   The talks, each 15 minutes in length, were:\n   1. \"The MathCad System: a\
    \ Graphical Interface for Computer\n      Mathematics\", Richard Smaby, MathSOFT\
    \ Inc.\n   2. \"MATLAB - an Interactive Matrix Laboratory\", Cleve Moler,\n  \
    \    MathWorks Inc.\n   3. \"Milo: A Macintosh System for Students\", Ron Avitzur,\
    \ Free Lance\n      Developer, Palo Alto, CA.\n   4. \"MathScribe: A User Interface\
    \ for Computer Algebra systems\", Neil\n      Soiffer, Tektronix Labs.\n   5.\
    \ \"INFOR: an Interactive WYSIWYG System for Technical Text\",\n      William\
    \ Schelter, University of Texas.\n   6. \"Iris User Interface for Computer Algebra\
    \ Systems\", Benton Leong,\n      University of Waterloo.\n   7. \"CaminoReal:\
    \ A Direct Manipulation Style User Interface for\n      Mathematical Software\"\
    , Dennis Arnon, Xerox PARC.\n   8. \"Domain-Driven Expression Display in Scratchpad\
    \ II\", Stephen\n      Watt, IBM Yorktown Heights.\n   9. \"Internal and External\
    \ Representations of Valid Mathematical\n      Reasoning\", Tryg Ager, Stanford\
    \ University.\n   10. \"Presentation and Interchange of Mathematical Expressions\
    \ in the\n       Andrew System\", Maria Wadlow, Carnegie-Mellon University.\n\
    \   The Panel discussion lasted 45 minutes.  The panelists were:\n      Richard\
    \ Fateman, University of California at Berkeley\n      Richard Jenks, IBM Yorktown\
    \ Heights\n      Michael Spivak, Personal TeX\n      Ronald Whitney, American\
    \ Mathematical Society\n   The panelists were asked to consider the following\
    \ issues in planning\n   their presentations:\n   1. Should we try to build integrated\
    \ documentation/computation\n      systems?\n   2. WYSIWYG editing of mathematical\
    \ expressions.\n   3. Interchange representation of mathematics.\n   4. User interface\
    \ design for integrated documentation/computation\n      systems.\n   5. Coping\
    \ with large mathematical expressions.\n   A Panel-Audience discussion lasted\
    \ another 45 minutes, and the Demos\n   lasted about one hour.\n   Other Workshop\
    \ participants, besides those named above, included:\n      S. Kamal Abdali, Tektronix\
    \ Labs\n      George Allen, Design Science\n      Alan Katz, Information Sciences\
    \ Institute\n      J. Robert Cooke, Cornell University and Cooke Publications\n\
    \      Larry Lesser, Inference Corporation\n      Tom Libert, University of Michigan\n\
    \      Kevin McIsaac, Xerox PARC and University of Western Australia\n      Elizabeth\
    \ Ralston, Inference Corporation\n"
- title: II. Standard Mathematical Systems - a Proposed Architecture
  contents:
  - "II. Standard Mathematical Systems - a Proposed Architecture\n   We postulate\
    \ that there is an \"Abstract Syntax\" for any mathematical\n   expression.  A\
    \ piece of Abstract Syntax consists of an Operator and\n   an (ordered) list of\
    \ Arguments, where each Argument is (recursively)\n   a piece of Abstract Syntax.\
    \  Functional Notation, Lisp SExpressions,\n   Directed Acyclic Graphs, and N-ary\
    \ Trees are equivalent\n   representations of Abstract Syntax, in the sense of\
    \ being equally\n   expressive, although one or another might be considered preferable\n\
    \   from the standpoint of computation and algorithms.  For example, the\n   functional\
    \ expression \"Plus[Times[a,b],c]\" represents the Abstract\n   Syntax of an expression\
    \ that would commonly be written \"a*b+c\".\n   A \"Standard Mathematical Component\"\
    \ (abbreviated SMC) is a collection\n   of software and hardware modules, with\
    \ a single function, which if it\n   reads mathematical expressions, reads them\
    \ as Abstract Syntax, and if\n   it writes mathematical expressions, writes them\
    \ as Abstract Syntax.\n   A \"Standard Mathematical System\" (abbreviated SMS)\
    \ is a collection of\n   SMC's which are used together, and which communicate\
    \ with each other\n   in Abstract Syntax.\n   We identify at least four possible\
    \ types of components in an SMS.\n   Any particular SMS may have zero, one, or\
    \ several instances of each\n   component type.  The connection between two particular\
    \ components of\n   an SMS, of whatever type, is via Abstract Syntax passed over\
    \ a \"wire\"\n   joining them.\n   1) EDs - Math Editors\n   These edit Abstract\
    \ Syntax to Abstract Syntax.  A particular system\n   may have editors that work\
    \ on some other representations of\n   mathematics (e.g., bitmaps, or particular\
    \ formatting languages),\n   however they do not qualify as an ED components of\
    \ a SMS.  An ED may\n   be WYSIWYG or language-oriented.\n   2) DISPs - Math Displayers\n\
    \   These are suites of software packages, device drivers, and hardware\n   devices\
    \ that take in an expr in Abstract Syntax and render it. For\n   example, (1)\
    \ the combination of an Abstract Syntax->TeX translator,\n   TeX itself, and a\
    \ printer, or (2) a plotting package plus a plotting\n   device.  A DISP component\
    \ may or may not support \"pointing\" (i.e.,\n   selection), within an expression\
    \ it has displayed, fix a printer\n   probably doesn't, but terminal screen may.\
    \ If pointing is supported,\n   then a DISP component must be able to pass back\
    \ the selected\n   subexpression(s) in Abstract Syntax. We are not attempting\
    \ here to\n   foresee, or limit, the selection mechanisms that different DISPs\
    \ may\n   offer, but only to require that a DISP be able to communicate its\n\
    \   selections in Abstract Syntax.\n   3) COMPs - Computation systems\n   Examples\
    \ are Numerical Libraries and Computer Algebra systems. There\n   are questions\
    \ as to the state of a COMP component at the time it\n   receives an expression.\
    \ For example, what global flags are set, or\n   what previous expressions have\
    \ been computed that the current\n   expression may refer to.  However, we don't\
    \ delve into these hard\n   issues at this time.\n   4) DOCs - Document systems\n\
    \   These are what would typically called \"text editors\", \"document\n   editors\"\
    , or \"electronic mail systems\".  We are interested in their\n   handling of\
    \ math expressions.  In reality, they manage other document\n   constituents as\
    \ well (e.g., text and graphics).  The design of the\n   user interface for the\
    \ interaction of math, text, and graphics is a\n   nontrivial problem, and will\
    \ doubtless be the subject of further\n   research.\n   A typical SMS will have\
    \ an ED and a DISP that are much more closely\n   coupled than is suggested here.\
    \  For example, the ED's internal\n   representation of Abstract Syntax, and the\
    \ DISP's internal\n   representation (e.g., a tree of boxes), may have pointers\
    \ back and\n   forth, or perhaps may even share a common data structure.  This\
    \ is\n   acceptable, but it should always be possible to access the two\n   components\
    \ in the canonical, decoupled way.  For example, the ED\n   should be able to\
    \ receive a standard Abstract Syntax representation\n   for an expression, plus\
    \ an editing command in Abstract Syntax (e.g.,\n   Edit[expr, cmd]), and return\
    \ an Abstract Syntax representation for\n   the result.  Similarly, the DISP should\
    \ be able to receive Abstract\n   Syntax over the wire and display it, and if\
    \ it supports pointing, be\n   able to return selected subexpressions in Abstract\
    \ Syntax.\n   The boundaries between the component types are not hard and fast.\
    \ For\n   example, an ED might support simple computations (e.g.,\n   simplification,\
    \ rearrangement of subexpressions, arithmetic), or a\n   DOC might contain a facility\
    \ for displaying mathematical expressions.\n   The key thing for a given module\
    \ to qualify as an SMC is its ability\n   to read and write Abstract Syntax.\n"
- title: III. Recommendations and Qualifications
  contents:
  - "III. Recommendations and Qualifications\n    1. It is our hypothesis that it\
    \ will be feasible to encode a rich\n       variety of other languages in Abstract\
    \ Syntax, for example,\n       programming constructs.  Thus we intend it to be\
    \ possible to\n       pass such things as Lisp formatting programs, plot programs,\n\
    \       TeX macros, etc. over the wire in Abstract Syntax.  We also\n       hypothesize\
    \ that it will be possible to encode all present and\n       future mathematical\
    \ notations in Abstract Syntax (e.g.,\n       commutative diagrams in two or three\
    \ dimensions).  For\n       example, the 3 x 3 identify matrix might be encoded\
    \ as:\n       Matrix[ [1,0,0], [0,1,0], [0,0,1] ]\n       while the Abstract Syntax\
    \ expression:\n       Matrix[5, 5, DiagonalRow[1, ThreeDots[], 1],\n       BelowDiagonalTriangle[FlexZero[]],\n\
    \       AboveDiagonalTriangle[FlexZero[]]]\n       might encode a 5 x 5 matrix\
    \ which is to be displayed with a\n       \"1\" in the (1,1) position, a \"1\"\
    \ in the (5,5) position, three\n       dots between them on the diagonal, a big\
    \ fat zero in the lower\n       triangle indicating the presence of zeros there,\
    \ and a big fat\n       zero in the upper triangle indicating zeros.\n    2. We\
    \ assume the use of the ASCII character set for Abstract Syntax\n       expressions.\
    \  Greek letters, for example, would need to be\n       encoded with expressions\
    \ like Greek[alpha], or Alpha[].\n       Similarly, font encoding is achieved\
    \ by the use of Abstract\n       Syntax such as the following for 12pt bold Times\
    \ Roman:\n       Font[timesRoman, 12, bold, <expression>] Two SMCs are free to\n\
    \       communicate in a larger character set, or pass font\n       specifications\
    \ in other ways, but they should always be able to\n       express themselves\
    \ in standard Abstract Syntax.\n    3. COMPs (e.g., Computer Algebra systems),\
    \ should be able to\n       communicate in Abstract Syntax.  Existing systems\
    \ should\n       have translators to/from Abstract Syntax added to them.  In\n\
    \       addition, if we can establish a collection of standard names and\n   \
    \    argument lists for common functions, and get all COMP's to read\n       and\
    \ write them, then any Computer Algebra system will be able to\n       talk to\
    \ any other.  Some examples of possible standard names and\n       argument lists\
    \ for common functions:\n   Plus[a,b,...]\n   Minus[a]\n   Minus[a,b]\n   Times[a,b,...]\n\
    \   Divide[<numerator>, <denominator>]\n   Power[<base>, <exponent>]\n   PartialDerivative[<expr>,\
    \ <var>]\n   Integral[<expr>, <var>, <lowerLimit>,<upperLimit>] (limits optional)\n\
    \   Summation[<<summand>, <lowerLimit>, <upperLimit>] (limits optional)\n    \
    \  A particular algebra system may read and write nonstandard\n      Abstract\
    \ Syntax.  For example:\n   Polynomial[Variables[x, y, z], List[Term[coeff, xExp,\
    \ yExp, zExp],\n   ...\n      but, it should be able to translate this to an equivalent\
    \ standard\n      representation. For example:\n   Plus[Times[coeff, Power[x,\
    \ xExp], ...\n    4. A DOC must store the Abstract Syntax representations of the\n\
    \       expressions it contains.  Thus it's easy for it to pass its\n       expressions\
    \ to EDs, COMPs, or DISPs.  A DOC is free to store\n       additional expression\
    \ representations. For example, a tree of\n       Boxes, a bitmap, or a TeX description.\n\
    \    5. DISPs will typically have local databases of formatting\n       information.\
    \  To actually render the Abstract Syntax, the DISP\n       checks for display\
    \ rules in its database.  If none are found,\n       it paints the Abstract Syntax\
    \ in some standard way.  Local\n       formatting databases can be overridden\
    \ by formatting rules passed\n       over the wire, expressed in Abstract Syntax.\
    \  It is formatting\n       databases that store knowledge of particular display\n\
    \       environments (for e.g., \"typesetting for Journal X\").\n       The paradigm\
    \ we wish to follow is that of the genetic code: A\n       mathematical expression\
    \ is like a particular instance of DNA, and\n       upon receiving it a DISP consults\
    \ the appropriate formatting\n       database to see if it understands it.  If\
    \ not, the DISP just\n       \"passed it through unchanged\".  The expression\
    \ sent over the wire\n       may be accompanied by directives or explanatory information,\n\
    \       which again may or may not be meaningful to a particular DISP.  In\n \
    \      reality, formatting databases may need to contain Expert\n       System-level\
    \ sophistication to be able to produce professional\n       quality typesetting\
    \ results, but we believe that useful results\n       can be achieved even without\
    \ such sophistication.\n    6. With the use of the SMC's specified above, it becomes\
    \ easy to use\n       any DOC as a logging facility for a session with a COMP.\
    \  Therefore,\n       improvements in DOCs (e.g., browsers, level structuring,\
    \ active\n       documents, audit trails), will automatically give us better\n\
    \       logging mechanisms for sessions with algebra systems.\n    7. Note that\
    \ Abstract Syntax is human-readable.  Thus any text\n       editor can be used\
    \ as an ED.  Of course, in a typical SMS, users\n       should have no need to\
    \ look at the Abstract Syntax flowing\n       through the internal \"wires\" if\
    \ they don't care to.  Many will\n       want to interact only with mathematics\
    \ that has a textbook-like\n       appearance, and they should be able to do so.\n\
    \    8. Alan Katz's RFC (cited above) distinguishes the form (i.e.,\n       appearance)\
    \ of a mathematical expression from its content (i.e.,\n       meaning, value).\
    \  We do not agree that such a distinction can be\n       made.  We claim that\
    \ Abstract Syntax can convey form, meaning,\n       or both, and that its interpretation\
    \ is strictly in the eye\n       of the beholder(s).  Meaning is just a handshake\
    \ between sender\n       and recipient.\n    9. Help and status queries, the replies\
    \ to help and status queries,\n       and error messages should be read and written\
    \ by SMC's in\n       Abstract Syntax.\n   10. In general, it is permissible for\
    \ two SMC's to use private\n       protocols for communication.  Our example of\
    \ a tightly coupled ED\n       and DISP above is one example.  Two instances of\
    \ a Macsyma COMP\n       would be another; they might agree to pass Macsyma internal\n\
    \       representations back and forth.  To qualify as SMC's, however,\n     \
    \  they should be able to translate all such exchanges into\n       equivalent\
    \ exchanges in Abstract Syntax.\n"
