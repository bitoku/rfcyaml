Abstract The Transport Layer Security (TLS) protocol (RFC 2246) includes features to negotiate selection of a lossless data compression method as part of the TLS Handshake Protocol and to then apply the algorithm associated with the selected method as part of the TLS Record Protocol.
TLS defines one standard compression method which specifies that data exchanged via the record protocol will not be compressed.
This document describes an additional compression method associated with a lossless data compression algorithm for use with TLS, and it describes a method for the specification of additional TLS compression methods.
The Transport Layer Security (TLS) protocol (RFC 2246, [2]) includes features to negotiate selection of a lossless data compression method as part of the TLS Handshake Protocol and to then apply the algorithm associated with the selected method as part of the TLS Record Protocol.
TLS defines one standard compression method, CompressionMethod.null, which specifies that data exchanged via the record protocol will not be compressed.
While this single compression method helps ensure that TLS implementations are interoperable, the lack of additional standard compression methods has limited the ability of implementers to develop interoperable implementations that include data compression.
TLS is used extensively to secure client server connections on the World Wide Web.
While these connections can often be characterized as short lived and exchanging relatively small amounts of data, TLS is also being used in environments where connections can be long  lived and the amount of data exchanged can extend into thousands or millions of octets.
XML [4], for example, is increasingly being used as a data representation method on the Internet, and XML tends to be verbose.
Compression within TLS is one way to help reduce the bandwidth and latency requirements associated with exchanging large amounts of data while preserving the security services provided by TLS.
This document describes an additional compression method associated with a lossless data compression algorithm for use with TLS.
Standardization of the compressed data formats and compression algorithms associated with this compression method is beyond the scope of this document.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [1].
[2] includes the following compression method structure in sections 6.1 and 7.4.1.2 and Appendix sections A.4.1 and A.6: enum { null(0), (255)
} CompressionMethod; which allows for later specification of up to 256 different compression methods.
This definition is updated to segregate the range of allowable values into three zones:
(zero) through 63 decimal (0x3F)
inclusive are reserved for IETF Standards Track protocols.
Values from 64 decimal (0x40) through 223 decimal (0xDF) inclusive are reserved for assignment for non Standards Track methods.
Values from 224 decimal (0xE0) through 255 decimal (0xFF) inclusive are reserved for private use.
Additional information describing the role of the IANA in the allocation of compression method identifiers is described in Section 5.
In addition, this definition is updated to include assignment of an identifier for the DEFLATE compression method: enum { null(0), DEFLATE(1), (255)
} CompressionMethod; As described in section 6 of RFC 2246 [2], TLS is a stateful protocol.
Compression methods used with TLS can be either stateful (the compressor maintains its state through all compressed records) or stateless (the compressor compresses each record independently), but there seems to be little known benefit in using a stateless compression method within TLS.
The DEFLATE compression method described in this document is stateful.
It is RECOMMENDED that other compression methods that might be standardized in the future be stateful as well.
Compression algorithms can occasionally expand, rather than compress, input data.
A compression method that exceeds the expansion limits described in section 6.2.2 of RFC 2246 [2] MUST NOT be used with TLS.
The DEFLATE compression method and encoding format is described in RFC 1951 [5].
Examples of DEFLATE use in IETF protocols can be found in RFC 1979 [6], RFC 2394 [7], and RFC 3274 [8].
DEFLATE allows the sending compressor to select from among several options to provide varying compression ratios, processing speeds, and memory requirements.
The receiving decompressor MUST automatically adjust to the parameters selected by the sender.
All data that was submitted for compression MUST be included in the compressed output, with no data retained to be included in a later output payload.
Flushing ensures that each compressed packet payload can be decompressed completely.
Compression History and Packet Processing
Some compression methods have the ability to maintain state/history information when compressing and decompressing packet payloads.
The compression history allows a higher compression ratio to be achieved on a stream as compared to per packet compression, but maintaining a history across packets implies that a packet might contain data needed to completely decompress data contained in a different packet.
History maintenance thus requires both a reliable link and sequenced packet delivery.
Since TLS and lower layer protocols provide reliable, sequenced packet delivery, compression history information MAY be maintained and exploited if supported by the compression method.
As described in section 7 of RFC 2246 [2], TLS allows multiple connections to be instantiated using the same session through the resumption feature of the TLS Handshake Protocol.
Session resumption has operational implications when multiple compression methods are available for use within the session.
For example, load balancers will need to maintain additional state information if the compression state is not cleared when a session is resumed.
As a result, the following restrictions MUST be observed when resuming a session: 1.
The compression algorithm MUST be retained when resuming a session.
The compression state/history MUST be cleared when resuming a session.
The compression method identifiers specified in this document are machine readable numbers.
As such, issues of human internationalization and localization are not introduced.
IANA Considerations Section 2 of this document describes a registry of compression method identifiers to be maintained by the IANA, including assignment of an identifier for the DEFLATE compression method.
Identifier values from the range 0
63 (decimal) inclusive are assigned via RFC 2434 Standards Action [3].
Values from the range 64 223 (decimal) inclusive are assigned via RFC 2434 Specification Required [3].
Identifier values from 224 255 (decimal) inclusive are reserved for RFC 2434
This document does not introduce any topics that alter the threat model addressed by TLS.
The security considerations described throughout RFC 2246 [2] apply here as well.
However, combining compression with encryption can sometimes reveal information that would not have been revealed without compression:
data that is the same length before compression might be a different length after compression, so adversaries that observe the length of the compressed data might be able to derive information about the corresponding uncompressed data.
Some symmetric encryption ciphersuites do not hide the length of symmetrically encrypted data at all.
Others hide it to some extent, but still do not hide it fully.
For example, ciphersuites that use stream cipher encryption without padding do not hide length at all; ciphersuites that use Cipher Block Chaining (CBC) encryption with padding provide some length hiding, depending on how the amount of padding is chosen.
Use of TLS compression SHOULD take into account that the length of compressed data may leak more information than the length of the original uncompressed data.
Compression algorithms tend to be mathematically complex and prone to implementation errors.
An implementation error that can produce a buffer overrun introduces a potential security risk for programming languages and operating systems that do not provide buffer overrun protections.
Careful consideration should thus be given to protections against implementation errors that introduce security risks.
As described in Section 2, compression algorithms can occasionally expand, rather than compress, input data.
This feature introduces the ability to construct rogue data that expands to some enormous size when compressed or decompressed.
RFC 2246 describes several methods to ameliorate this kind of attack.
First, compression has to be lossless.
Second, a limit (1,024 bytes) is placed on the amount of allowable compression content length increase.
Finally, a limit (2^14 bytes) is placed on the total content length.
See section 6.2.2 of RFC 2246 [2] for complete details.
