- title: __initial_text__
  contents:
  - '                       SNMP Administrative Model

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an IAB standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements. Please refer to the current edition of the \"IAB\n   Official\
    \ Protocol Standards\" for the standardization state and status\n   of this protocol.\
    \ Distribution of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.    Abstract  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  2\n   2.    Introduction  . . . . . . . . . . . . . . . . . . . .\
    \ . . .  2\n   3.    Elements of the Model . . . . . . . . . . . . . . . . . .\
    \ .  2\n   3.1   SNMP Party  . . . . . . . . . . . . . . . . . . . . . . . . \
    \ 2\n   3.2   SNMP Protocol Entity  . . . . . . . . . . . . . . . . . . .  6\n\
    \   3.3   SNMP Management Station . . . . . . . . . . . . . . . . . .  6\n   3.4\
    \   SNMP Agent  . . . . . . . . . . . . . . . . . . . . . . . .  7\n   3.5   View\
    \ Subtree  . . . . . . . . . . . . . . . . . . . . . . .  7\n   3.6   MIB View\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  7\n   3.7   SNMP Management\
    \ Communication . . . . . . . . . . . . . . .  8\n   3.8   SNMP Authenticated\
    \ Management Communication . . . . . . . .  9\n   3.9   SNMP Private Management\
    \ Communication   . . . . . . . . . .  9\n   3.10  SNMP Management Communication\
    \ Class . . . . . . . . . . . . 10\n   3.11  SNMP Access Control Policy  . . .\
    \ . . . . . . . . . . . . . 11\n   3.12  SNMP Proxy Party  . . . . . . . . . .\
    \ . . . . . . . . . . . 12\n   3.13  Procedures  . . . . . . . . . . . . . . .\
    \ . . . . . . . . . 13\n   3.13.1  Generating a Request  . . . . . . . . . . .\
    \ . . . . . . . 13\n   3.13.2  Processing a Received Communication . . . . . .\
    \ . . . . . 15\n   3.13.3  Generating a Response . . . . . . . . . . . . . . .\
    \ . . . 17\n   4.    Application of the Model  . . . . . . . . . . . . . . . .\
    \ . 17\n   4.1   Non-Secure Minimal Agent Configuration  . . . . . . . . . . 17\n\
    \   4.2   Secure Minimal Agent Configuration  . . . . . . . . . . . . 20\n   4.3\
    \   Proxy Configuration   . . . . . . . . . . . . . . . . . . . 21\n   4.3.1 \
    \  Foreign Proxy Configuration . . . . . . . . . . . . . . . 22\n   4.3.2   Native\
    \ Proxy Configuration  . . . . . . . . . . . . . . . 25\n   4.4   Public Key Configuration\
    \  . . . . . . . . . . . . . . . . . 27\n   4.5   MIB View Configurations . .\
    \ . . . . . . . . . . . . . . . . 29\n   5.    Compatibility . . . . . . . . .\
    \ . . . . . . . . . . . . . . 33\n   6.    Security Considerations . . . . . .\
    \ . . . . . . . . . . . . 33\n   7.    References  . . . . . . . . . . . . . .\
    \ . . . . . . . . . .\n   8.    Authors' Addresses  . . . . . . . . . . . . .\
    \ . . . . . . . 34\n"
- title: 1.  Abstract
  contents:
  - "1.  Abstract\n   This memo presents an elaboration of the SNMP administrative\
    \ model\n   set forth in [1]. This model provides a unified conceptual basis for\n\
    \   administering SNMP protocol entities to support\n     o authentication and\
    \ integrity,\n     o privacy,\n     o access control, and\n     o the cooperation\
    \ of multiple protocol entities.\n   Please send comments to the SNMP Security\
    \ Developers mailing list\n   (snmp-sec-dev@tis.com).\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   This memo presents an elaboration of the SNMP administrative\
    \ model\n   set forth in [1]. It describes how the elaborated administrative\n\
    \   model is applied to realize effective network management in a variety\n  \
    \ of configurations and environments.\n   The model described here entails the\
    \ use of distinct identities for\n   peers that exchange SNMP messages. Thus,\
    \ it represents a departure\n   from the community-based administrative model\
    \ set forth in [1]. By\n   unambiguously identifying the source and intended recipient\
    \ of each\n   SNMP message, this new strategy improves upon the historical\n \
    \  community scheme both by supporting a more convenient access control\n   model\
    \ and allowing for effective use of asymmetric (public key)\n   security protocols\
    \ in the future.\n"
- title: 3.  Elements of the Model
  contents:
  - '3.  Elements of the Model

    '
- title: 3.1   SNMP Party
  contents:
  - "3.1   SNMP Party\n   A SNMP party  is a conceptual, virtual execution context\
    \ whose\n   operation is restricted (for security or other purposes) to an\n \
    \  administratively defined subset of all possible operations of a\n   particular\
    \ SNMP protocol entity (see Section 3.2).  Whenever a SNMP\n   protocol entity\
    \ processes a SNMP message, it does so by acting as a\n   SNMP party and is thereby\
    \ restricted to the set of operations defined\n   for that party. The set of possible\
    \ operations specified for a SNMP\n   party may be overlapping or disjoint with\
    \ respect to the sets of\n   other SNMP parties; it may also be a proper or improper\
    \ subset of all\n   possible operations of the SNMP protocol entity.\n   Architecturally,\
    \ each SNMP party comprises\n     o a single, unique party identity,\n     o a\
    \ single authentication protocol and associated\n       parameters by which all\
    \ protocol messages originated by\n       the party are authenticated as to origin\
    \ and integrity,\n     o a single privacy protocol and associated parameters by\n\
    \       which all protocol messages received by the party are\n       protected\
    \ from disclosure,\n     o a single MIB view (see Section 3.6) to which all\n\
    \       management operations performed by the party are\n       applied, and\n\
    \     o a logical network location at which the party executes,\n       characterized\
    \ by a transport protocol domain and\n       transport addressing information.\n\
    \   Conceptually, each SNMP party may be represented by an ASN.1 value\n   with\
    \ the following syntax:\n      SnmpParty ::= SEQUENCE {\n        partyIdentity\n\
    \           OBJECT IDENTIFIER,\n        partyTDomain\n           OBJECT IDENTIFIER,\n\
    \        partyTAddr\n           OCTET STRING,\n        partyProxyFor\n       \
    \    OBJECT IDENTIFIER,\n        partyMaxMessageSize\n           INTEGER,\n  \
    \      partyAuthProtocol\n           OBJECT IDENTIFIER,\n        partyAuthClock\n\
    \           INTEGER,\n        partyAuthLastMsg\n           INTEGER,\n        partyAuthNonce\n\
    \           INTEGER,\n        partyAuthPrivate\n           OCTET STRING,\n   \
    \     partyAuthPublic\n           OCTET STRING,\n        partyAuthLifetime\n \
    \          INTEGER,\n        partyPrivProtocol\n           OBJECT IDENTIFIER,\n\
    \        partyPrivPrivate\n           OCTET STRING,\n        partyPrivPublic\n\
    \           OCTET STRING\n      }\n   For each SnmpParty value that represents\
    \ a SNMP party, the following\n   statements are true:\n     o Its partyIdentity\
    \ component is the party identity.\n     o Its partyTDomain component is called\
    \ the transport\n       domain and indicates the kind of transport service by\n\
    \       which the party receives network management traffic.\n       An example\
    \ of a transport domain is\n       rfc1351Domain (SNMP over UDP, using SNMP\n\
    \       parties).\n     o Its partyTAddr component is called the transport\n \
    \      addressing information and represents a transport\n       service address\
    \ by which the party receives network\n       management traffic.\n     o Its\
    \ partyProxyFor component is called the proxied\n       party  and represents\
    \ the identity of a second SNMP\n       party or other management entity with\
    \ which\n       interaction may be necessary to satisfy received\n       management\
    \ requests. In this context, the value\n       noProxy signifies that the party\
    \ responds to received\n       management requests by entirely local mechanisms.\n\
    \     o Its partyMaxMessageSize component is called the\n       maximum message\
    \ size and represents the length in\n       octets of the largest SNMP message\
    \ this party is\n       prepared to accept.\n     o Its partyAuthProtocol component\
    \ is called the\n       authentication protocol and identifies a protocol and\
    \ a\n       mechanism by which all messages generated by the party\n       are\
    \ authenticated as to integrity and origin. In this\n       context, the value\
    \ noAuth signifies that messages\n       generated by the party are not authenticated\
    \ as to\n       integrity and origin.\n     o Its partyAuthClock component is\
    \ called the\n       authentication clock and represents a notion of the\n   \
    \    current time that is specific to the party. The\n       significance of this\
    \ component is specific to the\n       authentication protocol.\n     o Its partyAuthLastMsg\
    \ component is called the\n       last-timestamp and represents a notion of time\n\
    \       associated with the most recent, authentic protocol\n       message generated\
    \ by the party. The significance of this\n       component is specific to the\
    \ authentication protocol.\n     o Its partyAuthNonce component is called the\
    \ nonce\n       and represents a monotonically increasing integer\n       associated\
    \ with the most recent, authentic protocol\n       message generated by the party.\
    \ The significance of this\n       component is specific to the authentication\
    \ protocol.\n     o Its partyAuthPrivate component is called the private\n   \
    \    authentication key and represents any secret value\n       needed to support\
    \ the authentication protocol. The\n       significance of this component is specific\
    \ to the\n       authentication protocol.\n     o Its partyAuthPublic component\
    \ is called the public\n       authentication key and represents any public value\
    \ that\n       may be needed to support the authentication protocol.\n       The\
    \ significance of this component is specific to the\n       authentication protocol.\n\
    \     o Its partyAuthLifetime component is called the\n       lifetime and represents\
    \ an administrative upper bound\n       on acceptable delivery delay for protocol\
    \ messages\n       generated by the party. The significance of this\n       component\
    \ is specific to the authentication protocol.\n     o Its partyPrivProtocol component\
    \ is called the privacy\n       protocol and identifies a protocol and a mechanism\
    \ by\n       which all protocol messages received by the party are\n       protected\
    \ from disclosure. In this context, the value\n       noPriv signifies that messages\
    \ received by the party are\n       not protected from disclosure.\n     o Its\
    \ partyPrivPrivate component is called the private\n       privacy key and represents\
    \ any secret value needed to\n       support the privacy protocol. The significance\
    \ of this\n       component is specific to the privacy protocol.\n     o Its partyPrivPublic\
    \ component is called the public\n       privacy key and represents any public\
    \ value that may be\n       needed to support the privacy protocol. The significance\n\
    \       of this component is specific to the privacy protocol.\n   If, for all\
    \ SNMP parties realized by a SNMP protocol entity, the\n   authentication protocol\
    \ is noAuth and the privacy protocol is noPriv,\n   then that protocol entity\
    \ is called non-secure.\n"
- title: 3.2   SNMP Protocol Entity
  contents:
  - "3.2   SNMP Protocol Entity\n   A SNMP protocol entity is an actual process which\
    \ performs network\n   management operations by generating and/or responding to\
    \ SNMP\n   protocol messages in the manner specified in [1]. When a protocol\n\
    \   entity is acting as a particular SNMP party (see Section 3.1), the\n   operation\
    \ of that entity must be restricted to the subset of all\n   possible operations\
    \ that is administratively defined for that party.\n   By definition, the operation\
    \ of a SNMP protocol entity requires no\n   concurrency between processing of\
    \ any single protocol message (by a\n   particular SNMP party) and processing\
    \ of any other protocol message\n   (by a potentially different SNMP party). Accordingly,\
    \ implementation\n   of a SNMP protocol entity to support more than one party\
    \ need not be\n   multi-threaded. However, there may be situations where implementors\n\
    \   may choose to use multi-threading.\n   Architecturally, every SNMP entity\
    \ maintains a local database that\n   represents all SNMP parties known to it\
    \ -- those whose operation is\n   realized locally, those whose operation is realized\
    \ by proxy\n   interactions with remote parties or devices, and those whose\n\
    \   operation is realized by remote entities. In addition, every SNMP\n   protocol\
    \ entity maintains a local database that represents an access\n   control policy\
    \ (see Section 3.11) that defines the access privileges\n   accorded to known\
    \ SNMP parties.\n"
- title: 3.3   SNMP Management Station
  contents:
  - "3.3   SNMP Management Station\n   A SNMP management station is the operational\
    \ role assumed by a SNMP\n   party when it initiates SNMP management operations\
    \ by the generation\n   of appropriate SNMP protocol messages or when it receives\
    \ and\n   processes trap notifications.\n   Sometimes, the term SNMP management\
    \ station is applied to partial\n   implementations of the SNMP (in graphics workstations,\
    \ for example)\n   that focus upon this operational role. Such partial implementations\n\
    \   may provide for convenient, local invocation of management services,\n   but\
    \ they may provide little or no support for performing SNMP\n   management operations\
    \ on behalf of remote protocol users.\n"
- title: 3.4   SNMP Agent
  contents:
  - "3.4   SNMP Agent\n   A SNMP agent is the operational role assumed by a SNMP party\
    \ when it\n   performs SNMP management operations in response to received SNMP\n\
    \   protocol messages such as those generated by a SNMP management\n   station\
    \ (see Section 3.3).\n   Sometimes, the term SNMP agent is applied to partial\
    \ implementations\n   of the SNMP (in embedded systems, for example) that focus\
    \ upon this\n   operational role. Such partial implementations provide for\n \
    \  realization of SNMP management operations on behalf of remote users\n   of\
    \ management services, but they may provide little or no support for\n   local\
    \ invocation of such services.\n"
- title: 3.5   View Subtree
  contents:
  - "3.5   View Subtree\n   A view subtree is the set of all MIB object instances\
    \ which have a\n   common ASN.1 OBJECT IDENTIFIER prefix to their names. A view\
    \ subtree\n   is identified by the OBJECT IDENTIFIER value which is the longest\n\
    \   OBJECT IDENTIFIER prefix common to all (potential) MIB object\n   instances\
    \ in that subtree.\n"
- title: 3.6   MIB View
  contents:
  - "3.6   MIB View\n   A MIB view is a subset of the set of all instances of all\
    \ object\n   types defined according to the Internet-standard SMI [2] (i.e., of\n\
    \   the universal set of all instances of all MIB objects), subject to\n   the\
    \ following constraints:\n     o Each element of a MIB view is uniquely named\
    \ by an\n       ASN.1 OBJECT IDENTIFIER value. As such,\n       identically named\
    \ instances of a particular object type\n       (e.g., in different agents) must\
    \ be contained within\n       different MIB views. That is, a particular object\n\
    \       instance name resolves within a particular MIB view to\n       at most\
    \ one object instance.\n     o Every MIB view is defined as a collection of view\n\
    \       subtrees.\n"
- title: 3.7   SNMP Management Communication
  contents:
  - "3.7   SNMP Management Communication\n   A SNMP management communication is a\
    \ communication from one specified\n   SNMP party to a second specified SNMP party\
    \ about management\n   information that is represented in the MIB view of the\
    \ appropriate\n   party. In particular, a SNMP management communication may be\n\
    \     o a query by the originating party about information in\n       the MIB\
    \ view of the addressed party (e.g., getRequest\n       and getNextRequest),\n\
    \     o an indicative assertion to the addressed party about\n       information\
    \ in the MIB view of the originating party\n       (e.g., getResponse or trapNotification),\
    \ or\n     o an imperative assertion by the originating party about\n       information\
    \ in the MIB view of the addressed party\n       (e.g., setRequest).\n   A management\
    \ communication is represented by an ASN.1 value with the\n   syntax\n      SnmpMgmtCom\
    \ ::= [1] IMPLICIT SEQUENCE {\n        dstParty\n           OBJECT IDENTIFIER,\n\
    \        srcParty\n           OBJECT IDENTIFIER,\n        pdu\n           PDUs\n\
    \      }\n   For each SnmpMgmtCom value that represents a SNMP management\n  \
    \ communication, the following statements are true:\n     o Its dstParty component\
    \ is called the destination and\n       identifies the SNMP party to which the\
    \ communication\n       is directed.\n     o Its srcParty component is called\
    \ the source and\n       identifies the SNMP party from which the\n       communication\
    \ is originated.\n     o Its pdu component has the form and significance\n   \
    \    attributed to it in [1].\n"
- title: 3.8   SNMP Authenticated Management Communication
  contents:
  - "3.8   SNMP Authenticated Management Communication\n   A SNMP authenticated management\
    \ communication is a SNMP management\n   communication (see Section 3.7) for which\
    \ the originating SNMP party\n   is (possibly) reliably identified and for which\
    \ the integrity of the\n   transmission of the communication is (possibly) protected.\
    \ An\n   authenticated management communication is represented by an ASN.1\n \
    \  value with the syntax\n      SnmpAuthMsg ::= [1] IMPLICIT SEQUENCE {\n    \
    \    authInfo\n           ANY, - defined by authentication protocol\n        authData\n\
    \           SnmpMgmtCom\n      }\n   For each SnmpAuthMsg value that represents\
    \ a SNMP authenticated\n   management communication, the following statements\
    \ are true:\n     o Its authInfo component is called the authentication\n    \
    \   information and represents information required in\n       support of the\
    \ authentication protocol used by the\n       SNMP party originating the message.\
    \ The detailed\n       significance of the authentication information is specific\n\
    \       to the authentication protocol in use; it has no effect on\n       the\
    \ application semantics of the communication other\n       than its use by the\
    \ authentication protocol in\n       determining whether the communication is\
    \ authentic or\n       not.\n     o Its authData component is called the authentication\n\
    \       data and represents a SNMP management\n       communication.\n"
- title: 3.9   SNMP Private Management Communication
  contents:
  - "3.9   SNMP Private Management Communication\n   A SNMP private management communication\
    \ is a SNMP authenticated\n   management communication (see Section 3.8) that\
    \ is (possibly)\n   protected from disclosure. A private management communication\
    \ is\n   represented by an ASN.1 value with the syntax\n      SnmpPrivMsg ::=\
    \ [1] IMPLICIT SEQUENCE {\n        privDst\n           OBJECT IDENTIFIER,\n  \
    \      privData\n           [1] IMPLICIT OCTET STRING\n      }\n   For each SnmpPrivMsg\
    \ value that represents a SNMP private management\n   communication, the following\
    \ statements are true:\n     o Its privDst component is called the privacy destination\n\
    \       and identifies the SNMP party to which the\n       communication is directed.\n\
    \     o Its privData component is called the privacy data and\n       represents\
    \ the (possibly encrypted) serialization\n       (according to the conventions\
    \ of [3] and [1]) of a SNMP\n       authenticated management communication (see\n\
    \       Section 3.8).\n"
- title: 3.10   SNMP Management Communication Class
  contents:
  - "3.10   SNMP Management Communication Class\n   A SNMP management communication\
    \ class corresponds to a specific SNMP\n   PDU type defined in [1]. A management\
    \ communication class is\n   represented by an ASN.1 INTEGER value according to\
    \ the type of the\n   identifying PDU (see Table 1).\n                  Get  \
    \           1\n                  GetNext         2\n                  GetResponse\
    \     4\n                  Set             8\n                  Trap         \
    \  16\n         Table 1: Management Communication Classes\n   The value by which\
    \ a communication class is represented is computed\n   as 2 raised to the value\
    \ of the ASN.1 context-specific tag for the\n   appropriate SNMP PDU.\n   A set\
    \ of management communication classes is represented by the ASN.1\n   INTEGER\
    \ value that is the sum of the representations of the\n   communication classes\
    \ in that set. The null set is represented by the\n   value zero.\n"
- title: 3.11   SNMP Access Control Policy
  contents:
  - "3.11   SNMP Access Control Policy\n   A SNMP access control policy is a specification\
    \ of a local access\n   policy in terms of the network management communication\
    \ classes which\n   are authorized between pairs of SNMP parties. Architecturally,\
    \ such a\n   specification comprises three parts:\n     o the targets of SNMP\
    \ access control - the SNMP parties\n       that may perform management operations\
    \ as requested\n       by management communications received from other\n    \
    \   parties,\n     o the subjects of SNMP access control - the SNMP parties\n\
    \       that may request, by sending management\n       communications to other\
    \ parties, that management\n       operations be performed, and\n     o the policy\
    \ that specifies the classes of SNMP\n       management communications that a\
    \ particular target is\n       authorized to accept from a particular subject.\n\
    \   Access to individual MIB object instances is determined implicitly\n   since\
    \ by definition each (target) SNMP party performs operations on\n   exactly one\
    \ MIB view. Thus, defining the permitted access of a\n   (reliably) identified\
    \ subject party to a particular target party\n   effectively defines the access\
    \ permitted by that subject to that\n   target's MIB view and, accordingly, to\
    \ particular MIB object\n   instances.\n   Conceptually, a SNMP access policy\
    \ is represented by a collection of\n   ASN.1 values with the following syntax:\n\
    \      AclEntry ::= SEQUENCE {\n        aclTarget\n           OBJECT IDENTIFIER,\n\
    \        aclSubject\n           OBJECT IDENTIFIER,\n        aclPrivileges\n  \
    \         INTEGER\n      }\n   For each such value that represents one part of\
    \ a SNMP access policy,\n   the following statements are true:\n     o Its aclTarget\
    \ component is called the target and\n       identifies the SNMP party to which\
    \ the partial policy\n       permits access.\n     o Its aclSubject component\
    \ is called the subject and\n       identifies the SNMP party to which the partial\
    \ policy\n       grants privileges.\n     o Its aclPrivileges component is called\
    \ the privileges and\n       represents a set of SNMP management communication\n\
    \       classes that are authorized to be processed by the\n       specified target\
    \ party when received from the specified\n       subject party.\n"
- title: 3.12   SNMP Proxy Party
  contents:
  - "3.12   SNMP Proxy Party\n   A SNMP proxy party is a SNMP party that performs\
    \ management\n   operations by communicating with another, logically remote party.\n\
    \   When communication between a logically remote party and a SNMP proxy\n   party\
    \ is via the SNMP (over any transport protocol), then the proxy\n   party is called\
    \ a SNMP native proxy party. Deployment of SNMP native\n   proxy parties is a\
    \ means whereby the processing or bandwidth costs of\n   management may be amortized\
    \ or shifted -- thereby facilitating the\n   construction of large management\
    \ systems.\n   When communication between a logically remote party and a SNMP\
    \ proxy\n   party is not via the SNMP, then the proxy party is called a SNMP\n\
    \   foreign proxy party. Deployment of foreign proxy parties is a means\n   whereby\
    \ otherwise unmanageable devices or portions of an internet may\n   be managed\
    \ via the SNMP.\n   The transparency principle that defines the behavior of a\
    \ SNMP party\n   in general applies in particular to a SNMP proxy party:\n   \
    \    The manner in which one SNMP party processes\n       SNMP protocol messages\
    \ received from another\n       SNMP party is entirely transparent to the latter.\n\
    \   The transparency principle derives directly from the historical SNMP\n   philosophy\
    \ of divorcing architecture from implementation. To this\n   dichotomy are attributable\
    \ many of the most valuable benefits in both\n   the information and distribution\
    \ models of the management framework,\n   and it is the architectural cornerstone\
    \ upon which large management\n   systems may be built. Consistent with this philosophy,\
    \ although the\n   implementation of SNMP proxy agents in certain environments\
    \ may\n   resemble that of a transport-layer bridge, this particular\n   implementation\
    \ strategy (or any other!) does not merit special\n   recognition either in the\
    \ SNMP management architecture or in standard\n   mechanisms for proxy administration.\n\
    \   Implicit in the transparency principle is the requirement that the\n   semantics\
    \ of SNMP management operations are preserved between any two\n   SNMP peers.\
    \ In particular, the \"as if simultaneous\" semantics of a\n   Set operation are\
    \ extremely difficult to guarantee if its scope\n   extends to management information\
    \ resident at multiple network\n   locations. For this reason, proxy configurations\
    \ that admit Set\n   operations that apply to information at multiple locations\
    \ are\n   discouraged, although such operations are not explicitly precluded by\n\
    \   the architecture in those rare cases where they might be supported in\n  \
    \ a conformant way.\n   Also implicit in the transparency principle is the requirement\
    \ that,\n   throughout its interaction with a proxy agent, a management station\n\
    \   is supplied with no information about the nature or progress of the\n   proxy\
    \ mechanisms by which its requests are realized. That is, it\n   should seem to\
    \ the management station -- except for any distinction\n   in underlying transport\
    \ address -- as if it were interacting via SNMP\n   directly with the proxied\
    \ device. Thus, a timeout in the\n   communication between a proxy agent and its\
    \ proxied device should be\n   represented as a timeout in the communication between\
    \ the management\n   station and the proxy agent. Similarly, an error response\
    \ from a\n   proxied device should -- as much as possible -- be represented by\
    \ the\n   corresponding error response in the interaction between the proxy\n\
    \   agent and management station.\n"
- title: 3.13   Procedures
  contents:
  - "3.13   Procedures\n   This section describes the procedures followed by a SNMP\
    \ protocol\n   entity in processing SNMP messages. These procedures are independent\n\
    \   of the particular authentication and privacy protocols that may be in\n  \
    \ use.\n"
- title: 3.13.1   Generating a Request
  contents:
  - "3.13.1   Generating a Request\n   This section describes the procedure followed\
    \ by a SNMP protocol\n   entity whenever either a management request or a trap\
    \ notification is\n   to be transmitted by a SNMP party.\n    1. An ASN.1 SnmpMgmtCom\
    \ value is constructed for\n       which the srcParty component identifies the\
    \ originating\n       party, for which the dstParty component identifies the\n\
    \       receiving party, and for which the other component\n       represents\
    \ the desired management operation.\n    2. The local database is consulted to\
    \ determine the\n       authentication protocol and other relevant information\n\
    \       for the originating SNMP party.\n    3. An ASN.1 SnmpAuthMsg value is\
    \ constructed with\n       the following properties:\n        o Its authInfo component\
    \ is constructed according\n          to the authentication protocol specified\
    \ for the\n          originating party.\n          In particular, if the authentication\
    \ protocol for the\n          originating SNMP party is identified as noAuth,\n\
    \          then this component corresponds to the OCTET\n          STRING value\
    \ of zero length.\n        o Its authData component is the constructed\n     \
    \     SnmpMgmtCom value.\n    4. The local database is consulted to determine\
    \ the privacy\n       protocol and other relevant information for the receiving\n\
    \       SNMP party.\n    5. An ASN.1 SnmpPrivMsg value is constructed with the\n\
    \       following properties:\n        o Its privDst component identifies the\
    \ receiving\n          SNMP party.\n        o Its privData component is the (possibly\n\
    \          encrypted) serialization of the SnmpAuthMsg\n          value according\
    \ to the conventions of [3] and [1].\n          In particular, if the privacy\
    \ protocol for the\n          receiving SNMP party is identified as noPriv, then\n\
    \          the privData component is unencrypted.\n          Otherwise, the privData\
    \ component is processed\n          according to the privacy protocol.\n    6.\
    \ The constructed SnmpPrivMsg value is serialized\n       according to the conventions\
    \ of [3] and [1].\n    7. The serialized SnmpPrivMsg value is transmitted\n  \
    \     using the transport address and transport domain for\n       the receiving\
    \ SNMP party.\n"
- title: 3.13.2   Processing a Received Communication
  contents:
  - "3.13.2   Processing a Received Communication\n   This section describes the procedure\
    \ followed by a SNMP protocol\n   entity whenever a management communication is\
    \ received.\n    1. If the received message is not the serialization (according\n\
    \       to the conventions of [3] and [1]) of an ASN.1\n       SnmpPrivMsg value,\
    \ then that message is discarded\n       without further processing.\n    2. The\
    \ local database is consulted for information about\n       the receiving SNMP\
    \ party identified by the privDst\n       component of the SnmpPrivMsg value.\n\
    \    3. If information about the receiving SNMP party is absent\n       from the\
    \ local database, or specifies a transport domain\n       and address which indicates\
    \ that the receiving party's\n       operation is not realized by the local SNMP\
    \ protocol\n       entity, then the received message is discarded without\n  \
    \     further processing.\n    4. An ASN.1 OCTET STRING value is constructed\n\
    \       (possibly by decryption, according to the privacy\n       protocol in\
    \ use) from the privData component of said\n       SnmpPrivMsg value.\n      \
    \ In particular, if the privacy protocol recorded for the\n       party is noPriv,\
    \ then the OCTET STRING value\n       corresponds exactly to the privData component\
    \ of the\n       SnmpPrivMsg value.\n    5. If the OCTET STRING value is not the\
    \ serialization\n       (according to the conventions of [3] and [1]) of an ASN.1\n\
    \       SnmpAuthMsg value, then the received message is\n       discarded without\
    \ further processing.\n    6. If the dstParty component of the authData\n    \
    \   component of the obtained SnmpAuthMsg value is\n       not the same as the\
    \ privDst component of the\n       SnmpPrivMsg value, then the received message\
    \ is\n       discarded without further processing.\n    7. The local database\
    \ is consulted for information about\n       the originating SNMP party identified\
    \ by the srcParty\n       component of the authData component of the\n       SnmpAuthMsg\
    \ value.\n    8. If information about the originating SNMP party is\n       absent\
    \ from the local database, then the received\n       message is discarded without\
    \ further processing.\n    9. The obtained SnmpAuthMsg value is evaluated\n  \
    \     according to the authentication protocol and other\n       relevant information\
    \ associated with the originating\n       SNMP party in the local database.\n\
    \       In particular, if the authentication protocol is identified\n       as\
    \ noAuth, then the SnmpAuthMsg value is always\n       evaluated as authentic.\n\
    \   10. If the SnmpAuthMsg value is evaluated as\n       unauthentic, then the\
    \ received message is discarded\n       without further processing, and an authentication\
    \ failure\n       is noted.\n   11. The ASN.1 SnmpMgmtCom value is extracted from\n\
    \       the authData component of the SnmpAuthMsg\n       value.\n   12. The local\
    \ database is consulted for access privileges\n       permitted by the local access\
    \ policy to the originating\n       SNMP party with respect to the receiving SNMP\
    \ party.\n   13. The management communication class is determined\n       from\
    \ the ASN.1 tag value associated with the\n       SnmpMgmtCom value.\n   14. If\
    \ the management communication class of the received\n       message is either\
    \ 16 or 4 (i.e., Trap or GetResponse) and\n       this class is not among the\
    \ access privileges, then the\n       received message is discarded without further\
    \ processing.\n   15. If the management communication class of the received\n\
    \       message is not among the access privileges, then the\n       received\
    \ message is discarded without further processing\n       after generation and\
    \ transmission of a response message.\n       This response message is directed\
    \ to the originating\n       SNMP party on behalf of the receiving SNMP party.\
    \ Its\n       var-bind-list and request-id components are identical\n       to\
    \ those of the received request. Its error-index\n       component is zero and\
    \ its error-status component is\n       readOnly.\n   16. If the proxied party\
    \ associated with the receiving SNMP\n       party in the local database is identified\
    \ as noProxy,\n       then the management operation represented by the\n     \
    \  SnmpMgmtCom value is performed by the receiving\n       SNMP protocol entity\
    \ with respect to the MIB view\n       identified with the receiving SNMP party\
    \ according to\n       the procedures set forth in [1].\n   17. If the proxied\
    \ party associated with the receiving SNMP\n       party in the local database\
    \ is not identified as noProxy,\n       then the management operation represented\
    \ by the\n       SnmpMgmtCom value is performed through\n       appropriate cooperation\
    \ between the receiving SNMP\n       party and the identified proxied party.\n\
    \       In particular, if the transport domain associated with\n       the identified\
    \ proxied party in the local database is\n       rfc1351Domain, then the operation\
    \ requested by\n       the received message is performed by the generation of\
    \ a\n       corresponding request to the proxied party on behalf of\n       the\
    \ receiving party. If the received message requires a\n       response from the\
    \ local SNMP protocol entity, then that\n       response is subsequently generated\
    \ from the response (if\n       any) received from the proxied party corresponding\
    \ to\n       the newly generated request.\n"
- title: 3.13.3   Generating a Response
  contents:
  - "3.13.3   Generating a Response\n   This section describes the procedure followed\
    \ by a SNMP protocol\n   entity whenever a response to a management request is\
    \ generated.\n   The procedure for generating a response to a SNMP management\
    \ request\n   is identical to the procedure for transmitting a request (see Section\n\
    \   3.13.1), except for the derivation of the transport domain and\n   address\
    \ information.  In this case, the response is transmitted using\n   the transport\
    \ domain and address from which the corresponding request\n   originated -- even\
    \ if that is different from the transport\n   information recorded in the local\
    \ database.\n"
- title: 4.  Application of the Model
  contents:
  - "4.  Application of the Model\n   This section describes how the administrative\
    \ model set forth above\n   is applied to realize effective network management\
    \ in a variety of\n   configurations and environments. Several types of administrative\n\
    \   configurations are identified, and an example of each is presented.\n"
- title: 4.1   Non-Secure Minimal Agent Configuration
  contents:
  - "4.1   Non-Secure Minimal Agent Configuration\n   This section presents an example\
    \ configuration for a minimal, non-\n   secure SNMP agent that interacts with\
    \ one or more SNMP management\n   stations. Table 2 presents information about\
    \ SNMP parties that is\n   known both to the minimal agent and to the manager,\
    \ while Table 3\n   presents similarly common information about the local access\
    \ policy.\n   As represented in Table 2, the example agent party operates at UDP\n\
    \   port 161 at IP address 1.2.3.4 using the party identity gracie; the\n   example\
    \ manager operates at UDP port 2001 at IP address 1.2.3.5 using\n   the identity\
    \ george. At minimum, a non-secure SNMP agent\n   implementation must provide\
    \ for administrative configuration (and\n   non-volatile storage) of the identities\
    \ and transport addresses of\n   two SNMP parties: itself and a remote peer. Strictly\
    \ speaking, other\n   information about these two parties (including access policy\n\
    \   information) need not be configurable.\n   Suppose that the managing party\
    \ george wishes to interrogate the\n   agent named gracie by issuing a SNMP GetNext\
    \ request message. The\n   manager consults its local database of party information.\
    \ Because the\n   authentication protocol for the party george is recorded as\
    \ noAuth,\n   the GetNext request message generated by the manager is not\n  \
    \  Identity          gracie                george\n                      (agent)\
    \               (manager)\n    Domain            rfc1351Domain         rfc1351Domain\n\
    \    Address           1.2.3.4, 161          1.2.3.5, 2001\n    Proxied Party\
    \     noProxy               noProxy\n    Auth Prot         noAuth            \
    \    noAuth\n    Auth Priv Key     \"\"                    \"\"\n    Auth Pub\
    \ Key      \"\"                    \"\"\n    Auth Clock        0             \
    \        0\n    Auth Last Msg     0                     0\n    Auth Lifetime \
    \    0                     0\n    Priv Prot         noPriv                noPriv\n\
    \    Priv Priv Key     \"\"                    \"\"\n    Priv Pub Key      \"\"\
    \                    \"\"\n         Table 2: Party Information for Minimal Agent\n\
    \              Target    Subject   Privileges\n              gracie    george\
    \    3\n              george    gracie    20\n        Table 3: Access Information\
    \ for Minimal Agent\n   authenticated as to origin and integrity. Because, according\
    \ to the\n   manager's database, the privacy protocol for the party gracie is\n\
    \   noPriv, the GetNext request message is not protected from disclosure.\n  \
    \ Rather, it is simply assembled, serialized, and transmitted to the\n   transport\
    \ address (IP address 1.2.3.4, UDP port 161) associated in\n   the manager's database\
    \ with the party gracie.\n   When the GetNext request message is received at the\
    \ agent, the\n   identity of the party to which it is directed (gracie) is extracted\n\
    \   from the message, and the receiving protocol entity consults its\n   local\
    \ database of party information. Because the privacy protocol for\n   the party\
    \ gracie is recorded as noPriv, the received message is\n   assumed not to be\
    \ protected from disclosure. Similarly, the identity\n   of the originating party\
    \ (george) is extracted, and the local party\n   database is consulted. Because\
    \ the authentication protocol for the\n   party george is recorded as noAuth,\
    \ the received message is\n   immediately accepted as authentic.\n   The received\
    \ message is fully processed only if the access policy\n   database local to the\
    \ agent authorizes GetNext request communications\n   by the party george with\
    \ respect to the agent party gracie. The\n   access policy database presented\
    \ as Table 3 authorizes such\n   communications (as well as Get operations).\n\
    \   When the received request is processed, a GetResponse message is\n   generated\
    \ with gracie as the source party and george, the party from\n   which the request\
    \ originated, as the destination party. Because the\n   authentication protocol\
    \ for gracie is recorded in the local party\n   database as noAuth, the generated\
    \ GetResponse message is not\n   authenticated as to origin or integrity. Because,\
    \ according to the\n   local database, the privacy protocol for the party george\
    \ is noPriv,\n   the response message is not protected from disclosure. The response\n\
    \   message is transmitted to the transport address from which the\n   corresponding\
    \ request originated -- without regard for the transport\n   address associated\
    \ with george in the local database.\n   When the generated response is received\
    \ by the manager, the identity\n   of the party to which it is directed (george)\
    \ is extracted from the\n   message, and the manager consults its local database\
    \ of party\n   information. Because the privacy protocol for the party george\
    \ is\n   recorded as noPriv, the received response is assumed not to be\n   protected\
    \ from disclosure. Similarly, the identity of the originating\n   party (gracie)\
    \ is extracted, and the local party database is\n   consulted. Because the authentication\
    \ protocol for the party gracie\n   is recorded as noAuth, the received response\
    \ is immediately accepted\n   as authentic.\n   The received message is fully\
    \ processed only if the access policy\n   database local to the manager authorizes\
    \ GetResponse communications\n   by the party gracie with respect to the manager\
    \ party george. The\n   access policy database presented as Table 3 authorizes\
    \ such response\n   messages (as well as Trap messages).\n"
- title: 4.2   Secure Minimal Agent Configuration
  contents:
  - "4.2   Secure Minimal Agent Configuration\n   This section presents an example\
    \ configuration for a secure, minimal\n   SNMP agent that interacts with a single\
    \ SNMP management station.\n   Table 4 presents information about SNMP parties\
    \ that is known both to\n   the minimal agent and to the manager, while Table\
    \ 5 presents\n   similarly common information about the local access policy.\n\
    \   The interaction of manager and agent in this configuration is very\n   similar\
    \ to that sketched above for the non-secure minimal agent --\n   except that all\
    \ protocol messages are authenticated as to origin and\n   integrity and protected\
    \ from disclosure. This example requires\n   encryption in order to support distribution\
    \ of secret keys via the\n   SNMP itself. A more elaborate example comprising\
    \ an additional pair\n   of SNMP parties could support the exchange of non-secret\
    \ information\n   in authenticated messages without incurring the cost of encryption.\n\
    \   An actual secure agent configuration may require SNMP parties for\n   which\
    \ the authentication and privacy protocols are noAuth and noPriv,\n   respectively,\
    \ in order to support clock synchronization (see [4]).\n   For clarity, these\
    \ additional parties are not represented in this\n   example.\n     Identity \
    \         ollie                stan\n                       (agent)          \
    \    (manager)\n     Domain            rfc1351Domain        rfc1351Domain\n  \
    \   Address           1.2.3.4, 161         1.2.3.5, 2001\n     Proxied Party \
    \    noProxy              noProxy\n     Auth Prot         md5AuthProtocol    \
    \  md5AuthProtocol\n     Auth Priv Key     \"0123456789ABCDEF\"   \"GHIJKL0123456789\"\
    \n     Auth Pub Key      \"\"                   \"\"\n     Auth Clock        0\
    \                    0\n     Auth Last Msg     0                    0\n     Auth\
    \ Lifetime     500                  500\n     Priv Prot         desPrivProtocol\
    \      desPrivProtocol\n     Priv Priv Key     \"MNOPQR0123456789\"   \"STUVWX0123456789\"\
    \n     Priv Pub Key      \"\"                   \"\"\n      Table 4: Party Information\
    \ for Secure Minimal Agent\n               Target   Subject   Privileges\n   \
    \            ollie    stan      3\n               stan     ollie     20\n    \
    \  Table 5: Access Information for Secure Minimal Agent\n   As represented in\
    \ Table 4, the example agent party operates at UDP\n   port 161 at IP address\
    \ 1.2.3.4 using the party identity ollie; the\n   example manager operates at\
    \ UDP port 2001 at IP address 1.2.3.5 using\n   the identity stan. At minimum,\
    \ a secure SNMP agent implementation\n   must provide for administrative configuration\
    \ (and non-volatile\n   storage) of relevant information about two SNMP parties:\
    \ itself and a\n   remote peer. Both ollie and stan authenticate all messages\
    \ that they\n   generate by using the SNMP authentication protocol md5AuthProtocol\n\
    \   and their distinct, private authentication keys. Although these\n   private\
    \ authentication key values (\"0123456789ABCDEF\" and\n   \"GHIJKL0123456789\"\
    ) are presented here for expository purposes,\n   knowledge of private authentication\
    \ keys is not normally afforded to\n   human beings and is confined to those portions\
    \ of the protocol\n   implementation that require it.\n   When using the md5AuthProtocol,\
    \ the public authentication key for\n   each SNMP party is never used in authentication\
    \ and verification of\n   SNMP exchanges. Also, because the md5AuthProtocol is\
    \ symmetric in\n   character, the private authentication key for each party must\
    \ be\n   known to another SNMP party with which authenticated communication is\n\
    \   desired. In contrast, asymmetric (public key) authentication\n   protocols\
    \ would not depend upon sharing of a private key for their\n   operation.\n  \
    \ All protocol messages originated by the party stan are encrypted on\n   transmission\
    \ using the desPrivProtocol privacy protocol and the\n   private key \"STUVWX0123456789\"\
    ; they are decrypted upon reception\n   according to the same protocol and key.\
    \ Similarly, all messages\n   originated by the party ollie are encrypted on transmission\
    \ using the\n   desPrivProtocol protocol and private privacy key \"MNOPQR0123456789\"\
    ;\n   they are correspondingly decrypted on reception. As with\n   authentication\
    \ keys, knowledge of private privacy keys is not\n   normally afforded to human\
    \ beings and is confined to those portions\n   of the protocol implementation\
    \ that require it.\n"
- title: 4.3   Proxy Configuration
  contents:
  - "4.3   Proxy Configuration\n   This section presents examples of SNMP proxy configurations.\
    \  On one\n   hand, foreign proxy configurations provide the capability to manage\n\
    \   non-SNMP devices. On the other hand, native proxy configurations\n   allow\
    \ an administrator to shift the computational burden of rich\n   management functionality\
    \ away from network devices whose primary task\n   is not management.  To the\
    \ extent that SNMP proxy agents function as\n   points of aggregation for management\
    \ information, proxy\n   configurations may also reduce the bandwidth requirements\
    \ of large-\n   scale management activities.\n   The example configurations in\
    \ this section are simplified for\n   clarity: actual configurations may require\
    \ additional parties in\n   order to support clock synchronization and distribution\
    \ of secrets.\n"
- title: 4.3.1   Foreign Proxy Configuration
  contents:
  - "4.3.1   Foreign Proxy Configuration\n   This section presents an example configuration\
    \ by which a SNMP\n   management station may manage network elements that do not\
    \ themselves\n   support the SNMP. This configuration centers on a SNMP proxy\
    \ agent\n   that realizes SNMP management operations by interacting with a non-\n\
    \   SNMP device using a proprietary protocol.\n   Table 6 presents information\
    \ about SNMP parties that is recorded in\n   the local database of the SNMP proxy\
    \ agent.  Table 7 presents\n   information about SNMP parties that is recorded\
    \ in the local database\n   of the SNMP management station. Table 8 presents information\
    \ about\n   the access policy specified by the local administration.\n   As represented\
    \ in Table 6, the proxy agent party operates at UDP port\n   161 at IP address\
    \ 1.2.3.5 using the party identity moe; the example\n   manager operates at UDP\
    \ port 2002 at IP address 1.2.3.4 using the\n   identity larry. Both larry and\
    \ moe authenticate all messages that\n   they generate by using the protocol md5AuthProtocol\
    \ and their\n   distinct, private authentication keys. Although these private\n\
    \   authentication key values (\"0123456789ABCDEF\" and\n   Identity        larry\
    \               moe                 curly\n                   (manager)      \
    \     (proxy)             (proxied)\n   Domain          rfc1351Domain       rfc1351Domain\
    \       acmeMgmtPrtcl\n   Address         1.2.3.4, 2002       1.2.3.5, 161   \
    \     0x98765432\n   Proxied Party   noProxy             curly               noProxy\n\
    \   Auth Prot       md5AuthProtocol     md5AuthProtocol     noAuth\n   Auth Priv\
    \ Key   \"0123456789ABCDEF\"  \"GHIJKL0123456789\"  \"\"\n   Auth Pub Key    \"\
    \"                  \"\"                  \"\"\n   Auth Clock      0         \
    \          0                   0\n   Auth Last Msg   0                   0   \
    \                0\n   Auth Lifetime   500                 500               \
    \  0\n   Priv Prot       noPriv              noPriv              noPriv\n   Priv\
    \ Priv Key   \"\"                  \"\"                  \"\"\n   Priv Pub Key\
    \    \"\"                  \"\"                  \"\"\n         Table 6: Party\
    \ Information for Proxy Agent\n     Identity        larry               moe\n\
    \                     (manager)           (proxy)\n     Domain          rfc1351Domain\
    \       rfc1351Domain\n     Address         1.2.3.4, 2002       1.2.3.5, 161\n\
    \     Proxied Party   noProxy             noProxy\n     Auth Prot       md5AuthProtocol\
    \     md5AuthProtocol\n     Auth Priv Key   \"0123456789ABCDEF\"  \"GHIJKL0123456789\"\
    \n     Auth Pub Key    \"\"                  \"\"\n     Auth Clock      0    \
    \               0\n     Auth Last Msg   0                   0\n     Auth Lifetime\
    \   500                 500\n     Priv Prot       noPriv              noPriv\n\
    \     Priv Priv Key   \"\"                  \"\"\n     Priv Pub Key    \"\"  \
    \                \"\"\n       Table 7: Party Information for Management Station\n\
    \               Target   Subject   Privileges\n               moe      larry \
    \    3\n               larry    moe       20\n         Table 8: Access Information\
    \ for Foreign Proxy\n   \"GHIJKL0123456789\") are presented here for expository\
    \ purposes,\n   knowledge of private keys is not normally afforded to human beings\n\
    \   and is confined to those portions of the protocol implementation that\n  \
    \ require it.\n   Although all SNMP agents that use cryptographic keys in their\n\
    \   communication with other protocol entities will almost certainly\n   engage\
    \ in private SNMP exchanges to distribute those keys, in order\n   to simplify\
    \ this example, neither the management station nor the\n   proxy agent sends or\
    \ receives private SNMP communications. Thus, the\n   privacy protocol for each\
    \ of them is recorded as noPriv.\n   The party curly does not send or receive\
    \ SNMP protocol messages;\n   rather, all communication with that party proceeds\
    \ via a hypothetical\n   proprietary protocol identified by the value acmeMgmtPrtcl.\
    \ Because\n   the party curly does not participate in the SNMP, many of the\n\
    \   attributes recorded for that party in a local database are ignored.\n   In\
    \ order to interrogate the proprietary device associated with the\n   party curly,\
    \ the management station larry constructs a SNMP GetNext\n   request and transmits\
    \ it to the party moe operating (see Table 7) at\n   UDP port 161, and IP address\
    \ 1.2.3.5. This request is authenticated\n   using the private authentication\
    \ key \"0123456789ABCDEF.\"\n   When that request is received by the party moe,\
    \ the originator of the\n   message is verified as being the party larry by using\
    \ local knowledge\n   (see Table 6) of the private authentication key \"0123456789ABCDEF.\"\
    \n   Because party larry is authorized to issue GetNext requests with\n   respect\
    \ to party moe by the relevant access control policy (Table 8),\n   the request\
    \ is accepted. Because the local database records the\n   proxied party for party\
    \ moe as curly, the request is satisfied by its\n   translation into appropriate\
    \ operations of the acmeMgmtPrtcl directed\n   at party curly. These new operations\
    \ are transmitted to the party\n   curly at the address 0x98765432 in the acmeMgmtPrtcl\
    \ domain.\n   When and if the proprietary protocol exchange between the proxy\
    \ agent\n   and the proprietary device concludes, a SNMP GetResponse management\n\
    \   operation is constructed by the SNMP party moe to relay the results\n   to\
    \ party larry. This response communication is authenticated as to\n   origin and\
    \ integrity using the authentication protocol\n   md5AuthProtocol and private\
    \ authentication key \"GHIJKL0123456789\"\n   specified for transmissions from\
    \ party moe. It is then transmitted to\n   the SNMP party larry operating at the\
    \ management station at IP\n   address 1.2.3.4 and UDP port 2002 (the source address\
    \ for the\n   corresponding request).\n   When this response is received by the\
    \ party larry, the originator of\n   the message is verified as being the party\
    \ moe by using local\n   knowledge (see Table 7) of the private authentication\
    \ key\n   \"GHIJKL0123456789.\" Because party moe is authorized to issue\n   GetResponse\
    \ communications with respect to party larry by the\n   relevant access control\
    \ policy (Table 8), the response is accepted,\n   and the interrogation of the\
    \ proprietary device is complete.\n   It is especially useful to observe that\
    \ the database of SNMP parties\n   recorded at the proxy agent (Table 6) need\
    \ be neither static nor\n   configured exclusively by the management station.\
    \  For instance,\n   suppose that, in this example, the acmeMgmtPrtcl was a proprietary,\n\
    \   MAC-layer mechanism for managing stations attached to a local area\n   network.\
    \ In such an environment, the SNMP party moe would reside at a\n   SNMP proxy\
    \ agent attached to such a LAN and could, by participating\n   in the LAN protocols,\
    \ detect the attachment and disconnection of\n   various stations on the LAN.\
    \ In this scenario, the SNMP proxy agent\n   could easily adjust its local database\
    \ of SNMP parties to support\n   indirect management of the LAN stations by the\
    \ SNMP management\n   station. For each new LAN station detected, the SNMP proxy\
    \ agent\n   would add to its database both an entry analogous to that for party\n\
    \   curly (representing the new LAN station itself) and an entry\n   analogous\
    \ to that for party moe (representing a proxy for that new\n   station in the\
    \ SNMP domain).\n   By using the SNMP to interrogate the database of parties held\
    \ locally\n   by the SNMP proxy agent, a SNMP management station can discover\
    \ and\n   interact with new stations as they are attached to the LAN.\n"
- title: 4.3.2   Native Proxy Configuration
  contents:
  - "4.3.2   Native Proxy Configuration\n   This section presents an example configuration\
    \ that supports SNMP\n   native proxy operations -- indirect interaction between\
    \ a SNMP agent\n   and a management station that is mediated by a second SNMP\
    \ (proxy)\n   agent.\n   This example configuration is similar to that presented\
    \ in the\n   discussion of SNMP foreign proxy above. In this example, however,\
    \ the\n   party associated with the identity curly receives messages via the\n\
    \   SNMP, and, accordingly interacts with the SNMP proxy agent moe using\n   authenticated\
    \ SNMP communications.\n   Table 9 presents information about SNMP parties that\
    \ is recorded in\n   the local database of the SNMP proxy agent.  Table 7 presents\n\
    \   information about SNMP parties that is recorded in the local database\n  \
    \ of the SNMP management station. Table 10 presents information about\n   the\
    \ access policy specified by the local administration.\n   As represented in Table\
    \ 9, the proxy party operates at UDP port 161\n   at IP address 1.2.3.5 using\
    \ the party identity moe;\n  Identity       larry              moe           \
    \     curly\n                 (manager)          (proxy)            (proxied)\n\
    \  Domain         rfc1351Domain      rfc1351Domain      rfc1351Domain\n  Address\
    \        1.2.3.4, 2002      1.2.3.5, 161       1.2.3.6, 16\n  Proxied Party  noProxy\
    \            curly              noProxy\n  Auth Prot      md5AuthProtocol    md5AuthProtocol\
    \    md5AuthProtocol\n  Auth Priv Key  \"0123456789ABCDEF\" \"GHIJKL0123456789\"\
    \ \"MNOPQR0123456789\"\n  Auth Pub Key   \"\"                 \"\"           \
    \      \"\"\n  Auth Clock     0                  0                  0\n  Auth\
    \ Last Msg  0                  0                  0\n  Auth Lifetime  500    \
    \            500                500\n  Priv Prot      noPriv             noPriv\
    \             noPriv\n  Priv Priv Key  \"\"                 \"\"             \
    \    \"\"\n  Priv Pub Key   \"\"                 \"\"                 \"\"\n \
    \        Table 9: Party Information for Proxy Agent\n               Target   Subject\
    \   Privileges\n               moe      larry     3\n               larry    moe\
    \       20\n               curly    moe       3\n               moe      curly\
    \     20\n         Table 10: Access Information for Native Proxy\n   the example\
    \ manager operates at UDP port 2002 at IP address 1.2.3.4\n   using the identity\
    \ larry; the proxied party operates at UDP port 161\n   at IP address 1.2.3.6\
    \ using the party identity curly. Messages\n   generated by all three SNMP parties\
    \ are authenticated as to origin\n   and integrity by using the authentication\
    \ protocol md5AuthProtocol\n   and distinct, private authentication keys. Although\
    \ these private key\n   values (\"0123456789ABCDEF,\" \"GHIJKL0123456789,\" and\n\
    \   \"MNOPQR0123456789\") are presented here for expository purposes,\n   knowledge\
    \ of private keys is not normally afforded to human beings\n   and is confined\
    \ to those portions of the protocol implementation that\n   require it.\n   In\
    \ order to interrogate the proxied device associated with the party\n   curly,\
    \ the management station larry constructs a SNMP GetNext request\n   and transmits\
    \ it to the party moe operating (see Table 7) at UDP port\n   161 and IP address\
    \ 1.2.3.5. This request is authenticated using the\n   private authentication\
    \ key \"0123456789ABCDEF.\"\n   When that request is received by the party moe,\
    \ the originator of the\n   message is verified as being the party larry by using\
    \ local knowledge\n   (see Table 9) of the private authentication key \"0123456789ABCDEF.\"\
    \n   Because party larry is authorized to issue GetNext (and Get) requests\n \
    \  with respect to party moe by the relevant access control policy\n   (Table\
    \ 10), the request is accepted. Because the local database\n   records the proxied\
    \ party for party moe as curly, the request is\n   satisfied by its translation\
    \ into a corresponding SNMP GetNext\n   request directed from party moe to party\
    \ curly. This new\n   communication is authenticated using the private authentication\
    \ key\n   \"GHIJKL0123456789\" and transmitted to party curly at the IP address\n\
    \   1.2.3.6.\n   When this new request is received by the party curly, the originator\n\
    \   of the message is verified as being the party moe by using local\n   knowledge\
    \ (see Table 9) of the private authentication key\n   \"GHIJKL0123456789.\" Because\
    \ party moe is authorized to issue GetNext\n   (and Get) requests with respect\
    \ to party curly by the relevant access\n   control policy (Table 10), the request\
    \ is accepted. Because the local\n   database records the proxied party for party\
    \ curly as noProxy, the\n   GetNext request is satisfied by local mechanisms.\
    \ A SNMP GetResponse\n   message representing the results of the query is then\
    \ generated by\n   party curly. This response communication is authenticated as\
    \ to\n   origin and integrity using the private authentication key\n   \"MNOPQR0123456789\"\
    \ and transmitted to party moe at IP address 1.2.3.5\n   (the source address for\
    \ the corresponding request).\n   When this response is received by party moe,\
    \ the originator of the\n   message is verified as being the party curly by using\
    \ local knowledge\n   (see Table 9) of the private authentication key \"MNOPQR0123456789.\"\
    \n   Because party curly is authorized to issue GetResponse communications\n \
    \  with respect to party moe by the relevant access control policy\n   (Table\
    \ 10), the response is not rejected. Instead, it is translated\n   into a response\
    \ to the original GetNext request from party larry.\n   This response is authenticated\
    \ as to origin and integrity using the\n   private authentication key \"GHIJKL0123456789\"\
    \ and is transmitted to\n   the party larry at IP address 1.2.3.4 (the source\
    \ address for the\n   original request).\n   When this response is received by\
    \ the party larry, the originator of\n   the message is verified as being the\
    \ party moe by using local\n   knowledge (see Table 7) of the private authentication\
    \ key\n   \"GHIJKL0123456789.\" Because party moe is authorized to issue\n   GetResponse\
    \ communications with respect to party larry by the\n   relevant access control\
    \ policy (Table 10), the response is accepted,\n   and the interrogation is complete.\n"
- title: 4.4   Public Key Configuration
  contents:
  - "4.4   Public Key Configuration\n   This section presents an example configuration\
    \ predicated upon a\n   hypothetical security protocol. This hypothetical protocol\
    \ would be\n   based on asymmetric (public key) cryptography as a means for\n\
    \   providing data origin authentication (but not protection against\n   disclosure).\
    \ This example illustrates the consistency of the\n   administrative model with\
    \ public key technology, and the extension of\n   the example to support protection\
    \ against disclosure should be\n   apparent.\n    Identity          ollie    \
    \                  stan\n                      (agent)                    (manager)\n\
    \    Domain            rfc1351Domain              rfc1351Domain\n    Address \
    \          1.2.3.4, 161               1.2.3.5, 2004\n    Proxied Party     noProxy\
    \                    noProxy\n    Auth Prot         pkAuthProtocol           \
    \  pkAuthProtocol\n    Auth Priv Key     \"0123456789ABCDEF\"         \"\"\n \
    \   Auth Pub Key      \"\"                         \"ghijkl0123456789\"\n    Auth\
    \ Clock        0                          0\n    Auth Last Msg     0         \
    \                 0\n    Auth Lifetime     500                        500\n  \
    \  Priv Prot         noPriv                     noPriv\n    Priv Priv Key    \
    \ \"\"                         \"\"\n    Priv Pub Key      \"\"              \
    \           \"\"\n       Table 11: Party Information for Public Key Agent\n  \
    \ The example configuration comprises a single SNMP agent that\n   interacts with\
    \ a single SNMP management station.  Tables 11 and 12\n   present information\
    \ about SNMP parties that is by the agent and\n   manager, respectively, while\
    \ Table 5 presents information about the\n   local access policy that is known\
    \ to both manager and agent.\n   As represented in Table 11, the example agent\
    \ party operates at UDP\n   port 161 at IP address 1.2.3.4 using the party identity\
    \ ollie; the\n   example manager operates at UDP port 2004 at IP address 1.2.3.5\
    \ using\n   the identity stan. Both ollie and stan authenticate all messages that\n\
    \   they generate as to origin and integrity by using the hypothetical\n   SNMP\
    \ authentication protocol pkAuthProtocol and their distinct,\n   private\n   \
    \ Identity          ollie                  stan\n                      (agent)\
    \                (manager)\n    Domain            rfc1351Domain          rfc1351Domain\n\
    \    Address           1.2.3.4, 161           1.2.3.5, 2004\n    Proxied Party\
    \     noProxy                noProxy\n    Auth Prot         pkAuthProtocol   \
    \      pkAuthProtocol\n    Auth Priv Key     \"\"                     \"GHIJKL0123456789\"\
    \n    Auth Pub Key      \"0123456789abcdef\"     \"\"\n    Auth Clock        0\
    \                      0\n    Auth Last Msg     0                      0\n   \
    \ Auth Lifetime     500                    500\n    Priv Prot         noPriv \
    \                noPriv\n    Priv Priv Key     \"\"                     \"\"\n\
    \    Priv Pub Key      \"\"                     \"\"\n   Table 12:  Party Information\
    \ for Public Key Management\n              Station\n   authentication keys. Although\
    \ these private authentication key values\n   (\"0123456789ABCDEF\" and \"GHIJKL0123456789\"\
    ) are presented here for\n   expository purposes, knowledge of private keys is\
    \ not normally\n   afforded to human beings and is confined to those portions\
    \ of the\n   protocol implementation that require it.\n   In most respects, the\
    \ interaction between manager and agent in this\n   configuration is almost identical\
    \ to that in the example of the\n   minimal, secure SNMP agent described above.\
    \ The most significant\n   difference is that neither SNMP party in the public\
    \ key configuration\n   has knowledge of the private key by which the other party\n\
    \   authenticates its transmissions. Instead, for each received\n   authenticated\
    \ SNMP communication, the identity of the originator is\n   verified by applying\
    \ an asymmetric cryptographic algorithm to the\n   received message together with\
    \ the public authentication key for the\n   originating party. Thus, in this configuration,\
    \ the agent knows the\n   manager's public key (\"ghijkl0123456789\") but not\
    \ its private key\n   (\"GHIJKL0123456789\"); similarly, the manager knows the\
    \ agent's public\n   key (\"0123456789abcdef\") but not its private key\n   (\"\
    0123456789ABCDEF\").\n   For simplicity, privacy protocols are not addressed in\
    \ this example\n   configuration, although their use would be necessary to the\
    \ secure,\n   automated distribution of secret keys.\n"
- title: 4.5   MIB View Configurations
  contents:
  - "4.5   MIB View Configurations\n   This section describes a convention for the\
    \ definition of MIB views\n   and, using that convention, presents example configurations\
    \ of MIB\n   views for SNMP parties.\n   A MIB view is defined by a collection\
    \ of view subtrees (see Section\n   3.6), and any MIB view may be represented\
    \ in this way. Because MIB\n   view definitions may, in certain cases, comprise\
    \ a very large number\n   of view subtrees, a convention for abbreviating MIB\
    \ view definitions\n   is desirable.\n   The convention adopted in [5] supports\
    \ abbreviation of MIB view\n   definitions in terms of families of view subtrees\
    \ that are either\n   included in or excluded from the definition of the relevant\
    \ MIB view.\n   By this convention, a table locally maintained by each SNMP entity\n\
    \   defines the MIB view associated with each SNMP party realized by that\n  \
    \ entity.  Each entry in the table represents a family of view subtrees\n   that\
    \ (according to the status of that entry) is either included in or\n   excluded\
    \ from the MIB view of some SNMP party. Each table entry\n   represents a subtree\
    \ family as a pairing of an OBJECT IDENTIFIER\n   value (called the family name)\
    \ together with a bitstring value\n   (called the family mask). The family mask\
    \ indicates which\n   subidentifiers of the associated family name are significant\
    \ to the\n   definition of the represented subtree family. For each possible MIB\n\
    \   object instance, that instance belongs to the view subtree family\n   represented\
    \ by a particular table entry if\n     o the OBJECT IDENTIFIER name of that MIB\n\
    \       object instance comprises at least as many subidentifiers\n       as does\
    \ the family name for said table entry, and\n     o each subidentifier in the\
    \ name of said MIB object\n       instance matches the corresponding subidentifier\
    \ of the\n       relevant family name whenever the corresponding bit of\n    \
    \   the associated family mask is non-zero.\n   The appearance of a MIB object\
    \ instance in the MIB view for a\n   particular SNMP party is related to the membership\
    \ of that instance\n   in the subtree families associated with that party in local\
    \ table\n   entries:\n     o If a MIB object instance belongs to none of the relevant\n\
    \       subtree families, then that instance is not in the MIB\n       view for\
    \ the relevant SNMP party.\n     o If a MIB object instance belongs to the subtree\
    \ family\n       represented by exactly one of the relevant table entries,\n \
    \      then that instance is included in, or excluded from, the\n       relevant\
    \ MIB view according to the status of that entry.\n     o If a MIB object instance\
    \ belongs to the subtree families\n       represented by more than one of the\
    \ relevant table\n       entries, then that instance is included in, or excluded\n\
    \       from, the relevant MIB view according to the status of\n       the single\
    \ such table entry for which, first, the associated\n       family name comprises\
    \ the greatest number of\n       subidentifiers, and, second, the associated family\
    \ name is\n       lexicographically greatest.\n   The subtree family represented\
    \ by a table entry for which the\n   associated family mask is all ones corresponds\
    \ to the single view\n   subtree identified by the family name for that entry.\
    \  Because the\n   convention of [5] provides for implicit extension of family\
    \ mask\n   values with ones, the subtree family represented by a table entry\n\
    \   with a family mask of zero length always corresponds to a single view\n  \
    \ subtree.\n     Party Identity  Status     Family Name    Family Mask\n     lucy\
    \            include    internet       \"\"h\n         Table 13: View Definition\
    \ for Minimal Agent\n   Using this convention for abbreviating MIB view definitions,\
    \ some of\n   the most common definitions of MIB views may be conveniently\n \
    \  expressed. For example, Table 13 illustrates the MIB view definitions\n   required\
    \ for a minimal SNMP entity that locally realizes a single\n   SNMP party for\
    \ which the associated MIB view embraces all instances\n   of all MIB objects\
    \ defined within the internet network management\n   framework.  The represented\
    \ table has a single entry. The SNMP party\n   (lucy) for which that entry defines\
    \ the MIB view is identified in the\n   first column. The status of that entry\
    \ (include) signifies that any\n   MIB object instance belonging to the subtree\
    \ family represented by\n   that entry may appear in the MIB view for party lucy.\
    \ The family name\n   for that entry is internet, and the zero-length family mask\
    \ value\n   signifies that the relevant subtree family corresponds to the single\n\
    \   view subtree rooted at that node.\n   Another example of MIB view definition\
    \ (see Table 14) is that of a\n   SNMP protocol entity that locally realizes multiple\
    \ SNMP parties with\n   distinct MIB views. The MIB view associated with the party\
    \ lucy\n   comprises all instances of all MIB objects defined within the\n   internet\
    \ network management framework, except those pertaining to the\n   administration\
    \ of SNMP parties. In contrast, the MIB view attributed\n   to the party ricky\
    \ contains only MIB object instances defined in the\n   system group of the internet-standard\
    \ MIB together with those object\n   instances by which SNMP parties are administered.\n\
    \   A more complicated example of MIB view configuration illustrates the\n   abbreviation\
    \ of related collections of view subtrees by view subtree\n   families (see Table\
    \ 15). In this\n     Party Identity  Status     Family Name    Family Mask\n \
    \    lucy            include    internet       \"\"h\n     lucy            exclude\
    \    snmpParties    \"\"h\n     ricky           include    system         \"\"\
    h\n     ricky           include    snmpParties    \"\"h\n         Table 14: View\
    \ Definition for Multiple Parties\n   example, the MIB view associated with party\
    \ lucy includes all object\n   instances in the system group of the internet-standard\
    \ MIB together\n   with some information related to the second network interface\n\
    \   attached to the managed device. However, this interface-related\n   information\
    \ does not include the speed of the interface. The family\n   mask value \"FFA0\"\
    h in the second table entry signifies that a MIB\n   object instance belongs to\
    \ the relevant subtree family if the initial\n   prefix of its name places it\
    \ within the ifEntry portion of the\n   registration hierarchy and if the eleventh\
    \ subidentifier of its name\n   is 2. The MIB object instance representing the\
    \ speed of the second\n   network interface belongs to the subtree families represented\
    \ by both\n   the second and third entries of the table, but that particular\n\
    \   instance is excluded from the MIB view for party lucy because the\n   lexicographically\
    \ greater of the relevant family names appears in the\n   table entry with status\
    \ exclude.\n   The MIB view for party ricky is also defined in this example. \
    \ The\n   MIB view attributed to the party ricky includes all object instances\n\
    \   in the icmp group of the internet-standard MIB, together with all\n   information\
    \ relevant to the fifth network interface attached to the\n   managed device.\
    \ In addition, the MIB view attributed to party ricky\n   includes the number\
    \ of octets received on the fourth attached network\n   interface.\n   While,\
    \ as suggested by the examples above, a wide range of MIB view\n   configurations\
    \ are efficiently supported by the abbreviated\n   representation of [5], prudent\
    \ MIB design can sometimes further\n   reduce the size and complexity of the most\n\
    \    Party Identity  Status     Family Name        Family Mask\n    lucy     \
    \       include    system             \"\"h\n    lucy            include    {\
    \ ifEntry 0 2 }    \"FFA0\"h\n    lucy            exclude    { ifSpeed 2 }   \
    \   \"\"h\n    ricky           include    icmp               \"\"h\n    ricky\
    \           include    { ifEntry 0 5 }    \"FFA0\"h\n    ricky           include\
    \    { ifInOctets 4 }   \"\"h\n          Table 15: More Elaborate View Definitions\n\
    \   likely MIB view definitions. On one hand, it is critical that\n   mechanisms\
    \ for MIB view configuration impose no absolute constraints\n   either upon the\
    \ access policies of local administrations or upon the\n   structure of MIB namespaces;\
    \ on the other hand, where the most common\n   access policies are known, the\
    \ configuration costs of realizing those\n   policies may be slightly reduced\
    \ by assigning to distinct portions of\n   the registration hierarchy those MIB\
    \ objects for which local policies\n   most frequently require distinct treatment.\
    \ The relegation in [5] of\n   certain objects to a distinct arc in the MIB namespace\
    \ is an example\n   of this kind of optimization.\n"
- title: 5.  Compatibility
  contents:
  - "5.  Compatibility\n   Ideally, all SNMP management stations and agents would\
    \ communicate\n   exclusively using the secure facilities described in this memo.\
    \ In\n   reality, many SNMP agents may implement only the insecure SNMP\n   mechanisms\
    \ described in [1] for some time to come.\n   New SNMP agent implementations should\
    \ never implement both the\n   insecure mechanisms of [1] and the facilities described\
    \ here. Rather,\n   consistent with the SNMP philosophy, the burden of supporting\
    \ both\n   sorts of communication should fall entirely upon managers. Perhaps\n\
    \   the best way to realize both old and new modes of communication is by\n  \
    \ the use of a SNMP proxy agent deployed locally on the same system\n   with a\
    \ management station implementation. The management station\n   implementation\
    \ itself operates exclusively by using the newer, secure\n   modes of communication,\
    \ and the local proxy agent translates the\n   requests of the manager into older,\
    \ insecure modes as needed.\n   It should be noted that proxy agent implementations\
    \ may require\n   additional information beyond that described in this memo in\
    \ order to\n   accomplish the requisite translation tasks implicit in the definition\n\
    \   of the proxy function. This information could easily be retrieved\n   from\
    \ a filestore.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   It is important to note that, in the example\
    \ configuration for native\n   proxy operations presented in this memo, the use\
    \ of symmetric\n   cryptography does not securely prevent direct communication\
    \ between\n   the SNMP management station and the proxied SNMP agent.\n   While\
    \ secure isolation of the management station and the proxied\n   agent can, according\
    \ to the administrative model set forth in this\n   memo, be realized using symmetric\
    \ cryptography, the required\n   configuration is more complex and is not described\
    \ in this memo.\n   Rather, it is recommended that native proxy configurations\
    \ that\n   require secure isolation of management station from proxied agent be\n\
    \   implemented using security protocols based on asymmetric (or \"public\n  \
    \ key\") cryptography. However, no SNMP security protocols based on\n   asymmetric\
    \ cryptography are currently defined.\n   In order to participate in the administrative\
    \ model set forth in this\n   memo, SNMP implementations must support local, non-volatile\
    \ storage\n   of the local party database. Accordingly, every attempt has been\
    \ made\n   to minimize the amount of non-volatile storage required.\n"
- title: 7.  References
  contents:
  - "7.  References\n   [1] Case, J., M. Fedor, M. Schoffstall, and J. Davin, The\
    \ Simple\n       Network Management Protocol\", RFC 1157, University of Tennessee\n\
    \       at Knoxville, Performance Systems International, Performance\n       Systems\
    \ International, and the MIT Laboratory for Computer\n       Science, May 1990.\
    \  (Obsoletes RFC 1098.)\n   [2] Rose, M., and K. McCloghrie, \"Structure and\
    \ Identification of\n       Management Information for TCP/IP based internets\"\
    , RFC 1155,\n       Performance Systems International, Hughes LAN Systems, May\
    \ 1990.\n       (Obsoletes RFC 1065.)\n   [3] Information Processing -- Open Systems\
    \ Interconnection --\n       Specification of Basic Encoding Rules for Abstract\
    \ Syntax\n       Notation One (ASN.1), International Organization for\n      \
    \ Standardization/International Electrotechnical Institute, 1987,\n       International\
    \ Standard 8825.\n   [4] Galvin, J., McCloghrie, K., and J. Davin, \"SNMP Security\n\
    \       Protocols\", RFC 1352, Trusted Information Systems, Inc., Hughes\n   \
    \    LAN Systems, Inc., MIT Laboratory for Computer Science, July\n       1992.\n\
    \   [5] McCloghrie, K., Davin, J., and J. Galvin, \"Definitions of Managed\n \
    \      Objects for Administration of SNMP Parties\", RFC 1353, Hughes LAN\n  \
    \     Systems, Inc., MIT Laboratory for Computer Science, Trusted\n       Information\
    \ Systems, Inc., July 1992.\n"
- title: 8.  Authors' Addresses
  contents:
  - "8.  Authors' Addresses\n       James R. Davin\n       MIT Laboratory for Computer\
    \ Science\n       545 Technology Square\n       Cambridge, MA 02139\n       Phone:\
    \  (617) 253-6020\n       EMail:  jrd@ptt.lcs.mit.edu\n       James M. Galvin\n\
    \       Trusted Information Systems, Inc.\n       3060 Washington Road, Route\
    \ 97\n       Glenwood, MD 21738\n       Phone:  (301) 854-6889\n       EMail:\
    \  galvin@tis.com\n       Keith McCloghrie\n       Hughes LAN Systems, Inc.\n\
    \       1225 Charleston Road\n       Mountain View, CA 94043\n       Phone:  (415)\
    \ 966-7934\n       EMail:  kzm@hls.com\n"
