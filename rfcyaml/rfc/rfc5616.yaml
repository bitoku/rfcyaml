- title: __initial_text__
  contents:
  - '                Streaming Internet Messaging Attachments

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes a method for streaming multimedia attachments\n\
    \   received by a resource- and/or network-constrained device from an\n   IMAP\
    \ server.  It allows such clients, which often have limits in\n   storage space\
    \ and bandwidth, to play video and audio email content.\n   The document describes\
    \ a profile for making use of the URLAUTH-\n   authorized IMAP URLs (RFC 5092),\
    \ the Network Announcement SIP Media\n   Service (RFC 4240), and the Media Server\
    \ Control Markup Language (RFC\n   5022).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n   This document may contain\
    \ material from IETF Documents or IETF\n   Contributions published or made publicly\
    \ available before November\n   10, 2008.  The person(s) controlling the copyright\
    \ in some of this\n   material may not have granted the IETF Trust the right to\
    \ allow\n   modifications of such material outside the IETF Standards Process.\n\
    \   Without obtaining an adequate license from the person(s) controlling\n   the\
    \ copyright in such materials, this document may not be modified\n   outside the\
    \ IETF Standards Process, and derivative works of it may\n   not be created outside\
    \ the IETF Standards Process, except to format\n   it for publication as an RFC\
    \ or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Conventions Used in This Document  . . . . . . . . .\
    \ . . . . .  3\n   3.  Mechanism  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n     3.1.  Overview of Mechanism  . . . . . . . . . . . . . . .\
    \ . . .  3\n     3.2.  Media Server Discovery . . . . . . . . . . . . . . . .\
    \ . .  5\n     3.3.  Client Use of GENURLAUTH Command . . . . . . . . . . . .\
    \ .  7\n     3.4.  Client Determination of Media Server Capabilities  . . . .\
    \  9\n     3.5.  Client Use of the Media Server Announcement Service  . . . 10\n\
    \     3.6.  Media Negotiation and Transcoding  . . . . . . . . . . . . 11\n  \
    \   3.7.  Client Use of the Media Server MSCML IVR Service . . . . . 13\n    \
    \ 3.8.  Media Server Use of IMAP Server  . . . . . . . . . . . . . 17\n     3.9.\
    \  Protocol Diagrams  . . . . . . . . . . . . . . . . . . . . 18\n       3.9.1.\
    \  Announcement Service Protocol Diagram  . . . . . . . . 18\n       3.9.2.  IVR\
    \ Service Protocol Diagram . . . . . . . . . . . . . 19\n   4.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 21\n   5.  IANA Considerations  . . .\
    \ . . . . . . . . . . . . . . . . . . 23\n   6.  Digital Rights Management (DRM)\
    \ Issues . . . . . . . . . . . . 24\n   7.  Deployment Considerations  . . . .\
    \ . . . . . . . . . . . . . . 24\n   8.  Formal Syntax  . . . . . . . . . . .\
    \ . . . . . . . . . . . . . 25\n   9.  Contributors . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . 26\n   10. References . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . 26\n     10.1. Normative References . . . . . . . . .\
    \ . . . . . . . . . . 26\n     10.2. Informative References . . . . . . . . .\
    \ . . . . . . . . . 28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Email clients on resource- and/or network-constrained devices,\
    \ such\n   as mobile phones, may have difficulties in retrieving and/or storing\n\
    \   large attachments received in a message.  For example, on a poor\n   network\
    \ link, the latency required to download the entire attachment\n   before displaying\
    \ any of it may not be acceptable to the user.\n   Conversely, even on a high-speed\
    \ network, the device may not have\n   enough storage space to secure the attachment\
    \ once retrieved.\n   For certain media, such as audio and video, there is a solution:\
    \ the\n   media can be streamed to the device, using protocols such as RTP\n \
    \  [RTP].  Streaming can be initiated and controlled using protocols\n   such\
    \ as SIP [SIP] and particularly the media server profiles as\n   specified in\
    \ RFC 4240 [NETANN] or MSCML [MSCML].  Streaming the media\n   to the device addresses\
    \ both the latency issue, since the client can\n   start playing the media relatively\
    \ quickly, and the storage issue,\n   since the client does not need to store\
    \ the media locally.  A\n   tradeoff is that the media cannot be viewed/played\
    \ when the device is\n   offline.\n   Examples of the types of media that would\
    \ benefit from the ability to\n   stream to the device include:\n   o  Voice or\
    \ video mail messages received as an attachment\n   o  Audio clips such as ring\
    \ tones received as an attachment\n   o  Video clips, such as movie trailers,\
    \ received as an attachment\n   The client may wish to present the user with the\
    \ ability to use\n   simple \"VCR-style\" controls such as pause, fast-forward,\
    \ and rewind.\n   In consideration of this, the document presents two alternatives\
    \ for\n   streaming media -- a simple mechanism that makes use of the\n   announcement\
    \ service of RFC 4240, and a more complex mechanism which\n   allows VCR controls,\
    \ based on MSCML (RFC 5022) [MSCML].  The choice\n   of which mechanism to use\
    \ is up to the client; for example, it may be\n   based on limitations of the\
    \ client or the configured media server.\n   This document presents suggestions\
    \ for determining which of these\n   streaming services are available.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [KEYWORDS].\n   In examples, \"C:\" and \"S:\" indicate lines sent\
    \ by the client and\n   server, respectively.  If a single \"C:\" or \"S:\" label\
    \ applies to\n   multiple lines, then some of the line breaks between those lines\
    \ are\n   for editorial clarity only and may not be part of the actual protocol\n\
    \   exchange.\n"
- title: 3.  Mechanism
  contents:
  - '3.  Mechanism

    '
- title: 3.1.  Overview of Mechanism
  contents:
  - "3.1.  Overview of Mechanism\n   The proposed mechanism for streaming media to\
    \ messaging clients is a\n   profile for making use of several existing mechanisms,\
    \ namely:\n   o  IMAP URLAUTH Extension [URLAUTH] - Providing the ability to\n\
    \      generate an IMAP URL that allows access by external entities to\n     \
    \ specific message parts, e.g., an audio clip.\n   o  URLFETCH Binary Extension\
    \ [URLFETCH_BINARY] - Providing the\n      ability to specify BINARY and BODYPARTSTRUCTURE\
    \ arguments to the\n      URLFETCH command.\n   o  Media Server Announcement Service\
    \ (RFC 4240) [NETANN] - Providing\n      the ability for a media server to stream\
    \ media using a reference\n      provided by the media server client in a URL.\n\
    \   o  Media Server Interactive Voice Response (IVR) Service (RFC 5022)\n    \
    \  [MSCML] - Providing the ability to stream media as above, but with\n      VCR-style\
    \ controls.\n   The approach is shown in the following figure:\n   +--------------+\n\
    \   |              |\n   | Email Client |^\n   |              | \\\n   +--------------+\
    \  \\\n       ^           ^  \\\n       |            \\  \\ (5)\n       | (1),\
    \        \\  \\\n       | (2)          \\  \\\n       |           (3),\\  \\\n\
    \       |           (6)  \\  \\\n       |                 \\  \\\n       v   \
    \               v  v\n   +--------------+       +----------------+\n   |     \
    \         |  (4)  |                |\n   | IMAP Server  |<----->|  Media Server\
    \  |\n   |              |       |                |\n   +--------------+      \
    \ +----------------+\n                       Figure 1: Proposed Mechanism\n  \
    \ The proposed mechanism has the following steps:\n   (1)  The client determines\
    \ from MIME headers of a particular message\n        that a particular message\
    \ part (attachment) should be streamed\n        to the user.  Note that no assumptions\
    \ are made about\n        how/when/if the client contacts the user of the client\
    \ about\n        this decision.  User input may be required in order to initiate\n\
    \        the proposed mechanism.\n   (2)  The client constructs an IMAP URL referencing\
    \ the message part,\n        and uses the GENURLAUTH [URLAUTH] command to generate\
    \ a URLAUTH-\n        authorized IMAP URL.\n   (3)  The client connects to a SIP\
    \ Media Server using the announcement\n        service as specified in RFC 4240\
    \ [NETANN], or the IVR service as\n        specified in RFC 5022 [MSCML], and\
    \ passes the URLAUTH-authorized\n        URL to the media server.\n   (4)  The\
    \ media server connects to the IMAP server specified in the\n        referenced\
    \ URL, and uses the IMAP URLFETCH [URLAUTH] command to\n        retrieve the message\
    \ part.\n   (5)  The media server streams the retrieved message part to the\n\
    \        client using RTP [RTP].\n   (6)  The media server or the client terminates\
    \ the media streaming,\n        or the streaming ends naturally.  The SIP session\
    \ is terminated\n        by either client or server.\n   It should be noted that\
    \ the proposed mechanism makes several\n   assumptions about the mobile device,\
    \ as well as available network\n   services, namely:\n   o  The mobile device\
    \ is provisioned with, or obtains via some dynamic\n      mechanism (see Section\
    \ 3.2), the location of a media server which\n      supports either RFC 4240 [NETANN]\
    \ and/or RFC 5022 [MSCML].\n   o  The media server(s) used by the mobile device\
    \ support the IMAP URL\n      [IMAPURL] scheme for the announcement and/or IVR\
    \ services.\n   o  The IMAP server used by the mobile device supports generating\n\
    \      anonymous IMAP URLs using the URLAUTH mechanism as well as the\n      IMAP\
    \ URLFETCH BINARY [URLFETCH_BINARY] extension.\n"
- title: 3.2.  Media Server Discovery
  contents:
  - "3.2.  Media Server Discovery\n   This section discusses possibilities for the\
    \ automatic discovery of\n   suitable media servers to perform streaming operations,\
    \ and provides\n   for such a mechanism using the IMAP METADATA [METADATA] extension.\n\
    \   There are two possibilities for clients with regard to determining\n   the\
    \ hostname and port number information of a suitable media server:\n   1.  No\
    \ discovery of media servers is required: clients are configured\n       with\
    \ suitable media server information in an out-of-band manner.\n   2.  Discovery\
    \ of media servers is required: clients use a discovery\n       mechanism to determine\
    \ a suitable media server that will be used\n       for streaming multimedia message\
    \ parts.\n   There are several scenarios where media server discovery would be\
    \ a\n   requirement for streaming to be successful:\n   o  Client is not configured\
    \ with the address of any media servers.\n   o  Client is configured with the\
    \ address of one or more media\n      servers, but the IMAP server is configured\
    \ to only accept URLFETCH\n      requests from specific media servers (for security\
    \ or site policy\n      reasons), and thus streaming would fail due to the media\
    \ server\n      not being able to retrieve the media from the IMAP server.\n \
    \  There is also a scenario where media server discovery would improve\n   the\
    \ security of the streaming mechanism, by avoiding the use of\n   completely anonymous\
    \ URLs.  For example, the client could discover a\n   media server address that\
    \ was an authorized user of the IMAP server\n   for streaming purposes, which\
    \ would allow the client to generate a\n   URL, which was secure in that it could\
    \ *only* be accessed by an\n   entity that is trusted by the IMAP server to retrieve\
    \ content.  The\n   issue of trust in media servers is discussed more fully in\
    \ Section 4.\n   This document describes using the IMAP METADATA [METADATA] extension,\n\
    \   via the use of a server entry that provides the contact information\n   for\
    \ suitable media servers for use with the IMAP server.  Media\n   Server discovery\
    \ is optional: clients are free to use pre-configured\n   information about media\
    \ servers, or to fall back to pre-configured\n   information if they encounter\
    \ IMAP servers that do not support either\n   the METADATA extension or the proposed\
    \ entry, or that do not provide\n   a value for the entry.\n   A METADATA entry\
    \ with the name of \"/shared/mediaServers\" is used to\n   store the locations\
    \ of suitable media servers known to the IMAP\n   server.  The entry is formatted\
    \ according to the formalSyntax\n   specified in Section 8.  This consists of\
    \ a tuple of a URI and\n   optional \"stream\" string, where the URI is surrounded\
    \ by <> symbols,\n   the URI and \"stream\" are separated using a colon \":\"\
    , and tuples are\n   separated using a \";\".\n   The \"stream\" string (c.f.\
    \ the \"stream\" access identifier from\n   [ACCESSID]) is used to identify media\
    \ servers capable of connecting\n   to the IMAP server as users authorized to\
    \ retrieve URLs constructed\n   using the \"stream\" access identifier.  It indicates\
    \ that the client\n   MUST create the content URI using the \"stream\" access\
    \ identifier.\n   See Section 3.3 for a description of how the client should make\
    \ use\n   of the access identifier when generating IMAP URLs.)\n   Example values\
    \ of the /shared/mediaServers METADATA entry (N.B. Any\n   line-wrapping below\
    \ is for the purpose of clarity):\n   \"<sip:ivr@ms.example.net:5060>:stream;<sip:annc@\n\
    \   ms1.example.net:5060>;<sips:ivr@ms2.example.net:5061>\"\n   \"<sip:ivr@192.0.2.40:5060>;<sip:192.0.2.41:5060>;<sips:annc@\n\
    \   192.0.2.42:5060>:stream\"\n   It should be noted that the URI specified in\
    \ the ABNF (in Section 8)\n   is generic, i.e., not restricted to SIP URIs; however,\
    \ this document\n   only specifies how to make use of SIP URIs.  Additionally,\
    \ the\n   \"userinfo\" (known as the \"service indicator\" in RFC 4240 and RFC\n\
    \   4722) component of the URI is optional; if specified, it gives the\n   client\
    \ additional information about the media server capabilities.\n   For example,\
    \ a \"userinfo\" component of \"annc\" indicates that the\n   media server supports\
    \ RFC 4240, and \"ivr\" indicates support for RFC\n   4722.  Section 3.4 further\
    \ describes how clients should behave if the\n   \"userinfo\" component is not\
    \ present.\n   Clients SHOULD parse the value of the /shared/mediaServers entry,\
    \ and\n   contact a media server using one of the returned URIs.  The servers\n\
    \   are returned in order of preference as suggested by the server;\n   however,\
    \ it is left to the client to decide if a different order is\n   more appropriate\
    \ when selecting the media server(s) to contact, as\n   well as the selection\
    \ of alternates under failure conditions.\n   Administrators configuring the values\
    \ of the /shared/mediaServers\n   entry, who do not know the capabilities of the\
    \ media servers being\n   configured, SHOULD NOT include a \"userinfo\" component\
    \ as part of the\n   URI.  In that case, the client will determine which service\
    \ to use as\n   specified in Section 3.4.  Note that if a media server supports\n\
    \   multiple services, a URI with the appropriate userinfo component\n   SHOULD\
    \ be configured for each service.\n   Note that even though the media server address\
    \ can be discovered\n   dynamically, it is assumed that the necessary security\
    \ arrangements\n   between the client and the media server already exist.  For\
    \ example,\n   the media server could use SIP digest authentication to provide\n\
    \   access only to authenticated clients; in this case, it is assumed the\n  \
    \ username and password have already been set up.  Likewise, if the\n   client\
    \ wants to authenticate the media server using, e.g., TLS and\n   certificates,\
    \ it is assumed the necessary arrangements (trust anchors\n   and so on) already\
    \ exist.  In some deployments, the clients and media\n   servers may even be willing\
    \ to rely on the security of the underlying\n   network, and omit authentication\
    \ between the client and the media\n   server entirely.  See Section 4 for more\
    \ details.\n"
- title: 3.3.  Client Use of GENURLAUTH Command
  contents:
  - "3.3.  Client Use of GENURLAUTH Command\n   The decision to make use of streaming\
    \ services for a message part\n   will usually be predicated on the content type\
    \ of the message part.\n   Using the capabilities of the IMAP FETCH command, clients\
    \ determine\n   the MIME [MIME] Content-Type of particular message parts, and\
    \ based\n   on local policies or heuristics, they decide whether streaming for\n\
    \   that message part will be attempted.\n   Once the client has determined that\
    \ a particular message part\n   requires streaming, the client generates an IMAP\
    \ URL that refers to\n   the message part according to the method described in\
    \ RFC 5092\n   [IMAPURL].  The client then begins the process of generating an\n\
    \   URLAUTH URL by appending \";EXPIRE=<datetime>\" and \";URLAUTH=<access>\"\n\
    \   to the initial URL.\n   The \";EXPIRE=<datetime>\" parameter is optional;\
    \ however, it SHOULD be\n   used, since the use of anonymous URLAUTH-authorized\
    \ URLs is a\n   security risk (see Section 4), and it ensures that at some point\
    \ in\n   the future, permission to access that URL will cease.  IMAP server\n\
    \   implementors may choose to reject anonymous URLs that are considered\n   insecure\
    \ (for example, with an EXPIRE date too far in the future), as\n   a matter of\
    \ local security policy.  To prevent this from causing\n   interoperability problems,\
    \ IMAP servers that implement this profile\n   MUST NOT reject GENURLAUTH commands\
    \ for anonymous URLs on the basis\n   of the EXPIRE time, if that time is equal\
    \ to, or less than, 1 hour in\n   the future.\n   The <access> portion of the\
    \ URLAUTH URL MUST be 'stream' (see\n   [ACCESSID]) if an out-of-band mechanism\
    \ or the media server discovery\n   mechanism discussed in Section 3.2 specifies\
    \ that the media server is\n   an authorized user of the IMAP server for the purposes\
    \ of retrieving\n   content via URLFETCH.  Without specific prior knowledge of\
    \ such a\n   configuration (either through the discovery mechanism described in\n\
    \   this document, or by an out-of-band mechanism), the client SHOULD use\n  \
    \ the 'stream' access identifier, which will cause streaming to fail if\n   the\
    \ media server is not an authorized user of the IMAP server for the\n   purposes\
    \ of streaming.\n   However, if the client wishes to take the risk associated\
    \ with\n   generating a URL that can be used by any media server (see\n   Section\
    \ 4), it MAY use 'anonymous' as the <access> portion of the\n   URLAUTH URL passed\
    \ to the GENURLAUTH command.  For example, the\n   client may have been pre-configured\
    \ with the address of media servers\n   in the local administrative domain (thus\
    \ implying a level of trust in\n   those media servers), without knowing whether\
    \ those media servers\n   have a pre-existing trust relationship with the IMAP\
    \ server to be\n   used (which may well be in a different administrative domain).\
    \  See\n   Section 4 for a full discussion of the security issues.\n   The client\
    \ uses the URL generated as a parameter to the GENURLAUTH\n   command, using the\
    \ INTERNAL authorization mechanism.  The URL\n   returned by a successful response\
    \ to this command will then be passed\n   to the media server.  If no successful\
    \ response to the GENURLAUTH\n   command is received, then no further action will\
    \ be possible with\n   respect to streaming media to the client.\n   Examples:\n\
    \   C: a122 UID FETCH 24356 (BODYSTRUCTURE)\n   S: * 26 FETCH (BODYSTRUCTURE ((\"\
    TEXT\" \"PLAIN\"\n   S: (\"CHARSET\" \"US-ASCII\") NIL\n   S: NIL \"7BIT\" 1152\
    \ 23)(\"VIDEO\" \"MPEG\"\n   NIL NIL \"BASE64\" 655350)) UID 24356)\n   S: a122\
    \ OK FETCH completed.\n   C: a123 GENURLAUTH \"imap://joe@example.com/INBOX/;uid=24356/;\n\
    \   section=1.2;expire=2006-12-19T16:39:57-08:00;\n   urlauth=anonymous\" INTERNAL\n\
    \   S: * GENURLAUTH \"imap://joe@example.com/INBOX/;uid=24356/;\n   section=1.2;expire=2006-12-19T16:39:57-08:00;\n\
    \   urlauth=anonymous:\n   internal:238234982398239898a9898998798b987s87920\"\n\
    \   S: a123 OK GENURLAUTH completed\n   C: a122 UID FETCH 24359 (BODYSTRUCTURE)\n\
    \   S: * 27 FETCH (BODYSTRUCTURE ((\"TEXT\" \"PLAIN\"\n   S: (\"CHARSET\" \"US-ASCII\"\
    ) NIL\n   S: NIL \"7BIT\" 1152 23)(\"AUDIO\" \"G729\"\n   NIL NIL \"BASE64\" 87256))\
    \ UID 24359)\n   S: a122 OK FETCH completed.\n   C: a123 GENURLAUTH \"imap://joe@example.com/INBOX/;uid=24359/;\n\
    \   section=1.3;expire=2006-12-19T16:39:57-08:00;\n   urlauth=stream\" INTERNAL\n\
    \   S: * GENURLAUTH \"imap://joe@example.com/INBOX/;uid=24359/;\n   section=1.3;expire=2006-12-20T18:31:45-08:00;\n\
    \   urlauth=stream:\n   internal:098230923409284092384092840293480239482\"\n \
    \  S: a123 OK GENURLAUTH completed\n"
- title: 3.4.  Client Determination of Media Server Capabilities
  contents:
  - "3.4.  Client Determination of Media Server Capabilities\n   Once an authorized\
    \ IMAP URL has been generated, it is up to the\n   client to pass that URL to\
    \ a suitable media server that is capable of\n   retrieving the URL via IMAP,\
    \ and streaming the content to the client\n   using the RTP [RTP] protocol.\n\
    \   This section specifies the behavior of clients that have not\n   determined\
    \ (either statically through configuration, or dynamically\n   through a discovery\
    \ process as discussed in Section 3.2), the\n   capabilities of the media server\
    \ with respect to the services (i.e.,\n   RFC 4240 or 5022) supported by that\
    \ media server.  Clients that have\n   determined those capabilities should use\
    \ the mechanisms described in\n   Sections 3.5 or 3.7, as appropriate.\n   If\
    \ the client supports the MSCML IVR service, then it SHOULD attempt\n   to contact\
    \ the media server using the MSCML protocol by sending a SIP\n   INVITE that has\
    \ the service indicator \"ivr\".\n   Assuming the media server responds to the\
    \ INVITE without error, the\n   client can carry on using the MSCML IVR service\
    \ as specified in\n   Section 3.7.  If the media server responds with an error\
    \ indicating\n   that the \"ivr\" service is not supported, then if the client\
    \ supports\n   it, the client SHOULD attempt to contact the media server using\
    \ the\n   announcement service, as described in Section 3.5.\n   The following\
    \ example shows an example SIP INVITE using the \"ivr\"\n   service indicator:\n\
    \   C: INVITE sip:ivr@ms2.example.com SIP/2.0\n   < SIP Header fields omitted\
    \ for reasons of brevity >\n"
- title: 3.5.  Client Use of the Media Server Announcement Service
  contents:
  - "3.5.  Client Use of the Media Server Announcement Service\n   Assuming the client\
    \ or media server does not support use of the MSCML\n   protocol, the media server\
    \ announcement service is used, as described\n   in RFC 4240 [NETANN].  This service\
    \ allows the client to send a SIP\n   INVITE to a special username ('annc') at\
    \ the media server (the\n   \"announcement\" user), supplying the URL obtained\
    \ as per Section 3.3.\n   The SIP INVITE is constructed as shown in the examples\
    \ below; note\n   that as per RFC 4240, the play parameter is mandatory and specifies\n\
    \   the authorized IMAP URL to be played.\n   Examples of valid SIP INVITE URIs\
    \ sent to the media server\n   announcement service:\n   C: sip:annc@ms2.example.net;\n\
    \   play=imap:%2F%2Fjoe@example.com%2FINBOX%2F%3Buid%3D24356%2F%3Bsection\n  \
    \ %3D1.2%3Bexpire%3D2006-12-19T16:39:57-08:00%3Burlauth%3Danonymous:\n   internal:238234982398239898a9898998798b987s87920\n\
    \   C: sip:annc@ms1.example.net;\n   play=imap:%2F%2Ffred@\n   example.com%2FINBOX%2F%3Buid%3D24359%2F%3Bsection\n\
    \   %3D1.3%3Bexpire%3D2006-12-20T18:31:45-08:00%3Burlauth%3Dstream:\n   internal:098230923409284092384092840293480239482\n\
    \   Notice that many of the characters that are used as parameters of the\n  \
    \ IMAP URI are escaped, as otherwise they would change the meaning of\n   the\
    \ enclosing SIP URI, by being regarded as SIP URI parameters\n   instead of IMAP\
    \ URL parameters.\n   If the client receives a 200 (OK) response, the media server\
    \ has\n   successfully retrieved the content from the IMAP server and the\n  \
    \ negotiated RTP stream will shortly begin.\n   There are many possible response\
    \ codes; however, a response code of\n   404 received from the media server indicates\
    \ that the content could\n   not be found or could not be retrieved for some reason.\
    \  For example,\n   the media server may not support the use of IMAP URLs.  At\
    \ this\n   point, there are several options to the client, such as using\n   alternate\
    \ media servers, or giving up in attempting to stream the\n   required message\
    \ part.\n"
- title: 3.6.  Media Negotiation and Transcoding
  contents:
  - "3.6.  Media Negotiation and Transcoding\n   This document uses standards and\
    \ protocols from two traditionally\n   separate application areas: Mobile Email\
    \ (primarily IMAP) and\n   Internet Telephony/Streaming (e.g., SIP/RTP).  Since\
    \ the document\n   primarily addresses enhancing the capabilities of mobile email,\
    \ it is\n   felt worthwhile to give some examples of simple SIP/SDP exchanges\
    \ and\n   to discuss capabilities such as media negotiation (using SDP) and\n\
    \   media transcoding.\n   In the below example, the client contacts the media\
    \ server using the\n   SIP INVITE command to contact the announcement service\
    \ (see\n   Section 3.5), advertising support for a range of audio and video\n\
    \   codecs (using SDP [SDP]), and in response the media server advertises\n  \
    \ only a set of audio codecs.  This process is identical for the IVR\n   service,\
    \ except that the IVR service does not use the SIP Request-URI\n   to indicate\
    \ the content to be played; instead, this is carried in a\n   subsequent SIP INFO\
    \ request.\n   The client and server now know from the SDP session description\n\
    \   advertised by both client and server that communication must be using\n  \
    \ the subset of audio codecs supported by both client and server (in\n   the example\
    \ SDP session description below, it is clear that the\n   server does not support\
    \ any video codecs).  The media server may\n   perform transcoding (i.e., converting\
    \ between codecs) on the media\n   received from the IMAP server in order to satisfy\
    \ the codecs\n   supported by the client.  For example, the media server may downgrade\n\
    \   the video retrieved from the IMAP server to the audio component only.\n  \
    \ For clients using the announcement service, the media server MUST\n   return\
    \ an error to the INVITE if it cannot find a common codec\n   between the client,\
    \ server and media, or it cannot transcode to a\n   suitable codec.  Similarly,\
    \ for clients using the MSCML IVR service,\n   the media server MUST return a\
    \ suitable error response to the\n   <playcollect> request.\n   Example SIP INVITE\
    \ and SDP Media Negotiation\n   C: INVITE sip:annc@ms2.example.com;\n   play=imap:%2F%2Fjoe@example.com%2FINBOX%2F%3Buid%3D24356%2F%3B\n\
    \   section%3D1.2%3Bexpire%3D2006-12-19T16:39:57-08:00%3Burlauth%3D\n   anonymous:internal:238234982398239898a9898998798b987s87920\
    \ SIP/2.0\n   C: From: UserA <sip:UAA@example.com>\n   C: To: NetAnn <sip:annc@ms2.example.com>\n\
    \   C: Call-ID: 8204589102@example.com\n   C: CSeq: 1 INVITE\n   C: Contact: <sip:UAA@192.0.2.40>\n\
    \   C: Content-Type: application/sdp\n   C: Content-Length: 481\n   C:\n   C:\
    \ v=0\n   C: o=UserA 2890844526 2890844526 IN IP4 192.0.2.40\n   C: s=Session\
    \ SDP\n   C: c=IN IP4 192.0.2.40\n   C: t=3034423619 0\n   C: m=audio 9224 RTP/AVP\
    \ 0 8 3 98 101\n   C: a=alt:1 1 : 01BB7F04 6CBC7A28 192.0.2.40 9224\n   C: a=fmtp:101\
    \ 0-15\n   C: a=rtpmap:98 ilbc/8000\n   C: a=rtpmap:101 telephone-event/8000\n\
    \   C: a=recvonly\n   C: m=video 9226 RTP/AVP 105 34 120\n   C: a=alt:1 1 : 01BCADB3\
    \ 95DFFD80 192.0.2.40 9226\n   C: a=fmtp:105 profile=3;level=20\n   C: a=fmtp:34\
    \ CIF=2 QCIF=2 MAXBR=5120\n   C: a=rtpmap:105 h263-2000/90000\n   C: a=rtpmap:120\
    \ h263/90000\n   C: a=recvonly\n   S: SIP/2.0 200 OK\n   S: From: UserA <sip:UAA@example.com>\n\
    \   S: To: NetAnn <sip:annc@ms2.example.com>\n   S: Call-ID: 8204589102@example.com\n\
    \   S: CSeq: 1 INVITE\n   S: Contact: <sip:netann@192.0.2.41>\n   S: Content-Type:\
    \ application/sdp\n   S: Content-Length: 317\n   S:\n   S: v=0\n   S: o=NetAnn\
    \ 2890844527 2890844527 IN IP4 192.0.2.41\n   S: s=Session SDP\n   S: c=IN IP4\
    \ 192.0.2.41\n   S: t=3034423619 0\n   S: m=audio 17684 RTP/AVP 0 8 3 18 98 101\n\
    \   S: a=rtpmap:0 PCMU/8000\n   S: a=rtpmap:8 PCMA/8000\n   S: a=rtpmap:3 GSM/8000\n\
    \   S: a=rtpmap:18 G729/8000\n   S: a=fmtp:18 annexb=no\n   S: a=rtpmap:98 iLBC/8000\n\
    \   S: a=rtpmap:101 telephone-event/8000\n   S: a=fmtp:101 0-16\n   C: ACK sip:netann@192.0.2.41\
    \ SIP/2.0\n   C: From: UserA <sip:UAA@example.com>\n   C: To: NetAnn <sip:annc@ms2.example.com>\n\
    \   C: Call-ID: 8204589102@example.com\n   C: CSeq: 1 ACK\n   C: Content-Length:\
    \ 0\n"
- title: 3.7.  Client Use of the Media Server MSCML IVR Service
  contents:
  - "3.7.  Client Use of the Media Server MSCML IVR Service\n   Once the client has\
    \ determined that the media server supports the IVR\n   service, it is up to the\
    \ client to generate a suitable MSCML request\n   to initiate streaming of the\
    \ required media.\n   When using the IVR service, the initial SIP invite is used\
    \ only to\n   establish that the media server supports the MSCML IVR service,\
    \ and\n   to negotiate suitable media codecs.  Once the initial SIP INVITE and\n\
    \   response to that INVITE have been completed successfully, the client\n   must\
    \ generate a SIP INFO request with MSCML in the body of the\n   request to initiate\
    \ streaming.\n   The <playcollect> request is used, as this allows the use of\
    \ dual\n   tone multi-frequency (DTMF) digits to control playback of the media,\n\
    \   such as fast-forward or rewind.\n   Since the <playcollect> request is used\
    \ purely for its VCR-like\n   capabilities, there is no need for the media server\
    \ to perform DTMF\n   collection.  Therefore, the playcollect attributes \"firstdigittimer\"\
    ,\n   \"interdigittimer\", and \"extradigittimer\" SHOULD all be set to \"0ms\"\
    ,\n   which will have the effect of causing digit collection to cease\n   immediately\
    \ after the media has finished playing.\n   The \"ffkey\" and \"rwkey\" attributes\
    \ of <playcollect> are used to\n   control fast-forward and rewind behavior, with\
    \ the \"skipinterval\"\n   attribute being used to control the 'speed' of these\
    \ actions.\n   The <prompt> tag is used to specify the media to be played, and\n\
    \   SHOULD have a single <audio> tag that gives the URL of the media, as\n   per\
    \ the Section 3.3.  The audio-specific name of the tag is\n   historical, as the\
    \ tag can be used for video as well as audio\n   content.  The \"stoponerror\"\
    \ attribute SHOULD be set to \"yes\", so that\n   meaningful error messages will\
    \ be returned by the media server in the\n   event of problems such as retrieving\
    \ the media from the IMAP server.\n   An example SIP INFO request using the <playcollect>\
    \ request is shown\n   at the end of this section.\n   It should be noted that\
    \ under normal (i.e., non-error) conditions,\n   the response to the <playcollect>\
    \ request is a SIP 200 (OK) response.\n   The media server then streams the media,\
    \ and only when the media has\n   finished playing (naturally or due to a user\
    \ request) does the media\n   server send a <playcollect> response, which includes\
    \ details of the\n   media played, such as length and any digits collected.\n\
    \   The client may suspend playback of the media at any time by either\n   sending\
    \ the DTMF escape key (specified as an attribute to the\n   <playcollect> request)\
    \ or by sending a <stop> request to the media\n   server in a SIP INFO request.\
    \  Upon receipt of the request, the media\n   server will acknowledge it, and\
    \ then cease streaming of the media,\n   followed by a SIP INFO request containing\
    \ the <playcollect> response.\n   If the media server cannot play the media for\
    \ any reason (for\n   example, if it cannot retrieve the media from the IMAP server),\n\
    \   streaming will not take place, and the <playcollect> response will be\n  \
    \ sent, usually with meaningful values in the <error_info> element.\n   The following\
    \ gives an example dialog between a client and media\n   server, including a rewind\
    \ request, and termination of the playback\n   by use of the escape key.  Some\
    \ elements of the SIP dialog such as\n   full SIP header fields and SDP are omitted\
    \ for reasons of brevity.\n   (The protocol diagram in Section 3.9.2 shows the\
    \ high-level message\n   flow between all the components, including the IMAP server.)\n\
    \   C: INVITE sip:ivr@ms.example.com SIP/2.0\n   C: From: UserA <sip:UAA@example.com>\n\
    \   C: To: IVR <sip:ivr@ms.example.com>\n   C: Call-ID: 3298420296@example.com\n\
    \   C: CSeq: 1 INVITE\n   C: Contact: <sip:UAA@192.0.2.40>\n   C: Content-Type:\
    \ application/sdp\n   C: Content-Length: XXX\n   C:\n   C: <SDP Here>\n   S: SIP/2.0\
    \ 200 OK\n   S: From: UserA <sip:UAA@example.com>\n   S: To: IVR <sip:ivr@ms.example.com>\n\
    \   S: Call-ID: 3298420296@example.com\n   S: CSeq: 1 INVITE\n   S: Contact: <sip:ivr@192.0.2.41>\n\
    \   S: Content-Type: application/sdp\n   S: Content-Length: XXX\n   S:\n   S:\
    \ <SDP Here>\n   C: ACK sip:ivr@ms.example.com SIP/2.0\n   C: From: UserA <sip:UAA@example.com>\n\
    \   C: To: IVR <sip:ivr@ms2.example.com>\n   C: Call-ID: 3298420296@example.com\n\
    \   C: CSeq: 1 ACK\n   C: Content-Length: 0\n   C: INFO sip:ivr@192.0.2.41 SIP/2.0\n\
    \   C: From: UserA <sip:UAA@example.com>\n   C: To: IVR <sip:ivr@ms.example.com>\n\
    \   C: Call-ID: 3298420296@example.com\n   C: CSeq: 2 INFO\n   C: Content-Type:\
    \ application/mediaservercontrol+xml\n   C: Content-Length: 423\n   C:\n   C:\
    \ <?xml version=\"1.0\"?>\n   C: <MediaServerControl version=\"1.0\">\n   C: <request>\n\
    \   C: <playcollect id=\"332985001\"\n   C: firstdigittimer=\"0ms\" interdigittimer=\"\
    0ms\" extradigittimer=\"0ms\"\n   C: skipinterval=\"6s\" ffkey=\"6\" rwkey=\"\
    4\" escape=\"*\">\n   C: <prompt stoponerror=\"yes\"\n   C: locale=\"en_US\" offset=\"\
    0\" gain=\"0\" rate=\"0\"\n   C: delay=\"0\" duration=\"infinite\" repeat=\"0\"\
    >\n   C: <audio url=\"imap://joe@example.com/INBOX/;uid=24356/;section=1.2;\n\
    \   expire=2006-12-19T16:39:57-08:00;urlauth=anonymous:\n   internal:238234982398239898a9898998798b987s87920\"\
    />\n   C: </prompt>\n   C: </playcollect>\n   C: </request>\n   C: </MediaServerControl>\n\
    \   S: SIP/2.0 200 OK\n   S: From: UserA <sip:UAA@example.com>\n   S: To: IVR\
    \ <sip:ivr@ms.example.com>\n   S: Call-ID: 3298420296@example.com\n   S: CSeq:\
    \ 2 INFO\n   S: Contact: <sip:ivr@192.0.2.41>\n   S: Content-Length: 0\n   S:\
    \ <Media server retrieves media from IMAP server and streams to\n   client>\n\
    \   C: <Client streams 6 key>\n   S: <Media Server fast forwards media by 6 seconds>\n\
    \   C: <Client streams * key>\n   S: <Media Server stops streaming>\n   S: INFO\
    \ sip:UAA@192.0.2.40 SIP/2.0\n   S: From: IVR <sip:ivr@ms.example.com>\n   S:\
    \ To: UserA <sip:UAA@example.com>\n   S: Call-ID: 3298420296@example.com\n   S:\
    \ CSeq: 5 INFO\n   S: Contact: <sip:ivr@192.0.2.41>\n   S: Content-Type: application/mediaservercontrol+xml\n\
    \   S: Content-Length: XXX\n   S:\n   S: <?xml version=\"1.0\"?>\n   S: <MediaServerControl\
    \ version=\"1.0\">\n   S: <response id=\"332985001\" request=\"playcollect\" code=\"\
    200\"\n   S: reason=\"escapekey\" playduration=\"34s\"\n   S: playoffset=\"34s\"\
    \ digits=\"\" />\n   S: </MediaServerControl>\n   C: SIP/2.0 200 OK\n   C: From:\
    \ IVR <sip:ivr@ms.example.com>\n   C: To: UserA <sip:UAA@example.com>\n   C: Call-ID:\
    \ 3298420296@example.com\n   C: CSeq: 5 INFO\n   C: Content-Length: 0\n   C: BYE\
    \ sip:ivr@192.0.2.41 SIP/2.0\n   C: From: UserA <sip:UAA@example.com>\n   C: To:\
    \ IVR <sip:ivr@ms.example.com>\n   C: Call-ID: 3298420296@example.com\n   C: CSeq:\
    \ 6 BYE\n   C: Content-Length: 0\n   S: SIP/2.0 200 OK\n   S: From: UserA <sip:UAA@example.com>\n\
    \   S: To: IVR <sip:ivr@ms.example.com>\n   S: Call-ID: 3298420296@example.com\n\
    \   S: CSeq: 6 BYE\n   S: Contact: <sip:ivr@192.0.2.41>\n   S: Content-Length:\
    \ 0\n"
- title: 3.8.  Media Server Use of IMAP Server
  contents:
  - "3.8.  Media Server Use of IMAP Server\n   This section describes how the media\
    \ server converts the IMAP URL\n   received via the announcement or IVR service\
    \ into suitable IMAP\n   commands for retrieving the content.\n   The media server\
    \ first connects to the IMAP server specified in the\n   URL.  Once connected,\
    \ the media server SHOULD use TLS [TLS] to\n   encrypt the communication path.\n\
    \   If the media server has a user identity on the IMAP server, the media\n  \
    \ server SHOULD authenticate itself to the IMAP server using the media\n   server's\
    \ user identity.\n   If the media server is not configured as an authorized user\
    \ of the\n   IMAP server, then the behavior specified in IMAP URL [IMAPURL] MUST\n\
    \   be followed.  That is, if the server advertises AUTH=ANONYMOUS IMAP\n   capability,\
    \ the media server MUST use the AUTHENTICATE command with\n   the ANONYMOUS [ANONYMOUS]\
    \ SASL mechanism.  If SASL ANONYMOUS is not\n   available, the username \"anonymous\"\
    \ is used with the \"LOGIN\" command\n   and the password is supplied as the Internet\
    \ email address of the\n   administrative contact for the media server.\n   Once\
    \ authenticated, the media server issues the URLFETCH command,\n   using the URL\
    \ supplied in the 'play' parameter of the SIP INVITE (or\n   audio tag of the\
    \ MSCML).  If the IMAP server does not advertise\n   URLAUTH=BINARY in its post-authentication\
    \ capability string, then the\n   media server returns a suitable error code to\
    \ the client.\n   The additional parameters to the URLFETCH command specified\
    \ in\n   (URLFETCH BINARY) [URLFETCH_BINARY] are used by the media server to\n\
    \   tell the IMAP server to remove any transfer encoding and return the\n   content\
    \ type of the media (as content-type information is not\n   contained in the IMAP\
    \ URL).\n   A successful URLFETCH command will return the message part containing\n\
    \   the media to be streamed.  If the URLFETCH was unsuccessful, then the\n  \
    \ media server MUST return an appropriate error response to the client.\n   Assuming\
    \ the content is retrieved successfully, the media server\n   returns a 200 (OK)\
    \ response code to the client.  After an ACK is\n   received, an RTP stream is\
    \ delivered to the client using the\n   parameters negotiated in the SDP.\n  \
    \ If appropriate, the media server MAY choose to implement connection\n   caching,\
    \ in which case, connection and disconnection from the IMAP\n   server are handled\
    \ according to whatever algorithm the media server\n   chooses.  For example,\
    \ the media server may know, a priori, that it\n   will always access the same\
    \ IMAP server using the same login\n   credentials with an access pattern that\
    \ would benefit from connection\n   caching, without unduly impacting server resources.\n\
    \   Examples:\n   C: a001 LOGIN anonymous null\n   S: a001 OK LOGIN completed.\n\
    \   C: a002 URLFETCH\n   (\"imap://joe@example.com/INBOX/;uid=24356/;section=1.2;\n\
    \   expire=2006-12-19T16:39:57-08:00;urlauth=anonymous:\n   internal:238234982398239898a9898998798b987s87920\"\
    \ BODYPARTSTRUCTURE\n   BINARY)\n   S: * URLFETCH \"imap://joe@example.com/INBOX/;uid=24356/;\n\
    \   section=1.2;expire=2006-12-19T16:39:57-08:00;urlauth=anonymous:\n   internal:238234982398239898a9898998798b987s87920\"\
    \n   (BODYPARTSTRUCTURE (\"VIDEO\" \"MPEG\" () NIL NIL \"BINARY\" 655350))\n \
    \  (BINARY ~{655350}\n   S: [ ~655350 octets of binary data, containing NUL octets\
    \ ])\n   S: a002 OK URLFETCH completed.\n   C: a003 LOGOUT\n   S: a003 OK LOGOUT\
    \ completed.\n"
- title: 3.9.  Protocol Diagrams
  contents:
  - "3.9.  Protocol Diagrams\n   This section gives examples of using the mechanism\
    \ described in the\n   document to stream media from a media server to a client,\
    \ fetching\n   the content from an IMAP server.  In all of the examples, the IMAP,\n\
    \   SIP, and RTP protocols use the line styles \"-\", \"=\", and \"+\",\n   respectively.\n"
- title: 3.9.1.  Announcement Service Protocol Diagram
  contents:
  - "3.9.1.  Announcement Service Protocol Diagram\n   The following diagram shows\
    \ the protocol interactions between the\n   email client, the IMAP server, and\
    \ the media server when the client\n   uses the announcement service.\n   Client\
    \                     IMAP Server                   Media Server\n     |   FETCH\
    \ (BODYSTRUCTURE)     |                              |\n     |---------------------------->|\
    \                              |\n     |           OK                |       \
    \                       |\n     |<----------------------------|              \
    \                |\n     |   GENURLAUTH                |                     \
    \         |\n     |---------------------------->|                            \
    \  |\n     |           OK                |                              |\n  \
    \   |<----------------------------|                              |\n     |   \
    \                          |                              |\n     |          \
    \                SIP INVITE                        |\n     |===========================================================>|\n\
    \     |                             |                              |\n     | \
    \                            |          URLFETCH            |\n     |        \
    \                     |<-----------------------------|\n     |               \
    \              |             OK               |\n     |                      \
    \       |----------------------------->|\n     |                             |\
    \                              |\n     |                          200 OK     \
    \                       |\n     |<===========================================================|\n\
    \     |                          ACK                               |\n     |===========================================================>|\n\
    \     |                             |                              |\n     | \
    \                   Stream Message Part (RTP)               |\n     |<+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\n\
    \     |                             |                              |\n     | \
    \                           BYE                             |\n     |<===========================================================|\n\
    \     |                          200 OK                            |\n     |===========================================================>|\n"
- title: 3.9.2.  IVR Service Protocol Diagram
  contents:
  - "3.9.2.  IVR Service Protocol Diagram\n   The following diagram shows a simplified\
    \ view of the protocol\n   interactions between the email client, the IMAP server,\
    \ and the media\n   server when the client uses the MSCML IVR service.\n   Client\
    \                     IMAP Server                   Media Server\n     |   FETCH\
    \ (BODYSTRUCTURE)     |                              |\n     |---------------------------->|\
    \                              |\n     |           OK                |       \
    \                       |\n     |<----------------------------|              \
    \                |\n     |   GENURLAUTH                |                     \
    \         |\n     |---------------------------->|                            \
    \  |\n     |           OK                |                              |\n  \
    \   |<----------------------------|                              |\n     |   \
    \                          |                              |\n     |          \
    \                SIP INVITE                        |\n     |===========================================================>|\n\
    \     |                             |                              |\n     | \
    \                         200 OK                            |\n     |<===========================================================|\n\
    \     |                          ACK                               |\n     |===========================================================>|\n\
    \     |                             |                              |\n     | \
    \                         SIP INFO (playcollect)            |\n     |===========================================================>|\n\
    \     |                             |                              |\n     | \
    \                         200 OK                            |\n     |<===========================================================|\n\
    \     |                             |                              |\n     | \
    \                            |          URLFETCH            |\n     |        \
    \                     |<-----------------------------|\n     |               \
    \              |             OK               |\n     |                      \
    \       |----------------------------->|\n     |                             |\
    \                              |\n     |                    Stream Message Part\
    \ (RTP)               |\n     |<+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\n\
    \     |                             |                              |\n     | \
    \                         SIP INFO (e.g., DTMF ff)          |\n     |===========================================================>|\n\
    \     |                          200 OK                            |\n     |<===========================================================|\n\
    \     |                             |                              |\n     | \
    \                   Continue streaming (RTP)                |\n     |<+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\n\
    \     |                             |                              |\n     | \
    \               (Streaming Ends or is terminated)           |\n     |        \
    \                     |                              |\n     |               \
    \      SIP INFO (playcollect response)        |\n     |<===========================================================|\n\
    \     |                            BYE                             |\n     |===========================================================>|\n\
    \     |                           200 OK                           |\n     |<===========================================================|\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This document proposes the use of URLAUTH [URLAUTH]\
    \ \"pawn tickets\",\n   received over IMAP [IMAP], and transmitted over SIP [SIP],\
    \ possibly\n   within the MSCML payload of RFC 5022 [MSCML], in order to stream\n\
    \   media received in messages.  As such, the security considerations in\n   all\
    \ these documents apply to this specification.\n   In summary, as the authorized\
    \ URLs may grant access to data,\n   implementors of this specification need to\
    \ consider the following\n   with respect to the security implications of using\
    \ IMAP URLs:\n   o  Use of an anonymous pawn ticket grants access to any client\
    \ of the\n      IMAP server without requiring any authentication credentials.\
    \  The\n      security mechanisms referenced above (with the caveats specified\n\
    \      below) SHOULD be used to prevent unauthorized access to the pawn\n    \
    \  ticket.\n   o  Use of pawn tickets that contain the \"stream\" access identifier\n\
    \      restricts access to the content to those entities that are\n      authorized\
    \ users of the IMAP server for the purposes of streaming\n      retrieved content.\
    \  Use of such pawn tickets is thus desirable and\n      so implementors should\
    \ consult Section 3.3, which describes when\n      such pawn tickets should be\
    \ used.\n   o  If the announcement service is used to set up streaming, then RFC\n\
    \      4240 [NETANN] specifies that the pawn ticket is passed in the\n      Request-URI,\
    \ and so untrusted third parties may be able to\n      intercept the pawn ticket.\
    \  The SIP communication channel MAY be\n      secured by using SIPS URIs [SIP],\
    \ which would provide hop-by-hop\n      TLS encryption.\n   o  If the IVR service\
    \ (RFC 5022 [MSCML]) is used to set up and\n      control streaming, then MSCML\
    \ is used to carry the pawn ticket in\n      the body of the request, and so untrusted\
    \ third parties may be\n      able to intercept the pawn ticket.  This MAY be\
    \ secured by using\n      SIPS URIs [SIP], which would provide hop-by-hop TLS\
    \ encryption.\n   o  Using SIPS URIs in the above situations protects the pawn\
    \ ticket\n      from third parties; however, it still allows proxies access to\
    \ the\n      pawn ticket, which could result in misuse by malicious proxies;\n\
    \      see note below.\n   This document describes a mechanism that makes use\
    \ of two separate\n   servers to achieve the goal of streaming the content desired\
    \ by the\n   client.  A major security implication of this is that the media\n\
    \   server and IMAP server may well be located in separate administrative\n  \
    \ domains.  This leads us to consider the security implications of a\n   three-way\
    \ protocol exchange, and the potential trust model implicit\n   in that tripartite\
    \ relationship.  The security implications of the\n   individual protocols have\
    \ already been referenced; therefore, this\n   section describes the security\
    \ considerations specific to the three-\n   way data exchange, as follows:\n \
    \  o  The client grants the media server full access to the potentially\n    \
    \  private media content specified by the IMAP URL.  As a result, the\n      client\
    \ is responsible for verifying the authenticity of the media\n      server to\
    \ a degree it finds acceptable for the content (we can\n      refer to this process\
    \ as determining the \"trust\" that the client\n      has in a particular media\
    \ server).  The security mechanisms\n      provided by SIP [SIP] and RTP [RTP]\
    \ may be used for this purpose,\n      as well as out of band mechanisms such\
    \ as pre-configuration.\n   o  However, since the media server will retrieve content\
    \ from an IMAP\n      server on the user's behalf, the issue of security between\
    \ the\n      IMAP server and the media server also needs to be considered.  A\n\
    \      client has no way of determining (programatically at least) the\n     \
    \ security of the exchanges between the media server and the IMAP\n      server.\
    \  However, it can determine, using the \"stream\" token that\n      is part of\
    \ the media server discovery mechanism described in\n      Section 3.2, that the\
    \ media server has a pre-existing\n      authentication relationship with the\
    \ IMAP server for the purposes\n      of retrieving content using IMAP URLs. \
    \ The IMAP server\n      administrator may put prerequisites on media server administrator\n\
    \      before this relationship can be established, for example, to\n      guarantee\
    \ the security of the communication between the media\n      server and the IMAP\
    \ server.\n   o  The above two security considerations will influence the decision\n\
    \      the client makes with regards to generation of the pawn ticket\n      that\
    \ is subsequently passed to the media server.  This document\n      mandates the\
    \ use of URLs protected with the \"stream\" access\n      identifier where the\
    \ client knows in advance that the \"stream\"\n      authentication relationship\
    \ between media server and IMAP server\n      exists.  However, it does allow\
    \ the use of anonymous pawn tickets\n      where the possibility exists that use\
    \ of \"stream\" would cause\n      streaming to fail.\n   o  There exists the\
    \ possibility of several types of attack by a\n      malicious media server, SIP\
    \ proxy, or other network elements even\n      against pawn tickets protected\
    \ with the \"stream\" access\n      identifier.  All of these attacks allow access\
    \ to the RTP stream,\n      if not the original content.  These attacks include:\n\
    \      *  The client contacts a malicious media server, MS1, that then\n     \
    \    proxies the streaming request to a second media server, MS2,\n         that\
    \ it has determined or guessed to have \"stream\"\n         authorization credentials\
    \ with the IMAP server specified in the\n         pawn ticket.  The media server\
    \ can then redirect the streamed\n         RTP traffic elsewhere.\n      *  Any\
    \ proxy on the path between the client and the media server\n         has access\
    \ to the client's message in cleartext.  In this case,\n         a malicious proxy\
    \ could perform a man-in-the-middle attack and\n         could change the message\
    \ to redirect RTP traffic elsewhere.\n      *  Any network element that is able\
    \ to \"see\" the traffic between\n         the client and the media server (or\
    \ between any two proxies)\n         can capture the pawn ticket, and then reissue\
    \ a request using\n         that pawn ticket to the same media server.  Again\
    \ the streamed\n         traffic can be redirected to any desired location.\n\
    \   Media servers handling streaming requests will be making use of pawn-\n  \
    \ ticket URLs for the period of time required to process the streaming\n   request,\
    \ after which the URL will be forgotten.  However, media\n   servers may log the\
    \ URLs received from clients, in which case, the\n   private data contained in\
    \ the IMAP server could be accessed by a\n   malicious or curious media server\
    \ administrator.  Even URLs protected\n   with EXPIRE may be accessed within the\
    \ period of expiry.  Therefore,\n   media servers SHOULD remove or anonymize the\
    \ internal portion of the\n   IMAP URL when logging that URL.\n   Additionally,\
    \ many of the security considerations in the Message\n   Submission BURL Extension\
    \ apply to this document, particularly around\n   the use of pawn tickets and\
    \ prearranged trust relationships such as\n   those described above.\n   Message\
    \ parts that are encrypted using mechanisms such as S/MIME\n   [SMIME] are designed\
    \ to prevent third parties from accessing the\n   data, thus media servers will\
    \ not be able to fulfill streaming\n   requests for messages parts that are encrypted.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   IANA has registered the following [METADATA] server\
    \ entry to be used\n   for media server discovery, using the [METADATA] registry.\n\
    \      To: iana@iana.org\n      Subject: IMAP METADATA Entry Registration\n  \
    \    Type: Server\n      Name: /shared/mediaServers\n      Description: Defines\
    \ a set of URIs containing the locations of\n         suitable media servers for\
    \ streaming multimedia content\n      Content-type: text/plain; charset=utf-8\n\
    \      Contact: neil.cook@noware.co.uk\n"
- title: 6.  Digital Rights Management (DRM) Issues
  contents:
  - "6.  Digital Rights Management (DRM) Issues\n   This document does not specify\
    \ any Digital Rights Management (DRM)\n   mechanisms for controlling access to\
    \ and copying of the media to be\n   streamed.  This is intentional.  A reference\
    \ to a piece of media\n   content is created using the URLAUTH [URLAUTH] command;\
    \ thus, any DRM\n   required should be implemented within the media itself, as\n\
    \   implementing checks within URLAUTH could affect any use of the\n   URLAUTH\
    \ command, such as the BURL [BURL] command for message\n   submission.\n   The\
    \ use of URLAUTH in this specification is believed to be pursuant\n   with, and\
    \ used only for, the execution of those rights to be expected\n   when media is\
    \ sent via traditional internet messaging, and causes no\n   duplication of media\
    \ content that is not essentially provided by the\n   action of sending the message.\
    \  In other words, the use of the\n   content for downloading and viewing *is*\
    \ implicitly granted by the\n   sender of the message, in as much as the sender\
    \ has the right to\n   grant such rights.\n   The document author believes that\
    \ if DRM is a requirement for\n   Internet messaging, then a suitable DRM mechanism\
    \ should be created.\n   How such a mechanism would work is outside the scope\
    \ of this\n   document.\n"
- title: 7.  Deployment Considerations
  contents:
  - "7.  Deployment Considerations\n   This document assumes an Internet deployment\
    \ where there are no\n   network restrictions between the different components.\
    \  Specifically,\n   it does not address issues that can occur when network policies\n\
    \   restrict the communication between different components, especially\n   between\
    \ the media server and the IMAP server, and between the client\n   the media server.\
    \  In particular, RFC 5022 states that \"It is\n   unlikely, but not prohibited,\
    \ for end-user SIP UACs to have a direct\n   signaling relationship with a media\
    \ server\".  This caveat makes it\n   likely that firewalls and other network\
    \ security mechanisms will be\n   configured to block direct end-user access to\
    \ media servers.\n   In order for either of the streaming mechanisms described\
    \ in this\n   document to work, local administrators MUST relax firewall policies\n\
    \   such that appropriate SIP UACs (user agent clients) running on mobile\n  \
    \ devices are permitted to access the media servers directly using the\n   SIP\
    \ protocol.  The detail of how the restrictions are relaxed (for\n   example,\
    \ only allowing clients connecting from the network space\n   owned/maintained\
    \ by the operator of the media server) is a matter of\n   local policy, and so\
    \ is outside the scope of this document.\n"
- title: 8.  Formal Syntax
  contents:
  - "8.  Formal Syntax\n   The following syntax specification for the mediaServers\
    \ METADATA\n   entry value uses the Augmented Backus-Naur Form (ABNF) notation\
    \ as\n   specified in RFC 5234 [ABNF] and the \"absolute-URI\" definition from\n\
    \   RFC 3986 [RFC3986].\n   Except as noted otherwise, all alphabetic characters\
    \ are case-\n   insensitive.  The use of upper or lower case characters to define\n\
    \   token strings is for editorial clarity only.  Implementations MUST\n   accept\
    \ these strings in a case-insensitive fashion.\n   Copyright (c) 2009 IETF Trust\
    \ and the persons identified as authors\n   of the code.  All rights reserved.\n\
    \   Redistribution and use in source and binary forms, with or without\n   modification,\
    \ are permitted provided that the following conditions\n   are met:\n   - Redistributions\
    \ of source code must retain the above copyright\n     notice, this list of conditions\
    \ and the following disclaimer.\n   - Redistributions in binary form must reproduce\
    \ the above copyright\n     notice, this list of conditions and the following\
    \ disclaimer in the\n     documentation and/or other materials provided with the\n\
    \     distribution.\n   - Neither the name of Internet Society, IETF or IETF Trust,\
    \ nor the\n     names of specific contributors, may be used to endorse or promote\n\
    \     products derived from this software without specific prior written\n   \
    \  permission.\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\
    \   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n  \
    \ A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n   OWNER\
    \ OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n   SPECIAL,\
    \ EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n   LIMITED TO, PROCUREMENT\
    \ OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n   DATA, OR PROFITS; OR BUSINESS\
    \ INTERRUPTION) HOWEVER CAUSED AND ON ANY\n   THEORY OF LIABILITY, WHETHER IN\
    \ CONTRACT, STRICT LIABILITY, OR TORT\n   (INCLUDING NEGLIGENCE OR OTHERWISE)\
    \ ARISING IN ANY WAY OUT OF THE USE\n   OF THIS SOFTWARE, EVEN IF ADVISED OF THE\
    \ POSSIBILITY OF SUCH DAMAGE.\n        media-servers = ms-tuple *(\";\" ms-tuple)\n\
    \        ms-tuple      = \"<\" absolute-URI \">\" [\":\" \"stream\"]\n"
- title: 9.  Contributors
  contents:
  - "9.  Contributors\n   Eric Burger (eburger@standardstrack.com) provided the initial\n\
    \   inspiration for this document, along with advice and support on\n   aspects\
    \ of the media server IVR and announcement services, as well as\n   help with\
    \ the IETF process.\n   Many people made helpful comments on the document, including\
    \ Alexey\n   Melnikov, Dave Cridland, Martijn Koster, and a variety of folks in\n\
    \   the LEMONADE and SIPPING WGs.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [ABNF]      Crocker, D., Ed. and P. Overell,\
    \ \"Augmented BNF for\n               Syntax Specifications: ABNF\", STD 68, RFC\
    \ 5234,\n               January 2008.\n   [ACCESSID]  Cook, N., \"Internet Message\
    \ Access Protocol (IMAP) - URL\n               Access Identifier Extension\",\
    \ RFC 5593, June 2009.\n   [ANONYMOUS] Zeilenga, K., \"Anonymous Simple Authentication\
    \ and\n               Security Layer (SASL) Mechanism\", RFC 4505, June 2006.\n\
    \   [IMAP]      Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n  \
    \             4rev1\", RFC 3501, March 2003.\n   [IMAPURL]   Melnikov, A., Ed.\
    \ and C. Newman, \"IMAP URL Scheme\",\n               RFC 5092, October 2007.\n\
    \   [KEYWORDS]  Bradner, S., \"Key words for use in RFCs to Indicate\n       \
    \        Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [METADATA]  Daboo,\
    \ C., \"The IMAP METADATA Extension\", RFC 5464,\n               February 2009.\n\
    \   [MIME]      Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n  \
    \             Extensions (MIME)\", RFC 2045, November 1996.\n               Freed,\
    \ N. and N. Borenstein, \"Multipurpose Internet Mail\n               Extensions\
    \ (MIME) Part Two: Media Types\", RFC 2046,\n               November 1996.\n \
    \              Moore, K., \"MIME (Multipurpose Internet Mail Extensions)\n   \
    \            Part Three: Message Header Extensions for Non-ASCII\n           \
    \    Text\", RFC 2047, November 1996.\n               Freed, N. and J. Klensin,\
    \ \"Media Type Specifications and\n               Registration Procedures\", BCP\
    \ 13, RFC 4288, December\n               2005.\n               Freed, N. and J.\
    \ Klensin, \"Multipurpose Internet Mail\n               Extensions (MIME) Part\
    \ Four: Registration Procedures\",\n               BCP 13, RFC 4289, December\
    \ 2005.\n               Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n\
    \               Extensions (MIME) Part Five: Conformance Criteria and\n      \
    \         Examples\", RFC 2049, November 1996.\n   [MSCML]     Van Dyke, J., Burger,\
    \ E., Ed., and A. Spitzer, \"Media\n               Server Control Markup Language\
    \ (MSCML) and Protocol\",\n               RFC 5022, September 2007.\n   [NETANN]\
    \    Burger, E., Van Dyke, J., and A. Spitzer, \"Basic Network\n             \
    \  Media Services with SIP\", RFC 4240, December 2005.\n   [RFC3986]   Berners-Lee,\
    \ T., Fielding, R., and L. Masinter, \"Uniform\n               Resource Identifier\
    \ (URI): Generic Syntax\", STD 66,\n               RFC 3986, January 2005.\n \
    \  [RTP]       Schulzrinne, H., Casner, S., Frederick, R., and V.\n          \
    \     Jacobson, \"RTP: A Transport Protocol for Real-Time\n               Applications\"\
    , STD 64, RFC 3550, July 2003.\n   [SDP]       Handley, M., Jacobson, V., and\
    \ C. Perkins, \"SDP: Session\n               Description Protocol\", RFC 4566,\
    \ July 2006.\n   [SIP]       Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n\
    \               A., Peterson, J., Sparks, R., Handley, M., and E.\n          \
    \     Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n            \
    \   June 2002.\n   [TLS]       Dierks, T. and E. Rescorla, \"The Transport Layer\
    \ Security\n               (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n\
    \   [URLAUTH]   Crispin, M., \"Internet Message Access Protocol (IMAP) -\n   \
    \            URLAUTH Extension\", RFC 4467, May 2006.\n   [URLFETCH_BINARY]\n\
    \               Cridland, D., \"Extended URLFETCH for Binary and Converted\n \
    \              Parts\", RFC 5524, May 2009.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [BURL]      Newman, C., \"Message Submission\
    \ BURL Extension\",\n               RFC 4468, May 2006.\n   [SMIME]     Ramsdell,\
    \ B., Ed., \"\"Secure/Multipurpose Internet Mail\n               Extensions (S/MIME)\
    \ Version 3.1 Message Specification\"\",\n               RFC 3851, July 2004.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Neil L Cook\n   Cloudmark\n   EMail: neil.cook@noware.co.uk\n"
