- title: __initial_text__
  contents:
  - '       Guidelines for IP Flow Information Export (IPFIX) Testing

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n   This document may contain\
    \ material from IETF Documents or IETF\n   Contributions published or made publicly\
    \ available before November\n   10, 2008.  The person(s) controlling the copyright\
    \ in some of this\n   material may not have granted the IETF Trust the right to\
    \ allow\n   modifications of such material outside the IETF Standards Process.\n\
    \   Without obtaining an adequate license from the person(s) controlling\n   the\
    \ copyright in such materials, this document may not be modified\n   outside the\
    \ IETF Standards Process, and derivative works of it may\n   not be created outside\
    \ the IETF Standards Process, except to format\n   it for publication as an RFC\
    \ or to translate it into languages other\n   than English.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document presents a list of tests for implementers of IP Flow\n\
    \   Information eXport (IPFIX) compliant Exporting Processes and\n   Collecting\
    \ Processes.  This document specifies guidelines for a\n   series of tests that\
    \ can be run on the IPFIX Exporting Process and\n   Collecting Process in order\
    \ to probe the conformity and robustness of\n   the IPFIX protocol implementations.\
    \  These tests cover all important\n   functions, in order to gain a level of\
    \ confidence in the IPFIX\n   implementation.  Therefore, they allow the implementer\
    \ to perform\n   interoperability or plug tests with other IPFIX Exporting Processes\n\
    \   and Collecting Processes.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Document Scope .............................................4\n  \
    \    1.2. IPFIX Documents Overview ...................................5\n   2.\
    \ Terminology .....................................................5\n      2.1.\
    \ Conventions Used in This Document ..........................5\n   3. Test Specifications\
    \ .............................................5\n      3.1. Exporting Process/Collecting\
    \ Process Connectivity Tests ....6\n           3.1.1. Connectivity Tests between\
    \ the Exporting\n                  Process and Collecting ..............................6\n\
    \      3.2. Template and Data Record Tests .............................6\n  \
    \         3.2.1. Transmission of Template with Fixed-Size\n                  Information\
    \ Elements ................................7\n           3.2.2. Transmission of\
    \ Template with\n                  Variable-Length Information Elements ................7\n\
    \           3.2.3. Set Padding .........................................7\n  \
    \         3.2.4. Record Padding ......................................8\n    \
    \       3.2.5. Template Withdrawal Message .........................9\n      3.3.\
    \ Information Element Tests .................................11\n           3.3.1.\
    \ Enterprise-Specific Information Elements ...........11\n           3.3.2. Reduced\
    \ Size Encoding of Information Elements ......11\n           3.3.3. Multiple Instances\
    \ of the Same Information\n                  Element in One Template.............................12\n\
    \      3.4. Options Template Tests ....................................12\n  \
    \         3.4.1. Using Any Information Elements as Scope ............12\n    \
    \       3.4.2. Using Multiple Scopes ..............................13\n      \
    \     3.4.3. Metering Process Statistics Option Template ........13\n        \
    \   3.4.4. Metering Process Reliability Statistics\n                  Option Template\
    \ ....................................14\n           3.4.5. Exporting Process\
    \ Reliability Statistics\n                  Option Template ....................................14\n\
    \           3.4.6. Flow Keys Option Template ..........................14\n  \
    \    3.5. Stress/Load Tests .........................................15\n    \
    \       3.5.1. Large Number of Records for One Template ...........15\n      \
    \     3.5.2. Excessive Rate of Incoming Data Records ............15\n        \
    \   3.5.3. Large Templates ....................................16\n          \
    \ 3.5.4. Many New Templates within the Data Template\n                  Timeout\
    \ Interval ...................................16\n           3.5.5. Multiple Exporting\
    \ Processes Exporting to\n                  One Collecting Process .............................17\n\
    \           3.5.6. Export from One Exporting Process to\n                  Multiple\
    \ Collecting Processes ......................17\n      3.6. Error Handling ............................................17\n\
    \           3.6.1. Temporary Network Disconnect .......................17\n  \
    \         3.6.2. Exporting Process Termination and Restart\n                 \
    \ during Data Transmission ...........................18\n           3.6.3. Collecting\
    \ Process Termination and Restart\n                  during Data Transmission\
    \ ...........................18\n           3.6.4. Incorrect Template Records\
    \ and Options\n                  Template Records ...................................19\n\
    \           3.6.5. Incorrect Data Record ..............................22\n  \
    \         3.6.6. Export of Non-Matching Template and Data Records ...23\n    \
    \       3.6.7. Unknown Set IDs ....................................23\n      \
    \     3.6.8. Re-Using Template IDs ..............................24\n      3.7.\
    \ TLS Connectivity and Policy Selection .....................28\n           3.7.1.\
    \ TLS Test Setup .....................................28\n           3.7.2. TLS\
    \ over TCP Connectivity Test .....................29\n           3.7.3. DTLS over\
    \ UDP Connectivity Test ....................29\n           3.7.4. DTLS over PR-SCTP\
    \ Connectivity Test ................29\n           3.7.5. TLS Bidirectional Authentication\
    \ Policy Test .......30\n           3.7.6. Exporting Process Identity Mismatch\
    \ TLS\n                  Policy Test ........................................30\n\
    \           3.7.7. Collecting Process Identity Mismatch TLS\n                \
    \  Policy Test ........................................30\n   4. Security Considerations\
    \ ........................................30\n   5. Acknowledgments ................................................31\n\
    \   6. Normative References ...........................................31\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   An IPFIX implementation, whether in software, firmware,\
    \ or hardware,\n   needs to be tested thoroughly in order to check its robustness\
    \ and\n   gain confidence in the conformity to the IPFIX documents on which it\n\
    \   is based.\n   For a testable IPFIX software tool kit, one needs at least one\
    \ IPFIX\n   Exporting Process and one IPFIX Collecting Process.  However, when\n\
    \   one has, for example, only implemented a Collector, then it can be\n   complemented\
    \ with a third-party Exporter for these tests.\n   This document specifies guidelines\
    \ for a series of tests that can be\n   run on the IPFIX Exporting Process and\
    \ Collecting Process in order to\n   probe the conformity and robustness of the\
    \ IPFIX protocol\n   implementations.\n   The tests listed here can form a valuable\
    \ common basis for\n   implementers involved in interoperability testing when\
    \ all of them\n   use these tests to check their own Exporting Process and Collecting\n\
    \   Process implementation first.\n   The tests can be executed in a testbed environment\
    \ or on a live\n   network.\n   However, care should be taken regarding the \"\
    stress/load test\" and\n   the \"temporary network disconnect\", as they might\
    \ impact other\n   systems in the network.  We recommend that these specific tests\n\
    \   should be executed only in a testbed environment.\n"
- title: 1.1.  Document Scope
  contents:
  - "1.1.  Document Scope\n   This document lists tests intended to be performed between\
    \ an\n   implementation of an IPFIX Exporting Process and an IPFIX Collecting\n\
    \   Process.  For some tests, multiple instances of each of those\n   components\
    \ (Observation Points, Metering Process, Exporting Process,\n   Collecting Process)\
    \ are involved.  The testing of those different\n   IPFIX components complicates\
    \ the testing as usually one tests his\n   software against an existing implementation,\
    \ which is proven to be\n   compliant.  In some cases, two unproven implementations\
    \ of the\n   Exporting Process and Collecting Process must be tested against each\n\
    \   other.  The tests range from basic transport connectivity to export\n   of\
    \ Template and associated Data Records, high load on the Collecting\n   Process,\
    \ and error condition situations.  This document is not\n   intended as a replacement\
    \ for formal testing software procedures\n   based on, e.g., TTCN3 (http://www.ttcn-3.org/)\
    \ but as a best-\n   practices approach to an informal testing of a developer's\
    \ IPFIX\n   implementation.\n"
- title: 1.2.  IPFIX Documents Overview
  contents:
  - "1.2.  IPFIX Documents Overview\n   The IPFIX protocol [RFC5101] provides network\
    \ administrators with\n   access to IP Flow information.  The architecture for\
    \ the export of\n   measured IP Flow information out of an IPFIX Exporting Process\
    \ to a\n   Collecting Process is defined in [RFC5470], per the requirements\n\
    \   specified in [RFC3917].\n   [RFC5470] specifies how IPFIX Data Records and\
    \ Templates are carried\n   via a congestion-aware transport protocol from IPFIX\
    \ Exporting\n   Processes to IPFIX Collecting Processes.  IPFIX has a formal\n\
    \   description of IPFIX Information Elements, their name, type, and\n   additional\
    \ semantic information, as specified in [RFC5102].  Finally,\n   [RFC5472] describes\
    \ what type of applications can use the IPFIX\n   protocol and how they can use\
    \ the information provided.  It\n   furthermore shows how the IPFIX framework\
    \ relates to other\n   architectures and frameworks.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   IPFIX-specific terminology used in this document is defined\
    \ in\n   Section 2 of [RFC5101].  In this document, as in [RFC5101], the first\n\
    \   letter of each IPFIX-specific term is capitalized.\n"
- title: 2.1.  Conventions Used in This Document
  contents:
  - "2.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Test Specifications
  contents:
  - "3.  Test Specifications\n   The tests described in this section MAY be performed\
    \ using an IPFIX\n   Exporting Process on one host and an IPFIX Collecting Process\
    \ on a\n   different host.  The configuration of the Observation Point, Metering\n\
    \   Process, Exporting Process, and Collection Process SHOULD be recorded\n  \
    \ for every test along with the test results.\n   The successful execution of\
    \ all tests described in this section will\n   give the tester a high confidence\
    \ that the tested implementation is\n   conformant with the IPFIX architecture\
    \ and protocol.  It does however\n   not provide a 100% comprehensive coverage\
    \ or formal proof of\n   conformance.\n"
- title: 3.1.  Exporting Process/Collecting Process Connectivity Tests
  contents:
  - "3.1.  Exporting Process/Collecting Process Connectivity Tests\n   This section\
    \ lists the basic tests that are preconditions for the\n   more complex tests\
    \ specified in later sections of this document.\n"
- title: 3.1.1.  Connectivity Tests between the Exporting Process and Collecting
  contents:
  - "3.1.1.  Connectivity Tests between the Exporting Process and Collecting\n   \
    \     Process\n   The tester must create one Exporting Process and one Collecting\n\
    \   Process, must configure the Exporting Process to export at least one\n   Template\
    \ Set and associated Data Records to the Collecting Process,\n   and must cause\
    \ the Exporting Process to initiate the export.\n   When the Exporting Process\
    \ and Collecting Process are to be connected\n   by a Stream Control Transmission\
    \ Protocol (SCTP) transport, the\n   tester must ensure that an SCTP association\
    \ is established.\n   When the Exporting Process and Collecting Process are to\
    \ be connected\n   by a TCP transport, the tester must ensure that a TCP connection\
    \ is\n   established.\n   The tester must ensure that the Transport Session parameters\
    \ (IP\n   addresses and ports) are correct.\n   Note that specifying instructions\
    \ and tools on how to ensure that a\n   Transport Session is correctly established\
    \ and that the parameters\n   are correct is out of the scope of this document.\n\
    \   The tester must ensure that the Data Records are actually exported.\n   The\
    \ transmitted data might be observed online with an appropriate\n   packet sniffing\
    \ tool.  Such a tool is also a viable help to check if\n   the initial connection\
    \ (SCTP, TCP) has been successfully established.\n   The tester must record which\
    \ combinations of IPv4 and IPv6\n   transports, and UDP, SCTP, and TCP transmission\
    \ protocols are\n   supported, and should perform the test for all the supported\n\
    \   combinations.\n"
- title: 3.2.  Template and Data Record Tests
  contents:
  - "3.2.  Template and Data Record Tests\n   This section lists tests for checking\
    \ the correct transmission of\n   IPFIX Template Sets and associated Data Sets.\n"
- title: 3.2.1.  Transmission of Template with Fixed-Size Information Elements
  contents:
  - "3.2.1.  Transmission of Template with Fixed-Size Information Elements\n   The\
    \ tester must create a Template with a few fixed-size Information\n   Elements\
    \ where each data type specified in Section 6.1 of [RFC5101]\n   (octet, unsigned16,\
    \ unsigned32 ...) is used at least once, and cause\n   the Template and associated\
    \ Data Records to be exported over all\n   applicable combinations of transports\
    \ and protocols in Section 3.1.\n   The tester must ensure that the Template and\
    \ associated Data Records\n   were correctly received and decoded by the Collecting\
    \ Process.  For\n   this process, the use of verbose debugging output is suggested\
    \ in\n   order to allow a detailed comparison with the sent (and therefore\n \
    \  expected) data.\n"
- title: 3.2.2.  Transmission of Template with Variable-Length Information
  contents:
  - "3.2.2.  Transmission of Template with Variable-Length Information\n        Elements\n\
    \   The tester must create a Template with a mixture of fixed-sized and\n   variable-length\
    \ Information Elements, as specified in Section 7 of\n   [RFC5101], and cause\
    \ the Template and associated Data Records to be\n   exported over all applicable\
    \ combinations of transports and protocols\n   in Section 3.1.\n   The tester\
    \ must ensure that the Template contains at least:\n      o  a single variable-length\
    \ Information Element.\n      o  a single variable-length Information Element\
    \ followed by a\n         fixed-length Information Element.\n      o  a fixed-length\
    \ Information Element followed by a variable-\n         length Information Element.\n\
    \      o  multiple variable-length Information Elements.\n   The tester must ensure\
    \ that the Template and associated Data Records\n   were correctly received and\
    \ decoded by the Collecting Process.\n"
- title: 3.2.3.  Set Padding
  contents:
  - "3.2.3.  Set Padding\n   Section 3.3.1 of [RFC5101] specifies IPFIX Set alignment\
    \ using\n   padding.\n   The tester must configure a packet generator to generate\
    \ two Data\n   Sets with padding in between consisting of zero valued octets,\
    \ as\n   shown in Figure 1.  They must be exported to the Collecting Process,\n\
    \   which must correctly decode the Data Sets and all the Data Records.\n    \
    \  +--------------------------------------------------+\n      | Set Header #1\
    \                                    |\n      +--------------------------------------------------+\n\
    \      | Data Record                                      |\n      +--------------------------------------------------+\n\
    \      | Data Record                                      |\n      +--------------------------------------------------+\n\
    \         ...\n      +--------------------------------------------------+\n  \
    \    | Data Record                                      |\n      +--------------------------------------------------+\n\
    \      | Padding with 0 valued octets                     |\n      +--------------------------------------------------+\n\
    \      | Set Header #2                                    |\n      +--------------------------------------------------+\n\
    \      | Data Record                                      |\n      +--------------------------------------------------+\n\
    \                                   Figure 1\n"
- title: 3.2.4.  Record Padding
  contents:
  - "3.2.4.  Record Padding\n   The tester must configure a packet generator to generate\
    \ a Template\n   that contains the padding Information Element (i.e., paddingOctets).\n\
    \   The Template and associated Data Records must be exported to the\n   Collecting\
    \ Process, over all applicable combinations of transports\n   and protocols in\
    \ Section 3.1.\n   The tester must repeat the test with various padding sizes,\
    \ including\n   padding to boundaries other than 4 or 8 octets.\n   The tester\
    \ must ensure the Collecting Process correctly interprets\n   cases where the\
    \ Data Records are so short that the padding is equal\n   to or longer than the\
    \ length of the record, so the padding might\n   otherwise be interpreted as another\
    \ record (e.g., 1 byte TOS plus 3\n   bytes of padding).  Refer to the specifications\
    \ in Section 3.3.1 of\n   [RFC5101].  Figure 2 depicts such a Template, while\
    \ Figure 3 depicts\n   a Data Record conforming to that Template.\n       0  \
    \                 1                   2                   3\n       0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Set ID = 2            |      Length = 16 octets       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \       Template ID 256         |       Field Count = 2         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |0|  ipDiffServCodePoint = 195  |       Field Length = 1        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |0|\
    \      paddingOctets = 210    |       Field Length = 3        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                   Figure 2\n       0                   1   \
    \                2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Set ID = 256         |          Length = 64          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \       1        |                       0                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                   Figure 3\n   The tester must test fixed-size\
    \ padding (e.g., 12 bytes of data plus\n   2 bytes of padding) and variable-length\
    \ padding (e.g., export a\n   string and a variable number of padding bytes afterwards\
    \ to align the\n   next Information Element to a 4 byte boundary).\n"
- title: 3.2.5.  Template Withdrawal Message
  contents:
  - "3.2.5.  Template Withdrawal Message\n   IPFIX Template management and Template\
    \ Withdrawal are specified in\n   Section 8 of [RFC5101].\n"
- title: 3.2.5.1.  Withdrawal of a Previously Sent Template
  contents:
  - "3.2.5.1.  Withdrawal of a Previously Sent Template\n   The tester must create\
    \ an IPFIX Template and cause that Template to\n   be exported to an IPFIX Collector\
    \ over a reliable transport.\n   The tester must check that the Template will\
    \ be correctly received\n   and decoded by the Collecting Process.\n   The tester\
    \ must cause the Exporting Process to send an IPFIX Template\n   Withdrawal Message\
    \ to the Collector in respect of the Template.  The\n   Template Withdrawal Message\
    \ must be sent over the same Transport\n   Session as the Template.\n   The tester\
    \ must ensure that the Template Withdrawal Message was\n   correctly received\
    \ and decoded by the Collecting Process, and that\n   the previously sent Template\
    \ was discarded by the Collecting Process.\n"
- title: 3.2.5.2.  Withdrawal of a Previously Withdrawn Template
  contents:
  - "3.2.5.2.  Withdrawal of a Previously Withdrawn Template\n   The tester must create,\
    \ export, and withdraw an IPFIX Template as\n   described in Section 3.2.5.1.\n\
    \   The tester must cause the Exporting Process to send a second IPFIX\n   Template\
    \ Withdrawal Message to the Collector in respect of the same\n   Template.  The\
    \ Template Withdrawal Message must be sent over the same\n   Transport Session\
    \ as the Template.\n   The tester must ensure that the Collecting Process discards\
    \ the IPFIX\n   Message and shuts down the SCTP association or closes the TCP\n\
    \   connection.  The tester must check that the Collecting Process logged\n  \
    \ the error.\n"
- title: 3.2.5.3.  Withdrawal of a Previously Unsent Template
  contents:
  - "3.2.5.3.  Withdrawal of a Previously Unsent Template\n   The tester must cause\
    \ the Exporting Process to send an IPFIX Template\n   Withdrawal Message to the\
    \ Collector in respect of a Template that has\n   not yet been exported.  The\
    \ Template Withdrawal Message must be sent\n   over a reliable transport.\n  \
    \ The tester must ensure that the Collecting Process discards the IPFIX\n   Message\
    \ and shuts down the SCTP association or closes the TCP\n   connection.  The tester\
    \ must check that the Collecting Process logged\n   the error.\n"
- title: 3.2.5.4.  Withdrawing All Data Templates
  contents:
  - "3.2.5.4.  Withdrawing All Data Templates\n   The tester must create several IPFIX\
    \ Templates and cause them to be\n   exported to an IPFIX Collector over a reliable\
    \ transport.\n   The tester must ensure that the Templates were correctly received\
    \ and\n   decoded by the Collecting Process.\n   The tester must cause the Exporting\
    \ Process to send an IPFIX All Data\n   Templates Withdrawal Message to the Collector\
    \ over the same Transport\n   Session as the Templates.\n   The tester must ensure\
    \ that the All Data Templates Withdrawal Message\n   was correctly received and\
    \ decoded by the Collecting Process, and\n   that all the previously sent Templates\
    \ were discarded by the\n   Collecting Process.\n"
- title: 3.2.5.5.  Withdrawing All Option Templates
  contents:
  - "3.2.5.5.  Withdrawing All Option Templates\n   The tester must create several\
    \ IPFIX Option Templates and cause them\n   to be exported to an IPFIX Collector\
    \ over a reliable transport.\n   The tester must ensure that the Option Templates\
    \ were correctly\n   received and decoded by the Collecting Process.\n   The tester\
    \ must cause the Exporting Process to send an IPFIX All\n   Option Templates Withdrawal\
    \ Message to the Collector over the same\n   Transport Session as the Templates.\n\
    \   The tester must ensure that the All Option Templates Withdrawal\n   Message\
    \ was correctly received and decoded by the Collecting Process,\n   and that all\
    \ the previously sent Option Templates were discarded by\n   the Collecting Process.\n"
- title: 3.3.  Information Element Tests
  contents:
  - "3.3.  Information Element Tests\n   This section lists the tests that cover the\
    \ use of Information\n   Elements.\n"
- title: 3.3.1.  Enterprise-Specific Information Elements
  contents:
  - "3.3.1.  Enterprise-Specific Information Elements\n   The tester must cause the\
    \ export of a Template and associated Data\n   Record that makes use of Enterprise-specific\
    \ Information Elements as\n   specified in Section 3.2 of [RFC5101].\n   The tester\
    \ must ensure that the Template and associated Data Record\n   are correctly received\
    \ and decoded by the Collecting Process, and it\n   must ensure that Information\
    \ Elements that are unknown to the\n   Collecting Process are not silently discarded.\n"
- title: 3.3.2.  Reduced Size Encoding of Information Elements
  contents:
  - "3.3.2.  Reduced Size Encoding of Information Elements\n   The tester must cause\
    \ the export of a Template and associated Data\n   Record containing Information\
    \ Elements using reduced size encoding as\n   specified in Section 6.2 of [RFC5101].\n\
    \   The tester must ensure that in the case of Information Elements\n   transmitted\
    \ using reduced size encoding, the Collecting Process is\n   aware of the real\
    \ size of each Information Element and not only the\n   reduced size used for\
    \ its transmission.\n"
- title: 3.3.3.  Multiple Instances of the Same Information Element in One
  contents:
  - "3.3.3.  Multiple Instances of the Same Information Element in One\n        Template\n\
    \   The tester must cause the export of a Template and associated Data\n   Record\
    \ containing multiple instances of the same Information Element\n   consecutively.\n\
    \   The tester must ensure that the Collecting Process is able to parse\n   the\
    \ IPFIX Message, and that it stores all values received for all the\n   Information\
    \ Elements that appeared multiple times in the Template\n   definition.\n   The\
    \ tester must ensure that the Collecting Process reports the\n   Information Elements\
    \ in the same order as they were specified in the\n   Template Record, as specified\
    \ in Section 8 of [RFC5101].\n   The tester must cause the export of another Template\
    \ and associated\n   Data Record containing multiple instances of the same Information\n\
    \   Element with other Information Elements in between.\n   The tester must ensure\
    \ that the Collecting Process is able to parse\n   the IPFIX Message, and that\
    \ it stores all values received for all the\n   Information Elements that appeared\
    \ multiple times in the Template\n   definition.\n   The tester must ensure that\
    \ the Collecting Process reports the\n   Information Elements in the same order\
    \ as they were specified in the\n   Template Record, as specified in Section 8\
    \ of [RFC5101].\n"
- title: 3.4.  Options Template Tests
  contents:
  - "3.4.  Options Template Tests\n   This section lists the tests that cover the\
    \ correct transfer of IPFIX\n   Options Templates.\n"
- title: 3.4.1.  Using Any Information Elements as Scope
  contents:
  - "3.4.1.  Using Any Information Elements as Scope\n   Options Templates contain\
    \ scope fields that give the context of the\n   reported Information Elements\
    \ in the corresponding Data Records.\n   Scope fields are an Information Element\
    \ specified in [RFC5102].\n   The tester SHOULD perform the export of Options\
    \ Template Records\n   containing various different Information Elements of each\
    \ of the\n   abstract data types specified in Section 6.1 of [RFC5101] (octet,\n\
    \   unsigned16, unsigned32 ...) in their scope fields, and must export a\n   Data\
    \ Record using each Template.\n   The tester must check that the Templates and\
    \ the associated Data\n   Records are correctly received and decoded by the Collecting\
    \ Process.\n   The tester must ensure that the Collecting Process accepts\n  \
    \ Information Elements in the scope field other than IPFIX Information\n   Elements\
    \ that have been recorded by IANA.\n   The tester must ensure that the Collecting\
    \ Process accepts an\n   Enterprise-specific Information Element in the scope\
    \ field.\n   As specified in Section 3.4.2.1 of [RFC5101], the Scope Field Count\n\
    \   must NOT be zero.  The tester must cause the export of an Options\n   Template\
    \ Record containing a Scope Field Count of zero.\n   The tester must ensure that\
    \ the Collecting Process shuts down the\n   SCTP association and discards the\
    \ IPFIX Message.  The tester should\n   check that the Collecting Process logged\
    \ the error.\n"
- title: 3.4.2.  Using Multiple Scopes
  contents:
  - "3.4.2.  Using Multiple Scopes\n   The tester must cause the export of an Options\
    \ Template Record\n   containing multiple scope fields, and a Data Record conforming\
    \ to\n   that Template.\n   The tester must ensure that the Collecting Process\
    \ reports the\n   Information Elements in the same order as they were specified\
    \ in the\n   Options Template Record, as specified in Section 3.4.2.1 of\n   [RFC5101].\n"
- title: 3.4.3.  Metering Process Statistics Option Template
  contents:
  - "3.4.3.  Metering Process Statistics Option Template\n   The tester must create\
    \ a Metering Process Statistics Option Template,\n   as specified in Section 4.1\
    \ of [RFC5101], and cause the Option\n   Template and an associated Data Record\
    \ to be exported.\n   The tester must ensure that the Collecting Process correctly\
    \ receives\n   and decodes the Option Template and associated Data Record.\n \
    \  The tester must also check that the optional meteringProcessId Scope\n   Field\
    \ is supported by the Collecting Process implementation.\n   If several Metering\
    \ Processes are available on the Exporter\n   Observation Domain, the tester must\
    \ create a Metering Process\n   Statistics Option Template containing multiple\
    \ scopes and an\n   associated Data Record, must cause the Option Template and\
    \ associated\n   Data Record to be exported, and must ensure that the Collecting\n\
    \   Process correctly receives and decodes the Option Template and\n   associated\
    \ Data Record.\n"
- title: 3.4.4.  Metering Process Reliability Statistics Option Template
  contents:
  - "3.4.4.  Metering Process Reliability Statistics Option Template\n   The tester\
    \ must create a Metering Process Reliability Statistics\n   Option Template, as\
    \ specified in Section 4.2 of [RFC5101], and must\n   cause the Option Template\
    \ and an associated Data Record to be\n   exported.\n   The tester must ensure\
    \ that the Collecting Process correctly receives\n   and decodes the Option Template\
    \ and associated Data Record.\n   The tester must also check that the optional\
    \ meteringProcessId Scope\n   Field is supported by the Collecting Process implementation.\n"
- title: 3.4.5.  Exporting Process Reliability Statistics Option Template
  contents:
  - "3.4.5.  Exporting Process Reliability Statistics Option Template\n   The tester\
    \ must create an Exporting Process Reliability Statistics\n   Option Template,\
    \ as specified in Section 4.3 of [RFC5101], and must\n   cause the Option Template\
    \ and an associated Data Record to be\n   exported.\n   The tester must ensure\
    \ that the Collecting Process correctly receives\n   and decodes the Option Template\
    \ and associated Data Record.\n"
- title: 3.4.6.  Flow Keys Option Template
  contents:
  - "3.4.6.  Flow Keys Option Template\n   The tester must create a Flow Keys Option\
    \ Template, as specified in\n   Section 4.4 of [RFC5101], where the templateId\
    \ refers to an existing\n   Template, and must cause the Option Template and an\
    \ associated Data\n   Record to be exported.\n   The tester must ensure that the\
    \ Collecting Process correctly receives\n   and decodes the Option Template and\
    \ associated Data Record, and it\n   must ensure that the Collecting Process associates\
    \ the Flow Keys with\n   the right Data Record Information Elements.\n   The tester\
    \ must create another Flow Keys Data Record to be exported\n   where the associated\
    \ templateId has insufficient fields to satisfy\n   the flowKeyIndicator.\n  \
    \ The tester must ensure that the Collecting Process discards the IPFIX\n   Message\
    \ and shuts down the SCTP association or closes the TCP\n   connection.  The tester\
    \ must check that the Collecting Process logged\n   the error.\n   The tester\
    \ must create another Flow Keys Option Template, where the\n   templateId refers\
    \ to a non-existing Template, and must cause the\n   Option Template and an associated\
    \ Data Record to be exported.\n   The tester must ensure that the Collecting Process\
    \ shuts down the\n   SCTP association and discards the IPFIX Message.  The tester\
    \ should\n   check that the Collecting Process logged the error.\n"
- title: 3.5.  Stress/Load Tests
  contents:
  - "3.5.  Stress/Load Tests\n   Stress tests are used to check correct behavior and\
    \ robustness of an\n   IPFIX Collecting Process implementation when a number of\
    \ Data Records\n   arrive very quickly.  This is especially important when IPFIX\
    \ over\n   UDP is used, since in that case a slow Collecting Process cannot\n\
    \   block the IPFIX Exporting Processes from exporting because UDP is not\n  \
    \ congestion aware.\n   The tests may be dependent upon the hardware and transport\
    \ technology\n   in use.  Therefore, the tests may need to be scaled up or down\
    \ to\n   meet the needs of the particular implementation.  However, the\n   implementer\
    \ must ensure that the implementation is stable under\n   excessive traffic conditions,\
    \ for whatever definition of \"excessive\"\n   applies at their intended installation.\n\
    \   The implementer must ensure the correct operation of the Exporting\n   Process\
    \ and/or Collecting Process when the Collecting Process is\n   incapable of processing\
    \ records at the rate that they are received.\n"
- title: 3.5.1.  Large Number of Records for One Template
  contents:
  - "3.5.1.  Large Number of Records for One Template\n   The tester should export\
    \ many Data Records to the Collecting Process,\n   all conforming to the same\
    \ Template, in order to put the Collecting\n   Process under stress.\n   Depending\
    \ on what the Collecting Process does (save to file, store to\n   database, analyze\
    \ the data) the Collecting Process may use up a lot\n   of memory.\n   The tester\
    \ must ensure that, if the Collecting Process runs out of\n   memory, it shuts\
    \ down the specific SCTP association or closes the TCP\n   connection but remains\
    \ available to receive data on other open\n   Transport Sessions and also stays\
    \ available for future Transport\n   Sessions.\n"
- title: 3.5.2.  Excessive Rate of Incoming Data Records
  contents:
  - "3.5.2.  Excessive Rate of Incoming Data Records\n   The tester should perform\
    \ a test where Data Records are exported to\n   the Collecting Process with an\
    \ increasing export rate.\n   For TCP or SCTP in reliable mode, the tester must\
    \ ensure that the\n   export stalls the Exporting Process once the Collecting\
    \ Process\n   becomes fully loaded.\n   For UDP export, the tester must ensure\
    \ that the Collecting Process\n   drops records as it becomes overloaded, and\
    \ must check that the\n   Collecting Process logged a warning.\n"
- title: 3.5.3.  Large Templates
  contents:
  - "3.5.3.  Large Templates\n   The tester must create Templates with the maximum\
    \ possible number of\n   Information Elements and cause these to be exported to\
    \ the Collecting\n   Process.\n   The total length field in the IP header is 16\
    \ bits, allowing a length\n   up to 65535 octets in one application-level datagram.\
    \  This limits\n   the number of Information Elements one can specify in an IPFIX\n\
    \   Template when using UDP export.  SCTP and TCP are streaming\n   protocols,\
    \ so they do not impose much restriction on the packet\n   level.  UDP requires\
    \ 20 octets for a minimal IPv4 header, 8 octets\n   for the UDP header, 16 octets\
    \ for the IPFIX header, 4 octets for the\n   Set header, and 4 octets for the\
    \ Template header, so the Template\n   definition may be up to (65535 - 20 - 8\
    \ - 16 - 4 - 4) = 65483 octets\n   long.  The minimum IPFIX Information Element\
    \ specification requires 4\n   octets: two for the Information Element ID and\
    \ two for the field\n   length.  Therefore, the maximum number of IPFIX Information\
    \ Elements\n   in a single Template is 65483 / 4 = 16370.  With this many\n  \
    \ Information Elements, the Template will be 65480 octets long, while\n   the\
    \ entire packet will be 65532 octets long.\n   The tester must create Data Records\
    \ conforming to this Template, and\n   cause them to be exported.  Note that,\
    \ for the implementation, the\n   associated Data Records might be smaller or\
    \ larger than the Template\n   Records depending on the length of the Information\
    \ Elements defined\n   by the Template and on the presence of variable-length\
    \ Information\n   Elements.\n   The tester must ensure that the Collecting Process\
    \ correctly receives\n   and decodes the Template and associated Data Records.\n"
- title: 3.5.4.  Many New Templates within the Data Template Timeout Interval
  contents:
  - "3.5.4.  Many New Templates within the Data Template Timeout Interval\n   The\
    \ tester should create a large number of different Templates and\n   cause them\
    \ to be exported to the Collecting Process to stress test\n   the Collecting Process's\
    \ memory consumption.\n   The tester must ensure that the Collecting Process gracefully\n\
    \   discards Templates if it's running out of memory resources, and it\n   should\
    \ check that warnings are logged.\n"
- title: 3.5.5.  Multiple Exporting Processes Exporting to One Collecting Process
  contents:
  - "3.5.5.  Multiple Exporting Processes Exporting to One Collecting Process\n  \
    \ The tester must configure multiple Exporting Processes to export\n   Templates\
    \ and associated Data Records to the same Collecting Process\n   at the same time.\n\
    \   The tester must ensure that all the Templates and associated Data\n   Records\
    \ are correctly received and decoded at the Collecting Process,\n   and that no\
    \ Exporting Process stalls or disconnects completely unless\n   the Collecting\
    \ Process runs out of memory.\n"
- title: 3.5.6.  Export from One Exporting Process to Multiple Collecting
  contents:
  - "3.5.6.  Export from One Exporting Process to Multiple Collecting\n        Processes\n\
    \   If the Exporting Process supports multiple simultaneous export\n   destinations,\
    \ the tester must configure the Exporting Process to\n   export Data Records in\
    \ parallel to different Collecting Processes.\n   The tester must configure the\
    \ use of a mixture of simple and complex\n   Templates and ensure they are all\
    \ correctly received and decoded by\n   all the Collecting Processes.\n"
- title: 3.6.  Error Handling
  contents:
  - "3.6.  Error Handling\n   This section lists and describes a number of problems\
    \ that might\n   occur in either the network or data transmission or related to\
    \ wrong\n   information encoding, and that the IPFIX Exporting Process and\n \
    \  Collecting Process must be capable of handling in a graceful way.  It\n   is\
    \ intended to test the robustness and fault tolerance of the IPFIX\n   Processes.\n"
- title: 3.6.1.  Temporary Network Disconnect
  contents:
  - "3.6.1.  Temporary Network Disconnect\n   The IPFIX Exporting Process and Collecting\
    \ Process behavior must be\n   checked upon interruptions of data transmission\
    \ due to network\n   failures (whether physical or logical, e.g., defective routing).\n\
    \   The tester must configure continuous export over all applicable\n   combinations\
    \ of transports and protocols in Section 3.1, in turn.\n   For SCTP-based associations\
    \ and TCP-based connections, the tester\n   should create a short disconnect between\
    \ the Exporting Process and\n   the Collecting Process (e.g., by momentarily interrupting\
    \ the network\n   connection) and must ensure that export continues after the\n\
    \   connection is repaired.  The tester must then create a longer\n   disconnection\
    \ between the Exporting Process and Collecting Process,\n   and it must ensure\
    \ that export continues after the connection is\n   repaired.\n   For UDP-based\
    \ data export, there is no noticeable connection loss,\n   but data received with\
    \ non-consecutive sequence numbers indicates\n   data loss.  Refer to the sequence\
    \ number specifications in Section\n   3.1 of [RFC5101].  The tester should create\
    \ a short disconnect\n   between the Exporting Process and Collecting Process,\
    \ and it must\n   ensure that this is recognized and reported by the Collecting\
    \ Process\n   per Section 3.1 of [RFC5101].\n"
- title: 3.6.2.  Exporting Process Termination and Restart during Data
  contents:
  - "3.6.2.  Exporting Process Termination and Restart during Data\n        Transmission\n\
    \   An IPFIX Collecting Process might be confronted with a faulty\n   Exporting\
    \ Process implementation that suddenly crashes, dropping any\n   open connections.\
    \  The Exporting Process may be restarted again soon\n   after the crash.\n  \
    \ Such an event will only be visible to the Collecting Process when the\n   IPFIX\
    \ Messages (Templates and associated Data Records) are carried\n   over TCP or\
    \ SCTP.  For export via UDP, no such test is available due\n   to the connection-less\
    \ nature of the transport.\n   The tester must configure continuous export over\
    \ all applicable\n   combinations of SCTP and TCP transports and protocols in\
    \ Section 3.1,\n   in turn.  For each combination, the tester must establish export,\n\
    \   then kill the active Exporting Process.\n   The tester must ensure that the\
    \ associated Collecting Process shuts\n   down SCTP associations and closes TCP\
    \ connections associated with\n   that export after a suitable timeout period.\n\
    \   The tester must Ensure that the Collecting Process discards the\n   Template(s)\
    \ received on the killed transport session.\n   The tester must restart the Exporting\
    \ Process again, and it must\n   ensure that the Exporting Process exports the\
    \ Templates again.\n   The tester must ensure that the Collecting Process receives\
    \ and\n   accepts both Templates and associated Data Records from the new\n  \
    \ Exporting Process running at the same source host.\n"
- title: 3.6.3.  Collecting Process Termination and Restart during Data
  contents:
  - "3.6.3.  Collecting Process Termination and Restart during Data\n        Transmission\n\
    \   An IPFIX Exporting Process might be confronted with a faulty\n   Collecting\
    \ Process implementation that suddenly crashes, dropping any\n   open Transport\
    \ Sessions.  The Collecting Process may be restarted\n   again soon after the\
    \ crash.\n   The tester must set up an Exporting Process and Collecting Process\n\
    \   and cause IPFIX Templates and associated Data Records to be exported\n   over\
    \ all applicable combinations of SCTP and TCP transports and\n   protocols in\
    \ Section 3.1, in turn.  Via UDP, the restart of the\n   Collecting Process will\
    \ be invisible to the Exporting Process and\n   have no effect.\n   The tester\
    \ must terminate the Collecting Process while the export is\n   in progress, and\
    \ must ensure that the Exporting Process shuts down\n   SCTP associations and\
    \ closes TCP connections associated with that\n   Collecting Process.\n   The\
    \ tester must restart the Collecting Process and ensure that the\n   Exporting\
    \ Process connects to the Collecting Process again and that\n   it exports the\
    \ IPFIX Templates again.\n   The tester must ensure that the new Collecting Process\
    \ correctly\n   receives and decodes the IPFIX Data Records again.\n"
- title: 3.6.4.  Incorrect Template Records and Options Template Records
  contents:
  - "3.6.4.  Incorrect Template Records and Options Template Records\n   These tests\
    \ verify the Collecting Process's operation when it\n   receives a Template Record\
    \ or Options Template Record with an invalid\n   message length.  Refer to the\
    \ specifications in Section 3.4.1 and\n   3.4.2 of [RFC5101], respectively.\n\
    \   Consider the example Template Record shown in Figure 4.  This\n   Template\
    \ record is missing one Information Element ID and one\n   Information Element\
    \ length field.  There is insufficient data in the\n   Set for the specified Set\
    \ length, and the overall record is four\n   octets too short for the specified\
    \ total length.\n       0                   1                   2            \
    \       3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Version = 10          |       Total Length = 32       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                  Export Time = 1155202151                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |               Sequence Number = 0x12345678                    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \           Observation Domain ID = 0x33334444                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Set ID = 2           |        Set Length = 12        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \       Template ID = 257       |        Field Count = 2        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |0| Info Element Identifier = 8 |     Field Length = 4          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \                             Figure 4\n   The tester must create and cause the\
    \ Exporting Process to export the\n   following IPFIX Templates, and must ensure\
    \ the correct Collecting\n   Process behavior for each of the transports and protocols\
    \ in Section\n   3.1.\n   The tester must do the following:\n   o  For SCTP transport,\
    \ ensure that the Collecting Process discards\n      the IPFIX Message, shuts\
    \ down the SCTP association, and logs the\n      error.\n   o  For TCP transport,\
    \ ensure that the Collecting Process discards the\n      IPFIX Message, closes\
    \ the TCP connection, and logs the error.\n      Note that since TCP is a streaming\
    \ (rather than record-based)\n      protocol, template length errors cannot be\
    \ detected and may cause\n      framing to be lost, potentially rendering the\
    \ remainder of the\n      IPFIX stream unintelligible.  Therefore, some of these\
    \ tests are\n      not applicable for TCP transport, as indicated.\n   o  For\
    \ UDP transport, ensure that the Collecting Process discards the\n      IPFIX\
    \ Message and logs the error.\n   (a) The tester must create the IPFIX Template\
    \ shown in Figure 4 and\n       cause the Exporting Process to export it.  The\
    \ tester must ensure\n       that the Collecting Process's behavior is as specified\
    \ above for\n       each transport type except for TCP, for which this test is\
    \ not\n       applicable.\n   (b) Consider the IPFIX Template shown in Figure\
    \ 4, modified with\n       total length = 28.  In this case, the IPFIX Message\
    \ has to be\n       rejected because the field count = 2 and there is no second\n\
    \       Information Element record present in the Set.  The available\n      \
    \ data is exhausted after reading the first Information Element\n       record.\n\
    \       The tester must create the modified Template and cause the\n       Exporting\
    \ Process to export it.  The tester must ensure that the\n       Collecting Process's\
    \ behavior is as specified above for each\n       transport type.\n   (c) Consider\
    \ the IPFIX Template shown in Figure 4, modified with\n       total length = 26.\
    \  In this case, the IPFIX Message has to be\n       rejected because the IPFIX\
    \ Message length is too short.  After\n       the first Information Element, the\
    \ IPFIX Message data is\n       exhausted according to the total length information.\n\
    \       The tester must create the modified Template and cause the\n       Exporting\
    \ Process to export it.  The tester must ensure that the\n       Collecting Process's\
    \ behavior is as specified above for each\n       transport type.  The TCP connection\
    \ used for this test must be\n       manually reset after the test.\n   (d) Consider\
    \ the IPFIX Template shown in Figure 4, modified with\n       field count = 1.\
    \  In this case, the IPFIX Message must be\n       rejected because the total\
    \ length is too large and does not match\n       the amount of data available.\n\
    \       The tester must create the modified Template and cause the\n       Exporting\
    \ Process to export it.  The tester must ensure that the\n       Collecting Process's\
    \ behavior is as specified above for each\n       transport type.  This test is\
    \ not applicable for TCP transport.\n   (e) Finally, when the IPFIX Template shown\
    \ in Figure 4 is extended\n       with the data shown in Figure 5, it becomes\
    \ a correct IPFIX\n       Template.\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |0| Info Element Identifier = 12|        Field Length = 4       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \                               Figure 5\n       The tester must create the modified\
    \ Template and cause the\n       Exporting Process to export it.  The tester must\
    \ ensure that the\n       Template is accepted by the Collecting Process for each\
    \ transport\n       type.\n   The example Template record shown in Figure 6 must\
    \ be dropped because\n   the scope field count = 0.\n       0                \
    \   1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Version = 10          |       Total Length = 30       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                  Export Time = 1155202151                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |               Sequence Number = 0x12345678                    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \           Observation Domain ID = 0x33334444                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           Set ID = 3          |        Set Length = 14        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \       Template ID = 257       |       Field Count = 1         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Scope Field Count = 0     |0| Info Element Identifier = 8 |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \       Field Length = 4        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \                                  Figure 6\n   The tester must create the Template\
    \ shown in Figure 6 and cause the\n   Exporting Process to export it.  The tester\
    \ must ensure that the\n   IPFIX Message is discarded by the Collecting Process\
    \ for each\n   transport type, and must check that the Collecting Process logs\
    \ an\n   error.  The tester must ensure that the Collecting Process also shuts\n\
    \   down the SCTP association or closes the TCP connection.\n   The tester must\
    \ create an IPFIX Options Template where the field\n   count is less than the\
    \ scope field count, and cause the Exporting\n   Process to export it.  Use the\
    \ above IPFIX Options Template with\n   scope field count = 2.  The tester must\
    \ ensure that the Template is\n   discarded by the Collecting Process for each\
    \ transport type, and must\n   check that the Collecting Process logs an error.\
    \  The tester must\n   ensure that the Collecting Process shuts down the SCTP\
    \ association or\n   closes the TCP connection.\n"
- title: 3.6.5.  Incorrect Data Record
  contents:
  - "3.6.5.  Incorrect Data Record\n   The tester must create the following invalid\
    \ Data Records and cause\n   them to be exported to the Collecting Process over\
    \ all applicable\n   combinations of transports and protocols in Section 3.1.\n\
    \   o  IPFIX Message too short.\n   o  Illegal use of reduced size encoding.\n\
    \   o  Invalid length specification in case of variable-length\n      Information\
    \ Elements.\n   The tester must ensure that the Collecting Process discards the\
    \ IPFIX\n   Message and shuts down the SCTP association or closes the TCP\n  \
    \ connection.\n"
- title: 3.6.6.  Export of Non-Matching Template and Data Records
  contents:
  - "3.6.6.  Export of Non-Matching Template and Data Records\n   The tester must\
    \ create Templates and associated Data Records that\n   fail to conform to those\
    \ Templates in the following ways:\n   o  too few Information Elements in Data\
    \ Record\n   o  too many Information Elements in Data Record\n   The tester must\
    \ cause the Templates and associated Data Records to be\n   exported to the Collecting\
    \ Process over all applicable combinations\n   of transports and protocols in\
    \ Section 3.1.\n   The tester must ensure that the Collecting Process discards\
    \ the IPFIX\n   Message and shuts down the SCTP association or closes the TCP\n\
    \   connection.\n"
- title: 3.6.7.  Unknown Set IDs
  contents:
  - "3.6.7.  Unknown Set IDs\n   The tester must create Template Sets, Option Template\
    \ Sets, and\n   associated Data Sets using Set IDs which are unknown to the\n\
    \   Collecting Process, and cause these to be exported to the Collecting\n   Process\
    \ over all applicable combinations of transports and protocols\n   in Section\
    \ 3.1.\n   Per Section 3.3.2 of [RFC5101], only the Set ID values 2 and 3 denote\n\
    \   valid Sets.\n   The tester must ensure that the Collecting Process ignores\
    \ the\n   unknown Sets, logs a warning, and processes the remainder of the\n \
    \  IPFIX Message.\n"
- title: 3.6.8.  Re-Using Template IDs
  contents:
  - '3.6.8.  Re-Using Template IDs

    '
- title: 3.6.8.1.  Using SCTP Transport
  contents:
  - "3.6.8.1.  Using SCTP Transport\n   Refer to Section 9 of [RFC5101] for the Collecting\
    \ Process's SCTP\n   Template management specifications.\n   The tester must create\
    \ an IPFIX Template and cause it to be exported\n   to a Collecting Process over\
    \ SCTP transport.\n   The tester must ensure that the Template was correctly received\
    \ and\n   decoded by the Collecting Process.\n   The tester must cause the same\
    \ Template to be exported to the same\n   Collecting Process over the same SCTP\
    \ association, and must ensure\n   that the Collecting Process resets the SCTP\
    \ association and discards\n   the IPFIX Message.\n   The tester must create another\
    \ IPFIX template and cause it to be\n   exported to the Collecting Process over\
    \ SCTP transport.\n   The tester must ensure that the Template was correctly received\
    \ and\n   decoded by the Collecting Process.\n   The tester must modify the Template\
    \ contents while retaining the same\n   Template ID.\n   The tester must cause\
    \ the modified Template to be exported to the\n   same Collecting Process over\
    \ the SCTP same association, and must\n   ensure that the Collecting Process resets\
    \ the SCTP association and\n   discards the IPFIX Message.\n   The tester must\
    \ check that an error was logged.\n   The tester must create another IPFIX Template\
    \ and cause it to be\n   exported to the Collecting Process over SCTP transport.\n\
    \   The tester must ensure that the Template was correctly received and\n   decoded\
    \ by the Collecting Process.\n   The tester must cause a Template Withdrawal Message\
    \ for the Template\n   to be sent to the Collecting Process over the same SCTP\
    \ association,\n   and must ensure that the Template has been discarded by the\n\
    \   Collecting Process.\n   The tester must create Data Records conforming to\
    \ the Template and\n   cause them to be exported to the Collecting Process over\
    \ the same\n   SCTP association.\n   The tester must ensure that the Collecting\
    \ Process discards the Data\n   Records and logs a warning.\n   The tester must\
    \ cause the same Template to be exported to the same\n   Collecting Process over\
    \ the same SCTP association.\n   The tester must ensure that the Template was\
    \ correctly received and\n   decoded by the Collecting Process.\n   The tester\
    \ must create Data Records conforming to the Template and\n   cause them to be\
    \ exported to the Collecting Process over the same\n   SCTP association.\n   The\
    \ tester must ensure that the Collecting Process correctly receives\n   and decodes\
    \ the Data Records.\n"
- title: 3.6.8.2.  Using TCP Transport
  contents:
  - "3.6.8.2.  Using TCP Transport\n   Refer to Section 10.4.3 of [RFC5101] for the\
    \ Collecting Process's TCP\n   Template management specifications.\n   The tester\
    \ must create an IPFIX Template and cause it to be exported\n   to a Collecting\
    \ Process over TCP transport.\n   The tester must ensure that the Template was\
    \ correctly received and\n   decoded by the Collecting Process.\n   The tester\
    \ must cause the same Template to be exported to the same\n   Collecting Process\
    \ over the same TCP connection, and must ensure that\n   the Collecting Process\
    \ resets the TCP connection and discards the\n   IPFIX Message.\n   The tester\
    \ must create an IPFIX Template and cause it to be exported\n   to the Collecting\
    \ Process over TCP transport.\n   The tester must ensure that the Template was\
    \ correctly received and\n   decoded by the Collecting Process.\n   The tester\
    \ must modify the Template contents while retaining the same\n   Template ID.\n\
    \   The tester must cause the modified Template to be exported to the\n   same\
    \ Collecting Process over the same TCP connection, and must ensure\n   that the\
    \ Collecting Process resets the TCP connection and discards\n   the IPFIX Message.\n\
    \   The tester must check that an error was logged.\n   The tester must create\
    \ another IPFIX Template and cause it to be\n   exported to the Collecting Process\
    \ over TCP transport.\n   The tester must ensure that the Template was correctly\
    \ received and\n   decoded by the Collecting Process.\n   The tester must cause\
    \ a Template Withdrawal Message for the Template\n   to be sent to the Collecting\
    \ Process over the same TCP connection,\n   and must ensure that the Template\
    \ has been discarded by the\n   Collecting Process.\n   The tester must create\
    \ Data Records conforming to the same Template\n   and cause them to be exported\
    \ to the same Collecting Process over the\n   same TCP connection.\n   The tester\
    \ must ensure that the Collecting Process discards the Data\n   Records and logs\
    \ a warning.\n   The tester must cause the same Template to be exported to the\
    \ same\n   Collecting Process over the same TCP connection.\n   The tester must\
    \ ensure that the Template was correctly received and\n   decoded by the Collecting\
    \ Process.\n   The tester must create Data Records conforming to the Template\
    \ and\n   cause them to be exported to the same Collecting Process over the\n\
    \   same TCP connection.\n   The tester must ensure that the Collecting Process\
    \ correctly receives\n   and decodes the Data Records.\n"
- title: 3.6.8.3.  Using UDP Transport
  contents:
  - "3.6.8.3.  Using UDP Transport\n   Refer to Sections 10.3.6 and 10.3.7 of [RFC5101]\
    \ for the UDP Template\n   management specifications.\n"
- title: 3.6.8.3.1.  Re-Using the Same Template ID inside the Template Lifetime
  contents:
  - "3.6.8.3.1.  Re-Using the Same Template ID inside the Template Lifetime\n   The\
    \ tester must create an IPFIX Template and cause it to be exported\n   to a Collecting\
    \ Process over UDP transport.\n   The tester must ensure that the Template was\
    \ correctly received and\n   decoded by the Collecting Process.\n   Before the\
    \ Template lifetime expires on the Collecting Process, the\n   tester must cause\
    \ the same Template to be exported over the same UDP\n   connection to the same\
    \ Collecting Process and must ensure that the\n   Collecting Process accepts the\
    \ Template.\n   The tester must create a different Template with the same ID and\
    \ must\n   cause this to be exported to the same Collecting Process over the\n\
    \   same UDP connection before the original Template lifetime expires.\n   The\
    \ tester must ensure that the Collecting Process does not reject\n   the new Template.\n\
    \   The tester must create Data Records conforming to the new Template\n   and\
    \ cause them to be exported to the same Collecting Process over the\n   same UDP\
    \ connection.\n   The tester must ensure that the Collecting Process correctly\
    \ receives\n   and decodes the Data Records.\n"
- title: 3.6.8.3.2.  Re-Using the Same Template ID after the Template Lifetime
  contents:
  - "3.6.8.3.2.  Re-Using the Same Template ID after the Template Lifetime\n   The\
    \ tester must create an IPFIX Template and cause it to be exported\n   to a Collecting\
    \ Process over UDP transport.\n   The tester must ensure that the Template was\
    \ correctly received and\n   decoded by the Collecting Process.\n   The tester\
    \ must allow the received Template lifetime to expire on the\n   Collecting Process.\n\
    \   The tester must create Data Records conforming to the Template and\n   cause\
    \ them to be exported to the same Collecting Process over the\n   same UDP connection.\n\
    \   The tester must ensure that the Collecting Process discards the Data\n   Records.\n\
    \   The tester must check that the Collecting Process logs a warning.\n   The\
    \ tester must cause the same Template to be exported to the same\n   Collecting\
    \ Process over the same UDP connection.\n   The tester must ensure that the Template\
    \ was correctly received and\n   decoded by the Collecting Process.\n   The tester\
    \ must create Data Records conforming to the Template and\n   cause them to be\
    \ exported to the same Collecting Process over the\n   same UDP connection.\n\
    \   The tester must ensure that the Collecting Process correctly receives\n  \
    \ and decodes the Data Records.\n"
- title: 3.7.  TLS Connectivity and Policy Selection
  contents:
  - "3.7.  TLS Connectivity and Policy Selection\n   This section lists tests that\
    \ verify connectivity over TLS and\n   Datagram Transport Layer Security (DTLS)\
    \ and proper selection of TLS\n   policies as specified in the IPFIX Protocol.\
    \  It specifically does\n   NOT purport to test the security of IPFIX Message\
    \ transport over TLS\n   or DTLS, as evaluating the security of a transport session\
    \ is really\n   a test of the TLS or DTLS implementation over which a given IPFIX\n\
    \   implementation runs, and as such is out of scope for this document.\n   Refer\
    \ to Section 11 of [RFC5101] for the security specifications.\n"
- title: 3.7.1.  TLS Test Setup
  contents:
  - "3.7.1.  TLS Test Setup\n   Setting up for TLS connectivity and policy testing\
    \ requires the\n   creation of appropriate X.509 certificates and private keys\
    \ for a\n   test environment and the configuration of a DNS server to answer with\n\
    \   consistent information for the hosts used in the test.\n   The tester must\
    \ configure the following certificates:\n      1.  A Certificate Authority (CA)\
    \ certificate and associated\n          private key for signing the following\
    \ certificates.\n      2.  One certificate and associated private key, with a\
    \ CN (Common\n          Name) or subjectAltName extension of type dNSName containing\n\
    \          the fully qualified domain name of the host, signed by the CA\n   \
    \       certificate in 1, for each IPFIX Exporting Process in the\n          test.\n\
    \      3.  One certificate and associated private key, with a CN (common\n   \
    \       name) or subjectAltName extension of type dNSName containing\n       \
    \   the fully qualified domain name of the host, signed by the CA\n          certificate\
    \ in 1, for each IPFIX Collecting Process in the\n          test.\n   The tester\
    \ must configure consistent forward (A, AAAA) DNS records\n   for each host in\
    \ the test on a DNS server used by the hosts for name\n   resolution.  Note that\
    \ there is no need to configure reverse (PTR)\n   DNS records for the hosts, as\
    \ no part of the protocol uses reverse\n   lookups.\n   The tester must ensure\
    \ that the Exporting Process and Collecting\n   Process are on different hosts.\n"
- title: 3.7.2.  TLS over TCP Connectivity Test
  contents:
  - "3.7.2.  TLS over TCP Connectivity Test\n   The tester must set up certificates\
    \ and DNS as in Section 3.7.1.\n   The tester must configure one Exporting Process\
    \ and one Collecting\n   Process with their appropriate certificates to transfer\
    \ IPFIX\n   Messages over TLS over TCP.\n   The tester must create an IPFIX Template\
    \ and associated Data Record,\n   and cause them to be exported over the TCP connection.\n\
    \   The tester must ensure that a TCP connection and a TLS connection\n   were\
    \ established, must ensure that data was exchanged, and must\n   ensure that the\
    \ data received at the Collecting Process is correct.\n"
- title: 3.7.3.  DTLS over UDP Connectivity Test
  contents:
  - "3.7.3.  DTLS over UDP Connectivity Test\n   The tester must set up certificates\
    \ and DNS as in Section 3.7.1.\n   The tester must configure one Exporting Process\
    \ and one Collecting\n   Process with their appropriate certificates to transfer\
    \ IPFIX\n   Messages over DTLS over UDP.\n   The tester must create an IPFIX Template\
    \ and associated Data Record,\n   and cause them to be exported over the UDP connection.\n\
    \   The tester must ensure that UDP packets were sent and a DTLS\n   connection\
    \ was established, must ensure that data was exchanged, and\n   must ensure that\
    \ the data received at the Collecting Process is\n   correct.\n"
- title: 3.7.4.  DTLS over PR-SCTP Connectivity Test
  contents:
  - "3.7.4.  DTLS over PR-SCTP Connectivity Test\n   The tester must set up certificates\
    \ and DNS as in Section 3.7.1.\n   The tester must configure one Exporting Process\
    \ and one Collecting\n   Process with their appropriate certificates to transfer\
    \ IPFIX\n   Messages over DTLS over the Partially Reliable-Stream Control\n  \
    \ Transmission Protocol (PR-SCTP).\n   The tester must create an IPFIX Template\
    \ and associated Data Record,\n   and cause them to be exported over the SCTP\
    \ association.\n   The tester must ensure that an SCTP association and a DTLS\
    \ connection\n   were established, must ensure that data was exchanged, and must\n\
    \   ensure that the data received at the Collecting Process is correct.\n"
- title: 3.7.5.  TLS Bidirectional Authentication Policy Test
  contents:
  - "3.7.5.  TLS Bidirectional Authentication Policy Test\n   This is an optional\
    \ test for Collecting Processes only; it requires\n   the modification of an Exporting\
    \ Process to NOT present a\n   certificate.\n   The tester must modify an Exporting\
    \ Process to NOT present a\n   certificate.\n   The tester must perform the connectivity\
    \ tests in Sections 3.7.2,\n   3.7.3, and 3.7.4.\n   The tester must ensure that\
    \ the Collecting Process rejects the TLS or\n   DTLS connection establishment.\n"
- title: 3.7.6.  Exporting Process Identity Mismatch TLS Policy Test
  contents:
  - "3.7.6.  Exporting Process Identity Mismatch TLS Policy Test\n   The tester must\
    \ set up certificates and DNS as in Section 3.7.1.\n   The tester must use a certificate\
    \ for the Exporting Process that does\n   NOT match the fully qualified domain\
    \ name of the host on which the\n   Exporting Process runs.\n   The tester must\
    \ Perform the connectivity tests in Sections 3.7.2,\n   3.7.3, and 3.7.4.\n  \
    \ The tester must ensure that the Collecting Process rejects the TLS or\n   DTLS\
    \ connection establishment.\n"
- title: 3.7.7.  Collecting Process Identity Mismatch TLS Policy Test
  contents:
  - "3.7.7.  Collecting Process Identity Mismatch TLS Policy Test\n   The tester must\
    \ set up certificates and DNS as in Section 3.7.1.\n   The tester must use a certificate\
    \ for the Collecting Process that\n   does NOT match the fully qualified domain\
    \ name of the host on which\n   the Collecting Process runs.\n   The tester must\
    \ perform the connectivity tests in Sections 3.7.2,\n   3.7.3, and 3.7.4.\n  \
    \ The tester must ensure that the Exporting Process rejects the TLS or\n   DTLS\
    \ connection establishment.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This memo raises no security issues.\n"
- title: 5.  Acknowledgments
  contents:
  - "5.  Acknowledgments\n   The authors wish to thank Brian Trammell for contributing\
    \ the initial\n   text for Section 3.7.\n"
- title: 6.  Normative References
  contents:
  - "6.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [RFC3917]  Quittek, J., Zseby, T., Claise, B., and S. Zander,\n          \
    \    \"Requirements for IP Flow Information Export (IPFIX)\", RFC\n          \
    \    3917, October 2004.\n   [RFC5101]  Claise, B., Ed., \"Specification of the\
    \ IP Flow Information\n              Export (IPFIX) Protocol for the Exchange\
    \ of IP Traffic\n              Flow Information\", RFC 5101, January 2008.\n \
    \  [RFC5102]  Quittek, J., Bryant, S., Claise, B., Aitken, P., and J.\n      \
    \        Meyer, \"Information Model for IP Flow Information Export\",\n      \
    \        RFC 5102, January 2008.\n   [RFC5470]  Sadasivan, G., Brownlee, N., Claise,\
    \ B., and J. Quittek,\n              \"Architecture for IP Flow Information Export\"\
    , RFC 5470,\n              March 2009.\n   [RFC5472]  Zseby, T., Boschi, E., Brownlee,\
    \ N., and B. Claise, \"IP\n              Flow Information Export (IPFIX) Applicability\"\
    , RFC 5472,\n              March 2009.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Carsten Schmoll\n   Fraunhofer FOKUS\n   Kaiserin-Augusta-Allee\
    \ 31\n   Berlin  D-10589\n   Germany\n   Phone: +49 30 3463 7136\n   EMail: carsten.schmoll@fokus.fraunhofer.de\n\
    \   URI:   http://www.fokus.fraunhofer.de\n   Paul Aitken\n   Cisco Systems, Inc.\n\
    \   96 Commercial Quay\n   Edinburgh  EH6 6LX\n   Scotland\n   Phone: +44 131\
    \ 561 3616\n   EMail: paitken@cisco.com\n   URI:   http://www.cisco.com\n   Benoit\
    \ Claise\n   Cisco Systems, Inc.\n   De Kleetlaan 6a b1\n   1831 Diegem\n   Belgium\n\
    \   Phone: +32 2 704 5622\n   EMail: bclaise@cisco.com\n   URI:   http://www.cisco.com\n"
