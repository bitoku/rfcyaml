Abstract The National Institute of Standards and Technology (NIST) has recently specified the Cipher based Message Authentication Code (CMAC), which is equivalent to the One Key CBC MAC1 (OMAC1) submitted by Iwata and Kurosawa.
This memo specifies an authentication algorithm based on CMAC with the 128 bit Advanced Encryption Standard (AES).
This new authentication algorithm is named AES CMAC.
The purpose of this document is to make the AES CMAC algorithm conveniently available to the Internet Community.
The National Institute of Standards and Technology (NIST) has recently specified the Cipher based Message Authentication Code (CMAC).
CMAC [NIST CMAC] is a keyed hash function that is based on a symmetric key block cipher, such as the Advanced Encryption Standard [NIST AES].
CMAC is equivalent to the One Key CBC MAC1 (OMAC1) submitted by Iwata and Kurosawa [OMAC1a, OMAC1b].
OMAC1 is an improvement of the eXtended Cipher Block Chaining mode (XCBC) submitted by Black and Rogaway [XCBCa, XCBCb], which itself is an improvement of the basic Cipher Block Chaining Message Authentication Code (CBC MAC).
XCBC efficiently addresses the security deficiencies of CBC MAC, and OMAC1 efficiently reduces the key size of XCBC.
AES CMAC provides stronger assurance of data integrity than a checksum or an error detecting code.
The verification of a checksum or an error detecting code detects only accidental modifications of the data, while CMAC is designed to detect intentional, unauthorized modifications of the data, as well as accidental modifications.
AES CMAC achieves a security goal similar to that of HMAC [RFC HMAC].
Since AES CMAC is based on a symmetric key block cipher, AES, and HMAC is based on a hash function, such as SHA 1, AES CMAC is appropriate for information systems in which AES is more readily available than a hash function.
This memo specifies the authentication algorithm based on CMAC with AES 128.
This new authentication algorithm is named AES CMAC.
Specification of AES CMAC 2.1.
The following table describes the basic definitions necessary to explain the specification of AES CMAC.
x    y is the string
x concatenated with the string y. 0000    1111 is 00001111.
For two equal length strings, x and y, x XOR y is their bit wise exclusive OR.
The smallest integer no smaller than x. ceil(3.5) is 4.
The most significant bit disappears, and a zero comes into the least significant bit.
The string that consists of n zero bits. 0
3 means 000 in binary format.
10^4 means 10000 in binary format.
10^i means 1 followed by i times repeated zeros.
The most significant bit of the string x. MSB(10010000) means 1.
10^i padded output of input x.
It is described in detail in section 2.4.
long key for AES 128.
Denoted by K. First subkey    128 bit (16 octet) long first subkey, derived through the subkey generation algorithm from the key K. Denoted by K1.
128 bit (16 octet) long second subkey, derived through the subkey generation algorithm from the key K. Denoted by K2.
The message can be null, which means that the length of M is 0.
The length of the message M in octets.
The minimum value of the length can be 0.
The maximum value of the length is not specified in this document.
AES 128(K,M) is the 128 bit ciphertext of AES 128 for a 128 bit key, K, and a 128 bit message, M. MAC
A 128 bit string that is the output of AES CMAC.
Denoted by T. Validating the MAC provides assurance of the integrity and authenticity of the message from the source.
By default, the length of the output of AES CMAC is 128 bits.
It is possible to truncate the MAC.
The result of the truncation should be taken in most significant bits first order.
The MAC length must be specified before the communication starts, and it must not be changed during the lifetime of the key.
Overview AES CMAC uses the Advanced Encryption Standard [NIST AES] as a building block.
To generate a MAC, AES CMAC takes a secret key, a message of variable length, and the length of the message in octets as inputs and returns a fixed bit string called a MAC.
The core of AES CMAC is the basic CBC MAC.
For a message, M, to be authenticated, the CBC MAC is applied to M.
There are two cases of operation in CMAC.
Figure 2.1 illustrates the operation of CBC MAC in both cases.
If the size of the input message block is equal to a positive multiple of the block size (namely, 128 bits), the last block shall be exclusive OR'ed with K1 before processing.
Otherwise, the last block shall be padded with 10^i (notation is described in section 2.1) and exclusive OR'ed with K2.
The result of the previous process will be the input of the last encryption.
The output of AES CMAC provides data integrity of the whole input message.
Illustration of the two cases of AES CMAC AES K is AES 128 with key K.
The message M is divided into blocks
,M n, where M i is the i th message block.
The length of M i is 128 bits for i
the length of the last block, M n, is less than or equal to 128 bits.
K1 is the subkey for the case (a), and K2 is the subkey for the case (b).
K1 and K2 are generated by the subkey generation algorithm described in section 2.3.
The subkey generation algorithm, Generate Subkey(), takes a secret key, K, which is just the key for AES 128.
The outputs of the subkey generation algorithm are two subkeys, K1 and K2.
Subkeys K1 and K2 are used in both MAC generation and MAC verification algorithms.
K1 is used for the case where the length of the last block is equal to the block length.
K2 is used for the case where the length of the last block is less than the block length.
Figure 2.2 specifies the subkey generation algorithm.
Constants: const Zero is 0x00000000000000000000000000000000
In step 1, AES 128 with key K is applied to an all zero input block.
In step 2, K1 is derived through the following operation: If the most significant bit of L is equal to 0, K1 is the left shift of L by 1 bit.
Otherwise, K1 is the exclusive OR of const Rb and the left shift of L by 1 bit.
In step 3, K2 is derived through the following operation: If the most significant bit of K1 is equal to 0, K2 is the left shift of K1 by 1 bit.
Otherwise, K2 is the exclusive OR of const Rb and the left shift of K1 by 1 bit.
The mathematical meaning of the procedures in steps 2 and 3, including const Rb, can be found in [OMAC1a].
The MAC generation algorithm, AES CMAC(), takes three inputs, a secret key, a message, and the length of the message in octets.
The secret key, denoted by K, is just the key for AES 128.
The message and its length in octets are denoted by M and len, respectively.
M is denoted by the sequence of M i, where M i is the i th message block.
The length of M i is 128 bits for i
the length of the last block M n is less than or equal to 128 bits.
The output of the MAC generation algorithm is a 128 bit string, called a MAC, which is used to validate the input message.
The MAC is denoted by T, and we write T :  AES CMAC(K,M,len).
Validating the MAC provides assurance of the integrity and authenticity of the message from the source.
It is possible to truncate the MAC.
According to [NIST CMAC], at least a 64 bit MAC should be used as protection against guessing attacks.
The result of truncation should be taken in most significant bits first order.
The block length of AES 128 is 128 bits (16 octets).
There is a special treatment if the length of the message is not a positive multiple of the block length.
The special treatment is to pad M with the bit string 10^i to adjust the length of the last block up to the block length.
, where 0 <  r < 16, the padding function, padding(x), is defined as follows:
That is, padding(x) is the concatenation of x and a single '1', followed by the minimum number of '0's, so that the total length is equal to 128 bits.
Figure 2.3 describes the MAC generation algorithm.
Constants: const Zero is 0x00000000000000000000000000000000
K1, K2 for 128 bit subkeys
i is the i th block
M last is the last block xor ed with K1 or K2
then M last :  M n XOR K1;
else M last :  padding(M
In step 1, subkeys K1 and K2 are derived from K through the subkey generation algorithm.
In step 2, the number of blocks, n, is calculated.
The number of blocks is the smallest integer value greater than or equal to the quotient determined by dividing the length parameter by the block length, 16 octets.
In step 3, the length of the input message is checked.
If the input length is 0 (null), the number of blocks to be processed shall be 1, and the flag shall be marked as not complete block (false).
Otherwise, if the last block length is 128 bits, the flag is marked as complete block (true); else mark the flag as not complete block (false).
In step 4, M last is calculated by exclusive OR'ing M n and one of the previously calculated subkeys.
If the last block is a complete block (true), then M last is the exclusive OR of M n and K1.
Otherwise, M last is the exclusive OR of padding(M n) and K2.
In step 5, the variable X is initialized.
In step 6, the basic CBC MAC is applied to M 1,...
In step 7, the 128 bit MAC, T :  AES CMAC(K,M,len), is returned.
If necessary, the MAC is truncated before it is returned.
The verification of the MAC is simply done by a MAC recomputation.
We use the MAC generation algorithm, which is described in section 2.4.
The MAC verification algorithm, Verify MAC(), takes four inputs, a secret key, a message, the length of the message in octets, and the received MAC.
These are denoted by K, M, len, and T', respectively.
The output of the MAC verification algorithm is either INVALID or VALID.
Figure 2.4 describes the MAC verification algorithm.
In step 1, T  is derived from K, M, and len through the MAC generation algorithm.
In step 2, T  and T' are compared.
If T  is equal to T', then return VALID; otherwise return INVALID.
If the output is INVALID, then the message is definitely not authentic, i.e., it did not originate from a source that executed the generation process on the message to produce the purported MAC.
If the output is VALID, then the design of the AES CMAC provides assurance that the message is authentic and, hence, was not corrupted in transit; however, this assurance, as for any MAC algorithm, is not absolute.
The security provided by AES CMAC is built on the strong cryptographic algorithm AES.
However, as is true with any cryptographic algorithm, part of its strength lies in the secret key, K, and the correctness of the implementation in all of the participating systems.
If the secret key is compromised or inappropriately shared, it guarantees neither authentication nor integrity of message at all.
The secret key shall be generated in a way that meets the pseudo randomness requirement of RFC 4086 [RFC4086] and should be kept safe.
If and only if AES CMAC is used properly it provides the authentication and integrity that meet the best current practice of message authentication.
The following test vectors are the same as those of [NIST CMAC].
The following vectors are also the output of the test program in Appendix A.
7393172a ae2d8a57 1e03ac9c 9eb76fac 45af8e51
7393172a ae2d8a57 1e03ac9c 9eb76fac 45af8e51
This C source is designed to generate the test vectors that appear in this memo to verify correctness of the algorithm.
The source code is not intended for use in commercial products.
/ unsigned char const Rb[16]
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87 }; unsigned char const Zero[16]
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
a, unsigned char  b, unsigned char  out)
{ int i; for (i 0;i<16
if ( (i % 16)   0 && i !
} void generate subkey(unsigned char
key, unsigned char  K1, unsigned char  K2) { unsigned char L[16]; unsigned char Z[16]; unsigned char tmp[16]; int i
; for ( i 0; i<16;
i  ) Z[i]   0; AES 128(key,Z,L); if ( (L[0] & 0x80)   0 ) {
0, then K1   L << 1
( L << 1 )
i  ) X[i]   0; for ( i 0; i<n 1
, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45
, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4,
0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a
, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6,
