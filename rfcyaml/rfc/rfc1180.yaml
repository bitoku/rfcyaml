- title: __initial_text__
  contents:
  - '                           A TCP/IP Tutorial

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC is a tutorial on the TCP/IP protocol suite,\
    \ focusing\n   particularly on the steps in forwarding an IP datagram from source\n\
    \   host to destination host through a router.  It does not specify an\n   Internet\
    \ standard.  Distribution of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n    1.  Introduction................................................\
    \   1\n    2.  TCP/IP Overview.............................................  \
    \ 2\n    3.  Ethernet....................................................   8\n\
    \    4.  ARP.........................................................   9\n  \
    \  5.  Internet Protocol...........................................  12\n    6.\
    \  User Datagram Protocol......................................  22\n    7.  Transmission\
    \ Control Protocol...............................  24\n    8.  Network Applications........................................\
    \  25\n    9.  Other Information...........................................  27\n\
    \   10.  References..................................................  27\n  \
    \ 11.  Relation to other RFCs......................................  27\n   12.\
    \  Security Considerations.....................................  27\n   13.  Authors'\
    \ Addresses..........................................  28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This tutorial contains only one view of the salient points\
    \ of TCP/IP,\n   and therefore it is the \"bare bones\" of TCP/IP technology.\
    \  It omits\n   the history of development and funding, the business case for\
    \ its\n   use, and its future as compared to ISO OSI.  Indeed, a great deal of\n\
    \   technical information is also omitted.  What remains is a minimum of\n   information\
    \ that must be understood by the professional working in a\n   TCP/IP environment.\
    \  These professionals include the systems\n   administrator, the systems programmer,\
    \ and the network manager.\n   This tutorial uses examples from the UNIX TCP/IP\
    \ environment, however\n   the main points apply across all implementations of\
    \ TCP/IP.\n   Note that the purpose of this memo is explanation, not definition.\n\
    \   If any question arises about the correct specification of a protocol,\n  \
    \ please refer to the actual standards defining RFC.\n   The next section is an\
    \ overview of TCP/IP, followed by detailed\n   descriptions of individual components.\n"
- title: 2.  TCP/IP Overview
  contents:
  - "2.  TCP/IP Overview\n   The generic term \"TCP/IP\" usually means anything and\
    \ everything\n   related to the specific protocols of TCP and IP.  It can include\n\
    \   other protocols, applications, and even the network medium.  A sample\n  \
    \ of these protocols are: UDP, ARP, and ICMP.  A sample of these\n   applications\
    \ are: TELNET, FTP, and rcp.  A more accurate term is\n   \"internet technology\"\
    .  A network that uses internet technology is\n   called an \"internet\".\n"
- title: 2.1  Basic Structure
  contents:
  - "2.1  Basic Structure\n   To understand this technology you must first understand\
    \ the following\n   logical structure:\n                     ----------------------------\n\
    \                     |    network applications  |\n                     |   \
    \                       |\n                     |...  \\ | /  ..  \\ | /  ...|\n\
    \                     |     -----      -----     |\n                     |   \
    \  |TCP|      |UDP|     |\n                     |     -----      -----     |\n\
    \                     |         \\      /         |\n                     |  \
    \       --------         |\n                     |         |  IP  |         |\n\
    \                     |  -----  -*------         |\n                     |  |ARP|\
    \   |               |\n                     |  -----   |               |\n   \
    \                  |      \\   |               |\n                     |     \
    \ ------              |\n                     |      |ENET|              |\n \
    \                    |      ---@--              |\n                     ----------|-----------------\n\
    \                               |\n         ----------------------o---------\n\
    \             Ethernet Cable\n                  Figure 1.  Basic TCP/IP Network\
    \ Node\n   This is the logical structure of the layered protocols inside a\n \
    \  computer on an internet.  Each computer that can communicate using\n   internet\
    \ technology has such a logical structure.  It is this logical\n   structure that\
    \ determines the behavior of the computer on the\n   internet.  The boxes represent\
    \ processing of the data as it passes\n   through the computer, and the lines\
    \ connecting boxes show the path of\n   data.  The horizontal line at the bottom\
    \ represents the Ethernet\n   cable; the \"o\" is the transceiver.  The \"*\"\
    \ is the IP address and the\n   \"@\" is the Ethernet address.  Understanding\
    \ this logical structure is\n   essential to understanding internet technology;\
    \ it is referred to\n   throughout this tutorial.\n"
- title: 2.2  Terminology
  contents:
  - "2.2  Terminology\n   The name of a unit of data that flows through an internet\
    \ is\n   dependent upon where it exists in the protocol stack.  In summary: if\n\
    \   it is on an Ethernet it is called an Ethernet frame; if it is between\n  \
    \ the Ethernet driver and the IP module it is called a IP packet; if it\n   is\
    \ between the IP module and the UDP module it is called a UDP\n   datagram; if\
    \ it is between the IP module and the TCP module it is\n   called a TCP segment\
    \ (more generally, a transport message); and if it\n   is in a network application\
    \ it is called a application message.\n   These definitions are imperfect.  Actual\
    \ definitions vary from one\n   publication to the next.  More specific definitions\
    \ can be found in\n   RFC 1122, section 1.3.3.\n   A driver is software that communicates\
    \ directly with the network\n   interface hardware.  A module is software that\
    \ communicates with a\n   driver, with network applications, or with another module.\n\
    \   The terms driver, module, Ethernet frame, IP packet, UDP datagram,\n   TCP\
    \ message, and application message are used where appropriate\n   throughout this\
    \ tutorial.\n"
- title: 2.3  Flow of Data
  contents:
  - "2.3  Flow of Data\n   Let's follow the data as it flows down through the protocol\
    \ stack\n   shown in Figure 1.  For an application that uses TCP (Transmission\n\
    \   Control Protocol), data passes between the application and the TCP\n   module.\
    \  For applications that use UDP (User Datagram Protocol), data\n   passes between\
    \ the application and the UDP module.  FTP (File\n   Transfer Protocol) is a typical\
    \ application that uses TCP.  Its\n   protocol stack in this example is FTP/TCP/IP/ENET.\
    \  SNMP (Simple\n   Network Management Protocol) is an application that uses UDP.\
    \  Its\n   protocol stack in this example is SNMP/UDP/IP/ENET.\n   The TCP module,\
    \ UDP module, and the Ethernet driver are n-to-1\n   multiplexers.  As multiplexers\
    \ they switch many inputs to one output.\n   They are also 1-to-n de-multiplexers.\
    \  As de-multiplexers they switch\n   one input to many outputs according to the\
    \ type field in the protocol\n   header.\n         1   2 3 ...   n           \
    \        1   2 3 ...   n\n          \\  |      /      |               \\  | |\
    \      /       ^\n           \\ | |   /       |                \\ | |     /  \
    \      |\n         -------------   flow              ----------------   flow\n\
    \         |multiplexer|    of               |de-multiplexer|    of\n         -------------\
    \   data              ----------------   data\n              |            |  \
    \                   |              |\n              |            v           \
    \          |              |\n              1                                 \
    \ 1\n        Figure 2.  n-to-1 multiplexer and 1-to-n de-multiplexer\n   If an\
    \ Ethernet frame comes up into the Ethernet driver off the\n   network, the packet\
    \ can be passed upwards to either the ARP (Address\n   Resolution Protocol) module\
    \ or to the IP (Internet Protocol) module.\n   The value of the type field in\
    \ the Ethernet frame determines whether\n   the Ethernet frame is passed to the\
    \ ARP or the IP module.\n   If an IP packet comes up into IP, the unit of data\
    \ is passed upwards\n   to either TCP or UDP, as determined by the value of the\
    \ protocol\n   field in the IP header.\n   If the UDP datagram comes up into UDP,\
    \ the application message is\n   passed upwards to the network application based\
    \ on the value of the\n   port field in the UDP header.  If the TCP message comes\
    \ up into TCP,\n   the application message is passed upwards to the network application\n\
    \   based on the value of the port field in the TCP header.\n   The downwards\
    \ multiplexing is simple to perform because from each\n   starting point there\
    \ is only the one downward path; each protocol\n   module adds its header information\
    \ so the packet can be de-\n   multiplexed at the destination computer.\n   Data\
    \ passing out from the applications through either TCP or UDP\n   converges on\
    \ the IP module and is sent downwards through the lower\n   network interface\
    \ driver.\n   Although internet technology supports many different network media,\n\
    \   Ethernet is used for all examples in this tutorial because it is the\n   most\
    \ common physical network used under IP.  The computer in Figure 1\n   has a single\
    \ Ethernet connection.  The 6-byte Ethernet address is\n   unique for each interface\
    \ on an Ethernet and is located at the lower\n   interface of the Ethernet driver.\n\
    \   The computer also has a 4-byte IP address.  This address is located\n   at\
    \ the lower interface to the IP module.  The IP address must be\n   unique for\
    \ an internet.\n   A running computer always knows its own IP address and Ethernet\n\
    \   address.\n"
- title: 2.4  Two Network Interfaces
  contents:
  - "2.4  Two Network Interfaces\n   If a computer is connected to 2 separate Ethernets\
    \ it is as in Figure\n   3.\n                ----------------------------\n  \
    \              |    network applications  |\n                |               \
    \           |\n                |...  \\ | /  ..  \\ | /  ...|\n              \
    \  |     -----      -----     |\n                |     |TCP|      |UDP|     |\n\
    \                |     -----      -----     |\n                |         \\  \
    \    /         |\n                |         --------         |\n             \
    \   |         |  IP  |         |\n                |  -----  -*----*-  -----  |\n\
    \                |  |ARP|   |    |   |ARP|  |\n                |  -----   |  \
    \  |   -----  |\n                |      \\   |    |   /      |\n             \
    \   |      ------  ------      |\n                |      |ENET|  |ENET|      |\n\
    \                |      ---@--  ---@--      |\n                ----------|-------|---------\n\
    \                          |       |\n                          |    ---o---------------------------\n\
    \                          |             Ethernet Cable 2\n           ---------------o----------\n\
    \             Ethernet Cable 1\n             Figure 3.  TCP/IP Network Node on\
    \ 2 Ethernets\n   Please note that this computer has 2 Ethernet addresses and\
    \ 2 IP\n   addresses.\n   It is seen from this structure that for computers with\
    \ more than one\n   physical network interface, the IP module is both a n-to-m\n\
    \   multiplexer and an m-to-n de-multiplexer.\n         1   2 3 ...   n      \
    \             1   2 3 ...   n\n          \\  | |      /    |                \\\
    \  | |      /       ^\n           \\ | |     /     |                 \\ | |  \
    \   /        |\n         -------------   flow              ----------------  \
    \ flow\n         |multiplexer|    of               |de-multiplexer|    of\n  \
    \       -------------   data              ----------------   data\n          \
    \ / | |     \\     |                 / | |     \\        |\n          /  | | \
    \     \\    v                /  | |      \\       |\n         1   2 3 ...   m\
    \                   1   2 3 ...   m\n        Figure 4.  n-to-m multiplexer and\
    \ m-to-n de-multiplexer\n   It performs this multiplexing in either direction\
    \ to accommodate\n   incoming and outgoing data.  An IP module with more than\
    \ 1 network\n   interface is more complex than our original example in that it\
    \ can\n   forward data onto the next network.  Data can arrive on any network\n\
    \   interface and be sent out on any other.\n                           TCP  \
    \    UDP\n                             \\      /\n                           \
    \   \\    /\n                          --------------\n                      \
    \    |     IP     |\n                          |            |\n              \
    \            |    ---     |\n                          |   /   \\    |\n     \
    \                     |  /     v   |\n                          --------------\n\
    \                           /         \\\n                          /        \
    \   \\\n                       data           data\n                      comes\
    \ in         goes out\n                     here               here\n        \
    \    Figure 5.  Example of IP Forwarding a IP Packet\n   The process of sending\
    \ an IP packet out onto another network is\n   called \"forwarding\" an IP packet.\
    \  A computer that has been dedicated\n   to the task of forwarding IP packets\
    \ is called an \"IP-router\".\n   As you can see from the figure, the forwarded\
    \ IP packet never touches\n   the TCP and UDP modules on the IP-router.  Some\
    \ IP-router\n   implementations do not have a TCP or UDP module.\n"
- title: 2.5  IP Creates a Single Logical Network
  contents:
  - "2.5  IP Creates a Single Logical Network\n   The IP module is central to the\
    \ success of internet technology.  Each\n   module or driver adds its header to\
    \ the message as the message passes\n   down through the protocol stack.  Each\
    \ module or driver strips the\n   corresponding header from the message as the\
    \ message climbs the\n   protocol stack up towards the application.  The IP header\
    \ contains\n   the IP address, which builds a single logical network from multiple\n\
    \   physical networks.  This interconnection of physical networks is the\n   source\
    \ of the name: internet.  A set of interconnected physical\n   networks that limit\
    \ the range of an IP packet is called an\n   \"internet\".\n"
- title: 2.6  Physical Network Independence
  contents:
  - "2.6  Physical Network Independence\n   IP hides the underlying network hardware\
    \ from the network\n   applications.  If you invent a new physical network, you\
    \ can put it\n   into service by implementing a new driver that connects to the\n\
    \   internet underneath IP.  Thus, the network applications remain intact\n  \
    \ and are not vulnerable to changes in hardware technology.\n"
- title: 2.7  Interoperability
  contents:
  - "2.7  Interoperability\n   If two computers on an internet can communicate, they\
    \ are said to\n   \"interoperate\"; if an implementation of internet technology\
    \ is good,\n   it is said to have \"interoperability\".  Users of general-purpose\n\
    \   computers benefit from the installation of an internet because of the\n  \
    \ interoperability in computers on the market.  Generally, when you buy\n   a\
    \ computer, it will interoperate.  If the computer does not have\n   interoperability,\
    \ and interoperability can not be added, it occupies\n   a rare and special niche\
    \ in the market.\n"
- title: 2.8  After the Overview
  contents:
  - "2.8  After the Overview\n   With the background set, we will answer the following\
    \ questions:\n   When sending out an IP packet, how is the destination Ethernet\n\
    \   address determined?\n   How does IP know which of multiple lower network interfaces\
    \ to use\n   when sending out an IP packet?\n   How does a client on one computer\
    \ reach the server on another?\n   Why do both TCP and UDP exist, instead of just\
    \ one or the other?\n   What network applications are available?\n   These will\
    \ be explained, in turn, after an Ethernet refresher.\n"
- title: 3.  Ethernet
  contents:
  - "3.  Ethernet\n   This section is a short review of Ethernet technology.\n   An\
    \ Ethernet frame contains the destination address, source address,\n   type field,\
    \ and data.\n   An Ethernet address is 6 bytes.  Every device has its own Ethernet\n\
    \   address and listens for Ethernet frames with that destination\n   address.\
    \  All devices also listen for Ethernet frames with a wild-\n   card destination\
    \ address of \"FF-FF-FF-FF-FF-FF\" (in hexadecimal),\n   called a \"broadcast\"\
    \ address.\n   Ethernet uses CSMA/CD (Carrier Sense and Multiple Access with\n\
    \   Collision Detection).  CSMA/CD means that all devices communicate on\n   a\
    \ single medium, that only one can transmit at a time, and that they\n   can all\
    \ receive simultaneously.  If 2 devices try to transmit at the\n   same instant,\
    \ the transmit collision is detected, and both devices\n   wait a random (but\
    \ short) period before trying to transmit again.\n"
- title: 3.1  A Human Analogy
  contents:
  - "3.1  A Human Analogy\n   A good analogy of Ethernet technology is a group of\
    \ people talking in\n   a small, completely dark room.  In this analogy, the physical\
    \ network\n   medium is sound waves on air in the room instead of electrical\n\
    \   signals on a coaxial cable.\n   Each person can hear the words when another\
    \ is talking (Carrier\n   Sense).  Everyone in the room has equal capability to\
    \ talk (Multiple\n   Access), but none of them give lengthy speeches because they\
    \ are\n   polite.  If a person is impolite, he is asked to leave the room\n  \
    \ (i.e., thrown off the net).\n   No one talks while another is speaking.  But\
    \ if two people start\n   speaking at the same instant, each of them know this\
    \ because each\n   hears something they haven't said (Collision Detection).  When\
    \ these\n   two people notice this condition, they wait for a moment, then one\n\
    \   begins talking.  The other hears the talking and waits for the first\n   to\
    \ finish before beginning his own speech.\n   Each person has an unique name (unique\
    \ Ethernet address) to avoid\n   confusion.  Every time one of them talks, he\
    \ prefaces the message\n   with the name of the person he is talking to and with\
    \ his own name\n   (Ethernet destination and source address, respectively), i.e.,\
    \ \"Hello\n   Jane, this is Jack, ..blah blah blah...\".  If the sender wants\
    \ to\n   talk to everyone he might say \"everyone\" (broadcast address), i.e.,\n\
    \   \"Hello Everyone, this is Jack, ..blah blah blah...\".\n"
- title: 4.  ARP
  contents:
  - "4.  ARP\n   When sending out an IP packet, how is the destination Ethernet\n\
    \   address determined?\n   ARP (Address Resolution Protocol) is used to translate\
    \ IP addresses\n   to Ethernet addresses.  The translation is done only for outgoing\
    \ IP\n   packets, because this is when the IP header and the Ethernet header\n\
    \   are created.\n"
- title: 4.1  ARP Table for Address Translation
  contents:
  - "4.1  ARP Table for Address Translation\n   The translation is performed with\
    \ a table look-up.  The table, called\n   the ARP table, is stored in memory and\
    \ contains a row for each\n   computer.  There is a column for IP address and\
    \ a column for Ethernet\n   address.  When translating an IP address to an Ethernet\
    \ address, the\n   table is searched for a matching IP address.  The following\
    \ is a\n   simplified ARP table:\n                  ------------------------------------\n\
    \                  |IP address       Ethernet address |\n                  ------------------------------------\n\
    \                  |223.1.2.1        08-00-39-00-2F-C3|\n                  |223.1.2.3\
    \        08-00-5A-21-A7-22|\n                  |223.1.2.4        08-00-10-99-AC-54|\n\
    \                  ------------------------------------\n                    \
    \  TABLE 1.  Example ARP Table\n   The human convention when writing out the 4-byte\
    \ IP address is each\n   byte in decimal and separating bytes with a period. \
    \ When writing out\n   the 6-byte Ethernet address, the conventions are each byte\
    \ in\n   hexadecimal and separating bytes with either a minus sign or a colon.\n\
    \   The ARP table is necessary because the IP address and Ethernet\n   address\
    \ are selected independently; you can not use an algorithm to\n   translate IP\
    \ address to Ethernet address.  The IP address is selected\n   by the network\
    \ manager based on the location of the computer on the\n   internet.  When the\
    \ computer is moved to a different part of an\n   internet, its IP address must\
    \ be changed.  The Ethernet address is\n   selected by the manufacturer based\
    \ on the Ethernet address space\n   licensed by the manufacturer.  When the Ethernet\
    \ hardware interface\n   board changes, the Ethernet address changes.\n"
- title: 4.2  Typical Translation Scenario
  contents:
  - "4.2  Typical Translation Scenario\n   During normal operation a network application,\
    \ such as TELNET, sends\n   an application message to TCP, then TCP sends the\
    \ corresponding TCP\n   message to the IP module.  The destination IP address\
    \ is known by the\n   application, the TCP module, and the IP module.  At this\
    \ point the IP\n   packet has been constructed and is ready to be given to the\
    \ Ethernet\n   driver, but first the destination Ethernet address must be\n  \
    \ determined.\n   The ARP table is used to look-up the destination Ethernet address.\n\
    \   4.3  ARP Request/Response Pair\n   But how does the ARP table get filled in\
    \ the first place?  The answer\n   is that it is filled automatically by ARP on\
    \ an \"as-needed\" basis.\n   Two things happen when the ARP table can not be\
    \ used to translate an\n   address:\n     1. An ARP request packet with a broadcast\
    \ Ethernet address is sent\n        out on the network to every computer.\n  \
    \   2. The outgoing IP packet is queued.\n   Every computer's Ethernet interface\
    \ receives the broadcast Ethernet\n   frame.  Each Ethernet driver examines the\
    \ Type field in the Ethernet\n   frame and passes the ARP packet to the ARP module.\
    \  The ARP request\n   packet says \"If your IP address matches this target IP\
    \ address, then\n   please tell me your Ethernet address\".  An ARP request packet\
    \ looks\n   something like this:\n                ---------------------------------------\n\
    \                |Sender IP Address   223.1.2.1        |\n                |Sender\
    \ Enet Address 08-00-39-00-2F-C3|\n                ---------------------------------------\n\
    \                |Target IP Address   223.1.2.2        |\n                |Target\
    \ Enet Address <blank>          |\n                ---------------------------------------\n\
    \                     TABLE 2.  Example ARP Request\n   Each ARP module examines\
    \ the IP address and if the Target IP address\n   matches its own IP address,\
    \ it sends a response directly to the\n   source Ethernet address.  The ARP response\
    \ packet says \"Yes, that\n   target IP address is mine, let me give you my Ethernet\
    \ address\".  An\n   ARP response packet has the sender/target field contents\
    \ swapped as\n   compared to the request.  It looks something like this:\n   \
    \             ---------------------------------------\n                |Sender\
    \ IP Address   223.1.2.2        |\n                |Sender Enet Address 08-00-28-00-38-A9|\n\
    \                ---------------------------------------\n                |Target\
    \ IP Address   223.1.2.1        |\n                |Target Enet Address 08-00-39-00-2F-C3|\n\
    \                ---------------------------------------\n                   \
    \  TABLE 3.  Example ARP Response\n   The response is received by the original\
    \ sender computer.  The\n   Ethernet driver looks at the Type field in the Ethernet\
    \ frame then\n   passes the ARP packet to the ARP module.  The ARP module examines\
    \ the\n   ARP packet and adds the sender's IP and Ethernet addresses to its ARP\n\
    \   table.\n   The updated table now looks like this:\n                   ----------------------------------\n\
    \                   |IP address     Ethernet address |\n                   ----------------------------------\n\
    \                   |223.1.2.1      08-00-39-00-2F-C3|\n                   |223.1.2.2\
    \      08-00-28-00-38-A9|\n                   |223.1.2.3      08-00-5A-21-A7-22|\n\
    \                   |223.1.2.4      08-00-10-99-AC-54|\n                   ----------------------------------\n\
    \                   TABLE 4.  ARP Table after Response\n"
- title: 4.4  Scenario Continued
  contents:
  - "4.4  Scenario Continued\n   The new translation has now been installed automatically\
    \ in the\n   table, just milli-seconds after it was needed.  As you remember from\n\
    \   step 2 above, the outgoing IP packet was queued.  Next, the IP\n   address\
    \ to Ethernet address translation is performed by look-up in\n   the ARP table\
    \ then the Ethernet frame is transmitted on the Ethernet.\n   Therefore, with\
    \ the new steps 3, 4, and 5, the scenario for the\n   sender computer is:\n  \
    \   1. An ARP request packet with a broadcast Ethernet address is sent\n     \
    \   out on the network to every computer.\n     2. The outgoing IP packet is queued.\n\
    \     3. The ARP response arrives with the IP-to-Ethernet address\n        translation\
    \ for the ARP table.\n     4. For the queued IP packet, the ARP table is used\
    \ to translate the\n        IP address to the Ethernet address.\n     5. The Ethernet\
    \ frame is transmitted on the Ethernet.\n   In summary, when the translation is\
    \ missing from the ARP table, one\n   IP packet is queued.  The translation data\
    \ is quickly filled in with\n   ARP request/response and the queued IP packet\
    \ is transmitted.\n   Each computer has a separate ARP table for each of its Ethernet\n\
    \   interfaces.  If the target computer does not exist, there will be no\n   ARP\
    \ response and no entry in the ARP table.  IP will discard outgoing\n   IP packets\
    \ sent to that address.  The upper layer protocols can't\n   tell the difference\
    \ between a broken Ethernet and the absence of a\n   computer with the target\
    \ IP address.\n   Some implementations of IP and ARP don't queue the IP packet\
    \ while\n   waiting for the ARP response.  Instead the IP packet is discarded\
    \ and\n   the recovery from the IP packet loss is left to the TCP module or the\n\
    \   UDP network application.  This recovery is performed by time-out and\n   retransmission.\
    \  The retransmitted message is successfully sent out\n   onto the network because\
    \ the first copy of the message has already\n   caused the ARP table to be filled.\n"
- title: 5.  Internet Protocol
  contents:
  - "5.  Internet Protocol\n   The IP module is central to internet technology and\
    \ the essence of IP\n   is its route table.  IP uses this in-memory table to make\
    \ all\n   decisions about routing an IP packet.  The content of the route table\n\
    \   is defined by the network administrator.  Mistakes block\n   communication.\n\
    \   To understand how a route table is used is to understand\n   internetworking.\
    \  This understanding is necessary for the successful\n   administration and maintenance\
    \ of an IP network.\n   The route table is best understood by first having an\
    \ overview of\n   routing, then learning about IP network addresses, and then\
    \ looking\n   at the details.\n"
- title: 5.1  Direct Routing
  contents:
  - "5.1  Direct Routing\n   The figure below is of a tiny internet with 3 computers:\
    \ A, B, and C.\n   Each computer has the same TCP/IP protocol stack as in Figure\
    \ 1.\n   Each computer's Ethernet interface has its own Ethernet address.\n  \
    \ Each computer has an IP address assigned to the IP interface by the\n   network\
    \ manager, who also has assigned an IP network number to the\n   Ethernet.\n \
    \                         A      B      C\n                          |      |\
    \      |\n                        --o------o------o--\n                      \
    \  Ethernet 1\n                        IP network \"development\"\n          \
    \             Figure 6.  One IP Network\n   When A sends an IP packet to B, the\
    \ IP header contains A's IP address\n   as the source IP address, and the Ethernet\
    \ header contains A's\n   Ethernet address as the source Ethernet address.  Also,\
    \ the IP header\n   contains B's IP address as the destination IP address and\
    \ the\n   Ethernet header contains B's Ethernet address as the destination\n \
    \  Ethernet address.\n                ----------------------------------------\n\
    \                |address            source  destination|\n                ----------------------------------------\n\
    \                |IP header          A       B          |\n                |Ethernet\
    \ header    A       B          |\n                ----------------------------------------\n\
    \       TABLE 5.  Addresses in an Ethernet frame for an IP packet\n          \
    \                    from A to B\n   For this simple case, IP is overhead because\
    \ the IP adds little to\n   the service offered by Ethernet.  However, IP does\
    \ add cost: the\n   extra CPU processing and network bandwidth to generate, transmit,\
    \ and\n   parse the IP header.\n   When B's IP module receives the IP packet from\
    \ A, it checks the\n   destination IP address against its own, looking for a match,\
    \ then it\n   passes the datagram to the upper-level protocol.\n   This communication\
    \ between A and B uses direct routing.\n"
- title: 5.2  Indirect Routing
  contents:
  - "5.2  Indirect Routing\n   The figure below is a more realistic view of an internet.\
    \  It is\n   composed of 3 Ethernets and 3 IP networks connected by an IP-router\n\
    \   called computer D.  Each IP network has 4 computers; each computer\n   has\
    \ its own IP address and Ethernet address.\n          A      B      C      ----D----\
    \      E      F      G\n          |      |      |      |   |   |      |      |\
    \      |\n        --o------o------o------o-  |  -o------o------o------o--\n  \
    \      Ethernet 1                 |  Ethernet 2\n        IP network \"development\"\
    \   |  IP network \"accounting\"\n                                   |\n     \
    \                              |\n                                   |     H \
    \     I      J\n                                   |     |      |      |\n   \
    \                              --o-----o------o------o--\n                   \
    \               Ethernet 3\n                                  IP network \"factory\"\
    \n               Figure 7.  Three IP Networks; One internet\n   Except for computer\
    \ D, each computer has a TCP/IP protocol stack like\n   that in Figure 1.  Computer\
    \ D is the IP-router; it is connected to\n   all 3 networks and therefore has\
    \ 3 IP addresses and 3 Ethernet\n   addresses.  Computer D has a TCP/IP protocol\
    \ stack similar to that in\n   Figure 3, except that it has 3 ARP modules and\
    \ 3 Ethernet drivers\n   instead of 2.  Please note that computer D has only one\
    \ IP module.\n   The network manager has assigned a unique number, called an IP\n\
    \   network number, to each of the Ethernets.  The IP network numbers are\n  \
    \ not shown in this diagram, just the network names.\n   When computer A sends\
    \ an IP packet to computer B, the process is\n   identical to the single network\
    \ example above.  Any communication\n   between computers located on a single\
    \ IP network matches the direct\n   routing example discussed previously.\n  \
    \ When computer D and A communicate, it is direct communication.  When\n   computer\
    \ D and E communicate, it is direct communication.  When\n   computer D and H\
    \ communicate, it is direct communication.  This is\n   because each of these\
    \ pairs of computers is on the same IP network.\n   However, when computer A communicates\
    \ with a computer on the far side\n   of the IP-router, communication is no longer\
    \ direct.  A must use D to\n   forward the IP packet to the next IP network. \
    \ This communication is\n   called \"indirect\".\n   This routing of IP packets\
    \ is done by IP modules and happens\n   transparently to TCP, UDP, and the network\
    \ applications.\n   If A sends an IP packet to E, the source IP address and the\
    \ source\n   Ethernet address are A's.  The destination IP address is E's, but\n\
    \   because A's IP module sends the IP packet to D for forwarding, the\n   destination\
    \ Ethernet address is D's.\n                ----------------------------------------\n\
    \                |address            source  destination|\n                ----------------------------------------\n\
    \                |IP header          A       E          |\n                |Ethernet\
    \ header    A       D          |\n                ----------------------------------------\n\
    \       TABLE 6.  Addresses in an Ethernet frame for an IP packet\n          \
    \               from A to E (before D)\n   D's IP module receives the IP packet\
    \ and upon examining the\n   destination IP address, says \"This is not my IP\
    \ address,\" and sends\n   the IP packet directly to E.\n                ----------------------------------------\n\
    \                |address            source  destination|\n                ----------------------------------------\n\
    \                |IP header          A       E          |\n                |Ethernet\
    \ header    D       E          |\n                ----------------------------------------\n\
    \       TABLE 7.  Addresses in an Ethernet frame for an IP packet\n          \
    \               from A to E (after D)\n   In summary, for direct communication,\
    \ both the source IP address and\n   the source Ethernet address is the sender's,\
    \ and the destination IP\n   address and the destination Ethernet address is the\
    \ recipient's.  For\n   indirect communication, the IP address and Ethernet addresses\
    \ do not\n   pair up in this way.\n   This example internet is a very simple one.\
    \  Real networks are often\n   complicated by many factors, resulting in multiple\
    \ IP-routers and\n   several types of physical networks.  This example internet\
    \ might have\n   come about because the network manager wanted to split a large\n\
    \   Ethernet in order to localize Ethernet broadcast traffic.\n"
- title: 5.3  IP Module Routing Rules
  contents:
  - "5.3  IP Module Routing Rules\n   This overview of routing has shown what happens,\
    \ but not how it\n   happens.  Now let's examine the rules, or algorithm, used\
    \ by the IP\n   module.\n     For an outgoing IP packet, entering IP from an upper\
    \ layer, IP must\n     decide whether to send the IP packet directly or indirectly,\
    \ and IP\n     must choose a lower network interface.  These choices are made\
    \ by\n     consulting the route table.\n     For an incoming IP packet, entering\
    \ IP from a lower interface, IP\n     must decide whether to forward the IP packet\
    \ or pass it to an upper\n     layer.  If the IP packet is being forwarded, it\
    \ is treated as an\n     outgoing IP packet.\n     When an incoming IP packet\
    \ arrives it is never forwarded back out\n     through the same network interface.\n\
    \   These decisions are made before the IP packet is handed to the lower\n   interface\
    \ and before the ARP table is consulted.\n"
- title: 5.4  IP Address
  contents:
  - "5.4  IP Address\n   The network manager assigns IP addresses to computers according\
    \ to\n   the IP network to which the computer is attached.  One part of a 4-\n\
    \   byte IP address is the IP network number, the other part is the IP\n   computer\
    \ number (or host number).  For the computer in table 1, with\n   an IP address\
    \ of 223.1.2.1, the network number is 223.1.2 and the\n   host number is number\
    \ 1.\n   The portion of the address that is used for network number and for\n\
    \   host number is defined by the upper bits in the 4-byte address.  All\n   example\
    \ IP addresses in this tutorial are of type class C, meaning\n   that the upper\
    \ 3 bits indicate that 21 bits are the network number\n   and 8 bits are the host\
    \ number.  This allows 2,097,152 class C\n   networks up to 254 hosts on each\
    \ network.\n   The IP address space is administered by the NIC (Network Information\n\
    \   Center).  All internets that are connected to the single world-wide\n   Internet\
    \ must use network numbers assigned by the NIC.  If you are\n   setting up your\
    \ own internet and you are not intending to connect it\n   to the Internet, you\
    \ should still obtain your network numbers from\n   the NIC.  If you pick your\
    \ own number, you run the risk of confusion\n   and chaos in the eventuality that\
    \ your internet is connected to\n   another internet.\n"
- title: 5.5  Names
  contents:
  - "5.5  Names\n   People refer to computers by names, not numbers.  A computer called\n\
    \   alpha might have the IP address of 223.1.2.1.  For small networks,\n   this\
    \ name-to-address translation data is often kept on each computer\n   in the \"\
    hosts\" file.  For larger networks, this translation data file\n   is stored on\
    \ a server and accessed across the network when needed.  A\n   few lines from\
    \ that file might look like this:\n   223.1.2.1     alpha\n   223.1.2.2     beta\n\
    \   223.1.2.3     gamma\n   223.1.2.4     delta\n   223.1.3.2     epsilon\n  \
    \ 223.1.4.2     iota\n   The IP address is the first column and the computer name\
    \ is the\n   second column.\n   In most cases, you can install identical \"hosts\"\
    \ files on all\n   computers.  You may notice that \"delta\" has only one entry\
    \ in this\n   file even though it has 3 IP addresses.  Delta can be reached with\n\
    \   any of its IP addresses; it does not matter which one is used.  When\n   delta\
    \ receives an IP packet and looks at the destination address, it\n   will recognize\
    \ any of its own IP addresses.\n   IP networks are also given names.  If you have\
    \ 3 IP networks, your\n   \"networks\" file for documenting these names might\
    \ look something like\n   this:\n   223.1.2     development\n   223.1.3     accounting\n\
    \   223.1.4     factory\n   The IP network number is in the first column and its\
    \ name is in the\n   second column.\n   From this example you can see that alpha\
    \ is computer number 1 on the\n   development network, beta is computer number\
    \ 2 on the development\n   network and so on.  You might also say that alpha is\
    \ development.1,\n   Beta is development.2, and so on.\n   The above hosts file\
    \ is adequate for the users, but the network\n   manager will probably replace\
    \ the line for delta with:\n   223.1.2.4     devnetrouter    delta\n   223.1.3.1\
    \     facnetrouter\n   223.1.4.1     accnetrouter\n   These three new lines for\
    \ the hosts file give each of delta's IP\n   addresses a meaningful name.  In\
    \ fact, the first IP address listed\n   has 2 names; \"delta\" and \"devnetrouter\"\
    \ are synonyms.  In practice\n   \"delta\" is the general-purpose name of the\
    \ computer and the other 3\n   names are only used when administering the IP route\
    \ table.\n   These files are used by network administration commands and network\n\
    \   applications to provide meaningful names.  They are not required for\n   operation\
    \ of an internet, but they do make it easier for us.\n"
- title: 5.6  IP Route Table
  contents:
  - "5.6  IP Route Table\n   How does IP know which lower network interface to use\
    \ when sending\n   out a IP packet?  IP looks it up in the route table using a\
    \ search\n   key of the IP network number extracted from the IP destination\n\
    \   address.\n   The route table contains one row for each route.  The primary\
    \ columns\n   in the route table are:  IP network number, direct/indirect flag,\n\
    \   router IP address, and interface number.  This table is referred to\n   by\
    \ IP for each outgoing IP packet.\n   On most computers the route table can be\
    \ modified with the \"route\"\n   command.  The content of the route table is\
    \ defined by the network\n   manager, because the network manager assigns the\
    \ IP addresses to the\n   computers.\n"
- title: 5.7  Direct Routing Details
  contents:
  - "5.7  Direct Routing Details\n   To explain how it is used, let us visit in detail\
    \ the routing\n   situations we have reviewed previously.\n                  \
    \      ---------         ---------\n                        | alpha |        \
    \ | beta  |\n                        |    1  |         |  1    |\n           \
    \             ---------         ---------\n                             |    \
    \           |\n                     --------o---------------o-\n             \
    \         Ethernet 1\n                      IP network \"development\"\n     \
    \          Figure 8.  Close-up View of One IP Network\n   The route table inside\
    \ alpha looks like this:\n     --------------------------------------------------------------\n\
    \     |network      direct/indirect flag  router   interface number|\n     --------------------------------------------------------------\n\
    \     |development  direct                <blank>  1               |\n     --------------------------------------------------------------\n\
    \                  TABLE 8.  Example Simple Route Table\n   This view can be seen\
    \ on some UNIX systems with the \"netstat -r\"\n   command.  With this simple\
    \ network, all computers have identical\n   routing tables.\n   For discussion,\
    \ the table is printed again without the network number\n   translated to its\
    \ network name.\n     --------------------------------------------------------------\n\
    \     |network      direct/indirect flag  router   interface number|\n     --------------------------------------------------------------\n\
    \     |223.1.2      direct                <blank>  1               |\n     --------------------------------------------------------------\n\
    \           TABLE 9.  Example Simple Route Table with Numbers\n"
- title: 5.8  Direct Scenario
  contents:
  - "5.8  Direct Scenario\n   Alpha is sending an IP packet to beta.  The IP packet\
    \ is in alpha's\n   IP module and the destination IP address is beta or 223.1.2.2.\
    \  IP\n   extracts the network portion of this IP address and scans the first\n\
    \   column of the table looking for a match.  With this network a match\n   is\
    \ found on the first entry.\n   The other information in this entry indicates\
    \ that computers on this\n   network can be reached directly through interface\
    \ number 1.  An ARP\n   table translation is done on beta's IP address then the\
    \ Ethernet\n   frame is sent directly to beta via interface number 1.\n   If an\
    \ application tries to send data to an IP address that is not on\n   the development\
    \ network, IP will be unable to find a match in the\n   route table.  IP then\
    \ discards the IP packet.  Some computers provide\n   a \"Network not reachable\"\
    \ error message.\n"
- title: 5.9  Indirect Routing Details
  contents:
  - "5.9  Indirect Routing Details\n   Now, let's take a closer look at the more complicated\
    \ routing\n   scenario that we examined previously.\n          ---------     \
    \      ---------           ---------\n          | alpha |           | delta |\
    \           |epsilon|\n          |    1  |           |1  2  3|           |   1\
    \   |\n          ---------           ---------           ---------\n         \
    \      |               |  |  |                |\n       --------o---------------o-\
    \ | -o----------------o--------\n        Ethernet 1                |     Ethernet\
    \ 2\n        IP network \"Development\"  |     IP network \"accounting\"\n   \
    \                               |\n                                  |     --------\n\
    \                                  |     | iota |\n                          \
    \        |     |  1   |\n                                  |     --------\n  \
    \                                |        |\n                                --o--------o--------\n\
    \                                    Ethernet 3\n                            \
    \        IP network \"factory\"\n             Figure 9.  Close-up View of Three\
    \ IP Networks\n   The route table inside alpha looks like this:\n ---------------------------------------------------------------------\n\
    \ |network      direct/indirect flag  router          interface number|\n ---------------------------------------------------------------------\n\
    \ |development  direct                <blank>         1               |\n |accounting\
    \   indirect              devnetrouter    1               |\n |factory      indirect\
    \              devnetrouter    1               |\n ---------------------------------------------------------------------\n\
    \                      TABLE 10.  Alpha Route Table\n   For discussion the table\
    \ is printed again using numbers instead of\n   names.\n  --------------------------------------------------------------------\n\
    \  |network      direct/indirect flag  router         interface number|\n  --------------------------------------------------------------------\n\
    \  |223.1.2      direct                <blank>        1               |\n  |223.1.3\
    \      indirect              223.1.2.4      1               |\n  |223.1.4    \
    \  indirect              223.1.2.4      1               |\n  --------------------------------------------------------------------\n\
    \               TABLE 11.  Alpha Route Table with Numbers\n   The router in Alpha's\
    \ route table is the IP address of delta's\n   connection to the development network.\n"
- title: 5.10  Indirect Scenario
  contents:
  - "5.10  Indirect Scenario\n   Alpha is sending an IP packet to epsilon.  The IP\
    \ packet is in\n   alpha's IP module and the destination IP address is epsilon\n\
    \   (223.1.3.2).  IP extracts the network portion of this IP address\n   (223.1.3)\
    \ and scans the first column of the table looking for a\n   match.  A match is\
    \ found on the second entry.\n   This entry indicates that computers on the 223.1.3\
    \ network can be\n   reached through the IP-router devnetrouter.  Alpha's IP module\
    \ then\n   does an ARP table translation for devnetrouter's IP address and sends\n\
    \   the IP packet directly to devnetrouter through Alpha's interface\n   number\
    \ 1.  The IP packet still contains the destination address of\n   epsilon.\n \
    \  The IP packet arrives at delta's development network interface and is\n   passed\
    \ up to delta's IP module.  The destination IP address is\n   examined and because\
    \ it does not match any of delta's own IP\n   addresses, delta decides to forward\
    \ the IP packet.\n   Delta's IP module extracts the network portion of the destination\
    \ IP\n   address (223.1.3) and scans its route table for a matching network\n\
    \   field.  Delta's route table looks like this:\n ----------------------------------------------------------------------\n\
    \ |network      direct/indirect flag  router           interface number|\n ----------------------------------------------------------------------\n\
    \ |development  direct                <blank>          1               |\n |factory\
    \      direct                <blank>          3               |\n |accounting\
    \   direct                <blank>          2               |\n ----------------------------------------------------------------------\n\
    \                     TABLE 12.  Delta's Route Table\n   Below is delta's table\
    \ printed again, without the translation to\n   names.\n ----------------------------------------------------------------------\n\
    \ |network      direct/indirect flag  router           interface number|\n ----------------------------------------------------------------------\n\
    \ |223.1.2      direct                <blank>          1               |\n |223.1.3\
    \      direct                <blank>          3               |\n |223.1.4   \
    \   direct                <blank>          2               |\n ----------------------------------------------------------------------\n\
    \              TABLE 13.  Delta's Route Table with Numbers\n   The match is found\
    \ on the second entry.  IP then sends the IP packet\n   directly to epsilon through\
    \ interface number 3.  The IP packet\n   contains the IP destination address of\
    \ epsilon and the Ethernet\n   destination address of epsilon.\n   The IP packet\
    \ arrives at epsilon and is passed up to epsilon's IP\n   module.  The destination\
    \ IP address is examined and found to match\n   with epsilon's IP address, so\
    \ the IP packet is passed to the upper\n   protocol layer.\n"
- title: 5.11  Routing Summary
  contents:
  - "5.11  Routing Summary\n   When a IP packet travels through a large internet it\
    \ may go through\n   many IP-routers before it reaches its destination.  The path\
    \ it takes\n   is not determined by a central source but is a result of consulting\n\
    \   each of the routing tables used in the journey.  Each computer\n   defines\
    \ only the next hop in the journey and relies on that computer\n   to send the\
    \ IP packet on its way.\n"
- title: 5.12  Managing the Routes
  contents:
  - "5.12  Managing the Routes\n   Maintaining correct routing tables on all computers\
    \ in a large\n   internet is a difficult task; network configuration is being\
    \ modified\n   constantly by the network managers to meet changing needs.  Mistakes\n\
    \   in routing tables can block communication in ways that are\n   excruciatingly\
    \ tedious to diagnose.\n   Keeping a simple network configuration goes a long\
    \ way towards making\n   a reliable internet.  For instance, the most straightforward\
    \ method\n   of assigning IP networks to Ethernet is to assign a single IP network\n\
    \   number to each Ethernet.\n   Help is also available from certain protocols\
    \ and network\n   applications.  ICMP (Internet Control Message Protocol) can\
    \ report\n   some routing problems.  For small networks the route table is filled\n\
    \   manually on each computer by the network administrator.  For larger\n   networks\
    \ the network administrator automates this manual operation\n   with a routing\
    \ protocol to distribute routes throughout a network.\n   When a computer is moved\
    \ from one IP network to another, its IP\n   address must change.  When a computer\
    \ is removed from an IP network\n   its old address becomes invalid.  These changes\
    \ require frequent\n   updates to the \"hosts\" file.  This flat file can become\
    \ difficult to\n   maintain for even medium-size networks.  The Domain Name System\
    \ helps\n   solve these problems.\n"
- title: 6.  User Datagram Protocol
  contents:
  - "6.  User Datagram Protocol\n   UDP is one of the two main protocols to reside\
    \ on top of IP.  It\n   offers service to the user's network applications.  Example\
    \ network\n   applications that use UDP are:  Network File System (NFS) and Simple\n\
    \   Network Management Protocol (SNMP).  The service is little more than\n   an\
    \ interface to IP.\n   UDP is a connectionless datagram delivery service that\
    \ does not\n   guarantee delivery.  UDP does not maintain an end-to-end connection\n\
    \   with the remote UDP module; it merely pushes the datagram out on the\n   net\
    \ and accepts incoming datagrams off the net.\n   UDP adds two values to what\
    \ is provided by IP.  One is the\n   multiplexing of information between applications\
    \ based on port\n   number.  The other is a checksum to check the integrity of\
    \ the data.\n"
- title: 6.1  Ports
  contents:
  - "6.1  Ports\n   How does a client on one computer reach the server on another?\n\
    \   The path of communication between an application and UDP is through\n   UDP\
    \ ports.  These ports are numbered, beginning with zero.  An\n   application that\
    \ is offering service (the server) waits for messages\n   to come in on a specific\
    \ port dedicated to that service.  The server\n   waits patiently for any client\
    \ to request service.\n   For instance, the SNMP server, called an SNMP agent,\
    \ always waits on\n   port 161.  There can be only one SNMP agent per computer\
    \ because\n   there is only one UDP port number 161.  This port number is well\n\
    \   known; it is a fixed number, an internet assigned number.  If an SNMP\n  \
    \ client wants service, it sends its request to port number 161 of UDP\n   on\
    \ the destination computer.\n   When an application sends data out through UDP\
    \ it arrives at the far\n   end as a single unit.  For example, if an application\
    \ does 5 writes\n   to the UDP port, the application at the far end will do 5\
    \ reads from\n   the UDP port.  Also, the size of each write matches the size\
    \ of each\n   read.\n   UDP preserves the message boundary defined by the application.\
    \  It\n   never joins two application messages together, or divides a single\n\
    \   application message into parts.\n"
- title: 6.2  Checksum
  contents:
  - "6.2  Checksum\n   An incoming IP packet with an IP header type field indicating\
    \ \"UDP\"\n   is passed up to the UDP module by IP.  When the UDP module receives\n\
    \   the UDP datagram from IP it examines the UDP checksum.  If the\n   checksum\
    \ is zero, it means that checksum was not calculated by the\n   sender and can\
    \ be ignored.  Thus the sending computer's UDP module\n   may or may not generate\
    \ checksums.  If Ethernet is the only network\n   between the 2 UDP modules communicating,\
    \ then you may not need\n   checksumming.  However, it is recommended that checksum\
    \ generation\n   always be enabled because at some point in the future a route\
    \ table\n   change may send the data across less reliable media.\n   If the checksum\
    \ is valid (or zero), the destination port number is\n   examined and if an application\
    \ is bound to that port, an application\n   message is queued for the application\
    \ to read.  Otherwise the UDP\n   datagram is discarded.  If the incoming UDP\
    \ datagrams arrive faster\n   than the application can read them and if the queue\
    \ fills to a\n   maximum value, UDP datagrams are discarded by UDP.  UDP will\
    \ continue\n   to discard UDP datagrams until there is space in the queue.\n"
- title: 7.  Transmission Control Protocol
  contents:
  - "7.  Transmission Control Protocol\n   TCP provides a different service than UDP.\
    \  TCP offers a connection-\n   oriented byte stream, instead of a connectionless\
    \ datagram delivery\n   service.  TCP guarantees delivery, whereas UDP does not.\n\
    \   TCP is used by network applications that require guaranteed delivery\n   and\
    \ cannot be bothered with doing time-outs and retransmissions.  The\n   two most\
    \ typical network applications that use TCP are File Transfer\n   Protocol (FTP)\
    \ and the TELNET.  Other popular TCP network\n   applications include X-Window\
    \ System, rcp (remote copy), and the r-\n   series commands.  TCP's greater capability\
    \ is not without cost: it\n   requires more CPU and network bandwidth.  The internals\
    \ of the TCP\n   module are much more complicated than those in a UDP module.\n\
    \   Similar to UDP, network applications connect to TCP ports.  Well-\n   defined\
    \ port numbers are dedicated to specific applications.  For\n   instance, the\
    \ TELNET server uses port number 23.  The TELNET client\n   can find the server\
    \ simply by connecting to port 23 of TCP on the\n   specified computer.\n   When\
    \ the application first starts using TCP, the TCP module on the\n   client's computer\
    \ and the TCP module on the server's computer start\n   communicating with each\
    \ other.  These two end-point TCP modules\n   contain state information that defines\
    \ a virtual circuit.  This\n   virtual circuit consumes resources in both TCP\
    \ end-points.  The\n   virtual circuit is full duplex; data can go in both directions\n\
    \   simultaneously.  The application writes data to the TCP port, the\n   data\
    \ traverses the network and is read by the application at the far\n   end.\n \
    \  TCP packetizes the byte stream at will; it does not retain the\n   boundaries\
    \ between writes.  For example, if an application does 5\n   writes to the TCP\
    \ port, the application at the far end might do 10\n   reads to get all the data.\
    \  Or it might get all the data with a\n   single read.  There is no correlation\
    \ between the number and size of\n   writes at one end to the number and size\
    \ of reads at the other end.\n   TCP is a sliding window protocol with time-out\
    \ and retransmits.\n   Outgoing data must be acknowledged by the far-end TCP.\n\
    \   Acknowledgements can be piggybacked on data.  Both receiving ends can\n  \
    \ flow control the far end, thus preventing a buffer overrun.\n   As with all\
    \ sliding window protocols, the protocol has a window size.\n   The window size\
    \ determines the amount of data that can be transmitted\n   before an acknowledgement\
    \ is required.  For TCP, this amount is not a\n   number of TCP segments but a\
    \ number of bytes.\n"
- title: 8.  Network Applications
  contents:
  - "8.  Network Applications\n   Why do both TCP and UDP exist, instead of just one\
    \ or the other?\n   They supply different services.  Most applications are implemented\
    \ to\n   use only one or the other.  You, the programmer, choose the protocol\n\
    \   that best meets your needs.  If you need a reliable stream delivery\n   service,\
    \ TCP might be best.  If you need a datagram service, UDP\n   might be best. \
    \ If you need efficiency over long-haul circuits, TCP\n   might be best.  If you\
    \ need efficiency over fast networks with short\n   latency, UDP might be best.\
    \  If your needs do not fall nicely into\n   these categories, then the \"best\"\
    \ choice is unclear.  However,\n   applications can make up for deficiencies in\
    \ the choice.  For\n   instance if you choose UDP and you need reliability, then\
    \ the\n   application must provide reliability.  If you choose TCP and you need\n\
    \   a record oriented service, then the application must insert markers\n   in\
    \ the byte stream to delimit records.\n   What network applications are available?\n\
    \   There are far too many to list.  The number is growing continually.\n   Some\
    \ of the applications have existed since the beginning of internet\n   technology:\
    \ TELNET and FTP.  Others are relatively new: X-Windows and\n   SNMP.  The following\
    \ is a brief description of the applications\n   mentioned in this tutorial.\n"
- title: 8.1  TELNET
  contents:
  - "8.1  TELNET\n   TELNET provides a remote login capability on TCP.  The operation\
    \ and\n   appearance is similar to keyboard dialing through a telephone switch.\n\
    \   On the command line the user types \"telnet delta\" and receives a\n   login\
    \ prompt from the computer called \"delta\".\n   TELNET works well; it is an old\
    \ application and has widespread\n   interoperability.  Implementations of TELNET\
    \ usually work between\n   different operating systems.  For instance, a TELNET\
    \ client may be on\n   VAX/VMS and the server on UNIX System V.\n"
- title: 8.2  FTP
  contents:
  - "8.2  FTP\n   File Transfer Protocol (FTP), as old as TELNET, also uses TCP and\
    \ has\n   widespread interoperability.  The operation and appearance is as if\n\
    \   you TELNETed to the remote computer.  But instead of typing your\n   usual\
    \ commands, you have to make do with a short list of commands for\n   directory\
    \ listings and the like.  FTP commands allow you to copy\n   files between computers.\n"
- title: 8.3  rsh
  contents:
  - "8.3  rsh\n   Remote shell (rsh or remsh) is one of an entire family of remote\
    \ UNIX\n   style commands.  The UNIX copy command, cp, becomes rcp.  The UNIX\n\
    \   \"who is logged in\" command, who, becomes rwho.  The list continues\n   and\
    \ is referred to collectively to as the \"r\" series commands or the\n   \"r*\"\
    \ (r star) commands.\n   The r* commands mainly work between UNIX systems and\
    \ are designed for\n   interaction between trusted hosts.  Little consideration\
    \ is given to\n   security, but they provide a convenient user environment.\n\
    \   To execute the \"cc file.c\" command on a remote computer called delta,\n\
    \   type \"rsh delta cc file.c\".  To copy the \"file.c\" file to delta, type\n\
    \   \"rcp file.c delta:\".  To login to delta, type \"rlogin delta\", and if\n\
    \   you administered the computers in a certain way, you will not be\n   challenged\
    \ with a password prompt.\n"
- title: 8.4  NFS
  contents:
  - "8.4  NFS\n   Network File System, first developed by Sun Microsystems Inc, uses\n\
    \   UDP and is excellent for mounting UNIX file systems on multiple\n   computers.\
    \  A diskless workstation can access its server's hard disk\n   as if the disk\
    \ were local to the workstation.  A single disk copy of\n   a database on mainframe\
    \ \"alpha\" can also be used by mainframe \"beta\"\n   if the database's file\
    \ system is NFS mounted on \"beta\".\n   NFS adds significant load to a network\
    \ and has poor utility across\n   slow links, but the benefits are strong.  The\
    \ NFS client is\n   implemented in the kernel, allowing all applications and commands\
    \ to\n   use the NFS mounted disk as if it were local disk.\n"
- title: 8.5  SNMP
  contents:
  - "8.5  SNMP\n   Simple Network Management Protocol (SNMP) uses UDP and is designed\n\
    \   for use by central network management stations.  It is a well known\n   fact\
    \ that if given enough data, a network manager can detect and\n   diagnose network\
    \ problems.  The central station uses SNMP to collect\n   this data from other\
    \ computers on the network.  SNMP defines the\n   format for the data; it is left\
    \ to the central station or network\n   manager to interpret the data.\n"
- title: 8.6  X-Window
  contents:
  - "8.6  X-Window\n   The X Window System uses the X Window protocol on TCP to draw\
    \ windows\n   on a workstation's bitmap display.  X Window is much more than a\n\
    \   utility for drawing windows; it is entire philosophy for designing a\n   user\
    \ interface.\n"
- title: 9.  Other Information
  contents:
  - "9.  Other Information\n   Much information about internet technology was not\
    \ included in this\n   tutorial.  This section lists information that is considered\
    \ the next\n   level of detail for the reader who wishes to learn more.\n    \
    \ o administration commands: arp, route, and netstat\n     o ARP: permanent entry,\
    \ publish entry, time-out entry, spoofing\n     o IP route table: host entry,\
    \ default gateway, subnets\n     o IP: time-to-live counter, fragmentation, ICMP\n\
    \     o RIP, routing loops\n     o Domain Name System\n"
- title: 10.  References
  contents:
  - "10.  References\n   [1] Comer, D., \"Internetworking with TCP/IP Principles,\
    \ Protocols,\n       and Architecture\", Prentice Hall, Englewood Cliffs, New\
    \ Jersey,\n       U.S.A., 1988.\n   [2] Feinler, E., et al, DDN Protocol Handbook,\
    \ Volume 2 and 3, DDN\n       Network Information Center, SRI International, 333\
    \ Ravenswood\n       Avenue, Room EJ291, Menlow Park, California, U.S.A., 1985.\n\
    \   [3] Spider Systems, Ltd., \"Packets and Protocols\", Spider Systems\n    \
    \   Ltd., Stanwell Street, Edinburgh, U.K. EH6 5NG, 1990.\n"
- title: 11.  Relation to other RFCs
  contents:
  - "11.  Relation to other RFCs\n   This RFC is a tutorial and it does not UPDATE\
    \ or OBSOLETE any other\n   RFC.\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   There are security considerations within the\
    \ TCP/IP protocol suite.\n   To some people these considerations are serious problems,\
    \ to others\n   they are not; it depends on the user requirements.\n   This tutorial\
    \ does not discuss these issues, but if you want to learn\n   more you should\
    \ start with the topic of ARP-spoofing, then use the\n   \"Security Considerations\"\
    \ section of RFC 1122 to lead you to more\n   information.\n"
- title: 13.  Authors' Addresses
  contents:
  - "13.  Authors' Addresses\n   Theodore John Socolofsky\n   Spider Systems Limited\n\
    \   Spider Park\n   Stanwell Street\n   Edinburgh EH6 5NG\n   United Kingdom\n\
    \   Phone:\n     from UK        031-554-9424\n     from USA 011-44-31-554-9424\n\
    \   Fax:\n     from UK        031-554-0649\n     from USA 011-44-31-554-0649\n\
    \   EMail: TEDS@SPIDER.CO.UK\n   Claudia Jeanne Kale\n   12 Gosford Place\n  \
    \ Edinburgh EH6 4BJ\n   United Kingdom\n   Phone:\n     from UK        031-554-7432\n\
    \     from USA 011-44-31-554-7432\n   EMail: CLAUDIAK@SPIDER.CO.UK\n"
