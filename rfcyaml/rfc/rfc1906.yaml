- title: __initial_text__
  contents:
  - "                Transport Mappings for Version 2 of the\n              Simple\
    \ Network Management Protocol (SNMPv2)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ................................................\
    \    2\n   1.1 A Note on Terminology ......................................  \
    \  2\n   2. Definitions .................................................    3\n\
    \   3. SNMPv2 over UDP .............................................    5\n  \
    \ 3.1 Serialization ..............................................    5\n   3.2\
    \ Well-known Values ..........................................    5\n   4. SNMPv2\
    \ over OSI .............................................    6\n   4.1 Serialization\
    \ ..............................................    6\n   4.2 Well-known Values\
    \ ..........................................    6\n   5. SNMPv2 over DDP .............................................\
    \    6\n   5.1 Serialization ..............................................  \
    \  6\n   5.2 Well-known Values ..........................................    6\n\
    \   5.3 Discussion of AppleTalk Addressing .........................    7\n  \
    \ 5.3.1 How to Acquire NBP names .................................    8\n   5.3.2\
    \ When to Turn NBP names into DDP addresses ................    8\n   5.3.3 How\
    \ to Turn NBP names into DDP addresses .................    8\n   5.3.4 What if\
    \ NBP is broken ....................................    9\n   6. SNMPv2 over IPX\
    \ .............................................    9\n   6.1 Serialization ..............................................\
    \    9\n   6.2 Well-known Values ..........................................  \
    \  9\n   7. Proxy to SNMPv1 .............................................   10\n\
    \   8. Serialization using the Basic Encoding Rules ................   10\n  \
    \ 8.1 Usage Example ..............................................   11\n   9.\
    \ Security Considerations .....................................   11\n   10. Editor's\
    \ Address ...........................................   12\n   11. Acknowledgements\
    \ ...........................................   12\n   12. References .................................................\
    \   13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A management system contains:  several (potentially many)\
    \ nodes, each\n   with a processing entity, termed an agent, which has access\
    \ to\n   management instrumentation; at least one management station; and, a\n\
    \   management protocol, used to convey management information between\n   the\
    \ agents and management stations.  Operations of the protocol are\n   carried\
    \ out under an administrative framework which defines\n   authentication, authorization,\
    \ access control, and privacy policies.\n   Management stations execute management\
    \ applications which monitor and\n   control managed elements.  Managed elements\
    \ are devices such as\n   hosts, routers, terminal servers, etc., which are monitored\
    \ and\n   controlled via access to their management information.\n   The management\
    \ protocol, version 2 of the Simple Network Management\n   Protocol [1], may be\
    \ used over a variety of protocol suites.  It is\n   the purpose of this document\
    \ to define how the SNMPv2 maps onto an\n   initial set of transport domains.\
    \  Other mappings may be defined in\n   the future.\n   Although several mappings\
    \ are defined, the mapping onto UDP is the\n   preferred mapping.  As such, to\
    \ provide for the greatest level of\n   interoperability, systems which choose\
    \ to deploy other mappings\n   should also provide for proxy service to the UDP\
    \ mapping.\n"
- title: 1.1.  A Note on Terminology
  contents:
  - "1.1.  A Note on Terminology\n   For the purpose of exposition, the original Internet-standard\
    \ Network\n   Management Framework, as described in RFCs 1155 (STD 16), 1157 (STD\n\
    \   15), and 1212 (STD 16), is termed the SNMP version 1 framework\n   (SNMPv1).\
    \  The current framework is termed the SNMP version 2\n   framework (SNMPv2).\n"
- title: 2.  Definitions
  contents:
  - '2.  Definitions

    '
- title: SNMPv2-TM DEFINITIONS ::= BEGIN
  contents:
  - 'SNMPv2-TM DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n    OBJECT-IDENTITY, snmpDomains, snmpProxys\n        FROM SNMPv2-SMI\n\
    \    TEXTUAL-CONVENTION\n        FROM SNMPv2-TC;\n"
- title: -- SNMPv2 over UDP over IPv4
  contents:
  - '-- SNMPv2 over UDP over IPv4

    '
- title: snmpUDPDomain  OBJECT-IDENTITY
  contents:
  - "snmpUDPDomain  OBJECT-IDENTITY\n    STATUS     current\n    DESCRIPTION\n   \
    \         \"The SNMPv2 over UDP transport domain.  The corresponding\n       \
    \     transport address is of type SnmpUDPAddress.\"\n    ::= { snmpDomains 1\
    \ }\n"
- title: SnmpUDPAddress ::= TEXTUAL-CONVENTION
  contents:
  - "SnmpUDPAddress ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"1d.1d.1d.1d/2d\"\n\
    \    STATUS       current\n    DESCRIPTION\n            \"Represents a UDP address:\n\
    \               octets   contents        encoding\n                1-4     IP-address\
    \      network-byte order\n                5-6     UDP-port        network-byte\
    \ order\n            \"\n    SYNTAX       OCTET STRING (SIZE (6))\n"
- title: -- SNMPv2 over OSI
  contents:
  - '-- SNMPv2 over OSI

    '
- title: snmpCLNSDomain OBJECT-IDENTITY
  contents:
  - "snmpCLNSDomain OBJECT-IDENTITY\n    STATUS     current\n    DESCRIPTION\n   \
    \         \"The SNMPv2 over CLNS transport domain.  The corresponding\n      \
    \      transport address is of type SnmpOSIAddress.\"\n    ::= { snmpDomains 2\
    \ }\n"
- title: snmpCONSDomain OBJECT-IDENTITY
  contents:
  - "snmpCONSDomain OBJECT-IDENTITY\n    STATUS     current\n    DESCRIPTION\n   \
    \         \"The SNMPv2 over CONS transport domain.  The corresponding\n      \
    \      transport address is of type SnmpOSIAddress.\"\n    ::= { snmpDomains 3\
    \ }\n"
- title: SnmpOSIAddress ::= TEXTUAL-CONVENTION
  contents:
  - "SnmpOSIAddress ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"*1x:/1x:\"\n    STATUS\
    \       current\n    DESCRIPTION\n            \"Represents an OSI transport-address:\n\
    \               octets   contents           encoding\n                  1    \
    \ length of NSAP     'n' as an unsigned-integer\n                            \
    \                  (either 0 or from 3 to 20)\n               2..(n+1) NSAP  \
    \              concrete binary representation\n               (n+2)..m TSEL  \
    \              string of (up to 64) octets\n            \"\n    SYNTAX       OCTET\
    \ STRING (SIZE (1 | 4..85))\n"
- title: -- SNMPv2 over DDP
  contents:
  - '-- SNMPv2 over DDP

    '
- title: snmpDDPDomain  OBJECT-IDENTITY
  contents:
  - "snmpDDPDomain  OBJECT-IDENTITY\n    STATUS     current\n    DESCRIPTION\n   \
    \         \"The SNMPv2 over DDP transport domain.  The corresponding\n       \
    \     transport address is of type SnmpNBPAddress.\"\n    ::= { snmpDomains 4\
    \ }\n"
- title: SnmpNBPAddress ::= TEXTUAL-CONVENTION
  contents:
  - "SnmpNBPAddress ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n\
    \            \"Represents an NBP name:\n                 octets        contents\
    \          encoding\n                    1          length of object  'n' as an\
    \ unsigned integer\n                  2..(n+1)     object            string of\
    \ (up to 32) octets\n                   n+2         length of type    'p' as an\
    \ unsigned integer\n              (n+3)..(n+2+p)   type              string of\
    \ (up to 32) octets\n                  n+3+p        length of zone    'q' as an\
    \ unsigned integer\n            (n+4+p)..(n+3+p+q) zone              string of\
    \ (up to 32) octets\n            For comparison purposes, strings are case-insensitive\
    \ All\n            strings may contain any octet other than 255 (hex ff).\"\n\
    \    SYNTAX       OCTET STRING (SIZE (3..99))\n"
- title: -- SNMPv2 over IPX
  contents:
  - '-- SNMPv2 over IPX

    '
- title: snmpIPXDomain  OBJECT-IDENTITY
  contents:
  - "snmpIPXDomain  OBJECT-IDENTITY\n    STATUS     current\n    DESCRIPTION\n   \
    \         \"The SNMPv2 over IPX transport domain.  The corresponding\n       \
    \     transport address is of type SnmpIPXAddress.\"\n    ::= { snmpDomains 5\
    \ }\n"
- title: SnmpIPXAddress ::= TEXTUAL-CONVENTION
  contents:
  - "SnmpIPXAddress ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"4x.1x:1x:1x:1x:1x:1x.2d\"\
    \n    STATUS       current\n    DESCRIPTION\n            \"Represents an IPX address:\n\
    \               octets   contents            encoding\n                1-4   \
    \  network-number      network-byte order\n                5-10    physical-address\
    \    network-byte order\n               11-12    socket-number       network-byte\
    \ order\n            \"\n    SYNTAX       OCTET STRING (SIZE (12))\n"
- title: -- for proxy to SNMPv1 (RFC 1157)
  contents:
  - '-- for proxy to SNMPv1 (RFC 1157)

    '
- title: rfc1157Proxy   OBJECT IDENTIFIER ::= { snmpProxys 1 }
  contents:
  - 'rfc1157Proxy   OBJECT IDENTIFIER ::= { snmpProxys 1 }

    '
- title: rfc1157Domain  OBJECT-IDENTITY
  contents:
  - "rfc1157Domain  OBJECT-IDENTITY\n    STATUS     current\n    DESCRIPTION\n   \
    \         \"The transport domain for SNMPv1 over UDP.  The\n            corresponding\
    \ transport address is of type SnmpUDPAddress.\"\n    ::= { rfc1157Proxy 1 }\n"
- title: --  ::= { rfc1157Proxy 2 }            this OID is obsolete
  contents:
  - '--  ::= { rfc1157Proxy 2 }            this OID is obsolete

    '
- title: END
  contents:
  - 'END

    '
- title: 3.  SNMPv2 over UDP
  contents:
  - "3.  SNMPv2 over UDP\n   This is the preferred transport mapping.\n"
- title: 3.1.  Serialization
  contents:
  - "3.1.  Serialization\n   Each instance of a message is serialized (i.e., encoded\
    \ according to\n   the convention of [1]) onto a single UDP[2] datagram, using\
    \ the\n   algorithm specified in Section 8.\n"
- title: 3.2.  Well-known Values
  contents:
  - "3.2.  Well-known Values\n   It is suggested that administrators configure their\
    \ SNMPv2 entities\n   acting in an agent role to listen on UDP port 161.  Further,\
    \ it is\n   suggested that notification sinks be configured to listen on UDP port\n\
    \   162.\n   When an SNMPv2 entity uses this transport mapping, it must be capable\n\
    \   of accepting messages that are at least 484 octets in size.\n   Implementation\
    \ of larger values is encouraged whenever possible.\n"
- title: 4.  SNMPv2 over OSI
  contents:
  - "4.  SNMPv2 over OSI\n   This is an optional transport mapping.\n"
- title: 4.1.  Serialization
  contents:
  - "4.1.  Serialization\n   Each instance of a message is serialized onto a single\
    \ TSDU [3,4] for\n   the OSI Connectionless-mode Transport Service (CLTS), using\
    \ the\n   algorithm specified in Section 8.\n"
- title: 4.2.  Well-known Values
  contents:
  - "4.2.  Well-known Values\n   It is suggested that administrators configure their\
    \ SNMPv2 entities\n   acting in an agent role to listen on transport selector\
    \ \"snmp-l\"\n   (which consists of six ASCII characters), when using a CL-mode\n\
    \   network service to realize the CLTS.  Further, it is suggested that\n   notification\
    \ sinks be configured to listen on transport selector\n   \"snmpt-l\" (which consists\
    \ of seven ASCII characters, six letters and\n   a hyphen) when using a CL-mode\
    \ network service to realize the CLTS.\n   Similarly, when using a CO-mode network\
    \ service to realize the CLTS,\n   the suggested transport selectors are \"snmp-o\"\
    \ and \"snmpt-o\", for\n   agent and notification sink, respectively.\n   When\
    \ an SNMPv2 entity uses this transport mapping, it must be capable\n   of accepting\
    \ messages that are at least 484 octets in size.\n   Implementation of larger\
    \ values is encouraged whenever possible.\n"
- title: 5.  SNMPv2 over DDP
  contents:
  - "5.  SNMPv2 over DDP\n   This is an optional transport mapping.\n"
- title: 5.1.  Serialization
  contents:
  - "5.1.  Serialization\n   Each instance of a message is serialized onto a single\
    \ DDP datagram\n   [5], using the algorithm specified in Section 8.\n"
- title: 5.2.  Well-known Values
  contents:
  - "5.2.  Well-known Values\n   SNMPv2 messages are sent using DDP protocol type\
    \ 8.  SNMPv2 entities\n   acting in an agent role listens on DDP socket number\
    \ 8, whilst\n   notification sinks listen on DDP socket number 9.\n   Administrators\
    \ must configure their SNMPv2 entities acting in an\n   agent role to use NBP\
    \ type \"SNMP Agent\" (which consists of ten ASCII\n   characters), whilst notification\
    \ sinks must be configured to use NBP\n   type \"SNMP Trap Handler\" (which consists\
    \ of seventeen ASCII\n   characters).\n   The NBP name for agents and notification\
    \ sinks should be stable - NBP\n   names should not change any more often than\
    \ the IP address of a\n   typical TCP/IP node.  It is suggested that the NBP name\
    \ be stored in\n   some form of stable storage.\n   When an SNMPv2 entity uses\
    \ this transport mapping, it must be capable\n   of accepting messages that are\
    \ at least 484 octets in size.\n   Implementation of larger values is encouraged\
    \ whenever possible.\n"
- title: 5.3.  Discussion of AppleTalk Addressing
  contents:
  - "5.3.  Discussion of AppleTalk Addressing\n   The AppleTalk protocol suite has\
    \ certain features not manifest in the\n   TCP/IP suite.  AppleTalk's naming strategy\
    \ and the dynamic nature of\n   address assignment can cause problems for SNMPv2\
    \ entities that wish\n   to manage AppleTalk networks.  TCP/IP nodes have an associated\
    \ IP\n   address which distinguishes each from the other.  In contrast,\n   AppleTalk\
    \ nodes generally have no such characteristic.  The network-\n   level address,\
    \ while often relatively stable, can change at every\n   reboot (or more frequently).\n\
    \   Thus, when SNMPv2 is mapped over DDP, nodes are identified by a\n   \"name\"\
    , rather than by an \"address\".  Hence, all AppleTalk nodes that\n   implement\
    \ this mapping are required to respond to NBP lookups and\n   confirms (e.g.,\
    \ implement the NBP protocol stub), which guarantees\n   that a mapping from NBP\
    \ name to DDP address will be possible.\n   In determining the SNMP identity to\
    \ register for an SNMPv2 entity, it\n   is suggested that the SNMP identity be\
    \ a name which is associated\n   with other network services offered by the machine.\n\
    \   NBP lookups, which are used to map NBP names into DDP addresses, can\n   cause\
    \ large amounts of network traffic as well as consume CPU\n   resources.  It is\
    \ also the case that the ability to perform an NBP\n   lookup is sensitive to\
    \ certain network disruptions (such as zone\n   table inconsistencies) which would\
    \ not prevent direct AppleTalk\n   communications between two SNMPv2 entities.\n\
    \   Thus, it is recommended that NBP lookups be used infrequently,\n   primarily\
    \ to create a cache of name-to-address mappings.  These\n   cached mappings should\
    \ then be used for any further SNMP traffic.  It\n   is recommended that SNMPv2\
    \ entities acting in a manager role should\n   maintain this cache between reboots.\
    \  This caching can help minimize\n   network traffic, reduce CPU load on the\
    \ network, and allow for (some\n   amount of) network trouble shooting when the\
    \ basic name-to-address\n   translation mechanism is broken.\n"
- title: 5.3.1.  How to Acquire NBP names
  contents:
  - "5.3.1.  How to Acquire NBP names\n   An SNMPv2 entity acting in a manager role\
    \ may have a pre-configured\n   list of names of \"known\" SNMPv2 entities acting\
    \ in an agent role.\n   Similarly, an SNMPv2 entity acting in a manager role might\
    \ interact\n   with an operator.  Finally, an SNMPv2 entity acting in a manager\
    \ role\n   might communicate with all SNMPv2 entities acting in an agent role\
    \ in\n   a set of zones or networks.\n"
- title: 5.3.2.  When to Turn NBP names into DDP addresses
  contents:
  - "5.3.2.  When to Turn NBP names into DDP addresses\n   When an SNMPv2 entity uses\
    \ a cache entry to address an SNMP packet,\n   it should attempt to confirm the\
    \ validity mapping, if the mapping\n   hasn't been confirmed within the last T1\
    \ seconds.  This cache entry\n   lifetime, T1, has a minimum, default value of\
    \ 60 seconds, and should\n   be configurable.\n   An SNMPv2 entity acting in a\
    \ manager role may decide to prime its\n   cache of names prior to actually communicating\
    \ with another SNMPv2\n   entity.  In general, it is expected that such an entity\
    \ may want to\n   keep certain mappings \"more current\" than other mappings,\
    \ e.g., those\n   nodes which represent the network infrastructure (e.g., routers)\
    \ may\n   be deemed \"more important\".\n   Note that an SNMPv2 entity acting\
    \ in a manager role should not prime\n   its entire cache upon initialization\
    \ - rather, it should attempt\n   resolutions over an extended period of time\
    \ (perhaps in some pre-\n   determined or configured priority order).  Each of\
    \ these resolutions\n   might, in fact, be a wildcard lookup in a given zone.\n\
    \   An SNMPv2 entity acting in an agent role must never prime its cache.\n   Such\
    \ an entity should do NBP lookups (or confirms) only when it needs\n   to send\
    \ an SNMP trap.  When generating a response, such an entity\n   does not need\
    \ to confirm a cache entry.\n"
- title: 5.3.3.  How to Turn NBP names into DDP addresses
  contents:
  - "5.3.3.  How to Turn NBP names into DDP addresses\n   If the only piece of information\
    \ available is the NBP name, then an\n   NBP lookup should be performed to turn\
    \ that name into a DDP address.\n   However, if there is a piece of stale information,\
    \ it can be used as\n   a hint to perform an NBP confirm (which sends a unicast\
    \ to the\n   network address which is presumed to be the target of the name\n\
    \   lookup) to see if the stale information is, in fact, still valid.\n   An NBP\
    \ name to DDP address mapping can also be confirmed implicitly\n   using only\
    \ SNMP transactions.  For example, an SNMPv2 entity acting\n   in a manager role\
    \ issuing a retrieval operation could also retrieve\n   the relevant objects from\
    \ the NBP group [6] for the SNMPv2 entity\n   acting in an agent role.  This information\
    \ can then be correlated\n   with the source DDP address of the response.\n"
- title: 5.3.4.  What if NBP is broken
  contents:
  - "5.3.4.  What if NBP is broken\n   Under some circumstances, there may be connectivity\
    \ between two\n   SNMPv2 entities, but the NBP mapping machinery may be broken,\
    \ e.g.,\n"
- title: o    the NBP FwdReq (forward NBP lookup onto local attached network)
  contents:
  - "o    the NBP FwdReq (forward NBP lookup onto local attached network)\n     mechanism\
    \ might be broken at a router on the other entity's\n     network; or,\n"
- title: o    the NBP BrRq (NBP broadcast request) mechanism might be broken
  contents:
  - "o    the NBP BrRq (NBP broadcast request) mechanism might be broken\n     at\
    \ a router on the entity's own network; or,\n"
- title: o    NBP might be broken on the other entity's node.
  contents:
  - "o    NBP might be broken on the other entity's node.\n   An SNMPv2 entity acting\
    \ in a manager role which is dedicated to\n   AppleTalk management might choose\
    \ to alleviate some of these failures\n   by directly implementing the router\
    \ portion of NBP.  For example,\n   such an entity might already know all the\
    \ zones on the AppleTalk\n   internet and the networks on which each zone appears.\
    \  Given an NBP\n   lookup which fails, the entity could send an NBP FwdReq to\
    \ the\n   network in which the agent was last located.  If that failed, the\n\
    \   station could then send an NBP LkUp (NBP lookup packet) as a directed\n  \
    \ (DDP) multicast to each network number on that network.  Of the above\n   (single)\
    \ failures, this combined approach will solve the case where\n   either the local\
    \ router's BrRq-to-FwdReq mechanism is broken or the\n   remote router's FwdReq-to-LkUp\
    \ mechanism is broken.\n"
- title: 6.  SNMPv2 over IPX
  contents:
  - "6.  SNMPv2 over IPX\n   This is an optional transport mapping.\n"
- title: 6.1.  Serialization
  contents:
  - "6.1.  Serialization\n   Each instance of a message is serialized onto a single\
    \ IPX datagram\n   [7], using the algorithm specified in Section 8.\n"
- title: 6.2.  Well-known Values
  contents:
  - "6.2.  Well-known Values\n   SNMPv2 messages are sent using IPX packet type 4\
    \ (i.e., Packet\n   Exchange Protocol).\n   It is suggested that administrators\
    \ configure their SNMPv2 entities\n   acting in an agent role to listen on IPX\
    \ socket 36879 (900f\n   hexadecimal).  Further, it is suggested that notification\
    \ sinks be\n   configured to listen on IPX socket 36880 (9010 hexadecimal)\n \
    \  When an SNMPv2 entity uses this transport mapping, it must be capable\n   of\
    \ accepting messages that are at least 546 octets in size.\n   Implementation\
    \ of larger values is encouraged whenever possible.\n"
- title: 7.  Proxy to SNMPv1
  contents:
  - "7.  Proxy to SNMPv1\n   In order to provide proxy to SNMPv1 [8], it may be useful\
    \ to define a\n   transport domain, rfc1157Domain, which indicates the transport\n\
    \   mapping for SNMP messages as defined in RFC 1157.  Section 3.1 of [9]\n  \
    \ specifies the behavior of the proxy agent.\n"
- title: 8.  Serialization using the Basic Encoding Rules
  contents:
  - "8.  Serialization using the Basic Encoding Rules\n   When the Basic Encoding\
    \ Rules [10] are used for serialization:\n   (1)  When encoding the length field,\
    \ only the definite form is used; use\n        of the indefinite form encoding\
    \ is prohibited.  Note that when\n        using the definite-long form, it is\
    \ permissible to use more than\n        the minimum number of length octets necessary\
    \ to encode the length\n        field.\n   (2)  When encoding the value field,\
    \ the primitive form shall be used for\n        all simple types, i.e., INTEGER,\
    \ OCTET STRING, and OBJECT\n        IDENTIFIER (either IMPLICIT or explicit).\
    \  The constructed form of\n        encoding shall be used only for structured\
    \ types, i.e., a SEQUENCE\n        or an IMPLICIT SEQUENCE.\n   (3)  When encoding\
    \ an object whose syntax is described using the BITS\n        construct, the value\
    \ is encoded as an OCTET STRING, in which all\n        the named bits in (the\
    \ definition of) the bitstring, commencing\n        with the first bit and proceeding\
    \ to the last bit, are placed in\n        bits 8 to 1 of the first octet, followed\
    \ by bits 8 to 1 of each\n        subsequent octet in turn, followed by as many\
    \ bits as are needed of\n        the final subsequent octet, commencing with bit\
    \ 8.  Remaining bits,\n        if any, of the final octet are set to zero on generation\
    \ and\n        ignored on receipt.\n   These restrictions apply to all aspects\
    \ of ASN.1 encoding, including\n   the message wrappers, protocol data units,\
    \ and the data objects they\n   contain.\n"
- title: 8.1.  Usage Example
  contents:
  - "8.1.  Usage Example\n   As an example of applying the Basic Encoding Rules, suppose\
    \ one\n   wanted to encode an instance of the GetBulkRequest-PDU [1]:\n     [5]\
    \ IMPLICIT SEQUENCE {\n             request-id      1414684022,\n            \
    \ non-repeaters   1,\n             max-repetitions 2,\n             variable-bindings\
    \ {\n                 { name sysUpTime,\n                   value { unspecified\
    \ NULL } },\n                 { name ipNetToMediaPhysAddress,\n              \
    \     value { unspecified NULL } },\n                 { name ipNetToMediaType,\n\
    \                   value { unspecified NULL } }\n             }\n         }\n"
- title: 'Applying the BER, this would be encoded (in hexadecimal) as:'
  contents:
  - 'Applying the BER, this would be encoded (in hexadecimal) as:

    '
- title: '[5] IMPLICIT SEQUENCE          a5 82 00 39'
  contents:
  - "[5] IMPLICIT SEQUENCE          a5 82 00 39\n    INTEGER                    02\
    \ 04 52 54 5d 76\n    INTEGER                    02 01 01\n    INTEGER       \
    \             02 01 02\n    SEQUENCE                   30 2b\n        SEQUENCE\
    \               30 0b\n            OBJECT IDENTIFIER  06 07 2b 06 01 02 01 01\
    \ 03\n            NULL               05 00\n        SEQUENCE               30\
    \ 0d\n            OBJECT IDENTIFIER  06 09 2b 06 01 02 01 04 16 01 02\n      \
    \      NULL               05 00\n        SEQUENCE               30 0d\n      \
    \      OBJECT IDENTIFIER  06 09 2b 06 01 02 01 04 16 01 04\n            NULL \
    \              05 00\n   Note that the initial SEQUENCE is not encoded using the\
    \ minimum\n   number of length octets.  (The first octet of the length, 82,\n\
    \   indicates that the length of the content is encoded in the next two\n   octets.)\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 10.  Editor's Address
  contents:
  - "10.  Editor's Address\n   Keith McCloghrie\n   Cisco Systems, Inc.\n   170 West\
    \ Tasman Drive\n   San Jose, CA  95134-1706\n   US\n   Phone: +1 408 526 5260\n\
    \   EMail: kzm@cisco.com\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   This document is the result of significant work by\
    \ the four major\n   contributors:\n   Jeffrey D. Case (SNMP Research, case@snmp.com)\n\
    \   Keith McCloghrie (Cisco Systems, kzm@cisco.com)\n   Marshall T. Rose (Dover\
    \ Beach Consulting, mrose@dbc.mtview.ca.us)\n   Steven Waldbusser (International\
    \ Network Services, stevew@uni.ins.com)\n   In addition, the contributions of\
    \ the SNMPv2 Working Group are\n   acknowledged.  In particular, a special thanks\
    \ is extended for the\n   contributions of:\n     Alexander I. Alten (Novell)\n\
    \     Dave Arneson (Cabletron)\n     Uri Blumenthal (IBM)\n     Doug Book (Chipcom)\n\
    \     Kim Curran (Bell-Northern Research)\n     Jim Galvin (Trusted Information\
    \ Systems)\n     Maria Greene (Ascom Timeplex)\n     Iain Hanson (Digital)\n \
    \    Dave Harrington (Cabletron)\n     Nguyen Hien (IBM)\n     Jeff Johnson (Cisco\
    \ Systems)\n     Michael Kornegay (Object Quest)\n     Deirdre Kostick (AT&T Bell\
    \ Labs)\n     David Levi (SNMP Research)\n     Daniel Mahoney (Cabletron)\n  \
    \   Bob Natale (ACE*COMM)\n     Brian O'Keefe (Hewlett Packard)\n     Andrew Pearson\
    \ (SNMP Research)\n     Dave Perkins (Peer Networks)\n     Randy Presuhn (Peer\
    \ Networks)\n     Aleksey Romanov (Quality Quorum)\n     Shawn Routhier (Epilogue)\n\
    \     Jon Saperia (BGS Systems)\n     Bob Stewart (Cisco Systems, bstewart@cisco.com),\
    \ chair\n     Kaj Tesink (Bellcore)\n     Glenn Waters (Bell-Northern Research)\n\
    \     Bert Wijnen (IBM)\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: '[1]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[1]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Protocol Operations for Version 2 of the Simple\n     Network Management Protocol\
    \ (SNMPv2)\", RFC 1905, January 1996.\n"
- title: '[2]  Postel, J., "User Datagram Protocol", STD 6, RFC 768,'
  contents:
  - "[2]  Postel, J., \"User Datagram Protocol\", STD 6, RFC 768,\n     USC/Information\
    \ Sciences Institute, August 1980.\n"
- title: '[3]  Information processing systems - Open Systems Interconnection -'
  contents:
  - "[3]  Information processing systems - Open Systems Interconnection -\n     Transport\
    \ Service Definition, International Organization for\n     Standardization.  International\
    \ Standard 8072, (June, 1986).\n"
- title: '[4]  Information processing systems - Open Systems Interconnection -'
  contents:
  - "[4]  Information processing systems - Open Systems Interconnection -\n     Transport\
    \ Service Definition - Addendum 1: Connectionless-mode\n     Transmission, International\
    \ Organization for Standardization.\n     International Standard 8072/AD 1, (December,\
    \ 1986).\n"
- title: '[5]  G. Sidhu, R. Andrews, A. Oppenheimer, Inside AppleTalk (second'
  contents:
  - "[5]  G. Sidhu, R. Andrews, A. Oppenheimer, Inside AppleTalk (second\n     edition).\
    \  Addison-Wesley, 1990.\n"
- title: '[6]  Waldbusser, S., "AppleTalk Management Information Base", RFC 1243,'
  contents:
  - "[6]  Waldbusser, S., \"AppleTalk Management Information Base\", RFC 1243,\n \
    \    Carnegie Mellon University, July 1991.\n"
- title: '[7]  Network System Technical Interface Overview.  Novell, Inc, (June,'
  contents:
  - "[7]  Network System Technical Interface Overview.  Novell, Inc, (June,\n    \
    \ 1989).\n"
- title: '[8]  Case, J., Fedor, M., Schoffstall, M., and J. Davin, "Simple Network'
  contents:
  - "[8]  Case, J., Fedor, M., Schoffstall, M., and J. Davin, \"Simple Network\n \
    \    Management Protocol\", STD 15, RFC 1157, SNMP Research, Performance\n   \
    \  Systems International, MIT Laboratory for Computer Science, May\n     1990.\n"
- title: '[9]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[9]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Coexistence between Version 1 and Version 2 of the\n     Internet-standard\
    \ Network Management Framework\", RFC 1908,\n     January 1996.\n"
- title: '[10] Information processing systems - Open Systems Interconnection -'
  contents:
  - "[10] Information processing systems - Open Systems Interconnection -\n     Specification\
    \ of Basic Encoding Rules for Abstract Syntax Notation\n     One (ASN.1), International\
    \ Organization for Standardization.\n     International Standard 8825, December\
    \ 1987.\n"
