- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                     J. Chroboczek
  contents:
  - "Independent Submission                                     J. Chroboczek\n  \
    \         Extension Mechanism for the Babel Routing Protocol\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the encoding of extensions to the Babel routing\n\
    \   protocol, as specified in RFC 6126.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This is a contribution to the RFC Series, independently\n   of any other RFC\
    \ stream.  The RFC Editor has chosen to publish this\n   document at its discretion\
    \ and makes no statement about its value for\n   implementation or deployment.\
    \  Documents approved for publication by\n   the RFC Editor are not a candidate\
    \ for any level of Internet\n   Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7557.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Mechanisms for Extending the Babel Protocol . . . . .\
    \ . . . .   3\n     2.1.  New Versions of the Babel Protocol  . . . . . . . .\
    \ . . .   3\n     2.2.  New TLVs  . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   3\n     2.3.  Sub-TLVs  . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   4\n     2.4.  The Flags Field . . . . . . . . . . . . . . . . . . . . .\
    \   4\n     2.5.  Packet Trailer  . . . . . . . . . . . . . . . . . . . . .  \
    \ 5\n   3.  Format of Sub-TLVs  . . . . . . . . . . . . . . . . . . . . .   5\n\
    \     3.1.  Sub-TLVs Specified in This Document . . . . . . . . . . .   5\n  \
    \   3.2.  Unknown Sub-TLVs  . . . . . . . . . . . . . . . . . . . .   6\n   4.\
    \  Choosing between Extension Mechanisms . . . . . . . . . . . .   6\n   5.  IANA\
    \ Considerations . . . . . . . . . . . . . . . . . . . . .   7\n   6.  Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .   9\n   7.  References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  10\n     7.1.  Normative\
    \ References  . . . . . . . . . . . . . . . . . .  10\n     7.2.  Informative\
    \ References  . . . . . . . . . . . . . . . . .  10\n   Acknowledgments . . .\
    \ . . . . . . . . . . . . . . . . . . . . . .  10\n   Author's Address  . . .\
    \ . . . . . . . . . . . . . . . . . . . . .  11\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A Babel packet [RFC6126] contains a header followed by a\
    \ sequence of\n   TLVs, each of which is a sequence of octets having an explicit\
    \ type\n   and length.  The original Babel protocol has the following provisions\n\
    \   for including extension data:\n   o  A Babel packet with a version number\
    \ different from 2 MUST be\n      silently ignored ([RFC6126], Section 4.2).\n\
    \   o  An unknown TLV MUST be silently ignored ([RFC6126], Section 4.3).\n   o\
    \  Except for Pad1 and PadN, all TLVs are self-terminating, and any\n      extra\
    \ data included in a TLV MUST be silently ignored ([RFC6126],\n      Section 4.2).\n\
    \   o  The Flags field of the Update TLV contains 6 undefined bits that\n    \
    \  MUST be silently ignored ([RFC6126], Section 4.4.9).\n   o  Any data following\
    \ the last TLV of a Babel packet MUST be silently\n      ignored ([RFC6126], Section\
    \ 4.2).\n   Each of these provisions provides a place to store data needed by\n\
    \   extensions of the Babel protocol.  However, in the absence of any\n   further\
    \ conventions, independently developed extensions to the Babel\n   protocol might\
    \ make conflicting uses of the available space, and\n   therefore lead to implementations\
    \ that would fail to interoperate.\n   This document formalises a set of rules\
    \ for extending the Babel\n   protocol that are designed to ensure that no such\
    \ incompatibilities\n   arise, and that are currently respected by a number of\
    \ deployed\n   extensions.\n   In the rest of this document, we use the term \"\
    original protocol\" for\n   the protocol defined in [RFC6126], and \"extended\
    \ protocol\" for any\n   extension of the Babel protocol that follows the rules\
    \ set out in\n   this document.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in\n   this document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Mechanisms for Extending the Babel Protocol
  contents:
  - "2.  Mechanisms for Extending the Babel Protocol\n   This section describes each\
    \ of the mechanisms available for extending\n   the Babel protocol.\n"
- title: 2.1.  New Versions of the Babel Protocol
  contents:
  - "2.1.  New Versions of the Babel Protocol\n   The header of a Babel packet contains\
    \ an eight-bit protocol version.\n   The current version of the Babel protocol\
    \ is version 2; any packets\n   containing a version number different from 2 MUST\
    \ be silently\n   ignored.\n   Versions 0 and 1 were earlier experimental versions\
    \ of the Babel\n   protocol that have seen some modest deployment; these version\
    \ numbers\n   SHOULD NOT be reused by future versions of the Babel protocol.\n\
    \   Version numbers larger than 2 might be used by a future incompatible\n   protocol.\n"
- title: 2.2.  New TLVs
  contents:
  - "2.2.  New TLVs\n   An extension may carry its data in a new TLV type.  Such new\
    \ TLVs\n   will be silently ignored by implementations of the original Babel\n\
    \   protocol, as well as by other extended implementations of the Babel\n   protocol,\
    \ as long as the TLV types do not collide.\n   All new TLVs MUST have the format\
    \ defined in [RFC6126], Section 4.3.\n   New TLVs SHOULD be self-terminating,\
    \ in the sense defined in the next\n   section, and any data found after the main\
    \ data section of the TLV\n   SHOULD be treated as a series of sub-TLVs.\n   TLV\
    \ types 224 through 254 are reserved for Experimental Use\n   [RFC3692].  TLV\
    \ type 255 is reserved for expansion of the TLV type\n   space, in the unlikely\
    \ event that eight bits turn out not to be\n   enough.\n"
- title: 2.3.  Sub-TLVs
  contents:
  - "2.3.  Sub-TLVs\n   With the exception of the Pad1 TLV, all Babel TLVs carry an\
    \ explicit\n   length.  With the exception of Pad1 and PadN, all TLVs defined\
    \ by the\n   original protocol are self-terminating, in the sense that the length\n\
    \   of the meaningful data that they contain (the \"natural length\") can\n  \
    \ be determined without reference to the explicitly encoded length.  In\n   some\
    \ cases, the natural length is trivial to determine: for example,\n   a HELLO\
    \ TLV always has a natural length of 2 (4 including the Type\n   and Length fields).\
    \  In other cases, determining the natural length\n   is not that easy, but this\
    \ needs to be done anyway by an\n   implementation that interprets the given TLV.\
    \  For example, the\n   natural length of an Update TLV depends on both the prefix\
    \ length and\n   the amount of prefix compression being performed.\n   If the\
    \ explicit length of a TLV defined by the original protocol is\n   larger than\
    \ its natural length, the extra space present in the TLV is\n   silently ignored\
    \ by an implementation of the original protocol;\n   extended implementations\
    \ MAY use it to store arbitrary data and\n   SHOULD structure the additional data\
    \ as a sequence of sub-TLVs.\n   Unlike TLVs, the sub-TLVs themselves need not\
    \ be self-terminating.\n   An extension MAY be assigned one or more sub-TLV types.\
    \  Sub-TLV\n   types are assigned independently from TLV types: the same numeric\n\
    \   type can be assigned to a TLV and a sub-TLV.  Sub-TLV types are\n   assigned\
    \ globally: once an extension is assigned a given sub-TLV\n   number, it MAY use\
    \ this number within any TLV.  However, the\n   interpretation of a given sub-TLV\
    \ type can depend on which particular\n   TLV it is embedded within.\n   Sub-TLV\
    \ types 224 through 254 are reserved for Experimental Use\n   [RFC3692].  TLV\
    \ type 255 is reserved for expansion of the sub-TLV\n   type space, in the unlikely\
    \ event that eight bits turn out not to be\n   enough.  The format of sub-TLVs\
    \ is defined in Section 3 below.\n"
- title: 2.4.  The Flags Field
  contents:
  - "2.4.  The Flags Field\n   The Flags field is an eight-bit field in the Update\
    \ TLV.  Bits 0 and\n   1 (the bits with values 80 and 40 hexadecimal) are defined\
    \ by the\n   original protocol and MUST be recognised and used by every\n   implementation.\
    \  The remaining six bits are not currently used and\n   are silently ignored\
    \ by implementations of the original protocol.\n   Due to the small size of the\
    \ Flags field, it is NOT RECOMMENDED that\n   one or more bits be assigned to\
    \ an extension; a sub-TLV SHOULD be\n   assigned instead.  An implementation MUST\
    \ ignore any bits in the\n   Flags field that it does not know about and MUST\
    \ send them as zero.\n"
- title: 2.5.  Packet Trailer
  contents:
  - "2.5.  Packet Trailer\n   A Babel packet carries an explicit length in its header.\
    \  A Babel\n   packet is carried by a UDP datagram, which in turn contains an\n\
    \   explicit length in its header.  It is possible for a UDP datagram\n   carrying\
    \ a Babel packet to be larger than the size of the Babel\n   packet.  In that\
    \ case, the extra space after the Babel packet, known\n   as the packet trailer,\
    \ is silently ignored by an implementation of\n   the original protocol.\n   The\
    \ packet trailer was originally intended to be used as a\n   cryptographic trailer.\
    \  However, the authentication extension to\n   Babel [RFC7298] ended up using\
    \ a pair of new TLVs, and no currently\n   deployed extension of Babel uses the\
    \ packet trailer.  The format and\n   purpose of the packet trailer is therefore\
    \ currently left undefined.\n"
- title: 3.  Format of Sub-TLVs
  contents:
  - "3.  Format of Sub-TLVs\n   A sub-TLV has exactly the same structure as a TLV.\
    \  Except for Pad1\n   (Section 3.1.1), all sub-TLVs have the following structure:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |     Body...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\
    \   Fields:\n   Type      The type of the sub-TLV.\n   Length    The length of\
    \ the body, in octets, exclusive of the Type\n             and Length fields.\n\
    \   Body      The sub-TLV body, the interpretation of which depends on\n     \
    \        both the type of the sub-TLV and the type of the TLV within\n       \
    \      which it is embedded.\n"
- title: 3.1.  Sub-TLVs Specified in This Document
  contents:
  - "3.1.  Sub-TLVs Specified in This Document\n   This document defines two types\
    \ of sub-TLVs, Pad1 and PadN.  These\n   two sub-TLVs MUST be correctly parsed\
    \ and ignored by any extended\n   implementation of the Babel protocol that uses\
    \ sub-TLVs.\n"
- title: 3.1.1.  Pad1
  contents:
  - "3.1.1.  Pad1\n    0\n    0 1 2 3 4 5 6 7\n   +-+-+-+-+-+-+-+-+\n   |   Type =\
    \ 0    |\n   +-+-+-+-+-+-+-+-+\n   Fields:\n   Type      Set to 0 to indicate\
    \ a Pad1 sub-TLV.\n   This sub-TLV is silently ignored on reception.\n"
- title: 3.1.2.  PadN
  contents:
  - "3.1.2.  PadN\n    0                   1                   2                 \
    \  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |    Type\
    \ = 1   |    Length     |      MBZ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\
    \   Fields:\n   Type      Set to 1 to indicate a PadN sub-TLV.\n   Length    The\
    \ length of the body, in octets, exclusive of the Type\n             and Length\
    \ fields.\n   MBZ       Set to 0 on transmission.\n   This sub-TLV is silently\
    \ ignored on reception.\n"
- title: 3.2.  Unknown Sub-TLVs
  contents:
  - "3.2.  Unknown Sub-TLVs\n   Any unknown sub-TLV MUST be silently ignored by an\
    \ extended\n   implementation that uses sub-TLVs.\n"
- title: 4.  Choosing between Extension Mechanisms
  contents:
  - "4.  Choosing between Extension Mechanisms\n   New versions of the Babel protocol\
    \ should only be defined if the new\n   version is not backwards compatible with\
    \ the original protocol.\n   In many cases, an extension could be implemented\
    \ either by defining a\n   new TLV or by adding a new sub-TLV to an existing TLV.\
    \  For example,\n   an extension whose purpose is to attach additional data to\
    \ route\n   updates can be implemented either by creating a new \"enriched\" Update\n\
    \   TLV or by adding a sub-TLV to the Update TLV.\n   The two encodings are treated\
    \ differently by implementations that do\n   not understand the extension.  In\
    \ the case of a new TLV, the whole\n   unknown TLV is ignored by an implementation\
    \ of the original protocol,\n   while in the case of a new sub-TLV, the TLV is\
    \ parsed and acted upon,\n   and the unknown sub-TLV is silently ignored.  Therefore,\
    \ a sub-TLV\n   should be used by extensions that extend the Update in a compatible\n\
    \   manner (the extension data may be silently ignored), while a new TLV\n   must\
    \ be used by extensions that make incompatible extensions to the\n   meaning of\
    \ the TLV (the whole TLV must be thrown away if the\n   extension data is not\
    \ understood).\n   Using a new bit in the Flags field is equivalent to defining\
    \ a new\n   sub-TLV while using less space in the Babel packet.  Due to the\n\
    \   limited Flags space, and the doubtful space savings, we do not\n   recommend\
    \ the use of bits in the Flags field -- a new sub-TLV should\n   be used instead.\n\
    \   We refrain from making any recommendations about the usage of the\n   packet\
    \ trailer due to the lack of implementation experience.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   IANA has created three new registries, called \"\
    Babel TLV Types\",\n   \"Babel Sub-TLV Types\", and \"Babel Flags Values\".  The\
    \ allocation\n   policy for each of these registries is Specification Required\n\
    \   [RFC5226].\n   The initial values in the \"Babel TLV Types\" registry are\
    \ as follows:\n   +---------+-----------------------------------------+---------------+\n\
    \   | Type    | Name                                    | Reference     |\n  \
    \ +---------+-----------------------------------------+---------------+\n   |\
    \ 0       | Pad1                                    | [RFC6126]     |\n   |  \
    \       |                                         |               |\n   | 1  \
    \     | PadN                                    | [RFC6126]     |\n   |      \
    \   |                                         |               |\n   | 2      \
    \ | Acknowledgment Request                  | [RFC6126]     |\n   |         |\
    \                                         |               |\n   | 3       | Acknowledgment\
    \                          | [RFC6126]     |\n   |         |                 \
    \                        |               |\n   | 4       | Hello             \
    \                      | [RFC6126]     |\n   |         |                     \
    \                    |               |\n   | 5       | IHU                   \
    \                  | [RFC6126]     |\n   |         |                         \
    \                |               |\n   | 6       | Router-Id                 \
    \              | [RFC6126]     |\n   |         |                             \
    \            |               |\n   | 7       | Next Hop                      \
    \          | [RFC6126]     |\n   |         |                                 \
    \        |               |\n   | 8       | Update                            \
    \      | [RFC6126]     |\n   |         |                                     \
    \    |               |\n   | 9       | Route Request                         \
    \  | [RFC6126]     |\n   |         |                                         |\
    \               |\n   | 10      | Seqno Request                           | [RFC6126]\
    \     |\n   |         |                                         |            \
    \   |\n   | 11      | TS/PC                                   | [RFC7298]    \
    \ |\n   |         |                                         |               |\n\
    \   | 12      | HMAC                                    | [RFC7298]     |\n  \
    \ |         |                                         |               |\n   |\
    \ 13      | Source-specific Update                  | [BABEL-SS]    |\n   |  \
    \       |                                         |               |\n   | 14 \
    \     | Source-specific Request                 | [BABEL-SS]    |\n   |      \
    \   |                                         |               |\n   | 15     \
    \ | Source-specific Seqno Request           | [BABEL-SS]    |\n   |         |\
    \                                         |               |\n   | 224-254 | Reserved\
    \ for Experimental Use           | this document |\n   |         |           \
    \                              |               |\n   | 255     | Reserved for\
    \ expansion of the type      | this document |\n   |         | space         \
    \                          |               |\n   +---------+-----------------------------------------+---------------+\n\
    \   The initial values in the \"Babel Sub-TLV Types\" registry are as\n   follows:\n\
    \   +---------+-----------------------------------------+---------------+\n  \
    \ | Type    | Name                                    | Reference     |\n   +---------+-----------------------------------------+---------------+\n\
    \   | 0       | Pad1                                    | this document |\n  \
    \ |         |                                         |               |\n   |\
    \ 1       | PadN                                    | this document |\n   |  \
    \       |                                         |               |\n   | 2  \
    \     | Diversity                               | [BABEL-DIV]   |\n   |      \
    \   |                                         |               |\n   | 3      \
    \ | Timestamp                               | [BABEL-RTT]   |\n   |         |\
    \                                         |               |\n   | 224-254 | Reserved\
    \ for Experimental Use           | this document |\n   |         |           \
    \                              |               |\n   | 255     | Reserved for\
    \ expansion of the type      | this document |\n   |         | space         \
    \                          |               |\n   +---------+-----------------------------------------+---------------+\n\
    \   The initial values in the \"Babel Flags Values\" registry are as\n   follows:\n\
    \                  +-----+-------------------+-----------+\n                 \
    \ | Bit | Name              | Reference |\n                  +-----+-------------------+-----------+\n\
    \                  | 0   | Default prefix    | [RFC6126] |\n                 \
    \ |     |                   |           |\n                  | 1   | Default router-id\
    \ | [RFC6126] |\n                  |     |                   |           |\n \
    \                 | 2-7 | Unassigned        |           |\n                  +-----+-------------------+-----------+\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document specifies the structure of fields\
    \ that are already\n   present in the original Babel protocol and does not, by\
    \ itself, raise\n   any new security considerations.  Specific extensions may\
    \ change the\n   security properties of the protocol, for example, by adding security\n\
    \   mechanisms [RFC7298] or by enabling new kinds of attack.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,\n \
    \              DOI 10.17487/RFC2119, March 1997,\n               <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3692]   Narten, T., \"Assigning Experimental and Testing Numbers\n   \
    \            Considered Useful\", BCP 82, RFC 3692,\n               DOI 10.17487/RFC3692,\
    \ January 2004,\n               <http://www.rfc-editor.org/info/rfc3692>.\n  \
    \ [RFC5226]   Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n    \
    \           IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n       \
    \        DOI 10.17487/RFC5226, May 2008,\n               <http://www.rfc-editor.org/info/rfc5226>.\n\
    \   [RFC6126]   Chroboczek, J., \"The Babel Routing Protocol\", RFC 6126,\n  \
    \             DOI 10.17487/RFC6126, April 2011,\n               <http://www.rfc-editor.org/info/rfc6126>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [BABEL-DIV] Chroboczek, J., \"Diversity Routing\
    \ for the Babel Routing\n               Protocol\", Work in Progress, draft-chroboczek-babel-\n\
    \               diversity-routing-00, July 2014.\n   [BABEL-RTT] Jonglez, B. and\
    \ J. Chroboczek, \"Delay-based Metric\n               Extension for the Babel\
    \ Routing Protocol\", Work in\n               Progress, draft-jonglez-babel-rtt-extension-01,\
    \ May 2015.\n   [BABEL-SS]  Boutier, M. and J. Chroboczek, \"Source-Specific Routing\n\
    \               in Babel\", Work in Progress, draft-boutier-babel-\n         \
    \      source-specific-01, May 2015.\n   [RFC7298]   Ovsienko, D., \"Babel Hashed\
    \ Message Authentication Code\n               (HMAC) Cryptographic Authentication\"\
    , RFC 7298,\n               DOI 10.17487/RFC7298, July 2014,\n               <http://www.rfc-editor.org/info/rfc7298>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   I am grateful to Denis Ovsienko and Gabriel Kerneis for their\n\
    \   feedback on previous draft versions of this document.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Juliusz Chroboczek\n   PPS, University of Paris-Diderot\n\
    \   Case 7014\n   75205 Paris Cedex 13\n   France\n   EMail: jch@pps.univ-paris-diderot.fr\n"
