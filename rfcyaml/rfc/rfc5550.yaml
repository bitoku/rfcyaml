- contents:
  - "                         The Internet Email to\n        Support Diverse Service
    Environments (Lemonade) Profile\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes a profile (a set of required extensions,\n
    \  restrictions, and usage modes), dubbed Lemonade, of the IMAP, mail\n   submission,
    and Sieve protocols.  This profile allows clients\n   (especially those that are
    constrained in memory, bandwidth,\n   processing power, or other areas) to efficiently
    use IMAP and\n   Submission to access and submit mail.  This includes the ability
    to\n   forward received mail without needing to download and upload the\n   mail,
    to optimize submission, and to efficiently resynchronize in\n   case of loss of
    connectivity with the server.\n   The Lemonade Profile relies upon several extensions
    to IMAP, Sieve,\n   and Mail Submission protocols.  The document also defines
    a new IMAP\n   extension and registers several new IMAP keywords.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n   This document may contain material
    from IETF Documents or IETF\n   Contributions published or made publicly available
    before November\n   10, 2008.  The person(s) controlling the copyright in some
    of this\n   material may not have granted the IETF Trust the right to allow\n
    \  modifications of such material outside the IETF Standards Process.\n   Without
    obtaining an adequate license from the person(s) controlling\n   the copyright
    in such materials, this document may not be modified\n   outside the IETF Standards
    Process, and derivative works of it may\n   not be created outside the IETF Standards
    Process, except to format\n   it for publication as an RFC or to translate it
    into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Conventions Used in This Document ...............................4\n   3.
    Summary of the Required Support .................................4\n      3.1.
    Lemonade Submission Servers ................................4\n      3.2. Lemonade
    Message Stores ....................................5\n      3.3. Lemonade Message
    Delivery Agents ...........................7\n   4. Lemonade Submission Servers
    .....................................7\n      4.1. Forward without Download ...................................7\n
    \     4.2. Pipelining .................................................8\n      4.3.
    DSN Support ................................................8\n      4.4. Message
    Size Declaration ...................................8\n      4.5. Enhanced Status
    Code Support ...............................8\n      4.6. Encryption and Compression
    .................................8\n   5. Lemonade Message Stores .........................................9\n
    \     5.1. Quick Resynchronization ....................................9\n      5.2.
    Message Part Handling ......................................9\n      5.3. Compression
    ...............................................10\n      5.4. Notifications .............................................10\n
    \     5.5. Searching and View Filters ................................12\n      5.6.
    Mailbox Handling ..........................................12\n      5.7. Forward
    without Download ..................................12\n      5.8. Additional IMAP
    Extensions ................................13\n      5.9. Registration of $Forwarded
    IMAP Keyword ...................13\n      5.10. Registration of $SubmitPending
    and $Submitted\n            IMAP Keywords ............................................13\n
    \     5.11. Related IMAP Extensions ..................................14\n   6.
    Lemonade Message Delivery Agents ...............................14\n   7. Lemonade
    Message User Agents ...................................15\n   8. Forward without
    Download .......................................16\n      8.1. Motivations ...............................................16\n
    \     8.2. Message Sending Overview ..................................16\n      8.3.
    Traditional Strategy ......................................17\n      8.4. A New
    Strategy ............................................18\n      8.5. Security Considerations
    for Pawn-Tickets ..................27\n      8.6. Copies of Sent Messages: The
    fcc Problem ..................27\n   9. Deployment Considerations ......................................28\n
    \  10. Security Considerations .......................................28\n      10.1.
    Confidentiality Protection of Submitted Messages .........28\n      10.2. TLS
    ......................................................29\n      10.3. Additional
    Extensions and Deployment Models ..............29\n   11. IANA Considerations
    ...........................................30\n   12. Changes since RFC 4550 ........................................30\n
    \  13. Acknowledgements ..............................................31\n   14.
    References ....................................................31\n      14.1.
    Normative References .....................................31\n      14.2. Informative
    References ...................................35\n   Appendix A.  Errata  ..............................................37\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Lemonade Profile, or simply Lemonade, provides enhancements
    to\n   Internet email to support diverse service environments.  Lemonade\n   mail
    servers provide both a Lemonade Submission Server and a Lemonade\n   Message Store,
    which are based on the existing [SUBMIT] and [IMAP]\n   protocols, respectively.
    \ They MAY also include a Lemonade Message\n   Delivery Agent, which provides
    delivery-time filtering services based\n   on [SIEVE].\n   This document describes
    the Lemonade Profile that includes:\n   o  General common enhancements to Internet
    Mail, described in 5 and\n      4.\n   o  \"Forward without download\" that describes
    exchanges between\n      Lemonade clients and servers to allow submitting new
    email\n      messages incorporating content that resides on locations external\n
    \     to the client, described in Section 8.\n   o  Quick mailbox resynchronization,
    described in Section 5.1.\n   o  Extensions to support more precise, and broader,
    notifications\n      from the store in support of notifications and view filters,\n
    \     described in 5.4.1 and 5.5.\n   o  Delivery-time filtering in support of
    typical mail management use\n      cases, as described in Section 3.3.\n   The
    LEMONADE WG used the architecture shown in [LEMONADE-ARCH] to\n   develop the
    Lemonade Profile.\n   It is intended that the Lemonade Profile support realizations
    of the\n   OMA's mobile email enabler (MEM) (see [OMA-MEM-REQ] and\n   [OMA-MEM-ARCH])
    using Internet Mail protocols defined by the IETF.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   In examples, \"M:\", \"I:\", and \"S:\"
    indicate lines sent by the client\n   Message User Agent, IMAP email server, and
    SMTP submit server,\n   respectively.\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in [KEYWORDS].\n   Other capitalized words are typically names of extensions or
    commands\n   -- these are uppercased for clarity only, and are case-insensitive.\n
    \  This document uses terminology defined in [RFC5598].  See [RFC5598]\n   for
    further details on Email Architecture.\n   All examples in this document are optimized
    for Lemonade use and\n   might not represent examples of proper protocol usage
    for a general\n   use Submit/IMAP client.  In particular, examples assume that
    Submit\n   and IMAP servers support all Lemonade extensions described in this\n
    \  document, so they do not demonstrate fallbacks in the absence of an\n   extension.\n"
  title: 2.  Conventions Used in This Document
- contents:
  - '3.  Summary of the Required Support

    '
  - contents:
    - "3.1.  Lemonade Submission Servers\n   Lemonade Submission Servers MUST provide
      a service as described in\n   [SUBMIT], and MUST support the following.  Note
      that the Lemonade\n   Profile imposes further requirements for some cases, detailed
      in the\n   sections cited.\n        +---------------------+--------------------+--------------+\n
      \       |    SMTP extension   |      Reference     | Requirements |\n        +---------------------+--------------------+--------------+\n
      \       |       8BITMIME      |   [SMTP-8BITMIME]  |  [SMTP-BURL] |\n        |
      \        AUTH        |     [SMTP-AUTH]    |   [SUBMIT]   |\n        |      BINARYMIME
      \    |  [SMTP-BINARYMIME] |  Section 4.1 |\n        |      BURL imap      |
      \    [SMTP-BURL]    |   Section 8  |\n        |       CHUNKING      |  [SMTP-BINARYMIME]
      |  Section 4.1 |\n        |         DSN         |     [SMTP-DSN]     |  Section
      4.3 |\n        | ENHANCEDSTATUSCODES | [SMTP-STATUSCODES] |  Section 4.5 |\n
      \       |      PIPELINING     |  [SMTP-PIPELINING] |  Section 4.2 |\n        |
      \        SIZE        |     [SMTP-SIZE]    |  Section 4.4 |\n        |       STARTTLS
      \     |     [SMTP-TLS]     |  Section 4.6 |\n        +---------------------+--------------------+--------------+\n"
    title: 3.1.  Lemonade Submission Servers
  - contents:
    - "3.2.  Lemonade Message Stores\n   Lemonade Message Stores MUST provide a service
      as described in\n   [IMAP], and MUST support the following.  Note that the Lemonade\n
      \  Profile imposes further requirements for some cases, detailed in the\n   sections
      cited.\n       +------------------------+------------------+---------------+\n
      \      |     IMAP extension     |     Reference    |  Requirements |\n       +------------------------+------------------+---------------+\n
      \      |         BINARY         |   [IMAP-BINARY]  |  Section 5.2  |\n       |
      \       CATENATE        |  [IMAP-CATENATE] |  Section 5.7  |\n       |    COMPRESS=DEFLATE
      \   |  [IMAP-COMPRESS] |  Section 5.3  |\n       |        CONDSTORE       |
      [IMAP-CONDSTORE] |  Section 5.1  |\n       |     CONTEXT=SEARCH     |  [IMAP-CONTEXT]
      \ |  Section 5.5  |\n       |      CONTEXT=SORT      |  [IMAP-CONTEXT]  |  Section
      5.5  |\n       |         CONVERT        |  [IMAP-CONVERT]  |  Section 5.2  |\n
      \      |         ENABLE         |   [IMAP-ENABLE]  |  Section 5.1  |\n       |
      \        ESEARCH        |  [IMAP-ESEARCH]  |  Section 5.5  |\n       |          ESORT
      \        |  [IMAP-CONTEXT]  |  Section 5.5  |\n       |       I18NLEVEL=1      |
      \   [IMAP-I18N]   |  Section 5.8  |\n       |          IDLE          |    [IMAP-IDLE]
      \  | Section 5.4.1 |\n       |        LITERAL+        |  [IMAP-LITERAL+] |  Section
      5.8  |\n       |        NAMESPACE       | [IMAP-NAMESPACE] |  Section 5.6  |\n
      \      |         NOTIFY         |   [IMAP-NOTIFY]  | Section 5.4.1 |\n       |
      \        QRESYNC        |  [IMAP-QRESYNC]  |  Section 5.1  |\n       |         SASL-IR
      \       |  [IMAP-SASL-IR]  |  Section 5.8  |\n       |          SORT          |
      \   [IMAP-SORT]   |  Section 5.5  |\n       |        STARTTLS        |      [IMAP]
      \     |       -       |\n       |         UIDPLUS        |  [IMAP-UIDPLUS]  |
      \ Section 5.7  |\n       |         URLAUTH        |  [IMAP-URLAUTH]  |  Section
      5.7  |\n       |       URL-PARTIAL      |   Section 5.7.1  |  Section 5.7  |\n
      \      |   $Forwarded keyword   |         -        |  Section 5.9  |\n       |
      $SubmitPending keyword |         -        |  Section 5.10 |\n       |   $Submitted
      keyword   |         -        |  Section 5.10 |\n       +------------------------+------------------+---------------+\n
      \  In addition to this list, any Lemonade Message Stores MUST send the\n   CAPABILITY
      response code (see Section 7.1 of [IMAP]) in the initial\n   server greeting
      and after the LOGIN/AUTHENTICATE commands.\n"
    title: 3.2.  Lemonade Message Stores
  - contents:
    - "3.3.  Lemonade Message Delivery Agents\n   Lemonade Message Delivery Agents
      MUST support Sieve mail filtering\n   language as described in [SIEVE], and
      MUST support the following\n   Sieve extensions.  Note that the Lemonade Profile
      imposes further\n   requirements for some cases, detailed in the sections cited.\n
      \  +------------------------------+--------------------+--------------+\n   |
      \       Sieve extension       |      Reference     | Requirements |\n   +------------------------------+--------------------+--------------+\n
      \  |            ENOTIFY           |   [SIEVE-NOTIFY]   |   Section 6  |\n   |
      \         IMAP4FLAGS          | [SIEVE-IMAP4FLAGS] |   Section 6  |\n   |          RELATIONAL
      \         | [SIEVE-RELATIONAL] |   Section 6  |\n   |           VACATION           |
      \ [SIEVE-VACATION]  |   Section 6  |\n   |           VARIABLES          |  [SIEVE-VARIABLES]
      |   Section 6  |\n   | comparator-i;unicode-casemap |  [UNICODE-CASEMAP] |   Section
      6  |\n   +------------------------------+--------------------+--------------+\n
      \  Lemonade Message Delivery Agents should also consider supporting a\n   Sieve
      script management protocol, such as [MANAGESIEVE].\n"
    title: 3.3.  Lemonade Message Delivery Agents
  title: 3.  Summary of the Required Support
- contents:
  - "4.  Lemonade Submission Servers\n   All Lemonade Submission Servers implement
    the Mail Submission\n   protocol described in [SUBMIT], which is in turn a specific
    profile\n   of [ESMTP].  Therefore, any MUA designed to submit email via [SUBMIT]\n
    \  or [ESMTP] will interoperate with Lemonade Submission Servers.\n   In addition,
    Lemonade Submission Servers implement the following set\n   of SMTP and Submission
    extensions to increase message submission\n   efficiency.\n"
  - contents:
    - "4.1.  Forward without Download\n   In order to optimize network usage for the
      typical case where message\n   content is copied to, or sourced from, the IMAP
      store, Lemonade\n   provides support for a suite of extensions collectively
      known as\n   \"forward without download\", discussed in detail in Section 8.\n
      \  Lemonade Submission Servers MUST support BURL [SMTP-BURL], 8BITMIME\n   [SMTP-8BITMIME],
      BINARYMIME [SMTP-BINARYMIME], and CHUNKING\n   [SMTP-BINARYMIME] SMTP extensions.\n
      \  BURL MUST support URLAUTH type URLs [IMAP-URLAUTH], and thus MUST\n   advertise
      the \"imap\" option following the BURL EHLO keyword (see\n   [SMTP-BURL] for
      more details).\n"
    title: 4.1.  Forward without Download
  - contents:
    - "4.2.  Pipelining\n   Some clients regularly use networks with a relatively
      high latency,\n   such as mobile or satellite-based networks.  Avoidance of
      round trips\n   within a transaction has a great advantage for the reduction
      in both\n   bandwidth and total transaction time.  For this reason, Lemonade-\n
      \  compliant mail Submission Servers MUST support the SMTP service\n   extensions
      for command pipelining [SMTP-PIPELINING].\n"
    title: 4.2.  Pipelining
  - contents:
    - "4.3.  DSN Support\n   Lemonade-compliant mail Submission Servers MUST support
      SMTP service\n   extensions for delivery status notifications [SMTP-DSN].\n"
    title: 4.3.  DSN Support
  - contents:
    - "4.4.  Message Size Declaration\n   There is a distinct advantage in detecting
      failure cases as early as\n   possible in many cases, such as where the user
      is charged per octet,\n   or where bandwidth is low.  This is especially true
      of large message\n   sizes.\n   Lemonade Submission Servers MUST support the
      SMTP service extension\n   for message size declaration [SMTP-SIZE].\n   Lemonade
      Submission Servers MUST expand all BURL parts before\n   evaluating if the supplied
      message size is acceptable.\n   A Lemonade-capable client SHOULD use message
      size declaration.  In\n   particular, the client MUST NOT send a message to
      a mail Submission\n   Server if it knows that the message exceeds the maximal
      message size\n   advertised by the Submission Server.  When including a message
      size\n   in the MAIL FROM command, the client MUST use a value that is at\n
      \  least as large as the size of the assembled message data after\n   resolution
      of all BURL parts.\n"
    title: 4.4.  Message Size Declaration
  - contents:
    - "4.5.  Enhanced Status Code Support\n   Lemonade-compliant mail Submission Servers
      MUST support the SMTP\n   service extension for returning enhanced error codes\n
      \  [SMTP-STATUSCODES].  These allow a client to determine the precise\n   cause
      of failure.\n"
    title: 4.5.  Enhanced Status Code Support
  - contents:
    - "4.6.  Encryption and Compression\n   Lemonade-compliant mail Submission Servers
      MUST support the SMTP\n   service extension for secure SMTP over Transport Layer
      Security (TLS)\n   [SMTP-TLS].\n   Support for the DEFLATE compression method,
      as described in\n   [TLS-COMP], is RECOMMENDED.\n"
    title: 4.6.  Encryption and Compression
  title: 4.  Lemonade Submission Servers
- contents:
  - "5.  Lemonade Message Stores\n   All Lemonade Message Stores implement the Internet
    Message Access\n   Protocol, as defined in [IMAP].  Therefore, any MUA written
    to access\n   messages using the facilities described in [IMAP] will interoperate\n
    \  with a Lemonade Message Store.\n   In addition, Lemonade Message Stores provide
    a set of extensions to\n   address the limitations of some clients and networks.\n"
  - contents:
    - "5.1.  Quick Resynchronization\n   Resynchronization is a costly part of an
      IMAP session, and mobile\n   networks are generally more prone to unintended
      disconnection, which\n   in turn makes this problem more acute.  Therefore,
      Lemonade Message\n   Stores provide a suite of extensions to reduce the synchronization\n
      \  cost.\n   Lemonade-compliant IMAP servers MUST support the CONDSTORE\n   [IMAP-CONDSTORE],
      the QRESYNC [IMAP-QRESYNC], and the ENABLE\n   [IMAP-ENABLE] extensions.  These
      allow a client to quickly\n   resynchronize any mailbox by asking the server
      to return all flag\n   changes and expunges that have occurred since a previously
      recorded\n   state.  This can also speed up client reconnect in case the transport\n
      \  layer is cut, whether accidentally or as part of a change in network.\n   When
      implementing QRESYNC [IMAP-QRESYNC], client and servers need to\n   also comply
      with errata submitted for this document (see Appendix A).\n   [IMAP-SYNC-HOWTO]
      details how clients perform efficient mailbox\n   resynchronization.\n"
    title: 5.1.  Quick Resynchronization
  - contents:
    - "5.2.  Message Part Handling\n   The handling of message parts, especially attachments,
      represents a\n   set of challenges to limited devices, both in terms of the
      bandwidth\n   used and the capability of the device.\n   Lemonade-compliant
      IMAP servers MUST support the BINARY [IMAP-BINARY]\n   extension.  This moves
      MIME body part decoding operations from the\n   client to the server.  The decoded
      data is equal to or less in size\n   than the encoded representation, so this
      reduces bandwidth\n   effectively.\n   [IMAP-BINARY] allows for servers to refuse
      to accept uploaded\n   messages containing binary data, by not accepting the
      Binary content-\n   transfer-encoding; however, Lemonade-compliant IMAP servers
      SHALL\n   always accept binary encoded MIME messages in APPEND commands for
      any\n   folder.\n   [IMAP-CONVERT] MUST also be supported by servers, which
      allows\n   clients to request conversions between media types, and allows for\n
      \  scaling images, etc.  This provides the ability to view attachments\n   (and
      sometimes body parts) without the facility to cope with a wide\n   range of
      media types, or to efficiently view attachments.\n"
    title: 5.2.  Message Part Handling
  - contents:
    - "5.3.  Compression\n   Lemonade Message Stores SHOULD support the Deflate compression\n
      \  algorithm for TLS, as defined in [TLS-COMP], in order to facilitate\n   compression
      at as low a level as possible.\n   However, the working group acknowledges that
      for many endpoints, this\n   is a rarely deployed technology, and as such, Lemonade
      Message Stores\n   MUST provide [IMAP-COMPRESS] support for fallback application-level\n
      \  stream compression, where TLS is not actively providing compression.\n"
    title: 5.3.  Compression
  - contents:
    - "5.4.  Notifications\n   The addition of server-to-client notifications transforms
      the\n   Lemonade Profile into an event-based synchronization protocol.\n   Whenever
      an event occurs that interests the MUA, a notification can\n   be generated.
      \ The Lemonade WG used the notifications architecture\n   shown in [LEMONADE-NOTIFICATIONS]
      to develop the Lemonade Profile.\n   If the MUA is connected to the IMAP server,
      inband notifications are\n   generated using the facilities outlined in Section
      5.4.1.\n   When the MUA is not connected, the notification filter generates
      an\n   outband notification.  The notification filter may be considered as\n
      \  acting on a push email repository.\n   If the MUA is not connected, and outband
      notification is disabled,\n   the client must perform a quick-sync on reconnect
      to determine\n   mailbox changes, using the mechanisms outlined in Section 5.1.\n"
    - contents:
      - "5.4.1.  IMAP Notifications\n   Lemonade Message Stores MUST support the IDLE
        [IMAP-IDLE] extension.\n   The extension allows clients to receive unsolicited
        notifications\n   about changes in the selected mailbox, without needing to
        poll for\n   changes.  The responses forming these notifications MUST be sent
        in a\n   timely manner when such changes happen.\n   Lemonade Message Stores
        also provide the NOTIFY extension described\n   in [IMAP-NOTIFY], which allows
        clients to request specific event\n   types to be sent immediately to the
        client, both for the currently\n   selected folder and others.  Such event
        types include message\n   delivery and mailbox renames.\n"
      title: 5.4.1.  IMAP Notifications
    - contents:
      - "5.4.2.  External Notifications\n   Lemonade and TCP provide for long-lived
        idle connections between the\n   client and mail store, allowing the server
        to push notifications\n   within IMAP.  Some mobile networks support dormancy,
        which shuts down\n   the radio traffic channel during idle periods to conserve
        handset and\n   network resources, while maintaining IP and TCP state.  (See
        the\n   [LEMONADE-DEPLOYMENTS] document for more information.)\n   However,
        there are environments where the email client cannot remain\n   active indefinitely,
        or where it is not advisable (or even always\n   possible) for TCP connections
        to the server to remain up while idle\n   for extended periods.  In these
        situations, a good user experience\n   requires that when \"interesting\"
        events occur in the mail store, the\n   client be informed so that it can
        connect and resynchronize.  At an\n   absolute minimum, this requires that
        at least the arrival of new mail\n   generate some sort of wake-up to the
        email client.  A number of\n   vendors have implemented various solutions
        to this.  As examples of\n   what has been done, for many years (long pre-dating
        cellular\n   handsets) the technique described in [FINGER-HACK] has been\n
        \  supported.  Today, a number of email vendors include facilities to\n   send
        SMS or other simple non-stream messages to clients on handsets\n   when new
        mail arrives.  The Open Mobile Alliance (OMA) has published\n   a mechanism
        that uses WAP PUSH to send a basic message containing a\n   URL [OMA-EMN].
        \ The IETF is investigating ways to standardize\n   enhanced functionality
        in this area.\n   A \"push email\" user experience can be achieved using any
        number of\n   techniques, ranging from always-on TCP connectivity to the server
        and\n   the NOTIFY extension described above, to OMA EMN, or even a non-\n
        \  standard trigger message over SMS.  In any technique, the client\n   learns
        of the existence of new mail, and decides to fetch information\n   about it,
        some part of it, or all of it, and then presents this to\n   the user.\n"
      title: 5.4.2.  External Notifications
    title: 5.4.  Notifications
  - contents:
    - "5.5.  Searching and View Filters\n   Lemonade Message Stores MUST support the
      ESEARCH [IMAP-ESEARCH]\n   extension.  The extension allows clients to efficiently
      find the\n   first or last messages, find a count of matching messages, and
      obtain\n   a list of matching messages in a considerably more compact\n   representation.\n
      \  Lemonade Message Stores also provide a mechanism for clients to avoid\n   handling
      an entire mailbox, instead accessing a view of the mailbox.\n   This technique,
      common in many desktop clients as a client-side\n   capability, is useful for
      constrained clients to minimize the\n   quantity of messages and notification
      data.\n   Lemonade Message Stores therefore MUST implement the CONTEXT=SEARCH,\n
      \  ESORT, and CONTEXT=SORT extensions defined in [IMAP-CONTEXT], as well\n   as
      the SORT extension defined in [IMAP-SORT].\n"
    title: 5.5.  Searching and View Filters
  - contents:
    - "5.6.  Mailbox Handling\n   Lemonade Message Stores MUST support the NAMESPACE
      [IMAP-NAMESPACE]\n   extension.  The extension allows clients to discover shared
      mailboxes\n   and mailboxes belonging to other users, and provide a normalized\n
      \  hierarchy view of the mailboxes available.\n   Lemonade Message Stores MUST
      support the I18NLEVEL=<n> [IMAP-I18N]\n   extension, with <n> having the value
      1 or 2.  It adds support for\n   non-English (internationalized) search and
      sort functions.  (Note\n   that I18NLEVEL=2 implies support for I18NLEVEL=1,
      so a Lemonade-\n   compliant client that makes use of this extension MUST recognize\n
      \  either one.)\n"
    title: 5.6.  Mailbox Handling
  - contents:
    - "5.7.  Forward without Download\n   In order to optimize network usage for the
      typical case where message\n   content is copied to, or sourced from, the IMAP
      store, Lemonade\n   provides support for a suite of extensions collectively
      known as\n   \"forward without download\", discussed in detail in Section 8.\n
      \  Lemonade Message Stores MUST support CATENATE [IMAP-CATENATE],\n   UIDPLUS
      [IMAP-UIDPLUS], and URLAUTH [IMAP-URLAUTH].  Lemonade Message\n   Stores MUST
      also support URL-PARTIAL as described in Section 5.7.1.\n"
    - contents:
      - "5.7.1.  Support for PARTIAL in CATENATE and URLAUTH\n   [IMAP-URL] introduced
        a new syntactic element for referencing a byte\n   range of a message/body
        part.  This is done using the ;PARTIAL=\n   field.  If an IMAP server supports
        PARTIAL in IMAP URL used in\n   CATENATE and URLAUTH extensions, then it MUST
        advertise the URL-\n   PARTIAL capability in both the CAPABILITY response
        and the equivalent\n   response-code.\n"
      title: 5.7.1.  Support for PARTIAL in CATENATE and URLAUTH
    title: 5.7.  Forward without Download
  - contents:
    - "5.8.  Additional IMAP Extensions\n   Lemonade Message Stores MUST support the
      LITERAL+ [IMAP-LITERAL+]\n   extension.  The extension allows clients to save
      a round trip each\n   time a non-synchronizing literal is sent.\n   Lemonade
      Message Stores MUST also implement the SASL-IR\n   [IMAP-SASL-IR] extension,
      which allows clients to save a round trip\n   during authentication, potentially
      pipelining the entire\n   authentication sequence.\n   Lemonade-compliant IMAP
      servers MUST support IMAP over TLS [IMAP] as\n   required by [IMAP].  As noted
      above in Section 5.3, servers SHOULD\n   support the deflate compression algorithm
      for TLS, as specified in\n   [TLS-COMP].\n"
    title: 5.8.  Additional IMAP Extensions
  - contents:
    - "5.9.  Registration of $Forwarded IMAP Keyword\n   The $Forwarded IMAP keyword
      is used by several IMAP clients to\n   specify that the marked message was forwarded
      to another email\n   address, embedded within or attached to a new message.
      \ A mail client\n   sets this keyword when it successfully forwards the message
      to\n   another email address.  Typical usage of this keyword is to show a\n
      \  different (or additional) icon for a message that has been forwarded.\n   Once
      set, the flag SHOULD NOT be cleared.\n   Lemonade Message Stores MUST be able
      to store the $Forwarded keyword.\n   They MUST preserve it on the COPY operation.
      \ The servers MUST\n   support the SEARCH KEYWORD $Forwarded.\n"
    title: 5.9.  Registration of $Forwarded IMAP Keyword
  - contents:
    - "5.10.  Registration of $SubmitPending and $Submitted IMAP Keywords\n   The
      $SubmitPending IMAP keyword designates the message as awaiting to\n   be submitted.
      \ This keyword allows storing messages waiting to be\n   submitted in the same
      mailbox where messages that were already\n   submitted and/or are being edited
      are stored.  A mail client sets\n   this keyword when it decides that the message
      needs to be sent out.\n   When a client (it might be a different client from
      the one that\n   decided that the message is pending submission) starts sending
      the\n   message, it atomically (using \"STORE (UNCHANGEDSINCE)\") adds the\n
      \  $Submitted keyword.  Once submission is successful, the\n   $SubmitPending
      keyword is atomically cleared.  The two keywords allow\n   messages being actively
      submitted (messages that have both $Submitted\n   and $SubmitPending keywords
      set) to be distinguished from messages\n   awaiting to be submitted, or from
      messages already submitted.  They\n   also allow all messages that were supposed
      to be submitted to be\n   found, if the client submitting them crashes or quits
      before\n   submitting them.\n   Lemonade Message Stores MUST be able to store
      the $SubmitPending and\n   the $Submitted keyword.  Lemonade Message Stores
      MUST preserve them\n   on the COPY operation.  The servers MUST support the
      SEARCH KEYWORD\n   $SubmitPending and SEARCH KEYWORD $Submitted.\n"
    title: 5.10.  Registration of $SubmitPending and $Submitted IMAP Keywords
  - contents:
    - "5.11.  Related IMAP Extensions\n   Section 5.11 is non-normative.\n   Server
      implementations targeting to fulfill OMA MEM requirements\n   [OMA-MEM-REQ]
      should consider implementing the [IMAP-FILTERS], which\n   provides a way to
      persist definition of virtual mailboxes on the\n   server.  They should also
      consider implementing the METADATA-SERVER\n   [METADATA] extension, which provides
      a way of storing user-defined\n   data associated with a user account.\n"
    title: 5.11.  Related IMAP Extensions
  title: 5.  Lemonade Message Stores
- contents:
  - "6.  Lemonade Message Delivery Agents\n   Lemonade Message Delivery Agents MUST
    support the [SIEVE] filtering\n   language at the point of delivery, allowing
    the user to control which\n   messages are accepted, and where they are filed.\n
    \  Lemonade Message Delivery Agents MUST support the Sieve Vacation\n   extension
    [SIEVE-VACATION], which allows the client to set up an\n   auto-responder, typically
    to report being on vacation (thus the name\n   of the Sieve extension).\n   Lemonade
    Message Delivery Agents MUST support the Sieve Enotify\n   extension [SIEVE-NOTIFY],
    which allows a Sieve script to generate\n   notifications (such as XMPP, SIP,
    or email) about received messages.\n   Lemonade Message Delivery Agents MUST support
    the Sieve Variables\n   extension [SIEVE-VARIABLES], which adds support for variables
    to the\n   Sieve scripting language.  This extension is typically used with\n
    \  Sieve Enotify or Vacation to customize responses/notifications.\n   Lemonade
    Message Delivery Agents MUST support the Sieve Relational\n   extension [SIEVE-RELATIONAL],
    which adds support for relational\n   comparisons to the Sieve scripting language.
    \ This extension is\n   typically used together with Sieve Enotify.\n   Lemonade
    Message Delivery Agents MUST support the Sieve Imap4Flags\n   extension [SIEVE-IMAP4FLAGS],
    which allows a Sieve script to set IMAP\n   flags/keywords when delivering a message
    to a mailbox.  For example,\n   this can be used to automatically mark certain
    messages as\n   interesting, urgent, etc.\n   Lemonade Message Delivery Agents
    MUST support the i;unicode-casemap\n   comparator in Sieve [UNICODE-CASEMAP],
    which is declared as\n   \"comparator-i;unicode-casemap\" in the Sieve \"require\"
    statement.  The\n   comparator allows for case-insensitive matching of Unicode\n
    \  characters.\n   Lemonade Message Delivery Agents should consider supporting
    Sieve\n   script management using the [MANAGESIEVE] protocol.  If they do, they\n
    \  MUST also advertise in [MANAGESIEVE] all Sieve extensions listed in\n   this
    section.\n"
  title: 6.  Lemonade Message Delivery Agents
- contents:
  - "7.  Lemonade Message User Agents\n   Although all existing IMAP MUAs are Lemonade
    compliant in as much as\n   all Lemonade services are based on the existing [IMAP]
    and [SUBMIT]\n   protocols, client implementors are encouraged to take full advantage\n
    \  of the facilities provided by Lemonade Submission Servers and\n   Lemonade
    Message Stores, as described in 4 and 5, respectively.\n   When opening a connection
    to the Submission Server, clients MUST do\n   so using port 587 unless explicitly
    configured to use an alternate\n   port [RFC5068].  (Note that this requirement
    is somewhat stronger\n   than the one specified in [SUBMIT], as [SUBMIT] didn't
    prescribe the\n   exact procedure to be used by submission clients.)  If the TCP\n
    \  connection to the submission server fails to open using port 587, the\n   client
    MAY then immediately retry using a different port, such as 25.\n   See [SUBMIT]
    for information on why using port 25 is likely to fail\n   depending on the current
    location of the client, and may result in a\n   failure code during the SMTP transaction.\n
    \  In addition, some specifications are useful to support interoperable\n   messaging
    with an enhanced user experience.\n   Lemonade-capable clients SHOULD support
    the Format and DelSp\n   parameters to the text/plain media type described in
    [FLOWED], and\n   generate this format for messages.\n   Lemonade-capable clients
    SHOULD support, and use, the $Forwarded\n   keyword described in Section 5.9.\n"
  title: 7.  Lemonade Message User Agents
- contents:
  - '8.  Forward without Download

    '
  - contents:
    - "8.1.  Motivations\n   The advent of client/server email using the [IMAP] and
      [SUBMIT]\n   protocols changed what formerly were local disk operations to become\n
      \  repetitive network data transmissions.\n   Lemonade \"forward without download\"
      makes use of the [SMTP-BURL]\n   extension to enable access to external sources
      during the submission\n   of a message.  In combination with the [IMAP-URLAUTH]
      extension,\n   inclusion of message parts or even entire messages from the IMAP
      mail\n   store is possible with a minimal trust relationship between the IMAP\n
      \  and SMTP SUBMIT servers.\n   Lemonade \"forward without download\" has the
      advantage of maintaining\n   one submission protocol, and thus avoids the risk
      of having multiple\n   parallel and possibly divergent mechanisms for submission.
      \ The\n   client can use [SUBMIT] extensions without these being added to IMAP.\n
      \  Furthermore, by keeping the details of message submission in the SMTP\n   SUBMIT
      server, Lemonade \"forward without download\" can work with\n   other message
      retrieval protocols such as POP, NNTP, or whatever else\n   may be designed
      in the future.\n"
    title: 8.1.  Motivations
  - contents:
    - "8.2.  Message Sending Overview\n   The act of sending an email message can
      be thought of as involving\n   multiple steps: initiation of a new draft, draft
      editing, message\n   assembly, and message submission.\n   Initiation of a new
      draft and draft editing takes place in the MUA.\n   Frequently, users choose
      to save more complex messages on an [IMAP]\n   server (via the APPEND command
      with the \\Draft flag) for later recall\n   by the MUA and resumption of the
      editing process.\n   Message assembly is the process of producing a complete
      message from\n   the final revision of the draft and external sources.  At assembly\n
      \  time, external data is retrieved and inserted in the message.\n   Message
      submission is the process of inserting the assembled message\n   into the [ESMTP]
      infrastructure, typically using the [SUBMIT]\n   protocol.\n"
    title: 8.2.  Message Sending Overview
  - contents:
    - "8.3.  Traditional Strategy\n   Traditionally, messages are initiated, edited,
      and assembled entirely\n   within an MUA, although drafts may be saved to an
      [IMAP] server and\n   later retrieved from the server.  The completed text is
      then\n   transmitted to a Message Submission Agent (MSA) for delivery.\n   There
      is often no clear boundary between the editing and assembly\n   processes.  If
      a message is forwarded, its content is often retrieved\n   immediately and inserted
      into the message text.  Similarly, when\n   external content is inserted or
      attached, the content is usually\n   retrieved immediately and made part of
      the draft.\n   As a consequence, each save of a draft and subsequent retrieval
      of\n   the draft transmits that entire (possibly large) content, as does\n   message
      submission.\n   In the past, this was not much of a problem, because drafts,
      external\n   data, and the message submission mechanism were typically located
      on\n   the same system as the MUA.  The most common problem was running out\n
      \  of disk quota.\n"
    title: 8.3.  Traditional Strategy
  - contents:
    - "8.4.  A New Strategy\n   The model distinguishes between a Message User Agent
      (MUA), an\n   IMAPv4Rev1 Server ([IMAP]), and an SMTP submit server ([SUBMIT]),
      as\n   illustrated in Figure 1.\n        +--------------------+               +--------------+\n
      \       |                    | <------------ |              |\n        |     MUA
      (M)        |               | IMAPv4Rev1   |\n        |                    |
      \              |  Server      |\n        |                    | ------------>
      | (Server I)   |\n        +--------------------+               +--------------+\n
      \              ^    |                              ^     |\n               |
      \   |                              |     |\n               |    |                              |
      \    |\n               |    |                              |     |\n               |
      \   |                              |     |\n               |    |                              |
      \    |\n               |    |                              |     v\n               |
      \   |                        +--------------+\n               |    |---------------------->
      |   SMTP       |\n               |                             |   Submit     |\n
      \              |-----------------------------|   Server     |\n                                             |
      \ (Server S)  |\n                                             +--------------+\n
      \  Figure 1: Lemonade \"forward without download\"\n   Lemonade \"forward without
      download\" allows a Message User Agent to\n   compose and forward an email combining
      fragments that are located in\n   an IMAP server, without having to download
      these fragments to the\n   client.\n   This section informatively describes
      two ways to perform \"forward\n   without download\" based on where the message
      assembly takes place.\n   The first uses the extended APPEND command [IMAP-CATENATE]
      to edit a\n   draft message in the message store and cause the message assembly
      on\n   the IMAP server.  This is most often used when a copy of the message\n
      \  is to be retained on the IMAP server, as discussed in Section 8.6.\n   The
      second uses a succession of BURL and BDAT commands to submit and\n   assemble
      through concatenation, message data from the client and\n   external data fetched
      from the provided URL.  The two subsequent\n   sections provide step-by-step
      instructions on how \"forward without\n   download\" is achieved.\n"
    - contents:
      - "8.4.1.  Message Assembly Using IMAP CATENATE Extension\n   In the [SMTP-BURL]/[IMAP-CATENATE]
        variant of the Lemonade \"forward\n   without download\" strategy, messages
        are initially composed and\n   edited within an MUA.  The [IMAP-CATENATE]
        extension to [IMAP] is\n   then used to create the messages on the IMAP server
        by transmitting\n   new text and assembling them.  The UIDPLUS [IMAP-UIDPLUS]
        IMAP\n   extension is used by the client in order to learn the UID of the\n
        \  created messages.  Finally, an [IMAP-URLAUTH] format URL is given to\n
        \  a [SUBMIT] server for submission using the BURL [SMTP-BURL]\n   extension.\n
        \  The flow involved to support such a use case consists of:\n   M: {to I
        -- Optional} The client connects to the IMAP server,\n   optionally starts
        TLS (if data confidentiality is required),\n   authenticates, opens a mailbox
        (\"INBOX\" in the example below), and\n   fetches body structures (see [IMAP]).\n
        \  Example:\n           M: A0051 UID FETCH 25627 (UID BODYSTRUCTURE)\n           I:
        * 161 FETCH (UID 25627 BODYSTRUCTURE ((\"TEXT\" \"PLAIN\"\n               (\"CHARSET\"
        \"US-ASCII\") NIL NIL \"7BIT\" 1152 23)(\n               \"TEXT\" \"PLAIN\"
        (\"CHARSET\" \"US-ASCII\" \"NAME\"\n               \"trip.txt\")\n               \"<960723163407.20117h@washington.example.com>\"\n
        \              \"Your trip details\" \"BASE64\" 4554 73) \"MIXED\"))\n           I:
        A0051 OK completed\n   M: {to I} The client invokes CATENATE (see [IMAP-CATENATE]
        for\n   details of the semantics and steps) -- this allows the MUA to create\n
        \  messages on the IMAP server using new data combined with one or more\n
        \  message parts already present on the IMAP server.\n   Note that the example
        for this step doesn't use the LITERAL+\n   [IMAP-LITERAL+] extension.  Without
        LITERAL+ the new message is\n   constructed using three round trips.  If LITERAL+
        is used, the new\n   message can be constructed using one round trip.\n        M:
        A0052 APPEND Sent FLAGS (\\Draft \\Seen $MDNSent)\n            CATENATE (TEXT
        {475}\n        I: + Ready for literal data\n        M: Message-ID: <419399E1.6000505@caernarfon.example.org>\n
        \       M: Date: Thu, 12 Nov 2004 16:57:05 +0000\n        M: From: Bob Ar
        <bar@example.org>\n        M: MIME-Version: 1.0\n        M: To: foo@example.net\n
        \       M: Subject: About our holiday trip\n        M: Content-Type: multipart/mixed;\n
        \       M:     boundary=\"------------030308070208000400050907\"\n        M:\n
        \       M: --------------030308070208000400050907\n        M: Content-Type:
        text/plain; format=flowed\n        M:\n        M: Our travel agent has sent
        the updated schedule.\n        M:\n        M: Cheers,\n        M: Bob\n        M:
        --------------030308070208000400050907\n        M:  URL \"/INBOX;UIDVALIDITY=385759045/;\n
        \          UID=25627/;Section=2.MIME\" URL \"/INBOX;\n           UIDVALIDITY=385759045/;UID=25627/;Section=2\"
        TEXT {44}\n        I: + Ready for literal data\n        M:\n        M: --------------030308070208000400050907--\n
        \       M: )\n        I: A0052 OK [APPENDUID 387899045 45] CATENATE Completed\n
        \  M: {to I} The client uses the GENURLAUTH command to request a URLAUTH\n
        \  URL (see [IMAP-URLAUTH]).\n   I: {to M} The IMAP server returns a URLAUTH
        URL suitable for later\n   retrieval with URLFETCH (see [IMAP-URLAUTH] for
        details of the\n   semantics and steps).\n        M: A0053 GENURLAUTH \"imap://bob.ar@example.org/Sent;\n
        \          UIDVALIDITY=387899045/;uid=45;expire=2005-10-\n           28T23:59:59Z;urlauth=submit+bob.ar\"
        INTERNAL\n        I: * GENURLAUTH \"imap://bob.ar@example.org/Sent;\n           UIDVALIDITY=387899045/;uid=45;expire=\n
        \          2005-10-28T23:59:59Z;urlauth=submit+bob.ar:\n           internal:91354a473744909de610943775f92038\"\n
        \       I: A0053 OK GENURLAUTH completed\n   M: {to S} The client connects
        to the mail Submission Server and\n   starts a new mail transaction.  It uses
        BURL to let the SMTP submit\n   server fetch the content of the message from
        the IMAP server (see\n   [IMAP-URLAUTH] for details of the semantics and steps
        -- this allows\n   the MUA to authorize the SMTP submit server to access the
        message\n   composed as a result of the CATENATE step).  Note that the second\n
        \  EHLO command is required after a successful STARTTLS command.  Also\n   note
        that there might be a third required EHLO command if the second\n   EHLO response
        doesn't list any BURL options.  Section 8.4.2\n   demonstrates this.\n        S:
        220 owlry.example.org ESMTP\n        M: EHLO potter.example.org\n        S:
        250-owlry.example.com\n        S: 250-8BITMIME\n        S: 250-BINARYMIME\n
        \       S: 250-PIPELINING\n        S: 250-BURL imap\n        S: 250-CHUNKING\n
        \       S: 250-AUTH PLAIN\n        S: 250-DSN\n        S: 250-SIZE 10240000\n
        \       S: 250-STARTTLS\n        S: 250 ENHANCEDSTATUSCODES\n        M: STARTTLS\n
        \       S: 220 Ready to start TLS\n        ...TLS negotiation, subsequent
        data is encrypted...\n        M: EHLO potter.example.org\n        S: 250-owlry.example.com\n
        \       S: 250-8BITMIME\n        S: 250-BINARYMIME\n        S: 250-PIPELINING\n
        \       S: 250-BURL imap\n        S: 250-CHUNKING\n        S: 250-AUTH PLAIN\n
        \       S: 250-DSN\n        S: 250-SIZE 10240000\n        S: 250 ENHANCEDSTATUSCODES\n
        \       M: AUTH PLAIN aGFycnkAaGFycnkAYWNjaW8=\n        M: MAIL FROM:<bob.ar@example.org>\n
        \       M: RCPT TO:<foo@example.net>\n        S: 235 2.7.0 PLAIN authentication
        successful.\n        S: 250 2.5.0 Address Ok.\n        S: 250 2.1.5 foo@example.net
        OK.\n        M: BURL imap://bob.ar@example.org/Sent;UIDVALIDITY=387899045/;\n
        \          uid=45/;urlauth=submit+bar:internal:\n           91354a473744909de610943775f92038
        LAST\n   S: {to I} The mail Submission Server uses URLFETCH to fetch the\n
        \  message to be sent.  (See [IMAP-URLAUTH] for details of the semantics\n
        \  and steps.  The so-called \"pawn-ticket\" authorization mechanism uses\n
        \  a URI that contains its own authorization credentials.)\n   I: {to S} Provides
        the message composed as a result of the CATENATE\n   step).\n   The mail Submission
        Server opens an IMAP connection to the IMAP\n   server:\n        I: * OK [CAPABILITY
        IMAP4REV1 STARTTLS NAMESPACE LITERAL+\n            CATENATE URLAUTH UIDPLUS
        CONDSTORE IDLE] imap.example.com\n            IMAP server ready\n        S:
        a000 STARTTLS\n        I: a000 Start TLS negotiation now\n        ...TLS negotiation,
        if successful - subsequent data\n           is encrypted...\n        S: a001
        LOGIN submitserver secret\n        I: a001 OK submitserver logged in\n        S:
        a002 URLFETCH \"imap://bob.ar@example.org/Sent;\n           UIDVALIDITY=387899045/;uid=45/;urlauth=submit+bob.ar:\n
        \          internal:91354a473744909de610943775f92038\"\n        I: * URLFETCH
        \"imap://bob.ar@example.org/Sent;\n           UIDVALIDITY=387899045/;uid=45/;urlauth=submit+bob.ar:\n
        \          internal:91354a473744909de610943775f92038\" {15065}\n        ...message
        body follows...\n        I: a002 OK URLFETCH completed\n        S: a003 LOGOUT\n
        \       I: * BYE See you later\n        I: a003 OK Logout successful\n   Note
        that if data confidentiality is not required, the mail\n   Submission Server
        may omit the STARTTLS command before issuing the\n   LOGIN command.\n   S:
        {to M} Submission server assembles the complete message; if the\n   assembly
        succeeds, it returns OK to the MUA:\n        S: 250 2.5.0 Ok.\n   M: {to I}
        The client marks the message containing the forwarded\n   attachment on the
        IMAP server.\n        M: A0054 UID STORE 25627 +FLAGS.SILENT ($Forwarded)\n
        \       I: * 215 FETCH (UID 25627 MODSEQ (12121231000))\n        I: A0054
        OK STORE completed\n   Note: the UID STORE command shown above will only work
        if the marked\n   message is in the currently selected mailbox; otherwise,
        it requires\n   a SELECT.  This command can be omitted, as it simply changes
        non-\n   operational metadata not essential to client operations or\n   interoperability.
        \ The untagged FETCH response is due to\n   [IMAP-CONDSTORE].  The $Forwarded
        IMAP keyword is described in\n   Section 5.9.\n"
      title: 8.4.1.  Message Assembly Using IMAP CATENATE Extension
    - contents:
      - "8.4.2.  Message Assembly Using SMTP CHUNKING and BURL Extensions\n   In the
        [IMAP-URLAUTH]/[SMTP-BURL] variant of the Lemonade \"forward\n   without download\"
        strategy, messages are initially composed and\n   edited within an MUA.  During
        submission [SUBMIT], BURL [SMTP-BURL]\n   and BDAT [SMTP-BINARYMIME] commands
        are used to create the messages\n   from multiple parts.  New body parts are
        supplied using BDAT\n   commands, while existing body parts are referenced
        using\n   [IMAP-URLAUTH] format URLs in BURL commands.\n   The flow involved
        to support such a use case consists of:\n   M: {to I -- Optional} The client
        connects to the IMAP server,\n   optionally starts TLS (if data confidentiality
        is required),\n   authenticates, opens a mailbox (\"INBOX\" in the example
        below), and\n   fetches body structures (see [IMAP]).\n   Example:\n           M:
        B0051 UID FETCH 25627 (UID BODYSTRUCTURE)\n           I: * 161 FETCH (UID
        25627 BODYSTRUCTURE ((\"TEXT\" \"PLAIN\"\n              (\"CHARSET\" \"US-ASCII\")
        NIL NIL \"7BIT\" 1152 23)(\n              \"TEXT\" \"PLAIN\" (\"CHARSET\"
        \"US-ASCII\" \"NAME\"\n              \"trip.txt\")\n              \"<960723163407.20117h@washington.example.com>\"\n
        \             \"Your trip details\" \"BASE64\" 4554 73) \"MIXED\"))\n           I:
        B0051 OK completed\n   M: {to I} The client uses the GENURLAUTH command to
        request URLAUTH\n   URLs (see [IMAP-URLAUTH]) referencing pieces of the message
        to be\n   assembled.\n   I: {to M} The IMAP server returns URLAUTH URLs suitable
        for later\n   retrieval with URLFETCH (see [IMAP-URLAUTH] for details of the\n
        \  semantics and steps).\n        M: B0052 GENURLAUTH \"imap://bob.ar@example.org/INBOX;\n
        \          UIDVALIDITY=385759045/;UID=25627/;Section=2.MIME;\n           expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar\"\n
        \          INTERNAL \"imap://bob.ar@example.org/INBOX;\n           UIDVALIDITY=385759045/;UID=25627/;Section=2;\n
        \          expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar\" INTERNAL\n
        \       I: * GENURLAUTH \"imap://bob.ar@example.org/INBOX;\n           UIDVALIDITY=385759045/;UID=25627/;Section=2.MIME;\n
        \          expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar:\n           internal:A0DEAD473744909de610943775f9BEEF\"\n
        \          \"imap://bob.ar@example.org/INBOX;\n           UIDVALIDITY=385759045/;UID=25627/;Section=2;\n
        \          expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar:\n           internal:BEEFA0DEAD473744909de610943775f9\"\n
        \       I: B0052 OK GENURLAUTH completed\n   M: {to S} The client connects
        to the mail Submission Server and\n   starts a new mail transaction.  It uses
        BURL to instruct the SMTP\n   submit server to fetch from the IMAP server
        pieces of the message to\n   be sent (see [SMTP-BURL] for details of the semantics
        and steps).\n   Note that the second EHLO command is required after a successful\n
        \  STARTTLS command.  The third EHLO command is required if and only if\n
        \  the second EHLO response doesn't list any BURL options.  See\n   Section
        8.4.1 for an example of submission where the third EHLO\n   command/response
        is not present.\n        S: 220 owlry.example.org ESMTP\n        M: EHLO potter.example.org\n
        \       S: 250-owlry.example.com\n        S: 250-8BITMIME\n        S: 250-BINARYMIME\n
        \       S: 250-PIPELINING\n        S: 250-BURL\n        S: 250-CHUNKING\n
        \       S: 250-AUTH DIGEST-MD5\n        S: 250-DSN\n        S: 250-SIZE 10240000\n
        \       S: 250-STARTTLS\n        S: 250 ENHANCEDSTATUSCODES\n        M: STARTTLS\n
        \       S: 220 Ready to start TLS\n        ...TLS negotiation, subsequent
        data is encrypted...\n        M: EHLO potter.example.org\n        S: 250-owlry.example.com\n
        \       S: 250-8BITMIME\n        S: 250-BINARYMIME\n        S: 250-PIPELINING\n
        \       S: 250-BURL\n        S: 250-CHUNKING\n        S: 250-AUTH DIGEST-MD5
        CRAM-MD5 PLAIN EXTERNAL\n        S: 250-DSN\n        S: 250-SIZE 10240000\n
        \       S: 250 ENHANCEDSTATUSCODES\n        M: AUTH PLAIN aGFycnkAaGFycnkAYWNjaW8=\n
        \       S: 235 2.7.0 PLAIN authentication successful.\n        M: EHLO potter.example.org\n
        \       S: 250-owlry.example.com\n        S: 250-8BITMIME\n        S: 250-BINARYMIME\n
        \       S: 250-PIPELINING\n        S: 250-BURL imap imap://imap.example.org\n
        \       S: 250-CHUNKING\n        S: 250-AUTH DIGEST-MD5 CRAM-MD5 PLAIN EXTERNAL\n
        \       S: 250-DSN\n        S: 250-SIZE 10240000\n        S: 250 ENHANCEDSTATUSCODES\n
        \       M: MAIL FROM:<bob.ar@example.org> BODY=BINARY\n        S: 250 2.5.0
        Address Ok.\n        M: RCPT TO:<foo@example.net>\n        S: 250 2.1.5 foo@example.net
        OK.\n        M: BDAT 475\n        M: Message-ID: <419399E1.6000505@caernarfon.example.org>\n
        \       M: Date: Thu, 12 Nov 2004 16:57:05 +0000\n        M: From: Bob Ar
        <bar@example.org>\n        M: MIME-Version: 1.0\n        M: To: foo@example.net\n
        \       M: Subject: About our holiday trip\n        M: Content-Type: multipart/mixed;\n
        \       M:     boundary=\"------------030308070208000400050907\"\n        M:\n
        \       M: --------------030308070208000400050907\n        M: Content-Type:
        text/plain; format=flowed\n        M:\n        M: Our travel agent has sent
        the updated schedule.\n        M:\n        M: Cheers,\n        M: Bob\n        M:
        --------------030308070208000400050907\n        S: 250 2.5.0 OK\n        M:
        BURL imap://bob.ar@example.org/INBOX;\n           UIDVALIDITY=385759045/;UID=25627/;Section=2.MIME;\n
        \          expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar:\n           internal:A0DEAD473744909de610943775f9BEEF\n
        \       S: 250 2.5.0 OK\n        M: BURL imap://bob.ar@example.org/INBOX;\n
        \          UIDVALIDITY=385759045/;UID=25627/;Section=2;\n           expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar:\n
        \          internal:BEEFA0DEAD473744909de610943775f9\n        S: 250 2.5.0
        OK\n        M: BDAT 44 LAST\n        M:\n        M: --------------030308070208000400050907--\n
        \  S: {to I} The mail Submission Server uses URLFETCH to fetch the\n   pieces
        of the message to be sent.  (See [SMTP-BURL] for details of\n   the semantics
        and steps.  The so-called \"pawn-ticket\" authorization\n   mechanism uses
        a URI which contains its own authorization\n   credentials.).\n   I: {to S}
        Returns the requested body parts.\n   The mail Submission Server opens an
        IMAP connection to the IMAP\n   server:\n        I: * OK [CAPABILITY IMAP4REV1
        STARTTLS NAMESPACE LITERAL+\n            CATENATE URLAUTH UIDPLUS CONDSTORE
        IDLE] imap.example.com\n            IMAP server ready\n        S: b000 STARTTLS\n
        \       I: b000 Start TLS negotiation now\n        ...TLS negotiation, if
        successful - subsequent data\n           is encrypted...\n        S: b001
        LOGIN submitserver secret\n        I: b001 OK submitserver logged in\n        S:
        b002 URLFETCH \"imap://bob.ar@example.org/INBOX;\n           UIDVALIDITY=385759045/;UID=25627/;Section=2.MIME;\n
        \          expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar:\n           internal:A0DEAD473744909de610943775f9BEEF\"
        \"imap://\n           bob.ar@example.org/INBOX;\n           UIDVALIDITY=385759045/;UID=25627/;Section=2;\n
        \          expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar:\n           internal:BEEFA0DEAD473744909de610943775f9\"\n
        \       I: * URLFETCH \"imap://bob.ar@example.org/INBOX;\n           UIDVALIDITY=385759045/;UID=25627/;Section=2.MIME;\n
        \          expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar:\n           internal:A0DEAD473744909de610943775f9BEEF\"
        {84}\n        ...message section follows...\n            \"imap://bob.ar@example.org/INBOX;\n
        \          UIDVALIDITY=385759045/;UID=25627/;Section=2;\n           expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar:\n
        \          internal:BEEFA0DEAD473744909de610943775f9\" {15065}\n        ...message
        section follows...\n        I: b002 OK URLFETCH completed\n        S: b003
        LOGOUT\n        I: * BYE See you later\n        I: b003 OK Logout successful\n
        \  Note that if data confidentiality is not required, the mail\n   Submission
        Server may omit the STARTTLS command before issuing the\n   LOGIN command.\n
        \  S: {to M} Submission Server assembles the complete message; if the\n   assembly
        succeeds, it acknowledges acceptance of the message by\n   sending 250 response
        to the last BDAT command:\n        S: 250 2.5.0 Ok, message accepted.\n   M:
        {to I} The client marks the message containing the forwarded\n   attachment
        on the IMAP server.\n        M: B0053 UID STORE 25627 +FLAGS.SILENT ($Forwarded)\n
        \       I: * 215 FETCH (UID 25627 MODSEQ (12121231000))\n        I: B0053
        OK STORE completed\n   Note: the UID STORE command shown above will only work
        if the marked\n   message is in the currently selected mailbox; otherwise,
        it requires\n   a SELECT.  As in the previous example, this command is not
        critical,\n   and can be omitted.  The untagged FETCH response is due to\n
        \  [IMAP-CONDSTORE].  The $Forwarded IMAP keyword is described in\n   Section
        5.9.\n"
      title: 8.4.2.  Message Assembly Using SMTP CHUNKING and BURL Extensions
    title: 8.4.  A New Strategy
  - contents:
    - "8.5.  Security Considerations for Pawn-Tickets\n   The so-called \"pawn-ticket\"
      authorization mechanism uses a URI, which\n   contains its own authorization
      credentials using [IMAP-URLAUTH].  The\n   advantage of this mechanism is that
      the SMTP submit [SUBMIT] server\n   cannot access any data on the [IMAP-URLAUTH]
      server without a \"pawn-\n   ticket\" created by the client.\n   The \"pawn-ticket\"
      grants access only to the specific data that the\n   SMTP submit [SUBMIT] server
      is authorized to access, can be revoked\n   by the client, and can have a time-limited
      validity.\n"
    title: 8.5.  Security Considerations for Pawn-Tickets
  - contents:
    - "8.6.  Copies of Sent Messages: The fcc Problem\n   The \"fcc problem\" refers
      to delivering a copy of a message to a\n   mailbox, or \"file carbon copy\".
      \ By far, the most common case of fcc\n   is a client leaving a copy of outgoing
      mail in a \"Sent Mail\" or\n   \"Outbox\" mailbox.\n   In the traditional strategy,
      the MUA duplicates the effort spent in\n   transmitting to the MSA by writing
      the message to the fcc destination\n   in a separate step.  This may be a write
      to a local disk file or an\n   APPEND to a mailbox on an IMAP server.  The latter
      is one of the\n   \"repetitive network data transmissions\" that represents
      the \"problem\"\n   aspect of the \"fcc problem\".\n   The BURL [SMTP-BURL]
      extension can be used to eliminate the\n   additional transmission.  The final
      message is uploaded to the\n   mailbox designed for outgoing mail by the APPEND
      command of [IMAP].\n   Note that when doing so, the client ought to use the
      $SubmitPending\n   and $Submitted IMAP keywords described in Section 5.10.  Also
      note\n   that APPEND, including when enhanced by [IMAP-CATENATE], can only\n
      \  create a single copy of the message and this is only of use on the\n   server
      that stages the outgoing message for submission.  Additional\n   copies of the
      message on the same server can be created by using one\n   or more COPY commands.\n"
    title: '8.6.  Copies of Sent Messages: The fcc Problem'
  title: 8.  Forward without Download
- contents:
  - "9.  Deployment Considerations\n   Deployment considerations are discussed extensively
    in\n   [LEMONADE-DEPLOYMENTS].\n"
  title: 9.  Deployment Considerations
- contents:
  - "10.  Security Considerations\n   Implementors are advised to examine the security
    considerations of\n   all the referenced documents.  This section merely highlights
    these,\n   and advises implementors on specific issues relating to the\n   combination
    of extensions.\n   Security considerations on Lemonade \"forward without download\"
    are\n   discussed throughout Section 8.  Additional security considerations\n
    \  can be found in [IMAP], [SUBMIT], [SIEVE], and other documents\n   describing
    other SMTP, IMAP, and Sieve extension comprising the\n   Lemonade Profile.\n   Note
    that the mandatory-to-implement authentication mechanism for\n   SMTP submission
    is described in [SMTP-AUTH].  The mandatory-to-\n   implement authentication mechanism
    for IMAP is described in [IMAP].\n"
  - contents:
    - "10.1.  Confidentiality Protection of Submitted Messages\n   When clients submit
      new messages, link protection such as [TLS]\n   guards against an eavesdropper
      seeing the contents of the submitted\n   message.  It is worth noting, however,
      that even if TLS is not used,\n   the security risks are no worse if BURL is
      used to reference the text\n   than if the text is submitted directly.  If BURL
      is not used, an\n   eavesdropper gains access to the full text of the message.
      \ If BURL\n   is used, the eavesdropper may or may not be able to gain such
      access,\n   depending on the form of BURL used.  For example, some forms restrict\n
      \  use of the URL to an entity authorized as a Submission Server or a\n   specific
      user.\n"
    title: 10.1.  Confidentiality Protection of Submitted Messages
  - contents:
    - "10.2.  TLS\n   When Lemonade clients use the BURL extension for mail submission,
      an\n   extension that requires sending a URLAUTH token to the mail\n   Submission
      Server, such a token should be protected from interception\n   to avoid a replay
      attack that may disclose the contents of the\n   message to an attacker.  [TLS]-based
      encryption of both the IMAP\n   session that issues GENURLAUTH and the mail
      submission path will\n   provide protection against this attack.\n   Lemonade-compliant
      mail Submission Servers SHOULD use TLS-protected\n   IMAP connections when fetching
      message content using the URLAUTH\n   token provided by the Lemonade client.\n
      \  When a client uses SMTP STARTTLS to send a BURL command that\n   references
      non-public information, there is a user expectation that\n   the entire message
      content will be treated confidentially.  To meet\n   this expectation, the message
      Submission Server SHOULD use STARTTLS\n   or a mechanism providing equivalent
      data confidentiality when\n   fetching the content referenced by that URL.\n"
    title: 10.2.  TLS
  - contents:
    - "10.3.  Additional Extensions and Deployment Models\n   This specification provides
      no additional security measures beyond\n   those in the referenced Internet
      Mail and Lemonade documents.\n   We note, however, the security risks associated
      with:\n   o  Outband notifications\n   o  Server configuration by client\n   o
      \ Client configuration by server\n   o  Presence of proxy servers\n   o  Presence
      of servers as intermediaries\n   o  In general, the deployment models considered
      by OMA MEM that are\n      not conventional IETF deployment models\n   o  Measures
      to address a perceived need to traverse firewalls and\n      mobile network
      intermediaries\n   Deployments that provide these additional services or operate
      in\n   these environments need to consult the security considerations for\n
      \  the relevant standards and organizational security practices.\n"
    title: 10.3.  Additional Extensions and Deployment Models
  title: 10.  Security Considerations
- contents:
  - "11.  IANA Considerations\n   IMAP4 capabilities are registered by IETF Review,
    as defined in\n   [RFC5226].  This document defines the URL-PARTIAL IMAP capability\n
    \  (Section 5.7.1).  IANA added this extension to the IANA IMAP\n   Capability
    registry.\n"
  title: 11.  IANA Considerations
- contents:
  - "12.  Changes since RFC 4550\n   When compared to RFC 4550, this document adds
    the following\n   additional requirements on a Lemonade compliant IMAP server:\n
    \  IMAP extensions:  BINARY, COMPRESS=DEFLATE, CONTEXT=SEARCH,\n      CONTEXT=SORT,
    CONVERT, ENABLE, ESEARCH, ESORT, I18NLEVEL=1,\n      NOTIFY, QRESYNC, SASL-IR,
    SORT, URL-PARTIAL;\n   IMAP keywords:  $SubmitPending, $Submitted.\n   Other requirements:
    \ Require any Lemonade compliant IMAP server to\n      support the CAPABILITY
    response code.\n   When compared to RFC 4550, this document adds the following
    new\n   requirements on a Lemonade compliant Message Delivery Agents:\n   Support
    for the Sieve filtering language, together with the following\n   Sieve extensions:\n
    \  ENOTIFY, IMAP4FLAGS, RELATIONAL, VACATION, VARIABLES, comparator-\n   i;unicode-casemap.\n
    \  When compared to RFC 4550, this document recommends use of the\n   DEFLATE
    compression method for TLS.  All other requirements remain\n   the same.\n   Additionally,
    the following changes/improvments were done to RFC 4550\n   (the list might be
    incomplete):\n      A new section with some additional requirements on Lemonade
    Mail\n      User Agents was added, in particular they are required to support\n
    \     Format=flowed parameter to the text/plain media type.\n      Usage of the
    $Forwarded IMAP keyword was clarified.\n      Forward-without-download examples
    were corrected and extended.\n      Added a new section describing in-band and
    out-of-band\n      notifications from a Lemonade compliant mailstore.\n"
  title: 12.  Changes since RFC 4550
- contents:
  - "13.  Acknowledgements\n   The editors acknowledge and appreciate the work and
    comments of the\n   IETF Lemonade working group and the OMA MEM working group.\n
    \  In particular, the editors would like to thank Eric Burger, Glenn\n   Parsons,
    Randall Gellens, Filip Navara, Zoltan Ordogh, Greg\n   Vaudreuil, and Fan Xiaohui
    for their comments and reviews.\n"
  title: 13.  Acknowledgements
- contents:
  - '14.  References

    '
  - contents:
    - "14.1.  Normative References\n   [FLOWED]   Gellens, R., \"The Text/Plain Format
      and DelSp Parameters\",\n              RFC 3676, February 2004.\n   [IMAP]     Crispin,
      M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n              4rev1\", RFC
      3501, March 2003.\n   [IMAP-BINARY]\n              Nerenberg, L., \"IMAP4 Binary
      Content Extension\", RFC 3516,\n              April 2003.\n   [IMAP-CATENATE]\n
      \             Resnick, P., \"Internet Message Access Protocol (IMAP)\n              CATENATE
      Extension\", RFC 4469, April 2006.\n   [IMAP-COMPRESS]\n              Gulbrandsen,
      A., \"The IMAP COMPRESS Extension\", RFC 4978,\n              August 2007.\n
      \  [IMAP-CONDSTORE]\n              Melnikov, A. and S. Hole, \"IMAP Extension
      for Conditional\n              STORE Operation or Quick Flag Changes Resynchronization\",\n
      \             RFC 4551, June 2006.\n   [IMAP-CONTEXT]\n              Cridland,
      D. and C. King, \"Contexts for IMAP4\", RFC 5267,\n              July 2008.\n
      \  [IMAP-CONVERT]\n              Melnikov, A. and P. Coates, \"Internet Message
      Access\n              Protocol - CONVERT Extension\", RFC 5259, July 2008.\n
      \  [IMAP-ENABLE]\n              Gulbrandsen, A. and A. Melnikov, \"The IMAP
      ENABLE\n              Extension\", RFC 5161, March 2008.\n   [IMAP-ESEARCH]\n
      \             Melnikov, A. and D. Cridland, \"IMAP4 Extension to SEARCH\n              Command
      for Controlling What Kind of Information Is\n              Returned\", RFC 4731,
      November 2006.\n   [IMAP-I18N]\n              Newman, C., Gulbrandsen, A., and
      A. Melnikov, \"Internet\n              Message Access Protocol Internationalization\",
      RFC 5255,\n              June 2008.\n   [IMAP-IDLE]\n              Leiba, B.,
      \"IMAP4 IDLE command\", RFC 2177, June 1997.\n   [IMAP-LITERAL+]\n              Myers,
      J., \"IMAP4 non-synchronizing literals\", RFC 2088,\n              January 1997.\n
      \  [IMAP-NAMESPACE]\n              Gahrns, M. and C. Newman, \"IMAP4 Namespace\",
      RFC 2342,\n              May 1998.\n   [IMAP-NOTIFY]\n              Gulbrandsen,
      A., King, C., and A. Melnikov, \"The IMAP\n              NOTIFY Extension\",
      RFC 5465, February 2009.\n   [IMAP-QRESYNC]\n              Melnikov, A., Cridland,
      D., and C. Wilson, \"IMAP4\n              Extensions for Quick Mailbox Resynchronization\",
      RFC 5162,\n              March 2008.\n   [IMAP-SASL-IR]\n              Siemborski,
      R. and A. Gulbrandsen, \"IMAP Extension for\n              Simple Authentication
      and Security Layer (SASL) Initial\n              Client Response\", RFC 4959,
      September 2007.\n   [IMAP-SORT]\n              Crispin, M. and K. Murchison,
      \"Internet Message Access\n              Protocol - SORT and THREAD Extensions\",
      RFC 5256,\n              June 2008.\n   [IMAP-UIDPLUS]\n              Crispin,
      M., \"Internet Message Access Protocol (IMAP) -\n              UIDPLUS extension\",
      RFC 4315, December 2005.\n   [IMAP-URL]\n              Melnikov, A. and C. Newman,
      \"IMAP URL Scheme\", RFC 5092,\n              November 2007.\n   [IMAP-URLAUTH]\n
      \             Crispin, M., \"Internet Message Access Protocol (IMAP) -\n              URLAUTH
      Extension\", RFC 4467, May 2006.\n   [KEYWORDS]\n              Bradner, S.,
      \"Key words for use in RFCs to Indicate\n              Requirement Levels\",
      BCP 14, RFC 2119, March 1997.\n   [SIEVE]    Guenther, P. and T. Showalter,
      \"Sieve: An Email Filtering\n              Language\", RFC 5228, January 2008.\n
      \  [SIEVE-IMAP4FLAGS]\n              Melnikov, A., \"Sieve Email Filtering:
      Imap4flags\n              Extension\", RFC 5232, January 2008.\n   [SIEVE-NOTIFY]\n
      \             Melnikov, A., Leiba, B., Segmuller, W., and T. Martin,\n              \"Sieve
      Email Filtering: Extension for Notifications\",\n              RFC 5435, January
      2009.\n   [SIEVE-RELATIONAL]\n              Segmuller, W. and B. Leiba, \"Sieve
      Email Filtering:\n              Relational Extension\", RFC 5231, January 2008.\n
      \  [SIEVE-VACATION]\n              Showalter, T. and N. Freed, \"Sieve Email
      Filtering:\n              Vacation Extension\", RFC 5230, January 2008.\n   [SIEVE-VARIABLES]\n
      \             Homme, K., \"Sieve Email Filtering: Variables Extension\",\n              RFC
      5229, January 2008.\n   [SMTP-8BITMIME]\n              Klensin, J., Freed, N.,
      Rose, M., Stefferud, E., and D.\n              Crocker, \"SMTP Service Extension
      for 8bit-MIMEtransport\",\n              RFC 1652, July 1994.\n   [SMTP-AUTH]\n
      \             Siemborski, R. and A. Melnikov, \"SMTP Service Extension\n              for
      Authentication\", RFC 4954, July 2007.\n   [SMTP-BINARYMIME]\n              Vaudreuil,
      G., \"SMTP Service Extensions for Transmission\n              of Large and Binary
      MIME Messages\", RFC 3030,\n              December 2000.\n   [SMTP-BURL]\n              Newman,
      C., \"Message Submission BURL Extension\", RFC 4468,\n              May 2006.\n
      \  [SMTP-DSN]\n              Moore, K., \"Simple Mail Transfer Protocol (SMTP)
      Service\n              Extension for Delivery Status Notifications (DSNs)\",\n
      \             RFC 3461, January 2003.\n   [SMTP-PIPELINING]\n              Freed,
      N., \"SMTP Service Extension for Command\n              Pipelining\", STD 60,
      RFC 2920, September 2000.\n   [SMTP-SIZE]\n              Klensin, J., Freed,
      N., and K. Moore, \"SMTP Service\n              Extension for Message Size Declaration\",
      STD 10, RFC 1870,\n              November 1995.\n   [SMTP-STATUSCODES]\n              Freed,
      N., \"SMTP Service Extension for Returning Enhanced\n              Error Codes\",
      RFC 2034, October 1996.\n   [SMTP-TLS]\n              Hoffman, P., \"SMTP Service
      Extension for Secure SMTP over\n              the Transport Layer Security\",
      RFC 3207, February 2002.\n   [SUBMIT]   Gellens, R. and J. Klensin, \"Message
      Submission for Mail\",\n              RFC 4409, April 2006.\n   [TLS]      Dierks,
      T. and E. Rescorla, \"The Transport Layer Security\n              (TLS) Protocol
      Version 1.2\", RFC 5246, August 2008.\n   [TLS-COMP]\n              Hollenbeck,
      S., \"Transport Layer Security Protocol\n              Compression Methods\",
      RFC 3749, May 2004.\n   [UNICODE-CASEMAP]\n              Crispin, M., \"i;unicode-casemap
      - Simple Unicode Collation\n              Algorithm\", RFC 5051, October 2007.\n"
    title: 14.1.  Normative References
  - contents:
    - "14.2.  Informative References\n   [ESMTP]    Klensin, J., \"Simple Mail Transfer
      Protocol\", RFC 5321,\n              October 2008.\n   [Err1807]  RFC Errata,
      Errata ID 1807, RFC 5162,\n              <http://www.rfc-editor.org>.\n   [Err1808]
      \ RFC Errata, Errata ID 1808, RFC 5162,\n              <http://www.rfc-editor.org>.\n
      \  [Err1809]  RFC Errata, Errata ID 1809, RFC 5162,\n              <http://www.rfc-editor.org>.\n
      \  [Err1810]  RFC Errata, Errata ID 1810, RFC 5162,\n              <http://www.rfc-editor.org>.\n
      \  [FINGER-HACK]\n              Gellens, R., \"Simple New Mail Notification\",
      RFC 4146,\n              August 2005.\n   [IMAP-FILTERS]\n              Melnikov,
      A. and C. King, \"IMAP4 Extension for Named\n              Searches (Filters)\",
      RFC 5466, February 2009.\n   [IMAP-SYNC-HOWTO]\n              Melnikov, A.,
      \"Synchronization Operations for Disconnected\n              IMAP4 Clients\",
      RFC 4549, June 2006.\n   [LEMONADE-ARCH]\n              Burger, E. and G. Parsons,
      \"LEMONADE Architecture -\n              Supporting Open Mobile Alliance (OMA)
      Mobile Email (MEM)\n              Using Internet Mail\", RFC 5442, March 2009.\n
      \  [LEMONADE-DEPLOYMENTS]\n              Gellens, R., \"Deployment Considerations
      for Lemonade-\n              Compliant Mobile Email\", BCP 143, RFC 5383, October
      2008.\n   [LEMONADE-NOTIFICATIONS]\n              Gellens, R., Ed., \"Lemonade
      Notifications Architecture\",\n              RFC 5551, August 2009.\n   [MANAGESIEVE]\n
      \             Melnikov, A. and T. Martin, \"A Protocol for Remotely\n              Managing
      Sieve Scripts\", Work in Progress, September 2008.\n   [METADATA]\n              Daboo,
      C., \"The IMAP METADATA Extension\", RFC 5464,\n              February 2009.\n
      \  [OMA-EMN]  Open Mobile Alliance, \"Open Mobile Alliance Email\n              Notification
      Version 1.0\", OMA http://\n              www.openmobilealliance.org/Technical/release_program/\n
      \             emn_v10.aspx, October 2007.\n   [OMA-MEM-ARCH]\n              Open
      Mobile Alliance, \"Mobile Email Architecture\n              Document\", OMA
      (Work in Progress),\n              http://www.openmobilealliance.org/, October
      2005.\n   [OMA-MEM-REQ]\n              Open Mobile Alliance, \"Mobile Email
      Requirements\n              Document\", OMA http://www.openmobilealliance.org/\n
      \             release_program/docs/RD/\n              OMA-RD-MobileEmail-V1_0_20051018-C.pdf,
      Oct 2005.\n   [RFC5068]  Hutzler, C., Crocker, D., Resnick, P., Allman, E.,
      and T.\n              Finch, \"Email Submission Operations: Access and\n              Accountability
      Requirements\", BCP 134, RFC 5068,\n              November 2007.\n   [RFC5226]
      \ Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n
      \  [RFC5598]  Crocker, D., \"Internet Mail Architecture\", RFC 5598,\n              July
      2009.\n"
    title: 14.2.  Informative References
  title: 14.  References
- contents:
  - "Appendix A.  Errata\n   Errata ID: 1807 [Err1807]\n   Status: Verified\n   Type:
    Technical\n   Reported By: Timo Sirainen\n   Date Reported: 2009-07-14\n   Verifier
    Name: Alexey Melnikov\n   Date Verified: 2009-07-18\n   Section 1 says:\n   It
    should say:\n   Once a \"CONDSTORE enabling command\" is issued by the client,
    the\n   server MUST automatically include both UID and mod-sequence data in\n
    \  all subsequent untagged FETCH responses (until the connection is\n   closed),
    whether they were caused by a regular STORE/UID STORE, a\n   STORE/UID STORE with
    UNCHANGEDSINCE modifier, or an external agent.\n   Note that this rule doesn't
    affect untagged FETCH responses caused by\n   a FETCH command that doesn't include
    UID and/or MODSEQ FETCH data\n   item, or UID FETCH without the MODSEQ FETCH data
    item.\n   Notes:\n   Rationale:\n   It's very difficult for clients to make use
    of unsolicited FETCH\n   responses without the UID field. This is made even worse
    by the text\n   that says \"servers SHOULD NOT send UIDs for previously expunged\n
    \  messages [in VANISHED replies]\". Since it's not a MUST NOT, a\n   conversation
    with an RFC compliant server could be for example:\n   A1 NOOP\n   * 0 EXISTS\n
    \  A1 OK\n   A2 NOOP\n   * 10 EXISTS\n   * VANISHED 1000:2000\n   * 3 FETCH (FLAGS
    (\\Seen) MODSEQ (14749))\n   * 5 FETCH (FLAGS (\\Seen) MODSEQ (14749))\n   * VANISHED
    2000:3000\n   A2 OK NOOP Completed\n   The client couldn't do anything with the
    information from FETCH\n   replies, because it can't know what messages they refer
    to.\n  Errata ID: 1808 [Err1808]\n  Status: Verified\n  Type: Technical\n  Reported
    By: Timo Sirainen\n  Date Reported: 2009-07-14\n  Verifier Name: Alexey Melnikov\n
    \ Date Verified: 2009-07-18\n  Section 3.4 says:\n  If at least one message got
    expunged, the server MUST send\n  the updated per-mailbox modification\n  sequence
    using the HIGHESTMODSEQ response code (defined in\n  [CONDSTORE]) in the tagged
    OK response.\n  Example:    C: A202 CLOSE\n              S: A202 OK [HIGHESTMODSEQ
    20010715194045319] done\n  It should say:\n  The server MUST NOT send the updated
    per-mailbox modification\n  sequence using the HIGHESTMODSEQ response code (defined
    in\n  [CONDSTORE]) in the tagged OK response, as this might cause loss of\n  synchronization
    on the client.\n  Example:    C: A202 CLOSE\n              S: A202 OK done\n  Notes:\n
    \ Rationale:\n  The HIGHESTMODSEQ can't be used reliably unless server sends to
    client\n  all changes done by other clients. Even then it's difficult for both\n
    \ clients and servers to implement this. For example:\n  C1: 2 STORE 1 +FLAGS.SILENT
    \\Deleted\n  S1: * 1 FETCH (MODSEQ 1)\n  S1: 2 OK\n  C2: 1 STORE 2 +FLAGS.SILENT
    \\Deleted\n  S1: * 2 FETCH (MODSEQ 2)\n  S2: 1 OK\n  C1: 3 CLOSE\n  S1: 3 [HIGHESTMODSEQ
    3]\n  The client probably thought that only message 1 was expunged, so it\n  doesn't
    register the second expunge. And it probably never will if it\n  uses QRESYNC
    to find out only about new expunges.\n  And even worse example would be if the
    second client had also removed\n  the \\Deleted flag from message 1. Then the
    first client would have\n  registered wrong message to be expunged.\n  Errata
    ID: 1809 [Err1809]\n  Status: Verified\n  Type: Technical\n  Reported By: Timo
    Sirainen\n  Date Reported: 2009-07-14\n  Verifier Name: Alexey Melnikov\n  Date
    Verified: 2009-07-18\n  Section 5 says:\n  After completing a full synchronization,
    the client MUST also take\n  note of any unsolicited MODSEQ FETCH data items received
    from the\n  server.  Whenever the client receives a tagged response to a command,\n
    \ it calculates the highest value among all MODSEQ FETCH data items\n  received
    since the last tagged response.  If this value is bigger\n  than the client's
    copy of the HIGHESTMODSEQ value, then the client\n  MUST use this value as its
    new HIGHESTMODSEQ value.\n  Note: It is not safe to update the client's copy of
    the HIGHESTMODSEQ\n  value with a MODSEQ FETCH data item value as soon as it is
    received\n  because servers are not required to send MODSEQ FETCH data items in\n
    \ increasing modseqence order.  This can lead to the client missing\n  some changes
    in case of connectivity loss.\n  It should say:\n  After completing a full synchronization,
    the client MUST also take\n  note of any unsolicited MODSEQ FETCH data items and
    HIGHESTMODSEQ\n  response codes received from the server.  Whenever the client
    receives\n  a tagged response to a command, it checks the received unsolicited\n
    \ responses to calculate the new HIGHESTMODSEQ value.  If the\n  HIGHESTMODSEQ
    response code is received, the client MUST use it even\n  if it has seen higher
    mod-sequences.  Otherwise, the client calculates\n  the highest value among all
    MODSEQ FETCH data items received since the\n  last tagged response.  If this value
    is bigger than the client's copy\n  of the HIGHESTMODSEQ value, then the client
    MUST use this value as its\n  new HIGHESTMODSEQ value.\n  Example:    C: A1 STORE
    1:2 (UNCHANGEDSINCE 96) +FLAGS.SILENT \\Seen\n              S: * 1 FETCH (UID
    6 MODSEQ (103))\n              S: * 2 FETCH (UID 7 MODSEQ (101))\n              S:
    * OK [HIGHESTMODSEQ 99] VANISHED reply with\n                        MODSEQ 100
    is delayed\n              S: A1 OK [MODIFIED 3] done\n              C: A2 STORE
    3 +FLAGS.SILENT \\Seen\n              S: * 3 FETCH (UID 8 MODSEQ (104))\n              S:
    A2 OK [HIGHESTMODSEQ 99] Still delaying VANISHED\n              C: A3 NOOP\n              S:
    * VANISHED 8\n              S: A3 OK [HIGHESTMODSEQ 104] done\n  Note: It is not
    safe to update the client's copy of the HIGHESTMODSEQ\n  value with a MODSEQ FETCH
    data item value as soon as it is received\n  because servers are not required
    to send MODSEQ FETCH data items in\n  increasing modseqence order.  Some commands
    may also delay EXPUNGE\n  (or VANISHED) replies with smaller mod-sequences. These
    can lead to\n  the client missing some changes in case of connectivity loss.\n
    \ Notes:\n  Rationale:\n  Otherwise clients could lose changes in case of connectivity
    loss.\n  Errata ID: 1810 [Err1810]\n  Status: Verified\n  Type: Technical\n  Reported
    By: Timo Sirainen\n  Date Reported: 2009-07-14\n  Verifier Name: Alexey Melnikov\n
    \ Date Verified: 2009-07-18\n  Section 1 says:\n  It should say:\n  Server implementing
    QRESYNC MUST send untagged events to client in a\n  way that client doesn't lose
    any changes in case of connectivity loss.\n  In particular this means that if
    server sends MODSEQ FETCH data items\n  while EXPUNGE (or VANISHED) replies with
    lower mod-sequences are being\n  delayed, the server MUST send HIGHESTMODSEQ response
    code with a lower\n  value than the EXPUNGE's mod-sequence. See example in section
    5.\n  Notes:\n  This is related to the other errata in section 5, which describes
    what\n  the client's behavior should be. This describes what the server's\n  behavior
    should be. Would have been nice to put them into the same\n  section, but that
    probably would require larger changes.\n"
  title: Appendix A.  Errata
- contents:
  - "Authors' Addresses\n   Dave Cridland (editor)\n   Isode Limited\n   5 Castle
    Business Village\n   36 Station Road\n   Hampton, Middlesex  TW12 2BX\n   UK\n
    \  EMail: dave.cridland@isode.com\n   Alexey Melnikov (editor)\n   Isode Limited\n
    \  5 Castle Business Village\n   36 Station Road\n   Hampton, Middlesex  TW12
    2BX\n   UK\n   EMail: Alexey.Melnikov@isode.com\n   Stephane H. Maes (editor)\n
    \  Oracle\n   MS 4op634, 500 Oracle Parkway\n   Redwood Shores, CA  94539\n   USA\n
    \  Phone: +1-203-300-7786\n   EMail: stephane.maes@oracle.com\n"
  title: Authors' Addresses
