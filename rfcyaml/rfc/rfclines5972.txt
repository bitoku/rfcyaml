Abstract This document describes state machines for the General Internet Signaling Transport (GIST).
The states of GIST nodes for a given flow and their transitions are presented in order to illustrate how GIST may be implemented.
The state machines described in this document are illustrative of how the GIST protocol defined in [1] may be implemented for the GIST nodes in different locations of a flow path.
The state machines are informative only.
Implementations may achieve the same results using different methods.
There are two types of possible entities for GIST signaling:  GIST querying node: GIST node that initiates the discovery of the next peer;
GIST node that is the discovered next peer.
We describe a set of state machines for these entities to illustrate how GIST may be implemented.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [2].
Notational Conventions Used in State Diagrams
The following text is reused from [3], and the state diagrams are based on the conventions specified in [4], Section 8.2.1.
Additional state machine details are taken from [5].
RFC 4137 [3] reproduced the following text from Section 8.2.1 of IEEE 802 1X 2004 [4].
State diagrams are used to represent the operation of the protocol by a number of cooperating state machines, each comprising a group of connected, mutually exclusive states.
Only one state of each machine can be active at any given time.
All permissible transitions between states are represented by arrows, the arrowhead denoting the direction of the possible transition.
Labels attached to arrows denote the condition(s) that must be met in order for the transition to take place.
All conditions are expressions that evaluate to TRUE or FALSE; if a condition evaluates to TRUE, then the condition is met.
The label UCT denotes an unconditional transition (i.e., UCT always evaluates to TRUE).
A transition that is global in nature (i.e., a transition that occurs from any of the possible states if the condition attached to the arrow is met) is denoted by an open arrow; i.e., no specific state is identified as the origin of the transition.
When the condition associated with a global transition is met, it supersedes all other exit conditions including UCT.
The special global condition BEGIN supersedes all other global conditions, and once asserted it remains asserted until all state blocks have executed to the point that variable assignments and other consequences of their execution remain unchanged.
On entry to a state, the procedures defined for the state (if any) are executed exactly once, in the order that they appear on the page.
Each action is deemed to be atomic; i.e., execution of a procedure completes before the next sequential procedure starts to execute.
No procedures execute outside a state block.
The procedures in only one state block execute at a time, even if the conditions for execution of state blocks in different state machines are satisfied, and all procedures in an executing state block complete execution before the transition to and execution of any other state block occurs.
That is, the execution of any state block appears to be atomic with respect to the execution of any other state block, and the transition condition to that state from the previous state is TRUE when execution commences.
The order of execution of state blocks in different state machines is undefined except as constrained by their transition conditions.
A variable that is set to a particular value in a state block retains this value until a subsequent state block executes a procedure that modifies the value.
On completion of all the procedures within a state, all exit conditions for the state (including all conditions associated with global transitions) are evaluated continuously until one of the conditions is met.
The label ELSE denotes a transition that occurs if none of the other conditions for transitions from the state are met (i.e., ELSE evaluates to TRUE if all other possible exit conditions from the state evaluate to FALSE).
Where two or more exit conditions with the same level of precedence become TRUE simultaneously, the choice as to which exit condition causes the state transition to take place is arbitrary.
In addition to the above notation, there are a couple of clarifications specific to this document.
First, all boolean variables are initialized to FALSE before the state machine execution begins.
Second, the following notational shorthand is specific to this document: <variable
Execution of a statement of this form will result in <variable> having a value of exactly one of the expressions.
The logic for which of those expressions gets executed is outside of the state machine and could be environmental, configurable, or based on another state machine such as that of the method.
; Used as a terminating delimiter for actions within state boxes.
Where a state box contains multiple actions, the order of execution follows the normal English language conventions for reading text.
The value of the expression to the right of the operator is assigned to the variable to the left of the operator.
Where this operator is used to define multiple assignments, e.g., a   b   X, the action causes the value of the expression following the right most assignment operator to be assigned to all of the variables that appear to the left of the right most assignment operator. !
If the boolean expression following the "if" evaluates to TRUE, then the action following the "then" is executed.
statement N } Compound statement.
Braces are used to group statements that are executed together as if they were a single statement. !
Evaluates to TRUE if the expression to the left of the operator is not equal in value to the expression to the right.
Evaluates to TRUE if the expression to the left of the operator is equal in value to the expression to the right.
Evaluates to TRUE if the value of the expression to the left of the operator is greater than the value of the expression to the right.
Less than or equal to.
Evaluates to TRUE if the value of the expression to the left of the operator is either less than or equal to the value of the expression to the right.
Increment the preceding integer operator by 1.
Throughout the document we use terms defined in [1], such as Query, Response, and Confirm.
The state machine represents the handling of GIST messages that match a Message Routing State's Message Routing Information (MRI), NSIS Signaling Layer Protocol identifier (NSLPID), and session identifier (SID) and with no protocol errors.
Separate parallel instances of the state machines should handle messages for different Message Routing States (MRSs).
The state machine represents the states and transitions of the upstream and downstream peers of the Message Routing State.
For simplification, not all objects included in a message are shown.
Only those that are significant for the case are shown.
State machines do not present handling of messages that are not significant for management of the states.
The state machines presented in this document do not cover all functions of a GIST node.
Functionality of message forwarding, transmission of NSLP data without MRS establishment, and providing of the received messages to the appropriate MRS, we refer to as "lower  level pre processing" step.
Pre processing provides to the appropriate MRS state machine only the messages that are matched against waiting Query/Response cookies, or the triplet (MRI, NSLPID, SID) of the established MRS.
This is represented by "rx  " events in the state machines.
Management of messaging associations (MAs) is considered in the document via procedures, events, and variables, which describe MA interaction with the MRS state machines.
A state machine for MA management is not explicitly presented.
Data: Transmit of Data message.
NSLP/GIST API message informing NSLP application of unsuccessful delivery of a message Tg RecvMsg:
NSLP/GIST API message that provides received message to NSLP application.
NSLP/GIST API message that informs NSLP application of change in MRS.
downstream/upstream MRS: Install new Message Routing State and save the corresponding peer state info (IP address and UDP port, or pointer to the used MA) for the current Message Routing State or update the corresponding peer state info.
Delete MRS: Delete installed downstream/upstream peer's info for the current Message Routing State, and delete the Message Routing State if required.
Refresh MRS: Refreshes installed MRS.
: Save NSLP messages in a queue until conditions for their sending are present, e.g., a required MA association is established.
The sender of the received data message is matched against the installed peer info in the MRS.
Stop using shared MA: Stop using shared MA.
If the shared MA is no longer being used by any other MRSs, it depends on the local policy whether it is deleted or kept.
Triggers establishment of a new MA.
/Restart a timer variable (Section 5.3):
/Restart of a certain timer.
Install/Update/Delete UpstreamPeerInfo variable (Section 5.3):
Management of upstream peer info in state machine of responding node.
Common Events Rx Query: Receive of Query message.
Rx Response: Receive of Response message.
Rx Confirm: Receive of Confirm message.
Rx Data: Receive of Data message.
NSLP/GIST API message from NSLP application that requests transmission of a NSLP message.
NSLP/GIST API message providing info for the lifetime of a Routing State (RS), required by the application.
" represents the cancellation of established RSs/MAs, invoked by the NSLP application.
NSLP/GIST API notification from NSLP application for path change.
Tg ERROR: General Error event / system level error.
Tg MA Established: A new MA has been successfully established.
Error event with used MA.
Timeout a timer variable (Section 5.3):
Timeout of a certain timer.
Common Variables Variables listed in this section are defined as:  Specific information carried in the received messages.
Conditions that are results of processes not defined in the state machine model.
State machine logic is based on these general conditions and message parameters.
The type of mode and destination info is determined by NSLP application parameters and local GIST policy.
Here it is represented by the common variables D mode, C mode, and MAinfo.
The message MUST be transmitted in C mode.
This is specified by "Message transfer attributes" set by NSLP application to any of the following values: "Reliability" is set to TRUE.
Security" is set to values that request secure handling of a message. "
Local processing" is set to values that require services offered by C mode (e.g., congestion control) [1].
The message MUST be transmitted in D mode.
This is specified by local policy rules.
If the "Message transfer attributes" are not set by NSLP application to any of the following values, then: "Reliability" is set to TRUE.
Security" is set to values that request special security handling of a message. "
Local processing" is set to values that require services offered by C mode [1].
GIST message parameters describing the required MA or proposed MA, e.g., "Stack proposal" and "Stack Configuration Data" [1].
Responder Cookie that is being sent by the responding node with the Response message in case that its local policy requires a confirmation from the querying node.
ConfirmRequired: Indicator that a Confirm message is required by the local policy rule for installation of a new MRS.
NewPeer: Indicator that a Response message is received from a new responding peer.
Indicator that an existing MA will be reused in data transfer between peers.
Upstream peer info that is saved in an established MRS.
Message Routing State lifetime timer in querying node.
Message Routing State lifetime timer in responding node.
Message Routing State refresh timer in querying node.
Timer for the waiting period for Response message in querying node.
Timer for the waiting period for Confirm message in responding node.
Data sent by responding node via a Response message that indicates loss of Confirm message. 6.
The following section presents the state machine diagrams of GIST peers.
RFC 5972 is published as a .txt file.
is being published as well.
In the .pdf document, the state machine diagrams are depicted in detail.
All state machine information (triggering event, action taken, and variable status) is represented in the diagrams.
In the .txt document, state machine diagrams depict only transition numbers.
Following each diagram is a list of state transition descriptions.
Complete transition details (triggering event, action taken, and variable status) are given in state transition tables in Appendix A. Please use the .pdf version whenever possible.
It is the clearer representation of the state machine.
In case of a difference between the two documents, please refer to the .pdf version.
The state machine diagram of the GIST querying node is below.
Please refer to Appendix A.1 for complete transition details (triggering event, action taken, and variable status).
State Machine for GIST Querying Node 1  )
An initial request from the NSLP application is received, which triggers Query messages requesting either D mode or C mode.
Depending on the node's local policy, the NSLP data might be piggybacked in the Query requesting D mode.
The Query may carry MAinfo if C mode transport is needed.
No Response timer expires, and the maximum number of retries has been reached.
The NSLP application is notified of the GIST peer discovery failure.
A Data message is received.
It is checked to see whether its sender matches the installed downstream peer info in the MRS; if so, it is processed.
In WaitResponse state, this event might happen in the process of an MA upgrade, when the downstream peer is still not aware of establishment of the new MA.
The NSLP application provides data for sending.
NSLP data is queued because the downstream peer is not discovered or the required MA is still not established.
A Response message is received.
If a D mode connection is requested or the available MA can be reused for the requested C mode, the MRS is established.
7 )  Response message is received.
If a C mode connection must be established, and there is no available MA to be reused, MA establishment is initiated and the system waits for it to be completed.
NSLP application is notified for unsuccessful message delivery.
The NSLP application provides data for sending, and the requested transport parameters require an upgrade of the established MRS from D mode/C mode to C mode.
Or, the NSLP application notifies the GIST instance of the path change.
As a result, downstream GIST peer discovery is initiated.
The MRS lifetime expires or the NSLP application notifies that the MRS is no longer needed.
If not needed, the MA is deleted, too.
The NSLP application is notified of the MRS change.
The path change is detected as a Response message from a new downstream GIST peer is received.
A new MA must be established for the requested C mode.
A new MA is established.
The queued NSLP data is sent.
T Refresh QNode timer expires.
The Query message is sent.
The NSLP application provides data for sending.
It is sent via Data message towards the downstream GIST peer.
The Response message from the downstream GIST peer is received.
The peer is not changed.
The MRS is refreshed (T Refresh QNode timer is restarted).
The path change is detected as a Response message from a new downstream GIST peer is received.
D mode is requested, or the existing MA can be reused for the requested C mode.
The responding peer indicates that it has not received a Confirm message and it has no established upstream MRS.
The Confirm message is resent.
A general error or system level error occurs.
If not needed, the MA is deleted, too.
The NSLP application is notified of the MRS change.
Response and Confirm messages might be sent either in D mode or C mode, before or after MA establishment, depending on the node's local three way handshake policy and the availability of the MAs to be reused.
Depending on GIST local policy, NSLPdata might be sent as the payload of Query and Confirm messages (piggybacking).
State Machine for GIST Responding Node
The GIST responding node state machine diagram is below.
Please refer to Appendix A.2 for complete transition details (triggering event, action taken, and variable status).
State Machine for GIST Responding Node 1)
A Query message is received.
The MRS is installed immediately because local policy permits it.
The Query message might carry piggybacked NSLP data that will be provided to the NSLP application.
A Query message is received.
Local policy requires an explicit Confirm message for MRS installation.
The Query message might carry piggybacked NSLP data that will be provided to the NSLP application.
Note that all cases of lost handshake GIST messages are handled only by the GIST querying node via resend of the Query message.
A Query message is received again.
This means that the sent Response message has not been received by the upstream GIST peer.
The Response message is resent.
A Confirm message is received that causes installation of the upstream MRS. 6)
In case of a lost Confirm message, data messages might be received from the upstream GIST node (it is unaware of the lost Confirm message).
A Response message indicating the loss of the Confirm is sent back to the upstream GIST node.
A Query message is received (from either an existing upstream GIST node or a new upstream GIST node) with a request to change the used GIST operation mode (from D mode/C mode to C mode, if available; otherwise, it stays the same).
Local policy requires an explicit Confirm message for MRS installation.
The MRS lifetime expires or the NSLP application notifies that the MRS is no longer needed.
If used and not needed, the MA is deleted, too.
The NSLP application is notified of the MRS change.
The NSLP application provides data for sending.
NSLP data is sent if the discovery process is successfully accomplished, or it is queued if a Confirm message is still expected to confirm establishment of an MA.
A Query message is received.
If it is sent from a new upstream GIST node, then there is a path change.
Local policy does not need an explicit Confirm message for MRS installation.
The MRS data is updated.
A Query message is received with a request to change the used GIST operation mode (from D mode/C mode to C mode, if available; otherwise, it stays the same).
Local policy does not need an explicit Confirm message for MRS installation.
The MRS data is updated.
A Data message is received.
Data messages are accepted only if the complete MRS is installed, e.g., the upstream peer info is installed.
If not, then a Confirm message is expected and the Data message is not accepted.
A Response message indicating the loss of the Confirm is sent back to the upstream GIST node.
A Confirm message is received.
It accomplishes assignment of an existing MA (or establishment of a new MA) needed for data transfer between peers.
The information for the used MA is installed as the upstream peer info.
A general error or system level error occurs.
If not needed, the MA is deleted, too.
The NSLP application is notified of the MRS change.
Security Considerations This document does not raise new security considerations.
Security considerations are addressed in the GIST specification [1] and in [6].
The state transition tables below represent the state diagrams in ASCII format.
Please use the .pdf version whenever possible.
It is the clearer representation of the state machine.
For each state there is a separate table that lists in each row: an event that triggers a transition, actions taken as a result of the incoming event, and the new state at which the transitions ends.
State Transition Tables for GIST Querying Node
Please refer to the state machine diagram in Figure 2.
State Transition Tables for GIST Responding Node Please refer to the state machine diagram in Figure 3.
