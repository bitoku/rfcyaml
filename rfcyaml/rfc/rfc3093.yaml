- title: __initial_text__
  contents:
  - '                  Firewall Enhancement Protocol (FEP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   Internet Transparency via the end-to-end architecture of the Internet\n\
    \   has allowed vast innovation of new technologies and services [1].\n   However,\
    \ recent developments in Firewall technology have altered this\n   model and have\
    \ been shown to inhibit innovation.  We propose the\n   Firewall Enhancement Protocol\
    \ (FEP) to allow innovation, without\n   violating the security model of a Firewall.\
    \  With no cooperation from\n   a firewall operator, the FEP allows ANY application\
    \ to traverse a\n   Firewall.  Our methodology is to layer any application layer\n\
    \   Transmission Control Protocol/User Datagram Protocol (TCP/UDP)\n   packets\
    \ over the HyperText Transfer Protocol (HTTP) protocol, since\n   HTTP packets\
    \ are typically able to transit Firewalls.  This scheme\n   does not violate the\
    \ actual security usefulness of a Firewall, since\n   Firewalls are designed to\
    \ thwart attacks from the outside and to\n   ignore threats from within.  The\
    \ use of FEP is compatible with the\n   current Firewall security model because\
    \ it requires cooperation from\n   a host inside the Firewall.  FEP allows the\
    \ best of both worlds: the\n   security of a firewall, and transparent tunneling\
    \ thought the\n   firewall.\n"
- title: 1.0 Terminology
  contents:
  - "1.0 Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119.\n"
- title: 2.0 Introduction
  contents:
  - "2.0 Introduction\n   The Internet has done well, considering that less than 10\
    \ years ago\n   the telco's were claiming it could not ever work for the corporate\n\
    \   environment.  There are many reasons for this; a particularly strong\n   one\
    \ is the end-to-end argument discussed by Reed, Seltzer, and Clark\n   [2].  Innovation\
    \ at the ends has proven to be a very powerful\n   methodology creating more value\
    \ than ever conceived of.  But, the\n   world is changing as Clark notes in [6].\
    \  With the connection of the\n   corporate world to the Internet, security concerns\
    \ have become\n   paramount, even at the expense of breaking the end-to-end paradigm.\n\
    \   One example of this is the Firewall - a device to prevent outsiders\n   from\
    \ unauthorized access into a corporation.  Our new protocol, the\n   Firewall\
    \ Enhancement Protocol (FEP), is designed to restore the end-\n   to-end model\
    \ while maintaining the level of security created by\n   Firewalls.\n   To see\
    \ how powerful the end-to-end model is consider the following\n   example.  If\
    \ Scott and Mark have a good idea and some implementation\n   talent, they can\
    \ create an artifact, use it, and send it to their\n   friends.  If it turns out\
    \ to be a good idea these friends can adopt\n   it and maybe make it better. \
    \ Now enter the Firewall: if Mark happens\n   to work at a company that installs\
    \ a Firewall, he can't experiment\n   with his friend Scott.  Innovation is more\
    \ difficult, maybe\n   impossible.  What business is it of an IT manager if Scott\
    \ and Mark\n   want to do some experiments to enable them to better serve their\n\
    \   users?  This is how the web was created: one guy with talent, a few\n   good\
    \ ideas, and the ability to innovate.\n   Firewalls are important, and we do respect\
    \ the right of anybody to\n   protecting themselves any way they want (as long\
    \ as others are not\n   inconvenienced).  Firewalls work, and have a place in\
    \ the Internet.\n   However, Firewalls are built to protect from external threats,\
    \ not\n   internal ones.  Our proposed protocol does not break the security\n\
    \   model of the Firewall; it still protects against all external risks\n   that\
    \ a particular Firewall can protect against.  For our protocol to\n   work someone\
    \ inside the Firewall must run an application level\n   protocol that can access\
    \ TCP port 80.  Our concept allows a\n   consistent level of security while bypassing\
    \ the IT manager in charge\n   of the Firewall.  We offer freedom to innovate\
    \ without additionally\n   compromising external security, and the best part,\
    \ no need to waste\n   time involving any managers for approval.\n   We got this\
    \ idea from the increasing number of applications that use\n   HTTP specifically\
    \ because it can bypass Firewall barriers.  This\n   piecemeal deployment of specific\
    \ applications is not an efficient way\n   to meet the challenge to innovation\
    \ created by Firewalls.  We decided\n   to develop a process by which TCP/IP itself\
    \ is carried over HTTP.\n   With this innovation anyone can use any new TCP/IP\
    \ application\n   immediately without having to go through the laborious process\
    \ of\n   dealing with Firewall access for the particular application.  An\n  \
    \ unintended byproduct of this proposal is that existing TCP/IP\n   applications\
    \ can also be supported to better serve the users.  With\n   FEP, the users can\
    \ decide what applications they can run.\n   Our protocol is simple and is partly\
    \ based on the Eastlake [3]\n   proposal for MIME encoding of IP packets.  We\
    \ use the ubiquitous HTTP\n   protocol format.  The IP datagram is carried in\
    \ the message body of\n   the HTTP message and the TCP packet header information\
    \ is encoded\n   into HTTP headers of the message.  This ASCII encoding of the\
    \ header\n   fields has many advantages, including human readability, increasing\n\
    \   the debuggability of new applications, and easy logging of packet\n   information.\
    \  If this becomes widely adopted, tools like tcpdump will\n   become obsolete.\n"
- title: 3.0 FEP Protocol
  contents:
  - "3.0 FEP Protocol\n   Figure 1 shows a high level view of our protocol.  The application\n\
    \   (1) in host A (outside the Firewall) sends a TCP/IP datagram to host\n   B\
    \ (within the firewall).  Using a tunnel interface the TCP/IP\n   datagram is\
    \ routed to our FEP software (2), which encodes the\n   datagram within a HTTP\
    \ message.  Then this message is sent via a\n   HTTP/TCP/IP tunnel (3) to host\
    \ B on the normal HTTP port (4).  When\n   it arrives at host B, this packet is\
    \ routed via the tunnel to the FEP\n   software (5), which decodes the packet\
    \ and creates a TCP/IP datagram\n   to insert into host's B protocol stack (6).\
    \  This packet is routed to\n   the application on host B (7), as if the Firewall\
    \ (8) never existed.\n            host A                                     \
    \  host B\n          ----------                                   ----------\n\
    \         |    App   | (1)                             |    App   | (7)\n    \
    \     |----------|                                 |----------|\n         |  \
    \  TCP   |                                 |    TCP   |\n         |----------|\
    \                                 |----------|\n         |     IP   |        \
    \                         |    IP    | (6)\n         |----------|            \
    \                     |----------|\n         | FEP dvr  | (2)                \
    \             |  FEP dvr | (5)\n         |----------|                        \
    \         |----------|\n         |    TCP   |                                \
    \ |    TCP   |\n         |----------|                                 |----------|\n\
    \         |    IP    |         Firewall (8)            |    IP    |\n        \
    \  ----------              ---                  -----------\n                |\
    \       (3)       | |                       ^ (4)\n                +---------------->|\
    \ |-----------------------+\n                                  | |\n         \
    \                         | |\n                                  ---\n       \
    \                         Figure 1\n"
- title: 3.1 HTTP Method
  contents:
  - "3.1 HTTP Method\n   FEP allows either side to look like a client or server. \
    \ Each TCP/IP\n   packet is sent as either a HTTP GET request or a response to\
    \ a GET\n   request.  This flexibility work well with firewalls that try to\n\
    \   verify valid HTTP commands crossing the Firewall stopping the\n   unwanted\
    \ intercepting of FEP packets.\n"
- title: '3.2 TCP Header Encapsulation:'
  contents:
  - "3.2 TCP Header Encapsulation:\n   The TCP/IP packet is encoded into the HTTP\
    \ command in two (or\n   optionally three) steps.  First, the IP packet is encoded\
    \  as the\n   message body in MIME format, as specified in [3].  Next, the TCP\
    \ [4]\n   packet header is parsed and encoded into new HTTP headers.  Finally,\n\
    \   as an option, the IP header can also be encoded into new optional\n   HTTP\
    \ headers.  Encoding the TCP and optionally the IP header is\n   strictly for\
    \ human readability, since the entire IP datagram is\n   encoded in the body part\
    \ of the HTTP command.\n   This proposal defines the following new HTTP headers\
    \ for representing\n   TCP header information.\n   TCP_value_opt - This ASCII\
    \ string represents the encoding type for\n      the TCP fields where a mandatory\
    \ encoding type is not specified.\n      The legitimate values are:\n   TCP_binary\
    \ - ASCII representation of the binary representation of the\n      value of the\
    \ field.\n   TCP_hexed - ASCII representation of the hex representation of the\n\
    \      value of the field.\n   TCP_Sport - The 16-bit TCP Source Port number,\
    \ encoded as an ASCII\n      string representing the value of port number.\n \
    \  TCP_Dport - The 16-bit TCP Destination Port number, encoded as an\n      ASCII\
    \ string representing the value of the port number.\n   TCP_SeqNum - The 32-bit\
    \ Sequence Number, encoded as an ASCII string\n      representing the hex value\
    \ of the Sequence number.  This field\n      MUST be sent as lower case because\
    \ it is not urgent.\n   TCP_Ackl - The 32-bit Acknowledgement Number, encoded\
    \ as ASCII string\n      representing the value of the Acknowledgement number.\n\
    \   TCP_DODO - The 4-bit Data Offset value, encoded as an ASCII string\n     \
    \ representing  the base 32 value of the actual length of TCP header\n      in\
    \ bits.  (Normally this is the Data value times 32.)\n   TCP_6Os - The 6 reserved\
    \ bits, encoded as a string of 6 ASCII\n      characters.  A \"O\" (\"Oh\") represents\
    \ an \"Off\" bit and \"O\" (\"Oh\")\n      represents an \"On\" bit.  (Note these\
    \ characters MUST all be sent\n      as \"off\" and MUST be ignored on receipt.)\n\
    \   TCP_FlgBts - The TCP Flags, encoded as the set of 5 comma-separated\n    \
    \  ASCII strings: [{URG|urg}, {ACK|ack}, {PSH|psh}, {RST|rst},\n      {SYN|syn},\
    \ {FIN|fin}].  Capital letters imply the flag is set,\n      lowercase means the\
    \ flag is not set.\n   TCP_Windex - The 16-bit TCP Window Size, encoded as an\
    \ ASCII string\n      representing the value of the number of bytes in the window.\n\
    \   TCP_Checkit - The 16-bit TCP Checksum field, encoded as an ASCII\n      string\
    \ representing the decimal value of the ones-complement of\n      the checksum\
    \ field.\n   TCP_UP - The 16-bit TCP Urgent Pointer, encoded as the hex\n    \
    \  representation of the value of the field.  The hex string MUST be\n      capitalized\
    \ since it is urgent.\n   TCP_Opp_Lst - A comma-separated list of any TCP options\
    \ that may be\n      present.  Each option is encoded as an ASCII string representing\n\
    \      the name of the option followed by option-specific information\n      enclosed\
    \ in square brackets.  Representative options and their\n      encoding follow,\
    \ other IP options follow the same form:\n      End of Options option: [\"End\
    \ of Options\"]\n      Window scale option: [\"Window scale\", shift_count], where\n\
    \         shift_count is the window scaling factor represented as the\n      \
    \   ASCII string in decimal.\n"
- title: '3.2 IPv4 Header Encapsulation:'
  contents:
  - "3.2 IPv4 Header Encapsulation:\n   This proposal defines the following new HTTP\
    \ headers for representing\n   IPv4 header information:\n   These optional headers\
    \ are used to encode the IPv4 [5] header for\n   better readability.  These fields\
    \ are encoded in a manner similar to\n   the above TCP header fields.\n   Since\
    \ the base IP packet is already present in an HTTP header, the\n   following headers\
    \ are optional.  None, some or all of them may be\n   used depending on the whim\
    \ of the programmer.\n   IP_value_opt - This ASCII string represents the encoding\
    \ type for the\n      following  fields where a mandatory encoding type is not\n\
    \      specified.  The legitimate values are the same as for\n      TCP_value_opt.\n\
    \   IP_Ver - The IP Version number, encoded as an UTF-8 string.  The\n      legitimate\
    \ values for the string are \"four\", \"five\", and \"six.\"\n      The encapsulation\
    \ of the fields in the IP header are defined in\n      this section if the value\
    \ is \"four\", and in section 3.3 if the\n      value is \"six\".  Encapsulations\
    \ for headers with IP_Ver value of\n      \"five\" will be developed if the right\
    \ orders are received.\n      Encapsulations for headers with the IP_Ver value\
    \ of \"eight\" are\n      empty.  Implementations MUST be able to support arbitrary\
    \ native\n      languages for these strings.\n   IP4_Hlen - The IP Internet Header\
    \ Length field, it is encoded in the\n      same way as TCP_DODO.\n   IP4_Type_of_Service\
    \ (this name is case sensitive) - This is an\n      obsolete name for a field\
    \ in the IPv4 header, which has been\n      replaced with IP_$$ and IP_CU.\n \
    \  IP_$$ - The 6-bit Differentiated Services field, encapsulated as an\n     \
    \ UTF-8 string representing the name of the DS codepoint in the\n      field.\n\
    \   IP_CU - The 2-bit field that was the two low-order bits of the TOS\n     \
    \ field.  Since  this field is currently being used for experiments\n      it\
    \ has to be coded in the most general way possible, thus it is\n      encoded\
    \ as two ASCII strings of the form \"bit0=X\" and \"bit1=X,\"\n      where \"\
    X\" is \"on\" or \"off.\"  Note that bit 0 is the MSB.\n   IP4_Total - The 16-bit\
    \ Total Length field, encoded as an ASCII string\n      representing the value\
    \ of the field.\n   IP4_SSN - The IP Identification field, encoded as an ASCII\
    \ string\n      representing the value of the field.\n   IP4_Flags - The IP Flags,\
    \ encoded as the set of 3 comma separated\n      ASCII strings:  [{\"Must Be Zero\"\
    }, {\"May Fragment\"|\"Don't\n      Fragment\"}, {\"Last Fragment\"|\"More Fragments\"\
    }]\n   IP4_Frager - The 13-bit Fragment Offset field, encoded as an ASCII\n  \
    \    string  representing the value of the field.\n   IP4_TTL - The 8-bit Time-to-Live\
    \ field, encoded as an UTF-8 string of\n      the form \"X hops to destruction.\"\
    \  Where \"X\" is the decimal value\n      -1 of the field.  Implementations MUST\
    \ be able to support\n      arbitrary languages for this string.\n   IP4_Proto\
    \ - The 8-bit Protocol field, encoded as an UTF-8 string\n      representing \
    \ the common name for the protocol whose header\n      follows the IP header.\n\
    \   IP4_Checkit - The 16-bit Checksum field, encoded in the same way as\n    \
    \  TCP_Checkit.\n   IP4_Apparent_Source - The 32-bit Source Address field.  For\
    \ user\n      friendliness this is encoded as an UTF-8 string representing the\n\
    \      domain name of the apparent sender of the packet.  An alternate\n     \
    \ form, to be used when the domain name itself might be blocked by a\n      firewall\
    \ programmed to protect the innocence of the corporate\n      users, is an ASCII\
    \ string representing the dotted quad form of the\n      IPv4 address.\n   IP4_Dest_Addr\
    \ - The 32-bit Destination Address field, encoded in the\n      same way as is\
    \ IP4_Apparent_Source.\n   IP4_Opp_Lst - A comma-separated list of all IPv4 options\
    \ that are\n      present.  Each option is encoded as an ASCII string representing\n\
    \      the name of the option followed by option-specific information\n      enclosed\
    \ in square brackets.  Representative options and their\n      encoding follow,\
    \ other IP options follow the same form:\n      End of Options option: [\"End\
    \ of Options\"]\n      Loose Source Routing option: [\"Loose Source Routing\"\
    , length,\n         pointer, IP4_addr1, IP4_addr2, ...], where length and pointer\n\
    \         are ASCII strings representing the value of those fields.\n"
- title: '3.3 IPv6 Header Encapsulation:'
  contents:
  - "3.3 IPv6 Header Encapsulation:\n   This proposal defines the following new HTTP\
    \ headers for representing\n   IPv6 header information:\n   These optional headers\
    \ encode the IPv6 [5] header for better\n   readability.  These fields are encoded\
    \ in a manner similar to the\n   above TCP header fields.\n   Since the base IP\
    \ packet is already present in an HTTP header the\n   following headers are optional.\
    \  None, some or all of them may be\n   used depending on the whim of the programmer.\
    \  At this time only the\n   base IPv6 header is supported.  If there is sufficient\
    \ interest,\n   support will be developed for IPv6 extension headers.\n   IP_$$\
    \ - the 6-bit Differentiated Services field - see above\n   IP_CU - the 2-bit\
    \ unused field - see above\n   IP6_Go_with_the_Flow - The 20-bit Flow Label field.\
    \  Since this field\n      is not  currently in use it should be encoded as the\
    \ UTF-8 string\n      \"do not care\".\n   IP6_PayLd - The 16-bit Payload Length\
    \ field, encoded as an ASCII\n      string representing the value of the field.\
    \  The use of FEP with\n      IPv6 jumbograms is not recommended.\n   IP6_NxtHdr\
    \ - The 8-bit Next Header field, encoded in the same way as\n      IP4_Proto.\n\
    \   IP6_Hopping - The 8-bit Hop Limit field, encoded in the same way as\n    \
    \  IP4_TTL.\n   IP6_Apparent_Source - The 128-bit Source Address field.  For user\n\
    \      friendliness, this is encoded as an UTF-8 string representing the\n   \
    \   domain name of the apparent sender of the packet.  An alternate\n      form,\
    \ to be used when the domain name itself might be blocked by a\n      Firewall\
    \ programmed to protect the innocence of the corporate\n      users, is an ASCII\
    \ string representing any one of the legitimate\n      forms of representing an\
    \ IPv6 address.\n   IP6_Dest_Addr - The 128-bit Destination Address field, encoded\
    \ the\n      same way as IP6_Apparent_Source.\n"
- title: 3.4 TCP Header Compression
  contents:
  - "3.4 TCP Header Compression\n   Compressing TCP headers in the face of a protocol\
    \ such as this one\n   that explodes the size of packets is silly, so we ignore\
    \ it.\n"
- title: 4.0 Security Considerations
  contents:
  - "4.0 Security Considerations\n   Since this protocol deals with Firewalls there\
    \ are no real security\n   considerations.\n"
- title: 5.0 Acknowledgements
  contents:
  - "5.0 Acknowledgements\n   We wish to thank the many Firewall vendors who have\
    \ supported our\n   work to re-enable the innovation that made the Internet great,\n\
    \   without giving up the cellophane fig leaf of security that a Firewall\n  \
    \ provides.\n"
- title: 6.0 Authors' Addresses
  contents:
  - "6.0 Authors' Addresses\n   Mark Gaynor\n   Harvard University\n   Cambridge MA\
    \ 02138\n   EMail gaynor@eecs.harvard.edu\n   Scott Bradner\n   Harvard University\n\
    \   Cambridge MA 02138\n   Phone +1 617 495 3864\n   EMail sob@harvard.edu\n"
- title: References
  contents:
  - "References\n   [1] Carpenter, B., \"Internet Transparency\", RFC 2775, February\
    \ 2000.\n   [2] Saltzer, J., Reed, D., and D. Clark, \"End-to-End Arguments in\n\
    \       System Design\".  2nd International Conference on Distributed\n      \
    \ Systems, Paris, France, April 1981.\n   [3] Eastlake, D., \"IP over MIME\",\
    \ Work in Progress.\n   [4] Postel, J., \"Transmission Control Protocol\", STD\
    \ 7, RFC 793,\n       September 1981.\n   [5] Postel, J., \"Internet Protocol\"\
    , STD 5, RFC 791, September 1981.\n   [6] Clark, D. and M. Blumenthal, \"Rethinking\
    \ the Design of the\n       Internet: The end-to-end argument vs. the brave new\
    \ world\". 2000.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
