- contents:
  - '  Using Pre-Shared Key (PSK) in the Cryptographic Message Syntax (CMS)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The invention of a large-scale quantum computer would pose a serious\n
    \  challenge for the cryptographic algorithms that are widely deployed\n   today.
    \ The Cryptographic Message Syntax (CMS) supports key transport\n   and key agreement
    algorithms that could be broken by the invention of\n   such a quantum computer.
    \ By storing communications that are\n   protected with the CMS today, someone
    could decrypt them in the\n   future when a large-scale quantum computer becomes
    available.  Once\n   quantum-secure key management algorithms are available, the
    CMS will\n   be extended to support the new algorithms if the existing syntax
    does\n   not accommodate them.  This document describes a mechanism to protect\n
    \  today's communication from the future invention of a large-scale\n   quantum
    computer by mixing the output of key transport and key\n   agreement algorithms
    with a pre-shared key.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8696.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Terminology\n     1.2.  ASN.1\n
    \    1.3.  Version Numbers\n   2.  Overview\n   3.  keyTransPSK\n   4.  keyAgreePSK\n
    \  5.  Key Derivation\n   6.  ASN.1 Module\n   7.  Security Considerations\n   8.
    \ Privacy Considerations\n   9.  IANA Considerations\n   10. References\n     10.1.
    \ Normative References\n     10.2.  Informative References\n   Appendix A.  Key
    Transport with PSK Example\n     A.1.  Originator Processing Example\n     A.2.
    \ ContentInfo and AuthEnvelopedData\n     A.3.  Recipient Processing Example\n
    \  Appendix B.  Key Agreement with PSK Example\n     B.1.  Originator Processing
    Example\n     B.2.  ContentInfo and AuthEnvelopedData\n     B.3.  Recipient Processing
    Example\n   Acknowledgements\n   Author's Address\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The invention of a large-scale quantum computer would pose
    a serious\n   challenge for the cryptographic algorithms that are widely deployed\n
    \  today [S1994].  It is an open question whether or not it is feasible\n   to
    build a large-scale quantum computer and, if so, when that might\n   happen [NAS2019].
    \ However, if such a quantum computer is invented,\n   many of the cryptographic
    algorithms and the security protocols that\n   use them would become vulnerable.\n
    \  The Cryptographic Message Syntax (CMS) [RFC5652][RFC5083] supports\n   key
    transport and key agreement algorithms that could be broken by\n   the invention
    of a large-scale quantum computer [C2PQ].  These\n   algorithms include RSA [RFC8017],
    Diffie-Hellman [RFC2631], and\n   Elliptic Curve Diffie-Hellman (ECDH) [RFC5753].
    \ As a result, an\n   adversary that stores CMS-protected communications today
    could\n   decrypt those communications in the future when a large-scale quantum\n
    \  computer becomes available.\n   Once quantum-secure key management algorithms
    are available, the CMS\n   will be extended to support them if the existing syntax
    does not\n   already accommodate the new algorithms.\n   In the near term, this
    document describes a mechanism to protect\n   today's communication from the future
    invention of a large-scale\n   quantum computer by mixing the output of existing
    key transport and\n   key agreement algorithms with a pre-shared key (PSK).  Secure\n
    \  communication can be achieved today by mixing a strong PSK with the\n   output
    of an existing key transport algorithm, like RSA [RFC8017], or\n   an existing
    key agreement algorithm, like Diffie-Hellman [RFC2631] or\n   Elliptic Curve Diffie-Hellman
    (ECDH) [RFC5753].  A security solution\n   that is believed to be quantum resistant
    can be achieved by using a\n   PSK with sufficient entropy along with a quantum-resistant
    key\n   derivation function (KDF), like an HMAC-based key derivation function\n
    \  (HKDF) [RFC5869], and a quantum-resistant encryption algorithm, like\n   256-bit
    AES [AES].  In this way, today's CMS-protected communication\n   can be resistant
    to an attacker with a large-scale quantum computer.\n   In addition, there may
    be other reasons for including a strong PSK\n   besides protection against the
    future invention of a large-scale\n   quantum computer.  For example, there is
    always the possibility of a\n   cryptoanalytic breakthrough on one or more classic
    public key\n   algorithms, and there are longstanding concerns about undisclosed\n
    \  trapdoors in Diffie-Hellman parameters [FGHT2016].  Inclusion of a\n   strong
    PSK as part of the overall key management offers additional\n   protection against
    these concerns.\n   Note that the CMS also supports key management techniques
    based on\n   symmetric key-encryption keys and passwords, but they are not\n   discussed
    in this document because they are already quantum\n   resistant.  The symmetric
    key-encryption key technique is quantum\n   resistant when used with an adequate
    key size.  The password\n   technique is quantum resistant when used with a quantum-resistant
    key\n   derivation function and a sufficiently large password.\n"
  - contents:
    - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
      \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
      in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n
      \  capitals, as shown here.\n"
    title: 1.1.  Terminology
  - contents:
    - "1.2.  ASN.1\n   CMS values are generated using ASN.1 [X680], which uses the
      Basic\n   Encoding Rules (BER) and the Distinguished Encoding Rules (DER)\n
      \  [X690].\n"
    title: 1.2.  ASN.1
  - contents:
    - "1.3.  Version Numbers\n   The major data structures include a version number
      as the first item\n   in the data structure.  The version number is intended
      to avoid ASN.1\n   decode errors.  Some implementations do not check the version
      number\n   prior to attempting a decode; then, if a decode error occurs, the\n
      \  version number is checked as part of the error-handling routine.\n   This
      is a reasonable approach; it places error processing outside of\n   the fast
      path.  This approach is also forgiving when an incorrect\n   version number
      is used by the sender.\n   Whenever the structure is updated, a higher version
      number will be\n   assigned.  However, to ensure maximum interoperability, the
      higher\n   version number is only used when the new syntax feature is employed.\n
      \  That is, the lowest version number that supports the generated syntax\n   is
      used.\n"
    title: 1.3.  Version Numbers
  title: 1.  Introduction
- contents:
  - "2.  Overview\n   The CMS enveloped-data content type [RFC5652] and the CMS\n
    \  authenticated-enveloped-data content type [RFC5083] support both key\n   transport
    and key agreement public key algorithms to establish the\n   key used to encrypt
    the content.  No restrictions are imposed on the\n   key transport or key agreement
    public key algorithms, which means\n   that any key transport or key agreement
    algorithm can be used,\n   including algorithms that are specified in the future.
    \ In both\n   cases, the sender randomly generates the content-encryption key,
    and\n   then all recipients obtain that key.  All recipients use the sender-\n
    \  generated symmetric content-encryption key for decryption.\n   This specification
    defines two quantum-resistant ways to establish a\n   symmetric key-encryption
    key, which is used to encrypt the sender-\n   generated content-encryption key.
    \ In both cases, the PSK is used as\n   one of the inputs to a key-derivation
    function to create a quantum-\n   resistant key-encryption key.  The PSK MUST
    be distributed to the\n   sender and all of the recipients by some out-of-band
    means that does\n   not make it vulnerable to the future invention of a large-scale\n
    \  quantum computer, and an identifier MUST be assigned to the PSK.  It\n   is
    best if each PSK has a unique identifier; however, if a recipient\n   has more
    than one PSK with the same identifier, the recipient can try\n   each of them
    in turn.  A PSK is expected to be used with many\n   messages, with a lifetime
    of weeks or months.\n   The content-encryption key or content-authenticated-encryption
    key is\n   quantum resistant, and the sender establishes it using these steps:\n
    \  When using a key transport algorithm:\n   1.  The content-encryption key or
    the content-authenticated-\n       encryption key, called \"CEK\", is generated
    at random.\n   2.  The key-derivation key, called \"KDK\", is generated at random.\n
    \  3.  For each recipient, the KDK is encrypted in the recipient's\n       public
    key, then the KDF is used to mix the PSK and the KDK to\n       produce the key-encryption
    key, called \"KEK\".\n   4.  The KEK is used to encrypt the CEK.\n   When using
    a key agreement algorithm:\n   1.  The content-encryption key or the content-authenticated-\n
    \      encryption key, called \"CEK\", is generated at random.\n   2.  For each
    recipient, a pairwise key-encryption key, called \"KEK1\",\n       is established
    using the recipient's public key and the sender's\n       private key.  Note that
    KEK1 will be used as a key-derivation\n       key.\n   3.  For each recipient,
    the KDF is used to mix the PSK and the\n       pairwise KEK1, and the result is
    called \"KEK2\".\n   4.  For each recipient, the pairwise KEK2 is used to encrypt
    the CEK.\n   As specified in Section 6.2.5 of [RFC5652], recipient information
    for\n   additional key management techniques is represented in the\n   OtherRecipientInfo
    type.  Two key management techniques are specified\n   in this document, and they
    are each identified by a unique ASN.1\n   object identifier.\n   The first key
    management technique, called \"keyTransPSK\" (see\n   Section 3), uses a key transport
    algorithm to transfer the key-\n   derivation key from the sender to the recipient,
    and then the key-\n   derivation key is mixed with the PSK using a KDF.  The output
    of the\n   KDF is the key-encryption key, which is used for the encryption of\n
    \  the content-encryption key or content-authenticated-encryption key.\n   The
    second key management technique, called \"keyAgreePSK\" (see\n   Section 4), uses
    a key agreement algorithm to establish a pairwise\n   key-encryption key.  This
    pairwise key-encryption key is then mixed\n   with the PSK using a KDF to produce
    a second pairwise key-encryption\n   key, which is then used to encrypt the content-encryption
    key or\n   content-authenticated-encryption key.\n"
  title: 2.  Overview
- contents:
  - "3.  keyTransPSK\n   Per-recipient information using keyTransPSK is represented
    in the\n   KeyTransPSKRecipientInfo type, which is indicated by the id-ori-\n
    \  keyTransPSK object identifier.  Each instance of\n   KeyTransPSKRecipientInfo
    establishes the content-encryption key or\n   content-authenticated-encryption
    key for one or more recipients that\n   have access to the same PSK.\n   The id-ori-keyTransPSK
    object identifier is:\n      id-ori OBJECT IDENTIFIER ::= { iso(1) member-body(2)
    us(840)\n        rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) 13 }\n      id-ori-keyTransPSK
    OBJECT IDENTIFIER ::= { id-ori 1 }\n   The KeyTransPSKRecipientInfo type is:\n
    \     KeyTransPSKRecipientInfo ::= SEQUENCE {\n        version CMSVersion,  --
    always set to 0\n        pskid PreSharedKeyIdentifier,\n        kdfAlgorithm KeyDerivationAlgorithmIdentifier,\n
    \       keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n        ktris
    KeyTransRecipientInfos,\n        encryptedKey EncryptedKey }\n      PreSharedKeyIdentifier
    ::= OCTET STRING\n      KeyTransRecipientInfos ::= SEQUENCE OF KeyTransRecipientInfo\n
    \  The fields of the KeyTransPSKRecipientInfo type have the following\n   meanings:\n
    \  *  version is the syntax version number.  The version MUST be 0.  The\n      CMSVersion
    type is described in Section 10.2.5 of [RFC5652].\n   *  pskid is the identifier
    of the PSK used by the sender.  The\n      identifier is an OCTET STRING, and
    it need not be human readable.\n   *  kdfAlgorithm identifies the key-derivation
    algorithm and any\n      associated parameters used by the sender to mix the key-derivation\n
    \     key and the PSK to generate the key-encryption key.  The\n      KeyDerivationAlgorithmIdentifier
    is described in Section 10.1.6 of\n      [RFC5652].\n   *  keyEncryptionAlgorithm
    identifies a key-encryption algorithm used\n      to encrypt the content-encryption
    key.  The\n      KeyEncryptionAlgorithmIdentifier is described in Section 10.1.3
    of\n      [RFC5652].\n   *  ktris contains one KeyTransRecipientInfo type for
    each recipient;\n      it uses a key transport algorithm to establish the key-derivation\n
    \     key.  That is, the encryptedKey field of KeyTransRecipientInfo\n      contains
    the key-derivation key instead of the content-encryption\n      key.  KeyTransRecipientInfo
    is described in Section 6.2.1 of\n      [RFC5652].\n   *  encryptedKey is the
    result of encrypting the content-encryption\n      key or the content-authenticated-encryption
    key with the key-\n      encryption key.  EncryptedKey is an OCTET STRING.\n"
  title: 3.  keyTransPSK
- contents:
  - "4.  keyAgreePSK\n   Per-recipient information using keyAgreePSK is represented
    in the\n   KeyAgreePSKRecipientInfo type, which is indicated by the id-ori-\n
    \  keyAgreePSK object identifier.  Each instance of\n   KeyAgreePSKRecipientInfo
    establishes the content-encryption key or\n   content-authenticated-encryption
    key for one or more recipients that\n   have access to the same PSK.\n   The id-ori-keyAgreePSK
    object identifier is:\n      id-ori-keyAgreePSK OBJECT IDENTIFIER ::= { id-ori
    2 }\n   The KeyAgreePSKRecipientInfo type is:\n      KeyAgreePSKRecipientInfo
    ::= SEQUENCE {\n        version CMSVersion,  -- always set to 0\n        pskid
    PreSharedKeyIdentifier,\n        originator [0] EXPLICIT OriginatorIdentifierOrKey,\n
    \       ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,\n        kdfAlgorithm KeyDerivationAlgorithmIdentifier,\n
    \       keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n        recipientEncryptedKeys
    RecipientEncryptedKeys }\n   The fields of the KeyAgreePSKRecipientInfo type have
    the following\n   meanings:\n   *  version is the syntax version number.  The
    version MUST be 0.  The\n      CMSVersion type is described in Section 10.2.5
    of [RFC5652].\n   *  pskid is the identifier of the PSK used by the sender.  The\n
    \     identifier is an OCTET STRING, and it need not be human readable.\n   *
    \ originator is a CHOICE with three alternatives specifying the\n      sender's
    key agreement public key.  Implementations MUST support\n      all three alternatives
    for specifying the sender's public key.\n      The sender uses their own private
    key and the recipient's public\n      key to generate a pairwise key-encryption
    key.  A KDF is used to\n      mix the PSK and the pairwise key-encryption key
    to produce a\n      second key-encryption key.  The OriginatorIdentifierOrKey
    type is\n      described in Section 6.2.2 of [RFC5652].\n   *  ukm is optional.
    \ With some key agreement algorithms, the sender\n      provides a User Keying
    Material (UKM) to ensure that a different\n      key is generated each time the
    same two parties generate a\n      pairwise key.  Implementations MUST accept
    a\n      KeyAgreePSKRecipientInfo SEQUENCE that includes a ukm field.\n      Implementations
    that do not support key agreement algorithms that\n      make use of UKMs MUST
    gracefully handle the presence of UKMs.  The\n      UserKeyingMaterial type is
    described in Section 10.2.6 of\n      [RFC5652].\n   *  kdfAlgorithm identifies
    the key-derivation algorithm and any\n      associated parameters used by the
    sender to mix the pairwise key-\n      encryption key and the PSK to produce a
    second key-encryption key\n      of the same length as the first one.  The\n      KeyDerivationAlgorithmIdentifier
    is described in Section 10.1.6 of\n      [RFC5652].\n   *  keyEncryptionAlgorithm
    identifies a key-encryption algorithm used\n      to encrypt the content-encryption
    key or the content-\n      authenticated-encryption key.  The\n      KeyEncryptionAlgorithmIdentifier
    type is described in\n      Section 10.1.3 of [RFC5652].\n   *  recipientEncryptedKeys
    includes a recipient identifier and\n      encrypted key for one or more recipients.
    \ The\n      KeyAgreeRecipientIdentifier is a CHOICE with two alternatives\n      specifying
    the recipient's certificate, and thereby the\n      recipient's public key, that
    was used by the sender to generate a\n      pairwise key-encryption key.  The
    encryptedKey is the result of\n      encrypting the content-encryption key or
    the content-\n      authenticated-encryption key with the second pairwise key-\n
    \     encryption key.  EncryptedKey is an OCTET STRING.  The\n      RecipientEncryptedKeys
    type is defined in Section 6.2.2 of\n      [RFC5652].\n"
  title: 4.  keyAgreePSK
- contents:
  - "5.  Key Derivation\n   Many KDFs internally employ a one-way hash function.  When
    this is\n   the case, the hash function that is used is indirectly indicated by\n
    \  the KeyDerivationAlgorithmIdentifier.  HKDF [RFC5869] is one example\n   of
    a KDF that makes use of a hash function.\n   Other KDFs internally employ an encryption
    algorithm.  When this is\n   the case, the encryption that is used is indirectly
    indicated by the\n   KeyDerivationAlgorithmIdentifier.  For example, AES-128-CMAC
    can be\n   used for randomness extraction in a KDF as described in [NIST2018].\n
    \  A KDF has several input values.  This section describes the\n   conventions
    for using the KDF to compute the key-encryption key for\n   KeyTransPSKRecipientInfo
    and KeyAgreePSKRecipientInfo.  For\n   simplicity, the terminology used in the
    HKDF specification [RFC5869]\n   is used here.\n   The KDF inputs are:\n   *  IKM
    is the input keying material; it is the symmetric secret input\n      to the KDF.
    \ For KeyTransPSKRecipientInfo, it is the key-\n      derivation key.  For KeyAgreePSKRecipientInfo,
    it is the pairwise\n      key-encryption key produced by the key agreement algorithm.\n
    \  *  salt is an optional non-secret random value.  Many KDFs do not\n      require
    a salt, and the KeyDerivationAlgorithmIdentifier\n      assignments for HKDF [RFC8619]
    do not offer a parameter for a\n      salt.  If a particular KDF requires a salt,
    then the salt value is\n      provided as a parameter of the KeyDerivationAlgorithmIdentifier.\n
    \  *  L is the length of output keying material in octets; the value\n      depends
    on the key-encryption algorithm that will be used.  The\n      algorithm is identified
    by the KeyEncryptionAlgorithmIdentifier.\n      In addition, the OBJECT IDENTIFIER
    portion of the\n      KeyEncryptionAlgorithmIdentifier is included in the next
    input\n      value, called \"info\".\n   *  info is optional context and application
    specific information.\n      The DER encoding of CMSORIforPSKOtherInfo is used
    as the info\n      value, and the PSK is included in this structure.  Note that\n
    \     EXPLICIT tagging is used in the ASN.1 module that defines this\n      structure.
    \ For KeyTransPSKRecipientInfo, the ENUMERATED value of\n      5 is used.  For
    KeyAgreePSKRecipientInfo, the ENUMERATED value of\n      10 is used.  CMSORIforPSKOtherInfo
    is defined by the following\n      ASN.1 structure:\n         CMSORIforPSKOtherInfo
    ::= SEQUENCE {\n           psk                    OCTET STRING,\n           keyMgmtAlgType
    \        ENUMERATED {\n             keyTrans               (5),\n             keyAgree
    \              (10) },\n           keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n
    \          pskLength              INTEGER (1..MAX),\n           kdkLength              INTEGER
    (1..MAX) }\n   The fields of type CMSORIforPSKOtherInfo have the following meanings:\n
    \  *  psk is an OCTET STRING; it contains the PSK.\n   *  keyMgmtAlgType is either
    set to 5 or 10.  For\n      KeyTransPSKRecipientInfo, the ENUMERATED value of
    5 is used.  For\n      KeyAgreePSKRecipientInfo, the ENUMERATED value of 10 is
    used.\n   *  keyEncryptionAlgorithm is the KeyEncryptionAlgorithmIdentifier,\n
    \     which identifies the algorithm and provides algorithm parameters,\n      if
    any.\n   *  pskLength is a positive integer; it contains the length of the PSK\n
    \     in octets.\n   *  kdkLength is a positive integer; it contains the length
    of the\n      key-derivation key in octets.  For KeyTransPSKRecipientInfo, the\n
    \     key-derivation key is generated by the sender.  For\n      KeyAgreePSKRecipientInfo,
    the key-derivation key is the pairwise\n      key-encryption key produced by the
    key agreement algorithm.\n   The KDF output is:\n   *  OKM is the output keying
    material, which is exactly L octets.  The\n      OKM is the key-encryption key
    that is used to encrypt the content-\n      encryption key or the content-authenticated-encryption
    key.\n   An acceptable KDF MUST accept IKM, L, and info inputs; an acceptable\n
    \  KDF MAY also accept salt and other inputs.  All of these inputs MUST\n   influence
    the output of the KDF.  If the KDF requires a salt or other\n   inputs, then those
    inputs MUST be provided as parameters of the\n   KeyDerivationAlgorithmIdentifier.\n"
  title: 5.  Key Derivation
- contents:
  - "6.  ASN.1 Module\n   This section contains the ASN.1 module for the two key management\n
    \  techniques defined in this document.  This module imports types from\n   other
    ASN.1 modules that are defined in [RFC5912] and [RFC6268].\n   <CODE BEGINS>\n
    \  CMSORIforPSK-2019\n     { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
    pkcs-9(9)\n       smime(16) modules(0) id-mod-cms-ori-psk-2019(69) }\n   DEFINITIONS
    EXPLICIT TAGS ::=\n   BEGIN\n   -- EXPORTS All\n   IMPORTS\n   AlgorithmIdentifier{},
    KEY-DERIVATION\n     FROM AlgorithmInformation-2009  -- [RFC5912]\n       { iso(1)
    identified-organization(3) dod(6) internet(1)\n         security(5) mechanisms(5)
    pkix(7) id-mod(0)\n         id-mod-algorithmInformation-02(58) }\n   OTHER-RECIPIENT,
    OtherRecipientInfo, CMSVersion,\n   KeyTransRecipientInfo, OriginatorIdentifierOrKey,\n
    \  UserKeyingMaterial, RecipientEncryptedKeys, EncryptedKey,\n   KeyDerivationAlgorithmIdentifier,
    KeyEncryptionAlgorithmIdentifier\n     FROM CryptographicMessageSyntax-2010  --
    [RFC6268]\n       { iso(1) member-body(2) us(840) rsadsi(113549)\n         pkcs(1)
    pkcs-9(9) smime(16) modules(0)\n         id-mod-cms-2009(58) } ;\n   --\n   --
    OtherRecipientInfo Types (ori-)\n   --\n   SupportedOtherRecipInfo OTHER-RECIPIENT
    ::= {\n     ori-keyTransPSK |\n     ori-keyAgreePSK,\n     ... }\n   --\n   --
    Key Transport with Pre-Shared Key\n   --\n   ori-keyTransPSK OTHER-RECIPIENT ::=
    {\n     KeyTransPSKRecipientInfo IDENTIFIED BY id-ori-keyTransPSK }\n   id-ori
    OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n     rsadsi(113549) pkcs(1)
    pkcs-9(9) smime(16) 13 }\n   id-ori-keyTransPSK OBJECT IDENTIFIER ::= { id-ori
    1 }\n   KeyTransPSKRecipientInfo ::= SEQUENCE {\n     version CMSVersion,  --
    always set to 0\n     pskid PreSharedKeyIdentifier,\n     kdfAlgorithm KeyDerivationAlgorithmIdentifier,\n
    \    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n     ktris KeyTransRecipientInfos,\n
    \    encryptedKey EncryptedKey }\n   PreSharedKeyIdentifier ::= OCTET STRING\n
    \  KeyTransRecipientInfos ::= SEQUENCE OF KeyTransRecipientInfo\n   --\n   --
    Key Agreement with Pre-Shared Key\n   --\n   ori-keyAgreePSK OTHER-RECIPIENT ::=
    {\n     KeyAgreePSKRecipientInfo IDENTIFIED BY id-ori-keyAgreePSK }\n   id-ori-keyAgreePSK
    OBJECT IDENTIFIER ::= { id-ori 2 }\n   KeyAgreePSKRecipientInfo ::= SEQUENCE {\n
    \    version CMSVersion,  -- always set to 0\n     pskid PreSharedKeyIdentifier,\n
    \    originator [0] EXPLICIT OriginatorIdentifierOrKey,\n     ukm [1] EXPLICIT
    UserKeyingMaterial OPTIONAL,\n     kdfAlgorithm KeyDerivationAlgorithmIdentifier,\n
    \    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n     recipientEncryptedKeys
    RecipientEncryptedKeys }\n   --\n   -- Structure to provide 'info' input to the
    KDF,\n   -- including the Pre-Shared Key\n   --\n   CMSORIforPSKOtherInfo ::=
    SEQUENCE {\n     psk                    OCTET STRING,\n     keyMgmtAlgType         ENUMERATED
    {\n       keyTrans               (5),\n       keyAgree               (10) },\n
    \    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n     pskLength
    \             INTEGER (1..MAX),\n     kdkLength              INTEGER (1..MAX)
    }\n   END\n   <CODE ENDS>\n"
  title: 6.  ASN.1 Module
- contents:
  - "7.  Security Considerations\n   The security considerations related to the CMS
    enveloped-data content\n   type in [RFC5652] and the security considerations related
    to the CMS\n   authenticated-enveloped-data content type in [RFC5083] continue
    to\n   apply.\n   Implementations of the key derivation function must compute
    the\n   entire result, which, in this specification, is a key-encryption key,\n
    \  before outputting any portion of the result.  The resulting key-\n   encryption
    key must be protected.  Compromise of the key-encryption\n   key may result in
    the disclosure of all content-encryption keys or\n   content-authenticated-encryption
    keys that were protected with that\n   keying material; this, in turn, may result
    in the disclosure of the\n   content.  Note that there are two key-encryption
    keys when a PSK with\n   a key agreement algorithm is used, with similar consequences
    for the\n   compromise of either one of these keys.\n   Implementations must protect
    the PSK, key transport private key,\n   agreement private key, and key-derivation
    key.  Compromise of the PSK\n   will make the encrypted content vulnerable to
    the future invention of\n   a large-scale quantum computer.  Compromise of the
    PSK and either the\n   key transport private key or the agreement private key
    may result in\n   the disclosure of all contents protected with that combination
    of\n   keying material.  Compromise of the PSK and the key-derivation key\n   may
    result in the disclosure of all contents protected with that\n   combination of
    keying material.\n   A large-scale quantum computer will essentially negate the
    security\n   provided by the key transport algorithm or the key agreement\n   algorithm,
    which means that the attacker with a large-scale quantum\n   computer can discover
    the key-derivation key.  In addition, a large-\n   scale quantum computer effectively
    cuts the security provided by a\n   symmetric key algorithm in half.  Therefore,
    the PSK needs at least\n   256 bits of entropy to provide 128 bits of security.
    \ To match that\n   same level of security, the key derivation function needs
    to be\n   quantum resistant and produce a key-encryption key that is at least\n
    \  256 bits in length.  Similarly, the content-encryption key or\n   content-authenticated-encryption
    key needs to be at least 256 bits in\n   length.\n   When using a PSK with a key
    transport or a key agreement algorithm, a\n   key-encryption key is produced to
    encrypt the content-encryption key\n   or content-authenticated-encryption key.
    \ If the key-encryption\n   algorithm is different than the algorithm used to
    protect the\n   content, then the effective security is determined by the weaker
    of\n   the two algorithms.  If, for example, content is encrypted with\n   256-bit
    AES and the key is wrapped with 128-bit AES, then, at most,\n   128 bits of protection
    are provided.  Implementers must ensure that\n   the key-encryption algorithm
    is as strong or stronger than the\n   content-encryption algorithm or content-authenticated-encryption\n
    \  algorithm.\n   The selection of the key-derivation function imposes an upper
    bound\n   on the strength of the resulting key-encryption key.  The strength of\n
    \  the selected key-derivation function should be at least as strong as\n   the
    key-encryption algorithm that is selected.  NIST SP 800-56C\n   Revision 1 [NIST2018]
    offers advice on the security strength of\n   several popular key-derivation functions.\n
    \  Implementers should not mix quantum-resistant key management\n   algorithms
    with their non-quantum-resistant counterparts.  For\n   example, the same content
    should not be protected with\n   KeyTransRecipientInfo and KeyTransPSKRecipientInfo.
    \ Likewise, the\n   same content should not be protected with KeyAgreeRecipientInfo
    and\n   KeyAgreePSKRecipientInfo.  Doing so would make the content vulnerable\n
    \  to the future invention of a large-scale quantum computer.\n   Implementers
    should not send the same content in different messages,\n   one using a quantum-resistant
    key management algorithm and the other\n   using a non-quantum-resistant key management
    algorithm, even if the\n   content-encryption key is generated independently.
    \ Doing so may\n   allow an eavesdropper to correlate the messages, making the
    content\n   vulnerable to the future invention of a large-scale quantum computer.\n
    \  This specification does not require that PSK be known only by the\n   sender
    and recipients.  The PSK may be known to a group.  Since\n   confidentiality depends
    on the key transport or key agreement\n   algorithm, knowledge of the PSK by other
    parties does not inherently\n   enable eavesdropping.  However, group members
    can record the traffic\n   of other members and then decrypt it if they ever gain
    access to a\n   large-scale quantum computer.  Also, when many parties know the
    PSK,\n   there are many opportunities for theft of the PSK by an attacker.\n   Once
    an attacker has the PSK, they can decrypt stored traffic if they\n   ever gain
    access to a large-scale quantum computer in the same manner\n   as a legitimate
    group member.\n   Sound cryptographic key hygiene is to use a key for one and
    only one\n   purpose.  Use of the recipient's public key for both the traditional\n
    \  CMS and the PSK-mixing variation specified in this document would be\n   a
    violation of this principle; however, there is no known way for an\n   attacker
    to take advantage of this situation.  That said, an\n   application should enforce
    separation whenever possible.  For\n   example, a purpose identifier for use in
    the X.509 extended key usage\n   certificate extension [RFC5280] could be identified
    in the future to\n   indicate that a public key should only be used in conjunction
    with or\n   without a PSK.\n   Implementations must randomly generate key-derivation
    keys as well as\n   content-encryption keys or content-authenticated-encryption
    keys.\n   Also, the generation of public/private key pairs for the key\n   transport
    and key agreement algorithms rely on random numbers.  The\n   use of inadequate
    pseudorandom number generators (PRNGs) to generate\n   cryptographic keys can
    result in little or no security.  An attacker\n   may find it much easier to reproduce
    the PRNG environment that\n   produced the keys, searching the resulting small
    set of\n   possibilities, rather than brute-force searching the whole key space.\n
    \  The generation of quality random numbers is difficult.  [RFC4086]\n   offers
    important guidance in this area.\n   Implementers should be aware that cryptographic
    algorithms become\n   weaker with time.  As new cryptanalysis techniques are developed
    and\n   computing performance improves, the work factor to break a particular\n
    \  cryptographic algorithm will be reduced.  Therefore, cryptographic\n   algorithm
    implementations should be modular, allowing new algorithms\n   to be readily inserted.
    \ That is, implementers should be prepared for\n   the set of supported algorithms
    to change over time.\n   The security properties provided by the mechanisms specified
    in this\n   document can be validated using formal methods.  A ProVerif proof
    in\n   [H2019] shows that an attacker with a large-scale quantum computer\n   that
    is capable of breaking the Diffie-Hellman key agreement\n   algorithm cannot disrupt
    the delivery of the content-encryption key\n   to the recipient and that the attacker
    cannot learn the content-\n   encryption key from the protocol exchange.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Privacy Considerations\n   An observer can see which parties are using each
    PSK simply by\n   watching the PSK key identifiers.  However, the addition of
    these key\n   identifiers does not really weaken the privacy situation.  When
    key\n   transport is used, the RecipientIdentifier is always present, and it\n
    \  clearly identifies each recipient to an observer.  When key agreement\n   is
    used, either the IssuerAndSerialNumber or the\n   RecipientKeyIdentifier is always
    present, and these clearly identify\n   each recipient.\n"
  title: 8.  Privacy Considerations
- contents:
  - "9.  IANA Considerations\n   One object identifier for the ASN.1 module in Section
    6 was assigned\n   in the \"SMI Security for S/MIME Module Identifier\n   (1.2.840.113549.1.9.16.0)\"
    registry [IANA]:\n      id-mod-cms-ori-psk-2019 OBJECT IDENTIFIER ::= {\n         iso(1)
    member-body(2) us(840) rsadsi(113549) pkcs(1)\n         pkcs-9(9) smime(16) mod(0)
    69 }\n   One new entry has been added in the \"SMI Security for S/MIME Mail\n
    \  Security (1.2.840.113549.1.9.16)\" registry [IANA]:\n      id-ori OBJECT IDENTIFIER
    ::= { iso(1) member-body(2) us(840)\n        rsadsi(113549) pkcs(1) pkcs-9(9)
    smime(16) 13 }\n   A new registry titled \"SMI Security for S/MIME Other Recipient
    Info\n   Identifiers (1.2.840.113549.1.9.16.13)\" has been created.\n   Updates
    to the new registry are to be made according to the\n   Specification Required
    policy as defined in [RFC8126].  The expert is\n   expected to ensure that any
    new values identify additional\n   RecipientInfo structures for use with the CMS.
    \ Object identifiers\n   for other purposes should not be assigned in this arc.\n
    \  Two assignments were made in the new \"SMI Security for S/MIME Other\n   Recipient
    Info Identifiers (1.2.840.113549.1.9.16.13)\" registry\n   [IANA] with references
    to this document:\n      id-ori-keyTransPSK OBJECT IDENTIFIER ::= {\n         iso(1)
    member-body(2) us(840) rsadsi(113549) pkcs(1)\n         pkcs-9(9) smime(16) id-ori(13)
    1 }\n      id-ori-keyAgreePSK OBJECT IDENTIFIER ::= {\n         iso(1) member-body(2)
    us(840) rsadsi(113549) pkcs(1)\n         pkcs-9(9) smime(16) id-ori(13) 2 }\n"
  title: 9.  IANA Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC5083]  Housley, R., \"Cryptographic Message Syntax (CMS)\n              Authenticated-Enveloped-Data
      Content Type\", RFC 5083,\n              DOI 10.17487/RFC5083, November 2007,\n
      \             <https://www.rfc-editor.org/info/rfc5083>.\n   [RFC5652]  Housley,
      R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n              RFC 5652,
      DOI 10.17487/RFC5652, September 2009,\n              <https://www.rfc-editor.org/info/rfc5652>.\n
      \  [RFC5912]  Hoffman, P. and J. Schaad, \"New ASN.1 Modules for the\n              Public
      Key Infrastructure Using X.509 (PKIX)\", RFC 5912,\n              DOI 10.17487/RFC5912,
      June 2010,\n              <https://www.rfc-editor.org/info/rfc5912>.\n   [RFC6268]
      \ Schaad, J. and S. Turner, \"Additional New ASN.1 Modules\n              for
      the Cryptographic Message Syntax (CMS) and the Public\n              Key Infrastructure
      Using X.509 (PKIX)\", RFC 6268,\n              DOI 10.17487/RFC6268, July 2011,\n
      \             <https://www.rfc-editor.org/info/rfc6268>.\n   [RFC8126]  Cotton,
      M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing an IANA
      Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI 10.17487/RFC8126,
      June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n   [RFC8174]
      \ Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [X680]     ITU-T, \"Information
      technology -- Abstract Syntax Notation\n              One (ASN.1): Specification
      of basic notation\",\n              ITU-T Recommendation X.680, August 2015.\n
      \  [X690]     ITU-T, \"Information technology -- ASN.1 encoding rules:\n              Specification
      of Basic Encoding Rules (BER), Canonical\n              Encoding Rules (CER)
      and Distinguished Encoding Rules\n              (DER)\", ITU-T Recommendation
      X.690, August 2015.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [AES]      National Institute of Standards
      and Technology, \"Advanced\n              Encryption Standard (AES)\", DOI 10.6028/NIST.FIPS.197,\n
      \             NIST PUB 197, November 2001,\n              <https://doi.org/10.6028/NIST.FIPS.197>.\n
      \  [C2PQ]     Hoffman, P., \"The Transition from Classical to Post-\n              Quantum
      Cryptography\", Work in Progress, Internet-Draft,\n              draft-hoffman-c2pq-06,
      25 November 2019,\n              <https://tools.ietf.org/html/draft-hoffman-c2pq-06>.\n
      \  [FGHT2016] Fried, J., Gaudry, P., Heninger, N., and E. Thome, \"A\n              kilobit
      hidden SNFS discrete logarithm computation\",\n              Cryptology ePrint
      Archive Report 2016/961, October 2016,\n              <https://eprint.iacr.org/2016/961.pdf>.\n
      \  [H2019]    Hammell, J., \"Subject: [lamps] WG Last Call for draft-\n              ietf-lamps-cms-mix-with-psk\"\",
      message to the IETF mailing\n              list, May 2019, <https://mailarchive.ietf.org/arch/msg/\n
      \             spasm/_6d_4jp3sOprAnbU2fp_yp_-6-k>.\n   [IANA]     IANA, \"Structure
      of Management Information (SMI) Numbers\n              (MIB Module Registrations)\",\n
      \             <https://www.iana.org/assignments/smi-numbers>.\n   [NAS2019]
      \ National Academies of Sciences, Engineering, and Medicine,\n              \"Quantum
      Computing: Progress and Prospects\",\n              DOI 10.17226/25196, 2019,\n
      \             <https://doi.org/10.17226/25196>.\n   [NIST2018] Barker, E., Chen,
      L., and R. Davis, \"Recommendation for\n              Key-Derivation Methods
      in Key-Establishment Schemes\", NIST\n              Special Publication 800-56C
      Revision 1, April 2018,\n              <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/\n
      \             NIST.SP.800-56Cr1.pdf>.\n   [RFC2631]  Rescorla, E., \"Diffie-Hellman
      Key Agreement Method\",\n              RFC 2631, DOI 10.17487/RFC2631, June
      1999,\n              <https://www.rfc-editor.org/info/rfc2631>.\n   [RFC4086]
      \ Eastlake 3rd, D., Schiller, J., and S. Crocker,\n              \"Randomness
      Requirements for Security\", BCP 106, RFC 4086,\n              DOI 10.17487/RFC4086,
      June 2005,\n              <https://www.rfc-editor.org/info/rfc4086>.\n   [RFC5280]
      \ Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,
      R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate
      and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI
      10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n
      \  [RFC5753]  Turner, S. and D. Brown, \"Use of Elliptic Curve\n              Cryptography
      (ECC) Algorithms in Cryptographic Message\n              Syntax (CMS)\", RFC
      5753, DOI 10.17487/RFC5753, January\n              2010, <https://www.rfc-editor.org/info/rfc5753>.\n
      \  [RFC5869]  Krawczyk, H. and P. Eronen, \"HMAC-based Extract-and-Expand\n
      \             Key Derivation Function (HKDF)\", RFC 5869,\n              DOI
      10.17487/RFC5869, May 2010,\n              <https://www.rfc-editor.org/info/rfc5869>.\n
      \  [RFC8017]  Moriarty, K., Ed., Kaliski, B., Jonsson, J., and A. Rusch,\n              \"PKCS
      #1: RSA Cryptography Specifications Version 2.2\",\n              RFC 8017,
      DOI 10.17487/RFC8017, November 2016,\n              <https://www.rfc-editor.org/info/rfc8017>.\n
      \  [RFC8619]  Housley, R., \"Algorithm Identifiers for the HMAC-based\n              Extract-and-Expand
      Key Derivation Function (HKDF)\",\n              RFC 8619, DOI 10.17487/RFC8619,
      June 2019,\n              <https://www.rfc-editor.org/info/rfc8619>.\n   [S1994]
      \   Shor, P., \"Algorithms for Quantum Computation: Discrete\n              Logarithms
      and Factoring\", Proceedings of the 35th Annual\n              Symposium on
      Foundations of Computer Science, pp.\n              124-134\", November 1994.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Key Transport with PSK Example\n   This example shows the establishment
    of an AES-256 content-encryption\n   key using:\n   *  a pre-shared key of 256
    bits;\n   *  key transport using RSA PKCS#1 v1.5 with a 3072-bit key;\n   *  key
    derivation using HKDF with SHA-384; and\n   *  key wrap using AES-256-KEYWRAP.\n
    \  In real-world use, the originator would encrypt the key-derivation\n   key
    in their own RSA public key as well as the recipient's public\n   key.  This is
    omitted in an attempt to simplify the example.\n"
  - contents:
    - "A.1.  Originator Processing Example\n   The pre-shared key known to Alice and
      Bob, in hexadecimal, is:\n      c244cdd11a0d1f39d9b61282770244fb0f6befb91ab7f96cb05213365cf95b15\n
      \  The identifier assigned to the pre-shared key is:\n      ptf-kmc:13614122112\n
      \  Alice obtains Bob's public key:\n      -----BEGIN PUBLIC KEY-----\n      MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEA3ocW14cxncPJ47fnEjBZ\n
      \     AyfC2lqapL3ET4jvV6C7gGeVrRQxWPDwl+cFYBBR2ej3j3/0ecDmu+XuVi2+s5JH\n      Keeza+itfuhsz3yifgeEpeK8T+SusHhn20/NBLhYKbh3kiAcCgQ56dpDrDvDcLqq\n
      \     vS3jg/VO+OPnZbofoHOOevt8Q/roahJe1PlIyQ4udWB8zZezJ4mLLfbOA9YVaYXx\n      2AHHZJevo3nmRnlgJXo6mE00E/6qkhjDHKSMdl2WG6mO9TCDZc9qY3cAJDU6Ir0v\n
      \     SH7qUl8/vN13y4UOFkn8hM4kmZ6bJqbZt5NbjHtY4uQ0VMW3RyESzhrO02mrp39a\n      uLNnH3EXdXaV1tk75H3qC7zJaeGWMJyQfOE3YfEGRKn8fxubji716D8UecAxAzFy\n
      \     FL6m1JiOyV5acAiOpxN14qRYZdHnXOM9DqGIGpoeY1UuD4Mo05osOqOUpBJHA9fS\n      whSZG7VNf+vgNWTLNYSYLI04KiMdulnvU6ds+QPz+KKtAgMBAAE=\n
      \     -----END PUBLIC KEY-----\n   Bob's RSA public key has the following key
      identifier:\n      9eeb67c9b95a74d44d2f16396680e801b5cba49c\n   Alice randomly
      generates a content-encryption key:\n      c8adc30f4a3e20ac420caa76a68f5787c02ab42afea20d19672fd963a5338e83\n
      \  Alice randomly generates a key-derivation key:\n      df85af9e3cebffde6e9b9d24263db31114d0a8e33a0d50e05eb64578ccde81eb\n
      \  Alice encrypts the key-derivation key in Bob's public key:\n      52693f12140c91dea2b44c0b7936f6be46de8a7bfab072bcb6ecfd56b06a9f65\n
      \     1bd4669d336aef7b449e5cd9b151893b7c7a3b8e364394840b0a5434cbf10e1b\n      5670aefd074faf380665d204fb95153543346f36c2125dba6f4d23d2bc61434b\n
      \     5e36ff72b3eafe57c6cf7f74924c309f174b0b8753554b58ed33a8848d707a98\n      c0c2b1ddcfd09e31fe213ca0a48dd157bd7d842e85cc76f77710d58efeaa0525\n
      \     c651bcd1410fb47534ecabaf5ab7daabed809d4b97220caf6d4929c5fb684f7b\n      b8692e6e70332ff9b3f7c11d6cac51d4a35593173d48f80ca843b89789d625e7\n
      \     997ad7d674d25a2a7d165a5f39b3cb6358e937bdb02ac8a524ac93113cedd9ad\n      c68263025c0bb0997d716e58d4d7b69739bf591f3e71c7678dc0df96f3df9e8a\n
      \     a5738f4f9ce21489f300e040891b20b2ab6d9051b3c2e68efa2fa9799a706878\n      d5f462018c021d6669ed649f9acdf78476810198bfb8bd41ffedc585eafa957e\n
      \     ea1d3625e4bed376e7ae49718aee2f575c401a26a29941d8da5b7ee9aca36471\n   Alice
      produces a 256-bit key-encryption key with HKDF using SHA-384;\n   the secret
      value is the key-derivation key; and the 'info' is the\n   DER-encoded CMSORIforPSKOtherInfo
      structure with the following\n   values:\n    0   56: SEQUENCE {\n    2   32:
      \  OCTET STRING\n          :     C2 44 CD D1 1A 0D 1F 39 D9 B6 12 82 77 02 44
      FB\n          :     0F 6B EF B9 1A B7 F9 6C B0 52 13 36 5C F9 5B 15\n   36    1:
      \  ENUMERATED 5\n   39   11:   SEQUENCE {\n   41    9:     OBJECT IDENTIFIER
      aes256-wrap (2 16 840 1 101 3 4 1 45)\n          :     }\n   52    1:   INTEGER
      32\n   55    1:   INTEGER 32\n          :   }\n   The DER encoding of CMSORIforPSKOtherInfo
      produces 58 octets:\n      30380420c244cdd11a0d1f39d9b61282770244fb0f6befb91ab7f96cb0521336\n
      \     5cf95b150a0105300b060960864801650304012d020120020120\n   The HKDF output
      is 256 bits:\n     f319e9cebb35f1c6a7a9709b8760b9d0d3e30e16c5b2b69347e9f00ca540a232\n
      \  Alice uses AES-KEY-WRAP to encrypt the 256-bit content-encryption key\n   with
      the key-encryption key:\n      ea0947250fa66cd525595e52a69aaade88efcf1b0f108abe291060391b1cdf59\n
      \     07f36b4067e45342\n   Alice encrypts the content using AES-256-GCM with
      the content-\n   encryption key.  The 12-octet nonce used is:\n      cafebabefacedbaddecaf888\n
      \  The content plaintext is:\n      48656c6c6f2c20776f726c6421\n   The resulting
      ciphertext is:\n      9af2d16f21547fcefed9b3ef2d\n   The resulting 12-octet
      authentication tag is:\n      a0e5925cc184e0172463c44c\n"
    title: A.1.  Originator Processing Example
  - contents:
    - "A.2.  ContentInfo and AuthEnvelopedData\n   Alice encodes the AuthEnvelopedData
      and the ContentInfo and sends the\n   result to Bob.  The resulting structure
      is:\n        0  650: SEQUENCE {\n        4   11:  OBJECT IDENTIFIER\n              :
      \  authEnvelopedData (1 2 840 113549 1 9 16 1 23)\n       17  633:  [0] {\n
      \      21  629:   SEQUENCE {\n       25    1:    INTEGER 0\n       28  551:
      \   SET {\n       32  547:     [4] {\n       36   11:      OBJECT IDENTIFIER\n
      \             :       keyTransPSK (1 2 840 113549 1 9 16 13 1)\n       49  530:
      \     SEQUENCE {\n       53    1:       INTEGER 0\n       56   19:       OCTET
      STRING 'ptf-kmc:13614122112'\n       77   13:       SEQUENCE {\n       79   11:
      \       OBJECT IDENTIFIER\n              :         hkdf-with-sha384 (1 2 840
      113549 1 9 16 3 29)\n              :         }\n       92   11:       SEQUENCE
      {\n       94    9:        OBJECT IDENTIFIER\n              :         aes256-wrap
      (2 16 840 1 101 3 4 1 45)\n              :         }\n      105  432:       SEQUENCE
      {\n      109  428:        SEQUENCE {\n      113    1:         INTEGER 2\n      116
      \  20:         [0]\n              :          9E EB 67 C9 B9 5A 74 D4 4D 2F 16
      39 66 80 E8 01\n              :          B5 CB A4 9C\n      138   13:         SEQUENCE
      {\n      140    9:          OBJECT IDENTIFIER\n              :           rsaEncryption
      (1 2 840 113549 1 1 1)\n      151    0:          NULL\n              :          }\n
      \     153  384:         OCTET STRING\n              :          52 69 3F 12 14
      0C 91 DE A2 B4 4C 0B 79 36 F6 BE\n              :          46 DE 8A 7B FA B0
      72 BC B6 EC FD 56 B0 6A 9F 65\n              :          1B D4 66 9D 33 6A EF
      7B 44 9E 5C D9 B1 51 89 3B\n              :          7C 7A 3B 8E 36 43 94 84
      0B 0A 54 34 CB F1 0E 1B\n              :          56 70 AE FD 07 4F AF 38 06
      65 D2 04 FB 95 15 35\n              :          43 34 6F 36 C2 12 5D BA 6F 4D
      23 D2 BC 61 43 4B\n              :          5E 36 FF 72 B3 EA FE 57 C6 CF 7F
      74 92 4C 30 9F\n              :          17 4B 0B 87 53 55 4B 58 ED 33 A8 84
      8D 70 7A 98\n              :          C0 C2 B1 DD CF D0 9E 31 FE 21 3C A0 A4
      8D D1 57\n              :          BD 7D 84 2E 85 CC 76 F7 77 10 D5 8E FE AA
      05 25\n              :          C6 51 BC D1 41 0F B4 75 34 EC AB AF 5A B7 DA
      AB\n              :          ED 80 9D 4B 97 22 0C AF 6D 49 29 C5 FB 68 4F 7B\n
      \             :          B8 69 2E 6E 70 33 2F F9 B3 F7 C1 1D 6C AC 51 D4\n              :
      \         A3 55 93 17 3D 48 F8 0C A8 43 B8 97 89 D6 25 E7\n              :          99
      7A D7 D6 74 D2 5A 2A 7D 16 5A 5F 39 B3 CB 63\n              :          58 E9
      37 BD B0 2A C8 A5 24 AC 93 11 3C ED D9 AD\n              :          C6 82 63
      02 5C 0B B0 99 7D 71 6E 58 D4 D7 B6 97\n              :          39 BF 59 1F
      3E 71 C7 67 8D C0 DF 96 F3 DF 9E 8A\n              :          A5 73 8F 4F 9C
      E2 14 89 F3 00 E0 40 89 1B 20 B2\n              :          AB 6D 90 51 B3 C2
      E6 8E FA 2F A9 79 9A 70 68 78\n              :          D5 F4 62 01 8C 02 1D
      66 69 ED 64 9F 9A CD F7 84\n              :          76 81 01 98 BF B8 BD 41
      FF ED C5 85 EA FA 95 7E\n              :          EA 1D 36 25 E4 BE D3 76 E7
      AE 49 71 8A EE 2F 57\n              :          5C 40 1A 26 A2 99 41 D8 DA 5B
      7E E9 AC A3 64 71\n              :          }\n              :         }\n      541
      \  40:       OCTET STRING\n              :        EA 09 47 25 0F A6 6C D5 25
      59 5E 52 A6 9A AA DE\n              :        88 EF CF 1B 0F 10 8A BE 29 10 60
      39 1B 1C DF 59\n              :        07 F3 6B 40 67 E4 53 42\n              :
      \       }\n              :       }\n              :      }\n      583   55:
      \   SEQUENCE {\n      585    9:     OBJECT IDENTIFIER data (1 2 840 113549 1
      7 1)\n      596   27:     SEQUENCE {\n      598    9:      OBJECT IDENTIFIER\n
      \             :       aes256-GCM (2 16 840 1 101 3 4 1 46)\n      609   14:
      \     SEQUENCE {\n      611   12:       OCTET STRING\n              :        CA
      FE BA BE FA CE DB AD DE CA F8 88\n              :        }\n              :
      \      }\n      625   13:     [0]\n              :      9A F2 D1 6F 21 54 7F
      CE FE D9 B3 EF 2D\n              :      }\n      640   12:    OCTET STRING A0
      E5 92 5C C1 84 E0 17 24 63 C4 4C\n              :    }\n              :   }\n
      \             :  }\n"
    title: A.2.  ContentInfo and AuthEnvelopedData
  - contents:
    - "A.3.  Recipient Processing Example\n   Bob's private key is:\n      -----BEGIN
      RSA PRIVATE KEY-----\n      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\n
      \     -----END RSA PRIVATE KEY-----\n   Bob decrypts the key-derivation key
      with his RSA private key:\n      df85af9e3cebffde6e9b9d24263db31114d0a8e33a0d50e05eb64578ccde81eb\n
      \  Bob produces a 256-bit key-encryption key with HKDF using SHA-384;\n   the
      secret value is the key-derivation key; and the 'info' is the\n   DER-encoded
      CMSORIforPSKOtherInfo structure with the same values as\n   shown in Appendix
      A.1.  The HKDF output is 256 bits:\n      f319e9cebb35f1c6a7a9709b8760b9d0d3e30e16c5b2b69347e9f00ca540a232\n
      \  Bob uses AES-KEY-WRAP to decrypt the content-encryption key with the\n   key-encryption
      key; the content-encryption key is:\n      c8adc30f4a3e20ac420caa76a68f5787c02ab42afea20d19672fd963a5338e83\n
      \  Bob decrypts the content using AES-256-GCM with the content-\n   encryption
      key and checks the received authentication tag.  The\n   12-octet nonce used
      is:\n      cafebabefacedbaddecaf888\n   The 12-octet authentication tag is:\n
      \     a0e5925cc184e0172463c44c\n   The received ciphertext content is:\n      9af2d16f21547fcefed9b3ef2d\n
      \  The resulting plaintext content is:\n      48656c6c6f2c20776f726c6421\n"
    title: A.3.  Recipient Processing Example
  title: Appendix A.  Key Transport with PSK Example
- contents:
  - "Appendix B.  Key Agreement with PSK Example\n   This example shows the establishment
    of an AES-256 content-encryption\n   key using:\n   *  a pre-shared key of 256
    bits;\n   *  key agreement using ECDH on curve P-384 and X9.63 KDF with SHA-\n
    \     384;\n   *  key derivation using HKDF with SHA-384; and\n   *  key wrap
    using AES-256-KEYWRAP.\n   In real-world use, the originator would treat themselves
    as an\n   additional recipient by performing key agreement with their own\n   static
    public key and the ephemeral private key generated for this\n   message.  This
    is omitted in an attempt to simplify the example.\n"
  - contents:
    - "B.1.  Originator Processing Example\n   The pre-shared key known to Alice and
      Bob, in hexadecimal, is:\n      4aa53cbf500850dd583a5d9821605c6fa228fb5917f87c1c078660214e2d83e4\n
      \  The identifier assigned to the pre-shared key is:\n      ptf-kmc:216840110121\n
      \  Alice randomly generates a content-encryption key:\n      937b1219a64d57ad81c05cc86075e86017848c824d4e85800c731c5b7b091033\n
      \  Alice obtains Bob's static ECDH public key:\n      -----BEGIN PUBLIC KEY-----\n
      \     MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEScGPBO9nmUwGrgbGEoFY9HR/bCo0WyeY\n      /dePQVrwZmwN2yMJmO2d1kWCvLTz8U7atinxyIRe9CV54yau1KWU/wbkhPDnzuSM\n
      \     YkcpxMGo32z3JetEloW5aFOja13vv/W5\n      -----END PUBLIC KEY-----\n   It
      has a key identifier of:\n      e8218b98b8b7d86b5e9ebdc8aeb8c4ecdc05c529\n   Alice
      generates an ephemeral ECDH key pair on the same curve:\n      -----BEGIN EC
      PRIVATE KEY-----\n      MIGkAgEBBDCMiWLG44ik+L8cYVvJrQdLcFA+PwlgRF+Wt1Ab25qUh8OB7OePWjxp\n
      \     /b8P6IOuI6GgBwYFK4EEACKhZANiAAQ5G0EmJk/2ks8sXY1kzbuG3Uu3ttWwQRXA\n      LFDJICjvYfr+yTpOQVkchm88FAh9MEkw4NKctokKNgpsqXyrT3DtOg76oIYENpPb\n
      \     GE5lJdjPx9sBsZQdABwlsU0Zb7P/7i8=\n      -----END EC PRIVATE KEY-----\n
      \  Alice computes a shared secret called \"Z\" using Bob's static ECDH\n   public
      key and her ephemeral ECDH private key; Z is:\n      3f015ed0ff4b99523a95157bbe77e9cc0ee52fcffeb7e41eac79d1c11b6cc556\n
      \     19cf8807e6d800c2de40240fe0e26adc\n   Alice computes the pairwise key-encryption
      key, called \"KEK1\", from Z\n   using the X9.63 KDF with the ECC-CMS-SharedInfo
      structure with the\n   following values:\n    0   21: SEQUENCE {\n    2   11:
      \  SEQUENCE {\n    4    9:     OBJECT IDENTIFIER aes256-wrap (2 16 840 1 101
      3 4 1 45)\n          :     }\n   15    6:   [2] {\n   17    4:     OCTET STRING
      00 00 00 20\n          :     }\n          :   }\n   The DER encoding of ECC-CMS-SharedInfo
      produces 23 octets:\n      3015300b060960864801650304012da206040400000020\n
      \  The X9.63 KDF output is the 256-bit KEK1:\n      27dc25ddb0b425f7a968ceada80a8f73c6ccaab115baafcce4a22a45d6b8f3da\n
      \  Alice produces the 256-bit KEK2 with HKDF using SHA-384; the secret\n   value
      is KEK1; and the 'info' is the DER-encoded\n   CMSORIforPSKOtherInfo structure
      with the following values:\n    0   56: SEQUENCE {\n    2   32:   OCTET STRING\n
      \         :     4A A5 3C BF 50 08 50 DD 58 3A 5D 98 21 60 5C 6F\n          :
      \    A2 28 FB 59 17 F8 7C 1C 07 86 60 21 4E 2D 83 E4\n   36    1:   ENUMERATED
      10\n   39   11:   SEQUENCE {\n   41    9:     OBJECT IDENTIFIER aes256-wrap
      (2 16 840 1 101 3 4 1 45)\n          :      }\n   52    1:   INTEGER 32\n   55
      \   1:   INTEGER 32\n          :   }\n   The DER encoding of CMSORIforPSKOtherInfo
      produces 58 octets:\n      303804204aa53cbf500850dd583a5d9821605c6fa228fb5917f87c1c07866021\n
      \     4e2d83e40a010a300b060960864801650304012d020120020120\n   The HKDF output
      is the 256-bit KEK2:\n      7de693ee30ae22b5f8f6cd026c2164103f4e1430f1ab135dc1fb98954f9830bb\n
      \  Alice uses AES-KEY-WRAP to encrypt the content-encryption key with\n   the
      KEK2; the wrapped key is:\n      229fe0b45e40003e7d8244ec1b7e7ffb2c8dca16c36f5737222553a71263a92b\n
      \     de08866a602d63f4\n   Alice encrypts the content using AES-256-GCM with
      the content-\n   encryption key.  The 12-octet nonce used is:\n      dbaddecaf888cafebabeface\n
      \  The plaintext is:\n      48656c6c6f2c20776f726c6421\n   The resulting ciphertext
      is:\n      fc6d6f823e3ed2d209d0c6ffcf\n   The resulting 12-octet authentication
      tag is:\n      550260c42e5b29719426c1ff\n"
    title: B.1.  Originator Processing Example
  - contents:
    - "B.2.  ContentInfo and AuthEnvelopedData\n   Alice encodes the AuthEnvelopedData
      and the ContentInfo and sends the\n   result to Bob.  The resulting structure
      is:\n        0  327: SEQUENCE {\n        4   11:  OBJECT IDENTIFIER\n              :
      \  authEnvelopedData (1 2 840 113549 1 9 16 1 23)\n       17  310:  [0] {\n
      \      21  306:   SEQUENCE {\n       25    1:    INTEGER 0\n       28  229:
      \   SET {\n       31  226:     [4] {\n       34   11:      OBJECT IDENTIFIER\n
      \             :       keyAgreePSK (1 2 840 113549 1 9 16 13 2)\n       47  210:
      \     SEQUENCE {\n       50    1:       INTEGER 0\n       53   20:       OCTET
      STRING 'ptf-kmc:216840110121'\n       75   85:       [0] {\n       77   83:
      \       [1] {\n       79   19:         SEQUENCE {\n       81    6:          OBJECT
      IDENTIFIER\n              :           ecdhX963KDF-SHA256 (1 3 132 1 11 1)\n
      \      89    9:          OBJECT IDENTIFIER\n              :           aes256-wrap
      (2 16 840 1 101 3 4 1 45)\n              :           }\n      100   60:         BIT
      STRING, encapsulates {\n      103   57:          OCTET STRING\n              :
      \         1B 41 26 26 4F F6 92 CF 2C 5D 8D 64 CD BB 86 DD\n              :          4B
      B7 B6 D5 B0 41 15 C0 2C 50 C9 20 28 EF 61 FA\n              :          FE C9
      3A 4E 41 59 1C 86 6F 3C 14 08 7D 30 49 30\n              :          E0 D2 9C
      B6 89 0A 36 0A 6C\n              :          }\n              :         }\n              :
      \       }\n      162   13:       SEQUENCE {\n      164   11:        OBJECT IDENTIFIER\n
      \             :         hkdf-with-sha384 (1 2 840 113549 1 9 16 3 29)\n              :
      \        }\n      177   11:       SEQUENCE {\n      179    9:        OBJECT
      IDENTIFIER\n              :         aes256-wrap (2 16 840 1 101 3 4 1 45)\n
      \             :         }\n      190   68:       SEQUENCE {\n      192   66:
      \       SEQUENCE {\n      194   22:         [0] {\n      196   20:          OCTET
      STRING\n              :          E8 21 8B 98 B8 B7 D8 6B 5E 9E BD C8 AE B8 C4
      EC\n              :          DC 05 C5 29\n              :          }\n      218
      \  40:         OCTET STRING\n              :         22 9F E0 B4 5E 40 00 3E
      7D 82 44 EC 1B 7E 7F FB\n              :         2C 8D CA 16 C3 6F 57 37 22
      25 53 A7 12 63 A9 2B\n              :         DE 08 86 6A 60 2D 63 F4\n              :
      \        }\n              :        }\n              :       }\n              :
      \     }\n              :     }\n      260   55:    SEQUENCE {\n      262    9:
      \    OBJECT IDENTIFIER data (1 2 840 113549 1 7 1)\n      273   27:     SEQUENCE
      {\n      275    9:      OBJECT IDENTIFIER\n              :       aes256-GCM
      (2 16 840 1 101 3 4 1 46)\n      286   14:      SEQUENCE {\n      288   12:
      \      OCTET STRING\n              :        DB AD DE CA F8 88 CA FE BA BE FA
      CE\n              :        }\n              :       }\n      302   13:     [0]\n
      \             :      FC 6D 6F 82 3E 3E D2 D2 09 D0 C6 FF CF\n              :
      \     }\n      317   12:    OCTET STRING 55 02 60 C4 2E 5B 29 71 94 26 C1 FF\n
      \             :     }\n              :    }\n              :   }\n"
    title: B.2.  ContentInfo and AuthEnvelopedData
  - contents:
    - "B.3.  Recipient Processing Example\n   Bob obtains Alice's ephemeral ECDH public
      key from the message:\n      -----BEGIN PUBLIC KEY-----\n      MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEORtBJiZP9pLPLF2NZM27ht1Lt7bVsEEV\n
      \     wCxQySAo72H6/sk6TkFZHIZvPBQIfTBJMODSnLaJCjYKbKl8q09w7ToO+qCGBDaT\n      2xhOZSXYz8fbAbGUHQAcJbFNGW+z/+4v\n
      \     -----END PUBLIC KEY-----\n   Bob's static ECDH private key is:\n      -----BEGIN
      EC PRIVATE KEY-----\n      MIGkAgEBBDAnJ4hB+tTUN9X03/W0RsrYy+qcptlRSYkhaDIsQYPXfTU0ugjJEmRk\n
      \     NTPj4y1IRjegBwYFK4EEACKhZANiAARJwY8E72eZTAauBsYSgVj0dH9sKjRbJ5j9\n      149BWvBmbA3bIwmY7Z3WRYK8tPPxTtq2KfHIhF70JXnjJq7UpZT/BuSE8OfO5Ixi\n
      \     RynEwajfbPcl60SWhbloU6NrXe+/9bk=\n      -----END EC PRIVATE KEY-----\n
      \  Bob computes a shared secret called \"Z\" using Alice's ephemeral ECDH\n
      \  public key and his static ECDH private key; Z is:\n      3f015ed0ff4b99523a95157bbe77e9cc0ee52fcffeb7e41eac79d1c11b6cc556\n
      \     19cf8807e6d800c2de40240fe0e26adc\n   Bob computes the pairwise key-encryption
      key, KEK1, from Z using the\n   X9.63 KDF with the ECC-CMS-SharedInfo structure
      with the values shown\n   in Appendix B.1.  The X9.63 KDF output is the 256-bit
      KEK1:\n      27dc25ddb0b425f7a968ceada80a8f73c6ccaab115baafcce4a22a45d6b8f3da\n
      \  Bob produces the 256-bit KEK2 with HKDF using SHA-384; the secret\n   value
      is KEK1; and the 'info' is the DER-encoded\n   CMSORIforPSKOtherInfo structure
      with the values shown in\n   Appendix B.1.  The HKDF output is the 256-bit KEK2:\n
      \     7de693ee30ae22b5f8f6cd026c2164103f4e1430f1ab135dc1fb98954f9830bb\n   Bob
      uses AES-KEY-WRAP to decrypt the content-encryption key with the\n   KEK2; the
      content-encryption key is:\n      937b1219a64d57ad81c05cc86075e86017848c824d4e85800c731c5b7b091033\n
      \  Bob decrypts the content using AES-256-GCM with the content-\n   encryption
      key and checks the received authentication tag.  The\n   12-octet nonce used
      is:\n      dbaddecaf888cafebabeface\n   The 12-octet authentication tag is:\n
      \     550260c42e5b29719426c1ff\n   The received ciphertext content is:\n      fc6d6f823e3ed2d209d0c6ffcf\n
      \  The resulting plaintext content is:\n      48656c6c6f2c20776f726c6421\n"
    title: B.3.  Recipient Processing Example
  title: Appendix B.  Key Agreement with PSK Example
- contents:
  - "Acknowledgements\n   Many thanks to Roman Danyliw, Ben Kaduk, Burt Kaliski, Panos\n
    \  Kampanakis, Jim Schaad, Robert Sparks, Sean Turner, and Daniel Van\n   Geest
    for their review and insightful comments.  They have greatly\n   improved the
    design, clarity, and implementation guidance.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Russ Housley\n   Vigil Security, LLC\n   516 Dranesville
    Road\n   Herndon, VA 20170\n"
  title: Author's Address
