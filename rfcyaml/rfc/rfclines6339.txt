Abstract This document describes three abstract Generic Security Service Application Program Interface (GSS API) interfaces used to encapsulate/decapsulate context tokens and compare OIDs.
This document also specifies C bindings for the abstract interfaces.
The Generic Security Service Application Program Interface (GSS API) [RFC2743] is a framework that provides security services to applications using a variety of authentication mechanisms.
There are widely implemented C bindings [RFC2744] for the abstract interface.
For initial context tokens, a mechanism independent token format may be used (see Section 3.1 of [RFC2743]).
Some protocols, e.g., Simple Authentication and Security Layer (SASL) GS2 [RFC5801], need the ability to add and remove this token header, which contains some ASN.1 tags, a length, and the mechanism OID to and from context tokens.
This document adds two GSS API interfaces (GSS Encapsulate token and GSS Decapsulate token) so that GSS API libraries can provide this functionality.
Being able to compare OIDs is useful, for example, when validating that a negotiated mechanism matches the requested one.
This document adds one GSS API interface (GSS OID equal) for this purpose.
Text from this specification can be used as implementation documentation, and for this reason, Sections 3, 4, 5, 6, and 8 should be considered code components.
Conventions Used in This Document
The document uses terms from, and is structured in a similar way as, [RFC2743] and [RFC2744].
The normative reference to [RFC5587] is for the C types "gss const buffer t" and "gss const OID"; nothing else from that document is required to implement this document.
GSS Encapsulate token Call Inputs:
input token OCTET STRING   buffer with token data to encapsulate  token oid OBJECT IDENTIFIER
object identifier of mechanism for the token Outputs:  major status INTEGER
; caller must release with GSS Release buffer()
GSS S COMPLETE indicates that completion was successful and that output parameters hold correct information.
GSS S FAILURE indicates that encapsulation failed for reasons unspecified at the GSS API level.
GSS Encapsulate token() is used to add the mechanism independent token header to GSS API context token data.
token OM uint32 gss encapsulate token ( gss const buffer t input token, gss const OID token oid, gss buffer t output token)
: Add the mechanism independent token header to GSS API context token data.
Indicates that encapsulation failed for reasons unspecified at the GSS API level.
GSS Decapsulate token Call Inputs:
input token OCTET STRING   buffer with token to decapsulate  token oid OBJECT IDENTIFIER
expected object identifier of token Outputs:  major status INTEGER
; caller must release with GSS Release buffer()
GSS S COMPLETE indicates that completion was successful and that output parameters hold correct information.
GSS S DEFECTIVE TOKEN means that the token failed consistency checks (e.g., OID mismatch or ASN.1 DER length errors).
GSS S FAILURE indicates that decapsulation failed for reasons unspecified at the GSS API level.
GSS Decapsulate token() is used to remove the mechanism independent token header from an initial GSS API context token.
token OM uint32 gss decapsulate
token ( gss const buffer t input token, gss const OID token oid
, gss buffer t output token)
: Remove the mechanism independent token header from an initial GSS API context token.
GSS S DEFECTIVE TOKEN  Means that the token failed consistency checks (e.g., OID mismatch or ASN.1 DER length errors).
Indicates that decapsulation failed for reasons unspecified at the GSS API level.
GSS OID equal Call Inputs:
first object identifier to compare  second oid OBJECT IDENTIFIER
second object identifier to compare Return codes:
non 0 when neither OID is GSS C NO OID and the two OIDs are equal.
0 when the two OIDs are not identical or either OID is equal to GSS C NO OID.
GSS OID equal() is used to add compare two OIDs for equality.
NO OID will not match any OID, including GSS C NO OID itself.
gss oid equal extern int gss oid equal
( gss const OID first oid, gss const OID second oid )
Purpose: Compare two OIDs for equality.
NO OID will not match any OID, including GSS C NO OID itself.
Neither OID is GSS C
the two OIDs are equal.
The two OIDs are not identical, or either OID is equal to GSS C NO OID.
Test Vector For the GSS Encapsulate token function
, if the "input token" buffer is the 3 byte octet sequence "foo" and the "token oid" OID is 1.2.840.113554.1.2.2, which encoded corresponds to the 9 byte long octet sequence (using C notation) "\x2a\x86\x48\x86\xf7\x12\x01\x02\x02", the output should be the 16 byte long octet sequence (again in C notation) "\x60\x0e\x06\x09\x2a\x86\x48\x86\xf7\x12\x01\x02\x02\x66\x6f\x6f".
These values may also be used to test the GSS Decapsulate token interface.
The security considerations of the base GSS API specification ([RFC2743]) and the base C bindings ([RFC2744]) are inherited.
Encapsulation of data does not provide any kind of integrity or confidentiality.
Implementations need to treat input as potentially untrustworthy for purposes of dereferencing memory objects to avoid security vulnerabilities.
In particular, ASN.1 DER length fields are a common source of mistakes.
