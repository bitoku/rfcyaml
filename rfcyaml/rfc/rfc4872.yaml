- contents:
  - "              RSVP-TE Extensions in Support of End-to-End\n      Generalized
    Multi-Protocol Label Switching (GMPLS) Recovery\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes protocol-specific procedures and extensions\n
    \  for Generalized Multi-Protocol Label Switching (GMPLS) Resource\n   ReSerVation
    Protocol - Traffic Engineering (RSVP-TE) signaling to\n   support end-to-end Label
    Switched Path (LSP) recovery that denotes\n   protection and restoration.  A generic
    functional description of\n   GMPLS recovery can be found in a companion document,
    RFC 4426.\n"
  title: Abstract
- contents:
  - "Table of Contents\n  1. Introduction .....................................................3\n
    \  2. Conventions Used in This Document ...............................5\n   3.
    Relationship to Fast Reroute (FRR) ..............................5\n   4. Definitions
    .....................................................6\n      4.1. LSP Identification
    .........................................6\n      4.2. Recovery Attributes ........................................7\n
    \          4.2.1. LSP Status ..........................................7\n           4.2.2.
    LSP Recovery ........................................8\n      4.3. LSP Association
    ............................................9\n   5. 1+1 Unidirectional Protection
    ...................................9\n      5.1. Identifiers ...............................................10\n
    \  6. 1+1 Bidirectional Protection ...................................10\n      6.1.
    Identifiers ...............................................11\n      6.2. End-to-End
    Switchover Request/Response ....................11\n   7. 1:1 Protection with
    Extra-Traffic ..............................13\n      7.1. Identifiers ...............................................14\n
    \     7.2. End-to-End Switchover Request/Response ....................15\n      7.3.
    1:N (N > 1) Protection with Extra-Traffic .................16\n   8. Rerouting
    without Extra-Traffic ................................17\n      8.1. Identifiers
    ...............................................19\n      8.2. Signaling Primary
    LSPs ....................................19\n      8.3. Signaling Secondary LSPs
    ..................................19\n   9. Shared-Mesh Restoration ........................................20\n
    \     9.1. Identifiers ...............................................22\n      9.2.
    Signaling Primary LSPs ....................................22\n      9.3. Signaling
    Secondary LSPs ..................................23\n   10. LSP Preemption ................................................23\n
    \  11. (Full) LSP Rerouting ..........................................25\n      11.1.
    Identifiers ..............................................25\n      11.2. Signaling
    Reroutable LSPs ................................26\n   12. Reversion .....................................................26\n
    \  13. Recovery Commands .............................................29\n   14.
    PROTECTION Object .............................................31\n      14.1.
    Format ...................................................31\n      14.2. Processing
    ...............................................33\n   15. PRIMARY_PATH_ROUTE Object
    .....................................33\n      15.1. Format ...................................................34\n
    \     15.2. Subobjects ...............................................34\n      15.3.
    Applicability ............................................35\n      15.4. Processing
    ...............................................36\n   16. ASSOCIATION Object ............................................37\n
    \     16.1. Format ...................................................37\n      16.2.
    Processing ...............................................38\n   17. Updated RSVP
    Message Formats ..................................39\n   18. Security Considerations
    .......................................40\n   19. IANA Considerations ...........................................41\n
    \  20. Acknowledgments ...............................................43\n   21.
    References ....................................................43\n      21.1.
    Normative References .....................................43\n      21.2. Informative
    References ...................................44\n   22. Contributors ..................................................45\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Generalized Multi-Protocol Label Switching (GMPLS) extends
    MPLS to\n   include support for Layer-2 Switch Capable (L2SC), Time-Division\n
    \  Multiplex (TDM), Lambda Switch Capable (LSC), and Fiber Switch\n   Capable
    (FSC) interfaces.  GMPLS recovery uses control plane\n   mechanisms (i.e., signaling,
    routing, and link management mechanisms)\n   to support data plane fault recovery.
    \ Note that the analogous (data\n   plane) fault detection mechanisms are required
    to be present in\n   support of the control plane mechanisms.  In this document,
    the term\n   \"recovery\" is generically used to denote both protection and\n
    \  restoration; the specific terms \"protection\" and \"restoration\" are\n   only
    used when differentiation is required.  The subtle distinction\n   between protection
    and restoration is made based on the resource\n   allocation done during the recovery
    phase (see [RFC4427]).\n   A functional description of GMPLS recovery is provided
    in [RFC4426]\n   and should be considered as a companion document.  The present\n
    \  document describes the protocol-specific procedures for GMPLS RSVP-\n   TE
    (Resource ReSerVation Protocol - Traffic Engineering) signaling\n   (see [RFC3473])
    to support end-to-end recovery.  End-to-end recovery\n   refers to the recovery
    of an entire LSP from its head-end (ingress\n   node endpoint) to its tail-end
    (egress node endpoint).  With end-to-\n   end recovery, working LSPs are assumed
    to be resource-disjoint (where\n   a resource is a link, node, or Shared Risk
    Link Group (SRLG)) in the\n   network so that they do not share any failure probability,
    but this\n   is not mandatory.  With respect to a given set of network resources,\n
    \  a pair of working/protecting LSPs SHOULD be resource disjoint in case\n   of
    dedicated recovery type (see below).  On the other hand, in case\n   of shared
    recovery (see below), a group of working LSPs SHOULD be\n   mutually resource-disjoint
    in order to allow for a (single and\n   commonly) shared protecting LSP, itself
    resource-disjoint from each\n   of the working LSPs.  Note that resource disjointness
    is a necessary\n   (but not sufficient) condition to ensure LSP recoverability.\n
    \  The present document addresses four types of end-to-end LSP recovery:\n   1)
    1+1 (unidirectional/bidirectional) protection, 2) 1:N (N >= 1) LSP\n   protection
    with extra-traffic, 3) pre-planned LSP rerouting without\n   extra-traffic (including
    shared mesh), and 4) full LSP rerouting.\n   1) The simplest notion of end-to-end
    LSP protection is 1+1\n      unidirectional protection.  Using this type of protection,
    a\n      protecting LSP is signaled over a dedicated resource-disjoint\n      alternate
    path to protect an associated working LSP.  Normal\n      traffic is simultaneously
    sent on both LSPs and a selector is used\n      at the egress node to receive
    traffic from one of the LSPs.  If a\n      failure occurs along one of the LSPs,
    the egress node selects the\n      traffic from the valid LSP.  No coordination
    is required between\n      the end nodes when a failure/switchover occurs.\n      In
    1+1 bidirectional protection, a protecting LSP is signaled over\n      a dedicated
    resource-disjoint alternate path to protect the\n      working LSP.  Normal traffic
    is simultaneously sent on both LSPs\n      (in both directions), and a selector
    is used at both\n      ingress/egress nodes to receive traffic from the same LSP.
    \ This\n      requires coordination between the end-nodes when switching to the\n
    \     protecting LSP.\n   2) In 1:N (N >= 1) protection with extra-traffic, the
    protecting LSP\n      is a fully provisioned and resource-disjoint LSP from the
    N\n      working LSPs, that allows for carrying extra-traffic.  The N\n      working
    LSPs MAY be mutually resource-disjoint.  Coordination\n      between end-nodes
    is required when switching from one of the\n      working LSPs to the protecting
    LSP.  As the protecting LSP is\n      fully provisioned, default operations during
    protection switching\n      are specified for a protecting LSP carrying extra-traffic,
    but\n      this is not mandatory.  Note that M:N protection is out of scope\n
    \     of this document (though mechanisms it defines may be extended to\n      cover
    it).\n   3) Pre-planned LSP rerouting (or restoration) relies on the\n      establishment
    between the same pair of end-nodes of a working LSP\n      and a protecting LSP
    that is link/node/SRLG disjoint from the\n      working one.  Here, the recovery
    resources for the protecting LSP\n      are pre-reserved but explicit action is
    required to activate\n      (i.e., commit resource allocation at the data plane)
    a specific\n      protecting LSP instantiated during the (pre-)provisioning phase.\n
    \     Since the protecting LSP is not \"active\" (i.e., fully\n      instantiated),
    it cannot carry any extra-traffic.  This does not\n      mean that the corresponding
    resources cannot be used by other\n      LSPs.  Therefore, this mechanism protects
    against working LSP(s)\n      failure(s) but requires activation of the protecting
    LSP after\n      working LSP failure occurrence.  This requires restoration\n
    \     signaling along the protecting path.  \"Shared-mesh\" restoration\n      can
    be seen as a particular case of pre-planned LSP rerouting that\n      reduces
    the recovery resource requirements by allowing multiple\n      protecting LSPs
    to share common link and node resources.  The\n      recovery resources are pre-reserved
    but explicit action is\n      required to activate (i.e., commit resource allocation
    at the data\n      plane) a specific protecting LSP instantiated during the (pre-)\n
    \     provisioning phase.  This procedure requires restoration signaling\n      along
    the protecting path.\n      Note that in both cases, bandwidth pre-reserved for
    a protecting\n      (but not activated) LSP can be made available for carrying
    extra\n      traffic.  LSPs for extra-traffic (with lower holding priority than\n
    \     the protecting LSP) can then be established using the bandwidth\n      pre-reserved
    for the protecting LSP.  Also, any lower priority LSP\n      that use the pre-reserved
    resources for the protecting LSP(s) must\n      be preempted during the activation
    of the protecting LSP.\n   4) Full LSP rerouting (or restoration) switches normal
    traffic to an\n      alternate LSP that is not even partially established until
    after\n      the working LSP failure occurs.  The new alternate route is\n      selected
    at the LSP head-end node, it may reuse resources of the\n      failed LSP at intermediate
    nodes and may include additional\n      intermediate nodes and/or links.\n   Crankback
    signaling (see [CRANK]) and LSP segment recovery (see\n   [RFC4873]) are further
    detailed in dedicated companion documents.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in [RFC2119].\n   In addition, the reader is assumed to be familiar with the\n
    \  terminology used in [RFC3945], [RFC3471], [RFC3473] and referenced as\n   well
    as in [RFC4427] and [RFC4426].\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  Relationship to Fast Reroute (FRR)\n   There is no impact to RSVP-TE Fast
    Reroute (FRR) [RFC4090] introduced\n   by end-to-end GMPLS recovery i.e., it is
    possible to use either\n   method defined in FRR with end-to-end GMPLS recovery.\n
    \  The objects used and/or newly introduced by end-to-end recovery will\n   be
    ignored by [RFC4090] conformant implementations, and FRR can\n   operate on a
    per LSP basis as defined in [RFC4090].\n"
  title: 3.  Relationship to Fast Reroute (FRR)
- contents:
  - '4.  Definitions

    '
  - contents:
    - "4.1.  LSP Identification\n   This section reviews terms previously defined
      in [RFC2205],\n   [RFC3209], and [RFC3473].  LSP tunnels are identified by a\n
      \  combination of the SESSION and SENDER_TEMPLATE objects (see also\n   [RFC3209]).
      \ The relevant fields are as follows:\n   IPv4 (or IPv6) tunnel endpoint address\n
      \       IPv4 (or IPv6) address of the egress node for the tunnel.\n   Tunnel
      ID\n        A 16-bit identifier used in the SESSION that remains constant\n
      \       over the life of the tunnel.\n   Extended Tunnel ID\n        A 32-bit
      (or 16-byte) identifier used in the SESSION that\n        remains constant over
      the life of the tunnel.  Normally set to\n        all zeros.  Ingress nodes
      that wish to narrow the scope of a\n        SESSION to the ingress-egress pair
      MAY place their IPv4 (or\n        IPv6) address here as a globally unique identifier.\n
      \  IPv4 (or IPv6) tunnel sender address\n        IPv4 (or IPv6) address for
      a sender node.\n   LSP ID\n        A 16-bit identifier used in the SENDER_TEMPLATE
      and FILTER_SPEC\n        that can be changed to allow a sender to share resources
      with\n        itself.\n   The first three fields are carried in the SESSION
      object (Path and\n   Resv message) and constitute the basic identification of
      the LSP\n   tunnel.\n   The last two fields are carried in the SENDER_TEMPLATE
      (Path message)\n   and FILTER_SPEC objects (Resv message).  The LSP ID is used
      to\n   differentiate LSPs that belong to the same LSP Tunnel (as identified\n
      \  by its Tunnel ID).\n"
    title: 4.1.  LSP Identification
  - contents:
    - "4.2.  Recovery Attributes\n   The recovery attributes include all the parameters
      that determine the\n   status of an LSP within the recovery scheme to which
      it is\n   associated.  These attributes are part of the PROTECTION object\n
      \  introduced in Section 14.\n"
    - contents:
      - "4.2.1.  LSP Status\n   The following bits are used in determining resource
        allocation and\n   status of the LSP within the group of LSPs forming the
        protected\n   entity:\n   - S (Secondary) bit: enables distinction between
        primary and\n     secondary LSPs.  A primary LSP is a fully established LSP
        for which\n     the resource allocation has been committed at the data plane
        (i.e.,\n     full cross-connection has been performed).  Both working and\n
        \    protecting LSPs can be primary LSPs.  A secondary LSP is an LSP\n     that
        has been provisioned in the control plane only, and for which\n     resource
        selection MAY have been done but for which the resource\n     allocation has
        not been committed at the data plane (for instance,\n     no cross-connection
        has been performed).  Therefore, a secondary\n     LSP is not immediately
        available to carry any traffic (thus\n     requiring additional signaling
        to be available).  A secondary LSP\n     can only be a protecting LSP.  The
        (data plane) resources allocated\n     for a secondary LSP MAY be used by
        other LSPs until the primary LSP\n     fails over to the secondary LSP.\n
        \  - P (Protecting) bit: enables distinction between working and\n     protecting
        LSPs.  A working LSP must be a primary LSP whilst a\n     protecting LSP can
        be either a primary or a secondary LSP.  When\n     protecting LSP(s) are
        associated with working LSP(s), one also\n     refers to the latter as protected
        LSPs.\n   Note: The combination \"secondary working\" is not valid (only\n
        \  protecting LSPs can be secondary LSPs).  Working LSPs are always\n   primary
        LSPs (i.e., fully established) whilst primary LSPs can be\n   either working
        or protecting LSPs.\n   - O (Operational) bit: this bit is set when a protecting
        LSP is\n     carrying the normal traffic after protection switching (i.e.,\n
        \    applies only in case of dedicated LSP protection or LSP protection\n
        \    with extra-traffic; see Section 4.2.2).\n   In this document, the PROTECTION
        object uses as a basis the\n   PROTECTION object defined in [RFC3471] and
        [RFC3473] and defines\n   additional fields within it.  The fields defined
        in [RFC3471] and\n   [RFC3473] are unchanged by this document.\n"
      title: 4.2.1.  LSP Status
    - contents:
      - "4.2.2.  LSP Recovery\n   The following classification is used to distinguish
        the LSP\n   Protection Type with which LSPs can be associated at end-nodes
        (a\n   distinct value is associated with each Protection Type in the\n   PROTECTION
        object; see Section 14):\n   - Full LSP Rerouting: set if a primary working
        LSP is dynamically\n     recoverable using (non pre-planned) head-end rerouting.\n
        \  - Pre-planned LSP Rerouting without Extra-traffic: set if a\n     protecting
        LSP is a secondary LSP that allows sharing of the pre-\n     reserved recovery
        resources between one or more than one\n     <sender;receiver> pair.  When
        the secondary LSPs resources are not\n     pre-reserved for a single <sender;receiver>
        pair, this type is\n     referred to as \"shared mesh\" recovery.\n   - LSP
        Protection with Extra-traffic: set if a protecting LSP is a\n     dedicated
        primary LSP that allows for extra-traffic transport and\n     thus precludes
        any sharing of the recovery resources between more\n     than one <sender;receiver>
        pair.  This type includes 1:N LSP\n     protection with extra-traffic.\n   -
        Dedicated LSP Protection: set if a protecting LSP does not allow\n     sharing
        of the recovery resources nor the transport of extra-\n     traffic (implying
        in the present context, duplication of the signal\n     over both working
        and protecting LSPs as in 1+1 dedicated\n     protection).  Note also that
        this document makes a distinction\n     between 1+1 unidirectional and bidirectional
        dedicated LSP\n     protection.\n   For LSP protection, in particular, when
        the data plane provides\n   automated protection-switching capability (see
        for instance ITU-T\n   [G.841] Recommendation), a Notification (N) bit is
        defined in the\n   PROTECTION object.  It allows for distinction between protection\n
        \  switching signaling via the control plane or the data plane.\n   Note:
        this document assumes that Protection Type values have end-to-\n   end significance
        and that the same value is sent over the protected\n   and the protecting
        path.  In this context, shared-mesh (for instance)\n   appears from the end-nodes
        perspective as being simply an LSP\n   rerouting without extra-traffic services.
        \ The net result of this is\n   that a single bit (the S bit alone) does not
        allow determining\n   whether resource allocation should be performed with
        respect to the\n   status of the LSP within the protected entity.  The introduction
        of\n   the P bit solves this problem unambiguously.  These bits MUST be\n
        \  processed on a hop-by-hop basis (independently of the LSP Protection\n
        \  Type context).  This allows for an easier implementation of reversion\n
        \  signaling (see Section 12) but also facilitates the transparent\n   delivery
        of protected services since any intermediate node is not\n   required to know
        the semantics associated with the incoming LSP\n   Protection Type value.\n"
      title: 4.2.2.  LSP Recovery
    title: 4.2.  Recovery Attributes
  - contents:
    - "4.3.  LSP Association\n   The ASSOCIATION object, introduced in Section 16,
      is used to\n   associate the working and protecting LSPs.\n   When used for
      signaling the working LSP, the Association ID of the\n   ASSOCIATION object
      (see Section 16) identifies the protecting LSP.\n   When used for signaling
      the protecting LSP, this field identifies the\n   LSP protected by the protecting
      LSP.\n"
    title: 4.3.  LSP Association
  title: 4.  Definitions
- contents:
  - "5.  1+1 Unidirectional Protection\n   One of the simplest notions of end-to-end
    LSP protection is 1+1\n   unidirectional protection.\n   Consider the following
    network topology:\n                                  A---B---C---D\n                                   \\
    \        /\n                                    E---F---G\n   The paths [A,B,C,D]
    and [A,E,F,G,D] are node and link disjoint,\n   ignoring the ingress/egress nodes
    A and D.  A 1+1 protected path is\n   established from A to D over [A,B,C,D] and
    [A,E,F,G,D], and traffic\n   is transmitted simultaneously over both component
    paths (i.e., LSPs).\n   During the provisioning phase, both LSPs are fully instantiated
    (and\n   thus activated) so that no resource sharing can be done along the\n   protecting
    LSP (nor can any extra-traffic be transported).  It is\n   also RECOMMENDED to
    set the N bit since no protection-switching\n   signaling is assumed in this case.\n
    \  When a failure occurs (say, at node B) and is detected at end-node D,\n   the
    receiver at D selects the normal traffic from the other LSP.\n   From this perspective,
    1+1 unidirectional protection can be seen as\n   an uncoordinated protection-switching
    mechanism acting independently\n   at both endpoints.  Also, for the LSP under
    failure condition, it is\n   RECOMMENDED to not set the Path_State_Removed Flag
    of the ERROR_SPEC\n   object (see [RFC3473]) upon PathErr message generation.\n
    \  Note: it is necessary that both paths are SRLG disjoint to ensure\n   recoverability;
    otherwise, a single failure may impact both working\n   and protecting LSPs.\n"
  - contents:
    - "5.1.  Identifiers\n   To simplify association operations, both LSPs belong
      to the same\n   session.  Thus, the SESSION object MUST be the same for both
      LSPs.\n   The LSP ID, however, MUST be different to distinguish between the
      two\n   LSPs.\n   A new PROTECTION object (see Section 14) is included in the
      Path\n   message.  This object carries the desired end-to-end LSP Protection\n
      \  Type -- in this case, \"1+1 Unidirectional\".  This LSP Protection Type\n
      \  value is applicable to both uni- and bidirectional LSPs.\n   To allow distinguishing
      the working LSP (from which the signal is\n   taken) from the protecting LSP,
      the working LSP is signaled by\n   setting in the PROTECTION object the S bit
      to 0, the P bit to 0, and\n   in the ASSOCIATION object, the Association ID
      to the protecting\n   LSP_ID.  The protecting LSP is signaled by setting in
      the PROTECTION\n   object the S bit to 0, the P bit to 1, and in the ASSOCIATION
      object,\n   the Association ID to the associated protected LSP_ID.\n   After
      protection switching completes, and after reception of the\n   PathErr message,
      to keep track of the LSP from which the signal is\n   taken, the protecting
      LSP SHOULD be signaled with the O bit set.  The\n   formerly working LSP MAY
      be signaled with the A bit set in the\n   ADMIN_STATUS object (see [RFC3473]).
      \ This process assumes the tail-\n   end node has notified the head-end node
      that traffic selection\n   switchover has occurred.\n"
    title: 5.1.  Identifiers
  title: 5.  1+1 Unidirectional Protection
- contents:
  - "6.  1+1 Bidirectional Protection\n   1+1 bidirectional protection is a scheme
    that provides end-to-end\n   protection for bidirectional LSPs.\n   Consider the
    following network topology:\n                                  A---B---C---D\n
    \                                  \\         /\n                                    E---F---G\n
    \  The LSPs [A,B,C,D] and [A,E,F,G,D] are node and link disjoint,\n   ignoring
    the ingress/egress nodes A and D.  A bidirectional LSP is\n   established from
    A to D over each path, and traffic is transmitted\n   simultaneously over both
    LSPs.  In this scheme, both endpoints must\n   receive traffic over the same LSP.
    \ Note also that both LSPs are\n   fully instantiated (and thus activated) so
    that no resource sharing\n   can be done along the protection path (nor can any
    extra-traffic be\n   transported).\n   When a failure is detected by one or both
    endpoints of the LSP, both\n   endpoints must select traffic from the other LSP.
    \ This action must\n   be coordinated between node A and D.  From this perspective,
    1+1\n   bidirectional protection can be seen as a coordinated protection-\n   switching
    mechanism between both endpoints.\n   Note: it is necessary that both paths are
    SRLG disjoint to ensure\n   recoverability; otherwise, a single failure may impact
    both working\n   and protecting LSPs.\n"
  - contents:
    - "6.1.  Identifiers\n   To simplify association operations, both LSPs belong
      to the same\n   session.  Thus, the SESSION object MUST be the same for both
      LSPs.\n   The LSP ID, however, MUST be different to distinguish between the
      two\n   LSPs.\n   A new PROTECTION object (see Section 14) is included in the
      Path\n   message.  This object carries the desired end-to-end LSP Protection\n
      \  Type -- in this case, \"1+1 Bidirectional\".  This LSP Protection Type\n
      \  value is only applicable to bidirectional LSPs.\n   It is also desirable
      to allow distinguishing the working LSP (from\n   which the signal is taken)
      from the protecting LSP.  This is achieved\n   for the working LSP by setting
      in the PROTECTION object the S bit to\n   0, the P bit to 0, and in the ASSOCIATION
      object, the Association ID\n   to the protecting LSP_ID.  The protecting LSP
      is signaled by setting\n   in the PROTECTION object the S bit to 0, the P bit
      to 1, and in the\n   ASSOCIATION object the Association ID to the associated
      protected\n   LSP_ID.\n"
    title: 6.1.  Identifiers
  - contents:
    - "6.2.  End-to-End Switchover Request/Response\n   To coordinate the switchover
      between endpoints, an end-to-end\n   switchover request/response exchange is
      needed since a failure\n   affecting one of the LSPs results in both endpoints
      switching to the\n   other LSP (resulting in receiving traffic from the other
      LSP) in\n   their respective directions.\n   The procedure is as follows:\n
      \     1. If an end-node (A or D) detects the failure of the working LSP\n         (or
      a degradation of signal quality over the working LSP) or\n         receives
      a Notify message including its SESSION object within\n         the <upstream/downstream
      session list> (see [RFC3473]), and the\n         new error code/sub-code \"Notify
      Error/ LSP Locally Failed\" in\n         the (IF_ID)_ERROR_SPEC object, it MUST
      begin receiving on the\n         protecting LSP.  Note that the <sender descriptor>
      or <flow\n         descriptor> is also present in the Notify message that resolves\n
      \        any ambiguity and race condition since identifying (together\n         with
      the SESSION object) the LSP under failure condition.\n            Note: (IF_ID)_ERROR_SPEC
      indicates that either the\n            ERROR_SPEC (C-Type 1/2) or the ERROR_SPEC
      (C-Type 3/4,\n            defined in [RFC3473]) can be used.\n         This
      node MUST reliably send a Notify message, including the\n         MESSAGE_ID
      object, to the other end-node (D or A, respectively)\n         with the new
      error code/sub-code \"Notify Error/LSP Failure\"\n         (Switchover Request)
      indicating the failure of the working LSP.\n         This Notify message MUST
      be sent with the ACK_Desired flag set\n         in the MESSAGE_ID object to
      request the receiver to send an\n         acknowledgment for the message (see
      [RFC2961]).\n         This (switchover request) Notify message MAY indicate
      the\n         identity of the failed link or any other relevant information\n
      \        using the IF_ID ERROR_SPEC object (see [RFC3473]).  In this\n         case,
      the IF_ID ERROR_SPEC object replaces the ERROR_SPEC\n         object in the
      Notify message; otherwise, the corresponding\n         (data plane) information
      SHOULD be received in the\n         PathErr/ResvErr message.\n      2. Upon
      receipt of the (switchover request) Notify message, the\n         end-node (D
      or A, respectively) MUST begin receiving from the\n         protecting LSP.\n
      \        This node MUST reliably send a Notify message, including the\n         MESSAGE_ID
      object, to the other end-node (A or D,\n         respectively).  This (switchover
      response) Notify message MUST\n         also include a MESSAGE_ID_ACK object
      to acknowledge reception\n         of the (switchover request) Notify message.\n
      \        This (switchover response) Notify message MAY indicate the\n         identity
      of the failed link or any other relevant information\n         using the IF_ID
      ERROR_SPEC object (see [RFC3473]).\n         Note: upon receipt of the (switchover
      response) Notify message,\n         the end-node (A or D, respectively) MUST
      send an Ack message to\n         the other end-node to acknowledge its reception.\n
      \  Since the intermediate nodes (B, C, E, F, and G) are assumed to be\n   GMPLS
      RSVP-TE signaling capable, each node adjacent to the failure\n   MAY generate
      a Notify message directed either to the LSP head-end\n   (upstream direction),
      or the LSP tail-end (downstream direction), or\n   even both.  Therefore, it
      is expected that these LSP terminating\n   nodes (that MAY also detect the failure
      of the LSP from the data\n   plane) provide either the right correlation mechanism
      to avoid\n   repetition of the above procedure or just discard subsequent Notify\n
      \  messages corresponding to the same Session.  In addition, for the LSP\n   under
      failure condition, it is RECOMMENDED to not set the Path_State_\n   Removed
      Flag of the ERROR_SPEC object (see [RFC3473]) upon PathErr\n   message generation.\n
      \  After protection switching completes (step 2), and after reception of\n   the
      PathErr message, to keep track of the LSP from which the signal\n   is taken,
      the protecting LSP SHOULD be signaled with the O bit set.\n   The formerly working
      LSP MAY be signaled with the A bit set in the\n   ADMIN_STATUS object (see [RFC3473]).\n
      \  Note: when the N bit is set, the end-to-end switchover request/\n   response
      exchange described above only provides control plane\n   coordination (no actions
      are triggered at the data plane level).\n"
    title: 6.2.  End-to-End Switchover Request/Response
  title: 6.  1+1 Bidirectional Protection
- contents:
  - "7.  1:1 Protection with Extra-Traffic\n   The most common case of end-to-end
    1:N protection is to establish,\n   between the same endpoints, an end-to-end
    working LSP (thus, N = 1)\n   and a dedicated end-to-end protecting LSP that are
    mutually link/\n   node/SRLG disjoint.  This protects against working LSP failure(s).\n
    \  The protecting LSP is used for switchover when the working LSP fails.\n   GMPLS
    RSVP-TE signaling allows for the pre-provisioning of protecting\n   LSPs by indicating
    in the Path message (in the PROTECTION object; see\n   Section 14) that the LSPs
    are of type protecting.  Here, working and\n   protecting LSPs are signaled as
    primary LSPs; both are fully\n   instantiated during the provisioning phase.\n
    \  Although the resources for the protecting LSP are pre-allocated,\n   preemptable
    traffic may be carried end-to-end using this LSP.  Thus,\n   the protecting LSP
    is capable of carrying extra-traffic with the\n   caveat that this traffic will
    be preempted if the working LSP fails.\n   The setup of the working LSP SHOULD
    indicate that the LSP head-end\n   and tail-end node wish to receive Notify messages
    using the NOTIFY\n   REQUEST object.  The node upstream to the failure (upstream
    in terms\n   of the direction an Path message traverses) SHOULD send a Notify\n
    \  message to the LSP head-end node, and the node downstream to the\n   failure
    SHOULD send an Notify message to the LSP tail-end node.  Upon\n   receipt of the
    Notify messages, both the end-nodes MUST switch the\n   (normal) traffic from
    the working LSP to the pre-configured\n   protecting LSP (see Section 7.2).  Moreover,
    some coordination is\n   required if extra-traffic is carried over the end-to-end
    protecting\n   LSP.  Note that if the working and the protecting LSP are established\n
    \  between the same end-nodes, no further notification is required to\n   indicate
    that the working LSPs are no longer protected.\n   Consider the following topology:\n
    \                                 A---B---C---D\n                                   \\
    \        /\n                                    E---F---G\n   The working LSP
    [A,B,C,D] could be protected by the protecting LSP\n   [A,E,F,G,D].  Both LSPs
    are fully instantiated (resources are\n   allocated for both working and protecting
    LSPs) and no resource\n   sharing can be done along the protection path since
    the primary\n   protecting LSP can carry extra-traffic.\n   Note: it is necessary
    that both paths are SRLG disjoint to ensure\n   recoverability; otherwise, a single
    failure may impact both working\n   and protecting LSPs.\n"
  - contents:
    - "7.1.  Identifiers\n   To simplify association operations, both LSPs belong
      to the same\n   session.  Thus, the SESSION object MUST be the same for both
      LSPs.\n   The LSP ID, however, MUST be different to distinguish between the\n
      \  protected LSP carrying working traffic and the protecting LSP that\n   can
      carry extra-traffic.\n   A new PROTECTION object (see Section 14) is included
      in the Path\n   message used to set up the two LSPs.  This object carries the
      desired\n   end-to-end LSP Protection Type -- in this case, \"1:N Protection
      with\n   Extra-Traffic\".  This LSP Protection Type value is applicable to both\n
      \  uni- and bidirectional LSPs.\n   The working LSP is signaled by setting in
      the new PROTECTION object\n   the S bit to 0, the P bit to 0, and in the ASSOCIATION
      object, the\n   Association ID to the protecting LSP_ID.\n   The protecting
      LSP is signaled by setting in the new PROTECTION\n   object the S bit to 0,
      the P bit to 1, and in the ASSOCIATION object,\n   the Association ID to the
      associated protected LSP_ID.\n"
    title: 7.1.  Identifiers
  - contents:
    - "7.2.  End-to-End Switchover Request/Response\n   To coordinate the switchover
      between endpoints, an end-to-end\n   switchover request/response is needed such
      that the affected LSP is\n   moved to the protecting LSP.  Protection switching
      from the working\n   to the protecting LSP (implying preemption of extra-traffic
      carried\n   over the protecting LSP) must be initiated by one of the end-nodes
      (A\n   or D).\n   The procedure is as follows:\n      1. If an end-node (A or
      D) detects the failure of the working LSP\n         (or a degradation of signal
      quality over the working LSP) or\n         receives a Notify message including
      its SESSION object within\n         the <upstream/downstream session list> (see
      [RFC3473]), and the\n         new error code/sub-code \"Notify Error/LSP Locally
      Failed\" in\n         the (IF_ID)_ERROR_SPEC object, it disconnects the extra-traffic\n
      \        from the protecting LSP.  Note that the <sender descriptor> or\n         <flow
      descriptor> is also present in the Notify message that\n         resolves any
      ambiguity and race condition since identifying\n         (together with the
      SESSION object) the LSP under failure\n         condition.\n         This node
      MUST reliably send a Notify message, including the\n         MESSAGE_ID object,
      to the other end-node (D or A, respectively)\n         with the new error code/sub-code
      \"Notify Error/LSP Failure\"\n         (Switchover Request) indicating the failure
      of the working LSP.\n         This Notify message MUST be sent with the ACK_Desired
      flag set\n         in the MESSAGE_ID object to request the receiver to send
      an\n         acknowledgment for the message (see [RFC2961]).\n         This
      (switchover request) Notify message MAY indicate the\n         identity of the
      failed link or any other relevant information\n         using the IF_ID ERROR_SPEC
      object (see [RFC3473]).  In this\n         case, the IF_ID ERROR_SPEC object
      replaces the ERROR_SPEC\n         object in the Notify message; otherwise, the
      corresponding\n         (data plane) information SHOULD be received in the\n
      \        PathErr/ResvErr message.\n      2. Upon receipt of the (switchover
      request) Notify message, the\n         end-node (D or A, respectively) MUST
      disconnect the extra-\n         traffic from the protecting LSP and begin sending/receiving\n
      \        normal traffic out/from the protecting LSP.\n         This node MUST
      reliably send a Notify message, including the\n         MESSAGE_ID object, to
      the other end-node (A or D,\n         respectively).  This (switchover response)
      Notify message MUST\n         also include a MESSAGE_ID_ACK object to acknowledge
      reception\n         of the (switchover request) Notify message.\n         This
      (switchover response) Notify message MAY indicate the\n         identity of
      the failed link or any other relevant information\n         using the IF_ID
      ERROR_SPEC object (see [RFC3473]).\n         Note: since the Notify message
      generated by the other end-node\n         (A or D, respectively) is distinguishable
      from the one\n         generated by an intermediate node, there is no possibility
      of\n         connecting the extra-traffic to the working LSP due to the\n         receipt
      of a Notify message from an intermediate node.\n      3. Upon receipt of the
      (switchover response) Notify message, the\n         end-node (A or D, respectively)
      MUST begin receiving normal\n         traffic from or sending normal traffic
      out the protecting LSP.\n         This node MUST also send an Ack message to
      the other end-node\n         (D or A, respectively) to acknowledge the reception
      of the\n         (switchover response) Notify message.\n   Note 1: a 2-phase
      protection-switching signaling is used in the\n   present context; a 3-phase
      signaling (see [RFC4426]) that would imply\n   a notification message, a switchover
      request, and a switchover\n   response messages is not considered here.  Also,
      when the protecting\n   LSPs do not carry extra-traffic, protection-switching
      signaling (as\n   defined in Section 6.2) MAY be used instead of the procedure\n
      \  described in this section.\n   Note 2: when the N bit is set, the above end-to-end
      switchover\n   request/response exchange only provides control plane coordination\n
      \  (no actions are triggered at the data plane level).\n   After protection
      switching completes (step 3), and after reception of\n   the PathErr message,
      to keep track of the LSP from which the normal\n   traffic is taken, the protecting
      LSP SHOULD be signaled with the O\n   bit set.  In addition, the formerly working
      LSP MAY be signaled with\n   the A bit set in the ADMIN_STATUS object (see [RFC3473]).\n"
    title: 7.2.  End-to-End Switchover Request/Response
  - contents:
    - "7.3.  1:N (N > 1) Protection with Extra-Traffic\n   1:N (N > 1) protection
      with extra-traffic assumes that the fully\n   provisioned protecting LSP is
      resource-disjoint from the N working\n   LSPs.  This protecting LSP thereby
      allows for carrying extra-traffic.\n   Note that the N working LSPs and the
      protecting LSP are all between\n   the same pair of endpoints.  In addition,
      the N working LSPs\n   (considered as identical in terms of traffic parameters)
      MAY be\n   mutually resource-disjoint.  Coordination between end-nodes is\n
      \  required when switching from one of the working to the protecting\n   LSP.\n
      \  Each working LSP is signaled with both S bit and P bit set to 0.  The\n   LSP
      Protection Type is set to 0x04 (1:N Protection with Extra-\n   Traffic) during
      LSP setup.  Each Association ID points to the\n   protecting LSP ID.\n   The
      protecting LSP (carrying extra-traffic) is signaled with the S\n   bit set to
      0 and the P bit set to 1.  The LSP Protection Type is set\n   to 0x04 (1:N Protection
      with Extra-Traffic) during LSP setup.  The\n   Association ID MUST be set by
      default to the LSP ID of the protected\n   LSP corresponding to N = 1.\n   Any
      signaling procedure applicable to 1:1 protection with extra-\n   traffic equally
      applies to 1:N protection with extra-traffic.\n"
    title: 7.3.  1:N (N > 1) Protection with Extra-Traffic
  title: 7.  1:1 Protection with Extra-Traffic
- contents:
  - "8.  Rerouting without Extra-Traffic\n   End-to-end (pre-planned) rerouting without
    extra-traffic relies on\n   the establishment between the same pair of end-nodes
    of a working LSP\n   and a protecting LSP that is link/node/SRLG disjoint from
    the working\n   LSP.  However, in this case the protecting LSP is not fully\n
    \  instantiated; thus, it cannot carry any extra-traffic (note that this\n   does
    not mean that the corresponding resources cannot be used by\n   other LSPs).  Therefore,
    this mechanism protects against working LSP\n   failure(s) but requires activation
    of the protecting LSP after\n   failure occurrence.\n   Signaling is performed
    by indicating in the Path message (in the\n   PROTECTION object; see Section 14)
    that the LSPs are of type working\n   and protecting, respectively.  Protecting
    LSPs are used for fast\n   switchover when working LSPs fail.  In this case, working
    and\n   protecting LSPs are signaled as primary LSP and secondary LSP,\n   respectively.
    \ Thus, only the working LSP is fully instantiated\n   during the provisioning
    phase, and for the protecting LSPs, no\n   resources are committed at the data
    plane level (they are pre-\n   reserved at the control plane level only).  The
    setup of the working\n   LSP SHOULD indicate (using the NOTIFY REQUEST object
    as specified in\n   Section 4 of [RFC3473]) that the LSP head-end node (and possibly
    the\n   tail-end node) wish to receive a Notify message upon LSP failure\n   occurrence.
    \ Upon receipt of the Notify message, the head-end node\n   MUST switch the (normal)
    traffic from the working LSP to the\n   protecting LSP after its activation.  Note
    that since the working and\n   the protecting LSPs are established between the
    same end-nodes, no\n   further notification is required to indicate that the working
    LSPs\n   are without protection.\n   To make bandwidth pre-reserved for a protecting
    (but not activated)\n   LSP available for extra-traffic, this bandwidth could
    be included in\n   the advertised Unreserved Bandwidth at priority lower (means\n
    \  numerically higher) than the Holding Priority of the protecting LSP.\n   In
    addition, the Max LSP Bandwidth field in the Interface Switching\n   Capability
    Descriptor sub-TLV should reflect the fact that the\n   bandwidth pre-reserved
    for the protecting LSP is available for extra\n   traffic.  LSPs for extra-traffic
    then can be established using the\n   bandwidth pre-reserved for the protecting
    LSP by setting (in the Path\n   message) the Setup Priority field of the SESSION_ATTRIBUTE
    object to\n   X (where X is the Setup Priority of the protecting LSP), and the\n
    \  Holding Priority field to at least X+1.  Also, if the resources pre-\n   reserved
    for the protecting LSP are used by lower-priority LSPs,\n   these LSPs MUST be
    preempted when the protecting LSP is activated\n   (see Section 10).\n   Consider
    the following topology:\n                                  A---B---C---D\n                                   \\
    \        /\n                                    E---F---G\n   The working LSP
    [A,B,C,D] could be protected by the protecting LSP\n   [A,E,F,G,D].  Only the
    protected LSP is fully instantiated (resources\n   are only allocated for the
    working LSP).  Therefore, the protecting\n   LSP cannot carry any extra-traffic.
    \ When a failure is detected on\n   the working LSP (say, at B), the error is
    propagated and/or notified\n   (using a Notify message with the new error code/sub-code
    \"Notify\n   Error/LSP Locally Failed\" in the (IF_ID)_ERROR_SPEC object) to the\n
    \  ingress node (A).  Upon reception, the latter activates the secondary\n   protecting
    LSP instantiated during the (pre-)provisioning phase.\n   This requires:\n   (1)
    \ the ability to identify a \"secondary protecting LSP\" (hereby\n        called
    the \"secondary LSP\") used to recover another primary\n        working LSP (hereby
    called the \"protected LSP\")\n   (2)  the ability to associate the secondary
    LSP with the protected\n        LSP\n   (3)  the capability to activate a secondary
    LSP after failure\n        occurrence.\n   In the following subsections, these
    features are described in more\n   detail.\n"
  - contents:
    - "8.1.  Identifiers\n   To simplify association operations, both LSPs (i.e.,
      the protected\n   and the secondary LSPs) belong to the same session.  Thus,
      the\n   SESSION object MUST be the same for both LSPs.  The LSP ID, however,\n
      \  MUST be different to distinguish between the protected LSP carrying\n   working
      traffic and the secondary LSP that cannot carry extra-\n   traffic.\n   A new
      PROTECTION object (see Section 14) is used to set up the two\n   LSPs.  This
      object carries the desired end-to-end LSP Protection Type\n   (in this case,
      \"Rerouting without Extra-Traffic\").  This LSP\n   Protection Type value is
      applicable to both uni- and bidirectional\n   LSPs.\n"
    title: 8.1.  Identifiers
  - contents:
    - "8.2.  Signaling Primary LSPs\n   The new PROTECTION object is included in the
      Path message during\n   signaling of the primary working LSP, with the end-to-end
      LSP\n   Protection Type value set to \"Rerouting without Extra-Traffic\".\n
      \  Primary working LSPs are signaled by setting in the new PROTECTION\n   object
      the S bit to 0, the P bit to 0, and in the ASSOCIATION object,\n   the Association
      ID to the associated secondary protecting LSP_ID.\n"
    title: 8.2.  Signaling Primary LSPs
  - contents:
    - "8.3.  Signaling Secondary LSPs\n   The new PROTECTION object is included in
      the Path message during\n   signaling of secondary protecting LSPs, with the
      end-to-end LSP\n   Protection Type value set to \"Rerouting without Extra-Traffic\".\n
      \  Secondary protecting LSPs are signaled by setting in the new\n   PROTECTION
      object the S bit and the P bit to 1, and in the\n   ASSOCIATION object, the
      Association ID to the associated primary\n   working LSP_ID, which MUST be known
      before signaling of the secondary\n   LSP.\n   With this setting, the resources
      for the secondary LSP SHOULD be\n   pre-reserved, but not committed at the data
      plane level, meaning that\n   the internals of the switch need not be established
      until explicit\n   action is taken to activate this secondary LSP.  Activation
      of a\n   secondary LSP is done using a modified Path message with the S bit\n
      \  set to 0 in the PROTECTION object.  At this point, the link and node\n   resources
      must be allocated for this LSP that becomes a primary LSP\n   (ready to carry
      normal traffic).\n   From [RFC3945], the secondary LSP is set up with resource
      pre-\n   reservation but with or without label pre-selection (both allowing\n
      \  sharing of the recovery resources).  In the former case (defined as\n   the
      default), label allocation during secondary LSP signaling does\n   not require
      any specific procedure compared to [RFC3473].  However,\n   in the latter case,
      label (and thus resource) re-allocation MAY occur\n   during the secondary LSP
      activation.  This means that during the LSP\n   activation phase, labels MAY
      be reassigned (with higher precedence\n   over existing label assignment; see
      also [RFC3471]).\n   Note: under certain circumstances (e.g., when pre-reserved
      protecting\n   resources are used by lower-priority LSPs), it MAY be desirable
      to\n   perform the activation of the secondary LSP in the upstream direction\n
      \  (Resv trigger message) instead of using the default downstream\n   activation.
      \ In this case, any mis-ordering and any mis-\n   interpretation between a refresh
      Resv (along the lower-priority LSP)\n   and a trigger Resv message (along the
      secondary LSP) MUST be avoided\n   at any intermediate node.  For this purpose,
      upon reception of the\n   Path message, the egress node MAY include the PROTECTION
      object in\n   the Resv message.  The latter is then processed on a hop-by-hop
      basis\n   to activate the secondary LSP until reaching the ingress node.  The\n
      \  PROTECTION object included in the Path message MUST be set as\n   specified
      in this section.  In this case, the PROTECTION object with\n   the S bit MUST
      be set to 0 and included in the Resv message sent in\n   the upstream direction.
      \ The upstream activation behavior SHOULD be\n   configurable on a local basis.
      \ Details concerning lower-priority LSP\n   preemption upon secondary LSP activation
      are provided in Section 10.\n"
    title: 8.3.  Signaling Secondary LSPs
  title: 8.  Rerouting without Extra-Traffic
- contents:
  - "9. Shared-Mesh Restoration\n   An approach to reduce recovery resource requirements
    is to have\n   protection LSPs sharing network resources when the working LSPs
    that\n   they protect are physically (i.e., link, node, SRLG, etc.) disjoint.\n
    \  This mechanism is referred to as shared mesh restoration and is\n   described
    in [RFC4426].  Shared-mesh restoration can be seen as a\n   particular case of
    pre-planned LSP rerouting (see Section 8) that\n   reduces the recovery resource
    requirements by allowing multiple\n   protecting LSPs to share common link and
    node resources.  Here also,\n   the recovery resources for the protecting LSPs
    are pre-reserved\n   during the provisioning phase, thus an explicit signaling
    action is\n   required to activate (i.e., commit resource allocation at the data\n
    \  plane) a specific protecting LSP instantiated during the (pre-)\n   provisioning
    phase.  This requires restoration signaling along the\n   protecting LSP.\n   To
    make bandwidth pre-reserved for a protecting (but not activated)\n   LSP, available
    for extra-traffic this bandwidth could be included in\n   the advertised Unreserved
    Bandwidth at priority lower (means\n   numerically higher) than the Holding Priority
    of the protecting LSP.\n   In addition, the Max LSP Bandwidth field in the Interface
    Switching\n   Capability Descriptor sub-TLV should reflect the fact that the\n
    \  bandwidth pre-reserved for the protecting LSP is available for extra\n   traffic.
    \ LSPs for extra-traffic then can be established using the\n   bandwidth pre-reserved
    for the protecting LSP by setting (in the Path\n   message) the Setup Priority
    field of the SESSION_ATTRIBUTE object to\n   X (where X is the Setup Priority
    of the protecting LSP) and the\n   Holding Priority field to at least X+1.  Also,
    if the resources pre-\n   reserved for the protecting LSP are used by lower priority
    LSPs,\n   these LSPs MUST be preempted when the protecting LSP is activated\n
    \  (see Section 10).  Further, if the recovery resources are shared\n   between
    multiple protecting LSPs, the corresponding working LSPs\n   head-end nodes must
    be informed that they are no longer protected\n   when the protecting LSP is activated
    to recover the normal traffic\n   for the working LSP under failure.\n   Consider
    the following topology:\n                                  A---B---C---D\n                                   \\
    \        /\n                                    E---F---G\n                                   /
    \        \\\n                                  H---I---J---K\n   The working LSPs
    [A,B,C,D] and [H,I,J,K] could be protected by\n   [A,E,F,G,D] and [H,E,F,G,K],
    respectively.  Per [RFC3209], in order\n   to achieve resource sharing during
    the signaling of these protecting\n   LSPs, they must have the same Tunnel Endpoint
    Address (as part of\n   their SESSION object).  However, these addresses are not
    the same in\n   this example.  Resource sharing along E, F, and G can only be\n
    \  achieved if the nodes E, F, and G recognize that the LSP Protection\n   Type
    of the secondary LSP is set to \"Rerouting without Extra-Traffic\"\n   (see PROTECTION
    object, Section 14) and acts accordingly.  In this\n   case, the protecting LSPs
    are not merged (which is useful since the\n   paths diverge at G), but the resources
    along E, F, G can be shared.\n   When a failure is detected on one of the working
    LSPs (say, at B),\n   the error is propagated and/or notified (using a Notify
    message with\n   the new error code/sub-code \"Notify Error/LSP Locally Failed\"
    in the\n   (IF_ID)_ERROR_SPEC object) to the ingress node (A).  Upon reception,\n
    \  the latter activates the secondary protecting LSP (see Section 8).\n   At this
    point, it is important that a failure on the other LSP (say,\n   at J) does not
    cause the other ingress (H) to send the data down the\n   protecting LSP since
    the resources are already in use.  This can be\n   achieved by node E using the
    following procedure.  When the capacity\n   is first reserved for the protecting
    LSP, E should verify that the\n   LSPs being protected ([A,B,C,D] and [H,I,J,K],
    respectively) do not\n   share any common resources.  Then, when a failure occurs
    (say, at B)\n   and the protecting LSP [A,E,F,G,D] is activated, E should notify
    H\n   that the resources for the protecting LSP [H,E,F,G,K] are no longer\n   available.\n
    \  The following subsections detail how shared mesh restoration can be\n   implemented
    in an interoperable fashion using GMPLS RSVP-TE\n   extensions (see [RFC3473]).
    \ This includes:\n   (1)  the ability to identify a \"secondary protecting LSP\"
    (hereby\n        called the \"secondary LSP\") used to recover another primary\n
    \       working LSP (hereby called the \"protected LSP\")\n   (2)  the ability
    to associate the secondary LSP with the protected\n        LSP\n   (3)  the capability
    to include information about the resources used\n        by the protected LSP
    while instantiating the secondary LSP.\n   (4)  the capability to instantiate
    during the provisioning phase\n        several secondary LSPs in an efficient
    manner.\n   (5)  the capability to activate a secondary LSP after failure\n        occurrence.\n
    \  In the following subsections, these features are described in detail.\n"
  - contents:
    - "9.1.  Identifiers\n   To simplify association operations, both LSPs (i.e.,
      the protected\n   and the secondary LSPs) belong to the same session.  Thus,
      the\n   SESSION object MUST be the same for both LSPs.  The LSP ID, however,\n
      \  MUST be different to distinguish between the protected LSP carrying\n   working
      traffic and the secondary LSP that cannot carry extra-\n   traffic.\n   A new
      PROTECTION object (see Section 14) is used to set up the two\n   LSPs.  This
      object carries the desired end-to-end LSP Protection Type\n   -- in this case,
      \"Rerouting without Extra-Traffic\".  This LSP\n   Protection Type value is
      applicable to both uni- and bidirectional\n   LSPs.\n"
    title: 9.1.  Identifiers
  - contents:
    - "9.2.  Signaling Primary LSPs\n   The new PROTECTION object is included in the
      Path message during\n   signaling of the primary working LSPs, with the end-to-end
      LSP\n   Protection Type value set to \"Rerouting without Extra-Traffic\".\n
      \  Primary working LSPs are signaled by setting in the new PROTECTION\n   object
      the S bit to 0, the P bit to 0, and in the ASSOCIATION object,\n   the Association
      ID to the associated secondary protecting LSP_ID.\n"
    title: 9.2.  Signaling Primary LSPs
  - contents:
    - "9.3.  Signaling Secondary LSPs\n   The new PROTECTION object is included in
      the Path message during\n   signaling of the secondary protecting LSPs, with
      the end-to-end LSP\n   Protection Type value set to \"Rerouting without Extra-Traffic\".\n
      \  Secondary protecting LSPs are signaled by setting in the new\n   PROTECTION
      object the S bit and the P bit to 1, and in the\n   ASSOCIATION object, the
      Association ID to the associated primary\n   working LSP_ID, which MUST be known
      before signaling of the secondary\n   LSP.  Moreover, the Path message used
      to instantiate the secondary\n   LSP SHOULD include at least one PRIMARY_PATH_ROUTE
      object (see\n   Section 15) that further allows for recovery resource sharing
      at each\n   intermediate node along the secondary path.\n   With this setting,
      the resources for the secondary LSP SHOULD be\n   pre-reserved, but not committed
      at the data plane level, meaning that\n   the internals of the switch need not
      be established until explicit\n   action is taken to activate this LSP.  Activation
      of a secondary LSP\n   is done using a modified Path message with the S bit
      set to 0 in the\n   PROTECTION object.  At this point, the link and node resources
      must\n   be allocated for this LSP that becomes a primary LSP (ready to carry\n
      \  normal traffic).\n   From [RFC3945], the secondary LSP is set up with resource
      pre-\n   reservation but with or without label pre-selection (both allowing\n
      \  sharing of the recovery resources).  In the former case (defined as\n   the
      default), label allocation during secondary LSP signaling does\n   not require
      any specific procedure compared to [RFC3473].  However,\n   in the latter case,
      label (and thus resource) re-allocation MAY occur\n   during the secondary LSP
      activation.  This means that, during the LSP\n   activation phase, labels MAY
      be reassigned (with higher precedence\n   over existing label assignment; see
      also [RFC3471]).\n"
    title: 9.3.  Signaling Secondary LSPs
  title: 9. Shared-Mesh Restoration
- contents:
  - "10.  LSP Preemption\n   When protecting resources are only pre-reserved for the
    secondary\n   LSPs, they MAY be used to set up lower-priority LSPs.  In this case,\n
    \  these resources MUST be preempted when the protecting LSP is\n   activated.
    \ An additional condition raises from misconnection\n   avoidance between the
    secondary protecting LSP being activated and\n   the low-priority LSP(s) being
    preempted.  Procedure to be applied\n   when the secondary protecting LSP (i.e.,
    the preempting LSP) Path\n   message reaches a node using the resources for lower-priority
    LSP(s)\n   (i.e., preempted LSP(s)) is as follows:\n   1. De-allocate resources
    to be used by the preempting LSP and release\n      the cross-connection.  Note
    that if the preempting LSP is\n      bidirectional, these resources may come from
    one or two lower-\n      priority LSPs, and if from two LSPs, they may be uni-
    or bi-\n      directional.  The preempting node SHOULD NOT send the Path message\n
    \     before the de-allocation of resources has completed since this may\n      lead
    to the downstream path becoming misconnected if the\n      downstream node is
    able to reassign the resources more quickly.\n   2. Send PathTear and PathErr
    messages with the new error code/sub-\n      code \"Policy Control failure/Hard
    preempted\" and the\n      Path_State_Removed flag set for the preempted LSP(s).\n
    \  3. Reserve the preempted resources for the protecting LSP.  The\n      preempting
    node MUST NOT cross-connect the upstream resources of a\n      bidirectional preempting
    LSP.\n   4. Send the Path message.\n   5. Upon reception of a trigger Resv message
    from the downstream node,\n      cross-connect the downstream path resources,
    and if the preempting\n      LSP is bidirectional, perform cross-connection for
    the upstream\n      path resources.\n   Note that step 1 may cause alarms to be
    raised for the preempted LSP.\n   If alarm suppression is desired, the preempting
    node MAY insert the\n   following steps before step 1.\n   1a. Before de-allocating
    resources, send a Resv message, including an\n       ADMIN_STATUS object, to disable
    alarms for the preempted LSP.\n   1b. Receive a Path message indicating that alarms
    are disabled.\n   At the downstream node (with respect to the preempting LSP),
    the\n   processing is RECOMMENDED to be as follows:\n   1.  Receive PathTear (and/or
    PathErr) message for the preempted\n       LSP(s).\n   2a. Release the resources
    associated with the LSP on the interface to\n       the preempting LSP, remove
    any cross-connection, and release all\n       other resources associated with
    the preempted LSP.\n   2b. Forward the PathTear (and/or PathErr) message per [RFC3473].\n
    \  3.  Receive the Path message for the preempting LSP and process as\n       normal,
    forwarding it to the downstream node.\n   4.  Receive the Resv message for the
    preempting LSP and process as\n       normal, forwarding it to the upstream node.\n"
  title: 10.  LSP Preemption
- contents:
  - "11.  (Full) LSP Rerouting\n   LSP rerouting, on the other hand, switches normal
    traffic to an\n   alternate LSP that is fully established only after failure\n
    \  occurrence.  The new (alternate) route is selected at the LSP head-\n   end
    and may reuse intermediate nodes included in the original route;\n   it may also
    include additional intermediate nodes.  For strict-hop\n   routing, TE requirements
    can be directly applied to the route\n   computation, and the failed node or link
    can be avoided.  However, if\n   the failure occurred within a loose-routed hop,
    the head-end node may\n   not have enough information to reroute the LSP around
    the failure.\n   Crankback signaling (see [CRANK]) and route exclusion techniques
    (see\n   [RFC4874]) MAY be used in this case.\n   The alternate route MAY be either
    computed on demand (that is, when\n   the failure occurs; this is referred to
    as full LSP rerouting) or\n   pre-computed and stored for use when the failure
    is reported.  The\n   latter offers faster restoration time.  There is, however,
    a risk\n   that the alternate route will become out of date through other\n   changes
    in the network; this can be mitigated to some extent by\n   periodic recalculation
    of idle alternate routes.\n   (Full) LSP rerouting will be initiated by the head-end
    node that has\n   either detected the LSP failure or received a Notify message
    and/or a\n   PathErr message with the new error code/sub-code \"Notify Error/LSP\n
    \  Locally Failed\" for this LSP.  The new LSP resources can be\n   established
    using the make-before-break mechanism, where the new LSP\n   is set up before
    the old LSP is torn down.  This is done by using the\n   mechanisms of the SESSION_ATTRIBUTE
    object and the Shared-Explicit\n   (SE) reservation style (see [RFC3209]).  Both
    the new and old LSPs\n   can share resources at common nodes.\n   Note that the
    make-before-break mechanism is not used to avoid\n   disruption to the normal
    traffic flow (the latter has already been\n   broken by the failure that is being
    repaired).  However, it is\n   valuable to retain the resources allocated on the
    original LSP that\n   will be reused by the new alternate LSP.\n"
  - contents:
    - "11.1.  Identifiers\n   The Tunnel Endpoint Address, Tunnel ID, Extended Tunnel
      ID, and\n   Tunnel Sender Address uniquely identify both the old and new LSPs.\n
      \  Only the LSP_ID value differentiates the old from the new alternate\n   LSP.
      \ The new alternate LSP is set up before the old LSP is torn down\n   using
      Shared-Explicit (SE) reservation style.  This ensures that the\n   new (alternate)
      LSP is established without double-counting resource\n   requirements along common
      segments.\n   The alternate LSP MAY be set up before any failure occurrence
      with\n   SE-style resource reservation, the latter shares the same Tunnel End\n
      \  Point Address, Tunnel ID, Extended Tunnel ID, and Tunnel Sender\n   Address
      with the original LSP (i.e., only the LSP ID value MUST be\n   different).\n
      \  In both cases, the Association ID of the ASSOCIATION object MUST be\n   set
      to the LSP ID value of the signaled LSP.\n"
    title: 11.1.  Identifiers
  - contents:
    - "11.2.  Signaling Reroutable LSPs\n   A new PROTECTION object is included in
      the Path message during\n   signaling of dynamically reroutable LSPs, with the
      end-to-end LSP\n   Protection Type value set to \"Full Rerouting\".  These LSPs
      that can\n   be either uni- or bidirectional are signaled by setting in the\n
      \  PROTECTION object the S bit to 0, the P bit to 0, and the Association\n   ID
      value to the LSP_ID value of the signaled LSP.  Any specific\n   action to be
      taken during the provisioning phase is up to the end-\n   node local policy.\n
      \  Note: when the end-to-end LSP Protection Type is set to\n   \"Unprotected\",
      both S and P bit MUST be set to 0, and the LSP SHOULD\n   NOT be rerouted at
      the head-end node after failure occurrence.  The\n   Association_ID value MUST
      be set to the LSP_ID value of the signaled\n   LSP.  This does not mean that
      the Unprotected LSP cannot be re-\n   established for other reasons such as
      path re-optimization and\n   bandwidth adjustment driven by policy conditions.\n"
    title: 11.2.  Signaling Reroutable LSPs
  title: 11.  (Full) LSP Rerouting
- contents:
  - "12.  Reversion\n   Reversion refers to a recovery switching operation, where
    the normal\n   traffic returns to (or remains on) the working LSP when it has\n
    \  recovered from the failure.  Reversion implies that resources remain\n   allocated
    to the LSP that was originally routed over them even after\n   a failure.  It
    is important to have mechanisms that allow reversion\n   to be performed with
    minimal service disruption and reconfiguration.\n   For \"1+1 bidirectional Protection\",
    reversion to the recovered LSP\n   occurs by using the following sequence:\n   1.
    Clear the A bit of the ADMIN_STATUS object if set for the\n      recovered LSP.\n
    \  2. Then, apply the method described below to switch normal traffic\n      back
    from the protecting to the recovered LSP.  This is performed\n      by using the
    new error code/sub-code \"Notify Error/LSP Recovered\"\n      (Switchback Request).\n
    \     The procedure is as follows:\n      1) The initiating (source) node sends
    the normal traffic onto both\n         the working and the protecting LSPs.  Once
    completed, the\n         source node sends reliably a Notify message to the destination\n
    \        with the new error code/sub-code \"Notify Error/LSP Recovered\"\n         (Switchback
    Request).  This Notify message includes the\n         MESSAGE_ID object.  The
    ACK_Desired flag MUST be set in this\n         object to request the receiver
    to send an acknowledgment for\n         the message (see [RFC2961]).\n      2)
    Upon receipt of this message, the destination selects the\n         traffic from
    the working LSP.  At the same time, it transmits\n         the traffic onto both
    the working and protecting LSP.\n         The destination then sends reliably
    a Notify message to the\n         source confirming the completion of the operation.
    \ This\n         message includes the MESSAGE_ID_ACK object to acknowledge\n         reception
    of the received Notify message.  This Notify message\n         also includes the
    MESSAGE_ID object.  The ACK_Desired flag MUST\n         be set in this object
    to request the receiver to send an\n         acknowledgment for the message (see
    [RFC2961]).\n      3) When the source node receives this Notify message, it switches\n
    \        to receive traffic from the working LSP.\n         The source node then
    sends an Ack message to the destination\n         node confirming that the LSP
    has been reverted.\n   3. Finally, clear the O bit of the PROTECTION object sent
    over the\n      protecting LSP.\n   For \"1:N Protection with Extra-traffic\",
    reversion to the recovered\n   LSP occurs by using the following sequence:\n   1.
    Clear the A bit of the ADMIN_STATUS object if set for the\n      recovered LSP.\n
    \  2. Then, apply the method described below to switch normal traffic\n      back
    from the protecting to the recovered LSP.  This is performed\n      by using the
    new error code/sub-code \"Notify Error/LSP Recovered\"\n      (Switchback Request).\n
    \     The procedure is as follows:\n      1) The initiating (source) node sends
    the normal traffic onto both\n         the working and the protecting LSPs.  Once
    completed, the\n         source node sends reliably a Notify message to the destination\n
    \        with the new error code/sub-code \"Notify Error/LSP Recovered\"\n         (Switchback
    Request).  This Notify message includes the\n         MESSAGE_ID object.  The
    ACK_Desired flag MUST be set in this\n         object to request the receiver
    to send an acknowledgment for\n         the message (see [RFC2961]).\n      2)
    Upon receipt of this message, the destination selects the\n         traffic from
    the working LSP.  At the same time, it transmits\n         the traffic onto both
    the working and protecting LSP.\n         The destination then sends reliably
    a Notify message to the\n         source confirming the completion of the operation.
    \ This\n         message includes the MESSAGE_ID_ACK object to acknowledge\n         reception
    of the received Notify message.  This Notify message\n         also includes the
    MESSAGE_ID object.  The ACK_Desired flag MUST\n         be set in this object
    to request the receiver to send an\n         acknowledgment for the message (see
    [RFC2961]).\n      3) When the source node receives this Notify message, it switches\n
    \        to receive traffic from the working LSP, and stops transmitting\n         traffic
    on the protecting LSP.\n         The source node then sends an Ack message to
    the destination\n         node confirming that the LSP has been reverted.\n      4)
    Upon receipt of this message, the destination node stops\n         transmitting
    traffic along the protecting LSP.\n   3. Finally, clear the O bit of the PROTECTION
    object sent over the\n      protecting LSP.\n   For \"Rerouting without Extra-traffic\"
    (including the shared recovery\n   case), reversion implies that the formerly
    working LSP has not been\n   torn down by the head-end node upon PathErr message
    reception, i.e.,\n   the head-end node kept refreshing the working LSP under failure\n
    \  condition.  This ensures that the exact same resources are retrieved\n   after
    reversion switching (except if the working LSP required re-\n   signaling).  Re-activation
    is performed using the following sequence:\n   1. Clear the A bit of the ADMIN_STATUS
    object if set for the\n      recovered LSP.\n   2. Then, apply the method described
    below to switch normal traffic\n      back from the protecting to the recovered
    LSP.  This is performed\n      by using the new error code/sub-code \"Notify Error/LSP
    Recovered\"\n      (Switchback Request).\n      The procedure is as follows:\n
    \     1) The initiating (source) node sends the normal traffic onto both\n         the
    working and the protecting LSPs.  Once completed, the\n         source node sends
    reliably a Notify message to the destination\n         with the new error code/sub-code
    \"Notify Error/LSP Recovered\"\n         (Switchback Request).  This Notify message
    includes the\n         MESSAGE_ID object.  The ACK_Desired flag MUST be set in
    this\n         object to request the receiver to send an acknowledgment for\n
    \        the message (see [RFC2961]).\n      2) Upon receipt of this message,
    the destination selects the\n         traffic from the working LSP.  At the same
    time, it transmits\n         the traffic onto both the working and protecting
    LSP.\n         The destination then sends reliably a Notify message to the\n         source
    confirming the completion of the operation.  This\n         message includes the
    MESSAGE_ID_ACK object to acknowledge\n         reception of the received Notify
    message.  This Notify message\n         also includes the MESSAGE_ID object.  The
    ACK_Desired flag MUST\n         be set in this object to request the receiver
    to send an\n         acknowledgment for the message (see [RFC2961]).\n      3)
    When the source node receives this Notify message, it switches\n         to receive
    traffic from the working LSP, and stops transmitting\n         traffic on the
    protecting LSP.\n         The source node then sends an Ack message to the destination\n
    \        node confirming that the LSP has been reverted.\n      4) Upon receipt
    of this message, the destination node stops\n         transmitting traffic along
    the protecting LSP.\n   3. Finally, de-activate the protecting LSP by setting
    the S bit to 1\n      in the PROTECTION object sent over the protecting LSP.\n"
  title: 12.  Reversion
- contents:
  - "13.  Recovery Commands\n   This section specifies the control plane behavior
    when using several\n   commands (see [RFC4427]) that can be used to influence
    the recovery\n   operations.\n   A. Lockout of recovery LSP:\n   The Lockout (L)
    bit of the ADMIN_STATUS object is used following the\n   rules defined in Section
    8 of [RFC3471] and Section 7 of [RFC3473].\n   The L bit must be set together
    with the Reflect (R) bit in the\n   ADMIN_STATUS object sent in the Path message.
    \ Upon reception of the\n   Resv message with the L bit set, this forces the recovery
    LSP to be\n   temporarily unavailable to transport traffic (either normal or\n
    \  extra-traffic).  Unlock is performed by clearing the L bit, following\n   the
    rules defined in Section 7 of [RFC3473].  This procedure is only\n   applicable
    when the LSP Protection Type Flag is set to either 0x04\n   (1:N Protection with
    Extra-Traffic), or 0x08 (1+1 Unidirectional\n   Protection), or 0x10 (1+1 Bidirectional
    Protection).\n   The updated format of the ADMIN_STATUS object to include the
    L bit is\n   as follows:\n     0                   1                   2                   3\n
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \   |            Length             | Class-Num(196)|   C-Type (1)  |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \   |R|                        Reserved                 |L|I|C|T|A|D|\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  Lockout (L): 1 bit\n        When set, forces the recovery LSP to be temporarily
    unavailable\n        to transport traffic (either normal or extra traffic).\n
    \  The R (Reflect), T (Testing), A (Administratively down), and D\n   (Deletion
    in progress) bits are defined in [RFC3471].  The C (Call\n   control) bit is defined
    in [GMPLS-CALL], and the I (Inhibit alarm\n   communication) bit in [RFC4783].\n
    \  B. Lockout of normal traffic:\n   The O bit of the PROTECTION object is set
    to 1 to force the recovery\n   LSP to be temporarily unavailable to transport
    normal traffic.  This\n   operation MUST NOT occur unless the working LSP is carrying
    the\n   normal traffic.  Unlock is performed by clearing the O bit over the\n
    \  protecting LSP.  This procedure is only applicable when the LSP\n   Protection
    Type Flag is set to either 0x04 (1:N Protection with\n   Extra-Traffic), or 0x08
    (1+1 Unidirectional Protection), or 0x10 (1+1\n   Bidirectional Protection).\n
    \  C. Forced switch for normal traffic:\n   Recovery signaling is initiated that
    switches normal traffic to the\n   recovery LSP following the procedures defined
    in Section 6, 7, 8, and\n   9.\n   D. Requested switch for normal traffic:\n   Recovery
    signaling is initiated that switches normal traffic to the\n   recovery LSP following
    the procedures defined in Section 6, 7, 8, and\n   9.  This happens unless a fault
    condition exists on other LSPs or\n   spans (including the recovery LSP), or a
    switch command of equal or\n   higher priority is in effect.\n   E. Requested
    switch for recovery LSP:\n   Recovery signaling is initiated that switches normal
    traffic to the\n   working LSP following the procedure defined in Section 12.
    \ This\n   request is executed except if a fault condition exists on the working\n
    \  LSP or an equal or higher priority switch command is in effect.\n"
  title: 13.  Recovery Commands
- contents:
  - "14.  PROTECTION Object\n   This section describes the extensions to the PROTECTION
    object to\n   broaden its applicability to end-to-end LSP recovery.\n"
  - contents:
    - "14.1.  Format\n   The format of the PROTECTION Object (Class-Num = 37, C-Type
      = 2) is\n   as follows:\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |            Length             | Class-Num(37) | C-Type (2)    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |S|P|N|O| Reserved  | LSP Flags |     Reserved      | Link Flags|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                           Reserved                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     Secondary (S): 1 bit\n         When set to 1, this bit indicates that
      the requested LSP is a\n         secondary LSP.  When set to 0 (default), it
      indicates that the\n         requested LSP is a primary LSP.\n      Protecting
      (P): 1 bit\n         When set to 1, this bit indicates that the requested LSP
      is a\n         protecting LSP.  When set to 0 (default), it indicates that the\n
      \        requested LSP is a working LSP.  The combination, S set to 1\n         with
      P set to 0 is not valid.\n      Notification (N): 1 bit\n         When set to
      1, this bit indicates that the control plane\n         message exchange is only
      used for notification during\n         protection switching.  When set to 0
      (default), it indicates\n         that the control plane message exchanges are
      used for\n         protection-switching purposes.  The N bit is only applicable\n
      \        when the LSP Protection Type Flag is set to either 0x04 (1:N\n         Protection
      with Extra-Traffic), or 0x08 (1+1 Unidirectional\n         Protection), or 0x10
      (1+1 Bidirectional Protection).  The N bit\n         MUST be set to 0 in any
      other case.\n      Operational (O): 1 bit\n         When set to 1, this bit
      indicates that the protecting LSP is\n         carrying the normal traffic after
      protection switching.  The O\n         bit is only applicable when the P bit
      is set to 1, and the LSP\n         Protection Type Flag is set to either 0x04
      (1:N Protection with\n         Extra-Traffic), or 0x08 (1+1 Unidirectional Protection)
      or 0x10\n         (1+1 Bidirectional Protection).  The O bit MUST be set to
      0 in\n         any other case.\n      Reserved: 5 bits\n         This field
      is reserved.  It MUST be set to zero on transmission\n         and MUST be ignored
      on receipt.  These bits SHOULD be passed\n         through unmodified by transit
      nodes.\n      LSP (Protection Type) Flags: 6 bits\n         Indicates the desired
      end-to-end LSP recovery type.  A value of\n         0 implies that the LSP is
      \"Unprotected\".  Only one value SHOULD\n         be set at a time.  The following
      values are defined.  All other\n         values are reserved.\n                0x00
      \   Unprotected\n                0x01    (Full) Rerouting\n                0x02
      \   Rerouting without Extra-Traffic\n                0x04    1:N Protection
      with Extra-Traffic\n                0x08    1+1 Unidirectional Protection\n
      \               0x10    1+1 Bidirectional Protection\n      Reserved: 10 bits\n
      \        This field is reserved.  It MUST be set to zero on transmission\n         and
      MUST be ignored on receipt.  These bits SHOULD be passed\n         through unmodified
      by transit nodes.\n      Link Flags: 6 bits\n         Indicates the desired
      link protection type (see [RFC3471]).\n      Reserved field: 32 bits\n         Encoding
      of this field is detailed in [RFC4873].\n"
    title: 14.1.  Format
  - contents:
    - "14.2.  Processing\n   Intermediate and egress nodes processing a Path message
      containing a\n   PROTECTION object MUST verify that the requested LSP Protection
      Type\n   can be satisfied by the incoming interface.  If it cannot, the node\n
      \  MUST generate a PathErr message, with the new error code/sub-code\n   \"Routing
      problem/Unsupported LSP Protection\".\n   Intermediate nodes processing a Path
      message containing a PROTECTION\n   object with the LSP Protection Type 0x02
      (Rerouting without Extra-\n   Traffic) value set and a PRIMARY_PATH_ROUTE object
      (see Section 15)\n   MUST verify that the requested LSP Protection Type can
      be supported\n   by the outgoing interface.  If it cannot, the node MUST generate
      a\n   PathErr message with the new error code/sub-code \"Routing\n   problem/Unsupported
      LSP Protection\".\n"
    title: 14.2.  Processing
  title: 14.  PROTECTION Object
- contents:
  - "15.  PRIMARY_PATH_ROUTE Object\n   The PRIMARY_PATH_ROUTE object (PPRO) is defined
    to inform nodes along\n   the path of a secondary protecting LSP about which resources\n
    \  (link/nodes) are being used by the associated primary protected LSP\n   (as
    specified by the Association ID field).  If the LSP Protection\n   Type value
    is set to 0x02 (Rerouting without Extra-Traffic), this\n   object SHOULD be present
    in the Path message for the pre-provisioning\n   of the secondary protecting LSP
    to enable recovery resource sharing\n   between one or more secondary protecting
    LSPs (see Section 9).  This\n   document does not assume or preclude any other
    usage for this object.\n   PRIMARY_PATH_ROUTE objects carry information extracted
    from the\n   EXPLICIT ROUTE object and/or the RECORD ROUTE object of the primary\n
    \  working LSPs they protect.  Selection of the PPRO content is up to\n   local
    policy of the head-end node that initiates the request.\n   Therefore, the information
    included in these objects can be used as\n   policy-based admission control to
    ensure that recovery resources are\n   only shared between secondary protecting
    LSPs whose associated\n   primary LSPs have link/node/SRLG disjoint paths.\n"
  - contents:
    - "15.1.  Format\n   The primary path route is specified via the PRIMARY_PATH_ROUTE
      object\n   (PPRO).  The Primary Path Route Class Number (Class-Num) of form\n
      \  0bbbbbbb 38.\n   Currently one C-Type (Class-Type) is defined, Type 1, Primary
      Path\n   Route.  The PRIMARY_PATH_ROUTE object has the following format:\n   Class-Num
      = 38 (of the form 0bbbbbbb), C-Type = 1\n      0                   1                   2
      \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     //
      \                       (Subobjects)                         //\n     |                                                               |\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The
      contents of a PRIMARY_PATH_ROUTE object are a series of\n   variable-length
      data items called subobjects (see Section 15.3).\n   To signal a secondary protecting
      LSP, the Path message MAY include\n   one or multiple PRIMARY_PATH_ROUTE objects,
      where each object is\n   meaningful.  The latter is useful when a given secondary
      protecting\n   LSP must be link/node/SRLG disjoint from more than one primary
      LSP\n   (i.e., is protecting more than one primary LSP).\n"
    title: 15.1.  Format
  - contents:
    - "15.2.  Subobjects\n   The PRIMARY_PATH_ROUTE object is defined as a list of
      variable-length\n   data items called subobjects.  These subobjects are derived
      from the\n   subobjects of the EXPLICIT ROUTE and/or RECORD ROUTE object of
      the\n   primary working LSP(s).\n   Each subobject has its own length field.
      \ The length contains the\n   total length of the subobject in bytes, including
      the Type and Length\n   fields.  The length MUST always be a multiple of 4,
      and at least 4.\n   The following subobjects are currently defined for the\n
      \  PRIMARY_PATH_ROUTE object:\n   - Sub-Type 1: IPv4 Address (see [RFC3209])\n
      \  - Sub-Type 2: IPv6 Address (see [RFC3209])\n   - Sub-Type 3: Label (see [RFC3473])\n
      \  - Sub-Type 4: Unnumbered Interface (see [RFC3477])\n   An empty PPRO with
      no subobjects is considered illegal.  If there is\n   no first subobject, the
      corresponding Path message is also in error,\n   and the receiving node SHOULD
      return a PathErr message with the new\n   error code/sub-code \"Routing Problem/Bad
      PRIMARY_PATH_ROUTE object\".\n   Note: an intermediate node processing a PPRO
      can derive SRLG\n   identifiers from the local IGP-TE database using its Type
      1, 2, or 4\n   subobject values as pointers to the corresponding TE Links (assuming\n
      \  each of them has an associated SRLG TE attribute).\n"
    title: 15.2.  Subobjects
  - contents:
    - "15.3.  Applicability\n   The PRIMARY_PATH_ROUTE object MAY only be used when
      all GMPLS nodes\n   along the path support the PRIMARY_PATH_ROUTE object and
      a secondary\n   protecting LSP is being requested.  The PRIMARY_PATH_ROUTE object
      is\n   assigned a class value of the form 0bbbbbbb.  Receiving GMPLS nodes\n
      \  along the path that do not support this object MUST return a PathErr\n   message
      with the \"Unknown Object Class\" error code (see [RFC2205]).\n   Also, the
      following restrictions MUST be applied with respect to the\n   PPRO usage:\n
      \  - PPROs MAY only be included in Path messages when signaling\n     secondary
      protecting LSPs (S bit = 1 and P bit = 1) and when the\n     LSP Protection
      Type value is set to 0x02 (without Rerouting Extra-\n     Traffic) in the PROTECTION
      object (see Section 14).\n   - PRROs SHOULD be present in the Path message for
      the pre-\n     provisioning of the secondary protecting LSP to enable recovery\n
      \    resource sharing between one or more secondary protecting LSPs (see\n     Section
      15.4).\n   - PPROs MUST NOT be used in any other conditions.  In particular,
      if\n     a PPRO is received when the S bit is set to 0 in the PROTECTION\n     object,
      the receiving node MUST return a PathErr message with the\n     new error code/sub-code
      \"Routing Problem/PRIMARY_PATH_ROUTE object\n     not applicable\".\n   - Crossed
      exchanges of PPROs over primary LSPs are forbidden (i.e.,\n     their usage
      is restricted to a single set of protected LSPs).\n   - The PPRO's content MUST
      NOT include subobjects coming from other\n     PPROs.  In particular, received
      PPROs MUST NOT be reused to\n     establish other working or protecting LSPs.\n"
    title: 15.3.  Applicability
  - contents:
    - "15.4.  Processing\n   The PPRO enables sharing recovery resources between a
      given secondary\n   protecting LSP and one or more secondary protecting LSPs
      if their\n   corresponding primary working LSPs have mutually (link/node/SRLG)\n
      \  disjoint paths.  Consider a node N through which n secondary\n   protecting
      LSPs (say, P[1],...,P[n]) have already been established\n   that protect n primary
      working LSPs (say, P'[1],...,P'[n]).  Suppose\n   also that these n secondary
      working LSPs share a given outgoing link\n   resource (say r).\n   Now, suppose
      that node N receives a Path message for an additional\n   secondary protecting
      LSP (say, Q, protecting Q').  The PPRO carried\n   by this Path message is processed
      as follows:\n   - N checks whether the primary working LSPs P'[1],...,P'[n]\n
      \    associated with the LSPs P[1],...,P[n], respectively, have any\n     link,
      node, and SLRG in common with the primary working Q'\n     (associated with
      Q) by comparing the stored PPRO subobjects\n     associated with P'[1],...,P'[n]
      with the PPRO subobjects associated\n     with Q' received in the Path message.\n
      \  - If this is the case, N SHOULD NOT attempt to share the outgoing\n     link
      resource r between P[1],...,P[n] and Q.  However, upon local\n     policy decision,
      N MAY allocate another available (shared) link\n     other than r for use by
      Q.  If this is not the case (upon the local\n     policy decision that no other
      link is allowed to be allocated for\n     Q) or if no other link is available
      for Q, N SHOULD return a\n     PathErr message with the new error code/sub-code
      \"Admission Control\n     Failure/LSP Admission Failure\".\n   - Otherwise (if
      P'[1],...,P'[n] and Q' are fully disjoint), the link\n     r selected by N for
      the LSP Q MAY be exactly the same as the one\n     selected for the LSPs P[1],...,P[n].
      \ This happens after verifying\n     (from the node's local policy) that the
      selected link r can be\n     shared between these LSPs.  If this is not the
      case (for instance,\n     the sharing ratio has reached its maximum for that
      link), and if\n     upon local policy decision, no other link is allowed to
      be\n     allocated for Q, N SHOULD return a PathErr message with the error\n
      \    code/sub-code \"Admission Control Failure/Requested Bandwidth\n     Unavailable\"
      (see [RFC2205]).  Otherwise (if no other link is\n     available), N SHOULD
      return a PathErr message with the new error\n     code/sub-code \"Admission
      Control Failure/LSP Admission Failure\".\n   Note that the process, through
      which m out of the n (m =< n)\n   secondary protecting LSPs' PPROs may be selected
      on a local basis to\n   perform the above comparison and subsequent link selection,
      is out of\n   scope of this document.\n"
    title: 15.4.  Processing
  title: 15.  PRIMARY_PATH_ROUTE Object
- contents:
  - "16.  ASSOCIATION Object\n   The ASSOCIATION object is used to associate LSPs
    with each other.  In\n   the context of end-to-end LSP recovery, the association
    MUST only\n   identify LSPs that support the same Tunnel ID as well as the same\n
    \  tunnel sender address and tunnel endpoint address.  The Association\n   Type,
    Association Source, and Association ID fields of the object\n   together uniquely
    identify an association.  The object uses an object\n   class number of the form
    11bbbbbb to ensure compatibility with non-\n   supporting nodes.\n   The ASSOCIATION
    object is used to associate LSPs with each other.\n"
  - contents:
    - "16.1.  Format\n   The IPv4 ASSOCIATION object (Class-Num of the form 11bbbbbb
      with\n   value = 199, C-Type = 1) has the format:\n     0                   1
      \                  2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |            Length             | Class-Num(199)|  C-Type (1)   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |       Association Type        |       Association ID          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                  IPv4 Association Source                      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  The IPv6 ASSOCIATION object (Class-Num of the form 11bbbbbb with\n   value
      = 199, C-Type = 2) has the format:\n     0                   1                   2
      \                  3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |            Length             | Class-Num(199)|  C-Type (2)   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |       Association Type        |       Association ID          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                                                               |\n    |
      \                 IPv6 Association Source                      |\n    |                                                               |\n
      \   |                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     Association Type: 16 bits\n         Indicates the type of association
      being identified.  Note that\n         this value is considered when determining
      association.  The\n         following are values defined in this document.\n
      \           Value       Type\n            -----       ----\n              0
      \        Reserved\n              1         Recovery (R)\n      Association ID:
      16 bits\n         A value assigned by the LSP head-end.  When combined with
      the\n         Association Type and Association Source, this value uniquely\n
      \        identifies an association.\n      Association Source: 4 or 16 bytes\n
      \        An IPv4 or IPv6 address, respectively, that is associated to\n         the
      node that originated the association.\n"
    title: 16.1.  Format
  - contents:
    - "16.2.  Processing\n   In the end-to-end LSP recovery context, the ASSOCIATION
      object is\n   used to associate a recovery LSP with the LSP(s) it is protecting
      or\n   a protected LSP(s) with its recovery LSP.  The object is carried in\n
      \  Path messages.  More than one object MAY be carried in a single Path\n   message.\n
      \  Transit nodes MUST transmit, without modification, any received\n   ASSOCIATION
      object in the corresponding outgoing Path message.\n   An ASSOCIATION object
      with an Association Type set to the value\n   \"Recovery\" is used to identify
      an LSP-Recovery-related association.\n   Any node associating a recovery LSP
      MUST insert an ASSOCIATION object\n   with the following setting:\n   - The
      Association Type MUST be set to the value \"Recovery\" in the\n     Path message
      of the recovery LSP.\n   - The (IPv4/IPv6) Association Source MUST be set to
      the tunnel sender\n     address of the LSP being protected.\n   - The Association
      ID MUST be set to the LSP ID of the LSP being\n     protected by this LSP or
      the LSP protecting this LSP.  If unknown,\n     this value is set to its own
      signaled LSP_ID value (default).\n     Also, the value of the Association ID
      MAY change during the\n     lifetime of the LSP.\n   Terminating nodes use received
      ASSOCIATION object(s) with the\n   Association Type set to the value \"Recovery\"
      to associate a recovery\n   LSP with its matching working LSP.  This information
      is used to bind\n   the appropriate working and recovery LSPs together.  Such
      nodes MUST\n   ensure that the received Path messages, including ASSOCIATION\n
      \  object(s), are processed with the appropriate PROTECTION object\n   settings,
      if present (see Section 14 for PROTECTION object\n   processing).  Otherwise,
      this node MUST return a PathErr message with\n   the new error code/sub-code
      \"LSP Admission Failure/Bad Association\n   Type\".  Similarly, terminating
      nodes receiving a Path message with a\n   PROTECTION object requiring association
      between working and recovery\n   LSPs MUST include an ASSOCIATION object.  Otherwise,
      such nodes MUST\n   return a PathErr message with the new error code/sub-code
      \"Routing\n   Problem/PROTECTION object not Applicable\".\n"
    title: 16.2.  Processing
  title: 16.  ASSOCIATION Object
- contents:
  - "17.  Updated RSVP Message Formats\n   This section presents the RSVP message-related
    formats as modified by\n   this document.  Unmodified RSVP message formats are
    not listed.\n   The format of a Path message is as follows:\n   <Path Message>
    ::= <Common Header> [ <INTEGRITY> ]\n                      [ [<MESSAGE_ID_ACK>
    | <MESSAGE_ID_NACK>] ... ]\n                      [ <MESSAGE_ID> ]\n                      <SESSION>
    <RSVP_HOP>\n                      <TIME_VALUES>\n                      [ <EXPLICIT_ROUTE>
    ]\n                      <LABEL_REQUEST>\n                      [ <PROTECTION>
    ]\n                      [ <LABEL_SET> ... ]\n                      [ <SESSION_ATTRIBUTE>
    ]\n                      [ <NOTIFY_REQUEST> ... ]\n                      [ <ADMIN_STATUS>
    ]\n                      [ <ASSOCIATION> ... ]\n                      [ <PRIMARY_PATH_ROUTE>
    ... ]\n                      [ <POLICY_DATA> ... ]\n                      <sender
    descriptor>\n   The format of the <sender descriptor> for unidirectional and\n
    \  bidirectional LSPs is not modified by the present document.\n   The format
    of a Resv message is as follows:\n   <Resv Message> ::= <Common Header> [ <INTEGRITY>
    ]\n                      [ [<MESSAGE_ID_ACK> | <MESSAGE_ID_NACK>] ... ]\n                      [
    <MESSAGE_ID> ]\n                      <SESSION> <RSVP_HOP>\n                      <TIME_VALUES>\n
    \                     [ <RESV_CONFIRM> ]  [ <SCOPE> ]\n                      [
    <PROTECTION> ]\n                      [ <NOTIFY_REQUEST> ]\n                      [
    <ADMIN_STATUS> ]\n                      [ <POLICY_DATA> ... ]\n                      <STYLE>
    <flow descriptor list>\n      <flow descriptor list> is not modified by this document.\n"
  title: 17.  Updated RSVP Message Formats
- contents:
  - "18.  Security Considerations\n   The security threats identified in [RFC4426]
    may be experienced due\n   to the exchange of RSVP messages and information as
    detailed in this\n   document.  The following security mechanisms apply.\n   RSVP
    signaling MUST be able to provide authentication and integrity.\n   Authentication
    is required to ensure that the signaling messages are\n   originating from the
    right place and have not been modified in\n   transit.\n   For this purpose, [RFC2747]
    provides the required RSVP message\n   authentication and integrity for hop-by-hop
    RSVP message exchanges.\n   For non hop-by-hop RSVP message exchanges the standard
    IPsec-based\n   integrity and authentication can be used as explained in [RFC3473].\n
    \  Moreover, this document makes use of the Notify message exchange.\n   This
    precludes RSVP's hop-by-hop integrity and authentication model.\n   In the case,
    when the same level of security provided by [RFC2747] is\n   desired, the standard
    IPsec based integrity and authentication can be\n   used as explained in [RFC3473].\n
    \  To prevent the consequences of poorly applied protection and the\n   increased
    risk of misconnection, in particular, when extra-traffic is\n   involved, that
    would deliver the wrong traffic to the wrong\n   destination, specific mechanisms
    have been put in place as described\n   in Section 7.2, 8.3, and 10.\n"
  title: 18.  Security Considerations
- contents:
  - "19.  IANA Considerations\n   IANA assigns values to RSVP protocol parameters.
    \ Within the current\n   document, a PROTECTION object (new C-Type), a PRIMARY_PATH_ROUTE\n
    \  object, and an ASSOCIATION object are defined.  In addition, new\n   Error
    code/sub-code values are defined in this document.  Finally,\n   registration
    of the ADMIN_STATUS object bits is requested.\n   Two RSVP Class Numbers (Class-Num)
    and three Class Types (C-Types)\n   values have to be defined by IANA in registry:\n
    \  http://www.iana.org/assignments/rsvp-parameters\n   1) PROTECTION object (defined
    in Section 14.1)\n   o PROTECTION object: Class-Num = 37\n   - Type 2: C-Type
    = 2\n   2) PRIMARY_PATH_ROUTE object (defined in Section 15.1)\n   o PRIMARY_PATH_ROUTE
    object: Class-Num = 38 (of the form 0bbbbbbb),\n   - Primary Path Route: C-Type
    = 1\n   3) ASSOCIATION object (defined in Section 16.1)\n   o ASSOCIATION object:
    Class-Num = 199 (of the form 11bbbbbb)\n   - IPv4 Association: C-Type = 1\n   -
    IPv6 Association: C-Type = 2\n   o Association Type\n   The following values defined
    for the Association Type (16 bits) field\n   of the ASSOCIATION object.\n            Value
    \      Type\n            -----       ----\n              0         Reserved\n
    \             1         Recovery (R)\n   Assignment of values (from 2 to 65535)
    by IANA are subject to IETF\n   expert review process, i.e., IETF Standards Track
    RFC Action.\n   4) Error Code/Sub-code values\n   The following Error code/sub-code
    values are defined in this\n   document:\n   Error Code = 01: \"Admission Control
    Failure\" (see [RFC2205])\n   o \"Admission Control Failure/LSP Admission Failure\"
    (4)\n   o \"Admission Control Failure/Bad Association Type\" (5)\n   Error Code
    = 02: \"Policy Control Failure\" (see [RFC2205])\n   o \"Policy Control failure/Hard
    Pre-empted\" (20)\n   Error Code = 24: \"Routing Problem\" (see [RFC3209])\n   o
    \"Routing Problem/Unsupported LSP Protection\" (17)\n   o \"Routing Problem/PROTECTION
    object not applicable\" (18)\n   o \"Routing Problem/Bad PRIMARY_PATH_ROUTE object\"
    (19)\n   o \"Routing Problem/PRIMARY_PATH_ROUTE object not applicable\" (20)\n
    \  Error Code = 25: \"Notify Error\" (see [RFC3209])\n   o \"Notify Error/LSP
    Failure\"               (9)\n   o \"Notify Error/LSP Recovered\"             (10)\n
    \  o \"Notify Error/LSP Locally Failed\"        (11)\n   5) Registration of the
    ADMIN_STATUS object bits\n   The ADMIN_STATUS object (Class-Num = 196, C-Type
    = 1) is defined in\n   [RFC3473].\n   IANA is also requested to track the ADMIN_STATUS
    bits extended by\n   this document.  For this purpose, the following new registry
    entries\n   have been created:\n   http://www.iana.org/assignments/gmpls-sig-parameters\n
    \  - ADMIN_STATUS bits:\n        Name: ADMIN_STATUS bits\n        Format: 32-bit
    vector of bits\n        Position:\n           [0]          Reflect (R) bit defined
    in [RFC3471]\n           [1..25]      To be assigned by IANA via IETF Standards\n
    \                       Track RFC Action.\n           [26]         Lockout (L)
    bit is defined in Section 13\n           [27]         Inhibit alarm communication
    (I) in [RFC4783]\n           [28]         Call control (C) bit is defined in\n
    \                       [GMPLS-CALL]\n           [29]         Testing (T) bit
    is defined in [RFC3471]\n           [30]         Administratively down (A) bit
    is defined in\n                        [RFC3471]\n           [31]         Deletion
    in progress (D) bit is defined in\n                        [RFC3471]\n"
  title: 19.  IANA Considerations
- contents:
  - "20.  Acknowledgments\n   The authors would like to thank John Drake for his active\n
    \  collaboration, Adrian Farrel for his contribution to this document\n   (in
    particular, to the Section 10 and 11) and his thorough review of\n   the document,
    Bart Rousseau (for editorial review), Dominique\n   Verchere, and Stefaan De Cnodder.
    \ Thanks also to Ichiro Inoue for\n   his valuable comments.\n   The authors would
    also like to thank Lou Berger for the time and\n   effort he spent together with
    the design team, in contributing to the\n   present document.\n"
  title: 20.  Acknowledgments
- contents:
  - '21.  References

    '
  - contents:
    - "21.1.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use
      in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC2205]    Braden, R., Zhang, L., Berson, S., Herzog, S.,
      and S.\n                Jamin, \"Resource ReSerVation Protocol (RSVP) -- Version\n
      \               1 Functional Specification\", RFC 2205, September 1997.\n   [RFC2747]
      \   Baker, F., Lindell, B., and M. Talwar, \"RSVP\n                Cryptographic
      Authentication\", RFC 2747, January 2000.\n   [RFC2961]    Berger, L., Gan,
      D., Swallow, G., Pan, P., Tommasi, F.,\n                and S. Molendini, \"RSVP
      Refresh Overhead Reduction\n                Extensions\", RFC 2961, April 2001.\n
      \  [RFC3209]    Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan,\n                V.,
      and G. Swallow, \"RSVP-TE: Extensions to RSVP for LSP\n                Tunnels\",
      RFC 3209, December 2001.\n   [RFC3471]    Berger, L., \"Generalized Multi-Protocol
      Label Switching\n                (GMPLS) Signaling Functional Description\",
      RFC 3471,\n                January 2003.\n   [RFC3473]    Berger, L., \"Generalized
      Multi-Protocol Label Switching\n                (GMPLS) Signaling Resource ReserVation
      Protocol-Traffic\n                Engineering (RSVP-TE) Extensions\", RFC 3473,
      January\n                2003.\n   [RFC3477]    Kompella, K. and Y. Rekhter,
      \"Signalling Unnumbered\n                Links in Resource ReSerVation Protocol
      - Traffic\n                Engineering (RSVP-TE)\", RFC 3477, January 2003.\n
      \  [RFC3945]    Mannie, E., \"Generalized Multi-Protocol Label Switching\n                (GMPLS)
      Architecture\", RFC 3945, October 2004.\n   [RFC4426]    Lang, J., Rajagopalan,
      B., and D. Papadimitriou,\n                \"Generalized Multi-Protocol Label
      Switching (GMPLS)\n                Recovery Functional Specification\", RFC
      4426, March\n                2006.\n   [RFC4873]    Berger, L., Bryskin, I.,
      Papdimitriou, D., and A.\n                Farrel, \"GMPLS Segment Recovery,\"
      RFC 4873, May 2007.\n"
    title: 21.1.  Normative References
  - contents:
    - "21.2.  Informative References\n   [RFC4783]    Berger, L., \"GMPLS - Communication
      of Alarm\n                Information\", RFC 4783, December 2006.\n   [CRANK]
      \     Farrel, A., Ed., \"Crankback Signaling Extensions for\n                MPLS
      and GMPLS RSVP-TE\",  Work in Progress, January\n                2007.\n   [GMPLS-CALL]
      Papadimitriou, D., Ed., and A. Farrel, Ed., \"Generalized\n                MPLS
      (GMPLS) RSVP-TE Signaling Extensions in support of\n                Calls\",
      \ Work in Progress, January 2007.\n   [RFC4090]    Pan, P., Ed., Swallow, G.,
      Ed., and A. Atlas, Ed., \"Fast\n                Reroute Extensions to RSVP-TE
      for LSP Tunnels\", RFC\n                4090, May 2005.\n   [RFC4427]    Mannie,
      E., Ed., and D. Papadimitriou, Ed., \"Recovery\n                (Protection
      and Restoration) Terminology for Generalized\n                Multi-Protocol
      Label Switching (GMPLS)\", RFC 4427, March\n                2006.\n   [RFC4874]
      \   Lee, CY., Farrel, A., and S. De Cnodder, \"Exclude Routes\n                -
      Extension to Resource ReserVation Protocol-Traffic\n                Engineering
      (RSVP-TE)\", RFC 4874, April 2007.\n   [G.841]      ITU-T, \"Types and Characteristics
      of SDH Network\n                Protection Architectures,\" Recommendation G.841,
      October\n                1998, available from http://www.itu.int.\n"
    title: 21.2.  Informative References
  title: 21.  References
- contents:
  - "22.  Contributors\n   This document is the result of the CCAMP Working Group
    Protection and\n   Restoration design team joint effort.  The following are the
    authors\n   that contributed to the present document:\n   Deborah Brungard (AT&T)\n
    \  Rm. D1-3C22 - 200, S. Laurel Ave.\n   Middletown, NJ 07748, USA\n   EMail:
    dbrungard@att.com\n   Sudheer Dharanikota\n   EMail: sudheer@ieee.org\n   Guangzhi
    Li (AT&T)\n   180 Park Avenue\n   Florham Park, NJ 07932, USA\n   EMail: gli@research.att.com\n
    \  Eric Mannie (Perceval)\n   Rue Tenbosch, 9\n   1000 Brussels, Belgium\n   Phone:
    +32-2-6409194\n   EMail: eric.mannie@perceval.net\n   Bala Rajagopalan (Intel
    Broadband Wireless Division)\n   2111 NE 25th Ave.\n   Hillsboro, OR 97124, USA\n
    \  EMail: bala.rajagopalan@intel.com\n"
  title: 22.  Contributors
- contents:
  - "Editors' Addresses\n   Jonathan P. Lang\n   Sonos\n   506 Chapala Street\n   Santa
    Barbara, CA 93101, USA\n   EMail: jplang@ieee.org\n   Yakov Rekhter\n   Juniper\n
    \  1194 N. Mathilda Avenue\n   Sunnyvale, CA 94089, USA\n   EMail: yakov@juniper.net\n
    \  Dimitri Papadimitriou\n   Alcatel\n   Copernicuslaan 50\n   B-2018, Antwerpen,
    Belgium\n   EMail: dimitri.papadimitriou@alcatel-lucent.be\n"
  title: Editors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
