- title: __initial_text__
  contents:
  - "                    FTP Server-Server Interaction-II\n   At the recent FTP meeting\
    \ at BBN in Cambridge, one of the topics\n   discussed was that of server-server\
    \ interaction.  In a typical\n   situation a user (A) conversing with two servers\
    \ (B,C) is interested\n   in retrieving a file from one site (B) and sending it\
    \ to the other\n   (C).\n                          | USER |\n                \
    \          |   A  |\n                   control        control\n             \
    \   |SERVER|    DATA    |SERVER|\n                |   B  |----------->|  C   |\n\
    \   The consensus of the meeting was that mechanisms were necessary to\n   make\
    \ B and C aware of each other and to allow a data connection to be\n   established\
    \ without forcing each other to queue RFCs for local\n   sockets before they exist.\n\
    \   The proposed solution to this problem was a command called PASSIVE\n   (PASV?).\
    \  The following is our conclusion as to the meaning of the\n   command and how\
    \ it would be used.\n   Third party connections would be established using the\
    \ SOCK command,\n   which says \"Be prepared to use socket S at Host H to establish\
    \ your\n   data connection\", and the PASV command which says \"open your data\n\
    \   socket for listening, and upon receipt of a transfer command wait for\n  \
    \ an RFC rather than initiating one.\"\n   A positive acknowledgement to the PASV\
    \ command indicates that the\n   data socket has been opened for listening.  When\
    \ an RFC for its data\n   socket arrives after it has positively acknowledged\
    \ a PASV command,\n   the server should respond with a matching RFC to open the\
    \ data\n   connection (assuming, of course, that the incoming RFC is consistent\n\
    \   with the previous SOCK commands, if any).\n                            +---------------+\n\
    \                            |               |\n                 +----------|\
    \ USER PROCESS  |----------+\n                 |          |       A       |  \
    \        |\n               telnet       +---------------+        telnet\n    \
    \             |                                     |\n                 |    \
    \                                 |\n          +-----------+                 \
    \        +-------------+\n          |           |-------->      --------->|  \
    \           |\n          |  SERVER   |data sockets  data socket|   SERVER    |\n\
    \          |     B     |    Sb           Sc      |     C       |\n          |\
    \           |<--------      <---------|             |\n          +-----------+\
    \                         +-------------+\n   USER A TO SERVER B             \
    \        USER A TO SERVER C\n   __________________                     __________________\n\
    \   A->B   SOCK  HOST-C  SKT- Sc           A->C   SOCK  HOST-B  SKT-  Sb\n   B->A\
    \       ACK                         C->A      ACK\n   A->B   PASV\n   B->A   \
    \    ACK\n   A->B   STOR                            A->C   RTRV\n      1. After\
    \ the PASV command has been acknowledged, the two data\n         transfer commands\
    \ can be sent in either order, since the\n         LISTENING action takes place\
    \ with the PASV command\n      2. The user knows the socket numbers Sc and Sb\
    \ to be the data\n         sockets as specified by the protocol.\n      3. Note\
    \ that it is not essential for a SOCK command to be sent to\n         the same\
    \ Host to whom a PASV will be sent.  Sending one to him\n         provides security\
    \ in that the incoming RFC can be checked.\n   RB/nlg\n          [This RFC was\
    \ put into machine readable form for entry]\n     [into the online RFC archives\
    \ by Helene Morin, Via Genie 12/1999]\n"
