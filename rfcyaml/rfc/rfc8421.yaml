- title: __initial_text__
  contents:
  - "           Guidelines for Multihomed and IPv4/IPv6 Dual-Stack\n             \
    \ Interactive Connectivity Establishment (ICE)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides guidelines on how to make Interactive\n \
    \  Connectivity Establishment (ICE) conclude faster in multihomed and\n   IPv4/IPv6\
    \ dual-stack scenarios where broken paths exist.  The\n   provided guidelines\
    \ are backward compatible with the original ICE\n   specification (see RFC 5245).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 7841.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8421.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Notational Conventions  . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  ICE Multihomed Recommendations  . . . . . . . . . . . .\
    \ . . .   3\n   4.  ICE Dual-Stack Recommendations  . . . . . . . . . . . . .\
    \ . .   4\n   5.  Compatibility . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   5\n   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .\
    \   7\n   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  \
    \ 7\n   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   8\n\
    \     8.1.  Normative References  . . . . . . . . . . . . . . . . . .   8\n  \
    \   8.2.  Informative References  . . . . . . . . . . . . . . . . .   8\n   Acknowledgements\
    \  . . . . . . . . . . . . . . . . . . . . . . . .   8\n   Authors' Addresses\
    \  . . . . . . . . . . . . . . . . . . . . . . .   9\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In multihomed and IPv4/IPv6 dual-stack environments, ICE\
    \ [RFC8445]\n   would benefit by a fair distribution of its connectivity checks\n\
    \   across available interfaces or IP address types.  With a fair\n   distribution\
    \ of the connectivity checks, excessive delays are avoided\n   if a particular\
    \ network path is broken or slow.  Arguably, it would\n   be better to put the\
    \ interfaces or address types known to the\n   application last in the checklist.\
    \  However, the main motivation by\n   ICE is to make no assumptions regarding\
    \ network topology; hence, a\n   fair distribution of the connectivity checks\
    \ is more appropriate.  If\n   an application operates in a well-known environment,\
    \ it can safely\n   override the recommendation given in this document.\n   Applications\
    \ should take special care to deprioritize network\n   interfaces known to provide\
    \ unreliable connectivity when operating in\n   a multihomed environment.  For\
    \ example, certain tunnel services might\n   provide unreliable connectivity.\
    \  Doing so will ensure a more fair\n   distribution of the connectivity checks\
    \ across available network\n   interfaces on the device.  The simple guidelines\
    \ presented here\n   describe how to deprioritize interfaces known by the application\
    \ to\n   provide unreliable connectivity.\n   There is also a need to introduce\
    \ better handling of connectivity\n   checks for different IP address families\
    \ in dual-stack IPv4/IPv6 ICE\n   scenarios.  Following the recommendations from\
    \ RFC 6724 [RFC6724]\n   will lead to prioritization of IPv6 over IPv4 for the\
    \ same candidate\n   type.  Due to this, connectivity checks for candidates of\
    \ the same\n   type (host, reflexive, or relay) are sent such that an IP address\n\
    \   family is completely depleted before checks from the other address\n   family\
    \ are started.  This results in user-noticeable delays with\n   setup if the path\
    \ for the prioritized address family is broken.\n   To avoid user-noticeable delays\
    \ when either the IPv6 or IPv4 path is\n   broken or excessively slow, this specification\
    \ encourages\n   intermingling the different address families when connectivity\
    \ checks\n   are performed.  This will lead to more sustained dual-stack IPv4/IPv6\n\
    \   deployment as users will no longer have an incentive to disable IPv6.\n  \
    \ The cost is a small penalty to the address type that otherwise would\n   have\
    \ been prioritized.  Further, this document recommends keeping\n   track of previous\
    \ known connectivity problems and assigning a lower\n   priority to those addresses.\
    \  Specific mechanisms and rules for\n   tracking connectivity issues are out\
    \ of scope for this document.\n   This document describes what parameters an agent\
    \ can safely alter to\n   fairly order the checklist candidate pairs in multihomed\
    \ and dual-\n   stack environments, thus affecting the sending order of the\n\
    \   connectivity checks.  The actual values of those parameters are an\n   implementation\
    \ detail.  Dependent on the nomination method in use,\n   this might have an effect\
    \ on what candidate pair ends up as the\n   active one.  Ultimately, it should\
    \ be up to the agent to decide what\n   candidate pair is best suited for transporting\
    \ media.\n   The guidelines outlined in this specification are backward compatible\n\
    \   with the original ICE implementation.  This specification only alters\n  \
    \ the values used to create the resulting checklists in such a way that\n   the\
    \ core mechanisms from the original ICE specification [RFC5245] and\n   its replacement\
    \ [RFC8445] are still in effect.\n"
- title: 2.  Notational Conventions
  contents:
  - "2.  Notational Conventions\n   This document uses terminology defined in [RFC8445].\n"
- title: 3.  ICE Multihomed Recommendations
  contents:
  - "3.  ICE Multihomed Recommendations\n   A multihomed ICE agent can potentially\
    \ send and receive connectivity\n   checks on all available interfaces and IP\
    \ addresses.  It is possible\n   for an interface to have several IP addresses\
    \ associated with it.  To\n   avoid unnecessary delay when performing connectivity\
    \ checks, it would\n   be beneficial to prioritize interfaces and IP addresses\
    \ known by the\n   agent to provide stable connectivity.\n   The application knowledge\
    \ regarding the reliability of an interface\n   can also be based on simple metrics\
    \ like previous connection success/\n   failure rates, or it can be a more static\
    \ model based on interface\n   types like wired, wireless, cellular, virtual,\
    \ and tunneled in\n   conjunction with other operational metrics.  This would\
    \ require the\n   application to have the right permissions to obtain such operational\n\
    \   metrics.\n   Candidates from an interface known to the application to provide\n\
    \   unreliable connectivity should get a low candidate priority.  When to\n  \
    \ consider connectivity as unreliable is implementation specific.\n   Usage of\
    \ ICE is not limited to Voice over IP (VoIP) applications.\n   What an application\
    \ sees as unreliability might be determined by a\n   mix of how long lived the\
    \ connection is, how often setup is required,\n   and other, for now unknown,\
    \ requirements.  This is purely an\n   optimization to speed up the ICE connectivity\
    \ check phase.\n   If the application is unable to get any interface information\n\
    \   regarding type or is unable to store any relevant metrics, it should\n   treat\
    \ all interfaces as if they have reliable connectivity.  This\n   ensures that\
    \ all interfaces get a fair chance to perform their\n   connectivity checks.\n"
- title: 4.  ICE Dual-Stack Recommendations
  contents:
  - "4.  ICE Dual-Stack Recommendations\n   Candidates should be prioritized such\
    \ that a sequence of candidates\n   belonging to the same address family will\
    \ be intermingled with\n   candidates from an alternate IP family, for example,\
    \ promote IPv4\n   candidates in the presence of many IPv6 candidates such that\
    \ an IPv4\n   address candidate is always present after a small sequence of IPv6\n\
    \   candidates (i.e., reorder candidates such that both IPv6 and IPv4\n   candidates\
    \ get a fair chance during the connectivity check phase).\n   This makes ICE connectivity\
    \ checks more responsive to broken-path\n   failures of an address family.\n \
    \  An ICE agent can select an algorithm or a technique of its choice to\n   ensure\
    \ that the resulting checklists have a fair intermingled mix of\n   IPv4 and IPv6\
    \ address families.  However, modifying the checklist\n   directly can lead to\
    \ uncoordinated local and remote checklists that\n   result in ICE taking longer\
    \ to complete or, in the worst case\n   scenario, fail.  The best approach is\
    \ to set the appropriate value\n   for local preference in the formula for calculating\
    \ the candidate\n   priority value as described in the \"Recommended Formula\"\
    \ section\n   (Section 5.1.2.1) of [RFC8445].\n   Implementations should prioritize\
    \ IPv6 candidates by putting some of\n   them first in the intermingled checklist.\
    \  This increases the chance\n   of IPv6 connectivity checks to complete first\
    \ and be ready for\n   nomination or usage.  This enables implementations to follow\
    \ the\n   intent of \"Happy Eyeballs: Success with Dual-Stack Hosts\" [RFC8305].\n\
    \   It is worth noting that the timing recommendations in [RFC8305] will\n   be\
    \ overruled by how ICE paces out its connectivity checks.\n   A simple formula\
    \ to calculate how many IPv6 addresses to put before\n   any IPv4 addresses could\
    \ look like:\n                Hi = (N_4 + N_6) / N_4\n                Where Hi\
    \  = Head start before intermingling starts\n                      N_4 = Number\
    \ of IPv4 addresses\n                      N_6 = Number of IPv6 addresses\n  \
    \ If a host has two IPv4 addresses and six IPv6 addresses, it will\n   insert\
    \ an IPv4 address after four IPv6 addresses by choosing the\n   appropriate local\
    \ preference values when calculating the pair\n   priorities.\n"
- title: 5.  Compatibility
  contents:
  - "5.  Compatibility\n   The formula in Section 5.1.2 of [RFC8445] should be used\
    \ to calculate\n   the candidate priority.  The formula is as follows:\n     \
    \           priority = (2^24)*(type preference) +\n                          \
    \ (2^8)*(local preference) +\n                           (2^0)*(256 - component\
    \ ID)\n   \"Guidelines for Choosing Type and Local Preferences\" (Section 5.1.2.2\n\
    \   of [RFC8445]) has guidelines for how the type preference and local\n   preference\
    \ value should be chosen.  Instead of having a static local\n   preference value\
    \ for IPv4 and IPv6 addresses, it is possible to\n   choose this value dynamically\
    \ in such a way that IPv4 and IPv6\n   address candidate priorities end up intermingled\
    \ within the same\n   candidate type.  It is also possible to assign lower priorities\
    \ to IP\n   addresses derived from unreliable interfaces using the local\n   preference\
    \ value.\n   It is worth mentioning that Section 5.1.2.1 of [RFC8445] states that\n\
    \   \"if there are multiple candidates for a particular component for a\n   particular\
    \ data stream that have the same type, the local preference\n   MUST be unique\
    \ for each one\".\n   The local type preference can be dynamically changed in\
    \ such a way\n   that IPv4 and IPv6 address candidates end up intermingled regardless\n\
    \   of candidate type.  This is useful if there are a lot of IPv6 host\n   candidates\
    \ effectively blocking connectivity checks for IPv4 server\n   reflexive candidates.\n\
    \   Candidates with IP addresses from an unreliable interface should be\n   ordered\
    \ at the end of the checklist, i.e., not intermingled as the\n   dual-stack candidates.\n\
    \   The list below shows a sorted local candidate list where the priority\n  \
    \ is calculated in such a way that the IPv4 and IPv6 candidates are\n   intermingled\
    \ (no multihomed candidates).  To allow for earlier\n   connectivity checks for\
    \ the IPv4 server reflexive candidates, some of\n   the IPv6 host candidates are\
    \ demoted.  This is just an example of how\n   candidate priorities can be calculated\
    \ to provide better fairness\n   between IPv4 and IPv6 candidates without breaking\
    \ any of the ICE\n   connectivity checks.\n                     Candidate   Address\
    \ Component\n                       Type       Type      ID     Priority\n   \
    \               -------------------------------------------\n                \
    \  (1)  HOST       IPv6      (1)    2129289471\n                  (2)  HOST  \
    \     IPv6      (2)    2129289470\n                  (3)  HOST       IPv4    \
    \  (1)    2129033471\n                  (4)  HOST       IPv4      (2)    2129033470\n\
    \                  (5)  HOST       IPv6      (1)    2128777471\n             \
    \     (6)  HOST       IPv6      (2)    2128777470\n                  (7)  HOST\
    \       IPv4      (1)    2128521471\n                  (8)  HOST       IPv4  \
    \    (2)    2128521470\n                  (9)  HOST       IPv6      (1)    2127753471\n\
    \                  (10) HOST       IPv6      (2)    2127753470\n             \
    \     (11) SRFLX      IPv6      (1)    1693081855\n                  (12) SRFLX\
    \      IPv6      (2)    1693081854\n                  (13) SRFLX      IPv4   \
    \   (1)    1692825855\n                  (14) SRFLX      IPv4      (2)    1692825854\n\
    \                  (15) HOST       IPv6      (1)    1692057855\n             \
    \     (16) HOST       IPv6      (2)    1692057854\n                  (17) RELAY\
    \      IPv6      (1)    15360255\n                  (18) RELAY      IPv6     \
    \ (2)    15360254\n                  (19) RELAY      IPv4      (1)    15104255\n\
    \                  (20) RELAY      IPv4      (2)    15104254\n               \
    \    SRFLX = server reflexive\n   Note that the list does not alter the component\
    \ ID part of the\n   formula.  This keeps the different components (RTP and the\
    \ Real-time\n   Transport Control Protocol (RTCP)) close in the list.  What matters\n\
    \   is the ordering of the candidates with component ID 1.  Once the\n   checklist\
    \ is formed for a media stream, the candidate pair with\n   component ID 1 will\
    \ be tested first.  If the ICE connectivity check\n   is successful, then other\
    \ candidate pairs with the same foundation\n   will be unfrozen (see \"Computing\
    \ Candidate Pair States\" in\n   Section 6.1.2.6 of [RFC8445]).\n   The local\
    \ and remote agent can have different algorithms for choosing\n   the local preference\
    \ and type preference values without impacting the\n   synchronization between\
    \ the local and remote checklists.\n   The checklist is made up of candidate pairs.\
    \  A candidate pair is two\n   candidates paired up and given a candidate pair\
    \ priority as described\n   in Section 6.1.2.3 of [RFC8445].  Using the pair priority\
    \ formula:\n        pair priority = 2^32*MIN(G,D) + 2*MAX(G,D) + (G>D?1:0)\n \
    \  Where G is the candidate priority provided by the controlling agent,\n   and\
    \ D is the candidate priority provided by the controlled agent.\n   This ensures\
    \ that the local and remote checklists are coordinated.\n   Even if the two agents\
    \ have different algorithms for choosing the\n   candidate priority value to get\
    \ an intermingled set of IPv4 and IPv6\n   candidates, the resulting checklist,\
    \ that is a list sorted by the\n   pair priority value, will be identical on the\
    \ two agents.\n   The agent that has promoted IPv4 cautiously, i.e., lower IPv4\n\
    \   candidate priority values compared to the other agent, will influence\n  \
    \ the checklist the most due to (2^32*MIN(G,D)) in the formula.\n   These recommendations\
    \ are backward compatible with the original ICE\n   implementation.  The resulting\
    \ local and remote checklist will still\n   be synchronized.\n   Dependent of\
    \ the nomination method in use, the procedures described\n   in this document\
    \ might change what candidate pair ends up as the\n   active one.\n   A test implementation\
    \ of an example algorithm is available at\n   [ICE_dualstack_imp].\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The security considerations described in [RFC8445]\
    \ are valid.  It\n   changes recommended values and describes how an agent could\
    \ choose\n   those values in a safe way.  In Section 3, the agent can prioritize\n\
    \   the network interface based on previous network knowledge.  This can\n   potentially\
    \ be unwanted information leakage towards the remote agent.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC5245]  Rosenberg, J., \"Interactive Connectivity\
    \ Establishment\n              (ICE): A Protocol for Network Address Translator\
    \ (NAT)\n              Traversal for Offer/Answer Protocols\", RFC 5245,\n   \
    \           DOI 10.17487/RFC5245, April 2010,\n              <https://www.rfc-editor.org/info/rfc5245>.\n\
    \   [RFC6724]  Thaler, D., Ed., Draves, R., Matsumoto, A., and T. Chown,\n   \
    \           \"Default Address Selection for Internet Protocol Version 6\n    \
    \          (IPv6)\", RFC 6724, DOI 10.17487/RFC6724, September 2012,\n       \
    \       <https://www.rfc-editor.org/info/rfc6724>.\n   [RFC8305]  Schinazi, D.\
    \ and T. Pauly, \"Happy Eyeballs Version 2:\n              Better Connectivity\
    \ Using Concurrency\", RFC 8305,\n              DOI 10.17487/RFC8305, December\
    \ 2017,\n              <https://www.rfc-editor.org/info/rfc8305>.\n   [RFC8445]\
    \  Keranen, A., Holmberg, C., and J. Rosenberg, \"Interactive\n              Connectivity\
    \ Establishment (ICE): A Protocol for Network\n              Address Translator\
    \ (NAT) Traversal\", RFC 8445,\n              DOI 10.17487/RFC8445, July 2018,\n\
    \              <https://www.rfc-editor.org/info/rfc8445>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [ICE_dualstack_imp]\n              \"ICE Happy\
    \ Eyeball Test Algorithms\", commit 45083fb,\n              January 2014,\n  \
    \            <https://github.com/palerikm/ICE-DualStackFairness>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Dan Wing, Ari Keranen, Bernard\
    \ Aboba,\n   Martin Thomson, Jonathan Lennox, Balint Menyhart, Ole Troan, Simon\n\
    \   Perreault, Ben Campbell, and Mirja Kuehlewind for their comments and\n   review.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Paal-Erik Martinsen\n   Cisco Systems, Inc.\n   Philip\
    \ Pedersens Vei 22\n   Lysaker, Akershus  1325\n   Norway\n   Email: palmarti@cisco.com\n\
    \   Tirumaleswar Reddy\n   McAfee, Inc.\n   Embassy Golf Link Business Park\n\
    \   Bangalore, Karnataka  560071\n   India\n   Email: TirumaleswarReddy_Konda@McAfee.com\n\
    \   Prashanth Patil\n   Cisco Systems, Inc.\n   Bangalore\n   India\n   Email:\
    \ praspati@cisco.com\n"
