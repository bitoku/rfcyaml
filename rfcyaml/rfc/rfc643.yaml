- title: __initial_text__
  contents:
  - "Network Debugging Protocol                          Eric Mader\n     This document\
    \ describes a proposed protocol  to  be  used  in  an\nimplementation   of   a\
    \   PDP-11   network  Bootstrap  service  and  a\ncross-network  debugger.   The\
    \  protocol  is  designed  for  debugging\nprocesses  running under an operating\
    \ system which can perform some of\nthe \"lower level\" debugging  tasks,  such\
    \  as  planting  and  removing\nbreakpoints  and  single  stepping.  A subset\
    \ of the protocol could be\nused if such a capability does not exist (a  stand-alone\
    \  program  for\nexample).\n     The protocol is a level 2 protocol, which  bypasses\
    \  the  ARPANET\nHOST-HOST  protocol.   (This  is  implemented  on  TENEX using\
    \ special\nprivileged system calls which allow messages to be  sent  directly\
    \  to\nand  received  directly  from the IMP).  Messages are sent between the\n\
    PDP-11 and the remote debugger on  one  link  (currently  377  octal).\nEach \
    \ message from the remote debugger to the PDP-ll is a request that\nthe PDP-11\
    \ perform some action, and each message from  the  PDP-11  to\nthe remote debugger\
    \ is either a reply to that request or an indication\nthat  a  process  has  stopped\
    \  running  (i.e.   has  trapped,  hit  a\nbreakpoint, etc).  The exact format\
    \ of the messages is shown in Figure\n1 below.\n     Each  command  consists \
    \ of  an  8-bit  op-code,  and  an   8-bit\nprocess-id,  two  16-bit  arguments,\
    \  and  an optional string of 8-bit\nbytes.  The op-code field from the PDP-11\
    \ should be the same  as  that\nsent  by  the  remote  host  to  indicate successful\
    \ completion of the\nrequest or be the same as that set by the remote host with\
    \ the 200 bit\nset  to  indicate  failure to complete the request.  Op-codes from\
    \ the\nPDP-11 which have the 100 bit set are asynchronous indication  that  a\n\
    process  has stopped for a reason other than a request from the remote\nhost.\
    \  (See description of asynchronous replies  below).   An  op-code\nfrom  the\
    \  PDP-11  with  both  the 100 and 200 bit set is meaningless.\nThus, the 8-bit\
    \ op-code field sent by the PDP-11 can be thought of  as\na CAN'T Flag, an Asynchronous\
    \ STOP Flag, and a 6-bit op-code.\n     In the description that follows the commands\
    \ will be given as\n   NAME (Process-ID, Argument 1, Argument 2, BYTE STRING)\n\
    with only as many of the fields present as are used.\nOp-Code 0 - NOP_______ _\
    \ _ ___\n     This command is intended to be used to determine if the PDP-11 is\n\
    operational.   It  has no effect on any process running in the PDP-11.\nThe response\
    \ is NOP.\nOp-Code 1 - DEBUG (Process)_______ _ _ _____ _________\n          \
    \           DEBUGGING (process)\n(op-code 1) if no other remote host is currently\
    \ doing so, and\n                    CAN'T DEBUG (process)\n(op-code 201) if another\
    \ remote host  has  been  given  permission  to\ndebug the process, or the process\
    \ doesn't exist.\nOp-Code 2 - END DEBUG (Process)_______ _ _ ___ _____ _________\n\
    \     This command relinquishes the ability to debug  a  process.   The\nPDP-11\
    \ should reply\n                     END DEBUG (Process)\n(op-code 2) unless the\
    \ remote host isn't  debugging  the  process,  in\nwhich case it should respond\
    \ \n                  CAN'T END DEBUG (Process)\n(op-code 202).  If the process\
    \ isn't running when  the  END  DEBUG  is\ndone, then the effect should be the\
    \ same as\n                      RESUME (PROCESS)\n                    END DEBUG\
    \ (PROCESS)\nOp-Code 3 - STOP (Process)_______ _ _ ____ _________\n     This command\
    \ requests the PDP-11 to stop the given  process  from\nrunning.  The PDP-11 should\
    \ respond\n                      STOPPED (process)\n(op-code 3) unless the process\
    \ isn't  being  debugged  by  the  remote\nhost.  In this case it should reply\n\
    \                    CAN'T STOP (process)\n  (op-code 203).\nOp-Code 4 - DEPOSIT\
    \ (Process, Address, Count, Byte String)_______ _ _ _______ _________ ________\
    \ ______ ____ _______\n     This instructs the PDP-11 to deposit  the  Count \
    \ bytes  in  Byte\nString  into  the  given process's address space beginning\
    \ at Address.\nThe PDP-11 should reply\n             DEPOSITED (Process, Address,\
    \ Count)\nif the deposit doesn't succeed, or the remote host isn't debugging the\n\
    process.\nOp-Code 5 - RESUME (Process)_______ _ _ ______ _________\n     This\
    \ instructs the PDP-11 to allow the given  process  to  resume\nrunning.  The\
    \ PDP-11 should reply\n                     RESUMED (Process)\nbefore it starts\
    \ the process (in case it traps right away), or\n                   CAN'T RESUME\
    \ (Process)\nif the process wasn't stopped, or the remote host isn't debugging\
    \  the\nprocess.\nOp-Code 6 - EXAMINE (Process, Address, Count)_______ _ _ _______\
    \ _________ ________ ______\n     This instructs the PDP-11 to return Count bytes\
    \  from  the  given\nprocess address space starting at Address.  The PDP-11 should\
    \ reply\n       CONTENTS (Process, Address, Count, Byte String)\nif it can supply\
    \ the bytes, or\n           CAN'T EXAMINE (Process, Address, Count)\nif all the\
    \ bytes don't exist in the address space, or the remote  host\nisn't debugging\
    \ the process.\nOp-Code 7 - DEPOSIT STATE VECTOR (Process, Index, Byte Count,_______\
    \ _ _ _______ _____ ______ _________ ______ ____ ______\n            Byte String)\
    \            ____ _______\n     This instructs the PDP-11 to deposit the Byte\
    \ Count bytes in Byte\nString  into the state vector for the given process starting\
    \ with byte\nIndex.  See Figure 2 for the format of the state vector.   The  PDP-11\n\
    should reply\n     DEPOSITED STATE VECTOR (Process, Index, Byte Count)\nunless\
    \ the bytes won't all fit in the state vector or the remote  host\nisn't debugging\
    \ the process.  In this case the reply should be\n  CAN'T DEPOSIT STATE VECTOR\
    \ (Process, Index, Byte Count)\nOp-Code 10 - BREAK (Process, Address, Proceed\
    \ Count)_______ __ _ _____ _________ ________ _______ ______\n     This instructs\
    \ the PDP-11 to place a breakpoint at Address in the\n           BROKE (Process,\
    \ Address, Proceed Count)\nif it was able to plant the breakpoint and\n      \
    \  CAN'T BREAK (Proceed, Address, Proceed Count)\nif it was unable to plant the\
    \ breakpoint because the breakpoint tables\nfor  the  process are full, or because\
    \ the remote host isn't debugging\nthe process.  Note that the  PDP-11  must \
    \ keep  track  of  where  the\nbreakpoints are, the old contents of these locations\
    \ etc.\nOp-Code 11 - UNBREAK (Process, Address)_______ __ _ _______ _________\
    \ ________\n     This instructs the PDP-11 to remove the breakpoint  from  Address\n\
    in the process's address space and release all storage associated with\nit.  The\
    \ PDP-11 should reply\n                 UNBROKE (Process, Address)\nwhen the breakpoint\
    \ is removed, or\n              CAN'T UNBREAK (Process, Address)\nif the process\
    \ doens't have a breakpoint at Address or the remote host\nisn't debugging the\
    \ process.\nOp-Code 12 - SINGLE STEP (Process)_______ __ _ ______ ____ _________\n\
    \     This instructs the PDP-11 to let the given  process  execute  one\ninstruction,\
    \ using the Trace Trap feature.  The PDP-11 should reply\n                  SINGLE\
    \ STEPPING (Process)\nbefore the process is started, or\n                 CAN'T\
    \ SINGLE STEP (Process)\nif the process is already running or the remote host\
    \  isn't  debugging\nthe process.\nOp-Code 13 - PROCEED BPT (Process)_______ __\
    \ _ _______ ___ _________\n     This instructs the PDP-11 to allow the process\
    \ to proceed from  a\nbreak point trap (BPT, see below).  The PDP-11 should reply\n\
    \                  PROCEEDING BPT (Process)\nbefore allowing the process to proceed,\
    \ or\n                 CAN'T PROCEED BPT (Process)\nOp-Code 14 - CREATE PROCESS_______\
    \ __ _ ______ _______\n     This instructs the PDP-11 to  create  a  process \
    \ (with  its  own\nvirtual address space if the system will support such a feature).\
    \  The\nPDP-11 should reply\n                  CREATED PROCESS (Process)\nif it\
    \ could create a process, with the process-id in process.  If  the\nprocess  creation\
    \  failed  or  the system cannot create processes, the\nPDP-11 should reply\n\
    \                    CAN'T CREATE PROCESS.\nOnce a remote host has created a process\
    \ it is debugging it, that is a\n                       DEBUG (process)\nneed\
    \ not be done.\nOp-Code 15 - DESTROY PROCESS (Process)_______ __ _ _______ _______\
    \ _________\n     This instructs the PDP-11 to destroy the  given  process.  \
    \ After\nthe  process  is destroyed the remote host cannot, of course, debug it\n\
    so there is no need to do an\n                    END DEBUG (Process).\nThe PDP-11\
    \ should reply\n                 DESTROYED PROCESS (Process)\nif the process has\
    \ been destroyed.  If the system  doesn't  support  a\nmulti-process structure\
    \ or the remote host isn't debugging the process\nthe PDP-11 should reply\n  \
    \            CAN'T DESTROY PROCESS (Process).\n                 Asynchronous Stop\
    \ Replies                 ____________ ____ _______\n     These replies (op-code\
    \ between 100 and 177 octal) are sent by the\nPDP-11  wherever a process being\
    \ debugged stops running for any reason\nother than in response to the\n     \
    \                  STOP (Process)\nOp-Code 100 - TRAP (Process, Reason, 0, STATE\
    \ VECTOR)_______ ___ _ ____ _________ _______ __ _____ _______\n     This informs\
    \ the remote host that a  process  has  \"trapped\",  or\nterminated abnormally.\
    \  The reason is a system error code, or could be\na trap vector address in the\
    \ stand-alone case.\nOp-Code 101 - HALT (Process, 0,0, STATE VECTOR)_______ ___\
    \ _ ____ _________ ____ _____ _______\n     This  informs  the  remote  host \
    \ that  the  given  process   has\nterminated normally.  \nOp-Code 102 - BPT (Process,\
    \ 0, 0, STATE VECTOR)_______ ___ _ ___ _________ __ __ _____ _______\n     This\
    \ informs the remote host that the given  process  has  hit  a\nbreakpoint trap.\n\
    Op-Code 103 - TTRAP (Process, 0, 0, STATE VECTOR)_______ ___ _ _____ _________\
    \ __ __ _____ _______\n     This informs the remote host that the given  process\
    \  has  hit  a\ntrace trap, i.e.  has just executed one instruction in response\
    \ to the\n                          Figure 1\n             FORMAT OF NETWORK DEBUGGER\
    \ MESSAGES\n                    ----------------\n                   | TYPE |\
    \ HOST    |\n                    ----------------\n                   | LINK |\
    \ STYPE   |\n                    ----------------\n                   | CMD  |\
    \  PID    |\n                    ----------------\n                   |    ARG1\
    \        |\n                    ----------------\n                   |    ARG2\
    \        |\n                    ----------------\n     TYPE -- The HOST-IMP/IMP-HOST\
    \ message type, should\n             always be zero.\n     HOST -- The source\
    \ host ID.\n     LINK -- The debugger link.\n    STYPE -- The message subtype,\
    \ always zero.\n      CMD -- The debugger command op-code, excess 100 for\n  \
    \           asynchronous reply's, excess 200 for \"can't\"\n             reply's.\n\
    \      PID -- Process ID of process being debugged.\n     ARG1 -- The first argument\
    \ of the command.\n                          Figure 2\n                  FORMAT\
    \ OF STATE VECTORS\n                      ------------\n                     |\
    \    R0      |\n                      ------------\n                     |   \
    \ R1      |\n                      ------------\n                     |    R2\
    \      |\n                      ------------\n                     |   ...   \
    \   |\n                      ------------\n                     |    PC      |\n"
