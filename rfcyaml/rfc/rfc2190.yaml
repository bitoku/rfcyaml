- title: __initial_text__
  contents:
  - '               RTP Payload Format for H.263 Video Streams

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the payload format for encapsulating an\
    \ H.263\n   bitstream in the Real-Time Transport Protocol (RTP). Three modes are\n\
    \   defined for the H.263 payload header. An RTP packet can use one of\n   the\
    \ three modes for H.263 video streams depending on the desired\n   network packet\
    \ size and H.263 encoding options employed. The shortest\n   H.263 payload header\
    \ (mode A) supports fragmentation at Group of\n   Block (GOB) boundaries. The\
    \ long H.263 payload headers (mode B and C)\n   support fragmentation at Macroblock\
    \ (MB) boundaries.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document describes a scheme to packetize an H.263 video\
    \ stream\n   for transport using RTP [1]. H.263 video stream is defined by ITU-T\n\
    \   Recommendation H.263 (referred to as H.263 in this document) [4] for\n   video\
    \ coding at very low data rates. RTP is defined by the Internet\n   Engineering\
    \ Task Force (IETF) to provide end-to-end network transport\n   functions suitable\
    \ for applications transmitting real-time data over\n   multicast or unicast network\
    \ services.\n"
- title: 2. Definitions
  contents:
  - "2. Definitions\n   The following definitions apply in this document:\n   CIF:\
    \ Common Intermediate Format. For H.263, a CIF picture has 352 x\n   288 pixels\
    \ for luminance, and 176 x 144 pixels for chrominance.\n   QCIF: Quarter CIF source\
    \ format with 176 x 144 pixels for luminance\n   and 88 x 72 pixels for chrominance.\n\
    \   Sub-QCIF:  picture source format with 128 x 96 pixels for luminance\n   and\
    \ 64 x 48 pixels for chrominance.\n   4CIF: Picture source format with 704 x 576\
    \ pixels for luminance and\n   352 x 288 pixels for chrominance.\n   16CIF: Picture\
    \ source format with 1408 x 1152 pixels for luminance\n   and 704 x 576 pixels\
    \ for chrominance.\n   GOB: For H.263, a Group of Blocks (GOB) consists of  k*16\
    \ lines,\n   where k depends on the picture format (k=1 for QCIF, CIF and sub-\n\
    \   QCIF; k=2 for 4CIF and k=4 for 16CIF).\n   MB: A macroblock (MB) contains\
    \ four blocks of luminance and the\n   spatially corresponding two blocks of chrominance.\
    \ Each block\n   consists of 8x8 pixels. For example, there are eleven MBs in\
    \ a GOB in\n   QCIF format and twenty two MBs in a GOB in CIF format.\n"
- title: 3. Design Issues for Packetizing H.263 Bitstreams
  contents:
  - "3. Design Issues for Packetizing H.263 Bitstreams\n   H.263 is based on the ITU-T\
    \ Recommendation H.261 [2] (referred to as\n   H.261 in this document). Compared\
    \ to H.261, H.263 employs similar\n   techniques to reduce both temporal and spatial\
    \ redundancy, but there\n   are several major differences between the two algorithms\
    \ that affect\n   the design of packetization schemes significantly. This section\n\
    \   summarizes those differences.\n"
- title: 3.1 Optional Features of H.263
  contents:
  - "3.1 Optional Features of H.263\n   In addition to the basic source coding algorithms,\
    \ H.263 supports\n   four negotiable coding options to improve performance: Advanced\n\
    \   Prediction, PB-frames, Syntax-based Arithmetic Coding, and\n   Unrestricted\
    \ Motion Vectors. They can be used in any combination.\n   Advanced Prediction(AP):\
    \ One or four motion vectors can be used for\n   some macroblocks in a frame.\
    \ This feature makes recovery from packet\n   loss difficult, because more redundant\
    \ information has to be\n   preserved at the beginning of a packet when fragmenting\
    \ at a\n   macroblock boundary.\n   PB-frames:  Two frames (a P frame and a B\
    \ frame) are coded into one\n   bitstream with macroblocks from the two frames\
    \ interleaved. From a\n   packetization point of view, a MB from the P frame and\
    \ a MB from the\n   B frame must be treated together because each MB for the B\
    \ frame is\n   coded based on the corresponding MB for the P frame. A means must\
    \ be\n   provided to ensure proper rendering of two frames in the right order.\n\
    \   Also, if part of this combined bitstream is lost, it will affect both\n  \
    \ frames, and possibly more.\n   Syntax-based Arithmetic Coding (SAC): When the\
    \ SAC option is used,\n   the resultant run-value pair after quantization of Discrete\
    \ Cosine\n   Transform (DCT) coefficients will be coded differently from Huffman\n\
    \   codes, but the macroblock hierarchy will be preserved. Since context\n   variables\
    \ are only synchronized after fixed length codes in the\n   bitstream, any fragmentation\
    \ starting at variable length codes will\n   result in difficulty in decoding\
    \ in the presence of packet loss\n   without carrying the values of all the context\
    \ variables in each\n   H.263 payload header.\n   The Unrestricted motion vectors\
    \ feature allows large range of motion\n   vectors to improve performance of motion\
    \ compensation for inter-coded\n   pictures. This option also affects packetization\
    \ because it uses\n   larger range of motion vectors than normal.\n   To enable\
    \ proper decoding of packets received, without dependency on\n   previous packets,\
    \ the use of these optional features is signaled in\n   the H.263 payload header,\
    \ as described in Section 5.\n"
- title: 3.2 GOB Numbering
  contents:
  - "3.2 GOB Numbering\n   In H.263, each picture is divided into groups of blocks\
    \ (GOB). GOBs\n   are numbered according to a vertical scan of a picture, starting\
    \ with\n   the top GOB and ending with the bottom GOB. In contrast, a GOB in\n\
    \   H.261 is composed of three rows of 16x16 MB for QCIF, and three\n   half-rows\
    \ of MBs for CIF. A GOB is divided into macroblocks in H.263\n   and the definition\
    \ of the macroblocks are the same as in H.261.\n   Each GOB in H.263 can have\
    \ a fixed GOB header, but the use of the\n   header is optional. If the GOB header\
    \ is present, it may or may not\n   start on a byte boundary. Byte alignment can\
    \ be achieved by proper\n   bit stuffing by the encoder, but it is not required\
    \ by the H.263\n   bitstream specification [4].\n   In summary, a GOB in H.263\
    \ is defined and coded with finer\n   granularity but with the same source format,\
    \ resulting in more\n   flexibility for packetization than with H.261.\n"
- title: 3.3 Motion Vector Encoding
  contents:
  - "3.3 Motion Vector Encoding\n   Differential coding is used to code motion vectors\
    \ as variable length\n   codes. Unlike in H.261, where each motion vector is predicted\
    \ from\n   the previous MB in the GOB, H.263 employs a more flexible prediction\n\
    \   scheme, where one or three candidate predictors could be used\n   depending\
    \ on the presence of GOB headers.\n   If the GOB header is present in a GOB, motion\
    \ vectors are coded with\n   reference to MBs in the current GOB only. If a GOB\
    \ header is not\n   present in the current GOB, three motion vectors must be available\
    \ to\n   decode one macroblock, where two of them might come from the previous\n\
    \   GOB. To correctly decode a whole inter-coded GOB, all the motion\n   vectors\
    \ for MBs in the previous GOB  must be available to compute the\n   predictors\
    \ or the predictors themselves must be present. The optional\n   use of three\
    \ motion vector predictors can be a major problem for a\n   packetization scheme\
    \ like the one defined for H.261 when packetizing\n   at MB boundaries [5].\n\
    \   Consider the case that a packet starts with a MB but the GOB header\n   is\
    \ not present. If the previous packet is lost, then all the motion\n   vectors\
    \ needed to predict the motion vectors for the MBs in the\n   current GOB are\
    \ not available. In order to decode the received MBs\n   correctly, all the motion\
    \ vectors for the previous GOB or the motion\n   vector predictors would have\
    \ to be duplicated at the beginning of the\n   packet. This kind of duplication\
    \ would be very expensive and\n   unacceptable in terms of bandwidth overhead.\n\
    \   The encoding strategy of each H.263 CODEC (CODer and DECoder)\n   implementation\
    \ is beyond the scope of this document, even though it\n   has significant effect\
    \ on visual quality in the presence of packet\n   loss. However, we strongly recommend\
    \ use of the GOB header for every\n   GOB at the beginning of a packet to address\
    \ this problem.\n   Similar problems exist because of cross-GOB data dependency\
    \ related\n   to motion vectors, but they can not be addressed by using the GOB\n\
    \   header. For 16CIF and 4CIF pictures, a GOB contains more than one row\n  \
    \ of MBs. If a GOB can not fit in one RTP packet, and the first packet\n   containing\
    \ the GOB header is lost, then MBs in the second packet can\n   not compute motion\
    \ vectors correctly, because they are coded relative\n   to data in the lost packet.\
    \ Similarly,  when OBMC (Overlapped Block\n   Motion Compensation) [4] in Advanced\
    \ Prediction mode is used, motion\n   compensation for some MBs in one GOB could\
    \ use motion vectors of MBs\n   in previous GOB regardless of the presence of\
    \ GOB header. When MBs\n   that are used to decode received MBs are lost, those\
    \ received MBs can\n   not be decoded correctly. Each implementation of the method\
    \ described\n   in this document should take these limitations into account.\n"
- title: 3.4 Macroblock Address
  contents:
  - "3.4 Macroblock Address\n   As specified by H.261, a macroblock address (MBA)\
    \ is encoded with a\n   variable length code to indicate the position of a macroblock\
    \ within\n   a group of MBs in H.261 bitstreams. H.263 does not code the MBA\n\
    \   explicitly, but the macroblock address within a GOB is necessary to\n   recover\
    \ from packet loss when fragmenting at MB boundaries.\n   Therefore, this information\
    \ must be included in the H.263 payload\n   header for modes (mode B and mode\
    \ C as described in Section 5) that\n   allow packetization at MB boundaries.\n"
- title: 4. Usage of RTP
  contents:
  - "4. Usage of RTP\n   When transmitting H.263 video streams over the Internet,\
    \ the output\n   of the encoder can be packetized directly. For every video frame,\
    \ the\n   H.263 bitstream itself is carried in the RTP payload without\n   alteration,\
    \ including the picture start code, the entire picture\n   header, in addition\
    \ to any fixed length codes and variable length\n   codes.  In addition, the output\
    \ of the encoder is packetized without\n   adding the framing information specified\
    \ by H.223 [6]. Therefore\n   multiplexing audio and video signals in the same\
    \ packet is not\n   accommodated, as UDP and RTP provide a much more efficient\
    \ way to\n   achieve multiplexing.\n   RTP does not guarantee a reliable and orderly\
    \ data delivery service,\n   so a packet might get lost in the network. To achieve\
    \ a best-effort\n   recovery from packet loss, the decoder needs assistance to\
    \ proceed\n   with decoding of other packets that are received. Thus it is\n \
    \  desirable to be able to process each packet independent of other\n   packets.\
    \ Some frame level information is included in each packet,\n   such as source\
    \ format and flags for optional features to assist the\n   decoder in operating\
    \ correctly and efficiently in presence of packet\n   loss. The flags for H.263\
    \ optional features also provide information\n   about coding options used in\
    \ H.263 video bitstreams that can be used\n   by session management tools.\n \
    \  H.263 video bitstreams will be carried as payload data within RTP\n   packets.\
    \ A new H.263 payload header is defined in section 5 on the\n   H.263 payload\
    \ header. This section defines the usage of RTP fixed\n   header and H.263 video\
    \ packet structure.\n"
- title: 4.1 RTP Header Usage
  contents:
  - "4.1 RTP Header Usage\n   Each RTP packet starts with a fixed RTP header [1].\
    \ The following\n   fields of the RTP fixed header are used for H.263 video streams:\n\
    \   Marker bit (M bit): The Marker bit of the RTP fixed header is set to\n   1\
    \ when the current packet carries the end of current frame; set to 0\n   otherwise.\n\
    \   Payload Type (PT): The Payload Type shall specify H.263 video payload\n  \
    \ format using the value specified by the RTP profile in use, for\n   example\
    \ RFC 1890 [3].\n   Timestamp: The RTP timestamp encodes the sampling instant\
    \ of the\n   video frame contained in the RTP data packet. The RTP timestamp may\n\
    \   be the same  on successive packets if a video frame occupies more\n   than\
    \ one packet. For H.263 video streams, the RTP timestamp is based\n   on a 90\
    \ kHz clock, the same as the RTP timestamp for H.261 video\n   streams [5].\n"
- title: 4.2 Video Packet Structure
  contents:
  - "4.2 Video Packet Structure\n   For each RTP packet, the RTP fixed header is followed\
    \ by the H.263\n   payload header, which is followed by the standard H.263 compressed\n\
    \   bitstream [4].\n   The size of the H.263 payload header is variable depending\
    \ on modes\n   used as detailed in the next section. The layout of an RTP H.263\n\
    \   video packet is shown as:\n    0                   1                   2 \
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 RTP header                                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 H.263 payload header                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 H.263 bitstream                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 5. H.263 Payload Header
  contents:
  - "5. H.263 Payload Header\n   For H.263 video streams, each RTP packet carries\
    \ only one H.263 video\n   packet. The H.263 payload header is always present\
    \ for each H.263\n   video packet.\n   Three formats (mode A, mode B and mode\
    \ C) are defined for H.263\n   payload header. In mode A, an H.263 payload header\
    \ of four bytes is\n   present before actual compressed H.263 video bitstream\
    \ in a packet.\n   It allows fragmentation at GOB boundaries. In mode B, an eight\
    \ byte\n   H.263 payload header is used and each packet starts at MB boundaries\n\
    \   without the PB-frames option. Finally, a twelve byte H.263 payload\n   header\
    \ is defined in mode C to support fragmentation at MB boundaries\n   for frames\
    \ that are coded with the PB-frames option.\n   The mode of each H.263 payload\
    \ header is indicated by the F and P\n   fields in the header. Packets of different\
    \ modes can be intermixed.\n   All client application are required to be able\
    \ to receive packets in\n   any mode, but decoding of mode C packets is optional\
    \ because the PB-\n   frames feature is optional.\n   In this section, the H.263\
    \ payload format is shown as rows of 32-bit\n   words. Each word is transmitted\
    \ in network byte order. Whenever a\n   field represents a numeric value, the\
    \ most significant bit is at the\n   left of the field.\n"
- title: 5.1 Mode A
  contents:
  - "5.1 Mode A\n   In this mode, an H.263 bitstream will be packetized on a GOB boundary\n\
    \   or a picture boundary. Mode A packets always start with the H.263\n   picture\
    \ start code [4] or a GOB, but do not necessarily contain\n   complete GOBs. Four\
    \ bytes are used for the mode A H.263 payload\n   header. The H.263 payload header\
    \ definition for mode A is shown as\n   follows with F=0. Mode A packets are allowed\
    \ to start at a GOB\n   boundary even if no GOB header is present in the bitstream\
    \ for the\n   GOB.  However, such use is discouraged due to the dependencies it\n\
    \   creates across GOB boundaries, as described in Section 3.3.\n    0       \
    \            1                   2                   3\n    0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |F|P|SBIT |EBIT | SRC |I|U|S|A|R      |DBQ| TRB |    TR         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   F: 1 bit\n   The flag bit indicates the mode of the payload header. F=0, mode\
    \ A;\n   F=1, mode B or mode C depending on P bit defined below.\n   P: 1 bit\n\
    \   Optional PB-frames mode as defined by the H.263 [4]. \"0\" implies\n   normal\
    \ I or P frame, \"1\" PB-frames. When F=1, P also indicates modes:\n   mode B\
    \ if P=0, mode C if P=1.\n   SBIT: 3 bits\n   Start bit position specifies number\
    \ of most significant bits that\n   shall be ignored in the first data byte.\n\
    \   EBIT: 3 bits\n   End bit position specifies number of least significant bits\
    \ that\n   shall be ignored in the last data byte.\n   SRC : 3 bits\n   Source\
    \ format, bit 6,7 and 8 in PTYPE defined by H.263 [4], specifies\n   the resolution\
    \ of the current picture.\n   I:  1 bit.\n   Picture coding type, bit 9 in PTYPE\
    \ defined by H.263[4], \"0\" is\n   intra-coded, \"1\" is inter-coded.\n   U:\
    \ 1 bit\n   Set to 1 if the Unrestricted Motion Vector option, bit 10 in PTYPE\n\
    \   defined by H.263 [4] was set to 1 in the current picture header,\n   otherwise\
    \ 0.\n   S: 1 bit\n   Set to 1 if the Syntax-based Arithmetic Coding option, bit\
    \ 11 in\n   PTYPE defined by the H.263 [4] was set to 1 for current picture\n\
    \   header, otherwise 0.\n   A: 1 bit\n   Set to 1 if the Advanced Prediction\
    \ option, bit 12 in PTYPE defined\n   by H.263 [4] was set to 1 for current picutre\
    \ header, otherwise 0.\n   R: 4 bits\n   Reserved, must be set to zero.\n   DBQ:\
    \ 2 bits\n   Differential quantization parameter used to calculate quantizer for\n\
    \   the B frame based on quantizer for the P frame, when PB-frames option\n  \
    \ is used. The value should be the same as DBQUANT defined by H.263\n   [4]. \
    \ Set to zero if PB-frames option is not used.\n   TRB: 3 bits\n   Temporal Reference\
    \ for the B frame as defined by H.263 [4]. Set to\n   zero if PB-frames option\
    \ is not used.\n   TR: 8 bits\n   Temporal Reference for the P frame as defined\
    \ by H.263 [4]. Set to\n   zero if the PB-frames option is not used.\n"
- title: 5.2 Mode B
  contents:
  - "5.2 Mode B\n   In this mode, an H.263 bitstream can be fragmented at MB boundaries.\n\
    \   Whenever a packet starts at a MB boundary, this mode shall be used\n   without\
    \ PB-frames option. Mode B packets are intended for a GOB whose\n   size is larger\
    \ than the maximum packet size allowed in the underlying\n   protocol, thus making\
    \ it impossible to fit one or more complete GOBs\n   in a packet. This mode can\
    \ only be used without the PB-frames option.\n   Mode C as defined in the next\
    \ section can be used to fragment H.263\n   bitstreams at MB boundaries with the\
    \ PB-frames option.  The H.263\n   payload header definition for mode B is shown\
    \ as follows with F=1 and\n   P=0:\n    0                   1                \
    \   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |F|P|SBIT |EBIT | SRC | QUANT   |  GOBN   |   MBA           |R  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |I|U|S|A| HMV1        | VMV1        | HMV2        | VMV2        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The following fields are defined the same as in mode A: F, P, SBIT,\n   EBIT,\
    \ SRC, I, U, S and A. Other fields are defined as follows:\n   QUANT: 5 bits\n\
    \   Quantization value for the first MB coded at the starting of the\n   packet.\
    \  Set to 0 if the packet begins with a GOB header. This is the\n   equivalent\
    \ of GQUANT defined by the H.263 [4].\n   GOBN: 5 bits\n   GOB number in effect\
    \ at the start of the packet. GOB number is\n   specified differently for different\
    \ resolutions. See H.263 [4] for\n   details.\n   MBA: 9 bits\n   The address\
    \ within the GOB of the first MB in the packet, counting\n   from zero in scan\
    \ order. For example, the third MB in any GOB is\n   given MBA = 2.\n   HMV1,\
    \ VMV1: 7 bits each.\n   Horizontal and vertical motion vector predictors for\
    \ the first MB in\n   this packet [4]. When four motion vectors are used for current\
    \ MB\n   with advanced prediction option, these would be the motion vector\n \
    \  predictors for block number 1 in the MB. Each 7 bits field encodes a\n   motion\
    \ vector predictor in half pixel resolution as a 2's complement\n   number.\n\
    \   HMV2, VMV2: 7 bits each.\n   Horizontal and vertical motion vector predictors\
    \ for block number 3\n   in the first MB in this packet when four motion vectors\
    \ are used with\n   the advanced prediction option. This is needed because block\
    \ number 3\n   in the MB needs different motion vector predictors from other blocks\n\
    \   in the MB. These two fields are not used when the MB only has one\n   motion\
    \ vector. See the H.263 [4] for block organization in a\n   macroblock.  Each\
    \ 7 bits field encodes a motion vector predictor in\n   half pixel resolution\
    \ as a 2's complement number.\n   R : 2 bits\n   Reserved, must be set to zero.\n"
- title: 5.3 Mode C
  contents:
  - "5.3 Mode C\n   In this mode, an H.263 bitstream is fragmented at MB boundaries\
    \ of P\n   frames with the PB-frames option. It is intended for those GOBs whose\n\
    \   sizes are larger than the maximum packet size allowed in the\n   underlying\
    \ protocol when PB-frames option is used. The H.263 payload\n   header definition\
    \ for mode C is shown as follows with F=1 and P=1:\n    0                   1\
    \                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |F|P|SBIT |EBIT | SRC | QUANT   |  GOBN   |   MBA           |R  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |I|U|S|A| HMV1        | VMV1        | HMV2        | VMV2        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | RR                                  |DBQ| TRB |    TR         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The following fields are defined the same as in mode B: F, P, SBIT,\n   EBIT,\
    \ SRC, QUANT, GOBN, MBA, R, I, U, S, A, HMV1, VMV1, HMV2, VMV2.\n   The rest of\
    \ the fields (TR, DBQ, TRB) are defined the same as in mode\n   A, except field\
    \ RR. The RR field takes 19 bits, and is currently\n   reserved.  It must be set\
    \ to zero.\n"
- title: 5.4 Selection of Modes for the H.263 Payload Header
  contents:
  - "5.4 Selection of Modes for the H.263 Payload Header\n   Packets carrying H.263\
    \ video streams with different modes can be\n   intermixed. The modes shall be\
    \ selected carefully based on network\n   packet size, H.263 coding options and\
    \ underlying network protocols.\n   More specifically, mode A shall be used for\
    \ packets starting with a\n   GOB or the H.263 picture start code [4], and mode\
    \ B or C shall be\n   used whenever a packet has to start at a MB boundary. Mode\
    \ B or C are\n   necessary for those GOBs with sizes larger than network packet\
    \ size.\n   We strongly recommend use of mode A whenever possible. The major\n\
    \   advantage of mode A over mode B and C is its simplicity. The H.263\n   payload\
    \ header is smaller than mode B and C. Transmission overhead is\n   reduced and\
    \ the savings may be very significant when working with\n   very low data rates\
    \ or relatively small packet sizes.\n   Another advantage of mode A is that it\
    \ simplifies error recovery in\n   the presence of packet loss. The internal state\
    \ of a decoder can be\n   recovered at GOB boundaries instead of having to synchronize\
    \ with MBs\n   as in mode B and C. The GOB headers and the picture start code\
    \ are\n   easy to identify,  and their presence will normally cause a H.263\n\
    \   decoder to re-synchronize its internal states.\n   Finally, we would like\
    \ to stress that recovery from packet loss\n   depends on a decoder's ability\
    \ to use the information provided in the\n   H.263 payload header within RTP packets.\n"
- title: 6. Limitations
  contents:
  - "6. Limitations\n   The packetization method described in this document applies\
    \ to the\n   1996 version of H.263. It may not be applicable to bitstreams with\n\
    \   features added after that.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are addressed by RTP [1].  This memo\
    \ does not bring\n   up any additional security issues.\n"
- title: 7. Acknowledgments
  contents:
  - "7. Acknowledgments\n   The author would like to thank the following people for\
    \ their\n   valuable comments: Linda S. Cline, Christian Maciocco, Mojy\n   Mirashrafi,\
    \ Phillip Lantz, Steve Casner, Gary Sullivan, and Sassan\n   Pejhan.\n"
- title: 8. References
  contents:
  - '8. References

    '
- title: '[1] Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson,'
  contents:
  - "[1] Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson,\n    \"RTP:\
    \ A Transport Protocol for Real-Time Applications\", RFC 1889,\n    January 1996.\n"
- title: '[2] International Telecommunication Union.'
  contents:
  - "[2] International Telecommunication Union.\n    Video Codec for Audiovisual Services\
    \ at  p x 64 kbits/s,\n    ITU-T Recommendation H.261, 1993.\n"
- title: '[3] Schulzrinne, H.,'
  contents:
  - "[3] Schulzrinne, H.,\n    \"RTP Profile for Audio and Video Conference with Minimal\n\
    \    Control\", RFC 1890,\n    January 1996.\n"
- title: '[4] International Telecommunication Union.'
  contents:
  - "[4] International Telecommunication Union.\n    Video Coding for Low Bitrate\
    \ Communication, ITU-T Recommendation\n    H.263, 1996\n"
- title: '[5] Turletti, T., and C. Huitema,'
  contents:
  - "[5] Turletti, T., and C. Huitema,\n    \"RTP Payload Format for H.261 Video Streams\"\
    , RFC 2032,\n    October 1996.\n"
- title: '[6] International Telecommunication Union.'
  contents:
  - "[6] International Telecommunication Union.\n    Multiplexing Protocol for Low\
    \ Bitrate Multimedia Communication,\n    ITU-T Recommendation H.223, 1995.\n"
- title: 7. Author's Address
  contents:
  - "7. Author's Address\n   C. \"Chad\"  Zhu\n   Mail Stop: JF3-202\n   Intel Corporation\n\
    \   2111 N.E. 25th Avenue\n   Hillsboro, OR 97124\n   USA\n   EMail: czhu@ibeam.intel.com\n\
    \   Phone: (503) 264-6008\n   Fax: (503) 264-1805\n"
