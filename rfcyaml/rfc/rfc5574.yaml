- contents:
  - '                 RTP Payload Format for the Speex Codec

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   Speex is an open-source voice codec suitable for use in VoIP (Voice\n
    \  over IP) type applications.  This document describes the payload\n   format
    for Speex-generated bit streams within an RTP packet.  Also\n   included here
    are the necessary details for the use of Speex with the\n   Session Description
    Protocol (SDP).\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Terminology .....................................................3\n   3.
    RTP Usage for Speex .............................................3\n      3.1.
    RTP Speex Header Fields ....................................3\n      3.2. RTP
    Payload Format for Speex ...............................4\n      3.3. Speex Payload
    ..............................................4\n      3.4. Example Speex Packet
    .......................................5\n      3.5. Multiple Speex Frames in
    an RTP Packet .....................5\n   4. IANA Considerations .............................................6\n
    \     4.1. Media Type Registration ....................................6\n           4.1.1.
    Registration of Media Type Audio/Speex ..............6\n   5. SDP Usage of Speex
    ..............................................8\n      5.1. Example Supporting
    All Modes, Prefer Mode 4 ...............10\n      5.2. Example Supporting Only
    Modes 3 and 5 .....................10\n      5.3. Example with Variable Bit-Rate
    and Comfort Noise ..........10\n      5.4. Example with Voice Activity Detection
    .....................11\n      5.5. Example with Multiple Sampling Rates ......................11\n
    \     5.6. Example with Ptime and Multiple Speex Frames ..............11\n      5.7.
    Example with Complete Offer/Answer Exchange ...............12\n   6. Implementation
    Guidelines ......................................12\n   7. Security Considerations
    ........................................12\n   8. Acknowledgments ................................................13\n
    \  9. References .....................................................13\n      9.1.
    Normative References ......................................13\n      9.2. Informative
    References ....................................13\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Speex is based on the Code Excited Linear Prediction [CELP]
    encoding\n   technique with support for either narrowband (nominal 8 kHz),\n   wideband
    (nominal 16 kHz), or ultra-wideband (nominal 32 kHz).  The\n   main characteristics
    can be summarized as follows:\n   o  Free software/open-source\n   o  Integration
    of wideband and narrowband in the same bit-stream\n   o  Wide range of bit-rates
    available\n   o  Dynamic bit-rate switching and variable bit-rate (VBR)\n   o
    \ Voice Activity Detection (VAD, integrated with VBR)\n   o  Variable complexity\n
    \  The Speex codec supports a wide range of bit-rates from 2.15 kbit/s\n   to
    44 kbit/s.  In some cases however, it may not be possible for an\n   implementation
    to include support for all rates (e.g., because of\n   bandwidth or RAM or CPU
    constraints).  In those cases, to be\n   compliant with this specification, implementations
    MUST support at\n   least narrowband (8 kHz) encoding and decoding at 8 kbit/s
    bit-rate\n   (narrowband mode 3).  Support for narrowband at 15 kbit/s (narrowband\n
    \  mode 5) is RECOMMENDED and support for wideband at 27.8 kbit/s\n   (wideband
    mode 8) is also RECOMMENDED.  The sampling rate MUST be 8,\n   16 or 32 kHz.  This
    specification defines only single channel audio\n   (mono).\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC2119 [RFC2119] and\n
    \  indicate requirement levels for compliant RTP implementations.\n"
  title: 2.  Terminology
- contents:
  - '3.  RTP Usage for Speex

    '
  - contents:
    - "3.1.  RTP Speex Header Fields\n   The RTP header is defined in the RTP specification
      [RFC3550].  This\n   section defines how fields in the RTP header are used.\n
      \     Payload Type (PT):  The assignment of an RTP payload type for this\n         packet
      format is outside the scope of this document; it is\n         specified by the
      RTP profile under which this payload format is\n         used, or signaled dynamically
      out-of-band (e.g., using SDP).\n      Marker (M) bit:  The M bit is set to one
      on the first packet sent\n         after a silence period, during which packets
      have not been\n         transmitted contiguously.\n      Extension (X) bit:
      \ Defined by the RTP profile used.\n      Timestamp:  A 32-bit word that corresponds
      to the sampling instant\n         for the first frame in the RTP packet.\n"
    title: 3.1.  RTP Speex Header Fields
  - contents:
    - "3.2.  RTP Payload Format for Speex\n   The RTP payload for Speex has the format
      shown in Figure 1.  No\n   additional header fields specific to this payload
      format are\n   required.  For RTP-based transportation of Speex-encoded audio,
      the\n   standard RTP header [RFC3550] is followed by one or more payload data\n
      \  blocks.  An optional padding terminator may also be used.\n       0                   1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                         RTP Header                            |\n      +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
      \     |                 one or more frames of Speex ....              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |        one or more frames of Speex ....       |    padding    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                   Figure 1: RTP Payload for Speex\n"
    title: 3.2.  RTP Payload Format for Speex
  - contents:
    - "3.3.  Speex Payload\n   For the purposes of packetizing the bit stream in RTP,
      it is only\n   necessary to consider the sequence of bits as output by the Speex\n
      \  encoder [SPEEX], and present the same sequence to the decoder.  The\n   payload
      format described here maintains this sequence.\n   A typical Speex frame, encoded
      at the maximum bit-rate, is\n   approximately 110 octets and the total number
      of Speex frames SHOULD\n   be kept less than the path MTU to prevent fragmentation.
      \ Speex\n   frames MUST NOT be fragmented across multiple RTP packets.\n   The
      Speex frames must be placed starting with the oldest frame and\n   then continue
      consecutively in time.\n   An RTP packet MAY contain Speex frames of the same
      bit-rate or of\n   varying bit-rates, since the bit-rate for a frame is conveyed
      in-band\n   with the signal.\n   The encoding and decoding algorithm can change
      the bit-rate at any 20\n   msec frame boundary, with the bit-rate change notification
      provided\n   in-band with the bit stream.  Each frame contains both sampling
      rate\n   (narrowband, wideband, or ultra-wideband) and \"mode\" (bit-rate)\n
      \  information in the bit stream.  No out-of-band notification is\n   required
      for the decoder to process changes in the bit-rate sent by\n   the encoder.\n
      \  The sampling rate MUST be either 8000 Hz, 16000 Hz, or 32000 Hz.\n   The
      RTP payload MUST be padded to provide an integer number of octets\n   as the
      payload length.  These padding bits are LSB-aligned (Least\n   Significant Bit)
      in network octet order and consist of a 0 followed\n   by all ones (until the
      end of the octet).  This padding is only\n   required for the last frame in
      the packet, and only to ensure the\n   packet contents end on an octet boundary.\n"
    title: 3.3.  Speex Payload
  - contents:
    - "3.4.  Example Speex Packet\n   In the example below, we have a single Speex
      frame with 5 bits of\n   padding to ensure the packet size falls on an octet
      boundary.\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                      RTP Header                               |\n     +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
      \    |                        ..speex data..                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                        ..speex data..               |0 1 1 1 1|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    title: 3.4.  Example Speex Packet
  - contents:
    - "3.5.  Multiple Speex Frames in an RTP Packet\n   Below is an example of two
      Speex frames contained within one RTP\n   packet.  The Speex frame length in
      this example falls on an octet\n   boundary so there is no padding.\n   The
      Speex decoder [SPEEX] can detect the bit-rate from the payload\n   and is responsible
      for detecting the 20 msec boundaries between each\n   frame.\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                      RTP Header                               |\n     +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
      \    |                     ..speex frame 1..                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ..speex frame 1..       |      ..speex frame 2..        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                      ..speex frame 2..                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    title: 3.5.  Multiple Speex Frames in an RTP Packet
  title: 3.  RTP Usage for Speex
- contents:
  - "4.  IANA Considerations\n   This document defines the Speex media type.\n"
  - contents:
    - "4.1.  Media Type Registration\n   This section describes the media types and
      names associated with this\n   payload format.  The section registers the media
      types, as per RFC\n   4288 [RFC4288].\n"
    - contents:
      - "4.1.1.  Registration of Media Type Audio/Speex\n   Media type name: audio\n
        \  Media subtype name: speex\n   Required parameters:\n      rate:  RTP timestamp
        clock rate, which is equal to the sampling\n         rate in Hz.  The sampling
        rate MUST be either 8000, 16000, or\n         32000.\n   Optional parameters:\n
        \     ptime:  SHOULD be a multiple of 20 msec [RFC4566]\n      maxptime:  SHOULD
        be a multiple of 20 msec [RFC4566]\n      vbr:  variable bit-rate - either
        'on', 'off', or 'vad' (defaults\n         to 'off').  If 'on', variable bit-rate
        is enabled.  If 'off',\n         disabled.  If set to 'vad', then constant
        bit-rate is used, but\n         silence will be encoded with special short
        frames to indicate a\n         lack of voice for that period.  This parameter
        is a preference\n         to the encoder.\n      cng:  comfort noise generation
        - either 'on' or 'off' (defaults to\n         'off').  If 'off', then silence
        frames will be silent; if 'on',\n         then those frames will be filled
        with comfort noise.  This\n         parameter is a preference to the encoder.\n
        \     mode:  Comma-separated list of supported Speex decoding modes, in\n
        \        order of preference.  The first is the most preferred and the\n         remaining
        is in decreasing order of preference.  The valid\n         modes are different
        for narrowband and wideband, and are\n         defined as follows:\n         *
        \ {1,2,3,4,5,6,7,8,any} for narrowband\n         *  {0,1,2,3,4,5,6,7,8,9,10,any}
        for wideband and ultra-wideband\n         The 'mode' parameters may contain
        multiple values.  In this\n         case, the remote party SHOULD configure
        its encoder using the\n         first supported mode provided.  When 'any'
        is used, the offerer\n         indicates that it supports all decoding modes.
        \ The 'mode'\n         parameter value MUST always be quoted.  If the 'mode'
        parameter\n         is not provided, the mode value is considered to be equivalent\n
        \        to 'mode=\"3,any\"' in narrowband and 'mode=\"8,any\"' in wideband\n
        \        and ultra-wideband.  Note that each Speex frame does contain\n         the
        mode (or bit-rate) that should be used to decode it.  Thus,\n         an application
        MUST be able to decode any Speex frame unless\n         the SDP clearly specifies
        that some modes are not supported\n         (e.g., by not including 'mode=\"any\"').
        \ Indicating support for\n         a given set of decoding modes also implies
        that the\n         implementation support the same encoding modes.\n   Encoding
        considerations:\n      This media type is framed and binary, see Section 4.8
        in\n      [RFC4288].\n   Security considerations: See Section 6.\n   Interoperability
        considerations:\n      None.\n   Published specification:\n      RFC 5574.\n
        \  Applications that use this media type:\n      Audio streaming and conferencing
        applications.\n   Additional information: none.\n   Person and e-mail address
        to contact for further information:\n      Alfred E. Heggestad: aeh@db.org\n
        \  Intended usage: COMMON\n   Restrictions on usage:\n      This media type
        depends on RTP framing, and hence is only defined\n      for transfer via
        RTP [RFC3550].  Transport within other framing\n      protocols is not defined
        at this time.\n   Author: Alfred E. Heggestad\n   Change controller:\n      IETF
        Audio/Video Transport working group delegated from the IESG.\n"
      title: 4.1.1.  Registration of Media Type Audio/Speex
    title: 4.1.  Media Type Registration
  title: 4.  IANA Considerations
- contents:
  - "5.  SDP Usage of Speex\n   The information carried in the media type specification
    has a\n   specific mapping to fields in the Session Description Protocol (SDP)\n
    \  [RFC4566], which is commonly used to describe RTP sessions.  When SDP\n   is
    used to specify sessions employing the Speex codec, the mapping is\n   as follows:\n
    \  o  The media type (\"audio\") goes in SDP \"m=\" as the media name.\n   o  The
    media subtype (\"speex\") goes in SDP \"a=rtpmap\" as the encoding\n      name.
    \ The required parameter \"rate\" also goes in \"a=rtpmap\" as\n      the clock
    rate.\n   o  The parameters \"ptime\" and \"maxptime\" go in the SDP \"a=ptime\"
    and\n      \"a=maxptime\" attributes, respectively.\n   o  Any remaining parameters
    go in the SDP \"a=fmtp\" attribute by\n      copying them directly from the media
    type string as a semicolon-\n      separated list of parameter=value pairs.\n
    \  The tables below include the equivalence between modes and bit-rates\n   for
    narrowband, wideband, and ultra-wideband.  Also, the\n   corresponding \"Speex
    quality\" setting (see SPEEX_SET_QUALITY in the\n   Speex Codec Manual [SPEEX])
    is included as an indication.\n                  +------+---------------+-------------+\n
    \                 | mode | Speex quality |   bit-rate  |\n                  +------+---------------+-------------+\n
    \                 |   1  |       0       | 2.15 kbit/s |\n                  |
    \  2  |       2       | 5.95 kbit/s |\n                  |   3  |     3 or 4    |
    8.00 kbit/s |\n                  |   4  |     5 or 6    | 11.0 kbit/s |\n                  |
    \  5  |     7 or 8    | 15.0 kbit/s |\n                  |   6  |       9       |
    18.2 kbit/s |\n                  |   7  |      10       | 24.6 kbit/s |\n                  |
    \  8  |       1       | 3.95 kbit/s |\n                  +------+---------------+-------------+\n
    \                Table 1: Mode vs. Bit-Rate for Narrowband\n   +------+---------------+-------------------+------------------------+\n
    \  | mode | Speex quality | wideband bit-rate |     ultra wideband     |\n   |
    \     |               |                   |        bit-rate        |\n   +------+---------------+-------------------+------------------------+\n
    \  |   0  |       0       |    3.95 kbit/s    |       5.75 kbit/s      |\n   |
    \  1  |       1       |    5.75 kbit/s    |       7.55 kbit/s      |\n   |   2
    \ |       2       |    7.75 kbit/s    |       9.55 kbit/s      |\n   |   3  |
    \      3       |    9.80 kbit/s    |       11.6 kbit/s      |\n   |   4  |       4
    \      |    12.8 kbit/s    |       14.6 kbit/s      |\n   |   5  |       5       |
    \   16.8 kbit/s    |       18.6 kbit/s      |\n   |   6  |       6       |    20.6
    kbit/s    |       22.4 kbit/s      |\n   |   7  |       7       |    23.8 kbit/s
    \   |       25.6 kbit/s      |\n   |   8  |       8       |    27.8 kbit/s    |
    \      29.6 kbit/s      |\n   |   9  |       9       |    34.2 kbit/s    |       36.0
    kbit/s      |\n   |  10  |       10      |    42.2 kbit/s    |       44.0 kbit/s
    \     |\n   +------+---------------+-------------------+------------------------+\n
    \       Table 2: Mode vs. Bit-Rate for Wideband and Ultra-Wideband\n   The Speex
    parameters indicate the decoding capabilities of the agent,\n   and what the agent
    prefers to receive.\n   The Speex parameters in an SDP Offer/Answer exchange are
    completely\n   orthogonal, and there is no relationship between the SDP Offer
    and\n   the Answer.\n   Several Speex specific parameters can be given in a single
    a=fmtp\n   line provided that they are separated by a semicolon:\n             a=fmtp:97
    mode=\"1,any\";vbr=on\n   Some example SDP session descriptions utilizing Speex
    encodings\n   follow.\n"
  - contents:
    - "5.1.  Example Supporting All Modes, Prefer Mode 4\n   The offerer indicates
      that it wishes to receive a Speex stream at\n   8000 Hz, and wishes to receive
      Speex 'mode 4'.  It is important to\n   understand that any other mode might
      still be sent by remote party:\n   the device might have bandwidth limitation
      or might only be able to\n   send 'mode=\"3\"'.  Thus, applications that support
      all decoding modes\n   SHOULD include 'mode=\"any\"' as shown in the example
      below:\n             m=audio 8088 RTP/AVP 97\n             a=rtpmap:97 speex/8000\n
      \            a=fmtp:97 mode=\"4,any\"\n"
    title: 5.1.  Example Supporting All Modes, Prefer Mode 4
  - contents:
    - "5.2.  Example Supporting Only Modes 3 and 5\n   The offerer indicates the mode
      he wishes to receive (Speex 'mode 3').\n   This offer indicates mode 3 and mode
      5 are supported and that no\n   other modes are supported.  The remote party
      MUST NOT configure its\n   encoder using another Speex mode.\n             m=audio
      8088 RTP/AVP 97\n             a=rtmap:97 speex/8000\n             a=fmtp:97
      mode=\"3,5\"\n"
    title: 5.2.  Example Supporting Only Modes 3 and 5
  - contents:
    - "5.3.  Example with Variable Bit-Rate and Comfort Noise\n   The offerer indicates
      that it wishes to receive variable bit-rate\n   frames with comfort noise:\n
      \            m=audio 8088 RTP/AVP 97\n             a=rtmap:97 speex/8000\n             a=fmtp:97
      vbr=on;cng=on\n"
    title: 5.3.  Example with Variable Bit-Rate and Comfort Noise
  - contents:
    - "5.4.  Example with Voice Activity Detection\n   The offerer indicates that
      it wishes to use silence suppression.  In\n   this case, the vbr=vad parameter
      will be used:\n             m=audio 8088 RTP/AVP 97\n             a=rtmap:97
      speex/8000\n             a=fmtp:97 vbr=vad\n"
    title: 5.4.  Example with Voice Activity Detection
  - contents:
    - "5.5.  Example with Multiple Sampling Rates\n   The offerer indicates that it
      wishes to receive Speex audio at 16000\n   Hz with mode 10 (42.2 kbit/s) or,
      alternatively, Speex audio at 8000\n   Hz with mode 7 (24.6 kbit/s).  The offerer
      supports decoding all\n   modes.\n             m=audio 8088 RTP/AVP 97 98\n
      \            a=rtmap:97 speex/16000\n             a=fmtp:97 mode=\"10,any\"\n
      \            a=rtmap:98 speex/8000\n             a=fmtp:98 mode=\"7,any\"\n"
    title: 5.5.  Example with Multiple Sampling Rates
  - contents:
    - "5.6.  Example with Ptime and Multiple Speex Frames\n   The \"ptime\" SDP attribute
      is used to denote the packetization\n   interval (i.e., how many milliseconds
      of audio is encoded in a single\n   RTP packet).  Since Speex uses 20 msec frames,
      ptime values of\n   multiples of 20 denote multiple Speex frames per packet.
      \ It is\n   recommended to use ptime values that are a multiple of 20.\n   If
      ptime contains a value that is not multiple of 20, the internal\n   interpretation
      of it should be rounded up to the nearest multiple of\n   20 before the number
      of Speex frames is calculated.  For example, if\n   the \"ptime\" attribute
      is set to 30, the internal interpretation\n   should be rounded up to 40 and
      then used to calculate two Speex\n   frames per packet.\n   In the example below,
      the ptime value is set to 40, indicating that\n   there are two frames in each
      packet.\n             m=audio 8088 RTP/AVP 97\n             a=rtpmap:97 speex/8000\n
      \            a=ptime:40\n   Note that the ptime parameter applies to all payloads
      listed in the\n   media line and is not used as part of an a=fmtp directive.\n
      \  Care must be taken when setting the value of ptime so that the RTP\n   packet
      size does not exceed the path MTU.\n"
    title: 5.6.  Example with Ptime and Multiple Speex Frames
  - contents:
    - "5.7.  Example with Complete Offer/Answer Exchange\n   The offerer indicates
      that it wishes to receive Speex audio at 16000\n   Hz or, alternatively, Speex
      audio at 8000 Hz.  The offerer does\n   support ALL modes because no mode is
      specified.\n             m=audio 8088 RTP/AVP 97 98\n             a=rtmap:97
      speex/16000\n             a=rtmap:98 speex/8000\n   The answerer indicates that
      it wishes to receive Speex audio at 8000\n   Hz, which is the only sampling
      rate it supports.  The answerer does\n   support ALL modes because no mode is
      specified.\n             m=audio 8088 RTP/AVP 99\n             a=rtmap:99 speex/8000\n"
    title: 5.7.  Example with Complete Offer/Answer Exchange
  title: 5.  SDP Usage of Speex
- contents:
  - "6.  Implementation Guidelines\n   Implementations that support Speex are responsible
    for correctly\n   decoding incoming Speex frames.\n   Each Speex frame does contain
    all needed information to decode\n   itself.  In particular, the 'mode' and 'ptime'
    values proposed in the\n   SDP contents MUST NOT be used for decoding: those values
    are not\n   needed to properly decode a RTP Speex stream.\n"
  title: 6.  Implementation Guidelines
- contents:
  - "7.  Security Considerations\n   RTP packets using the payload format defined
    in this specification\n   are subject to the security considerations discussed
    in the RTP\n   specification [RFC3550], and any appropriate RTP profile.  This\n
    \  implies that confidentiality of the media streams is achieved by\n   encryption.
    \ Because the data compression used with this payload\n   format is applied end-to-end,
    encryption may be performed after\n   compression so there is no conflict between
    the two operations.\n   A potential denial-of-service threat exists for data encodings
    using\n   compression techniques that have non-uniform receiver-end\n   computational
    load.  The attacker can inject pathological datagrams\n   into the stream that
    are complex to decode and cause the receiver to\n   be overloaded.  However, this
    encoding does not exhibit any\n   significant non-uniformity.\n   As with any
    IP-based protocol, in some circumstances, a receiver may\n   be overloaded simply
    by the receipt of too many packets, either\n   desired or undesired.  Network-layer
    authentication may be used to\n   discard packets from undesired sources, but
    the processing cost of\n   the authentication itself may be too high.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Acknowledgments\n   The authors would like to thank Equivalence Pty Ltd of
    Australia for\n   their assistance in attempting to standardize the use of Speex
    in\n   H.323 applications, and for implementing Speex in their open-source\n   OpenH323
    stack.  The authors would also like to thank Brian C. Wiles\n   <brian@streamcomm.com>
    of StreamComm for his assistance in developing\n   the proposed standard for Speex
    use in H.323 applications.\n   The authors would also like to thank the following
    members of the\n   Speex and AVT communities for their input: Ross Finlayson,
    Federico\n   Montesino Pouzols, Henning Schulzrinne, Magnus Westerlund, Colin\n
    \  Perkins, and Ivo Emanuel Goncalves.\n   Thanks to former authors of this document;
    Simon Morlat, Roger\n   Hardiman, and Phil Kerr.\n"
  title: 8.  Acknowledgments
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n              Jacobson,
      \"RTP: A Transport Protocol for Real-Time\n              Applications\", STD
      64, RFC 3550, July 2003.\n   [RFC4566]  Handley, M., Jacobson, V., and C. Perkins,
      \"SDP: Session\n              Description Protocol\", RFC 4566, July 2006.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [CELP]     Schroeder, M. and B. Atal, \"Code-excited
      linear\n              prediction(CELP): High-quality speech at very low bit\n
      \             rates\", Proc. International Conference on Acoustics,\n              Speech,
      and Signal Processing (ICASSP), Vol 10, pp. 937-\n              940, 1985, <http://www.ntis.gov/>.\n
      \  [RFC4288]  Freed, N. and J. Klensin, \"Media Type Specifications and\n              Registration
      Procedures\", BCP 13, RFC 4288, December 2005.\n   [SPEEX]    Valin, J., \"The
      Speex Codec Manual\",\n              <http://www.speex.org/docs/>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Authors' Addresses\n   Greg Herlein\n   Independent\n   2034 Filbert Street\n
    \  San Francisco, California  94123\n   United States\n   EMail: gherlein@herlein.com\n
    \  Jean-Marc Valin\n   Xiph.Org Foundation\n   EMail: jean-marc.valin@usherbrooke.ca\n
    \  Alfred E. Heggestad\n   Creytiv.com\n   Biskop J. Nilssonsgt. 20a\n   Oslo
    \ 0659\n   Norway\n   EMail: aeh@db.org\n   Aymeric Moizard\n   Antisip\n   5
    Place Benoit Crepu\n   Lyon,   69005\n   France\n   EMail: jack@atosc.org\n"
  title: Authors' Addresses
