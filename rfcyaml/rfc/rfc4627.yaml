- title: __initial_text__
  contents:
  - ' The application/json Media Type for JavaScript Object Notation (JSON)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   JavaScript Object Notation (JSON) is a lightweight, text-based,\n\
    \   language-independent data interchange format.  It was derived from\n   the\
    \ ECMAScript Programming Language Standard.  JSON defines a small\n   set of formatting\
    \ rules for the portable representation of structured\n   data.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   JavaScript Object Notation (JSON) is a text format for the\n\
    \   serialization of structured data.  It is derived from the object\n   literals\
    \ of JavaScript, as defined in the ECMAScript Programming\n   Language Standard,\
    \ Third Edition [ECMA].\n   JSON can represent four primitive types (strings,\
    \ numbers, booleans,\n   and null) and two structured types (objects and arrays).\n\
    \   A string is a sequence of zero or more Unicode characters [UNICODE].\n   An\
    \ object is an unordered collection of zero or more name/value\n   pairs, where\
    \ a name is a string and a value is a string, number,\n   boolean, null, object,\
    \ or array.\n   An array is an ordered sequence of zero or more values.\n   The\
    \ terms \"object\" and \"array\" come from the conventions of\n   JavaScript.\n\
    \   JSON's design goals were for it to be minimal, portable, textual, and\n  \
    \ a subset of JavaScript.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   The grammatical rules in this document are to be interpreted\
    \ as\n   described in [RFC4234].\n"
- title: 2.  JSON Grammar
  contents:
  - "2.  JSON Grammar\n   A JSON text is a sequence of tokens.  The set of tokens\
    \ includes six\n   structural characters, strings, numbers, and three literal\
    \ names.\n   A JSON text is a serialized object or array.\n      JSON-text = object\
    \ / array\n   These are the six structural characters:\n      begin-array    \
    \ = ws %x5B ws  ; [ left square bracket\n      begin-object    = ws %x7B ws  ;\
    \ { left curly bracket\n      end-array       = ws %x5D ws  ; ] right square bracket\n\
    \      end-object      = ws %x7D ws  ; } right curly bracket\n      name-separator\
    \  = ws %x3A ws  ; : colon\n      value-separator = ws %x2C ws  ; , comma\n  \
    \ Insignificant whitespace is allowed before or after any of the six\n   structural\
    \ characters.\n      ws = *(\n                %x20 /              ; Space\n  \
    \              %x09 /              ; Horizontal tab\n                %x0A /  \
    \            ; Line feed or New line\n                %x0D                ; Carriage\
    \ return\n            )\n"
- title: 2.1.  Values
  contents:
  - "2.1.  Values\n   A JSON value MUST be an object, array, number, or string, or\
    \ one of\n   the following three literal names:\n      false null true\n   The\
    \ literal names MUST be lowercase.  No other literal names are\n   allowed.\n\
    \         value = false / null / true / object / array / number / string\n   \
    \      false = %x66.61.6c.73.65   ; false\n         null  = %x6e.75.6c.6c    \
    \  ; null\n         true  = %x74.72.75.65      ; true\n"
- title: 2.2.  Objects
  contents:
  - "2.2.  Objects\n   An object structure is represented as a pair of curly brackets\n\
    \   surrounding zero or more name/value pairs (or members).  A name is a\n   string.\
    \  A single colon comes after each name, separating the name\n   from the value.\
    \  A single comma separates a value from a following\n   name.  The names within\
    \ an object SHOULD be unique.\n      object = begin-object [ member *( value-separator\
    \ member ) ]\n      end-object\n      member = string name-separator value\n"
- title: 2.3.  Arrays
  contents:
  - "2.3.  Arrays\n   An array structure is represented as square brackets surrounding\
    \ zero\n   or more values (or elements).  Elements are separated by commas.\n\
    \      array = begin-array [ value *( value-separator value ) ] end-array\n"
- title: 2.4.  Numbers
  contents:
  - "2.4.  Numbers\n   The representation of numbers is similar to that used in most\n\
    \   programming languages.  A number contains an integer component that\n   may\
    \ be prefixed with an optional minus sign, which may be followed by\n   a fraction\
    \ part and/or an exponent part.\n   Octal and hex forms are not allowed.  Leading\
    \ zeros are not allowed.\n   A fraction part is a decimal point followed by one\
    \ or more digits.\n   An exponent part begins with the letter E in upper or lowercase,\n\
    \   which may be followed by a plus or minus sign.  The E and optional\n   sign\
    \ are followed by one or more digits.\n   Numeric values that cannot be represented\
    \ as sequences of digits\n   (such as Infinity and NaN) are not permitted.\n \
    \        number = [ minus ] int [ frac ] [ exp ]\n         decimal-point = %x2E\
    \       ; .\n         digit1-9 = %x31-39         ; 1-9\n         e = %x65 / %x45\
    \            ; e E\n         exp = e [ minus / plus ] 1*DIGIT\n         frac =\
    \ decimal-point 1*DIGIT\n         int = zero / ( digit1-9 *DIGIT )\n         minus\
    \ = %x2D               ; -\n         plus = %x2B                ; +\n        \
    \ zero = %x30                ; 0\n"
- title: 2.5.  Strings
  contents:
  - "2.5.  Strings\n   The representation of strings is similar to conventions used\
    \ in the C\n   family of programming languages.  A string begins and ends with\n\
    \   quotation marks.  All Unicode characters may be placed within the\n   quotation\
    \ marks except for the characters that must be escaped:\n   quotation mark, reverse\
    \ solidus, and the control characters (U+0000\n   through U+001F).\n   Any character\
    \ may be escaped.  If the character is in the Basic\n   Multilingual Plane (U+0000\
    \ through U+FFFF), then it may be\n   represented as a six-character sequence:\
    \ a reverse solidus, followed\n   by the lowercase letter u, followed by four\
    \ hexadecimal digits that\n   encode the character's code point.  The hexadecimal\
    \ letters A though\n   F can be upper or lowercase.  So, for example, a string\
    \ containing\n   only a single reverse solidus character may be represented as\n\
    \   \"\\u005C\".\n   Alternatively, there are two-character sequence escape\n\
    \   representations of some popular characters.  So, for example, a\n   string\
    \ containing only a single reverse solidus character may be\n   represented more\
    \ compactly as \"\\\\\".\n   To escape an extended character that is not in the\
    \ Basic Multilingual\n   Plane, the character is represented as a twelve-character\
    \ sequence,\n   encoding the UTF-16 surrogate pair.  So, for example, a string\n\
    \   containing only the G clef character (U+1D11E) may be represented as\n   \"\
    \\uD834\\uDD1E\".\n         string = quotation-mark *char quotation-mark\n   \
    \      char = unescaped /\n                escape (\n                    %x22\
    \ /          ; \"    quotation mark  U+0022\n                    %x5C /      \
    \    ; \\    reverse solidus U+005C\n                    %x2F /          ; / \
    \   solidus         U+002F\n                    %x62 /          ; b    backspace\
    \       U+0008\n                    %x66 /          ; f    form feed       U+000C\n\
    \                    %x6E /          ; n    line feed       U+000A\n         \
    \           %x72 /          ; r    carriage return U+000D\n                  \
    \  %x74 /          ; t    tab             U+0009\n                    %x75 4HEXDIG\
    \ )  ; uXXXX                U+XXXX\n         escape = %x5C              ; \\\n\
    \         quotation-mark = %x22      ; \"\n         unescaped = %x20-21 / %x23-5B\
    \ / %x5D-10FFFF\n"
- title: 3.  Encoding
  contents:
  - "3.  Encoding\n   JSON text SHALL be encoded in Unicode.  The default encoding\
    \ is\n   UTF-8.\n   Since the first two characters of a JSON text will always\
    \ be ASCII\n   characters [RFC0020], it is possible to determine whether an octet\n\
    \   stream is UTF-8, UTF-16 (BE or LE), or UTF-32 (BE or LE) by looking\n   at\
    \ the pattern of nulls in the first four octets.\n           00 00 00 xx  UTF-32BE\n\
    \           00 xx 00 xx  UTF-16BE\n           xx 00 00 00  UTF-32LE\n        \
    \   xx 00 xx 00  UTF-16LE\n           xx xx xx xx  UTF-8\n"
- title: 4.  Parsers
  contents:
  - "4.  Parsers\n   A JSON parser transforms a JSON text into another representation.\
    \  A\n   JSON parser MUST accept all texts that conform to the JSON grammar.\n\
    \   A JSON parser MAY accept non-JSON forms or extensions.\n   An implementation\
    \ may set limits on the size of texts that it\n   accepts.  An implementation\
    \ may set limits on the maximum depth of\n   nesting.  An implementation may set\
    \ limits on the range of numbers.\n   An implementation may set limits on the\
    \ length and character contents\n   of strings.\n"
- title: 5. Generators
  contents:
  - "5. Generators\n   A JSON generator produces JSON text.  The resulting text MUST\n\
    \   strictly conform to the JSON grammar.\n"
- title: 6. IANA Considerations
  contents:
  - "6. IANA Considerations\n   The MIME media type for JSON text is application/json.\n\
    \   Type name: application\n   Subtype name: json\n   Required parameters: n/a\n\
    \   Optional parameters: n/a\n   Encoding considerations: 8bit if UTF-8; binary\
    \ if UTF-16 or UTF-32\n      JSON may be represented using UTF-8, UTF-16, or UTF-32.\
    \  When JSON\n      is written in UTF-8, JSON is 8bit compatible.  When JSON is\n\
    \      written in UTF-16 or UTF-32, the binary content-transfer-encoding\n   \
    \   must be used.\n   Security considerations:\n   Generally there are security\
    \ issues with scripting languages.  JSON\n   is a subset of JavaScript, but it\
    \ is a safe subset that excludes\n   assignment and invocation.\n   A JSON text\
    \ can be safely passed into JavaScript's eval() function\n   (which compiles and\
    \ executes a string) if all the characters not\n   enclosed in strings are in\
    \ the set of characters that form JSON\n   tokens.  This can be quickly determined\
    \ in JavaScript with two\n   regular expressions and calls to the test and replace\
    \ methods.\n      var my_JSON_object = !(/[^,:{}\\[\\]0-9.\\-+Eaeflnr-u \\n\\\
    r\\t]/.test(\n             text.replace(/\"(\\\\.|[^\"\\\\])*\"/g, ''))) &&\n\
    \         eval('(' + text + ')');\n   Interoperability considerations: n/a\n \
    \  Published specification: RFC 4627\n   Applications that use this media type:\n\
    \      JSON has been used to exchange data between applications written\n    \
    \  in all of these programming languages: ActionScript, C, C#,\n      ColdFusion,\
    \ Common Lisp, E, Erlang, Java, JavaScript, Lua,\n      Objective CAML, Perl,\
    \ PHP, Python, Rebol, Ruby, and Scheme.\n   Additional information:\n      Magic\
    \ number(s): n/a\n      File extension(s): .json\n      Macintosh file type code(s):\
    \ TEXT\n   Person & email address to contact for further information:\n      Douglas\
    \ Crockford\n      douglas@crockford.com\n   Intended usage: COMMON\n   Restrictions\
    \ on usage: none\n   Author:\n      Douglas Crockford\n      douglas@crockford.com\n\
    \   Change controller:\n      Douglas Crockford\n      douglas@crockford.com\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   See Security Considerations in Section 6.\n"
- title: 8. Examples
  contents:
  - "8. Examples\n   This is a JSON object:\n   {\n      \"Image\": {\n          \"\
    Width\":  800,\n          \"Height\": 600,\n          \"Title\":  \"View from\
    \ 15th Floor\",\n          \"Thumbnail\": {\n              \"Url\":    \"http://www.example.com/image/481989943\"\
    ,\n              \"Height\": 125,\n              \"Width\":  \"100\"\n       \
    \   },\n          \"IDs\": [116, 943, 234, 38793]\n        }\n   }\n   Its Image\
    \ member is an object whose Thumbnail member is an object\n   and whose IDs member\
    \ is an array of numbers.\n   This is a JSON array containing two objects:\n \
    \  [\n      {\n         \"precision\": \"zip\",\n         \"Latitude\":  37.7668,\n\
    \         \"Longitude\": -122.3959,\n         \"Address\":   \"\",\n         \"\
    City\":      \"SAN FRANCISCO\",\n         \"State\":     \"CA\",\n         \"\
    Zip\":       \"94107\",\n         \"Country\":   \"US\"\n      },\n      {\n \
    \        \"precision\": \"zip\",\n         \"Latitude\":  37.371991,\n       \
    \  \"Longitude\": -122.026020,\n         \"Address\":   \"\",\n         \"City\"\
    :      \"SUNNYVALE\",\n         \"State\":     \"CA\",\n         \"Zip\":    \
    \   \"94085\",\n         \"Country\":   \"US\"\n      }\n   ]\n"
- title: 9. References
  contents:
  - '9. References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [ECMA]    European Computer Manufacturers Association,\
    \ \"ECMAScript\n             Language Specification 3rd Edition\", December 1999,\n\
    \             <http://www.ecma-international.org/publications/files/\n       \
    \      ecma-st/ECMA-262.pdf>.\n   [RFC0020] Cerf, V., \"ASCII format for network\
    \ interchange\", RFC 20,\n             October 1969.\n   [RFC2119] Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate\n             Requirement Levels\",\
    \ BCP 14, RFC 2119, March 1997.\n   [RFC4234] Crocker, D. and P.  Overell, \"\
    Augmented BNF for Syntax\n             Specifications: ABNF\", RFC 4234, October\
    \ 2005.\n   [UNICODE] The Unicode Consortium, \"The Unicode Standard Version 4.0\"\
    ,\n             2003, <http://www.unicode.org/versions/Unicode4.1.0/>.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Douglas Crockford\n   JSON.org\n   EMail: douglas@crockford.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
