- title: __initial_text__
  contents:
  - "                   A Configuration Profile Schema for\n       Lightweight Directory\
    \ Access Protocol (LDAP)-Based Agents\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This RFC is not a candidate for any level of Internet Standard.\
    \  The\n   IETF disclaims any knowledge of the fitness of this RFC for any\n \
    \  purpose and in particular notes that the decision to publish is not\n   based\
    \ on IETF review for such things as security, congestion control,\n   or inappropriate\
    \ interaction with deployed protocols.  The RFC Editor\n   has chosen to publish\
    \ this document at its discretion.  Readers of\n   this document should exercise\
    \ caution in evaluating its value for\n   implementation and deployment.  See\
    \ RFC 3932 for more information.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document consists of two primary components, a schema for agents\n\
    \   that make use of the Lightweight Directory Access protocol (LDAP) and\n  \
    \ a proposed use case of that schema, for distributed configuration of\n   similar\
    \ directory user agents.  A set of attribute types and an\n   object class are\
    \ proposed.  In the proposed use case, directory user\n   agents (DUAs) can use\
    \ this schema to determine directory data\n   location and access parameters for\
    \ specific services they support.\n   In addition, in the proposed use case, attribute\
    \ and object class\n   mapping allows DUAs to reconfigure their expected (default)\
    \ schema to\n   match that of the end user's environment.  This document is intended\n\
    \   to be a skeleton for future documents that describe configuration of\n   specific\
    \ DUA services.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Background and Motivation  . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  General Information  . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n     2.1.  Requirements Notation  . . . . . . . . . . . . . .\
    \ . . . .  4\n     2.2.  Attributes Summary . . . . . . . . . . . . . . . . .\
    \ . . .  5\n     2.3.  Object Classes Summary . . . . . . . . . . . . . . . .\
    \ . .  5\n     2.4.  Common Syntax/Encoding Definitions . . . . . . . . . . .\
    \ .  5\n   3.  Schema Definition  . . . . . . . . . . . . . . . . . . . . . .\
    \  6\n     3.1.  Attribute Definitions  . . . . . . . . . . . . . . . . . .  6\n\
    \     3.2.  Class Definition . . . . . . . . . . . . . . . . . . . . .  9\n  \
    \ 4.  DUA Implementation Details . . . . . . . . . . . . . . . . . . 10\n    \
    \ 4.1.  Interpreting the preferredServerList Attribute . . . . . . 10\n     4.2.\
    \  Interpreting the defaultServerList Attribute . . . . . . . 11\n     4.3.  Interpreting\
    \ the defaultSearchBase Attribute . . . . . . . 12\n     4.4.  Interpreting the\
    \ authenticationMethod Attribute  . . . . . 13\n     4.5.  Interpreting the credentialLevel\
    \ Attribute . . . . . . . . 15\n     4.6.  Interpreting the serviceSearchDescriptor\
    \ Attribute . . . . 16\n     4.7.  Interpreting the attributeMap Attribute  .\
    \ . . . . . . . . 20\n     4.8.  Interpreting the searchTimeLimit Attribute .\
    \ . . . . . . . 23\n     4.9.  Interpreting the bindTimeLimit Attribute . . .\
    \ . . . . . . 23\n     4.10. Interpreting the followReferrals Attribute . . .\
    \ . . . . . 24\n     4.11. Interpreting the dereferenceAliases Attribute  . .\
    \ . . . . 24\n     4.12. Interpreting the profileTTL Attribute  . . . . . . .\
    \ . . . 24\n     4.13. Interpreting the objectclassMap Attribute  . . . . . .\
    \ . . 25\n     4.14. Interpreting the defaultSearchScope Attribute  . . . . .\
    \ . 27\n     4.15. Interpreting the serviceAuthenticationMethod Attribute . .\
    \ 27\n     4.16. Interpreting the serviceCredentialLevel Attribute  . . . . 28\n\
    \   5.  Binding to the Directory Server  . . . . . . . . . . . . . . . 29\n  \
    \ 6.  Security Considerations  . . . . . . . . . . . . . . . . . . . 29\n   7.\
    \  Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 30\n   8.  IANA\
    \ Considerations  . . . . . . . . . . . . . . . . . . . . . 30\n     8.1.  Registration\
    \ of Object Classes . . . . . . . . . . . . . . 31\n     8.2.  Registration of\
    \ Attribute Types  . . . . . . . . . . . . . 31\n   9.  References . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . 33\n     9.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . . . 33\n     9.2.  Informative References\
    \ . . . . . . . . . . . . . . . . . . 34\n   Appendix A.  Examples  . . . . .\
    \ . . . . . . . . . . . . . . . . . 35\n"
- title: 1.  Background and Motivation
  contents:
  - "1.  Background and Motivation\n   LDAP [RFC4510] has brought about a nearly ubiquitous\
    \ acceptance of\n   the directory server.  Many client applications (DUAs) are\
    \ being\n   created that use LDAP directories for many different services.  And\n\
    \   although the LDAP protocol has eased the development of these\n   applications,\
    \ some challenges still exist for both developers and\n   directory administrators.\n\
    \   The authors of this document are implementers of DUAs described by\n   [RFC2307].\
    \  In developing these agents, we felt there were several\n   issues that still\
    \ need to be addressed to ease the deployment and\n   configuration of a large\
    \ network of these DUAs.\n   One of these challenges stems from the lack of a\
    \ utopian schema.  A\n   utopian schema would be one that every application developer\
    \ could\n   agree upon and that would support every application.  Unfortunately\n\
    \   today, many DUAs define their own schema, even when they provide\n   similar\
    \ services (like RFC 2307 vs. Microsoft's Services for Unix\n   [MSSFU]).  These\
    \ schemas contain similar attributes, but use\n   different attribute names. \
    \ This can lead to data redundancy within\n   directory entries and cause directory\
    \ administrators unwanted\n   challenges, updating schemas and synchronizing data.\
    \  Or, in a more\n   common case, two or more applications may agree on common\
    \ schema\n   elements, but choose a different schema for other elements of data\n\
    \   that might also be shareable between the applications.  While data\n   synchronization\
    \ and translation tools exist, the authors of this\n   document believe there\
    \ is value in providing this capability in the\n   directory user agent itself.\n\
    \   Aside from proposing a schema for general use, one goal of this\n   document\
    \ is to eliminate data redundancy by having DUAs configure\n   themselves to the\
    \ schema of the deployed directory, instead of\n   forcing the DUA's own schema\
    \ on the directory.\n   Another goal of this document is to provide the DUA with\
    \ enough\n   configuration information so that it can discover how to retrieve\
    \ its\n   data in the directory, such as what locations to search in the\n   directory\
    \ tree.\n   Finally, this document intends to describe a configuration method\
    \ for\n   DUAs that can be shared among many DUAs on various platforms,\n   providing,\
    \ as such, a configuration profile.  The purpose of this\n   profile is to centralize\
    \ and simplify management of DUAs.\n   This document is intended to provide the\
    \ skeleton framework for\n   future documents that will describe the individual\
    \ implementation\n   details for the particular services provided by that DUA.\
    \  The\n   authors of this document plan to develop such a document for the\n\
    \   Network Information Service DUA, described by RFC 2307 or its\n   successor.\n\
    \   We expect that as DUAs take advantage of this configuration scheme,\n   each\
    \ DUA will require additional configuration parameters, not\n   specified by this\
    \ document.  Thus, we would expect that new auxiliary\n   object classes that\
    \ contain new configuration attributes will be\n   created and then joined with\
    \ the structural class defined by this\n   document to create a configuration\
    \ profile for a particular DUA\n   service.  By joining various auxiliary object\
    \ classes for different\n   DUA services, the configuration of various DUA services\
    \ can be\n   controlled by a single configuration profile entry.\n"
- title: 2.  General Information
  contents:
  - "2.  General Information\n   The schema defined by this document is defined under\
    \ the \"DUA\n   Configuration Schema\".  This schema is derived from the object\n\
    \   identifier (OID): iso (1) org (3) dod (6) internet (1) private (4)\n   enterprises\
    \ (1) Hewlett-Packard Company (11) directory (1) LDAP-UX\n   Integration Project\
    \ (3) DUA Configuration Schema (1).  This OID is\n   represented in this document\
    \ by the keystring \"DUAConfSchemaOID\"\n   (1.3.6.1.4.1.11.1.3.1).\n"
- title: 2.1.  Requirements Notation
  contents:
  - "2.1.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.2.  Attributes Summary
  contents:
  - "2.2.  Attributes Summary\n   The following attributes are defined in this document:\n\
    \   preferredServerList\n   defaultServerList\n   defaultSearchBase\n   defaultSearchScope\n\
    \   authenticationMethod\n   credentialLevel\n   serviceSearchDescriptor\n   serviceCredentialLevel\n\
    \   serviceAuthenticationMethod\n   attributeMap\n   objectclassMap\n   searchTimeLimit\n\
    \   bindTimeLimit\n   followReferrals\n   dereferenceAliases\n   profileTTL\n"
- title: 2.3.  Object Classes Summary
  contents:
  - "2.3.  Object Classes Summary\n   The following object class is defined in this\
    \ document:\n   DUAConfigProfile\n"
- title: 2.4.  Common Syntax/Encoding Definitions
  contents:
  - "2.4.  Common Syntax/Encoding Definitions\n   The proposed string encodings used\
    \ by the attributes defined in this\n   document can be found in Section 4.  This\
    \ document makes use of ABNF\n   [RFC4234] for defining new encodings.\n   The\
    \ following syntax definitions are used throughout this document.\n          \
    \            The list of used syntaxes are:\n   +---------------------------+---------------------------------------+\n\
    \   | Key                       | Source                                |\n  \
    \ +---------------------------+---------------------------------------+\n   |\
    \ keystring                 | as defined by [RFC4512] Section 1.4   |\n   | descr\
    \                     | as defined by [RFC4512] Section 1.4   |\n   | SP     \
    \                   | as defined by [RFC4512] Section 1.4   |\n   | WSP      \
    \                 | as defined by [RFC4512] Section 1.4   |\n   | base       \
    \               | as defined by distinguishedName in    |\n   |              \
    \             | [RFC4514]                             |\n   | distinguishedName\
    \         | as defined by [RFC4514] Section 2     |\n   | relativeDistinguishedName\
    \ | as defined by [RFC4514] Section 2     |\n   | scope                     |\
    \ as defined by [RFC4516] Section 2     |\n   | host                      | as\
    \ defined by [RFC3986] Section 3.2.2 |\n   | hostport                  | host\
    \ [\":\" port ]                      |\n   | port                      | as defined\
    \ by [RFC3986] Section 3.2.3 |\n   | serviceID                 | same as keystring\
    \                     |\n   +---------------------------+---------------------------------------+\n\
    \   This document does not define new syntaxes that must be supported by\n   the\
    \ directory server.  Instead, these syntaxes are merely expected to\n   be interpreted\
    \ by the DUA.  As referenced in the schema definition in\n   Section 3, most encodings\
    \ are expected to be stored in attributes\n   using common syntaxes, such as the\
    \ Directory String syntax, as\n   defined in Section 3.3.6 of [RFC4517].  Refer\
    \ to RFC 4517 for\n   additional syntaxes used by this schema.\n"
- title: 3.  Schema Definition
  contents:
  - "3.  Schema Definition\n   This section defines a proposed schema.  This schema\
    \ does not require\n   definition of new matching rules or syntaxes, and it may\
    \ be used for\n   any purpose seen.  A proposed use of this schema to support\
    \ elements\n   of configuration of a directory user agent is described in Section\
    \ 4.\n"
- title: 3.1.  Attribute Definitions
  contents:
  - "3.1.  Attribute Definitions\n   This section contains attribute definitions used\
    \ by agents.  The\n   syntax used to describe these attributes is defined in [RFC4512],\n\
    \   Section 4.1.2.  Individual syntaxes and matching rules used within\n   these\
    \ descriptions are described in [RFC4517], Sections 3.3 and 4.2,\n   respectively.\n\
    \   ( 1.3.6.1.4.1.11.1.3.1.1.0 NAME 'defaultServerList'\n     DESC 'List of default\
    \ servers'\n     EQUALITY caseIgnoreMatch\n     SUBSTR caseIgnoreSubstringsMatch\n\
    \     SYNTAX 1.3.6.1.4.1.1466.115.121.1.15\n     SINGLE-VALUE )\n   ( 1.3.6.1.4.1.11.1.3.1.1.1\
    \ NAME 'defaultSearchBase'\n     DESC 'Default base for searches'\n     EQUALITY\
    \ distinguishedNameMatch\n     SYNTAX 1.3.6.1.4.1.1466.115.121.1.12\n     SINGLE-VALUE\
    \ )\n   ( 1.3.6.1.4.1.11.1.3.1.1.2 NAME 'preferredServerList'\n     DESC 'List\
    \ of preferred servers'\n     EQUALITY caseIgnoreMatch\n     SUBSTR caseIgnoreSubstringsMatch\n\
    \     SYNTAX 1.3.6.1.4.1.1466.115.121.1.15\n     SINGLE-VALUE )\n   ( 1.3.6.1.4.1.11.1.3.1.1.3\
    \ NAME 'searchTimeLimit'\n     DESC 'Maximum time an agent or service allows for\
    \ a\n     search to complete'\n     EQUALITY integerMatch\n     ORDERING integerOrderingMatch\n\
    \     SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n     SINGLE-VALUE )\n   ( 1.3.6.1.4.1.11.1.3.1.1.4\
    \ NAME 'bindTimeLimit'\n     DESC 'Maximum time an agent or service allows for\
    \ a\n     bind operation to complete'\n     EQUALITY integerMatch\n     ORDERING\
    \ integerOrderingMatch\n     SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n     SINGLE-VALUE\
    \ )\n   ( 1.3.6.1.4.1.11.1.3.1.1.5 NAME 'followReferrals'\n     DESC 'An agent\
    \ or service does or should follow referrals'\n     EQUALITY booleanMatch\n  \
    \   SYNTAX 1.3.6.1.4.1.1466.115.121.1.7\n     SINGLE-VALUE )\n   ( 1.3.6.1.4.1.11.1.3.1.1.6\
    \ NAME 'authenticationMethod'\n     DESC 'Identifies the types of authentication\
    \ methods either\n     used, required, or provided by a service or peer'\n   \
    \  EQUALITY caseIgnoreMatch\n     SUBSTR caseIgnoreSubstringsMatch\n     SYNTAX\
    \ 1.3.6.1.4.1.1466.115.121.1.15\n     SINGLE-VALUE )\n   ( 1.3.6.1.4.1.11.1.3.1.1.7\
    \ NAME 'profileTTL'\n     DESC 'Time to live, in seconds, before a profile is\n\
    \     considered stale'\n     EQUALITY integerMatch\n     ORDERING integerOrderingMatch\n\
    \     SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n     SINGLE-VALUE )\n   ( 1.3.6.1.4.1.11.1.3.1.1.9\
    \ NAME 'attributeMap'\n     DESC 'Attribute mappings used, required, or supported\
    \ by an\n     agent or service'\n     EQUALITY caseIgnoreIA5Match\n     SYNTAX\
    \ 1.3.6.1.4.1.1466.115.121.1.26 )\n   ( 1.3.6.1.4.1.11.1.3.1.1.10 NAME 'credentialLevel'\n\
    \     DESC 'Identifies type of credentials either used, required,\n     or supported\
    \ by an agent or service'\n     EQUALITY caseIgnoreIA5Match\n     SYNTAX 1.3.6.1.4.1.1466.115.121.1.26\n\
    \     SINGLE-VALUE )\n   ( 1.3.6.1.4.1.11.1.3.1.1.11 NAME 'objectclassMap'\n \
    \    DESC 'Object class mappings used, required, or supported by\n     an agent\
    \ or service'\n     EQUALITY caseIgnoreIA5Match\n     SYNTAX 1.3.6.1.4.1.1466.115.121.1.26\
    \ )\n   ( 1.3.6.1.4.1.11.1.3.1.1.12 NAME 'defaultSearchScope'\n     DESC 'Default\
    \ scope used when performing a search'\n     EQUALITY caseIgnoreIA5Match\n   \
    \  SYNTAX 1.3.6.1.4.1.1466.115.121.1.26\n     SINGLE-VALUE )\n   ( 1.3.6.1.4.1.11.1.3.1.1.13\
    \ NAME 'serviceCredentialLevel'\n     DESC 'Specifies the type of credentials\
    \ either used, required,\n     or supported by a specific service'\n     EQUALITY\
    \ caseIgnoreIA5Match\n     SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 )\n   ( 1.3.6.1.4.1.11.1.3.1.1.14\
    \ NAME 'serviceSearchDescriptor'\n     DESC 'Specifies search descriptors required,\
    \ used, or\n     supported by a particular service or agent'\n     EQUALITY caseExactMatch\n\
    \     SUBSTR caseExactSubstringsMatch\n     SYNTAX 1.3.6.1.4.1.1466.115.121.1.15\
    \ )\n   ( 1.3.6.1.4.1.11.1.3.1.1.15 NAME 'serviceAuthenticationMethod'\n     DESC\
    \ 'Specifies types authentication methods either\n     used, required, or supported\
    \ by a particular service'\n     EQUALITY caseIgnoreMatch\n     SUBSTR caseIgnoreSubstringsMatch\n\
    \     SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )\n   ( 1.3.6.1.4.1.11.1.3.1.1.16 NAME\
    \ 'dereferenceAliases'\n     DESC 'Specifies if a service or agent either requires,\n\
    \     supports, or uses dereferencing of aliases.'\n     EQUALITY booleanMatch\n\
    \     SYNTAX 1.3.6.1.4.1.1466.115.121.1.7\n     SINGLE-VALUE )\n"
- title: 3.2.  Class Definition
  contents:
  - "3.2.  Class Definition\n   The object class below is constructed from the attributes\
    \ defined in\n   Section 3.1, with the exception of the \"cn\" attribute, which\
    \ is\n   defined in [RFC4519]. \"cn\" is used to represent the name of the DUA\n\
    \   configuration profile and is recommended for the relative\n   distinguished\
    \ name (RDN) [RFC4514] naming attribute.  This object\n   class is used specifically\
    \ by the DUA described in Section 4.  The\n   syntax used to describe this object\
    \ class is defined in [RFC4512],\n   Section 4.1.1.\n   ( 1.3.6.1.4.1.11.1.3.1.2.5\
    \ NAME 'DUAConfigProfile'\n     SUP top STRUCTURAL\n     DESC 'Abstraction of\
    \ a base configuration for a DUA'\n     MUST ( cn )\n     MAY ( defaultServerList\
    \ $ preferredServerList $\n           defaultSearchBase $ defaultSearchScope $\n\
    \           searchTimeLimit $ bindTimeLimit $\n           credentialLevel $ authenticationMethod\
    \ $\n           followReferrals $ dereferenceAliases $\n           serviceSearchDescriptor\
    \ $ serviceCredentialLevel $\n           serviceAuthenticationMethod $ objectclassMap\
    \ $\n           attributeMap $ profileTTL ) )\n"
- title: 4.  DUA Implementation Details
  contents:
  - "4.  DUA Implementation Details\n   This section describes an implementation of\
    \ the schema described in\n   Section 3.  Details about how a DUA should format\
    \ and interpret the\n   defined attributes are described below.  Agents that make\
    \ use of the\n   DUAConfigProfile object class are expected to follow the\n  \
    \ specifications in this section.\n   Note: Many of the subsections below contain\
    \ examples.  Unless\n   otherwise specified, these examples are rendered using\
    \ the LDAP Data\n   Interchange Format (LDIF) [RFC2849].\n"
- title: 4.1.  Interpreting the preferredServerList Attribute
  contents:
  - "4.1.  Interpreting the preferredServerList Attribute\n   Interpretation:\n  \
    \    As described by the syntax, the preferredServerList parameter is a\n    \
    \  whitespace-separated list of server addresses and associated port\n      numbers.\
    \  When the DUA needs to contact a directory server agent\n      (DSA), the DUA\
    \ MUST first attempt to contact one of the servers\n      listed in the preferredServerList\
    \ attribute.  The DUA MUST contact\n      the DSA specified by the first server\
    \ address in the list.  If\n      that DSA is unavailable, the remaining DSAs\
    \ MUST be queried in the\n      order provided (left to right) until a connection\
    \ is established\n      with a DSA.  Once a connection with a DSA is established,\
    \ the DUA\n      SHOULD NOT attempt to establish a connection with the remaining\n\
    \      DSAs.  The purpose of enumerating multiple DSAs is not for\n      supplemental\
    \ data, but for high availability of replicated data.\n      This is also the\
    \ main reason why an LDAP URL [RFC3986] syntax was\n      not selected for this\
    \ document.\n      If the DUA is unable to contact any of the DSAs specified by\
    \ the\n      preferredServerList, the defaultServerList attribute MUST be\n  \
    \    examined, as described in Section 4.2.  The servers identified by\n     \
    \ the preferredServerList MUST be contacted before attempting to\n      contact\
    \ any of the servers specified by the defaultServerList.\n   Syntax:\n      serverList\
    \ = hostport *(SP [hostport])\n   Default Value:\n      The preferredServerList\
    \ attribute does not have a default value.\n      Instead a DUA MUST examine the\
    \ defaultServerList attribute.\n   Other attribute notes:\n      This attribute\
    \ is used in conjunction with the defaultServerList\n      attribute.  Please\
    \ see Section 4.2 for additional implementation\n      notes.  Determining how\
    \ the DUA should query the DSAs also depends\n      on the additional configuration\
    \ attributes, credentialLevel,\n      serviceCredentialLevel, bindTimeLimit,\n\
    \      serviceAuthenticationMethod, and authenticationMethod.  Please\n      review\
    \ Section 5 for details on how a DUA should properly bind to\n      a DSA.\n \
    \  Example:\n         preferredServerList: 192.168.169.170 ldap1.mycorp.com\n\
    \           ldap2:1389 [1080::8:800:200C:417A]:389\n"
- title: 4.2.  Interpreting the defaultServerList Attribute
  contents:
  - "4.2.  Interpreting the defaultServerList Attribute\n   Interpretation:\n    \
    \  The defaultServerList attribute MUST only be examined if the\n      preferredServerList\
    \ attribute is not provided, or the DUA is\n      unable to establish a connection\
    \ with any of the DSAs specified by\n      the preferredServerList.\n      If\
    \ more than one address is provided, the DUA may choose either to\n      accept\
    \ the order provided or to create its own order, based on\n      what the DUA\
    \ determines is the \"best\" order of DSAs to query.  For\n      example, the\
    \ DUA may choose to examine the server list and to\n      query the DSAs in order\
    \ based on the \"closest\" server or the\n      server with the least amount of\
    \ \"load\".  Interpretation of the\n      \"best\" server order is entirely up\
    \ to the DUA, and not part of\n      this document.\n      Once the order of server\
    \ addresses is determined, the DUA contacts\n      the DSA specified by the first\
    \ server address in the list.  If\n      that DSA is unavailable, the remaining\
    \ DSAs SHOULD be queried\n      until an available DSA is found, or no more DSAs\
    \ are available.\n      If a server address or port is invalid, the DUA SHOULD\
    \ proceed to\n      the next server address as described just above.\n   Syntax:\n\
    \      serverList = hostport *(SP [hostport])\n   Default Value:\n      If a defaultServerList\
    \ attribute is not provided, the DUA MAY\n      attempt to contact the same DSA\
    \ that provided the configuration\n      profile entry itself.  The default DSA\
    \ is contacted only if the\n      preferredServerList attribute is also not provided.\n\
    \   Other attribute notes:\n      This attribute is used in conjunction with the\
    \ preferredServerList\n      attribute.  Please see Section 4.1 for additional\
    \ implementation\n      notes.  Determining how the DUA should query the DSAs\
    \ also depends\n      on the additional configuration attributes, credentialLevel,\n\
    \      serviceCredentialLevel, bindTimeLimit,\n      serviceAuthenticationMethod,\
    \ and authenticationMethod.  Please\n      review Section 5 for details on how\
    \ a DUA should properly contact\n      a DSA.\n   Example:\n         defaultServerList:\
    \ 192.168.169.170 ldap1.mycorp.com\n           ldap2:1389 [1080::8:800:200C:417A]:5912\n"
- title: 4.3.  Interpreting the defaultSearchBase Attribute
  contents:
  - "4.3.  Interpreting the defaultSearchBase Attribute\n   Interpretation:\n    \
    \  When a DUA needs to search the DSA for information, this attribute\n      provides\
    \ the base for the search.  This parameter can be\n      overridden or appended\
    \ by the serviceSearchDescriptor attribute.\n      See Section 4.6.\n   Syntax:\n\
    \      Defined by OID 1.3.6.1.4.1.1466.115.121.1.12 [RFC4517].\n   Default Value:\n\
    \      There is no default value for the defaultSearchBase.  A DUA MAY\n     \
    \ define its own method for determining the search base, if the\n      defaultSearchBase\
    \ is not provided.\n   Other attribute notes:\n      This attribute is used in\
    \ conjunction with the\n      serviceSearchDescriptor attribute.  See Section\
    \ 4.6.\n   Example:\n         defaultSearchBase: dc=mycompany,dc=com\n"
- title: 4.4.  Interpreting the authenticationMethod Attribute
  contents:
  - "4.4.  Interpreting the authenticationMethod Attribute\n   Interpretation:\n \
    \     The authenticationMethod attribute defines an ordered list of LDAP\n   \
    \   bind methods to be used when attempting to contact a DSA.  The\n      serviceAuthenticationMethod\
    \ overrides this value for a particular\n      service (see Section 4.15).  Each\
    \ method MUST be attempted in the\n      order provided by the attribute, until\
    \ a successful LDAP bind is\n      performed (\"none\" is assumed to always be\
    \ successful).  However,\n      the DUA MAY skip over one or more methods.  See\
    \ Section 5 for more\n      information.\n      none   - The DUA does not perform\
    \ an LDAP bind.\n      simple - The DUA performs an LDAP simple bind.\n      sasl\
    \   - The DUA performs an LDAP Simple Authentication and\n               Security\
    \ Layer (SASL) [RFC4422] bind using the specified\n               SASL mechanism\
    \ and options.\n      tls    - The DUA performs an LDAP StartTLS operation followed\
    \ by\n               the specified bind method (for more information refer to\n\
    \               Section 4.14 of [RFC4511]).\n   Syntax:\n      authMethod  = method\
    \ *(\";\" method)\n      method      = none / simple / sasl / tls\n      none\
    \        = \"none\"\n      simple      = \"simple\"\n      sasl        = \"sasl/\"\
    \ saslmech [ \":\" sasloption ]\n      sasloption  = \"auth-conf\" / \"auth-int\"\
    \n      tls         = \"tls:\" (none / simple / sasl)\n      saslmech    = SASL\
    \ mechanism name as defined in [SASLMECH]\n      Note: Although multiple authentication\
    \ methods may be specified in\n      the syntax, at most one of each type is allowed.\
    \  That is,\n      \"simple;simple\" is invalid.\n   Default Value:\n      If\
    \ the authenticationMethod or serviceAuthenticationMethod (for\n      that particular\
    \ service) attributes are not provided, the DUA MAY\n      choose to bind to the\
    \ DSA using any method defined by the DUA.\n      However, if either authenticationMethod\
    \ or\n      serviceAuthenticationMethod is provided, the DUA MUST only use the\n\
    \      methods specified.\n   Other attribute notes:\n      When using TLS, the\
    \ string \"tls:sasl/EXTERNAL\" implies that both\n      client and server (DSA\
    \ and DUA) authentications are to be\n      performed.  Any other TLS authentication\
    \ method implies server-\n      only (DSA side credential) authentication, along\
    \ with the other\n      SASL method used for DUA-side authentication.\n      Determining\
    \ how the DUA should bind to the DSAs also depends on\n      the additional configuration\
    \ attributes, credentialLevel,\n      serviceCredentialLevel, serviceAuthenticationMethod,\
    \ and\n      bindTimeLimit.  Please review Section 5 for details on how to\n \
    \     properly bind to a DSA.\n   Example:\n      authenticationMethod: tls:simple;sasl/DIGEST-MD5\n\
    \      (see [RFC2831])\n"
- title: 4.5.  Interpreting the credentialLevel Attribute
  contents:
  - "4.5.  Interpreting the credentialLevel Attribute\n   Interpretation:\n      The\
    \ credentialLevel attribute defines what type(s) of\n      credential(s) the DUA\
    \ MUST use when contacting the DSA.  The\n      serviceCredentialLevel overrides\
    \ this value for a particular\n      service (Section 4.16).  The credentialLevel\
    \ can contain more than\n      one credential type, separated by whitespace.\n\
    \      anonymous The DUA SHOULD NOT use a credential when binding to the\n   \
    \             DSA.\n      proxy     The DUA SHOULD use a known proxy identity\
    \ when binding\n                to the DSA.  A proxy identity is a specific credential\n\
    \                that was created to represent the DUA.  This document\n     \
    \           does not define how the proxy user should be created, or\n       \
    \         how the DUA should determine what the proxy user's\n               \
    \ credential is.  This functionality is up to each\n                implementation.\n\
    \      self      When the DUA is acting on behalf of a known identity,\n     \
    \           the DUA MUST attempt to bind to the DSA as that\n                identity.\
    \  The DUA should contain methods to determine\n                the identity of\
    \ the user such that the identity can be\n                authenticated by the\
    \ directory server using the defined\n                authentication methods.\n\
    \      If the credentialLevel contains more than one credential type, the\n  \
    \    DUA MUST use the credential types in the order specified.\n      However,\
    \ the DUA MAY skip over one or more credential types.  As\n      soon as the DUA\
    \ is able to successfully bind to the DSA, the DUA\n      SHOULD NOT attempt to\
    \ bind using the remaining credential types.\n   Syntax:\n      credentialLevel\
    \   = level *(SP level)\n      level             = self / proxy / anonymous\n\
    \      self              = \"self\"\n      proxy             = \"proxy\"\n   \
    \   anonymous         = \"anonymous\"\n      Note: Although multiple credential\
    \ levels may be specified in the\n      syntax, at most one of each type is allowed.\
    \  Refer to\n      implementation notes in Section 5 for additional syntax\n \
    \     requirements for the credentialLevel attribute.\n   Default Value:\n   \
    \   If the credentialLevel attribute is not defined, the DUA SHOULD\n      NOT\
    \ use a credential when binding to the DSA (also known as\n      anonymous).\n\
    \   Other attribute notes:\n      Determining how the DUA should bind to the DSAs\
    \ also depends on\n      the additional configuration attributes, authenticationMethod,\n\
    \      serviceAuthenticationMethod, serviceCredentialLevel, and\n      bindTimeLimit.\
    \  Please review Section 5 for details on how to\n      properly bind to a DSA.\n\
    \   Example:\n         credentialLevel: proxy anonymous\n"
- title: 4.6.  Interpreting the serviceSearchDescriptor Attribute
  contents:
  - "4.6.  Interpreting the serviceSearchDescriptor Attribute\n   Interpretation:\n\
    \      The serviceSearchDescriptor attribute defines how and where a DUA\n   \
    \   SHOULD search for information for a particular service.  The\n      serviceSearchDescriptor\
    \ contains a serviceID, followed by one or\n      more base-scope-filter triples.\
    \  These base-scope-filter triples\n      are used to define searches only for\
    \ the specific service.\n      Multiple base-scope-filters allow the DUA to search\
    \ for data in\n      multiple locations in the directory information tree (DIT).\n\
    \      Although this syntax is very similar to the LDAP URL [RFC3986],\n     \
    \ this document requires the ability to supply multiple hosts as\n      part of\
    \ the configuration of the DSA.  In addition, an ordered\n      list of search\
    \ descriptors is required, which cannot be specified\n      by the LDAP URL.\n\
    \      The serviceSearchDescriptor might also contain the DN of an entry\n   \
    \   that will contain an alternate profile.  The DSA SHOULD re-\n      evaluate\
    \ the alternate profile and perform searches as specified\n      by that profile.\n\
    \      If the base, as defined in the serviceSearchDescriptor, is\n      followed\
    \ by the \",\" (ASCII 0x2C) character, this base is known as\n      a relative\
    \ base.  This relative base may be constructed of one or\n      more RDN components.\
    \  In this case, the DUA MUST define the search\n      base by appending the relative\
    \ base with the defaultSearchBase.\n   Syntax:\n      serviceSearchList = serviceID\
    \ \":\" serviceSearchDesc *(\";\"\n                          serviceSearchDesc)\n\
    \      serviceSearchDesc = confReferral / searchDescriptor\n      searchDescriptor\
    \  = [base] [\"?\" [scopeSyntax] [\"?\" [filter]]]\n      confReferral      =\
    \ \"ref:\" distinguishedName\n      base              = distinguishedName / relativeBaseName\n\
    \      relativeBaseName  = 1*(relativeDistinguishedName \",\")\n      filter \
    \           = UTF-8 encoded string\n      If the confReferral, base, relativeBaseName,\
    \ or filter contains\n      the \";\" (ASCII 0x3B), \"?\"  (ASCII 0x3F), \"\"\"\
    \ (ASCII 0x22), or \"\\\"\n      (ASCII 0x5C) characters, those characters MUST\
    \ be escaped\n      (preceded by the \"\\\" character).  Alternately, the DN may\
    \ be\n      surrounded by quotes (ASCII 0x22).  Refer to RFC 4514.  If the\n \
    \     confReferral, base, relativeBaseName, or filter are surrounded by\n    \
    \  quotes, only the \"\"\" character needs to be escaped.  Any character\n   \
    \   that does not need to be escaped, and yet is preceded by the \"\\\"\n    \
    \  character, results in both the \"\\\" character and the character\n      itself.\n\
    \      The usage and syntax of the filter string MUST be defined by the\n    \
    \  DUA service.  A suggested syntax would be that defined by\n      [RFC4515].\n\
    \      If a DUA is performing a search for a particular service that has\n   \
    \   a serviceSearchDescriptor defined, the DUA MUST set the base,\n      scope,\
    \ and filter as defined.  Each base-scope-filter triple\n      represents a single\
    \ LDAP search operation.  If multiple base-\n      scope-filter triples are provided\
    \ in the serviceSearchDescriptor,\n      the DUA SHOULD perform multiple search\
    \ requests, and in that case,\n      it MUST be in the order specified by the\
    \ serviceSearchDescriptor.\n      FYI: Service search descriptors do not exactly\
    \ follow the LDAP URL\n      syntax [RFC4516].  The reasoning for this difference\
    \ is to\n      separate the host name(s) from the filter.  This allows the DUA\
    \ to\n      have a more flexible solution in choosing its DSA.\n   Default Value:\n\
    \      If a serviceSearchDescriptor, or an element thereof, is not\n      defined\
    \ for a particular service, the DUA SHOULD create the base,\n      scope, and\
    \ filter as follows:\n      base   - Same as the defaultSearchBase.\n      scope\
    \  - Same as the defaultSearchScope.\n      filter - Use defaults as defined by\
    \ DUA's service.\n      If the defaultSearchBase or defaultSearchScope is not\
    \ defined,\n      then the DUA service MAY use its own default.\n   Other attribute\
    \ notes:\n      If a serviceSearchDescriptor exists for a given service, the\n\
    \      service MUST use at least one base-scope-filter triple in\n      performing\
    \ searches.  It SHOULD perform multiple searches per\n      service if multiple\
    \ base-scope-filter triples are defined for that\n      service.\n      The details\
    \ of how the \"filter\" is interpreted by each DUA's\n      service is defined\
    \ by that service.  This means the filter is NOT\n      REQUIRED to be a legal\
    \ LDAP filter [RFC4515].  Furthermore,\n      determining how attribute and object\
    \ class mapping affects that\n      search filter MUST be defined by the service.\
    \  That is, the DUA\n      SHOULD specify if the attributes in the filter are\
    \ assumed to\n      already have been mapped, or if it is expected that attribute\n\
    \      mapping (see Section 4.7) would be applied to the filter.  In\n      general\
    \ practice, implementation and usability suggests that\n      attribute and object\
    \ class mapping (Sections 4.7 and 4.13) SHOULD\n      NOT be applied to the filter\
    \ defined in the\n      serviceSearchDescriptor.\n      The serviceID is unique\
    \ to a given service within the scope of any\n      DUA that might use the given\
    \ profile, and should be defined by\n      that service.  Registration of serviceIDs\
    \ is not addressed by this\n      document.  However, as per the guidance at the\
    \ end of Section 1,\n      when DUA developers define their use of the DUAConfigProfile\n\
    \      schema, they will define the serviceIDs used by that DUA.\n      searchGuide\
    \ and enhancedSearchGuide [RFC4517]:\n      There are a few reasons why the authors\
    \ chose not to take\n      advantage of the existing searchGuide and enhancedSearchGuide\n\
    \      attributes and related syntaxes.  While the enhancedSearchGuide\n     \
    \ met a number of the serviceSearchDescriptor requirements,\n      serviceSearchDescriptor\
    \ was developed primarily to support\n      associating search operations with\
    \ services.  Multiple services\n      could be configured using the same profile,\
    \ thus requiring the\n      serviceID to be specified together with the search\
    \ descriptor\n      information.  A few other reasons for not using\n      enhancedSearchGuide\
    \ include:\n         The need to specify alternate search bases, including the\n\
    \         ability to specify search bases that are relative to the parent\n  \
    \       defaultSearchBase.\n         The need to specify alternate profiles using\
    \ the \"ref:\" syntax.\n         The ability for individual services to specify\
    \ their own\n         syntaxes for the format of the search filter.\n        \
    \ The authors' belief that the user community is more familiar\n         with\
    \ the search filter syntax described by RFC 4515 than with\n         that described\
    \ by the enhancedSearchGuide syntax.\n   Example:\n         defaultSearchBase:\
    \ dc=mycompany,dc=com\n         serviceSearchDescriptor: email:ou=people,ou=org1,?\n\
    \          one;ou=contractor,?one;\n          ref:cn=profile,dc=mycompany,dc=com\n\
    \      In this example, the DUA MUST search in\n      \"ou=people,ou=org1,dc=mycompany,dc=com\"\
    \ first.  The DUA then\n      SHOULD search in \"ou=contractor,dc=mycompany,dc=com\"\
    , and finally\n      it SHOULD search other locations as specified in the profile\n\
    \      described at \"cn=profile,dc=mycompany,dc=com\".  For more examples,\n\
    \      see Appendix A.\n"
- title: 4.7.  Interpreting the attributeMap Attribute
  contents:
  - "4.7.  Interpreting the attributeMap Attribute\n   Interpretation:\n      A DUA\
    \ SHOULD perform attribute mapping for all LDAP operations\n      performed for\
    \ a service that has an attributeMap entry.  Because\n      attribute mapping\
    \ is specific to each service within the DUA, a\n      \"serviceID\" is required\
    \ as part of the attributeMap syntax.  That\n      is, not all DUA services should\
    \ necessarily perform the same\n      attribute mapping.\n      Attribute mapping\
    \ in general is expected to be used to map\n      attributes of similar syntaxes\
    \ as specified by the service\n      supported by the DUA.  However, a DUA is\
    \ NOT REQUIRED to verify\n      syntaxes of mapped attributes.  If the DUA does\
    \ discover that the\n      syntax of the mapped attribute does not match that\
    \ of the original\n      attribute, the DUA MAY perform translation between the\
    \ original\n      syntax and the new syntax.  When DUAs do support attribute value\n\
    \      translation, the method and list of capable translations SHOULD be\n  \
    \    documented in a description of the DUA service.\n   Syntax:\n      attributeMap\
    \      = serviceID \":\" origAttribute \"=\" attributes\n      origAttribute \
    \    = attribute\n      attributes        = wattribute *( SP wattribute )\n  \
    \    wattribute        = WSP newAttribute WSP\n      newAttribute      = descr\
    \ / \"*NULL*\"\n      attribute         = descr\n      Values of the origAttribute\
    \ are defined by and SHOULD be\n      documented for the DUA service, as a list\
    \ of known supported\n      attributes.\n   Default Value:\n      By default,\
    \ attributes that are used by a DUA service are not\n      mapped unless mapped\
    \ by the attributeMap attributes.  The DUA\n      SHOULD NOT map an attribute\
    \ unless it is explicitly defined by an\n      attributeMap attribute.\n   Other\
    \ attribute notes:\n      When an attribute is mapped to the special keystring\
    \ \"*NULL*\", the\n      DUA SHOULD NOT request that attribute from the DSA, when\n\
    \      performing a search or compare request.  If the DUA is also\n      capable\
    \ of performing modification on the DSA, the DUA SHOULD NOT\n      attempt to\
    \ modify any attribute which has been mapped to \"*NULL*\".\n      It is assumed\
    \ the serviceID is unique to a given service within\n      the scope of the DSA.\n\
    \      A DUA SHOULD support attribute mapping.  If it does, the following\n  \
    \    additional rules apply:\n      1.  The list of attributes that are allowed\
    \ to be mapped SHOULD be\n          defined by and documented for the service.\n\
    \      2.  Any supported translation of mapping from attributes of\n         \
    \ dissimilar syntax SHOULD also be defined and documented.\n      3.  If an attribute\
    \ may be mapped to multiple attributes, the DSA\n          SHOULD define a syntax\
    \ or usage statement for how the new\n          attribute value will be constructed.\
    \  Furthermore, the\n          resulting translated syntax of the combined attributes\
    \ MUST be\n          the same as the attribute being mapped.\n      4.  A DUA\
    \ MUST support mapping of attributes using the attribute\n          OID.  It SHOULD\
    \ support attribute mapping based on the\n          attribute name.\n      5.\
    \  It is recommended that attribute mapping not be applied to\n          parents\
    \ of the target entries.\n      6.  Attribute mapping is not recursive.  In other\
    \ words, if an\n          attribute has been mapped to a target attribute, that\
    \ new\n          target attribute MUST NOT be mapped to a third attribute.\n \
    \     7.  A given attribute MUST only be mapped once for a given\n          service.\n\
    \   Example:\n      Suppose a DUA is acting on behalf of an email service.  By\
    \ default\n      the \"email\" service uses the \"mail\", \"cn\", and \"sn\" attributes\
    \ to\n      discover mail addresses.  However, the email service has been\n  \
    \    deployed in an environment that uses \"employeeName\" instead of\n      \"\
    cn\".  Also, instead of using the \"mail\" attribute for email\n      addresses,\
    \ the \"email\" attribute is used.  In this case, the\n      attribute \"cn\"\
    \ can be mapped to \"employeeName\", allowing the DUA\n      to perform searches\
    \ using the \"employeeName\" attribute as part of\n      the search filter, instead\
    \ of \"cn\".  Also, \"mail\" can be mapped to\n      \"email\" when attempting\
    \ to retrieve the email address.  This\n      mapping is performed by adding the\
    \ attributeMap attributes to the\n      configuration profile entry as follows\
    \ (represented in LDIF\n      [RFC2849]):\n                    attributeMap: email:cn=employeeName\n\
    \                    attributeMap: email:mail=email\n   As described above, the\
    \ DUA MAY also map a single attribute to\n   multiple attributes.  When mapping\
    \ a single attribute to more than\n   one attribute, the new syntax or usage of\
    \ the mapped attribute must\n   be intrinsically defined by the DUAs service.\n\
    \                 attributeMap: email:cn=firstName lastName\n   In the above example,\
    \ the DUA creates the new value by generating a\n   space-separated string using\
    \ the values of the mapped attributes.  In\n   this case, a special mapping must\
    \ be defined so that a proper search\n   filter can be created.  For further information\
    \ on this example,\n   please refer to Appendix A.\n      Another possibility\
    \ for multiple attribute mapping might come in\n      when constructing returned\
    \ attributes.  For example, perhaps all\n      email addresses are of a guaranteed\
    \ syntax of \"uid@domain\".  In\n      this example, the uid and domain are separate\
    \ attributes in the\n      directory.  The email service may define that if the\
    \ \"mail\"\n      attribute is mapped to two different attributes, it will construct\n\
    \      the email address as a concatenation of the two attributes (uid\n     \
    \ and domain), placing the \"@\" character between them.\n                   \
    \ attributeMap: email:mail=uid domain\n   Note: The attributeMap attribute contains\
    \ only a list of attribute\n   names that should be mapped, not the definition\
    \ of how syntax\n   translation should be performed.  The process used to perform\n\
    \   attribute value syntax translation (such as translating a uid to a\n   DN)\
    \ and/or joining of multiple attribute values to form the target\n   syntax (such\
    \ as in the above email example) is up to the service.\n   The attribute list\
    \ defined in the attributeMap merely provides the\n   attributes that would be\
    \ used as inputs to the translation function\n   provided by the service.\n"
- title: 4.8.  Interpreting the searchTimeLimit Attribute
  contents:
  - "4.8.  Interpreting the searchTimeLimit Attribute\n   Interpretation:\n      The\
    \ searchTimeLimit attribute defines the maximum time, in\n      seconds, that\
    \ the DUA SHOULD allow for a search request to\n      complete.\n   Syntax:\n\
    \      Defined by OID 1.3.6.1.4.1.1466.115.121.1.27 [RFC4517].\n   Default Value:\n\
    \      If the searchTimeLimit attribute is not defined or is zero, the\n     \
    \ searchTimeLimit SHOULD NOT be enforced by the DUA.\n   Other attribute notes:\n\
    \      This time limit only includes the amount of time required to\n      perform\
    \ the LDAP search operation.  If other operations are\n      required, they do\
    \ not need to be considered part of the search\n      time.  See bindTimeLimit\
    \ for the LDAP bind operation.\n"
- title: 4.9.  Interpreting the bindTimeLimit Attribute
  contents:
  - "4.9.  Interpreting the bindTimeLimit Attribute\n   Interpretation:\n      The\
    \ bindTimeLimit attribute defines the maximum time, in seconds,\n      that a\
    \ DUA SHOULD allow for the bind request to complete when\n      performed against\
    \ each server on the preferredServerList or\n      defaultServerList.\n   Syntax:\n\
    \      Defined by OID 1.3.6.1.4.1.1466.115.121.1.27.\n   Default Value:\n    \
    \  If the bindTimeLimit attribute is not defined or is zero, the\n      bindTimeLimit\
    \ SHOULD NOT be enforced by the DUA.\n   Other attribute notes:\n      This time\
    \ limit only includes the amount of time required to\n      perform the LDAP bind\
    \ operation.  If other operations are\n      required, those operations do not\
    \ need to be considered part of\n      the bind time.  See searchTimeLimit for\
    \ the LDAP search operation.\n"
- title: 4.10.  Interpreting the followReferrals Attribute
  contents:
  - "4.10.  Interpreting the followReferrals Attribute\n   Interpretation:\n     \
    \ If set to TRUE, the DUA SHOULD follow any referrals if discovered.\n      If\
    \ set to FALSE, the DUA MUST NOT follow referrals.\n   Syntax:\n      Defined\
    \ by OID 1.3.6.1.4.1.1466.115.121.1.7 [RFC4517].\n   Default Value:\n      If\
    \ the followReferrals attribute is not set or set to an invalid\n      value,\
    \ the default value is TRUE.\n"
- title: 4.11.  Interpreting the dereferenceAliases Attribute
  contents:
  - "4.11.  Interpreting the dereferenceAliases Attribute\n   Interpretation:\n  \
    \    If set to TRUE, the DUA SHOULD enable alias dereferencing.\n      If set\
    \ to FALSE, the DUA MUST NOT enable alias dereferencing.\n   Syntax:\n      Defined\
    \ by OID 1.3.6.1.4.1.1466.115.121.1.7.\n   Default Value:\n      If the dereferenceAliases\
    \ attribute is not set or set to an\n      invalid value, the default value is\
    \ TRUE.\n"
- title: 4.12.  Interpreting the profileTTL Attribute
  contents:
  - "4.12.  Interpreting the profileTTL Attribute\n   Interpretation:\n      The profileTTL\
    \ attribute defines how often the DUA SHOULD reload\n      and reconfigure itself\
    \ using the corresponding configuration\n      profile entry.  The value is represented\
    \ in seconds.  Once a DUA\n      reloads the profile entry, it SHOULD reconfigure\
    \ itself with the\n      new values.\n   Syntax:\n      Defined by OID 1.3.6.1.4.1.1466.115.121.1.27.\n\
    \   Default Value:\n      If not specified, the DUA MAY use its own reconfiguration\
    \ policy.\n   Other attribute notes:\n      If the profileTTL value is zero, the\
    \ DUA SHOULD NOT automatically\n      reload the configuration profile.\n"
- title: 4.13.  Interpreting the objectclassMap Attribute
  contents:
  - "4.13.  Interpreting the objectclassMap Attribute\n   Interpretation:\n      A\
    \ DUA MAY perform object class mapping for all LDAP operations\n      performed\
    \ for a service that has an objectclassMap entry.  Because\n      object class\
    \ mapping is specific for each service within the DUA,\n      a \"serviceID\"\
    \ is required as part of the objectclassMap syntax.\n      That is, not all DUA\
    \ services should necessarily perform the same\n      object class mapping.\n\
    \      Object class mapping SHOULD be used in conjunction with attribute\n   \
    \   mapping to map the schema required by the service to an equivalent\n     \
    \ schema that is available in the directory.\n      Object class mapping may or\
    \ may not be required by a DUA.  Often,\n      the objectclass attribute is used\
    \ in search filters.  Section 4.7\n      recommends that attribute mapping not\
    \ be applied to the\n      serviceSearchDescriptor.  Thus, if the default object\
    \ classes are\n      not used in a DUA deployment, typically only the\n      serviceSearchDescriptor\
    \ needs to be defined to reflect that\n      mapping.  However, when the service\
    \ search descriptor is not\n      provided, and the default search filter for\
    \ that service contains\n      the objectclass attribute, that search filter SHOULD\
    \ be redefined\n      by object class mapping, if defined.  If a default search\
    \ filter\n      is not used, it SHOULD be redefined through the\n      serviceSearchDescriptor.\
    \  If a serviceSearchDescriptor is defined\n      for a particular service, it\
    \ SHOULD NOT be remapped by either the\n      objectclassMap or attributeMap values.\n\
    \      One condition where the objectclassMap SHOULD be used is when the\n   \
    \   DUA is providing gateway functionality.  In this case, the DUA is\n      acting\
    \ on behalf of another service, which may pass in a search\n      filter itself.\
    \  In this type of DUA, the DUA may alter the search\n      filter according to\
    \ the appropriate attributeMap and\n      objectclassMap values.  In this case,\
    \ it is also assumed that a\n      serviceSearchDescriptor is not defined.\n \
    \  Syntax:\n      objectclassMap    = serviceID \":\" origObjectclass \"=\" objectclass\n\
    \      origObjectclass   = objectclass\n      objectclass       = keystring\n\
    \      Values of the origObjectclass depend on the type of DUA Service\n     \
    \ using the object class mapping feature.\n   Default Value:\n      The DUA MUST\
    \ NOT remap an object class unless it is explicitly\n      defined by an objectclassMap\
    \ attribute.\n   Other attribute notes:\n      A DUA SHOULD support object class\
    \ mapping.  If it does, the DUA\n      MUST support mapping of object classes\
    \ using the objectclass OID.\n      It SHOULD support object class mapping based\
    \ on the object class\n      name.\n      It is assumed the serviceID is unique\
    \ to a given service within\n      the scope of the DSA.\n   Example:\n      Suppose\
    \ a DUA is acting on behalf of an email service.  By default\n      the \"email\"\
    \ service uses the \"mail\", \"cn\", and \"sn\" attributes to\n      discover\
    \ mail addresses in entries created using inetOrgPerson\n      object class [RFC2789].\
    \  However, the email service has been\n      deployed in an environment that\
    \ uses entries created using\n      \"employee\" object class.  In this case,\
    \ the attribute \"cn\" can be\n      mapped to \"employeeName\", and \"inetOrgPerson\"\
    \ can be mapped to\n      \"employee\", allowing the DUA to perform LDAP operations\
    \ using the\n      entries that exist in the directory.  This mapping is performed\
    \ by\n      adding attributeMap and objectclassMap attributes to the\n      configuration\
    \ profile entry as follows (represented in LDIF\n      [RFC2849]):\n         \
    \       attributeMap: email:cn=employeeName\n                objectclassMap: email:inetOrgPerson=employee\n"
- title: 4.14.  Interpreting the defaultSearchScope Attribute
  contents:
  - "4.14.  Interpreting the defaultSearchScope Attribute\n   Interpretation:\n  \
    \    When a DUA needs to search the DSA for information, this attribute\n    \
    \  provides the \"scope\" for the search.  This parameter can be\n      overridden\
    \ by the serviceSearchDescriptor attribute.  See\n      Section 4.6.\n   Syntax:\n\
    \      scopeSyntax = \"base\" / \"one\" / \"sub\"\n   Default Value:\n      The\
    \ default value for the defaultSearchScope SHOULD be defined by\n      the DUA\
    \ service.  If the default search scope for a service is not\n      defined, then\
    \ the scope SHOULD be for the DUA to perform a subtree\n      search.\n"
- title: 4.15.  Interpreting the serviceAuthenticationMethod Attribute
  contents:
  - "4.15.  Interpreting the serviceAuthenticationMethod Attribute\n   Interpretation:\n\
    \      The serviceAuthenticationMethod attribute defines an ordered list\n   \
    \   of LDAP bind methods to be used when attempting to contact a DSA\n      for\
    \ a particular service.  Interpretation and use of this\n      attribute is the\
    \ same as Section 4.4, but specific for each\n      service.\n   Syntax:\n   \
    \   svAuthMethod = serviceID \":\" method *(\";\" method)\n      Note: Although\
    \ multiple authentication methods may be specified in\n      the syntax, at most\
    \ one of each type is allowed.\n   Default Value:\n      If the serviceAuthenticationMethod\
    \ attribute is not provided, the\n      authenticationMethod SHOULD be followed,\
    \ or its default.\n   Other attribute notes:\n      Determining how the DUA should\
    \ bind to the DSAs also depends on\n      the additional configuration attributes,\
    \ credentialLevel,\n      serviceCredentialLevel, and bindTimeLimit.  Please review\n\
    \      Section 5 for details on how to properly bind to a DSA.\n   Example:\n\
    \         serviceAuthenticationMethod: email:tls:simple;sasl/DIGEST-MD5\n"
- title: 4.16.  Interpreting the serviceCredentialLevel Attribute
  contents:
  - "4.16.  Interpreting the serviceCredentialLevel Attribute\n   Interpretation:\n\
    \      The serviceCredentialLevel attribute defines what type(s) of\n      credential(s)\
    \ the DUA SHOULD use when contacting the DSA for a\n      particular service.\
    \  Interpretation and use of this attribute are\n      the same as Section 4.5.\n\
    \   Syntax:\n      svCredentialLevel = serviceID \":\" level *(SP level)\n   \
    \   Refer to implementation notes in Section 5 for additional syntax\n      requirements\
    \ for the credentialLevel attribute.\n      Note: Although multiple credential\
    \ levels may be specified in the\n      syntax, at most one of each type is allowed.\n\
    \   Default Value:\n      If the serviceCredentialLevel attribute is not defined,\
    \ the DUA\n      MUST examine the credentialLevel attribute, or if one is not\n\
    \      provided, the DUA must follow its default.\n   Other attribute notes:\n\
    \      Determining how the DUA should bind to the DSAs also depends on\n     \
    \ the additional configuration attributes,\n      serviceAuthenticationMethod,\
    \ authenticationMethod, and\n      bindTimeLimit.  Please review Section 5 for\
    \ details on how to\n      properly bind to a DSA.\n   Example:\n         serviceCredentialLevel:\
    \ email:proxy anonymous\n"
- title: 5.  Binding to the Directory Server
  contents:
  - "5.  Binding to the Directory Server\n   The DUA SHOULD use the following algorithm\
    \ when binding to the\n   server:\n   for (clevel in credLevel) [see Note 1]\n\
    \     if (clevel is \"anonymous\")\n       for (host in hostnames) [see Note 2]\n\
    \         if (server is responding)\n           return success\n       return\
    \ failure\n     else\n       for (amethod in authMethod) [see Note 3]\n      \
    \   if (amethod is none)\n           for (host in hostnames)\n             if\
    \ (server is responding)\n               return success\n           return failure\n\
    \         else\n           for (host in hostnames)\n             authenticate\
    \ using amethod and clevel\n             if (authentication passed)\n        \
    \       return success\n   return failure\n   Note 1:   The credLevel is a list\
    \ of credential levels as defined in\n             serviceCredentialLevel (Section\
    \ 4.16) for a given service.\n             If the serviceCredentialLevel is not\
    \ defined, the DUA MUST\n             examine the credentialLevel attribute.\n\
    \   Note 2:   hostnames is the list of servers to contact as defined in\n    \
    \         Sections 4.1 and 4.2.\n   Note 3:   The authMethod is a list of authentication\
    \ methods as\n             defined in serviceAuthenticationMethod (Section 4.15)\
    \ for a\n             given service.  If the serviceAuthenticationMethod is not\n\
    \             defined, the DUA MUST examine the authenticationMethod\n       \
    \      attribute.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The profile entries MUST be protected against\
    \ unauthorized\n   modification.  Each service needs to consider implications\
    \ of\n   providing its service configuration as part of this profile and limit\n\
    \   access to the profile entries accordingly.\n   The management of the authentication\
    \ credentials for the DUA is\n   outside the scope of this document and needs\
    \ to be handled by the\n   DUA.\n   Since the DUA needs to know how to properly\
    \ bind to the directory\n   server, the access control configuration of the DSA\
    \ MUST assure that\n   the DSA can view all the elements of the DUAConfigProfile\
    \ attributes.\n   For example, if the credentialLevel attribute contains \"Self\"\
    , but\n   the DSA is unable to access the credentialLevel attribute, the DUA\n\
    \   will instead attempt an anonymous connection to the directory server.\n  \
    \ The algorithm described by Section 5 also has security\n   considerations. \
    \ Altering that design will alter the security aspects\n   of the configuration\
    \ profile.\n   At times, DUAs connect to multiple directory servers in order to\n\
    \   support potential high-availability and/or performance requirements.\n   As\
    \ such, each directory server specified in the preferredServer list\n   and defaultServerList\
    \ MUST contain the same (replicated) data and be\n   part of the same security\
    \ domain.  This means the directory-supported\n   authentication methods, authentication\
    \ policies, and access control\n   policies for directory data are exactly the\
    \ same across all the\n   defined directory servers.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   There were several additional authors of this document.\
    \  However, we\n   chose to represent only one author per company in the heading.\
    \  From\n   Sun, we would like to acknowledge Roberto Tam for his design work\
    \ on\n   Sun's first LDAP name service product and his input for this\n   document.\
    \  From Hewlett-Packard, we'd like to acknowledge Dave Binder\n   for his work\
    \ architecting Hewlett-Packard's LDAP name service product\n   as well as his\
    \ design guidance on this document.  We'd also like to\n   acknowledge Grace Lu\
    \ from HP, for her input and implementation of\n   HP's configuration profile\
    \ manager code.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   This document defines new LDAP attributes and an\
    \ object class for\n   object identifier descriptors.  As specified by Section\
    \ 3.4 and\n   required by Section 4 of [RFC4520], this document registers new\n\
    \   descriptors as follows per the Expert Review.\n"
- title: 8.1.  Registration of Object Classes
  contents:
  - "8.1.  Registration of Object Classes\n   Subject:  Request for LDAP Descriptor\
    \ Registration\n   Descriptor (short name): DUAConfigProfile\n   Object Identifier:\
    \  1.3.6.1.4.1.11.1.3.1.2.5\n   Person & email address to contact for further\
    \ information:\n      See \"Author/Change Controller\"\n   Usage: object class\n\
    \   Specification: RFC 4876\n   Author/Change Controller:\n      Bob Neal-Joslin\n\
    \      Hewlett-Packard Company\n      19420 Homestead RD\n      Cupertino, CA\
    \ 95014\n      USA\n      Phone: +1 408-447-3044\n      EMail: bob_joslin@hp.com\n\
    \   Comments:\n      See also the associated request for the defaultServerList,\n\
    \      defaultSearchBase, preferredServerList, searchTimeLimit,\n      bindTimeLimit,\
    \ followReferrals, authenticationMethod,\n      profileTTL, attributeMap, credentialLevel,\
    \ objectclassMap,\n      defaultSearchScope, serviceCredentialLevel,\n      serviceSearchDescriptor,\
    \ serviceAuthenticationMethod, and\n      dereferenceAliases attribute types.\n"
- title: 8.2.  Registration of Attribute Types
  contents:
  - "8.2.  Registration of Attribute Types\n   Subject:  Request for LDAP Descriptor\
    \ Registration\n   Descriptor (short name):  See comments\n   Object Identifier:\
    \  See comments\n   Person & email address to contact for further information:\n\
    \      See \"Author/Change Controller\"\n   Usage:  attribute type\n   Specification:\
    \ RFC 4876\n   Author/Change Controller:\n      Bob Neal-Joslin\n      Hewlett-Packard\
    \ Company\n      19420 Homestead RD\n      Cupertino, CA 95014\n      USA\n  \
    \    Phone: +1 408-447-3044\n      EMail: bob_joslin@hp.com\n   Comments:\n  \
    \    The following object identifiers and associated attribute\n      types have\
    \ been registered.\n        OID                           Attribute Type\n   \
    \     --------------------------    ---------------------------\n        1.3.6.1.4.1.11.1.3.1.1.0\
    \      defaultServerList\n        1.3.6.1.4.1.11.1.3.1.1.1      defaultSearchBase\n\
    \        1.3.6.1.4.1.11.1.3.1.1.2      preferredServerList\n        1.3.6.1.4.1.11.1.3.1.1.3\
    \      searchTimeLimit\n        1.3.6.1.4.1.11.1.3.1.1.4      bindTimeLimit\n\
    \        1.3.6.1.4.1.11.1.3.1.1.5      followReferrals\n        1.3.6.1.4.1.11.1.3.1.1.6\
    \      authenticationMethod\n        1.3.6.1.4.1.11.1.3.1.1.7      profileTTL\n\
    \        1.3.6.1.4.1.11.1.3.1.1.9      attributeMap\n        1.3.6.1.4.1.11.1.3.1.1.10\
    \     credentialLevel\n        1.3.6.1.4.1.11.1.3.1.1.11     objectclassMap\n\
    \        1.3.6.1.4.1.11.1.3.1.1.12     defaultSearchScope\n        1.3.6.1.4.1.11.1.3.1.1.13\
    \     serviceCredentialLevel\n        1.3.6.1.4.1.11.1.3.1.1.14     serviceSearchDescriptor\n\
    \        1.3.6.1.4.1.11.1.3.1.1.15     serviceAuthenticationMethod\n        1.3.6.1.4.1.11.1.3.1.1.16\
    \     dereferenceAliases\n      Please also see the associated registration request\
    \ for the\n      DUAConfigProfile object class.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3986]   Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n\
    \               Resource Identifier (URI): Generic Syntax\", STD 66,\n       \
    \        RFC 3986, January 2005.\n   [RFC4234]   Crocker, D., Ed. and P. Overell,\
    \ \"Augmented BNF for\n               Syntax Specifications: ABNF\", RFC 4234,\
    \ October 2005.\n   [RFC4510]   Zeilenga, K., \"Lightweight Directory Access Protocol\n\
    \               (LDAP): Technical Specification Road Map\", RFC 4510,\n      \
    \         June 2006.\n   [RFC4511]   Sermersheim, J., \"Lightweight Directory\
    \ Access Protocol\n               (LDAP): The Protocol\", RFC 4511, June 2006.\n\
    \   [RFC4512]   Zeilenga, K., \"Lightweight Directory Access Protocol\n      \
    \         (LDAP): Directory Information Models\", RFC 4512,\n               June\
    \ 2006.\n   [RFC4514]   Zeilenga, K., \"Lightweight Directory Access Protocol\n\
    \               (LDAP): String Representation of Distinguished Names\",\n    \
    \           RFC 4514, June 2006.\n   [RFC4516]   Smith, M. and T. Howes, \"Lightweight\
    \ Directory Access\n               Protocol (LDAP): Uniform Resource Locator\"\
    , RFC 4516,\n               June 2006.\n   [RFC4517]   Legg, S., \"Lightweight\
    \ Directory Access Protocol (LDAP):\n               Syntaxes and Matching Rules\"\
    , RFC 4517, June 2006.\n   [RFC4519]   Sciberras, A., \"Lightweight Directory\
    \ Access Protocol\n               (LDAP): Schema for User Applications\", RFC\
    \ 4519,\n               June 2006.\n   [SASLMECH]  IANA, \"SIMPLE AUTHENTICATION\
    \ AND SECURITY LAYER (SASL)\n               MECHANISMS\", July 2006,\n       \
    \        <http://www.iana.org/assignments/sasl-mechanisms>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [MSSFU]     Microsoft Corporation, \"Windows\
    \ Services for Unix 3.5\",\n               <http://www.microsoft.com/windows/sfu/>.\n\
    \   [RFC2307]   Howard, L., \"An Approach for Using LDAP as a Network\n      \
    \         Information Service\", RFC 2307, March 1998.\n   [RFC2789]   Freed,\
    \ N. and S. Kille, \"Mail Monitoring MIB\", RFC 2789,\n               March 2000.\n\
    \   [RFC2831]   Leach, P. and C. Newman, \"Using Digest Authentication as\n  \
    \             a SASL Mechanism\", RFC 2831, May 2000.\n   [RFC2849]   Good, G.,\
    \ \"The LDAP Data Interchange Format (LDIF) -\n               Technical Specification\"\
    , RFC 2849, June 2000.\n   [RFC4422]   Melnikov, A. and K. Zeilenga, \"Simple\
    \ Authentication and\n               Security Layer (SASL)\", RFC 4422, June 2006.\n\
    \   [RFC4515]   Smith, M. and T. Howes, \"Lightweight Directory Access\n     \
    \          Protocol (LDAP): String Representation of Search\n               Filters\"\
    , RFC 4515, June 2006.\n   [RFC4520]   Zeilenga, K., \"Internet Assigned Numbers\
    \ Authority (IANA)\n               Considerations for the Lightweight Directory\
    \ Access\n               Protocol (LDAP)\", BCP 64, RFC 4520, June 2006.\n"
- title: Appendix A.  Examples
  contents:
  - "Appendix A.  Examples\n   In this section, we will describe a fictional DUA that\
    \ provides one\n   service, called the \"email\" service.  This service would\
    \ be similar\n   to an email client that uses an LDAP directory to discover email\n\
    \   addresses based on a textual representation of the recipient's\n   colloquial\
    \ name.\n   This email service is defined by default to expect that users with\n\
    \   email addresses will be of the \"inetOrgPerson\" object class type\n   [RFC2789].\
    \  And by default, the \"email\" service expects the\n   colloquial name to be\
    \ stored in the \"cn\" attribute, while it expects\n   the email address to be\
    \ stored in the \"mail\" attribute (as one would\n   expect as defined by the\
    \ inetOrgPerson object class).\n   As a special feature, the \"email\" service\
    \ will perform a special type\n   of attribute mapping when performing searches.\
    \  If the \"cn\" attribute\n   has been mapped to two or more attributes, the\
    \ \"email\" service will\n   parse the requested search string and map each whitespace-separated\n\
    \   token into the mapped attributes, respectively.\n   The default search filter\
    \ for the \"email\" service is\n   \"(objectclass=inetOrgPerson)\".  The email\
    \ service also defines that\n   when it performs a name-to-address discovery,\
    \ it will wrap the search\n   filter inside a complex search filter as follows:\n\
    \   (&(<filter>)(cn~=<name string>))\n   Or, if \"cn\" has been mapped to multiple\
    \ attributes, that wrapping\n   would appear as follows:\n   (&(<filter>)(attr1~=<token1>)(attr2~=<token2>)...)\n\
    \   The below examples show how the \"email\" service builds its search\n   requests,\
    \ based on the defined profile.  In all cases, the\n   defaultSearchBase is \"\
    o=airius.com\", and the defaultSearchScope is\n   undefined.\n   In addition,\
    \ for all examples, we assume that the \"email\" service has\n   been requested\
    \ to discover the email address for \"Jane Hernandez\".\n   Example 1:\n   serviceSearchDescriptor:\
    \ email:\"ou=marketing,\"\n   base: ou=marketing,o=airius.com\n   scope: sub\n\
    \   filter: (&(objectclass=inetOrgPerson)(cn~=Jane Hernandez))\n   Example 2:\n\
    \   serviceSearchDescriptor: email:\"ou=marketing,\"?one?\n    (&(objectclass=inetOrgPerson)(c=us))\n\
    \   attributeMap: email:cn=2.5.4.42 sn\n   Note: 2.5.4.42 is the OID that represents\
    \ the \"givenName\"\n   attribute.\n   In this example, the email service performs\
    \ <name string> parsing as\n   described above to generate a complex search filter.\
    \  The above\n   example results in one search.\n   base: ou=marketing,o=airius.com\n\
    \   scope: one\n   filter: (&(&(objectclass=inetOrgPerson)(c=us))\n          \
    \     (2.5.4.42~=Jane)(sn~=Hernandez))\n   Example 3:\n   serviceSearchDescriptor:\
    \ email:ou=marketing,\"?base\n   attributeMap: email:cn=name\n   This example\
    \ is invalid, because either the quote should have\n   been escaped, or there\
    \ should have been a leading quote.\n   Example 4:\n   serviceSearchDescriptor:\
    \ email:ou=\\\\mar\\\\\\\\keting,\\\\\"?base\n   attributeMap: email:cn=name\n\
    \   base: ou=\\\\mar\\\\keting,\"\n   scope: base\n   filter (&(objectclass=inetOrgPerson)(name~=Jane\
    \ Hernandez))\n   Example 5:\n   serviceSearchDescriptor: email:ou=\"marketing\"\
    ,o=supercom\n   This example is invalid, since the quote was not a leading quote,\n\
    \   and thus should have been escaped.\n   Example 6:\n   serviceSearchDescriptor:\
    \ email:??(&(objectclass=person)\n                                    (ou=Org1\
    \ \\\\\\\\(temporary\\\\\\\\)))\n   base: o=airius.com\n   scope: sub\n   filter:\
    \ (&((&(objectclass=person)(ou=Org1 \\\\(Temporary\\\\)))\n             (cn~=Jane\
    \ Henderson)))\n   Example 7:\n   serviceSearchDescriptor: email:\"ou=funny?org,\"\
    \n   base: ou=funny?org,o=airius.com\n   scope: sub\n   filter (&(objectclass=inetOrgPerson)(cn~=Jane\
    \ Hernandez))\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Bob Neal-Joslin (editor)\n   Hewlett-Packard Company\n\
    \   19420 Homestead RD\n   M/S 4029\n   Cupertino, CA  95014\n   US\n   Phone:\
    \ +1 408 447 3044\n   EMail: bob_joslin@hp.com\n   URI:   http://www.hp.com\n\
    \   Luke Howard\n   PADL Software Pty. Ltd.\n   PO Box 59\n   Central Park, Vic\
    \  3145\n   AU\n   EMail: lukeh@padl.com\n   URI:   http://www.padl.com\n   Morteza\
    \ Ansari\n   Infoblox\n   475 Potrero Avenue\n   Sunnyvale, CA  94085\n   US\n\
    \   Phone: +1 408 716 4300\n   EMail: morteza@infoblox.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
