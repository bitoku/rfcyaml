- title: __initial_text__
  contents:
  - '                  TCP Extensions for Long-Delay Paths

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo proposes a set of extensions to the TCP protocol\
    \ to provide\n   efficient operation over a path with a high bandwidth*delay product.\n\
    \   These extensions are not proposed as an Internet standard at this\n   time.\
    \  Instead, they are intended as a basis for further\n   experimentation and research\
    \ on transport protocol performance.\n   Distribution of this memo is unlimited.\n"
- title: 1. INTRODUCTION
  contents:
  - "1. INTRODUCTION\n   Recent work on TCP performance has shown that TCP can work\
    \ well over\n   a variety of Internet paths, ranging from 800 Mbit/sec I/O channels\n\
    \   to 300 bit/sec dial-up modems [Jacobson88].  However, there is still\n   a\
    \ fundamental TCP performance bottleneck for one transmission regime:\n   paths\
    \ with high bandwidth and long round-trip delays.  The\n   significant parameter\
    \ is the product of bandwidth (bits per second)\n   and round-trip delay (RTT\
    \ in seconds); this product is the number of\n   bits it takes to \"fill the pipe\"\
    , i.e., the amount of unacknowledged\n   data that TCP must handle in order to\
    \ keep the pipeline full.  TCP\n   performance problems arise when this product\
    \ is large, e.g.,\n   significantly exceeds 10**5 bits.  We will refer to an Internet\
    \ path\n   operating in this region as a \"long, fat pipe\", and a network\n \
    \  containing this path as an \"LFN\" (pronounced \"elephan(t)\").\n   High-capacity\
    \ packet satellite channels (e.g., DARPA's Wideband Net)\n   are LFN's.  For example,\
    \ a T1-speed satellite channel has a\n   bandwidth*delay product of 10**6 bits\
    \ or more; this corresponds to\n   100 outstanding TCP segments of 1200 bytes\
    \ each!  Proposed future\n   terrestrial fiber-optical paths will also fall into\
    \ the LFN class;\n   for example, a cross-country delay of 30 ms at a DS3 bandwidth\n\
    \   (45Mbps) also exceeds 10**6 bits.\n   Clever algorithms alone will not give\
    \ us good TCP performance over\n   LFN's; it will be necessary to actually extend\
    \ the protocol.  This\n   RFC proposes a set of TCP extensions for this purpose.\n\
    \   There are three fundamental problems with the current TCP over LFN\n   paths:\n\
    \   (1)  Window Size Limitation\n        The TCP header uses a 16 bit field to\
    \ report the receive window\n        size to the sender.  Therefore, the largest\
    \ window that can be\n        used is 2**16 = 65K bytes.  (In practice, some TCP\n\
    \        implementations will \"break\" for windows exceeding 2**15,\n       \
    \ because of their failure to do unsigned arithmetic).\n        To circumvent\
    \ this problem, we propose a new TCP option to allow\n        windows larger than\
    \ 2**16. This option will define an implicit\n        scale factor, to be used\
    \ to multiply the window size value found\n        in a TCP header to obtain the\
    \ true window size.\n   (2)  Cumulative Acknowledgments\n        Any packet losses\
    \ in an LFN can have a catastrophic effect on\n        throughput.  This effect\
    \ is exaggerated by the simple cumulative\n        acknowledgment of TCP.  Whenever\
    \ a segment is lost, the\n        transmitting TCP will (eventually) time out\
    \ and retransmit the\n        missing segment. However, the sending TCP has no\
    \ information\n        about segments that may have reached the receiver and been\n\
    \        queued because they were not at the left window edge, so it may\n   \
    \     be forced to retransmit these segments unnecessarily.\n        We propose\
    \ a TCP extension to implement selective\n        acknowledgements.  By sending\
    \ selective acknowledgments, the\n        receiver of data can inform the sender\
    \ about all segments that\n        have arrived successfully, so the sender need\
    \ retransmit only\n        the segments that have actually been lost.\n      \
    \  Selective acknowledgments have been included in a number of\n        experimental\
    \ Internet protocols -- VMTP [Cheriton88], NETBLT\n        [Clark87], and RDP\
    \ [Velten84].  There is some empirical evidence\n        in favor of selective\
    \ acknowledgments -- simple experiments with\n        RDP have shown that disabling\
    \ the selective acknowlegment\n        facility greatly increases the number of\
    \ retransmitted segments\n        over a lossy, high-delay Internet path [Partridge87].\
    \  A\n        simulation study of a simple form of selective acknowledgments\n\
    \        added to the ISO transport protocol TP4 also showed promise of\n    \
    \    performance improvement [NBS85].\n   (3)  Round Trip Timing\n        TCP\
    \ implements reliable data delivery by measuring the RTT,\n        i.e., the time\
    \ interval between sending a segment and receiving\n        an acknowledgment\
    \ for it, and retransmitting any segments that\n        are not acknowledged within\
    \ some small multiple of the average\n        RTT.  Experience has shown that\
    \ accurate, current RTT estimates\n        are necessary to adapt to changing\
    \ traffic conditions and,\n        without them, a busy network is subject to\
    \ an instability known\n        as \"congestion collapse\" [Nagle84].\n      \
    \  In part because TCP segments may be repacketized upon\n        retransmission,\
    \ and in part because of complications due to the\n        cumulative TCP acknowledgement,\
    \ measuring a segments's RTT may\n        involve a non-trivial amount of computation\
    \ in some\n        implementations.  To minimize this computation, some\n    \
    \    implementations time only one segment per window.  While this\n        yields\
    \ an adequate approximation to the RTT for small windows\n        (e.g., a 4 to\
    \ 8 segment Arpanet window), for an LFN (e.g., 100\n        segment Wideband \
    \ Network windows) it results in an unacceptably\n        poor RTT estimate.\n\
    \        In the presence of errors, the problem becomes worse.  Zhang\n      \
    \  [Zhang86], Jain [Jain86] and Karn [Karn87] have shown that it is\n        not\
    \ possible to accumulate reliable RTT estimates if\n        retransmitted segments\
    \ are included in the estimate.  Since a\n        full window of data will have\
    \ been transmitted prior to a\n        retransmission, all of the segments in\
    \ that window will have to\n        be ACKed before the next RTT sample can be\
    \ taken.  This means at\n        least an additional window's worth of time between\
    \ RTT\n        measurements and, as the error rate approaches one per window of\n\
    \        data (e.g., 10**-6 errors per bit for the Wideband Net), it\n       \
    \ becomes effectively impossible to obtain an RTT measurement.\n        We propose\
    \ a TCP \"echo\" option that allows each segment to carry\n        its own timestamp.\
    \  This will allow every segment, including\n        retransmissions, to be timed\
    \ at negligible computational cost.\n   In designing new TCP options, we must\
    \ pay careful attention to\n   interoperability with existing implementations.\
    \  The only TCP option\n   defined to date is an \"initial option\", i.e., it\
    \ may appear only on a\n   SYN segment.  It is likely that most implementations\
    \ will properly\n   ignore any options in the SYN segment that they do not understand,\
    \ so\n   new initial options should not cause a problem.  On the other hand,\n\
    \   we fear that receiving unexpected non-initial options may cause some\n   TCP's\
    \ to crash.\n   Therefore, in each of the extensions we propose, non-initial options\n\
    \   may be sent only if an exchange of initial options has indicated that\n  \
    \ both sides understand the extension.  This approach will also allow a\n   TCP\
    \ to determine when the connection opens how big a TCP header it\n   will be sending.\n"
- title: 2. TCP WINDOW SCALE OPTION
  contents:
  - "2. TCP WINDOW SCALE OPTION\n   The obvious way to implement a window scale factor\
    \ would be to define\n   a new TCP option that could be included in any segment\
    \ specifying a\n   window.  The receiver would include it in every acknowledgment\n\
    \   segment, and the sender would interpret it.  Unfortunately, this\n   simple\
    \ approach would not work.  The sender must reliably know the\n   receiver's current\
    \ scale factor, but a TCP option in an\n   acknowledgement segment will not be\
    \ delivered reliably (unless the\n   ACK happens to be piggy-backed on data).\n\
    \   However, SYN segments are always sent reliably, suggesting that each\n   side\
    \ may communicate its window scale factor in an initial TCP\n   option.  This\
    \ approach has a disadvantage: the scale must be\n   established when the connection\
    \ is opened, and cannot be changed\n   thereafter.  However, other alternatives\
    \ would be much more\n   complicated, and we therefore propose a new initial option\
    \ called\n   Window Scale.\n"
- title: 2.1  Window Scale Option
  contents:
  - "2.1  Window Scale Option\n      This three-byte option may be sent in a SYN segment\
    \ by a TCP (1)\n      to indicate that it is prepared to do both send and receive\
    \ window\n      scaling, and (2) to communicate a scale factor to be applied to\n\
    \      its receive window.  The scale factor is encoded logarithmically,\n   \
    \   as a power of 2 (presumably to be implemented by binary shifts).\n      Note:\
    \ the window in the SYN segment itself is never scaled.\n      TCP Window Scale\
    \ Option:\n      Kind: 3\n             +---------+---------+---------+\n     \
    \        | Kind=3  |Length=3 |shift.cnt|\n             +---------+---------+---------+\n\
    \      Here shift.cnt is the number of bits by which the receiver right-\n   \
    \   shifts the true receive-window value, to scale it into a 16-bit\n      value\
    \ to be sent in TCP header (this scaling is explained below).\n      The value\
    \ shift.cnt may be zero (offering to scale, while applying\n      a scale factor\
    \ of 1 to the receive window).\n      This option is an offer, not a promise;\
    \ both sides must send\n      Window Scale options in their SYN segments to enable\
    \ window\n      scaling in either direction.\n"
- title: 2.2  Using the Window Scale Option
  contents:
  - "2.2  Using the Window Scale Option\n      A model implementation of window scaling\
    \ is as follows, using the\n      notation of RFC-793 [Postel81]:\n      *   \
    \ The send-window (SND.WND) and receive-window (RCV.WND) sizes\n           in\
    \ the connection state block and in all sequence space\n           calculations\
    \ are expanded from 16 to 32 bits.\n      *    Two window shift counts are added\
    \ to the connection state:\n           snd.scale and rcv.scale.  These are shift\
    \ counts to be\n           applied to the incoming and outgoing windows, respectively.\n\
    \           The precise algorithm is shown below.\n      *    All outgoing SYN\
    \ segments are sent with the Window Scale\n           option, containing a value\
    \ shift.cnt = R that the TCP would\n           like to use for its receive window.\n\
    \      *    Snd.scale and rcv.scale are initialized to zero, and are\n       \
    \    changed only during processing of a received SYN segment.  If\n         \
    \  the SYN segment contains a Window Scale option with shift.cnt\n           =\
    \ S, set snd.scale to S and set rcv.scale to R; otherwise,\n           both snd.scale\
    \ and rcv.scale are left at zero.\n      *    The window field (SEG.WND) in the\
    \ header of every incoming\n           segment, with the exception of SYN segments,\
    \ will be left-\n           shifted by snd.scale bits before updating SND.WND:\n\
    \              SND.WND = SEG.WND << snd.scale\n           (assuming the other\
    \ conditions of RFC793 are met, and using\n           the \"C\" notation \"<<\"\
    \ for left-shift).\n      *    The window field (SEG.WND) of every outgoing segment,\
    \ with\n           the exception of SYN segments, will have been right-shifted\n\
    \           by rcv.scale bits:\n              SEG.WND = RCV.WND >> rcv.scale.\n\
    \      TCP determines if a data segment is \"old\" or \"new\" by testing if\n\
    \      its sequence number is within 2**31 bytes of the left edge of the\n   \
    \   window.  If not, the data is \"old\" and discarded.  To insure that\n    \
    \  new data is never mistakenly considered old and vice-versa, the\n      left\
    \ edge of the sender's window has to be at least 2**31 away\n      from the right\
    \ edge of the receiver's window.  Similarly with the\n      sender's right edge\
    \ and receiver's left edge.  Since the right and\n      left edges of either the\
    \ sender's or receiver's window differ by\n      the window size, and since the\
    \ sender and receiver windows can be\n      out of phase by at most the window\
    \ size, the above constraints\n      imply that 2 * the max window size must be\
    \ less than 2**31, or\n           max window < 2**30\n      Since the max window\
    \ is 2**S (where S is the scaling shift count)\n      times at most 2**16 - 1\
    \ (the maximum unscaled window), the maximum\n      window is guaranteed to be\
    \ < 2*30 if S <= 14.  Thus, the shift\n      count must be limited to 14.  (This\
    \ allows windows of 2**30 = 1\n      Gbyte.)  If a Window Scale option is received\
    \ with a shift.cnt\n      value exceeding 14, the TCP should log the error but\
    \ use 14\n      instead of the specified value.\n"
- title: 3. TCP SELECTIVE ACKNOWLEDGMENT OPTIONS
  contents:
  - "3. TCP SELECTIVE ACKNOWLEDGMENT OPTIONS\n   To minimize the impact on the TCP\
    \ protocol, the selective\n   acknowledgment extension uses the form of two new\
    \ TCP options. The\n   first is an enabling option, \"SACK-permitted\", that may\
    \ be sent in a\n   SYN segment to indicate that the the SACK option may be used\
    \ once the\n   connection is established.  The other is the SACK option itself,\n\
    \   which may be sent over an established connection once permission has\n   been\
    \ given by SACK-permitted.\n   The SACK option is to be included in a segment\
    \ sent from a TCP that\n   is receiving data to the TCP that is sending that data;\
    \ we will refer\n   to these TCP's as the data receiver and the data sender,\n\
    \   respectively.  We will consider a particular simplex data flow; any\n   data\
    \ flowing in the reverse direction over the same connection can be\n   treated\
    \ independently.\n"
- title: 3.1  SACK-Permitted Option
  contents:
  - "3.1  SACK-Permitted Option\n      This two-byte option may be sent in a SYN by\
    \ a TCP that has been\n      extended to receive (and presumably process) the\
    \ SACK option once\n      the connection has opened.\n      TCP Sack-Permitted\
    \ Option:\n      Kind: 4\n             +---------+---------+\n             | Kind=4\
    \  | Length=2|\n             +---------+---------+\n"
- title: 3.2  SACK Option
  contents:
  - "3.2  SACK Option\n      The SACK option is to be used to convey extended acknowledgment\n\
    \      information over an established connection.  Specifically, it is\n    \
    \  to be sent by a data receiver to inform the data transmitter of\n      non-contiguous\
    \ blocks of data that have been received and queued.\n      The data receiver\
    \ is awaiting the receipt of data in later\n      retransmissions to fill the\
    \ gaps in sequence space between these\n      blocks.  At that time, the data\
    \ receiver will acknowledge the data\n      normally by advancing the left window\
    \ edge in the Acknowledgment\n      Number field of the TCP header.\n      It\
    \ is important to understand that the SACK option will not change\n      the meaning\
    \ of the Acknowledgment Number field, whose value will\n      still specify the\
    \ left window edge, i.e., one byte beyond the last\n      sequence number of fully-received\
    \ data.  The SACK option is\n      advisory; if it is ignored, TCP acknowledgments\
    \ will continue to\n      function as specified in the protocol.\n      However,\
    \ SACK will provide additional information that the data\n      transmitter can\
    \ use to optimize retransmissions.  The TCP data\n      receiver may include the\
    \ SACK option in an acknowledgment segment\n      whenever it has data that is\
    \ queued and unacknowledged.  Of\n      course, the SACK option may be sent only\
    \ when the TCP has received\n      the SACK-permitted option in the SYN segment\
    \ for that connection.\n      TCP SACK Option:\n      Kind: 5\n      Length: Variable\n\
    \       +--------+--------+--------+--------+--------+--------+...---+\n     \
    \  | Kind=5 | Length | Relative Origin |   Block Size    |      |\n       +--------+--------+--------+--------+--------+--------+...---+\n\
    \      This option contains a list of the blocks of contiguous sequence\n    \
    \  space occupied by data that has been received and queued within\n      the\
    \ window.  Each block is contiguous and isolated; that is, the\n      octets just\
    \ below the block,\n             Acknowledgment Number + Relative Origin -1,\n\
    \      and just above the block,\n             Acknowledgment Number + Relative\
    \ Origin + Block Size,\n      have not been received.\n      Each contiguous block\
    \ of data queued at the receiver is defined in\n      the SACK option by two 16-bit\
    \ integers:\n      *    Relative Origin\n           This is the first sequence\
    \ number of this block, relative to\n           the Acknowledgment Number field\
    \ in the TCP header (i.e.,\n           relative to the data receiver's left window\
    \ edge).\n      *    Block Size\n           This is the size in octets of this\
    \ block of contiguous data.\n      A SACK option that specifies n blocks will\
    \ have a length of 4*n+2\n      octets, so the 44 bytes available for TCP options\
    \ can specify a\n      maximum of 10 blocks.  Of course, if other TCP options\
    \ are\n      introduced, they will compete for the 44 bytes, and the limit of\n\
    \      10 may be reduced in particular segments.\n      There is no requirement\
    \ on the order in which blocks can appear in\n      a single SACK option.\n  \
    \       Note: requiring that the blocks be ordered would allow a\n         slightly\
    \ more efficient algorithm in the transmitter; however,\n         this does not\
    \ seem to be an important optimization.\n"
- title: 3.3  SACK with Window Scaling
  contents:
  - "3.3  SACK with Window Scaling\n      If window scaling is in effect, then 16\
    \ bits may not be sufficient\n      for the SACK option fields that define the\
    \ origin and length of a\n      block.  There are two possible ways to handle\
    \ this:\n      (1)  Expand the SACK origin and length fields to 24 or 32 bits.\n\
    \      (2)  Scale the SACK fields by the same factor as the window.\n      The\
    \ first alternative would significantly reduce the number of\n      blocks possible\
    \ in a SACK option; therefore, we have chosen the\n      second alternative, scaling\
    \ the SACK information as well as the\n      window.\n      Scaling the SACK information\
    \ introduces some loss of precision,\n      since a SACK option must report queued\
    \ data blocks whose origins\n      and lengths are multiples of the window scale\
    \ factor rcv.scale.\n      These reported blocks must be equal to or smaller than\
    \ the actual\n      blocks of queued data.\n      Specifically, suppose that the\
    \ receiver has a contiguous block of\n      queued data that occupies sequence\
    \ numbers L, L+1, ... L+N-1, and\n      that the window scale factor is S = rcv.scale.\
    \  Then the\n      corresponding block that will be reported in a SACK option\
    \ will\n      be:\n         Relative Origin = int((L+S-1)/S)\n         Block Size\
    \ = int((L+N)/S) - (Relative Origin)\n      where the function int(x) returns\
    \ the greatest integer contained\n      in x.\n      The resulting loss of precision\
    \ is not a serious problem for the\n      sender.  If the data-sending TCP keeps\
    \ track of the boundaries of\n      all segments in its retransmission queue,\
    \ it will generally be\n      able to infer from the imprecise SACK data which\
    \ full segments\n      don't need to be retransmitted.  This will fail only if\
    \ S is\n      larger than the maximum segment size, in which case some segments\n\
    \      may be retransmitted unnecessarily.  If the sending TCP does not\n    \
    \  keep track of transmitted segment boundaries, the imprecision of\n      the\
    \ scaled SACK quantities will only result in retransmitting a\n      small amount\
    \ of unneeded sequence space.  On the average, the data\n      sender will unnecessarily\
    \ retransmit J*S bytes of the sequence\n      space for each SACK received; here\
    \ J is the number of blocks\n      reported in the SACK, and S = snd.scale.\n"
- title: 3.4  SACK Option Examples
  contents:
  - "3.4  SACK Option Examples\n      Assume the left window edge is 5000 and that\
    \ the data transmitter\n      sends a burst of 8 segments, each containing 500\
    \ data bytes.\n      Unless specified otherwise, we assume that the scale factor\
    \ S = 1.\n           Case 1: The first 4 segments are received but the last 4\
    \ are\n           dropped.\n           The data receiver will return a normal\
    \ TCP ACK segment\n           acknowledging sequence number 7000, with no SACK\
    \ option.\n           Case 2:  The first segment is dropped but the remaining\
    \ 7 are\n           received.\n           The data receiver will return a TCP\
    \ ACK segment that\n           acknowledges sequence number 5000 and contains\
    \ a SACK option\n           specifying one block of queued data:\n           \
    \        Relative Origin = 500;  Block Size = 3500\n           Case 3:  The 2nd,\
    \ 4th, 6th, and 8th (last) segments are\n           dropped.\n           The data\
    \ receiver will return a TCP ACK segment that\n           acknowledges sequence\
    \ number 5500 and contains a SACK option\n           specifying the 3 blocks:\n\
    \                   Relative Origin =  500;  Block Size = 500\n              \
    \     Relative Origin = 1500;  Block Size = 500\n                   Relative Origin\
    \ = 2500;  Block Size = 500\n           Case 4: Same as Case 3, except Scale Factor\
    \ S = 16.\n           The SACK option would specify the 3 scaled blocks:\n   \
    \                Relative Origin =   32;  Block Size = 30\n                  \
    \ Relative Origin =   94;  Block Size = 31\n                   Relative Origin\
    \ =  157;  Block Size = 30\n           These three reported blocks have sequence\
    \ numbers 512 through\n           991, 1504 through 1999, and 2512 through 2992,\
    \ respectively.\n"
- title: 3.5  Generating the SACK Option
  contents:
  - "3.5  Generating the SACK Option\n      Let us assume that the data receiver maintains\
    \ a queue of valid\n      segments that it has neither passed to the user nor\
    \ acknowledged\n      because of earlier missing data, and that this queue is\
    \ ordered by\n      starting sequence number.  Computation of the SACK option\
    \ can be\n      done with one pass down this queue.  Segments that occupy\n  \
    \    contiguous sequence space are aggregated into a single SACK block,\n    \
    \  and each gap in the sequence space (except a gap that is\n      terminated\
    \ by the right window edge) triggers the start of a new\n      SACK block.  If\
    \ this algorithm defines more than 10 blocks, only\n      the first 10 can be\
    \ included in the option.\n"
- title: 3.6  Interpreting the SACK Option
  contents:
  - "3.6  Interpreting the SACK Option\n      The data transmitter is assumed to have\
    \ a retransmission queue\n      that contains the segments that have been transmitted\
    \ but not yet\n      acknowledged, in sequence-number order.  If the data transmitter\n\
    \      performs re-packetization before retransmission, the block\n      boundaries\
    \ in a SACK option that it receives may not fall on\n      boundaries of segments\
    \ in the retransmission queue; however, this\n      does not pose a serious difficulty\
    \ for the transmitter.\n      Let us suppose that for each segment in the retransmission\
    \ queue\n      there is a (new) flag bit \"ACK'd\", to be used to indicate that\n\
    \      this particular segment has been entirely acknowledged.  When a\n     \
    \ segment is first transmitted, it will be entered into the\n      retransmission\
    \ queue with its ACK'd bit off.  If the ACK'd bit is\n      subsequently turned\
    \ on (as the result of processing a received\n      SACK option), the data transmitter\
    \ will skip this segment during\n      any later retransmission.  However, the\
    \ segment will not be\n      dequeued and its buffer freed until the left window\
    \ edge is\n      advanced over it.\n      When an acknowledgment segment arrives\
    \ containing a SACK option,\n      the data transmitter will turn on the ACK'd\
    \ bits for segments that\n      have been selectively acknowleged.  More specifically,\
    \ for each\n      block in the SACK option, the data transmitter will turn on\
    \ the\n      ACK'd flags for all segments in the retransmission queue that are\n\
    \      wholly contained within that block.  This requires straightforward\n  \
    \    sequence number comparisons.\n"
- title: 4.  TCP ECHO OPTIONS
  contents:
  - "4.  TCP ECHO OPTIONS\n   A simple method for measuring the RTT of a segment would\
    \ be: the\n   sender places a timestamp in the segment and the receiver returns\n\
    \   that timestamp in the corresponding ACK segment. When the ACK segment\n  \
    \ arrives at the sender, the difference between the current time and\n   the timestamp\
    \ is the RTT.  To implement this timing method, the\n   receiver must simply reflect\
    \ or echo selected data (the timestamp)\n   from the sender's segments.  This\
    \ idea is the basis of the \"TCP Echo\"\n   and \"TCP Echo Reply\" options.\n"
- title: 4.1  TCP Echo and TCP Echo Reply Options
  contents:
  - "4.1  TCP Echo and TCP Echo Reply Options\n      TCP Echo Option:\n      Kind:\
    \ 6\n      Length: 6\n          +--------+--------+--------+--------+--------+--------+\n\
    \          | Kind=6 | Length |   4 bytes of info to be echoed    |\n         \
    \ +--------+--------+--------+--------+--------+--------+\n   This option carries\
    \ four bytes of information that the receiving TCP\n   may send back in a subsequent\
    \ TCP Echo Reply option (see below).  A\n   TCP may send the TCP Echo option in\
    \ any segment, but only if a TCP\n   Echo option was received in a SYN segment\
    \ for the connection.\n   When the TCP echo option is used for RTT measurement,\
    \ it will be\n   included in data segments, and the four information bytes will\
    \ define\n   the time at which the data segment was transmitted in any format\n\
    \   convenient to the sender.\n   TCP Echo Reply Option:\n   Kind: 7\n   Length:\
    \ 6\n       +--------+--------+--------+--------+--------+--------+\n       |\
    \ Kind=7 | Length |    4 bytes of echoed info         |\n       +--------+--------+--------+--------+--------+--------+\n\
    \   A TCP that receives a TCP Echo option containing four information\n   bytes\
    \ will return these same bytes in a TCP Echo Reply option.\n   This TCP Echo Reply\
    \ option must be returned in the next segment\n   (e.g., an ACK segment) that\
    \ is sent. If more than one Echo option is\n   received before a reply segment\
    \ is sent, the TCP must choose only one\n   of the options to echo, ignoring the\
    \ others; specifically, it must\n   choose the newest segment with the oldest\
    \ sequence number (see next\n   section.)\n   To use the TCP Echo and Echo Reply\
    \ options, a TCP must send a TCP\n   Echo option in its own SYN segment and receive\
    \ a TCP Echo option in a\n   SYN segment from the other TCP.  A TCP that does\
    \ not implement the\n   TCP Echo or Echo Reply options must simply ignore any\
    \ TCP Echo\n   options it receives.  However, a TCP should not receive one of\
    \ these\n   options in a non-SYN segment unless it included a TCP Echo option\
    \ in\n   its own SYN segment.\n"
- title: 4.2  Using the Echo Options
  contents:
  - "4.2  Using the Echo Options\n   If we wish to use the Echo/Echo Reply options\
    \ for RTT measurement, we\n   have to define what the receiver does when there\
    \ is not a one-to-one\n   correspondence between data and ACK segments.  Assuming\
    \ that we want\n   to minimize the state kept in the receiver (i.e., the number\
    \ of\n   unprocessed Echo options), we can plan on a receiver remembering the\n\
    \   information value from at most one Echo between ACKs.  There are\n   three\
    \ situations to consider:\n   (A)  Delayed ACKs.\n        Many TCP's acknowledge\
    \ only every Kth segment out of a group of\n        segments arriving within a\
    \ short time interval; this policy is\n        known generally as \"delayed ACK's\"\
    .  The data-sender TCP must\n        measure the effective RTT, including the\
    \ additional time due to\n        delayed ACK's, or else it will retransmit unnecessarily.\
    \  Thus,\n        when delayed ACK's are in use, the receiver should reply with\n\
    \        the Echo option information from the earliest unacknowledged\n      \
    \  segment.\n   (B)  A hole in the sequence space (segment(s) have been lost).\n\
    \        The sender will continue sending until the window is filled, and\n  \
    \      we may be generating ACKs as these out-of-order segments arrive\n     \
    \   (e.g., for the SACK information or to aid \"fast retransmit\").\n        An\
    \ Echo Reply option will tell the sender the RTT of some\n        recently sent\
    \ segment (since the ACK can only contain the\n        sequence number of the\
    \ hole, the sender may not be able to\n        determine which segment, but that\
    \ doesn't matter).  If the loss\n        was due to congestion, these RTTs may\
    \ be particularly valuable\n        to the sender since they reflect the network\
    \ characteristics\n        immediately after the congestion.\n   (C)  A filled\
    \ hole in the sequence space.\n        The segment that fills the hole represents\
    \ the most recent\n        measurement of the network characteristics.  On the\
    \ other hand,\n        an RTT computed from an earlier segment would probably\
    \ include\n        the sender's retransmit time-out, badly biasing the sender's\n\
    \        average RTT estimate.\n   Case (A) suggests the receiver should remember\
    \ and return the Echo\n   option information from the oldest unacknowledged segment.\
    \  Cases (B)\n   and (C) suggest that the option should come from the most recent\n\
    \   unacknowledged segment.  An algorithm that covers all three cases is\n   for\
    \ the receiver to return the Echo option information from the\n   newest segment\
    \ with the oldest sequence number, as specified earlier.\n   A model implementation\
    \ of these options is as follows.\n   (1)  Receiver Implementation\n        A\
    \ 32-bit slot for Echo option data, rcv.echodata, is added to\n        the receiver\
    \ connection state, together with a flag,\n        rcv.echopresent, that indicates\
    \ whether there is anything in the\n        slot.  When the receiver generates\
    \ a segment, it checks\n        rcv.echopresent and, if it is set, adds an echo-reply\
    \ option\n        containing rcv.echodata to the outgoing segment then clears\n\
    \        rcv.echopresent.\n        If an incoming segment is in the window and\
    \ contains an echo\n        option, the receiver checks rcv.echopresent.  If it\
    \ isn't set,\n        the value of the echo option is copied to rcv.echodata and\n\
    \        rcv.echopresent is set.  If rcv.echopresent is already set, the\n   \
    \     receiver checks whether the segment is at the left edge of the\n       \
    \ window.  If so, the segment's echo option value is copied to\n        rcv.echodata\
    \ (this is situation (C) above).  Otherwise, the\n        segment's echo option\
    \ is ignored.\n   (2)  Sender Implementation\n        The sender's connection\
    \ state has a single flag bit,\n        snd.echoallowed, added.  If snd.echoallowed\
    \ is set or if the\n        segment contains a SYN, the sender is free to add\
    \ a TCP Echo\n        option (presumably containing the current time in some units\n\
    \        convenient to the sender) to every outgoing segment.\n        Snd.echoallowed\
    \ should be set if a SYN is received with a TCP\n        Echo option (presumably,\
    \ a host that implements the option will\n        attempt to use it to time the\
    \ SYN segment).\n"
- title: 5.  CONCLUSIONS AND ACKNOWLEDGMENTS
  contents:
  - '5.  CONCLUSIONS AND ACKNOWLEDGMENTS

    '
- title: We have proposed five new TCP options for scaled windows, selective
  contents:
  - 'We have proposed five new TCP options for scaled windows, selective

    '
- title: acknowledgments, and round-trip timing, in order to provide efficient
  contents:
  - 'acknowledgments, and round-trip timing, in order to provide efficient

    '
- title: operation over large-bandwidth*delay-product paths.  These extensions
  contents:
  - 'operation over large-bandwidth*delay-product paths.  These extensions

    '
- title: are designed to provide compatible interworking with TCP's that do not
  contents:
  - 'are designed to provide compatible interworking with TCP''s that do not

    '
- title: implement the extensions.
  contents:
  - 'implement the extensions.

    '
- title: The Window Scale option was originally suggested by Mike St. Johns of
  contents:
  - 'The Window Scale option was originally suggested by Mike St. Johns of

    '
- title: USAF/DCA.  The present form of the option was suggested by Mike Karels
  contents:
  - 'USAF/DCA.  The present form of the option was suggested by Mike Karels

    '
- title: of UC Berkeley in response to a more cumbersome scheme proposed by Van
  contents:
  - 'of UC Berkeley in response to a more cumbersome scheme proposed by Van

    '
- title: Jacobson.  Gerd Beling of FGAN (West Germany) contributed the initial
  contents:
  - 'Jacobson.  Gerd Beling of FGAN (West Germany) contributed the initial

    '
- title: definition of the SACK option.
  contents:
  - 'definition of the SACK option.

    '
- title: All three options have evolved through discussion with the End-to-End
  contents:
  - 'All three options have evolved through discussion with the End-to-End

    '
- title: Task Force, and the authors are grateful to the other members of the
  contents:
  - 'Task Force, and the authors are grateful to the other members of the

    '
- title: Task Force for their advice and encouragement.
  contents:
  - 'Task Force for their advice and encouragement.

    '
- title: 6.  REFERENCES
  contents:
  - "6.  REFERENCES\n      [Cheriton88]  Cheriton, D., \"VMTP: Versatile Message Transaction\n\
    \      Protocol\", RFC 1045, Stanford University, February 1988.\n      [Jain86]\
    \  Jain, R., \"Divergence of Timeout Algorithms for Packet\n      Retransmissions\"\
    , Proc. Fifth Phoenix Conf. on Comp. and Comm.,\n      Scottsdale, Arizona, March\
    \ 1986.\n      [Karn87]  Karn, P. and C. Partridge, \"Estimating Round-Trip Times\n\
    \      in Reliable Transport Protocols\", Proc. SIGCOMM '87, Stowe, VT,\n    \
    \  August 1987.\n      [Clark87] Clark, D., Lambert, M., and L. Zhang, \"NETBLT:\
    \ A Bulk\n      Data Transfer Protocol\", RFC 998, MIT, March 1987.\n      [Nagle84]\
    \  Nagle, J., \"Congestion Control in IP/TCP\n      Internetworks\", RFC 896,\
    \ FACC, January 1984.\n      [NBS85]  Colella, R., Aronoff, R., and K. Mills,\
    \ \"Performance\n      Improvements for ISO Transport\", Ninth Data Comm Symposium,\n\
    \      published in ACM SIGCOMM Comp Comm Review, vol. 15, no. 5,\n      September\
    \ 1985.\n      [Partridge87]  Partridge, C., \"Private Communication\", February\n\
    \      1987.\n      [Postel81]  Postel, J., \"Transmission Control Protocol -\
    \ DARPA\n      Internet Program Protocol Specification\", RFC 793, DARPA,\n  \
    \    September 1981.\n      [Velten84] Velten, D., Hinden, R., and J. Sax, \"\
    Reliable Data\n      Protocol\", RFC 908, BBN, July 1984.\n      [Jacobson88]\
    \ Jacobson, V., \"Congestion Avoidance and Control\", to\n      be presented at\
    \ SIGCOMM '88, Stanford, CA., August 1988.\n      [Zhang86]  Zhang, L., \"Why\
    \ TCP Timers Don't Work Well\", Proc.\n      SIGCOMM '86, Stowe, Vt., August 1986.\n"
