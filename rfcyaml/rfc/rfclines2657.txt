Abstract LDAPv2 clients as implemented according to RFC 1777 [1] have no notion on referral.
The integration between such a client and an Index Mesh, as defined by the Common Indexing Protocol [2], heavily depends on referrals and therefore needs to be handled in a special way.
This document defines one possible way of doing this.
Background During the development of the Common Indexing Protocol (CIP),
one of the underlying assumptions was that the interaction between clients and the Index Mesh Servers [1] would heavily depend on the passing of referrals.
[2] that lack this functionality need to compensate for it by some means.
The way chosen in this memo is to add more intelligence into the client.
There are two reasons behind this decision.
First, this is not a major enhancement that is needed and secondly, that the intelligence when dealing with the Index Mesh, with or the knowledge about referrals, eventually has to go into the client.
The clients view of the Index Mesh
If a LDAPv2 client is going to be able to interact with the Index Mesh, the Mesh has to appear as something that is understandable to the client.
Basically, this consists of representing the index servers and their contained indexes in a defined directory information tree (DIT) [3,4] structure and a set of object classes and attribute types that have been proven to be useful in this context.
The CIP Object Classes Object class descriptions are written according to the BNF defined in [5].
2.1.1 cIPIndex The cIPIndex objectClass, if present in a entry, allows it to hold one indexvalue and information connected to this value.
( 1.2.752.17.3.9 NAME 'cIPIndex' SUP 'top' STRUCTURAL MUST ( extendedDSI $ idx )
MAY ( indexOCAT ) )
cIPDataSet The cIPDataSet objectClass, if present in a entry, allows it to hold information concerning one DataSet.
( 1.2.752.17.3.10 NAME 'cIPDataSet' SUP 'top' STRUCTURAL MUST ( dSI
The CIP attributeTypes The attributes idx, indexOCAT, extendedDSI, description, cIPIndexType, baseURI, dSI are used by a client accessing the index server.
The other attributes (accesspoint, protocolVersion, polledBy, updateIntervall, consumerURI, supplierURI and securityOption, attributeNamespace, consistencyBase) are all for usage in server to server interactions.
The index value, normally used as part of the RDN.
( 1.2.752.17.1.20 NAME 'idx' EQUALITY caseIgnoreIA5Match SYNTAX IA5String SINGLE VALUE )
dSI DataSet Identifier, a unique identifier for one particular set of information.
This should be an OID, but stored in a stringformat.
( 1.2.752.17.1.21 NAME 'dSI' EQUALITY caseIgnoreIA5Match SYNTAX IA5String )
indexOCAT Describes the type of data that is stored in this entry, by using objectcClasses and attributeTypes.
The information is stored as a objectClass name followed by a space and then an attributeType name.
A typical example when dealing with whitepages information would be "person cn".
( 1.2.752.17.1.28 NAME 'indexOCAT' EQUALITY caseIgnoreIA5Match SYNTAX IA5String )
A URI describing which protocols, hostnames and ports should be used by an indexserver to interact with servers carrying indexinformation representing this dataSet.
( 1.2.752.17.1.22 NAME 'supplierURI' EQUALITY caseIgnoreIA5Match SYNTAX IA5String )
The attribute value for this attribute is a LDAP URI.
One can envisage other URI syntaxes, if the client knows about more access protocols besides LDAP, and the interaction between the client and the server can not use referrals for some reason.
( 1.2.752.17.1.26 NAME 'baseURI' EQUALITY caseExactIA5Match SYNTAX IA5String )
At present, the Common Indexing Protocol version should be 3.
EQUALITY numericStringMatch SYNTAX numericString )
The type of index Object that is used to pass around index information.
( 1.2.752.17.1.29 NAME 'cIPIndexType' EQUALITY caseIgnoreIA5Match SYNTAX IA5String )
The Distinguished Name of Index servers that polls data from this indexserver.
( 1.2.752.17.1.30 NAME 'polledBy' EQUALITY distinguishedNameMatch SYNTAX DN ) 2.2.11 updateIntervall
The maximum duration in seconds between the generation of two updates by the supplier server.
Whether and how the supplier server should sign and encrypt the update before sending it to the consumer server.
( 1.2.752.17.1.32 NAME 'securityOption' EQUALITY caseIgnoreIA5Match SYNTAX IA5String SINGLE VALUE )
extendedDSI DataSet Identifier possibly followed by a space and a taglist, the later as specified by [6].
( 1.2.752.17.1.33 NAME 'extendedDSI' EQUALITY caseIgnoreIA5Match SYNTAX IA5String )
A URI describing which means a server can accept indexinformation.
An example being a mailto URI for MIME email based index transport.
( 1.2.752.17.1.34 NAME 'consumerURI' EQUALITY caseExactIA5Match SYNTAX IA5String )
Any consumer supplier pair has to agree on what attribute that should be used and also possibly the meaning of the attributenames.
The value of this attribute should, for example, be a URI pointing to a document wherein the agreement is described.
( 1.2.752.17.1.35 NAME 'attributeNamespace' EQUALITY caseExactIA5Match SYNTAX IA5String )
consistencyBase This attribute is specifically used by consumer supplier pairs that use the tagged index object [6].
( 1.2.752.17.1.36 NAME 'consistencyBase' EQUALITY caseExactIA5Match SYNTAX IA5String ) 3.
The interaction between a client and the Index Mesh A client interaction with the Index Mesh consists of a couple of rather well defined actions.
The first being to find a suitable index to start with, then to transverse the Index Mesh and finally to query the servers holding the original data.
Note when reading this text that what is discussed here is the client's perception of the DIT, how it is in fact implemented is not discussed.
This approach depends on the fact that every index server partaking in an Index Mesh is represented in the DIT by a entry of the type cIPDataSet, and has a distinguished name (DN) which most significant relative distinguished name (RDN) has the attributetype dSI.
Therefore, finding a suitable indexserver to start the search from is a matter of searching the DIT at a suitable place for objects with the objectClass cIPIndexObject.
Every found entry can then be evaluated by looking at the description value as well as the indexOCAT value.
The description string should be a human readable and understandable text that describes what the index server is indexing.
An example of such a string could be, "This index covers all employees at Swedish Universities and University Colleges that has an email account".
The indexOCAT attribute supplies information about which kind of entries and which attributes within these entries that the index information has emanated from.
For example, if the indexOCAT attribute value is "person cn", one can deduce that this is an index over persons and not over roles, and that it is the attribute commonName that is indexed.
Each index server has its information represented in the DIT as a very flat tree.
In fact, it is only one level deep. 0
cIPIndex entries one for each DataSet   one for each index value that this server has   that this indexserver gathered indexes from.
A search then consists of a set of searches.
The first being the search for the index entries that contains an indexvalue that matches what the user is looking for, and the second a search based on the DSI information in the extendedDSI attribute values returned from the first search.
In the case of the the cIPIndexType being tagged  index, the taglists should be compared to find which DSI it might be useful to pose further queries to.
When doing these types of searches, the client should be aware of the fact that the index values disregarding their origin (attributeTypes) always are stored in the index server as values of the idx attribute.
The object of the second search is to get information on the different DataSet involved, and should normally be performed as a read.
Since the DataSet information probably will remain quite stable over time, this information lends itself very well to caching.
If at this stage there is more than one DataSet involved, the User interface might use the description value to aid the user in choosing which one to proceed with.
The content of the searchBase value of the DataSet tells the client whether it represents another index server (the most significant part of the dn is a dSI attribute) or if it is a end server.
3.3 Querying the end server When finally reaching the end server/servers that probably has the sought for information, the information in the indexOCAT attribute can be used to produce an appropriate filter.
If a search for "Rol " in an index having an indexOCAT attribute value of "person cn" returns an idx entry with the idx value of "Roland", then an appropriate filter to use might be "&
A complete example of a search process is given in Appendix A. 4.
Security Considerations Since this memo deals with client behavior, it does not add anything that either enhances or diminishes the security features that exists in LDAPv2.
Internationalization As with security, this memo
neither enhances or diminishes the handling of internationalization in LDAPv2.
Appendix A Sample Session Below is a sample of a session between a LDAPv2 client and an index server mesh as specified in this memo.
The original question of the session is to find the email address of a person by the name, "Roland Hedberg", who is working at "Umea University" in Sweden.
A singlelevel search with the baseaddress "c SE" and the filter "(objectclass cipDataset)" was issued.
The following results were received: DN: dSI 1.2.752.17.5.0,c SE dsi  1.2.752.17.5.0 description  "index over employees with emailaddresses within Swedish higher education" indexOCAT  "cn person"
"x tagged index 1" ; searchBase  "dsi 1.2.752.17.5.0,c SE" protocolVersion   3 DN: dSI 1.2.752.23.1.3,c
SE dsi  1.2.752.23.1.3 description  "index over Swedish lawyers" indexOCAT  "cn person"
"x tagged index 1" ; searchBase  "dsi 1.2.752.23.1.3,c SE" protocolVersion   3 Step 2.
The following results were received: DN: idx Roland,dSI 1.2.752.17.5.0,c SE idx
17 DN: idx Hedberg,dSI 1.2.752.17.5.0,c SE idx
A comparison between the two sets of extendedDSIs shows that two datasets 1.2.752.17.5.10 and 1.2.752.17.5.14
contains persons named "Roland" and "Hedberg".
Therefore, the next step would be to see what the datasets represent.
A comparison like this should normally not be left to the user.
3 Two baselevel searches, one for "dsi 1.2.752.17.5.10,dsi 1.2.752.17.5.0,c SE" and the other for "dsi 1.2.752.17.5.14,dsi 1.2.752.17.5.0,c SE" with the filter "(objectclass cipdataset)" were issued.
The following results were received: DN: dSI 1.2.752.17.5.10,dSI
"Employees at Umea University,Sweden" indexOCAT  "person cn" searchBase  "o Umea Universitet,c SE" respectively DN: dSI 1.2.752.17.5.14,dSI
"Employees at Lund University,Sweden" indexOCAT  "person cn" searchBase  "o Lunds Universitet,c SE" Step 4
Based on the descriptions for the two datasets, "1.2.752.17.5.10" was chosen as the best to proceed with.
From the searchbase attribute value, it was clear that this was a base server.
The query now has to be somewhat modified.
