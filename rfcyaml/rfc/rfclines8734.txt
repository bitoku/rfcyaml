Brainpool Curves for Transport Layer Security (TLS)
Version 1.3 Abstract Elliptic Curve Cryptography
Brainpool curves were an option for authentication and key exchange in the Transport Layer Security (TLS
) protocol version 1.2 but were deprecated by the IETF for use with TLS version 1.3 because they had little usage.
However, these curves have not been shown to have significant cryptographical weaknesses, and there is some interest in using several of these curves in TLS 1.3.
This document provides the necessary protocol mechanisms for using ECC Brainpool curves in TLS 1.3.
This approach is not endorsed by the IETF.
Introduction [RFC5639] specifies a new set of elliptic curve groups over finite prime fields for use in cryptographic applications.
These groups, denoted as ECC Brainpool curves, were generated in a verifiably pseudorandom way and comply with the security requirements of relevant standards from ISO [ISO1][ISO2], ANSI [ANSI1], NIST [FIPS], and SECG [SEC2].
[RFC8422] defines the usage of elliptic curves for authentication and key agreement in TLS 1.2 and earlier versions, and [RFC7027] defines the usage of the ECC Brainpool curves for authentication and key exchange in TLS.
The latter is applicable to TLS 1.2 and earlier versions but not to TLS 1.3, which deprecates the ECC Brainpool curve IDs defined in [RFC7027] due to the lack of widespread deployment.
However, there is some interest in using these curves in TLS 1.3.
The negotiation of ECC Brainpool curves for key exchange in TLS 1.3, according to [RFC8446], requires the definition and assignment of additional NamedGroup IDs.
This document provides the necessary definition and assignment of additional SignatureScheme IDs for using three ECC Brainpool curves from [RFC5639].
This approach is not endorsed by the IETF.
Implementers and deployers need to be aware of the strengths and weaknesses of all security mechanisms that they use.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
According to [RFC8446], the "supported groups" extension is used for the negotiation of Diffie Hellman groups and elliptic curve groups for key exchange during a handshake starting a new TLS session.
This document adds new named groups for three elliptic curves defined in [RFC5639] to the "supported groups" extension, as follows.
enum { brainpoolP256r1tls13(31), brainpoolP384r1tls13(32), brainpoolP512r1tls13(33)
} NamedGroup; The encoding of Ephemeral Elliptic Curve Diffie Hellman (ECDHE) parameters for sec256r1, secp384r1, and secp521r1, as defined in Section 4.2.8.2 of [RFC8446], also applies to this document.
Test vectors for a Diffie Hellman key exchange using these elliptic curves are provided in Appendix A. 4.
According to [RFC8446], the name space SignatureScheme is used for the negotiation of elliptic curve groups for authentication via the "signature algorithms" extension.
Besides, it is required to specify the hash function that is used to hash the message before signing.
This document adds new SignatureScheme types for three elliptic curves defined in [RFC5639], as follows.
enum { ecdsa brainpoolP256r1tls13 sha256(0x081A), ecdsa brainpoolP384r1tls13 sha384(0x081B), ecdsa brainpoolP512r1tls13 sha512(0x081C)
IANA Considerations IANA has updated the references for the ECC Brainpool curves listed in the "TLS Supported Groups" [IANA TLS] subregistry of the "Transport Layer Security (TLS) Parameters" registry to refer to this document.
IANA has updated the references for the ECC Brainpool curves in the "TLS SignatureScheme" subregistry [IANA TLS] of the "Transport Layer Security (TLS) Parameters" registry to refer to this document.
The security considerations of [RFC8446] apply accordingly.
The confidentiality, authenticity, and integrity of the TLS communication is limited by the weakest cryptographic primitive applied.
In order to achieve a maximum security level when using one of the elliptic curves from Table 1 for key exchange and/or one of the signature algorithms from Table 2 for authentication in TLS, parameters of other deployed cryptographic schemes should be chosen at commensurate strengths, for example, according to the recommendations of [NIST800 57] and [RFC5639].
In particular, this applies to (a) the key derivation function, (b) the algorithms and key length of symmetric encryption and message authentication, and (c)
the algorithm, bit length, and hash function for signature generation.
Furthermore, the private Diffie Hellman keys should be generated from a random keystream with a length equal to the length of the order of the group E(GF(p)) defined in [RFC5639].
The value of the private Diffie Hellman keys should be less than the order of the group E(GF(p)).
When using ECDHE key agreement with the curves brainpoolP256r1tls13, brainpoolP384r1tls13, or brainpoolP512r1tls13, the peers MUST validate each other's public value Q by ensuring that the point is a valid point on the elliptic curve.
If this check is not conducted, an attacker can force the key exchange into a small subgroup, and the resulting shared secret can be guessed with significantly less effort.
Implementations of elliptic curve cryptography for TLS may be susceptible to side channel attacks.
Particular care should be taken for implementations that internally transform curve points to points on the corresponding "twisted curve", using the map (x',y')
(x Z^2, y Z^3) with the coefficient Z specified for that curve in [RFC5639], in order to take advantage of an efficient arithmetic based on the twisted curve's special parameters (A    3).
Although the twisted curve itself offers the same level of security as the corresponding random curve (through mathematical equivalence), arithmetic based on small curve parameters may be harder to protect against side channel attacks.
General guidance on resistance of elliptic curve cryptography implementations against side channel attacks is given in [BSI1] and [HMV].
This non normative Appendix provides some test vectors (for example, Diffie Hellman key exchanges using each of the curves defined in Table 1).
The following notation is used in all of the subsequent sections:
A:   the secret key of party A x qA:  the x coordinate of the public key of party A y qA:  the y coordinate of the public key of party
the secret key of party B x qB:  the x coordinate of the public key of party B y qB:  the y coordinate of the public key of party B x Z:
the x coordinate of the shared secret that results from completion of the Diffie Hellman computation, i.e., the hex representation of the premaster secret
the y coordinate of the shared secret that results from completion of the Diffie Hellman computation
The field elements x qA, y qA
, x qB, y qB,
x Z, and y Z are represented as hexadecimal values using the FieldElement to  OctetString conversion method specified in [SEC1].
256 Bit Curve Curve brainpoolP256r1 dA
384 Bit Curve Curve brainpoolP384r1 dA
512 Bit Curve Curve brainpoolP512r1 dA
