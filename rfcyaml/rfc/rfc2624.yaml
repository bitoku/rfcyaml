- title: __initial_text__
  contents:
  - '                  NFS Version 4 Design Considerations

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The main task of the NFS version 4 working group is to create a\n\
    \   protocol definition for a distributed file system that focuses on the\n  \
    \ following items: improved access and good performance on the\n   Internet, strong\
    \ security with negotiation built into the protocol,\n   better cross-platform\
    \ interoperability, and designed for protocol\n   extensions.  NFS version 4 will\
    \ owe its general design to the\n   previous versions of NFS.  It is expected,\
    \ however, that many\n   features will be quite different in NFS version 4 than\
    \ previous\n   versions to facilitate the goals of the working group and to address\n\
    \   areas that NFS version 2 and 3 have not.\n   This design considerations document\
    \ is meant to present more detail\n   than the working group charter.  Specifically,\
    \ it presents the areas\n   that the working group will investigate and consider\
    \ while developing\n   a protocol specification for NFS version 4.  Based on this\n\
    \   investigation the working group will decide the features of the new\n   protocol\
    \ based on the cost and benefits within the specific feature\n   areas.\n"
- title: Key Words
  contents:
  - "Key Words\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",\
    \ \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  NFS Version 4 Design Considerations . . . . . . . .\
    \ . . . . . 2\n   2.  Ease of Implementation or Complexity of Protocol  . . .\
    \ . . . 3\n   2.1.  Extensibility / layering  . . . . . . . . . . . . . . . .\
    \ . 3\n   2.2.  Managed Extensions or Minor Versioning  . . . . . . . . . . 3\n\
    \   2.3.  Relationship with Older Versions of NFS . . . . . . . . . . 4\n   3.\
    \  Reliable and Available  . . . . . . . . . . . . . . . . . . . 5\n   4.  Scalable\
    \ Performance  . . . . . . . . . . . . . . . . . . . . 5\n   4.1.  Throughput\
    \ and Latency via the Network  . . . . . . . . . . 6\n   4.2.  Client Caching\
    \  . . . . . . . . . . . . . . . . . . . . . . 6\n   4.3.  Disconnected Client\
    \ Operation . . . . . . . . . . . . . . . 7\n   5.  Interoperability  . . . .\
    \ . . . . . . . . . . . . . . . . . . 7\n   5.1.  Platform Specific Behavior \
    \ . . . . . . . . . . . . . . . . 8\n   5.2.  Additional or Extended Attributes\
    \ . . . . . . . . . . . . . 8\n   5.3.  Access Control Lists  . . . . . . . .\
    \ . . . . . . . . . .   9\n   6.  RPC Mechanism and Security  . . . . . . . .\
    \ . . . . . . . .  10\n   6.1.  User identification . . . . . . . . . . . . .\
    \ . . . . . .  10\n   6.2.  Security  . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  10\n   6.2.1.  Transport Independence  . . . . . . . . . . . . . .\
    \ . .  11\n   6.2.2.  Authentication  . . . . . . . . . . . . . . . . . . . .\
    \  11\n   6.2.3.  Data Integrity  . . . . . . . . . . . . . . . . . . . .  11\n\
    \   6.2.4.  Data Privacy  . . . . . . . . . . . . . . . . . . . . .  12\n   6.2.5.\
    \  Security Negotiation  . . . . . . . . . . . . . . . . .  12\n   6.3.  Summary\
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  12\n   7.  Internet Accessibility\
    \  . . . . . . . . . . . . . . . . . .  13\n   7.1.  Congestion Control and Transport\
    \ Selection  . . . . . . .  13\n   7.2.  Firewalls and Proxy Servers . . . . .\
    \ . . . . . . . . . .  14\n   7.3.  Multiple RPCs and Latency . . . . . . . .\
    \ . . . . . . . .  14\n   8.  File locking / recovery . . . . . . . . . . . .\
    \ . . . . . .  15\n   9.  Internationalization  . . . . . . . . . . . . . . .\
    \ . . . .  16\n   10.  Security Considerations  . . . . . . . . . . . . . . .\
    \ . .  17\n   10.1.  Denial of Service  . . . . . . . . . . . . . . . . . . .\
    \  17\n   11.  Bibliography . . . . . . . . . . . . . . . . . . . . . . .  18\n\
    \   12.  Acknowledgments  . . . . . . . . . . . . . . . . . . . . .  21\n   13.\
    \  Author's Address . . . . . . . . . . . . . . . . . . . . .  21\n   14.  Full\
    \ Copyright Statement . . . . . . . . . . . . . . . . .  22\n"
- title: 1.  NFS Version 4 Design Considerations
  contents:
  - "1.  NFS Version 4 Design Considerations\n   As stated in the charter, the first\
    \ deliverable for the NFS version 4\n   working group is this design considerations\
    \ document.  This document\n   is to cover the \"limitations and deficiencies\
    \ of NFS version 3\".\n   This document will also be used as a mechanism to focus\
    \ discussion\n   and avenues of investigation as the definition of NFS version\
    \ 4\n   progresses.  Therefore, the contents of this document cover the\n   general\
    \ functional/feature areas that are anticipated for NFS version\n   4.  Where\
    \ appropriate, discussion of current NFS version 2 and 3\n   practice will be\
    \ presented along with other appropriate references to\n   current distributed\
    \ file system practice.\n"
- title: 2.  Ease of Implementation or Complexity of Protocol
  contents:
  - "2.  Ease of Implementation or Complexity of Protocol\n   One of the strengths\
    \ of NFS has been the ability to implement a\n   client or server with relative\
    \ ease.  The eventual size of a basic\n   implementation is relatively small.\
    \  The main reason for keeping NFS\n   as simple as possible is that a simple\
    \ protocol design can be\n   described in a simple specification that promotes\
    \ straightforward,\n   interoperable implementations.  All protocols can run into\
    \ problems\n   when deployed on real networks, but simple protocols yield problems\n\
    \   that are easier to diagnose and correct.\n"
- title: 2.1.  Extensibility / layering
  contents:
  - "2.1.  Extensibility / layering\n   With NFS' relative simplicity, the addition\
    \ or layering of\n   functionality has been easy to accomplish.  The addition\
    \ of features\n   like the client automount or autofs, client side disk caching\
    \ and\n   high availability servers are examples.  This type of extensibility\n\
    \   is desirable in an environment where problem solutions do not require\n  \
    \ protocol revision.  This extensibility can also be helpful in the\n   future\
    \ where unforeseen problems or opportunities can be solved by\n   layering functionality\
    \ on an existing set of tools or protocol.\n"
- title: 2.2.  Managed Extensions or Minor Versioning
  contents:
  - "2.2.  Managed Extensions or Minor Versioning\n   For those cases where the NFS\
    \ protocol is deficient or where a minor\n   modification is the best solution\
    \ for a problem, a minor version or a\n   managed extension could be helpful.\
    \  There have been instances with\n   NFS version 2 and 3 where small straightforward\
    \ functional additions\n   would have increased the overall value of the protocol\
    \ immensely.\n   For instance, the PATHCONF procedure that was added to version\
    \ 2 of\n   the MOUNT protocol would have been more appropriate for the NFS\n \
    \  protocol. WebNFS [RFC2054][RFC2055] overloading of the LOOKUP\n   procedure\
    \ for NFS versions 2 and 3 would have been more cleanly\n   implemented in a new\
    \ LOOKUP procedure.\n   However, the perceived size and burden of using a change\
    \ of RPC\n   version number for the introduction of new functionality led to no\
    \ or\n   slow change.  It is possible that a new NFS protocol could allow for\n\
    \   the rare instance where protocol extension within the RPC version\n   number\
    \ is the most prudent course and an RPC revision would be\n   unnecessary or impractical.\n\
    \   The areas of an NFS protocol which are most obviously volatile are\n   new\
    \ orthogonal procedures, new well-defined file or directory\n   attributes and\
    \ potentially new file types.  As an example, potential\n   file types of the\
    \ future could be a type such as \"attribute\" that\n   represents a named file\
    \ stream or a \"dynamic\" file type that\n   generates dynamic data in response\
    \ to a \"query\" procedure from the\n   client.\n   It is possible and highly\
    \ desirable that these types of additions be\n   done without changing the overall\
    \ design model of NFS without\n   significant effort or delay.\n   A strong consideration\
    \ should be given to a NFS protocol mechanism\n   for the introduction of this\
    \ type of new functionality.  This is\n   obviously in contrast to using the standard\
    \ RPC version mechanism to\n   provide minor changes.  The process of using RPC\
    \ version numbers to\n   introduce new functionality brings with it a lot of history\
    \ which may\n   not technically prevent its use.  However, the historical issues\n\
    \   involved will need to be addressed as part of the NFS version 4\n   protocol\
    \ work; this should increase the ability for current and\n   future success of\
    \ the protocol.\n   As background, the RPC protocol described in [RFC1831] uses\
    \ a version\n   number to describe the set of procedure calls, replies, and their\n\
    \   semantics.  Any change in this set must be reflected in a new version\n  \
    \ number for the program.  An example of this was the\n   MOUNTPROC_PATHCONF procedure\
    \ added in version 2 of the MOUNT\n   protocol.  Except for the addition of this\
    \ new procedure, the\n   protocol was unchanged.  Many thought this protocol revision\
    \ was\n   unnecessary, since the RPC protocol already allows certain procedures\n\
    \   not be implemented and defines a PROC_UNAVAIL error.\n   Another historical\
    \ data-point from NFS version 2 and 3 is the support\n   (or lack) of symbolic\
    \ links.  Servers that cannot support this\n   feature will simply reject calls\
    \ to the SYMLINK and READLINK\n   procedures.  Additionally, NFS version 4 may\
    \ describe many file\n   attributes which cannot be supported by the server or\
    \ file systems on\n   the server.  Therefore, the protocol must support a discovery\n\
    \   mechanism that allows clients to determine which features of the\n   protocol\
    \ are supported by a server.\n"
- title: 2.3.  Relationship with Older Versions of NFS
  contents:
  - "2.3.  Relationship with Older Versions of NFS\n   NFS version 4 will be a self\
    \ contained protocol in that it will not\n   have any dependencies on the previous\
    \ versions of NFS.  Stated\n   another way, an NFS version 4 server or client\
    \ will not require a\n   NFSv2 or NFSv3 implementation be present for NFS version\
    \ 4 to\n   function as designed.  It should also be noted that having an NFS\n\
    \   version 2 or 3 implementation present at the client or server will\n   not\
    \ enhance the functionality of an NFS version 4 implementation.\n   In the case\
    \ where an NFS client has a choice of using various NFS\n   protocol versions\
    \ (i.e. 2, 3 and 4), the underlying ONCRPC mechanisms\n   will allow the client\
    \ to appropriately choose an available version of\n   the protocol at the NFS\
    \ server.  The ONCRPC protocol contains the\n   semantics and error returns for\
    \ the case where an RPC server program\n   does not support a particular version.\
    \  This mechanism is used by the\n   NFS client to receive notification of an\
    \ unavailable version and in\n   conjunction with the error the client will also\
    \ receive the range of\n   versions (min to max) that are available.  Therefore,\
    \ the ONCRPC\n   mechanism can be used by implementors of both clients and servers\
    \ to\n   provide for the transitioning to or installation of NFS version 4\n \
    \  services.\n"
- title: 3.  Reliable and Available
  contents:
  - "3.  Reliable and Available\n   Current NFS protocol design, while placing an\
    \ emphasis on simple\n   server design, has led to timely recovery from server\
    \ and client\n   failure.  This and other aspects to the design have provided\
    \ a basis\n   for layered technologies like high availability and clustered\n\
    \   servers.  Providing a protocol design approach that lends itself to\n   these\
    \ types of reliability and availability features is very\n   desirable.\n   For\
    \ the next version of NFS, consideration should be given to client\n   side availability\
    \ schemes such as client switching between or fail-\n   over to available server\
    \ replicas.  NFS currently requires that file\n   handles be immutable; this requirement\
    \ adds unnecessarily to the\n   complexity of building fail-over configurations.\
    \  If possible, the\n   protocol should allow for or ease the building of such\
    \ layered\n   solutions.\n   For the next version of NFS, consideration should\
    \ be given to schemes\n   that support client switching between server replicas\
    \ or highly\n   available NFS servers that provide paths to data through multiple\n\
    \   servers. For example: NFS currently requires that filehandles be\n   unchanging\
    \ for any instance of a file or directory. This requirement\n   makes it more\
    \ difficult for a client to switch from one server to\n   another, since each\
    \ server may construct filehandles differently.\n   Protocol support could allow\
    \ the client to handle a filehandle\n   change.\n"
- title: 4.  Scalable Performance
  contents:
  - "4.  Scalable Performance\n   In designing and developing an NFS protocol from\
    \ a performance\n   viewpoint there are several different points to consider.\
    \  Each can\n   play a significant role in perceived and real performance from\
    \ the\n   user's perspective.  The three main areas of interest are: throughput\n\
    \   and latency via the network, server work load or scalability and\n   client\
    \ side caching.\n"
- title: 4.1.  Throughput and Latency via the Network
  contents:
  - "4.1.  Throughput and Latency via the Network\n   NFS currently has characteristics\
    \ that provide good throughput for\n   reading and writing file data. This is\
    \ commonly achieved by the\n   client's use of pipelining or windowing multiple\
    \ RPC READ/WRITE\n   requests to the server. The flexibility of the NFS and ONCRPC\n\
    \   protocols allow for implementations to use this type of adaptation to\n  \
    \ provide efficient use of the network connection.\n   However, the number of\
    \ RPCs required to accomplish some tasks\n   combined with high latency network\
    \ environments may lead to sluggish\n   single user or single client response.\
    \  The protocol should continue\n   to provide good raw read and write throughput\
    \ while addressing the\n   issue of network latency.  This issue is discussed\
    \ further in the\n   section on Internet Accessibility.\n"
- title: 4.2.  Client Caching
  contents:
  - "4.2.  Client Caching\n   In an attempt to speed response time and to reduce network\
    \ and server\n   load, NFS clients have always cached directory and file data.\n\
    \   However, this has usually been done as memory cache and in relatively\n  \
    \ recent history, local disk caching has been added.\n   It is very desirable\
    \ to have the NFS client cache directory and file\n   data.  Other distributed\
    \ file systems have shown that aggressive\n   client side caching can be very\
    \ visible to the end user in the form\n   of decreasing overall response time.\
    \  For AFS and DCE/DFS, caching is\n   accomplished by the utilization of server\
    \ call backs to notify the\n   client of potential cache invalidation.  CIFS and\
    \ its opportunistic\n   locks provide a similar call back mechanism.  Clients\
    \ in both of\n   these environments are able to cache data while avoiding interaction\n\
    \   with the network and server.\n   With these protocols it is also possible\
    \ to cache or delay certain\n   protocol requests at the client which further\
    \ reduces the protocol\n   traffic flowing between client and server.  In the\
    \ case of CIFS, it\n   is possible for a client to obtain an opportunistic lock\
    \ for a file\n   and subsequently process file lock requests completely at the\
    \ client.\n   If there are no conflicts with other clients for file data access,\n\
    \   the server is never contacted for the file locking traffic generated\n   by\
    \ the user application. This behavior is not a protocol requirement\n   but is\
    \ allowed by the protocol as an implementation option to improve\n   performance.\n\
    \   NFS versions 2 and 3 make no caching requirements.  Implementations\n   typically\
    \ implement close-to-open cache consistency which requires\n   clients flush all\
    \ changes to the server on each file close, and check\n   for file changes on\
    \ the server on each file open.  The consistency\n   check required on each file\
    \ open can generate a large amount of\n   GETATTR traffic.  With this approach,\
    \ there are windows when the\n   client can still be acting with stale data between\
    \ the open and close\n   of a file.\n   Client caching is increasingly important\
    \ for Internet environments\n   where throughput can be limited and response time\
    \ can grow\n   significantly. Therefore the NFS version 4 caching design will\
    \ need\n   to take into account the full spectrum of caching designs as\n   exemplified\
    \ by the current technologies of NFS, AFS, DCE/DFS, CIFS,\n   etc. in determining\
    \ an appropriate design.  This will need to be done\n   while weighing the complexity\
    \ of each possible approach with the need\n   of the eventual users and operating\
    \ environments into which NFS\n   version 4 may be deployed.  Some of these considerations\
    \ are:\n   Internet accessibility, firewall traversal (call back availability),\n\
    \   proxy caching, low-overhead or simple clients.\n"
- title: 4.3.  Disconnected Client Operation
  contents:
  - "4.3.  Disconnected Client Operation\n   An extension of client caching is the\
    \ provision for disconnected\n   operation at the client.  With the ability to\
    \ cache directory and\n   file data aggressively, a client could then provide\
    \ service to the\n   end user while disconnected from the server or network.\n\
    \   While very desirable, disconnected operation has the potential to\n   inflict\
    \ itself upon the NFS protocol in an undesirable way as\n   compared to traditional\
    \ client caching.  Given the complexities of\n   disconnected client operation\
    \ and subsequent resolution of client\n   data modification through various playback\
    \ or data selection\n   mechanisms, disconnected operation should not be a requirement\
    \ for\n   the NFS effort.  Even so, the NFS protocol should consider the\n   potential\
    \ layering of disconnected operation solutions on top of the\n   NFS protocol\
    \ (as with other server and client solutions).  The\n   experiences with Coda,\
    \ disconnected AFS and others should be helpful\n   in this area. (see references)\n"
- title: 5.  Interoperability
  contents:
  - "5.  Interoperability\n   The NFS protocols are available for many different operating\n\
    \   environments.  Even though this shows the protocol's ability to\n   provide\
    \ distributed file system service for more than a single\n   operating system,\
    \ the design of NFS is certainly Unix-centric.  The\n   next NFS protocol needs\
    \ to be more inclusive of platform or file\n   system features beyond those of\
    \ traditional Unix.\n"
- title: 5.1.  Platform Specific Behavior
  contents:
  - "5.1.  Platform Specific Behavior\n   Because of Unix-centric origins, NFS version\
    \ 2 and 3 protocol\n   requirements have been difficult to implement in some environments.\n\
    \   For example, persistent file handles (unique identifiers of file\n   system\
    \ objects), Unix uid/gid mappings, directory modification time,\n   accurate file\
    \ sizes, file/directory locking semantics (SHAREs, PC-\n   style locking). In\
    \ the design of NFS version 4, these areas and\n   others not mentioned will need\
    \ to be considered and, if possible,\n   cross-platform solutions developed.\n"
- title: 5.2.  Additional or Extended Attributes
  contents:
  - "5.2.  Additional or Extended Attributes\n   NFS versions 2 and 3 do not provide\
    \ for file or directory attributes\n   beyond those that are found in the traditional\
    \ Unix environment. For\n   example the user identifier/owner of the file, a permission\
    \ or access\n   bitmap, time stamps for modification of the file or directory\
    \ and\n   file size to name a few.  While the current set of attributes has\n\
    \   usually been sufficient, the file system's ability to manage\n   additional\
    \ information associated with a file or directory can be\n   useful.\n   There\
    \ are many possibilities for additional attributes in the next\n   version of\
    \ NFS.  Some of these include: object creation timestamp,\n   user identifier\
    \ of file's creator, timestamp of last backup or\n   archival bit, version number,\
    \ file content type (MIME type),\n   existence of data management involvement\
    \ (i.e. DMAPI [XDSM]).\n   This list is representative of the possibilities and\
    \ is meant to show\n   the need for an additional attribute set.  Enumerating\
    \ the 'correct'\n   set of attributes, however, is difficult.  This is one of\
    \ the reasons\n   for looking towards a minor versioning mechanism as a way to\
    \ provide\n   needed extensibility.  Another way to provide some extensibility\
    \ is\n   to support a generalized named attribute mechanism.  This mechanism\n\
    \   would allow a client to name, store and retrieve arbitrary data and\n   have\
    \ it associated as an attribute of a file or directory.\n   One difficulty in\
    \ providing named attributes is determining if the\n   protocol should specify\
    \ the names for the attributes, their type or\n   structure.  How will the protocol\
    \ determine or allow for attributes\n   that can be read but not written is another\
    \ issue.  Yet another could\n   be the side effects that these attributes have\
    \ on the core set of\n   file properties such as setting a size attribute to 0\
    \ and having\n   associated file data deleted.\n   As these brief examples show,\
    \ this type of extended attribute\n   mechanism brings with it a large set of\
    \ issues that will need to be\n   addressed in the protocol specification while\
    \ keeping the overall\n   goal of simplicity in mind.\n   There are operating\
    \ environments that provide named or extended\n   attribute mechanisms.  Digital\
    \ Unix provides for the storage of\n   extended attributes with some generalized\
    \ format.  HPFS [HPFS] and\n   NTFS [Nagar] also provide for named data associated\
    \ with traditional\n   files.  SGI's local file system, XFS, also provides for\
    \ this type of\n   name/value extended attributes. However, there does not seem\
    \ to be a\n   clear direction that can be taken from these or other environments.\n"
- title: 5.3.  Access Control Lists
  contents:
  - "5.3.  Access Control Lists\n   Access Control Lists (ACL) can be viewed as one\
    \ specific type of\n   extended attribute.  This attribute is a designation of\
    \ user access\n   to a file or directory.  Many vendors have created ancillary\n\
    \   protocols to NFS to extend the server's ACL mechanism across the\n   network.\
    \  Generally this has been done for homogeneous operating\n   environments. Even\
    \ though the server still interprets the ACL and has\n   final control over access\
    \ to a file system object, the client is able\n   to manipulate the ACL via these\
    \ additional protocols.  Other\n   distributed file systems have also provided\
    \ ACL support (DFS, AFS and\n   CIFS).\n   The basic factor driving the requirement\
    \ for ACL support in all of\n   these file systems has been the user's desire\
    \ to grant and restrict\n   access to file system data on a per user basis.  Based\
    \ on the desire\n   of the user and current distributed file system support, it\
    \ seems to\n   be a requirement that NFS provide this capability as well.\n  \
    \ Because many local and distributed file system ACL implementations\n   have\
    \ been done without a common architecture, the major issue is one\n   of compatibility.\
    \  Although the POSIX draft, DCE/DFS [DCEACL] and\n   Windows NT ACLs have a similar\
    \ structure in an array of Access\n   Control Entries consisting of a type field,\
    \ identity, and permission\n   bits, the similarity ends there.  Each model defines\
    \ its own variants\n   of entry types, identifies users and groups differently,\
    \ provides\n   different kinds of permission bits, and describes different\n \
    \  procedures for ACL creation, defaults, and evaluation.\n   In the least it\
    \ will be problematic to create a workable ACL\n   mechanism that will encompass\
    \ a reasonable set of functionality for\n   all operating environments.  Even\
    \ with the complicated nature of ACL\n   support it is still worthwhile to work\
    \ towards a solution that can at\n   least provide basic functionality for the\
    \ user.\n"
- title: 6.  RPC Mechanism and Security
  contents:
  - "6.  RPC Mechanism and Security\n   NFS relies on the security mechanisms provided\
    \ by the ONCRPC\n   [RFC1831] protocol.  Until the introduction of the ONCRPC\
    \ RPCSEC_GSS\n   security flavor [RFC2203], NFS security was generally limited\
    \ to none\n   (AUTH_SYS) or DES (AUTH_DH).  The AUTH_DH security flavor was not\n\
    \   successful in providing readily available security for NFS because of\n  \
    \ a lack of widespread implementation which precluded widespread\n   deployment.\
    \  Also the Diffie-Hellman 192 bit public key modulus used\n   for the AUTH_DH\
    \ security flavor quickly became too small for\n   reasonable security.\n"
- title: 6.1.  User identification
  contents:
  - "6.1.  User identification\n   NFS has been limited to the use of the Unix-centric\
    \ user\n   identification mechanism of numeric user id based on the available\n\
    \   file system attributes and the use of the ONCRPC.  However, for NFS\n   to\
    \ move beyond the limits of large work groups, user identification\n   should\
    \ be string based and the definition of the user identifier\n   should allow for\
    \ integration into an external naming service or\n   services.\n   Internet scaling\
    \ should also be considered for this as well.  The\n   identification mechanism\
    \ should take into account multiple naming\n   domains and multiple naming mechanisms.\
    \  Flexibility is the key to a\n   solution that can grow with the needs of the\
    \ user and administrator.\n   If NFS is to move among various naming and security\
    \ services, it may\n   be necessary to stay with a string based identification.\
    \  This would\n   allow for servers and clients to translate between the external\n\
    \   string representation to a local or internal numeric (or other\n   identifier)\
    \ which matches internal implementation needs.\n   As an example, DFS uses a string\
    \ based naming scheme but translates\n   the name to a UUID (16 byte identifier)\
    \ that is used for internal\n   protocol representations. The DCE/DFS string name\
    \ is a combination of\n   cell (administrative domain) and user name.  As mentioned,\
    \ NFS\n   clients and servers map a Unix user name to a 32 bit user identifier\n\
    \   that is then used for ONCRPC and NFS protocol fields requiring the\n   user\
    \ identifier.\n"
- title: 6.2.  Security
  contents:
  - "6.2.  Security\n   Because of the aforementioned problems, user authentication\
    \ has been\n   a major issue for ONCRPC and hence NFS.  To satisfy requirements\
    \ of\n   the IETF and to address concerns and requirements from users, NFS\n \
    \  version 4 must provide for the use of acceptable security mechanisms.\n   The\
    \ various mechanisms currently available should be explored for\n   their appropriate\
    \ use with NFS version 4 and ONCRPC.  Some of these\n   mechanisms are: TLS [RFC2246],\
    \ SPKM [RFC2025], KerberbosV5 [RFC1510],\n   IPSEC [RFC2401].  Since ONCRPC is\
    \ the basis for NFS client and server\n   interaction, the RPCSEC_GSS [RFC2203]\
    \ framework should be strongly\n   considered since it provides a method to employ\
    \ mechanisms like SPKM\n   and KerberosV5.  Before a security mechanism can be\
    \ evaluated, the\n   NFS environment and requirements must be discussed.\n"
- title: 6.2.1.  Transport Independence
  contents:
  - "6.2.1.  Transport Independence\n   As mentioned later in this document in the\
    \ section \"Internet\n   Accessibility\", transport independence is an asset for\
    \ NFS and ONCRPC\n   and is a general requirement.  This allows for transport\
    \ choice based\n   on the target environment and specific application of NFS.\
    \  The most\n   common transports in use with NFS are UDP and TCP.  This ability\
    \ to\n   choose transport should be maintained in combination with the user's\n\
    \   choice of a security mechanism.  This implies that \"mandatory to\n   implement\"\
    \ security mechanisms for NFS should allow for both\n   connection-less and connection-oriented\
    \ transports.\n"
- title: 6.2.2.  Authentication
  contents:
  - "6.2.2.  Authentication\n   As should be expected, strong authentication is a\
    \ requirement for NFS\n   version 4.  Each operation generated via ONCRPC contains\
    \ user\n   identification and authentication information.  It is common in NFS\n\
    \   version 2 and 3 implementations to multiplex various users' requests\n   over\
    \ a single or few connections to the NFS server.  This allows for\n   scalability\
    \ in the number of clients systems.  Security mechanisms or\n   frameworks should\
    \ allow for this multiplexing of requests to sustain\n   the implementation model\
    \ that is available today.\n"
- title: 6.2.3.  Data Integrity
  contents:
  - "6.2.3.  Data Integrity\n   Until the introduction of RPCSEC_GSS, the ability\
    \ to provide data\n   integrity over ONCRPC and to NFS was not available.  Since\
    \ file and\n   directory data is the essence of a distributed file service, the\
    \ NFS\n   protocol should provide to the users of the file service a reasonable\n\
    \   level of data integrity.  The security mechanisms chosen must provide\n  \
    \ for NFS data protection with a cryptographically strong checksum.  As\n   with\
    \ other aspects within NFS version 4, the user or administrator\n   should be\
    \ able to choose whether data integrity is employed.  This\n   will provide needed\
    \ flexibility for a variety of NFS version 4\n   solutions.\n"
- title: 6.2.4.  Data Privacy
  contents:
  - "6.2.4.  Data Privacy\n   Data privacy, while desirable, is not as important in\
    \ all\n   environments as authentication and integrity.  For example, in a LAN\n\
    \   environment the performance overhead of data privacy may not be\n   required\
    \ to meet an organization's data protection policies.  It may\n   also be the\
    \ case that the performance of the distributed file system\n   solution is more\
    \ important than the data privacy of that solution.\n   Even with these considerations,\
    \ the user or administrator must have\n   the choice of data privacy and therefore\
    \ it must be included in NFS\n   version 4.\n"
- title: 6.2.5.  Security Negotiation
  contents:
  - "6.2.5.  Security Negotiation\n   With the ability to provide security mechanism\
    \ choices to the user or\n   administrator, NFS version 4 should offer reasonable\
    \ flexibility for\n   application of local security policies.  However, this presents\
    \ the\n   problem of negotiating the appropriate security mechanism between\n\
    \   client and server.  It is unreasonable to require the client know the\n  \
    \ server's chosen mechanism before initial contact.  The issue is\n   further\
    \ complicated by an administrator who may choose more than one\n   security mechanism\
    \ for the various file system resources being shared\n   by an NFS server.  These\
    \ types of choices and policies require that\n   NFS version 4 deal with negotiating\
    \ the appropriate security\n   mechanism based on mechanism availability and policy\
    \ deployment at\n   client and server.  This negotiation will need to take into\
    \ account\n   the possibility of a change in policy as an NFS client crosses\n\
    \   certain file system boundaries at the server.  The security\n   mechanisms\
    \ required may change at these boundaries and therefore the\n   negotiation must\
    \ be included within the NFS protocol itself to be\n   done properly (i.e. securely).\n"
- title: 6.3.  Summary
  contents:
  - "6.3.  Summary\n   Other distributed file system solutions such as AFS and DFS\
    \ provide\n   strong authentication mechanisms.  CIFS does provide authentication\n\
    \   at initial server contact and a message signing option for subsequent\n  \
    \ interaction.  Recent NFS version 2 and 3 implementations, with the\n   use of\
    \ RPCSEC_GSS, provide strong authentication, integrity, and\n   privacy.\n   NFS\
    \ version 4 must provide for strong authentication, integrity, and\n   privacy.\
    \  This must be part of the protocol so that users have the\n   choice to use\
    \ strong security if their environment or policies\n   warrant such use.\n   Based\
    \ on the requirements presented, the ONCRPC RPCSEC_GSS security\n   flavor seems\
    \ to provide an appropriate framework for satisfying these\n   requirements. \
    \ RPCSEC_GSS provides for authentication, integrity, and\n   privacy.  The RPCSEC_GSS\
    \ is also extensible in that it provides for\n   both public and private key security\
    \ mechanisms along with the\n   ability to plug in various mechanisms in such\
    \ a way that it does not\n   significantly disrupt ONCRPC or NFS implementations.\n\
    \   With RPCSEC_GSS' ability to support both public and private key\n   mechanisms,\
    \ NFS version 4 should consider \"mandatory to implement\"\n   choices from both.\
    \  The intent is to provide a security solution that\n   will flexibly scale to\
    \ match the needs of end users.  Providing this\n   range of solutions will allow\
    \ for appropriate usage based on policy\n   and available resources for deployment.\
    \  Note that, in the end, the\n   user must have a choice and that choice may\
    \ be to use all of the\n   available mechanisms in NFS version 4 or none of them.\n"
- title: 7.  Internet Accessibility
  contents:
  - "7.  Internet Accessibility\n   Being a product of an IETF working group, the\
    \ NFS protocol should not\n   only be built upon IETF technologies where possible\
    \ but should also\n   work well within the broader Internet environment.\n"
- title: 7.1.  Congestion Control and Transport Selection
  contents:
  - "7.1.  Congestion Control and Transport Selection\n   As with any network protocol,\
    \ congestion control is a major issue and\n   the transport mechanisms that are\
    \ chosen for NFS should take this\n   into account.  Traditionally, implementations\
    \ of NFS have been\n   deployed using both UDP and TCP.  With the use of UDP,\
    \ most\n   implementations provide a rudimentary attempt control congestion with\n\
    \   simple back-off algorithms and round trip timers.  While this may be\n   sufficient\
    \ in today's NFS deployments, as an Internet protocol NFS\n   will need to ensure\
    \ sufficient congestion control or management.\n   With congestion control in\
    \ mind, NFS must use TCP as a transport (via\n   ONCRPC).  The UDP transport provides\
    \ its own advantages in certain\n   circumstances.  In today's NFS implementations,\
    \ UDP has been shown to\n   produce greater throughput as compared to similarly\
    \ configured\n   systems that use TCP.  This issue will need to be investigated\
    \ such\n   that a determination can be made as to whether the differences are\n\
    \   within implementation details.  If UDP is supplied as an NFS\n   transport\
    \ mechanism, then the congestion controls issues will need\n   resolution to make\
    \ its use suitable.\n"
- title: 7.2.  Firewalls and Proxy Servers
  contents:
  - "7.2.  Firewalls and Proxy Servers\n   NFS's protocol design should allow its\
    \ use via Internet firewalls.\n   The protocol should also allow for the use of\
    \ file system proxy/cache\n   servers.  Proxy servers can be very useful for scalability\
    \ and other\n   reasons.  The NFS protocol needs to address the need of proxy\
    \ servers\n   in a way that will deal with the issues of security, access control,\n\
    \   content control, and cache content validation.  It is possible that\n   these\
    \ issues can be addressed by documenting the related issues of\n   proxy server\
    \ usage.  However, it is likely that the NFS protocol will\n   need to support\
    \ proxy servers directly through the NFS protocol.\n   The protocol could allow\
    \ a request to be sent to a proxy that\n   contains the name of the target NFS\
    \ server to which the request might\n   be forwarded, or from which a response\
    \ might be cached.  In any case,\n   the NFS proxy server should be considered\
    \ during protocol\n   development.\n   The problems encountered in making the\
    \ NFS protocol work through\n   firewalls are described in detail in [RFC2054]\
    \ and [RFC2055].\n"
- title: 7.3.  Multiple RPCs and Latency
  contents:
  - "7.3.  Multiple RPCs and Latency\n   As an application at the NFS client performs\
    \ simple file system\n   operations, multiple NFS operations or RPCs may be executed\
    \ to\n   accomplish the work for the application.  While the NFS version 3\n \
    \  protocol addressed some of this by returning file and directory\n   attributes\
    \ for most procedures, hence reducing follow up GETATTR\n   requests, there is\
    \ still room for improvement.  Reducing the number\n   of RPCs will lead to a\
    \ reduction of processing overhead on the server\n   (transport and security processing)\
    \ along with reducing the time\n   spent at the client waiting for the server's\
    \ individual responses.\n   This issue is more prominent in environments with\
    \ larger degrees of\n   latency.\n   The CIFS file access protocol supports 'batched\
    \ requests' that allow\n   multiple requests to be batched, therefore reducing\
    \ the number of\n   round trip messages between client and server.\n   This same\
    \ approach can be used by NFS to allow the grouping of\n   multiple procedure\
    \ calls together in a traditional RPC request.  Not\n   only would this reduce\
    \ protocol imposed latency but it would reduce\n   transport and security processing\
    \ overhead and could allow a client\n   to complete more complex tasks by combining\
    \ procedures.\n"
- title: 8.  File locking / recovery
  contents:
  - "8.  File locking / recovery\n   NFS provided Unix file locking and DOS SHARE\
    \ capability with the use\n   of an ancillary protocol (Network Lock Manager /\
    \ NLM).  The DOS SHARE\n   mechanism is the DOS equivalent of file locking in\
    \ that it provides\n   the basis for sharing or exclusive access to file and directory\
    \ data\n   without risk of data corruption. The NLM protocol provides file\n \
    \  locking and recovery of those locks in the event of client or server\n   failure.\
    \  The NLM protocol requires that the server make call backs\n   to the client\
    \ for certain scenarios and therefore is not necessarily\n   well suited for Internet\
    \ firewall traversal.\n   Available and correct file locking support for NFS version\
    \ 2 and 3\n   clients and servers has historically been problematic.  The\n  \
    \ availability of NLM support has traditionally been a problem and\n   seems to\
    \ be most related to the fact that NFS and NLM are two\n   separate protocols.\
    \  It is easy to deliver an NFS client and server\n   implementation and then\
    \ add NLM support later.  This led to a general\n   lack of NLM support early\
    \ on in NFS' lifetime.  One of the reasons\n   that NLM was delivered separately\
    \ has been its relative complexity\n   which has in turn led to poor implementations\
    \ and testing\n   difficulties.  Even in later implementations where reliability\
    \ and\n   performance had been increased to acceptable levels for NLM, users\n\
    \   still chose to avoid the use of the protocol and its support.  The\n   last\
    \ issue with NLM is the presence of minor protocol design flaws\n   that relate\
    \ to high network load and recovery.\n   Based on the experiences with NLM, locking\
    \ support for NFS version 4\n   should strive to meet or at least consider the\
    \ following (in order of\n   importance):\n   o    Integration with the NFS protocol\
    \ and ease of implementation.\n   o    Interoperability between operating environments.\
    \ The protocol\n        should make a reasonable effort to support the locking\
    \ semantics\n        of both PC and Unix clients and servers. This will allow\
    \ for\n        greater integration of all environments.\n   o    Scalable solutions\
    \ - thousands of clients.  The server should\n        not be required to maintain\
    \ significant client file locking\n        state between server instantiations.\n\
    \   o    Internet capable (firewall traversal, latency sensitive).  The\n    \
    \    server should not be required to initiate TCP connections to\n        clients.\n\
    \   o    Timely recovery in the event of client/server or network\n        failure.\
    \  Server recovery should be rapid. The protocol should\n        allow clients\
    \ to detect the loss of a lock.\n"
- title: 9.  Internationalization
  contents:
  - "9.  Internationalization\n   NFS version 2 and 3 are currently limited in the\
    \ character encoding\n   of strings. In the NFS protocols, strings are used for\
    \ file and\n   directory names, and symbolic link contents. Although the XDR\n\
    \   definition [RFC1832] limits strings in the NFS protocol to 7-bit US-\n   ASCII,\
    \ common usage is to encode filenames in 8-bit ISO-Latin-1.\n   However, there\
    \ is no mechanism available to tag XDR character strings\n   to indicate the character\
    \ encoding used by the client or server.\n   Obviously this limits NFS' usefulness\
    \ in an environment with clients\n   that may operate with various character sets.\n\
    \   One approach to address this deficiency is to use the Unicode\n   Standard\
    \ [Unicode1] as the means to exchange character strings for\n   the NFS version\
    \ 4 protocol. The Unicode Standard is a 16 bit encoding\n   that supports full\
    \ multilingual text. The Unicode Standard is code-\n   for-code identical with\
    \ International Standard ISO/IEC 10646-1:1993.\n   \"Information Technology --\
    \ Universal Multiple-Octet Coded Character\n   Set (UCS)-Part 1: Architecture\
    \ and Basic Multilingual Plane.\" Because\n   Unicode is a 16 bit encoding, it\
    \ may be more efficient for the NFS\n   version 4 protocol to use an encoding\
    \ for wire transfer that will be\n   useful for a majority of usage.  One possible\
    \ encoding is the UCS\n   transformation format (UTF).  UTF-8 is an encoding method\
    \ for UCS-4\n   characters which allows for the direct encoding of US-ASCII\n\
    \   characters but expands for the correct encoding of the full UCS-4 31\n   bit\
    \ definitions.  Currently, the UCS-4 and Unicode standards do not\n   diverge.\n\
    \   This Unicode/UTF-8 encoding can be used for places in the protocol\n   that\
    \ a traditional string representation is needed.  This includes\n   file and directory\
    \ names along with symlink contents.  This should\n   also include other file\
    \ and directory attributes that are eventually\n   defined as strings.\n   The\
    \ Unicode standard is applicable to the well defined strings within\n   the protocol.\
    \ Dealing with file content is much more difficult. NFS\n   has traditionally\
    \ dealt with file data as an opaque byte stream. No\n   other structure or content\
    \ specification has been levied upon the\n   file content. The main advantage\
    \ to this approach is its flexibility.\n   This byte stream can contain any data\
    \ content and may be accessed in\n   any sequential or random fashion. Unfortunately,\
    \ it is left to the\n   application or user to make the determination of file\
    \ content and\n   format. It is possible to construct a mechanism in the protocol\
    \ that\n   specifies file data type while maintaining the byte stream model for\n\
    \   data access.  However, this approach may be limiting in ways unclear\n   to\
    \ the designers of the NFS version 4 protocol. An expandable and\n   adaptable\
    \ approach is to use the previously discussed extended\n   attributes as the mechanism\
    \ to specify file content and format. The\n   use of extended attributes allows\
    \ for future definition and growth as\n   various data types are created and allows\
    \ for maintaining a simple\n   file data model for the NFS protocol.\n   It should\
    \ be noted that as the Unicode standards are currently\n   defined there is the\
    \ possibility for minor inconsistencies when\n   converting from local character\
    \ representations to Unicode and then\n   back again.  This should not be a problem\
    \ with single client and\n   server interaction but may become apparent with the\
    \ interaction of\n   two or more clients with separate conversion implementations.\n\
    \   Therefore, as NFS version 4 progresses in its development, these\n   types\
    \ of Unicode issues need to be tracked and understood for their\n   potential\
    \ impact on client/server interaction. In any case, Unicode\n   seems to be the\
    \ best selection for NFS version 4 based on its\n   standards background and apparent\
    \ future direction.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Two previous sections within this document deal\
    \ with security issues.\n   The section covering 'Access Control Lists' covers\
    \ the mechanisms\n   that need to be investigated for file system level control.\
    \ The\n   section that covers RPC security deals with individual user\n   authentication\
    \ along with data integrity and privacy issues. This\n   section also covers negotiation\
    \ of security mechanisms.  These\n   sections should be consulted for additional\
    \ discussion and detail.\n"
- title: 10.1.  Denial of Service
  contents:
  - "10.1.  Denial of Service\n   As with all services, the denial of service by either\
    \ incorrect\n   implementations or malicious agents is always a concern.  With\
    \ the\n   target of providing NFS version 4 for Internet use, it is all the\n\
    \   more important that all aspects of the NFS version 4 protocol be\n   reviewed\
    \ for potential denial of service scenarios.  When found these\n   potential problems\
    \ should be mitigated as much as possible.\n"
- title: 11.  Bibliography
  contents:
  - "11.  Bibliography\n   [RFC1094]\n   Sun Microsystems, Inc., \"NFS: Network File\
    \ System Protocol\n   Specification\", RFC 1094, March 1989.\n   http://www.ietf.org/rfc/rfc1094.txt\n\
    \   [RFC1510]\n   Kohl, J. and C. Neuman, \"The Kerberos Network Authentication\n\
    \   Service (V5)\", RFC 1510, September 1993.\n   http://www.ietf.org/rfc/rfc1510.txt\n\
    \   [RFC1813]\n   Callaghan, B., Pawlowski, B. and P. Staubach, \"NFS Version\
    \ 3\n   Protocol Specification\", RFC 1813, June 1995.\n   http://www.ietf.org/rfc/rfc1813.txt\n\
    \   [RFC1831]\n   Srinivasan, R., \"RPC: Remote Procedure Call Protocol Specification\n\
    \   Version 2\", RFC 1831, August 1995.\n   http://www.ietf.org/rfc/rfc1831.txt\n\
    \   [RFC1832]\n   Srinivasan, R., \"XDR: External Data Representation Standard\"\
    ,\n   RFC 1832, August 1995.\n   http://www.ietf.org/rfc/rfc1832.txt\n   [RFC1833]\n\
    \   Srinivasan, R., \"Binding Protocols for ONC RPC Version 2\", RFC\n   1833,\
    \ August 1995.\n   http://www.ietf.org/rfc/rfc1833.txt\n   [RFC2025]\n   Adams,\
    \ C., \"The Simple Public-Key GSS-API Mechanism (SPKM)\",\n   RFC 2025, October\
    \ 1996.\n   http://www.ietf.org/rfc/rfc2025.txt\n   [RFC2054]\n   Callaghan, B.,\
    \ \"WebNFS Client Specification\", RFC 2054, October\n   1996.\n   http://www.ietf.org/rfc/rfc2054.txt\n\
    \   [RFC2055]\n   Callaghan, B., \"WebNFS Server Specification\", RFC 2055, October\n\
    \   1996.\n   http://www.ietf.org/rfc/rfc2055.txt\n   [RFC2078]\n   Linn, J.,\
    \ \"Generic Security Service Application Program Interface,\n   Version 2\", RFC\
    \ 2078, January 1997.\n   http://www.ietf.org/rfc/rfc2078.txt\n   [RFC2152]\n\
    \   Goldsmith, D., \"UTF-7 A Mail-Safe Transformation Format of Unicode\",\n \
    \  RFC 2152, May 1997.\n   http://www.ietf.org/rfc/rfc2152.txt\n   [RFC2203]\n\
    \   Eisler, M., Chiu, A. and L.  Ling, \"RPCSEC_GSS Protocol\n   Specification\"\
    , RFC 2203, August 1995.\n   http://www.ietf.org/rfc/rfc2203.txt\n   [RFC2222]\n\
    \   Myers, J., \"Simple Authentication and Security Layer (SASL)\",\n   RFC 2222,\
    \ October 1997.\n   http://www.ietf.org/rfc/rfc2222.txt\n   [RFC2279]\n   Yergeau,\
    \ F., \"UTF-8, a transformation format of ISO 10646\",\n   RFC 2279, January 1998.\n\
    \   http://www.ietf.org/rfc/rfc2279.txt\n   [RFC2246]\n   Dierks, T. and C. Allen,\
    \ \"The TLS Protocols Version 1.0\", RFC 2246,\n   Certicom, January 1999.\n \
    \  http://www.ietf.org/rfc/rfc2246.txt\n   [RFC2401]\n   Kent, S. and R. Atkinson,\
    \ \"Security Architecture for the Internet\n   Protocol\", RFC 2401, November\
    \ 1998.\n   http://www.ietf.org/rfc/rfc2401.txt\n   [DCEACL]\n   The Open Group,\
    \ Open Group Technical Standard, \"DCE 1.1:\n   Authentication and Security Services,\"\
    \ Document Number C311, August\n   1997. Provides a discussion of DEC ACL structure\
    \ and semantics.\n   [HPFS]\n   Les Bell and Associates Pty Ltd, \"The HPFS FAQ,\"\
    \n   http://www.lesbell.com.au/hpfsfaq.html\n   [Hutson]\n   Huston, L.B., Honeyman,\
    \ P., \"Disconnected Operation for AFS,\" June\n   1993. Proc. USENIX Symp. on\
    \ Mobile and Location-Independent\n   Computing, Cambridge, August 1993.\n   [Kistler]\n\
    \   Kistler, James J., Satyanarayanan, M., \"Disconnected Operations in\n   the\
    \ Coda File System,\" ACM Trans. on Computer Systems, vol. 10, no.\n   1, pp.\
    \ 3-25, Feb. 1992.\n   [Mummert]\n   Mummert, L. B., Ebling, M. R., Satyanarayanan,\
    \ M., \"Exploiting Weak\n   Connectivity for Mobile File Access,\" Proc. of the\
    \ 15th ACM Symp.\n   on Operating Systems Principles Dec. 1995.\n   [Nagar]\n\
    \   Nagar, R., \"Windows NT File System Internals,\" ISBN 1565922492,\n   O`Reilly\
    \ & Associates, Inc.\n   [Sandberg]\n   Sandberg, R., D. Goldberg, S. Kleiman,\
    \ D. Walsh, B.  Lyon, \"Design\n   and Implementation of the Sun Network Filesystem,\"\
    \ USENIX\n   Conference Proceedings, USENIX Association, Berkeley, CA, Summer\n\
    \   1985.  The basic paper describing the SunOS implementation of the\n   NFS\
    \ version 2 protocol, and discusses the goals, protocol\n   specification and\
    \ trade-offs.\n   [Satyanarayanan1]\n   Satyanarayanan, M., \"Fundamental Challenges\
    \ in Mobile Computing,\"\n   Proc. of the ACM Principles of Distributed Computing,\
    \ 1995.\n   [Satyanarayanan2]\n   Satyanarayanan, M., Kistler, J. J., Mummert\
    \ L. B., Ebling M. R.,\n   Kumar, P. , Lu,  Q., \"Experience with disconnected\
    \ operation in\n   mobile computing environment,\" Proc. of the USENIX Symp. on\
    \ Mobile\n   and Location-Independent Computing, Jun. 1993.\n   [Unicode1]\n \
    \  \"Unicode Technical Report #8 - The Unicode Standard, Version 2.1\",\n   Unicode,\
    \ Inc., The Unicode Consortium, P.O. Box 700519, San Jose,\n   CA 95710-0519 USA,\
    \ September 1998\n   http://www.unicode.org/unicode/reports/tr8.html\n   [Unicode2]\n\
    \   \"Unsupported Scripts\" Unicode, Inc., The Unicode Consortium, P.O.\n   Box\
    \ 700519, San Jose, CA 95710-0519 USA, October 1998\n   http://www.unicode.org/unicode/standard/unsupported.html\n\
    \   [XDSM]\n   The Open Group, Open Group Technical Standard, \"Systems Management:\n\
    \   Data Storage Management (XDSM) API,\" ISBN 1-85912-190-X, January\n   1997.\n\
    \   [XNFS]\n   The Open Group, Protocols for Interworking: XNFS, Version 3W, The\n\
    \   Open Group, 1010 El Camino Real Suite 380, Menlo Park, CA 94025,\n   ISBN\
    \ 1-85912-184-5, February 1998.\n   HTML version available: http://www.opengroup.org\n"
- title: 12.  Acknowledgments
  contents:
  - "12.  Acknowledgments\n   o    Brent Callaghan for content contributions.\n"
- title: 13.  Author's Address
  contents:
  - "13.  Author's Address\n   Address comments related to this memorandum to:\n \
    \  spencer.shepler@eng.sun.com -or- nfsv4-wg@sunroof.eng.sun.com\n   Spencer Shepler\n\
    \   Sun Microsystems, Inc.\n   7808 Moonflower Drive\n   Austin, Texas 78750\n\
    \   Phone: (512) 349-9376\n   EMail: spencer.shepler@eng.sun.com\n"
- title: 14.  Full Copyright Statement
  contents:
  - "14.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
