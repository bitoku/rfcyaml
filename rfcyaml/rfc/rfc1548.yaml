- title: __initial_text__
  contents:
  - '                   The Point-to-Point Protocol (PPP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) provides a standard method for\n\
    \   transporting multi-protocol datagrams over point-to-point links.  PPP\n  \
    \ is comprised of three main components:\n      1. A method for encapsulating\
    \ multi-protocol datagrams.\n      2. A Link Control Protocol (LCP) for establishing,\
    \ configuring,\n         and testing the data-link connection.\n      3. A family\
    \ of Network Control Protocols (NCPs) for establishing\n         and configuring\
    \ different network-layer protocols.\n   This document defines the PPP organization\
    \ and methodology, and the\n   PPP encapsulation, together with an extensible\
    \ option negotiation\n   mechanism which is able to negotiate a rich assortment\
    \ of\n   configuration parameters and provides additional management\n   functions.\
    \  The PPP Link Control Protocol (LCP) is described in terms\n   of this mechanism.\n\
    \   This document is the product of the Point-to-Point Protocol Working\n   Group\
    \ of the Internet Engineering Task Force (IETF).  Comments should\n   be submitted\
    \ to the ietf-ppp@ucdavis.edu mailing list.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.   Introduction ................................................3\n\
    \   1.1  Specification of Requirements ...............................4\n   1.2\
    \  Terminology .................................................5\n   2.   PPP\
    \ Encapsulation ...........................................5\n   3.   PPP Link\
    \ Operation ..........................................8\n   3.1  Overview ....................................................8\n\
    \   3.2  Phase Diagram ...............................................8\n   3.3\
    \  Link Dead (physical-layer not ready) ........................9\n   3.4  Link\
    \ Establishment Phase ....................................9\n   3.5  Authentication\
    \ Phase ........................................9\n   3.6  Network-Layer Protocol\
    \ Phase ................................10\n   3.7  Link Termination Phase ......................................10\n\
    \   4.   The Option Negotiation Automaton ............................11\n   4.1\
    \  State Diagram ...............................................12\n   4.2  State\
    \ Transition Table ......................................14\n   4.3  A Day in\
    \ the Life ...........................................15\n   4.4  States ......................................................16\n\
    \   4.5  Events ......................................................19\n   4.6\
    \  Actions .....................................................23\n   4.7  Loop\
    \ Avoidance ..............................................26\n   4.8  Counters\
    \ and Timers .........................................26\n   5.   LCP Packet Formats\
    \ ..........................................27\n   5.1  Configure-Request ...........................................29\n\
    \   5.2  Configure-Ack ...............................................30\n   5.3\
    \  Configure-Nak ...............................................31\n   5.4  Configure-Reject\
    \ ............................................33\n   5.5  Terminate-Request and\
    \ Terminate-Ack .........................34\n   5.6  Code-Reject .................................................35\n\
    \   5.7  Protocol-Reject .............................................36\n   5.8\
    \  Echo-Request and Echo-Reply .................................37\n   5.9  Discard-Request\
    \ .............................................39\n   6.   LCP Configuration Options\
    \ ...................................40\n   6.1  Maximum-Receive-Unit ........................................41\n\
    \   6.2  Async-Control-Character-Map .................................42\n   6.3\
    \  Authentication-Protocol .....................................43\n   6.4  Quality-Protocol\
    \ ............................................45\n   6.5  Magic-Number ................................................46\n\
    \   6.6  Protocol-Field-Compression ..................................49\n   6.7\
    \  Address-and-Control-Field-Compression .......................50\n   APPENDIX\
    \ A. LCP Recommended Options ..............................51\n   SECURITY CONSIDERATIONS\
    \ ..........................................51\n   REFERENCES .......................................................52\n\
    \   ACKNOWLEDGEMENTS .................................................52\n   CHAIR'S\
    \ ADDRESS ..................................................52\n   EDITOR'S ADDRESS\
    \ .................................................53\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Encapsulation\n      The PPP encapsulation provides for multiplexing\
    \ of different\n      network-layer protocols simultaneously over the same link.\
    \  It is\n      intended that PPP provide a common solution for easy connection\
    \ of\n      a wide variety of hosts, bridges and routers [1].\n      The PPP encapsulation\
    \ has been carefully designed to retain\n      compatibility with most commonly\
    \ used supporting hardware.\n      Only 8 additional octets are necessary to form\
    \ the encapsulation\n      when used with the default HDLC framing.  In environments\
    \ where\n      bandwidth is at a premium, the encapsulation and framing may be\n\
    \      shortened to 2 or 4 octets.\n      To support high speed implementations,\
    \ the default encapsulation\n      uses only simple fields, only one of which\
    \ needs to be examined\n      for demultiplexing.  The default header and information\
    \ fields\n      fall on 32-bit boundaries, and the trailer may be padded to an\n\
    \      arbitrary boundary.\n    Link Control Protocol\n      In order to be sufficiently\
    \ versatile to be portable to a wide\n      variety of environments, PPP provides\
    \ a Link Control Protocol\n      (LCP).  The LCP is used to automatically agree\
    \ upon the\n      encapsulation format options, handle varying limits on sizes\
    \ of\n      packets, authenticate the identity of its peer on the link,\n    \
    \  determine when a link is functioning properly and when it is\n      defunct,\
    \ detect a looped-back link and other common\n      misconfiguration errors, and\
    \ terminate the link.\n    Network Control Protocols\n      Point-to-Point links\
    \ tend to exacerbate many problems with the\n      current family of network protocols.\
    \  For instance, assignment and\n      management of IP addresses, which is a\
    \ problem even in LAN\n      environments, is especially difficult over circuit-switched\n\
    \      point-to-point links (such as dial-up modem servers).  These\n      problems\
    \ are handled by a family of Network Control Protocols\n      (NCPs), which each\
    \ manage the specific needs required by their\n      respective network-layer\
    \ protocols.  These NCPs are defined in\n      companion documents.\n    Configuration\n\
    \      It is intended that PPP links be easy to configure.  By design,\n     \
    \ the standard defaults handle all common configurations.  The\n      implementor\
    \ can specify improvements to the default configuration,\n      which are automatically\
    \ communicated to the peer without operator\n      intervention.  Finally, the\
    \ operator may explicitly configure\n      options for the link which enable the\
    \ link to operate in\n      environments where it would otherwise be impossible.\n\
    \      This self-configuration is implemented through an extensible\n      option\
    \ negotiation mechanism, wherein each end of the link\n      describes to the\
    \ other its capabilities and requirements.\n      Although the option negotiation\
    \ mechanism described in this\n      document is specified in terms of the Link\
    \ Control Protocol (LCP),\n      the same facilities are designed to be used by\
    \ other control\n      protocols, especially the family of NCPs.\n"
- title: 1.1 Specification of Requirements
  contents:
  - "1.1 Specification of Requirements\n      In this document, several words are\
    \ used to signify the\n      requirements of the specification.  These words are\
    \ often\n      capitalized.\n    MUST\n      This word, or the adjective \"required\"\
    , means that the definition\n      is an absolute requirement of the specification.\n\
    \    MUST NOT\n      This phrase means that the definition is an absolute prohibition\n\
    \      of the specification.\n    SHOULD\n      This word, or the adjective \"\
    recommended\", means that there may\n      exist valid reasons in particular circumstances\
    \ to ignore this\n      item, but the full implications must be understood and\
    \ carefully\n      weighed before choosing a different course.\n    MAY\n    \
    \  This word, or the adjective \"optional\", means that this item is\n      one\
    \ of an allowed set of alternatives.  An implementation which\n      does not\
    \ include this option MUST be prepared to interoperate with\n      another implementation\
    \ which does include the option.\n"
- title: 1.2 Terminology
  contents:
  - "1.2 Terminology\n      This document frequently uses the following terms:\n \
    \   datagram\n      The unit of transmission in the network layer (such as IP).\
    \  A\n      datagram may be encapsulated in one or more packets passed to the\n\
    \      data link layer.\n    frame\n      The unit of transmission at the data\
    \ link layer.  A frame may\n      include a header and/or a trailer, along with\
    \ some number of units\n      of data.\n    packet\n      The basic unit of encapsulation,\
    \ which is passed across the\n      interface between the network layer and the\
    \ data link layer.  A\n      packet is usually mapped to a frame; the exceptions\
    \ are when data\n      link layer fragmentation is being performed, or when multiple\n\
    \      packets are incorporated into a single frame.\n    peer\n      The other\
    \ end of the point-to-point link.\n    silently discard\n      This means the\
    \ implementation discards the packet without further\n      processing.  The implementation\
    \ SHOULD provide the capability of\n      logging the error, including the contents\
    \ of the silently\n      discarded packet, and SHOULD record the event in a statistics\n\
    \      counter.\n"
- title: 2. PPP Encapsulation
  contents:
  - "2. PPP Encapsulation\n   The PPP encapsulation is used to disambiguate multiprotocol\n\
    \   datagrams.  This encapsulation requires framing to indicate the\n   beginning\
    \ and end of the encapsulation.  Methods of providing framing\n   are specified\
    \ in companion documents.\n   A summary of the PPP encapsulation is shown below.\
    \  The fields are\n   transmitted from left to right.\n              +----------+-------------+---------+\n\
    \              | Protocol | Information | Padding |\n              | 16 bits \
    \ |      *      |    *    |\n              +----------+-------------+---------+\n\
    \    Protocol Field\n      The Protocol field is two octets and its value identifies\
    \ the\n      datagram encapsulated in the Information field of the packet.  The\n\
    \      field is transmitted and received most significant octet first.\n     \
    \ The structure of this field is consistent with the ISO 3309\n      extension\
    \ mechanism for address fields.  All Protocols MUST be\n      odd; the least significant\
    \ bit of the least significant octet MUST\n      equal \"1\".  Also, all Protocols\
    \ MUST be assigned such that the\n      least significant bit of the most significant\
    \ octet equals \"0\".\n      Frames received which don't comply with these rules\
    \ MUST be\n      treated as having an unrecognized Protocol.\n      Protocol field\
    \ values in the \"0***\" to \"3***\" range identify the\n      network-layer protocol\
    \ of specific packets, and values in the\n      \"8***\" to \"b***\" range identify\
    \ packets belonging to the\n      associated Network Control Protocols (NCPs),\
    \ if any.\n      Protocol field values in the \"4***\" to \"7***\" range are used\
    \ for\n      protocols with low volume traffic which have no associated NCP.\n\
    \      Protocol field values in the \"c***\" to \"f***\" range identify\n    \
    \  packets as link-layer Control Protocols (such as LCP).\n      Up-to-date values\
    \ of the Protocol field are specified in the most\n      recent \"Assigned Numbers\"\
    \ RFC [2].  Current values are assigned as\n      follows:\n           Value (in\
    \ hex)  Protocol Name\n           0001            Padding Protocol\n         \
    \  0003 to 001f    reserved (transparency inefficient)\n           0021      \
    \      Internet Protocol\n           0023            OSI Network Layer\n     \
    \      0025            Xerox NS IDP\n           0027            DECnet Phase IV\n\
    \           0029            Appletalk\n           002b            Novell IPX\n\
    \           002d            Van Jacobson Compressed TCP/IP\n           002f  \
    \          Van Jacobson Uncompressed TCP/IP\n           0031            Bridging\
    \ PDU\n           0033            Stream Protocol (ST-II)\n           0035   \
    \         Banyan Vines\n           0037            unused\n           0039   \
    \         AppleTalk EDDP\n           003b            AppleTalk SmartBuffered\n\
    \           003d            Multi-Link\n           005d            reserved (compression\
    \ inefficient)\n           00cf            reserved (PPP NLPID)\n           00fd\
    \            1st choice compression\n           00ff            reserved (compression\
    \ inefficient)\n           0201            802.1d Hello Packets\n           0203\
    \            IBM Source Routing BPDU\n           0231            Luxcom\n    \
    \       0233            Sigma Network Systems\n           8021            Internet\
    \ Protocol Control Protocol\n           8023            OSI Network Layer Control\
    \ Protocol\n           8025            Xerox NS IDP Control Protocol\n       \
    \    8027            DECnet Phase IV Control Protocol\n           8029       \
    \     Appletalk Control Protocol\n           802b            Novell IPX Control\
    \ Protocol\n           802d            Reserved\n           802f            Reserved\n\
    \           8031            Bridging NCP\n           8033            Stream Protocol\
    \ Control Protocol\n           8035            Banyan Vines Control Protocol\n\
    \           8037            unused\n           8039            Reserved\n    \
    \       803b            Reserved\n           803d            Multi-Link Control\
    \ Protocol\n           80fd            Compression Control Protocol\n        \
    \   80ff            Reserved\n           c021            Link Control Protocol\n\
    \           c023            Password Authentication Protocol\n           c025\
    \            Link Quality Report\n           c223            Challenge Handshake\
    \ Authentication Protocol\n      Developers of new protocols MUST obtain a number\
    \ from the Internet\n      Assigned Numbers Authority (IANA), at IANA@isi.edu.\n\
    \    Information Field\n      The Information field is zero or more octets.  The\
    \ Information\n      field contains the datagram for the protocol specified in\
    \ the\n      Protocol field.\n      The maximum length for the Information field,\
    \ including Padding,\n      is termed the Maximum Receive Unit (MRU), which defaults\
    \ to 1500\n      octets.  By negotiation, consenting PPP implementations may use\n\
    \      other values for the MRU.\n    Padding\n      On transmission, the Information\
    \ field MAY be padded with an\n      arbitrary number of octets up to the MRU.\
    \  It is the\n      responsibility of each protocol to distinguish padding octets\
    \ from\n      real information.\n"
- title: 3.  PPP Link Operation
  contents:
  - '3.  PPP Link Operation

    '
- title: 3.1 Overview
  contents:
  - "3.1 Overview\n   In order to establish communications over a point-to-point link,\
    \ each\n   end of the PPP link MUST first send LCP packets to configure and test\n\
    \   the data link.  After the link has been established, the peer MAY be\n   authenticated.\
    \  Then, PPP MUST send NCP packets to choose and\n   configure one or more network-layer\
    \ protocols.  Once each of the\n   chosen network-layer protocols has been configured,\
    \ datagrams from\n   each network-layer protocol can be sent over the link.\n\
    \   The link will remain configured for communications until explicit LCP\n  \
    \ or NCP packets close the link down, or until some external event\n   occurs\
    \ (an inactivity timer expires or network administrator\n   intervention).\n"
- title: 3.2 Phase Diagram
  contents:
  - "3.2 Phase Diagram\n   In the process of configuring, maintaining and terminating\
    \ the\n   point-to-point link, the PPP link goes through several distinct\n  \
    \ phases:\n   +------+        +-----------+           +--------------+\n   | \
    \     | UP     |           | OPENED    |              | SUCCESS/NONE\n   | Dead\
    \ |------->| Establish |---------->| Authenticate |--+\n   |      |        | \
    \          |           |              |  |\n   +------+        +-----------+ \
    \          +--------------+  |\n      ^          FAIL |                   FAIL\
    \ |             |\n      +<--------------+             +----------+          \
    \   |\n      |                             |                        |\n      |\
    \            +-----------+    |           +---------+  |\n      |       DOWN |\
    \           |    |   CLOSING |         |  |\n      +------------| Terminate |<---+<----------|\
    \ Network |<-+\n                   |           |                |         |\n\
    \                   +-----------+                +---------+\n"
- title: 3.3 Link Dead (physical-layer not ready)
  contents:
  - "3.3 Link Dead (physical-layer not ready)\n   The link necessarily begins and\
    \ ends with this phase.  When an\n   external event (such as carrier detection\
    \ or network administrator\n   configuration) indicates that the physical-layer\
    \ is ready to be used,\n   PPP will proceed to the Link Establishment phase.\n\
    \   During this phase, the LCP automaton (described below) will be in the\n  \
    \ Initial or Starting states.  The transition to the Link Establishment\n   phase\
    \ will signal an Up event to the automaton.\n    Implementation Note:\n      Typically,\
    \ a link will return to this phase automatically after\n      the disconnection\
    \ of a modem.  In the case of a hard-wired line,\n      this phase may be extremely\
    \ short -- merely long enough to detect\n      the presence of the device.\n"
- title: 3.4 Link Establishment Phase
  contents:
  - "3.4 Link Establishment Phase\n   The Link Control Protocol (LCP) is used to establish\
    \ the connection\n   through an exchange of Configure packets.  This exchange\
    \ is complete,\n   and the LCP Opened state entered, once a Configure-Ack packet\n\
    \   (described below) has been both sent and received.\n   All Configuration Options\
    \ are assumed to be at default values unless\n   altered by the configuration\
    \ exchange.  See the section on LCP\n   Configuration Options for further discussion.\n\
    \   It is important to note that only Configuration Options which are\n   independent\
    \ of particular network-layer protocols are configured by\n   LCP.  Configuration\
    \ of individual network-layer protocols is handled\n   by separate Network Control\
    \ Protocols (NCPs) during the Network-Layer\n   Protocol phase.\n   Any non-LCP\
    \ packets received during this phase MUST be silently\n   discarded.\n"
- title: 3.5 Authentication Phase
  contents:
  - "3.5 Authentication Phase\n   On some links it may be desirable to require a peer\
    \ to authenticate\n   itself before allowing network-layer protocol packets to\
    \ be\n   exchanged.\n   By default, authentication is not mandatory.  If an implementation\n\
    \   desires that the peer authenticate with some specific authentication\n   protocol,\
    \ then it MUST negotiate the use of that authentication\n   protocol during Link\
    \ Establishment phase.\n   Authentication SHOULD take place as soon as possible\
    \ after link\n   establishment.  However, link quality determination MAY occur\n\
    \   concurrently.  An implementation MUST NOT allow the exchange of link\n   quality\
    \ determination packets to delay authentication indefinitely.\n   Advancement\
    \ from the Authentication phase to the Network-Layer\n   Protocol phase MUST NOT\
    \ occur until authentication has completed,\n   using the negotiated authentication\
    \ protocol.  If authentication\n   fails, PPP SHOULD proceed instead to the Link\
    \ Termination phase.\n   Any Network Control Protocol or network-layer protocol\
    \ packets\n   received during this phase MUST be silently discarded.\n"
- title: 3.6 Network-Layer Protocol Phase
  contents:
  - "3.6 Network-Layer Protocol Phase\n   Once PPP has finished the previous phases,\
    \ each network-layer\n   protocol (such as IP, IPX, or AppleTalk) MUST be separately\n\
    \   configured by the appropriate Network Control Protocol (NCP).\n   Each NCP\
    \ MAY be Opened and Closed at any time.\n    Implementation Note:\n      Because\
    \ an implementation may initially use a significant amount\n      of time for\
    \ link quality determination, implementations SHOULD\n      avoid fixed timeouts\
    \ when waiting for their peers to configure a\n      NCP.\n      After a NCP has\
    \ reached the Opened state, PPP will carry the\n      corresponding network-layer\
    \ protocol packets.  Any network-layer\n      protocol packets received when the\
    \ corresponding NCP is not in the\n      Opened state MUST be silently discarded.\n\
    \    Implementation Note:\n      There is an exception to the preceding paragraphs,\
    \ due to the\n      availability of the LCP Protocol-Reject (described below).\
    \  While\n      LCP is in the Opened state, any protocol packet which is\n   \
    \   unsupported by the implementation MUST be returned in a Protocol-\n      Reject.\
    \  Only protocols which are supported are silently\n      discarded.\n      During\
    \ this phase, link traffic consists of any possible\n      combination of LCP,\
    \ NCP, and network-layer protocol packets.\n"
- title: 3.7 Link Termination Phase
  contents:
  - "3.7 Link Termination Phase\n   PPP can terminate the link at any time.  This\
    \ might happen because of\n   the loss of carrier, authentication failure, link\
    \ quality failure,\n   the expiration of an idle-period timer, or the administrative\
    \ closing\n   of the link.  LCP is used to close the link through an exchange\
    \ of\n   Terminate packets.  When the link is closing, PPP informs the\n   network-layer\
    \ protocols so that they may take appropriate action.\n   After the exchange of\
    \ Terminate packets, the implementation SHOULD\n   signal the physical-layer to\
    \ disconnect in order to enforce the\n   termination of the link, particularly\
    \ in the case of an\n   authentication failure.  The sender of the Terminate-Request\
    \ SHOULD\n   disconnect after receiving a Terminate-Ack, or after the Restart\n\
    \   counter expires.  The receiver of a Terminate-Request SHOULD wait for\n  \
    \ the peer to disconnect, and MUST NOT disconnect until at least one\n   Restart\
    \ time has passed after sending a Terminate-Ack.  PPP SHOULD\n   proceed to the\
    \ Link Dead phase.\n   Any non-LCP packets received during this phase MUST be\
    \ silently\n   discarded.\n    Implementation Note:\n      The closing of the\
    \ link by LCP is sufficient.  There is no need\n      for each NCP to send a flurry\
    \ of Terminate packets.  Conversely,\n      the fact that one NCP has Closed is\
    \ not sufficient reason to cause\n      the termination of the PPP link, even\
    \ if that NCP was the only NCP\n      currently in the Opened state.\n"
- title: 4. The Option Negotiation Automaton
  contents:
  - "4. The Option Negotiation Automaton\n   The finite-state automaton is defined\
    \ by events, actions and state\n   transitions.  Events include reception of external\
    \ commands such as\n   Open and Close, expiration of the Restart timer, and reception\
    \ of\n   packets from a peer.  Actions include the starting of the Restart\n \
    \  timer and transmission of packets to the peer.\n   Some types of packets --\
    \ Configure-Naks and Configure-Rejects, or\n   Code-Rejects and Protocol-Rejects,\
    \ or Echo-Requests, Echo-Replies and\n   Discard-Requests -- are not differentiated\
    \ in the automaton\n   descriptions.  As will be described later, these packets\
    \ do indeed\n   serve different functions.  However, they always cause the same\n\
    \   transitions.\n"
- title: Events                                  Actions
  contents:
  - 'Events                                  Actions

    '
- title: Up   = lower layer is Up                tlu = This-Layer-Up
  contents:
  - 'Up   = lower layer is Up                tlu = This-Layer-Up

    '
- title: Down = lower layer is Down              tld = This-Layer-Down
  contents:
  - 'Down = lower layer is Down              tld = This-Layer-Down

    '
- title: Open = administrative Open              tls = This-Layer-Started
  contents:
  - 'Open = administrative Open              tls = This-Layer-Started

    '
- title: Close= administrative Close             tlf = This-Layer-Finished
  contents:
  - 'Close= administrative Close             tlf = This-Layer-Finished

    '
- title: TO+  = Timeout with counter > 0         irc = Initialize-Restart-Counter
  contents:
  - 'TO+  = Timeout with counter > 0         irc = Initialize-Restart-Counter

    '
- title: TO-  = Timeout with counter expired     zrc = Zero-Restart-Counter
  contents:
  - 'TO-  = Timeout with counter expired     zrc = Zero-Restart-Counter

    '
- title: RCR+ = Receive-Configure-Request (Good) scr = Send-Configure-Request
  contents:
  - 'RCR+ = Receive-Configure-Request (Good) scr = Send-Configure-Request

    '
- title: RCR- = Receive-Configure-Request (Bad)
  contents:
  - 'RCR- = Receive-Configure-Request (Bad)

    '
- title: RCA  = Receive-Configure-Ack            sca = Send-Configure-Ack
  contents:
  - 'RCA  = Receive-Configure-Ack            sca = Send-Configure-Ack

    '
- title: RCN  = Receive-Configure-Nak/Rej        scn = Send-Configure-Nak/Rej
  contents:
  - 'RCN  = Receive-Configure-Nak/Rej        scn = Send-Configure-Nak/Rej

    '
- title: RTR  = Receive-Terminate-Request        str = Send-Terminate-Request
  contents:
  - 'RTR  = Receive-Terminate-Request        str = Send-Terminate-Request

    '
- title: RTA  = Receive-Terminate-Ack            sta = Send-Terminate-Ack
  contents:
  - 'RTA  = Receive-Terminate-Ack            sta = Send-Terminate-Ack

    '
- title: RUC  = Receive-Unknown-Code             scj = Send-Code-Reject
  contents:
  - 'RUC  = Receive-Unknown-Code             scj = Send-Code-Reject

    '
- title: RXJ+ = Receive-Code-Reject (permitted)
  contents:
  - "RXJ+ = Receive-Code-Reject (permitted)\n    or Receive-Protocol-Reject\n"
- title: RXJ- = Receive-Code-Reject (catastrophic)
  contents:
  - "RXJ- = Receive-Code-Reject (catastrophic)\n    or Receive-Protocol-Reject\n"
- title: RXR  = Receive-Echo-Request             ser = Send-Echo-Reply
  contents:
  - "RXR  = Receive-Echo-Request             ser = Send-Echo-Reply\n    or Receive-Echo-Reply\n\
    \    or Receive-Discard-Request\n"
- title: 4.1 State Diagram
  contents:
  - "4.1 State Diagram\n   The simplified state diagram which follows describes the\
    \ sequence of\n   events for reaching agreement on Configuration Options (opening\
    \ the\n   PPP link) and for later termination of the link.\n   This diagram is\
    \ not a complete representation of the automaton.\n   Implementation MUST be done\
    \ by consulting the actual state transition\n   table.\n   Events are in upper\
    \ case.  Actions are in lower case.  For these\n   purposes, the state machine\
    \ is initially in the Closed state.  Once\n   the Opened state has been reached,\
    \ both ends of the link have met the\n   requirement of having both sent and received\
    \ a Configure-Ack packet.\n                 RCR                    TO+\n     \
    \          +--sta-->+             +------->+\n               |        |      \
    \       |        |\n         +-------+      |   RTA +-------+      | Close +-------+\n\
    \         |       |<-----+<------|       |<-str-+<------|       |\n         |Closed\
    \ |              |Closing|              |Opened |\n         |       | Open   \
    \      |       |              |       |\n         |       |------+       |   \
    \    |              |       |\n         +-------+      |       +-------+     \
    \         +-------+\n                        |                               \
    \ ^\n                        |                                |\n            \
    \            |         +-sca----------------->+\n                        |   \
    \      |                      ^\n                RCN,TO+ V    RCR+ |     RCR-\
    \         RCA |    RCN,TO+\n               +------->+         |   +------->+ \
    \        |   +--scr-->+\n               |        |         |   |        |    \
    \     |   |        |\n         +-------+      |   TO+ +-------+      |       +-------+\
    \      |\n         |       |<-scr-+<------|       |<-scn-+       |       |<-----+\n\
    \         | Req-  |              | Ack-  |              | Ack-  |\n         |\
    \ Sent  | RCA          | Rcvd  |              | Sent  |\n  +-scn->|       |------------->|\
    \       |       +-sca->|       |\n  |      +-------+              +-------+  \
    \     |      +-------+\n  |   RCR- |   | RCR+                           |   RCR+\
    \ |   | RCR-\n  |        |   +------------------------------->+<-------+   |\n\
    \  |        |                                                 |\n  +<-------+<------------------------------------------------+\n"
- title: 4.2 State Transition Table
  contents:
  - "4.2 State Transition Table\n  The complete state transition table follows.  States\
    \ are indicated\n  horizontally, and events are read vertically.  State transitions\
    \ and\n  actions are represented in the form action/new-state.  Multiple\n  actions\
    \ are separated by commas, and may continue on succeeding lines\n  as space requires;\
    \ multiple actions may be implemented in any\n  convenient order.  The state may\
    \ be followed by a letter, which\n  indicates an explanatory footnote.  The dash\
    \ ('-') indicates an\n  illegal transition.\n         | State\n         |    0\
    \         1         2         3         4         5\n   Events| Initial   Starting\
    \  Closed    Stopped   Closing   Stopping\n   ------+-----------------------------------------------------------\n\
    \    Up   |    2     irc,scr/6     -         -         -         -\n    Down |\
    \    -         -         0       tls/1       0         1\n    Open |  tls/1  \
    \     1     irc,scr/6     3r        5r        5r\n    Close|    0         0  \
    \       2         2         4         4\n         |\n     TO+ |    -         -\
    \         -         -       str/4     str/5\n     TO- |    -         -       \
    \  -         -       tlf/2     tlf/3\n         |\n    RCR+ |    -         -  \
    \     sta/2 irc,scr,sca/8   4         5\n    RCR- |    -         -       sta/2\
    \ irc,scr,scn/6   4         5\n    RCA  |    -         -       sta/2     sta/3\
    \       4         5\n    RCN  |    -         -       sta/2     sta/3       4 \
    \        5\n         |\n    RTR  |    -         -       sta/2     sta/3     sta/4\
    \     sta/5\n    RTA  |    -         -         2         3       tlf/2     tlf/3\n\
    \         |\n    RUC  |    -         -       scj/2     scj/3     scj/4     scj/5\n\
    \    RXJ+ |    -         -         2         3         4         5\n    RXJ- |\
    \    -         -       tlf/2     tlf/3     tlf/2     tlf/3\n         |\n    RXR\
    \  |    -         -         2         3         4         5\n            | State\n\
    \            |    6         7         8           9\n      Events| Req-Sent  Ack-Rcvd\
    \  Ack-Sent    Opened\n      ------+-----------------------------------------\n\
    \       Up   |    -         -         -           -\n       Down |    1      \
    \   1         1         tld/1\n       Open |    6         7         8        \
    \   9r\n       Close|irc,str/4 irc,str/4 irc,str/4 tld,irc,str/4\n           \
    \ |\n        TO+ |  scr/6     scr/6     scr/8         -\n        TO- |  tlf/3p\
    \    tlf/3p    tlf/3p        -\n            |\n       RCR+ |  sca/8   sca,tlu/9\
    \   sca/8   tld,scr,sca/8\n       RCR- |  scn/6     scn/7     scn/6   tld,scr,scn/6\n\
    \       RCA  |  irc/7     scr/6x  irc,tlu/9   tld,scr/6x\n       RCN  |irc,scr/6\
    \   scr/6x  irc,scr/8   tld,scr/6x\n            |\n       RTR  |  sta/6     sta/6\
    \     sta/6   tld,zrc,sta/5\n       RTA  |    6         6         8       tld,scr/6\n\
    \            |\n       RUC  |  scj/6     scj/7     scj/8       scj/9\n       RXJ+\
    \ |    6         6         8           9\n       RXJ- |  tlf/3     tlf/3     tlf/3\
    \   tld,irc,str/5\n            |\n       RXR  |    6         7         8     \
    \    ser/9\n   The states in which the Restart timer is running are identifiable\
    \ by\n   the presence of TO events.  Only the Send-Configure-Request, Send-\n\
    \   Terminate-Request and Zero-Restart-Counter actions start or re-start\n   the\
    \ Restart timer.  The Restart timer is stopped when transitioning\n   from any\
    \ state where the timer is running to a state where the timer\n   is not running.\n\
    \      [p]   Passive option; see Stopped state discussion.\n      [r]   Restart\
    \ option; see Open event discussion.\n      [x]   Crossed connection; see RCA\
    \ event discussion.\n"
- title: 4.3 A Day in the Life
  contents:
  - "4.3 A Day in the Life\n   Here is an example of how a typical implementation\
    \ might use the\n   automaton to implement LCP in a dial-up environment:\n   -\
    \  The Network Access Server is powered on (Initial state, Link Dead\n      phase).\n\
    \   -  A configuration file indicates that a particular link is to be\n      used\
    \ for PPP access (Open: tls/Starting).  The This-Layer-Started\n      event turns\
    \ on DTR to a modem, readying it for accepting calls.\n   -  An incoming call\
    \ is answered.  The modem CD triggers configuration\n      negotiation (Up: irc,scr/Req-Sent,\
    \ Link Establishment phase).\n   -  A Configure-Request is received, which is\
    \ acknowleged (RCR+:\n      sca/Ack-Sent).\n   -  The Request is acknowleged (RCA:\
    \ irc,tlu/Opened).  The This-\n      Layer-Up event starts authentication and\
    \ quality monitoring\n      protocols (Authentication phase).\n   -  When authentication\
    \ and quality monitoring are satisfied, they\n      send an Up event to start\
    \ the available NCPs (Network-Layer\n      Protocol phase).\n   -  Later, the\
    \ peer is finished, and closes the link.  A Terminate-\n      Request arrives\
    \ (RTR: tld,zrc,sta/Stopping, Termination phase).\n      The This-Layer-Down action\
    \ sends the Down event to any NCPs, while\n      the Terminate-Ack is sent.  The\
    \ Zero-Restart-Counter action causes\n      the link to wait for the peer to process\
    \ the Terminate-Ack, with\n      no retries.\n   -  When the Restart Timer times\
    \ out (TO-: tlf/Stopped), the This-\n      Layer-Finished action signals the modem\
    \ to hang up by dropping\n      DTR.\n   -  When the CD from the modem drops (Down:\
    \ tls/Starting), the This-\n      Layer-Started action raises DTR again, readying\
    \ it for the next\n      call (returning to the Link Dead phase).\n"
- title: 4.4 States
  contents:
  - "4.4 States\n   Following is a more detailed description of each automaton state.\n\
    \    Initial\n      In the Initial state, the lower layer is unavailable (Down),\
    \ and\n      no Open has occurred.  The Restart timer is not running in the\n\
    \      Initial state.\n    Starting\n      The Starting state is the Open counterpart\
    \ to the Initial state.\n      An administrative Open has been initiated, but\
    \ the lower layer is\n      still unavailable (Down).  The Restart timer is not\
    \ running in the\n      Starting state.\n      When the lower layer becomes available\
    \ (Up), a Configure-Request\n      is sent.\n    Closed\n      In the Closed state,\
    \ the link is available (Up), but no Open has\n      occurred.  The Restart timer\
    \ is not running in the Closed state.\n      Upon reception of Configure-Request\
    \ packets, a Terminate-Ack is\n      sent.  Terminate-Acks are silently discarded\
    \ to avoid creating a\n      loop.\n    Stopped\n      The Stopped state is the\
    \ Open counterpart to the Closed state.  It\n      is entered when the automaton\
    \ is waiting for a Down event after\n      the This-Layer-Finished action, or\
    \ after sending a Terminate-Ack.\n      The Restart timer is not running in the\
    \ Stopped state.\n      Upon reception of Configure-Request packets, an appropriate\n\
    \      response is sent.  Upon reception of other packets, a Terminate-\n    \
    \  Ack is sent.  Terminate-Acks are silently discarded to avoid\n      creating\
    \ a loop.\n    Rationale:\n      The Stopped state is a junction state for link\
    \ termination, link\n      configuration failure, and other automaton failure\
    \ modes.  These\n      potentially separate states have been combined.\n     \
    \ There is a race condition between the Down event response (from\n      the This-Layer-Finished\
    \ action) and the Receive-Configure- Request\n      event.  When a Configure-Request\
    \ arrives before the Down event,\n      the Down event will supercede by returning\
    \ the automaton to the\n      Starting state.  This prevents attack by repetition.\n\
    \    Implementation Option:\n      After the peer fails to respond to Configure-Requests,\
    \ an\n      implementation MAY wait passively for the peer to send Configure-\n\
    \      Requests.  In this case, the This-Layer-Finished action is not\n      used\
    \ for the TO- event in states Req-Sent, Ack- Rcvd and Ack-Sent.\n      This option\
    \ is useful for dedicated circuits, or circuits which\n      have no status signals\
    \ available, but SHOULD NOT be used for\n      switched circuits.\n    Closing\n\
    \      In the Closing state, an attempt is made to terminate the\n      connection.\
    \  A Terminate-Request has been sent and the Restart\n      timer is running,\
    \ but a Terminate-Ack has not yet been received.\n      Upon reception of a Terminate-Ack,\
    \ the Closed state is entered.\n      Upon the expiration of the Restart timer,\
    \ a new Terminate-Request\n      is transmitted and the Restart timer is restarted.\
    \  After the\n      Restart timer has expired Max-Terminate times, this action\
    \ may be\n      skipped, and the Closed state may be entered.\n    Stopping\n\
    \      The Stopping state is the Open counterpart to the Closing state.\n    \
    \  A Terminate-Request has been sent and the Restart timer is\n      running,\
    \ but a Terminate-Ack has not yet been received.\n    Rationale:\n      The Stopping\
    \ state provides a well defined opportunity to\n      terminate a link before\
    \ allowing new traffic.  After the link has\n      terminated, a new configuration\
    \ may occur via the Stopped or\n      Starting states.\n    Request-Sent\n   \
    \   In the Request-Sent state an attempt is made to configure the\n      connection.\
    \  A Configure-Request has been sent and the Restart\n      timer is running,\
    \ but a Configure-Ack has not yet been received\n      nor has one been sent.\n\
    \    Ack-Received\n      In the Ack-Received state, a Configure-Request has been\
    \ sent and a\n      Configure-Ack has been received.  The Restart timer is still\n\
    \      running since a Configure-Ack has not yet been sent.\n    Ack-Sent\n  \
    \    In the Ack-Sent state, a Configure-Request and a Configure-Ack\n      have\
    \ both been sent but a Configure-Ack has not yet been received.\n      The Restart\
    \ timer is always running in the Ack-Sent state.\n    Opened\n      In the Opened\
    \ state, a Configure-Ack has been both sent and\n      received.  The Restart\
    \ timer is not running in the Opened state.\n      When entering the Opened state,\
    \ the implementation SHOULD signal\n      the upper layers that it is now Up.\
    \  Conversely, when leaving the\n      Opened state, the implementation SHOULD\
    \ signal the upper layers\n      that it is now Down.\n"
- title: 4.5 Events
  contents:
  - "4.5 Events\n   Transitions and actions in the automaton are caused by events.\n\
    \    Up\n      The Up event occurs when a lower layer indicates that it is ready\n\
    \      to carry packets.\n      Typically, this event is used by a modem handling\
    \ or calling\n      process, or by some other coupling of the PPP link to the\
    \ physical\n      media, to signal LCP that the link is entering Link Establishment\n\
    \      phase.\n      It also can be used by LCP to signal each NCP that the link\
    \ is\n      entering Network-Layer Protocol phase.  That is, the This-Layer-Up\n\
    \      action from LCP triggers the Up event in the NCP.\n    Down\n      The\
    \ Down event occurs when a lower layer indicates that it is no\n      longer ready\
    \ to carry packets.\n      Typically, this event is used by a modem handling or\
    \ calling\n      process, or by some other coupling of the PPP link to the physical\n\
    \      media, to signal LCP that the link is entering Link Dead phase.\n     \
    \ It also can be used by LCP to signal each NCP that the link is\n      leaving\
    \ Network-Layer Protocol phase.  That is, the This-Layer-\n      Down action from\
    \ LCP triggers the Down event in the NCP.\n    Open\n      The Open event indicates\
    \ that the link is administratively\n      available for traffic; that is, the\
    \ network administrator (human\n      or program) has indicated that the link\
    \ is allowed to be Opened.\n      When this event occurs, and the link is not\
    \ in the Opened state,\n      the automaton attempts to send configuration packets\
    \ to the peer.\n      If the automaton is not able to begin configuration (the\
    \ lower\n      layer is Down, or a previous Close event has not completed), the\n\
    \      establishment of the link is automatically delayed.\n      When a Terminate-Request\
    \ is received, or other events occur which\n      cause the link to become unavailable,\
    \ the automaton will progress\n      to a state where the link is ready to re-open.\
    \  No additional\n      administrative intervention is necessary.\n    Implementation\
    \ Option:\n      Experience has shown that users will execute an additional Open\n\
    \      command when they want to renegotiate the link.  This might\n      indicate\
    \ that new values are to be negotiated.\n      Since this is not the meaning of\
    \ the Open event, it is suggested\n      that when an Open user command is executed\
    \ in the Opened, Closing,\n      Stopping, or Stopped states, the implementation\
    \ issue a Down\n      event, immediately followed by an Up event.  This will cause\
    \ the\n      renegotiation of the link, without any harmful side effects.\n  \
    \  Close\n      The Close event indicates that the link is not available for\n\
    \      traffic; that is, the network administrator (human or program) has\n  \
    \    indicated that the link is not allowed to be Opened.  When this\n      event\
    \ occurs, and the link is not in the Closed state, the\n      automaton attempts\
    \ to terminate the connection.  Futher attempts\n      to re-configure the link\
    \ are denied until a new Open event occurs.\n    Implementation Note:\n      When\
    \ authentication fails, the link SHOULD be terminated, to\n      prevent attack\
    \ by repetition and denial of service to other users.\n      Since the link is\
    \ administratively available (by definition), this\n      can be accomplished\
    \ by simulating a Close event to the LCP,\n      immediately followed by an Open\
    \ event.\n      The Close followed by an Open will cause an orderly termination\
    \ of\n      the link, by progressing from the Closing to the Stopping state,\n\
    \      and the This-Layer-Finished action can disconnect the link.  The\n    \
    \  automaton waits in the Stopped or Starting states for the next\n      connection\
    \ attempt.\n    Timeout (TO+,TO-)\n      This event indicates the expiration of\
    \ the Restart timer.  The\n      Restart timer is used to time responses to Configure-Request\
    \ and\n      Terminate-Request packets.\n      The TO+ event indicates that the\
    \ Restart counter continues to be\n      greater than zero, which triggers the\
    \ corresponding Configure-\n      Request or Terminate-Request packet to be retransmitted.\n\
    \      The TO- event indicates that the Restart counter is not greater\n     \
    \ than zero, and no more packets need to be retransmitted.\n    Receive-Configure-Request\
    \ (RCR+,RCR-)\n      This event occurs when a Configure-Request packet is received\
    \ from\n      the peer.  The Configure-Request packet indicates the desire to\n\
    \      open a connection and may specify Configuration Options.  The\n      Configure-Request\
    \ packet is more fully described in a later\n      section.\n      The RCR+ event\
    \ indicates that the Configure-Request was\n      acceptable, and triggers the\
    \ transmission of a corresponding\n      Configure-Ack.\n      The RCR- event\
    \ indicates that the Configure-Request was\n      unacceptable, and triggers the\
    \ transmission of a corresponding\n      Configure-Nak or Configure-Reject.\n\
    \    Implementation Note:\n      These events may occur on a connection which\
    \ is already in the\n      Opened state.  The implementation MUST be prepared\
    \ to immediately\n      renegotiate the Configuration Options.\n    Receive-Configure-Ack\
    \ (RCA)\n      The Receive-Configure-Ack event occurs when a valid Configure-Ack\n\
    \      packet is received from the peer.  The Configure-Ack packet is a\n    \
    \  positive response to a Configure-Request packet.  An out of\n      sequence\
    \ or otherwise invalid packet is silently discarded.\n    Implementation Note:\n\
    \      Since the correct packet has already been received before reaching\n  \
    \    the Ack-Rcvd or Opened states, it is extremely unlikely that\n      another\
    \ such packet will arrive.  As specified, all invalid\n      Ack/Nak/Rej packets\
    \ are silently discarded, and do not affect the\n      transitions of the automaton.\n\
    \      However, it is not impossible that a correctly formed packet will\n   \
    \   arrive through a coincidentally-timed cross-connection.  It is\n      more\
    \ likely to be the result of an implementation error.  At the\n      very least,\
    \ this occurance SHOULD be logged.\n    Receive-Configure-Nak/Rej (RCN)\n    \
    \  This event occurs when a valid Configure-Nak or Configure-Reject\n      packet\
    \ is received from the peer.  The Configure-Nak and\n      Configure-Reject packets\
    \ are negative responses to a Configure-\n      Request packet.  An out of sequence\
    \ or otherwise invalid packet is\n      silently discarded.\n    Implementation\
    \ Note:\n      Although the Configure-Nak and Configure-Reject cause the same\n\
    \      state transition in the automaton, these packets have\n      significantly\
    \ different effects on the Configuration Options sent\n      in the resulting\
    \ Configure-Request packet.\n    Receive-Terminate-Request (RTR)\n      The Receive-Terminate-Request\
    \ event occurs when a Terminate-\n      Request packet is received.  The Terminate-Request\
    \ packet\n      indicates the desire of the peer to close the connection.\n  \
    \  Implementation Note:\n      This event is not identical to the Close event\
    \ (see above), and\n      does not override the Open commands of the local network\n\
    \      administrator.  The implementation MUST be prepared to receive a\n    \
    \  new Configure-Request without network administrator intervention.\n    Receive-Terminate-Ack\
    \ (RTA)\n      The Receive-Terminate-Ack event occurs when a Terminate-Ack packet\n\
    \      is received from the peer.  The Terminate-Ack packet is usually a\n   \
    \   response to a Terminate-Request packet.  The Terminate-Ack packet\n      may\
    \ also indicate that the peer is in Closed or Stopped states,\n      and serves\
    \ to re-synchronize the link configuration.\n    Receive-Unknown-Code (RUC)\n\
    \      The Receive-Unknown-Code event occurs when an un-interpretable\n      packet\
    \ is received from the peer.  A Code-Reject packet is sent in\n      response.\n\
    \    Receive-Code-Reject, Receive-Protocol-Reject (RXJ+,RXJ-)\n      This event\
    \ occurs when a Code-Reject or a Protocol-Reject packet\n      is received from\
    \ the peer.\n      The RXJ+ event arises when the rejected value is acceptable,\
    \ such\n      as a Code-Reject of an extended code, or a Protocol-Reject of a\n\
    \      NCP.  These are within the scope of normal operation.  The\n      implementation\
    \ MUST stop sending the offending packet type.\n      The RXJ- event arises when\
    \ the rejected value is catastrophic,\n      such as a Code-Reject of Configure-Request,\
    \ or a Protocol-Reject\n      of LCP!  This event communicates an unrecoverable\
    \ error that\n      terminates the connection.\n    Receive-Echo-Request, Receive-Echo-Reply,\
    \ Receive-Discard-Request\n    (RXR)\n    This event occurs when an Echo-Request,\
    \ Echo-Reply or Discard-\n    Request packet is received from the peer.  The Echo-Reply\
    \ packet is\n    a response to a Echo-Request packet.  There is no reply to an\
    \ Echo-\n    Reply or Discard-Request packet.\n"
- title: 4.6 Actions
  contents:
  - "4.6 Actions\n   Actions in the automaton are caused by events and typically indicate\n\
    \   the transmission of packets and/or the starting or stopping of the\n   Restart\
    \ timer.\n    Illegal-Event (-)\n      This indicates an event that cannot occur\
    \ in a properly\n      implemented automaton.  The implementation has an internal\
    \ error,\n      which should be reported and logged.  No transition is taken,\
    \ and\n      the implementation SHOULD NOT reset or freeze.\n    This-Layer-Up\
    \ (tlu)\n      This action indicates to the upper layers that the automaton is\n\
    \      entering the Opened state.\n      Typically, this action is used by the\
    \ LCP to signal the Up event\n      to a NCP, Authentication Protocol, or Link\
    \ Quality Protocol, or\n      MAY be used by a NCP to indicate that the link is\
    \ available for\n      its network layer traffic.\n    This-Layer-Down (tld)\n\
    \      This action indicates to the upper layers that the automaton is\n     \
    \ leaving the Opened state.\n      Typically, this action is used by the LCP to\
    \ signal the Down event\n      to a NCP, Authentication Protocol, or Link Quality\
    \ Protocol, or\n      MAY be used by a NCP to indicate that the link is no longer\n\
    \      available for its network layer traffic.\n    This-Layer-Started (tls)\n\
    \      This action indicates to the lower layers that the automaton is\n     \
    \ entering the Starting state, and the lower layer is needed for the\n      link.\
    \  The lower layer SHOULD respond with an Up event when the\n      lower layer\
    \ is available.\n    Implementation Note:\n      This results of this action are\
    \ highly implementation dependent.\n      The transitions where this event is\
    \ indicated are defined\n      according to a message passing architecture, rather\
    \ than a\n      signalling architecture.  If the action is desired to control\n\
    \      specific signals (such as DTR), other transitions for the action\n    \
    \  are likely to be required (Open in Closed, RCR in Stopped).\n    This-Layer-Finished\
    \ (tlf)\n      This action indicates to the lower layers that the automaton is\n\
    \      entering the Stopped or Closed states, and the lower layer is no\n    \
    \  longer needed for the link.  The lower layer SHOULD respond with a\n      Down\
    \ event when the lower layer has terminated.\n      Typically, this action MAY\
    \ be used by the LCP to advance to the\n      Link Dead phase, or MAY be used\
    \ by a NCP to indicate to the LCP\n      that the link may terminate when there\
    \ are no other NCPs open.\n    Implementation Note:\n      This results of this\
    \ action are highly implementation dependent.\n      The transitions where this\
    \ event is indicated are defined\n      according to a message passing architecture,\
    \ rather than a\n      signalling architecture.  If the action is desired to control\n\
    \      specific signals (such as DTR), other transitions for the action\n    \
    \  are likely to be required (Close in Starting, Down in Closing).\n    Initialize-Restart-Counter\
    \ (irc)\n      This action sets the Restart counter to the appropriate value\n\
    \      (Max-Terminate or Max-Configure).  The counter is decremented for\n   \
    \   each transmission, including the first.\n    Implementation Note:\n      In\
    \ addition to setting the Restart counter, the implementation\n      MUST set\
    \ the timeout period to the initial value when Restart\n      timer backoff is\
    \ used.\n    Zero-Restart-Counter (zrc)\n      This action sets the Restart counter\
    \ to zero.\n    Implementation Note:\n      This action enables the FSA to pause\
    \ before proceeding to the\n      desired final state, allowing traffic to be\
    \ processed by the peer.\n      In addition to zeroing the Restart counter, the\
    \ implementation\n      MUST set the timeout period to an appropriate value.\n\
    \    Send-Configure-Request (scr)\n      The Send-Configure-Request action transmits\
    \ a Configure-Request\n      packet.  This indicates the desire to open a connection\
    \ with a\n      specified set of Configuration Options.  The Restart timer is\n\
    \      started when the Configure-Request packet is transmitted, to guard\n  \
    \    against packet loss.  The Restart counter is decremented each time\n    \
    \  a Configure-Request is sent.\n    Send-Configure-Ack (sca)\n      The Send-Configure-Ack\
    \ action transmits a Configure-Ack packet.\n      This acknowledges the reception\
    \ of a Configure-Request packet with\n      an acceptable set of Configuration\
    \ Options.\n    Send-Configure-Nak (scn)\n      The Send-Configure-Nak action\
    \ transmits a Configure-Nak or\n      Configure-Reject packet, as appropriate.\
    \  This negative response\n      reports the reception of a Configure-Request\
    \ packet with an\n      unacceptable set of Configuration Options.  Configure-Nak\
    \ packets\n      are used to refuse a Configuration Option value, and to suggest\
    \ a\n      new, acceptable value.  Configure-Reject packets are used to\n    \
    \  refuse all negotiation about a Configuration Option, typically\n      because\
    \ it is not recognized or implemented.  The use of\n      Configure-Nak versus\
    \ Configure-Reject is more fully described in\n      the section on LCP Packet\
    \ Formats.\n    Send-Terminate-Request (str)\n      The Send-Terminate-Request\
    \ action transmits a Terminate-Request\n      packet.  This indicates the desire\
    \ to close a connection.  The\n      Restart timer is started when the Terminate-Request\
    \ packet is\n      transmitted, to guard against packet loss.  The Restart counter\
    \ is\n      decremented each time a Terminate-Request is sent.\n    Send-Terminate-Ack\
    \ (sta)\n      The Send-Terminate-Ack action transmits a Terminate-Ack packet.\n\
    \      This acknowledges the reception of a Terminate-Request packet or\n    \
    \  otherwise serves to synchronize the state machines.\n    Send-Code-Reject (scj)\n\
    \      The Send-Code-Reject action transmits a Code-Reject packet.  This\n   \
    \   indicates the reception of an unknown type of packet.\n    Send-Echo-Reply\
    \ (ser)\n      The Send-Echo-Reply action transmits an Echo-Reply packet.  This\n\
    \      acknowledges the reception of an Echo-Request packet.\n"
- title: 4.7 Loop Avoidance
  contents:
  - "4.7 Loop Avoidance\n   The protocol makes a reasonable attempt at avoiding Configuration\n\
    \   Option negotiation loops.  However, the protocol does NOT guarantee\n   that\
    \ loops will not happen.  As with any negotiation, it is possible\n   to configure\
    \ two PPP implementations with conflicting policies that\n   will never converge.\
    \  It is also possible to configure policies which\n   do converge, but which\
    \ take significant time to do so.  Implementors\n   should keep this in mind and\
    \ SHOULD implement loop detection\n   mechanisms or higher level timeouts.\n"
- title: 4.8 Counters and Timers
  contents:
  - "4.8 Counters and Timers\n    Restart Timer\n      There is one special timer\
    \ used by the automaton.  The Restart\n      timer is used to time transmissions\
    \ of Configure-Request and\n      Terminate- Request packets.  Expiration of the\
    \ Restart timer\n      causes a Timeout event, and retransmission of the corresponding\n\
    \      Configure-Request or Terminate-Request packet.  The Restart timer\n   \
    \   MUST be configurable, but SHOULD default to three (3) seconds.\n    Implementation\
    \ Note:\n      The Restart timer SHOULD be based on the speed of the link.  The\n\
    \      default value is designed for low speed (2,400 to 9,600 bps), high\n  \
    \    switching latency links (typical telephone lines).  Higher speed\n      links,\
    \ or links with low switching latency, SHOULD have\n      correspondingly faster\
    \ retransmission times.\n      Instead of a constant value, the Restart timer\
    \ MAY begin at an\n      initial small value and increase to the configured final\
    \ value.\n      Each successive value less than the final value SHOULD be at least\n\
    \      twice the previous value.  The initial value SHOULD be large\n      enough\
    \ to account for the size of the packets, twice the round\n      trip time for\
    \ transmission at the link speed, and at least an\n      additional 100 milliseconds\
    \ to allow the peer to process the\n      packets before responding.  Some circuits\
    \ add another 200\n      milliseconds of satellite delay.  Round trip times for\
    \ modems\n      operating at 14,400 bps have been measured in the range of 160\
    \ to\n      more than 600 milliseconds.\n    Max-Terminate\n      There is one\
    \ required restart counter for Terminate-Requests.\n      Max- Terminate indicates\
    \ the number of Terminate-Request packets\n      sent without receiving a Terminate-Ack\
    \ before assuming that the\n      peer is unable to respond.  Max-Terminate MUST\
    \ be configurable,\n      but SHOULD default to two (2) transmissions.\n    Max-Configure\n\
    \      A similar counter is recommended for Configure-Requests.  Max-\n      Configure\
    \ indicates the number of Configure-Request packets sent\n      without receiving\
    \ a valid Configure-Ack, Configure-Nak or\n      Configure- Reject before assuming\
    \ that the peer is unable to\n      respond.  Max- Configure MUST be configurable,\
    \ but SHOULD default\n      to ten (10) transmissions.\n    Max-Failure\n    \
    \  A related counter is recommended for Configure-Nak.  Max-Failure\n      indicates\
    \ the number of Configure-Nak packets sent without sending\n      a Configure-Ack\
    \ before assuming that configuration is not\n      converging.  Any further Configure-Nak\
    \ packets are converted to\n      Configure-Reject packets.  Max-Failure MUST\
    \ be configurable, but\n      SHOULD default to ten (10) transmissions.\n"
- title: 5. LCP Packet Formats
  contents:
  - "5. LCP Packet Formats\n   There are three classes of LCP packets:\n      1. Link\
    \ Configuration packets used to establish and configure a\n         link (Configure-Request,\
    \ Configure-Ack, Configure-Nak and\n         Configure-Reject).\n      2. Link\
    \ Termination packets used to terminate a link (Terminate-\n         Request and\
    \ Terminate-Ack).\n      3. Link Maintenance packets used to manage and debug\
    \ a link\n         (Code-Reject, Protocol-Reject, Echo-Request, Echo-Reply, and\n\
    \         Discard-Request).\n   This document describes Version 1 of the Link\
    \ Control Protocol.  In\n   the interest of simplicity, there is no version field\
    \ in the LCP\n   packet.  If a new version of LCP is necessary in the future,\
    \ the\n   intention is that a new PPP Protocol field value will be used to\n \
    \  differentiate Version 1 LCP from all other versions.  A correctly\n   functioning\
    \ Version 1 LCP implementation will always respond to\n   unknown Protocols (including\
    \ other versions) with an easily\n   recognizable Version 1 packet, thus providing\
    \ a deterministic\n   fallback mechanism for implementations of other versions.\n\
    \   Regardless of which Configuration Options are enabled, all LCP Link\n   Configuration,\
    \ Link Termination, and Code-Reject packets (codes 1\n   through 7) are always\
    \ sent as if no Configuration Options were\n   enabled.  This ensures that such\
    \ LCP packets are always recognizable\n   even when one end of the link mistakenly\
    \ believes the link to be\n   open.\n    Implementation Note:\n      In particular,\
    \ the Async-Control-Character-Map (ACCM) default for\n      the type of link is\
    \ used, and no address, control, or protocol\n      field compression is allowed.\n\
    \      Exactly one LCP packet is encapsulated in the PPP Information\n      field,\
    \ where the PPP Protocol field indicates type hex c021 (Link\n      Control Protocol).\n\
    \   A summary of the Link Control Protocol packet format is shown below.\n   The\
    \ fields are transmitted from left to right.\n   0                   1       \
    \            2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |     Code      |  Identifier   |            Length             |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |    Data ...\n  +-+-+-+-+\n   Code\n      The Code field is one octet and\
    \ identifies the kind of LCP packet.\n      When a packet is received with an\
    \ invalid Code field, a Code-\n      Reject packet is transmitted.\n      Up-to-date\
    \ values of the LCP Code field are specified in the most\n      recent \"Assigned\
    \ Numbers\" RFC [2].  This specification concerns\n      the following values:\n\
    \            1       Configure-Request\n            2       Configure-Ack\n  \
    \          3       Configure-Nak\n            4       Configure-Reject\n     \
    \       5       Terminate-Request\n            6       Terminate-Ack\n       \
    \     7       Code-Reject\n            8       Protocol-Reject\n            9\
    \       Echo-Request\n            10      Echo-Reply\n            11      Discard-Request\n\
    \    Identifier\n      The Identifier field is one octet and aids in matching\
    \ requests\n      and replies.  When a packet is received with an invalid Identifier\n\
    \      field, the packet is silently discarded.\n    Length\n      The Length\
    \ field is two octets and indicates the length of the LCP\n      packet including\
    \ the Code, Identifier, Length and Data fields.\n      Octets outside the range\
    \ of the Length field are treated as\n      padding and are ignored on reception.\
    \  When a packet is received\n      with an invalid Length field, the packet is\
    \ silently discarded.\n    Data\n      The Data field is zero or more octets as\
    \ indicated by the Length\n      field.  The format of the Data field is determined\
    \ by the Code\n      field.\n"
- title: 5.1 Configure-Request
  contents:
  - "5.1 Configure-Request\n    Description\n      An implementation wishing to open\
    \ a connection MUST transmit a LCP\n      packet with the Code field set to 1\
    \ (Configure-Request), and the\n      Options field filled with any desired changes\
    \ to the link\n      defaults.  Configuration Options SHOULD NOT be included with\n\
    \      default values.\n      Upon reception of a Configure-Request, an appropriate\
    \ reply MUST\n      be transmitted.\n   A summary of the Configure-Request packet\
    \ format is shown below.  The\n   fields are transmitted from left to right.\n\
    \   0                   1                   2                   3\n   0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |     Code      |  Identifier   |            Length             |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  | Options ...\n  +-+-+-+-+\n   Code\n      1 for Configure-Request.\n   Identifier\n\
    \      The Identifier field MUST be changed whenever the content of the\n    \
    \  Options field changes, and whenever a valid reply has been\n      received\
    \ for a previous request.  For retransmissions, the\n      Identifier MAY remain\
    \ unchanged.\n   Options\n      The options field is variable in length and contains\
    \ the list of\n      zero or more Configuration Options that the sender desires\
    \ to\n      negotiate.  All Configuration Options are always negotiated\n    \
    \  simultaneously.  The format of Configuration Options is further\n      described\
    \ in a later section.\n"
- title: 5.2 Configure-Ack
  contents:
  - "5.2 Configure-Ack\n   Description\n      If every Configuration Option received\
    \ in a Configure-Request is\n      recognizable and all values are acceptable,\
    \ then the\n      implementation MUST transmit a LCP packet with the Code field\
    \ set\n      to 2 (Configure-Ack), the Identifier field copied from the\n    \
    \  received Configure-Request, and the Options field copied from the\n      received\
    \ Configure-Request.  The acknowledged Configuration\n      Options MUST NOT be\
    \ reordered or modified in any way.\n      On reception of a Configure-Ack, the\
    \ Identifier field MUST match\n      that of the last transmitted Configure-Request.\
    \  Additionally, the\n      Configuration Options in a Configure-Ack MUST exactly\
    \ match those\n      of the last transmitted Configure-Request.  Invalid packets\
    \ are\n      silently discarded.\n   A summary of the Configure-Ack packet format\
    \ is shown below.  The\n   fields are transmitted from left to right.\n   0  \
    \                 1                   2                   3\n   0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |     Code      |  Identifier   |            Length             |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  | Options ...\n  +-+-+-+-+\n   Code\n      2 for Configure-Ack.\n   Identifier\n\
    \      The Identifier field is a copy of the Identifier field of the\n      Configure-Request\
    \ which caused this Configure-Ack.\n   Options\n      The Options field is variable\
    \ in length and contains the list of\n      zero or more Configuration Options\
    \ that the sender is\n      acknowledging.  All Configuration Options are always\
    \ acknowledged\n      simultaneously.\n"
- title: 5.3 Configure-Nak
  contents:
  - "5.3 Configure-Nak\n   Description\n      If every element of the received Configuration\
    \ Options is\n      recognizable but some values are not acceptable, then the\n\
    \      implementation MUST transmit a LCP packet with the Code field set\n   \
    \   to 3 (Configure-Nak), the Identifier field copied from the\n      received\
    \ Configure-Request, and the Options field filled with only\n      the unacceptable\
    \ Configuration Options from the Configure-Request.\n      All acceptable Configuration\
    \ Options are filtered out of the\n      Configure-Nak, but otherwise the Configuration\
    \ Options from the\n      Configure-Request MUST NOT be reordered.\n      Options\
    \ which have no value fields (boolean options) MUST use the\n      Configure-Reject\
    \ reply instead.\n      Each Configuration Option which is allowed only a single\
    \ instance\n      MUST be modified to a value acceptable to the Configure-Nak\n\
    \      sender.  The default value MAY be used, when this differs from the\n  \
    \    requested value.\n      When a particular type of Configuration Option can\
    \ be listed more\n      than once with different values, the Configure-Nak MUST\
    \ include a\n      list of all values for that option which are acceptable to\
    \ the\n      Configure-Nak sender.  This includes acceptable values that were\n\
    \      present in the Configure-Request.\n      Finally, an implementation may\
    \ be configured to request the\n      negotiation of a specific Configuration\
    \ Option.  If that option is\n      not listed, then that option MAY be appended\
    \ to the list of Nak'd\n      Configuration Options in order to prompt the peer\
    \ to include that\n      option in its next Configure-Request packet.  Any value\
    \ fields for\n      the option MUST indicate values acceptable to the Configure-Nak\n\
    \      sender.\n      On reception of a Configure-Nak, the Identifier field MUST\
    \ match\n      that of the last transmitted Configure-Request.  Invalid packets\n\
    \      are silently discarded.\n      Reception of a valid Configure-Nak indicates\
    \ that a new\n      Configure-Request MAY be sent with the Configuration Options\n\
    \      modified as specified in the Configure-Nak.  When multiple\n      instances\
    \ of a Configuration Option are present, the peer SHOULD\n      select a single\
    \ value to include in its next Configure-Request\n      packet.\n      Some Configuration\
    \ Options have a variable length.  Since the\n      Nak'd Option has been modified\
    \ by the peer, the implementation\n      MUST be able to handle an Option length\
    \ which is different from\n      the original Configure-Request.\n   A summary\
    \ of the Configure-Nak packet format is shown below.  The\n   fields are transmitted\
    \ from left to right.\n   0                   1                   2          \
    \         3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |\
    \     Code      |  Identifier   |            Length             |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  | Options ...\n  +-+-+-+-+\n    Code\n      3 for Configure-Nak.\n    Identifier\n\
    \      The Identifier field is a copy of the Identifier field of the\n      Configure-Request\
    \ which caused this Configure-Nak.\n    Options\n      The Options field is variable\
    \ in length and contains the list of\n      zero or more Configuration Options\
    \ that the sender is Nak'ing.\n      All Configuration Options are always Nak'd\
    \ simultaneously.\n"
- title: 5.4 Configure-Reject
  contents:
  - "5.4 Configure-Reject\n   Description\n      If some Configuration Options received\
    \ in a Configure-Request are\n      not recognizable or are not acceptable for\
    \ negotiation (as\n      configured by a network administrator), then the implementation\n\
    \      MUST transmit a LCP packet with the Code field set to 4\n      (Configure-Reject),\
    \ the Identifier field copied from the received\n      Configure-Request, and\
    \ the Options field filled with only the\n      unacceptable Configuration Options\
    \ from the Configure-Request.\n      All recognizable and negotiable Configuration\
    \ Options are filtered\n      out of the Configure-Reject, but otherwise the Configuration\n\
    \      Options MUST NOT be reordered or modified in any way.\n      On reception\
    \ of a Configure-Reject, the Identifier field MUST\n      match that of the last\
    \ transmitted Configure-Request.\n      Additionally, the Configuration Options\
    \ in a Configure-Reject MUST\n      be a proper subset of those in the last transmitted\
    \ Configure-\n      Request.  Invalid packets are silently discarded.\n      Reception\
    \ of a valid Configure-Reject indicates that a new\n      Configure-Request SHOULD\
    \ be sent which does not include any of the\n      Configuration Options listed\
    \ in the Configure-Reject.\n   A summary of the Configure-Reject packet format\
    \ is shown below.  The\n   fields are transmitted from left to right.\n   0  \
    \                 1                   2                   3\n   0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |     Code      |  Identifier   |            Length             |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  | Options ...\n  +-+-+-+-+\n    Code\n      4 for Configure-Reject.\n    Identifier\n\
    \      The Identifier field is a copy of the Identifier field of the\n      Configure-Request\
    \ which caused this Configure-Reject.\n    Options\n      The Options field is\
    \ variable in length and contains the list of\n      zero or more Configuration\
    \ Options that the sender is rejecting.\n      All Configuration Options are always\
    \ rejected simultaneously.\n"
- title: 5.5 Terminate-Request and Terminate-Ack
  contents:
  - "5.5 Terminate-Request and Terminate-Ack\n   Description\n      LCP includes Terminate-Request\
    \ and Terminate-Ack Codes in order to\n      provide a mechanism for closing a\
    \ connection.\n      A LCP implementation wishing to close a connection SHOULD\
    \ transmit\n      a LCP packet with the Code field set to 5 (Terminate-Request),\
    \ and\n      the Data field filled with any desired data.  Terminate-Request\n\
    \      packets SHOULD continue to be sent until Terminate-Ack is\n      received,\
    \ the lower layer indicates that it has gone down, or a\n      sufficiently large\
    \ number have been transmitted such that the peer\n      is down with reasonable\
    \ certainty.\n      Upon reception of a Terminate-Request, a LCP packet MUST be\n\
    \      transmitted with the Code field set to 6 (Terminate-Ack), the\n      Identifier\
    \ field copied from the Terminate-Request packet, and the\n      Data field filled\
    \ with any desired data.\n      Reception of an unelicited Terminate-Ack indicates\
    \ that the peer\n      is in the Closed or Stopped states, or is otherwise in\
    \ need of\n      re-negotiation.\n   A summary of the Terminate-Request and Terminate-Ack\
    \ packet formats\n   is shown below.  The fields are transmitted from left to\
    \ right.\n   0                   1                   2                   3\n \
    \  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |     Code      |  Identifier   |            Length             |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |    Data ...\n  +-+-+-+-+\n    Code\n      5 for Terminate-Request;\n    \
    \  6 for Terminate-Ack.\n    Identifier\n      On transmission, the Identifier\
    \ field MUST be changed whenever the\n      content of the Data field changes,\
    \ and whenever a valid reply has\n      been received for a previous request.\
    \  For retransmissions, the\n      Identifier MAY remain unchanged.  On reception,\
    \ the Identifier\n      field of the Terminate-Request is copied into the Identifier\
    \ field\n      of the Terminate-Ack packet.\n    Data\n      The Data field is\
    \ zero or more octets and contains uninterpreted\n      data for use by the sender.\
    \  The data may consist of any binary\n      value and may be of any length from\
    \ zero to the peer's established\n      MRU minus four.\n"
- title: 5.6 Code-Reject
  contents:
  - "5.6 Code-Reject\n   Description\n      Reception of a LCP packet with an unknown\
    \ Code indicates that one\n      of the communicating LCP implementations is faulty\
    \ or incomplete.\n      This error MUST be reported back to the sender of the\
    \ unknown Code\n      by transmitting a LCP packet with the Code field set to\
    \ 7 (Code-\n      Reject), and the inducing packet copied to the Rejected-\n \
    \     Information field.\n      Upon reception of a Code-Reject, the implementation\
    \ SHOULD report\n      the error, since it is unlikely that the situation can\
    \ be\n      rectified automatically.\n   A summary of the Code-Reject packet format\
    \ is shown below.  The\n   fields are transmitted from left to right.\n   0  \
    \                 1                   2                   3\n   0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |     Code      |  Identifier   |            Length             |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  | Rejected-Packet ...\n  +-+-+-+-+-+-+-+-+\n    Code\n      7 for Code-Reject.\n\
    \    Identifier\n      The Identifier field MUST be changed for each Code-Reject\
    \ sent.\n    Rejected-Information\n      The Rejected-Information field contains\
    \ a copy of the LCP packet\n      which is being rejected.  It begins with the\
    \ Information field,\n      and does not include any Data Link Layer headers nor\
    \ an FCS.  The\n      Rejected-Information MUST be truncated to comply with the\
    \ peer's\n      established MRU.\n"
- title: 5.7 Protocol-Reject
  contents:
  - "5.7 Protocol-Reject\n    Description\n      Reception of a PPP packet with an\
    \ unknown Protocol field indicates\n      that the peer is attempting to use a\
    \ protocol which is\n      unsupported.  This usually occurs when the peer attempts\
    \ to\n      configure a new protocol.  If the LCP state machine is in the\n  \
    \    Opened state, then this error MUST be reported back to the peer by\n    \
    \  transmitting a LCP packet with the Code field set to 8 (Protocol-\n      Reject),\
    \ the Rejected-Protocol field set to the received Protocol,\n      and the inducing\
    \ packet copied to the Rejected-Information field.\n      Upon reception of a\
    \ Protocol-Reject, the implementation MUST stop\n      sending packets of the\
    \ indicated protocol at the earliest\n      opportunity.\n      Protocol-Reject\
    \ packets can only be sent in the LCP Opened state.\n      Protocol-Reject packets\
    \ received in any state other than the LCP\n      Opened state SHOULD be silently\
    \ discarded.\n   A summary of the Protocol-Reject packet format is shown below.\
    \  The\n   fields are transmitted from left to right.\n   0                  \
    \ 1                   2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |     Code      |  Identifier   |            Length             |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |       Rejected-Protocol       |      Rejected-Information ...\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Code\n      8 for Protocol-Reject.\n    Identifier\n      The Identifier\
    \ field MUST be changed for each Protocol-Reject\n      sent.\n    Rejected-Protocol\n\
    \      The Rejected-Protocol field is two octets and contains the PPP\n      Protocol\
    \ field of the packet which is being rejected.\n    Rejected-Information\n   \
    \   The Rejected-Information field contains a copy of the packet which\n     \
    \ is being rejected.  It begins with the Information field, and does\n      not\
    \ include any Data Link Layer headers nor an FCS.  The\n      Rejected-Information\
    \ MUST be truncated to comply with the peer's\n      established MRU.\n"
- title: 5.8 Echo-Request and Echo-Reply
  contents:
  - "5.8 Echo-Request and Echo-Reply\n   Description\n      LCP includes Echo-Request\
    \ and Echo-Reply Codes in order to provide\n      a Data Link Layer loopback mechanism\
    \ for use in exercising both\n      directions of the link.  This is useful as\
    \ an aid in debugging,\n      link quality determination, performance testing,\
    \ and for numerous\n      other functions.\n      An Echo-Request sender transmits\
    \ a LCP packet with the Code field\n      set to 9 (Echo-Request), the Identifier\
    \ field set, the local\n      Magic-Number (if any) inserted, and the Data field\
    \ filled with any\n      desired data, but not exceeding the peer's established\
    \ MRU minus\n      eight.\n      Upon reception of an Echo-Request, a LCP packet\
    \ MUST be\n      transmitted with the Code field set to 10 (Echo-Reply), the\n\
    \      Identifier field copied from the received Echo-Request, the local\n   \
    \   Magic-Number (if any) inserted, and the Data field copied from the\n     \
    \ Echo-Request, truncating as necessary to avoid exceeding the\n      peer's established\
    \ MRU.\n      Echo-Request and Echo-Reply packets may only be sent in the LCP\n\
    \      Opened state.  Echo-Request and Echo-Reply packets received in any\n  \
    \    state other than the LCP Opened state SHOULD be silently\n      discarded.\n\
    \   A summary of the Echo-Request and Echo-Reply packet formats is shown\n   below.\
    \  The fields are transmitted from left to right.\n    0                   1 \
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Magic-Number                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n    Code\n      9 for Echo-Request;\n      10\
    \ for Echo-Reply.\n    Identifier\n      On transmission, the Identifier field\
    \ MUST be changed whenever the\n      content of the Data field changes, and whenever\
    \ a valid reply has\n      been received for a previous request.  For retransmissions,\
    \ the\n      Identifier MAY remain unchanged.\n      On reception, the Identifier\
    \ field of the Echo-Request is copied\n      into the Identifier field of the\
    \ Echo-Reply packet.\n    Magic-Number\n      The Magic-Number field is four octets\
    \ and aids in detecting links\n      which are in the looped-back condition. \
    \ Until the Magic-Number\n      Configuration Option has been successfully negotiated,\
    \ the Magic-\n      Number MUST be transmitted as zero.  See the Magic-Number\n\
    \      Configuration Option for further explanation.\n    Data\n      The Data\
    \ field is zero or more octets and contains uninterpreted\n      data for use\
    \ by the sender.  The data may consist of any binary\n      value and may be of\
    \ any length from zero to the peer's established\n      MRU minus eight.\n"
- title: 5.9 Discard-Request
  contents:
  - "5.9 Discard-Request\n   Description\n      LCP includes a Discard-Request Code\
    \ in order to provide a Data\n      Link Layer sink mechanism for use in exercising\
    \ the local to\n      remote direction of the link.  This is useful as an aid\
    \ in\n      debugging, performance testing, and for numerous other functions.\n\
    \      The sender transmits a LCP packet with the Code field set to 11\n     \
    \ (Discard-Request), the Identifier field set, the local Magic-\n      Number\
    \ (if any) inserted, and the Data field filled with any\n      desired data, but\
    \ not exceeding the peer's established MRU minus\n      eight.\n      Discard-Request\
    \ packets may only be sent in the LCP Opened state.\n      On reception, the receiver\
    \ MUST simply throw away any Discard-\n      Request that it receives.\n   A summary\
    \ of the Discard-Request packet format is shown below.  The\n   fields are transmitted\
    \ from left to right.\n   0                   1                   2          \
    \         3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |\
    \     Code      |  Identifier   |            Length             |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |                         Magic-Number                          |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |    Data ...\n  +-+-+-+-+\n    Code\n      11 for Discard-Request.\n    Identifier\n\
    \      The Identifier field MUST be changed for each Discard-Request\n      sent.\n\
    \    Magic-Number\n      The Magic-Number field is four octets and aids in detecting\
    \ links\n      which are in the looped-back condition.  Until the Magic-Number\n\
    \      Configuration Option has been successfully negotiated, the Magic-\n   \
    \   Number MUST be transmitted as zero.  See the Magic-Number\n      Configuration\
    \ Option for further explanation.\n    Data\n      The Data field is zero or more\
    \ octets and contains uninterpreted\n      data for use by the sender.  The data\
    \ may consist of any binary\n      value and may be of any length from zero to\
    \ the peer's established\n      MRU minus four.\n"
- title: 6.  LCP Configuration Options
  contents:
  - "6.  LCP Configuration Options\n   LCP Configuration Options allow negotiation\
    \ of modifications to the\n   default characteristics of a point-to-point link.\
    \  If a Configuration\n   Option is not included in a Configure-Request packet,\
    \ the default\n   value for that Configuration Option is assumed.\n   Some Configuration\
    \ Options MAY be listed more than once.  The effect\n   of this is Configuration\
    \ Option specific, and is specified by each\n   such Configuration Option description.\
    \  (None of the Configuration\n   Options in this specification can be listed\
    \ more than once.)\n   The end of the list of Configuration Options is indicated\
    \ by the\n   length of the LCP packet.\n   Unless otherwise specified, all Configuration\
    \ Options apply in a\n   half-duplex fashion; typically, in the receive direction\
    \ of the link\n   from the point of view of the Configure-Request sender.\n  \
    \ A summary of the Configuration Option format is shown below.  The\n   fields\
    \ are transmitted from left to right.\n           0                   1\n    \
    \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          |     Type      |    Length     |    Data ...\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Type\n      The Type field is one octet and indicates the type of\n     \
    \ Configuration Option.  Up-to-date values of the LCP Option Type\n      field\
    \ are specified in the most recent \"Assigned Numbers\" RFC [2].\n      This specification\
    \ concerns the following values:\n               1       Maximum-Receive-Unit\n\
    \               2       Async-Control-Character-Map\n               3       Authentication-Protocol\n\
    \               4       Quality-Protocol\n               5       Magic-Number\n\
    \               6       RESERVED\n               7       Protocol-Field-Compression\n\
    \               8       Address-and-Control-Field-Compression\n    Length\n  \
    \    The Length field is one octet and indicates the length of this\n      Configuration\
    \ Option including the Type, Length and Data fields.\n      If a negotiable Configuration\
    \ Option is received in a Configure-\n      Request but with an invalid Length,\
    \ a Configure-Nak SHOULD be\n      transmitted which includes the desired Configuration\
    \ Option with\n      an appropriate Length and Data.\n    Data\n      The Data\
    \ field is zero or more octets and information specific to\n      the Configuration\
    \ Option.  The format and length of the Data field\n      is determined by the\
    \ Type and Length fields.\n"
- title: 6.1 Maximum-Receive-Unit
  contents:
  - "6.1 Maximum-Receive-Unit\n   Description\n      This Configuration Option may\
    \ be sent to inform the peer that the\n      implementation can receive larger\
    \ packets, or to request that the\n      peer send smaller packets.\n      The\
    \ default value is 1500 octets.  If smaller packets are\n      requested, an implementation\
    \ MUST still be able to receive the\n      full 1500 octet information field in\
    \ case link synchronization is\n      lost.\n    Implementation Note:\n      This\
    \ option is used to indicate an implementation capability.  The\n      peer is\
    \ not required to maximize the use of the capacity.  For\n      example, when\
    \ a MRU is indicated which is 2048 octets, the peer is\n      not required to\
    \ send any packet with 2048 octets.  The peer need\n      not Configure-Nak to\
    \ indicate that it will only send smaller\n      packets, since the implementation\
    \ will always require support for\n      at least 1500 octets.\n   A summary of\
    \ the Maximum-Receive-Unit Configuration Option format is\n   shown below.  The\
    \ fields are transmitted from left to right.\n    0                   1      \
    \             2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |      Maximum-Receive-Unit     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Type\n      1\n    Length\n      4\n    Maximum-Receive-Unit\n      The Maximum-Receive-Unit\
    \ field is two octets, and specifies the\n      maximum number of octets in the\
    \ Information and Padding fields.\n      It does not include the framing, Protocol\
    \ field, FCS, nor any\n      transparency bits or bytes.\n"
- title: 6.2 Async-Control-Character-Map
  contents:
  - "6.2 Async-Control-Character-Map\n   Description\n      This Configuration Option\
    \ provides a method to negotiate the use\n      of control character transparency\
    \ on asynchronous links.\n      For asynchronous links, the default value is 0xffffffff,\
    \ which\n      causes all octets less than 0x20 to be mapped into an appropriate\n\
    \      two octet sequence.  For most other links, the default value is 0,\n  \
    \    since there is no need for mapping.\n      However, it is rarely necessary\
    \ to map all control characters, and\n      often it is unnecessary to map any\
    \ control characters.  The\n      Configuration Option is used to inform the peer\
    \ which control\n      characters MUST remain mapped when the peer sends them.\n\
    \      The peer MAY still send any other octets in mapped format, if it\n    \
    \  is necessary because of constraints known to the peer.  The peer\n      SHOULD\
    \ Configure-Nak with the logical union of the sets of mapped\n      octets, so\
    \ that when such octets are spuriously introduced they\n      can be ignored on\
    \ receipt.\n   A summary of the Async-Control-Character-Map Configuration Option\n\
    \   format is shown below.  The fields are transmitted from left to\n   right.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |  Async-Control-Character-Map\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         ACCM (cont)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Type\n      2\n    Length\n      6\n    Async-Control-Character-Map\n   \
    \   The Async-Control-Character-Map field is four octets and indicates\n     \
    \ the set of control characters to be mapped.  The map is sent most\n      significant\
    \ octet first.\n      Each numbered bit corresponds to the octet of the same value.\
    \  If\n      the bit is cleared to zero, then that octet need not be mapped.\n\
    \      If the bit is set to one, then that octet MUST remain mapped.  For\n  \
    \    example, if bit 19 is set to zero, then the ASCII control\n      character\
    \ 19 (DC3, Control-S) MAY be sent in the clear.\n         Note: The least significant\
    \ bit of the least significant octet\n         (the final octet transmitted) is\
    \ numbered bit 0, and would map\n         to the ASCII control character NUL.\n"
- title: 6.3 Authentication-Protocol
  contents:
  - "6.3 Authentication-Protocol\n   Description\n      On some links it may be desirable\
    \ to require a peer to\n      authenticate itself before allowing network-layer\
    \ protocol packets\n      to be exchanged.\n      This Configuration Option provides\
    \ a method to negotiate the use\n      of a specific authentication protocol.\
    \  By default, authentication\n      is not required.\n      An implementation\
    \ MUST NOT include multiple Authentication-\n      Protocol Configuration Options\
    \ in its Configure-Request packets.\n      Instead, it SHOULD attempt to configure\
    \ the most desirable\n      protocol first.  If that protocol is Configure-Nak'd,\
    \ then the\n      implementation SHOULD attempt the next most desirable protocol\
    \ in\n      the next Configure-Request.\n      If an implementation sends a Configure-Ack\
    \ with this Configuration\n      Option, then it is agreeing to authenticate with\
    \ the specified\n      protocol.  An implementation receiving a Configure-Ack\
    \ with this\n      Configuration Option SHOULD expect the peer to authenticate\
    \ with\n      the acknowledged protocol.\n      There is no requirement that authentication\
    \ be full duplex or that\n      the same protocol be used in both directions.\
    \  It is perfectly\n      acceptable for different protocols to be used in each\
    \ direction.\n      This will, of course, depend on the specific protocols negotiated.\n\
    \   A summary of the Authentication-Protocol Configuration Option format\n   is\
    \ shown below.  The fields are transmitted from left to right.\n    0        \
    \           1                   2                   3\n    0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |     Authentication-Protocol   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n    Type\n      3\n    Length\n      >= 4\n \
    \   Authentication-Protocol\n      The Authentication-Protocol field is two octets\
    \ and indicates the\n      authentication protocol desired.  Values for this field\
    \ are always\n      the same as the PPP Protocol field values for that same\n\
    \      authentication protocol.\n      Up-to-date values of the Authentication-Protocol\
    \ field are\n      specified in the most recent \"Assigned Numbers\" RFC [2].\
    \  Current\n      values are assigned as follows:\n        Value (in hex)    Protocol\n\
    \        c023              Password Authentication Protocol\n        c223    \
    \          Challenge Handshake Authentication Protocol\n    Data\n      The Data\
    \ field is zero or more octets and contains additional data\n      as determined\
    \ by the particular protocol.\n"
- title: 6.4 Quality-Protocol
  contents:
  - "6.4 Quality-Protocol\n    Description\n      On some links it may be desirable\
    \ to determine when, and how\n      often, the link is dropping data.  This process\
    \ is called link\n      quality monitoring.\n      This Configuration Option provides\
    \ a method to negotiate the use\n      of a specific protocol for link quality\
    \ monitoring.  By default,\n      link quality monitoring is disabled.\n     \
    \ There is no requirement that quality monitoring be full duplex or\n      that\
    \ the same protocol be used in both directions.  It is\n      perfectly acceptable\
    \ for different protocols to be used in each\n      direction.  This will, of\
    \ course, depend on the specific protocols\n      negotiated.\n   A summary of\
    \ the Quality-Protocol Configuration Option format is\n   shown below.  The fields\
    \ are transmitted from left to right.\n   0                   1              \
    \     2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |     Type      |    Length     |        Quality-Protocol       |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |    Data ...\n  +-+-+-+-+\n    Type\n      4\n    Length\n      >= 4\n   \
    \ Quality-Protocol\n      The Quality-Protocol field is two octets and indicates\
    \ the link\n      quality monitoring protocol desired.  Values for this field\
    \ are\n      always the same as the PPP Protocol field values for that same\n\
    \      monitoring protocol.\n      Up-to-date values of the Quality-Protocol field\
    \ are specified in\n      the most recent \"Assigned Numbers\" RFC [2].  Current\
    \ values are\n      assigned as follows:\n               Value (in hex)      \
    \    Protocol\n               c025                    Link Quality Report\n  \
    \  Data\n      The Data field is zero or more octets and contains additional data\n\
    \      as determined by the particular protocol.\n"
- title: 6.5 Magic-Number
  contents:
  - "6.5 Magic-Number\n   Description\n      This Configuration Option provides a\
    \ method to detect looped-back\n      links and other Data Link Layer anomalies.\
    \  This Configuration\n      Option MAY be required by some other Configuration\
    \ Options such as\n      the Quality-Protocol Configuration Option.  By default,\
    \ the\n      Magic-Number is not negotiated, and zero is inserted where a\n  \
    \    Magic-Number might otherwise be used.\n      Before this Configuration Option\
    \ is requested, an implementation\n      MUST choose its Magic-Number.  It is\
    \ recommended that the Magic-\n      Number be chosen in the most random manner\
    \ possible in order to\n      guarantee with very high probability that an implementation\
    \ will\n      arrive at a unique number.  A good way to choose a unique random\n\
    \      number is to start with an unique seed.  Suggested sources of\n      uniqueness\
    \ include machine serial numbers, other network hardware\n      addresses, time-of-day\
    \ clocks, etc.  Particularly good random\n      number seeds are precise measurements\
    \ of the inter-arrival time of\n      physical events such as packet reception\
    \ on other connected\n      networks, server response time, or the typing rate\
    \ of a human\n      user.  It is also suggested that as many sources as possible\
    \ be\n      used simultaneously.\n      When a Configure-Request is received with\
    \ a Magic-Number\n      Configuration Option, the received Magic-Number is compared\
    \ with\n      the Magic-Number of the last Configure-Request sent to the peer.\n\
    \      If the two Magic-Numbers are different, then the link is not\n      looped-back,\
    \ and the Magic-Number SHOULD be acknowledged.  If the\n      two Magic-Numbers\
    \ are equal, then it is possible, but not certain,\n      that the link is looped-back\
    \ and that this Configure-Request is\n      actually the one last sent.  To determine\
    \ this, a Configure-Nak\n      MUST be sent specifying a different Magic-Number\
    \ value.  A new\n      Configure-Request SHOULD NOT be sent to the peer until\
    \ normal\n      processing would cause it to be sent (that is, until a Configure-\n\
    \      Nak is received or the Restart timer runs out).\n      Reception of a Configure-Nak\
    \ with a Magic-Number different from\n      that of the last Configure-Nak sent\
    \ to the peer proves that a link\n      is not looped-back, and indicates a unique\
    \ Magic-Number.  If the\n      Magic-Number is equal to the one sent in the last\
    \ Configure-Nak,\n      the possibility of a looped-back link is increased, and\
    \ a new\n      Magic-Number MUST be chosen.  In either case, a new Configure-\n\
    \      Request SHOULD be sent with the new Magic-Number.\n      If the link is\
    \ indeed looped-back, this sequence (transmit\n      Configure-Request, receive\
    \ Configure-Request, transmit Configure-\n      Nak, receive Configure-Nak) will\
    \ repeat over and over again.  If\n      the link is not looped-back, this sequence\
    \ might occur a few\n      times, but it is extremely unlikely to occur repeatedly.\
    \  More\n      likely, the Magic-Numbers chosen at either end will quickly\n \
    \     diverge, terminating the sequence.  The following table shows the\n    \
    \  probability of collisions assuming that both ends of the link\n      select\
    \ Magic-Numbers with a perfectly uniform distribution:\n               Number\
    \ of Collisions        Probability\n               --------------------   ---------------------\n\
    \                       1              1/2**32    = 2.3 E-10\n               \
    \        2              1/2**32**2 = 5.4 E-20\n                       3      \
    \        1/2**32**3 = 1.3 E-29\n      Good sources of uniqueness or randomness\
    \ are required for this\n      divergence to occur.  If a good source of uniqueness\
    \ cannot be\n      found, it is recommended that this Configuration Option not\
    \ be\n      enabled; Configure-Requests with the option SHOULD NOT be\n      transmitted\
    \ and any Magic-Number Configuration Options which the\n      peer sends SHOULD\
    \ be either acknowledged or rejected.  In this\n      case, loop-backs cannot\
    \ be reliably detected by the\n      implementation, although they may still be\
    \ detectable by the peer.\n      If an implementation does transmit a Configure-Request\
    \ with a\n      Magic-Number Configuration Option, then it MUST NOT respond with\
    \ a\n      Configure-Reject if it receives a Configure-Request with a Magic-\n\
    \      Number Configuration Option.  That is, if an implementation\n      desires\
    \ to use Magic Numbers, then it MUST also allow its peer to\n      do so.  If\
    \ an implementation does receive a Configure-Reject in\n      response to a Configure-Request,\
    \ it can only mean that the link is\n      not looped-back, and that its peer\
    \ will not be using Magic-\n      Numbers.  In this case, an implementation SHOULD\
    \ act as if the\n      negotiation had been successful (as if it had instead received\
    \ a\n      Configure-Ack).\n      The Magic-Number also may be used to detect\
    \ looped-back links\n      during normal operation as well as during Configuration\
    \ Option\n      negotiation.  All LCP Echo-Request, Echo-Reply, and Discard-\n\
    \      Request packets have a Magic-Number field.  If Magic-Number has\n     \
    \ been successfully negotiated, an implementation MUST transmit\n      these packets\
    \ with the Magic-Number field set to its negotiated\n      Magic-Number.\n   \
    \   The Magic-Number field of these packets SHOULD be inspected on\n      reception.\
    \  All received Magic-Number fields MUST be equal to\n      either zero or the\
    \ peer's unique Magic-Number, depending on\n      whether or not the peer negotiated\
    \ a Magic-Number.  Reception of a\n      Magic-Number field equal to the negotiated\
    \ local Magic-Number\n      indicates a looped-back link.  Reception of a Magic-\
    \ Number other\n      than the negotiated local Magic-Number or the peer's negotiated\n\
    \      Magic-Number, or zero if the peer didn't negotiate one, indicates\n   \
    \   a link which has been (mis)configured for communications with a\n      different\
    \ peer.\n      Procedures for recovery from either case are unspecified and may\n\
    \      vary from implementation to implementation.  A somewhat\n      pessimistic\
    \ procedure is to assume a LCP Down event.  A further\n      Open event will begin\
    \ the process of re-establishing the link,\n      which can't complete until the\
    \ loop-back condition is terminated\n      and Magic-Numbers are successfully\
    \ negotiated.  A more optimistic\n      procedure (in the case of a loop-back)\
    \ is to begin transmitting\n      LCP Echo-Request packets until an appropriate\
    \ Echo-Reply is\n      received, indicating a termination of the loop-back condition.\n\
    \   A summary of the Magic-Number Configuration Option format is shown\n   below.\
    \  The fields are transmitted from left to right.\n    0                   1 \
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |          Magic-Number\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Magic-Number (cont)       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Type\n      5\n    Length\n      6\n    Magic-Number\n      The Magic-Number\
    \ field is four octets and indicates a number which\n      is very likely to be\
    \ unique to one end of the link.  A Magic-\n      Number of zero is illegal and\
    \ MUST always be Nak'd, if it is not\n      Rejected outright.\n"
- title: 6.6 Protocol-Field-Compression
  contents:
  - "6.6 Protocol-Field-Compression\n   Description\n      This Configuration Option\
    \ provides a method to negotiate the\n      compression of the PPP Protocol field.\
    \  By default, all\n      implementations MUST transmit packets with two octet\
    \ PPP Protocol\n      fields.\n      PPP Protocol field numbers are chosen such\
    \ that some values may be\n      compressed into a single octet form which is\
    \ clearly\n      distinguishable from the two octet form.  This Configuration\n\
    \      Option is sent to inform the peer that the implementation can\n      receive\
    \ such single octet Protocol fields.\n      As previously mentioned, the Protocol\
    \ field uses an extension\n      mechanism consistent with the ISO 3309 extension\
    \ mechanism for the\n      Address field; the Least Significant Bit (LSB) of each\
    \ octet is\n      used to indicate extension of the Protocol field.  A binary\
    \ \"0\" as\n      the LSB indicates that the Protocol field continues with the\n\
    \      following octet.  The presence of a binary \"1\" as the LSB marks\n   \
    \   the last octet of the Protocol field.  Notice that any number of\n      \"\
    0\" octets may be prepended to the field, and will still indicate\n      the same\
    \ value (consider the two binary representations for 3,\n      00000011 and 00000000\
    \ 00000011).\n      When using low speed links, it is desirable to conserve bandwidth\n\
    \      by sending as little redundant data as possible.  The Protocol-\n     \
    \ Field-Compression Configuration Option allows a trade-off between\n      implementation\
    \ simplicity and bandwidth efficiency.  If\n      successfully negotiated, the\
    \ ISO 3309 extension mechanism may be\n      used to compress the Protocol field\
    \ to one octet instead of two.\n      The large majority of packets are compressible\
    \ since data\n      protocols are typically assigned with Protocol field values\
    \ less\n      than 256.\n      Compressed Protocol fields MUST NOT be transmitted\
    \ unless this\n      Configuration Option has been negotiated.  When negotiated,\
    \ PPP\n      implementations MUST accept PPP packets with either double-octet\n\
    \      or single-octet Protocol fields, and MUST NOT distinguish between\n   \
    \   them.\n      The Protocol field is never compressed when sending any LCP\n\
    \      packet.  This rule guarantees unambiguous recognition of LCP\n      packets.\n\
    \      When a Protocol field is compressed, the Data Link Layer FCS field\n  \
    \    is calculated on the compressed frame, not the original\n      uncompressed\
    \ frame.\n   A summary of the Protocol-Field-Compression Configuration Option\n\
    \   format is shown below.  The fields are transmitted from left to\n   right.\n\
    \                0                   1\n                0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5\n               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n              \
    \ |     Type      |    Length     |\n               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Type\n      7\n    Length\n      2\n"
- title: 6.7 Address-and-Control-Field-Compression
  contents:
  - "6.7 Address-and-Control-Field-Compression\n   Description\n      This Configuration\
    \ Option provides a method to negotiate the\n      compression of the Data Link\
    \ Layer Address and Control fields.  By\n      default, all implementations MUST\
    \ transmit frames with Address and\n      Control fields appropriate to the link\
    \ framing.\n      Since these fields usually have constant values for point-to-point\n\
    \      links, they are easily compressed.  This Configuration Option is\n    \
    \  sent to inform the peer that the implementation can receive\n      compressed\
    \ Address and Control fields.\n      If a compressed frame is received when Address-and-Control-Field-\n\
    \      Compression has not been negotiated, the implementation MAY\n      silently\
    \ discard the frame.\n      The Address and Control fields MUST NOT be compressed\
    \ when sending\n      any LCP packet.  This rule guarantees unambiguous recognition\
    \ of\n      LCP packets.\n      When the Address and Control fields are compressed,\
    \ the Data Link\n      Layer FCS field is calculated on the compressed frame,\
    \ not the\n      original uncompressed frame.\n   A summary of the Address-and-Control-Field-Compression\
    \ configuration\n   option format is shown below.  The fields are transmitted\
    \ from left\n   to right.\n                0                   1\n           \
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               |     Type      |    Length     |\n               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Type\n      8\n    Length\n      2\n"
- title: A. LCP Recommended Options
  contents:
  - "A. LCP Recommended Options\n   The following Configurations Options are recommended:\n\
    \      SYNC LINES\n      Magic Number Link Quality Monitoring No Address and Control\
    \ Field\n      Compression No Protocol Field Compression\n      ASYNC LINES\n\
    \      Async Control Character Map Magic Number Address and Control Field\n  \
    \    Compression Protocol Field Compression\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are briefly discussed in sections\
    \ concerning the\n   Authentication Phase, the Close event, and the Authentication-\n\
    \   Protocol Configuration Option.  Further discussion is in a companion\n   document\
    \ entitled PPP Authentication Protocols.\n"
- title: References
  contents:
  - "References\n    [1] Perkins, D., \"Requirements for an Internet Standard\n  \
    \      Point-to-Point Protocol\", RFC 1547, December 1993.\n    [2] Reynolds,\
    \ J., and J. Postel, \"Assigned Numbers\", STD 2, RFC 1340,\n        USC/Information\
    \ Sciences Institute, July 1992.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Much of the text in this document is taken from the WG Requirements,\n\
    \   and RFCs 1171 & 1172, by Drew Perkins of Carnegie Mellon University,\n   and\
    \ by Russ Hobby of the University of California at Davis.\n   Many people spent\
    \ significant time helping to develop the Point-to-\n   Point Protocol.  The complete\
    \ list of people is too numerous to list,\n   but the following people deserve\
    \ special thanks: Rick Adams (UUNET),\n   Ken Adelman (TGV), Fred Baker (ACC),\
    \ Mike Ballard (Telebit), Craig\n   Fox (Network Systems), Karl Fox (Morning Star\
    \ Technologies), Phill\n   Gross (AN&S), former WG chair Russ Hobby (UC Davis),\
    \ David Kaufman\n   (Proteon), former WG chair Steve Knowles (FTP Software), former\
    \ WG\n   chair Brian Lloyd (L&A), John LoVerso (Xylogics), Bill Melohn (Sun\n\
    \   Microsystems), Mike Patton (MIT), former WG chair Drew Perkins\n   (Fore),\
    \ Greg Satz (cisco systems), John Shriver (Proteon), Vernon\n   Schryver (Silicon\
    \ Graphics), and Asher Waldfogel (Wellfleet).\n   The \"Day in the Life\" example\
    \ was instigated by Kory Hamzeh (Avatar).\n   In this version, improvements in\
    \ wording were also provided by Scott\n   Ginsburg, Mark Moraes, and Timon Sloan,\
    \ as they worked on\n   implementations.\n   Special thanks to Morning Star Technologies\
    \ for providing computing\n   resources and network access support for writing\
    \ this specification.\n"
- title: Chair's Address
  contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n\
    \      Fred Baker\n      Advanced Computer Communications\n      315 Bollay Drive\n\
    \      Santa Barbara, California, 93111\n      EMail: fbaker@acc.com\n"
- title: Editor's Address
  contents:
  - "Editor's Address\n   Questions about this memo can also be directed to:\n   \
    \   William Allen Simpson\n      Daydreamer\n      Computer Systems Consulting\
    \ Services\n      1384 Fontaine\n      Madison Heights, Michigan  48071\n    \
    \  EMail: Bill.Simpson@um.cc.umich.edu\n"
