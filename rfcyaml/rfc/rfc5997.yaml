- title: __initial_text__
  contents:
  - "                  Use of Status-Server Packets in the\n      Remote Authentication\
    \ Dial In User Service (RADIUS) Protocol\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a deployed extension to the Remote\n   Authentication\
    \ Dial In User Service (RADIUS) protocol, enabling\n   clients to query the status\
    \ of a RADIUS server.  This extension\n   utilizes the Status-Server (12) Code,\
    \ which was reserved for\n   experimental use in RFC 2865.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5997.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Applicability ..............................................3\n  \
    \    1.2. Terminology ................................................4\n    \
    \  1.3. Requirements Language ......................................4\n   2. Overview\
    \ ........................................................4\n      2.1. Why Access-Request\
    \ is Inappropriate ........................6\n           2.1.1. Recommendation\
    \ against Access-Request ...............7\n      2.2. Why Accounting-Request is\
    \ Inappropriate ....................7\n           2.2.1. Recommendation against\
    \ Accounting-Request ...........7\n   3. Packet Format ...................................................8\n\
    \      3.1. Single Definition for Status-Server .......................10\n  \
    \ 4. Implementation Notes ...........................................10\n    \
    \  4.1. Client Requirements .......................................11\n      4.2.\
    \ Server Requirements .......................................12\n      4.3. Failover\
    \ with Status-Server ...............................14\n      4.4. Proxy Server\
    \ Handling of Status-Server ....................14\n      4.5. Limitations of\
    \ Status-Server ..............................15\n      4.6. Management Information\
    \ Base (MIB) Considerations ..........17\n           4.6.1. Interaction with RADIUS\
    \ Server MIB Modules .........17\n           4.6.2. Interaction with RADIUS Client\
    \ MIB Modules .........17\n   5. Table of Attributes ............................................18\n\
    \   6. Examples .......................................................19\n  \
    \    6.1. Minimal Query to Authentication Port ......................19\n    \
    \  6.2. Minimal Query to Accounting Port ..........................20\n      6.3.\
    \ Verbose Query and Response ................................21\n   7. Security\
    \ Considerations ........................................21\n   8. References\
    \ .....................................................23\n      8.1. Normative\
    \ References ......................................23\n      8.2. Informative\
    \ References ....................................23\n   Acknowledgments ...................................................24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies a deployed extension to the Remote\n\
    \   Authentication Dial In User Service (RADIUS) protocol, enabling\n   clients\
    \ to query the status of a RADIUS server.  While the Status-\n   Server (12) Code\
    \ was defined as experimental in [RFC2865], Section 3,\n   details of the operation\
    \ and potential uses of the Code were not\n   provided.\n   As with the core RADIUS\
    \ protocol, the Status-Server extension is\n   stateless, and queries do not otherwise\
    \ affect the normal operation\n   of a server, nor do they result in any side\
    \ effects, other than\n   perhaps incrementing an internal packet counter.  Most\
    \ of the\n   implementations of this extension have utilized it alongside\n  \
    \ implementations of RADIUS as defined in [RFC2865], so that this\n   document\
    \ focuses solely on the use of this extension with UDP\n   transport.\n   The\
    \ rest of this document is laid out as follows.  Section 2 contains\n   the problem\
    \ statement, and explanations as to why some possible\n   solutions can have unwanted\
    \ side effects.  Section 3 defines the\n   Status-Server packet format.  Section\
    \ 4 contains client and server\n   requirements, along with some implementation\
    \ notes.  Section 5\n   contains a RADIUS table of attributes.  The remaining\
    \ text discusses\n   security considerations not covered elsewhere in the document.\n"
- title: 1.1.  Applicability
  contents:
  - "1.1.  Applicability\n   This protocol is being recommended for publication as\
    \ an\n   Informational RFC rather than as a Standards-Track RFC because of\n \
    \  problems with deployed implementations.  This includes security\n   vulnerabilities.\
    \  The fixes recommended here are compatible with\n   existing servers that receive\
    \ Status-Server packets, but impose new\n   security requirements on clients that\
    \ send Status-Server packets.\n   Some existing implementations of this protocol\
    \ do not support the\n   Message-Authenticator attribute ([RFC3579]).  This enables\
    \ an\n   unauthorized client to spoof Status-Server packets, potentially\n   leading\
    \ to incorrect Access-Accepts.  In order to remedy this\n   problem, this specification\
    \ requires the use of the Message-\n   Authenticator attribute to provide per-packet\
    \ authentication and\n   integrity protection.\n   With existing implementations\
    \ of this protocol, the potential exists\n   for Status-Server requests to be\
    \ in conflict with Access-Request or\n   Accounting-Request packets using the\
    \ same Identifier.  This\n   specification recommends techniques to avoid this\
    \ problem.\n   These limitations are discussed in more detail below.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   This document uses the following terms:\n   \"Network Access\
    \ Server (NAS)\"\n      The device providing access to the network.  Also known\
    \ as the\n      Authenticator (in IEEE 802.1X terminology) or RADIUS client.\n\
    \   \"RADIUS Proxy\"\n      In order to provide for the routing of RADIUS authentication\
    \ and\n      accounting requests, a RADIUS proxy can be employed.  To the NAS,\n\
    \      the RADIUS proxy appears to act as a RADIUS server, and to the\n      RADIUS\
    \ server, the proxy appears to act as a RADIUS client.\n   \"silently discard\"\
    \n      This means the implementation discards the packet without further\n  \
    \    processing.  The implementation MAY provide the capability of\n      logging\
    \ the error, including the contents of the silently\n      discarded packet, and\
    \ SHOULD record the event in a statistics\n      counter.\n"
- title: 1.3.  Requirements Language
  contents:
  - "1.3.  Requirements Language\n   In this document, several words are used to signify\
    \ the requirements\n   of the specification.  The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\",\n   and \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   [RFC2119].\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   Status-Server packets are sent by a RADIUS client to a RADIUS\
    \ server\n   in order to test the status of that server.  The destination of a\n\
    \   Status-Server packet is set to the IP address and port of the server\n   that\
    \ is being tested.  A single Status-Server packet MUST be included\n   within\
    \ a UDP datagram.  A Message-Authenticator attribute MUST be\n   included so as\
    \ to provide per-packet authentication and integrity\n   protection.\n   RADIUS\
    \ proxies or servers MUST NOT forward Status-Server packets.  A\n   RADIUS server\
    \ or proxy implementing this specification SHOULD respond\n   to a Status-Server\
    \ packet with an Access-Accept (authentication port)\n   or Accounting-Response\
    \ (accounting port).  An Access-Challenge\n   response is NOT RECOMMENDED.  An\
    \ Access-Reject response MAY be used.\n   The list of attributes that are permitted\
    \ in Status-Server packets,\n   and in Access-Accept or Accounting-Response packets\
    \ responding to\n   Status-Server packets, is provided in Section 5.  Section\
    \ 6 provides\n   several examples.\n   Since a Status-Server packet MUST NOT be\
    \ forwarded by a RADIUS proxy\n   or server, the client is provided with an indication\
    \ of the status of\n   that server only, since no RADIUS proxies are on the path\
    \ between the\n   RADIUS client and server.  As servers respond to a Status-Server\n\
    \   packet without examining the User-Name attribute, the response to a\n   Status-Server\
    \ packet cannot be used to infer any information about\n   the reachability of\
    \ specific realms.\n   The \"hop-by-hop\" functionality of Status-Server packets\
    \ is useful to\n   RADIUS clients attempting to determine the status of the first\n\
    \   element on the path between the client and a server.  Since the\n   Status-Server\
    \ packet is non-forwardable, the lack of a response may\n   only be due to packet\
    \ loss or the failure of the server at the\n   destination IP address, and not\
    \ due to faults in downstream links,\n   proxies, or servers.  It therefore provides\
    \ an unambiguous indication\n   of the status of a server.\n   This information\
    \ may be useful in situations in which the RADIUS\n   client does not receive\
    \ a response to an Access-Request.  A client\n   may have multiple proxies configured,\
    \ with one proxy marked as\n   primary and another marked as secondary.  If the\
    \ client does not\n   receive a response to a request sent to the primary proxy,\
    \ it can\n   \"failover\" to the secondary, and send requests to the secondary\
    \ proxy\n   instead.\n   However, it is possible that the lack of a response to\
    \ requests sent\n   to the primary proxy was due not to a failure within the primary,\
    \ but\n   to alternative causes such as a failed link along the path to the\n\
    \   destination server or the failure of the destination server itself.\n   In\
    \ such a situation, it may be useful for the client to be able to\n   distinguish\
    \ between failure causes so that it does not trigger\n   failover inappropriately.\
    \  For example, if the primary proxy is down,\n   then a quick failover to the\
    \ secondary proxy would be prudent;\n   whereas, if a downstream failure is the\
    \ cause, then the value of\n   failover to a secondary proxy will depend on whether\
    \ packets\n   forwarded by the secondary will utilize independent links,\n   intermediaries,\
    \ or destination servers.\n   The Status-Server packet is not a \"Keep-Alive\"\
    \ as discussed in\n   [RFC2865], Section 2.6.  \"Keep-Alives\" are Access-Request\
    \ packets\n   sent to determine whether a downstream server is responsive.  These\n\
    \   packets are typically sent only when a server is suspected to be\n   down,\
    \ and they are no longer sent as soon as the server is available\n   again.\n"
- title: 2.1.  Why Access-Request is Inappropriate
  contents:
  - "2.1.  Why Access-Request is Inappropriate\n   One possible solution to the problem\
    \ of querying server status is for\n   a NAS to send specially formed Access-Request\
    \ packets to a RADIUS\n   server's authentication port.  The NAS can then look\
    \ for a response\n   and use this information to determine if the server is active\
    \ or\n   unresponsive.\n   However, the server may see the request as a normal\
    \ login request for\n   a user and conclude that a real user has logged onto that\
    \ NAS.  The\n   server may then perform actions that are undesirable for a simple\n\
    \   status query.  The server may alternatively respond with an Access-\n   Challenge,\
    \ indicating that it believes an extended authentication\n   conversation is necessary.\n\
    \   Another possibility is that the server responds with an Access-\n   Reject,\
    \ indicating that the user is not authorized to gain access to\n   the network.\
    \  As above, the server may also perform local-site\n   actions, such as warning\
    \ an administrator of failed login attempts.\n   The server may also delay the\
    \ Access-Reject response, in the\n   traditional manner of rate-limiting failed\
    \ authentication attempts.\n   This delay in response means that the querying\
    \ administrator is\n   unsure as to whether or not the server is down, slow to\
    \ respond, or\n   intentionally delaying its response to the query.\n   In addition,\
    \ using Access-Request queries may mean that the server\n   may have local users\
    \ configured whose sole reason for existence is to\n   enable these query requests.\
    \  Unless the server policy is designed\n   carefully, it may be possible for\
    \ an attacker to use those\n   credentials to gain unauthorized network access.\n\
    \   We note that some NAS implementations currently use Access-Request\n   packets\
    \ as described above, with a fixed (and non-configurable) user\n   name and password.\
    \  Implementation issues with that equipment mean\n   that if a RADIUS server\
    \ does not respond to those queries, it may be\n   marked as unresponsive by the\
    \ NAS.  This marking may happen even if\n   the server is actively responding\
    \ to other Access-Requests from that\n   same NAS.  This behavior is confusing\
    \ to administrators who then need\n   to determine why an active server has been\
    \ marked as \"unresponsive\".\n"
- title: 2.1.1.  Recommendation against Access-Request
  contents:
  - "2.1.1.  Recommendation against Access-Request\n   For the reasons outlined above,\
    \ NAS implementors SHOULD NOT generate\n   Access-Request packets solely to see\
    \ if a server is alive.\n   Similarly, site administrators SHOULD NOT configure\
    \ test users whose\n   sole reason for existence is to enable such queries via\
    \ Access-\n   Request packets.\n   Note that it still may be useful to configure\
    \ test users for the\n   purpose of performing end-to-end or in-depth testing\
    \ of a server\n   policy.  While this practice is widespread, we caution administrators\n\
    \   to use it with care.\n"
- title: 2.2.  Why Accounting-Request is Inappropriate
  contents:
  - "2.2.  Why Accounting-Request is Inappropriate\n   A similar solution for the\
    \ problem of querying server status may be\n   for a NAS to send specially formed\
    \ Accounting-Request packets to a\n   RADIUS server's accounting port.  The NAS\
    \ can then look for a\n   response and use this information to determine if the\
    \ server is\n   active or unresponsive.\n   As seen above with Access-Request,\
    \ the server may then conclude that\n   a real user has logged onto a NAS, and\
    \ perform local-site actions\n   that are undesirable for a simple status query.\n\
    \   Another consideration is that some attributes are mandatory to\n   include\
    \ in an Accounting-Request.  This requirement forces the\n   administrator to\
    \ query an accounting server with fake values for\n   those attributes in a test\
    \ packet.  These fake values increase the\n   work required to perform a simple\
    \ query, and they may pollute the\n   server's accounting database with incorrect\
    \ data.\n"
- title: 2.2.1.  Recommendation against Accounting-Request
  contents:
  - "2.2.1.  Recommendation against Accounting-Request\n   For the reasons outlined\
    \ above, NAS implementors SHOULD NOT generate\n   Accounting-Request packets solely\
    \ to see if a server is alive.\n   Similarly, site administrators SHOULD NOT configure\
    \ accounting\n   policies whose sole reason for existence is to enable such queries\n\
    \   via Accounting-Request packets.\n   Note that it still may be useful to configure\
    \ test users for the\n   purpose of performing end-to-end or in-depth testing\
    \ of a server's\n   policy.  While this practice is widespread, we caution administrators\n\
    \   to use it with care.\n"
- title: 3.  Packet Format
  contents:
  - "3.  Packet Format\n   Status-Server packets reuse the RADIUS packet format, with\
    \ the fields\n   and values for those fields as defined in [RFC2865], Section\
    \ 3.  We\n   do not include all of the text or diagrams of that section here,\
    \ but\n   instead explain the differences required to implement Status-Server.\n\
    \   The Authenticator field of Status-Server packets MUST be generated\n   using\
    \ the same method as that used for the Request Authenticator\n   field of Access-Request\
    \ packets, as given below.\n   The role of the Identifier field is the same for\
    \ Status-Server as for\n   other packets.  However, as Status-Server is taking\
    \ the role of\n   Access-Request or Accounting-Request packets, there is the potential\n\
    \   for Status-Server requests to be in conflict with Access-Request or\n   Accounting-Request\
    \ packets with the same Identifier.  In Section 4.2\n   below, we describe a method\
    \ for avoiding these problems.  This method\n   MUST be used to avoid conflicts\
    \ between Status-Server and other\n   packet types.\n      Request Authenticator\n\
    \         In Status-Server packets, the Authenticator value is a 16-octet\n  \
    \       random number called the Request Authenticator.  The value\n         SHOULD\
    \ be unpredictable and unique over the lifetime of a\n         secret (the password\
    \ shared between the client and the RADIUS\n         server), since repetition\
    \ of a request value in conjunction\n         with the same secret would permit\
    \ an attacker to reply with a\n         previously intercepted response.  Since\
    \ it is expected that the\n         same secret MAY be used to authenticate with\
    \ servers in\n         disparate geographic regions, the Request Authenticator\
    \ field\n         SHOULD exhibit global and temporal uniqueness.  See [RFC4086]\n\
    \         for suggestions as to how random numbers may be generated.\n       \
    \  The Request Authenticator value in a Status-Server packet\n         SHOULD\
    \ also be unpredictable, lest an attacker trick a server\n         into responding\
    \ to a predicted future request, and then use the\n         response to masquerade\
    \ as that server to a future Status-Server\n         request from a client.\n\
    \   Similarly, the Response Authenticator field of an Access-Accept\n   packet\
    \ sent in response to Status-Server queries MUST be generated\n   using the same\
    \ method as used for calculating the Response\n   Authenticator of the Access-Accept\
    \ sent in response to an Access-\n   Request, with the Status-Server Request Authenticator\
    \ taking the\n   place of the Access-Request Request Authenticator.\n   The Response\
    \ Authenticator field of an Accounting-Response packet\n   sent in response to\
    \ Status-Server queries MUST be generated using the\n   same method as used for\
    \ calculating the Response Authenticator of the\n   Accounting-Response sent in\
    \ response to an Accounting-Request, with\n   the Status-Server Request Authenticator\
    \ taking the place of the\n   Accounting-Request Request Authenticator.\n   Note\
    \ that when a server responds to a Status-Server request, it MUST\n   NOT send\
    \ more than one Response packet.\n      Response Authenticator\n         The value\
    \ of the Authenticator field in Access-Accept or\n         Accounting-Response\
    \ packets is called the Response\n         Authenticator, and contains a one-way\
    \ MD5 hash calculated over\n         a stream of octets consisting of: the RADIUS\
    \ packet, beginning\n         with the Code field, including the Identifier, the\
    \ Length, the\n         Request Authenticator field from the Status-Server packet,\
    \ and\n         the response Attributes (if any), followed by the shared\n   \
    \      secret.  That is,\n         ResponseAuth =\n            MD5(Code+ID+Length+RequestAuth+Attributes+Secret)\n\
    \         where + denotes concatenation.\n   In addition to the above requirements,\
    \ all Status-Server packets MUST\n   include a Message-Authenticator attribute.\
    \  Failure to do so would\n   mean that the packets could be trivially spoofed.\n\
    \   Status-Server packets MAY include NAS-Identifier, and one of\n   NAS-IP-Address\
    \ or NAS-IPv6-Address.  These attributes are not\n   necessary for the operation\
    \ of Status-Server, but may be useful\n   information to a server that receives\
    \ those packets.\n   Other attributes SHOULD NOT be included in a Status-Server\
    \ packet,\n   and MUST be ignored if they are included.  User authentication\n\
    \   credentials such as User-Name, User-Password, CHAP-Password,\n   EAP-Message\
    \ MUST NOT appear in a Status-Server packet sent to a\n   RADIUS authentication\
    \ port.  User or NAS accounting attributes such\n   as Acct-Session-Id, Acct-Status-Type,\
    \ Acct-Input-Octets MUST NOT\n   appear in a Status-Server packet sent to a RADIUS\
    \ accounting port.\n   The Access-Accept MAY contain a Reply-Message or Message-\n\
    \   Authenticator attribute.  It SHOULD NOT contain other attributes.\n   The\
    \ Accounting-Response packets sent in response to a Status-Server\n   query SHOULD\
    \ NOT contain any attributes.  As the intent is to\n   implement a simple query\
    \ instead of user authentication or\n   accounting, there is little reason to\
    \ include other attributes in\n   either the query or the corresponding response.\n\
    \   Examples of Status-Server packet flows are given below in Section 6.\n"
- title: 3.1.  Single Definition for Status-Server
  contents:
  - "3.1.  Single Definition for Status-Server\n   When sent to a RADIUS accounting\
    \ port, the contents of the Status-\n   Server packets are calculated as described\
    \ above.  That is, even\n   though the packets are being sent to an accounting\
    \ port, they are not\n   created using the same method as is used for Accounting-Requests.\n\
    \   This difference has a number of benefits.\n   Having a single definition for\
    \ Status-Server packets is simpler than\n   having different definitions for different\
    \ destination ports.  In\n   addition, if we were to define Status-Server as being\
    \ similar to\n   Accounting-Request but containing no attributes, then those packets\n\
    \   could be trivially forged.\n   We therefore define Status-Server consistently,\
    \ and vary the response\n   packets depending on the port to which the request\
    \ is sent.  When\n   sent to an authentication port, the response to a Status-Server\
    \ query\n   is an Access-Accept packet.  When sent to an accounting port, the\n\
    \   response to a Status-Server query is an Accounting-Response packet.\n"
- title: 4.  Implementation Notes
  contents:
  - "4.  Implementation Notes\n   There are a number of considerations to take into\
    \ account when\n   implementing support for Status-Server.  This section describes\n\
    \   implementation details and requirements for RADIUS clients and\n   servers\
    \ that support Status-Server.\n   The following text applies to the authentication\
    \ and accounting\n   ports.  We use the generic terms below to simplify the discussion:\n\
    \      *  Request packet\n         An Access-Request packet sent to an authentication\
    \ port or an\n         Accounting-Request packet sent to an accounting port.\n\
    \      *  Response packet\n         An Access-Accept, Access-Challenge, or Access-Reject\
    \ packet\n         sent from an authentication port or an Accounting-Response\n\
    \         packet sent from an accounting port.\n   We also refer to \"client\"\
    \ as the originator of the Status-Server\n   packet, and \"server\" as the receiver\
    \ of that packet and the\n   originator of the Response packet.\n   Using generic\
    \ terms to describe the Status-Server conversations is\n   simpler than duplicating\
    \ the text for authentication and accounting\n   packets.\n"
- title: 4.1.  Client Requirements
  contents:
  - "4.1.  Client Requirements\n   Clients SHOULD permit administrators to globally\
    \ enable or disable\n   the generation of Status-Server packets.  The default\
    \ SHOULD be that\n   it is disabled.  As it is undesirable to send queries to\
    \ servers that\n   do not support Status-Server, clients SHOULD also have a per-server\n\
    \   configuration indicating whether or not to enable Status-Server for a\n  \
    \ particular destination.  The default SHOULD be that it is disabled.\n   The\
    \ client SHOULD use a watchdog timer, such as is defined in Section\n   2.2.1\
    \ of [RFC5080], to determine when to send Status-Server packets.\n   When Status-Server\
    \ packets are sent from a client, they MUST NOT be\n   retransmitted.  Instead,\
    \ the Identity field MUST be changed every\n   time a packet is transmitted. \
    \ The old packet should be discarded,\n   and a new Status-Server packet should\
    \ be generated and sent, with new\n   Identity and Authenticator fields.\n   Clients\
    \ MUST include the Message-Authenticator attribute in all\n   Status-Server packets.\
    \  Failure to do so would mean that the packets\n   could be trivially spoofed,\
    \ leading to potential denial-of-service\n   (DoS) attacks.  Other attributes\
    \ SHOULD NOT appear in a Status-Server\n   packet, except as outlined below in\
    \ Section 5.  As the intent of the\n   packet is a simple status query, there\
    \ is little reason for any\n   additional attributes to appear in Status-Server\
    \ packets.\n   The client MAY increment packet counters as a result of sending\
    \ a\n   Status-Server request or of receiving a Response packet.  The client\n\
    \   MUST NOT perform any other action that is normally performed when it\n   receives\
    \ a Response packet, such as permitting a user to have login\n   access to a port.\n\
    \   Clients MAY send Status-Server requests to the RADIUS destination\n   ports\
    \ from the same source port used to send normal Request packets.\n   Other clients\
    \ MAY choose to send Status-Server requests from a unique\n   source port that\
    \ is not used to send Request packets.\n   The above suggestion for a unique source\
    \ port for Status-Server\n   packets aids in matching responses to requests. \
    \ Since the response\n   to a Status-Server packet is an Access-Accept or Accounting-Response\n\
    \   packet, those responses are indistinguishable from other packets sent\n  \
    \ in response to a Request packet.  Therefore, the best way to\n   distinguish\
    \ them from other traffic is to have a unique port.\n   A client MAY send a Status-Server\
    \ packet from a source port also used\n   to send Request packets.  In that case,\
    \ the Identifier field MUST be\n   unique across all outstanding Request packets\
    \ for that source port,\n   independent of the value of the RADIUS Code field\
    \ for those\n   outstanding requests.  Once the client has either received a response\n\
    \   to the Status-Server packet or determined that the Status-Server\n   packet\
    \ has timed out, it may reuse that Identifier in another packet.\n   Robust implementations\
    \ SHOULD accept any Response packet as a valid\n   response to a Status-Server\
    \ packet, subject to the validation\n   requirements defined above for the Response\
    \ Authenticator.  The Code\n   field of the packet matters less than the fact\
    \ that a valid, signed\n   response has been received.\n   That is, prior to accepting\
    \ the response as valid, the client should\n   check that the Response packet\
    \ Code field is either Access-Accept (2)\n   or Accounting-Response (5).  If the\
    \ Code does not match any of these\n   values, the packet MUST be silently discarded.\
    \  The client MUST then\n   validate the Response Authenticator via the algorithm\
    \ given above in\n   Section 3.  If the Response Authenticator is not valid, the\
    \ packet\n   MUST be silently discarded.  If the Response Authenticator is valid,\n\
    \   then the packet MUST be deemed to be a valid response from the\n   server.\n\
    \   If the client instead discarded the response because the packet Code\n   did\
    \ not match what it expected, then it could erroneously discard\n   valid responses\
    \ from a server, and mark that server as unresponsive.\n   This behavior would\
    \ affect the stability of a RADIUS network, as\n   responsive servers would erroneously\
    \ be marked as unresponsive.  We\n   therefore recommend that clients should be\
    \ liberal in what they\n   accept as responses to Status-Server queries.\n"
- title: 4.2.  Server Requirements
  contents:
  - "4.2.  Server Requirements\n   Servers SHOULD permit administrators to globally\
    \ enable or disable\n   the acceptance of Status-Server packets.  The default\
    \ SHOULD be that\n   acceptance is enabled.  Servers SHOULD also permit administrators\
    \ to\n   enable or disable acceptance of Status-Server packets on a per-client\n\
    \   basis.  The default SHOULD be that acceptance is enabled.\n   Status-Server\
    \ packets originating from clients that are not permitted\n   to send the server\
    \ Request packets MUST be silently discarded.  If a\n   server does not support\
    \ Status-Server packets, or is configured not\n   to respond to them, then it\
    \ MUST silently discard the packet.\n   We note that [RFC2865], Section 3, defines\
    \ a number of RADIUS Codes,\n   but does not make statements about which Codes\
    \ are valid for\n   port 1812.  In contrast, [RFC2866], Section 3, specifies that\
    \ only\n   RADIUS Accounting packets are to be sent to port 1813.  This\n   specification\
    \ is compatible with [RFC2865], as it uses a known Code\n   for packets to port\
    \ 1812.  This specification is not compatible with\n   [RFC2866], as it adds a\
    \ new Code (Status-Server) that is valid for\n   port 1812.  However, as the category\
    \ of [RFC2866] is Informational,\n   this conflict is acceptable.\n   Servers\
    \ SHOULD silently discard Status-Server packets if they\n   determine that a client\
    \ is sending too many Status-Server requests in\n   a particular time period.\
    \  The method used by a server to make this\n   determination is implementation\
    \ specific and out of scope for this\n   specification.\n   If a server supports\
    \ Status-Server packets, and is configured to\n   respond to them, and receives\
    \ a packet from a known client, it MUST\n   validate the Message-Authenticator\
    \ attribute as defined in [RFC3579],\n   Section 3.2.  Packets failing that validation\
    \ MUST be silently\n   discarded.\n   Servers SHOULD NOT otherwise discard Status-Server\
    \ packets if they\n   have recently sent the client a Response packet.  The query\
    \ may have\n   originated from an administrator who does not have access to the\n\
    \   Response packet stream or one who is interested in obtaining\n   additional\
    \ information about the server.\n   The server MAY prioritize the handling of\
    \ Status-Server packets over\n   the handling of other requests, subject to the\
    \ rate limiting\n   described above.\n   The server MAY decide not to respond\
    \ to a Status-Server, depending on\n   local-site policy.  For example, a server\
    \ that is running but is\n   unable to perform its normal activities MAY silently\
    \ discard Status-\n   Server packets.  This situation can happen, for example,\
    \ when a\n   server requires access to a database for normal operation, but the\n\
    \   connection to that database is down.  Or, it may happen when the\n   accepted\
    \ load on the server is lower than the offered load.\n   Some server implementations\
    \ require that Access-Request packets be\n   accepted only on \"authentication\"\
    \ ports (e.g., 1812/udp), and that\n   Accounting-Request packets be accepted\
    \ only on \"accounting\" ports\n   (e.g., 1813/udp).  Those implementations SHOULD\
    \ reply to Status-\n   Server packets sent to an \"authentication\" port with\
    \ an Access-Accept\n   packet and SHOULD reply to Status-Server packets sent to\
    \ an\n   \"accounting\" port with an Accounting-Response packet.\n   Some server\
    \ implementations accept both Access-Request and\n   Accounting-Request packets\
    \ on the same port, and they do not\n   distinguish between \"authentication only\"\
    \ ports and \"accounting only\"\n   ports.  Those implementations SHOULD reply\
    \ to Status-Server packets\n   with an Access-Accept packet.\n   The server MAY\
    \ increment packet counters as a result of receiving a\n   Status-Server packet\
    \ or sending a Response packet.  The server SHOULD\n   NOT perform any other action\
    \ that is normally performed when it\n   receives a Request packet, other than\
    \ sending a Response packet.\n"
- title: 4.3.  Failover with Status-Server
  contents:
  - "4.3.  Failover with Status-Server\n   A client may wish to \"failover\" from\
    \ one proxy to another in the\n   event that it does not receive a response to\
    \ an Access-Request or\n   Accounting-Request.  In order to determine whether\
    \ the lack of\n   response is due to a problem with the proxy or a downstream\
    \ server,\n   the client can send periodic Status-Server packets to a proxy after\n\
    \   the lack of a response.\n   These packets will help the client determine if\
    \ the failure was due\n   to an issue on the path between the client and proxy\
    \ or the proxy\n   itself, or whether the issue is occurring downstream.\n   If\
    \ no response is received to Status-Server packets, the RADIUS\n   client can\
    \ initiate failover to another proxy.  By continuing to send\n   Status-Server\
    \ packets to the original proxy, the RADIUS client can\n   determine when it becomes\
    \ responsive again.\n   Once the server has been deemed responsive, normal RADIUS\
    \ requests\n   may be sent to it again.  This determination should be made\n \
    \  separately for each server with which the client has a relationship.\n   The\
    \ same algorithm SHOULD be used for both authentication and\n   accounting ports.\
    \  The client MUST treat each destination (IP, port)\n   combination as a unique\
    \ server for the purposes of this\n   determination.\n   Clients SHOULD use a\
    \ retransmission mechanism similar to that given\n   in Section 2.2.1 of [RFC5080].\
    \  If a reliable transport is used for\n   RADIUS, then the watchdog timer algorithm\
    \ specified in [RFC3539] MUST\n   be used.\n"
- title: 4.4.  Proxy Server Handling of Status-Server
  contents:
  - "4.4.  Proxy Server Handling of Status-Server\n   Many RADIUS servers can act\
    \ as proxy servers, and can forward\n   requests to another RADIUS server.  Such\
    \ servers MUST NOT proxy\n   Status-Server packets.  The purpose of Status-Server\
    \ as specified\n   here is to permit the client to query the responsiveness of\
    \ a server\n   with which it has a direct relationship.  Proxying Status-Server\n\
    \   queries would negate any usefulness that may be gained by\n   implementing\
    \ support for them.\n   Proxy servers MAY be configured to respond to Status-Server\
    \ queries\n   from clients, and they MAY act as clients sending Status-Server\n\
    \   queries to other servers.  However, those activities MUST be\n   independent\
    \ of one another.\n"
- title: 4.5.  Limitations of Status-Server
  contents:
  - "4.5.  Limitations of Status-Server\n   RADIUS servers are commonly used in an\
    \ environment where Network\n   Access Identifiers (NAIs) are used as routing\
    \ identifiers [RFC4282].\n   In this practice, the User-Name attribute is decorated\
    \ with realm-\n   routing information, commonly in the format of \"user@realm\"\
    .  Since a\n   particular RADIUS server may act as a proxy for more than one realm,\n\
    \   we need to explain how the behavior defined above in Section 4.3\n   affects\
    \ realm routing.\n   The schematic below demonstrates this scenario.\n       \
    \       /-> RADIUS Proxy P -----> RADIUS Server for Realm A\n             /  \
    \                  \\ /\n          NAS                      X\n             \\\
    \                    / \\\n              \\-> RADIUS Proxy S -----> RADIUS Server\
    \ for Realm B\n   That is, the NAS has relationships with two RADIUS Proxies,\
    \ P and S.\n   Each RADIUS proxy has relationships with RADIUS servers for both\n\
    \   Realm A and Realm B.\n   In this scenario, the RADIUS proxies can determine\
    \ if one or both of\n   the RADIUS servers are dead or unreachable.  The NAS can\
    \ determine if\n   one or both of the RADIUS proxies are dead or unreachable.\
    \  There is\n   an additional case to consider, however.\n   If RADIUS Proxy P\
    \ cannot reach the RADIUS server for Realm A, but\n   RADIUS Proxy S can reach\
    \ that RADIUS server, then the NAS cannot\n   discover this information using\
    \ the Status-Server queries as outlined\n   above.  It would therefore be useful\
    \ for the NAS to know that Realm A\n   is reachable from RADIUS Proxy S, as it\
    \ can then route all requests\n   for Realm A to that RADIUS proxy.  Without this\
    \ knowledge, the client\n   may route requests to RADIUS Proxy P, where they may\
    \ be discarded or\n   rejected.\n   To complicate matters, the behavior of RADIUS\
    \ Proxies P and S in this\n   situation is not well defined.  Some implementations\
    \ simply fail to\n   respond to the request, and other implementations respond\
    \ with an\n   Access-Reject.  If the implementation fails to respond, then the\
    \ NAS\n   cannot distinguish between the RADIUS proxy being down and the next\n\
    \   server along the proxy chain being unreachable.\n   In the worst case, failures\
    \ in routing for Realm A may affect users\n   of Realm B.  For example, if RADIUS\
    \ Proxy P can reach Realm B but not\n   Realm A, and RADIUS Proxy S can reach\
    \ Realm A but not Realm B, then\n   active paths exist to handle all RADIUS requests.\
    \  However, depending\n   on the NAS and RADIUS proxy implementation choices,\
    \ the NAS may not\n   be able to determine to which server requests may be sent\
    \ in order to\n   maintain network stability.\n   Unfortunately, this problem\
    \ cannot be solved by using Status-Server\n   requests.  A robust solution would\
    \ involve either a RADIUS routing\n   table for the NAI realms or a RADIUS \"\
    destination unreachable\"\n   response to authentication requests.  Either solution\
    \ would not fit\n   into the traditional RADIUS model, and both are therefore\
    \ outside of\n   the scope of this specification.\n   The problem is discussed\
    \ here in order to define how best to use\n   Status-Server in this situation,\
    \ rather than to define a new\n   solution.\n   When a server has responded recently\
    \ to a request from a client, that\n   client MUST mark the server as \"responsive\"\
    .  In the above case, a\n   RADIUS proxy may be responding to requests destined\
    \ for Realm A, but\n   not responding to requests destined for Realm B.  The client\n\
    \   therefore considers the server to be responsive, as it is receiving\n   responses\
    \ from the server.\n   The client will then continue to send requests to the RADIUS\
    \ proxy\n   for destination Realm B, even though the RADIUS proxy cannot route\n\
    \   the requests to that destination.  This failure is a known limitation\n  \
    \ of RADIUS, and can be partially addressed through the use of failover\n   in\
    \ the RADIUS proxies.\n   A more realistic situation than the one outlined above\
    \ is one in\n   which each RADIUS proxy also has multiple choices of RADIUS servers\n\
    \   for a realm, as outlined below.\n                /-> RADIUS Proxy P ----->\
    \ RADIUS Server P\n               /                    \\ /\n            NAS \
    \                     X\n               \\                    / \\\n         \
    \       \\-> RADIUS Proxy S -----> RADIUS Server S\n   In this situation, if all\
    \ participants implement Status-Server as\n   defined herein, any one link may\
    \ be broken, and all requests from the\n   NAS will still reach a RADIUS server.\
    \  If two links are broken at\n   different places (i.e., not both links from\
    \ the NAS), then all\n   requests from the NAS will still reach a RADIUS server.\
    \  In many\n   situations where three or more links are broken, requests from\
    \ the\n   NAS may still reach a RADIUS server.\n   It is RECOMMENDED, therefore,\
    \ that implementations desiring the most\n   benefit from Status-Server also implement\
    \ server failover.  The\n   combination of these two practices will maximize network\
    \ reliability\n   and stability.\n"
- title: 4.6.  Management Information Base (MIB) Considerations
  contents:
  - '4.6.  Management Information Base (MIB) Considerations

    '
- title: 4.6.1.  Interaction with RADIUS Server MIB Modules
  contents:
  - "4.6.1.  Interaction with RADIUS Server MIB Modules\n   Since Status-Server packets\
    \ are sent to the defined RADIUS ports,\n   they can affect the [RFC4669] and\
    \ [RFC4671] RADIUS server MIB\n   modules.  [RFC4669] defines a counter named\n\
    \   radiusAuthServTotalUnknownTypes that counts \"The number of RADIUS\n   packets\
    \ of unknown type that were received\".  [RFC4671] defines a\n   similar counter\
    \ named radiusAccServTotalUnknownTypes.\n   Implementations not supporting Status-Server\
    \ or implementations that\n   are configured not to respond to Status-Server packets\
    \ MUST use these\n   counters to track received Status-Server packets.\n   If,\
    \ however, Status-Server is supported and the server is configured\n   to respond\
    \ as described above, then the counters defined in [RFC4669]\n   and [RFC4671]\
    \ MUST NOT be used to track Status-Server requests or\n   responses to those requests.\
    \  That is, when a server fully implements\n   Status-Server, the counters defined\
    \ in [RFC4669] and [RFC4671] MUST\n   be unaffected by the transmission or reception\
    \ of packets relating to\n   Status-Server.\n   If a server supports Status-Server\
    \ and the [RFC4669] or [RFC4671] MIB\n   modules, then it SHOULD also support\
    \ vendor-specific MIB extensions\n   dedicated solely to tracking Status-Server\
    \ requests and responses.\n   Any definition of the server MIB modules for Status-Server\
    \ is outside\n   of the scope of this document.\n"
- title: 4.6.2.  Interaction with RADIUS Client MIB Modules
  contents:
  - "4.6.2.  Interaction with RADIUS Client MIB Modules\n   Clients implementing Status-Server\
    \ MUST NOT increment [RFC4668] or\n   [RFC4670] counters upon reception of Response\
    \ packets to Status-\n   Server queries.  That is, when a server fully implements\
    \ Status-\n   Server, the counters defined in [RFC4668] and [RFC4670] MUST be\n\
    \   unaffected by the transmission or reception of packets relating to\n   Status-Server.\n\
    \   If an implementation supports Status-Server and the [RFC4668] or\n   [RFC4670]\
    \ MIB modules, then it SHOULD also support vendor-specific\n   MIB extensions\
    \ dedicated solely to tracking Status-Server requests\n   and responses.  Any\
    \ definition of the client MIB modules for Status-\n   Server is outside of the\
    \ scope of this document.\n"
- title: 5.  Table of Attributes
  contents:
  - "5.  Table of Attributes\n   The following table provides a guide to which attributes\
    \ may be found\n   in Status-Server packets, and in what quantity.  Attributes\
    \ other\n   than the ones listed below SHOULD NOT be found in a Status-Server\n\
    \   packet.\n      Status-  Access-  Accounting-\n      Server   Accept   Response\
    \      #      Attribute\n      0        0        0             1      User-Name\n\
    \      0        0        0             2      User-Password\n      0        0\
    \        0             3      CHAP-Password\n      0-1      0        0       \
    \      4      NAS-IP-Address (Note 1)\n      0        0+       0            18\
    \      Reply-Message\n      0+       0+       0+           26      Vendor-Specific\n\
    \      0-1      0        0            32      NAS-Identifier (Note 1)\n      0\
    \        0        0            79      EAP-Message\n      1        0-1      0-1\
    \          80      Message-Authenticator\n      0-1      0        0          \
    \  95      NAS-IPv6-Address (Note 1)\n      0        0        0            103-121\
    \ Digest-*\n      Note 1: A Status-Server packet SHOULD contain one of\n     \
    \ (NAS-IP-Address or NAS-IPv6-Address), or NAS-Identifier, or both\n      NAS-Identifier\
    \ and one of (NAS-IP-Address or NAS-IPv6-Address).\n   The following table defines\
    \ the meaning of the above table entries.\n   0     This attribute MUST NOT be\
    \ present in packet.\n   0+    Zero or more instances of this attribute MAY be\
    \ present in\n         packet.\n   0-1   Zero or one instance of this attribute\
    \ MAY be present in\n         packet.\n   1     Exactly one instance of this attribute\
    \ MUST be present in\n         packet.\n"
- title: 6.  Examples
  contents:
  - "6.  Examples\n   A few examples are presented to illustrate the flow of packets\
    \ to\n   both the authentication and accounting ports.  These examples are not\n\
    \   intended to be exhaustive; many others are possible.  Hexadecimal\n   dumps\
    \ of the example packets are given in network byte order, using\n   the shared\
    \ secret \"xyzzy5461\".\n"
- title: 6.1.  Minimal Query to Authentication Port
  contents:
  - "6.1.  Minimal Query to Authentication Port\n   The NAS sends a Status-Server\
    \ UDP packet with minimal content to a\n   RADIUS server on port 1812.\n   The\
    \ Request Authenticator is a 16-octet random number generated by\n   the NAS.\
    \  Message-Authenticator is included in order to authenticate\n   that the request\
    \ came from a known client.\n      0c da 00 26 8a 54 f4 68 6f b3 94 c5 28 66 e3\
    \ 02\n      18 5d 06 23 50 12 5a 66 5e 2e 1e 84 11 f3 e2 43\n      82 20 97 c8\
    \ 4f a3\n       1 Code = Status-Server (12)\n       1 ID = 218\n       2 Length\
    \ = 38\n      16 Request Authenticator\n      Attributes:\n      18 Message-Authenticator\
    \ (80) = 5a665e2e1e8411f3e243822097c84fa3\n   The Response Authenticator is a\
    \ 16-octet MD5 checksum of the Code\n   (2), ID (218), Length (20), the Request\
    \ Authenticator from above, and\n   the shared secret.\n      02 da 00 14 ef 0d\
    \ 55 2a 4b f2 d6 93 ec 2b 6f e8\n      b5 41 1d 66\n      1 Code = Access-Accept\
    \ (2)\n      1 ID = 218\n      2 Length = 20\n     16 Request Authenticator\n\
    \     Attributes:\n        None.\n"
- title: 6.2.  Minimal Query to Accounting Port
  contents:
  - "6.2.  Minimal Query to Accounting Port\n   The NAS sends a Status-Server UDP\
    \ packet with minimal content to a\n   RADIUS server on port 1813.\n   The Request\
    \ Authenticator is a 16-octet random number generated by\n   the NAS.  Message-Authenticator\
    \ is included in order to authenticate\n   that the request came from a known\
    \ client.\n      0c b3 00 26 92 5f 6b 66 dd 5f ed 57 1f cb 1d b7\n      ad 38\
    \ 82 60 50 12 e8 d6 ea bd a9 10 87 5c d9 1f\n      da de 26 36 78 58\n       1\
    \ Code = Status-Server (12)\n       1 ID = 179\n       2 Length = 38\n      16\
    \ Request Authenticator\n      Attributes:\n      18 Message-Authenticator (80)\
    \ = e8d6eabda910875cd91fdade26367858\n   The Response Authenticator is a 16-octet\
    \ MD5 checksum of the Code\n   (5), ID (179), Length (20), the Request Authenticator\
    \ from above, and\n   the shared secret.\n      02 b3 00 14 0f 6f 92 14 5f 10\
    \ 7e 2f 50 4e 86 0a\n      48 60 66 9c\n       1 Code = Accounting-Response (5)\n\
    \       1 ID = 179\n       2 Length = 20\n      16 Request Authenticator\n   \
    \   Attributes:\n         None.\n"
- title: 6.3.  Verbose Query and Response
  contents:
  - "6.3.  Verbose Query and Response\n   The NAS at 192.0.2.16 sends a Status-Server\
    \ UDP packet to the RADIUS\n   server on port 1812.\n   The Request Authenticator\
    \ is a 16-octet random number generated by\n   the NAS.\n      0c 47 00 2c bf\
    \ 58 de 56 ae 40 8a d3 b7 0c 85 13\n      f9 b0 3f be 04 06 c0 00 02 10 50 12\
    \ 85 2d 6f ec\n      61 e7 ed 74 b8 e3 2d ac 2f 2a 5f b2\n       1 Code = Status-Server\
    \ (12)\n       1 ID = 71\n       2 Length = 44\n      16 Request Authenticator\n\
    \      Attributes:\n       6  NAS-IP-Address (4) = 192.0.2.16\n      18 Message-Authenticator\
    \ (80) = 852d6fec61e7ed74b8e32dac2f2a5fb2\n   The Response Authenticator is a\
    \ 16-octet MD5 checksum of the Code\n   (2), ID (71), Length (52), the Request\
    \ Authenticator from above, the\n   attributes in this reply, and the shared secret.\n\
    \   The Reply-Message is \"RADIUS Server up 2 days, 18:40\"\n      02 47 00 34\
    \ 46 f4 3e 62 fd 03 54 42 4c bb eb fd\n      6d 21 4e 06 12 20 52 41 44 49 55\
    \ 53 20 53 65 72\n      76 65 72 20 75 70 20 32 20 64 61 79 73 2c 20 31\n    \
    \  38 3a 34 30\n       1 Code = Access-Accept (2)\n       1 ID = 71\n       2\
    \ Length = 52\n      16 Request Authenticator\n      Attributes:\n      32 Reply-Message\
    \ (18)\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document defines the Status-Server packet\
    \ as being similar in\n   treatment to the Access-Request packet, and is therefore\
    \ subject to\n   the same security considerations as described in [RFC2865],\n\
    \   Section 8.  Status-Server packets also use the Message-Authenticator\n   attribute,\
    \ and are therefore subject to the same security\n   considerations as [RFC3579],\
    \ Section 4.\n   We reiterate that Status-Server packets MUST contain a Message-\n\
    \   Authenticator attribute.  Early implementations supporting Status-\n   Server\
    \ did not enforce this requirement, and were vulnerable to the\n   following attacks:\n\
    \      *  Servers not checking the Message-Authenticator attribute could\n   \
    \      respond to Status-Server packets from an attacker, potentially\n      \
    \   enabling a reflected DoS attack onto a real client.\n      *  Servers not\
    \ checking the Message-Authenticator attribute could\n         be subject to a\
    \ race condition, where an attacker could see an\n         Access-Request packet\
    \ from a valid client and synthesize a\n         Status-Server packet containing\
    \ the same Request Authenticator.\n         If the attacker won the race against\
    \ the valid client, the\n         server could respond with an Access-Accept and\
    \ potentially\n         authorize unwanted service.\n   The last attack is similar\
    \ to a related attack when Access-Request\n   packets contain a CHAP-Password\
    \ but no Message-Authenticator.  We\n   re-iterate the suggestion of [RFC5080],\
    \ Section 2.2.2, which proposes\n   that all clients send a Message-Authenticator\
    \ in every Access-Request\n   packet, and that all servers have a configuration\
    \ setting to require\n   (or not) that a Message-Authenticator attribute be used\
    \ in every\n   Access-Request packet.\n   Failure to include a Message-Authenticator\
    \ attribute in a Status-\n   Server packet means that any RADIUS client or server\
    \ may be\n   vulnerable to the attacks outlined above.  For this reason,\n   implementations\
    \ of this specification that fail to require use of the\n   Message-Authenticator\
    \ attribute are NOT RECOMMENDED.\n   Where this document differs from [RFC2865]\
    \ is that it defines a new\n   request/response method in RADIUS: the Status-Server\
    \ request.  As\n   this use is based on previously described and implemented standards,\n\
    \   we know of no additional security considerations that arise from the\n   use\
    \ of Status-Server as defined herein.\n   Attacks on cryptographic hashes are\
    \ well known [RFC4270] and getting\n   better with time.  RADIUS uses the MD5\
    \ hash [RFC1321] for packet\n   authentication and attribute obfuscation.  There\
    \ are ongoing efforts\n   in the IETF to analyze and address these issues for\
    \ the RADIUS\n   protocol.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC1321]   Rivest, R., \"The MD5 Message-Digest\
    \ Algorithm\", RFC 1321,\n               April 1992.\n   [RFC2119]   Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n               Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC2865]   Rigney, C., Willens, S., Rubens,\
    \ A., and W. Simpson,\n               \"Remote Authentication Dial In User Service\
    \ (RADIUS)\",\n               RFC 2865, June 2000.\n   [RFC3539]   Aboba, B. and\
    \ J. Wood, \"Authentication, Authorization and\n               Accounting (AAA)\
    \ Transport Profile\", RFC 3539, June 2003.\n   [RFC4086]   Eastlake 3rd, D.,\
    \ Schiller, J., and S. Crocker,\n               \"Randomness Requirements for\
    \ Security\", BCP 106,\n               RFC 4086, June 2005.\n   [RFC4282]   Aboba,\
    \ B., Beadles, M., Arkko, J., and P. Eronen, \"The\n               Network Access\
    \ Identifier\", RFC 4282, December 2005.\n   [RFC5080]   Nelson, D. and A. DeKok,\
    \ \"Common Remote Authentication\n               Dial In User Service (RADIUS)\
    \ Implementation Issues and\n               Suggested Fixes\", RFC 5080, December\
    \ 2007.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC2866]   Rigney, C., \"RADIUS Accounting\"\
    , RFC 2866, June 2000.\n   [RFC3579]   Aboba, B. and P. Calhoun, \"RADIUS (Remote\
    \ Authentication\n               Dial In User Service) Support For Extensible\n\
    \               Authentication Protocol (EAP)\", RFC 3579, September 2003.\n \
    \  [RFC4270]   Hoffman, P. and B. Schneier, \"Attacks on Cryptographic\n     \
    \          Hashes in Internet Protocols\", RFC 4270, November 2005.\n   [RFC4668]\
    \   Nelson, D., \"RADIUS Authentication Client MIB for IPv6\",\n             \
    \  RFC 4668, August 2006.\n   [RFC4669]   Nelson, D., \"RADIUS Authentication\
    \ Server MIB for IPv6\",\n               RFC 4669, August 2006.\n   [RFC4670]\
    \   Nelson, D., \"RADIUS Accounting Client MIB for IPv6\",\n               RFC\
    \ 4670, August 2006.\n   [RFC4671]   Nelson, D., \"RADIUS Accounting Server MIB\
    \ for IPv6\",\n               RFC 4671, August 2006.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Parts of the text in Section 3 defining the Request and Response\n\
    \   Authenticators were taken, with minor edits, from [RFC2865],\n   Section 3.\n\
    \   The author would like to thank Mike McCauley of Open Systems\n   Consultants\
    \ for making a Radiator server available for\n   interoperability testing.\n \
    \  Ignacio Goyret provided valuable feedback on the history and security\n   of\
    \ the Status-Server packet.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Alan DeKok\n   The FreeRADIUS Server Project\n   http://freeradius.org\n\
    \   EMail: aland@freeradius.org\n"
