Abstract The purpose of this document is to make the SHA 1 (Secure Hash Algorithm 1)
hash algorithm conveniently available to the Internet community.
The United States of America has adopted the SHA 1 hash algorithm
described herein as a Federal Information Processing Standard.
Most of the text herein was taken by the authors from FIPS 180 1.
Only the C code implementation is "original".
The text below is mostly taken from [FIPS 180 1] and assertions therein of the security of SHA 1 are made by the US Government, the author of [FIPS 180 1], and not by the authors of this document.
This document specifies a Secure Hash Algorithm, SHA 1, for computing a condensed representation of a message or a data file.
When a message of any length < 2^64 bits is input, the SHA 1 produces a 160 bit output called a message digest.
The message digest can then, for example, be input to a signature algorithm which generates or verifies the signature for the message.
Signing the message digest rather than the message often improves the efficiency of the process because the message digest is usually much smaller in size than the message.
The same hash algorithm must be used by the verifier of a digital signature as was used by the creator of the digital signature.
Any change to the message in transit will, with very high probability, result in a different message digest, and the signature will fail to verify.
The SHA 1 is called secure because it is computationally infeasible to find a message which corresponds to a given message digest, or to find two different messages which produce the same message digest.
Any change to a message in transit will, with very high probability, result in a different message digest, and the signature will fail to verify.
Section 2 below defines the terminology and functions used as building blocks to form SHA 1.
Definitions of Bit Strings and Integers
The following terminology related to bit strings and integers will be used:
A hex digit is the representation of a 4 bit string.
A word equals a 32 bit string which may be represented as a sequence of 8 hex digits.
To convert a word to 8 hex digits each 4 bit string is converted to its hex equivalent as described in (a) above.
An integer between 0 and 2^
32 1 inclusive may be represented as a word.
The least significant four bits of the integer are represented by the right most hex digit of the word representation.
the integer 291   2^8 2^5 2^1 2
32 2 1 is represented by the hex word, 00000123.
If z is an integer, 0 <  z < 2^64, then z   (2^32)x
x < 2^32 and 0
and y can be represented as words X and Y, respectively, z can be represented as the pair of words (X,Y).
A block (e.g., B) may be represented as a sequence of 16 words.
bitwise logical "exclusive or" of X and Y. NOT
Y is defined as follows:  words
X and Y represent integers x and y, where 0 <
x < 2^32 and 0
For positive integers n and m, let n mod m be the remainder upon dividing n by m.
Then 0 <  z < 2^32.
Convert z to a word,  Z, and define Z
The circular left shift operation S^n(X), where X is a word and n is an integer with 0 <  n < 32, is defined by S^n(X)
In the above, X << n is obtained as follows: discard the left most n bits of X and then pad the result with n zeroes on the right (the result will still be 32 bits).
> n is obtained by discarding the right most n bits of X and then padding the result with n zeroes on the left.
Thus S^n(X) is equivalent to a circular shift of X by n positions to the left.
Message Padding SHA 1 is used to compute a message digest for a message or data file that is provided as input.
The message or data file should be considered to be a bit string.
The length of the message is the number of bits in the message (the empty message has length 0).
If the number of bits in a message is a multiple of 8, for compactness we can represent the message in hex.
The purpose of message padding is to make the total length of a padded message a multiple of 512.
SHA 1 sequentially processes blocks of 512 bits when computing the message digest.
The following specifies how this padding shall be performed.
As a summary, a "1" followed by m "0"s followed by a 64  bit integer are appended to the end of the message to produce a padded message of length 512   n.
The 64 bit integer is the length of the original message.
The padded message is then processed by the SHA 1 as n 512 bit blocks.
Suppose a message has length l < 2^64.
Before it is input to the SHA 1, the message is padded on the right as follows:
Example: if the original message is "01010000", this is padded to "010100001".
The number of "0"s will depend on the original length of the message.
The last 64 bits of the last 512 bit block are reserved for the length l of the original message.
Suppose the original message is the bit string 01100001 01100010 01100011 01100100 01100101.
this gives 01100001 01100010 01100011 01100100 01100101
Since l   40, the number of bits in the above is 41 and 407 "0"s
are appended, making the total now 448.
Obtain the 2 word representation of l, the number of bits in the original message.
If l < 2^32 then the first word is all zeroes.
Append these two words to the padded message.
: Suppose the original message is as in (b).
(note that l is computed before any padding).
The two word representation of 40 is hex 00000000 00000028.
Hence the final padded message is hex 61626364 65800000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000028.
The padded message will contain 16   n words for some n > 0.
The padded message is regarded as a sequence of n blocks M(1) , M(2), first characters (or bits) of the message.
, 0 <  t <  79, operates on three 32 bit words B, C, D and produces a 32 bit word as output.
f(t;B,C,D) is defined as follows: for words B, C, D, f(t;B,C,D)
0 <  t <  19)
OR (C AND D)  (40 <  t <  59)
In hex these are given by K(t)
(20 <  t <  39) K(t)
(40 <  t <  59) K(t)
(60 <  t <  79).
The methods given in 6.1 and 6.2 below yield the same message digest.
Although using method 2 saves sixty four 32 bit words of storage, it is likely to lengthen execution time due to the increased complexity of the address computations for the { W[t] } in step (c).
There are other computation methods which give identical results.
The message digest is computed using the message padded as described in section 4.
The computation is described using two buffers, each consisting of five 32 bit words, and a sequence of eighty 32 bit words.
The words of the first 5 word buffer are labeled A,B,C,D,
E. The words of the second 5 word buffer are labeled H0, H1, H2, H3, H4.
A single word buffer TEMP is also employed.
The processing of each M(i) involves 80 steps.
Before processing any blocks, the H's are initialized as follows: in hex, H0   67452301
To process M(i), we proceed as follows:
For t   16 to 79 let W(t)
Let A   H0, B   H1, C   H2, D   H3, E   H4.
For t   0 to 79 do
; E   D;  D   C;  C   S^30(B);  B
e. Let H0   H0   A, H1   H1   B,
H2   H2   C, H3   H3   D, H4   H4   E.
After processing M(n), the message digest is the 160 bit string represented by the 5 words H0 H1 H2 H3 H4.
In this case, in hex let MASK
Then processing of M(i) is as follows:
Let A   H0, B   H1, C   H2, D   H3, E   H4.
For t   0 to 79 do
; if (t >  16) W[s]
AND MASK] XOR W[s]); TEMP   S^5(A)   f(t;B,C,D)
E   D; D   C; C   S^30(B); B   A; A   TEMP;
d. Let H0   H0   A, H1   H1   B,
H2   H2   C, H3   H3   D, H4   H4   E. 7.
C Code Below is a demonstration implementation of SHA 1 in C.  Section 7.1 contains the header file, 7.2 the C code, and 7.3 a test driver.
Please read the file sha1.c for more information.
#define  SHA1 H  #include <stdint.h
/  input data too long
This structure will hold context information for the SHA 1    hashing operation
Is the message digest corrupted?
uint8 t  , unsigned int); int SHA1Result(
SHA1Reset(SHA1Context  context) { if (!context)
{ return shaNull; } context
Where the digest is returned.
( SHA1Context  context, uint8 t Message Digest[SHA1HashSize])
{ int i; if (!
{ return shaNull; } if (context Corrupted) { return context Corrupted; } if (!
context Computed) { SHA1PadMessage(context); for(i 0; i<64;  i)
/ context Length High   0
; context Computed   1; } for(i   0; i < SHA1HashSize;  i) { Message Digest[i]   context Intermediate Hash[i>>2] >
length) { return shaSuccess; }
{ return shaNull; } if (context Computed) { context
; return shaStateError; } if (context Corrupted) { return context Corrupted; } while(length
{ context Message Block[context Message Block Index ]
( message array & 0xFF)
; context Length Low    8; if (context Length Low   0) { context Length High ; if (context Length High   0)
D   context Intermediate Hash[3]; E   context Intermediate Hash[4];
K[0]; E   D; D   C; C   SHA1CircularShift(30,B); B   A; A   temp; }
(B ^ C ^ D)
E   D; D   C; C   SHA1CircularShift(30,B); B   A; A   temp; }
(B ^ C ^ D)
The first padding bit must be a '1'.
If so, we will pad the    block, process it, and then continue padding into a second    block.
; context Message Block[59]   context Length High; context Message Block[60]
context Length Low >> 24; context Message Block[61]
The following code is a main program test driver to exercise the code in sha1.c.
"abc" #define TEST2a  "abcdbcdecdefdefgefghfghighijhi" #define TEST2b  "jkijkljklmklmnlmnomnopnopq" #
{ err   SHA1Input(&sha, (const unsigned char  ) testarray[j], strlen(testarray[j]));
SHA1Result(&sha, Message Digest); if (err) {
SHA1Input(&sha,(const unsigned char  ) testarray[1], 1); printf ("\nError %d. Should be %d.\n", err, shaStateError ); err   SHA1Reset(0); printf ("\nError %d. Should be %d.\n", err, shaNull ); return 0; } 8.
Security Considerations This document is intended to provide convenient open source access by the Internet community to the United States of America Federal Information Processing Standard Secure Hash Function SHA 1
No independent assertion of the security of this hash function by the authors for any particular use is intended.
