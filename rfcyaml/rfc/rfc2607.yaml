- title: __initial_text__
  contents:
  - '          Proxy Chaining and Policy Implementation in Roaming

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: 1.  Abstract
  contents:
  - "1.  Abstract\n   This document describes how proxy chaining and policy implementation\n\
    \   can be supported in roaming systems. The mechanisms described in this\n  \
    \ document are in current use.\n   However, as noted in the security considerations\
    \ section, the\n   techniques outlined in this document are vulnerable to attack\
    \ from\n   external parties as well as susceptible to fraud perpetrated by the\n\
    \   roaming partners themselves. As a result, such methods are not\n   suitable\
    \ for wide-scale deployment on the Internet.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document frequently uses the following terms:\n   Network\
    \ Access Server\n      The Network Access Server (NAS) is the device that clients\
    \ contact\n      in order to get access to the network.\n   RADIUS server\n  \
    \    This is a server which provides for authentication/authorization\n      via\
    \ the protocol described in [3], and for accounting as described\n      in [4].\n\
    \   RADIUS proxy\n      In order to provide for the routing of RADIUS authentication\
    \ and\n      accounting requests, a RADIUS proxy can be employed. To the NAS,\n\
    \      the RADIUS proxy appears to act as a RADIUS server, and to the\n      RADIUS\
    \ server, the proxy appears to act as a RADIUS client.\n   Network Access Identifier\n\
    \      In order to provide for the routing of RADIUS authentication and\n    \
    \  accounting requests, the userID field used in PPP (known as the\n      Network\
    \ Access Identifier or NAI) and in the subsequent RADIUS\n      authentication\
    \ and accounting requests, can contain structure.\n      This structure provides\
    \ a means by which the RADIUS proxy will\n      locate the RADIUS server that\
    \ is to receive the request. The NAI\n      is defined in [6].\n   Roaming relationships\n\
    \      Roaming relationships include relationships between companies and\n   \
    \   ISPs, relationships among peer ISPs within a roaming association,\n      and\
    \ relationships between an ISP and a roaming consortia.\n      Together, the set\
    \ of relationships forming a path between a local\n      ISP's authentication\
    \ proxy and the home authentication server is\n      known as the roaming relationship\
    \ path.\n"
- title: 3.  Requirements language
  contents:
  - "3.  Requirements language\n   In this document, the key words \"MAY\", \"MUST,\
    \ \"MUST NOT\", \"optional\",\n   \"recommended\", \"SHOULD\", and \"SHOULD NOT\"\
    , are to be interpreted as\n   described in [5].\n"
- title: 4.  Introduction
  contents:
  - "4.  Introduction\n   Today, as described in [1], proxy chaining is widely deployed\
    \ for the\n   purposes of providing roaming services. In such systems,\n   authentication/authorization\
    \ and accounting packets are routed\n   between a NAS device and a home server\
    \ through a series of proxies.\n   Consultation of the home server is required\
    \ for password-based\n   authentication, since the home server maintains the password\
    \ database\n   and thus it is necessary for the NAS to communicate with the home\n\
    \   authentication server in order to verify the user's identity.\n"
- title: 4.1.  Advantages of proxy chaining
  contents:
  - "4.1.  Advantages of proxy chaining\n   Proxies serve a number of functions in\
    \ roaming, including:\n   Scalability improvement\n   Authentication forwarding\n\
    \   Capabilities adjustment\n   Policy implementation\n   Accounting reliability\
    \ improvement\n   Atomic operation\n   Scalability improvement\n      In large\
    \ scale roaming systems, it is necessary to provide for\n      scalable management\
    \ of keys used for integrity protection and\n      authentication.\n      Proxy\
    \ chaining enables implementation of hierarchical\n      forwarding within roaming\
    \ systems, which improves scalability\n      in roaming consortia based on authentication\
    \ protocols without\n      automated key management.  Since RADIUS as described\
    \ in [3]\n      requires a shared secret for each client-server pair, a\n    \
    \  consortium of 100 roaming partners would require 4950 shared\n      secrets\
    \ if each partner were to contact each other directly,\n      one for each partner\
    \ pair.  However, were the partners to\n      route authentication requests through\
    \ a central proxy, only\n      100 shared secrets would be needed, one for each\
    \ partner. The\n      reduction in the number of partner pairs also brings with\
    \ it\n      other benefits, such as a reduction in the number of bilateral\n \
    \     agreements and accounting and auditing overhead.  Thus,\n      hierarchical\
    \ routing might be desirable even if an\n      authentiation protocol supporting\
    \ automated key exchange were\n      available.\n   Capabilities adjustment\n\
    \      As part of the authentication exchange with the home server,\n      the\
    \ NAS receives authorization parameters describing the\n      service to be provided\
    \ to the roaming user.  Since RADIUS,\n      described in [3], does not support\
    \ capabilities negotiation,\n      it is possible that the authorization parameters\
    \ sent by the\n      home server will not match those required by the NAS. For\n\
    \      example, a static IP address could be specified that would not\n      be\
    \ routable by the NAS. As a result, capbilities adjustment is\n      performed\
    \ by proxies in order to enable communication between\n      NASes and home servers\
    \ with very different feature sets.\n      As part of capabilities adjustment,\
    \ proxies can edit\n      attributes within the Access-Accept in order to ensure\n\
    \      compatibility with the NAS.  Such editing may include\n      addition,\
    \ deletion, or modification of attributes. In\n      addition, in some cases it\
    \ may be desirable for a proxy to\n      edit attributes within an Access-Request\
    \ in order to clean up\n      or even hide information destined for the home server.\
    \  Note\n      that if the proxy edits attributes within the Access-Accept,\n\
    \      then it is possible that the service provided to the user may\n      not\
    \ be the same as that requested by the home server. This\n      creates the possibility\
    \ of disputes arising from inappropriate\n      capabilities adjustment.\n   \
    \   Note that were roaming to be implemented based on an\n      authentication/authorization\
    \ protocol with built-in capability\n      negotiation, proxy-based capabilities\
    \ adjustment would\n      probably not be necessary.\n   Authentication forwarding\n\
    \      Since roaming associations frequently implement hierarchical\n      forwarding\
    \ in order to improve scalability, in order for a NAS\n      and home server to\
    \ communicate, authentication and accounting\n      packets are forwarded by one\
    \ or more proxies. The path\n      travelled by these packets, known as the roaming\
    \ relationship\n      path, is determined from the Network Access Identifier (NAI),\n\
    \      described in [6]. Since most NAS devices do not implement\n      forwarding\
    \ logic, a proxy is needed to enable forwarding of\n      authentication and accounting\
    \ packets. For reasons that are\n      described in the security section, in proxy\
    \ systems it is\n      desirable for accounting and authentication packets to\
    \ follow\n      the same path.\n      Note: The way a proxy learns the mapping\
    \ between NAI and the\n      home server is  beyond  the  scope  of this document.\
    \ This\n      mapping can be accomplished by static configuration in the\n   \
    \   proxy, or by some currently undefined protocol that provides\n      for dynamic\
    \ mapping. For the purposes of this document, it is\n      assumed that such a\
    \ mapping capability exists in the proxy.\n   Policy implementation\n      In\
    \ roaming systems it is often desirable to be able to\n      implement policy.\
    \ For example, a given partner may only be\n      entitled to use of a given NAS\
    \ during certain times of the\n      day. In order to implement such policies,\
    \ proxies may be\n      implemented at the interface between administrative domains\n\
    \      and programmed to modify authentication/authorization packets\n      forwarded\
    \ between the NAS and the home server. As a result,\n      from a security point\
    \ of view, a proxy implementing policy\n      operates as a \"man in the middle.\"\
    \n   Accounting reliability improvement\n      In roaming systems based on proxy\
    \ chaining, it is necessary\n      for accounting information to be forwarded\
    \ between the NAS and\n      the home server. Thus roaming is inherently an interdomain\n\
    \      application.\n      This represents a problem since the RADIUS accounting\n\
    \      protocol, described in [4] is not designed for use on an\n      Internet\
    \ scale.  Given that in roaming accounting packets\n      travel between administrative\
    \ domains, packets will often pass\n      through network access points (NAPs)\
    \ where packet loss may be\n      substantial. This can result in unacceptable\
    \ rates of\n      accounting data loss.\n      For example, in a proxy chaining\
    \ system involving four\n      systems, a one percent failure rate on each hop\
    \ can result in\n      loss of 3.9 percent of all accounting transactions. Placement\n\
    \      of an accounting proxy near the NAS may improve reliability by\n      enabling\
    \ enabling persistent storage of accounting records and\n      long duration retry.\n\
    \   Atomic operation\n      In order to ensure consistency among all parties required\
    \ to\n      process accounting data, it can be desirable to assure that\n    \
    \  transmission of accounting data is handled as an atomic\n      operation. This\
    \ implies that all parties on the roaming\n      relationship path will receive\
    \ and acknowledge the receipt of\n      the accounting data for the operation\
    \ to complete. Proxies can\n      be used to ensure atomic delivery of accounting\
    \ data by\n      arranging for delivery of the accounting data in a serial\n \
    \     fashion, as discussed in section 5.2.\n"
- title: 5.  Proxy chaining
  contents:
  - "5.  Proxy chaining\n   An example of a proxy chaining system is shown below.\n\
    \         (request)          (request)          (request)\n     NAS ---------->\
    \ Proxy1 ----------> Proxy2 ----------> Home\n         (reply)            (reply)\
    \            (reply)     Server\n         <---------         <---------      \
    \   <---------\n   In the above diagram, the NAS generates a request and sends\
    \ it to\n   Proxy1.  Proxy1 forwards the request to Proxy2 and Proxy2 forwards\n\
    \   the request to the Home Server.  The Home Server generates a reply\n   and\
    \ sends it to Proxy2.  Proxy2 receives the reply, matches it with\n   the request\
    \ it had sent, and forwards a reply to Proxy1. Proxy1\n   matches the reply with\
    \ the request it sent earlier and forwards a\n   reply to the NAS.  This model\
    \ applies to all requests, including\n   Access Requests and Accounting Requests.\n\
    \   Except for the two cases described below, a proxy server such as\n   Proxy2\
    \ in the diagram above SHOULD NOT send a Reply packet to Proxy1\n   without first\
    \ having received a Reply packet initiated by the Home\n   Server.  The two exceptions\
    \ are when the proxy is enforcing policy as\n   described in section 5.1 and when\
    \ the proxy is acting as an\n   accounting store (as in store and forward), as\
    \ described in section\n   5.2.\n   The RADIUS protocol described in [3] does\
    \ not provide for end-to-end\n   security services, including integrity or replay\
    \ protection,\n   authentication or confidentiality. As noted in the security\n\
    \   considerations section, this omission results in several security\n   problems\
    \ within proxy chaining systems.\n"
- title: 5.1.  Policy implementation
  contents:
  - "5.1.  Policy implementation\n   Proxies are frequently used to implement policy\
    \ in roaming\n   situations.  Proxies implementing policy MAY reply directly to\n\
    \   Access-Requests without forwarding the request. When replying\n   directly\
    \ to an Access-Request, the proxy MUST reply either with an\n   Access-Reject\
    \ or an Access-Challenge packet. A proxy MUST NOT reply\n   directly with an Access-Accept.\
    \  An example of this would be when the\n   proxy refuses all connections from\
    \ a particular realm during prime\n   time. In this case the home server will\
    \ never receive th Access-\n   Request.  This situation is shown below:\n    \
    \     (request)          (request)\n     NAS ----------> Proxy1 ----------> Proxy2\
    \             Home\n         (reply)            (reply)                      \
    \  Server\n         <---------         <---------\n   A proxy MAY also decide\
    \ to Reject a Request that has been accepted by\n   the home server.  This could\
    \ be based on the set of attributes\n   returned by the home server.  In this\
    \ case the Proxy SHOULD send an\n   Access-Reject to the NAS and an Accounting-Request\
    \ with Acct-Status-\n   Type=Proxy-Stop (6) to the home server.  This lets the\
    \ home server\n   know that the session it approved has been denied downstream\
    \ by the\n   proxy.  However, a proxy MUST NOT send an Access-Accept after\n \
    \  receiving an Access-Reject from a proxy or from the home server.\n        \
    \ (Access-Req)       (Access-Req)       (Access-Req)\n     NAS ----------> Proxy1\
    \ ----------> Proxy2 ---------->     Home\n         (Access-Reject)    (Access-Accept)\
    \    (Access-Accept) Server\n         <---------         <---------         <---------\n\
    \                            (AcctPxStop)       (AcctPxStop)\n               \
    \             ---------->        ---------->\n"
- title: 5.2.  Accounting behavior
  contents:
  - "5.2.  Accounting behavior\n   As described above, a proxy MUST NOT reply directly\
    \ with an Access-\n   Accept, and MUST NOT reply with an Access-Accept when it\
    \ has received\n   an Access-Reject from another proxy or Home Server. As a result,\
    \ in\n   all cases where an accounting record is to be generated (accepted\n \
    \  sessions), no direct replies have occurred, and the Access-Request\n   and\
    \ Access-Accept have passed through the same set of systems.\n   In order to allow\
    \ proxies to match incoming Accounting-Requests with\n   previously handled Access-Requests\
    \ and Access-Accepts, a proxy SHOULD\n   route the Accounting-Request along the\
    \ same realm path travelled in\n   authentication/authorization.  Note that this\
    \ does not imply that\n   accounting packets will necessarily travel the identical\
    \ path,\n   machine by machine, as did authentication/authorization packets.\n\
    \   This is because it is conceivable that a proxy may have gone down,\n   and\
    \ as a result the Accounting-request may need to be forwarded to an\n   alternate\
    \ server. It is also conceivable that\n   authentication/authorization and accounting\
    \ may be handled by\n   different servers within a realm.\n   The Class attribute\
    \ can be used to match Accounting Requests with\n   prior Access Requests.  It\
    \ can also be used to match session log\n   records between the home Server, proxies,\
    \ and NAS. This matching can\n   be accomplished either in real-time (in the case\
    \ that authentication\n   and accounting packets follow the same path, machine\
    \ by machine), or\n   after the fact.\n   Home servers SHOULD insert a unique\
    \ session identifier in the Class\n   attribute in an Access-Accept and Access-Challenge.\
    \  Proxies and\n   NASes MUST forward the unmodified Class attribute.  The NAS\
    \ MUST\n   include the Class attribute in subsequent requests, in particular for\n\
    \   Accounting-Requests. The sequence of events is shown below:\n            \
    \          Authentication/Authorization\n      -------->         -------->   \
    \       --------->\n NAS            Proxy1              Proxy2             Home\
    \ (add class)\n     <-class--          <-class-           <-class--\n        \
    \                       Accounting\n     (Accounting-req)   (Accounting-req) \
    \ (Accounting-req)\n         w/class           w/class            w/class\n  NAS\
    \ ----------> Proxy1 ----------> Proxy2 ---------->       Home\n      (Accounting-reply)\
    \ (Accounting-reply)(Accounting-reply) Server\n      <---------         <---------\
    \         <---------\n   Since there is no need to implement policy in accounting,\
    \ a proxy\n   MUST forward all Accounting Requests to the next server on the path.\n\
    \   The proxy MUST guarantee that the Accounting Request is received by\n   the\
    \ End Server and all intermediate servers.  The proxy may do this\n   either by:\
    \ 1) forwarding the Accounting Request and not sending a\n   Reply until it receives\
    \ the matching Reply from the upstream server,\n   or 2) acting as a store point\
    \ which takes responsibility for\n   reforwarding the Accounting Request until\
    \ it receives a Reply.\n   Note that when the proxy does not send a reply until\
    \ it receives a\n   matching reply, this ensures that Accounting Start and Stop\
    \ messages\n   are received and can be logged by all servers along the roaming\n\
    \   relationship path. If one of the servers is not available, then the\n   operation\
    \ will fail. As a result the entire accounting transaction\n   will either succeed\
    \ or fail as a unit, and thus can be said to be\n   atomic.\n   Where store and\
    \ forward is implemented, it is possible that one or\n   more servers along the\
    \ roaming relationship path will not receive the\n   accounting data while others\
    \ will. The accounting operation will not\n   succeed or fail as a unit, and is\
    \ therefore not atomic.  As a result,\n   it may not be possible for the roaming\
    \ partners to reconcile their\n   audit logs, opening new opportunities for fraud.\
    \  Where store and\n   forward is implemented, forwarding of Accounting Requests\
    \ SHOULD be\n   done as they are received so the downstream servers will receive\
    \ them\n   in a timely way.\n   Note that there are cases where a proxy will need\
    \ to forward an\n   Accounting packet to more than one system. For example, in\
    \ order to\n   allow for proper accounting in the case of a NAS that is shutting\n\
    \   down, the proxy can send an Accounting-Request with Acct-Status-\n   Type=Accounting-Off\
    \ (8) to all realms that it forwards to.  In turn,\n   these proxies will also\
    \ flood the packet to their connected realms.\n"
- title: 6.  References
  contents:
  - "6.  References\n   [1]  Aboba, B., Lu J., Alsop J., Ding J. and W. Wang, \"Review\
    \ of\n        Roaming Implementations\", RFC 2194, September 1997.\n   [2]  Aboba,\
    \ B. and G. Zorn, \"Criteria for Evaluating Roaming\n        Protocols\", RFC\
    \ 2477, January 1999.\n   [3]  Rigney, C., Rubens, A., Simpson, W. and S. Willens,\
    \ \"Remote\n        Authentication Dial In User Service (RADIUS)\", RFC 2138,\
    \ April\n        1997.\n   [4]  Rigney, C., \"RADIUS  Accounting\", RFC 2139,\
    \ April 1997.\n   [5]  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n\
    \        Levels\", BCP 14, RFC 2119, March 1997.\n   [6]  Aboba, B. and M. Beadles,\
    \ \"The Network Access Identifier\", RFC\n        2486, January 1999.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The RADIUS protocol described in [3] was designed\
    \ for intra-domain\n   use, where the NAS, proxy, and home server exist within\
    \ a single\n   administrative domain, and proxies may be considered a trusted\n\
    \   component. However, in roaming the NAS, proxies, and home server will\n  \
    \ typically be managed by different administrative entities. As a\n   result,\
    \ roaming is inherently an inter-domain application, and\n   proxies cannot necessarily\
    \ be trusted.  This results in a number of\n   security threats, including:\n\
    \      Message editing\n      Attribute editing\n      Theft of passwords\n  \
    \    Theft and modification of accounting data\n      Replay attacks\n      Connection\
    \ hijacking\n      Fraudulent accounting\n"
- title: 7.1.  Message editing
  contents:
  - "7.1.  Message editing\n   Through the use of shared secrets it is possible for\
    \ proxies\n   operating in different domains to establish a trust relationship.\n\
    \   However, if only hop-by-hop security is available then untrusted\n   proxies\
    \ are capable of perpetrating a number of man-in-the-middle\n   attacks.  These\
    \ include modification of messages.\n   For example, an Access-Accept could be\
    \ substituted for an Access-\n   Reject, and without end-to-end integrity protection,\
    \ there is no way\n   for the NAS to detect this. On the home server, this will\
    \ result in\n   an accounting log entry for a session that was not authorized.\n\
    \   However, if the proxy does not forward accounting packets or session\n   records\
    \ to the home server, then the home server will not be able to\n   detect the\
    \ discrepancy until a bill is received and audited.\n   Note that a proxy can\
    \ also send an Access-Reject to the NAS after\n   receiving an Access-Accept from\
    \ the home server. This will result in\n   an authentication log entry without\
    \ a corresponding accounting log\n   entry.  Without the proxy sending an Accounting-Request\
    \ with Acct-\n   Status-Type=Proxy-Stop (6) to the home server, then there will\
    \ be no\n   way for the home server to determine whether the discrepancy is due\n\
    \   to policy implementation or loss of accounting packets.  Thus the use\n  \
    \ of Acct-Status-Type=Proxy-Stop can be of value in debugging roaming\n   systems.\n\
    \   It should be noted that even if end-to-end security were to be\n   available,\
    \ a number of sticky questions would remain. While the end-\n   points would be\
    \ able to detect that the message from the home server\n   had been modified by\
    \ an intermediary, the question arises as to what\n   action should be taken.\
    \ While the modified packet could be silently\n   discarded, this could affect\
    \ the ability of the home server to .\n   accept an Acct-Status-Type=Proxy-Stop\
    \ message from an intermediate\n   proxy. Since this message would not be signed\
    \ by the NAS, it may need\n   to be dropped by the home server.\n   This is similar\
    \ to the problem that IPSEC-capable systems face in\n   making use of ICMP messages\
    \ from systems with whom they do not have a\n   security association. The problem\
    \ is more difficult here, since in\n   RADIUS retransmission is driven by the\
    \ NAS.  Therefore the home\n   server does not receive acknowledgement for Access-Accepts\
    \ and thus\n   would have no way of knowing that its response has not been honored.\n"
- title: 7.2.  Attribute editing
  contents:
  - "7.2.  Attribute editing\n   RADIUS as defined in [3] does not provide for end-to-end\
    \ security or\n   capabilities negotiation. As a result there is no way for a\
    \ home\n   server to securely negotiate a mutually acceptable configuration with\n\
    \   the NAS or proxies. As a result, a number of attribute editing\n   attacks\
    \ are possible.\n   For example, EAP attributes might be removed or modified so\
    \ as to\n   cause a client to authenticate with EAP MD5 or PAP, instead of a\n\
    \   stronger authentication method. Alternatively, tunnel attributes\n   might\
    \ be removed or modified so as to remove encryption, redirect the\n   tunnel to\
    \ a rogue tunnel server, or otherwise lessen the security\n   provided to the\
    \ client.  The mismatch between requested and received\n   services may only be\
    \ detectable after the fact by comparing the\n   Access-Accept attributes against\
    \ the attributes included in the\n   Accounting-Request. However, without end-to-end\
    \ security services, it\n   is possible for a rogue proxy to cover its tracks.\n\
    \   Due to the complexity of proxy configuration, such attacks need not\n   involve\
    \ malice, but can occur due to mis-configuration or\n   implementation deficiencies.\
    \  Today several proxy implementations\n   remove attributes that they do not\
    \ understand, or can be set up to\n   replace attribute sets sent in the Access-Accept\
    \ with sets of\n   attributes appropriate for a particular NAS.\n   In practice,\
    \ it is not possible to define a set of guidelines for\n   attribute editing,\
    \ since the requirements are very often\n   implementation-specific. At the same\
    \ time, protection against\n   inappropriate attribute editing is necessary to\
    \ guard against attacks\n   and provide assurance that users are provisioned as\
    \ directed by the\n   home server.\n   Since it is not possible to determine beforehand\
    \ whether a given\n   attribute is editable or not, a mechanism needs to be provided\
    \ to\n   allow senders to indicate which attributes are editable and which are\n\
    \   not, and for the receivers to detect modifications of \"non-editable\"\n \
    \  attributes.  Through implementation of end-to-end security it may be\n   possible\
    \ to detect unauthorized addition, deletion, or modification\n   of integrity-protected\
    \ attributes. However, it would still possible\n   for a rogue proxy to add, delete\
    \ or modify attributes that are not\n   integrity-protected. If such attributes\
    \ influence subsequent charges,\n   then the possibility of fraud would remain.\n"
- title: 7.3.  Theft of passwords
  contents:
  - "7.3.  Theft of passwords\n   RADIUS as defined in [3] does not provide for end-to-end\n\
    \   confidentiality. As a result, where clients authenticate using PAP,\n   each\
    \ proxy along the path between the local NAS and the home server\n   will have\
    \ access to the cleartext password. In many circumstances,\n   this represents\
    \ an unacceptable security risk.\n"
- title: 7.4.  Theft and modification of accounting data
  contents:
  - "7.4.  Theft and modification of accounting data\n   Typically in roaming systems,\
    \ accounting packets are provided to all\n   the participants along the roaming\
    \ relationship path, in order to\n   allow them to audit subsequent invoices.\
    \ RADIUS as described in [3]\n   does not provide for end-to-end security services,\
    \ including\n   integrity protection or confidentiality. Without end-to-end integrity\n\
    \   protection, it is possible for proxies to modify accounting packets\n   or\
    \ session records.  Without end-to-end confidentiality, accounting\n   data will\
    \ be accessible to proxies.  However, if the objective is\n   merely to prevent\
    \ snooping of accounting data on the wire, then IPSEC\n   ESP can be used.\n"
- title: 7.5.  Replay attacks
  contents:
  - "7.5.  Replay attacks\n   In this attack, a man in the middle or rogue proxy collects\
    \ CHAP-\n   Challenge and CHAP-Response attributes, and later replays them. If\n\
    \   this attack is performed in collaboration with an unscrupulous ISP,\n   it\
    \ can be used to subsequently submit fraudulent accounting records\n   for payment.\
    \  The system performing the replay need not necessarily\n   be the one that initially\
    \ captured the CHAP Challenge/Response pair.\n   While RADIUS as described in\
    \ [3] is vulnerable to replay attacks,\n   without roaming the threat is restricted\
    \ to proxies operating in the\n   home server's domain. With roaming, such an\
    \ attack can be mounted by\n   any proxy capable of reaching the home server.\n"
- title: 7.6.  Connection hijacking
  contents:
  - "7.6.  Connection hijacking\n   In this form of attack, the attacker attempts\
    \ to inject packets into\n   the conversation between the NAS and the home server.\
    \ RADIUS as\n   described in [3] is vulnerable to such attacks since only Access-\n\
    \   Reply and Access-Challenge packets are authenticated.\n"
- title: 7.7.  Fraudulent accounting
  contents:
  - "7.7.  Fraudulent accounting\n   In this form of attack, a local proxy transmits\
    \ fraudulent accounting\n   packets or session records in an effort to collect\
    \ fees to which they\n   are not entitled. This includes submission of packets\
    \ or session\n   records for non-existent sessions. Since in RADIUS as described\
    \ in\n   [3], there is no end-to-end security, a rogue proxy may insert or\n \
    \  edit packets without fear of detection.\n   In order to detect submissions\
    \ of accounting packets or session\n   records for non-existent sessions, parties\
    \ receiving accounting\n   packets or session records would be prudent to reconcile\
    \ them with\n   the authentication logs. Such reconciliation is only typically\n\
    \   possible when the party acts as an authentication proxy for all\n   sessions\
    \ for which an accounting record will subsequently be\n   submitted.\n   In order\
    \ to make reconciliation easier, home servers involved in\n   roaming include\
    \ a Class attribute in the Access-Accept.  The Class\n   attribute uniquely identifies\
    \ a session, so as to allow an\n   authentication log entry to be matched with\
    \ a corresponding\n   accounting packet or session record.\n   If reconciliation\
    \ is put in place and all accounting log entries\n   without a corresponding authentication\
    \ are rejected, then the\n   attacker will need to have obtained a valid user\
    \ password prior to\n   submitting accounting packets or session records on non-existent\n\
    \   sessions. While use of end-to-end security can defeat unauthorized\n   injection\
    \ or editing of accounting or authentication packets by\n   intermediate proxies,\
    \ other attacks remain feasible. For example,\n   unless replay protection is\
    \ put in place, it is still feasible for an\n   intermediate proxy to resubmit\
    \ authentication or accounting packets\n   or session records. In addition, end-to-end\
    \ security does not provide\n   protection against attacks by the local proxy,\
    \ since this is\n   typically where end-to-end security will be initiated. To\
    \ detect such\n   attacks, other measures need to be put in place, such as systems\
    \ for\n   detecting unusual activity of ISP or user accounts, or for\n   determining\
    \ whether a user or ISP account is within their credit\n   limit.\n   Note that\
    \ implementation of the store and forward approach to proxy\n   accounting makes\
    \ it possible for some systems in the roaming\n   relationship path to receive\
    \ accounting records that other systems do\n   not get. This can result in audit\
    \ discrepancies. About the best that\n   is achievable in such cases is to verify\
    \ that the accounting data is\n   missing by checking against the authentication\
    \ logs.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   Thanks to Pat Calhoun of Sun Microsystems, Mark Beadles\
    \ of\n   CompuServe, Aydin Edguer of Morningstar, Bill Bulley of Merit, and\n\
    \   Steven P. Crain of Shore.Net for useful discussions of this problem\n   space.\n"
- title: 9.  Authors' Addresses
  contents:
  - "9.  Authors' Addresses\n   Bernard Aboba\n   Microsoft Corporation\n   One Microsoft\
    \ Way\n   Redmond, WA 98052\n   Phone: 425-936-6605\n   EMail: bernarda@microsoft.com\n\
    \   John R. Vollbrecht\n   Merit Network, Inc.\n   4251 Plymouth Rd.\n   Ann Arbor,\
    \ MI 48105-2785\n   Phone: 313-763-1206\n   EMail: jrv@merit.edu\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
