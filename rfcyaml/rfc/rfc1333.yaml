- title: __initial_text__
  contents:
  - '                      PPP Link Quality Monitoring

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for\
    \ the Internet\n   community, and requests discussion and suggestions for improvements.\n\
    \   Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method\
    \ of\n   encapsulating Network Layer protocol information over point-to-point\n\
    \   links.  PPP also defines an extensible Link Control Protocol, which\n   allows\
    \ negotiation of a Quality Protocol for continuous monitoring of\n   the viability\
    \ of the link.\n   This document defines a protocol for generating Link-Quality-Reports.\n\
    \   This RFC is a product of the Point-to-Point Protocol Working Group of\n  \
    \ the Internet Engineering Task Force (IETF).  Comments on this memo\n   should\
    \ be submitted to the ietf-ppp@ucdavis.edu mailing list.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n     1.     Introduction ..........................................\
    \    1\n     2.     Link Quality Monitoring ...............................  \
    \  2\n        2.1       Design Motivation ...............................    2\n\
    \        2.2       Counters ........................................    2\n  \
    \      2.3       Counting Packets and Octets .....................    4\n    \
    \    2.4       Processes .......................................    4\n      \
    \  2.5       Configuration Option Format .....................    6\n        2.6\
    \       Packet Format ...................................    8\n        2.7  \
    \     Transmission of Reports .........................   12\n        2.8    \
    \   Calculations ....................................   12\n        2.9      \
    \ Failure Detection ...............................   13\n        2.10      Policy\
    \ Suggestions ..............................   14\n     SECURITY CONSIDERATIONS\
    \ ......................................   14\n     REFERENCES ...................................................\
    \   14\n     ACKNOWLEDGEMENTS .............................................  \
    \ 14\n     CHAIR'S ADDRESS ..............................................   15\n\
    \     AUTHOR'S ADDRESS .............................................   15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   PPP has three main components:\n      1. A method for encapsulating\
    \ datagrams over serial links.\n      2. A Link Control Protocol (LCP) for establishing,\
    \ configuring,\n         and testing the data-link connection.\n      3. A family\
    \ of Network Control Protocols (NCPs) for establishing\n         and configuring\
    \ different network-layer protocols.\n   In order to establish communications\
    \ over a point-to-point link, each\n   end of the PPP link must first send LCP\
    \ packets to configure the data\n   link during the Establishment phase.  During\
    \ the Authentication and\n   Network-Layer Protocol phases, the link may be tested\
    \ to determine if\n   quality is sufficient for operation.  This testing is completely\n\
    \   optional.\n   If an implementation desires that the peer use some specific\
    \ link\n   quality monitoring protocol, then it MUST negotiate the use of that\n\
    \   protocol using the Quality-Protocol Configuration Option during Link\n   Establishment\
    \ phase.\n   The negotiation mechanism is independent in each direction.  However,\n\
    \   if the peer agrees to send Quality-Protocol packets, it MUST\n   correctly\
    \ process such packets on reception, even if it does not\n   request such packets\
    \ or implement a monitoring policy.\n"
- title: 2.  Link Quality Monitoring
  contents:
  - "2.  Link Quality Monitoring\n   Data communications links are rarely perfect.\
    \  Packets can be dropped\n   or corrupted for various reasons (line noise, equipment\
    \ failure,\n   buffer overruns, etc.).  Sometimes, it is desirable to determine\n\
    \   when, and how often, the link is dropping data.  Routers, for\n   example,\
    \ may want to temporarily allow another route to take\n   precedence.  An implementation\
    \ may also have the option of\n   disconnecting and switching to an alternate\
    \ link.  The process of\n   determining data loss is called \"Link Quality Monitoring\"\
    .\n"
- title: 2.1.  Design Motivation
  contents:
  - "2.1.  Design Motivation\n   There are many different ways to measure link quality,\
    \ and even more\n   ways to react to it.  Rather than specifying a single scheme,\
    \ Link\n   Quality Monitoring is divided into a \"mechanism\" and a \"policy\"\
    .  PPP\n   fully specifies the \"mechanism\" for Link Quality Monitoring by\n\
    \   defining the Link-Quality-Report (LQR) packet and specifying a\n   procedure\
    \ for its use.  PPP does NOT specify a Link Quality\n   Monitoring \"policy\"\
    \ -- how to judge link quality or what to do when\n   it is inadequate.  That\
    \ is left as an implementation decision, and\n   can be different at each end\
    \ of the link.  Implementations are\n   allowed, and even encouraged, to experiment\
    \ with various link quality\n   policies.  The Link Quality Monitoring mechanism\
    \ specification\n   insures that two implementations with different policies may\n\
    \   communicate and interoperate.\n   To allow flexible policies to be implemented,\
    \ the PPP Link Quality\n   Monitoring mechanism measures data loss in units of\
    \ packets, octets,\n   and Link-Quality-Reports.  Each measurement is made separately\
    \ for\n   each half of the link, both inbound and outbound.  All measurements\n\
    \   are communicated to both ends of the link so that each end of the\n   link\
    \ can implement its own link quality policy for both its outbound\n   and inbound\
    \ links.\n   Finally, the Link Quality Monitoring protocol is designed to be\n\
    \   implementable on many different kinds of systems.  Although it may be\n  \
    \ common to implement PPP (and especially Link Quality Monitoring) as a\n   single\
    \ software process, multi-process implementations with hardware\n   support are\
    \ also envisioned.  The PPP Link Quality Monitoring\n   mechanism provides for\
    \ this by careful definition of the Link-\n   Quality-Report packet format, and\
    \ by specifying reference points for\n   all data transmission and reception measurements.\n"
- title: 2.2.  Counters
  contents:
  - "2.2.  Counters\n   Each Link Quality Monitoring implementation maintains counts\
    \ of the\n   number of packets and octets transmitted and successfully received,\n\
    \   and periodically transmits this information to its peer in a Link-\n   Quality-Report\
    \ packet.\n   These counters are similar to sequence numbers; they are constantly\n\
    \   increasing to give a \"relative\" indication of the number of packets\n  \
    \ and octets communicated across the outbound link.  By comparing the\n   values\
    \ in successive Link-Quality-Reports, an LQR receiver can\n   compute the \"delta\"\
    \ number of packets and octets successfully\n   communicated across the link.\
    \  Comparing these absolute numbers then\n   gives an indication of a link's quality.\
    \  Relative numbers, rather\n   than absolute, are transmitted because they greatly\
    \ simplify link\n   synchronization.\n   The Link-Quality-Report uses the Interface\
    \ counters defined by SNMP\n   MIB-II [2].  These counters are not initialized\
    \ to any particular\n   value when the LCP enters the Establishment phase.\n \
    \  In addition, the Link-Quality-Report requires the implementation of\n   the\
    \ following three unsigned, monotonically increasing counters which\n   conform\
    \ to the type and size requirements for SNMP MIB Counters [3].\n   OutLQRs\n \
    \     OutLQRs is a 32-bit counter which increases by one for each\n      tranmitted\
    \ Link-Quality-Report packet.  This counter MUST be set\n      to zero when the\
    \ LCP enters the Establishment phase, and MUST NOT\n      be reset until the LCP\
    \ leaves the Termination phase.  This counter\n      is incremented before it\
    \ is inserted into the LQR packet.\n   InLQRs\n      InLQRs is a 32-bit counter\
    \ which increases by one for each\n      received Link-Quality-Report packet.\
    \  This counter MUST be set to\n      zero when the LCP enters the Establishment\
    \ phase, and MUST NOT be\n      reset until the LCP leaves the Termination phase.\
    \  This counter is\n      incremented before it is inserted (in an implementation\
    \ dependent\n      fashion) into the LQR packet.\n   InGoodOctets\n      InGoodOctets\
    \ is a 32-bit counter which increases by the number of\n      octets in each successfully\
    \ received Data Link Layer packet.\n      Unlike the MIB ifInOctets, octets for\
    \ frames which are counted in\n      ifInDiscards and ifInErrors MUST NOT be counted.\
    \  This counter MAY\n      be set to any initial value when the LCP enters the\
    \ Establishment\n      phase, but MUST NOT be reset until the LCP leaves the Termination\n\
    \      phase.\n"
- title: 2.3.  Counting Packets and Octets
  contents:
  - "2.3.  Counting Packets and Octets\n   The intent of the counters is to provide\
    \ an indication of the amount\n   of information passing over the link, rather\
    \ than an actual\n   measurement of the total bandwidth used.  This specification\
    \ is\n   designed to yield the same count in various circumstances, such as\n\
    \   when a separate device provides the framing and escaping mechanisms\n   invisibly\
    \ to the implementation, or a synchronous-to-asynchronous\n   converter in the\
    \ link changes between mechanisms.\n   All octets which are included in the FCS\
    \ calculation MUST be counted,\n   including the packet header, the information\
    \ field, and any padding.\n   The FCS octets MUST also be counted, and one flag\
    \ octet per frame\n   MUST be counted.  All other octets (such as additional flag\n\
    \   sequences, and escape bits or octets) MUST NOT be counted.\n   When inserting\
    \ the packet and octet counts in the LQR, the counts\n   MUST include the expected\
    \ values for the LQR itself.\n"
- title: 2.4.  Processes
  contents:
  - "2.4.  Processes\n   The PPP Link Quality Monitoring mechanism is described using\
    \ a\n   \"logical process\" model.  As shown below, there are five logical\n \
    \  processes duplicated at each end of the duplex link.\n   +---------+   +-------+\
    \   +----+ Outbound\n   |         |-->|  Mux  |-->| Tx |=========>\n   | Link-\
    \   |   +-------+   +----+\n   | Manager |\n   |         |   +-------+   +----+\
    \ Inbound\n   |         |<--| Demux |<--| Rx |<=========\n   +---------+   +-------+\
    \   +----+\n   Link-Manager\n      The Link-Manager process transmits and receives\
    \ Link-Quality-\n      Reports, and implements the desired link quality policy.\
    \  LQR\n      packets are transmitted at a constant rate, which is negotiated\
    \ by\n      the LCP Quality-Protocol Configuration Option.\n   Mux\n      The\
    \ Mux process multiplexes packets from the various protocols\n      (e.g., LCP,\
    \ IP, XNS, etc.) into a single, sequential, and\n      prioritized stream of packets.\
    \  Link-Quality-Report packets MUST\n      be given the highest possible priority\
    \ to insure that link quality\n      information is communicated in a timely manner.\n\
    \   Tx\n      The Tx process maintains the MIB counters ifOutUniPackets and\n\
    \      ifOutOctets, and the internal counter OutLQRs, which are used to\n    \
    \  measure the amount of data which is transmitted on the outbound\n      link.\
    \  When Tx processes a Link-Quality-Report packet, it inserts\n      the values\
    \ of these counters into the corresponding PeerOut...\n      fields of the packet.\
    \  The Tx process MUST follow the Mux process\n      so that packets are counted\
    \ in the order transmitted to the link.\n   Rx\n      The Rx process maintains\
    \ the MIB counters ifInUniPackets,\n      ifInDiscards, ifInErrors and IfInOctets,\
    \ and the internal counters\n      InLQRs and InGoodOctets, which are used to\
    \ measure the amount of\n      data which is received by the inbound link.  When\
    \ Rx processes a\n      Link-Quality-Report packet, it inserts the values of these\n\
    \      counters into the corresponding SaveIn... fields of the packet (in\n  \
    \    an implementation dependent manner).\n   Demux\n      The Demux process demultiplexes\
    \ packets for the various protocols.\n      The Demux process MUST follow the\
    \ Rx process so that packets are\n      counted in the order received from the\
    \ link.\n"
- title: 2.5.  Configuration Option Format
  contents:
  - "2.5.  Configuration Option Format\n   Description\n      Implementations MUST\
    \ be prepared to receive the Quality-Protocol\n      Configuration Option for\
    \ the Link-Quality-Report.  However,\n      negotiation is not required.  Negotiation\
    \ is only necessary when\n      the implementation wishes to ensure that the peer\
    \ transmits Link-\n      Quality-Reports as opposed to some other Quality-Protocol,\
    \ or else\n      to prevent the peer from maintaining its own timer, or else to\n\
    \      establish a maximum time between transmissions of Link-Quality-\n     \
    \ Reports.\n   A summary of the Quality-Protocol Configuration Option format to\n\
    \   negotiate the Link-Quality-Report is shown below.  The fields are\n   transmitted\
    \ from left to right.\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |        Quality-Protocol       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Reporting-Period                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      4\n   Length\n      8\n   Quality-Protocol\n      c025 (hex) for\
    \ Link-Quality-Report\n   Reporting-Period\n      The Reporting-Period field is\
    \ four octets and indicates the\n      maximum time in hundredths of seconds between\
    \ transmission of\n      packets.  The peer MAY transmit packets at a faster rate\
    \ than that\n      which was negotiated.\n      A value of zero indicates that\
    \ the peer does not need to maintain\n      a timer.  Instead, the peer generates\
    \ a LQR immediately upon\n      receiving a LQR.  A value of zero MUST be Nak'd\
    \ by the peer with\n      an appropriate non-zero value when that peer has sent\
    \ or will send\n      a Configure-Request packet containing the Quality-Protocol\n\
    \      Configuration Option for the Link-Quality-Report with a zero\n      Reporting-Period.\n"
- title: 2.6.  Packet Format
  contents:
  - "2.6.  Packet Format\n   Exactly one Link-Quality-Report packet is encapsulated\
    \ in the\n   Information field of PPP Data Link Layer frames where the protocol\n\
    \   field indicates type hex c025 (Link-Quality-Report).  A summary of\n   the\
    \ LQR packet format is shown below.  The names of the fields are\n   relative\
    \ to the packet receiver, since it is the receiver who\n   requested the packet\
    \ in the Configuration Option.  The fields are\n   transmitted from left to right.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Magic-Number                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         LastOutLQRs                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        LastOutPackets                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        LastOutOctets                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         PeerInLQRs                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        PeerInPackets                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        PeerInDiscards                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        PeerInErrors                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        PeerInOctets                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         PeerOutLQRs                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        PeerOutPackets                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        PeerOutOctets                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The following fields are not actually transmitted over the inbound\n   link.\
    \  Rather, they are logically appended (in an implementation\n   dependent manner)\
    \ to the packet by the implementation's Rx process.\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         SaveInLQRs                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        SaveInPackets                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        SaveInDiscards                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        SaveInErrors                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        SaveInOctets                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Magic-Number\n      The Magic-Number field is four octets and aids in detecting\
    \ links\n      which are in the looped-back condition.  Unless modified by a\n\
    \      Configuration Option, the Magic-Number MUST be transmitted as zero\n  \
    \    and MUST be ignored on reception.  If Magic-Numbers have been\n      negotiated,\
    \ incoming LQR packets SHOULD be checked to ensure that\n      the local end is\
    \ not seeing its own Magic-Number and thus a\n      looped-back link.  See the\
    \ Magic-Number Configuration Option for\n      further explanation.\n   LastOutLQRs\n\
    \      The LastOutLQRs field is four octets, and is copied from the most\n   \
    \   recently received PeerOutLQRs on transmission.\n   LastOutPackets\n      The\
    \ LastOutPackets field is four octets, and is copied from the\n      most recently\
    \ received PeerOutPackets on transmission.\n   LastOutOctets\n      The LastOutOctets\
    \ field is four octets, and is copied from the\n      most recently received PeerOutOctets\
    \ on transmission.\n   PeerInLQRs\n      The PeerInLQRs field is four octets,\
    \ and is copied from the most\n      recently received SaveInLQRs on transmission.\n\
    \      Whenever the PeerInLQRs field is discovered to be zero, the\n      LastOut...\
    \ fields are indeterminate, and the PeerIn... fields\n      contain the initial\
    \ values for the peer.\n   PeerInPackets\n      The PeerInPackets field is four\
    \ octets, and is copied from the\n      most recently received SaveInPackets on\
    \ transmission.\n   PeerInDiscards\n      The PeerInDiscards field is four octets,\
    \ and is copied from the\n      most recently received SaveInDiscards on transmission.\n\
    \   PeerInErrors\n      The PeerInErrors field is four octets, and is copied from\
    \ the most\n      recently received SaveInErrors on transmission.\n   PeerInOctets\n\
    \      The PeerInOctets field is four octets, and is copied from the most\n  \
    \    recently received SaveInOctets on transmission.\n   PeerOutLQRs\n      The\
    \ PeerOutLQRs field is four octets, and is copied from OutLQRs\n      on transmission.\
    \  This number MUST include this LQR.\n   PeerOutPackets\n      The PeerOutPackets\
    \ field is four octets, and is copied from the\n      current MIB ifOutUniPackets\
    \ and ifOutNUniPackets on transmission.\n      This number MUST include this LQR.\n\
    \   PeerOutOctets\n      The PeerOutOctets field is four octets, and is copied\
    \ from the\n      current MIB ifOutOctets on transmission.  This number MUST include\n\
    \      this LQR.\n   SaveInLQRs\n      The SaveInLQRs field is four octets, and\
    \ is copied from InLQRs on\n      reception.  This number MUST include this LQR.\n\
    \   SaveInPackets\n      The SaveInPackets field is four octets, and is copied\
    \ from the\n      current MIB ifInUniPackets and ifInNUniPackets on reception.\
    \  This\n      number MUST include this LQR.\n   SaveInDiscards\n      The SaveInDiscards\
    \ field is four octets, and is copied from the\n      current MIB ifInDiscards\
    \ on reception.  This number MUST include\n      this LQR.\n   SaveInErrors\n\
    \      The SaveInErrors field is four octets, and is copied from the\n      current\
    \ MIB ifInErrors on reception.  This number MUST include\n      this LQR.\n  \
    \ SaveInOctets\n      The SaveInOctets field is four octets, and is copied from\
    \ the\n      current InGoodOctets on reception.  This number MUST include this\n\
    \      LQR.\n      Note that InGoodOctets is not the same as the MIB ifInOctets\n\
    \      counter, as InGoodOctets does not include octets for packets which\n  \
    \    are discards or errors.\n"
- title: 2.7.  Transmission of Reports
  contents:
  - "2.7.  Transmission of Reports\n   When the PPP Link Control Protocol has reached\
    \ the Opened state, the\n   Link Quality Monitoring process MAY commence sending\
    \ Link-Quality-\n   Reports.  If a Protocol-Reject is received specifying a LQR\
    \ packet,\n   the LQM process MUST cease sending LQRs.\n   Usually, the LQR is\
    \ transmitted when the LQR timer for the link\n   expires.  If no LQR timer is\
    \ used, a LQR is generated upon receipt of\n   an incoming LQR.  The negotiation\
    \ process ensures that at least one\n   side of the link is using a LQR timer.\n\
    \   In addition, a LQR is generated whenever two successive LQRs are\n   received\
    \ which have the same PeerInLQRs value.  This may indicate\n   that a LQR has\
    \ been missed, or that the implementation is sending at\n   a significantly slower\
    \ rate than the peer, or that the peer has\n   accelerated LQR generation to better\
    \ quantify errors on the link.\n   Whenever a LQR is sent, the LQR timer MUST\
    \ be restarted.\n"
- title: 2.8.  Calculations
  contents:
  - "2.8.  Calculations\n   Each time a Link-Quality-Report packet is received from\
    \ the inbound\n   link, the Link-Manager can compare the associated fields.  The\
    \ fields\n   of the previous LQR can be subtracted from the current LQR values\
    \ to\n   obtain an absolute \"delta\", which allows comparision of the changes\n\
    \   seen by each end of the link.\n   If the received PeerInLQRs field is zero,\
    \ the LastOut... fields are\n   indeterminate, and the PeerIn... fields contain\
    \ the initial values\n   for the peer.  No calculations using these fields can\
    \ be performed at\n   this time.\n   Implementation Note:\n      The following\
    \ counters wrap to zero when their maximum value is\n      reached.  Care must\
    \ be taken to ensure that correct \"delta\"\n      calculations are performed\
    \ at that time.\n   The LastOutLQRs field may be directly compared with the PeerInLQRs\n\
    \   field to determine how many outbound LQRs have been lost.\n   The LastOutLQRs\
    \ field may be directly compared with the OutLQRs\n   counter to determine how\
    \ many outbound LQRs are still in the\n   pipeline.\n   The change in PeerInPackets\
    \ may be compared with the change in\n   LastOutPackets to determine the number\
    \ of lost packets over the\n   outgoing link.\n   The change in PeerInOctets may\
    \ be compared with the change in\n   LastOutOctets to determine the number of\
    \ lost octets over the\n   outgoing link.\n   The change in SaveInPackets may\
    \ be compared with the change in\n   PeerOutPackets to determine the number of\
    \ lost packets over the\n   incoming link.\n   The change in SaveInOctets may\
    \ be compared with the change in\n   PeerOutOctets to determine the number of\
    \ lost octets over the\n   incoming link.\n   The change in the PeerInDiscards\
    \ and PeerInErrors fields may be used\n   to determine whether packet loss is\
    \ due to congestion in the peer\n   rather than physical link failure.\n"
- title: 2.9.  Failure Detection
  contents:
  - "2.9.  Failure Detection\n   When the link is operating well in both directions\
    \ of the link, the\n   LQR is superfluous.  The maximum time interval for transmitting\
    \ LQRs\n   SHOULD be chosen to minimally interfere with active traffic.\n   When\
    \ there is a measurable loss of data in either direction, if the\n   overall throughput\
    \ is adequate, conditions are not severe enough to\n   warrant dropping the link.\
    \  Sending LQRs faster will gain nothing,\n   except to measure peaks in the loss\
    \ rate.  The time interval MUST be\n   chosen to be long enough to have a good\
    \ smoothing effect on the data,\n   while short enough to ensure fast enough response\
    \ to complete\n   failure.\n   When the link is good incoming, but very bad outgoing,\
    \ incoming LQRs\n   indicate a high loss on the outgoing side of the link.  Sending\
    \ LQRs\n   faster won't help, because they are probably lost on the way to the\n\
    \   peer.\n   When the link is good outgoing, but very bad incoming, incoming\
    \ LRQs\n   will be frequently lost.  In this case, LQRs SHOULD be sent at a\n\
    \   faster rate.  This primarily relies on the peer to make an informed\n   policy\
    \ decision.  The peer will also send LQRs in response (due to\n   the duplicate\
    \ PeerInLQRs field), and some of those LQRs may\n   successfully arrive.\n   When\
    \ a LQR does not arrive within the time expected, or the LQR\n   received indicates\
    \ that the links are truly bad, at least one\n   additional LQR SHOULD be sent.\
    \  An algorithmic decision requires at\n   least 2 round trip intervals.  The\
    \ loss rate could be transient, due\n   to a heavily loaded link, or a lost outgoing\
    \ LQR.\n"
- title: 2.10.  Policy Suggestions
  contents:
  - "2.10.  Policy Suggestions\n   Link-Quality-Report packets provide a mechanism\
    \ to determine the link\n   quality, but it is up to each implementation to decide\
    \ when the link\n   is usable.  It is recommended that this policy implement some\
    \ amount\n   of hysteresis so that the link does not bounce up and down.  One\n\
    \   policy is to use a K out of N algorithm.  In such an algorithm, there\n  \
    \ must be K successes out of the last N periods for the link to be\n   considered\
    \ of good quality.\n   Procedures for recovery from poor quality links are unspecified\
    \ and\n   may vary from implementation to implementation.  A suggested approach\n\
    \   is to immediately close all other Network-Layer protocols (i.e.,\n   cause\
    \ IPCP to transmit a Terminate-Request), but to continue\n   transmitting Link-Quality-Reports.\
    \  Once the link quality again\n   reaches an acceptable level, Network-Layer\
    \ protocols can be\n   reconfigured.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: References
  contents:
  - "References\n   [1]   Simpson, W., \"The Point-to-Point Protocol\", RFC 1331,\
    \ May 1992.\n   [2]   McCloghrie, K., and M. Rose, \"Management Information Base\
    \ for\n         Network Management of TCP/IP-based internets: MIB-II\", RFC\n\
    \         1213, March 1991.\n   [3]   Rose, M., and K. McCloghrie, \"Structure\
    \ and Identification of\n         Management Information for TCP/IP-based Internets\"\
    , RFC 1155,\n         May 1990.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Some of the text in this document is taken from RFC 1172,\
    \ by Drew\n   Perkins of Carnegie Mellon University, and by Russ Hobby of the\n\
    \   University of California at Davis.\n   Special thanks to Craig Fox (Network\
    \ Systems), and Karl Fox (Morning\n   Star Technologies), for design suggestions\
    \ based on implementation\n   experience.\n"
- title: Chair's Address
  contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n\
    \      Brian Lloyd\n      Lloyd & Associates\n      3420 Sudbury Road\n      Cameron\
    \ Park, California 95682\n      Phone: (916) 676-1147\n      EMail: brian@ray.lloyd.com\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Questions about this memo can also be directed to:\n   \
    \   William Allen Simpson\n      Daydreamer\n      Computer Systems Consulting\
    \ Services\n      P O Box 6205\n      East Lansing, MI  48826-6025\n      EMail:\
    \ bsimpson@ray.lloyd.com\n"
