- contents:
  - '             The Secure Shell (SSH) Authentication Protocol

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The Secure Shell Protocol (SSH) is a protocol for secure remote
    login\n   and other secure network services over an insecure network.  This\n
    \  document describes the SSH authentication protocol framework and\n   public
    key, password, and host-based client authentication methods.\n   Additional authentication
    methods are described in separate\n   documents.  The SSH authentication protocol
    runs on top of the SSH\n   transport layer protocol and provides a single authenticated
    tunnel\n   for the SSH connection protocol.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Contributors ....................................................3\n   3.
    Conventions Used in This Document ...............................3\n   4. The
    Authentication Protocol Framework ...........................4\n   5. Authentication
    Requests .........................................4\n      5.1. Responses to Authentication
    Requests .......................5\n      5.2. The \"none\" Authentication Request
    ..........................7\n      5.3. Completion of User Authentication ..........................7\n
    \     5.4. Banner Message .............................................7\n   6.
    Authentication Protocol Message Numbers .........................8\n   7. Public
    Key Authentication Method: \"publickey\" ...................8\n   8. Password
    Authentication Method: \"password\" .....................10\n   9. Host-Based
    Authentication: \"hostbased\" .........................12\n   10. IANA Considerations
    ...........................................14\n   11. Security Considerations
    .......................................14\n   12. References ....................................................15\n
    \     12.1. Normative References .....................................15\n      12.2.
    Informative References ...................................15\n   Authors' Addresses
    ................................................16\n   Trademark Notice ..................................................16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The SSH authentication protocol is a general-purpose user\n
    \  authentication protocol.  It is intended to be run over the SSH\n   transport
    layer protocol [SSH-TRANS].  This protocol assumes that the\n   underlying protocols
    provide integrity and confidentiality\n   protection.\n   This document should
    be read only after reading the SSH architecture\n   document [SSH-ARCH].  This
    document freely uses terminology and\n   notation from the architecture document
    without reference or further\n   explanation.\n   The 'service name' for this
    protocol is \"ssh-userauth\".\n   When this protocol starts, it receives the session
    identifier from\n   the lower-level protocol (this is the exchange hash H from
    the first\n   key exchange).  The session identifier uniquely identifies this\n
    \  session and is suitable for signing in order to prove ownership of a\n   private
    key.  This protocol also needs to know whether the lower-\n   level protocol provides
    confidentiality protection.\n"
  title: 1.  Introduction
- contents:
  - "2.  Contributors\n   The major original contributors of this set of documents
    have been:\n   Tatu Ylonen, Tero Kivinen, Timo J. Rinne, Sami Lehtinen (all of
    SSH\n   Communications Security Corp), and Markku-Juhani O. Saarinen\n   (University
    of Jyvaskyla).  Darren Moffat was the original editor of\n   this set of documents
    and also made very substantial contributions.\n   Many people contributed to the
    development of this document over the\n   years.  People who should be acknowledged
    include Mats Andersson, Ben\n   Harris, Bill Sommerfeld, Brent McClure, Niels
    Moller, Damien Miller,\n   Derek Fawcus, Frank Cusack, Heikki Nousiainen, Jakob
    Schlyter, Jeff\n   Van Dyke, Jeffrey Altman, Jeffrey Hutzelman, Jon Bright, Joseph\n
    \  Galbraith, Ken Hornstein, Markus Friedl, Martin Forssen, Nicolas\n   Williams,
    Niels Provos, Perry Metzger, Peter Gutmann, Simon\n   Josefsson, Simon Tatham,
    Wei Dai, Denis Bider, der Mouse, and\n   Tadayoshi Kohno.  Listing their names
    here does not mean that they\n   endorse this document, but that they have contributed
    to it.\n"
  title: 2.  Contributors
- contents:
  - "3.  Conventions Used in This Document\n   All documents related to the SSH protocols
    shall use the keywords\n   \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL
    NOT\", \"SHOULD\",\n   \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    to describe\n   requirements.  These keywords are to be interpreted as described
    in\n   [RFC2119].\n   The keywords \"PRIVATE USE\", \"HIERARCHICAL ALLOCATION\",
    \"FIRST COME\n   FIRST SERVED\", \"EXPERT REVIEW\", \"SPECIFICATION REQUIRED\",
    \"IESG\n   APPROVAL\", \"IETF CONSENSUS\", and \"STANDARDS ACTION\" that appear
    in\n   this document when used to describe namespace allocation are to be\n   interpreted
    as described in [RFC2434].\n   Protocol fields and possible values to fill them
    are defined in this\n   set of documents.  Protocol fields will be defined in
    the message\n   definitions.  As an example, SSH_MSG_CHANNEL_DATA is defined as\n
    \  follows.\n      byte      SSH_MSG_CHANNEL_DATA\n      uint32    recipient channel\n
    \     string    data\n   Throughout these documents, when the fields are referenced,
    they will\n   appear within single quotes.  When values to fill those fields are\n
    \  referenced, they will appear within double quotes.  Using the above\n   example,
    possible values for 'data' are \"foo\" and \"bar\".\n"
  title: 3.  Conventions Used in This Document
- contents:
  - "4.  The Authentication Protocol Framework\n   The server drives the authentication
    by telling the client which\n   authentication methods can be used to continue
    the exchange at any\n   given time.  The client has the freedom to try the methods
    listed by\n   the server in any order.  This gives the server complete control
    over\n   the authentication process if desired, but also gives enough\n   flexibility
    for the client to use the methods it supports or that are\n   most convenient
    for the user, when multiple methods are offered by\n   the server.\n   Authentication
    methods are identified by their name, as defined in\n   [SSH-ARCH].  The \"none\"
    method is reserved, and MUST NOT be listed as\n   supported.  However, it MAY
    be sent by the client.  The server MUST\n   always reject this request, unless
    the client is to be granted access\n   without any authentication, in which case,
    the server MUST accept\n   this request.  The main purpose of sending this request
    is to get the\n   list of supported methods from the server.\n   The server SHOULD
    have a timeout for authentication and disconnect if\n   the authentication has
    not been accepted within the timeout period.\n   The RECOMMENDED timeout period
    is 10 minutes.  Additionally, the\n   implementation SHOULD limit the number of
    failed authentication\n   attempts a client may perform in a single session (the
    RECOMMENDED\n   limit is 20 attempts).  If the threshold is exceeded, the server\n
    \  SHOULD disconnect.\n   Additional thoughts about authentication timeouts and
    retries may be\n   found in [ssh-1.2.30].\n"
  title: 4.  The Authentication Protocol Framework
- contents:
  - "5.  Authentication Requests\n   All authentication requests MUST use the following
    message format.\n   Only the first few fields are defined; the remaining fields
    depend on\n   the authentication method.\n      byte      SSH_MSG_USERAUTH_REQUEST\n
    \     string    user name in ISO-10646 UTF-8 encoding [RFC3629]\n      string
    \   service name in US-ASCII\n      string    method name in US-ASCII\n      ....
    \     method specific fields\n   The 'user name' and 'service name' are repeated
    in every new\n   authentication attempt, and MAY change.  The server implementation\n
    \  MUST carefully check them in every message, and MUST flush any\n   accumulated
    authentication states if they change.  If it is unable to\n   flush an authentication
    state, it MUST disconnect if the 'user name'\n   or 'service name' changes.\n
    \  The 'service name' specifies the service to start after\n   authentication.
    \ There may be several different authenticated\n   services provided.  If the
    requested service is not available, the\n   server MAY disconnect immediately
    or at any later time.  Sending a\n   proper disconnect message is RECOMMENDED.
    \ In any case, if the\n   service does not exist, authentication MUST NOT be accepted.\n
    \  If the requested 'user name' does not exist, the server MAY\n   disconnect,
    or MAY send a bogus list of acceptable authentication\n   'method name' values,
    but never accept any.  This makes it possible\n   for the server to avoid disclosing
    information on which accounts\n   exist.  In any case, if the 'user name' does
    not exist, the\n   authentication request MUST NOT be accepted.\n   While there
    is usually little point for clients to send requests that\n   the server does
    not list as acceptable, sending such requests is not\n   an error, and the server
    SHOULD simply reject requests that it does\n   not recognize.\n   An authentication
    request MAY result in a further exchange of\n   messages.  All such messages depend
    on the authentication 'method\n   name' used, and the client MAY at any time continue
    with a new\n   SSH_MSG_USERAUTH_REQUEST message, in which case the server MUST\n
    \  abandon the previous authentication attempt and continue with the new\n   one.\n
    \  The following 'method name' values are defined.\n      \"publickey\"             REQUIRED\n
    \     \"password\"              OPTIONAL\n      \"hostbased\"             OPTIONAL\n
    \     \"none\"                  NOT RECOMMENDED\n   Additional 'method name' values
    may be defined as specified in\n   [SSH-ARCH] and [SSH-NUMBERS].\n"
  - contents:
    - "5.1.  Responses to Authentication Requests\n   If the server rejects the authentication
      request, it MUST respond\n   with the following:\n      byte         SSH_MSG_USERAUTH_FAILURE\n
      \     name-list    authentications that can continue\n      boolean      partial
      success\n   The 'authentications that can continue' is a comma-separated name-\n
      \  list of authentication 'method name' values that may productively\n   continue
      the authentication dialog.\n   It is RECOMMENDED that servers only include those
      'method name'\n   values in the name-list that are actually useful.  However,
      it is not\n   illegal to include 'method name' values that cannot be used to\n
      \  authenticate the user.\n   Already successfully completed authentications
      SHOULD NOT be included\n   in the name-list, unless they should be performed
      again for some\n   reason.\n   The value of 'partial success' MUST be TRUE if
      the authentication\n   request to which this is a response was successful.  It
      MUST be FALSE\n   if the request was not successfully processed.\n   When the
      server accepts authentication, it MUST respond with the\n   following:\n      byte
      \     SSH_MSG_USERAUTH_SUCCESS\n   Note that this is not sent after each step
      in a multi-method\n   authentication sequence, but only when the authentication
      is\n   complete.\n   The client MAY send several authentication requests without
      waiting\n   for responses from previous requests.  The server MUST process each\n
      \  request completely and acknowledge any failed requests with a\n   SSH_MSG_USERAUTH_FAILURE
      message before processing the next request.\n   A request that requires further
      messages to be exchanged will be\n   aborted by a subsequent request.  A client
      MUST NOT send a subsequent\n   request if it has not received a response from
      the server for a\n   previous request.  A SSH_MSG_USERAUTH_FAILURE message MUST
      NOT be\n   sent for an aborted method.\n   SSH_MSG_USERAUTH_SUCCESS MUST be
      sent only once.  When\n   SSH_MSG_USERAUTH_SUCCESS has been sent, any further
      authentication\n   requests received after that SHOULD be silently ignored.\n
      \  Any non-authentication messages sent by the client after the request\n   that
      resulted in SSH_MSG_USERAUTH_SUCCESS being sent MUST be passed\n   to the service
      being run on top of this protocol.  Such messages can\n   be identified by their
      message numbers (see Section 6).\n"
    title: 5.1.  Responses to Authentication Requests
  - contents:
    - "5.2.  The \"none\" Authentication Request\n   A client may request a list of
      authentication 'method name' values\n   that may continue by using the \"none\"
      authentication 'method name'.\n   If no authentication is needed for the user,
      the server MUST return\n   SSH_MSG_USERAUTH_SUCCESS.  Otherwise, the server
      MUST return\n   SSH_MSG_USERAUTH_FAILURE and MAY return with it a list of methods\n
      \  that may continue in its 'authentications that can continue' value.\n   This
      'method name' MUST NOT be listed as supported by the server.\n"
    title: 5.2.  The "none" Authentication Request
  - contents:
    - "5.3.  Completion of User Authentication\n   Authentication is complete when
      the server has responded with\n   SSH_MSG_USERAUTH_SUCCESS.  All authentication
      related messages\n   received after sending this message SHOULD be silently
      ignored.\n   After sending SSH_MSG_USERAUTH_SUCCESS, the server starts the\n
      \  requested service.\n"
    title: 5.3.  Completion of User Authentication
  - contents:
    - "5.4.  Banner Message\n   In some jurisdictions, sending a warning message before\n
      \  authentication may be relevant for getting legal protection.  Many\n   UNIX
      machines, for example, normally display text from /etc/issue,\n   use TCP wrappers,
      or similar software to display a banner before\n   issuing a login prompt.\n
      \  The SSH server may send an SSH_MSG_USERAUTH_BANNER message at any\n   time
      after this authentication protocol starts and before\n   authentication is successful.
      \ This message contains text to be\n   displayed to the client user before authentication
      is attempted.  The\n   format is as follows:\n      byte      SSH_MSG_USERAUTH_BANNER\n
      \     string    message in ISO-10646 UTF-8 encoding [RFC3629]\n      string
      \   language tag [RFC3066]\n   By default, the client SHOULD display the 'message'
      on the screen.\n   However, since the 'message' is likely to be sent for every
      login\n   attempt, and since some client software will need to open a separate\n
      \  window for this warning, the client software may allow the user to\n   explicitly
      disable the display of banners from the server.  The\n   'message' may consist
      of multiple lines, with line breaks indicated\n   by CRLF pairs.\n   If the
      'message' string is displayed, control character filtering,\n   discussed in
      [SSH-ARCH], SHOULD be used to avoid attacks by sending\n   terminal control
      characters.\n"
    title: 5.4.  Banner Message
  title: 5.  Authentication Requests
- contents:
  - "6.  Authentication Protocol Message Numbers\n   All message numbers used by this
    authentication protocol are in the\n   range from 50 to 79, which is part of the
    range reserved for\n   protocols running on top of the SSH transport layer protocol.\n
    \  Message numbers of 80 and higher are reserved for protocols running\n   after
    this authentication protocol, so receiving one of them before\n   authentication
    is complete is an error, to which the server MUST\n   respond by disconnecting,
    preferably with a proper disconnect message\n   sent to ease troubleshooting.\n
    \  After successful authentication, such messages are passed to the\n   higher-level
    service.\n   These are the general authentication message codes:\n      SSH_MSG_USERAUTH_REQUEST
    \           50\n      SSH_MSG_USERAUTH_FAILURE            51\n      SSH_MSG_USERAUTH_SUCCESS
    \           52\n      SSH_MSG_USERAUTH_BANNER             53\n   In addition to
    the above, there is a range of message numbers (60 to\n   79) reserved for method-specific
    messages.  These messages are only\n   sent by the server (client sends only SSH_MSG_USERAUTH_REQUEST\n
    \  messages).  Different authentication methods reuse the same message\n   numbers.\n"
  title: 6.  Authentication Protocol Message Numbers
- contents:
  - "7.  Public Key Authentication Method: \"publickey\"\n   The only REQUIRED authentication
    'method name' is \"publickey\"\n   authentication.  All implementations MUST support
    this method;\n   however, not all users need to have public keys, and most local\n
    \  policies are not likely to require public key authentication for all\n   users
    in the near future.\n   With this method, the possession of a private key serves
    as\n   authentication.  This method works by sending a signature created\n   with
    a private key of the user.  The server MUST check that the key\n   is a valid
    authenticator for the user, and MUST check that the\n   signature is valid.  If
    both hold, the authentication request MUST be\n   accepted; otherwise, it MUST
    be rejected.  Note that the server MAY\n   require additional authentications
    after successful authentication.\n   Private keys are often stored in an encrypted
    form at the client\n   host, and the user must supply a passphrase before the
    signature can\n   be generated.  Even if they are not, the signing operation involves\n
    \  some expensive computation.  To avoid unnecessary processing and user\n   interaction,
    the following message is provided for querying whether\n   authentication using
    the \"publickey\" method would be acceptable.\n      byte      SSH_MSG_USERAUTH_REQUEST\n
    \     string    user name in ISO-10646 UTF-8 encoding [RFC3629]\n      string
    \   service name in US-ASCII\n      string    \"publickey\"\n      boolean   FALSE\n
    \     string    public key algorithm name\n      string    public key blob\n   Public
    key algorithms are defined in the transport layer\n   specification [SSH-TRANS].
    \ The 'public key blob' may contain\n   certificates.\n   Any public key algorithm
    may be offered for use in authentication.\n   In particular, the list is not constrained
    by what was negotiated\n   during key exchange.  If the server does not support
    some algorithm,\n   it MUST simply reject the request.\n   The server MUST respond
    to this message with either\n   SSH_MSG_USERAUTH_FAILURE or with the following:\n
    \     byte      SSH_MSG_USERAUTH_PK_OK\n      string    public key algorithm name
    from the request\n      string    public key blob from the request\n   To perform
    actual authentication, the client MAY then send a\n   signature generated using
    the private key.  The client MAY send the\n   signature directly without first
    verifying whether the key is\n   acceptable.  The signature is sent using the
    following packet:\n      byte      SSH_MSG_USERAUTH_REQUEST\n      string    user
    name\n      string    service name\n      string    \"publickey\"\n      boolean
    \  TRUE\n      string    public key algorithm name\n      string    public key
    to be used for authentication\n      string    signature\n   The value of 'signature'
    is a signature by the corresponding private\n   key over the following data, in
    the following order:\n      string    session identifier\n      byte      SSH_MSG_USERAUTH_REQUEST\n
    \     string    user name\n      string    service name\n      string    \"publickey\"\n
    \     boolean   TRUE\n      string    public key algorithm name\n      string
    \   public key to be used for authentication\n   When the server receives this
    message, it MUST check whether the\n   supplied key is acceptable for authentication,
    and if so, it MUST\n   check whether the signature is correct.\n   If both checks
    succeed, this method is successful.  Note that the\n   server may require additional
    authentications.  The server MUST\n   respond with SSH_MSG_USERAUTH_SUCCESS (if
    no more authentications are\n   needed), or SSH_MSG_USERAUTH_FAILURE (if the request
    failed, or more\n   authentications are needed).\n   The following method-specific
    message numbers are used by the\n   \"publickey\" authentication method.\n      SSH_MSG_USERAUTH_PK_OK
    \             60\n"
  title: '7.  Public Key Authentication Method: "publickey"'
- contents:
  - "8.  Password Authentication Method: \"password\"\n   Password authentication
    uses the following packets.  Note that a\n   server MAY request that a user change
    the password.  All\n   implementations SHOULD support password authentication.\n
    \     byte      SSH_MSG_USERAUTH_REQUEST\n      string    user name\n      string
    \   service name\n      string    \"password\"\n      boolean   FALSE\n      string
    \   plaintext password in ISO-10646 UTF-8 encoding [RFC3629]\n   Note that the
    'plaintext password' value is encoded in ISO-10646\n   UTF-8.  It is up to the
    server how to interpret the password and\n   validate it against the password
    database.  However, if the client\n   reads the password in some other encoding
    (e.g., ISO 8859-1 - ISO\n   Latin1), it MUST convert the password to ISO-10646
    UTF-8 before\n   transmitting, and the server MUST convert the password to the\n
    \  encoding used on that system for passwords.\n   From an internationalization
    standpoint, it is desired that if a user\n   enters their password, the authentication
    process will work\n   regardless of what OS and client software the user is using.
    \ Doing\n   so requires normalization.  Systems supporting non-ASCII passwords\n
    \  SHOULD always normalize passwords and user names whenever they are\n   added
    to the database, or compared (with or without hashing) to\n   existing entries
    in the database.  SSH implementations that both\n   store the passwords and compare
    them SHOULD use [RFC4013] for\n   normalization.\n   Note that even though the
    cleartext password is transmitted in the\n   packet, the entire packet is encrypted
    by the transport layer.  Both\n   the server and the client should check whether
    the underlying\n   transport layer provides confidentiality (i.e., if encryption
    is\n   being used).  If no confidentiality is provided (\"none\" cipher),\n   password
    authentication SHOULD be disabled.  If there is no\n   confidentiality or no MAC,
    password change SHOULD be disabled.\n   Normally, the server responds to this
    message with success or\n   failure.  However, if the password has expired, the
    server SHOULD\n   indicate this by responding with SSH_MSG_USERAUTH_PASSWD_CHANGEREQ.\n
    \  In any case, the server MUST NOT allow an expired password to be used\n   for
    authentication.\n      byte      SSH_MSG_USERAUTH_PASSWD_CHANGEREQ\n      string
    \   prompt in ISO-10646 UTF-8 encoding [RFC3629]\n      string    language tag
    [RFC3066]\n   In this case, the client MAY continue with a different authentication\n
    \  method, or request a new password from the user and retry password\n   authentication
    using the following message.  The client MAY also send\n   this message instead
    of the normal password authentication request\n   without the server asking for
    it.\n      byte      SSH_MSG_USERAUTH_REQUEST\n      string    user name\n      string
    \   service name\n      string    \"password\"\n      boolean   TRUE\n      string
    \   plaintext old password in ISO-10646 UTF-8 encoding\n                 [RFC3629]\n
    \     string    plaintext new password in ISO-10646 UTF-8 encoding\n                 [RFC3629]\n
    \  The server must reply to each request message with\n   SSH_MSG_USERAUTH_SUCCESS,
    SSH_MSG_USERAUTH_FAILURE, or another\n   SSH_MSG_USERAUTH_PASSWD_CHANGEREQ.  The
    meaning of these is as\n   follows:\n      SSH_MSG_USERAUTH_SUCCESS - The password
    has been changed, and\n      authentication has been successfully completed.\n
    \     SSH_MSG_USERAUTH_FAILURE with partial success - The password has\n      been
    changed, but more authentications are needed.\n      SSH_MSG_USERAUTH_FAILURE
    without partial success - The password\n      has not been changed.  Either password
    changing was not supported,\n      or the old password was bad.  Note that if
    the server has already\n      sent SSH_MSG_USERAUTH_PASSWD_CHANGEREQ, we know
    that it supports\n      changing the password.\n      SSH_MSG_USERAUTH_CHANGEREQ
    - The password was not changed because\n      the new password was not acceptable
    (e.g., too easy to guess).\n   The following method-specific message numbers are
    used by the\n   password authentication method.\n      SSH_MSG_USERAUTH_PASSWD_CHANGEREQ
    \  60\n"
  title: '8.  Password Authentication Method: "password"'
- contents:
  - "9.  Host-Based Authentication: \"hostbased\"\n   Some sites wish to allow authentication
    based on the host that the\n   user is coming from and the user name on the remote
    host.  While this\n   form of authentication is not suitable for high-security
    sites, it\n   can be very convenient in many environments.  This form of\n   authentication
    is OPTIONAL.  When used, special care SHOULD be taken\n   to prevent a regular
    user from obtaining the private host key.\n   The client requests this form of
    authentication by sending the\n   following message.  It is similar to the UNIX
    \"rhosts\" and\n   \"hosts.equiv\" styles of authentication, except that the identity
    of\n   the client host is checked more rigorously.\n   This method works by having
    the client send a signature created with\n   the private key of the client host,
    which the server checks with that\n   host's public key.  Once the client host's
    identity is established,\n   authorization (but no further authentication) is
    performed based on\n   the user names on the server and the client, and the client
    host\n   name.\n      byte      SSH_MSG_USERAUTH_REQUEST\n      string    user
    name\n      string    service name\n      string    \"hostbased\"\n      string
    \   public key algorithm for host key\n      string    public host key and certificates
    for client host\n      string    client host name expressed as the FQDN in US-ASCII\n
    \     string    user name on the client host in ISO-10646 UTF-8 encoding\n                 [RFC3629]\n
    \     string    signature\n   Public key algorithm names for use in 'public key
    algorithm for host\n   key' are defined in the transport layer specification [SSH-TRANS].\n
    \  The 'public host key and certificates for client host' may include\n   certificates.\n
    \  The value of 'signature' is a signature with the private host key of\n   the
    following data, in this order:\n      string    session identifier\n      byte
    \     SSH_MSG_USERAUTH_REQUEST\n      string    user name\n      string    service
    name\n      string    \"hostbased\"\n      string    public key algorithm for
    host key\n      string    public host key and certificates for client host\n      string
    \   client host name expressed as the FQDN in US-ASCII\n      string    user name
    on the client host in ISO-10646 UTF-8 encoding\n                 [RFC3629]\n   The
    server MUST verify that the host key actually belongs to the\n   client host named
    in the message, that the given user on that host is\n   allowed to log in, and
    that the 'signature' value is a valid\n   signature on the appropriate value by
    the given host key.  The server\n   MAY ignore the client 'user name', if it wants
    to authenticate only\n   the client host.\n   Whenever possible, it is RECOMMENDED
    that the server perform\n   additional checks to verify that the network address
    obtained from\n   the (untrusted) network matches the given client host name.
    \ This\n   makes exploiting compromised host keys more difficult.  Note that\n
    \  this may require special handling for connections coming through a\n   firewall.\n"
  title: '9.  Host-Based Authentication: "hostbased"'
- contents:
  - "10.  IANA Considerations\n   This document is part of a set.  The IANA considerations
    for the SSH\n   protocol, as defined in [SSH-ARCH], [SSH-TRANS], [SSH-CONNECT],
    and\n   this document, are detailed in [SSH-NUMBERS].\n"
  title: 10.  IANA Considerations
- contents:
  - "11.  Security Considerations\n   The purpose of this protocol is to perform client
    user\n   authentication.  It assumed that this runs over a secure transport\n
    \  layer protocol, which has already authenticated the server machine,\n   established
    an encrypted communications channel, and computed a\n   unique session identifier
    for this session.  The transport layer\n   provides forward secrecy for password
    authentication and other\n   methods that rely on secret data.\n   Full security
    considerations for this protocol are provided in\n   [SSH-ARCH].\n"
  title: 11.  Security Considerations
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [SSH-ARCH]    Ylonen, T. and C. Lonvick, Ed.,
      \"The Secure Shell (SSH)\n                 Protocol Architecture\", RFC 4251,
      January 2006.\n   [SSH-CONNECT] Ylonen, T. and C. Lonvick, Ed., \"The Secure
      Shell (SSH)\n                 Connection Protocol\", RFC 4254, January 2006.\n
      \  [SSH-TRANS]   Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n
      \                Transport Layer Protocol\", RFC 4253, January 2006.\n   [SSH-NUMBERS]
      Lehtinen, S. and C. Lonvick, Ed., \"The Secure Shell\n                 (SSH)
      Protocol Assigned Numbers\", RFC 4250, January\n                 2006.\n   [RFC2119]
      \    Bradner, S., \"Key words for use in RFCs to Indicate\n                 Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2434]     Narten, T. and H.
      Alvestrand, \"Guidelines for Writing\n                 an IANA Considerations
      Section in RFCs\", BCP 26, RFC\n                 2434, October 1998.\n   [RFC3066]
      \    Alvestrand, H., \"Tags for the Identification of\n                 Languages\",
      BCP 47, RFC 3066, January 2001.\n   [RFC3629]     Yergeau, F., \"UTF-8, a transformation
      format of ISO\n                 10646\", STD 63, RFC 3629, November 2003.\n
      \  [RFC4013]     Zeilenga, K., \"SASLprep: Stringprep Profile for User\n                 Names
      and Passwords\", RFC 4013, February 2005.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [ssh-1.2.30]  Ylonen, T., \"ssh-1.2.30/RFC\",
      File within compressed\n                 tarball  ftp://ftp.funet.fi/pub/unix/security/login/\n
      \                ssh/ssh-1.2.30.tar.gz, November 1995.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Authors' Addresses\n   Tatu Ylonen\n   SSH Communications Security Corp\n   Valimotie
    17\n   00380 Helsinki\n   Finland\n   EMail: ylo@ssh.com\n   Chris Lonvick (editor)\n
    \  Cisco Systems, Inc.\n   12515 Research Blvd.\n   Austin  78759\n   USA\n   EMail:
    clonvick@cisco.com\n"
  title: Authors' Addresses
- contents:
  - "Trademark Notice\n   \"ssh\" is a registered trademark in the United States and/or
    other\n   countries.\n"
  title: Trademark Notice
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n
    \  Administrative Support Activity (IASA).\n"
  title: Acknowledgement
