- title: __initial_text__
  contents:
  - "                           UTF-9 and UTF-18\n              Efficient Transformation\
    \ Formats of Unicode\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   ISO-10646 defines a large character set called the Universal\n \
    \  Character Set (UCS), which encompasses most of the world's writing\n   systems.\
    \  The same set of codepoints is defined by Unicode, which\n   further defines\
    \ additional character properties and other\n   implementation details.  By policy\
    \ of the relevant standardization\n   committees, changes to Unicode and amendments\
    \ and additions to\n   ISO/IEC 646 track each other, so that the character repertoires\
    \ and\n   code point assignments remain in synchronization.\n   The current representation\
    \ formats for Unicode (UTF-7, UTF-8, UTF-16)\n   are not storage and computation\
    \ efficient on platforms that utilize\n   the 9 bit nonet as a natural storage\
    \ unit instead of the 8 bit octet.\n   This document describes a transformation\
    \ format of Unicode that takes\n   advantage of the nonet so that the format will\
    \ be storage and\n   computation efficient.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A number of Internet sites utilize platforms that are not\
    \ based upon\n   the traditional 8-bit byte or octet.  One such platform is the\
    \ PDP-\n   10, which is based upon a 36-bit word.  On these platforms, it is\n\
    \   wasteful to represent data in octets, since 4 bits are left unused in\n  \
    \ each word.  The 9-bit nonet is a much more sensible representation.\n   Although\
    \ these platforms support IETF standards, many of these\n   platforms still utilize\
    \ a text representation based upon the septet,\n   which is only suitable for\
    \ [US-ASCII] (although it has been used for\n   various ISO 10646 national variants).\n\
    \   To maximize international and multi-lingual interoperability, the IAB\n  \
    \ has recommended ([IAB-CHARACTER]) that [ISO-10646] be the default\n   coded\
    \ character set.\n   Although other transformation formats of [UNICODE] exist,\
    \ and\n   conceivably can be used on nonet-oriented machines (most notably\n \
    \  [UTF-8]), they suffer significant disadvantages:\n      [UTF-8]\n         requires\
    \ one to three octets to represent codepoints in the\n         Basic Multilingual\
    \ Plane (BMP), four octets to represent\n         [UNICODE] codepoints outside\
    \ the BMP, and six octets to\n         represent non-[UNICODE] codepoints.  When\
    \ stored in nonets,\n         this results in as many as four wasted bits per\
    \ [UNICODE]\n         character.\n      [UTF-16]\n         requires a hexadecet\
    \ to represent codepoints in the BMP, and\n         two hexadecets to represent\
    \ [UNICODE] codepoints outside the\n         BMP.  When stored in nonet pairs,\
    \ this results in as many as\n         four wasted bits per [UNICODE] character.\
    \  This transformation\n         format requires complex surrogates to represent\
    \ codepoints\n         outside the BMP, and can not represent non-[UNICODE] codepoints\n\
    \         at all.\n      [UTF-7]\n         requires one to five septets to represent\
    \ codepoints in the\n         BMP, and as many as eight septets to represent codepoints\n\
    \         outside the BMP.  When stored in nonets, this results in as\n      \
    \   many as sixteen wasted bits per character.  This transformation\n        \
    \ format requires very complex and computationally expensive\n         shifting\
    \ and \"modified BASE64\" processing, and can not\n         represent non-[UNICODE]\
    \ codepoints at all.\n   By comparison, UTF-9 uses one to two nonets to represent\
    \ codepoints\n   in the BMP, three nonets to represent [UNICODE] codepoints outside\n\
    \   the BMP, and three or four nonets to represent non-[UNICODE]\n   codepoints.\
    \  There are no wasted bits, and as the examples in this\n   document demonstrate,\
    \ the computational processing is minimal.\n   Transformation between [UTF-8]\
    \ and UTF-9 is straightforward, with\n   most of the complexity in the handling\
    \ of [UTF-8].  It is hoped that\n   future extensions to protocols such as SMTP\
    \ will permit the use of\n   UTF-9 in these protocols between nonet platforms\
    \ without the use of\n   [UTF-8] as an \"on the wire\" format.\n   Similarly,\
    \ transformation between [UNICODE] codepoints and UTF-18 is\n   also quite simple.\
    \  Although (like UCS-2) UTF-18 only represents a\n   subset of the available\
    \ [UNICODE] codepoints, it encompasses the\n   non-private codepoints that are\
    \ currently assigned in [UNICODE].\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in BCP 14, RFC 2119\n   [KEYWORDS].\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   UTF-9 encodes [UNICODE] codepoints in the low order 8 bits of\
    \ a\n   nonet, using the high order bit to indicate continuation.  Surrogates\n\
    \   are not used.\n   [UNICODE] codepoints in the range U+0000 - U+00FF ([US-ASCII]\
    \ and\n   Latin 1) are represented by a single nonet; codepoints in the range\n\
    \   U+0100 - U+FFFF (the remainder of the BMP) are represented by two\n   nonets;\
    \ and codepoints in the range U+1000 - U+10FFFF (remainder of\n   [UNICODE]) are\
    \ represented by three nonets.\n   Non-[UNICODE] codepoints in [ISO-10646] (that\
    \ is, codepoints in the\n   range 0x110000 - 0x7fffffff) can also be represented\
    \ in UTF-9 by\n   obvious extension, but this is not discussed further as these\n\
    \   codepoints have been removed from [ISO-10646] by ISO.\n   UTF-18 encodes [UNICODE]\
    \ codepoints in the Basic Multilingual Plane\n   (BMP, plane 0), Supplementary\
    \ Multilingual Plane (SMP, plane 1),\n   Supplementary Ideographic Plane (SIP,\
    \ plane 2), and Supplementary\n   Special-purpose Plane (SSP, plane 14) in a single\
    \ 18-bit value.  It\n   does not encode planes 3 though 13, which are currently\
    \ unused; nor\n   planes 15 or 16, which are private spaces.\n   Normally, UTF-9\
    \ and UTF-18 should only be used in the context of 9\n   bit storage and transport.\
    \  Although some protocols, e.g., [FTP],\n   support transport of nonets, the\
    \ current IETF protocol suite is quite\n   deficient in this area.  The IETF is\
    \ urged to take action to improve\n   IETF protocol support for nonets.\n"
- title: 3.  UTF-9 Definition
  contents:
  - "3.  UTF-9 Definition\n   A UTF-9 stream represents [ISO-10646] codepoints using\
    \ 9 bit nonets.\n   The low order 8-bits of a nonet is an octet, and the high\
    \ order bit\n   indicates continuation.\n   UTF-9 does not use surrogates; consequently\
    \ a UTF-16 value must be\n   transformed into the UCS-4 equivalent, and U+D800\
    \ - U+DBFF are never\n   transmitted in UTF-9.\n   Octets of the [UNICODE] codepoint\
    \ value are then copied into\n   successive UTF-9 nonets, starting with the most-significant\
    \ non-zero\n   octet.  All but the least significant octet have the continuation\
    \ bit\n   set in the associated nonet.\n   Examples:\n   Character  Name     \
    \                           UTF-9 (in octal)\n   ---------  ----             \
    \                   ----------------\n    U+0041    LATIN CAPITAL LETTER A   \
    \           101\n    U+00C0    LATIN CAPITAL LETTER A WITH GRAVE   300\n    U+0391\
    \    GREEK CAPITAL LETTER ALPHA          403 221\n    U+611B    <CJK ideograph\
    \ meaning \"love\">      541 33\n    U+10330   GOTHIC LETTER AHSA            \
    \      401 403 60\n    U+E0041   TAG LATIN CAPITAL LETTER A          416 400 101\n\
    \    U+10FFFD  <Plane 16 Private Use, Last>        420 777 375\n   0x345ecf1b\
    \ (UCS-4 value not in [UNICODE])      464 536 717 33\n"
- title: 4.  UTF-18 Definition
  contents:
  - "4.  UTF-18 Definition\n   A UTF-18 stream represents [ISO-10646] codepoints using\
    \ a pair of 9\n   bit nonets to form an 18-bit value.\n   UTF-18 does not use\
    \ surrogates; consequently a UTF-16 value must be\n   transformed into the UCS-4\
    \ equivalent, and U+D800 - U+DBFF are never\n   transmitted in UTF-18.\n   [UNICODE]\
    \ codepoint values in the range U+0000 - U+2FFFF are copied\n   as the same value\
    \ into a UTF-18 value.  [UNICODE] codepoint values in\n   the range U+E0000 -\
    \ U+EFFFF are copied as values 0x30000 - 0x3ffff;\n   that is, these values are\
    \ shifted by 0x70000.  Other codepoint values\n   can not be represented in UTF-18.\n\
    \   Examples:\n   Character  Name                                UTF-18 (in octal)\n\
    \   ---------  ----                                ----------------\n    U+0041\
    \    LATIN CAPITAL LETTER A              000101\n    U+00C0    LATIN CAPITAL LETTER\
    \ A WITH GRAVE   000300\n    U+0391    GREEK CAPITAL LETTER ALPHA          001621\n\
    \    U+611B    <CJK ideograph meaning \"love\">      060433\n    U+10330   GOTHIC\
    \ LETTER AHSA                  201460\n    U+E0041   TAG LATIN CAPITAL LETTER\
    \ A          600101\n"
- title: 5.  Sample Routines
  contents:
  - '5.  Sample Routines

    '
- title: 5.1.  [UNICODE] Codepoint to UTF-9 Conversion
  contents:
  - "5.1.  [UNICODE] Codepoint to UTF-9 Conversion\n   The following routines demonstrate\
    \ conversion from UCS-4 to UTF-9.\n   For simplicity, these routines do not do\
    \ any validity checking.\n   Routines used in applications SHOULD reject invalid\
    \ UTF-9 sequences;\n   that is, the first nonet with a value of 400 octal (0x100),\
    \ or\n   sequences that result in an overflow (exceeding 0x10ffff for\n   [UNICODE]),\
    \ or codepoints used for UTF-16 surrogates.\n   ; Return UCS-4 value from UTF-9\
    \ string (PDP-10 assembly version)\n   ; Accepts: P1/ 9-bit byte pointer to UTF-9\
    \ string\n   ; Returns +1: Always, T1/ UCS-4 value, P1/ updated byte pointer\n\
    \   ; Clobbers T2\n   UT92U4: TDZA T1,T1              ; start with zero\n   U92U41:\
    \  XOR T1,T2              ; insert octet into UCS-4 value\n           LSH T1,^D8\
    \              ; shift UCS-4 value\n           ILDB T2,P1              ; get next\
    \ nonet\n           TRZE T2,400             ; extract octet, any continuation?\n\
    \            JRST U92U41            ; yes, continue\n           XOR T1,T2    \
    \           ; insert final octet\n           POPJ P,\n   /* Return UCS-4 value\
    \ from UTF-9 string (C version)\n    * Accepts: pointer to pointer to UTF-9 string\n\
    \    * Returns: UCS-4 character, nonet pointer updated\n    */\n   UINT31 UTF9_to_UCS4\
    \ (UINT9 **utf9PP)\n   {\n     UINT9 nonet;\n     UINT31 ucs4;\n     for (ucs4\
    \ = (nonet = *(*utf9PP)++) & 0xff;\n          nonet & 0x100;\n          ucs4 |=\
    \ (nonet = *(*utf9PP)++) & 0xff)\n       ucs4 <<= 8;\n     return ucs4;\n   }\n"
- title: 5.2.  UTF-9 to UCS-4 Conversion
  contents:
  - "5.2.  UTF-9 to UCS-4 Conversion\n   The following routines demonstrate conversion\
    \ from UTF-9 to UCS-4.\n   For simplicity, these routines do not do any validity\
    \ checking.\n   Routines used in applications SHOULD reject invalid UCS-4 codepoints;\n\
    \   that is, codepoints used for UTF-16 surrogates or codepoints with\n   values\
    \ exceeding 0x10ffff for [UNICODE].\n   ; Write UCS-4 character to UTF-9 string\
    \ (PDP-10 assembly version)\n   ; Accepts: P1/ 9-bit byte pointer to UTF-9 string\n\
    \   ;          T1/ UCS-4 character to write\n   ; Returns +1: Always, P1/ updated\
    \ byte pointer\n   ; Clobbers T1, T2; (T1, T2) must be an accumulator pair\n \
    \  U42UT9: SETO T2,            ; we'll need some of these 1-bits later\n     \
    \      ASHC T1,-^D8        ; low octet becomes nonet with high 0-bit\n   U32U91:\
    \ JUMPE T1,U42U9X     ; done if no more octets\n           LSHC T1,-^D8      \
    \  ; shift next octet into T2\n           ROT T2,-1           ; turn it into nonet\
    \ with high 1 bit\n           PUSHJ P,U42U91      ; recurse for remainder\n  \
    \ U42U9X: LSHC T1,^D9         ; get next nonet back from T2\n           IDPB T1,P1\
    \          ; write nonet\n           POPJ P,\n   /* Write UCS-4 character to UTF-9\
    \ string (C version)\n    * Accepts: pointer to nonet string\n    *          UCS-4\
    \ character to write\n    * Returns: updated pointer\n    */\n   UINT9 *UCS4_to_UTF9\
    \ (UINT9 *utf9P,UINT31 ucs4)\n   {\n     if (ucs4 > 0x100) {\n       if (ucs4\
    \ > 0x10000) {\n         if (ucs4 > 0x1000000)\n           *utf9P++ = 0x100 |\
    \ ((ucs4 >> 24) & 0xff);\n         *utf9P++ = 0x100 | ((ucs4 >> 16) & 0xff);\n\
    \       }\n       *utf9P++ = 0x100 | ((ucs4 >> 8) & 0xff);\n     }\n     *utf9P++\
    \ = ucs4 & 0xff;\n     return utf9P;\n   }\n"
- title: 6.  Implementation Experience
  contents:
  - "6.  Implementation Experience\n   As the sample routines demonstrate, it is quite\
    \ simple to implement\n   UTF-9 and UTF-18 on a nonet-based architecture.  More\
    \ sophisticated\n   routines can be found in ftp://panda.com/tops-20/utools.mac.txt\
    \ or\n   from lingling.panda.com via the file <UTF9>UTOOLS.MAC via ANONYMOUS\n\
    \   [FTP].\n   We are now in the process of implementing support for nonet-based\n\
    \   text files and automated transformation between septet, octet, and\n   nonet\
    \ textual data.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [FTP]           Postel, J. and J. Reynolds, \"\
    File Transfer Protocol\",\n                   STD 9, RFC 959, October 1985.\n\
    \   [IAB-CHARACTER] Weider, C., Preston, C., Simonsen, K., Alvestrand,\n     \
    \              H., Atkinson, R., Crispin, M., and P. Svanberg, \"The\n       \
    \            Report of the IAB Character Set Workshop held 29\n              \
    \     February - 1 March, 1996\", RFC 2130, April 1997.\n   [ISO-10646]     International\
    \ Organization for Standardization,\n                   \"Information Technology\
    \ - Universal Multiple-octet\n                   coded Character Set (UCS)\",\
    \ ISO/IEC Standard 10646,\n                   comprised of ISO/IEC 10646-1:2000,\
    \ \"Information\n                   technology - Universal Multiple-Octet Coded\
    \ Character\n                   Set (UCS) - Part 1: Architecture and Basic\n \
    \                  Multilingual Plane\", ISO/IEC 10646-2:2001,\n             \
    \      \"Information technology - Universal Multiple-Octet\n                 \
    \  Coded Character Set (UCS) - Part 2:  Supplementary\n                   Planes\"\
    \ and ISO/IEC 10646-1:2000/Amd 1:2002,\n                   \"Mathematical symbols\
    \ and other characters\".\n   [KEYWORDS]      Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                   Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [UNICODE]       The Unicode Consortium, \"The Unicode Standard\
    \ -\n                   Version 3.2\", defined by The Unicode Standard,\n    \
    \               Version 3.0 (Reading, MA, Addison-Wesley, 2000.  ISBN\n      \
    \             0-201-61633-5), as amended by the Unicode Standard\n           \
    \        Annex #27: Unicode 3.1 and by the Unicode Standard\n                \
    \   Annex #28: Unicode 3.2, March 2002.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [US-ASCII]      American National Standards\
    \ Institute, \"Coded\n                   Character Set - 7-bit American Standard\
    \ Code for\n                   Information Interchange\", ANSI X3.4, 1986.\n \
    \  [UTF-16]        Hoffman, P. and F. Yergeau, \"UTF-16, an encoding of\n    \
    \               ISO 10646\", RFC 2781, February 2000.\n   [UTF-7]         Goldsmith,\
    \ D. and M. Davis, \"UTF-7 A Mail-Safe\n                   Transformation Format\
    \ of Unicode\", RFC 2152, May\n                   1997.\n   [UTF-8]         Sollins,\
    \ K., \"Architectural Principles of Uniform\n                   Resource Name\
    \ Resolution\", RFC 2276, January 1998.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   As with UTF-8, UTF-9 can represent codepoints\
    \ that are not in\n   [UNICODE].  Applications should validate UTF-9 strings to\
    \ ensure that\n   all codepoints do not exceed the [UNICODE] maximum of U+10FFFF.\n\
    \   The sample routines in this document are for example purposes, and\n   make\
    \ no attempt to validate their arguments, e.g., test for overflow\n   ([UNICODE]\
    \ values great than 0x10ffff) or codepoints used for\n   surrogates.  Besides\
    \ resulting in invalid data, this can also create\n   covert channels.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   The IANA shall reserve the charset names \"UTF-9\"\
    \ and \"UTF-18\" for\n   future assignment.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Mark R. Crispin\n   Panda Programming\n   6158 NE Lariat\
    \ Loop\n   Bainbridge Island, WA 98110-2098\n   Phone: (206) 842-2385\n   EMail:\
    \ UTF9@Lingling.Panda.COM\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78 and at www.rfc-editor.org/copyright.html, and\n   except as set forth\
    \ therein, the authors retain all their rights.\n   This document and the information\
    \ contained herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR,\
    \ THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET\
    \ SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\
    \ EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE\
    \ OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n\
    \   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
