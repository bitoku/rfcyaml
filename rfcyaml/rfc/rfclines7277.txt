Abstract This document defines a YANG data model for management of IP implementations.
The data model includes configuration data and state data.
This document defines a YANG [RFC6020] data model for management of IP implementations.
The data model covers configuration of per interface IPv4 and IPv6 parameters, and mappings of IP addresses to link layer addresses.
It also provides information about which IP addresses are operationally used, and which link layer mappings exist.
Per interface parameters are added through augmentation of the interface data model defined in [RFC7223].
The following terms are defined in [RFC6241] and are not redefined here:  client  configuration data  server  state data
The following terms are defined in [RFC6020] and are not redefined here:  augment  data model
The terminology for describing YANG data models is found in [RFC6020].
Tree Diagrams A simplified graphical representation of the data model is used in this document.
Abbreviations before data node names: "rw" means configuration data (read write), and "ro" means state data (read only).
This document defines the YANG module "ietf ip", which augments the "interface" and "interface state" lists defined in the "ietf interfaces" module [RFC7223] with IP specific data nodes, and also adds IP specific state data.
The data model has the following structure for IP configuration per interface:  rw if:interfaces  rw
rw link layer address    yang:
rw dup addr detect transmits?
boolean  rw create temporary addresses?
boolean  rw temporary valid lifetime?
The data model defines two configuration containers per interface
"ipv4" and "ipv6", representing the IPv4 and IPv6 address families.
In each container, there is a leaf "enabled" that controls whether or not the address family is enabled on that interface, and a leaf "forwarding" that controls whether or not IP packet forwarding for the address family is enabled on the interface.
In each container, there is also a list of configured addresses, and a list of configured mappings from IP addresses to link layer addresses.
The data model has the following structure for IP state per interface:  ro if:interfaces state  ro
neighbor origin  ro is router?
The data model defines two state containers per interface
"ipv4" and "ipv6", representing the IPv4 and IPv6 address families.
In each container, there is a leaf "forwarding" that indicates whether or not IP packet forwarding is enabled on that interface.
In each container, there is also a list of all addresses in use and a list of known mappings from IP addresses to link layer addresses.
Relationship to the IP MIB
If the device implements the IP MIB [RFC4293], each entry in the "ipv4/address" and "ipv6/address" lists is mapped to one ipAddressEntry, where the ipAddressIfIndex refers to the "address" entry's interface.
The IP MIB defines objects to control IPv6 Router Advertisement messages.
The corresponding YANG data nodes are defined in [ROUTING MGMT].
The entries in "ipv4/neighbor" and "ipv6/neighbor" are mapped to ipNetToPhysicalTable.
The following tables list the YANG data nodes with corresponding objects in the IP MIB.
YANG Interface State Data Nodes and Related IP MIB Objects 4.
This module imports typedefs from [RFC6991] and [RFC7223], and it references [RFC0791], [RFC0826], [RFC2460], [RFC4861], [RFC4862], [RFC4941], and [RFC7217].
> file "ietf ip@2014 06 16.yang
" module ietf ip { namespace "urn:
yang:ietf ip"; prefix ip; import ietf interfaces { prefix if; } import ietf inet types { prefix inet; } import ietf yang types { prefix yang; } organization "IETF NETMOD (NETCONF Data Modeling Language) Working Group"; contact
>"; description "This module contains a collection of YANG definitions for configuring IP implementations.
Copyright (c) 2014 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 7277; see the RFC itself for full legal notices."
non contiguous netmasks { description "Indicates support for configuring non contiguous subnet masks.";
} feature ipv6 privacy autoconf { description "Indicates support for Privacy Extensions for Stateless Address Autoconfiguration in IPv6."
; } enum static { description "Indicates that the address has been statically configured for example, using NETCONF or a Command Line Interface."
; } enum dhcp { description "Indicates an address that has been assigned to this system by a DHCP server."
; } enum link layer { description "Indicates an address created by IPv6 stateless autoconfiguration that embeds a link layer address in its interface identifier."
; } enum random { description "Indicates an address chosen by the system at random, e.g., an IPv4 address within 169.254/16, an RFC 4941 temporary address, or an RFC 7217 semantically opaque address."
Privacy Extensions for Stateless Address Autoconfiguration in IPv6 RFC 7217:
; } enum dynamic { description "Indicates that the mapping has been dynamically resolved using, e.g., IPv4 ARP or the IPv6 Neighbor Discovery protocol."
if:interface" { description "Parameters for configuring IP on interfaces.
If an interface is not capable of running IP, the server must not allow the client to configure these parameters."; container ipv4 { presence "Enables IPv4 unless the 'enabled' leaf (which defaults to 'true') is set to 'false'"; description "Parameters for the IPv4 address family."; leaf enabled { type boolean; default true; description "Controls whether IPv4 is enabled or disabled on this interface.
The server may restrict the allowed values for this leaf, depending on the interface's type.
If this leaf is not configured, the operationally used MTU depends on the interface's type."
ipv4 address no zone; description
"The IPv4 address on the interface."
Entries in this list are used as static entries in the ARP Cache."
; reference "RFC 826: An Ethernet Address Resolution Protocol"; leaf ip { type inet:
IPv6 hosts do not (except those source routed via the host).
The server may restrict the allowed values for this leaf, depending on the interface's type.
If this leaf is not configured, the operationally used MTU depends on the interface's type."
; reference "RFC 2460: Internet Protocol, Version 6 (IPv6
; leaf ip { type inet:ipv6 address no zone; description "The IPv6 address on the interface."
; } leaf prefix length { type uint8 { range "0
; description "The number of consecutive Neighbor Solicitation messages sent while performing Duplicate Address Detection on a tentative address.
A value of zero indicates that Duplicate Address Detection is not performed on tentative addresses.
; reference "RFC 4862: IPv6 Stateless Address Autoconfiguration"; leaf create global addresses { type boolean; default true; description "If enabled, the host creates global addresses as described in RFC 4862.
Operational state data nodes  / augment "/if:interfaces state/
if:interface" { description "Data nodes for the operational state of IP on interfaces."; container ipv4 { presence "Present
if IPv4 is enabled on this interface"; config false; description "Interface specific parameters for the IPv4 address family."; leaf forwarding { type boolean; description "Indicates whether IPv4 packet forwarding is enabled or disabled on this interface."
This list represents the ARP Cache."
; reference "RFC 826: An Ethernet Address Resolution Protocol"; leaf ip { type inet:
"Indicates whether IPv6 packet forwarding is enabled or disabled on this interface."
Internet Protocol, Version 6 (IPv6
; leaf ip { type inet:ipv6 address no zone; description "The IPv6 address on the interface."
; } leaf prefix length { type uint8 { range "0
This is a valid address that can appear as the destination or source address of a packet."
; } enum deprecated { description "
This isn't a valid address, and it shouldn't appear as the destination or source address of a packet."
; } enum tentative { description "
The uniqueness of the address on the link is being verified.
Addresses in this state should not be used for general communication and should only be used to determine the uniqueness of the address."
Most of the states correspond to states from the IPv6 Stateless Address Autoconfiguration protocol."
Rather than probe the neighbor immediately, however, delay sending probes for a short while in order to give upper layer protocols a chance to provide reachability confirmation."
This document registers a URI in the "IETF XML Registry" [RFC3688].
Following the format in RFC 3688, the following registration has been made.
The NETMOD WG of the IETF.
N/A; the requested URI is an XML namespace.
This document registers a YANG module in the "YANG Module Names" registry [RFC6020].
The YANG module defined in this memo is designed to be accessed via the NETCONF protocol [RFC6241].
The lowest NETCONF layer is the secure transport layer and the mandatory to implement secure transport
The NETCONF access control model [RFC6536] provides the means to restrict access for particular NETCONF users to a pre configured subset of all available NETCONF protocol operations and content.
There are a number of data nodes defined in the YANG module which are writable/creatable/deletable (i.e., config true, which is the default).
These data nodes may be considered sensitive or vulnerable in some network environments.
Write operations (e.g., edit config) to these data nodes without proper protection can have a negative effect on network operations.
These are the subtrees and data nodes and their sensitivity/vulnerability:
These leafs are used to enable or disable IPv4 and IPv6 on a specific interface.
By enabling a protocol on an interface, an attacker might be able to create an unsecured path into a node (or through it if routing is also enabled).
By disabling a protocol on an interface, an attacker might be able to force packets to be routed through some other interface or deny access to some or all of the network via that protocol.
These lists specify the configured IP addresses on an interface.
By modifying this information, an attacker can cause a node to either ignore messages destined to it or accept (at least at the IP layer) messages it would otherwise ignore.
The use of filtering or security associations may reduce the potential damage in the latter case.
These leafs allow a client to enable or disable the forwarding functions on the entity.
By disabling the forwarding functions, an attacker would possibly be able to deny service to users.
By enabling the forwarding functions, an attacker could open a conduit into an area.
This might result in the area providing transit for packets it shouldn't, or it might allow the attacker access to the area, bypassing security safeguards.
The leafs in this branch control the autoconfiguration of IPv6 addresses and, in particular, whether or not temporary addresses are used.
By modifying the corresponding leafs, an attacker might impact the addresses used by a node and thus indirectly the privacy of the users using the node.
Setting these leafs to very small values can be used to slow down interfaces.
Appendix A.  Example: NETCONF <get> Reply
This section gives an example of a reply to the NETCONF <get> request for a device that implements the data model defined in this document.
The example is written in XML [XML].
base:1.0" message id "101"> <data
<prefix length>24</prefix length> </address> </ipv4
:db8::10</ip> <prefix length>32</prefix length> </address
> <dup addr detect transmits>0</dup addr detect transmits> </ipv6
> </interface> </interfaces> <interfaces state xmlns
other parameters from ietf interfaces omitted
> <neighbor> <ip>192.0.2.2</ip> <link layer address>00:01:02:03:04:05</link layer address
<link layer address>00:01:02:03:04:05</link layer address> <origin
