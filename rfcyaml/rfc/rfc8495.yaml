- contents:
  - "                       Allocation Token Extension\n             for the Extensible
    Provisioning Protocol (EPP)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes an Extensible Provisioning Protocol (EPP)\n
    \  extension for including an Allocation Token in \"query\" and\n   \"transform\"
    commands.  The Allocation Token is used as a credential\n   that authorizes a
    client to request the allocation of a specific\n   object from the server using
    one of the EPP transform commands,\n   including \"create\" and \"transfer\".\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8495.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n     1.1.  Conventions Used in This Document . . . . . . . . .
    . . .   3\n   2.  Object Attributes . . . . . . . . . . . . . . . . . . . . .
    .   3\n     2.1.  Allocation Token  . . . . . . . . . . . . . . . . . . . .   4\n
    \  3.  EPP Command Mapping . . . . . . . . . . . . . . . . . . . . .   4\n     3.1.
    \ EPP Query Commands  . . . . . . . . . . . . . . . . . . .   4\n       3.1.1.
    \ EPP <check> Command . . . . . . . . . . . . . . . . .   4\n       3.1.2.  EPP
    <info> Command  . . . . . . . . . . . . . . . . .   8\n       3.1.3.  EPP <transfer>
    Query Command  . . . . . . . . . . . .  10\n     3.2.  EPP Transform Commands
    \ . . . . . . . . . . . . . . . . .  11\n       3.2.1.  EPP <create> Command  .
    . . . . . . . . . . . . . . .  11\n       3.2.2.  EPP <delete> Command  . . .
    . . . . . . . . . . . . .  12\n       3.2.3.  EPP <renew> Command . . . . . .
    . . . . . . . . . . .  12\n       3.2.4.  EPP <transfer> Command  . . . . . .
    . . . . . . . . .  12\n       3.2.5.  EPP <update> Command  . . . . . . . . .
    . . . . . . .  13\n   4.  Formal Syntax . . . . . . . . . . . . . . . . . . .
    . . . . .  14\n     4.1.  Allocation Token Extension Schema . . . . . . . . .
    . . .  14\n   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . .
    .  15\n     5.1.  XML Namespace . . . . . . . . . . . . . . . . . . . . . .  15\n
    \    5.2.  EPP Extension Registry  . . . . . . . . . . . . . . . . .  15\n   6.
    \ Security Considerations . . . . . . . . . . . . . . . . . . .  15\n   7.  References
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  16\n     7.1.  Normative
    References  . . . . . . . . . . . . . . . . . .  16\n     7.2.  Informative References
    \ . . . . . . . . . . . . . . . . .  17\n   Acknowledgements  . . . . . . . .
    . . . . . . . . . . . . . . . .  17\n   Authors' Addresses  . . . . . . . . .
    . . . . . . . . . . . . . .  17\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes an extension mapping for version
    1.0 of the\n   Extensible Provisioning Protocol (EPP) [RFC5730].  This mapping,\n
    \  which is an extension to EPP object mappings similar to the EPP\n   domain
    name mapping [RFC5731], supports passing an Allocation Token\n   as a credential
    that authorizes a client to request the allocation of\n   a specific object from
    the server using one of the EPP transform\n   commands, including \"create\" and
    \"transfer\".\n   Allocation is when a server assigns the sponsoring client of
    an\n   object based on the use of an Allocation Token credential.  Examples\n
    \  include allocating a registration based on a pre-eligibility\n   Allocation
    Token, allocating a premium domain name registration based\n   on an auction Allocation
    Token, allocating a registration based on a\n   founders Allocation Token, and
    allocating an existing domain name\n   held by the server or by a different sponsoring
    client based on an\n   Allocation Token that is passed with a transfer command.\n
    \  Clients pass an Allocation Token to the server for validation, and\n   the
    server determines if the supplied Allocation Token is one\n   supported by the
    server.  It is up to server policy which EPP\n   transform commands and which
    objects require the Allocation Token.\n   The Allocation Token MAY be returned
    to an authorized client for\n   passing out-of-band to a client that uses it with
    an EPP transform\n   command.\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this
      document are to be interpreted as described in\n   BCP 14 [RFC2119] [RFC8174]
      when, and only when, they appear in all\n   capitals, as shown here.\n   XML
      is case sensitive.  Unless stated otherwise, XML specifications\n   and examples
      provided in this document MUST be interpreted in the\n   character case presented
      in order to develop a conforming\n   implementation.\n   In examples, \"C:\"
      represents lines sent by a protocol client and \"S:\"\n   represents lines returned
      by a protocol server.  Indentation and\n   white space in the examples are provided
      only to illustrate element\n   relationships and are not REQUIRED in the protocol.\n
      \  The XML namespace prefix \"allocationToken\" is used for the namespace\n
      \  \"urn:ietf:params:xml:ns:allocationToken-1.0\", but implementations\n   MUST
      NOT depend on it and instead employ a proper namespace-aware XML\n   parser
      and serializer to interpret and output the XML documents.\n   The \"abc123\"
      token value is used as a placeholder value in the\n   examples.  The server
      MUST support token values that follow the\n   Security Considerations (Section
      6).\n   The domain-object attribute values, including the \"2fooBAR\"\n   <domain:pw>
      value, in the examples are provided for illustration\n   purposes only.  Refer
      to [RFC5731] for details on the domain-object\n   attributes.\n"
    title: 1.1.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  Object Attributes\n   This extension adds additional elements to EPP object
    mappings\n   similar to the EPP domain name mapping [RFC5731].  Only those new\n
    \  elements are described here.\n"
  - contents:
    - "2.1.  Allocation Token\n   The Allocation Token is a simple XML \"token\" type.
      \ The exact format\n   of the Allocation Token is up to server policy.  The
      server MAY have\n   the Allocation Token for each object to match against the
      Allocation\n   Token passed by the client to authorize the allocation of the
      object.\n   The <allocationToken:allocationToken> element is used for all of
      the\n   supported EPP commands as well as the info response.  If the supplied\n
      \  Allocation Token passed to the server does not apply to the object,\n   the
      server MUST return an EPP error result code of 2201.\n   Authorization information,
      similar to what is defined in the EPP\n   domain name mapping [RFC5731], is
      associated with objects to\n   facilitate transfer operations.  The authorization
      information is\n   assigned when an object is created.  The Allocation Token
      and the\n   authorization information are both credentials but are used for\n
      \  different purposes and in different ways.  The Allocation Token is\n   used
      to facilitate the allocation of an object instead of\n   transferring the sponsorship
      of the object.  The Allocation Token is\n   not managed by the client but is
      validated by the server to authorize\n   assigning the initial sponsoring client
      of the object.\n   An example <allocationToken:allocationToken> element with
      value of\n   \"abc123\":\n   <allocationToken:allocationToken xmlns:allocationToken=\n
      \            \"urn:ietf:params:xml:ns:allocationToken-1.0\">\n     abc123\n
      \  </allocationToken:allocationToken>\n"
    title: 2.1.  Allocation Token
  title: 2.  Object Attributes
- contents:
  - "3.  EPP Command Mapping\n   A detailed description of the EPP syntax and semantics
    can be found\n   in the EPP core protocol specification [RFC5730].\n"
  - contents:
    - "3.1.  EPP Query Commands\n   EPP provides three commands to retrieve object
      information: <check>\n   to determine if an object can be provisioned, <info>
      to retrieve\n   information associated with an object, and <transfer> to retrieve\n
      \  object-transfer status information.\n"
    - contents:
      - "3.1.1.  EPP <check> Command\n   This extension defines additional elements
        to extend the EPP <check>\n   command of an object mapping similar to the
        mapping specified in\n   [RFC5731].\n   This extension allows clients to check
        the availability of an object\n   with an Allocation Token, as described in
        Section 2.1.  Clients can\n   check if an object can be created using the
        Allocation Token.  The\n   Allocation Token is applied to all object names
        included in the EPP\n   <check> command.\n   The following is an example <check>
        command for the\n   allocation.example domain name using the\n   <allocationToken:allocationToken>
        extension with the allocation token\n   of 'abc123':\n   C:<?xml version=\"1.0\"
        encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:    <check>\n   C:      <domain:check\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>allocation.example</domain:name>\n   C:      </domain:check>\n
        \  C:    </check>\n   C:    <extension>\n   C:      <allocationToken:allocationToken\n
        \  C:        xmlns:allocationToken=\n   C:          \"urn:ietf:params:xml:ns:allocationToken-1.0\">\n
        \  C:        abc123\n   C:      </allocationToken:allocationToken>\n   C:
        \   </extension>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n
        \  C:</epp>\n   If the query was successful, the server replies with a <check>\n
        \  response providing the availability status of the queried object\n   based
        on the following Allocation Token cases where the object is\n   otherwise
        available:\n   1.  If an object requires an Allocation Token and the Allocation\n
        \      Token does apply to the object, then the server MUST return the\n       availability
        status as available (e.g., the \"avail\" attribute is\n       \"1\" or \"true\").\n
        \  2.  If an object requires an Allocation Token and the Allocation\n       Token
        does not apply to the object, then the server SHOULD return\n       the availability
        status as unavailable (e.g., the \"avail\"\n       attribute is \"0\" or \"false\").\n
        \  3.  If an object does not require an Allocation Token, the server MAY\n
        \      return the availability status as available (e.g., the \"avail\"\n
        \      attribute is \"1\" or \"true\").\n   The following is an example <check>
        domain response for a <check>\n   command using the <allocationToken:allocationToken>
        extension:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  S: <response>\n   S:  <result code=\"1000\">\n   S:   <msg lang=\"en-US\">Command
        completed successfully</msg>\n   S:  </result>\n   S:  <resData>\n   S:   <domain:chkData\n
        \  S:     xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n   S:    <domain:cd>\n
        \  S:     <domain:name avail=\"1\">allocation.example</domain:name>\n   S:
        \   </domain:cd>\n   S:   </domain:chkData>\n   S:  </resData>\n   S:  <trID>\n
        \  S:   <clTRID>ABC-DEF-12345</clTRID>\n   S:   <svTRID>54321-XYZ</svTRID>\n
        \  S:  </trID>\n   S: </response>\n   S:</epp>\n   The following is an example
        <check> command with the\n   <allocationToken:allocationToken> extension for
        the\n   allocation.example and allocation2.example domain names.\n   Availability
        of allocation.example and allocation2.example domain\n   names are based on
        the Allocation Token 'abc123':\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
        \  C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C: <command>\n   C:
        \ <check>\n   C:   <domain:check\n   C:     xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:    <domain:name>allocation.example</domain:name>\n   C:    <domain:name>allocation2.example</domain:name>\n
        \  C:   </domain:check>\n   C:  </check>\n   C:  <extension>\n   C:   <allocationToken:allocationToken\n
        \  C:     xmlns:allocationToken=\n   C:       \"urn:ietf:params:xml:ns:allocationToken-1.0\">\n
        \  C:     abc123\n   C:   </allocationToken:allocationToken>\n   C:  </extension>\n
        \  C:  <clTRID>ABC-DEF-12345</clTRID>\n   C: </command>\n   C:</epp>\n   The
        following is an example <check> domain response for multiple\n   domain names
        in the <check> command using the\n   <allocationToken:allocationToken> extension,
        where the Allocation\n   Token 'abc123' matches allocation.example but does
        not match\n   allocation2.example:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
        \  S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S: <response>\n   S:
        \ <result code=\"1000\">\n   S:   <msg lang=\"en-US\">Command completed successfully</msg>\n
        \  S:  </result>\n   S:  <resData>\n   S:   <domain:chkData\n   S:     xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  S:    <domain:cd>\n   S:     <domain:name avail=\"1\">allocation.example</domain:name>\n
        \  S:    </domain:cd>\n   S:    <domain:cd>\n   S:     <domain:name avail=\"0\">allocation2.example</domain:name>\n
        \  S:     <domain:reason>Allocation Token mismatch</domain:reason>\n   S:
        \   </domain:cd>\n   S:   </domain:chkData>\n   S:  </resData>\n   S:  <trID>\n
        \  S:   <clTRID>ABC-DEF-12345</clTRID>\n   S:   <svTRID>54321-XYZ</svTRID>\n
        \  S:  </trID>\n   S: </response>\n   S:</epp>\n   This extension does not
        add any elements to the EPP <check> response\n   described in [RFC5730].\n"
      title: 3.1.1.  EPP <check> Command
    - contents:
      - "3.1.2.  EPP <info> Command\n   This extension defines additional elements
        to extend the EPP <info>\n   command of an object mapping similar to the mapping
        specified in\n   [RFC5731].\n   The EPP <info> command allows a client to
        request information\n   associated with an existing object.  Authorized clients
        MAY retrieve\n   the Allocation Token (Section 2.1) along with the other object\n
        \  information by supplying the <allocationToken:info> element in the\n   command.
        \ The <allocationToken:info> element is an empty element that\n   serves as
        a marker to the server to return the\n   <allocationToken:allocationToken>
        element in the info response.  If\n   the client is not authorized to receive
        the Allocation Token, the\n   server MUST return an EPP error result code
        of 2201.  If the client\n   is authorized to receive the Allocation Token,
        but there is no\n   Allocation Token associated with the object, the server
        MUST return\n   an EPP error result code of 2303.  The authorization is subject
        to\n   server policy.\n   The following is an example <info> command with
        the\n   allocationToken:info extension for the allocation.example domain\n
        \  name:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n
        \  C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:
        \  <info>\n   C:    <domain:info\n   C:      xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:      <domain:name>allocation.example</domain:name>\n   C:    </domain:info>\n
        \  C:   </info>\n   C:   <extension>\n   C:      <allocationToken:info\n   C:
        \       xmlns:allocationToken=\n   C:          \"urn:ietf:params:xml:ns:allocationToken-1.0\"/>\n
        \  C:   </extension>\n   C:   <clTRID>ABC-12345</clTRID>\n   C:  </command>\n
        \  C:</epp>\n   If the query was successful, the server replies with an\n
        \  <allocationToken:allocationToken> element along with the regular EPP\n
        \  <resData>.  The <allocationToken:allocationToken> element is\n   described
        in Section 2.1.\n   The following is an example <info> domain response using
        the\n   <allocationToken:allocationToken> extension:\n   S:<?xml version=\"1.0\"
        encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  S:  <response>\n   S:    <result code=\"1000\">\n   S:      <msg>Command
        completed successfully</msg>\n   S:    </result>\n   S:    <resData>\n   S:
        \     <domain:infData\n   S:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  S:        <domain:name>allocation.example</domain:name>\n   S:        <domain:roid>EXAMPLE1-REP</domain:roid>\n
        \  S:        <domain:status s=\"pendingCreate\"/>\n   S:        <domain:registrant>jd1234</domain:registrant>\n
        \  S:        <domain:contact type=\"admin\">sh8013</domain:contact>\n   S:
        \       <domain:contact type=\"tech\">sh8013</domain:contact>\n   S:        <domain:clID>ClientX</domain:clID>\n
        \  S:        <domain:crID>ClientY</domain:crID>\n   S:        <domain:crDate>2012-04-03T22:00:00.0Z</domain:crDate>\n
        \  S:        <domain:authInfo>\n   S:          <domain:pw>2fooBAR</domain:pw>\n
        \  S:        </domain:authInfo>\n   S:      </domain:infData>\n   S:    </resData>\n
        \  S:    <extension>\n   S:      <allocationToken:allocationToken\n   S:        xmlns:allocationToken=\n
        \  S:          \"urn:ietf:params:xml:ns:allocationToken-1.0\">\n   S:        abc123\n
        \  S:      </allocationToken:allocationToken>\n   S:    </extension>\n   S:
        \   <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n   S:      <svTRID>54321-XYZ</svTRID>\n
        \  S:    </trID>\n   S:  </response>\n   S:</epp>\n"
      title: 3.1.2.  EPP <info> Command
    - contents:
      - "3.1.3.  EPP <transfer> Query Command\n   This extension does not add any
        elements to the EPP <transfer> query\n   command or <transfer> query response
        described in [RFC5730].\n"
      title: 3.1.3.  EPP <transfer> Query Command
    title: 3.1.  EPP Query Commands
  - contents:
    - "3.2.  EPP Transform Commands\n   EPP provides five commands to transform objects:
      <create> to create\n   an instance of an object, <delete> to delete an instance
      of an\n   object, <renew> to extend the validity period of an object,\n   <transfer>
      to manage object sponsorship changes, and <update> to\n   change information
      associated with an object.\n"
    - contents:
      - "3.2.1.  EPP <create> Command\n   This extension defines additional elements
        to extend the EPP <create>\n   command of an object mapping similar to the
        mapping specified in\n   [RFC5731].\n   The EPP <create> command provides
        a transform operation that allows a\n   client to create an instance of an
        object.  In addition to the EPP\n   command elements described in an object
        mapping similar to the\n   mapping specified in [RFC5731], the command MUST
        contain a child\n   <allocationToken:allocationToken> element for the client
        to be\n   authorized to create and allocate the object.  If the Allocation\n
        \  Token does not apply to the object, the server MUST return an EPP\n   error
        result code of 2201.\n   The following is an example <create> command to create
        a domain\n   object with an Allocation Token:\n   C:<?xml version=\"1.0\"
        encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:    <create>\n   C:      <domain:create\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>allocation.example</domain:name>\n   C:        <domain:registrant>jd1234</domain:registrant>\n
        \  C:        <domain:contact type=\"admin\">sh8013</domain:contact>\n   C:
        \       <domain:contact type=\"tech\">sh8013</domain:contact>\n   C:        <domain:authInfo>\n
        \  C:          <domain:pw>2fooBAR</domain:pw>\n   C:        </domain:authInfo>\n
        \  C:      </domain:create>\n   C:    </create>\n   C:    <extension>\n   C:
        \     <allocationToken:allocationToken\n   C:        xmlns:allocationToken=\n
        \  C:          \"urn:ietf:params:xml:ns:allocationToken-1.0\">\n   C:        abc123\n
        \  C:      </allocationToken:allocationToken>\n   C:    </extension>\n   C:
        \   <clTRID>ABC-12345</clTRID>\n   C:  </command>\n   C:</epp>\n   This extension
        does not add any elements to the EPP <create> response\n   described in [RFC5730].\n"
      title: 3.2.1.  EPP <create> Command
    - contents:
      - "3.2.2.  EPP <delete> Command\n   This extension does not add any elements
        to the EPP <delete> command\n   or <delete> response described in [RFC5730].\n"
      title: 3.2.2.  EPP <delete> Command
    - contents:
      - "3.2.3.  EPP <renew> Command\n   This extension does not add any elements
        to the EPP <renew> command\n   or <renew> response described in [RFC5730].\n"
      title: 3.2.3.  EPP <renew> Command
    - contents:
      - "3.2.4.  EPP <transfer> Command\n   This extension defines additional elements
        to extend the EPP\n   <transfer> command of an object mapping similar to the
        mapping\n   specified in [RFC5731].\n   The EPP <transfer> command provides
        a transform operation that allows\n   a client to request the transfer of
        an object.  In addition to the\n   EPP command elements described in an object
        mapping similar to the\n   mapping specified in [RFC5731], the command MUST
        contain a child\n   <allocationToken:allocationToken> element for the client
        to be\n   authorized to transfer and allocate the object.  The authorization\n
        \  associated with the Allocation Token is in addition to, and does not\n
        \  replace, the authorization mechanism defined for the object's\n   <transfer>
        command.  If the Allocation Token is invalid or not\n   required for the object,
        the server MUST return an EPP error result\n   code of 2201.\n   The following
        is an example <transfer> command to allocate the domain\n   object with the
        Allocation Token:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n
        \  C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:
        \   <transfer op=\"request\">\n   C:      <domain:transfer\n   C:        xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>example1.tld</domain:name>\n   C:        <domain:period
        unit=\"y\">1</domain:period>\n   C:        <domain:authInfo>\n   C:          <domain:pw>2fooBAR</domain:pw>\n
        \  C:        </domain:authInfo>\n   C:      </domain:transfer>\n   C:    </transfer>\n
        \  C:    <extension>\n   C:      <allocationToken:allocationToken\n   C:        xmlns:allocationToken=\n
        \  C:          \"urn:ietf:params:xml:ns:allocationToken-1.0\">\n   C:        abc123\n
        \  C:      </allocationToken:allocationToken>\n   C:    </extension>\n   C:
        \   <clTRID>ABC-12345</clTRID>\n   C:  </command>\n   C:</epp>\n   This extension
        does not add any elements to the EPP <transfer>\n   response described in
        [RFC5730].\n"
      title: 3.2.4.  EPP <transfer> Command
    - contents:
      - "3.2.5.  EPP <update> Command\n   This extension does not add any elements
        to the EPP <update> command\n   or <update> response described in [RFC5730].\n"
      title: 3.2.5.  EPP <update> Command
    title: 3.2.  EPP Transform Commands
  title: 3.  EPP Command Mapping
- contents:
  - "4.  Formal Syntax\n   One schema is presented here: the EPP Allocation Token
    Extension\n   schema.\n   The formal syntax presented here is a complete schema
    representation\n   of the object mapping suitable for automated validation of
    EPP XML\n   instances.  The BEGIN and END tags are not part of the schema; they\n
    \  are used to note the beginning and ending of the schema for URI\n   registration
    purposes.\n"
  - contents:
    - "4.1.  Allocation Token Extension Schema\n   BEGIN\n   <?xml version=\"1.0\"
      encoding=\"UTF-8\"?>\n   <schema xmlns=\"http://www.w3.org/2001/XMLSchema\"\n
      \    xmlns:allocationToken=\"urn:ietf:params:xml:ns:allocationToken-1.0\"\n
      \    targetNamespace=\"urn:ietf:params:xml:ns:allocationToken-1.0\"\n     elementFormDefault=\"qualified\">\n
      \    <annotation>\n       <documentation>\n         Extensible Provisioning
      Protocol v1.0\n         Allocation Token Extension\n       </documentation>\n
      \    </annotation>\n     <!-- Element used in info command to get allocation
      token. -->\n     <element name=\"info\">\n       <complexType>\n         <complexContent>\n
      \          <restriction base=\"anyType\" />\n         </complexContent>\n       </complexType>\n
      \    </element>\n     <!-- Allocation Token used in transform\n       commands
      and info response -->\n     <element name=\"allocationToken\"\n       type=\"allocationToken:allocationTokenType\"
      />\n     <simpleType name=\"allocationTokenType\">\n       <restriction base=\"token\">\n
      \        <minLength value=\"1\" />\n       </restriction>\n     </simpleType>\n
      \  <!-- End of schema. -->\n   </schema>\n   END\n"
    title: 4.1.  Allocation Token Extension Schema
  title: 4.  Formal Syntax
- contents:
  - '5.  IANA Considerations

    '
  - contents:
    - "5.1.  XML Namespace\n   This document uses URNs to describe XML namespaces
      and XML schemas\n   conforming to a registry mechanism described in [RFC3688].\n
      \  The allocationToken namespace has been registered as follows.\n      URI:
      urn:ietf:params:xml:ns:allocationToken-1.0\n      Registrant Contact: IESG\n
      \     XML: None.  Namespace URIs do not represent an XML specification.\n   The
      allocationToken XML schema has been registered as follows.\n      URI: urn:ietf:params:xml:schema:allocationToken-1.0\n
      \     Registrant Contact: IESG\n      XML: See the \"Formal Syntax\" section
      of this document.\n"
    title: 5.1.  XML Namespace
  - contents:
    - "5.2.  EPP Extension Registry\n   The following entry has been added to the
      Extensions for the\n   Extensible Provisioning Protocol (EPP) registry, as described
      in\n   [RFC7451].\n   Name of Extension: Allocation Token Extension for the
      Extensible\n   Provisioning Protocol (EPP)\n   Document Status: Standards Track\n
      \  Reference: RFC 8495\n   Registrant: IESG <iesg@ietf.org>\n   TLDs: Any\n
      \  IPR Disclosure: None\n   Status: Active\n   Notes: None\n"
    title: 5.2.  EPP Extension Registry
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   The mapping described in this document does not
    provide any security\n   services beyond those described by EPP [RFC5730] and
    protocol layers\n   used by EPP.  The security considerations described in these
    other\n   specifications apply to this specification as well.\n   The mapping
    acts as a conduit for the passing of Allocation Tokens\n   between a client and
    a server.  The definition of the Allocation\n   Token SHOULD be defined outside
    of this mapping.  The following are\n   security considerations in the definition
    and use of an Allocation\n   Token:\n   1.  An Allocation Token should be considered
    secret information by\n       the client; it SHOULD be protected at rest and MUST
    be protected\n       in transit.\n   2.  An Allocation Token should be single
    use, meaning it should be\n       unique per object and per allocation operation.\n
    \  3.  An Allocation Token should have a limited life with some form of\n       expiry
    in the Allocation Token, if generated by a trusted third\n       party, or with
    a server-side expiry, if generated by the server.\n   4.  An Allocation Token
    should use a strong random value if it is\n       based on an unsigned code.\n
    \  5.  An Allocation Token should leverage digital signatures to confirm\n       its
    authenticity if generated by a trusted third party.\n   6.  An Allocation Token
    that is signed XML should be encoded (e.g.,\n       base64 [RFC4648]) to mitigate
    server validation issues.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              DOI
      10.17487/RFC3688, January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n
      \  [RFC5730]  Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\",\n
      \             STD 69, RFC 5730, DOI 10.17487/RFC5730, August 2009,\n              <https://www.rfc-editor.org/info/rfc5730>.\n
      \  [RFC5731]  Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\n              Domain
      Name Mapping\", STD 69, RFC 5731,\n              DOI 10.17487/RFC5731, August
      2009,\n              <https://www.rfc-editor.org/info/rfc5731>.\n   [RFC8174]
      \ Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC4648]  Josefsson, S., \"The Base16, Base32,
      and Base64 Data\n              Encodings\", RFC 4648, DOI 10.17487/RFC4648,
      October 2006,\n              <https://www.rfc-editor.org/info/rfc4648>.\n   [RFC7451]
      \ Hollenbeck, S., \"Extension Registry for the Extensible\n              Provisioning
      Protocol\", RFC 7451, DOI 10.17487/RFC7451,\n              February 2015, <https://www.rfc-editor.org/info/rfc7451>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgements\n   The authors wish to acknowledge the original concept for
    this\n   document and the efforts in the initial draft versions of this\n   document
    by Trung Tran and Sharon Wodjenski.\n   Special suggestions that have been incorporated
    into this document\n   were provided by Ben Campbell, Scott Hollenbeck, Benjamin
    Kaduk,\n   Mirja Kuehlewind, Rubens Kuhl, Alexander Mayrhofer, Patrick Mevzek,\n
    \  Eric Rescoria, and Adam Roach.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   James Gould\n   VeriSign, Inc.\n   12061 Bluemont Way\n
    \  Reston, VA  20190\n   United States of America\n   Email: jgould@verisign.com\n
    \  URI:   http://www.verisign.com\n   Kal Feher\n   Neustar\n   lvl 8/10 Queens
    Road\n   Melbourne, VIC  3004\n   Australia\n   Email: ietf@feherfamily.org\n
    \  URI:   http://www.neustar.biz\n"
  title: Authors' Addresses
