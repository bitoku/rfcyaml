- title: __initial_text__
  contents:
  - '               ENUM Implementation Issues and Experiences

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document captures experiences in implementing systems based\
    \ on\n   the ENUM protocol and experiences of ENUM data that have been created\n\
    \   by others.  As such, it clarifies the ENUM and Dynamic Delegation\n   Discovery\
    \ System standards.  Its aim is to help others by reporting\n   both what is \"\
    out there\" and potential pitfalls in interpreting the\n   set of documents that\
    \ specify the ENUM protocol.  It does not revise\n   the standards but is intended\
    \ to provide technical input to future\n   revisions of those documents.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Document Goal ..............................................3\n  \
    \    1.2. Terminology ................................................3\n   2.\
    \ Character Sets and ENUM .........................................4\n      2.1.\
    \ Character Sets - Non-ASCII Considered Harmful ..............4\n           2.1.1.\
    \ Non-ASCII in the Regular Expression Field ...........5\n           2.1.2. Non-ASCII\
    \ Support - Conclusions .....................6\n      2.2. Case Sensitivity ...........................................7\n\
    \      2.3. Regexp Field Delimiter .....................................7\n  \
    \    2.4. Regexp Meta-Character Issue ................................8\n   3.\
    \ Unsupported NAPTRs ..............................................8\n      3.1.\
    \ Non-Compliant Client Behaviour .............................9\n   4. ENUM NAPTR\
    \ Processing ..........................................10\n      4.1. Common Non-Compliant\
    \ Client Behaviour .....................11\n           4.1.1. Example ............................................11\n\
    \      4.2. Order/Priority Values - Processing Sequence ...............12\n  \
    \    4.3. Use of Order and Preference Fields ........................13\n    \
    \  4.4. NAPTRs with Identical ORDER/PRIORITY Values ...............14\n      \
    \     4.4.1. Compound NAPTRs and Implicit\n                  ORDER/REFERENCE Values\
    \ .............................14\n      4.5. Processing Order Value across Domains\
    \ .....................15\n   5. Non-Terminal NAPTR Processing ..................................16\n\
    \      5.1. Non-Terminal NAPTRs - Necessity ...........................16\n  \
    \    5.2. Non-Terminal NAPTRs - Considerations ......................17\n    \
    \       5.2.1. Non-Terminal NAPTRs - General ......................17\n      \
    \     5.2.2. Non-Terminal NAPTRs - Loop Detection and Response ..17\n        \
    \   5.2.3. Field Content in Non-Terminal NAPTRs ...............17\n   6. Backwards\
    \ Compatibility ........................................20\n      6.1. Services\
    \ Field Syntax .....................................20\n   7. Collected Implications\
    \ for ENUM Provisioning ...................21\n   8. Collected Implications for\
    \ ENUM Clients ........................23\n      8.1. Non-Terminal NAPTR Processing\
    \ .............................25\n   9. Security Considerations ........................................26\n\
    \   10. Acknowledgements ..............................................27\n  \
    \ 11. References ....................................................27\n    \
    \  11.1. Normative References .....................................27\n      11.2.\
    \ Informative References ...................................29\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Document Goal
  contents:
  - "1.1.  Document Goal\n   The goal of this document is to clarify the ENUM and\
    \ Dynamic\n   Delegation Discovery System (DDDS) standards.  It does not itself\n\
    \   revise ENUM or DDDS standards but is intended to provide technical\n   input\
    \ to future revisions of those documents.  It also serves to\n   advise implementers\
    \ on the pitfalls that they may find.  It\n   highlights areas where ENUM implementations\
    \ have differed over\n   interpretation of the standards documents or have outright\
    \ failed to\n   implement some features as specified.\n   As well as providing\
    \ clarifications to standards text, this document\n   also mentions potential\
    \ choices that can be made, in an attempt to\n   help foster interworking between\
    \ components that use this protocol.\n   The reader is reminded that others may\
    \ make different choices.\n   The core specifications for the E.164 Number Mapping\
    \ (ENUM) protocol\n   [RFC3761] and the Dynamic Delegation Discovery System (DDDS)\n\
    \   [RFC3403] [RFC3401] [RFC3402] [RFC3404] [RFC3405] are defined\n   elsewhere.\
    \  Unfortunately, this document cannot provide an overview\n   of the specifications,\
    \ so the reader is assumed to have read and\n   understood the complete set of\
    \ ENUM normative documents.\n   The Domain Name System (DNS) is ENUM's database.\
    \  ENUM uses the NAPTR\n   (Naming Authority Pointer) resource record type to\
    \ store its DDDS\n   rules into DNS domains.  ENUM relies on DNS services.  Thus,\
    \ it is\n   also important for ENUM implementers to carry out a thorough analysis\n\
    \   of all of the existing DNS standard documents to understand what\n   services\
    \ are provided to ENUM and what load ENUM provisioning and\n   queries will place\
    \ on the DNS.\n   A great deal of the rationale for making the choices listed\
    \ in this\n   document is available to those who explore the standards.  The trick\n\
    \   of course is in understanding those standards and the subtle\n   implications\
    \ that are involved in some of their features.  In almost\n   all cases, the choices\
    \ presented here are merely selections from\n   values that are permissible within\
    \ the standards.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n"
- title: 2.  Character Sets and ENUM
  contents:
  - '2.  Character Sets and ENUM

    '
- title: 2.1.  Character Sets - Non-ASCII Considered Harmful
  contents:
  - "2.1.  Character Sets - Non-ASCII Considered Harmful\n   [RFC3403] and [RFC3761]\
    \ specify respectively that NAPTR resource\n   records and ENUM support Unicode\
    \ using the UTF-8 encoding defined in\n   [RFC3629].  This raises an issue when\
    \ implementations use \"single\n   byte\" string-processing routines.  If there\
    \ are multi-byte characters\n   within an ENUM NAPTR, incorrect processing may\
    \ well result from these\n   UTF-8-unaware systems.\n   The UTF-8 encoding has\
    \ a US-ASCII equivalent range, so that all\n   characters in US-ASCII [ASCII]\
    \ from 0x00 to 0x7F hexadecimal have an\n   identity map to the UTF-8 encoding;\
    \ the encodings are the same.  In\n   UTF-8, characters with Unicode code points\
    \ above this range will be\n   encoded using more than one byte, all of which\
    \ will be in the range\n   0x80 to 0xFF hexadecimal.  Thus, it is important to\
    \ consider the\n   different fields of a NAPTR and whether or not multi-byte characters\n\
    \   can or should appear in them.\n   In addition, characters in the non-printable\
    \ portion of US-ASCII\n   (0x00 to 0x1F hexadecimal, plus 0x7F hexadecimal) are\
    \ \"difficult\".\n   Although NAPTRs are processed by machine, they may sometimes\
    \ need to\n   be written in a human-readable form.  Specifically, if NAPTR content\n\
    \   is shown to an end user so that he or she may choose, it is\n   imperative\
    \ that the content is human-readable.  Thus, it is unwise to\n   use non-printable\
    \ characters even if they lie within the US-ASCII\n   range; the ENUM client may\
    \ have good reason to reject NAPTRs that\n   include these characters as they\
    \ cannot readily be presented to an\n   end user.\n   There are two numeric fields\
    \ in a NAPTR: the ORDER and PREFERENCE/\n   PRIORITY fields.  As these contain\
    \ binary values, no risk is involved\n   because string processing should not\
    \ be applied to them.  The string-\n   based fields are the Flags, Services, and\
    \ Regexp fields.  The\n   Replacement field holds an uncompressed domain name,\
    \ encoded\n   according to the standard DNS mechanism [RFC1034][RFC1035].  The\n\
    \   Internationalised Domain Name (IDN) can be supported (as specified in\n  \
    \ [RFC3490], [RFC3491], and [RFC3492]).  Any such IDN MUST be further\n   encoded\
    \ using Punycode [RFC3492].  As the Replacement field holds a\n   domain name\
    \ that is not subject to replacement or modification (other\n   than Punycode\
    \ processing), it is not of concern here.\n   Taking the string fields in turn,\
    \ the Flags field contains characters\n   that indicate the disposition of the\
    \ NAPTR.  This may be empty, in\n   which case the NAPTR is \"non-terminal\",\
    \ or it may include a flag\n   character as specified in [RFC3761].  These characters\
    \ all fall into\n   the printable US-ASCII equivalent range, so multi-byte characters\n\
    \   cannot occur.\n   The Services field includes the DDDS Application identifier\
    \ (\"E2U\")\n   used for ENUM, a set of Enumservice identifiers, any of which\
    \ may\n   embed the ':' separator character, together with the '+' character\n\
    \   used to separate Enumservices from one another and from this DDDS\n   Application\
    \ identifier.  In Section 2.4.2 of [RFC3761], Enumservice\n   identifier tokens\
    \ are specified as 1*32 ALPHA/DIGIT, so there is no\n   possibility of non-ASCII\
    \ characters in the Services field.\n"
- title: 2.1.1.  Non-ASCII in the Regular Expression Field
  contents:
  - "2.1.1.  Non-ASCII in the Regular Expression Field\n   The Regexp field is more\
    \ complex.  It forms a sed-like substitution\n   expression, defined in [RFC3402],\
    \ and consists of two sub-fields:\n   o  a POSIX Extended Regular Expression (ERE)\
    \ sub-field\n      [IEEE.1003-2.1992]\n   o  a replacement (Repl) sub-field [RFC3402].\n\
    \   Additionally, [RFC3402] specifies that a flag character may be\n   appended,\
    \ but the only flag currently defined there (the 'i' case-\n   insensitivity flag)\
    \ is not appropriate for ENUM -- see Section 2.2.\n   The ERE sub-field matches\
    \ against the \"Application Unique String\";\n   for ENUM, this is defined in\
    \ [RFC3761] to consist of digit\n   characters, with an initial '+' character.\
    \  It is similar to a\n   global-number-digits production of a tel: URI, as specified\
    \ in\n   [RFC3966], but with visual-separators removed.  In short, it is a\n \
    \  telephone number (see [E.164]) in restricted format.  All of these\n   characters\
    \ fall into the US-ASCII equivalent range of UTF-8 encoding,\n   as do the characters\
    \ significant to the ERE processing.\n   Strictly, the ERE might include other\
    \ characters.  The ERE could\n   include choice elements matching against different\
    \ items, some of\n   which might not be an ENUM Application Unique String.  Those\n\
    \   alternative matching elements might conceivably include non-ASCII\n   characters.\
    \  As an operational issue, it is not reasonable to include\n   such constructs,\
    \ as ENUM NAPTRs match against telephone numbers.\n   In the normal situation\
    \ in which E2U NAPTRs are provisioned in ENUM\n   domains, there will be no multi-byte\
    \ characters within this sub-\n   field, as the ERE will be intended to match\
    \ against telephone\n   numbers.  ENUM clients must be able to handle NAPTRs that\
    \ do contain\n   such multi-byte characters (as the standard does not preclude\
    \ them),\n   but there is no operational reason for these ever being provisioned\n\
    \   in ENUM domains.  If NAPTRs provisioned in ENUM domains are\n   encountered\
    \ containing such multi-byte characters, these could\n   reasonably be discarded.\n\
    \   The Repl sub-field can include a mixture of explicit text used to\n   construct\
    \ a URI and characters significant to the substitution\n   expression, as defined\
    \ in [RFC3403].  Whilst the latter set all fall\n   into the US-ASCII equivalent\
    \ range of UTF-8 encoding, this might not\n   be the case for all conceivable\
    \ text used to construct a URI.\n   Presence of multi-byte characters could complicate\
    \ URI generation and\n   processing routines.\n   URI generic syntax is defined\
    \ in [RFC3986] as a sequence of\n   characters chosen from a limited subset of\
    \ the repertoire of US-ASCII\n   characters.  The current URIs use the standard\
    \ URI character escaping\n   rules specified in the URI generic syntax, and so\
    \ any multi-byte\n   character will be pre-processed; they will not occur in the\
    \ explicit\n   text used to construct a URI within the Repl sub-field.\n"
- title: 2.1.1.1.  Impact of Future Support for IRIs
  contents:
  - "2.1.1.1.  Impact of Future Support for IRIs\n   As currently specified, ENUM\
    \ only permits URIs to be generated in the\n   Regexp field.  However, even if\
    \ this were to be extended in future\n   revisions of the ENUM specification to\
    \ allow the use of\n   Internationalised Resource Identifiers (IRIs), defined\
    \ in [RFC3987],\n   further support for non-ASCII characters may be avoided. \
    \ IRIs are\n   defined as extending the syntax of URIs, and RFC 3987 specifies\
    \ a\n   mapping from IRIs to URIs.  IRI syntax allows characters with multi-\n\
    \   byte UTF-8 encoding.\n   Given that this is the only place within an ENUM\
    \ NAPTR where such\n   multi-byte encodings might reasonably be found, a simple\
    \ solution is\n   to use the mapping method specified in Section 3.1 of [RFC3987]\
    \ to\n   convert any IRI into its equivalent URI.\n   This process consists of\
    \ two elements; the domain part of an IRI MUST\n   be processed using Punycode\
    \ if it has a non-ASCII domain name, and\n   the remainder MUST be processed using\
    \ the extended escaping rules\n   specified in [RFC3987] if it contains characters\
    \ outside the normal\n   URI repertoire.  Using this process, there will be no\
    \ non-ASCII\n   characters in any part of any URI, even if it has been converted\
    \ from\n   an IRI that contains such characters.\n"
- title: 2.1.2.  Non-ASCII Support - Conclusions
  contents:
  - "2.1.2.  Non-ASCII Support - Conclusions\n   From the analysis just given, the\
    \ only place within an ENUM NAPTR\n   where non-ASCII characters might be found\
    \ is the Regexp field.  It is\n   possible to remove any requirement to process\
    \ characters outside the\n   US-ASCII equivalent range by adding very few operational\n\
    \   restrictions.  There is no obvious benefit in providing characters\n   outside\
    \ this range.  Handling multi-byte characters complicates\n   development and\
    \ operation of client programs, and many existing\n   programs do not include\
    \ such support.\n   As the gain from permitting characters outside the US-ASCII\n\
    \   equivalent range is unclear, and the costs of multi-byte character\n   processing\
    \ are very clear, ENUM NAPTRs SHOULD NOT include characters\n   outside the printable\
    \ US-ASCII equivalent range.\n"
- title: 2.2.  Case Sensitivity
  contents:
  - "2.2.  Case Sensitivity\n   The only place where NAPTR field content is case sensitive\
    \ is in any\n   static text in the Repl sub-field of the Regexp field.  Everywhere\n\
    \   else, case-insensitive processing can be used.\n   The case-insensitivity\
    \ flag ('i') could be added at the end of the\n   Regexp field.  However, in ENUM,\
    \ the ERE sub-field operates on a\n   string defined as the '+' character, followed\
    \ by a sequence of digit\n   characters.  This flag is redundant for E2U NAPTRs,\
    \ as it does not\n   act on the Repl sub-field contents.\n   Thus, the case-sensitivity\
    \ flag is inappropriate for ENUM, and SHOULD\n   NOT be provisioned into E2U NAPTRs.\n"
- title: 2.3.  Regexp Field Delimiter
  contents:
  - "2.3.  Regexp Field Delimiter\n   It is not possible to select a delimiter character\
    \ that cannot appear\n   in one of the sub-fields.  The '!' character is used\
    \ as a delimiter\n   in all of the examples in [RFC3403] and in [RFC3761].  It\
    \ is the only\n   character seen in existing zones, and a number of different\
    \ client\n   implementations are still \"hardwired\" to expect this character\
    \ as a\n   delimiter.\n   The '!' character will not normally appear in the ERE\
    \ sub-field.  It\n   may appear in the content of some URIs, as it is a valid\
    \ character\n   (e.g., in http URLs).  If it is present in the Regexp field, then\n\
    \   that instance MUST be escaped using the standard technique proposed\n   in\
    \ Section 3.2 of [RFC3402]: a backslash character (U+005C) should be\n   inserted\
    \ before it in the string.  Otherwise, a client may attempt to\n   process this\
    \ as a standard delimiter and interpret the Regexp field\n   contents differently\
    \ from the system that provisioned it.\n"
- title: 2.4.  Regexp Meta-Character Issue
  contents:
  - "2.4.  Regexp Meta-Character Issue\n   In ENUM, the ERE sub-field may include\
    \ a literal character '+', as\n   the Application Unique String on which it operates\
    \ includes this.\n   However, if it is present, then '+' MUST be escaped using\
    \ a single\n   backslash character (to produce the sub-string U+005C U+002B),\
    \ as '+'\n   is a meta-character in POSIX Extended Regular Expression syntax.\n\
    \   Not escaping the '+' character produces an invalid ERE, but is a\n   common\
    \ mistake.  Even standards have given incorrect examples; the\n   obsolete [RFC2916]\
    \ (Section 3.4.3, example 3) has this problem.\n   For example, the following\
    \ NAPTR example is incorrect:\n   * IN NAPTR 100 10 \"u\" \"E2U+sip\" \"!^+4655(.*)$!sip:\\\
    \\1@example.net!\" .\n   A correct way to write this example is:\n   * IN NAPTR\
    \ 100 10 \"u\"\n       \"E2U+sip\" \"!^\\\\+4655(.*)$!sip:\\\\1@example.net!\"\
    \ .\n   Note that when a NAPTR resource record is shown in DNS master file\n \
    \  syntax (as in this example above), the backslash itself must be\n   escaped\
    \ using a second backslash.  The DNS on-the-wire packet will\n   have only a single\
    \ backslash.\n"
- title: 3.  Unsupported NAPTRs
  contents:
  - "3.  Unsupported NAPTRs\n   An ENUM client MAY discard a NAPTR received in response\
    \ to an ENUM\n   query because:\n   o  the NAPTR is syntactically or semantically\
    \ incorrect,\n   o  the NAPTR has a different (non-empty) DDDS Application identifier\n\
    \      from the 'E2U' used in ENUM,\n   o  the NAPTR's ERE does not match the\
    \ Application Unique String for\n      this ENUM query,\n   o  the ENUM client\
    \ does not recognise any Enumservice held in this\n      NAPTR, or\n   o  this\
    \ NAPTR (only) contains an Enumservice that is unsupported.\n   These conditions\
    \ SHOULD NOT cause the whole ENUM query to terminate,\n   and processing SHOULD\
    \ continue with the next NAPTR in the returned\n   Resource Record Set (RRSet).\n\
    \   When an ENUM client encounters a compound NAPTR (i.e., one containing\n  \
    \ more than one Enumservice -- see also Section 4.4.1) and cannot\n   process\
    \ or cannot recognise one of the Enumservices within it, that\n   ENUM client\
    \ SHOULD ignore this Enumservice and continue with the next\n   Enumservice within\
    \ this NAPTR's Services field, discarding the NAPTR\n   only if it cannot handle\
    \ any of the Enumservices contained.  These\n   conditions SHOULD NOT be considered\
    \ errors.\n   ENUM uses regular-expression processing when generating URIs from\
    \ the\n   Regexp field of \"terminal\" NAPTRs.  Just as with all uses of regular\n\
    \   expressions, there is a potential for buffer overrun when generating\n   this\
    \ output.  There may be repeated back-reference patterns in a\n   NAPTR's Repl\
    \ sub-field, and the output these generate may consume a\n   considerable amount\
    \ of buffer space.\n   Even if an ENUM client would normally encounter only NAPTRs\
    \ with\n   short URIs, it may also receive NAPTRs with repeated back-reference\n\
    \   patterns in their Repl sub-fields that could generate strings longer\n   than\
    \ the client's buffer.  Such NAPTRs may have been misconfigured\n   accidentally\
    \ or by design.  The client MUST NOT fail in this case.\n   It SHOULD NOT discard\
    \ the entire ENUM query, but instead just discard\n   the NAPTR that would otherwise\
    \ have caused this overrun.\n   If a problem is detected when processing an ENUM\
    \ query across\n   multiple domains (by following non-terminal NAPTR references),\
    \ then\n   the ENUM query SHOULD NOT be abandoned, but instead processing SHOULD\n\
    \   continue at the next NAPTR after the non-terminal NAPTR that referred\n  \
    \ to the domain in which the problem would have occurred.  See\n   Section 5.2.2\
    \ for more details.\n"
- title: 3.1.  Non-Compliant Client Behaviour
  contents:
  - "3.1.  Non-Compliant Client Behaviour\n   Through monitoring current ENUM clients,\
    \ a number of non-compliant\n   behaviours have been detected.  These behaviours\
    \ are incorrect, but\n   may be encountered in still-operational client implementations.\n\
    \   ENUM clients have been known to discard NAPTRs in which the Services\n   field\
    \ holds more than one Enumservice.\n   ENUM clients have also been known to discard\
    \ NAPTRs with a \"non-\n   greedy\" ERE sub-field expression (i.e., EREs that\
    \ are dissimilar to\n   \"^.*$\").\n   ENUM clients have been known to discard\
    \ NAPTRs that do not use '!' as\n   their Regexp delimiter character.\n   ENUM\
    \ clients have been known to discard NAPTRs in which the delimiter\n   is NOT\
    \ the last character in the Regexp field.\n   ENUM clients have been known to\
    \ discard NAPTRs with an empty Flags\n   field (i.e., \"non-terminal\" NAPTRs).\n\
    \   ENUM clients have been known to ignore the ORDER field value\n   entirely,\
    \ sorting the NAPTRs in an RRSet based solely on the\n   PREFERENCE/PRIORITY field\
    \ values.\n   Finally, many ENUM clients have been known to discard a NAPTR where\n\
    \   they have local knowledge that the URI that would be generated by\n   processing\
    \ the NAPTR is unusable.  This behaviour is, strictly\n   speaking, non-compliant,\
    \ but might be considered reasonable (see\n   Section 4.1).\n"
- title: 4.  ENUM NAPTR Processing
  contents:
  - "4.  ENUM NAPTR Processing\n   ENUM is a DDDS Application, and the way in which\
    \ NAPTRs in an RRSet\n   are processed reflects this.  The details are described\
    \ in Section\n   3.3 of [RFC3402].  The client is expected to sort the records\
    \ it\n   receives into a sequence and then process those records in that\n   sequence.\
    \  The sequence reflects the ORDER and PREFERENCE/PRIORITY\n   field values in\
    \ each of the NAPTRs.\n   The ORDER field value is the major, or most significant,\
    \ sort term\n   and the PREFERENCE/PRIORITY field value is the minor, or least\n\
    \   significant, sort term.  The combination of ORDER and PREFERENCE/\n   PRIORITY\
    \ field values indicates the sequence chosen by the publisher\n   of this data,\
    \ and NAPTRs will be considered in this sequence.\n   Once the NAPTRs are sorted\
    \ into sequence, further processing is done\n   to determine if each of the NAPTRs\
    \ is appropriate for this ENUM\n   evaluation.  This involves looking at the Flags\
    \ field.  If the Flags\n   field is empty, this is a \"non-terminal\" NAPTR and\
    \ is processed as\n   described in Section 5.\n   If the \"u\" Flag is present\
    \ (and so the NAPTR is a \"terminal\" rule\n   that generates a URI), the Services\
    \ field is checked to ensure that\n   this NAPTR is intended for ENUM (i.e., that\
    \ this NAPTR includes the\n   \"E2U\" DDDS Application identifier in the Services\
    \ field).  The ERE in\n   the Regexp field is checked and must match the Application\
    \ Unique\n   String (AUS) for this ENUM evaluation (the queried telephone number).\n\
    \   Unless each of these checks succeeds, the NAPTR is discarded and the\n   next\
    \ in sequence is processed.\n   During this processing, clients will also consider\
    \ the Enumservices\n   within the Services field.  Enumservices indicate the kind\
    \ of\n   interaction that can be achieved through use of the URI this NAPTR\n\
    \   generates.  If there is local knowledge that a NAPTR includes only an\n  \
    \ Enumservice that is either not supported or not recognised, then this\n   NAPTR\
    \ can be discarded and the next in sequence will be processed.\n   Thus, for a\
    \ system that has support only for SIP interactions, if it\n   receives an RRSet\
    \ in which the \"best\" NAPTR indicates the H323\n   Enumservice, then that client\
    \ could reasonably discard that NAPTR and\n   go on to the next in sequence.\n"
- title: 4.1.  Common Non-Compliant ENUM Processing
  contents:
  - "4.1.  Common Non-Compliant ENUM Processing\n   The processing of ORDER and PREFERENCE/PRIORITY\
    \ fields has been a\n   significant source of confusion, and many ENUM clients\
    \ do not\n   implement the processing exactly as specified.\n   In particular,\
    \ many ENUM clients use local prior knowledge about URIs\n   during ENUM processing.\
    \  If a client has prior knowledge that a\n   particular URI will not result in\
    \ an acceptable outcome, it might\n   discard that NAPTR and consider the next\
    \ one in the sequence.\n   Examples of such local prior knowledge include: the\
    \ URI does not\n   resolve, authentication has been recently rejected, or user\
    \ policies\n   mark a particular URI as unacceptable (the URI could be a \"premium\n\
    \   rate\" telephone number that would be charged at an unacceptable\n   rate).\n\
    \   Strictly speaking, this behaviour is non-compliant if the next NAPTR\n   record\
    \ has a different ORDER value.  The ENUM algorithm (Section 3.3\n   of [RFC3402]\
    \ and Section 4.1 of [RFC3403]) states that once a match\n   has been found for\
    \ the Application Unique String (AUS), and the\n   service description satisfies\
    \ the client's requirements, NAPTR\n   records with larger ORDER values must not\
    \ be considered (but other\n   NAPTR records with the same ORDER value can still\
    \ be considered).\n   However, embedding local knowledge about the URI within\
    \ the ENUM\n   evaluation process is almost universal in systems employing ENUM.\n\
    \   Also, since the difference between ORDER and PRIORITY/PREFERENCE has\n   been\
    \ unclear, NAPTR records have been provisioned in ways that would\n   make strictly\
    \ compliant systems unusable in practice.  Given that\n   such systems are intended\
    \ to provide communications, this non-\n   compliant, \"embedded decision\" behaviour\
    \ is understandable.\n   It is proposed that when the ENUM specification is updated,\n\
    \   processing of ORDER and PRIORITY/PREFERENCE should be updated based\n   on\
    \ implementation and deployment experiences described in this\n   document.\n"
- title: 4.1.1.  Example
  contents:
  - "4.1.1.  Example\n   The example in this section is intended to further understanding\n\
    \   about the difference between what [RFC3402] and [RFC3403] specify and\n  \
    \ what existing ENUM clients do.\n   WARNING: The NAPTR records shown in this\
    \ section are intended to\n   illustrate somewhat unclear corner cases, and are\
    \ not intended as\n   good examples of how to do ENUM provisioning.\n   Consider\
    \ the following RRset, which maps numbers in the UK drama\n   range to one server,\
    \ and all other numbers to a second server:\n   * 3600 IN NAPTR 1 1 \"u\" \"e2u+sip\"\
    \n       \"!^(\\\\+441632960.*)$!sips:\\\\1@atlanta.example.com!\" .\n   * 3600\
    \ IN NAPTR 2 1 \"u\" \"e2u+sip\"\n       \"!^(.*)$!sip:\\\\1@biloxi.example.com!\"\
    \ .\n   According to the processing specified in [RFC3402] and [RFC3403], the\n\
    \   ENUM client is never intended to consider the second rule for e.g.,\n   AUS\
    \ \"+441632960123\", even if it does not support \"sips\" URIs, or the\n   atlanta.example.com\
    \ server cannot be reached, or the user indicates\n   he or she doesn't wish to\
    \ contact atlanta.example.com.  However,\n   existing ENUM implementations are\
    \ known to do this, and as described\n   above, it can be useful if the alternative\
    \ is failing to communicate\n   at all.\n   To prevent a client from considering\
    \ the second rule for the UK drama\n   range, the example could be rewritten to\
    \ have more predictable\n   behaviour as follows:\n   * 3600 IN NAPTR 1 1 \"u\"\
    \ \"e2u+sip\"\n       \"!^(\\\\+441632960.*)$!sips:\\\\1@atlanta.example.com!\"\
    \ .\n   * 3600 IN NAPTR 2 1 \"u\" \"e2u+sip\"\n       \"!^(\\\\+[^4].*|\\\\+4[^4].*|\\\
    \\+44[^1].*|\\\\+441[^6].*|\\\\+4416[^3].*|\n       \\\\+44163[^2].*|\\\\+441632[^9].*|\\\
    \\+4416329[^6].*|\n       \\\\+44163296[^0].*)$!sip:\\\\1@biloxi.example.com!\"\
    \ .\n"
- title: 4.2.  Order/Priority Values - Processing Sequence
  contents:
  - "4.2.  Order/Priority Values - Processing Sequence\n   [RFC3761] and [RFC3403]\
    \ state that the ENUM client MUST sort the\n   NAPTRs using the ORDER field value\
    \ (\"lowest value is first\") and\n   SHOULD order the NAPTRs using the PREFERENCE/PRIORITY\
    \ field value as\n   the minor sort term (again, lowest value first).  The NAPTRs\
    \ in the\n   sorted list must be processed in order.  Subsequent NAPTRs with worse\n\
    \   ORDER values must only be dealt with once the current ones with a\n   better\
    \ ORDER value have been processed.\n   However, as described in the introduction\
    \ to this section, this\n   stated behaviour is a simplification.  Once sorted\
    \ into a sequence\n   reflecting ORDER and PREFERENCE/PRIORITY values, other fields\
    \ are\n   also considered during evaluation of retrieved NAPTRs; local\n   knowledge\
    \ may play a factor in the decision process, once a NAPTR has\n   reached that\
    \ point in the sequence at which it is considered.\n   ENUM clients may also include\
    \ the end user \"in the decision loop\",\n   offering the end user the choice\
    \ from a list of possible NAPTRs.\n   Conceptually this choice is embedded within\
    \ step 4 of the DDDS\n   algorithm (as described in Section 3.3 of [RFC3402]).\
    \  Given that the\n   ORDER field value is the major sort term, one would expect\
    \ a\n   conforming ENUM client to present only those NAPTRs with the\n   currently\
    \ \"best\" ORDER field value as choices.  When/if all the\n   presented options\
    \ had been rejected, then the ENUM client might offer\n   those with the \"next\
    \ best\" ORDER field value, and so on.  As this may\n   be confusing for the end\
    \ user, some clients simply offer all of the\n   available NAPTRs as options to\
    \ the end user for his or her selection\n   at once, in the sequence defined by\
    \ the ORDER and PREFERENCE/PRIORITY\n   fields.\n   In summary, ENUM clients will\
    \ take into account the Services field\n   value, the Flags field, and the Regexp\
    \ ERE sub-field, along with the\n   ORDER and PREFERENCE/PRIORITY field values,\
    \ and may consider local\n   policies or available local knowledge.\n   The Registrant\
    \ and the ENUM zone provisioning system he or she uses\n   must be aware of this\
    \ and SHOULD NOT rely on ENUM clients solely\n   taking account of the value of\
    \ the ORDER and the PREFERENCE/PRIORITY\n   fields alone.\n   Specifically, it\
    \ is unsafe to assume that an ENUM client will not\n   consider another NAPTR\
    \ if there is one with a better ORDER value.\n   The instructions in Section 4.1\
    \ and Section 8 of [RFC3403] may or may\n   not be followed strictly by different\
    \ ENUM clients for perfectly\n   justifiable reasons.\n   Where the ENUM client\
    \ presents a list of possible URLs to the end\n   user for his or her choice,\
    \ it MUST do so in the sequence defined by\n   the ORDER and PREFERENCE/PRIORITY\
    \ values specified by the Registrant.\n   However, a Registrant SHOULD place into\
    \ his or her zone only contacts\n   that he or she is willing to support; even\
    \ those with the worst ORDER\n   and PREFERENCE/PRIORITY values MAY be selected\
    \ by an end user.\n"
- title: 4.3.  Use of Order and Preference Fields
  contents:
  - "4.3.  Use of Order and Preference Fields\n   NAPTRs in ENUM zones that hold incorrect\
    \ ORDER values can cause major\n   problems.  [RFC3403] highlights that having\
    \ both ORDER and\n   PREFERENCE/PRIORITY fields is a historical artifact of the\
    \ NAPTR\n   resource record type.  It is reasonable to have a common default\n\
    \   value for the ORDER field, relying on the PREFERENCE/PRIORITY field\n   to\
    \ indicate the preferred sort.\n   We have noticed a number of ENUM domains with\
    \ NAPTRs that have\n   identical PREFERENCE/PRIORITY field values and different\
    \ ORDER\n   values.  This may be the result of an ENUM zone provisioning system\n\
    \   \"bug\" or a misunderstanding over the uses of the two fields, or\n   simply\
    \ a difference of interpretation of the standards.\n   To clarify, the ORDER field\
    \ value is the major sort term, and the\n   PREFERENCE/PRIORITY field value is\
    \ the minor sort term.  Thus, one\n   should expect to have a set of NAPTRs in\
    \ a zone with identical ORDER\n   field values and different PREFERENCE/PRIORITY\
    \ field values; not the\n   other way around.\n   To avoid these common interoperability\
    \ issues, it is recommended that\n   ENUM NAPTRs SHOULD hold a default value in\
    \ their ORDER field.\n"
- title: 4.4.  NAPTRs with Identical ORDER/PRIORITY Values
  contents:
  - "4.4.  NAPTRs with Identical ORDER/PRIORITY Values\n   From experience, it has\
    \ been learned that there are zones that hold\n   discrete NAPTRs with identical\
    \ ORDER and identical PREFERENCE/\n   PRIORITY field values.  This will lead to\
    \ indeterminate client\n   behaviour and so SHOULD NOT normally occur.\n   Such\
    \ a condition indicates that these NAPTRs are truly identical in\n   priority\
    \ and that there is no preference between the services these\n   NAPTRs offer.\
    \  Implementers SHOULD NOT assume that the DNS will\n   deliver NAPTRs within\
    \ an RRSet in a particular sequence.\n   Multiple NAPTRs with identical ORDER\
    \ and identical PREFERENCE/\n   PRIORITY field values SHOULD NOT be provisioned\
    \ into an RRSet unless\n   the intent is that these NAPTRs are truly identical\
    \ in priority and\n   there is no preference between them.\n   Some ENUM client\
    \ implementations have considered this case to be an\n   error and have rejected\
    \ such duplicates entirely.  Others have\n   attempted to further randomise the\
    \ order in which such duplicates are\n   processed.  Thus, use of such duplicate\
    \ NAPTRs is unwise, as client\n   implementations exist that will behave in different\
    \ ways.\n"
- title: 4.4.1.  Compound NAPTRs and Implicit ORDER/REFERENCE Values
  contents:
  - "4.4.1.  Compound NAPTRs and Implicit ORDER/REFERENCE Values\n   With [RFC3761],\
    \ it is possible to have more than one Enumservice\n   associated with a single\
    \ NAPTR.  These Enumservices share the same\n   Regexp field and so generate the\
    \ same URI.  Such a \"compound\" NAPTR\n   could well be used to indicate a mobile\
    \ phone that supports both\n   \"voice:tel\" and \"sms:tel\" Enumservices.  The\
    \ Services field in that\n   case would be \"E2U+voice:tel+sms:tel\".\n   A compound\
    \ NAPTR can be treated as a set of NAPTRs that each hold a\n   single Enumservice.\
    \  These reconstructed NAPTRs share the same ORDER\n   and PREFERENCE/PRIORITY\
    \ field values but should be treated as if each\n   had a logically different\
    \ priority.  In this case, the reconstructed\n   NAPTR holding the leftmost Enumservice\
    \ within the compound NAPTR has\n   the best priority, and the reconstructed NAPTR\
    \ holding the rightmost\n   Enumservice has the worst priority in this set.\n\
    \   To avoid indeterminate behaviour, it is recommended that ENUM clients\n  \
    \ SHOULD process the Enumservices within a compound NAPTR in a left-to-\n   right\
    \ sequence.  ENUM provisioning systems SHOULD assume that such a\n   processing\
    \ order will be used and provision the Enumservices within a\n   compound NAPTR\
    \ accordingly.\n"
- title: 4.5.  Processing Order Value across Domains
  contents:
  - "4.5.  Processing Order Value across Domains\n   Using a different ORDER field\
    \ value in different domains is\n   unimportant for most queries.  However, DDDS\
    \ includes a mechanism for\n   continuing a search for NAPTRs in another domain\
    \ by including a\n   reference to that other domain in a \"non-terminal\" NAPTR.\
    \  The\n   treatment of non-terminal NAPTRs is covered in the next section.  If\n\
    \   they are supported, then the way that ORDER and PREFERENCE/PRIORITY\n   field\
    \ values are processed is affected.\n   Two main questions remain from the specifications\
    \ of DDDS and\n   [RFC3761]:\n   o  If there is a different (lower) ORDER field\
    \ value in a domain\n      referred to by a non-terminal NAPTR, then does this\
    \ mean that the\n      ENUM client discards any remaining NAPTRs in the referring\
    \ RRSet?\n   o  Conversely, if the domain referred to by a non-terminal NAPTR\n\
    \      contains entries that only have a higher ORDER field value, then\n    \
    \  does the ENUM client ignore those NAPTRs in the referenced domain?\n   Whilst\
    \ one interpretation of [RFC3761] is that the answer to both\n   questions is\
    \ \"yes\", this is not the way that those examples of non-\n   terminal NAPTRs\
    \ that do exist (and those ENUM clients that support\n   them) seem to be designed.\n\
    \   In keeping with the interpretation made so far, ENUM implementations\n   MUST\
    \ consider the ORDER and PREFERENCE/PRIORITY values only within\n   the context\
    \ of the domain currently being processed in an ENUM query.\n   These values MUST\
    \ be discarded when processing other RRSets in the\n   query.\n"
- title: 5.  Non-Terminal NAPTR Processing
  contents:
  - '5.  Non-Terminal NAPTR Processing

    '
- title: 5.1.  Non-Terminal NAPTRs - Necessity
  contents:
  - "5.1.  Non-Terminal NAPTRs - Necessity\n   Consider an ENUM RRSet that contains\
    \ a non-terminal NAPTR record.\n   This non-terminal NAPTR holds, as its target,\
    \ another domain that has\n   a set of NAPTRs.  In effect, this is similar to\
    \ the non-terminal\n   NAPTR being replaced by the NAPTRs contained in the domain\
    \ to which\n   it points.\n   It is possible to have a non-terminal NAPTR in a\
    \ domain that is,\n   itself, pointed to by another non-terminal NAPTR.  Thus,\
    \ a set of\n   domains forms a \"chain\", and the list of NAPTRs to be considered\
    \ is\n   the set of all NAPTRs contained in all of the domains in that chain.\n\
    \   For an ENUM management system to support non-terminal NAPTRs, it is\n   necessary\
    \ for it to be able to analyse, validate, and (where needed)\n   correct not only\
    \ the NAPTRs in its current ENUM domain but also those\n   referenced by non-terminal\
    \ NAPTRs in other domains.  If the domains\n   pointed to have non-terminal NAPTRs\
    \ of their own, the management\n   system will have to check each of the referenced\
    \ domains in turn, as\n   their contents form part of the result of a query on\
    \ the \"main\" ENUM\n   domain.  The domain content in the referenced domains\
    \ may well not be\n   under the control of the ENUM management system, and so\
    \ it may not be\n   possible to correct any errors in those RRSets.  This is both\
    \ complex\n   and prone to error in the management system design, and any reported\n\
    \   errors in validation may well be non-intuitive for users.\n   For an ENUM\
    \ client, supporting non-terminal NAPTRs can also be\n   difficult.  Processing\
    \ non-terminal NAPTRs causes a set of sequential\n   DNS queries that can take\
    \ an indeterminate time, and requires extra\n   resources and complexity to handle\
    \ fault conditions like non-terminal\n   loops.  The indeterminacy of response\
    \ time makes ENUM-supported\n   Telephony Applications difficult (such as in an\
    \ \"ENUM-aware\" Private\n   Branch Exchange (PBX)), whilst the added complexity\
    \ and resources\n   needed makes support problematic in embedded devices like\
    \ \"ENUM-\n   aware\" mobile phones.\n   Given that, in principle, a non-terminal\
    \ NAPTR can be replaced by the\n   NAPTRs in the domain to which it points, support\
    \ of non-terminal\n   NAPTRs is not needed and non-terminal NAPTRs may not be\
    \ useful.\n   Furthermore, some existing ENUM clients do not support non-terminal\n\
    \   NAPTRs and ignore them if received.\n   To avoid interoperability problems,\
    \ some kind of acceptable advice is\n   needed on non-terminal NAPTRs.  As current\
    \ support is limited, non-\n   terminal NAPTRs SHOULD NOT be used in ENUM unless\
    \ it is clear that\n   all of the ENUM clients this environment supports can process\
    \ these.\n"
- title: 5.2.  Non-Terminal NAPTRs - Considerations
  contents:
  - "5.2.  Non-Terminal NAPTRs - Considerations\n   The following specific issues\
    \ need to be considered if non-terminal\n   NAPTRs are to be supported in a particular\
    \ environment.  These issues\n   are gleaned from experience and indicate the\
    \ kinds of conditions that\n   should be considered before support for non-terminal\
    \ NAPTRs is\n   contemplated.  Note that these issues are in addition to the point\n\
    \   just mentioned on ENUM provisioning or management system complexity\n   and\
    \ the potential for that management system to have no control over\n   the zone\
    \ contents to which non-terminal NAPTRs in its managed zones\n   refer.\n"
- title: 5.2.1.  Non-Terminal NAPTRs - General
  contents:
  - "5.2.1.  Non-Terminal NAPTRs - General\n   As mentioned earlier, a non-terminal\
    \ NAPTR in one RRSet refers to the\n   NAPTRs contained in another domain.  The\
    \ NAPTRs in the domain\n   referred to by the non-terminal NAPTR may have a different\
    \ ORDER\n   value from that in the referring non-terminal NAPTR.  See Section\
    \ 4.5\n   for details.\n"
- title: 5.2.2.  Non-Terminal NAPTRs - Loop Detection and Response
  contents:
  - "5.2.2.  Non-Terminal NAPTRs - Loop Detection and Response\n   Where a chain of\
    \ non-terminal NAPTRs refers back to a domain already\n   traversed in the current\
    \ query, a \"non-terminal\" or referential loop\n   is implied.  An implementation\
    \ MAY treat a chain of more than 5\n   domains traversed during a single ENUM\
    \ query as an indication that a\n   self-referential loop has been entered.\n\
    \   There are many techniques that can be used to detect such a loop, but\n  \
    \ the simple approach of counting the number of domains queried in the\n   current\
    \ ENUM query suffices.\n   Where a loop has been detected, processing SHOULD continue\
    \ at the\n   next NAPTR in the referring domain (i.e., after the non-terminal\n\
    \   NAPTR that included the reference that triggered the loop detection).\n"
- title: 5.2.3.  Field Content in Non-Terminal NAPTRs
  contents:
  - "5.2.3.  Field Content in Non-Terminal NAPTRs\n   The set of specifications defining\
    \ DDDS and its applications are\n   complex and multi-layered.  This reflects\
    \ the flexibility that the\n   system provides but does mean that some of the\
    \ specifications need\n   clarification as to their interpretation, particularly\
    \ where non-\n   terminal rules are concerned.\n"
- title: 5.2.3.1.  Flags Field Content with Non-Terminal NAPTRs
  contents:
  - "5.2.3.1.  Flags Field Content with Non-Terminal NAPTRs\n   Section 2.4.1 of [RFC3761]\
    \ states that the only flag character valid\n   for use with the \"E2U\" DDDS\
    \ Application is 'u'.  The flag 'u' is\n   defined (in Section 4.3 of [RFC3404])\
    \ thus: 'The \"u\" flag means that\n   the output of the Rule is a URI'.\n   Section\
    \ 2.4.1 of [RFC3761] also states that an empty Flags field\n   indicates a non-terminal\
    \ NAPTR.  This is also the case for other DDDS\n   Application specifications,\
    \ such as that specified in [RFC3404].  One\n   could well argue that this is\
    \ a feature potentially common to all\n   DDDS Applications, and so might have\
    \ been specified in [RFC3402] or\n   [RFC3403].\n   The Flags field will be empty\
    \ in non-terminal NAPTRs encountered in\n   ENUM processing.  ENUM does not have\
    \ any other way to indicate a non-\n   terminal NAPTR.\n"
- title: 5.2.3.2.  Services Field Content with Non-Terminal NAPTRs
  contents:
  - "5.2.3.2.  Services Field Content with Non-Terminal NAPTRs\n   Furthermore, [RFC3761]\
    \ states that any Enumservice Specification\n   requires definition of the URI\
    \ that is the expected output of this\n   Enumservice.  This means that, at present,\
    \ there is no way to specify\n   an Enumservice that is non-terminal; such a non-terminal\
    \ NAPTR has,\n   by definition, no URI as its expected output, instead returning\
    \ a key\n   (DNS domain name) that is to be used in the \"next round\" of DDDS\n\
    \   processing.\n   This in turn means that a non-terminal NAPTR cannot hold a\
    \ valid\n   (non-empty) Services field when used in ENUM.  Section 2.4.2 of\n\
    \   [RFC3761] specifies the syntax for this field content and requires at\n  \
    \ least one element of type <servicespec> (i.e., at least one\n   Enumservice\
    \ identifier).  Given that there cannot be a non-terminal\n   Enumservice (and\
    \ so no such Registered Enumservice identifier), this\n   syntax cannot be met\
    \ with a non-terminal NAPTR; there are no non-\n   terminal Enumservices to put\
    \ into this field.\n   A reasonable interpretation of the specifications is that\
    \ for a non-\n   terminal NAPTR, the Services field must also be empty.  This\
    \ appears\n   to be the approach taken by those clients that do either process\
    \ non-\n   terminal NAPTRs or check the validity of the fields.\n   It is expected\
    \ that future revisions of the ENUM standard will\n   clarify this text, making\
    \ this interpretation plain.  This was the\n   intent of the current standard,\
    \ and the intent will be made explicit\n   in its revision.\n   In keeping with\
    \ existing implementations, in a non-terminal NAPTR\n   encountered in an ENUM\
    \ query, the Services field SHOULD be empty, and\n   clients SHOULD ignore any\
    \ content it contains.\n   Of course, such non-terminal NAPTRs with an empty Services\
    \ field are\n   not specific to any DDDS Application.  Thus, other means must\
    \ be used\n   to ensure a non-terminal NAPTR that is intended only for a particular\n\
    \   DDDS Application cannot be encountered during a lookup for another\n   DDDS\
    \ Application (for example, by ensuring that the same domain is\n   not used to\
    \ host NAPTRs for more than one such DDDS Application).\n"
- title: 5.2.3.3.  Regular Expression and Replacement Field Content with Non-
  contents:
  - "5.2.3.3.  Regular Expression and Replacement Field Content with Non-\n      \
    \    Terminal NAPTRs\n   The descriptive text in Section 4.1 of [RFC3403] is intended\
    \ to\n   explain how the fields are to be used in a NAPTR.  However, the\n   descriptions\
    \ associated with the Regexp and Replacement elements have\n   led to some confusion\
    \ over which of these should be considered when\n   dealing with non-terminal\
    \ NAPTRs.\n   [RFC3403] is specific; these two elements are mutually exclusive.\n\
    \   This means that if the Regexp element is not empty, then the\n   Replacement\
    \ element must be empty, and vice versa.  However,\n   [RFC3403] does not specify\
    \ which is used with terminal and non-\n   terminal rules.\n   The descriptive\
    \ text of Section 4.1 of [RFC3403] for the NAPTR\n   Replacement element shows\
    \ that this element holds an uncompressed\n   domain name.  Thus, it is clear\
    \ that this element cannot be used to\n   deliver the terminal string for any\
    \ DDDS Application that does not\n   have a domain name as its intended terminal\
    \ output.\n   However, the first paragraph of descriptive text for the NAPTR Regexp\n\
    \   element has led to some confusion.  It appears that the Regexp\n   element\
    \ is to be used to find \"the next domain name to lookup\".  This\n   might be\
    \ interpreted as meaning that a client program processing the\n   DDDS Application\
    \ could need to examine each non-terminal NAPTR to\n   decide whether the Regexp\
    \ element or instead the Replacement element\n   should be used to construct the\
    \ key (a domain name) to be used next\n   in non-terminal rule processing.\n \
    \  Given that a NAPTR holding a terminal rule (a \"terminal NAPTR\") must\n  \
    \ use the Substitution expression field to generate the expected output\n   of\
    \ that DDDS Application, the Regexp element is also used in such\n   rules.  Indeed,\
    \ unless that DDDS Application has a domain name as its\n   terminal output, the\
    \ Regexp element is the only possibility.\n   Thus, from the descriptive text\
    \ of this section, a Replacement\n   element can be used only in NAPTRs holding\
    \ a non-terminal rule (a\n   \"non-terminal NAPTR\") unless that DDDS Application\
    \ has a domain name\n   as its terminal output, whilst the alternative Regexp\
    \ element may be\n   used either to generate a domain name as the next key to\
    \ be used in\n   the non-terminal case or to generate the output of the DDDS\n\
    \   Application.\n   Note that each DDDS Application is free to specify the set\
    \ of flags\n   to be used with that application.  This includes specifying whether\
    \ a\n   particular flag is associated with a terminal or non-terminal rule,\n\
    \   and also includes specifying the interpretation of an empty Flags\n   field\
    \ (i.e., whether this is to be interpreted as a terminal or non-\n   terminal\
    \ rule, and if it is terminal, then what is the expected\n   output).  ENUM (as\
    \ specified in Section 2.4.1 of [RFC3761]) uses only\n   the 'u' flag, with an\
    \ empty Flags field indicating a non-terminal\n   NAPTR.\n   The general case\
    \ in which a client program must check which of the\n   two elements to use in\
    \ non-terminal NAPTR processing complicates\n   implementation, and this interpretation\
    \ has NOT been made in current\n   ENUM implementations.  It would be useful to\
    \ define exactly when a\n   client program can expect to process the Regexp element\
    \ and when to\n   expect to process the Replacement element, if only to improve\n\
    \   robustness.  Generating an ENUM domain name from the Regexp field is\n   difficult\
    \ at best and impossible for the general case of a variable-\n   length telephone\
    \ number, or one that has more than 9 digits.  Thus,\n   it is proposed that when\
    \ the ENUM specification is updated, this\n   option is deprecated, and using\
    \ the Regexp field for non-terminal\n   ENUM NAPTRs is prohibited.\n   In keeping\
    \ with current implementations, the target domain of a non-\n   terminal ENUM\
    \ NAPTR MUST be placed in the (non-empty) Replacement\n   field.  This field MUST\
    \ be interpreted as holding the domain name\n   that forms the next key output\
    \ from this non-terminal rule.\n   Conversely, the Regexp field MUST be empty\
    \ in a non-terminal NAPTR\n   encountered in ENUM processing, and ENUM clients\
    \ MUST ignore its\n   content.\n"
- title: 6.  Backwards Compatibility
  contents:
  - '6.  Backwards Compatibility

    '
- title: 6.1.  Services Field Syntax
  contents:
  - "6.1.  Services Field Syntax\n   [RFC3761] is the current standard for the syntax\
    \ for NAPTRs\n   supporting the ENUM DDDS Application.  This obsoletes the original\n\
    \   specification that was given in [RFC2916].  RFC 3761 made a change to\n  \
    \ the syntax of the Services field of the NAPTR that reflects a\n   refinement\
    \ of the concept of ENUM processing.\n   As defined in [RFC3403], there is now\
    \ a single identifier that\n   indicates the DDDS Application.  In the obsolete\
    \ specification\n   [RFC2915], there were zero or more \"Resolution Service\"\
    \ identifiers\n   (the equivalent of the DDDS Application).  The same identifier\
    \ string\n   for the DDDS identifier or the Resolution Service is defined in both\n\
    \   the [RFC3761] and [RFC2916] specifications: \"E2U\".\n   Also, [RFC3761] defines\
    \ at least one but potentially several\n   Enumservice sub-fields; in the obsolete\
    \ specification, only one\n   \"protocol\" sub-field was allowed.\n   In many\
    \ ways, the most important change for implementations is that\n   the order of\
    \ the sub-fields has been reversed.  [RFC3761] specifies\n   that the DDDS Application\
    \ identifier is the leftmost sub-field,\n   followed by one or more Enumservice\
    \ sub-fields, each separated by the\n   '+' character delimiter.  [RFC2916] specified\
    \ that the protocol sub-\n   field was the leftmost, followed by the '+' delimiter,\
    \ in turn\n   followed by the \"E2U\" resolution service tag.\n   [RFC2915] and\
    \ [RFC2916] have been obsoleted by [RFC3401] - [RFC3404]\n   and by [RFC3761].\
    \  However, [RFC3824] suggests that ENUM clients\n   should be prepared to accept\
    \ NAPTRs with the obsolete syntax.  Thus,\n   an ENUM client implementation may\
    \ have to deal with both forms.  This\n   need not be difficult.  For example,\
    \ an implementation could process\n   the Services field into a set of tokens\
    \ and expect exactly one of\n   these tokens to be \"E2U\".  In this way, the\
    \ ENUM client might be\n   designed to handle both the old and the current forms\
    \ without added\n   complexity.\n   To facilitate this method, IANA should reject\
    \ any request to register\n   an Enumservice with the label \"E2U\".\n   To summarise,\
    \ ENUM clients MUST support ENUM NAPTRs according to\n   [RFC3761] syntax.  ENUM\
    \ clients SHOULD also support ENUM NAPTRs\n   according to the obsolete syntax\
    \ of [RFC2916]; there are still zones\n   that hold \"old\" syntax NAPTRs.  ENUM\
    \ zones MUST NOT be provisioned\n   with NAPTRs according to the obsolete form,\
    \ and MUST be provisioned\n   with NAPTRs in which the Services field is according\
    \ to [RFC3761].\n"
- title: 7.  Collected Implications for ENUM Provisioning
  contents:
  - "7.  Collected Implications for ENUM Provisioning\n   ENUM NAPTRs SHOULD NOT include\
    \ characters outside the printable US-\n   ASCII equivalent range (U+0020 to U+007E)\
    \ unless it is clear that all\n   ENUM clients they are designed to support will\
    \ be able to process\n   such characters correctly.  If ENUM zone provisioning\
    \ systems require\n   non-ASCII characters, these systems SHOULD encode the non-ASCII\
    \ data\n   to emit only US-ASCII characters by applying the appropriate\n   mechanism\
    \ ([RFC3492], [RFC3987]).  Non-printable characters SHOULD\n   NOT be used, as\
    \ ENUM clients may need to present NAPTR content in a\n   human-readable form.\n\
    \   The case-sensitivity flag ('i') is inappropriate for ENUM, and SHOULD\n  \
    \ NOT be provisioned into the Regexp field of E2U NAPTRs.\n   ENUM zone provisioning\
    \ systems SHOULD use '!'  (U+0021) as their\n   Regexp delimiter character.\n\
    \   If the Regexp delimiter is a character in the static text of the Repl\n  \
    \ sub-field, it MUST be \"escaped\" using the escaped-delimiter\n   production\
    \ of the BNF specification shown in Section 3.2 of [RFC3402]\n   (i.e., \"\\!\"\
    , U+005C U+0021).  Note that when a NAPTR resource record\n   is entered in DNS\
    \ master file syntax, the backslash itself must be\n   escaped using a second\
    \ backslash.\n   If present in the ERE sub-field of an ENUM NAPTR, the literal\n\
    \   character '+' MUST be escaped as \"\\+\" (i.e.  U+005C U+002B).  Note\n  \
    \ that, as always, when a NAPTR resource record is entered in DNS\n   master file\
    \ syntax, the backslash itself must be escaped using a\n   second backslash.\n\
    \   The Registrant and the ENUM zone provisioning system he or she uses\n   SHOULD\
    \ NOT rely on ENUM clients solely taking account of the value of\n   the ORDER\
    \ and the PREFERENCE/PRIORITY fields in ENUM NAPTRs.  Thus, a\n   Registrant SHOULD\
    \ place into his or her zone only contacts that he or\n   she is willing to support;\
    \ even those with the worst ORDER and\n   PREFERENCE/PRIORITY values MAY be selected\
    \ by an end user.\n   Many apparent mistakes in ORDER and PREFERENCE/PRIORITY\
    \ values have\n   been detected in provisioned ENUM zones.  To avoid these common\n\
    \   interoperability issues, provisioning systems SHOULD NOT use\n   different\
    \ ORDER field values for NAPTRs in a Resource Record Set\n   (RRSet).  To generalise,\
    \ all ENUM NAPTRs SHOULD hold a default value\n   in their ORDER field.  A value\
    \ of \"100\" is recommended, as it seems\n   to be used in most provisioned domains.\n\
    \   Multiple NAPTRs with identical ORDER and identical PREFERENCE/\n   PRIORITY\
    \ field values SHOULD NOT be provisioned into an RRSet unless\n   the intent is\
    \ that these NAPTRs are truly identical and there is no\n   preference between\
    \ them.  Implementers SHOULD NOT assume that the DNS\n   will deliver NAPTRs within\
    \ an RRSet in a particular sequence.\n   An ENUM zone provisioning system SHOULD\
    \ assume that, if it generates\n   compound NAPTRs, the Enumservices will normally\
    \ be processed in left-\n   to-right order within such NAPTRs.\n   ENUM zone provisioning\
    \ systems SHOULD assume that, once a non-\n   terminal NAPTR has been selected\
    \ for processing, the ORDER field\n   value in a domain referred to by that non-terminal\
    \ NAPTR will be\n   considered only within the context of that referenced domain\
    \ (i.e.,\n   the ORDER value will be used only to sort within the current RRSet\n\
    \   and will not be used in the processing of NAPTRs in any other RRSet).\n  \
    \ Whilst this client behaviour is non-compliant, ENUM provisioning\n   systems\
    \ and their users should be aware that some ENUM clients have\n   been detected\
    \ with poor (or no) support for non-trivial ERE sub-field\n   expressions.\n \
    \  ENUM provisioning systems SHOULD be cautious in the use of multiple\n   back-reference\
    \ patterns in the Repl sub-field of NAPTRs they\n   provision.  Some clients have\
    \ limited buffer space for character\n   expansion when generating URIs (see also\
    \ Section 3).  These\n   provisioning systems SHOULD check the back-reference\
    \ replacement\n   patterns they use, ensuring that regular expression processing\
    \ will\n   not produce excessive-length URIs.\n   As current support is limited,\
    \ non-terminal NAPTRs SHOULD NOT be\n   provisioned in ENUM zones unless it is\
    \ clear that all ENUM clients\n   that this environment supports can process these.\n\
    \   When populating a set of domains with NAPTRs, ENUM zone provisioning\n   systems\
    \ SHOULD NOT configure non-terminal NAPTRs so that more than 5\n   such NAPTRs\
    \ will be processed in an ENUM query.\n   In a non-terminal NAPTR encountered\
    \ in an ENUM query (i.e., one with\n   an empty Flags field), the Services field\
    \ SHOULD be empty.\n   A non-terminal NAPTR MUST include its target domain in\
    \ the (non-\n   empty) Replacement field.  This field MUST be interpreted as holding\n\
    \   the domain name that forms the next key output from this non-terminal\n  \
    \ rule.  The Regexp field MUST be empty in a non-terminal NAPTR\n   intended to\
    \ be encountered during an ENUM query.\n   ENUM zones MUST NOT be provisioned\
    \ with NAPTRs according to the\n   obsolete form, and MUST be provisioned with\
    \ NAPTRs in which the\n   Services field is according to [RFC3761].\n"
- title: 8.  Collected Implications for ENUM Clients
  contents:
  - "8.  Collected Implications for ENUM Clients\n   ENUM clients SHOULD NOT discard\
    \ NAPTRs in which they detect\n   characters outside the US-ASCII printable range\
    \ (0x20 to 0x7E\n   hexadecimal).\n   ENUM clients MAY discard NAPTRs that have\
    \ octets in the Flags,\n   Services, or Regexp fields that have byte values outside\
    \ the US-ASCII\n   equivalent range (i.e., byte values above 0x7F).  Clients MUST\
    \ be\n   ready to encounter NAPTRs with such values without failure.\n   ENUM\
    \ clients SHOULD NOT assume that the delimiter is the last\n   character of the\
    \ Regexp field.\n      Unless they are sure that in their environment this is\
    \ the case,\n      in general an ENUM client may still encounter NAPTRs that have\n\
    \      been provisioned with a following 'i' (case-insensitive) flag,\n      even\
    \ though that flag has no effect at all in an ENUM scenario.\n   ENUM clients\
    \ SHOULD discard NAPTRs that have more or less than 3\n   unescaped instances\
    \ of the delimiter character within the Regexp\n   field.\n      In the spirit\
    \ of being liberal with what it will accept, if the\n      ENUM client is sure\
    \ how the Regexp field should be interpreted,\n      then it may choose to process\
    \ the NAPTR even in the face of an\n      incorrect number of unescaped delimiter\
    \ characters.  If it is not\n      clear how the Regexp field should be interpreted,\
    \ then the client\n      must discard the NAPTR.\n   Where the ENUM client presents\
    \ a list of possible URLs to the end\n   user for his or her choice, it MAY present\
    \ all NAPTRs -- not just the\n   ones with the highest currently unprocessed ORDER\
    \ field value.  The\n   client SHOULD keep to the ORDER and PREFERENCE/PRIORITY\
    \ values\n   specified by the Registrant.\n   ENUM clients SHOULD accept all NAPTRs\
    \ with identical ORDER and\n   identical PREFERENCE/PRIORITY field values, and\
    \ process them in the\n   sequence in which they appear in the DNS response. \
    \ (There is no\n   benefit in further randomising the order in which these are\n\
    \   processed, as intervening DNS Servers might have done this already).\n   ENUM\
    \ clients receiving compound NAPTRs (i.e., ones with more than one\n   Enumservice)\
    \ SHOULD process these Enumservices using a left-to-right\n   sort ordering, so\
    \ that the first Enumservice to be processed will be\n   the leftmost one, and\
    \ the last will be the rightmost one.\n   ENUM clients SHOULD consider the ORDER\
    \ field value only when sorting\n   NAPTRs within a single RRSet.  The ORDER field\
    \ value SHOULD NOT be\n   taken into account when processing NAPTRs across a sequence\
    \ of DNS\n   queries created by traversal of non-terminal NAPTR references.\n\
    \   ENUM clients MUST be ready to process NAPTRs that use a different\n   character\
    \ from '!' as their Regexp Delimiter without failure.\n   ENUM clients MUST be\
    \ ready to process NAPTRs that have non-trivial\n   patterns in their ERE sub-field\
    \ values without failure.\n   ENUM clients MUST be ready to process NAPTRs with\
    \ a DDDS Application\n   identifier other than 'E2U' without failure.\n   ENUM\
    \ clients MUST be ready to process NAPTRs with many copies of\n   back-reference\
    \ patterns within the Repl sub-field without failure\n   (see also Section 3).\n\
    \   If a NAPTR is discarded, this SHOULD NOT cause the whole ENUM query\n   to\
    \ terminate and processing SHOULD continue with the next NAPTR in\n   the returned\
    \ Resource Record Set (RRSet).\n   When an ENUM client encounters a compound NAPTR\
    \ (i.e., one containing\n   more than one Enumservice) and cannot process or cannot\
    \ recognise one\n   of the Enumservices within it, that ENUM client SHOULD ignore\
    \ this\n   Enumservice and continue with the next Enumservice within this\n  \
    \ NAPTR's Services field, discarding the NAPTR only if it cannot handle\n   any\
    \ of the Enumservices contained.  These conditions SHOULD NOT be\n   considered\
    \ errors.\n   ENUM clients MUST support ENUM NAPTRs according to [RFC3761] syntax.\n\
    \   ENUM clients SHOULD also support ENUM NAPTRs according to the\n   obsolete\
    \ syntax of [RFC2916]; there are still zones that hold \"old\"\n   syntax NAPTRs.\n"
- title: 8.1.  Non-Terminal NAPTR Processing
  contents:
  - "8.1.  Non-Terminal NAPTR Processing\n   ENUM clients MUST be ready to process\
    \ NAPTRs with an empty Flags\n   field (\"non-terminal\" NAPTRs) without failure.\
    \  More generally, non-\n   terminal NAPTR processing SHOULD be implemented, but\
    \ ENUM clients MAY\n   discard non-terminal NAPTRs they encounter.\n   ENUM clients\
    \ SHOULD ignore any content of the Services field when\n   encountering a non-terminal\
    \ NAPTR with an empty Flags field.\n   ENUM clients receiving a non-terminal NAPTR\
    \ with an empty Flags field\n   MUST treat the Replacement field as holding the\
    \ domain name to be\n   used in the next round of the ENUM query.  An ENUM client\
    \ MUST\n   discard such a non-terminal NAPTR if the Replacement field is empty\n\
    \   or does not contain a valid domain name.  By definition, it follows\n   that\
    \ the Regexp field will be empty in such a non-terminal NAPTR.  If\n   present\
    \ in a non-terminal NAPTR, a non-empty Regexp field MUST be\n   ignored by ENUM\
    \ clients.\n   If a problem is detected when processing an ENUM query across\n\
    \   multiple domains (by following non-terminal NAPTR references), then\n   the\
    \ ENUM query SHOULD NOT be abandoned, but instead processing SHOULD\n   continue\
    \ at the next NAPTR after the non-terminal NAPTR that referred\n   to the domain\
    \ in which the problem would have occurred.\n   If all NAPTRs in a domain traversed\
    \ as a result of a reference in a\n   non-terminal NAPTR have been discarded,\
    \ then the ENUM client SHOULD\n   continue its processing with the next NAPTR\
    \ in the \"referring\" RRSet\n   (i.e., the one including the non-terminal NAPTR\
    \ that caused the\n   traversal).\n   ENUM clients MAY consider a chain of more\
    \ than 5 \"non-terminal\"\n   NAPTRs traversed in a single ENUM query as an indication\
    \ that a\n   referential loop has been entered.\n   Where a domain is about to\
    \ be entered as the result of a reference in\n   a non-terminal NAPTR, and the\
    \ ENUM client has detected a potential\n   referential loop, then the client SHOULD\
    \ discard the non-terminal\n   NAPTR from its processing and continue with the\
    \ next NAPTR in its\n   list.  It SHOULD NOT make the DNS query indicated by that\
    \ non-\n   terminal NAPTR.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   In addition to the security implications of recommendations\
    \ in this\n   document, those in the basic use of ENUM (and specified in the\n\
    \   normative documents for this protocol) should be considered as well;\n   this\
    \ document does not negate those in any way.\n   The clarifications throughout\
    \ this document are intended only as\n   that: clarifications of text in the normative\
    \ documents.  They do not\n   appear to have any security implications above those\
    \ mentioned in the\n   normative documents.\n   The suggestions in Section 2,\
    \ Section 4, and Section 6 do not appear\n   to have any security considerations\
    \ (either positive or negative).\n   The suggestions in Section 5.2.2 are a valid\
    \ approach to a known\n   security threat.  It does not open an advantage to an\
    \ attacker in\n   causing excess processing or memory usage in the client.  It\
    \ does,\n   however, mean that an ENUM client will traverse a \"tight loop\" of\n\
    \   non-terminal NAPTRs in two domains 5 times before the client detects\n   this\
    \ as a loop; this does introduce slightly higher processing load\n   than would\
    \ be provided using other methods, but avoids the risks they\n   incur.\n   As\
    \ mentioned in Section 3, ENUM uses regular expressions to generate\n   URIs.\
    \  Though it is a standard feature of DDDS, use of \"non-greedy\"\n   regular\
    \ expressions with multiple back-reference patterns in the Repl\n   sub-field\
    \ does create the potential for buffer-overrun attacks.\n   Provisioning system\
    \ designers SHOULD be aware of this and SHOULD\n   limit the repeated use of back-reference\
    \ replacement patterns.\n   Conversely, ENUM client implementers SHOULD avoid\
    \ using fixed\n   character buffers when generating URIs from Repl sub-fields\
    \ that\n   include Back-reference patterns, and MUST avoid failure in the case\n\
    \   of buffer exhaustion.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   We would like to thank the various development teams\
    \ who implemented\n   ENUM (both creation systems and clients) and who read the\
    \ normative\n   documents differently -- without these differences it would have\
    \ been\n   harder for us all to develop robust clients and suitably conservative\n\
    \   management systems.  We would also thank those who allowed us to\n   check\
    \ their implementations to explore behaviour; their trust and\n   help were much\
    \ appreciated.\n   In particular, thanks to Richard Stastny for his hard work\
    \ on a\n   similar task, TS 102 172 [ETSI-TS102172] under the aegis of ETSI, and\n\
    \   for supporting some of the ENUM implementations that exist today.\n   Finally,\
    \ thanks for the dedication of Michael Mealling in giving us\n   such detailed\
    \ DDDS specifications, without which the ENUM development\n   effort would have\
    \ had a less rigorous framework on which to build.\n   This document reflects\
    \ how complex a system it is: without the\n   intricacy of [RFC3401] - [RFC3404]\
    \ and the work that went into them,\n   it could have been very difficult to ensure\
    \ interoperability.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [E.164]    ITU-T, \"The International Public\
    \ Telecommunication Number\n              Plan\", Recommendation E.164, February\
    \ 2005.\n   [IEEE.1003-2.1992]\n              Institute of Electrical and Electronics\
    \ Engineers,\n              \"Information Technology - Portable Operating System\n\
    \              Interface (POSIX) - Part 2: Shell and Utilities (Vol. 1)\",\n \
    \             IEEE Standard 1003.2, January 1993.\n   [RFC1034]  Mockapetris,\
    \ P., \"Domain names - concepts and facilities\",\n              STD 13, RFC 1034,\
    \ November 1987.\n   [RFC1035]  Mockapetris, P., \"Domain names - implementation\
    \ and\n              specification\", STD 13, RFC 1035, November 1987.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3402]  Mealling, M., \"Dynamic\
    \ Delegation Discovery System (DDDS)\n              Part Two: The Algorithm\"\
    , RFC 3402, October 2002.\n   [RFC3403]  Mealling, M., \"Dynamic Delegation Discovery\
    \ System (DDDS)\n              Part Three: The Domain Name System (DNS) Database\"\
    ,\n              RFC 3403, October 2002.\n   [RFC3404]  Mealling, M., \"Dynamic\
    \ Delegation Discovery System (DDDS)\n              Part Four: The Uniform Resource\
    \ Identifiers (URI)\",\n              RFC 3404, October 2002.\n   [RFC3405]  Mealling,\
    \ M., \"Dynamic Delegation Discovery System (DDDS)\n              Part Five: URI.ARPA\
    \ Assignment Procedures\", BCP 65,\n              RFC 3405, October 2002.\n  \
    \ [RFC3490]  Faltstrom, P., Hoffman, P., and A. Costello,\n              \"Internationalizing\
    \ Domain Names in Applications (IDNA)\",\n              RFC 3490, March 2003.\n\
    \   [RFC3491]  Hoffman, P. and M. Blanchet, \"Nameprep: A Stringprep\n       \
    \       Profile for Internationalized Domain Names (IDN)\",\n              RFC\
    \ 3491, March 2003.\n   [RFC3492]  Costello, A., \"Punycode: A Bootstring encoding\
    \ of Unicode\n              for Internationalized Domain Names in Applications\n\
    \              (IDNA)\", RFC 3492, March 2003.\n   [RFC3629]  Yergeau, F., \"\
    UTF-8, a transformation format of ISO\n              10646\", STD 63, RFC 3629,\
    \ November 2003.\n   [RFC3761]  Faltstrom, P. and M. Mealling, \"The E.164 to\
    \ Uniform\n              Resource Identifiers (URI) Dynamic Delegation Discovery\n\
    \              System (DDDS) Application (ENUM)\", RFC 3761, April 2004.\n   [RFC3966]\
    \  Schulzrinne, H., \"The tel URI for Telephone Numbers\",\n              RFC\
    \ 3966, December 2004.\n   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter,\
    \ \"Uniform\n              Resource Identifier (URI): Generic Syntax\", STD 66,\n\
    \              RFC 3986, January 2005.\n   [RFC3987]  Duerst, M. and M. Suignard,\
    \ \"Internationalized Resource\n              Identifiers (IRIs)\", RFC 3987,\
    \ January 2005.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [ASCII]    American National Standards Institute,\
    \ \"Coded Character\n              Set - 7-bit American Standard Code for Information\n\
    \              Interchange\", ANSI X3.4, 1986.\n   [ETSI-TS102172]\n         \
    \     ETSI, \"Minimum Requirements for Interoperability of\n              European\
    \ ENUM Implementations\", ETSI TS 102 172,\n              October 2004.\n   [RFC2915]\
    \  Mealling, M. and R. Daniel, \"The Naming Authority Pointer\n              (NAPTR)\
    \ DNS Resource Record\", RFC 2915, September 2000.\n   [RFC2916]  Faltstrom, P.,\
    \ \"E.164 number and DNS\", RFC 2916,\n              September 2000.\n   [RFC3401]\
    \  Mealling, M., \"Dynamic Delegation Discovery System (DDDS)\n              Part\
    \ One: The Comprehensive DDDS\", RFC 3401, October 2002.\n   [RFC3824]  Peterson,\
    \ J., Liu, H., Yu, J., and B. Campbell, \"Using\n              E.164 numbers with\
    \ the Session Initiation Protocol (SIP)\",\n              RFC 3824, June 2004.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Lawrence Conroy\n   Roke Manor Research\n   Roke Manor\n\
    \   Old Salisbury Lane\n   Romsey\n   United Kingdom\n   Phone: +44-1794-833666\n\
    \   EMail: lconroy@insensate.co.uk\n   URI:   http://www.sienum.co.uk\n   Kazunori\
    \ Fujiwara\n   Japan Registry Services Co., Ltd.\n   Chiyoda First Bldg. East\
    \ 13F\n   3-8-1 Nishi-Kanda Chiyoda-ku\n   Tokyo 101-0165\n   JAPAN\n   EMail:\
    \ fujiwara@jprs.co.jp\n   URI:   http://jprs.co.jp/en/\n"
