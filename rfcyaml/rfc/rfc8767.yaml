- contents:
  - '              Serving Stale Data to Improve DNS Resiliency

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a method (serve-stale) for recursive resolvers\n
    \  to use stale DNS data to avoid outages when authoritative nameservers\n   cannot
    be reached to refresh expired data.  One of the motivations\n   for serve-stale
    is to make the DNS more resilient to DoS attacks and\n   thereby make them less
    attractive as an attack vector.  This document\n   updates the definitions of
    TTL from RFCs 1034 and 1035 so that data\n   can be kept in the cache beyond the
    TTL expiry; it also updates RFC\n   2181 by interpreting values with the high-order
    bit set as being\n   positive, rather than 0, and suggests a cap of 7 days.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8767.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Terminology\n   3.  Background\n
    \  4.  Standards Action\n   5.  Example Method\n   6.  Implementation Considerations\n
    \  7.  Implementation Caveats\n   8.  Implementation Status\n   9.  EDNS Option\n
    \  10. Security Considerations\n   11. Privacy Considerations\n   12. NAT Considerations\n
    \  13. IANA Considerations\n   14. References\n     14.1.  Normative References\n
    \    14.2.  Informative References\n   Acknowledgements\n   Authors' Addresses\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Traditionally, the Time To Live (TTL) of a DNS Resource
    Record (RR)\n   has been understood to represent the maximum number of seconds
    that a\n   record can be used before it must be discarded, based on its\n   description
    and usage in [RFC1035] and clarifications in [RFC2181].\n   This document expands
    the definition of the TTL to explicitly allow\n   for expired data to be used
    in the exceptional circumstance that a\n   recursive resolver is unable to refresh
    the information.  It is\n   predicated on the observation that authoritative answer\n
    \  unavailability can cause outages even when the underlying data those\n   servers
    would return is typically unchanged.\n   We describe a method below for this use
    of stale data, balancing the\n   competing needs of resiliency and freshness.\n
    \  This document updates the definitions of TTL from [RFC1034] and\n   [RFC1035]
    so that data can be kept in the cache beyond the TTL\n   expiry; it also updates
    [RFC2181] by interpreting values with the\n   high-order bit set as being positive,
    rather than 0, and also\n   suggests a cap of 7 days.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n   capitals,
    as shown here.\n   For a glossary of DNS terms, please see [RFC8499].\n"
  title: 2.  Terminology
- contents:
  - "3.  Background\n   There are a number of reasons why an authoritative server
    may become\n   unreachable, including Denial-of-Service (DoS) attacks, network\n
    \  issues, and so on.  If a recursive server is unable to contact the\n   authoritative
    servers for a query but still has relevant data that\n   has aged past its TTL,
    that information can still be useful for\n   generating an answer under the metaphorical
    assumption that \"stale\n   bread is better than no bread.\"\n   [RFC1035], Section
    3.2.1 says that the TTL \"specifies the time\n   interval that the resource record
    may be cached before the source of\n   the information should again be consulted.\"
    \ [RFC1035], Section 4.1.3\n   further says that the TTL \"specifies the time
    interval (in seconds)\n   that the resource record may be cached before it should
    be\n   discarded.\"\n   A natural English interpretation of these remarks would
    seem to be\n   clear enough that records past their TTL expiration must not be
    used.\n   However, [RFC1035] predates the more rigorous terminology of\n   [RFC2119],
    which softened the interpretation of \"may\" and \"should\".\n   [RFC2181] aimed
    to provide \"the precise definition of the Time to\n   Live,\" but Section 8 of
    [RFC2181] was mostly concerned with the\n   numeric range of values rather than
    data expiration behavior.  It\n   does, however, close that section by noting,
    \"The TTL specifies a\n   maximum time to live, not a mandatory time to live.\"
    \ This wording\n   again does not contain BCP 14 key words [RFC2119], but it does
    convey\n   the natural language connotation that data becomes unusable past TTL\n
    \  expiry.\n   As of the time of this writing, several large-scale operators use\n
    \  stale data for answers in some way.  A number of recursive resolver\n   packages,
    including BIND, Knot Resolver, OpenDNS, and Unbound,\n   provide options to use
    stale data.  Apple macOS can also use stale\n   data as part of the Happy Eyeballs
    algorithms in mDNSResponder.  The\n   collective operational experience is that
    using stale data can\n   provide significant benefit with minimal downside.\n"
  title: 3.  Background
- contents:
  - "4.  Standards Action\n   The definition of TTL in Sections 3.2.1 and 4.1.3 of
    [RFC1035] is\n   amended to read:\n   TTL  a 32-bit unsigned integer number of
    seconds that specifies the\n        duration that the resource record MAY be cached
    before the\n        source of the information MUST again be consulted.  Zero values\n
    \       are interpreted to mean that the RR can only be used for the\n        transaction
    in progress, and should not be cached.  Values\n        SHOULD be capped on the
    order of days to weeks, with a\n        recommended cap of 604,800 seconds (7
    days).  If the data is\n        unable to be authoritatively refreshed when the
    TTL expires, the\n        record MAY be used as though it is unexpired.  See Sections
    5\n        and 6 of [RFC8767] for details.\n   Interpreting values that have the
    high-order bit set as being\n   positive, rather than 0, is a change from [RFC2181],
    the rationale\n   for which is explained in Section 6.  Suggesting a cap of 7
    days,\n   rather than the 68 years allowed by the full 31 bits of Section 8 of\n
    \  [RFC2181], reflects the current practice of major modern DNS\n   resolvers.\n
    \  When returning a response containing stale records, a recursive\n   resolver
    MUST set the TTL of each expired record in the message to a\n   value greater
    than 0, with a RECOMMENDED value of 30 seconds.  See\n   Section 6 for explanation.\n
    \  Answers from authoritative servers that have a DNS response code of\n   either
    0 (NoError) or 3 (NXDomain) and the Authoritative Answer (AA)\n   bit set MUST
    be considered to have refreshed the data at the\n   resolver.  Answers from authoritative
    servers that have any other\n   response code SHOULD be considered a failure to
    refresh the data and\n   therefore leave any previous state intact.  See Section
    6 for a\n   discussion.\n"
  title: 4.  Standards Action
- contents:
  - "5.  Example Method\n   There is more than one way a recursive resolver could
    responsibly\n   implement this resiliency feature while still respecting the intent\n
    \  of the TTL as a signal for when data is to be refreshed.\n   In this example
    method, four notable timers drive considerations for\n   the use of stale data:\n
    \  *  A client response timer, which is the maximum amount of time a\n      recursive
    resolver should allow between the receipt of a\n      resolution request and sending
    its response.\n   *  A query resolution timer, which caps the total amount of
    time a\n      recursive resolver spends processing the query.\n   *  A failure
    recheck timer, which limits the frequency at which a\n      failed lookup will
    be attempted again.\n   *  A maximum stale timer, which caps the amount of time
    that records\n      will be kept past their expiration.\n   Most recursive resolvers
    already have the query resolution timer and,\n   effectively, some kind of failure
    recheck timer.  The client response\n   timer and maximum stale timer are new
    concepts for this mechanism.\n   When a recursive resolver receives a request,
    it should start the\n   client response timer.  This timer is used to avoid client
    timeouts.\n   It should be configurable, with a recommended value of 1.8 seconds
    as\n   being just under a common timeout value of 2 seconds while still\n   giving
    the resolver a fair shot at resolving the name.\n   The resolver then checks its
    cache for any unexpired records that\n   satisfy the request and returns them
    if available.  If it finds no\n   relevant unexpired data and the Recursion Desired
    flag is not set in\n   the request, it should immediately return the response
    without\n   consulting the cache for expired records.  Typically, this response\n
    \  would be a referral to authoritative nameservers covering the zone,\n   but
    the specifics are implementation dependent.\n   If iterative lookups will be done,
    then the failure recheck timer is\n   consulted.  Attempts to refresh from non-responsive
    or otherwise\n   failing authoritative nameservers are recommended to be done
    no more\n   frequently than every 30 seconds.  If this request was received\n
    \  within this period, the cache may be immediately consulted for stale\n   data
    to satisfy the request.\n   Outside the period of the failure recheck timer, the
    resolver should\n   start the query resolution timer and begin the iterative resolution\n
    \  process.  This timer bounds the work done by the resolver when\n   contacting
    external authorities and is commonly around 10 to 30\n   seconds.  If this timer
    expires on an attempted lookup that is still\n   being processed, the resolution
    effort is abandoned.\n   If the answer has not been completely determined by the
    time the\n   client response timer has elapsed, the resolver should then check
    its\n   cache to see whether there is expired data that would satisfy the\n   request.
    \ If so, it adds that data to the response message with a TTL\n   greater than
    0 (as specified in Section 4).  The response is then\n   sent to the client while
    the resolver continues its attempt to\n   refresh the data.\n   When no authorities
    are able to be reached during a resolution\n   attempt, the resolver should attempt
    to refresh the delegation and\n   restart the iterative lookup process with the
    remaining time on the\n   query resolution timer.  This resumption should be done
    only once per\n   resolution effort.\n   Outside the resolution process, the maximum
    stale timer is used for\n   cache management and is independent of the query resolution
    process.\n   This timer is conceptually different from the maximum cache TTL that\n
    \  exists in many resolvers, the latter being a clamp on the value of\n   TTLs
    as received from authoritative servers and recommended to be\n   7 days in the
    TTL definition in Section 4.  The maximum stale timer\n   should be configurable.
    \ It defines the length of time after a record\n   expires that it should be retained
    in the cache.  The suggested value\n   is between 1 and 3 days.\n"
  title: 5.  Example Method
- contents:
  - "6.  Implementation Considerations\n   This document mainly describes the issues
    behind serving stale data\n   and intentionally does not provide a formal algorithm.
    \ The concept\n   is not overly complex, and the details are best left to resolver\n
    \  authors to implement in their codebases.  The processing of serve-\n   stale
    is a local operation, and consistent variables between\n   deployments are not
    needed for interoperability.  However, we would\n   like to highlight the impact
    of various implementation choices,\n   starting with the timers involved.\n   The
    most obvious of these is the maximum stale timer.  If this\n   variable is too
    large, it could cause excessive cache memory usage,\n   but if it is too small,
    the serve-stale technique becomes less\n   effective, as the record may not be
    in the cache to be used if\n   needed.  Shorter values, even less than a day,
    can effectively handle\n   the vast majority of outages.  Longer values, as much
    as a week, give\n   time for monitoring systems to notice a resolution problem
    and for\n   human intervention to fix it; operational experience has been that\n
    \  sometimes the right people can be hard to track down and\n   unfortunately
    slow to remedy the situation.\n   Increased memory consumption could be mitigated
    by prioritizing\n   removal of stale records over non-expired records during cache\n
    \  exhaustion.  Eviction strategies could consider additional factors,\n   including
    the last time of use or the popularity of a record, to\n   retain active but stale
    records.  A feature to manually flush only\n   stale records could also be useful.\n
    \  The client response timer is another variable that deserves\n   consideration.
    \ If this value is too short, there exists the risk\n   that stale answers may
    be used even when the authoritative server is\n   actually reachable but slow;
    this may result in undesirable answers\n   being returned.  Conversely, waiting
    too long will negatively impact\n   user experience.\n   The balance for the failure
    recheck timer is responsiveness in\n   detecting the renewed availability of authorities
    versus the extra\n   resource use for resolution.  If this variable is set too
    large,\n   stale answers may continue to be returned even after the\n   authoritative
    server is reachable; per [RFC2308], Section 7, this\n   should be no more than
    5 minutes.  If this variable is too small,\n   authoritative servers may be targeted
    with a significant amount of\n   excess traffic.\n   Regarding the TTL to set
    on stale records in the response,\n   historically TTLs of 0 seconds have been
    problematic for some\n   implementations, and negative values can't effectively
    be\n   communicated to existing software.  Other very short TTLs could lead\n
    \  to congestive collapse as TTL-respecting clients rapidly try to\n   refresh.
    \ The recommended value of 30 seconds not only sidesteps\n   those potential problems
    with no practical negative consequences, it\n   also rate-limits further queries
    from any client that honors the TTL,\n   such as a forwarding resolver.\n   As
    for the change to treat a TTL with the high-order bit set as\n   positive and
    then clamping it, as opposed to [RFC2181] treating it as\n   zero, the rationale
    here is basically one of engineering simplicity\n   versus an inconsequential
    operational history.  Negative TTLs had no\n   rational intentional meaning that
    wouldn't have been satisfied by\n   just sending 0 instead, and similarly there
    was realistically no\n   practical purpose for sending TTLs of 2^25 seconds (1
    year) or more.\n   There's also no record of TTLs in the wild having the most\n
    \  significant bit set in the DNS Operations, Analysis, and Research\n   Center's
    (DNS-OARC's) \"Day in the Life\" samples [DITL].  With no\n   apparent reason
    for operators to use them intentionally, that leaves\n   either errors or non-standard
    experiments as explanations as to why\n   such TTLs might be encountered, with
    neither providing an obviously\n   compelling reason as to why having the leading
    bit set should be\n   treated differently from having any of the next eleven bits
    set and\n   then capped per Section 4.\n   Another implementation consideration
    is the use of stale nameserver\n   addresses for lookups.  This is mentioned explicitly
    because, in some\n   resolvers, getting the addresses for nameservers is a separate
    path\n   from a normal cache lookup.  If authoritative server addresses are\n
    \  not able to be refreshed, resolution can possibly still be successful\n   if
    the authoritative servers themselves are up.  For instance,\n   consider an attack
    on a top-level domain that takes its nameservers\n   offline; serve-stale resolvers
    that had expired glue addresses for\n   subdomains within that top-level domain
    would still be able to\n   resolve names within those subdomains, even those it
    had not\n   previously looked up.\n   The directive in Section 4 that only NoError
    and NXDomain responses\n   should invalidate any previously associated answer
    stems from the\n   fact that no other RCODEs that a resolver normally encounters
    make\n   any assertions regarding the name in the question or any data\n   associated
    with it.  This comports with existing resolver behavior\n   where a failed lookup
    (say, during prefetching) doesn't impact the\n   existing cache state.  Some authoritative
    server operators have said\n   that they would prefer stale answers to be used
    in the event that\n   their servers are responding with errors like ServFail instead
    of\n   giving true authoritative answers.  Implementers MAY decide to return\n
    \  stale answers in this situation.\n   Since the goal of serve-stale is to provide
    resiliency for all\n   obvious errors to refresh data, these other RCODEs are
    treated as\n   though they are equivalent to not getting an authoritative response.\n
    \  Although NXDomain for a previously existing name might well be an\n   error,
    it is not handled that way because there is no effective way\n   to distinguish
    operator intent for legitimate cases versus error\n   cases.\n   During discussion
    in the IETF, it was suggested that, if all\n   authorities return responses with
    an RCODE of Refused, it may be an\n   explicit signal to take down the zone from
    servers that still have\n   the zone's delegation pointed to them.  Refused, however,
    is also\n   overloaded to mean multiple possible failures that could represent\n
    \  transient configuration failures.  Operational experience has shown\n   that
    purposely returning Refused is a poor way to achieve an explicit\n   takedown
    of a zone compared to either updating the delegation or\n   returning NXDomain
    with a suitable SOA for extended negative caching.\n   Implementers MAY nonetheless
    consider whether to treat all\n   authorities returning Refused as preempting
    the use of stale data.\n"
  title: 6.  Implementation Considerations
- contents:
  - "7.  Implementation Caveats\n   Stale data is used only when refreshing has failed
    in order to adhere\n   to the original intent of the design of the DNS and the
    behavior\n   expected by operators.  If stale data were to always be used\n   immediately
    and then a cache refresh attempted after the client\n   response has been sent,
    the resolver would frequently be sending data\n   that it would have had no trouble
    refreshing.  Because modern\n   resolvers use techniques like prefetching and
    request coalescing for\n   efficiency, it is not necessary that every client request
    needs to\n   trigger a new lookup flow in the presence of stale data, but rather\n
    \  that a good-faith effort has been recently made to refresh the stale\n   data
    before it is delivered to any client.\n   It is important to continue the resolution
    attempt after the stale\n   response has been sent, until the query resolution
    timeout, because\n   some pathological resolutions can take many seconds to succeed
    as\n   they cope with unavailable servers, bad networks, and other problems.\n
    \  Stopping the resolution attempt when the response with expired data\n   has
    been sent would mean that answers in these pathological cases\n   would never
    be refreshed.\n   The continuing prohibition against using data with a 0-second
    TTL\n   beyond the current transaction explicitly extends to it being\n   unusable
    even for stale fallback, as it is not to be cached at all.\n   Be aware that Canonical
    Name (CNAME) and DNAME records [RFC6672]\n   mingled in the expired cache with
    other records at the same owner\n   name can cause surprising results.  This was
    observed with an initial\n   implementation in BIND when a hostname changed from
    having an IPv4\n   Address (A) record to a CNAME.  The version of BIND being used
    did\n   not evict other types in the cache when a CNAME was received, which\n
    \  in normal operations is not a significant issue.  However, after both\n   records
    expired and the authorities became unavailable, the fallback\n   to stale answers
    returned the older A instead of the newer CNAME.\n"
  title: 7.  Implementation Caveats
- contents:
  - "8.  Implementation Status\n   The algorithm described in Section 5 was originally
    implemented as a\n   patch to BIND 9.7.0.  It has been in use on Akamai's production\n
    \  network since 2011; it effectively smoothed over transient failures\n   and
    longer outages that would have resulted in major incidents.  The\n   patch was
    contributed to the Internet Systems Consortium, and the\n   functionality is now
    available in BIND 9.12 and later via the options\n   stale-answer-enable, stale-answer-ttl,
    and max-stale-ttl.\n   Unbound has a similar feature for serving stale answers
    and will\n   respond with stale data immediately if it has recently tried and\n
    \  failed to refresh the answer by prefetching.  Starting from version\n   1.10.0,
    Unbound can also be configured to follow the algorithm\n   described in Section
    5.  Both behaviors can be configured and fine-\n   tuned with the available serve-expired-*
    options.\n   Knot Resolver has a demo module here: <https://knot-\n   resolver.readthedocs.io/en/stable/modules-serve_stale.html>.\n
    \  Apple's system resolvers are also known to use stale answers, but the\n   details
    are not readily available.\n   In the research paper \"When the Dike Breaks: Dissecting
    DNS Defenses\n   During DDoS\" [DikeBreaks], the authors detected some use of
    stale\n   answers by resolvers when authorities came under attack.  Their\n   research
    results suggest that more widespread adoption of the\n   technique would significantly
    improve resiliency for the large number\n   of requests that fail or experience
    abnormally long resolution times\n   during an attack.\n"
  title: 8.  Implementation Status
- contents:
  - "9.  EDNS Option\n   During the discussion of serve-stale in the IETF, it was
    suggested\n   that an EDNS option [RFC6891] should be available.  One proposal
    was\n   to use it to opt in to getting data that is possibly stale, and\n   another
    was to signal when stale data has been used for a response.\n   The opt-in use
    case was rejected, as the technique was meant to be\n   immediately useful in
    improving DNS resiliency for all clients.\n   The reporting case was ultimately
    also rejected because even the\n   simpler version of a proposed option was still
    too much bother to\n   implement for too little perceived value.\n"
  title: 9.  EDNS Option
- contents:
  - "10.  Security Considerations\n   The most obvious security issue is the increased
    likelihood of DNSSEC\n   validation failures when using stale data because signatures
    could be\n   returned outside their validity period.  Stale negative records can\n
    \  increase the time window where newly published TLSA or DS RRs may not\n   be
    used due to cached NSEC or NSEC3 records.  These scenarios would\n   only be an
    issue if the authoritative servers are unreachable (the\n   only time the techniques
    in this document are used), and thus serve-\n   stale does not introduce a new
    failure in place of what would have\n   otherwise been success.\n   Additionally,
    bad actors have been known to use DNS caches to keep\n   records alive even after
    their authorities have gone away.  The\n   serve-stale feature potentially makes
    the attack easier, although\n   without introducing a new risk.  In addition,
    attackers could combine\n   this with a DDoS attack on authoritative servers with
    the explicit\n   intent of having stale information cached for a longer period
    of\n   time.  But if attackers have this capacity, they probably could do\n   much
    worse than prolonging the life of old data.\n   In [CloudStrife], it was demonstrated
    how stale DNS data, namely\n   hostnames pointing to addresses that are no longer
    in use by the\n   owner of the name, can be used to co-opt security -- for example,
    to\n   get domain-validated certificates fraudulently issued to an attacker.\n
    \  While this document does not create a new vulnerability in this area,\n   it
    does potentially enlarge the window in which such an attack could\n   be made.
    \ A proposed mitigation is that certificate authorities\n   should fully look
    up each name starting at the DNS root for every\n   name lookup.  Alternatively,
    certificate authorities should use a\n   resolver that is not serving stale data.\n"
  title: 10.  Security Considerations
- contents:
  - "11.  Privacy Considerations\n   This document does not add any practical new
    privacy issues.\n"
  title: 11.  Privacy Considerations
- contents:
  - "12.  NAT Considerations\n   The method described here is not affected by the
    use of NAT devices.\n"
  title: 12.  NAT Considerations
- contents:
  - "13.  IANA Considerations\n   This document has no IANA actions.\n"
  title: 13.  IANA Considerations
- contents:
  - '14.  References

    '
  - contents:
    - "14.1.  Normative References\n   [RFC1034]  Mockapetris, P., \"Domain names
      - concepts and facilities\",\n              STD 13, RFC 1034, DOI 10.17487/RFC1034,
      November 1987,\n              <https://www.rfc-editor.org/info/rfc1034>.\n   [RFC1035]
      \ Mockapetris, P., \"Domain names - implementation and\n              specification\",
      STD 13, RFC 1035, DOI 10.17487/RFC1035,\n              November 1987, <https://www.rfc-editor.org/info/rfc1035>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2181]  Elz,
      R. and R. Bush, \"Clarifications to the DNS\n              Specification\",
      RFC 2181, DOI 10.17487/RFC2181, July 1997,\n              <https://www.rfc-editor.org/info/rfc2181>.\n
      \  [RFC2308]  Andrews, M., \"Negative Caching of DNS Queries (DNS\n              NCACHE)\",
      RFC 2308, DOI 10.17487/RFC2308, March 1998,\n              <https://www.rfc-editor.org/info/rfc2308>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 14.1.  Normative References
  - contents:
    - "14.2.  Informative References\n   [CloudStrife]\n              Borgolte, K.,
      Fiebig, T., Hao, S., Kruegel, C., and G.\n              Vigna, \"Cloud Strife:
      Mitigating the Security Risks of\n              Domain-Validated Certificates\",\n
      \             DOI 10.1145/3232755.3232859, ACM 2018 Applied Networking\n              Research
      Workshop, July 2018, <https://www.ndss-\n              symposium.org/wp-content/uploads/2018/02/ndss2018_06A-\n
      \             4_Borgolte_paper.pdf>.\n   [DikeBreaks]\n              Moura,
      G.C.M., Heidemann, J., M\xFCller, M., Schmidt, R. de\n              O., and
      M. Davids, \"When the Dike Breaks: Dissecting DNS\n              Defenses During
      DDoS\", DOI 10.1145/3278532.3278534,\n              ACM 2018 Internet Measurement
      Conference, October 2018,\n              <https://www.isi.edu/~johnh/PAPERS/Moura18b.pdf>.\n
      \  [DITL]     DNS-OARC, \"DITL Traces and Analysis\", January 2018,\n              <https://www.dns-oarc.net/oarc/data/ditl>.\n
      \  [RFC6672]  Rose, S. and W. Wijngaards, \"DNAME Redirection in the\n              DNS\",
      RFC 6672, DOI 10.17487/RFC6672, June 2012,\n              <https://www.rfc-editor.org/info/rfc6672>.\n
      \  [RFC6891]  Damas, J., Graff, M., and P. Vixie, \"Extension Mechanisms\n              for
      DNS (EDNS(0))\", STD 75, RFC 6891,\n              DOI 10.17487/RFC6891, April
      2013,\n              <https://www.rfc-editor.org/info/rfc6891>.\n   [RFC8499]
      \ Hoffman, P., Sullivan, A., and K. Fujiwara, \"DNS\n              Terminology\",
      BCP 219, RFC 8499, DOI 10.17487/RFC8499,\n              January 2019, <https://www.rfc-editor.org/info/rfc8499>.\n"
    title: 14.2.  Informative References
  title: 14.  References
- contents:
  - "Acknowledgements\n   The authors wish to thank Brian Carpenter, Vladimir Cunat,
    Robert\n   Edmonds, Tony Finch, Bob Harold, Tatuya Jinmei, Matti Klock, Jason\n
    \  Moreau, Giovane Moura, Jean Roy, Mukund Sivaraman, Davey Song, Paul\n   Vixie,
    Ralf Weber, and Paul Wouters for their review and feedback.\n   Paul Hoffman deserves
    special thanks for submitting a number of Pull\n   Requests.\n   Thank you also
    to the following members of the IESG for their final\n   review: Roman Danyliw,
    Benjamin Kaduk, Suresh Krishnan, Mirja\n   K\xFChlewind, and Adam Roach.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   David C Lawrence\n   Oracle\n   Email: tale@dd.org\n   Warren
    \"Ace\" Kumari\n   Google\n   1600 Amphitheatre Parkway\n   Mountain View, CA
    94043\n   United States of America\n   Email: warren@kumari.net\n   Puneet Sood\n"
  title: Authors' Addresses
