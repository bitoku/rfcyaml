- title: __initial_text__
  contents:
  - '             S/MIME Capabilities for Public Key Definitions

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a set of Secure/Multipurpose Internet Mail\n\
    \   Extensions (S/MIME) Capability types for ASN.1 encoding for the\n   current\
    \ set of public keys defined by the PKIX working group.  This\n   facilitates\
    \ the ability for a requester to specify information on the\n   public keys and\
    \ signature algorithms to be used in responses.\n   \"Online Certificate Status\
    \ Protocol Algorithm Agility\" (RFC 6277)\n   details an example of where this\
    \ is used.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6664.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n     1.1.  ASN.1 Notation . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2.  Requirements Terminology . . . . . . . . . . . . .\
    \ . . . .  4\n   2.  RSA Public Keys  . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n     2.1.  Generic RSA Public Keys  . . . . . . . . . . . . . . .\
    \ . .  4\n     2.2.  RSASSA-PSS Signature Public Keys . . . . . . . . . . . .\
    \ .  5\n     2.3.  RSAES-OAEP Key Transport Public Keys . . . . . . . . . . .\
    \  6\n   3.  Diffie-Hellman Keys  . . . . . . . . . . . . . . . . . . . . .  7\n\
    \     3.1.  DSA Signature Public Key . . . . . . . . . . . . . . . . .  7\n  \
    \   3.2.  DH Key Agreement Keys  . . . . . . . . . . . . . . . . . .  8\n   4.\
    \  Elliptic Curve Keys  . . . . . . . . . . . . . . . . . . . . .  8\n     4.1.\
    \  Generic Elliptic Curve Keys  . . . . . . . . . . . . . . .  9\n     4.2.  Elliptic\
    \ Curve DH Keys . . . . . . . . . . . . . . . . . . 10\n     4.3.  Elliptic Curve\
    \ MQV Keys  . . . . . . . . . . . . . . . . . 10\n   5.  RSASSA-PSS Signature\
    \ Algorithm Capability  . . . . . . . . . . 10\n   6.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 12\n   7.  References . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . 13\n     7.1.  Normative References . .\
    \ . . . . . . . . . . . . . . . . . 13\n     7.2.  Informative References . .\
    \ . . . . . . . . . . . . . . . . 13\n   Appendix A.  2008 ASN.1 Module . . .\
    \ . . . . . . . . . . . . . . . 15\n   Appendix B.  1988 ASN.1 Module . . . .\
    \ . . . . . . . . . . . . . . 18\n   Appendix C.  Future Work . . . . . . . .\
    \ . . . . . . . . . . . . . 19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In the process of dealing with the Online Certificate Status\
    \ Protocol\n   (OCSP) agility issues in [RFC6277], it was noted that we really\n\
    \   wanted to describe information to be used in selecting a public key,\n   but\
    \ we did not have any way of doing so.  This document fills that\n   hole by defining\
    \ a set of Secure/Multipurpose Internet Mail\n   Extensions (S/MIME) Capability\
    \ types for a small set of public key\n   representations.\n   S/MIME capabilities\
    \ were originally defined in [SMIMEv3-MSG] as a way\n   for the sender of an S/MIME\
    \ message to tell the recipient of the\n   message the set of encryption algorithms\
    \ that were supported by the\n   sender's system.  In the beginning, the focus\
    \ was primarily on\n   communicating the set of encryption algorithms that were\
    \ supported by\n   the sender.  Over time, it was expanded to allow for an S/MIME\
    \ client\n   to state that it supported new features such as the compression data\n\
    \   type and binary encoded contents.  The structure was defined so that\n   parameters\
    \ can be passed in as part of the capability to allow for\n   subsets of algorithms\
    \ to be used.  This was used for the RC2\n   encryption algorithm, although only\
    \ two values out of the set of\n   values were ever used.  The goal of restricting\
    \ the set of values is\n   to allow a client to use a simple binary comparison\
    \ in order to check\n   for equality.  The client should never need to decode\
    \ the capability\n   and do an element-by-element comparison.  Historically, this\
    \ has not\n   been a problem as the vast majority of S/MIME capabilities consist\
    \ of\n   just the algorithm identifier for the algorithm.\n   Many people are\
    \ under the impression that only a single data\n   structure can be assigned to\
    \ an object identifier, but this is not\n   the case.  As an example, the OID\
    \ rsaEncryption is used in multiple\n   locations for different data.  It represents\
    \ a public key, a key\n   transport algorithm (in S/MIME), and was originally\
    \ used in the\n   Public-Key Cryptography Standards (PKCS) #7 specification as\
    \ a\n   signature value identifier (this has since been changed by the S/MIME\n\
    \   specifications).  One of the implications is that when mapping an\n   object\
    \ identifier to a data type structure, the location in the ASN.1\n   structure\
    \ needs to be taken into consideration as well.\n"
- title: 1.1.  ASN.1 Notation
  contents:
  - "1.1.  ASN.1 Notation\n   The main body of the text is written using snippets\
    \ of ASN.1 that are\n   extracted from the ASN.1 2008 module in Appendix A.  ASN.1\
    \ 2008 is\n   used in this document because it directly represents the metadata\n\
    \   that is not representable in the 1988 version of ASN.1 but instead is\n  \
    \ part of the text.  In keeping with the current policy of the PKIX\n   working\
    \ group, the 1988 module along with the text is the normative\n   module.  In\
    \ the event of a conflict between the content of the two\n   modules, the 1988\
    \ module is authoritative.\n   When reading this document, it is assumed that\
    \ you will have a degree\n   of familiarity with the basic object module that\
    \ is presented in\n   Section 3 of RFC 5912 [RFC5912].  We use the SMIME-CAPS\
    \ object in\n   this document; it associates two fields together in a single object.\n\
    \   SMIME-CAPS ::= CLASS {\n       &id         OBJECT IDENTIFIER UNIQUE,\n   \
    \    &Type       OPTIONAL\n   }\n   WITH SYNTAX { [TYPE &Type] IDENTIFIED BY &id\
    \ }\n   These fields are:\n   &id  contains an object identifier.  When placed\
    \ in an object set,\n      this element is tagged so that no two elements can\
    \ be placed in\n      the set that have the same value in the &id field.  Note\
    \ that this\n      is not a restriction saying that only a single object can exist\n\
    \      with a single object identifier.\n   &Type  optionally contains an ASN.1\
    \ type identifier.  If the field\n      &Type is not defined, then the optional\
    \ parameters field of the\n      AlgorithmIdentifier type would be omitted.\n\
    \   The class also has a specialized syntax for how to define an object\n   in\
    \ this class.  The all uppercase words TYPE IDENTIFIER and BY are\n   syntactic\
    \ sugar to make it easier to read.  The square brackets\n   define optional pieces\
    \ of the syntax.\n   The ASN.1 syntax permits any field in an object to be referenced\
    \ in\n   another location.  This means that if an object called foo has a\n  \
    \ field named &value, the value can be directly referenced as foo.&\n   value.\
    \  This means that any updates to values or types are\n   automatically propagated,\
    \ and we do not need to replicate the data.\n"
- title: 1.2.  Requirements Terminology
  contents:
  - "1.2.  Requirements Terminology\n   When capitalized, the key words \"MUST\",\
    \ \"MUST NOT\", \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\",\n   and \"OPTIONAL\" in this document are to\
    \ be interpreted as described in\n   [RFC2119].\n"
- title: 2.  RSA Public Keys
  contents:
  - "2.  RSA Public Keys\n   There are currently three different public key object\
    \ identifiers for\n   RSA public keys.  These are RSA, RSA Encryption Scheme -\
    \ Optimal\n   Asymmetric Encryption Padding (RSAES-OAEP), and RSA Signature Scheme\n\
    \   with Appendix - Probabilistic Signature Scheme (RSASSA-PSS).\n"
- title: 2.1.  Generic RSA Public Keys
  contents:
  - "2.1.  Generic RSA Public Keys\n   Almost all RSA keys that are contained in certificates\
    \ today use the\n   generic RSA public key format and identifier.  This allows\
    \ for the\n   public key to be used both for key transport and for signature\n\
    \   validation (assuming it is compatible with the bits in the key usage\n   extension).\
    \  The only reason for using one of the more specific\n   public key identifiers\
    \ is if the user wants to restrict the usage of\n   the RSA public key to a specific\
    \ algorithm.\n   For the generic RSA public key, the S/MIME capability that is\n\
    \   advertised is a request for a specific key size to be used.  This\n   would\
    \ normally be used for dealing with a request on the key to be\n   used for a\
    \ signature that the client would then verify.  In general,\n   the user would\
    \ provide a specific key when a key transport algorithm\n   is being considered.\n\
    \   The ASN.1 that is used for the generic RSA public key is defined as\n   below:\n\
    \      scap-pk-rsa SMIME-CAPS ::= {\n        TYPE RSAKeyCapabilities\n       \
    \ IDENTIFIED BY pk-rsa.&id\n      }\n      RSAKeyCapabilities ::= SEQUENCE {\n\
    \         minKeySize        RSAKeySize,\n         maxKeySize        RSAKeySize\
    \ OPTIONAL\n      }\n      RSAKeySize ::= INTEGER (1024 | 2048 | 3072 | 4096 |\
    \ 7680 |\n                              8192 | 15360, ...)\n   In the above ASN.1,\
    \ we have defined the following:\n   scap-pk-rsa  is a new SMIME-CAPS object.\
    \  This object associates the\n      existing object identifier (rsaEncryption)\
    \ used for the public key\n      in certificates (defined in [RFC3279] and [RFC5912])\
    \ with a new\n      type defined in this document.\n   RSAKeyCapabilities  carries\
    \ the set of desired capabilities for an\n      RSA key.  The fields of this type\
    \ are:\n      minKeySize  contains the minimum length of the RSA modulus to be\n\
    \         used.  This field SHOULD NOT contain a value less than 1024.\n     \
    \ maxKeySize  contains the maximum length of the RSA modules that\n         should\
    \ be used.  If this field is absent, then no maximum\n         length is requested/expected.\
    \  This value is normally selected\n         so as not to cause the current code\
    \ to run unacceptably long\n         when processing signatures.\n   RSAKeySize\
    \  provides a set of suggested values to be used.  The\n      values 1024, 2048,\
    \ 3072, 7680, and 15360 are from the NIST guide\n      on signature sizes [NIST-SIZES]\
    \ while the others are common powers\n      of two that are used.  The list is\
    \ not closed, and other values\n      can be used.\n"
- title: 2.2.  RSASSA-PSS Signature Public Keys
  contents:
  - "2.2.  RSASSA-PSS Signature Public Keys\n   While one will use the generic RSA\
    \ public key identifier in a\n   certificate most of the time, the RSASSA-PSS\
    \ identifier can be used\n   if the owner of the key desires to restrict the usage\
    \ of the key to\n   just this algorithm.  This algorithm does have the ability\
    \ to place a\n   set of algorithm parameters in the public key info structure,\
    \ but\n   they have not been included in this location as the same information\n\
    \   should be carried in the signature S/MIME capabilities instead.\n   The ASN.1\
    \ that is used for the RSASSA-PSS public key is defined\n   below:\n      scap-pk-rsaSSA-PSS\
    \ SMIME-CAPS ::= {\n        TYPE RSAKeyCapabilities\n        IDENTIFIED BY pk-rsaSSA-PSS.&id\n\
    \      }\n   In the above ASN.1, we have defined the following:\n   scap-pk-rsaSSA-PSS\
    \  is a new SMIME-CAPS object.  This object\n      associates the existing object\
    \ identifier (id-RSASSA-PSS) used for\n      the public key certificates (defined\
    \ in [RFC4055] and [RFC5912])\n      with type RSAKeyCapabilities.\n"
- title: 2.3.  RSAES-OAEP Key Transport Public Keys
  contents:
  - "2.3.  RSAES-OAEP Key Transport Public Keys\n   While one will use the generic\
    \ RSA public key identifier in a\n   certificate most of the time, the RSAES-OAEP\
    \ identifier can be used\n   if the owner of the key desires to restrict the usage\
    \ of the key to\n   just this algorithm.  This algorithm does have the ability\
    \ to place a\n   set of algorithm parameters in the public key info structure,\
    \ but\n   they have not been included in this location as the same information\n\
    \   should be carried in the key transport S/MIME capabilities instead.\n   The\
    \ ASN.1 that is used for the RSAES-OAEP public key is defined\n   below:\n   \
    \   scap-pk-rsaES-OAEP SMIME-CAPS ::= {\n        TYPE RSAKeyCapabilities\n   \
    \     IDENTIFIED BY pk-rsaES-OAEP.&id\n      }\n   In the above ASN.1, we have\
    \ defined the following:\n   scap-pk-rsaES-OAEP  is a new SMIME-CAPS object. \
    \ This object\n      associates the existing object identifier (id-RSAES-OAEP)\
    \ used for\n      the public key certificates (defined in [RFC4055] and [RFC5912])\n\
    \      with type RSAKeyCapabilities.\n"
- title: 3.  Diffie-Hellman Keys
  contents:
  - "3.  Diffie-Hellman Keys\n   There are currently two Diffie-Hellman (DH) public\
    \ key object\n   identifiers.  These are DH key agreement and Digital Signature\n\
    \   Standard (DSA).\n"
- title: 3.1.  DSA Signature Public Key
  contents:
  - "3.1.  DSA Signature Public Key\n   This public key type is used for the validation\
    \ of DSA signatures.\n   The ASN.1 that is used for DSA keys is defined below:\n\
    \      scap-pk-dsa SMIME-CAPS ::= {\n        TYPE DSAKeyCapabilities\n       \
    \ IDENTIFIED BY pk-dsa.&id\n      }\n      DSAKeyCapabilities ::= CHOICE {\n \
    \         keySizes         [0] SEQUENCE {\n             minKeySize           \
    \ DSAKeySize,\n             maxKeySize            DSAKeySize OPTIONAL,\n     \
    \        maxSizeP              [1] INTEGER OPTIONAL,\n             maxSizeQ  \
    \            [2] INTEGER OPTIONAL,\n             maxSizeG              [3] INTEGER\
    \ OPTIONAL\n          },\n          keyParams        [1] pk-dsa.&Params\n    \
    \  }\n      DSAKeySize ::= INTEGER (1024 | 2048 | 3072 | 7680 | 15360 )\n   In\
    \ the above ASN.1, we have defined the following:\n   scap-pk-dsa  is a new SMIME-CAPS\
    \ object.  This object associates the\n      existing object identifier (id-dsa)\
    \ used for the public key in\n      certificates (defined in [RFC3279] and [RFC5912])\
    \ with a new type\n      defined here, DSAKeyCapabilities.\n   DSAKeyCapabilities\
    \  carries the desired set of capabilities for the\n      DSA key.  The fields\
    \ of this type are:\n      keySizes  is used when only a key size is needed to\
    \ be specified\n         and not a specific group.  It is expected that this would\
    \ be\n         the most commonly used of the two options.  In key sizes, the\n\
    \         fields are used as follows:\n         minKeySize  contains the minimum\
    \ length of the DSA modulus to\n            be used.\n         maxKeySize  contains\
    \ the maximum length of the DSA modules that\n            should be used.  If\
    \ this field is absent, then no maximum\n            length is requested/expected.\n\
    \         maxSizeP  contains the maximum length of the value p that\n        \
    \    should be used.  If this field is absent, then no maximum\n            length\
    \ is imposed.\n         maxSizeQ  contains the maximum length of the value q that\n\
    \            should be used.  If this field is absent, then no maximum\n     \
    \       length is imposed.\n         maxSizeG  contains the maximum length of\
    \ the value g that\n            should be used.  If this field is absent, then\
    \ no maximum\n            length is imposed.\n      keyParams  contains the exact\
    \ set of DSA for the key used to sign\n         the message.  This field is provided\
    \ for completeness and to\n         match the fields for Elliptic Curve; however,\
    \ it is expected\n         that usage of this field will be extremely rare.\n"
- title: 3.2.  DH Key Agreement Keys
  contents:
  - "3.2.  DH Key Agreement Keys\n   This public key type is used with the DH key\
    \ agreement algorithm.\n   The ASN.1 that is used for DH keys is defined below:\n\
    \      scap-pk-dh SMIME-CAPS ::= {\n        TYPE DSAKeyCapabilities\n        IDENTIFIED\
    \ BY pk-dh.&id\n      }\n   In the above ASN.1, we have defined the following:\n\
    \   scap-pk-dh  is a new SMIME-CAPS object.  This object associates the\n    \
    \  existing object identifier (dhpublicnumber) used for the public\n      key\
    \ algorithm in the certificates (defined in [RFC3279] and\n      [RFC5912]) with\
    \ a new type defined above, DSAKeyCapabilities.\n"
- title: 4.  Elliptic Curve Keys
  contents:
  - "4.  Elliptic Curve Keys\n   There are currently three Elliptic Curve Cryptography\
    \ (ECC) public\n   key object identifiers.  These are EC, EC-DH, and Elliptic\
    \ Curve\n   Menezes-Qu-Vanstone (EC-MQV).\n"
- title: 4.1.  Generic Elliptic Curve Keys
  contents:
  - "4.1.  Generic Elliptic Curve Keys\n   Almost all ECC keys that are contained\
    \ in certificates today use the\n   generic ECC public key format and identifier.\
    \  This allows for the\n   public key to be used both for key agreement and for\
    \ signature\n   validation (assuming the appropriate bits are in the certificate).\n\
    \   The only reason for using one of the more specific public key\n   identifier\
    \ is if the user wants to restrict the usage of the ECC\n   public key to a specific\
    \ algorithm.\n   For the generic ECC public key, the S/MIME capability that is\n\
    \   advertised is a request for a specific group to be used.\n   The ASN.1 that\
    \ is used for the generic ECC public key is defined\n   below:\n      scap-pk-ec\
    \ SMIME-CAPS ::= {\n         TYPE EC-SMimeCaps\n         IDENTIFIED BY pk-ec.&id\n\
    \      }\n      EC-SMimeCaps ::= SEQUENCE (SIZE (1..MAX)) OF ECParameters\n  \
    \ In the above ASN.1, we have defined the following:\n   scap-pk-ec  is a new\
    \ SMIME-CAPS object.  This object associates the\n      existing object identifier\
    \ (id-ecPublicKey) used for the public\n      key algorithm in the certificates\
    \ (defined in [RFC5480] and\n      [RFC5912]) with the new type EC-SMimeCaps.\n\
    \   EC-SMimeCaps  carries a sequence of at least one ECParameters\n      structure.\
    \  This allows for multiple curves to be requested in a\n      single capability\
    \ request.  A maximum/minimum style of specifying\n      sizes is not provided\
    \ as much greater care is required in\n      selecting a specific curve than is\
    \ needed to create the parameters\n      for a DSA/DH key.  As specified in [RFC5480],\
    \ for PKIX-compliant\n      certificates, only the namedCurve choice of ECParameters\
    \ is\n      expected to be used.\n"
- title: 4.2.  Elliptic Curve DH Keys
  contents:
  - "4.2.  Elliptic Curve DH Keys\n   This public key type is used with the Elliptic\
    \ Curve Diffie-Hellman\n   key agreement algorithm.\n   The ASN.1 that is used\
    \ for EC-DH keys is defined below:\n      scap-pk-ecDH SMIME-CAPS ::= {\n    \
    \    TYPE EC-SMimeCaps\n        IDENTIFIED BY pk-ecDH.&id\n      }\n   In the\
    \ above ASN.1, we have defined the following:\n   scap-pk-ecDH  is a new SMIME-CAPS\
    \ object.  This object associates the\n      existing object identifier (id-ecDH)\
    \ used for the public key\n      algorithm in the certificate (defined in [RFC5480]\
    \ and [RFC5912])\n      with the same type structure used for public keys.\n"
- title: 4.3.  Elliptic Curve MQV Keys
  contents:
  - "4.3.  Elliptic Curve MQV Keys\n   This public key type is used with the Elliptic\
    \ Curve MQV key\n   agreement algorithm.\n   The ASN.1 that is used for EC-MQV\
    \ keys is defined below:\n      scap-pk-ecMQV SMIME-CAPS ::= {\n        TYPE EC-SMimeCaps\n\
    \        IDENTIFIED BY pk-ecMQV.&id\n      }\n   In the above ASN.1, we have defined\
    \ the following:\n   scap-pk-ecMQV  is a new SMIME-CAPS object.  This object associates\n\
    \      the existing object identifier (id-ecMQV) used for the public key\n   \
    \   algorithm in the certificate (defined in [RFC5480] and [RFC5912])\n      with\
    \ the same type structure used for public keys.\n"
- title: 5.  RSASSA-PSS Signature Algorithm Capability
  contents:
  - "5.  RSASSA-PSS Signature Algorithm Capability\n   This document defines a new\
    \ SMIMECapability for the RSASSA-PSS\n   signature algorithm.  One already exists\
    \ in [RFC4055] where the\n   parameters field is not used.\n   When the S/MIME\
    \ group defined an S/MIME capability for the RSASSA-PSS\n   signature algorithm,\
    \ it was done in the context of how S/MIME defines\n   and uses S/MIME capabilities.\
    \  When placed in an S/MIME message\n   [SMIME-MSG] or in a certificate [RFC4262],\
    \ it is always placed in a\n   sequence of capabilities.  This means that one\
    \ could place the\n   identifier for RSASSA-PSS in the sequence along with the\
    \ identifier\n   for MD5, SHA-1, and SHA-256.  The assumption was then made that\
    \ one\n   could compute the matrix of all answers, and the publisher would\n \
    \  support all elements in the matrix.  This has the possibility that\n   the\
    \ publisher could accidentally publish a point in the matrix that\n   is not supported.\n\
    \   In this situation, there is only a single item that is published.\n   This\
    \ means that we need to publish all of the associated information\n   along with\
    \ the identifier for the signature algorithm in a single\n   entity.  For this\
    \ reason, we now define a new parameter type to be\n   used as the SMIMECapability\
    \ type, which contains a hash identifier\n   and a mask identifier.  The ASN.1\
    \ used for this is as follows:\n      scap-sa-rsaSSA-PSS SMIME-CAPS ::= {\n  \
    \       TYPE RsaSsa-Pss-sig-caps\n         IDENTIFIED BY sa-rsaSSA-PSS.&id\n \
    \     }\n      RsaSsa-Pss-sig-caps ::= SEQUENCE {\n         hashAlg  SMIMECapability{{\
    \ MaskAlgorithmSet }},\n         maskAlg  SMIMECapability{{ ... }} OPTIONAL,\n\
    \         trailerField INTEGER DEFAULT 1\n      }\n      scap-mf-mgf1 SMIME-CAPS\
    \ ::= {\n         TYPE SMIMECapability{{ ... }}\n         IDENTIFIED BY id-mgf1\n\
    \      }\n      MaskAlgorithmSet SMIME-CAPS ::= {scap-mf-mgf1, ...}\n   In the\
    \ above ASN.1, we have defined the following:\n   scap-sa-rsaSSA-PSS  is a new\
    \ SMIME-CAPS object.  This object\n      associates the existing object identifier\
    \ (id-RSASSA-PSS) used for\n      the signature algorithm (defined in [RFC4055]\
    \ and [RFC5912]) with\n      the new type RsaSsa-Pss-sig-caps.\n   RsaSsa-Pss-sig-caps\
    \  carries the desired set of capabilities for the\n      RSASSA-PSS signature\
    \ algorithm.  The fields of this type are:\n      hashAlg  contains the S/MIME\
    \ capability for the hash algorithm we\n         are declaring we support with\
    \ the RSASSA-PSS signature\n         algorithm.\n      maskAlg  contains the S/MIME\
    \ capability for the mask algorithm we\n         are declaring we support with\
    \ the RSASSA-PSS signature\n         algorithm.\n      trailerField  specifies\
    \ which trailer field algorithm is being\n         supported.  This MUST be the\
    \ value 1.\n   NOTE: In at least one iteration of the design, we used a sequence\
    \ of\n   hash identifiers and a sequence of masking functions and again made\n\
    \   the assumption that the entire matrix would be supported.  This has\n   been\
    \ removed at this point since the original intent of S/MIME\n   capabilities is\
    \ that one should be able to do a binary comparison of\n   the DER encoding of\
    \ the field and determine a specific capability was\n   published.  We could return\
    \ to using the sequence if we wanted to\n   lose the ability to do a binary compare\
    \ but needed to shorten the\n   encodings.  This does not currently appear to\
    \ be an issue at this\n   point.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document provides new fields that can be\
    \ placed in an S/MIME\n   capabilities sequence.  There are number of considerations\
    \ that need\n   to be taken into account when doing this.\n   As mentioned above,\
    \ we have defined data structures to be associated\n   with object identifiers\
    \ in cases where an association already exists.\n   When either encoding or decoding\
    \ structures, care needs to be taken\n   that the association used is one appropriate\
    \ for the location in the\n   surrounding ASN.1 structure.  This means that one\
    \ needs to make sure\n   that only public keys are placed in public key locations,\
    \ signatures\n   are placed in signature locations, and S/MIME capabilities are\
    \ placed\n   in SMIMECapability locations.  Failure to do so will create decode\n\
    \   errors at best and can cause incorrect behavior at worst.\n   The more specific\
    \ the information that is provided in an S/MIME\n   Capabilities field, the better\
    \ the end results are going to be.\n   Specifying a signature algorithm means\
    \ that there are no questions\n   for the receiver that the signature algorithm\
    \ is supported.\n   Signature algorithms can be implied by specifying both public\
    \ key\n   algorithms and hash algorithms together.  If the list includes RSA\n\
    \   v1.5, EC-DSA, SHA-1, and SHA-256, the implication is that all four\n   values\
    \ in the cross section are supported by the sender.  If the\n   sender does not\
    \ support EC-DSA with SHA-1, this would lead to a\n   situation where the recipient\
    \ uses a signature algorithm that the\n   sender does not support.  Omitting SHA-1\
    \ from the list may lead to\n   the problem where both entities support RSA v1.5\
    \ with SHA-1 as their\n   only common algorithm, but this is no longer discoverable\
    \ by the\n   recipient.\n   As a general rule, providing more information about\
    \ the algorithms\n   that are supported is preferable.  The more choices that\
    \ are provided\n   the recipient, the greater the likelihood that a common algorithm\n\
    \   with good security can be used by both parties.  However, one should\n   avoid\
    \ being exhaustive in providing the list of algorithms to the\n   recipient. \
    \ The greater the number of algorithms that are passed, the\n   more difficult\
    \ it is for a recipient to make intelligent decisions\n   about which algorithm\
    \ to use.  This is a more significant problem\n   when there are more than two\
    \ entities involved in the \"negotiation\"\n   of a common algorithm to be used\
    \ (such as sending an encrypted S/MIME\n   message where a common content encryption\
    \ algorithm is needed).  The\n   larger the set of algorithms and the more recipients\
    \ involved, the\n   more memory and processing time will be needed in order to\
    \ complete\n   the decision-making process.\n   The S/MIME capabilities are defined\
    \ so that the order of algorithms\n   in the sequence is meant to encode a preference\
    \ order by the sender\n   of the sequence.  Many entities will ignore the order\
    \ preference when\n   making a decision either by using their own preferred order\
    \ or using\n   a random decision from a matrix.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]      Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC3279]      Bassham, L., Polk, W., and R. Housley, \"Algorithms\
    \ and\n                  Identifiers for the Internet X.509 Public Key\n     \
    \             Infrastructure Certificate and Certificate Revocation\n        \
    \          List (CRL) Profile\", RFC 3279, April 2002.\n   [RFC4055]      Schaad,\
    \ J., Kaliski, B., and R. Housley, \"Additional\n                  Algorithms\
    \ and Identifiers for RSA Cryptography for\n                  use in the Internet\
    \ X.509 Public Key Infrastructure\n                  Certificate and Certificate\
    \ Revocation List (CRL)\n                  Profile\", RFC 4055, June 2005.\n \
    \  [RFC5480]      Turner, S., Brown, D., Yiu, K., Housley, R., and T.\n      \
    \            Polk, \"Elliptic Curve Cryptography Subject Public Key\n        \
    \          Information\", RFC 5480, March 2009.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [NIST-SIZES]   Barker, E., Barker, W., Burr,\
    \ W., Polk, W., and M.\n                  Smid, \"Recommendation for Key Management\
    \ -- Part 1:\n                  General\", NIST Special Publication 800-57, March\
    \ 2007.\n   [RFC4262]      Santesson, S., \"X.509 Certificate Extension for\n\
    \                  Secure/Multipurpose Internet Mail Extensions (S/MIME)\n   \
    \               Capabilities\", RFC 4262, December 2005.\n   [RFC5912]      Hoffman,\
    \ P. and J. Schaad, \"New ASN.1 Modules for the\n                  Public Key\
    \ Infrastructure Using X.509 (PKIX)\",\n                  RFC 5912, June 2010.\n\
    \   [RFC6277]      Santesson, S. and P. Hallam-Baker, \"Online Certificate\n \
    \                 Status Protocol Algorithm Agility\", RFC 6277,\n           \
    \       June 2011.\n   [SMIME-MSG]    Ramsdell, B. and S. Turner, \"Secure/Multipurpose\n\
    \                  Internet Mail Extensions (S/MIME) Version 3.2 Message\n   \
    \               Specification\", RFC 5751, January 2010.\n   [SMIMEv3-MSG]  Ramsdell,\
    \ B., \"S/MIME Version 3 Message\n                  Specification\", RFC 2633,\
    \ June 1999.\n"
- title: Appendix A.  2008 ASN.1 Module
  contents:
  - "Appendix A.  2008 ASN.1 Module\n   This appendix contains a module compatible\
    \ with the work done to\n   update the PKIX ASN.1 modules to recent versions of\
    \ the ASN.1\n   specifications [RFC5912].  This appendix is to be considered\n\
    \   informational per the current direction of the PKIX working group.\n   PUBLIC-KEY-SMIME-CAPABILITIES\n\
    \      { iso(1) identified-organization(3) dod(6) internet(1)\n        security(5)\
    \ mechanisms(5) pkix(7) id-mod(0)\n        id-mod-pubKeySMIMECaps-08(78) }\n \
    \  DEFINITIONS ::=\n   BEGIN\n      IMPORTS\n      SMIME-CAPS, PUBLIC-KEY, SMIMECapability\n\
    \      FROM AlgorithmInformation-2009\n         { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n           security(5) mechanisms(5) pkix(7) id-mod(0)\n\
    \           id-mod-algorithmInformation-02(58)}\n      pk-rsa, pk-dsa, pk-dh,\
    \ pk-ec, pk-ecDH, pk-ecMQV, ECParameters\n      FROM PKIXAlgs-2009\n         {\
    \ iso(1) identified-organization(3) dod(6) internet(1)\n           security(5)\
    \ mechanisms(5) pkix(7) id-mod(0)\n           id-mod-pkix1-algorithms2008-02(56)\
    \ }\n      pk-rsaSSA-PSS, pk-rsaES-OAEP, sa-rsaSSA-PSS,\n      HashAlgorithms,\
    \ id-mgf1\n      FROM PKIX1-PSS-OAEP-Algorithms-2009\n         { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n           security(5) mechanisms(5) pkix(7) id-mod(0)\n\
    \           id-mod-pkix1-rsa-pkalgs-02(54)}\n      ;\n      --\n      --  Define\
    \ a set containing all of the S/MIME capabilities defined\n      --  by this document.\n\
    \      --\n      SMimeCaps SMIME-CAPS ::= {\n         PubKeys-SMimeCaps |\n  \
    \       scap-sa-rsaSSA-PSS\n      }\n      PubKeys-SMimeCaps SMIME-CAPS ::= {\n\
    \         scap-pk-rsa | scap-pk-rsaSSA-PSS |\n         scap-pk-dsa |\n       \
    \  scap-pk-ec | scap-pk-ecDH | scap-pk-ecMQV\n      }\n      --\n      --  We\
    \ defined RSA keys from the modules in RFC 3279 and RFC 4055.\n      --\n    \
    \  scap-pk-rsa SMIME-CAPS ::= {\n        TYPE RSAKeyCapabilities\n        IDENTIFIED\
    \ BY pk-rsa.&id\n      }\n      RSAKeyCapabilities ::= SEQUENCE {\n         minKeySize\
    \        RSAKeySize,\n         maxKeySize        RSAKeySize OPTIONAL\n      }\n\
    \      RSAKeySize ::= INTEGER (1024 | 2048 | 3072 | 4096 | 7680 |\n          \
    \                    8192 | 15360, ...)\n      scap-pk-rsaES-OAEP SMIME-CAPS ::=\
    \ {\n        TYPE RSAKeyCapabilities\n        IDENTIFIED BY pk-rsaES-OAEP.&id\n\
    \      }\n      scap-pk-rsaSSA-PSS SMIME-CAPS ::= {\n        TYPE RSAKeyCapabilities\n\
    \        IDENTIFIED BY pk-rsaSSA-PSS.&id\n      }\n      scap-sa-rsaSSA-PSS SMIME-CAPS\
    \ ::= {\n         TYPE RsaSsa-Pss-sig-caps\n         IDENTIFIED BY sa-rsaSSA-PSS.&id\n\
    \      }\n      RsaSsa-Pss-sig-caps ::= SEQUENCE {\n         hashAlg  SMIMECapability{{\
    \ MaskAlgorithmSet }},\n         maskAlg  SMIMECapability{{ ... }} OPTIONAL,\n\
    \         trailerField INTEGER DEFAULT 1\n      }\n      scap-mf-mgf1 SMIME-CAPS\
    \ ::= {\n         TYPE SMIMECapability{{ ... }}\n         IDENTIFIED BY id-mgf1\n\
    \      }\n      MaskAlgorithmSet SMIME-CAPS ::= {scap-mf-mgf1, ...}\n      --\n\
    \      --  We define DH/DSA keys from the module in RFC 3279.\n      --\n    \
    \  scap-pk-dsa SMIME-CAPS ::= {\n        TYPE DSAKeyCapabilities\n        IDENTIFIED\
    \ BY pk-dsa.&id\n      }\n      DSAKeyCapabilities ::= CHOICE {\n          keySizes\
    \         [0] SEQUENCE {\n             minKeySize            DSAKeySize,\n   \
    \          maxKeySize            DSAKeySize OPTIONAL,\n             maxSizeP \
    \             [1] INTEGER OPTIONAL,\n             maxSizeQ              [2] INTEGER\
    \ OPTIONAL,\n             maxSizeG              [3] INTEGER OPTIONAL\n       \
    \   },\n          keyParams        [1] pk-dsa.&Params\n      }\n      DSAKeySize\
    \ ::= INTEGER (1024 | 2048 | 3072 | 7680 | 15360 )\n      scap-pk-dh SMIME-CAPS\
    \ ::= {\n        TYPE DSAKeyCapabilities\n        IDENTIFIED BY pk-dh.&id\n  \
    \    }\n      --\n      --  We define Elliptic Curve keys from the module in RFC\
    \ 3279.\n      --\n      scap-pk-ec SMIME-CAPS ::= {\n         TYPE EC-SMimeCaps\n\
    \         IDENTIFIED BY pk-ec.&id\n      }\n      EC-SMimeCaps ::= SEQUENCE (SIZE\
    \ (1..MAX)) OF ECParameters\n      scap-pk-ecDH SMIME-CAPS ::= {\n        TYPE\
    \ EC-SMimeCaps\n        IDENTIFIED BY pk-ecDH.&id\n      }\n      scap-pk-ecMQV\
    \ SMIME-CAPS ::= {\n        TYPE EC-SMimeCaps\n        IDENTIFIED BY pk-ecMQV.&id\n\
    \      }\n   END\n"
- title: Appendix B.  1988 ASN.1 Module
  contents:
  - "Appendix B.  1988 ASN.1 Module\n   This appendix contains the normative ASN.1\
    \ module for this document.\n   PUBLIC-KEY-SMIME-CAPABILITIES-88\n      { iso(1)\
    \ identified-organization(3) dod(6) internet(1)\n        security(5) mechanisms(5)\
    \ pkix(7) id-mod(0)\n        id-mod-pubKeySMIMECaps-88(77) }\n   DEFINITIONS ::=\n\
    \   BEGIN\n      IMPORTS\n      ECParameters\n      FROM  PKIX1Algorithms2008\n\
    \           { iso(1) identified-organization(3) dod(6)\n             internet(1)\
    \ security(5) mechanisms(5) pkix(7) id-mod(0)\n             45 }\n      id-mgf1\n\
    \      FROM   PKIX1-PSS-OAEP-Algorithms\n           { iso(1) identified-organization(3)\
    \ dod(6)\n             internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n\
    \             id-mod-pkix1-rsa-pkalgs(33) }\n      AlgorithmIdentifier\n     \
    \ FROM PKIX1Explicit88\n           { iso(1) identified-organization(3) dod(6)\
    \ internet(1)\n           security(5) mechanisms(5) pkix(7) id-mod(0)\n      \
    \     id-pkix1-explicit(18) }\n      ;\n      --\n      --  We define RSA keys\
    \ from the modules in RFC 3279 and RFC 4055.\n      --\n      RSAKeyCapabilities\
    \ ::= SEQUENCE {\n         minKeySize        RSAKeySize,\n         maxKeySize\
    \        RSAKeySize OPTIONAL\n      }\n      RSAKeySize ::= INTEGER (1024 | 2048\
    \ | 3072 | 4096 | 7680 |\n                              8192 | 15360, ...)\n \
    \     RsaSsa-Pss-sig-caps ::= SEQUENCE {\n         hashAlg  AlgorithmIdentifier,\n\
    \         maskAlg  AlgorithmIdentifier OPTIONAL,\n         trailerField INTEGER\
    \ DEFAULT 1\n      }\n      --\n      --  We define DH/DSA keys from the module\
    \ in RFC 3279.\n      --\n      DSAKeyCapabilities ::= CHOICE {\n          keySizes\
    \         [0] SEQUENCE {\n             minKeySize            DSAKeySize,\n   \
    \          maxKeySize            DSAKeySize OPTIONAL,\n             maxSizeP \
    \             [1] INTEGER OPTIONAL,\n             maxSizeQ              [2] INTEGER\
    \ OPTIONAL,\n             maxSizeG              [3] INTEGER OPTIONAL\n       \
    \   },\n          keyParams        [1] pk-dsa.&Params\n      }\n      DSAKeySize\
    \ ::= INTEGER (1024 | 2048 | 3072 | 7680 | 15360 )\n      --\n      --  We define\
    \ Elliptic Curve keys from the module in RFC 3279.\n      --\n      EC-SMimeCaps\
    \ ::= SEQUENCE (SIZE (1..MAX)) OF ECParameters\n   END\n"
- title: Appendix C.  Future Work
  contents:
  - "Appendix C.  Future Work\n   A future revision of [RFC5912] should be done at\
    \ some point to expand\n   the definition of the PUBLIC-KEY class and allow for\
    \ an\n   SMIMECapability to be included in the class definition.  This would\n\
    \   encourage people to think about this as an issue when defining new\n   public\
    \ key structures in the future.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Jim Schaad\n   Soaring Hawk Consulting\n   EMail: ietf@augustcellars.com\n"
