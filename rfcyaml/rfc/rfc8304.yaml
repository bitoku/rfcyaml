- title: __initial_text__
  contents:
  - "         Transport Features of the User Datagram Protocol (UDP)\n           \
    \          and Lightweight UDP (UDP-Lite)\n"
- title: Abstract
  contents:
  - "Abstract\n   This is an informational document that describes the transport\n\
    \   protocol interface primitives provided by the User Datagram Protocol\n   (UDP)\
    \ and the Lightweight User Datagram Protocol (UDP-Lite) transport\n   protocols.\
    \  It identifies the datagram services exposed to\n   applications and how an\
    \ application can configure and use the\n   features offered by the Internet datagram\
    \ transport service.  RFC\n   8303 documents the usage of transport features provided\
    \ by IETF\n   transport protocols, describing the way UDP, UDP-Lite, and other\n\
    \   transport protocols expose their services to applications and how an\n   application\
    \ can configure and use the features that make up these\n   services.  This document\
    \ provides input to and context for that\n   document, as well as offers a road\
    \ map to documentation that may help\n   users of the UDP and UDP-Lite protocols.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8304.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  UDP and UDP-Lite Primitives . . . . . . . . . . . . . .\
    \ . . .   4\n     3.1.  Primitives Provided by UDP  . . . . . . . . . . . . .\
    \ . .   4\n       3.1.1.  Excluded Primitives . . . . . . . . . . . . . . . .\
    \ .  11\n     3.2.  Primitives Provided by UDP-Lite . . . . . . . . . . . . .\
    \  12\n   4.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  13\n\
    \   5.  Security Considerations . . . . . . . . . . . . . . . . . . .  13\n  \
    \ 6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  13\n    \
    \ 6.1.  Normative References  . . . . . . . . . . . . . . . . . .  13\n     6.2.\
    \  Informative References  . . . . . . . . . . . . . . . . .  15\n   Appendix\
    \ A.  Multicast Primitives . . . . . . . . . . . . . . . .  17\n   Acknowledgements\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  20\n   Authors' Addresses\
    \  . . . . . . . . . . . . . . . . . . . . . . .  20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document presents defined interactions between transport\n\
    \   protocols and applications in the form of 'primitives' (function\n   calls)\
    \ for the User Datagram Protocol (UDP) [RFC0768] and the\n   Lightweight User\
    \ Datagram Protocol (UDP-Lite) [RFC3828].  In this\n   usage, the word application\
    \ refers to any program built on the\n   datagram interface, including tunnels\
    \ and other upper-layer protocols\n   that use UDP and UDP-Lite.\n   UDP is widely\
    \ implemented and deployed.  It is used for a wide range\n   of applications.\
    \  A special class of applications can derive benefit\n   from having partially\
    \ damaged payloads delivered, rather than\n   discarded, when using paths that\
    \ include error-prone links.\n   Applications that can tolerate payload corruption\
    \ can choose to use\n   UDP-Lite instead of UDP and use the application programming\
    \ interface\n   (API) to control checksum protection.  Conversely, UDP applications\n\
    \   could choose to use UDP-Lite, but this is currently less widely\n   deployed,\
    \ and users could encounter paths that do not support\n   UDP-Lite.  These topics\
    \ are discussed more in Section 3.4 of \"UDP\n   Usage Guidelines\" [RFC8085].\n\
    \   The IEEE standard API for TCP/IP applications is the \"socket\"\n   interface\
    \ [POSIX].  An application can use the recv() and send()\n   POSIX functions as\
    \ well as the recvfrom(), sendto(), recvmsg(), and\n   sendmsg() functions.  The\
    \ UDP and UDP-Lite sockets API differs from\n   that for TCP in several key ways.\
    \  (Examples of usage of this API are\n   provided in [STEVENS].)  In UDP and\
    \ UDP-Lite, each datagram is a\n   self-contained message of a specified length,\
    \ and options at the\n   transport layer can be used to set properties for all\
    \ subsequent\n   datagrams sent using a socket or changed for each datagram. \
    \ For\n   datagrams, this can require the application to use the API to set\n\
    \   IP-level information (IP Time To Live (TTL), Differentiated Services\n   Code\
    \ Point (DSCP), IP fragmentation, etc.) for the datagrams it sends\n   and receives.\
    \  In contrast, when using TCP and other connection-\n   oriented transports,\
    \ the IP-level information normally either remains\n   the same for the duration\
    \ of a connection or is controlled by the\n   transport protocol rather than the\
    \ application.\n   Socket options are used in the sockets API to provide additional\n\
    \   functions.  For example, the IP_RECVTTL socket option is used by some\n  \
    \ UDP multicast applications to return the IP TTL field from the IP\n   header\
    \ of a received datagram.\n   Some platforms also offer applications the ability\
    \ to directly\n   assemble and transmit IP packets through \"raw sockets\" or\
    \ similar\n   facilities.  The raw sockets API is a second, more cumbersome, method\n\
    \   to send UDP datagrams.  The use of this API is discussed in the RFC\n   series\
    \ in the UDP Guidelines [RFC8085].\n   The list of transport service features\
    \ and primitives in this\n   document is strictly based on the parts of protocol\
    \ specifications in\n   the RFC series that relate to what the transport protocol\
    \ provides to\n   an application that uses it and how the application interacts\
    \ with\n   the transport protocol.  Primitives can be invoked by an application\n\
    \   or a transport protocol; the latter type is called an \"event\".\n   The description\
    \ in Section 3 follows the methodology defined by the\n   IETF TAPS Working Group\
    \ in [RFC8303].  Specifically, this document\n   provides the first pass of this\
    \ process, which discusses the relevant\n   RFC text describing primitives for\
    \ each protocol.  [RFC8303] uses\n   this input to document the usage of transport\
    \ features provided by\n   IETF transport protocols, describing the way UDP, UDP-Lite,\
    \ and other\n   transport protocols expose their services to applications and\
    \ how an\n   application can configure and use the features that make up these\n\
    \   services.\n   The presented road map to documentation of the transport interface\n\
    \   may also help developers working with UDP and UDP-Lite.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document provides details for the pass 1 analysis of\
    \ UDP and\n   UDP-Lite that is used in \"On the Usage of Transport Features Provided\n\
    \   by IETF Transport Protocols\" [RFC8303].  It uses common terminology\n   defined\
    \ in that document and also quotes RFCs that use the\n   terminology of RFC 2119\
    \ [RFC2119].\n"
- title: 3.  UDP and UDP-Lite Primitives
  contents:
  - "3.  UDP and UDP-Lite Primitives\n   UDP [RFC0768] [RFC8200] and UDP-Lite [RFC3828]\
    \ are IETF Standards\n   Track transport protocols.  These protocols provide unidirectional,\n\
    \   datagram services, supporting transmit and receive operations that\n   preserve\
    \ message boundaries.\n   This section summarizes the relevant text parts of the\
    \ RFCs\n   describing the UDP and UDP-Lite protocols, focusing on what the\n \
    \  transport protocols provide to the application and how the transport\n   is\
    \ used (based on abstract API descriptions, where they are\n   available).  It\
    \ describes how UDP is used with IPv4 or IPv6 to send\n   unicast or anycast datagrams\
    \ and is used to send broadcast datagrams\n   for IPv4.  A set of network-layer\
    \ primitives required to use UDP or\n   UDP-Lite with IP multicast (for IPv4 and\
    \ IPv6) have been specified in\n   the RFC series.  Appendix A describes where\
    \ to find documentation for\n   network-layer primitives required to use UDP or\
    \ UDP-Lite with IP\n   multicast (for IPv4 and IPv6).\n"
- title: 3.1.  Primitives Provided by UDP
  contents:
  - "3.1.  Primitives Provided by UDP\n   \"User Datagram Protocol\" [RFC0768] states:\n\
    \      This User Datagram Protocol (UDP) is defined to make available a\n    \
    \  datagram mode of packet-switched computer communication in the\n      environment\
    \ of an interconnected set of computer networks...This\n      protocol provides\
    \ a procedure for application programs to send\n      messages to other programs\
    \ with a minimum of protocol mechanism.\n   The User Interface section of RFC\
    \ 768 states that the user interface\n   to an application should allow\n    \
    \  the creation of new receive ports, receive operations on the\n      receive\
    \ ports that return the data octets and an indication of\n      source port and\
    \ source address, and an operation that allows a\n      datagram to be sent, specifying\
    \ the data, source and destination\n      ports and addresses to be sent.\n  \
    \ UDP has been defined for IPv6 [RFC8200], together with API extensions\n   for\
    \ \"Basic Socket Interface Extensions for IPv6\" [RFC3493].\n   [RFC6935] and\
    \ [RFC6936] define an update to the UDP transport\n   originally specified in\
    \ [RFC2460] (note that RFC 2460 has been\n   obsoleted by RFC 8200).  This enables\
    \ use of a zero UDP checksum mode\n   with a tunnel protocol, providing that the\
    \ method satisfies the\n   requirements in the corresponding applicability statement\
    \ [RFC6936].\n   UDP offers only a basic transport interface.  UDP datagrams may\
    \ be\n   directly sent and received, without exchanging messages between the\n\
    \   endpoints to set up a connection (i.e., no handshake is performed by\n   the\
    \ transport protocol prior to communication).  Using the sockets\n   API, applications\
    \ can receive packets from more than one IP source\n   address on a single UDP\
    \ socket.  Common support allows specification\n   of the local IP address, destination\
    \ IP address, local port, and\n   destination port values.  Any or all of these\
    \ can be indicated, with\n   defaults supplied by the local system when these\
    \ are not specified.\n   The local endpoint address is set using the BIND call.\
    \  At the remote\n   end, the remote endpoint address is set using the CONNECT\
    \ call.  The\n   CLOSE function has local significance only.  It does not impact\
    \ the\n   status of the remote endpoint.\n   Neither UDP nor UDP-Lite provide\
    \ congestion control, retransmission,\n   or mechanisms for application-level\
    \ packetization that would avoid IP\n   fragmentation and other transport functions.\
    \  This means that\n   applications using UDP need to provide additional functions\
    \ on top of\n   the UDP transport API [RFC8085].  Some transport functions require\n\
    \   parameters to be passed through the API to control the network layer\n   (IPv4\
    \ or IPv6).  These additional primitives could be considered a\n   part of the\
    \ network layer (e.g., control of the setting of the Don't\n   Fragment (DF) flag\
    \ on a transmitted IPv4 datagram) but are\n   nonetheless essential to allow a\
    \ user of the UDP API to implement\n   functions that are normally associated\
    \ with the transport layer (such\n   as probing for the path maximum transmission\
    \ size).  This document\n   includes such primitives.\n   Guidance on the use\
    \ of the services provided by UDP is provided in\n   the UDP Guidelines [RFC8085].\
    \  This also states that\n      many operating systems also allow a UDP socket\
    \ to be connected,\n      i.e., to bind a UDP socket to a specific pair of addresses\
    \ and\n      ports.  This is similar to the corresponding TCP sockets API\n  \
    \    functionality.  However, for UDP, this is only a local operation\n      that\
    \ serves to simplify the local send/receive functions and to\n      filter the\
    \ traffic for the specified addresses and ports.  Binding\n      a UDP socket\
    \ does not establish a connection -- UDP does not\n      notify the remote end\
    \ when a local UDP socket is bound.  Binding a\n      socket also allows configuring\
    \ options that affect the UDP or IP\n      layers, for example, use of the UDP\
    \ checksum or the IP Timestamp\n      option.  On some stacks, a bound socket\
    \ also allows an application\n      to be notified when ICMP error messages are\
    \ received for its\n      transmissions [RFC1122].\n   The POSIX Base Specifications\
    \ [POSIX] define an API that offers\n   mechanisms for an application to receive\
    \ asynchronous data events at\n   the socket layer.  Calls such as \"poll\", \"\
    select\", or \"queue\" allow\n   an application to be notified when data has arrived\
    \ at a socket or\n   when a socket has flushed its buffers.\n   A callback-driven\
    \ API to the network interface can be structured on\n   top of these calls.  Implicit\
    \ connection setup allows an application\n   to delegate connection life management\
    \ to the transport API.  The\n   transport API uses protocol primitives to offer\
    \ the automated service\n   to the application via the sockets API.  By combining\
    \ UDP primitives\n   (CONNECT.UDP and SEND.UDP), a higher-level API could offer\
    \ a similar\n   service.\n   The following datagram primitives are specified:\n\
    \   CONNECT:  The CONNECT primitive allows the association of source and\n   \
    \   destination port sets to a socket to enable creation of a\n      'connection'\
    \ for UDP traffic.  This UDP connection allows an\n      application to be notified\
    \ of errors received from the network\n      stack and provides a shorthand access\
    \ to the SEND and RECEIVE\n      primitives.  Since UDP is itself connectionless,\
    \ no datagrams are\n      sent because this primitive is executed.  A further\
    \ connect call\n      can be used to change the association.\n      The roles\
    \ of a client and a server are often not appropriate for\n      UDP, where connections\
    \ can be peer-to-peer.  The listening\n      functions are performed using one\
    \ of the forms of the CONNECT\n      primitive:\n      1.  bind(): A bind operation\
    \ sets the local port either\n          implicitly, triggered by a \"sendto\"\
    \ operation on an unbound\n          unconnected socket using an ephemeral port,\
    \ or by an explicit\n          \"bind\" to use a configured or well-known port.\n\
    \      2.  bind(); connect(): A bind operation that is followed by a\n       \
    \   CONNECT primitive.  The bind operation establishes the use of\n          a\
    \ known local port for datagrams rather than using an\n          ephemeral port.\
    \  The connect operation specifies a known\n          address port combination\
    \ to be used by default for future\n          datagrams.  This form either is\
    \ used after receiving a\n          datagram from an endpoint that causes the\
    \ creation of a\n          connection or can be triggered by a third-party configuration\n\
    \          or a protocol trigger (such as reception of a UDP Service\n       \
    \   Description Protocol (SDP) [RFC4566] record).\n   SEND:  The SEND primitive\
    \ hands over a provided number of bytes that\n      UDP should send to the other\
    \ side of a UDP connection in a UDP\n      datagram.  The primitive can be used\
    \ by an application to directly\n      send datagrams to an endpoint defined by\
    \ an address/port pair.  If\n      a connection has been created, then the address/port\
    \ pair is\n      inferred from the current connection for the socket.  Connecting\
    \ a\n      socket allows network errors to be returned to the application as\n\
    \      a notification on the SEND primitive.  Messages passed to the SEND\n  \
    \    primitive that cannot be sent atomically in an IP packet will not\n     \
    \ be sent by the network layer, generating an error.\n   RECEIVE:  The RECEIVE\
    \ primitive allocates a receiving buffer to\n      accommodate a received datagram.\
    \  The primitive returns the number\n      of bytes provided from a received UDP\
    \ datagram.  Section 4.1.3.5\n      of the requirements of Internet hosts [RFC1122]\
    \ states \"When a UDP\n      datagram is received, its specific-destination address\
    \ MUST be\n      passed up to the application layer.\"\n   CHECKSUM_ENABLED: \
    \ The optional CHECKSUM_ENABLED primitive controls\n      whether a sender enables\
    \ the UDP checksum when sending datagrams\n      [RFC0768] [RFC6935] [RFC6936]\
    \ [RFC8085].  When unset, this\n      overrides the default UDP behavior, disabling\
    \ the checksum on\n      sending.  Section 4.1.3.4 of the requirements for Internet\
    \ hosts\n      [RFC1122] states that \"An application MAY optionally be able to\n\
    \      control whether a UDP checksum will be generated, but it MUST\n      default\
    \ to checksumming on.\"\n   REQUIRE_CHECKSUM:  The optional REQUIRE_CHECKSUM primitive\
    \ determines\n      whether UDP datagrams received with a zero checksum are permitted\n\
    \      or discarded; UDP defaults to requiring checksums.\n      Section 4.1.3.4\
    \ of the requirements for Internet hosts [RFC1122]\n      states that \"An application\
    \ MAY optionally be able to control\n      whether UDP datagrams without checksums\
    \ should be discarded or\n      passed to the application.\"  Section 3.1 of the\
    \ specification for\n      UDP-Lite [RFC3828] requires that the checksum field\
    \ be non-zero;\n      hence, the UDP-Lite API must discard all datagrams received\
    \ with a\n      zero checksum.\n   SET_IP_OPTIONS:  The SET_IP_OPTIONS primitive\
    \ requests the network\n      layer to send a datagram with the specified IP options.\n\
    \      Section 4.1.3.2 of the requirements for Internet hosts [RFC1122]\n    \
    \  states that an \"application MUST be able to specify IP options to\n      be\
    \ sent in its UDP datagrams, and UDP MUST pass these options to\n      the IP\
    \ layer.\"\n   GET_IP_OPTIONS:  The GET_IP_OPTIONS primitive retrieves the IP\n\
    \      options of a datagram received at the network layer.\n      Section 4.1.3.2\
    \ of the requirements for Internet hosts [RFC1122]\n      states that a UDP receiver\
    \ \"MUST pass any IP option that it\n      receives from the IP layer transparently\
    \ to the application\n      layer.\"\n   SET_DF:  The SET_DF primitive allows\
    \ the network layer to fragment\n      packets using the Fragment Offset in IPv4\
    \ [RFC6864] and a host to\n      use Fragment Headers in IPv6 [RFC8200].  The\
    \ SET_DF primitive sets\n      the Don't Fragment (DF) flag in the IPv4 packet\
    \ header that\n      carries a UDP datagram, which allows routers to fragment\
    \ IPv4\n      packets.  Although some specific applications rely on\n      fragmentation\
    \ support, in general, a UDP application should\n      implement a method that\
    \ avoids IP fragmentation (Section 4 of\n      [RFC8085]).  NOTE: In many other\
    \ IETF transports (e.g., TCP and\n      the Stream Control Transmission Protocol\
    \ (SCTP)), the transport\n      provides the support needed to use DF.  However,\
    \ when using UDP,\n      the application is responsible for the techniques needed\
    \ to\n      discover the effective Path MTU (PMTU) allowed on the network\n  \
    \    path, coordinating with the network layer.  Classical Path MTU\n      Discovery\
    \ (PMTUD) [RFC1191] relies upon the network path returning\n      ICMP Fragmentation\
    \ Needed or ICMPv6 Packet Too Big messages to the\n      sender.  When these ICMP\
    \ messages are not delivered (or filtered),\n      a sender is unable to learn\
    \ the actual PMTU, and UDP datagrams\n      larger than the PMTU will be \"black\
    \ holed\".  To avoid this, an\n      application can instead implement Packetization\
    \ Layer Path MTU\n      Discovery (PLPMTUD) [RFC4821] that does not rely upon\
    \ network\n      support for ICMPv6 messages and is therefore considered more\n\
    \      robust than standard PMTUD, as recommended in [RFC8085] and\n      [RFC8201].\n\
    \   GET_MMS_S:  The GET_MMS_S primitive retrieves a network-layer value\n    \
    \  that indicates the maximum message size (MMS) that may be sent at\n      the\
    \ transport layer using a non-fragmented IP packet from the\n      configured\
    \ interface.  This value is specified in Section 6.1 of\n      [RFC1191] and Section\
    \ 5.1 of [RFC8201].  It is calculated from\n      Effective MTU for Sending (EMTU_S)\
    \ and the link MTU for the given\n      source IP address.  This takes into account\
    \ the size of the IP\n      header plus space reserved by the IP layer for additional\
    \ headers\n      (if any).  UDP applications should use this value as part of\
    \ a\n      method to avoid sending UDP datagrams that would result in IP\n   \
    \   packets that exceed the effective PMTU allowed across the network\n      path.\
    \  The effective PMTU (specified in Section 1 of [RFC1191]) is\n      equivalent\
    \ to the EMTU_S (specified in [RFC1122]).  The\n      specification of PLPMTUD\
    \ [RFC4821] states:\n         If PLPMTUD updates the MTU for a particular path,\
    \ all\n         Packetization Layer sessions that share the path representation\n\
    \         (as described in Section 5.2) SHOULD be notified to make use of\n  \
    \       the new MTU and make the required congestion control\n         adjustments.\n\
    \   GET_MMS_R:  The GET_MMS_R primitive retrieves a network-layer value\n    \
    \  that indicates the MMS that may be received at the transport layer\n      from\
    \ the configured interface.  This value is specified in\n      Section 3.1 of\
    \ [RFC1191].  It is calculated from Effective MTU for\n      Receiving (EMTU_R)\
    \ and the link MTU for the given source IP\n      address, and it takes into account\
    \ the size of the IP header plus\n      space reserved by the IP layer for additional\
    \ headers (if any).\n   SET_TTL:  The SET_TTL primitive sets the Hop Limit (TTL\
    \ field) in the\n      network layer that is used in the IPv4 header of a packet\
    \ that\n      carries a UDP datagram.  This is used to limit the scope of\n  \
    \    unicast datagrams.  Section 3.2.2.4 of the requirements for\n      Internet\
    \ hosts [RFC1122] states that \"An incoming Time Exceeded\n      message MUST\
    \ be passed to the transport layer.\"\n   GET_TTL:  The GET_TTL primitive retrieves\
    \ the value of the TTL field\n      in an IP packet received at the network layer.\
    \  An application\n      using the Generalized TTL Security Mechanism (GTSM) [RFC5082]\
    \ can\n      use this information to trust datagrams with a TTL value within\n\
    \      the expected range, as described in Section 3 of RFC 5082.\n   SET_MIN_TTL:\
    \  The SET_MIN_TTL primitive restricts datagrams delivered\n      to the application\
    \ to those received with an IP TTL value greater\n      than or equal to the passed\
    \ parameter.  This primitive can be used\n      to implement applications such\
    \ as GTSM [RFC5082] too, as described\n      in Section 3 of RFC 5082, but this\
    \ RFC does not specify this\n      method.\n   SET_IPV6_UNICAST_HOPS:  The SET_IPV6_UNICAST_HOPS\
    \ primitive sets the\n      network-layer Hop Limit field in an IPv6 packet header\
    \ [RFC8200]\n      carrying a UDP datagram.  For IPv6 unicast datagrams, this\
    \ is\n      functionally equivalent to the SET_TTL IPv4 function.\n   GET_IPV6_UNICAST_HOPS:\
    \  The GET_IPV6_UNICAST_HOPS primitive is a\n      network-layer function that\
    \ reads the hop count in the IPv6 header\n      [RFC8200] information of a received\
    \ UDP datagram.  This is\n      specified in Section 6.3 of RFC 3542.  For IPv6\
    \ unicast datagrams,\n      this is functionally equivalent to the GET_TTL IPv4\
    \ function.\n   SET_DSCP:  The SET_DSCP primitive is a network-layer function\
    \ that\n      sets the DSCP (or the legacy Type of Service (ToS)) value\n    \
    \  [RFC2474] to be used in the field of an IP header of a packet that\n      carries\
    \ a UDP datagram.  Section 2.4 of the requirements for\n      Internet hosts [RFC1123]\
    \ states that \"Applications MUST select\n      appropriate ToS values when they\
    \ invoke transport layer services,\n      and these values MUST be configurable.\"\
    \  The application should be\n      able to change the ToS during the connection\
    \ lifetime, and the ToS\n      value should be passed to the IP layer unchanged.\
    \  Section 4.1.4\n      of [RFC1122] also states that on reception the \"UDP MAY\
    \ pass the\n      received ToS up to the application layer.\"  The Diffserv model\n\
    \      [RFC2475] [RFC3260] replaces this field in the IP header assigning\n  \
    \    the six most significant bits to carry the DSCP field [RFC2474].\n      Preserving\
    \ the intention of the host requirements [RFC1122] to\n      allow the application\
    \ to specify the \"Type of Service\" should be\n      interpreted to mean that\
    \ an API should allow the application to\n      set the DSCP.  Section 3.1.8 of\
    \ the UDP Guidelines [RFC8085]\n      describes the way UDP applications should\
    \ use this field.\n      Normally, a UDP socket will assign a single DSCP value\
    \ to all\n      datagrams in a flow, but a sender is allowed to use different\
    \ DSCP\n      values for datagrams within the same flow in certain cases\n   \
    \   [RFC8085].  There are guidelines for WebRTC that illustrate this\n      use\
    \ [RFC7657].\n   SET_ECN:  The SET_ECN primitive is a network-layer function that\
    \ sets\n      the Explicit Congestion Notification (ECN) field in the IP header\n\
    \      of a UDP datagram.  The ECN field defaults to a value of 00.  When\n  \
    \    the use of the ToS field was redefined by Diffserv [RFC3260], 2\n      bits\
    \ of the field were assigned to support ECN [RFC3168].\n      Section 3.1.5 of\
    \ the UDP Guidelines [RFC8085] describes the way\n      UDP applications should\
    \ use this field.  NOTE: In many other IETF\n      transports (e.g., TCP), the\
    \ transport provides the support needed\n      to use ECN; when using UDP, the\
    \ application or higher-layer\n      protocol is itself responsible for the techniques\
    \ needed to use\n      ECN.\n   GET_ECN:  The GET_ECN primitive is a network-layer\
    \ function that\n      returns the value of the ECN field in the IP header of\
    \ a received\n      UDP datagram.  Section 3.1.5 of [RFC8085] states that a UDP\n\
    \      receiver \"MUST check the ECN field at the receiver for each UDP\n    \
    \  datagram that it receives on this port\", requiring the UDP\n      receiver\
    \ API to pass the received ECN field up to the application\n      layer to enable\
    \ appropriate congestion feedback.\n   ERROR_REPORT:  The ERROR_REPORT event informs\
    \ an application of \"soft\n      errors\", including the arrival of an ICMP or\
    \ ICMPv6 error message.\n      Section 4.1.4 of the requirements for Internet\
    \ hosts [RFC1122]\n      states that \"UDP MUST pass to the application layer\
    \ all ICMP error\n      messages that it receives from the IP layer.\"  For example,\
    \ this\n      event is required to implement ICMP-based Path MTU Discovery\n \
    \     [RFC1191] [RFC8201].  UDP applications must perform a CONNECT to\n     \
    \ receive ICMP errors.\n   CLOSE:  The CLOSE primitive closes a connection.  No\
    \ further\n      datagrams can be sent or received.  Since UDP is itself\n   \
    \   connectionless, no datagrams are sent when this primitive is\n      executed.\n"
- title: 3.1.1.  Excluded Primitives
  contents:
  - "3.1.1.  Excluded Primitives\n   In the requirements for Internet hosts [RFC1122],\
    \ Section 3.4\n   describes GET_MAXSIZES and ADVISE_DELIVPROB, and Section 3.3.4.4\n\
    \   describes GET_SRCADDR.  These mechanisms are no longer used.  It also\n  \
    \ specifies use of the Source Quench ICMP message, which has since been\n   deprecated\
    \ [RFC6633].\n   The IPV6_V6ONLY function is a network-layer primitive that applies\
    \ to\n   all transport services, as defined in Section 5.3 of the basic socket\n\
    \   interface for IPv6 [RFC3493].  This restricts the use of information\n   from\
    \ the name resolver to only allow communication of AF_INET6\n   sockets to use\
    \ IPv6 only.  This is not considered part of the\n   transport service.\n"
- title: 3.2.  Primitives Provided by UDP-Lite
  contents:
  - "3.2.  Primitives Provided by UDP-Lite\n   UDP-Lite [RFC3828] provides similar\
    \ services to UDP.  It changed the\n   semantics of the UDP \"payload length\"\
    \ field to that of a \"checksum\n   coverage length\" field.  UDP-Lite requires\
    \ the pseudo-header checksum\n   to be computed at the sender and checked at a\
    \ receiver.  Apart from\n   the length and coverage changes, UDP-Lite is semantically\
    \ identical\n   to UDP.\n   The sending interface of UDP-Lite differs from that\
    \ of UDP by the\n   addition of a single (socket) option that communicates the\
    \ checksum\n   coverage length.  This specifies the intended checksum coverage,\
    \ with\n   the remaining unprotected part of the payload called the \"error-\n\
    \   insensitive part\".\n   The receiving interface of UDP-Lite differs from that\
    \ of UDP by the\n   addition of a single (socket) option that specifies the minimum\n\
    \   acceptable checksum coverage.  The UDP-Lite Management Information\n   Base\
    \ (MIB) [RFC5097] further defines the checksum coverage method.\n   Guidance on\
    \ the use of services provided by UDP-Lite is provided in\n   the UDP Guidelines\
    \ [RFC8085].\n   UDP-Lite requires use of the UDP or UDP-Lite checksum; hence,\
    \ it is\n   not permitted to use the DISABLE_CHECKSUM function to disable use\
    \ of\n   a checksum, nor is it possible to disable receiver checksum\n   processing\
    \ using the REQUIRE_CHECKSUM function.  All other primitives\n   and functions\
    \ for UDP are permitted.\n   In addition, the following are defined:\n   SET_CHECKSUM_COVERAGE:\
    \  The SET_CHECKSUM_COVERAGE primitive sets the\n      coverage area for a sent\
    \ datagram.  UDP-Lite traffic uses this\n      primitive to set the coverage length\
    \ provided by the UDP checksum.\n      Section 3.3 of the UDP-Lite specification\
    \ [RFC3828] states that\n      \"Applications that wish to define the payload\
    \ as partially\n      insensitive to bit errors...should do this by an explicit\
    \ system\n      call on the sender side.\"  The default is to provide the same\n\
    \      coverage as for UDP.\n   SET_MIN_COVERAGE:  The SET_MIN_COVERAGE primitive\
    \ sets the minimum\n      acceptable coverage protection for received datagrams.\
    \  UDP-Lite\n      traffic uses this primitive to set the coverage length that\
    \ is\n      checked on receive.  (Section 1.1 of [RFC5097] describes the\n   \
    \   corresponding MIB entry as udpliteEndpointMinCoverage.)\n      Section 3.3\
    \ of the UDP-Lite specification [RFC3828] states that\n      \"Applications that\
    \ wish to receive payloads that were only\n      partially covered by a checksum\
    \ should inform the receiving system\n      by an explicit system call.\"  The\
    \ default is to require only\n      minimal coverage of the datagram payload.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Security considerations for the use of UDP and\
    \ UDP-Lite are provided\n   in the referenced RFCs.  Security guidance for application\
    \ usage is\n   provided in the UDP Guidelines [RFC8085].\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC0768]  Postel, J., \"User Datagram Protocol\"\
    , STD 6, RFC 768,\n              DOI 10.17487/RFC0768, August 1980,\n        \
    \      <https://www.rfc-editor.org/info/rfc768>.\n   [RFC1112]  Deering, S., \"\
    Host extensions for IP multicasting\", STD 5,\n              RFC 1112, DOI 10.17487/RFC1112,\
    \ August 1989,\n              <https://www.rfc-editor.org/info/rfc1112>.\n   [RFC1122]\
    \  Braden, R., Ed., \"Requirements for Internet Hosts -\n              Communication\
    \ Layers\", STD 3, RFC 1122,\n              DOI 10.17487/RFC1122, October 1989,\n\
    \              <https://www.rfc-editor.org/info/rfc1122>.\n   [RFC1123]  Braden,\
    \ R., Ed., \"Requirements for Internet Hosts -\n              Application and\
    \ Support\", STD 3, RFC 1123,\n              DOI 10.17487/RFC1123, October 1989,\n\
    \              <https://www.rfc-editor.org/info/rfc1123>.\n   [RFC1191]  Mogul,\
    \ J. and S. Deering, \"Path MTU discovery\", RFC 1191,\n              DOI 10.17487/RFC1191,\
    \ November 1990,\n              <https://www.rfc-editor.org/info/rfc1191>.\n \
    \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n         \
    \     Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3168]\
    \  Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition\n              of\
    \ Explicit Congestion Notification (ECN) to IP\",\n              RFC 3168, DOI\
    \ 10.17487/RFC3168, September 2001,\n              <https://www.rfc-editor.org/info/rfc3168>.\n\
    \   [RFC3493]  Gilligan, R., Thomson, S., Bound, J., McCann, J., and W.\n    \
    \          Stevens, \"Basic Socket Interface Extensions for IPv6\",\n        \
    \      RFC 3493, DOI 10.17487/RFC3493, February 2003,\n              <https://www.rfc-editor.org/info/rfc3493>.\n\
    \   [RFC3828]  Larzon, L-A., Degermark, M., Pink, S., Jonsson, L-E., Ed.,\n  \
    \            and G. Fairhurst, Ed., \"The Lightweight User Datagram\n        \
    \      Protocol (UDP-Lite)\", RFC 3828, DOI 10.17487/RFC3828, July\n         \
    \     2004, <https://www.rfc-editor.org/info/rfc3828>.\n   [RFC6864]  Touch, J.,\
    \ \"Updated Specification of the IPv4 ID Field\",\n              RFC 6864, DOI\
    \ 10.17487/RFC6864, February 2013,\n              <https://www.rfc-editor.org/info/rfc6864>.\n\
    \   [RFC6935]  Eubanks, M., Chimento, P., and M. Westerlund, \"IPv6 and\n    \
    \          UDP Checksums for Tunneled Packets\", RFC 6935,\n              DOI\
    \ 10.17487/RFC6935, April 2013,\n              <https://www.rfc-editor.org/info/rfc6935>.\n\
    \   [RFC6936]  Fairhurst, G. and M. Westerlund, \"Applicability Statement\n  \
    \            for the Use of IPv6 UDP Datagrams with Zero Checksums\",\n      \
    \        RFC 6936, DOI 10.17487/RFC6936, April 2013,\n              <https://www.rfc-editor.org/info/rfc6936>.\n\
    \   [RFC8085]  Eggert, L., Fairhurst, G., and G. Shepherd, \"UDP Usage\n     \
    \         Guidelines\", BCP 145, RFC 8085, DOI 10.17487/RFC8085,\n           \
    \   March 2017, <https://www.rfc-editor.org/info/rfc8085>.\n   [RFC8200]  Deering,\
    \ S. and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\"\
    , STD 86, RFC 8200,\n              DOI 10.17487/RFC8200, July 2017,\n        \
    \      <https://www.rfc-editor.org/info/rfc8200>.\n   [RFC8201]  McCann, J., Deering,\
    \ S., Mogul, J., and R. Hinden, Ed.,\n              \"Path MTU Discovery for IP\
    \ version 6\", STD 87, RFC 8201,\n              DOI 10.17487/RFC8201, July 2017,\n\
    \              <https://www.rfc-editor.org/info/rfc8201>.\n   [RFC8303]  Welzl,\
    \ M., Tuexen, M., and N. Khademi, \"On the Usage of\n              Transport Features\
    \ Provided by IETF Transport Protocols\",\n              RFC 8303, DOI 10.17487/RFC8303,\
    \ February 2018,\n              <https://www.rfc-editor.org/info/rfc8303>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [POSIX]    IEEE, \"Standard for Information\
    \ Technology - Portable\n              Operating System Interface (POSIX(R)) Base\n\
    \              Specifications\", Issue 7, IEEE 1003.1,\n              <http://ieeexplore.ieee.org/document/7582338/>.\n\
    \   [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n   \
    \           (IPv6) Specification\", RFC 2460, DOI 10.17487/RFC2460,\n        \
    \      December 1998, <https://www.rfc-editor.org/info/rfc2460>.\n   [RFC2474]\
    \  Nichols, K., Blake, S., Baker, F., and D. Black,\n              \"Definition\
    \ of the Differentiated Services Field (DS\n              Field) in the IPv4 and\
    \ IPv6 Headers\", RFC 2474,\n              DOI 10.17487/RFC2474, December 1998,\n\
    \              <https://www.rfc-editor.org/info/rfc2474>.\n   [RFC2475]  Blake,\
    \ S., Black, D., Carlson, M., Davies, E., Wang, Z.,\n              and W. Weiss,\
    \ \"An Architecture for Differentiated\n              Services\", RFC 2475, DOI\
    \ 10.17487/RFC2475, December 1998,\n              <https://www.rfc-editor.org/info/rfc2475>.\n\
    \   [RFC3260]  Grossman, D., \"New Terminology and Clarifications for\n      \
    \        Diffserv\", RFC 3260, DOI 10.17487/RFC3260, April 2002,\n           \
    \   <https://www.rfc-editor.org/info/rfc3260>.\n   [RFC3376]  Cain, B., Deering,\
    \ S., Kouvelas, I., Fenner, B., and A.\n              Thyagarajan, \"Internet\
    \ Group Management Protocol, Version\n              3\", RFC 3376, DOI 10.17487/RFC3376,\
    \ October 2002,\n              <https://www.rfc-editor.org/info/rfc3376>.\n  \
    \ [RFC3678]  Thaler, D., Fenner, B., and B. Quinn, \"Socket Interface\n      \
    \        Extensions for Multicast Source Filters\", RFC 3678,\n              DOI\
    \ 10.17487/RFC3678, January 2004,\n              <https://www.rfc-editor.org/info/rfc3678>.\n\
    \   [RFC3810]  Vida, R., Ed. and L. Costa, Ed., \"Multicast Listener\n       \
    \       Discovery Version 2 (MLDv2) for IPv6\", RFC 3810,\n              DOI 10.17487/RFC3810,\
    \ June 2004,\n              <https://www.rfc-editor.org/info/rfc3810>.\n   [RFC4566]\
    \  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n              Description\
    \ Protocol\", RFC 4566, DOI 10.17487/RFC4566,\n              July 2006, <https://www.rfc-editor.org/info/rfc4566>.\n\
    \   [RFC4604]  Holbrook, H., Cain, B., and B. Haberman, \"Using Internet\n   \
    \           Group Management Protocol Version 3 (IGMPv3) and Multicast\n     \
    \         Listener Discovery Protocol Version 2 (MLDv2) for Source-\n        \
    \      Specific Multicast\", RFC 4604, DOI 10.17487/RFC4604,\n              August\
    \ 2006, <https://www.rfc-editor.org/info/rfc4604>.\n   [RFC4821]  Mathis, M. and\
    \ J. Heffner, \"Packetization Layer Path MTU\n              Discovery\", RFC 4821,\
    \ DOI 10.17487/RFC4821, March 2007,\n              <https://www.rfc-editor.org/info/rfc4821>.\n\
    \   [RFC5082]  Gill, V., Heasley, J., Meyer, D., Savola, P., Ed., and C.\n   \
    \           Pignataro, \"The Generalized TTL Security Mechanism\n            \
    \  (GTSM)\", RFC 5082, DOI 10.17487/RFC5082, October 2007,\n              <https://www.rfc-editor.org/info/rfc5082>.\n\
    \   [RFC5097]  Renker, G. and G. Fairhurst, \"MIB for the UDP-Lite\n         \
    \     protocol\", RFC 5097, DOI 10.17487/RFC5097, January 2008,\n            \
    \  <https://www.rfc-editor.org/info/rfc5097>.\n   [RFC5790]  Liu, H., Cao, W.,\
    \ and H. Asaeda, \"Lightweight Internet\n              Group Management Protocol\
    \ Version 3 (IGMPv3) and Multicast\n              Listener Discovery Version 2\
    \ (MLDv2) Protocols\", RFC 5790,\n              DOI 10.17487/RFC5790, February\
    \ 2010,\n              <https://www.rfc-editor.org/info/rfc5790>.\n   [RFC6633]\
    \  Gont, F., \"Deprecation of ICMP Source Quench Messages\",\n              RFC\
    \ 6633, DOI 10.17487/RFC6633, May 2012,\n              <https://www.rfc-editor.org/info/rfc6633>.\n\
    \   [RFC7657]  Black, D., Ed. and P. Jones, \"Differentiated Services\n      \
    \        (Diffserv) and Real-Time Communication\", RFC 7657,\n              DOI\
    \ 10.17487/RFC7657, November 2015,\n              <https://www.rfc-editor.org/info/rfc7657>.\n\
    \   [STEVENS]  Stevens, W., Fenner, B., and A. Rudoff, \"UNIX Network\n      \
    \        Programming, The sockets Networking API\", Volume 1,\n              ISBN-13:\
    \ 9780131411555, October 2003.\n"
- title: Appendix A.  Multicast Primitives
  contents:
  - "Appendix A.  Multicast Primitives\n   This appendix describes primitives that\
    \ are used when UDP and\n   UDP-Lite support IPv4/IPv6 multicast.  Multicast services\
    \ are not\n   considered by the IETF TAPS WG, but the currently specified\n  \
    \ primitives are included for completeness in this appendix.  Guidance\n   on\
    \ the use of UDP and UDP-Lite for multicast services is provided in\n   the UDP\
    \ Guidelines [RFC8085].\n   IP multicast may be supported by using the Any Source\
    \ Multicast (ASM)\n   model or the Source-Specific Multicast (SSM) model.  The\
    \ latter\n   requires use of a Multicast Source Filter (MSF) when specifying an\
    \ IP\n   multicast group destination address.\n   Use of multicast requires additional\
    \ primitives at the transport API\n   that need to be called to coordinate operation\
    \ of the IPv4 and IPv6\n   network-layer protocols.  For example, to receive datagrams\
    \ sent to a\n   group, an endpoint must first become a member of a multicast group\
    \ at\n   the network layer.  Local multicast reception is signaled for IPv4 by\n\
    \   the Internet Group Management Protocol (IGMP) [RFC3376] [RFC4604].\n   IPv6\
    \ uses the equivalent Multicast Listener Discovery (MLD) protocol\n   [RFC3810]\
    \ [RFC5790], carried over ICMPv6.  A lightweight version of\n   these protocols\
    \ has also been specified [RFC5790].\n   The following are defined:\n   JoinHostGroup:\
    \  Section 7.1 of \"Host Extensions for IP Multicasting\"\n      [RFC1112] provides\
    \ a function that allows receiving traffic from\n      an IP multicast group.\n\
    \   JoinLocalGroup:  Section 7.3 of \"Host Extensions for IP Multicasting\"\n\
    \      [RFC1112] provides a function that allows receiving traffic from a\n  \
    \    local IP multicast group.\n   LeaveHostGroup:  Section 7.1 of \"Host Extensions\
    \ for IP Multicasting\"\n      [RFC1112] provides a function that allows leaving\
    \ an IP multicast\n      group.\n   LeaveLocalGroup:  Section 7.3 of \"Host Extensions\
    \ for IP\n      Multicasting\" [RFC1112] provides a function that allows leaving\
    \ a\n      local IP multicast group.\n   IPV6_MULTICAST_IF:  Section 5.2 of the\
    \ basic socket extensions for\n      IPv6 [RFC3493] states that this sets the\
    \ interface that will be\n      used for outgoing multicast packets.\n   IP_MULTICAST_TTL:\
    \  This sets the time-to-live field t to use for\n      outgoing IPv4 multicast\
    \ packets.  This is used to limit the scope\n      of multicast datagrams.  Methods\
    \ such as \"The Generalized TTL\n      Security Mechanism (GTSM)\" [RFC5082] set\
    \ this value to ensure\n      link-local transmission.  GTSM also requires the\
    \ UDP receiver API\n      to pass the received value of this field to the application.\n\
    \   IPV6_MULTICAST_HOPS:  Section 5.2 of the basic socket extensions for\n   \
    \   IPv6 [RFC3493] states that this sets the hop count to use for\n      outgoing\
    \ multicast IPv6 packets.  (This is equivalent to\n      IP_MULTICAST_TTL used\
    \ for IPv4 multicast.)\n   IPV6_MULTICAST_LOOP:  Section 5.2 of the basic socket\
    \ extensions for\n      IPv6 [RFC3493] states that this sets whether a copy of\
    \ a datagram\n      is looped back by the IP layer for local delivery when the\n\
    \      datagram is sent to a group to which the sending host itself\n      belongs).\n\
    \   IPV6_JOIN_GROUP:  Section 5.2 of the basic socket extensions for IPv6\n  \
    \    [RFC3493] provides a function that allows an endpoint to join an\n      IPv6\
    \ multicast group.\n   SIOCGIPMSFILTER:  Section 8.1 of the socket interface for\
    \ MSF\n      [RFC3678] provides a function that allows reading the multicast\n\
    \      source filters.\n   SIOCSIPMSFILTER:  Section 8.1 of the socket interface\
    \ for MSF\n      [RFC3678] provides a function that allows setting/modifying the\n\
    \      multicast source filters.\n   IPV6_LEAVE_GROUP:  Section 5.2 of the basic\
    \ socket extensions for\n      IPv6 [RFC3493] provides a function that allows\
    \ leaving an IPv6\n      multicast group.\n   The socket interface extensions\
    \ for MSF [RFC3678] updates the\n   multicast interface to add support for MSF\
    \ for IPv4 and IPv6 required\n   by IGMPv3.  Section 3 defines both basic and\
    \ advanced APIs, and\n   Section 5 describes protocol-independent versions of\
    \ these APIs.\n   Four sets of API functionality are therefore defined:\n   1.\
    \  IPv4 Basic (Delta-based) API.  \"Each function call specifies a\n       single\
    \ source address which should be added to or removed from\n       the existing\
    \ filter for a given multicast group address on which\n       to listen.\"\n \
    \  2.  IPv4 Advanced (Full-state) API.  \"This API allows an application\n   \
    \    to define a complete source-filter comprised of zero or more\n       source\
    \ addresses, and replace the previous filter with a new\n       one.\"\n   3.\
    \  Protocol-Independent Basic MSF (Delta-based) API.\n   4.  Protocol-Independent\
    \ Advanced MSF (Full-state) API.\n   It specifies the following primitives:\n\
    \   IP_ADD_MEMBERSHIP:  This is used to join an ASM group.\n   IP_BLOCK_SOURCE:\
    \  This MSF can block data from a given multicast\n         source to a given\
    \ ASM or SSM group.\n   IP_UNBLOCK_SOURCE:  This updates an MSF to undo a previous\
    \ call to\n         IP_UNBLOCK_SOURCE for an ASM or SSM group.\n   IP_DROP_MEMBERSHIP:\
    \  This is used to leave an ASM or SSM group.  (In\n         SSM, this drops all\
    \ sources that have been joined for a\n         particular group and interface.\
    \  The operations are the same as\n         if the socket had been closed.)\n\
    \   Section 4.1.2 of the socket interface for MSF [RFC3678] updates the\n   interface\
    \ to add IPv4 MSF support to IGMPv3 using ASM:\n   IP_ADD_SOURCE_MEMBERSHIP: \
    \ This is used to join an SSM group.\n   IP_DROP_SOURCE_MEMBERSHIP:  This is used\
    \ to leave an SSM group.\n   Section 4.2 of the socket interface for MSF [RFC3678]\
    \ defines the\n   Advanced (Full-state) API:\n   setipv4sourcefilter:  This is\
    \ used to join an IPv4 multicast group or\n         to enable multicast from a\
    \ specified source.\n   getipv4sourcefilter:  This is used to leave an IPv4 multicast\
    \ group\n         or to filter multicast from a specified source.\n   Section\
    \ 5.1 of the socket interface for MSF [RFC3678] specifies\n   Protocol-Independent\
    \ Multicast API functions:\n   MCAST_JOIN_GROUP:  This is used to join an ASM\
    \ group.\n   MCAST_JOIN_SOURCE_GROUP:  This is used to join an SSM group.\n  \
    \ MCAST_BLOCK_SOURCE:  This is used to block a source in an ASM group.\n   MCAST_UNBLOCK_SOURCE:\
    \  This removes a previous MSF set by\n         MCAST_BLOCK_SOURCE.\n   MCAST_LEAVE_GROUP:\
    \  This leaves an ASM or SSM group.\n   MCAST_LEAVE_SOURCE_GROUP:  This leaves\
    \ an SSM group.\n   Section 5.2 of the socket interface for MSF [RFC3678] specifies\
    \ the\n   Protocol-Independent Advanced MSF (Full-state) API applicable for\n\
    \   both IPv4 and IPv6:\n   setsourcefilter:  This is used to join an IPv4 or\
    \ IPv6 multicast\n         group or to enable multicast from a specified source.\n\
    \   getsourcefilter:  This is used to leave an IPv4 or IPv6 multicast\n      \
    \   group or to filter multicast from a specified source.\n   The Lightweight\
    \ IGMPv3 (LW_IGMPv3) and MLDv2 protocol [RFC5790]\n   updates this interface (in\
    \ Section 7.2 of RFC 5790).\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This work was partially funded by the European Union's Horizon\
    \ 2020\n   research and innovation programme under grant agreement No. 644334\n\
    \   (NEAT).  Thanks to all who have commented or contributed, including\n   Joe\
    \ Touch, Ted Hardie, Aaron Falk, Tommy Pauly, and Francis Dupont.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Godred Fairhurst\n   University of Aberdeen\n   School\
    \ of Engineering\n   Fraser Noble Building\n   Fraser Noble Building Aberdeen\
    \  AB24 3UE\n   United Kingdom\n   Email: gorry@erg.abdn.ac.uk\n   Tom Jones\n\
    \   University of Aberdeen\n   School of Engineering\n   Fraser Noble Building\n\
    \   Aberdeen  AB24 3UE\n   United Kingdom\n   Email: tom@erg.abdn.ac.uk\n"
