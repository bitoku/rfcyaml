- title: __initial_text__
  contents:
  - "   Report of the IAB Workshop on Internet Information Infrastructure,\n     \
    \                     October 12-14, 1994\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is a report on an Internet architecture workshop,\n\
    \   initiated by the IAB and held at MCI on October 12-14, 1994.  This\n   workshop\
    \ generally focused on aspects of the information\n   infrastructure on the Internet.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Internet Architecture Board (IAB) holds occasional workshops\n\
    \   designed to consider long-term issues and strategies for the\n   Internet,\
    \ and to suggest future directions for the Internet\n   architecture.  This long-term\
    \ planning function of the IAB is\n   complementary to the ongoing engineering\
    \ efforts performed by working\n   groups of the Internet Engineering Task Force\
    \ (IETF), under the\n   leadership of the Internet Engineering Steering Group\
    \ (IESG) and area\n   directorates.\n   An IAB-initiated workshop on the architecture\
    \ of the \"information\n   infrastructure\" of the Internet was held on October\
    \ 12-14, 1994 at\n   MCI in Tysons Corner, Virginia.\n   In addition to the IAB\
    \ members, attendees at this meeting included\n   the IESG Area Directors for\
    \ the relevant areas (Applications, User\n   Services) and a group of other experts\
    \ in the following areas:\n   gopher, the World Wide Web, naming, WAIS, searching,\
    \ indexing, and\n   library services.  The IAB explicitly tried to balance the\
    \ number of\n   attendees from each area of expertise.  Logistics limited the\n\
    \   attendance to about 35, which unfortunately meant that many highly\n   qualified\
    \ experts were omitted from the invitation list.\n   The objectives of the workshop\
    \ were to explore the architecture of\n   \"information\" applications on the\
    \ Internet, to provide the IESG with\n   a solid set of recommendations for further\
    \ work, and to provide a\n   place for communication between the communities of\
    \ people associated\n   with the lower and upper layers of the Internet protocol\
    \ suite, as\n   well as allow experience to be exchanged between the communities.\n\
    \   The 34 attendees divided into three \"breakout groups\" which met for\n  \
    \ the second half of the first day and the entire second day. Each\n   group wrote\
    \ a report of its activities. The reports are contained in\n   this document,\
    \ in addition to a set of specific recommendations to\n   the IESG and IETF community.\n"
- title: 2. Summary
  contents:
  - "2. Summary\n   Although there were some disagreements between the groups on specific\n\
    \   functionalities for architectural components, there was broad\n   agreement\
    \ on the general shape of an information architecture and on\n   general principles\
    \ for constructing the architecture. The discussions\n   of the architecture generalized\
    \ a number of concepts that are\n   currently used in deployed systems such as\
    \ the World Wide Web, but\n   the main thrust was to define general architectural\
    \ components rather\n   than focus on current technologies.\n   Research recommendations\
    \ include:\n  -  increased focus on a general caching and replication architecture\n\
    \  -  a rapid deployment of name resolution services, and\n  -  the articulation\
    \ of a common security architecture for information\n     applications.\n   Procedural\
    \ recommendations for forwarding this work in the IETF\n   include:\n  -  making\
    \ common identifiers such as the IANA assigned numbers\n     available in an on-line\
    \ database\n  -  tightening the requirements on Proposed Standards to insure that\n\
    \     they adequately address security\n  -  articulating the procedures necessary\
    \ to facilitate joining IETF\n     working group meetings, and\n  -  reviewing\
    \ the key distribution infrastructure for use in\n     information applications\n"
- title: '3. Group 1 report: The Distributed Database Problem'
  contents:
  - "3. Group 1 report: The Distributed Database Problem\n   Elise Gerich, Tim Berners-Lee,\
    \ Mark McCahill, Dave Sincoskie, Mike\n   Schwartz, Mitra, Yakov Rekhter, John\
    \ Klensin, Steve Crocker, Ton\n   Verschuren\n   Editors: Mark McCahill, Mike\
    \ Schwartz, Ton Verschuren\n"
- title: 3.1 Problem and Needs
  contents:
  - "3.1 Problem and Needs\n   Because of the increasing popularity of accessing networked\n\
    \   information, current Internet information services are experiencing\n   performance,\
    \ reliability, and scaling problems.  These are general\n   problems, given the\
    \ distributed nature of the Internet.  Current and\n   future applications would\
    \ benefit from much more widespread use of\n   caching and replication.\n   For\
    \ instance, popular WWW and Gopher servers experience serious\n   overloading,\
    \ as many thousands of users per day attempt to access\n   them simultaneously.\
    \  Neither of these systems was designed with\n   explicit caching or replication\
    \ support in the core protocol.\n   Moreover, because the DNS is currently the\
    \ only widely deployed\n   distributed and replicated data storage system in the\
    \ Internet, it is\n   often used to help support more scalable operation in this\n\
    \   environment -- for example, storing service-specific pointer\n   information,\
    \ or providing a means of rotating service accesses among\n   replicated copies\
    \ of NCSA's extremely popular WWW server.  In most\n   cases, such uses of the\
    \ DNS semantically overload the system.  The\n   DNS may not be able to stand\
    \ such \"semantic extensions\" and continue\n   to perform well.  It was not designed\
    \ to be a general-purpose\n   replicated distributed database system.\n   There\
    \ are many examples of systems that need or would benefit from\n   caching or\
    \ replication.  Examples include key distribution for\n   authentication services,\
    \ DHCP, multicast SD, and Internet white\n   pages.\n   To date there have been\
    \ a number of independent attempts to provide\n   caching and replication facilities.\
    \  The question we address here is\n   whether it might be possible to define\
    \ a general service interface or\n   protocol, so that caches and replica servers\
    \ (implemented in a\n   variety of ways to support a range of different situations)\
    \ might\n   interoperate, and so that we might reduce the amount of wasted re-\n\
    \   implementation effort currently being expended.  Replication and\n   caching\
    \ schemes could form a sort of network \"middleware\" to fulfill\n   a common\
    \ need of distributed services.\n   It should be noted that it is an open question\
    \ whether it would be\n   feasible to define a unified interface to all caching\
    \ and replication\n   problems.  For example, very different considerations must\
    \ go into\n   providing a system to support a nationwide video service for\n \
    \  1,000,000 concurrent users than would be needed for supporting\n   worldwide\
    \ accesses to popular WWW pages.  We recommend research and\n   experimentation\
    \ to address this more general issue.\n"
- title: 3.2 Characteristics of Solutions
  contents:
  - "3.2 Characteristics of Solutions\n   While on the surface caching and replication\
    \ may appear to occupy two\n   ends of a spectrum, further analysis shows that\
    \ these are two\n   different approaches with different characteristics. There\
    \ are cases\n   where a combination of the two techniques is the optimal solution,\n\
    \   which further complicates the situation.\n   We can roughly characterize the\
    \ two approaches as follows:\n   Caching:\n        - a cache contains a partial\
    \ set of data\n        - a cache is built on demand\n        - a cache is audience-specific,\
    \ since the cache is built in\n          response to demands of a community\n\
    \   Replication:\n        - replicated databases contain the entire data set or\
    \ a\n          server-defined subset of a given database\n        - a replicated\
    \ database can return an authoritative answer about\n          existence of an\
    \ item\n        - data is pushed onto the replicating server rather than pulled\
    \ on\n          demand\n   While there are important differences between caches\
    \ and replicated\n   databases, there are some issues common to both, especially\
    \ when\n   considering how updates and data consistency can be handled.\n   A\
    \ variety of methods can be used to update caches and replicas:\n        - master-slave\n\
    \        - peer-to-peer\n        - flooding techniques (such as that used by NNTP).\n\
    \   Which strategy one chooses influences important characteristics of\n   the\
    \ cache or replicated database, such as:\n        - consistency of data\n    \
    \    - is locking used to achieve consistency? this influences\n          performance...\n\
    \        - are there a priori guarantees of existence of an item in the\n    \
    \      database (is the answer authoritative, do you detect conflicts\n      \
    \    after the fact, or is there no guarantee on authoritativeness of\n      \
    \    the answer?)\n   Consistency guarantees depend on the granularity of synchronization\n\
    \   (ms, sec, hr, day), and there are cases where it is acceptable to\n   trade\
    \ consistency for better performance or availability. Since there\n   is a range\
    \ of qualities of service with respect to consistency and\n   performance, we\
    \ would like to be able to tune these parameters for a\n   given application.\
    \ However, we recognize that this may not be\n   possible in all cases since it\
    \ is unlikely one can implement a high\n   performance solution to all of these\
    \ problems in a single system.\n   Beyond simply performing replication or caching,\
    \ there is a need for\n   managing cache and replication servers. There are several\
    \ models for\n   organizing groups of caches/replication servers that range from\n\
    \   totally adaptive to a rigidly administered, centrally controlled\n   model:\n\
    \    - a club model. Minimal administrative overhead to join the club.\n     \
    \ Participation is a function of disk space, CPU, available\n      network bandwidth.\n\
    \    - centrally coordinated service. Here administrators can take\n      advantage\
    \ of their knowledge of the system's topology and the\n      community they intend\
    \ to serve. There may be scaling problems\n      with this model.\n    - hybrid\
    \ combinations of the club and centrally coordinated models\n   There are a couple\
    \ of models for how to organize the management of a\n   group of cooperating servers,\
    \ but this does not address the question\n   of what sorts of commands the manager\
    \ (be it a person or a program)\n   issues to a cache or replicated server. A\
    \ manager needs to be able to\n   address issues on a server such as:\n    - control\
    \ of caching algorithms, defining how information is aged\n      out of the cache\
    \ based on disk space, usage demands, etc. This is\n      where you would control\
    \ time-to-live and expiry settings.\n    - flushing the cache. There are circumstances\
    \ where the\n      information source has become inaccessible and the normal cache\n\
    \      aging strategy is inappropriate since you will not be able to\n      get\
    \ the information again for an indeterminate amount of time.\n    - management\
    \ control might also be a way for information providers\n      to control how\
    \ information is pushed on servers for maintaining\n      data consistency, but\
    \ this raises tricky problems with trust and\n      authentication.\n   Given\
    \ a common set of management controls needed, a common protocol\n   would allow\
    \ for simplified management of a collection of caching and\n   replicating servers\
    \ since you would be able to both control them with\n   a single set of commands\
    \ and query them about their capabilities. A\n   common language/protocol would\
    \ also allow different implementations\n   to interoperate.\n   Replicating or\
    \ caching information immediately raises issues of\n   billing, access control\
    \ and authentication. Ignoring authentication\n   and access control issues simplifies\
    \ the replication and caching\n   problem a great deal. Exactly who is running\
    \ the replication or\n   caching server makes a big difference in how you approach\
    \ this issue.\n   If the information publisher runs a set of servers, they can\
    \ easily\n   handle billing and authentication. On the other hand, if an\n   organization\
    \ is running a cache on its firewall (a boundary cache),\n   and purchasing information\
    \ from a vendor, there are sticky issues\n   regarding intellectual property in\
    \ this scenario.\n   Selecting an appropriate cache or replica of a database is\
    \ simple in\n   the case of a captive user group (for instance a company behind\
    \ a\n   firewall). In this case, configuring the user's software to go\n   through\
    \ one or more boundary caches/replication servers directs the\n   users to the\
    \ closest server. In the more general case, there are\n   several replicated/cached\
    \ copies of an object, so you may receive\n   several URLs when you resolve a\
    \ URN. How do you select the best URL?\n   Either client developers create ad\
    \ hoc performance metrics or (in an\n   ideal world) the lower level protocols\
    \ would give the client\n   application some guidance about the \"closest\" copy\
    \ of the object.  In\n   other words, if better information about network performance\
    \ was\n   available from lower levels of the protocol stack, applications would\n\
    \   not have to build ad hoc models of network topology\n   We did not model the\
    \ functions of a cache/replication server in\n   detail, but we did an (incomplete)\
    \ model of some of the functions\n   (see Figure 1). The idea here was to start\
    \ work on a general form\n   which might include features such as a push function\
    \ for use in both\n   maintaining consistency and in preloading information that\
    \ the\n   information publisher believes will be requested in the near future.\n\
    \   Preloading information via a push command might be a function of\n   observed\
    \ behavior patterns (when you ask for A you'll probably want B\n   and C). The\
    \ decision about what to preload can be made either by the\n   information publisher\
    \ or by the cache server. The cache server has\n   the advantage that it has better\
    \ knowledge of the use patterns of its\n   community. The distributed nature of\
    \ links to other servers also\n   limit the knowledge of a single information\
    \ publisher. In any case,\n   being able to accurately predict usage patterns\
    \ can result in\n   significant performance enhancements for caches.\n"
- title: 'Figure 1: a rough cut at functions'
  contents:
  - "Figure 1: a rough cut at functions\n                 requests from client (in)\n\
    \                           |\n                           |\n                \
    \           |\n                          \\|/\n                  +---------------------+\n\
    \                  |                     |     (management)\n                \
    \  | cache/replicated db |<--- commands from admins,\n                  |    \
    \                 |     publishers, caches\n                  +---------------------+\n\
    \                           |\n                           |\n                \
    \           |\n                          \\|/\n         requests sent to information\
    \ providers (out)\n         in: (requests from a client)\n   - give me meta-info\
    \ about cached object (how up-to-date,\n     ttl, expiry, signatures/checksum,\
    \ billing information )\n   - give me the object\n   - go get the object from\
    \ the net\n   - cache, what objects should I pre-fetch?\n     (this assumes that\
    \ the client software believes that the\n     cache/replica has some knowledge\
    \ of use patterns and can\n     predict what the user will do next)\n   out: (requests\
    \ sent to an information publisher or a\n        cache further up the food chain)\n\
    \   - server, do I have latest copy of this object?\n   - give me object x and\
    \ the meta data for object x\n   - I have a copy of object x (announcing you have\
    \ a copy\n     of object x to other caches or URN to URL server)\n   - info publisher,\
    \ what objects should I pre-fetch?\n     (this assumes that the information publisher\
    \ has some\n     knowledge of use patterns and can predict what the user\n   \
    \  will do next)\n   management: (commands from administrators, other\n      \
    \         cooperating caches, and object publishers)\n   - turn parameters (e.g.\
    \ consistency) on/off\n   - flush the cache\n   - there's a new version of object\
    \ x, take it\n"
- title: 3.3 Recommendations
  contents:
  - "3.3 Recommendations\n   Caching and replication are important pieces of Internet\
    \ middleware,\n   and solutions need to be found soon. Caches and replicas have\n\
    \   different performance characteristics, and there are cases where a\n   combination\
    \ of the two provides the best solution. There are also\n   many strategies for\
    \ updating and maintaining consistency of caches\n   and replicated databases,\
    \ and we do not believe any single\n   implementation can suffice for the broad\
    \ range of needs in the\n   Internet.  One possible solution would be to define\
    \ a general\n   protocol for a replicated distributed database and for caching\
    \ so\n   that different information application implementations can\n   interoperate\
    \ and be managed via a common management interface.  A\n   common protocol would\
    \ provide a framework for future protocols (e.g.,\n   URN2URL, DHCP) or existing\
    \ protocols (e.g., Gopher or WWW) that\n   presently lack a consistent solution.\n"
- title: '4. Group 2A report: Building an Information Architecture'
  contents:
  - "4. Group 2A report: Building an Information Architecture\n   Karen Sollins, Abel\
    \ Weinrib, Barry Leiner, Clifford Neuman, Dan\n   LaLiberte, Erik Huizer, John\
    \ Curran, John Klensin, Lixia Zhang,\n   Michael Mealling, Mitchell Charity, Mike\
    \ St. Johns, Paul Mockapetris\n   This group took as its central agenda exploring\
    \ an information\n   architecture, the services that would instantiate such an\n\
    \   architecture, and the functional interfaces between a realization of\n   such\
    \ an architecture and both layers on which it would sit and the\n   layers that\
    \ would sit on it.  In order to describe an architecture,\n   one must describe\
    \ not only what it includes, but also what it\n   excludes.\n"
- title: 4.1. The core model and service structure
  contents:
  - "4.1. The core model and service structure\n   The general architecture has as\
    \ its centerpiece objects, or as they\n   are known in the Uniform Resource Identifier\
    \ Working Group,\n   resources.  An object in this architecture has several\n\
    \   characteristics.  First, it has an identifier, assigned within the\n   context\
    \ of some namespace.  Such an identifier is globally unique and\n   will not be\
    \ reassigned to another object.  Thus, it can be said to be\n   globally unique\
    \ for a long time. Because such an identifier must\n   remain unique for all time,\
    \ it cannot contain location-relevant\n   information ... locations can and will\
    \ be reused. Also, since\n   resources may appear in zero, one, or many locations\
    \ simultaneously,\n   location-dependent information can lead to a vast number\
    \ of\n   identifiers for an object, which will make it difficult to identify\n\
    \   separately retrieved copies of an object as being the same object.\n   These\
    \ locations are defined by the supporting layers that provide\n   transport and\
    \ access. Therefore the definition of locations is not\n   within the architecture,\
    \ although their existence is accepted.\n   Second, an object will support one\
    \ or more abstract types.  Further\n   determination beyond this statement was\
    \ not made.  One can conclude\n   from these two points that an object cannot\
    \ be part of such an\n   architected universe without having at least one such\
    \ identifier and\n   without supporting at least one type if it has at least one\
    \ location.\n   In addition, the architecture contains several other components.\n\
    \   First, there will be a prescribed class of objects called links that\n   express\
    \ a relationship among other objects including the nature of\n   that relationship.\
    \  It is through links that composite objects\n   composed of related objects\
    \ can be created and managed.  Finally,\n   there is a need for several sorts\
    \ of meta-information, both in order\n   to discover identifiers (e.g. for indices\
    \ and in support of\n   searching) and to aid in the process of mapping an identifier\
    \ to one\n   or more potential locations.  Both of these sorts of meta-information\n\
    \   are associated with objects, although they will be used and therefore\n  \
    \ most likely managed differently, to support their distinctive access\n   and\
    \ update requirements.\n   Given this architecture of information objects, one\
    \ can identify\n   several boundary points.  First, something that does not have\
    \ an\n   identifier or type is outside the architecture.  Second, the\n   architecture\
    \ does not, at this point, include any statement about\n   computations, or communications\
    \ paradigms other than second-handedly\n   by assuming that traversal of links\
    \ will occur.  Third, although\n   pre-fetching, caching, and replication are\
    \ important, such details\n   may be hidden from higher level software components,\
    \ and thus are not\n   part of the data model exposed to the application in the\
    \ normal case\n   (though some applications may want to specify such characteristics).\n\
    \   Now one can ask how such a model fits into a layered network model,\n   how\
    \ it might be modularized and realized.  We envisioned this\n   information layer\
    \ as an information \"wholesale\" layer.  It provides\n   the general, broad model\
    \ and provision of shared, network-based\n   information.  Above this sit the\
    \ \"retailers,\" the marketers or\n   providers of information to the marketplace\
    \ of applications users.\n   Below the \"wholesalers\" lie the providers of \"\
    raw materials.\"  Here\n   will be the provision of supporting mechanisms and\
    \ architecture from\n   which information objects can come.\n   The remainder\
    \ of this group's report describes the modular\n   decomposition of the wholesale\
    \ layer, including the interactions\n   among those modules, separate discussions\
    \ of the interactions first\n   between the retail and wholesale layers and then\
    \ between the\n   wholesale and raw material layers.  The report concludes with\n\
    \   recommendations for where the most effective immediate efforts could\n   be\
    \ made to provide for the wholesale layer and make it useful.\n"
- title: 4.2. The Wholesale Layer
  contents:
  - "4.2. The Wholesale Layer\n   In order to realize the information architecture\
    \ in the network a\n   variety of classes of services or functionality must be\
    \ provided.  In\n   each case, there will be many instances of a sort of service,\n\
    \   coordinating to a lesser or greater degree, but all within the\n   general\
    \ Internet model of autonomy and loose federation.  There also\n   may be variants\
    \ of any sort of service, to provide more specialized\n   or constrained service.\
    \  In addition, services may exist that will\n   provide more than one of these\
    \ services, where that is deemed useful.\n   Each such service will reside in\
    \ one or more administrative domains\n   and may be restricted or managed based\
    \ on policies of those domains.\n   The list of core services is described below.\
    \  Because there are many\n   interdependencies, there may often be forward references\
    \ in\n   describing a service and its relationships to other services.\n   * RESOURCE\
    \ DISCOVERY: Much of the activity of resource discovery,\n   indexing and searching,\
    \ will be in the domain of the retailers,\n   although there are supporting hooks\
    \ that can be provided by the\n   wholesaler layer as well.  A resource discovery\
    \ service will hold\n   mappings from descriptions to identifiers of objects.\
    \  They will need\n   to be queried.  Thus there is a general functionality for\
    \ a wholesale\n   layer service that answers queries formulated in certain ways\
    \ and\n   responds with identifiers.  The business of on what basis indices are\n\
    \   computed or how they are managed will be domain specific.\n   * NAMING or\
    \ IDENTIFICATION: There are two aspects to assigning an\n   identifier to an object,\
    \ one in the wholesale layer, and one,\n   arguably, in the retail layer.  In\
    \ the wholesale layer, one can\n   generate identifiers that are guaranteed to\
    \ be unique.  In the retail\n   layer one might ask the question about whether\
    \ two objects are the\n   same or different by the rules of an identification\
    \ authority that\n   therefore would determine whether they should bear the same\
    \ or\n   different identification from that authority.  It should be noted\n \
    \  that the URI Working Group has included these two functions in the\n   requirements\
    \ document for URNs.\n   An identification service will obviously provide functionality\
    \ to the\n   uniqueness authority.  It will also provide identification in the\n\
    \   process of publication of objects, as will be discussed below, in the\n  \
    \ management of resource discovery information, object location and\n   storage\
    \ services, as well as cache and replication management.\n   * NAME or IDENTIFICATION\
    \ RESOLUTION: Since identifiers are presumed\n   to be location independent, there\
    \ is a need for a resolution service.\n   Such a service may sometimes return\
    \ other identifiers at this same\n   level of abstraction (the equivalent of aliases)\
    \ or location\n   information, the information delivered to a transport service\
    \ to\n   access or retrieve an object.\n   * OBJECT RETRIEVAL: Object retrieval\
    \ is tightly coupled to\n   resolution, because without resolution it cannot proceed.\
    \  Object\n   retrieval provides the functionality of causing a representation\
    \ of\n   an object to be provided locally to the requester of an object\n   retrieval.\
    \  This may involve the functionality of object publication\n   (see below) and\
    \ object storage, caching and replication services as\n   well as the supporting\
    \ transport facilities.\n   * OBJECT PUBLICATION: When an object comes into existence\
    \ in the\n   universe of the information infrastructure, it is said to be\n  \
    \ \"published.\"  There will be two common scenarios in publication.  One\n  \
    \ will be the use of tools to directly enter and create the information\n   that\
    \ comprises an object in the information infrastructure.  Thus\n   there may be\
    \ object creation tools visible to users in applications.\n   In contrast there\
    \ may also be tools outside the information\n   infrastructure (for example word\
    \ processing or text editing tools)\n   that provide for the entry of data separately\
    \ from the operation of\n   assigning an object an identifier and causing it to\
    \ support\n   information infrastructure definitions of objects.  Thus, there\
    \ will\n   also be visible at the interface between the wholesale and retail\n\
    \   layers the ability to cause some pre-existing data to become one or\n   more\
    \ objects.  In addition to interacting with the identification\n   service, publication\
    \ is likely to cause interaction with object\n   storage, and possibly caching\
    \ and replication.\n   * DEFINITIONS: If the information infrastructure is to\
    \ both survive\n   and evolve over a long time period, we must be prepared for\
    \ a wide\n   variety and growing number of different sorts of information with\n\
    \   different functionalities that each supports.  For objects available\n   on\
    \ the net, the functionality that each provides must be exposed or\n   able to\
    \ be learned.  To do this objects must be able to indicate by\n   name or identifier\
    \ the types of functionality they are supporting.\n   Given such an identifier,\
    \ an object is only useful to a client, if\n   the client can discover the definition\
    \ and perhaps a useful\n   implementation of the type in question.  This will\
    \ be acquired from a\n   definitions service, which will be used in conjunction\
    \ with\n   applications themselves directly, object publication, and object\n\
    \   retrieval.\n   * ATTRIBUTE MANAGEMENT: The attributes considered here relate\
    \ to\n   policy, although any understanding of that policy will be above the\n\
    \   wholesale level.  There are, for example, access management and\n   copyright\
    \ attributes.  There is a question here about whether there\n   is or should be\
    \ any access time enforcement or only after the fact\n   enforcement.  The information\
    \ is likely to be in the form of\n   attribute-value pairs and must be able to\
    \ capture copyright knowledge\n   effectively.\n   * ACCOUNTING: An accounting\
    \ service provides metering of the use of\n   resources.  The resources wholly\
    \ contained in the wholesale layer are\n   the services discussed here.  It will\
    \ also be important to provide\n   metering tools in the wholesale layer to be\
    \ used by the retail layer\n   to meter usage or content access in that layer.\
    \  Metering may be used\n   for a variety of purposes ranging from providing better\
    \ utilization\n   or service from the resources to pricing and billing.  Hence\n\
    \   accounting services will be used by object storage, caching and\n   replication,\
    \ lower layer networking services, as well as pricing and\n   billing services.\
    \  In the form of content metering it will also\n   interact with attribute management.\n\
    \   * PRICING, BILLING and PAYMENT: Pricing and payment services straddle\n  \
    \ two layers in the information infrastructure.  Servers that maintain\n   account\
    \ balances and with which users interact to retrieve and edit\n   account information\
    \ are applications that will be built on top of\n   wholesale layer services.\
    \  Pricing will be determined in the\n   applications environment for application\
    \ level activities.  However,\n   it must be possible for middle layer services\
    \ to process payment\n   instruments analogous to cash, credit card slips, and\
    \ checks, without\n   an understanding of the specific implementation of the payment\n\
    \   mechanism.  Application programming interfaces supporting payment\n   should\
    \ be provided, and a common tagged representation of payment\n   instruments should\
    \ allow instruments from a variety of payment\n   systems to be presented within\
    \ middle layer protocols.\n   * OBJECT STORAGE, CACHING and REPLICATION: There\
    \ is a recognition\n   that caching and replication are important, but the discussion\
    \ of\n   that was left to another group that had taken that as the focus of\n\
    \   their agenda.  Object storage will take an object and put it\n   somewhere,\
    \ while maintaining both the identity and nature of the\n   object.  It is tightly\
    \ coupled to caching and replication, as well as\n   accounting, often in order\
    \ to determine patterns of caching and\n   replication.  It is also tightly coupled\
    \ to object publication,\n   translation, and provides interfaces to both supporting\
    \ storage\n   facilities such as local file systems, as well as direct access\
    \ from\n   applications, needing access to objects.\n   * TRANSLATION: A translation\
    \ service allows an object to behave with\n   a nature different than that it\
    \ would otherwise support.  Thus, for\n   example, it might provide a WYSIWYG\
    \ interface to an object whose\n   functionality might not otherwise support that,\
    \ or it might generate\n   text on the fly from an audio stream.  Translation\
    \ services will be\n   used by object publication (allowing for identification\
    \ of an object\n   including a translation of it) and with object storage, providing\
    \ an\n   interface only within the wholesale or to the retail layers.\n   * SERVER\
    \ AND SERVICE LOCATION: It will be necessary as part of the\n   infrastructure\
    \ to be able to find services of the kinds described\n   here and the servers\
    \ supporting them.  This service has direct\n   contact with the lower layer of\
    \ raw materials, in that it will\n   provide, in the final analysis, the addresses\
    \ needed to actually\n   locate objects and services using lower level protocols,\
    \ such as the\n   existing access protocols in use today, for example FTP, SMTP,\
    \ HTTP,\n   or TCP.  This service will provide functionality directly to resource\n\
    \   discovery as well as remote object storage services.\n   * ADAPTIVE GLUE:\
    \ This is not a single service as much as a\n   recognition that there must be\
    \ a path for a flow of information\n   between the network layers and the applications.\
    \  The application may\n   have constraints, based both on its own needs as well\
    \ as needs of the\n   objects in the wholesale layer.  Only the application can\
    \ really know\n   what compromises in services provided below are acceptable to\
    \ it.  At\n   the same time, the supporting network layers understand what\n \
    \  qualities of service are available at what price.  Hence there is the\n   potential\
    \ for flow of information both up and down through the\n   wholesale layer, perhaps\
    \ mediated by the wholesale layer.  Hence the\n   adaptive glue has hooks into\
    \ all three levels.\n   * SECURITY: Security services will be a critical piece\
    \ of the\n   infrastructure architecture.  For any real business to be conducted,\n\
    \   organizations must make their information available over the network,\n  \
    \ yet they require the ability to control access to that information on\n   a\
    \ per user and per object basis.  To account properly for the use of\n   higher\
    \ level services, organization must be able to identify and\n   authenticate their\
    \ users accurately.  Finally, payment services must\n   be based on security to\
    \ prevent fraudulent charges, or disclosure of\n   compromising information.\n\
    \   The two biggest problems in providing security services at the\n   wholesale\
    \ layer are poor infrastructure and multiple security\n   mechanisms that need\
    \ to be individually integrated with applications.\n   The poor state of the infrastructure\
    \ is the result of a lack of an\n   accepted certification hierarchy for authentication.\
    \  A commonly held\n   position is that there will not be a single hierarchy,\
    \ but there must\n   be established authorities whose assertions are widely accepted,\
    \ who\n   indirectly certify the identities of individuals with which one has\n\
    \   not had prior contact.\n   Integration with applications is made difficult\
    \ because, though\n   security services are themselves layered upon one another,\
    \ such\n   services do not fit into the information architecture at a single\n\
    \   layer.  By integrating security services with lower layers of the\n   information\
    \ infrastructure, security can be provided to higher\n   layers, but some security\
    \ information, such as client's identity, may\n   be needed at higher layers,\
    \ so such support will not be completely\n   transparent.  Further, the security\
    \ requirements for each middle\n   layer information service, and of the application\
    \ itself, must be\n   considered and appropriate use must be made of the middle-layer\n\
    \   security services applied.\n   Integration with applications will require\
    \ user demand for security,\n   together with common interfaces such as the GSS-API,\
    \ so that\n   applications and middle layer information services can utilize the\n\
    \   security services that are available, without understanding the\n   details\
    \ of the specific security mechanism that is employed.\n   * BOOTSTRAPPING: In\
    \ order for a newly participating machine to join\n   the infrastructure, it must\
    \ have some way of finding out about at\n   least one instance of many of the\
    \ services described here.  This can\n   be done either by providing it with some\
    \ form of configuration\n   provided by the human bringing it up or by a bootstrapping\
    \ service.\n   The bootstrapping service is more flexible and manageable; it is\n\
    \   included here in recognition that this information must be provided\n   in\
    \ some form or other.  The bootstrapping service will sit directly\n   on the\
    \ raw materials layer and will have contact with all the\n   services described\
    \ here.\n   This completes the description of the services as identified by this\n\
    \   group in the wholesale layer.  Although this section suggests which\n   services\
    \ have interfaces to the retail and raw materials layers, each\n   of these topics\
    \ will need to be described separately as well, to\n   clarify the functionality\
    \ expected by each layer of the layer below.\n"
- title: 3. Interface to retail layer
  contents:
  - "3. Interface to retail layer\n   The interface to the retail layer is the embodiment\
    \ of the object\n   model and attendant services.  Thus the interface provides\
    \ the\n   application environment with a collection of objects having\n   identifiers\
    \ for distinguishing them within the wholesale layer and\n   support for a typing\
    \ or abstract functionality model.  It provides\n   for the ability to create\
    \ or import objects into this object world by\n   the publication paradigm, and\
    \ allows objects to evolve to support new\n   or evolving functionality through\
    \ the translation paradigm.  Access\n   to the objects is provided by object storage,\
    \ enhanced with caching\n   and replication services and mediated by the attributes\
    \ managed by\n   attribute management and accounting or content metering.  Discovery\n\
    \   of resources (figuring out which identifier to be chasing) is\n   provided\
    \ by resource discovery services.  Types are registered and\n   hence available\
    \ both as definitions and perhaps in the form of\n   implementations from a definition\
    \ service.  Lastly, there is a\n   vertical model of providing the two-way services\
    \ of adaptive glue for\n   quality of service negotiation and for security constraints\
    \ and\n   requirements, with access and services at all three layers.\n"
- title: 4. Interface to the raw materials layer
  contents:
  - "4. Interface to the raw materials layer\n   The raw materials layer falls into\
    \ networking and operating systems.\n   Hence it provides all those services currently\
    \ available from current\n   networking and operating systems.  Wholesale services\
    \ such as object\n   management will be dependent on local operating system support\
    \ such\n   as a file system, as well as perhaps transport protocols.  In fact,\n\
    \   all instances of any of the above services will be dependent on local\n  \
    \ storage, process management, local access control and other security\n   mechanisms,\
    \ as well as general transport protocols for communications\n   both often among\
    \ services of the same sort and among services\n   dependent on each other that\
    \ may not be collocated.  In addition the\n   group identified a set of issues\
    \ that appear important for the\n   networking components of the raw materials\
    \ layer to provide to the\n   wholesale layer in addition to the basic best effort\
    \ transmission\n   services that are commonly available.  These take the form\
    \ of a wish\n   list with the recognition that they are not all equally easy or\n\
    \   possible.\n   * Connectivity: It is useful and important for the operation\
    \ of\n   applications and the wholesale services to understand what\n   connectivity\
    \ is currently available.  The group identified four\n   categories of connectivity\
    \ that it would be useful to know about\n   represented by four questions:\n \
    \       1) Is there a wire out of the back of my machine?\n        2) Am I connected\
    \ to a router?\n        3) Am I connected to the global internet?  (Can I get\
    \ beyond\n           my own domain?)\n        4) Am I connected to a specific\
    \ host?\n   These are probably in increasing difficulty of knowing.\n   * Connectivity\
    \ forecast: Although this is recognized as either\n   extremely difficult or impossible\
    \ to do, some form of connectivity\n   forecast would be very useful to the upper\
    \ layers\n   * Bandwidth availability and reservation: It is useful for the\n\
    \   application to know both what bandwidth might be available to it and,\n  \
    \ better yet, for it to be able to make some form of reservation.\n   * Latency\
    \ availability and reservation: It is useful for the\n   application to know both\
    \ what latency the network is experiencing\n   and, better yet, be able to set\
    \ limits on it by means of a\n   reservation.\n   * Reliability availability and\
    \ reservation: Again, reliability\n   constraints are important for many applications,\
    \ although they may\n   have differing reliability constraints and may be able\
    \ to adapt\n   differently to different circumstances.  But, if the application\n\
    \   could make a statement (reservation) about what level of\n   unreliability\
    \ it can tolerate, it might be able to make tradeoffs.\n   * Burstiness support:\
    \ Although it is unlikely that the network can\n   make predictions about the\
    \ burstiness of its services, if the\n   application can predict to the network\
    \ its burstiness behavior, the\n   network might be able to take advantage of\
    \ that knowledge.\n   * Service envelope: It is possible that, as an alternative\
    \ to the\n   above four issues, the raw materials layer could negotiate a whole\n\
    \   service envelope with the layers it is supporting.\n   * Security availability:\
    \ In many cases, it will be important for the\n   upper layers to be able to know\
    \ what sorts and levels of security are\n   available from the raw materials layer.\
    \  This is true of both any\n   operating system support as well as transmission.\n\
    \   * Cost: If there is to be usage charging at other than fixed flat\n   rates,\
    \ it will be important for applications and users to understand\n   what those\
    \ costs or at least estimates of them will be.\n   * Policy routing: If it will\
    \ be important for transport services to\n   support policy routing, it will be\
    \ important for users of the\n   transport services to identify into which policy\
    \ classes they might\n   fall.\n"
- title: 4.5. Recommendations
  contents:
  - "4.5. Recommendations\n   This group has two categories of recommendations.  One\
    \ is those\n   services in the wholesale layer that will both be especially useful\n\
    \   and readily achieved because work is soon to be or already underway.\n   The\
    \ other set of recommendations was a three item rank ordering of\n   services\
    \ that are most important for the lower layer to provide to\n   the wholesale\
    \ layer.\n   Within the wholesale layer, the first services that should be\n \
    \  provided are:\n        * Object retrieval,\n        * Name resolution,\n  \
    \      * Caching and replication.\n   In addition, the group rank ordered three\
    \ areas in which there would\n   be quick payoff if the raw materials layer could\
    \ provide them.  They\n   are:\n        1. Connectivity\n        2. Bandwidth,\
    \ latency, and reliability or service envelope\n        3. Security constraints\
    \ on communication and transactions\n"
- title: '5. Group 2B Report: Components of an Internet Information Architecture'
  contents:
  - "5. Group 2B Report: Components of an Internet Information Architecture\n   Cecilia\
    \ Preston, Chris Weider, Christian Huitema, Cliff Lynch, John\n   Romkey, Joyce\
    \ Reynolds, Larry Masinter, Mitra, Jill Foster\n   Group 2B discussed various\
    \ aspects of problems in the Internet\n   Information Infrastructure, thinking\
    \ about recommendations to the\n   IESG to focus on particular areas, and also\
    \ paying attention to some\n   of the philosophical and economic backgrounds to\
    \ some of the\n   problems. Economics can dictate some points of architecture:\
    \ one can\n   see economically why a publisher might bear the burden of the costs\n\
    \   of publishing, or a consumer might bear the burden of costs\n   associated\
    \ with consumption, but not how some free-floating third\n   party would necessarily\
    \ bear the costs of providing services (such as\n   third-party translators).\n\
    \   The group discussed the following topics:\n   access(URL)\n   gateways\n \
    \  URN resolution\n   definitions\n   updates\n   service location\n   cache &\
    \ replication\n   security & authentication\n   payments, charging\n   presentation\n\
    \   search & index\n   metainformation\n   boot service\n   general computation\n"
- title: 5.1 URNs
  contents:
  - "5.1 URNs\n   There are several issues in the use of Uniform Resource Names and\n\
    \   Uniform Resource Locators. URN resolution is a database lookup that\n   returns\
    \ the URLs associated with a URN. The architecture must take\n   into account\
    \ not only how the lookup is performed, but how the\n   database is maintained.\
    \ Both the lookup problem and the update\n   problem must be solved at the same\
    \ time to allow deployment of URNs.\n   There are at least two problems in human\
    \ interaction with unique\n   names. First, the notion of a unique name is a fallacy.\
    \ Unique naming\n   cannot be enforced. Names may be forged or may simply be duplicated\n\
    \   due to human error. The architecture must accept this observation and\n  \
    \ still operate in the face of it. Designing for global uniqueness, but\n   not\
    \ requiring it, was adequate. Errors based on names not being\n   unique are likely\
    \ to be insignificant compared to other errors.\n   Also, people frequently make\
    \ assertions and assumptions about names\n   rather than the documents that are\
    \ being named. Making assertions\n   about names is working at the wrong level\
    \ of indirection. Making\n   assumptions about names, such as determining the\
    \ contents of the\n   named object from the syntax of the name, can lead to nasty\n\
    \   surprises.\n   Having a single, unified naming system is vital. While it is\
    \ healthy\n   to have multiple competing forms of other aspects of the information\n\
    \   architecture, the naming system is what ties it all together. There\n   must\
    \ be only one naming system. If there is more than one, it may not\n   be possible\
    \ to compare names or to lookup locations based on names,\n   and we will continue\
    \ (to our detriment) to use locators rather than\n   names.\n"
- title: 5.2 Global Service Location
  contents:
  - "5.2 Global Service Location\n   The IANA has become the central switch point\
    \ for service\n   identification.  and recommended that numbers that are formally\n\
    \   defined and kept in documents for use in distributed information\n   systems\
    \ (for instance, Assigned Numbers) should also be distributed\n   online in some\
    \ kind of database for use by applications. This\n   distribution requires both\
    \ an access method (perhaps multiple access\n   methods) and an update method.\n"
- title: 5.3 Security
  contents:
  - "5.3 Security\n   Issues involving security arose over and over again. Security\n\
    \   includes things like validation of authority, confidentiality,\n   integrity\
    \ of data, integrity of services, access control. The group\n   agreed that, although\
    \ often overlooked, confidentiality is important,\n   and, more strongly: anonymity\
    \ is important. It should be possible to\n   access documents or objects without\
    \ the architecture requiring you to\n   leave digital fingerprints all over the\
    \ place.\n   Security must occur on an end-to-end basis. Documents or objects\
    \ used\n   on the Internet may not only traverse the Internet. Relying on\n  \
    \ security mechanisms in the underlying protocol suite does not\n   necessarily\
    \ provide end-to-end authentication or confidentiality.\n   Currently lower layer\
    \ security is ill-defined and widely\n   unimplemented. Designers building information\
    \ applications atop the\n   Internet currently receive little guidance in how\
    \ to design security\n   features into their applications, leading to weak ad\
    \ hoc or\n   nonexistent security in new applications. Designers are also unclear\n\
    \   as to how to deal with the \"security considerations\" section that is\n \
    \  mandatory in RFCs, and often fill them with boilerplate text.\n   Furthermore,\
    \ retrofitting security into existing architectures does\n   not work well. The\
    \ best systems are built considering security from\n   the very beginning. Some\
    \ systems are being designed that, for\n   instance, have no place for a digital\
    \ signature to authenticate the\n   data they pass.  These issues apply to data\
    \ management as well.\n   The group makes the following recommendations to the\
    \ IESG regarding\n   security:\n   A. Develop and communicate a security model\
    \ usable by designers of\n   information applications - current models are not\
    \ considered usable.\n   B. RFC authors should be given advice on what security\
    \ considerations\n   need to be outlined and how to write them. The IESG security\
    \ area\n   should prepare guidelines for writing security considerations.\n  \
    \ C. Proposed Standards should not be accepted by the IESG unless they\n   really\
    \ consider security. This will require that recommendations A\n   and B have been\
    \ implemented and that the guidelines have received\n   enough visibility to reasonably\
    \ expect authors to know of their\n   existence.\n   D. Develop security modules\
    \ usable by the implementors of information\n   clients and servers - reusable\
    \ across many different, heterogeneous\n   applications and platforms.\n   E.\
    \ Make clear what security services you can expect from the lower\n   layers.\n\
    \   F. Make sure that the key distribution infrastructure is reviewed for\n  \
    \ usability by information applications.\n"
- title: 5.4 Search and Index
  contents:
  - "5.4 Search and Index\n   Searching is looking through directories that point\
    \ to information.\n   Indexing is scanning information to create directories.\
    \ A \"unified\n   directory\" is the result of combining several indices.\n  \
    \ Indexing is currently done on the Internet via many mechanisms. Given\n   the\
    \ current ad hoc nature of the indexing, information is frequently\n   indexed\
    \ multiple times. This is wasteful, but due to the current\n   economics of the\
    \ Internet, it tends not to cost more money. If the\n   Internet (or parts of\
    \ thereof) transitions to usage based charging,\n   it may cost the information\
    \ provider too much to allow the\n   information to be indexed. In general, the\
    \ provider should have\n   control over how the information they control is indexed.\n\
    \   Above all, the architecture should not encourage a situation where\n   information\
    \ is normally not indexed. It should encourage the\n   collection of indexing\
    \ data only a single time. Having a local\n   computation of a summary which is\
    \ sent to a search/index server is\n   vastly preferable to having that server\
    \ \"walk the net\" to discover\n   information to index.\n   Indexing and search\
    \ techniques are quite varied. It is quite likely\n   that index and search are\
    \ too close to general computation to try to\n   standardize on a single protocol\
    \ for either. Instead, it is important\n   that the architecture allow multiple\
    \ search techniques. There are\n   currently certain types of indices that can\
    \ only be generated by\n   humans because of their level of semantic content.\
    \ There are large\n   differences in the quality and usability of indices that\
    \ are\n   machine-generated vs. human generated.\n   Unified directories tend\
    \ to combine indexing results from quite\n   different techniques. The architecture\
    \ should constrain indexing so\n   that it remains possible to merge the results\
    \ of two searches done by\n   different protocols or indexing systems. Returning\
    \ information in\n   standard formats such as URNs can help this problem.\n  \
    \ Vocabulary issues in search and index are very difficult. The library\n   and\
    \ information services communities do not necessarily use\n   vocabulary that\
    \ is consistent with the IETF community, which can lead\n   to difficult misunderstandings.\n\
    \   \"Searching the Internet\" is an inappropriate attempt to categorize\n   the\
    \ information you're attempting to search. Instead, we search\n   certain public\
    \ spaces on the Internet. The concept of public space\n   vs. private space on\
    \ the Internet deserves further investigation.\n   Indexing can run afoul of access\
    \ control considerations. Access\n   control must be done at the object, but access\
    \ control information\n   should be propagated through indices as well. The index\
    \ should be\n   able to say \"you're not allowed to ask that\" rather than the\
    \ user\n   attempting to retrieve the object and being denied.\n   An architectural\
    \ point was raised that an index query should return\n   the same result independent\
    \ of who is asking. This is an important\n   notion in the Domain Name System.\
    \ This is inconsistent with some\n   real-world indexing (for instance, corporate\
    \ record management\n   systems) which doesn't want to admit that some documents\
    \ exist if\n   you're not allowed to read them.\n"
- title: 5.5 Miscellaneous
  contents:
  - "5.5 Miscellaneous\n   Electronic mail, netnews, FTP and the web are frequently\
    \ used to\n   access information on the net today. Each protocol seems to provide\
    \ a\n   consistent view of the information on the Internet. In addition, the\n\
    \   recent popularity of multi-protocol clients such as Mosaic seem to\n   imply\
    \ that the information content of the Internet is uniformly\n   retrievable and\
    \ manageable.  This perception is misleading because\n   most protocols are used\
    \ for other applications than they were\n   originally designed for. In addition,\
    \ Telnet, which has no concept of\n   information retrieval and management, is\
    \ often used to access\n   information as well, for example in DIALOG and card\
    \ file accesses.\n   Since each protocol has different access and management capabilities,\n\
    \   the inconsistencies show up in erratic search and retrieval results,\n   puzzling\
    \ error messages, and a basic lack of standard techniques for\n   dealing with\
    \ information. A consistent underlying information\n   architecture will go a\
    \ long way towards alleviating these problems.\n   As the information architecture\
    \ develops we should reconsider the\n   electronic mail and netnews architecture\
    \ in terms of the new\n   architecture.\n   The group noted that there have been\
    \ difficulties in scheduling joint\n   working group meetings and recommends that\
    \ there be a clearly defined\n   process inside the IETF to facilitate scheduling\
    \ such meetings.\n"
- title: 6. Conclusions and Recommendations
  contents:
  - "6. Conclusions and Recommendations\n   The workshop provided an opportunity for\
    \ ongoing conversations about\n   the architecture to continue and also provided\
    \ space for focused\n   examination of some issues and for some new voices and\
    \ experience\n   from other areas of Internet growth to participate in the\n \
    \  architectural process.\n   Part of the conclusion of the workshop is a set\
    \ of recommendations to\n   the IESG and IETF community.\n   Recommendations on\
    \ research/implementation directions:\n   1. Caching and replication are important\
    \ and overlooked pieces of\n   Internet middleware. We should do something about\
    \ it as soon as\n   possible, perhaps by defining an architecture and service\
    \ model for\n   common implementation.\n   2. Within the 'wholesale' layer, i.e.\
    \ within the layer which provides\n   a consistent view of the information resources\
    \ available on the\n   Internet, the first services that should be provided are:\n\
    \        * Object retrieval,\n        * Name resolution,\n        * Caching and\
    \ replication.\n   3. There would be quick payoff if the raw materials layer,\
    \ i.e. the\n   layer in which information resources are physically transmitted\
    \ to\n   computers, could provide the following services:\n        * Connectivity\n\
    \        * Bandwidth, latency, and reliability or  a service envelope\n      \
    \  * Security constraints on communication and transactions\n   4. Develop security\
    \ modules usable by the implementors of information\n   clients and servers -\
    \ reusable across many different, heterogeneous\n   applications and platforms\n"
- title: Recommendations to the IESG, IETF, and IANA
  contents:
  - "Recommendations to the IESG, IETF, and IANA\n   1. Numbers that are formally\
    \ defined and kept in documents in\n   distributed information systems (for instance,\
    \ Assigned Numbers)\n   should be available in some kind of database for use by\
    \ applications.\n   2. Develop and communicate a security model usable by designers\
    \ of\n   information applications - current models are not considered usable\n\
    \   or are not widely accepted on the Internet.\n   3. RFC authors should be given\
    \ advice on how security considerations\n   need to be written. The IESG security\
    \ area should prepare guidelines\n   for writing security considerations.\n  \
    \ 4. Proposed Standards should not be accepted by the IESG unless they\n   really\
    \ consider security. This will require recommendations 2 and 3\n   to be implemented\
    \ first.\n   5. Make clear what security services you can expect from the lower\n\
    \   layers.\n   6. Make sure that the key distribution infrastructure is reviewed\
    \ for\n   usability by information applications.\n   7. There needs to be a process\
    \ inside the IETF for scheduling a joint\n   meeting between two working groups\
    \ - for example, so that the key\n   distribution WG can meet jointly with IIIR.\n"
- title: APPENDIX A - Workshop Organization
  contents:
  - "APPENDIX A - Workshop Organization\n   The workshop was held at MCI's facility\
    \ in Tyson Corners, Virginia.\n   The workshop organizers and attendees wish to\
    \ thank MCI for the use\n   of their facilities to host the workshop.\n   All\
    \ attendees met in joint session for the first half of October 12.\n   They then\
    \ split into three groups. The first group considered the\n   \"distributed database\"\
    \ problem which has arisen over and over again\n   in the design of parts of the\
    \ Internet. The two other groups met to\n   consider a list of issues pertaining\
    \ to the information\n   infrastructure. The groups ran independently until the\
    \ morning of\n   October 14, when they met again in joint session.\n   The following\
    \ people attended the workshop:\n   Abel Weinrib            abel@bellcore.com\n\
    \   Barry Leiner            BLeiner@ARPA.MIL\n   Cecilia Preston         cpreston@info.berkeley.edu\n\
    \   Chris Weider            clw@bunyip.com\n   Christian Huitema       Christian.Huitema@SOPHIA.INRIA.FR\n\
    \   Cliff Lynch             calur@uccmvsa.ucop.edu\n   Clifford Neuman       \
    \  bcn@isi.edu\n   Dan LaLiberte           liberte@ncsa.uiuc.edu\n   Dave Sincoskie\
    \          sincos@THUMPER.BELLCORE.COM\n   Elise Gerich            epg@MERIT.EDU\n\
    \   Erik Huizer             Erik.Huizer@SURFnet.nl\n   Jill Foster           \
    \  Jill.Foster@newcastle.ac.uk\n   John Curran             jcurran@near.net\n\
    \   John Klensin            klensin@infoods.mit.edu\n   John Romkey          \
    \   romkey@asylum.sf.ca.us\n   Joyce Reynolds          jkrey@isi.edu\n   Karen\
    \ Sollins           sollins@lcs.mit.edu\n   Larry Masinter          masinter@parc.xerox.com\n\
    \   Lixia Zhang             LIXIA@PARC.XEROX.COM\n   Mark McCahill           mpm@boombox.micro.umn.edu\n\
    \   Michael Mealling        Michael.Mealling@oit.gatech.edu\n   Mitchell Charity\
    \        mcharity@lcs.mit.edu\n   Mike Schwartz           schwartz@cs.colorado.edu\n\
    \   Mike St. Johns          stjohns@DARPA.MIL\n   Mitra                   mitra@pandora.sf.ca.us\n\
    \   Paul Mockapetris        pvm@zephyr.isi.edu\n   Steve Crocker           Crocker@TIS.COM\n\
    \   Tim Berners-Lee         tbl@info.cern.ch\n   Ton Verschuren          Ton.Verschuren@surfnet.nl\n\
    \   Yakov Rekhter           yakov@WATSON.IBM.COM\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   This memo discusses certain aspects of security and\
    \ the information\n   infrastructure. It contains general recommendations about\
    \ security\n   enhancements required by information applications on the Internet.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mark McCahill\n   University of Minnesota\n   room 190\
    \ Shepherd Labs\n   100 Union Street SE\n   Minneapolis, MN 55455\n   EMail: mpm@boombox.micro.umn.edu\n\
    \   John Romkey [Editor]\n   1770 Massachusetts Ave. #331\n   Cambridge, MA  02140\n\
    \   EMail: romkey@apocalypse.org\n   Michael F.  Schwartz\n   Department of Computer\
    \ Science\n   University of Colorado\n   Boulder, CO 80309-0430\n   EMail: schwartz@cs.colorado.edu\n\
    \   Karen Sollins\n   MIT Laboratory for Computer Science\n   545 Technology Square\n\
    \   Cambridge, MA 02139-1986\n   EMail: sollins@lcs.mit.edu\n   Ton Verschuren\n\
    \   SURFNet\n   P.O. Box 19035\n   3501 DA Utrecht\n   The Netherlands\n   EMail:\
    \ Ton.Verschuren@surfnet.nl\n   Chris Weider\n   Bunyip Information Systems\n\
    \   310 St. Catherine St. West\n   Suite 300\n   Montreal, PQ H2A 2X1\n   CANADA\n\
    \   EMail: clw@bunyip.com\n"
