- title: __initial_text__
  contents:
  - '            The Application Exchange (APEX) Presence Service

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes the Application Exchange (APEX) presence service,\n\
    \   addressed as the well-known endpoint \"apex=presence\".  The presence\n  \
    \ service is used to manage presence information for APEX endpoints.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Use and Management of Presence Information . . . . .\
    \ . . . . .  3\n   2.1 Update of Presence Information . . . . . . . . . . . .\
    \ . . . .  3\n   2.2 Distribution of Presence Information . . . . . . . . . .\
    \ . . .  4\n   2.3 Distribution of Watcher Information  . . . . . . . . . . .\
    \ . .  7\n   3.  Format of Presence Entries . . . . . . . . . . . . . . . . .\
    \ . 10\n   4.  The Presence Service . . . . . . . . . . . . . . . . . . . . .\
    \ 11\n   4.1 Use of XML and MIME  . . . . . . . . . . . . . . . . . . . . . 12\n\
    \   4.2 The Subscribe Operation  . . . . . . . . . . . . . . . . . . . 13\n  \
    \ 4.3 The Watch Operation  . . . . . . . . . . . . . . . . . . . . . 14\n   4.4\
    \ The Publish Operation  . . . . . . . . . . . . . . . . . . . . 15\n   4.5 The\
    \ Terminate Operation  . . . . . . . . . . . . . . . . . . . 17\n   4.6 The Notify\
    \ Operation . . . . . . . . . . . . . . . . . . . . . 17\n   4.7 The Reply Operation\
    \  . . . . . . . . . . . . . . . . . . . . . 18\n   5.  Registration: The Presence\
    \ Service . . . . . . . . . . . . . . 18\n   6.  The Presence Service DTD . .\
    \ . . . . . . . . . . . . . . . . . 18\n   7.  Security Considerations  . . .\
    \ . . . . . . . . . . . . . . . . 21\n       References . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 21\n       Acknowledgements . . . . . . . . .\
    \ . . . . . . . . . . . . . . 22\n       Authors' Addresses . . . . . . . . .\
    \ . . . . . . . . . . . . . 22\n       Full Copyright Statement . . . . . . .\
    \ . . . . . . . . . . . . 23\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This memo describes a presence service that is built upon\
    \ the APEX\n   [1] \"relaying mesh\".  The APEX presence service is used to manage\n\
    \   presence information for APEX endpoints.\n   APEX, at its core, provides a\
    \ best-effort datagram service.  Within\n   an administrative domain, all relays\
    \ must be able to handle messages\n   for any endpoint within that domain.  APEX\
    \ services are logically\n   defined as endpoints, but given their ubiquitous\
    \ semantics they do\n   not necessarily need to be associated with a single physical\n\
    \   endpoint.  As such, they may be provisioned co-resident with each\n   relay\
    \ within an administrative domain, even though they are logically\n   provided\
    \ on top of the relaying mesh, i.e.,\n      +----------+     +----------+    +----------+\
    \    +---------+\n      |   APEX   |     |   APEX   |    |   APEX   |    |   \
    \      |\n      |  access  |     | presence |    |  report  |    |   ...   |\n\
    \      | service  |     |  service |    | service  |    |         |\n      +----------+\
    \     +----------+    +----------+    +---------+\n           |              \
    \  |               |               |\n           |                |          \
    \     |               |\n   +----------------------------------------------------------------+\n\
    \   |                                                                |\n   | \
    \                           APEX core                           |\n   |      \
    \                                                          |\n   +----------------------------------------------------------------+\n\
    \   That is, applications communicate with an APEX service by exchanging\n   data\
    \ with a \"well-known endpoint\" (WKE).\n   APEX applications communicate with\
    \ the presence service by exchanging\n   data with the well-known endpoint \"\
    apex=presence\" in the\n   corresponding administrative domain, e.g.,\n   \"apex=presence@example.com\"\
    \ is the endpoint associated with the\n   presence service in the \"example.com\"\
    \ administrative domain.\n   Note that within a single administrative domain,\
    \ the presence service\n   makes use of the APEX access [3] service in order to\
    \ determine if an\n   originator is allowed to view or manage presence information.\n"
- title: 2. Use and Management of Presence Information
  contents:
  - "2. Use and Management of Presence Information\n   Management of presence information\
    \ falls into three categories:\n   o  applications may update the presence information\
    \ associated with\n      an endpoint;\n   o  applications may subscribe to receive\
    \ presence information\n      associated with an endpoint; and,\n   o  applications\
    \ may find out who is subscribed to receive presence\n      information.\n   Each\
    \ is now described in turn.\n"
- title: 2.1 Update of Presence Information
  contents:
  - "2.1 Update of Presence Information\n   When an application wants to modify the\
    \ presence information\n   associated with an endpoint, it sends a publish operation\
    \ to the\n   service, e.g.,\n       +-------+                  +-------+\n   \
    \    |       | -- data -------> |       |\n       | appl. |                  |\
    \ relay |\n       |       | <--------- ok -- |       |\n       +-------+     \
    \             +-------+\n     C: <data content='#Content'>\n            <originator\
    \ identity='fred@example.com' />\n            <recipient identity='apex=presence@example.com'\
    \ />\n            <data-content Name='Content'>\n                <publish publisher='fred@example.com'\
    \ transID='1'\n                         timeStamp='2000-05-14T13:30:00-08:00'>\n\
    \                    <presence publisher='fred@example.com'\n                \
    \           lastUpdate='2000-05-14T13:02:00-08:00'\n                         \
    \  publisherInfo='http://www.example.com/fred/'>\n                        <tuple\n\
    \                          destination='apex:fred/appl=im@example.com'\n     \
    \                     availableUntil='2000-05-14T14:02:00-08:00' />\n        \
    \                <tuple destination='mailto:fred@flintstone.com'\n           \
    \               availableUntil='2525-12-31T23:59:59-08:00' />\n              \
    \      </presence>\n                </publish>\n            </data-content>\n\
    \        </data>\n     S: <ok />\n   Note that this example uses the \"subaddress\"\
    \ convention specified in\n   Section 2.2 of [1] (e.g., \"fred/appl=im\") to denote\
    \ multiplexing of\n   traffic for a particular endpoint.  Of course, popular applications\n\
    \   may have their own URI method assigned to them (e.g.,\n   \"im:fred@example.com\"\
    ).\n   The service immediately responds with a reply operation containing\n  \
    \ the same transaction-identifier, e.g.,\n                                  +-------+\
    \                  +-------+\n                                  |       | <-------\
    \ data -- |       |\n                                  | relay |             \
    \     | pres. |\n                                  |       | -- ok --------->\
    \ |  svc. |\n                                  +-------+                  +-------+\n\
    \     C: <data content='#Content'>\n            <originator identity='apex=presence@example.com'\
    \ />\n            <recipient identity='fred@example.com' />\n            <data-content\
    \ Name='Content'>\n                <reply code='250' transID='1' />\n        \
    \    </data-content>\n        </data>\n     S: <ok />\n"
- title: 2.2 Distribution of Presence Information
  contents:
  - "2.2 Distribution of Presence Information\n   When an application wants to (periodically)\
    \ receive the presence\n   information associated with an endpoint, it sends a\
    \ subscribe\n   operation to the service, e.g.,\n       +-------+            \
    \      +-------+\n       |       | -- data -------> |       |\n       | appl.\
    \ |                  | relay |\n       |       | <--------- ok -- |       |\n\
    \       +-------+                  +-------+\n     C: <data content='#Content'>\n\
    \            <originator identity='wilma@example.com' />\n            <recipient\
    \ identity='apex=presence@example.com' />\n            <data-content Name='Content'>\n\
    \                <subscribe publisher='fred@example.com' duration='86400'\n  \
    \                         transID='100' />\n            </data-content>\n    \
    \    </data>\n     S: <ok />\n   The service immediately responds with a publish\
    \ operation containing\n   the same transaction-identifier, e.g.,\n          \
    \                        +-------+                  +-------+\n              \
    \                    |       | <------- data -- |       |\n                  \
    \                | relay |                  | pres. |\n                      \
    \            |       | -- ok ---------> |  svc. |\n                          \
    \        +-------+                  +-------+\n     C: <data content='#Content'>\n\
    \            <originator identity='apex=presence@example.com' />\n           \
    \ <recipient identity='wilma@example.com' />\n            <data-content Name='Content'>\n\
    \                <publish publisher='fred@example.com' transID='100'\n       \
    \                  timeStamp='2000-05-14T13:30:00-08:00'>\n                  \
    \  <presence publisher='fred@example.com'\n                           lastUpdate='2000-05-14T13:02:00-08:00'\n\
    \                           publisherInfo='http://www.example.com/fred/'>\n  \
    \                      <tuple\n                          destination='apex:fred/appl=im@example.com'\n\
    \                          availableUntil='2000-05-14T14:02:00-08:00' />\n   \
    \                 </presence>\n                </publish>\n            </data-content>\n\
    \        </data>\n     S: <ok />\n   Subsequently, for up to the specified \"\
    duration\", the service sends\n   new publish operations whenever there are any\
    \ changes to the\n   endpoint's presence information.  If the \"duration\" is\
    \ zero-valued, a\n   one time poll of the presence information is achieved; otherwise,\
    \ at\n   the end of the \"duration\", a terminate operation is sent.\n   Note\
    \ that Step 5 of Section 4.4 requires that the \"lastUpdate\"\n   attribute of\
    \ a presence entry be supplied in order to update that\n   entry; accordingly,\
    \ applications must successfully retrieve a\n   presence entry prior to trying\
    \ to update that entry.  This is usually\n   accomplished by subscribing with\
    \ a zero-valued duration.\n   (Regardless, administrators should ensure that applications\n\
    \   authorized to update a presence entry are also authorized to retrieve\n  \
    \ that entry.)\n   Either the subscriber or the service may cancel a subscription\
    \ by\n   sending a terminate operation, e.g.,\n       +-------+              \
    \    +-------+\n       |       | -- data -------> |       |\n       | appl. |\
    \                  | relay |\n       |       | <--------- ok -- |       |\n  \
    \     +-------+                  +-------+\n     C: <data content='#Content'>\n\
    \            <originator identity='wilma@example.com' />\n            <recipient\
    \ identity='apex=presence@example.com' />\n            <data-content Name='Content'>\n\
    \                <terminate transID='100' />\n            </data-content>\n  \
    \      </data>\n     S: <ok />\n                                  +-------+  \
    \                +-------+\n                                  |       | <-------\
    \ data -- |       |\n                                  | relay |             \
    \     | pres. |\n                                  |       | -- ok --------->\
    \ |  svc. |\n                                  +-------+                  +-------+\n\
    \     C: <data content='#Content'>\n            <originator identity='apex=presence@example.com'\
    \ />\n            <recipient identity='wilma@example.com' />\n            <data-content\
    \ Name='Content'>\n                <reply code='250' transID='100' />\n      \
    \      </data-content>\n        </data>\n     S: <ok />\n   or\n             \
    \                     +-------+                  +-------+\n                 \
    \                 |       | <------- data -- |       |\n                     \
    \             | relay |                  | pres. |\n                         \
    \         |       | -- ok ---------> |  svc. |\n                             \
    \     +-------+                  +-------+\n     C: <data content='#Content'>\n\
    \            <originator identity='apex=presence@example.com' />\n           \
    \ <recipient identity='wilma@example.com' />\n            <data-content Name='Content'>\n\
    \                <terminate transID='100' />\n            </data-content>\n  \
    \      </data>\n     S: <ok />\n"
- title: 2.3 Distribution of Watcher Information
  contents:
  - "2.3 Distribution of Watcher Information\n   When an application wants to (periodically)\
    \ receive notices about\n   endpoints that are subscribed to receive presence\
    \ information, it\n   sends a watch operation to the service, e.g.,\n       +-------+\
    \                  +-------+\n       |       | -- data -------> |       |\n  \
    \     | appl. |                  | relay |\n       |       | <--------- ok --\
    \ |       |\n       +-------+                  +-------+\n     C: <data content='#Content'>\n\
    \            <originator identity='fred@example.com' />\n            <recipient\
    \ identity='apex=presence@example.com' />\n            <data-content Name='Content'>\n\
    \                <watch publisher='fred@example.com' duration='86400'\n      \
    \                 transID='2' />\n            </data-content>\n        </data>\n\
    \     S: <ok />\n   The service immediately responds with a reply operation containing\n\
    \   the same transaction-identifier, e.g.,\n                                 \
    \ +-------+                  +-------+\n                                  |  \
    \     | <------- data -- |       |\n                                  | relay\
    \ |                  | pres. |\n                                  |       | --\
    \ ok ---------> |  svc. |\n                                  +-------+       \
    \           +-------+\n     C: <data content='#Content'>\n            <originator\
    \ identity='apex=presence@example.com' />\n            <recipient identity='fred@example.com'\
    \ />\n            <data-content Name='Content'\n                <reply code='250'\
    \ transID='2' />\n            </data-content>\n        </data>\n     S: <ok />\n\
    \   For each current subscriber, the service immediately sends a notify\n   operation\
    \ containing the same transaction-identifier, e.g.,\n                        \
    \          +-------+                  +-------+\n                            \
    \      |       | <------- data -- |       |\n                                \
    \  | relay |                  | pres. |\n                                  | \
    \      | -- ok ---------> |  svc. |\n                                  +-------+\
    \                  +-------+\n     C: <data content='#Content'>\n            <originator\
    \ identity='apex=presence@example.com' />\n            <recipient identity='fred@example.com'\
    \ />\n            <data-content Name='Content'>\n                <notify subscriber='wilma@example.com'\
    \ transID='2'\n                        duration='86000' action='subscribe' />\n\
    \            </data-content>\n        </data>\n     S: <ok />\n   Subsequently,\
    \ for up to the specified \"duration\", the service sends\n   new notify operations\
    \ whenever an application subscribes successfully\n   or a subscription is terminated.\
    \  If the \"duration\" is zero-valued, a\n   one time poll of the watcher information\
    \ is achieved; otherwise, at\n   the end of the \"duration\", a terminate operation\
    \ is sent.\n   Either the watcher or the service may cancel the request by sending\
    \ a\n   terminate operation, e.g.,\n       +-------+                  +-------+\n\
    \       |       | -- data -------> |       |\n       | appl. |               \
    \   | relay |\n       |       | <--------- ok -- |       |\n       +-------+ \
    \                 +-------+\n     C: <data content='#Content'>\n            <originator\
    \ identity='fred@example.com' />\n            <recipient identity='apex=presence@example.com'\
    \ />\n            <data-content Name='Content'>\n                <terminate transID='2'\
    \ />\n            </data-content>\n        </data>\n     S: <ok />\n         \
    \                         +-------+                  +-------+\n             \
    \                     |       | <------- data -- |       |\n                 \
    \                 | relay |                  | pres. |\n                     \
    \             |       | -- ok ---------> |  svc. |\n                         \
    \         +-------+                  +-------+\n     C: <data content='#Content'>\n\
    \            <originator identity='apex=presence@example.com' />\n           \
    \ <recipient identity='fred@example.com' />\n            <data-content Name='Content'>\n\
    \                <reply code='250' transID='2' />\n             </data-content>\n\
    \        </data>\n     S: <ok />\n   or\n                                  +-------+\
    \                  +-------+\n                                  |       | <-------\
    \ data -- |       |\n                                  | relay |             \
    \     | pres. |\n                                  |       | -- ok --------->\
    \ |  svc. |\n                                  +-------+                  +-------+\n\
    \     C: <data content='#Content'>\n            <originator identity='apex=presence@example.com'\
    \ />\n            <recipient identity='fred@example.com' />\n            <data-content\
    \ Name='Content'>\n                <terminate transID='2' />\n             </data-content>\n\
    \        </data>\n     S: <ok />\n"
- title: 3. Format of Presence Entries
  contents:
  - "3. Format of Presence Entries\n   Each administrative domain is responsible for\
    \ maintaining a \"presence\n   entry\" for each of its endpoints (regardless of\
    \ whether those\n   endpoints are currently attached to the relaying mesh).\n\
    \   Section 6 defines the syntax for presence entries.  Each presence\n   entry\
    \ has a \"publisher\" attribute, a \"lastUpdate\" attribute, a\n   \"publisherInfo\"\
    \ attribute, and contains one or more \"tuple\" elements:\n   o  the \"publisher\"\
    \ attribute specifies the endpoint associated with\n      the presence entry;\n\
    \   o  the \"lastUpdate\" attribute specifies the date and time that the\n   \
    \   service last updated the presence entry;\n   o  the \"publisherInfo\" attribute\
    \ specifies arbitrary information\n      about the publisher (using a URI); and,\n\
    \   o  each \"tuple\" element specifies information about an entity\n      associated\
    \ with the endpoint.\n   Each \"tuple\" element has a \"destination\" attribute,\
    \ an\n   \"availableUntil\" attribute, a \"tupleInfo\" attribute, and contains\n\
    \   zero or more \"capability\" elements:\n   o  the \"destination\" attribute\
    \ identifies the entity as a URI (e.g.,\n      \"apex:fred/appl=im@example.com\"\
    \ or \"mailto:fred@flintstone.com\");\n   o  the \"availableUntil\" attribute\
    \ specifies the latest date and time\n      that the entity is capable of receiving\
    \ messages;\n   o  the \"tupleInfo\" attribute specifies arbitrary information\
    \ about\n      the entity (using a URI); and,\n   o  each \"capability\" element\
    \ contains a specification as to the kinds\n      of content the entity is capable\
    \ of receiving.\n   Each \"capability\" element contains arbitrary character data\
    \ formatted\n   according to the standard indicated in the element's \"baseline\"\
    \n   attribute.\n"
- title: 4. The Presence Service
  contents:
  - "4. The Presence Service\n   Section 5 contains the APEX service registration\
    \ for the presence\n   service:\n   o  Within an administrative domain, the service\
    \ is addressed using\n      the well-known endpoint of \"apex=presence\".\n  \
    \ o  Section 6 defines the syntax of the operations exchanged with the\n     \
    \ service.\n   o  A consumer of the service initiates communications by sending\
    \ data\n      containing the subscribe, watch, or publish operation.\n   o  In\
    \ addition to replying to these operations, the service may also\n      initiate\
    \ communications by sending data containing the terminate,\n      publish, or\
    \ notify operations.\n   An implementation of the service must maintain information\
    \ about both\n   presence entries and in-progress operations in persistent storage.\n\
    \   Consult Section 6.1.1 of [1] for a discussion on the properties of\n   long-lived\
    \ transaction-identifiers.\n"
- title: 4.1 Use of XML and MIME
  contents:
  - "4.1 Use of XML and MIME\n   Section 4.1 of [1] describes how arbitrary MIME content\
    \ is exchanged\n   as a BEEP [2] payload.  For example, to transmit:\n       <data\
    \ content='...'>\n            <originator identity='apex=presence@example.com'\
    \ />\n           <recipient identity='fred@example.com' />\n       </data>\n \
    \  where \"...\" refers to: <reply code='250' transID='1' />\n   then the corresponding\
    \ BEEP message might look like this:\n       C: MSG 1 1 . 42 1234\n       C: Content-Type:\
    \ multipart/related; boundary=\"boundary\";\n       C:               start=\"\
    <1@example.com>\";\n       C:               type=\"application/beep+xml\"\n  \
    \     C:\n       C: --boundary\n       C: Content-Type: application/beep+xml\n\
    \       C: Content-ID: <1@example.com>\n       C:\n       C: <data content='cid:2@example.com'>\n\
    \       C:     <originator identity='fred@example.com' />\n       C:     <recipient\
    \ identity='apex=presence@example.com' />\n       C: </data>\n       C: --boundary\n\
    \       C: Content-Type: application/beep+xml\n       C: Content-ID: <2@example.com>\n\
    \       C:\n       C: <reply code='250' transID='1' />\n       C: --boundary--\n\
    \       C: END\n   or this:\n       C: MSG 1 1 . 42 1234\n       C: Content-Type:\
    \ application/beep+xml\n       C:\n       C: <data content='#Content'>\n     \
    \  C:     <originator identity='fred@example.com' />\n       C:     <recipient\
    \ identity='apex=presence@example.com' />\n       C:     <data-content Name='Content'>\n\
    \       C:         <reply code='250' transID='1' />\n       C:     </data-content>\n\
    \       C: </data>\n       C: END\n"
- title: 4.2 The Subscribe Operation
  contents:
  - "4.2 The Subscribe Operation\n   When an application wants to (periodically) receive\
    \ the presence\n   information associated with an endpoint, it sends a \"subscribe\"\
    \n   element to the service.\n   The \"subscribe\" element has a \"publisher\"\
    \ attribute, a \"duration\"\n   attribute, a \"transID\" attribute, and no content:\n\
    \   o  the \"publisher\" attribute specifies the endpoint associated with\n  \
    \    the presence entry;\n   o  the \"transID\" attribute specifies the transaction-identifier\n\
    \      associated with this operation; and,\n   o  the \"duration\" attribute\
    \ specifies the maximum number of seconds\n      for which the originator is interested\
    \ in receiving updated\n      presence information.\n   When the service receives\
    \ a \"subscribe\" element, we refer to the\n   \"publisher\" attribute of that\
    \ element as the \"subject\", and the\n   service performs these steps:\n   1.\
    \ If the subject is outside of this administrative domain, a \"reply\"\n     \
    \ element having code 553 is sent to the originator.\n   2. If the subject does\
    \ not refer to a valid endpoint, a \"reply\"\n      element having code 550 is\
    \ sent to the originator.\n   3. If the subject's access entry does not contain\
    \ a\n      \"presence:subscribe\" token for the originator, a \"reply\" element\n\
    \      having code 537 is sent to the originator.\n   4. If the originator already\
    \ has an in-progress subscribe operation\n      for the subject, then the previous\
    \ subscribe operation is silently\n      terminated, and processing continues.\n\
    \   5. If the \"transID\" attribute refers to an in-progress subscribe or\n  \
    \    watch operation for the originator, a \"reply\" element having code\n   \
    \   555 is sent to the originator.\n   6.  Otherwise:\n      1. A \"publish\"\
    \ element, corresponding to the subject's presence\n         entry, is immediately\
    \ sent to the originator.\n      2. For each endpoint currently watching subscribers\
    \ to the\n         subject's presence information, a \"notify\" element is\n \
    \        immediately as sent (c.f., Step 6.3 of Section 4.6).\n      3. For up\
    \ to the amount of time indicated by the \"duration\"\n         attribute of the\
    \ \"subscribe\" element, if the subject's presence\n         entry changes, an\
    \ updated \"presence\" element is sent to the\n         originator using the publish\
    \ operation (Section 4.4).  Finally,\n         when the amount of time indicated\
    \ by the \"duration\" attribute\n         expires, a terminate operation (Section\
    \ 4.5) is sent to the\n         originator.\n      Note that if the duration is\
    \ zero-valued, then the subscribe\n      operation is making a one-time poll of\
    \ the presence information.\n      Accordingly, Step 6.3 above does not occur.\n\
    \   Regardless of whether a \"publish\" or \"reply\" element is sent to the\n\
    \   originator, the \"transID\" attribute is identical to the value found\n  \
    \ in the \"subscribe\" element sent by the originator.\n"
- title: 4.3 The Watch Operation
  contents:
  - "4.3 The Watch Operation\n   When an application wants to (periodically) receive\
    \ notices about\n   endpoints that are subscribed to receive presence entry, it\
    \ sends a\n   \"watch\" element to the service.\n   The \"watch\" element has\
    \ a \"publisher\" attribute, a \"duration\"\n   attribute, a \"transID\" attribute,\
    \ and no content:\n   o  the \"publisher\" attribute specifies the endpoint associated\
    \ with\n      the presence entry;\n   o  the \"transID\" attribute specifies the\
    \ transaction-identifier\n      associated with this operation; and,\n   o  the\
    \ \"duration\" attribute specifies the maximum number of seconds\n      for which\
    \ the originator is interested in watching subscribers.\n   When the service receives\
    \ a \"watch\" element, we refer to the\n   \"publisher\" attribute of that element\
    \ as the \"subject\", and the\n   service performs these steps:\n   1. If the\
    \ subject is outside of this administrative domain, a \"reply\"\n      element\
    \ having code 553 is sent to the originator.\n   2. If the subject does not refer\
    \ to a valid endpoint, a \"reply\"\n      element having code 550 is sent to the\
    \ originator.\n   3. If the subject's access entry does not contain a \"presence:watch\"\
    \n      token for the originator, a \"reply\" element having code 537 is\n   \
    \   sent to the originator.\n   4. If the originator already has an in-progress\
    \ watch operation for\n      the subject, then the previous watch operation is\
    \ silently\n      terminated, and processing continues.\n   5. If the \"transID\"\
    \ attribute refers to an in-progress subscribe or\n      watch operation for the\
    \ originator, a \"reply\" element having code\n      555 is sent to the originator.\n\
    \   6. Otherwise:\n      1. A \"reply\" element having code 250 is sent to the\
    \ originator.\n      2. For each endpoint currently subscribing to the subject's\n\
    \         presence information, a \"notify\" element is immediately sent to\n\
    \         the originator (c.f., Section 4.6).\n      3. For up to the amount of\
    \ time indicated by the \"duration\"\n         attribute of the \"watch\" element,\
    \ whenever a subscribe\n         operation succeeds or a subscription is terminated,\
    \ a \"notify\"\n         element is sent to the originator.  Finally, when the\
    \ amount of\n         time indicated by the \"duration\" attribute expires, a\
    \ terminate\n         operation (Section 4.5) is sent to the originator.\n   \
    \   Note that if the duration is zero-valued, then the watch operation\n     \
    \ is making a one-time poll of the presence information.\n      Accordingly, Step\
    \ 6.3 above does not occur.\n   Regardless of whether a \"notify\" or \"reply\"\
    \ element is sent to the\n   originator, the \"transID\" attribute is identical\
    \ to the value found\n   in the \"presence\" element sent by the originator.\n"
- title: 4.4 The Publish Operation
  contents:
  - "4.4 The Publish Operation\n   When an application wants to modify the presence\
    \ entry associated\n   with an endpoint, it sends a \"publish\" element to the\
    \ service.  In\n   addition, the service sends a \"publish\" element to endpoints\
    \ that\n   have subscribed to see presence information (c.f., Section 4.2).\n\
    \   The \"publish\" element has a \"publisher\" attribute, a \"transID\"\n   attribute,\
    \ a \"timeStamp\" attribute, and contains a \"presence\"\n   element:\n   o  the\
    \ \"publisher\" attribute specifies the endpoint to be associated\n      with\
    \ the presence entry;\n   o  the \"transID\" attribute specifies the transaction-identifier\n\
    \      associated with this operation;\n   o  the \"timeStamp\" attribute specifies\
    \ the application's notion of\n      the current date and time; and,\n   o  the\
    \ \"presence\" element contains the desired presence entry for the\n      endpoint.\n\
    \   When the service sends a \"publish\" element, the \"transID\" attribute\n\
    \   specifies the transaction-identifier associated with the subscribe\n   operation\
    \ that caused this \"publish\" element to be sent, and the\n   \"timeStamp\" attribute\
    \ specifies the service's notion of the current\n   date and time.  No reply is\
    \ sent by the receiving endpoint.\n   When the service receives a \"publish\"\
    \ element, we refer to the\n   \"publisher\" attribute of that element as the\
    \ \"subject\", and the\n   service performs these steps:\n   1. If the \"publisher\"\
    \ attribute of the \"publish\" element doesn't\n      match the \"publisher\"\
    \ attribute of the \"presence\" element\n      contained in the \"publish\" element,\
    \ a \"reply\" element having code\n      503 is sent to the originator.\n   2.\
    \ If the subject is outside of this administrative domain, a \"reply\"\n     \
    \ element having code 553 is sent to the originator.\n   3. If the subject does\
    \ not refer to a valid endpoint, a \"reply\"\n      element having code 550 is\
    \ sent to the originator.\n   4. If the subject's access entry does not contain\
    \ a\n      \"presence:publish\" token for the originator, a \"reply\" element\n\
    \      having code 537 is sent to the originator.\n   5. If the \"lastUpdate\"\
    \ attribute of the \"publish\" element is not\n      semantically identical to\
    \ the \"lastUpdate\" attribute of the\n      subject's presence entry, a \"reply\"\
    \ element having code 555 is\n      sent to the originator.  (This allows a simple\
    \ mechanism for\n      atomic updates.)\n   6. Otherwise:\n      1. The subject's\
    \ presence entry is updated from the \"publish\"\n         element.\n      2.\
    \ The \"lastUpdate\" attribute of the presence entry is set to the\n         service's\
    \ notion of the current date and time.\n      3. A \"reply\" element having code\
    \ 250 is sent to the originator.\n   When sending the \"reply\" element, the \"\
    transID\" attribute is\n   identical to the value found in the \"publish\" element\
    \ sent by the\n   originator.\n"
- title: 4.5 The Terminate Operation
  contents:
  - "4.5 The Terminate Operation\n   When an application no longer wishes to subscribe\
    \ to presence\n   information or to watch endpoints that are subscribed to receive\n\
    \   presence information, it sends a \"terminate\" element to the service;\n \
    \  similarly, when the service no longer considers an application to be\n   subscribing\
    \ or watching, a \"terminate\" element is sent to the\n   application.\n   The\
    \ \"terminate\" element contains only a \"transID\" attribute that\n   specifies\
    \ the transaction-identifier associated an in-progress\n   subscribe or watch\
    \ operation.  Section 9.1 of [1] defines the syntax\n   for the \"terminate\"\
    \ element.\n   When the service receives a \"terminate\" element, it performs\
    \ these\n   steps:\n   1. If the transaction-identifier does not refer to a previous\n\
    \      subscribe or watch operation for the originator, an \"error\"\n      element\
    \ having code 550 is returned.\n   2. Otherwise, the previous subscribe or watch\
    \ operation for the\n      originator is terminated, and a \"reply\" element having\
    \ code 250 is\n      sent to the originator.\n   Note that following a terminate\
    \ operation, the originator may receive\n   further presence or watcher updates.\
    \  Although the service will send\n   no further updates after processing a terminate\
    \ operation and sending\n   the reply operation, earlier updates may be in transit.\n"
- title: 4.6 The Notify Operation
  contents:
  - "4.6 The Notify Operation\n   The service sends a \"notify\" element to endpoints\
    \ that are watching\n   other endpoints subscribed to presence information (c.f.,\
    \ Section\n   4.3).\n   The \"notify\" element has a \"subscriber\" attribute,\
    \ a \"transID\"\n   attribute, a \"duration\" attribute, an \"action\" attribute,\
    \ and no\n   content:\n   o  the \"subscriber\" attribute specifies the endpoint\
    \ that is\n      subscribed to presence information; and,\n   o  the \"transID\"\
    \ attribute specifies the transaction-identifier\n      associated with the watch\
    \ operation that caused this \"notify\"\n      element to be sent;\n   o  the\
    \ \"action\" attribute specifies whether a subscription or its\n      termination\
    \ has occurred; and,\n   o  if a subscription is being reported, the \"duration\"\
    \ attribute\n      specifies the requested duration of the subscription.\n   No\
    \ reply is sent by the receiving endpoint.\n"
- title: 4.7 The Reply Operation
  contents:
  - "4.7 The Reply Operation\n   While processing operations, the service may respond\
    \ with a \"reply\"\n   element.  Consult Sections 10.2 and 6.1.2 of [1], respectively,\
    \ for\n   the definition and an exposition of the syntax of the reply element.\n"
- title: '5. Registration: The Presence Service'
  contents:
  - "5. Registration: The Presence Service\n   Well-Known Endpoint: apex=presence\n\
    \   Syntax of Messages Exchanged: c.f., Section 6\n   Sequence of Messages Exchanged:\
    \ c.f., Section 4\n   Access Control Tokens: presence:subscribe, presence:watch,\n\
    \      presence:publish\n   Contact Information: c.f., the \"Authors' Addresses\"\
    \ section of this\n      memo\n"
- title: 6. The Presence Service DTD
  contents:
  - "6. The Presence Service DTD\n   <!--\n     DTD for the APEX presence service,\
    \ as of 2001-05-08\n     Refer to this DTD as:\n       <!ENTITY % APEXPRESENCE\
    \ PUBLIC \"-//IETF//DTD APEX PRESENCE//EN\"\n                  \"\">\n       %APEXPRESENCE;\n\
    \     -->\n   <!ENTITY % APEXCORE PUBLIC \"-//IETF//DTD APEX CORE//EN\" \"\">\n\
    \   %APEXCORE;\n   <!--\n     Synopsis of the APEX presence service\n       service\
    \ WKE: apex=presence\n       message exchanges:\n           consumer initiates\
    \    service replies\n           ==================    ================\n    \
    \       subscribe             publish or reply\n           terminate         \
    \    reply\n           watch                 reply\n           publish       \
    \        reply\n           service initiates     consumer replies\n          \
    \ =================     ================\n           terminate             (nothing)\n\
    \           publish               (nothing)\n           notify               \
    \ (nothing)\n       access control:\n           token                 target\n\
    \           ==================    ======\n           presence:subscribe    for\
    \ \"publisher\" of \"subscribe\" element\n           presence:watch        for\
    \ \"publisher\" of \"watch\" element\n           presence:publish      for \"\
    publisher\" of \"publish\" element\n     -->\n   <!ELEMENT subscribe   EMPTY>\n\
    \   <!ATTLIST subscribe\n             publisher   %ENDPOINT;        #REQUIRED\n\
    \             transID     %UNIQID;          #REQUIRED\n             duration \
    \   %SECONDS;         #REQUIRED>\n   <!ELEMENT watch       EMPTY>\n   <!ATTLIST\
    \ watch\n             publisher   %ENDPOINT;        #REQUIRED\n             transID\
    \     %UNIQID;          #REQUIRED\n             duration    %SECONDS;        \
    \ #REQUIRED>\n   <!-- publisher attributes must match in publish and presence\
    \ -->\n   <!ELEMENT publish     (presence)>\n   <!ATTLIST publish\n          \
    \   publisher   %ENDPOINT;        #REQUIRED\n             transID     %UNIQID;\
    \          #REQUIRED\n             timeStamp   %TIMESTAMP;       #REQUIRED>\n\
    \   <!ELEMENT notify      EMPTY>\n   <!ATTLIST notify\n             subscriber\
    \  %ENDPOINT;        #REQUIRED\n             transID     %UNIQID;          #REQUIRED\n\
    \             duration    %SECONDS;         \"0\"\n             action     (subscribe|terminate)\n\
    \                                           \"subscribe\">\n   <!--\n     presence\
    \ entries\n     -->\n   <!ELEMENT presence    (tuple+)>\n   <!ATTLIST presence\n\
    \             publisher   %ENDPOINT;        #REQUIRED\n             lastUpdate\
    \  %TIMESTAMP;       #REQUIRED\n             publisherInfo\n                 \
    \        %URI;             \"\">\n   <!ELEMENT tuple       (capability*)>\n  \
    \ <!ATTLIST tuple\n             destination %URI;             #REQUIRED\n    \
    \         availableUntil\n                         %TIMESTAMP;       #REQUIRED\n\
    \             tupleInfo   %URI;             \"\">\n   <!-- e.g., baseline='urn:ietf:rfc:rfc2533'\
    \ -->\n   <!ELEMENT capability (#PCDATA)>\n   <!ATTLIST capability\n         \
    \    baseline    %URI              #REQUIRED>\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   Consult [1]'s Section 11 for a discussion of security\
    \ issues.\n   In addition, timestamps issued by the the presence service may\n\
    \   disclose location information.  If this information is considered\n   sensitive,\
    \ the special timezone value \"-00:00\" may be used (after\n   converting the\
    \ local time accordingly).\n"
- title: References
  contents:
  - "References\n   [1]   Rose, M., Klyne, G. and D. Crocker, \"The Application Exchange\n\
    \         Core\", RFC 3340, July 2002.\n   [2]   Rose, M., \"The Blocks Extensible\
    \ Exchange Protocol Core\", RFC\n         3080, March 2001.\n   [3]   Rose, M.,\
    \ Klyne, G. and D. Crocker, \"The Application Exchange\n         (APEX) Access\
    \ Service\", RFC 3341, July 2002.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors gratefully acknowledge the contributions of:\
    \ Neil Cook,\n   Eric Dixon, Darren New, Scott Pead, and Bob Wyman.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Marshall T. Rose\n   Dover Beach Consulting, Inc.\n  \
    \ POB 255268\n   Sacramento, CA  95865-5268\n   US\n   Phone: +1 916 483 8878\n\
    \   EMail: mrose@dbc.mtview.ca.us\n   Graham Klyne\n   Nine by Nine\n   EMail:\
    \ gk@ninebynine.org\n   David H. Crocker\n   Brandenburg InternetWorking\n   675\
    \ Spruce Drive\n   Sunnyvale, CA  94086\n   US\n   Phone: +1 408 246 8253\n  \
    \ EMail: dcrocker@brandenburg.com\n   URI:   http://www.brandenburg.com/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
