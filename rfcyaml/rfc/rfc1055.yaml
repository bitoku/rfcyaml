- contents:
  - ' A NONSTANDARD FOR TRANSMISSION OF IP DATAGRAMS OVER SERIAL LINES: SLIP

    '
  title: __initial_text__
- contents:
  - "INTRODUCTION\n   The TCP/IP protocol family runs over a variety of network media:\n
    \  IEEE 802.3 (ethernet) and 802.5 (token ring) LAN's, X.25 lines,\n   satellite
    links, and serial lines.  There are standard encapsulations\n   for IP packets
    defined for many of these networks, but there is no\n   standard for serial lines.
    \ SLIP, Serial Line IP, is a currently a de\n   facto standard, commonly used
    for point-to-point serial connections\n   running TCP/IP.  It is not an Internet
    standard.  Distribution of\n   this memo is unlimited.\n"
  title: INTRODUCTION
- contents:
  - "HISTORY\n   SLIP has its origins in the 3COM UNET TCP/IP implementation from
    the\n   early 1980's.  It is merely a packet framing protocol: SLIP defines a\n
    \  sequence of characters that frame IP packets on a serial line, and\n   nothing
    more. It provides no addressing, packet type identification,\n   error detection/correction
    or compression mechanisms.  Because the\n   protocol does so little, though, it
    is usually very easy to\n   implement.\n   Around 1984, Rick Adams implemented
    SLIP for 4.2 Berkeley Unix and\n   Sun Microsystems workstations and released
    it to the world.  It\n   quickly caught on as an easy reliable way to connect
    TCP/IP hosts and\n   routers with serial lines.\n   SLIP is commonly used on dedicated
    serial links and sometimes for\n   dialup purposes, and is usually used with line
    speeds between 1200bps\n   and 19.2Kbps.  It is useful for allowing mixes of hosts
    and routers\n   to communicate with one another (host-host, host-router and router-\n
    \  router are all common SLIP network configurations).\n"
  title: HISTORY
- contents:
  - "AVAILABILITY\n   SLIP is available for most Berkeley UNIX-based systems.  It
    is\n   included in the standard 4.3BSD release from Berkeley.  SLIP is\n   available
    for Ultrix, Sun UNIX and most other Berkeley-derived UNIX\n   systems.  Some terminal
    concentrators and IBM PC implementations also\n   support it.\n   SLIP for Berkeley
    UNIX is available via anonymous FTP from\n   uunet.uu.net in pub/sl.shar.Z.  Be
    sure to transfer the file in\n   binary mode and then run it through the UNIX
    uncompress program. Take\n   the resulting file and use it as a shell script for
    the UNIX /bin/sh\n   (for instance, /bin/sh sl.shar).\n"
  title: AVAILABILITY
- contents:
  - "PROTOCOL\n   The SLIP protocol defines two special characters: END and ESC. END
    is\n   octal 300 (decimal 192) and ESC is octal 333 (decimal 219) not to be\n
    \  confused with the ASCII ESCape character; for the purposes of this\n   discussion,
    ESC will indicate the SLIP ESC character.  To send a\n   packet, a SLIP host simply
    starts sending the data in the packet.  If\n   a data byte is the same code as
    END character, a two byte sequence of\n   ESC and octal 334 (decimal 220) is sent
    instead.  If it the same as\n   an ESC character, an two byte sequence of ESC
    and octal 335 (decimal\n   221) is sent instead.  When the last byte in the packet
    has been\n   sent, an END character is then transmitted.\n   Phil Karn suggests
    a simple change to the algorithm, which is to\n   begin as well as end packets
    with an END character.  This will flush\n   any erroneous bytes which have been
    caused by line noise.  In the\n   normal case, the receiver will simply see two
    back-to-back END\n   characters, which will generate a bad IP packet.  If the
    SLIP\n   implementation does not throw away the zero-length IP packet, the IP\n
    \  implementation certainly will.  If there was line noise, the data\n   received
    due to it will be discarded without affecting the following\n   packet.\n   Because
    there is no 'standard' SLIP specification, there is no real\n   defined maximum
    packet size for SLIP.  It is probably best to accept\n   the maximum packet size
    used by the Berkeley UNIX SLIP drivers: 1006\n   bytes including the IP and transport
    protocol headers (not including\n   the framing characters).  Therefore any new
    SLIP implementations\n   should be prepared to accept 1006 byte datagrams and
    should not send\n   more than 1006 bytes in a datagram.\n"
  title: PROTOCOL
- contents:
  - "DEFICIENCIES\n   There are several features that many users would like SLIP to
    provide\n   which it doesn't.  In all fairness, SLIP is just a very simple\n   protocol
    designed quite a long time ago when these problems were not\n   really important
    issues.  The following are commonly perceived\n   shortcomings in the existing
    SLIP protocol:\n      - addressing:\n         both computers in a SLIP link need
    to know each other's IP\n         addresses for routing purposes.  Also, when
    using SLIP for\n         hosts to dial-up a router, the addressing scheme may
    be quite\n         dynamic and the router may need to inform the dialing host
    of\n         the host's IP address.  SLIP currently provides no mechanism\n         for
    hosts to communicate addressing information over a SLIP\n         connection.\n
    \     - type identification:\n         SLIP has no type field.  Thus, only one
    protocol can be run\n         over a SLIP connection, so in a configuration of
    two DEC\n         computers running both TCP/IP and DECnet, there is no hope of\n
    \        having TCP/IP and DECnet share one serial line between them\n         while
    using SLIP.  While SLIP is \"Serial Line IP\", if a serial\n         line connects
    two multi-protocol computers, those computers\n         should be able to use
    more than one protocol over the line.\n      - error detection/correction:\n         noisy
    phone lines will corrupt packets in transit. Because the\n         line speed
    is probably quite low (likely 2400 baud),\n         retransmitting a packet is
    very expensive.  Error detection is\n         not absolutely necessary at the
    SLIP level because any IP\n         application should detect damaged packets
    (IP header and UDP\n         and TCP checksums should suffice), although some
    common\n         applications like NFS usually ignore the checksum and depend
    on\n         the network media to detect damaged packets.  Because it takes\n
    \        so long to retransmit a packet which was corrupted by line\n         noise,
    it would be efficient if SLIP could provide some sort of\n         simple error
    correction mechanism of its own.\n      - compression:\n         because dial-in
    lines are so slow (usually 2400bps), packet\n         compression would cause
    large improvements in packet\n         throughput. Usually, streams of packets
    in a single TCP\n         connection have few changed fields in the IP and TCP
    headers,\n         so a simple compression algorithms might just send the changed\n
    \        parts of the headers instead of the complete headers.\n   Some work is
    being done by various groups to design and implement a\n   successor to SLIP which
    will address some or all of these problems.\n"
  title: DEFICIENCIES
- contents:
  - "SLIP DRIVERS\n   The following C language functions send and receive SLIP packets.\n
    \  They depend on two functions, send_char() and recv_char(), which send\n   and
    receive a single character over the serial line.\n   /* SLIP special character
    codes\n    */\n   #define END             0300    /* indicates end of packet */\n
    \  #define ESC             0333    /* indicates byte stuffing */\n   #define ESC_END
    \        0334    /* ESC ESC_END means END data byte */\n   #define ESC_ESC         0335
    \   /* ESC ESC_ESC means ESC data byte */\n   /* SEND_PACKET: sends a packet of
    length \"len\", starting at\n    * location \"p\".\n    */\n   void send_packet(p,
    len)\n           char *p;\n           int len; {\n     /* send an initial END
    character to flush out any data that may\n      * have accumulated in the receiver
    due to line noise\n      */\n        send_char(END);\n     /* for each byte in
    the packet, send the appropriate character\n      * sequence\n      */\n           while(len--)
    {\n                   switch(*p) {\n                   /* if it's the same code
    as an END character, we send a\n                    * special two character code
    so as not to make the\n                    * receiver think we sent an END\n                    */\n
    \                  case END:\n                           send_char(ESC);\n                           send_char(ESC_END);\n
    \                          break;\n                   /* if it's the same code
    as an ESC character,\n                    * we send a special two character code
    so as not\n                    * to make the receiver think we sent an ESC\n                    */\n
    \                  case ESC:\n                           send_char(ESC);\n                           send_char(ESC_ESC);\n
    \                          break;\n                   /* otherwise, we just send
    the character\n                    */\n                   default:\n                           send_char(*p);\n
    \                          }\n                   p++;\n                   }\n
    \          /* tell the receiver that we're done sending the packet\n            */\n
    \          send_char(END);\n           }\n   /* RECV_PACKET: receives a packet
    into the buffer located at \"p\".\n    *      If more than len bytes are received,
    the packet will\n    *      be truncated.\n    *      Returns the number of bytes
    stored in the buffer.\n    */\n   int recv_packet(p, len)\n           char *p;\n
    \          int len; {\n           char c;\n           int received = 0;\n           /*
    sit in a loop reading bytes until we put together\n            * a whole packet.\n
    \           * Make sure not to copy them into the packet if we\n            *
    run out of room.\n            */\n           while(1) {\n                   /*
    get a character to process\n                    */\n                   c = recv_char();\n
    \                  /* handle bytestuffing if necessary\n                    */\n
    \                  switch(c) {\n                   /* if it's an END character
    then we're done with\n                    * the packet\n                    */\n
    \                  case END:\n                           /* a minor optimization:
    if there is no\n                            * data in the packet, ignore it. This
    is\n                            * meant to avoid bothering IP with all\n                            *
    the empty packets generated by the\n                            * duplicate END
    characters which are in\n                            * turn sent to try to detect
    line noise.\n                            */\n                           if(received)\n
    \                                  return received;\n                           else\n
    \                                  break;\n                   /* if it's the same
    code as an ESC character, wait\n                    * and get another character
    and then figure out\n                    * what to store in the packet based on
    that.\n                    */\n                   case ESC:\n                           c
    = recv_char();\n                           /* if \"c\" is not one of these two,
    then we\n                            * have a protocol violation.  The best bet\n
    \                           * seems to be to leave the byte alone and\n                            *
    just stuff it into the packet\n                            */\n                           switch(c)
    {\n                           case ESC_END:\n                                   c
    = END;\n                                   break;\n                           case
    ESC_ESC:\n                                   c = ESC;\n                                   break;\n
    \                                  }\n                   /* here we fall into
    the default handler and let\n                    * it store the character for
    us\n                    */\n                   default:\n                           if(received
    < len)\n                                   p[received++] = c;\n                           }\n
    \                  }\n           }\n"
  title: SLIP DRIVERS
