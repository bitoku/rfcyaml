Abstract CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.
The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application layer security protection.
A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.
CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.
The JSON Web Token (JWT)
[RFC7519] is a standardized security token format that has found use in OAuth 2.0 and OpenID Connect deployments, among other applications.
JWT uses JSON Web Signature (JWS)
[RFC7515] and JSON Web Encryption (JWE)
[RFC7516] to secure the contents of the JWT, which is a set of claims represented in JSON.
The use of JSON for encoding information is popular for Web and native applications, but it is considered inefficient for some Internet of Things (IoT) systems that use low power radio technologies.
An alternative encoding of claims is defined in this document.
Instead of using JSON, as provided by JWTs, this specification uses CBOR [RFC7049] and calls this new structure "CBOR Web Token (CWT)", which is a compact means of representing secured claims to be transferred between two parties.
CWT is closely related to JWT.
It references the JWT claims and both its name and pronunciation are derived from JWT (the suggested pronunciation of CWT is the same as the English word "cot").
To protect the claims contained in CWTs, the CBOR Object Signing and Encryption (COSE)
In JSON, maps are called objects and only have one kind of map key: a string.
CBOR uses strings, negative integers, and unsigned integers as map keys.
The integers are used for compactness of encoding and easy comparison.
The inclusion of strings allows for an additional range of short encoded values to be used.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
This document reuses terminology from JWT [RFC7519] and COSE [RFC8152].
StringOrURI The "StringOrURI" term in this specification has the same meaning and processing rules as the JWT "StringOrURI" term defined in Section 2 of [RFC7519], except that it is represented as a CBOR text string instead of a JSON text string.
The "NumericDate" term in this specification has the same meaning and processing rules as the JWT "NumericDate" term defined in Section 2 of [RFC7519], except that it is represented as a CBOR numeric date (from Section 2.4.1 of [RFC7049]) instead of a JSON number.
The encoding is modified so that the leading tag 1 (epoch based date/time) MUST be omitted.
The human readable name used to identify a claim.
The CBOR map key used to identify a claim.
The CBOR map value representing the value of the claim.
CWT Claims Set The CBOR map that contains the claims conveyed by the CWT.
The set of claims that a CWT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of CWTs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations MUST be ignored.
To keep CWTs as small as possible, the Claim Keys are represented using integers or text strings.
Section 4 summarizes all keys used to identify the claims defined in this document.
Registered Claims None of the claims defined below are intended to be mandatory to use or implement.
Rather, they provide a starting point for a set of useful, interoperable claims.
Applications using CWTs should define which specific claims they use and when they are required or optional.
The "iss" (issuer) claim has the same meaning and processing rules as the "iss" claim defined in Section 4.1.1 of [RFC7519], except that the value is a StringOrURI, as defined in Section 2 of this specification.
The Claim Key 1 is used to identify this claim.
The "sub" (subject) claim has the same meaning and processing rules as the "sub" claim defined in Section 4.1.2 of [RFC7519], except that the value is a StringOrURI, as defined in Section 2 of this specification.
The Claim Key 2 is used to identify this claim.
The "aud" (audience) claim has the same meaning and processing rules as the "aud" claim defined in Section 4.1.3 of [RFC7519], except that the value of the audience claim is a StringOrURI when it is not an array or each of the audience array element values is a StringOrURI when the audience claim value is an array.
(StringOrURI is defined in Section 2 of this specification.)
The Claim Key 3 is used to identify this claim.
The "exp" (expiration time) claim has the same meaning and processing rules as the "exp" claim defined in Section 4.1.4 of [RFC7519], except that the value is a NumericDate, as defined in Section 2 of this specification.
The Claim Key 4 is used to identify this claim.
The "nbf" (not before) claim has the same meaning and processing rules as the "nbf" claim defined in Section 4.1.5 of [RFC7519], except that the value is a NumericDate, as defined in Section 2 of this specification.
Key 5 is used to identify this claim.
iat (Issued At) Claim The "iat" (issued at) claim has the same meaning and processing rules as the "iat" claim defined in Section 4.1.6 of [RFC7519], except that the value is a NumericDate, as defined in Section 2 of this specification.
The Claim Key 6 is used to identify this claim.
The "cti" (CWT ID) claim has the same meaning and processing rules as the "jti" claim defined in Section 4.1.7 of [RFC7519], except that the value is a byte string.
The Claim Key 7 is used to identify this claim.
Summary of the Claim Names, Keys, and Value Types
: Summary of the Claim Names, Keys, and Value Types 5.
CBOR Tags and Claim Values
The claim values defined in this specification MUST NOT be prefixed with any CBOR tag.
For instance, while CBOR tag 1 (epoch based date/ time) could logically be prefixed to values of the "exp", "nbf", and "iat" claims, this is unnecessary since the representation of the claim values is already specified by the claim definitions.
Tagging claim values would only take up extra space without adding information.
However, this does not prohibit future claim definitions from requiring the use of CBOR tags for those specific claims.
Tag How to determine that a CBOR data structure is a CWT is application dependent.
In some cases, this information is known from the application context, such as from the position of the CWT in a data structure at which the value must be a CWT.
One method of indicating that a CBOR object is a CWT is the use of the "application/cwt" content type by a transport protocol.
This section defines the CWT CBOR tag as another means for applications to declare that a CBOR data structure is a CWT.
Its use is optional and is intended for use in cases in which this information would not otherwise be known.
If present, the CWT tag MUST prefix a tagged object using one of the COSE CBOR tags.
In this example, the COSE Mac0 tag is used.
The actual COSE Mac0 object has been excluded from this example. /
( / COSE Mac0 CBOR tag /
Example of CWT Tag Usage 7.
Creating and Validating CWTs 7.1.
Creating a CWT To create a CWT, the following steps are performed.
The order of the steps is not significant in cases where there are no dependencies between the inputs and outputs of the steps.
Create a CWT Claims Set containing the desired claims.
Let the Message be the binary representation of the CWT Claims Set.
Create a COSE Header containing the desired set of Header Parameters.
The COSE Header MUST be valid per the [RFC8152] specification.
Else, if the CWT is MACed, create a COSE Mac/COSE Mac0 object using the Message as the COSE Mac/COSE Mac0 Payload; all steps specified in [RFC8152] for creating a COSE Mac/COSE Mac0 object MUST be followed.
Else, if the CWT is a COSE Encrypt/COSE Encrypt0 object, create a COSE Encrypt/COSE Encrypt0 using the Message as the plaintext for the COSE Encrypt/COSE Encrypt0 object; all steps specified in [RFC8152] for creating a COSE Encrypt/ COSE Encrypt0 object MUST be followed.
If a nested signing, MACing, or encryption operation will be performed, let the Message be the tagged COSE Sign/COSE Sign1, COSE Mac/COSE Mac0, or COSE Encrypt/COSE Encrypt0, and return to Step 3.
If needed by the application, prepend the COSE object with the appropriate COSE CBOR tag to indicate the type of the COSE object.
If needed by the application, prepend the COSE object with the CWT CBOR tag to indicate that the COSE object is a CWT.
When validating a CWT, the following steps are performed.
The order of the steps is not significant in cases where there are no dependencies between the inputs and outputs of the steps.
If any of the listed steps fail, then the CWT MUST be rejected   that is, treated by the application as invalid input.
Verify that the CWT is a valid CBOR object.
If the object begins with the CWT CBOR tag, remove it and verify that one of the COSE CBOR tags follows it.
If the object is tagged with one of the COSE CBOR tags, remove it and use it to determine the type of the CWT, COSE Sign/ COSE Sign1, COSE Mac/COSE Mac0, or COSE Encrypt/COSE Encrypt0.
If the object does not have a COSE CBOR tag, the COSE message type is determined from the application context.
Verify that the resulting COSE Header includes only parameters and values whose syntax and semantics are both understood and supported or that are specified as being ignored when not understood.
Depending upon whether the CWT is a signed, MACed, or encrypted, there are three cases:
If the CWT is a COSE Sign/COSE Sign1, follow the steps specified in Section 4 of [RFC8152] ("Signing Objects") for validating a COSE Sign/COSE Sign1 object.
Let the Message be the COSE Sign/COSE Sign1 payload.
Else, if the CWT is a COSE Mac/COSE Mac0, follow the steps specified in Section 6 of [RFC8152] ("MAC Objects") for validating a COSE Mac/COSE Mac0 object.
Let the Message be the COSE Mac/COSE Mac0 payload.
Else, if the CWT is a COSE Encrypt/COSE Encrypt0 object, follow the steps specified in Section 5 of [RFC8152] ("Encryption Objects") for validating a COSE Encrypt/ COSE Encrypt0 object.
Let the Message be the resulting plaintext.
If the Message begins with a COSE CBOR tag, then the Message is a CWT that was the subject of nested signing, MACing, or encryption operations.
In this case, return to Step 1, using the Message as the CWT.
Verify that the Message is a valid CBOR map
; let the CWT Claims Set be this CBOR map.
The security of the CWT relies upon on the protections offered by COSE.
Unless the claims in a CWT are protected, an adversary can modify, add, or remove claims.
Since the claims conveyed in a CWT may be used to make authorization decisions, it is not only important to protect the CWT in transit but also to ensure that the recipient can authenticate the party that assembled the claims and created the CWT.
Without trust of the recipient in the party that created the CWT, no sensible authorization decision can be made.
Furthermore, the creator of the CWT needs to carefully evaluate each claim value prior to including it in the CWT so that the recipient can be assured of the validity of the information provided.
Syntactically, the signing and encryption operations for Nested CWTs may be applied in any order; however, if both signing and encryption are necessary, producers normally should sign the message and then encrypt the result (thus encrypting the signature).
This prevents attacks in which the signature is stripped, leaving just an encrypted message, as well as providing privacy for the signer.
Furthermore, signatures over encrypted text are not considered valid in many jurisdictions.
Claims Registry IANA has created the "CBOR Web Token (CWT) Claims" registry [IANA.CWT.Claims].
Registration requests are evaluated using the criteria described in the Claim
Key instructions in the registration template below after a three week review period on the cwt reg review@ietf.org mailing list, on the advice of one or more Designated Experts [RFC8126].
However, to allow for the allocation of values prior to publication, the Designated Experts may approve registration once they are satisfied that such a specification will be published.
Registration requests sent to the mailing list for review should use an appropriate subject (e.g., "Request to register claim: example").
Registration requests that are undetermined for a period longer than 21 days can be brought to the IESG's attention (using the iesg@ietf.org mailing list) for resolution.
Criteria that should be applied by the Designated Experts includes determining whether the proposed registration duplicates existing functionality, whether it is likely to be of general applicability or whether it is useful only for a single application, and whether the registration description is clear.
Registrations for the limited set of values between  256 and 255 and strings of length 1 are to be restricted to claims with general applicability.
IANA must only accept registry updates from the Designated Experts and should direct all requests for registration to the review mailing list.
It is suggested that multiple Designated Experts be appointed who are able to represent the perspectives of different applications using this specification in order to enable broadly informed review of registration decisions.
In cases where a registration decision could be perceived as creating a conflict of interest for a particular Expert, that Expert should defer to the judgment of the other Experts.
Since a high degree of overlap is expected between the contents of the "CBOR Web Token (CWT) Claims" registry and the "JSON Web Token Claims" registry, overlap in the corresponding pools of Designated Experts would be useful to help ensure that an appropriate level of coordination between the registries is maintained.
The human readable name requested (e.g., "iss").
Brief description of the claim (e.g., "Issuer").
Claim Name of the equivalent JWT claim, as registered in [IANA.JWT.Claims].
CWT claims should normally have a corresponding JWT claim.
If a corresponding JWT claim would not make sense, the Designated Experts can choose to accept registrations for which the JWT Claim Name is listed as "N/A".
CBOR map key for the claim.
Different ranges of values use different registration policies [RFC8126].
Integer values from  256 to 255 and strings of length 1 are designated as Standards Action.
Integer values from  65536 to  257 and from 256 to 65535 along with strings of length 2 are designated as Specification Required.
Integer values greater than 65535 and strings of length greater than 2 are designated as Expert Review.
Integer values less than  65536 are marked as Private Use.
Claim Value Type(s): CBOR types that can be used for the claim value.
For Standards Track RFCs, list the "IESG".
For others, give the name of the responsible party.
Other details (e.g., postal address, email address, home page URI) may also be included.
: Reference to the document or documents that specify the parameter, preferably including URIs that can be used to retrieve copies of the documents.
An indication of the relevant sections may also be included but is not required.
Claim Description: This registration reserves the key value 0.
Claim Value Type(s): N/A  Change Controller: IESG  Specification Document(s): [RFC8392]
Issuer  JWT Claim Name: iss
Claim Key: 1  Claim Value Type(s):
text string  Change Controller: IESG  Specification Document(s)
: Section 3.1.1 of [RFC8392]
Claim Name: sub  Claim Description:
Subject  JWT Claim Name: sub
Claim Key: 2  Claim Value Type(s): text string  Change Controller: IESG  Specification Document(s):
Section 3.1.2 of [RFC8392]  Claim Name: aud
Audience  JWT Claim Name: aud
Key: 3  Claim Value Type(s):
text string  Change Controller: IESG  Specification Document(s)
: Section 3.1.3 of [RFC8392]
Key: 4  Claim Value Type(s): integer or floating point number
Change Controller: IESG  Specification Document(s):
Claim Description: Not Before  JWT Claim Name: nbf
Key: 5  Claim Value Type(s): integer or floating point number
Change Controller: IESG  Specification Document(s):
Section 3.1.5 of [RFC8392]  Claim Name: iat
Claim Description: Issued At  JWT Claim Name:
Claim Key: 6  Claim Value Type(s): integer or floating point number
Change Controller: IESG  Specification Document(s):
Key: 7  Claim Value Type(s)
: byte string  Change Controller: IESG  Specification Document(s):
Section 3.1.7 of [RFC8392] 9.2.
Media Type Registration IANA has registered the "application/cwt" media type in the "Media Types" registry [IANA.MediaTypes] in the manner described in RFC 6838
[RFC6838], which can be used to indicate that the content is a CWT.
Registry Contents  Type name: application  Subtype name:
cwt  Required parameters: N/A  Optional parameters: N/A  Encoding considerations: binary  Security considerations: See the Security Considerations section of [RFC8392]
[RFC8392]  Applications that use this media type: IoT applications sending security tokens over HTTP(S), CoAP(S), and other transports.
N/A  Additional information: Magic number(s):
: N/A Macintosh file type code(s): N/A  Person & email address to contact for further information: IESG, iesg@ietf.org
COMMON  Restrictions on usage: none  Author: Michael B. Jones, mbj@microsoft.com  Change controller:
CoAP Content Formats Registration IANA has registered the CoAP Content Format ID for the "application/ cwt" media type in the "CoAP Content Formats" registry [IANA.CoAP.Content Formats].
Registry Contents  Media Type: application/cwt  Encoding:
CBOR Tag registration IANA has registered the CWT CBOR tag in the "CBOR Tags" registry [IANA.CBOR.Tags].
CBOR Web Token (CWT), as defined in [RFC8392]
Michael B.  Jones, mbj@microsoft.com Appendix A.  Examples
This appendix includes a set of CWT examples that show how the CWT Claims Set can be protected.
There are examples that are signed, MACed, encrypted, and that use nested signing and encryption.
To make the examples easier to read, they are presented both as hex strings and in the extended CBOR diagnostic notation described in Section 6 of [RFC7049].
The CWT Claims Set used for the different examples displays usage of all the defined claims.
For signed and MACed examples, the CWT Claims Set is the CBOR encoding as a byte string.
: h'0b71' } Figure 3:
Example CWT Claims Set in CBOR Diagnostic Notation A.2.
This section contains the keys used to sign, MAC, and encrypt the messages in this appendix.
Line breaks are for display purposes only.
128 Bit Symmetric Key a42050231f4c4d4d3051fdc2ec0a3851d5b3830104024c53796d6d6574726963 313238030a
h'231f4c4d4d3051fdc2ec0a3851d5b383' / kty /  1: 4 / Symmetric /,
256 Bit Symmetric Key a4205820403697de87af64611c1d32a05dab0fe1fcb715a86ab435f1ec99192d
Elliptic Curve Digital Signature Algorithm (ECDSA) P 256 256 Bit COSE
Key a72358206c1382765aec5358f117733d281c1c7bdc39884d04a45a1e6c67c858 bc206c1922582060f7f1a780d8a783bfb7a2dd6b2796e8128dbbcef9d3d168db 9529971a36e7b9215820143329cce7868e416927599cf65a34f3ce2ffda55a7e ca69ed8919a394d42f0f2001010202524173796d6d6574726963454344534132 35360326
ECDSA 256 Bit COSE Key in CBOR Diagnostic Notation A.3.
This section shows a signed CWT with a single recipient and a full CWT Claims Set.
The signature is generated using the private key listed in Appendix A.2.3, and it can be validated using the public key from Appendix A.2.3.
Line breaks are for display purposes only.
Signed CWT as Hex String 18
Signed CWT in CBOR Diagnostic Notation A.4.
This section shows a MACed CWT with a single recipient, a full CWT Claims Set, and a CWT tag.
The MAC is generated using the 256 bit symmetric key from Appendix A.2.2 with a 64 bit truncation.
Line breaks are for display purposes only.
MACed CWT with CWT Tag in CBOR Diagnostic Notation A.5.
This section shows an encrypted CWT with a single recipient and a full CWT Claims Set.
The encryption is done with AES CCM mode using the 128 bit symmetric key from Appendix A.2.1 with a 64 bit tag and 13 byte nonce, i.e., COSE AES CCM 16
Line breaks are for display purposes only.
Encrypted CWT as Hex String 16
Encrypted CWT in CBOR Diagnostic Notation A.6.
This section shows a Nested CWT, signed and then encrypted, with a single recipient and a full CWT Claims Set.
The signature is generated using the private ECDSA key from Appendix A.2.3, and it can be validated using the public ECDSA parts from Appendix A.2.3.
The encryption is done with AES CCM mode using the 128 bit symmetric key from Appendix A.2.1 with a 64 bit tag and 13 byte nonce, i.e., COSE AES CCM 16
The content type is set to CWT to indicate that there are multiple layers of COSE protection before finding the CWT Claims Set.
The decrypted ciphertext will be a COSE sign1 structure.
In this example, it is the same one as in Appendix A.3, i.e., a Signed CWT Claims Set.
Note that there is no limitation to the number of layers
; this is an example with two layers.
Line breaks are for display purposes only.
Signed and Encrypted CWT as Hex String 16
Signed and Encrypted CWT in CBOR Diagnostic Notation A.7.
Example MACed CWT with a Floating Point Value
This section shows a MACed CWT with a single recipient and a simple CWT Claims Set.
The CWT Claims Set with a floating point 'iat' value.
The MAC is generated using the 256 bit symmetric key from Appendix A.2.2 with a 64 bit truncation.
Line breaks are for display purposes only.
MACed CWT with a Floating Point Value in CBOR Diagnostic Notation
