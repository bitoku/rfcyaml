Abstract This document describes an Extensible Provisioning Protocol (EPP) mapping for the provisioning and management of individual or organizational social information identifiers (known as "contacts") stored in a shared central repository.
Specified in Extensible Markup Language (XML), the mapping defines EPP command syntax and semantics as applied to contacts.
This document obsoletes RFC 4933.
This document describes a personal and organizational identifier mapping for version 1.0 of the Extensible Provisioning Protocol (EPP).
This mapping is specified using the Extensible Markup Language (XML) 1.0 as described in [W3C.REC xml 20040204] and XML Schema notation as described in [W3C.REC xmlschema 1 20041028] and [W3C.REC xmlschema 2 20041028].
This document obsoletes RFC 4933
[RFC5730] provides a complete description of EPP command and response structures.
A thorough understanding of the base protocol specification is necessary to understand the mapping described in this document.
Unless stated otherwise, XML specifications and examples provided in this document MUST be interpreted in the character case presented to develop a conforming implementation.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
In examples, "C:" represents lines sent by a protocol client and "S:" represents lines returned by a protocol server.
Indentation and white space in examples are provided only to illustrate element relationships and are not a REQUIRED feature of this protocol.
An EPP contact object has attributes and associated values that can be viewed and modified by the sponsoring client or the server.
This section describes each attribute type in detail.
The formal syntax for the attribute values described here can be found in the "Formal Syntax" section of this document and in the appropriate normative references.
All EPP contacts are identified by a server unique identifier.
Contact identifiers are character strings with a specified minimum length, a specified maximum length, and a specified format.
Contact identifiers use the "clIDType" client identifier syntax described in [RFC5730].
A contact object MUST always have at least one associated status value.
Status values can be set only by the client that sponsors a contact object and by the server on which the object resides.
A client can change the status of a contact object using the EPP <update> command.
Each status value MAY be accompanied by a string of human readable text that describes the rationale for the status applied to the object.
A client MUST NOT alter status values set by the server.
A server MAY alter or override status values set by a client, subject to local server policies.
The status of an object MAY change as a result of either a client initiated transform command or an action performed by a server operator.
Status values that can be added or removed by a client are prefixed with "client".
Corresponding status values that can be added or removed by a server are prefixed with "server".
Status values that do not begin with either "client" or "server" are server managed.
Status Value Descriptions:  clientDeleteProhibited, serverDeleteProhibited Requests to delete the object MUST be rejected.
clientTransferProhibited, serverTransferProhibited Requests to transfer the object MUST be rejected.
clientUpdateProhibited, serverUpdateProhibited Requests to update the object (other than to remove this status)
linked The contact object has at least one active association with another object, such as a domain object.
Servers SHOULD provide services to determine existing object associations.
This is the normal status value for an object that has no pending operations or prohibitions.
This value is set and removed by the server as other status values are added or removed.
pendingUpdate A transform command has been processed for the object, but the action has not been completed by the server.
Server operators can delay action completion for a variety of reasons, such as to allow for human review or third party action.
A transform command that is processed, but whose requested action is pending, is noted with response code 1001.
When the requested action has been completed, the pendingCreate, pendingDelete, pendingTransfer, or pendingUpdate status value MUST be removed.
All clients involved in the transaction MUST be notified using a service message that the action has been completed and that the status of the object has changed.
"ok" status MAY only be combined with "linked" status.
"linked" status MAY be combined with any status. "
pendingDelete" status MUST NOT be combined with either "clientDeleteProhibited" or "serverDeleteProhibited" status. "
pendingTransfer" status MUST NOT be combined with either "clientTransferProhibited" or "serverTransferProhibited" status.
pendingUpdate" status MUST NOT be combined with either "clientUpdateProhibited" or "serverUpdateProhibited" status.
The pendingCreate, pendingDelete, pendingTransfer, and pendingUpdate status values MUST NOT be combined with each other.
Other status combinations not expressly prohibited MAY be used.
Individual and Organizational Names Individual and organizational names associated with a contact are represented using character strings.
These strings have a specified minimum length and a specified maximum length.
Individual and organizational names MAY be provided in either UTF 8 [RFC3629] or a subset of UTF 8 that can be represented in 7 bit ASCII, depending on local needs.
Every contact has associated postal address information.
A postal address contains OPTIONAL street information, city information, OPTIONAL state/province information, an OPTIONAL postal code, and a country identifier.
Address information MAY be provided in either UTF 8 or a subset of UTF 8 that can be represented in 7 bit ASCII, depending on local needs.
Street, City, and State or Province Contact street, city, and state or province information is represented using character strings.
These strings have a specified minimum length and a specified maximum length.
Postal Code Contact postal codes are represented using character strings.
These strings have a specified minimum length and a specified maximum length.
Country Contact country identifiers are represented using two character identifiers specified in [ISO3166 1].
Telephone Numbers Contact telephone number structure is derived from structures defined in [ITU.E164.2005].
An optional "x" attribute is provided to note telephone extension information.
Email Addresses Email address syntax is defined in [RFC5322].
This mapping does not prescribe minimum or maximum lengths for character strings used to represent email addresses.
Dates and Times Date and time attribute values MUST be represented in Universal Coordinated Time (UTC) using the Gregorian calendar.
The extended date time form using upper case "T" and "Z" characters defined in [W3C.REC xmlschema 2 20041028]
MUST be used to represent date time values, as XML Schema does not support truncated date time forms or lower case "T" and "Z" characters.
Authorization Information Authorization information is associated with contact objects to facilitate transfer operations.
Authorization information is assigned when a contact object is created, and it might be updated in the future.
This specification describes password based authorization information, though other mechanisms are possible.
Disclosure of Data Elements and Attributes
The EPP core protocol requires a server operator to announce data  collection policies to clients; see Section 2.4 of [RFC5730].
In conjunction with this disclosure requirement, this mapping includes data elements that allow a client to identify elements that require exceptional server operator handling to allow or restrict disclosure to third parties.
A server operator announces a default disclosure policy when establishing a session with a client.
When an object is created or updated, the client can specify contact attributes that require exceptional disclosure handling using an OPTIONAL <contact:disclose
Once set, disclosure preferences can be reviewed using a contact information query.
A server operator MUST reject any transaction that requests disclosure practices that do not conform to the announced data collection policy with a 2308 error response code.
If present, the <contact:disclose> element MUST contain a "flag" attribute.
The "flag" attribute contains an XML Schema boolean value.
A value of "true" or "1" (one) notes a client preference to allow disclosure of the specified elements as an exception to the stated data collection policy.
A value of "false" or "0" (zero) notes a client preference to not allow disclosure of the specified elements as an exception to the stated data collection policy.
The <contact:disclose> element MUST contain at least one of the following child elements: <contact:name type "int"/
> element, flag "0": <contact:disclose flag "0"
In this example, the contact email address and voice telephone number cannot be disclosed.
All other elements are subject to disclosure in accordance with the server's data collection policy.
> element, flag "1": <contact:disclose flag "1"> <contact:name type "int"/
In this example, the internationalized contact name, organization, and address information can be disclosed.
All other elements are subject to disclosure in accordance with the server's data collection policy.
Client identification features provided by the EPP <login> command and contact authorization information are used to determine if a client is authorized to perform contact information query commands.
These features also determine if a client is authorized to receive data that is otherwise marked for non disclosure in a query response.
A detailed description of the EPP syntax and semantics can be found in [RFC5730].
The command mappings described here are specifically for use in provisioning and managing contact objects via EPP.
EPP Query Commands EPP provides three commands to retrieve contact information: <check> to determine if a contact object can be provisioned within a repository, <info> to retrieve detailed information associated with a contact object, and <transfer> to retrieve information regarding the transfer status of the contact object.
> command is used to determine if an object can be provisioned within a repository.
It provides a hint that allows a client to anticipate the success or failure of provisioning an object using the <create> command, as object provisioning requirements are ultimately a matter of server policy.
In addition to the standard EPP command elements, the <check> command MUST contain a <contact:check> element that identifies the contact namespace.
The <contact:check> element contains the following child elements:  One or more <contact:
> elements that contain the server unique identifier of the contact objects to be queried.
Example <check> command: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When a <check> command has been processed successfully, the EPP <resData> element MUST contain a child <contact:chkData
> element that identifies the contact namespace.
element contains one or more <contact:cd> elements that contain the following child elements:  A <contact:
> element that identifies the queried object.
This element MUST contain an "avail" attribute whose value indicates object availability (can it be provisioned or not) at the moment the <check> command was completed.
A value of "1" or "true" means that the object can be provisioned.
A value of "0" or "false" means that the object cannot be provisioned.
An OPTIONAL <contact:reason> element that MAY be provided when an object cannot be provisioned.
If present, this element contains server specific text to help explain why the object cannot be provisioned.
This text MUST be represented in the response language previously negotiated with the client; an OPTIONAL "lang" attribute MAY be present to identify the language if the negotiated value is something other than the default value of "en" (English).
Example <check> response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if a <check> command cannot be processed for any reason.
command is used to retrieve information associated with a contact object.
In addition to the standard EPP command elements, the <info> command MUST contain a <contact:info> element that identifies the contact namespace.
> element contains the following child elements:  A <contact:id> element that contains the server unique identifier of the contact object to be queried.
> element that contains authorization information associated with the contact object.
If this element is not provided or if the authorization information is invalid, server policy determines if the command is rejected or if response information will be returned to the client.
Example <info> command: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When an <info> command has been processed successfully, the EPP <resData> element MUST contain a child <contact:
> element that identifies the contact namespace.
> element contains the following child elements:  A <contact:id> element that contains the server unique identifier of the contact object.
A <contact:roid> element that contains the Repository Object IDentifier assigned to the contact object when the object was created.
One or more <contact:status> elements that describe the status of the contact object.
One or two <contact:postalInfo> elements that contain postal  address information.
Two elements are provided so that address information can be provided in both internationalized and localized forms; a "type" attribute is used to identify the two forms.
If an internationalized form (type "int") is provided, element content MUST be represented in a subset of UTF 8 that can be represented in the 7 bit US ASCII character set.
If a localized form (type "loc") is provided, element content MAY be represented in unrestricted UTF 8.
> element contains the following child elements:  A <contact:name> element that contains the name of the individual or role represented by the contact.
An OPTIONAL <contact:org> element that contains the name of the organization with which the contact is affiliated.
A <contact:addr> element that contains address information associated with the contact.
addr> element contains the following child elements:  One, two, or three OPTIONAL <contact:street> elements that contain the contact's street address.
A <contact:city> element that contains the contact's city.
> element that contains the contact's state or province.
> element that contains the contact's postal code.
cc> element that contains the contact's country code.
An OPTIONAL <contact:voice> element that contains the contact's voice telephone number.
An OPTIONAL <contact:fax> element that contains the contact's facsimile telephone number.
A <contact:email> element that contains the contact's email address.
A <contact:clID> element that contains the identifier of the sponsoring client.
A <contact:crID> element that contains the identifier of the client that created the contact object.
A <contact:crDate> element that contains the date and time of contact object creation.
A <contact:upID> element that contains the identifier of the client that last updated the contact object.
This element MUST NOT be present if the contact has never been modified.
A <contact:upDate> element that contains the date and time of the most recent contact object modification.
This element MUST NOT be present if the contact object has never been modified.
A <contact:trDate> element that contains the date and time of the most recent successful contact object transfer.
This element MUST NOT be provided if the contact object has never been transferred.
> element that contains authorization information associated with the contact object.
This element MUST NOT be provided if the querying client is not the current sponsoring client.
> element that identifies elements that require exceptional server operator handling to allow or restrict disclosure to third parties.
See Section 2.9 for a description of the child elements contained within the <contact
Example <info> response for an authorized client: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if an <info> command cannot be processed for any reason.
command provides a query operation that allows a client to determine the real time status of pending and completed transfer requests.
In addition to the standard EPP command elements, the <transfer> command MUST contain an "op" attribute with value "query", and a <contact:transfer> element that identifies the contact namespace.
The <contact:transfer> element MUST contain the following child elements:  A <contact:id> element that contains the server unique identifier of the contact object to be queried.
> element that contains authorization information associated with the contact object.
If this element is not provided or if the authorization information is invalid, server policy determines if the command is rejected or if response information will be returned to the client.
Example <transfer> query command: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When a <transfer> query command has been processed successfully, the EPP <resData> element MUST contain a child <contact:trnData
> element that identifies the contact namespace.
trnData> element contains the following child elements:  A <contact:id> element that contains the server unique identifier for the queried contact.
A <contact:trStatus> element that contains the state of the most recent transfer request.
A <contact:reID> element that contains the identifier of the client that requested the object transfer.
A <contact:reDate> element that contains the date and time that the transfer was requested.
A <contact:acID> element that contains the identifier of the client that SHOULD act upon a PENDING transfer request.
For all other status types, the value identifies the client that took the indicated action.
A <contact:acDate> element that contains the date and time of a required or completed response.
For a pending request, the value identifies the date and time by which a response is required before an automated response action SHOULD be taken by the server.
For all other status types, the value identifies the date and time when the request was completed.
Example <transfer> query response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if a <transfer> query command cannot be processed for any reason.
EPP Transform Commands EPP provides four commands to transform contact object information: <create> to create an instance of a contact object, <delete> to delete an instance of a contact object, <transfer> to manage contact  object sponsorship changes, and <update> to change information associated with a contact object.
This document does not define a mapping for the EPP <renew> command.
Transform commands are typically processed and completed in real time.
Server operators MAY receive and process transform commands but defer completing the requested action if human or third party review is required before the requested action can be completed.
In such situations, the server MUST return a 1001 response code to the client to note that the command has been received and processed but that the requested action is pending.
The server MUST also manage the status of the object that is the subject of the command to reflect the initiation and completion of the requested action.
Once the action has been completed, all clients involved in the transaction MUST be notified using a service message that the action has been completed and that the status of the object has changed.
Other notification methods MAY be used in addition to the required service message.
Server operators SHOULD confirm that a client is authorized to perform a transform command on a given object.
Any attempt to transform an object by an unauthorized client MUST be rejected, and the server MUST return a 2201 response code to the client to note that the client lacks privileges to execute the requested command.
The EPP <create> command provides a transform operation that allows a client to create a contact object.
In addition to the standard EPP command elements, the <create> command MUST contain a <contact: create> element that identifies the contact namespace.
The <contact: create> element contains the following child elements:
A <contact:id> element that contains the desired server unique identifier for the contact to be created.
One or two <contact:postalInfo> elements that contain postal  address information.
Two elements are provided so that address information can be provided in both internationalized and localized forms; a "type" attribute is used to identify the two forms.
If an internationalized form (type "int") is provided, element content MUST be represented in a subset of UTF 8 that can be represented in the 7 bit US ASCII character set.
If a localized form (type "loc") is provided, element content MAY be represented in unrestricted UTF 8.
> element contains the following child elements:  A <contact:name> element that contains the name of the individual or role represented by the contact.
An OPTIONAL <contact:org> element that contains the name of the organization with which the contact is affiliated.
A <contact:addr> element that contains address information associated with the contact.
<contact:street> elements that contain the contact's street address.
A <contact:city> element that contains the contact's city.
> element that contains the contact's state or province.
> element that contains the contact's postal code.
cc> element that contains the contact's country code.
An OPTIONAL <contact:voice> element that contains the contact's voice telephone number.
An OPTIONAL <contact:fax> element that contains the contact's facsimile telephone number.
A <contact:email> element that contains the contact's email address.
> element that contains authorization information to be associated with the contact object.
This mapping includes a password based authentication mechanism, but the schema allows new mechanisms to be defined in new schemas.
> element that allows a client to identify elements that require exceptional server operator handling to allow or restrict disclosure to third parties.
See Section 2.9 for a description of the child elements contained within the <contact
C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When a <create> command has been processed successfully, the EPP <resData> element MUST contain a child <contact:creData
> element that identifies the contact namespace.
> element contains the following child elements:  A <contact:id> element that contains the server unique identifier for the created contact.
A <contact:crDate> element that contains the date and time of contact object creation.
Example <create> response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if a <create> command cannot be processed for any reason.
The EPP <delete> command provides a transform operation that allows a client to delete a contact object.
In addition to the standard EPP command elements, the <delete> command MUST contain a <contact:
> element that identifies the contact namespace.
The <contact: delete> element MUST contain the following child element:
A <contact:id> element that contains the server unique identifier of the contact object to be deleted.
A contact object SHOULD NOT be deleted if it is associated with other known objects.
An associated contact SHOULD NOT be deleted until associations with other known objects have been broken.
A server SHOULD notify clients that object relationships exist by sending a 2305 error response code when a <delete> command is attempted and fails due to existing object relationships.
C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When a <delete> command has been processed successfully, a server MUST respond with an EPP response with no <
Example <delete> response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if a <delete> command cannot be processed for any reason.
EPP <renew> Command Renewal semantics do not apply to contact objects, so there is no mapping defined for the EPP <renew> command.
command provides a transform operation that allows a client to manage requests to transfer the sponsorship of a contact object.
In addition to the standard EPP command elements, the <transfer> command MUST contain a <contact:transfer> element that identifies the contact namespace.
The <contact:transfer> element contains the following child elements:
A <contact:id> element that contains the server unique identifier of the contact object for which a transfer request is to be created, approved, rejected, or cancelled.
> element that contains authorization information associated with the contact object.
command MUST contain an "op" attribute that identifies the transfer operation to be performed, as defined in [RFC5730].
Example <transfer> request command: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When a <transfer> command has been processed successfully, the EPP <resData> element MUST contain a child <contact:trnData
> element that identifies the contact namespace.
trnData> element contains the same child elements defined for a <transfer> query response.
Example <transfer> response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
Command completed successfully; action pending</msg
An EPP error response MUST be returned if a <transfer> command cannot be processed for any reason.
The EPP <update> command provides a transform operation that allows a client to modify the attributes of a contact object.
In addition to the standard EPP command elements, the <update> command MUST contain a <contact:update> element that identifies the contact namespace.
The <contact:update> element contains the following child elements:  A <contact:id> element that contains the server unique identifier of the contact object to be updated.
An OPTIONAL <contact:add> element that contains attribute values to be added to the object.
rem> element that contains attribute values to be removed from the object.
An OPTIONAL <contact:chg> element that contains object attribute values to be changed.
At least one <contact:add>, <contact:rem>, or <contact:chg
> element MUST be provided if the command is not being extended.
All of these elements MAY be omitted if an <update> extension is present.
The <contact:add> and <contact:rem> elements contain the following child elements:  One or more <contact:status> elements that contain status values to be associated with or removed from the object.
When specifying a value to be removed, only the attribute value is significant; element text is not required to match a value for removal.
> element contains the following OPTIONAL child elements.
At least one child element MUST be present:
One or two <contact:postalInfo> elements that contain postal  address information.
Two elements are provided so that address information can be provided in both internationalized and localized forms; a "type" attribute is used to identify the two forms.
If an internationalized form (type "int") is provided, element content MUST be represented in a subset of UTF 8 that can be represented in the 7 bit US ASCII character set.
If a localized form (type "loc") is provided, element content MAY be represented in unrestricted UTF 8.
> element contains the following OPTIONAL child elements:  A <contact:name
> element that contains the name of the individual or role represented by the contact.
A <contact:org> element that contains the name of the organization with which the contact is affiliated.
A <contact:addr> element that contains address information associated with the contact.
<contact:street> elements that contain the contact's street address.
A <contact:city> element that contains the contact's city.
> element that contains the contact's state or province.
> element that contains the contact's postal code.
cc> element that contains the contact's country code.
A <contact:voice> element that contains the contact's voice telephone number.
A <contact:fax> element that contains the contact's facsimile telephone number.
A <contact:email> element that contains the contact's email address.
> element that contains authorization information associated with the contact object.
This mapping includes a password based authentication mechanism, but the schema allows new mechanisms to be defined in new schemas.
:disclose> element that allows a client to identify elements that require exceptional server operator handling to allow or restrict disclosure to third parties.
See Section 2.9 for a description of the child elements contained within the <contact
Example <update> command: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When an <update> command has been processed successfully, a server MUST respond with an EPP response with no <
Example <update> response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if an <update> command cannot be processed for any reason.
Offline Review of Requested Actions Commands are processed by a server in the order they are received from a client.
Though an immediate response confirming receipt and processing of the command is produced by the server, a server operator MAY perform an offline review of requested transform commands before completing the requested action.
In such situations, the response from the server MUST clearly note that the transform command has been received and processed but that the requested action is pending.
The status of the corresponding object MUST clearly reflect processing of the pending action.
The server MUST notify the client when offline processing of the action has been completed.
Examples describing a <create> command that requires offline review are included here.
Note the result code and message returned in response to the <create> command.
S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
Command completed successfully; action pending</msg
The status of the contact object after returning this response MUST include "pendingCreate".
The server operator reviews the request offline and informs the client of the outcome of the review either by queuing a service message for retrieval via the <poll> command or by using an out of band mechanism to inform the client of the request.
The service message MUST contain text that describes the notification in the child <msg
> element of the response <msgQ> element.
In addition, the EPP <
resData> element MUST contain a child <contact:
> element that identifies the contact namespace.
> element contains the following child elements:  A <contact:id> element that contains the server unique identifier of the contact object.
element contains a REQUIRED "paResult" attribute.
A positive boolean value indicates that the request has been approved and completed.
A negative boolean value indicates that the request has been denied and the requested action has not been taken.
> element that contains the client transaction identifier and server transaction identifier returned with the original response to process the command.
The client transaction identifier is OPTIONAL and will only be returned if the client provided an identifier with the original <create> command.
A <contact:paDate> element that contains the date and time describing when review of the requested action was completed.
Example "review completed" service message: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
Command completed successfully; ack to dequeue</msg
An EPP object mapping is specified in XML Schema notation.
The formal syntax presented here is a complete schema representation of the object mapping suitable for automated validation of EPP XML instances.
The BEGIN and END tags are not part of the schema; they are used to note the beginning and ending of the schema for URI registration purposes.
Copyright (c) 2009 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
Neither the name of Internet Society, IETF or IETF Trust, nor the names of specific contributors, may be used to endorse or promote products derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "
AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
xml version "1.0" encoding "UTF 8"?
Child elements found in EPP commands.
<element name "info" type "contact:
<element name "transfer" type "contact:authIDType"/>
<simpleType name "ccType"> <restriction base "token"> <length value "
<complexType name "e164Type"> <simpleContent> <extension base "contact:e164StringType"
> <attribute name "x" type "token"/
> <simpleType name "pcType"> <restriction base "token"> <maxLength value "16"/
> <simpleType name "postalLineType"> <restriction base "normalizedString"> <minLength value "1"/>
> <simpleType name "optPostalLineType"> <restriction base "normalizedString"> <maxLength value "255"/
Child elements of the <create> command.
> <element name "id" type "eppcom:
> <element name "fax" type "contact:e164Type" minOccurs "
<element name "name" type "contact:postalLineType"/
<element name "org" type "contact:optPostalLineType" minOccurs "
> <element name "addr" type "contact:
> </sequence> <attribute name "type" type "contact:postalInfoEnumType" use "
> <simpleType name "postalInfoEnumType"> <restriction base "token"> <enumeration value "loc"/
<element name "street" type "contact:optPostalLineType
" minOccurs "0" maxOccurs "3"/
> <element name "city" type "contact:postalLineType"/
<element name "sp" type "contact:optPostalLineType" minOccurs "
> <element name "pc" type "contact:pcType" minOccurs "
<complexType name "authInfoType"> <choice> <element name "pw" type "
> <element name "ext" type "eppcom:
<element name "name" type "contact:intLocType
" minOccurs "0" maxOccurs "2"/
> <element name "org" type "contact:intLocType
" minOccurs "0" maxOccurs "2"/
> <element name "addr" type "contact:intLocType
" minOccurs "0" maxOccurs "2"/
> <element name "voice" minOccurs "
> <element name "fax" minOccurs "
> <element name "email" minOccurs "
> </sequence> <attribute name "flag" type "boolean" use "required"/
<complexType name "intLocType"> <attribute name "type" type "contact:postalInfoEnumType" use "required"/
Child element of commands that require only an identifier.
"> <sequence> <element name "id" type "
Child element of commands that accept multiple identifiers.
> <element name "id" type "eppcom:
Child elements of the <info> and <transfer> commands.
<element name "id" type "
Child elements of the <update> command.
<element name "id" type "
> <element name "add" type "contact:addRemType" minOccurs "
> <element name "rem" type "contact:addRemType" minOccurs "
> <element name "chg" type "contact:
Data elements that can be added or removed.
<element name "status" type "contact:statusType" maxOccurs
Data elements that can be changed.
> <element name "postalInfo" type "contact:chgPostalInfoType" minOccurs "
<element name "voice" type "contact:e164Type" minOccurs "
> <element name "fax" type "contact:e164Type" minOccurs "
> <element name "email" type "eppcom:minTokenType" minOccurs "
> <element name "authInfo" type "contact:authInfoType" minOccurs "
<element name "name" type "contact:postalLineType" minOccurs "
> <element name "org" type "contact:optPostalLineType" minOccurs "
> <element name "addr" type "contact:addrType" minOccurs "
> </sequence> <attribute name "type" type "contact:postalInfoEnumType" use "required"/
<element name "chkData" type "contact:chkDataType"/>
<element name "creData" type "contact:
<element name "trnData" type "contact:trnDataType"/
> <element name "id" type "contact:
> <sequence> <element name "id" type "
> <sequence> <element name "id" type "
<element name "status" type "contact:statusType" maxOccurs
> <element name "fax" type "contact:e164Type" minOccurs "
> <element name "crID" type "
> <element name "crDate" type "dateTime"/>
<element name "upID" type "eppcom:
> <element name "upDate" type "dateTime" minOccurs "
> <element name "trDate" type "dateTime" minOccurs "
> <element name "authInfo" type "contact:authInfoType" minOccurs "
Status is a combination of attributes and an optional human readable message that may be expressed in languages other than English.
Pending action notification response elements.
> <element name "id" type "contact:paCLIDType"/
<element name "paTRID" type "epp:trIDType"/>
<complexType name "paCLIDType"> <simpleContent> <extension base "eppcom:
> <sequence> <element name "id" type "
Internationalization Considerations EPP is represented in XML, which provides native support for encoding information using the Unicode character set and its more compact representations including UTF 8.
Conformant XML processors recognize both UTF 8 and UTF 16
Though XML includes provisions to identify and use other character encodings through use of an "encoding" attribute in an <?
> declaration, use of UTF 8 is RECOMMENDED in environments where parser encoding support incompatibility exists.
All date time values presented via EPP MUST be expressed in Universal Coordinated Time using the Gregorian calendar.
The XML Schema allows use of time zone identifiers to indicate offsets from the zero meridian, but this option MUST NOT be used with EPP.
The extended date time form using upper case "T" and "Z" characters defined in [W3C.REC xmlschema 2 20041028]
MUST be used to represent date time values, as the XML Schema does not support truncated date time forms or lower case "T" and "Z" characters.
Humans, organizations, and other entities often need to represent social information in both a commonly understood character set and a locally optimized character set.
This specification provides features allowing representation of social information in both a subset of UTF 8 for broad readability and unrestricted UTF 8 for local optimization.
This document uses URNs to describe XML namespaces and XML schemas conforming to a registry mechanism described in [RFC3688].
Two URI assignments have been registered by the IANA.
Registration request for the contact namespace:
: See the "Author's Address" section of this document.
Namespace URIs do not represent an XML specification.
Registration request for the contact
: See the "Author's Address" section of this document.
: See the "Formal Syntax" section of this document.
Security Considerations Authorization information as described in Section 2.8 is REQUIRED to create a contact object.
This information is used in some query and transfer operations as an additional means of determining client authorization to perform the command.
Failure to protect authorization information from inadvertent disclosure can result in unauthorized transfer operations and unauthorized information release.
Both client and server MUST ensure that authorization information is stored and exchanged with high grade encryption mechanisms to provide privacy services.
The object mapping described in this document does not provide any other security services or introduce any additional considerations beyond those described by [RFC5730] or those caused by the protocol layers used by EPP.
Appendix A.  Changes from RFC 4933 1.
"This document obsoletes RFC 3733" to
"This document obsoletes RFC 4933".
Replaced references to RFC 0822 with references to 5322.
Replaced references to RFC 3733 with references to 4933.
Replaced references to RFC 4930 with references to 5730.
Updated reference to ISO 3166 1.
Removed pendingRenew status from Section 2.2 because this document does not define a mapping for the EPP <renew> command.
Modified text in Section 3.2.2 to include 2305 response code.
Other notification methods MAY be used in addition to the required service message" in Section 3.2.
Added 2201 response code text in Section 3.2. 11.
Added BSD license text to XML schema section.
