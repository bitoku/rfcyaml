- title: __initial_text__
  contents:
  - "             Efficient Mail Submission and Delivery (EMSD)\n                \
    \   Protocol Specification Version 1.3\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The protocol specified in this document may be satisfactory for\n\
    \   limited use in private wireless IP networks.  However, it is\n   unsuitable\
    \ for general-purpose message transfer or for transfer of\n   messages over the\
    \ public Internet, because of limitations that\n   include the following:\n  \
    \ - Lack of congestion control\n      EMSD is layered on ESRO [RFC 2188], which\
    \ does not provide\n      congestion control.  This makes EMSD completely unsuitable\
    \ for\n      end-to-end use across the public Internet.  EMSD should be\n    \
    \  considered for use in a wireless network only if all EMSD email\n      exchanged\
    \ between the wireless network and the public Internet\n      will transit an\
    \ EMSD<->SMTP gateway between the two regions.\n   - Inadequate security\n   \
    \   The document specifies only clear-text passwords for\n      authentication.\
    \  EMSD should be used across a wireless network\n      only if sufficiently strong\
    \ encryption is in use to protect the\n      clear-text password.\n   - Lack of\
    \ character set internationalization\n      EMSD has no provision for representation\
    \ of characters outside of\n      the ASCII repertoire or for language tags.\n\
    \   - Poorly defined gatewaying to and from Internet Mail\n      Because Internet\
    \ Mail and EMSD have somewhat different and\n      conflicting service models\
    \ and different data models, mapping\n      between them may provide good service\
    \ only in limited cases, and\n      this may cause operational problems.\n   The\
    \ IESG therefore recommends that EMSD deployment be limited to\n   narrow circumstances,\
    \ i.e., only to communicate with devices that\n   have inherent limitations on\
    \ the length and format of a message (no\n   more than a few hundred bytes of\
    \ ASCII text), using either:\n   a. wireless links with adequate link-layer encryption\
    \ and gatewayed\n      to the public Internet, or\n   b. a private IP network\
    \ that is either very over-provisioned or has\n      some means of congestion\
    \ control.\n   In the near future, the IESG may charter a working group to define\
    \ an\n   Internet standards-track protocol for efficient transmission of\n   electronic\
    \ mail messages, which will be highly compatible with\n   existing Internet mail\
    \ protocols, and which wil be suitable for\n   operation over the global Internet,\
    \ including both wireless and wired\n   links.\n"
- title: ABSTRACT
  contents:
  - "ABSTRACT\n   This document specifies the protocol and format encodings for\n\
    \   Efficient Mail Submission and Delivery (EMSD). EMSD is a messaging\n   protocol\
    \ that is highly optimized for submission and delivery of\n   short Internet mail\
    \ messages.  EMSD is designed to be a companion to\n   existing Internet mail\
    \ protocols.\n   This specification narrowly focuses on submission and delivery\
    \ of\n   short mail messages with a clear emphasis on efficiency.  EMSD is\n \
    \  designed specifically with wireless network (e.g., CDPD, Wireless-IP,\n   Mobile-IP)\
    \ usage in mind.  EMSD is designed to be a natural\n   enhancement to the mainstream\
    \ of Internet mail protocols when\n   efficiency in mail submission and mail delivery\
    \ are important.  As\n   such, EMSD is anticipated to become an initial basis\
    \ for convergence\n   of Internet Mail and IP-based Two-Way Paging.\n   The reliability\
    \ requirement for message submission and message\n   delivery in EMSD are the\
    \ same as existing email protocols.  EMSD\n   protocol accomplishes reliable connectionless\
    \ mail submission and\n   delivery services on top of Efficient Short Remote Operations\
    \ (ESRO)\n   protocols as specified in RFC-2188 [1].\n   Most existing Internet\
    \ mail protocols are not efficient.  Most\n   existing Internet mail protocols\
    \ are designed with simplicity and\n   continuity with SMTP traditions as two\
    \ primary requirements.  EMSD is\n   designed with efficiency as a primary requirement.\n\
    \   The early use of EMSD in the wireless environment is manifested as\n   IP-based\
    \ Two-Way Paging services.  The efficiency of this protocol\n   also presents\
    \ significant benefits for large centrally operated\n   Internet mail service\
    \ providers.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1  PRELIMINARIES                                      \
    \           4\n      1.1 Internet Mail Submission and Delivery     .   .   . \
    \  .   4\n      1.2 Relationship Of EMSD To Other Mail Protocols  .   .   .  \
    \ 5\n      1.3 EMSD Requirements and Goals   .   .   .   .   .   .   .   7\n \
    \     1.4 Anticipated Uses Of EMSD  .   .   .   .   .   .   .   .   8\n      1.5\
    \ Definitions of Terms Used in this Specification   .   .   9\n      1.6 Conventions\
    \ Used In This Specification    .   .   .   .   9\n      1.7 About This Specification\
    \  .   .   .   .   .   .   .   .  10\n   2  EFFICIENT MAIL SUBMISSION AND DELIVERY\
    \ OVERVIEW              10\n   3  EFFICIENT MAIL SUBMISSION AND DELIVERY PROTOCOL\
    \              11\n      3.1 Use Of Lower Layers   .   .   .   .   .   .   . \
    \  .   .  13\n          3.1.1 Use of ESROS    .   .   .   .   .   .   .   .  \
    \ .  13\n          3.1.2 Use Of UDP  .   .   .   .   .   .   .   .   .   .  13\n\
    \          3.1.3 Encoding Rules  .   .   .   .   .   .   .   .   .  13\n     \
    \     3.1.4 Presentation Context    .   .   .   .   .   .   .  14\n      3.2 EMSD-UA\
    \ Invoked Operations    .   .   .   .   .   .   .  14\n          3.2.1 submit\
    \  .   .   .   .   .   .   .   .   .   .   .  14\n          3.2.2 deliveryControl\
    \     .   .   .   .   .   .   .   .  17\n          3.2.3 deliveryVerify  .   .\
    \   .   .   .   .   .   .   .  21\n      3.3 EMSD-SA Invoked Operations    . \
    \  .   .   .   .   .   .  23\n          3.3.1 deliver     .   .   .   .   .  \
    \ .   .   .   .   .  23\n          3.3.2 submissionControl   .   .   .   .   .\
    \   .   .   .  25\n          3.3.3 submissionVerify    .   .   .   .   .   . \
    \  .   .  28\n      3.4 EMSD Common Information Objects   .   .   .   .   .  \
    \ .  30\n          3.4.1 SecurityElements    .   .   .   .   .   .   .   .  30\n\
    \          3.4.2 Message Segmentation and Reassembly     .   .   .  30\n     \
    \     3.4.3 Common Errors   .   .   .   .   .   .   .   .   .  33\n          3.4.4\
    \ ContentType     .   .   .   .   .   .   .   .   .  35\n          3.4.5 EMSDMessageId\
    \   .   .   .   .   .   .   .   .   .  35\n          3.4.6 EMSDORAddress   . \
    \  .   .   .   .   .   .   .   .  36\n          3.4.7 EMSDAddress     .   .  \
    \ .   .   .   .   .   .   .  36\n          3.4.8 DateTime    .   .   .   .   .\
    \   .   .   .   .   .  36\n          3.4.9 AsciiPrintableString    .   .   . \
    \  .   .   .   .  37\n          3.4.10 ProtocolVersionNumber  .   .   .   .  \
    \ .   .   .  37\n      3.5 Submission and Delivery Procedures    .   .   .   .\
    \   .  38\n   4  DUPLICATE OPERATION DETECTION SUPPORT                       \
    \ 40\n      4.1 Duplicate Operation Detection Support Overview    .   .  40\n\
    \          4.1.1 Operation Value     .   .   .   .   .   .   .   .  40\n     \
    \     4.1.2 Operation Instance Identifier   .   .   .   .   .  41\n   5  EMSD\
    \ PROCEDURE FOR OPERATIONS                                42\n      5.1 MTS Behavior\
    \  .   .   .   .   .   .   .   .   .   .   .  43\n          5.1.1 MTS Performer\
    \   .   .   .   .   .   .   .   .   .  43\n          5.1.2 Message-submission\
    \  .   .   .   .   .   .   .   .  44\n          5.1.3 Delivery-control    .  \
    \ .   .   .   .   .   .   .  46\n          5.1.4 Delivery-verify     .   .   .\
    \   .   .   .   .   .  46\n          5.1.5 MTS Invoker     .   .   .   .   . \
    \  .   .   .   .  46\n      5.2 UA Behavior   .   .   .   .   .   .   .   .  \
    \ .   .   .  49\n          5.2.1 UA Performer    .   .   .   .   .   .   .   .\
    \   .  49\n          5.2.2 UA Invoker  .   .   .   .   .   .   .   .   .   . \
    \ 52\n   6  EMSD FORMAT STANDARDS                                        54\n\
    \      6.1 Format Standard Overview  .   .   .   .   .   .   .   .  54\n     \
    \ 6.2 Interpersonal Messages    .   .   .   .   .   .   .   .  54\n          6.2.1\
    \ Heading fields  .   .   .   .   .   .   .   .   .  55\n          6.2.2 Body\
    \ part types     .   .   .   .   .   .   .   .  61\n   7  ACKNOWLEDGMENTS    \
    \                                          62\n   8  SECURITY CONSIDERATIONS \
    \                                     62\n   9  AUTHOR'S ADDRESS             \
    \                                62\n   A  EMSD-P ASN.1 MODULE               \
    \                           63\n   B  EMSD-IPM ASN.1 MODULE                  \
    \                      74\n   C  RATIONALE FOR KEY DESIGN DECISIONS          \
    \                 78\n      C.1 Deviation From The SMTP Model     .   .   .  \
    \ .   .   .  78\n          C.1.1 Comparison of SMTP and EMSD Efficiency  .   .\
    \   .  78\n      C.2 Use of ESRO Instead of TCP    .   .   .   .   .   .   . \
    \ 79\n      C.3 Use Of Remote Procedure Call (RPC) Model  .   .   .   .  79\n\
    \      C.4 Use Of ASN.1  .   .   .   .   .   .   .   .   .   .   .  80\n   D \
    \ FURTHER DEVELOPMENT                                          81\n   E  REFERENCES\
    \                                                   82\n   F  FULL COPYRIGHT STATEMENT\
    \                                     83\n"
- title: 1  PRELIMINARIES
  contents:
  - "1  PRELIMINARIES\n   Mail in the Internet was not a well-planned enterprise,\
    \ but instead\n   arose in more of an \"organic\" way.\n   This introductory section\
    \ is not intended to be a reference model and\n   concept vocabulary for mail\
    \ in the Internet.  Instead, it only\n   provides the necessary preliminaries\
    \ for the concepts and terms that\n   are essential to this specification.\n"
- title: 1.1  Internet Mail Submission and Delivery
  contents:
  - "1.1  Internet Mail Submission and Delivery\n   For the purposes of this specification,\
    \ mail submission is the\n   process of putting mail into the mail transfer system\
    \ (MTS).\n   For the purposes of this specification, mail delivery is the process\n\
    \   of the MTS putting mail into a user's final mail-box.\n   Throughout the Internet,\
    \ presently most of mail submission and\n   delivery is done through SMTP.\n \
    \  SMTP was defined as a message *transfer* protocol, that is, a means\n   to\
    \ route (if needed) and deliver mail by putting finished (complete)\n   messages\
    \ in a mail-box.  Originally, users connected to servers from\n   terminals, and\
    \ all processing occurred on the server.  Now, a split-\n   MUA (Mail User Agent)\
    \ model is common, with MUA functionality\n   occurring on both the user's own\
    \ system and the server.\n   In the split-MUA model, getting the messages to the\
    \ user is\n   accomplished through access to a mail-box on the server through\
    \ such\n   protocols as POP and IMAP. In the split-MUA model, user's access to\n\
    \   its message is a \"Message Pull\" paradigm where the user is required\n  \
    \ to poll his mailbox.  Proper message delivery based on a \"Message\n   Push\"\
    \ paradigm is presently not supported.  The EMSD protocol\n   addresses this shortcoming\
    \ with an emphasis on efficiency.\n   In the split-MUA model, message submission\
    \ is often accomplished\n   through SMTP. SMTP is widely used as a message *submission*\
    \ protocol.\n   Widespread use of SMTP for submission is a reality, regardless\
    \ of\n   whether this is good or bad.  EMSD protocol provides an alternative\n\
    \   mechanism for message submission which emphasizes efficiency.\n"
- title: 1.2  Relationship Of EMSD To Other Mail Protocols
  contents:
  - "1.2  Relationship Of EMSD To Other Mail Protocols\n   Various Internet mail protocols\
    \ facilitate accomplishment of various\n   functions in mail processing.\n   Figure\
    \ 1, categorizes the capabilities of SMTP, IMAP, POP and EMSD\n   based on the\
    \ following functions:\n   +------------------+------+-------+-----+------+\n\
    \   |         Protocols| SMTP |  IMAP | POP | EMSD |\n   |Functions         |\
    \      |       |     |      |\n   |------------------|------|-------|-----|------|\n\
    \   |Submission        | XX   |       |     | XXX  |\n   |------------------|------|-------|-----|------|\n\
    \   |Delivery          | XXX  |       |     | XXX  |\n   |------------------|------|-------|-----|------|\n\
    \   |Relay (Routing)   | XXX  |       |     |      |\n   |------------------|------|-------|-----|------|\n\
    \   |Retrieval         |      |  XXX  | XXX |  XX  |\n   |------------------|------|-------|-----|------|\n\
    \   |Mailbox Access    |      |  XXX  |  X  |      |\n   |------------------|------|-------|-----|------|\n\
    \   |Mailbox Synch.    |      |  XXX  |     |      |\n   +------------------+------+-------+-----+------+\n\
    \   Figure 1:  Messaging Protocols vs.  Supported Functions\n     o Mail Submission\n\
    \     o Mail Delivery\n     o Mail Routing (Relay)\n     o Mail Retrieval\n  \
    \   o Mail-box Access\n     o Mail-box Synchronization\n   In Figure 1, the number\
    \ of \"X\"es in each box denotes the extent to\n   which a particular function\
    \ is supported by a particular protocol.\n   Figure 1 clearly shows that combinations\
    \ of these protocols can be\n   used to complement each other in providing rich\
    \ functionality to the\n   user.  For example, a user interested in highly mobile\
    \ messaging\n   functionalities can use EMSD for \"submission and delivery of\
    \ time\n   critical and important messages\" and use IMAP for comprehensive\n\
    \   access to his/her mail-box.\n   For mail submission and delivery of short\
    \ messages EMSD is up to 5\n   times more efficient than SMTP both in terms of\
    \ the number of packets\n   transmitted and in terms of number of bytes transmitted.\
    \  Even with\n   PIPELINING and other possible optimizations of SMTP, EMSD is\
    \ up to 3\n   times more efficient than SMTP both in terms of the number of packets\n\
    \   transmitted and in terms of number of bytes transmitted.  Various\n   efficiency\
    \ studies comparing EMSD with SMTP, POP and IMAP are\n   available.  See Section\
    \ C.1.1 for more information about comparison\n   of SMTP and EMSD's efficiency.\n"
- title: 1.3  EMSD Requirements and Goals
  contents:
  - "1.3  EMSD Requirements and Goals\n   The requirements and goals driving design\
    \ of EMSD protocol are\n   enumerated below.\n    1. Provide for submission of\
    \ short mail messages with the same level\n       of functionality (or higher)\
    \ that the existing Internet mail\n       protocols provide.\n    2. Provide for\
    \ delivery of short mail messages with the same level\n       of functionality\
    \ (or higher) that the existing Internet mail\n       protocols provide.\n   \
    \ 3. Function as an extension of the existing mainstream Internet\n       mail.\n\
    \    4. Minimize the number of transmissions.\n    5. Minimize the number of bytes\
    \ transmitted.\n    6. Be quick:  minimize latency of message submission and delivery.\n\
    \    7. Provide the same level of reliability (or higher) that the\n       existing\
    \ email protocols provide.\n    8. Accommodate varying sizes of messages:  the\
    \ size of a message may\n       determine how the system deals with the message,\
    \ but the system\n       must accommodate it.\n    9. Be power efficient and respect\
    \ mobile platform resources:\n       including memory and CPU levels, as well\
    \ as battery power\n       longevity (i.e.  client-light and server-heavy).\n\
    \    10. Highly extendible:  different users will demand different\n        options,\
    \ so the solution cannot require every feature to be a\n        part of every\
    \ message.  Likewise, usage will emerge that is not\n        currently recognized\
    \ as a requirement.  The solution must be\n        extendible enough to handle\
    \ new, emerging requirements.\n    11. Secure:  provide the same level of security\
    \ (or higher) that the\n        existing email protocols provide.  Content confidentiality,\n\
    \        originator/recipient authentication and message integrity must\n    \
    \    be available options to users.\n    12. Easy to implement:  Re-use existing\
    \ technology as much as\n        possible.\n"
- title: 1.4  Anticipated Uses Of EMSD
  contents:
  - "1.4  Anticipated Uses Of EMSD\n   Any network and network operator which has\
    \ significant bandwidth and\n   capacity limitations can benefit from the use\
    \ of EMSD. Any network\n   user who must bear high costs for measured network\
    \ usage can benefit\n   from the use of EMSD.\n   Initial uses of EMSD is anticipated\
    \ to be primarily over IP-based\n   wireless networks to provide two-way paging\
    \ services.\n   EMSD can also function as an adjunct to Mail Access Protocols\
    \ for\n   \"Mail Notification Services\".\n   Considering:\n      o that most\
    \ wireless networks shall converge toward being IP-\n        based;\n      o that\
    \ two-way paging is the main proven application in most\n        wide-area wireless\
    \ networks;\n      o that two-way paging industry and the Internet Email industry\
    \ can\n        and should converge based on a set of open protocols that\n   \
    \     address the efficiency requirements adequately;\n      o that existing Internet\
    \ email protocols are not bandwidth\n        efficient;\n      o that existing\
    \ Internet email protocols do not properly support\n        the \"push\" model\
    \ of delivery of urgent messages,\n   the EMSD protocol is designed to facilitate\
    \ the convergence of IP-\n   based two-way paging and Internet email.\n   Mail\
    \ submission and delivery take place at the edges of the network.\n   More than\
    \ one mail submission and delivery protocols which address\n   requirements specific\
    \ to a particular user's environment are likely\n   to be developed.  Such diversity\
    \ on the edges of the network is\n   desirable and with the right protocols, this\
    \ diversity does not\n   adversely impact the integrity of the mail transfer system.\
    \  EMSD is\n   the initial basis for the mail submission and delivery protocol\
    \ to be\n   used when the user's environment demands efficiency.\n"
- title: 1.5  Definitions of Terms Used in this Specification
  contents:
  - "1.5  Definitions of Terms Used in this Specification\n   The following informal\
    \ definitions and acronyms are intended to help\n   describe EMSD model described\
    \ in this specification.\n   Efficient Mail Submission and Delivery Protocol (EMSD-P):\
    \ The\n       protocol used to transfer messages between the EMSD - Server\n \
    \      Agent (e.g., a Message Center) and the EMSD - User Agent (e.g., a\n   \
    \    Two-Way Pager), see Figure 2.\n   Message Transfer Agent (MTA)\n   Message\
    \ Transfer Service (MTS)\n   Message Routing Service (MRS): Collection of MTAs\
    \ responsible for\n       mail routing.\n   Message User Agent (MUA)\n   Efficient\
    \ Mail Submission Server Agent (EMS-SA): An Application\n       Process which\
    \ conforms to this protocol specification and accepts\n       mail from an EMS-UA\
    \ and transfers it towards its recipients.\n   Efficient Mail Delivery Server\
    \ Agent (EMD-SA): An Application Process\n       which conforms to this protocol\
    \ specification and delivers mail\n       to an EMD-UA.\n   Efficient Mail Submission\
    \ and Delivery Server Agent (EMSD-SA): An\n       Application Process which incorporates\
    \ both EMS-SA and EMD-SA\n       capabilities.\n   Efficient Mail Submission User\
    \ Agent (EMS-UA): An Application Process\n       which conforms to this protocol\
    \ specification and submits mail to\n       EMS-SA.\n   Efficient Mail Delivery\
    \ User Agent (EMD-UA): An Application Process\n       which conforms to this protocol\
    \ specification and accepts\n       delivery of mail from EMD-SA.\n   Efficient\
    \ Mail Submission and Delivery User Agent (EMSD-UA): An\n       Application Process\
    \ which incorporates both EMS-UA and EMD-UA\n       capabilities.\n"
- title: 1.6  Conventions Used In This Specification
  contents:
  - "1.6  Conventions Used In This Specification\n   The key words \"MUST\", \"MUST\
    \ NOT\", \"SHOULD\", \"SHOULD NOT\", and \"MAY\"\n   in this specification are\
    \ to be interpreted as defined in [2].\n   This specification uses the ES-OPERATION\
    \ notation defined in\n   Efficient Short Remote Operations (ESRO) protocols as\
    \ specified in\n   RFC-2188 [1].\n   Operations and information objects are typically\
    \ described using the\n   ES-OPERATION and ASN.1 notations in the relevant sections\
    \ of the\n   specification.\n   The complete machine verifiable ASN.1 modules\
    \ are also compiled in\n   one place in Appendix A and Appendix B.\n"
- title: 1.7  About This Specification
  contents:
  - "1.7  About This Specification\n   This protocol specification constitutes a point-of-record.\
    \  It\n   documents information exchanges and behaviors of existing\n   implementations.\
    \  It is a basis for implementation of efficient mail\n   submission and delivery\
    \ user agents and servers.\n   This specification has been developed entirely\
    \ outside of IETF. It\n   has had the benefit of review by many outside of IETF.\
    \ Much has been\n   learned from existing implementations of this protocol.  A\
    \ number of\n   deficiencies and areas of improvement have been identified and\
    \ are\n   documented in this specification.\n   This protocol specification is\
    \ being submitted on October 23, 1998\n   for timely publication as an Informational\
    \ RFC.\n   Future development and enhancements to this protocol may take place\n\
    \   inside of IETF.\n"
- title: 2  EFFICIENT MAIL SUBMISSION AND DELIVERY OVERVIEW
  contents:
  - "2  EFFICIENT MAIL SUBMISSION AND DELIVERY OVERVIEW\n   This section offers a\
    \ high level view of the Efficient Mail\n   Submission and Delivery Protocol and\
    \ Format Standards (EMSD-P&FS).\n   The EMSD-P&FS are used to transfer messages\
    \ between the EMSD - Server\n   Agent (e.g., a Message Center) and the EMSD -\
    \ User Agent (e.g., a\n   Two-Way Pager), see Figure 2.\n   This specification\
    \ defines the protocols between an EMSD - User Agent\n   (EMSD-UA) and an EMSD\
    \ - Server Agent (EMSD-SA). The EMSD - P&FS\n   consist of two independent components:\n\
    \    1. EMSD Format Standard (EMSD-FS).\n       EMSD-FS is a non-textual form\
    \ of compact encoding of Internet\n       mail (RFC-822) messages which facilitates\
    \ efficient transfer of\n       messages.  EMSD-FS is used in conjunction with\
    \ the EMSD-P but is\n       not a general replacement for RFC-822.  EMSD-FS defines\
    \ a method\n       of representation of short interpersonal messages.  It defines\n\
    \       the \"Content\" encoding (Header + Body).  Although EMSD-FS\n       contains\
    \ end-to-end information its scope is purely point-to-\n       point.  EMSD-FS\
    \ relies on EMSD-P (see 2 below) for the transfer\n       of the content to its\
    \ recipients.\n       This is described in the section entitled EMSD Format Standards.\n\
    \    2. Efficient Mail Submission and Delivery Protocol (EMSD-P).\n       EMSD-P\
    \ is responsible for wrapping an EMSD-FS message (see 1\n       above) in a point-to-point\
    \ envelope and submitting or delivering\n       it.  EMSD-P relies on the services\
    \ of Efficient Short Remote\n       Operation Services (ESROS) as specified in\
    \ RFC-2188 [1] for\n       transporting the point-to-point envelope.  Some of\
    \ the services\n       of EMSD-P include:  message originator authentication and\n\
    \       optional message segmentation and reassembly.  The EMSD-P is\n       expressed\
    \ in terms of abstract services using the ESROS notation.\n       This is described\
    \ in the section entitled Efficient Mail\n       Submission and Delivery Protocol.\n\
    \   It is important to recognize that EMSD-P and EMSD-FS are not end-to-\n   end,\
    \ but focus on the point-to-point transfer of messages.  The two\n   points being\
    \ EMSD-SA and EMSD-UA. EMSD-P function as elements of the\n   Internet mail environment,\
    \ which provide end-to-end (EMSD-User to any\n   other Messaging Originator or\
    \ Recipient) services.\n   Figure 2 illustrates how the EMSD-P&FS defines the\
    \ communication\n   between a specific EMSD-UA and a specific EMSD-SA. The Message\n\
    \   Transfer System may include a number of EMSD-SAs.  Each EMSD-SA may\n   have\
    \ any number of EMSD-UAs with which it communicates.\n   The Efficient Mail Submission\
    \ and Delivery Services use the Efficient\n   Short Remote Operation Services\
    \ (ESROS). They also use the Duplicate\n   Operation Detection Support Functions\
    \ as described in the section\n   entitled Duplicate Operation Detection Support\
    \ Functions.  These\n   functions guarantee that an operation is performed no\
    \ more than once.\n"
- title: 3  EFFICIENT MAIL SUBMISSION AND DELIVERY PROTOCOL
  contents:
  - "3  EFFICIENT MAIL SUBMISSION AND DELIVERY PROTOCOL\n   EM Submission is the process\
    \ of transferring a message from EMSD-UA\n   to EMSD-SA. EM Delivery is the process\
    \ of transferring a message from\n   EMSD-SA to EMSD-UA.\n   The Message-submission\
    \ service enables an EMSD-UA to submit a message\n   to the EMSD-SA for transfer\
    \ and delivery to one or more recipients.\n   The Message-submission Service comprises\
    \ of the submit operation --\n   invoked by the EMSD-UA -- and possibly the submitVerify\
    \ operation --\n   invoked by the EMSD-SA.\n   The Message-delivery service enables\
    \ the EMSD-SA to deliver a message\n   to an EMSD-UA. The Message-delivery Service\
    \ comprises of the deliver\n   operation -- invoked by the EMSD-SA -- and possibly\
    \ the deliverVerify\n   operation -- invoked by the EMSD-UA.\n   EMSD-UA uses\
    \ the following services:\n        o Message-submission\n   +---------------------------------------------+\n\
    \   | MTS                                         |\n   |                    \
    \                         |\n   |  +-------------------------+               \
    \ |\n   |  | MRS                     |                |\n   |  |  +---+      \
    \    +---+   |                |\n   |  |  |   |          | M |   |         +---+\
    \  |\n   |  |  |   |<-------->| T |<----------->|   |  |\n   |  |  |   |     \
    \     | A |   |         |   |  |               +---+\n   |  |  |   |         \
    \ +---+   |         | E |  |               | E |\n   |  |  |   |             \
    \     |         | M |  |               | M |\n   |  |  | M |                 \
    \ |         | S |  |   EMSD-P&FS   | S |\n   |  |  | T |<-------------------------->|\
    \ D |<---------------->| D |\n   |  |  | A |                  |         | - |\
    \  |               | - |\n   |  |  |   |          +---+   |         | S |  | \
    \              | U |\n   |  |  |   |          | M |   |         | A |  |     \
    \          | A |\n   |  |  |   |<-------->| T |<----------->|   |  |         \
    \      +---+\n   |  |  |   |          | A |   |         |   |  |\n   |  |  +---+\
    \          +---+   |         +---+  |\n   |  |                         |     \
    \           |\n   |  +-------------------------+                |\n   |      \
    \                                       |\n   |                              \
    \               |\n   +---------------------------------------------+\n      \
    \   Figure 2:  Efficient Mail Submission and Delivery Protocol\n      o Delivery-control\
    \ (the deliveryControl operation).\n   EMSD-SA uses the following services:\n\
    \      o Message-delivery\n      o Submission-control (the submissionControl operation).\n\
    \   This specification expresses information objects using ASN.1 [X.208].\n  \
    \ This specification expresses Remote Operations based on the model of\n   ESROS\
    \ as specified in Efficient Short Remote Operations (RFC-2188)\n   [1].  The ES-OPERATION\
    \ notation of (RFC-2188) is used throughout this\n   specification to define specific\
    \ operations.\n   This specification uses the Duplicate Operation Detection Support\n\
    \   functions as specified in Section 4.\n"
- title: 3.1  Use Of Lower Layers
  contents:
  - '3.1  Use Of Lower Layers

    '
- title: 3.1.1  Use of ESROS
  contents:
  - "3.1.1  Use of ESROS\n   ESRO protocol, as specified in (RFC-2188 [1]), provides\
    \ reliable\n   connectionless remote operation services on top of UDP [6] with\n\
    \   minimum overhead.  ESRO protocol supports segmentation and\n   reassembly,\
    \ concatenation and separation.\n   ESRO Services (2-Way and 3-Way handshake)\
    \ shall be used by the EMSD-\n   P.\n   ESRO Service Access Point (SAP) selectors\
    \ used by EMSD-P are\n   enumerated in the protocol.\n"
- title: 3.1.2  Use Of UDP
  contents:
  - "3.1.2  Use Of UDP\n   EMSD-P through ESRO MUST use UDP [6] port number 642 (esro-emsdp).\n\
    \   Note that specification of Service Access Points (SAP) for EMSD-P\n   include\
    \ the UDP Port Number specification in addition to ESRO SAP\n   selector specifications.\
    \  In other words, EMSD-P's use of ESRO SAPs\n   does not preclude use of the\
    \ same SAP selectors by other protocols\n   which use a UDP port other than port\
    \ 642.  Such usage of ESRO is a\n   design characteristic of ESRO which results\
    \ into bandwidth efficiency\n   and is not a scalability limitation.\n"
- title: 3.1.3  Encoding Rules
  contents:
  - "3.1.3  Encoding Rules\n   Use of Basic Encoding Rules (BER) [5] is mandatory\
    \ for both EMSD\n   Format Standards and EMSD Protocol.\n   In order to minimize\
    \ data transfer, the following restrictions shall\n   be maintained in the formatting\
    \ of EMSD PDUs:\n      o Specifically, when ASN.1 Basic Encoding Rules are being\
    \ used:\n         A. Only the \"Definite\" form of Length encoding MUST be used,\n\
    \         B. The \"Short\" form of Length encoding MUST be used whenever\n   \
    \         possible (i.e.  when the Length is less than 128), and\n         C.\
    \ OCTET STRING and BIT STRING values, and any other native\n            ASN.1\
    \ types which may be encoded as either \"Primitive\" or\n            \"Constructed\"\
    , MUST always be encoded as \"Primitive\" and\n            MUST never be \"Constructed\"\
    .\n"
- title: 3.1.4  Presentation Context
  contents:
  - "3.1.4  Presentation Context\n   Parameter Encoding Type of \"0\" MUST be used\
    \ in ESRO Protocol to\n   identify Basic Encoding Rules for operation arguments.\n"
- title: 3.2  EMSD-UA Invoked Operations
  contents:
  - "3.2  EMSD-UA Invoked Operations\n   The following operations are invoked by EMSD-UA:\n\
    \    a. submit\n    b. deliveryControl\n    c. deliveryVerify\n   The submit operation\
    \ uses the duplication detection functional unit\n   while deliveryControl and\
    \ deliveryVerify don't use the duplication\n   detection.\n   The complete definition\
    \ of these operations follows.\n"
- title: 3.2.1  submit
  contents:
  - "3.2.1  submit\n   The submit ES-OPERATION enables an EMSD-UA to submit a message\
    \ to the\n   EMSD-SA for transfer and delivery to one or more recipients.\n  \
    \ submit ES-OPERATION\n       ARGUMENT SubmitArgument\n       RESULT SubmitResult\n\
    \       ERRORS\n       {\n           submissionControlViolated,\n           securityError,\n\
    \           resourceError,\n           protocolViolation,\n           messageError\n\
    \       } ::= 33;\n   Duplicate operation detection is necessary for this operation.\n\
    \   The successful completion of the ES-OPERATION signifies that the\n   EMSD-SA\
    \ has accepted responsibility for the message (but not that it\n   has delivered\
    \ it to its intended recipients).\n   The disruption of the ES-OPERATION by an\
    \ error signifies that the\n   EMSD-SA cannot assume responsibility for the message.\n\
    \   Arguments\n   This operation's arguments are:\n   SubmitArgument ::= SEQUENCE\n\
    \   {\n     -- Security features\n     security                [0]    IMPLICIT\
    \ SecurityElement OPTIONAL,\n     -- Segmentation features for efficient transport\n\
    \     segment-info                            SegmentInfo OPTIONAL,\n     -- Content\
    \ type of the message\n     content-type                            ContentType,\n\
    \     --\n     -- THE CONTENT --\n     --\n     -- The submission content\n  \
    \   content                                 ANY DEFINED BY content-type\n   };\n\
    \   The fields are:\n   Security\n   See Section 3.4.1, \"SecurityElements\".\n\
    \   Segment-info\n   See Section 3.4.2, \"Message Segmentation and Reassembly\"\
    .\n   Content-type\n   This argument identifies the type of the content of the\
    \ message.  It\n   identifies the abstract syntax and the encoding rules used.\n\
    \   Content\n   This argument contains the information the message is intended\
    \ to\n   convey to the recipient(s).  It shall be generated by the originator\n\
    \   of the message.\n   Results\n   This operation's results are:\n   SubmitResult\
    \ ::= SEQUENCE\n       {\n           -- Permanent identifier for this message.\n\
    \           -- Also contains the message submission time.\n           -- See comment\
    \ regarding assignment of message identifiers,\n           -- at the definition\
    \ of EMSDLocalMessageId.\n           message-id                              EMSDLocalMessageId\n\
    \       };\n   The fields are:\n   Message-id\n   This result contains an EMSD-SA-identifier\
    \ that uniquely and\n   unambiguously identifies the message-submission.  It shall\
    \ be\n   generated by the EMSD-SA.\n   Errors\n   See Section 3.4.3.\n"
- title: 3.2.2  deliveryControl
  contents:
  - "3.2.2  deliveryControl\n   The deliveryControl ES-OPERATION enables the EMSD-UA\
    \ to temporarily\n   limit the operations that the EMSD-SA may invoke, and the\
    \ messages\n   that the EMSD-SA may deliver to the EMSD-UA via the Message delivery\n\
    \   ES-OPERATION.\n   deliveryControl ES-OPERATION\n       ARGUMENT DeliveryControlArgument\n\
    \       RESULT DeliveryControlResult\n       ERRORS\n       {\n           securityError,\n\
    \           resourceError,\n           protocolViolation\n       } ::= 2;\n  \
    \ The duplicate operation detection is not required for this operation.\n   The\
    \ EMSD-SA shall hold until a later time, rather than abandon, ES-\n   OPERATIONS\
    \ and messages that are presently suspended.\n   The successful completion of\
    \ the ES-OPERATION signifies that the\n   specified controls are now in force.\n\
    \   The ES-OPERATION returns an indication of any ES-OPERATIONS that the\n   EMSD-SA\
    \ would invoke, or any message types that the EMSD-SA would\n   deliver, were\
    \ it not for the prevailing controls.\n   Arguments\n   This operation's arguments\
    \ are:\n   DeliveryControlArgument ::= SEQUENCE\n   {\n     -- Request an addition\
    \ of or removal of a set of restrictions\n     restrict                [0]   \
    \  IMPLICIT Restrict DEFAULT update,\n     -- Which operations are to be placed\
    \ in the restriction set\n     permissible-operations  [1]     IMPLICIT Operations\
    \ OPTIONAL,\n     -- What maximum content length should be allowed\n     permissible-max-content-length\n\
    \                                     [2]     IMPLICIT INTEGER\n             \
    \                         (0..ub-content-length) OPTIONAL,\n     -- What is the\
    \ lowest priority message which may be delivered\n     permissible-lowest-priority\n\
    \                                     [3]     IMPLICIT ENUMERATED\n          \
    \                                    {\n                                     \
    \           non-urgent     (0),\n                                            \
    \    normal         (1),\n                                                urgent\
    \         (2)\n                                              } OPTIONAL,\n   \
    \  -- Security features\n     security                        [4]     IMPLICIT\
    \ SecurityElement\n                                             OPTIONAL,\n  \
    \   -- User Feature selection\n     user-features                   [5]     IMPLICIT\
    \ OCTET STRING\n                                             OPTIONAL\n   };\n\
    \   Restrict\n   This argument indicates whether the controls on ES-OPERATIONS\
    \ are to\n   be updated or removed.  It may be generated by the EMSD-UA.\n   This\
    \ argument may have one of the following values:\n      o update:  The other arguments\
    \ update the prevailing controls;\n      o remove:  All temporary controls are\
    \ to be removed\n   In the absence of this argument, the default update shall\
    \ be assumed.\n   Permissible-operations\n   This argument indicates the ES-OPERATIONS\
    \ that the EMSD-SA may invoke\n   on the EMSD-UA. It may be generated by the EMSD-UA.\n\
    \   This argument may have the value allowed or prohibited for each of\n   the\
    \ following:\n      o message-delivery:  The EMSD-SA may/may not invoke the deliver\n\
    \        ES-OPERATIONS; and\n      o Other ES-OPERATIONS are not subject to controls,\
    \ and may be\n        invoked at any time.\n   In the absence of this argument,\
    \ the ES-OPERATIONS that the EMSD-SA\n   may invoke on the EMSD-UA are unchanged.\n\
    \   Permissible-max-content-length\n   This argument contains the content-length,\
    \ in octets, of the\n   longest-content message that the EMSD-SA shall deliver\
    \ to the EMSD-UA\n   via the deliver ES-OPERATIONS. It may be generated by the\
    \ EMSD-UA.\n   In the absence of this argument, the permissible-maximum-content-\n\
    \   length of a message that the EMSD-SA may deliver to the EMSD-UA is\n   unchanged.\n\
    \   Permissible-lowest-priority\n   This argument contains the priority of the\
    \ lowest priority message\n   that the EMSD-SA shall deliver to the EMSD-UA via\
    \ the deliver ES-\n   OPERATIONS. It may be generated by the EMSD-UA.\n   This\
    \ argument may have one of the following values of the priority\n   argument of\
    \ the submit ES-OPERATIONS: normal, non-urgent or urgent.\n   In the absence of\
    \ this argument, the priority of the lowest priority\n   message that the EMSD-SA\
    \ shall deliver to the EMSD-UA is unchanged.\n   Security\n   See Section 3.4.1,\
    \ \"SecurityElements\".\n   User-features\n   This argument contains information\
    \ that allows the EMSD-UA to convey\n   to MTS the feature set that the user is\
    \ capable of supporting.  This\n   argument will be defined when the setConfiguration\
    \ and\n   getConfiguration operations are defined.\n   Results\n   DeliveryControlResult\
    \ ::= SEQUENCE\n   {\n     -- Operation types queued at the EMSD-SA due to existing\n\
    \     -- restrictions.\n     waiting-operations      [0]     IMPLICIT Operations\
    \ DEFAULT { },\n     -- Types of messages queued at the EMSD-SA due to\n     --\
    \ existing restrictions\n     waiting-messages        [1]     IMPLICIT WaitingMessages\n\
    \                                     DEFAULT { },\n     -- Content Types of messages\
    \ queued at the EMSD-SA\n     waiting-content-types   SEQUENCE SIZE (0..ub-content-types)\
    \ OF\n                                            ContentType DEFAULT { }\n  \
    \ };\n   Restrict ::= ENUMERATED\n   {\n       update                        \
    \              (1),\n       remove                                      (2)\n\
    \   };\n   Operations ::= BIT STRING\n   {\n       submission                \
    \                  (0),\n       delivery                                    (1)\n\
    \   };\n   WaitingMessages ::= BIT STRING\n   {\n       long-content         \
    \                       (0),\n       low-priority                            \
    \    (1)\n   };\n   Waiting-operations\n   This result indicates the ES-OPERATIONS\
    \ being held by the EMSD-SA,\n   and that the EMSD-SA would invoke on the EMSD-UA\
    \ if it were not for\n   the prevailing controls.  It may be generated by the\
    \ EMSD-SA.\n   This result may have the value holding or not-holding for each\
    \ of the\n   following:\n      o message-delivery:  The EMSD-SA is/is not holding\
    \ messages, and\n        would invoke the deliver ES-OPERATIONS on the EMSD-UA\
    \ if it were\n        not for the prevailing controls.\n   In the absence of this\
    \ result, it may be assumed that the EMSD-SA is\n   not holding any messages for\
    \ delivery due to the prevailing controls.\n   Waiting-messages\n   This result\
    \ indicates the kind of messages the EMSD-SA is holding for\n   delivery to the\
    \ EMSD-UA, and would deliver via the deliver ES-\n   OPERATIONS, if it were not\
    \ for the prevailing controls.  It may be\n   generated by the EMSD-SA.\n   This\
    \ result may have one or more of the following values:\n      o long-content:\
    \  The EMSD-SA has messages held for delivery to the\n        EMSD-UA which exceed\
    \ the permissible maximum-content-length\n        control currently in force;\n\
    \      o low-priority:  The EMSD-SA has messages held for delivery to the\n  \
    \      EMSD-UA of a lower priority than the permissible-lowest-priority\n    \
    \    control currently in force;\n   In the absence of this result, it may be\
    \ assumed that the EMSD-SA is\n   not holding any messages for delivery to the\
    \ EMSD-UA due to the\n   permissible-maximum-content-length, permissible-lowest-priority\
    \ or\n   permissible-security context controls currently in force.\n   Errors\n\
    \   See Section 3.4.3.\n"
- title: 3.2.3  deliveryVerify
  contents:
  - "3.2.3  deliveryVerify\n   The deliveryVerify ES-OPERATIONS enables the EMSD-UA\
    \ to verify\n   delivery of a message when it receives FAILURE.indication for\
    \ deliver\n   ES-OPERATIONS.\n   deliveryVerify ES-OPERATION\n       ARGUMENT\
    \ DeliveryVerifyArgument\n       RESULT DeliveryVerifyResult\n       ERRORS\n\
    \       {\n           verifyError,\n           resourceError,\n           protocolViolation\n\
    \       } ::= 5;\n   The duplicate operation detection is not required for this\
    \ operation.\n   Arguments\n   This operation's arguments are:\n   DeliveryVerifyArgument\
    \ ::= SEQUENCE\n   {\n     -- Identifier of this message. This is the same identifier\
    \ that\n     -- was provided to the originator in the Submission Result.\n   \
    \  -- See comment regarding assignment of message identifiers,\n     -- at the\
    \ definition of EMSDMessageId.\n     message-id                              \
    \        EMSDMessageId\n   };\n   Message-id\n   This argument contains an EMSD-SA-identifier\
    \ that distinguishes the\n   message from all other messages.  It shall be generated\
    \ by the EMSD-\n   SA, and shall have the same value as the message-submission-\n\
    \   identifier supplied to the originator of the message when the message\n  \
    \ was submitted.\n   Results\n   DeliveryVerifyResult ::= SEQUENCE\n   {\n   \
    \         status  DeliveryStatus\n   };\n    DeliveryStatus  ::= ENUMERATED\n\
    \   {\n           no-report-is-sent-out                   (1),\n           delivery-report-is-sent-out\
    \             (2),\n           non-delivery-report-is-sent-out         (3)\n \
    \   };\n   No-report-is-sent-out\n   This result indicates that EMSD-SA has received\
    \ the delivery verify\n   and no report is sent out (either because it has not\
    \ been requested\n   or EMSD-SA has problems and can not send it out).\n   Delivery-report-is-sent-out\n\
    \   This result indicates that EMSD-SA has received the delivery verify\n   and\
    \ has sent the delivery report out.\n   Non-Delivery-report-is-sent-out\n   This\
    \ result indicates that EMSD-SA has received the delivery verify\n   but it has\
    \ already sent out a non-Delivery report.  This should not\n   happen in normal\
    \ cases but a wrong user profile on EMSD-SA side can\n   result in this outcome.\n\
    \   Errors\n   See Section 3.4.3.\n"
- title: 3.3  EMSD-SA Invoked Operations
  contents:
  - "3.3  EMSD-SA Invoked Operations\n   This section defines the operations invoked\
    \ by the EMSD-SA:\n      a. deliver;\n      b. submissionControl;\n      c. submissionVerify.\n\
    \   The deliver operation uses 3-Way handshake service of ESROS. This\n   operation\
    \ always uses the duplication detection functional unit.\n   The submissionControl\
    \ and submissionVerify operations use 2-Way\n   handshake service of ESROS without\
    \ duplication detection.\n"
- title: 3.3.1  deliver
  contents:
  - "3.3.1  deliver\n   The deliver ES-OPERATIONS enables the EMSD-SA to deliver a\
    \ message to\n   an EMSD-UA.\n   deliver ES-OPERATION\n       ARGUMENT DeliverArgument\n\
    \       RESULT NULL\n       ERRORS\n       {\n           deliveryControlViolated,\n\
    \           securityError,\n           resourceError,\n           protocolViolation,\n\
    \           messageError\n       } ::= 35;\n   The EMSD-UA MUST not refuse performing\
    \ the deliver ES-OPERATION\n   unless the delivery would violate the deliveryControl\
    \ restrictions\n   then in force.\n   Arguments\n   This operation's arguments\
    \ are:\n   DeliverArgument ::= SEQUENCE\n   {\n     -- Identifier of this message.\
    \ This is the same identifier that\n     -- was provided to the originator in\
    \ the Submission Result.\n     -- See comment regarding assignment of message\
    \ identifiers,\n     -- at the definition of EMSDMessageId.\n     message-id \
    \                                     EMSDMessageId,\n     -- Time the message\
    \ was delivered to the recipient by EMSD-SA\n     message-delivery-time      \
    \                     DateTime,\n     -- Time EMSD-SA originally took responsibility\
    \ for processing\n     -- of this message. This field shall be omitted if the\
    \ message-id\n     -- contains an EMSDLocalMessageId, because that field contains\n\
    \     -- the submission time within it.\n     message-submission-time [0]  IMPLICIT\
    \ DateTime OPTIONAL,\n     -- Security features\n     security               \
    \ [1]  IMPLICIT SecurityElement OPTIONAL,\n     -- SegContentTypementation features\
    \ for efficient transport\n     segment-info                              SegmentInfo\
    \ OPTIONAL,\n     -- The type of the content\n     content-type              \
    \                  ContentType,\n     --\n     -- THE CONTENT --\n     --\n  \
    \   -- The submitted (and now being delivered) content\n     content         \
    \                  ANY DEFINED BY content-type\n   };\n   message-id\n   This\
    \ argument contains an EMSD-SA-identifier that distinguishes the\n   message from\
    \ all other messages.  When within the EMSD, it MUST be\n   generated by the EMSD-SA,\
    \ and MUST have the same value as the\n   message-submission-identifier supplied\
    \ to the originator of the\n   message when the message was submitted.\n   Message-delivery-time\n\
    \   This argument contains the Time at which delivery occurs and at which\n  \
    \ the EMSD-SA is relinquishing responsibility for the message.  It\n   shall be\
    \ generated by the EMSD-SA.\n   Results\n   This operation returns an empty result\
    \ as indication of success.\n   Errors\n   See Section 3.4.3.\n"
- title: 3.3.2  submissionControl
  contents:
  - "3.3.2  submissionControl\n   submissionControl ES-OPERATION\n       ARGUMENT\
    \ SubmissionControlArgument\n       RESULT SubmissionControlResult\n       ERRORS\n\
    \       {\n           securityError,\n           resourceError,\n           protocolViolation\n\
    \       } ::= 4;\n   The submissionControl ES-OPERATIONS enables the EMSD-SA to\n\
    \   temporarily limit the operations that the EMSD-UA may invoke, and the\n  \
    \ messages that the EMSD-UA may submit to the EMSD-SA via the submit\n   ES-OPERATIONS.\n\
    \   The duplicate operation detection is not required for this operation.\n  \
    \ The EMSD-UA should hold until a later time, rather than abandon, ES-\n   OPERATIONS\
    \ and messages that are presently suspended.\n   The successful completion of\
    \ the ES-OPERATIONS signifies that the\n   specified controls are now in force.\
    \  These controls supersede any\n   previously in force, and remain in effect\
    \ until the association is\n   released or the EMSD-SA re-invokes the submissionControl\
    \ ES-\n   OPERATIONS.\n   The ES-OPERATIONS returns an indication of any ES-OPERATIONS\
    \ that the\n   EMSD-UA would invoke were it not for the prevailing controls.\n\
    \   Arguments\n   This operation's arguments are:\n   SubmissionControlArgument\
    \ ::= SEQUENCE\n   {\n     -- Request an addition of or removal of a set of restrictions\n\
    \     restrict               [0]     IMPLICIT Restrict DEFAULT update,\n     --\
    \ Which operations are to be placed in the restriction set\n     permissible-operations\
    \  [1]     IMPLICIT Operations OPTIONAL,\n     -- What maximum content length\
    \ should be allowed\n     permissible-max-content-length\n                   \
    \          [2]     IMPLICIT INTEGER\n                                     (0..ub-content-length)\
    \ OPTIONAL,\n     -- Security features\n     security                [3]     IMPLICIT\
    \ SecurityElement\n                                                     OPTIONAL\n\
    \   };\n   Restrict\n   This argument indicates whether the controls on ES-OPERATIONS\
    \ are to\n   be updated or removed.  It may be generated by the EMSD-SA.\n   This\
    \ argument may have one of the following values:\n      o update:  The other arguments\
    \ update the prevailing controls;\n      o remove:  All temporary controls are\
    \ to be removed\n   In the absence of this argument, the default update shall\
    \ be assumed.\n   Permissible-operations\n   This argument indicates the ES-OPERATIONS\
    \ that the EMSD-UA may invoke\n   on the EMSD-SA. It may be generated by the EMSD-SA.\n\
    \   This argument may have the value allowed or prohibited for each of\n   the\
    \ following:\n      o submit:  The EMSD-UA may/may not invoke the submit ES-\n\
    \        OPERATIONS; and\n      o Other ES-OPERATIONS are not subject to controls,\
    \ and may be\n        invoked at any time.\n   In the absence of this argument,\
    \ the ES-OPERATIONS that the EMSD-UA\n   may invoke on the EMSD-SA are unchanged.\n\
    \   Permissible-max-content-length\n   This argument contains the content-length,\
    \ in octets, of the\n   longest-content message that the EMSD-UA shall submit\
    \ to the EMSD-SA\n   via the submit ES-OPERATIONS. It may be generated by the\
    \ EMSD-SA.\n   In the absence of this argument, the permissible-maximum-content-\n\
    \   length of a message that the EMSD-UA may submit to the EMSD-SA is\n   unchanged.\n\
    \   Security\n   See Section 3.4.1, \"SecurityElements\".\n   Results\n   SubmissionControlResult\
    \ ::= SEQUENCE\n   {\n     -- Operation types queued at the EMSD-SA due to existing\n\
    \     -- restrictions.\n     waiting-operations    [0]   IMPLICIT Operations DEFAULT\
    \ { }\n   };\n   Waiting-operations\n   This result indicates the ES-OPERATIONS\
    \ being held by the EMSD-UA,\n   and that the EMSD-UA would invoke if it were\
    \ not for the prevailing\n   controls.  It may be generated by the EMSD-UA.\n\
    \   This result may have the value holding or not-holding for each of the\n  \
    \ following:\n      o submit:  The EMSD-UA is/is not holding messages, and would\n\
    \        invoke the submit ES-OPERATIONS if it were not for the\n        prevailing\
    \ controls.\n   In the absence of this result, it may be assumed that the EMSD-UA\
    \ is\n   not holding any messages for submission due to the prevailing\n   controls.\n\
    \   Errors\n   See Section 3.4.3.\n"
- title: 3.3.3  submissionVerify
  contents:
  - "3.3.3  submissionVerify\n   The submissionVerify ES-OPERATIONS enables the EMSD-SA\
    \ to verify if\n   the EMSD-UA has received the result of its submission.\n  \
    \ submissionVerify  ES-OPERATION\n       ARGUMENT SubmissionVerifyArgument\n \
    \      RESULT SubmissionVerifyResult\n       ERRORS\n       {\n           submissionVerifyError,\n\
    \           resourceError,\n           protocolViolation\n       } ::= 6;\n  \
    \ The duplicate operation detection is not required for this operation.\n   Arguments\n\
    \   This operation's arguments are:\n   SubmissionVerifyArgument ::= SEQUENCE\n\
    \     -- Identifier of this message. This is the same identifier that\n     --\
    \ was provided to the originator in the Submission Result.\n     -- See comment\
    \ regarding assignment of message identifiers,\n     -- at the definition of EMSDMessageId.\n\
    \     {\n        message-id                                  EMSDMessageId\n \
    \    };\n   Message-id\n   This argument contains an EMSD-SA-identifier that distinguishes\
    \ the\n   message from all other messages.  It shall be generated by the EMSD-\n\
    \   SA, and shall have the same value as the message-submission-\n   identifier\
    \ supplied to the originator of the message when the message\n   was submitted.\n\
    \   Results\n   SubmissionVerifyResult ::= SEQUENCE\n   {\n           status \
    \ SubmissionStatus\n   };\n   SubmissionStatus::= ENUMERATED\n   {\n         \
    \  send-message            (1),\n           drop-message            (2)\n   };\n\
    \   Send-message\n   This result indicates that EMSD-SA is supposed to send the\
    \ message\n   out.\n   Drop-message\n   This result indicates that EMSD-SA is\
    \ supposed to drop the message.\n   Errors\n   See Section 3.4.3.\n"
- title: 3.4  EMSD Common Information Objects
  contents:
  - '3.4  EMSD Common Information Objects

    '
- title: 3.4.1  SecurityElements
  contents:
  - "3.4.1  SecurityElements\n   SecurityElement ::= SEQUENCE\n   {\n     credentials\
    \                          Credentials,\n     contentIntegrityCheck          \
    \      ContentIntegrityCheck OPTIONAL\n   };\n   Credentials ::= CHOICE\n   {\n\
    \     simple                          [0]     IMPLICIT SimpleCredentials\n   \
    \  -- Strong Credentials are for future study\n     -- strong                \
    \       [1]     IMPLICIT StrongCredentials\n     -- externalProcedure        \
    \    [2]     EXTERNAL\n   };\n   SimpleCredentials ::= SEQUENCE\n   {\n     eMSDAddress\
    \                     EMSDAddress OPTIONAL,\n     password                [0]\
    \     IMPLICIT OCTET STRING\n                             SIZE (0..ub-password-length))\
    \ OPTIONAL\n   };\n   -- StrongCredentials ::= NULL\n   -- for now.\n   -- ContentIntegrityCheck\
    \ is a 16-bit checksum of content\n   ContentIntegrityCheck ::= INTEGER (0..65535);\n"
- title: 3.4.2  Message Segmentation and Reassembly
  contents:
  - "3.4.2  Message Segmentation and Reassembly\n   Small messages can benefit from\
    \ the efficiencies of connectionless\n   feature of ESROS (See Efficient Short\
    \ Remote Operations, RFC-2188\n   [1]).\n   Very large messages are transferred\
    \ using protocols (e.g., SMTP) that\n   rely on Connection Oriented Transport\
    \ Service (e.g., TCP).\n   When a message is too large to fit in a single connectionless\
    \ PDU but\n   is not large enough to justify the overhead of connection\n   establishment,\
    \ it may be more efficient for the message to be\n   segmented and reassembled\
    \ while the connectionless service of ESROS\n   is used.  If the underlying Remote\
    \ Operation Service is capable of\n   efficient segmentation/reassembly over connectionless\
    \ (CL) services,\n   then use of the segmenting/reassembly mechanism introduced\
    \ in this\n   section is not necessary.  This feature is accommodated in this\
    \ layer\n   by:\n   SegmentInfo ::= CHOICE\n   {\n     first           [APPLICATION\
    \ 2]         IMPLICIT FirstSegment,\n     other           [APPLICATION 3]    \
    \     IMPLICIT OtherSegment\n   };\n   FirstSegment ::= SEQUENCE\n   {\n     sequence-id\
    \                             INTEGER,\n     number-of-segments              \
    \        INTEGER\n     -- number-of-segments must not exceed ub-total-number-of-segments\n\
    \   };\n   OtherSegment ::= SEQUENCE\n   {\n     sequence-id                 \
    \            INTEGER,\n     segment-number                          INTEGER\n\
    \   };\n   Segmentation and reassembly only applies to Message-submission and\n\
    \   Message-delivery.\n   The sender of the message is responsible for segmenting\
    \ the message\n   content into segments that fit in CL PDUs.  The segmented content\
    \ is\n   sent in a sequence of message-segments each carrying a segment of the\n\
    \   content.  sequence-Id is a unique identifier that is present in all\n   message-segments.\
    \  In addition to sequence identifier, the first\n   message-segment specifies\
    \ the total number of segments (number-of-\n   segments).  Other message-segments\
    \ have a segment sequence number\n   (segment-number).  The receiver is responsible\
    \ for sequencing (based\n   on segment-number) and reassembling the entire message.\n\
    \   Segmenting over the Connectionless ESRO Service\n   The sender of the message\
    \ maps the original message into an ordered\n   sequence of message-segments.\
    \  This sequence shall not be interrupted\n   by other messages over the same\
    \ ESROS association.\n   All message-segments in the sequence shall be assigned\
    \ a sequence\n   identifier by sender.  The sequence identifier shall be incremented\n\
    \   by one by the sender after transmission of a complete message\n   sequence.\n\
    \   The first message-segment specifies the total number of segments.\n   All\
    \ message-segments in the sequence except the first one shall be\n   sequentially\
    \ numbered, starting at 1 (first message-segment has\n   implicit segment number\
    \ of 0).\n   Each message-segment is transmitted by issuing a Message-submission\n\
    \   or Message-delivery ES-OPERATIONS. All segments of a segmented\n   message\
    \ are identified by the same sequence-id.  For a given message,\n   the receiver\
    \ should not impose any restriction on the order of\n   arrival of message-segments.\n\
    \   There is no requirement that any message-segment content be of\n   maximum\
    \ length allowed by ESROS for connectionless transmission;\n   however, no more\
    \ than ub-total-number-of-segments segments can be\n   derived from a single message.\n\
    \   The receiver reassembles a sequence of message-segments into a single\n  \
    \ message.  A message shall not be further processed unless all\n   segments of\
    \ the message are received.  Failure to receive the message\n   shall be determined\
    \ by the following events:\n      o Expiration of Reassembly Timer (see Section\
    \ 3.4.3).\n      o Receipt of a message-segment with different sequence identifier.\n\
    \   In the event of the above mentioned failures, the receiver shall\n   discard\
    \ a partially assembled sequence.\n   In Reassembly process, all arguments other\
    \ than content are ignored\n   in all segments except the first one.  The content\
    \ parts of all\n   segments are concatenated to compose the original message content.\n\
    \   When sender receives FAILURE.indication (as opposed to a\n   resourceError)\
    \ for a message-segment, the whole message shall be\n   retransmitted.\n   In\
    \ the case of submission and delivery operations, the verify\n   function is used\
    \ as described below:\n   Receiver ignores FAILURE.indications received for message-segments,\n\
    \   and just collects the message-segments to complete the message.\n   However,\
    \ it keeps a failure status for a segmented message which says\n   if any segment\
    \ of the message has received FAILURE.indication.  When\n   receiver succeeds\
    \ to assemble the whole segmented message, then if\n   the status of the message\
    \ shows there has been a FAILURE.indication\n   for any of the message-segments,\
    \ it verifies the message through\n   verify operation.  It's not enough to invoke\
    \ verify operation just\n   based on the last message-segment because the sender\
    \ might send a\n   segment without waiting for the result of the previous segment.\
    \  In\n   such cases, there might be any combination of success and failure for\n\
    \   message-segments on the sender side.\n   Receiver uses the error code ResourceError\
    \ (see Section 3.4.3) to ask\n   for retransmission of a single segment and uses\
    \ the error code\n   MessageError (see Section 3.4.3) to ask for retransmission\
    \ of all\n   segments (the whole message).\n   Reassembly Timer\n   The Reassembly\
    \ Timer is a local timer maintained by the receiver of\n   message-segments that\
    \ assists in performing the reassembly function.\n   This timer determines how\
    \ long a receiver waits for all segments of a\n   message-segment sequence to\
    \ be received.  The timer protects the\n   receiver from the loss of a series\
    \ of segments and possible sequence\n   identifier wrap-around.\n   The Reassembly\
    \ Timer shall be started on receipt of a message-segment\n   with different sequence\
    \ identifier than that previously received.\n   The timer shall be stopped on\
    \ receipt of all segments composing the\n   sequence.\n   The value of Reassembly\
    \ Timer is defined based on the network\n   characteristics and the number of\
    \ segments.  This requires that the\n   transmission of all segments of a single\
    \ message must be completed\n   within this time limit.\n"
- title: 3.4.3  Common Errors
  contents:
  - "3.4.3  Common Errors\n   protocolVersionNotRecognized  ERROR PARAMETER NULL ::=\
    \ 1;\n   submissionControlViolated  ERROR PARAMETER NULL ::= 2;\n   messageIdentifierInvalid\
    \  ERROR PARAMETER NULL ::= 3;\n   securityError ERROR PARAMETER security-problem\
    \ SecurityProblem ::= 4;\n   deliveryControlViolated   ERROR PARAMETER NULL ::=\
    \ 5;\n   resourceError  ERROR PARAMETER NULL ::= 6;\n   protocolViolation  ERROR\
    \ PARAMETER NULL ::= 7;\n   messageError  ERROR PARAMETER NULL ::= 8;\n   SecurityProblem\
    \ ::= INTEGER (0..127);\n   protocolVersionNotRecognized\n   The major and minor\
    \ protocol versions presented do not match those\n   recognized as being valid.\n\
    \   submissionControlViolated\n   The Submission control violated error reports\
    \ the violation by the\n   MTS-user of a control on submission services imposed\
    \ by the MTS via\n   the Submission control service.  The Submission control violated\n\
    \   abstract-error has no parameters.\n   messageIdentifierInvalid\n   The Message\
    \ Identifier Invalid error reports that the Message\n   Identifier presented to\
    \ the MTS is not considered valid.\n   securityError\n   The Security error reports\
    \ that the requested operation could not be\n   provided by the MTS or MTS-user\
    \ because it would violate the security\n   policy in force.\n   deliveryControlViolated\n\
    \   The Delivery control violated error reports the violation by the MTS\n   of\
    \ a control on delivery operations imposed by the MTS-user via the\n   Delivery-control\
    \ operation.\n   resourceError\n   The messaging agent cannot currently support\
    \ this operation.  In the\n   case of segmentation and reassembly, resourceError\
    \ is by the receiver\n   used to request that the sender retransmit of a single\
    \ segment.\n   protocolViolation\n   Indicates that one or more mandatory argument(s)\
    \ were missing.\n   messageError\n   For a multi-segment message, this error indicates\
    \ that the messaging\n   agent has not received the message completely and that\
    \ the message\n   must be retransmitted.\n   SecurityProblem\n   To ensure the\
    \ security-policy is not violated during delivery, the\n   message-security-label\
    \ is checked against the security-context.  If\n   delivery is barred by the security-policy\
    \ then, subject to the\n   security policy, a report instruction for this is generated.\n"
- title: 3.4.4  ContentType
  contents:
  - "3.4.4  ContentType\n   ContentType ::=  INTEGER\n   {\n     -- Content type 0\
    \ is reserved and shall never be transmitted.\n     reserved                 \
    \                (0),\n     -- Content types between 1 and 31 (inclusive) are\
    \ for\n     -- internal-use only\n     probe                                 \
    \   (1), -- reserved\n     delivery-report                          (2), -- reserved\n\
    \     -- Content types between 32 and 63 (inclusive) are for\n     -- message\
    \ types  defined within this specifications.\n     emsd-interpersonal-messaging-1995\
    \        (32),\n     voice-messaging                          (33) -- reserved\n\
    \     -- Content types beyond and including 64 are for\n     -- bilaterally-agreed\
    \ use between peers.\n   } (0..127);\n"
- title: 3.4.5  EMSDMessageId
  contents:
  - "3.4.5  EMSDMessageId\n   If this message was originated as an RFC-822 message,\
    \ then this\n   EMSDMessageId shall be the \"Message-Id:\" field from that message.\
    \  If\n   this message was originated within the EMSD domain, then this\n   identifier\
    \ shall be unique for the EMSD-SA generating this id.\n   EMSDMessageId ::= CHOICE\n\
    \   {\n     EMSDLocalMessageId  [APPLICATION 4]\n                         IMPLICIT\
    \ EMSDLocalMessageId,\n     rfc822MessageId     [APPLICATION 5]\n            \
    \             IMPLICIT AsciiPrintableString\n                         (SIZE (0..ub-message-id-length))\n\
    \   };\n   EMSDLocalMessageId ::= SEQUENCE\n   {\n     submissionTime        \
    \    DateTime,\n     messageNumber             INTEGER (0..ub-local-message-nu)\n\
    \   };\n"
- title: 3.4.6 EMSDORAddress
  contents:
  - "3.4.6 EMSDORAddress\n   EMSDORAddress ::= CHOICE\n   {\n     -- This is the local-format\
    \ address\n     emsd-local-address-format            EMSDAddress,\n     -- This\
    \ is a globally-unique RFC-822 Address\n     rfc822DomainAddress             \
    \    AsciiPrintableString\n   };\n   In the global sense Originators and Recipients\
    \ are represented by\n   EMSDORAddress.  The rfc822Domain may be used to address\
    \ any\n   recipient.\n"
- title: 3.4.7  EMSDAddress
  contents:
  - "3.4.7  EMSDAddress\n   EMSDAddress ::= SEQUENCE\n   {\n     emsd-address    \
    \    OCTET STRING (SIZE\n                         (1..ub-emsd-address-length)),\n\
    \     -- emsd-address is a decimal integer in BCD\n        (Binary Encoded Decimal)\
    \ format.\n     -- If it had an odd number of digits, it is\n     -- padded with\
    \ 0 on the left.\n     emsd-name          [0]  IMPLICIT OCTET STRING\n       \
    \                      (SIZE (0..ub-emsd-name-length))\n                     \
    \        OPTIONAL\n   };\n   Originator and Recipients in the scope of EMSD network\
    \ are identified\n   by a digit based addressing scheme.  EMSDAddress can only\
    \ be used\n   where the scope of addressing has clearly been limited to the EMSD\n\
    \   network.\n"
- title: 3.4.8  DateTime
  contents:
  - "3.4.8  DateTime\n   DateTime ::= INTEGER;\n   DateTime is a Julian date, expressed\
    \ as the number of seconds since\n   00:00:00 UTC, January 1, 1970.\n"
- title: 3.4.9  AsciiPrintableString
  contents:
  - "3.4.9  AsciiPrintableString\n   Iso8859String ::=  GeneralString;\n   AsciiPrintableString\
    \ ::= [APPLICATION 0]\n                            IMPLICIT Iso8859String (FROM\n\
    \       (\" \"|\"!\"|\"#\"|\"$\"|\"%\"|\"&\"|\"'\"|\"(\"|\")\"|\"*\"|\"+\"|\"\
    ,\"|\"-\"|\".\"|\"/\"|\n        \"0\"|\"1\"|\"2\"|\"3\"|\"4\"|\"5\"|\"6\"|\"7\"\
    |\"8\"|\"9\"|\":\"|\";\"|\"<\"|\"=\"|\">\"|\n        \"?\"|\"@\"|\"A\"|\"B\"|\"\
    C\"|\"D\"|\"E\"|\"F\"|\"G\"|\"H\"|\"I\"|\"J\"|\"K\"|\"L\"|\"M\"|\n        \"N\"\
    |\"O\"|\"P\"|\"Q\"|\"R\"|\"S\"|\"T\"|\"U\"|\"V\"|\"W\"|\"X\"|\"Y\"|\"Z\"|\"[\"\
    |\"]\"|\n        \"^\"|\"_\"|\"`\"|\"a\"|\"b\"|\"c\"|\"d\"|\"e\"|\"f\"|\"g\"|\"\
    h\"|\"i\"|\"j\"|\"k\"|\"l\"|\n        \"m\"|\"n\"|\"o\"|\"p\"|\"q\"|\"r\"|\"s\"\
    |\"t\"|\"u\"|\"v\"|\"w\"|\"x\"|\"y\"|\"z\"|\"{\"|\n        \"|\"|\"}\"|\"~\"|\"\
    \\\"|\"\"\"\"));\n"
- title: 3.4.10  ProtocolVersionNumber
  contents:
  - "3.4.10  ProtocolVersionNumber\n   ProtocolVersionNumber ::= [APPLICATION 1] \
    \   SEQUENCE\n   {\n     version-major                   INTEGER,\n  +------------------+-------+----+---------+----+---------+-----+-----+\n\
    \  |Operation         |Invoker|Sap |Performer|Sap |Duplicate|OpId |ESROS|\n  |\
    \                  |       |Sel |         |Sel |Detect   |     |Use  |\n  |__________________|_______|____|_________|____|_________|_____|_____|\n\
    \  |submit            |UA     |4   |MTS      |5   |Yes      |33   |3-Way|\n  |__________________|_______|____|_________|____|_________|_____|_____|\n\
    \  |deliver           |MTS    |2   |UA       |3   |Yes      |35   |3-Way|\n  |__________________|_______|____|_________|____|_________|_____|_____|\n\
    \  |deliveryControl   |UA     |8   |MTS      |9   |No       |2    |2-Way|\n  |__________________|_______|____|_________|____|_________|_____|_____|\n\
    \  |submissionControl |MTS    |6   |UA       |7   |No       |4    |2-Way|\n  |__________________|_______|____|_________|____|_________|_____|_____|\n\
    \  |submissionVerify  |MTS    |6   |UA       |7   |No       |6    |2-Way|\n  |__________________|_______|____|_________|____|_________|_____|_____|\n\
    \  |deliveryVerify    |UA     |8   |MTS      |9   |No       |5    |2-Way|\n  |__________________|_______|____|_________|____|_________|_____|_____|\n\
    \  |getConfiguration  |UA     |8   |MTS      |9   |No       |7    |2-Way|\n  |__________________|_______|____|_________|____|_________|_____|_____|\n\
    \  |setConfiguration  |MTS    |6   |UA       |7   |No       |8    |2-Way|\n  +------------------+-------+----+---------+----+---------+-----+-----+\n\
    \                   Table 1:  EMSD-P Operations Summary\n     version-minor  \
    \         [0]     IMPLICIT INTEGER DEFAULT 0\n   }\n"
- title: 3.5  Submission and Delivery Procedures
  contents:
  - "3.5  Submission and Delivery Procedures\n   Table 1 provides a comprehensive\
    \ summary of EMSD-P operations, the\n   SAP selectors used and the operation IDs\
    \ used.\n   Submission\n   The semantics of a submission operation is Exactly\
    \ Once.  Exactly\n   Once means that every operation is carried out exactly one\
    \ time, no\n   more and no less.  This semantic can not be fully implemented\n\
    \   because, if after invoking the operation, an invoker has a Success\n   (e.g.\
    \  result) indication and the performer has a FAILURE.indication,\n   and the\
    \ network goes down, the result of the operation will be Zero\n   (and not Exactly\
    \ Once).\n   No more than one is controlled and guaranteed by the performer by\n\
    \   using the Duplicate Operation Detection Support Functions (see the\n   chapter\
    \ entitled Duplicate Operation Detection Support).\n   Not zero but one is realized\
    \ by performer by using the\n   SubmissionVerify operation.  When the performer\
    \ receives\n   FAILURE.indication, it's responsibility is to resolve the case\
    \ by\n   using SubmissionVerify resulting in Not zero but one.\n   Submission\
    \ procedure is as follows:\n      o Submit operation with 3-Way handshake and\
    \ Duplicate Operation\n        Detection Support Function is invoked.\n      o\
    \ If performer at EMSD-SA receives FAILURE.indication, it invokes\n        SubmissionVerify.\n\
    \      o Message is sent out by EMSD-SA only if result operation is\n        confirmed\
    \ or the operation is verified (in the case of\n        FAILURE.indication).\n\
    \   The semantic of SubmissionVerify operation is At Least Once.  This\n   type\
    \ of semantics corresponds to the case that invoker keeps trying\n   over and\
    \ over until it gets a proper reply.  This operation can be\n   performed more\
    \ than once without any harm.\n   Implications:\n      o MTS sends out the message\
    \ if and only if it's sure that UA knows\n        about it.\n   Delivery\n   The\
    \ semantics of Deliver operation is Exactly Once.  Exactly Once\n   means that\
    \ every operation is carried out exactly one time, no more\n   and no less.  This\
    \ semantic can not be fully implemented and if after\n   invoking the operation,\
    \ invoker has Success indication and performer\n   has FAILURE.indication, and\
    \ the network goes down, the result of the\n   operation will be Zero (and not\
    \ Exactly Once).\n   No more than one is controlled and guaranteed by performer\
    \ and by\n   using the Duplicate Operation Detection Support Functions.\n   Not\
    \ zero but one is realized by performer by using the DeliveryVerify\n   operation.\
    \  When performer receives FAILURE.indication, it's\n   responsible to resolve\
    \ the case by using DeliveryVerify resulting in\n   Not zero but one.\n   Delivery\
    \ procedure is as follows:\n      o Deliver operation with 3-Way handshake is\
    \ invoked.\n      o If performer at User Agent (device) receives FAILURE.indication,\n\
    \        it invokes DeliveryVerify.\n   The semantic of DeliveryVerify operation\
    \ is At Least Once.  This type\n   of semantics corresponds to the case that invoker\
    \ keeps trying over\n   and over until it gets a proper reply.  This operation\
    \ can be\n   performed more than once without any harm.\n   Implications:\n  \
    \    o A non-delivery report is sent by MTS only if the message is not\n     \
    \   delivered.\n      o The UA is responsible for notifying the MTS (through an\
    \ explicit\n        deliveryVerify) to make sure that a delivery report is sent\
    \ out.\n"
- title: 4  DUPLICATE OPERATION DETECTION SUPPORT
  contents:
  - '4  DUPLICATE OPERATION DETECTION SUPPORT

    '
- title: 4.1  Duplicate Operation Detection Support Overview
  contents:
  - "4.1  Duplicate Operation Detection Support Overview\n   Some operations are idempotent\
    \ in nature, i.e.  they can be performed\n   more than once without any harm.\
    \  However, some other operations are\n   non-idempotent in nature, i.e.  they\
    \ should be performed only once.\n   In the case of non-idempotent operations,\
    \ performer should be able to\n   detect duplicate operations and perform each\
    \ non-idempotent operation\n   only once.\n   Examples of non-idempotent operations\
    \ are Submission and Delivery of\n   messages which shouldn't be performed more\
    \ than once.  Examples of\n   idempotent operations are Submission-control and\
    \ Delivery-control\n   which can be performed more than once with no harm.\n \
    \  ESRO Services don't detect duplicate invocation of operations.  As a\n   result,\
    \ the Duplicate Operation Detection Support Functional Unit is\n   used to detect\
    \ duplication when the same operation instance is\n   invoked more than once.\
    \  Invoker assigns an Operation Instance\n   Identifier to an operation and this\
    \ Operation Instance Identifier is\n   used at the peer performer entity to detect\
    \ the duplicate invocation\n   of the same operation.\n   Using this support,\
    \ non-idempotent operations can be repeated over\n   and over with no harm because\
    \ the duplicate invocations are detected\n   by this functional unit.  This support\
    \ helps the performer not to\n   perform an operation more than once.\n   Support\
    \ for duplication detection is realized through allocating\n   Operation Instance\
    \ Id (see Section 4.1.2, \"Operation Instance\n   Identifier\") to an operation\
    \ by invoker.  When an operation is\n   invoked using duplication detection support,\
    \ performer logs the\n   Operation Instance Identifier and checks the next operations\
    \ against\n   duplication.\n   Operation value identifies whether performer should\
    \ detect duplicate\n   operations (see Section 4.1.1, \"Operation Value\") and\
    \ Operation\n   Instance Id is assigned by invoker and sent as the first byte\
    \ of\n   operation's parameter.\n"
- title: 4.1.1  Operation Value
  contents:
  - "4.1.1  Operation Value\n   Operation Values are divided into two groups.  Operation\
    \ values from\n   0 to 31 do not have Duplicate Operation Detection Support (0\
    \ to 31)\n   and operation values from 32 to 63 have Duplicate Operation Detection\n\
    \   Support.\n   Duplicate Operation Detection Functional Unit checks for duplication\n\
    \   only if Operation Value is in the range of 32 to 63.\n   When invoker user\
    \ uses an Operation Value in the range of 32 to 63\n   which means operation with\
    \ support for duplication detection, the\n   user should specify an Operation\
    \ Instance ID for the operation (see\n   next section).\n"
- title: 4.1.2  Operation Instance Identifier
  contents:
  - "4.1.2  Operation Instance Identifier\n   To support duplication detection, an\
    \ Operation Instance Identifier is\n   assigned by invoker user and sent as the\
    \ first byte of the\n   operation's parameter.  This identifier is used on performer\
    \ side to\n   detect duplicate invocation of the same operation.  Characteristics\n\
    \   of Operation Instance Identifier is as follows:\n      o Operation Instance\
    \ Identifier is one byte and can have values\n        from 0 to 255.\n      o\
    \ Operation Instance Identifier is sent as the first byte of the\n        operations\
    \ parameter (without encoding).\n      o The length of Operation Instance Identifier\
    \ is 8-bit, but\n        depending on the performer capabilities, it might keep\
    \ 0 to 127\n        Operation Instance Identifiers for duplication detection.\
    \  The\n        performer profile defines the number of outstanding Operation\n\
    \        Instance Identifiers that are checked against duplication.  When\n  \
    \      a performer profile indicates support for 0 outstanding\n        Operation\
    \ Instance Identifier, it means it does not have support\n        for Duplicate\
    \ Operation Detection.  In this case, there should\n        be only one outstanding\
    \ operation at any point of time.\n      o Instance ID check is not part of ESROS,\
    \ per se.  Use of\n        Duplicate Detection is determined by EMSD-P. Operation\
    \ Instance\n        ID for operations 32-63 is the first byte of the argument.\n\
    \        Duplicate Detection suuport strips that byte.\n      o The Instance ID\
    \ is not subject to Basic Encoding Rules (BER).\n      o The invoker user assigns\
    \ the Operation Instance Identifier to\n        the operation at the time of requesting\
    \ the invoke service.  The\n        Operation Value should be in the range of\
    \ operation values with\n        duplication detection support, i.e.  32 to 63.\n\
    \      o It's the responsibility of the user to choose Operation Instance\n  \
    \      Identifier in a way that uniqely and unambiguously identifies\n       \
    \ the operation.\n      o From the invoker's perspective, assumption is that two\n\
    \        operations with the same operation Instance Identifier are\n        totally\
    \ identical which means they produce exact same results.\n      o Operation Instance\
    \ Identifier uniqely specifies a non-idempotent\n        operation and multiple\
    \ invocations of such an operation will\n        eventually result in the same\
    \ outcome because the duplicate\n        instances are identified and the operation\
    \ is not performed more\n        than once.\n      o From the performer's perspective,\
    \ assumption is that two\n        operations with the same Operation Instance\
    \ Identifier should be\n        executed once and once only.\n      o If requested,\
    \ the degree of duplication checked by Duplicate\n        Operation Detection\
    \ Support Functional Unit on the performer's\n        side (i.e.  the total number\
    \ of outstanding Operation Instance\n        Identifier kept) can be communicated\
    \ with the invoker to\n        synchronize the invocations.\n      o User of Duplicate\
    \ Operation Detection Support is responsible to\n        behave based on the performer\
    \ profile and its limitations in\n        this regard.  This behavior is defined\
    \ based on the desired\n        semantic of the operation which is to be implemented.\n\
    \      o On the performer side, when an Operation Instance Identifier is\n   \
    \     received, a previous Operation Instance Identifier whose\n        distance\
    \ to this latest one is greater than or equal to half of\n        the wrap-around\
    \ range of the Operation Instance Identifier\n        number is expired, i.e.\
    \  for an 8-bit Operation Instance\n        Identifier, the distance of 128 causes\
    \ an old Operation Instance\n        Identifier to expire.\n      o It's the responsibility\
    \ of the invoker user to use consecutive\n        Operation Instance Identifier\
    \ numbers, or when it skips some\n        Operation Instance Identifiers, it should\
    \ remember that if there\n        is an smaller Operation Instance Identifier\
    \ on performer side\n        with the distance explained above, it will be expired.\n"
- title: 5  EMSD PROCEDURE FOR OPERATIONS
  contents:
  - "5  EMSD PROCEDURE FOR OPERATIONS\n   The following sections shows the general\
    \ procedures to be used in the\n   implementation of the EMSD Message Transfer\
    \ Server (MTS) and the EMSD\n   User Agent (UA), with the option for 3-Way or\
    \ 2-Way handshakes on\n   operations which support them.  These procedures do\
    \ not constitute\n   complete behavior specifications for implementations.  The\
    \ following\n   sections contain information helpful to implementors.\n   The\
    \ MTS and the UA are event-driven.  Each waits for any of the\n   possible event\
    \ types, and, upon receiving an event, processes it.\n   After processing the\
    \ event, the next event is waited upon.\n"
- title: 5.1  MTS Behavior
  contents:
  - "5.1  MTS Behavior\n   The MTS is event-driven.\n   If it received an event from\
    \ ESROS, then it could be any of the\n   following types:\n      o Message submit\
    \ indication;\n      o Message submit confirm and failure indication;\n      o\
    \ Result and Error indication for a deliver operation;\n      o DeliveryVerify\
    \ indication;\n      o Result and Error indication for a submissionVerify operation;\n\
    \      o Result and Error indication for a submissionControl operation;\n    \
    \  o DeliveryControl indication.\n   For an ESROS event responsibility is passed\
    \ to the MTS performer\n   (Section 5.1.1).\n   If the MTS received an event:\n\
    \      o for message delivery, from the RFC-822 mailer;\n      o requesting submission\
    \ controls upon the UA, or;\n      o indicating an elapsed timer (meaning that\
    \ it's time to re-\n        attempt a message delivery)\n   then responsibility\
    \ is passed to the MTS invoker (Section 5.1.5).\n"
- title: 5.1.1  MTS Performer
  contents:
  - "5.1.1  MTS Performer\n   The MTS performer is responsible for processing the\
    \ following\n   operations, received from ESROS:\n      o Message-submission\n\
    \      o Delivery-control\n      o Delivery-verify\n   The MTS performer should\
    \ first make sure that it has received an\n   INVOKE.indication.  Any other type\
    \ of primitive shouldn't be\n   occurring at this point, and should be ignored.\n\
    \   If there's something wrong with the PDU or operation data, the MTS\n   performer\
    \ should send back an error to the proper invoker:\n    1. Send an ESROS Error\
    \ Request, then go wait for a response (either\n       a confirmation or a failure\
    \ indication).  The response is sent\n       back on the same SAP type on which\
    \ the event occurred.\n    2. Keep track of the type of request that was issued.\n\
    \   If there isn't anything wrong with the PDU or operation data, then\n   the\
    \ MTS performer has received a valid event from ESROS. This could\n   be any of\
    \ the defined Submission and Delivery Protocol operations.\n"
- title: 5.1.2  Message-submission
  contents:
  - "5.1.2  Message-submission\n    1. The Message-submission operation first checks\
    \ to see which SAP\n       this Submit Request came in on.\n    2. The request\
    \ could have arrived as 2-Way SAP (see #3) or a 3-Way\n       SAP (see #7).\n\
    \    3. If the event arrived on the 2-Way SAP, consider this a protocol\n    \
    \   violation and ignore it.\n    4. Wait for a response to the request.  The\
    \ response could be either\n       an ERROR.confirm (see #5) or a FAILURE.indication\
    \ (see #6).\n    5. The ERROR.request has been confirmed.  The UA knows that the\n\
    \       submitted message wasn't sent.  Since there was an error, there\n    \
    \   is nothing more to do, so return.\n     6. If the result to the ErrorRequest\
    \ is a Failure.indication, it\n       can be assumed that either the UA has received\
    \ nothing (the\n       ERROR.request PDU was lost), which means failure for the\
    \ UA; or\n       that the 3-Way acknowledgment was lost, which means that the\
    \ UA\n       has in fact received the ERROR.request PDU and knows about the\n\
    \       delivery failure.  Either way, the message can be ignored.  There\n  \
    \     is nothing more to do, so return.\n    7. If the event was received on the\
    \ 3-Way SAP, then this is the\n       correct SAP on which to receive a Submit\
    \ Request.  Send back a\n       Result Request and keep track of the primitive\
    \ which was issued.\n    8. Now wait for a response to our request.  The response\
    \ will be\n       either a Result.confirm (see #9) or a Failure.indication (see\n\
    \       #13).\n    9. The RESULT.request has been confirmed.\n    10. Submit the\
    \ message to the RFC-822 mailer.\n    11. Attempt, a number of times, to send\
    \ the submitted message via\n        the RFC-822 mailer.  If the send was successful,\
    \ then return.\n    12. If, after the maximum number of retries, the message was\
    \ not\n        able to be sent, consider it a failure.  Since the UA assumption\n\
    \        has been that submission was successful, but now it has not been\n  \
    \      sent, a brand new message, a Non-Delivery message, must be\n        generated\
    \ and delivered to the UA. When this is completed, then\n        return.\n   \
    \ 13. A FAILURE.indication has occurred due to the previously issued\n       \
    \ RESULT.request.\n    14. A Submission Verification is issued to the UA to see\
    \ if the\n        RESULT.request was received.  There are three possible results\n\
    \        from sending the submission verification to the UA: Fail (see\n     \
    \   #15), Send Message (see #16) or Drop Message (see #20).\n    15. Fail -- The\
    \ Submission-verify request didn't reach the UA, or\n        the Submission Verify\
    \ response didn't get back.  Ignore the\n        message and return.\n    16.\
    \ The Submission Verify operation succeeded, meaning that the UA\n        received\
    \ the request, and responded with a message stating that\n        it wants the\
    \ message to be sent.\n    17. Attempt, a number of times, to send the submitted\
    \ message via\n        the RFC-822 mailer.\n    18. If the message was submitted\
    \ to the RFC-822 mailer successfully,\n        then return.  If, after the maximum\
    \ number of retries, the\n        message was not able to send the message, consider\
    \ it a failure.\n    19. The UA already assumes that the Message-submission was\n\
    \        successful.  Now since the submitted message has not been sent,\n   \
    \     a brand new message, a Non-Delivery message, must be generated\n       \
    \ and delivered to the UA. After this is accomplished, then\n        return.\n\
    \    20. The UA responded with a message stating that the message should\n   \
    \     be dropped.  This may occur if the UA never received the result\n      \
    \  from the MTS, meaning that it never received the Message Id, and\n        had\
    \ to therefore inform the user that the message couldn't be\n        submitted.\
    \  This may also occur if the UA doesn't have the\n        record of the message\
    \ being verified.  It can be because the\n        message record has been aged\
    \ and expired, or because the EMSD-UA\n        has not been able to keep the record\
    \ of the received message\n        because of storage or memory limitations. \
    \ There is nothing to\n        do, so return.\n"
- title: 5.1.3  Delivery-control
  contents:
  - "5.1.3  Delivery-control\n   This operation can be processed immediately.  After\
    \ it is processed,\n   the appropriate result is returned.\n"
- title: 5.1.4  Delivery-verify
  contents:
  - "5.1.4  Delivery-verify\n   This operation occurs when the UA doesn't think that\
    \ the MTS has\n   received the RESULT.indication from a previously delivered message.\n\
    \   The UA wants to make sure that the MTS knows it has been delivered.\n   The\
    \ MTS will determine what it knows of the specified message, and\n   send back\
    \ a result.  This can be processed immediately, as it doesn't\n   need to deal\
    \ with duplicate detection.\n"
- title: 5.1.5  MTS Invoker
  contents:
  - "5.1.5  MTS Invoker\n   The MTS invoker is responsible for processing the following\n\
    \   operations, received from ESROS:\n      o Message-delivery\n      o Submission-control\n\
    \      o Submission-verify\n   Submission-control\n   Process the Submission Control\
    \ request.\n   Message-delivery\n    1. Check the User Agent's profile to determine\
    \ the SAP.\n    2. Set the SAP to 3-Way.\n    3. Issue the INVOKE.request on the\
    \ appropriate SAP, with duplication\n       detection enabled.  Since a local\
    \ error is possible on issuing\n       the INVOKE.request, a retry counter is\
    \ needed.\n    4. There are three possible events possible in result to the\n\
    \       INVOKE.request:  an ERROR.indication (see #5), a\n       RESULT.indication\
    \ (see #9) or a FAILURE.indication (see #10).\n    5. An ERROR.indication was\
    \ received, which means that the UA can't\n       accept the message right now.\n\
    \    6. If the reason was one of a transient nature, wait for a while and\n  \
    \     then send the Deliver Request again.\n    7. If the reason was one of a\
    \ permanent nature, send back a non-\n       delivery report to the originator.\n\
    \    8. Since the error was one of a permanent nature, then the MTS must\n   \
    \    send back a non-delivery report, then log the unsuccessful\n       delivery\
    \ with error from UA and return.\n    9. A RESULT.Indication was returned, which\
    \ means that the Delivery\n       was successful.  Send a delivery report to the\
    \ originator if one\n       was requested and log successful delivery and return.\n\
    \       If the UA profile indicated that Complete mode was to be used,\n     \
    \  keep track of the fact that this message has been successfully\n       delivered\
    \ (as far as the MTS is concerned), so that if the UA\n       sends us a Delivery\
    \ Verify operation, we know that we consider\n       the message to be delivered.\n\
    \    10. A FAILURE.indication was returned, which means there was a\n        problem\
    \ getting the Deliver Request to the UA, or in getting the\n        response back\
    \ from the UA. In any case, a response was never\n        received, so the request\
    \ timed out.  Wait for a while, and then\n        send the Deliver Request again.\n\
    \        As long as a FAILURE.indication is returned and the number of\n     \
    \   retries has not been exceeded, keep trying to verify the\n        delivery.\n\
    \   Submission-verify\n   The Submission-verify operation is always issued on\
    \ the 2-Way SAP.\n   The response is awaited.  If a response doesn't come, the\
    \ request is\n   queued and attempted again later.\n    1. Issue the INVOKE.request\
    \ on the 2-Way SAP, with duplication\n       detection disabled.  Since a local\
    \ error on issuing the invoke\n       request is possible, a retry counter is\
    \ needed.\n    2. An INVOKE.Request has been issued and a response has been\n\
    \       received.  The response will be either a a RESULT.indication (see\n  \
    \     #3) or a FAILURE.indication (see #4).  There are no defined\n       errors\
    \ to a Submission Verify operation, so an ERROR.indication\n       should not\
    \ be occurring here.\n    3. A RESULT.indication was received.  Either ResponseSendMessage\
    \ or\n       ResponseDropMessage, as specified in the PDU, will be returned.\n\
    \    4. A FAILURE.indication was received, which means that there was a\n    \
    \   problem getting the Submission Verify Request to the UA, or in\n       getting\
    \ the response back from the UA. In any case, the response\n       was never received,\
    \ so the request timed out.  Wait for a while,\n       and then another attempt\
    \ to send the Submission Verify request is\n       needed.\n   Non-Delivery Report\n\
    \   Issue an INVOKE.request containing a Submit operation with a content\n   type\
    \ of Non-Delivery Report, to the UA. This operation is always\n   issued on the\
    \ 2-Way SAP. The response is awaited.  If a response\n   doesn't come, the request\
    \ is queued and attempted again later.\n    1. Create a Submit operation.\n  \
    \  2. Issue the INVOKE.request on the 2-Way SAP, with duplication\n       detection\
    \ enabled.  Since a local error on issuing the invoke\n       request is possible,\
    \ a retry counter for is needed.\n    3. A response to the INVOKE.Request has\
    \ been received.  The response\n       will be either a RESULT.indication (see\
    \ #5), ERROR.indication\n       (see #4), or a FAILURE indication (see #7).\n\
    \    4. An ERROR.indication was received, which means that the UA doesn't\n  \
    \     know what to do with our non-delivery report.  That's the UAs\n       problem,\
    \ so just do nothing and return.\n    5. A RESULT.indication was received, which\
    \ means we delivered a\n       successful non-delivery report.\n    6. The result\
    \ is logged.  Nothing more is needed, so return.\n    7. A FAILURE.indication\
    \ was received, which means there was a\n       problem getting the Submit Request\
    \ to the UA, or in getting the\n       response back from the UA. In any case,\
    \ the response was never,\n       so the request timed out.  Wait for a while,\
    \ and then send the\n       Submission Verify request again.\n"
- title: 5.2  UA Behavior
  contents:
  - "5.2  UA Behavior\n   The User Agent is event-driven.\n   If it received an event\
    \ from ESROS, then it could be any of the\n   following types:\n      o Message\
    \ deliver indication;\n      o Message deliver confirm and failure indication;\n\
    \      o Result and Error indication for a submit operation;\n      o Submission\
    \ verify indication;\n      o Result and Error indication for a delivery verify\
    \ operation;\n      o Result and Error indication for a delivery control operation;\n\
    \      o Submission control indication.\n   For an ESROS event responsibility\
    \ is passed to the UA performer\n   (Section 5.2.1).\n   IF the UA received an\
    \ event indicating that there's a message from\n   the user, for submission, then\
    \ responsibility is passed to the UA\n   invoker (Section 5.2.2).\n"
- title: 5.2.1  UA Performer
  contents:
  - "5.2.1  UA Performer\n   The performer on the UA side is responsible for processing\
    \ the\n   following operations:\n      o Message Delivery\n      o Submission\
    \ Verification\n      o Submission Control\n   Message-delivery\n    1. A Message-delivery\
    \ request is received.\n    2. Check for the correctness of the PDU. If the PDU\
    \ is bad the see\n       #3.  If the PDU is good then see #8.\n    3. Send an\
    \ ESROS ERROR.request.  If the request arrived on a 3-Way\n       SAP, use a 3-Way\
    \ SAP for the result.  If the request arrived on a\n       2-Way SAP, use a 2-Way\
    \ SAP for the result.  Keep track of the\n       type of request that was issued.\n\
    \    4. Wait for the ESROS event.  The result could be an ERROR.confirm\n    \
    \   (see #5) or a FAILURE.indication (see #7).\n    5. The ESROS event was an\
    \ ERROR.confirm\n    6. Log the message as the Non-Delivery was confirmed by the\
    \ MTS and\n       return.\n    7. If the ESROS event was a FAILURE.indication,\
    \ that means one of\n       two things has occurred:\n       A. The MTS has received\
    \ nothing (the ERROR.request PDU was lost),\n          which means that the MTS\
    \ doesn't know that the message\n          delivery has been rejected.  In this\
    \ case, the MTS will\n          eventually time out, and retransmit the message\
    \ delivery\n          request.\n       B. The 3-Way acknowledgment was lost, which\
    \ means that the MTS\n          has in fact received the ERROR.request PDU and\
    \ knows about the\n          delivery failure.\n       Either way, the message\
    \ can now be ignored.\n    8. Send an ESROS RESULT.request.  If the request arrived\
    \ on a 3-Way\n       SAP, use a 3-Way SAP for the result.  If the request arrived\
    \ on a\n       2-Way SAP, use a 2-Way SAP for the result.  Keep track of the\n\
    \       type of request that was issued.\n    9. Wait for the ESROS event.  The\
    \ result could be an RESULT.confirm\n       (see #10) or a FAILURE.indication\
    \ (see #13).\n    10. If the event is a RESULT.confirm, then the delivered message\
    \ can\n        now be given to the user.\n    11. Deliver the message to the user.\n\
    \    12. Log the message as Message Delivery Known to MTS.\n    13. If the event\
    \ is a FAILURE.indication, then, if the delivery was\n        on a 3-Way SAP,\
    \ a Delivery Verification request to the MTS can\n        be issued to see if\
    \ the MTS actually got the RSULT.request.  If\n        the delivery was on a 2-Way\
    \ SAP, then the message will delivered\n        to the user and if the MTS has\
    \ not received the RESULT.request,\n        it will retransmit it later and the\
    \ duplicate will be ignored.\n    14. Deliver the message to the user.  Since\
    \ a FAILRUE.indication was\n        received in response to a RESULT.requst, it\
    \ means that possible,\n        the MTS didn't receive the RESULT.request.  The\
    \ MTS could now\n        time out, and send another copy of the same message.\
    \  Save the\n        message for duplication detection.\n    15. Log the fact\
    \ that the message was delivered, but that the MTS\n        might not be aware\
    \ of it.\n    16. If the UA supports Delivery Verification, and the Delivery\n\
    \        Request was sent on the 3-Way SAP, then see #17.  If either of\n    \
    \    these conditions are not true, then return.\n    17. Send a Delivery-verify\
    \ request to see if the MTS got the\n        RESULT.request.\n        There are\
    \ three possible results from sending the delivery\n        verification to the\
    \ MTS: Fail (see #18), ResponseNonDelivery\n        (see #20) or ResponseDelivery\
    \ (see #23).\n    18. Fail -- Delivery Verify request didn't reach the MTS, or\
    \ the\n        Delivery Verify response didn't get back to the UA.\n    19. Log\
    \ this as delivering the message to the user, but the MTS\n        having possibly\
    \ sent a Non-Delivery report to the originator\n        even though the UA did\
    \ actually deliver the message to the user.\n        Then return.\n    20. ResponseNonDelivery\
    \ -- Verify Response indicates that the MTS\n        now knows (because of the\
    \ Delivery Verify operation that the\n        message has been delivered to the\
    \ user, but had not received our\n        RESULT.request nor a Delivery Verify\
    \ operation in a timely\n        manner, and had already sent out a Non-Delivery\
    \ report to the\n        originator.\n    21. The MTS had not received, from the\
    \ UA, in a timely manner, a\n        RESULT.indication indicating that the message\
    \ had been delivered\n        to the user.  The MTS has already sent a Non-Delivery\
    \ report to\n        the originator.  The UA must let the user know about this.\
    \  Log\n        the message as delivered to the user, but a Non-Delivery sent\
    \ to\n        the originator.\n    22. Since the UA received a response to the\
    \ Verify operation, it\n        knows that the MTS knows about this message delivery,\
    \ so the UA\n        also knows that it won't be receiving a duplicate of it.\
    \  The UA\n        can now remove this message's Message Id from the list of\n\
    \        possible duplicates.\n    23. ResponseDelivery -- Verify Response received\
    \ from MTS.\n    24. This means that the MTS knows (either because the MTS had\n\
    \        received the RESULT.request that was sent by the UA or because\n    \
    \    the MTS has now received the UAs Delivery-verification message,\n       \
    \ informing that the UA received the message for delivery to the\n        user.\
    \  The MTS is (or was) able to send a Delivery report to the\n        originator\
    \ if one was requested.  Log it as such.\n    25. Since the UA received a response\
    \ to the Verify operation, it\n        knows that the MTS knows about this message\
    \ delivery, so the UA\n        also knows that it won't be receiving a duplicate\
    \ of it.  The UA\n        can now remove this message's Message Id from the list\
    \ of\n        possible duplicates and return.\n   Submission-verify\n   Process\
    \ the Submission-verify request and return.\n   Submission-control\n   This operation\
    \ can be processed immediately.  After it is processed,\n   the appropriate result\
    \ is returned.\n"
- title: 5.2.2  UA Invoker
  contents:
  - "5.2.2  UA Invoker\n   The invoker on the UA side is responsible for processing\
    \ the\n   following operations:\n      o Message-submission\n      o Delivery-control\n\
    \      o Delivery-verify\n   Message-submission\n   General procedures for UA's\
    \ Message-submission mirror that of MTS's\n   Message-delivery.\n   Delivery-control\n\
    \    1. Issue the INVOKE.request on the 3-Way SAP, with duplication\n       detection\
    \ enabled.  Since the UA can get a local error on issuing\n       the invoke request,\
    \ a retry counter is needed.\n       If we got a local failure in issuing the\
    \ Invoke Request, wait a\n       while and then try again (up to the limit of\
    \ the maximum number\n       of retries).\n    2. The UA has issued an INVOKE.Request.\
    \  Wait for a response from\n       ESROS. The response will be either a RESULT.indication\
    \ (see #5),\n       ERROR.indication (see #3), or FAILURE.indication (see #7).\n\
    \    3. A ERROR.indicaiton was received, meaning that the MTS told says\n    \
    \   that it cannot accept the message.\n    4. Log the MTS rejection and return\n\
    \    5. A RESULT.indication was received, which means that the Submission\n  \
    \     was successful.\n    6. Log successful submission and return.\n    7. a\
    \ FAILURE.indication was received, meaning that there was a\n       problem getting\
    \ the Submit Request to the MTS, or in getting the\n       response back from\
    \ the MTS. In any case, the UA never received\n       the response, so the request\
    \ timed out.  Wait for a while, and\n       then send the Submit Request again.\n\
    \    8. The UA has exceeded the maximum number of retries.  Let the user\n   \
    \    know, log the failure and return.\n   Delivery-verify\n   General procedures\
    \ for UA's Delivery-verify mirror that of MTS's\n   Submission-verify.\n"
- title: 6  EMSD FORMAT STANDARDS
  contents:
  - '6  EMSD FORMAT STANDARDS

    '
- title: 6.1  Format Standard Overview
  contents:
  - "6.1  Format Standard Overview\n   EMSD Format Standard (EMSD-FS) is a non-textual\
    \ form of compact\n   encoding of Internet mail (RFC-822) messages which facilitates\n\
    \   efficient transfer of messages.  EMSD-FS is used in conjunction with\n   the\
    \ EMSD-P but is not a general replacement for RFC-822.  EMSD-FS\n   defines a\
    \ method of representation of short interpersonal message.\n   It defines the\
    \ \"Content\" encoding (Header + Body).  Although EMSD-FS\n   contains end-to-end\
    \ information its scope is purely point-to-point.\n   The \"Efficient InterPersonal\
    \ Message Format Standard\" is defined in\n   this section.  This standard is\
    \ primarily intended for communication\n   among people.\n   The EMSD Format Standard\
    \ is designed to be fully consistent with\n   RFC-822 [3].  In many ways EMSD-FS\
    \ can be considered to be an\n   efficiency oriented encoder and decoder.  Through\
    \ use of EMSD-FS an\n   RFC-822 message is converted to a more compact binary\
    \ encoding.  This\n   more compact message is then transfered between an EMSD-SA\
    \ and EMSD-\n   UA. The compact message (represented in EMSD-FS) may then be\n\
    \   converted back to RFC-822 intact.\n   For messages that are originated (submitted)\
    \ with EMSD protocol,\n   certain fields (e.g., addresses, message-id) can have\
    \ special forms\n   that are specialized and produce more compact EMSD-FS encoding.\n\
    \   These special forms are legitimate values of RFC-822 messages.\n   This specification\
    \ expresses information objects using ASN.1 [X.208].\n   Encoding of ASN.1 shall\
    \ be based on Basic Encoding Rules (BER) [5].\n   Future revisions of this specification\
    \ will use Packed Encoding Rules\n   (PER) [4].\n   The convention of (O) \"OPTIONAL\"\
    , (D) \"DEFAULT\", (C) \"CONDITIONAL\"\n   and (M) \"MANDATORY\" which express\
    \ requirements for presence of\n   information is used in this section.\n"
- title: 6.2  Interpersonal Messages
  contents:
  - "6.2  Interpersonal Messages\n   An interpersonal message (IPM) consists of a\
    \ heading and a body.\n   IPM ::=   SEQUENCE\n   {\n     heading       Heading,\n\
    \     body          Body OPTIONAL\n   };\n"
- title: 6.2.1  Heading fields
  contents:
  - "6.2.1  Heading fields\n   The fields that may appear in the Heading of an IPM\
    \ are defined and\n   described below.\n   Heading ::= SEQUENCE\n   {\n     --\
    \ Address of the sending agent (person, program, machine) of\n     -- this message.\
    \ This field is mandatory if the sender\n     -- is different than the originator.\n\
    \     sender                      [0]     EMSDORAddress OPTIONAL,\n     -- Address\
    \ of the originator of the message\n     -- (not necessarily the sender)\n   \
    \  originator                          EMSDORAddress,\n     -- List of recipients\
    \ and flags associated with each.\n     recipient-data                      SEQUENCE\
    \ SIZE (1..ub-recipients)\n                                         OF PerRecipientFields,\n\
    \     -- Flags applying to this entire message\n     per-message-flags       \
    \    [1]     IMPLICIT BIT STRING\n      {\n      -- Priority values\n      --\
    \ At most one of \"non-urgent\" and \"urgent\" may be specified\n      -- concurrently.\
    \  If neither is specified, then a Priority\n      -- level of \"normal\" is assumed.\n\
    \      priority-non-urgent             (0),\n      priority-urgent           \
    \      (1),\n      -- Importance values\n      -- At most one of \"low\" and \"\
    high\" may be specified\n      -- concurrently.  If neither is specified, then\
    \ an\n      -- Importance level of \"normal\" is  assumed.\n      importance-low\
    \                  (2),\n      importance-high                 (3),\n      --\
    \ Indication of whether this message has been\n         automatically forwarded\n\
    \      auto-forwarded                  (4)\n      } OPTIONAL,\n     -- User-specified\
    \ recipient who is to receive replies\n        to this message.\n     reply-to\
    \                    [2]     IMPLICIT SEQUENCE SIZE\n                        \
    \                 (1..ub-reply-to)\n                                        OF\
    \ EMSDORAddress OPTIONAL,\n     -- Identifier of a previous message, for which\
    \ this message\n     -- is a reply\n     replied-to-IPM                      \
    \ EMSDMessageId OPTIONAL,\n     -- Subject of the message.\n     subject     \
    \                [3]     IMPLICIT AsciiPrintableString\n                     \
    \                    (SIZE (0..ub-subject-field))\n                          \
    \                         OPTIONAL,\n     -- RFC-822 header fields not explicitly\
    \ provided for in\n     -- this Heading. For messages incoming from the external\n\
    \     -- world (i.e. in RFC-822 format), the Message-Id: field\n     -- need not\
    \ go here, as it is placed in the\n     -- Envelope's EMSDMessageId (message-id)\
    \ field.\n     extensions        [4]  IMPLICIT  SEQUENCE\n                   \
    \         (SIZE (0..ub-header-extensions))\n                            OF  IPMSExtension\
    \ OPTIONAL,\n     -- MIME Version (if other than 1.0)\n     mime-version     \
    \       [5]     IMPLICIT AsciiPrintableString\n                              \
    \       (SIZE (0..ub-mime-version-length))\n                                 \
    \                 OPTIONAL,\n     -- Top-level MIME Content Type\n     mime-content-type\
    \       [6]     IMPLICIT AsciiPrintableString\n                              \
    \       (SIZE (0..\n                                      ub-mime-content-type-length))\n\
    \                                               OPTIONAL,\n     -- MIME Content\
    \ Id\n     mime-content-id         [7]     IMPLICIT AsciiPrintableString\n   \
    \                                  (SIZE (0..\n                              \
    \        ub-mime-content-id-length))\n                                       \
    \        OPTIONAL,\n     -- MIME Content Description\n     mime-content-description\
    \ [8]    IMPLICIT AsciiPrintableString\n                                     (SIZE\
    \ (0..ub-mime-content-\n                                     description-length))\n\
    \                                               OPTIONAL,\n     -- Top-level MIME\
    \ Content Type\n     mime-content-transfer-encoding\n                        \
    \      [9]     IMPLICIT AsciiPrintableString\n                               \
    \       (SIZE (0..ub-mime-content-\n                                      transfer-encoding))\n\
    \                                               OPTIONAL\n   };\n   Some fields\
    \ have components and thus are composite, rather than\n   indivisible.  A field\
    \ component is called a sub-field.\n   Sender\n   This field is mandatory if the\
    \ sender is different from the\n   originator.\n   Originator\n   The Originator\
    \ heading field (O) identifies the IPM's originator.\n   Recipient-data\n   PerRecipientFields\
    \ ::= SEQUENCE\n   {\n     recipient-address                            EMSDORAddress,\n\
    \     per-recipient-flags                          BIT STRING\n     {\n     --\
    \ Recipient Types.\n     -- At most one of \"copy\" and \"blind-copy\" may be\n\
    \     -- specified concurrently for a single recipient.  If\n     -- neither is\
    \ specified, than the recipient\n     -- is assumed to be a \"primary\" recipient.\n\
    \     recipient-type-copy                             (0),\n     recipient-type-blind-copy\
    \                       (1),\n     -- Notification Request Types.\n     -- Only\
    \ one of \"rn\" and \"nrn\" may be specified\n     -- concurrently, \\x110011\
    \ for a single recipient.\n     -- \"rn\" implies \"nrn\" in addition.\n     notification-request-rn\
    \                         (2),\n     notification-request-nrn                \
    \        (3),\n     notification-request-ipm-return                 (4),\n   \
    \  -- Report Request Types\n     -- At most one of these should be set for a\n\
    \     -- particular recipient. \"delivery\" implies \"non-delivery\"\n     --\
    \ in addition.\n     report-request-non-delivery                     (5),\n  \
    \   report-request-delivery                         (6),\n     -- Originator-to-Recipient\
    \ request for a reply.\n     reply-requested                                 (7)\n\
    \     } DEFAULT { report-request-non-delivery }\n   };\n   recipient-address\n\
    \   The Primary Recipients heading field identifies the zero or more\n   users\
    \ who are the \"primary recipients\" of the IPM. The primary\n   recipients might\
    \ be those users who are expected to act upon the IPM.\n   per-recipient-flags\n\
    \   The Copy Recipients heading field identifies the zero or more users\n   who\
    \ are the \"copy recipients\" of the IPM. The copy recipients might\n   be those\
    \ users to whom the IPM is conveyed for information.\n   recipient-type-copy\n\
    \   This field is set if the recipient is on the Carbon Copy (CC) list.\n   recipient-type-blind-copy\n\
    \   This field is set if the recipient is on the Blind Carbon Copy (BCC)\n   list.\n\
    \   The Blind Copy Recipients heading field (C) identifies zero or more\n   users\
    \ who are the intended blind copy recipients of the IPM.\n   The phrase \"copy\
    \ recipients\" above has the same meaning as in \"Copy\n   Recipients\" from Section\
    \ 6.2.1 .  A blind copy recipient is one whose\n   role as such is disclosed to\
    \ neither primary nor copy recipients.\n   In the instance of an IPM intended\
    \ for a blind copy recipient, this\n   conditional field shall be present and\
    \ identify that user.  Whether\n   it shall also identify the other blind copy\
    \ recipients is a local\n   matter.  In the instance of the IPM intended for a\
    \ primary or copy\n   recipient, the field shall be absent.\n   notification-request-rn\n\
    \   A receipt notification (rn) reports its originator's receipt, or his\n   expected\
    \ and arranged future receipt, of an IPM.\n   notification-request-nrn\n   A non-receipt\
    \ notification (nrn) reports its originator's failure to\n   receive, to accept,\
    \ or his delay in receiving, an IPM.\n   notification-request-ipm-return\n   When\
    \ this field is set, the contents of the message are returned\n   along with the\
    \ notification.\n   report-request-non-delivery\n   The report request enables\
    \ the MTS to acknowledge to the MTS-user one\n   or more outcomes of a previous\
    \ invocation of the message-submission\n   or probe-submission abstract-operations.\n\
    \   A report is returned only in case of non-delivery.\n   report-request-delivery\n\
    \   For the message-submission, report-delivery indicates the delivery or\n  \
    \ non-delivery of the submitted message to one or more recipients.  For\n   the\
    \ probe-submission, the report-delivery indicates whether or not a\n   message\
    \ could be delivered if the message were to be submitted.\n   reply-requested\n\
    \   When set this field indicates that the originator requests that a\n   recipient\
    \ send a message in reply to the message which carries the\n   request.\n   per-message-Flags\n\
    \   Priority\n   The Priority field (default is normal) identifies the priority\
    \ that\n   the authorizing users attach to the IPM. It may assume any one of the\n\
    \   following values:  urgent, normal, or non-urgent.\n   At most one of either\
    \ \"non-urgent\" or \"urgent\" may be specified\n   concurrently.  If neither\
    \ is specified, then a Priority level of\n   \"normal\" is assumed.\n   Importance\n\
    \   The Importance heading field (default normal) identifies the\n   importance\
    \ that the authorizing users attach to the IPM. It may\n   assume any one of the\
    \ following values:  low, normal, or high.\n   At most one of either \"low\" or\
    \ \"high\" may be specified concurrently.\n   If neither is specified, then a\
    \ Importance level of \"normal\" is\n   assumed.\n   The values above are not\
    \ defined by this specification; they are\n   given meaning by users.\n   auto-forwarded\n\
    \   The Auto-forwarded heading field (default is false) indicates whether\n  \
    \ the IPM is the result of auto-forwarding.  It is a Boolean value.\n   reply-to\n\
    \   User-specified recipient or recipients who are to receive replies to\n   this\
    \ message.\n   replied-to IPM\n   The Replied-to IPM heading field (C) identifies\
    \ the IPM to which the\n   present IPM is a reply.  It comprises an IPM identifier.\n\
    \   This conditional field shall be present if, and only if, the IPM is a\n  \
    \ reply.\n   Note - In the context of forwarding, care should be taken to\n  \
    \ distinguish between the forwarding IPM and the forwarded IPM. This\n   field\
    \ should identify whichever of these two IPMs to which the reply\n   responds.\n\
    \   subject\n   The Subject heading field (O) identifies the subject of the IPM.\
    \ It\n   corresponds to the \"Subject:\" field of RFC-822.\n   extensions\n  \
    \ The Extensions heading field [D no extensions (i.e.  members)]\n   conveys information\
    \ accommodated by no other heading field.  It\n   comprises a Set of zero or more\
    \ IPMS extensions, each conveying one\n   such information item.\n   IPMSExtension\
    \ ::= SEQUENCE\n   {\n       x-header-label                      AsciiPrintableString,\n\
    \       x-header-value                      AsciiPrintableString\n   };\n"
- title: 6.2.2  Body part types
  contents:
  - "6.2.2  Body part types\n   The types of body parts that may appear in the Body\
    \ of an IPM are\n   structured using the MIME specification.\n   Body ::= SEQUENCE\n\
    \   {\n     compression-method          [0]     IMPLICIT CompressionMethod\n \
    \                                                 OPTIONAL,\n     -- If compression\
    \ method is not specified,\n     -- \"no-compression\" is implied.\n     message-body\
    \                        OCTET STRING\n     -- See MIME for structure of the Body.\n\
    \     -- If a compression method is specified, the entire text containing\n  \
    \   -- the Content-Type: element followed by the RFC-822 body are\n     -- compressed\
    \ using the specified method, and placed herein.\n   };\n   CompressionMethod\
    \ ::= INTEGER\n   {\n     -- Compression Methods numbered 0 to 63 are reserved\
    \ for\n     -- assignment within this and associated specifications.\n     no-compression\
    \                  (0),\n     lempel-ziv                      (1)\n     -- Compression\
    \ Methods numbered between 64 and 127 may be\n     --  used on a bilaterally-agreed\
    \ basis between peers.\n   } (0..127)\n"
- title: 7  ACKNOWLEDGMENTS
  contents:
  - "7  ACKNOWLEDGMENTS\n   In the context of Limited Size Messaging (LSM) over CDPD\
    \ and pACT\n   over Narrowband PCS, AT&T Wireless Services (AWS), funded work\
    \ which\n   was relevant to the development of the EMSD protocols.\n"
- title: 8  SECURITY CONSIDERATIONS
  contents:
  - "8  SECURITY CONSIDERATIONS\n   This protocol supports simple authentication of\
    \ the originator's\n   address by the EMSD-SA and simple authentication of EMSD-SA\
    \ by EMSD-\n   UA.\n   Mainstream Internet mail security mechanisms can be used\
    \ in\n   conjunction with the EMSD protocol.\n"
- title: 9  AUTHOR'S ADDRESS
  contents:
  - "9  AUTHOR'S ADDRESS\n   Mohsen Banan\n   Neda Communications, Inc.\n   17005\
    \ SE 31st Place\n   Bellevue, WA 98008\n   EMail: mohsen@neda.com\n"
- title: A  EMSD-P ASN.1 MODULE
  contents:
  - "A  EMSD-P ASN.1 MODULE\n   This section compiles in one place the complete ASN.1\
    \ Module for EM\n   Submission and Delivery Protocol.\n   EMSD-SubmissionAndDeliveryProtocol\
    \ DEFINITIONS ::=\n   BEGIN\n   EXPORTS EMSDORAddress, AsciiPrintableString, ContentType,\n\
    \   DateTime, EMSDMessageId, EMSDORAddress, ProtocolVersionNumber;\n   -- Upper\
    \ bounds\n   ub-recipients  INTEGER ::= 256;\n   -- also defined in EMSD-InterpersonalMessaging1995\n\
    \   ub-reply-to INTEGER ::= 256;\n   -- also defined in EMSD-InterpersonalMessaging1995\n\
    \   ub-subject-field INTEGER ::= 128;\n   -- also defined in EMSD-InterpersonalMessaging1995\n\
    \   ub-password-length INTEGER ::= 16;\n   ub-content-length INTEGER ::= 65535;\n\
    \   -- also defined in EMSD-Probe\n   ub-content-types INTEGER ::= 128;\n   ub-message-id-length\
    \ INTEGER ::= 127;\n   ub-total-number-of-segments INTEGER ::= 32;\n   ub-header-extensions\
    \ INTEGER ::= 64;\n   -- also defined in EMSD-InterpersonalMessaging1995\n   ub-emsd-name-length\
    \ INTEGER ::= 64;\n   ub-emsd-address-length INTEGER ::= 20;\n   ub-rfc822-name-length\
    \ INTEGER ::= 127;\n   ub-mime-version-length INTEGER ::= 8;\n   -- also defined\
    \ in EMSD-InterpersonalMessaging1995\n   ub-mime-content-type-length INTEGER ::=\
    \ 127;\n   -- also defined in EMSD-InterpersonalMessaging1995\n   ub-mime-content-id-length\
    \ INTEGER ::= 127;\n   -- also defined in EMSD-InterpersonalMessaging1995\n  \
    \ ub-mime-content-description-length INTEGER ::= 127;\n   -- also defined in EMSD-InterpersonalMessaging1995\n\
    \   ub-mime-content-transfer-encoding INTEGER ::= 127;\n   -- also defined in\
    \ EMSD-InterpersonalMessaging1995\n   ub-local-message-nu INTEGER ::= 4096;\n\
    \   ----------------------\n   -- SUBMIT Operation --\n   ----------------------\n\
    \   submit ES-OPERATION\n       ARGUMENT SubmitArgument\n       RESULT SubmitResult\n\
    \       ERRORS\n       {\n           submissionControlViolated,\n           securityError,\n\
    \           resourceError,\n           protocolViolation,\n           messageError\n\
    \       } ::= 33;\n   SubmitArgument ::= SEQUENCE\n   {\n     -- Security features\n\
    \     security           [0]    IMPLICIT SecurityElement\n                   \
    \            OPTIONAL,\n     -- Segmentation features for efficient transport\n\
    \     segment-info                  SegmentInfo OPTIONAL,\n     -- Content type\
    \ of the message\n     content-type                            ContentType,\n\
    \     --\n     -- THE CONTENT --\n     --\n     -- The submission content\n  \
    \   content                       ANY DEFINED BY content-type\n   };\n   SubmitResult\
    \ ::= SEQUENCE\n   {\n     -- Permanent identifier for this message.\n     --\
    \ Also contains the message submission time.\n     -- See comment regarding assignment\
    \ of message\n     -- identifiers, at the definition of EMSDLocalMessageId.\n\
    \     message-id                        EMSDLocalMessageId\n       };\n   --------------------------------\n\
    \   -- Delivery Control Operation --\n   --------------------------------\n  \
    \ deliveryControl ES-OPERATION\n       ARGUMENT DeliveryControlArgument\n    \
    \   RESULT DeliveryControlResult\n       ERRORS\n       {\n           securityError,\n\
    \           resourceError,\n           protocolViolation\n       } ::= 2;\n  \
    \ DeliveryControlArgument ::= SEQUENCE\n   {\n     -- Request an addition of or\
    \ removal of a set of restrictions\n     restrict             [0]     IMPLICIT\
    \ Restrict DEFAULT update,\n     -- Which operations are to be placed in the restriction\
    \ set\n     permissible-operations  [1]     IMPLICIT Operations OPTIONAL,\n  \
    \   -- What maximum content length should be allowed\n     permissible-max-content-length\n\
    \                             [2]     IMPLICIT INTEGER\n                     \
    \                (0..ub-content-length) OPTIONAL,\n     -- What is the lowest\
    \ priority message which may be delivered\n     permissible-lowest-priority\n\
    \                             [3]     IMPLICIT ENUMERATED\n                  \
    \                   {\n                                        non-urgent    \
    \ (0),\n                                        normal         (1),\n        \
    \                                urgent         (2)\n                        \
    \             } OPTIONAL,\n     -- Security features\n     security          \
    \        [4]     IMPLICIT SecurityElement\n                                  \
    \                   OPTIONAL,\n     -- User Feature selection\n     user-features\
    \             [5]     IMPLICIT OCTET STRING OPTIONAL\n   };\n   DeliveryControlResult\
    \ ::= SEQUENCE\n   {\n     -- Operation types queued at the EMSD-SA due to existing\n\
    \     -- restrictions.\n     waiting-operations    [0]   IMPLICIT Operations DEFAULT\
    \ { },\n     -- Types of messages queued at the EMSD-SA due to\n     -- existing\
    \ restrictions\n     waiting-messages      [1]   IMPLICIT WaitingMessages DEFAULT\
    \ { },\n     -- Content Types of messages queued at the EMSD-SA\n     waiting-content-types\
    \   SEQUENCE SIZE (0..ub-content-types) OF\n                                 \
    \          ContentType DEFAULT { }\n   };\n   Restrict ::= ENUMERATED\n   {\n\
    \       update                                      (1),\n       remove      \
    \                                (2)\n   };\n   Operations ::= BIT STRING\n  \
    \ {\n       submission                                  (0),\n       delivery\
    \                                    (1)\n   };\n   WaitingMessages ::= BIT STRING\n\
    \   {\n       long-content                                (0),\n       low-priority\
    \                                (1)\n   };\n   -- Delivery Verify Operation\n\
    \   deliveryVerify ES-OPERATION\n       ARGUMENT DeliveryVerifyArgument\n    \
    \   RESULT DeliveryVerifyResult\n       ERRORS\n       {\n           verifyError,\n\
    \           resourceError,\n           protocolViolation\n       } ::= 5;\n  \
    \ DeliveryVerifyArgument ::= SEQUENCE\n   {\n     -- Identifier of this message.\
    \ This is the same identifier that\n     -- was provided to the originator in\
    \ the Submission Result.\n     -- See comment regarding assignment of message\
    \ identifiers,\n     -- at the definition of EMSDMessageId.\n     message-id \
    \                                     EMSDMessageId\n   };\n   DeliveryVerifyResult\
    \ ::= SEQUENCE\n   {\n                            status  DeliveryStatus\n   };\n\
    \    DeliveryStatus  ::= ENUMERATED\n   {\n           no-report-is-sent-out  \
    \                 (1),\n           delivery-report-is-sent-out             (2),\n\
    \           non-delivery-report-is-sent-out         (3)\n   };\n   -----------------------\n\
    \   -- DELIVER Operation --\n   -----------------------\n   deliver ES-OPERATION\n\
    \       ARGUMENT DeliverArgument\n       RESULT NULL\n       ERRORS\n       {\n\
    \           deliveryControlViolated,\n           securityError,\n           resourceError,\n\
    \           protocolViolation,\n           messageError\n       } ::= 35;\n  \
    \ DeliverArgument ::= SEQUENCE\n   {\n     -- Identifier of this message. This\
    \ is the same identifier that\n     -- was provided to the originator in the Submission\
    \ Result.\n     -- See comment regarding assignment of message identifiers,\n\
    \     -- at the definition of EMSDMessageId.\n     message-id                \
    \                      EMSDMessageId,\n     -- Time the message was delivered\
    \ to the recipient by EMSD-SA\n     message-delivery-time                    \
    \       DateTime,\n     -- Time EMSD-SA originally took responsibility for processing\n\
    \     -- of this message. This field shall be omitted if the message-id\n    \
    \ -- contains an EMSDLocalMessageId, because that field contains\n     -- the\
    \ submission time within it.\n     message-submission-time [0]     IMPLICIT  \
    \ DateTime OPTIONAL,\n     -- Security features\n     security               \
    \ [1]     IMPLICIT   SecurityElement OPTIONAL,\n     -- SegContentTypementation\
    \ features for efficient transport\n     segment-info                        \
    \       SegmentInfo OPTIONAL,\n     -- The type of the content\n     content-type\
    \                               ContentType,\n     --\n     -- THE CONTENT --\n\
    \     --\n     -- The submitted (and now being delivered) content\n     content\
    \                       ANY DEFINED BY content-type\n   };\n   -- Submission Control\
    \ Operation\n   submissionControl ES-OPERATION\n       ARGUMENT SubmissionControlArgument\n\
    \       RESULT SubmissionControlResult\n       ERRORS\n       {\n           securityError,\n\
    \           resourceError,\n           protocolViolation\n       } ::= 4;\n  \
    \ SubmissionControlArgument ::= SEQUENCE\n   {\n     -- Request an addition of\
    \ or removal of a set of restrictions\n     restrict               [0]     IMPLICIT\
    \ Restrict DEFAULT update,\n     -- Which operations are to be placed in the restriction\
    \ set\n     permissible-operations  [1]     IMPLICIT Operations OPTIONAL,\n  \
    \   -- What maximum content length should be allowed\n     permissible-max-content-length\n\
    \                             [2]     IMPLICIT INTEGER\n                     \
    \                (0..ub-content-length) OPTIONAL,\n     -- Security features\n\
    \     security                [3]     IMPLICIT SecurityElement\n             \
    \                                        OPTIONAL\n   };\n   SubmissionControlResult\
    \ ::= SEQUENCE\n   {\n     -- Operation types queued at the EMSD-SA due to existing\n\
    \     -- restrictions.\n     waiting-operations    [0]   IMPLICIT Operations DEFAULT\
    \ { }\n   };\n   ----------------------------------\n   -- Submission Verify Operation\
    \ --\n   ----------------------------------\n   submissionVerify  ES-OPERATION\n\
    \       ARGUMENT SubmissionVerifyArgument\n       RESULT SubmissionVerifyResult\n\
    \       ERRORS\n       {\n           submissionVerifyError,\n           resourceError,\n\
    \           protocolViolation\n       } ::= 6;\n   SubmissionVerifyArgument ::=\
    \ SEQUENCE\n     -- Identifier of this message. This is the same identifier that\n\
    \     -- was provided to the originator in the Submission Result.\n     -- See\
    \ comment regarding assignment of message identifiers,\n     -- at the definition\
    \ of EMSDMessageId.\n     {\n        message-id                       EMSDMessageId\n\
    \     };\n   SubmissionVerifyResult ::= SEQUENCE\n       {\n           status\
    \  SubmissionStatus\n       };\n   SubmissionStatus::= ENUMERATED\n   {\n    \
    \       send-message            (1),\n           drop-message            (2)\n\
    \   };\n   -- GetConfiguration Operation\n   -- To be fully defined later. This\
    \ will possibly include,\n   -- but not be limited to:\n   --      get-local-time-zone\n\
    \   --      get-protocol-version\n   --      etc.\n   getConfiguration ES-OPERATION\n\
    \           ARGUMENT NULL\n           RESULT NULL\n           ERRORS\n       \
    \    {\n               resourceError,\n               protocolViolation\n    \
    \       } ::= 7;\n   -- SetConfiguration Operation\n   -- To be fully defined\
    \ later.\n   setConfiguration ES-OPERATION\n           ARGUMENT NULL\n       \
    \    RESULT NULL\n           ERRORS\n           {\n               resourceError,\n\
    \               protocolViolation\n           } ::= 8;\n   -- Security --\n  \
    \ SecurityElement ::= SEQUENCE\n   {\n     credentials                   Credentials,\n\
    \     contentIntegrityCheck         ContentIntegrityCheck OPTIONAL\n   };\n  \
    \ Credentials ::= CHOICE\n   {\n     simple                          [0]   IMPLICIT\
    \ SimpleCredentials\n     -- Strong Credentials are for future study\n     --\
    \ strong                       [1]   IMPLICIT StrongCredentials\n     -- externalProcedure\
    \            [2]   EXTERNAL\n   };\n   SimpleCredentials ::= SEQUENCE\n   {\n\
    \     eMSDAddress                         EMSDAddress OPTIONAL,\n     password\
    \                    [0]     IMPLICIT OCTET STRING\n                         \
    \        (SIZE (0..ub-password-length)) OPTIONAL\n   };\n   -- StrongCredentials\
    \ ::= NULL\n   -- for now.\n   -- ContentIntegrityCheck is a 16-bit checksum of\
    \ content\n   ContentIntegrityCheck ::= INTEGER (0..65535);\n   SegmentInfo ::=\
    \ CHOICE\n   {\n     first           [APPLICATION 2]         IMPLICIT FirstSegment,\n\
    \     other           [APPLICATION 3]         IMPLICIT OtherSegment\n   };\n \
    \  FirstSegment ::= SEQUENCE\n   {\n     sequence-id                         \
    \    INTEGER,\n     number-of-segments                      INTEGER\n     -- number-of-segments\
    \ must not exceed ub-total-number-of-segments\n   };\n   OtherSegment ::= SEQUENCE\n\
    \   {\n     sequence-id                             INTEGER,\n     segment-number\
    \                          INTEGER\n   };\n   -----------\n   -- Errors --\n \
    \  ------------\n   protocolVersionNotRecognized  ERROR PARAMETER NULL ::= 1;\n\
    \   submissionControlViolated  ERROR PARAMETER NULL ::= 2;\n   messageIdentifierInvalid\
    \  ERROR PARAMETER NULL ::= 3;\n   securityError ERROR PARAMETER security-problem\
    \ SecurityProblem ::= 4;\n   deliveryControlViolated   ERROR PARAMETER NULL ::=\
    \ 5;\n   resourceError  ERROR PARAMETER NULL ::= 6;\n   protocolViolation  ERROR\
    \ PARAMETER NULL ::= 7;\n   messageError  ERROR PARAMETER NULL ::= 8;\n   SecurityProblem\
    \ ::= INTEGER (0..127);\n   --\n   -- EXPORTED Definitions (for use by associated\
    \ specifications) --\n   --\n   ContentType ::=  INTEGER\n   {\n     -- Content\
    \ type 0 is reserved and shall never be transmitted.\n     reserved          \
    \                       (0),\n     -- Content types between 1 and 31 (inclusive)\
    \ are for\n     -- internal-use only\n     probe                             \
    \       (1), -- reserved\n     delivery-report                          (2), --\
    \ reserved\n     -- Content types between 32 and 63 (inclusive) are for\n    \
    \ -- message types  defined within this specifications.\n     emsd-interpersonal-messaging-1995\
    \        (32),\n     voice-messaging                          (33) -- reserved\n\
    \     -- Content types beyond and including 64 are for\n     -- bilaterally-agreed\
    \ use between peers.\n   } (0..127);\n   -- If this message was originated as\
    \ an RFC-822 message, then this\n   -- EMSDMessageId shall be the \"Message-Id:\"\
    \ field from that message.\n   -- If this message was originated within the EMSD\
    \ domain,\n   -- then this identifier shall be unique for the Message Center\n\
    \   -- generating this id.\n   EMSDMessageId ::= CHOICE\n   {\n     emsdLocalMessageId\
    \     [APPLICATION 4]  IMPLICIT\n                            EMSDLocalMessageId,\n\
    \     rfc822MessageId        [APPLICATION 5]  IMPLICIT\n                     \
    \       AsciiPrintableString\n                            (SIZE (0..ub-message-id-length))\n\
    \   };\n   EMSDLocalMessageId ::= SEQUENCE\n   {\n     submissionTime        \
    \          DateTime,\n     messageNumber                   INTEGER (0..ub-local-message-nu)\n\
    \   };\n   -- An Originator/Recipient Address in EMSD Environment\n   EMSDORAddress\
    \ ::= CHOICE\n   {\n     -- This is the local-format address\n     emsd-local-address-format\
    \            EMSDAddress,\n     -- This is a globally-unique RFC-822 Address\n\
    \     rfc822DomainAddress                 AsciiPrintableString\n   };\n   EMSDAddress\
    \ ::= SEQUENCE\n   {\n     emsd-address         OCTET STRING\n               \
    \                     (SIZE (1..ub-emsd-address-length)),\n     -- emsd-address\
    \ is a decimal integer in BCD (Binary Encoded Decimal)\n     -- format.\n    \
    \ -- If it had an odd number of digits, it is padded with 0 on\n     -- the left.\n\
    \     emsd-name                [0]     IMPLICIT OCTET STRING\n               \
    \                       (SIZE (0..ub-emsd-name-length))\n                    \
    \                  OPTIONAL\n   };\n   DateTime ::= INTEGER;\n   Iso8859String\
    \ ::=  GeneralString;\n   AsciiPrintableString ::= [ APPLICATION 0 ]\n       \
    \                     IMPLICIT Iso8859String (FROM\n       (\" \"|\"!\"|\"#\"\
    |\"$\"|\"%\"|\"&\"|\"'\"|\"(\"|\")\"|\"*\"|\"+\"|\",\"|\"-\"|\".\"|\"/\"|\n  \
    \      \"0\"|\"1\"|\"2\"|\"3\"|\"4\"|\"5\"|\"6\"|\"7\"|\"8\"|\"9\"|\":\"|\";\"\
    |\"<\"|\"=\"|\">\"|\n        \"?\"|\"@\"|\"A\"|\"B\"|\"C\"|\"D\"|\"E\"|\"F\"|\"\
    G\"|\"H\"|\"I\"|\"J\"|\"K\"|\"L\"|\"M\"|\n        \"N\"|\"O\"|\"P\"|\"Q\"|\"R\"\
    |\"S\"|\"T\"|\"U\"|\"V\"|\"W\"|\"X\"|\"Y\"|\"Z\"|\"[\"|\"]\"|\n        \"^\"|\"\
    _\"|\"`\"|\"a\"|\"b\"|\"c\"|\"d\"|\"e\"|\"f\"|\"g\"|\"h\"|\"i\"|\"j\"|\"k\"|\"\
    l\"|\n        \"m\"|\"n\"|\"o\"|\"p\"|\"q\"|\"r\"|\"s\"|\"t\"|\"u\"|\"v\"|\"w\"\
    |\"x\"|\"y\"|\"z\"|\"{\"|\n        \"|\"|\"}\"|\"~\"|\"\\\"|\"\"\"\"));\n   ProtocolVersionNumber\
    \ ::= [APPLICATION 1]    SEQUENCE\n   {\n     version-major                  \
    \ INTEGER,\n     version-minor           [0]     IMPLICIT INTEGER DEFAULT 0\n\
    \   }\n   END  -- end of EMSD-SubmissionAndDeliveryProtocol\n"
- title: B  EMSD-IPM ASN.1 MODULE
  contents:
  - "B  EMSD-IPM ASN.1 MODULE\n   This section compiles in one place the complete\
    \ ASN.1 Module for\n   EMSD-IPM.\n   EMSD-InterpersonalMessaging1995 DEFINITIONS\
    \ ::=\n   BEGIN\n   IMPORTS EMSDORAddress, EMSDMessageId, AsciiPrintableString\n\
    \     FROM EMSD-SubmissionAndDeliveryProtocol;\n   ub-recipients  INTEGER ::=\
    \ 256;\n   ub-reply-to INTEGER ::= 256;\n   ub-subject-field INTEGER ::= 128;\n\
    \   ub-header-extensions INTEGER ::= 64;\n   ub-emsd-name-length INTEGER ::= 64;\n\
    \   ub-mime-version-length INTEGER ::= 8;\n   ub-mime-content-type-length INTEGER\
    \ ::= 127;\n   ub-mime-content-id-length INTEGER ::= 127;\n   ub-mime-content-description-length\
    \ INTEGER ::= 127;\n   ub-mime-content-transfer-encoding INTEGER ::= 127;\n  \
    \ IPM ::=   SEQUENCE\n   {\n     heading                              Heading,\n\
    \     body                                 Body OPTIONAL\n   };\n   Heading ::=\
    \ SEQUENCE\n   {\n     -- Address of the sending agent (person, program, machine)\
    \ of\n     -- this message. This field is mandatory if the sender\n     -- is\
    \ different than the originator.\n     sender                      [0]     EMSDORAddress\
    \ OPTIONAL,\n     -- Address of the originator of the message\n     -- (not necessarily\
    \ the sender)\n     originator                          EMSDORAddress,\n     --\
    \ List of recipients and flags associated with each.\n     recipient-data    \
    \                  SEQUENCE SIZE (1..ub-recipients)\n                        \
    \                 OF PerRecipientFields,\n     -- Flags applying to this entire\
    \ message\n     per-message-flags           [1]     IMPLICIT BIT STRING\n    \
    \ {\n        -- Priority values\n        -- At most one of \"non-urgent\" and\
    \ \"urgent\" may be specified\n        -- concurrently.  If neither is specified,\
    \ then a Priority\n        -- level of \"normal\" is assumed.\n        priority-non-urgent\
    \             (0),\n        priority-urgent                 (1),\n        -- Importance\
    \ values\n        -- At most one of \"low\" and \"high\" may be specified\n  \
    \      --  concurrently.  If neither is specified, then an\n        -- Importance\
    \ level of \"normal\" is  assumed.\n        importance-low                  (2),\n\
    \        importance-high                 (3),\n        -- Indication of whether\
    \ this message has been automatically\n        -- forwarded\n        auto-forwarded\
    \                  (4)\n      }  OPTIONAL,\n     -- User-specified recipient who\
    \ is to receive replies to this\n     -- message.\n     reply-to             \
    \       [2]     IMPLICIT SEQUENCE SIZE\n                                     \
    \    (1..ub-reply-to)\n                                         OF EMSDORAddress\
    \ OPTIONAL,\n     -- Identifier of a previous message, for which this message\n\
    \     -- is a reply\n     replied-to-IPM                       EMSDMessageId OPTIONAL,\n\
    \     -- Subject of the message.\n     subject                     [3]     IMPLICIT\
    \ AsciiPrintableString\n                                         (SIZE (0..ub-subject-field))\n\
    \                                                   OPTIONAL,\n     -- RFC-822\
    \ header fields not explicitly provided for in\n     -- this Heading. For messages\
    \ incoming from the external\n     -- world (i.e. in RFC-822 format), the Message-Id:\
    \ field\n     -- need not go here, as it is placed in the\n     -- Envelope's\
    \ EMSDMessageId (message-id) field.\n     extensions                [4]   IMPLICIT\
    \  SEQUENCE\n                               (SIZE (0..ub-header-extensions))\n\
    \                                     OF  IPMSExtension OPTIONAL,\n     -- MIME\
    \ Version (if other than 1.0)\n     mime-version            [5]     IMPLICIT AsciiPrintableString\n\
    \                                     (SIZE\n                                \
    \     (0..ub-mime-version-length))\n                                         \
    \    OPTIONAL,\n     -- Top-level MIME Content Type\n     mime-content-type  \
    \     [6]     IMPLICIT AsciiPrintableString\n                                \
    \     (SIZE (0..\n                                      ub-mime-content-type-length))\n\
    \                                                OPTIONAL,\n     -- MIME Content\
    \ Id\n     mime-content-id         [7]     IMPLICIT AsciiPrintableString\n   \
    \                                  (SIZE (0..\n                              \
    \        ub-mime-content-id-length))\n                                       \
    \        OPTIONAL,\n     -- MIME Content Description\n     mime-content-description\
    \ [8]    IMPLICIT AsciiPrintableString\n                                     (SIZE\
    \ (0..\n                                  ub-mime-content-description-length))\n\
    \                                               OPTIONAL,\n     -- Top-level MIME\
    \ Content Type\n     mime-content-transfer-encoding\n                        \
    \      [9]     IMPLICIT AsciiPrintableString\n                        (SIZE (0..ub-mime-content-transfer-encoding))\n\
    \                                                  OPTIONAL\n   };\n   PerRecipientFields\
    \ ::= SEQUENCE\n   {\n     recipient-address                            EMSDORAddress,\n\
    \     per-recipient-flags                          BIT STRING\n      {\n     \
    \    -- Recipient Types.\n         -- At most one of \"copy\" and \"blind-copy\"\
    \ may be\n         -- specified concurrently for a single recipient.  If\n   \
    \      -- neither is specified, than the recipient\n         -- is assumed to\
    \ be a \"primary\" recipient.\n         recipient-type-copy                  \
    \           (0),\n         recipient-type-blind-copy                       (1),\n\
    \         -- Notification Request Types.\n         -- Only one of \"rn\" and \"\
    nrn\" may be specified\n         -- concurrently, \\x110011 for a single recipient.\n\
    \         -- \"rn\" implies \"nrn\" in addition.\n         notification-request-rn\
    \                         (2),\n         notification-request-nrn            \
    \            (3),\n         notification-request-ipm-return                 (4),\n\
    \         -- Report Request Types\n         -- At most one of these should be\
    \ set for a\n         -- particular recipient. \"delivery\" implies \"non-delivery\"\
    \n         -- in addition.\n         report-request-non-delivery             \
    \        (5),\n         report-request-delivery                         (6),\n\
    \         -- Originator-to-Recipient request for a reply.\n         reply-requested\
    \                                 (7)\n      }  DEFAULT { report-request-non-delivery\
    \ }\n   };\n   IPMSExtension ::= SEQUENCE\n   {\n     x-header-label         \
    \             AsciiPrintableString,\n     x-header-value                     \
    \ AsciiPrintableString\n   };\n   Body ::= SEQUENCE\n   {\n     compression-method\
    \          [0]     IMPLICIT CompressionMethod\n                              \
    \                      OPTIONAL,\n     -- If compression method is not specified,\n\
    \     -- \"no-compression\" is implied.\n     message-body                   \
    \     OCTET STRING\n     -- See MIME for structure of the Body.\n     -- If a\
    \ compression method is specified, the entire text containing\n     -- the Content-Type:\
    \ element followed by the RFC-822 body are\n     -- compressed using the specified\
    \ method, and placed herein.\n   };\n   CompressionMethod ::= INTEGER\n   {\n\
    \     -- Compression Methods numbered 0 to 63 are reserved for\n     -- assignment\
    \ within this and associated specifications.\n     no-compression            \
    \      (0),\n     lempel-ziv                      (1)\n     -- Compression Methods\
    \ numbered between 64 and 127 may be\n     --  used on a bilaterally-agreed basis\
    \ between peers.\n   } (0..127)\n   END  -- end of EMSD-InterpersonalMessaging1995\n"
- title: C  RATIONALE FOR KEY DESIGN DECISIONS
  contents:
  - "C  RATIONALE FOR KEY DESIGN DECISIONS\n   This section summarizes the rationale\
    \ behind key design decisions\n   that were made while developing the EMSD Protocols.\n"
- title: C.1  Deviation From The SMTP Model
  contents:
  - "C.1  Deviation From The SMTP Model\n   SMTP is the main mail transport mechanism\
    \ throughout the Internet.\n   SMTP is widely deployed and well understood by\
    \ many engineers who\n   specialize in Internet email.  Because of these reasons,\
    \ works based\n   on SMTP or derived from it have a higher likelyhood of being\
    \ widely\n   deployed throughout the Internet.\n   However, SMTP is highly inefficient\
    \ for transfer of short messages.\n   SMTP's inefficiency applies to both the\
    \ number of transmissions and\n   also to the number of bytes transmitted.\n \
    \  Even when fully optimized with PIPELINING, SMTP is still quite\n   inefficient.\n\
    \   Submission of a short message with SMTP involves 15 transmissions.\n   Submission\
    \ of a short message with SMTP and PIPELINING involves 9\n   transmissions.  Submission\
    \ of a short message with EMSD (EMSD-P and\n   ESRO) involves 3 transmissions\
    \ (in typical cases).\n   The key requirement driving the design of EMSD is efficiency.\
    \  It was\n   determined that the at least 3 fold gains in efficiency justifies\
    \ the\n   deviation from the SMTP model.\n"
- title: C.1.1  Comparison of SMTP and EMSD Efficiency
  contents:
  - "C.1.1  Comparison of SMTP and EMSD Efficiency\n   The table below illustrates\
    \ the number of N-PDUs exchanged for\n   transfer of a short Internet email when\
    \ using SMTP, SMTP and\n   PIPELINING, QMTP and EMSD. The names used for identifying\
    \ the PDUs\n   are informal names.\n           SMTP      SMTP + pipelining   QMTP,\
    \ QMQP,   EMSD\n           -------   -----------------   ------------  -----------\n\
    \   client: SYN       SYN                 SYN           Submit.Req\n   server:\
    \ SYN ok    SYN ok              SYN           Submit.Resp\n   client: HELO   \
    \   EHLO                message       ack\n   server: ok        PIPELINING   \
    \       accept close\n   client: MAIL      MAIL RCPT DATA      close\n   server:\
    \ ok        ok\n   client: RCPT      message QUIT\n   server: ok        accept\
    \ ok close\n   client: DATA      close\n   server: ok\n   client: message\n  \
    \ server: accept\n   client: QUIT\n   server: ok close\n   client: close\n"
- title: C.2  Use of ESRO Instead of TCP
  contents:
  - "C.2  Use of ESRO Instead of TCP\n   In order to provide the same level of reliability\
    \ that the existing\n   email protocols provide for short messages, it is clear\
    \ that a\n   reliable underlying service is needed.  UDP [6], by itself, is\n\
    \   clearly not adequate.\n   Use of TCP however, involves three phases:\n   \
    \   1. Connection Establishment\n      2. Data Transfer\n      3. Disconnect\n\
    \   Reliable transfer of a short message using TCP at a minimum involves\n   5\
    \ transmissions as it is the case with QMTP.\n   The key requirement driving the\
    \ design of EMSD is Efficiency.  It was\n   determined that elimination of the\
    \ extra 2 transmissions that are an\n   inherent characteristic of TCP, justifies\
    \ deviation from it.\n   ESRO protocol, as specified in (RFC-2188 [1]), provides\
    \ reliable\n   connectionless remote operation services on top of UDP [6] with\n\
    \   minimum overhead.  ESRO protocol supports segmentation and\n   reassembly,\
    \ concatenation and separation.\n   Reliable transfer of a short message using\
    \ ESRO involves 3\n   transmissions as it is the case with EMSD-P.\n"
- title: C.3  Use Of Remote Procedure Call (RPC) Model
  contents:
  - "C.3  Use Of Remote Procedure Call (RPC) Model\n   Many Internet protocols are\
    \ \"text-based\".  Few Internet protocols are\n   RPC based.  Protocols designed\
    \ around the \"text-based\" approach have\n   a better track record of acceptance\
    \ throughout the Internet.\n   Considering that message submission and delivery\
    \ in EMSD involve no\n   more than two data exchanges, the text-based model becomes\
    \ the same\n   as an operation.  Furthermore, the RPC model is the natural way\
    \ of\n   using ESRO.\n"
- title: C.4  Use Of ASN.1
  contents:
  - "C.4  Use Of ASN.1\n   In order to minimize the number of bytes transferred, efficient\n\
    \   encoding mechanisms are needed.\n   Amongst today's encoding mechanisms, ASN.1\
    \ has the unique feature of\n   separating the abstract syntax from the encoding\
    \ rules.  By selecting\n   ASN.1 as the notation used for expressing EMSD's information\
    \ objects,\n   EMSD has the flexibility of using the most efficient encoding rules\n\
    \   such as Packed Encoding Rules (PER) when they are available.\n   Efficient\
    \ encoding can always be better performed when the syntax of\n   the information\
    \ is known.  In general, encoding and compression\n   techniques which use the\
    \ knowledge of the syntax of the information\n   produce better results than those\
    \ compression techniques that work on\n   arbitrary text.\n"
- title: D  FURTHER DEVELOPMENT
  contents:
  - "D  FURTHER DEVELOPMENT\n   Beyond this documentation of existing implementations,\
    \ further\n   development of EMSD protocol is anticipated.\n   The following deficiencies\
    \ and areas of improvement are identified.\n      o Mapping of RFC-822 to EMSD-FS\
    \ needs to be more explicit.\n      o Mapping of EMSD-FS to RFC-822 needs to be\
    \ more explicit.\n      o Text of duplicate detection section needs more structure.\n\
    \      o SubmissionControl operation needs more informative description.\n   \
    \   o Based on implementor's feedback the \"EMSD PROCEDURE FOR\n        OPERATIONS\"\
    \ section needs to be adjusted or re-done.\n      o The EMSD protocol can be extended\
    \ to also support transfer of\n        raw RFC-822 text-based messages in addition\
    \ to EMSD-FS. This\n        would be a trade-off in favor of \"ease of implementation\"\
    \n        against \"efficiency of bytes transfered\".\n      o Provide mechanisms\
    \ to support fully automated initial\n        provisioning of mail-boxes.\n  \
    \ Future development of the EMSD Protocol is anticipated to take place\n   at\
    \ http://www.emsd.org/.  Those interested in further development and\n   maintenance\
    \ of this protocol are invited to join the various mailing\n   lists hosted at\
    \ http://www.emsd.org/.\n"
- title: E. References
  contents:
  - "E. References\n   [1] Banan, M., Cheng, J. and M. Taylor, \"At&t/neda's efficient\
    \ short\n       remote operations (ESRO) protocol specification version 1.2.\"\
    ,\n       RFC 2188, September 1997.\n   [2] Bradner, S., \"Key words for use in\
    \ RFCs to indicate requirement\n       levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [3] Crocker, D., \"Standard for the format of ARPA internet text\n       messages\"\
    , STD 11, RFC 822, August 1982.\n   [4] Information Processing --- Open Systems\
    \ Interconnection ---\n       Specification of Packed Encoding Rules for Abstract\
    \ Syntax\n       Notation One (ASN.1). International Organization for\n      \
    \ Standardization and International Electrotechnical Committee.\n       International\
    \ Standard 8825-2.\n   [5] Information Processing --- Open Systems Interconnection\
    \ ---\n       Specification of Basic Encoding Rules for Abstract Syntax\n    \
    \   Notation One (ASN.1). International Organization for\n       Standardization\
    \ and International Electrotechnical Committee,\n       1987. International Standard\
    \ 8825.\n   [6] Postel, J., \"User Datagram Protocol\", STD 6, RFC 768, August\n\
    \       1980.\n"
- title: F. Full Copyright Statement
  contents:
  - "F. Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
