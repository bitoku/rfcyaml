- title: __initial_text__
  contents:
  - '         Internet Printing Protocol/1.1: Encoding and Transport

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is one of a set of documents, which together describe\n\
    \   all aspects of a new Internet Printing Protocol (IPP). IPP is an\n   application\
    \ level protocol that can be used for distributed printing\n   using Internet\
    \ tools and technologies. This document defines the\n   rules for encoding IPP\
    \ operations and IPP attributes into a new\n   Internet mime media type called\
    \ \"application/ipp\".  This document\n   also defines the rules for transporting\
    \ over Hypertext Transfer\n   Protocol (HTTP) a message body whose Content-Type\
    \ is\n   \"application/ipp\". This document defines a new scheme named 'ipp' for\n\
    \   identifying IPP printers and jobs.\n   The full set of IPP documents includes:\n\
    \   Design Goals for an Internet Printing Protocol [RFC2567]\n   Rationale for\
    \ the Structure and Model and Protocol for the Internet\n   Printing Protocol\
    \ [RFC2568]\n   Internet Printing Protocol/1.1: Model and Semantics [RFC2911]\n\
    \   Internet Printing Protocol/1.1: Encoding and Transport (this\n   document)\n\
    \   Internet Printing Protocol/1.1: Implementer's Guide [ipp-iig]\n   Mapping\
    \ between LPD and IPP Protocols [RFC2569]\n   The document, \"Design Goals for\
    \ an Internet Printing Protocol\", takes\n   a broad look at distributed printing\
    \ functionality, and it enumerates\n   real-life scenarios that help to clarify\
    \ the features that need to be\n   included in a printing protocol for the Internet.\
    \ It identifies\n   requirements for three types of users: end users, operators,\
    \ and\n   administrators. It calls out a subset of end user requirements that\n\
    \   are satisfied in IPP/1.1. A few OPTIONAL operator operations have\n   been\
    \ added to IPP/1.1.\n   The document, \"Rationale for the Structure and Model\
    \ and Protocol for\n   the Internet Printing Protocol\", describes IPP from a\
    \ high level\n   view, defines a roadmap for the various documents that form the\
    \ suite\n   of IPP specification documents, and gives background and rationale\n\
    \   for the IETF working group's major decisions.\n   The document, \"Internet\
    \ Printing Protocol/1.1: Model and Semantics\",\n   describes a simplified model\
    \ with abstract objects, their attributes,\n   and their operations that are independent\
    \ of encoding and transport.\n   It introduces a Printer and a Job object. The\
    \ Job object optionally\n   supports multiple documents per Job. It also addresses\
    \ security,\n   internationalization, and directory issues.\n   The document \"\
    Internet Printing Protocol/1.1: Implementer's Guide\",\n   gives advice to implementers\
    \ of IPP clients and IPP objects.\n   The document \"Mapping between LPD and IPP\
    \ Protocols\", gives some\n   advice to implementers of gateways between IPP and\
    \ LPD (Line Printer\n   Daemon) implementations.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ...................................................4\n\
    \   2. Conformance Terminology ........................................4\n   3.\
    \ Encoding of  the Operation Layer ...............................4\n      3.1\
    \  Picture of the Encoding ...................................6\n         3.1.1\
    \ Request and Response...................................6\n         3.1.2 Attribute\
    \ Group........................................6\n         3.1.3 Attribute..............................................7\n\
    \         3.1.4 Picture of the Encoding of an Attribute-with-one-value.7\n   \
    \      3.1.5 Additional-value.......................................8\n      \
    \   3.1.6 Alternative Picture of the Encoding of a Request Or a\n            \
    \   Response...............................................9\n      3.2  Syntax\
    \ of Encoding ........................................9\n      3.3  Attribute-group\
    \ ..........................................11\n      3.4  Required Parameters\
    \ ......................................12\n         3.4.1 Version-number........................................12\n\
    \         3.4.2 Operation-id..........................................12\n   \
    \      3.4.3 Status-code...........................................12\n      \
    \   3.4.4 Request-id............................................13\n      3.5\
    \  Tags .....................................................13\n         3.5.1\
    \ Delimiter Tags........................................13\n         3.5.2 Value\
    \ Tags............................................14\n      3.6  Name-Length ..............................................16\n\
    \      3.7  (Attribute) Name .........................................16\n   \
    \   3.8  Value Length .............................................16\n      3.9\
    \  (Attribute) Value ........................................17\n      3.10 Data\
    \ .....................................................18\n   4. Encoding of Transport\
    \ Layer ...................................18\n      4.1  Printer-uri and job-uri\
    \ ..................................19\n   5. IPP URL Scheme ................................................20\n\
    \   6. IANA Considerations ...........................................22\n   7.\
    \ Internationalization Considerations ...........................23\n   8. Security\
    \ Considerations .......................................23\n      8.1  Security\
    \ Conformance Requirements ........................23\n         8.1.1 Digest Authentication.................................23\n\
    \         8.1.2 Transport Layer Security (TLS)........................24\n   \
    \   8.2  Using IPP with TLS .......................................25\n   9. Interoperability\
    \ with IPP/1.0 Implementations .................25\n      9.1  The \"version-number\"\
    \ Parameter ...........................25\n      9.2  Security and URL Schemes\
    \ .................................26\n   10. References ...................................................27\n\
    \   11. Authors' Addresses ...........................................29\n   12.\
    \ Other Participants: ..........................................31\n   13. Appendix\
    \ A: Protocol Examples ................................33\n      13.1 Print-Job\
    \ Request ........................................33\n      13.2 Print-Job Response\
    \ (successful) ..........................34\n      13.3 Print-Job Response (failure)\
    \ .............................35\n      13.4 Print-Job Response (success with\
    \ attributes ignored) .....36\n      13.5 Print-URI Request ........................................38\n\
    \      13.6 Create-Job Request .......................................39\n   \
    \   13.7 Get-Jobs Request .........................................40\n      13.8\
    \ Get-Jobs Response ........................................41\n   14. Appendix\
    \ B: Registration of MIME Media Type Information for\n       \"application/ipp\"\
    .............................................42\n   15. Appendix C: Changes from\
    \ IPP/1.0 .............................44\n   16. Full Copyright Statement .....................................45\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document contains the rules for encoding IPP operations\
    \ and\n   describes two layers: the transport layer and the operation layer.\n\
    \   The transport layer consists of an HTTP/1.1 request or response. RFC\n   2616\
    \ [RFC2616] describes HTTP/1.1. This document specifies the HTTP\n   headers that\
    \ an IPP implementation supports.\n   The operation layer consists of a message\
    \ body in an HTTP request or\n   response.  The document \"Internet Printing Protocol/1.1:\
    \ Model and\n   Semantics\" [RFC2911] defines the semantics of such a message\
    \ body and\n   the supported values. This document specifies the encoding of an\
    \ IPP\n   operation. The aforementioned document [RFC2911] is henceforth\n   referred\
    \ to as the \"IPP model document\" or simply \"model document\".\n   Note:  the\
    \ version number of IPP (1.1) and HTTP (1.1) are not linked.\n   They both just\
    \ happen to be 1.1.\n"
- title: 2. Conformance Terminology
  contents:
  - "2. Conformance Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHOULD\", \"SHOULD NOT\",\n   \"RECOMMENDED\", \"MAY\", and  \"OPTIONAL\"\
    \ in this document are to be\n   interpreted as described in RFC 2119 [RFC2119].\n"
- title: 3. Encoding of the Operation Layer
  contents:
  - "3. Encoding of the Operation Layer\n   The operation layer is the message body\
    \ part of the HTTP request or\n   response and it MUST contain a single IPP operation\
    \ request or IPP\n   operation response.  Each request or response consists of\
    \ a sequence\n   of values and attribute groups. Attribute groups consist of a\n\
    \   sequence of attributes each of which is a name and value.  Names and\n   values\
    \ are ultimately sequences of octets.\n   The encoding consists of octets as the\
    \ most primitive type. There are\n   several types built from octets, but three\
    \ important types are\n   integers, character strings and octet strings, on which\
    \ most other\n   data types are built. Every character string in this encoding\
    \ MUST be\n   a sequence of characters where the characters are associated with\n\
    \   some charset and some natural language. A character string MUST be in\n  \
    \ \"reading order\" with the first character in the value (according to\n   reading\
    \ order) being the first character in the encoding. A character\n   string whose\
    \ associated charset is US-ASCII whose associated natural\n   language is US English\
    \ is henceforth called a US-ASCII-STRING. A\n   character string whose associated\
    \ charset and natural language are\n   specified in a request or response as described\
    \ in the model document\n   is henceforth called a LOCALIZED-STRING.  An octet\
    \ string MUST be in\n   \"IPP model document order\" with the first octet in the\
    \ value\n   (according to the IPP model document order) being the first octet\
    \ in\n   the encoding. Every integer in this encoding MUST be encoded as a\n \
    \  signed integer using two's-complement binary encoding with big-endian\n   format\
    \ (also known as \"network order\" and \"most significant byte\n   first\"). The\
    \ number of octets for an integer MUST be 1, 2 or 4,\n   depending on usage in\
    \ the protocol. Such one-octet integers,\n   henceforth called SIGNED-BYTE, are\
    \ used for the version-number and\n   tag fields. Such two-byte integers, henceforth\
    \ called SIGNED-SHORT\n   are used for the operation-id, status-code and length\
    \ fields. Four\n   byte integers, henceforth called SIGNED-INTEGER, are used for\
    \ value\n   fields and the request-id.\n   The following two sections present\
    \ the encoding of the operation\n   layer in two ways:\n      -  informally through\
    \ pictures and description\n      -  formally through Augmented Backus-Naur Form\
    \ (ABNF), as\n         specified by RFC 2234 [RFC2234]\n   An operation request\
    \ or response MUST use the encoding described in\n   these two sections.\n"
- title: 3.1 Picture of the Encoding
  contents:
  - '3.1 Picture of the Encoding

    '
- title: 3.1.1 Request and Response
  contents:
  - "3.1.1 Request and Response\n   An operation request or response is encoded as\
    \ follows:\n   -----------------------------------------------\n   |         \
    \         version-number             |   2 bytes  - required\n   -----------------------------------------------\n\
    \   |               operation-id (request)        |\n   |                    \
    \  or                     |   2 bytes  - required\n   |               status-code\
    \ (response)        |\n   -----------------------------------------------\n  \
    \ |                   request-id                |   4 bytes  - required\n   -----------------------------------------------\n\
    \   |                 attribute-group             |   n bytes - 0 or more\n  \
    \ -----------------------------------------------\n   |              end-of-attributes-tag\
    \          |   1 byte   - required\n   -----------------------------------------------\n\
    \   |                     data                    |   q bytes  - optional\n  \
    \ -----------------------------------------------\n   The first three fields in\
    \ the above diagram contain the value of\n   attributes described in section 3.1.1\
    \ of the Model document.\n   The fourth field is the \"attribute-group\" field,\
    \ and it occurs 0 or\n   more times. Each \"attribute-group\" field represents\
    \ a single group of\n   attributes, such as an Operation Attributes group or a\
    \ Job Attributes\n   group (see the Model document). The IPP model document specifies\
    \ the\n   required attribute groups and their order for each operation request\n\
    \   and response.\n   The \"end-of-attributes-tag\" field is always present, even\
    \ when the\n   \"data\" is not present.  The Model document specifies for each\n\
    \   operation request and response whether the \"data\" field is present or\n\
    \   absent.\n"
- title: 3.1.2 Attribute Group
  contents:
  - "3.1.2 Attribute Group\n   Each \"attribute-group\" field is encoded as follows:\n\
    \   -----------------------------------------------\n   |           begin-attribute-group-tag\
    \         |  1 byte\n   ----------------------------------------------------------\n\
    \   |                   attribute                 |  p bytes |- 0 or more\n  \
    \ ----------------------------------------------------------\n   The \"begin-attribute-group-tag\"\
    \ field marks the beginning of an\n   \"attribute-group\" field and its value\
    \ identifies the type of\n   attribute group, e.g. Operations Attributes group\
    \ versus a Job\n   Attributes group.  The \"begin-attribute-group-tag\" field\
    \ also marks\n   the end of the previous attribute group except for the \"begin-\n\
    \   attribute-group-tag\" field in the first \"attribute-group\" field of a\n\
    \   request or response.  The \"begin-attribute-group-tag\" field acts as\n  \
    \ an \"attribute-group\" terminator because an \"attribute-group\" field\n   cannot\
    \ nest inside another \"attribute-group\" field.\n   An \"attribute-group\" field\
    \ contains zero or more \"attribute\" fields.\n   Note, the values of the \"begin-attribute-group-tag\"\
    \ field and the\n   \"end-of-attributes-tag\" field are called \"delimiter-tags\"\
    .\n"
- title: 3.1.3 Attribute
  contents:
  - "3.1.3 Attribute\n   An \"attribute\" field is encoded as follows:\n   -----------------------------------------------\n\
    \   |          attribute-with-one-value           |  q bytes\n   ----------------------------------------------------------\n\
    \   |             additional-value                |  r bytes |- 0 or more\n  \
    \ ----------------------------------------------------------\n   When an attribute\
    \ is single valued (e.g. \"copies\" with value of 10)\n   or multi-valued with\
    \ one value (e.g. \"sides-supported\" with just the\n   value 'one-sided') it\
    \ is encoded with just an \"attribute-with-one-\n   value\" field. When an attribute\
    \ is multi-valued with n values (e.g.\n   \"sides-supported\" with the values\
    \ 'one-sided' and 'two-sided-long-\n   edge'), it is encoded with an \"attribute-with-one-value\"\
    \ field\n   followed by n-1 \"additional-value\" fields.\n"
- title: 3.1.4 Picture of the Encoding of an Attribute-with-one-value
  contents:
  - "3.1.4 Picture of the Encoding of an Attribute-with-one-value\n   Each \"attribute-with-one-value\"\
    \ field is encoded as follows:\n   -----------------------------------------------\n\
    \   |                   value-tag                 |   1 byte\n   -----------------------------------------------\n\
    \   |               name-length  (value is u)     |   2 bytes\n   -----------------------------------------------\n\
    \   |                     name                    |   u bytes\n   -----------------------------------------------\n\
    \   |              value-length  (value is v)     |   2 bytes\n   -----------------------------------------------\n\
    \   |                     value                   |   v bytes\n   -----------------------------------------------\n\
    \   An \"attribute-with-one-value\" field is encoded with five subfields:\n  \
    \    The \"value-tag\" field specifies the attribute syntax, e.g. 0x44\n     \
    \ for the attribute syntax 'keyword'.\n      The \"name-length\" field specifies\
    \ the length of the \"name\" field\n      in bytes, e.g. u in the above diagram\
    \ or 15 for the name \"sides-\n      supported\".\n      The \"name\" field contains\
    \ the textual name of the attribute, e.g.\n      \"sides-supported\".\n      The\
    \ \"value-length\" field specifies the length of the \"value\" field\n      in\
    \ bytes, e.g. v in the above diagram or 9 for the (keyword) value\n      'one-sided'.\n\
    \      The \"value\" field contains the value of the attribute, e.g. the\n   \
    \   textual value 'one-sided'.\n"
- title: 3.1.5 Additional-value
  contents:
  - "3.1.5 Additional-value\n   Each \"additional-value\" field is encoded as follows:\n\
    \   -----------------------------------------------\n   |                   value-tag\
    \                 |   1 byte\n   -----------------------------------------------\n\
    \   |            name-length  (value is 0x0000)   |   2 bytes\n   -----------------------------------------------\n\
    \   |              value-length (value is w)      |   2 bytes\n   -----------------------------------------------\n\
    \   |                     value                   |   w bytes\n   -----------------------------------------------\n\
    \   An \"additional-value\" is encoded with four subfields:\n      The \"value-tag\"\
    \ field specifies the attribute syntax, e.g. 0x44\n      for the attribute syntax\
    \ 'keyword'.\n      The \"name-length\" field has the value of 0 in order to signify\n\
    \      that it is an \"additional-value\". The value of the \"name-length\"\n\
    \      field distinguishes an \"additional-value\" field (\"name-length\" is\n\
    \      0) from an \"attribute-with-one-value\" field (\"name-length\" is not\n\
    \      0).\n      The \"value-length\" field specifies the length of the \"value\"\
    \ field\n      in bytes, e.g. w in the above diagram or 19 for the (keyword)\n\
    \      value 'two-sided-long-edge'.\n      The \"value\" field contains the value\
    \ of the attribute, e.g. the\n      textual value 'two-sided-long-edge'.\n"
- title: 3.1.6 Alternative Picture of the Encoding of a Request Or a Response
  contents:
  - "3.1.6 Alternative Picture of the Encoding of a Request Or a Response\n   From\
    \ the standpoint of a parser that performs an action based on a\n   \"tag\" value,\
    \ the encoding consists of:\n   -----------------------------------------------\n\
    \   |                  version-number             |   2 bytes  - required\n  \
    \ -----------------------------------------------\n   |               operation-id\
    \ (request)        |\n   |                      or                     |   2 bytes\
    \  - required\n   |               status-code (response)        |\n   -----------------------------------------------\n\
    \   |                   request-id                |   4 bytes  - required\n  \
    \ -----------------------------------------------------------\n   |        tag\
    \ (delimiter-tag or value-tag)     |   1 byte  |\n   -----------------------------------------------\
    \           |-0 or more\n   |           empty or rest of attribute        |  \
    \ x bytes |\n   -----------------------------------------------------------\n\
    \   |              end-of-attributes-tag          |   1 byte   - required\n  \
    \ -----------------------------------------------\n   |                     data\
    \                    |   y bytes  - optional\n   -----------------------------------------------\n\
    \   The following show what fields the parser would expect after each\n   type\
    \ of  \"tag\":\n      -  \"begin-attribute-group-tag\": expect zero or more \"\
    attribute\"\n         fields\n      -  \"value-tag\": expect the remainder of\
    \ an \"attribute-with-one-\n         value\" or  an \"additional-value\".\n  \
    \    -  \"end-of-attributes-tag\": expect that \"attribute\" fields are\n    \
    \     complete and there is optional \"data\"\n"
- title: 3.2 Syntax of Encoding
  contents:
  - "3.2 Syntax of Encoding\n   The syntax below is ABNF [RFC2234] except 'strings\
    \ of literals' MUST\n   be case sensitive. For example 'a' means lower case  'a'\
    \ and not\n   upper case 'A'.   In addition, SIGNED-BYTE and SIGNED-SHORT fields\n\
    \   are represented as '%x' values which show their range of values.\n      ipp-message\
    \ = ipp-request / ipp-response\n      ipp-request = version-number operation-id\
    \ request-id\n               *attribute-group end-of-attributes-tag data\n   \
    \   ipp-response = version-number status-code request-id\n               *attribute-group\
    \ end-of-attributes-tag data\n      attribute-group = begin-attribute-group-tag\
    \ *attribute\n      version-number = major-version-number minor-version-number\n\
    \      major-version-number = SIGNED-BYTE\n      minor-version-number = SIGNED-BYTE\n\
    \      operation-id = SIGNED-SHORT    ; mapping from model defined below\n   \
    \   status-code = SIGNED-SHORT  ; mapping from model defined below\n      request-id\
    \ = SIGNED-INTEGER ; whose value is > 0\n      attribute = attribute-with-one-value\
    \ *additional-value\n      attribute-with-one-value = value-tag name-length name\n\
    \          value-length value\n      additional-value = value-tag zero-name-length\
    \ value-length value\n      name-length = SIGNED-SHORT    ; number of octets of\
    \ 'name'\n      name = LALPHA *( LALPHA / DIGIT / \"-\" / \"_\" / \".\" )\n  \
    \    value-length = SIGNED-SHORT   ; number of octets of 'value'\n      value\
    \ = OCTET-STRING\n      data = OCTET-STRING\n      zero-name-length = %x00.00\
    \            ; name-length of 0\n      value-tag = %x10-FF                  ;see\
    \ section 3.7.2\n      begin-attribute-group-tag = %x00-02 / %04-0F ; see section\
    \ 3.7.1\n      end-of-attributes-tag = %x03                  ; tag of 3\n    \
    \                                ; see section 3.7.1\n      SIGNED-BYTE = BYTE\n\
    \      SIGNED-SHORT = 2BYTE\n      SIGNED-INTEGER = 4BYTE\n      DIGIT = %x30-39\
    \    ;  \"0\" to \"9\"\n      LALPHA = %x61-7A   ;  \"a\" to \"z\"\n      BYTE\
    \ = %x00-FF\n      OCTET-STRING = *BYTE\n   The syntax below defines additional\
    \ terms that are referenced in this\n   document. This syntax provides an alternate\
    \ grouping of the delimiter\n   tags.\n      delimiter-tag = begin-attribute-group-tag\
    \  / ; see section 3.7.1\n                end-of-attributes-tag\n      delimiter-tag\
    \ = %x00-0F                      ; see section 3.7.1\n      begin-attribute-group-tag\
    \ = %x00 / operation-attributes-tag /\n         job-attributes-tag / printer-attributes-tag\
    \ /\n         unsupported-attributes-tag /  %x06-0F\n      operation-attributes-tag\
    \ =  %x01              ; tag of 1\n      job-attributes-tag    =  %x02       \
    \          ; tag of 2\n      printer-attributes-tag =  %x04                ; tag\
    \ of 4\n      unsupported-attributes-tag =  %x05            ; tag of 5\n"
- title: 3.3 Attribute-group
  contents:
  - "3.3 Attribute-group\n   Each \"attribute-group\" field MUST be encoded with the\
    \ \"begin-\n   attribute-group-tag\" field followed by zero or more \"attribute\"\
    \ sub-\n   fields.\n   The table below maps the model document group name to value\
    \ of the\n   \"begin-attribute-group-tag\" field:\n      Model Document Group\
    \            \"begin-attribute-group-tag\" field\n                           \
    \           values\n      Operation Attributes            \"operations-attributes-tag\"\
    \n      Job Template Attributes         \"job-attributes-tag\"\n      Job Object\
    \ Attributes           \"job-attributes-tag\"\n      Unsupported Attributes  \
    \        \"unsupported-attributes-tag\"\n      Requested Attributes          \
    \  \"job-attributes-tag\"\n      (Get-Job-Attributes)\n      Requested Attributes\
    \            \"printer-attributes-tag\"\n      (Get-Printer-Attributes)\n    \
    \  Document Content                in a special position as\n                \
    \                      described above\n   For each operation request and response,\
    \ the model document\n   prescribes the required and optional attribute groups,\
    \ along with\n   their order.  Within each attribute group, the model document\n\
    \   prescribes the required and optional attributes, along with their\n   order.\n\
    \   When the Model document requires an attribute group in a request or\n   response\
    \ and the attribute group contains zero attributes, a request\n   or response\
    \ SHOULD encode the attribute group with the \"begin-\n   attribute-group-tag\"\
    \ field followed by zero \"attribute\" fields.  For\n   example, if the client\
    \ requests a single unsupported attribute with\n   the Get-Printer-Attributes\
    \ operation, the Printer MUST return no\n   \"attribute\" fields, and it SHOULD\
    \ return a \"begin-attribute-group-\n   tag\" field for the Printer Attributes\
    \ Group. The Unsupported\n   Attributes group is not such an example. According\
    \ to the model\n   document, the Unsupported Attributes Group SHOULD be present\
    \ only if\n   the unsupported attributes group contains at least one attribute.\n\
    \   A receiver of a request MUST be able to process the following as\n   equivalent\
    \ empty attribute groups:\n      a) A \"begin-attribute-group-tag\" field with\
    \ zero following\n         \"attribute\" fields.\n      b) An expected but missing\
    \ \"begin-attribute-group-tag\" field.\n   When the Model document requires a\
    \ sequence of an unknown number of\n   attribute groups, each of the same type,\
    \ the encoding MUST contain\n   one \"begin-attribute-group-tag\" field for each\
    \ attribute group even\n   when an \"attribute-group\" field contains zero \"\
    attribute\" sub-fields.\n   For example, for the Get-Jobs operation may return\
    \ zero attributes\n   for some jobs and not others. The \"begin-attribute-group-tag\"\
    \ field\n   followed by zero \"attribute\" fields tells the recipient that there\
    \ is\n   a job in queue for which no information is available except that it\n\
    \   is in the queue.\n"
- title: 3.4 Required Parameters
  contents:
  - "3.4 Required Parameters\n   Some operation elements are called parameters in\
    \ the model document\n   [RFC2911]. They MUST be encoded in a special position\
    \ and they MUST\n   NOT appear as operation attributes.  These parameters are\
    \ described\n   in the subsections below.\n"
- title: 3.4.1 Version-number
  contents:
  - "3.4.1 Version-number\n   The \"version-number\" field MUST consist of a major\
    \ and minor\n   version-number, each of which MUST be represented by a SIGNED-BYTE.\n\
    \   The major version-number MUST be the first byte of the encoding and\n   the\
    \ minor version-number MUST be the second byte of the encoding. The\n   protocol\
    \ described in this document MUST have a major version-number\n   of 1 (0x01)\
    \ and a minor version-number of 1 (0x01).  The ABNF for\n   these two bytes MUST\
    \ be %x01.01.\n"
- title: 3.4.2 Operation-id
  contents:
  - "3.4.2 Operation-id\n   The \"operation-id\" field MUST contain an operation-id\
    \ value defined\n   in the model document. The value MUST be encoded as a SIGNED-SHORT\n\
    \   and it MUST be in the third and fourth bytes of the encoding of an\n   operation\
    \ request.\n"
- title: 3.4.3 Status-code
  contents:
  - "3.4.3 Status-code\n   The \"status-code\" field MUST contain a status-code value\
    \ defined in\n   the model document. The value MUST be encoded as a SIGNED-SHORT\
    \ and\n   it MUST be in the third and fourth bytes of the encoding of an\n   operation\
    \ response.\n   The status-code is an operation attribute in the model document.\
    \ In\n   the protocol, the status-code is in a special position, outside of\n\
    \   the operation attributes.\n   If an IPP status-code is returned, then the\
    \ HTTP Status-Code MUST be\n   200 (successful-ok). With any other HTTP Status-Code\
    \ value, the HTTP\n   response MUST NOT contain an IPP message-body, and thus\
    \ no IPP\n   status-code is returned.\n"
- title: 3.4.4 Request-id
  contents:
  - "3.4.4 Request-id\n   The \"request-id\" field MUST contain a request-id value\
    \ as defined in\n   the model document. The value MUST be encoded as a SIGNED-INTEGER\
    \ and\n   it MUST be in the fifth through eighth bytes of the encoding.\n"
- title: 3.5 Tags
  contents:
  - "3.5 Tags\n   There are two kinds of tags:\n      -  delimiter tags: delimit major\
    \ sections of the protocol, namely\n         attributes and data\n      -  value\
    \ tags: specify the type of each attribute value\n"
- title: 3.5.1 Delimiter Tags
  contents:
  - "3.5.1 Delimiter Tags\n   The following table specifies the values for the delimiter\
    \ tags:\n   Tag Value (Hex)    Meaning\n   0x00               reserved for definition\
    \ in a future IETF\n                      standards track document\n   0x01  \
    \             \"operation-attributes-tag\"\n   0x02               \"job-attributes-tag\"\
    \n   0x03               \"end-of-attributes-tag\"\n   0x04               \"printer-attributes-tag\"\
    \n   0x05               \"unsupported-attributes-tag\"\n   0x06-0x0f         \
    \ reserved for future delimiters in IETF\n                      standards track\
    \ documents\n   When a \"begin-attribute-group-tag\" field occurs in the protocol,\
    \ it\n   means that zero or more following attributes up to the next delimiter\n\
    \   tag MUST be attributes belonging to the attribute group specified by\n   the\
    \ value of the \"begin-attribute-group-tag\". For example, if the\n   value of\
    \ \"begin-attribute-group-tag\" is 0x01, the following\n   attributes MUST be\
    \ members of the Operations Attributes group.\n   The \"end-of-attributes-tag\"\
    \ (value 0x03) MUST occur exactly once in\n   an operation.  It MUST be the last\
    \ \"delimiter-tag\". If the operation\n   has a document-content group, the document\
    \ data in that group MUST\n   follow the \"end-of-attributes-tag\".\n   The order\
    \ and presence of \"attribute-group\" fields (whose beginning\n   is marked by\
    \ the \"begin-attribute-group-tag\" subfield) for each\n   operation request and\
    \ each operation response MUST be that defined in\n   the model document. For\
    \ further details, see section 3.7 \"(Attribute)\n   Name\" and 13 \"Appendix\
    \ A: Protocol Examples\".\n   A Printer MUST treat a \"delimiter-tag\" (values\
    \ from 0x00 through\n   0x0F) differently from a \"value-tag\" (values from 0x10\
    \ through 0xFF)\n   so that the Printer knows that there is an entire attribute\
    \ group\n   that it doesn't understand as opposed to a single value that it\n\
    \   doesn't understand.\n"
- title: 3.5.2 Value Tags
  contents:
  - "3.5.2 Value Tags\n   The remaining tables show values for the \"value-tag\" field,\
    \ which is\n   the first octet of an attribute. The \"value-tag\" field specifies\
    \ the\n   type of the value of the attribute.\n   The following table specifies\
    \ the \"out-of-band\" values for the\n   \"value-tag\" field.\n   Tag Value (Hex)\
    \  Meaning\n   0x10             unsupported\n   0x11             reserved for\
    \ 'default' for definition in a future\n                    IETF standards track\
    \ document\n   0x12             unknown\n   0x13             no-value\n   0x14-0x1F\
    \        reserved for \"out-of-band\" values in future IETF\n                \
    \    standards track documents.\n   The following table specifies the integer\
    \ values for the \"value-tag\"\n   field:\n   Tag Value (Hex)   Meaning\n   0x20\
    \              reserved for definition in a future IETF\n                    \
    \ standards track document\n   0x21              integer\n   0x22            \
    \  boolean\n   0x23              enum\n   0x24-0x2F         reserved for integer\
    \ types for definition in\n                     future IETF standards track documents\n\
    \   NOTE: 0x20 is reserved for \"generic integer\" if it should ever be\n   needed.\n\
    \   The following table specifies the octetString values for the \"value-\n  \
    \ tag\" field:\n   Tag Value (Hex)   Meaning\n   0x30              octetString\
    \ with an  unspecified format\n   0x31              dateTime\n   0x32        \
    \      resolution\n   0x33              rangeOfInteger\n   0x34              reserved\
    \ for definition in a future IETF\n                     standards track document\n\
    \   0x35              textWithLanguage\n   0x36              nameWithLanguage\n\
    \   0x37-0x3F         reserved for octetString type definitions in\n         \
    \            future IETF standards track documents\n   The following table specifies\
    \ the character-string values for the\n   \"value-tag\" field:\n   Tag Value (Hex)\
    \   Meaning\n   0x40              reserved for definition in a future IETF\n \
    \                    standards track document\n   0x41              textWithoutLanguage\n\
    \   0x42              nameWithoutLanguage\n   0x43              reserved for definition\
    \ in a future IETF\n                     standards track document\n   0x44   \
    \           keyword\n   0x45              uri\n   0x46              uriScheme\n\
    \   0x47              charset\n   0x48              naturalLanguage\n   0x49 \
    \             mimeMediaType\n   0x4A-0x5F         reserved for character string\
    \ type definitions\n                     in future IETF standards track documents\n\
    \   NOTE: 0x40 is reserved for \"generic character-string\" if it should\n   ever\
    \ be needed.\n   NOTE:  an attribute value always has a type, which is explicitly\n\
    \   specified by its tag; one such tag value is \"nameWithoutLanguage\".\n   An\
    \ attribute's name has an implicit type, which is keyword.\n   The values 0x60-0xFF\
    \ are reserved for future type definitions in IETF\n   standards track documents.\n\
    \   The tag 0x7F is reserved for extending types beyond the 255 values\n   available\
    \ with a single byte. A tag value of 0x7F MUST signify that\n   the first 4 bytes\
    \ of the value field are interpreted as the tag\n   value.  Note this future extension\
    \ doesn't affect parsers that are\n   unaware of this special tag. The tag is\
    \ like any other unknown tag,\n   and the value length specifies the length of\
    \ a value, which contains\n   a value that the parser treats atomically.  Values\
    \ from 0x00 to\n   0x37777777 are reserved for definition in future IETF standard\
    \ track\n   documents.  The values 0x40000000 to 0x7FFFFFFF are reserved for\n\
    \   vendor extensions.\n"
- title: 3.6 Name-Length
  contents:
  - "3.6 Name-Length\n   The \"name-length\" field MUST consist of a SIGNED-SHORT.\
    \ This field\n   MUST specify the number of octets in the immediately following\
    \ \"name\"\n   field.  The value of this field excludes the two bytes of the \"\
    name-\n   length\" field. For example, if the \"name\" field contains \"sides\"\
    , the\n   value of this field is 5.\n   If a \"name-length\" field has a value\
    \ of zero, the following \"name\"\n   field MUST be empty, and the following value\
    \ MUST be treated as an\n   additional value for the attribute encoded in the\
    \ nearest preceding\n   \"attribute-with-one-value\" field. Within an attribute\
    \ group, if two\n   or more attributes have the same name, the attribute group\
    \ is mal-\n   formed (see [RFC2911] section 3.1.3). The zero-length name is the\n\
    \   only mechanism for multi-valued attributes.\n"
- title: 3.7 (Attribute) Name
  contents:
  - "3.7 (Attribute) Name\n   The \"name\" field MUST contain the name of an attribute.\
    \ The model\n   document [RFC2911] specifies such names.\n"
- title: 3.8 Value Length
  contents:
  - "3.8 Value Length\n   The \"value-length\" field MUST consist of a SIGNED-SHORT.\
    \ This field\n   MUST specify the number of octets in the immediately following\n\
    \   \"value\" field.  The value of this field excludes the two bytes of the\n\
    \   \"value-length\" field. For example, if the \"value\" field contains the\n\
    \   keyword (text) value 'one-sided', the value of this field is 9.\n   For any\
    \ of the types represented by binary signed integers, the\n   sender MUST encode\
    \ the value in exactly four octets.\n   For any of the types represented by character-strings,\
    \ the sender\n   MUST encode the value with all the characters of the string and\n\
    \   without any padding characters.\n   For \"out-of-band\" \"value-tag\" fields\
    \ defined in this document, such\n   as \"unsupported\", the \"value-length\"\
    \ MUST be 0 and the \"value\" empty;\n   the \"value\" has no meaning when the\
    \ \"value-tag\" has one of these\n   \"out-of-band\" values. For future \"out-of-band\"\
    \ \"value-tag\" fields,\n   the same rule holds unless the definition explicitly\
    \ states that the\n   \"value-length\" MAY be non-zero and the \"value\" non-empty.\n"
- title: 3.9 (Attribute) Value
  contents:
  - "3.9 (Attribute) Value\n   The syntax types (specified by the \"value-tag\" field)\
    \ and most of the\n   details of the representation of attribute values are defined\
    \ in the\n   IPP model document. The table below augments the information in the\n\
    \   model document, and defines the syntax types from the model document\n   in\
    \ terms of the 5 basic types defined in section 3, \"Encoding of the\n   Operation\
    \ Layer\". The 5 types are US-ASCII-STRING, LOCALIZED-STRING,\n   SIGNED-INTEGER,\
    \ SIGNED-SHORT, SIGNED-BYTE, and OCTET-STRING.\n  Syntax of Attribute   Encoding\n\
    \  Value\n  textWithoutLanguage,  LOCALIZED-STRING.\n  nameWithoutLanguage\n \
    \ textWithLanguage      OCTET-STRING consisting of 4 fields:\n               \
    \           a. a SIGNED-SHORT which is the number of\n                       \
    \      octets in the following field\n                          b. a value of\
    \ type natural-language,\n                          c. a SIGNED-SHORT which is\
    \ the number of\n                             octets in the following field,\n\
    \                          d. a value of type textWithoutLanguage.\n         \
    \               The length of a textWithLanguage value MUST be\n             \
    \           4 + the value of field a + the value of field c.\n  nameWithLanguage\
    \      OCTET-STRING consisting of 4 fields:\n                          a. a SIGNED-SHORT\
    \ which is the number of\n                             octets in the following\
    \ field\n                          b. a value of type natural-language,\n    \
    \                      c. a SIGNED-SHORT which is the number of\n            \
    \                 octets in the following field\n                          d.\
    \ a value of type nameWithoutLanguage.\n                        The length of\
    \ a nameWithLanguage value MUST be\n                        4 + the value of field\
    \ a + the value of field c.\n  charset,              US-ASCII-STRING.\n  naturalLanguage,\n\
    \  mimeMediaType,\n  keyword, uri, and\n  uriScheme\n  Syntax of Attribute   Encoding\n\
    \  Value\n  boolean               SIGNED-BYTE  where 0x00 is 'false' and 0x01\
    \ is\n                        'true'.\n  integer and enum      a SIGNED-INTEGER.\n\
    \  dateTime              OCTET-STRING consisting of eleven octets whose\n    \
    \                    contents are defined by \"DateAndTime\" in RFC\n        \
    \                1903 [RFC1903].\n  resolution            OCTET-STRING consisting\
    \ of nine octets of  2\n                        SIGNED-INTEGERs followed by a\
    \ SIGNED-BYTE. The\n                        first SIGNED-INTEGER contains the\
    \ value of\n                        cross feed direction resolution. The second\n\
    \                        SIGNED-INTEGER contains the value of feed\n         \
    \               direction resolution. The SIGNED-BYTE contains\n             \
    \           the units\n  rangeOfInteger        Eight octets consisting of 2 SIGNED-INTEGERs.\n\
    \                        The first SIGNED-INTEGER contains the lower\n       \
    \                 bound and the second SIGNED-INTEGER contains\n             \
    \           the upper bound.\n  1setOf  X             Encoding according to the\
    \ rules for an\n                        attribute with more than 1 value.  Each\
    \ value\n                        X is encoded according to the rules for\n   \
    \                     encoding its type.\n  octetString           OCTET-STRING\n\
    \   The attribute syntax type of the value determines its encoding and\n   the\
    \ value of its \"value-tag\".\n"
- title: 3.10 Data
  contents:
  - "3.10 Data\n   The \"data\" field MUST include any data required by the operation\n"
- title: 4. Encoding of Transport Layer
  contents:
  - "4. Encoding of Transport Layer\n   HTTP/1.1 [RFC2616] is the transport layer\
    \ for this protocol.\n   The operation layer has been designed with the assumption\
    \ that the\n   transport layer contains the following information:\n      -  the\
    \ URI of the target job or printer operation\n      -  the total length of the\
    \ data in the operation layer, either as\n         a single length or as a sequence\
    \ of chunks each with a length.\n   It is REQUIRED that a printer implementation\
    \ support HTTP over the\n   IANA assigned Well Known Port 631 (the IPP default\
    \ port), though a\n   printer implementation may support HTTP over some other\
    \ port as well.\n   Each HTTP operation MUST use the POST method where the request-URI\
    \ is\n   the object target of the operation, and where the \"Content-Type\" of\n\
    \   the message-body in each request and response MUST be\n   \"application/ipp\"\
    . The message-body MUST contain the operation layer\n   and MUST have the syntax\
    \ described in section 3.2 \"Syntax of\n   Encoding\". A client implementation\
    \ MUST adhere to the rules for a\n   client described for HTTP1.1 [RFC2616]. \
    \ A printer (server)\n   implementation MUST adhere the rules for an origin server\
    \ described\n   for HTTP1.1 [RFC2616].\n   An IPP server sends a response for\
    \ each request that it receives.  If\n   an IPP server detects an error, it MAY\
    \ send a response before it has\n   read the entire request.  If the HTTP layer\
    \ of the IPP server\n   completes processing the HTTP headers successfully, it\
    \ MAY send an\n   intermediate response, such as \"100 Continue\", with no IPP\
    \ data\n   before sending the IPP response.  A client MUST expect such a variety\n\
    \   of responses from an IPP server. For further information on HTTP/1.1,\n  \
    \ consult the HTTP documents [RFC2616].\n   An HTTP server MUST support chunking\
    \ for IPP requests, and an IPP\n   client MUST support chunking for IPP responses\
    \ according to  HTTP/1.1\n   [RFC2616].  Note: this rule causes a conflict with\
    \ non-compliant\n   implementations of HTTP/1.1 that don't support chunking for\
    \ POST\n   methods, and this rule may cause a conflict with non-compliant\n  \
    \ implementations of HTTP/1.1 that don't support chunking for CGI\n   scripts.\n"
- title: 4.1 Printer-uri and job-uri
  contents:
  - "4.1 Printer-uri and job-uri\n   All Printer and Job objects are identified by\
    \ a Uniform Resource\n   Identifier (URI) [RFC2396] so that they can be persistently\
    \ and\n   unambiguously referenced.  Since every URL is a specialized form of\
    \ a\n   URI, even though the more generic term URI is used throughout the\n  \
    \ rest of this document, its usage is intended to cover the more\n   specific\
    \ notion of URL as well.\n   Some operation elements are encoded twice, once as\
    \ the request-URI on\n   the HTTP Request-Line and a second time as a REQUIRED\
    \ operation\n   attribute in the application/ipp entity.  These attributes are\
    \ the\n   target URI for the operation and are called printer-uri and job-uri.\n\
    \   Note: The target URI is included twice in an operation referencing\n   the\
    \ same IPP object, but the two URIs NEED NOT be literally\n   identical. One can\
    \ be a relative URI and the other can be an absolute\n   URI.  HTTP/1.1 allows\
    \ clients to generate and send a relative URI\n   rather than an absolute URI.\
    \  A relative URI identifies a resource\n   with the scope of the HTTP server,\
    \ but does not include scheme, host\n   or port.  The following statements characterize\
    \ how URLs should be\n   used in the mapping of IPP onto HTTP/1.1:\n      1. Although\
    \ potentially redundant, a client MUST supply the target\n         of the operation\
    \ both as an operation attribute and as a URI at\n         the HTTP layer.  The\
    \ rationale for this decision is to maintain\n         a consistent set of rules\
    \ for mapping application/ipp to\n         possibly many communication layers,\
    \ even where URLs are not\n         used as the addressing mechanism in the transport\
    \ layer.\n      2. Even though these two URLs might not be literally identical\n\
    \         (one being relative and the other being absolute), they MUST\n     \
    \    both reference the same IPP object. However, a Printer NEED NOT\n       \
    \  verify that the two URLs reference the same IPP object, and\n         NEED\
    \ NOT take any action if it determines the two URLs to be\n         different.\n\
    \      3. The URI in the HTTP layer is either relative or absolute and is\n  \
    \       used by the HTTP server to route the HTTP request to the\n         correct\
    \ resource relative to that HTTP server.  The HTTP server\n         need not be\
    \ aware of the URI within the operation request.\n      4. Once the HTTP server\
    \ resource begins to process the HTTP\n         request, it might get the reference\
    \ to the appropriate IPP\n         Printer object from either the HTTP URI (using\
    \ to the context\n         of the HTTP server for relative URLs) or from the URI\
    \ within\n         the operation request; the choice is up to the implementation.\n\
    \      5. HTTP URIs can be relative or absolute, but the target URI in\n     \
    \    the operation MUST be an absolute URI.\n"
- title: 5. IPP URL Scheme
  contents:
  - "5. IPP URL Scheme\n   The IPP/1.1 document defines a new scheme 'ipp' as the\
    \ value of a URL\n   that identifies either an IPP printer object or an IPP job\
    \ object.\n   The IPP attributes using the 'ipp' scheme are specified below.\n\
    \   Because the HTTP layer does not support the 'ipp' scheme, a client\n   MUST\
    \ map 'ipp' URLs to 'http' URLs, and then follows the HTTP\n   [RFC2616][RFC2617]\
    \ rules for constructing a Request-Line and HTTP\n   headers.  The mapping is\
    \ simple because the 'ipp' scheme implies all\n   of the same protocol semantics\
    \ as that of the 'http' scheme\n   [RFC2616], except that it represents a print\
    \ service and the implicit\n   (default) port number that clients use to connect\
    \ to a server is port\n   631.\n   In the remainder of this section the term 'ipp-URL'\
    \ means a URL whose\n   scheme is 'ipp' and whose implicit (default) port is 631.\
    \ The term\n   'http-URL' means a URL whose scheme is 'http', and the term 'https-\n\
    \   URL' means a URL whose scheme is 'https',\n   A client and an IPP object (i.e.\
    \ the server) MUST support the ipp-URL\n   value in the following IPP attributes.\n\
    \       job attributes:\n           job-uri\n           job-printer-uri\n    \
    \   printer attributes:\n           printer-uri-supported\n       operation attributes:\n\
    \           job-uri\n           printer-uri\n   Each of the above attributes identifies\
    \ a printer or job object. The\n   ipp-URL is intended as the value of the attributes\
    \ in this list, and\n   for no other attributes. All of these attributes have\
    \ a syntax type\n   of 'uri', but there are attributes with a syntax type of 'uri'\
    \ that\n   do not use the 'ipp' scheme, e.g. 'job-more-info'.\n   If a printer\
    \ registers its URL with a directory service, the printer\n   MUST register an\
    \ ipp-URL.\n   User interfaces are beyond the scope of this document. But if\n\
    \   software exposes the ipp-URL values of any of the above five\n   attributes\
    \ to a human user, it is REQUIRED that the human see the\n   ipp-URL as is.\n\
    \   When a client sends a request, it MUST convert a target ipp-URL to a\n   target\
    \ http-URL for the HTTP layer according to the following rules:\n      1. change\
    \ the 'ipp' scheme to 'http'\n      2. add an explicit port 631 if the URL does\
    \ not contain an\n         explicit port. Note: port 631 is the IANA assigned\
    \ Well Known\n         Port for the 'ipp' scheme.\n   The client  MUST use the\
    \ target http-URL in both the HTTP Request-\n   Line and HTTP headers, as specified\
    \ by HTTP [RFC2616] [RFC2617] .\n   However, the client MUST use the target ipp-URL\
    \ for the value of the\n   \"printer-uri\" or \"job-uri\" operation attribute\
    \ within the\n   application/ipp body of the request. The server MUST use the\
    \ ipp-URL\n   for the value of the \"printer-uri\", \"job-uri\" or \"printer-uri-\n\
    \   supported\" attributes within the application/ipp body of the\n   response.\n\
    \   For example, when an IPP client sends a request directly (i.e. no\n   proxy)\
    \ to an ipp-URL \"ipp://myhost.com/myprinter/myqueue\", it opens a\n   TCP connection\
    \ to port 631 (the ipp implicit port) on the host\n   \"myhost.com\" and sends\
    \ the following data:\n    POST /myprinter/myqueue HTTP/1.1\n    Host: myhost.com:631\n\
    \    Content-type: application/ipp\n    Transfer-Encoding: chunked\n    ...\n\
    \    \"printer-uri\" \"ipp://myhost.com/myprinter/myqueue\"\n              (encoded\
    \ in application/ipp message body)\n    ...\n   As another example, when an IPP\
    \ client sends the same request as\n   above via a proxy \"myproxy.com\", it opens\
    \ a TCP connection to the\n   proxy port 8080 on the proxy host \"myproxy.com\"\
    \ and sends the\n   following data:\n    POST http://myhost.com:631/myprinter/myqueue\
    \   HTTP/1.1\n    Host: myhost.com:631\n    Content-type: application/ipp\n  \
    \  Transfer-Encoding: chunked\n    ...\n    \"printer-uri\" \"ipp://myhost.com/myprinter/myqueue\"\
    \n              (encoded in application/ipp message body)\n    ...\n   The proxy\
    \ then connects to the IPP origin server with headers that\n   are the same as\
    \ the \"no-proxy\" example above.\n"
- title: 6. IANA Considerations
  contents:
  - "6. IANA Considerations\n   This section describes the procedures for allocating\
    \ encoding for the\n   following IETF standards track extensions and vendor extensions\
    \ to\n   the IPP/1.1 Encoding and Transport document:\n      1. attribute syntaxes\
    \ - see [RFC2911] section 6.3\n      2. attribute groups - see [RFC2911] section\
    \ 6.5\n      3. out-of-band attribute values - see [RFC2911] section 6.7\n   These\
    \ extensions follow the \"type2\" registration procedures defined\n   in [RFC2911]\
    \ section 6.  Extensions registered for use with IPP/1.1\n   are OPTIONAL for\
    \ client and IPP object conformance to the IPP/1.1\n   Encoding and Transport\
    \ document.\n   These extension procedures are aligned with the guidelines as\
    \ set\n   forth by the IESG [IANA-CON].  The [RFC2911] Section 11 describes how\n\
    \   to propose new registrations for consideration.  IANA will reject\n   registration\
    \ proposals that leave out required information or do not\n   follow the appropriate\
    \ format described in [RFC2911] Section 11.  The\n   IPP/1.1 Encoding and Transport\
    \ document may also be extended by an\n   appropriate RFC that specifies any of\
    \ the above extensions.\n"
- title: 7. Internationalization Considerations
  contents:
  - "7. Internationalization Considerations\n   See the section on \"Internationalization\
    \ Considerations\" in the\n   document \"Internet Printing Protocol/1.1: Model\
    \ and Semantics\"\n   [RFC2911] for information on internationalization. This\
    \ document adds\n   no additional issues.\n"
- title: 8. Security Considerations
  contents:
  - "8. Security Considerations\n   The IPP Model and Semantics document [RFC2911]\
    \ discusses high level\n   security requirements (Client Authentication, Server\
    \ Authentication\n   and Operation Privacy). Client Authentication is the mechanism\
    \ by\n   which the client proves its identity to the server in a secure\n   manner.\
    \ Server Authentication is the mechanism by which the server\n   proves its identity\
    \ to the client in a secure manner. Operation\n   Privacy is defined as a mechanism\
    \ for protecting operations from\n   eavesdropping.\n"
- title: 8.1 Security Conformance Requirements
  contents:
  - "8.1 Security Conformance Requirements\n   This section defines the security requirements\
    \ for IPP clients and\n   IPP objects.\n"
- title: 8.1.1 Digest Authentication
  contents:
  - "8.1.1 Digest Authentication\n   IPP clients MUST support:\n      Digest Authentication\
    \ [RFC2617].\n         MD5 and MD5-sess MUST be implemented and supported.\n \
    \        The Message Integrity feature NEED NOT be used.\n   IPP Printers SHOULD\
    \ support:\n      Digest Authentication [RFC2617].\n         MD5 and MD5-sess\
    \ MUST be implemented and supported.\n         The Message Integrity feature NEED\
    \ NOT be used.\n   The reasons that IPP Printers SHOULD (rather than MUST) support\n\
    \   Digest Authentication are:\n   1. While Client Authentication is important,\
    \ there is a certain class\n      of printer devices where it does not make sense.\
    \  Specifically, a\n      low-end device with limited ROM space and low paper\
    \ throughput may\n      not need Client Authentication.  This class of device\
    \ typically\n      requires firmware designers to make trade-offs between protocols\n\
    \      and functionality to arrive at the lowest-cost solution possible.\n   \
    \   Factored into the designer's decisions is not just the size of the\n     \
    \ code, but also the testing, maintenance, usefulness, and time-to-\n      market\
    \ impact for each feature delivered to the customer.  Forcing\n      such low-end\
    \ devices to provide security in order to claim IPP/1.1\n      conformance would\
    \ not make business sense and could potentially\n      stall the adoption of the\
    \ standard.\n   2. Print devices that have high-volume throughput and have available\n\
    \      ROM space have a compelling argument to provide support for Client\n  \
    \    Authentication that safeguards the device from unauthorized\n      access.\
    \  These devices are prone to a high loss of consumables and\n      paper if unauthorized\
    \ access should occur.\n"
- title: 8.1.2 Transport Layer Security (TLS)
  contents:
  - "8.1.2 Transport Layer Security (TLS)\n   IPP Printers SHOULD support Transport\
    \ Layer Security (TLS) [RFC2246]\n   for Server Authentication and Operation Privacy.\
    \ IPP Printers MAY\n   also support TLS for Client Authentication.  If an IPP\
    \ Printer\n   supports TLS, it MUST support the TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA\n\
    \   cipher suite as mandated by RFC 2246 [RFC2246].  All other cipher\n   suites\
    \ are OPTIONAL.  An IPP Printer MAY support Basic Authentication\n   (described\
    \ in HTTP/1.1 [RFC2617])  for Client Authentication if the\n   channel is secure.\
    \ TLS with the above mandated cipher suite can\n   provide such a secure channel.\n\
    \   If a IPP client supports TLS, it MUST support the\n   TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA\
    \ cipher suite as mandated by RFC\n   2246 [RFC2246].  All other cipher suites\
    \ are OPTIONAL.\n   The IPP Model and Semantics document defines two printer attributes\n\
    \   (\"uri-authentication-supported\" and \"uri-security-supported\") that\n \
    \  the client can use to discover the security policy of a printer. That\n   document\
    \ also outlines IPP-specific security considerations and\n   should be the primary\
    \ reference for security implications with regard\n   to the IPP protocol itself.\
    \  For backward compatibility with IPP\n   version 1.0, IPP clients and printers\
    \ may also support SSL3 [ssl].\n   This is in addition to the security required\
    \ in this document.\n"
- title: 8.2 Using IPP with TLS
  contents:
  - "8.2 Using IPP with TLS\n   IPP/1.1 uses the \"Upgrading to TLS Within HTTP/1.1\"\
    \ mechanism\n   [RFC2817].  An initial IPP request never uses TLS.  The client\n\
    \   requests a secure TLS connection by using the HTTP \"Upgrade\" header,\n \
    \  while the server agrees in the HTTP response.  The switch to TLS\n   occurs\
    \ either because the server grants the client's request to\n   upgrade to TLS,\
    \ or a server asks to switch to TLS in its response.\n   Secure communication\
    \ begins with a server's response to switch to\n   TLS.\n"
- title: 9. Interoperability with IPP/1.0 Implementations
  contents:
  - "9. Interoperability with IPP/1.0 Implementations\n   It is beyond the scope of\
    \ this specification to mandate conformance\n   with previous versions.  IPP/1.1\
    \ was deliberately designed, however,\n   to make supporting previous versions\
    \ easy.  It is worth noting that,\n   at the time of composing this specification\
    \ (1999), we would expect\n   IPP/1.1 Printer implementations to:\n      understand\
    \ any valid request in the format of IPP/1.0, or 1.1;\n      respond appropriately\
    \ with a response containing the same\n      \"version-number\" parameter value\
    \ used by the client in the\n      request.\n   And we would expect IPP/1.1 clients\
    \ to:\n      understand any valid response in the format of IPP/1.0, or 1.1.\n"
- title: 9.1 The "version-number" Parameter
  contents:
  - "9.1 The \"version-number\" Parameter\n   The following are rules regarding the\
    \ \"version-number\" parameter (see\n   section 3.3):\n      1. Clients MUST send\
    \ requests containing a \"version-number\"\n         parameter with a '1.1' value\
    \ and SHOULD try supplying alternate\n         version numbers if they receive\
    \ a 'server-error-version-not-\n         supported' error return in a response.\n\
    \      2. IPP objects MUST accept requests containing a \"version-number\"\n \
    \        parameter with a '1.1' value (or reject the request for reasons\n   \
    \      other than 'server-error-version-not-supported').\n      3. It is recommended\
    \ that IPP objects accept any request with the\n         major version '1' (or\
    \ reject the request for reasons other than\n         'server-error-version-not-supported').\
    \  See [RFC2911]\n         \"versions\" sub-section.\n      4. In any case, security\
    \ MUST NOT be compromised when a client\n         supplies a lower \"version-number\"\
    \ parameter in a request.  For\n         example, if an IPP/1.1 conforming Printer\
    \ object accepts\n         version '1.0' requests and is configured to enforce\
    \ Digest\n         Authentication, it MUST do the same for a version '1.0'\n \
    \        request.\n"
- title: 9.2 Security and URL Schemes
  contents:
  - "9.2 Security and URL Schemes\n   The following are rules regarding security,\
    \ the \"version-number\"\n   parameter, and the URL scheme supplied in target\
    \ attributes and\n   responses:\n      1. When a client supplies a request, the\
    \ \"printer-uri\" or \"job-\n         uri\" target operation attribute MUST have\
    \ the same scheme as\n         that indicated in one of the values of the \"printer-uri-\n\
    \         supported\" Printer attribute.\n      2. When the server returns the\
    \ \"job-printer-uri\" or \"job-uri\" Job\n         Description attributes, it\
    \ SHOULD return the same scheme\n         ('ipp', 'https', 'http', etc.) that\
    \ the client supplied in the\n         \"printer-uri\" or \"job-uri\" target operation\
    \ attributes in the\n         Get-Job-Attributes or Get-Jobs request, rather than\
    \ the scheme\n         used when the job was created.  However, when a client\
    \ requests\n         job attributes using the Get-Job-Attributes or Get-Jobs\n\
    \         operations, the jobs and job attributes that the server returns\n  \
    \       depends on: (1) the security in effect when the job was\n         created,\
    \ (2) the security in effect in the query request, and\n         (3) the security\
    \ policy in force.\n      3. It is recommended that if a server registers a non-secure\
    \ ipp-\n         URL with a directory service (see [RFC2911] \"Generic Directory\n\
    \         Schema\" Appendix), then it also register an http-URL for\n        \
    \ interoperability with IPP/1.0 clients (see section 9).\n      4. In any case,\
    \ security MUST NOT be compromised when a client\n         supplies an 'http'\
    \ or other non-secure URL scheme in the target\n         \"printer-uri\" and \"\
    job-uri\" operation attributes in a request.\n"
- title: 10. References
  contents:
  - "10. References\n   [dpa]      ISO/IEC 10175 Document Printing Application (DPA),\
    \ June\n              1996.\n   [iana]     IANA Registry of Coded Character Sets:\n\
    \              ftp://ftp.isi.edu/in-notes/iana/assignments/character-\n      \
    \        sets.\n   [IANA-CON] Narten, T. and H. Alvestrand, \"Guidelines for Writing\
    \ an\n              IANA Considerations Section in RFCs\", BCP 26, RFC 2434,\n\
    \              October 1998.\n   [ipp-iig]  Hastings, Tom, et al., \"Internet\
    \ Printing Protocol/1.1:\n              Implementer's Guide\", Work in Progress.\n\
    \   [RFC822]   Crocker, D., \"Standard for the Format of ARPA Internet\n     \
    \         Text Messages\", STD 11, RFC 822, August 1982.\n   [RFC1123]  Braden,\
    \ S., \"Requirements for Internet Hosts - Application\n              and Support\"\
    , STD 3, RFC 1123, October, 1989.\n   [RFC1179]  McLaughlin, L. III, (editor),\
    \ \"Line Printer Daemon\n              Protocol\", RFC 1179, August 1990.\n  \
    \ [RFC2223]  Postel, J. and J. Reynolds, \"Instructions to RFC Authors\",\n  \
    \            RFC 2223, October 1997.\n   [RFC1738]  Berners-Lee, T., Masinter,\
    \ L. and M. McCahill, \"Uniform\n              Resource Locators (URL)\", RFC\
    \ 1738, December 1994.\n   [RFC1759]  Smith, R., Wright, F., Hastings, T., Zilles,\
    \ S. and J.\n              Gyllenskog, \"Printer MIB\", RFC 1759, March 1995.\n\
    \   [RFC1766]  Alvestrand, H., \"Tags for the Identification of\n            \
    \  Languages\", RFC 1766, March 1995.\n   [RFC1808]  Fielding, R., \"Relative\
    \ Uniform Resource Locators\", RFC\n              1808, June 1995.\n   [RFC1903]\
    \  Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n              \"Textual\
    \ Conventions for Version 2 of the Simple Network\n              Management Protocol\
    \ (SNMPv2)\", RFC 1903, January 1996.\n   [RFC2046]  Freed, N. and N. Borenstein,\
    \ \"Multipurpose Internet Mail\n              Extensions (MIME) Part Two: Media\
    \ Types\", RFC 2046,\n              November 1996.\n   [RFC2048]  Freed, N., Klensin,\
    \ J. and J. Postel, \"Multipurpose\n              Internet Mail Extension (MIME)\
    \ Part Four: Registration\n              Procedures\", BCP 13, RFC 2048, November\
    \ 1996.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2184]\
    \  Freed, N. and K. Moore, \"MIME Parameter Value and Encoded\n              Word\
    \ Extensions: Character Sets, Languages, and\n              Continuations\", RFC\
    \ 2184, August 1997.\n   [RFC2234]  Crocker, D. and P. Overall, \"Augmented BNF\
    \ for Syntax\n              Specifications: ABNF\", RFC 2234, November 1997.\n\
    \   [RFC2246]  Dierks, T. and C. Allen, \"The TLS Protocol\", RFC 2246.\n    \
    \          January 1999.\n   [RFC2396]  Berners-Lee, T., Fielding, R. and L. Masinter,\
    \ \"Uniform\n              Resource Identifiers (URI): Generic Syntax\", RFC 2396,\n\
    \              August 1998.\n   [RFC2565]  Herriot, R., Butler, S., Moore, P.\
    \ and R. Turner,\n              \"Internet Printing Protocol/1.0: Encoding and\
    \ Transport\",\n              RFC 2565, April 1999.\n   [RFC2566]  deBry, R.,\
    \ Hastings, T., Herriot, R., Isaacson, S. and P.\n              Powell, \"Internet\
    \ Printing Protocol/1.0: Model and\n              Semantics\", RFC 2566, April\
    \ 1999.\n   [RFC2567]  Wright, D., \"Design Goals for an Internet Printing\n \
    \             Protocol\", RFC2567, April 1999.\n   [RFC2568]  Zilles, S., \"Rationale\
    \ for the Structure and Model and\n              Protocol for the Internet Printing\
    \ Protocol\", RFC 2568,\n              April 1999.\n   [RFC2569]  Herriot, R.,\
    \ Hastings, T., Jacobs, N. and J. Martin,\n              \"Mapping between LPD\
    \ and IPP Protocols\", RFC 2569, April\n              1999.\n   [RFC2616]  Fielding,\
    \ R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter, L., Leach,\
    \ P. and T. Berners-Lee, \"Hypertext\n              Transfer Protocol - HTTP/1.1\"\
    , RFC 2616, June 1999.\n   [RFC2617]  Franks, J., Hallam-Baker, P., Hostetler,\
    \ J., Lawrence, S.,\n              Leach, P., Luotonen, A. and L. Stewart, \"\
    HTTP\n              Authentication: Basic and Digest Access Authentication\",\n\
    \              RFC 2617, June 1999.\n   [RFC2817]  Khare, R. and S. Lawrence,\
    \ \"Upgrading to TLS Within\n              HTTP/1.1\", RFC 2817, May 2000.\n \
    \  [RFC2910]  Herriot, R., Butler, S., Moore, P., Turner, R. and J.\n        \
    \      Wenn, \"Internet Printing Protocol/1.1: Encoding and\n              Transport\"\
    , RFC 2910, September 2000.\n   [RFC2911]  Hastings, T., Herriot, R., deBry, R.,\
    \ Isaacson, S. and P.\n              Powell, \"Internet Printing Protocol/1.1:\
    \ Model and\n              Semantics\", RFC 2911, September 2000.\n   [SSL]  \
    \    Netscape, The SSL Protocol, Version 3, (Text version\n              3.02),\
    \ November 1996.\n"
- title: 11. Authors' Addresses
  contents:
  - "11. Authors' Addresses\n   Robert Herriot, Editor\n   Xerox Corporation\n   3400\
    \ Hillview Ave., Bldg #1\n   Palo Alto, CA 94304\n   Phone: 650-813-7696\n   Fax:\
    \   650-813-6860\n   EMail: robert.herriot@pahv.xerox.com\n   Sylvan Butler\n\
    \   Hewlett-Packard\n   11311 Chinden Blvd.\n   Boise, ID 83714\n   Phone: 208-396-6000\n\
    \   Fax: 208-396-3457\n   EMail: sbutler@boi.hp.com\n   Paul Moore\n   Peerless\
    \ Systems Networking\n   10900 NE 8th St #900\n   Bellevue, WA 98004\n   Phone:\
    \ 425-462-5852\n   EMail: pmoore@peerless.com\n   Randy Turner\n   2Wire, Inc.\n\
    \   694 Tasman Dr.\n   Milpitas, CA 95035\n   Phone: 408-546-1273\n   John Wenn\n\
    \   Xerox Corporation\n   737 Hawaii St\n   El Segundo, CA  90245\n   Phone: 310-333-5764\n\
    \   Fax: 310-333-5514\n   EMail: jwenn@cp10.es.xerox.com\n   IPP Web Page: http://www.pwg.org/ipp/\n\
    \   IPP Mailing List: ipp@pwg.org\n   To subscribe to the ipp mailing list, send\
    \ the following email:\n      1) send it to majordomo@pwg.org\n      2) leave\
    \ the subject line blank\n      3) put the following two lines in the message\
    \ body:\n              subscribe ipp\n              end\n"
- title: '12. Other Participants:'
  contents:
  - "12. Other Participants:\n   Chuck Adams - Tektronix             Shivaun Albright\
    \ - HP\n   Stefan Andersson - Axis             Jeff Barnett - IBM\n   Ron Bergman\
    \ - Hitachi Koki Imaging  Dennis Carney - IBM\n   Systems\n   Keith Carter - IBM\
    \                  Angelo Caruso - Xerox\n   Rajesh Chawla - TR Computing    \
    \    Nancy Chen - Okidata\n   Solutions\n   Josh Cohen - Microsoft           \
    \   Jeff Copeland - QMS\n   Andy Davidson - Tektronix           Roger deBry -\
    \ IBM\n   Maulik Desai - Auco                 Mabry Dozier - QMS\n   Lee Farrell\
    \ - Canon Information     Satoshi Fujitami - Ricoh\n   Systems\n   Steve Gebert\
    \ - IBM                  Sue Gleeson - Digital\n   Charles Gordon - Osicom   \
    \          Brian Grimshaw - Apple\n   Jerry Hadsell - IBM                 Richard\
    \ Hart - Digital\n   Tom Hastings - Xerox                Henrik Holst - I-data\n\
    \   Stephen Holmstead                   Zhi-Hong Huang - Zenographics\n   Scott\
    \ Isaacson - Novell             Babek Jahromi - Microsoft\n   Swen Johnson - Xerox\
    \                David Kellerman - Northlake\n                               \
    \        Software\n   Robert Kline - TrueSpectra          Charles Kong - Panasonic\n\
    \   Carl Kugler - IBM                   Dave Kuntz - Hewlett-Packard\n   Takami\
    \ Kurono - Brother             Rick Landau - Digital\n   Scott Lawrence - Agranot\
    \ Systems    Greg LeClair - Epson\n   Dwight Lewis - Lexmark              Harry\
    \ Lewis - IBM\n   Tony Liao - Vivid Image             Roy Lomicka - Digital\n\
    \   Pete Loya - HP                      Ray Lutz - Cognisys\n   Mike MacKay -\
    \ Novell, Inc.          David Manchala - Xerox\n   Carl-Uno Manros - Xerox   \
    \          Jay Martin - Underscore\n   Stan McConnell - Xerox              Larry\
    \ Masinter - Xerox\n   Sandra Matts - Hewlett Packard      Peter Michalek - Shinesoft\n\
    \   Ira McDonald - High North Inc.      Mike Moldovan - G3 Nova\n   Tetsuya Morita\
    \ - Ricoh              Yuichi Niwa - Ricoh\n   Pat Nogay - IBM               \
    \      Ron Norton - Printronics\n   Hugo Parra, Novell                  Bob Pentecost\
    \ - Hewlett-Packard\n   Patrick Powell - Astart             Jeff Rackowitz - Intermec\n\
    \   Technologies\n   Eric Random - Peerless              Rob Rhoads - Intel\n\
    \   Xavier Riley - Xerox                Gary Roberts - Ricoh\n   David Roach -\
    \ Unisys                Stuart Rowley - Kyocera\n   Yuji Sasaki - Japan Computer\
    \        Richard Schneider - Epson\n   Industry\n   Kris Schoff - HP         \
    \           Katsuaki Sekiguchi - Canon\n                                     \
    \  Information Systems\n   Bob Setterbo - Adobe                Gail Songer - Peerless\n\
    \   Hideki Tanaka - Cannon Information  Devon Taylor - Novell, Inc.\n   Systems\n\
    \   Mike Timperman - Lexmark            Atsushi Uchino - Epson\n   Shigeru Ueda\
    \ - Canon                Bob Von Andel - Allegro Software\n   William Wagner -\
    \ NetSilicon/DPI     Jim Walker - DAZEL\n   Chris Wellens - Interworking Labs\
    \   Trevor Wells - Hewlett Packard\n   Craig Whittle - Sharp Labs          Rob\
    \ Whittle - Novell, Inc.\n   Jasper Wong - Xionics               Don Wright -\
    \ Lexmark\n   Michael Wu - Heidelberg Digital     Rick Yardumian - Xerox\n   Michael\
    \ Yeung - Canon Information   Lloyd Young - Lexmark\n   Systems\n   Atsushi Yuki\
    \ - Kyocera              Peter Zehler - Xerox\n   William Zhang - Canon Information\
    \   Frank Zhao - Panasonic\n   Systems\n   Steve Zilles - Adobe              \
    \  Rob Zirnstein - Canon Information\n                                       Systems\n"
- title: '13. Appendix A: Protocol Examples'
  contents:
  - '13. Appendix A: Protocol Examples

    '
- title: 13.1 Print-Job Request
  contents:
  - "13.1 Print-Job Request\n   The following is an example of a Print-Job request\
    \ with job-name,\n   copies, and sides specified. The \"ipp-attribute-fidelity\"\
    \ attribute\n   is set to 'true' so that the print request will fail if the \"\
    copies\"\n   or the \"sides\" attribute are not supported or their values are\
    \ not\n   supported.\n  Octets          Symbolic Value                Protocol\
    \ field\n  0x0101          1.1                           version-number\n  0x0002\
    \          Print-Job                     operation-id\n  0x00000001      1   \
    \                          request-id\n  0x01            start operation-attributes\
    \    operation-attributes-tag\n  0x47            charset type                \
    \  value-tag\n  0x0012                                        name-length\n  attributes-\
    \     attributes-charset            name\n  charset\n  0x0008                \
    \                        value-length\n  us-ascii        US-ASCII            \
    \          value\n  0x48            natural-language type         value-tag\n\
    \  0x001B                                        name-length\n  attributes-  \
    \                                 name\n  natural-        attributes-natural-language\n\
    \  language\n  0x0005                                        value-length\n  en-us\
    \           en-US                         value\n  0x45            uri type  \
    \                    value-tag\n  0x000B                                     \
    \   name-length\n  printer-uri     printer-uri                   name\n  0x0015\
    \                                        value-length\n  ipp://forest/   printer\
    \ pinetree              value\n    pinetree\n  0x42            nameWithoutLanguage\
    \ type      value-tag\n  0x0008                                        name-length\n\
    \  job-name        job-name                      name\n  0x0006              \
    \                          value-length\n  foobar          foobar            \
    \            value\n  0x22            boolean type                  value-tag\n\
    \  0x0016                                        name-length\n  ipp-attribute-\
    \  ipp-attribute-fidelity        name\n  fidelity\n  0x0001                  \
    \                      value-length\n  0x01            true                  \
    \        value\n  Octets          Symbolic Value                Protocol field\n\
    \  0x02            start job-attributes          job-attributes-tag\n  0x21  \
    \          integer type                  value-tag\n  0x0006                 \
    \                       name-length\n  copies          copies                \
    \        name\n  0x0004                                        value-length\n\
    \  0x00000014      20                            value\n  0x44            keyword\
    \ type                  value-tag\n  0x0005                                  \
    \      name-length\n  sides           sides                         name\n  0x0013\
    \                                        value-length\n  two-sided-      two-sided-long-edge\
    \           value\n  long-edge\n  0x03            end-of-attributes          \
    \   end-of-attributes-tag\n  %!PS...         <PostScript>                  data\n"
- title: 13.2 Print-Job Response (successful)
  contents:
  - "13.2 Print-Job Response (successful)\n   Here is an example of a successful Print-Job\
    \ response to the previous\n   Print-Job request.  The printer supported the \"\
    copies\" and \"sides\"\n   attributes and their supplied values.  The status code\
    \ returned is\n   'successful-ok'.\n  Octets            Symbolic Value       \
    \       Protocol field\n  0x0101            1.1                         version-number\n\
    \  0x0000            successful-ok               status-code\n  0x00000001   \
    \     1                           request-id\n  0x01              start operation-attributes\
    \  operation-attributes-tag\n  0x47              charset type                value-tag\n\
    \  0x0012                                        name-length\n  attributes-  \
    \     attributes-charset          name\n  charset\n  0x0008                  \
    \                      value-length\n  us-ascii          US-ASCII            \
    \        value\n  0x48              natural-language type       value-tag\n  0x001B\
    \                                        name-length\n  attributes-       attributes-natural-\
    \         name\n  natural-language  language\n  0x0005                       \
    \                 value-length\n  en-us             en-US                    \
    \   value\n  0x41              textWithoutLanguage type    value-tag\n  0x000E\
    \                                        name-length\n  status-message    status-message\
    \              name\n  0x000D                                        value-length\n\
    \  Octets            Symbolic Value              Protocol field\n  successful-ok\
    \     successful-ok               value\n  0x02              start job-attributes\
    \        job-attributes-tag\n  0x21              integer                     value-tag\n\
    \  0x0006                                        name-length\n  job-id       \
    \     job-id                      name\n  0x0004                             \
    \           value-length\n  147               147                         value\n\
    \  0x45              uri type                    value-tag\n  0x0007         \
    \                               name-length\n  job-uri           job-uri     \
    \                name\n  0x0019                                        value-length\n\
    \  ipp://forest/     job 123 on pinetree         value\n    pinetree/123\n  0x23\
    \              enum type                   value-tag\n  0x0009               \
    \                         name-length\n  job-state         job-state         \
    \          name\n  0x0004                                        value-length\n\
    \  0x0003            pending                     value\n  0x03              end-of-attributes\
    \           end-of-attributes-tag\n"
- title: 13.3 Print-Job Response (failure)
  contents:
  - "13.3 Print-Job Response (failure)\n   Here is an example of an unsuccessful Print-Job\
    \ response to the\n   previous Print-Job request. It fails because, in this case,\
    \ the\n   printer does not support the \"sides\" attribute and because the value\n\
    \   '20' for the \"copies\" attribute is not supported. Therefore, no job\n  \
    \ is created, and neither a \"job-id\" nor a \"job-uri\" operation\n   attribute\
    \ is returned. The error code returned is 'client-error-\n   attributes-or-values-not-supported'\
    \ (0x040B).\n  0x0101        1.1                           version-number\n  0x040B\
    \        client-error-attributes-or-   status-code\n                values-not-supported\n\
    \  0x00000001    1                             request-id\n  0x01          start\
    \ operation-attributes    operation-attributes tag\n  0x47          charset type\
    \                  value-tag\n  0x0012                                      name-length\n\
    \  attributes-   attributes-charset            name\n  charset\n  0x0008     \
    \                                 value-length\n  us-ascii      US-ASCII     \
    \                 value\n  Octets        Symbolic Value                Protocol\
    \ field\n  0x48          natural-language type         value-tag\n  0x001B   \
    \                                   name-length\n  attributes-   attributes-natural-language\
    \   name\n  natural-\n  language\n  0x0005                                   \
    \   value-length\n  en-us         en-US                         value\n  0x41\
    \          textWithoutLanguage type      value-tag\n  0x000E                 \
    \                     name-length\n  status-       status-message            \
    \    name\n  message\n  0x002F                                      value-length\n\
    \  client-error-                               value\n  attributes-   values-not-supported\n\
    \  or-values-    client-error-attributes-or-\n  not-supported\n  0x05        \
    \  start unsupported-attributes  unsupported-attributes tag\n  0x21          integer\
    \ type                  value-tag\n  0x0006                                  \
    \    name-length\n  copies        copies                        name\n  0x0004\
    \                                      value-length\n  0x00000014    20      \
    \                      value\n  0x10          unsupported  (type)           value-tag\n\
    \  0x0005                                      name-length\n  sides         sides\
    \                         name\n  0x0000                                     \
    \ value-length\n  0x03          end-of-attributes             end-of-attributes-tag\n"
- title: 13.4 Print-Job Response (success with attributes ignored)
  contents:
  - "13.4 Print-Job Response (success with attributes ignored)\n   Here is an example\
    \ of a successful Print-Job response to a Print-Job\n   request like the previous\
    \ Print-Job request, except that the value of\n   'ipp-attribute-fidelity' is\
    \ false. The print request succeeds, even\n   though, in this case, the printer\
    \ supports neither the \"sides\"\n   attribute nor the value '20' for the \"copies\"\
    \ attribute. Therefore, a\n   job is created, and both a \"job-id\" and a \"job-uri\"\
    \ operation\n   attribute are returned. The unsupported attributes are also returned\n\
    \   in an Unsupported Attributes Group. The error code returned is\n   'successful-ok-ignored-or-substituted-attributes'\
    \ (0x0001).\n  Octets            Symbolic Value              Protocol field\n\
    \  0x0101            1.1                         version-number\n  0x0001    \
    \        successful-ok-ignored-or-   status-code\n  Octets            Symbolic\
    \ Value              Protocol field\n                    substituted-attributes\n\
    \  0x00000001        1                           request-id\n  0x01          \
    \    start operation-attributes  operation-attributes-tag\n  0x47            \
    \  charset type                value-tag\n  0x0012                           \
    \             name-length\n  attributes-       attributes-charset          name\n\
    \  charset\n  0x0008                                        value-length\n  us-ascii\
    \          US-ASCII                    value\n  0x48              natural-language\
    \ type       value-tag\n  0x001B                                        name-length\n\
    \  attributes-       attributes-natural-         name\n  natural-language  language\n\
    \  0x0005                                        value-length\n  en-us       \
    \      en-US                       value\n  0x41              textWithoutLanguage\
    \ type    value-tag\n  0x000E                                        name-length\n\
    \  status-message    status-message              name\n  0x002F              \
    \                          value-length\n  successful-ok-    successful-ok-ignored-or-\
    \   value\n  ignored-or-       substituted-attributes\n  substituted-\n  attributes\n\
    \  0x05              start unsupported-          unsupported-attributes\n    \
    \                attributes                  tag\n  0x21              integer\
    \ type                value-tag\n  0x0006                                    \
    \    name-length\n  copies            copies                      name\n  0x0004\
    \                                        value-length\n  0x00000014        20\
    \                          value\n  0x10              unsupported  (type)    \
    \     value-tag\n  0x0005                                        name-length\n\
    \  sides             sides                       name\n  0x0000              \
    \                          value-length\n  0x02              start job-attributes\
    \        job-attributes-tag\n  0x21              integer                     value-tag\n\
    \  0x0006                                        name-length\n  job-id       \
    \     job-id                      name\n  0x0004                             \
    \           value-length\n  147               147                         value\n\
    \  0x45              uri type                    value-tag\n  0x0007         \
    \                               name-length\n  job-uri           job-uri     \
    \                name\n  0x0019                                        value-length\n\
    \  ipp://forest/     job 123 on pinetree         value\n    pinetree/123\n  Octets\
    \           Symbolic Value               Protocol field\n  0x23              enum\
    \  type                  value-tag\n  0x0009                                 \
    \       name-length\n  job-state         job-state                   name\n  0x0004\
    \                                        value-length\n  0x0003            pending\
    \                     value\n  0x03              end-of-attributes           end-of-attributes-tag\n"
- title: 13.5 Print-URI Request
  contents:
  - "13.5 Print-URI Request\n   The following is an example of Print-URI request with\
    \ copies and\n   job-name parameters:\n  Octets         Symbolic Value       \
    \        Protocol field\n  0x0101         1.1                          version-number\n\
    \  0x0003         Print-URI                    operation-id\n  0x00000001    \
    \ 1                            request-id\n  0x01           start operation-attributes\
    \   operation-attributes-tag\n  0x47           charset type                 value-tag\n\
    \  0x0012                                      name-length\n  attributes-    attributes-charset\
    \           name\n  charset\n  0x0008                                      value-length\n\
    \  us-ascii       US-ASCII                     value\n  0x48           natural-language\
    \ type        value-tag\n  0x001B                                      name-length\n\
    \  attributes-    attributes-natural-language  name\n  natural-\n  language\n\
    \  0x0005                                      value-length\n  en-us         \
    \ en-US                        value\n  0x45           uri type              \
    \       value-tag\n  0x000B                                      name-length\n\
    \  printer-uri    printer-uri                  name\n  0x0015                \
    \                      value-length\n  ipp://forest/  printer pinetree       \
    \      value\n    pinetree\n  0x45           uri type                     value-tag\n\
    \  0x000C                                      name-length\n  document-uri   document-uri\
    \                 name\n  0x0011                                      value-length\n\
    \  ftp://foo.com  ftp://foo.com/foo            value\n  Octets         Symbolic\
    \ Value               Protocol field\n  /foo\n  0x42           nameWithoutLanguage\
    \ type     value-tag\n  0x0008                                      name-length\n\
    \  job-name       job-name                     name\n  0x0006                \
    \                      value-length\n  foobar         foobar                 \
    \      value\n  0x02           start job-attributes         job-attributes-tag\n\
    \  0x21           integer type                 value-tag\n  0x0006           \
    \                           name-length\n  copies         copies             \
    \          name\n  0x0004                                      value-length\n\
    \  0x00000001     1                            value\n  0x03           end-of-attributes\
    \            end-of-attributes-tag\n"
- title: 13.6 Create-Job Request
  contents:
  - "13.6 Create-Job Request\n   The following is an example of Create-Job request\
    \ with no parameters\n   and no attributes:\n  Octets         Symbolic Value \
    \              Protocol field\n  0x0101         1.1                          version-number\n\
    \  0x0005         Create-Job                   operation-id\n  0x00000001    \
    \ 1                            request-id\n  0x01           start operation-attributes\
    \   operation-attributes-tag\n  0x47           charset type                 value-tag\n\
    \  0x0012                                      name-length\n  attributes-    attributes-charset\
    \           name\n  charset\n  0x0008                                      value-length\n\
    \  us-ascii       US-ASCII                     value\n  0x48           natural-language\
    \ type        value-tag\n  0x001B                                      name-length\n\
    \  attributes-    attributes-natural-language  name\n  natural-\n  language\n\
    \  0x0005                                      value-length\n  en-us         \
    \ en-US                        value\n  0x45           uri type              \
    \       value-tag\n  0x000B                                      name-length\n\
    \  printer-uri    printer-uri                  name\n  0x0015                \
    \                      value-length\n  ipp://forest/  printer pinetree       \
    \      value\n    pinetree\n  Octets         Symbolic Value               Protocol\
    \ field\n  inetree\n  0x03           end-of-attributes            end-of-attributes-tag\n"
- title: 13.7 Get-Jobs Request
  contents:
  - "13.7 Get-Jobs Request\n   The following is an example of Get-Jobs request with\
    \ parameters but\n   no attributes:\n  Octets           Symbolic Value       \
    \        Protocol field\n  0x0101           1.1                          version-number\n\
    \  0x000A           Get-Jobs                     operation-id\n  0x00000123  \
    \     0x123                        request-id\n  0x01             start operation-attributes\
    \   operation-attributes-tag\n  0x47             charset type                \
    \ value-tag\n  0x0012                                        name-length\n  attributes-\
    \      attributes-charset           name\n  charset\n  0x0008                \
    \                        value-length\n  us-ascii         US-ASCII           \
    \          value\n  0x48             natural-language type        value-tag\n\
    \  0x001B                                        name-length\n  attributes-  \
    \    attributes-natural-language  name\n  natural-\n  language\n  0x0005     \
    \                                   value-length\n  en-us            en-US   \
    \                     value\n  0x45             uri type                     value-tag\n\
    \  0x000B                                        name-length\n  printer-uri  \
    \    printer-uri                  name\n  0x0015                             \
    \           value-length\n  ipp://forest/    printer pinetree             value\n\
    \  pinetree\n  0x21             integer type                 value-tag\n  0x0005\
    \                                        name-length\n  limit            limit\
    \                        name\n  0x0004                                      \
    \  value-length\n  0x00000032       50                           value\n  0x44\
    \             keyword type                 value-tag\n  0x0014               \
    \                         name-length\n  requested-       requested-attributes\
    \         name\n  attributes\n  0x0006                                       \
    \ value-length\n  Octets           Symbolic Value               Protocol field\n\
    \  job-id           job-id                       value\n  0x44             keyword\
    \ type                 value-tag\n  0x0000           additional value        \
    \     name-length\n  0x0008                                        value-length\n\
    \  job-name         job-name                     value\n  0x44             keyword\
    \ type                 value-tag\n  0x0000           additional value        \
    \     name-length\n  0x000F                                        value-length\n\
    \  document-format  document-format              value\n  0x03             end-of-attributes\
    \            end-of-attributes-tag\n"
- title: 13.8 Get-Jobs Response
  contents:
  - "13.8 Get-Jobs Response\n   The following is an of Get-Jobs response from previous\
    \ request with 3\n   jobs. The Printer returns no information about the second\
    \ job\n   (because of security reasons):\n  Octets           Symbolic Value  \
    \              Protocol field\n  0x0101           1.1                        \
    \   version-number\n  0x0000           successful-ok                 status-code\n\
    \  0x00000123       0x123                         request-id (echoed\n       \
    \                                          back)\n  0x01             start operation-attributes\
    \    operation-attributes-tag\n  0x47             charset type               \
    \   value-tag\n  0x0012                                         name-length\n\
    \  attributes-      attributes-charset            name\n  charset\n  0x000A  \
    \                                       value-length\n  ISO-8859-1       ISO-8859-1\
    \                    value\n  0x48             natural-language type         value-tag\n\
    \  0x001B                                         name-length\n  attributes- \
    \     attributes-natural-language   name\n  natural-\n  language\n  0x0005   \
    \                                      value-length\n  en-us            en-US\
    \                         value\n  0x41             textWithoutLanguage type \
    \     value-tag\n  0x000E                                         name-length\n\
    \  status-message   status-message                name\n  0x000D             \
    \                            value-length\n  successful-ok    successful-ok  \
    \               value\n  0x02             start job-attributes (1st     job-attributes-tag\n\
    \  Octets           Symbolic Value                Protocol field\n           \
    \        object)\n  0x21             integer type                  value-tag\n\
    \  0x0006                                         name-length\n  job-id      \
    \     job-id                        name\n  0x0004                           \
    \              value-length\n  147              147                          \
    \ value\n  0x36             nameWithLanguage              value-tag\n  0x0008\
    \                                         name-length\n  job-name         job-name\
    \                      name\n  0x000C                                        \
    \ value-length\n  0x0005                                         sub-value-length\n\
    \  fr-ca            fr-CA                         value\n  0x0003            \
    \                             sub-value-length\n  fou              fou       \
    \                    name\n  0x02             start job-attributes (2nd     job-attributes-tag\n\
    \                   object)\n  0x02             start job-attributes (3rd    \
    \ job-attributes-tag\n                   object)\n  0x21             integer type\
    \                  value-tag\n  0x0006                                       \
    \  name-length\n  job-id           job-id                        name\n  0x0004\
    \                                         value-length\n  148              149\
    \                           value\n  0x36             nameWithLanguage       \
    \       value-tag\n  0x0008                                         name-length\n\
    \  job-name         job-name                      name\n  0x0012             \
    \                            value-length\n  0x0005                          \
    \               sub-value-length\n  de-CH            de-CH                   \
    \      value\n  0x0009                                         sub-value-length\n\
    \  isch guet        isch guet                     name\n  0x03             end-of-attributes\
    \             end-of-attributes-tag\n"
- title: '14. Appendix B: Registration of MIME Media Type Information for'
  contents:
  - "14. Appendix B: Registration of MIME Media Type Information for\n   \"application/ipp\"\
    \n   This appendix contains the information that IANA requires for\n   registering\
    \ a MIME media type.  The information following this\n   paragraph will be forwarded\
    \ to IANA to register application/ipp whose\n   contents are defined in Section\
    \ 3 \"Encoding of  the Operation Layer\"\n   in this document:\n   MIME type name:\
    \ application\n   MIME subtype name: ipp\n   A Content-Type of \"application/ipp\"\
    \ indicates an Internet Printing\n   Protocol message body (request or response).\
    \ Currently there is one\n   version: IPP/1.1, whose syntax is described in Section\
    \ 3 \"Encoding of\n   the Operation Layer\" of [RFC2910], and whose semantics\
    \ are described\n   in [RFC2911].\n   Required parameters:  none\n   Optional\
    \ parameters:  none\n   Encoding considerations:\n   IPP/1.1 protocol requests/responses\
    \ MAY contain long lines and ALWAYS\n   contain binary data (for example attribute\
    \ value lengths).\n   Security considerations:\n   IPP/1.1 protocol requests/responses\
    \ do not introduce any security\n   risks not already inherent in the underlying\
    \ transport protocols.\n   Protocol mixed-version interworking rules in [RFC2911]\
    \ as well as\n   protocol encoding rules in [RFC2910] are complete and unambiguous.\n\
    \   Interoperability considerations:\n   IPP/1.1 requests (generated by clients)\
    \ and responses (generated by\n   servers) MUST comply with all conformance requirements\
    \ imposed by the\n   normative specifications [RFC2911] and [RFC2910]. Protocol\
    \ encoding\n   rules specified in [RFC2910] are comprehensive, so that\n   interoperability\
    \ between conforming implementations is guaranteed\n   (although support for specific\
    \ optional features is not ensured).\n   Both the \"charset\" and \"natural-language\"\
    \ of all IPP/1.1 attribute\n   values which are a LOCALIZED-STRING  are explicit\
    \ within IPP protocol\n   requests/responses (without recourse to any external\
    \ information in\n   HTTP, SMTP, or other message transport headers).\n   Published\
    \ specifications:\n   [RFC2911] Hastings, T., Herriot, R., deBry, R., Isaacson,\
    \ S.  and P.\n             Powell, \"Internet Printing Protocol/1.1: Model and\n\
    \             Semantics\", RFC 2911, September 2000.\n   [RFC2910] Herriot, R.,\
    \ Butler, S., Moore, P., Turner, R.  and J.\n             Wenn, \"Internet Printing\
    \ Protocol/1.1: Encoding and\n             Transport\", RFC 2910, September 2000.\n\
    \   Applications which use this media type:\n   Internet Printing Protocol (IPP)\
    \ print clients and print servers,\n   communicating using HTTP/1.1 (see [RFC2910]),\
    \ SMTP/ESMTP, FTP, or\n   other transport protocol. Messages of type \"application/ipp\"\
    \ are\n   self-contained and transport-independent, including \"charset\" and\n\
    \   \"natural-language\" context for any LOCALIZED-STRING value.\n   Person &\
    \ email address to contact for further information:\n   Tom Hastings\n   Xerox\
    \ Corporation\n   737 Hawaii St. ESAE-231\n   El Segundo, CA\n   Phone: 310-333-6413\n\
    \   Fax: 310-333-5514\n   EMail: hastings@cp10.es.xerox.com\n   or\n   Robert\
    \ Herriot\n   Xerox Corporation\n   3400 Hillview Ave., Bldg #1\n   Palo Alto,\
    \ CA 94304\n   Phone: 650-813-7696\n   Fax: 650-813-6860\n   EMail: robert.herriot@pahv.xerox.com\n\
    \   Intended usage:\n   COMMON\n"
- title: '15. Appendix C: Changes from IPP/1.0'
  contents:
  - "15. Appendix C: Changes from IPP/1.0\n   IPP/1.1 is identical to IPP/1.0 [RFC2565]\
    \ with the follow changes:\n   1. Attributes values that identify a printer or\
    \ job object use a new\n      'ipp' scheme.  The 'http' and 'https' schemes are\
    \ supported only\n      for backward compatibility.  See section 5.\n   2. Clients\
    \ MUST support of Digest Authentication, IPP Printers SHOULD\n      support Digest\
    \ Authentication.  See Section 8.1.1\n   3. TLS is recommended for channel security.\
    \  In addition, SSL3 may be\n      supported for backward compatibility.  See\
    \ Section 8.1.2\n   4. It is recommended that IPP/1.1 objects accept any request\
    \ with\n      major version number '1'.  See section 9.1.\n   5. IPP objects SHOULD\
    \ return the URL scheme requested for \"job-\n      printer-uri\" and \"job-uri\"\
    \ Job Attributes, rather than the URL\n      scheme used to create the job.  \
    \ See section 9.2.\n   6. The IANA and Internationalization sections have been\
    \ added.  The\n      terms \"private use\" and \"experimental\" have been changed\
    \ to\n      \"vendor extension\".  The reserved allocations for attribute group\n\
    \      tags, attribute syntax tags, and out-of-band attribute values have\n  \
    \    been clarified as to which are reserved to future IETF standards\n      track\
    \ documents and which are reserved to vendor extension.   Both\n      kinds of\
    \ extensions use the type2 registration procedures as\n      defined in [RFC2911].\n\
    \   7. Clarified that future \"out-of-band\" value definitions may use the\n \
    \     value field if additional information is needed.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
