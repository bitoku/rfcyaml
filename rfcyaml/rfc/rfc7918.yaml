- title: __initial_text__
  contents:
  - '               Transport Layer Security (TLS) False Start

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies an optional behavior of Transport Layer\n\
    \   Security (TLS) client implementations, dubbed \"False Start\".  It\n   affects\
    \ only protocol timing, not on-the-wire protocol data, and can\n   be implemented\
    \ unilaterally.  A TLS False Start reduces handshake\n   latency to one round\
    \ trip.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7918.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Requirements Notation . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  False Start Compatibility . . . . . . . . . . . . . . .\
    \ . . .   4\n   4.  Client-Side False Start . . . . . . . . . . . . . . . . .\
    \ . .   4\n   5.  Security Considerations . . . . . . . . . . . . . . . . . .\
    \ .   5\n     5.1.  Symmetric Cipher  . . . . . . . . . . . . . . . . . . . .\
    \   6\n     5.2.  Protocol Version  . . . . . . . . . . . . . . . . . . . .  \
    \ 7\n     5.3.  Key Exchange and Client Certificate Type  . . . . . . . .   7\n\
    \   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   8\n  \
    \   6.1.  Normative References  . . . . . . . . . . . . . . . . . .   8\n    \
    \ 6.2.  Informative References  . . . . . . . . . . . . . . . . .   9\n   Appendix\
    \ A.  Implementation Notes . . . . . . . . . . . . . . . .  10\n   Acknowledgments\
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  11\n   Authors' Addresses\
    \  . . . . . . . . . . . . . . . . . . . . . . .  11\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A full handshake in TLS protocol versions up to TLS 1.2\
    \ [RFC5246]\n   requires two full protocol rounds (four flights) before the handshake\n\
    \   is complete and the protocol parties may begin to send application\n   data.\
    \  Thus, using TLS can add a latency penalty of two network\n   round-trip times\
    \ for application protocols in which the client sends\n   data first, such as\
    \ HTTP [RFC7230].  Figure 1 (copied from [RFC5246])\n   shows the message flow\
    \ for a full handshake.\n      Client                                        \
    \       Server\n      ClientHello                  -------->\n               \
    \                                       ServerHello\n                        \
    \                             Certificate*\n                                 \
    \              ServerKeyExchange*\n                                          \
    \    CertificateRequest*\n                                   <--------      ServerHelloDone\n\
    \      Certificate*\n      ClientKeyExchange\n      CertificateVerify*\n     \
    \ [ChangeCipherSpec]\n      Finished                     -------->\n         \
    \                                      [ChangeCipherSpec]\n                  \
    \                 <--------             Finished\n      Application Data     \
    \        <------->     Application Data\n                Figure 1: Message Flow\
    \ for a Full Handshake\n   This document describes a technique that alleviates\
    \ the latency\n   burden imposed by TLS: the client-side TLS False Start.  If\
    \ certain\n   conditions are met, the client can start to send application data\n\
    \   when the full handshake is only partially complete, namely, when the\n   client\
    \ has sent its own ChangeCipherSpec and Finished messages (thus\n   having updated\
    \ its TLS Record Protocol write state as negotiated in\n   the handshake) but\
    \ has yet to receive the server's ChangeCipherSpec\n   and Finished messages.\
    \  (Per Section 7.4.9 of [RFC5246], after a full\n   handshake, the client would\
    \ have to delay sending application data\n   until it has received and validated\
    \ the server's Finished message.)\n   Accordingly, the latency penalty for using\
    \ TLS with HTTP can be kept\n   at one round-trip time.\n   Note that in practice,\
    \ the TCP three-way handshake [RFC0793]\n   typically adds one round-trip time\
    \ before the client can even send\n   the ClientHello.  See [RFC7413] for a latency\
    \ improvement at that\n   level.\n   When an earlier TLS session is resumed, TLS\
    \ uses an abbreviated\n   handshake with only three protocol flights.  For application\n\
    \   protocols in which the client sends data first, this abbreviated\n   handshake\
    \ adds just one round-trip time to begin with, so there is no\n   need for a client-side\
    \ False Start.  However, if the server sends\n   application data first, the abbreviated\
    \ handshake adds two round-trip\n   times, and this could be reduced to just one\
    \ added round-trip time by\n   doing a server-side False Start.  There is little\
    \ need for this in\n   practice, so this document does not consider server-side\
    \ False Starts\n   further.\n   Note also that TLS versions 1.3 [TLS13] and beyond\
    \ are out of scope\n   for this document.  False Start will not be needed with\
    \ these newer\n   versions since protocol flows minimizing the number of round\
    \ trips\n   have become a first-order design goal.\n   In a False Start, when\
    \ the client sends application data before it\n   has received and verified the\
    \ server's Finished message, there are\n   two possible outcomes:\n   o  The handshake\
    \ completes successfully: The handshake is\n      retroactively validated when\
    \ both Finished messages have been\n      received and verified.  This retroactively\
    \ validates the\n      handshake.  In this case, the transcript of protocol data\
    \ carried\n      over the transport underlying TLS will look as usual, apart from\n\
    \      the different timing.\n   o  The handshake fails: If a party does not receive\
    \ the other side's\n      Finished message or if the Finished message's contents\
    \ are not\n      correct, the handshake never gets validated.  This means that\
    \ an\n      attacker may have removed, changed, or injected handshake\n      messages.\
    \  In this case, data has been sent over the underlying\n      transport that\
    \ would not have been sent without the False Start.\n   The latter scenario makes\
    \ it necessary to restrict when a False Start\n   is allowed, as described in\
    \ this document.  Section 3 considers basic\n   requirements for using False Start.\
    \  Section 4 specifies the behavior\n   for clients, referring to important security\
    \ considerations in\n   Section 5.\n"
- title: 2.  Requirements Notation
  contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",\"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 3.  False Start Compatibility
  contents:
  - "3.  False Start Compatibility\n   TLS False Start as described in detail in the\
    \ subsequent sections, if\n   implemented, is an optional feature.\n   A TLS server\
    \ implementation is defined to be \"False Start compatible\"\n   if it tolerates\
    \ receiving TLS records on the transport connection\n   early, before the protocol\
    \ has reached the state to process them.\n   For successful use of client-side\
    \ False Start in a TLS connection,\n   the server has to be False Start compatible.\
    \  Out-of-band knowledge\n   that the server is False Start compatible may be\
    \ available, e.g., if\n   this is mandated by specific application profile standards.\
    \  As\n   discussed in Appendix A, the requirement for False Start\n   compatibility\
    \ generally does not pose a hindrance in practice.\n"
- title: 4.  Client-Side False Start
  contents:
  - "4.  Client-Side False Start\n   This section specifies a change to the behavior\
    \ of TLS client\n   implementations in full TLS handshakes.\n   When the client\
    \ has sent its ChangeCipherSpec and Finished messages,\n   its default behavior\
    \ per [RFC5246] is to not send application data\n   until it has received the\
    \ server's ChangeCipherSpec and Finished\n   messages, which completes the handshake.\
    \  With the False Start\n   protocol modification, the client MAY send application\
    \ data earlier\n   (under the new Cipher Spec) if each of the following conditions\
    \ is\n   satisfied:\n   o  The application layer has requested the TLS False Start\
    \ option.\n   o  The symmetric cipher defined by the cipher suite negotiated in\n\
    \      this handshake has been whitelisted for use with False Start\n      according\
    \ to the Security Considerations in Section 5.1.\n   o  The protocol version chosen\
    \ by ServerHello.server_version has been\n      whitelisted for use with False\
    \ Start according to the Security\n      Considerations in Section 5.2.\n   o\
    \  The key exchange method defined by the cipher suite negotiated in\n      this\
    \ handshake and, if applicable, its parameters have been\n      whitelisted for\
    \ use with False Start according to the Security\n      Considerations in Section\
    \ 5.3.\n   o  In the case of a handshake with client authentication, the client\n\
    \      certificate type has been whitelisted for use with False Start\n      according\
    \ to the Security Considerations in Section 5.3.\n   The rules for receiving data\
    \ from the server remain unchanged.\n   Note that the TLS client cannot infer\
    \ the presence of an\n   authenticated server until all handshake messages have\
    \ been received.\n   With False Start, unlike with the default handshake behavior,\n\
    \   applications are able to send data before this point has been\n   reached:\
    \ from an application point of view, being able to send data\n   does not imply\
    \ that an authenticated peer is present.  Accordingly,\n   it is recommended that\
    \ TLS implementations allow the application\n   layer to query whether the handshake\
    \ has completed.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   In a TLS handshake, the Finished messages serve\
    \ to validate the\n   entire handshake.  These messages are based on a hash of\
    \ the\n   handshake so far processed by a Pseudorandom Function (PRF) keyed\n\
    \   with the new master secret (serving as a Message Authentication Code\n   (MAC))\
    \ and are also sent under the new Cipher Spec with its keyed\n   MAC, where the\
    \ MAC key again is derived from the master secret.  The\n   protocol design relies\
    \ on the assumption that any server and/or\n   client authentication done during\
    \ the handshake carries over to this.\n   While an attacker could, for example,\
    \ have changed the cipher suite\n   list sent by the client to the server and\
    \ thus influenced cipher\n   suite selection (presumably towards a less secure\
    \ choice) or could\n   have made other modifications to handshake messages in\
    \ transmission,\n   the attacker would not be able to round off the modified handshake\n\
    \   with a valid Finished message: every TLS cipher suite is presumed to\n   key\
    \ the PRF appropriately to ensure unforgeability.  Verifying the\n   Finished\
    \ messages validates the handshake and confirms that the\n   handshake has not\
    \ been tampered with; thus, secure encryption is\n   bootstrapped from secure\
    \ authentication.\n   Using False Start interferes with this approach of bootstrapping\n\
    \   secure encryption from secure authentication, as application data may\n  \
    \ have already been sent before Finished validation confirms that the\n   handshake\
    \ has not been tampered with -- so there is generally no way\n   to be sure that\
    \ communication with the expected peer is indeed taking\n   place during the False\
    \ Start.  Instead, the security goal is to\n   ensure that if anyone at all can\
    \ decrypt the application data sent in\n   a False Start, it must be the legitimate\
    \ peer.  While an attacker\n   could be influencing the handshake (restricting\
    \ cipher suite\n   selection, modifying key exchange messages, etc.), the attacker\n\
    \   should not be able to benefit from this.  The TLS protocol already\n   relies\
    \ on such a security property for authentication; with False\n   Start, the same\
    \ is needed for encryption.  This motivates the rules\n   put forth in the following\
    \ subsections.\n   It is prudent for applications to be even more restrictive.\
    \  If\n   heuristically a small list of cipher suites and a single protocol\n\
    \   version is found to be sufficient for the majority of TLS handshakes\n   in\
    \ practice, it could make sense to forego False Start for any\n   handshake that\
    \ does not match this expected pattern, even if there is\n   no concrete reason\
    \ to assume a cryptographic weakness.  Similarly, if\n   handshakes almost always\
    \ use ephemeral Elliptic Curve Diffie-Hellman\n   (ECDH) over one of a few named\
    \ curves, it could make sense to\n   disallow False Start with any other supported\
    \ curve.\n"
- title: 5.1.  Symmetric Cipher
  contents:
  - "5.1.  Symmetric Cipher\n   Clients MUST NOT use the False Start protocol modification\
    \ in a\n   handshake unless the cipher suite uses a symmetric cipher that is\n\
    \   considered cryptographically strong.\n   Implementations may have their own\
    \ classification of ciphers (and may\n   additionally allow the application layer\
    \ to provide a\n   classification), but generally only symmetric ciphers with\
    \ an\n   effective key length of 128 bits or more can be considered strong.\n\
    \   Also, various ciphers specified for use with TLS are known to have\n   cryptographic\
    \ weaknesses regardless of key length (none of the\n   ciphers specified in [RFC4492]\
    \ and [RFC5246] can be recommended for\n   use with False Start).  The AES_128_GCM_SHA256\
    \ or AES_256_GCM_SHA384\n   ciphers specified in [RFC5288] and [RFC5289] can be\
    \ considered\n   sufficiently strong for most uses.  Implementations that support\n\
    \   additional cipher suites have to be careful to whitelist only\n   suitable\
    \ symmetric ciphers; if in doubt, False Start should not be\n   used with a given\
    \ symmetric cipher.\n   While an attacker can change handshake messages to force\
    \ a downgrade\n   to a less secure symmetric cipher than otherwise would have\
    \ been\n   chosen, this rule ensures that in such a downgrade attack, no\n   application\
    \ data will be sent under an insecure symmetric cipher.\n"
- title: 5.2.  Protocol Version
  contents:
  - "5.2.  Protocol Version\n   Clients MUST NOT use the False Start protocol modification\
    \ in a\n   handshake unless the protocol version chosen by\n   ServerHello.server_version\
    \ has been whitelisted for this use.\n   Generally, to avoid potential protocol\
    \ downgrade attacks,\n   implementations should whitelist only their latest (highest-valued)\n\
    \   supported TLS protocol version (and, if applicable, any earlier\n   protocol\
    \ versions that they would use in fallback retries without\n   TLS_FALLBACK_SCSV\
    \ [RFC7507]).\n   The details of nominally identical cipher suites can differ\
    \ between\n   protocol versions, so this reinforces Section 5.1.\n"
- title: 5.3.  Key Exchange and Client Certificate Type
  contents:
  - "5.3.  Key Exchange and Client Certificate Type\n   Clients MUST NOT use the False\
    \ Start protocol modification in a\n   handshake unless the cipher suite uses\
    \ a key exchange method that has\n   been whitelisted for this use.  Also, clients\
    \ MUST NOT use the False\n   Start protocol modification unless any parameters\
    \ to the key exchange\n   methods (such as ServerDHParams or ServerECDHParams)\
    \ have been\n   whitelisted for this use.  Furthermore, when using client\n  \
    \ authentication, clients MUST NOT use the False Start protocol\n   modification\
    \ unless the client certificate type has been whitelisted\n   for this use.\n\
    \   Implementations may have their own whitelists of key exchange\n   methods,\
    \ parameters, and client certificate types (and may\n   additionally allow the\
    \ application layer to specify whitelists).\n   Generally, out of the options\
    \ from [RFC5246] and [RFC4492], the\n   following whitelists are recommended:\n\
    \   o  Key exchange methods: DHE_RSA, ECDHE_RSA, DHE_DSS, ECDHE_ECDSA\n   o  Parameters:\
    \ well-known DH groups (at least 3,072 bits), named\n      curves (at least 256\
    \ bits)\n   o  Client certificate types: none\n   However, if an implementation\
    \ that supports only key exchange methods\n   from [RFC5246] and [RFC4492] does\
    \ not support any of the above key\n   exchange methods, all of its supported\
    \ key exchange methods can be\n   whitelisted for False Start use.  Care is required\
    \ with any\n   additional key exchange methods, as these may not have similar\n\
    \   properties.\n   The recommended whitelists are such that if cryptographic\
    \ algorithms\n   suitable for forward secrecy would possibly be negotiated, no\
    \ False\n   Start will take place if the current handshake fails to provide\n\
    \   forward secrecy.  (Forward secrecy can be achieved using ephemeral\n   Diffie-Hellman\
    \ or ephemeral Elliptic Curve Diffie-Hellman; there is\n   no forward secrecy\
    \ when using a key exchange method of RSA, RSA_PSK,\n   DH_DSS, DH_RSA, ECDH_ECDSA,\
    \ or ECDH_RSA, or a client certificate type\n   of rsa_fixed_dh, dss_fixed_dh,\
    \ rsa_fixed_ecdh, or ecdsa_fixed_ecdh.)\n   As usual, the benefits of forward\
    \ secrecy may need to be balanced\n   against efficiency, and accordingly, even\
    \ implementations that\n   support the above key exchange methods might whitelist\
    \ further key\n   exchange methods and client certificate types.\n   Client certificate\
    \ types rsa_sign, dss_sign, and ecdsa_sign do allow\n   forward security, but\
    \ using False Start with any of these means\n   sending application data tied\
    \ to the client's signature before the\n   server's authenticity (and thus the\
    \ CertificateRequest message) has\n   been completely verified, so these too are\
    \ not generally suitable for\n   the client certificate type whitelist.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC4492]  Blake-Wilson, S., Bolyard, N., Gupta, V., Hawk, C., and B.\n  \
    \            Moeller, \"Elliptic Curve Cryptography (ECC) Cipher Suites\n    \
    \          for Transport Layer Security (TLS)\", RFC 4492,\n              DOI\
    \ 10.17487/RFC4492, May 2006,\n              <http://www.rfc-editor.org/info/rfc4492>.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246,\
    \ August 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5288]\
    \  Salowey, J., Choudhury, A., and D. McGrew, \"AES Galois\n              Counter\
    \ Mode (GCM) Cipher Suites for TLS\", RFC 5288,\n              DOI 10.17487/RFC5288,\
    \ August 2008,\n              <http://www.rfc-editor.org/info/rfc5288>.\n   [RFC5289]\
    \  Rescorla, E., \"TLS Elliptic Curve Cipher Suites with\n              SHA-256/384\
    \ and AES Galois Counter Mode (GCM)\", RFC 5289,\n              DOI 10.17487/RFC5289,\
    \ August 2008,\n              <http://www.rfc-editor.org/info/rfc5289>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC0793]  Postel, J., \"Transmission Control\
    \ Protocol\", STD 7,\n              RFC 793, DOI 10.17487/RFC0793, September 1981,\n\
    \              <http://www.rfc-editor.org/info/rfc793>.\n   [RFC7230]  Fielding,\
    \ R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1):\
    \ Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n   [RFC7413]\
    \  Cheng, Y., Chu, J., Radhakrishnan, S., and A. Jain, \"TCP\n              Fast\
    \ Open\", RFC 7413, DOI 10.17487/RFC7413, December 2014,\n              <http://www.rfc-editor.org/info/rfc7413>.\n\
    \   [RFC7507]  Moeller, B. and A. Langley, \"TLS Fallback Signaling Cipher\n \
    \             Suite Value (SCSV) for Preventing Protocol Downgrade\n         \
    \     Attacks\", RFC 7507, DOI 10.17487/RFC7507, April 2015,\n              <http://www.rfc-editor.org/info/rfc7507>.\n\
    \   [TLS13]    Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n \
    \             Version 1.3\", Work in Progress, draft-ietf-tls-tls13-14,\n    \
    \          July 2016.\n"
- title: Appendix A.  Implementation Notes
  contents:
  - "Appendix A.  Implementation Notes\n   TLS False Start is a modification to the\
    \ TLS protocol, and some\n   implementations that conform to [RFC5246] may have\
    \ problems\n   interacting with implementations that use the False Start\n   modification.\
    \  If the peer uses a False Start, application data\n   records may be received\
    \ directly following the peer's Finished\n   message, before the TLS implementation\
    \ has sent its own Finished\n   message.  False Start compatibility as defined\
    \ in Section 3 ensures\n   that these records with application data will simply\
    \ remain buffered\n   for later processing.\n   A False Start compatible TLS implementation\
    \ does not have to be aware\n   of the False Start concept and is certainly not\
    \ expected to detect\n   whether a False Start handshake is currently taking place:\
    \ thanks to\n   transport layer buffering, typical implementations will be False\n\
    \   Start compatible without having been designed for it.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors wish to thank Wan-Teh Chang, Ben Laurie, Martin\
    \ Thomson,\n   Eric Rescorla, and Brian Smith for their input.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Adam Langley\n   Google Inc.\n   345 Spear St\n   San\
    \ Francisco, CA  94105\n   United States of America\n   Email: agl@google.com\n\
    \   Nagendra Modadugu\n   Google Inc.\n   1600 Amphitheatre Parkway\n   Mountain\
    \ View, CA  94043\n   United States of America\n   Email: nagendra@cs.stanford.edu\n\
    \   Bodo Moeller\n   Google Switzerland GmbH\n   Brandschenkestrasse 110\n   Zurich\
    \  8002\n   Switzerland\n   Email: bmoeller@acm.org\n"
