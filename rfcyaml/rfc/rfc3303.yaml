- title: __initial_text__
  contents:
  - '           Middlebox communication architecture and framework

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   A principal objective of this document is to describe the underlying\n\
    \   framework of middlebox communications (MIDCOM) to enable complex\n   applications\
    \ through the middleboxes, seamlessly using a trusted\n   third party.  This document\
    \ and a companion document on MIDCOM\n   requirements ([REQMTS]) have been created\
    \ as a precursor to\n   rechartering the MIDCOM working group.\n   There are a\
    \ variety of intermediate devices in the Internet today\n   that require application\
    \ intelligence for their operation.  Datagrams\n   pertaining to real-time streaming\
    \ applications, such as SIP and\n   H.323, and peer-to-peer applications, such\
    \ as Napster and NetMeeting,\n   cannot be identified by merely examining packet\
    \ headers.  Middleboxes\n   implementing Firewall and Network Address Translator\
    \ services\n   typically embed application intelligence within the device for\
    \ their\n   operation.  The document specifies an architecture and framework in\n\
    \   which trusted third parties can be delegated to assist the\n   middleboxes\
    \ to perform their operation, without resorting to\n   embedding application intelligence.\
    \  Doing this will allow a\n   middlebox to continue to provide the services,\
    \ while keeping the\n   middlebox application agnostic.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Intermediate devices requiring application intelligence are\
    \ the\n   subject of this document.  These devices are referred to as\n   middleboxes\
    \ throughout the document.  Many of these devices enforce\n   application specific\
    \ policy based functions such as packet filtering,\n   VPN (Virtual Private Network)\
    \ tunneling, Intrusion detection,\n   security and so forth.  Network Address\
    \ Translator service, on the\n   other hand, provides routing transparency across\
    \ address realms\n   (within IPv4 routing network or across V4 and V6 routing\
    \ realms),\n   independent of applications.  Application Level Gateways (ALGs)\
    \ are\n   used in conjunction with NAT to examine and optionally modify\n   application\
    \ payload so the end-to-end application behavior remains\n   unchanged for many\
    \ of the applications traversing NAT middleboxes.\n   There may be other types\
    \ of services requiring embedding application\n   intelligence in middleboxes\
    \ for their operation.  The discussion\n   scope of this document is however limited\
    \ to Firewall and NAT\n   services.  Nonetheless, the MIDCOM framework is designed\
    \ to be\n   extensible to support the deployment of new services.\n   Tight coupling\
    \ of application intelligence with middleboxes makes\n   maintenance of middleboxes\
    \ hard with the advent of new applications.\n   Built-in application awareness\
    \ typically requires updates of\n   operating systems with new applications or\
    \ newer versions of existing\n   applications.  Operators requiring support for\
    \ newer applications\n   will not be able to use third party software/hardware\
    \ specific to the\n   application and are at the mercy of their middlebox vendor\
    \ to make\n   the necessary upgrade.  Further, embedding intelligence for a large\n\
    \   number of application protocols within the same middlebox increases\n   complexity\
    \ of the middlebox and is likely to be error prone and\n   degrade in performance.\n\
    \   This document describes a framework in which application intelligence\n  \
    \ can be moved from middleboxes into external MIDCOM agents.  The\n   premise\
    \ of the framework is to devise a MIDCOM protocol that is\n   application independent,\
    \ so the middleboxes can stay focused on\n   services such as firewall and NAT.\
    \  The framework document includes\n   some explicit and implied requirements\
    \ for the MIDCOM protocol.\n   However, it must be noted that these requirements\
    \ are only a subset.\n   A separate requirements document lists the requirements\
    \ in detail.\n   MIDCOM agents with application intelligence can assist the\n\
    \   middleboxes through the MIDCOM protocol in permitting applications\n   such\
    \ as FTP, SIP and H.323.  The communication between a MIDCOM agent\n   and a middlebox\
    \ will not be noticeable to the end-hosts that take\n   part in the application,\
    \ unless one of the end-hosts assumes the role\n   of a MIDCOM agent.  Discovery\
    \ of middleboxes or MIDCOM agents in the\n   path of an application instance is\
    \ outside the scope of this\n   document.  Further, any communication amongst\
    \ middleboxes is also\n   outside the scope of this document.\n   This document\
    \ describes the framework in which middlebox\n   communication takes place and\
    \ the various elements that constitute\n   the framework.  Section 2 describes\
    \ the terms used in the document.\n   Section 3 defines the architectural framework\
    \ of a middlebox for\n   communication with MIDCOM agents.  The remaining sections\
    \ cover the\n   components of the framework, illustration using sample flows,\
    \ and\n   operational considerations with the MIDCOM architecture.  Section 4\n\
    \   describes the nature of MIDCOM protocol.  Section 5 identifies\n   entities\
    \ that could potentially host the MIDCOM agent function.\n   Section 6 considers\
    \ the role of Policy server and its function with\n   regard to communicating\
    \ MIDCOM agent authorization policies.  Section\n   7 is an illustration of SIP\
    \ flows using a MIDCOM framework in which\n   the MIDCOM agent is co-resident\
    \ on a SIP proxy server.  Section 8\n   addresses operational considerations in\
    \ deploying a protocol adhering\n   to the framework described here.  Section\
    \ 9 is an applicability\n   statement, scoping the location of middleboxes.  Section\
    \ 11 outlines\n   security considerations for the middlebox in view of the MIDCOM\n\
    \   framework.\n"
- title: 2. Terminology
  contents:
  - "2. Terminology\n   Below are the definitions for the terms used throughout the\
    \ document.\n"
- title: 2.1. Middlebox function/service
  contents:
  - "2.1. Middlebox function/service\n   A middlebox function or a middlebox service\
    \ is an operation or method\n   performed by a network intermediary that may require\
    \ application\n   specific intelligence for its operation.  Policy based packet\n\
    \   filtering (a.k.a. firewall), Network address translation (NAT),\n   Intrusion\
    \ detection, Load balancing, Policy based tunneling and IPsec\n   security are\
    \ all examples of a middlebox function (or service).\n"
- title: 2.2. Middlebox
  contents:
  - "2.2. Middlebox\n   A Middlebox is a network intermediate device that implements\
    \ one or\n   more of the middlebox services.  A NAT middlebox is a middlebox\n\
    \   implementing NAT service.  A firewall middlebox is a middlebox\n   implementing\
    \ firewall service.\n   Traditional middleboxes embed application intelligence\
    \ within the\n   device to support specific application traversal.  Middleboxes\n\
    \   supporting the MIDCOM protocol will be able to externalize\n   application\
    \ intelligence into MIDCOM agents.  In reality, some of the\n   middleboxes may\
    \ continue to embed application intelligence for\n   certain applications and\
    \ depend on MIDCOM protocol and MIDCOM agents\n   for the support of remaining\
    \ applications.\n"
- title: 2.3. Firewall
  contents:
  - "2.3. Firewall\n   Firewall is a policy based packet filtering middlebox function,\n\
    \   typically used for restricting access to/from specific devices and\n   applications.\
    \  The policies are often termed Access Control Lists\n   (ACLs).\n"
- title: 2.4. NAT
  contents:
  - "2.4. NAT\n   Network Address Translation is a method by which IP addresses are\n\
    \   mapped from one address realm to another, providing transparent\n   routing\
    \ to end-hosts.  Transparent routing here refers to modifying\n   end-node addresses\
    \ en-route and maintaining state for these updates\n   so that when a datagram\
    \ leaves one realm and enters another,\n   datagrams pertaining to a session are\
    \ forwarded to the right end-host\n   in either realm.  Refer to [NAT-TERM] for\
    \ the definition of\n   Transparent routing, various NAT types, and the associated\
    \ terms in\n   use.  Two types of NAT are most common.  Basic-NAT, where only\
    \ an IP\n   address (and the related IP, TCP/UDP checksums) of packets is altered\n\
    \   and NAPT (Network Address Port Translation), where both an IP address\n  \
    \ and a transport layer identifier, such as a TCP/UDP port (and the\n   related\
    \ IP, TCP/UDP checksums), are altered.\n   The term NAT in this document is very\
    \ similar to the IPv4 NAT\n   described in [NAT-TERM], but is extended beyond\
    \ IPv4 networks to\n   include the IPv4-v6 NAT-PT described in [NAT-PT].  While\
    \ the IPv4 NAT\n   [NAT-TERM] translates one IPv4 address into another IPv4 address\
    \ to\n   provide routing between private V4 and external V4 address realms,\n\
    \   IPv4-v6 NAT-PT [NAT-PT] translates an IPv4 address into an IPv6\n   address,\
    \ and vice versa, to provide routing between a V6 address\n   realm and an external\
    \ V4 address realm.\n   Unless specified otherwise, NAT in this document is a\
    \ middlebox\n   function referring to both IPv4 NAT, as well as IPv4-v6 NAT-PT.\n"
- title: 2.5. Proxy
  contents:
  - "2.5. Proxy\n   A proxy is an intermediate relay agent between clients and servers\
    \ of\n   an application, relaying application messages between the two.\n   Proxies\
    \ use special protocol mechanisms to communicate with proxy\n   clients and relay\
    \ client data to servers and vice versa.  A Proxy\n   terminates sessions with\
    \ both the client and the server, acting as\n   server to the end-host client\
    \ and as client to the end-host server.\n   Applications such as FTP, SIP, and\
    \ RTSP use a control session to\n   establish data sessions.  These control and\
    \ data sessions can take\n   divergent paths.  While a proxy can intercept both\
    \ the control and\n   data sessions, it might intercept only the control session.\
    \  This is\n   often the case with real-time streaming applications such as SIP\
    \ and\n   RTSP.\n"
- title: 2.6. ALG
  contents:
  - "2.6. ALG\n   Application Level Gateways (ALGs) are entities that possess the\n\
    \   application specific intelligence and knowledge of an associated\n   middlebox\
    \ function.  An ALG examines application traffic in transit\n   and assists the\
    \ middlebox in carrying out its function.\n   An ALG may be a co-resident with\
    \ a middlebox or reside externally,\n   communicating through a middlebox communication\
    \ protocol.  It\n   interacts with a middlebox to set up state, access control\
    \ filters,\n   use middlebox state information, modify application specific payload,\n\
    \   or perform whatever else is necessary to enable the application to\n   run\
    \ through the middlebox.\n   ALGs are different from proxies.  ALGs are not visible\
    \ to end-hosts,\n   unlike the proxies which are relay agents terminating sessions\
    \ with\n   both end-hosts.  ALGs do not terminate sessions with either end-host.\n\
    \   Instead, ALGs examine, and optionally modify, application payload\n   content\
    \ to facilitate the flow of application traffic through a\n   middlebox.  ALGs\
    \ are middlebox centric, in that they assist the\n   middleboxes in carrying out\
    \ their function, whereas, the proxies act\n   as a focal point for application\
    \ servers, relaying traffic between\n   application clients and servers.\n   ALGs\
    \ are similar to Proxies, in that, both ALGs and proxies\n   facilitate Application\
    \ specific communication between clients and\n   servers.\n"
- title: 2.7. End-Hosts
  contents:
  - "2.7. End-Hosts\n   End-hosts are entities that are party to a networked application\n\
    \   instance.  End-hosts referred to in this document, are specifically\n   those\
    \ terminating Real-time streaming Voice-over-IP applications,\n   such as SIP\
    \ and H.323, and peer-to-peer applications such as Napster\n   and NetMeeting.\n"
- title: 2.8. MIDCOM Agents
  contents:
  - "2.8. MIDCOM Agents\n   MIDCOM agents are entities performing ALG functions, logically\n\
    \   external to a middlebox.  MIDCOM agents possess a combination of\n   application\
    \ awareness and knowledge of the middlebox function.  This\n   combination enables\
    \ the agents to facilitate traversal of the\n   middlebox by the application's\
    \ packets.  A MIDCOM agent may interact\n   with one or more middleboxes.\n  \
    \ Only \"In-Path MIDCOM agents\" are considered in this document.  In-\n   Path\
    \ MIDCOM agents are agents which are within the path of those\n   datagrams that\
    \ the agent needs to examine and/or modify in fulfilling\n   its role as a MIDCOM\
    \ agent.  \"Within the path\" here simply means that\n   the packets in question\
    \ flow through the node that hosts the agent.\n   The packets may be addressed\
    \ to the agent node at the IP layer.\n   Alternatively they may not be addressed\
    \ to the agent node, but may be\n   constrained by other factors to flow through\
    \ it.  In fact, it is\n   immaterial to the MIDCOM protocol which of these is\
    \ the case.  Some\n   examples of In-Path MIDCOM agents are application proxies,\
    \ gateways,\n   or even end-hosts that are party to the application.\n   Agents\
    \ not resident on nodes that are within the path of their\n   relevant application\
    \ flows are referred to as \"Out-of-Path (OOP)\n   MIDCOM agents\" and are out\
    \ of the scope of this document.\n"
- title: 2.9. MIDCOM PDP
  contents:
  - "2.9. MIDCOM PDP\n   MIDCOM Policy Decision Point (PDP) is primarily a Policy\
    \ Decision\n   Point(PDP), as defined in [POL-TERM]; and also acts as a policy\n\
    \   repository, holding MIDCOM related policy profiles in order to make\n   authorization\
    \ decisions.  [POL-TERM] defines a PDP as \"a logical\n   entity that makes policy\
    \ decisions for itself or for other network\n   elements that request such decisions\"\
    ; and a policy repository as \"a\n   specific data store that holds policy rules,\
    \ their conditions and\n   actions, and related policy data\".\n   A middlebox\
    \ and a MIDCOM PDP may communicate further if the MIDCOM\n   PDP's policy changes\
    \ or if a middlebox needs further information.\n   The MIDCOM PDP may, at anytime,\
    \ notify the middlebox to terminate\n   authorization for an agent.\n   The protocol\
    \ facilitating the communication between a middlebox and\n   MIDCOM PDP need not\
    \ be part of the MIDCOM protocol.  Section 6 in the\n   document addresses the\
    \ MIDCOM PDP interface and protocol framework\n   independent of the MIDCOM framework.\n\
    \   Application specific policy data and policy interface between an\n   agent\
    \ or application endpoint and a MIDCOM PDP is out of bounds for\n   this document.\
    \  The MIDCOM PDP issues addressed in the document are\n   focused at an aggregate\
    \ domain level as befitting the middlebox.  For\n   example, a SIP MIDCOM agent\
    \ may choose to query a MIDCOM PDP for the\n   administrative (or corporate) domain\
    \ to find whether a certain user\n   is allowed to make an outgoing call.  This\
    \ type of application\n   specific policy data, as befitting an end user, is out\
    \ of bounds for\n   the MIDCOM PDP considered in this document.  It is within\
    \ bounds,\n   however, for the MIDCOM PDP to specify the specific end-user\n \
    \  applications (or tuples) for which an agent is permitted to be an\n   ALG.\n"
- title: 2.10. Middlebox Communication (MIDCOM) protocol
  contents:
  - "2.10. Middlebox Communication (MIDCOM) protocol\n   The protocol between a MIDCOM\
    \ agent and a middlebox allows the MIDCOM\n   agent to invoke services of the\
    \ middlebox and allow the middlebox to\n   delegate application specific processing\
    \ to the MIDCOM agent.  The\n   MIDCOM protocol allows the middlebox to perform\
    \ its operation with\n   the aid of MIDCOM agents, without resorting to embedding\
    \ application\n   intelligence.  The principal motivation behind architecting\
    \ this\n   protocol is to enable complex applications through middleboxes,\n \
    \  seamlessly using a trusted third party, i.e., a MIDCOM agent.\n   This is a\
    \ protocol yet to be devised.\n"
- title: 2.11. MIDCOM agent registration
  contents:
  - "2.11. MIDCOM agent registration\n   A MIDCOM agent registration is defined as\
    \ the process of provisioning\n   agent profile information with the middlebox\
    \ or a MIDCOM PDP.  MIDCOM\n   agent registration is often a manual operation\
    \ performed by an\n   operator rather than the agent itself.\n   A MIDCOM agent\
    \ profile may include agent authorization policy (i.e.,\n   session tuples for\
    \ which the agent is authorized to act as ALG),\n   agent-hosting-entity (e.g.,\
    \ Proxy, Gateway, or end-host which hosts\n   the agent), agent accessibility\
    \ profile (including any host level\n   authentication information), and security\
    \ profile  (for the messages\n   exchanged between the middlebox and the agent).\n"
- title: 2.12. MIDCOM session
  contents:
  - "2.12. MIDCOM session\n   A MIDCOM session is defined to be a lasting association\
    \ between a\n   MIDCOM agent and a middlebox.  The MIDCOM session is not assumed\
    \ to\n   imply any specific transport layer protocol.  Specifically, this\n  \
    \ should not be construed as referring to a connection-oriented TCP\n   protocol.\n"
- title: 2.13. Filter
  contents:
  - "2.13. Filter\n   A filter is packet matching information that identifies a set\
    \ of\n   packets to be treated a certain way by a middlebox.  This definition\n\
    \   is consistent with [POL-TERM], which defines a filter as \"A set of\n   terms\
    \ and/or criteria used for the purpose of separating or\n   categorizing.  This\
    \ is accomplished via single- or multi-field\n   matching of traffic header and/or\
    \ payload data\".\n   5-Tuple specification of packets in the case of a firewall\
    \ and 5-\n   tuple specification of a session in the case of a NAT middlebox\n\
    \   function are examples of a filter.\n"
- title: 2.14. Policy action (or) Action
  contents:
  - "2.14. Policy action (or) Action\n   Policy action (or Action) is a description\
    \ of the middlebox\n   treatment/service to be applied to a set of packets.  This\
    \ definition\n   is consistent with  [POL-TERM], which defines a policy action\
    \ as\n   \"Definition of what is to be done to enforce a policy rule, when the\n\
    \   conditions of the rule are met.  Policy actions may result in the\n   execution\
    \ of one or more operations to affect and/or configure\n   network traffic and\
    \ network resources\".\n   NAT Address-BIND (or Port-BIND in the case of NAPT)\
    \ and firewall\n   permit/deny action are examples of an Action.\n"
- title: 2.15. Policy rule(s)
  contents:
  - "2.15. Policy rule(s)\n   The combination of one or more filters and one or more\
    \ actions.\n   Packets matching a filter are to be treated as specified by the\n\
    \   associated action(s).  The Policy rules may also contain auxiliary\n   attributes\
    \ such as individual rule type, timeout values, creating\n   agent, etc.\n   Policy\
    \ rules are communicated through the MIDCOM protocol.\n"
- title: 3.0 Architectural framework for middleboxes
  contents:
  - "3.0 Architectural framework for middleboxes\n   A middlebox may implement one\
    \ or more of the middlebox functions\n   selectively on multiple interfaces of\
    \ the device.  There can be a\n   variety of MIDCOM agents interfacing with the\
    \ middlebox to\n   communicate with one or more of the middlebox functions on\
    \ an\n   interface.  As such, the middlebox communication protocol must allow\n\
    \   for selective communication between a specific MIDCOM agent and one\n   or\
    \ more middlebox functions on the interface.  The following diagram\n   identifies\
    \ a possible layering of the service supported by a\n   middlebox and a list of\
    \ MIDCOM agents that might interact with it.\n               +---------------+\
    \  +--------------+\n               | MIDCOM agent  |  | MIDCOM agent |\n    \
    \           | co-resident on|  | co-resident  |\n               | Proxy Server\
    \  |  | on Appl. GW  |\n               +---------------+  +--------------+\n \
    \                         ^           ^\n                          |         \
    \  |                     +--------+\n                 MIDCOM   |           | \
    \                    | MIDCOM |\n                 Protocol |           |     \
    \              +-|  PDP   |\n                          |           |         \
    \         /  +--------+\n     +-------------+      |           |             \
    \    /\n     | MIDCOM agent|      |           |                /\n     | co-resident\
    \ |      |           |               /\n     | on End-hosts|<-+   |          \
    \ |              /\n     +-------------+  |   |           |              |\n \
    \                     v   v           v              v\n                +-------------------------------------------+\n\
    \                |  Middlebox Communication      |Policy     |\n             \
    \   |  Protocol (MIDCOM) Interface  |Interface  |\n                +----------+--------+-----------+-----------+\n\
    \     Middlebox  |          |        |           |           |\n     Functions\
    \  | Firewall |  NAT   |   VPN     | Intrusion |\n                |          |\
    \        | tunneling | Detection |\n                +----------+--------+-----------+-----------+\n\
    \     Middlebox  | Middlebox function specific policy rule(s)|\n     Managed \
    \   | and other attributes                      |\n     Resources  |         \
    \                                  |\n                +-------------------------------------------+\n\
    \          Figure 1: MIDCOM agents interfacing with a middlebox\n   Firewall ACLs,\
    \ NAT-BINDs, NAT address-maps and Session-state are a\n   few of the middlebox\
    \ function specific policy rules.  A session state\n   may include middlebox function\
    \ specific attributes, such as timeout\n   values, NAT translation parameters\
    \ (i.e., NAT-BINDS), and so forth.\n   As Session-state may be shared across middlebox\
    \ functions, a\n   Session-state may be created by a function, and terminated\
    \ by a\n   different function.  For example, a session-state may be created by\n\
    \   the firewall function, but terminated by the NAT function, when a\n   session\
    \ timer expires.\n   Application specific MIDCOM agents (co-resident on the middlebox\
    \ or\n   external to the middlebox) would examine the IP datagrams and help\n\
    \   identify the application the datagram belongs to, and assist the\n   middlebox\
    \ in performing functions unique to the application and the\n   middlebox service.\
    \  For example, a MIDCOM agent, assisting a NAT\n   middlebox, might perform payload\
    \ translations, whereas a MIDCOM agent\n   assisting a firewall middlebox might\
    \ request the firewall to permit\n   access to application specific, dynamically\
    \ generated, session\n   traffic.\n"
- title: 4. MIDCOM Protocol
  contents:
  - "4. MIDCOM Protocol\n   The MIDCOM protocol between a MIDCOM agent and a middlebox\
    \ allows the\n   MIDCOM agent to invoke services of the middlebox and allow the\n\
    \   middlebox to delegate application specific processing to the MIDCOM\n   agent.\
    \  The protocol will allow MIDCOM agents to signal the\n   middleboxes, to let\
    \ complex applications using dynamic port based\n   sessions through them (i.e.,\
    \ middleboxes) seamlessly.\n   It is important to note that an agent and a middlebox\
    \ can be on the\n   same physical device.  In such a case, they may communicate\
    \ using a\n   MIDCOM protocol message formats, but using a non-IP based transport,\n\
    \   such as IPC messaging (or) they may communicate using well-defined\n   API/DLL\
    \ (or) the application intelligence is fully embedded into the\n   middlebox service\
    \ (as it is done today in many stateful inspection\n   firewall devices and NAT\
    \ devices).\n   The MIDCOM protocol will consist of a session setup phase, run-time\n\
    \   session phase, and a session termination phase.\n   Session setup must be\
    \ preceded by registration of the MIDCOM agent\n   with either the middlebox or\
    \ the MIDCOM PDP.  The MIDCOM agent access\n   and authorization profile may either\
    \ be pre-configured on the\n   middlebox (or) listed on a MIDCOM PDP; the middlebox\
    \ is configured to\n   consult.  MIDCOM shall be a client-server protocol, initiated\
    \ by the\n   agent.\n   A MIDCOM session may be terminated by either of the parties.\
    \  A\n   MIDCOM session termination may also be triggered by (a) the middlebox\n\
    \   or the agent going out of service and not being available for further\n  \
    \ MIDCOM operations, or (b) the MIDCOM PDP notifying the middlebox that\n   a\
    \ particular MIDCOM agent is no longer authorized.\n   The MIDCOM protocol data\
    \ exchanged during run-time is governed\n   principally by the middlebox services\
    \ the protocol supports.\n   Firewall and NAT middlebox services are considered\
    \ in this document.\n   Nonetheless, the MIDCOM framework is designed to be extensible\
    \ to\n   support the deployment of other services as well.\n"
- title: 5.0. MIDCOM Agents
  contents:
  - "5.0. MIDCOM Agents\n   MIDCOM agents are logical entities which may reside physically\
    \ on\n   nodes external to a middlebox, possessing a combination of\n   application\
    \ awareness and knowledge of middlebox function.  A MIDCOM\n   agent may communicate\
    \ with one or more middleboxes.  The issues of\n   middleboxes discovering agents,\
    \ or vice versa, are outside the scope\n   of this document.  The focus of the\
    \ document is the framework in\n   which a MIDCOM agent communicates with a middlebox\
    \ using MIDCOM\n   protocol, which is yet to be devised.  Specifically, the focus\
    \ is\n   restricted to just the In-Path agents.\n   In-Path MIDCOM agents are\
    \ MIDCOM agents that are located naturally\n   within the message path of the\
    \ application(s) they are associated\n   with.  Bundled session applications,\
    \ such as H.323, SIP, and RTSP\n   which have separate control and data sessions,\
    \ may have their\n   sessions take divergent paths.  In those scenarios, In-Path\
    \ MIDCOM\n   agents are those that find themselves in the control path.  In a\n\
    \   majority of cases, a middlebox will likely require the assistance of\n   a\
    \ single agent for an application in the control path alone.\n   However, it is\
    \ possible that a middlebox function, or a specific\n   application traversing\
    \ the middlebox might require the intervention\n   of more than a single MIDCOM\
    \ agent for the same application, one for\n   each sub-session of the application.\n\
    \   Application Proxies and gateways are a good choice for In-Path MIDCOM\n  \
    \ agents, as these entities by definition, are in the path of an\n   application\
    \ between a client and server.  In addition to hosting the\n   MIDCOM agent function,\
    \ these natively in-path application specific\n   entities may also enforce application-specific\
    \ choices locally, such\n   as dropping messages infected with known viruses,\
    \ or lacking user\n   authentication.  These entities can be interjecting both\
    \ the control\n   and data sessions.  For example, FTP control and Data sessions\
    \ are\n   interjected by an FTP proxy server.\n   However, proxies may also be\
    \ interjecting just the control session\n   and not the data sessions, as is the\
    \ case with real-time streaming\n   applications, such as SIP and RTSP.  Note,\
    \ applications may not\n   always traverse a proxy and some applications may not\
    \ have a proxy\n   server available.\n   SIP proxies and H.323 gatekeepers may\
    \ be used to host MIDCOM agent\n   functions to control middleboxes implementing\
    \ firewall and NAT\n   functions.  The advantage of using in-path entities, as\
    \ opposed to\n   creating an entirely new agent, is that the in-path entities\
    \ already\n   possess application intelligence.  You will need to merely enable\
    \ the\n   use of the MIDCOM protocol to be an effective MIDCOM agent.  Figure\
    \ 2\n   below illustrates a scenario where the in-path MIDCOM agents\n   interface\
    \ with the middlebox.  Let us say, the MIDCOM PDP has pre-\n   configured the\
    \ in-path proxies as trusted MIDCOM agents on the\n   middlebox and the packet\
    \ filter implements a 'default-deny' packet\n   filtering policy.  Proxies use\
    \ their application-awareness knowledge\n   to control the firewall function and\
    \ selectively permit a certain\n   number of voice stream sessions dynamically\
    \ using MIDCOM protocol.\n   In the illustration below, the proxies and the MIDCOM\
    \ PDP are shown\n   inside a private domain.  The intent however, is not to imply\
    \ that\n   they be inside the private boundary alone.  The proxies may also\n\
    \   reside external to the domain.  The only requirement is that there be\n  \
    \ a trust relationship with the middlebox.\n                          +-----------+\n\
    \                          | MIDCOM    |\n                          |  PDP   \
    \   |~~~~~~~~~~~~~|\n                          +-----------+              \\\n\
    \                                                      \\\n                  \
    \ +--------+                          \\\n                   | SIP    |___   \
    \                     \\\n           ________| Proxy  |   \\            Middlebox\
    \   \\\n          /        +--------+..  |        +--------------------+\n   \
    \      |                    :  | MIDCOM |           |        |\n         |  RTSP\
    \ +---------+  :..|........| MIDCOM    | POLICY |\n     SIP |   ____|  RTSP  \
    \ |.....|........| PROTOCOL  | INTER- |\n         |  /    |  Proxy  |___  |  \
    \      | INTERFACE | FACE   |\n         | |     +---------+   \\  \\       |--------------------|\n\
    \         | |                    \\  \\______|                    |__SIP\n   \
    \      | |                     \\________|                    |__RTSP\n      \
    \   | |                           ---|     FIREWALL       |--->--\n        +-----------+\
    \                 /---|                    |---<--\n       +-----------+|  Data\
    \ streams  //   +--------------------+\n      +-----------+||---------->----//\
    \            |\n      |end-hosts  ||-----------<-----             .\n      +-----------+\
    \   (RTP, RTSP data, etc.)      |\n                                          \
    \        .  Outside the\n             Within a private domain              | \
    \ private domain\n      Legend: ---- Application data path datagrams\n       \
    \       ____ Application control path datagrams\n              .... Middlebox\
    \ Communication Protocol (MIDCOM)\n              ~~~~ MIDCOM PDP Interface\n \
    \               |\n                .  private domain Boundary\n              \
    \  |\n       Figure 2: In-Path MIDCOM Agents for middlebox Communication\n"
- title: 5.1. End-hosts as In-Path MIDCOM agents
  contents:
  - "5.1. End-hosts as In-Path MIDCOM agents\n   End-hosts are another variation of\
    \ In-Path MIDCOM agents.  Unlike\n   Proxies, End-hosts are a direct party to\
    \ the application and possess\n   all the end-to-end application intelligence\
    \ there is to it.  End-\n   hosts presumably terminate both the control and data\
    \ paths of an\n   application.  Unlike other entities hosting MIDCOM agents, end-host\n\
    \   is able to process secure datagrams.  However, the problem would be\n   one\
    \ of manageability - upgrading all the end-hosts running a specific\n   application.\n"
- title: 6.0. MIDCOM PDP functions
  contents:
  - "6.0. MIDCOM PDP functions\n   The functional decomposition of the MIDCOM architecture\
    \ assumes the\n   existence of a logical entity, known as MIDCOM PDP, responsible\
    \ for\n   performing authorization and related provisioning services for the\n\
    \   middlebox as depicted in figure 1.  The MIDCOM PDP is a logical\n   entity\
    \ which may reside physically on a middlebox or on a node\n   external to the\
    \ middlebox.  The protocol employed for communication\n   between the middlebox\
    \ and the MIDCOM PDP is unrelated to the MIDCOM\n   protocol.\n   Agents are registered\
    \ with a MIDCOM PDP for authorization to invoke\n   services of the middlebox.\
    \  The MIDCOM PDP maintains a list of agents\n   that are authorized to connect\
    \ to each of the middleboxes the MIDCOM\n   PDP supports.  In the context of the\
    \ MIDCOM Framework, the MIDCOM PDP\n   does not assist a middlebox in the implementation\
    \ of the services it\n   provides.\n   The MIDCOM PDP acts in an advisory capacity\
    \ to a middlebox, to\n   authorize or terminate authorization for an agent attempting\n\
    \   connectivity to the middlebox.  The primary objective of a MIDCOM PDP\n  \
    \ is to communicate agent authorization information, so as to ensure\n   that\
    \ the security and integrity of a middlebox is not jeopardized.\n   Specifically,\
    \ the MIDCOM PDP should associate a trust level with each\n   agent attempting\
    \ to connect to a middlebox and provide a security\n   profile.  The MIDCOM PDP\
    \ should be capable of addressing cases when\n   end-hosts are agents to the middlebox.\n"
- title: 6.1. Authentication, Integrity and Confidentiality
  contents:
  - "6.1. Authentication, Integrity and Confidentiality\n   Host authenticity and\
    \ individual message security are two distinct\n   types of security considerations.\
    \  Host authentication refers to\n   credentials required of a MIDCOM agent to\
    \ authenticate itself to the\n   middlebox and vice versa.  When authentication\
    \ fails, the middlebox\n   must not process signaling requests received from the\
    \ agent that\n   failed authentication.  Two-way authentication should be supported.\n\
    \   In some cases, the 2-way authentication may be tightly linked to the\n   establishment\
    \ of keys to protect subsequent traffic.  Two-way\n   authentication is often\
    \ required to prevent various active attacks on\n   the MIDCOM protocol and secure\
    \ establishment of keying material.\n   Security services such as authentication,\
    \ data integrity,\n   confidentiality and replay protection may be adapted to\
    \ secure MIDCOM\n   messages in an untrusted domain.  Message authentication is\
    \ the same\n   as data origin authentication and is an affirmation that the sender\n\
    \   of the message is who it claims to be.  Data integrity refers to the\n   ability\
    \ to ensure that a message has not been accidentally,\n   maliciously or otherwise\
    \ altered or destroyed.  Confidentiality is\n   the encryption of a message with\
    \ a key, so that only those in\n   possession of the key can decipher the message\
    \ content.  Lastly,\n   replay protection is a form of sequence integrity, so\
    \ when an\n   intruder plays back a previously recorded sequence of messages,\
    \ the\n   receiver of the replay messages will simply drop the replay messages\n\
    \   into bit-bucket.  Certain applications of the MIDCOM protocol might\n   require\
    \ support for non-repudiation as an option of the data\n   integrity service.\
    \  Typically, support for non-repudiation is\n   required for billing, service\
    \ level agreements, payment orders, and\n   receipts for delivery of service.\n\
    \   IPsec AH ([IPSEC-AH]) offers data-origin authentication, data\n   integrity\
    \ and protection from message replay.  IPsec ESP ([IPSEC-\n   ESP]) provides data-origin\
    \ authentication to a lesser degree (same as\n   IPsec AH if the MIDCOM transport\
    \ protocol turns out to be TCP or\n   UDP), message confidentiality, data integrity\
    \ and protection from\n   replay.  Besides the IPsec based protocols, there are\
    \ other security\n   options as well.  TLS based transport layer security is one\
    \ option.\n   There are also many application-layer security mechanisms available.\n\
    \   Simple Source-address based security is a minimal form of security\n   and\
    \ should be relied on only in the most trusted environments, where\n   those hosts\
    \ will not be spoofed.\n   The MIDCOM message security shall use existing standards,\
    \ whenever\n   the existing standards satisfy the requirements.  Security shall\
    \ be\n   specified to minimize the impact on sessions that do not use the\n  \
    \ security option.  Security should be designed to avoid introducing\n   and to\
    \ minimize the impact of denial of service attacks.  Some\n   security mechanisms\
    \ and algorithms require substantial processing or\n   storage, in which case\
    \ the security protocols should protect\n   themselves as well as against possible\
    \ flooding attacks that\n   overwhelm the endpoint (i.e., the middlebox or the\
    \ agent) with such\n   processing.  For connection oriented protocols (such as\
    \ TCP) using\n   security services, the security protocol should detect premature\n\
    \   closure or truncation attacks.\n"
- title: 6.2. Registration and deregistration of MIDCOM agents
  contents:
  - "6.2. Registration and deregistration of MIDCOM agents\n   Prior to allowing MIDCOM\
    \ agents to invoke services of the middlebox,\n   a registration process must\
    \ take place.  Registration is a different\n   process than establishing a MIDCOM\
    \ session.  The former requires\n   provisioning agent profile information with\
    \ the middlebox or a MIDCOM\n   PDP.  Agent registration is often a manual operation\
    \ performed by an\n   operator rather than the agent itself.  Setting up MIDCOM\
    \ session\n   refers to establishing a MIDCOM transport session and exchanging\n\
    \   security credentials between an agent and a middlebox.  The transport\n  \
    \ session uses the registered information for session establishment.\n   Profile\
    \ of a MIDCOM agent includes agent authorization policy (i.e.,\n   session tuples\
    \ for which the agent is authorized to act as ALG),\n   agent-hosting-entity (e.g.,\
    \ Proxy, Gateway or end-host which hosts\n   the agent), agent accessibility profile\
    \ (including any host level\n   authentication information) and security profile\
    \ (i.e., security\n   requirements for messages exchanged between the middlebox\
    \ and the\n   agent).\n   MIDCOM agent profile may be pre-configured on a middlebox.\n\
    \   Subsequent to that, the agent may choose to initiate a MIDCOM session\n  \
    \ prior to any data traffic.  For example, MIDCOM agent authorization\n   policy\
    \ for a middlebox service may be preconfigured by specifying the\n   agent in\
    \ conjunction with a filter.  In the case of a firewall, for\n   example, the\
    \ ACL tuple may be altered to reflect the optional Agent\n   presence.  The revised\
    \ ACL may look something like the following.\n   (<Session-Direction>, <Source-Address>,\
    \ <Destination-Address>, <IP-\n   Protocol>, <Source-Port>, <Destination-Port>,\
    \ <Agent>)\n   The reader should note that this is an illustrative example and\
    \ not\n   necessarily the actual definition of an ACL tuple.  The formal\n   description\
    \ of the ACL is yet to be devised.  Agent accessibility\n   information should\
    \ also be provisioned.  For a  MIDCOM agent,\n   accessibility information includes\
    \ the IP address, trust level, host\n   authentication parameters and message\
    \ authentication parameters.\n   Once a session is established between a middlebox\
    \ and a MIDCOM agent,\n   that session should be usable with multiple instances\
    \ of the\n   application(s), as appropriate.  Note, all of this could be captured\n\
    \   in an agent profile for ease of management.\n   The technique described above\
    \ is necessary for the pre-registration\n   of MIDCOM agents with the middlebox.\
    \  The middlebox provisioning may\n   remain unchanged, if the middlebox learns\
    \ of the registered agents\n   through a MIDCOM PDP.  In either case, the MIDCOM\
    \ agent should\n   initiate the session prior to the start of the application.\
    \  If the\n   agent session is delayed until after the application has started,\
    \ the\n   agent might be unable to process the control stream to permit the\n\
    \   data sessions.  When a middlebox notices an incoming MIDCOM session,\n   and\
    \ the middlebox has no prior profile of the MIDCOM agent, the\n   middlebox will\
    \ consult its MIDCOM PDP for authenticity,\n   authorization, and trust guidelines\
    \ for the session.\n"
- title: 7.0. MIDCOM Framework Illustration using an In-Path agent
  contents:
  - "7.0. MIDCOM Framework Illustration using an In-Path agent\n   In figure 3 below,\
    \ we consider SIP applications (Refer [SIP]) to\n   illustrate the operation of\
    \ the MIDCOM protocol.  Specifically, the\n   application assumes that a caller,\
    \ external to a private domain,\n   initiates the call.  The middlebox is assumed\
    \ to be located at the\n   edge of the private domain.  A SIP phone (SIP User\
    \ Agent\n   Client/Server) inside the private domain is capable of receiving\n\
    \   calls from external SIP phones.  The caller uses a SIP Proxy, node\n   located\
    \ external to the private domain, as its outbound proxy.  No\n   interior proxy\
    \ is assumed for the callee.  Lastly, the external SIP\n   proxy node is designated\
    \ to host the MIDCOM agent function.\n   Arrows 1 and 8 in the figure below refer\
    \ to a SIP call setup exchange\n   between the external SIP phone and the SIP\
    \ proxy.  Arrows 4 and 5\n   refer to a SIP call setup exchange between the SIP\
    \ proxy and the\n   interior SIP phone, and are assumed to be traversing the middlebox.\n\
    \   Arrows 2, 3, 6 and 7 below, between the SIP proxy and the middlebox,\n   refer\
    \ to MIDCOM communication.  Na and Nb represent RTP/RTCP media\n   traffic (Refer\
    \ [RTP]) path in the external network.  Nc and Nd\n   represent media traffic\
    \ inside the private domain.\n                               _________\n     \
    \                     --->|   SIP   |<-----\\\n                         /    |\
    \  Proxy  |       \\\n                        |     |_________|       |\n    \
    \                   1|       |^    ^|       4|\n                        |    \
    \   ||    ||        |\n                        |8     2||3  7||6       |5\n  \
    \      ______________  |       ||    ||        |    _____________\n        | \
    \           |<-/      _v|____|v___      \\->|            |\n        | External\
    \   |    Na   |           |   Nc   | SIP Phone  |\n        | SIP phone  |>------->|\
    \ Middlebox |>------>| within     |\n        |            |<-------<|___________|<------<|\
    \ Pvt. domain|\n        |____________|    Nb                   Nd   |____________|\n\
    \      Figure 3: MIDCOM framework illustration with In-Path SIP Proxy\n   As for\
    \ the SIP application, we make the assumption that the middlebox\n   is pre-configured\
    \ to accept SIP calls into the private SIP phone.\n   Specifically, this would\
    \ imply that the middlebox implementing\n   firewall service is pre-configured\
    \ to permit SIP calls (destination\n   TCP or UDP port number set to 5060) into\
    \ the private phone.\n   Likewise, middlebox implementing NAPT service would have\
    \ been pre-\n   configured to provide a port binding, to permit incoming SIP calls\
    \ to\n   be redirected to the specific private SIP phone.  I.e., the INVITE\n\
    \   from the external caller is not made to the private IP address, but\n   to\
    \ the NAPT external address.\n   The objective of the MIDCOM agent in the following\
    \ illustration is to\n   merely permit the RTP/RTCP media stream (Refer [RTP])\
    \ through the\n   middlebox, when using the MIDCOM protocol architecture outlined\
    \ in\n   the document.  A SIP session typically establishes two RTP/RTCP media\n\
    \   streams - one from the callee to the caller and another from the\n   caller\
    \ to the callee.  These media sessions are UDP based and will\n   use dynamic\
    \ ports.  The dynamic ports used for the media stream are\n   specified in the\
    \ SDP section (Refer [SDP]) of the SIP payload\n   message.  The MIDCOM agent\
    \ will parse the SDP section and use the\n   MIDCOM protocol to (a) open pinholes\
    \ (i.e., permit RTP/RTCP session\n   tuples) in a middlebox implementing firewall\
    \ service, or (b) create\n   PORT bindings and appropriately modify the SDP content\
    \ to permit the\n   RTP/RTCP streams through a middlebox implementing NAT service.\
    \  The\n   MIDCOM protocol should be sufficiently rich and expressive to support\n\
    \   the operations described under the timelines.  The examples do not\n   show\
    \ the timers maintained by the agent to keep the middlebox policy\n   rule(s)\
    \ from timing out.\n   MIDCOM agent Registration and connectivity between the\
    \ MIDCOM agent\n   and the middlebox are not shown in the interest of restricting\
    \ the\n   focus of the MIDCOM transactions to enabling the middlebox to let the\n\
    \   media stream through.  MIDCOM PDP is also not shown in the diagram\n   below\
    \ or on the timelines for the same reason.\n   The following subsections illustrate\
    \ a typical timeline sequence of\n   operations that transpire with the various\
    \ elements involved in a SIP\n   telephony application path.  Each subsection\
    \ is devoted to a specific\n   instantiation of a middlebox service - NAPT (refer\
    \ [NAT-TERM], [NAT-\n   TRAD]), firewall and a combination of both NAPT and firewall\
    \ are\n   considered.\n"
- title: 7.1. Timeline flow - Middlebox implementing firewall service
  contents:
  - "7.1. Timeline flow - Middlebox implementing firewall service\n   In the following\
    \ example, we will assume a middlebox implementing a\n   firewall service.  We\
    \ further assume that the middlebox is pre-\n   configured to permit SIP calls\
    \ (destination TCP or UDP port number\n   set to 5060) into the private phone.\
    \  The following timeline\n   illustrates the operations performed by the MIDCOM\
    \ agent, to permit\n   RTP/RTCP media stream through the middlebox.\n   The INVITE\
    \ from the caller (external) is assumed to include the SDP\n   payload.  You will\
    \ note that the MIDCOM agent requests the middlebox\n   to permit the Private-to-external\
    \ RTP/RTCP flows before the INVITE is\n   relayed to the callee.  This is because,\
    \ in SIP, the calling party\n   must be ready to receive the media when it sends\
    \ the INVITE with a\n   session description.  If the called party (private phone)\
    \ assumes\n   this and sends \"early media\" before sending the 200 OK response,\
    \ the\n   firewall will have blocked these packets without this initial MIDCOM\n\
    \   signaling from the agent.\n      SIP Phone      SIP Proxy              Middlebox\
    \      SIP Phone\n      (External)     (MIDCOM agent)         (FIREWALL      (private)\n\
    \      |                 |                   Service)          |\n      |    \
    \             |                      |              |\n      |----INVITE------>|\
    \                      |              |\n      |                 |           \
    \           |              |\n      |<---100Trying----|                      |\
    \              |\n      |                 |                      |           \
    \   |\n      |              Identify end-2-end        |              |\n     \
    \ |              parameters (from Caller's |              |\n      |         \
    \     SDP) for the pri-to-Ext   |              |\n      |              RTP & RTCP\
    \ sessions.      |              |\n      |              (RTP1, RTCP1)        \
    \     |              |\n      |                 |                      |     \
    \         |\n      |                 |+Permit RTP1, RTCP1 +>|              |\n\
    \      |                 |<+RTP1, RTCP1 OKed++++|              |\n      |    \
    \             |                      |              |\n      |               \
    \  |--------INVITE---------------------->|\n      |                 |        \
    \              |              |\n      |                 |<-----180 Ringing--------------------|\n\
    \      |<--180Ringing----|                      |              |\n      |    \
    \             |<-------200 OK-----------------------|\n      |               \
    \  |                      |              |\n      |              Identify end-2-end\
    \        |              |\n      |              parameters (from callee's |  \
    \            |\n      |              SDP) for the Ext-to-Pri   |             \
    \ |\n      |              RTP and RTCP sessions.    |              |\n      |\
    \              (RTP2, RTCP2)             |              |\n      |           \
    \      |                      |              |\n      |                 |+Permit\
    \ RTP2, RTCP2 +>|              |\n      |                 |<+RTP2, RTCP2 OKed++++|\
    \              |\n      |                 |                      |           \
    \   |\n      |<---200 OK ------|                      |              |\n     \
    \ |-------ACK------>|                      |              |\n      |         \
    \        |-----------ACK---------------------->|\n      |                 |  \
    \                    |              |\n      |<===================RTP/RTCP==========================>|\n\
    \      |                 |                      |              |\n      |-------BYE------>|\
    \                      |              |\n      |                 |--------------------------BYE------->|\n\
    \      |                 |                      |              |\n      |    \
    \             |<----------200 OK--------------------|\n      |               \
    \  |                      |              |\n      |                 |++Cancel\
    \ permits to   |              |\n      |                 |  RTP1, RTCP1, RTP2,\
    \  |              |\n      |                 |  and RTCP2 +++++++++>|        \
    \      |\n      |                 |<+RTP1, RTP2, RTCP1 & |              |\n  \
    \    |                 |  RTCP2 cancelled ++++|              |\n      |      \
    \           |                      |              |\n      |<---200 OK-------|\
    \                      |              |\n      |                 |           \
    \           |              |\n         Legend:      ++++    MIDCOM control traffic\n\
    \                      ----    SIP control traffic\n                      ====\
    \    RTP/RTCP media traffic\n"
- title: 7.2. Timeline flow - Middlebox implementing NAPT service
  contents:
  - "7.2. Timeline flow - Middlebox implementing NAPT service\n   In the following\
    \ example, we will assume a middlebox implementing\n   NAPT service.  We make\
    \ the assumption that the middlebox is pre-\n   configured to redirect SIP calls\
    \ to the specific private SIP phone\n   application.  I.e., the INVITE from the\
    \ external caller is not made\n   to the private IP address, but to the NAPT external\
    \ address.  Let us\n   say, the external phone's IP address is Ea, NAPT middlebox\
    \ external\n   Address is Ma, and the internal SIP phone's private address is\
    \ Pa.\n   SIP calls to the private SIP phone will arrive as TCP/UDP sessions,\n\
    \   with the destination address and port set to Ma and 5060\n   respectively.\
    \  The middlebox will redirect these datagrams to the\n   internal SIP phone.\
    \  The following timeline will illustrate the\n   operations necessary to be performed\
    \ by the MIDCOM agent to permit\n   the RTP/RTCP media stream through the middlebox.\n\
    \   As with the previous example (section 7.1), the INVITE from the\n   caller\
    \ (external) is assumed to include the SDP payload.  You will\n   note that the\
    \ MIDCOM agent requests the middlebox to create NAT\n   session descriptors for\
    \ the private-to-external RTP/RTCP flows before\n   the INVITE is relayed to the\
    \ private SIP phone (for the same reasons\n   as described in section 7.1).  If\
    \ the called party (private phone)\n   sends \"early media\" before sending the\
    \ 200 OK response, the NAPT\n   middlebox will have blocked these packets without\
    \ the initial MIDCOM\n   signaling from the agent.  Also, note that after the\
    \ 200 OK is\n   received by the proxy from the private phone, the agent requests\
    \ the\n   middlebox to allocate NAT session descriptors for the external-to-\n\
    \   private RTP2 and RTCP2 flows, such that the ports assigned on the Ma\n   for\
    \ RTP2 and RTCP2 are contiguous.  The RTCP stream does not happen\n   with a non-contiguous\
    \ port.  Lastly, you will note that even though\n   each media stream (RTP1, RTCP1,\
    \ RTP2 and RTCP2) is independent, they\n   are all tied to the single SIP control\
    \ session, while their NAT\n   session descriptors were being created.  Finally,\
    \ when the agent\n   issues a terminate session bundle command for the SIP session,\
    \ the\n   middlebox is assumed to delete all associated media stream sessions\n\
    \   automagically.\n      SIP Phone      SIP Proxy              Middlebox    \
    \ SIP Phone\n      (External)     (MIDCOM agent)         (NAPT         (Private)\n\
    \      IP Addr:Ea        |                   Service)      IP addr:Pa\n      |\
    \                 |                   IP addr:Ma        |\n      |           \
    \      |                      |              |\n      |----INVITE------>|    \
    \                  |              |\n      |                 |               \
    \       |              |\n      |<---100Trying----|                      |   \
    \           |\n      |                 |                      |              |\n\
    \      |                 |++ Query Port-BIND    |              |\n      |    \
    \             |   for (Ma, 5060) +++>|              |\n      |               \
    \  |<+ Port-BIND reply    |              |\n      |                 |   for (Ma,\
    \ 5060) ++++|              |\n      |                 |                      |\
    \              |\n      |                 |++ Query NAT Session  |           \
    \   |\n      |                 |   Descriptor for     |              |\n     \
    \ |                 |   Ea-to-Pa SIP flow+>|              |\n      |         \
    \        |<+ Ea-to-Pa SIP flow  |              |\n      |                 |  \
    \ Session Descriptor+|              |\n      |                 |             \
    \         |              |\n      |              Determine the Internal    | \
    \             |\n      |              IP address (Pa)           |            \
    \  |\n      |              of the callee.            |              |\n      |\
    \                 |                      |              |\n      |           \
    \   Identify UDP port numbers |              |\n      |              on Ea (Eport1,\
    \ Eport1+1)  |              |\n      |              for pri-to-ext RTP & RTCP\
    \ |              |\n      |              sessions (RTP1, RTCP1)    |         \
    \     |\n      |                 |                      |              |\n   \
    \   |                 |++Create NAT Session  |              |\n      |       \
    \          |  descriptors for     |              |\n      |                 |\
    \  RTP1, RTCP1; Set    |              |\n      |                 |  parent session\
    \ to   |              |\n      |                 |  SIP-ctrl session ++>|    \
    \          |\n      |                 |<+RTP1, RTCP1 session |              |\n\
    \      |                 |  descriptors created+|              |\n      |    \
    \             |                      |              |\n      |               \
    \  |                      |..redirected..|\n      |                 |--------INVITE--------|------------->|\n\
    \      |                 |                      |              |\n      |    \
    \             |<-----180Ringing---------------------|\n      |               \
    \  |                      |              |\n      |<--180Ringing----|        \
    \              |              |\n      |                 |<-------200 OK-----------------------|\n\
    \      |                 |                      |              |\n      |    \
    \          Identify UDP port numbers |              |\n      |              on\
    \ Pa (Pport2, Pport2+1)  |              |\n      |              for ext-to-pri\
    \ RTP & RTCP |              |\n      |              sessions (RTP2, RTCP2)   \
    \ |              |\n      |                 |                      |         \
    \     |\n      |                 |++Create consecutive  |              |\n   \
    \   |                 |  port BINDs on Ma    |              |\n      |       \
    \          |  for (Pa, Pport2),   |              |\n      |                 |\
    \  (Pa, Pport2+1) ++++>|              |\n      |                 |<+Port BINDs\
    \ created++|              |\n      |                 |                      |\
    \              |\n      |                 |++Create NAT Session  |           \
    \   |\n      |                 |  descriptors for     |              |\n     \
    \ |                 |  RTP2, RTCP2; Set    |              |\n      |         \
    \        |  parent session to   |              |\n      |                 |  SIP-ctrl\
    \ session ++>|              |\n      |                 |<+RTP2, RTCP2 session\
    \ |              |\n      |                 |  descriptors created+|         \
    \     |\n      |                 |                      |              |\n   \
    \   |              Modify the SDP            |              |\n      |       \
    \       parameters in \"200 OK\"    |              |\n      |              with\
    \ NAPT PORT-BIND       |              |\n      |              for the RTP2 port\
    \ on Ma.  |              |\n      |                 |                      | \
    \             |\n      |<---200 OK ------|                      |            \
    \  |\n      |                 |                      |              |\n      |-------ACK------>|\
    \                      |              |\n      |                 |           \
    \           |              |\n      |              Modify IP addresses       |\
    \              |\n      |              appropriately in the SIP  |           \
    \   |\n      |              header (e.g., To, from,   |              |\n     \
    \ |              Via, contact fields)      |              |\n      |         \
    \        |                      |..redirected..|\n      |                 |-----------ACK--------|------------->|\n\
    \      |                 |                      |              |\n      |    \
    \             |                      |              |\n      |<===================RTP/RTCP============|=============>|\n\
    \      |                 |                      |              |\n      |-------BYE------>|\
    \                      |              |\n      |                 |           \
    \           |              |\n      |                 |----------------------|-----BYE----->|\n\
    \      |                 |                      |              |\n      |    \
    \             |<----------200 OK--------------------|\n      |               \
    \  |                      |              |\n      |                 |+++Terminate\
    \ the SIP  |              |\n      |                 |   Session bundle +++>|\
    \              |\n      |                 |<++SIP Session bundle |           \
    \   |\n      |                 |   terminated ++++++++|              |\n     \
    \ |                 |                      |              |\n      |<---200 OK-------|\
    \                      |              |\n      |                 |           \
    \           |              |\n         Legend:      ++++    MIDCOM control traffic\n\
    \                      ----    SIP control traffic\n                      ====\
    \    RTP/RTCP media traffic\n"
- title: 7.3. Timeline flow - Middlebox implementing NAPT and firewall
  contents:
  - "7.3. Timeline flow - Middlebox implementing NAPT and firewall\n   In the following\
    \ example, we will assume a middlebox implementing a\n   combination of a firewall\
    \ and a stateful NAPT service.  We make the\n   assumption that the NAPT function\
    \ is configured to translate the IP\n   and TCP headers of the initial SIP session\
    \ into the private SIP\n   phone, and the firewall function is configured to permit\
    \ the initial\n   SIP session.\n   In the following time line, it may be noted\
    \ that the firewall\n   description is based on packet fields on the wire (ex:\
    \ as seen on the\n   external interface of the middlebox).  In order to ensure\
    \ correct\n   behavior of the individual services, you will notice that NAT\n\
    \   specific MIDCOM operations precede firewall specific operations on\n   the\
    \ MIDCOM agent.  This is noticeable in the time line below when the\n   MIDCOM\
    \ agent processes the \"200 OK\" from the private SIP phone.  The\n   MIDCOM agent\
    \ initially requests the NAT service on the middlebox to\n   set up port-BIND\
    \ and session-descriptors for the media stream in both\n   directions.  Subsequent\
    \ to that, the MIDCOM agent determines the\n   session parameters (i.e., the dynamic\
    \ UDP ports) for the media\n   stream, as viewed by the external interface and\
    \ requests the firewall\n   service on the middlebox to permit those sessions\
    \ through.\n      SIP Phone      SIP Proxy              Middlebox     SIP Phone\n\
    \      (External)     (MIDCOM agent)         (NAPT &       (Private)\n      IP\
    \ Addr:Ea        |                   firewall      IP addr:Pa\n      |       \
    \          |                   Services)         |\n      |                 |\
    \                   IP addr:Ma        |\n      |                 |           \
    \           |              |\n      |----INVITE------>|                      |\
    \              |\n      |                 |                      |           \
    \   |\n      |<---100Trying----|                      |              |\n     \
    \ |                 |                      |              |\n      |         \
    \        |++ Query Port-BIND    |              |\n      |                 |  \
    \ for (Ma, 5060) +++>|              |\n      |                 |<+ Port-BIND reply\
    \    |              |\n      |                 |   for (Ma, 5060) ++++|      \
    \        |\n      |                 |                      |              |\n\
    \      |                 |++ Query NAT Session  |              |\n      |    \
    \             |   Descriptor for     |              |\n      |               \
    \  |   Ea-to-Pa SIP flow+>|              |\n      |                 |<+ Ea-to-Pa\
    \ SIP flow  |              |\n      |                 |   Session Descriptor+|\
    \              |\n      |                 |                      |           \
    \   |\n      |              Determine the Internal    |              |\n     \
    \ |              IP address (Pa)           |              |\n      |         \
    \     of the callee.            |              |\n      |                 |  \
    \                    |              |\n      |              Identify UDP port\
    \ numbers |              |\n      |              on Ea (Eport1, Eport1+1)  | \
    \             |\n      |              for pri-to-ext RTP & RTCP |            \
    \  |\n      |              sessions (RTP1, RTCP1)    |              |\n      |\
    \                 |                      |              |\n      |           \
    \      |++Create NAT Session  |              |\n      |                 |  descriptors\
    \ for     |              |\n      |                 |  RTP1, RTCP1; Set the| \
    \             |\n      |                 |  parent session to   |            \
    \  |\n      |                 |  point to SIP flow++>|              |\n      |\
    \                 |<+RTP1, RTCP1 session |              |\n      |           \
    \      |  descriptors created+|              |\n      |                 |    \
    \                  |              |\n      |                 |++Permit RTP1 &\
    \ RTCP1 |              |\n      |                 |  sessions External to|   \
    \           |\n      |                 |  middlebox, namely   |              |\n\
    \      |                 |  Ma to Ea:Eport1,    |              |\n      |    \
    \             |  Ma to Ea:Eport1+1   |              |\n      |               \
    \  |  sessions ++++++++++>|              |\n      |                 |<+Ma to Ea:Eport1,\
    \    |              |\n      |                 |  Ma to Ea:Eport1+1   |      \
    \        |\n      |                 |  sessions OKed ++++++|              |\n\
    \      |                 |                      |              |\n      |    \
    \             |                      |..redirected..|\n      |               \
    \  |--------INVITE--------|------------->|\n      |                 |        \
    \              |              |\n      |                 |<-----180Ringing---------------------|\n\
    \      |                 |                      |              |\n      |<--180Ringing----|\
    \                      |              |\n      |                 |<-------200\
    \ OK-----------------------|\n      |                 |                      |\
    \              |\n      |              Identify UDP port numbers |           \
    \   |\n      |              on Pa (Pport2, Pport2+1)  |              |\n     \
    \ |              for ext-to-pri RTP & RTCP |              |\n      |         \
    \     sessions (RTP2, RTCP2)    |              |\n      |                 |  \
    \                    |              |\n      |                 |++Create consecutive\
    \  |              |\n      |                 |  port BINDs on Ma    |        \
    \      |\n      |                 |  for (Pa, Pport2),   |              |\n  \
    \    |                 |  (Pa, Pport2+1) ++++>|              |\n      |      \
    \           |<+Port BINDs created  |              |\n      |                 |\
    \  on Ma as (Mport2,   |              |\n      |                 |  Mport2+1)\
    \ ++++++++++|              |\n      |                 |                      |\
    \              |\n      |                 |++Create NAT Session  |           \
    \   |\n      |                 |  descriptors for     |              |\n     \
    \ |                 |  RTP2, RTCP2; Set the|              |\n      |         \
    \        |  parent session to   |              |\n      |                 |  point\
    \ to SIP flow++>|              |\n      |                 |<+RTP2, RTCP2 session\
    \ |              |\n      |                 |  descriptors created+|         \
    \     |\n      |                 |                      |              |\n   \
    \   |              Modify the SDP            |              |\n      |       \
    \       parameters in \"200 OK\"    |              |\n      |              with\
    \ NAPT PORT-BIND       |              |\n      |              for RTP2 port on\
    \ Ma.      |              |\n      |                 |                      |\
    \              |\n      |                 |++Permit RTP2 & RTCP2 |           \
    \   |\n      |                 |  sessions External   |              |\n     \
    \ |                 |  middlebox, namely   |              |\n      |         \
    \        |  Ea to Ma:Mport2,    |              |\n      |                 |  Ea\
    \ to Ma:Mport2+1   |              |\n      |                 |  sessions ++++++++++>|\
    \              |\n      |                 |<+Ea to Ma:Mport2,    |           \
    \   |\n      |                 |  Ea to Ma:Mport2     |              |\n     \
    \ |                 |  sessions OKed ++++++|              |\n      |         \
    \        |                      |              |\n      |<---200 OK ------|  \
    \                    |              |\n      |                 |             \
    \         |              |\n      |-------ACK------>|                      | \
    \             |\n      |                 |                      |..redirected..|\n\
    \      |                 |-----------ACK--------|------------->|\n      |    \
    \             |                      |              |\n      |               \
    \  |                      |              |\n      |<===================RTP/RTCP============|=============>|\n\
    \      |                 |                      |              |\n      |-------BYE------>|\
    \                      |              |\n      |                 |           \
    \           |              |\n      |                 |----------------------|-----BYE----->|\n\
    \      |                 |                      |              |\n      |    \
    \             |<----------200 OK--------------------|\n      |               \
    \  |                      |              |\n      |                 |+++Terminate\
    \ the SIP  |              |\n      |                 |   Session bundle +++>|\
    \              |\n      |                 |<++SIP Session bundle |           \
    \   |\n      |                 |   terminated ++++++++|              |\n     \
    \ |                 |                      |              |\n      |         \
    \        |++Cancel permits to   |              |\n      |                 |  sessions\
    \ External   |              |\n      |                 |  middlebox, namely  \
    \ |              |\n      |                 |  Ma to Ea:Eport1,    |         \
    \     |\n      |                 |  Ma to Ea:Eport1+1   |              |\n   \
    \   |                 |  Ea to Ma:Mport2,    |              |\n      |       \
    \          |  Ea to Ma:Mport2+1   |              |\n      |                 |\
    \  sessions ++++++++++>|              |\n      |                 |<+Removed permits\
    \ to  |              |\n      |                 |  sessions listed ++++|     \
    \         |\n      |                 |                      |              |\n\
    \      |<---200 OK-------|                      |              |\n      |    \
    \             |                      |              |\n         Legend:      ++++\
    \    MIDCOM control traffic\n                      ----    SIP control traffic\n\
    \                      ====    RTP/RTCP media traffic\n"
- title: 8.0. Operational considerations
  contents:
  - '8.0. Operational considerations

    '
- title: 8.1. Multiple MIDCOM sessions between agents and middlebox
  contents:
  - "8.1. Multiple MIDCOM sessions between agents and middlebox\n   A middlebox cannot\
    \ be assumed to be a simple device implementing just\n   one middlebox function\
    \ and no more than a couple of interfaces.\n   Middleboxes often combine multiple\
    \ intermediate functions into the\n   same device and have the ability to provision\
    \ individual interfaces\n   of the same device with different sets of functions\
    \ and varied\n   provisioning for the same function across the interfaces.\n \
    \  As such, a MIDCOM agent ought to be able to have a single MIDCOM\n   session\
    \ with a middlebox and use the MIDCOM interface on the\n   middlebox to interface\
    \ with different services on the same middlebox.\n"
- title: 8.2. Asynchronous notification to MIDCOM agents
  contents:
  - "8.2. Asynchronous notification to MIDCOM agents\n   Asynchronous notification\
    \ by the middlebox to a MIDCOM agent can be\n   useful for events such as Session\
    \ creation, Session termination,\n   MIDCOM protocol failure, middlebox function\
    \ failure or any other\n   significant event.  Independently, ICMP error codes\
    \ can also be\n   useful to notify transport layer failures to the agents.\n \
    \  In addition, periodic notification of various forms of data, such as\n   statistics\
    \ update, would also be a useful function that would be\n   beneficial to certain\
    \ types of agents.\n"
- title: 8.3. Timers on middlebox considered useful
  contents:
  - "8.3. Timers on middlebox considered useful\n   When supporting the MIDCOM protocol,\
    \ the middlebox is required to\n   allocate dynamic resources, as specified in\
    \ policy rule(s), upon\n   request from agents.  Explicit release of dynamically\
    \ allocated\n   resources happens when the application session is ended or when\
    \ a\n   MIDCOM agent requests the middlebox to release the resource.\n   However,\
    \ the middlebox should be able to recover the dynamically\n   allocated resources,\
    \ even as the agent that was responsible for the\n   allocation is not alive.\
    \  Associating a lifetime for these dynamic\n   resources and using a timer to\
    \ track the lifetime can be a good way\n   to accomplish this.\n"
- title: 8.4. Middleboxes supporting multiple services
  contents:
  - "8.4. Middleboxes supporting multiple services\n   A middlebox could be implementing\
    \ a variety of services (e.g. NAT and\n   firewall) in the same box.  Some of\
    \ these services might have inter-\n   dependency on shared resources and sequence\
    \ of operation.  Others may\n   be independent of each other.  Generally speaking,\
    \ the sequence in\n   which these function operations may be performed on datagrams\
    \ is not\n   within the scope of this document.\n   In the case of a middlebox\
    \ implementing NAT and firewall services, it\n   is safe to state that the NAT\
    \ operation on an interface will precede\n   a firewall on the egress and will\
    \ follow a firewall on the ingress.\n   Further, firewall access control lists,\
    \ used by a firewall, are\n   assumed to be based on session parameters, as seen\
    \ on the interface\n   supporting firewall service.\n"
- title: 8.5. Signaling and Data traffic
  contents:
  - "8.5. Signaling and Data traffic\n   The class of applications the MIDCOM architecture\
    \ addresses focus\n   around applications that have a combination of, one or more,\n\
    \   signaling and data traffic sessions.  The signaling may be done out-\n   of-band,\
    \ using a dedicated stand-alone session or may be done in-\n   band, within a\
    \ data session.  Alternately, signaling may also be done\n   as a combination\
    \ of both stand-alone and in-band sessions.\n   SIP is an example of an application\
    \ based on distinct signaling and\n   data sessions.  A SIP signaling session\
    \ is used for call setup\n   between a caller and a callee.  A MIDCOM agent may\
    \ be required to\n   examine/modify SIP payload content to administer the middlebox\
    \ so as\n   to let the media streams (RTP/RTCP based) through.  A MIDCOM agent\
    \ is\n   not required to intervene in the data traffic.\n   Signaling and context\
    \ specific Header information is sent in-band,\n   within the same data stream\
    \ for applications such as HTTP embedded\n   applications, sun-RPC (embedding\
    \ a variety of NFS apps), Oracle\n   transactions (embedding oracle SQL+, MS ODBC,\
    \ Peoplesoft) etc.\n   H.323 is an example of an application that sends signaling\
    \ in both\n   dedicated stand-alone sessions, as well as in conjunction with data.\n\
    \   H.225.0 call signaling traffic traverses middleboxes by virtue of\n   static\
    \ policy, no MIDCOM control needed.  H.225.0 call signaling also\n   negotiates\
    \ ports for an H.245 TCP stream.  A MIDCOM agent is required\n   to examine/modify\
    \ the contents of the H.245 so that H.245 can\n   traverse it.\n   H.245 traverses\
    \ the middlebox and also carries Open Logical Channel\n   information for media\
    \ data.  So, the MIDCOM agent is once again\n   required to examine/modify the\
    \ payload content needs to let the media\n   traffic flow.\n   The MIDCOM architecture\
    \ takes into consideration, supporting\n   applications with independent signaling\
    \ and data sessions as well as\n   applications that have signaling and data communicated\
    \ over the same\n   session.\n   In the cases where signaling is done on a single\
    \ stand-alone session,\n   it is desirable to have a MIDCOM agent interpret the\
    \ signaling stream\n   and program the middlebox (that transits the data stream)\
    \ so as to\n   let the data traffic through uninterrupted.\n"
- title: 9. Applicability Statement
  contents:
  - "9. Applicability Statement\n   Middleboxes may be stationed in a number of topologies.\
    \  However, the\n   signaling framework outlined in this document may be limited\
    \ to only\n   those middleboxes that are located in a DMZ (De-Militarized Zone)\
    \ at\n   the edge of a private domain, connecting to the Internet.\n   Specifically,\
    \ the assumption is that you have a single middlebox\n   (running NAT or firewall)\
    \ along the application route.  Discovery of\n   a middlebox along an application\
    \ route is outside the scope of this\n   document.  It is conceivable to have\
    \ middleboxes located between\n   departments within the same domain or inside\
    \ the service provider's\n   domain and so forth.  However, care must be taken\
    \ to review each\n   individual scenario and determine the applicability on a\
    \ case-by-case\n   basis.\n   The applicability may also be illustrated as follows.\
    \  Real-time and\n   streaming applications, such as Voice-Over-IP, and peer-to-peer\n\
    \   applications, such as Napster and Netmeeting, require administering\n   firewalls\
    \ and NAT middleboxes to let their media streams reach hosts\n   inside a private\
    \ domain.  The requirements are in the form of\n   establishing a \"pin-hole\"\
    \ to permit a TCP/UDP session (the port\n   parameters of which are dynamically\
    \ determined) through a firewall or\n   retain an address/port bind in the NAT\
    \ device to permit sessions to a\n   port.  These requirements are met by current\
    \ generation middleboxes\n   using adhoc methods, such as embedding application\
    \ intelligence\n   within a middlebox to identify the dynamic session parameters\
    \ and\n   administering the middlebox internally as appropriate.  The objective\n\
    \   of the MIDCOM architecture is to create a unified, standard way to\n   exercise\
    \ this functionality, currently existing in an ad-hoc fashion,\n   in some of\
    \ the middleboxes.\n   By adopting MIDCOM architecture, middleboxes will be able\
    \ to support\n   newer applications they have not been able to support thus far.\n\
    \   MIDCOM architecture does not, and must not in anyway, change the\n   fundamental\
    \ characteristic of the services supported on the\n   middlebox.\n   Typically,\
    \ organizations shield a majority of their corporate\n   resources (such as end-hosts)\
    \ from visibility to the external network\n   by the use of a De-Militarized Zone\
    \ (DMZ) at the domain edge.  Only a\n   portion of these hosts are allowed to\
    \ be accessed by the external\n   world.  The remaining hosts and their names\
    \ are unique to the private\n   domain.  Hosts visible to the external world and\
    \ the authoritative\n   name server that maps their names to network addresses\
    \ are often\n   configured within a DMZ (De-Militarized Zone) in front of a firewall.\n\
    \   Hosts and middleboxes within DMZ are referred to as DMZ nodes.\n   Figure\
    \ 4 below illustrates the configuration of a private domain with\n   a DMZ at\
    \ its edge.  Actual configurations may vary.  Internal hosts\n   are accessed\
    \ only by users inside the domain.  Middleboxes, located\n   in the DMZ may be\
    \ accessed by agents inside or outside the domain.\n                         \
    \             \\ | /\n                              +-----------------------+\n\
    \                              |Service Provider Router|\n                   \
    \           +-----------------------+\n                               WAN  |\n\
    \                  Stub A .........|\\|....\n                                \
    \  |\n                        +---------------+\n                        | NAT\
    \ middlebox |\n                        +---------------+\n                   \
    \         |\n                            |   DMZ - Network\n      ------------------------------------------------------------\n\
    \         |         |              |            |             |\n        +--+\
    \      +--+           +--+         +--+      +-----------+\n        |__|     \
    \ |__|           |__|         |__|      | Firewall  |\n       /____\\    /____\\\
    \         /____\\       /____\\     | middlebox |\n      DMZ-Host1  DMZ-Host2\
    \ ...  DMZ-Name     DMZ-Web    +-----------+\n                               \
    \ Server       Server etc.   |\n                                             \
    \              |\n        Internal Hosts (inside the private domain)         |\n\
    \      ------------------------------------------------------------\n        \
    \  |             |                 |           |\n         +--+         +--+ \
    \              +--+       +--+\n         |__|         |__|               |__|\
    \       |__|\n        /____\\       /____\\             /____\\     /____\\\n\
    \       Int-Host1    Int-Host2  .....   Int-Hostn   Int-Name Server\n       Figure\
    \ 4: DMZ network configuration of a private domain.\n"
- title: 10. Acknowledgements
  contents:
  - "10. Acknowledgements\n   The authors wish to thank Christian Huitema, Joon Maeng,\
    \ Jon\n   Peterson, Mike Fisk, Matt Holdrege, Melinda Shore, Paul Sijben,\n  \
    \ Philip Mart, Scott Brim and Richard Swale for their valuable\n   critique, advice\
    \ and input on an earlier rough version of this\n   document.  The authors owe\
    \ special thanks to Eliot Lear for kick-\n   starting the e-mail discussion on\
    \ use-case scenarios with a SIP\n   application flow diagram through a middlebox.\
    \  Much thanks to Bob\n   Penfield, Cedric Aoun, Christopher Martin, Eric Fleischman,\
    \ George\n   Michaelson, Wanqun Bao, and others in the MIDCOM work group for their\n\
    \   very detailed feedback on a variety of topics and adding clarity to\n   the\
    \ discussion.  Last, but not the least, the authors owe much thanks\n   to Mark\
    \ Duffy, Scott Brim, Melinda Shore and others for their help\n   with terminology\
    \ definition and discussing the embedded requirements\n   within the framework\
    \ document.\n"
- title: 11. Security Considerations
  contents:
  - "11. Security Considerations\n   Discussed below are security considerations in\
    \ accessing a middlebox.\n   Without MIDCOM protocol support, the premise of a\
    \ middlebox operation\n   fundamentally requires the data to be in the clear,\
    \ as the middlebox\n   needs the ability to inspect and/or modify packet headers\
    \ and\n   payload.  This compromises the confidentiality requirement in some\n\
    \   environments.  Further, updating transport headers and rewriting\n   application\
    \ payload data, in some cases, by NAT prevents the use of\n   integrity protection\
    \ on some data streams traversing NAT middleboxes.\n   Clearly, this can pose\
    \ a significant security threat to the\n   application in an untrusted transport\
    \ domain.\n   The MIDCOM protocol framework removes the need for a middlebox to\n\
    \   inspect or manipulate transport payload.  This allows applications to\n  \
    \ better protect themselves end-to-end with the aid of a trusted MIDCOM\n   agent.\
    \  This is especially the case when the agent is a resident on\n   the end-host.\
    \  When an agent has the same end-to-end ability as the\n   end-host to interpret\
    \ encrypted and integrity protected data,\n   transiting a middlebox can be encrypted\
    \ and integrity protected.  The\n   MIDCOM agent will still be able to interpret\
    \ the data and simply\n   notify the middlebox of open holes, install NAT table\
    \ entries, etc.\n   Note, however, the MIDCOM framework does not help with the\
    \ problem of\n   NAT breaking IPsec since in this case the middlebox still modifies\
    \ IP\n   and transport headers.\n   Security between a MIDCOM agent and a middlebox\
    \ has a number of\n   components.  Authorization, authentication, integrity and\n\
    \   confidentiality.  Authorization refers to whether a particular agent\n   is\
    \ authorized to signal a middlebox with requests for one or more\n   applications,\
    \ adhering to a certain policy profile.  Failing the\n   authorization process\
    \ might indicate a resource theft attempt or\n   failure due to administrative\
    \ and/or credential deficiencies.  In\n   either case, the middlebox should take\
    \ the proper measures to\n   audit/log such attempts and consult its designated\
    \ MIDCOM PDP for the\n   required action if the middlebox is configured with one.\n\
    \   Alternatively, the middlebox may resort to a default service deny\n   policy\
    \ when a MIDCOM agent fails to prompt the required credentials.\n   Section 6\
    \ discusses the middlebox to MIDCOM PDP interactions in view\n   of policy decisions.\n\
    \   Authentication refers to confirming the identity of an originator for\n  \
    \ all datagrams received from the originator.  Lack of strong\n   credentials\
    \ for authentication of MIDCOM messages between an agent\n   and a middlebox can\
    \ seriously jeopardize the fundamental service\n   rendered by the middlebox.\
    \  A consequence of not authenticating an\n   agent would be that an attacker\
    \ could spoof the identity of a\n   \"legitimate\" agent and open holes in the\
    \ firewall.  Another would be\n   that it could otherwise manipulate the state\
    \ on a middlebox, creating\n   a denial-of-service attack by closing needed pinholes\
    \ or filling up a\n   NAT table.  A consequence of not authenticating the middlebox\
    \ to an\n   agent is that an attacker could pose as a middlebox and respond to\n\
    \   NAT requests in a manner that would divert data to the attacker.\n   Failing\
    \ to submit the required/valid credentials, once challenged,\n   may indicate\
    \ a replay attack, in which case a proper action is\n   required by the middlebox\
    \ such as auditing, logging, or consulting\n   its designated MIDCOM PDP to reflect\
    \ such failure.  A consequence of\n   not protecting the middlebox against replay\
    \ attacks would be that a\n   specific pinhole may be reopened or closed by an\
    \ attacker at will,\n   thereby bombarding end hosts with unwarranted data or\
    \ causing denial\n   of service.\n   Integrity is required to ensure that a MIDCOM\
    \ message has not been\n   accidentally or maliciously altered or destroyed. \
    \ The result of a\n   lack of data integrity enforcement in an untrusted environment\
    \ could\n   be that an imposter will alter the messages sent by an agent and\n\
    \   bring the middlebox to a halt or cause a denial of service for the\n   application\
    \ the agent is attempting to enable.\n   Confidentiality of MIDCOM messages ensure\
    \ that the signaling data is\n   accessible only to the authorized entities. \
    \ When a middlebox agent\n   is deployed in an untrusted environment, lack of\
    \ confidentiality will\n   allow an intruder to perform traffic flow analysis\
    \ and snoop the\n   middlebox.  The intruder could cannibalize a lesser secure\
    \ MIDCOM\n   session and destroy or compromise the middlebox resources he\n  \
    \ uncovered on other sessions.  Needless to say, the least secure\n   MIDCOM session\
    \ will become the achilles heel and make the middlebox\n   vulnerable to security\
    \ attacks.\n   Lastly, there can be security vulnerability to the applications\n\
    \   traversing a middlebox when a resource on a middlebox is controlled\n   by\
    \ multiple external agents.  A middlebox service may be disrupted\n   due to conflicting\
    \ directives from multiple agents associated with\n   different middlebox functions\
    \ but applied to the same application\n   session.  Care must be taken in the\
    \ protocol design to ensure that\n   agents for one function do not abruptly step\
    \ over resources impacting\n   a different function.  Alternately, the severity\
    \ of such\n   manifestations could be lessened when a single MIDCOM agent is\n\
    \   responsible for supporting all the middlebox services for an\n   application,\
    \ due to the reduced complexity and synchronization effort\n   in managing the\
    \ middlebox resources.\n"
- title: References
  contents:
  - "References\n   [SIP]       Rosenberg, J., Shulzrinne, H., Camarillo, G., Johnston,\n\
    \               A., Peterson, J., Sparks, R., Handley, M., Schooler, E.,\n   \
    \            \"SIP: Session Initiation Protocol\", RFC 3261, June 2002.\n   [SDP]\
    \       Handley, M. and V. Jacobson, \"SDP: Session Description\n            \
    \   Protocol\", RFC 2327, April 1998.\n   [H.323]     ITU-T Recommendation H.323.\
    \ \"Packet-based Multimedia\n               Communications Systems,\" 1998.\n\
    \   [RTP]       Schulzrinne, H., Casner, S., Frederick, R. and V.\n          \
    \     Jacobson, \"RTP: A Transport Protocol for Real-Time\n               Applications\"\
    , RFC 1889, January 1996.\n   [RTSP]      Schulzrinne, H., Rao, A. and R. Lanphier:\
    \ \"Real Time\n               Streaming Protocol (RTSP)\", RFC 2326, April 1998.\n\
    \   [FTP]       Postel, J. and J. Reynolds, \"File Transfer Protocol\", STD\n\
    \               9, RFC 959, October 1985.\n   [NAT-TERM]  Srisuresh, P. and M.\
    \ Holdrege, \"IP Network Address\n               Translator (NAT) Terminology\
    \ and Considerations\", RFC\n               2663, August 1999.\n   [NAT-TRAD]\
    \  Srisuresh, P. and K. Egevang, \"Traditional IP Network\n               Address\
    \ Translator (Traditional NAT)\", RFC 3022, January\n               2001.\n  \
    \ [NAT-PT]    Tsirtsis, G. and P. Srisuresh, \"Network Address\n             \
    \  Translation - Protocol Translation (NAT-PT)\", RFC 2766,\n               February\
    \ 2000.\n   [IPsec-AH]  Kent, S. and R. Atkinson, \"IP Authentication Header\"\
    , RFC\n               2402, November 1998.\n   [IPsec-ESP] Kent, S. and R. Atkinson,\
    \ \"IP Encapsulating Security\n               Payload (ESP)\", RFC 2406, November\
    \ 1998.\n   [TLS]       Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\"\
    ,\n               RFC 2246, January 1999.\n   [POL-TERM]  Westerinen, A., Schnizlein,\
    \ J., Strassner, J., Scherling,\n               M., Quinn, B., Herzog, S., Huynh,\
    \ A., Carlson, M., Perry,\n               J. and S. Waldbusser, \"Terminology\
    \ for Policy-Based\n               Management\", RFC 3198, November 2001.\n  \
    \ [REQMTS]    Swale, R. P., Mart, P. A., Sijben, P., Brim, S. and M.\n       \
    \        Shore, \"Middlebox Communications (midcom) Protocol\n               Requirements\"\
    , RFC 3304, August 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Pyda Srisuresh\n   Kuokoa Networks, Inc.\n   475 Potrero\
    \ Ave.\n   Sunnyvale, CA 94085\n   EMail: srisuresh@yahoo.com\n   Jiri Kuthan\n\
    \   Fraunhofer Institute FOKUS\n   Kaiserin-Augusta-Allee 31\n   D-10589 Berlin,\
    \ Germany\n   EMail: kuthan@fokus.fhg.de\n   Jonathan Rosenberg\n   dynamicsoft\n\
    \   72 Eagle Rock Avenue\n   First Floor\n   East Hanover, NJ 07936\n   U.S.A.\n\
    \   EMail: jdrosen@dynamicsoft.com\n   Andrew Molitor\n   Aravox technologies\n\
    \   4201 Lexington Avenue North, Suite 1105\n   Arden Hills, MN 55126\n   U.S.A.\n\
    \   voice: (651) 256-2700\n   EMail: amolitor@visi.com\n   Abdallah Rayhan\n \
    \  WINCORE Lab\n   Electrical and Computer Engineering\n   Ryerson University\n\
    \   350 Victoria Street\n   Toronto, ON M5B 2K3\n   EMail: rayhan@ee.ryerson.ca,\
    \ ar_rayhan@yahoo.ca\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
