- title: __initial_text__
  contents:
  - '                    TCP and UDP over IPv6 Jumbograms

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: 1.  Overview
  contents:
  - "1.  Overview\n   IPv6 supports datagrams larger than 65535 bytes long, often\
    \ referred\n   to as jumbograms, through use of the Jumbo Payload hop-by-hop option\n\
    \   [Deering95].  The UDP protocol has a 16-bit length field that keeps\n   it\
    \ from being able to make use of jumbograms, and though TCP does not\n   have\
    \ a length field, both the MSS option and the Urgent field are\n   constrained\
    \ by 16-bits.  This document describes some simple changes\n   that can be made\
    \ to allow TCP and UDP to make use of IPv6 jumbograms.\n"
- title: 2.  UDP Jumbograms
  contents:
  - "2.  UDP Jumbograms\n   To allow UDP to make use of jumbograms, either the UDP\
    \ length field\n   needs to be extended, or it needs to be ignored.  Since the\
    \ size of\n   the field can't be changed, a length of zero is used to indicate\
    \ that\n   it is to be ignored, and the length in the \"pseudo-header\" is to\
    \ be\n   used to determine the true length of the UDP header plus data.  This\n\
    \   works because UDP length field includes the UDP header, so the\n   minimum\
    \ valid value for this field is 8.\n   When sending a UDP packet, if and only\
    \ if the length of the UDP\n   header plus data is greater than 65,535, set the\
    \ length field in the\n   UDP header to zero.\n      Note 1:  The length used\
    \ in the \"pseudo-header\" for computing the\n      UDP checksum is always the\
    \ true length of the UDP header plus\n      data, NOT zero [RFC-1883, Section\
    \ 8.1].\n      Note 2:  An IPv6 packet that carries a UDP packet of length\n \
    \     greater than 65,535 will necessarily carry a Jumbo Payload option\n    \
    \  in a Hop-by-Hop Options header [RFC1883, Section 4.3]).  The\n      length\
    \ field in the Jumbo Payload option contains the length of\n      the IP packet\
    \ excluding the IPv6 header, that is, it contains the\n      length of all extension\
    \ headers present plus the UDP header plus\n      the UDP data.  The length field\
    \ in the IPv6 header contains zero\n      to indicate the presence of the Jumbo\
    \ Payload option.\n   If a UDP packet is received with a length field of zero,\
    \ the length\n   of the UDP packet is computed from the length field in the Jumbo\n\
    \   Payload option minus the length of all extension headers present\n   between\
    \ the IPv6 header and the UDP header.\n"
- title: 3.  TCP Jumbograms
  contents:
  - "3.  TCP Jumbograms\n   Because there is no length field in the TCP header, there\
    \ is nothing\n   limiting the length of an individual TCP packet.  However, the\
    \ MSS\n   value that is negotiated at the beginning of the connection limits\n\
    \   the largest TCP packet that can be sent, and the Urgent Pointer\n   cannot\
    \ reference data beyond 65535 bytes.\n"
- title: 3.1 TCP MSS
  contents:
  - "3.1 TCP MSS\n   When determining what MSS value to send, if the MTU of the directly\n\
    \   attached interface is greater than 65535, then set the MSS value to\n   65535.\n\
    \   When an MSS value of 65535 is received, it is to be treated as\n   infinity.\
    \  MTU discovery code, starting with the MTU of the outgoing\n   interface, will\
    \ be used to determine the actual MSS.\n"
- title: 3.2 TCP Urgent Pointer
  contents:
  - "3.2 TCP Urgent Pointer\n   The Urgent Pointer problem could be fixed by adding\
    \ a TCP Urgent\n   Pointer Option.  However, since it is unlikely that applications\n\
    \   using jumbograms will also use Urgent Pointers, a less intrusive\n   change\
    \ similar to the MSS change will suffice.\n   When a TCP packet is to be sent\
    \ with an Urgent Pointer (i.e., the URG\n   bit set), first calculate the offset\
    \ from the Sequence Number to the\n   Urgent Pointer.  If the offset is less than\
    \ 65535, fill in the Urgent\n   field and continue with the normal TCP processing.\
    \  If the offset is\n   greater than 65535, and the offset is greater than or\
    \ equal to the\n   length of the TCP data, fill in the Urgent Pointer with 65535\
    \ and\n   continue with the normal TCP processing.  Otherwise, the TCP packet\n\
    \   must be split into two pieces.  The first piece contains data up to,\n   but\
    \ not including the data pointed to by the Urgent Pointer, and the\n   Urgent\
    \ field is set to 65535 to indicate that the Urgent Pointer is\n   beyond the\
    \ end of this packet.  The second piece can then be sent\n   with the Urgent field\
    \ set normally.\n      Note: The first piece does not have to include all of the\
    \ data up\n      to the Urgent Pointer.  It can be shorter, just as long as it\
    \ ends\n      within 65534 bytes of the Urgent Pointer, so that the offset to\n\
    \      the Urgent Pointer in the second piece will be less than 65535\n      bytes.\n\
    \   For TCP input processing, when a TCP packet is received with the URG\n   bit\
    \ set and an Urgent field of 65535, the Urgent Pointer is\n   calculated using\
    \ an offset equal to the length of the TCP data,\n   rather than the offset in\
    \ the Urgent field.\n   It should also be noted that though the TCP window is\
    \ only 16-bits,\n   larger windows can be used through use of the TCP Window Scale\
    \ option\n   [Jacobson92].\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   There are no known security issues involved in\
    \ these changes.\n"
- title: 5.  References
  contents:
  - "5.  References\n   [Jacobson92] Jacobson, V., R. Braden and D. Borman, \"TCP\
    \ Extensions\n   for High Performance\", RFC 1323, LBL, ISI and Cray Research,\
    \ May\n   1992.\n   [Deering95] Deering, S. and R. Hinden, \"Internet Protocol,\
    \ Version 6\n   (IPv6) Specification\", RFC 1883, Xerox PARC and Ipsilon Networks,\n\
    \   December 1995.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   David A. Borman\n   Berkeley Software Design, Inc.\n   4719\
    \ Weston Hills Drive\n   Eagan, MN 55123\n   Phone: (612) 405-8194\n   Mailing\
    \ List: ipng@sunroof.Eng.Sun.COM\n   Email: dab@bsdi.com\n"
