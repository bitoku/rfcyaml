Abstract This document defines a generic profile for signed objects used in the Resource Public Key Infrastructure (RPKI).
These RPKI signed objects make use of Cryptographic Message Syntax (CMS) as a standard encapsulation format.
The purpose of the Resource Public Key Infrastructure (RPKI) is to support assertions by current resource holders of IP (v4 and v6) address space and AS numbers, based on the records of organizations that act as Certification Authorities (CAs).
IP address and AS number resource information is carried in X.509 certificates via RFC 3779 extensions [RFC6487].
Other information assertions about resources are expressed via digitally signed, non X.509 data structures that are referred to as "signed objects" in the RPKI context [RFC6480].
This document standardizes a template for specifying signed objects that can be validated using the RPKI.
RPKI signed objects make use of Cryptographic Message Syntax (CMS)
[RFC5652] as a standard encapsulation format.
CMS was chosen to take advantage of existing open source software available for processing messages in this format.
RPKI signed objects adhere to a profile (specified in Section 2) of the CMS signed data object.
The template defined in this document for RPKI signed objects is not a complete specification for any particular type of signed object, and instead includes only the items that are common to all RPKI signed objects.
That is, fully specifying a particular type of signed object requires an additional document that specifies the details specific to a particular type of signed object.
Such details include Abstract Syntax Notation One (ASN.1)
[X.208 88] for the object's payload and any additional steps required to validate the particular type of signed object.
Section 4 describes in more detail the additional pieces that must be specified in order to define a new type of RPKI signed object that uses this template.
Additionally, see [RFC6482] for an example of a document that uses this template to specify a particular type of signed object, the Route Origination Authorization (ROA).
It is assumed that the reader is familiar with the terms and concepts described in "Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile" [RFC5280], "X.509 Extensions for IP Addresses and AS Identifiers" [RFC3779], and "Cryptographic Message Syntax (CMS)" [RFC5652].
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
Note on Algorithms CMS is a general format capable of accommodating a wide variety of signature and digest algorithms.
The algorithms used in the RPKI (and associated key sizes) are specified in [RFC6485].
The RPKI signed object is a profile of the CMS [RFC5652] signed data object, with the restriction that RPKI signed objects MUST be encoded using the ASN.1 Distinguished Encoding Rules (DER) [X.509 88].
The general format of a CMS object is: ContentInfo ::
SEQUENCE { contentType ContentType, content [0]
The content type is the signed data type of id data, namely the
id signedData OID [RFC5652], 1.2.840.113549.1.7.2.
Additionally, the SignerInfos set MUST contain only a single SignerInfo object.
The version is the syntax version number.
It MUST be 3, corresponding to the signerInfo structure having version number 3.
The digestAlgorithms set contains the OIDs of the digest algorithm(s) used in signing the encapsulated content.
This set MUST contain exactly one digest algorithm OID, and the OID MUST be selected from those specified in [RFC6485].
encapContentInfo encapContentInfo is the signed content, consisting of a content type identifier and the content itself.
The encapContentInfo represents the payload of the RPKI signed object.
This field is left undefined by this profile.
The eContentType is an OID specifying the type of payload in this signed object and MUST be specified by the Internet Standards Track document that defines the object.
This field is left undefined by this profile.
The eContent is the payload of the signed object and MUST be specified by the Internet Standards Track document that defines the RPKI object.
Note that the signed object profile does not provide version numbers for signed objects.
Therefore, in order to facilitate transition to new versions of the signed objects over time, it is RECOMMENDED that each type of signed object defined using this profile include a version number within its eContent.
certificates The certificates field MUST be included, and MUST contain exactly one certificate
, the RPKI end entity (EE) certificate needed to validate this signed object.
The crls field MUST be omitted.
The version number MUST be 3, corresponding with the choice of SubjectKeyIdentifier for the sid.
The sid is defined as:
For RPKI signed objects, the sid MUST be the SubjectKeyIdentifier that appears in the EE certificate carried in the CMS certificates field.
The digestAlgorithm MUST consist of the OID of a digest algorithm that conforms to the RPKI Algorithms and Key Size Profile specification [RFC6485].
OF AttributeValue } AttributeValue ::
ANY The signedAttrs element MUST be present and MUST include the content  type and message digest attributes [RFC5652].
The signer MAY also include the signing time attribute [RFC5652], the binary signing time attribute [RFC6019], or both attributes.
Other signed attributes MUST NOT be included.
The signedAttrs element MUST include only a single instance of any particular attribute.
Additionally, even though the syntax allows for a SET OF AttributeValue, in an RPKI signed object, the attrValues MUST consist of only a single AttributeValue.
The content type attribute MUST be present.
The attrType OID for the content type attribute is 1.2.840.113549.1.9.3.
The attrValues for the content type attribute MUST match the eContentType in the EncapsulatedContentInfo.
Thus, attrValues MUST contain the OID that specifies the payload type of the specific RPKI signed object carried in the CMS signed data structure.
The message digest attribute MUST be present.
The attrType OID for the message digest attribute is 1.2.840.113549.1.9.4.
The attrValues for the message digest attribute contains the output of the digest algorithm applied to the content being signed, as specified in Section 5.4 of [RFC5652].
The signing time attribute MAY be present.
Note that the presence or absence of the signing time attribute MUST NOT affect the validity of the signed object (as specified in Section 3).
The attrType OID for the signing time attribute is 1.2.840.113549.1.9.5.
} The Time element specifies the time, based on the local system clock, at which the digital signature was applied to the content.
The definition of Time matches the one specified in the 1997 version of X.509.
Additional information regarding the use of UTCTime and GeneralizedTime can be found in [RFC5652].
The binary signing time attribute MAY be present.
Note that the presence or absence of the binary signing time attribute MUST NOT affect the validity of the signed object (as specified in Section 3).
The attrType OID for the binary signing time attribute is 1.2.840.113549.1.9.16.2.46.
The BinaryTime element specifies the time, based on the local system clock, at which the digital signature was applied to the content.
The precise definition of the BinaryTime element can be found in [RFC6019].
The signatureAlgorithm MUST conform to the RPKI Algorithms and Key Size Profile specification [RFC6485].
The signature characteristics are defined by the digest and signature algorithms.
unsignedAttrs unsignedAttrs MUST be omitted.
Before a relying party can use a signed object, the relying party MUST validate the signed object by verifying that all of the following conditions hold.
A relying party may perform these checks in any order.
Note that these checks are necessary, but not sufficient.
In general, further validation MUST be performed based on the specific type of signed object.
The signed object syntax complies with this specification.
In particular, each of the following is true: a.
The content type of the CMS object is SignedData (OID 1.2.840.113549.1.7.2)
The version of the SignedData object is 3.
The certificates field in the SignedData object is present and contains one EE certificate, the SubjectKeyIdentifier field of which matches the sid field of the SignerInfo object.
The crls field in the SignedData object is omitted.
The version of the SignerInfo is 3.
The signedAttrs field in the SignerInfo object is present and contains both the content type attribute (OID 1.2.840.113549.1.9.3) and the message digest attribute (OID 1.2.840.113549.1.9.4).
The signedAttrs field in the SignerInfo object does not contain any attributes other than the following four: the content type attribute (OID 1.2.840.113549.1.9.3), the message digest attribute (OID 1.2.840.113549.1.9.4), the signing time attribute (OID 1.2.840.113549.1.9.5), and the binary signing time attribute (OID 1.2.840.113549.1.9.16.2.46).
Note that the signing time and binary signing time attributes MAY be present, but they are not required.
The eContentType in the EncapsulatedContentInfo is an OID that matches the attrValues in the content type attribute.
The unsignedAttrs field in the SignerInfo object is omitted.
The digestAlgorithm in the SignedData and SignerInfo objects conforms to the RPKI Algorithms and Key Size Profile specification [RFC6485].
The signatureAlgorithm in the SignerInfo object conforms to the RPKI Algorithms and Key Size Profile specification [RFC6485].
The signed object is DER encoded.
The public key of the EE certificate (contained within the CMS signed data object) can be used to successfully verify the signature on the signed object.
The EE certificate (contained within the CMS signed data object) is a valid EE certificate in the RPKI as specified by [RFC6487].
In particular, a valid certification path from a trust anchor to this EE certificate exists.
If the above procedure indicates that the signed object is invalid, then the signed object MUST be discarded and treated as though no signed object were present.
If all of the conditions above are true, then the signed object may be valid.
The relying party MUST then perform any additional validation steps required for the particular type of signed object.
Note that a previously valid signed object will cease to be valid when the associated EE certificate ceases to be valid (for example, when the end of the certificate's validity period is reached, or when the certificate is revoked by the authority that issued it).
See [RFC6487] for a complete specification of resource certificate validity.
Definition of Specific Signed Objects Each RPKI signed object MUST be defined in an Internet Standards Track document based on this profile, by specifying the following data elements and validation procedure: 1.
A single OID to be used for both the eContentType field and the content type attribute.
This OID uniquely identifies the type of signed object.
Define the syntax for the eContent field in encapContentInfo.
This is the payload that contains the data specific to a given type of signed object.
Additional Validation:  Define a set of additional validation steps for the specific signed object.
Before using this specific signed object, a relying party MUST perform both the generic validation steps in Section 3 above, as well as these additional steps.
There is no assumption of confidentiality for the data in an RPKI signed object.
The integrity and authenticity of each signed object is based on the verification of the object's digital signature, and the validation of the EE certificate used to perform that verification.
It is anticipated that signed objects will be stored in repositories that will be publicly accessible.
Since RPKI signed objects make use of CMS as an encapsulation format, the security considerations for CMS apply [RFC5652].
IANA Considerations IANA has created a registry of "RPKI Signed Objects" types that utilize the template defined in this document.
This registry contains three fields: an informal name for the signed object, the OID for the eContentType of the signed object, and a specification pointer that references the RFC in which the signed object is specified.
The entries in this registry are managed by IETF Standards Action.
The registry has been initially populated with the following two entries.
RFC 6482 Manifest    1.2.840.113549.1.9.16.1.26    RFC 6486
