- title: __initial_text__
  contents:
  - '     Analysis of Solution Proposals for Hosts to Learn NAT64 Prefix

    '
- title: Abstract
  contents:
  - "Abstract\n   Hosts and applications may benefit from learning if an IPv6 address\n\
    \   is synthesized and if NAT64 and DNS64 are present in a network.  This\n  \
    \ document analyzes all proposed solutions (known at the time of\n   writing)\
    \ for communicating whether the synthesis is taking place,\n   what address format\
    \ was used, and what IPv6 prefix was used by the\n   NAT64 and DNS64.  These solutions\
    \ enable both NAT64 avoidance and\n   local IPv6 address synthesis.  The document\
    \ concludes by recommending\n   the standardization of the approach based on heuristic\
    \ discovery.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7051.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................4\n  \
    \ 3. Issues ..........................................................5\n   4.\
    \ Background ......................................................6\n   5. Proposed\
    \ Solutions to Learn about Synthesis and\n      Network-Specific Prefix .........................................7\n\
    \      5.1. DNS Query for a Well-Known Name ............................7\n  \
    \         5.1.1. Solution Description ................................7\n    \
    \       5.1.2. Analysis and Discussion .............................7\n      \
    \     5.1.3. Summary .............................................8\n      5.2.\
    \ EDNS0 Option Indicating AAAA Record Synthesis and Format ...8\n           5.2.1.\
    \ Solution Description ................................8\n           5.2.2. Analysis\
    \ and Discussion .............................9\n           5.2.3. Summary ............................................10\n\
    \      5.3. EDNS0 Flags Indicating AAAA Record Synthesis and Format ...10\n  \
    \         5.3.1. Solution Description ...............................10\n    \
    \       5.3.2. Analysis and Discussion ............................10\n      \
    \     5.3.3. Summary ............................................11\n      5.4.\
    \ DNS Resource Record for IPv4-Embedded IPv6 Address ........11\n           5.4.1.\
    \ Solution Description ...............................11\n           5.4.2. Analysis\
    \ and Discussion ............................12\n           5.4.3. Summary ............................................12\n\
    \      5.5. Learning the IPv6 Prefix of a Network's NAT64 Using DNS ...13\n  \
    \         5.5.1. Solution Description ...............................13\n    \
    \       5.5.2. Analysis and Discussion ............................13\n      \
    \     5.5.3. Summary ............................................14\n      5.6.\
    \ Learning the IPv6 Prefix of a Network's NAT64\n           Using DHCPv6 ..............................................14\n\
    \           5.6.1. Solution Description ...............................14\n  \
    \         5.6.2. Analysis and Discussion ............................15\n    \
    \       5.6.3. Summary ............................................15\n      5.7.\
    \ Learning the IPv6 Prefix of a Network's NAT64\n           Using Router ..............................................16\n\
    \           5.7.1. Solution Description ...............................16\n  \
    \         5.7.2. Analysis and Discussion ............................16\n    \
    \       5.7.3. Summary ............................................17\n      5.8.\
    \ Using Application-Layer Protocols such as STUN ............17\n           5.8.1.\
    \ Solution Description ...............................17\n           5.8.2. Analysis\
    \ and Discussion ............................17\n           5.8.3. Summary ............................................19\n\
    \      5.9. Learning the IPv6 Prefix of a Network's NAT64\n           Using Access-Technology-Specific\
    \ Methods ..................19\n           5.9.1. Solution Description ...............................19\n\
    \           5.9.2. Analysis and Discussion ............................19\n  \
    \         5.9.3. Summary ............................................20\n   6.\
    \ Conclusion .....................................................20\n   7. Security\
    \ Considerations ........................................21\n   8. Contributors\
    \ ...................................................22\n   9. Acknowledgements\
    \ ...............................................22\n   10. References ....................................................22\n\
    \      10.1. Normative References .....................................22\n  \
    \    10.2. Informative References ...................................23\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Hosts and applications may benefit from learning if an IPv6\
    \ address\n   is synthesized, which would mean that a NAT64 is used to reach the\n\
    \   IPv4 network or Internet.  There are two issues that can be addressed\n  \
    \ with solutions that allow hosts and applications to learn the\n   Network-Specific\
    \ Prefix (NSP) [RFC6052] used by the NAT64 [RFC6146]\n   and the DNS64 [RFC6147]\
    \ devices.\n   The first issue is finding out whether a particular address is\n\
    \   synthetic and therefore learning the presence of a NAT64.  For\n   example,\
    \ a dual-stack host with IPv4 connectivity could use this\n   information to bypass\
    \ NAT64 and use native IPv4 transport for\n   destinations that are reachable\
    \ through IPv4.  We will refer this as\n   'Issue #1' throughout the document.\n\
    \   The second issue is finding out how to construct from an IPv4 address\n  \
    \ an IPv6 address that will be routable to/by the NAT64.  This is\n   useful when\
    \ IPv4 literals can be found in the payload of some\n   protocol or applications\
    \ do not use DNS to resolve names to addresses\n   but know the IPv4 address of\
    \ the destination by some other means.  We\n   will refer this as 'Issue #2' throughout\
    \ the document.\n   Additionally, three other issues have to be considered by\
    \ a solution\n   addressing the first two issues: whether DNS is required ('Issue\n\
    \   #3'), whether a solution supports changing NSP ('Issue #4'), and\n   whether\
    \ multiple NSPs are supported (either of the same or different\n   length) for\
    \ load-balancing purposes ('Issue #5').\n   This document analyzes all proposed\
    \ solutions known at the time of\n   writing for communicating if the synthesis\
    \ is taking place, used\n   address format, and the IPv6 prefix used by the NAT64\
    \ and DNS64.\n   Based on the analysis we conclude whether the issue of learning\
    \ the\n   Network-Specific Prefix is worth solving and what would be the\n   recommended\
    \ solution(s) in that case.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   Address Synthesis\n      Address synthesis is a mechanism,\
    \ in the context of this document,\n      where an IPv4 address is represented\
    \ as an IPv6 address understood\n      by a NAT64 device.  The synthesized IPv6\
    \ address is formed by\n      embedding an IPv4 address as-is into an IPv6 address\
    \ prefixed with\n      an NSP/WKP.  It is assumed that the 'unused' suffix bits\
    \ of the\n      synthesized address are set to zero as described in Section 2.2\
    \ of\n      [RFC6052].\n   DNS64\n      DNS extensions for network address translation\
    \ from IPv6 clients\n      to IPv4 servers: A network entity that synthesizes\
    \ IPv6 addresses\n      and AAAA records out of IPv4 addresses and A records,\
    \ hence making\n      IPv4 namespaces visible in the IPv6 namespace.  DNS64 uses\
    \ NSP\n      and/or WKP in the synthesis process.\n   NAT64\n      Network Address\
    \ and protocol Translation mechanism for translating\n      IPv6 packets to IPv4\
    \ packets and vice versa: A network entity that\n      a host or an application\
    \ may want to either avoid or utilize.\n      IPv6 packets that hosts sent to\
    \ addresses in the NSP and/or WKP\n      are routed to NAT64.\n   NSP\n      Network-Specific\
    \ Prefix: A prefix chosen by a network\n      administrator for NAT64/DNS64 to\
    \ present IPv4 addresses in the\n      IPv6 namespace.\n   WKP\n      Well-Known\
    \ Prefix: A prefix (64:ff9b::/96) chosen by IETF and\n      configured by a network\
    \ administrator for NAT64/DNS64 to present\n      IPv4 addresses in the IPv6 namespace.\n"
- title: 3.  Issues
  contents:
  - "3.  Issues\n   This document analyzes different solutions with a focus on the\n\
    \   following five issues:\n   Issue #1\n      The problem of distinguishing between\
    \ synthesized and real IPv6\n      addresses, which allows a host to learn the\
    \ presence of a NAT64 in\n      the network.\n   Issue #2\n      The problem of\
    \ learning the NSP used by the access network and\n      needed for local IPv6\
    \ address synthesis.\n   Issue #3\n      The problem of learning the NSP or WKP\
    \ used by the access network\n      by a host not implementing DNS (hence, applications\
    \ are unable to\n      use DNS to learn the prefix).\n   Issue #4\n      The problem\
    \ of supporting changing NSP.  The NSP learned by the\n      host may become stale\
    \ for multiple reasons.  For example, the host\n      might move to a new network\
    \ that uses a different NSP, thus making\n      the previously learned NSP stale.\
    \  Also, the NSP used in the\n      network may be changed due administrative\
    \ reasons, thus again\n      making the previously learned NSP stale.\n   Issue\
    \ #5\n      The problem of supporting multiple NSPs.  A network may be\n     \
    \ configured with multiple NSPs for address synthesis.  For example,\n      for\
    \ load-balancing purposes, each NAT64 device in the same network\n      could\
    \ be assigned their own NSP.  It should be noted that learning\n      a single\
    \ NSP is enough for an end host to successfully perform\n      local IPv6 address\
    \ synthesis, but to avoid NAT64, the end host\n      needs to learn all NSPs used\
    \ by the access network.\n"
- title: 4.  Background
  contents:
  - "4.  Background\n   Certain applications, operating in protocol translation scenarios,\n\
    \   can benefit from knowing the IPv6 prefix used by a local NAT64 of the\n  \
    \ attached access network.  This applies to Scenario 1 (\"IPv6 network\n   to\
    \ IPv4 Internet\"), Scenario 5 (\"An IPv6 network to an IPv4\n   network\"), and\
    \ Scenario 7 (\"The IPv6 Internet to the IPv4 Internet\")\n   in the IPv4/IPv6\
    \ translation framework document [RFC6144].  Scenario\n   3 (\"The IPv6 Internet\
    \ to an IPv4 network\") is not considered\n   applicable herein as in that case,\
    \ a NAT64 is located at the front of\n   a remote IPv4 network, and a host in\
    \ IPv6 Internet can benefit very\n   little from learning the NSP IPv6 prefix\
    \ used by the remote NAT64.\n   The NAT64 prefix can be either a Network-Specific\
    \ Prefix (NSP) or the\n   Well-Known Prefix (WKP).  Below is (an incomplete) list\
    \ of various\n   use cases where it is beneficial for a host or an application\
    \ to know\n   the presence of a NAT64 and the NSP/WKP:\n   o  Host-based DNSSEC\
    \ validation.  As is documented in DNS64\n      [RFC6147], Section 5.5, Point\
    \ 3, synthetic AAAA records cannot be\n      successfully validated in a host.\
    \  In order to utilize NAT64, a\n      security-aware and validating host has\
    \ to perform the DNS64\n      function locally, and hence, it has to be able to\
    \ learn WKP or\n      proper NSP.\n   o  Protocols that use IPv4 literals.  In\
    \ IPv6-only access, native\n      IPv4 connections cannot be created.  If a network\
    \ has NAT64, it is\n      possible to synthesize an IPv6 address by combining\
    \ the IPv4\n      literal and the IPv6 prefix used by NAT64.  The synthesized\
    \ IPv6\n      address can then be used to create an IPv6 connection.\n   o  Multicast\
    \ translation [MCAST-TRANSLATOR] [V4V6MC-FRAMEWORK].\n   o  URI schemes with host\
    \ IPv4 address literals rather than domain\n      names (e.g., http://192.0.2.1,\
    \ ftp://192.0.2.1, imap://192.0.2.1,\n      ipp://192.0.2.1).  A host can synthesize\
    \ an IPv6 address out of\n      the literal in the URI and use IPv6 to create\
    \ a connection through\n      NAT64.\n   o  Updating the host's [RFC6724] preference\
    \ table to prefer native\n      prefixes over translated prefixes.  This is useful\
    \ as applications\n      are more likely able to traverse through NAT44 than NAT64.\n\
    \   DNS64 cannot serve applications that are not using DNS or that obtain\n  \
    \ referral as an IPv4 literal address.  One example application is the\n   Session\
    \ Description Protocol (SDP) [RFC4566], as used by the Real\n   Time Streaming\
    \ Protocol (RTSP) [RFC2326] and the Session Initiation\n   Protocol (SIP) [RFC3261].\
    \  Other example applications include web\n   browsers, as IPv4 address literals\
    \ are still encountered in web pages\n   and URLs.  Some of these applications\
    \ could still work through NAT64,\n   provided they were able to create locally\
    \ valid IPv6 presentations of\n   peers' IPv4 addresses.\n   It is a known issue\
    \ that passing IP address referrals often fails in\n   today's Internet [REFERRAL-PS].\
    \  Synthesizing IPv6 addresses does not\n   necessarily make the situation any\
    \ better as the synthesized\n   addresses utilizing NSP are not distinguishable\
    \ from public IPv6\n   addresses for the referral receiver.  However, the situation\
    \ is not\n   really any different from the current Internet as using public\n\
    \   addresses does not really guarantee reachability (for example, due to\n  \
    \ firewalls).  A node 'A' behind NAT64 may detect it is talking to a\n   node\
    \ 'B' through NAT64, in which case the node 'A' may want to avoid\n   passing\
    \ its IPv6 address as a referral to the node 'B'.  The node 'B'\n   on the IPv4\
    \ side of the NAT64 should not see the IPv6 address of a\n   node 'A' from the\
    \ IPv6 side of NAT64, and hence the node 'B' should\n   not be able to pass IPv6\
    \ address referral to a node 'C'.  Passing\n   IPv4 presentation of the IPv6 address\
    \ of the host 'A' to the node 'C'\n   is bound to similar problems as passing\
    \ a public IPv4 address of a\n   host behind NAT44 as a referral.  This analysis\
    \ focuses on detecting\n   NAT64 presence from the IPv6 side of NAT64.\n"
- title: 5.  Proposed Solutions to Learn about Synthesis and Network-Specific
  contents:
  - "5.  Proposed Solutions to Learn about Synthesis and Network-Specific\n    Prefix\n"
- title: 5.1.  DNS Query for a Well-Known Name
  contents:
  - '5.1.  DNS Query for a Well-Known Name

    '
- title: 5.1.1.  Solution Description
  contents:
  - "5.1.1.  Solution Description\n   Section 3 of [RFC7050] describes a host behavior\
    \ for discovering the\n   presence of a DNS64 server and a NAT64 device, and heuristics\
    \ for\n   discovering the used NSP.  A host requiring information for local\n\
    \   IPv6 address synthesis or for NAT64 avoidance sends a DNS query for a\n  \
    \ AAAA record of a Well-Known IPv4-only Fully Qualified Domain Name\n   (FQDN).\
    \  If a host receives a negative reply, it knows that no DNS64\n   and NAT64 are\
    \ in the network.\n   If a host receives a AAAA reply, it knows the network must\
    \ be\n   utilizing IPv6 address synthesis.  After receiving a synthesized AAAA\n\
    \   resource record, the host may examine the received IPv6 address and\n   use\
    \ heuristics, such as \"subtracting\" the known IPv4 address out of\n   synthesized\
    \ IPv6 address, to find out the NSP.\n"
- title: 5.1.2.  Analysis and Discussion
  contents:
  - "5.1.2.  Analysis and Discussion\n   The PROs of the proposal are listed below:\n\
    \   +  Can be used to solve Issues #1 and #2.\n   +  Solves Issue #4 via the lifetime\
    \ of the DNS record.\n   +  Can partially solve Issue #5 if multiple synthetic\
    \ AAAA records\n      are included in the response.  Can find multiple address\
    \ formats.\n   +  Does not necessarily require any standards effort.\n   +  Does\
    \ not require host stack or resolver changes.  All required\n      logic and heuristics\
    \ can be implemented in applications that are\n      interested in learning about\
    \ address synthesis taking place.\n   +  The solution is backward compatible from\
    \ the point of view of\n      'legacy' hosts and servers.\n   +  Hosts or applications\
    \ interested in learning about synthesis and\n      the used NSP can do the \"\
    discovery\" proactively at any time, for\n      example, every time the host attaches\
    \ to a new network.\n   +  Does not require explicit support from the network\
    \ using NAT64.\n   The CONs of the proposal are listed below:\n   -  Requires\
    \ hosting of a DNS resource record for the Well-Known Name.\n   -  Does not provide\
    \ a solution for Issue #3.\n   -  This method is only able to find one NSP even\
    \ if a network is\n      utilizing multiple NSPs (Issue #5) (unless DNS64 includes\
    \ multiple\n      synthetic AAAA records in response).\n"
- title: 5.1.3.  Summary
  contents:
  - "5.1.3.  Summary\n   This is the only approach that can be deployed without explicit\n\
    \   support from the network or the host.  This approach could also\n   complement\
    \ explicit methods and be used as a fallback approach when\n   explicit methods\
    \ are not supported by an access network.\n"
- title: 5.2.  EDNS0 Option Indicating AAAA Record Synthesis and Format
  contents:
  - '5.2.  EDNS0 Option Indicating AAAA Record Synthesis and Format

    '
- title: 5.2.1.  Solution Description
  contents:
  - "5.2.1.  Solution Description\n   [SYNTH-FLAG-2011] defined a new Extension Mechanisms\
    \ for DNS (EDNS0)\n   option [RFC2671] that contained 3 flag bits (called SY-bits).\
    \  The\n   EDNS0 option served as an implicit indication of the presence of a\n\
    \   DNS64 server and NAT64 device.  The EDNS0 option SY-bit values other\n   than\
    \ '000' and '111' explicitly told the NSP prefix length.  Only the\n   DNS64 server\
    \ could insert the EDNS0 option and the required SY-bits\n   combination into\
    \ the synthesized AAAA resource record.\n"
- title: 5.2.2.  Analysis and Discussion
  contents:
  - "5.2.2.  Analysis and Discussion\n   The PROs of the proposal are listed below:\n\
    \   +  Can be used to solve Issue #1 and is designed to explicitly solve\n   \
    \   Issue #2.\n   +  Solves Issue #4 via the lifetime of the DNS record.\n   +\
    \  Can partially solve Issue #5 if multiple synthetic AAAA records\n      are\
    \ included in the response and all use same format.\n   +  The solution is backward\
    \ compatible from the point of view of\n      'legacy' hosts and servers.\n  \
    \ +  Even if the solution is bundled with DNS queries and responses, a\n     \
    \ standardization of a new DNS record type is not required; rather,\n      just\
    \ defining a new EDNS0 option is needed.\n   +  EDNS0 option implementation requires\
    \ changes only to DNS64\n      servers.\n   +  Does not require additional provisioning\
    \ or management as the\n      EDNS0 option is added automatically by the DNS64\
    \ server to the\n      responses.\n   +  Does not involve additional queries towards\
    \ the global DNS\n      infrastructure as EDNS0 logic can be handled within the\
    \ DNS64\n      server.\n   The CONs of the proposal are listed below:\n   -  Requires\
    \ end hosts to support EDNS0 extension mechanisms\n      [RFC6891].\n   -  Requires\
    \ host resolver changes and mechanism/additions to the host\n      resolver API\
    \ (or flags, hints, etc.) to deliver a note to the\n      querying application\
    \ that the address is synthesized and what is\n      the NSP prefix length.\n\
    \   -  Requires a modification to DNS64 servers to include the EDNS0\n      option\
    \ to the synthesized responses.\n   -  Does not provide a solution for Issue #3.\n\
    \   -  EDNS0 flags and options are typically hop-by-hop only, severely\n     \
    \ limiting the applicability of these approaches, unless the EDNS0-\n      capable\
    \ DNS64 is the first DNS server the end host talks to, as it\n      is otherwise\
    \ not possible to guarantee that the EDNS0 option\n      survives through all\
    \ DNS proxies and servers in between.\n"
- title: 5.2.3.  Summary
  contents:
  - "5.2.3.  Summary\n   The solution based on the EDNS0 option works by extending\
    \ the\n   existing EDNS0 resource record.  Although the solution has host\n  \
    \ resolver and DNS64 server impacts, the changes are limited to those\n   entities\
    \ (end host, applications) that are interested in learning the\n   presence of\
    \ NAT64 and the used NAT64 prefix.  The provisioning and\n   management overhead\
    \ is minimal, if not non-existent, as the EDNS0\n   options are synthesized in\
    \ a DNS64 server in a same manner as the\n   synthesized AAAA resource records.\
    \  Moreover, EDNS0 does not induce\n   any load to DNS servers because no new\
    \ RRType query is defined.\n"
- title: 5.3.  EDNS0 Flags Indicating AAAA Record Synthesis and Format
  contents:
  - '5.3.  EDNS0 Flags Indicating AAAA Record Synthesis and Format

    '
- title: 5.3.1.  Solution Description
  contents:
  - "5.3.1.  Solution Description\n   [SYNTH-FLAG-2010] defined 3 new flag bits (called\
    \ SY-bits) in the\n   EDNS0 OPT [RFC2671] header that served as an implicit indication\
    \ of\n   the presence of a DNS64 server and NAT64 device.  SY-bit values other\n\
    \   than '000' or '111' explicitly told the NSP prefix length.  Only the\n   DNS64\
    \ server could insert the EDNS0 option and the required SY-bits\n   combination\
    \ into the synthesized AAAA resource record.\n"
- title: 5.3.2.  Analysis and Discussion
  contents:
  - "5.3.2.  Analysis and Discussion\n   The PROs of the proposal are listed below:\n\
    \   +  Can be used to solve Issue #1 and is designed to explicitly solve\n   \
    \   Issue #2.\n   +  Solves Issue #4 via the lifetime of the DNS record.\n   +\
    \  Can partially solve Issue #5 if multiple synthetic AAAA records\n      are\
    \ included in the response and all use same format.\n   +  The solution is backward\
    \ compatible from the point of view of\n      'legacy' hosts and servers.\n  \
    \ +  EDNS0 option implementation requires changes only to DNS64\n      servers.\n\
    \   +  Does not require additional provisioning or management as the\n      EDNS0\
    \ option is added automatically by the DNS64 server to the\n      responses.\n\
    \   +  Does not involve additional queries towards the global DNS\n      infrastructure\
    \ as EDNS0 logic can be handled within the DNS64\n      server.\n   The CONs of\
    \ the proposal are listed below:\n   -  Requires end hosts to support EDNS0 extension\
    \ mechanisms\n      [RFC6891].\n   -  Consumes scarce flag bits from the EDNS0\
    \ OPT header.\n   -  Requires a host resolver changes and mechanism/additions\
    \ to the\n      host resolver API (or flags, hints, etc.) to deliver a note to\
    \ the\n      querying application that the address is synthesized and what is\n\
    \      the NSP prefix length.\n   -  Requires a modification to DNS64 servers\
    \ to include the EDNS0\n      option to the synthesized responses.\n   -  Does\
    \ not provide a solution for Issue #3.\n   -  EDNS0 flags and options are typically\
    \ hop-by-hop only, severely\n      limiting the applicability of these approaches,\
    \ unless the EDNS0-\n      capable DNS64 is the first DNS server the end host\
    \ talks to, as it\n      is otherwise not possible to guarantee that the EDNS0\
    \ option\n      survives through all DNS proxies and servers in between.\n"
- title: 5.3.3.  Summary
  contents:
  - "5.3.3.  Summary\n   This option is included here for the sake of completeness.\
    \  The\n   consumption of three bits of the limited EDNS0 OPT space can be\n \
    \  considered unfavorable and hence is unlikely to be accepted.\n"
- title: 5.4.  DNS Resource Record for IPv4-Embedded IPv6 Address
  contents:
  - '5.4.  DNS Resource Record for IPv4-Embedded IPv6 Address

    '
- title: 5.4.1.  Solution Description
  contents:
  - "5.4.1.  Solution Description\n   [DNS-A64] proposed a new DNS resource record\
    \ (A64) that would be a\n   record dedicated to storing a single IPv4-embedded\
    \ IPv6 address\n   [RFC6052].  Use of a dedicated resource record would allow\
    \ a host to\n   distinguish between real IPv6 addresses and synthesized IPv6\n\
    \   addresses.  The solution requires the host to send a query for an A64\n  \
    \ record.  A positive answer with an A64 record informs the requesting\n   host\
    \ that the resolved address is not a native address but an IPv4-\n   embedded\
    \ IPv6 address.  This would ease the local policies to prefer\n   direct communications\
    \ (i.e., avoid using IPv4-embedded IPv6 addresses\n   when a native IPv6 address\
    \ or a native IPv4 address is available).\n   Applications may be notified via\
    \ new or modified API.\n"
- title: 5.4.2.  Analysis and Discussion
  contents:
  - "5.4.2.  Analysis and Discussion\n   The PROs of the proposal are listed below:\n\
    \   +  Can be used to solve Issues #1 and #5.\n   +  Solves Issue #4 via the lifetime\
    \ of the DNS record.\n   +  The solution is backward compatible from the point\
    \ of view of\n      'legacy' hosts and servers.\n   +  Synthesized addresses can\
    \ be used in authoritative DNS servers.\n   +  Maintains the reliability of the\
    \ DNS model (i.e., a synthesized\n      IPv6 address is presented as such and\
    \ not as a native IPv6\n      address).\n   +  When both IPv4-converted and native\
    \ IPv6 addresses are configured\n      for the same QNAME, native addresses are\
    \ preferred.\n   The CONs of the proposal are listed below:\n   -  Does not address\
    \ Issues #2 or #3 in any way.\n   -  Requires a host resolver changes and mechanism/additions\
    \ to the\n      host resolver API (or flags, hints, etc.) to deliver a note to\
    \ the\n      querying application that the address is synthesized.\n   -  Requires\
    \ standardization of a new DNS resource record type (A64)\n      and the implementation\
    \ of it in both resolvers and servers.\n   -  Requires a coordinated deployment\
    \ between different flavors of DNS\n      servers within the provider to work\
    \ deterministically.\n   -  Additional load on the DNS servers (3 queries -- A64,\
    \ AAAA, and A\n      -- may be issued by a dual-stack host).\n   -  Does not help\
    \ to identify synthesized IPv6 addresses if the\n      session does not involve\
    \ any DNS queries.\n"
- title: 5.4.3.  Summary
  contents:
  - "5.4.3.  Summary\n   While the proposed solution delivers explicit information\
    \ about\n   address synthesis taking place, solving the Issue #1, standardization\n\
    \   of a new DNS record type might turn out to be too overwhelming a task\n  \
    \ as a solution for a temporary transition phase.  Defining a new\n   record type\
    \ increases the load towards the DNS server as the host\n   issues parallel A64,\
    \ AAAA, and A queries.\n"
- title: 5.5.  Learning the IPv6 Prefix of a Network's NAT64 Using DNS
  contents:
  - '5.5.  Learning the IPv6 Prefix of a Network''s NAT64 Using DNS

    '
- title: 5.5.1.  Solution Description
  contents:
  - "5.5.1.  Solution Description\n   [LEARN-PREFIX] proposed two DNS-based methods\
    \ for discovering the\n   presence of a DNS64 server and a NAT64 device.  It also\
    \ proposed a\n   mechanism for discovering the used NSP.\n   First, the document\
    \ proposed that a host may learn the presence of a\n   DNS64 server and a NAT64\
    \ device by receiving a TXT resource record\n   with a well-known string (which\
    \ the document proposes to be reserved\n   by IANA) followed by the NAT64 unicast\
    \ IPv6 address and the prefix\n   length.  The DNS64 server would add the TXT\
    \ resource record into the\n   DNS response.\n   Second, the document proposed\
    \ specifying a new URI-Enabled NAPTR\n   (U-NAPTR) [RFC4848] application to discover\
    \ the NAT64's IPv6 prefix\n   and length.  The input domain name is exactly the\
    \ same as would be\n   used for a reverse DNS lookup, derived from the host's\
    \ IPv6 in the\n   \".ip6.arpa.\" tree.  The host doing the U-NAPTR queries may\
    \ need\n   multiple queries until the host finds the provisioned domain name\n\
    \   with the correct prefix length.  The response to a successful U-NAPTR\n  \
    \ query contains the unicast IPv6 address and the prefix length of the\n   NAT64\
    \ device.\n"
- title: 5.5.2.  Analysis and Discussion
  contents:
  - "5.5.2.  Analysis and Discussion\n   The PROs of the proposal are listed below:\n\
    \   +  Can be used to solve Issues #1 and #2.\n   +  Solves Issue #4 via the lifetime\
    \ of the DNS record.\n   +  Does not require host stack or resolver changes if\
    \ the required\n      logic and heuristics are implemented in applications that\
    \ are\n      interested in learning about address synthesis taking place.\n  \
    \ The CONs of the proposal are listed below:\n   -  Requires standardization of\
    \ a Well-Known Name by IANA for the TXT\n      resource record and/or standardization\
    \ of a new U-NAPTR\n      application.\n   -  Requires a host resolver changes\
    \ and mechanism/additions to the\n      host resolver API (or flags, hints, etc.)\
    \ to deliver a note to the\n      querying application that the address is synthesized\
    \ and what is\n      the NSP prefix length.  However, it is possible that the\
    \ U-NAPTR\n      application logic is completely implemented by the application\n\
    \      itself as noted in the PROs list.\n   -  The U-NAPTR prefix-learning method\
    \ may entail multiple queries.\n   -  The U-NAPTR prefix-learning method requires\
    \ provisioning of NSPs\n      in the \".ip6.arpa.\" tree.\n   -  RFC5507 [RFC5507]\
    \ specifically recommends against reusing TXT\n      resource records to expand\
    \ DNS.\n   -  Requires configuration on the access network's DNS servers.\n  \
    \ -  Does not provide a solution for Issue #3.\n   Note: If the TXT record includes\
    \ multiple NSPs, Issue #5 could be\n   solved as well, but only if nodes as a\
    \ group would select different\n   NSPs, hence supporting load balancing.  As\
    \ this is not clear, this\n   item is not yet listed under PROs or CONs.\n"
- title: 5.5.3.  Summary
  contents:
  - "5.5.3.  Summary\n   The implementation of this solution requires some changes\
    \ to the\n   applications and resolvers in a similar fashion as in solutions in\n\
    \   Sections 5.2, 5.3, and 5.4.  Unlike the other DNS-based approaches,\n   the\
    \ U-NAPTR-based solution also requires provisioning information\n   into the \"\
    .ip6.arpa.\" tree, which is no longer entirely internal to\n   the provider hosting\
    \ the NAT64/DNS64 service.\n   The iterative approach of learning the NAT64 prefix\
    \ in an U-NAPTR-\n   based solution may result in multiple DNS queries, which\
    \ can be\n   considered more complex and inefficient compared to other DNS-based\n\
    \   solutions.\n"
- title: 5.6.  Learning the IPv6 Prefix of a Network's NAT64 Using DHCPv6
  contents:
  - '5.6.  Learning the IPv6 Prefix of a Network''s NAT64 Using DHCPv6

    '
- title: 5.6.1.  Solution Description
  contents:
  - "5.6.1.  Solution Description\n   Two individual IETF documents specified DHCPv6-based\
    \ approaches.\n   [LEARN-PREFIX] described a new DHCPv6 [RFC3315] option\n   (OPTION_AFT_PREFIX_DHCP)\
    \ that would contain the IPv6 unicast prefix,\n   IPv6 Any-Source Multicast (ASM)\
    \ prefix, and IPv6 Source-Specific\n   Multicast (SSM) prefix (and their lengths)\
    \ for the NAT64.\n   [DHCPV6-SHARED-ADDRESS] proposed a DHCPv6 option that could\
    \ be used\n   to communicate to a requesting host the prefix used for building\n\
    \   IPv4-converted IPv6 addresses together with the format type and\n   therefore\
    \ also the used address synthesis algorithm.  Provisioning\n   the format type\
    \ is required so as to be correctly handled by the\n   NAT64-enabled devices deployed\
    \ in a given domain.\n"
- title: 5.6.2.  Analysis and Discussion
  contents:
  - "5.6.2.  Analysis and Discussion\n   The PROs of the proposal are listed below:\n\
    \   +  Can be used to solve Issues #1, #2, #3, and #4 via the lifetime of\n  \
    \    the DHCPv6 information.\n   +  Does not involve the DNS system.  Therefore,\
    \ applications that\n      would not normally initiate any DNS queries can still\
    \ learn the\n      NAT64 prefix.\n   +  DHCPv6 is designed to provide various\
    \ kinds of configuration\n      information in a centrally managed fashion.\n\
    \   The CONs of the proposal are listed below:\n   -  Change of NSP requires change\
    \ to the DHCPv6 configuration.\n   -  Requires at least stateless DHCPv6 client\
    \ on hosts.\n   -  Requires support on DHCPv6 clients, which is not trivial in\
    \ all\n      operating systems.\n   -  The DHCPv6-based solution involves changes\
    \ and management on\n      network-side nodes that are not really part of the\
    \ NAT64/DNS64\n      deployment or aware of issues caused by NAT64/DNS64.\n  \
    \ -  A new DHCPv6 option is required along with the corresponding\n      changes\
    \ to both DHCPv6 clients and servers.\n   Note: If DHCPv6 would include multiple\
    \ NSPs, Issue #5 could be solved\n   as well, but only if nodes as a group would\
    \ select different NSPs,\n   hence supporting load balancing.  As this is not\
    \ clear, this item is\n   not yet listed under PROs or CONs.\n"
- title: 5.6.3.  Summary
  contents:
  - "5.6.3.  Summary\n   The DHCPv6-based solution would be a good solution as it\
    \ hooks into\n   the general IP configuration phase, allows easy updates when\n\
    \   configuration information changes, and does not involve DNS in\n   general.\
    \  Use of DHCPv6 requires configuration changes on DHCPv6\n   clients and servers\
    \ and, in some cases, may also require\n   implementation changes.  Furthermore,\
    \ it is not obvious that all\n   devices that need translation services would\
    \ implement stateless\n   DHCPv6.  For example, cellular Third Generation Partnership\
    \ Project\n   (3GPP) networks do not mandate hosts or networks to implement or\n\
    \   deploy DHCPv6.\n"
- title: 5.7.  Learning the IPv6 Prefix of a Network's NAT64 Using Router
  contents:
  - "5.7.  Learning the IPv6 Prefix of a Network's NAT64 Using Router\n      Advertisements\n"
- title: 5.7.1.  Solution Description
  contents:
  - "5.7.1.  Solution Description\n   Revision three of [LEARN-PREFIX] described a\
    \ new Router Advertisement\n   (RA) [RFC4861] option (OPTION_AFT_PREFIX_RA) that\
    \ would contain the\n   IPv6 unicast prefix, IPv6 ASM prefix, and IPv6 SSM prefix\
    \ (and their\n   lengths) for the NAT64.  The RA option is essentially the same\
    \ as for\n   DHCPv6, discussed in Section 5.6.\n"
- title: 5.7.2.  Analysis and Discussion
  contents:
  - "5.7.2.  Analysis and Discussion\n   The PROs of the proposal are listed below:\n\
    \   +  Can be used to solve Issues #1, #2, and #3.\n   +  Can solve Issue #4 if\
    \ lifetime information can be communicated.\n   The CONs of the proposal are listed\
    \ below:\n   -  Requires configuration and management of all access routers to\n\
    \      emit correct information in the RA.  This could, for example, be\n    \
    \  accomplished somehow by piggybacking on top of routing protocols\n      (which\
    \ would then require enhancements to routing protocols).\n   -  In some operating\
    \ systems, it may not be trivial to transfer\n      information obtained in the\
    \ RA to upper layers.\n   -  Requires changes to the host operating system's IP\
    \ stack.\n   -  An NSP change requires changes to the access router configuration.\n\
    \   -  Requires standardization of a new option to the Router\n      Advertisement,\
    \ which is generally an unfavored approach.\n   -  The RA-based solution involves\
    \ changes and management on network-\n      side nodes that are not really part\
    \ of the NAT64/DNS64 deployment\n      or aware of issues caused by NAT64/DNS64.\n\
    \   Note: If the RA would include multiple NSPs, Issue #5 could be solved\n  \
    \ as well, but only if nodes as a group would select different NSPs,\n   hence\
    \ supporting load balancing.  As this is not clear, this item is\n   not yet listed\
    \ under PROs or CONs.\n"
- title: 5.7.3.  Summary
  contents:
  - "5.7.3.  Summary\n   The RA-based solution would be a good solution as it hooks\
    \ into the\n   general IP configuration phase, allows easy updates when\n   configuration\
    \ information changes, and does not involve DNS in\n   general.  However, generally\
    \ introducing any changes to the Neighbor\n   Discovery Protocol that are not\
    \ absolutely necessary are unfavored\n   due to the impact on both the network-side\
    \ node and end host IP stack\n   implementations.\n   Compared to the DHCPv6 equivalent\
    \ solution in Section 5.6, the\n   management overhead is greater with the RA-based\
    \ solution.  With the\n   DHCPv6-based solution, the management can be centralized\
    \ to a few\n   DHCPv6 servers compared to the RA-based solution where each access\n\
    \   router is supposed to be configured with the same information.\n"
- title: 5.8.  Using Application-Layer Protocols such as STUN
  contents:
  - '5.8.  Using Application-Layer Protocols such as STUN

    '
- title: 5.8.1.  Solution Description
  contents:
  - "5.8.1.  Solution Description\n   Application-layer protocols, such as Session\
    \ Traversal Utilities for\n   NAT (STUN) [RFC5389], that define methods for endpoints\
    \ to learn\n   their external IP addresses could be used for NAT64 and NSP\n \
    \  discovery.  This document focuses on STUN, but the protocol could be\n   something\
    \ else as well.\n   A host must first use DNS to discover IPv6 representations\
    \ of STUN\n   servers' IPv4 addresses, because the host has no way to directly\
    \ use\n   IPv4 addresses to contact STUN servers.\n   After learning the IPv6\
    \ address of a STUN server, the STUN client\n   sends a request to the STUN server\
    \ containing a new 'SENDING-TO'\n   attribute that tells the server the IPv6 address\
    \ to which the client\n   sent the request.  In a reply, the server includes another\
    \ new\n   attribute called 'RECEIVED-AS', which contains the server's IP\n   address\
    \ on which the request arrived.  After receiving the reply, the\n   client compares\
    \ the 'SENDING-TO' and 'RECEIVED-AS' attributes to find\n   out an NSP candidate.\n"
- title: 5.8.2.  Analysis and Discussion
  contents:
  - "5.8.2.  Analysis and Discussion\n   This solution is relatively similar to the\
    \ one described in\n   Section 5.1, but instead of using DNS, it uses STUN to\
    \ get input for\n   heuristic algorithms.\n   The PROs of the proposal are listed\
    \ below:\n   +  Can be used to solve Issues #1 and #2.\n   +  Does not require\
    \ host changes or supportive protocols such as DNS\n      or DHCPv6.  All required\
    \ logic and heuristics can be implemented\n      in applications that are interested\
    \ in learning about address\n      synthesis taking place.\n   +  The solution\
    \ is backward compatible from the point of view of\n      'legacy' hosts and servers.\n\
    \   +  Hosts or applications interested in learning about synthesis and\n    \
    \  the used NSP can do the \"discovery\" proactively at any time, for\n      example,\
    \ every time the host attaches to a new network.\n   +  Does not require explicit\
    \ support from the network using NAT64.\n   +  Can possibly be bundled to existing\
    \ STUN message exchanges as new\n      attributes, and hence, a client can learn\
    \ its external IPv4\n      address and an NSP/WKP with the same exchange.\n  \
    \ +  Can be used to confirm the heuristics by synthesizing the IPv6\n      address\
    \ of another STUN server or by synthesizing the IPv6 address\n      of first STUN\
    \ server after the host has heuristically determined\n      NSP using the method\
    \ in Section 5.1, i.e., the connectivity test\n      could be done with STUN.\n\
    \   +  The true IPv4 destination address is used in NSP determination\n      instead\
    \ of the IPv4 address received from DNS.  This may increase\n      reliability.\n\
    \   +  The same STUN improvement could also be used to reveal NAT66 on\n     \
    \ the data path, if the 'RECEIVED-AS' would contain a different IPv6\n      address\
    \ from 'SENDING-TO'.\n   The CONs of the proposal are listed below:\n   -  Requires\
    \ a server on the network to respond to the queries.\n   -  Requires standardization\
    \ if done as an extension to STUN.\n   -  The solution involves changes and management\
    \ on network side nodes\n      that are not really part of the NAT64/DNS64 deployment\
    \ or aware of\n      issues caused by NAT64/DNS64.\n   -  Does not solve Issue\
    \ #3 if the STUN server's synthetic IPv6\n      address is provisioned via DNS.\n\
    \   -  Does not solve Issue #4 as the STUN server would not be aware of\n    \
    \  the learned NSP's validity time.\n   -  Does not solve Issue #5 as the STUN\
    \ server would not be aware of\n      multiple NSP prefixes.\n   -  Heavyweight\
    \ solution especially if an application does not\n      otherwise support STUN.\n"
- title: 5.8.3.  Summary
  contents:
  - "5.8.3.  Summary\n   An approach based on STUN or a similar protocol is a second\
    \ way to\n   solve the problem without explicit access-network support.  The\n\
    \   heuristics for NSP discovery would still be in the client; however,\n   the\
    \ result may be more reliable as an actual IPv4 destination address\n   is compared\
    \ to the IPv6 address used in sending.  The additional\n   benefit of STUN is\
    \ that the client learns its public IPv4 address\n   with the same message exchange.\
    \  STUN could also be used as the\n   connectivity test tool if the client would\
    \ first heuristically\n   determine NSP out of DNS as described in Section 5.1,\
    \ synthesize the\n   IPv6 representation of the STUN server's IPv4 address, and\
    \ then test\n   connectivity to the STUN server.\n   As an additional benefit,\
    \ the STUN improvement could be used for\n   NAT66 discovery.\n"
- title: 5.9.  Learning the IPv6 Prefix of a Network's NAT64 Using Access-
  contents:
  - "5.9.  Learning the IPv6 Prefix of a Network's NAT64 Using Access-\n      Technology-Specific\
    \ Methods\n"
- title: 5.9.1.  Solution Description
  contents:
  - "5.9.1.  Solution Description\n   Several link layers on different access systems\
    \ have attachment time\n   signaling protocols for negotiating various parameters\
    \ that are used\n   later on with the established link-layer connection.  Examples\
    \ of\n   such include the 3GPP Non-Access-Stratum (NAS) signaling protocol\n \
    \  [NAS.24.301] among other link layers and tunneling solutions.  There,\n   using\
    \ NAS signaling it could be possible to list all NSPs with their\n   respective\
    \ prefix lengths in generic protocol configuration option\n   containers during\
    \ the network access establishment.  The lack of NSPs\n   in protocol configuration\
    \ option containers would be an implicit\n   indication that there is no NAT64\
    \ present in the network.\n"
- title: 5.9.2.  Analysis and Discussion
  contents:
  - "5.9.2.  Analysis and Discussion\n   The PROs of the proposal are listed below:\n\
    \   +  Can be used to solve Issues #1, #2, #3, and #5.\n   +  Can solve Issue\
    \ #4 if lifetime information is also communicated.\n   The CONs of the proposal\
    \ are listed below:\n   -  Requires configuration and management of all access\
    \ routers/\n      gateways to emit correct information in \"link/lower-layer\"\
    \n      signaling.  If NAT64 functionality is implemented into the access\n  \
    \    router/gateway that terminates the generic protocol configuration\n     \
    \ exchange, then the configuration management can be automated.\n   -  In some\
    \ operating systems, it may not be trivial to transfer\n      information obtained\
    \ in \"link/lower layers\" to upper layers.\n   -  An NSP change may require changes\
    \ to the access router/gateway\n      configuration.\n   -  Requires standardization\
    \ of a new configuration parameter\n      exchange/container for each access system\
    \ of interest.  The\n      proposed solution is indeed specific to each access\
    \ technology.\n"
- title: 5.9.3.  Summary
  contents:
  - "5.9.3.  Summary\n   The solution based on access technology would be a good solution\
    \ as\n   it hooks into general network access establishment phase, allows easy\n\
    \   updates when configuration information changes, and does not involve\n   DNS\
    \ in general.  However, generally introducing any changes to the\n   link/lower\
    \ layers is a long and slow process, and changes would need\n   to be done for\
    \ all access technologies/systems that are used with\n   NAT64.\n   Compared to\
    \ the RA-equivalent solution in Section 5.7, the management\n   overhead is equivalent\
    \ or even less than the RA-based solution.\n"
- title: 6.  Conclusion
  contents:
  - "6.  Conclusion\n   Our conclusion is to recommend publishing the Well-Known DNS\
    \ Name\n   heuristic discovery-based method as a Standards Track IETF document\n\
    \   for applications and host implementors to implement as-is.\n   As a general\
    \ principle, we prefer to have as minimal a solution as\n   possible, avoid impacts\
    \ to entities not otherwise involved in the\n   protocol translation scheme, minimize\
    \ host impact, and require\n   minimal to no operational effort on the network\
    \ side.\n   Of the different issues, we give the most weight to Issues #1 and\
    \ #2.\n   We do not give much weight to Issue #3, as cases where hosts need to\n\
    \   synthesize IPv6 addresses but do not have DNS available seem rare to\n   us.\
    \  Even if an application does not otherwise utilize DNS, it ought\n   to be able\
    \ to trigger a simple DNS query to find out WKP/NSP.  Issue\n   #4 is handled\
    \ by the majority of solutions, and Issue #5 is\n   considered to be mostly insignificant\
    \ as even if individual hosts\n   would use only one NSP at a time, different\
    \ hosts would be using\n   different NSPs, hence supporting load-balancing targets.\
    \  Only one of\n   the discussed solutions, see Section 5.6, supports learning\
    \ of\n   possible new or indicating support for multiple algorithms for\n   address\
    \ synthesis other than the one described in [RFC6052].\n   The DNS64 entity has\
    \ to be configured with WKP/NSP in order for it to\n   do synthesis; hence, using\
    \ DNS also for delivering the synthesis\n   information sounds logical.  The fact\
    \ that the synthesis information\n   fate-shares the information received in the\
    \ DNS response is a\n   valuable attribute and reduces the possible distribution\
    \ of stale\n   prefix information.  However, having all DNS64 servers support\n\
    \   explicit WKP/NSP discovery (ENDS0, A64, and DNS SRV record\n   approaches)\
    \ is difficult to arrange.  The U-NAPTR-based approach\n   would require provisioning\
    \ information into the \".ip6.arpa.\" tree,\n   which would not be entirely internal\
    \ for the provider.  Use of DHCPv6\n   would involve additional trouble configuring\
    \ DHCPv6 servers and\n   ensuring DHCPv6 clients are in place; it would also involve\
    \ ensuring\n   that the NAT64 and DHCPv6 (and possibly even some DNS64 servers)\
    \ are\n   all in sync.  RA-based mechanisms are operationally expensive as\n \
    \  configuration would have to be placed and maintained in the access\n   routers.\
    \  Furthermore, both DHCPv6 and RA-based mechanisms involve\n   entities that\
    \ do not otherwise need to be aware of protocol\n   translation (they only need\
    \ to know DNS server addresses).  Finally,\n   regarding the use of STUN, a host\
    \ does not need to implement STUN\n   whereas DNS is, in practice, required anyway.\
    \  Also, the STUN\n   protocol would need to be changed on both the host and network\
    \ side\n   to support the discovery of NAT64 and WKP/NSP.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The security considerations are essentially similar\
    \ to those\n   described in DNS64 [RFC6147].  The document also talks about man-in-\n\
    \   the-middle and denial-of-service attacks caused by forging of\n   information\
    \ required for IPv6 synthesis from corresponding IPv4\n   addresses.  Forgery\
    \ of information required for IPv6 address\n   synthesis may allow an attacker\
    \ to insert itself as a middle man or\n   to perform a denial-of-service attack.\
    \  The DHCPv6 and RA-based\n   approaches are vulnerable to forgery as the attacker\
    \ may send forged\n   RAs or act as a rogue DHCPv6 server (unless DHCPv6 authentication\n\
    \   [RFC3315] or Secure Neighbor Discovery (SEND) [RFC3971] are used).\n   If\
    \ the attacker is already able to modify and forge DNS responses\n   (flags, addresses\
    \ of known IPv4-only servers, records, etc.), ability\n   to influence local address\
    \ synthesis is likely of low additional\n   value.  Also, a DNS-based mechanism\
    \ is only as secure as the method\n   used to configure the DNS server's IP addresses\
    \ on the host.\n   Therefore, if, for example, the host cannot trust DHCPv6, it\
    \ cannot\n   trust the DNS server learned via DHCPv6 either, unless the host has\
    \ a\n   way to authenticate all DNS responses (e.g., via DNSSEC [RFC4033]).\n"
- title: 8.  Contributors
  contents:
  - "8.  Contributors\n   The following individual contributed text to this document.\n\
    \      Mohamed Boucadair\n      France Telecom\n      Rennes, 35000\n      France\n\
    \      EMail: mohamed.boucadair@orange-ftgroup.com\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   The authors would like to thank Dan Wing and Christian\
    \ Huitema,\n   especially for the STUN idea and for their valuable comments and\n\
    \   discussions.\n   Jouni Korhonen would like to specifically thank Nokia Siemens\n\
    \   Networks as he completed the majority of this document while employed\n  \
    \ there.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2326]  Schulzrinne, H., Rao, A., and R. Lanphier,\
    \ \"Real Time\n              Streaming Protocol (RTSP)\", RFC 2326, April 1998.\n\
    \   [RFC2671]  Vixie, P., \"Extension Mechanisms for DNS (EDNS0)\",\n        \
    \      RFC 2671, August 1999.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston,\n              A., Peterson, J., Sparks, R., Handley, M., and\
    \ E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n\
    \              June 2002.\n   [RFC3315]  Droms, R., Bound, J., Volz, B., Lemon,\
    \ T., Perkins, C.,\n              and M. Carney, \"Dynamic Host Configuration\
    \ Protocol for\n              IPv6 (DHCPv6)\", RFC 3315, July 2003.\n   [RFC4566]\
    \  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n              Description\
    \ Protocol\", RFC 4566, July 2006.\n   [RFC4848]  Daigle, L., \"Domain-Based Application\
    \ Service Location\n              Using URIs and the Dynamic Delegation Discovery\
    \ Service\n              (DDDS)\", RFC 4848, April 2007.\n   [RFC4861]  Narten,\
    \ T., Nordmark, E., Simpson, W., and H. Soliman,\n              \"Neighbor Discovery\
    \ for IP version 6 (IPv6)\", RFC 4861,\n              September 2007.\n   [RFC5389]\
    \  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n              \"Session\
    \ Traversal Utilities for NAT (STUN)\", RFC 5389,\n              October 2008.\n\
    \   [RFC6052]  Bao, C., Huitema, C., Bagnulo, M., Boucadair, M., and X.\n    \
    \          Li, \"IPv6 Addressing of IPv4/IPv6 Translators\", RFC 6052,\n     \
    \         October 2010.\n   [RFC6146]  Bagnulo, M., Matthews, P., and I. van Beijnum,\
    \ \"Stateful\n              NAT64: Network Address and Protocol Translation from\
    \ IPv6\n              Clients to IPv4 Servers\", RFC 6146, April 2011.\n   [RFC6147]\
    \  Bagnulo, M., Sullivan, A., Matthews, P., and I. van\n              Beijnum,\
    \ \"DNS64: DNS Extensions for Network Address\n              Translation from\
    \ IPv6 Clients to IPv4 Servers\", RFC 6147,\n              April 2011.\n   [RFC6724]\
    \  Thaler, D., Draves, R., Matsumoto, A., and T. Chown,\n              \"Default\
    \ Address Selection for Internet Protocol Version 6\n              (IPv6)\", RFC\
    \ 6724, September 2012.\n   [RFC7050]  Savolainen, T., Korhonen, J., and D. Wing,\
    \ \"Discovery of\n              the IPv6 Prefix Used for IPv6 Address Synthesis\"\
    ,\n              RFC 7050, November 2013.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [DHCPV6-SHARED-ADDRESS]\n              Boucadair,\
    \ M., Levis, P., Grimault, J., Savolainen, T.,\n              and G. Bajko, \"\
    Dynamic Host Configuration Protocol\n              (DHCPv6) Options for Shared\
    \ IP Addresses Solutions\", Work\n              in Progress, December 2009.\n\
    \   [DNS-A64]  Boucadair, M. and E. Burgey, \"A64: DNS Resource Record for\n \
    \             IPv4-Embedded IPv6 Address\", Work in Progress,\n              September\
    \ 2010.\n   [LEARN-PREFIX]\n              Wing, D., \"Learning the IPv6 Prefix\
    \ of a Network's IPv6/\n              IPv4 Translator\", Work in Progress, October\
    \ 2009.\n   [MCAST-TRANSLATOR]\n              Venaas, S., Asaeda, H., SUZUKI,\
    \ S., and T. Fujisaki, \"An\n              IPv4 - IPv6 multicast translator\"\
    , Work in Progress,\n              December 2010.\n   [NAS.24.301]\n         \
    \     3GPP, \"Non-Access-Stratum (NAS) protocol for Evolved\n              Packet\
    \ System (EPS)\", 3GPP TS 24.301 8.8.0, December 2010,\n              <http://www.3gpp.org/ftp/Specs/html-info/24301.htm>.\n\
    \   [REFERRAL-PS]\n              Carpenter, B., Jiang, S., and Z. Cao, \"Problem\
    \ Statement\n              for Referral\", Work in Progress, February 2011.\n\
    \   [RFC3971]  Arkko, J., Kempf, J., Zill, B., and P. Nikander, \"SEcure\n   \
    \           Neighbor Discovery (SEND)\", RFC 3971, March 2005.\n   [RFC4033] \
    \ Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,\
    \ \"DNS Security Introduction and Requirements\",\n              RFC 4033, March\
    \ 2005.\n   [RFC5507]  IAB, Faltstrom, P., Austein, R., and P. Koch, \"Design\n\
    \              Choices When Expanding the DNS\", RFC 5507, April 2009.\n   [RFC6144]\
    \  Baker, F., Li, X., Bao, C., and K. Yin, \"Framework for\n              IPv4/IPv6\
    \ Translation\", RFC 6144, April 2011.\n   [RFC6891]  Damas, J., Graff, M., and\
    \ P. Vixie, \"Extension Mechanisms\n              for DNS (EDNS(0))\", STD 75,\
    \ RFC 6891, April 2013.\n   [SYNTH-FLAG-2010]\n              Korhonen, J. and\
    \ T. Savolainen, \"EDNS0 Option for\n              Indicating AAAA Record Synthesis\
    \ and Format\", Work\n              in Progress, July 2010.\n   [SYNTH-FLAG-2011]\n\
    \              Korhonen, J. and T. Savolainen, \"EDNS0 Option for\n          \
    \    Indicating AAAA Record Synthesis and Format\", Work\n              in Progress,\
    \ February 2011.\n   [V4V6MC-FRAMEWORK]\n              Venaas, S., Li, X., and\
    \ C. Bao, \"Framework for IPv4/IPv6\n              Multicast Translation\", Work\
    \ in Progress, June 2011.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jouni Korhonen (editor)\n   Broadcom\n   Porkkalankatu\
    \ 24\n   FIN-00180 Helsinki\n   Finland\n   EMail: jouni.nospam@gmail.com\n  \
    \ Teemu Savolainen (editor)\n   Nokia\n   Hermiankatu 12 D\n   FI-33720 Tampere\n\
    \   Finland\n   EMail: teemu.savolainen@nokia.com\n"
