- contents:
  - '             IPsec Configuration Policy Information Model

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document presents an object-oriented information model of IP\n
    \  Security (IPsec) policy designed to facilitate agreement about the\n   content
    and semantics of IPsec policy, and enable derivations of\n   task-specific representations
    of IPsec policy such as storage schema,\n   distribution representations, and
    policy specification languages used\n   to configure IPsec-enabled endpoints.
    \ The information model\n   described in this document models the configuration
    parameters\n   defined by IPSec.  The information model also covers the parameters\n
    \  found by the Internet Key Exchange protocol (IKE).  Other key\n   exchange
    protocols could easily be added to the information model by\n   a simple extension.
    \ Further extensions can further be added easily\n   due to the object-oriented
    nature of the model.\n   This information model is based upon the core policy
    classes as\n   defined in the Policy Core Information Model (PCIM) and in the
    Policy\n   Core Information Model Extensions (PCIMe).\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction..................................................
    \ 3\n   2.  UML Conventions...............................................  4\n
    \  3.  IPsec Policy Model Inheritance Hierarchy......................  6\n   4.
    \ Policy Classes................................................ 11\n       4.1.
    \ The Class SARule........................................ 13\n       4.2.  The
    Class IKERule....................................... 17\n       4.3.  The Class
    IPsecRule..................................... 18\n       4.4.  The Association
    Class IPsecPolicyForEndpoint............ 18\n       4.5.  The Association Class
    IPsecPolicyForSystem.............. 19\n       4.6.  The Aggregation Class SAConditionInRule.................
    19\n       4.7.  The Aggregation Class PolicyActionInSARule.............. 20\n
    \  5.  Condition and Filter Classes.................................. 22\n       5.1.
    \ The Class SACondition................................... 23\n       5.2.  The
    Class IPHeadersFilter............................... 23\n       5.3.  The Class
    CredentialFilterEntry......................... 23\n       5.4.  The Class IPSOFilterEntry...............................
    25\n       5.5.  The Class PeerIDPayloadFilterEntry...................... 26\n
    \      5.6.  The Association Class FilterOfSACondition............... 28\n       5.7.
    \ The Association Class AcceptCredentialFrom.............. 29\n   6.  Action Classes................................................
    30\n       6.1.  The Class SAAction...................................... 32\n
    \      6.2.  The Class SAStaticAction................................ 33\n       6.3.
    \ The Class IPsecBypassAction............................. 34\n       6.4.  The
    Class IPsecDiscardAction............................ 34\n       6.5.  The Class
    IKERejectAction............................... 35\n       6.6.  The Class PreconfiguredSAAction.........................
    35\n       6.7.  The Class PreconfiguredTransportAction.................. 36\n
    \      6.8.  The Class PreconfiguredTunnelAction..................... 37\n       6.9.
    \ The Class SANegotiationAction........................... 37\n       6.10. The
    Class IKENegotiationAction.......................... 38\n       6.11. The Class
    IPsecAction................................... 39\n       6.12. The Class IPsecTransportAction..........................
    41\n       6.13. The Class IPsecTunnelAction............................. 42\n
    \      6.14. The Class IKEAction..................................... 42\n       6.15.
    The Class PeerGateway................................... 44\n       6.16. The
    Association Class PeerGatewayForTunnel.............. 45\n       6.17. The Aggregation
    Class ContainedProposal................. 46\n       6.18. The Association Class
    HostedPeerGatewayInformation...... 47\n       6.19. The Association Class TransformOfPreconfiguredAction....
    48\n       6.20  The Association Class PeerGatewayForPreconfiguredTunnel. 49\n
    \  7.  Proposal and Transform Classes................................ 50\n       7.1.
    \ The Abstract Class SAProposal........................... 50\n       7.2.  The
    Class IKEProposal................................... 51\n       7.3.  The Class
    IPsecProposal................................. 54\n       7.4.  The Abstract Class
    SATransform.......................... 54\n       7.5.  The Class AHTransform...................................
    56\n       7.6.  The Class ESPTransform.................................. 57\n
    \      7.7.  The Class IPCOMPTransform............................... 59\n       7.8.
    \ The Association Class SAProposalInSystem................ 60\n       7.9.  The
    Aggregation Class ContainedTransform................ 60\n       7.10. The Association
    Class SATransformInSystem............... 62\n   8.  IKE Service and Identity Classes..............................
    63\n       8.1.  The Class IKEService.................................... 64\n
    \      8.2.  The Class PeerIdentityTable............................. 64\n       8.3.
    \ The Class PeerIdentityEntry............................. 65\n       8.4.  The
    Class AutostartIKEConfiguration..................... 66\n       8.5.  The Class
    AutostartIKESetting........................... 67\n       8.6.  The Class IKEIdentity...................................
    69\n       8.7.  The Association Class HostedPeerIdentityTable........... 71\n
    \      8.8.  The Aggregation Class PeerIdentityMember................ 71\n       8.9.
    \ The Association Class IKEServicePeerGateway............. 72\n       8.10. The
    Association Class IKEServicePeerIdentityTable....... 73\n       8.11. The Association
    Class IKEAutostartSetting............... 73\n       8.12. The Aggregation Class
    AutostartIKESettingContext........ 74\n       8.13. The Association Class IKEServiceForEndpoint.............
    75\n       8.14. The Association Class IKEAutostartConfiguration......... 76\n
    \      8.15. The Association Class IKEUsesCredentialManagementService 77\n       8.16.
    The Association Class EndpointHasLocalIKEIdentity....... 77\n       8.17. The
    Association Class CollectionHasLocalIKEIdentity..... 78\n       8.18. The Association
    Class IKEIdentitysCredential............ 79\n   9.  Implementation Requirements...................................
    79\n   10. Security Considerations....................................... 84\n
    \  11. Intellectual Property Statement............................... 84\n   12.
    References ................................................... 85\n       12.1.
    Normative References.................................... 85\n       12.2. Informative
    References.................................. 86\n   13. Disclaimer....................................................
    86\n   14. Acknowledgments............................................... 86\n
    \  15. Authors' Addresses............................................ 87\n   16.
    Full Copyright Statement...................................... 88\n"
  title: Table of Contents
- contents:
  - "1. Introduction\n   IP security (IPsec) policy may assume a variety of forms
    as it\n   travels from storage, to distribution, to decision points.  At each\n
    \  step, it needs to be represented in a way that is convenient for the\n   current
    task.  For example, the policy could exist as, but is not\n   limited to:\n   o
    \ A Lightweight Directory Access Protocol (LDAP) [LDAP] schema in a\n      directory.\n
    \  o  An on-the-wire representation over a transport protocol like the\n      Common
    Object Policy Service (COPS) [COPS, COPSPR].\n   o  A text-based policy specification
    language suitable for editing by\n      an administrator.\n   o  An Extensible
    Markup Language (XML) document.\n   Each of these task-specific representations
    should be derived from a\n   canonical representation that precisely specifies
    the content and\n   semantics of the IPsec policy.  This document captures this
    concept\n   and introduces a task-independent canonical representation for IPsec\n
    \  policies.\n   This document focuses mainly on the existing protocols [COMP,
    ESP,\n   AH, DOI, IKE].  The model can easily be extended if needed due to its\n
    \  object-oriented nature.\n   This document is organized as follows:\n   o  Section
    2 provides a quick introduction to the Unified Modeling\n      Language (UML)
    graphical notation conventions used in this\n      document.\n   o  Section 3
    provides the inheritance hierarchy that describes where\n      the IPsec policy
    classes fit into the policy class hierarchy\n      already defined by the Policy
    Core Information Model (PCIM) and\n      Policy Core Information Model Extensions
    (PCIMe).\n   o  Sections 4 through 8 describe the classes that make up the IPsec\n
    \     policy model.\n   o  Section 9 presents the implementation requirements
    for the classes\n      in the model (i.e., the MUST/MAY/SHOULD status).\n   The
    key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",
    SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document
    are to be interpreted as described in [KEYWORDS].\n"
  title: 1. Introduction
- contents:
  - "2. UML Conventions\n   For this document, a UML static class diagram was chosen
    as the\n   canonical representation for the IPsec policy model, because UML\n
    \  provides a graphical, task-independent way to model systems.  A\n   treatise
    on the graphical notation used in UML is beyond the scope of\n   this paper.  However,
    given the use of ASCII drawing for UML static\n   class diagrams, a description
    of the notational conventions used in\n   this document is in order:\n   o  Boxes
    represent classes, with class names in brackets ([])\n      representing an abstract
    class.\n   o  A line that terminates with an arrow (<, >, ^, v) denotes\n      inheritance.
    \ The arrow always points to the parent class.\n      Inheritance can also be
    called generalization or specialization\n      (depending upon the reference point).
    \ A base class is a\n      generalization of a derived class, and a derived class
    is a\n      specialization of a base class.\n   o  Associations are used to model
    a relationship between two classes.\n      Classes that share an association are
    connected using a line.  A\n      special kind of association is also used:  an
    aggregation.  An\n      aggregation models a whole-part relationship between two
    classes.\n      Associations, and therefore aggregations, are also modeled as\n
    \     classes.\n   o  A line that begins with an \"o\" denotes aggregation.  Aggregation\n
    \     denotes containment in which the contained class and the\n      containing
    class have independent lifetimes.\n   o  At each end of a line representing an
    association appears a\n      cardinality (i.e., each association has 2 cardinalities).\n
    \     Cardinalities indicate the constraints on the number of object\n      instances
    in a set of relationships.  The cardinality on a given\n      end of an association
    indicates the number of different object\n      instances of that class that may
    be associated with a single\n      object instance of the class on the other end
    of the association.\n      The cardinality may be:\n      -  a range in the form
    \"lower bound..upper bound\" indicating the\n         minimum and maximum number
    of objects.\n      -  a number that indicates the exact number of objects.\n      -
    \ an asterisk indicating any number of objects, including zero.\n         An asterisk
    is shorthand for 0..n.\n      -  the letter n indicating from 1 to many.  The
    letter n is\n         shorthand for 1..n.\n   o  A class that has an association
    may have a \"w\" next to the line\n      representing the association.  This is
    called a weak association\n      and is discussed in [PCIM].\n   It should be
    noted that the UML static class diagram presented is a\n   conceptual view of
    IPsec policy designed to aid in understanding.  It\n   does not necessarily get
    translated class for class into another\n   representation.  For example, an LDAP
    implementation may flatten out\n   the representation to fewer classes (because
    of the inefficiency of\n   following references).\n"
  title: 2. UML Conventions
- contents:
  - "3. IPsec Policy Model Inheritance Hierarchy\n   Like PCIM and PCIMe, the IPsec
    Configuration Policy Model derives\n   from and uses classes defined in the DMTF
    [DMTF] Common Information\n   Model (CIM).  The following tree represents the
    inheritance hierarchy\n   for the IPsec Policy Model classes and how they fit
    into PCIM, PCIMe\n   and the other DMTF models (see Appendices for descriptions
    of classes\n   that are not being introduced as part of IPsec model).  CIM classes\n
    \  that are not used as a superclass to derive new classes, but are used\n   only
    as references, are not included in this inheritance hierarchy,\n   but can be
    found in the appropriate DMTF document:  Core Model\n   [CIMCORE], User Model
    [CIMUSER] or, Network Model [CIMNETWORK].\n         ManagedElement (DMTF Core
    Model)\n         |\n         +--Collection (DMTF Core Model)\n         |  |\n
    \        |  +--PeerIdentityTable\n         |\n         +--ManagedSystemElement
    (DMTF Core Model)\n         |  |\n         |  +--LogicalElement (DMTF Core Model)\n
    \        |     |\n         |     +--FilterEntryBase (DMTF Network Model)\n         |
    \    |  |\n         |     |  +--CredentialFilterEntry\n         |     |  |\n         |
    \    |  +--IPHeadersFilter (PCIMe)\n         |     |  |\n         |     |  +--IPSOFilterEntry\n
    \        |     |  |\n         |     |  +--PeerIDPayloadFilterEntry\n         |
    \    |\n         |     +--PeerGateway\n         |     |\n         |     +--PeerIdentityEntry\n
    \        |     |\n         |     +--Service (DMTF Core Model)\n         |        |\n
    \        |        +--IKEService\n         |\n         +--OrganizationalEntity
    (DMTF User Model)\n         |  |\n         |  +--UserEntity (DMTF User Model)\n
    \        |     |\n         |     +--UsersAccess (DMTF User Model)\n         |
    \       |\n         |        +--IKEIdentity\n         |\n         +--Policy (PCIM)\n
    \        |  |\n         |  +--PolicyAction (PCIM)\n         |  |  |\n         |
    \ |  +--CompoundPolicyAction (PCIMe)\n         |  |  |\n         |  |  +--SAAction\n
    \        |  |     |\n         |  |     +--SANegotiationAction\n         |  |     |
    \ |\n         |  |     |  +--IKENegotiationAction\n         |  |     |     |\n
    \        |  |     |     +--IKEAction\n         |  |     |     |\n         |  |
    \    |     +--IPsecAction\n         |  |     |        |\n         |  |     |        +--IPsecTransportAction\n
    \        |  |     |        |\n         |  |     |        +--IPsecTunnelAction\n
    \        |  |     |\n         |  |     +--SAStaticAction\n         |  |        |\n
    \        |  |        +--IKERejectAction\n         |  |        |\n         |  |
    \       +--IPsecBypassAction\n         |  |        |\n         |  |        +--IPsecDiscardAction\n
    \        |  |        |\n         |  |        +--PreconfiguredSAAction\n         |
    \ |           |\n         |  |           +--PreconfiguredTransportAction\n         |
    \ |           |\n         |  |           +--PreconfiguredTunnelAction\n         |
    \ |\n         |  +--PolicyCondition (PCIM)\n         |  |  |\n         |  |  +--SACondition\n
    \        |  |\n         |  +--PolicySet (PCIMe)\n         |  |  |\n         |
    \ |  +--PolicyGroup (PCIM & PCIMe)\n         |  |  |\n         |  |  +--PolicyRule
    (PCIM & PCIMe)\n         |  |     |\n         |  |     +--SARule\n         |  |
    \       |\n         |  |        +--IKERule\n         |  |        |\n         |
    \ |        +--IPsecRule\n         |  |\n         |  +--SAProposal\n         |
    \ |  |\n         |  |  +--IKEProposal\n         |  |  |\n         |  |  +--IPsecProposal\n
    \        |  |\n         |  +--SATransform\n         |     |\n         |     +--AHTransform\n
    \        |     |\n         |     +--ESPTransform\n         |     |\n         |
    \    +--IPCOMPTransform\n         |\n         +--Setting (DMTF Core Model)\n         |
    \ |\n         |  +--SystemSetting (DMTF Core Model)\n         |     |\n         |
    \    +--AutostartIKESetting\n         |\n         +--SystemConfiguration (DMTF
    Core Model)\n            |\n            +--AutostartIKEConfiguration\n   The following
    tree represents the inheritance hierarchy of the IPsec\n   policy model association
    classes and how they fit into PCIM and the\n   other DMTF models (see Appendices
    for description of association\n   classes that are not being introduced as part
    of IPsec model).\n         Dependency (DMTF Core Model)\n         |\n         +--AcceptCredentialsFrom\n
    \        |\n         +--ElementAsUser (DMTF User Model)\n         |  |\n         |
    \ +--EndpointHasLocalIKEIdentity\n         |  |\n         |  +--CollectionHasLocalIKEIdentity\n
    \        |\n         +--FilterOfSACondition\n         |\n         +--HostedPeerGatewayInformation\n
    \        |\n         +--HostedPeerIdentityTable\n         |\n         +--IKEAutostartConfiguration\n
    \        |\n         +--IKEServiceForEndpoint\n         |\n         +--IKEServicePeerGateway\n
    \        |\n         +--IKEServicePeerIdentityTable\n         |\n         +--IKEUsesCredentialManagementService\n
    \        |\n         +--IPsecPolicyForEndpoint\n         |\n         +--IPsecPolicyForSystem\n
    \        |\n         +--PeerGatewayForPreconfiguredTunnel\n         |\n         +--PeerGatewayForTunnel\n
    \        |\n         +--PolicyInSystem (PCIM)\n         |  |\n         |  +--SAProposalInSystem\n
    \        |  |\n         |  +--SATransformInSystem\n         |\n         +--TransformOfPreconfiguredAction\n
    \        |\n         +--UsersCredential (DMTF User Model)\n            |\n            +--IKEIdentitysCredential\n
    \        ElementSetting (DMTF Core Model)\n         |\n         +--IKEAutostartSetting\n
    \        MemberOfCollection (DMTF Core Model)\n         |\n         +--PeerIdentityMember\n
    \        PolicyComponent (PCIM)\n         |\n         +--ContainedProposal\n         |\n
    \        +--ContainedTransform\n         |\n         +--PolicyActionStructure
    (PCIMe)\n         |  |\n         |  +--PolicyActionInPolicyRule (PCIM & PCIMe)\n
    \        |     |\n         |     +--PolicyActionInSARule\n         |\n         +--PolicyConditionStructure
    (PCIMe)\n         |  |\n         |  +--PolicyConditionInPolicyRule (PCIM & PCIMe)\n
    \        |     |\n         |     +--SAConditionInRule\n         |\n         +--PolicySetComponent
    (PCIMe)\n         SystemSettingContext (DMTF Core Model)\n         |\n         +--AutostartIKESettingContext\n"
  title: 3. IPsec Policy Model Inheritance Hierarchy
- contents:
  - "4. Policy Classes\n   The IPsec policy classes represent the set of policies
    that are\n   contained on a system.\n                                  +--------------+\n
    \                                 | [PolicySet]  |*\n                                  |
    \ ([PCIME])   |o--+\n                                  +--------------+   |\n
    \                                        ^   *|      |(a)\n                                         |
    \   +------+\n              +--------------------------+\n              |                          |\n
    \      +-------------+            +--------------+\n       | PolicyGroup |0..1
    \       |  PolicyRule  |*\n       |  ([PCIM])   |-----+      |  ([PCIM])    |o--+\n
    \      +-------------+     |      +--------------+   |(d)\n          0..1|            |
    \           ^            |\n              |(b)         |            |            |*\n
    \            *|            |            | +---------------------------+\n   +--------------------+
    \ |(c)         | | PolicyTimePeriodCondition |\n   | IPProtocolEndpoint |  |            |
    |         ([PCIM])          |\n   |   ([CIMNETWORK])   |  |            | +---------------------------+\n
    \  +--------------------+  |            |\n         +------------+    |      *+----------+*\n
    \        |   System   |----+    +-o|  SARule  |o-------+\n         | ([CIMCORE])|*
    \       |  +----------+        |(f)\n         +------------+         |       ^
    \             |\n                             (e)|       |              |n\n         +-------------+n
    \      |       |        +--------------+\n         | SACondition |--------+       |
    \       |[PolicyAction]|\n         +-------------+                |        |   ([PCIM])
    \  |\n                                        |        +--------------+\n                                        |
    \         *|        ^\n                                        |           |(g)
    \    |\n                                        |           |        +-------+\n
    \                                       |          *o        |       |\n                                        |
    \ +----------------------+  |\n                                        |  | CompoundPolicyAction
    |  |\n                                        |  |       ([PCIME])      |  |\n
    \                                       |  +----------------------+  |\n                                        |
    \                           |\n                              +---------+----+
    \            +---------+\n                              |              |             |\n
    \                        +---------+   +-----------+   +----------+\n                         |
    IKERule |   | IPsecRule |   | SAAction |\n                         +---------+
    \  +-----------+   +----------+\n      (a)  PolicySetComponent ([PCIME])\n      (b)
    \ IPsecPolicyForEndpoint\n      (c)  IPsecPolicyForSystem\n      (d)  PolicyRuleValidityPeriod
    ([PCIM])\n      (e)  SAConditionInRule\n      (f)  PolicyActionInSARule\n      (g)
    \ PolicyActionInPolicyAction ([PCIME])\n   A PolicyGroup represents the set of
    policies that are used on an\n   interface.   This PolicyGroup SHOULD be associated
    either directly\n   with the IPProtocolEndpoint class instance that represents
    the\n   interface (via the IPsecPolicyForEndpoint association) or indirectly\n
    \  (via the IPsecPolicyForSystem association) associated with the System\n   that
    hosts the interface.\n   The IKE and IPsec rules are used to build or to negotiate
    the IPsec\n   Security Association Database (SADB).  The IPsec rules represent
    the\n   Security Policy Database.  The SADB itself is not modeled by this\n   document.\n
    \  The IKE and IPsec rules can be described as (also see section 6 about\n   actions):\n
    \  o  An egress unprotected packet will first be checked against the\n      IPsec
    rules.  If a match is found, the SADB will be checked.  If\n      there is no
    corresponding IPsec SA in the SADB, and if IKE\n      negotiation is required
    by the IPsec rule, the corresponding IKE\n      rules will be used.  The negotiated
    or preconfigured SA will then\n      be installed in the SADB.\n   o  An ingress
    unprotected packet will first be checked against the\n      IPsec rules.  If a
    match is found, the SADB will be checked for a\n      corresponding IPsec SA.
    \ If there is no corresponding IPsec SA and\n      a preconfigured SA exists,
    this preconfigured SA will be installed\n      in the IPsec SADB.  This behavior
    should only apply to bypass and\n      discard actions.\n   o  An ingress protected
    packet will first be checked against the\n      IPsec rules.  If a match is found,
    the SADB will be checked for a\n      corresponding IPsec SA.  If there is no
    corresponding IPsec SA and\n      a preconfigured SA exists, this preconfigured
    SA will be installed\n      in the IPsec SADB.\n   o  An ingress IKE negotiation
    packet, which is not part of an\n      existing IKE SA, will be checked against
    the IKE rules.  The\n      SACondition for the IKERule will usually be composed
    of a\n      PeerIDPayloadFilterEntry (typically for an aggressive mode IKE\n      negotiation)
    or an IPHeadersFilter.  The negotiated SA will then\n      be installed in the
    SADB.\n   It is expected that when an IKE negotiation is required to be\n   initiated
    by an IPsec rule, the set of IKE rules will be checked.\n   The IKE rules check
    will be based on the outgoing IKE packet using\n   IPHeadersFilter entries (typically
    using the HdrDstAddress property).\n"
  - contents:
    - "4.1. The Class SARule\n   The class SARule serves as a base class for IKERule
      and IPsecRule.\n   Even though the class is concrete, it MUST not be instantiated.
      \ It\n   defines a common connection point for associations to conditions and\n
      \  actions for both types of rules.  Through its derivation from\n   PolicyRule,
      an SARule (and therefore IKERule and IPsecRule) also has\n   the PolicyRuleValidityPeriod
      association.\n   Each SARule in a valid PolicyGroup MUST have a unique associated\n
      \  priority number in the PolicySetComponent.Priority.  The class\n   definition
      for SARule is as follows:\n      NAME         SARule\n      DESCRIPTION  A base
      class for IKERule and IPsecRule.\n      DERIVED FROM PolicyRule (see [PCIM]
      & [PCIME])\n      ABSTRACT     FALSE\n      PROPERTIES   PolicyRuleName (from
      PolicyRule)\n                   Enabled (from PolicyRule)\n                   ConditionListType
      (from PolicyRule)\n                   RuleUsage (from PolicyRule)\n                   Mandatory
      (from PolicyRule)\n                   SequencedActions (from PolicyRule)\n                   ExecutionStrategy
      (from PolicyRule)\n                   PolicyRoles (from PolicySet)\n                   PolicyDecisionStrategy
      (from PolicySet)\n                   LimitNegotiation\n"
    - contents:
      - "4.1.1. The Properties PolicyRuleName, Enabled, ConditionListType,\n       RuleUsage,
        Mandatory, SequencedActions, PolicyRoles, and\n       PolicyDecisionStrategy\n
        \  For a description of these properties, see [PCIM] and [PCIME].\n   In SARule
        subclass instances:\n   -  if the property Mandatory exists, it MUST be set
        to \"true\".\n   -  if the property SequencedActions exists, it MUST be set
        to\n      \"mandatory\".\n   -  the property PolicyRoles is not used in the
        device-level model.\n   -  if the property PolicyDecisionStrategy exists,
        it must be set to\n      \"FirstMatching\".\n"
      title: 4.1.1. The Properties PolicyRuleName, Enabled, ConditionListType,
    - contents:
      - "4.1.2. The Property ExecutionStrategy\n   The ExecutionStrategy properties
        in the PolicyRule subclasses (and in\n   the CompoundPolicyAction class) determine
        the behavior of the\n   contained actions.  It defines the strategy to be
        used in executing\n   the sequenced actions aggregated by a rule or a compound
        action.  In\n   the case of actions within a rule, the PolicyActionInSARule\n
        \  aggregation is used to collect the actions into an ordered set; in\n   the
        case of a compound action, the PolicyActionInPolicyAction\n   aggregation
        is used to collect the actions into an ordered subset.\n   There are three
        execution strategies: do until success, do all, and\n   do until failure.\n
        \  \"Do Until Success\" causes the execution of actions according to the\n
        \  ActionOrder property in the aggregation instances until a successful\n
        \  execution of a single action.  These actions may be evaluated to\n   determine
        if they are appropriate to execute rather than blindly\n   trying each of
        the actions until one succeeds.  For an initiator,\n   they are tried in the
        ActionOrder until the list is exhausted or one\n   completes successfully.
        \ For example, an IKE initiator may have\n   several IKEActions for the same
        SACondition.  The initiator will try\n   all IKEActions in the order defined
        by ActionOrder.  I.e., it will\n   possibly try several phase 1 negotiations
        with different modes (main\n   mode then aggressive mode) and/or with multiple
        IKE peers.  For a\n   responder, when there is more than one action in the
        rule with \"do\n   until success\" condition clause, this provides alternative
        actions\n   depending on the received proposals.  For example, the same IKERule\n
        \  may be used to handle aggressive mode and main mode negotiations with\n
        \  different actions.  The responder uses the first appropriate action\n   in
        the list of actions.\n   \"Do All\" causes the execution of all the actions
        in the aggregated\n   set according to their defined order.  The execution
        continues\n   regardless of failures.\n   \"Do Until Failure\" causes the
        execution of all actions according to a\n   predefined order until the first
        failure in execution of an action\n   instance.  Please note that if all actions
        are successful, then the\n   aggregated result is a failure.  This execution
        strategy is inherited\n   from [PCIME] and is not expected to be of any use
        for IPsec\n   configuration.\n   For example, in a nested SAs case, the actions
        of an initiator's rule\n   might be structured as:\n   IPsecRule.ExecutionStrategy='Do
        All'\n   |\n   +---1--- IPsecTunnelAction    // set up SA from host to gateway\n
        \  |\n   +---2--- IPsecTransportAction // set up SA from host through\n                                 //
        tunnel to remote host\n   Another example, showing a rule with fallback actions
        might be\n   structured as:\n   IPsecRule.ExecutionStrategy='Do Until Success'\n
        \  |\n   +---6--- IPsecTransportAction // negotiate SA with peer\n   |\n   +---9---
        IPsecBypassAction    // but if you must, allow in the clear\n   The CompoundPolicyAction
        class (See [PCIME]) may be used in\n   constructing the actions of IKE and
        IPsec rules when those rules\n   specify both multiple actions and fallback
        actions.  The\n   ExecutionStrategy property in CompoundPolicyAction is used
        in\n   conjunction with that in the PolicyRule.\n   For example, in nesting
        SAs with a fallback security gateway, the\n   actions of a rule might be structured
        as:\n   IPsecRule.ExecutionStrategy='Do All'\n   |\n   +---1--- CompoundPolicyAction.ExecutionStrategy='Do
        Until Success'\n   |        |\n   |        +---1--- IPsecTunnelAction  //
        set up SA from host to\n   |        |                           // gateway1\n
        \  |        |\n   |        +---2--- IPsecTunnelAction  // or set up SA to
        gateway2\n   |\n   +---2--- IPsecTransportAction        // then set up SA
        from host\n                                        // through tunnel to remote\n
        \                                       // host\n   In the case of \"Do All\",
        a couple of actions can be executed\n   successfully before a subsequent action
        fails.  In this case, some\n   IKE or IPsec actions may have resulted in SAs
        creation.  Even if the\n   net effect of the aggregated actions is failure,
        those created SAs\n   MAY be kept or MAY be deleted.\n   In the case of \"Do
        All\", the IPsec selectors to be used during IPsec\n   SA negotiation are:\n
        \  -  for the last IPsecAction of the aggregation (i.e., usually the\n      innermost
        IPsec SA): this is the combination of the\n      IPHeadersFilter class and
        of the Granularity property of the\n      IPsecAction.\n   -  for all other
        IPsecActions of the aggregation: the selector is the\n      source IP address
        which is the local IP address, and the\n      destination IP address is the
        PeerGateway IP address of the\n      following IPsecAction of the \"Do All\"
        aggregation.  NB: the\n      granularity is IP address to IP address.\n   If
        the above behavior is not desirable, the alternative is to define\n   several
        SARules, one for each IPsec SA to be built.  This will allow\n   the definition
        of specific IPsec selectors for all IPsecActions.\n"
      title: 4.1.2. The Property ExecutionStrategy
    - contents:
      - "4.1.3  The Property LimitNegotiation\n   The property LimitNegotiation is
        used as part of processing either an\n   IKE or an IPsec rule.\n   Before
        proceeding with a phase 1 negotiation, this property is\n   checked to determine
        whether the negotiation role of the rule matches\n   that defined for the
        negotiation being undertaken (e.g., Initiator,\n   Responder, or Both).  If
        this check fails (e.g., the current role is\n   IKE responder, while the rule
        specifies IKE initiator), then the IKE\n   negotiation is stopped.  Note that
        this only applies to new IKE phase\n   1 negotiations and has no effect on
        either renegotiation or refresh\n   operations with peers for which an established
        SA already exists.\n   Before proceeding with a phase 2 negotiation, the LimitNegotiation\n
        \  property of the IPsecRule is first checked to determine if the\n   negotiation
        role indicated for the rule matches that of the current\n   negotiation (Initiator,
        Responder, or Either).  Note that this limit\n   applies only to new phase
        2 negotiations.  It is ignored when an\n   attempt is made to refresh an expiring
        SA (either side can initiate a\n   refresh operation).  The IKE system can
        determine that the\n   negotiation is a refresh operation by checking to see
        if the selector\n   information matches that of an existing SA.  If LimitNegotiation
        does\n   not match and the selector corresponds to a new SA, the negotiation\n
        \  is stopped.\n   The property is defined as follows:\n      NAME         LimitNegotiation\n
        \     DESCRIPTION  Limits the role to be undertaken during negotiation.\n
        \     SYNTAX       unsigned 16-bit integer\n      VALUE        1 - initiator-only\n
        \                  2 - responder-only\n                   3 - both\n"
      title: 4.1.3  The Property LimitNegotiation
    title: 4.1. The Class SARule
  - contents:
    - "4.2. The Class IKERule\n   The class IKERule associates Conditions and Actions
      for IKE phase 1\n   negotiations.  The class definition for IKERule is as follows:\n
      \     NAME         IKERule\n      DESCRIPTION  Associates Conditions and Actions
      for IKE phase 1\n                   negotiations.\n      DERIVED FROM SARule\n
      \     ABSTRACT     FALSE\n      PROPERTIES   same as SARule, plus\n                   IdentityContexts\n"
    - contents:
      - "4.2.1. The Property IdentityContexts\n   The IKE service of a security endpoint
        may have multiple identities\n   for use in different situations.  The combination
        of the interface\n   (represented by the IPProtocolEndpoint or by a collection
        of\n   IPProtocolEndpoints), the identity type (as specified in the\n   IKEAction),
        and the IdentityContexts specifies a unique identity.\n   The IdentityContexts
        property specifies the context to select the\n   relevant IKE identity to
        be used during the further IKEAction.  A\n   context may be a VPN name or
        other identifier for selecting the\n   appropriate identity for use on the
        protected IPProtocolEndpoint (or\n   collection of IPProtocolEndpoints).\n
        \  IdentityContexts is an array of strings.  The multiple values in the\n
        \  array are logically ORed together in evaluating the IdentityContexts.\n
        \  Each value in the array may be the composition of multiple context\n   names.
        \ So, a single value may be a single context name (e.g.,\n   \"CompanyXVPN\"),
        or it may be combination of contexts.  When an array\n   value is a composition,
        the individual values are logically ANDed\n   together for evaluation purposes
        and the syntax is:\n      <ContextName>[&&<ContextName>]*\n   where the individual
        context names appear in alphabetical order\n   (according to the collating
        sequence for UCS-2).  So, for example,\n   the values \"CompanyXVPN\", \"CompanyYVPN&&TopSecret\",\n
        \  \"CompanyZVPN&&Confidential\" means that, for the appropriate\n   IPProtocolEndpoint
        and IdentityType, the contexts are matched if the\n   identity specifies \"CompanyXVPN\",
        \"CompanyYVPN&&TopSecret\", or\n   \"CompanyZVPN&&Confidential\".\n   The
        property is defined as follows:\n      NAME         IdentityContexts\n      DESCRIPTION
        \ Specifies the context in which to select the IKE\n                   identity.\n
        \     SYNTAX       string array\n"
      title: 4.2.1. The Property IdentityContexts
    title: 4.2. The Class IKERule
  - contents:
    - "4.3. The Class IPsecRule\n   The class IPsecRule associates Conditions and
      Actions for IKE phase 2\n   negotiations for the IPsec DOI.  The class definition
      for IPsecRule\n   is as follows:\n      NAME         IPsecRule\n      DESCRIPTION
      \ Associates Conditions and Actions for IKE phase 2\n                   negotiations
      for the IPsec DOI.\n      DERIVED FROM SARule\n      ABSTRACT     FALSE\n      PROPERTIES
      \  same as SARule\n"
    title: 4.3. The Class IPsecRule
  - contents:
    - "4.4. The Association Class IPsecPolicyForEndpoint\n   The class IPsecPolicyForEndpoint
      associates a PolicyGroup with a\n   specific network interface.  If an IPProtocolEndpoint
      of a system\n   does not have an IPsecPolicyForEndpoint-associated PolicyGroup,
      then\n   the IPsecPolicyForSystem associated PolicyGroup is used for that\n
      \  endpoint.  The class definition for IPsecPolicyForEndpoint is as\n   follows:\n
      \     NAME         IPsecPolicyForEndpoint\n      DESCRIPTION  Associates a policy
      group to a network interface.\n      DERIVED FROM Dependency (see [CIMCORE])\n
      \     ABSTRACT     FALSE\n      PROPERTIES   Antecedent[ref IPProtocolEndpoint[0..n]]\n
      \                  Dependent[ref PolicyGroup[0..1]]\n"
    - contents:
      - "4.4.1. The Reference Antecedent\n   The property Antecedent is inherited
        from Dependency and is\n   overridden to refer to an IPProtocolEndpoint instance.
        \ The [0..n]\n   cardinality indicates that a PolicyGroup instance may be
        associated\n   with zero or more IPProtocolEndpoint instances.\n"
      title: 4.4.1. The Reference Antecedent
    - contents:
      - "4.4.2. The Reference Dependent\n   The property Dependent is inherited from
        Dependency and is overridden\n   to refer to a PolicyGroup instance.  The
        [0..1] cardinality indicates\n   that an IPProtocolEndpoint instance may have
        an association to at\n   most one PolicyGroup instance.\n"
      title: 4.4.2. The Reference Dependent
    title: 4.4. The Association Class IPsecPolicyForEndpoint
  - contents:
    - "4.5. The Association Class IPsecPolicyForSystem\n   The class IPsecPolicyForSystem
      associates a PolicyGroup with a\n   specific system.  If an IPProtocolEndpoint
      of a system does not have\n   an IPsecPolicyForEndpoint-associated PolicyGroup,
      then the\n   IPsecPolicyForSystem associated PolicyGroup is used for that\n
      \  endpoint.  The class definition for IPsecPolicyForSystem is as\n   follows:\n
      \     NAME         IPsecPolicyForSystem\n      DESCRIPTION  Default policy group
      for a system.\n      DERIVED FROM Dependency (see [CIMCORE])\n      ABSTRACT
      \    FALSE\n      PROPERTIES   Antecedent[ref System[0..n]]\n                   Dependent[ref
      PolicyGroup[0..1]]\n"
    - contents:
      - "4.5.1. The Reference Antecedent\n   The property Antecedent is inherited
        from Dependency and is\n   overridden to refer to a System instance.  The
        [0..n] cardinality\n   indicates that a PolicyGroup instance may have an association
        to zero\n   or more System instances.\n"
      title: 4.5.1. The Reference Antecedent
    - contents:
      - "4.5.2. The Reference Dependent\n   The property Dependent is inherited from
        Dependency and is overridden\n   to refer to a PolicyGroup instance.  The
        [0..1] cardinality indicates\n   that a System instance may have an association
        to at most one\n   PolicyGroup instance.\n"
      title: 4.5.2. The Reference Dependent
    title: 4.5. The Association Class IPsecPolicyForSystem
  - contents:
    - "4.6. The Aggregation Class SAConditionInRule\n   The class SAConditionInRule
      associates an SARule with the SACondition\n   instance(s) that trigger(s) it.
      \ The class definition for\n   SAConditionInRule is as follows:\n      NAME
      \        SAConditionInRule\n      DESCRIPTION  Associates an SARule with the
      SACondition instance(s)\n                   that trigger(s) it.\n      DERIVED
      FROM PolicyConditionInPolicyRule (see [PCIM] & [PCIME])\n      ABSTRACT     FALSE\n
      \     PROPERTIES   GroupNumber (from PolicyConditionInPolicyRule)\n                   ConditionNegated
      (from PolicyConditionInPolicyRule)\n                   GroupComponent [ref SARule
      [0..n]]\n                   PartComponent [ref SACondition [1..n]]\n"
    - contents:
      - "4.6.1. The Properties GroupNumber and ConditionNegated\n   For a description
        of these properties, see [PCIM].\n"
      title: 4.6.1. The Properties GroupNumber and ConditionNegated
    - contents:
      - "4.6.2. The Reference GroupComponent\n   The property GroupComponent is inherited
        from\n   PolicyConditionInPolicyRule and is overridden to refer to an SARule\n
        \  instance.  The [0..n] cardinality indicates that an SACondition\n   instance
        may be contained in zero or more SARule instances.\n"
      title: 4.6.2. The Reference GroupComponent
    - contents:
      - "4.6.3. The Reference PartComponent\n   The property PartComponent is inherited
        from\n   PolicyConditionInPolicyRule and is overridden to refer to an\n   SACondition
        instance.  The [1..n] cardinality indicates that an\n   SARule instance MUST
        contain at least one SACondition instance.\n"
      title: 4.6.3. The Reference PartComponent
    title: 4.6. The Aggregation Class SAConditionInRule
  - contents:
    - "4.7. The Aggregation Class PolicyActionInSARule\n   The PolicyActionInSARule
      class associates an SARule with one or more\n   PolicyAction instances.  In
      all cases where an SARule is being used,\n   the contained actions MUST be either
      subclasses of SAAction or\n   instances of CompoundPolicyAction.  For an IKERule,
      the contained\n   actions MUST be related to phase 1 processing, i.e., IKEAction
      or\n   IKERejectAction.  Similarly, for an IPsecRule, contained actions MUST\n
      \  be related to phase 2 or preconfigured SA processing, e.g.,\n   IPsecTransportAction,
      IPsecBypassAction, etc.  The class definition\n   for PolicyActionInSARule is
      as follows:\n      NAME         PolicyActionInSARule\n      DESCRIPTION  Associates
      an SARule with its PolicyAction(s).\n      DERIVED FROM PolicyActionInPolicyRule
      (see [PCIM] & [PCIME])\n      ABSTRACT     FALSE\n      PROPERTIES   GroupComponent
      [ref SARule [0..n]]\n                   PartComponent [ref PolicyAction [1..n]]\n
      \                  ActionOrder (from PolicyActionInPolicyRule)\n"
    - contents:
      - "4.7.1. The Reference GroupComponent\n   The property GroupComponent is inherited
        from\n   PolicyActionInPolicyRule and is overridden to refer to an SARule\n
        \  instance.  The [0..n] cardinality indicates that an SAAction instance\n
        \  may be contained in zero or more SARule instances.\n"
      title: 4.7.1. The Reference GroupComponent
    - contents:
      - "4.7.2. The Reference PartComponent\n   The property PartComponent is inherited
        from PolicyActionInPolicyRule\n   and is overridden to refer to an SAAction
        or CompoundPolicyAction\n   instance.  The [1..n] cardinality indicates that
        an SARule instance\n   MUST contain at least one SAAction or CompoundPolicyAction
        instance.\n"
      title: 4.7.2. The Reference PartComponent
    - contents:
      - "4.7.3. The Property ActionOrder\n   The property ActionOrder is inherited
        from the superclass\n   PolicyActionInPolicyRule.  It specifies the relative
        position of this\n   PolicyAction in the sequence of actions associated with
        a PolicyRule.\n   The ActionOrder MUST be unique so as to provide a deterministic\n
        \  order.  In addition, the actions in an SARule are executed as\n   follows.
        \ See section 4.2.2, ExecutionStrategy, for a discussion on\n   the use of
        the ActionOrder property.\n   The property is defined as follows:\n      NAME
        \        ActionOrder\n      DESCRIPTION  Specifies the order of actions.\n
        \     SYNTAX       unsigned 16-bit integer\n      VALUE        Any value between
        1 and 2^16-1 inclusive.  Lower\n                   values have higher precedence
        (i.e., 1 is the\n                   highest precedence).  The merging order
        of two\n                   SAActions with the same precedence is undefined.\n"
      title: 4.7.3. The Property ActionOrder
    title: 4.7. The Aggregation Class PolicyActionInSARule
  title: 4. Policy Classes
- contents:
  - "5. Condition and Filter Classes\n   The IPsec condition and filter classes are
    used to build the \"if\"\n   part of the IKE and IPsec rules.\n                       *+-------------+\n
    \  +--------------------| SACondition |\n   |                    +-------------+\n
    \  |                         * |\n   |                           |(a)\n   |                         1
    |\n   |                   +---------------+\n   |                   |  FilterList
    \  |\n   |                   |([CIMNETWORK]) |\n   |                   +---------------+\n
    \  |                         1 o\n   |(b)                        |(c)\n   |                         *
    |\n   |                   +-----------------+\n   |                   | FilterEntryBase
    |\n   |                   | ([CIMNETWORK])  |\n   |                   +-----------------+\n
    \  |                           ^\n   |                           |\n   |    +-----------------+
    \   |    +-----------------------+\n   |    | IPHeadersFilter |----+----| CredentialFilterEntry
    |\n   |    |   ([PCIME])     |    |    +-----------------------+\n   |    +-----------------+
    \   |\n   |                           |\n   |    +-----------------+    |    +--------------------------+\n
    \  |    | IPSOFilterEntry |----+----| PeerIDPayloadFilterEntry |\n   |    +-----------------+
    \        +--------------------------+\n   |\n   |           *+-----------------------------+\n
    \  +------------| CredentialManagementService |\n                |         ([CIMUSER])
    \        |\n                +-----------------------------+\n      (a)  FilterOfSACondition\n
    \     (b)  AcceptCredentialsFrom\n      (c)  EntriesInFilterList (see [CIMNETWORK])\n"
  - contents:
    - "5.1. The Class SACondition\n   The class SACondition defines the conditions
      of rules for IKE and\n   IPsec negotiations.  Conditions are associated with
      policy rules via\n   the SAConditionInRule aggregation.  It is used as an anchor
      point to\n   associate various types of filters with policy rules via the\n
      \  FilterOfSACondition association.  It also defines whether Credentials\n   can
      be accepted for a particular policy rule via the\n   AcceptCredentialsFrom association.\n
      \  Associated objects represent components of the condition that may or\n   may
      not apply at a given rule evaluation.  For example, an\n   AcceptCredentialsFrom
      evaluation is only performed when a credential\n   is available to be evaluated
      against the list of trusted credential\n   management services.  Similarly,
      a PeerIDPayloadFilterEntry may only\n   be evaluated when an IDPayload value
      is available to compare with the\n   filter.  Condition components that do not
      have corresponding values\n   with which to evaluate are evaluated as TRUE unless
      the protocol has\n   completed without providing the required information.\n
      \  The class definition for SACondition is as follows:\n      NAME         SACondition\n
      \     DESCRIPTION  Defines the preconditions for IKE and IPsec\n                   negotiations.\n
      \     DERIVED FROM PolicyCondition (see [PCIM])\n      ABSTRACT     FALSE\n
      \     PROPERTIES   PolicyConditionName (from PolicyCondition)\n"
    title: 5.1. The Class SACondition
  - contents:
    - "5.2. The Class IPHeadersFilter\n   The class IPHeadersFilter is defined in
      [PCIME] with the following\n   note:\n   1) to specify 5-tuple filters that
      are to apply symmetrically (i.e.,\n      matches traffic in both directions
      of the same flows which is\n      quite typical for SPD entries for ingress
      and egress traffic), the\n      Direction property of the FilterList SHOULD
      be set to \"Mirrored\".\n"
    title: 5.2. The Class IPHeadersFilter
  - contents:
    - "5.3. The Class CredentialFilterEntry\n   The class CredentialFilterEntry defines
      an equivalence class that\n   match credentials of IKE peers.  Each CredentialFilterEntry
      includes\n   a MatchFieldName that is interpreted according to the\n   CredentialManagementService(s)
      associated with the SACondition\n   (AcceptCredentialsFrom).\n   These credentials
      can be X.509 certificates, Kerberos tickets, or\n   other types of credentials
      obtained during the Phase 1 exchange.\n   Note: this filter entry will probably
      be checked while the IKE\n   negotiation takes place.  If the check is a failure,
      then the IKE\n   negotiation MUST be stopped, and the result of the IKEAction
      which\n   triggered this negotiation is a failure.\n   The class definition
      for CredentialFilterEntry is as follows:\n      NAME         CredentialFilterEntry\n
      \     DESCRIPTION  Specifies a match filter based on the IKE\n                   credentials.\n
      \     DERIVED FROM FilterEntryBase (see [CIMNETWORK])\n      ABSTRACT     FALSE\n
      \     PROPERTIES   Name (from FilterEntryBase)\n                   IsNegated
      (from FilterEntryBase)\n                   MatchFieldName\n                   MatchFieldValue\n
      \                  CredentialType\n"
    - contents:
      - "5.3.1. The Property MatchFieldName\n   The property MatchFieldName specifies
        the sub-part of the credential\n   to match against MatchFieldValue.  The
        property is defined as\n   follows:\n      NAME         MatchFieldName\n      DESCRIPTION
        \ Specifies which sub-part of the credential to match.\n      SYNTAX       string\n
        \     VALUE        This is the string representation of a X.509\n                   certificate
        attribute, e.g.:\n                   - \"serialNumber\"\n                   -
        \"signatureAlgorithm\"\n                   - \"issuerName\"\n                   -
        \"subjectName\"\n                   - \"subjectAltName\"\n                   -
        ...\n"
      title: 5.3.1. The Property MatchFieldName
    - contents:
      - "5.3.2. The Property MatchFieldValue\n   The property MatchFieldValue specifies
        the value to compare with the\n   MatchFieldName in a credential to determine
        if the credential matches\n   this filter entry.  The property is defined
        as follows:\n      NAME         MatchFieldValue\n      DESCRIPTION  Specifies
        the value to be matched by the\n                   MatchFieldName.\n      SYNTAX
        \      string\n      VALUE        NB: If the CredentialFilterEntry corresponds
        to a\n                   DistinguishedName, this value in the CIM class is\n
        \                  represented by an ordinary string value.  However, an\n
        \                  implementation must convert this string to a DER-\n                   encoded
        string before matching against the values\n                   extracted from
        credentials at runtime.\n   A wildcard mechanism may be used for MatchFieldNames
        that contain\n   character strings.  The MatchFieldValue may contain a wildcard\n
        \  character, '*', in the pattern match specification.  For example, if\n
        \  the MatchFieldName is \"subjectName\", then a MatchFieldValue of\n   \"cn=*,ou=engineering,o=foo,c=be\"
        will successfully match a\n   certificate whose subject attribute is \"cn=Jane\n
        \  Doe,ou=engineering,o=foo,c=be\".  The wildcard character can be used\n
        \  to represent 0 or more characters as would be displayed to the user\n   (i.e.,
        a wildcard pattern match operates on displayable character\n   boundaries).\n"
      title: 5.3.2. The Property MatchFieldValue
    - contents:
      - "5.3.3. The Property CredentialType\n   The property CredentialType specifies
        the particular type of\n   credential that is being matched.  The property
        is defined as\n   follows:\n      NAME         CredentialType\n      DESCRIPTION
        \ Defines the type of IKE credentials.\n      SYNTAX       unsigned 16-bit
        integer\n      VALUE        1 - X.509 Certificate\n                   2 -
        Kerberos Ticket\n"
      title: 5.3.3. The Property CredentialType
    title: 5.3. The Class CredentialFilterEntry
  - contents:
    - "5.4. The Class IPSOFilterEntry\n   The class IPSOFilterEntry is used to match
      traffic based on the IP\n   Security Options [IPSO] header values (ClassificationLevel
      and\n   ProtectionAuthority) as defined in RFC 1108.  This type of filter\n
      \  entry is used to adjust the IPsec encryption level according to the\n   IPSO
      classification of the traffic (e.g., secret, confidential,\n   restricted, etc.)
      \ The class definition for IPSOFilterEntry is as\n   follows:\n      NAME         IPSOFilterEntry\n
      \     DESCRIPTION  Specifies the a match filter based on IP Security\n                   Options.\n
      \     DERIVED FROM FilterEntryBase (see [CIMNETWORK])\n      ABSTRACT     FALSE\n
      \     PROPERTIES   Name (from FilterEntryBase)\n                   IsNegated
      (from FilterEntryBase)\n                   MatchConditionType\n                   MatchConditionValue\n"
    - contents:
      - "5.4.1. The Property MatchConditionType\n   The property MatchConditionType
        specifies the IPSO header field that\n   will be matched (e.g., traffic classification
        level or protection\n   authority).  The property is defined as follows:\n
        \     NAME         MatchConditionType\n      DESCRIPTION  Specifies the IPSO
        header field to be matched.\n      SYNTAX       unsigned 16-bit integer\n
        \     VALUE        1 - ClassificationLevel\n                   2 - ProtectionAuthority\n"
      title: 5.4.1. The Property MatchConditionType
    - contents:
      - "5.4.2. The Property MatchConditionValue\n   The property MatchConditionValue
        specifies the value of the IPSO\n   header field to be matched against.  The
        property is defined as\n   follows:\n      NAME         MatchConditionValue\n
        \     DESCRIPTION  Specifies the value of the IPSO header field to be\n                   matched
        against.\n      SYNTAX       unsigned 16-bit integer\n      VALUE        The
        values MUST be one of values listed in RFC 1108\n                   (or any
        further IANA Assigned Numbers document).\n                   Some examples
        for ClassificationLevel are:\n                   61 - TopSecret\n                   90
        - Secret\n                   150 - Confidential\n                   171 -
        Unclassified\n                   For ProtectionAuthority, some examples are:\n
        \                  0 - GENSER\n                   1 - SIOP-ESI\n                   2
        - SCI\n                   3 - NSA\n                   4 - DOE\n"
      title: 5.4.2. The Property MatchConditionValue
    title: 5.4. The Class IPSOFilterEntry
  - contents:
    - "5.5. The Class PeerIDPayloadFilterEntry\n   The class PeerIDPayloadFilterEntry
      defines filters used to match ID\n   payload values from the IKE protocol exchange.\n
      \  PeerIDPayloadFilterEntry permits the specification of certain ID\n   payload
      values such as \"*@example.com\" or \"192.0.2.0/24\".\n   Obviously this filter
      applies only to IKERules when acting as a\n   responder.  Moreover, this filter
      can be applied immediately in the\n   case of aggressive mode but its application
      is to be delayed in the\n   case of main mode.  The class definition for PeerIDPayloadFilterEntry\n
      \  is as follows:\n      NAME         PeerIDPayloadFilterEntry\n      DESCRIPTION
      \ Specifies a match filter based on IKE identity.\n      DERIVED FROM FilterEntryBase
      (see [CIMNETWORK])\n      ABSTRACT     FALSE\n      PROPERTIES   Name (from
      FilterEntryBase)\n                   IsNegated (from FilterEntryBase)\n                   MatchIdentityType\n
      \                  MatchIdentityValue\n"
    - contents:
      - "5.5.1. The Property MatchIdentityType\n   The property MatchIdentityType
        specifies the type of identity\n   provided by the peer in the ID payload.
        \ The property is defined as\n   follows:\n      NAME         MatchIdentityType\n
        \     DESCRIPTION  Specifies the ID payload type.\n      SYNTAX       unsigned
        16-bit integer\n      VALUE        Consult [DOI] for valid values.\n   5.5.2.
        The Property MatchIdentityValue\n   The property MatchIdentityValue specifies
        the filter value for\n   comparison with the ID payload, e.g., \"*@example.com\".
        \ The property\n   is defined as follows:\n      NAME         MatchIdentityValue\n
        \     DESCRIPTION  Specifies the ID payload value.\n      SYNTAX       string\n
        \     VALUE        NB: The syntax may need to be converted for\n                   comparison.
        \ If the PeerIDPayloadFilterEntry type is\n                   a DistinguishedName,
        the name in the\n                   MatchIdentityValue property is represented
        by an\n                   ordinary string value, but this value must be\n
        \                  converted into a DER-encoded string before matching\n                   against
        the values extracted from IKE ID payloads at\n                   runtime.
        \ The same applies to IPv4 & IPv6 addresses.\n   Different wildcard mechanisms
        can be used depending on the ID\n   payload:\n   -  a MatchIdentityValue of
        \"*@example.com\" will match a user FQDN ID\n      payload of \"JDOE@EXAMPLE.COM\".\n
        \  -  a MatchIdentityValue of \"*.example.com\" will match a FQDN ID\n      payload
        of \"WWW.EXAMPLE.COM\".\n   -  a MatchIdentityValue of \"cn=*,ou=engineering,o=company,c=us\"
        will\n      match a DER DN ID payload of \"cn=John\n      Doe,ou=engineering,o=company,c=us\".\n
        \  -  a MatchIdentityValue of \"193.190.125.0/24\" will match an IPv4\n      address
        ID payload of 193.190.125.10.\n   -  a MatchIdentityValue of \"193.190.125.*\"
        will also match an IPv4\n      address ID payload of 193.190.125.10.\n   The
        above wildcard mechanisms MUST be supported for all ID payloads\n   supported
        by the local IKE entity.  The character '*' replaces 0 or\n   multiple instances
        of any character as restricted by the type\n   specified by MatchIdentityType.\n"
      title: 5.5.1. The Property MatchIdentityType
    title: 5.5. The Class PeerIDPayloadFilterEntry
  - contents:
    - "5.6. The Association Class FilterOfSACondition\n   The class FilterOfSACondition
      associates an SACondition with the\n   filter specifications (FilterList) that
      make up the condition.  The\n   class definition for FilterOfSACondition is
      as follows:\n      NAME         FilterOfSACondition\n      DESCRIPTION  Associates
      a condition with the filter list that\n                   makes up the individual
      condition elements.\n      DERIVED FROM Dependency (see [CIMCORE])\n      ABSTRACT
      \    FALSE\n      PROPERTIES   Antecedent [ref FilterList[1..1]]\n                   Dependent
      [ref SACondition[0..n]]\n"
    - contents:
      - "5.6.1. The Reference Antecedent\n   The property Antecedent is inherited
        from Dependency and is\n   overridden to refer to a FilterList instance.  The
        [1..1] cardinality\n   indicates that an SACondition instance MUST be associated
        with one\n   and only one FilterList instance.\n"
      title: 5.6.1. The Reference Antecedent
    - contents:
      - "5.6.2. The Reference Dependent\n   The property Dependent is inherited from
        Dependency and is overridden\n   to refer to an SACondition instance.  The
        [0..n] cardinality\n   indicates that a FilterList instance may be associated
        with zero or\n   more SACondition instances.\n"
      title: 5.6.2. The Reference Dependent
    title: 5.6. The Association Class FilterOfSACondition
  - contents:
    - "5.7. The Association Class AcceptCredentialFrom\n   The class AcceptCredentialFrom
      specifies which credential management\n   services (e.g., a CertificateAuthority
      or a Kerberos service) are to\n   be trusted to certify peer credentials.  This
      is used to assure that\n   the credential being matched in the CredentialFilterEntry
      is a valid\n   credential that has been supplied by an approved\n   CredentialManagementService.
      \ If a CredentialManagementService is\n   specified and a corresponding CredentialFilterEntry
      is used, but the\n   credential supplied by the peer is not certified by that\n
      \  CredentialManagementService (or one of the\n   CredentialManagementServices
      in its trust hierarchy), the\n   CredentialFilterEntry is deemed not to match.
      \ If a credential is\n   certified by a CredentialManagementService in the\n
      \  AcceptCredentialsFrom list of services, but there is no\n   CredentialFilterEntry,
      this is considered equivalent to a\n   CredentialFilterEntry that matches all
      credentials from those\n   services.\n   The class definition for AcceptCredentialFrom
      is as follows:\n      NAME         AcceptCredentialFrom\n      DESCRIPTION  Associates
      a condition with the credential management\n                   services to be
      trusted.\n      DERIVED FROM Dependency (see [CIMCORE])\n      ABSTRACT     FALSE\n
      \     PROPERTIES   Antecedent [ref CredentialManagementService[0..n]]\n                   Dependent
      [ref SACondition[0..n]]\n"
    - contents:
      - "5.7.1. The Reference Antecedent\n   The property Antecedent is inherited
        from Dependency and is\n   overridden to refer to a CredentialManagementService
        instance.  The\n   [0..n] cardinality indicates that an SACondition instance
        may be\n   associated with zero or more CredentialManagementService instances.\n"
      title: 5.7.1. The Reference Antecedent
    - contents:
      - "5.7.2. The Reference Dependent\n   The property Dependent is inherited from
        Dependency and is overridden\n   to refer to a SACondition instance.  The
        [0..n] cardinality indicates\n   that a CredentialManagementService instance
        may be associated with\n   zero or more SACondition instances.\n"
      title: 5.7.2. The Reference Dependent
    title: 5.7. The Association Class AcceptCredentialFrom
  title: 5. Condition and Filter Classes
- contents:
  - "6. Action Classes\n   The action classes are used to model the different actions
    an IPsec\n   device may take when the evaluation of the associated condition\n
    \  results in a match.\n                                +----------+\n                                |
    SAAction |\n                                +----------+\n                                     ^\n
    \                                    |\n                         +-----------+--------------+\n
    \                        |                          |\n                         |
    \              +---------------------+\n                         |               |
    SaNegotiationAction |\n                         |               +---------------------+\n
    \                        |                          ^\n                         |
    \                         |\n                 +----------------+      +----------------------+*\n
    \                | SAStaticAction |      | IKENegotiationAction |o----+\n                 +----------------+
    \     +----------------------+     |\n                               ^                     ^
    \               |\n                               |                     |                |\n
    \                              |         +-----------+-------+        |\n                               |
    \        |                   |        |\n       +-------------------+   |   +-------------+
    \    +-----------+  |\n       | IPsecBypassAction |---+   | IPsecAction |     |
    IKEAction |  |\n       +-------------------+   |   +-------------+     +-----------+
    \ |\n                               |       ^                              |\n
    \     +--------------------+   |       |    +----------------------+  |\n      |
    IPsecDiscardAction |---+       +----| IPsecTransportAction |  |\n      +--------------------+
    \  |       |    +----------------------+  |\n                               |
    \      |                              |\n         +-----------------+   |       |
    \   +-------------------+     |\n         | IKERejectAction |---+       +----|
    IPsecTunnelAction |     |\n         +-----------------+   |            +-------------------+
    \    |\n                               |                     *|               |\n
    \                              |       +--------------+               |\n                               |
    \      |                              |\n   +-----------------------+   |       |
    \      +--------------+n      |\n   | PreconfiguredSAAction |---+       |(a)    |
    [SAProposal] |-------+\n   +-----------------------+           |       +--------------+
    \  (b)\n      *|    ^                          |\n       |    |                          |
    \     *+-------------+\n       |    |                          +-------| PeerGateway
    |\n       |    |                                  +-------------+\n       |    |
    \ +-----------------------------+   |0..1  *w|\n       |    +--| PreconfiguredTransportAction|
    \  |        |(c)\n       |    |  +-----------------------------+   |       1|\n
    \      |    |                                    |  +--------------+\n       |
    \   |  +---------------------------+ *   |  |    System    |\n       |    +--|
    PreconfiguredTunnelAction |-----+  |  ([CIMCORE]) |\n       |       +---------------------------+
    \ (e)   +--------------+\n       |\n       |   2..6+---------------+\n       +-------|
    [SATransform] |\n         (d)   +---------------+\n      (a)  PeerGatewayForTunnel\n
    \     (b)  ContainedProposal\n      (c)  HostedPeerGatewayInformation\n      (d)
    \ TransformOfPreconfiguredAction\n      (e)  PeerGatewayForPreconfiguredTunnel\n"
  - contents:
    - "6.1. The Class SAAction\n   The class SAAction is abstract and serves as the
      base class for IKE\n   and IPsec actions.  It is used for aggregating different
      types of\n   actions to IKE and IPsec rules.  The class definition for SAAction
      is\n   as follows:\n      NAME         SAAction\n      DESCRIPTION  The base
      class for IKE and IPsec actions.\n      DERIVED FROM PolicyAction (see [PCIM])\n
      \     ABSTRACT     TRUE\n      PROPERTIES   PolicyActionName (from PolicyAction)\n
      \                  DoActionLogging\n                   DoPacketLogging\n"
    - contents:
      - "6.1.1. The Property DoActionLogging\n   The property DoActionLogging specifies
        whether a log message is to be\n   generated when the action is performed.
        \ This applies for\n   SANegotiationActions with the meaning of logging a
        message when the\n   negotiation is attempted (with the success or failure
        result).  This\n   also applies for SAStaticAction only for PreconfiguredSAAction
        with\n   the meaning of logging a message when the preconfigured SA is\n   actually
        installed in the SADB.  The property is defined as follows:\n      NAME         DoActionLogging\n
        \     DESCRIPTION  Specifies the whether to log when the action is\n                   performed.\n
        \     SYNTAX       boolean\n      VALUE        true - a log message is to
        be generated when action\n                   is performed.\n                   false
        - no log message is to be generated when action\n                   is performed.\n"
      title: 6.1.1. The Property DoActionLogging
    - contents:
      - "6.1.2. The Property DoPacketLogging\n   The property DoPacketLogging specifies
        whether a log message is to be\n   generated when the resulting security association
        is used to process\n   the packet.  If the SANegotiationAction successfully
        executes and\n   results in the creation of one or several security associations,
        or\n   if the PreconfiguredSAAction executes, the value of DoPacketLogging\n
        \  SHOULD be propagated to an optional field of SADB.  This optional\n   field
        should be used to decide whether a log message is to be\n   generated when
        the SA is used to process a packet.  For\n   SAStaticActions, a log message
        is to be generated when the\n   IPsecBypassAction, IPsecDiscardAction, or
        IKERejectAction are\n   executed.  The property is defined as follows:\n      NAME
        \        DoPacketLogging\n      DESCRIPTION  Specifies whether to log when
        the resulting\n                   security association is used to process
        the packet.\n      SYNTAX       boolean\n      VALUE        true - a log message
        is to be generated when the\n                   resulting security association
        is used to process the\n                   packet.\n                   false
        - no log message is to be generated.\n"
      title: 6.1.2. The Property DoPacketLogging
    title: 6.1. The Class SAAction
  - contents:
    - "6.2. The Class SAStaticAction\n   The class SAStaticAction is abstract and
      serves as the base class for\n   IKE and IPsec actions that do not require any
      negotiation.  The class\n   definition for SAStaticAction is as follows:\n      NAME
      \        SAStaticAction\n      DESCRIPTION  The base class for IKE and IPsec
      actions that do not\n                   require any negotiation.\n      DERIVED
      FROM SAAction\n      ABSTRACT     TRUE\n      PROPERTIES   LifetimeSeconds\n"
    - contents:
      - "6.2.1. The Property LifetimeSeconds\n   The property LifetimeSeconds specifies
        how long the security\n   association derived from this action should be used.
        \ The property is\n   defined as follows:\n      NAME         LifetimeSeconds\n
        \     DESCRIPTION  Specifies the amount of time (in seconds) that a\n                   security
        association derived from this action should\n                   be used.\n
        \     SYNTAX       unsigned 64-bit integer\n      VALUE        A value of
        zero indicates that there is not a\n                   lifetime associated
        with this action (i.e., infinite\n                   lifetime).  A non-zero
        value is typically used in\n                   conjunction with alternate
        SAActions performed when\n                   there is a negotiation failure
        of some sort.\n   Note: if the referenced SAStaticAction object is a\n   PreconfiguredSAAction
        associated to several SATransforms, then the\n   actual lifetime of the preconfigured
        SA will be the lesser of the\n   value of this LifetimeSeconds property and
        of the value of the\n   MaxLifetimeSeconds property of the associated SATransform.
        \ If the\n   value of this LifetimeSeconds property is zero, then there will
        be no\n   lifetime associated to this SA.\n   Note: while some SA negotiation
        protocols [IKE] can negotiate the\n   lifetime as an arbitrary length field,
        the authors have assumed that\n   a 64-bit integer will be sufficient.\n   It
        is expected that most SAStaticAction instances will have their\n   LifetimeSeconds
        properties set to zero (meaning no expiration of the\n   resulting SA).\n"
      title: 6.2.1. The Property LifetimeSeconds
    title: 6.2. The Class SAStaticAction
  - contents:
    - "6.3. The Class IPsecBypassAction\n   The class IPsecBypassAction is used when
      packets are allowed to be\n   processed without applying IPsec encapsulation
      to them.  This is the\n   same as stating that packets are allowed to flow in
      the clear.  The\n   class definition for IPsecBypassAction is as follows:\n
      \     NAME         IPsecBypassAction\n      DESCRIPTION  Specifies that packets
      are to be allowed to pass in\n                   the clear.\n      DERIVED FROM
      SAStaticAction\n      ABSTRACT     FALSE\n"
    title: 6.3. The Class IPsecBypassAction
  - contents:
    - "6.4. The Class IPsecDiscardAction\n   The class IPsecDiscardAction is used
      when packets are to be\n   discarded.  This is the same as stating that packets
      are to be\n   denied.  The class definition for IPsecDiscardAction is as follows:\n
      \     NAME         IPsecDiscardAction\n      DESCRIPTION  Specifies that packets
      are to be discarded.\n      DERIVED FROM SAStaticAction\n      ABSTRACT     FALSE\n"
    title: 6.4. The Class IPsecDiscardAction
  - contents:
    - "6.5. The Class IKERejectAction\n   The class IKERejectAction is used to prevent
      attempting an IKE\n   negotiation with the peer(s).  The main use of this class
      is to\n   prevent some denial of service attacks when acting as IKE responder.\n
      \  It goes beyond a plain discard of UDP/500 IKE packets because the\n   SACondition
      can be based on specific PeerIDPayloadFilterEntry (when\n   aggressive mode
      is used).  The class definition for IKERejectAction\n   is as follows:\n      NAME
      \        IKERejectAction\n      DESCRIPTION  Specifies that an IKE negotiation
      should not even be\n                   attempted or continued.\n      DERIVED
      FROM SAStaticAction\n      ABSTRACT     FALSE\n"
    title: 6.5. The Class IKERejectAction
  - contents:
    - "6.6. The Class PreconfiguredSAAction\n   The class PreconfiguredSAAction is
      used to create a security\n   association using preconfigured, hard-wired algorithms
      and keys.\n   Notes:\n   -  the SPI for a PreconfiguredSAAction is contained
      in the\n      association, TransformOfPreconfiguredAction;\n   -  the session
      key (if applicable) is contained in an instance of the\n      class SharedSecret
      (see [CIMUSER]).  The session key is stored in\n      the property Secret, the
      property protocol contains either \"ESP-\n      encrypt\", \"ESP-auth\" or \"AH\",
      the property algorithm contains the\n      algorithm used to protect the secret
      (can be \"PLAINTEXT\" if the\n      IPsec entity has no secret storage), the
      value of property\n      RemoteID is the concatenation of the remote IPsec peer
      IP address\n      in dotted decimal, of the character \"/\", of \"IN\" (respectively\n
      \     \"OUT\") for inbound SA (respectively outbound SA), of the character\n
      \     \"/\", and of the hexadecimal representation of the SPI.\n   Although
      the class is concrete, it MUST not be instantiated.  The\n   class definition
      for PreconfiguredSAAction is as follows:\n      NAME         PreconfiguredSAAction\n
      \     DESCRIPTION  Specifies preconfigured algorithm and keying\n                   information
      for creation of a security association.\n      DERIVED FROM SAStaticAction\n
      \     ABSTRACT     TRUE\n      PROPERTIES   LifetimeKilobytes\n"
    - contents:
      - "6.6.1. The Property LifetimeKilobytes\n   The property LifetimeKilobytes
        specifies a traffic limit in kilobytes\n   that can be consumed before the
        SA is deleted.  The property is\n   defined as follows:\n      NAME         LifetimeKilobytes\n
        \     DESCRIPTION  Specifies the SA lifetime in kilobytes.\n      SYNTAX       unsigned
        64-bit integer\n      VALUE        A value of zero indicates that there is
        not a\n                   lifetime associated with this action (i.e., infinite\n
        \                  lifetime).  A non-zero value is used to indicate that\n
        \                  after this number of kilobytes has been consumed the\n
        \                  SA must be deleted from the SADB.\n   Note: the actual
        lifetime of the preconfigured SA will be the lesser\n   of the value of this
        LifetimeKilobytes property and of the value of\n   the MaxLifetimeSeconds
        property of the associated SATransform.  If\n   the value of this LifetimeKilobytes
        property is zero, then there will\n   be no lifetime associated with this
        action.\n   Note: while some SA negotiation protocols [IKE] can negotiate
        the\n   lifetime as an arbitrary length field, the authors have assumed that\n
        \  a 64-bit integer will be sufficient.\n   It is expected that most PreconfiguredSAAction
        instances will have\n   their LifetimeKilobyte properties set to zero (meaning
        no expiration\n   of the resulting SA).\n"
      title: 6.6.1. The Property LifetimeKilobytes
    title: 6.6. The Class PreconfiguredSAAction
  - contents:
    - "6.7. The Class PreconfiguredTransportAction\n   The class PreconfiguredTransportAction
      is used to create an IPsec\n   transport-mode security association using preconfigured,
      hard-wired\n   algorithms and keys.  The class definition for\n   PreconfiguredTransportAction
      is as follows:\n      NAME         PreconfiguredTransportAction\n      DESCRIPTION
      \ Specifies preconfigured algorithm and keying\n                   information
      for creation of an IPsec transport\n                   security association.\n
      \     DERIVED FROM PreconfiguredSAAction\n      ABSTRACT     FALSE\n"
    title: 6.7. The Class PreconfiguredTransportAction
  - contents:
    - "6.8. The Class PreconfiguredTunnelAction\n   The class PreconfiguredTunnelAction
      is used to create an IPsec\n   tunnel-mode security association using preconfigured,
      hard-wired\n   algorithms and keys.  The class definition for PreconfiguredSAAction\n
      \  is as follows:\n      NAME         PreconfiguredTunnelAction\n      DESCRIPTION
      \ Specifies preconfigured algorithm and keying\n                   information
      for creation of an IPsec tunnel-mode\n                   security association.\n
      \     DERIVED FROM PreconfiguredSAAction\n      ABSTRACT     FALSE\n      PROPERTIES
      \  DFHandling\n"
    - contents:
      - "6.8.1. The Property DFHandling\n   The property DFHandling specifies how
        the Don't Fragment (DF) bit of\n   the internal IP header is to be handled
        during IPsec processing.  The\n   property is defined as follows:\n      NAME
        \        DFHandling\n      DESCRIPTION  Specifies the processing of the DF
        bit.\n      SYNTAX       unsigned 16-bit integer\n      VALUE        1 - Copy
        the DF bit from the internal IP header to\n                   the external
        IP header.\n                   2 - Set the DF bit of the external IP header
        to 1.\n                   3 - Clear the DF bit of the external IP header to
        0.\n"
      title: 6.8.1. The Property DFHandling
    title: 6.8. The Class PreconfiguredTunnelAction
  - contents:
    - "6.9. The Class SANegotiationAction\n   The class SANegotiationAction specifies
      an action requesting security\n   policy negotiation.\n   This is an abstract
      class.  Currently, only one security policy\n   negotiation protocol action
      is subclassed from SANegotiationAction:\n   the IKENegotiationAction class.
      \ It is nevertheless expected that\n   other security policy negotiation protocols
      will exist and the\n   negotiation actions of those new protocols would be modeled
      as a\n   subclass of SANegotiationAction.\n      NAME         SANegotiationAction\n
      \     DESCRIPTION  Specifies a negotiation action.\n      DERIVED FROM SAAction\n
      \     ABSTRACT     TRUE\n"
    title: 6.9. The Class SANegotiationAction
  - contents:
    - "6.10. The Class IKENegotiationAction\n   The class IKENegotiationAction is
      abstract and serves as the base\n   class for IKE and IPsec actions that result
      in an IKE negotiation.\n   The class definition for IKENegotiationAction is
      as follows:\n      NAME         IKENegotiationAction\n      DESCRIPTION  A base
      class for IKE and IPsec actions that specifies\n                   the parameters
      that are common for IKE phase 1 and\n                   IKE phase 2 IPsec DOI
      negotiations.\n      DERIVED FROM SANegotiationAction\n      ABSTRACT     TRUE\n
      \     PROPERTIES   MinLifetimeSeconds\n                   MinLifetimeKilobytes\n
      \                  IdleDurationSeconds\n"
    - contents:
      - "6.10.1. The Property MinLifetimeSeconds\n   The property MinLifetimeSeconds
        specifies the minimum seconds in a\n   lifetime that will be accepted from
        the peer.  MinLifetimeSeconds is\n   used to prevent certain denial of service
        attacks where the peer\n   requests an arbitrarily low lifetime value, causing
        renegotiations\n   with expensive Diffie-Hellman operations.  The property
        is defined as\n   follows:\n      NAME         MinLifetimeSeconds\n      DESCRIPTION
        \ Specifies the minimum seconds acceptable in a\n                   lifetime.\n
        \     SYNTAX       unsigned 64-bit integer\n      VALUE        A value of
        zero indicates that there is no minimum\n                   value.  A non-zero
        value specifies the minimum\n                   seconds lifetime.\n   Note:
        while IKE can negotiate the lifetime as an arbitrary length\n   field, the
        authors have assumed that a 64-bit integer will be\n   sufficient.\n"
      title: 6.10.1. The Property MinLifetimeSeconds
    - contents:
      - "6.10.2. The Property MinLifetimeKilobytes\n   The property MinLifetimeKilobytes
        specifies the minimum kilobytes of\n   a lifetime that will be accepted from
        the peer.  MinLifetimeKilobytes\n   is used to prevent certain denial of service
        attacks, where the peer\n   requests an arbitrarily low lifetime value, causing
        renegotiations\n   with correspondingly expensive Diffie-Hellman operations.
        \ Note that\n   there has been considerable debate regarding the usefulness
        of\n   applying kilobyte lifetimes to IKE phase 1 security associations, so\n
        \  it is likely that this property will only apply to the sub-class\n   IPsecAction.
        \ The property is defined as follows:\n      NAME         MinLifetimeKilobytes\n
        \     DESCRIPTION  Specifies the minimum kilobytes acceptable in a\n                   lifetime.\n
        \     SYNTAX       unsigned 64-bit integer\n      VALUE        A value of
        zero indicates that there is no minimum\n                   value.  A non-zero
        value specifies the minimum\n                   kilobytes lifetime.\n   Note:
        While IKE can negotiate the lifetime as an arbitrary length\n   field, the
        authors have assumed that a 64-bit integer will be\n   sufficient.\n"
      title: 6.10.2. The Property MinLifetimeKilobytes
    - contents:
      - "6.10.3. The Property IdleDurationSeconds\n   The property IdleDurationSeconds
        specifies how many seconds a\n   security association may remain idle (i.e.,
        no traffic protected\n   using the security association) before it is deleted.
        \ The property\n   is defined as follows:\n      NAME         IdleDurationSeconds\n
        \     DESCRIPTION  Specifies how long, in seconds, a security\n                   association
        may remain unused before it is deleted.\n      SYNTAX       unsigned 64-bit
        integer\n      VALUE        A value of zero indicates that idle detection
        should\n                   not be used for the security association (only
        the\n                   seconds and kilobyte lifetimes will be used).  Any\n
        \                  non-zero value indicates the number of seconds the\n                   security
        association may remain unused.\n"
      title: 6.10.3. The Property IdleDurationSeconds
    title: 6.10. The Class IKENegotiationAction
  - contents:
    - "6.11. The Class IPsecAction\n   The class IPsecAction serves as the base class
      for IPsec transport\n   and tunnel actions.  It specifies the parameters used
      for an IKE\n   phase 2 IPsec DOI negotiation.  The class definition for IPsecAction\n
      \  is as follows:\n      NAME         IPsecAction\n      DESCRIPTION  A base
      class for IPsec transport and tunnel actions\n                   that specifies
      the parameters for IKE phase 2 IPsec\n                   DOI negotiations.\n
      \     DERIVED FROM IKENegotiationAction\n      ABSTRACT     TRUE\n      PROPERTIES
      \  UsePFS\n                   UseIKEGroup\n                   GroupId\n                   Granularity\n
      \                  VendorID\n"
    - contents:
      - "6.11.1. The Property UsePFS\n   The property UsePFS specifies whether or
        not perfect forward secrecy\n   should be used when refreshing keys.  The
        property is defined as\n   follows:\n      NAME         UsePFS\n      DESCRIPTION
        \ Specifies the whether or not to use PFS when\n                   refreshing
        keys.\n      SYNTAX       boolean\n      VALUE        A value of true indicates
        that PFS should be used.  A\n                   value of false indicates that
        PFS should not be used.\n"
      title: 6.11.1. The Property UsePFS
    - contents:
      - "6.11.2. The Property UseIKEGroup\n   The property UseIKEGroup specifies whether
        or not phase 2 should use\n   the same key exchange group as was used in phase
        1.  UseIKEGroup is\n   ignored if UsePFS is false.  The property is defined
        as follows:\n      NAME         UseIKEGroup\n      DESCRIPTION  Specifies
        whether or not to use the same GroupId for\n                   phase 2 as
        was used in phase 1.  If UsePFS is false,\n                   then UseIKEGroup
        is ignored.\n      SYNTAX       boolean\n      VALUE        A value of true
        indicates that the phase 2 GroupId\n                   should be the same
        as phase 1.  A value of false\n                   indicates that the property
        GroupId will contain the\n                   key exchange group to use for
        phase 2.\n"
      title: 6.11.2. The Property UseIKEGroup
    - contents:
      - "6.11.3. The Property GroupId\n   The property GroupId specifies the key exchange
        group to use for\n   phase 2.  GroupId is ignored if (1) the property UsePFS
        is false, or\n   (2) the property UsePFS is true and the property UseIKEGroup
        is true.\n   If the GroupID number is from the vendor-specific range (32768-\n
        \  65535), the property VendorID qualifies the group number.  The\n   property
        is defined as follows:\n      NAME         GroupId\n      DESCRIPTION  Specifies
        the key exchange group to use for phase 2\n                   when the property
        UsePFS is true and the property\n                   UseIKEGroup is false.\n
        \     SYNTAX       unsigned 16-bit integer\n      VALUE        Consult [IKE]
        for valid values.\n"
      title: 6.11.3. The Property GroupId
    - contents:
      - "6.11.4. The Property Granularity\n   The property Granularity specifies how
        the selector for the security\n   association should be derived from the traffic
        that triggered the\n   negotiation.  The property is defined as follows:\n
        \     NAME         Granularity\n      DESCRIPTION  Specifies how the proposed
        selector for the\n                   security association will be created.\n
        \     SYNTAX       unsigned 16-bit integer\n      VALUE        1 - subnet:
        the source and destination subnet masks\n                   of the filter
        entry are used.\n                   2 - address: only the source and destination
        IP\n                   addresses of the triggering packet are used.\n                   3
        - protocol: the source and destination IP addresses\n                   and
        the IP protocol of the triggering packet are\n                   used.\n                   4
        - port: the source and destination IP addresses and\n                   the
        IP protocol and the source and destination layer\n                   4 ports
        of the triggering packet are used.\n"
      title: 6.11.4. The Property Granularity
    - contents:
      - "6.11.5. The Property VendorID\n   The property VendorID is used together
        with the property GroupID\n   (when it is in the vendor-specific range) to
        identify the key\n   exchange group.  VendorID is ignored unless UsePFS is
        true and\n   UseIKEGroup is false and GroupID is in the vendor-specific range\n
        \  (32768-65535).  The property is defined as follows:\n      NAME         VendorID\n
        \     DESCRIPTION  Specifies the IKE Vendor ID.\n      SYNTAX       string\n"
      title: 6.11.5. The Property VendorID
    title: 6.11. The Class IPsecAction
  - contents:
    - "6.12. The Class IPsecTransportAction\n   The class IPsecTransportAction is
      a subclass of IPsecAction that is\n   used to specify use of an IPsec transport-mode
      security association.\n   The class definition for IPsecTransportAction is as
      follows:\n      NAME         IPsecTransportAction\n      DESCRIPTION  Specifies
      that an IPsec transport-mode security\n                   association should
      be negotiated.\n      DERIVED FROM IPsecAction\n      ABSTRACT     FALSE\n"
    title: 6.12. The Class IPsecTransportAction
  - contents:
    - "6.13. The Class IPsecTunnelAction\n   The class IPsecTunnelAction is a subclass
      of IPsecAction that is used\n   to specify use of an IPsec tunnel-mode security
      association.  The\n   class definition for IPsecTunnelAction is as follows:\n
      \     NAME         IPsecTunnelAction\n      DESCRIPTION  Specifies that an IPsec
      tunnel-mode security\n                   association should be negotiated.\n
      \     DERIVED FROM IPsecAction\n      ABSTRACT     FALSE\n      PROPERTIES   DFHandling\n"
    - contents:
      - "6.13.1. The Property DFHandling\n   The property DFHandling specifies how
        the tunnel should manage the\n   Don't Fragment (DF) bit.  The property is
        defined as follows:\n      NAME         DFHandling\n      DESCRIPTION  Specifies
        how to process the DF bit.\n      SYNTAX       unsigned 16-bit integer\n      VALUE
        \       1 - Copy the DF bit from the internal IP header to\n                   the
        external IP header.\n                   2 - Set the DF bit of the external
        IP header to 1.\n                   3 - Clear the DF bit of the external IP
        header to 0.\n"
      title: 6.13.1. The Property DFHandling
    title: 6.13. The Class IPsecTunnelAction
  - contents:
    - "6.14. The Class IKEAction\n   The class IKEAction specifies the parameters
      that are to be used for\n   IKE phase 1 negotiation.  The class definition for
      IKEAction is as\n   follows:\n      NAME         IKEAction\n      DESCRIPTION
      \ Specifies the IKE phase 1 negotiation parameters.\n      DERIVED FROM IKENegotiationAction\n
      \     ABSTRACT     FALSE\n      PROPERTIES   ExchangeMode\n                   UseIKEIdentityType\n
      \                  VendorID\n                   AggressiveModeGroupId\n"
    - contents:
      - "6.14.1. The Property ExchangeMode\n   The property ExchangeMode specifies
        which IKE mode should be used for\n   IKE phase 1 negotiations.  The property
        is defined as follows:\n      NAME         ExchangeMode\n      DESCRIPTION
        \ Specifies the IKE negotiation mode for phase 1.\n      SYNTAX       unsigned
        16-bit integer\n      VALUE        1 - base mode\n                   2 - main
        mode\n                   4 - aggressive mode\n"
      title: 6.14.1. The Property ExchangeMode
    - contents:
      - "6.14.2. The Property UseIKEIdentityType\n   The property UseIKEIdentityType
        specifies what IKE identity type\n   should be used when negotiating with
        the peer.  This information is\n   used in conjunction with the IKE identities
        available on the system\n   and the IdentityContexts of the matching IKERule.
        \ The property is\n   defined as follows:\n      NAME         UseIKEIdentityType\n
        \     DESCRIPTION  Specifies the IKE identity to use during negotiation.\n
        \     SYNTAX       unsigned 16-bit integer\n      VALUE        Consult [DOI]
        for valid values.\n"
      title: 6.14.2. The Property UseIKEIdentityType
    - contents:
      - "6.14.3. The Property VendorID\n   The property VendorID specifies the value
        to be used in the Vendor ID\n   payload.  The property is defined as follows:\n
        \     NAME         VendorID\n      DESCRIPTION  Vendor ID Payload.\n      SYNTAX
        \      string\n      VALUE        A value of NULL means that Vendor ID payload
        will be\n                   neither generated nor accepted.  A non-NULL value\n
        \                  means that a Vendor ID payload will be generated\n                   (when
        acting as an initiator) or is expected (when\n                   acting as
        a responder).\n"
      title: 6.14.3. The Property VendorID
    - contents:
      - "6.14.4. The Property AggressiveModeGroupId\n   The property AggressiveModeGroupId
        specifies which group ID is to be\n   used in the first packets of the phase
        1 negotiation.  This property\n   is ignored unless the property ExchangeMode
        is set to 4 (aggressive\n   mode).  If the AggressiveModeGroupID number is
        from the vendor-\n   specific range (32768-65535), the property VendorID qualifies
        the\n   group number.  The property is defined as follows:\n      NAME         AggressiveModeGroupId\n
        \     DESCRIPTION  Specifies the group ID to be used for aggressive\n                   mode.\n
        \     SYNTAX       unsigned 16-bit integer\n"
      title: 6.14.4. The Property AggressiveModeGroupId
    title: 6.14. The Class IKEAction
  - contents:
    - "6.15. The Class PeerGateway\n   The class PeerGateway specifies the security
      gateway with which the\n   IKE services negotiates.  The class definition for
      PeerGateway is as\n   follows:\n      NAME         PeerGateway\n      DESCRIPTION
      \ Specifies the security gateway with which to\n                   negotiate.\n
      \     DERIVED FROM LogicalElement (see [CIMCORE])\n      ABSTRACT     FALSE\n
      \     PROPERTIES   Name\n                   PeerIdentityType\n                   PeerIdentity\n
      \  Note: The class PeerIdentityEntry contains more information about the\n   peer
      (namely its IP address).\n"
    - contents:
      - "6.15.1. The Property Name\n   The property Name specifies a user-friendly
        name for this security\n   gateway.  The property is defined as follows:\n
        \     NAME         Name\n      DESCRIPTION  Specifies a user-friendly name
        for this security\n                   gateway.\n      SYNTAX       string\n"
      title: 6.15.1. The Property Name
    - contents:
      - "6.15.2. The Property PeerIdentityType\n   The property PeerIdentityType specifies
        the IKE identity type of the\n   security gateway.  The property is defined
        as follows:\n      NAME         PeerIdentityType\n      DESCRIPTION  Specifies
        the IKE identity type of the security\n                   gateway.\n      SYNTAX
        \      unsigned 16-bit integer\n      VALUE        Consult [DOI] for valid
        values.\n"
      title: 6.15.2. The Property PeerIdentityType
    - contents:
      - "6.15.3. The Property PeerIdentity\n   The property PeerIdentity specifies
        the IKE identity value of the\n   security gateway.  Based upon the storage
        chosen for the task-\n   specific mapping of the information model, a conversion
        may be needed\n   from the stored representation of the PeerIdentity string
        to the real\n   value used in the ID payload (e.g., IP address is to be converted\n
        \  from a dotted decimal string into 4 bytes).  The property is defined\n
        \  as follows:\n      NAME         PeerIdentity\n      DESCRIPTION  Specifies
        the IKE identity value of the security\n                   gateway.\n      SYNTAX
        \      string\n"
      title: 6.15.3. The Property PeerIdentity
    title: 6.15. The Class PeerGateway
  - contents:
    - "6.16. The Association Class PeerGatewayForTunnel\n   The class PeerGatewayForTunnel
      associates IPsecTunnelActions with an\n   ordered list of PeerGateways.  The
      class definition for\n   PeerGatewayForTunnel is as follows:\n      NAME         PeerGatewayForTunnel\n
      \     DESCRIPTION  Associates IPsecTunnelActions with an ordered list of\n                   PeerGateways.\n
      \     DERIVED FROM Dependency (see [CIMCORE])\n      ABSTRACT     FALSE\n      PROPERTIES
      \  Antecedent [ref PeerGateway[0..n]]\n                   Dependent [ref IPsecTunnelAction[0..n]]\n
      \                  SequenceNumber\n"
    - contents:
      - "6.16.1. The Reference Antecedent\n   The property Antecedent is inherited
        from Dependency and is\n   overridden to refer to a PeerGateway instance.
        \ The [0..n]\n   cardinality indicates that an IPsecTunnelAction instance
        may be\n   associated with zero or more PeerGateway instances.\n   Note: The
        cardinality 0 has a specific meaning:\n   -  when the IKE service acts as
        a responder, this means that the IKE\n      service will accept phase 1 negotiation
        with any other security\n      gateway;\n   -  when the IKE service acts as
        an initiator, this means that the IKE\n      service will use the destination
        IP address (of the IP packets\n      which triggered the SARule) as the IP
        address of the peer IKE\n      entity.\n"
      title: 6.16.1. The Reference Antecedent
    - contents:
      - "6.16.2. The Reference Dependent\n   The property Dependent is inherited from
        Dependency and is overridden\n   to refer to an IPsecTunnelAction instance.
        \ The [0..n] cardinality\n   indicates that a PeerGateway instance may be
        associated with zero or\n   more IPsecTunnelAction instances.\n"
      title: 6.16.2. The Reference Dependent
    - contents:
      - "6.16.3. The Property SequenceNumber\n   The property SequenceNumber specifies
        the ordering to be used when\n   evaluating PeerGateway instances for a given
        IPsecTunnelAction.  The\n   property is defined as follows:\n      NAME         SequenceNumber\n
        \     DESCRIPTION  Specifies the order of evaluation for PeerGateways.\n      SYNTAX
        \      unsigned 16-bit integer\n      VALUE        Lower values are evaluated
        first.\n"
      title: 6.16.3. The Property SequenceNumber
    title: 6.16. The Association Class PeerGatewayForTunnel
  - contents:
    - "6.17. The Aggregation Class ContainedProposal\n   The class ContainedProposal
      associates an ordered list of SAProposals\n   with the IKENegotiationAction
      that aggregates it.  If the referenced\n   IKENegotiationAction object is an
      IKEAction, then the referenced\n   SAProposal object(s) must be IKEProposal(s).
      \ If the referenced\n   IKENegotiationAction object is an IPsecTransportAction
      or an\n   IPsecTunnelAction, then the referenced SAProposal object(s) must be\n
      \  IPsecProposal(s).  The class definition for ContainedProposal is as\n   follows:\n
      \      NAME         ContainedProposal\n       DESCRIPTION  Associates an ordered
      list of SAProposals with an\n                    IKENegotiationAction.\n       DERIVED
      FROM PolicyComponent (see [PCIM])\n       ABSTRACT     FALSE\n       PROPERTIES
      \  GroupComponent[ref IKENegotiationAction[0..n]]\n                    PartComponent[ref
      SAProposal[1..n]]\n                    SequenceNumber\n"
    - contents:
      - "6.17.1. The Reference GroupComponent\n   -  The property GroupComponent is
        inherited from PolicyComponent and\n      is overridden to refer to an IKENegotiationAction
        instance.  The\n      [0..n] cardinality indicates that an SAProposal instance
        may be\n      associated with zero or more IKENegotiationAction instances.\n"
      title: 6.17.1. The Reference GroupComponent
    - contents:
      - "6.17.2. The Reference PartComponent\n   The property PartComponent is inherited
        from PolicyComponent and is\n   overridden to refer to an SAProposal instance.
        \ The [1..n]\n   cardinality indicates that an IKENegotiationAction instance
        MUST be\n   associated with at least one SAProposal instance.\n"
      title: 6.17.2. The Reference PartComponent
    - contents:
      - "6.17.3. The Property SequenceNumber\n   The property SequenceNumber specifies
        the order of preference for the\n   SAProposals.  The property is defined
        as follows:\n      NAME         SequenceNumber\n      DESCRIPTION  Specifies
        the preference order for the SAProposals.\n      SYNTAX       unsigned 16-bit
        integer\n      VALUE        Lower-valued proposals are preferred over proposals\n
        \                  with higher values.  For ContainedProposals that\n                   reference
        the same IKENegotiationAction,\n                   SequenceNumber values must
        be unique.\n"
      title: 6.17.3. The Property SequenceNumber
    title: 6.17. The Aggregation Class ContainedProposal
  - contents:
    - "6.18. The Association Class HostedPeerGatewayInformation\n   The class HostedPeerGatewayInformation
      weakly associates a\n   PeerGateway with a System.  The class definition for\n
      \  HostedPeerGatewayInformation is as follows:\n      NAME         HostedPeerGatewayInformation\n
      \     DESCRIPTION  Weakly associates a PeerGateway with a System.\n      DERIVED
      FROM Dependency (see [CIMCORE])\n      ABSTRACT     FALSE\n      PROPERTIES
      \  Antecedent [ref System[1..1]]\n                   Dependent [ref PeerGateway[0..n]
      [weak]]\n"
    - contents:
      - "6.18.1. The Reference Antecedent\n   The property Antecedent is inherited
        from Dependency and is\n   overridden to refer to a System instance.  The
        [1..1] cardinality\n   indicates that a PeerGateway instance MUST be associated
        with one and\n   only one System instance.\n"
      title: 6.18.1. The Reference Antecedent
    - contents:
      - "6.18.2. The Reference Dependent\n   The property Dependent is inherited from
        Dependency and is overridden\n   to refer to a PeerGateway instance.  The
        [0..n] cardinality indicates\n   that a System instance may be associated
        with zero or more\n   PeerGateway instances.\n"
      title: 6.18.2. The Reference Dependent
    title: 6.18. The Association Class HostedPeerGatewayInformation
  - contents:
    - "6.19. The Association Class TransformOfPreconfiguredAction\n   The class TransformOfPreconfiguredAction
      associates a\n   PreconfiguredSAAction with two, four or six SATransforms that
      will be\n   applied to the inbound and outbound traffic.  The order of\n   application
      of the SATransforms is implicitly defined in [IPSEC].\n   The class definition
      for TransformOfPreconfiguredAction is as\n   follows:\n      NAME         TransformOfPreconfiguredAction\n
      \     DESCRIPTION  Associates a PreconfiguredSAAction with from one to\n                   three
      SATransforms.\n      DERIVED FROM Dependency (see [CIMCORE])\n      ABSTRACT
      \    FALSE\n      PROPERTIES   Antecedent[ref SATransform[2..6]]\n                   Dependent[ref
      PreconfiguredSAAction[0..n]]\n                   SPI\n                   Direction\n"
    - contents:
      - "6.19.1. The Reference Antecedent\n   The property Antecedent is inherited
        from Dependency and is\n   overridden to refer to an SATransform instance.
        \ The [2..6]\n   cardinality indicates that a PreconfiguredSAAction instance
        may be\n   associated with two to six SATransform instances.\n"
      title: 6.19.1. The Reference Antecedent
    - contents:
      - "6.19.2. The Reference Dependent\n   The property Dependent is inherited from
        Dependency and is overridden\n   to refer to a PreconfiguredSAAction instance.
        \ The [0..n] cardinality\n   indicates that a SATransform instance may be
        associated with zero or\n   more PreconfiguredSAAction instances.\n"
      title: 6.19.2. The Reference Dependent
    - contents:
      - "6.19.3. The Property SPI\n   The property SPI specifies the SPI to be used
        by the pre-configured\n   action for the associated transform.  The property
        is defined as\n   follows:\n      NAME         SPI\n      DESCRIPTION  Specifies
        the SPI to be used with the SATransform.\n      SYNTAX       unsigned 32-bit
        integer\n"
      title: 6.19.3. The Property SPI
    - contents:
      - "6.19.4. The Property Direction\n   The property Direction specifies whether
        the SPI property is for\n   inbound or outbound traffic.  The property is
        defined as follows:\n      NAME         Direction\n      DESCRIPTION Specifies
        whether the SA is for inbound or outbound\n                  traffic.\n      SYNTAX
        \     unsigned 8-bit integer\n      VALUE       1 - this SA is for inbound
        traffic\n                  2 - this SA is for outbound traffic\n"
      title: 6.19.4. The Property Direction
    title: 6.19. The Association Class TransformOfPreconfiguredAction
  - contents:
    - "6.20 The Association Class PeerGatewayForPreconfiguredTunnel\n   The class
      PeerGatewayForPreconfiguredTunnel associates zero or one\n   PeerGateways with
      multiple PreconfiguredTunnelActions.  The class\n   definition for PeerGatewayForPreconfiguredTunnel
      is as follows:\n      NAME         PeerGatewayForPreconfiguredTunnel\n      DESCRIPTION
      \ Associates a PeerGateway with multiple\n                   PreconfiguredTunnelActions.\n
      \     DERIVED FROM Dependency (see [CIMCORE])\n      ABSTRACT     FALSE\n      PROPERTIES
      \  Antecedent[ref PeerGateway[0..1]]\n                   Dependent[ref PreconfiguredTunnelAction[0..n]]\n"
    - contents:
      - "6.20.1. The Reference Antecedent\n   The property Antecedent is inherited
        from Dependency and is\n   overridden to refer to a PeerGateway instance.
        \ The [0..1]\n   cardinality indicates that a PreconfiguredTunnelAction instance
        may\n   be associated with one PeerGteway instance.\n"
      title: 6.20.1. The Reference Antecedent
    - contents:
      - "6.20.2. The Reference Dependent\n   The property Dependent is inherited from
        Dependency and is overridden\n   to refer to a PreconfiguredTunnelAction instance.
        \ The [0..n]\n   cardinality indicates that a PeerGateway instance may be
        associated\n   with zero or more PreconfiguredSAAction instances.\n"
      title: 6.20.2. The Reference Dependent
    title: 6.20 The Association Class PeerGatewayForPreconfiguredTunnel
  title: 6. Action Classes
- contents:
  - "7. Proposal and Transform Classes\n   The proposal and transform classes model
    the proposal settings an\n   IPsec device will use during IKE phase 1 and 2 negotiations.\n
    \                       +--------------+*w     1+--------------+\n                        |
    [SAProposal] |--------|   System     |\n                        +--------------+
    \ (a)   | ([CIMCORE])  |\n                               ^                +--------------+\n
    \                              |                        |1\n                    +----------------------+
    \           |\n                    |                      |            |\n             +-------------+
    \      +---------------+    |\n             | IKEProposal |       | IPsecProposal
    |    |\n             +-------------+       +---------------+    |\n                                          *o
    \           |\n                                           |(b)         |(c)\n
    \                                         n|            |\n                                   +---------------+*w
    \ |\n                                   | [SATransform] |----+\n                                   +---------------+\n
    \                                          ^\n                                           |\n
    \         +--------------------+-----------+---------+\n          |                    |
    \                    |\n   +-------------+     +--------------+     +----------------+\n
    \  | AHTransform |     | ESPTransform |     |IPCOMPTransform |\n   +-------------+
    \    +--------------+     +----------------+\n      (a)  SAProposalInSystem\n
    \     (b)  ContainedTransform\n      (c)  SATransformInSystem\n"
  - contents:
    - "7.1. The Abstract Class SAProposal\n   The abstract class SAProposal serves
      as the base class for the IKE\n   and IPsec proposal classes.  It specifies
      the parameters that are\n   common to the two proposal types.  The class definition
      for\n   SAProposal is as follows:\n      NAME         SAProposal\n      DESCRIPTION
      \ Specifies the common proposal parameters for IKE and\n                   IPsec
      security association negotiation.\n      DERIVED FROM Policy ([PCIM])\n      ABSTRACT
      \    TRUE\n      PROPERTIES   Name\n"
    - contents:
      - "7.1.1. The Property Name\n   The property Name specifies a user-friendly
        name for the SAProposal.\n   The property is defined as follows:\n      NAME
        \        Name\n      DESCRIPTION  Specifies a user-friendly name for this
        proposal.\n      SYNTAX       string\n"
      title: 7.1.1. The Property Name
    title: 7.1. The Abstract Class SAProposal
  - contents:
    - "7.2. The Class IKEProposal\n   The class IKEProposal specifies the proposal
      parameters necessary to\n   drive an IKE security association negotiation.  The
      class definition\n   for IKEProposal is as follows:\n      NAME         IKEProposal\n
      \     DESCRIPTION  Specifies the proposal parameters for IKE security\n                   association
      negotiation.\n      DERIVED FROM SAProposal\n      ABSTRACT     FALSE\n      PROPERTIES
      \  CipherAlgorithm\n                   HashAlgorithm\n                   PRFAlgorithm\n
      \                  GroupId\n                   AuthenticationMethod\n                   MaxLifetimeSeconds\n
      \                  MaxLifetimeKilobytes\n                   VendorID\n"
    - contents:
      - "7.2.1. The Property CipherAlgorithm\n   The property CipherAlgorithm specifies
        the proposed phase 1 security\n   association encryption algorithm.  The property
        is defined as\n   follows:\n      NAME         CipherAlgorithm\n      DESCRIPTION
        \ Specifies the proposed encryption algorithm for the\n                   phase
        1 security association.\n      SYNTAX       unsigned 16-bit integer\n      VALUE
        \       Consult [IKE] for valid values.\n"
      title: 7.2.1. The Property CipherAlgorithm
    - contents:
      - "7.2.2. The Property HashAlgorithm\n   The property HashAlgorithm specifies
        the proposed phase 1 security\n   association hash algorithm.  The property
        is defined as follows:\n      NAME         HashAlgorithm\n      DESCRIPTION
        \ Specifies the proposed hash algorithm for the phase 1\n                   security
        association.\n      SYNTAX       unsigned 16-bit integer\n      VALUE        Consult
        [IKE] for valid values.\n"
      title: 7.2.2. The Property HashAlgorithm
    - contents:
      - "7.2.3. The Property PRFAlgorithm\n   The property PRFAlgorithm specifies
        the proposed phase 1 security\n   association pseudo-random function.  The
        property is defined as\n   follows:\n      NAME         PRFAlgorithm\n      DESCRIPTION
        \ Specifies the proposed pseudo-random function for the\n                   phase
        1 security association.\n      SYNTAX       unsigned 16-bit integer\n      VALUE
        \       Currently none defined in [IKE], if [IKE, DOI] are\n                   extended,
        then the values of [IKE, DOI] are to be\n                   used for values
        of PRFAlgorithm.\n"
      title: 7.2.3. The Property PRFAlgorithm
    - contents:
      - "7.2.4. The Property GroupId\n   The property GroupId specifies the proposed
        phase 1 security\n   association key exchange group.  This property is ignored
        for all\n   aggressive mode exchanges.  If the GroupID number is from the\n
        \  vendor-specific range (32768-65535), the property VendorID qualifies\n
        \  the group number.  The property is defined as follows:\n      NAME         GroupId\n
        \     DESCRIPTION  Specifies the proposed key exchange group for the\n                   phase
        1 security association.\n      SYNTAX       unsigned 16-bit integer\n      VALUE
        \       Consult [IKE] for valid values.\n   Note: The value of this property
        is to be ignored in aggressive mode.\n"
      title: 7.2.4. The Property GroupId
    - contents:
      - "7.2.5. The Property AuthenticationMethod\n   The property AuthenticationMethod
        specifies the proposed phase 1\n   authentication method.  The property is
        defined as follows:\n      NAME         AuthenticationMethod\n      DESCRIPTION
        \ Specifies the proposed authentication method for the\n                   phase
        1 security association.\n      SYNTAX       unsigned 16-bit integer\n      VALUE
        \       0 - a special value that indicates that this\n                   particular
        proposal should be repeated once for each\n                   authentication
        method that corresponds to the\n                   credentials installed on
        the machine.  For example,\n                   if the system has a pre-shared
        key and a certificate,\n                   a proposal list could be constructed
        that includes a\n                   proposal that specifies a pre-shared key
        and\n                   proposals for any of the public-key authentication\n
        \                  methods.  Consult [IKE] for valid values.\n"
      title: 7.2.5. The Property AuthenticationMethod
    - contents:
      - "7.2.6. The Property MaxLifetimeSeconds\n   The property MaxLifetimeSeconds
        specifies the proposed maximum time,\n   in seconds, that a security association
        will remain valid after its\n   creation.  The property is defined as follows:\n
        \     NAME         MaxLifetimeSeconds\n      DESCRIPTION  Specifies the proposed
        maximum time that a\n                   security association will remain valid.\n
        \     SYNTAX       unsigned 64-bit integer\n      VALUE        A value of
        zero indicates that the default of 8\n                   hours be used.  A
        non-zero value indicates the\n                   maximum seconds lifetime.\n
        \  Note: While IKE can negotiate the lifetime as an arbitrary length\n   field,
        the authors have assumed that a 64-bit integer will be\n   sufficient.\n"
      title: 7.2.6. The Property MaxLifetimeSeconds
    - contents:
      - "7.2.7. The Property MaxLifetimeKilobytes\n   The property MaxLifetimeKilobytes
        specifies the proposed maximum\n   kilobyte lifetime that a security association
        will remain valid after\n   its creation.  The property is defined as follows:\n
        \     NAME         MaxLifetimeKilobytes\n      DESCRIPTION  Specifies the
        proposed maximum kilobyte lifetime\n                   that a security association
        will remain valid.\n      SYNTAX       unsigned 64-bit integer\n      VALUE
        \       A value of zero indicates that there should be no\n                   maximum
        kilobyte lifetime.  A non-zero value\n                   specifies the desired
        kilobyte lifetime.\n   Note: While IKE can negotiate the lifetime as an arbitrary
        length\n   field, the authors have assumed that a 64-bit integer will be\n
        \  sufficient.\n"
      title: 7.2.7. The Property MaxLifetimeKilobytes
    - contents:
      - "7.2.8. The Property VendorID\n   The property VendorID further qualifies
        the key exchange group.  The\n   property is ignored unless the exchange is
        not in aggressive mode and\n   the property GroupID is in the vendor-specific
        range.  The property\n   is defined as follows:\n      NAME         VendorID\n
        \     DESCRIPTION  Specifies the Vendor ID to further qualify the key\n                   exchange
        group.\n      SYNTAX       string\n"
      title: 7.2.8. The Property VendorID
    title: 7.2. The Class IKEProposal
  - contents:
    - "7.3. The Class IPsecProposal\n   The class IPsecProposal adds no new properties,
      but inherits proposal\n   properties from SAProposal, as well as aggregating
      the security\n   association transforms necessary for building an IPsec proposal
      (see\n   the aggregation class ContainedTransform).  The class definition for\n
      \  IPsecProposal is as follows:\n      NAME         IPsecProposal\n      DESCRIPTION
      \ Specifies the proposal parameters for IPsec security\n                   association
      negotiation.\n      DERIVED FROM SAProposal\n      ABSTRACT     FALSE\n"
    title: 7.3. The Class IPsecProposal
  - contents:
    - "7.4. The Abstract Class SATransform\n   The abstract class SATransform serves
      as the base class for the IPsec\n   transforms that can be used to compose an
      IPsec proposal or to be\n   used as a pre-configured action.  The class definition
      for\n   SATransform is as follows:\n      NAME         SATransform\n      DESCRIPTION
      \ Base class for the different IPsec transforms.\n      ABSTRACT     TRUE\n
      \     PROPERTIES   CommonName (from Policy)\n                   VendorID\n                   MaxLifetimeSeconds\n
      \                  MaxLifetimeKilobytes\n"
    - contents:
      - "7.4.1. The Property CommonName\n   The property CommonName is inherited from
        Policy [PCIM] and specifies\n   a user-friendly name for the SATransform.
        \ The property is defined as\n   follows:\n      NAME         CommonName\n
        \     DESCRIPTION  Specifies a user-friendly name for this Policy-\n                   related
        object.\n      SYNTAX       string\n"
      title: 7.4.1. The Property CommonName
    - contents:
      - "7.4.2. The Property VendorID\n   The property VendorID specifies the vendor
        ID for vendor-defined\n   transforms.  The property is defined as follows:\n
        \     NAME         VendorID\n      DESCRIPTION  Specifies the vendor ID for
        vendor-defined\n                   transforms.\n      SYNTAX       string\n
        \     VALUE        An empty VendorID string indicates that the transform\n
        \                  is a standard one.\n"
      title: 7.4.2. The Property VendorID
    - contents:
      - "7.4.3. The Property MaxLifetimeSeconds\n   The property MaxLifetimeSeconds
        specifies the proposed maximum time,\n   in seconds, that a security association
        will remain valid after its\n   creation.  The property is defined as follows:\n
        \     NAME         MaxLifetimeSeconds\n      DESCRIPTION  Specifies the proposed
        maximum time that a\n                   security association will remain valid.\n
        \     SYNTAX       unsigned 64-bit integer\n      VALUE        A value of
        zero indicates that the default of 8 hours\n                   be used.  A
        non-zero value indicates the maximum\n                   seconds lifetime.\n
        \  Note: While IKE can negotiate the lifetime as an arbitrary length\n   field,
        the authors have assumed that a 64-bit integer will be\n   sufficient.\n"
      title: 7.4.3. The Property MaxLifetimeSeconds
    - contents:
      - "7.4.4. The Property MaxLifetimeKilobytes\n   The property MaxLifetimeKilobytes
        specifies the proposed maximum\n   kilobyte lifetime that a security association
        will remain valid after\n   its creation.  The property is defined as follows:\n
        \     NAME         MaxLifetimeKilobytes\n      DESCRIPTION  Specifies the
        proposed maximum kilobyte lifetime\n                   that a security association
        will remain valid.\n      SYNTAX       unsigned 64-bit integer\n      VALUE
        \       A value of zero indicates that there should be no\n                   maximum
        kilobyte lifetime.  A non-zero value\n                   specifies the desired
        kilobyte lifetime.\n   Note: While IKE can negotiate the lifetime as an arbitrary
        length\n   field, the authors have assumed that a 64-bit integer will be\n
        \  sufficient.\n"
      title: 7.4.4. The Property MaxLifetimeKilobytes
    title: 7.4. The Abstract Class SATransform
  - contents:
    - "7.5. The Class AHTransform\n   The class AHTransform specifies the AH algorithm
      to propose during\n   IPsec security association negotiation.  The class definition
      for\n   AHTransform is as follows:\n      NAME         AHTransform\n      DESCRIPTION
      \ Specifies the proposed AH algorithm.\n      ABSTRACT     FALSE\n      PROPERTIES
      \  AHTransformId\n                   UseReplayPrevention\n                   ReplayPreventionWindowSize\n"
    - contents:
      - "7.5.1. The Property AHTransformId\n   The property AHTransformId specifies
        the transform ID of the AH\n   algorithm.  The property is defined as follows:\n
        \     NAME         AHTransformId\n      DESCRIPTION  Specifies the transform
        ID of the AH algorithm.\n      SYNTAX       unsigned 16-bit integer\n      VALUE
        \       Consult [DOI] for valid values.\n"
      title: 7.5.1. The Property AHTransformId
    - contents:
      - "7.5.2. The Property UseReplayPrevention\n   The property UseReplayPrevention
        specifies whether replay prevention\n   detection is to be used.  The property
        is defined as follows:\n      NAME         UseReplayPrevention\n      DESCRIPTION
        \ Specifies whether to enable replay prevention\n                   detection.\n
        \     SYNTAX       boolean\n      VALUE        true - replay prevention detection
        is enabled.\n                   false - replay prevention detection is disabled.\n"
      title: 7.5.2. The Property UseReplayPrevention
    - contents:
      - "7.5.3. The Property ReplayPreventionWindowSize\n   The property ReplayPreventionWindowSize
        specifies, in bits, the\n   length of the sliding window used by the replay
        prevention detection\n   mechanism.  The value of this property is meaningless
        if\n   UseReplayPrevention is false.  It is assumed that the window size\n
        \  will be power of 2.  The property is defined as follows:\n      NAME         ReplayPreventionWindowSize\n
        \     DESCRIPTION  Specifies the length of the window used by the replay\n
        \                  prevention detection mechanism.\n      SYNTAX       unsigned
        32-bit integer\n"
      title: 7.5.3. The Property ReplayPreventionWindowSize
    title: 7.5. The Class AHTransform
  - contents:
    - "7.6. The Class ESPTransform\n   The class ESPTransform specifies the ESP algorithms
      to propose\n   during IPsec security association negotiation.  The class definition\n
      \  for ESPTransform is as follows:\n      NAME         ESPTransform\n      DESCRIPTION
      \ Specifies the proposed ESP algorithms.\n      ABSTRACT     FALSE\n      PROPERTIES
      \  IntegrityTransformId\n                   CipherTransformId\n                   CipherKeyLength\n
      \                  CipherKeyRounds\n                   UseReplayPrevention\n
      \                  ReplayPreventionWindowSize\n"
    - contents:
      - "7.6.1. The Property IntegrityTransformId\n   The property IntegrityTransformId
        specifies the transform ID of the\n   ESP integrity algorithm.  The property
        is defined as follows:\n      NAME         IntegrityTransformId\n      DESCRIPTION
        \ Specifies the transform ID of the ESP integrity\n                   algorithm.\n
        \     SYNTAX       unsigned 16-bit integer\n      VALUE        Consult [DOI]
        for valid values.\n"
      title: 7.6.1. The Property IntegrityTransformId
    - contents:
      - "7.6.2. The Property CipherTransformId\n   The property CipherTransformId
        specifies the transform ID of the ESP\n   encryption algorithm.  The property
        is defined as follows:\n      NAME         CipherTransformId\n      DESCRIPTION
        \ Specifies the transform ID of the ESP encryption\n                   algorithm.\n
        \     SYNTAX       unsigned 16-bit integer\n      VALUE        Consult [DOI]
        for valid values.\n"
      title: 7.6.2. The Property CipherTransformId
    - contents:
      - "7.6.3. The Property CipherKeyLength\n   The property CipherKeyLength specifies,
        in bits, the key length for\n   the ESP encryption algorithm.  For encryption
        algorithms that use a\n   fixed-length keys, this value is ignored.  The property
        is defined as\n   follows:\n      NAME         CipherKeyLength\n      DESCRIPTION
        \ Specifies the ESP encryption key length in bits.\n      SYNTAX       unsigned
        16-bit integer\n"
      title: 7.6.3. The Property CipherKeyLength
    - contents:
      - "7.6.4. The Property CipherKeyRounds\n   The property CipherKeyRounds specifies
        the number of key rounds for\n   the ESP encryption algorithm.  For encryption
        algorithms that use\n   fixed number of key rounds, this value is ignored.
        \ The property is\n   defined as follows:\n      NAME         CipherKeyRounds\n
        \     DESCRIPTION  Specifies the number of key rounds for the ESP\n                   encryption
        algorithm.\n      SYNTAX       unsigned 16-bit integer\n      VALUE        Currently,
        key rounds are not defined for any ESP\n                   encryption algorithms.\n"
      title: 7.6.4. The Property CipherKeyRounds
    - contents:
      - "7.6.5. The Property UseReplayPrevention\n   The property UseReplayPrevention
        specifies whether replay prevention\n   detection is to be used.  The property
        is defined as follows:\n      NAME         UseReplayPrevention\n      DESCRIPTION
        \ Specifies whether to enable replay prevention\n                   detection.\n
        \     SYNTAX       boolean\n      VALUE        true - replay prevention detection
        is enabled.\n                   false - replay prevention detection is disabled.\n"
      title: 7.6.5. The Property UseReplayPrevention
    - contents:
      - "7.6.6. The Property ReplayPreventionWindowSize\n   The property ReplayPreventionWindowSize
        specifies, in bits, the\n   length of the sliding window used by the replay
        prevention detection\n   mechanism.  The value of this property is meaningless
        if\n   UseReplayPrevention is false.  It is assumed that the window size\n
        \  will be power of 2.  The property is defined as follows:\n      NAME         ReplayPreventionWindowSize\n
        \     DESCRIPTION  Specifies the length of the window used by the replay\n
        \                  prevention detection mechanism.\n      SYNTAX       unsigned
        32-bit integer\n"
      title: 7.6.6. The Property ReplayPreventionWindowSize
    title: 7.6. The Class ESPTransform
  - contents:
    - "7.7. The Class IPCOMPTransform\n   The class IPCOMPTransform specifies the
      IP compression (IPCOMP)\n   algorithm to propose during IPsec security association
      negotiation.\n   The class definition for IPCOMPTransform is as follows:\n      NAME
      \        IPCOMPTransform\n      DESCRIPTION  Specifies the proposed IPCOMP algorithm.\n
      \     ABSTRACT     FALSE\n      PROPERTIES   Algorithm\n                   DictionarySize\n
      \                  PrivateAlgorithm\n"
    - contents:
      - "7.7.1. The Property Algorithm\n   The property Algorithm specifies the transform
        ID of the IPCOMP\n   compression algorithm.  The property is defined as follows:\n
        \     NAME         Algorithm\n      DESCRIPTION  Specifies the transform ID
        of the IPCOMP compression\n                   algorithm.\n      SYNTAX       unsigned
        16-bit integer\n      VALUE        1 - OUI: a vendor specific algorithm is
        used and\n                   specified in the property PrivateAlgorithm.  Consult\n
        \                  [DOI] for other valid values.\n"
      title: 7.7.1. The Property Algorithm
    - contents:
      - "7.7.2. The Property DictionarySize\n   The property DictionarySize specifies
        the log2 maximum size of the\n   dictionary for the compression algorithm.
        \ For compression algorithms\n   that have pre-defined dictionary sizes, this
        value is ignored.  The\n   property is defined as follows:\n      NAME         DictionarySize\n
        \     DESCRIPTION  Specifies the log2 maximum size of the dictionary.\n      SYNTAX
        \      unsigned 16-bit integer\n"
      title: 7.7.2. The Property DictionarySize
    - contents:
      - "7.7.3. The Property PrivateAlgorithm\n   The property PrivateAlgorithm specifies
        a private vendor-specific\n   compression algorithm.  This value is only used
        when the property\n   Algorithm is 1 (OUI).  The property is defined as follows:\n
        \     NAME         PrivateAlgorithm\n      DESCRIPTION  Specifies a private
        vendor-specific compression\n                   algorithm.\n      SYNTAX       unsigned
        32-bit integer\n"
      title: 7.7.3. The Property PrivateAlgorithm
    title: 7.7. The Class IPCOMPTransform
  - contents:
    - "7.8. The Association Class SAProposalInSystem\n   The class SAProposalInSystem
      weakly associates SAProposals with a\n   System.  The class definition for SAProposalInSystem
      is as follows:\n      NAME         SAProposalInSystem\n      DESCRIPTION  Weakly
      associates SAProposals with a System.\n      DERIVED FROM PolicyInSystem (see
      [PCIM])\n      ABSTRACT     FALSE\n      PROPERTIES   Antecedent[ref System
      [1..1]]\n                   Dependent[ref SAProposal[0..n] [weak]]\n"
    - contents:
      - "7.8.1. The Reference Antecedent\n   The property Antecedent is inherited
        from the PolicyInSystem and is\n   overridden to refer to a System instance.
        \ The [1..1] cardinality\n   indicates that an SAProposal instance MUST be
        associated with one and\n   only one System instance.\n"
      title: 7.8.1. The Reference Antecedent
    - contents:
      - "7.8.2. The Reference Dependent\n   The property Dependent is inherited from
        PolicyInSystem and is\n   overridden to refer to an SAProposal instance.  The
        [0..n]\n   cardinality indicates that a System instance may be associated
        with\n   zero or more SAProposal instances.\n"
      title: 7.8.2. The Reference Dependent
    title: 7.8. The Association Class SAProposalInSystem
  - contents:
    - "7.9. The Aggregation Class ContainedTransform\n   The class ContainedTransform
      associates an IPsecProposal with the set\n   of SATransforms that make up the
      proposal.  If multiple transforms of\n   the same type are in a proposal, then
      they are to be logically ORed\n   and the order of preference is dictated by
      the SequenceNumber\n   property.  Sets of transforms of different types are
      logically ANDed.\n   For example, if the ordered proposal list were\n      ESP
      = { (HMAC-MD5, 3DES), (HMAC-MD5, DES) }\n      AH  = { MD5, SHA-1 }\n   then
      the one sending the proposal would want the other side to pick\n   one from
      the ESP transform (preferably (HMAC-MD5, 3DES)) list AND one\n   from the AH
      transform list (preferably MD5).\n   The class definition for ContainedTransform
      is as follows:\n      NAME         ContainedTransform\n      DESCRIPTION  Associates
      an IPsecProposal with the set of\n                   SATransforms that make
      up the proposal.\n      DERIVED FROM PolicyComponent (see [PCIM])\n      ABSTRACT
      \    FALSE\n      PROPERTIES   GroupComponent[ref IPsecProposal[0..n]]\n                   PartComponent[ref
      SATransform[1..n]]\n                   SequenceNumber\n"
    - contents:
      - "7.9.1. The Reference GroupComponent\n   The property GroupComponent is inherited
        from PolicyComponent and is\n   overridden to refer to an IPsecProposal instance.
        \ The [0..n]\n   cardinality indicates that an SATransform instance may be
        associated\n   with zero or more IPsecProposal instances.\n"
      title: 7.9.1. The Reference GroupComponent
    - contents:
      - "7.9.2. The Reference PartComponent\n   The property PartComponent is inherited
        from PolicyComponent and is\n   overridden to refer to an SATransform instance.
        \ The [1..n]\n   cardinality indicates that an IPsecProposal instance MUST
        be\n   associated with at least one SATransform instance.\n"
      title: 7.9.2. The Reference PartComponent
    - contents:
      - "7.9.3. The Property SequenceNumber\n   The property SequenceNumber specifies
        the order of preference for the\n   SATransforms of the same type.  The property
        is defined as follows:\n      NAME         SequenceNumber\n      DESCRIPTION
        \ Specifies the preference order for the SATransforms\n                   of
        the same type.\n      SYNTAX       unsigned 16-bit integer\n      VALUE        Lower-valued
        transforms are preferred over transforms\n                   of the same type
        with higher values.  For\n                   ContainedTransforms that reference
        the same\n                   IPsecProposal, SequenceNumber values must be
        unique.\n"
      title: 7.9.3. The Property SequenceNumber
    title: 7.9. The Aggregation Class ContainedTransform
  - contents:
    - "7.10. The Association Class SATransformInSystem\n   The class SATransformInSystem
      weakly associates SATransforms with a\n   System.  The class definition for
      SATransformInSystem System is as\n   follows:\n      NAME         SATransformInSystem\n
      \     DESCRIPTION  Weakly associates SATransforms with a System.\n      DERIVED
      FROM PolicyInSystem (see [PCIM])\n      ABSTRACT     FALSE\n      PROPERTIES
      \  Antecedent[ref System[1..1]]\n                   Dependent[ref SATransform[0..n]
      [weak]]\n"
    - contents:
      - "7.10.1. The Reference Antecedent\n   The property Antecedent is inherited
        from PolicyInSystem and is\n   overridden to refer to a System instance.  The
        [1..1] cardinality\n   indicates that an SATransform instance MUST be associated
        with one\n   and only one System instance.\n"
      title: 7.10.1. The Reference Antecedent
    - contents:
      - "7.10.2. The Reference Dependent\n   The property Dependent is inherited from
        PolicyInSystem and is\n   overridden to refer to an SATransform instance.
        \ The [0..n]\n   cardinality indicates that a System instance may be associated
        with\n   zero or more SATransform instances.\n"
      title: 7.10.2. The Reference Dependent
    title: 7.10. The Association Class SATransformInSystem
  title: 7. Proposal and Transform Classes
- contents:
  - "8. IKE Service and Identity Classes\n                +--------------+           +-------------------+\n
    \               |    System    |           | PeerIdentityEntry |\n                |
    \ ([CIMCORE]) |           +-------------------+\n                +--------------+
    \                    |*w\n                      1| (a)                 (b)     |\n
    \                      +---+            +------------+\n                           |
    \           |\n                           |*w        1 o\n   +-------------+     +-------------------+
    \   +---------------------+\n   | PeerGateway |     | PeerIdentityTable |    |
    AutostartIKESetting |\n   +-------------+     +-------------------+    +---------------------+\n
    \       *|                          *|               *|    *|\n         +----------------------+
    \   |(d)  +----------+     |\n                  (c)          *|   *|    *|     (e)
    \       |\n                              *+------------+*              |(f)\n
    \            +-----------------| IKEService |-----+         |\n             |
    \     (g)        +------------+     |(h)      |\n         0..1|                      *|
    \          *|        *o\n   +--------------------+            |    +---------------------------+\n
    \  | IPProtocolEndpoint |            |    | AutostartIKEConfiguration |\n   |
    \ ([CIMNETWORK])    |         (i)|    +---------------------------+\n   +--------------------+
    \           |\n      0..1|                          |\n          |(j)                       +----------------+\n
    \        *|                                           |*\n   +-------------+*
    (k)  +------------+ +-----------------------------+\n   | IKEIdentity |-------|
    Collection | | CredentialManagementService |\n   +-------------+   0..1| ([CIMCORE])|
    |         ([CIMUSER])         |\n         *|              +------------+ +-----------------------------+\n
    \         |(l)\n         *|\n   +--------------+\n   |  Credential  |\n   |  ([CIMUSER])
    |\n   +--------------+\n      (a)  HostedPeerIdentityTable\n      (b)  PeerIdentityMember\n
    \     (c)  IKEServicePeerGateway\n      (d)  IKEServicePeerIdentityTable\n      (e)
    \ IKEAutostartSetting\n      (f)  AutostartIKESettingContext\n      (g)  IKEServiceForEndpoint\n
    \     (h)  IKEAutostartConfiguration\n      (i)  IKEUsesCredentialManagementService\n
    \     (j)  EndpointHasLocalIKEIdentity\n      (k)  CollectionHasLocalIKEIdentity\n
    \     (l)  IKEIdentitysCredential\n   This portion of the model contains additional
    information that is\n   useful in applying the policy.  The IKEService class MAY
    be used to\n   represent the IKE negotiation function in a system.  The IKEService\n
    \  uses the various tables that contain information about IKE peers as\n   well
    as the configuration for specifying security associations that\n   are started
    automatically.  The information in the PeerGateway,\n   PeerIdentityTable and
    related classes is necessary to completely\n   specify the policies.\n   An interface
    (represented by an IPProtocolEndpoint) has an IKEService\n   that provides the
    negotiation services for that interface.  That\n   service MAY also have a list
    of security associations automatically\n   started at the time the IKE service
    is initialized.\n   The IKEService also has a set of identities that it may use
    in\n   negotiations with its peers.  Those identities are associated with\n   the
    interfaces (or collections of interfaces).\n"
  - contents:
    - "8.1. The Class IKEService\n   The class IKEService represents the IKE negotiation
      function.  An\n   instance of this service may provide that negotiation service
      for one\n   or more interfaces (represented by the IPProtocolEndpoint class)
      of a\n   System.  There may be multiple instances of IKE services on a System\n
      \  but only one per interface.  The class definition for IKEService is\n   as
      follows:\n      NAME         IKEService\n      DESCRIPTION  IKEService is used
      to represent the IKE negotiation\n                   function.\n      DERIVED
      FROM Service (see [CIMCORE])\n      ABSTRACT     FALSE\n"
    title: 8.1. The Class IKEService
  - contents:
    - "8.2. The Class PeerIdentityTable\n   The class PeerIdentityTable aggregates
      the table entries that provide\n   mappings between identities and their addresses.
      \ The class\n   definition for PeerIdentityTable is as follows:\n      NAME
      \        PeerIdentityTable\n      DESCRIPTION  PeerIdentityTable aggregates
      PeerIdentityEntry\n                   instances to provide a table of identity-address\n
      \                  mappings.\n      DERIVED FROM Collection (see [CIMCORE])\n
      \     ABSTRACT     FALSE\n      PROPERTIES   Name\n"
    - contents:
      - "8.2.1. The Property Name\n   The property Name uniquely identifies the table.
        \ The property is\n   defined as follows:\n      NAME         Name\n      DESCRIPTION
        \ Name uniquely identifies the table.\n      SYNTAX       string\n"
      title: 8.2.1. The Property Name
    title: 8.2. The Class PeerIdentityTable
  - contents:
    - "8.3. The Class PeerIdentityEntry\n   The class PeerIdentityEntry specifies
      the mapping between peer\n   identity and their IP address.  The class definition
      for\n   PeerIdentityEntry is as follows:\n      NAME         PeerIdentityEntry\n
      \     DESCRIPTION  PeerIdentityEntry provides a mapping between a peer's\n                   identity
      and address.\n      DERIVED FROM LogicalElement (see [CIMCORE])\n      ABSTRACT
      \    FALSE\n      PROPERTIES   PeerIdentity\n                   PeerIdentityType\n
      \                  PeerAddress\n                   PeerAddressType\n   The pre-shared
      key to be used with this peer (if applicable) is\n   contained in an instance
      of the class SharedSecret (see [CIMUSER]).\n   The pre-shared key is stored
      in the property Secret, the property\n   protocol contains \"IKE\", the property
      algorithm contains the\n   algorithm used to protect the secret (can be \"PLAINTEXT\"
      if the IPsec\n   entity has no secret storage), the value of property RemoteID
      must\n   match the PeerIdentity property of the PeerIdentityEntry instance\n
      \  describing the IKE peer.\n"
    - contents:
      - "8.3.1. The Property PeerIdentity\n   The property PeerIdentity contains a
        string encoding of the Identity\n   payload for the IKE peer.  The property
        is defined as follows:\n      NAME         PeerIdentity\n      DESCRIPTION
        \ The PeerIdentity is the ID payload of a peer.\n      SYNTAX       string\n"
      title: 8.3.1. The Property PeerIdentity
    - contents:
      - "8.3.2. The Property PeerIdentityType\n   The property PeerIdentityType is
        an enumeration that specifies the\n   type of the PeerIdentity.  The property
        is defined as follows:\n      NAME         PeerIdentityType\n      DESCRIPTION
        \ PeerIdentityType is the type of the ID payload of a\n                   peer.\n
        \     SYNTAX       unsigned 16-bit integer\n      VALUE        The enumeration
        values are specified in [DOI] section\n                   4.6.2.1.\n"
      title: 8.3.2. The Property PeerIdentityType
    - contents:
      - "8.3.3. The Property PeerAddress\n   The property PeerAddress specifies the
        string representation of the\n   IP address of the peer formatted according
        to the appropriate\n   convention as defined in the PeerAddressType property
        (e.g., dotted\n   decimal notation).  The property is defined as follows:\n
        \     NAME         PeerAddress\n      DESCRIPTION  PeerAddress is the address
        of the peer with the ID\n                   payload.\n      SYNTAX       string\n
        \     VALUE        String representation of an IPv4 or IPv6 address.\n"
      title: 8.3.3. The Property PeerAddress
    - contents:
      - "8.3.4. The Property PeerAddressType\n   The property PeerAddressType specifies
        the format of the PeerAddress\n   property value.  The property is defined
        as follows:\n      NAME         PeerAddressType\n      DESCRIPTION  PeerAddressType
        is the type of address in\n                   PeerAddress.\n      SYNTAX       unsigned
        16-bit integer\n      VALUE        0 - Unknown\n                   1 - IPv4\n
        \                  2 - IPv6\n"
      title: 8.3.4. The Property PeerAddressType
    title: 8.3. The Class PeerIdentityEntry
  - contents:
    - "8.4. The Class AutostartIKEConfiguration\n   The class AutostartIKEConfiguration
      groups AutostartIKESetting\n   instances into configuration sets.  When applied,
      the settings cause\n   an IKE service to automatically start (negotiate or statically
      set as\n   appropriate) the Security Associations.  The class definition for\n
      \  AutostartIKEConfiguration is as follows:\n      NAME         AutostartIKEConfiguration\n
      \     DESCRIPTION  A configuration set of AutostartIKESetting instances\n                   to
      be automatically started by the IKE service.\n      DERIVED FROM SystemConfiguration
      (see [CIMCORE])\n      ABSTRACT     FALSE\n"
    title: 8.4. The Class AutostartIKEConfiguration
  - contents:
    - "8.5. The Class AutostartIKESetting\n   The class AutostartIKESetting is used
      to automatically initiate IKE\n   negotiations with peers (or statically create
      an SA) as specified in\n   the AutostartIKESetting properties.  Appropriate
      actions are\n   initiated according to the policy that matches the setting\n
      \  parameters.  The class definition for AutostartIKESetting is as\n   follows:\n
      \     NAME         AutostartIKESetting\n      DESCRIPTION  AutostartIKESetting
      is used to automatically initiate\n                   IKE negotiations with
      peers or statically create an\n                   SA.\n      DERIVED FROM SystemSetting
      (see [CIMCORE])\n      ABSTRACT     FALSE\n      PROPERTIES   Phase1Only\n                   AddressType\n
      \                  SourceAddress\n                   SourcePort\n                   DestinationAddress\n
      \                  DestinationPort\n                   Protocol\n"
    - contents:
      - "8.5.1. The Property Phase1Only\n   The property Phase1Only is used to limit
        the IKE negotiation to a\n   phase 1 SA establishment only.  When set to False,
        both phase 1 and\n   phase 2 SAs are negotiated.  The property is defined
        as follows:\n      NAME         Phase1Only\n      DESCRIPTION  Used to indicate
        whether a phase 1 only or both phase\n                   1 and phase 2 security
        associations should attempt\n                   establishment.\n      SYNTAX
        \      boolean\n      VALUE        true - attempt to establish a phase 1 security\n
        \                  association\n                   false - attempt to establish
        phase 1 and phase 2\n                   security associations\n"
      title: 8.5.1. The Property Phase1Only
    - contents:
      - "8.5.2. The Property AddressType\n   The property AddressType specifies a
        type of the addresses in the\n   SourceAddress and DestinationAddress properties.
        \ The property is\n   defined as follows:\n      NAME         AddressType\n
        \     DESCRIPTION  AddressType is the type of address in SourceAddress\n                   and
        DestinationAddress properties.\n      SYNTAX       unsigned 16-bit integer\n
        \     VALUE        0 - Unknown\n                   1 - IPv4\n                   2
        - IPv6\n"
      title: 8.5.2. The Property AddressType
    - contents:
      - "8.5.3. The Property SourceAddress\n   The property SourceAddress specifies
        the dotted-decimal or colon-\n   decimal formatted IP address used as the
        source address in comparing\n   with policy filter entries and used in any
        phase 2 negotiations.  The\n   property is defined as follows:\n      NAME
        \        SourceAddress\n      DESCRIPTION  The source address to compare with
        the filters to\n                   determine the appropriate policy rule.\n
        \     SYNTAX       string\n      VALUE        dotted-decimal or colon-decimal
        formatted IP address\n"
      title: 8.5.3. The Property SourceAddress
    - contents:
      - "8.5.4. The Property SourcePort\n   The property SourcePort specifies the
        port number used as the source\n   port in comparing policy filter entries
        and is used in any phase 2\n   negotiations.  The property is defined as follows:\n
        \     NAME         SourcePort\n      DESCRIPTION  The source port to compare
        with the filters to\n                   determine the appropriate policy rule.\n
        \     SYNTAX       unsigned 16-bit integer\n"
      title: 8.5.4. The Property SourcePort
    - contents:
      - "8.5.5. The Property DestinationAddress\n   The property DestinationAddress
        specifies the dotted-decimal or\n   colon-decimal formatted IP address used
        as the destination address in\n   comparing policy filter entries and is used
        in any phase 2\n   negotiations.  The property is defined as follows:\n      NAME
        \        DestinationAddress\n      DESCRIPTION  The destination address to
        compare with the filters\n                   to determine the appropriate
        policy rule.\n      SYNTAX       string\n      VALUE        dotted-decimal
        or colon-decimal formatted IP address\n"
      title: 8.5.5. The Property DestinationAddress
    - contents:
      - "8.5.6. The Property DestinationPort\n   The property DestinationPort specifies
        the port number used as the\n   destination port in comparing policy filter
        entries and is used in\n   any phase 2 negotiations.  The property is defined
        as follows:\n      NAME         DestinationPort\n      DESCRIPTION  The destination
        port to compare with the filters to\n                   determine the appropriate
        policy rule.\n      SYNTAX       unsigned 16-bit integer\n"
      title: 8.5.6. The Property DestinationPort
    - contents:
      - "8.5.7. The Property Protocol\n   The property Protocol specifies the protocol
        number used in comparing\n   with policy filter entries and is used in any
        phase 2 negotiations.\n   The property is defined as follows:\n      NAME
        \        Protocol\n      DESCRIPTION  The protocol number used in comparing
        policy\n                   filter entries.\n      SYNTAX       unsigned 8-bit
        integer\n"
      title: 8.5.7. The Property Protocol
    title: 8.5. The Class AutostartIKESetting
  - contents:
    - "8.6. The Class IKEIdentity\n   The class IKEIdentity is used to represent the
      identities that may be\n   used for an IPProtocolEndpoint (or collection of
      IPProtocolEndpoints)\n   to identify the IKE Service in IKE phase 1 negotiations.
      \ The policy\n   IKEAction.UseIKEIdentityType specifies which type of the available\n
      \  identities to use in a negotiation exchange and the\n   IKERule.IdentityContexts
      specifies the match values to be used, along\n   with the local address, in
      selecting the appropriate identity for a\n   negotiation.  The ElementID property
      value (defined in the parent\n   class, UsersAccess) should be that of either
      the IPProtocolEndpoint\n   or Collection of endpoints as appropriate.  The class
      definition for\n   IKEIdentity is as follows:\n      NAME         IKEIdentity\n
      \     DESCRIPTION  IKEIdentity is used to represent the identities that\n                   may
      be used for an IPProtocolEndpoint (or collection\n                   of IPProtocolEndpoints)
      to identify the IKE Service\n                   in IKE phase 1 negotiations.\n
      \     DERIVED FROM UsersAccess (see [CIMUSER])\n      ABSTRACT     FALSE\n      PROPERTIES
      \  IdentityType\n                   IdentityValue\n                   IdentityContexts\n"
    - contents:
      - "8.6.1. The Property IdentityType\n   The property IdentityType is an enumeration
        that specifies the type\n   of the IdentityValue.  The property is defined
        as follows:\n      NAME         IdentityType\n      DESCRIPTION  IdentityType
        is the type of the IdentityValue.\n      SYNTAX       unsigned 16-bit integer\n
        \     VALUE        The enumeration values are specified in [DOI] section\n
        \                  4.6.2.1.\n"
      title: 8.6.1. The Property IdentityType
    - contents:
      - "8.6.2. The Property IdentityValue\n   The property IdentityValue contains
        a string encoding of the Identity\n   payload.  For IKEIdentity instances
        that are address types (i.e.,\n   IPv4 or IPv6 addresses), the IdentityValue
        string value MAY be\n   omitted; then the associated IPProtocolEndpoint (or
        appropriate\n   member of the Collection of endpoints) is used as the identity
        value.\n   The property is defined as follows:\n      NAME         IdentityValue\n
        \     DESCRIPTION  IdentityValue contains a string encoding of the\n                   Identity
        payload.\n      SYNTAX       string\n"
      title: 8.6.2. The Property IdentityValue
    - contents:
      - "8.6.3. The Property IdentityContexts\n   The IdentityContexts property is
        used to constrain the use of\n   IKEIdentity instances to match that specified
        in the\n   IKERule.IdentityContexts.  The IdentityContexts are formatted as\n
        \  policy roles and role combinations [PCIM] & [PCIME].  Each value\n   represents
        one context or context combination.  Since this is a\n   multi-valued property,
        more than one context or combination of\n   contexts can be associated with
        a single IKEIdentity.  Each value is\n   a string of the form:\n      <ContextName>[&&<ContextName>]*\n
        \  where the individual context names appear in alphabetical order\n   (according
        to the collating sequence for UCS-2).  If one or more\n   values in the IKERule.IdentityContexts
        array match one or more\n   IKEIdentity.IdentityContexts, then the identity's
        context matches.\n   (That is, each value of the IdentityContext array is
        an ORed\n   condition.)  In combination with the address of the\n   IPProtocolEndpoint
        and IKEAction.UseIKEIdentityType, there SHOULD be\n   exactly one IKEIdentity.
        \ The property is defined as follows:\n      NAME         IdentityContexts\n
        \     DESCRIPTION  The IKE service of a security endpoint may have\n                   multiple
        identities for use in different situations.\n                   The combination
        of the interface (represented by\n                   the IPProtocolEndpoint),
        the identity type (as\n                   specified in the IKEAction) and
        the IdentityContexts\n                   selects a unique identity.\n      SYNTAX
        \      string array\n      VALUE        string of the form <ContextName>[&&<ContextName>]*\n"
      title: 8.6.3. The Property IdentityContexts
    title: 8.6. The Class IKEIdentity
  - contents:
    - "8.7. The Association Class HostedPeerIdentityTable\n   The class HostedPeerIdentityTable
      provides the name scoping\n   relationship for PeerIdentityTable entries in
      a System.  The\n   PeerIdentityTable is weak to the System.  The class definition
      for\n   HostedPeerIdentityTable is as follows:\n      NAME         HostedPeerIdentityTable\n
      \     DESCRIPTION  The PeerIdentityTable instances are weak (name scoped\n                   by)
      the owning System.\n      DERIVED FROM Dependency (see [CIMCORE])\n      ABSTRACT
      \    FALSE\n      PROPERTIES   Antecedent [ref System[1..1]]\n                   Dependent
      [ref PeerIdentityTable[0..n] [weak]]\n"
    - contents:
      - "8.7.1. The Reference Antecedent\n   The property Antecedent is inherited
        from Dependency and is\n   overridden to refer to a System instance.  The
        [1..1] cardinality\n   indicates that a PeerIdentityTable instance MUST be
        associated in a\n   weak relationship with one and only one System instance.\n"
      title: 8.7.1. The Reference Antecedent
    - contents:
      - "8.7.2. The Reference Dependent\n   The property Dependent is inherited from
        Dependency and is overridden\n   to refer to a PeerIdentityTable instance.
        \ The [0..n] cardinality\n   indicates that a System instance may be associated
        with zero or more\n   PeerIdentityTable instances.\n"
      title: 8.7.2. The Reference Dependent
    title: 8.7. The Association Class HostedPeerIdentityTable
  - contents:
    - "8.8. The Aggregation Class PeerIdentityMember\n   The class PeerIdentityMember
      aggregates PeerIdentityEntry instances\n   into a PeerIdentityTable.  This is
      a weak aggregation.  The class\n   definition for PeerIdentityMember is as follows:\n
      \     NAME         PeerIdentityMember\n      DESCRIPTION  PeerIdentityMember
      aggregates PeerIdentityEntry\n                   instances into a PeerIdentityTable.\n
      \     DERIVED FROM MemberOfCollection (see [CIMCORE])\n      ABSTRACT     FALSE\n
      \     PROPERTIES   Collection [ref PeerIdentityTable[1..1]]\n                   Member
      [ref PeerIdentityEntry [0..n] [weak]]\n"
    - contents:
      - "8.8.1. The Reference Collection\n   The property Collection is inherited
        from MemberOfCollection and is\n   overridden to refer to a PeerIdentityTable
        instance.  The [1..1]\n   cardinality indicates that a PeerIdentityEntry instance
        MUST be\n   associated with one and only one PeerIdentityTable instance (i.e.,\n
        \  PeerIdentityEntry instances are not shared across\n   PeerIdentityTables).\n"
      title: 8.8.1. The Reference Collection
    - contents:
      - "8.8.2. The Reference Member\n   The property Member is inherited from MemberOfCollection
        and is\n   overridden to refer to a PeerIdentityEntry instance.  The [0..n]\n
        \  cardinality indicates that a PeerIdentityTable instance may be\n   associated
        with zero or more PeerIdentityEntry instances.\n"
      title: 8.8.2. The Reference Member
    title: 8.8. The Aggregation Class PeerIdentityMember
  - contents:
    - "8.9. The Association Class IKEServicePeerGateway\n   The class IKEServicePeerGateway
      provides the association between an\n   IKEService and the list of PeerGateway
      instances that it uses in\n   negotiating with security gateways.  The class
      definition for\n   IKEServicePeerGateway is as follows:\n      NAME         IKEServicePeerGateway\n
      \     DESCRIPTION  Associates an IKEService and the list of PeerGateway\n                   instances
      that it uses in negotiating with security\n                   gateways.\n      DERIVED
      FROM Dependency (see [CIMCORE])\n      ABSTRACT     FALSE\n      PROPERTIES
      \  Antecedent [ref PeerGateway[0..n]]\n                   Dependent [ref IKEService[0..n]]\n"
    - contents:
      - "8.9.1. The Reference Antecedent\n   The property Antecedent is inherited
        from Dependency and is\n   overridden to refer to a PeerGateway instance.
        \ The [0..n]\n   cardinality indicates that an IKEService instance may be
        associated\n   with zero or more PeerGateway instances.\n"
      title: 8.9.1. The Reference Antecedent
    - contents:
      - "8.9.2. The Reference Dependent\n   The property Dependent is inherited from
        Dependency and is overridden\n   to refer to an IKEService instance.  The
        [0..n] cardinality indicates\n   that a PeerGateway instance may be associated
        with zero or more\n   IKEService instances.\n"
      title: 8.9.2. The Reference Dependent
    title: 8.9. The Association Class IKEServicePeerGateway
  - contents:
    - "8.10. The Association Class IKEServicePeerIdentityTable\n   The class IKEServicePeerIdentityTable
      provides the relationship\n   between an IKEService and a PeerIdentityTable
      that it uses to map\n   between addresses and identities as required.  The class
      definition\n   for IKEServicePeerIdentityTable is as follows:\n      NAME         IKEServicePeerIdentityTable\n
      \     DESCRIPTION  IKEServicePeerIdentityTable provides the relationship\n                   between
      an IKEService and a PeerIdentityTable that it\n                   uses.\n      DERIVED
      FROM Dependency (see [CIMCORE])\n      ABSTRACT     FALSE\n      PROPERTIES
      \  Antecedent [ref PeerIdentityTable[0..n]]\n                   Dependent [ref
      IKEService[0..n]]\n"
    - contents:
      - "8.10.1. The Reference Antecedent\n   The property Antecedent is inherited
        from Dependency and is\n   overridden to refer to a PeerIdentityTable instance.
        \ The [0..n]\n   cardinality indicates that an IKEService instance may be
        associated\n   with zero or more PeerIdentityTable instances.\n"
      title: 8.10.1. The Reference Antecedent
    - contents:
      - "8.10.2. The Reference Dependent\n   The property Dependent is inherited from
        Dependency and is overridden\n   to refer to an IKEService instance.  The
        [0..n] cardinality indicates\n   that a PeerIdentityTable instance may be
        associated with zero or more\n   IKEService instances.\n"
      title: 8.10.2. The Reference Dependent
    title: 8.10. The Association Class IKEServicePeerIdentityTable
  - contents:
    - "8.11. The Association Class IKEAutostartSetting\n   The class IKEAutostartSetting
      associates an AutostartIKESetting with\n   an IKEService that may use it to
      automatically start an IKE\n   negotiation or create a static SA.  The class
      definition for\n   IKEAutostartSetting is as follows:\n      NAME         IKEAutostartSetting\n
      \     DESCRIPTION  Associates a AutostartIKESetting with an IKEService.\n      DERIVED
      FROM ElementSetting (see [CIMCORE])\n      ABSTRACT     FALSE\n      PROPERTIES
      \  Element [ref IKEService[0..n]]\n                   Setting [ref AutostartIKESetting[0..n]]\n"
    - contents:
      - "8.11.1. The Reference Element\n   The property Element is inherited from
        ElementSetting and is\n   overridden to refer to an IKEService instance.  The
        [0..n]\n   cardinality indicates an AutostartIKESetting instance may be\n
        \  associated with zero or more IKEService instances.\n"
      title: 8.11.1. The Reference Element
    - contents:
      - "8.11.2. The Reference Setting\n   The property Setting is inherited from
        ElementSetting and is\n   overridden to refer to an AutostartIKESetting instance.
        \ The [0..n]\n   cardinality indicates that an IKEService instance may be
        associated\n   with zero or more AutostartIKESetting instances.\n"
      title: 8.11.2. The Reference Setting
    title: 8.11. The Association Class IKEAutostartSetting
  - contents:
    - "8.12. The Aggregation Class AutostartIKESettingContext\n   The class AutostartIKESettingContext
      aggregates the settings used to\n   automatically start negotiations or create
      a static SA into a\n   configuration set.  The class definition for\n   AutostartIKESettingContext
      is as follows:\n      NAME         AutostartIKESettingContext\n      DESCRIPTION
      \ AutostartIKESettingContext aggregates the\n                   AutostartIKESetting
      instances into a configuration\n                   set.\n      DERIVED FROM
      SystemSettingContext (see [CIMCORE])\n      ABSTRACT     FALSE\n      PROPERTIES
      \  Context [ref AutostartIKEConfiguration [0..n]]\n                   Setting
      [ref AutostartIKESetting [0..n]]\n                   SequenceNumber\n"
    - contents:
      - "8.12.1. The Reference Context\n   The property Context is inherited from
        SystemSettingContext and is\n   overridden to refer to an AutostartIKEConfiguration
        instance.  The\n   [0..n] cardinality indicates that an AutostartIKESetting
        instance may\n   be associated with zero or more AutostartIKEConfiguration
        instances\n   (i.e., a setting may be in multiple configuration sets).\n"
      title: 8.12.1. The Reference Context
    - contents:
      - "8.12.2. The Reference Setting\n   The property Setting is inherited from
        SystemSettingContext and is\n   overridden to refer to an AutostartIKESetting
        instance.  The [0..n]\n   cardinality indicates that an AutostartIKEConfiguration
        instance may\n   be associated with zero or more AutostartIKESetting instances.\n"
      title: 8.12.2. The Reference Setting
    - contents:
      - "8.12.3. The Property SequenceNumber\n   The property SequenceNumber specifies
        the ordering to be used when\n   starting negotiations or creating a static
        SA.  A zero value\n   indicates that order is not significant and settings
        may be applied\n   in parallel with other settings.  All other settings in
        the\n   configuration are executed in sequence from lower to higher values.\n
        \  Sequence numbers need not be unique in an AutostartIKEConfiguration\n   and
        order is not significant for settings with the same sequence\n   number.  The
        property is defined as follows:\n      NAME         SequenceNumber\n      DESCRIPTION
        \ The sequence in which the settings are applied\n                   within
        a configuration set.\n      SYNTAX       unsigned 16-bit integer\n"
      title: 8.12.3. The Property SequenceNumber
    title: 8.12. The Aggregation Class AutostartIKESettingContext
  - contents:
    - "8.13. The Association Class IKEServiceForEndpoint\n   The class IKEServiceForEndpoint
      provides the association showing\n   which IKE service, if any, provides IKE
      negotiation services for\n   which network interfaces.  The class definition
      for\n   IKEServiceForEndpoint is as follows:\n      NAME         IKEServiceForEndpoint\n
      \     DESCRIPTION  Associates an IPProtocolEndpoint with an IKEService\n                   that
      provides negotiation services for the endpoint.\n      DERIVED FROM Dependency
      (see [CIMCORE])\n      ABSTRACT     FALSE\n      PROPERTIES   Antecedent [ref
      IKEService[0..1]]\n                   Dependent [ref IPProtocolEndpoint[0..n]]\n"
    - contents:
      - "8.13.1. The Reference Antecedent\n   The property Antecedent is inherited
        from Dependency and is\n   overridden to refer to an IKEService instance.
        \ The [0..1]\n   cardinality indicates that an IPProtocolEndpoint instance
        MUST by\n   associated with at most one IKEService instance.\n"
      title: 8.13.1. The Reference Antecedent
    - contents:
      - "8.13.2. The Reference Dependent\n   The property Dependent is inherited from
        Dependency and is overridden\n   to refer to an IPProtocolEndpoint that is
        associated with at most one\n   IKEService.  The [0..n] cardinality indicates
        an IKEService instance\n   may be associated with zero or more IPProtocolEndpoint
        instances.\n"
      title: 8.13.2. The Reference Dependent
    title: 8.13. The Association Class IKEServiceForEndpoint
  - contents:
    - "8.14. The Association Class IKEAutostartConfiguration\n   The class IKEAutostartConfiguration
      provides the relationship between\n   an IKEService and a configuration set
      that it uses to automatically\n   start a set of SAs.  The class definition
      for\n   IKEAutostartConfiguration is as follows:\n      NAME         IKEAutostartConfiguration\n
      \     DESCRIPTION  IKEAutostartConfiguration provides the relationship\n                   between
      an IKEService and an\n                   AutostartIKEConfiguration that it uses
      to\n                   automatically start a set of SAs.\n      DERIVED FROM
      Dependency (see [CIMCORE])\n      ABSTRACT     FALSE\n      PROPERTIES   Antecedent
      [ref AutostartIKEConfiguration [0..n]]\n                   Dependent [ref IKEService
      [0..n]]\n                   Active\n"
    - contents:
      - "8.14.1. The Reference Antecedent\n   The property Antecedent is inherited
        from Dependency and is\n   overridden to refer to an AutostartIKEConfiguration
        instance.  The\n   [0..n] cardinality indicates that an IKEService instance
        may be\n   associated with zero or more AutostartIKEConfiguration instances.\n"
      title: 8.14.1. The Reference Antecedent
    - contents:
      - "8.14.2. The Reference Dependent\n   The property Dependent is inherited from
        Dependency and is overridden\n   to refer to an IKEService instance.  The
        [0..n] cardinality indicates\n   that an AutostartIKEConfiguration instance
        may be associated with\n   zero or more IKEService instances.\n"
      title: 8.14.2. The Reference Dependent
    - contents:
      - "8.14.3. The Property Active\n   The property Active indicates whether the
        AutostartIKEConfiguration\n   set is currently active for the associated IKEService.
        \ That is, at\n   boot time, the active configuration is used to automatically
        start\n   IKE negotiations and create static SAs.  The property is defined
        as\n   follows:\n      NAME         Active\n      DESCRIPTION  Active indicates
        whether the\n                   AutostartIKEConfiguration set is currently
        active for\n                   the associated IKEService.\n      SYNTAX       boolean\n
        \     VALUE        true - AutostartIKEConfiguration is currently active\n
        \                  for associated IKEService.\n                   false -
        AutostartIKEConfiguration is currently\n                   inactive for associated
        IKEService.\n"
      title: 8.14.3. The Property Active
    title: 8.14. The Association Class IKEAutostartConfiguration
  - contents:
    - "8.15. The Association Class IKEUsesCredentialManagementService\n   The class
      IKEUsesCredentialManagementService defines the set of\n   CredentialManagementService(s)
      that are trusted sources of\n   credentials for IKE phase 1 negotiations.  The
      class definition for\n   IKEUsesCredentialManagementService is as follows:\n
      \     NAME         IKEUsesCredentialManagementService\n      DESCRIPTION  Associates
      the set of CredentialManagementService(s)\n                   that are trusted
      by the IKEService as sources of\n                   credentials used in IKE
      phase 1 negotiations.\n      DERIVED FROM Dependency (see [CIMCORE])\n      ABSTRACT
      \    FALSE\n      PROPERTIES   Antecedent [ref CredentialManagementService [0..n]]\n
      \                  Dependent [ref IKEService [0..n]]\n"
    - contents:
      - "8.15.1. The Reference Antecedent\n   The property Antecedent is inherited
        from Dependency and is\n   overridden to refer to a CredentialManagementService
        instance.  The\n   [0..n] cardinality indicates that an IKEService instance
        may be\n   associated with zero or more CredentialManagementService instances.\n"
      title: 8.15.1. The Reference Antecedent
    - contents:
      - "8.15.2. The Reference Dependent\n   The property Dependent is inherited from
        Dependency and is overridden\n   to refer to an IKEService instance.  The
        [0..n] cardinality indicates\n   that a CredentialManagementService instance
        may be associated with\n   zero or more IKEService instances.\n"
      title: 8.15.2. The Reference Dependent
    title: 8.15. The Association Class IKEUsesCredentialManagementService
  - contents:
    - "8.16. The Association Class EndpointHasLocalIKEIdentity\n   The class EndpointHasLocalIKEIdentity
      associates an\n   IPProtocolEndpoint with a set of IKEIdentity instances that
      may be\n   used in negotiating security associations on the endpoint.  An\n
      \  IKEIdentity MUST be associated with either an IPProtocolEndpoint\n   using
      this association or with a collection of IKEIdentity instances\n   using the
      CollectionHasLocalIKEIdentity association.  The class\n   definition for EndpointHasLocalIKEIdentity
      is as follows:\n      NAME         EndpointHasLocalIKEIdentity\n      DESCRIPTION
      \ EndpointHasLocalIKEIdentity associates an\n                   IPProtocolEndpoint
      with a set of IKEIdentity\n                   instances.\n      DERIVED FROM
      ElementAsUser (see [CIMUSER])\n      ABSTRACT     FALSE\n      PROPERTIES   Antecedent
      [ref IPProtocolEndpoint [0..1]]\n                   Dependent [ref IKEIdentity
      [0..n]]\n"
    - contents:
      - "8.16.1. The Reference Antecedent\n   The property Antecedent is inherited
        from ElementAsUser and is\n   overridden to refer to an IPProtocolEndpoint
        instance.  The [0..1]\n   cardinality indicates that an IKEIdentity instance
        MUST be associated\n   with at most one IPProtocolEndpoint instance.\n"
      title: 8.16.1. The Reference Antecedent
    - contents:
      - "8.16.2. The Reference Dependent\n   The property Dependent is inherited from
        ElementAsUser and is\n   overridden to refer to an IKEIdentity instance.  The
        [0..n]\n   cardinality indicates that an IPProtocolEndpoint instance may be\n
        \  associated with zero or more IKEIdentity instances.\n"
      title: 8.16.2. The Reference Dependent
    title: 8.16. The Association Class EndpointHasLocalIKEIdentity
  - contents:
    - "8.17. The Association Class CollectionHasLocalIKEIdentity\n   The class CollectionHasLocalIKEIdentity
      associates a Collection of\n   IPProtocolEndpoint instances with a set of IKEIdentity
      instances that\n   may be used in negotiating SAs for endpoints in the collection.
      \ An\n   IKEIdentity MUST be associated with either an IPProtocolEndpoint\n
      \  using the EndpointHasLocalIKEIdentity association or with a\n   collection
      of IKEIdentity instances using this association.  The\n   class definition for
      CollectionHasLocalIKEIdentity is as follows:\n      NAME         CollectionHasLocalIKEIdentity\n
      \     DESCRIPTION  CollectionHasLocalIKEIdentity associates a collection\n                   of
      IPProtocolEndpoint instances with a set of\n                   IKEIdentity instances.\n
      \     DERIVED FROM ElementAsUser (see [CIMUSER])\n      ABSTRACT     FALSE\n
      \     PROPERTIES   Antecedent [ref Collection [0..1]]\n                   Dependent
      [ref IKEIdentity [0..n]]\n"
    - contents:
      - "8.17.1. The Reference Antecedent\n   The property Antecedent is inherited
        from ElementAsUser and is\n   overridden to refer to a Collection instance.
        \ The [0..1] cardinality\n   indicates that an IKEIdentity instance MUST be
        associated with at\n   most one Collection instance.\n"
      title: 8.17.1. The Reference Antecedent
    - contents:
      - "8.17.2. The Reference Dependent\n   The property Dependent is inherited from
        ElementAsUser and is\n   overridden to refer to an IKEIdentity instance.  The
        [0..n]\n   cardinality indicates that a Collection instance may be associated\n
        \  with zero or more IKEIdentity instances.\n"
      title: 8.17.2. The Reference Dependent
    title: 8.17. The Association Class CollectionHasLocalIKEIdentity
  - contents:
    - "8.18. The Association Class IKEIdentitysCredential\n   The class IKEIdentitysCredential
      is an association that relates a set\n   of credentials to their corresponding
      local IKE Identities.  The\n   class definition for IKEIdentitysCredential is
      as follows:\n      NAME         IKEIdentitysCredential\n      DESCRIPTION  IKEIdentitysCredential
      associates a set of\n                   credentials to their corresponding local
      IKEIdentity.\n      DERIVED FROM UsersCredential (see [CIMCORE])\n      ABSTRACT
      \    FALSE\n      PROPERTIES   Antecedent [ref Credential [0..n]]\n                   Dependent
      [ref IKEIdentity [0..n]]\n"
    - contents:
      - "8.18.1. The Reference Antecedent\n   The property Antecedent is inherited
        from UsersCredential and is\n   overridden to refer to a Credential instance.
        \ The [0..n] cardinality\n   indicates that the IKEIdentity instance may be
        associated with zero\n   or more Credential instances.\n"
      title: 8.18.1. The Reference Antecedent
    - contents:
      - "8.18.2. The Reference Dependent\n   The property Dependent is inherited from
        UsersCredential and is\n   overridden to refer to an IKEIdentity instance.
        \ The [0..n]\n   cardinality indicates that a Credential instance may be associated\n
        \  with zero or more IKEIdentity instances.\n"
      title: 8.18.2. The Reference Dependent
    title: 8.18. The Association Class IKEIdentitysCredential
  title: 8. IKE Service and Identity Classes
- contents:
  - "9. Implementation Requirements\n   The following table specifies which classes,
    properties, associations\n   and aggregations MUST or SHOULD or MAY be implemented.\n
    \  4. Policy Classes\n   4.1. The Class SARule..........................................MUST\n
    \  4.1.1. The Property PolicyRuleName..............................MAY\n   4.1.1.
    The Property Enabled....................................MUST\n   4.1.1. The Property
    ConditionListType..........................MUST\n   4.1.1. The Property RuleUsage...................................MAY\n
    \  4.1.1. The Property Mandatory...................................MAY\n   4.1.1.
    The Property SequencedActions...........................MUST\n   4.1.1. The Property
    PolicyRoles.................................MAY\n   4.1.1. The Property PolicyDecisionStrategy......................MAY\n
    \  4.1.2  The Property ExecutionStrategy..........................MUST\n   4.1.3
    \ The Property LimitNegotiation............................MAY\n   4.2. The Class
    IKERule.........................................MUST\n   4.2.1. The Property IdentityContexts............................MAY\n
    \  4.3. The Class IPsecRule.......................................MUST\n   4.4.
    The Association Class IPsecPolicyForEndpoint...............MAY\n   4.4.1. The
    Reference Antecedent................................MUST\n   4.4.2. The Reference
    Dependent.................................MUST\n   4.5. The Association Class
    IPsecPolicyForSystem.................MAY\n   4.5.1. The Reference Antecedent................................MUST\n
    \  4.5.2. The Reference Dependent.................................MUST\n   4.6.
    The Aggregation Class SAConditionInRule...................MUST\n   4.6.1. The
    Property GroupNumber..............................SHOULD\n   4.6.1. The Property
    ConditionNegated.........................SHOULD\n   4.6.2. The Reference GroupComponent............................MUST\n
    \  4.6.3. The Reference PartComponent.............................MUST\n   4.7.
    The Aggregation Class PolicyActionInSARule................MUST\n   4.7.1. The
    Reference GroupComponent............................MUST\n   4.7.2. The Reference
    PartComponent.............................MUST\n   4.7.3. The Property ActionOrder..............................SHOULD\n
    \  5. Condition and Filter Classes\n   5.1. The Class SACondition.....................................MUST\n
    \  5.2. The Class IPHeadersFilter...............................SHOULD\n   5.3.
    The Class CredentialFilterEntry............................MAY\n   5.3.1. The
    Property MatchFieldName.............................MUST\n   5.3.2. The Property
    MatchFieldValue............................MUST\n   5.3.3. The Property CredentialType.............................MUST\n
    \  5.4. The Class IPSOFilterEntry..................................MAY\n   5.4.1.
    The Property MatchConditionType.........................MUST\n   5.4.2. The Property
    MatchConditionValue........................MUST\n   5.5. The Class PeerIDPayloadFilterEntry.........................MAY\n
    \  5.5.1. The Property MatchIdentityType..........................MUST\n   5.5.2.
    The Property MatchIdentityValue.........................MUST\n   5.6. The Association
    Class FilterOfSACondition...............SHOULD\n   5.6.1. The Reference Antecedent................................MUST\n
    \  5.6.2. The Reference Dependent.................................MUST\n   5.7.
    The Association Class AcceptCredentialFrom.................MAY\n   5.7.1. The
    Reference Antecedent................................MUST\n   5.7.2. The Reference
    Dependent.................................MUST\n   6. Action Classes\n   6.1.
    The Class SAAction........................................MUST\n   6.1.1. The
    Property DoActionLogging.............................MAY\n   6.1.2. The Property
    DoPacketLogging.............................MAY\n   6.2. The Class SAStaticAction..................................MUST\n
    \  6.2.1. The Property LifetimeSeconds............................MUST\n   6.3.
    The Class IPsecBypassAction.............................SHOULD\n   6.4. The Class
    IPsecDiscardAction............................SHOULD\n   6.5. The Class IKERejectAction..................................MAY\n
    \  6.6. The Class PreconfiguredSAAction...........................MUST\n   6.6.1.
    The Property LifetimeKilobytes..........................MUST\n   6.7. The Class
    PreconfiguredTransportAction....................MUST\n   6.8. The Class PreconfiguredTunnelAction.......................MUST\n
    \  6.8.1. The Property DFHandling.................................MUST\n   6.9.
    The Class SANegotiationAction.............................MUST\n   6.10. The Class
    IKENegotiationAction...........................MUST\n   6.10.1. The Property MinLifetimeSeconds.........................MAY\n
    \  6.10.2. The Property MinLifetimeKilobytes.......................MAY\n   6.10.3.
    The Property IdleDurationSeconds........................MAY\n   6.11. The Class
    IPsecAction....................................MUST\n   6.11.1. The Property UsePFS....................................MUST\n
    \  6.11.2. The Property UseIKEGroup................................MAY\n   6.11.3.
    The Property GroupId...................................MUST\n   6.11.4. The Property
    Granularity.............................SHOULD\n   6.11.5. The Property VendorID...................................MAY\n
    \  6.12. The Class IPsecTransportAction...........................MUST\n   6.13.
    The Class IPsecTunnelAction..............................MUST\n   6.13.1. The
    Property DFHandling................................MUST\n   6.14. The Class IKEAction......................................MUST\n
    \  6.14.1. The Property ExchangeMode  ............................MUST\n   6.14.2.
    The Property UseIKEIdentityType........................MUST\n   6.14.3. The Property
    VendorID...................................MAY\n   6.14.4. The Property AggressiveModeGroupId......................MAY\n
    \  6.15. The Class PeerGateway....................................MUST\n   6.15.1.
    The Property Name....................................SHOULD\n   6.15.2. The Property
    PeerIdentityType..........................MUST\n   6.15.3. The Property PeerIdentity..............................MUST\n
    \  6.16. The Association Class PeerGatewayForTunnel...............MUST\n   6.16.1.
    The Reference Antecedent...............................MUST\n   6.16.2. The Reference
    Dependent................................MUST\n   6.16.3. The Property SequenceNumber..........................SHOULD\n
    \  6.17. The Aggregation Class ContainedProposal..................MUST\n   6.17.1.
    The Reference GroupComponent...........................MUST\n   6.17.2. The Reference
    PartComponent............................MUST\n   6.17.3. The Property SequenceNumber............................MUST\n
    \  6.18. The Association Class HostedPeerGatewayInformation........MAY\n   6.18.1.
    The Reference Antecedent...............................MUST\n   6.18.2. The Reference
    Dependent................................MUST\n   6.19. The Association Class
    TransformOfPreconfiguredAction.....MUST\n   6.19.1. The Reference Antecedent...............................MUST\n
    \  6.19.2. The Reference Dependent................................MUST\n   6.19.3.
    The Property SPI.......................................MUST\n   6.19.4. The Property
    Direction.................................MUST\n   6.20. The Association Class
    PeerGatewayForPreconfiguredTunnel..MUST\n   6.20.1. The Reference Antecedent...............................MUST\n
    \  6.20.2. The Reference Dependent................................MUST\n   7.
    Proposal and Transform Classes\n   7.1. The Abstract Class SAProposal.............................MUST\n
    \  7.1.1. The Property Name.....................................SHOULD\n   7.2
    The Class IKEProposal......................................MUST\n   7.2.1. The
    Property CipherAlgorithm............................MUST\n   7.2.2. The Property
    HashAlgorithm..............................MUST\n   7.2.3. The Property PRFAlgorithm................................MAY\n
    \  7.2.4. The Property GroupId....................................MUST\n   7.2.5.
    The Property AuthenticationMethod.......................MUST\n   7.2.6. The Property
    MaxLifetimeSeconds.........................MUST\n   7.2.7. The Property MaxLifetimeKilobytes.......................MUST\n
    \  7.2.8. The Property VendorID....................................MAY\n   7.3.
    The Class IPsecProposal...................................MUST\n   7.4. The Abstract
    Class SATransform............................MUST\n   7.4.1. The Property TransformName............................SHOULD\n
    \  7.4.2. The Property VendorID....................................MAY\n   7.4.3.
    The Property MaxLifetimeSeconds.........................MUST\n   7.4.4. The Property
    MaxLifetimeKilobytes.......................MUST\n   7.5. The Class AHTransform.....................................MUST\n
    \  7.5.1. The Property AHTransformId..............................MUST\n   7.5.2.
    The Property UseReplayPrevention.........................MAY\n   7.5.3. The Property
    ReplayPreventionWindowSize..................MAY\n   7.6. The Class ESPTransform....................................MUST\n
    \  7.6.1. The Property IntegrityTransformId.......................MUST\n   7.6.2.
    The Property CipherTransformId..........................MUST\n   7.6.3. The Property
    CipherKeyLength.............................MAY\n   7.6.4. The Property CipherKeyRounds.............................MAY\n
    \  7.6.5. The Property UseReplayPrevention.........................MAY\n   7.6.6.
    The Property ReplayPreventionWindowSize..................MAY\n   7.7. The Class
    IPCOMPTransform..................................MAY\n   7.7.1. The Property Algorithm..................................MUST\n
    \  7.7.2. The Property DictionarySize..............................MAY\n   7.7.3.
    The Property PrivateAlgorithm............................MAY\n   7.8. The Association
    Class SAProposalInSystem...................MAY\n   7.8.1. The Reference Antecedent................................MUST\n
    \  7.8.2. The Reference Dependent.................................MUST\n   7.9.
    The Aggregation Class ContainedTransform..................MUST\n   7.9.1. The
    Reference GroupComponent............................MUST\n   7.9.2. The Reference
    PartComponent.............................MUST\n   7.9.3. The Property SequenceNumber.............................MUST\n
    \  7.10. The Association Class SATransformInSystem.................MAY\n   7.10.1.
    The Reference Antecedent...............................MUST\n   7.10.2. The Reference
    Dependent................................MUST\n   8. IKE Service and Identity
    Classes\n   8.1. The Class IKEService.......................................MAY\n
    \  8.2. The Class PeerIdentityTable................................MAY\n   8.3.1.
    The Property Name.....................................SHOULD\n   8.3. The Class
    PeerIdentityEntry................................MAY\n   8.3.1. The Property PeerIdentity.............................SHOULD\n
    \  8.3.2. The Property PeerIdentityType.........................SHOULD\n   8.3.3.
    The Property PeerAddress..............................SHOULD\n   8.3.4. The Property
    PeerAddressType..........................SHOULD\n   8.4. The Class AutostartIKEConfiguration........................MAY\n
    \  8.5. The Class AutostartIKESetting..............................MAY\n   8.5.1.
    The Property Phase1Only..................................MAY\n   8.5.2. The Property
    AddressType..............................SHOULD\n   8.5.3. The Property SourceAddress..............................MUST\n
    \  8.5.4. The Property SourcePort.................................MUST\n   8.5.5.
    The Property DestinationAddress.........................MUST\n   8.5.6. The Property
    DestinationPort............................MUST\n   8.5.7. The Property Protocol...................................MUST\n
    \  8.6. The Class IKEIdentity......................................MAY\n   8.6.1.
    The Property IdentityType...............................MUST\n   8.6.2. The Property
    IdentityValue..............................MUST\n   8.6.3. The Property IdentityContexts............................MAY\n
    \  8.7. The Association Class HostedPeerIdentityTable..............MAY\n   8.7.1.
    The Reference Antecedent................................MUST\n   8.7.2. The Reference
    Dependent.................................MUST\n   8.8. The Aggregation Class
    PeerIdentityMember...................MAY\n   8.8.1. The Reference Collection................................MUST\n
    \  8.8.2. The Reference Member....................................MUST\n   8.9.
    The Association Class IKEServicePeerGateway................MAY\n   8.9.1. The
    Reference Antecedent................................MUST\n   8.9.2. The Reference
    Dependent.................................MUST\n   8.10. The Association Class
    IKEServicePeerIdentityTable.........MAY\n   8.10.1. The Reference Antecedent...............................MUST\n
    \  8.10.2. The Reference Dependent................................MUST\n   8.11.
    The Association Class IKEAutostartSetting.................MAY\n   8.11.1. The
    Reference Element..................................MUST\n   8.11.2. The Reference
    Setting..................................MUST\n   8.12. The Aggregation Class
    AutostartIKESettingContext..........MAY\n   8.12.1. The Reference Context..................................MUST\n
    \  8.12.2. The Reference Setting..................................MUST\n   8.12.3.
    The Property SequenceNumber..........................SHOULD\n   8.13. The Association
    Class IKEServiceForEndpoint...............MAY\n   8.13.1. The Reference Antecedent...............................MUST\n
    \  8.13.2. The Reference Dependent................................MUST\n   8.14.
    The Association Class IKEAutostartConfiguration...........MAY\n   8.14.1. The
    Reference Antecedent...............................MUST\n   8.14.2. The Reference
    Dependent................................MUST\n   8.14.3. The Property Active..................................SHOULD\n
    \  8.15. The Association Class IKEUsesCredentialManagementService..MAY\n   8.15.1.
    The Reference Antecedent...............................MUST\n   8.15.2. The Reference
    Dependent................................MUST\n   8.16. The Association Class
    EndpointHasLocalIKEIdentity.........MAY\n   8.16.1. The Reference Antecedent...............................MUST\n
    \  8.16.2. The Reference Dependent................................MUST\n   8.17.
    The Association Class CollectionHasLocalIKEIdentity.......MAY\n   8.17.1. The
    Reference Antecedent...............................MUST\n   8.17.2. The Reference
    Dependent................................MUST\n   8.18. The Association Class
    IKEIdentitysCredential..............MAY\n   8.18.1. The Reference Antecedent...............................MUST\n
    \  8.18.2. The Reference Dependent................................MUST\n"
  title: 9. Implementation Requirements
- contents:
  - "10. Security Considerations\n   This document only describes an information model
    for IPsec policy.\n   It does not detail security requirements for storage or
    delivery of\n   said information.\n   Physical models derived from this information
    model MUST implement\n   the relevant security for storage and delivery.  Most
    of the classes\n   (e.g., IpHeadersFilter, SAAction,...) MUST at least provided
    the\n   integrity service; other pieces of information MUST also receive the\n
    \  confidentiality service (e.g., SharedSecret as described in the\n   classes
    PeerIdentityEntry and PreconfiguredSAAction).\n"
  title: 10. Security Considerations
- contents:
  - "11. Intellectual Property Statement\n   The IETF takes no position regarding
    the validity or scope of any\n   intellectual property or other rights that might
    be claimed to\n   pertain to the implementation or use of the technology described
    in\n   this document or the extent to which any license under such rights\n   might
    or might not be available; neither does it represent that it\n   has made any
    effort to identify any such rights.  Information on the\n   IETF's procedures
    with respect to rights in standards-track and\n   standards-related documentation
    can be found in BCP-11.\n   Copies of claims of rights made available for publication
    and any\n   assurances of licenses to be made available, or the result of an\n
    \  attempt made to obtain a general license or permission for the use of\n   such
    proprietary rights by implementers or users of this\n   specification can be obtained
    from the IETF Secretariat.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights which may cover technology that may be required to practice\n
    \  this standard.  Please address the information to the IETF Executive\n   Director.\n"
  title: 11. Intellectual Property Statement
- contents:
  - '12. References

    '
  - contents:
    - "12.1. Normative References\n   [COMP]       Shacham, A., Monsour, B., Pereira,
      R. and M. Thomas, \"IP\n                Payload Compression Protocol (IPComp)\",
      RFC 3173,\n                September 2001.\n   [ESP]        Kent, S. and R.
      Atkinson, \"IP Encapsulating Security\n                Payload (ESP)\", RFC
      2406, November 1998.\n   [AH]         Kent, S. and R. Atkinson, \"IP Authentication
      Header\",\n                RFC 2402, November 1998.\n   [DOI]        Piper,
      D., \"The Internet IP Security Domain of\n                Interpretation for
      ISAKMP\", RFC 2407, November 1998.\n   [IKE]        Harkins, D. and D. Carrel,
      \"The Internet Key Exchange\n                (IKE)\", RFC 2409, November 1998.\n
      \  [PCIM]       Moore, B., Ellesson, E., Strassner, J. and A.\n                Westerinen,
      \"Policy Core Information Model -- Version 1\n                Specification\",
      RFC 3060, February 2001.\n   [PCIME]      Moore, B., Editor, \"Policy Core Information
      Model (PCIM)\n                Extensions\", RFC 3460, January 2003.\n   [KEYWORDS]
      \  Bradner, S., \"Key words for use in RFCs to Indicate\n                Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [CIMCORE]    DMTF Common Information
      Model - Core Model v2.5 which\n                can be found at\n                http://www.dmtf.org/standards/CIM_Schema25/\n
      \               CIM_Core25.mof\n   [CIMUSER]    DMTF Common Information Model
      - User-Security Model v2.5\n                which can be found at\n                http://www.dmtf.org/standards/CIM_Schema25/\n
      \               CIM_User25.mof\n   [CIMNETWORK] DMTF Common Information Model
      - Network Model v2.5\n                which can be found at\n                http://www.dmtf.org/standards/CIM_Schema25/\n
      \               CIM_Network25.mof\n   [IPSO]       Kent, S., \"U.S. Department
      of Defense Security Options\n                for the Internet Protocol\", RFC
      1108, November 1991.\n   [IPSEC]      Kent, S. and R. Atkinson, \"Security Architecture
      for the\n                Internet Protocol\", RFC 2401, November 1998.\n"
    title: 12.1. Normative References
  - contents:
    - "12.2. Informative References\n   [LDAP]       Wahl, M., Howes, T. and S. Kille,
      \"Lightweight Directory\n                Access Protocol (v3)\", RFC 2251, December
      1997.\n   [COPS]       Durham, D., Ed., Boyle, J., Cohen, R., Herzog, S.,\n
      \               Rajan, R. and A. Sastry, \"The COPS (Common Open Policy\n                Service)
      Protocol\", RFC 2748, January 2000.\n   [COPSPR]     Chan, K., Seligson, J.,
      Durham, D., Gai, S., McCloghrie,\n                K., Herzog, S., Reichmeyer,
      R., Yavatkar, R. and A.\n                Smith, \"COPS Usage for Policy Provisioning
      (COPS-PR)\",\n                RFC 3084, March 2001.\n   [DMTF]       Distributed
      Management Task Force, http://www.dmtf.org/\n"
    title: 12.2. Informative References
  title: 12. References
- contents:
  - "13. Disclaimer\n   The views and specification herein are those of the authors
    and are\n   not necessarily those of their employer.  The authors and their\n
    \  employer specifically disclaim responsibility for any problems\n   arising
    from correct or incorrect implementation or use of this\n   specification.\n"
  title: 13. Disclaimer
- contents:
  - "14. Acknowledgments\n   The authors would like to thank Mike Jeronimo, Ylian
    Saint-Hilaire,\n   Vic Lortz, William Dixon, Man Li, Wes Hardaker and Ricky Charlet
    for\n   their contributions to this IPsec policy model.\n   Additionally, this
    document would not have been possible without the\n   preceding IPsec schema documents.
    \ For that, thanks go out to Rob\n   Adams, Partha Bhattacharya, William Dixon,
    Roy Pereira, and Raju\n   Rajan.\n"
  title: 14. Acknowledgments
- contents:
  - "15. Authors' Addresses\n   Jamie Jason\n   Intel Corporation\n   MS JF3-206\n
    \  2111 NE 25th Ave.\n   Hillsboro, OR 97124\n   EMail: jamie.jason@intel.com\n
    \  Lee Rafalow\n   IBM Corporation, BRQA/502\n   4205 So. Miami Blvd.\n   Research
    Triangle Park, NC 27709\n   EMail: rafalow@watson.ibm.com\n   Eric Vyncke\n   Cisco
    Systems\n   7 De Kleetlaan\n   B-1831 Diegem\n   Belgium\n   EMail: evyncke@cisco.com\n"
  title: 15. Authors' Addresses
- contents:
  - "16. Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assignees.\n   This document and the
    information contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET
    SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES,
    EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE
    OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 16. Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
