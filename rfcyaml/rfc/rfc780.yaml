- title: __initial_text__
  contents:
  - "                         MAIL TRANSFER PROTOCOL\n                           \
    \ Suzanne Sluizer\n                           Jonathan B. Postel\n           \
    \          Information Sciences Institute\n                   University of Southern\
    \ California\n                           4676 Admiralty Way\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \                         TABLE OF CONTENTS\n   1.  INTRODUCTION ..................................................\
    \ 1\n   2.  THE MTP MODEL ................................................. 2\n\
    \   3.  BASIC MAIL .................................................... 4\n  \
    \    3.1.  Forwarding ............................................... 5\n    \
    \  3.2.  Source Routing ........................................... 6\n   4. \
    \ MULTI-RECIPIENT MAIL .......................................... 8\n      4.1.\
    \  Scheme Selection: MRSQ ................................... 8\n      4.2.  Message\
    \ Text Specification: MAIL ......................... 9\n      4.3.  Recipient\
    \ Specification: MRCP ........................... 10\n      4.4.  Scheme Mechanics:\
    \ Recipients First ...................... 10\n      4.5.  Scheme Mechanics: Text\
    \ First ............................ 12\n      4.6.  Discussion ..............................................\
    \ 12\n   5.  SPECIFICATIONS ............................................... 16\n\
    \      5.1.  MTP Commands ............................................ 16\n  \
    \    5.1.1.  Command Semantics ..................................... 16\n    \
    \  5.1.2.  Command Syntax ........................................ 18\n      5.2.\
    \  MTP Replies ............................................. 22\n      5.2.1.\
    \  Reply Codes by Function Group ......................... 23\n      5.2.2.  Reply\
    \ Codes in Numeric Order .......................... 24\n      5.3.  Sequencing\
    \ of Commands and Replies ...................... 25\n      5.4.  State Diagrams\
    \ .......................................... 28\n      5.5.  Details .................................................\
    \ 30\n      5.5.1.  Minimum Implementation ................................ 30\n\
    \      5.5.2.  Transparency .......................................... 30\n  \
    \    5.5.3.  Sizes ................................................. 30\n   APPENDIX\
    \ A:  TCP ................................................. 32\n   APPENDIX B:\
    \  NCP ................................................. 33\n   APPENDIX C:  NITS\
    \ ................................................ 34\n   APPENDIX D:  X.25 ................................................\
    \ 35\n   APPENDIX E:  Theory of Reply Codes ............................... 36\n"
- title: Network Working Group                                         S. Sluizer
  contents:
  - 'Network Working Group                                         S. Sluizer

    '
- title: 'Request for Comments: 780                                      J. Postel'
  contents:
  - "Request for Comments: 780                                      J. Postel\n  \
    \                                                                   ISI\n"
- title: 'Replaces: RFC 772                                               May 1981'
  contents:
  - "Replaces: RFC 772                                               May 1981\n  \
    \                       MAIL TRANSFER PROTOCOL\n"
- title: 1.  INTRODUCTION
  contents:
  - "1.  INTRODUCTION\n   The objective of Mail Transfer Protocol (MTP) is to transfer\
    \ mail\n   reliably and efficiently.\n   MTP is designed to be independent of\
    \ the particular transmission\n   subsystem and requires only a reliable ordered\
    \ data stream channel.\n   Appendices describe the use of MTP with various transport\
    \ services.\n   A Glossary provides the definitions of terms as used in this\n\
    \   document.\n   An important feature of MTP is its capability to relay mail\
    \ from one\n   transport environment to another.  A transport service provides\
    \ an\n   interprocess communication environment (IPCE).  An IPCE may cover one\n\
    \   network, several networks, or a subset of a network.  A process can\n   communicate\
    \ directly with another process anywhere in its own IPCE.\n   Mail is a special\
    \ case of interprocess communication.  Mail can be\n   communicated between proceses\
    \ in different IPCEs by relaying through\n   a process connected to two (or more)\
    \ IPCEs.  More specifically, mail\n   can be relayed between hosts on different\
    \ transport systems by a host\n   on both transport systems.  It is important\
    \ to realize that transport\n   systems (or IPCEs) are not one-to-one with networks.\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n"
- title: 2.  THE MTP MODEL
  contents:
  - "2.  THE MTP MODEL\n   The MTP design is based on the following model of communication:\
    \  at\n   the initiation of the user, the sender-MTP establishes the\n   full-duplex\
    \ transmission channel.  MTP commands are generated by the\n   sender-MTP and\
    \ sent to the receiver-MTP.  MTP replies are sent from\n   the receiver-MTP to\
    \ the sender-MTP in response to the commands.\n   In the simplest case, once the\
    \ transmission channel is established\n   the MTP-sender sends a MAIL command\
    \ indicating the sender and\n   receiver of the mail.  If the MTP-receiver can\
    \ accept the mail it\n   responds with a go ahead reply.  Then the MTP-sender\
    \ sends the mail\n   data, terminating with a special sequence.  If the MTP-receiver\n\
    \   successfully processes the mail it responds with an OK reply.\n     -------------------------------------------------------------\n\
    \               +----------+                +----------+\n   +------+    |   \
    \       |                |          |\n   | User |<-->|          |      MTP  \
    \     |          |\n   +------+    |  Sender- |Commands/Replies| Receiver-|\n\
    \   +------+    |   MTP    |<-------------->|    MTP   |    +------+\n   | File\
    \ |<-->|          |    and Mail    |          |<-->| File |\n   |System|    |\
    \          |                |          |    |System|\n   +------+    +----------+\
    \                +----------+    +------+\n                Sender-MTP        \
    \         Receiver-MTP\n                           Model for MTP Use\n       \
    \                         Figure 1\n     -------------------------------------------------------------\n\
    \   The MTP provides mechanisms for the transmission of mail; directly\n   from\
    \ the sending user's host to the receiving user's host when the\n   two host are\
    \ connected to the same transport service, or via one or\n   more relay MTP-servers\
    \ when the source and destination hosts are not\n   connected to the same transport\
    \ service.\n   To be able to provide the relay capability the MTP-server must\
    \ be\n   supplied with the name of the ultimate destination host as well as\n\
    \   the destination mailbox name.\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n   The\
    \ arguments to the MAIL command are a FROM path and a TO path.  The\n   TO path\
    \ is a source route while the FROM path is a return route\n   (which may be used\
    \ to return a message to the sender when an error\n   occurs with a relayed message).\n\
    \   The preceding discussion has outlined the transmission of one copy of\n  \
    \ one message from a source to a destination host and the possibility\n   of relaying\
    \ messages between different transport services.  The MTP\n   additionally supports\
    \ the transmission of one copy of a message\n   addressed to multiple recipients.\n\
    \   In order for mail to be successfully transmitted the destination\n   users\
    \ must be known at the destination receiver-MTP and the mail data\n   must be\
    \ correctly received and stored.  In the single recipient case\n   discussed above\
    \ the positive response to the MAIL command indicated\n   the recipient was known,\
    \ and the final OK response indicated the mail\n   was received and stored.\n\
    \   To support multi-recipient mail, MTP provides two procedures:\n   Text-First,\
    \ and Recipients-First.  In the text-first scheme the mail\n   data is sent and\
    \ acknowledged, then each recipient identification is\n   sent and acknowledged\
    \ (or refused) separately.  In the\n   recipients-first scheme the recipients\
    \ are negotiated first, then the\n   text is sent and acknowledged (for all recipients\
    \ at once).  The\n   choice of scheme is up to the MTP-receiver, and depends on\
    \ the way\n   mail is handled in the destination host.\n   The multi-recipient\
    \ mail procedures are optional and the\n   determination of which scheme to use\
    \ is negotiated.  The use of the\n   multi-recipient schemes is strongly encouraged\
    \ by the economy they\n   provide in transmission and processing.\n   The mail\
    \ commands and replies have a rigid syntax.  Replies also have\n   a numeric code.\
    \  In the following, examples appear which use actual\n   commands and replies.\
    \  The complete lists of commands and replies\n   appears in Section 5 on specifications.\n\
    \   Commands and replies are not case sensitive.  That is, a command or\n   reply\
    \ word may be upper case, lower case, or any mixture of upper and\n   lower case.\
    \  Note that this is not true of mailbox user names.  For\n   some hosts the user\
    \ name is case sensitive, and MTP implementations\n   must take case to preserve\
    \ the case of user names as they appear in\n   mailbox arguments.\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n"
- title: 3.  BASIC MAIL
  contents:
  - "3.  BASIC MAIL\n   The basic command for transmitting mail is MAIL.  This command\
    \ causes\n   the transmitted data to be entered into the recipient's mailbox,\
    \ or\n   accepted for relaying to the destination host.\n   The mail text is also\
    \ sent on the transmission channel.  This\n   requires  that the end of the text\
    \ be signalled so that the command\n   and reply dialog can be resumed.  MTP signals\
    \ the end of the mail\n   text by sending a line containing only a period.  A\
    \ transparency\n   procedure is used to prevent this interfering with the users\
    \ text\n   (see Section 5.5.2).\n      MAIL <SP> FROM:<sender-path> <SP> TO:<receiver-path>\
    \ <CRLF>\n         The <sender-path> contains the source mailbox; the\n      \
    \   <receiver-path> contains the destination mailbox.  If accepted,\n        \
    \ the receiver-MTP returns a 354 reply and considers all\n         succeeding\
    \ lines to be the message text.  The message text is\n         terminated by a\
    \ line containing only a period, upon which a 250\n         completion reply is\
    \ returned.  Various errors are possible.\n         Actually the <sender-path>\
    \ and <receiver-path> are more than\n         just the mailboxes, they may be\
    \ source routes.  The\n         <receiver-path> is a source routing list of hosts\
    \ and\n         destination mailbox; the <sender-path> is a reverse source\n \
    \        routing list of hosts and source mailbox.\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n    \
    \ -------------------------------------------------------------\n            \
    \          Example of MAIL (Basic Mail)\n      This MAIL command specifies the\
    \ mail is sent by Waldo at host A,\n      and is to be delivered to Foo at host\
    \ Y.  Here we assume that host\n      A contacts host Y directly.\n         S:\
    \ MAIL FROM:<waldo@A> TO:<Foo@Y> <CRLF>\n         R: 354 Start mail input; end\
    \ with <CRLF>.<CRLF>\n         S: Blah blah blah blah....etc. etc. etc.\n    \
    \     S: <CRLF>.<CRLF>\n         R: 250 Mail sent\n      The mail text has now\
    \ been sent to \"Foo\".\n                               Example 1\n     -------------------------------------------------------------\n\
    \   3.1.  FORWARDING\n      There are two possible preliminary replies that a\
    \ receiver may use\n      to indicate that it is accepting mail for a user whose\
    \ mailbox is\n      not at that host.\n         151 User not local; will forward\
    \ to <user>@<host>\n            This reply indicates that the receiver-MTP knows\
    \ the user's\n            mailbox is on another host and will take responsibility\
    \ for\n            forwarding the mail to that host.  This reply is only sent\n\
    \            when the sender would not expect the mail to be forwarded.\n    \
    \        That is, when <receiver-path> as given in the command\n            indicates\
    \ mail relaying, this reply will not be used.  This\n            reply could be\
    \ used for an organization with several hosts\n            when each has a list\
    \ of many of the users on the hosts.  A\n            host can accept mail for\
    \ any user on its list and forward it\n            to the correct host.\n    \
    \     152 User Unknown; mail will be forwarded by the operator\n            This\
    \ reply indicates that the host does not recognize the\n            user name,\
    \ but that it will accept the mail and have the\n            operator attempt\
    \ to deliver it.  This is useful if the user\n            name is misspelled,\
    \ but may be a disservice if the mail is\n            really undeliverable.\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \    If forwarding by the operator is unacceptable or if the\n      sending-user\
    \ would prefer to send the mail directly to the\n      recipient's actual host,\
    \ the action may be aborted.\n      The MTP-sender must accept or reject the proposal\
    \ in the\n      preliminary reply by sending a continue (CONT) or abort (ABRT)\n\
    \      command.  In the case of the continue, the next reply from the\n      MTP-receiver\
    \ will be any of the replies expected for the MAIL\n      command, most likely\
    \ \"354 Start mail input, ...\".  In the case of\n      the abort, the next reply\
    \ from the MTP-receiver will be \"201\n      Command okay, action aborted\".\n\
    \   3.2.  SOURCE ROUTING\n      The receiver-path may be a source route of the\
    \ form\n      \"@ONE,@TWO,JOE@THREE\", where ONE, TWO, and THREE are hosts.  This\n\
    \      form is used to emphasize the distinction between an address and a\n  \
    \    route.\n      At some distant future time it might be necessary to expand\
    \ the\n      mailbox format to include a region identifier, such as\n      \"\
    user@host@region\".  If this occured the MTP  path convention\n      could be\
    \ expanded to\n      \"host@region,host@region,...user@host@region\". For example,\n\
    \      \"ONE@R1,TWO@R2,JOE@THREE@R3\".\n      The mailbox is an absolute address,\
    \ and the route is information\n      about how to get there.  The two concepts\
    \ should not be confused.\n      The elements of the receiver-path are to be moved\
    \ to the\n      sender-path as the message is relayed from one MTP to another.\
    \ The\n      sender-path is a reverse source route, that is, a source route to\n\
    \      the originator of the message.  When an MTP deletes its identifier\n  \
    \    from the receiver-path and inserts it into the sender-path, it\n      must\
    \ use the name it is known by in the environment it is sending\n      into, not\
    \ the environment the mail came from, in case the MTP is\n      known be different\
    \ names in different environments.\n      When source routing is used the receiver-MTP\
    \ will receive mail to\n      be relayed to another MTP.  The receiver-MTP may\
    \ accept the task\n      of relaying the mail or reject it in the same way it\
    \ accepts or\n      reject mail for a local user.  It does not use the 151 \"\
    User not\n      local\" or 152 \"User unknown\" preliminary replies.  Once the\n\
    \      receiver-MTP accepts the relaying task it receives the mail text\n    \
    \  and transforms the command arguments by removing its own\n      identifier\
    \ from the receiver-path and inserting it in the\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n    \
    \  beginning of the sender-path.  The receiver-MTP then becomes a\n      sender-MTP\
    \ and establishes a transmission channel to the next MTP\n      in the receiver-path\
    \ and sends it the mail.\n      If an MTP has accepted the task of relaying the\
    \ mail and later\n      finds that the receiver-path is incorrect or that the\
    \ mail cannot\n      be delivered for whatever reason, then it must construct\
    \ a\n      notification message and send it to the originator of the\n      undeliverable\
    \ mail as indicated by the sender-path.  This\n      notification message must\
    \ be from the MTP at this host.  That is,\n      the sender-path of the notification\
    \ message itself will be\n      \"MTP@<host>\", and in the notification message\
    \ header the From\n      field will be \"MTP at <host>\".  Of course, MTPs should\
    \ not send\n      notification messages about problems with notification messages.\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n"
- title: 4.  MULTI-RECIPIENT MAIL
  contents:
  - "4.  MULTI-RECIPIENT MAIL\n   There are two MTP commands which allow the text\
    \ of a message to be\n   mailed to several recipients simultaneously; such message\n\
    \   transmission is far more efficient than the practice of sending the\n   text\
    \ again and again for each additional recipient at a host.  In one\n   scheme,\
    \ all recipients are specified first, and then the text is\n   sent.  In the other\
    \ scheme, the order is reversed and the text is\n   sent first, followed by the\
    \ recipients.  The sender-MTP suggests the\n   scheme it would prefer, but receiver-MTP\
    \ controls which scheme is\n   actually used.  To select a particular scheme,\
    \ the MRSQ command is\n   used; to specify recipients after a scheme is chosen,\
    \ MRCP commands\n   are given; and to furnish text, the MAIL command is used.\n\
    \   Both schemes are necessary because neither by itself is optimal for\n   all\
    \ systems.  MRSQ R allows more of a \"bulk\" mailing because\n   everything is\
    \ saved up and then mailed simultaneously.  This is very\n   useful for systems\
    \ such as ITS where the MTP-receiver does not itself\n   write mail directly,\
    \ but hands it on to a central mailer demon.  The\n   more information (e.g.,\
    \ recipients) associated with a single\n   \"hand-off\", the more efficiently\
    \ mail can be delivered.\n   By contrast, MRSQ T is geared to receiver-MTPs which\
    \ want to deliver\n   mail directly, in one-by-one incremental fashion.  For each\
    \ given\n   recipient this scheme returns an individual success/failure reply\n\
    \   code which may depend on variable mail system factors such as\n   exceeding\
    \ disk allocation, mailbox access conflicts, and so forth.\n   If these receiver-MTPs\
    \ tried to emulate MRSQ Rs bulk mailing, they\n   would have to ensure that a\
    \ success reply to the MAIL indeed meant\n   that it had been delivered to ALL\
    \ recipients specified -- not just\n   some.\n   4.1.  SCHEME SELECTION:  MRSQ\n\
    \      MRSQ is the means by which a sender-MTP can test for MRSQ/MRCP\n      implementation,\
    \ select a particular scheme, reset its state, and\n      even do some rudimentary\
    \ negotiation.  Its format is as follows:\n         MRSQ [<SP> <scheme>] <CRLF>\n\
    \         <scheme> is a single character.  The following are defined:\n      \
    \      R  Recipients first.  If this is not implemented, T must be.\n        \
    \    T  Text first.  If this is not implemented, R must be.\n            ?  Request\
    \ for preference.  This must always be implemented.\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n    \
    \        No argument means a \"selection\" of none of the schemes (the\n     \
    \       default).\n         Possible replies are:\n            200 OK, use the\
    \ specified scheme\n            215 <scheme> This is the scheme I prefer\n   \
    \         504 I understand MRSQ but can't use that scheme\n            5xx Command\
    \ unrecognized or unimplemented\n      There are three aspects of MRSQ.  The first\
    \ is that an MRSQ with\n      no argument must always return a 200 reply and restore\
    \ the default\n      state of having no scheme selected.  Any other reply implies\
    \ that\n      MRSQ and hence MRCP are not understood or cannot be performed\n\
    \      correctly.\n      The second is that the use of \"?\" as a <scheme> asks\
    \ the MTP\n      receiver to return a 215 reply in which the receiver specifies\
    \ a\n      \"preferred\" scheme.  The format of this reply is simple:\n      \
    \   215 <SP> <scheme> [<SP> <string>] <CRLF>\n         Any other reply (e.g.,\
    \ 4xx or 5xx) implies that MRSQ and MRCP\n         are not implemented, because\
    \ \"?\" must always be implemented if\n         MRSQ is.\n      The third important\
    \ point about MRSQ is that it always has the\n      side effect of reseting all\
    \ schemes to their initial state.  This\n      reset must be done no matter what\
    \ the reply will be -- 200, 215,\n      or 504.  The actions necessary for a reset\
    \ will be explained when\n      discussing how each scheme actually works.\n \
    \     Note that the receiver gets to choose which scheme is used.  The\n     \
    \ sender must be prepared to do either.\n   4.2.  MESSAGE TEXT SPECIFICATION:\
    \  MAIL\n      Regardless of which scheme (if any) has been selected, a MAIL\n\
    \      command with a non-null receiver-path argument will behave exactly\n  \
    \    as before; the MRSQ/MRCP commands have no effect on it.  However,\n     \
    \ a normal MAIL command does have the same side effect as MRSQ; it\n      \"resets\"\
    \ all schemes to their initial state.\n      It is only when the receiver-path\
    \ argument is null that the\n      particular scheme chosen is important.\n  \
    \       MAIL FROM:<sender-path> <CRLF>\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \    Rather than producing an error, the receiver will accept message\n      text\
    \ for this \"null\" recipient specification.  What it does with\n      it depends\
    \ on which scheme is in effect, and will be described in\n      the section on\
    \ Scheme Mechanics.\n   4.3.  RECIPIENT SPECIFICATION:  MRCP\n      In order to\
    \ specify recipient names (i.e., mailboxes) and receive\n      some acknowledgment\
    \ (or refusal) for each name, the following\n      command is used:\n        \
    \ MRCP <SP> TO:<receiver-path> <CRLF>\n         Reply for no scheme:\n       \
    \     503 No scheme specified yet; use MRSQ\n         Replies for scheme T are\
    \ identical to those for MAIL.\n         Replies for scheme R (recipients first):\n\
    \            200 OK, name stored\n            452 Recipient table full, this name\
    \ not stored\n            550 Recipient name rejected\n            4xx Temporary\
    \ error, try this name again later\n            5xx Permanent error, report to\
    \ sender\n      Note that use of this command is an error if no scheme has been\n\
    \      selected yet; an MRSQ <scheme> must have been given if MRCP is to\n   \
    \   be used.\n   4.4.  SCHEME MECHANICS:  MRSQ R (RECIPIENTS-FIRST)\n      In\
    \ the recipients-first scheme, MRCP is used to specify names\n      which the\
    \ MTP receiver stores in a list or table.  Normally the\n      reply for each\
    \ MRCP will be either a 200 for acceptance or a\n      4xx/5xx rejection code.\
    \  All 5xx codes are permanent rejections\n      (e.g., user not known) which\
    \ should be reported to the human user,\n      whereas 4xx codes in general connote\
    \ some temporary error that may\n      be rectified later.  None of the 4xx/5xx\
    \ replies impinge on\n      previous or succeeding MRCP commands, except for 452\
    \ which\n      indicates that no further MRCPs will succeed unless a message is\n\
    \      sent to the already stored recipients or a reset is done.\n      Sending\
    \ message text to stored recipients is done by giving a MAIL\n      command with\
    \ no receiver-path argument; that is, just MAIL <SP>\n      FROM: <sender-path>\
    \ <CRLF>.  Transmission of the message text is\n      exactly the same as for\
    \ normal MAIL.  However, a positive\n      acknowledgment at the end of transmission\
    \ means the message has\n      been sent to ALL recipients that were remembered\
    \ with MRCP, and a\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n    \
    \  failure code means that it should be considered to have failed for\n      ALL\
    \ of these specified recipients.  This applies regardless of the\n      actual\
    \ error code.  Regardless of what the reply signifies, all\n      stored recipient\
    \ names are flushed and forgotten -- in other\n      words, things are reset to\
    \ their initial state.  This purging of\n      the recipient name list must also\
    \ be done as the reset side effect\n      of any use of MRSQ (or MAIL with a non-null\
    \ receiver-path\n      argument).\n      A 452 reply (out of storage space) to\
    \ an MRCP can be handled by\n      using MAIL to specify the message for currently\
    \ stored recipients,\n      and then sending more MRCPs and another MAIL, as many\
    \ times as\n      necessary.  For example, if a receiver only had room for 10\
    \ names\n      this would result in a 50-recipient message being sent 5 times,\
    \ to\n      10 different recipients each time.\n      If a sender attempts to\
    \ specify message text (MAIL with no\n      receiver-path argument) before any\
    \ successful MRCPs have been\n      given, this should be treated exactly as a\
    \ \"normal\" MAIL with a\n      null recipient would be; some receivers return\
    \ an error, such as\n      \"550 Null recipient\".\n      -------------------------------------------------------------\n\
    \                  Example of MRSQ R (Recipients First)\n         First the sender\
    \ must establish that the receiver implements\n         MRSQ.\n            S:\
    \ MRSQ <CRLF>\n            R: 200 OK, no scheme selected\n         An MRSQ with\
    \ a null argument always returns a 200 if\n         implemented, selecting the\
    \ default \"scheme\", i.e., none of\n         them.  If MRSQ were not implemented,\
    \ a code of 4xx or 5xx would\n         be returned.\n            S: MRSQ R <CRLF>\n\
    \            R: 200 OK, using that scheme\n         All is well; now the recipients\
    \ can be specified.\n            S: MRCP TO:<Foo@Y> <CRLF>\n            R: 200\
    \ OK\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \          S: MRCP TO:<Raboof@Y> <CRLF>\n            R: 550 No such user here\n\
    \            S: MRCP TO:<bar@Y> <CRLF>\n            R: 200 OK\n            S:\
    \ MRCP TO:<@Y,@X,fubar@Z> <CRLF>\n            R: 200 OK\n         Note that the\
    \ failure of \"Raboof\" has no effect on the storage\n         of mail for \"\
    Foo\", \"bar\" or the mail to be relayed to \"fubar@Z\"\n         through host\
    \ \"X\".  Now the message text is furnished, by giving\n         a MAIL command\
    \ with no receiver-path argument.\n            S: MAIL FROM:<waldo@A><CRLF>\n\
    \            R: 354 Start mail input; end with <CRLF>.<CRLF>\n            S: Blah\
    \ blah blah blah....etc. etc. etc.\n            S: <CRLF>.<CRLF>\n           \
    \ R: 250 Mail sent\n         The mail text has now been sent to \"Foo\" and \"\
    bar\" as well as\n         relayed to \"fubar@Z\".\n                         \
    \      Example 2\n      -------------------------------------------------------------\n\
    \   4.5.  SCHEME MECHANICS:  MRSQ T (TEXT-FIRST)\n      In the text-first scheme,\
    \ MAIL with no receiver-path argument is\n      used to specify message text,\
    \ which the receiver stores away.\n      Succeeding MRCPs are then treated as\
    \ if they were MAIL commands,\n      except that none of the text transfer manipulations\
    \ are done; the\n      stored message text is sent to the specified recipient,\
    \ and a\n      reply code is returned identical to that which an actual MAIL\n\
    \      would invoke. (Note that any 2xx code indicates success.)\n      The stored\
    \ message text is not forgotten until the next MAIL or\n      MRSQ, which will\
    \ either replace it with new text or flush it\n      entirely.  Any use of MRSQ\
    \ will reset this scheme by flushing\n      stored text, as will any use of MAIL\
    \ with a non-null receiver-path\n      argument.\n      If an MRCP is seen before\
    \ any message text has been stored, the\n      sender in effect is trying to send\
    \ a null message; some receivers\n      might allow this, others would return\
    \ an error code.\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n    \
    \  -------------------------------------------------------------\n           \
    \          Example of MRSQ T (Text First)\n         First the sender must establish\
    \ that the receiver implements\n         MRSQ.\n            S: MRSQ ? <CRLF>\n\
    \            R: 215 T Text first, please\n         MRSQ is indeed implemented,\
    \ and the receiver says that it\n         prefers \"T\", but that needn't stop\
    \ the sender from trying\n         something else.\n            S: MRSQ R <CRLF>\n\
    \            R: 504 Sorry, I really can't do that\n         It's possible that\
    \ it could have understood \"R\" also, but in\n         general it's best to use\
    \ the \"preferred\" scheme, since the\n         receiver knows which is most efficient\
    \ for its particular site.\n            S: MRSQ T <CRLF>\n            R: 200 OK,\
    \ using that scheme\n         Scheme \"T\" is now selected, and the message text\
    \ is sent by\n         giving a mail command with no receiver-path argument.\n\
    \            S: MAIL FROM:<WALDO@A><CRLF>\n            R: 354 Start mail input;\
    \ end with <CRLF>.<CRLF>\n            S: Blah blah blah blah....etc. etc. etc.\n\
    \            S: <CRLF>.<CRLF>\n            R: 250 Mail stored\n         Now recipients\
    \ can be specified.\n            S: MRCP TO:<Foo@Y> <CRLF>\n            R: 250\
    \ Stored mail sent\n            S: MRCP TO:<Raboof@Y> <CRLF>\n            R: 550\
    \ No such user here\n            S: MRCP TO:<bar@Y> <CRLF>\n            R: 250\
    \ Stored mail sent\n            S: MRCP TO:<@Y,@X,fubar@Z> <CRLF>\n          \
    \  R: 250 Mail accepted for relaying\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \       The text has now been sent to \"Foo\" and \"bar\" at host \"Y\" and\n\
    \         will be relayed to \"fubar@Z\" through host \"X\", and still\n     \
    \    remains stored.  A new message can be sent with another\n         MAIL/MRCP\
    \ ... sequence, but a careful sender would reset the\n         state using the\
    \ exchange below.\n            S: MRSQ ? <CRLF>\n            R: 215 T Text first,\
    \ please\n         Which resets the state without altering the scheme in effect.\n\
    \                               Example 3\n      -------------------------------------------------------------\n\
    \   4.6.  DISCUSSION\n      Because these commands are not required in the minimum\n\
    \      implementation of MTP, one must be prepared to deal with sites\n      which\
    \ don't recognize either MRSQ or MRCP.  \"MRSQ\" and \"MRSQ ?\"\n      are explicitly\
    \ designed as tests to see whether either scheme is\n      implemented.  MRCP\
    \ is not designed as a test, and a failure return\n      of the \"unimplemented\"\
    \ variety could be confused with \"No scheme\n      selected yet\", or even with\
    \ \"Recipient unknown\".\n      There is no way to indicate in a positive response\
    \ to \"MRSQ ?\"\n      that the preferred \"scheme\" for a receiver is that of\
    \ the default\n      state; i.e., none of the multi-recipient schemes.  The rationale\n\
    \      is that in this case, it would be pointless to implement MRSQ/MRCP\n  \
    \    at all, and the response would therefore be negative.\n      One reason that\
    \ the use of MAIL is restricted to null\n      receiver-path arguments with this\
    \ multi-recipient extension is the\n      ambiguity that would result if a non-null\
    \ receiver-path argument\n      were allowed.  For example, if MRSQ R was in effect\
    \ and some MRCPs\n      had been given, and a MAIL FROM:<X@Y> TO:<FOO@Z><CRLF>\
    \ was done,\n      there would be no way to distinguish a failure reply for mailbox\n\
    \      \"FOO\" from a global failure for all recipients specified.  A\n      similar\
    \ situation exists for MRSQ T; it would not be clear whether\n      the text was\
    \ stored and the mailbox failed, or vice versa, or\n      both.\n      \"Resets\"\
    \ of all schemes are done by all MRSQs and \"normal\" MAILs\n      to avoid confusion\
    \ and overly complicated implementation.  The\n      MRSQ command implies a change\
    \ or uncertainty of status, and the\n      MAIL command would otherwise have to\
    \ use some independent\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n    \
    \  mechanisms to avoid clobbering the data bases (e.g., message text\n      storage\
    \ area) used by the T/R schemes.  However, once a scheme is\n      selected, it\
    \ remains in effect.  The recommended way for doing a\n      reset, without changing\
    \ the current selection, is with \"MRSQ ?\".\n      Remember that \"MRSQ\" alone\
    \ reverts to the no-scheme state.\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n"
- title: 5.  SPECIFICATIONS
  contents:
  - "5.  SPECIFICATIONS\n   5.1.  MTP COMMANDS\n      5.1.1.  COMMAND SEMANTICS\n\
    \         The MTP commands define the mail transfer or the mail system\n     \
    \    function requested by the user.  MTP commands are character\n         strings\
    \ terminated by <CRLF>.  The command codes themselves are\n         alphabetic\
    \ characters terminated by <SP> if parameters follow\n         and <CRLF> otherwise.\
    \  The syntax of mailboxes must conform to\n         receiver site conventions.\
    \ The MTP commands are discussed\n         below.  MTP replies are discussed in\
    \ the Section 5.2.\n         MAIL (MAIL)\n            This command is used to\
    \ send mail over the transmission\n            channel.  The argument field contains\
    \ a sender-path sequence\n            and optional receiver-path sequence.\n \
    \           The sender-path sequence consists of an optional list of\n       \
    \     hosts and the sender mailbox.  When the list of hosts is\n            present,\
    \ it is \"reverse\" source routing information and\n            indicates that\
    \ the mail was relayed through each host on the\n            list (the first host\
    \ in the list was the most recent relay).\n            This list is used as source\
    \ routing to return non-delivery\n            notices to the sender.  As each\
    \ relay host adds itself to\n            the beginning of the list, it must use\
    \ its name as known in\n            the network to which it is relaying the mail\
    \ rather than the\n            network from which the mail came (if they are different).\n\
    \            If the receiver-path sequence is present, it consists of an\n   \
    \         optional list of hosts and a destination mailbox.  When the\n      \
    \      list of hosts is present, it is source routing information\n          \
    \  and indicates that the mail must be relayed to the first\n            host\
    \ on the list.\n            The receiver treats the lines following the command\
    \ as mail\n            text from the sender.  The mail text is terminated by the\n\
    \            character sequence \"<CRLF>.<CRLF>\", (see Section 5.5.2 on\n   \
    \         Transparency).\n            As mail is relayed along the receiver-path\
    \ sequence, each\n            relay host must remove itself from the path sequence\
    \ and put\n            itself at the beginning of the sender-path sequence.  When\n\
    \            mail reaches its ultimate destination (the receiver-path\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n    \
    \        sequence has only a destination mailbox), the receiver-MTP\n        \
    \    inserts it into the destination mailbox in accordance with\n            its\
    \ host mail conventions.  (For example, \"MAIL FROM:<X@Y>\n            TO:<@A,@B,C@D>\
    \ <CRLF>\" will eventually be relayed as \"MAIL\n            FROM:<@A,X@Y> TO:<@B,C@D>\
    \ <CRLF>.)\n            If the receiver-path sequence is empty, the mail is destined\n\
    \            for a printer or other designated place for host general\n      \
    \      delivery mail (if allowed at this host).  The mail may be\n           \
    \ marked as sent from the sender as specified in the\n            sender-path\
    \ sequence field.\n         MAIL RECIPIENT SCHEME QUESTION (MRSQ)\n          \
    \  This MTP command is used to select a scheme for the\n            transmission\
    \ of mail to several users at the same host.  The\n            schemes are recipients-first,\
    \ or text-first.\n         MAIL RECIPIENT (MRCP)\n            This command is\
    \ used to identify the individual recipients\n            of the mail in the transmission\
    \ of mail for multiple users\n            at one host.\n         HELP (HELP)\n\
    \            This command causes the receiver to send helpful information\n  \
    \          regarding its implementation status over the transmission\n       \
    \     channel to the receiver.  The command may take an argument\n           \
    \ (e.g., any command name) and return more specific\n            information as\
    \ a response.\n         QUIT (QUIT)\n            This command specifies that the\
    \ receiver must close the\n            transmission channel.\n         NOOP (NOOP)\n\
    \            This command does not affect any parameters or previously\n     \
    \       entered commands.  It specifies no action other than that\n          \
    \  the receiver send an OK reply.\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \       CONTINUE (CONT)\n            This command specifies that the previously\
    \ specified action\n            is to be continued.  This is sent only following\
    \ a\n            preliminary reply.\n         ABORT (ABRT)\n            This command\
    \ specifies that the previously specified action\n            is to be aborted.\
    \  This is sent only following a preliminary\n            reply.  It specifies\
    \ no further action other than that the\n            receiver send an OK reply.\n\
    \      5.1.2.  COMMAND SYNTAX\n         The commands begin with a command code\
    \ followed by an argument\n         field.  The command codes are four alphabetic\
    \ characters.\n         Upper and lower case alphabetic characters are to be treated\n\
    \         identically.  Thus any of the following may represent the mail\n   \
    \      command:\n            MAIL    Mail    mail    MaIl    mAIl\n         This\
    \ also applies to any symbols representing parameter values,\n         such as\
    \ R or r for RECIPIENT first.  The command codes and the\n         argument fields\
    \ are separated by one or more spaces.\n         But, note that in the sender-path\
    \ and receiver-path arguments\n         case is important.  In particular, in\
    \ some hosts the user \"foo\"\n         is different from the user \"Foo\".\n\
    \         The argument field consists of a variable length character\n       \
    \  string ending with the character sequence <CRLF>.  It should be\n         noted\
    \ that the receiver is to take no action until the end of\n         the line is\
    \ received.\n         Square brackets denote an optional argument field.  If the\n\
    \         option is not taken, the appropriate default is implied.  All\n    \
    \     characters are in the ASCII characters set.\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n    \
    \     The following are the MTP commands:\n         MAIL <SP> FROM:<sender-path>\
    \ [<SP> TO:<receiver-path>] <CRLF>\n         MRSQ [<SP> <scheme>] <CRLF>\n   \
    \      MRCP <SP> TO:<receiver-path> <CRLF>\n         HELP [<SP> <string>] <CRLF>\n\
    \         QUIT <CRLF>\n         NOOP <CRLF>\n         CONT <CRLF>\n         ABRT\
    \ <CRLF>\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \       The syntax of the above argument fields (using BNF notation\n        \
    \ where applicable) is given below.  The \"...\" notation indicates\n        \
    \ that a field may be repeated one or more times.\n            <sender-path> ::=\
    \ <path>\n            <receiver-path> ::= <path>\n            <scheme> ::= \"\
    R\" | \"T\" | \"?\"\n            <string> ::= <char> | <char> <string>\n     \
    \       <path> ::= \"<\" [\"@\" <host> \",\" ...] <mailbox> \">\"\n          \
    \  <host> ::= <a> <string> | \"#\" <number> | \"[\" <dotnum> \"]\"\n         \
    \   <mailbox> ::= <user> \"@\" <host>\n            <user> ::= <string>\n     \
    \       <char> ::= <c> | '\\' <c> | '\\' <s>\n            <dotnum> ::= <snum>\
    \ \".\" <snum> \".\" <snum> \".\" <snum>\n            <number> ::= <d> | <d> <number>\n\
    \            <snum> ::= three digits representing an integer value in the\n  \
    \          range 0 through 255\n            <specials> ::= '<', '>', '(', ')',\
    \ '\\', ',', ';', ':', '@',\n            '\"', and the control characters (ASCII\
    \ codes 0 through 37\n            octal inclusive and 177 octal)\n           \
    \ <a> ::= any one of the 26 letters A through Z in either case\n            <c>\
    \ ::= any one of the 128 ASCII characters except\n            <specials>\n   \
    \         <d> ::= any one of the ten digits 0 through 9\n            <s> ::= any\
    \ one of <specials>\n            Note that the backslash, '\\', is a quote character,\
    \ which is\n            used to indicate that the next character is to be used\n\
    \            literally instead of with its normal interpretation.  For\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n    \
    \        example, \"Joe\\,Smith\" could be used to indicate a single\n       \
    \     nine character user field with comma being the fourth\n            character\
    \ of the field.\n         Hosts are generally known by names which are translated\
    \ to\n         addresses  in each host.  Sometimes a host is not known to the\n\
    \         translation function and communication is blocked.  To bypass\n    \
    \     this barrier numeric forms are also allowed for host \"names\".\n      \
    \   One form is a decimal integer prefixed by a pound sign, \"#\",\n         which\
    \ indicates the number is the address of the host.  Another\n         form is\
    \ four small decimal integers separated by dots and\n         enclosed by brackets,\
    \ e.g., \"[123.255.37.321]\", which indicates\n         a 32 bit ARPA Internet\
    \ Address in four eight bit fields.\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \ 5.2.  MTP REPLIES\n      Replies to MTP commands are devised to ensure the synchronization\n\
    \      of requests and actions in the process of mail transfer, and to\n     \
    \ guarantee that the sender-MTP always knows the state of the\n      receiver-MTP.\
    \  Every command must generate exactly one reply.\n      Additionally, some commands\
    \ must occur sequentially, such as\n      MRSQ T->MAIL->MRCP or MRSQ R->MRCP->MAIL.\n\
    \         The details of the command-reply sequence are made explicit in\n   \
    \      the Sections 5.3 and 5.4 on Sequencing and State Diagrams.\n      An MTP\
    \ reply consists of a three digit number (transmitted as\n      three alphanumeric\
    \ characters) followed by some text.  The number\n      is intended for use by\
    \ automata to determine what state to enter\n      next; the text is meant for\
    \ the human user.  It is intended that\n      the three digits contain enough\
    \ encoded information that the\n      sender-MTP will not need to examine the\
    \ text and may either\n      discard it or pass it on to the user, as appropriate.\
    \  In\n      particular, the text may be receiver-dependent, so there are\n  \
    \    likely to be varying texts for each reply code. Further\n      explanation\
    \ of the assignment of reply codes is given in the\n      Appendix E on the Theory\
    \ of Reply Codes.  Formally, a reply is\n      defined to be the sequence:  a\
    \ three-digit code, <SP>, one line of\n      text, and <CRLF>.\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n    \
    \  5.2.1.  REPLY CODES BY FUNCTION GROUPS\n         200 Command okay\n       \
    \  201 Command okay, action aborted\n         500 Syntax error, command unrecognized\n\
    \            [This may include errors such as command line too long]\n       \
    \  501 Syntax error in parameters or arguments\n         502 Command not implemented\n\
    \         503 Bad sequence of commands\n         504 Command parameter not implemented\n\
    \         211 System status, or system help reply\n         214 Help message\n\
    \            [Information on how to use the receiver or the meaning of a\n   \
    \         particular non-standard command; this reply is useful only\n       \
    \     to the human user]\n         215 <scheme> is the preferred scheme\n    \
    \     120 <host> Service ready in nnn minutes\n         220 <host> Service ready\
    \ for new user\n         221 <host> Service closing transmission channel\n   \
    \      421 <host> Service not available, closing transmission channel\n      \
    \      [This may be a reply to any command if the service knows it\n         \
    \   must shut down]\n         151 User not local; will forward to <user>@<host>\n\
    \         152 User unknown; mail will be forwarded by the operator\n         250\
    \ Requested mail action okay, completed\n         450 Requested mail action not\
    \ taken: mailbox unavailable\n            [E.g., mailbox busy]\n         550 Requested\
    \ action not taken: mailbox unavailable\n            [E.g., mailbox not found,\
    \ no access]\n         451 Requested action aborted: local error in processing\n\
    \         452 Requested action not taken: insufficient system storage\n      \
    \   552 Requested mail action aborted: exceeded storage allocation\n         \
    \   [For current mailbox location]\n         553 Requested action not taken: mailbox\
    \ name not allowed\n            [E.g., mailbox syntax incorrect]\n         354\
    \ Start mail input; end with <CRLF>.<CRLF>\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \    5.2.2.  NUMERIC ORDER LIST OF REPLY CODES\n         120 <host> Service ready\
    \ in nnn minutes\n         151 User not local; will forward to <user>@<host>\n\
    \         152 User unknown; mail will be forwarded by the operator\n         200\
    \ Command okay\n         201 Command okay, action aborted\n         211 System\
    \ status, or system help reply\n         214 Help message\n            [Information\
    \ on how to use the receiver or the meaning of a\n            particular non-standard\
    \ command; this reply is useful only\n            to the human user]\n       \
    \  215 <scheme> is the preferred scheme\n         220 <host> Service ready for\
    \ new user\n         221 <host> Service closing transmission channel\n       \
    \  250 Requested mail action okay, completed\n         354 Start mail input; end\
    \ with <CRLF>.<CRLF>\n         421 <host> Service not available, closing transmission\
    \ channel\n            [This may be a reply to any command if the service knows\
    \ it\n            must shut down]\n         450 Requested mail action not taken:\
    \ mailbox unavailable\n            [E.g., mailbox busy]\n         451 Requested\
    \ action aborted: local error in processing\n         452 Requested action not\
    \ taken: insufficient system storage\n         500 Syntax error, command unrecognized\n\
    \            [This may include errors such as command line too long]\n       \
    \  501 Syntax error in parameters or arguments\n         502 Command not implemented\n\
    \         503 Bad sequence of commands\n         504 Command parameter not implemented\n\
    \         550 Requested action not taken: mailbox unavailable\n            [E.g.,\
    \ mailbox not found, no access]\n         552 Requested mail action aborted: exceeded\
    \ storage allocation\n            [For current mailbox location]\n         553\
    \ Requested action not taken: mailbox name not allowed\n            [E.g., mailbox\
    \ syntax incorrect]\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n   5.3.\
    \  SEQUENCING OF COMMANDS AND REPLIES\n      The communication between the sender\
    \ and receiver is intended to\n      be an alternating dialogue.  As such, the\
    \ sender issues an MTP\n      command and the receiver responds with a prompt\
    \ primary reply.\n      The sender should wait for this response before sending\
    \ further\n      commands.\n      The preliminary (1xx) and intermediate (3xx)\
    \ replies indicate that\n      further commands and information are required to\
    \ complete the\n      required action.  The preliminary replies require either\
    \ a\n      continue or abort command to proceed; the intermediate replies\n  \
    \    require action dependent further commands.\n      One important reply is\
    \ the connection greetings.  Under normal\n      circumstances, a receiver will\
    \ send a 220 \"Awaiting input\" reply\n      when the connection is completed.\
    \  The sender should wait for this\n      greeting message before sending any\
    \ commands.  If the receiver is\n      unable to accept input right away, it should\
    \ send a 120 \"Expected\n      delay\" reply immediately.  The sender can then\
    \ indicate it is\n      willing to wait via a continue command, or not via the\
    \ abort\n      command.  The receiver will respond to the abort with a 201 reply,\n\
    \      and to the continue with the 220 reply when ready.\n         Note: all\
    \ the greeting type replies have the official name of\n         the server host\
    \ as the first word following the reply code.\n            For example,\n    \
    \           220 <SP> USC-ISIF <SP> Service ready <CRLF>\n      The table below\
    \ lists alternative success and failure replies for\n      each command.  These\
    \ must be strictly adhered to; a receiver may\n      substitute text in the replies,\
    \ but the meaning and action implied\n      by the code numbers and by the specific\
    \ command reply sequence\n      cannot be altered.\n      COMMAND-REPLY SEQUENCES\n\
    \         Each command is listed with its possible replies.  Preliminary\n   \
    \      replies are listed first with their succeeding replies indented\n     \
    \    under them, then success and failure completion, and finally\n         intermediary\
    \ replies with the remaining commands from the\n         sequence following. \
    \ The prefixes used before the possible\n         replies are \"P\" for preliminary,\
    \ \"I\" for intermediate, \"S\" for\n         success, \"F\" for failure, and\
    \ \"E\" for error.  The 421 reply\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \       (service not available, closing transmission channel) may be\n       \
    \  given to any command if the MTP-receiver knows it must shut\n         down.\
    \  This listing forms the basis for the State Diagrams, in\n         Section 5.4.\n\
    \            CONNECTION ESTABLISHMENT\n               P: 120 -> CONT -> S: 220\n\
    \                                 F: 421\n                         ABRT    S:\
    \ 201\n                                 F: 421\n               S: 220\n      \
    \         F: 421\n            MAIL\n               P: 151 -> CONT -> I: 354 ->\
    \ text -> S: 250\n                  152                              F: 451,552,450,\n\
    \                                                      550,452,553\n         \
    \                ABRT -> S: 201\n                                 F: 451,552,450,550,452,553\n\
    \               I: 354 -> text -> S: 250\n                                 F:\
    \ 451,552,450,550,452,553\n               F: 451, 552, 450, 550, 452, 553\n  \
    \             E: 500, 501, 502, 421\n            MRSQ\n               S: 200,\
    \ 215\n               E: 500, 501, 502, 504, 421\n            MRCP\n         \
    \      P: 151 -> CONT -> S: 200, 215, 250\n                  152            F:\
    \ 451,552,450,550,452,553\n                         ABRT -> S: 201\n         \
    \                        F: 451,552,450,550,452,553\n               S: 200, 215,\
    \ 250\n               F: 451, 552, 450, 550, 452, 553\n               E: 500,\
    \ 501, 502, 503, 421\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n    \
    \        QUIT\n               S: 221\n               E: 500, 421\n           \
    \ HELP\n               S: 211, 214\n               E: 500, 501, 502, 504, 421\n\
    \            NOOP\n               S: 200\n               E: 500, 421\n       \
    \     CONT\n               S: depends on previous command\n               F: depends\
    \ on previous command\n               E: 500, 501, 502, 504, 421\n           \
    \ ABRT\n               S: 201,\n               E: 500, 501, 502, 504, 421\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \ 5.4.  STATE DIAGRAMS\n      Following are state diagrams for a very simple minded\
    \ MTP\n      implementation.  Only the first digit of the reply codes is used.\n\
    \      There is one state diagram for each group of MTP commands.\n      The command\
    \ groupings were determined by constructing a model for\n      each command and\
    \ then collecting together the commands with\n      structurally identical models.\n\
    \      For each command there are three possible outcomes:  \"success\"\n    \
    \  (S), \"failure\" (F), and \"error\" (E). In the state diagrams below\n    \
    \  we use the symbol B for \"begin\", and the symbol W for \"wait for\n      reply\"\
    .\n      First, the diagram that represents most of the MTP commands:\n      \
    \                            1,3    +---+\n                             ----------->|\
    \ E |\n                            |            +---+\n                      \
    \      |\n         +---+    cmd    +---+    2      +---+\n         | B |---------->|\
    \ W |---------->| S |\n         +---+           +---+           +---+\n      \
    \                      |\n                            |     4,5    +---+\n   \
    \                          ----------->| F |\n                               \
    \          +---+\n         This diagram models the commands:\n            HELP,\
    \ MRCP, MRSQ, NOOP, QUIT, ABRT.\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n    \
    \  A more complex diagram models the MAIL command:\n                         \
    \     ABRT       +---+ 1,3\n                 CONT ---- ------------->| W |-------\n\
    \                     |    |              +---+       |\n                    \
    \ |    |1           4,5|  |2      V\n         +---+  cmd   -->+---+ 2        \
    \  |  |     +---+\n         | B |---------->| W |-------------------->| E |\n\
    \         +---+           +---+        ------------>+---+\n                  \
    \       3| |4,5     |    |  |\n                          | |        |    |  |\n\
    \            --------------  ------   |    |  |\n           |                \
    \      |  |    |   ---->+---+\n           |               ----------------------->|\
    \ S |\n           |              |       |  |    |        +---+\n           |\
    \              |  --------     |\n           |              | |     |       |\n\
    \           V             2| |1,3  |       |\n         +---+   text    +---+ \
    \   |        ------->+---+\n         |   |---------->| W |     --------------->|\
    \ F |\n         +---+           +---+-------------------->+---+\n            \
    \                  4,5\n         Note that the \"text\" here is a series of lines\
    \ sent from the\n         sender to the receiver with no response expected until\
    \ the last\n         line is sent.\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \ 5.5.  DETAILS\n      5.5.1.  MINIMUM IMPLEMENTATION\n         In order to make\
    \ MTP workable, the following minimum\n         implementation is required for\
    \ all receivers:\n            COMMANDS -- MAIL\n                        QUIT\n\
    \                        NOOP\n      5.5.2.  TRANSPARENCY\n         Without some\
    \ provision for data transparency the character\n         sequence \"<CRLF>.<CRLF>\"\
    \ ends the the mail text and cannot be\n         sent by the user.  In general,\
    \ users are not aware of such\n         \"forbidden\"  sequences.  To allow all\
    \ user composed text to be\n         transmitted transparently the following procedures\
    \ are used.\n         1. Before sending a line of mail text the sender-MTP checks\
    \ the\n         first character of the line.  If it is a period, one additional\n\
    \         period is inserted at the beginning of the line.\n         2. When a\
    \ line of mail text is received by the receiver-MTP it\n         checks the the\
    \ line.  If the line is composed of a single\n         period it is the end of\
    \ mail.  If the first character is a\n         period and there are other characters\
    \ on the line, the first\n         character is deleted.\n      5.5.3.  SIZES\n\
    \         There are several objects that ought to have defined maximum\n     \
    \    sizes.\n            user\n               The maximum total length of a user\
    \ name is 40 characters.\n            host\n               The maximum total length\
    \ of a host name or number is 20\n               characters.\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n    \
    \        path\n               The maximum total length of a sender-path or\n \
    \              receiver-path is 100 characters.\n            command line\n  \
    \             The maximum total length of a command line including the\n     \
    \          command word and the <CRLF> is 200 characters.\n            reply line\n\
    \               The maximum total length of a reply line including the\n     \
    \          reply code and the <CRLF> is 65 characters.\n            text line\n\
    \               The maximum total length of a text line including the the\n  \
    \             <CRLF> is 1000 characters.\n         To the maximum extent possible\
    \ implementation techniques which\n         impose no limits at all to the length\
    \ of these objects should\n         be used.\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n"
- title: APPENDIX A
  contents:
  - "APPENDIX A\n   TCP Transport service\n      The Transmission Control Protocol\
    \ [1] is used in the ARPA\n      Internet, and in any network following the US\
    \ DoD standards for\n      internetwork protocols.\n      Connection Establishment\n\
    \         The MTP transmission channel is a TCP connection established\n     \
    \    between the sender process port U and the receiver process port\n       \
    \  L.  This single full duplex connection is used as the\n         transmission\
    \ channel.  This protocol is assigned the service\n         port 57 (71 octal),\
    \ that is L=57.\n      Data Transfer\n         The TCP connection supports the\
    \ transmission of 8-bit bytes.\n         The MTP data is 7-bit ASCII characters.\
    \  Each character is\n         transmitted as a 8-bit byte with the high-order\
    \ bit cleared to\n         zero.\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n"
- title: APPENDIX B
  contents:
  - "APPENDIX B\n   NCP Transport service\n      The ARPANET Host-to-Host Protocol\
    \ [2] (implemented by the Network\n      Control Program) may be used in the ARPANET.\n\
    \      Connection Establishment\n         The MTP transmission channel is established\
    \ via NCP between the\n         the sender process socket U and receiver process\
    \ socket L.  The\n         Initial Connection Protocol [3] is followed resulting\
    \ in a pair\n         of simplex connections.  This pair of connections is used\
    \ as\n         the transmission channel.  This protocol is assigned the\n    \
    \     contact socket 57 (71 octal), that is L=57.\n      Data Transfer\n     \
    \    The NCP data connections are established in 8-bit byte mode.\n         The\
    \ MTP data is 7-bit ASCII characters.  Each character is\n         transmitted\
    \ as a 8-bit byte with the high-order bit cleared to\n         zero.\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n"
- title: APPENDIX C
  contents:
  - "APPENDIX C\n   NITS\n      The Network Independent Transport Service [4] may\
    \ be used.\n      Connection Establishment\n         The MTP transmission channel\
    \ is established via NITS between\n         the the sender process and receiver\
    \ process.  The sender\n         process executes the CONNECT primitive, and the\
    \ waiting\n         receiver process executes the ACCEPT primitive.\n      Data\
    \ Transfer\n         The NITS connection supports the transmission of 8-bit bytes.\n\
    \         The MTP data is 7-bit ASCII characters.  Each character is\n       \
    \  transmitted as a 8-bit byte with the high-order bit cleared to\n         zero.\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n"
- title: APPENDIX D
  contents:
  - "APPENDIX D\n   X.25 Transport service\n      It may be possible to use the X.25\
    \ service [5] as provided by the\n      Public Data Networks directly, but there\
    \ are indications that it\n      is too error prone to qualify as a reliable channel.\
    \  It is\n      suggested that a reliable end-to-end protocol such as TCP be used\n\
    \      on top of X.25 connections.\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n"
- title: APPENDIX E
  contents:
  - "APPENDIX E\n   Theory of Reply Codes\n      The three digits of the reply each\
    \ have a special significance.\n      The first digit denotes whether the response\
    \ is good, bad or\n      incomplete.  An unsophisticated sender-MTP will be able\
    \ to\n      determine its next action (proceed as planned, redo, retrench,\n \
    \     etc.) by simply examining this first digit.  A sender-MTP that\n      wants\
    \ to know approximately what kind of error occurred (e.g.,\n      mail system\
    \ error, command syntax error) may examine the second\n      digit, reserving\
    \ the third digit for the finest gradation of\n      information.\n         There\
    \ are five values for the first digit of the reply code:\n            1yz   Positive\
    \ Preliminary reply\n               The command has been accepted, but the requested\
    \ action\n               is being held in abeyance, pending confirmation of the\n\
    \               information in this reply.  The sender-MTP should send\n     \
    \          another command specifying whether to continue or abort\n         \
    \      the action.\n            2yz   Positive Completion reply\n            \
    \   The requested action has been successfully completed.  A\n               new\
    \ request may be initiated.\n            3yz   Positive Intermediate reply\n \
    \              The command has been accepted, but the requested action\n     \
    \          is being held in abeyance, pending receipt of further\n           \
    \    information.  The sender-MTP should send another command\n              \
    \ specifying this information.  This reply is used in\n               command\
    \ sequence groups.\n            4yz   Transient Negative Completion reply\n  \
    \             The command was not accepted and the requested action did\n    \
    \           not occur.  However, the error condition is temporary and\n      \
    \         the action may be requested again.  The sender should\n            \
    \   return to the beginning of the command sequence (if any).\n              \
    \ It is difficult to assign a meaning to \"transient\" when\n               two\
    \ different sites (receiver- and sender- MTPs) must\n               agree on the\
    \ interpretation.  Each reply in this category\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n    \
    \           might have a different time value, but the sender-MTP is\n       \
    \        encouraged to try again.  A rule of thumb to determine if\n         \
    \      a reply fits into the 4yz or the 5yz category (see below)\n           \
    \    is that replies are 4yz if they can be repeated without\n               any\
    \ change in command form or in properties of the sender\n               or receiver.\
    \  (E.g., the command is repeated identically;\n               the receiver does\
    \ not put up a new implementation).\n            5yz   Permanent Negative Completion\
    \ reply\n               The command was not accepted and the requested action\
    \ did\n               not occur.  The sender-MTP is discouraged from repeating\n\
    \               the exact request (in the same sequence).  Even some\n       \
    \        \"permanent\" error conditions can be corrected, so the\n           \
    \    human user may want to direct the sender-MTP to\n               reinitiate\
    \ the command sequence by direct action at some\n               point in the future\
    \ (e.g., after the spelling has been\n               changed, or the user has\
    \ altered the account status.)\n         The second digit encodes responses in\
    \ specific categories:\n            x0z   Syntax -- These replies refer to syntax\
    \ errors,\n                  syntactically correct commands that don't fit any\n\
    \                  functional category, and unimplemented or superfluous\n   \
    \               commands.\n            x1z   Information --  These are replies\
    \ to requests for\n                  information, such as status or help.\n  \
    \          x2z   Connections -- These are replies referring to the\n         \
    \         transmission channel.\n            x3z   Unspecified as yet.\n     \
    \       x4z   Unspecified as yet.\n            x5z   Mail system -- These replies\
    \ indicate the status of\n                  the receiver mail system vis-a-vis\
    \ the requested\n                  transfer or other mail system action.\n   \
    \      The third digit gives a finer gradation of meaning in each\n         category\
    \ specified by the second digit.  The list of replies\n         illustrates this.\
    \  Each reply text is recommended rather than\n         mandatory, and may even\
    \ change according to the command with\n         which it is associated.  On the\
    \ other hand, the reply codes\n         must strictly follow the specifications\
    \ in this section.\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \       Receiver implementations should not invent new codes for\n         slightly\
    \ different situations from the ones described here, but\n         rather adapt\
    \ codes already defined.\n         For example, a command such as NOOP whose successful\
    \ execution\n         does not offer the sender-MTP any new information will return\
    \ a\n         200 reply.  The response is 502 when the command requests an\n \
    \        unimplemented non-site-specific action.  A refinement of that\n     \
    \    is the 504 reply for a command that is implemented, but that\n         requests\
    \ an unimplemented parameter.\n      The reply text may be longer than a single\
    \ line; in these cases\n      the complete text must be marked so the sender-MTP\
    \ knows when it\n      can stop reading the reply.  This requires a special format\
    \ to\n      indicate a multiple line reply.\n         The format for multi-line\
    \ replies requires that every line,\n         except the last, begin with the\
    \ reply code, followed\n         immediately by a hyphen, \"-\" (also known as\
    \ minus), followed by\n         text.  The last line will begin with the reply\
    \ code, followed\n         immediately by <SP>, optionally some text, and <CRLF>.\n\
    \            For example:\n                                123-First line\n  \
    \                              123-Second line\n                             \
    \   123-234 text beginning with numbers\n                                123 The\
    \ last line\n         The sender-MTP then simply needs to search for the reply\
    \ code\n         followed by <SP> at the beginning of a line, and ignore all\n\
    \         preceding lines.\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n"
- title: GLOSSARY
  contents:
  - "GLOSSARY\n   ASCII\n      American Standard Code for Information Interchange\
    \ [6].\n   command\n      A request for a mail service action sent by the sender-MTP\
    \ to the\n      receiver-MTP.\n   host\n      A computer in the internetwork environment\
    \ on which mailboxes or\n      MTP processes reside.\n   line\n      A line of\
    \ text ending with a <CRLF>.\n   mail\n      A sequence of ASCII characters of\
    \ arbitrary length, which conforms\n      to the standard set in RFC 733 (Standard\
    \ for the Format of ARPA\n      Network Text Messages [7]).\n   mailbox\n    \
    \  A character string (address) which identifies a user to whom mail\n      is\
    \ to be sent.  Mailbox normally consists of the host and user\n      specifications.\
    \  The standard mailbox naming convention is defined\n      to be \"user@host\"\
    .  Additionally, the \"container\" in which mail is\n      stored.\n   receiver-MTP\
    \ process\n      A process which transfers mail in cooperation with a sender-MTP\n\
    \      process.  It waits for a connection to be established via the\n      transport\
    \ service.  It receives MTP commands from the sender-MTP,\n      sends replies,\
    \ and governs the transfer of mail.\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \ reply\n      A reply is an acknowledgment (positive or negative) sent from\n\
    \      receiver to sender via the transmission channel in response to a\n    \
    \  MTP command.  The general form of a reply is a completion code\n      (including\
    \ error codes) followed by a text string.  The codes are\n      for use by programs\
    \ and the text is usually intended for human\n      users.\n   sender-MTP process\n\
    \      A process which transfers mail in cooperation with a receiver-MTP\n   \
    \   process.  A local language may be used in the user interface\n      command/reply\
    \ dialogue.  The sender-MTP initiates the transport\n      service connection.\
    \  It initiates MTP commands, receives replies,\n      and governs the transfer\
    \ of mail.\n   transmission channel\n      A full-duplex communication path between\
    \ a sender-MTP and a\n      receiver-MTP for the exchange of commands, replies,\
    \ and mail text.\n   transport service\n      Any reliable stream-oriented data\
    \ communication services.  For\n      example, NCP, TCP, NITS.\n   user\n    \
    \  A human being (or a process on behalf of a human being) wishing to\n      obtain\
    \ mail transfer service.  In addition, a recipient of\n      computer mail.\n\
    \   word\n      A human being (or a process on behalf of a human being) wishing\
    \ to\n      obtain mail transfer service.  In addition, a recipient of\n     \
    \ computer mail.\n   <CRLF>\n      The characters carriage return and line feed\
    \ (in that order).\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n   <SP>\n\
    \      The space character.\n"
- title: May 1981                                                         RFC 780
  contents:
  - 'May 1981                                                         RFC 780

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n"
- title: REFERENCES
  contents:
  - "REFERENCES\n   [1]  TCP\n      Postel, J., ed., \"DOD Standard Transmission Control\
    \ Protocol\",\n      IEN 129, RFC 761, USC/Information Sciences Institute,\n \
    \     NTIS ADA082609, January 1980.  Appears in: Computer Communication\n    \
    \  Review, Special Interest Group on Data Communications, ACM, V.10,\n      N.4,\
    \ October 1980.\n   [2]  NCP\n      McKenzie,A., \"Host/Host Protocol for the\
    \ ARPA Network\", NIC 8246,\n      January 1972.  Also in:  Feinler, E. and J.\
    \ Postel, eds., \"ARPANET\n      Protocol Handbook\", NIC 7104, for the Defense\
    \ Communications\n      Agency by SRI International, Menlo Park, California, Revised\n\
    \      January 1978.\n   [3]  Initial Connection Protocol\n      Postel, J., \"\
    Official Initial Connection Protocol\", NIC 7101,\n      11 June 1971.  Also in:\
    \  Feinler, E. and J. Postel, eds., \"ARPANET\n      Protocol Handbook\", NIC\
    \ 7104, for the Defense Communications\n      Agency by SRI International, Menlo\
    \ Park, California, Revised\n      January 1978.\n   [4]  NITS\n      PSS/SG3,\
    \ \"A Network Independent Transport Service\", Study Group 3,\n      The Post\
    \ Office PSS Users Group, February 1980.  Available from\n      the DCPU, National\
    \ Physical Laboratory, Teddington, UK.\n   [5]  X.25\n      CCITT, \"Recommendation\
    \ X.25 - Interface Between Data Terminal\n      Equipment (DTE) and Data Circuit-terminating\
    \ Equipment (DCE) for\n      Terminals Operating in the Packet Mode on Public\
    \ Data Networks,\"\n      CCITT Orange Book, Vol. VIII.2, International Telephone\
    \ and\n      Telegraph Consultative Committee, Geneva, 1976.\n"
- title: RFC 780                                                         May 1981
  contents:
  - "RFC 780                                                         May 1981\n  \
    \                                                Mail Transfer Protocol\n   [6]\
    \  ASCII\n      ASCII, \"USA Code for Information Interchange\", United States\
    \ of\n      America Standards Institute, X3.4, 1968.  Also in:  Feinler, E.\n\
    \      and J. Postel, eds., \"ARPANET Protocol Handbook\", NIC 7104, for\n   \
    \   the Defense Communications Agency by SRI International, Menlo\n      Park,\
    \ California, Revised January 1978.\n   [7]  RFC 733\n      Crocker, D., J. Vittal,\
    \ K. Pogran, and D. Henderson, \"Standard for\n      the Format of ARPA Network\
    \ Text Messages,\" RFC 733, NIC 41952,\n      November 1977.  Also in:  Feinler,\
    \ E. and J. Postel, eds.,\n      \"ARPANET Protocol Handbook\", NIC 7104, for\
    \ the Defense\n      Communications Agency by SRI International, Menlo Park,\n\
    \      California, Revised January 1978.\n"
