- title: __initial_text__
  contents:
  - "                    CAC Technical Memorandum No. 86\n                       \
    \    CCTC-WAD No. 7508\n                          ARPANET RFC No. 725\n      \
    \                       NIC No. 38316\n             An RJE Protocol for a Resource\
    \ Sharing Network\n                            Gary R. Grossman\n            \
    \                Prepared for the\n                  Command and Control Technical\
    \ Center\n                         WWMCCS ADP Directorate\n                  \
    \   Defense Communications Agency\n                         Washington, D.C. 20305\n\
    \                             under contract\n                            DCAl00-76-C-0088\n\
    \                    Center for Advanced Computation\n               University\
    \ of Illinois at Urbana-Champaign\n                         Urbana, Illinois 61801\n\
    \                             March 1, 1977\n    Approved for Release - Peter\
    \ A. Alsberg, Principal Investigator\fAn RJE Protocol for a Resource Sharing Network\n\
    For many users of the ARPANET, an RJE protocol is probably as important\nin terms\
    \ of utility as a TELNET (VTP) protocol.  In fact, the facilities\nprovided by\
    \ a TELNET and an RJE protocol are probably of most interest\nto most users of\
    \ computer networks.  For these users, the net provides a\nfast, cheap RJE surrogate,\
    \ just as TELNET provides a telephone surrogate\nfor the timesharing user.  The\
    \ collection (and layers) of protocols that\nprovide these services must be organized\
    \ to efficiently support a wide\nvariety of applications and user needs.  They\
    \ should not pose an undue\nsoftware burden on the user.\nThe \"official\" NETRJE\
    \ protocol for the ARPANET has met an underwhelming\nresponse from both the user\
    \ and server community.  I believe there are\ntwo basic reasons.  First, a large\
    \ commitment of resources is necessary\nto implement NETRJE.  Second, the protocol\
    \ creates serious security\nproblems.\nIn order to support the ARPA RJE protocol,\
    \ a user must implement User\nTelnet, Server FTP, and User RJE, while a server\
    \ must implement Server\nTelnet, User FTP, and Server RJE.  In addition when an\
    \ RJE session is\ngoing on all three of these protocol implementations will be\
    \ executing\nfor most of the life of the session.  This could entail considerable\n\
    burden for some systems.  Although it may not be out of line to require\na service\
    \ to shoulder such burdens, it is out of line to require a user\nto assume them\
    \ in order to gain a rather basic service.  Most user\ninstallations are oriented\
    \ toward meeting their user's needs not toward\nimplementing large amounts of\
    \ network software.  (In fact one of the\nbetter aspects of the previous ARPANET\
    \ protocol designs was that they\nattempted to minimize the work for the user.\
    \  (It must be admitted\nthough that compassion for the user was not the reason\
    \ for this\napproach.)\nIn order to support a \"hot line printer\" (i.e., a job\
    \ is automatically\nprinted when it is completed), the user must store his user\
    \ code and\npassword for the output host at the server host.  This, of course,\n\
    presents a rather severe security problem.  Although the ARPANET can not\nbe made\
    \ totally secure without massive revision, there are some basic\nprecautions that\
    \ can be taken to protect users from being victimized by\nevery first year Computer\
    \ Science student with access to the net.\nThe RJE protocol proposed here tries\
    \ to mitigate the implementation\nproblems and security problems.  The protocol\
    \ is designed to provide\nthree levels of service.  A user or server has the perogative\
    \ to\nimplement the protocol at whatever level their resources allow.  The\nservice\
    \ can then be upgraded to cleaner or more sophisticated approaches\nwhen and if\
    \ the opportunity arises.\nThis protocol is described in terms of the ARPANET.\
    \  Several aspects of\nAn RJE Protocol for a Resource Sharing Network\nthe design\
    \ (such as the reply structure) were made to coincide with\nexisting ARPANET conventions.\
    \  This was done to facilitate understanding\nand limit the discussion to the\
    \ protocol itself.  Although the protocol\nis described in ARPANET terms, it should\
    \ be applicable to other network\nenvironments.\nThis paper is not considered\
    \ to be complete in every detail.  It was\nwritten primarily to elicit comments\
    \ from the network community and to\nmeasure the desire of the community to adopt\
    \ such a procedure.  We have\ntried to describe enough of the protocol so that\
    \ the reader can get an\nidea of how things are to work without getting bogged\
    \ down in the detail\nthat would be necessary for implementation.  Below is an\
    \ outline of the\nfinal protocol document as presently conceived.  Sections marked\
    \ with an\nasterisk are to be provided later.\nAn RJE Protocol for a Resource\
    \ Sharing Network\nIntroduction\nPart I\n   The NETRJE Models\n      1.  Telnet\
    \ (VTP) Model\n      2.  Telnet with Data Transfer Model\n      3.  Telnet with\
    \ FTP Model\n   Scenarios for the Models\n*    Suggested Implementaton Schemes\
    \ for Various Applications\nPart II\n   The Server RJE Commands\n*        General\
    \ Conventions\n   Commands\n   Replies\n      Numerical List\n      Command-Reply\
    \ List\n*         Details of the Data Transfer\n*         Minimal Requirements\
    \ for a User RJE\n*         Minimal Requirements for a Server RJE\n*         Glossary\
    \ of Terms\nAn RJE Protocol for a Resource Sharing Network\nPart I THE NETRJE\
    \ MODELS\n------------------------\nThis section describes the proposed NETRJE\
    \ protocol in a narrative form.\nA formal definition will be included in Part\
    \ II after review.  The\nnarrative should provide the general reader with the\
    \ flavor of the\nprotocol without getting bogged down in unnecessary detail. \
    \ The\nproposed NETRJE protocol provides three different models for job\nsubmission\
    \ and retrieval.  The three models can be characterized as 1)\nRJE using Telnet\
    \ only, 2) RJE using Telnet and Data Transfer, and 3) RJE\nusing FTP.  This approach\
    \ provides flexibility for both implementors and\nusers.  User and server sites\
    \ constrained by manpower or machine\nresources may implement only the simpler\
    \ models.  The user may use the\ndifferent models separately or in any consistent\
    \ combination which best\nsuits his requirements and convenience.  Servers should\
    \ assume that the\nminimal implementation of a more sophisticated model includes\
    \ the\nminimal implementations of all less sophisticated models.  (There are,\n\
    however, certain minimal requirements that must be supported.)  This\nsecton will\
    \ discuss each of these models in turn, and show each one can\nbe used to provide\
    \ a useful network RJE functon.\nThis protocol does not contain the security difficulties\
    \ of the present\nprotocol.  This has been avoided by requiring that the burden\
    \ of\nimplementing the \"hot line printer\" or \"hot card reader\" be put on the\n\
    user system.  Thus, those systems which desire such a facility may still\nsupport\
    \ it.  The user implementaton will be slightly more complicated.\nThe trade-off\
    \ is the increased security of the protocol.\nEnd-to-end protocols are assumed\
    \ to be available and to provide an\nordered, error free bit stream to the RJE\
    \ protocol.  It is also assumed\nthat a suitable virtual terminal protocol such\
    \ as Telnet, is used to\nformat the control connection.\nRJE Using Only Telnet\
    \ (VTP)\n---------------------------\nThe intent of this model is, bluntly, to\
    \ provide an official \"quick and\ndirty\" form of the protocol.  Many organizatons,\
    \ both users and servers,\nare often confronted with problem of providing a service\
    \ quickly or\nwithin very tight budgetary constraints.  This model is intended\
    \ for\nthese situations.  With this model, the user is required only to be able\n\
    to establish a Telnet connection via the RJE contact socket.  Commands,\nreplies,\
    \ and data are all sent over the Telnet connecton.  Card input or\nprinter output\
    \ has the appearance of coming from or going to the user's\nterminal.  The user's\
    \ system may allow output to be diverted from the\nterminal to another device\
    \ such as the line printer.  The technique of\ndiverting terminal output was used\
    \ with great success in the MARK I ANTS\nAn RJE Protocol for a Resource Sharing\
    \ Network\nsystems where various devices were not assigned socket numbers as in\
    \ a\nTIP.  This technique is also useful for hosts that allow program access\n\
    to the network only through the user's Telnet connection.  This\nsituation may\
    \ exist in the early phases of a server's availability to\nthe network.  When\
    \ data is transferred in this mode an end-of-data\nmarker will be sent to aid\
    \ the receiving host in determining when to\nstop diverting the data.  This model\
    \ will have to handle the problems of\ndata traveling on a connection essentially\
    \ meant for control.  The use\nof this data transfer mechanism is intended as\
    \ an intermediate measure\nrequired by limited resources.  For now we let it stand\
    \ that the\ndesigners are aware of the problems inherent in embedding commands\
    \ or\nreplies in the data stream.  We will leave the exact resolution of the\n\
    problem to the formal definition.\nThis proposed NETRJE protocol uses a schedule\
    \ verb, SCHED for job\nsubmission. For this model, there are two forms of SCHED\
    \ that are\nrelevant.  First, there is the \"SCHED <server pathname>\" form. \
    \ This\ncommand indicates to the server that there exists at the server site a\n\
    file with all necessary job control information and data to define a\njob.  The\
    \ server will then attempt to place the job in the job queue and\nreply to the\
    \ user indicating success or failure and possibly a job-id.\nThis job-id will\
    \ be used when inquiring about the job status or\nretrieving the job's output.\n\
    When the job finishes, the server will take one of two actions:\n   a)  if the\
    \ user is still logged in, the server will send a reply\n   notifying the user\
    \ of his job completion; or,\n   b)  if the user is not logged in, the server\
    \ will save the status of\n   the job which may later be interrogated via the\
    \ STATUS command (see\n   below).\nThe otherform of SCHED of relevance to this\
    \ model has the syntax:\n   SCHED INPUT <CRLF><data><CRLF>.<CFLF>\nThis allows\
    \ the user to sit down at a terminal and type his own job\ncontrol or possibly\
    \ a program.  It also allows those users whose local\nsystems provide a facility\
    \ to transmit files with User TELNET to\ntransmit user input job fles in this\
    \ way.  The RJE Server would insert\nthe job into the local job stream, returning\
    \ the proper indication of\nsuccess or failure along with identification of the\
    \ job.\nJust as the SCHED command provides several ways for job submission, the\n\
    OUTPUT command provides several options for retrieving output.  The form\nAn RJE\
    \ Protocol for a Resource Sharing Network\n   OUTPUT<job-id><server pathname>DISCARD\n\
    is sent to the server to initiate the output to the user's site\naccording to\
    \ output specifications defined by previous OUTDEF commands\n(see below).  The\
    \ optional DISCARD argument to the OUTPUT command\nindicates, if present, that\
    \ the file is to be destroyed after\ntransmission has completed successfully.\n\
    The OUTDEF command for a job may be sent at any time after the job has\nbeen scheduled\
    \ and before it is retrieved using the OUTPUT command.\nThis command will specify\
    \ the parameters necessary to effect the\ntransfer of the output to the user or\
    \ to define the disposition of the\noutput.  We realize that the OUTDEF <job-id><server\
    \ pathname> command\n(indicating that output is to be placed in a file described\
    \ by the\npathname) may be difficult for some systems to implement.  These systems\n\
    would merely respond negatively indicating their inability to perform\nthe function.\n\
    A scenario is now in order to illustrate the model.  The user has logged\nin to\
    \ Multics and is ready to submit an RJE job in the following way\n(XXX will denote\
    \ the as yet unspecified reply code for the reply):\n   SCHED MY-JOB>TREK\nThe\
    \ system responds with a reply indicating the job has been submitted\nsuccessfully\
    \ and returns a job-id, say XA1423.\n   XXX JOB XA1423 was successfully submitted.\n\
    At some later time a message appears.\n   XXX JOB XA1423 has completed.\nThe user\
    \ or user process now sends OUTDEF XA1423 TELNET indicating that\nthe job should\
    \ be sent on the TELNET connection.  A reply returns\n   XXX last command successful.\n\
    The user now sends\n   OUTPUT XA1423\nand the server replies with\n   XXX Output\
    \ ready.  Type an empty line when ready.\nThe user then sends an empty line when\
    \ he is read to receive the output.\nAn RJE Protocol for a Resource Sharing Network\n\
    This exchange allows the user to effect output diversion at his local\nsite if\
    \ necessary after he has confirmed the server is ready.\nIf the user had not wished\
    \ to wait on his output and had logged off\nafter getting the successful submission,\
    \ the next time the user logged\nin he could inquire as to the status of the job\
    \ or all jobs under his\nusercode and then proceeded to output any or all of them.\n\
    RJE with TELNET and Data Transfer\nThe previous model provided a minimal implementation\
    \ for NETRJE.  This\nmodel provides better data transfer facilities without requiring\
    \ an FTP\nimplementation.  This model requires no new commands, but does\nmanipulate\
    \ connections differently, so that data is not required to flow\non the command\
    \ connection (see Fig. 2).  Data is sent on separate\ndefault connections (unless\
    \ otherwise specified) as in the CCN NETRJS\nprotocol.  However, for this protocol\
    \ the defaults used will be the same\noffsets from the control connection as those\
    \ in FTP.\nThe use of this model is indicated to the Server by either the INDEF\n\
    command or a SCHED command with no arguments.  The INDEF command allows\nthe user\
    \ to specify a socket other than the default socket as the source\nof the input.\
    \  On receipt of the SCHED or INDEF indicating this\ntechnique is to be used,\
    \ the Server will attempt to connect to the\nappropriate socket.  If a SCHED command\
    \ was sent, the user protocol\ninterpreter could start sending cards as soon as\
    \ the data connection is\nestablished.  (It is assumed that the user interface\
    \ has indicated to\nthe RJE protocol interpreter where the cards are to come from.)\
    \  If the\ncommand was INDEF, then the Server will not start reading until the\n\
    SCHED is received.  Similarly, when the output is ready, either an\nOUTDEF or\
    \ OUTPUT command is sent to set up and start the printing.  The\nINDEF and OUTDEF\
    \ commands used with this mode will also allow moving\ndata to or from a TIP or\
    \ printer.\nThis model requires definiton of actual data transfer formats for\
    \ the\nreader and printer lines.  We propose that the formats and connection\n\
    schemes of the present FTP be adopted.  This solution has the advantage\nof not\
    \ requiring extra coding efforts for users with FTP implementations\nand may allow\
    \ them to organize their FTP implementations and may allow\nthem to organize their\
    \ FTP and NETRJE implementations in such a way as\nto take advantage of common\
    \ algorithms.  One might easily confuse this\nsolution with a revival of the Data\
    \ Transfer Protocol.  Some thought on\na more rigorous definition of a Data Transfer\
    \ Protocol for the common\nuse of FTP and RJE might be worthwhile in the future.\n\
    An RJE Protocol for a Resource Sharing Network\nLet us consider a scenario.\n\
    The user wishes to submit a card deck to the Server.  He then types\n   SCHED<CRLF>\n\
    The Server opens a connection to the user's default card reader socket\nwhile\
    \ sending a reply to the user on the control connection.\n   XXX attempting connection\
    \ to card reader.\nWhen the connection is opened, another reply:\n   XXX transfer\
    \ started\nand when completed:\n   XXX JOB XA 1423 was successfully submitted.\n\
    When the job completes and the completion message is sent to the user,\nhe may\
    \ wish to send the output to his TIP printer on socket Y.  He will\nthen type\n\
    \   OUTDEF XA1423 255, Y (255 being his host address).\nThe Server will then attempt\
    \ to connect to the socket and will reply\n   XXX printer connection successful.\n\
    When the user has satisfied himself all is in readiness, he will type\n   OUTPUT\
    \ XA1423\nand the Server will start sending and reply to the user\n   XXX print\
    \ started.\nWhen the transfer is complete the Server will close the data connection\n\
    and send an appropriate reply.\nAn RJE Protocol for a Resource Sharing Network\n\
    NETRJE Using FTP\n----------------\nThis model (illustrated in Fig. 3) uses FTP\
    \ to effect the transfer of\nthe files.  It may be easier for some systems to\
    \ use this sort of model\nfor more sophisticated RJE systems.  This is especially\
    \ true if the\nusers desire to take input from the local file system or to send\
    \ output\nto the local file system rather than from an actual card reader or to\
    \ an\nactual line printer.  Although using the local file system is not\nprohibited\
    \ by the Data Transfer model, it may be easier to approach\nthrough FTP.  Using\
    \ FTP with NETRJE also allows the utilization of the\nFTP server-server transfer\
    \ mechanism to generate input from or direct\noutput to a third host.\nThe only\
    \ new facility required by this model are the commands INPATH and\nOUTPATH.  When\
    \ using FTP to transfer input to the Server, the user must\nknow where to send\
    \ the job so that it enters the job stream.  The INPATH\ncommand returns as a\
    \ reply such a legal pathname.  Thus the scenario for\njob submission is as follows:\
    \  The user sends an INPATH command; the\nServer responds with a legal Server\
    \ pathname for the user.  The user\nprocess starts sending the input to the file\
    \ using FTP.  When transfer\nis complete, the user sends a SCHED <server pathname>\
    \ command.  When the\njob has finished, the pathname created for the user may\
    \ or may not\ndestroy the input file.  The OUTPATH command is similarily used\
    \ to\nidentify the pathname for the output, so that it may be retrieved by\nFTP.\
    \  Some systems may define file names in such a way that the user may\nderive\
    \ them from the parameters of his job.\nNote on Replies\nIn all of the above examples\
    \ we have refrained from defining actual\nreply codes.  The intent is to use the\
    \ same reply structure, and where\nappropriate the same numbers, as described\
    \ in RFC 640 \"Revised FTP Reply\nCodes\".\nProtocol Measurement\nAn integral\
    \ part of any good protocol definition is a set of\nmeasurements to allow evaluation\
    \ of both the protocol and its\nimplementation.  This provides two functions:\
    \  1) It allows the protocol\ndesigner to evaluate the protocol and make improvements.\
    \  2) It allows\nthe user of the protocol to know how expensive it is and to demand\n\
    improvements.  The proposed NETRJE protocol provides two sets of\nmeasures - one\
    \ for a particular session and one for overall performance.\nThese measurements\
    \ may be elicited by the MEASURE command which will\ntake an argument with three\
    \ values:  JOB (job statistics and cost\nmeasurements), SESSION (measurements\
    \ taken for this sesson), and GLOBAL\nAn RJE Protocol for a Resource Sharing Network\n\
    (overall measurements of the performance of the protocol and its\nimplementation).\
    \  The command will return the measurements in a fixed\nformat reply.\nThe measurements\
    \ reported for a job are:\n   1.  CPU time,\n   2.  I/O operations,\n   3.  storage\
    \ space time product,\n   4.  job cost in dollars,\n   5.  elapsed time the job\
    \ waited before being executed, and\n   6.  elapsed time for the job to execute.\n\
    The measures taken from a sesson are:\n   1.  number of bits transferred,\n  \
    \ 2.  transmission rate of input or output transfers,\n   3.  the amount of CPU\
    \ time, storage space-time product, and I/O\n   operations for the session.\n\
    \   4.  cost in dollars and cents.\nThe measures to be taken globally are:\n \
    \  1.  frequency of commands and possibly command forms,\n   2.  model frequency\
    \ (which submission/retrieval model used),\n   3.  transmission mode frequency,\n\
    \   4.  total number of sessions,\n   5.  transmission rate:  average, std. deviation,\
    \ upper and lower\n   bounds (also by transmission mode),\n   6.  cpu time, storage\
    \ space-time product, and I/O operations for both\n   the protocol and jobs submitted:\
    \  average, std. deviation, and upper\n   and lower bounds (overall as well as\
    \ by model, transfer mode, and\n   file size).  (The reason for including job\
    \ statistics here is so that\nAn RJE Protocol for a Resource Sharing Network\n\
    \   management and systems personnel have some indication how the\n   facility\
    \ is being used.)\nIt is clear that it may be difficult to acquire some measures\
    \ (such as\ntransmission rate) when NETRJE is using FTP.  This is unavoidable\
    \ since\nFTP is not metered.  The most straightforward solution is also to meter\n\
    FTP (hint).  For the final definition a close look will be given to the\nsubset\
    \ that should be required.  Comments are welcome.  However, we\nbelieve strongly\
    \ that it is very important to know how a facility like\nthis is used as well\
    \ as how well it performs.\nAn RJE Protocol for a Resource Sharing Network\nPart\
    \ II.  Preliminary Definition of NETRJE Commands\nFor purposes of discussion this\
    \ section gives a very preliminary\ndefinition of the NETRJE commands and their\
    \ replies.  The intent is to\ngive a brief but not exhaustive definition of each\
    \ command and its major\nreplies to give the flavor of the protocol.  We do not\
    \ do this to\ndiscourage nit-picking by critics, since we may actually overlook\
    \ the\nobvious on occasion, but merely to expedite the writing of this paper.\n\
    The reply scheme will follow the model of the revised FTP reply codes\ndescribed\
    \ in RFC 640.\nAccess Control\n   USER <usercode>\n   PASS <password>\n   ACCT\
    \ <account>\nThese perform the normal functions to log the user into the system.\
    \  The\nreplies to them are the standard ones in FTP.  It was never clear why\n\
    \"account\" was not included in the old NETRJE.  Presumably, if it's\nnecessary\
    \ for an FTP or Telnet user, it will be necessary for an RJE\nuser.\nREINIT\n\
    This command reinitializes the state of the NETRJE server process so\nthat it\
    \ is ready for a new user.  If the transfer of data is in progress\nfor the previous\
    \ user, it will be allowed to complete.\nABORT\nThis command is used to abort\
    \ the transfer of data.  This command is\nmeaningful to the Server only if the\
    \ data is being transferred over the\nTelnet connection or the default data sockets.\
    \  If FTP is being used,\nthe execution of this command is the responsibility\
    \ of the USER NETRJE\nprocess.\nBYE\nThis command causes the Server to log out\
    \ the user and close the Telnet\nconnection.  If the transfer of data is in progress,\
    \ the action of the\ncommand will be delayed until the transfer is complete.\n\
    An RJE Protocol for a Resource Sharing Network\nSCHED <input part><output part>\n\
    <input part>::= <empty>|<server pathname> [DISCARD]\n   INPUT <CRLF>   <text>\
    \   <CRLF>.<CRLF>\noutput part ::= <empty>|<server pathname>[DISCARD]\nserver\
    \ pathname ::= {locally recognizable string of characters\nterminated by an ASCII\
    \ NULL}\nThis command causes the input described by the <input part> to be\nentered\
    \ into the RJE job stream and the output produced to be disposed\nof according\
    \ to the <output part>.  The null condition for either\nargument implies that\
    \ the information has been previously specified or\nis the default.\nFor the <input\
    \ part>, the <empty> may imply two actions.  If an INDEF\ncommand has previously\
    \ specified a <server pathname>, input to the job\nstream is taken from the file\
    \ indicated by the file name.  If the INDEF\ncommand has specified that the input\
    \ is to come from a CCN-like data\ntransfer socket, the SCHED <empty> command\
    \ is the signal for the Server\nto start reading data.\nThe DISCARD modifier,\
    \ if present, indicates that the file should be\ndiscarded after it has been transmitted\
    \ or it has been received and\nexecuted.  If the input stream is to be sent on\
    \ the Telnet connection,\nthe source may be a local device or a human user.  This\
    \ facility is\nprovided for mini-hosts that can't use one of the other techniques\
    \ and\nfor the user who wishes to enter job control directly at his terminal.\n\
    The empty for output specifies either the primary output file of the job\n(the\
    \ default) or a previously specified server pathname (OUTDEF\ncommand).\nSuccessful\
    \ replies to this command should indicate any job-id assigned\nby the local RJE\
    \ system along with other status informaton.  Failure\nwould be because files\
    \ did not exist, access was denied, etc.\nOUTPUT <output spec>\n<output spec>::=\
    \ <job-id><xmsn part>|<job-id><server pathname>\n<xmsn part>::= <empty>| /<IO\
    \ params>\n<IO params>::= <xmsn params>, <dest>\nAn RJE Protocol for a Resource\
    \ Sharing Network\nThis command indicates to the Server what output  is to be\
    \ sent to the\nuser, how it is to be sent, and to whom.  The <IO params> part\
    \ will\nallow the specification of a host and socket so that output may be sent\n\
    to a TIP printer, or alternatively sent on the Telnet connection or to\nthe default\
    \ data sockets.  This argument also specifies the format and\nrepresentation of\
    \ the data.\nWhen the Server receives this command, it will proceed to transmit\
    \ the\noutput to the host in the prescribed manner.  The reply structure of\n\
    this command will depend on how the output is moved and will be\ndiscussed in\
    \ more detail later.\nINPATH\nThis command returns to the user a legal pathname\
    \ at the Server.  The\nuser may then transfer his input to this pathname for eventual\n\
    submission to the RJE facility.\nOUTPATH\nThis command performs a similar function\
    \ to INPATH.\nDISCARD   <job-file-id>  |  <server pathname>\nThis allows the user\
    \ to destroy input or output files associated with a\njob.\nINDEF     <job-id><I/O\
    \ params>\nOUTDEF    <job-id><I/O params>\nThese commands allow the user to specify\
    \ the parameters necessary to\nsend input or retrieve output.  This command specifies\
    \ how the data will\nbe transferred and specifies format, etc.\nCANCEL <job-id>\n\
    This command allows a job to be cancelled from the RJE job stream.\nSTATUS <status\
    \ arg>\nstatus arg ::= <empty>|<user id>|<job-id>|<job-id><blank><job-file-id>\n\
    This command allows the user to determine the status of the RJE session,\nall\
    \ jobs under his usercode, a specific job, or the output of a specific\njob.\n\
    An RJE Protocol for a Resource Sharing Network\nALTER <job-id><site specific option>\n\
    SITE <site specific option>\nThese commands allow site specific commands to be\
    \ passed to the Server\nRJE system.  The ALTER command is intended to effect specific\
    \ jobs,\nwhile the SITE command is used for commands of more global effect.  They\n\
    could be merged into one.\nOP <operator message>\nThis command allows messages\
    \ to be sent to the operator at the Server\nsite.\nReply Codes for the Proposed\
    \ NETRJE\nThe reply codes for this protocol will follow the model proposed for\
    \ the\nnew FTP specificaton in RFC 640.  As a reminder we insert the pertinent\n\
    information from that RFC:\nThere are five values for the first digit of the reply\
    \ code:\n1yz     Positive Preliminary reply\n   The requested action is being\
    \ initiated; expect another reply before\n   proceeding with a new command.  (The\
    \ user-process sending another\n   command before the completion reply would be\
    \ in violation of\n   protocol; but server-FTP processes should queue any commands\
    \ that\n   arrive while a preceding command is in progress.)  For\n   implementations\
    \ where simultaneous monitoring is difficult, this type\n   of reply can be used\
    \ to indicate that the command was accepted and\n   the user-process may now pay\
    \ attention to the data connections.\n2yz     Positive Completion reply\n   The\
    \ requested action has been successfully completed.  A new request\n   may be\
    \ initiated.\n3yz     Positive Intermediate reply\n   The command has been accepted,\
    \ but the requested action is being held\n   in abeyance, pending receipt of further\
    \ information.  The user should\n   send another command specifying this information.\
    \  This reply is used\n   in command sequence groups.\nAn RJE Protocol for a Resource\
    \ Sharing Network\n4yz     Transient Negative Completion reply\n   The command\
    \ was not accepted and the requested action did not take\n   place, but the error\
    \ condition is temporary and the action may be\n   requested again.  The user\
    \ should return to the beginning of the\n   command sequence, if any.  It is difficult\
    \ to assign a meaning to\n   \"transient\", particularly when two distinct sites\
    \ (Server and\n   User-processes) have to agree on the interpretation.  Each reply\
    \ in\n   the 4yz category might have a slightly different time value, but the\n\
    \   intent is that the user-process is encouraged to try again.  A rule\n   of\
    \ thumb in determining if a reply fits into the 4yz or the 5yz\n   (Permanent\
    \ Negative) category is that replies are 4yz if the commands\n   can be repeated\
    \ without any change in command form or in properties\n   of the User or Server\
    \ (e.g., the command is spelled the same with the\n   same arguments used, the\
    \ user does not change his file access or user\n   name, the server does not put\
    \ up a new implementation.)\n5yz     Permanent Negative Completion reply\n   The\
    \ command was not accepted and the requested action did not take\n   place.  The\
    \ User-process is discouraged from repeating the exact\n   request (in the same\
    \ sequence).  Even some \"permanent\" error\n   conditions can be corrected, so\
    \ the human user may want to direct his\n   User-process to reinitiate the command\
    \ sequence by direct action at\n   some point in the future (e.g., after the spelling\
    \ has been changed,\n   or the user has altered his directory status.)\nThe following\
    \ function groupings are encoded in the second digit:\nx0z     Syntax - These\
    \ replies refer to syntax errors, syntactically\ncorrect commands that don't fit\
    \ any functional category, and\nunimplemented or superfluous commands.\nx1z  \
    \   Information - These are replies to requests for information,\nsuch as status\
    \ or help.\nx2z     Connection - Replies referring to the Telnet and data\nconnections.\n\
    x3z     Authentication and accounting - Replies for the logon process\nand accountng\
    \ procedures.\nx4z     Unspecified as yet.\nx5z     File system - These replies\
    \ indicate the status of the Server\nfile system vis-a-vis the requested transfer\
    \ or other file system\naction.\nAn RJE Protocol for a Resource Sharing Network\n\
    The third digit gives a finer gradation of meaning in each of the\nfunction categories\
    \ specified by the second digit.  The list of replies\nbelow will illustrate this.\
    \  Note that the text associated with each\nreply is suggestive, rather than mandatory,\
    \ and may even change\naccording to the command with which it is associated. \
    \ The reply codes,\non the other hand, should strictly follow the specifications.\
    \  That is,\nServer implementations should not invent new codes for situations\
    \ that\nare only slightly different from the ones described here, but rather\n\
    should adapt codes already defined.\nBelow is a list of replies ordered by reply\
    \ code.  Some new replies have\nbeen added for RJE; these are marked by asterisks\
    \ to aid the reader.\nFollowing this list is a list of commands with the replies\
    \ that are\npossible for that command.  This list is not considered complete or\n\
    final; as usual comments are welcomed.\n110 Restart marker reply,\n   In this\
    \ case the text is exact and not left to the particular\n   implementation; it\
    \ must read:\n      MARK yyyy = mmmm\n   where yyyy is user-process data stream\
    \ marker, and mmmm is Server's\n   equivalent marker.  (Note the spaces between\
    \ the markers and \"=\".)\n120 Service ready in nnn minutes\n125 Data connection\
    \ already open; transfer starting\n150 File status okay; about to open data connection\n\
    200 Command okay\n202 Command not implemented, superfluous at this site\n211 System\
    \ status, or system help reply\n212 Directory status\n213 File status\n214 Help\
    \ message (on how to use the server or the meaning of a\nparticular non-standard\
    \ command.  This reply is useful only to the human\nuser.)\n*215 RJE general status\
    \ reply\nAn RJE Protocol for a Resource Sharing Network\n*216 job status reply\n\
    *217 RJE user's jobs status reply\n220 Service ready for new user\n221 Service\
    \ closing TELNET connecton (logged off if appropriate)\n225 Data connection open;\
    \ no transfer in progress\n226 Closing data connection; requested file action\
    \ successful (for\nexample, file transfer or file abort.)\n227 Entering [passive,\
    \ active] mode\n230 User logged in\n250 Requested file action okay, completed\n\
    *260 Job <job-id> has completed\n*261 Output ready.  Type an empty line when ready\n\
    *262 Job <job-id> IS ALLOCATED  pathname\n*263 Job <job-id> cancelled as requested\n\
    *264 Job <job-id> altered as requested to state status\n331 User name okay, need\
    \ password\n332 Need account for login\n350 Requested file action held in abeyance,\
    \ pending further information\n354 Start mail input; end with CRLF, CRLF\n*360\
    \ Job <job-id> successfully submitted\n421 Service not available, closing Telnet\
    \ connecton.  (This may be a\nreply to any command if the service knows it must\
    \ shut down.)\n425 Can't open data connection\n426 Connection trouble, closed;\
    \ transfer aborted\nAn RJE Protocol for a Resource Sharing Network\n450 Requested\
    \ file action not taken; file unavailable (e.g., file not\nfound, no access)\n\
    451 Requested action aborted; local error in processing\n452 Requested action\
    \ not taken:  insufficient storage space in system\n500 Syntax error, command\
    \ unrecognized  (This may include errors such as\ncommand line too long.)\n501\
    \ Syntax error in parameters or arguments\n502 Command not implemented\n503 Bad\
    \ sequence of commands\n504 Command not implemented for that parameter\n530 Not\
    \ logged in\n532 Need account for storing files\n550 Requested action not taken:\
    \ file unavailable (e.g., file busy)\n552 Requested file action aborted:  exceeded\
    \ storage allocation for\ncurrent directory or dataset)\n553 Requested action\
    \ not taken:  file name not allowed\n*563 Job <job-id> is not known to the system\n\
    *564 Requested alteration is not permitted for the specified job.\nReply codes\
    \ for RJE\n   USER\n      230\n      530\n      500, 501, 421\n      331, 332\n\
    \   PASS\nAn RJE Protocol for a Resource Sharing Network\n      230\n      202\n\
    \      530\n      500, 501, 503, 421\n      332\n   ACCT\n      230\n      202\n\
    \      530\n      500, 501, 503, 421\n   BYE\n      221\n      500\n   REINIT\n\
    \      120\n      220\n      220\n      421\n      500, 502\n   ABORT\n      225,\
    \ 226\n      500, 501, 502, 421\n   STATUS\n      211, 212, 213\nAn RJE Protocol\
    \ for a Resource Sharing Network\n      450\n      500, 501, 502, 421, 530\n \
    \  HELP\n      211, 214\n      500, 501, 502, 421\n   SOCK\n      200\n      500,\
    \ 501, 421, 530\n   BYTE, MODE, TYPE, STRU\n      200\n      500, 501, 504, 421,\
    \ 530\n   SCHED\n      360     JOB <job-id> successfully submitted\n      260\
    \     Job <job-id> has completed.\n      125          500\n      425, 426    \
    \ 501\n      226          504, 532\n   OUTPUT\n      261     Output ready.  Type\
    \ an empty line when ready.\n      125     Transfer started\n      226       \
    \   500\n      425, 426      501\n      110\n   OUTDEF\nAn RJE Protocol for a\
    \ Resource Sharing Network\n      225     Data connection opened, no transfer\
    \ in progress.\n      425          500\n                   501\n             \
    \      504\n   INDEF\n      225          500\n      425          501\n       \
    \            504\n   INPATH/OUTPATH\n      262     JOB <job-id> IS ALLOCATED PATHNAME\
    \ >\n                   500     504\n                    501\n   DISCARD\n   \
    \              250     500     530\n                 450     501\n           \
    \      550     502\n                         421\n   CANCEL\n      263     Job\
    \ <job-id> Cancelled as requested\n                    500     504\n         \
    \           501\n                    502\n      563     Job <job-id> is not known\
    \ to the system\nAn RJE Protocol for a Resource Sharing Network\n      564   \
    \  Requested Alteration is not permitted for the specific\n      job.\n   STATUS\n\
    \      215     RJE general status reply\n      216     RJE job status reply\n\
    \      217     RJE user's jobs status reply\n      500, 501, 502, 504\n   ALTER\n\
    \      264     Job <job-id> altered as requested to state status\n      500, 501,\
    \ 502, 504     563, 564\n   SITE\n      200\n      500, 501, 502, 504\n   OP\n\
    \      200\n      500, 501, 502, 504\nAn RJE Protocol for a Resource Sharing Network\n\
    References\n----------\nBraden, R.\n   1971 \"Interim NETRJS Specifications\"\
    , RFC 189, NIC 7133.\nBressler, R.; Guida, R.; and McKenzie, A.\n   1972 \"Remote\
    \ Job Entry Protocol\", RFC 407\nNeigus, N.\n   1973 \"The File Transfer Protocol\"\
    , RFC 542.\nNeigus, N.; Pogran, K.; and Postel, J.\n   1974 \"A New Schema for\
    \ FTP Reply Codes\", RFC 640.\nAn RJE Protocol for a Resource Sharing Network\n\
    Figures\n-------\n   +-----------+\n   !           !\n   !  user     !\n   ! \
    \ RJE      !\n   ! interface !\n   !           !\n         !           ! user\
    \   !------------------------->! server !\n         ------------! RJE    !   \
    \                       ! RJE    !\n                     ! module !<-------------------------!\
    \ module !\n      all RJE commands, replies and data on telnet connection\n  \
    \                       RJE Using Only Telnet\n   +-----------+\n   !  user  \
    \   !\n   !  RJE      !\n   ! interface !\n         !           ! user   !--------------------------->!\
    \ server !\n         ------------! RJE    !  RJE Commands and Replies  ! RJE \
    \   !\n                     ! module !<---------------------------! module !\n\
    \                     ! data   !          RJE Data          ! data   !\n     \
    \                !transfer!----------------------------!transfer!\n          \
    \ User's Local File System                  Server's RJE System\n           Card\
    \ Readers or Line Printers\n                 RJE Using a Separate Data Connection\n\
    An RJE Protocol for a Resource Sharing Network\n   +-----------+\n   !  user \
    \    !\n   !  RJE      !\n   ! interface !\n         !           ! user   !--------------------------->!\
    \ server !\n         ------------! RJE    !  RJE Commands and Replies  ! RJE \
    \   !\n                     ! module !<---------------------------! module !\n\
    \                        ! !\n                     ! user   !--------------------------->!\
    \ server !\n                     ! FTP    !  FTP Commands and Replies  ! FTP \
    \   !\n                     ! module !<---------------------------! module !\n\
    \                     ! data   !          RJE Data          ! data   !\n     \
    \                !transfer!----------------------------!transfer!\n          \
    \ User's Local File System                  Server's File\n   System\n       \
    \    Card Readers or Line Printers\n                               RJE Using FTP\n"
