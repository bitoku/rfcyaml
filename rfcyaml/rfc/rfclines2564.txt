Abstract This memo defines a standards track portion of the Management Information Base (MIB) for use with network management protocols in the Internet Community.
In particular, it defines objects used for the management of applications.
This MIB complements the System Application MIB, providing for the management of applications' common attributes which could not typically be observed without the cooperation of the software being managed.
This document furthers the work begun in the systems application MIB [31].
The development of the "Host Resources MIB" [10], "Network Services Monitoring MIB" [23], "Mail Monitoring MIB" [24], "Relational Database Management System (RDBMS)
Management Information Base (MIB) using SMIv2" [12], "
Entity MIB using SMIv2" [20], and "Applicability of Standards Track MIBs to Management of World Wide Web Servers" [21] provides us with a base of experience in making a variety of applications visible to management; this specification abstracts out the common aspects of applications management and provides a generic base usable for the management of almost any application.
Due to the design decision to not require application instrumentation, many important topics were not handled in system application MIB [31].
API Guide, Version 2" [1].)
Note that these issues are addressed at least in part by other (non  IETF) standards work, including "ITU T Recommendation X.744   ISO/IEC IS 10164 18:1996" [3] and "IEEE P1387.2, POSIX System Administration Part 2: Software Administration" [2].
The SNMP Management Framework presently consists of five major components: An overall architecture, described in RFC 2571 [26].
Mechanisms for describing and naming objects and events for the purpose of management.
The first version of this Structure of Management Information (SMI) is called SMIv1 and described in STD 16, RFC 1155 [4], STD 16, RFC 1212 [6] and RFC 1215 [7].
The second version, called SMIv2, is described in STD 58, RFC 2578 [15], RFC 2579 [16] and RFC 2580 [17].
Message protocols for transferring management information.
The first version of the SNMP message protocol is called SNMPv1 and described in STD 15, RFC 1157 [5].
A second version of the SNMP message protocol, which is not an Internet standards track protocol, is called SNMPv2c and described in RFC 1901 [14] and RFC 1906 [19].
The third version of the message protocol is called SNMPv3 and described in RFC 1906 [19], RFC 2572 [27] and RFC 2574 [29].
Protocol operations for accessing management information.
The first set of protocol operations and associated PDU formats is described in STD 15, RFC 1157 [5].
A second set of protocol operations and associated PDU formats is described in RFC 1905 [18].
A set of fundamental applications described in RFC 2573 [28] and the view based access control mechanism described in RFC 2575 [30].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
Objects in the MIB are defined using the mechanisms defined in the SMI.
This memo specifies a MIB module that is compliant to the SMIv2.
A MIB conforming to the SMIv1 can be produced through the appropriate translations.
The resulting translated MIB must be semantically equivalent, except where objects or events are omitted because no translation is possible (use of Counter64).
Some machine readable information in SMIv2 will be converted into textual descriptions in SMIv1 during the translation process.
However, this loss of machine readable information is not considered to change the semantics of the MIB.
Architecture Object oriented modeling techniques like subclassing and multiple inheritance can be emulated in the SNMP information model through the use of tables with common indexes.
The challenge for the developer of management applications is to recognize those situations in which various aspects of a single logical resource are represented in several different tables, possibly defined in different MIBs.
Most of the management information defined here may pertain to any number of applications in a managed system.
The simplest way of supporting this requirement within the SNMP information model is to use tables.
This means that the management information for a particular resource may be found in one or more rows of one or more tables;
the fact that this information pertains to a single resource may be inferred from the index values used, possibly with the support of mapping tables.
This also means that a single table may contain management information relevant to a number of applications.
This has significant implementation implications; see the implementation issues section below for more information.
the network services monitoring MIB [23] 3.1.1.
Relationship to the System Application MIB
The system application MIB defines attributes for management of applications which can be realized without instrumenting the application itself.
This specification extends that framework to include additional attributes which will typically require instrumentation within the managed resource.
The sysApplRunElmtIndex is the key connection between these two MIBs; it is essential that implementations of this MIB and of the system applications MIB running concurrently on a given platform employ a consistent policy for assigning this value to identify running application elements.
Relationship to the Host Resources MIB
The Host Resources MIB [10] supplies information on the hardware, operating system, installed and running software on a host.
The Host Resources MIB has three hardware groups ("hrSystem", "hrStorage" and "hrDevice") and three software groups ("hrSWRun", "hrSWRunPerf" and "hrSWInstalled").
Of these, the software groups are of greatest significance to this MIB.
The software groups define management information on the software used in the system.
The information provided is grouped into (1) the currently running, (2) the performance and (3) the installed applications.
The index "hrSWRunIndex" used in the "hrSWRunTable" and other tables to identify running software by process identifier (or equivalent) relates information in the Host Resources MIB to information in the System Applications MIB and this MIB.
It is essential that the values assigned to hrSWRunIndex from the Host Resources MIB be consistent with the values used for sysApplRunElmtIndex. 3.1.3.
The Network Services Monitoring MIB [23] is defined as the base set of attributes for managing network applications.
The Application MIB includes information normally obtainable only from the managed resource itself, rather than the supporting system.
Due to differences in index representation, the relationship between the Network Services Monitoring MIB and the Application MIB is not formally defined.
This MIB is organized into several groups, which in turn are organized into tables to provide the monitoring and control of information relevant to the management of applications.
These groups are organized into various tables.
Information for a particular running managed application appears in the form of entries in the appropriate tables.
In order to support SNMPv1, SNMPv2, and SNMPv3 environments, in cases where counter objects may potentially advance very rapidly, where sixty four bit counters have been used thirty two bit counters reporting the low order thirty two bits of the value have also been defined.
Since rows in most of these tables will come and go with the running application elements whose information is contained in them, sysUpTime.0 is not appropriate as a discontinuity indicator for counters in these tables.
By defining separate discontinuity indicators for the rows in these tables, entries can come and go as needed without causing other objects to appear to have discontinuities.
As required by [15], the discontinuity indicators for the various information objects in these tables are identified in the relevant DESCRIPTION clauses.
Note that a discontinuity in one of these counters does not imply a sysUpTime.0 discontinuity, nor does a sysUpTime.0 discontinuity imply a discontinuity in any of these counters.
The service level tables permit the identification of one or more instances of named services on a system, and the association of running application elements to these services.
Service names are represented as human readable strings, using values assigned by IANA where possible.
The allocation of unique values for service instance identifiers is a local administrative issue; the values allocated must be constant for the lifetime of the service instance, and re use of values should be avoided.
It is important to understand that a service is not the same thing as a protocol.
Rather, some services may be at least partially described by the protocol(s) used to provide that service.
is there a reasonably long lived server or client process?
Following this reasoning, one can see where SMTP and HTTP service providers would be good candidates for classification as services for purposes of application management, where finger probably would not.
Of course, implementors of this MIB are free to define additional services.
An applicability statement may be an appropriate vehicle for standardizing how a specific service's information is reported using this MIB.
The service name to service instance table
The service name to service instance table uses the service name as its primary key, and the service instance identifier as its secondary key.
It facilitates the identification and lookup of the instances of a given service in a system.
The service instance to service name table
The service instance to service name table uses the service instance identifier as its primary key, and the service name as its secondary key.
Given a service instance identifier, it facilitates the lookup of the name of the service being provided.
The service instance to running application element table
The service instance to running application element table uses the service instance identifier as its primary key, and the running application element index as its secondary key.
This facilitates the identification of the set of running application elements providing a given instance of a service.
The running application element to service instance table
The running application element to service instance table uses the running application element index as its primary key and the service instance identifier as its secondary key.
It identifies the set of services provided by a given running application element.
O channel group Information processed by an application can be modeled using the concept of a channel.
Two kinds of channels, for example, are files and network connections.
For each entry in the open channel table, there will be a corresponding entry in either the open file table or the open connection table.
The information flowing on a channel may be structured as transactions.
When the information flow on a channel is being monitored as a transaction stream, an entry in the transaction stream table will represent this fact and the associated information about that stream.
To facilitate traversal of these tables and retrieval of information relevant to a specific running application element or service instances, the initial indexes of these tables are the same.
In each case, the first index determines whether the second index is interpreted as a running application element identifier or as a service instance identifier.
The third index serves to uniquely identify a channel (and consequently, an open connection or file) in the context of a running application element or service instance.
The transaction stream summary table contains per stream summaries of transaction statistics.
The transaction flow statistics table contains statistics broken into both transmit and receive counts for requests and responses on each stream.
The transaction kind statistics table contains information further broken down by transaction kind.
The transaction tables have a common structure for their indexing, with additional indexes added for increasing detail.
The initial three indexes are the same as all the other tables in this group, serving to uniquely identify each transaction stream.
The open files table contains one entry for each file in use by a manageable running application element.
(See "Definitions of System Level Managed Objects for Applications" [31] for a detailed definition of a running application element.)
The purpose of this table is to identify the files in use and to record information peculiar to files not already covered in the open channel table.
If multiple running application elements open the same file, there will be an entry for each running application element opening that file.
Similarly, if a running application element opens a file multiple times, there will be an entry in this table for the file corresponding to each open.
The task of combining the information for file activity from this table (organized by running application element) into per application statistics can be accomplished by a manager using the System Application MIB's [31] sysApplInstallPkgTable to find the installed application, the sysApplRunTable to find the running instances of that application, and the sysApplElmtRunTable to find the relevant values of sysApplElmtRunIndex.
The manager, armed with a set of values for sysApplElmtRunIndex, is now able to retrieve the relevant portions of the applOpenFileTable and other tables in this MIB.
This table provides information on channels that are open connections or listeners.
near end address and port
The transaction stream summary table
The transaction stream summary table contains per stream summaries of transaction statistics.
The simple model of a transaction used here looks like this:
Since in some protocols it is possible for an entity to take on both the invoker and performer roles, information here is accumulated for transmitted and received requests, as well as for transmitted and received responses.
Counts are maintained for both transactions and bytes transferred.
handling requests (time from receipt of request to queueing of first outgoing response)
The transaction flow statistics table
The transaction flow statistics table contains statistics broken into both transmit and receive counts for requests and responses on each stream.
In addition to the service instance / running application element and transaction stream identifier indexes, rows in this table are indexed by flow direction (transmit or receive) and role (requests and responses).
The transaction kind statistics table
The transaction kind statistics table contains summary information organized by direction, request/response, and transaction kind for each stream.
The indexing of this table is like that of the transaction flow table, with the addition of a transaction kind index.
The former channel group has several tables.
The former channel control table controls the retention of history information by a running application element or service instance.
The remaining tables parallel the structure of the channel group, with one significant difference in indexing structure.
The closed channel index is independent from the open channel index.
The former channel control table
The former channel control table provides control over the accumulation of information on former connections for running application elements and service instances.
For each one, this table, indexed by the running application element or service instance index, controls whether information on former channels is accumulated, how many of these history records are retained, how long these are retained (within the lifetime of the process), and a count of history entries that were deleted before their expiration time in order to make room for new entries.
The former channel table provides historical information on channels that have been closed.
The number and lifetime of these entries is controlled, for each running application element or service instance, by the former channel control table.
Most of the information in this table corresponds to information in the open channel table.
For the connection or file specific aspects of a given former channel, an entry will exist in the former connection table or in the former file table.
The former connection table For formerly open channels that were connections, connection specific historical information is kept in the former connection table.
For each entry in the former connection table, there will be an identically indexed entry in the former channel table.
The former file table For formerly open channels that were files, file specific historical information is kept in the former file table.
For each entry in the former file table, there will be an identically indexed entry in the former channel table.
The transaction history tables Two tables provide per transaction kind breakdowns for channels carrying transaction structured flows.
These tables are analogous to the transaction flow and kind statistics tables, with similar index structures.
The running element status and control group
The running application element status and control group has two tables.
The running application element status table
This table provides information for a running application element.
Indexed by the sysApplElmtRunIndex, an entry in this table reports useful information on that running element's resource usage.
this running application element Note that other information, such as the current number of open files for this running application element, is available from the sysapplElmtRunTable in [31].
The running application element control table
This table provides rudimentary control over a running application element.
Indexed by the sysApplElmtRunIndex, an entry in this table gives a manager with appropriate permissions the ability to suspend and resume processing by this running element, the ability to request reconfiguration, and the ability to terminate the running element.
Definitions APPLICATION MIB DEFINITIONS ::
IMPORTS MODULE IDENTITY, OBJECT TYPE, Counter64, Counter32, Gauge32, mib 2, Unsigned32,
MIB MODULE COMPLIANCE, OBJECT GROUP FROM SNMPv2 CONF LongUtf8String, sysApplElmtRunIndex  FROM SYSAPPL MIB;
applicationMib MODULE IDENTITY LAST UPDATED
"9811171815Z" ORGANIZATION "Application MIB Working Group" CONTACT INFO "http://www.ietf.org/html.charters/applmib charter.html Randy Presuhn BMC Software,
Inc. 965 Stewart Drive Sunnyvale, CA 94086
1 408 616 3101 EMail: randy presuhn@bmc.com " DESCRIPTION "
This MIB defines objects representing generic aspects of applications that are of interest to management but typically require instrumentation within managed application elements. "
Groups defined in this MIB
TEXTUAL CONVENTION STATUS current DESCRIPTION "A non negative 64 bit bit integer, without counter semantics."
"Denotes a transport service address.
For snmpUDPDomain, an ApplTAddress is 6 octets long, the initial 4 octets containing the IP address in network byte order and the last 2 containing the UDP port in network byte order.
Consult 'Transport Mappings for Version 2 of the Simple Network Management Protocol (SNMPv2)' for further information on snmpUDPDomain.
SEQUENCE OF ApplSrvNameToSrvInstEntry MAX ACCESS
"The service name to service instance table uses service name as its primary key, and service instance identifier as its secondary key.
It facilitates the identification and lookup of the instances of a given service in a system."
"An applSrvNameToSrvInstEntry identifies an instance of a given service.
The allocation and reservation of unique values for applSrvIndex is an administrative issue.
An applSrvNameToSrvInstEntry exists for the lifetime of that instance of that service; the index values may not change during that lifetime.
"The value of applSrcInstQual provides additional information about this particular instance of this service.
Although not used for indexing purposes, the value of this attribute should be sufficiently unique to be helpful to an administrator in distinguishing among service instances.
"The service instance to service name table uses service instance identifier as its primary key, and service name as its secondary key.
Given a service instance identifier, it facilitates the lookup of the name of the service being provided."
"An applSrvInstToSrvNameEntry maps a service instance identifier back to a service name.
"The human readable name of a service.
Where appropriate, as in the case where a service can be identified in terms of a single protocol, the strings should be established names such as those assigned by IANA and found in STD 2 [13], or defined by some other authority.
In some cases private conventions apply and the string should in these cases be consistent with these non standard conventions.
An applicability statement may specify the service name(s) to be used. "
SEQUENCE OF ApplSrvInstToRunApplElmtEntry MAX ACCESS
The service instance to running application element table uses the service instance identifier as its primary key, and the running application element index as its secondary key.
This facilitates the identification of the set of running application elements providing a given instance of a service."
An applSrvInstToRunApplElmtEntry identifies a running application element providing an instance of a service.
Note that there may be multiple running application elements involved in the provision of an instance of a service.
applSrvIndex is the system unique identifier of an instance of a service.
The value is unique not only across all instances of a given service, but also across all services in a system.
Re use of values for this index should be avoided.
No two service instances in a given system shall concurrently have the same value for this index.
The value zero is excluded from the set of permitted values for this index.
This allows other tables to potentially represent things which cannot be associated with a specific service instance. "
"The running application element to service instance table uses the running application element index as its primary key and the service instance identifier as its secondary key.
It identifies the set of services provided by a given running application element."
An applRunApplElmtToSrvInstEntry serves to identify an instance of a service being provided by a given running application element.
Note that a particular running application element may provide multiple services.
An applSrvInstance is the system unique identifier of an instance of a service.
The value is unique not only across all instances of a given service, but also across all services.
Re use of values for this index should be avoided.
No two service instances in a given system shall concurrently have the same value for this index.
The value zero is excluded from the set of permitted values for this index.
This allows other tables to potentially represent things which cannot be associated with a specific service instance.
In this group, the common abstraction is the Channel.
Channels are realized as files or connections.
Any remaining indexes are table specific.
The applOpenChannelTable reports information on open channels for running application elements and for service instances.
This table is indexed by applElmtOrSvc, applElmtOrSvcId, and applOpenChannelIndex.
This effectively groups all entries for a given running application element or service instance together.
ApplChannelIndex uniquely identifies an open channel (and, consequently, a file or connection) within the context of a particular running application element or service instance.
Some of the information in this table is available through both sixty four and thirty two bit counters.
The sixty four bit counters are not accessible in protocols that do not support this data type."
An applOpenChannelEntry indicates that a channel has been opened by this running application element or service instance and is still open.
Note that if a file has been opened multiple times, even by the same process, it will have multiple channel entries.
MAX ACCESS not accessible STATUS
"The applElmtOrSvc attribute serves as an index for tables that can hold information both for individual running application elements as well as for service instances.
If the value is service(1), the row contains information gathered at the level of a service.
If the value is element(2), the row contains information for an individual running application element."
MAX ACCESS not accessible STATUS
"The applElmtOrSvcId attribute is used as an index in conjunction with the applElmtOrSvc attribute.
When the value of applElmtOrSvc is service(1), this attribute's value corresponds to that of applSrvIndex, when the value of applElmtOrSvc is element(2), this attribute's value corresponds to sysApplElmtRunIndex.
This attribute serves to uniquely identify this open connection in the context of the running application element or service instance.
Where suitable, the application's native descriptor number should be used."
"This attribute records the value of sysUpTime.0 when this channel was opened and this entry was added to this table.
This attribute serves as a discontinuity indicator for the counter attributes in this entry and for any corresponding entries in the applOpenConnectionTable, applOpenFileTable, and the applTransactionStreamTable."
{ applOpenChannelEntry 4 } applOpenChannelReadRequests OBJECT
"This attribute reports the number of read requests for this channel.
All read requests for this channel by this entity, regardless of completion status, are included in this count.
Read requests are counted in terms of system calls, rather than API calls.
Discontinuities in this counter can be detected by monitoring the applOpenChannelOpenTime value for this entry."
"This attribute reports the low thirty two bits of applOpenChannelReadRequests.
Discontinuities in this counter can be detected by monitoring the applOpenChannelOpenTime value for this entry."
"This attribute reports the number of failed read requests.
Discontinuities in this counter can be detected by monitoring the applOpenChannelOpenTime value for this entry."
This attribute reports the number of bytes read from this channel.
Only bytes successfully read are included in this count.
Discontinuities in this counter can be detected by monitoring the applOpenChannelOpenTime value for this entry."
"This attribute corresponds to the low thirty two bits of applOpenChannelBytesRead.
Discontinuities in this counter can be detected by monitoring the applOpenChannelOpenTime value for this entry."
"This attribute reports the time of the most recent read request made by this entity, regardless of completion status, for this open channel.
"This attribute reports the number of write requests for this channel made by this entity.
All write requests for this channel, regardless of completion status, are included in this count.
Write requests are counted in terms of system calls, rather than API calls.
Discontinuities in this counter can be detected by monitoring the applOpenChannelOpenTime value for this entry."
"This attribute corresponds to the low thirty two bits of applOpenChannelWriteRequests.
Discontinuities in this counter can be detected by monitoring the applOpenChannelOpenTime value for this entry."
"This attribute reports the number of failed write requests.
Discontinuities in this counter can be detected by monitoring the applOpenChannelOpenTime value for this entry."
"This attribute reports the number of bytes written to this channel.
Only bytes successfully written (without errors reported by the system to the API in use by the application) are included in this count.
Discontinuities in this counter can be detected by monitoring the applOpenChannelOpenTime value for this entry."
"This attribute corresponds to the low thirty two bits of applOpenChannelBytesWritten.
Discontinuities in this counter can be detected by monitoring the applOpenChannelOpenTime value for this entry."
"This attribute reports the time of the most recent write request made by this running application element or service instance, regardless of completion status, for this open channel.
MAX ACCESS not accessible STATUS
"The applOpenFileTable reports information on open files for service instances or application elements.
This table is indexed by applElmtOrSvc
and applElmtOrSvcId, effectively grouping all entries for a given running service instance or application element together, and by applOpenChannelIndex, uniquely identifying an open channel (and, consequently, a file) within the context of a particular service instance or application element.
Elements in this table correspond to elements in the applOpenChannelTable that represent files.
For rows in the applOpenChannelTable that do not represent files, corresponding rows in this table will not exist."
"An applOpenFileEntry indicates that a file has been opened by this running application element and is still open.
Note that if a file has been opened multiple times, even by the same process, it will have multiple entries.
"This attribute reports the name of this open file.
Wherever practical, a fully qualified path name should be reported.
The values 'stdin', 'stdout', and 'stderr' are reserved in accordance with common usage when the fully qualified path name cannot be determined."
For example, for a file with a total size of 4,294,967,296 bytes, this attribute would have a value of 1; for a file with a total size of 4,294,967,295 bytes this attribute's value would be 0."
{ applOpenFileEntry 2 } applOpenFileSizeLow OBJECT
For example, for a file with a total size of 4,294,967,296 bytes this attribute would have a value of 0; for a file with a total size of 4,294,967,295 bytes this attribute's value would be 4,294,967,295."
"This attribute reports the current mode of this file from the perspective of this running application element.
These values have the following meanings: read(1) file opened for reading only write(2) file opened for writing only readWrite(3)
file opened for read and write.
These values correspond to the POSIX/ANSI C library function fopen()
'type' parameter, using the following mappings
: r   read(1) w   write(2)
"The applOpenConnectionTable provides information about open and listening connections from the perspective of a running application element or service instance.
Entries in this table are indexed by applElmtOrSvc, applElmtOrSvcID, and by applOpenChannelIndex, which serves to uniquely identify each connection in the context of a service instance or running application element.
For each row in this table, a corresponding row will exist in the applOpenChannel table.
For rows in the applOpenChannelTable which do not represent open or listening connections, no corresponding rows will exist in this table."
"An applOpenConnectionEntry indicates that a running application element or service instance has an open connection.
The entry has information describing that connection.
In the case of a TCP transport, the element applOpenConnectionNearEndAddr and that row's applOpenConnectionFarEndAddr would correspond to a tcpConnEntry.
For a UDP transport, a similar relationship exists with respect to a udpEntry.
SnmpAdminString, applOpenConnectionApplication   SnmpAdminString } applOpenConnectionTransport OBJECT TYPE SYNTAX
"The applOpenConnectionTransport attribute identifies the transport protocol in use for this connection.
If it is not practical to determine the underlying transport, this attribute's value shall have a value of {0 0}.
"The applOpenConnectionNearEndAddr attribute reports the transport address and port information for the near end of this connection.
If the value is not known, the value has a  length of zero.
"The applOpenConnectionNearEndpoint attribute reports the fully qualified domain name and port information for the near end of this connection.
The format of this attribute for TCP and UDP based protocols is the fully qualified domain name immediately followed by a colon which is immediately followed by the decimal representation of the port number.
If the value is not known, the value has a  length of zero.
"The applOpenConnectionFarEndAddr attribute reports the transport address and port information for the far end of this connection.
If not known, as in the case of a connectionless transport, the value of this attribute shall be a zero length string.
"The applOpenConnectionFarEndpoint attribute reports the fully qualified domain name and port information for the far end of this connection.
The format of this attribute for TCP and UDP based protocols is the fully qualified domain name immediately followed by a colon which is immediately followed by the decimal representation of the port number.
If not known, as in the case of a connectionless transport, the value of this attribute shall be a zero length string.
The applOpenConnectionApplication attribute identifies the application layer protocol in use.
If not known, the value of this attribute shall be a zero length string.
When possible, protocol names should be those used in the 'ASSIGNED NUMBERS' [13].
For example, an SMTP mail server would use 'SMTP'.
The applTransactionStreamTable contains common information for transaction statistic accumulation."
An applTransactionStreamEntry contains information for a single transaction stream.
A transaction stream can be a network connection, file, or other source of transactions.
Counter32, applTransactStreamInvCumTimes Counter32, applTransactStreamInvRspTimes Counter32,
Counter32, applTransactStreamPrfCumTimes Counter32, applTransactStreamPrfRspTimes Counter32 }
"The applTransactStreamDescr attribute provides a human readable description of this transaction stream.
If no descriptive information is available, this attribute's value shall be a zero length string.
The applTransactStreamUnitOfWork attribute provides a human readable definition of what the unit of work is for this transaction stream.
If no descriptive information is available, this attribute's value shall be a zero length string.
Discontinuities in this counter can be detected by monitoring the corresponding instance of applOpenChannelOpenTime."
"This counter corresponds to the low thirty two bits of applTransactStreamInvokes.
Discontinuities in this counter can be detected by monitoring the corresponding instance of applOpenChannelOpenTime."
The applTransactStreamInvCumTimes attribute reports the cumulative sum of the lengths of the intervals measured between the transmission of requests and the receipt of (the first of)
Discontinuities in this counter can be detected by monitoring the corresponding instance of applOpenChannelOpenTime."
"The applTransactStreamInvRspTimes attribute reports the cumulative sum of the lengths of the intervals measured between the receipt of the first and last of multiple responses to a request.
For transaction streams which do not permit multiple responses to a single request, this attribute will be constant.
Discontinuities in this counter can be detected by monitoring the corresponding instance of applOpenChannelOpenTime."
Cumulative count of transactions performed.
Discontinuities in this counter can be detected by monitoring the corresponding instance of applOpenChannelOpenTime."
"This counter reports the low thirty two bits of applTransactStreamPerforms.
Discontinuities in this counter can be detected by monitoring the corresponding instance of applOpenChannelOpenTime."
The applTransactStreamPrfCumTimes attribute reports the cumulative sum of the interval lengths measured between receipt of requests and the transmission of the corresponding responses.
Discontinuities in this counter can be detected by monitoring the corresponding instance of applOpenChannelOpenTime."
"For each transaction performed, the elapsed time between when the first response is enqueued and when the last response is enqueued is added to this cumulative sum.
For single response protocols, the value of applTransactStreamPrfRspTimes will be constant.
Discontinuities in this counter can be detected by monitoring the corresponding instance of applOpenChannelOpenTime."
"The applTransactFlowTable contains entries, organized by application instance or running application element, direction of flow, and type (request/response) for each open transaction stream.
The simple model of a transaction used here looks like this:
Since in some protocols it is possible for an entity to take on both the invoker and performer roles, information here is accumulated for transmitted and received requests, as well as for transmitted and received responses.
Counts are maintained for both transactions and bytes transferred."
"An applTransactFlowEntry reports transaction throughput information for requests or response in a particular direction (transmit / receive) for a transaction stream.
Entries in this table correspond to those in the applTransactionStreamTable with identical values for the applElmtOrSvc, applElmtOrSvcId, and applOpenChannelIndex.
For all counter objects in one of these entries, the corresponding (same value for applElmtOrSvc, applElmtOrSvcId, and applOpenChannelIndex)
applOpenChannelOpenTime object serves as a discontinuity indicator.
"The applTransactFlowDirection index serves to identify an entry as containing information pertaining to the transmit (1) or receive (2) flow of a transaction stream."
"The value of the applTransactFlowReqRsp index indicates whether this entry contains information on requests (1), or responses (2)."
"The applTransactFlowTrans attribute reports the number of request/response transactions (as indicated by the applTransactFlowReqRsp index)
received/generated (as indicated by the applTransactFlowDirection index) that this service instance or running application element has processed for this transaction stream.
Discontinuities in this counter can be detected by monitoring the corresponding instance of applOpenChannelOpenTime."
This attribute corresponds to the low thirty two bits of applTransactFlowTrans.
Discontinuities in this counter can be detected by monitoring the corresponding instance of applOpenChannelOpenTime."
"The applTransactFlowBytes attribute reports the number of request/response (as indicated by the applTransactFlowReqRsp index) bytes received/generated (as indicated by the applTransactFlowDirection index) handled by this application element or service instance on this transaction stream.
All application layer bytes are included in this count, including any application layer wrappers, headers, or other overhead.
Discontinuities in this counter can be detected by monitoring the corresponding instance of applOpenChannelOpenTime."
This attribute corresponds to the low thirty two bits of applTransactFlowBytes.
Discontinuities in this counter can be detected by monitoring the corresponding instance of applOpenChannelOpenTime."
"The applTransactFlowTime attribute records the time of the processing (receipt or transmission as indicated by the applTransactFlowDirection index) by this running application element or service instance of the most recent request/response (as indicated by the applTransactFlowReqRsp index) on this transaction stream.
applTransactKindTable   OBJECT TYPE SYNTAX SEQUENCE OF ApplTransactKindEntry
"The applTransactKindTable provides transaction statistics broken down by kinds of transaction.
The definition of the kinds of transactions is specific to the application protocol in use, and may be documented in the form of an applicability statement.
"An applTransactKindEntry reports information for a specific service instance or running application element's use of a specific transaction stream in a particular direction in requests or responses (as indicated by the applTransactFlowReqRsp index) broken down by transaction kind, as indicated by the applTransactKind index.
Discontinuities in any of the counters in an entry can be detected by monitoring the corresponding instance of applOpenChannelOpenTime.
SnmpAdminString (SIZE (1 .. 32))
MAX ACCESS not accessible STATUS
"The applTransactKind index is the human readable identifier for a particular transaction kind within the context of an application protocol.
The values to be used for a particular protocol may be identified in an applicability statement."
"The applTransactKindTrans attribute reports the number of request/response (as indicated by the applTransactFlowReqRsp index) transactions received/generated (as indicated by the applTransactFlowDirection index) handled by this application instance or application element on this transaction stream for this transaction kind.
Discontinuities in this counter can be detected by monitoring the corresponding instance of applOpenChannelOpenTime."
The applTransactKindTransLow attribute reports the low thirty two bits of applTransactKindTrans.
Discontinuities in this counter can be detected by monitoring the corresponding instance of applOpenChannelOpenTime."
"The applTransactKindBytes attribute reports the number of request/response (as indicated by the applTransactFlowReqRsp index) bytes received/generated (as indicated by the applTransactFlowDirection index) handled by this application element on this transaction stream for this transaction kind.
All application layer bytes are included in this count, including any application layer wrappers, headers, or other overhead.
Discontinuities in this counter can be detected by monitoring the corresponding instance of applOpenChannelOpenTime."
The applTransactKindBytesLow attribute corresponds to the low thirty two bits of applTransactKindBytes.
Discontinuities in this counter can be detected by monitoring the corresponding instance of applOpenChannelOpenTime."
"The applTransactKindTime attribute records the time of the processing (receipt or transmission as indicated by the applTransactFlowDirection index) by this running application element or service instance of the most recent request/response (as indicated by the applTransactFlowReqRsp index) of this kind of transaction on this transaction stream.
applPastChannelGroup logged information on former channels.
"The applPastChannelControlTable controls the accumulation of history information about channels from the perspective of service instances and running application elements.
Entries in this table are indexed by applElmtOrSvc
and applElmtOrSvcId, giving control of channel history accumulation at the level of each service instance and running application element."
An applPastChannelControlEntry provides the ability to control the retention of channel history information by service instances and running application elements.
"When the value of applPastChannelControlCollect is 'enabled', each time the corresponding running application element or service instance closes an open channel a new entry will be added to the applPastChannelTable.
When the value of applPastChannelControlCollect is 'frozen', no new entries are added to the applPastChannelTable for this running application element or service instance, and old entries are not aged out.
When the value of applPastChannelControlCollect is 'disabled', all entries are removed from applPastChannelTable for this running application or service instance, and no new entries are added.
"channel history entries" MAX ACCESS
"The maximum number of entries allowed in the applPastChannelTable for this running application element or service instance.
Once the number of rows for this running application element or service instance in the applPastChannelTable reaches this value, when new entries are to be added the management subsystem will make room for them by removing the oldest entries.
Entries will be removed on the basis of oldest applPastChannelCloseTime value first.
"The maximum time in seconds which an entry for this running application element or service instance may exist in the applPastChannelTable before it is removed.
Any entry that is older than this value will be removed (aged out) from the table, unless the applPastChannelControlCollect is set to 'frozen'.
Note that an entry may be aged out prior to reaching this time limit if it is the oldest entry in the table and must be removed to make space for a new entry so as to not exceed applPastChannelControlMaxRows, or if the applPastChannelControlCollect is set to 'disabled'."
"The applPastChannelControlRemItems attribute reports the number of applPastChannelControlTable entries for this running application element or service instance that were deleted in order to make room for new history entries.
This count does NOT include entries deleted for the following reasons:
the corresponding applPastChannelControlCollect attribute has been set to 'disabled'
the entry has been in the table longer that the time limit indicated by the corresponding applPastChannelControlTimeLimit. "
"The applPastChannelTable provides history information about channels from the perspective of running application elements and service instances.
Entries in this table are indexed by applElmtOrSvc, applElmtOrSvcId, and by applPastChannelIndex, which serves to uniquely identify each former channel in the context of a running application element or service instance.
Note that the value of applPastChannelIndex is independent of the value applOpenChannelIndex had when this channel was open.
Entries for closed channels for a given running application element or service instance can be added to this table only if its entry in the applPastChannelControlTable has the value 'enabled' for the attribute applPastChannelControlCollect.
Entries for closed channels are removed under the following circumstances: the running application element or service instance no longer exists the corresponding applPastChannelControlCollect attribute has been set to 'disabled'
the entry has been in the table longer that the time limit indicated by the corresponding applPastChannelControlTimeLimit and the value of applPastChannelControlCollect is not
'frozen' this is the oldest entry for the running application element or service instance in question and the addition of a new element would otherwise cause applPastChannelControlMaxRows to be exceeded for this running application element or service instance.
a value of applPastChannelIndex has been re used.
Note that under normal circumstances, this is unlikely.
Removal/replacement of an entry under the last two conditions causes the corresponding applPastChannelControlRemItems to be incremented."
An applPastChannelEntry indicates that a running application element or service instance once had an open channel, which is now closed.
The entry has information describing that channel.
applPastChannelBytesWritLow    Unsigned32, applPastChannelLastWriteTime   DateAndTime }
"This attribute serves to uniquely identify this closed channel in the context of the running application element or service instance.
This attribute has no other semantics.
Note that the value of applPastChannelIndex is independent of the value applOpenChannelIndex had when this channel was active.
In issuing this index value, the implementation must avoid re issuing an index value which has already been assigned to an entry which has not yet been deleted due to age or space considerations.
The value zero is excluded from the set of permitted values for this index in order to permit other tables to possibly represent information that cannot be associated with a specific entry in this table.
"This attribute records the time when this channel was originally opened.
Note that this information is quite different from applOpenChannelOpenTime, which is used for the detection of counter discontinuities."
"This attribute records the number of read requests for this channel made by this running application element or service instance.
All read requests for this channel by this running application element or service instance, regardless of completion status, are included in this count.
Read requests are counted in terms of system calls, rather than API calls."
"This attribute corresponds to the low thirty two bits of applPastChannelReadRequests."
"This attribute reports the number of failed read requests."
Only bytes successfully read are included in this count. "
"This attribute corresponds to the low thirty two bits of applPastChannelBytesRead."
"This attribute reports the time of the most recent read request made by this running application element or service instance regardless of completion status, for this former channel.
The applPastChannelWriteRequests attribute reports the number of write requests, regardless of completion status, made by this running application element or service instance for this former channel.
Write requests are counted in terms of system calls, rather than API calls."
This attribute corresponds to the low thirty two bits of applPastChannelWriteRequests."
"This attribute reports the number of failed write requests."
"This attribute reports the number of bytes written to this former channel by this running application element or service instance.
Only bytes successfully written (
no errors reported by the API in use by the application) are included in this count."
{ applPastChannelEntry 13 } applPastChannelBytesWritLow
"This attribute corresponds to the low thirty two bits of applPastChannelBytesWritten."
The applPastChannelLastWriteTime attribute reports the time of the most recent write request made by this running application element or service instance, regardless of completion status, for this former channel.
MAX ACCESS not accessible STATUS
"The applPastFileTable supplements the applPastChannelTable for entries corresponding to channels which were files.
The indexing structure is identical to applPastChannelTable.
An entry exists in the applPastFileTable only if there is a corresponding (same index values) entry in the applPastChannelTable and if the channel was a file.
Entries for closed files are removed when the corresponding entries are removed from the applPastChannelTable."
"An applPastFileEntry provides additional, file specific information to complement the corresponding applPastChannelEntry for a channel which was a file.
"This attribute records the last known value of applOpenFileName before the channel was closed."
"This attribute records the value of applOpenFileSizeHigh at the time this channel was closed.
For example, for a file with a total size of 4,294,967,296 bytes, this attribute would have a value of 1; for a file with a total size of 4,294,967,295 bytes this attribute's value would be 0."
"This attribute records the value of applOpenFileSizeLow at the time
For example, for a file with a total size of 4,294,967,296 bytes this attribute would have a value of 0; for a file with a total size of 4,294,967,295 bytes this attribute's value would be 4,294,967,295."
"This attribute records the value of applOpenFileMode at the time
"The applPastConTable supplements the applPastChannelTable for entries corresponding to channels which were connections.
The indexing structure is identical to applPastChannelTable.
An entry exists in the applPastConTable only if there is a corresponding (same index values) entry in the applPastChannelTable and if the channel was a connection.
Entries for closed connections are removed when the corresponding entries are removed from the applPastChannelTable."
"An applPastConEntry provides additional, connection specific information to complement the corresponding applPastChannelEntry for a channel which was a connection.
The applPastConTransport attribute identifies the transport protocol that was in use for this former connection.
If the transport protocol could not be determined, the value { 0 0 } shall be used.
"The applPastConNearEndAddr attribute reports the transport address and port information for the near end of this former connection.
If the information could not be determined, the value shall be a zero length string.
"The applPastConNearEndpoint attribute reports the fully qualified domain name and port information for the near end of this former connection.
The format of this attribute for TCP and UDP based protocols is the fully qualified domain name immediately followed by a colon which is immediately followed by the decimal representation of the port number.
If the information could not be determined, the value shall be a zero length string.
"The applPastConFarEnd attribute reports the transport address and port information for the far end of this former connection.
If not known, as in the case of a connectionless transport, the value of this attribute shall be a zero length string.
"The applPastConFarEndpoint attribute reports the transport address and port information for the far end of this former connection.
The format of this attribute for TCP and UDP based protocols is the fully qualified domain name immediately followed by a colon which is immediately followed by the decimal representation of the port number.
If not known, as in the case of a connectionless transport, the value of this attribute shall be a zero length string.
"The applPastConApplication attribute identifies the application layer protocol that was in use.
Where possible, the values defined in [13] shall be used.
If not known, the value of this attribute shall be a zero length string.
The applPastTransStreamTable contains common information for historical transaction statistics."
An applPastTransStreamEntry contains information for a single former transaction stream.
A transaction stream could have been a network connection, file, or other source of transactions.
"The applPastTransStreamDescr attribute provides a human readable description of this transaction stream.
If no descriptive information is available, this attribute's value shall be a zero length string.
"The applPastTransStreamUnitOfWork attribute provides a human readable definition of what the unit of work is for this transaction stream.
If no descriptive information is available, this attribute's value shall be a zero length string.
"This object corresponds to the low thirty two bits of applPastTransStreamInvokes."
{ applPastTransStreamEntry 4 } applPastTransStreamInvCumTimes OBJECT
"The applPastTransStreamInvCumTimes attribute reports the cumulative sum of the lengths of the intervals times measured between the transmission of requests and the receipt of (the first of)
"The applPastTransStreamInvRspTimes attribute reports the cumulative sum of the lengths of the intervals measured between the receipt of the first and last of multiple responses to a request.
For transaction streams which do not permit multiple responses to a single request, this attribute will be zero."
"This objecy reports the low thirty two bits of applPastTransStreamPerforms."
The applPastTransStreamPrfCumTimes attribute reports the cumulative sum of the lengths of the intervals measured between receipt of requests and the transmission of the corresponding responses."
"For each transaction performed, the elapsed time between when the first response is enqueued and when the last response is enqueued is added to this cumulative sum.
For single response protocols, the value of applPastTransStreamPrfRspTimes will be zero."
"The applPastTransFlowTable contains entries, organized by application instance or running application element, direction of flow, and type (request/response) for each former transaction stream.
The simple model of a transaction used here looks like this:
Since in some protocols it is possible for an entity to take on both the invoker and performer roles, information here is accumulated for transmitted and received requests, as well as for transmitted and received responses.
Counts are maintained for both transactions and bytes transferred."
"An applPastTransFlowEntry records transaction throughput information for requests or response in a particular direction (transmit / receive) for a transaction stream.
Entries in this table correspond to those in the applPastTransStreamTable with identical values for the applElmtOrSvc, applElmtOrSvcId, and the applPastChannelIndex.
"The applPastTransFlowDirection index serves to identify an entry as containing information pertaining to the transmit (1) or receive (2) flow of a past transaction stream.
This index corresponds to applTransactFlowDirection."
"The value of the applPastTransFlowReqRsp index indicates whether this entry contains information on requests (1), or responses (2).
"The applPastTransFlowTrans attribute reports the number of request/response (as indicated by the applPastTransFlowReqRsp index
) transactions received/generated (as indicated by the applPastTransFlowDirection index) handled on this transaction stream."
This attribute corresponds to the low thirty two bits of applPastTransFlowTrans."
"The applPastTransFlowBytes attribute reports the number of request/response (as indicated by the applPastTransFlowReqRsp index) bytes received/generated (as indicated by the applPastTransFlowDirection index) handled on this transaction stream.
All application layer bytes are included in this count, including any application layer wrappers, headers, or other overhead."
This attribute corresponds to the low thirty two bits of applPastTransFlowBytes."
"The applPastTransFlowTime attribute records the time of the processing (receipt or transmission as indicated by the applPastTransFlowDirection index) of the last request/response (as indicated by the applPastTransFlowReqRsp index) on this transaction stream.
OBJECT TYPE SYNTAX SEQUENCE OF ApplPastTransKindEntry
"The applPastTransKindTable provides transaction statistics broken down by kinds of transaction.
The definition of the kinds of transactions is specific to the application protocol in use, and may be documented in the form of an applicability statement.
An applPastTransKindEntry reports historical data for a specific service instance or running application element's use of a specific transaction stream in a particular direction in requests or responses (as indicated by the applPastTransFlowReqRsp index) broken down by transaction kind, as indicated by the applPastTransKind index.
"The applPastTransKind index is the human readable identifier for a particular transaction kind within the context of an application protocol.
The values to be used for a particular protocol may be identified in an applicability statement.
This index corresponds to applTransactKind."
The type is characterized according to the receive/transmit direction (applPastTransFlowDirecton), whether it was a request or a response (applPastTransFlowReqRsp), and the protocol specific transaction kind (applPastTransKind).
stream for this transaction kind."
"The applPastTransKindTransLow attribute reports the low thirty two bits of applPastTransKindTrans."
All application layer bytes are included in this count, including any application layer wrappers, headers, or other overhead."
"The applPastTransKindBytesLow attribute corresponds to the low thirty two bits of applPastTransKindBytes."
"The applPastTransKindTime attribute records the time of the processing (receipt or transmission as indicated by the applPastTransFlowDirection index) of the last request/response (as indicated by the applPastTransFlowReqRsp index) of this kind of transaction on this transaction stream.
"This table provides information on running application elements, complementing information available in the correspondingly indexed sysApplElmtRunTable [31].
"The applElmtRunStatusSuspended attribute reports whether processing by this running application element has been suspended, whether by management request or by other means."
The applElmtRunStatusHeapUsage reports the current approximate heap usage by this running application element."
The applElmtRunStatusOpenConnections attribute reports the current number of open connections in use by this running application element."
"The applElmtRunStatusOpenFiles attribute reports the current number of open files in use by this running application element."
"The applElmtRunStatusLastErrorMessage attribute reports the most recent error message (typically written to stderr or a system error logging facility) from this running application element.
If no such message has yet been generated, the value of this attribute shall be a zero length string.
"The applElmtRunStatusLastErrorTime attribute reports the time of the most recent error message in applElmtRunStatusLastErrorMsg.
"This table provides the ability to control application elements, complementing information available in the correspondingly indexed sysApplElmtRunTable
"An applElmtRunControlEntry contains information to support the control of a single running application element.
Setting this variable to 'true' requests the suspension of processing by this running application element.
Setting this variable to 'false' requests that processing be resumed.
The effect, if any, will be reported by the applElmtRunStatusSuspended attribute."
current DESCRIPTION "Changing the value of this variable requests that the running application element re load its configuration (like SIGHUP for many UNIX based daemons).
Note that completion of a SET on this object only implies that configuration reload was initiated, not necessarily that the reload has been completed."
Setting the value of applElmtRunControlTerminate to 'true' requests that the running application element terminate processing and exit in an orderly manner.
This is a 'polite' shutdown request.
When read, this object's value will be 'false' except when orderly termination is in progress.
Note that completion of a SET on this object only implies that termination was initiated, not necessarily that the termination has been completed."
1} applicationMonitorGroup OBJECT GROUP OBJECTS { applSrvInstQual, applSrvName, applSrvIndex,
applSrvInstance, applOpenChannelOpenTime, applOpenChannelReadRequestsLow, applOpenChannelReadFailures, applOpenChannelBytesReadLow, applOpenChannelLastReadTime, applOpenChannelWriteRequestsLow, applOpenChannelWriteFailures, applOpenChannelBytesWrittenLow, applOpenChannelLastWriteTime, applOpenFileName, applOpenFileSizeHigh, applOpenFileSizeLow, applOpenFileMode, applOpenConnectionTransport, applOpenConnectionNearEndAddr, applOpenConnectionNearEndpoint, applOpenConnectionFarEndAddr, applOpenConnectionFarEndpoint, applOpenConnectionApplication } STATUS current DESCRIPTION
"This group represents the basic capabilities of this MIB."
"This group comprises 64 bit counters mandatory in high throughput environments, where 32 bit counters could wrap in less than an hour."
This group comprises objects appropriate from monitoring transaction structured flows."
This group comprises 64 bit transaction counters required in high throughput environments, where 32 bit counters could wrap in less than an hour."
} applicationHistoryGroup OBJECT GROUP OBJECTS { applPastChannelControlCollect, applPastChannelControlMaxRows, applPastChannelControlTimeLimit, applPastChannelControlRemItems, applPastChannelOpenTime, applPastChannelCloseTime, applPastChannelReadReqsLow, applPastChannelReadFailures, applPastChannelBytesReadLow,
applPastChannelLastReadTime, applPastChannelWriteReqsLow, applPastChannelWriteFailures, applPastChannelBytesWritLow, applPastChannelLastWriteTime, applPastFileName, applPastFileSizeHigh, applPastFileSizeLow, applPastFileMode, applPastConTransport, applPastConNearEndAddr, applPastConNearEndpoint, applPastConFarEndAddr, applPastConFarEndpoint, applPastConApplication} STATUS current DESCRIPTION
"This group models basic historical data."
"This group comprises additional 64 bit objects required for recording historical data in high volume environments, where a 32 bit integer would be insufficient."
This group represents historical data for transaction  structured information streams."
This group contains 64 bit objects required for historical records on high volume transaction structured streams, where 32 bit integers would be insufficient."
"This group represents extensions to the system application MIB."
The compliance statement for the application MIB."
MODULE MANDATORY GROUPS { applicationMonitorGroup, applicationHistoryGroup, applicationRunGroup }
MIN ACCESS read only DESCRIPTION
"This object should be limited to read only access in environments with inadequate security."
MIN ACCESS read only DESCRIPTION
"This object should be limited to read only access in environments with inadequate security."
MIN ACCESS read only DESCRIPTION
"This object should be limited to read only access in environments with inadequate security."
OBJECT applElmtRunControlSuspend MIN ACCESS read only DESCRIPTION
"This object should be limited to read only access in environments with inadequate security."
OBJECT applElmtRunControlReconfigure MIN ACCESS read only DESCRIPTION
"This object should be limited to read only access in environments with inadequate security."
OBJECT applElmtRunControlTerminate MIN ACCESS read only DESCRIPTION
"This object should be limited to read only access in environments with inadequate security."
The applicationTransactGroup is required when the information stream processed has a transaction structure. "
The applicationTransHistoryGroup must be implemented if applicationTransactGroup and applicationHistoryGroup are implemented."
"The applicationFastMonitorGroup is mandatory when the applicationMonitorGroup is implemented and its counts group may exceed what can be represented in 32 bits."
The applicationFastTransactGroup is mandatory when the applicationTransactGroup is implemented and its counts may exceed what can be represented in 32 bits."
GROUP applicationFastHistoryGroup DESCRIPTION "The applicationFastHistoryGroup is mandatory when the applicationHistoryGroup is implemented and its counts may exceed what can be represented in 32 bits."
The applicationFastTransHistoryGroup is mandatory when the applicationTransHistoryGroup is implemented and its counts may exceed what can be represented in 32 bits."
Unlike the system application MIB [31], in many environments support for much of this MIB requires instrumentation built into the managed resource.
Some tables may be implemented by a single monitor process; for others, the implementation may be distributed within the managed system with the resources being managed.
As a practical matter, this means that the management infrastructure of the managed system must support different subagents taking responsibility for different rows of a single table.
This can be supported by AgentX [25], as well as some other subagent protocols such as [8], [9], and [11].
The sysApplRunElmtIndex is the key connection between this MIB and the systems application MIB.
Implementations of these two MIBs intended to run concurrently on a given platform must employ a consistent policy for assigning this value to running application elements.
Some of the objects defined in this MIB may carry a high run time cost in some environments.
For example, tracking transaction elapsed time could be expensive if it required two kernel calls (start and finish) per transaction.
Similarly, maintaining tables of per  transaction information, rather than aggregating information by transaction type or transaction stream, could have significant storage and performance impacts.
Unless a collision free mechanism for allocating service instance indexes is in place, the structure of the service level tables makes an index reservation mechanism necessary.
[25] is an example of a subagent protocol capable of satisfying this requirement.
By making potentially sensitive information externally accessible, the capabilities supported by the MIB have the potential of becoming security problems.
How security fits into SNMP frameworks is described in [26], and a specific access control model is described in [30].
The tables in this MIB are organized to separate sensitive control capabilities from less sensitive usage information.
For example, the objects to control application suspend/resume are separated from those to handle reconfiguration, which in turn are distinct from those for termination.
This recognizes the need to support configurations where the level of authorization needed by a manager to do a "reconfigure" might be substantially less than the level needed to terminate an application element.
By keeping these in separate columns, we make it possible to set up access control that allows, for example, "reconfigure" but not "kill".
The MIB is structured to be useful for managers with read only access rights.
In some environments, it may be approprate to restrict even read only access to these MIBs.
The capabilities supported by this MIB include several that may be of value to a security administrator.
These include the ability to monitor the level of usage of a given application, and to check the integrity of application components.
