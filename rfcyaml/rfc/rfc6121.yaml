- contents:
  - "           Extensible Messaging and Presence Protocol (XMPP):\n                     Instant
    Messaging and Presence\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines extensions to core features of the Extensible\n
    \  Messaging and Presence Protocol (XMPP) that provide basic instant\n   messaging
    (IM) and presence functionality in conformance with the\n   requirements in RFC
    2779.  This document obsoletes RFC 3921.\n"
  title: Abstract
- contents:
  - "Status of this Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6121.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   5\n     1.1.  Overview  . . . . . . . . . . . . . . . . . . . . .
    . . .   5\n     1.2.  History . . . . . . . . . . . . . . . . . . . . . . . .
    .   5\n     1.3.  Requirements  . . . . . . . . . . . . . . . . . . . . . .   5\n
    \    1.4.  Functional Summary  . . . . . . . . . . . . . . . . . . .   7\n     1.5.
    \ Terminology . . . . . . . . . . . . . . . . . . . . . . .   8\n   2.  Managing
    the Roster . . . . . . . . . . . . . . . . . . . . .   9\n     2.1.  Syntax and
    Semantics  . . . . . . . . . . . . . . . . . .   9\n       2.1.1.  Ver Attribute
    . . . . . . . . . . . . . . . . . . . .  10\n       2.1.2.  Roster Items  . .
    . . . . . . . . . . . . . . . . . .  10\n         2.1.2.1.  Approved Attribute
    \ . . . . . . . . . . . . . . .  10\n         2.1.2.2.  Ask Attribute . . . .
    . . . . . . . . . . . . . .  10\n         2.1.2.3.  JID Attribute . . . . . .
    . . . . . . . . . . . .  11\n         2.1.2.4.  Name Attribute  . . . . . . .
    . . . . . . . . . .  11\n         2.1.2.5.  Subscription Attribute  . . . . .
    . . . . . . . .  11\n         2.1.2.6.  Group Element . . . . . . . . . . . .
    . . . . . .  12\n       2.1.3.  Roster Get  . . . . . . . . . . . . . . . . .
    . . . .  12\n       2.1.4.  Roster Result . . . . . . . . . . . . . . . . . .
    . .  13\n       2.1.5.  Roster Set  . . . . . . . . . . . . . . . . . . . . .
    \ 14\n       2.1.6.  Roster Push . . . . . . . . . . . . . . . . . . . . .  14\n
    \    2.2.  Retrieving the Roster on Login  . . . . . . . . . . . . .  16\n     2.3.
    \ Adding a Roster Item  . . . . . . . . . . . . . . . . . .  17\n       2.3.1.
    \ Request . . . . . . . . . . . . . . . . . . . . . . .  17\n       2.3.2.  Success
    Case  . . . . . . . . . . . . . . . . . . . .  17\n       2.3.3.  Error Cases
    . . . . . . . . . . . . . . . . . . . . .  18\n     2.4.  Updating a Roster Item
    \ . . . . . . . . . . . . . . . . .  22\n       2.4.1.  Request . . . . . . .
    . . . . . . . . . . . . . . . .  22\n       2.4.2.  Success Case  . . . . . .
    . . . . . . . . . . . . . .  24\n       2.4.3.  Error Cases . . . . . . . . .
    . . . . . . . . . . . .  24\n     2.5.  Deleting a Roster Item  . . . . . . .
    . . . . . . . . . .  24\n       2.5.1.  Request . . . . . . . . . . . . . . .
    . . . . . . . .  24\n       2.5.2.  Success Case  . . . . . . . . . . . . . .
    . . . . . .  25\n       2.5.3.  Error Cases . . . . . . . . . . . . . . . . .
    . . . .  26\n     2.6.  Roster Versioning . . . . . . . . . . . . . . . . . .
    . .  26\n       2.6.1.  Stream Feature  . . . . . . . . . . . . . . . . . . .
    \ 26\n       2.6.2.  Request . . . . . . . . . . . . . . . . . . . . . . .  26\n
    \      2.6.3.  Success Case  . . . . . . . . . . . . . . . . . . . .  27\n   3.
    \ Managing Presence Subscriptions . . . . . . . . . . . . . . .  30\n     3.1.
    \ Requesting a Subscription . . . . . . . . . . . . . . . .  30\n       3.1.1.
    \ Client Generation of Outbound Subscription Request  .  31\n       3.1.2.  Server
    Processing of Outbound Subscription Request  .  32\n       3.1.3.  Server Processing
    of Inbound Subscription Request . .  34\n       3.1.4.  Client Processing of Inbound
    Subscription Request . .  35\n       3.1.5.  Server Processing of Outbound Subscription
    Approval .  36\n       3.1.6.  Server Processing of Inbound Subscription Approval
    \ .  38\n     3.2.  Canceling a Subscription  . . . . . . . . . . . . . . . .
    \ 40\n       3.2.1.  Client Generation of Subscription Cancellation  . . .  40\n
    \      3.2.2.  Server Processing of Outbound Subscription\n               Cancellation
    \ . . . . . . . . . . . . . . . . . . . .  40\n       3.2.3.  Server Processing
    of Inbound Subscription\n               Cancellation  . . . . . . . . . . . .
    . . . . . . . .  41\n     3.3.  Unsubscribing . . . . . . . . . . . . . . . .
    . . . . . .  43\n       3.3.1.  Client Generation of Unsubscribe  . . . . . .
    . . . .  43\n       3.3.2.  Server Processing of Outbound Unsubscribe . . . .
    . .  43\n       3.3.3.  Server Processing of Inbound Unsubscribe  . . . . . .
    \ 44\n     3.4.  Pre-Approving a Subscription Request  . . . . . . . . . .  46\n
    \      3.4.1.  Client Generation of Subscription Pre-Approval  . . .  46\n       3.4.2.
    \ Server Processing of Subscription Pre-Approval  . . .  47\n   4.  Exchanging
    Presence Information . . . . . . . . . . . . . . .  48\n     4.1.  Presence Fundamentals
    . . . . . . . . . . . . . . . . . .  48\n     4.2.  Initial Presence  . . . .
    . . . . . . . . . . . . . . . .  49\n       4.2.1.  Client Generation of Initial
    Presence . . . . . . . .  49\n       4.2.2.  Server Processing of Outbound Initial
    Presence  . . .  50\n       4.2.3.  Server Processing of Inbound Initial Presence
    . . . .  50\n       4.2.4.  Client Processing of Initial Presence . . . . . .
    . .  51\n     4.3.  Presence Probes . . . . . . . . . . . . . . . . . . . . .
    \ 51\n       4.3.1.  Server Generation of Outbound Presence Probe  . . . .  52\n
    \      4.3.2.  Server Processing of Inbound Presence Probe . . . . .  53\n         4.3.2.1.
    \ Handling of the 'id' Attribute  . . . . . . . . .  55\n     4.4.  Subsequent
    Presence Broadcast . . . . . . . . . . . . . .  57\n       4.4.1.  Client Generation
    of Subsequent Presence Broadcast  .  57\n       4.4.2.  Server Processing of Subsequent
    Outbound Presence . .  57\n       4.4.3.  Server Processing of Subsequent Inbound
    Presence  . .  58\n       4.4.4.  Client Processing of Subsequent Presence  .
    . . . . .  59\n     4.5.  Unavailable Presence  . . . . . . . . . . . . . . .
    . . .  59\n       4.5.1.  Client Generation of Unavailable Presence . . . . .
    .  59\n       4.5.2.  Server Processing of Outbound Unavailable Presence  .  59\n
    \      4.5.3.  Server Processing of Inbound Unavailable Presence . .  61\n       4.5.4.
    \ Client Processing of Unavailable Presence . . . . . .  62\n     4.6.  Directed
    Presence . . . . . . . . . . . . . . . . . . . .  62\n       4.6.1.  General Considerations
    \ . . . . . . . . . . . . . . .  62\n       4.6.2.  Client Generation of Directed
    Presence  . . . . . . .  63\n       4.6.3.  Server Processing of Outbound Directed
    Presence . . .  63\n       4.6.4.  Server Processing of Inbound Directed Presence
    \ . . .  64\n       4.6.5.  Client Processing of Inbound Directed Presence  .
    . .  64\n       4.6.6.  Server Processing of Presence Probes  . . . . . . . .
    \ 64\n     4.7.  Presence Syntax . . . . . . . . . . . . . . . . . . . . .  65\n
    \      4.7.1.  Type Attribute  . . . . . . . . . . . . . . . . . . .  65\n       4.7.2.
    \ Child Elements  . . . . . . . . . . . . . . . . . . .  66\n         4.7.2.1.
    \ Show Element  . . . . . . . . . . . . . . . . . .  66\n         4.7.2.2.  Status
    Element  . . . . . . . . . . . . . . . . .  67\n         4.7.2.3.  Priority Element
    \ . . . . . . . . . . . . . . . .  68\n       4.7.3.  Extended Content  . . .
    . . . . . . . . . . . . . . .  69\n   5.  Exchanging Messages . . . . . . . .
    . . . . . . . . . . . . .  69\n     5.1.  One-to-One Chat Sessions  . . . . .
    . . . . . . . . . . .  69\n     5.2.  Message Syntax  . . . . . . . . . . . .
    . . . . . . . . .  70\n       5.2.1.  To Attribute  . . . . . . . . . . . . .
    . . . . . . .  70\n       5.2.2.  Type Attribute  . . . . . . . . . . . . . .
    . . . . .  71\n       5.2.3.  Body Element  . . . . . . . . . . . . . . . . .
    . . .  73\n       5.2.4.  Subject Element . . . . . . . . . . . . . . . . . .
    .  74\n       5.2.5.  Thread Element  . . . . . . . . . . . . . . . . . . .  75\n
    \    5.3.  Extended Content  . . . . . . . . . . . . . . . . . . . .  77\n   6.
    \ Exchanging IQ Stanzas . . . . . . . . . . . . . . . . . . . .  77\n   7.  A
    Sample Session  . . . . . . . . . . . . . . . . . . . . . .  78\n   8.  Server
    Rules for Processing XML Stanzas . . . . . . . . . . .  84\n     8.1.  General
    Considerations  . . . . . . . . . . . . . . . . .  85\n     8.2.  No 'to' Address
    . . . . . . . . . . . . . . . . . . . . .  85\n     8.3.  Remote Domain . . .
    . . . . . . . . . . . . . . . . . . .  85\n     8.4.  Local Domain  . . . . .
    . . . . . . . . . . . . . . . . .  86\n     8.5.  Local User  . . . . . . . .
    . . . . . . . . . . . . . . .  86\n       8.5.1.  No Such User  . . . . . . .
    . . . . . . . . . . . . .  86\n       8.5.2.  localpart@domainpart  . . . . .
    . . . . . . . . . . .  86\n         8.5.2.1.  Available or Connected Resources
    \ . . . . . . . .  87\n         8.5.2.2.  No Available or Connected Resources
    . . . . . . .  89\n       8.5.3.  localpart@domainpart/resourcepart . . . . .
    . . . . .  90\n         8.5.3.1.  Resource Matches  . . . . . . . . . . . . .
    . . .  90\n         8.5.3.2.  No Resource Matches . . . . . . . . . . . . . .
    .  90\n       8.5.4.  Summary of Message Delivery Rules . . . . . . . . . .  92\n
    \  9.  Handling of URIs  . . . . . . . . . . . . . . . . . . . . . .  93\n   10.
    Internationalization Considerations . . . . . . . . . . . . .  94\n   11. Security
    Considerations . . . . . . . . . . . . . . . . . . .  94\n   12. Conformance Requirements
    \ . . . . . . . . . . . . . . . . . .  95\n   13. References  . . . . . . . .
    . . . . . . . . . . . . . . . . .  99\n     13.1. Normative References  . . .
    . . . . . . . . . . . . . . .  99\n     13.2. Informative References  . . . .
    . . . . . . . . . . . . .  99\n   Appendix A.  Subscription States  . . . . .
    . . . . . . . . . . . 103\n     A.1.  Defined States  . . . . . . . . . . . .
    . . . . . . . . . 103\n     A.2.  Server Processing of Outbound Presence Subscription\n
    \          Stanzas . . . . . . . . . . . . . . . . . . . . . . . . . 104\n       A.2.1.
    \ Subscribe . . . . . . . . . . . . . . . . . . . . . . 105\n       A.2.2.  Unsubscribe
    . . . . . . . . . . . . . . . . . . . . . 105\n       A.2.3.  Subscribed  . .
    . . . . . . . . . . . . . . . . . . . 106\n       A.2.4.  Unsubscribed  . . .
    . . . . . . . . . . . . . . . . . 106\n     A.3.  Server Processing of Inbound
    Presence Subscription\n           Stanzas . . . . . . . . . . . . . . . . . .
    . . . . . . . 106\n       A.3.1.  Subscribe . . . . . . . . . . . . . . . . .
    . . . . . 107\n       A.3.2.  Unsubscribe . . . . . . . . . . . . . . . . . .
    . . . 107\n       A.3.3.  Subscribed  . . . . . . . . . . . . . . . . . . . .
    . 108\n       A.3.4.  Unsubscribed  . . . . . . . . . . . . . . . . . . . . 109\n
    \  Appendix B.  Blocking Communication . . . . . . . . . . . . . . . 110\n   Appendix
    C.  vCards . . . . . . . . . . . . . . . . . . . . . . . 110\n   Appendix D.  XML
    Schema for jabber:iq:roster  . . . . . . . . . . 110\n   Appendix E.  Differences
    From RFC 3921  . . . . . . . . . . . . . 112\n   Appendix F.  Acknowledgements
    . . . . . . . . . . . . . . . . . . 113\n"
  title: Table of Contents
- contents:
  - '1.  Introduction

    '
  - contents:
    - "1.1.  Overview\n   The Extensible Messaging and Presence Protocol (XMPP) is
      an\n   application profile of the Extensible Markup Language [XML] that\n   enables
      the near-real-time exchange of structured yet extensible data\n   between any
      two or more network entities.  The core features of XMPP\n   defined in [XMPP-CORE]
      provide the building blocks for many types of\n   near-real-time applications,
      which can be layered on top of the core\n   by sending application-specific
      data qualified by particular XML\n   namespaces (refer to [XML-NAMES]).  This
      document defines XMPP\n   extensions that provide the basic functionality expected
      of an\n   instant messaging (IM) and presence application as described in\n
      \  [IMP-REQS].\n"
    title: 1.1.  Overview
  - contents:
    - "1.2.  History\n   The basic syntax and semantics of XMPP were developed originally\n
      \  within the Jabber open-source community, mainly in 1999.  In late\n   2002,
      the XMPP Working Group was chartered with developing an\n   adaptation of the
      core Jabber protocol that would be suitable as an\n   IETF IM and presence technology
      in accordance with [IMP-REQS].  In\n   October 2004, [RFC3920] and [RFC3921]
      were published, representing\n   the most complete definition of XMPP at that
      time.\n   Since 2004 the Internet community has gained extensive implementation\n
      \  and deployment experience with XMPP, including formal\n   interoperability
      testing carried out under the auspices of the XMPP\n   Standards Foundation
      (XSF).  This document incorporates comprehensive\n   feedback from software
      developers and service providers, including a\n   number of backward-compatible
      modifications summarized under\n   Appendix E.  As a result, this document reflects
      the rough consensus\n   of the Internet community regarding the IM and presence
      features of\n   XMPP 1.0, thus obsoleting RFC 3921.\n"
    title: 1.2.  History
  - contents:
    - "1.3.  Requirements\n   Traditionally, IM applications have combined the following
      factors:\n   1.  The central point of focus is a list of one's contacts or\n
      \      \"buddies\" (in XMPP this list is called a \"roster\").\n   2.  The purpose
      of using such an application is to exchange\n       relatively brief text messages
      with particular contacts in close\n       to real time -- often relatively large
      numbers of such messages\n       in rapid succession, in the form of a one-to-one
      \"chat session\"\n       as described under Section 5.1.\n   3.  The catalyst
      for exchanging messages is \"presence\" -- i.e.,\n       information about the
      network availability of particular contacts\n       (thus knowing who is online
      and available for a one-to-one chat\n       session).\n   4.  Presence information
      is provided only to contacts that one has\n       authorized by means of an
      explicit agreement called a \"presence\n       subscription\".\n   Thus at a
      high level this document assumes that a user needs to be\n   able to complete
      the following use cases:\n   o  Manage items in one's contact list\n   o  Exchange
      messages with one's contacts\n   o  Exchange presence information with one's
      contacts\n   o  Manage presence subscriptions to and from one's contacts\n   Detailed
      definitions of these functionality areas are contained in\n   RFC 2779 [IMP-REQS],
      and the interested reader is referred to that\n   document regarding in-depth
      requirements.  Although the XMPP IM and\n   presence extensions specified herein
      meet the requirements of RFC\n   2779, they were not designed explicitly with
      that specification in\n   mind, since the base protocol evolved through an open
      development\n   process within the Jabber open-source community before RFC 2779
      was\n   written.  Although XMPP protocol extensions addressing many other\n
      \  functionality areas have been defined in the XMPP Standards\n   Foundation's
      XEP series (e.g., multi-user text chat as specified in\n   [XEP-0045]), such
      extensions are not specified in this document\n   because they are not mandated
      by RFC 2779.\n      Implementation Note: RFC 2779 stipulates that presence services\n
      \     must be separable from IM services and vice-versa; i.e., it must\n      be
      possible to use the protocol to provide a presence service, a\n      messaging
      service, or both.  Although the text of this document\n      assumes that implementations
      and deployments will want to offer a\n      unified IM and presence service,
      it is not mandatory for an XMPP\n      service to offer both a presence service
      and a messaging service,\n      and the protocol makes it possible to offer
      separate and distinct\n      services for presence and for messaging.  (For
      example, a\n      presence-only service could return a <service-unavailable/>
      stanza\n      error if a client attempts to send a <message/> stanza.)\n"
    title: 1.3.  Requirements
  - contents:
    - "1.4.  Functional Summary\n   This non-normative section provides a developer-friendly,
      functional\n   summary of XMPP-based IM and presence features; consult the sections\n
      \  that follow for a normative definition of these features.\n   [XMPP-CORE]
      specifies how an XMPP client connects to an XMPP server.\n   In particular,
      it specifies the preconditions that need to be\n   fulfilled before a client
      is allowed to send XML stanzas (the basic\n   unit of meaning in XMPP) to other
      entities on an XMPP network.  These\n   preconditions comprise negotiation of
      the XML stream and include\n   exchange of XML stream headers, optional channel
      encryption via\n   Transport Layer Security [TLS], mandatory authentication
      via Simple\n   Authentication and Security Layer [SASL], and binding of a resource\n
      \  to the stream for client addressing.  The reader is referred to\n   [XMPP-CORE]
      for details regarding these preconditions, and knowledge\n   of [XMPP-CORE]
      is assumed herein.\n      Interoperability Note: [RFC3921] specified one additional\n
      \     precondition: formal establishment of an instant messaging and\n      presence
      session.  Implementation and deployment experience has\n      shown that this
      additional step is unnecessary.  However, for\n      backward compatibility
      an implementation MAY still offer that\n      feature.  This enables older software
      to connect while letting\n      newer software save a round trip.\n   Upon fulfillment
      of the preconditions specified in [XMPP-CORE], an\n   XMPP client has a long-lived
      XML stream with an XMPP server, which\n   enables the user controlling that
      client to send and receive a\n   potentially unlimited number of XML stanzas
      over the stream.  Such a\n   stream can be used to exchange messages, share
      presence information,\n   and engage in structured request-response interactions
      in close to\n   real time.  After negotiation of the XML stream, the typical
      flow for\n   an instant messaging and presence session is as follows:\n   1.
      \ Retrieve one's roster.  (See Section 2.2.)\n   2.  Send initial presence to
      the server for broadcast to all\n       subscribed contacts, thus \"going online\"
      from the perspective of\n       XMPP communication.  (See Section 4.2.)\n   3.
      \ Exchange messages, manage presence subscriptions, perform roster\n       updates,
      and in general process and generate other XML stanzas\n       with particular
      semantics throughout the life of the session.\n       (See Sections 5, 3, 2,
      and 6.)\n   4.  Terminate the session when desired by sending unavailable\n
      \      presence and closing the underlying XML stream.  (See\n       Section
      4.5.)\n"
    title: 1.4.  Functional Summary
  - contents:
    - "1.5.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
      \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
      in RFC\n   2119 [KEYWORDS].\n   This document inherits the terminology defined
      in [XMPP-CORE].\n   The terms \"automated client\" and \"interactive client\"
      are to be\n   understood in the sense defined in [TLS-CERTS].\n   For convenience,
      this document employs the term \"user\" to refer to\n   the owner of an XMPP
      account; however, account owners need not be\n   humans and can be bots, devices,
      or other automated applications.\n   Several other terms, such as \"interested
      resource\", are defined\n   within the body of this document.\n   Following
      the \"XML Notation\" used in [IRI] to represent characters\n   that cannot be
      rendered in ASCII-only documents, some examples in\n   this document use the
      form \"&#x....\" as a notational device to\n   represent [UNICODE] characters
      (e.g., the string \"&#x0159;\" stands\n   for the Unicode character LATIN SMALL
      LETTER R WITH CARON); this form\n   is definitely not to be sent over the wire
      in XMPP systems.\n   In examples, lines have been wrapped for improved readability,\n
      \  \"[...]\" means elision, and the following prepended strings are used\n   (these
      prepended strings are not to be sent over the wire):\n   o  C: = client\n   o
      \ CC: = contact's client\n   o  CS: = contact's server\n   o  S: = server\n
      \  o  UC: = user's client\n   o  US: = user's server\n   Readers need to be
      aware that the examples are not exhaustive and\n   that, in examples for some
      protocol flows, the alternate steps shown\n   would not necessarily be triggered
      by the exact data sent in the\n   previous step; in all cases, the protocol
      definitions specified in\n   this document or in normatively referenced documents
      rule over any\n   examples provided here.  All examples are fictional and the\n
      \  information exchanged (e.g., usernames and passwords) does not\n   represent
      any existing users or servers.\n"
    title: 1.5.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Managing the Roster\n   In XMPP, a user's roster contains any number of specific
    contacts.  A\n   user's roster is stored by the user's server on the user's behalf
    so\n   that the user can access roster information from any device.  When\n   the
    user adds items to the roster or modifies existing items, if an\n   error does
    not occur then the server SHOULD store that data\n   unmodified if at all possible
    and MUST return the data it has stored\n   when an authorized client requests
    the roster.\n      Security Warning: Because the user's roster can contain\n      confidential
    data, the server MUST restrict access to this data so\n      that only authorized
    entities (typically limited to the account\n      owner) are able to retrieve,
    modify, or delete it.\n   RFC 3921 assumed that the only place where a user stores
    their roster\n   is the server where the user's account is registered and at which
    the\n   user authenticates for access to the XMPP network.  This\n   specification
    removes that strict coupling of roster storage to\n   account registration and
    network authentication, with the result that\n   a user could store their roster
    at another location, or could have\n   multiple rosters that are stored in multiple
    locations.  However, in\n   the absence of implementation and deployment experience
    with a more\n   flexible roster storage model, this specification retains the\n
    \  terminology of RFC 3921 by using the terms \"client\" and \"server\" (and\n
    \  \"the roster\" instead of \"a roster\"), rather than coining a new term\n   for
    \"a place where a user stores a roster\".  Future documents might\n   provide
    normative rules for non-server roster storage or for the\n   management of multiple
    rosters, but such rules are out of scope for\n   this document.\n"
  - contents:
    - "2.1.  Syntax and Semantics\n   Rosters are managed using <iq/> stanzas (see
      Section 8.2.3 of\n   [XMPP-CORE]), specifically by means of a <query/> child
      element\n   qualified by the 'jabber:iq:roster' namespace.  The detailed syntax\n
      \  and semantics are defined in the following sections.\n"
    - contents:
      - "2.1.1.  Ver Attribute\n   The 'ver' attribute is a string that identifies
        a particular version\n   of the roster information.  The value MUST be generated
        only by the\n   server and MUST be treated by the client as opaque.  The server
        can\n   use any appropriate method for generating the version ID, such as
        a\n   hash of the roster data or a strictly increasing sequence number.\n
        \  Inclusion of the 'ver' attribute is RECOMMENDED.\n   Use of the 'ver' attribute
        is described more fully under Section 2.6.\n      Interoperability Note: The
        'ver' attribute of the <query/> element\n      was not defined in RFC 3921
        and is newly defined in this\n      specification.\n"
      title: 2.1.1.  Ver Attribute
    - contents:
      - "2.1.2.  Roster Items\n   The <query/> element inside a roster set (Section
        2.1.5) contains one\n   <item/> child, and a roster result (Section 2.1.4)
        typically contains\n   multiple <item/> children.  Each <item/> element describes
        a unique\n   \"roster item\" (sometimes also called a \"contact\").\n   The
        syntax of the <item/> element is described in the following\n   sections.\n"
      - contents:
        - "2.1.2.1.  Approved Attribute\n   The boolean 'approved' attribute with
          a value of \"true\" is used to\n   signal subscription pre-approval as described
          under Section 3.4 (the\n   default is \"false\", in accordance with [XML-DATATYPES]).\n
          \  A server SHOULD include the 'approved' attribute to inform the client\n
          \  of subscription pre-approvals.  A client MUST NOT include the\n   'approved'
          attribute in the roster sets it sends to the server, but\n   instead MUST
          use presence stanzas of type \"subscribed\" and\n   \"unsubscribed\" to
          manage pre-approvals as described under\n   Section 3.4.\n      Interoperability
          Note: The 'approved' attribute of the <item/>\n      element was not defined
          in RFC 3921 and is newly defined in this\n      specification.\n"
        title: 2.1.2.1.  Approved Attribute
      - contents:
        - "2.1.2.2.  Ask Attribute\n   The 'ask' attribute of the <item/> element
          with a value of\n   \"subscribe\" is used to signal various subscription
          sub-states that\n   include a \"Pending Out\" aspect as described under
          Section 3.1.2.\n   A server SHOULD include the 'ask' attribute to inform
          the client of\n   \"Pending Out\" sub-states.  A client MUST NOT include
          the 'ask'\n   attribute in the roster sets it sends to the server, but instead
          MUST\n   use presence stanzas of type \"subscribe\" and \"unsubscribe\"
          to manage\n   such sub-states as described under Section 3.1.2.\n"
        title: 2.1.2.2.  Ask Attribute
      - contents:
        - "2.1.2.3.  JID Attribute\n   The 'jid' attribute of the <item/> element
          specifies the Jabber\n   Identifier (JID) that uniquely identifies the roster
          item.\n   The 'jid' attribute is REQUIRED whenever a client or server adds,\n
          \  updates, deletes, or returns a roster item.\n"
        title: 2.1.2.3.  JID Attribute
      - contents:
        - "2.1.2.4.  Name Attribute\n   The 'name' attribute of the <item/> element
          specifies the \"handle\" to\n   be associated with the JID, as determined
          by the user (not the\n   contact).  Although the value of the 'name' attribute
          MAY have\n   meaning to a human user, it is opaque to the server.  However,
          the\n   'name' attribute MAY be used by the server for matching purposes\n
          \  within the context of various XMPP extensions (one possible\n   comparison
          method is that described for XMPP resourceparts in\n   [XMPP-ADDR]).\n   It
          is OPTIONAL for a client to include the 'name' attribute when\n   adding
          or updating a roster item.\n"
        title: 2.1.2.4.  Name Attribute
      - contents:
        - "2.1.2.5.  Subscription Attribute\n   The state of the presence subscription
          is captured in the\n   'subscription' attribute of the <item/> element.
          \ The defined\n   subscription-related values are:\n   none:  the user does
          not have a subscription to the contact's\n      presence, and the contact
          does not have a subscription to the\n      user's presence; this is the
          default value, so if the subscription\n      attribute is not included then
          the state is to be understood as\n      \"none\"\n   to:  the user has a
          subscription to the contact's presence, but the\n      contact does not
          have a subscription to the user's presence\n   from:  the contact has a
          subscription to the user's presence, but the\n      user does not have a
          subscription to the contact's presence\n   both:  the user and the contact
          have subscriptions to each other's\n      presence (also called a \"mutual
          subscription\")\n   In a roster result (Section 2.1.4), the client MUST
          ignore values of\n   the 'subscription' attribute other than \"none\", \"to\",
          \"from\", or\n   \"both\".\n   In a roster push (Section 2.1.6), the client
          MUST ignore values of\n   the 'subscription' attribute other than \"none\",
          \"to\", \"from\", \"both\",\n   or \"remove\".\n   In a roster set (Section
          2.1.5), the 'subscription' attribute MAY be\n   included with a value of
          \"remove\", which indicates that the item is\n   to be removed from the
          roster; in a roster set the server MUST ignore\n   all values of the 'subscription'
          attribute other than \"remove\".\n   Inclusion of the 'subscription' attribute
          is OPTIONAL.\n"
        title: 2.1.2.5.  Subscription Attribute
      - contents:
        - "2.1.2.6.  Group Element\n   The <group/> child element specifies a category
          or \"bucket\" into\n   which the roster item is to be grouped by a client.
          \ An <item/>\n   element MAY contain more than one <group/> element, which
          means that\n   roster groups are not exclusive.  Although the XML character
          data of\n   the <group/> element MAY have meaning to a human user, it is
          opaque\n   to the server.  However, the <group/> element MAY be used by
          the\n   server for matching purposes within the context of various XMPP\n
          \  extensions (one possible comparison method is that described for XMPP\n
          \  resourceparts in [XMPP-ADDR]).\n   It is OPTIONAL for a client to include
          the <group/> element when\n   adding or updating a roster item.  If a roster
          set (Section 2.1.5)\n   includes no <group/> element, then the item is to
          be interpreted as\n   being affiliated with no group.\n"
        title: 2.1.2.6.  Group Element
      title: 2.1.2.  Roster Items
    - contents:
      - "2.1.3.  Roster Get\n   A \"roster get\" is a client's request for the server
        to return the\n   roster; syntactically it is an IQ stanza of type \"get\"
        sent from\n   client to server and containing a <query/> element qualified
        by the\n   'jabber:iq:roster' namespace, where the <query/> element MUST NOT\n
        \  contain any <item/> child elements.\n   C: <iq from='juliet@example.com/balcony'\n
        \         id='bv1bs71f'\n          type='get'>\n       <query xmlns='jabber:iq:roster'/>\n
        \    </iq>\n   The expected outcome of sending a roster get is for the server
        to\n   return a roster result.\n"
      title: 2.1.3.  Roster Get
    - contents:
      - "2.1.4.  Roster Result\n   A \"roster result\" is the server's response to
        a roster get;\n   syntactically it is an IQ stanza of type \"result\" sent
        from server to\n   client and containing a <query/> element qualified by the
        'jabber:iq:\n   roster' namespace.\n   The <query/> element in a roster result
        contains one <item/> element\n   for each contact and therefore can contain
        more than one <item/>\n   element.\n   S: <iq id='bv1bs71f'\n          to='juliet@example.com/chamber'\n
        \         type='result'>\n       <query xmlns='jabber:iq:roster' ver='ver7'>\n
        \        <item jid='nurse@example.com'/>\n         <item jid='romeo@example.net'/>\n
        \      </query>\n     </iq>\n   If the roster exists but there are no contacts
        in the roster, then\n   the server MUST return an IQ-result containing a child
        <query/>\n   element that in turn contains no <item/> children (i.e., the
        server\n   MUST NOT return an empty <iq/> stanza of type \"error\").\n   S:
        <iq id='bv1bs71f'\n          to='juliet@example.com/chamber'\n          type='result'>\n
        \      <query xmlns='jabber:iq:roster' ver='ver9'/>\n     </iq>\n   If the
        roster does not exist, then the server MUST return a stanza\n   error with
        a condition of <item-not-found/>.\n   S: <iq id='bv1bs71f'\n          to='juliet@example.com/chamber'\n
        \         type='error'>\n       <error type='cancel'>\n         <item-not-found\n
        \            xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n       </error>\n
        \    </iq>\n"
      title: 2.1.4.  Roster Result
    - contents:
      - "2.1.5.  Roster Set\n   A \"roster set\" is a client's request for the server
        to modify (i.e.,\n   create, update, or delete) a roster item; syntactically
        it is an IQ\n   stanza of type \"set\" sent from client to server and containing
        a\n   <query/> element qualified by the 'jabber:iq:roster' namespace.\n   The
        following rules apply to roster sets:\n   1.  The <query/> element MUST contain
        one and only one <item/>\n       element.\n   2.  The server MUST ignore any
        value of the 'subscription' attribute\n       other than \"remove\" (see Section
        2.1.2.5).\n      Security Warning: Traditionally, the IQ stanza of the roster
        set\n      included no 'to' address, with the result that all roster sets\n
        \     were sent from an authenticated resource (full JID) of the account\n
        \     whose roster was being updated.  Furthermore, RFC 3921 required a\n
        \     server to perform special-case checking of roster sets to ignore\n      the
        'to' address; however, this specification has removed that\n      special-casing,
        which means that a roster set might include a 'to'\n      address other than
        that of the sender.  Therefore, the entity that\n      processes a roster
        set MUST verify that the sender of the roster\n      set is authorized to
        update the roster, and if not return a\n      <forbidden/> error.\n   C: <iq
        from='juliet@example.com/balcony'\n          id='rs1'\n          type='set'>\n
        \      <query xmlns='jabber:iq:roster'>\n         <item jid='nurse@example.com'/>\n
        \      </query>\n     </iq>\n"
      title: 2.1.5.  Roster Set
    - contents:
      - "2.1.6.  Roster Push\n   A \"roster push\" is a newly created, updated, or
        deleted roster item\n   that is sent from the server to the client; syntactically
        it is an IQ\n   stanza of type \"set\" sent from server to client and containing
        a\n   <query/> element qualified by the 'jabber:iq:roster' namespace.\n   The
        following rules apply to roster pushes:\n   1.  The <query/> element in a
        roster push MUST contain one and only\n       one <item/> element.\n   2.
        \ A receiving client MUST ignore the stanza unless it has no 'from'\n       attribute
        (i.e., implicitly from the bare JID of the user's\n       account) or it has
        a 'from' attribute whose value matches the\n       user's bare JID <user@domainpart>.\n
        \  S: <iq id='a78b4q6ha463'\n          to='juliet@example.com/chamber'\n          type='set'>\n
        \      <query xmlns='jabber:iq:roster'>\n         <item jid='nurse@example.com'/>\n
        \      </query>\n     </iq>\n   As mandated by the semantics of the IQ stanza
        as defined in\n   [XMPP-CORE], each resource that receives a roster push from
        the\n   server is supposed to reply with an IQ stanza of type \"result\" or\n
        \  \"error\" (however, it is known that many existing clients do not reply\n
        \  to roster pushes).\n   C: <iq from='juliet@example.com/balcony'\n          id='a78b4q6ha463'\n
        \         type='result'/>\n   C: <iq from='juliet@example.com/chamber'\n          id='a78b4q6ha463'\n
        \         type='result'/>\n      Security Warning: Traditionally, a roster
        push included no 'from'\n      address, with the result that all roster pushes
        were sent\n      implicitly from the bare JID of the account itself.  However,
        this\n      specification allows entities other than the user's server to\n
        \     maintain roster information, which means that a roster push might\n
        \     include a 'from' address other than the bare JID of the user's\n      account.
        \ Therefore, the client MUST check the 'from' address to\n      verify that
        the sender of the roster push is authorized to update\n      the roster.  If
        the client receives a roster push from an\n      unauthorized entity, it MUST
        NOT process the pushed data; in\n      addition, the client can either return
        a stanza error of <service-\n      unavailable/> error or refuse to return
        a stanza error at all (the\n      latter behavior overrides a MUST-level requirement
        from\n      [XMPP-CORE] for the purpose of preventing a presence leak).\n
        \     Implementation Note: There is no error case for client processing\n
        \     of roster pushes; if the server receives an IQ of type \"error\" in\n
        \     response to a roster push then it SHOULD ignore the error.\n"
      title: 2.1.6.  Roster Push
    title: 2.1.  Syntax and Semantics
  - contents:
    - "2.2.  Retrieving the Roster on Login\n   Upon authenticating with a server
      and binding a resource (thus\n   becoming a connected resource as defined in
      [XMPP-CORE]), a client\n   SHOULD request the roster before sending initial
      presence (however,\n   because receiving the roster is not necessarily desirable
      for all\n   resources, e.g., a connection with limited bandwidth, the client's\n
      \  request for the roster is not mandatory).  After a connected resource\n   sends
      initial presence (see Section 4.2), it is referred to as an\n   \"available
      resource\".  If a connected resource or available resource\n   requests the
      roster, it is referred to as an \"interested resource\".\n   The server MUST
      send roster pushes to all interested resources.\n      Implementation Note:
      Presence subscription requests are sent to\n      available resources, whereas
      the roster pushes associated with\n      subscription state changes are sent
      to interested resources.\n      Therefore, if a resource wishes to receive both
      subscription\n      requests and roster pushes, it MUST both send initial presence
      and\n      request the roster.\n   A client requests the roster by sending a
      roster get over its stream\n   with the server.\n   C: <iq from='juliet@example.com/balcony'\n
      \         id='hu2bac18'\n          type='get'>\n        <query xmlns='jabber:iq:roster'/>\n
      \     </iq>\n   S: <iq id='hu2bac18'\n          to='juliet@example.com/balcony'\n
      \         type='result'>\n        <query xmlns='jabber:iq:roster' ver='ver11'>\n
      \         <item jid='romeo@example.net'\n                name='Romeo'\n                subscription='both'>\n
      \           <group>Friends</group>\n          </item>\n          <item jid='mercutio@example.com'\n
      \               name='Mercutio'\n                subscription='from'/>\n          <item
      jid='benvolio@example.net'\n                name='Benvolio'\n                subscription='both'/>\n
      \       </query>\n      </iq>\n   If the server cannot process the roster get,
      it MUST return an\n   appropriate stanza error as described in [XMPP-CORE] (such
      as\n   <service-unavailable/> if the roster namespace is not supported or\n
      \  <internal-server-error/> if the server experiences trouble processing\n   or
      returning the roster).\n"
    title: 2.2.  Retrieving the Roster on Login
  - contents:
    - '2.3.  Adding a Roster Item

      '
    - contents:
      - "2.3.1.  Request\n   At any time, a client can add an item to the roster.
        \ This is done by\n   sending a roster set containing a new item.\n   C: <iq
        from='juliet@example.com/balcony'\n          id='ph1xaz53'\n          type='set'>\n
        \       <query xmlns='jabber:iq:roster'>\n          <item jid='nurse@example.com'\n
        \               name='Nurse'>\n            <group>Servants</group>\n          </item>\n
        \       </query>\n      </iq>\n"
      title: 2.3.1.  Request
    - contents:
      - "2.3.2.  Success Case\n   If the server can successfully process the roster
        set for the new\n   item (i.e., if no error occurs), it MUST create the item
        in the\n   user's roster and proceed as follows.\n   The server MUST return
        an IQ stanza of type \"result\" to the connected\n   resource that sent the
        roster set.\n   S: <iq id='ph1xaz53'\n          to='juliet@example.com/balcony'\n
        \         type='result'/>\n   The server MUST also send a roster push containing
        the new roster\n   item to all of the user's interested resources, including
        the\n   resource that generated the roster set.\n   S: <iq to='juliet@example.com/balcony'\n
        \         id='a78b4q6ha463'\n          type='set'>\n        <query xmlns='jabber:iq:roster'
        ver='ver13'>\n          <item jid='nurse@example.com'\n                name='Nurse'\n
        \               subscription='none'>\n            <group>Servants</group>\n
        \         </item>\n        </query>\n      </iq>\n   S: <iq to='juliet@example.com/chamber'\n
        \         id='x81g3bdy4n19'\n          type='set'>\n        <query xmlns='jabber:iq:roster'
        ver='ver13'>\n          <item jid='nurse@example.com'\n                name='Nurse'\n
        \               subscription='none'>\n            <group>Servants</group>\n
        \         </item>\n        </query>\n      </iq>\n   As mandated by the semantics
        of the IQ stanza as defined in\n   [XMPP-CORE], each resource that receives
        a roster push from the\n   server is supposed to reply with an IQ stanza of
        type \"result\" or\n   \"error\" (however, it is known that many existing
        clients do not reply\n   to roster pushes).\n   C: <iq from='juliet@example.com/balcony'\n
        \         id='a78b4q6ha463'\n          type='result'/>\n   C: <iq from='juliet@example.com/chamber'\n
        \         id='x81g3bdy4n19'\n          type='result'/>\n"
      title: 2.3.2.  Success Case
    - contents:
      - "2.3.3.  Error Cases\n   If the server cannot successfully process the roster
        set, it MUST\n   return a stanza error.  The following error cases are defined.\n
        \  Naturally, other stanza errors can occur, such as <internal-server-\n   error/>
        if the server experiences an internal problem with processing\n   the roster
        get, or even <not-allowed/> if the server only allows\n   roster modifications
        by means of a non-XMPP method such as a web\n   interface.\n   The server
        MUST return a <forbidden/> stanza error to the client if\n   the sender of
        the roster set is not authorized to update the roster\n   (where typically
        only an authenticated resource of the account itself\n   is authorized).\n
        \  The server MUST return a <bad-request/> stanza error to the client if\n
        \  the roster set contains any of the following violations:\n   1.  The <query/>
        element contains more than one <item/> child\n       element.\n   2.  The
        <item/> element contains more than one <group/> element, but\n       there
        are duplicate groups (one possible comparison method for\n       determining
        duplicates is that described for XMPP resourceparts\n       in [XMPP-ADDR]).\n
        \  The server MUST return a <not-acceptable/> stanza error to the client\n
        \  if the roster set contains any of the following violations:\n   1.  The
        length of the 'name' attribute is greater than a server-\n       configured
        limit.\n   2.  The XML character data of the <group/> element is of zero length\n
        \      (to remove an item from all groups, the client instead needs to\n       exclude
        any <group/> element from the roster set).\n   3.  The XML character data
        of the <group/> element is larger than a\n       server-configured limit.\n
        \  Error: Roster set initiated by unauthorized entity\n   C: <iq from='juliet@example.com/balcony'\n
        \         id='ix7s53v2'\n          to='romeo@example.net'\n          type='set'>\n
        \       <query xmlns='jabber:iq:roster'>\n          <item jid='nurse@example.com'/>\n
        \       </query>\n      </iq>\n   S: <iq id='ix7s53v2'\n          to='juliet@example.com/balcony'\n
        \         type='error'>\n       <error type='auth'>\n         <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n
        \      </error>\n     </iq>\n   Error: Roster set contains more than one item\n
        \  C: <iq from='juliet@example.com/balcony'\n          id='nw83vcj4'\n          type='set'>\n
        \       <query xmlns='jabber:iq:roster'>\n          <item jid='nurse@example.com'\n
        \               name='Nurse'>\n            <group>Servants</group>\n          </item>\n
        \         <item jid='mother@example.com'\n                name='Mom'>\n            <group>Family</group>\n
        \         </item>\n        </query>\n      </iq>\n   S: <iq id='nw83vcj4'\n
        \         to='juliet@example.com/balcony'\n          type='error'>\n       <error
        type='modify'>\n         <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n
        \      </error>\n     </iq>\n   Error: Roster set contains item with oversized
        handle\n   C: <iq from='juliet@example.com/balcony'\n          id='yl491b3d'\n
        \         type='set'>\n        <query xmlns='jabber:iq:roster'>\n          <item
        jid='nurse@example.com'\n                name='[ ... some-very-long-handle
        ... ]'>\n            <group>Servants</group>\n          </item>\n        </query>\n
        \     </iq>\n   S: <iq id='yl491b3d'\n          to='juliet@example.com/balcony'\n
        \         type='error'>\n        <error type='modify'>\n          <not-acceptable
        xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n        </error>\n      </iq>\n
        \  Error: Roster set contains duplicate groups\n   C: <iq from='juliet@example.com/balcony'\n
        \         id='tk3va749'\n          type='set'>\n        <query xmlns='jabber:iq:roster'>\n
        \         <item jid='nurse@example.com'\n                name='Nurse'>\n            <group>Servants</group>\n
        \           <group>Servants</group>\n          </item>\n        </query>\n
        \     </iq>\n   S: <iq id='tk3va749'\n          to='juliet@example.com/balcony'\n
        \         type='error'>\n        <error type='modify'>\n          <bad-request
        xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n        </error>\n      </iq>\n
        \  Error: Roster set contains empty group\n   C: <iq from='juliet@example.com/balcony'\n
        \         id='fl3b486u'\n          type='set'>\n        <query xmlns='jabber:iq:roster'>\n
        \         <item jid='nurse@example.com'\n                name='Nurse'>\n            <group></group>\n
        \         </item>\n        </query>\n      </iq>\n   S: <iq id='fl3b486u'\n
        \         to='juliet@example.com/balcony'\n          type='error'>\n        <error
        type='modify'>\n          <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n
        \       </error>\n      </iq>\n   Error: Roster set contains oversized group
        name\n   C: <iq from='juliet@example.com/balcony'\n          id='qh3b4v19'\n
        \         type='set'>\n        <query xmlns='jabber:iq:roster'>\n          <item
        jid='nurse@example.com'\n                name='Nurse'>\n            <group>[
        ... some-very-long-group-name ... ]</group>\n          </item>\n        </query>\n
        \     </iq>\n   S: <iq id='qh3b4v19'\n          to='juliet@example.com/balcony'\n
        \         type='error'>\n        <error type='modify'>\n          <not-acceptable
        xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n        </error>\n      </iq>\n
        \     Interoperability Note: Some servers return a <not-allowed/> stanza\n
        \     error to the client if the value of the <item/> element's 'jid'\n      attribute
        matches the bare JID <localpart@domainpart> of the\n      user's account.\n"
      title: 2.3.3.  Error Cases
    title: 2.3.  Adding a Roster Item
  - contents:
    - '2.4.  Updating a Roster Item

      '
    - contents:
      - "2.4.1.  Request\n   Updating an existing roster item is done in the same
        way as adding a\n   new roster item, i.e., by sending a roster set to the
        server.\n   Because a roster item is atomic, the item MUST be updated exactly
        as\n   provided in the roster set.\n   There are several reasons why a client
        might update a roster item:\n   1.  Adding a group\n   2.  Deleting a group\n
        \  3.  Changing the handle\n   4.  Deleting the handle\n   Consider a roster
        item that is defined as follows:\n       <item jid='romeo@example.net'\n             name='Romeo'>\n
        \        <group>Friends</group>\n       </item>\n   The user who has this
        item in her roster might want to add the item\n   to another group.\n   C:
        <iq from='juliet@example.com/balcony'\n          id='di43b2x9'\n          type='set'>\n
        \       <query xmlns='jabber:iq:roster'>\n          <item jid='romeo@example.net'\n
        \               name='Romeo'>\n            <group>Friends</group>\n            <group>Lovers</group>\n
        \         </item>\n        </query>\n      </iq>\n   Sometime later, the user
        might want to remove the item from the\n   original group.\n   C: <iq from='juliet@example.com/balcony'\n
        \         id='lf72v157'\n          type='set'>\n        <query xmlns='jabber:iq:roster'>\n
        \         <item jid='romeo@example.net'\n                name='Romeo'>\n            <group>Lovers</group>\n
        \         </item>\n        </query>\n      </iq>\n   The user might want to
        remove the item from all groups.\n   C: <iq from='juliet@example.com/balcony'\n
        \         id='ju4b62a5'\n          type='set'>\n        <query xmlns='jabber:iq:roster'>\n
        \         <item jid='romeo@example.net'/>\n        </query>\n      </iq>\n
        \  The user might also want to change the handle for the item.\n   C: <iq
        from='juliet@example.com/balcony'\n          id='gb3sv487'\n          type='set'>\n
        \       <query xmlns='jabber:iq:roster'>\n          <item jid='romeo@example.net'\n
        \               name='MyRomeo'/>\n        </query>\n      </iq>\n   The user
        might then want to remove the handle altogether.\n   C: <iq from='juliet@example.com/balcony'\n
        \         id='o3bx66s5'\n          type='set'>\n        <query xmlns='jabber:iq:roster'>\n
        \         <item jid='romeo@example.net'\n                name=''/>\n        </query>\n
        \     </iq>\n      Implementation Note: Including an empty 'name' attribute
        is\n      equivalent to including no 'name' attribute; both actions set the\n
        \     name to the empty string.\n"
      title: 2.4.1.  Request
    - contents:
      - "2.4.2.  Success Case\n   As with adding a roster item, if the roster item
        can be successfully\n   processed then the server MUST update the item in
        the user's roster,\n   send a roster push to all of the user's interested
        resources, and\n   send an IQ result to the initiating resource; details are
        provided\n   under Section 2.3.\n"
      title: 2.4.2.  Success Case
    - contents:
      - "2.4.3.  Error Cases\n   The error cases described under Section 2.3.3 also
        apply to updating\n   a roster item.\n"
      title: 2.4.3.  Error Cases
    title: 2.4.  Updating a Roster Item
  - contents:
    - '2.5.  Deleting a Roster Item

      '
    - contents:
      - "2.5.1.  Request\n   At any time, a client can delete an item from his or
        her roster by\n   sending a roster set and specifying a value of \"remove\"
        for the\n   'subscription' attribute.\n   C: <iq from='juliet@example.com/balcony'\n
        \         id='hm4hs97y'\n          type='set'>\n        <query xmlns='jabber:iq:roster'>\n
        \         <item jid='nurse@example.com'\n                subscription='remove'/>\n
        \       </query>\n      </iq>\n"
      title: 2.5.1.  Request
    - contents:
      - "2.5.2.  Success Case\n   As with adding a roster item, if the server can
        successfully process\n   the roster set then it MUST update the item in the
        user's roster,\n   send a roster push to all of the user's interested resources
        (with\n   the 'subscription' attribute set to a value of \"remove\"), and
        send an\n   IQ result to the initiating resource; details are provided under\n
        \  Section 2.3.\n   In addition, the user's server might need to generate
        one or more\n   subscription-related presence stanzas, as follows:\n   1.
        \ If the user has a presence subscription to the contact, then the\n       user's
        server MUST send a presence stanza of type \"unsubscribe\"\n       to the
        contact (in order to unsubscribe from the contact's\n       presence).\n   2.
        \ If the contact has a presence subscription to the user, then the\n       user's
        server MUST send a presence stanza of type \"unsubscribed\"\n       to the
        contact (in order to cancel the contact's subscription to\n       the user).\n
        \  3.  If the presence subscription is mutual, then the user's server\n       MUST
        send both a presence stanza of type \"unsubscribe\" and a\n       presence
        stanza of type \"unsubscribed\" to the contact.\n   S: <presence from='juliet@example.com'\n
        \               id='lm3ba81g'\n                to='nurse@example.com'\n                type='unsubscribe'/>\n
        \  S: <presence from='juliet@example.com'\n                id='xb2c1v4k'\n
        \               to='nurse@example.com'\n                type='unsubscribed'/>\n"
      title: 2.5.2.  Success Case
    - contents:
      - "2.5.3.  Error Cases\n   If the value of the 'jid' attribute specifies an
        item that is not in\n   the roster, then the server MUST return an <item-not-found/>
        stanza\n   error.\n   Error: Roster item not found\n   C: <iq from='juliet@example.com/balcony'\n
        \         id='uj4b1ca8'\n          type='set'>\n        <query xmlns='jabber:iq:roster'>\n
        \         <item jid='[ ... non-existent-jid ... ]'\n                subscription='remove'/>\n
        \       </query>\n      </iq>\n   S: <iq id='uj4b1ca8'\n          to='juliet@example.com/balcony'\n
        \         type='error'>\n        <error type='modify'>\n          <item-not-found\n
        \             xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n        </error>\n
        \     </iq>\n"
      title: 2.5.3.  Error Cases
    title: 2.5.  Deleting a Roster Item
  - contents:
    - '2.6.  Roster Versioning

      '
    - contents:
      - "2.6.1.  Stream Feature\n   If a server supports roster versioning, then it
        MUST advertise the\n   following stream feature during stream negotiation.\n
        \  <ver xmlns='urn:xmpp:features:rosterver'/>\n   The roster versioning stream
        feature is merely informative and\n   therefore is never mandatory-to-negotiate.\n"
      title: 2.6.1.  Stream Feature
    - contents:
      - "2.6.2.  Request\n   If a client supports roster versioning and the server
        to which it has\n   connected advertises support for roster versioning as
        described in\n   the foregoing section, then the client SHOULD include the
        'ver'\n   element in its request for the roster.  If the server does not\n
        \  advertise support for roster versioning, the client MUST NOT include\n
        \  the 'ver' attribute.  If the client includes the 'ver' attribute in\n   its
        roster get, it sets the attribute's value to the version ID\n   associated
        with its last cache of the roster.\n   C: <iq from='romeo@example.net/home'\n
        \         id='r1h3vzp7'\n          to='romeo@example.net'\n          type='get'>\n
        \       <query xmlns='jabber:iq:roster' ver='ver14'/>\n      </iq>\n   If
        the client has not yet cached the roster or the cache is lost or\n   corrupted,
        but the client wishes to bootstrap the use of roster\n   versioning, it MUST
        set the 'ver' attribute to the empty string\n   (i.e., ver=\"\").\n   Naturally,
        if the client does not support roster versioning or does\n   not wish to bootstrap
        the use of roster versioning, it will not\n   include the 'ver' attribute.\n"
      title: 2.6.2.  Request
    - contents:
      - "2.6.3.  Success Case\n   Whether or not the roster has been modified since
        the version ID\n   enumerated by the client, the server MUST either return
        the complete\n   roster as described under Section 2.1.4 (including a 'ver'
        attribute\n   that signals the latest version) or return an empty IQ-result
        (thus\n   indicating that any roster modifications will be sent via roster\n
        \  pushes, as described below).  In general, unless returning the\n   complete
        roster would (1) use less bandwidth than sending individual\n   roster pushes
        to the client (e.g., if the roster contains only a few\n   items) or (2) the
        server cannot associate the version ID with any\n   previous version it has
        on file, the server SHOULD send an empty IQ-\n   result and then send the
        modifications (if any) via roster pushes.\n   S: <iq from='romeo@example.net'\n
        \         id='r1h3vzp7'\n          to='romeo@example.net/home'\n          type='result'/>\n
        \     Implementation Note: This empty IQ-result is different from an\n      empty
        <query/> element, thus disambiguating this usage from an\n      empty roster.\n
        \  If roster versioning is enabled and the roster has not been modified\n
        \  since the version ID enumerated by the client, the server will simply\n
        \  not send any roster pushes to the client (until and unless some\n   relevant
        event triggers a roster push during the lifetime of the\n   client's session).\n
        \  If the roster has been modified since the version ID enumerated by\n   the
        client, the server MUST then send one roster push to the client\n   for each
        roster item that has been modified since the version ID\n   enumerated by
        the client.  (We call a roster push that is sent for\n   purposes of roster
        version synchronization an \"interim roster push\".)\n      Definition: A
        \"roster modification\" is any change to the roster\n      data that would
        result in a roster push to a connected client.\n      Therefore, internal
        states related to roster processing within the\n      server that would not
        result in a roster push to a connected\n      client do not necessitate a
        change to the version.\n   S: <iq from='romeo@example.net'\n          id='ah382g67'\n
        \         to='romeo@example.net/home'\n          type='set'>\n        <query
        xmlns='jabber:iq:roster' ver='ver34'>\n          <item jid='tybalt@example.org'
        subscription='remove'/>\n        </query>\n      </iq>\n   S: <iq from='romeo@example.net'\n
        \         id='b2gs90j5'\n          to='romeo@example.net/home'\n          type='set'>\n
        \       <query xmlns='jabber:iq:roster' ver='ver42'>\n          <item jid='bill@example.org'
        subscription='both'/>\n        </query>\n      </iq>\n   S: <iq from='romeo@example.net'\n
        \         id='c73gs419'\n          to='romeo@example.net/home'\n          type='set'>\n
        \       <query xmlns='jabber:iq:roster' ver='ver72'>\n          <item jid='nurse@example.org'\n
        \               name='Nurse'\n                subscription='to'>\n            <group>Servants</group>\n
        \         </item>\n        </query>\n      </iq>\n   S: <iq from='romeo@example.net'\n
        \         id='dh361f35'\n          to='romeo@example.net/home'\n          type='set'>\n
        \       <query xmlns='jabber:iq:roster' ver='ver96'>\n          <item jid='juliet@example.org'\n
        \               name='Juliet'\n                subscription='both'>\n            <group>VIPs</group>\n
        \         </item>\n        </query>\n      </iq>\n   These \"interim roster
        pushes\" can be understood as follows:\n   1.  Imagine that the client had
        an active presence session for the\n       entire time between its cached
        roster version (say, \"ver14\") and\n       the new roster version (say, \"ver96\").\n
        \  2.  During that time, the client might have received roster pushes\n       related
        to various roster versions (which might have been, say,\n       \"ver51\"
        and \"ver79\").  However, some of those roster pushes might\n       have contained
        intermediate updates to the same roster item\n       (e.g., modifications
        to the subscription state for\n       bill@example.org from \"none\" to \"to\"
        and from \"to\" to \"both\").\n   3.  The interim roster pushes would not
        include all of the\n       intermediate steps, only the final result of all
        modifications\n       applied to each item while the client was in fact offline
        (which\n       might have been, say, \"ver34\", \"ver42\", \"ver72\", and
        \"ver96\").\n   The client MUST handle an \"interim roster push\" in the same
        way it\n   handles any roster push (indeed, from the client's perspective
        it\n   cannot tell the difference between an \"interim\" roster push and a\n
        \  \"live\" roster push and therefore it has no way of knowing when it has\n
        \  received all of the interim roster pushes).  When requesting the\n   roster
        after reconnection, the client SHOULD request the version\n   associated with
        the last roster push it received during its previous\n   session, not the
        version associated with the roster result it\n   received at the start of
        its previous session.\n   When roster versioning is enabled, the server MUST
        include the\n   updated roster version with each roster push.  Roster pushes
        MUST\n   occur in order of modification and the version contained in a roster\n
        \  push MUST be unique.  Even if the client has not included the 'ver'\n   attribute
        in its roster gets or sets, the server SHOULD include the\n   'ver' attribute
        on all roster pushes and results that it sends to the\n   client.\n      Implementation
        Note: Guidelines and more detailed examples for\n      roster versioning are
        provided in [XEP-0237].\n"
      title: 2.6.3.  Success Case
    title: 2.6.  Roster Versioning
  title: 2.  Managing the Roster
- contents:
  - "3.  Managing Presence Subscriptions\n   In order to protect the privacy of XMPP
    users, presence information\n   is disclosed only to other entities that a user
    has approved.  When a\n   user has agreed that another entity is allowed to view
    its presence,\n   the entity is said to have a \"subscription\" to the user's
    presence.\n   An entity that has a subscription to a user's presence or to which
    a\n   user has a presence subscription is called a \"contact\" (in this\n   document
    the term \"contact\" is also used in a less strict sense to\n   refer to a potential
    contact or any item in a user's roster).\n   In XMPP, a subscription lasts across
    presence sessions; indeed, it\n   lasts until the contact unsubscribes or the
    user cancels the\n   previously granted subscription.  (This model is different
    from that\n   used for presence subscriptions in the Session Initiation Protocol\n
    \  (SIP), as defined in [SIP-PRES].)\n   Subscriptions are managed within XMPP
    by sending presence stanzas\n   containing specially defined attributes (\"subscribe\",
    \"unsubscribe\",\n   \"subscribed\", and \"unsubscribed\").\n      Implementation
    Note: When a server processes or generates an\n      outbound presence stanza
    of type \"subscribe\", \"subscribed\",\n      \"unsubscribe\", or \"unsubscribed\",
    the server MUST stamp the\n      outgoing presence stanza with the bare JID <localpart@domainpart>\n
    \     of the sending entity, not the full JID\n      <localpart@domainpart/resourcepart>.
    \ Enforcement of this rule\n      simplifies the presence subscription model and
    helps to prevent\n      presence leaks; for information about presence leaks,
    refer to the\n      security considerations of [XMPP-CORE].\n   Subscription states
    are reflected in the rosters of both the user and\n   the contact.  This section
    does not cover every possible case related\n   to presence subscriptions, and
    mainly narrates the protocol flows for\n   bootstrapping a mutual subscription
    between a user and a contact.\n   Complete details regarding subscription states
    can be found under\n   Appendix A.\n"
  - contents:
    - "3.1.  Requesting a Subscription\n   A \"subscription request\" is a request
      from a user for authorization\n   to permanently subscribe to a contact's presence
      information;\n   syntactically it is a presence stanza whose 'type' attribute
      has a\n   value of \"subscribe\".  A subscription request is generated by a\n
      \  user's client, processed by the (potential) contact's server, and\n   acted
      on by the contact via the contact's client.  The workflow is\n   described in
      the following sections.\n      Implementation Note: Presence subscription requests
      are sent to\n      available resources, whereas the roster pushes associated
      with\n      subscription state changes are sent to interested resources.\n      Therefore,
      if a resource wishes to receive both subscription\n      requests and roster
      pushes, it MUST both send initial presence and\n      request the roster.\n"
    - contents:
      - "3.1.1.  Client Generation of Outbound Subscription Request\n   A user's client
        generates a subscription request by sending a\n   presence stanza of type
        \"subscribe\" and specifying a 'to' address of\n   the potential contact's
        bare JID <contact@domainpart>.\n   UC: <presence id='xk3h1v69'\n                 to='juliet@example.com'\n
        \                type='subscribe'/>\n   When a user sends a presence subscription
        request to a potential\n   instant messaging and presence contact, the value
        of the 'to'\n   attribute MUST be a bare JID <contact@domainpart> rather than
        a full\n   JID <contact@domainpart/resourcepart>, since the desired result
        is\n   for the user to receive presence from all of the contact's resources,\n
        \  not merely the particular resource specified in the 'to' attribute.\n   Use
        of bare JIDs also simplifies subscription processing, presence\n   probes,
        and presence notifications by the user's server and the\n   contact's server.\n
        \  For tracking purposes, a client SHOULD include an 'id' attribute in a\n
        \  presence subscription request.\n      Implementation Note: Many XMPP clients
        prompt the user for\n      information about the potential contact (e.g.,
        \"handle\" and\n      desired roster group) when generating an outbound presence\n
        \     subscription request and therefore send a roster set before\n      sending
        the outbound presence subscription request.  This behavior\n      is OPTIONAL,
        because a client MAY instead wait until receiving the\n      initial roster
        push from the server before uploading user-provided\n      information about
        the contact.  A server MUST process a roster set\n      and outbound presence
        subscription request in either order (i.e.,\n      in whatever order generated
        by the client).\n"
      title: 3.1.1.  Client Generation of Outbound Subscription Request
    - contents:
      - "3.1.2.  Server Processing of Outbound Subscription Request\n   Upon receiving
        the outbound presence subscription request, the user's\n   server MUST proceed
        as follows.\n   1.  Before processing the request, the user's server MUST
        check the\n       syntax of the JID contained in the 'to' attribute (however,
        it is\n       known that some existing implementations do not perform this\n
        \      check).  If the JID is of the form\n       <contact@domainpart/resourcepart>
        instead of\n       <contact@domainpart>, the user's server SHOULD treat it
        as if the\n       request had been directed to the contact's bare JID and
        modify\n       the 'to' address accordingly.  The server MAY also verify that\n
        \      the JID adheres to the format defined in [XMPP-ADDR] and possibly\n
        \      return a <jid-malformed/> stanza error.\n   2.  If the potential contact
        is hosted on the same server as the\n       user, then the server MUST adhere
        to the rules specified under\n       Section 3.1.3 when processing the subscription
        request and\n       delivering it to the (local) contact.\n   3.  If the potential
        contact is hosted on a remote server, subject to\n       local service policies
        the user's server MUST then route the\n       stanza to that remote domain
        in accordance with core XMPP stanza\n       processing rules.  (This can result
        in returning an appropriate\n       stanza error to the user, such as <remote-server-timeout/>.)\n
        \  As mentioned, before locally delivering or remotely routing the\n   presence
        subscription request, the user's server MUST stamp the\n   outbound subscription
        request with the bare JID <user@domainpart> of\n   the user.\n   US: <presence
        from='romeo@example.net'\n                 id='xk3h1v69'\n                 to='juliet@example.com'\n
        \                type='subscribe'/>\n   If the presence subscription request
        cannot be locally delivered or\n   remotely routed (e.g., because the request
        is malformed, the local\n   contact does not exist, the remote server does
        not exist, an attempt\n   to contact the remote server times out, or any other
        error is\n   determined or experienced by the user's server), then the user's\n
        \  server MUST return an appropriate error stanza to the user.  An\n   example
        follows.\n   US: <presence from='juliet@example.com'\n                 id='xk3h1v69'\n
        \                to='romeo@example.net'\n                 type='error'>\n
        \        <error type='modify'>\n           <remote-server-not-found\n               xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n
        \        </error>\n       </presence>\n   After locally delivering or remotely
        routing the presence\n   subscription request, the user's server MUST then
        send a roster push\n   to all of the user's interested resources, containing
        the potential\n   contact with a subscription state of \"none\" and with notation
        that\n   the subscription is pending (via an 'ask' attribute whose value is\n
        \  \"subscribe\").\n   US: <iq id='b89c5r7ib574'\n           to='romeo@example.net/foo'\n
        \          type='set'>\n         <query xmlns='jabber:iq:roster'>\n           <item
        ask='subscribe'\n                 jid='juliet@example.com'\n                 subscription='none'/>\n
        \        </query>\n       </iq>\n   US: <iq id='b89c5r7ib575'\n           to='romeo@example.net/bar'\n
        \          type='set'>\n         <query xmlns='jabber:iq:roster'>\n           <item
        ask='subscribe'\n                 jid='juliet@example.com'\n                 subscription='none'/>\n
        \        </query>\n       </iq>\n   If a remote contact does not approve or
        deny the subscription request\n   within some configurable amount of time,
        the user's server SHOULD\n   resend the subscription request to the contact
        based on an\n   implementation-specific algorithm (e.g., whenever a new resource\n
        \  becomes available for the user, or after a certain amount of time has\n
        \  elapsed); this helps to recover from transient, silent errors that\n   might
        have occurred when the original subscription request was routed\n   to the
        remote domain.  When doing so, it is RECOMMENDED for the\n   server to include
        an 'id' attribute so that it can track responses to\n   the resent subscription
        request.\n"
      title: 3.1.2.  Server Processing of Outbound Subscription Request
    - contents:
      - "3.1.3.  Server Processing of Inbound Subscription Request\n   Before processing
        the inbound presence subscription request, the\n   contact's server SHOULD
        check the syntax of the JID contained in the\n   'to' attribute.  If the JID
        is of the form\n   <contact@domainpart/resourcepart> instead of <contact@domainpart>,\n
        \  the contact's server SHOULD treat it as if the request had been\n   directed
        to the contact's bare JID and modify the 'to' address\n   accordingly.  The
        server MAY also verify that the JID adheres to the\n   format defined in [XMPP-ADDR]
        and possibly return a <jid-malformed/>\n   stanza error.\n   When processing
        the inbound presence subscription request, the\n   contact's server MUST adhere
        to the following rules:\n   1.  Above all, the contact's server MUST NOT automatically
        approve\n       subscription requests on the contact's behalf -- unless the\n
        \      contact has (a) pre-approved subscription requests from the user\n
        \      as described under Section 3.4, (b) configured its account to\n       automatically
        approve subscription requests, or (c) accepted an\n       agreement with its
        service provider that allows automatic\n       approval (for instance, via
        an employment agreement within an\n       enterprise deployment).  Instead,
        if a subscription request\n       requires approval then the contact's server
        MUST deliver that\n       request to the contact's available resource(s) for
        approval or\n       denial by the contact.\n   2.  If the contact exists and
        the user already has a subscription to\n       the contact's presence, then
        the contact's server MUST auto-reply\n       on behalf of the contact by sending
        a presence stanza of type\n       \"subscribed\" from the contact's bare JID
        to the user's bare JID.\n       Likewise, if the contact previously sent a
        presence stanza of\n       type \"subscribed\" and the contact's server treated
        that as\n       indicating \"pre-approval\" for the user's presence subscription\n
        \      (see Section 3.4), then the contact's server SHOULD also auto-\n       reply
        on behalf of the contact.\n   CS: <presence from='juliet@example.com'\n                 id='xk3h1v69'\n
        \                to='romeo@example.net'\n                 type='subscribed'/>\n
        \  3.  Otherwise, if there is at least one available resource associated\n
        \      with the contact when the subscription request is received by the\n
        \      contact's server, then the contact's server MUST send that\n       subscription
        request to all available resources in accordance\n       with Section 8.  As
        a way of acknowledging receipt of the\n       presence subscription request,
        the contact's server MAY send a\n       presence stanza of type \"unavailable\"
        from the bare JID of the\n       contact to the bare JID of the user (the
        user's client MUST NOT\n       assume that this acknowledgement provides presence
        information\n       about the contact, since it comes from the contact's bare
        JID and\n       is received before the subscription request has been approved).\n
        \  4.  Otherwise, if the contact has no available resources when the\n       subscription
        request is received by the contact's server, then\n       the contact's server
        MUST keep a record of the complete presence\n       stanza comprising the
        subscription request, including any\n       extended content contained therein
        (see Section 8.4 of\n       [XMPP-CORE]), and then deliver the request when
        the contact next\n       has an available resource.  The contact's server
        MUST continue to\n       deliver the subscription request whenever the contact
        creates an\n       available resource, until the contact either approves or
        denies\n       the request.  (The contact's server MUST NOT deliver more than\n
        \      one subscription request from any given user when the contact\n       next
        has an available resource; e.g., if the user sends multiple\n       subscription
        requests to the contact while the contact is\n       offline, the contact's
        server SHOULD store only one of those\n       requests, such as the first
        request or last request, and MUST\n       deliver only one of the requests
        when the contact next has an\n       available resource; this helps to prevent
        \"subscription request\n       spam\".)\n      Security Warning: Until and
        unless the contact approves the\n      subscription request as described under
        Section 3.1.4, the\n      contact's server MUST NOT add an item for the user
        to the\n      contact's roster.\n      Security Warning: The mandate for the
        contact's server to store\n      the complete stanza of the presence subscription
        request\n      introduces the possibility of an application resource exhaustion\n
        \     attack (see Section 2.1.2 of [DOS]), for example, by a rogue\n      server
        or a coordinated group of users (e.g., a botnet) against\n      the contact's
        server or particular contact.  Server implementers\n      are advised to consider
        the possibility of such attacks and\n      provide tools for counteracting
        it, such as enabling service\n      administrators to set limits on the number
        or size of inbound\n      presence subscription requests that the server will
        store in\n      aggregate or for any given contact.\n"
      title: 3.1.3.  Server Processing of Inbound Subscription Request
    - contents:
      - "3.1.4.  Client Processing of Inbound Subscription Request\n   When an interactive
        client receives a subscription request, it MUST\n   present the request to
        the natural person controlling the client\n   (i.e., the \"contact\") for
        approval, unless the contact has explicitly\n   configured the client to automatically
        approve or deny some or all\n   subscription requests as described above.
        \ An automated client that\n   is not controlled by a natural person will
        have its own application-\n   specific rules for approving or denying subscription
        requests.\n   A client approves a subscription request by sending a presence
        stanza\n   of type \"subscribed\", which is processed as described under\n
        \  Section 3.1.5 for the contact's server and Section 3.1.6 for the\n   user's
        server.\n   CC: <presence id='h4v1c4kj'\n                 to='romeo@example.net'\n
        \                type='subscribed'/>\n   A client denies a subscription request
        by sending a presence stanza\n   of type \"unsubscribed\", which is processed
        as described under\n   Section 3.2 for both the contact's server and the user's
        server.\n   CC: <presence id='tb2m1b59'\n                 to='romeo@example.net'\n
        \                type='unsubscribed'/>\n   For tracking purposes, a client
        SHOULD include an 'id' attribute in a\n   subscription approval or subscription
        denial; this 'id' attribute\n   MUST NOT mirror the 'id' attribute of the
        subscription request.\n"
      title: 3.1.4.  Client Processing of Inbound Subscription Request
    - contents:
      - "3.1.5.  Server Processing of Outbound Subscription Approval\n   When the
        contact's client sends the subscription approval, the\n   contact's server
        MUST stamp the outbound stanza with the bare JID\n   <contact@domainpart>
        of the contact and locally deliver or remotely\n   route the stanza to the
        user.\n   CS: <presence from='juliet@example.com'\n                 id='h4v1c4kj'\n
        \                to='romeo@example.net'\n                 type='subscribed'/>\n
        \  The contact's server then MUST send an updated roster push to all of\n
        \  the contact's interested resources, with the 'subscription' attribute\n
        \  set to a value of \"from\".  (Here we assume that the contact does not\n
        \  already have a subscription to the user; if that were the case, the\n   'subscription'
        attribute would be set to a value of \"both\", as\n   explained under Appendix
        A.)\n   CS: <iq id='a78b4q6ha463'\n           to='juliet@example.com/balcony'\n
        \          type='set'>\n         <query xmlns='jabber:iq:roster'>\n           <item
        jid='romeo@example.net'\n                 subscription='from'/>\n         </query>\n
        \      </iq>\n   CS: <iq id='x81g3bdy4n19'\n           to='juliet@example.com/chamber'\n
        \          type='set'>\n         <query xmlns='jabber:iq:roster'>\n           <item
        jid='romeo@example.net'\n                 subscription='from'/>\n         </query>\n
        \      </iq>\n   From the perspective of the contact, there now exists a subscription\n
        \  from the user, which is why the 'subscription' attribute is set to a\n
        \  value of \"from\".  (Here we assume that the contact does not already\n
        \  have a subscription to the user; if that were the case, the\n   'subscription'
        attribute would be set to a value of \"both\", as\n   explained under Appendix
        A.)\n   The contact's server MUST then also send current presence to the user\n
        \  from each of the contact's available resources.\n   CS: <presence from='juliet@example.com/balcony'\n
        \                id='pw72bc5j'\n                 to='romeo@example.net'/>\n
        \  CS: <presence from='juliet@example.com/chamber'\n                 id='ux31da4q'\n
        \                to='romeo@example.net'/>\n   In order to subscribe to the
        user's presence, the contact would then\n   need to send a subscription request
        to the user.  (XMPP clients will\n   often automatically send the subscription
        request instead of\n   requiring the contact to initiate the subscription
        request, since it\n   is assumed that the desired end state is a mutual subscription.)\n
        \  Naturally, when the contact sends a subscription request to the user,\n
        \  the subscription states will be different from those shown in the\n   foregoing
        examples (see Appendix A) and the roles will be reversed.\n"
      title: 3.1.5.  Server Processing of Outbound Subscription Approval
    - contents:
      - "3.1.6.  Server Processing of Inbound Subscription Approval\n   When the user's
        server receives a subscription approval, it MUST\n   first check if the contact
        is in the user's roster with\n   subscription='none' or subscription='from'
        and the 'ask' flag set to\n   \"subscribe\" (i.e., a subscription state of
        \"None + Pending Out\",\n   \"None + Pending Out+In\", or \"From + Pending
        Out\"; see Appendix A).\n   If this check is successful, then the user's server
        MUST:\n   1.  Deliver the inbound subscription approval to all of the user's\n
        \      interested resources (this helps to give the user's client(s)\n       proper
        context regarding the subscription approval so that they\n       can differentiate
        between a roster push originated by another of\n       the user's resources
        and a subscription approval received from\n       the contact).  This MUST
        occur before sending the roster push\n       described in the next step.\n
        \  US: <presence from='juliet@example.com'\n                 id='h4v1c4kj'\n
        \                to='romeo@example.net'\n                 type='subscribed'/>\n
        \  2.  Initiate a roster push to all of the user's interested resources,\n
        \      containing an updated roster item for the contact with the\n       'subscription'
        attribute set to a value of \"to\" (if the\n       subscription state was
        \"None + Pending Out\" or \"None + Pending\n       Out+In\") or \"both\" (if
        the subscription state was \"From + Pending\n       Out\").\n   US: <iq id='b89c5r7ib576'\n
        \          to='romeo@example.net/foo'\n           type='set'>\n         <query
        xmlns='jabber:iq:roster'>\n           <item jid='juliet@example.com'\n                 subscription='to'/>\n
        \        </query>\n       </iq>\n   US: <iq id='b89c5r7ib577'\n           to='romeo@example.net/bar'\n
        \          type='set'>\n         <query xmlns='jabber:iq:roster'>\n           <item
        jid='juliet@example.com'\n                 subscription='to'/>\n         </query>\n
        \      </iq>\n   3.  The user's server MUST also deliver the available presence
        stanza\n       received from each of the contact's available resources to
        each\n       of the user's available resources.\n   [ ... to resource1 ...
        ]\n   US: <presence from='juliet@example.com/balcony'\n                 id='pw72bc5j'\n
        \                to='romeo@example.net'/>\n   [ ... to resource2 ... ]\n   US:
        <presence from='juliet@example.com/balcony'\n                 id='pw72bc5j'\n
        \                to='romeo@example.net'/>\n   [ ... to resource1 ... ]\n   US:
        <presence from='juliet@example.com/chamber'\n                 id='ux31da4q'\n
        \                to='romeo@example.net'/>\n   [ ... to resource2 ... ]\n   US:
        <presence from='juliet@example.com/chamber'\n                 id='ux31da4q'\n
        \                to='romeo@example.net'/>\n      Implementation Note: If the
        user's account has no available\n      resources when the inbound subscription
        approval notification is\n      received, the user's server MAY keep a record
        of the notification\n      (ideally the complete presence stanza) and then
        deliver the\n      notification when the account next has an available resource.\n
        \     This behavior provides more complete signaling to the user\n      regarding
        the reasons for the roster change that occurred while\n      the user was
        offline.\n   Otherwise -- that is, if the user does not exist, if the contact
        is\n   not in the user's roster, or if the contact is in the user's roster\n
        \  with a subscription state other than those described in the foregoing\n
        \  check -- then the user's server MUST silently ignore the subscription\n
        \  approval notification by not delivering it to the user, not modifying\n
        \  the user's roster, and not generating a roster push to the user's\n   interested
        resources.\n   From the perspective of the user, there now exists a subscription
        to\n   the contact's presence (which is why the 'subscription' attribute is\n
        \  set to a value of \"to\").\n"
      title: 3.1.6.  Server Processing of Inbound Subscription Approval
    title: 3.1.  Requesting a Subscription
  - contents:
    - '3.2.  Canceling a Subscription

      '
    - contents:
      - "3.2.1.  Client Generation of Subscription Cancellation\n   If a contact would
        like to cancel a subscription that it has\n   previously granted to a user,
        to cancel a subscription pre-approval\n   (Section 3.4), or to deny a subscription
        request, it sends a presence\n   stanza of type \"unsubscribed\".\n   CC:
        <presence id='ij5b1v7g'\n                 to='romeo@example.net'\n                 type='unsubscribed'/>\n"
      title: 3.2.1.  Client Generation of Subscription Cancellation
    - contents:
      - "3.2.2.  Server Processing of Outbound Subscription Cancellation\n   Upon
        receiving the outbound subscription cancellation, the contact's\n   server
        MUST proceed as follows.\n   1.  If the user's bare JID is not yet in the
        contact's roster or is\n       in the contact's roster with a state of \"None\",
        \"None + Pending\n       Out\", or \"To\", the contact's server SHOULD NOT
        route or deliver\n       the presence stanza of type \"unsubscribed\" to the
        user and MUST\n       NOT send presence notifications of type \"unavailable\"
        to the user\n       as described below.\n   2.  If the user's bare JID is
        in the contact's roster with a state of\n       \"None\", \"None + Pending
        Out\", or \"To\" and the 'approved' flag is\n       set to \"true\" (thus
        signaling a subscription pre-approval as\n       described under Section 3.4),
        the contact's server MUST remove\n       the pre-approval and MUST NOT route
        or deliver the presence\n       stanza of type \"unsubscribed\" to the user.\n
        \  3.  Otherwise, as shown in the following examples, the contact's\n       server
        MUST route or deliver both presence notifications of type\n       \"unavailable\"
        and presence stanzas of type \"unsubscribed\" to the\n       user and MUST
        send a roster push to the contact.\n   While the user is still subscribed
        to the contact's presence (i.e.,\n   before the contact's server routes or
        delivers the presence stanza of\n   type \"unsubscribed\" to the user), the
        contact's server MUST send a\n   presence stanza of type \"unavailable\" from
        all of the contact's\n   online resources to the user.\n   CS: <presence from='juliet@example.com/balcony'\n
        \                id='i8bsg3h3'\n                 type='unavailable'/>\n   CS:
        <presence from='juliet@example.com/chamber'\n                 id='bvx2c9mk'\n
        \                type='unavailable'/>\n   Then the contact's server MUST route
        or deliver the presence stanza\n   of type \"unsubscribed\" to the user, making
        sure to stamp the outbound\n   subscription cancellation with the bare JID
        <contact@domainpart> of\n   the contact.\n   CS: <presence from='juliet@example.com'\n
        \                id='ij5b1v7g'\n                 to='romeo@example.net'\n
        \                type='unsubscribed'/>\n   The contact's server then MUST
        send a roster push with the updated\n   roster item to all of the contact's
        interested resources, where the\n   subscription state is now either \"none\"
        or \"to\" (see Appendix A).\n   CS: <iq id='pw3f2v175b34'\n           to='juliet@example.com/balcony'\n
        \          type='set'>\n         <query xmlns='jabber:iq:roster'>\n           <item
        jid='romeo@example.net'\n                 subscription='none'/>\n         </query>\n
        \      </iq>\n   CS: <iq id='zu2y3f571v35'\n           to='juliet@example.com/chamber'\n
        \          type='set'>\n         <query xmlns='jabber:iq:roster'>\n           <item
        jid='romeo@example.net'\n                 subscription='none'/>\n         </query>\n
        \      </iq>\n"
      title: 3.2.2.  Server Processing of Outbound Subscription Cancellation
    - contents:
      - "3.2.3.  Server Processing of Inbound Subscription Cancellation\n   When the
        user's server receives the inbound subscription\n   cancellation, it MUST
        first check if the contact is in the user's\n   roster with subscription='to'
        or subscription='both' (see\n   Appendix A).  If this check is successful,
        then the user's server\n   MUST:\n   1.  Deliver the inbound subscription
        cancellation to all of the\n       user's interested resources (this helps
        to give the user's\n       client(s) proper context regarding the subscription
        cancellation\n       so that they can differentiate between a roster push
        originated\n       by another of the user's resources and a subscription\n
        \      cancellation received from the contact).  This MUST occur before\n
        \      sending the roster push described in the next step.\n   US: <presence
        from='juliet@example.com'\n                 id='ij5b1v7g'\n                 to='romeo@example.net'\n
        \                type='unsubscribed'/>\n   2.  Initiate a roster push to all
        of the user's interested resources,\n       containing an updated roster item
        for the contact with the\n       'subscription' attribute set to a value of
        \"none\" (if the\n       subscription state was \"To\" or \"To + Pending In\")
        or \"from\" (if\n       the subscription state was \"Both\").\n   US: <iq
        id='h37h3u1bv400'\n           to='romeo@example.net/foo'\n           type='set'>\n
        \        <query xmlns='jabber:iq:roster'>\n           <item jid='juliet@example.com'\n
        \                subscription='none'/>\n         </query>\n       </iq>\n
        \  US: <iq id='h37h3u1bv401'\n           to='romeo@example.net/bar'\n           type='set'>\n
        \        <query xmlns='jabber:iq:roster'>\n           <item jid='juliet@example.com'\n
        \                subscription='none'/>\n         </query>\n       </iq>\n
        \  The user's server MUST also deliver the inbound presence stanzas of\n   type
        \"unavailable\".\n      Implementation Note: If the user's account has no
        available\n      resources when the inbound unsubscribed notification is received,\n
        \     the user's server MAY keep a record of the notification (ideally\n      the
        complete presence stanza) and then deliver the notification\n      when the
        account next has an available resource.  This behavior\n      provides more
        complete signaling to the user regarding the reasons\n      for the roster
        change that occurred while the user was offline.\n   Otherwise -- that is,
        if the user does not exist, if the contact is\n   not in the user's roster,
        or if the contact is in the user's roster\n   with a subscription state other
        than those described in the foregoing\n   check -- then the user's server
        MUST silently ignore the unsubscribed\n   notification by not delivering it
        to the user, not modifying the\n   user's roster, and not generating a roster
        push to the user's\n   interested resources.\n"
      title: 3.2.3.  Server Processing of Inbound Subscription Cancellation
    title: 3.2.  Canceling a Subscription
  - contents:
    - '3.3.  Unsubscribing

      '
    - contents:
      - "3.3.1.  Client Generation of Unsubscribe\n   If a user would like to unsubscribe
        from a contact's presence, it\n   sends a presence stanza of type \"unsubscribe\".\n
        \  UC: <presence id='ul4bs71n'\n                 to='juliet@example.com'\n
        \                type='unsubscribe'/>\n"
      title: 3.3.1.  Client Generation of Unsubscribe
    - contents:
      - "3.3.2.  Server Processing of Outbound Unsubscribe\n   Upon receiving the
        outbound unsubscribe, the user's server MUST\n   proceed as follows.\n   1.
        \ If the contact is hosted on the same server as the user, then the\n       server
        MUST adhere to the rules specified under Section 3.3.3\n       when processing
        the subscription request.\n   2.  If the contact is hosted on a remote server,
        subject to local\n       service policies the user's server MUST then route
        the stanza to\n       that remote domain in accordance with core XMPP stanza
        processing\n       rules.  (This can result in returning an appropriate stanza
        error\n       to the user, such as <remote-server-timeout/>.)\n   As mentioned,
        before locally delivering or remotely routing the\n   unsubscribe, the user's
        server MUST stamp the stanza with the bare\n   JID <user@domainpart> of the
        user.\n   US: <presence from='romeo@example.net'\n                 id='ul4bs71n'\n
        \                to='juliet@example.com'\n                 type='unsubscribe'/>\n
        \  The user's server then MUST send a roster push with the updated\n   roster
        item to all of the user's interested resources, where the\n   subscription
        state is now either \"none\" or \"from\" (see Appendix A).\n   US: <iq id='h37h3u1bv402'\n
        \          to='romeo@example.net/foo'\n           type='set'>\n         <query
        xmlns='jabber:iq:roster'>\n           <item jid='juliet@example.com'\n                 subscription='none'/>\n
        \        </query>\n       </iq>\n   US: <iq to='romeo@example.net/bar'\n           type='set'\n
        \          id='h37h3u1bv403'>\n         <query xmlns='jabber:iq:roster'>\n
        \          <item jid='juliet@example.com'\n                 subscription='none'/>\n
        \        </query>\n       </iq>\n"
      title: 3.3.2.  Server Processing of Outbound Unsubscribe
    - contents:
      - "3.3.3.  Server Processing of Inbound Unsubscribe\n   When the contact's server
        receives the unsubscribe notification, it\n   MUST first check if the user's
        bare JID is in the contact's roster\n   with subscription='from' or subscription='both'
        (i.e., a subscription\n   state of \"From\", \"From + Pending Out\", or \"Both\";
        see Appendix A).\n   If this check is successful, then the contact's server
        MUST:\n   1.  Deliver the inbound unsubscribe to all of the contact's\n       interested
        resources (this helps to give the contact's client(s)\n       proper context
        regarding the unsubscribe so that they can\n       differentiate between a
        roster push originated by another of the\n       contact's resources and an
        unsubscribe received from the user).\n       This MUST occur before sending
        the roster push described in the\n       next step.\n   CS: <presence from='romeo@example.net'\n
        \                id='ul4bs71n'\n                 to='juliet@example.com'\n
        \                type='unsubscribe'/>\n   2.  Initiate a roster push to all
        of the contact's interested\n       resources, containing an updated roster
        item for the user with\n       the 'subscription' attribute set to a value
        of \"none\" (if the\n       subscription state was \"From\" or \"From + Pending
        Out\") or \"to\"\n       (if the subscription state was \"Both\").\n   CS:
        <iq id='tn2b5893g1s4'\n           to='juliet@example.com/balcony'\n           type='set'>\n
        \        <query xmlns='jabber:iq:roster'>\n           <item jid='romeo@example.net'\n
        \                subscription='none'/>\n         </query>\n       </iq>\n
        \  CS: <iq id='sp3b56n27hrp'\n           to='juliet@example.com/chamber'\n
        \          type='set'>\n         <query xmlns='jabber:iq:roster'>\n           <item
        jid='romeo@example.net'\n                 subscription='none'/>\n         </query>\n
        \      </iq>\n   3.  Generate an outbound presence stanza of type \"unavailable\"
        from\n       each of the contact's available resources to the user.\n   CS:
        <presence from='juliet@example.com/balcony'\n                 id='o5v91w49'\n
        \                to='romeo@example.net'\n                 type='unavailable'/>\n
        \  CS: <presence from='juliet@example.com/chamber'\n                 id='n6b1c37k'\n
        \                to='romeo@example.net'\n                 type='unavailable'/>\n
        \     Implementation Note: If the contact's account has no available\n      resources
        when the inbound unsubscribe notification is received,\n      the contact's
        server MAY keep a record of the notification\n      (ideally the complete
        presence stanza) and then deliver the\n      notification when the account
        next has an available resource.\n      This behavior provides more complete
        signaling to the user\n      regarding the reasons for the roster change that
        occurred while\n      the user was offline.\n   Otherwise -- that is, if the
        contact does not exist, if the user is\n   not in the contact's roster, or
        if the user's bare JID is in the\n   contact's roster with a subscription
        state other than those described\n   in the foregoing check -- then the contact's
        server MUST silently\n   ignore the unsubscribe stanza by not delivering it
        to the contact,\n   not modifying the contact's roster, and not generating
        a roster push\n   to the contact's interested resources.  However, if the
        contact's\n   server is keeping track of an inbound presence subscription
        request\n   from the user to the contact but the user is not yet in the contact's\n
        \  roster (functionally equivalent to a subscription state of \"None +\n   Pending
        In\" where the contact never added the user to the contact's\n   roster),
        then the contact's server MUST simply remove any record of\n   the inbound
        presence subscription request (it cannot remove the user\n   from the contact's
        roster because the user was never added to the\n   contact's roster).\n      Implementation
        Note: The user's client MUST NOT depend on\n      receiving the unavailable
        presence notification from the contact,\n      since it MUST consider its
        presence subscription to the contact,\n      and its presence information
        about the contact, to be null and\n      void when it sends the presence stanza
        of type \"unsubscribe\" or\n      when it receives the roster push triggered
        by the unsubscribe\n      request.\n"
      title: 3.3.3.  Server Processing of Inbound Unsubscribe
    title: 3.3.  Unsubscribing
  - contents:
    - "3.4.  Pre-Approving a Subscription Request\n   If a user has not received a
      subscription request from a contact, the\n   user can \"pre-approve\" such a
      request so that it will be\n   automatically approved by the user's server.\n
      \  Support for subscription pre-approvals is OPTIONAL on the part of\n   clients
      and servers.  If a server supports subscription pre-\n   approvals, then it
      MUST advertise the following stream feature during\n   stream negotiation.\n
      \  <sub xmlns='urn:xmpp:features:pre-approval'/>\n   The subscription pre-approval
      stream feature is merely informative\n   and therefore is never mandatory-to-negotiate.\n"
    - contents:
      - "3.4.1.  Client Generation of Subscription Pre-Approval\n   If the server
        to which a client connects has advertised support for\n   subscription pre-approvals,
        the client MAY generate a subscription\n   pre-approval by sending a presence
        stanza of type \"subscribed\" to the\n   contact.\n   UC: <presence id='pg81vx64'\n
        \                to='juliet@example.com'\n                 type='subscribed'/>\n
        \  If the server does not advertise support for subscription pre-\n   approvals,
        the client MUST NOT attempt to pre-approve subscription\n   requests from
        potential or actual contacts.\n"
      title: 3.4.1.  Client Generation of Subscription Pre-Approval
    - contents:
      - "3.4.2.  Server Processing of Subscription Pre-Approval\n   Upon receiving
        the presence stanza of type \"subscribed\", the user's\n   server MUST proceed
        as follows if it supports subscription pre-\n   approvals.\n   1.  If the
        contact is in the user's roster with a state of \"Both\",\n       \"From\",
        or \"From + Pending Out\", the user's server MUST silently\n       ignore
        the stanza.\n   2.  If the contact is in the user's roster with a state of
        \"To +\n       Pending In\", \"None + Pending In\", or \"None + Pending Out+In\",
        the\n       user's server MUST handle the stanza as a normal subscription\n
        \      approval (see under Section 3.1.5) by updating the existing\n       roster
        item to a state of \"Both\", \"From\", or \"From + Pending Out\"\n       (respectively),
        pushing the modified roster item to all of the\n       user's interested resources,
        and routing the presence stanza of\n       type \"subscribed\" to the contact.\n
        \  3.  If the contact is in the user's roster with a state of \"To\",\n       \"None\",
        or \"None + Pending Out\", the user's server MUST note the\n       subscription
        pre-approval by setting the 'approved' flag to a\n       value of \"true\",
        then push the modified roster item to all of the\n       user's interested
        resources.  However, the user's server MUST NOT\n       route the presence
        stanza of type \"subscribed\" to the contact.\n   4.  If the contact is not
        yet in the user's roster, the user's server\n       MUST create a roster item
        for the contact with a state of \"None\"\n       and set the 'approved' flag
        to a value of \"true\", then push the\n       roster item to all of the user's
        interested resources.  However,\n       the user's server MUST NOT route the
        presence stanza of type\n       \"subscribed\" to the contact.\n   An example
        of the roster push follows.\n   US: <iq id='h3bs81vs763f'\n           to='romeo@example.net/bar'\n
        \          type='set'>\n         <query xmlns='jabber:iq:roster'>\n           <item
        approved='true'\n                 jid='juliet@example.com'\n                 subscription='none'/>\n
        \        </query>\n       </iq>\n   When the 'approved' flag is set to \"true\",
        the user's server MUST NOT\n   deliver a presence stanza of type \"subscribe\"
        from the contact to the\n   user, but instead MUST automatically respond to
        such a stanza on\n   behalf of the user by returning a presence stanza of
        type\n   \"subscribed\" from the bare JID of the user to the bare JID of the\n
        \  contact.\n      Implementation Note: It is a matter of implementation or
        local\n      service policy whether the server maintains a record of the\n
        \     subscription approval after it has received a presence\n      subscription
        request from the contact.  If the server does not\n      maintain such a record,
        upon receiving the subscription request it\n      will not include the 'approved'
        attribute in the roster item for\n      the contact (i.e., in subsequent roster
        pushes and roster\n      results).  If the server maintains such a record,
        it will always\n      include the 'approved' attribute (set to \"true\") in
        the roster\n      item for the contact, until and unless the user sends a
        presence\n      stanza of type \"unsubscribed\" to the contact (or removes
        the\n      contact from the roster entirely).\n      Implementation Note:
        A client can cancel a pre-approval by sending\n      a presence stanza of
        type \"unsubscribed\", as described more fully\n      under Section 3.2.  In
        this case, the user's server would send a\n      roster push to all of the
        user's interested resources with the\n      'approved' attribute removed.
        \ (Alternatively, the client can\n      simply remove the roster item entirely.)\n"
      title: 3.4.2.  Server Processing of Subscription Pre-Approval
    title: 3.4.  Pre-Approving a Subscription Request
  title: 3.  Managing Presence Subscriptions
- contents:
  - '4.  Exchanging Presence Information

    '
  - contents:
    - "4.1.  Presence Fundamentals\n   The concept of presence refers to an entity's
      availability for\n   communication over a network.  At the most basic level,
      presence is a\n   boolean \"on/off\" variable that signals whether an entity
      is available\n   or unavailable for communication (the terms \"online\" and
      \"offline\"\n   are also used).  In XMPP, an entity's availability is signaled
      when\n   its client generates a <presence/> stanza with no 'type' attribute,\n
      \  and an entity's lack of availability is signaled when its client\n   generates
      a <presence/> stanza whose 'type' attribute has a value of\n   \"unavailable\".\n
      \  XMPP presence typically follows a \"publish-subscribe\" or \"observer\"\n
      \  pattern, wherein an entity sends presence to its server, and its\n   server
      then broadcasts that information to all of the entity's\n   contacts who have
      a subscription to the entity's presence (in the\n   terminology of [IMP-MODEL],
      an entity that generates presence is a\n   \"presentity\" and the entities that
      receive presence are\n   \"subscribers\").  A client generates presence for
      broadcast to all\n   subscribed entities by sending a presence stanza to its
      server with\n   no 'to' address, where the presence stanza has either no 'type'\n
      \  attribute or a 'type' attribute whose value is \"unavailable\".  This\n   kind
      of presence is called \"broadcast presence\".  (A client can also\n   send \"directed
      presence\", i.e., a presence stanza with a 'to'\n   address; this is less common
      but is sometimes used to send presence\n   to entities that are not subscribed
      to the user's presence; see\n   Section 4.6.)\n   After a client completes the
      preconditions specified in [XMPP-CORE],\n   it can establish a \"presence session\"
      at its server by sending\n   initial presence (Section 4.2), where the presence
      session is\n   terminated by sending unavailable presence (Section 4.5).  For
      the\n   duration of its presence session, a connected resource (in the\n   terminology
      of [XMPP-CORE]) is said to be an \"available resource\".\n   In XMPP, applications
      that combine messaging and presence\n   functionality, the default type of communication
      for which presence\n   signals availability is messaging; however, it is not
      necessary for\n   XMPP applications to combine messaging and presence functionality,\n
      \  and they can provide standalone presence features without messaging\n   (in
      addition, XMPP servers do not require information about network\n   availability
      in order to successfully route message and IQ stanzas).\n      Informational
      Note: In the examples that follow, the user is\n      <juliet@example.com>,
      she has two available resources (\"balcony\"\n      and \"chamber\"), and she
      has three contacts in her roster with a\n      subscription state of \"from\"
      or \"both\": <romeo@example.net>,\n      <mercutio@example.com>, and <benvolio@example.net>.\n"
    title: 4.1.  Presence Fundamentals
  - contents:
    - '4.2.  Initial Presence

      '
    - contents:
      - "4.2.1.  Client Generation of Initial Presence\n   After completing the preconditions
        described in [XMPP-CORE]\n   (REQUIRED) and requesting the roster (RECOMMENDED),
        a client signals\n   its availability for communication by sending \"initial
        presence\" to\n   its server, i.e., a presence stanza with no 'to' address
        (indicating\n   that it is meant to be broadcast by the server on behalf of
        the\n   client) and no 'type' attribute (indicating the user's availability).\n
        \  UC: <presence/>\n   The initial presence stanza MAY contain the <priority/>
        element, the\n   <show/> element, and one or more instances of the <status/>
        element,\n   as well as extended content; details are provided under Section
        4.7.\n"
      title: 4.2.1.  Client Generation of Initial Presence
    - contents:
      - "4.2.2.  Server Processing of Outbound Initial Presence\n   Upon receiving
        initial presence from a client, the user's server MUST\n   send the initial
        presence stanza from the full JID\n   <user@domainpart/resourcepart> of the
        user to all contacts that are\n   subscribed to the user's presence; such
        contacts are those for which\n   a JID is present in the user's roster with
        the 'subscription'\n   attribute set to a value of \"from\" or \"both\".\n
        \  US: <presence from='juliet@example.com/balcony'\n                 to='romeo@example.net'/>\n
        \  US: <presence from='juliet@example.com/balcony'\n                 to='mercutio@example.com'/>\n
        \  US: <presence from='juliet@example.com/balcony'\n                 to='benvolio@example.net'/>\n
        \  The user's server MUST also broadcast initial presence from the\n   user's
        newly available resource to all of the user's available\n   resources, including
        the resource that generated the presence\n   notification in the first place
        (i.e., an entity is implicitly\n   subscribed to its own presence).\n   [...
        to the \"balcony\" resource ...]\n   US: <presence from='juliet@example.com/balcony'\n
        \                to='juliet@example.com'/>\n   [... to the \"chamber\" resource
        ...]\n   US: <presence from='juliet@example.com/balcony'\n                 to='juliet@example.com'/>\n
        \  In the absence of presence information about the user's contacts, the\n
        \  user's server MUST also send presence probes to the user's contacts\n   on
        behalf of the user as specified under Section 4.3.\n"
      title: 4.2.2.  Server Processing of Outbound Initial Presence
    - contents:
      - "4.2.3.  Server Processing of Inbound Initial Presence\n   Upon receiving
        presence from the user, the contact's server MUST\n   deliver the user's presence
        stanza to all of the contact's available\n   resources.\n   [ ... to resource1
        ... ]\n   CS: <presence from='juliet@example.com/balcony'\n                 to='romeo@example.net'/>\n
        \  [ ... to resource2 ... ]\n   CS: <presence from='juliet@example.com/balcony'\n
        \                to='romeo@example.net'/>\n"
      title: 4.2.3.  Server Processing of Inbound Initial Presence
    - contents:
      - "4.2.4.  Client Processing of Initial Presence\n   When the contact's client
        receives presence from the user, the\n   following behavior is suggested for
        interactive clients:\n   1.  If the user's bare JID is in the contact's roster,
        display the\n       presence information in an appropriate roster interface.\n
        \  2.  If the user is not in the contact's roster but the contact and\n       the
        user are actively exchanging message or IQ stanzas, display\n       the presence
        information in the user interface for that\n       communication session (see
        also Section 4.6 and Section 5.1).\n   3.  Otherwise, ignore the presence
        information and do not display it\n       to the contact.\n"
      title: 4.2.4.  Client Processing of Initial Presence
    title: 4.2.  Initial Presence
  - contents:
    - "4.3.  Presence Probes\n   A \"presence probe\" is a request for a contact's
      current presence\n   information, sent on behalf of a user by the user's server;\n
      \  syntactically it is a presence stanza whose 'type' attribute has a\n   value
      of \"probe\".  In the context of presence subscriptions, the\n   value of the
      'from' address MUST be the bare JID of the subscribed\n   user and the value
      of the 'to' address MUST be the bare JID of the\n   contact to which the user
      is subscribed, since presence subscriptions\n   are based on the bare JID.\n
      \  US: <presence from='juliet@example.com'\n                 id='ign291v5'\n
      \                to='romeo@example.net'\n                 type='probe'/>\n      Interoperability
      Note: RFC 3921 specified that probes are sent\n      from the full JID, not
      the bare JID (a rule that was changed\n      because subscriptions are based
      on the bare JID).  Some existing\n      implementations send from the full JID
      instead of the bare JID.\n   Probes can also be sent by an entity that has received
      presence\n   outside the context of a presence subscription, typically when
      the\n   contact has sent directed presence as described under Section 4.6; in\n
      \  this case the value of the 'from' or 'to' address can be a full JID\n   instead
      of a bare JID.  See Section 4.6 for a complete discussion.\n   Presence probes
      SHOULD NOT be sent by a client, because in general a\n   client will not need
      to send them since the task of gathering\n   presence from a user's contacts
      is managed by the user's server.\n   However, if a user's client generates an
      outbound presence probe then\n   the user's server SHOULD route the probe (if
      the contact is at\n   another server) or process the probe (if the contact is
      at the same\n   server) and MUST NOT use its receipt of the presence probe from
      a\n   connected client as the sole cause for returning a stanza or stream\n
      \  error to the client.\n"
    - contents:
      - "4.3.1.  Server Generation of Outbound Presence Probe\n   When a server needs
        to discover the availability of a user's contact,\n   it sends a presence
        probe from the bare JID <user@domainpart> of the\n   user to the bare JID
        <contact@domainpart> of the contact.\n      Implementation Note: Although
        presence probes are intended for\n      sending to contacts (i.e., entities
        to which a user is\n      subscribed), a server MAY send a presence probe
        to the full JID of\n      an entity from which the user has received presence
        information\n      during the current session.\n   The user's server SHOULD
        send a presence probe whenever the user\n   starts a new presence session
        by sending initial presence; however,\n   the server MAY choose not to send
        the probe at that point if it has\n   what it deems to be reliable and up-to-date
        presence information\n   about the user's contacts (e.g., because the user
        has another\n   available resource or because the user briefly logged off
        and on\n   before the new presence session began).  In addition, a server
        MAY\n   periodically send a presence probe to a contact if it has not\n   received
        presence information or other traffic from the contact in\n   some configurable
        amount of time; this can help to prevent \"ghost\"\n   contacts who appear
        to be online but in fact are not.\n   US: <presence from='juliet@example.com'\n
        \                id='ign291v5'\n                 to='romeo@example.net'\n
        \                type='probe'/>\n   US: <presence from='juliet@example.com'\n
        \                id='xv291f38'\n                 to='mercutio@example.com'\n
        \                type='probe'/>\n   Naturally, the user's server does not
        need to send a presence probe\n   to a contact if the contact's account resides
        on the same server as\n   the user, since the server possesses the contact's
        information\n   locally.\n"
      title: 4.3.1.  Server Generation of Outbound Presence Probe
    - contents:
      - "4.3.2.  Server Processing of Inbound Presence Probe\n   Upon receiving a
        presence probe to the contact's bare JID from the\n   user's server on behalf
        of the user, the contact's server MUST reply\n   as follows:\n   1.  If the
        contact account does not exist or the user's bare JID is\n       in the contact's
        roster with a subscription state other than\n       \"From\", \"From + Pending
        Out\", or \"Both\" (as explained under\n       Appendix A), then the contact's
        server SHOULD return a presence\n       stanza of type \"unsubscribed\" in
        response to the presence probe\n       (this will trigger a protocol flow
        for canceling the user's\n       subscription to the contact as described
        under Section 3.2;\n       however, this MUST NOT result in cancellation of
        a subscription\n       pre-approval as described under Section 3.4).  Here
        the 'from'\n       address MUST be the bare JID of the contact, since specifying
        a\n       full JID would constitute a presence leak as described in\n       [XMPP-CORE].\n
        \  CS: <presence from='mercutio@example.com'\n                 id='xv291f38'\n
        \                to='juliet@example.com'\n                 type='unsubscribed'/>\n
        \  However, if a server receives a presence probe from a configured\n   domain
        of the server itself or another such trusted service, it MAY\n   provide presence
        information about the user to that entity.\n   2.  Else, if the contact has
        moved temporarily or permanently to\n       another address, then the server
        SHOULD return a presence stanza\n       of type \"error\" with a stanza error
        condition of <redirect/>\n       (temporary) or <gone/> (permanent) that includes
        the new address\n       of the contact.\n   CS: <presence from='mercutio@example.com'\n
        \                id='xv291f38'\n                 to='juliet@example.com'\n
        \                type='error'>\n         <error type='modify'>\n           <gone
        xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'>\n             xmpp:la-mer@example.com\n
        \          </gone>\n         </error>\n       </presence>\n   3.  Else, if
        the contact has no available resources, then the server\n       SHOULD reply
        to the presence probe by sending to the user a\n       presence stanza of
        type \"unavailable\" (although sending\n       unavailable presence here is
        preferable because it results in a\n       deterministic answer to the probe,
        it is not mandatory because it\n       can greatly increase the number of
        presence notifications\n       generated by the contact's server).  Here the
        'from' address is\n       the bare JID because there is no available resource
        associated\n       with the contact.  If appropriate in accordance with local\n
        \      security policies this presence notification MAY include the full\n
        \      XML of the last unavailable presence stanza that the server\n       received
        from the contact (including the 'id' of the original\n       stanza), but
        if not then the presence notification SHOULD simply\n       indicate that
        the contact is unavailable without any of the\n       details originally provided.
        \ In any case, the presence\n       notification returned to the probing entity
        SHOULD include\n       information about the time when the last unavailable
        presence\n       stanza was generated (formatted using the XMPP delayed delivery\n
        \      extension [DELAY]).\n   CS: <presence from='mercutio@example.com'\n
        \                id='xv291f38'\n                 to='juliet@example.com'\n
        \                type='unavailable'>\n         <delay xmlns='urn:xmpp:delay'\n
        \               stamp='2002-09-10T23:41:07Z'/>\n       </presence>\n   4.
        \ Else, if the contact has at least one available resource, then\n       the
        server MUST reply to the presence probe by sending to the\n       user the
        full XML of the last presence stanza with no 'to'\n       attribute received
        by the server from each of the contact's\n       available resources.  Here
        the 'from' addresses are the full JIDs\n       of each available resource.\n
        \  CS: <presence from='romeo@example.net/foo'\n                 id='hzf1v27k'\n
        \                to='juliet@example.com'/>\n   CS: <presence from='romeo@example.net/bar'\n
        \                id='ps6t1fu3'\n                 to='juliet@example.com'>\n
        \        <show>away</show>\n       </presence>\n      Implementation Note:
        By \"full XML\" is meant the complete stanza\n      from the opening <presence>
        tag to the closing </presence> tag,\n      including all elements and attributes
        whether qualified by the\n      content namespace or extended namespaces;
        however, in accordance\n      with [XMPP-CORE], the contact's server will
        need to transform the\n      content namespace from 'jabber:client' to 'jabber:server'
        if it\n      sends the complete stanza over a server-to-server stream.\n   If
        the contact's server receives a presence probe addressed to a full\n   JID
        of the contact, the server MUST NOT return presence information\n   about
        any resource except the resource specified by the 'to' address\n   of the
        probe.  Rules #1 and #2 for a bare JID probe apply equally to\n   the case
        of a full JID probe.  If there is a resource matching the\n   full JID and
        the probing entity has authorization via a presence\n   subscription to see
        the contact's presence, then the server MUST\n   return an available presence
        notification, which SHOULD communicate\n   only the fact that the resource
        is available (not detailed\n   information such as the <show/>, <status/>,
        <priority/>, or presence\n   extensions).\n   CS: <presence from='romeo@example.net/bar'\n
        \                to='lobby@chat.example.com'/>\n      Implementation Note:
        See Section 4.6 regarding rules that\n      supplement the foregoing for handling
        of directed presence.\n"
      - contents:
        - "4.3.2.1.  Handling of the 'id' Attribute\n   The handling of the 'id' attribute
          in relation to presence probes was\n   unspecified in RFC 3921.  Although
          the pattern of \"send a probe and\n   receive a reply\" might seem like
          a request-response protocol similar\n   to the XMPP <iq/> stanza, in fact
          it is not because the response to a\n   probe might consist of multiple
          presence stanzas (one for each\n   available resource currently active for
          the contact).  For this\n   reason, if the contact currently has available
          resources then the\n   contact's server SHOULD preserve the 'id' attribute
          of the contact's\n   original presence stanza (if any) when sending those
          presence\n   notifications to the probing entity.  By contrast, if the contact\n
          \  currently has no available resources, the probing entity is not\n   authorized
          (via presence subscription) to see the contact's presence,\n   or an error
          occurs in relation to the probe, then the contact's\n   server SHOULD mirror
          the 'id' of the user's presence probe when\n   replying to the probing entity.\n
          \  The following examples illustrate the difference.\n   In the first scenario,
          Juliet sends presence from her \"chamber\"\n   resource.\n   CC: <presence
          from='juliet@example.com/chamber' id='pres1'>\n         <show>dnd</show>\n
          \        <status>busy!</status>\n       </presence>\n   She also sends presence
          from her \"balcony\" resource.\n   CC: <presence from='juliet@example.com/balcony'
          id='pres2'>\n         <show>away</show>\n         <status>stepped away</status>\n
          \      </presence>\n   Romeo's server then sends a probe to Juliet.\n   US:
          <presence from='romeo@example.net' id='probe1' type='probe'/>\n   Juliet's
          server then sends both of her presence notifications to\n   Romeo, preserving
          the 'id' attributes included in the stanzas that\n   her client has sent.\n
          \  CS: <presence from='juliet@example.com/chamber' id='pres1'>\n         <show>dnd</show>\n
          \        <status>busy!</status>\n       </presence>\n   CS: <presence from='juliet@example.com/balcony'
          id='pres2'>\n         <show>away</show>\n         <status>stepped away</status>\n
          \      </presence>\n   In the second scenario, Juliet is offline when Romeo's
          server sends a\n   probe.\n   US: <presence from='romeo@example.net'\n                 id='probe2'\n
          \                type='probe'/>\n   Juliet's server replies with an unavailable
          notification, mirroring\n   the 'id' of Rome's presence probe because there
          is no 'id' to\n   preserve from an available notification that her client
          has sent.\n   CS: <presence from='juliet@example.com'\n                 id='probe2'\n
          \                type='unavailable'/>\n"
        title: 4.3.2.1.  Handling of the 'id' Attribute
      title: 4.3.2.  Server Processing of Inbound Presence Probe
    title: 4.3.  Presence Probes
  - contents:
    - '4.4.  Subsequent Presence Broadcast

      '
    - contents:
      - "4.4.1.  Client Generation of Subsequent Presence Broadcast\n   After sending
        initial presence, at any time during its session the\n   user's client can
        update its availability for broadcast by sending a\n   presence stanza with
        no 'to' address and no 'type' attribute.\n   UC: <presence>\n         <show>away</show>\n
        \      </presence>\n   The presence broadcast MAY contain the <priority/>
        element, the\n   <show/> element, and one or more instances of the <status/>
        element,\n   as well as extended content; details are provided under Section
        4.7.\n   However, a user SHOULD send a presence update only to broadcast\n
        \  information that is relevant to the user's availability for\n   communication
        or the communication capabilities of the resource.\n   Information that is
        not relevant in this way might be of interest to\n   the user's contacts but
        SHOULD be sent via other means, such as the\n   \"publish-subscribe\" method
        described in [XEP-0163].\n"
      title: 4.4.1.  Client Generation of Subsequent Presence Broadcast
    - contents:
      - "4.4.2.  Server Processing of Subsequent Outbound Presence\n   Upon receiving
        a presence stanza expressing updated availability, the\n   user's server MUST
        broadcast the full XML of that presence stanza to\n   the contacts who are
        in the user's roster with a subscription type of\n   \"from\" or \"both\".\n
        \     Interoperability Note: RFC 3921 specified that the user's server\n      would
        check to make sure that it had not received a presence error\n      from the
        contact before sending subsequent presence notifications.\n      That rule
        has been removed because this specification uses\n      presence stanzas of
        type \"unsubscribe\" (not \"error\") to solve\n      subscription synchronization
        problems, in part because such\n      stanzas change the contact's subscription
        state in the user's\n      roster to either \"none\" or \"to\" (see Section
        3.3 and Appendix A),\n      thus obviating the need for the error check.\n
        \     Interoperability Note: If the subscription type is \"both\", some\n
        \     existing server implementations send subsequent presence\n      notifications
        to a contact only if the contact is online according\n      to the user's
        server (that is, if the user's server never received\n      a positive indication
        that the contact is online in response to\n      the presence probe it sent
        to the contact, the user's server does\n      not send subsequent presence
        notifications from the user to the\n      contact).  This behavior is perceived
        to save bandwidth, since\n      most presence subscriptions are bidirectional
        and many contacts\n      will not be online at any given time.\n   US: <presence
        from='juliet@example.com/balcony'\n                 to='romeo@example.net'>\n
        \        <show>away</show>\n       </presence>\n   US: <presence from='juliet@example.com/balcony'\n
        \                to='benvolio@example.net'>\n         <show>away</show>\n
        \      </presence>\n   US: <presence from='juliet@example.com/balcony'\n                 to='mercutio@example.com'>\n
        \        <show>away</show>\n       </presence>\n      Implementation Note:
        See Section 4.6 regarding rules that\n      supplement the foregoing for handling
        of directed presence.\n   The user's server MUST also send the presence stanza
        to all of the\n   user's available resources (including the resource that
        generated the\n   presence notification in the first place).\n   US: <presence
        from='juliet@example.com/balcony'\n                 to='juliet@example.com/chamber'>\n
        \        <show>away</show>\n       </presence>\n   US: <presence from='juliet@example.com/balcony'\n
        \                to='juliet@example.com/balcony'>\n         <show>away</show>\n
        \      </presence>\n"
      title: 4.4.2.  Server Processing of Subsequent Outbound Presence
    - contents:
      - "4.4.3.  Server Processing of Subsequent Inbound Presence\n   Upon receiving
        presence from the user, the contact's server MUST\n   deliver the user's presence
        stanza to all of the contact's available\n   resources.\n   [ ... to resource1
        ... ]\n   CS: <presence from='juliet@example.com/balcony'\n                 to='romeo@example.net'>\n
        \        <show>away</show>\n       </presence>\n   [ ... to resource2 ...
        ]\n   CS: <presence from='juliet@example.com/balcony'\n                 to='romeo@example.net'>\n
        \        <show>away</show>\n       </presence>\n"
      title: 4.4.3.  Server Processing of Subsequent Inbound Presence
    - contents:
      - "4.4.4.  Client Processing of Subsequent Presence\n   From the perspective
        of the contact's client, there is no significant\n   difference between initial
        presence broadcast and subsequent\n   presence, so the contact's client follows
        the rules for processing of\n   inbound presence defined under Section 4.4.3.\n"
      title: 4.4.4.  Client Processing of Subsequent Presence
    title: 4.4.  Subsequent Presence Broadcast
  - contents:
    - '4.5.  Unavailable Presence

      '
    - contents:
      - "4.5.1.  Client Generation of Unavailable Presence\n   Before ending its presence
        session with a server, the user's client\n   SHOULD gracefully become unavailable
        by sending \"unavailable\n   presence\", i.e., a presence stanza that possesses
        no 'to' attribute\n   and that possesses a 'type' attribute whose value is
        \"unavailable\".\n   UC: <presence type='unavailable'/>\n   Optionally, the
        unavailable presence stanza MAY contain one or more\n   <status/> elements
        specifying the reason why the user is no longer\n   available.\n   UC: <presence
        type='unavailable'>\n         <status>going on vacation</status>\n       </presence>\n
        \  However, the unavailable presence stanza MUST NOT contain the\n   <priority/>
        element or the <show/> element, since these elements\n   apply only to available
        resources.\n"
      title: 4.5.1.  Client Generation of Unavailable Presence
    - contents:
      - "4.5.2.  Server Processing of Outbound Unavailable Presence\n   The user's
        server MUST NOT depend on receiving unavailable presence\n   from an available
        resource, since the resource might become\n   unavailable ungracefully (e.g.,
        the resource's XML stream might be\n   closed with or without a stream error
        for any of the reasons\n   described in [XMPP-CORE]).\n   If an available
        resource becomes unavailable for any reason (either\n   gracefully or ungracefully),
        the user's server MUST broadcast\n   unavailable presence to all contacts
        that are in the user's roster\n   with a subscription type of \"from\" or
        \"both\".\n      Interoperability Note: RFC 3921 specified that the user's
        server\n      would check to make sure that it had not received a presence
        error\n      from the contact before sending unavailable presence\n      notifications.
        \ That rule has been removed because this\n      specification uses presence
        stanzas of type \"unsubscribe\" (not\n      \"error\") to solve subscription
        synchronization problems, in part\n      because such stanzas change the contact's
        subscription state in\n      the user's roster to either \"none\" or \"to\"
        (see Section 3.3 and\n      Appendix A), thus obviating the need for the error
        check.\n      Implementation Note: Even if the user's server does not broadcast\n
        \     the user's subsequent presence notifications to contacts who are\n      offline
        (as described under Section 4.4.2), it MUST broadcast the\n      user's unavailable
        presence notification; if it did not do so, the\n      last presence received
        by the contact's server would be the user's\n      initial presence for the
        presence session, with the result that\n      the contact would consider the
        user to be online.\n      Implementation Note: See Section 4.6 regarding rules
        that\n      supplement the foregoing for handling of directed presence.\n
        \  If the unavailable notification was gracefully received from the\n   client,
        then the server MUST broadcast the full XML of the presence\n   stanza.\n
        \  US: <presence from='juliet@example.com/balcony'\n                 to='romeo@example.net'\n
        \                type='unavailable'>\n         <status>going on vacation</status>\n
        \      </presence>\n   US: <presence from='juliet@example.com/balcony'\n                 to='benvolio@example.net'\n
        \                type='unavailable'>\n         <status>going on vacation</status>\n
        \      </presence>\n   US: <presence from='juliet@example.com/balcony'\n                 to='mercutio@example.com'\n
        \                type='unavailable'>\n         <status>going on vacation</status>\n
        \      </presence>\n   The user's server MUST also send the unavailable notification
        to all\n   of the user's available resources (as well as to the resource that\n
        \  generated the unavailable presence in the first place).\n   US: <presence
        from='juliet@example.com/balcony'\n                 to='juliet@example.com/chamber'\n
        \                type='unavailable'>\n         <status>going on vacation</status>\n
        \      </presence>\n   If the server detects that the user has gone offline
        ungracefully,\n   then the server MUST generate the unavailable presence broadcast
        on\n   the user's behalf.\n      Implementation Note: Any presence stanza
        with no 'type' attribute\n      and no 'to' attribute that the client sends
        after the server\n      broadcasts or generates an unavailable presence notification
        MUST\n      be routed or delivered by the user's server to all subscribers\n
        \     (i.e., MUST be treated as equivalent to initial presence for a new\n
        \     presence session).\n"
      title: 4.5.2.  Server Processing of Outbound Unavailable Presence
    - contents:
      - "4.5.3.  Server Processing of Inbound Unavailable Presence\n   Upon receiving
        an unavailable notification from the user, the\n   contact's server MUST deliver
        the user's presence stanza to all of\n   the contact's available resources.\n
        \  [ ... to resource1 ... ]\n   CS: <presence from='juliet@example.com/balcony'\n
        \                to='romeo@example.net'\n                 type='unavailable'>\n
        \        <status>going on vacation</status>\n       </presence>\n   [ ...
        to resource2 ... ]\n   CS: <presence from='juliet@example.com/balcony'\n                 to='romeo@example.net'\n
        \                type='unavailable'>\n         <status>going on vacation</status>\n
        \      </presence>\n      Implementation Note: If the contact's server does
        not broadcast\n      subsequent presence notifications to users who are offline
        (as\n      described under Section 4.4.2), it MUST also update its internal\n
        \     representation of which entities are online by noting that the\n      user
        is unavailable.\n"
      title: 4.5.3.  Server Processing of Inbound Unavailable Presence
    - contents:
      - "4.5.4.  Client Processing of Unavailable Presence\n   From the perspective
        of the contact's client, there is no significant\n   difference between available
        presence broadcast and unavailable\n   presence broadcast, so in general the
        contact's client follows the\n   rules for processing of inbound presence
        defined under Section 4.4.3.\n   However, if the contact receives an unavailable
        notification from the\n   bare JID of the user (rather than the full JID of
        a particular\n   available resource), the contact's client SHOULD treat the\n
        \  unavailable notification as applying to all resources.\n"
      title: 4.5.4.  Client Processing of Unavailable Presence
    title: 4.5.  Unavailable Presence
  - contents:
    - "4.6.  Directed Presence\n   This section supplements the rules for client and
      server processing\n   of presence notifications and presence probes, but only
      for the\n   special case of directed presence.\n"
    - contents:
      - "4.6.1.  General Considerations\n   In general, a client sends directed presence
        when it wishes to share\n   availability information with an entity that is
        not subscribed to its\n   presence, typically on a temporary basis.  Common
        uses of directed\n   presence include casual one-to-one chat sessions as described
        under\n   Section 5.1 and multi-user chat rooms as described in [XEP-0045].\n
        \  The temporary relationship established by sharing directed presence\n   with
        another entity is secondary to the permanent relationship\n   established
        through a presence subscription.  Therefore, the acts of\n   creating, modifying,
        or canceling a presence subscription MUST take\n   precedence over the rules
        specified in the following subsections.\n   For example, if a user shares
        directed presence with a contact but\n   then adds the contact to the user's
        roster by completing the presence\n   subscription \"handshake\", the user's
        server MUST treat the contact\n   just as it would any normal subscriber as
        described under Section 3,\n   for example, by sending subsequent presence
        broadcasts to the\n   contact.  As another example, if the user then cancels
        the contact's\n   subscription to the user's presence, the user's server MUST
        handle\n   the cancellation just as it normally would as described under\n
        \  Section 3.2, which includes sending unavailable presence to the\n   contact
        even if the user has sent directed presence to the contact.\n   XMPP servers
        typically implement directed presence by keeping a list\n   of the entities
        (bare JIDs or full JIDs) to which a user has sent\n   directed presence during
        the user's current session for a given\n   resource (full JID), then clearing
        the list when the user goes\n   offline (e.g., by sending a broadcast presence
        stanza of type\n   \"unavailable\").  The server MUST remove from the directed
        presence\n   list (or its functional equivalent) any entity to which the user\n
        \  sends directed unavailable presence and SHOULD remove any entity that\n
        \  sends unavailable presence to the user.\n"
      title: 4.6.1.  General Considerations
    - contents:
      - "4.6.2.  Client Generation of Directed Presence\n   As noted, directed presence
        is a client-generated presence stanza\n   with a 'to' attribute whose value
        is the bare JID or full JID of the\n   other entity and with either no 'type'
        attribute (indicating\n   availability) or a 'type' attribute whose value
        is \"unavailable\".\n"
      title: 4.6.2.  Client Generation of Directed Presence
    - contents:
      - "4.6.3.  Server Processing of Outbound Directed Presence\n   When the user's
        server receives a directed presence stanza, it SHOULD\n   process it according
        to the following rules.\n   1.  If the user sends directed available or unavailable
        presence to a\n       contact that is in the user's roster with a subscription
        type of\n       \"from\" or \"both\" after having sent initial presence and
        before\n       sending unavailable presence broadcast (i.e., during the user's\n
        \      presence session), the user's server MUST locally deliver or\n       remotely
        route the full XML of that presence stanza but SHOULD\n       NOT otherwise
        modify the contact's status regarding presence\n       broadcast (i.e., it
        SHOULD include the contact's JID in any\n       subsequent presence broadcasts
        initiated by the user).\n   2.  If the user sends directed presence to an
        entity that is not in\n       the user's roster with a subscription type of
        \"from\" or \"both\"\n       after having sent initial presence and before
        sending unavailable\n       presence broadcast (i.e., during the user's presence
        session),\n       the user's server MUST locally deliver or remotely route
        the full\n       XML of that presence stanza to the entity but MUST NOT modify
        the\n       contact's status regarding available presence broadcast (i.e.,
        it\n       MUST NOT include the entity's JID in any subsequent broadcasts
        of\n       available presence initiated by the user); however, if the\n       available
        resource from which the user sent the directed presence\n       becomes unavailable,
        the user's server MUST route that\n       unavailable presence to the entity
        (if the user has not yet sent\n       directed unavailable presence to that
        entity).\n   3.  If the user sends directed presence without first sending
        initial\n       presence or after having sent unavailable presence broadcast\n
        \      (i.e., the resource is connected but not available), the user's\n       server
        MUST treat the entity to which the user sends directed\n       presence as
        in case #2 above.\n"
      title: 4.6.3.  Server Processing of Outbound Directed Presence
    - contents:
      - "4.6.4.  Server Processing of Inbound Directed Presence\n   From the perspective
        of the contact's server, there is no significant\n   difference between presence
        broadcast and directed presence, so the\n   contact's server follows the rules
        for processing of inbound presence\n   defined under Sections 4.3.2, 4.4.3,
        and 4.5.3.\n"
      title: 4.6.4.  Server Processing of Inbound Directed Presence
    - contents:
      - "4.6.5.  Client Processing of Inbound Directed Presence\n   From the perspective
        of the contact's client, there is no significant\n   difference between presence
        broadcast and directed presence, so the\n   contact's client follows the rules
        for processing of inbound presence\n   defined under Section 4.4.3.\n"
      title: 4.6.5.  Client Processing of Inbound Directed Presence
    - contents:
      - "4.6.6.  Server Processing of Presence Probes\n   If a user's client has sent
        directed presence to another entity\n   (e.g., a one-to-one chat partner or
        a multi-user chat room), after\n   some time the entity or its server might
        want to know if the client\n   is still online.  This scenario is especially
        common in the case of\n   multi-user chat rooms, in which the user might be
        a participant for a\n   long period of time.  If the user's client goes offline
        without the\n   chat room being informed (either by the client or the client's\n
        \  server), the user's representation in the room might become a \"ghost\"\n
        \  that appears to be participating but that in fact is no longer\n   present
        in the room.  To detect such \"ghosts\", some multi-user chat\n   room implementations
        send presence probes to users that have joined\n   the room.\n   In the case
        of directed presence, the probing entity SHOULD send the\n   probe from the
        JID that received directed presence (whether a full\n   JID or a bare JID).
        \ The probe SHOULD be sent to the user's full JID,\n   not the user's bare
        JID without a resourcepart, because the temporary\n   \"authorization\" involved
        with directed presence is based on the full\n   JID from which the user sent
        directed presence to the probing entity.\n   When the user's server receives
        a probe, it MUST first apply any\n   logic associated with presence subscriptions
        as described under\n   Section 4.3.2.  If the probing entity does not have
        a subscription to\n   the user's presence, then the server MUST check if the
        user has sent\n   directed presence to the entity during its current session;
        if so,\n   the server SHOULD answer the probe with only mere presence of type\n
        \  \"available\" or \"unavailable\" (i.e., not including child elements) and\n
        \  only for that full JID (i.e., not for any other resources that might\n
        \  be currently associated with the user's bare JID).\n"
      title: 4.6.6.  Server Processing of Presence Probes
    title: 4.6.  Directed Presence
  - contents:
    - '4.7.  Presence Syntax

      '
    - contents:
      - "4.7.1.  Type Attribute\n   The absence of a 'type' attribute signals that
        the relevant entity is\n   available for communication (see Section 4.2 and
        Section 4.4).\n   A 'type' attribute with a value of \"unavailable\" signals
        that the\n   relevant entity is not available for communication (see Section
        4.5).\n   The XMPP presence stanza is also used to negotiate and manage\n
        \  subscriptions to the presence of other entities.  These tasks are\n   completed
        via presence stanzas of type \"subscribe\", \"unsubscribe\",\n   \"subscribed\",
        and \"unsubscribed\" as described under Section 3.\n   If a user and contact
        are associated with different XMPP servers,\n   those servers also use a special
        presence stanza of type \"probe\" in\n   order to determine the availability
        of the entity on the peer server;\n   details are provided under Section 4.3.
        \ Clients SHOULD NOT send\n   presence stanzas of type \"probe\".\n   The
        values of the 'type' attribute can be summarized as follows:\n   o  error
        -- An error has occurred regarding processing of a\n      previously sent
        presence stanza; if the presence stanza is of type\n      \"error\", it MUST
        include an <error/> child element (refer to\n      [XMPP-CORE]).\n   o  probe
        -- A request for an entity's current presence; SHOULD be\n      generated
        only by a server on behalf of a user.\n   o  subscribe -- The sender wishes
        to subscribe to the recipient's\n      presence.\n   o  subscribed -- The
        sender has allowed the recipient to receive\n      their presence.\n   o  unavailable
        -- The sender is no longer available for\n      communication.\n   o  unsubscribe
        -- The sender is unsubscribing from the receiver's\n      presence.\n   o
        \ unsubscribed -- The subscription request has been denied or a\n      previously
        granted subscription has been canceled.\n   If the value of the 'type' attribute
        is not one of the foregoing\n   values, the recipient or an intermediate router
        SHOULD return a\n   stanza error of <bad-request/>.\n      Implementation
        Note: There is no default value for the 'type'\n      attribute of the <presence/>
        element.\n      Implementation Note: There is no value of \"available\" for
        the\n      'type' attribute of the <presence/> element.\n"
      title: 4.7.1.  Type Attribute
    - contents:
      - "4.7.2.  Child Elements\n   In accordance with the default namespace declaration,
        a presence\n   stanza is qualified by the 'jabber:client' or 'jabber:server'\n
        \  namespace, which defines certain child elements of presence stanzas,\n
        \  in particular the <show/>, <status/>, and <priority/> elements.\n   These
        child elements are used to provide more detailed information\n   about an
        entity's availability.  Typically these child elements are\n   included only
        if the presence stanza possesses no 'type' attribute,\n   although exceptions
        are noted in the text that follows.\n"
      - contents:
        - "4.7.2.1.  Show Element\n   The OPTIONAL <show/> element specifies the particular
          availability\n   sub-state of an entity or a specific resource thereof.
          \ A presence\n   stanza MUST NOT contain more than one <show/> element.
          \ There are no\n   attributes defined for the <show/> element.  The <show/>
          element MUST\n   NOT contain mixed content (as defined in Section 3.2.2
          of [XML]).\n   The XML character data of the <show/> element is not meant
          for\n   presentation to a human user.  The XML character data MUST be one
          of\n   the following (additional availability states could be defined\n
          \  through extended content elements):\n   o  away -- The entity or resource
          is temporarily away.\n   o  chat -- The entity or resource is actively interested
          in chatting.\n   o  dnd -- The entity or resource is busy (dnd = \"Do Not
          Disturb\").\n   o  xa -- The entity or resource is away for an extended
          period (xa =\n      \"eXtended Away\").\n   If no <show/> element is provided,
          the entity is assumed to be online\n   and available.\n   Any specialized
          processing of availability states by recipients and\n   intermediate routers
          is up to the implementation (e.g., incorporation\n   of availability states
          into stanza routing and delivery logic).\n"
        title: 4.7.2.1.  Show Element
      - contents:
        - "4.7.2.2.  Status Element\n   The OPTIONAL <status/> element contains human-readable
          XML character\n   data specifying a natural-language description of an entity's\n
          \  availability.  It is normally used in conjunction with the show\n   element
          to provide a detailed description of an availability state\n   (e.g., \"In
          a meeting\") when the presence stanza has no 'type'\n   attribute.\n   <presence
          from='romeo@example.net/orchard'\n             xml:lang='en'>\n     <show>dnd</show>\n
          \    <status>Wooing Juliet</status>\n   </presence>\n   There are no attributes
          defined for the <status/> element, with the\n   exception of the 'xml:lang'
          attribute inherited from [XML].  The\n   <status/> element MUST NOT contain
          mixed content (as defined in\n   Section 3.2.2 of [XML]).  Multiple instances
          of the <status/> element\n   MAY be included, but only if each instance
          possesses an 'xml:lang'\n   attribute with a distinct language value (either
          explicitly or by\n   inheritance from the 'xml:lang' value of an element
          farther up in the\n   XML hierarchy, which from the sender's perspective
          can include the\n   XML stream header as described in [XMPP-CORE]).\n   <presence
          from='romeo@example.net/orchard'\n             id='jx62vs97'\n             xml:lang='en'>\n
          \    <show>dnd</show>\n     <status>Wooing Juliet</status>\n     <status
          xml:lang='cs'>Dvo&#x0159;&#x00ED;m se Julii</status>\n   </presence>\n   A
          presence stanza of type \"unavailable\" MAY also include a <status/>\n   element
          to provide detailed information about why the entity is going\n   offline.\n
          \  <presence from='romeo@example.net/orchard'\n             id='oy6sb241'\n
          \            type='unavailable'\n             xml:lang='en'>\n     <status>Busy
          IRL</status>\n   </presence>\n   The <status/> child MAY also be sent in
          a subscription-related\n   presence stanza (i.e., type \"subscribe\", \"subscribed\",
          \"unsubscribe\",\n   or \"unsubscribed\") to provide a description of the
          action.  An\n   interactive client MAY present this <status/> information
          to a human\n   user (see Section 11).\n   <presence from='romeo@example.net'\n
          \            id='uc51xs63'\n             to='nurse@example.com'\n             type='subscribe'>\n
          \    <status>Hi, Juliet told me to add you to my buddy list.</status>\n
          \  </presence>\n"
        title: 4.7.2.2.  Status Element
      - contents:
        - "4.7.2.3.  Priority Element\n   The OPTIONAL <priority/> element contains
          non-human-readable XML\n   character data that specifies the priority level
          of the resource.\n   The value MUST be an integer between -128 and +127.
          \ A presence\n   stanza MUST NOT contain more than one <priority/> element.
          \ There are\n   no attributes defined for the <priority/> element.  The
          <priority/>\n   element MUST NOT contain mixed content (as defined in Section
          3.2.2\n   of [XML]).\n   <presence xml:lang='en'>\n     <show>dnd</show>\n
          \    <status>Wooing Juliet</status>\n     <status xml:lang='cs'>Dvo&#x0159;&#x00ED;m
          se Julii</status>\n     <priority>1</priority>\n   </presence>\n   If no
          priority is provided, the processing server or client MUST\n   consider
          the priority to be zero (\"0\").\n   The client's server MAY override the
          priority value provided by the\n   client (e.g., in order to impose a message
          handling rule of\n   delivering a message intended for the account's bare
          JID to all of\n   the account's available resources).  If the server does
          so, it MUST\n   communicate the modified priority value when it echoes the
          client's\n   presence back to itself and sends the presence notification
          to the\n   user's contacts (because this modified priority value is typically\n
          \  the default value of zero, communicating the modified priority value\n
          \  can be done by not including the <priority/> child element).\n   For
          information regarding the semantics of priority values in stanza\n   processing
          within instant messaging and presence applications, refer\n   to Section
          8.\n"
        title: 4.7.2.3.  Priority Element
      title: 4.7.2.  Child Elements
    - contents:
      - "4.7.3.  Extended Content\n   As described in [XMPP-CORE], an XML stanza MAY
        contain any child\n   element that is qualified by a namespace other than
        the default\n   namespace; this applies to the presence stanza as well.\n
        \  (In the following example, the presence stanza includes entity\n   capabilities
        information as defined in [XEP-0115].)\n   <presence from='romeo@example.net'>\n
        \    <c xmlns='http://jabber.org/protocol/caps'\n        hash='sha-1'\n        node='http://psi-im.org'\n
        \       ver='q07IKJEyjvHSyhy//CH0CxmKi8w='/>\n   </presence>\n   Any extended
        content included in a presence stanza SHOULD represent\n   aspects of an entity's
        availability for communication or provide\n   information about communication-related
        capabilities.\n"
      title: 4.7.3.  Extended Content
    title: 4.7.  Presence Syntax
  title: 4.  Exchanging Presence Information
- contents:
  - "5.  Exchanging Messages\n   Once a client has authenticated with a server and
    bound a resource to\n   an XML stream as described in [XMPP-CORE], an XMPP server
    will route\n   XML stanzas to and from that client.  One kind of stanza that can
    be\n   exchanged is <message/> (if, that is, messaging functionality is\n   enabled
    on the server).  Exchanging messages is a basic use of XMPP\n   and occurs when
    a user generates a message stanza that is addressed\n   to another entity.  As
    defined under Section 8, the sender's server\n   is responsible for delivering
    the message to the intended recipient\n   (if the recipient is on the same local
    server) or for routing the\n   message to the recipient's server (if the recipient
    is on a remote\n   server).  Thus a message stanza is used to \"push\" information
    to\n   another entity.\n"
  - contents:
    - "5.1.  One-to-One Chat Sessions\n   In practice, instant messaging activity
      between human users tends to\n   occur in the form of a conversational burst
      that we call a \"chat\n   session\": the exchange of multiple messages between
      two parties in\n   relatively rapid succession within a relatively brief period
      of time.\n   When a human user intends to engage in such a chat session with
      a\n   contact (rather than sending a single message to which no reply is\n   expected),
      the message type generated by the user's client SHOULD be\n   \"chat\" and the
      contact's client SHOULD preserve that message type in\n   subsequent replies.
      \ The user's client also SHOULD include a\n   <thread/> element with its initial
      message, which the contact's\n   client SHOULD also preserve during the life
      of the chat session (see\n   Section 5.2.5).\n   The user's client SHOULD address
      the initial message in a chat\n   session to the bare JID <contact@domainpart>
      of the contact (rather\n   than attempting to guess an appropriate full JID\n
      \  <contact@domainpart/resourcepart> based on the <show/>, <status/>, or\n   <priority/>
      value of any presence notifications it might have\n   received from the contact).
      \ Until and unless the user's client\n   receives a reply from the contact,
      it SHOULD send any further\n   messages to the contact's bare JID.  The contact's
      client SHOULD\n   address its replies to the user's full JID\n   <user@domainpart/resourcepart>
      as provided in the 'from' address of\n   the initial message.  Once the user's
      client receives a reply from\n   the contact's full JID, it SHOULD address its
      subsequent messages to\n   the contact's full JID as provided in the 'from'
      address of the\n   contact's replies, thus \"locking in\" on that full JID.
      \ A client\n   SHOULD \"unlock\" after having received a <message/> or <presence/>\n
      \  stanza from any other resource controlled by the peer (or a presence\n   stanza
      from the locked resource); as a result, it SHOULD address its\n   next message(s)
      in the chat session to the bare JID of the peer (thus\n   \"unlocking\" the
      previous \"lock\") until it receives a message from one\n   of the peer's full
      JIDs.\n   When two parties engage in a chat session but do not share presence\n
      \  with each other based on a presence subscription, they SHOULD send\n   directed
      presence to each other so that either party can easily\n   discover if the peer
      goes offline during the course of the chat\n   session.  However, a client MUST
      provide a way for a user to disable\n   such presence sharing globally or to
      enable it only with particular\n   entities.  Furthermore, a party SHOULD send
      directed unavailable\n   presence to the peer when it has reason to believe
      that the chat\n   session is over (e.g., if, after some reasonable amount of
      time, no\n   subsequent messages have been exchanged between the parties).\n
      \  An example of a chat session is provided under Section 7.\n"
    title: 5.1.  One-to-One Chat Sessions
  - contents:
    - "5.2.  Message Syntax\n   The following sections describe the syntax of the
      <message/> stanza.\n"
    - contents:
      - "5.2.1.  To Attribute\n   An instant messaging client specifies an intended
        recipient for a\n   message by providing the JID of the intended recipient
        in the 'to'\n   attribute of the <message/> stanza.\n   If the message is
        being sent outside the context of any existing chat\n   session or received
        message, the value of the 'to' address SHOULD be\n   of the form <localpart@domainpart>
        rather than of the form\n   <localpart@domainpart/resourcepart> (see Section
        5.1).\n   <message\n       from='juliet@example.com/balcony'\n       id='ktx72v49'\n
        \      to='romeo@example.net'\n       type='chat'\n       xml:lang='en'>\n
        \    <body>Art thou not Romeo, and a Montague?</body>\n   </message>\n   If
        the message is being sent in reply to a message previously\n   received from
        an address of the form\n   <localpart@domainpart/resourcepart> (e.g., within
        the context of a\n   one-to-one chat session as described under Section 5.1),
        the value of\n   the 'to' address SHOULD be of the form\n   <localpart@domainpart/resourcepart>
        rather than of the form\n   <localpart@domainpart> unless the sender has knowledge
        (e.g., via\n   presence) that the intended recipient's resource is no longer\n
        \  available.\n   <message\n       from='romeo@example.net/orchard'\n       id='sl3nx51f'\n
        \      to='juliet@example.com/balcony'\n       type='chat'\n       xml:lang='en'>\n
        \    <body>Neither, fair saint, if either thee dislike.</body>\n   </message>\n"
      title: 5.2.1.  To Attribute
    - contents:
      - "5.2.2.  Type Attribute\n   Common uses of the message stanza in instant messaging
        applications\n   include: single messages; messages sent in the context of
        a one-to-\n   one chat session; messages sent in the context of a multi-user
        chat\n   room; alerts, notifications, or other information to which no reply\n
        \  is expected; and errors.  These uses are differentiated via the\n   'type'
        attribute.  Inclusion of the 'type' attribute is RECOMMENDED.\n   If included,
        the 'type' attribute MUST have one of the following\n   values:\n   o  chat
        -- The message is sent in the context of a one-to-one chat\n      session.
        \ Typically an interactive client will present a message\n      of type \"chat\"
        in an interface that enables one-to-one chat\n      between the two parties,
        including an appropriate conversation\n      history.  Detailed recommendations
        regarding one-to-one chat\n      sessions are provided under Section 5.1.\n
        \  o  error -- The message is generated by an entity that experiences an\n
        \     error when processing a message received from another entity (for\n
        \     details regarding stanza error syntax, refer to [XMPP-CORE]).  A\n      client
        that receives a message of type \"error\" SHOULD present an\n      appropriate
        interface informing the original sender regarding the\n      nature of the
        error.\n   o  groupchat -- The message is sent in the context of a multi-user\n
        \     chat environment (similar to that of [IRC]).  Typically a\n      receiving
        client will present a message of type \"groupchat\" in an\n      interface
        that enables many-to-many chat between the parties,\n      including a roster
        of parties in the chatroom and an appropriate\n      conversation history.
        \ For detailed information about XMPP-based\n      groupchat, refer to [XEP-0045].\n
        \  o  headline -- The message provides an alert, a notification, or\n      other
        transient information to which no reply is expected (e.g.,\n      news headlines,
        sports updates, near-real-time market data, or\n      syndicated content).
        \ Because no reply to the message is expected,\n      typically a receiving
        client will present a message of type\n      \"headline\" in an interface
        that appropriately differentiates the\n      message from standalone messages,
        chat messages, and groupchat\n      messages (e.g., by not providing the recipient
        with the ability to\n      reply).  If the 'to' address is the bare JID, the
        receiving server\n      SHOULD deliver the message to all of the recipient's
        available\n      resources with non-negative presence priority and MUST deliver
        the\n      message to at least one of those resources; if the 'to' address
        is\n      a full JID and there is a matching resource, the server MUST\n      deliver
        the message to that resource; otherwise the server MUST\n      either silently
        ignore the message or return an error (see\n      Section 8).\n   o  normal
        -- The message is a standalone message that is sent outside\n      the context
        of a one-to-one conversation or groupchat, and to\n      which it is expected
        that the recipient will reply.  Typically a\n      receiving client will present
        a message of type \"normal\" in an\n      interface that enables the recipient
        to reply, but without a\n      conversation history.  The default value of
        the 'type' attribute\n      is \"normal\".\n   An IM application SHOULD support
        all of the foregoing message types.\n   If an application receives a message
        with no 'type' attribute or the\n   application does not understand the value
        of the 'type' attribute\n   provided, it MUST consider the message to be of
        type \"normal\" (i.e.,\n   \"normal\" is the default).\n   Guidelines for
        server handling of different message types is provided\n   under Section 8.\n
        \  Although the 'type' attribute is OPTIONAL, it is considered polite to\n
        \  mirror the type in any replies to a message; furthermore, some\n   specialized
        applications (e.g., a multi-user chat service) MAY at\n   their discretion
        enforce the use of a particular message type (e.g.,\n   type='groupchat').\n"
      title: 5.2.2.  Type Attribute
    - contents:
      - "5.2.3.  Body Element\n   The <body/> element contains human-readable XML
        character data that\n   specifies the textual contents of the message; this
        child element is\n   normally included but is OPTIONAL.\n   <message\n       from='juliet@example.com/balcony'\n
        \      id='b4vs9km4'\n       to='romeo@example.net'\n       type='chat'\n
        \      xml:lang='en'>\n     <body>Wherefore art thou, Romeo?</body>\n   </message>\n
        \  There are no attributes defined for the <body/> element, with the\n   exception
        of the 'xml:lang' attribute.  Multiple instances of the\n   <body/> element
        MAY be included in a message stanza for the purpose\n   of providing alternate
        versions of the same body, but only if each\n   instance possesses an 'xml:lang'
        attribute with a distinct language\n   value (either explicitly or by inheritance
        from the 'xml:lang' value\n   of an element farther up in the XML hierarchy,
        which from the\n   sender's perspective can include the XML stream header
        as described\n   in [XMPP-CORE]).\n   <message\n       from='juliet@example.com/balcony'\n
        \      id='z94nb37h'\n       to='romeo@example.net'\n       type='chat'\n
        \      xml:lang='en'>\n     <body>Wherefore art thou, Romeo?</body>\n     <body
        xml:lang='cs'>\n        Pro&#x010D;e&#x017D; jsi ty, Romeo?\n      </body>\n
        \  </message>\n   The <body/> element MUST NOT contain mixed content (as defined
        in\n   Section 3.2.2 of [XML]).\n"
      title: 5.2.3.  Body Element
    - contents:
      - "5.2.4.  Subject Element\n   The <subject/> element contains human-readable
        XML character data\n   that specifies the topic of the message.\n   <message\n
        \      from='juliet@example.com/balcony'\n       id='c8xg3nf8'\n       to='romeo@example.net'\n
        \      type='chat'\n       xml:lang='en'>\n     <subject>I implore you!</subject>\n
        \    <body>Wherefore art thou, Romeo?</body>\n   </message>\n   There are
        no attributes defined for the <subject/> element, with the\n   exception of
        the 'xml:lang' attribute inherited from [XML].  Multiple\n   instances of
        the <subject/> element MAY be included for the purpose\n   of providing alternate
        versions of the same subject, but only if each\n   instance possesses an 'xml:lang'
        attribute with a distinct language\n   value (either explicitly or by inheritance
        from the 'xml:lang' value\n   of an element farther up in the XML hierarchy,
        which from the\n   sender's perspective can include the XML stream header
        as described\n   in [XMPP-CORE]).\n   <message\n       from='juliet@example.com/balcony'\n
        \      id='jk3v47gw'\n       to='romeo@example.net'\n       type='chat'\n
        \      xml:lang='en'>\n     <subject>I implore you!</subject>\n     <subject
        xml:lang='cs'>\n       &#x00DA;p&#x011B;nliv&#x011B; pros&#x00ED;m!\n     </subject>\n
        \    <body>Wherefore art thou, Romeo?</body>\n     <body xml:lang='cs'>\n
        \       Pro&#x010D;e&#x017E; jsi ty, Romeo?\n      </body>\n   </message>\n
        \  The <subject/> element MUST NOT contain mixed content (as defined in\n
        \  Section 3.2.2 of [XML]).\n"
      title: 5.2.4.  Subject Element
    - contents:
      - "5.2.5.  Thread Element\n   The primary use of the XMPP <thread/> element
        is to uniquely identify\n   a conversation thread or \"chat session\" between
        two entities\n   instantiated by <message/> stanzas of type 'chat'.  However,
        the XMPP\n   <thread/> element MAY also be used to uniquely identify an analogous\n
        \  thread between two entities instantiated by <message/> stanzas of\n   type
        'headline' or 'normal', or among multiple entities in the\n   context of a
        multi-user chat room instantiated by <message/> stanzas\n   of type 'groupchat'.
        \ It MAY also be used for <message/> stanzas not\n   related to a human conversation,
        such as a game session or an\n   interaction between plugins.  The <thread/>
        element is not used to\n   identify individual messages, only conversations
        or messaging\n   sessions.\n   The inclusion of the <thread/> element is OPTIONAL.
        \ Because the\n   <thread/> element identifies the particular conversation
        thread to\n   which a message belongs, a message stanza MUST NOT contain more
        than\n   one <thread/> element.\n   The <thread/> element MAY possess a 'parent'
        attribute that\n   identifies another thread of which the current thread is
        an offshoot\n   or child.  The 'parent' attribute MUST conform to the syntax
        of the\n   <thread/> element itself and its value MUST be different from the
        XML\n   character data of the <thread/> element on which the 'parent'\n   attribute
        is included.\n      Implementation Note: The ability to specify both a parent
        thread\n      and a child thread introduces the possibility of conflicts between\n
        \     thread identifiers for overlapping threads.  For example, one\n      <thread/>
        element might contain XML character data of \"foo\" and a\n      'parent'
        attribute whose value is \"bar\", a second <thread/>\n      element might
        contain XML character data of \"bar\" and a 'parent'\n      attribute whose
        value is \"baz\", and a third <thread/> element\n      might contain XML character
        data of \"baz\" and a 'parent' attribute\n      whose value is once again
        \"foo\".  It is up to the implementation\n      how it will treat conflicts
        between such overlapping thread\n      identifiers (e.g., whether it will
        \"chain together\" thread\n      identifiers by showing \"foo\" as both a
        parent and grandchild of\n      \"baz\" in a multi-level user interface, or
        whether it will show\n      only one level of dependency at a time).\n   The
        value of the <thread/> element is not human-readable and MUST be\n   treated
        as opaque by entities; no semantic meaning can be derived\n   from it, and
        only exact comparisons can be made against it.  The\n   value of the <thread/>
        element MUST uniquely identify the\n   conversation thread either between
        the conversation partners or more\n   generally (one way to ensure uniqueness
        is by generating a\n   universally unique identifier (UUID) as described in
        [UUID]).\n      Security Warning: An application that generates a ThreadID
        MUST\n      ensure that it does not reveal identifying information about the\n
        \     entity (e.g., the MAC address of the device on which the XMPP\n      application
        is running).\n   The <thread/> element MUST NOT contain mixed content (as
        defined in\n   Section 3.2.2 of [XML]).\n   <message\n       from='juliet@example.com/balcony'\n
        \      to='romeo@example.net'\n       type='chat'\n       xml:lang='en'>\n
        \    <subject>I implore you!</subject>\n     <subject xml:lang='cs'>\n       &#x00DA;p&#x011B;nliv&#x011B;
        pros&#x00ED;m!\n     </subject>\n     <body>Wherefore art thou, Romeo?</body>\n
        \    <body xml:lang='cs'>\n        Pro&#x010D;e&#x017E; jsi ty, Romeo?\n     </body>\n
        \    <thread parent='e0ffe42b28561960c6b12b944a092794b9683a38'>\n       0e3141cd80894871a68e6fe6b1ec56fa\n
        \    </thread>\n   </message>\n   For detailed recommendations regarding use
        of the <thread/> element,\n   refer to [XEP-0201].\n"
      title: 5.2.5.  Thread Element
    title: 5.2.  Message Syntax
  - contents:
    - "5.3.  Extended Content\n   As described in [XMPP-CORE], an XML stanza MAY contain
      any child\n   element that is qualified by a namespace other than the default\n
      \  namespace; this applies to the message stanza as well.  Guidelines\n   for
      handling extended content on the part of both routing servers and\n   end recipients
      are provided in Section 8.4 of [XMPP-CORE].\n   (In the following example, the
      message stanza includes an XHTML-\n   formatted version of the message as defined
      in [XEP-0071]).)\n   <message\n       from='juliet@example.com/balcony'\n       to='romeo@example.net'\n
      \      type='chat'\n       xml:lang='en'>\n     <body>Wherefore art thou, Romeo?</body>\n
      \    <html xmlns='http://jabber.org/protocol/xhtml-im'>\n       <body xmlns='http://www.w3.org/1999/xhtml'>\n
      \        <p>Wherefore <span style='font-style: italic'>art</span>\n         thou,
      <span style='color:red'>Romeo</span>?</p>\n       </body>\n     </html>\n   </message>\n"
    title: 5.3.  Extended Content
  title: 5.  Exchanging Messages
- contents:
  - "6.  Exchanging IQ Stanzas\n   As described in [XMPP-CORE], IQ stanzas provide
    a structured request-\n   response mechanism.  The basic semantics of that mechanism
    (e.g.,\n   that the 'id' attribute is mandatory) are defined in [XMPP-CORE],\n
    \  whereas the specific semantics needed to complete particular use\n   cases
    are defined in all instances by the extended namespace that\n   qualifies the
    direct child element of an IQ stanza of type \"get\" or\n   \"set\".  The 'jabber:client'
    and 'jabber:server' namespaces do not\n   define any children of IQ stanzas other
    than the <error/> element\n   common to all stanza types.  This document defines
    one such extended\n   namespace, for Managing the Roster (Section 2).  However,
    an IQ\n   stanza MAY contain structured information qualified by any extended\n
    \  namespace.\n"
  title: 6.  Exchanging IQ Stanzas
- contents:
  - "7.  A Sample Session\n   The examples in this section illustrate a possible instant
    messaging\n   and presence session.  The user is <romeo@example.net>, he has an\n
    \  available resource whose resourcepart is \"orchard\", and he has the\n   following
    individuals in his roster:\n   o  <juliet@example.com> (subscription=\"both\"
    and she has two\n      available resources, \"chamber\" and \"balcony\")\n   o
    \ <benvolio@example.net> (subscription=\"to\")\n   o  <mercutio@example.org> (subscription=\"from\")\n
    \  First, the user completes the preconditions (stream establishment,\n   TLS
    and SASL negotiation, and resource binding) described in\n   [XMPP-CORE]; those
    protocol flows are not reproduced here.\n   Next, the user requests his roster.\n
    \  Example 1: User requests current roster from server\n   UC: <iq from='romeo@example.net/orchard'\n
    \          id='hf61v3n7'\n           type='get'>\n         <query xmlns='jabber:iq:roster'/>\n
    \      </iq>\n   Example 2: User receives roster from server\n   US: <iq id='hf61v3n7'\n
    \          to='romeo@example.net/orchard'\n           type='result'>\n         <query
    xmlns='jabber:iq:roster'>\n           <item jid='juliet@example.com'\n                 name='Juliet'\n
    \                subscription='both'>\n             <group>Friends</group>\n           </item>\n
    \          <item jid='benvolio@example.org'\n                 name='Benvolio'\n
    \                subscription='to'/>\n           <item jid='mercutio@example.org'\n
    \                name='Mercutio'\n                 subscription='from'/>\n         </query>\n
    \      </iq>\n   Now the user begins a presence session.\n   Example 3: User sends
    initial presence\n   UC: <presence/>\n   Example 4: User's server sends presence
    probes to contacts with\n   subscription=\"to\" and subscription=\"both\" on behalf
    of the user\n   US: <presence\n           from='romeo@example.net'\n           to='juliet@example.com'\n
    \          type='probe'/>\n   US: <presence\n           from='romeo@example.net'\n
    \          to='benvolio@example.org'\n           type='probe'/>\n   Example 5:
    User's server sends initial presence to contacts with\n   subscription=\"from\"
    and subscription=\"both\" on behalf of the user's\n   available resource, as well
    as to user\n   US: <presence\n           from='romeo@example.net/orchard'\n           to='juliet@example.com'/>\n
    \  US: <presence\n           from='romeo@example.net/orchard'\n           to='mercutio@example.org'/>\n
    \  US: <presence\n           from='romeo@example.net/orchard'\n           to='romeo@example.net'/>\n
    \  Example 6: Contacts' servers reply to presence probe on behalf of all\n   available
    resources\n   CS: <presence\n           from='juliet@example.com/balcony'\n           to='romeo@example.net'\n
    \          xml:lang='en'>\n         <show>away</show>\n         <status>be right
    back</status>\n         <priority>0</priority>\n       </presence>\n   CS: <presence\n
    \          from='juliet@example.com/chamber'\n           to='romeo@example.net'>\n
    \        <priority>1</priority>\n       </presence>\n   CS: <presence\n           from='benvolio@example.org/pda'\n
    \          to='romeo@example.net'\n           xml:lang='en'>\n         <show>dnd</show>\n
    \        <status>gallivanting</status>\n       </presence>\n   Example 7: Contacts'
    servers deliver user's initial presence to all\n   available resources\n   CS:
    <presence\n           from='romeo@example.net/orchard'\n           to='juliet@example.com'/>\n
    \  CS: <presence\n           from='romeo@example.net/orchard'\n           to='juliet@example.com'/>\n
    \  CS: <presence\n           from='romeo@example.net/orchard'\n           to='mercutio@example.org'/>\n
    \  Example 8: User sends directed presence to another user not in his\n   roster\n
    \  UC: <presence\n           from='romeo@example.net/orchard'\n           to='nurse@example.com'\n
    \          xml:lang='en'>\n         <show>dnd</show>\n         <status>courting
    Juliet</status>\n         <priority>0</priority>\n       </presence>\n   Now the
    user engages in a chat session with one of his contacts.\n   Example 9: A threaded
    conversation\n   CC: <message\n           from='juliet@example.com/balcony'\n
    \          to='romeo@example.net'\n           type='chat'\n           xml:lang='en'>\n
    \        <body>My ears have not yet drunk a hundred words</body>\n         <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n
    \      </message>\n   CC: <message\n           from='juliet@example.com/balcony'\n
    \          to='romeo@example.net'\n           type='chat'\n           xml:lang='en'>\n
    \        <body>Of that tongue's utterance, yet I know the sound:</body>\n         <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n
    \      </message>\n   CC: <message\n           from='juliet@example.com/balcony'\n
    \          to='romeo@example.net'\n           type='chat'\n           xml:lang='en'>\n
    \        <body>Art thou not Romeo, and a Montague?</body>\n         <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n
    \      </message>\n   UC: <message\n           from='romeo@example.net/orchard'\n
    \          to='juliet@example.com/balcony'\n           type='chat'\n           xml:lang='en'>\n
    \        <body>Neither, fair saint, if either thee dislike.</body>\n         <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n
    \      </message>\n   CC: <message\n           from='juliet@example.com/balcony'\n
    \          to='romeo@example.net/orchard'\n           type='chat'\n           xml:lang='en'>\n
    \        <body>How cam'st thou hither, tell me, and wherefore?</body>\n         <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n
    \      </message>\n   And so on.\n   The user can also send subsequent presence
    broadcast.\n   Example 10: User sends updated available presence for broadcast\n
    \  UC: <presence xml:lang='en'>\n         <show>away</show>\n         <status>I
    shall return!</status>\n         <priority>1</priority>\n       </presence>\n
    \  Example 11: User's server broadcasts updated presence to the contacts\n   who
    have a subscription of type \"both\" or \"from\" (but not to the\n   entity to
    which the user sent directed presence)\n   US: <presence\n           from='romeo@example.net/orchard'\n
    \          to='juliet@example.com'\n           xml:lang='en'>\n         <show>away</show>\n
    \        <status>I shall return!</status>\n         <priority>1</priority>\n       </presence>\n
    \  US: <presence\n           from='romeo@example.net/orchard'\n           to='mercutio@example.org'\n
    \          xml:lang='en'>\n         <show>away</show>\n         <status>I shall
    return!</status>\n         <priority>1</priority>\n       </presence>\n   Example
    12: Contacts' servers deliver updated presence\n   CS: <presence\n           from='romeo@example.net/orchard'\n
    \          to='juliet@example.com'\n           xml:lang='en'>\n         <show>away</show>\n
    \        <status>I shall return!</status>\n         <priority>1</priority>\n       </presence>\n
    \  CS: <presence\n           from='romeo@example.net/orchard'\n           to='juliet@example.com'\n
    \          xml:lang='en'>\n         <show>away</show>\n         <status>I shall
    return!</status>\n         <priority>1</priority>\n       </presence>\n   CS:
    <presence\n           from='romeo@example.net/orchard'\n           to='mercutio@example.org'\n
    \          xml:lang='en'>\n         <show>away</show>\n         <status>I shall
    return!</status>\n         <priority>1</priority>\n       </presence>\n   Example
    13: One of the contact's resources broadcasts unavailable\n   notification\n   CC:
    <presence from='juliet@example.com/chamber' type='unavailable'/>\n   Example 14:
    Contact's server sends unavailable notification to user\n   CS: <presence\n           from='juliet@example.com/chamber'\n
    \          to='romeo@example.net'\n           type='unavailable'/>\n   Now the
    user ends his presence session.\n   Example 15: User sends unavailable notification\n
    \  UC: <presence type='unavailable' xml:lang='en'>\n         <status>gone home</status>\n
    \      </presence>\n   Example 16: User's server broadcasts unavailable notification
    to\n   contacts as well as to the entity to whom the user sent directed\n   presence\n
    \  US: <presence\n           from='romeo@example.net/orchard'\n           to='juliet@example.com'\n
    \          type='unavailable'\n           xml:lang='en'>\n         <status>gone
    home</status>\n       </presence>\n   US: <presence\n           from='romeo@example.net/orchard'\n
    \          to='mercutio@example.org'\n           type='unavailable'\n           xml:lang='en'>\n
    \        <status>gone home</status>\n       </presence>\n   US: <presence\n           from='romeo@example.net/orchard'\n
    \          to='nurse@example.com'\n           type='unavailable'\n           xml:lang='en'>\n
    \        <status>gone home</status>\n       </presence>\n   Finally the user closes
    his stream and the server responds in kind.\n   Example 17: User closes stream\n
    \  UC: </stream:stream>\n   Example 18: User's server closes stream\n   US: </stream:stream>\n
    \  THE END\n"
  title: 7.  A Sample Session
- contents:
  - "8.  Server Rules for Processing XML Stanzas\n   Basic server rules for processing
    XML stanzas are defined in\n   [XMPP-CORE], and the reader is referred to that
    specification for\n   underlying rules and security implications.  This section
    defines\n   supplementary rules for XMPP instant messaging and presence servers.\n
    \  Some delivery rules defined in this section specify the use of\n   \"offline
    storage\", i.e., the server's act of storing a message stanza\n   on behalf of
    the user and then delivering it when the user next\n   becomes available.  For
    recommendations regarding offline message\n   storage, refer to [XEP-0160].\n"
  - contents:
    - "8.1.  General Considerations\n   [XMPP-CORE] discusses general considerations
      for stanza delivery, in\n   particular the tradeoffs between (i) providing an
      acceptable level of\n   service regarding stanza delivery and (ii) preventing
      directory\n   harvesting attacks and presence leaks.  However, the concept of
      a\n   directory harvesting attack does not apply if a contact is known to\n
      \  and trusted by a user (because the contact is in the user's roster as\n   described
      under Section 2).  Similarly, the concept of a presence\n   leak does not apply
      if a contact is authorized to know a user's\n   presence (by means of a presence
      subscription as described under\n   Section 3) or if the user has voluntarily
      sent presence to an entity\n   (by means of directed presence as described under
      Section 4.6).\n   Therefore, in cases where the following sections guard against\n
      \  directory harvesting attacks and presence leaks by providing an\n   alternative
      of (a) silently ignoring a stanza or (b) returning an\n   error, a server SHOULD
      return an error if the originating entity is\n   in the user's roster (when
      the error would reveal whether the user's\n   account exists) or is authorized
      to receive presence from the user or\n   has received directed presence from
      the user (when the error would\n   reveal the presence of a user's resource).\n
      \     Security Warning: All of the stanza processing rules described\n      below
      are defined with the understanding that they will be applied\n      subject
      to enforcement of relevant privacy and security policies,\n      such as those
      deployed by means of [XEP-0016] or [XEP-0191].  The\n      conformance language
      (MUST, SHOULD, etc.) in the following\n      sections is not meant to override
      any such local service policies.\n"
    title: 8.1.  General Considerations
  - contents:
    - "8.2.  No 'to' Address\n   If the stanza possesses no 'to' attribute, the rules
      defined in\n   [XMPP-CORE] apply.\n"
    title: 8.2.  No 'to' Address
  - contents:
    - "8.3.  Remote Domain\n   If the domainpart of the address contained in the 'to'
      attribute of\n   an outbound stanza does not match a configured domain of the
      server\n   itself, then the rules provided in Section 10.4 of [XMPP-CORE] apply.\n
      \     Interoperability Note: RFC 3921 specified how to use the _im._xmpp\n      and
      _pres._xmpp SRV records [IMP-SRV] as a fallback method for\n      discovering
      whether a remote instant messaging and presence\n      service communicates
      via XMPP.  Because those SRV records have not\n      been widely deployed, this
      document no longer specifies their use,\n      and new implementations are not
      encouraged.\n"
    title: 8.3.  Remote Domain
  - contents:
    - "8.4.  Local Domain\n   If the domainpart of the JID contained in the 'to' attribute
      matches\n   one of the configured domains of the server, the domain is serviced\n
      \  by the server itself (not by a specialized local service), and the\n   JID
      is of the form <domainpart> or <domainpart/resourcepart>, the\n   rules defined
      in [XMPP-CORE] apply.\n"
    title: 8.4.  Local Domain
  - contents:
    - "8.5.  Local User\n   If the 'to' address specifies a bare JID <localpart@domainpart>
      or\n   full JID <localpart@domainpart/resourcepart> where the domainpart of\n
      \  the JID matches a configured domain that is serviced by the server\n   itself,
      the server MUST proceed as follows.\n"
    - contents:
      - "8.5.1.  No Such User\n   If the user account identified by the 'to' attribute
        does not exist,\n   how the stanza is processed depends on the stanza type.\n
        \  o  For an IQ stanza, the server MUST return a <service-unavailable/>\n
        \     stanza error to the sender.\n   o  For a message stanza, the server
        MUST either (a) silently ignore\n      the message or (b) return a <service-unavailable/>
        stanza error to\n      the sender.\n   o  For a presence stanza with no 'type'
        attribute or a 'type'\n      attribute of \"unavailable\", the server MUST
        silently ignore the\n      stanza.\n   o  For a presence stanza of type \"subscribe\",
        \"subscribed\",\n      \"unsubscribe\", or \"unsubscribed\", the server MUST
        silently ignore\n      the stanza.\n   o  For a presence stanza of type \"probe\",
        the server MUST either (a)\n      silently ignore the stanza or (b) return
        a presence stanza of type\n      \"unsubscribed\".\n"
      title: 8.5.1.  No Such User
    - contents:
      - "8.5.2.  localpart@domainpart\n   If the JID contained in the 'to' attribute
        is of the form\n   <localpart@domainpart>, then the server MUST adhere to
        the following\n   rules.\n"
      - contents:
        - "8.5.2.1.  Available or Connected Resources\n   If there is at least one
          available resource or connected resource,\n   how the stanza is processed
          depends on the stanza type.\n"
        - contents:
          - "8.5.2.1.1.  Message\n   For a message stanza of type \"normal\":\n   o
            \ If all of the available resources have a negative presence\n      priority
            then the server SHOULD either (a) store the message\n      offline for
            later delivery or (b) return a stanza error to the\n      sender, which
            SHOULD be <service-unavailable/>.\n   o  If there is one available resource
            with a non-negative presence\n      priority then the server MUST deliver
            the message to that\n      resource.\n   o  If there is more than one
            resource with a non-negative presence\n      priority then the server
            MUST either (a) deliver the message to\n      the \"most available\" resource
            or resources (according to the\n      server's implementation-specific
            algorithm, e.g., treating the\n      resource or resources with the highest
            presence priority as \"most\n      available\") or (b) deliver the message
            to all of the non-negative\n      resources.\n   For a message stanza
            of type \"chat\":\n   o  If the only available resource has a negative
            presence priority\n      then the server SHOULD either (a) store the message
            offline for\n      later delivery or (b) return a stanza error to the
            sender, which\n      SHOULD be <service-unavailable/>.\n   o  If the only
            available resource has a non-negative presence\n      priority then the
            server MUST deliver the message to that\n      resource.\n   o  If there
            is more than one resource with a non-negative presence\n      priority
            then the server MUST either (a) deliver the message to\n      the \"most
            available\" resource or resources (according to the\n      server's implementation-specific
            algorithm, e.g., treating the\n      resource or resources with the highest
            presence priority as \"most\n      available\") or (b) deliver the message
            to all of the non-negative\n      resources that have opted in to receive
            chat messages.\n   For a message stanza of type \"groupchat\", the server
            MUST NOT deliver\n   the stanza to any of the available resources but
            instead MUST return\n   a stanza error to the sender, which SHOULD be
            <service-unavailable/>.\n   For a message stanza of type \"headline\":\n
            \  o  If the only available resource has a negative presence priority\n
            \     then the server MUST silently ignore the stanza.\n   o  If the only
            available resource has a non-negative presence\n      priority then the
            server MUST deliver the message to that\n      resource.\n   o  If there
            is more than one resource with a non-negative presence\n      priority
            then the server MUST deliver the message to all of the\n      non-negative
            resources.\n   For a message stanza of type \"error\", the server MUST
            silently ignore\n   the message.\n   However, for any message type the
            server MUST NOT deliver the stanza\n   to any available resource with
            a negative priority; if the only\n   available resource has a negative
            priority, the server SHOULD handle\n   the message as if there were no
            available resources or connected\n   resources as described under Section
            8.5.2.2.\n   In all cases, the server MUST NOT rewrite the 'to' attribute
            (i.e.,\n   it MUST leave it as <localpart@domainpart> rather than change
            it to\n   <localpart@domainpart/resourcepart>).\n"
          title: 8.5.2.1.1.  Message
        - contents:
          - "8.5.2.1.2.  Presence\n   For a presence stanza with no type or of type
            \"unavailable\", the\n   server MUST deliver it to all available resources.\n
            \  For a presence stanza of type \"subscribe\", \"subscribed\",\n   \"unsubscribe\",
            or \"unsubscribed\", the server MUST adhere to the rules\n   defined under
            Section 3 and summarized under Appendix A.\n   For a presence stanza of
            type \"probe\", the server MUST handle it\n   directly as described under
            Section 4.3.\n   In all cases, the server MUST NOT rewrite the 'to' attribute
            (i.e.,\n   it MUST leave it as <localpart@domainpart> rather than change
            it to\n   <localpart@domainpart/resourcepart>).\n"
          title: 8.5.2.1.2.  Presence
        - contents:
          - "8.5.2.1.3.  IQ\n   For an IQ stanza, the server itself MUST reply on
            behalf of the user\n   with either an IQ result or an IQ error, and MUST
            NOT deliver the IQ\n   stanza to any of the user's available resources.
            \ Specifically, if\n   the semantics of the qualifying namespace define
            a reply that the\n   server can provide on behalf of the user, then the
            server MUST reply\n   to the stanza on behalf of the user by returning
            either an IQ stanza\n   of type \"result\" or an IQ stanza of type \"error\"
            that is appropriate\n   to the original payload; if not, then the server
            MUST reply with a\n   <service-unavailable/> stanza error.\n"
          title: 8.5.2.1.3.  IQ
        title: 8.5.2.1.  Available or Connected Resources
      - contents:
        - "8.5.2.2.  No Available or Connected Resources\n   If there are no available
          resources or connected resources associated\n   with the user, how the stanza
          is processed depends on the stanza\n   type.\n"
        - contents:
          - "8.5.2.2.1.  Message\n   For a message stanza of type \"normal\" or \"chat\",
            the server SHOULD\n   either (a) add the message to offline storage or
            (b) return a stanza\n   error to the sender, which SHOULD be <service-unavailable/>.\n
            \  For a message stanza of type \"groupchat\", the server MUST return
            an\n   error to the sender, which SHOULD be <service-unavailable/>.\n
            \  For a message stanza of type \"headline\" or \"error\", the server
            MUST\n   silently ignore the message.\n"
          title: 8.5.2.2.1.  Message
        - contents:
          - "8.5.2.2.2.  Presence\n   For a presence stanza with no type or of type
            \"unavailable\", the\n   server SHOULD silently ignore the stanza by not
            storing it for later\n   delivery and not replying to it on behalf of
            the user.\n   For a presence stanza of type \"subscribe\", \"subscribed\",\n
            \  \"unsubscribe\", or \"unsubscribed\", the server MUST adhere to the
            rules\n   defined under Section 3 and summarized under Appendix A.\n   For
            a presence stanza of type \"probe\", the server MUST handle it\n   directly
            as described under Section 4.3.\n"
          title: 8.5.2.2.2.  Presence
        - contents:
          - "8.5.2.2.3.  IQ\n   For an IQ stanza, the server itself MUST reply on
            behalf of the user\n   with either an IQ result or an IQ error.  Specifically,
            if the\n   semantics of the qualifying namespace define a reply that the
            server\n   can provide on behalf of the user, then the server MUST reply
            to the\n   stanza on behalf of the user by returning either an IQ stanza
            of type\n   \"result\" or an IQ stanza of type \"error\" that is appropriate
            to the\n   original payload; if not, then the server MUST reply with a
            <service-\n   unavailable/> stanza error.\n"
          title: 8.5.2.2.3.  IQ
        title: 8.5.2.2.  No Available or Connected Resources
      title: 8.5.2.  localpart@domainpart
    - contents:
      - "8.5.3.  localpart@domainpart/resourcepart\n   If the domainpart of the JID
        contained in the 'to' attribute of an\n   inbound stanza matches one of the
        configured domains of the server\n   itself and the JID contained in the 'to'
        attribute is of the form\n   <localpart@domainpart/resourcepart>, then the
        server MUST adhere to\n   the following rules.\n"
      - contents:
        - "8.5.3.1.  Resource Matches\n   If an available resource or connected resource
          exactly matches the\n   full JID, how the stanza is processed depends on
          the stanza type.\n   o  For an IQ stanza of type \"get\" or \"set\", if
          the intended recipient\n      does not share presence with the requesting
          entity either by means\n      of a presence subscription of type \"both\"
          or \"from\" or by means of\n      directed presence, then the server SHOULD
          NOT deliver the IQ\n      stanza but instead SHOULD return a <service-unavailable/>
          stanza\n      error to the requesting entity.  This policy helps to prevent\n
          \     presence leaks (see Section 11).\n   o  For an IQ stanza of type \"result\"
          or \"error\", the server MUST\n      deliver the stanza to the resource.\n
          \  o  For a message stanza, the server MUST deliver the stanza to the\n
          \     resource.\n   o  For a presence stanza with no 'type' attribute or
          a 'type'\n      attribute of \"unavailable\", the server MUST deliver the
          stanza to\n      the resource.\n   o  For a presence stanza of type \"subscribe\",
          \"subscribed\",\n      \"unsubscribe\", or \"unsubscribed\", the server
          MUST follow the\n      guidelines provided under Section 3.\n   o  For a
          presence stanza of type \"probe\", the server MUST follow the\n      guidelines
          provided under Section 4.3.\n"
        title: 8.5.3.1.  Resource Matches
      - contents:
        - "8.5.3.2.  No Resource Matches\n   If no available resource or connected
          resource exactly matches the\n   full JID, how the stanza is processed depends
          on the stanza type.\n"
        - contents:
          - "8.5.3.2.1.  Message\n   For a message stanza of type \"normal\", \"groupchat\",
            or \"headline\",\n   the server MUST either (a) silently ignore the stanza
            or (b) return\n   an error stanza to the sender, which SHOULD be <service-\n
            \  unavailable/>.\n   For a message stanza of type \"chat\":\n   o  If
            there is no available or connected resource, the server MUST\n      either
            (a) store the message offline for later delivery or (b)\n      return
            an error stanza to the sender, which SHOULD be <service-\n      unavailable/>.\n
            \  o  If all of the available resources have a negative presence\n      priority
            then the server SHOULD (a) store the message offline for\n      later
            delivery or (b) return a stanza error to the sender, which\n      SHOULD
            be <service-unavailable/>.\n   o  If there is one available resource with
            a non-negative presence\n      priority then the server MUST deliver the
            message to that\n      resource.\n   o  If there is more than one resource
            with a non-negative presence\n      priority then the server MUST either
            (a) deliver the message to\n      the \"most available\" resource or resources
            (according to the\n      server's implementation-specific algorithm, e.g.,
            treating the\n      resource or resources with the highest presence priority
            as \"most\n      available\") or (b) deliver the message to all of the
            non-negative\n      resources that have opted in to receive chat messages.\n
            \  For a message stanza of type \"error\", the server MUST silently ignore\n
            \  the stanza.\n"
          title: 8.5.3.2.1.  Message
        - contents:
          - "8.5.3.2.2.  Presence\n   For a presence stanza with no 'type' attribute
            or a 'type' attribute\n   of \"unavailable\", the server MUST silently
            ignore the stanza.\n   For a presence stanza of type \"subscribe\", the
            server MUST follow the\n   guidelines provided under Section 3.1.3.\n
            \  For a presence stanza of type \"subscribed\", \"unsubscribe\", or\n
            \  \"unsubscribed\", the server MUST ignore the stanza.\n   For a presence
            stanza of type \"probe\", the server MUST follow the\n   guidelines provided
            under Section 4.3.\n"
          title: 8.5.3.2.2.  Presence
        - contents:
          - "8.5.3.2.3.  IQ\n   For an IQ stanza, the server MUST return a <service-unavailable/>\n
            \  stanza error to the sender.\n"
          title: 8.5.3.2.3.  IQ
        title: 8.5.3.2.  No Resource Matches
      title: 8.5.3.  localpart@domainpart/resourcepart
    - contents:
      - "8.5.4.  Summary of Message Delivery Rules\n   The following table summarizes
        the message (not stanza) delivery\n   rules described earlier in this section.
        \ The left column shows\n   various combinations of conditions (non-existent
        account, no active\n   resources, only one resource and it has a negative
        presence priority,\n   only one resource and it has a non-negative presence
        priority, or\n   more than one resource and each one has a non-negative presence\n
        \  priority) and 'to' addresses (bare JID, full JID matching an\n   available
        resource, or full JID matching no available resource).  The\n   subsequent
        columns list the four primary message types (normal, chat,\n   groupchat,
        or headline) along with six possible delivery options:\n   storing the message
        offline (O), bouncing the message with a stanza\n   error (E), silently ignoring
        the message (S), delivering the message\n   to the resource specified in the
        'to' address (D), delivering the\n   message to the \"most available\" resource
        or resources according to\n   the server's implementation-specific algorithm,
        e.g., treating the\n   resource or resources with the highest presence priority
        as \"most\n   available\" (M), or delivering the message to all resources
        with non-\n   negative presence priority (A -- where for chat messages \"all\n
        \  resources\" can mean the set of resources that have explicitly opted\n
        \  in to receiving every chat message).  The '/' character stands for\n   \"exclusive
        or\".  The server SHOULD observe the rules given in section\n   8.1 when choosing
        which action to take for a particular message.\n   Table 1: Message Delivery
        Rules\n   +----------------------------------------------------------+\n   |
        Condition        | Normal | Chat  | Groupchat | Headline |\n   +----------------------------------------------------------+\n
        \  | ACCOUNT DOES NOT EXIST                                   |\n   |  bare
        \           |  S/E   |  S/E  |     E     |    S     |\n   |  full            |
        \ S/E   |  S/E  |    S/E    |   S/E    |\n   +----------------------------------------------------------+\n
        \  | ACCOUNT EXISTS, BUT NO ACTIVE RESOURCES                  |\n   |  bare
        \           |  O/E   |  O/E  |     E     |    S     |\n   |  full (no match)
        |  S/E   |  O/E  |    S/E    |   S/E    |\n   +----------------------------------------------------------+\n
        \  | 1+ NEGATIVE RESOURCES BUT ZERO NON-NEGATIVE RESOURCES    |\n   |  bare
        \           |  O/E   |  O/E  |     E     |    S     |\n   |  full match      |
        \  D    |   D   |     D     |    D     |\n   |  full no match   |  S/E   |
        \ O/E  |    S/E    |   S/E    |\n   +----------------------------------------------------------+\n
        \  | 1 NON-NEGATIVE RESOURCE                                  |\n   |  bare
        \           |   D    |   D   |     E     |    D     |\n   |  full match      |
        \  D    |   D   |     D     |    D     |\n   |  full no match   |  S/E   |
        \  D   |    S/E    |   S/E    |\n   +----------------------------------------------------------+\n
        \  | 1+ NON-NEGATIVE RESOURCES                                |\n   |  bare
        \           |  M/A   |  M/A* |     E     |    A     |\n   |  full match      |
        \  D    |  D/A* |     D     |    D     |\n   |  full no match   |  S/E   |
        \ M/A* |    S/E    |   S/E    |\n   +----------------------------------------------------------+\n
        \     * For messages of type \"chat\", a server SHOULD NOT act in\n      accordance
        with option (A) unless clients can explicitly opt in to\n      receiving all
        chat messages; however, methods for opting in are\n      outside the scope
        of this specification.\n"
      title: 8.5.4.  Summary of Message Delivery Rules
    title: 8.5.  Local User
  title: 8.  Server Rules for Processing XML Stanzas
- contents:
  - "9.  Handling of URIs\n   The addresses of XMPP entities as used in communication
    over an XMPP\n   network (e.g., in the 'from' and 'to' addresses of an XML stanza)\n
    \  MUST NOT be prepended with a Uniform Resource Identifier [URI]\n   scheme.\n
    \  However, an application that is external to XMPP itself (e.g., a page\n   on
    the World Wide Web) might need to identify an XMPP entity either\n   as a URI
    or as an Internationalized Resource Identifier [IRI], and an\n   XMPP client might
    need to interact with such an external application\n   (for example, an XMPP client
    might be invoked by clicking a link\n   provided on a web page).  In the context
    of such interactions, XMPP\n   clients are encouraged to handle addresses that
    are encoded as\n   \"xmpp:\" URIs and IRIs as specified in [XMPP-URI] and further\n
    \  described in [XEP-0147].  Although XMPP clients are also encouraged\n   to
    handle addresses that are encoded as \"im:\" URIs as specified in\n   [CPIM] and
    \"pres:\" URIs as specified in [CPP], they can do so by\n   removing the \"im:\"
    or \"pres:\" scheme and entrusting address\n   resolution to the server as specified
    under Section 8.3.\n"
  title: 9.  Handling of URIs
- contents:
  - "10.  Internationalization Considerations\n   For internationalization considerations,
    refer to the relevant\n   section of [XMPP-CORE].\n"
  title: 10.  Internationalization Considerations
- contents:
  - "11.  Security Considerations\n   Core security considerations for XMPP are provided
    in Section 13 of\n   [XMPP-CORE], including discussion of channel encryption,\n
    \  authentication, information leaks, denial-of-service attacks, and\n   interdomain
    federation.\n   Section 13.1 of [XMPP-CORE] outlines the architectural roles of\n
    \  clients and servers in typical deployments of XMPP, and discusses the\n   security
    properties associated with those roles.  These roles have an\n   impact on the
    security of instant messages, presence subscriptions,\n   and presence notifications
    as described in this document.  In\n   essence, an XMPP user registers (or has
    provisioned) an account on an\n   XMPP server and therefore places some level
    of trust in the server to\n   complete various tasks on the user's behalf, enforce
    security\n   policies, etc.  Thus it is the server's responsibility to:\n   1.
    \ Preferably mandate the use of channel encryption for\n       communication with
    local clients and remote servers.\n   2.  Authenticate any client that wishes
    to access the user's account.\n   3.  Process XML stanzas to and from clients
    that have authenticated\n       as the user (specifically with regard to instant
    messaging and\n       presence functionality, store the user's roster, process
    inbound\n       and outbound subscription requests and responses, generate and\n
    \      handle presence probes, broadcast outbound presence\n       notifications,
    route outbound messages, and deliver inbound\n       messages and presence notifications).\n
    \  As discussed in Sections 13.1 and 13.4 of [XMPP-CORE], even if the\n   server
    fulfills the foregoing responsibilities, the client does not\n   have any assurance
    that stanzas it might exchange with other clients\n   (whether on the same server
    or a remote server) are protected for all\n   hops along the XMPP communication
    path, or within the server itself.\n   It is the responsibility of the client
    to use an appropriate\n   technology for encryption and signing of XML stanzas
    if it wishes to\n   ensure end-to-end confidentiality and integrity of its\n   communications.\n
    \  Additional considerations that apply only to instant messaging and\n   presence
    applications of XMPP are defined in several places within\n   this document; specifically:\n
    \  o  When a server processes an inbound presence stanza of type \"probe\"\n      whose
    intended recipient is a user associated with one of the\n      server's configured
    domains, the server MUST NOT reveal the user's\n      presence if the sender is
    an entity that is not authorized to\n      receive that information as determined
    by presence subscriptions\n      (see Section 4).\n   o  A user's server MUST
    NOT leak the user's network availability to\n      entities who are not authorized
    to know the user's presence.  In\n      XMPP itself, authorization takes the form
    of an explicit\n      subscription from a contact to the user (as described under\n
    \     Section 3).  However, some XMPP deployments might consider an\n      entity
    to be authorized if there is an existing trust relationship\n      between the
    entity and the user who is generating presence\n      information (as an example,
    a corporate deployment of XMPP might\n      automatically add the user's presence
    information to a private\n      directory of employees if the organization mandates
    the sharing of\n      presence information as part of an employment agreement).\n
    \  o  When a server processes an outbound presence stanza with no type\n      or
    of type \"unavailable\", it MUST follow the rules defined under\n      Section
    4 in order to ensure that such presence information is not\n      sent to entities
    that are not authorized to know such information.\n   o  A client MAY ignore the
    <status/> element when contained in a\n      presence stanza of type \"subscribe\",
    \"unsubscribe\", \"subscribed\",\n      or \"unsubscribed\"; this can help prevent
    \"presence subscription\n      spam\".\n"
  title: 11.  Security Considerations
- contents:
  - "12.  Conformance Requirements\n   This section describes a protocol feature set
    that summarizes the\n   conformance requirements of this specification.  This
    feature set is\n   appropriate for use in software certification, interoperability\n
    \  testing, and implementation reports.  For each feature, this section\n   provides
    the following information:\n   o  A human-readable name\n   o  An informational
    description\n   o  A reference to the particular section of this document that\n
    \     normatively defines the feature\n   o  Whether the feature applies to the
    Client role, the Server role,\n      or both (where \"N/A\" signifies that the
    feature is not applicable\n      to the specified role)\n   o  Whether the feature
    MUST or SHOULD be implemented, where the\n      capitalized terms are to be understood
    as described in [KEYWORDS]\n   The feature set specified here attempts to adhere
    to the concepts and\n   formats proposed by Larry Masinter within the IETF's NEWTRK
    Working\n   Group in 2005, as captured in [INTEROP].  Although this feature set\n
    \  is more detailed than called for by [REPORTS], it provides a suitable\n   basis
    for the generation of implementation reports to be submitted in\n   support of
    advancing this specification from Proposed Standard to\n   Draft Standard in accordance
    with [PROCESS].\n   Feature:  message-body\n   Description:  Support the <body/>
    child element of the <message/>\n      stanza.\n   Section:  Section 5.2.3\n   Roles:
    \ Client MUST, Server N/A.\n   Feature:  message-subject\n   Description:  Support
    the <subject/> child element of the <message/>\n      stanza.\n   Section:  Section
    5.2.4\n   Roles:  Client SHOULD, Server N/A.\n   Feature:  message-thread\n   Description:
    \ Support the <thread/> child element of the <message/>\n      stanza.\n   Section:
    \ Section 5.2.5\n   Roles:  Client SHOULD, Server N/A.\n   Feature:  message-type-support\n
    \  Description:  Support reception of messages of type \"normal\", \"chat\",\n
    \     \"groupchat\", \"headline\", and \"error\".\n   Section:  Section 5.2.2\n
    \  Roles:  Client SHOULD, Server N/A.\n   Feature:  message-type-deliver\n   Description:
    \ Appropriately deliver messages of type \"normal\",\n      \"chat\", \"groupchat\",
    \"headline\", and \"error\".\n   Section:  Section 8\n   Roles:  Client N/A, Server
    SHOULD.\n   Feature:  presence-notype\n   Description:  Treat a presence stanza
    with no 'type' attribute as\n      indicating availability.\n   Section:  Section
    4.7.1\n   Roles:  Client MUST, Server MUST.\n   Feature:  presence-probe\n   Description:
    \ Send and receive presence stanzas with a 'type'\n      attribute of \"probe\"
    for the discovery of presence information.\n   Section:  Section 4.7.1\n   Roles:
    \ Client N/A, Server MUST.\n   Feature:  presence-sub-approval\n   Description:
    \ Treat an outbound presence stanza of type \"subscribed\"\n      as the act of
    approving a presence subscription request previously\n      received from another
    entity, and treat an inbound presence stanza\n      of type \"subscribed\" as
    a subscription approval from another\n      entity.\n   Section:  Section 3.1\n
    \  Roles:  Client MUST, Server MUST.\n   Feature:  presence-sub-cancel\n   Description:
    \ Treat an outbound presence stanza of type\n      \"unsubscribed\" as the act
    of denying a subscription request\n      received from another entity or canceling
    a subscription approval\n      previously granted to another entity, and treat
    an inbound\n      presence stanza of type \"unsubscribed\" as an subscription
    denial\n      or cancellation from another entity.\n   Section:  Section 3.2\n
    \  Roles:  Client MUST, Server MUST.\n   Feature:  presence-sub-preapproval\n
    \  Description:  Treat an outbound presence stanza of type \"subscribed\"\n      in
    certain circumstances as the act of pre-approving a\n      subscription request
    received from another entity; this includes\n      support for the 'approved'
    attribute of the <item/> element within\n      the 'jabber:iq:roster' namespace.\n
    \  Section:  Section 3.4\n   Roles:  Client MAY, Server MAY.\n   Feature:  presence-sub-request\n
    \  Description:  Treat an outbound presence stanza of type \"subscribe\"\n      as
    the act of requesting a subscription to the presence\n      information of another
    entity, and treat an inbound presence\n      stanza of type \"subscribe\" as a
    presence subscription request from\n      another entity.\n   Section:  Section
    3.1\n   Roles:  Client MUST, Server MUST.\n   Feature:  presence-sub-unsubscribe\n
    \  Description:  Treat an outbound presence stanza of type \"unsubscribe\"\n      as
    the act of unsubscribing from another entity, and treat an\n      inbound presence
    stanza of type \"unsubscribe\" as an unsubscribe\n      notification from another
    entity.\n   Section:  Section 3.3\n   Roles:  Client MUST, Server MUST.\n   Feature:
    \ presence-unavailable\n   Description:  Treat a presence stanza with a 'type'
    attribute of\n      \"unavailable\" as indicating lack of availability.\n   Section:
    \ Section 4.7.1\n   Roles:  Client MUST, Server MUST.\n   Feature:  roster-get\n
    \  Description:  Treat an IQ stanza of type \"get\" containing an empty\n      <query/>
    element qualified by the 'jabber:iq:roster' namespace as\n      a request to retrieve
    the roster information associated with an\n      account on a server.\n   Section:
    \ Section 2.1.3\n   Roles:  Client MUST, Server MUST.\n   Feature:  roster-set\n
    \  Description:  Treat an IQ stanza of type \"set\" containing a <query/>\n      element
    qualified by the 'jabber:iq:roster' namespace as a request\n      to add or update
    the item contained in the <query/> element.\n   Section:  Section 2.1.5\n   Roles:
    \ Client MUST, Server MUST.\n   Feature:  roster-push\n   Description:  Send a
    roster push to each interested resource whenever\n      the server-side representation
    of the roster information\n      materially changes, or handle such a push when
    received from the\n      server.\n   Section:  Section 2.1.6\n   Roles:  Client
    MUST, Server MUST.\n   Feature:  roster-version\n   Description:  Treat the 'ver'
    attribute of the <query/> element\n      qualified by the 'jabber:iq:roster' namespace
    as an identifier of\n      the particular version of roster information being
    sent or\n      received.\n   Section:  Section 2.1.1\n   Roles:  Client SHOULD,
    Server MUST.\n"
  title: 12.  Conformance Requirements
- contents:
  - '13.  References

    '
  - contents:
    - "13.1.  Normative References\n   [DELAY]    Saint-Andre, P., \"Delayed Delivery\",
      XSF XEP 0203,\n              September 2009.\n   [KEYWORDS]\n              Bradner,
      S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\",
      BCP 14, RFC 2119, March 1997.\n   [XML]      Maler, E., Yergeau, F., Sperberg-McQueen,
      C., Paoli, J.,\n              and T. Bray, \"Extensible Markup Language (XML)
      1.0 (Fifth\n              Edition)\", World Wide Web Consortium\n              Recommendation
      REC-xml-20081126, November 2008,\n              <http://www.w3.org/TR/2008/REC-xml-20081126>.\n
      \  [XML-NAMES]\n              Bray, T., Hollander, D., and A. Layman, \"Namespaces
      in\n              XML\", W3C REC-xml-names, January 1999,\n              <http://www.w3.org/TR/REC-xml-names>.\n
      \  [XMPP-CORE]\n              Saint-Andre, P., \"Extensible Messaging and Presence\n
      \             Protocol (XMPP): Core\", RFC 6120, March 2011.\n"
    title: 13.1.  Normative References
  - contents:
    - "13.2.  Informative References\n   [CPIM]     Peterson, J., \"Common Profile
      for Instant Messaging\n              (CPIM)\", RFC 3860, August 2004.\n   [CPP]
      \     Peterson, J., \"Common Profile for Presence (CPP)\",\n              RFC
      3859, August 2004.\n   [DOS]      Handley, M., Rescorla, E., and IAB, \"Internet
      Denial-of-\n              Service Considerations\", RFC 4732, December 2006.\n
      \  [IMP-MODEL]\n              Day, M., Rosenberg, J., and H. Sugano, \"A Model
      for\n              Presence and Instant Messaging\", RFC 2778, February 2000.\n
      \  [IMP-REQS]\n              Day, M., Aggarwal, S., and J. Vincent, \"Instant
      Messaging\n              / Presence Protocol Requirements\", RFC 2779,\n              February
      2000.\n   [IMP-SRV]  Peterson, J., \"Address Resolution for Instant Messaging\n
      \             and Presence\", RFC 3861, August 2004.\n   [INTEROP]  Masinter,
      L., \"Formalizing IETF Interoperability\n              Reporting\", Work in
      Progress, October 2005.\n   [IRC]      Kalt, C., \"Internet Relay Chat: Architecture\",
      RFC 2810,\n              April 2000.\n   [IRI]      Duerst, M. and M. Suignard,
      \"Internationalized Resource\n              Identifiers (IRIs)\", RFC 3987,
      January 2005.\n   [PROCESS]  Bradner, S., \"The Internet Standards Process --
      Revision\n              3\", BCP 9, RFC 2026, October 1996.\n   [REPORTS]  Dusseault,
      L. and R. Sparks, \"Guidance on Interoperation\n              and Implementation
      Reports for Advancement to Draft\n              Standard\", BCP 9, RFC 5657,
      September 2009.\n   [RFC3920]  Saint-Andre, P., Ed., \"Extensible Messaging
      and Presence\n              Protocol (XMPP): Core\", RFC 3920, October 2004.\n
      \  [RFC3921]  Saint-Andre, P., Ed., \"Extensible Messaging and Presence\n              Protocol
      (XMPP): Instant Messaging and Presence\",\n              RFC 3921, October 2004.\n
      \  [SASL]     Melnikov, A. and K. Zeilenga, \"Simple Authentication and\n              Security
      Layer (SASL)\", RFC 4422, June 2006.\n   [SIP-PRES]\n              Rosenberg,
      J., \"A Presence Event Package for the Session\n              Initiation Protocol
      (SIP)\", RFC 3856, August 2004.\n   [TLS]      Dierks, T. and E. Rescorla, \"The
      Transport Layer Security\n              (TLS) Protocol Version 1.2\", RFC 5246,
      August 2008.\n   [TLS-CERTS]\n              Saint-Andre, P. and J. Hodges, \"Representation
      and\n              Verification of Domain-Based Application Service Identity\n
      \             within Internet Public Key Infrastructure Using X.509\n              (PKIX)
      Certificates in the Context of Transport Layer\n              Security (TLS)\",
      RFC 6125, March 2011.\n   [UNICODE]  The Unicode Consortium, \"The Unicode Standard,
      Version\n              6.0\", 2010,\n              <http://www.unicode.org/versions/Unicode6.0.0/>.\n
      \  [URI]      Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource
      Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, January
      2005.\n   [UUID]     Leach, P., Mealling, M., and R. Salz, \"A Universally\n
      \             Unique IDentifier (UUID) URN Namespace\", RFC 4122,\n              July
      2005.\n   [XEP-0016]\n              Millard, P. and P. Saint-Andre, \"Privacy
      Lists\", XSF\n              XEP 0016, February 2007.\n   [XEP-0045]\n              Saint-Andre,
      P., \"Multi-User Chat\", XSF XEP 0045,\n              July 2008.\n   [XEP-0054]\n
      \             Saint-Andre, P., \"vcard-temp\", XSF XEP 0054, July 2008.\n   [XEP-0071]\n
      \             Saint-Andre, P., \"XHTML-IM\", XSF XEP 0071, September 2008.\n
      \  [XEP-0115]\n              Hildebrand, J., Saint-Andre, P., and R. Troncon,
      \"Entity\n              Capabilities\", XSF XEP 0115, February 2008.\n   [XEP-0147]\n
      \             Saint-Andre, P., \"XMPP URI Scheme Query Components\", XSF\n              XEP
      0147, September 2006.\n   [XEP-0160]\n              Saint-Andre, P., \"Best
      Practices for Handling Offline\n              Messages\", XSF XEP 0160, January
      2006.\n   [XEP-0163]\n              Saint-Andre, P. and K. Smith, \"Personal
      Eventing\n              Protocol\", XSF XEP 0163, July 2010.\n   [XEP-0191]\n
      \             Saint-Andre, P., \"Simple Communications Blocking\", XSF\n              XEP
      0191, February 2007.\n   [XEP-0201]\n              Saint-Andre, P., Paterson,
      I., and K. Smith, \"Best\n              Practices for Message Threads\", XSF
      XEP 0201,\n              November 2010.\n   [XEP-0237]\n              Saint-Andre,
      P. and D. Cridland, \"Roster Versioning\", XSF\n              XEP 0237, March
      2010.\n   [XML-DATATYPES]\n              Biron, P. and A. Malhotra, \"XML Schema
      Part 2: Datatypes\n              Second Edition\", W3C REC-xmlschema-2, October
      2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/>.\n
      \  [XML-SCHEMA]\n              Thompson, H., Maloney, M., Mendelsohn, N., and
      D. Beech,\n              \"XML Schema Part 1: Structures Second Edition\", World
      Wide\n              Web Consortium Recommendation REC-xmlschema-1-20041028,\n
      \             October 2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-1-20041028>.\n
      \  [XMPP-ADDR]\n              Saint-Andre, P., \"Extensible Messaging and Presence\n
      \             Protocol (XMPP): Address Format\", RFC 6122, March 2011.\n   [XMPP-URI]\n
      \             Saint-Andre, P., \"Internationalized Resource Identifiers\n              (IRIs)
      and Uniform Resource Identifiers (URIs) for the\n              Extensible Messaging
      and Presence Protocol (XMPP)\",\n              RFC 5122, February 2008.\n   [VCARD]
      \   Dawson, F. and T. Howes, \"vCard MIME Directory Profile\",\n              RFC
      2426, September 1998.\n"
    title: 13.2.  Informative References
  title: 13.  References
- contents:
  - "Appendix A.  Subscription States\n   This section provides detailed information
    about subscription states\n   and server processing of subscription-related presence
    stanzas (i.e.,\n   presence stanzas of type \"subscribe\", \"subscribed\", \"unsubscribe\",\n
    \  and \"unsubscribed\").\n"
  - contents:
    - "A.1.  Defined States\n   There are four primary subscription states (these
      states are\n   described from the perspective of the user, not the contact):\n
      \  None:  The user does not have a subscription to the contact's\n      presence,
      and the contact does not have a subscription to the\n      user's presence.\n
      \  To:  The user has a subscription to the contact's presence, but the\n      contact
      does not have a subscription to the user's presence.\n   From:  The contact
      has a subscription to the user's presence, but the\n      user does not have
      a subscription to the contact's presence.\n   Both:  Both the user and the contact
      have subscriptions to each\n      other's presence (i.e., the union of 'from'
      and 'to').\n      Implementation Note: For the purpose of processing subscription-\n
      \     related presence stanzas as described in the following sections, a\n      subscription
      state of \"None\" includes the case of the contact not\n      being in the user's
      roster at all, i.e., an unknown entity from\n      the perspective of the user's
      roster.\n   The foregoing states are supplemented by various sub-states related\n
      \  to pending inbound and outbound subscriptions, thus yielding nine\n   possible
      subscription states:\n   1.  \"None\" = Contact and user are not subscribed
      to each other, and\n       neither has requested a subscription from the other;
      this is\n       reflected in the user's roster by subscription='none'.\n   2.
      \ \"None + Pending Out\" = Contact and user are not subscribed to\n       each
      other, and user has sent contact a subscription request but\n       contact
      has not replied yet; this is reflected in the user's\n       roster by subscription='none'
      and ask='subscribe'.\n   3.  \"None + Pending In\" = Contact and user are not
      subscribed to each\n       other, and contact has sent user a subscription request
      but user\n       has not replied yet.  This state might or might not be reflected\n
      \      in the user's roster, as follows: if the user has created a\n       roster
      item for the contact then the server MUST maintain that\n       roster item
      and also note the existence of the inbound presence\n       subscription request,
      whereas if the user has not created a\n       roster item for the contact then
      the user's server MUST note the\n       existence of the inbound presence subscription
      request but MUST\n       NOT create a roster item for the contact (instead,
      the server\n       MUST wait until the user has approved the subscription request\n
      \      before adding the contact to the user's roster).\n   4.  \"None + Pending
      Out+In\" = Contact and user are not subscribed to\n       each other, contact
      has sent user a subscription request but user\n       has not replied yet, and
      user has sent contact a subscription\n       request but contact has not replied
      yet; this is reflected in the\n       user's roster by subscription='none' and
      ask='subscribe'.\n   5.  \"To\" = User is subscribed to contact (one-way); this
      is reflected\n       in the user's roster by subscription='to'.\n   6.  \"To
      + Pending In\" = User is subscribed to contact, and contact\n       has sent
      user a subscription request but user has not replied\n       yet; this is reflected
      in the user's roster by subscription='to'.\n   7.  \"From\" = Contact is subscribed
      to user (one-way); this is\n       reflected in the user's roster by subscription='from'.\n
      \  8.  \"From + Pending Out\" = Contact is subscribed to user, and user\n       has
      sent contact a subscription request but contact has not\n       replied yet;
      this is reflected in the user's roster by\n       subscription='from' and ask='subscribe'.\n
      \  9.  \"Both\" = User and contact are subscribed to each other (two-way);\n
      \      this is reflected in the user's roster by subscription='both'.\n"
    title: A.1.  Defined States
  - contents:
    - "A.2.  Server Processing of Outbound Presence Subscription Stanzas\n   Outbound
      presence subscription stanzas enable the user to manage his\n   or her subscription
      to the contact's presence (via the \"subscribe\"\n   and \"unsubscribe\" types),
      and to manage the contact's access to the\n   user's presence (via the \"subscribed\"
      and \"unsubscribed\" types).\n   The following rules apply to outbound routing
      of the stanza as well\n   as changes to the user's roster.  (These rules are
      described from the\n   perspective of the user, not the contact.  In addition,
      \"S.N.\" stands\n   for SHOULD NOT and \"M.N.\" stands for MUST NOT.)\n"
    - contents:
      - "A.2.1.  Subscribe\n   Table 2: Processing of outbound \"subscribe\" stanzas\n
        \  +------------------------------------------------------------------+\n
        \  |  EXISTING STATE          |  ROUTE?   |  NEW STATE                |\n
        \  +------------------------------------------------------------------+\n
        \  |  \"None\"                  |  MUST [1] |  \"None + Pending Out\"     |\n
        \  |  \"None + Pending Out\"    |  MUST     |  no state change          |\n
        \  |  \"None + Pending In\"     |  MUST [1] |  \"None + Pending Out+In\"  |\n
        \  |  \"None + Pending Out+In\" |  MUST     |  no state change          |\n
        \  |  \"To\"                    |  MUST     |  no state change          |\n
        \  |  \"To + Pending In\"       |  MUST     |  no state change          |\n
        \  |  \"From\"                  |  MUST [1] |  \"From + Pending Out\"     |\n
        \  |  \"From + Pending Out\"    |  MUST     |  no state change          |\n
        \  |  \"Both\"                  |  MUST     |  no state change          |\n
        \  +------------------------------------------------------------------+\n
        \     [1] A state change to \"pending out\" includes setting the 'ask'\n      flag
        to a value of \"subscribe\" in the user's roster.\n"
      title: A.2.1.  Subscribe
    - contents:
      - "A.2.2.  Unsubscribe\n   Table 3: Processing of outbound \"unsubscribe\" stanzas\n
        \  +-----------------------------------------------------------------+\n   |
        \ EXISTING STATE          |  ROUTE?  |  NEW STATE                |\n   +-----------------------------------------------------------------+\n
        \  |  \"None\"                  |  MUST    |  no state change          |\n
        \  |  \"None + Pending Out\"    |  MUST    |  \"None\"                   |\n
        \  |  \"None + Pending In\"     |  MUST    |  no state change          |\n
        \  |  \"None + Pending Out+In\" |  MUST    |  \"None + Pending In\"      |\n
        \  |  \"To\"                    |  MUST    |  \"None\"                   |\n
        \  |  \"To + Pending In\"       |  MUST    |  \"None + Pending In\"      |\n
        \  |  \"From\"                  |  MUST    |  no state change          |\n
        \  |  \"From + Pending Out\"    |  MUST    |  \"From\"                   |\n
        \  |  \"Both\"                  |  MUST    |  \"From\"                   |\n
        \  +-----------------------------------------------------------------+\n"
      title: A.2.2.  Unsubscribe
    - contents:
      - "A.2.3.  Subscribed\n   Table 4: Processing of outbound \"subscribed\" stanzas\n
        \  +-----------------------------------------------------------------+\n   |
        \ EXISTING STATE          |  ROUTE?  |  NEW STATE                |\n   +-----------------------------------------------------------------+\n
        \  |  \"None\"                  |  M.N.    |  pre-approval [1]         |\n
        \  |  \"None + Pending Out\"    |  M.N.    |  pre-approval [1]         |\n
        \  |  \"None + Pending In\"     |  MUST    |  \"From\"                   |\n
        \  |  \"None + Pending Out+In\" |  MUST    |  \"From + Pending Out\"     |\n
        \  |  \"To\"                    |  M.N.    |  pre-approval [1]         |\n
        \  |  \"To + Pending In\"       |  MUST    |  \"Both\"                   |\n
        \  |  \"From\"                  |  M.N.    |  no state change          |\n
        \  |  \"From + Pending Out\"    |  M.N.    |  no state change          |\n
        \  |  \"Both\"                  |  M.N.    |  no state change          |\n
        \  +-----------------------------------------------------------------+\n      [1]
        Detailed information regarding subscription pre-approval is\n      provided
        under Section 3.4.\n"
      title: A.2.3.  Subscribed
    - contents:
      - "A.2.4.  Unsubscribed\n   Table 5: Processing of outbound \"unsubscribed\"
        stanzas\n   +-----------------------------------------------------------------+\n
        \  |  EXISTING STATE          |  ROUTE?  |  NEW STATE                |\n   +-----------------------------------------------------------------+\n
        \  |  \"None\"                  |  S.N.    |  no state change [1]      |\n
        \  |  \"None + Pending Out\"    |  S.N.    |  no state change [1]      |\n
        \  |  \"None + Pending In\"     |  MUST    |  \"None\"                   |\n
        \  |  \"None + Pending Out+In\" |  MUST    |  \"None + Pending Out\"     |\n
        \  |  \"To\"                    |  S.N.    |  no state change [1]      |\n
        \  |  \"To + Pending In\"       |  MUST    |  \"To\"                     |\n
        \  |  \"From\"                  |  MUST    |  \"None\"                   |\n
        \  |  \"From + Pending Out\"    |  MUST    |  \"None + Pending Out\"     |\n
        \  |  \"Both\"                  |  MUST    |  \"To\"                     |\n
        \  +-----------------------------------------------------------------+\n      [1]
        This event can result in cancellation of a subscription pre-\n      approval,
        as described under Section 3.4.\n"
      title: A.2.4.  Unsubscribed
    title: A.2.  Server Processing of Outbound Presence Subscription Stanzas
  - contents:
    - "A.3.  Server Processing of Inbound Presence Subscription Stanzas\n   Inbound
      presence subscription stanzas request a subscription-related\n   action from
      the user (via the \"subscribe\" type), inform the user of\n   subscription-related
      actions taken by the contact (via the\n   \"unsubscribe\" type), or enable the
      user to manage the contact's\n   access to the user's presence information (via
      the \"subscribed\" and\n   \"unsubscribed\" types).\n   The following rules
      apply to delivery of the inbound stanza as well\n   as changes to the user's
      roster.  (These rules for server processing\n   of inbound presence subscription
      stanzas are described from the\n   perspective of the user, not the contact.
      \ In addition, \"S.N.\" stands\n   for SHOULD NOT.)\n"
    - contents:
      - "A.3.1.  Subscribe\n   Table 6: Processing of inbound \"subscribe\" stanzas\n
        \  +------------------------------------------------------------------+\n
        \  |  EXISTING STATE          |  DELIVER?  |  NEW STATE               |\n
        \  +------------------------------------------------------------------+\n
        \  |  \"None\"                  |  MUST [1]  |  \"None + Pending In\"     |\n
        \  |  \"None + Pending Out\"    |  MUST      |  \"None + Pending Out+In\"
        |\n   |  \"None + Pending In\"     |  S.N.      |  no state change         |\n
        \  |  \"None + Pending Out+In\" |  S.N.      |  no state change         |\n
        \  |  \"To\"                    |  MUST      |  \"To + Pending In\"       |\n
        \  |  \"To + Pending In\"       |  S.N.      |  no state change         |\n
        \  |  \"From\"                  |  S.N. [2]  |  no state change         |\n
        \  |  \"From + Pending Out\"    |  S.N. [2]  |  no state change         |\n
        \  |  \"Both\"                  |  S.N. [2]  |  no state change         |\n
        \  +------------------------------------------------------------------+\n
        \     [1] If the user previously sent presence of type \"subscribed\" as\n
        \     described under Appendix A.2.3 and Section 3.4, then the server\n      MAY
        auto-reply with \"subscribed\" and change the state to \"From\"\n      rather
        than \"None + Pending In\".\n      [2] Server SHOULD auto-reply with \"subscribed\".\n"
      title: A.3.1.  Subscribe
    - contents:
      - "A.3.2.  Unsubscribe\n   When the user's server receives a presence stanza
        of type\n   \"unsubscribe\" for the user from the contact, if the stanza results
        in\n   a subscription state change from the user's perspective then the\n
        \  user's server MUST change the state, MUST deliver the presence stanza\n
        \  from the contact to the user, and SHOULD auto-reply by sending a\n   presence
        stanza of type \"unsubscribed\" to the contact on behalf of\n   the user.
        \ Otherwise the user's server MUST NOT change the state and\n   (because there
        is no state change) SHOULD NOT deliver the stanza.\n   These rules are summarized
        in the following table.\n   Table 7: Processing of inbound \"unsubscribe\"
        stanzas\n   +------------------------------------------------------------------+\n
        \  |  EXISTING STATE          |  DELIVER?  |  NEW STATE               |\n
        \  +------------------------------------------------------------------+\n
        \  |  \"None\"                  |  S.N.      |  no state change         |\n
        \  |  \"None + Pending Out\"    |  S.N.      |  no state change         |\n
        \  |  \"None + Pending In\"     |  MUST [1]  |  \"None\"                  |\n
        \  |  \"None + Pending Out+In\" |  MUST [1]  |  \"None + Pending Out\"    |\n
        \  |  \"To\"                    |  S.N.      |  no state change         |\n
        \  |  \"To + Pending In\"       |  MUST [1]  |  \"To\"                    |\n
        \  |  \"From\"                  |  MUST [1]  |  \"None\"                  |\n
        \  |  \"From + Pending Out\"    |  MUST [1]  |  \"None + Pending Out\"    |\n
        \  |  \"Both\"                  |  MUST [1]  |  \"To\"                    |\n
        \  +------------------------------------------------------------------+\n
        \  [1] Server SHOULD auto-reply with \"unsubscribed\".\n"
      title: A.3.2.  Unsubscribe
    - contents:
      - "A.3.3.  Subscribed\n   When the user's server receives a presence stanza
        of type\n   \"subscribed\" for the user from the contact, if there is no pending\n
        \  outbound request for access to the contact's presence information,\n   then
        it MUST NOT change the subscription state and (because there is\n   no state
        change) SHOULD NOT deliver the stanza to the user.  If there\n   is a pending
        outbound request for access to the contact's presence\n   information and
        the inbound presence stanza of type \"subscribed\"\n   results in a subscription
        state change, then the user's server MUST\n   change the subscription state
        and MUST deliver the stanza to the\n   user.  If the user already is subscribed
        to the contact's presence\n   information, the inbound presence stanza of
        type \"subscribed\" does\n   not result in a subscription state change; therefore
        the user's\n   server MUST NOT change the subscription state and (because
        there is\n   no state change) SHOULD NOT deliver the stanza to the user.  These\n
        \  rules are summarized in the following table.\n   Table 8: Processing of
        inbound \"subscribed\" stanzas\n   +------------------------------------------------------------------+\n
        \  |  EXISTING STATE          |  DELIVER?  |  NEW STATE               |\n
        \  +------------------------------------------------------------------+\n
        \  |  \"None\"                  |  S.N.      |  no state change         |\n
        \  |  \"None + Pending Out\"    |  MUST      |  \"To\"                    |\n
        \  |  \"None + Pending In\"     |  S.N.      |  no state change         |\n
        \  |  \"None + Pending Out+In\" |  MUST      |  \"To + Pending In\"       |\n
        \  |  \"To\"                    |  S.N.      |  no state change         |\n
        \  |  \"To + Pending In\"       |  S.N.      |  no state change         |\n
        \  |  \"From\"                  |  S.N.      |  no state change         |\n
        \  |  \"From + Pending Out\"    |  MUST      |  \"Both\"                  |\n
        \  |  \"Both\"                  |  S.N.      |  no state change         |\n
        \  +------------------------------------------------------------------+\n"
      title: A.3.3.  Subscribed
    - contents:
      - "A.3.4.  Unsubscribed\n   When the user's server receives a presence stanza
        of type\n   \"unsubscribed\" for the user from the contact, if there is a
        pending\n   outbound request for access to the contact's presence information
        or\n   if the user currently is subscribed to the contact's presence\n   information,
        then the user's server MUST change the subscription\n   state and MUST deliver
        the stanza to the user.  Otherwise, the user's\n   server MUST NOT change
        the subscription state and (because there is\n   no state change) SHOULD NOT
        deliver the stanza.  These rules are\n   summarized in the following table.\n
        \  Table 9: Processing of inbound \"unsubscribed\" stanzas\n   +------------------------------------------------------------------+\n
        \  |  EXISTING STATE          |  DELIVER?  |  NEW STATE               |\n
        \  +------------------------------------------------------------------+\n
        \  |  \"None\"                  |  S.N.      |  no state change         |\n
        \  |  \"None + Pending Out\"    |  MUST      |  \"None\"                  |\n
        \  |  \"None + Pending In\"     |  S.N.      |  no state change         |\n
        \  |  \"None + Pending Out+In\" |  MUST      |  \"None + Pending In\"     |\n
        \  |  \"To\"                    |  MUST      |  \"None\"                  |\n
        \  |  \"To + Pending In\"       |  MUST      |  \"None + Pending In\"     |\n
        \  |  \"From\"                  |  S.N.      |  no state change         |\n
        \  |  \"From + Pending Out\"    |  MUST      |  \"From\"                  |\n
        \  |  \"Both\"                  |  MUST      |  \"From\"                  |\n
        \  +------------------------------------------------------------------+\n"
      title: A.3.4.  Unsubscribed
    title: A.3.  Server Processing of Inbound Presence Subscription Stanzas
  title: Appendix A.  Subscription States
- contents:
  - "Appendix B.  Blocking Communication\n   Sections 2.3.5 and 5.4.10 of [IMP-REQS]
    require that a compliant\n   instant messaging and presence technology needs to
    enable a user to\n   block communications from selected users.  Protocols for
    doing so are\n   specified in [XEP-0016] and [XEP-0191].\n"
  title: Appendix B.  Blocking Communication
- contents:
  - "Appendix C.  vCards\n   Sections 3.1.3 and 4.1.4 of [IMP-REQS] require that it
    be possible to\n   retrieve out-of-band contact information for other users (e.g.,\n
    \  telephone number or email address).  An XML representation of the\n   vCard
    specification defined in RFC 2426 [VCARD] is in common use\n   within the XMPP
    community to provide such information but is out of\n   scope for this specification
    (documentation of this protocol is\n   contained in [XEP-0054]).\n"
  title: Appendix C.  vCards
- contents:
  - "Appendix D.  XML Schema for jabber:iq:roster\n   The following schema formally
    defines the 'jabber:iq:roster'\n   namespace used in this document, in conformance
    with [XML-SCHEMA].\n   Because validation of XML streams and stanzas is optional,
    this\n   schema is not normative and is provided for descriptive purposes\n   only.
    \ For schemas defining core XMPP namespaces, refer to\n   [XMPP-CORE].\n   <?xml
    version='1.0' encoding='UTF-8'?>\n   <xs:schema\n       xmlns:xs='http://www.w3.org/2001/XMLSchema'\n
    \      targetNamespace='jabber:iq:roster'\n       xmlns='jabber:iq:roster'\n       elementFormDefault='qualified'>\n
    \    <xs:element name='query'>\n       <xs:complexType>\n         <xs:sequence>\n
    \          <xs:element ref='item'\n                       minOccurs='0'\n                       maxOccurs='unbounded'/>\n
    \        </xs:sequence>\n         <xs:attribute name='ver'\n                       type='xs:string'\n
    \                      use='optional'/>\n       </xs:complexType>\n     </xs:element>\n
    \    <xs:element name='item'>\n       <xs:complexType>\n         <xs:sequence>\n
    \          <xs:element ref='group'\n                       minOccurs='0'\n                       maxOccurs='unbounded'/>\n
    \        </xs:sequence>\n         <xs:attribute name='approved'\n                       type='xs:boolean'\n
    \                      use='optional'/>\n         <xs:attribute name='ask'\n                       use='optional'>\n
    \          <xs:simpleType>\n             <xs:restriction base='xs:NMTOKEN'>\n
    \              <xs:enumeration value='subscribe'/>\n             </xs:restriction>\n
    \          </xs:simpleType>\n         </xs:attribute>\n         <xs:attribute
    name='jid'\n                       type='xs:string'\n                       use='required'/>\n
    \        <xs:attribute name='name'\n                       type='xs:string'\n
    \                      use='optional'/>\n         <xs:attribute name='subscription'\n
    \                      use='optional'\n                       default='none'>\n
    \          <xs:simpleType>\n             <xs:restriction base='xs:NMTOKEN'>\n
    \              <xs:enumeration value='both'/>\n               <xs:enumeration
    value='from'/>\n               <xs:enumeration value='none'/>\n               <xs:enumeration
    value='remove'/>\n               <xs:enumeration value='to'/>\n             </xs:restriction>\n
    \          </xs:simpleType>\n         </xs:attribute>\n       </xs:complexType>\n
    \    </xs:element>\n     <xs:element name='group' type='xs:string'/>\n   </xs:schema>\n"
  title: Appendix D.  XML Schema for jabber:iq:roster
- contents:
  - "Appendix E.  Differences From RFC 3921\n   Based on consensus derived from implementation
    and deployment\n   experience as well as formal interoperability testing, the
    following\n   substantive modifications were made from [RFC3921] (in addition
    to\n   numerous changes of an editorial nature).\n   o  The protocol for session
    establishment was determined to be\n      unnecessary and therefore the content
    previously defined in\n      Section 3 of RFC 3921 was removed.  However, for
    the sake of\n      backward-compatibility server implementations are encouraged
    to\n      advertise support for the feature, even though session\n      establishment
    is a \"no-op\".\n   o  In order to more seamlessly repair lack of synchronization
    in\n      subscription states between rosters located at different servers,\n
    \     clarified and modified error handling related to presence\n      subscription
    requests, presence probes and presence notifications.\n   o  Changed the 'from'
    address for presence probes so that it is the\n      bare JID, not the full JID.\n
    \  o  Adjusted and clarified stanza delivery rules based on\n      implementation
    and deployment experience.\n   o  Explicitly specified that a server is allowed
    to deliver a message\n      stanza of type \"normal\" or \"chat\" to all resources
    if it has a\n      method for allowing resources to opt in to such behavior.\n
    \  o  Allowed a server to use its own algorithm for determining the\n      \"most
    available\" resource for the purpose of message delivery, but\n      mentioned
    the recommended algorithm from RFC 3921 (based on\n      presence priority) as
    one possible algorithm.\n   o  Added optional versioning of roster information
    to save bandwidth\n      in cases where the roster has not changed (or has changed
    very\n      little) between sessions; the relevant protocol interactions were\n
    \     originally described in [XEP-0237].\n   o  Added optional server support
    for pre-approved presence\n      subscriptions via presence stanzas of type \"subscribed\",
    including\n      a new 'approved' attribute that can be set to \"true\" (for a
    pre-\n      approved subscription) or \"false\" (the default).\n   o  Added optional
    'parent' attribute to <thread/> element.\n   o  Moved the protocol for communications
    blocking (specified in\n      Section 10 of RFC 3921) back to [XEP-0016], from
    which it was\n      originally taken.\n   o  Recommended returning presence unavailable
    in response to probes.\n   o  Clarified handling of presence probes sent to full
    JIDs.\n   o  Explicitly specified that the default value for the presence\n      <priority/>
    element is zero.\n   o  Removed recommendation to support the \"_im\" and \"_pres\"
    SRV\n      records.\n"
  title: Appendix E.  Differences From RFC 3921
- contents:
  - "Appendix F.  Acknowledgements\n   This document is an update to, and derived
    from, RFC 3921.  This\n   document would have been impossible without the work
    of the\n   contributors and commenters acknowledged there.\n   Hundreds of people
    have provided implementation feedback, bug\n   reports, requests for clarification,
    and suggestions for improvement\n   since publication of RFC 3921.  Although the
    document editor has\n   endeavored to address all such feedback, he is solely
    responsible for\n   any remaining errors and ambiguities.\n   Some of the text
    about roster versioning was borrowed from\n   [XEP-0237], and some of the text
    about message threads was borrowed\n   from [XEP-0201].\n   Special thanks are
    due to Kevin Smith, Matthew Wild, Dave Cridland,\n   Waqas Hussain, Philipp Hancke,
    Florian Zeitz, Jonas Lindberg, Jehan\n   Pages, Tory Patnoe, and others for their
    comments during Working\n   Group Last Call.\n   Thanks also to Richard Barnes
    for his review on behalf of the\n   Security Directorate.\n   The Working Group
    chairs were Ben Campbell and Joe Hildebrand.  The\n   responsible Area Director
    was Gonzalo Camarillo.\n"
  title: Appendix F.  Acknowledgements
- contents:
  - "Author's Address\n   Peter Saint-Andre\n   Cisco\n   1899 Wyknoop Street, Suite
    600\n   Denver, CO  80202\n   USA\n   Phone: +1-303-308-3282\n   EMail: psaintan@cisco.com\n"
  title: Author's Address
