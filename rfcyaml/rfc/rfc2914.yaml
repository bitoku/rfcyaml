- title: __initial_text__
  contents:
  - '                     Congestion Control Principles

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The goal of this document is to explain the need for congestion\n\
    \   control in the Internet, and to discuss what constitutes correct\n   congestion\
    \ control.  One specific goal is to illustrate the dangers\n   of neglecting to\
    \ apply proper congestion control.  A second goal is\n   to discuss the role of\
    \ the IETF in standardizing new congestion\n   control protocols.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document draws heavily from earlier RFCs, in some cases\n\
    \   reproducing entire sections of the text of earlier documents\n   [RFC2309,\
    \ RFC2357].  We have also borrowed heavily from earlier\n   publications addressing\
    \ the need for end-to-end congestion control\n   [FF99].\n"
- title: 2.  Current standards on congestion control
  contents:
  - "2.  Current standards on congestion control\n   IETF standards concerning end-to-end\
    \ congestion control focus either\n   on specific protocols (e.g., TCP [RFC2581],\
    \ reliable multicast\n   protocols [RFC2357]) or on the syntax and semantics of\
    \ communications\n   between the end nodes and routers about congestion information\
    \ (e.g.,\n   Explicit Congestion Notification [RFC2481]) or desired quality-of-\n\
    \   service (diff-serv)).  The role of end-to-end congestion control is\n   also\
    \ discussed in an Informational RFC on \"Recommendations on Queue\n   Management\
    \ and Congestion Avoidance in the Internet\" [RFC2309].  RFC\n   2309 recommends\
    \ the deployment of active queue management mechanisms\n   in routers, and the\
    \ continuation of design efforts towards mechanisms\n   in routers to deal with\
    \ flows that are unresponsive to congestion\n   notification.  We freely borrow\
    \ from RFC 2309 some of their general\n   discussion of end-to-end congestion\
    \ control.\n   In contrast to the RFCs discussed above, this document is a more\n\
    \   general discussion of the principles of congestion control.  One of\n   the\
    \ keys to the success of the Internet has been the congestion\n   avoidance mechanisms\
    \ of TCP.  While TCP is still the dominant\n   transport protocol in the Internet,\
    \ it is not ubiquitous, and there\n   are an increasing number of applications\
    \ that, for one reason or\n   another, choose not to use TCP.  Such traffic includes\
    \ not only\n   multicast traffic, but unicast traffic such as streaming multimedia\n\
    \   that does not require reliability; and traffic such as DNS or routing\n  \
    \ messages that consist of short transfers deemed critical to the\n   operation\
    \ of the network.  Much of this traffic does not use any form\n   of either bandwidth\
    \ reservations or end-to-end congestion control.\n   The continued use of end-to-end\
    \ congestion control by best-effort\n   traffic is critical for maintaining the\
    \ stability of the Internet.\n   This document also discusses the general role\
    \ of the IETF in the\n   standardization of new congestion control protocols.\n\
    \   The discussion of congestion control principles for differentiated\n   services\
    \ or integrated services is not addressed in this document.\n   Some categories\
    \ of integrated or differentiated services include a\n   guarantee by the network\
    \ of end-to-end bandwidth, and as such do not\n   require end-to-end congestion\
    \ control mechanisms.\n"
- title: 3.  The development of end-to-end congestion control.
  contents:
  - '3.  The development of end-to-end congestion control.

    '
- title: 3.1.  Preventing congestion collapse.
  contents:
  - "3.1.  Preventing congestion collapse.\n   The Internet protocol architecture\
    \ is based on a connectionless end-\n   to-end packet service using the IP protocol.\
    \  The advantages of its\n   connectionless design, flexibility and robustness,\
    \ have been amply\n   demonstrated.  However, these advantages are not without\
    \ cost:\n   careful design is required to provide good service under heavy load.\n\
    \   In fact, lack of attention to the dynamics of packet forwarding can\n   result\
    \ in severe service degradation or \"Internet meltdown\".  This\n   phenomenon\
    \ was first observed during the early growth phase of the\n   Internet of the\
    \ mid 1980s [RFC896], and is technically called\n   \"congestion collapse\".\n\
    \   The original specification of TCP [RFC793] included window-based flow\n  \
    \ control as a means for the receiver to govern the amount of data sent\n   by\
    \ the sender.  This flow control was used to prevent overflow of the\n   receiver's\
    \ data buffer space available for that connection.  [RFC793]\n   reported that\
    \ segments could be lost due either to errors or to\n   network congestion, but\
    \ did not include dynamic adjustment of the\n   flow-control window in response\
    \ to congestion.\n   The original fix for Internet meltdown was provided by Van\
    \ Jacobson.\n   Beginning in 1986, Jacobson developed the congestion avoidance\n\
    \   mechanisms that are now required in TCP implementations [Jacobson88,\n   RFC\
    \ 2581].  These mechanisms operate in the hosts to cause TCP\n   connections to\
    \ \"back off\" during congestion.  We say that TCP flows\n   are \"responsive\"\
    \ to congestion signals (i.e., dropped packets) from\n   the network.  It is these\
    \ TCP congestion avoidance algorithms that\n   prevent the congestion collapse\
    \ of today's Internet.\n   However, that is not the end of the story.  Considerable\
    \ research has\n   been done on Internet dynamics since 1988, and the Internet\
    \ has\n   grown.  It has become clear that the TCP congestion avoidance\n   mechanisms\
    \ [RFC2581], while necessary and powerful, are not\n   sufficient to provide good\
    \ service in all circumstances.  In addition\n   to the development of new congestion\
    \ control mechanisms [RFC2357],\n   router-based mechanisms are in development\
    \ that complement the\n   endpoint congestion avoidance mechanisms.\n   A major\
    \ issue that still needs to be addressed is the potential for\n   future congestion\
    \ collapse of the Internet due to flows that do not\n   use responsible end-to-end\
    \ congestion control.  RFC 896 [RFC896]\n   suggested in 1984 that gateways should\
    \ detect and `squelch'\n   misbehaving hosts: \"Failure to  respond  to  an  ICMP\
    \  Source  Quench\n   message, though,  should be regarded as grounds for action\
    \ by a\n   gateway to disconnect a host.  Detecting such failure is non-trivial\n\
    \   but  is a worthwhile area for further research.\"  Current papers\n   still\
    \ propose that routers detect and penalize flows that are not\n   employing acceptable\
    \ end-to-end congestion control [FF99].\n"
- title: 3.2.  Fairness
  contents:
  - "3.2.  Fairness\n   In addition to a concern about congestion collapse, there\
    \ is a\n   concern about `fairness' for best-effort traffic.  Because TCP \"backs\n\
    \   off\" during congestion, a large number of TCP connections can share a\n \
    \  single, congested link in such a way that bandwidth is shared\n   reasonably\
    \ equitably among similarly situated flows.  The equitable\n   sharing of bandwidth\
    \ among flows depends on the fact that all flows\n   are running compatible congestion\
    \ control algorithms.  For TCP, this\n   means congestion control algorithms conformant\
    \ with the current TCP\n   specification [RFC793, RFC1122, RFC2581].\n   The issue\
    \ of fairness among competing flows has become increasingly\n   important for\
    \ several reasons.  First, using window scaling\n   [RFC1323], individual TCPs\
    \ can use high bandwidth even over high-\n   propagation-delay paths.  Second,\
    \ with the growth of the web,\n   Internet users increasingly want high-bandwidth\
    \ and low-delay\n   communications, rather than the leisurely transfer of a long\
    \ file in\n   the background.  The growth of best-effort traffic that does not\
    \ use\n   TCP underscores this concern about fairness between competing best-\n\
    \   effort traffic in times of congestion.\n   The popularity of the Internet\
    \ has caused a proliferation in the\n   number of TCP implementations.  Some of\
    \ these may fail to implement\n   the TCP congestion avoidance mechanisms correctly\
    \ because of poor\n   implementation [RFC2525].  Others may deliberately be implemented\n\
    \   with congestion avoidance algorithms that are more aggressive in\n   their\
    \ use of bandwidth than other TCP implementations; this would\n   allow a vendor\
    \ to claim to have a \"faster TCP\".  The logical\n   consequence of such implementations\
    \ would be a spiral of increasingly\n   aggressive TCP implementations, or increasingly\
    \ aggressive transport\n   protocols, leading back to the point where there is\
    \ effectively no\n   congestion avoidance and the Internet is chronically congested.\n\
    \   There is a well-known way to achieve more aggressive performance\n   without\
    \ even changing the transport protocol, by changing the level\n   of granularity:\
    \ open multiple connections to the same place, as has\n   been done in the past\
    \ by some Web browsers.  Thus, instead of a\n   spiral of increasingly aggressive\
    \ transport protocols, we would\n   instead have a spiral of increasingly aggressive\
    \ web browsers, or\n   increasingly aggressive applications.\n   This raises the\
    \ issue of the appropriate granularity of a \"flow\",\n   where we define a `flow'\
    \ as the level of granularity appropriate for\n   the application of both fairness\
    \ and congestion control.  From RFC\n   2309:  \"There are a few `natural' answers:\
    \ 1) a TCP or UDP connection\n   (source address/port, destination address/port);\
    \ 2) a\n   source/destination host pair; 3) a given source host or a given\n \
    \  destination host.  We would guess that the source/destination host\n   pair\
    \ gives the most appropriate granularity in many circumstances.\n   The granularity\
    \ of flows for congestion management is, at least in\n   part, a policy question\
    \ that needs to be addressed in the wider IETF\n   community.\"\n   Again borrowing\
    \ from RFC 2309, we use the term \"TCP-compatible\" for a\n   flow that behaves\
    \ under congestion like a flow produced by a\n   conformant TCP.  A TCP-compatible\
    \ flow is responsive to congestion\n   notification, and in steady-state uses\
    \ no more bandwidth than a\n   conformant TCP running under comparable conditions\
    \ (drop rate, RTT,\n   MTU, etc.)\n   It is convenient to divide flows into three\
    \ classes: (1) TCP-\n   compatible flows, (2) unresponsive flows, i.e., flows\
    \ that do not\n   slow down when congestion occurs, and (3) flows that are responsive\n\
    \   but are not TCP-compatible.  The last two classes contain more\n   aggressive\
    \ flows that pose significant threats to Internet\n   performance, as we discuss\
    \ below.\n   In addition to steady-state fairness, the fairness of the initial\n\
    \   slow-start is also a concern.  One concern is the transient effect on\n  \
    \ other flows of a flow with an overly-aggressive slow-start procedure.\n   Slow-start\
    \ performance is particularly important for the many flows\n   that are short-lived,\
    \ and only have a small amount of data to\n   transfer.\n"
- title: 3.3.  Optimizing performance regarding throughput, delay, and loss.
  contents:
  - "3.3.  Optimizing performance regarding throughput, delay, and loss.\n   In addition\
    \ to the prevention of congestion collapse and concerns\n   about fairness, a\
    \ third reason for a flow to use end-to-end\n   congestion control can be to optimize\
    \ its own performance regarding\n   throughput, delay, and loss.  In some circumstances,\
    \ for example in\n   environments of high statistical multiplexing, the delay\
    \ and loss\n   rate experienced by a flow are largely independent of its own sending\n\
    \   rate.  However, in environments with lower levels of statistical\n   multiplexing\
    \ or with per-flow scheduling, the delay and loss rate\n   experienced by a flow\
    \ is in part a function of the flow's own sending\n   rate.  Thus, a flow can\
    \ use end-to-end congestion control to limit\n   the delay or loss experienced\
    \ by its own packets.  We would note,\n   however, that in an environment like\
    \ the current best-effort\n   Internet, concerns regarding congestion collapse\
    \ and fairness with\n   competing flows limit the range of congestion control\
    \ behaviors\n   available to a flow.\n"
- title: 4.  The role of the standards process
  contents:
  - "4.  The role of the standards process\n   The standardization of a transport\
    \ protocol includes not only\n   standardization of aspects of the protocol that\
    \ could affect\n   interoperability (e.g., information exchanged by the end-nodes),\
    \ but\n   also standardization of mechanisms deemed critical to performance\n\
    \   (e.g., in TCP, reduction of the congestion window in response to a\n   packet\
    \ drop).  At the same time, implementation-specific details and\n   other aspects\
    \ of the transport protocol that do not affect\n   interoperability and do not\
    \ significantly interfere with performance\n   do not require standardization.\
    \  Areas of TCP that do not require\n   standardization include the details of\
    \ TCP's Fast Recovery procedure\n   after a Fast Retransmit [RFC2582].  The appendix\
    \ uses examples from\n   TCP to discuss in more detail the role of the standards\
    \ process in\n   the development of congestion control.\n"
- title: 4.1.  The development of new transport protocols.
  contents:
  - "4.1.  The development of new transport protocols.\n   In addition to addressing\
    \ the danger of congestion collapse, the\n   standardization process for new transport\
    \ protocols takes care to\n   avoid a congestion control `arms race' among competing\
    \ protocols.  As\n   an example, in RFC 2357 [RFC2357] the TSV Area Directors\
    \ and their\n   Directorate outline criteria for the publication as RFCs of\n\
    \   Internet-Drafts on reliable multicast transport protocols.  From\n   [RFC2357]:\
    \  \"A particular concern for the IETF is the impact of\n   reliable multicast\
    \ traffic on other traffic in the Internet in times\n   of congestion, in particular\
    \ the effect of reliable multicast traffic\n   on competing TCP traffic....  The\
    \ challenge to the IETF is to\n   encourage research and implementations of reliable\
    \ multicast, and to\n   enable the needs of applications for reliable multicast\
    \ to be met as\n   expeditiously as possible, while at the same time protecting\
    \ the\n   Internet from the congestion disaster or collapse that could result\n\
    \   from the widespread use of applications with inappropriate reliable\n   multicast\
    \ mechanisms.\"\n   The list of technical criteria that must be addressed by RFCs\
    \ on new\n   reliable multicast transport protocols include the following:  \"\
    Is\n   there a congestion control mechanism? How well does it perform? When\n\
    \   does it fail?  Note that congestion control mechanisms that operate\n   on\
    \ the network more aggressively than TCP will face a great burden of\n   proof\
    \ that they don't threaten network stability.\"\n   It is reasonable to expect\
    \ that these concerns about the effect of\n   new transport protocols on competing\
    \ traffic will apply not only to\n   reliable multicast protocols, but to unreliable\
    \ unicast, reliable\n   unicast, and unreliable multicast traffic as well.\n"
- title: 4.2.  Application-level issues that affect congestion control
  contents:
  - "4.2.  Application-level issues that affect congestion control\n   The specific\
    \ issue of a browser opening multiple connections to the\n   same destination\
    \ has been addressed by RFC 2616 [RFC2616], which\n   states in Section 8.1.4\
    \ that \"Clients that use persistent connections\n   SHOULD limit the number of\
    \ simultaneous connections that they\n   maintain to a given server.  A single-user\
    \ client SHOULD NOT maintain\n   more than 2 connections with any server or proxy.\"\
    \n"
- title: 4.3.  New developments in the standards process
  contents:
  - "4.3.  New developments in the standards process\n   The most obvious developments\
    \ in the IETF that could affect the\n   evolution of congestion control are the\
    \ development of integrated and\n   differentiated services [RFC2212, RFC2475]\
    \ and of Explicit Congestion\n   Notification (ECN) [RFC2481].  However, other\
    \ less dramatic\n   developments are likely to affect congestion control as well.\n\
    \   One such effort is that to construct Endpoint Congestion Management\n   [BS00],\
    \ to enable multiple concurrent flows from a sender to the same\n   receiver to\
    \ share congestion control state.  By allowing multiple\n   connections to the\
    \ same destination to act as one flow in terms of\n   end-to-end congestion control,\
    \ a Congestion Manager could allow\n   individual connections slow-starting to\
    \ take advantage of previous\n   information about the congestion state of the\
    \ end-to-end path.\n   Further, the use of a Congestion Manager could remove the\
    \ congestion\n   control dangers of multiple flows being opened between the same\n\
    \   source/destination pair, and could perhaps be used to allow a browser\n  \
    \ to open many simultaneous connections to the same destination.\n"
- title: 5.  A description of congestion collapse
  contents:
  - "5.  A description of congestion collapse\n   This section discusses congestion\
    \ collapse from undelivered packets\n   in some detail, and shows how unresponsive\
    \ flows could contribute to\n   congestion collapse in the Internet.  This section\
    \ draws heavily on\n   material from [FF99].\n   Informally, congestion collapse\
    \ occurs when an increase in the\n   network load results in a decrease in the\
    \ useful work done by the\n   network.  As discussed in Section 3, congestion\
    \ collapse was first\n   reported in the mid 1980s [RFC896], and was largely due\
    \ to TCP\n   connections unnecessarily retransmitting packets that were either\
    \ in\n   transit or had already been received at the receiver.  We call the\n\
    \   congestion collapse that results from the unnecessary retransmission\n   of\
    \ packets classical congestion collapse.  Classical congestion\n   collapse is\
    \ a stable condition that can result in throughput that is\n   a small fraction\
    \ of normal [RFC896].  Problems with classical\n   congestion collapse have generally\
    \ been corrected by the timer\n   improvements and congestion control mechanisms\
    \ in modern\n   implementations of TCP [Jacobson88].\n   A second form of potential\
    \ congestion collapse occurs due to\n   undelivered packets.  Congestion collapse\
    \ from undelivered packets\n   arises when bandwidth is wasted by delivering packets\
    \ through the\n   network that are dropped before reaching their ultimate destination.\n\
    \   This is probably the largest unresolved danger with respect to\n   congestion\
    \ collapse in the Internet today.  Different scenarios can\n   result in different\
    \ degrees of congestion collapse, in terms of the\n   fraction of the congested\
    \ links' bandwidth used for productive work.\n   The danger of congestion collapse\
    \ from undelivered packets is due\n   primarily to the increasing deployment of\
    \ open-loop applications not\n   using end-to-end congestion control.  Even more\
    \ destructive would be\n   best-effort applications that *increase* their sending\
    \ rate in\n   response to an increased packet drop rate (e.g., automatically using\n\
    \   an increased level of FEC).\n   Table 1 gives the results from a scenario\
    \ with congestion collapse\n   from undelivered packets, where scarce bandwidth\
    \ is wasted by packets\n   that never reach their destination.  The simulation\
    \ uses a scenario\n   with three TCP flows and one UDP flow competing over a congested\
    \ 1.5\n   Mbps link.  The access links for all nodes are 10 Mbps, except that\n\
    \   the access link to the receiver of the UDP flow is 128 Kbps, only 9%\n   of\
    \ the bandwidth of shared link.  When the UDP source rate exceeds\n   128 Kbps,\
    \ most of the UDP packets will be dropped at the output port\n   to that final\
    \ link.\n        UDP\n        Arrival   UDP       TCP       Total\n        Rate\
    \      Goodput   Goodput   Goodput\n       --------------------------------------\n\
    \         0.7       0.7      98.5      99.2\n         1.8       1.7      97.3\
    \      99.1\n         2.6       2.6      96.0      98.6\n         5.3       5.2\
    \      92.7      97.9\n         8.8       8.4      87.1      95.5\n        10.5\
    \       8.4      84.8      93.2\n        13.1       8.4      81.4      89.8\n\
    \        17.5       8.4      77.3      85.7\n        26.3       8.4      64.5\
    \      72.8\n        52.6       8.4      38.1      46.4\n        58.4       8.4\
    \      32.8      41.2\n        65.7       8.4      28.5      36.8\n        75.1\
    \       8.4      19.7      28.1\n        87.6       8.4      11.3      19.7\n\
    \       105.2       8.4       3.4      11.8\n       131.5       8.4       2.4\
    \      10.7\n   Table 1.  A simulation with three TCP flows and one UDP flow.\n\
    \   Table 1 shows the UDP arrival rate from the sender, the UDP goodput\n   (defined\
    \ as the bandwidth delivered to the receiver), the TCP goodput\n   (as delivered\
    \ to the TCP receivers), and the aggregate goodput on the\n   congested 1.5 Mbps\
    \ link.  Each rate is given as a fraction of the\n   bandwidth of the congested\
    \ link.  As the UDP source rate increases,\n   the TCP goodput decreases roughly\
    \ linearly, and the UDP goodput is\n   nearly constant.  Thus, as the UDP flow\
    \ increases its offered load,\n   its only effect is to hurt the TCP and aggregate\
    \ goodput.  On the\n   congested link, the UDP flow ultimately `wastes' the bandwidth\
    \ that\n   could have been used by the TCP flow, and reduces the goodput in the\n\
    \   network as a whole down to a small fraction of the bandwidth of the\n   congested\
    \ link.\n   The simulations in Table 1 illustrate both unfairness and congestion\n\
    \   collapse.  As [FF99] discusses, compatible congestion control is not\n   the\
    \ only way to provide fairness; per-flow scheduling at the\n   congested routers\
    \ is an alternative mechanism at the routers that\n   guarantees fairness.  However,\
    \ as discussed in [FF99], per-flow\n   scheduling can not be relied upon to prevent\
    \ congestion collapse.\n   There are only two alternatives for eliminating the\
    \ danger of\n   congestion collapse from undelivered packets.  The first alternative\n\
    \   for preventing congestion collapse from undelivered packets is the\n   use\
    \ of effective end-to-end congestion control by the end nodes.\n   More specifically,\
    \ the requirement would be that a flow avoid a\n   pattern of significant losses\
    \ at links downstream from the first\n   congested link on the path.  (Here, we\
    \ would consider any link a\n   `congested link' if any flow is using bandwidth\
    \ that would otherwise\n   be used by other traffic on the link.) Given that an\
    \ end-node is\n   generally unable to distinguish between a path with one congested\n\
    \   link and a path with multiple congested links, the most reliable way\n   for\
    \ a flow to avoid a pattern of significant losses at a downstream\n   congested\
    \ link is for the flow to use end-to-end congestion control,\n   and reduce its\
    \ sending rate in the presence of loss.\n   A second alternative for preventing\
    \ congestion collapse from\n   undelivered packets would be a guarantee by the\
    \ network that packets\n   accepted at a congested link in the network will be\
    \ delivered all the\n   way to the receiver [RFC2212, RFC2475].  We note that\
    \ the choice\n   between the first alternative of end-to-end congestion control\
    \ and\n   the second alternative of end-to-end bandwidth guarantees does not\n\
    \   have to be an either/or decision; congestion collapse can be\n   prevented\
    \ by the use of effective end-to-end congestion by some of\n   the traffic, and\
    \ the use of end-to-end bandwidth guarantees from the\n   network for the rest\
    \ of the traffic.\n"
- title: 6.  Forms of end-to-end congestion control
  contents:
  - "6.  Forms of end-to-end congestion control\n   This document has discussed concerns\
    \ about congestion collapse and\n   about fairness with TCP for new forms of congestion\
    \ control.  This\n   does not mean, however, that concerns about congestion collapse\
    \ and\n   fairness with TCP necessitate that all best-effort traffic deploy\n\
    \   congestion control based on TCP's Additive-Increase Multiplicative-\n   Decrease\
    \ (AIMD) algorithm of reducing the sending rate in half in\n   response to each\
    \ packet drop.  This section separately discusses the\n   implications of these\
    \ two concerns of congestion collapse and\n   fairness with TCP.\n"
- title: 6.1.  End-to-end congestion control for avoiding congestion collapse.
  contents:
  - "6.1.  End-to-end congestion control for avoiding congestion collapse.\n   The\
    \ avoidance of congestion collapse from undelivered packets\n   requires that\
    \ flows avoid a scenario of a high sending rate, multiple\n   congested links,\
    \ and a persistent high packet drop rate at the\n   downstream link.  Because\
    \ congestion collapse from undelivered\n   packets consists of packets that waste\
    \ valuable bandwidth only to be\n   dropped downstream, this form of congestion\
    \ collapse is not possible\n   in an environment where each flow traverses only\
    \ one congested link,\n   or where only a small number of packets are dropped\
    \ at links\n   downstream of the first congested link.  Thus, any form of congestion\n\
    \   control that successfully avoids a high sending rate in the presence\n   of\
    \ a high packet drop rate should be sufficient to avoid congestion\n   collapse\
    \ from undelivered packets.\n   We would note that the addition of Explicit Congestion\
    \ Notification\n   (ECN) to the IP architecture would not, in and of itself, remove\
    \ the\n   danger of congestion collapse for best-effort traffic.  ECN allows\n\
    \   routers to set a bit in packet headers as an indication of congestion\n  \
    \ to the end-nodes, rather than being forced to rely on packet drops to\n   indicate\
    \ congestion.  However, with ECN, packet-marking would replace\n   packet-dropping\
    \ only in times of moderate congestion.  In particular,\n   when congestion is\
    \ heavy, and a router's buffers overflow, the router\n   has no choice but to\
    \ drop arriving packets.\n"
- title: 6.2.  End-to-end congestion control for fairness with TCP.
  contents:
  - "6.2.  End-to-end congestion control for fairness with TCP.\n   The concern expressed\
    \ in [RFC2357] about fairness with TCP places a\n   significant though not crippling\
    \ constraint on the range of viable\n   end-to-end congestion control mechanisms\
    \ for best-effort traffic.  An\n   environment with per-flow scheduling at all\
    \ congested links would\n   isolate flows from each other, and eliminate the need\
    \ for congestion\n   control mechanisms to be TCP-compatible.  An environment\
    \ with\n   differentiated services, where flows marked as belonging to a certain\n\
    \   diff-serv class would be scheduled in isolation from best-effort\n   traffic,\
    \ could allow the emergence of an entire diff-serv class of\n   traffic where\
    \ congestion control was not required to be TCP-\n   compatible.  Similarly, a\
    \ pricing-controlled environment, or a diff-\n   serv class with its own pricing\
    \ paradigm, could supercede the concern\n   about fairness with TCP.  However,\
    \ for the current Internet\n   environment, where other best-effort traffic could\
    \ compete in a FIFO\n   queue with TCP traffic, the absence of fairness with TCP\
    \ could lead\n   to one flow `starving out' another flow in a time of high congestion,\n\
    \   as was illustrated in Table 1 above.\n   However, the list of TCP-compatible\
    \ congestion control procedures is\n   not limited to AIMD with the same increase/\
    \ decrease parameters as\n   TCP.  Other TCP-compatible congestion control procedures\
    \ include\n   rate-based variants of AIMD; AIMD with different sets of\n   increase/decrease\
    \ parameters that give the same steady-state\n   behavior; equation-based congestion\
    \ control where the sender adjusts\n   its sending rate in response to information\
    \ about the long-term\n   packet drop rate; layered multicast where receivers\
    \ subscribe and\n   unsubscribe from layered multicast groups; and possibly other\
    \ forms\n   that we have not yet begun to consider.\n"
- title: 7. Acknowledgements
  contents:
  - "7. Acknowledgements\n   Much of this document draws directly on previous RFCs\
    \ addressing\n   end-to-end congestion control.  This attempts to be a summary\
    \ of\n   ideas that have been discussed for many years, and by many people.\n\
    \   In particular, acknowledgement is due to the members of the End-to-\n   End\
    \ Research Group, the Reliable Multicast Research Group, and the\n   Transport\
    \ Area Directorate.  This document has also benefited from\n   discussion and\
    \ feedback from the Transport Area Working Group.\n   Particular thanks are due\
    \ to Mark Allman for feedback on an earlier\n   version of this document.\n"
- title: 8. References
  contents:
  - "8. References\n   [BS00]       Balakrishnan H. and S. Seshan, \"The Congestion\
    \ Manager\",\n                Work in Progress.\n   [DMKM00]     Dawkins, S.,\
    \ Montenegro, G., Kojo, M. and V. Magret,\n                \"End-to-end Performance\
    \ Implications of Slow Links\",\n                Work in Progress.\n   [FF99]\
    \       Floyd, S. and K. Fall, \"Promoting the Use of End-to-End\n           \
    \     Congestion Control in the Internet\", IEEE/ACM\n                Transactions\
    \ on Networking, August 1999.  URL\n                http://www.aciri.org/floyd/end2end-paper.html\n\
    \   [HPF00]      Handley, M., Padhye, J. and S. Floyd, \"TCP Congestion\n    \
    \            Window Validation\", RFC 2861, June 2000.\n   [Jacobson88] V. Jacobson,\
    \ Congestion Avoidance and Control, ACM\n                SIGCOMM '88, August 1988.\n\
    \   [RFC793]     Postel, J., \"Transmission Control Protocol\", STD 7, RFC\n \
    \               793, September 1981.\n   [RFC896]     Nagle, J., \"Congestion\
    \ Control in IP/TCP\", RFC 896,\n                January 1984.\n   [RFC1122] \
    \   Braden, R., Ed., \"Requirements for Internet Hosts --\n                Communication\
    \ Layers\", STD 3, RFC 1122, October 1989.\n   [RFC1323]    Jacobson, V., Braden,\
    \ R. and D. Borman, \"TCP Extensions\n                for High Performance\",\
    \ RFC 1323, May 1992.\n   [RFC2119]    Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n                Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [RFC2212]    Shenker, S., Partridge, C. and R. Guerin, \"Specification\n \
    \               of Guaranteed Quality of Service\", RFC 2212, September\n    \
    \            1997.\n   [RFC2309]    Braden, R., Clark, D., Crowcroft, J., Davie,\
    \ B.,\n                Deering, S., Estrin, D., Floyd, S., Jacobson, V.,\n   \
    \             Minshall, G., Partridge, C., Peterson, L., Ramakrishnan,\n     \
    \           K.K., Shenker, S., Wroclawski, J., and L. Zhang,\n               \
    \ \"Recommendations on Queue Management and Congestion\n                Avoidance\
    \ in the Internet\", RFC 2309, April 1998.\n   [RFC2357]    Mankin, A., Romanow,\
    \ A., Bradner, S. and V. Paxson,\n                \"IETF Criteria for Evaluating\
    \ Reliable Multicast\n                Transport and Application Protocols\", RFC\
    \ 2357, June\n                1998.\n   [RFC2414]    Allman, M., Floyd, S. and\
    \ C. Partridge, \"Increasing\n                TCP's Initial Window\", RFC 2414,\
    \ September 1998.\n   [RFC2475]    Blake, S., Black, D., Carlson, M., Davies,\
    \ E., Wang, Z.\n                and W.  Weiss, \"An Architecture for Differentiated\n\
    \                Services\", RFC 2475, December 1998.\n   [RFC2481]    Ramakrishnan\
    \ K. and S. Floyd, \"A Proposal to add\n                Explicit Congestion Notification\
    \ (ECN) to IP\", RFC 2481,\n                January 1999.\n   [RFC2525]    Paxson,\
    \ V., Allman, M., Dawson, S., Fenner, W., Griner,\n                J., Heavens,\
    \ I., Lahey, K., Semke, J. and B. Volz,\n                \"Known TCP Implementation\
    \ Problems\", RFC 2525, March\n                1999.\n   [RFC2581]    Allman,\
    \ M., Paxson, V. and W. Stevens, \"TCP Congestion\n                Control\",\
    \ RFC 2581, April 1999.\n   [RFC2582]    Floyd, S. and T. Henderson, \"The NewReno\
    \ Modification to\n                TCP's Fast Recovery Algorithm\", RFC 2582,\
    \ April 1999.\n   [RFC2616]    Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n\
    \                Masinter, L., Leach, P. and T. Berners-Lee, \"Hypertext\n   \
    \             Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [SCWA99]\
    \     S. Savage, N. Cardwell, D. Wetherall, and T. Anderson,\n               \
    \ TCP Congestion Control with a Misbehaving Receiver, ACM\n                Computer\
    \ Communications Review, October 1999.\n   [TCPB98]     Hari Balakrishnan, Venkata\
    \ N. Padmanabhan, Srinivasan\n                Seshan, Mark Stemm, and Randy H.\
    \ Katz, TCP Behavior of a\n                Busy Internet Server: Analysis and\
    \ Improvements, IEEE\n                Infocom, March 1998.  Available from:\n\
    \                \"http://www.cs.berkeley.edu/~hari/papers/infocom98.ps.gz\".\n\
    \   [TCPF98]     Dong Lin and H.T. Kung, TCP Fast Recovery Strategies:\n     \
    \           Analysis and Improvements, IEEE Infocom, March 1998.\n           \
    \     Available from:\n                \"http://www.eecs.harvard.edu/networking/papers/infocom-\n\
    \                tcp-final-198.pdf\".\n"
- title: 9.  TCP-Specific issues
  contents:
  - "9.  TCP-Specific issues\n   In this section we discuss some of the particulars\
    \ of TCP congestion\n   control, to illustrate a realization of the congestion\
    \ control\n   principles, including some of the details that arise when\n   incorporating\
    \ them into a production transport protocol.\n"
- title: 9.1.  Slow-start.
  contents:
  - "9.1.  Slow-start.\n   The TCP sender can not open a new connection by sending\
    \ a large burst\n   of data (e.g., a receiver's advertised window) all at once.\
    \  The TCP\n   sender is limited by a small initial value for the congestion window.\n\
    \   During slow-start, the TCP sender can increase its sending rate by at\n  \
    \ most a factor of two in one roundtrip time.  Slow-start ends when\n   congestion\
    \ is detected, or when the sender's congestion window is\n   greater than the\
    \ slow-start threshold ssthresh.\n   An issue that potentially affects global\
    \ congestion control, and\n   therefore has been explicitly addressed in the standards\
    \ process,\n   includes an increase in the value of the initial window\n   [RFC2414,RFC2581].\n\
    \   Issues that have not been addressed in the standards process, and are\n  \
    \ generally considered not to require standardization, include such\n   issues\
    \ as the use (or non-use) of rate-based pacing, and mechanisms\n   for ending\
    \ slow-start early, before the congestion window reaches\n   ssthresh.  Such mechanisms\
    \ result in slow-start behavior that is as\n   conservative or more conservative\
    \ than standard TCP.\n"
- title: 9.2.  Additive Increase, Multiplicative Decrease.
  contents:
  - "9.2.  Additive Increase, Multiplicative Decrease.\n   In the absence of congestion,\
    \ the TCP sender increases its congestion\n   window by at most one packet per\
    \ roundtrip time. In response to a\n   congestion indication, the TCP sender decreases\
    \ its congestion window\n   by half.  (More precisely, the new congestion window\
    \ is half of the\n   minimum of the congestion window and the receiver's advertised\n\
    \   window.)\n   An issue that potentially affects global congestion control,\
    \ and\n   therefore would be likely to be explicitly addressed in the standards\n\
    \   process, would include a proposed addition of congestion control for\n   the\
    \ return stream of `pure acks'.\n   An issue that has not been addressed in the\
    \ standards process, and is\n   generally not considered to require standardization,\
    \ would be a\n   change to the congestion window to apply as an upper bound on\
    \ the\n   number of bytes presumed to be in the pipe, instead of applying as a\n\
    \   sliding window starting from the cumulative acknowledgement.\n   (Clearly,\
    \ the receiver's advertised window applies as a sliding\n   window starting from\
    \ the cumulative acknowledgement field, because\n   packets received above the\
    \ cumulative acknowledgement field are held\n   in TCP's receive buffer, and have\
    \ not been delivered to the\n   application.  However, the congestion window applies\
    \ to the number of\n   packets outstanding in the pipe, and does not necessarily\
    \ have to\n   include packets that have been received out-of-order by the TCP\n\
    \   receiver.)\n"
- title: 9.3.  Retransmit timers.
  contents:
  - "9.3.  Retransmit timers.\n   The TCP sender sets a retransmit timer to infer\
    \ that a packet has\n   been dropped in the network.  When the retransmit timer\
    \ expires, the\n   sender infers that a packet has been lost, sets ssthresh to\
    \ half of\n   the current window, and goes into slow-start, retransmitting the\
    \ lost\n   packet.  If the retransmit timer expires because no acknowledgement\n\
    \   has been received for a retransmitted packet, the retransmit timer is\n  \
    \ also \"backed-off\", doubling the value of the next retransmit timeout\n   interval.\n\
    \   An issue that potentially affects global congestion control, and\n   therefore\
    \ would be likely to be explicitly addressed in the standards\n   process, might\
    \ include a modified mechanism for setting the\n   retransmit timer that could\
    \ significantly increase the number of\n   retransmit timers that expire prematurely,\
    \ when the acknowledgement\n   has not yet arrived at the sender, but in fact\
    \ no packets have been\n   dropped.  This could be of concern to the Internet\
    \ standards process\n   because retransmit timers that expire prematurely could\
    \ lead to an\n   increase in the number of packets unnecessarily transmitted on\
    \ a\n   congested link.\n"
- title: 9.4.  Fast Retransmit and Fast Recovery.
  contents:
  - "9.4.  Fast Retransmit and Fast Recovery.\n   After seeing three duplicate acknowledgements,\
    \ the TCP sender infers\n   a packet loss.  The TCP sender sets ssthresh to half\
    \ of the current\n   window, reduces the congestion window to at most half of\
    \ the previous\n   window, and retransmits the lost packet.\n   An issue that\
    \ potentially affects global congestion control, and\n   therefore would be likely\
    \ to be explicitly addressed in the standards\n   process, might include a proposal\
    \ (if there was one) for inferring a\n   lost packet after only one or two duplicate\
    \ acknowledgements.  If\n   poorly designed, such a proposal could lead to an\
    \ increase in the\n   number of packets unnecessarily transmitted on a congested\
    \ path.\n   An issue that has not been addressed in the standards process, and\n\
    \   would not be expected to require standardization, would be a proposal\n  \
    \ to send a \"new\" or presumed-lost packet in response to a duplicate or\n  \
    \ partial acknowledgement, if allowed by the congestion window.  An\n   example\
    \ of this would be sending a new packet in response to a single\n   duplicate\
    \ acknowledgement, to keep the `ack clock' going in case no\n   further acknowledgements\
    \ would have arrived.  Such a proposal is an\n   example of a beneficial change\
    \ that does not involve interoperability\n   and does not affect global congestion\
    \ control, and that therefore\n   could be implemented by vendors without requiring\
    \ the intervention of\n   the IETF standards process.  (This issue has in fact\
    \ been addressed\n   in [DMKM00], which suggests that \"researchers may wish to\
    \ experiment\n   with injecting new traffic into the network when duplicate\n\
    \   acknowledgements are being received, as described in [TCPB98] and\n   [TCPF98].\"\
    \n"
- title: 9.5.  Other aspects of TCP congestion control.
  contents:
  - "9.5.  Other aspects of TCP congestion control.\n   Other aspects of TCP congestion\
    \ control that have not been discussed\n   in any of the sections above include\
    \ TCP's recovery from an idle or\n   application-limited period [HPF00].\n"
- title: 10. Security Considerations
  contents:
  - "10. Security Considerations\n   This document has been about the risks associated\
    \ with congestion\n   control, or with the absence of congestion control.  Section\
    \ 3.2\n   discusses the potentials for unfairness if competing flows don't use\n\
    \   compatible congestion control mechanisms, and Section 5 considers the\n  \
    \ dangers of congestion collapse if flows don't use end-to-end\n   congestion\
    \ control.\n   Because this document does not propose any specific congestion\n\
    \   control mechanisms, it is also not necessary to present specific\n   security\
    \ measures associated with congestion control.  However, we\n   would note that\
    \ there are a range of security considerations\n   associated with congestion\
    \ control that should be considered in IETF\n   documents.\n   For example, individual\
    \ congestion control mechanisms should be as\n   robust as possible to the attempts\
    \ of individual end-nodes to subvert\n   end-to-end congestion control [SCWA99].\
    \  This is a particular concern\n   in multicast congestion control, because of\
    \ the far-reaching\n   distribution of the traffic and the greater opportunities\
    \ for\n   individual receivers to fail to report congestion.\n   RFC 2309 also\
    \ discussed the potential dangers to the Internet of\n   unresponsive flows, that\
    \ is, flows that don't reduce their sending\n   rate in the presence of congestion,\
    \ and describes the need for\n   mechanisms in the network to deal with flows\
    \ that are unresponsive to\n   congestion notification.  We would note that there\
    \ is still a need\n   for research, engineering, measurement, and deployment in\
    \ these\n   areas.\n   Because the Internet aggregates very large numbers of flows,\
    \ the risk\n   to the whole infrastructure of subverting the congestion control\
    \ of a\n   few individual flows is limited.  Rather, the risk to the\n   infrastructure\
    \ would come from the widespread deployment of many\n   end-nodes subverting end-to-end\
    \ congestion control.\n"
- title: AUTHOR'S ADDRESS
  contents:
  - "AUTHOR'S ADDRESS\n   Sally Floyd\n   AT&T Center for Internet Research at ICSI\
    \ (ACIRI)\n   Phone: +1 (510) 642-4274 x189\n   EMail: floyd@aciri.org\n   URL:\
    \ http://www.aciri.org/floyd/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
