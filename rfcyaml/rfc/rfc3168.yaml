- contents:
  - '      The Addition of Explicit Congestion Notification (ECN) to IP

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo specifies the incorporation of ECN (Explicit Congestion\n
    \  Notification) to TCP and IP, including ECN's use of two bits in the\n   IP
    header.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction..................................................
    \ 3\n   2.  Conventions and Acronyms......................................  5\n
    \  3.  Assumptions and General Principles............................  5\n   4.
    \ Active Queue Management (AQM).................................  6\n   5.  Explicit
    Congestion Notification in IP........................  6\n   5.1.  ECN as an Indication
    of Persistent Congestion............... 10\n   5.2.  Dropped or Corrupted Packets................................
    11\n   5.3.  Fragmentation............................................... 11\n
    \  6.  Support from the Transport Protocol........................... 12\n   6.1.
    \ TCP......................................................... 13\n   6.1.1  TCP
    Initialization......................................... 14\n   6.1.1.1.  Middlebox
    Issues........................................ 16\n   6.1.1.2.  Robust TCP Initialization
    with an Echoed Reserved Field. 17\n   6.1.2.  The TCP Sender............................................
    18\n   6.1.3.  The TCP Receiver.......................................... 19\n
    \  6.1.4.  Congestion on the ACK-path................................ 20\n   6.1.5.
    \ Retransmitted TCP packets................................. 20\n   6.1.6.  TCP
    Window Probes......................................... 22\n   7.  Non-compliance
    by the End Nodes............................... 22\n   8.  Non-compliance in the
    Network................................. 24\n   8.1.  Complications Introduced
    by Split Paths..................... 25\n   9.  Encapsulated Packets..........................................
    25\n   9.1.  IP packets encapsulated in IP............................... 25\n
    \  9.1.1.  The Limited-functionality and Full-functionality Options.. 27\n   9.1.2.
    \ Changes to the ECN Field within an IP Tunnel.............. 28\n   9.2.  IPsec
    Tunnels............................................... 29\n   9.2.1.  Negotiation
    between Tunnel Endpoints...................... 31\n   9.2.1.1.  ECN Tunnel Security
    Association Database Field.......... 32\n   9.2.1.2.  ECN Tunnel Security Association
    Attribute............... 32\n   9.2.1.3.  Changes to IPsec Tunnel Header Processing...............
    33\n   9.2.2.  Changes to the ECN Field within an IPsec Tunnel........... 35\n
    \  9.2.3.  Comments for IPsec Support................................ 35\n   9.3.
    \ IP packets encapsulated in non-IP Packet Headers............ 36\n   10.  Issues
    Raised by Monitoring and Policing Devices............. 36\n   11.  Evaluations
    of ECN........................................... 37\n   11.1.  Related Work Evaluating
    ECN................................ 37\n   11.2.  A Discussion of the ECN nonce..............................
    37\n   11.2.1.  The Incremental Deployment of ECT(1) in Routers.......... 38\n
    \  12.  Summary of changes required in IP and TCP.................... 38\n   13.
    \ Conclusions.................................................. 40\n   14.  Acknowledgements.............................................
    41\n   15.  References................................................... 41\n
    \  16.  Security Considerations...................................... 45\n   17.
    \ IPv4 Header Checksum Recalculation........................... 45\n   18.  Possible
    Changes to the ECN Field in the Network............. 45\n   18.1.  Possible Changes
    to the IP Header.......................... 46\n   18.1.1.  Erasing the Congestion
    Indication........................ 46\n   18.1.2.  Falsely Reporting Congestion.............................
    47\n   18.1.3.  Disabling ECN-Capability................................. 47\n
    \  18.1.4.  Falsely Indicating ECN-Capability........................ 47\n   18.2.
    \ Information carried in the Transport Header................ 48\n   18.3.  Split
    Paths................................................ 49\n   19.  Implications
    of Subverting End-to-End Congestion Control..... 50\n   19.1.  Implications for
    the Network and for Competing Flows....... 50\n   19.2.  Implications for the
    Subverted Flow........................ 53\n   19.3.  Non-ECN-Based Methods of
    Subverting End-to-end Congestion\n          Control....................................................
    54\n   20.  The Motivation for the ECT Codepoints........................ 54\n
    \  20.1.  The Motivation for an ECT Codepoint........................ 54\n   20.2.
    \ The Motivation for two ECT Codepoints...................... 55\n   21.  Why
    use Two Bits in the IP Header?........................... 57\n   22.  Historical
    Definitions for the IPv4 TOS Octet................ 58\n   23.  IANA Considerations..........................................
    60\n   23.1.  IPv4 TOS Byte and IPv6 Traffic Class Octet................. 60\n
    \  23.2.  TCP Header Flags........................................... 61\n   23.3.
    IPSEC Security Association Attributes....................... 62\n   24.  Authors'
    Addresses........................................... 62\n   25.  Full Copyright
    Statement..................................... 63\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   We begin by describing TCP's use of packet drops as an indication
    of\n   congestion.  Next we explain that with the addition of active queue\n   management
    (e.g., RED) to the Internet infrastructure, where routers\n   detect congestion
    before the queue overflows, routers are no longer\n   limited to packet drops
    as an indication of congestion.  Routers can\n   instead set the Congestion Experienced
    (CE) codepoint in the IP\n   header of packets from ECN-capable transports.  We
    describe when the\n   CE codepoint is to be set in routers, and describe modifications\n
    \  needed to TCP to make it ECN-capable.  Modifications to other\n   transport
    protocols (e.g., unreliable unicast or multicast, reliable\n   multicast, other
    reliable unicast transport protocols) could be\n   considered as those protocols
    are developed and advance through the\n   standards process.  We also describe
    in this document the issues\n   involving the use of ECN within IP tunnels, and
    within IPsec tunnels\n   in particular.\n   One of the guiding principles for
    this document is that, to the\n   extent possible, the mechanisms specified here
    be incrementally\n   deployable.  One challenge to the principle of incremental
    deployment\n   has been the prior existence of some IP tunnels that were not\n
    \  compatible with the use of ECN.  As ECN becomes deployed, non-\n   compatible
    IP tunnels will have to be upgraded to conform to this\n   document.\n   This
    document obsoletes RFC 2481, \"A Proposal to add Explicit\n   Congestion Notification
    (ECN) to IP\", which defined ECN as an\n   Experimental Protocol for the Internet
    Community.  This document also\n   updates RFC 2474, \"Definition of the Differentiated
    Services Field\n   (DS Field) in the IPv4 and IPv6 Headers\", in defining the
    ECN field\n   in the IP header, RFC 2401, \"Security Architecture for the Internet\n
    \  Protocol\" to change the handling of IPv4 TOS Byte and IPv6 Traffic\n   Class
    Octet in tunnel mode header construction to be compatible with\n   the use of
    ECN, and RFC 793, \"Transmission Control Protocol\", in\n   defining two new flags
    in the TCP header.\n   TCP's congestion control and avoidance algorithms are based
    on the\n   notion that the network is a black-box [Jacobson88, Jacobson90].  The\n
    \  network's state of congestion or otherwise is determined by end-\n   systems
    probing for the network state, by gradually increasing the\n   load on the network
    (by increasing the window of packets that are\n   outstanding in the network)
    until the network becomes congested and a\n   packet is lost.  Treating the network
    as a \"black-box\" and treating\n   loss as an indication of congestion in the
    network is appropriate for\n   pure best-effort data carried by TCP, with little
    or no sensitivity\n   to delay or loss of individual packets.  In addition, TCP's\n
    \  congestion management algorithms have techniques built-in (such as\n   Fast
    Retransmit and Fast Recovery) to minimize the impact of losses,\n   from a throughput
    perspective.  However, these mechanisms are not\n   intended to help applications
    that are in fact sensitive to the delay\n   or loss of one or more individual
    packets.  Interactive traffic such\n   as telnet, web-browsing, and transfer of
    audio and video data can be\n   sensitive to packet losses (especially when using
    an unreliable data\n   delivery transport such as UDP) or to the increased latency
    of the\n   packet caused by the need to retransmit the packet after a loss (with\n
    \  the reliable data delivery semantics provided by TCP).\n   Since TCP determines
    the appropriate congestion window to use by\n   gradually increasing the window
    size until it experiences a dropped\n   packet, this causes the queues at the
    bottleneck router to build up.\n   With most packet drop policies at the router
    that are not sensitive\n   to the load placed by each individual flow (e.g., tail-drop
    on queue\n   overflow), this means that some of the packets of latency-sensitive\n
    \  flows may be dropped. In addition, such drop policies lead to\n   synchronization
    of loss across multiple flows.\n   Active queue management mechanisms detect congestion
    before the queue\n   overflows, and provide an indication of this congestion to
    the end\n   nodes.  Thus, active queue management can reduce unnecessary queuing\n
    \  delay for all traffic sharing that queue.  The advantages of active\n   queue
    management are discussed in RFC 2309 [RFC2309].  Active queue\n   management avoids
    some of the bad properties of dropping on queue\n   overflow, including the undesirable
    synchronization of loss across\n   multiple flows.  More importantly, active queue
    management means that\n   transport protocols with mechanisms for congestion control
    (e.g.,\n   TCP) do not have to rely on buffer overflow as the only indication
    of\n   congestion.\n   Active queue management mechanisms may use one of several
    methods for\n   indicating congestion to end-nodes. One is to use packet drops,
    as is\n   currently done. However, active queue management allows the router to\n
    \  separate policies of queuing or dropping packets from the policies\n   for
    indicating congestion. Thus, active queue management allows\n   routers to use
    the Congestion Experienced (CE) codepoint in a packet\n   header as an indication
    of congestion, instead of relying solely on\n   packet drops. This has the potential
    of reducing the impact of loss\n   on latency-sensitive flows.\n   There exist
    some middleboxes (firewalls, load balancers, or intrusion\n   detection systems)
    in the Internet that either drop a TCP SYN packet\n   configured to negotiate
    ECN, or respond with a RST.  This document\n   specifies procedures that TCP implementations
    may use to provide\n   robust connectivity even in the presence of such equipment.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions and Acronyms\n   The keywords MUST, MUST NOT, REQUIRED, SHALL,
    SHALL NOT, SHOULD,\n   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear
    in this\n   document, are to be interpreted as described in [RFC2119].\n"
  title: 2.  Conventions and Acronyms
- contents:
  - "3.  Assumptions and General Principles\n   In this section, we describe some
    of the important design principles\n   and assumptions that guided the design
    choices in this proposal.\n      * Because ECN is likely to be adopted gradually,
    accommodating\n        migration is essential. Some routers may still only drop
    packets\n        to indicate congestion, and some end-systems may not be ECN-\n
    \       capable. The most viable strategy is one that accommodates\n        incremental
    deployment without having to resort to \"islands\" of\n        ECN-capable and
    non-ECN-capable environments.\n      * New mechanisms for congestion control and
    avoidance need to co-\n        exist and cooperate with existing mechanisms for
    congestion\n        control.  In particular, new mechanisms have to co-exist with\n
    \       TCP's current methods of adapting to congestion and with\n        routers'
    current practice of dropping packets in periods of\n        congestion.\n      *
    Congestion may persist over different time-scales. The time\n        scales that
    we are concerned with are congestion events that may\n        last longer than
    a round-trip time.\n      * The number of packets in an individual flow (e.g.,
    TCP\n        connection or an exchange using UDP) may range from a small\n        number
    of packets to quite a large number. We are interested in\n        managing the
    congestion caused by flows that send enough packets\n        so that they are
    still active when network feedback reaches\n        them.\n      * Asymmetric
    routing is likely to be a normal occurrence in the\n        Internet. The path
    (sequence of links and routers) followed by\n        data packets may be different
    from the path followed by the\n        acknowledgment packets in the reverse direction.\n
    \     * Many routers process the \"regular\" headers in IP packets more\n        efficiently
    than they process the header information in IP\n        options.  This suggests
    keeping congestion experienced\n        information in the regular headers of
    an IP packet.\n      * It must be recognized that not all end-systems will cooperate
    in\n        mechanisms for congestion control. However, new mechanisms\n        shouldn't
    make it easier for TCP applications to disable TCP\n        congestion control.
    \ The benefit of lying about participating in\n        new mechanisms such as
    ECN-capability should be small.\n"
  title: 3.  Assumptions and General Principles
- contents:
  - "4.  Active Queue Management (AQM)\n   Random Early Detection (RED) is one mechanism
    for Active Queue\n   Management (AQM) that has been proposed to detect incipient\n
    \  congestion [FJ93], and is currently being deployed in the Internet\n   [RFC2309].
    \ AQM is meant to be a general mechanism using one of\n   several alternatives
    for congestion indication, but in the absence of\n   ECN, AQM is restricted to
    using packet drops as a mechanism for\n   congestion indication.  AQM drops packets
    based on the average queue\n   length exceeding a threshold, rather than only
    when the queue\n   overflows.  However, because AQM may drop packets before the
    queue\n   actually overflows, AQM is not always forced by memory limitations to\n
    \  discard the packet.\n   AQM can set a Congestion Experienced (CE) codepoint
    in the packet\n   header instead of dropping the packet, when such a field is
    provided\n   in the IP header and understood by the transport protocol.  The use\n
    \  of the CE codepoint with ECN allows the receiver(s) to receive the\n   packet,
    avoiding the potential for excessive delays due to\n   retransmissions after packet
    losses.  We use the term 'CE packet' to\n   denote a packet that has the CE codepoint
    set.\n"
  title: 4.  Active Queue Management (AQM)
- contents:
  - "5.  Explicit Congestion Notification in IP\n   This document specifies that the
    Internet provide a congestion\n   indication for incipient congestion (as in RED
    and earlier work\n   [RJ90]) where the notification can sometimes be through marking\n
    \  packets rather than dropping them.  This uses an ECN field in the IP\n   header
    with two bits, making four ECN codepoints, '00' to '11'.  The\n   ECN-Capable
    Transport (ECT) codepoints '10' and '01' are set by the\n   data sender to indicate
    that the end-points of the transport protocol\n   are ECN-capable; we call them
    ECT(0) and ECT(1) respectively.  The\n   phrase \"the ECT codepoint\" in this
    documents refers to either of the\n   two ECT codepoints.  Routers treat the ECT(0)
    and ECT(1) codepoints\n   as equivalent.  Senders are free to use either the ECT(0)
    or the\n   ECT(1) codepoint to indicate ECT, on a packet-by-packet basis.\n   The
    use of both the two codepoints for ECT, ECT(0) and ECT(1), is\n   motivated primarily
    by the desire to allow mechanisms for the data\n   sender to verify that network
    elements are not erasing the CE\n   codepoint, and that data receivers are properly
    reporting to the\n   sender the receipt of packets with the CE codepoint set,
    as required\n   by the transport protocol.  Guidelines for the senders and receivers\n
    \  to differentiate between the ECT(0) and ECT(1) codepoints will be\n   addressed
    in separate documents, for each transport protocol.  In\n   particular, this document
    does not address mechanisms for TCP end-\n   nodes to differentiate between the
    ECT(0) and ECT(1) codepoints.\n   Protocols and senders that only require a single
    ECT codepoint SHOULD\n   use ECT(0).\n   The not-ECT codepoint '00' indicates
    a packet that is not using ECN.\n   The CE codepoint '11' is set by a router to
    indicate congestion to\n   the end nodes.  Routers that have a packet arriving
    at a full queue\n   drop the packet, just as they do in the absence of ECN.\n
    \     +-----+-----+\n      | ECN FIELD |\n      +-----+-----+\n        ECT   CE
    \        [Obsolete] RFC 2481 names for the ECN bits.\n         0     0         Not-ECT\n
    \        0     1         ECT(1)\n         1     0         ECT(0)\n         1     1
    \        CE\n      Figure 1: The ECN Field in IP.\n   The use of two ECT codepoints
    essentially gives a one-bit ECN nonce\n   in packet headers, and routers necessarily
    \"erase\" the nonce when\n   they set the CE codepoint [SCWA99].  For example,
    routers that erased\n   the CE codepoint would face additional difficulty in reconstructing\n
    \  the original nonce, and thus repeated erasure of the CE codepoint\n   would
    be more likely to be detected by the end-nodes.  The ECN nonce\n   also can address
    the problem of misbehaving transport receivers lying\n   to the transport sender
    about whether or not the CE codepoint was set\n   in a packet.  The motivations
    for the use of two ECT codepoints is\n   discussed in more detail in Section 20,
    along with some discussion of\n   alternate possibilities for the fourth ECT codepoint
    (that is, the\n   codepoint '01').  Backwards compatibility with earlier ECN\n
    \  implementations that do not understand the ECT(1) codepoint is\n   discussed
    in Section 11.\n   In RFC 2481 [RFC2481], the ECN field was divided into the ECN-Capable\n
    \  Transport (ECT) bit and the CE bit.  The ECN field with only the\n   ECN-Capable
    Transport (ECT) bit set in RFC 2481 corresponds to the\n   ECT(0) codepoint in
    this document, and the ECN field with both the\n   ECT and CE bit in RFC 2481
    corresponds to the CE codepoint in this\n   document.  The '01' codepoint was
    left undefined in RFC 2481, and\n   this is the reason for recommending the use
    of ECT(0) when only a\n   single ECT codepoint is needed.\n         0     1     2
    \    3     4     5     6     7\n      +-----+-----+-----+-----+-----+-----+-----+-----+\n
    \     |          DS FIELD, DSCP           | ECN FIELD |\n      +-----+-----+-----+-----+-----+-----+-----+-----+\n
    \       DSCP: differentiated services codepoint\n        ECN:  Explicit Congestion
    Notification\n      Figure 2: The Differentiated Services and ECN Fields in IP.\n
    \  Bits 6 and 7 in the IPv4 TOS octet are designated as the ECN field.\n   The
    IPv4 TOS octet corresponds to the Traffic Class octet in IPv6,\n   and the ECN
    field is defined identically in both cases.  The\n   definitions for the IPv4
    TOS octet [RFC791] and the IPv6 Traffic\n   Class octet have been superseded by
    the six-bit DS (Differentiated\n   Services) Field [RFC2474, RFC2780].  Bits 6
    and 7 are listed in\n   [RFC2474] as Currently Unused, and are specified in RFC
    2780 as\n   approved for experimental use for ECN.  Section 22 gives a brief\n
    \  history of the TOS octet.\n   Because of the unstable history of the TOS octet,
    the use of the ECN\n   field as specified in this document cannot be guaranteed
    to be\n   backwards compatible with those past uses of these two bits that\n   pre-date
    ECN.  The potential dangers of this lack of backwards\n   compatibility are discussed
    in Section 22.\n   Upon the receipt by an ECN-Capable transport of a single CE
    packet,\n   the congestion control algorithms followed at the end-systems MUST
    be\n   essentially the same as the congestion control response to a *single*\n
    \  dropped packet.  For example, for ECN-Capable TCP the source TCP is\n   required
    to halve its congestion window for any window of data\n   containing either a
    packet drop or an ECN indication.\n   One reason for requiring that the congestion-control
    response to the\n   CE packet be essentially the same as the response to a dropped
    packet\n   is to accommodate the incremental deployment of ECN in both end-\n
    \  systems and in routers.  Some routers may drop ECN-Capable packets\n   (e.g.,
    using the same AQM policies for congestion detection) while\n   other routers
    set the CE codepoint, for equivalent levels of\n   congestion.  Similarly, a router
    might drop a non-ECN-Capable packet\n   but set the CE codepoint in an ECN-Capable
    packet, for equivalent\n   levels of congestion.  If there were different congestion
    control\n   responses to a CE codepoint than to a packet drop, this could result\n
    \  in unfair treatment for different flows.\n   An additional goal is that the
    end-systems should react to congestion\n   at most once per window of data (i.e.,
    at most once per round-trip\n   time), to avoid reacting multiple times to multiple
    indications of\n   congestion within a round-trip time.\n   For a router, the
    CE codepoint of an ECN-Capable packet SHOULD only\n   be set if the router would
    otherwise have dropped the packet as an\n   indication of congestion to the end
    nodes. When the router's buffer\n   is not yet full and the router is prepared
    to drop a packet to inform\n   end nodes of incipient congestion, the router should
    first check to\n   see if the ECT codepoint is set in that packet's IP header.
    \ If so,\n   then instead of dropping the packet, the router MAY instead set the\n
    \  CE codepoint in the IP header.\n   An environment where all end nodes were
    ECN-Capable could allow new\n   criteria to be developed for setting the CE codepoint,
    and new\n   congestion control mechanisms for end-node reaction to CE packets.\n
    \  However, this is a research issue, and as such is not addressed in\n   this
    document.\n   When a CE packet (i.e., a packet that has the CE codepoint set)
    is\n   received by a router, the CE codepoint is left unchanged, and the\n   packet
    is transmitted as usual. When severe congestion has occurred\n   and the router's
    queue is full, then the router has no choice but to\n   drop some packet when
    a new packet arrives.  We anticipate that such\n   packet losses will become relatively
    infrequent when a majority of\n   end-systems become ECN-Capable and participate
    in TCP or other\n   compatible congestion control mechanisms. In an ECN-Capable\n
    \  environment that is adequately-provisioned, packet losses should\n   occur
    primarily during transients or in the presence of non-\n   cooperating sources.\n
    \  The above discussion of when CE may be set instead of dropping a\n   packet
    applies by default to all Differentiated Services Per-Hop\n   Behaviors (PHBs)
    [RFC 2475].  Specifications for PHBs MAY provide\n   more specifics on how a compliant
    implementation is to choose between\n   setting CE and dropping a packet, but
    this is NOT REQUIRED.  A router\n   MUST NOT set CE instead of dropping a packet
    when the drop that would\n   occur is caused by reasons other than congestion
    or the desire to\n   indicate incipient congestion to end nodes (e.g., a diffserv
    edge\n   node may be configured to unconditionally drop certain classes of\n   traffic
    to prevent them from entering its diffserv domain).\n   We expect that routers
    will set the CE codepoint in response to\n   incipient congestion as indicated
    by the average queue size, using\n   the RED algorithms suggested in [FJ93, RFC2309].
    \ To the best of our\n   knowledge, this is the only proposal currently under
    discussion in\n   the IETF for routers to drop packets proactively, before the
    buffer\n   overflows.  However, this document does not attempt to specify a\n
    \  particular mechanism for active queue management, leaving that\n   endeavor,
    if needed, to other areas of the IETF.  While ECN is\n   inextricably tied up
    with the need to have a reasonable active queue\n   management mechanism at the
    router, the reverse does not hold; active\n   queue management mechanisms have
    been developed and deployed\n   independent of ECN, using packet drops as indications
    of congestion\n   in the absence of ECN in the IP architecture.\n"
  - contents:
    - "5.1.  ECN as an Indication of Persistent Congestion\n   We emphasize that a
      *single* packet with the CE codepoint set in an\n   IP packet causes the transport
      layer to respond, in terms of\n   congestion control, as it would to a packet
      drop.  The instantaneous\n   queue size is likely to see considerable variations
      even when the\n   router does not experience persistent congestion.  As such,
      it is\n   important that transient congestion at a router, reflected by the\n
      \  instantaneous queue size reaching a threshold much smaller than the\n   capacity
      of the queue, not trigger a reaction at the transport layer.\n   Therefore,
      the CE codepoint should not be set by a router based on\n   the instantaneous
      queue size.\n   For example, since the ATM and Frame Relay mechanisms for congestion\n
      \  indication have typically been defined without an associated notion\n   of
      average queue size as the basis for determining that an\n   intermediate node
      is congested, we believe that they provide a very\n   noisy signal. The TCP-sender
      reaction specified in this document for\n   ECN is NOT the appropriate reaction
      for such a noisy signal of\n   congestion notification.  However, if the routers
      that interface to\n   the ATM network have a way of maintaining the average
      queue at the\n   interface, and use it to come to a reliable determination that
      the\n   ATM subnet is congested, they may use the ECN notification that is\n
      \  defined here.\n   We continue to encourage experiments in techniques at layer
      2 (e.g.,\n   in ATM switches or Frame Relay switches) to take advantage of ECN.\n
      \  For example, using a scheme such as RED (where packet marking is\n   based
      on the average queue length exceeding a threshold), layer 2\n   devices could
      provide a reasonably reliable indication of congestion.\n   When all the layer
      2 devices in a path set that layer's own\n   Congestion Experienced codepoint
      (e.g., the EFCI bit for ATM, the\n   FECN bit in Frame Relay) in this reliable
      manner, then the interface\n   router to the layer 2 network could copy the
      state of that layer 2\n   Congestion Experienced codepoint into the CE codepoint
      in the IP\n   header.  We recognize that this is not the current practice, nor
      is\n   it in current standards. However, encouraging experimentation in this\n
      \  manner may provide the information needed to enable evolution of\n   existing
      layer 2 mechanisms to provide a more reliable means of\n   congestion indication,
      when they use a single bit for indicating\n   congestion.\n"
    title: 5.1.  ECN as an Indication of Persistent Congestion
  - contents:
    - "5.2.  Dropped or Corrupted Packets\n   For the proposed use for ECN in this
      document (that is, for a\n   transport protocol such as TCP for which a dropped
      data packet is an\n   indication of congestion), end nodes detect dropped data
      packets, and\n   the congestion response of the end nodes to a dropped data
      packet is\n   at least as strong as the congestion response to a received CE\n
      \  packet.  To ensure the reliable delivery of the congestion indication\n   of
      the CE codepoint, an ECT codepoint MUST NOT be set in a packet\n   unless the
      loss of that packet in the network would be detected by\n   the end nodes and
      interpreted as an indication of congestion.\n   Transport protocols such as
      TCP do not necessarily detect all packet\n   drops, such as the drop of a \"pure\"
      ACK packet; for example, TCP does\n   not reduce the arrival rate of subsequent
      ACK packets in response to\n   an earlier dropped ACK packet.  Any proposal
      for extending ECN-\n   Capability to such packets would have to address issues
      such as the\n   case of an ACK packet that was marked with the CE codepoint
      but was\n   later dropped in the network. We believe that this aspect is still\n
      \  the subject of research, so this document specifies that at this\n   time,
      \"pure\" ACK packets MUST NOT indicate ECN-Capability.\n   Similarly, if a CE
      packet is dropped later in the network due to\n   corruption (bit errors), the
      end nodes should still invoke congestion\n   control, just as TCP would today
      in response to a dropped data\n   packet. This issue of corrupted CE packets
      would have to be\n   considered in any proposal for the network to distinguish
      between\n   packets dropped due to corruption, and packets dropped due to\n
      \  congestion or buffer overflow.  In particular, the ubiquitous\n   deployment
      of ECN would not, in and of itself, be a sufficient\n   development to allow
      end-nodes to interpret packet drops as\n   indications of corruption rather
      than congestion.\n"
    title: 5.2.  Dropped or Corrupted Packets
  - contents:
    - "5.3.  Fragmentation\n   ECN-capable packets MAY have the DF (Don't Fragment)
      bit set.\n   Reassembly of a fragmented packet MUST NOT lose indications of\n
      \  congestion.  In other words, if any fragment of an IP packet to be\n   reassembled
      has the CE codepoint set, then one of two actions MUST be\n   taken:\n      *
      Set the CE codepoint on the reassembled packet.  However, this\n        MUST
      NOT occur if any of the other fragments contributing to\n        this reassembly
      carries the Not-ECT codepoint.\n      * The packet is dropped, instead of being
      reassembled, for any\n        other reason.\n   If both actions are applicable,
      either MAY be chosen.  Reassembly of\n   a fragmented packet MUST NOT change
      the ECN codepoint when all of the\n   fragments carry the same codepoint.\n
      \  We would note that because RFC 2481 did not specify reassembly\n   behavior,
      older ECN implementations conformant with that Experimental\n   RFC do not necessarily
      perform reassembly correctly, in terms of\n   preserving the CE codepoint in
      a fragment.  The sender could avoid\n   the consequences of this behavior by
      setting the DF bit in ECN-\n   Capable packets.\n   Situations may arise in
      which the above reassembly specification is\n   insufficiently precise.  For
      example, if there is a malicious or\n   broken entity in the path at or after
      the fragmentation point, packet\n   fragments could carry a mixture of ECT(0),
      ECT(1), and/or Not-ECT\n   codepoints.  The reassembly specification above does
      not place\n   requirements on reassembly of fragments in this case.  In situations\n
      \  where more precise reassembly behavior would be required, protocol\n   specifications
      SHOULD instead specify that DF MUST be set in all\n   ECN-capable packets sent
      by the protocol.\n"
    title: 5.3.  Fragmentation
  title: 5.  Explicit Congestion Notification in IP
- contents:
  - "6.  Support from the Transport Protocol\n   ECN requires support from the transport
    protocol, in addition to the\n   functionality given by the ECN field in the IP
    packet header. The\n   transport protocol might require negotiation between the
    endpoints\n   during setup to determine that all of the endpoints are ECN-capable,\n
    \  so that the sender can set the ECT codepoint in transmitted packets.\n   Second,
    the transport protocol must be capable of reacting\n   appropriately to the receipt
    of CE packets.  This reaction could be\n   in the form of the data receiver informing
    the data sender of the\n   received CE packet (e.g., TCP), of the data receiver
    unsubscribing to\n   a layered multicast group (e.g., RLM [MJV96]), or of some
    other\n   action that ultimately reduces the arrival rate of that flow on that\n
    \  congested link.  CE packets indicate persistent rather than transient\n   congestion
    (see Section 5.1), and hence reactions to the receipt of\n   CE packets should
    be those appropriate for persistent congestion.\n   This document only addresses
    the addition of ECN Capability to TCP,\n   leaving issues of ECN in other transport
    protocols to further\n   research.  For TCP, ECN requires three new pieces of
    functionality:\n   negotiation between the endpoints during connection setup to\n
    \  determine if they are both ECN-capable; an ECN-Echo (ECE) flag in the\n   TCP
    header so that the data receiver can inform the data sender when\n   a CE packet
    has been received; and a Congestion Window Reduced (CWR)\n   flag in the TCP header
    so that the data sender can inform the data\n   receiver that the congestion window
    has been reduced. The support\n   required from other transport protocols is likely
    to be different,\n   particularly for unreliable or reliable multicast transport\n
    \  protocols, and will have to be determined as other transport\n   protocols
    are brought to the IETF for standardization.\n   In a mild abuse of terminology,
    in this document we refer to `TCP\n   packets' instead of `TCP segments'.\n"
  - contents:
    - "6.1.  TCP\n   The following sections describe in detail the proposed use of
      ECN in\n   TCP.  This proposal is described in essentially the same form in\n
      \  [Floyd94]. We assume that the source TCP uses the standard congestion\n   control
      algorithms of Slow-start, Fast Retransmit and Fast Recovery\n   [RFC2581].\n
      \  This proposal specifies two new flags in the Reserved field of the\n   TCP
      header.  The TCP mechanism for negotiating ECN-Capability uses\n   the ECN-Echo
      (ECE) flag in the TCP header.  Bit 9 in the Reserved\n   field of the TCP header
      is designated as the ECN-Echo flag.  The\n   location of the 6-bit Reserved
      field in the TCP header is shown in\n   Figure 4 of RFC 793 [RFC793] (and is
      reproduced below for\n   completeness).  This specification of the ECN Field
      leaves the\n   Reserved field as a 4-bit field using bits 4-7.\n   To enable
      the TCP receiver to determine when to stop setting the\n   ECN-Echo flag, we
      introduce a second new flag in the TCP header, the\n   CWR flag.  The CWR flag
      is assigned to Bit 8 in the Reserved field of\n   the TCP header.\n        0
      \  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
      \     |               |                       | U | A | P | R | S | F |\n      |
      Header Length |        Reserved       | R | C | S | S | Y | I |\n      |               |
      \                      | G | K | H | T | N | N |\n      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
      \     Figure 3: The old definition of bytes 13 and 14 of the TCP\n                header.\n
      \       0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
      \     |               |               | C | E | U | A | P | R | S | F |\n      |
      Header Length |    Reserved   | W | C | R | C | S | S | Y | I |\n      |               |
      \              | R | E | G | K | H | T | N | N |\n      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
      \     Figure 4: The new definition of bytes 13 and 14 of the TCP\n                Header.\n
      \  Thus, ECN uses the ECT and CE flags in the IP header (as shown in\n   Figure
      1) for signaling between routers and connection endpoints, and\n   uses the
      ECN-Echo and CWR flags in the TCP header (as shown in Figure\n   4) for TCP-endpoint
      to TCP-endpoint signaling.  For a TCP connection,\n   a typical sequence of
      events in an ECN-based reaction to congestion\n   is as follows:\n      * An
      ECT codepoint is set in packets transmitted by the sender to\n        indicate
      that ECN is supported by the transport entities for\n        these packets.\n
      \     * An ECN-capable router detects impending congestion and detects\n        that
      an ECT codepoint is set in the packet it is about to drop.\n        Instead
      of dropping the packet, the router chooses to set the CE\n        codepoint
      in the IP header and forwards the packet.\n      * The receiver receives the
      packet with the CE codepoint set, and\n        sets the ECN-Echo flag in its
      next TCP ACK sent to the sender.\n      * The sender receives the TCP ACK with
      ECN-Echo set, and reacts to\n        the congestion as if a packet had been
      dropped.\n      * The sender sets the CWR flag in the TCP header of the next\n
      \       packet sent to the receiver to acknowledge its receipt of and\n        reaction
      to the ECN-Echo flag.\n   The negotiation for using ECN by the TCP transport
      entities and the\n   use of the ECN-Echo and CWR flags is described in more
      detail in the\n   sections below.\n"
    - contents:
      - "6.1.1  TCP Initialization\n   In the TCP connection setup phase, the source
        and destination TCPs\n   exchange information about their willingness to use
        ECN.  Subsequent\n   to the completion of this negotiation, the TCP sender
        sets an ECT\n   codepoint in the IP header of data packets to indicate to
        the network\n   that the transport is capable and willing to participate in
        ECN for\n   this packet. This indicates to the routers that they may mark
        this\n   packet with the CE codepoint, if they would like to use that as a\n
        \  method of congestion notification. If the TCP connection does not\n   wish
        to use ECN notification for a particular packet, the sending TCP\n   sets
        the ECN codepoint to not-ECT, and the TCP receiver ignores the\n   CE codepoint
        in the received packet.\n   For this discussion, we designate the initiating
        host as Host A and\n   the responding host as Host B.  We call a SYN packet
        with the ECE and\n   CWR flags set an \"ECN-setup SYN packet\", and we call
        a SYN packet\n   with at least one of the ECE and CWR flags not set a \"non-ECN-setup\n
        \  SYN packet\".  Similarly, we call a SYN-ACK packet with only the ECE\n
        \  flag set but the CWR flag not set an \"ECN-setup SYN-ACK packet\", and\n
        \  we call a SYN-ACK packet with any other configuration of the ECE and\n
        \  CWR flags a \"non-ECN-setup SYN-ACK packet\".\n   Before a TCP connection
        can use ECN, Host A sends an ECN-setup SYN\n   packet, and Host B sends an
        ECN-setup SYN-ACK packet.  For a SYN\n   packet, the setting of both ECE and
        CWR in the ECN-setup SYN packet\n   is defined as an indication that the sending
        TCP is ECN-Capable,\n   rather than as an indication of congestion or of response
        to\n   congestion. More precisely, an ECN-setup SYN packet indicates that\n
        \  the TCP implementation transmitting the SYN packet will participate\n   in
        ECN as both a sender and receiver.  Specifically, as a receiver,\n   it will
        respond to incoming data packets that have the CE codepoint\n   set in the
        IP header by setting ECE in outgoing TCP Acknowledgement\n   (ACK) packets.
        \ As a sender, it will respond to incoming packets that\n   have ECE set by
        reducing the congestion window and setting CWR when\n   appropriate.  An ECN-setup
        SYN packet does not commit the TCP sender\n   to setting the ECT codepoint
        in any or all of the packets it may\n   transmit.  However, the commitment
        to respond appropriately to\n   incoming packets with the CE codepoint set
        remains even if the TCP\n   sender in a later transmission, within this TCP
        connection, sends a\n   SYN packet without ECE and CWR set.\n   When Host
        B sends an ECN-setup SYN-ACK packet, it sets the ECE flag\n   but not the
        CWR flag.  An ECN-setup SYN-ACK packet is defined as an\n   indication that
        the TCP transmitting the SYN-ACK packet is ECN-\n   Capable.  As with the
        SYN packet, an ECN-setup SYN-ACK packet does\n   not commit the TCP host to
        setting the ECT codepoint in transmitted\n   packets.\n   The following rules
        apply to the sending of ECN-setup packets within\n   a TCP connection, where
        a TCP connection is defined by the standard\n   rules for TCP connection establishment
        and termination.\n      * If a host has received an ECN-setup SYN packet,
        then it MAY send\n        an ECN-setup SYN-ACK packet.  Otherwise, it MUST
        NOT send an\n        ECN-setup SYN-ACK packet.\n      * A host MUST NOT set
        ECT on data packets unless it has sent at\n        least one ECN-setup SYN
        or ECN-setup SYN-ACK packet, and has\n        received at least one ECN-setup
        SYN or ECN-setup SYN-ACK packet,\n        and has sent no non-ECN-setup SYN
        or non-ECN-setup SYN-ACK\n        packet.  If a host has received at least
        one non-ECN-setup SYN\n        or non-ECN-setup SYN-ACK packet, then it SHOULD
        NOT set ECT on\n        data packets.\n      * If a host ever sets the ECT
        codepoint on a data packet, then\n        that host MUST correctly set/clear
        the CWR TCP bit on all\n        subsequent packets in the connection.\n      *
        If a host has sent at least one ECN-setup SYN or ECN-setup SYN-\n        ACK
        packet, and has received no non-ECN-setup SYN or non-ECN-\n        setup SYN-ACK
        packet, then if that host receives TCP data\n        packets with ECT and
        CE codepoints set in the IP header, then\n        that host MUST process these
        packets as specified for an ECN-\n        capable connection.\n      * A host
        that is not willing to use ECN on a TCP connection SHOULD\n        clear both
        the ECE and CWR flags in all non-ECN-setup SYN and/or\n        SYN-ACK packets
        that it sends to indicate this unwillingness.\n        Receivers MUST correctly
        handle all forms of the non-ECN-setup\n        SYN and SYN-ACK packets.\n
        \     * A host MUST NOT set ECT on SYN or SYN-ACK packets.\n   A TCP client
        enters TIME-WAIT state after receiving a FIN-ACK, and\n   transitions to CLOSED
        state after a timeout.  Many TCP\n   implementations create a new TCP connection
        if they receive an in-\n   window SYN packet during TIME-WAIT state.  When
        a TCP host enters\n   TIME-WAIT or CLOSED state, it should ignore any previous
        state about\n   the negotiation of ECN for that connection.\n"
      - contents:
        - "6.1.1.1.  Middlebox Issues\n   ECN introduces the use of the ECN-Echo and
          CWR flags in the TCP\n   header (as shown in Figure 3) for initialization.
          \ There exist some\n   faulty firewalls, load balancers, and intrusion detection
          systems in\n   the Internet that either drop an ECN-setup SYN packet or
          respond with\n   a RST, in the belief that such a packet (with these bits
          set) is a\n   signature for a port-scanning tool that could be used in a
          denial-\n   of-service attack.  Some of the offending equipment has been\n
          \  identified, and a web page [FIXES] contains a list of non-compliant\n
          \  products and the fixes posted by the vendors, where these are\n   available.
          \ The TBIT web page [TBIT] lists some of the web servers\n   affected by
          this faulty equipment.  We mention this in this document\n   as a warning
          to the community of this problem.\n   To provide robust connectivity even
          in the presence of such faulty\n   equipment, a host that receives a RST
          in response to the transmission\n   of an ECN-setup SYN packet MAY resend
          a SYN with CWR and ECE cleared.\n   This could result in a TCP connection
          being established without using\n   ECN.\n   A host that receives no reply
          to an ECN-setup SYN within the normal\n   SYN retransmission timeout interval
          MAY resend the SYN and any\n   subsequent SYN retransmissions with CWR and
          ECE cleared.  To overcome\n   normal packet loss that results in the original
          SYN being lost, the\n   originating host may retransmit one or more ECN-setup
          SYN packets\n   before giving up and retransmitting the SYN with the CWR
          and ECE bits\n   cleared.\n   We note that in this case, the following example
          scenario is\n   possible:\n   (1) Host A: Sends an ECN-setup SYN.\n   (2)
          Host B: Sends an ECN-setup SYN/ACK, packet is dropped or delayed.\n   (3)
          Host A: Sends a non-ECN-setup SYN.\n   (4) Host B: Sends a non-ECN-setup
          SYN/ACK.\n   We note that in this case, following the procedures above,
          neither\n   Host A nor Host B may set the ECT bit on data packets.  Further,
          an\n   important consequence of the rules for ECN setup and usage in Section\n
          \  6.1.1 is that a host is forbidden from using the reception of ECT\n   data
          packets as an implicit signal that the other host is ECN-\n   capable.\n"
        title: 6.1.1.1.  Middlebox Issues
      - contents:
        - "6.1.1.2.  Robust TCP Initialization with an Echoed Reserved Field\n   There
          is the question of why we chose to have the TCP sending the SYN\n   set
          two ECN-related flags in the Reserved field of the TCP header for\n   the
          SYN packet, while the responding TCP sending the SYN-ACK sets\n   only one
          ECN-related flag in the SYN-ACK packet.  This asymmetry is\n   necessary
          for the robust negotiation of ECN-capability with some\n   deployed TCP
          implementations.  There exists at least one faulty TCP\n   implementation
          in which TCP receivers set the Reserved field of the\n   TCP header in ACK
          packets (and hence the SYN-ACK) simply to reflect\n   the Reserved field
          of the TCP header in the received data packet.\n   Because the TCP SYN packet
          sets the ECN-Echo and CWR flags to\n   indicate ECN-capability, while the
          SYN-ACK packet sets only the ECN-\n   Echo flag, the sending TCP correctly
          interprets a receiver's\n   reflection of its own flags in the Reserved
          field as an indication\n   that the receiver is not ECN-capable.  The sending
          TCP is not mislead\n   by a faulty TCP implementation sending a SYN-ACK
          packet that simply\n   reflects the Reserved field of the incoming SYN packet.\n"
        title: 6.1.1.2.  Robust TCP Initialization with an Echoed Reserved Field
      title: 6.1.1  TCP Initialization
    - contents:
      - "6.1.2.  The TCP Sender\n   For a TCP connection using ECN, new data packets
        are transmitted with\n   an ECT codepoint set in the IP header.  When only
        one ECT codepoint\n   is needed by a sender for all packets sent on a TCP
        connection,\n   ECT(0) SHOULD be used.  If the sender receives an ECN-Echo
        (ECE) ACK\n   packet (that is, an ACK packet with the ECN-Echo flag set in
        the TCP\n   header), then the sender knows that congestion was encountered
        in the\n   network on the path from the sender to the receiver.  The indication\n
        \  of congestion should be treated just as a congestion loss in non-\n   ECN-Capable
        TCP. That is, the TCP source halves the congestion window\n   \"cwnd\" and
        reduces the slow start threshold \"ssthresh\".  The sending\n   TCP SHOULD
        NOT increase the congestion window in response to the\n   receipt of an ECN-Echo
        ACK packet.\n   TCP should not react to congestion indications more than once
        every\n   window of data (or more loosely, more than once every round-trip\n
        \  time). That is, the TCP sender's congestion window should be reduced\n
        \  only once in response to a series of dropped and/or CE packets from a\n
        \  single window of data.  In addition, the TCP source should not\n   decrease
        the slow-start threshold, ssthresh, if it has been decreased\n   within the
        last round trip time.  However, if any retransmitted\n   packets are dropped,
        then this is interpreted by the source TCP as a\n   new instance of congestion.\n
        \  After the source TCP reduces its congestion window in response to a\n   CE
        packet, incoming acknowledgments that continue to arrive can\n   \"clock out\"
        outgoing packets as allowed by the reduced congestion\n   window.  If the
        congestion window consists of only one MSS (maximum\n   segment size), and
        the sending TCP receives an ECN-Echo ACK packet,\n   then the sending TCP
        should in principle still reduce its congestion\n   window in half. However,
        the value of the congestion window is\n   bounded below by a value of one
        MSS.  If the sending TCP were to\n   continue to send, using a congestion
        window of 1 MSS, this results in\n   the transmission of one packet per round-trip
        time.  It is necessary\n   to still reduce the sending rate of the TCP sender
        even further, on\n   receipt of an ECN-Echo packet when the congestion window
        is one.  We\n   use the retransmit timer as a means of reducing the rate further
        in\n   this circumstance.  Therefore, the sending TCP MUST reset the\n   retransmit
        timer on receiving the ECN-Echo packet when the congestion\n   window is one.
        \ The sending TCP will then be able to send a new\n   packet only when the
        retransmit timer expires.\n   When an ECN-Capable TCP sender reduces its congestion
        window for any\n   reason (because of a retransmit timeout, a Fast Retransmit,
        or in\n   response to an ECN Notification), the TCP sender sets the CWR flag
        in\n   the TCP header of the first new data packet sent after the window\n
        \  reduction.  If that data packet is dropped in the network, then the\n   sending
        TCP will have to reduce the congestion window again and\n   retransmit the
        dropped packet.\n   We ensure that the \"Congestion Window Reduced\" information
        is\n   reliably delivered to the TCP receiver.  This comes about from the\n
        \  fact that if the new data packet carrying the CWR flag is dropped,\n   then
        the TCP sender will have to again reduce its congestion window,\n   and send
        another new data packet with the CWR flag set.  Thus, the\n   CWR bit in the
        TCP header SHOULD NOT be set on retransmitted packets.\n   When the TCP data
        sender is ready to set the CWR bit after reducing\n   the congestion window,
        it SHOULD set the CWR bit only on the first\n   new data packet that it transmits.\n
        \  [Floyd94] discusses TCP's response to ECN in more detail.  [Floyd98]\n
        \  discusses the validation test in the ns simulator, which illustrates\n
        \  a wide range of ECN scenarios. These scenarios include the following:\n
        \  an ECN followed by another ECN, a Fast Retransmit, or a Retransmit\n   Timeout;
        a Retransmit Timeout or a Fast Retransmit followed by an\n   ECN; and a congestion
        window of one packet followed by an ECN.\n   TCP follows existing algorithms
        for sending data packets in response\n   to incoming ACKs, multiple duplicate
        acknowledgments, or retransmit\n   timeouts [RFC2581].  TCP also follows the
        normal procedures for\n   increasing the congestion window when it receives
        ACK packets without\n   the ECN-Echo bit set [RFC2581].\n"
      title: 6.1.2.  The TCP Sender
    - contents:
      - "6.1.3.  The TCP Receiver\n   When TCP receives a CE data packet at the destination
        end-system, the\n   TCP data receiver sets the ECN-Echo flag in the TCP header
        of the\n   subsequent ACK packet.  If there is any ACK withholding implemented,\n
        \  as in current \"delayed-ACK\" TCP implementations where the TCP\n   receiver
        can send an ACK for two arriving data packets, then the\n   ECN-Echo flag
        in the ACK packet will be set to '1' if the CE\n   codepoint is set in any
        of the data packets being acknowledged.  That\n   is, if any of the received
        data packets are CE packets, then the\n   returning ACK has the ECN-Echo flag
        set.\n   To provide robustness against the possibility of a dropped ACK packet\n
        \  carrying an ECN-Echo flag, the TCP receiver sets the ECN-Echo flag in\n
        \  a series of ACK packets sent subsequently.  The TCP receiver uses the\n
        \  CWR flag received from the TCP sender to determine when to stop\n   setting
        the ECN-Echo flag.\n   After a TCP receiver sends an ACK packet with the ECN-Echo
        bit set,\n   that TCP receiver continues to set the ECN-Echo flag in all the
        ACK\n   packets it sends (whether they acknowledge CE data packets or non-CE\n
        \  data packets) until it receives a CWR packet (a packet with the CWR\n   flag
        set).  After the receipt of the CWR packet, acknowledgments for\n   subsequent
        non-CE data packets do not have the ECN-Echo flag set. If\n   another CE packet
        is received by the data receiver, the receiver\n   would once again send ACK
        packets with the ECN-Echo flag set.  While\n   the receipt of a CWR packet
        does not guarantee that the data sender\n   received the ECN-Echo message,
        this does suggest that the data sender\n   reduced its congestion window at
        some point *after* it sent the data\n   packet for which the CE codepoint
        was set.\n   We have already specified that a TCP sender is not required to
        reduce\n   its congestion window more than once per window of data.  Some
        care\n   is required if the TCP sender is to avoid unnecessary reductions
        of\n   the congestion window when a window of data includes both dropped\n
        \  packets and (marked) CE packets.  This is illustrated in [Floyd98].\n"
      title: 6.1.3.  The TCP Receiver
    - contents:
      - "6.1.4.  Congestion on the ACK-path\n   For the current generation of TCP
        congestion control algorithms, pure\n   acknowledgement packets (e.g., packets
        that do not contain any\n   accompanying data) MUST be sent with the not-ECT
        codepoint.  Current\n   TCP receivers have no mechanisms for reducing traffic
        on the ACK-path\n   in response to congestion notification.  Mechanisms for
        responding to\n   congestion on the ACK-path are areas for current and future
        research.\n   (One simple possibility would be for the sender to reduce its\n
        \  congestion window when it receives a pure ACK packet with the CE\n   codepoint
        set). For current TCP implementations, a single dropped ACK\n   generally
        has only a very small effect on the TCP's sending rate.\n"
      title: 6.1.4.  Congestion on the ACK-path
    - contents:
      - "6.1.5.  Retransmitted TCP packets\n   This document specifies ECN-capable
        TCP implementations MUST NOT set\n   either ECT codepoint (ECT(0) or ECT(1))
        in the IP header for\n   retransmitted data packets, and that the TCP data
        receiver SHOULD\n   ignore the ECN field on arriving data packets that are
        outside of the\n   receiver's current window.  This is for greater security
        against\n   denial-of-service attacks, as well as for robustness of the ECN\n
        \  congestion indication with packets that are dropped later in the\n   network.\n
        \  First, we note that if the TCP sender were to set an ECT codepoint on\n
        \  a retransmitted packet, then if an unnecessarily-retransmitted packet\n
        \  was later dropped in the network, the end nodes would never receive\n   the
        indication of congestion from the router setting the CE\n   codepoint.  Thus,
        setting an ECT codepoint on retransmitted data\n   packets is not consistent
        with the robust delivery of the congestion\n   indication even for packets
        that are later dropped in the network.\n   In addition, an attacker capable
        of spoofing the IP source address of\n   the TCP sender could send data packets
        with arbitrary sequence\n   numbers, with the CE codepoint set in the IP header.
        \ On receiving\n   this spoofed data packet, the TCP data receiver would determine
        that\n   the data does not lie in the current receive window, and return a\n
        \  duplicate acknowledgement.  We define an out-of-window packet at the\n
        \  TCP data receiver as a data packet that lies outside the receiver's\n   current
        window.  On receiving an out-of-window packet, the TCP data\n   receiver has
        to decide whether or not to treat the CE codepoint in\n   the packet header
        as a valid indication of congestion, and therefore\n   whether to return ECN-Echo
        indications to the TCP data sender.  If\n   the TCP data receiver ignored
        the CE codepoint in an out-of-window\n   packet, then the TCP data sender
        would not receive this possibly-\n   legitimate indication of congestion from
        the network, resulting in a\n   violation of end-to-end congestion control.
        \ On the other hand, if\n   the TCP data receiver honors the CE indication
        in the out-of-window\n   packet, and reports the indication of congestion
        to the TCP data\n   sender, then the malicious node that created the spoofed,
        out-of-\n   window packet has successfully \"attacked\" the TCP connection
        by\n   forcing the data sender to unnecessarily reduce (halve) its\n   congestion
        window.  To prevent such a denial-of-service attack, we\n   specify that a
        legitimate TCP data sender MUST NOT set an ECT\n   codepoint on retransmitted
        data packets, and that the TCP data\n   receiver SHOULD ignore the CE codepoint
        on out-of-window packets.\n   One drawback of not setting ECT(0) or ECT(1)
        on retransmitted packets\n   is that it denies ECN protection for retransmitted
        packets.  However,\n   for an ECN-capable TCP connection in a fully-ECN-capable
        environment\n   with mild congestion, packets should rarely be dropped due
        to\n   congestion in the first place, and so instances of retransmitted\n
        \  packets should rarely arise.  If packets are being retransmitted,\n   then
        there are already packet losses (from corruption or from\n   congestion) that
        ECN has been unable to prevent.\n   We note that if the router sets the CE
        codepoint for an ECN-capable\n   data packet within a TCP connection, then
        the TCP connection is\n   guaranteed to receive that indication of congestion,
        or to receive\n   some other indication of congestion within the same window
        of data,\n   even if this packet is dropped or reordered in the network.  We\n
        \  consider two cases, when the packet is later retransmitted, and when\n
        \  the packet is not later retransmitted.\n   In the first case, if the packet
        is either dropped or delayed, and at\n   some point retransmitted by the data
        sender, then the retransmission\n   is a result of a Fast Retransmit or a
        Retransmit Timeout for either\n   that packet or for some prior packet in
        the same window of data.  In\n   this case, because the data sender already
        has retransmitted this\n   packet, we know that the data sender has already
        responded to an\n   indication of congestion for some packet within the same
        window of\n   data as the original packet.  Thus, even if the first transmission
        of\n   the packet is dropped in the network, or is delayed, if it had the
        CE\n   codepoint set, and is later ignored by the data receiver as an out-\n
        \  of-window packet, this is not a problem, because the sender has\n   already
        responded to an indication of congestion for that window of\n   data.\n   In
        the second case, if the packet is never retransmitted by the data\n   sender,
        then this data packet is the only copy of this data received\n   by the data
        receiver, and therefore arrives at the data receiver as\n   an in-window packet,
        regardless of how much the packet might be\n   delayed or reordered.  In this
        case, if the CE codepoint is set on\n   the packet within the network, this
        will be treated by the data\n   receiver as a valid indication of congestion.\n"
      title: 6.1.5.  Retransmitted TCP packets
    - contents:
      - "6.1.6.  TCP Window Probes.\n   When the TCP data receiver advertises a zero
        window, the TCP data\n   sender sends window probes to determine if the receiver's
        window has\n   increased.  Window probe packets do not contain any user data
        except\n   for the sequence number, which is a byte.  If a window probe packet\n
        \  is dropped in the network, this loss is not detected by the receiver.\n
        \  Therefore, the TCP data sender MUST NOT set either an ECT codepoint\n   or
        the CWR bit on window probe packets.\n   However, because window probes use
        exact sequence numbers, they\n   cannot be easily spoofed in denial-of-service
        attacks.  Therefore, if\n   a window probe arrives with the CE codepoint set,
        then the receiver\n   SHOULD respond to the ECN indications.\n"
      title: 6.1.6.  TCP Window Probes.
    title: 6.1.  TCP
  title: 6.  Support from the Transport Protocol
- contents:
  - "7.  Non-compliance by the End Nodes\n   This section discusses concerns about
    the vulnerability of ECN to\n   non-compliant end-nodes (i.e., end nodes that
    set the ECT codepoint\n   in transmitted packets but do not respond to received
    CE packets).\n   We argue that the addition of ECN to the IP architecture will
    not\n   significantly increase the current vulnerability of the architecture\n
    \  to unresponsive flows.\n   Even for non-ECN environments, there are serious
    concerns about the\n   damage that can be done by non-compliant or unresponsive
    flows (that\n   is, flows that do not respond to congestion control indications
    by\n   reducing their arrival rate at the congested link).  For example, an\n
    \  end-node could \"turn off congestion control\" by not reducing its\n   congestion
    window in response to packet drops. This is a concern for\n   the current Internet.
    \ It has been argued that routers will have to\n   deploy mechanisms to detect
    and differentially treat packets from\n   non-compliant flows [RFC2309,FF99].
    \ It has also been suggested that\n   techniques such as end-to-end per-flow scheduling
    and isolation of\n   one flow from another, differentiated services, or end-to-end\n
    \  reservations could remove some of the more damaging effects of\n   unresponsive
    flows.\n   It might seem that dropping packets in itself is an adequate\n   deterrent
    for non-compliance, and that the use of ECN removes this\n   deterrent.  We would
    argue in response that (1) ECN-capable routers\n   preserve packet-dropping behavior
    in times of high congestion; and\n   (2) even in times of high congestion, dropping
    packets in itself is\n   not an adequate deterrent for non-compliance.\n   First,
    ECN-Capable routers will only mark packets (as opposed to\n   dropping them) when
    the packet marking rate is reasonably low. During\n   periods where the average
    queue size exceeds an upper threshold, and\n   therefore the potential packet
    marking rate would be high, our\n   recommendation is that routers drop packets
    rather then set the CE\n   codepoint in packet headers.\n   During the periods
    of low or moderate packet marking rates when ECN\n   would be deployed, there
    would be little deterrent effect on\n   unresponsive flows of dropping rather
    than marking those packets. For\n   example, delay-insensitive flows using reliable
    delivery might have\n   an incentive to increase rather than to decrease their
    sending rate\n   in the presence of dropped packets.  Similarly, delay-sensitive
    flows\n   using unreliable delivery might increase their use of FEC in response\n
    \  to an increased packet drop rate, increasing rather than decreasing\n   their
    sending rate.  For the same reasons, we do not believe that\n   packet dropping
    itself is an effective deterrent for non-compliance\n   even in an environment
    of high packet drop rates, when all flows are\n   sharing the same packet drop
    rate.\n   Several methods have been proposed to identify and restrict non-\n   compliant
    or unresponsive flows. The addition of ECN to the network\n   environment would
    not in any way increase the difficulty of designing\n   and deploying such mechanisms.
    If anything, the addition of ECN to\n   the architecture would make the job of
    identifying unresponsive flows\n   slightly easier.  For example, in an ECN-Capable
    environment routers\n   are not limited to information about packets that are
    dropped or have\n   the CE codepoint set at that router itself; in such an environment,\n
    \  routers could also take note of arriving CE packets that indicate\n   congestion
    encountered by that packet earlier in the path.\n"
  title: 7.  Non-compliance by the End Nodes
- contents:
  - "8.  Non-compliance in the Network\n   This section considers the issues when
    a router is operating,\n   possibly maliciously, to modify either of the bits
    in the ECN field.\n   We note that in IPv4, the IP header is protected from bit
    errors by a\n   header checksum;  this is not the case in IPv6.  Thus for IPv6
    the\n   ECN field can be accidentally modified by bit errors on links or in\n
    \  routers without being detected by an IP header checksum.\n   By tampering with
    the bits in the ECN field, an adversary (or a\n   broken router) could do one
    or more of the following: falsely report\n   congestion, disable ECN-Capability
    for an individual packet, erase\n   the ECN congestion indication, or falsely
    indicate ECN-Capability.\n   Section 18 systematically examines the various cases
    by which the ECN\n   field could be modified.  The important criterion considered
    in\n   determining the consequences of such modifications is whether it is\n   likely
    to lead to poorer behavior in any dimension (throughput,\n   delay, fairness or
    functionality) than if a router were to drop a\n   packet.\n   The first two possible
    changes, falsely reporting congestion or\n   disabling ECN-Capability for an individual
    packet, are no worse than\n   if the router were to simply drop the packet.  From
    a congestion\n   control point of view, setting the CE codepoint in the absence
    of\n   congestion by a non-compliant router would be no worse than a router\n
    \  dropping a packet unnecessarily. By \"erasing\" an ECT codepoint of a\n   packet
    that is later dropped in the network, a router's actions could\n   result in an
    unnecessary packet drop for that packet later in the\n   network.\n   However,
    as discussed in Section 18, a router that erases the ECN\n   congestion indication
    or falsely indicates ECN-Capability could\n   potentially do more damage to the
    flow that if it has simply dropped\n   the packet.  A rogue or broken router that
    \"erased\" the CE codepoint\n   in arriving CE packets would prevent that indication
    of congestion\n   from reaching downstream receivers.  This could result in the
    failure\n   of congestion control for that flow and a resulting increase in\n
    \  congestion in the network, ultimately resulting in subsequent packets\n   dropped
    for this flow as the average queue size increased at the\n   congested gateway.\n
    \  Section 19 considers the potential repercussions of subverting end-\n   to-end
    congestion control by either falsely indicating ECN-\n   Capability, or by erasing
    the congestion indication in ECN (the CE-\n   codepoint).  We observe in Section
    19 that the consequence of\n   subverting ECN-based congestion control may lead
    to potential\n   unfairness, but this is likely to be no worse than the subversion
    of\n   either ECN-based or packet-based congestion control by the end nodes.\n"
  - contents:
    - "8.1.  Complications Introduced by Split Paths\n   If a router or other network
      element has access to all of the packets\n   of a flow, then that router could
      do no more damage to a flow by\n   altering the ECN field than it could by simply
      dropping all of the\n   packets from that flow.  However, in some cases, a malicious
      or\n   broken router might have access to only a subset of the packets from\n
      \  a flow.  The question is as follows:  can this router, by altering\n   the
      ECN field in this subset of the packets, do more damage to that\n   flow than
      if it has simply dropped that set of the packets?\n   This is also discussed
      in detail in Section 18, which concludes as\n   follows:  It is true that the
      adversary that has access only to a\n   subset of packets in an aggregate might,
      by subverting ECN-based\n   congestion control, be able to deny the benefits
      of ECN to the other\n   packets in the aggregate.  While this is undesirable,
      this is not a\n   sufficient concern to result in disabling ECN.\n"
    title: 8.1.  Complications Introduced by Split Paths
  title: 8.  Non-compliance in the Network
- contents:
  - '9.  Encapsulated Packets

    '
  - contents:
    - "9.1.  IP packets encapsulated in IP\n   The encapsulation of IP packet headers
      in tunnels is used in many\n   places, including IPsec and IP in IP [RFC2003].
      \ This section\n   considers issues related to interactions between ECN and
      IP tunnels,\n   and specifies two alternative solutions.  This discussion is\n
      \  complemented by RFC 2983's discussion of interactions between\n   Differentiated
      Services and IP tunnels of various forms [RFC 2983],\n   as Differentiated Services
      uses the remaining six bits of the IP\n   header octet that is used by ECN (see
      Figure 2 in Section 5).\n   Some IP tunnel modes are based on adding a new \"outer\"
      IP header that\n   encapsulates the original, or \"inner\" IP header and its
      associated\n   packet.  In many cases, the new \"outer\" IP header may be added
      and\n   removed at intermediate points along a connection, enabling the\n   network
      to establish a tunnel without requiring endpoint\n   participation.  We denote
      tunnels that specify that the outer header\n   be discarded at tunnel egress
      as \"simple tunnels\".\n   ECN uses the ECN field in the IP header for signaling
      between routers\n   and connection endpoints.  ECN interacts with IP tunnels
      based on the\n   treatment of the ECN field in the IP header.  In simple IP
      tunnels\n   the octet containing the ECN field is copied or mapped from the
      inner\n   IP header to the outer IP header at IP tunnel ingress, and the outer\n
      \  header's copy of this field is discarded at IP tunnel egress.  If the\n   outer
      header were to be simply discarded without taking care to deal\n   with the
      ECN field, and an ECN-capable router were to set the CE\n   (Congestion Experienced)
      codepoint within a packet in a simple IP\n   tunnel, this indication would be
      discarded at tunnel egress, losing\n   the indication of congestion.\n   Thus,
      the use of ECN over simple IP tunnels would result in routers\n   attempting
      to use the outer IP header to signal congestion to\n   endpoints, but those
      congestion warnings never arriving because the\n   outer header is discarded
      at the tunnel egress point.  This problem\n   was encountered with ECN and IPsec
      in tunnel mode, and RFC 2481\n   recommended that ECN not be used with the older
      simple IPsec tunnels\n   in order to avoid this behavior and its consequences.
      \ When ECN\n   becomes widely deployed, then simple tunnels likely to carry
      ECN-\n   capable traffic will have to be changed.  If ECN-capable traffic is\n
      \  carried by a simple tunnel through a congested, ECN-capable router,\n   this
      could result in subsequent packets being dropped for this flow\n   as the average
      queue size increases at the congested router, as\n   discussed in Section 8
      above.\n   From a security point of view, the use of ECN in the outer header
      of\n   an IP tunnel might raise security concerns because an adversary could\n
      \  tamper with the ECN information that propagates beyond the tunnel\n   endpoint.
      \ Based on an analysis in Sections 18 and 19 of these\n   concerns and the resultant
      risks, our overall approach is to make\n   support for ECN an option for IP
      tunnels, so that an IP tunnel can be\n   specified or configured either to use
      ECN or not to use ECN in the\n   outer header of the tunnel.  Thus, in environments
      or tunneling\n   protocols where the risks of using ECN are judged to outweigh
      its\n   benefits, the tunnel can simply not use ECN in the outer header.\n   Then
      the only indication of congestion experienced at routers within\n   the tunnel
      would be through packet loss.\n   The result is that there are two viable options
      for the behavior of\n   ECN-capable connections over an IP tunnel, including
      IPsec tunnels:\n      * A limited-functionality option in which ECN is preserved
      in the\n        inner header, but disabled in the outer header.  The only\n
      \       mechanism available for signaling congestion occurring within\n        the
      tunnel in this case is dropped packets.\n      * A full-functionality option
      that supports ECN in both the inner\n        and outer headers, and propagates
      congestion warnings from nodes\n        within the tunnel to endpoints.\n   Support
      for these options requires varying amounts of changes to IP\n   header processing
      at tunnel ingress and egress.  A small subset of\n   these changes sufficient
      to support only the limited-functionality\n   option would be sufficient to
      eliminate any incompatibility between\n   ECN and IP tunnels.\n   One goal of
      this document is to give guidance about the tradeoffs\n   between the limited-functionality
      and full-functionality options.  A\n   full discussion of the potential effects
      of an adversary's\n   modifications of the ECN field is given in Sections 18
      and 19.\n"
    - contents:
      - "9.1.1.  The Limited-functionality and Full-functionality Options\n   The
        limited-functionality option for ECN encapsulation in IP tunnels\n   is for
        the not-ECT codepoint to be set in the outside (encapsulating)\n   header
        regardless of the value of the ECN field in the inside\n   (encapsulated)
        header.  With this option, the ECN field in the inner\n   header is not altered
        upon de-capsulation.  The disadvantage of this\n   approach is that the flow
        does not have ECN support for that part of\n   the path that is using IP tunneling,
        even if the encapsulated packet\n   (from the original TCP sender) is ECN-Capable.
        \ That is, if the\n   encapsulated packet arrives at a congested router that
        is ECN-\n   capable, and the router can decide to drop or mark the packet
        as an\n   indication of congestion to the end nodes, the router will not be\n
        \  permitted to set the CE codepoint in the packet header, but instead\n   will
        have to drop the packet.\n   The full-functionality option for ECN encapsulation
        is to copy the\n   ECN codepoint of the inside header to the outside header
        on\n   encapsulation if the inside header is not-ECT or ECT, and to set the\n
        \  ECN codepoint of the outside header to ECT(0) if the ECN codepoint of\n
        \  the inside header is CE.  On decapsulation, if the CE codepoint is\n   set
        on the outside header, then the CE codepoint is also set in the\n   inner
        header.  Otherwise, the ECN codepoint on the inner header is\n   left unchanged.
        \ That is, for full ECN support the encapsulation and\n   decapsulation processing
        involves the following:  At tunnel ingress,\n   the full-functionality option
        sets the ECN codepoint in the outer\n   header.  If the ECN codepoint in the
        inner header is not-ECT or ECT,\n   then it is copied to the ECN codepoint
        in the outer header.  If the\n   ECN codepoint in the inner header is CE,
        then the ECN codepoint in\n   the outer header is set to ECT(0).  Upon decapsulation
        at the tunnel\n   egress, the full-functionality option sets the CE codepoint
        in the\n   inner header if the CE codepoint is set in the outer header.\n
        \  Otherwise, no change is made to this field of the inner header.\n   With
        the full-functionality option, a flow can take advantage of ECN\n   in those
        parts of the path that might use IP tunneling.  The\n   disadvantage of the
        full-functionality option from a security\n   perspective is that the IP tunnel
        cannot protect the flow from\n   certain modifications to the ECN bits in
        the IP header within the\n   tunnel.  The potential dangers from modifications
        to the ECN bits in\n   the IP header are described in detail in Sections 18
        and 19.\n      (1) An IP tunnel MUST modify the handling of the DS field octet
        at\n      IP tunnel endpoints by implementing either the limited-\n      functionality
        or the full-functionality option.\n      (2) Optionally, an IP tunnel MAY
        enable the endpoints of an IP\n      tunnel to negotiate the choice between
        the limited-functionality\n      and the full-functionality option for ECN
        in the tunnel.\n   The minimum required to make ECN usable with IP tunnels
        is the\n   limited-functionality option, which prevents ECN from being enabled\n
        \  in the outer header of the tunnel.  Full support for ECN requires the\n
        \  use of the full-functionality option.  If there are no optional\n   mechanisms
        for the tunnel endpoints to negotiate a choice between the\n   limited-functionality
        or full-functionality option, there can be a\n   pre-existing agreement between
        the tunnel endpoints about whether to\n   support the limited-functionality
        or the full-functionality ECN\n   option.\n   All IP tunnels MUST implement
        the limited-functionality option, and\n   SHOULD support the full-functionality
        option.\n   In addition, it is RECOMMENDED that packets with the CE codepoint
        in\n   the outer header be dropped if they arrive at the tunnel egress point\n
        \  for a tunnel that uses the limited-functionality option, or for a\n   tunnel
        that uses the full-functionality option but for which the\n   not-ECT codepoint
        is set in the inner header.  This is motivated by\n   backwards compatibility
        and to ensure that no unauthorized\n   modifications of the ECN field take
        place, and is discussed further\n   in the next Section (9.1.2).\n"
      title: 9.1.1.  The Limited-functionality and Full-functionality Options
    - contents:
      - "9.1.2.  Changes to the ECN Field within an IP Tunnel.\n   The presence of
        a copy of the ECN field in the inner header of an IP\n   tunnel mode packet
        provides an opportunity for detection of\n   unauthorized modifications to
        the ECN field in the outer header.\n   Comparison of the ECT fields in the
        inner and outer headers falls\n   into two categories for implementations
        that conform to this\n   document:\n      * If the IP tunnel uses the full-functionality
        option, then the\n        not-ECT codepoint should be set in the outer header
        if and only\n        if it is also set in the inner header.\n      * If the
        tunnel uses the limited-functionality option, then the\n        not-ECT codepoint
        should be set in the outer header.\n   Receipt of a packet not satisfying
        the appropriate condition could be\n   a cause of concern.\n   Consider the
        case of an IP tunnel where the tunnel ingress point has\n   not been updated
        to this document's requirements, while the tunnel\n   egress point has been
        updated to support ECN.  In this case, the IP\n   tunnel is not explicitly
        configured to support the full-functionality\n   ECN option. However, the
        tunnel ingress point is behaving identically\n   to a tunnel ingress point
        that supports the full-functionality\n   option.  If packets from an ECN-capable
        connection use this tunnel,\n   the ECT codepoint will be set in the outer
        header at the tunnel\n   ingress point.  Congestion within the tunnel may
        then result in ECN-\n   capable routers setting CE in the outer header.  Because
        the tunnel\n   has not been explicitly configured to support the full-functionality\n
        \  option, the tunnel egress point expects the not-ECT codepoint to be\n   set
        in the outer header.  When an ECN-capable tunnel egress point\n   receives
        a packet with the ECT or CE codepoint in the outer header,\n   in a tunnel
        that has not been configured to support the full-\n   functionality option,
        that packet should be processed, according to\n   whether the CE codepoint
        was set, as follows.  It is RECOMMENDED that\n   on a tunnel that has not
        been configured to support the full-\n   functionality option, packets should
        be dropped at the egress point\n   if the CE codepoint is set in the outer
        header but not in the inner\n   header, and should be forwarded otherwise.\n
        \  An IP tunnel cannot provide protection against erasure of congestion\n
        \  indications based on changing the ECN codepoint from CE to ECT.  The\n
        \  erasure of congestion indications may impact the network and other\n   flows
        in ways that would not be possible in the absence of ECN.  It\n   is important
        to note that erasure of congestion indications can only\n   be performed to
        congestion indications placed by nodes within the\n   tunnel; the copy of
        the ECN field in the inner header preserves\n   congestion notifications from
        nodes upstream of the tunnel ingress\n   (unless the inner header is also
        erased).  If erasure of congestion\n   notifications is judged to be a security
        risk that exceeds the\n   congestion management benefits of ECN, then tunnels
        could be\n   specified or configured to use the limited-functionality option.\n"
      title: 9.1.2.  Changes to the ECN Field within an IP Tunnel.
    title: 9.1.  IP packets encapsulated in IP
  - contents:
    - "9.2.  IPsec Tunnels\n   IPsec supports secure communication over potentially
      insecure network\n   components such as intermediate routers.  IPsec protocols
      support two\n   operating modes, transport mode and tunnel mode, that span a
      wide\n   range of security requirements and operating environments.  Transport\n
      \  mode security protocol header(s) are inserted between the IP (IPv4 or\n   IPv6)
      header and higher layer protocol headers (e.g., TCP), and hence\n   transport
      mode can only be used for end-to-end security on a\n   connection.  IPsec tunnel
      mode is based on adding a new \"outer\" IP\n   header that encapsulates the
      original, or \"inner\" IP header and its\n   associated packet.  Tunnel mode
      security headers are inserted between\n   these two IP headers.  In contrast
      to transport mode, the new \"outer\"\n   IP header and tunnel mode security
      headers can be added and removed\n   at intermediate points along a connection,
      enabling security gateways\n   to secure vulnerable portions of a connection
      without requiring\n   endpoint participation in the security protocols.  An
      important\n   aspect of tunnel mode security is that in the original specification,\n
      \  the outer header is discarded at tunnel egress, ensuring that\n   security
      threats based on modifying the IP header do not propagate\n   beyond that tunnel
      endpoint.  Further discussion of IPsec can be\n   found in [RFC2401].\n   The
      IPsec protocol as originally defined in [ESP, AH] required that\n   the inner
      header's ECN field not be changed by IPsec decapsulation\n   processing at a
      tunnel egress node; this would have ruled out the\n   possibility of full-functionality
      mode for ECN.  At the same time,\n   this would ensure that an adversary's modifications
      to the ECN field\n   cannot be used to launch theft- or denial-of-service attacks
      across\n   an IPsec tunnel endpoint, as any such modifications will be discarded\n
      \  at the tunnel endpoint.\n   In principle, permitting the use of ECN functionality
      in the outer\n   header of an IPsec tunnel raises security concerns because
      an\n   adversary could tamper with the information that propagates beyond\n
      \  the tunnel endpoint.  Based on an analysis (included in Sections 18\n   and
      19) of these concerns and the associated risks, our overall\n   approach has
      been to provide configuration support for IPsec changes\n   to remove the conflict
      with ECN.\n   In particular, in tunnel mode the IPsec tunnel MUST support the\n
      \  limited-functionality option outlined in Section 9.1.1, and SHOULD\n   support
      the full-functionality option outlined in Section 9.1.1.\n   This makes permission
      to use ECN functionality in the outer header of\n   an IPsec tunnel a configurable
      part of the corresponding IPsec\n   Security Association (SA), so that it can
      be disabled in situations\n   where the risks are judged to outweigh the benefits.
      \ The result is\n   that an IPsec security administrator is presented with two\n
      \  alternatives for the behavior of ECN-capable connections within an\n   IPsec
      tunnel, the limited-functionality alternative and full-\n   functionality alternative
      described earlier.\n   In addition, this document specifies how the endpoints
      of an IPsec\n   tunnel could negotiate enabling ECN functionality in the outer\n
      \  headers of that tunnel based on security policy.  The ability to\n   negotiate
      ECN usage between tunnel endpoints would enable a security\n   administrator
      to disable ECN in situations where she believes the\n   risks (e.g., of lost
      congestion notifications) outweigh the benefits\n   of ECN.\n   The IPsec protocol,
      as defined in [ESP, AH], does not include the IP\n   header's ECN field in any
      of its cryptographic calculations (in the\n   case of tunnel mode, the outer
      IP header's ECN field is not\n   included).  Hence modification of the ECN field
      by a network node has\n   no effect on IPsec's end-to-end security, because
      it cannot cause any\n   IPsec integrity check to fail.  As a consequence, IPsec
      does not\n   provide any defense against an adversary's modification of the
      ECN\n   field (i.e., a man-in-the-middle attack), as the adversary's\n   modification
      will also have no effect on IPsec's end-to-end security.\n   In some environments,
      the ability to modify the ECN field without\n   affecting IPsec integrity checks
      may constitute a covert channel; if\n   it is necessary to eliminate such a
      channel or reduce its bandwidth,\n   then the IPsec tunnel should be run in
      limited-functionality mode.\n"
    - contents:
      - "9.2.1.  Negotiation between Tunnel Endpoints\n   This section describes the
        detailed changes to enable usage of ECN\n   over IPsec tunnels, including
        the negotiation of ECN support between\n   tunnel endpoints.  This is supported
        by three changes to IPsec:\n      * An optional Security Association Database
        (SAD) field indicating\n        whether tunnel encapsulation and decapsulation
        processing allows\n        or forbids ECN usage in the outer IP header.\n
        \     * An optional Security Association Attribute that enables\n        negotiation
        of this SAD field between the two endpoints of an SA\n        that supports
        tunnel mode.\n      * Changes to tunnel mode encapsulation and decapsulation\n
        \       processing to allow or forbid ECN usage in the outer IP header\n        based
        on the value of the SAD field.  When ECN usage is allowed\n        in the
        outer IP header, the ECT codepoint is set in the outer\n        header for
        ECN-capable connections and congestion notifications\n        (indicated by
        the CE codepoint) from such connections are\n        propagated to the inner
        header at tunnel egress.\n   If negotiation of ECN usage is implemented, then
        the SAD field SHOULD\n   also be implemented.  On the other hand, negotiation
        of ECN usage is\n   OPTIONAL in all cases, even for implementations that support
        the SAD\n   field.  The encapsulation and decapsulation processing changes
        are\n   REQUIRED, but MAY be implemented without the other two changes by\n
        \  assuming that ECN usage is always forbidden.  The full-functionality\n
        \  alternative for ECN usage over IPsec tunnels consists of the SAD\n   field
        and the full version of encapsulation and decapsulation\n   processing changes,
        with or without the OPTIONAL negotiation support.\n   The limited-functionality
        alternative consists of a subset of the\n   encapsulation and decapsulation
        changes that always forbids ECN\n   usage.\n   These changes are covered further
        in the following three subsections.\n"
      - contents:
        - "9.2.1.1.  ECN Tunnel Security Association Database Field\n   Full ECN functionality
          adds a new field to the SAD (see [RFC2401]):\n      ECN Tunnel: allowed
          or forbidden.\n      Indicates whether ECN-capable connections using this
          SA in tunnel\n      mode are permitted to receive ECN congestion notifications
          for\n      congestion occurring within the tunnel.  The allowed value enables\n
          \     ECN congestion notifications.  The forbidden value disables such\n
          \     notifications, causing all congestion to be indicated via dropped\n
          \     packets.\n      [OPTIONAL.  The value of this field SHOULD be assumed
          to be\n      \"forbidden\" in implementations that do not support it.]\n
          \  If this attribute is implemented, then the SA specification in a\n   Security
          Policy Database (SPD) entry MUST support a corresponding\n   attribute,
          and this SPD attribute MUST be covered by the SPD\n   administrative interface
          (currently described in Section 4.4.1 of\n   [RFC2401]).\n"
        title: 9.2.1.1.  ECN Tunnel Security Association Database Field
      - contents:
        - "9.2.1.2.  ECN Tunnel Security Association Attribute\n   A new IPsec Security
          Association Attribute is defined to enable the\n   support for ECN congestion
          notifications based on the outer IP header\n   to be negotiated for IPsec
          tunnels (see [RFC2407]).  This attribute\n   is OPTIONAL, although implementations
          that support it SHOULD also\n   support the SAD field defined in Section
          9.2.1.1.\n   Attribute Type\n           class               value           type\n
          \    -------------------------------------------------\n     ECN Tunnel
          \                10             Basic\n   The IPsec SA Attribute value 10
          has been allocated by IANA to\n   indicate that the ECN Tunnel SA Attribute
          is being negotiated; the\n   type of this attribute is Basic (see Section
          4.5 of [RFC2407]).  The\n   Class Values are used to conduct the negotiation.
          \ See [RFC2407,\n   RFC2408, RFC2409] for further information including
          encoding formats\n   and requirements for negotiating this SA attribute.\n
          \  Class Values\n   ECN Tunnel\n   Specifies whether ECN functionality is
          allowed to be used with Tunnel\n   Encapsulation Mode.  This affects tunnel
          encapsulation and\n   decapsulation processing - see Section 9.2.1.3.\n
          \  RESERVED          0\n   Allowed           1\n   Forbidden         2\n
          \  Values 3-61439 are reserved to IANA.  Values 61440-65535 are for\n   private
          use.\n   If unspecified, the default shall be assumed to be Forbidden.\n
          \  ECN Tunnel is a new SA attribute, and hence initiators that use it\n
          \  can expect to encounter responders that do not understand it, and\n   therefore
          reject proposals containing it.  For backwards\n   compatibility with such
          implementations initiators SHOULD always also\n   include a proposal without
          the ECN Tunnel attribute to enable such a\n   responder to select a transform
          or proposal that does not contain the\n   ECN Tunnel attribute.  RFC 2407
          currently requires responders to\n   reject all proposals if any proposal
          contains an unknown attribute;\n   this requirement is expected to be changed
          to require a responder not\n   to select proposals or transforms containing
          unknown attributes.\n"
        title: 9.2.1.2.  ECN Tunnel Security Association Attribute
      - contents:
        - "9.2.1.3.  Changes to IPsec Tunnel Header Processing\n   For full ECN support,
          the encapsulation and decapsulation processing\n   for the IPv4 TOS field
          and the IPv6 Traffic Class field are changed\n   from that specified in
          [RFC2401] to the following:\n                        <-- How Outer Hdr Relates
          to Inner Hdr -->\n                        Outer Hdr at                 Inner
          Hdr at\n   IPv4                 Encapsulator                 Decapsulator\n
          \    Header fields:     --------------------         ------------\n       DS
          Field         copied from inner hdr (5)    no change\n       ECN Field        constructed
          (7)              constructed (8)\n   IPv6\n     Header fields:\n       DS
          Field         copied from inner hdr (6)    no change\n       ECN Field        constructed
          (7)              constructed (8)\n      (5)(6) If the packet will immediately
          enter a domain for which the\n      DSCP value in the outer header is not
          appropriate, that value MUST\n      be mapped to an appropriate value for
          the domain [RFC 2474].  Also\n      see [RFC 2475] for further information.\n
          \     (7) If the value of the ECN Tunnel field in the SAD entry for this\n
          \     SA is \"allowed\" and the ECN field in the inner header is set to\n
          \     any value other than CE, copy this ECN field to the outer header.\n
          \     If the ECN field in the inner header is set to CE, then set the\n
          \     ECN field in the outer header to ECT(0).\n      (8) If the value of
          the ECN tunnel field in the SAD entry for this\n      SA is \"allowed\"
          and the ECN field in the inner header is set to\n      ECT(0) or ECT(1)
          and the ECN field in the outer header is set to\n      CE, then copy the
          ECN field from the outer header to the inner\n      header.  Otherwise,
          make no change to the ECN field in the inner\n      header.\n      (5) and
          (6) are identical to match usage in [RFC2401], although\n      they are
          different in [RFC2401].\n   The above description applies to implementations
          that support the ECN\n   Tunnel field in the SAD; such implementations MUST
          implement this\n   processing instead of the processing of the IPv4 TOS
          octet and IPv6\n   Traffic Class octet defined in [RFC2401].  This constitutes
          the\n   full-functionality alternative for ECN usage with IPsec tunnels.\n
          \  An implementation that does not support the ECN Tunnel field in the\n
          \  SAD MUST implement this processing by assuming that the value of the\n
          \  ECN Tunnel field of the SAD is \"forbidden\" for every SA.  In this\n
          \  case, the processing of the ECN field reduces to:\n      (7) Set the
          ECN field to not-ECT in the outer header.\n      (8) Make no change to the
          ECN field in the inner header.\n   This constitutes the limited functionality
          alternative for ECN usage\n   with IPsec tunnels.\n   For backwards compatibility,
          packets with the CE codepoint set in the\n   outer header SHOULD be dropped
          if they arrive on an SA that is using\n   the limited-functionality option,
          or that is using the full-\n   functionality option with the not-ECN codepoint
          set in the inner\n   header.\n"
        title: 9.2.1.3.  Changes to IPsec Tunnel Header Processing
      title: 9.2.1.  Negotiation between Tunnel Endpoints
    - contents:
      - "9.2.2.  Changes to the ECN Field within an IPsec Tunnel.\n   If the ECN Field
        is changed inappropriately within an IPsec tunnel,\n   and this change is
        detected at the tunnel egress, then the receipt of\n   a packet not satisfying
        the appropriate condition for its SA is an\n   auditable event.  An implementation
        MAY create audit records with\n   per-SA counts of incorrect packets over
        some time period rather than\n   creating an audit record for each erroneous
        packet.  Any such audit\n   record SHOULD contain the headers from at least
        one erroneous packet,\n   but need not contain the headers from every packet
        represented by the\n   entry.\n"
      title: 9.2.2.  Changes to the ECN Field within an IPsec Tunnel.
    - contents:
      - "9.2.3.  Comments for IPsec Support\n   Substantial comments were received
        on two areas of this document\n   during review by the IPsec working group.
        \ This section describes\n   these comments and explains why the proposed
        changes were not\n   incorporated.\n   The first comment indicated that per-node
        configuration is easier to\n   implement than per-SA configuration.  After
        serious thought and\n   despite some initial encouragement of per-node configuration,
        it no\n   longer seems to be a good idea. The concern is that as ECN-awareness\n
        \  is progressively deployed in IPsec, many ECN-aware IPsec\n   implementations
        will find themselves communicating with a mixture of\n   ECN-aware and ECN-unaware
        IPsec tunnel endpoints.  In such an\n   environment with per-node configuration,
        the only reasonable thing to\n   do is forbid ECN usage for all IPsec tunnels,
        which is not the\n   desired outcome.\n   In the second area, several reviewers
        noted that SA negotiation is\n   complex, and adding to it is non-trivial.
        \ One reviewer suggested\n   using ICMP after tunnel setup as a possible alternative.
        \ The\n   addition to SA negotiation in this document is OPTIONAL and will\n
        \  remain so; implementers are free to ignore it.  The authors believe\n   that
        the assurance it provides can be useful in a number of\n   situations.  In
        practice, if this is not implemented, it can be\n   deleted at a subsequent
        stage in the standards process.  Extending\n   ICMP to negotiate ECN after
        tunnel setup is more complex than\n   extending SA attribute negotiation.
        \ Some tunnels do not permit\n   traffic to be addressed to the tunnel egress
        endpoint, hence the ICMP\n   packet would have to be addressed to somewhere
        else, scanned for by\n   the egress endpoint, and discarded there or at its
        actual\n   destination.  In addition, ICMP delivery is unreliable, and hence\n
        \  there is a possibility of an ICMP packet being dropped, entailing the\n
        \  invention of yet another ack/retransmit mechanism.  It seems better\n   simply
        to specify an OPTIONAL extension to the existing SA\n   negotiation mechanism.\n"
      title: 9.2.3.  Comments for IPsec Support
    title: 9.2.  IPsec Tunnels
  - contents:
    - "9.3.  IP packets encapsulated in non-IP Packet Headers.\n   A different set
      of issues are raised, relative to ECN, when IP\n   packets are encapsulated
      in tunnels with non-IP packet headers.  This\n   occurs with MPLS [MPLS], GRE
      [GRE], L2TP [L2TP], and PPTP [PPTP].\n   For these protocols, there is no conflict
      with ECN; it is just that\n   ECN cannot be used within the tunnel unless an
      ECN codepoint can be\n   specified for the header of the encapsulating protocol.
      \ Earlier work\n   considered a preliminary proposal for incorporating ECN into
      MPLS,\n   and proposals for incorporating ECN into GRE, L2TP, or PPTP will be\n
      \  considered as the need arises.\n"
    title: 9.3.  IP packets encapsulated in non-IP Packet Headers.
  title: 9.  Encapsulated Packets
- contents:
  - "10.  Issues Raised by Monitoring and Policing Devices\n   One possibility is
    that monitoring and policing devices (or more\n   informally, \"penalty boxes\")
    will be installed in the network to\n   monitor whether best-effort flows are
    appropriately responding to\n   congestion, and to preferentially drop packets
    from flows determined\n   not to be using adequate end-to-end congestion control
    procedures.\n   We recommend that any \"penalty box\" that detects a flow or an\n
    \  aggregate of flows that is not responding to end-to-end congestion\n   control
    first change from marking to dropping packets from that flow,\n   before taking
    any additional action to restrict the bandwidth\n   available to that flow.  Thus,
    initially, the router may drop packets\n   in which the router would otherwise
    would have set the CE codepoint.\n   This could include dropping those arriving
    packets for that flow that\n   are ECN-Capable and that already have the CE codepoint
    set.  In this\n   way, any congestion indications seen by that router for that
    flow\n   will be guaranteed to also be seen by the end nodes, even in the\n   presence
    of malicious or broken routers elsewhere in the path.  If we\n   assume that the
    first action taken at any \"penalty box\" for an ECN-\n   capable flow will be
    to drop packets instead of marking them, then\n   there is no way that an adversary
    that subverts ECN-based end-to-end\n   congestion control can cause a flow to
    be characterized as being\n   non-cooperative and placed into a more severe action
    within the\n   \"penalty box\".\n   The monitoring and policing devices that are
    actually deployed could\n   fall short of the `ideal' monitoring device described
    above, in that\n   the monitoring is applied not to a single flow, but to an aggregate\n
    \  of flows (e.g., those sharing a single IPsec tunnel).  In this case,\n   the
    switch from marking to dropping would apply to all of the flows\n   in that aggregate,
    denying the benefits of ECN to the other flows in\n   the aggregate also.  At
    the highest level of aggregation, another\n   form of the disabling of ECN happens
    even in the absence of\n   monitoring and policing devices, when ECN-Capable RED
    queues switch\n   from marking to dropping packets as an indication of congestion
    when\n   the average queue size has exceeded some threshold.\n"
  title: 10.  Issues Raised by Monitoring and Policing Devices
- contents:
  - '11.  Evaluations of ECN

    '
  - contents:
    - "11.1.  Related Work Evaluating ECN\n   This section discusses some of the related
      work evaluating the use of\n   ECN.  The ECN Web Page [ECN] has pointers to
      other papers, as well as\n   to implementations of ECN.\n   [Floyd94] considers
      the advantages and drawbacks of adding ECN to the\n   TCP/IP architecture.  As
      shown in the simulation-based comparisons,\n   one advantage of ECN is to avoid
      unnecessary packet drops for short\n   or delay-sensitive TCP connections.  A
      second advantage of ECN is in\n   avoiding some unnecessary retransmit timeouts
      in TCP.  This paper\n   discusses in detail the integration of ECN into TCP's
      congestion\n   control mechanisms.  The possible disadvantages of ECN discussed
      in\n   the paper are that a non-compliant TCP connection could falsely\n   advertise
      itself as ECN-capable, and that a TCP ACK packet carrying\n   an ECN-Echo message
      could itself be dropped in the network.  The\n   first of these two issues is
      discussed in the appendix of this\n   document, and the second is addressed
      by the addition of the CWR flag\n   in the TCP header.\n   Experimental evaluations
      of ECN include [RFC2884,K98].  The\n   conclusions of [K98] and [RFC2884] are
      that ECN TCP gets moderately\n   better throughput than non-ECN TCP; that ECN
      TCP flows are fair\n   towards non-ECN TCP flows; and that ECN TCP is robust
      with two-way\n   traffic (with congestion in both directions) and with multiple\n
      \  congested gateways.  Experiments with many short web transfers show\n   that,
      while most of the short connections have similar transfer times\n   with or
      without ECN, a small percentage of the short connections have\n   very long
      transfer times for the non-ECN experiments as compared to\n   the ECN experiments.\n"
    title: 11.1.  Related Work Evaluating ECN
  - contents:
    - "11.2.  A Discussion of the ECN nonce.\n   The use of two ECT codepoints, ECT(0)
      and ECT(1), can provide a one-\n   bit ECN nonce in packet headers [SCWA99].
      \ The primary motivation for\n   this is the desire to allow mechanisms for
      the data sender to verify\n   that network elements are not erasing the CE codepoint,
      and that data\n   receivers are properly reporting to the sender the receipt
      of packets\n   with the CE codepoint set, as required by the transport protocol.\n
      \  This section discusses issues of backwards compatibility with IP ECN\n   implementations
      in routers conformant with RFC 2481, in which only\n   one ECT codepoint was
      defined.  We do not believe that the\n   incremental deployment of ECN implementations
      that understand the\n   ECT(1) codepoint will cause significant operational
      problems.  This\n   is particularly likely to be the case when the deployment
      of the\n   ECT(1) codepoint begins with routers, before the ECT(1) codepoint\n
      \  starts to be used by end-nodes.\n"
    - contents:
      - "11.2.1.  The Incremental Deployment of ECT(1) in Routers.\n   ECN has been
        an Experimental standard since January 1999, and there\n   are already implementations
        of ECN in routers that do not understand\n   the ECT(1) codepoint.  When the
        use of the ECT(1) codepoint is\n   standardized for TCP or for other transport
        protocols, this could\n   mean that a data sender is using the ECT(1) codepoint,
        but that this\n   codepoint is not understood by a congested router on the
        path.\n   If allowed by the transport protocol, a data sender would be free
        not\n   to make use of ECT(1) at all, and to send all ECN-capable packets\n
        \  with the codepoint ECT(0).  However, if an ECN-capable sender is\n   using
        ECT(1), and the congested router on the path did not understand\n   the ECT(1)
        codepoint, then the router would end up marking some of\n   the ECT(0) packets,
        and dropping some of the ECT(1) packets, as\n   indications of congestion.
        \ Since TCP is required to react to both\n   marked and dropped packets, this
        behavior of dropping packets that\n   could have been marked poses no significant
        threat to the network,\n   and is consistent with the overall approach to
        ECN that allows\n   routers to determine when and whether to mark packets
        as they see fit\n   (see Section 5).\n"
      title: 11.2.1.  The Incremental Deployment of ECT(1) in Routers.
    title: 11.2.  A Discussion of the ECN nonce.
  title: 11.  Evaluations of ECN
- contents:
  - "12.  Summary of changes required in IP and TCP\n   This document specified two
    bits in the IP header to be used for ECN.\n   The not-ECT codepoint indicates
    that the transport protocol will\n   ignore the CE codepoint.  This is the default
    value for the ECN\n   codepoint.  The ECT codepoints indicate that the transport
    protocol\n   is willing and able to participate in ECN.\n   The router sets the
    CE codepoint to indicate congestion to the end\n   nodes.  The CE codepoint in
    a packet header MUST NOT be reset by a\n   router.\n   TCP requires three changes
    for ECN, a setup phase and two new flags\n   in the TCP header. The ECN-Echo flag
    is used by the data receiver to\n   inform the data sender of a received CE packet.
    \ The Congestion\n   Window Reduced (CWR) flag is used by the data sender to inform
    the\n   data receiver that the congestion window has been reduced.\n   When ECN
    (Explicit Congestion Notification) is used, it is required\n   that congestion
    indications generated within an IP tunnel not be lost\n   at the tunnel egress.
    \ We specified a minor modification to the IP\n   protocol's handling of the ECN
    field during encapsulation and de-\n   capsulation to allow flows that will undergo
    IP tunneling to use ECN.\n   Two options for ECN in tunnels were specified:\n
    \  1) A limited-functionality option that does not use ECN inside the IP\n   tunnel,
    by setting the ECN field in the outer header to not-ECT, and\n   not altering
    the inner header at the time of decapsulation.\n   2) The full-functionality option,
    which sets the ECN field in the\n   outer header to either not-ECT or to one of
    the ECT codepoints,\n   depending on the ECN field in the inner header.  At decapsulation,
    if\n   the CE codepoint is set in the outer header, and the inner header is\n
    \  set to one of the ECT codepoints, then the CE codepoint is copied to\n   the
    inner header.\n   For IPsec tunnels, this document also defines an optional IPsec\n
    \  Security Association (SA) attribute that enables negotiation of ECN\n   usage
    within IPsec tunnels and an optional field in the Security\n   Association Database
    to indicate whether ECN is permitted in tunnel\n   mode on a SA.  The required
    changes to IPsec tunnels for ECN usage\n   modify RFC 2401 [RFC2401], which defines
    the IPsec architecture and\n   specifies some aspects of its implementation.  The
    new IPsec SA\n   attribute is in addition to those already defined in Section
    4.5 of\n   [RFC2407].\n   This document obsoletes RFC 2481, \"A Proposal to add
    Explicit\n   Congestion Notification (ECN) to IP\", which defined ECN as an\n
    \  Experimental Protocol for the Internet Community.  The rest of this\n   section
    describes the relationship between this document and its\n   predecessor.\n   RFC
    2481 included a brief discussion of the use of ECN with\n   encapsulated packets,
    and noted that for the IPsec specifications at\n   the time (January 1999), flows
    could not safely use ECN if they were\n   to traverse IPsec tunnels.  RFC 2481
    also described the changes that\n   could be made to IPsec tunnel specifications
    to made them compatible\n   with ECN.\n   This document also incorporates work
    that was done after RFC 2481.\n   First was to describe the changes to IPsec tunnels
    in detail, and\n   extensively discuss the security implications of ECN (now included
    as\n   Sections 18 and 19 of this document).  Second was to extend the\n   discussion
    of IPsec tunnels to include all IP tunnels.  Because older\n   IP tunnels are
    not compatible with a flow's use of ECN, the\n   deployment of ECN in the Internet
    will create strong pressure for\n   older IP tunnels to be updated to an ECN-compatible
    version, using\n   either the limited-functionality or the full-functionality
    option.\n   This document does not address the issue of including ECN in non-IP\n
    \  tunnels such as MPLS, GRE, L2TP, or PPTP.  An earlier preliminary\n   document
    about adding ECN support to MPLS was not advanced.\n   A third new piece of work
    after RFC2481 was to describe the ECN\n   procedure with retransmitted data packets,
    that an ECT codepoint\n   should not be set on retransmitted data packets.  The
    motivation for\n   this additional specification is to eliminate a possible avenue
    for\n   denial-of-service attacks on an existing TCP connection.  Some prior\n
    \  deployments of ECN-capable TCP might not conform to the (new)\n   requirement
    not to set an ECT codepoint on retransmitted packets; we\n   do not believe this
    will cause significant problems in practice.\n   This document also expands slightly
    on the specification of the use\n   of SYN packets for the negotiation of ECN.
    \ While some prior\n   deployments of ECN-capable TCP might not conform to the
    requirements\n   specified in this document, we do not believe that this will
    lead to\n   any performance or compatibility problems for TCP connections with
    a\n   combination of TCP implementations at the endpoints.\n   This document also
    includes the specification of the ECT(1)\n   codepoint, which may be used by TCP
    as part of the implementation of\n   an ECN nonce.\n"
  title: 12.  Summary of changes required in IP and TCP
- contents:
  - "13.  Conclusions\n   Given the current effort to implement AQM, we believe this
    is the\n   right time to deploy congestion avoidance mechanisms that do not\n
    \  depend on packet drops alone.  With the increased deployment of\n   applications
    and transports sensitive to the delay and loss of a\n   single packet (e.g., realtime
    traffic, short web transfers),\n   depending on packet loss as a normal congestion
    notification\n   mechanism appears to be insufficient (or at the very least, non-\n
    \  optimal).\n   We examined the consequence of modifications of the ECN field
    within\n   the network, analyzing all the opportunities for an adversary to\n
    \  change the ECN field.  In many cases, the change to the ECN field is\n   no
    worse than dropping a packet. However, we noted that some changes\n   have the
    more serious consequence of subverting end-to-end congestion\n   control.  However,
    we point out that even then the potential damage\n   is limited, and is similar
    to the threat posed by end-systems\n   intentionally failing to cooperate with
    end-to-end congestion\n   control.\n"
  title: 13.  Conclusions
- contents:
  - "14.  Acknowledgements\n   Many people have made contributions to this work and
    this document,\n   including many that we have not managed to directly acknowledge
    in\n   this document.  In addition, we would like to thank Kenjiro Cho for\n   the
    proposal for the TCP mechanism for negotiating ECN-Capability,\n   Kevin Fall
    for the proposal of the CWR bit, Steve Blake for material\n   on IPv4 Header Checksum
    Recalculation, Jamal Hadi-Salim for\n   discussions of ECN issues, and Steve Bellovin,
    Jim Bound, Brian\n   Carpenter, Paul Ferguson, Stephen Kent, Greg Minshall, and
    Vern\n   Paxson for discussions of security issues.  We also thank the\n   Internet
    End-to-End Research Group for ongoing discussions of these\n   issues.\n   Email
    discussions with a number of people, including Dax Kelson,\n   Alexey Kuznetsov,
    Jamal Hadi-Salim, and Venkat Venkatsubra, have\n   addressed the issues raised
    by non-conformant equipment in the\n   Internet that does not respond to TCP SYN
    packets with the ECE and\n   CWR flags set.  We thank Mark Handley, Jitentra Padhye,
    and others\n   for discussions on the TCP initialization procedures.\n   The discussion
    of ECN and IP tunnel considerations draws heavily on\n   related discussions and
    documents from the Differentiated Services\n   Working Group.  We thank Tabassum
    Bint Haque from Dhaka, Bangladesh,\n   for feedback on IP tunnels.  We thank Derrell
    Piper and Kero Tivinen\n   for proposing modifications to RFC 2407 that improve
    the usability of\n   negotiating the ECN Tunnel SA attribute.\n   We thank David
    Wetherall, David Ely, and Neil Spring for the proposal\n   for the ECN nonce.
    \ We also thank Stefan Savage for discussions on\n   this issue.  We thank Bob
    Briscoe and Jon Crowcroft for raising the\n   issue of fragmentation in IP, on
    alternate semantics for the fourth\n   ECN codepoint, and several other topics.
    \ We thank Richard Wendland\n   for feedback on several issues in the document.\n
    \  We also thank the IESG, and in particular the Transport Area\n   Directors
    over the years, for their feedback and their work towards\n   the standardization
    of ECN.\n"
  title: 14.  Acknowledgements
- contents:
  - "15.  References\n   [AH]         Kent, S. and R. Atkinson, \"IP Authentication
    Header\",\n                RFC 2402, November 1998.\n   [ECN]       \"The ECN
    Web Page\", URL\n                \"http://www.aciri.org/floyd/ecn.html\".  Reference
    for\n                informational purposes only.\n   [ESP]        Kent, S. and
    R. Atkinson, \"IP Encapsulating Security\n                Payload\", RFC 2406,
    November 1998.\n   [FIXES]      ECN-under-Linux Unofficial Vendor Support Page,
    URL\n                \"http://gtf.org/garzik/ecn/\".  Reference for\n                informational
    purposes only.\n   [FJ93]       Floyd, S., and Jacobson, V., \"Random Early Detection\n
    \               gateways for Congestion Avoidance\", IEEE/ACM\n                Transactions
    on Networking, V.1 N.4, August 1993, p.\n                397-413.\n   [Floyd94]
    \   Floyd, S., \"TCP and Explicit Congestion Notification\",\n                ACM
    Computer Communication Review, V. 24 N. 5, October\n                1994, p. 10-23.\n
    \  [Floyd98]    Floyd, S., \"The ECN Validation Test in the NS\n                Simulator\",
    URL \"http://www-mash.cs.berkeley.edu/ns/\",\n                test tcl/test/test-all-
    ecn.  Reference for\n                informational purposes only.\n   [FF99]       Floyd,
    S., and Fall, K., \"Promoting the Use of End-to-\n                End Congestion
    Control in the Internet\", IEEE/ACM\n                Transactions on Networking,
    August 1999.\n   [FRED]       Lin, D., and Morris, R., \"Dynamics of Random Early\n
    \               Detection\", SIGCOMM '97, September 1997.\n   [GRE]        Hanks,
    S., Li, T., Farinacci, D. and P. Traina, \"Generic\n                Routing Encapsulation
    (GRE)\", RFC 1701, October 1994.\n   [Jacobson88] V. Jacobson, \"Congestion Avoidance
    and Control\", Proc.\n                ACM SIGCOMM '88, pp. 314-329.\n   [Jacobson90]
    V. Jacobson, \"Modified TCP Congestion Avoidance\n                Algorithm\",
    Message to end2end-interest mailing list,\n                April 1990. URL\n                \"ftp://ftp.ee.lbl.gov/email/vanj.90apr30.txt\".\n
    \  [K98]        Krishnan, H., \"Analyzing Explicit Congestion\n                Notification
    (ECN) benefits for TCP\", Master's thesis,\n                UCLA, 1998.  Citation
    for acknowledgement purposes only.\n   [L2TP]       Townsley, W., Valencia, A.,
    Rubens, A., Pall, G., Zorn,\n                G. and B. Palter, \"Layer Two Tunneling
    Protocol \"L2TP\"\",\n                RFC 2661, August 1999.\n   [MJV96]      S.
    McCanne, V. Jacobson, and M. Vetterli, \"Receiver-\n                driven Layered
    Multicast\", SIGCOMM '96, August 1996, pp.\n                117-130.\n   [MPLS]
    \      Awduche, D., Malcolm, J., Agogbua, J., O'Dell, M. and J.\n                McManus,
    Requirements for Traffic Engineering Over MPLS,\n                RFC 2702, September
    1999.\n   [PPTP]       Hamzeh, K., Pall, G., Verthein, W., Taarud, J., Little,\n
    \               W.  and G. Zorn, \"Point-to-Point Tunneling Protocol\n                (PPTP)\",
    RFC 2637, July 1999.\n   [RFC791]     Postel, J., \"Internet Protocol\", STD 5,
    RFC 791,\n                September 1981.\n   [RFC793]     Postel, J., \"Transmission
    Control Protocol\", STD 7, RFC\n                793, September 1981.\n   [RFC1141]
    \   Mallory, T. and A. Kullberg, \"Incremental Updating of\n                the
    Internet Checksum\", RFC 1141, January 1990.\n   [RFC1349]    Almquist, P., \"Type
    of Service in the Internet Protocol\n                Suite\", RFC 1349, July 1992.\n
    \  [RFC1455]    Eastlake, D., \"Physical Link Security Type of Service\",\n                RFC
    1455, May 1993.\n   [RFC1701]    Hanks, S., Li, T., Farinacci, D. and P. Traina,
    \"Generic\n                Routing Encapsulation (GRE)\", RFC 1701, October 1994.\n
    \  [RFC1702]    Hanks, S., Li, T., Farinacci, D. and P. Traina, \"Generic\n                Routing
    Encapsulation over IPv4 networks\", RFC 1702,\n                October 1994.\n
    \  [RFC2003]    Perkins, C., \"IP Encapsulation within IP\", RFC 2003,\n                October
    1996.\n   [RFC2119]    Bradner, S., \"Key words for use in RFCs to Indicate\n
    \               Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2309]
    \   Braden, B., et al., \"Recommendations on Queue Management\n                and
    Congestion Avoidance in the Internet\", RFC 2309,\n                April 1998.\n
    \  [RFC2401]    Kent, S. and R. Atkinson, Security Architecture for the\n                Internet
    Protocol, RFC 2401, November 1998.\n   [RFC2407]    Piper, D., \"The Internet
    IP Security Domain of\n                Interpretation for ISAKMP\", RFC 2407,
    November 1998.\n   [RFC2408]    Maughan, D., Schertler, M., Schneider, M. and
    J. Turner,\n                \"Internet Security Association and Key Management\n
    \               Protocol (ISAKMP)\", RFC 2409, November 1998.\n   [RFC2409]    Harkins
    D. and D. Carrel, \"The Internet Key Exchange\n                (IKE)\", RFC 2409,
    November 1998.\n   [RFC2474]    Nichols, K., Blake, S., Baker, F. and D. Black,\n
    \               \"Definition of the Differentiated Services Field (DS\n                Field)
    in the IPv4 and IPv6 Headers\", RFC 2474, December\n                1998.\n   [RFC2475]
    \   Blake, S., Black, D., Carlson, M., Davies, E., Wang, Z.\n                and
    W. Weiss, \"An Architecture for Differentiated\n                Services\", RFC
    2475, December 1998.\n   [RFC2481]    Ramakrishnan K. and S. Floyd, \"A Proposal
    to add\n                Explicit Congestion Notification (ECN) to IP\", RFC 2481,\n
    \               January 1999.\n   [RFC2581]    Alman, M., Paxson, V. and W. Stevens,
    \"TCP Congestion\n                Control\", RFC 2581, April 1999.\n   [RFC2884]
    \   Hadi Salim, J. and U. Ahmed, \"Performance Evaluation of\n                Explicit
    Congestion Notification (ECN) in IP Networks\",\n                RFC 2884, July
    2000.\n   [RFC2983]    Black, D., \"Differentiated Services and Tunnels\",\n                RFC2983,
    October 2000.\n   [RFC2780]    Bradner S. and V. Paxson, \"IANA Allocation Guidelines\n
    \               For Values In the Internet Protocol and Related\n                Headers\",
    BCP 37, RFC 2780, March 2000.\n   [RJ90]       K. K. Ramakrishnan and Raj Jain,
    \"A Binary Feedback\n                Scheme for Congestion Avoidance in Computer
    Networks\",\n                ACM Transactions on Computer Systems, Vol.8, No.2,
    pp.\n                158-181, May 1990.\n   [SCWA99]     Stefan Savage, Neal Cardwell,
    David Wetherall, and Tom\n                Anderson, TCP Congestion Control with
    a Misbehaving\n                Receiver, ACM Computer Communications Review, October\n
    \               1999.\n   [TBIT]       Jitendra Padhye and Sally Floyd, \"Identifying
    the TCP\n                Behavior of Web Servers\", ICSI TR-01-002, February 2001.\n
    \               URL \"http://www.aciri.org/tbit/\".\n"
  title: 15.  References
- contents:
  - "16.  Security Considerations\n   Security considerations have been discussed
    in Sections 7, 8, 18, and\n   19.\n"
  title: 16.  Security Considerations
- contents:
  - "17.  IPv4 Header Checksum Recalculation\n   IPv4 header checksum recalculation
    is an issue with some high-end\n   router architectures using an output-buffered
    switch, since most if\n   not all of the header manipulation is performed on the
    input side of\n   the switch, while the ECN decision would need to be made local
    to the\n   output buffer. This is not an issue for IPv6, since there is no IPv6\n
    \  header checksum. The IPv4 TOS octet is the last byte of a 16-bit\n   half-word.\n
    \  RFC 1141 [RFC1141] discusses the incremental updating of the IPv4\n   checksum
    after the TTL field is decremented.  The incremental\n   updating of the IPv4
    checksum after the CE codepoint was set would\n   work as follows: Let HC be the
    original header checksum for an ECT(0)\n   packet, and let HC' be the new header
    checksum after the CE bit has\n   been set.  That is, the ECN field has changed
    from '10' to '11'.\n   Then for header checksums calculated with one's complement\n
    \  subtraction, HC' would be recalculated as follows:\n        HC' = { HC - 1
    \    HC > 1\n              { 0x0000     HC = 1\n   For header checksums calculated
    on two's complement machines, HC'\n   would be recalculated as follows after the
    CE bit was set:\n        HC' = { HC - 1     HC > 0\n              { 0xFFFE     HC
    = 0\n   A similar incremental updating of the IPv4 checksum can be carried\n   out
    when the ECN field is changed from ECT(1) to CE, that is, from '\n   01' to '11'.\n"
  title: 17.  IPv4 Header Checksum Recalculation
- contents:
  - "18.  Possible Changes to the ECN Field in the Network\n   This section discusses
    in detail possible changes to the ECN field in\n   the network, such as falsely
    reporting congestion, disabling ECN-\n   Capability for an individual packet,
    erasing the ECN congestion\n   indication, or falsely indicating ECN-Capability.\n"
  - contents:
    - '18.1.  Possible Changes to the IP Header

      '
    - contents:
      - "18.1.1.  Erasing the Congestion Indication\n   First, we consider the changes
        that a router could make that would\n   result in effectively erasing the
        congestion indication after it had\n   been set by a router upstream.  The
        convention followed is:  ECN\n   codepoint of received packet -> ECN codepoint
        of packet transmitted.\n   Replacing the CE codepoint with the ECT(0) or ECT(1)
        codepoint\n   effectively erases the congestion indication.  However, with
        the use\n   of two ECT codepoints, a router erasing the CE codepoint has no
        way\n   to know whether the original ECT codepoint was ECT(0) or ECT(1).\n
        \  Thus, it is possible for the transport protocol to deploy mechanisms\n
        \  to detect such erasures of the CE codepoint.\n   The consequence of the
        erasure of the CE codepoint for the upstream\n   router is that there is a
        potential for congestion to build for a\n   time, because the congestion indication
        does not reach the source.\n   However, the packet would be received and acknowledged.\n
        \  The potential effect of erasing the congestion indication is complex,\n
        \  and is discussed in depth in Section 19 below.  Note that the effect\n
        \  of erasing the congestion indication is different from dropping a\n   packet
        in the network.  When a data packet is dropped, the drop is\n   detected by
        the TCP sender, and interpreted as an indication of\n   congestion.  Similarly,
        if a sufficient number of consecutive\n   acknowledgement packets are dropped,
        causing the cumulative\n   acknowledgement field not to be advanced at the
        sender, the sender is\n   limited by the congestion window from sending additional
        packets, and\n   ultimately the retransmit timer expires.\n   In contrast,
        a systematic erasure of the CE bit by a downstream\n   router can have the
        effect of causing a queue buildup at an upstream\n   router, including the
        possible loss of packets due to buffer\n   overflow.  There is a potential
        of unfairness in that another flow\n   that goes through the congested router
        could react to the CE bit set\n   while the flow that has the CE bit erased
        could see better\n   performance.  The limitations on this potential unfairness
        are\n   discussed in more detail in Section 19 below.\n   The last of the
        three changes is to replace the CE codepoint with the\n   not-ECT codepoint,
        thus erasing the congestion indication and\n   disabling ECN-Capability at
        the same time.\n   The `erasure' of the congestion indication is only effective
        if the\n   packet does not end up being marked or dropped again by a downstream\n
        \  router.  If the CE codepoint is replaced by an ECT codepoint, the\n   packet
        remains ECN-Capable, and could be either marked or dropped by\n   a downstream
        router as an indication of congestion.  If the CE\n   codepoint is replaced
        by the not-ECT codepoint, the packet is no\n   longer ECN-capable, and can
        therefore be dropped but not marked by a\n   downstream router as an indication
        of congestion.\n"
      title: 18.1.1.  Erasing the Congestion Indication
    - contents:
      - "18.1.2.  Falsely Reporting Congestion\n   This change is to set the CE codepoint
        when an ECT codepoint was\n   already set, even though there was no congestion.
        \ This change does\n   not affect the treatment of that packet along the rest
        of the path.\n   In particular, a router does not examine the CE codepoint
        in deciding\n   whether to drop or mark an arriving packet.\n   However, this
        could result in the application unnecessarily invoking\n   end-to-end congestion
        control, and reducing its arrival rate.  By\n   itself, this is no worse (for
        the application or for the network)\n   than if the tampering router had actually
        dropped the packet.\n"
      title: 18.1.2.  Falsely Reporting Congestion
    - contents:
      - "18.1.3.  Disabling ECN-Capability\n   This change is to turn off the ECT
        codepoint of a packet.  This means\n   that if the packet later encounters
        congestion (e.g., by arriving to\n   a RED queue with a moderate average queue
        size), it will be dropped\n   instead of being marked.  By itself, this is
        no worse (for the\n   application) than if the tampering router had actually
        dropped the\n   packet.  The saving grace in this particular case is that
        there is no\n   congested router upstream expecting a reaction from setting
        the CE\n   bit.\n"
      title: 18.1.3.  Disabling ECN-Capability
    - contents:
      - "18.1.4.  Falsely Indicating ECN-Capability\n   This change would incorrectly
        label a packet as ECN-Capable. The\n   packet may have been sent either by
        an ECN-Capable transport or a\n   transport that is not ECN-Capable.\n   If
        the packet later encounters moderate congestion at an ECN-Capable\n   router,
        the router could set the CE codepoint instead of dropping the\n   packet.
        \ If the transport protocol in fact is not ECN-Capable, then\n   the transport
        will never receive this indication of congestion, and\n   will not reduce
        its sending rate in response.  The potential\n   consequences of falsely indicating
        ECN-capability are discussed\n   further in Section 19 below.\n   If the packet
        never later encounters congestion at an ECN-Capable\n   router, then the first
        of these two changes would have no effect,\n   other than possibly interfering
        with the use of the ECN nonce by the\n   transport protocol.  The last change,
        however, would have the effect\n   of giving false reports of congestion to
        a monitoring device along\n   the path.  If the transport protocol is ECN-Capable,
        then this change\n   could also have an effect at the transport level, by
        combining\n   falsely indicating ECN-Capability with falsely reporting congestion.\n
        \  For an ECN-capable transport, this would cause the transport to\n   unnecessarily
        react to congestion.  In this particular case, the\n   router that is incorrectly
        changing the ECN field could have dropped\n   the packet. Thus for this case
        of an ECN-capable transport, the\n   consequence of this change to the ECN
        field is no worse than dropping\n   the packet.\n"
      title: 18.1.4.  Falsely Indicating ECN-Capability
    title: 18.1.  Possible Changes to the IP Header
  - contents:
    - "18.2.  Information carried in the Transport Header\n   For TCP, an ECN-capable
      TCP receiver informs its TCP peer that it is\n   ECN-capable at the TCP level,
      conveying this information in the TCP\n   header at the time the connection
      is setup.  This document does not\n   consider potential dangers introduced
      by changes in the transport\n   header within the network.  We note that when
      IPsec is used, the\n   transport header is protected both in tunnel and transport
      modes\n   [ESP, AH].\n   Another issue concerns TCP packets with a spoofed IP
      source address\n   carrying invalid ECN information in the transport header.
      \ For\n   completeness, we examine here some possible ways that a node spoofing\n
      \  the IP source address of another node could use the two ECN flags in\n   the
      TCP header to launch a denial-of-service attack. However, these\n   attacks
      would require an ability for the attacker to use valid TCP\n   sequence numbers,
      and any attacker with this ability and with the\n   ability to spoof IP source
      addresses could damage the TCP connection\n   without using the ECN flags.  Therefore,
      ECN does not add any new\n   vulnerabilities in this respect.\n   An acknowledgement
      packet with a spoofed IP source address of the TCP\n   data receiver could include
      the ECE bit set.  If accepted by the TCP\n   data sender as a valid packet,
      this spoofed acknowledgement packet\n   could result in the TCP data sender
      unnecessarily halving its\n   congestion window.  However, to be accepted by
      the data sender, such\n   a spoofed acknowledgement packet would have to have
      the correct 32-\n   bit sequence number as well as a valid acknowledgement number.
      \ An\n   attacker that could successfully send such a spoofed acknowledgement\n
      \  packet could also send a spoofed RST packet, or do other equally\n   damaging
      operations to the TCP connection.\n   Packets with a spoofed IP source address
      of the TCP data sender could\n   include the CWR bit set.  Again, to be accepted,
      such a packet would\n   have to have a valid sequence number.  In addition,
      such a spoofed\n   packet would have a limited performance impact.  Spoofing
      a data\n   packet with the CWR bit set could result in the TCP data receiver\n
      \  sending fewer ECE packets than it would otherwise, if the data\n   receiver
      was sending ECE packets when it received the spoofed CWR\n   packet.\n"
    title: 18.2.  Information carried in the Transport Header
  - contents:
    - "18.3.  Split Paths\n   In some cases, a malicious or broken router might have
      access to only\n   a subset of the packets from a flow.  The question is as
      follows:\n   can this router, by altering the ECN field in this subset of the\n
      \  packets, do more damage to that flow than if it had simply dropped\n   that
      set of packets?\n   We will classify the packets in the flow as A packets and
      B packets,\n   and assume that the adversary only has access to A packets.  Assume\n
      \  that the adversary is subverting end-to-end congestion control along\n   the
      path traveled by A packets only, by either falsely indicating\n   ECN-Capability
      upstream of the point where congestion occurs, or\n   erasing the congestion
      indication downstream.  Consider also that\n   there exists a monitoring device
      that sees both the A and B packets,\n   and will \"punish\" both the A and B
      packets if the total flow is\n   determined not to be properly responding to
      indications of\n   congestion.  Another key characteristic that we believe is
      likely to\n   be true is that the monitoring device, before `punishing' the
      A&B\n   flow, will first drop packets instead of setting the CE codepoint,\n
      \  and will drop arriving packets of that flow that already have the CE\n   codepoint
      set.  If the end nodes are in fact using end-to-end\n   congestion control,
      they will see all of the indications of\n   congestion seen by the monitoring
      device, and will begin to respond\n   to these indications of congestion. Thus,
      the monitoring device is\n   successful in providing the indications to the
      flow at an early\n   stage.\n   It is true that the adversary that has access
      only to the A packets\n   might, by subverting ECN-based congestion control,
      be able to deny\n   the benefits of ECN to the other packets in the A&B aggregate.
      \ While\n   this is unfortunate, this is not a reason to disable ECN.\n   A
      variant of falsely reporting congestion occurs when there are two\n   adversaries
      along a path, where the first adversary falsely reports\n   congestion, and
      the second adversary `erases' those reports. (Unlike\n   packet drops, ECN congestion
      reports can be `reversed' later in the\n   network by a malicious or broken
      router.  However, the use of the ECN\n   nonce could help the transport to detect
      this behavior.)  While this\n   would be transparent to the end node, it is
      possible that a\n   monitoring device between the first and second adversaries
      would see\n   the false indications of congestion.  Keep in mind our recommendation\n
      \  in this document, that before `punishing' a flow for not responding\n   appropriately
      to congestion, the router will first switch to dropping\n   rather than marking
      as an indication of congestion, for that flow.\n   When this includes dropping
      arriving packets from that flow that have\n   the CE codepoint set, this ensures
      that these indications of\n   congestion are being seen by the end nodes.  Thus,
      there is no\n   additional harm that we are able to postulate as a result of
      multiple\n   conflicting adversaries.\n"
    title: 18.3.  Split Paths
  title: 18.  Possible Changes to the ECN Field in the Network
- contents:
  - "19.  Implications of Subverting End-to-End Congestion Control\n   This section
    focuses on the potential repercussions of subverting\n   end-to-end congestion
    control by either falsely indicating ECN-\n   Capability, or by erasing the congestion
    indication in ECN (the CE\n   codepoint).  Subverting end-to-end congestion control
    by either of\n   these two methods can have consequences both for the application
    and\n   for the network.  We discuss these separately below.\n   The first method
    to subvert end-to-end congestion control, that of\n   falsely indicating ECN-Capability,
    effectively subverts end-to-end\n   congestion control only if the packet later
    encounters congestion\n   that results in the setting of the CE codepoint.  In
    this case, the\n   transport protocol (which may not be ECN-capable) does not
    receive\n   the indication of congestion from these downstream congested routers.\n
    \  The second method to subvert end-to-end congestion control, `erasing'\n   the
    CE codepoint in a packet, effectively subverts end-to-end\n   congestion control
    only when the CE codepoint in the packet was set\n   earlier by a congested router.
    \ In this case, the transport protocol\n   does not receive the indication of
    congestion from the upstream\n   congested routers.\n   Either of these two methods
    of subverting end-to-end congestion\n   control can potentially introduce more
    damage to the network (and\n   possibly to the flow itself) than if the adversary
    had simply dropped\n   packets from that flow.  However, as we discuss later in
    this section\n   and in Section 7, this potential damage is limited.\n"
  - contents:
    - "19.1.  Implications for the Network and for Competing Flows\n   The CE codepoint
      of the ECN field is only used by routers as an\n   indication of congestion
      during periods of *moderate* congestion.\n   ECN-capable routers should drop
      rather than mark packets during heavy\n   congestion even if the router's queue
      is not yet full.  For example,\n   for routers using active queue management
      based on RED, the router\n   should drop rather than mark packets that arrive
      while the average\n   queue sizes exceed the RED queue's maximum threshold.\n
      \  One consequence for the network of subverting end-to-end congestion\n   control
      is that flows that do not receive the congestion indications\n   from the network
      might increase their sending rate until they drive\n   the network into heavier
      congestion.  Then, the congested router\n   could begin to drop rather than
      mark arriving packets.  For flows\n   that are not isolated by some form of
      per-flow scheduling or other\n   per-flow mechanisms, but are instead aggregated
      with other flows in a\n   single queue in an undifferentiated fashion, this
      packet-dropping at\n   the congested router would apply to all flows that share
      that queue.\n   Thus, the consequences would be to increase the level of congestion\n
      \  in the network.\n   In some cases, the increase in the level of congestion
      will lead to a\n   substantial buffer buildup at the congested queue that will
      be\n   sufficient to drive the congested queue from the packet-marking to\n
      \  the packet-dropping regime.  This transition could occur either\n   because
      of buffer overflow, or because of the active queue management\n   policy described
      above that drops packets when the average queue is\n   above RED's maximum threshold.
      \ At this point, all flows, including\n   the subverted flow, will begin to
      see packet drops instead of packet\n   marks, and a malicious or broken router
      will no longer be able to `\n   erase' these indications of congestion in the
      network.  If the end\n   nodes are deploying appropriate end-to-end congestion
      control, then\n   the subverted flow will reduce its arrival rate in response
      to\n   congestion.  When the level of congestion is sufficiently reduced,\n
      \  the congested queue can return from the packet-dropping regime to the\n   packet-marking
      regime.  The steady-state pattern could be one of the\n   congested queue oscillating
      between these two regimes.\n   In other cases, the consequences of subverting
      end-to-end congestion\n   control will not be severe enough to drive the congested
      link into\n   sufficiently-heavy congestion that packets are dropped instead
      of\n   being marked.  In this case, the implications for competing flows in\n
      \  the network will be a slightly-increased rate of packet marking or\n   dropping,
      and a corresponding decrease in the bandwidth available to\n   those flows.
      \ This can be a stable state if the arrival rate of the\n   subverted flow is
      sufficiently small, relative to the link bandwidth,\n   that the average queue
      size at the congested router remains under\n   control.  In particular, the
      subverted flow could have a limited\n   bandwidth demand on the link at this
      router, while still getting more\n   than its \"fair\" share of the link.  This
      limited demand could be due\n   to a limited demand from the data source; a
      limitation from the TCP\n   advertised window; a lower-bandwidth access pipe;
      or other factors.\n   Thus the subversion of ECN-based congestion control can
      still lead to\n   unfairness, which we believe is appropriate to note here.\n
      \  The threat to the network posed by the subversion of ECN-based\n   congestion
      control in the network is essentially the same as the\n   threat posed by an
      end-system that intentionally fails to cooperate\n   with end-to-end congestion
      control.  The deployment of mechanisms in\n   routers to address this threat
      is an open research question, and is\n   discussed further in Section 10.\n
      \  Let us take the example described in Section 18.1.1, where the CE\n   codepoint
      that was set in a packet is erased: {'11' -> '10' or '11'\n   -> '01'}.  The
      consequence for the congested upstream router that set\n   the CE codepoint
      is that this congestion indication does not reach\n   the end nodes for that
      flow. The source (even one which is completely\n   cooperative and not malicious)
      is thus allowed to continue to\n   increase its sending rate (if it is a TCP
      flow, by increasing its\n   congestion window).  The flow potentially achieves
      better throughput\n   than the other flows that also share the congested router,
      especially\n   if there are no policing mechanisms or per-flow queuing mechanisms
      at\n   that router.  Consider the behavior of the other flows, especially if\n
      \  they are cooperative: that is, the flows that do not experience\n   subverted
      end-to-end congestion control.  They are likely to reduce\n   their load (e.g.,
      by reducing their window size) on the congested\n   router, thus benefiting
      our subverted flow. This results in\n   unfairness.  As we discussed above,
      this unfairness could either be\n   transient (because the congested queue is
      driven into the packet-\n   marking regime), oscillatory (because the congested
      queue oscillates\n   between the packet marking and the packet dropping regime),
      or more\n   moderate but a persistent stable state (because the congested queue\n
      \  is never driven to the packet dropping regime).\n   The results would be
      similar if the subverted flow was intentionally\n   avoiding end-to-end congestion
      control.  One difference is that a\n   flow that is intentionally avoiding end-to-end
      congestion control at\n   the end nodes can avoid end-to-end congestion control
      even when the\n   congested queue is in packet-dropping mode, by refusing to
      reduce its\n   sending rate in response to packet drops in the network.  Thus
      the\n   problems for the network from the subversion of ECN-based congestion\n
      \  control are less severe than the problems caused by the intentional\n   avoidance
      of end-to-end congestion control in the end nodes.  It is\n   also the case
      that it is considerably more difficult to control the\n   behavior of the end
      nodes than it is to control the behavior of the\n   infrastructure itself.  This
      is not to say that the problems for the\n   network posed by the network's subversion
      of ECN-based congestion\n   control are small; just that they are dwarfed by
      the problems for the\n   network posed by the subversion of either ECN-based
      or other\n   currently known packet-based congestion control mechanisms by the
      end\n   nodes.\n"
    title: 19.1.  Implications for the Network and for Competing Flows
  - contents:
    - "19.2.  Implications for the Subverted Flow\n   When a source indicates that
      it is ECN-capable, there is an\n   expectation that the routers in the network
      that are capable of\n   participating in ECN will use the CE codepoint for indication
      of\n   congestion. There is the potential benefit of using ECN in reducing\n
      \  the amount of packet loss (in addition to the reduced queuing delays\n   because
      of active queue management policies).  When the packet flows\n   through an
      IPsec tunnel where the nodes that the tunneled packets\n   traverse are untrusted
      in some way, the expectation is that IPsec\n   will protect the flow from subversion
      that results in undesirable\n   consequences.\n   In many cases, a subverted
      flow will benefit from the subversion of\n   end-to-end congestion control for
      that flow in the network, by\n   receiving more bandwidth than it would have
      otherwise, relative to\n   competing non-subverted flows.  If the congested
      queue reaches the\n   packet-dropping stage, then the subversion of end-to-end
      congestion\n   control might or might not be of overall benefit to the subverted\n
      \  flow, depending on that flow's relative tradeoffs between throughput,\n   loss,
      and delay.\n   One form of subverting end-to-end congestion control is to falsely\n
      \  indicate ECN-capability by setting the ECT codepoint.  This has the\n   consequence
      of downstream congested routers setting the CE codepoint\n   in vain.  However,
      as described in Section 9.1.2, if an ECT codepoint\n   is changed in an IP tunnel,
      this can be detected at the egress point\n   of the tunnel, as long as the inner
      header was not changed within the\n   tunnel.\n   The second form of subverting
      end-to-end congestion control is to\n   erase the congestion indication by erasing
      the CE codepoint.  In this\n   case, it is the upstream congested routers that
      set the CE codepoint\n   in vain.\n   If an ECT codepoint is erased within an
      IP tunnel, then this can be\n   detected at the egress point of the tunnel,
      as long as the inner\n   header was not changed within the tunnel.  If the CE
      codepoint is set\n   upstream of the IP tunnel, then any erasure of the outer
      header's CE\n   codepoint within the tunnel will have no effect because the
      inner\n   header preserves the set value of the CE codepoint.  However, if the\n
      \  CE codepoint is set within the tunnel, and erased either within or\n   downstream
      of the tunnel, this is not necessarily detected at the\n   egress point of the
      tunnel.\n   With this subversion of end-to-end congestion control, an end-system\n
      \  transport does not respond to the congestion indication.  Along with\n   the
      increased unfairness for the non-subverted flows described in the\n   previous
      section, the congested router's queue could continue to\n   build, resulting
      in packet loss at the congested router - which is a\n   means for indicating
      congestion to the transport in any case.  In the\n   interim, the flow might
      experience higher queuing delays, possibly\n   along with an increased bandwidth
      relative to other non-subverted\n   flows.  But transports do not inherently
      make assumptions of\n   consistently experiencing carefully managed queuing
      in the path.  We\n   believe that these forms of subverting end-to-end congestion
      control\n   are no worse for the subverted flow than if the adversary had simply\n
      \  dropped the packets of that flow itself.\n"
    title: 19.2.  Implications for the Subverted Flow
  - contents:
    - "19.3.  Non-ECN-Based Methods of Subverting End-to-end Congestion Control\n
      \  We have shown that, in many cases, a malicious or broken router that\n   is
      able to change the bits in the ECN field can do no more damage\n   than if it
      had simply dropped the packet in question.  However, this\n   is not true in
      all cases, in particular in the cases where the broken\n   router subverted
      end-to-end congestion control by either falsely\n   indicating ECN-Capability
      or by erasing the ECN congestion indication\n   (in the CE codepoint).  While
      there are many ways that a router can\n   harm a flow by dropping packets, a
      router cannot subvert end-to-end\n   congestion control by dropping packets.
      \ As an example, a router\n   cannot subvert TCP congestion control by dropping
      data packets,\n   acknowledgement packets, or control packets.\n   Even though
      packet-dropping cannot be used to subvert end-to-end\n   congestion control,
      there *are* non-ECN-based methods for subverting\n   end-to-end congestion control
      that a broken or malicious router could\n   use.  For example, a broken router
      could duplicate data packets, thus\n   effectively negating the effects of end-to-end
      congestion control\n   along some portion of the path.  (For a router that duplicated\n
      \  packets within an IPsec tunnel, the security administrator can cause\n   the
      duplicate packets to be discarded by configuring anti-replay\n   protection
      for the tunnel.)  This duplication of packets within the\n   network would have
      similar implications for the network and for the\n   subverted flow as those
      described in Sections 18.1.1 and 18.1.4\n   above.\n"
    title: 19.3.  Non-ECN-Based Methods of Subverting End-to-end Congestion Control
  title: 19.  Implications of Subverting End-to-End Congestion Control
- contents:
  - '20.  The Motivation for the ECT Codepoints.

    '
  - contents:
    - "20.1.  The Motivation for an ECT Codepoint.\n   The need for an ECT codepoint
      is motivated by the fact that ECN will\n   be deployed incrementally in an Internet
      where some transport\n   protocols and routers understand ECN and some do not.
      With an ECT\n   codepoint, the router can drop packets from flows that are not
      ECN-\n   capable, but can *instead* set the CE codepoint in packets that *are*\n
      \  ECN-capable. Because an ECT codepoint allows an end node to have the\n   CE
      codepoint set in a packet *instead* of having the packet dropped,\n   an end
      node might have some incentive to deploy ECN.\n   If there was no ECT codepoint,
      then the router would have to set the\n   CE codepoint for packets from both
      ECN-capable and non-ECN-capable\n   flows.  In this case, there would be no
      incentive for end-nodes to\n   deploy ECN, and no viable path of incremental
      deployment from a non-\n   ECN world to an ECN-capable world.  Consider the
      first stages of such\n   an incremental deployment, where a subset of the flows
      are ECN-\n   capable.  At the onset of congestion, when the packet\n   dropping/marking
      rate would be low, routers would only set CE\n   codepoints, rather than dropping
      packets.  However, only those flows\n   that are ECN-capable would understand
      and respond to CE packets. The\n   result is that the ECN-capable flows would
      back off, and the non-\n   ECN-capable flows would be unaware of the ECN signals
      and would\n   continue to open their congestion windows.\n   In this case, there
      are two possible outcomes: (1) the ECN-capable\n   flows back off, the non-ECN-capable
      flows get all of the bandwidth,\n   and congestion remains mild, or (2) the
      ECN-capable flows back off,\n   the non-ECN-capable flows don't, and congestion
      increases until the\n   router transitions from setting the CE codepoint to
      dropping packets.\n   While this second outcome evens out the fairness, the
      ECN-capable\n   flows would still receive little benefit from being ECN-capable,\n
      \  because the increased congestion would drive the router to packet-\n   dropping
      behavior.\n   A flow that advertised itself as ECN-Capable but does not respond
      to\n   CE codepoints is functionally equivalent to a flow that turns off\n   congestion
      control, as discussed earlier in this document.\n   Thus, in a world when a
      subset of the flows are ECN-capable, but\n   where ECN-capable flows have no
      mechanism for indicating that fact to\n   the routers, there would be less effective
      and less fair congestion\n   control in the Internet, resulting in a strong
      incentive for end\n   nodes not to deploy ECN.\n"
    title: 20.1.  The Motivation for an ECT Codepoint.
  - contents:
    - "20.2.  The Motivation for two ECT Codepoints.\n   The primary motivation for
      the two ECT codepoints is to provide a\n   one-bit ECN nonce.  The ECN nonce
      allows the development of\n   mechanisms for the sender to probabilistically
      verify that network\n   elements are not erasing the CE codepoint, and that
      data receivers\n   are properly reporting to the sender the receipt of packets
      with the\n   CE codepoint set.\n   Another possibility for senders to detect
      misbehaving network\n   elements or receivers would be for the data sender to
      occasionally\n   send a data packet with the CE codepoint set, to see if the
      receiver\n   reports receiving the CE codepoint.  Of course, if these packets\n
      \  encountered congestion in the network, the router might make no\n   change
      in the packets, because the CE codepoint would already be set.\n   Thus, for
      packets sent with the CE codepoint set, the TCP end-nodes\n   could not determine
      if some router intended to set the CE codepoint\n   in these packets.  For this
      reason, sending packets with the CE\n   codepoint would have to be done sparingly,
      and would be a less\n   effective check against misbehaving network elements
      and receivers\n   than would be the ECN nonce.\n   The assignment of the fourth
      ECN codepoint to ECT(1) precludes the\n   use of this codepoint for some other
      purposes.  For clarity, we\n   briefly list other possible purposes here.\n
      \  One possibility might have been for the data sender to use the fourth\n   ECN
      codepoint to indicate an alternate semantics for ECN.  However,\n   this seems
      to us more appropriate to be signaled using a\n   differentiated services codepoint
      in the DS field.\n   A second possible use for the fourth ECN codepoint would
      have been to\n   give the router two separate codepoints for the indication
      of\n   congestion, CE(0) and CE(1), for mild and severe congestion\n   respectively.
      \ While this could be useful in some cases, this\n   certainly does not seem
      a compelling requirement at this point.  If\n   there was judged to be a compelling
      need for this, the complications\n   of incremental deployment would most likely
      necessitate more that\n   just one codepoint for this function.\n   A third
      use that has been informally proposed for the ECN codepoint\n   is for use in
      some forms of multicast congestion control, based on\n   randomized procedures
      for duplicating marked packets at routers.\n   Some proposed multicast packet
      duplication procedures are based on a\n   new ECN codepoint that (1) conveys
      the fact that congestion occurred\n   upstream of the duplication point that
      marked the packet with this\n   codepoint and (2) can detect congestion downstream
      of that\n   duplication point.  ECT(1) can serve this purpose because it is
      both\n   distinct from ECT(0) and is replaced by CE when ECN marking occurs
      in\n   response to congestion or incipient congestion.  Explanation of how\n
      \  this enhanced version of ECN would be used by multicast congestion\n   control
      is beyond the scope of this document, as are ECN-aware\n   multicast packet
      duplication procedures and the processing of the ECN\n   field at multicast
      receivers in all cases (i.e., irrespective of the\n   multicast packet duplication
      procedure(s) used).\n   The specification of IP tunnel modifications for ECN
      in this document\n   assumes that the only change made to the outer IP header's
      ECN field\n   between tunnel endpoints is to set the CE codepoint to indicate\n
      \  congestion.  This is not consistent with some of the proposed uses of\n   ECT(1)
      by the multicast duplication procedures in the previous\n   paragraph, and such
      procedures SHOULD NOT be deployed unless this\n   inconsistency between multicast
      duplication procedures and IP tunnels\n   with full ECN functionality is resolved.
      \ Limited ECN functionality\n   may be used instead, although in practice many
      tunnel protocols\n   (including IPsec) will not work correctly if multicast
      traffic\n   duplication occurs within the tunnel\n"
    title: 20.2.  The Motivation for two ECT Codepoints.
  title: 20.  The Motivation for the ECT Codepoints.
- contents:
  - "21.  Why use Two Bits in the IP Header?\n   Given the need for an ECT indication
    in the IP header, there still\n   remains the question of whether the ECT (ECN-Capable
    Transport) and\n   CE (Congestion Experienced) codepoints should have been overloaded
    on\n   a single bit.  This overloaded-one-bit alternative, explored in\n   [Floyd94],
    would have involved a single bit with two values.  One\n   value, \"ECT and not
    CE\", would represent an ECN-Capable Transport,\n   and the other value, \"CE
    or not ECT\", would represent either\n   Congestion Experienced or a non-ECN-Capable
    transport.\n   One difference between the one-bit and two-bit implementations\n
    \  concerns packets that traverse multiple congested routers.  Consider\n   a
    CE packet that arrives at a second congested router, and is\n   selected by the
    active queue management at that router for either\n   marking or dropping.  In
    the one-bit implementation, the second\n   congested router has no choice but
    to drop the CE packet, because it\n   cannot distinguish between a CE packet and
    a non-ECT packet.  In the\n   two-bit implementation, the second congested router
    has the choice of\n   either dropping the CE packet, or of leaving it alone with
    the CE\n   codepoint set.\n   Another difference between the one-bit and two-bit
    implementations\n   comes from the fact that with the one-bit implementation,
    receivers\n   in a single flow cannot distinguish between CE and non-ECT packets.\n
    \  Thus, in the one-bit implementation an ECN-capable data sender would\n   have
    to unambiguously indicate to the receiver or receivers whether\n   each packet
    had been sent as ECN-Capable or as non-ECN-Capable.  One\n   possibility would
    be for the sender to indicate in the transport\n   header whether the packet was
    sent as ECN-Capable.  A second\n   possibility that would involve a functional
    limitation for the one-\n   bit implementation would be for the sender to unambiguously
    indicate\n   that it was going to send *all* of its packets as ECN-Capable or
    as\n   non-ECN-Capable.  For a multicast transport protocol, this\n   unambiguous
    indication would have to be apparent to receivers joining\n   an on-going multicast
    session.\n   Another concern that was described earlier (and recommended in this\n
    \  document) is that transports (particularly TCP) should not mark pure\n   ACK
    packets or retransmitted packets as being ECN-Capable.  A pure\n   ACK packet
    from a non-ECN-capable transport could be dropped, without\n   necessarily having
    an impact on the transport from a congestion\n   control perspective (because
    subsequent ACKs are cumulative).  An\n   ECN-capable transport reacting to the
    CE codepoint in a pure ACK\n   packet by reducing the window would be at a disadvantage
    in\n   comparison to a non-ECN-capable transport. For this reason (and for\n   reasons
    described earlier in relation to retransmitted packets), it\n   is desirable to
    have the ECT codepoint set on a per-packet basis.\n   Another advantage of the
    two-bit approach is that it is somewhat more\n   robust.  The most critical issue,
    discussed in Section 8, is that the\n   default indication should be that of a
    non-ECN-Capable transport.  In\n   a two-bit implementation, this requirement
    for the default value\n   simply means that the not-ECT codepoint should be the
    default.  In\n   the one-bit implementation, this means that the single overloaded
    bit\n   should by default be in the \"CE or not ECT\" position.  This is less\n
    \  clear and straightforward, and possibly more open to incorrect\n   implementations
    either in the end nodes or in the routers.\n   In summary, while the one-bit implementation
    could be a possible\n   implementation, it has the following significant limitations
    relative\n   to the two-bit implementation.  First, the one-bit implementation
    has\n   more limited functionality for the treatment of CE packets at a\n   second
    congested router.  Second, the one-bit implementation requires\n   either that
    extra information be carried in the transport header of\n   packets from ECN-Capable
    flows (to convey the functionality of the\n   second bit elsewhere, namely in
    the transport header), or that\n   senders in ECN-Capable flows accept the limitation
    that receivers\n   must be able to determine a priori which packets are ECN-Capable
    and\n   which are not ECN-Capable. Third, the one-bit implementation is\n   possibly
    more open to errors from faulty implementations that choose\n   the wrong default
    value for the ECN bit.  We believe that the use of\n   the extra bit in the IP
    header for the ECT-bit is extremely valuable\n   to overcome these limitations.\n"
  title: 21.  Why use Two Bits in the IP Header?
- contents:
  - "22.  Historical Definitions for the IPv4 TOS Octet\n   RFC 791 [RFC791] defined
    the ToS (Type of Service) octet in the IP\n   header.  In RFC 791, bits 6 and
    7 of the ToS octet are listed as\n   \"Reserved for Future Use\", and are shown
    set to zero.  The first two\n   fields of the ToS octet were defined as the Precedence
    and Type of\n   Service (TOS) fields.\n             0     1     2     3     4
    \    5     6     7\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n
    \         |   PRECEDENCE    |       TOS       |  0  |  0  |  RFC 791\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n
    \  RFC 1122 included bits 6 and 7 in the TOS field, though it did not\n   discuss
    any specific use for those two bits:\n             0     1     2     3     4     5
    \    6     7\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n          |
    \  PRECEDENCE    |       TOS                   |  RFC 1122\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n
    \  The IPv4 TOS octet was redefined in RFC 1349 [RFC1349] as follows:\n             0
    \    1     2     3     4     5     6     7\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n
    \         |   PRECEDENCE    |       TOS             | MBZ |  RFC 1349\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n
    \  Bit 6 in the TOS field was defined in RFC 1349 for \"Minimize Monetary\n   Cost\".
    \ In addition to the Precedence and Type of Service (TOS)\n   fields, the last
    field, MBZ (for \"must be zero\") was defined as\n   currently unused.  RFC 1349
    stated that \"The originator of a datagram\n   sets [the MBZ] field to zero (unless
    participating in an Internet\n   protocol experiment which makes use of that bit).\"\n
    \  RFC 1455 [RFC 1455] defined an experimental standard that used all\n   four
    bits in the TOS field to request a guaranteed level of link\n   security.\n   RFC
    1349 and RFC 1455 have been obsoleted by \"Definition of the\n   Differentiated
    Services Field (DS Field) in the IPv4 and IPv6\n   Headers\" [RFC2474] in which
    bits 6 and 7 of the DS field are listed\n   as Currently Unused (CU).  RFC 2780
    [RFC2780] specified ECN as an\n   experimental use of the two-bit CU field.  RFC
    2780 updated the\n   definition of the DS Field to only encompass the first six
    bits of\n   this octet rather than all eight bits; these first six bits are\n
    \  defined as the Differentiated Services CodePoint (DSCP):\n            0     1
    \    2     3     4     5     6     7\n         +-----+-----+-----+-----+-----+-----+-----+-----+\n
    \        |               DSCP                |    CU     |  RFCs 2474,\n         +-----+-----+-----+-----+-----+-----+-----+-----+
    \   2780\n   Because of this unstable history, the definition of the ECN field
    in\n   this document cannot be guaranteed to be backwards compatible with\n   all
    past uses of these two bits.\n   Prior to RFC 2474, routers were not permitted
    to modify bits in\n   either the DSCP or ECN field of packets forwarded through
    them, and\n   hence routers that comply only with RFCs prior to 2474 should have
    no\n   effect on ECN.  For end nodes, bit 7 (the second ECN bit) must be\n   transmitted
    as zero for any implementation compliant only with RFCs\n   prior to 2474.  Such
    nodes may transmit bit 6 (the first ECN bit) as\n   one for the \"Minimize Monetary
    Cost\" provision of RFC 1349 or the\n   experiment authorized by RFC 1455; neither
    this aspect of RFC 1349\n   nor the experiment in RFC 1455 were widely implemented
    or used.  The\n   damage that could be done by a broken, non-conformant router
    would\n   include \"erasing\" the CE codepoint for an ECN-capable packet that\n
    \  arrived at the router with the CE codepoint set, or setting the CE\n   codepoint
    even in the absence of congestion.  This has been discussed\n   in the section
    on \"Non-compliance in the Network\".\n   The damage that could be done in an
    ECN-capable environment by a\n   non-ECN-capable end-node transmitting packets
    with the ECT codepoint\n   set has been discussed in the section on \"Non-compliance
    by the End\n   Nodes\".\n"
  title: 22.  Historical Definitions for the IPv4 TOS Octet
- contents:
  - "23.  IANA Considerations\n   This section contains the namespaces that have either
    been created in\n   this specification, or the values assigned in existing namespaces\n
    \  managed by IANA.\n"
  - contents:
    - "23.1.  IPv4 TOS Byte and IPv6 Traffic Class Octet\n   The codepoints for the
      ECN Field of the IP header are specified by\n   the Standards Action of this
      RFC, as is required by RFC 2780.\n   When this document is published as an RFC,
      IANA should create a new\n   registry, \"IPv4 TOS Byte and IPv6 Traffic Class
      Octet\", with the\n   namespace as follows:\n   IPv4 TOS Byte and IPv6 Traffic
      Class Octet\n   Description:  The registrations are identical for IPv4 and IPv6.\n
      \  Bits 0-5:  see Differentiated Services Field Codepoints Registry\n           (http://www.iana.org/assignments/dscp-registry)\n
      \  Bits 6-7, ECN Field:\n   Binary  Keyword                                  References\n
      \  ------  -------                                  ----------\n     00     Not-ECT
      (Not ECN-Capable Transport)     [RFC 3168]\n     01     ECT(1) (ECN-Capable
      Transport(1))       [RFC 3168]\n     10     ECT(0) (ECN-Capable Transport(0))
      \      [RFC 3168]\n     11     CE (Congestion Experienced)             [RFC
      3168]\n"
    title: 23.1.  IPv4 TOS Byte and IPv6 Traffic Class Octet
  - contents:
    - "23.2.  TCP Header Flags\n   The codepoints for the CWR and ECE flags in the
      TCP header are\n   specified by the Standards Action of this RFC, as is required
      by RFC\n   2780.\n   When this document is published as an RFC, IANA should
      create a new\n   registry, \"TCP Header Flags\", with the namespace as follows:\n
      \  TCP Header Flags\n   The Transmission Control Protocol (TCP) included a 6-bit
      Reserved\n   field defined in RFC 793, reserved for future use, in bytes 13
      and 14\n   of the TCP header, as illustrated below.  The other six Control bits\n
      \  are defined separately by RFC 793.\n     0   1   2   3   4   5   6   7   8
      \  9  10  11  12  13  14  15\n   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
      \  |               |                       | U | A | P | R | S | F |\n   | Header
      Length |        Reserved       | R | C | S | S | Y | I |\n   |               |
      \                      | G | K | H | T | N | N |\n   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
      \  RFC 3168 defines two of the six bits from the Reserved field to be\n   used
      for ECN, as follows:\n     0   1   2   3   4   5   6   7   8   9  10  11  12
      \ 13  14  15\n   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
      \  |               |               | C | E | U | A | P | R | S | F |\n   | Header
      Length |    Reserved   | W | C | R | C | S | S | Y | I |\n   |               |
      \              | R | E | G | K | H | T | N | N |\n   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
      \  TCP Header Flags\n   Bit      Name                                    Reference\n
      \  ---      ----                                    ---------\n    8        CWR
      (Congestion Window Reduced)        [RFC 3168]\n    9        ECE (ECN-Echo)                         [RFC
      3168]\n"
    title: 23.2.  TCP Header Flags
  - contents:
    - "23.3. IPSEC Security Association Attributes\n   IANA allocated the IPSEC Security
      Association Attribute value 10 for\n   the ECN Tunnel use described in Section
      9.2.1.2 above at the request\n   of David Black in November 1999.  The IANA
      has changed the Reference\n   for this allocation from David Black's request
      to this RFC.\n"
    title: 23.3. IPSEC Security Association Attributes
  title: 23.  IANA Considerations
- contents:
  - "24.  Authors' Addresses\n   K. K. Ramakrishnan\n   TeraOptic Networks, Inc.\n
    \  Phone: +1 (408) 666-8650\n   EMail: kk@teraoptic.com\n   Sally Floyd\n   ACIRI\n
    \  Phone: +1 (510) 666-2989\n   EMail: floyd@aciri.org\n   URL: http://www.aciri.org/floyd/\n
    \  David L. Black\n   EMC Corporation\n   42 South St.\n   Hopkinton, MA  01748\n
    \  Phone:  +1 (508) 435-1000 x75140\n   EMail: black_david@emc.com\n"
  title: 24.  Authors' Addresses
- contents:
  - "25.  Full Copyright Statement\n   Copyright (C) The Internet Society (2001).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 25.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
