- title: __initial_text__
  contents:
  - '       MTU and Fragmentation Issues with In-the-Network Tunneling

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   Tunneling techniques such as IP-in-IP when deployed in the middle\
    \ of\n   the network, typically between routers, have certain issues regarding\n\
    \   how large packets can be handled: whether such packets would be\n   fragmented\
    \ and reassembled (and how), whether Path MTU Discovery\n   would be used, or\
    \ how this scenario could be operationally avoided.\n   This memo justifies why\
    \ this is a common, non-trivial problem, and\n   goes on to describe the different\
    \ solutions and their characteristics\n   at some length.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Problem Statement ...............................................3\n  \
    \ 3. Description of Solutions ........................................4\n    \
    \  3.1. Fragmentation and Reassembly by the Tunnel Endpoints .......4\n      3.2.\
    \ Signalling the Lower MTU to the Sources ....................5\n      3.3. Encapsulate\
    \ Only When There is Free MTU ....................6\n      3.4. Fragmentation\
    \ of the Inner Packet ..........................8\n   4. Conclusions .....................................................9\n\
    \   5. Security Considerations ........................................10\n  \
    \ 6. Acknowledgements ...............................................11\n   7.\
    \ References .....................................................11\n      7.1.\
    \ Normative References ......................................11\n      7.2. Informative\
    \ References ....................................12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A large number of ways to encapsulate datagrams in other\
    \ packets,\n   i.e., tunneling mechanisms, have been specified over the years:\
    \ for\n   example, IP-in-IP (e.g., [1] [2], [3]), Generic Routing Encapsulation\n\
    \   (GRE) [4], Layer 2 Tunneling Protocol (L2TP) [5], or IP Security\n   (IPsec)\
    \ [6] in tunnel mode -- any of which might run on top of IPv4,\n   IPv6, or some\
    \ other protocol and carrying the same or a different\n   protocol.\n   All of\
    \ these can be run so that the endpoints of the inner protocol\n   are co-located\
    \ with the endpoints of the outer protocol; in a typical\n   scenario, this would\
    \ correspond to \"host-to-host\" tunneling.  It is\n   also possible to have one\
    \ set of endpoints co-located, i.e.,\n   host-to-router or router-to-host tunneling.\
    \  Finally, many of these\n   mechanisms are also employed between the routers\
    \ for all or a part of\n   the traffic that passes between them, resulting in\
    \ router-to-router\n   tunneling.\n   All these protocols and scenarios have one\
    \ issue in common: how does\n   the source select the maximum packet size so that\
    \ the packets will\n   fit, even encapsulated, in the smallest Maximum Transmission\
    \ Unit\n   (MTU) of the traversed path in the network; and if you cannot affect\n\
    \   the packet sizes, what do you do to be able to encapsulate them in\n   any\
    \ case?  The four main solutions are as follows (these will be\n   elaborated\
    \ in Section 3):\n   1.  Fragmenting all too big encapsulated packets to fit in\
    \ the paths,\n       and reassembling them at the tunnel endpoints.\n   2.  Signal\
    \ to all the sources whose traffic must be encapsulated, and\n       is larger\
    \ than fits, to send smaller packets, e.g., using Path\n       MTU Discovery (PMTUD)[7][8].\n\
    \   3.  Ensure that in the specific environment, the encapsulated packets\n  \
    \     will fit in all the paths in the network, e.g., by using MTU\n       bigger\
    \ than 1500 in the backbone used for encapsulation.\n   4.  Fragmenting the original\
    \ too big packets so that their fragments\n       will fit, even encapsulated,\
    \ in the paths, and reassembling them\n       at the destination nodes.  Note\
    \ that this approach is only\n       available for IPv4 under certain assumptions\
    \ (see Section 3.4).\n   It is also common to run multiple layers of encapsulation,\
    \ for\n   example, GRE or L2TP over IPsec; with nested tunnels in the network,\n\
    \   the tunnel endpoints can be the same or different, and both the inner\n  \
    \ and outer tunnels may have different MTU handling strategies.  In\n   particular,\
    \ signalling may be a scalable option for the outer tunnel\n   or tunnels if the\
    \ number of innermost tunnel endpoints is limited.\n   The tunneling packet size\
    \ issues are relatively straightforward in\n   host-to-host tunneling or host-to-router\
    \ tunneling where Path MTU\n   Discovery only needs to signal to one source node.\
    \  The issues are\n   significantly more difficult in router-to-router and certain\n\
    \   router-to-host scenarios, which are the focus of this memo.\n   It is worth\
    \ noting that most of this discussion applies to a more\n   generic case, where\
    \ there exists a link with a lower MTU in the path.\n   A concrete and widely\
    \ deployed example of this is the usage of PPP\n   over Ethernet (PPPoE) [11]\
    \ at the customers' access link.  These\n   lower-MTU links, and particularly\
    \ PPPoE links, are typically not\n   deployed in topologies where fragmentation\
    \ and reassembly might be\n   unfeasible (e.g., a backbone), so this may be a\
    \ slightly easier\n   problem.  However, this more generic case is considered\
    \ out of scope\n   of this memo.\n   There are also known challenges in specifying\
    \ and implementing a\n   mechanism that would be used at the tunnel endpoint to\
    \ obtain the\n   best suitable packet size to use for encapsulation: if a static\
    \ value\n   is chosen, a lot of fragmentation might end up being performed.  On\n\
    \   the other hand, if PMTUD is used, the implementation would need to\n   update\
    \ the discovered interface MTU based on the ICMP Packet Too Big\n   messages and\
    \ originate ICMP Packet Too Big message(s) back to the\n   source(s) of the encapsulated\
    \ packets; this also assumes that\n   sufficient data has been piggybacked on\
    \ the ICMP messages (beyond the\n   required 64 bits after the IPv4 header). \
    \ We'll discuss using PMTUD\n   to signal the sources briefly in Section 3.2,\
    \ but in-depth\n   specification and analysis are described elsewhere (e.g., in\
    \ [4] and\n   [2]) and are out of scope of this memo.\n   Section 2 includes a\
    \ problem statement, section 3 describes the\n   different solutions with their\
    \ drawbacks and advantages, and section\n   4 presents conclusions.\n"
- title: 2.  Problem Statement
  contents:
  - "2.  Problem Statement\n   It is worth considering why exactly this is considered\
    \ a problem.\n   It is possible to fix all the packet size issues using solution\
    \ 1,\n   fragmenting the resulting encapsulated packet, and reassembling it by\n\
    \   the tunnel endpoint.  However, this is considered problematic for at\n   least\
    \ three reasons, as described in Section 3.1.\n   Therefore, it is desirable to\
    \ avoid fragmentation and reassembly if\n   possible.  On the other hand, the\
    \ other solutions may not be\n   practical either: especially in router-to-router\
    \ or router-to-host\n   tunneling, Path MTU Discovery might be very disadvantageous\
    \ --\n   consider the case where a backbone router would send ICMP Packet Too\n\
    \   Big messages to every source that would try to send packets through\n   it.\
    \  Fragmenting before encapsulation is also not available in IPv6,\n   and not\
    \ available when the Don't Fragment (DF) bit has been set (see\n   Section 3.4\
    \ for more).  Ensuring a high enough MTU so encapsulation\n   is always possible\
    \ is of course a valid approach, but requires\n   careful operational planning,\
    \ and may not be a feasible assumption\n   for implementors.\n   This yields that\
    \ there is no trivial solution to this problem, and it\n   needs to be further\
    \ explored to consider the trade offs, as is done\n   in this memo.\n"
- title: 3.  Description of Solutions
  contents:
  - "3.  Description of Solutions\n   This section describes the potential solutions\
    \ in a bit more detail.\n"
- title: 3.1.  Fragmentation and Reassembly by the Tunnel Endpoints
  contents:
  - "3.1.  Fragmentation and Reassembly by the Tunnel Endpoints\n   The seemingly\
    \ simplest solution to tunneling packet size issues is\n   fragmentation of the\
    \ outer packet by the encapsulator and reassembly\n   by the decapsulator.  However,\
    \ this is highly problematic for at\n   least three reasons:\n   o  Fragmentation\
    \ causes overhead: every fragment requires the IP\n      header (20 or 40 bytes),\
    \ and with IPv6, an additional 8 bytes for\n      the Fragment Header.\n   o \
    \ Fragmentation and reassembly require computation: splitting\n      datagrams\
    \ to fragments is a non-trivial procedure, and so is their\n      reassembly.\
    \  For example, software router forwarding\n      implementations may not be able\
    \ to perform these operations at\n      line rate.\n   o  At the time of reassembly,\
    \ all the information (i.e., all the\n      fragments) is normally not available;\
    \ when the first fragment\n      arrives to be reassembled, a buffer of the maximum\
    \ possible size\n      may have to be allocated because the total length of the\n\
    \      reassembled datagram is not known at that time.  Furthermore, as\n    \
    \  fragments might get lost, or be reordered or delayed, the\n      reassembly\
    \ engine has to wait with the partial packet for some\n      time (e.g., 60 seconds\
    \ [9]).  When this would have to be done at\n      the line rate, with, for example\
    \ 10 Gbit/s speed, the length of\n      the buffers that reassembly might require\
    \ would be prohibitive.\n   When examining router-to-router tunneling, the third\
    \ problem is\n   likely the worst; certainly, a hardware computation and\n   implementation\
    \ requirement would also be significant, but not all\n   that difficult in the\
    \ end -- and the link capacity wasted in the\n   backbones by additional overhead\
    \ might not be a huge problem either.\n   However, IPv4 identification header\
    \ length is only 16 bits (compared\n   to 32 bits in IPv6), and if a larger number\
    \ of packets are being\n   tunneled between two IP addresses, the ID is very likely\
    \ to wrap and\n   cause data misassociation.  This reassembly wrongly combining\
    \ data\n   from two unrelated packets causes data integrity and potentially a\n\
    \   confidentiality violation.  This problem is further described in\n   [12].\n\
    \   IPv6, and IPv4 with the DF bit set in the encapsulating header,\n   allows\
    \ the tunnel endpoints to optimize the tunnel MTU and minimize\n   network-based\
    \ reassembly.  This also prevents fragmentation of the\n   encapsulated packets\
    \ on the tunnel path.  If the IPv4 encapsulating\n   header does not have the\
    \ DF bit set, the tunnel endpoints will have\n   to perform a significant amount\
    \ of fragmentation and reassembly,\n   while the use of PMTUD is minimized.\n\
    \   As Appendix A describes, the MTU of the tunnel is also a factor on\n   which\
    \ packets require fragmentation and reassembly; the worst case\n   occurs if the\
    \ tunnel MTU is \"infinite\" or equal to the physical\n   interface MTUs.\n  \
    \ So, if reassembly could be made to work sufficiently reliably, this\n   would\
    \ be one acceptable fallback solution but only for IPv6.\n"
- title: 3.2.  Signalling the Lower MTU to the Sources
  contents:
  - "3.2.  Signalling the Lower MTU to the Sources\n   Another approach is to use\
    \ techniques like Path MTU Discovery (or\n   potentially a future derivative [13])\
    \ to signal to the sources whose\n   packets will be encapsulated in the network\
    \ to send smaller packets\n   so that they can be encapsulated; in particular,\
    \ when done on\n   routers, this includes two separable functions:\n   a.  Forwarding\
    \ behaviour: when forwarding packets, if the IPv4-only\n       DF bit is set,\
    \ the router sends an ICMP Packet Too Big message to\n       the source if the\
    \ MTU of the egress link is too small.\n   b.  Router's \"host\" behaviour: when\
    \ the router receives an ICMP\n       Packet Too Big message related to a tunnel,\
    \ it (1) adjusts the\n       tunnel MTU, and (2) originates an ICMP Packet Too\
    \ Big message to\n       the source address of the encapsulated packet. (2) can\
    \ be done\n       either immediately or by waiting for the next packet to trigger\n\
    \       an ICMP; the former minimizes the packet loss due to MTU changes.\n  \
    \ Note that this only works if the MTU of the tunnel is of reasonable\n   size,\
    \ and not, for example, 64 kilobytes: see Appendix A for more.\n   This approach\
    \ would presuppose that PMTUD works.  While it is\n   currently working for IPv6,\
    \ and critical for its operation, there is\n   ample evidence that in IPv4, PMTUD\
    \ is far from reliable due to, for\n   example firewalls and other boxes being\
    \ configured to inappropriately\n   drop all the ICMP packets [14], or software\
    \ bugs rendering PMTUD\n   inoperational.\n   Furthermore, there are two scenarios\
    \ where signalling from the\n   network would be highly undesirable.  The first\
    \ is when the\n   encapsulation would be done in such a prominent place in the\
    \ network\n   that a very large number of sources would need to be signalled with\n\
    \   this information (possibly even multiple times, depending on how long\n  \
    \ they keep their PMTUD state).  The second is when the encapsulation\n   is done\
    \ for passive monitoring purposes (network management, lawful\n   interception,\
    \ etc.) -- when it's critical that the sources whose\n   traffic is being encapsulated\
    \ are not aware of this happening.\n   When desiring to avoid fragmentation, IPv4\
    \ requires one of two\n   alternatives [1]: copy the DF bit from the inner packets\
    \ to the\n   encapsulating header, or always set the DF bit of the outer header.\n\
    \   The latter is better, especially in controlled environments, because\n   it\
    \ forces PMTUD to converge immediately.\n   A related technique, which works with\
    \ TCP under specific scenarios\n   only, is so-called \"MSS clamping\".  With\
    \ that technique or rather a\n   \"hack\", the TCP packets' Maximum Segment Size\
    \ (MSS) is reduced by\n   tunnel endpoints so that the TCP connection automatically\
    \ restricts\n   itself to the maximum available packet size.  Obviously, this\
    \ does\n   not work for UDP or other protocols that have no MSS.  This approach\n\
    \   is most applicable and used with PPPoE, but could be applied\n   otherwise\
    \ as well; the approach also assumes that all the traffic\n   goes through tunnel\
    \ endpoints that do MSS clamping -- this is trivial\n   for the single-homed access\
    \ links, but could be a challenge\n   otherwise.\n   A new approach to PMTUD is\
    \ in the works [13], but it is uncertain\n   whether that would fix the problems\
    \ -- at least not the passive\n   monitoring requirements.\n"
- title: 3.3.  Encapsulate Only When There is Free MTU
  contents:
  - "3.3.  Encapsulate Only When There is Free MTU\n   The third approach is an operational\
    \ one, depending on the\n   environment where encapsulation and decapsulation\
    \ are being\n   performed.  That is, if an ISP would deploy tunneling in its\n\
    \   backbone, which would consist only of links supporting high MTUs\n   (e.g.,\
    \ Gigabit Ethernet or SDH/SONET), but all its customers and\n   peers would have\
    \ a lower MTU (e.g., 1500, or the backbone MTU minus\n   the encapsulation overhead),\
    \ this would imply that no packets (with\n   the encapsulation overhead added)\
    \ would have a larger MTU than the\n   \"backbone MTU\", and all the encapsulated\
    \ packets would always fit\n   MTU-wise in the backbone links.\n   This approach\
    \ is highly assumptive of the deployment scenario.  It\n   may be desirable to\
    \ build a tunnel to/from another ISP, for example,\n   where this might no longer\
    \ hold; or there might be links in the\n   network that cannot support the higher\
    \ MTUs to satisfy the tunneling\n   requirements; or the tunnel might be set up\
    \ directly between the\n   customer and the ISP, in which case fragmentation would\
    \ occur, with\n   tunneled fragments terminating on the ISP and thus requiring\n\
    \   reassembly capability from the ISP's equipment.\n   To restate, this approach\
    \ can only be considered when tunneling is\n   done inside a part of specific\
    \ kind of ISP's own network, not, for\n   example, transiting an ISP.\n   Another,\
    \ related approach might be having the sources use only a low\n   enough MTU that\
    \ would fit in all the physical MTUs; for example, IPv6\n   specifies the minimum\
    \ MTU of 1280 bytes.  For example, if all the\n   sources whose traffic would\
    \ be encapsulated would use this as the\n   maximum packet size, there would probably\
    \ always be enough free MTU\n   for encapsulation in the network.  However, this\
    \ is not the case\n   today, and it would be completely unrealistic to assume\
    \ that this\n   kind of approach could be made to work in general.\n   It is worth\
    \ remembering that while the IPv6 minimum MTU is 1280 bytes\n   [10], there are\
    \ scenarios where the tunnel implementation must\n   implement fragmentation and\
    \ reassembly [3]: for example, when having\n   an IPv6-in-IPv6 tunnel on top of\
    \ a physical interface with an MTU of\n   1280 bytes, or when having two layers\
    \ of IPv6 tunneling.  This can\n   only be avoided by ensuring that links on top\
    \ of which IPv6 is being\n   tunneled have a somewhat larger MTU (e.g., 40 bytes)\
    \ than 1280 bytes.\n   This conclusion can be generalized: because IP can be tunneled\
    \ on top\n   of IP, no single minimum or maximum MTU can be found such that\n\
    \   fragmentation or signalling to the sources would never be needed.\n   All\
    \ in all, while in certain operational environments it might be\n   possible to\
    \ avoid any problems by deployment choices, or limiting the\n   MTU that the sources\
    \ use, this is probably not a sufficiently good\n   general solution for the equipment\
    \ vendors.  Other solutions must\n   also be provided.\n"
- title: 3.4.  Fragmentation of the Inner Packet
  contents:
  - "3.4.  Fragmentation of the Inner Packet\n   A final possibility is fragmenting\
    \ the inner packet, before\n   encapsulation, in such a manner that the encapsulated\
    \ packet fits in\n   the tunnel's path MTU (discovered using PMTUD).  However,\
    \ one should\n   note that only IPv4 supports this \"in-flight\" fragmentation;\n\
    \   furthermore, it isn't allowed for packets where the Don't Fragment\n   bit\
    \ has been set.  Even if one could ignore IPv6 completely, so many\n   IPv4 host\
    \ stacks send packets with the DF bit set that this would\n   seem unfeasible.\n\
    \   However, there are existing implementations that violate the standard\n  \
    \ that:\n   o  discard too big packets with the DF bit not set instead of\n  \
    \    fragmenting them (this is rare);\n   o  ignore the DF bit completely, for\
    \ all or specified interfaces; or\n   o  clear the DF bit before encapsulation,\
    \ in the egress of configured\n      interfaces.  This is typically done for all\
    \ the traffic, not just\n      too big packets (allowing configuring this is common).\n\
    \   This is non-compliant behaviour, but there are certainly uses for it,\n  \
    \ especially in certain tightly controlled passive monitoring\n   scenarios, and\
    \ it has potential for more generic applicability as\n   well, to work around\
    \ PMTUD issues.\n   Clearing the DF bit effectively disables the sender's PMTUD\
    \ for the\n   path beyond the tunnel.  This may result in fragmentation later\
    \ in\n   the network, but as the packets have already been fragmented prior to\n\
    \   encapsulation, this fragmentation later on does not make matters\n   significantly\
    \ worse.\n   As this is an implemented and desired (by some) behaviour, the full\n\
    \   impacts e.g., for the functioning of PMTUD (for example) should be\n   analyzed,\
    \ and the use of fragmentation-related IPv4 bits should be\n   re-evaluated.\n\
    \   In summary, this approach provides a relatively easy fix for IPv4\n   problems,\
    \ with potential for causing problems for PMTUD; as this\n   would not work with\
    \ IPv6, it could not be considered a generic\n   solution.\n"
- title: 4.  Conclusions
  contents:
  - "4.  Conclusions\n   Fragmentation and reassembly by the tunnel endpoints are\
    \ a clear and\n   simple solution to the problem, but the hardware reassembly\
    \ when the\n   packets get lost may face significant implementation challenges\
    \ that\n   may be insurmountable.  This approach does not seem feasible,\n   especially\
    \ for IPv4 with high data rates due to problems with\n   wrapping the fragment\
    \ identification field [12].  Constant wrapping\n   may occur when the data rate\
    \ is in the order of MB/s for IPv4 and in\n   the order of dozens of GB/s for\
    \ IPv6.  However, this reassembly\n   approach is probably not a problem for passive\
    \ monitoring\n   applications.\n   PMTUD techniques, at least at the moment and\
    \ especially for IPv4,\n   appear to be too unreliable or unscalable to be used\
    \ in the\n   backbones.  It is an open question whether a future solution might\n\
    \   work better in this aspect.\n   It is clear that in some environments the\
    \ operational approach to the\n   problem, ensuring that fragmentation is never\
    \ necessary by keeping\n   higher MTUs in the networks where encapsulated packets\
    \ traverse, is\n   sufficient.  But this is unlikely to be enough in general,\
    \ and for\n   vendors that may not be able to make assumptions about the operators'\n\
    \   deployments.\n   Fragmentation of the inner packet is only possible with IPv4,\
    \ and is\n   sufficient only if standards-incompliant behaviour, with potential\n\
    \   for bad side-effects (e.g., for PMTUD), is adopted.  It should not be\n  \
    \ used if there are alternatives; fragmentation of the outer packet\n   seems\
    \ a better option for passive monitoring.\n   However, if reassembly in the network\
    \ must be avoided, there are\n   basically two possibilities:\n   1.  For IPv6,\
    \ use ICMP signalling or operational methods.\n   2.  For IPv4, packets for which\
    \ the DF bit is not set can be\n       fragmented before encapsulation (and the\
    \ encapsulating header\n       would have the DF bit set); packets whose DF bit\
    \ is set would\n       need to get the DF bit cleared (though this is non-compliant).\n\
    \       This also minimizes the need for (unreliable) Internet-wide\n       PMTUD.\n\
    \   An interesting thing to explicitly note is that when tunneling is\n   done\
    \ in a high-speed backbone, typically one may be able to make\n   assumptions\
    \ on the environment; however, when reassembly is not\n   performed in such a\
    \ network, it might be done in software or with\n   lower requirements, and there\
    \ exists either a reassembly\n   implementation using PMTUD or using a separate\
    \ approach for passive\n   monitoring -- so this might not be a real problem.\n\
    \   In consequence, the critical questions at this point appear to be 1)\n   whether\
    \ a higher MTU can be assumed in the high-speed networks that\n   deploy tunneling,\
    \ and 2) whether \"slower-speed\" networks could cope\n   with a software-based\
    \ reassembly, a less capable hardware-based\n   reassembly, or the other workarounds.\
    \  An important future task would\n   be analyzing the observed incompliant behaviour\
    \ about the DF bit to\n   note whether it has any unanticipated drawbacks.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document describes different issues with\
    \ packet sizes and in-\n   the-network tunneling; this does not have security\
    \ considerations on\n   its own.\n   However, different solutions might have characteristics\
    \ that may make\n   them more susceptible to attacks -- for example, a router-based\n\
    \   fragment reassembly could easily lead to (reassembly) buffer memory\n   exhaustion\
    \ if the attacker sends a sufficient number of fragments\n   without sending all\
    \ of them, so that the reassembly would be stalled\n   until a timeout; these\
    \ and other fragment attacks (e.g., [15]) have\n   already been used against,\
    \ for example, firewalls and host stacks,\n   and need to be taken into consideration\
    \ in the implementations.\n   It is worth considering the cryptographic expense\
    \ (which is typically\n   more significant than the reassembly, if done in software)\
    \ with\n   fragmentation of the inner or outer packet.  If an outer fragment\n\
    \   goes missing, no cryptographic operations have been yet performed; if\n  \
    \ an inner fragment goes missing, cryptographic operations have already\n   been\
    \ performed.  Therefore, which of these approaches is preferable\n   also depends\
    \ on whether cryptography or reassembly is already\n   provided in hardware; for\
    \ high-speed routers, at least, one should be\n   able to assume that if it is\
    \ performing relatively heavy\n   cryptography, hardware support is already required.\n\
    \   The solutions using PMTUD (and consequently ICMP) will also need to\n   take\
    \ into account the attacks using ICMP.  In particular, an attacker\n   could send\
    \ ICMP Packet Too Big messages indicating a very low MTU to\n   reduce the throughput\
    \ and/or as a fragmentation/reassembly\n   denial-of-service attack.  This attack\
    \ has been described in the\n   context of TCP in [16].\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   While the topic is far from new, recent discussions\
    \ with W. Mark\n   Townsley on L2TP fragmentation issues caused the author to\
    \ sit down\n   and write up the issues in general.  Michael Richardson and Mika\n\
    \   Joutsenvirta provided useful feedback on the first version.  When\n   soliciting\
    \ comments from the NANOG list, Carsten Bormann, Kevin\n   Miller, Warren Kumari,\
    \ Iljitsch van Beijnum, Alok Dube, and Stephen\n   J. Wilcox provided useful feedback.\
    \  Later, Carlos Pignataro provided\n   excellent input, helping to improve the\
    \ document.  Joe Touch also\n   provided input on the memo.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [1]   Perkins, C., \"IP Encapsulation within IP\"\
    , RFC 2003, October\n         1996.\n   [2]   Nordmark, E. and R. Gilligan, \"\
    Basic Transition Mechanisms for\n         IPv6 Hosts and Routers\", RFC 4213,\
    \ October 2005.\n   [3]   Conta, A. and S. Deering, \"Generic Packet Tunneling\
    \ in IPv6\n         Specification\", RFC 2473, December 1998.\n   [4]   Farinacci,\
    \ D., Li, T., Hanks, S., Meyer, D., and P. Traina,\n         \"Generic Routing\
    \ Encapsulation (GRE)\", RFC 2784, March 2000.\n   [5]   Lau, J., Townsley, M.,\
    \ and I. Goyret, \"Layer Two Tunneling\n         Protocol - Version 3 (L2TPv3)\"\
    , RFC 3931, March 2005.\n   [6]   Kent, S. and K. Seo, \"Security Architecture\
    \ for the Internet\n         Protocol\", RFC 4301, December 2005.\n   [7]   Mogul,\
    \ J. and S. Deering, \"Path MTU discovery\", RFC 1191,\n         November 1990.\n\
    \   [8]   McCann, J., Deering, S., and J. Mogul, \"Path MTU Discovery for\n  \
    \       IP version 6\", RFC 1981, August 1996.\n   [9]   Braden, R., \"Requirements\
    \ for Internet Hosts - Communication\n         Layers\", STD 3, RFC 1122, October\
    \ 1989.\n   [10]  Deering, S. and R. Hinden, \"Internet Protocol, Version 6 (IPv6)\n\
    \         Specification\", RFC 2460, December 1998.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [11]  Mamakos, L., Lidl, K., Evarts, J., Carrel,\
    \ D., Simone, D., and\n         R. Wheeler, \"A Method for Transmitting PPP Over\
    \ Ethernet\n         (PPPoE)\", RFC 2516, February 1999.\n   [12]  Mathis, M.,\
    \ \"Fragmentation Considered Very Harmful\", Work in\n         Progress, July\
    \ 2004.\n   [13]  Mathis, M. and J. Heffner, \"Path MTU Discovery\", Work in\n\
    \         Progress, March 2006.\n   [14]  Medina, A., Allman, M., and S. Floyd,\
    \ \"Measuring the Evolution\n         of Transport Protocols in the Internet\"\
    , Computer\n         Communications Review, Apr 2005, <http://www.icir.org/tbit/>.\n\
    \   [15]  Miller, I., \"Protection Against a Variant of the Tiny Fragment\n  \
    \       Attack (RFC 1858)\", RFC 3128, June 2001.\n   [16]  Gont, F., \"ICMP attacks\
    \ against TCP\", Work in Progress,\n         February 2006.\n"
- title: Appendix A.  MTU of the Tunnel
  contents:
  - "Appendix A.  MTU of the Tunnel\n   Different tunneling mechanisms may treat the\
    \ tunnel links as having\n   different kinds of MTU values.  Some might use the\
    \ same default MTU\n   as for other interfaces; some others might use the default\
    \ MTU minus\n   the expected IP overhead (e.g., 20, 28, or 40 bytes); some others\n\
    \   might even treat the tunnel as having an \"infinite MTU\", e.g., 64\n   kilobytes.\n\
    \   As [2] describes, having an infinite MTU, i.e., always fragmenting\n   the\
    \ outer packet (and never the inner packet) and never performing\n   PMTUD for\
    \ the tunnel path, is a very bad idea, especially in\n   host-to-router scenarios.\
    \  (It could be argued that if the nodes are\n   sure that this is a host-to-host\
    \ tunnel, a larger MTU might make\n   sense if fragmentation and reassembly are\
    \ more efficient than just\n   sending properly sized packets -- but this seems\
    \ like a stretch.)\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Pekka Savola\n   CSC/FUNET\n   Espoo\n   Finland\n   EMail:\
    \ psavola@funet.fi\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
