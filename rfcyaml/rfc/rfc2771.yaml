- title: __initial_text__
  contents:
  - '            An Abstract API for Multicast Address Allocation

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the \"abstract service interface\" for the\n\
    \   dynamic multicast address allocation service, as seen by\n   applications.\
    \  While it does not describe a concrete API (i.e., for a\n   specific programming\
    \ language), it describes - in abstract terms -\n   the semantics of this service,\
    \ including the guarantees that it makes\n   to applications.\n   Additional documents\
    \ (not necessarily products of the IETF) would\n   describe concrete APIs for\
    \ this service.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Applications are the customers of a multicast address allocation\n\
    \   service, so a definition of this service should include not only the\n   inter-node\
    \ network protocols that are used to implement it, but also\n   the 'protocol'\
    \ that applications use to access the service.  While\n   APIs (\"application\
    \ programming interfaces\") for specific programming\n   languages (or operating\
    \ systems) are outside the domain of the IETF,\n   it is appropriate for us to\
    \ define - in abstract terms - the semantic\n   interface that this service presents\
    \ to applications.  Specific APIs\n   would then be based upon this abstract service\
    \ interface.\n   Note that it is possible to implement the multicast address\n\
    \   allocation service in at least two different ways.  The first (and\n   perhaps\
    \ most common) way is for end nodes to allocate addresses by\n   communicating\
    \ with a separate \"Address Allocation Server\" node, using\n   the \"Host to\
    \ Address Allocation Server\" network protocol (MADCAP)\n   [1][7].  Alternatively,\
    \ an \"Address Allocation Server\" implementation\n   might be co-located (along\
    \ with one or more applications) on an end\n   node, in which case some other,\
    \ internal, mechanism might be used to\n   access the server.  In either case,\
    \ however, the abstract service\n   interface (and, presumably, any specific APIs)\
    \ would remain the same.\n   The remainder of this document describes the abstract\
    \ interface.\n   Note that this interface is intended only for the allocation\
    \ of\n   dynamic multicast addresses, as used by the traditional multicast\n \
    \  service model [2].  Future multicast service models might allocate or\n   assign\
    \ multicast addresses in other ways, but this is outside the\n   scope of this\
    \ document.\n"
- title: 2. Abstract Data Types
  contents:
  - "2. Abstract Data Types\n   The interface described below uses the following abstract\
    \ data types:\n   -  AddressFamily: e.g., IPv4 or IPv6\n   -  MulticastAddress:\
    \ An actual multicast address (i.e., that could\n      subsequently be used as\
    \ the destination of a datagram)\n   -  MulticastAddressSet: A set of \"MulticastAddress\"\
    es\n   -  LanguageTag: The code for a (human) language, as defined in [4]\n  \
    \ -  Scope: An \"administrative scope\" [3] from which multicast\n           \
    \  addresses are to be allocated.  Each scope is a\n             \"MulticastAddressSet\"\
    , with an associated set of\n             (character-string) names - indexed by\
    \ \"LanguageTag\".  (Each\n             language tag has at most one corresponding\
    \ name, per\n             scope.)  For each scope, a (language tag, name) pair\
    \ may be\n             defined to be the 'default' name for this scope. (See the\n\
    \             section \"Querying the name of a scope\" below.)\n             (An\
    \ implementation of this abstract data type might also\n             include other\
    \ information, such as a default TTL for the\n             scope.)\n   -  Time:\
    \ An (absolute) event time.  This is used for specifying the\n            \"lifetime\"\
    \ of multicast addresses: the period of time during\n            which allocated\
    \ multicast addresses are guaranteed to be\n            available.  (It is also\
    \ used to specify the desired start\n            time for an \"advance allocation\"\
    .)\n            Note that a concrete API might prefer to specify some of\n   \
    \         these times as relative times (i.e., relative to the current\n     \
    \       time-of-day), rather than absolute time.  (Relative times\n          \
    \  have the advantage of not requiring clock synchronization.)\n   -  Lease: A\
    \ compound data type that describes the result of a\n             (successful)\
    \ multicast address allocation.  It consists of:\n             -  [MulticastAddressSet]\
    \ The set of addresses that were\n                allocated;\n             - \
    \ [AddressFamily] The address family of these addresses\n             -  [Time]\
    \ The lifetime of these addresses (the same for\n                each address)\n\
    \             -  [Time] The \"start time\" of the allocation.  (See the\n    \
    \            discussion of \"advance allocation\" below.)  (A concrete\n     \
    \           API would likely also include a MADCAP \"Lease\n                Identifier\"\
    \ [1].)\n   -  NestingRelationship: A binary data type that describes whether\
    \ or\n                           not two scopes nest. Two scopes nest if\n   \
    \                        traffic sent sent to a multicast group within\n     \
    \                      one scope could be seen by all hosts present\n        \
    \                   within the other scope were they to join the\n           \
    \                multicast group within the first scope. This\n              \
    \             value would be \"False\" for overlapping scopes\n              \
    \             where only some (or none) of the hosts within\n                \
    \           the second scope could see traffic sent to an\n                  \
    \         address due to the presence of an\n                           administratively\
    \ scoped boundary. In cases\n                           where the first and second\
    \ scopes are\n                           topologically identical this value would\
    \ be\n                           \"True.\"\n   -  Status: A result code.\n"
- title: 3. The Abstract Interface
  contents:
  - '3. The Abstract Interface

    '
- title: '3.1 Allocating multicast addresses:'
  contents:
  - "3.1 Allocating multicast addresses:\n   alloc_multicast_addr(in AddressFamily\
    \ family,\n                        in Scope scope,\n                        in\
    \ Integer minDesiredAddresses,\n                        in Integer maxDesiredAddresses,\n\
    \                        in Time minDesiredStartTime,\n                      \
    \  in Time maxDesiredStartTime,\n                        in Time minDesiredLifetime,\n\
    \                        in Time maxDesiredLifetime,\n                       \
    \ out Lease multicastAddressSetLease,\n                        out Status status)\n\
    \   This operation attempts to allocate a set of multicast addresses (the\n  \
    \ size of this set is in the range [minDesiredAddresses,\n   maxDesiredAddresses])\
    \ within the given address family and scope, and\n   within a given range of desired\
    \ lifetimes.  (\"minDesiredStartTime\"\n   and \"maxDesiredStartTime\" are used\
    \ to specify \"advance allocation\";\n   this is described in more detail below.)\n\
    \   If the address allocation succeeds, the result is returned in\n   \"multicastAddressSetLease\"\
    \ (with \"status\" = OK).\n   During the lifetime of this lease, the allocation\
    \ service will make a\n   \"best-effort\" attempt to not allocate any of these\
    \ addresses to\n   others.  (However, once the lease's lifetime has expired, any\
    \ of its\n   addresses can be allocated to others.)\n   Multicast addresses are\
    \ allocated for a limited lifetime.  An\n   application may attempt to extend\
    \ this lifetime, but this operation\n   may fail.  Therefore, an application must\
    \ be prepared for the\n   possibility it will not be able to use the same addresses\
    \ for as long\n   as it desires.  In particular, the application must be prepared\
    \ to\n   either quit early (because its original multicast address assignments\n\
    \   have expired), or, alternatively, to occasionally 'renumber' its\n   multicast\
    \ addresses (in some application or higher-level-protocol\n   dependent way),\
    \ by making a new allocation.  However, if an\n   application needs to consider\
    \ 'renumbering', it will always know this\n   in advance, at the time it acquired\
    \ its current address(es) - by\n   checking the lifetime in the returned lease.\
    \  An application will\n   never need to be notified asynchronously of the need\
    \ to 'renumber'.\n   Possible errors:\n         - bad address family\n       \
    \  - bad scope\n         - bad desired number of addresses (e.g., max < min)\n\
    \         - bad desired lifetimes (e.g., max < min)\n         - errors with the\
    \ two \"start time\" parameters (see\n           \"Advance allocation\" below)\n\
    \         - no addresses can be allocated (for the requested parameters)\n   An\
    \ allocation attempt can also fail with a result \"status\" code of\n   TRY_LATER,\
    \ indicating that the requested allocation cannot be made at\n   this time, but\
    \ that it might succeed if the caller retries the\n   attempt at some future time.\
    \  (This future time is returned in the\n   \"start time\" field of the\n   \"\
    multicastAddressSetLease\";\n           the other parts of this lease are undefined.)\n\
    \   Note that a concrete (i.e., programming language-specific) API for\n   multicast\
    \ address allocation will probably include additional,\n   specialized variants\
    \ of this general allocation operation.  For\n   instance, it may include separate\
    \ operations for:\n           - allocating only a single address\n           \
    \  (i.e., minDesiredAddresses = maxDesiredAddresses = 1);\n           - (attempting\
    \ to) allocate an address with a single, fixed\n              lifetime (i.e.,\
    \ minDesiredLifetime = maxDesiredLifetime);\n           - (attempting to) allocate\
    \ an address for immediate use\n             (i.e., minDesiredStartTime = maxDesiredStartTime\
    \ = 'now')\n"
- title: '3.2 Changing multicast addresses'' lifetime:'
  contents:
  - "3.2 Changing multicast addresses' lifetime:\n    change_multicast_addr_lifetime(in\
    \ Lease multicastAddressSetLease,\n                                   in Time\
    \ minDesiredLifetime,\n                                   in Time maxDesiredLifetime,\n\
    \                                   out Time lifetime)\n   This operation attempts\
    \ to change the lifetime of previously\n   allocated multicast addresses.  Unless\
    \ an error occurs, it returns\n   the new lifetime (which might remain unchanged).\n\
    \   Possible errors:\n           - bad address family\n           - bad durations\
    \ (e.g., max < min)\n           - the addresses' lifetime could not be changed\n\
    \             (and the existing lifetime was not in the requested range\n    \
    \         [minDesiredLifetime,maxDesiredLifetime])\n           - the addresses\
    \ were not ones that we had allocated\n             (see section 5.9) - or they\
    \ have already expired\n"
- title: '3.3 Deallocating multicast addresses:'
  contents:
  - "3.3 Deallocating multicast addresses:\n   deallocate_multicast_addr(in Lease\
    \ multicastAddressSetLease) This\n   operation attempts to deallocate previously\
    \ allocated multicast\n   addresses.\n   Possible errors:\n           - bad address\
    \ family\n           - the addresses were not ones that we had allocated\n   \
    \                (or they have already expired)\n"
- title: '3.4 Querying the set of usable multicast address scopes:'
  contents:
  - "3.4 Querying the set of usable multicast address scopes:\n    get_multicast_addr_scopes(in\
    \ AddressFamily family,\n                             out \"set of\" Scope)\n\
    \   This operation returns the set of administrative multicast address\n   scopes\
    \ that are defined for this node.\n   Possible errors:\n           - bad address\
    \ family\n"
- title: '3.5 Querying the name of a scope:'
  contents:
  - "3.5 Querying the name of a scope:\n    get_scope_name(in Scope scope,\n     \
    \              in LanguageTag language,\n                   out String name,\n\
    \                   out LanguageTag languageForName)\n   This operation returns\
    \ a character-string name for a given scope.  If\n   the scope has a name in the\
    \ specified \"language\", then this name (and\n   language) is returned.  Otherwise,\
    \ the scope's default (language,\n   name) pair is returned.\n   Possible errors:\n\
    \           - bad scope.\n"
- title: '3.6 Querying the nesting state of known usable multicast address scopes:'
  contents:
  - "3.6 Querying the nesting state of known usable multicast address scopes:\n  \
    \  get_scope_nesting_state(in \"set of\" Scope,\n                            out\
    \ \"matrix of\" NestingRelationship)\n   Possible errors:\n       - bad scope.\n\
    \       - nesting state undetermined at this time.\n   This operation would return\
    \ a matrix that shows the\n   current nesting relationships between the supplied\n\
    \   set of scopes which would have previously been supplied\n   via the get_multicast_addr_scopes(...)\
    \ function.\n"
- title: '3.7 Querying the set of scopes that a given scope is known to nest inside:'
  contents:
  - "3.7 Querying the set of scopes that a given scope is known to nest inside:\n\
    \    get_larger_scopes(in Scope,\n                      out \"set of\" Scope)\n\
    \   This operation returns the set of administrative multicast\n   address scopes\
    \ that are known to encompass the supplied\n   Scope.\n   Possible errors:\n \
    \      - bad scope.\n       - nesting state undetermined at this time.\n"
- title: '3.8 Querying the set of scopes that are known to nest inside a given scope:'
  contents:
  - "3.8 Querying the set of scopes that are known to nest inside a given scope:\n\
    \    get_smaller_scopes(in Scope,\n                      out \"set of\" Scope)\n\
    \   This operation returns the set of administrative multicast address\n   scopes\
    \ that are known to nest inside the supplied Scope (NB this\n   would include\
    \ those scopes that are topologically identical to the\n   supplied scope).\n\
    \   Possible errors:\n       - bad scope.\n       - nesting state undetermined\
    \ at this time.\n"
- title: '3.9 Note: The decision as to who is allowed to deallocate (or change'
  contents:
  - "3.9 Note: The decision as to who is allowed to deallocate (or change\n    the\
    \ lifetime of) a previously allocated multicast address set lease\n    is implementation-specific,\
    \ and depends upon the security policy of\n    the host system.  Thus it is not\
    \ specified in this abstract API.\n    One possible starting point, however, is\
    \ the following:\n      A previously allocated multicast address can be deallocated\
    \ (or\n      have its lifetime queried or changed) by the same \"principal\",\
    \ and\n      on the same node, as that which originally allocated it.\n      (\"\
    principal\" might, for example, be a \"user\" in the host operating\n      system.)\n"
- title: 3.10 Advance allocation
  contents:
  - "3.10 Advance allocation\n      By specifying \"minDesiredStartTime = maxDesiredStartTime\
    \ = 'now'\",\n      the address allocation operation - \"alloc_multicast_addr\"\
    \ -\n      described above can be used to request a set of multicast\n      addresses\
    \ that can be used *immediately* (and until their lifetime\n      expires).  During\
    \ this whole time, the addresses are not available\n      for allocation to others.\n\
    \      It is also possible - using the \"minDesiredStartTime\" and\n      \"maxDesiredStartTime\"\
    \ parameters - to allocate multicast addresses\n      *in advance* - i.e., so\
    \ that they have a future \"start time\" as\n      well as an expiration time.\
    \  Before the start time, the multicast\n      addresses may be allocated to others.\n\
    \      Advance allocation is convenient for allocating addresses for\n      events\
    \ that begin far in the future - e.g., several weeks or\n      months away.  Without\
    \ advance allocation, it would be necessary to\n      allocate addresses for a\
    \ long period of time - even when it will\n      not be used.  Such a request\
    \ would not only be a wasteful use of\n      the multicast address space, but\
    \ it may also be difficult to\n      implement (especially since address allocations\
    \ are expected to\n      remain valid in spite of topology changes).\n      Advance\
    \ allocation requests can produce the following errors (in\n      addition to\
    \ those defined earlier):\n      - bad start time durations (e.g., max < min)\n\
    \      - requested start times conflict with requested lifetimes\n        (i.e.,\
    \ min start time > max lifetime)\n   The following operation is also defined:\n\
    \      change_multicast_addr_start_time(in Lease multicastAddressSetLease,\n \
    \                                      in Time minDesiredStartTime,\n        \
    \                               in Time maxDesiredStartTime,\n               \
    \                        out Time startTime)\n      This operation attempts to\
    \ change the start time of previously\n      allocated multicast addresses.  Unless\
    \ an error occurs, it returns\n      the new start time (which might remain unchanged).\n\
    \      Possible errors: the same as \"change_multicast_addr_lifetime\"\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   As noted in section 5.9 above, each implementation\
    \ of this abstract\n   API should define a security policy that specifies when\
    \ (and by whom)\n   previously allocated multicast addresses can be deallocated\
    \ (or\n   queried, or have their lifetime changed).\n   Because multicast addresses\
    \ are a finite resource, there is a\n   potential for a \"denial of service\"\
    \ attack by allocating a large\n   number of multicast addresses without deallocating\
    \ them.  Preventing\n   such an attack, however, is not the role of the API, but\
    \ rather by\n   the underlying MAAS (\"Multicast Address Allocation Server(s)\"\
    \ [6]).\n"
- title: 5. Acknowledgements
  contents:
  - "5. Acknowledgements\n   Many thanks to other participants in the \"MALLOC\" working\
    \ group - in\n   particular Steve Hanna, Dave Thaler, Roger Kermode, and Pavlin\n\
    \   Radoslavov - for their valuable comments.\n"
- title: 6. References
  contents:
  - "6. References\n   [1] Hanna, S., Patel, B. and M. Shah, \"Multicast Address Dynamic\n\
    \       Client Allocation Protocol (MADCAP)\", RFC 2730, December 1999.\n   [2]\
    \ Deering, S., \"Host Extensions for IP Multicasting\", STD 5, RFC\n       1112,\
    \ August 1989.\n   [3] Meyer, D., \"Administratively Scoped IP Multicast\", BCP\
    \ 23, RFC\n       2365, July, 1998.\n   [4] Alvestrand, H., \"Tags for the Identification\
    \ of Languages\", RFC\n       1766, March 1995.\n   [5] Handley, M. and V. Jacobson,\
    \ \"SDP: Session Description Protocol\",\n       RFC 2327, April 1998.\n   [6]\
    \ Estrin, D., Handley, M. and D. Thaler, \"The Internet Multicast\n       Address\
    \ Allocation Architecture\", Work in Progress.\n   [7] Kermode, R., \"MADCAP Multicast\
    \ Scope Nesting State Option\", Work\n       in Progress.\n"
- title: 7. Author's Address
  contents:
  - "7. Author's Address\n   Ross Finlayson,\n   Live Networks, Inc. (LIVE.COM)\n\
    \   EMail: finlayson@live.com\n   WWW: http://www.live.com/\n"
- title: 8. Full Copyright Statement
  contents:
  - "8. Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
