- title: __initial_text__
  contents:
  - "         Rationale for the Structure of the Model and Protocol\n            \
    \       for the Internet Printing Protocol\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This document defines an Experimental protocol for the Internet\n\
    \   community.  The IESG expects that a revised version of this protocol\n   will\
    \ be published as Proposed Standard protocol.  The Proposed\n   Standard, when\
    \ published, is expected to change from the protocol\n   defined in this memo.\
    \  In particular, it is expected that the\n   standards-track version of the protocol\
    \ will incorporate strong\n   authentication and privacy features, and that an\
    \ \"ipp:\" URL type will\n   be defined which supports those security measures.\
    \  Other changes to\n   the protocol are also possible.  Implementors are warned\
    \ that future\n   versions of this protocol may not interoperate with the version\
    \ of\n   IPP defined in this document, or if they do interoperate, that some\n\
    \   protocol features may not be available.\n   The IESG encourages experimentation\
    \ with this protocol, especially in\n   combination with Transport Layer Security\
    \ (TLS) [RFC2246], to help\n   determine how TLS may effectively be used as a\
    \ security layer for\n   IPP.\n"
- title: ABSTRACT
  contents:
  - "ABSTRACT\n   This document is one of a set of documents, which together describe\n\
    \   all aspects of a new Internet Printing Protocol (IPP).  IPP is an\n   application\
    \ level protocol that can be used for distributed printing\n   using Internet\
    \ tools and technologies. This document describes IPP\n   from a high level view,\
    \ defines a roadmap for the various documents\n   that form the suite of IPP specifications,\
    \ and gives background and\n   rationale for the IETF working group's major decisions.\n\
    \   The full set of IPP documents includes:\n      Design Goals for an Internet\
    \ Printing Protocol [RFC2567]\n      Rationale for the Structure and Model and\
    \ Protocol for the\n      Internet Printing Protocol (this document)\n      Internet\
    \ Printing Protocol/1.0: Model and Semantics [RFC2566]\n      Internet Printing\
    \ Protocol/1.0: Encoding and Transport [RFC2565]\n      Internet Printing Protocol/1.0:\
    \ Implementer's Guide [ipp-iig]\n      Mapping between LPD and IPP Protocols [RFC2569]\n\
    \   The \"Design Goals for an Internet Printing Protocol\" document takes a\n\
    \   broad look at distributed printing functionality, and it enumerates\n   real-life\
    \ scenarios that help to clarify the features that need to be\n   included in\
    \ a printing protocol for the Internet.  It identifies\n   requirements for three\
    \ types of users: end users, operators, and\n   administrators.  The Design Goals\
    \ document calls out a subset of end\n   user requirements that are satisfied\
    \ in IPP/1.0. Operator and\n   administrator requirements are out of scope for\
    \ version 1.0.\n   The \"Internet Printing Protocol/1.0: Model and Semantics\"\
    \ document\n   describes a simplified model consisting of abstract objects, their\n\
    \   attributes, and their operations that is independent of encoding and\n   transport.\
    \  The model consists of a Printer and a Job object.  The\n   Job optionally supports\
    \ multiple documents.  This document also\n   addresses security, internationalization,\
    \ and directory issues.\n   The \"Internet Printing Protocol/1.0: Encoding and\
    \ Transport\" document\n   is a formal mapping of the abstract operations and\
    \ attributes defined\n   in the model document onto HTTP/1.1.  It defines the\
    \ encoding rules\n   for a new Internet media type called \"application/ipp\"\
    .\n   The \"Internet Printing Protocol/1.0: Implementer's Guide\" document\n \
    \  gives insight and advice to implementers of IPP clients and IPP\n   objects.\
    \  It is intended to help them understand IPP/1.0 and some of\n   the considerations\
    \ that may assist them in the design of their client\n   and/or IPP object implementations.\
    \  For example, a typical order of\n   processing requests is given, including\
    \ error checking.  Motivation\n   for some of the specification decisions is also\
    \ included.\n   The \"Mapping between LPD and IPP Protocols\" document gives some\n\
    \   advice to implementers of gateways between IPP and LPD (Line Printer\n   Daemon)\
    \ implementations.\n"
- title: 1.   ARCHITECTURAL OVERVIEW
  contents:
  - "1.   ARCHITECTURAL OVERVIEW\n   The Internet Printing Protocol (IPP) is an application\
    \ level protocol\n   that can be used for distributed printing on the Internet.\
    \  This\n   protocol defines interactions between a client and a server.  The\n\
    \   protocol allows a client to inquire about capabilities of a printer,\n   to\
    \ submit print jobs and to inquire about and cancel print jobs. The\n   server\
    \ for these requests is the Printer; the Printer is an\n   abstraction of a generic\
    \ document output device and/or a print\n   service provider. Thus, the Printer\
    \ could be a real printing device,\n   such as a computer printer or fax output\
    \ device, or it could be a\n   service that interfaced with output devices.\n\
    \   The protocol is heavily influenced by the printing model introduced\n   in\
    \ the Document Printing Application (DPA) [ISO10175] standard.\n   Although DPA\
    \ specifies both end user and administrative features, IPP\n   version 1.0 (IPP/1.0)\
    \ focuses only on end user functionality.\n   The architecture for IPP defines\
    \ (in the Model and Semantics document\n   [RFC2566]) an abstract Model for the\
    \ data which is used to control\n   the printing process and to provide information\
    \ about the process and\n   the capabilities of the Printer. This abstract Model\
    \ is hierarchical\n   in nature and reflects the structure of the Printer and\
    \ the Jobs that\n   may be being processed by the Printer.\n   The Internet provides\
    \ a channel between the client and the\n   server/Printer. Use of this channel\
    \ requires flattening and\n   sequencing the hierarchical Model data. Therefore,\
    \ the IPP also\n   defines (in the Encoding and Transport document [RFC2565])\
    \ an\n   encoding of the data in the model for transfer between the client and\n\
    \   server.  This transfer of data may be either a request or the\n   response\
    \ to a request.\n   Finally, the IPP defines (in the Encoding and Transport document\n\
    \   [RFC2565]) a protocol for transferring the encoded request and\n   response\
    \ data between the client and the server/Printer.\n   An example of a typical\
    \ interaction would be a request from the\n   client to create a print job. The\
    \ client would assemble the Model\n   data to be associated with that job, such\
    \ as the name of the job, the\n   media to use, the number of pages to place on\
    \ each media instance,\n   etc. This data would then be encoded according to the\
    \ Protocol and\n   would be transmitted according to the Protocol. The server/Printer\n\
    \   would receive the encoded Model data, decode it into a form\n   understood\
    \ by the server/Printer and, based on that data, do one of\n   two things: (1)\
    \ accept the job or (2) reject the job. In either case,\n   the server must construct\
    \ a response in terms of the Model data,\n   encode that response according to\
    \ the Protocol and transmit that\n   encoded Model data as the response to the\
    \ request using the Protocol.\n   Another part of the IPP architecture is the\
    \ Directory Schema\n   described in the model document. The role of a Directory\
    \ Schema is to\n   provide a standard set of attributes which might be used to\
    \ query a\n   directory service for the URI of a Printer that is likely to meet\
    \ the\n   needs of the client. The IPP architecture also addresses security\n\
    \   issues such as control of access to server/Printers and secure\n   transmissions\
    \ of requests, response and the data to be printed.\n"
- title: 2. THE PRINTER
  contents:
  - "2. THE PRINTER\n   Because the (abstract) server/Printer encompasses a wide range\
    \ of\n   implementations, it is necessary to make some assumptions about a\n \
    \  minimal implementation. The most likely minimal implementation is one\n   that\
    \ is embedded in an output device running a specialized real time\n   operating\
    \ system and with limited processing, memory and storage\n   capabilities. This\
    \ printer will be connected to the Internet and will\n   have at least a TCP/IP\
    \ capability with (likely) SNMP [RFC1905,\n   RFC1906] support for the Internet\
    \ connection. In addition, it is\n   likely the the Printer will be an HTML/HTTP\
    \ server to allow direct\n   user access to information about the printer.\n"
- title: 3. RATIONALE FOR THE MODEL
  contents:
  - "3. RATIONALE FOR THE MODEL\n   The Model [RFC2566] is defined independently of\
    \ any encoding of the\n   Model data both to support the likely uses of IPP and\
    \ to be robust\n   with respect to the possibility of alternate encoding.\n  \
    \ It is expected that a client or server/Printer would represent the\n   Model\
    \ data in some data structure within the applications/servers\n   that support\
    \ IPP. Therefore, the Model was designed to make that\n   representation straightforward.\
    \ Typically a parser or formatter would\n   be used to convert from or to the\
    \ encoded data format. Once in an\n   internal form suitable to a product, the\
    \ data can be manipulated by\n   the product. For example, the data sent with\
    \ a Print Job can be used\n   to control the processing of that Print Job.\n \
    \  The semantics of IPP are attached to the (abstract) Model.\n   Therefore, the\
    \ application/server is not dependent on the encoding of\n   the Model data, and\
    \ it is possible to consider alternative mechanisms\n   and formats by which the\
    \ data could be transmitted from a client to a\n   server; for example, a server\
    \ could have a direct, client-less GUI\n   interface that might be used to accept\
    \ some kinds of Print Jobs. This\n   independence would also allow a different\
    \ encoding and/or\n   transmission mechanism to be used if the ones adopted here\
    \ were shown\n   to be overly limiting in the future. Such a change could be migrated\n\
    \   into new products as an alternate protocol stack/parser for the Model\n  \
    \ data.\n   Having an abstract Model also allows the Model data to be aligned\n\
    \   with the (abstract) model used in the Printer [RFC1759], Job and Host\n  \
    \ Resources MIBs. This provides consistency in interpretation of the\n   data\
    \ obtained independently of how the data is accessed, whether via\n   IPP or via\
    \ SNMP [RFC1905, RFC1906] and the Printer/Job MIBs.\n   There is one aspect of\
    \ the Model that deserves some extra\n   explanation. There are two ways for identifying\
    \ a Job object: (a)\n   with a Job URI and (b) using a combination of the Printer\
    \ URI and a\n   Job ID (a 32 bit positive integer). Allowing Job objects to have\
    \ URIs\n   allows for flexibility and scalability. For example a job could be\n\
    \   moved from a printer with a large backlog to one with a smaller load\n   and\
    \ the job identification, the Job object URI, need not change.\n   However, many\
    \ existing printing systems have local models or\n   interface constraints that\
    \ force Job objects to be identified using\n   only a 32-bit positive integer\
    \ rather than a URI.  This numeric Job\n   ID is only unique within the context\
    \ of the Printer object to which\n   the create request was originally submitted.\
    \  In order to allow both\n   types of client access to Jobs (either by Job URI\
    \ or by numeric Job\n   ID), when the Printer object successfully processes a\
    \ create request\n   and creates a new Job, the Printer object generates both\
    \ a Job URI\n   and a Job ID for the new Job object. This requirement allows all\n\
    \   clients to access Printer objects and Job objects independent of any\n   local\
    \ constraints imposed on the client implementation.\n"
- title: 4. RATIONALE FOR THE PROTOCOL
  contents:
  - "4. RATIONALE FOR THE PROTOCOL\n   There are two parts to the Protocol: (1) the\
    \ encoding of the Model\n   data and (2) the mechanism for transmitting the model\
    \ data between\n   client and server.\n"
- title: 4.1 The Encoding
  contents:
  - "4.1 The Encoding\n   To make it simpler to develop embedded printers, a very\
    \ simple binary\n   encoding has been chosen. This encoding is adequate to represent\
    \ the\n   kinds of data that occur within the Model. It has a simple structure\n\
    \   consisting of sequences of attributes. Each attribute has a name,\n   prefixed\
    \ by a name length, and a value. The names are strings\n   constrained to characters\
    \ from a subset of ASCII.  The values are\n   either scalars or a sequence of\
    \ scalars. Each scalar value has a\n   length specification and a value tag which\
    \ indicates the type of the\n   value. The value type has two parts: a major class\
    \ part, such as\n   integer or string, and a minor class part which distinguishes\
    \ the\n   usage of the major class, such as dateTime string. Tagging of the\n\
    \   values with type information allows for introducing new value types\n   at\
    \ some future time.\n   A fully encoded request/response has a version number,\
    \ an operation\n   (for a request) or a status and optionally a status message\
    \ (for a\n   response), associated parameters and attributes which are encoded\n\
    \   Model data and, optionally (for a request), print data following the\n   Model\
    \ data.\n"
- title: 4.2 The Transmission Mechanism
  contents:
  - "4.2 The Transmission Mechanism\n   The chosen mechanism for transmitting the\
    \ encoded Model data is HTTP\n   1.1 Post (and associated response). No modifications\
    \ to HTTP 1.1 are\n   proposed or required. The sole role of the Transmission\
    \ Mechanism is\n   to provide a transfer of encoded Model data from/to the client\n\
    \   to/from the server. This could be done using any data delivery\n   mechanism.\
    \ The key reasons why HTTP 1.1 Post is used are given below.\n   The most important\
    \ of these is the first. With perhaps this\n   exception, these reasons could\
    \ be satisfied by other mechanisms.\n   There is no claim that this list uniquely\
    \ determines a choice of\n   mechanism.\n      1. HTTP 1.0 is already widely deployed\
    \ and, based on the recent\n      evidence, HTTP 1.1 is being widely deployed\
    \ as the manufacturers\n      release new products. The performance benefits of\
    \ HTTP 1.1 have\n      been shown and manufactures are reacting positively.\n\
    \      Wide deployment has meant that many of the problems of making a\n     \
    \ protocol work in a wide range of environments from local net to\n      Intranet\
    \ to Internet have been solved and will stay solved with\n      HTTP 1.1 deployment.\n\
    \      2. HTTP 1.1 solves most of the problems that might have required a\n  \
    \    new protocol to be developed. HTTP 1.1 allows persistent\n      connections\
    \ that make a multi-message protocol be more efficient;\n      for example it\
    \ is practical to have separate Create-Job and Send-\n      Document messages.\
    \ Chunking allows the transmission of large print\n      files without having\
    \ to pre-scan the file to determine the file\n      length. The accept headers\
    \ allow the client's protocol and\n      localization desires to be transmitted\
    \ with the IPP operations and\n      data. If the Model were to provide for the\
    \ redirection of Job\n      requests, such as Cancel-Job, when a Job is moved,\
    \ the HTTP\n      redirect response allows a client to be informed when a Job\
    \ he is\n      interested in is moved to another server/Printer for any reason.\n\
    \      3. Most network Printers will be implementing HTTP servers for\n      reasons\
    \ other than IPP. These network attached Printers want to\n      provide information\
    \ on how to use the printer, its current state,\n      HELP information, etc.\
    \ in HTML. This requires having an HTTP\n      server which would be available\
    \ to do IPP functions as well.\n      4.  Most of the complexity of HTTP 1.1 is\
    \ concerned with the\n      implementation of HTTP proxies and not the implementation\
    \ of HTTP\n      clients and/or servers. Work is proceeding in the HTTP Working\n\
    \      Group to help identify what must be done by a server.  As the\n      Encoding\
    \ and Transport document shows, that is not very much.\n      5. HTTP implementations\
    \ provide support for handling URLs that\n      would have to be provided if a\
    \ new protocol were defined.\n      6. An HTTP based solution fits well with the\
    \ Internet security\n      mechanisms that are currently deployed or being deployed.\
    \ HTTP\n      will run over SSL3. The digest access authentication mechanism of\n\
    \      HTTP 1.1 provides an adequate level of access control. These\n      solutions\
    \ are deployed and in practical use; a new solution would\n      require extensive\
    \ use to have the same degree of confidence in its\n      security.  Note: SSL3\
    \ is not on the IETF standards track.\n      7. HTTP provides an extensibility\
    \ model that a new protocol would\n      have to develop independently. In particular,\
    \ the headers,\n      intent-types (via Internet Media Types) and error codes\
    \ have wide\n      acceptance and a useful set of definitions and methods for\n\
    \      extension.\n      8. Although not strictly a reason why IPP should use\
    \ HTTP as the\n      transmission protocol, it is extremely helpful that there\
    \ are many\n      prototyping tools that work with HTTP and that CGI scripts can\
    \ be\n      used to test and debug parts of the protocol.\n      9. Finally, the\
    \ POST method was chosen to carry the print data\n      because its usage for\
    \ data transmission has been established, it\n      works and the results are\
    \ available via CGI scripts or servlets.\n      Creating a new method would have\
    \ better identified the intended\n      use of the POSTed data, but a new method\
    \ would be more difficult\n      to deploy. Assigning a new default port for IPP\
    \ provided the\n      necessary identification with minimal impact to installed\n\
    \      infrastructure, so was chosen instead.\n"
- title: 5. RATIONALE FOR THE DIRECTORY SCHEMA
  contents:
  - "5. RATIONALE FOR THE DIRECTORY SCHEMA\n      Successful use of IPP depends on\
    \ the client finding a suitable IPP\n      enabled Printer to which to send a\
    \ IPP requests, such as print a\n      job. This task is simplified if there is\
    \ a Directory Service which\n      can be queried for a suitable Printer. The\
    \ purpose of the\n      Directory Schema is to have a standard description of\
    \ Printer\n      attributes that can be associated the URI for the printer. These\n\
    \      attributes are a subset of the Model attributes and can be encoded\n  \
    \    in the appropriate query syntax for the Directory Service being\n      used\
    \ by the client.\n"
- title: 6. SECURITY CONSIDERATIONS - RATIONALE FOR SECURITY
  contents:
  - "6. SECURITY CONSIDERATIONS - RATIONALE FOR SECURITY\n      Security is an area\
    \ of active work on the Internet. Complete\n      solutions to a wide range of\
    \ security concerns are not yet\n      available. Therefore, in the design of\
    \ IPP, the focus has been on\n      identifying a set of security protocols/features\
    \ that are\n      implemented (or currently implementable) and solve real problems\n\
    \      with distributed printing. The two areas that seem appropriate to\n   \
    \   support are: (1) authorization to use a Printer and (2) secure\n      interaction\
    \ with a printer. The chosen mechanisms are the digest\n      authentication mechanism\
    \ of HTTP 1.1 and SSL3 [SSL] secure\n      communication mechanism.\n"
- title: 7. REFERENCES
  contents:
  - "7. REFERENCES\n   [ipp-iig]  Hastings, T. and C. Manros, \"Internet Printing\n\
    \              Protocol/1.0:Implementer's Guide\", Work in Progress.\n   [RFC2569]\
    \  Herriot, R., Hastings, T., Jacobs, N. and J. Martin,\n              \"Mapping\
    \ between LPD and IPP Protocols\", RFC 2569, April\n              1999.\n   [RFC2566]\
    \  deBry, R., Isaacson, S., Hastings, T., Herriot, R. and P.\n              Powell,\
    \ \"Internet Printing Protocol/1.0: Model and\n              Semantics\", RFC\
    \ 2566, April 1999.\n   [RFC2565]  Herriot, R., Butler, S., Moore, P. and R. Tuner,\
    \ \"Internet\n              Printing Protocol/1.0: Encoding and Transport\", RFC\
    \ 2565,\n              April 1999.\n   [RFC2567]  Wright, D., \"Design Goals for\
    \ an Internet Printing\n              Protocol\", RFC 2567, April 1999.\n   [ISO10175]\
    \ ISO/IEC 10175 \"Document Printing Application (DPA)\", June\n              1996.\n\
    \   [RFC1759]  Smith, R., Wright, F., Hastings, T., Zilles, S. and J.\n      \
    \        Gyllenskog, \"Printer MIB\", RFC 1759, March 1995.\n   [RFC1905]  Case,\
    \ J., McCloghrie, K., Rose, M. and S. Waldbusser,\n              \"Protocol Operations\
    \ for Version 2 of the Simple Network\n              Management Protocol (SNMPv2)\"\
    , RFC 1905, January 1996.\n   [RFC1906]  Case, J., McCloghrie, K., Rose, M. and\
    \ S. Waldbusser,\n              \"Transport Mappings for  Version 2 of the Simple\
    \ Network\n              Management Protocol (SNMPv2)\", RFC 1906, January 1996.\n\
    \   [SSL]      Netscape, The SSL Protocol, Version 3, (Text version\n        \
    \      3.02), November 1996.\n"
- title: 8. AUTHOR'S ADDRESS
  contents:
  - "8. AUTHOR'S ADDRESS\n   Stephen Zilles\n   Adobe Systems Incorporated\n   345\
    \ Park Avenue\n   MailStop W14\n   San Jose, CA 95110-2704\n   Phone: +1 408 536-4766\n\
    \   Fax:   +1 408 537-4042\n   EMail: szilles@adobe.com\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
