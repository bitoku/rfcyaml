- title: __initial_text__
  contents:
  - ' Using the Secure Remote Password (SRP) Protocol for TLS Authentication

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo presents a technique for using the Secure Remote Password\n\
    \   protocol as an authentication method for the Transport Layer Security\n  \
    \ protocol.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  SRP Authentication in TLS  . . . . . . . . . . . . .\
    \ . . . . .  3\n     2.1.  Notation and Terminology . . . . . . . . . . . . .\
    \ . . . .  3\n     2.2.  Handshake Protocol Overview  . . . . . . . . . . . .\
    \ . . .  4\n     2.3.  Text Preparation . . . . . . . . . . . . . . . . . . .\
    \ . .  5\n     2.4.  SRP Verifier Creation  . . . . . . . . . . . . . . . . .\
    \ .  5\n     2.5.  Changes to the Handshake Message Contents  . . . . . . . .\
    \  5\n       2.5.1.  Client Hello . . . . . . . . . . . . . . . . . . . . .  6\n\
    \       2.5.2.  Server Certificate . . . . . . . . . . . . . . . . . .  7\n  \
    \     2.5.3.  Server Key Exchange  . . . . . . . . . . . . . . . . .  7\n    \
    \   2.5.4.  Client Key Exchange  . . . . . . . . . . . . . . . . .  8\n     2.6.\
    \  Calculating the Premaster Secret . . . . . . . . . . . . .  8\n     2.7.  Ciphersuite\
    \ Definitions  . . . . . . . . . . . . . . . . .  9\n     2.8.  New Message Structures\
    \ . . . . . . . . . . . . . . . . . .  9\n       2.8.1.  Client Hello . . . .\
    \ . . . . . . . . . . . . . . . . . 10\n       2.8.2.  Server Key Exchange  .\
    \ . . . . . . . . . . . . . . . . 10\n       2.8.3.  Client Key Exchange  . .\
    \ . . . . . . . . . . . . . . . 11\n     2.9.  Error Alerts . . . . . . . . .\
    \ . . . . . . . . . . . . . . 11\n   3.  Security Considerations  . . . . . .\
    \ . . . . . . . . . . . . . 12\n     3.1.  General Considerations for Implementors\
    \  . . . . . . . . . 12\n     3.2.  Accepting Group Parameters . . . . . . . .\
    \ . . . . . . . . 12\n     3.3.  Protocol Characteristics . . . . . . . . . .\
    \ . . . . . . . 12\n     3.4.  Hash Function Considerations . . . . . . . . .\
    \ . . . . . . 13\n   4.  IANA Considerations  . . . . . . . . . . . . . . . .\
    \ . . . . . 13\n   5.  References . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 14\n     5.1.  Normative References . . . . . . . . . . . . . . . .\
    \ . . . 14\n     5.2.  Informative References . . . . . . . . . . . . . . . .\
    \ . . 15\n   Appendix A.  SRP Group Parameters  . . . . . . . . . . . . . . .\
    \ . 16\n   Appendix B.  SRP Test Vectors  . . . . . . . . . . . . . . . . . .\
    \ 21\n   Appendix C.  Acknowledgements  . . . . . . . . . . . . . . . . . . 22\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   At the time of writing TLS [TLS] uses public key certificates,\
    \ pre-\n   shared keys, or Kerberos for authentication.\n   These authentication\
    \ methods do not seem well suited to certain\n   applications now being adapted\
    \ to use TLS ([IMAP], for example).\n   Given that many protocols are designed\
    \ to use the user name and\n   password method of authentication, being able to\
    \ safely use user\n   names and passwords provides an easier route to additional\
    \ security.\n   SRP ([SRP], [SRP-6]) is an authentication method that allows the\
    \ use\n   of user names and passwords over unencrypted channels without\n   revealing\
    \ the password to an eavesdropper.  SRP also supplies a\n   shared secret at the\
    \ end of the authentication sequence that can be\n   used to generate encryption\
    \ keys.\n   This document describes the use of the SRP authentication method for\n\
    \   TLS.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"\
    SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"\
    OPTIONAL\" in this\n   document are to be interpreted as described in RFC 2119\
    \ [REQ].\n"
- title: 2.  SRP Authentication in TLS
  contents:
  - '2.  SRP Authentication in TLS

    '
- title: 2.1.  Notation and Terminology
  contents:
  - "2.1.  Notation and Terminology\n   The version of SRP used here is sometimes\
    \ referred to as \"SRP-6\"\n   [SRP-6].  This version is a slight improvement\
    \ over \"SRP-3\", which\n   was described in [SRP] and [SRP-RFC].  For convenience,\
    \ this document\n   and [SRP-RFC] include the details necessary to implement SRP-6;\n\
    \   [SRP-6] is cited for informative purposes only.\n   This document uses the\
    \ variable names defined in [SRP-6]:\n      N, g: group parameters (prime and\
    \ generator)\n      s: salt\n      B, b: server's public and private values\n\
    \      A, a: client's public and private values\n      I: user name (aka \"identity\"\
    )\n      P: password\n      v: verifier\n      k: SRP-6 multiplier\n   The | symbol\
    \ indicates string concatenation, the ^ operator is the\n   exponentiation operation,\
    \ and the % operator is the integer remainder\n   operation.\n   Conversion between\
    \ integers and byte-strings assumes the most\n   significant bytes are stored\
    \ first, as per [TLS] and [SRP-RFC].  In\n   the following text, if a conversion\
    \ from integer to byte-string is\n   implicit, the most significant byte in the\
    \ resultant byte-string MUST\n   be non-zero.  If a conversion is explicitly specified\
    \ with the\n   operator PAD(), the integer will first be implicitly converted,\
    \ then\n   the resultant byte-string will be left-padded with zeros (if\n   necessary)\
    \ until its length equals the implicitly-converted length of\n   N.\n"
- title: 2.2.  Handshake Protocol Overview
  contents:
  - "2.2.  Handshake Protocol Overview\n   The advent of [SRP-6] allows the SRP protocol\
    \ to be implemented using\n   the standard sequence of handshake messages defined\
    \ in [TLS].\n   The parameters to various messages are given in the following\n\
    \   diagram.\n   Client                                            Server\n  \
    \ Client Hello (I)        -------->\n                                        \
    \       Server Hello\n                                               Certificate*\n\
    \                                        Server Key Exchange (N, g, s, B)\n  \
    \                         <--------      Server Hello Done\n   Client Key Exchange\
    \ (A) -------->\n   [Change cipher spec]\n   Finished                -------->\n\
    \                                       [Change cipher spec]\n               \
    \            <--------               Finished\n   Application Data        <------->\
    \       Application Data\n   * Indicates an optional message that is not always\
    \ sent.\n                                 Figure 1\n"
- title: 2.3.  Text Preparation
  contents:
  - "2.3.  Text Preparation\n   The user name and password strings SHALL be UTF-8\
    \ encoded Unicode,\n   prepared using the [SASLPREP] profile of [STRINGPREP].\n"
- title: 2.4.  SRP Verifier Creation
  contents:
  - "2.4.  SRP Verifier Creation\n   The verifier is calculated as described in Section\
    \ 3 of [SRP-RFC].\n   We give the algorithm here for convenience.\n   The verifier\
    \ (v) is computed based on the salt (s), user name (I),\n   password (P), and\
    \ group parameters (N, g).  The computation uses the\n   [SHA1] hash algorithm:\n\
    \        x = SHA1(s | SHA1(I | \":\" | P))\n        v = g^x % N\n"
- title: 2.5.  Changes to the Handshake Message Contents
  contents:
  - "2.5.  Changes to the Handshake Message Contents\n   This section describes the\
    \ changes to the TLS handshake message\n   contents when SRP is being used for\
    \ authentication.  The definitions\n   of the new message contents and the on-the-wire\
    \ changes are given in\n   Section 2.8.\n"
- title: 2.5.1.  Client Hello
  contents:
  - "2.5.1.  Client Hello\n   The user name is appended to the standard client hello\
    \ message using\n   the extension mechanism defined in [TLSEXT] (see Section 2.8.1).\n\
    \   This user name extension is henceforth called the \"SRP extension\".\n   The\
    \ following subsections give details of its use.\n"
- title: 2.5.1.1.  Session Resumption
  contents:
  - "2.5.1.1.  Session Resumption\n   When a client attempts to resume a session that\
    \ uses SRP\n   authentication, the client MUST include the SRP extension in the\n\
    \   client hello message, in case the server cannot or will not allow\n   session\
    \ resumption, meaning a full handshake is required.\n   If the server does agree\
    \ to resume an existing session, the server\n   MUST ignore the information in\
    \ the SRP extension of the client hello\n   message, except for its inclusion\
    \ in the finished message hashes.\n   This is to ensure that attackers cannot\
    \ replace the authenticated\n   identity without supplying the proper authentication\
    \ information.\n"
- title: 2.5.1.2.  Missing SRP Extension
  contents:
  - "2.5.1.2.  Missing SRP Extension\n   The client may offer SRP cipher suites in\
    \ the hello message but omit\n   the SRP extension.  If the server would like\
    \ to select an SRP cipher\n   suite in this case, the server SHOULD return a fatal\n\
    \   \"unknown_psk_identity\" alert (see Section 2.9) immediately after\n   processing\
    \ the client hello message.\n   A client receiving this alert MAY choose to reconnect\
    \ and resend the\n   hello message, this time with the SRP extension.  This allows\
    \ the\n   client to advertise that it supports SRP, but not have to prompt the\n\
    \   user for his user name and password, nor expose the user name in the\n   clear,\
    \ unless necessary.\n"
- title: 2.5.1.3.  Unknown SRP         User Name
  contents:
  - "2.5.1.3.  Unknown SRP         User Name\n   If the server doesn't have a verifier\
    \ for the user name in the SRP\n   extension, the server MAY abort the handshake\
    \ with an\n   \"unknown_psk_identity\" alert (see Section 2.9).  Alternatively,\
    \ if\n   the server wishes to hide the fact that this user name doesn't have a\n\
    \   verifier, the server MAY simulate the protocol as if a verifier\n   existed,\
    \ but then reject the client's finished message with a\n   \"bad_record_mac\"\
    \ alert, as if the password was incorrect.\n   To simulate the existence of an\
    \ entry for each user name, the server\n   must consistently return the same salt\
    \ (s) and group (N, g) values\n   for the same user name.  For example, the server\
    \ could store a secret\n   \"seed key\" and then use HMAC-SHA1(seed_key, \"salt\"\
    \ | user_name) to\n   generate the salts [HMAC].  For B, the server can return\
    \ a random\n   value between 1 and N-1 inclusive.  However, the server should\
    \ take\n   care to simulate computation delays.  One way to do this is to\n  \
    \ generate a fake verifier using the \"seed key\" approach, and then\n   proceed\
    \ with the protocol as usual.\n"
- title: 2.5.2.  Server Certificate
  contents:
  - "2.5.2.  Server Certificate\n   The server MUST send a certificate if it agrees\
    \ to an SRP cipher\n   suite that requires the server to provide additional authentication\n\
    \   in the form of a digital signature.  See Section 2.7 for details of\n   which\
    \ cipher suites defined in this document require a server\n   certificate to be\
    \ sent.\n"
- title: 2.5.3.  Server Key Exchange
  contents:
  - "2.5.3.  Server Key Exchange\n   The server key exchange message contains the\
    \ prime (N), the generator\n   (g), and the salt value (s) read from the SRP password\
    \ file based on\n   the user name (I) received in the client hello extension.\n\
    \   The server key exchange message also contains the server's public\n   value\
    \ (B).  The server calculates this value as B = k*v + g^b % N,\n   where b is\
    \ a random number that SHOULD be at least 256 bits in length\n   and k = SHA1(N\
    \ | PAD(g)).\n   If the server has sent a certificate message, the server key\
    \ exchange\n   message MUST be signed.\n   The group parameters (N, g) sent in\
    \ this message MUST have N as a\n   safe prime (a prime of the form N=2q+1, where\
    \ q is also prime).  The\n   integers from 1 to N-1 will form a group under multiplication\
    \ % N,\n   and g MUST be a generator of this group.  In addition, the group\n\
    \   parameters MUST NOT be specially chosen to allow efficient\n   computation\
    \ of discrete logarithms.\n   The SRP group parameters in Appendix A satisfy the\
    \ above\n   requirements, so the client SHOULD accept any parameters from this\n\
    \   appendix that have large enough N values to meet her security\n   requirements.\n\
    \   The client MAY accept other group parameters from the server, if the\n   client\
    \ has reason to believe that these parameters satisfy the above\n   requirements,\
    \ and the parameters have large enough N values.  For\n   example, if the parameters\
    \ transmitted by the server match parameters\n   on a \"known-good\" list, the\
    \ client may choose to accept them.  See\n   Section 3 for additional security\
    \ considerations relevant to the\n   acceptance of the group parameters.\n   Group\
    \ parameters that are not accepted via one of the above methods\n   MUST be rejected\
    \ with an \"insufficient_security\" alert (see\n   Section 2.9).\n   The client\
    \ MUST abort the handshake with an \"illegal_parameter\" alert\n   if B % N =\
    \ 0.\n"
- title: 2.5.4.  Client Key Exchange
  contents:
  - "2.5.4.  Client Key Exchange\n   The client key exchange message carries the client's\
    \ public value\n   (A).  The client calculates this value as A = g^a % N, where\
    \ a is a\n   random number that SHOULD be at least 256 bits in length.\n   The\
    \ server MUST abort the handshake with an \"illegal_parameter\" alert\n   if A\
    \ % N = 0.\n"
- title: 2.6.  Calculating the Premaster Secret
  contents:
  - "2.6.  Calculating the Premaster Secret\n   The premaster secret is calculated\
    \ by the client as follows:\n        I, P = <read from user>\n        N, g, s,\
    \ B = <read from server>\n        a = random()\n        A = g^a % N\n        u\
    \ = SHA1(PAD(A) | PAD(B))\n        k = SHA1(N | PAD(g))\n        x = SHA1(s |\
    \ SHA1(I | \":\" | P))\n        <premaster secret> = (B - (k * g^x)) ^ (a + (u\
    \ * x)) % N\n   The premaster secret is calculated by the server as follows:\n\
    \        N, g, s, v = <read from password file>\n        b = random()\n      \
    \  k = SHA1(N | PAD(g))\n        B = k*v + g^b % N\n        A = <read from client>\n\
    \        u = SHA1(PAD(A) | PAD(B))\n        <premaster secret> = (A * v^u) ^ b\
    \ % N\n   The finished messages perform the same function as the client and\n\
    \   server evidence messages (M1 and M2) specified in [SRP-RFC].  If\n   either\
    \ the client or the server calculates an incorrect premaster\n   secret, the finished\
    \ messages will fail to decrypt properly, and the\n   other party will return\
    \ a \"bad_record_mac\" alert.\n   If a client application receives a \"bad_record_mac\"\
    \ alert when\n   performing an SRP handshake, it should inform the user that the\n\
    \   entered user name and password are incorrect.\n"
- title: 2.7.  Ciphersuite Definitions
  contents:
  - "2.7.  Ciphersuite Definitions\n   The following cipher suites are added by this\
    \ document.  The usage of\n   Advanced Encryption Standard (AES) cipher suites\
    \ is as defined in\n   [AESCIPH].\n      CipherSuite TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA\
    \ = { 0xC0,0x1A };\n      CipherSuite TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA =\
    \ { 0xC0,0x1B };\n      CipherSuite TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = {\
    \ 0xC0,0x1C };\n      CipherSuite TLS_SRP_SHA_WITH_AES_128_CBC_SHA = { 0xC0,0x1D\
    \ };\n      CipherSuite TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = { 0xC0,0x1E };\n\
    \      CipherSuite TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = { 0xC0,0x1F };\n   \
    \   CipherSuite TLS_SRP_SHA_WITH_AES_256_CBC_SHA = { 0xC0,0x20 };\n      CipherSuite\
    \ TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = { 0xC0,0x21 };\n      CipherSuite TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA\
    \ = { 0xC0,0x22 };\n   Cipher suites that begin with TLS_SRP_SHA_RSA or TLS_SRP_SHA_DSS\n\
    \   require the server to send a certificate message containing a\n   certificate\
    \ with the specified type of public key, and to sign the\n   server key exchange\
    \ message using a matching private key.\n   Cipher suites that do not include\
    \ a digital signature algorithm\n   identifier assume that the server is authenticated\
    \ by its possession\n   of the SRP verifier.\n   Implementations conforming to\
    \ this specification MUST implement the\n   TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA\
    \ cipher suite, SHOULD implement the\n   TLS_SRP_SHA_WITH_AES_128_CBC_SHA and\
    \ TLS_SRP_SHA_WITH_AES_256_CBC_SHA\n   cipher suites, and MAY implement the remaining\
    \ cipher suites.\n"
- title: 2.8.  New Message Structures
  contents:
  - "2.8.  New Message Structures\n   This section shows the structure of the messages\
    \ passed during a\n   handshake that uses SRP for authentication.  The representation\n\
    \   language used is the same as that used in [TLS].\n"
- title: 2.8.1.  Client Hello
  contents:
  - "2.8.1.  Client Hello\n   A new extension \"srp\", with value 12, has been added\
    \ to the\n   enumerated ExtensionType defined in [TLSEXT].  This value MUST be\n\
    \   used as the extension number for the SRP extension.\n   The \"extension_data\"\
    \ field of the SRP extension SHALL contain:\n        opaque srp_I<1..2^8-1>;\n\
    \   where srp_I is the user name, encoded per Section 2.3.\n"
- title: 2.8.2.  Server Key Exchange
  contents:
  - "2.8.2.  Server Key Exchange\n   A new value, \"srp\", has been added to the enumerated\n\
    \   KeyExchangeAlgorithm originally defined in [TLS].\n   When the value of KeyExchangeAlgorithm\
    \ is set to \"srp\", the server's\n   SRP parameters are sent in the server key\
    \ exchange message, encoded\n   in a ServerSRPParams structure.\n   If a certificate\
    \ is sent to the client, the server key exchange\n   message must be signed.\n\
    \        enum { rsa, diffie_hellman, srp } KeyExchangeAlgorithm;\n        struct\
    \ {\n           select (KeyExchangeAlgorithm) {\n              case diffie_hellman:\n\
    \                 ServerDHParams params;\n                 Signature signed_params;\n\
    \              case rsa:\n                 ServerRSAParams params;\n         \
    \        Signature signed_params;\n              case srp:   /* new entry */\n\
    \                 ServerSRPParams params;\n                 Signature signed_params;\n\
    \           };\n        } ServerKeyExchange;\n        struct {\n           opaque\
    \ srp_N<1..2^16-1>;\n           opaque srp_g<1..2^16-1>;\n           opaque srp_s<1..2^8-1>;\n\
    \           opaque srp_B<1..2^16-1>;\n        } ServerSRPParams;     /* SRP parameters\
    \ */\n"
- title: 2.8.3.  Client Key Exchange
  contents:
  - "2.8.3.  Client Key Exchange\n   When the value of KeyExchangeAlgorithm is set\
    \ to \"srp\", the client's\n   public value (A) is sent in the client key exchange\
    \ message, encoded\n   in a ClientSRPPublic structure.\n        struct {\n   \
    \        select (KeyExchangeAlgorithm) {\n              case rsa: EncryptedPreMasterSecret;\n\
    \              case diffie_hellman: ClientDiffieHellmanPublic;\n             \
    \ case srp: ClientSRPPublic;   /* new entry */\n           } exchange_keys;\n\
    \        } ClientKeyExchange;\n        struct {\n           opaque srp_A<1..2^16-1>;\n\
    \        } ClientSRPPublic;\n"
- title: 2.9.  Error Alerts
  contents:
  - "2.9.  Error Alerts\n   This document introduces four new uses of alerts:\n  \
    \ o  \"unknown_psk_identity\" (115) - this alert MAY be sent by a server\n   \
    \   that would like to select an offered SRP cipher suite, if the SRP\n      extension\
    \ is absent from the client's hello message.  This alert\n      is always fatal.\
    \  See Section 2.5.1.2 for details.\n   o  \"unknown_psk_identity\" (115) - this\
    \ alert MAY be sent by a server\n      that receives an unknown user name.  This\
    \ alert is always fatal.\n      See Section 2.5.1.3 for details.\n   o  \"insufficient_security\"\
    \ (71) - this alert MUST be sent by a client\n      that receives unknown or untrusted\
    \ (N, g) values.  This alert is\n      always fatal.  See Section 2.5.3 for details.\n\
    \   o  \"illegal_parameter\" (47) - this alert MUST be sent by a client or\n \
    \     server that receives a key exchange message with A % N = 0 or B %\n    \
    \  N = 0.  This alert is always fatal.  See Section 2.5.3 and\n      Section 2.5.4\
    \ and for details.\n   The \"insufficient_security\" and \"illegal_parameter\"\
    \ alerts are\n   defined in [TLS].  The \"unknown_psk_identity\" alert is defined\
    \ in\n   [PSK].\n"
- title: 3.  Security Considerations
  contents:
  - '3.  Security Considerations

    '
- title: 3.1.  General Considerations for Implementors
  contents:
  - "3.1.  General Considerations for Implementors\n   The checks described in Section\
    \ 2.5.3 and Section 2.5.4 on the\n   received values for A and B are CRUCIAL for\
    \ security and MUST be\n   performed.\n   The private values a and b SHOULD be\
    \ at least 256-bit random numbers,\n   to give approximately 128 bits of security\
    \ against certain methods of\n   calculating discrete logarithms.  See [TLS],\
    \ Section D.1, for advice\n   on choosing cryptographically secure random numbers.\n"
- title: 3.2.  Accepting Group Parameters
  contents:
  - "3.2.  Accepting Group Parameters\n   An attacker who could calculate discrete\
    \ logarithms % N could\n   compromise user passwords, and could also compromise\
    \ the\n   confidentiality and integrity of TLS sessions.  Clients MUST ensure\n\
    \   that the received parameter N is large enough to make calculating\n   discrete\
    \ logarithms computationally infeasible.\n   An attacker may try to send a prime\
    \ value N that is large enough to\n   be secure, but that has a special form for\
    \ which the attacker can\n   more easily compute discrete logarithms (e.g., using\
    \ the algorithm\n   discussed in [TRAPDOOR]).  If the client executes the protocol\
    \ using\n   such a prime, the client's password could be compromised.  Because\
    \ of\n   the difficulty of checking for such primes in real time, clients\n  \
    \ SHOULD only accept group parameters that come from a trusted source,\n   such\
    \ as those listed in Appendix A, or parameters configured locally\n   by a trusted\
    \ administrator.\n"
- title: 3.3.  Protocol Characteristics
  contents:
  - "3.3.  Protocol Characteristics\n   If an attacker learns a user's SRP verifier\
    \ (e.g., by gaining access\n   to a server's password file), the attacker can\
    \ masquerade as the real\n   server to that user, and can also attempt a dictionary\
    \ attack to\n   recover that user's password.\n   An attacker could repeatedly\
    \ contact an SRP server and try to guess a\n   legitimate user's password.  Servers\
    \ SHOULD take steps to prevent\n   this, such as limiting the rate of authentication\
    \ attempts from a\n   particular IP address or against a particular user name.\n\
    \   The client's user name is sent in the clear in the Client Hello\n   message.\
    \  To avoid sending the user name in the clear, the client\n   could first open\
    \ a conventional anonymous or server-authenticated\n   connection, then renegotiate\
    \ an SRP-authenticated connection with the\n   handshake protected by the first\
    \ connection.\n   If the client receives an \"unknown_psk_identity\" alert in\
    \ response to\n   a client hello, this alert may have been inserted by an attacker.\n\
    \   The client should be careful about making any decisions, or forming\n   any\
    \ conclusions, based on receiving this alert.\n   It is possible to choose a (user\
    \ name, password) pair such that the\n   resulting verifier will also match other,\
    \ related, (user name,\n   password) pairs.  Thus, anyone using verifiers should\
    \ be careful not\n   to assume that only a single (user name, password) pair matches\
    \ the\n   verifier.\n"
- title: 3.4.  Hash Function Considerations
  contents:
  - "3.4.  Hash Function Considerations\n   This protocol uses SHA-1 to derive several\
    \ values:\n   o  u prevents an attacker who learns a user's verifier from being\n\
    \      able to authenticate as that user (see [SRP-6]).\n   o  k prevents an attacker\
    \ who can select group parameters from being\n      able to launch a 2-for-1 guessing\
    \ attack (see [SRP-6]).\n   o  x contains the user's password mixed with a salt.\n\
    \   Cryptanalytic attacks against SHA-1 that only affect its collision-\n   resistance\
    \ do not compromise these uses.  If attacks against SHA-1\n   are discovered that\
    \ do compromise these uses, new cipher suites\n   should be specified to use a\
    \ different hash algorithm.\n   In this situation, clients could send a Client\
    \ Hello message\n   containing new and/or old SRP cipher suites along with a single\
    \ SRP\n   extension.  The server could then select the appropriate cipher suite\n\
    \   based on the type of verifier it has stored for this user.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   This document defines a new TLS extension \"srp\"\
    \ (value 12), whose\n   value has been assigned from the TLS ExtensionType Registry\
    \ defined\n   in [TLSEXT].\n   This document defines nine new cipher suites, whose\
    \ values have been\n   assigned from the TLS Ciphersuite registry defined in [TLS].\n\
    \      CipherSuite TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA = { 0xC0,0x1A };\n      CipherSuite\
    \ TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = { 0xC0,0x1B };\n      CipherSuite TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA\
    \ = { 0xC0,0x1C };\n      CipherSuite TLS_SRP_SHA_WITH_AES_128_CBC_SHA = { 0xC0,0x1D\
    \ };\n      CipherSuite TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = { 0xC0,0x1E };\n\
    \      CipherSuite TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = { 0xC0,0x1F };\n   \
    \   CipherSuite TLS_SRP_SHA_WITH_AES_256_CBC_SHA = { 0xC0,0x20 };\n      CipherSuite\
    \ TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = { 0xC0,0x21 };\n      CipherSuite TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA\
    \ = { 0xC0,0x22 };\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative References
  contents:
  - "5.1.  Normative References\n   [REQ]         Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [TLS]         Dierks, T. and E. Rescorla, \"The TLS Protocol\
    \ version\n                 1.1\", RFC 4346, April 2006.\n   [TLSEXT]      Blake-Wilson,\
    \ S., Nystrom, M., Hopwood, D., Mikkelsen,\n                 J., and T. Wright,\
    \ \"Transport Layer Security (TLS)\n                 Extensions\", RFC 4366, April\
    \ 2006.\n   [STRINGPREP]  Hoffman, P. and M. Blanchet, \"Preparation of\n    \
    \             Internationalized Strings (\"stringprep\")\", RFC 3454,\n      \
    \           December 2002.\n   [SASLPREP]    Zeilenga, K., \"SASLprep: Stringprep\
    \ profile for user\n                 names and passwords\", RFC 4013, February\
    \ 2005.\n   [SRP-RFC]     Wu, T., \"The SRP Authentication and Key Exchange\n\
    \                 System\", RFC 2945, September 2000.\n   [SHA1]        \"Secure\
    \ Hash Standard (SHS)\", FIPS 180-2, August 2002.\n   [HMAC]        Krawczyk,\
    \ H., Bellare, M., and R. Canetti, \"HMAC:\n                 Keyed-Hashing for\
    \ Message Authentication\", RFC 2104,\n                 February 1997.\n   [AESCIPH]\
    \     Chown, P., \"Advanced Encryption Standard (AES)\n                 Ciphersuites\
    \ for Transport Layer Security (TLS)\",\n                 RFC 3268, June 2002.\n\
    \   [PSK]         Eronen, P. and H. Tschofenig, \"Pre-Shared Key\n           \
    \      Ciphersuites for Transport Layer Security (TLS)\",\n                 RFC\
    \ 4279, December 2005.\n   [MODP]        Kivinen, T. and M. Kojo, \"More Modular\
    \ Exponentiation\n                 (MODP) Diffie-Hellman groups for Internet Key\
    \ Exchange\n                 (IKE)\", RFC 3526, May 2003.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [IMAP]        Newman, C., \"Using TLS with IMAP,\
    \ POP3 and ACAP\",\n                 RFC 2595, June 1999.\n   [SRP-6]       Wu,\
    \ T., \"SRP-6: Improvements and Refinements to the\n                 Secure Remote\
    \ Password Protocol\", Submission to IEEE\n                 P1363.2 working group,\
    \ October 2002,\n                 <http://grouper.ieee.org/groups/1363/>.\n  \
    \ [SRP]         Wu, T., \"The Secure Remote Password Protocol\",\n           \
    \      Proceedings of the 1998 Internet Society Network and\n                \
    \ Distributed System Security Symposium pp. 97-111,\n                 March 1998.\n\
    \   [TRAPDOOR]    Gordon, D., \"Designing and Detecting Trapdoors for\n      \
    \           Discrete Log Cryptosystems\", Springer-Verlag Advances\n         \
    \        in Cryptology - Crypto '92, pp. 66-75, 1993.\n"
- title: Appendix A.  SRP Group Parameters
  contents:
  - "Appendix A.  SRP Group Parameters\n   The 1024-, 1536-, and 2048-bit groups are\
    \ taken from software\n   developed by Tom Wu and Eugene Jhong for the Stanford\
    \ SRP\n   distribution, and subsequently proven to be prime.  The larger primes\n\
    \   are taken from [MODP], but generators have been calculated that are\n   primitive\
    \ roots of N, unlike the generators in [MODP].\n   The 1024-bit and 1536-bit groups\
    \ MUST be supported.\n   1.  1024-bit Group\n       The hexadecimal value for\
    \ the prime is:\n          EEAF0AB9 ADB38DD6 9C33F80A FA8FC5E8 60726187 75FF3C0B\
    \ 9EA2314C\n          9C256576 D674DF74 96EA81D3 383B4813 D692C6E0 E0D5D8E2 50B98BE4\n\
    \          8E495C1D 6089DAD1 5DC7D7B4 6154D6B6 CE8EF4AD 69B15D49 82559B29\n  \
    \        7BCF1885 C529F566 660E57EC 68EDBC3C 05726CC0 2FD4CBF4 976EAA9A\n    \
    \      FD5138FE 8376435B 9FC61D2F C0EB06E3\n       The generator is: 2.\n   2.\
    \  1536-bit Group\n       The hexadecimal value for the prime is:\n          9DEF3CAF\
    \ B939277A B1F12A86 17A47BBB DBA51DF4 99AC4C80 BEEEA961\n          4B19CC4D 5F4F5F55\
    \ 6E27CBDE 51C6A94B E4607A29 1558903B A0D0F843\n          80B655BB 9A22E8DC DF028A7C\
    \ EC67F0D0 8134B1C8 B9798914 9B609E0B\n          E3BAB63D 47548381 DBC5B1FC 764E3F4B\
    \ 53DD9DA1 158BFD3E 2B9C8CF5\n          6EDF0195 39349627 DB2FD53D 24B7C486 65772E43\
    \ 7D6C7F8C E442734A\n          F7CCB7AE 837C264A E3A9BEB8 7F8A2FE9 B8B5292E 5A021FFF\
    \ 5E91479E\n          8CE7A28C 2442C6F3 15180F93 499A234D CF76E3FE D135F9BB\n\
    \       The generator is: 2.\n   3.  2048-bit Group\n       The hexadecimal value\
    \ for the prime is:\n          AC6BDB41 324A9A9B F166DE5E 1389582F AF72B665 1987EE07\
    \ FC319294\n          3DB56050 A37329CB B4A099ED 8193E075 7767A13D D52312AB 4B03310D\n\
    \          CD7F48A9 DA04FD50 E8083969 EDB767B0 CF609517 9A163AB3 661A05FB\n  \
    \        D5FAAAE8 2918A996 2F0B93B8 55F97993 EC975EEA A80D740A DBF4FF74\n    \
    \      7359D041 D5C33EA7 1D281E44 6B14773B CA97B43A 23FB8016 76BD207A\n      \
    \    436C6481 F1D2B907 8717461A 5B9D32E6 88F87748 544523B5 24B0D57D\n        \
    \  5EA77A27 75D2ECFA 032CFBDB F52FB378 61602790 04E57AE6 AF874E73\n          03CE5329\
    \ 9CCC041C 7BC308D8 2A5698F3 A8D0C382 71AE35F8 E9DBFBB6\n          94B5C803 D89F7AE4\
    \ 35DE236D 525F5475 9B65E372 FCD68EF2 0FA7111F\n          9E4AFF73\n       The\
    \ generator is: 2.\n   4.  3072-bit Group\n       This prime is: 2^3072 - 2^3008\
    \ - 1 + 2^64 * { [2^2942 pi] +\n       1690314 }\n       Its hexadecimal value\
    \ is:\n          FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1 29024E08\n\
    \          8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD EF9519B3 CD3A431B\n  \
    \        302B0A6D F25F1437 4FE1356D 6D51C245 E485B576 625E7EC6 F44C42E9\n    \
    \      A637ED6B 0BFF5CB6 F406B7ED EE386BFB 5A899FA5 AE9F2411 7C4B1FE6\n      \
    \    49286651 ECE45B3D C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8\n        \
    \  FD24CF5F 83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D\n          670C354E\
    \ 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3B E39E772C\n          180E8603 9B2783A2\
    \ EC07A28F B5C55DF0 6F4C52C9 DE2BCBF6 95581718\n          3995497C EA956AE5 15D22618\
    \ 98FA0510 15728E5A 8AAAC42D AD33170D\n          04507A33 A85521AB DF1CBA64 ECFB8504\
    \ 58DBEF0A 8AEA7157 5D060C7D\n          B3970F85 A6E1E4C7 ABF5AE8C DB0933D7 1E8C94E0\
    \ 4A25619D CEE3D226\n          1AD2EE6B F12FFA06 D98A0864 D8760273 3EC86A64 521F2B18\
    \ 177B200C\n          BBE11757 7A615D6C 770988C0 BAD946E2 08E24FA0 74E5AB31 43DB5BFC\n\
    \          E0FD108E 4B82D120 A93AD2CA FFFFFFFF FFFFFFFF\n       The generator\
    \ is: 5.\n   5.  4096-bit Group\n       This prime is: 2^4096 - 2^4032 - 1 + 2^64\
    \ * { [2^3966 pi] +\n       240904 }\n       Its hexadecimal value is:\n     \
    \     FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1 29024E08\n       \
    \   8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD EF9519B3 CD3A431B\n         \
    \ 302B0A6D F25F1437 4FE1356D 6D51C245 E485B576 625E7EC6 F44C42E9\n          A637ED6B\
    \ 0BFF5CB6 F406B7ED EE386BFB 5A899FA5 AE9F2411 7C4B1FE6\n          49286651 ECE45B3D\
    \ C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8\n          FD24CF5F 83655D23 DCA3AD96\
    \ 1C62F356 208552BB 9ED52907 7096966D\n          670C354E 4ABC9804 F1746C08 CA18217C\
    \ 32905E46 2E36CE3B E39E772C\n          180E8603 9B2783A2 EC07A28F B5C55DF0 6F4C52C9\
    \ DE2BCBF6 95581718\n          3995497C EA956AE5 15D22618 98FA0510 15728E5A 8AAAC42D\
    \ AD33170D\n          04507A33 A85521AB DF1CBA64 ECFB8504 58DBEF0A 8AEA7157 5D060C7D\n\
    \          B3970F85 A6E1E4C7 ABF5AE8C DB0933D7 1E8C94E0 4A25619D CEE3D226\n  \
    \        1AD2EE6B F12FFA06 D98A0864 D8760273 3EC86A64 521F2B18 177B200C\n    \
    \      BBE11757 7A615D6C 770988C0 BAD946E2 08E24FA0 74E5AB31 43DB5BFC\n      \
    \    E0FD108E 4B82D120 A9210801 1A723C12 A787E6D7 88719A10 BDBA5B26\n        \
    \  99C32718 6AF4E23C 1A946834 B6150BDA 2583E9CA 2AD44CE8 DBBBC2DB\n          04DE8EF9\
    \ 2E8EFC14 1FBECAA6 287C5947 4E6BC05D 99B2964F A090C3A2\n          233BA186 515BE7ED\
    \ 1F612970 CEE2D7AF B81BDD76 2170481C D0069127\n          D5B05AA9 93B4EA98 8D8FDDC1\
    \ 86FFB7DC 90A6C08F 4DF435C9 34063199\n          FFFFFFFF FFFFFFFF\n       The\
    \ generator is: 5.\n   6.  6144-bit Group\n       This prime is: 2^6144 - 2^6080\
    \ - 1 + 2^64 * { [2^6014 pi] +\n       929484 }\n       Its hexadecimal value\
    \ is:\n          FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1 29024E08\n\
    \          8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD EF9519B3 CD3A431B\n  \
    \        302B0A6D F25F1437 4FE1356D 6D51C245 E485B576 625E7EC6 F44C42E9\n    \
    \      A637ED6B 0BFF5CB6 F406B7ED EE386BFB 5A899FA5 AE9F2411 7C4B1FE6\n      \
    \    49286651 ECE45B3D C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8\n        \
    \  FD24CF5F 83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D\n          670C354E\
    \ 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3B E39E772C\n          180E8603 9B2783A2\
    \ EC07A28F B5C55DF0 6F4C52C9 DE2BCBF6 95581718\n          3995497C EA956AE5 15D22618\
    \ 98FA0510 15728E5A 8AAAC42D AD33170D\n          04507A33 A85521AB DF1CBA64 ECFB8504\
    \ 58DBEF0A 8AEA7157 5D060C7D\n          B3970F85 A6E1E4C7 ABF5AE8C DB0933D7 1E8C94E0\
    \ 4A25619D CEE3D226\n          1AD2EE6B F12FFA06 D98A0864 D8760273 3EC86A64 521F2B18\
    \ 177B200C\n          BBE11757 7A615D6C 770988C0 BAD946E2 08E24FA0 74E5AB31 43DB5BFC\n\
    \          E0FD108E 4B82D120 A9210801 1A723C12 A787E6D7 88719A10 BDBA5B26\n  \
    \        99C32718 6AF4E23C 1A946834 B6150BDA 2583E9CA 2AD44CE8 DBBBC2DB\n    \
    \      04DE8EF9 2E8EFC14 1FBECAA6 287C5947 4E6BC05D 99B2964F A090C3A2\n      \
    \    233BA186 515BE7ED 1F612970 CEE2D7AF B81BDD76 2170481C D0069127\n        \
    \  D5B05AA9 93B4EA98 8D8FDDC1 86FFB7DC 90A6C08F 4DF435C9 34028492\n          36C3FAB4\
    \ D27C7026 C1D4DCB2 602646DE C9751E76 3DBA37BD F8FF9406\n          AD9E530E E5DB382F\
    \ 413001AE B06A53ED 9027D831 179727B0 865A8918\n          DA3EDBEB CF9B14ED 44CE6CBA\
    \ CED4BB1B DB7F1447 E6CC254B 33205151\n          2BD7AF42 6FB8F401 378CD2BF 5983CA01\
    \ C64B92EC F032EA15 D1721D03\n          F482D7CE 6E74FEF6 D55E702F 46980C82 B5A84031\
    \ 900B1C9E 59E7C97F\n          BEC7E8F3 23A97A7E 36CC88BE 0F1D45B7 FF585AC5 4BD407B2\
    \ 2B4154AA\n          CC8F6D7E BF48E1D8 14CC5ED2 0F8037E0 A79715EE F29BE328 06A1D58B\n\
    \          B7C5DA76 F550AA3D 8A1FBFF0 EB19CCB1 A313D55C DA56C9EC 2EF29632\n  \
    \        387FE8D7 6E3C0468 043E8F66 3F4860EE 12BF2D5B 0B7474D6 E694F91E\n    \
    \      6DCC4024 FFFFFFFF FFFFFFFF\n       The generator is: 5.\n   7.  8192-bit\
    \ Group\n       This prime is: 2^8192 - 2^8128 - 1 + 2^64 * { [2^8062 pi] +\n\
    \       4743158 }\n       Its hexadecimal value is:\n          FFFFFFFF FFFFFFFF\
    \ C90FDAA2 2168C234 C4C6628B 80DC1CD1 29024E08\n          8A67CC74 020BBEA6 3B139B22\
    \ 514A0879 8E3404DD EF9519B3 CD3A431B\n          302B0A6D F25F1437 4FE1356D 6D51C245\
    \ E485B576 625E7EC6 F44C42E9\n          A637ED6B 0BFF5CB6 F406B7ED EE386BFB 5A899FA5\
    \ AE9F2411 7C4B1FE6\n          49286651 ECE45B3D C2007CB8 A163BF05 98DA4836 1C55D39A\
    \ 69163FA8\n          FD24CF5F 83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D\n\
    \          670C354E 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3B E39E772C\n  \
    \        180E8603 9B2783A2 EC07A28F B5C55DF0 6F4C52C9 DE2BCBF6 95581718\n    \
    \      3995497C EA956AE5 15D22618 98FA0510 15728E5A 8AAAC42D AD33170D\n      \
    \    04507A33 A85521AB DF1CBA64 ECFB8504 58DBEF0A 8AEA7157 5D060C7D\n        \
    \  B3970F85 A6E1E4C7 ABF5AE8C DB0933D7 1E8C94E0 4A25619D CEE3D226\n          1AD2EE6B\
    \ F12FFA06 D98A0864 D8760273 3EC86A64 521F2B18 177B200C\n          BBE11757 7A615D6C\
    \ 770988C0 BAD946E2 08E24FA0 74E5AB31 43DB5BFC\n          E0FD108E 4B82D120 A9210801\
    \ 1A723C12 A787E6D7 88719A10 BDBA5B26\n          99C32718 6AF4E23C 1A946834 B6150BDA\
    \ 2583E9CA 2AD44CE8 DBBBC2DB\n          04DE8EF9 2E8EFC14 1FBECAA6 287C5947 4E6BC05D\
    \ 99B2964F A090C3A2\n          233BA186 515BE7ED 1F612970 CEE2D7AF B81BDD76 2170481C\
    \ D0069127\n          D5B05AA9 93B4EA98 8D8FDDC1 86FFB7DC 90A6C08F 4DF435C9 34028492\n\
    \          36C3FAB4 D27C7026 C1D4DCB2 602646DE C9751E76 3DBA37BD F8FF9406\n  \
    \        AD9E530E E5DB382F 413001AE B06A53ED 9027D831 179727B0 865A8918\n    \
    \      DA3EDBEB CF9B14ED 44CE6CBA CED4BB1B DB7F1447 E6CC254B 33205151\n      \
    \    2BD7AF42 6FB8F401 378CD2BF 5983CA01 C64B92EC F032EA15 D1721D03\n        \
    \  F482D7CE 6E74FEF6 D55E702F 46980C82 B5A84031 900B1C9E 59E7C97F\n          BEC7E8F3\
    \ 23A97A7E 36CC88BE 0F1D45B7 FF585AC5 4BD407B2 2B4154AA\n          CC8F6D7E BF48E1D8\
    \ 14CC5ED2 0F8037E0 A79715EE F29BE328 06A1D58B\n          B7C5DA76 F550AA3D 8A1FBFF0\
    \ EB19CCB1 A313D55C DA56C9EC 2EF29632\n          387FE8D7 6E3C0468 043E8F66 3F4860EE\
    \ 12BF2D5B 0B7474D6 E694F91E\n          6DBE1159 74A3926F 12FEE5E4 38777CB6 A932DF8C\
    \ D8BEC4D0 73B931BA\n          3BC832B6 8D9DD300 741FA7BF 8AFC47ED 2576F693 6BA42466\
    \ 3AAB639C\n          5AE4F568 3423B474 2BF1C978 238F16CB E39D652D E3FDB8BE FC848AD9\n\
    \          22222E04 A4037C07 13EB57A8 1A23F0C7 3473FC64 6CEA306B 4BCBC886\n  \
    \        2F8385DD FA9D4B7F A2C087E8 79683303 ED5BDD3A 062B3CF5 B3A278A6\n    \
    \      6D2A13F8 3F44F82D DF310EE0 74AB6A36 4597E899 A0255DC1 64F31CC5\n      \
    \    0846851D F9AB4819 5DED7EA1 B1D510BD 7EE74D73 FAF36BC3 1ECFA268\n        \
    \  359046F4 EB879F92 4009438B 481C6CD7 889A002E D5EE382B C9190DA6\n          FC026E47\
    \ 9558E447 5677E9AA 9E3050E2 765694DF C81F56E8 80B96E71\n          60C980DD 98EDD3DF\
    \ FFFFFFFF FFFFFFFF\n       The generator is: 19 (decimal).\n"
- title: Appendix B.  SRP Test Vectors
  contents:
  - "Appendix B.  SRP Test Vectors\n   The following test vectors demonstrate calculation\
    \ of the verifier\n   and premaster secret.\n      I = \"alice\"\n      P = \"\
    password123\"\n      s = BEB25379 D1A8581E B5A72767 3A2441EE\n      N, g = <1024-bit\
    \ parameters from Appendix A>\n      k = 7556AA04 5AEF2CDD 07ABAF0F 665C3E81 8913186F\n\
    \      x = 94B7555A ABE9127C C58CCF49 93DB6CF8 4D16C124\n      v =\n         7E273DE8\
    \ 696FFC4F 4E337D05 B4B375BE B0DDE156 9E8FA00A 9886D812\n         9BADA1F1 822223CA\
    \ 1A605B53 0E379BA4 729FDC59 F105B478 7E5186F5\n         C671085A 1447B52A 48CF1970\
    \ B4FB6F84 00BBF4CE BFBB1681 52E08AB5\n         EA53D15C 1AFF87B2 B9DA6E04 E058AD51\
    \ CC72BFC9 033B564E 26480D78\n         E955A5E2 9E7AB245 DB2BE315 E2099AFB\n \
    \     a =\n         60975527 035CF2AD 1989806F 0407210B C81EDC04 E2762A56 AFD529DD\n\
    \         DA2D4393\n      b =\n         E487CB59 D31AC550 471E81F0 0F6928E0 1DDA08E9\
    \ 74A004F4 9E61F5D1\n         05284D20\n      A =\n         61D5E490 F6F1B795\
    \ 47B0704C 436F523D D0E560F0 C64115BB 72557EC4\n         4352E890 3211C046 92272D8B\
    \ 2D1A5358 A2CF1B6E 0BFCF99F 921530EC\n         8E393561 79EAE45E 42BA92AE ACED8251\
    \ 71E1E8B9 AF6D9C03 E1327F44\n         BE087EF0 6530E69F 66615261 EEF54073 CA11CF58\
    \ 58F0EDFD FE15EFEA\n         B349EF5D 76988A36 72FAC47B 0769447B\n      B =\n\
    \         BD0C6151 2C692C0C B6D041FA 01BB152D 4916A1E7 7AF46AE1 05393011\n   \
    \      BAF38964 DC46A067 0DD125B9 5A981652 236F99D9 B681CBF8 7837EC99\n      \
    \   6C6DA044 53728610 D0C6DDB5 8B318885 D7D82C7F 8DEB75CE 7BD4FBAA\n         37089E6F\
    \ 9C6059F3 88838E7A 00030B33 1EB76840 910440B1 B27AAEAE\n         EB4012B7 D7665238\
    \ A8E3FB00 4B117B58\n      u =\n         CE38B959 3487DA98 554ED47D 70A7AE5F 462EF019\n\
    \      <premaster secret> =\n         B0DC82BA BCF30674 AE450C02 87745E79 90A3381F\
    \ 63B387AA F271A10D\n         233861E3 59B48220 F7C4693C 9AE12B0A 6F67809F 0876E2D0\
    \ 13800D6C\n         41BB59B6 D5979B5C 00A172B4 A2A5903A 0BDCAF8A 709585EB 2AFAFA8F\n\
    \         3499B200 210DCC1F 10EB3394 3CD67FC8 8A2F39A4 BE5BEC4E C0A3212D\n   \
    \      C346D7E4 74B29EDE 8A469FFE CA686E5A\n"
- title: Appendix C.  Acknowledgements
  contents:
  - "Appendix C.  Acknowledgements\n   Thanks to all on the IETF TLS mailing list\
    \ for ideas and analysis.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   David Taylor\n   Independent\n   EMail: dtaylor@gnutls.org\n\
    \   Tom Wu\n   Cisco\n   EMail: thomwu@cisco.com\n   Nikos Mavrogiannopoulos\n\
    \   Independent\n   EMail: nmav@gnutls.org\n   URI:   http://www.gnutls.org/\n\
    \   Trevor Perrin\n   Independent\n   EMail: trevp@trevp.net\n   URI:   http://trevp.net/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
