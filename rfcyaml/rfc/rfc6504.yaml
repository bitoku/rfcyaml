- title: __initial_text__
  contents:
  - "         Centralized Conferencing Manipulation Protocol (CCMP)\n            \
    \               Call Flow Examples\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides detailed call flows for the scenarios\n \
    \  documented in the Framework for Centralized Conferencing (XCON) (RFC\n   5239)\
    \ and in the XCON scenarios (RFC 4597).  The call flows document\n   the use of\
    \ the interface between a conference control client and a\n   conference control\
    \ server using the Centralized Conferencing\n   Manipulation Protocol (CCMP) (RFC\
    \ 6503).  The objective is to provide\n   detailed examples for reference by both\
    \ protocol researchers and\n   developers.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6504.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Overview ........................................................4\n   4.\
    \ Working with CCMP ...............................................4\n      4.1.\
    \ CCMP and the Data Model ....................................5\n      4.2. Using\
    \ HTTP/TLS as a Transport ..............................6\n      4.3. Conference\
    \ Notifications ..................................10\n   5. Conference Creation\
    \ ............................................11\n      5.1. Basic Conference\
    \ Creation .................................12\n      5.2. Conference Creation\
    \ Using Blueprints ......................16\n      5.3. Conference Creation Using\
    \ User-Provided Conference\n           Information ...............................................23\n\
    \      5.4. Cloning an Existing Conference ............................28\n  \
    \ 6. Conference Users Scenarios and Examples ........................31\n    \
    \  6.1. Adding a Party ............................................32\n      6.2.\
    \ Muting a Party ............................................35\n      6.3. Conference\
    \ Announcements and Recordings ...................38\n      6.4. Monitoring for\
    \ DTMF .......................................41\n      6.5. Entering a Password-Protected\
    \ Conference ..................42\n   7. Sidebars Scenarios and Examples ................................44\n\
    \      7.1. Internal Sidebar ..........................................45\n  \
    \    7.2. External Sidebar ..........................................54\n    \
    \  7.3. Private Messages ..........................................60\n      7.4.\
    \ Observing and Coaching ....................................64\n   8. Removing\
    \ Participants and Deleting Conferences .................71\n      8.1. Removing\
    \ a Party ..........................................71\n      8.2. Deleting a\
    \ Conference .....................................74\n   9. Security Considerations\
    \ ........................................75\n   10. Acknowledgements ..............................................76\n\
    \   11. References ....................................................76\n  \
    \    11.1. Normative References .....................................76\n    \
    \  11.2. Informative References ...................................76\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides detailed call flows for the scenarios\n\
    \   documented in the Framework for Centralized Conferencing (XCON)\n   [RFC5239]\
    \ and in the XCON scenarios [RFC4597].  The XCON scenarios\n   describe a broad\
    \ range of use cases taking advantage of the advanced\n   conferencing capabilities\
    \ provided by a system realization of the\n   XCON framework.  The call flows\
    \ document the use of the interface\n   between a conference control client and\
    \ a conference control server\n   using the Centralized Conferencing Manipulation\
    \ Protocol (CCMP)\n   [RFC6503].\n   Due to the broad range of functionality provided\
    \ by the XCON\n   framework and the flexibility of the CCMP messaging, these call\
    \ flows\n   should not be considered inclusive of all the functionality that can\n\
    \   provided by the XCON framework and protocol implementations.  These\n   flows\
    \ represent a sample to provide an overview of the feature-rich\n   capabilities\
    \ of the XCON framework and CCMP messaging for protocol\n   developers, software\
    \ developers, and researchers.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document uses the same terminology as found in the Architectural\n\
    \   Framework for Media Server Control [RFC5567] and in the Media Control\n  \
    \ Channel Framework Call Flow Examples [CALL-FLOWS], with the following\n   terms\
    \ and abbreviations used in the call flows.  Also, note that the\n   term \"call\
    \ flows\" is used in a very generic sense in this document\n   since the media\
    \ is not limited to voice.  The calls supported by the\n   XCON framework and\
    \ CCMP can consist of media such as text, voice, and\n   video, including multiple\
    \ media types in a single active conference.\n   Conference and Media Control\
    \ Client (CMCC):  as defined in the XCON\n      framework.  In the flows in this\
    \ document, the CMCC is logically\n      equivalent to the use of a User Agent\
    \ Client (UAC) as the client\n      notation in the media control call flows [CALL-FLOWS].\
    \  A CMCC\n      differs from a generic media client in being an XCON-aware entity,\n\
    \      thus, also being able to issue CCMP requests.\n   Conference Server (ConfS):\
    \  In this document, the term \"conference\n      server\" is used interchangeably\
    \ with the term \"Application Server\n      (AS)\" as used in the media control\
    \ architectural framework\n      [RFC5567].  A conference server is intended to\
    \ be able to act as a\n      conference control server, as defined in the XCON\
    \ framework, i.e.,\n      it is able to handle CCMP requests and issue CCMP responses.\n\
    \   Media Server (MS):  as defined in the media control architectural\n      framework\
    \ [RFC5567].\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   This document provides a sampling of detailed call flows that\
    \ can be\n   implemented based on a system realization of the XCON framework\n\
    \   [RFC5239] and implementation of CCMP [RFC6503].  This is intended to\n   be\
    \ a simple guide for the use of the conference control protocol\n   between the\
    \ conference server and the conference control client.  The\n   objective is to\
    \ provide an informational base reference for protocol\n   developers, software\
    \ developers, and researchers.\n   This document focuses on the interaction between\
    \ the conference and\n   media control client and the conferencing system, specifically\
    \ the\n   conference server.  The scenarios are based on those described in the\n\
    \   XCON framework, many of which are based on the advanced conferencing\n   capabilities\
    \ described in the XCON scenarios.  Additional scenarios\n   have been added to\
    \ provide examples of other real-life scenarios that\n   are anticipated to be\
    \ supported by the framework.  With the exception\n   of an initial example with\
    \ media control messaging, the examples do\n   not include the details for the\
    \ media control [RFC6505], call\n   signaling, or Binary Floor Control Protocols\
    \ (BFCPs) [RFC4582].  This\n   document references the scenarios in the media\
    \ control call flows\n   [CALL-FLOWS], SIP call control conferencing, [RFC4579],\
    \ and BFCP\n   documents.\n   The rest of this document is organized as follows.\
    \  Section 4\n   presents an overview on CCMP, together with some implementation-\n\
    \   related details and related matters like HTTPS transport and\n   notifications.\
    \  Section 5 presents the reader with examples showing\n   the different approaches\
    \ CCMP provides to create a new conference.\n   Section 6 more generally addresses\
    \ the different user-related\n   manipulations that can be achieved by means of\
    \ CCMP, by presenting a\n   number of interesting scenarios.  Section 7 addresses\
    \ several\n   scenarios that may involve the use of sidebars.  Section 8 shows\
    \ how\n   CCMP can be used to remove conferences and users from the system.\n\
    \   Finally, Section 9 provides a few details on the security\n   considerations\
    \ when it comes to implementing CCMP.\n"
- title: 4.  Working with CCMP
  contents:
  - "4.  Working with CCMP\n   This section provides a brief introduction as to how\
    \ the Centralized\n   Conferencing Manipulation Protocol (CCMP) [RFC6503] works\
    \ and how it\n   can be transported across a network.  A typical CCMP interaction\n\
    \   focusing on relevant aspects of the client-server communication is\n   described.\
    \  Please note that this section assumes the reader has read\n   and understood\
    \ the CCMP document.  This section is intended to help\n   the reader understand\
    \ the actual protocol interactions.\n   First, a description of the protocol itself\
    \ is provided Section 4.1,\n   including some implementation considerations. \
    \ In Section 4.2, an\n   effective CCMP interaction is presented by exploiting\
    \ HTTPS as a\n   transport.  Finally, notifications are described in Section 4.3.\n\
    \   The document then presents and describes some actual flows in detail\n   in\
    \ the sections to follow.\n"
- title: 4.1.  CCMP and the Data Model
  contents:
  - "4.1.  CCMP and the Data Model\n   CCMP is an protocol based on XML [W3C.REC-xml-20081126].\
    \  It has been\n   designed as a request/response protocol.  It is completely\
    \ stateless,\n   which means implementations can safely handle transactions\n\
    \   independently from each other.\n   The protocol allows for the manipulation\
    \ of conference objects and\n   related users.  This manipulation allows a conference\
    \ and media\n   control client (briefly CMCC in all the following sections) to\n\
    \   create, update, and remove basically everything that is related to\n   the\
    \ objects handled by a conferencing system.  This is reflected in\n   the allowed\
    \ operations (retrieve, create, update, delete) and the\n   specified request\
    \ types (ranging from the manipulation of blueprints\n   and conferences to users\
    \ and sidebars).  For instance, CCMP provides\n   ways to:\n   o  retrieve the\
    \ list of registered and/or active conferences in the\n      system;\n   o  create\
    \ new conferences by exploiting several different approaches;\n   o  add/remove\
    \ users to/from a conference;\n   o  update a conference with respect to all of\
    \ its aspects;\n   and so on.\n   While CCMP acts as the means to manipulate conference\
    \ objects, CCMP\n   does not define these conference objects.  A separate document\n\
    \   specifies how a conference object and all its components have to be\n   constructed\
    \ (Conference Information Data Model for Centralized\n   Conferencing (XCON) [RFC6501]).\
    \  CCMP, depending upon the request\n   type and the related operation, carries\
    \ pieces of conference objects\n   (or any object as a whole) according to the\
    \ aforementioned\n   specification.  This means that any implementation aiming\
    \ at being\n   compliant with CCMP has to make sure that the transported objects\
    \ are\n   completely compliant with the data model specification and coherent\n\
    \   with the constraints defined therein.  To make this clearer, there\n   are\
    \ elements that are mandatory in a conference object: issuing a\n   syntactically\
    \ correct CCMP request that carries a wrong conference\n   object is doomed to\
    \ result in a failure.  For this reason, it is\n   suggested that the interested\
    \ implementers take special care in\n   carefully checking the data model handlers\
    \ as well in order to avoid\n   potential mistakes.\n   However, there are cases\
    \ when a mandatory element in the data model\n   cannot be assigned in a conference\
    \ object by a CCMP user.  For\n   example, a CMCC may be requesting the direct\
    \ creation of a new\n   conference; in this case, a conference object assumes\
    \ an 'entity'\n   attribute uniquely identifying the conference to be in place.\
    \  Thus,\n   the CMCC has no way to know a priori what the entity will be, since\n\
    \   it is generated by the ConfS after the request.  For scenarios like\n   this\
    \ one, the CCMP specification describes the use of a dedicated\n   placeholder\
    \ wildcard (i.e., \"AUTO_GENERATE_X\", where X is an integer)\n   to make the\
    \ conference object compliant with the data model: the\n   wildcard would then\
    \ be replaced by the ConfS with the right value.\n"
- title: 4.2.  Using HTTP/TLS as a Transport
  contents:
  - "4.2.  Using HTTP/TLS as a Transport\n   CCMP requires that implementations support\
    \ HTTP/TLS as the transport\n   mechanism.  Per CCMP, a CMCC sends a request as\
    \ part of an HTTPS POST\n   message, and the ConfS would reply with a 200 OK HTTPS\
    \ response.  In\n   both cases, the HTTPS messages carry the CCMP messages as\
    \ payload,\n   which is reflected in the Content-Type header\n   (\"application/ccmp+xml\"\
    ).  Figure 1 presents a ladder diagram of such\n   an interaction, which is followed\
    \ by a dump of the exchanged HTTPS\n   messages for further analysis.  The examples\
    \ in the remainder of this\n   document show only the CCMP interactions.\n   \
    \ CMCC                                           ConfS\n      |              \
    \                                |\n      | 1. HTTPS POST (CCMP request)     \
    \            |\n      |--------------------------------------------->|\n     \
    \ |                                              |\n      |                  \
    \                            |--+ Parse request,\n      |                    \
    \                          |  | update object\n      |                       \
    \                       |<-+ and reply\n      |                              \
    \                |\n      |                    2. 200 OK (CCMP response) |\n \
    \     |<---------------------------------------------|\n      |              \
    \                                |\n      |--+ Parse response and            \
    \            |\n      |  | update local copy                         |\n     \
    \ |<-+ of conference object                      |\n      |                  \
    \                            |\n      '                                      \
    \        '\n      '                                              '\n         \
    \                 Figure 1: CCMP on HTTPS\n   Per the protocol dump in the following\
    \ lines, the CMCC has issued a\n   CCMP request (a blueprintRequest message asking\
    \ for a blueprint\n   retrieval, i.e., with the <operation> element set to \"\
    retrieve\" )\n   towards the ConfS.  The request has been carried as payload of\
    \ an\n   HTTPS POST (message 1.) towards a previously known location.  The\n \
    \  mandatory Host header has been specified, and the Content-Type header\n   has\
    \ been correctly set as well (\"application/ccmp+xml\").\n   The ConfS, in turn,\
    \ has handled the request and replied accordingly.\n   The response (a blueprintResponse\
    \ message with a <response-code> set\n   to a successful value, \"200\") has been\
    \ carried as payload of a 200 OK\n   HTTPS response (message 2.).  As before,\
    \ the Content-Type header has\n   been correctly set (\"application/ccmp+xml\"\
    ).\n"
- title: 1. CMCC -> ConfS (HTTPS POST, CCMP request)
  contents:
  - '1. CMCC -> ConfS (HTTPS POST, CCMP request)

    '
- title: '------------------------------------------'
  contents:
  - "------------------------------------------\n   POST /Xcon/Ccmp HTTP/1.1\n   Content-Length:\
    \ 657\n   Content-Type: application/ccmp+xml\n   Host: example.com:443\n   Connection:\
    \ Keep-Alive\n   User-Agent: Apache-HttpClient/4.0.1 (java 1.5)\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n   <ccmp:ccmpRequest\n        \
    \ xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n         xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\"\n         xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n     <ccmpRequest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\
    \                    xsi:type=\"ccmp:ccmp-blueprint-request-message-type\">\n\
    \           <confUserID>xcon-userid:Alice@example.com</confUserID>\n         \
    \  <confObjID>xcon:AudioRoom@example.com</confObjID>\n           <operation>retrieve</operation>\n\
    \           <ccmp:blueprintRequest/>\n     </ccmpRequest>\n   </ccmp:ccmpRequest>\n"
- title: 2. CMCC <- ConfS (200 to POST, CCMP response)
  contents:
  - '2. CMCC <- ConfS (200 to POST, CCMP response)

    '
- title: '---------------------------------------------'
  contents:
  - "---------------------------------------------\n   HTTP/1.1 200 OK\n   X-Powered-By:\
    \ Servlet/2.5\n   Server: Sun GlassFish Communications Server 1.5\n   Content-Type:\
    \ application/ccmp+xml;charset=ISO-8859-1\n   Content-Length: 1652\n   Date: Thu,\
    \ 04 Feb 2010 14:47:56 GMT\n   <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    yes\"?>\n   <ccmp:ccmpResponse\n         xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    \n         xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n         xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\">\n     <ccmpResponse xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n                 xsi:type=\"ccmp:ccmp-blueprint-response-message-type\">\n \
    \      <confUserID>xcon-userid:Alice@example.com</confUserID>\n       <confObjID>xcon:AudioRoom@example.com</confObjID>\n\
    \       <operation>retrieve</operation>\n       <response-code>200</response-code>\n\
    \       <response-string>success</response-string>\n       <ccmp:blueprintResponse>\n\
    \         <blueprintInfo entity=\"xcon:AudioRoom@example.com\">\n           <info:conference-description>\n\
    \              <info:display-text>AudioRoom</info:display-text>\n            \
    \  <info:maximum-user-count>2</info:maximum-user-count>\n              <info:available-media>\n\
    \                <info:entry label=\"audioLabel\">\n                    <info:type>audio</info:type>\n\
    \                </info:entry>\n                </info:available-media>\n    \
    \       </info:conference-description>\n           <info:users>\n            \
    \  <xcon:join-handling>allow</xcon:join-handling>\n           </info:users>\n\
    \           <xcon:floor-information>\n             <xcon:floor-request-handling>confirm\n\
    \             </xcon:floor-request-handling>\n             <xcon:conference-floor-policy>\n\
    \                   <xcon:floor id=\"audioLabel\"></xcon:floor>\n            \
    \ </xcon:conference-floor-policy>\n           </xcon:floor-information>\n    \
    \     </blueprintInfo>\n       </ccmp:blueprintResponse>\n     </ccmpResponse>\n\
    \   </ccmp:ccmpResponse>\n   For completeness, the following provides some details\
    \ of the CCMP\n   interaction.  Despite the simplicity of the request, this flow\n\
    \   provides some relevant information on how CCMP messages are built.\n   Specifically,\
    \ both the CCMP request and the CCMP response share a\n   subset of the message:\n\
    \   o  <confUserID>: this element, provided by the CMCC, refers to the\n     \
    \ requester by means of his XCON-USERID; except in a few scenarios\n      (presented\
    \ in the following sections), this element must always\n      contain a valid\
    \ value;\n   o  <confObjID>: this element refers to the target conference object,\n\
    \      according to the request in place;\n   o  <operation>: this element specifies\
    \ the operation the CMCC wants\n      to perform, according to the specific request\
    \ type.\n   Besides those elements, the CMCC (let's say Alice, whose XCON-USERID\n\
    \   is \"xcon-userid:Alice@example.com\") has also provided an additional\n  \
    \ element, <blueprintRequest>.  The name of that element varies\n   according\
    \ to the request type in which the CMCC is interested.  In\n   this specific scenario,\
    \ the CMCC was interested in acquiring details\n   concerning a specific blueprint\
    \ (identified by its XCON-URI\n   \"xcon:AudioRoom@example.com\", as reflected\
    \ in the provided\n   <confObjID> target element), and so the request consisted\
    \ in an empty\n   <blueprintRequest> element.  It will be clearer in the following\n\
    \   sections that different request types may require different elements\n   and,\
    \ as a consequence, different content.\n   Considering the request was a blueprintRequest\
    \ message, the ConfS has\n   replied with a blueprintResponse message containing\
    \ a\n   <blueprintResponse> element.  This element includes a complete dump\n\
    \   of the conference object (compliant with the data model) describing\n   the\
    \ requested blueprint.\n   Without providing additional details of this interaction,\
    \ it is worth\n   noting that this was the example of the simplest CCMP communication\n\
    \   that could take place between a CMCC and a ConfS, a blueprint\n   request:\
    \ this scenario will be described in more detail in\n   Section 5.2.\n"
- title: 4.3.  Conference Notifications
  contents:
  - "4.3.  Conference Notifications\n   The XCON framework [RFC5239] identifies several\
    \ different possible\n   protocol interactions between a conference server and\
    \ a conferencing\n   client.  One of those interactions is generically called\n\
    \   \"notification protocol\" providing a mechanism for all clients\n   interested\
    \ in being informed by the server whenever something\n   relevant happens in a\
    \ conference.  When SIP is used as the call\n   signaling protocol in a CCMP implementation,\
    \ the XCON event package\n   [RFC6502], which extends the SIP event package for\
    \ conference state\n   [RFC4575] must be supported.  A SIP client uses the SIP\
    \ SUBSCRIBE\n   message for the XCON event package to subscribe to notifications\n\
    \   related to a specific conference.  A SIP client would receive\n   notifications\
    \ describing all the changes to the document via a SIP\n   NOTIFY message.  An\
    \ example ladder diagram is presented in Figure 2;\n   in this figure, we assume\
    \ a CMCC has updated a conference object, and\n   a previously subscribed SIP\
    \ client is notified of the update.\n       CMCC                   ConfS     \
    \                   UAC\n        |                       |                   \
    \        |\n        |                       |          1. SIP SUBSCRIBE |\n  \
    \      |                       |<--------------------------|\n        |      \
    \       Handle +--|                           |\n        |                new\
    \ |  |                           |\n        |       subscription +->| 2. SIP 200\
    \ OK             |\n        |                       |-------------------------->|\n\
    \        |                       |                           |\n        '    \
    \                   '                           '\n        '                 \
    \      '                           '\n        |                       |      \
    \                     |\n        | 3. CCMP (add user)    |                   \
    \        |\n        |---------------------->|                           |\n  \
    \      |                       |--+ Add user               |\n        |      \
    \                 |  | to conf.               |\n        |                   \
    \    |<-+ object                 |\n        |     4. CCMP (success) |        \
    \                   |\n        |<----------------------|                     \
    \      |\n        |                       | 5. SIP NOTIFY (changes)   |\n    \
    \    |                       |-------------------------->|\n        |        \
    \               |             6. SIP 200 OK |\n        |                     \
    \  |<--------------------------|\n        |                       |          \
    \                 |\n        '                       '                       \
    \    '\n        '                       '                           '\n      \
    \        Figure 2: XCON Event Package: SIP Notifications\n   The detailed flows\
    \ in this document generically present a\n   notification, when appropriate, but\
    \ do not include the SIP messaging\n   details.\n"
- title: 5.  Conference Creation
  contents:
  - "5.  Conference Creation\n   This section provides details associated with the\
    \ various ways in\n   which a conference can be created using CCMP and the XCON\
    \ framework\n   constructs.  As previously mentioned, the details of the media\n\
    \   control, call signaling, and floor control protocols, where\n   applicable,\
    \ are annotated in the flows without showing all the\n   details.  This also applies\
    \ to CCMP, whose flows are related to the\n   protocol alone, hiding any detail\
    \ concerning the transport that may\n   have been used (e.g., HTTPS).  However,\
    \ for clarification purposes,\n   the first example in Section 5.1 provides the\
    \ details of the media\n   control messaging with the standard annotation used\
    \ throughout the\n   remainder of this document.  In subsequent flows, only this\n\
    \   annotation (identified by lowercase letters) is included, and the\n   reader\
    \ is encouraged to refer to the call flows in the relevant\n   documents for details\
    \ about the other protocols.  The annotations for\n   the call signaling are on\
    \ the left side of the conference server\n   vertical bar, and those for the media\
    \ control messaging are on the\n   right side.\n"
- title: 5.1.  Basic Conference Creation
  contents:
  - "5.1.  Basic Conference Creation\n   The simplest manner in which a conference\
    \ can be created is\n   accomplished by the client sending a confRequest message\
    \ with the\n   <operation> element set to \"create\" as the only parameter to\
    \ the\n   conference server, together with the <confUserID> associated with the\n\
    \   requesting client itself.  This results in the creation of a default\n   conference,\
    \ with an XCON-URI in the form of the <confObjID> element,\n   the XCON-USERID\
    \ in the form of the <confUserID> element (the same one\n   already present in\
    \ the request), and the data for the conference\n   object in the <confInfo> parameter\
    \ all returned in the confResponse\n   message.  This example also adds the issuing\
    \ user to the conference\n   upon creation with the 'method' attribute in the\
    \ <target> child\n   element of <allowed-users-list> set to \"dial-out\".\n  \
    \ The specific data for the conference object is returned in the\n   confResponse\
    \ message in the <confInfo> parameter.  This allows the\n   client (with the appropriate\
    \ authorization) to manipulate these data\n   and add additional participants\
    \ to the conference, as well as change\n   the data during the conference.  In\
    \ addition, the client may\n   distribute the conferencing information to other\
    \ participants\n   allowing them to join, the details of which are provided in\n\
    \   additional flows.  Please notice that, according to the CCMP\n   specification,\
    \ the return of the new conference data in the\n   <confInfo> element is not mandatory:\
    \ if the <confInfo> parameter of\n   is not included in the successful confResponse/create\
    \ message, a\n   subsequent confRequest/retrieve message of the returned <confObjID>\n\
    \   can be triggered to provide the requesting client with the detailed\n   conference\
    \ description.\n   Clients that are not XCON-aware can join the conference using\
    \ a\n   specific signaling interface such as SIP [RFC3261] (using the\n   signaling\
    \ interface to the conference focus as described in\n   [RFC4579]), or other supported\
    \ signaling protocols, being XCON-\n   agnostic with respect to them.  However,\
    \ these details are not shown\n   in the message flows.  The message flows in\
    \ this document identify\n   the point in the message flows at which this signaling\
    \ occurs via the\n   lowercase letter items (i.e., (a)...(x)) along with the appropriate\n\
    \   text for the processing done by the conference server.\n   As previously described,\
    \ this example also shows how the conferencing\n   system may make use of other\
    \ standard protocol components for\n   complete functionality.  An example of\
    \ that is the media control\n   framework [RFC5567], which allows the conferencing\
    \ system to\n   configure conference mixes, Interactive Voice Response (IVR) dialogs,\n\
    \   and all sorts of media-related interactions an application like this\n   may\
    \ need.  In order to provide the reader with some insight on these\n   interactions,\
    \ the conference server in this example also configures\n   and starts a mixer\
    \ via a media control channel as soon as the\n   conference is created (transactions\
    \ A1 and A2), and attaches clients\n   to it when necessary (e.g., when CMCC1\
    \ joins the conference by means\n   of SIP signaling, its media channels are attached\
    \ to the media server\n   (MS) in B1/B2).  Note, that the media control interfaces\
    \ are NOT\n   shown in the remaining call flows in this document but rather follow\n\
    \   the same annotation as with the SIP signaling such that (b)\n   correlates\
    \ with the A1 and A2 transactions and (d) correlates with\n   the B1 and B2 transactions.\n\
    \   CMCC1          CMCC2        CMCCx       ConfS          MS\n     |        \
    \       |           |           |             |\n     |(1)confRequest(confUserID,\
    \ create)     |             |\n     |-------------------------------------->|\
    \             |\n     |               |         (a)Create +---|             |\n\
    \     |               |           |Conf   |   |             |\n     |        \
    \       |           |Object |   |             |\n     |               |      \
    \     |& IDs  +-->|             |\n     |               |           |        \
    \   | A1. CONTROL |\n     |               |           |           |+++++++++++>>|\n\
    \     |               |           |           |(create conf)|--+ (b)\n     | \
    \              |           |           |             |  | create\n     |     \
    \          |           |           |             |  | conf and\n     |       \
    \        |           |           | A2. 200 OK  |<-+ its ID\n     |           \
    \    |           |           |<<+++++++++++|\n     |               |         \
    \  |           |(confid=Y)   |\n     |(2)confResponse(confUserID,confObjID,  |\
    \             |\n     |                create, 200, success,  |             |\n\
    \     |                version, confInfo)     |             |\n     |<--------------------------------------|\
    \             |\n     |               |           |           |             |\n\
    \     |               |     (c) Focus     +---|             |\n     |        \
    \       |         sets up   |   |             |\n     |               |      \
    \   signaling |   |             |\n     |               |         to CMCC1  +-->|\
    \             |\n     |               |           |           |             |\n\
    \     |               |           |           | B1. CONTROL |\n     |        \
    \       |           |           |+++++++++++>>|\n     |               |      \
    \     |           | (join CMCC1 |\n     |               |           |        \
    \   | <->confY)   |\n     |               |           |           |          \
    \   |\n     |               |           |           |             |--+(d) join\n\
    \     |               |           |           |             |  | CMCC1 &\n   \
    \  |               |           |           | B2.200 OK   |<-+ conf Y\n     | \
    \              |           |           |<<+++++++++++|\n     |               |\
    \           |           |             |\n     |<<#################################################>>|\n\
    \     |        Now the CMCC1 is mixed in the conference     |\n     |<<#################################################>>|\n\
    \     |               |           |           |             |\n     |******CMCC1\
    \ may then manipulate conference data *****|\n     |****** and add addt'l users,\
    \ etc.      |        *****|\n     '               '           '           '  \
    \           '\n     '               '           '           '             '\n\
    \     '               '           '           '             '\n             Figure\
    \ 3: Create Basic Conference - Complete flow\n"
- title: 1. confRequest/create message (Alice creates a default conference)
  contents:
  - "1. confRequest/create message (Alice creates a default conference)\n  <?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpRequest\n        xmlns:info=\"\
    urn:ietf:params:xml:ns:conference-info\"\n        xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\
    \n        xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\">\n     <ccmpRequest\n\
    \           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        \
    \   xsi:type=\"ccmp:ccmp-conf-request-message-type\">\n        <confUserID>xcon-userid:Alice@example.com</confUserID>\n\
    \        <operation>create</operation>\n        <ccmp:confRequest/>\n     </ccmpRequest>\n\
    \  </ccmp:ccmpRequest>\n"
- title: 2. confResponse/create message ("success", created conference
  contents:
  - "2. confResponse/create message (\"success\", created conference\n   object returned)\n\
    \  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n     <ccmp:ccmpResponse\n\
    \          xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n      \
    \    xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n          xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\">\n         <ccmpResponse\n            xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\"\n            xsi:type=\"ccmp:ccmp-conf-response-message-type\"\
    >\n          <confUserID>xcon-userid:Alice@example.com</confUserID>\n        \
    \  <confObjID>xcon:8977794@example.com</confObjID>\n          <operation>create</operation>\n\
    \          <response-code>200</response-code>\n          <response-string>success</response-string>\n\
    \          <version>1</version>\n          <ccmp:confResponse>\n             \
    \ <confInfo entity=\"xcon:8977794@example.com\">\n                 <info:conference-description>\n\
    \                     <info:display-text>\n                        Default conference\
    \ initiated by Alice\n                     </info:display-text>\n            \
    \         <info:conf-uris>\n                        <info:entry>\n           \
    \                <info:uri>\n                               xcon:8977794@example.com\n\
    \                           </info:uri>\n                           <info:display-text>\n\
    \                               Conference XCON-URI\n                        \
    \   </info:display-text>\n                           </info:entry>\n         \
    \             </info:conf-uris>\n                      <info:maximum-user-count>10\n\
    \                      </info:maximum-user-count>\n                      <info:available-media>\n\
    \                             <info:entry label=\"11\">\n                    \
    \             <info:type>audio</info:type>\n                             </info:entry>\n\
    \                      </info:available-media>\n                      </info:conference-description>\n\
    \                       <info:conference-state>\n                         <info:active>false</info:active>\n\
    \                       </info:conference-state>\n                  <info:users>\n\
    \                     <xcon:join-handling>allow</xcon:join-handling>\n       \
    \              <xcon:allowed-users-list>\n                        <xcon:target\
    \ uri=\"xcon-userid:Alice@example.com\"\n                                    \
    \ method=\"dial-out\"/>\n                      </xcon:allowed-users-list>\n  \
    \                </info:users>\n              </confInfo>\n          </ccmp:confResponse>\n\
    \        </ccmpResponse>\n     </ccmp:ccmpResponse>\n           Figure 4: Create\
    \ Basic Conference Detailed Messaging\n"
- title: 5.2.  Conference Creation Using Blueprints
  contents:
  - "5.2.  Conference Creation Using Blueprints\n   The previous example showed the\
    \ creation of a new conference using\n   default values.  This means the client\
    \ provided no information about\n   how she wanted the conference to be created.\
    \  The XCON framework (and\n   CCMP as a consequence) allows for the implementation\
    \ of templates.\n   These templates are called \"conference blueprints\" and are\
    \ basically\n   conference objects with predefined settings.  This means that\
    \ a\n   client might get a list of blueprints, choose the one that most fits\n\
    \   his needs, and use the chosen blueprint to create a new conference.\n   Figure\
    \ 5 provides an example of one client, Alice, discovering the\n   conference blueprints\
    \ available for a particular conferencing system\n   and creating a conference\
    \ based on the desired blueprint.  In\n   particular, Alice is interested in those\
    \ blueprints suitable to\n   represent a video conference, i.e., a conference\
    \ in which both audio\n   and video are available, so she makes use of the filter\
    \ mechanism\n   provided by CCMP to make a selective blueprints retrieve request.\n\
    \   This results in three distinct CCMP transactions.\n   CMCC Alice         \
    \          ConfS\n    |                               |\n    | (1) blueprintsRequest\
    \         |\n    |    (confUserID,xpathFilter)   |\n    |------------------------------>|\n\
    \    |                               |\n    |        (2) blueprintsResponse |\n\
    \    |           (confUserID,        |\n    |            200, success,      |\n\
    \    |            blueprintsInfo)    |\n    |                               |\n\
    \    |<------------------------------|\n    |                               |\n\
    \    |--+                            |\n    |  | choose preferred           |\n\
    \    |  | blueprint from the         |\n    |  | list (blueprintName)       |\n\
    \    |<-+                            |\n    |                               |\n\
    \    | (3) blueprintRequest          |\n    | (confUserID,confObjID,        |\n\
    \    |  retrieve)                    |\n    |------------------------------>|\n\
    \    |                               |\n    |      4) blueprintResponse     |\n\
    \    |         (confUserID,confObjID,|\n    |          retrieve, 200,       |\n\
    \    |          success, confInfo)   |\n    |<------------------------------|\n\
    \    |                               |\n    | (5) confRequest(confUserID,   |\n\
    \    |     confObjID,create)         |\n    |------------------------------>|\n\
    \    |                               |\n    |                 (a)Create +---|\n\
    \    |                    Conf   |   |\n    |                    Object |   |\n\
    \    |                    & IDs  +-->|\n    |                               |--+\
    \ (b) MS\n    |                               |  | creates\n    |            \
    \                   |  | conf and\n    |                               |<-+ its\
    \ ID\n    |                               |   (confid=Y)\n    |(6) confResponse\
    \               |\n    | (confUserID, confObjID*,      |\n    |  create, 200,\
    \ success)        |\n    |<------------------------------|\n    |            \
    \                   |\n    |                               |\n    |          \
    \                     |\n    '                               '\n    '        \
    \                       '\n         Figure 5: Client Creation of Conference Using\
    \ Blueprints\n   1.  Alice first sends a blueprintsRequest message to the conference\n\
    \       server identified by the conference server discovery process.\n      \
    \ This request contains the <confUserID> set to the XCON-USERID of\n       the\
    \ user issuing the request (in this case, the one belonging to\n       Alice)\
    \ and the <xpathFilter> element by which Alice specifies she\n       desires to\
    \ obtain only blueprints providing support for both\n       audio and video: for\
    \ this purpose, the xpath query contained in\n       this field is: \"/conference-info[conference-description/\n\
    \       available-media/entry/type='audio' and conference-description/\n     \
    \  available-media/entry/type='video']\".  Upon receipt of the\n       blueprintsRequest\
    \ message, the conference server would first\n       ensure, on the basis of the\
    \ <confUserID> parameter, that Alice\n       has the appropriate authority based\
    \ on system policies to receive\n       the requested kind of blueprints supported\
    \ by that system.\n   2.  All blueprints that Alice is authorized to use are returned\
    \ in a\n       blueprintsResponse message in the <blueprintsInfo> element.\n \
    \  3.  Upon receipt of the blueprintsResponse message containing the\n       blueprints,\
    \ Alice determines which blueprint to use for the\n       conference to be created.\
    \  Alice sends a blueprintRequest message\n       to get the specific blueprint\
    \ as identified by the <confObjID>.\n   4.  The conference server returns the\
    \ details associated with the\n       specific blueprint identified by the <confObjID>\
    \ in the\n       <confInfo> element within the blueprintResponse message.\n  \
    \ 5.  Alice finally sends a confRequest message with a \"create\"\n       <operation>\
    \ to the conference server to create a conference\n       reservation cloning\
    \ the chosen blueprint.  This is achieved by\n       writing the blueprint's XCON-URI\
    \ in the <confObjID> parameter.\n   6.  Upon receipt of the confRequest/create\
    \ message, the conference\n       server uses the received blueprint to clone\
    \ a conference,\n       allocating a new XCON-URI (called \"confObjID*\" in the\
    \ example).\n       The conference server then sends a confResponse message including\n\
    \       the new \"confObjID*\" associated with the newly created conference\n\
    \       instance as the value of the <confObjID> parameter.  Upon receipt\n  \
    \     of the confResponse message, Alice can now add other users to the\n    \
    \   conference.\n 1. blueprintsRequest message (Alice requires the list of the\n\
    \    available blueprints with video support)\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\" standalone=\"yes\"?>\n   <ccmp:ccmpRequest xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\
    \n     xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\n     xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n    <ccmpRequest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\
    \         xsi:type=\"ccmp:ccmp-blueprints-request-message-type\">\n       <confUserID>xcon-userid:Alice@example.com</confUserID>\n\
    \       <ccmp:blueprintsRequest>\n         <xpathFilter>/conference-info[conference-description/\n\
    \            available-media/entry/type='audio'\n            and\n           \
    \ conference-description/available-media/entry/type='video']\n         </xpathFilter>\n\
    \       </ccmp:blueprintsRequest>\n    </ccmpRequest>\n   </ccmp:ccmpRequest>\n"
- title: 2. blueprintsResponse message (the server provides a
  contents:
  - "2. blueprintsResponse message (the server provides a\n   descriptions of the\
    \ available blueprints\n   fitting Alice's request)\n   <?xml version=\"1.0\"\
    \ encoding=\"UTF-8\" standalone=\"yes\"?>\n   <ccmp:ccmpResponse\n    xmlns:xcon=\"\
    urn:ietf:params:xml:ns:xcon-conference-info\"\n    xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\
    \n    xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\">\n   <ccmpResponse\n   \
    \    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:type=\"\
    ccmp:ccmp-blueprints-response-message-type\">\n      <confUserID>xcon-userid:Alice@example.com</confUserID>\n\
    \      <response-code>200</response-code>\n      <response-string>success</response-string>\n\
    \        <ccmp:blueprintsResponse>\n         <blueprintsInfo>\n          <info:entry>\n\
    \           <info:uri>xcon:VideoRoom@example.com</info:uri>\n           <info:display-text>VideoRoom</info:display-text>\n\
    \           <info:purpose>Video Room:\n               conference room with public\
    \ access,\n               where both audio and video are available,\n        \
    \       4 users can talk and be seen at the same time,\n               and the\
    \ floor requests are automatically accepted.\n           </info:purpose>\n   \
    \       </info:entry>\n          <info:entry>\n           <info:uri>xcon:VideoConference1@example.com</info:uri>\n\
    \           <info:display-text>VideoConference1</info:display-text>\n        \
    \     <info:purpose>Public Video Conference: conference\n                 where\
    \ both audio and video are available,\n                 only one user can talk\n\
    \             </info:purpose>\n           </info:entry>\n        </blueprintsInfo>\n\
    \      </ccmp:blueprintsResponse>\n     </ccmpResponse>\n   </ccmp:ccmpResponse>\n"
- title: 3. blueprintRequest/retrieve message (Alice wants the
  contents:
  - "3. blueprintRequest/retrieve message (Alice wants the\n   \"VideoRoom\" blueprint)\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n   <ccmp:ccmpRequest\n\
    \         xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n         xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\"\n         xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n     <ccmpRequest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\
    \                    xsi:type=\"ccmp:ccmp-blueprint-request-message-type\">\n\
    \           <confUserID>xcon-userid:Alice@example.com</confUserID>\n         \
    \  <confObjID>xcon:VideoRoom@example.com</confObjID>\n           <operation>retrieve</operation>\n\
    \           <ccmp:blueprintRequest/>\n     </ccmpRequest>\n   </ccmp:ccmpRequest>\n"
- title: 4. blueprintResponse/retrieve message ("VideoRoom"
  contents:
  - "4. blueprintResponse/retrieve message (\"VideoRoom\"\n   conference object returned)\n"
- title: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  contents:
  - "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n   <ccmp:ccmpResponse\n\
    \         xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n       \
    \  xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n         xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\">\n     <ccmpResponse xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n                 xsi:type=\"ccmp:ccmp-blueprint-response-message-type\">\n \
    \      <confUserID>xcon-userid:Alice@example.com</confUserID>\n       <confObjID>xcon:VideoRoom@example.com</confObjID>\n\
    \       <operation>retrieve</operation>\n       <response-code>200</response-code>\n\
    \       <response-string>success</response-string>\n       <ccmp:blueprintResponse>\n\
    \         <blueprintInfo entity=\"xcon:VideoRoom@example.com\">\n           <info:conference-description>\n\
    \              <info:display-text>VideoRoom</info:display-text>\n            \
    \  <info:maximum-user-count>4</info:maximum-user-count>\n              <info:available-media>\n\
    \                <info:entry label=\"audioLabel\">\n                    <info:type>audio</info:type>\n\
    \                </info:entry>\n                <info:entry label=\"videoLabel\"\
    >\n                    <info:type>video</info:type>\n                </info:entry>\n\
    \                </info:available-media>\n           </info:conference-description>\n\
    \           <info:users>\n              <xcon:join-handling>allow</xcon:join-handling>\n\
    \           </info:users>\n           <xcon:floor-information>\n             <xcon:floor-request-handling>confirm\n\
    \             </xcon:floor-request-handling>\n             <xcon:conference-floor-policy>\n\
    \                   <xcon:floor id=\"audioFloor\">\n                    <xcon:media-label>audioLabel</xcon:media-label>\n\
    \                   </xcon:floor>\n                   <xcon:floor id=\"videoFloor\"\
    >\n                        <xcon:media-label>videoLabel</xcon:media-label>\n \
    \                  </xcon:floor>\n             </xcon:conference-floor-policy>\n\
    \           </xcon:floor-information>\n         </blueprintInfo>\n       </ccmp:blueprintResponse>\n\
    \     </ccmpResponse>\n   </ccmp:ccmpResponse>\n"
- title: 5. confRequest/create message (Alice clones the "VideoRoom" blueprint)
  contents:
  - "5. confRequest/create message (Alice clones the \"VideoRoom\" blueprint)\n  <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpRequest\n\
    \        xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n        xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\"\n        xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n     <ccmpRequest\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n           xsi:type=\"ccmp:ccmp-conf-request-message-type\">\n        <confUserID>xcon-userid:Alice@example.com</confUserID>\n\
    \        <confObjID>xcon:VideoRoom@example.com</confObjID>\n        <operation>create</operation>\n\
    \        <ccmp:confRequest/>\n     </ccmpRequest>\n  </ccmp:ccmpRequest>\n"
- title: 6. confResponse/create message (cloned conference
  contents:
  - "6. confResponse/create message (cloned conference\n   object returned)\n  <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpResponse\n\
    \       xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n       xmlns:info=\"\
    urn:ietf:params:xml:ns:conference-info\"\n       xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\
    >\n    <ccmpResponse\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n         xsi:type=\"ccmp:ccmp-conf-response-message-type\">\n       <confUserID>xcon-userid:Alice@example.com</confUserID>\n\
    \       <confObjID>xcon:8977794@example.com</confObjID>\n       <operation>create</operation>\n\
    \       <response-code>200</response-code>\n       <response-string>success</response-string>\n\
    \       <version>1</version>\n       <ccmp:confResponse>\n            <confInfo\
    \ entity=\"xcon:8977794@example.com\">\n              <info:conference-description>\n\
    \                  <info:display-text>\n                     New conference by\
    \ Alice cloned from VideoRoom\n                  </info:display-text>\n      \
    \            <info:conf-uris>\n                     <info:entry>\n           \
    \             <info:uri>\n                            xcon:8977794@example.com\n\
    \                        </info:uri>\n                        <info:display-text>\n\
    \                            conference xcon-uri\n                        </info:display-text>\n\
    \                        <xcon:conference-password>\n                        \
    \    8601\n                        </xcon:conference-password>\n             \
    \         </info:entry>\n                   </info:conf-uris>\n              \
    \     <info:maximum-user-count>10</info:maximum-user-count>\n                \
    \   <info:available-media>\n                          <info:entry label=\"11\"\
    >\n                              <info:type>audio</info:type>\n              \
    \            </info:entry>\n                          <info:entry label=\"12\"\
    >\n                              <info:type>video</info:type>\n              \
    \            </info:entry>\n                   </info:available-media>\n     \
    \          </info:conference-description>\n               <info:users>\n     \
    \              <xcon:join-handling>allow</xcon:join-handling>\n              \
    \ </info:users>\n                  <xcon:floor-information>\n                \
    \     <xcon:floor-request-handling>\n                        confirm</xcon:floor-request-handling>\n\
    \                     <xcon:conference-floor-policy>\n                       <xcon:floor\
    \ id=\"1\">\n                       <xcon:media-label>11</xcon:media-label>\n\
    \                       </xcon:floor>\n                       <xcon:floor id=\"\
    2\">\n                       <xcon:media-label>12</xcon:media-label>\n       \
    \                </xcon:floor>\n                     </xcon:conference-floor-policy>\n\
    \                  </xcon:floor-information>\n              </confInfo>\n    \
    \      </ccmp:confResponse>\n      </ccmpResponse>\n  </ccmp:ccmpResponse>\n \
    \       Figure 6: Create Conference (Blueprint) Detailed Messaging\n"
- title: 5.3.  Conference Creation Using User-Provided Conference Information
  contents:
  - "5.3.  Conference Creation Using User-Provided Conference Information\n   A conference\
    \ can also be created by the client sending a confRequest\n   message with the\
    \ \"create\" <operation>, along with the desired data in\n   the form of the <confInfo>\
    \ element for the conference to be created.\n   The request also includes the\
    \ <confUserID> set to the XCON-USERID of\n   the requesting entity.\n   This approach\
    \ allows for a client (in this example Alice) to\n   completely describe what\
    \ the conference object should look like,\n   without relying on defaults or blueprints;\
    \ for example, which media\n   should be available, the topic, the users allowed\
    \ to join, any\n   scheduling-related information, and so on.  This can be done\
    \ by\n   providing, in the creation request, a full conference object for the\n\
    \   server to parse.\n   This <confInfo> parameter must comply with the data model\n\
    \   specification.  This means that the 'entity' attribute is mandatory\n   and\
    \ cannot be missing in the document.  However, in this example, the\n   client\
    \ is actually requesting the creation of a new conference, which\n   doesn't exist\
    \ yet, so the 'entity' attribute is unknown.  As\n   discussed in Section 4.1,\
    \ CCMP allows for the use of a wildcard\n   placeholder.  This placeholder (\"\
    xcon:AUTO_GENERATE_1@example.com\" in\n   the example) is only to ensure the <confInfo>\
    \ element is compliant\n   with the data model and would subsequently be replaced\
    \ by the\n   conference server with the actual value.  Thus, when the conference\n\
    \   server actually creates the conference, a valid value for the\n   'entity'\
    \ attribute is created for it as well, which takes the place\n   of the wildcard\
    \ value when the actual conference object provided by\n   the client is populated.\n\
    \   To give a flavor of what could be added to the conference object, we\n   assume\
    \ Alice is also interested in providing scheduling-related\n   information.  So,\
    \ in this example, Alice also specifies by the\n   <conference-time> element included\
    \ in the <confInfo> that the\n   conference she wants to create has to occur on\
    \ a certain date\n   spanning from a certain start time to a certain stop time\
    \ and has to\n   be replicated weekly.\n   Moreover, Alice indicates by means\
    \ of the <allowed-users-list>\n   element that at the start time Bob, Carol, and\
    \ herself have to be\n   called by the conferencing system to join the conference\
    \ (in fact,\n   for each <target> field corresponding to one of the aforementioned\n\
    \   clients, the 'method' attribute is set to \"dial-out\").\n   Once Alice has\
    \ prepared the <confInfo> element and sent it as part of\n   her request to the\
    \ server, if the conferencing system can support\n   that specific type of conference\
    \ (capabilities, etc.), then the\n   request results in the creation of a conference.\
    \  We assume the\n   request has been successful, and as a consequence, the XCON-URI\
    \ in\n   the form of the <confObjID> parameter and the XCON-USERID in the form\n\
    \   of the <confUserID> parameter (again, the same as the requesting\n   entity)\
    \ are returned in the confResponse message.\n   In this example, the created conference\
    \ object is not returned in the\n   successful confResponse message in the <confInfo>\
    \ parameter.\n   Nevertheless, Alice could still retrieve the actual conference\
    \ object\n   by issuing a confRequest message with a \"retrieve\" <operation>\
    \ on the\n   XCON-URI returned in the <confObjID> of the previous response.  Such\n\
    \   a request would show how, as described at the beginning of this\n   section,\
    \ the 'entity' attribute of the conference object in the\n   <confInfo> field\
    \ is replaced with the actual information (i.e.,\n   \"xcon:6845432@example.com\"\
    ).\n   Alice            Bob        Carol       ConfS\n     |               | \
    \          |           |\n     |               |           |           |\n   \
    \  |(1)confRequest(confUserID, |           |\n     |         create, confInfo)\
    \ |           |\n     |               |           |           |\n     |-------------------------------------->|\n\
    \     |               |           |           |\n     |               |      \
    \   (a)Create +---|\n     |               |           |Conf   |   |\n     |  \
    \             |           |Object |   |\n     |               |           |& IDs\
    \  +-->|\n     |               |           |           |--+ (b) MS\n     |   \
    \            |           |           |  | creates\n     |               |    \
    \       |           |  | conf and\n     |               |           |        \
    \   |<-+ its ID\n     |               |           |           |   (confid=Y)\n\
    \     |(2)confResponse(confUserID,|           |\n     |       confObjID, create,\
    \  |           |\n     |       200, success, version)          |\n     |<--------------------------------------|\n\
    \     |               |           |           |\n    ===========================================\n\
    \    ...             ...         ...         ...\n    ========== START TIME OCCURS\
    \ ==============\n     |               |     (c) Focus     +---|\n     |     \
    \          |         sets up   |   |\n     |               |         signaling\
    \ |   |\n     |               |         to Alice  +-->|\n     |              \
    \ |           |           |\n     |               |           |           |--+(d)\
    \ MS joins\n     |               |           |           |  | Alice &\n     |\
    \               |           |           |<-+ conf Y\n     |               |  \
    \         |           |\n     |               |           |           |\n    \
    \ |<<###################################>>|\n     | Alice is mixed in the conference\
    \      |\n     |<<###################################>>|\n     |             \
    \  |           |           |\n     |               |     (e)Focus      +---|\n\
    \     |               |        sets up    |   |\n     |               |      \
    \  signaling  |   |\n     |               |        to Bob     |   |\n     |  \
    \             |           |       +-->|\n     |               |           |  \
    \         |\n     |               |           |           |--+(f)MS joins\n  \
    \   |               |           |           |  | Bob &\n     |               |\
    \           |           |<-+ conf Y\n     |               |           |      \
    \     |\n     |               |<<###################>>|\n     |              \
    \ |  Bob is mixed too     |\n     |               |<<###################>>|\n\
    \     |               |           |           |\n     |               |     (g\
    \ )Focus     +---|\n     |               |         sets up   |   |\n     |   \
    \            |         signaling |   |\n     |               |         to Carol\
    \  |   |\n     |               |         CMCCx     +-->|\n     |             \
    \  |           |           |\n     |               |           |           |--+(h)MS\
    \ joins\n     |               |           |           |  | CMCCx &\n     |   \
    \            |           |           |<-+ conf Y\n     |               |     \
    \      |           |\n     |               |           |<<#######>>|\n     | \
    \              |           |Carol mixed|\n     |               |           |<<#######>>|\n\
    \     |               |           |           |\n     |               |      \
    \     |           |\n     |               |           |           |\n     |<***All\
    \ parties connected to conf Y***>|\n     |               |           |       \
    \    |\n     |               |           |           |\n     '               '\
    \           '           '\n     '               '           '           '\n  \
    \   '               '           '           '\n   Figure 7: Create Basic Conference\
    \ from User-Provided Conference Info\n  1. confRequest/create message (Alice proposes\
    \ a conference object\n     to be created)\n    <?xml version=\"1.0\" encoding=\"\
    UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpRequest\n        xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\
    \n        xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\n        xmlns:xcon=\"\
    urn:ietf:params:xml:ns:xcon-conference-info\">\n     <ccmpRequest\n          \
    \ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:type=\"\
    ccmp:ccmp-conf-request-message-type\">\n        <confUserID>xcon-userid:Alice@example.com</confUserID>\n\
    \        <operation>create</operation>\n        <ccmp:confRequest>\n         \
    \  <confInfo entity=\"xcon:AUTO_GENERATE_1@example.com\">\n              <info:conference-description>\n\
    \                  <info:display-text>\n                     Dial-out conference\
    \ initiated by Alice\n                  </info:display-text>\n               \
    \    <info:maximum-user-count>10</info:maximum-user-count>\n                 \
    \  <info:available-media>\n                          <info:entry label=\"AUTO_GENERATE_2\"\
    >\n                              <info:type>audio</info:type>\n              \
    \            </info:entry>\n                   </info:available-media>\n     \
    \              <xcon:conference-time>\n                    <xcon:entry>\n    \
    \                 <xcon:base>\n                       BEGIN:VCALENDAR\n      \
    \                 VERSION:2.0\n                       PRODID:-//Mozilla.org/NONSGML\n\
    \                                 Mozilla Calendar V1.0//EN\n                \
    \       BEGIN:VEVENT\n                       DTSTAMP: 20100127T140728Z\n     \
    \                  UID: 20100127T140728Z-345FDA-alice@example.com\n          \
    \             ORGANIZER:MAILTO:alice@example.com\n                       DTSTART:20100127T143000Z\n\
    \                       RRULE:FREQ=WEEKLY\n                       DTEND: 20100127T163000Z\n\
    \                       END:VEVENT\n                       END:VCALENDAR\n   \
    \                  </xcon:base>\n                     <xcon:mixing-start-offset\n\
    \                      required-participant=\"moderator\">\n                 \
    \         2010-01-27T14:29:00Z\n                     </xcon:mixing-start-offset>\n\
    \                     <xcon:mixing-end-offset\n                      required-participant=\"\
    participant\">\n                          2010-01-27T16:31:00Z\n             \
    \        </xcon:mixing-end-offset>\n                     <xcon:must-join-before-offset>\n\
    \                          2010-01-27T15:30:00Z\n                     </xcon:must-join-before-offset>\n\
    \                    </xcon:entry>\n                   </xcon:conference-time>\n\
    \               </info:conference-description>\n               <info:users>\n\
    \                  <xcon:join-handling>allow</xcon:join-handling>\n          \
    \        <xcon:allowed-users-list>\n                     <xcon:target uri=\"xcon-userid:alice@example.com\"\
    \n                                   method=\"dial-out\"/>\n                 \
    \    <xcon:target uri=\"sip:bob83@example.com\"\n                            \
    \       method=\"dial-out\"/>\n                     <xcon:target uri=\"sip:carol@example.com\"\
    \n                                   method=\"dial-out\"/>\n                 \
    \  </xcon:allowed-users-list>\n               </info:users>\n           </confInfo>\n\
    \        </ccmp:confRequest>\n     </ccmpRequest>\n  </ccmp:ccmpRequest>\n  2.\
    \ confResponse/create message (\"200\", \"success\")\n  <?xml version=\"1.0\"\
    \ encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpResponse\n       xmlns:xcon=\"\
    urn:ietf:params:xml:ns:xcon-conference-info\"\n       xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\
    \n       xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\">\n      <ccmpResponse\n\
    \         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:type=\"\
    ccmp:ccmp-conf-response-message-type\">\n       <confUserID>xcon-userid:Alice@example.com</confUserID>\n\
    \       <confObjID>xcon:6845432@example.com</confObjID>\n       <operation>create</operation>\n\
    \       <response-code>200</response-code>\n       <response-string>success</response-string>\n\
    \       <version>1</version>\n       <ccmp:confResponse/>\n      </ccmpResponse>\n\
    \  </ccmp:ccmpResponse>\n           Figure 8: Create Basic Conference Detailed\
    \ Messaging\n"
- title: 5.4.  Cloning an Existing Conference
  contents:
  - "5.4.  Cloning an Existing Conference\n   A client can also create another conference\
    \ by cloning an existing\n   conference, such as an active conference or conference\
    \ reservation.\n   This approach can be seen as a logical extension of the creation\
    \ of a\n   new conference using a blueprint: the difference is that, instead of\n\
    \   cloning the predefined settings listed in a blueprint, the settings\n   of\
    \ an existing conference would be cloned.\n   In this example, the client sends\
    \ a confRequest message with the\n   \"create\" <operation>, along with her XCON-USERID\
    \ in the <confUserID>\n   element and the XCON-URI of the conference from which\
    \ a new\n   conference is to be cloned in the <confObjID> element.\n   An example\
    \ of how a client can create a conference based on a\n   blueprint is provided\
    \ in Section 5.2.  The manner by which a client\n   in this example might learn\
    \ about a conference reservation or active\n   conferences is similar to the first\
    \ step in the blueprint example,\n   with the exception of querying for different\
    \ types of conference\n   objects supported by the specific conferencing system.\
    \  For instance,\n   in this example, the client clones a conference reservation\
    \ (i.e., an\n   inactive conference).\n   If the conferencing system can support\
    \ a new instance of the specific\n   type of conference (capabilities, etc.),\
    \ then the request results in\n   the creation of a conference, with an XCON-URI\
    \ in the form of a new\n   value in the <confObjID> parameter to reflect the newly\
    \ cloned\n   conference object returned in the confResponse message.\n   Alice\
    \                          ConfS\n    |                               |\n    |(1)confRequest(confUserID,\
    \     |\n    |       confObjID, create)      |\n    |------------------------------>|\n\
    \    |                 (a)Create +---|\n    |                    Conf   |   |\n\
    \    |                    Object |   |\n    |                    & IDs  +-->|\n\
    \    |                               |--+ (b) MS\n    |                      \
    \         |  | creates\n    |                               |  | conf and\n  \
    \  |                               |<-+ its ID\n    |                        \
    \       |   (confid=Y)\n    |                               |\n    |(2)confResponse(confUserID,\
    \    |\n    |      confObjID*,create,       |\n    |      200, success,      \
    \      |\n    |      version, confInfo)       |\n    |                       \
    \        |\n    |<------------------------------|\n    |                     \
    \          |\n    '                               '\n                 Figure 9:\
    \ Create Basic Conference - Clone\n   1.  Alice, a conferencing system client,\
    \ sends a confRequest message\n       to clone a conference based on an existing\
    \ conference\n       reservation.  Alice indicates this conference should be cloned\n\
    \       from the specified parent conference represented by the XCON-URI\n   \
    \    in the <confObjID> provided in the request.\n   2.  Upon receipt of the confRequest\
    \ message containing a \"create\"\n       <operation> and the aforementioned XCON-URI\
    \ in the <confObjID>,\n       the conference server ensures that such received\
    \ XCON-URI is\n       valid.  The conference server determines the appropriate\
    \ read/\n       write access of any users to be added to a conference based on\n\
    \       this XCON-URI (using membership, roles, etc.).  The conference\n     \
    \  server uses the received <confObjID> to clone a conference\n       reservation.\
    \  The conference server also reserves or allocates a\n       new XCON-URI (called\
    \ \"confObjID*\" in Figure 9) to be used for the\n       cloned conference object.\
    \  This new identifier is, of course,\n       different from the one associated\
    \ with the conference to be\n       cloned, since it represents a different conference\
    \ object.  Any\n       subsequent protocol requests from any of the members of\
    \ the\n       conference must use this new identifier.  The conference server\n\
    \       maintains the mapping between this conference ID and the parent\n    \
    \   conference object ID associated with the reservation through the\n       conference\
    \ instance, and this mapping is explicitly addressed\n       through the <cloning-parent>\
    \ element of the <conference-\n       description> in the new conference object.\n"
- title: 1. confRequest/create message (Alice clones an existing conference)
  contents:
  - "1. confRequest/create message (Alice clones an existing conference)\n  <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpRequest\n\
    \        xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n        xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\"\n        xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n     <ccmpRequest\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n           xsi:type=\"ccmp:ccmp-conf-request-message-type\">\n        <confUserID>xcon-userid:Alice@example.com</confUserID>\n\
    \        <confObjID>xcon:6845432@example.com</confObjID>\n        <operation>create</operation>\n\
    \        <ccmp:confRequest/>\n     </ccmpRequest>\n  </ccmp:ccmpRequest>\n"
- title: 2. confResponse/create message (created conference
  contents:
  - "2. confResponse/create message (created conference\n   object returned)\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpResponse\n\
    \       xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n       xmlns:info=\"\
    urn:ietf:params:xml:ns:conference-info\"\n       xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\
    >\n    <ccmpResponse\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n         xsi:type=\"ccmp:ccmp-conf-response-message-type\">\n       <confUserID>xcon-userid:Alice@example.com</confUserID>\n\
    \       <confObjID>xcon:8977794@example.com</confObjID>\n       <operation>create</operation>\n\
    \       <response-code>200</response-code>\n       <response-string>success</response-string>\n\
    \       <version>1</version>\n       <ccmp:confResponse>\n            <confInfo\
    \ entity=\"xcon:8977794@example.com\">\n              <info:conference-description>\n\
    \                  <info:display-text>\n                     New conference by\
    \ Alice cloned from 6845432\n                  </info:display-text>\n        \
    \           <info:maximum-user-count>10</info:maximum-user-count>\n          \
    \         <info:available-media>\n                          <info:entry label=\"\
    11\">\n                              <info:type>audio</info:type>\n          \
    \                </info:entry>\n                   </info:available-media>\n \
    \                  <xcon:cloning-parent>\n                      xcon:6845432@example.com\n\
    \                  </xcon:cloning-parent>\n               </info:conference-description>\n\
    \               <info:users>\n                   <xcon:join-handling>allow</xcon:join-handling>\n\
    \                      <xcon:allowed-users-list>\n                     <xcon:target\
    \ uri=\"sip:alice@example.com\"\n                                   method=\"\
    dial-out\"/>\n                     <xcon:target uri=\"sip:bob83@example.com\"\n\
    \                                   method=\"dial-out\"/>\n                  \
    \   <xcon:target uri=\"sip:carol@example.com\"\n                             \
    \      method=\"dial-out\"/>\n                   </xcon:allowed-users-list>\n\
    \               </info:users>\n                  <xcon:floor-information>\n  \
    \                   <xcon:floor-request-handling>\n                        confirm</xcon:floor-request-handling>\n\
    \                     <xcon:conference-floor-policy>\n                       <xcon:floor\
    \ id=\"1\">\n                        <xcon:media-label>11</xcon:media-label>\n\
    \                       </xcon:floor>\n                     </xcon:conference-floor-policy>\n\
    \                  </xcon:floor-information>\n              </confInfo>\n    \
    \      </ccmp:confResponse>\n      </ccmpResponse>\n  </ccmp:ccmpResponse>\n \
    \      Figure 10: Create Basic Conference (Clone) Detailed Messaging\n"
- title: 6.  Conference Users Scenarios and Examples
  contents:
  - "6.  Conference Users Scenarios and Examples\n   Section 5 showed examples describing\
    \ the several different ways a\n   conference might be created using CCMP.  This\
    \ section focuses on\n   user-related scenarios, i.e., typical scenarios that\
    \ may occur during\n   the lifetime of a conference, like adding new users and\
    \ handling\n   their media.  The following scenarios are based on those documented\n\
    \   in the XCON framework.  The examples assume that a conference has\n   already\
    \ been correctly established, with media, if applicable, per\n   one of the examples\
    \ in Section 5.\n"
- title: 6.1.  Adding a Party
  contents:
  - "6.1.  Adding a Party\n   In this example, Alice wants to add Bob to an established\
    \ conference.\n   In the following example we assume Bob is a new user of the\
    \ system,\n   which means Alice also needs to provide some details about him.\
    \  In\n   fact, the case of Bob already present as a user in the conferencing\n\
    \   system is much easier to address, and will be discussed later.\n    Alice\
    \          Bob\n    CMCC1          CMCC2       CMCCx       ConfS\n     |     \
    \          |           |           |\n     |(1) userRequest(confUserID,|     \
    \      |\n     |    confObjID, create,     |           |\n     |    userInfo)\
    \  |           |           |\n     |-------------------------------------->|\n\
    \     |               |           |           |\n     |               |      \
    \  (a) Create +---|\n     |               |           | Bob   |   |\n     |  \
    \             |           | as a  |   |\n     |               |           | user\
    \  +-->|\n     |               |           |           |\n     |(2) userResponse(confUserID,\
    \ confObjID |\n     |      create, 200, success, userInfo)  |\n     |<--------------------------------------|\n\
    \     |               |           |           |\n     |               |      \
    \     | (b) Focus |\n     |               |           |   sets up |\n     |  \
    \             |           | signaling |\n     |               |           |  \
    \  to Bob |\n     |               |<----------------------|\n     |          \
    \     |           |           |\n     |               |           | (c) Notify|\n\
    \     |               |           | (\"Bob just|\n     |               |     \
    \      |  joined\") |\n     |               |           |<----------|\n     |\
    \               |           |           |\n     '               '           '\
    \           '\n     '               '           '           '\n     '        \
    \       '           '           '\n        Figure 11: Client Manipulation of Conference\
    \ - Add a Party\n   1.  Alice sends a userRequest message with an operation of\
    \ \"create\"\n       to add Bob to the specific conference as identified by the\
    \ XCON-\n       URI in the <confObjID>.  The \"create\" <operation> also makes\
    \ sure\n       that Bob is created as a user in the whole conferencing system.\n\
    \       This is done by adding in the request a <userInfo> element\n       describing\
    \ Bob as a user.  This is needed in order to let the\n       conferencing system\
    \ be aware of Bob's characteristics.  In case\n       Bob was already a registered\
    \ user, Alice would just have\n       referenced him through his XCON-USERID in\
    \ the 'entity' attribute\n       of the <userInfo> field, without providing additional\
    \ data.  In\n       fact, that data (including, for instance, Bob's SIP-URI to\
    \ be\n       used subsequently for dial-out) would be obtained by referencing\n\
    \       the extant registration.  The conference server ensures that\n       Alice\
    \ has the appropriate authority based on the policies\n       associated with\
    \ that specific conference object to perform the\n       operation.  As mentioned\
    \ before, a new XCON-USERID is created for\n       Bob, and the <userInfo> is\
    \ used to update the conference object\n       accordingly.  As already seen in\
    \ Section 5.3, a placeholder\n       wildcard (\"xcon-userid:AUTO_GENERATE_1@example.com\"\
    \ in the CCMP\n       messages below) is used for the 'entity' attribute of the\n\
    \       <userInfo> element, to be replaced by the actual XCON-USERID\n       later;\n\
    \   2.  Bob is successfully added to the conference object, and an XCON-\n   \
    \    USERID is allocated for him (\"xcon-userid:Bob@example.com\"); this\n   \
    \    identifier is reported in the response as the value of the\n       'entity'\
    \ attribute of the returned <userInfo>;\n   3.  In the presented example, the\
    \ call signaling to add Bob to the\n       conference is instigated through the\
    \ focus as well.  As noted\n       previously, this is implementation specific.\
    \  In fact, a\n       conferencing system may accomplish different actions after\
    \ the\n       user creation, just as it may do nothing at all.  Among the\n  \
    \     possible actions, for instance, Bob may be added as a <target>\n       element\
    \ to the <allowed-users-list> element, whose joining\n       'method' may be either\
    \ \"dial-in\" or \"dial-out\".  Besides, out-of-\n       band notification mechanisms\
    \ may be involved as well, e.g., to\n       notify Bob via mail of the new conference,\
    \ including details as\n       the date, password, expected participants, and\
    \ so on (see\n       Section 4.3).\n      Once Bob has been successfully added\
    \ to the specified conference,\n      per updates to the state, and depending\
    \ upon the policies, other\n      participants (including Bob himself) may be\
    \ notified of the\n      addition of Bob to the conference via the conference\
    \ notification\n      service in use.\n"
- title: 1. userRequest/create message (Alice adds Bob)
  contents:
  - "1. userRequest/create message (Alice adds Bob)\n <?xml version=\"1.0\" encoding=\"\
    UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpRequest xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\
    \n        xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\n        xmlns:xcon=\"\
    urn:ietf:params:xml:ns:xcon-conference-info\">\n    <ccmpRequest xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:type=\"ccmp:ccmp-user-request-message-type\"\
    >\n        <confUserID>xcon-userid:Alice@example.com</confUserID>\n        <confObjID>xcon:8977878@example.com</confObjID>\n\
    \        <operation>create</operation>\n        <ccmp:userRequest>\n         \
    \ <userInfo entity=\"xcon-userid:AUTO_GENERATE_1@example.com\">\n            \
    \  <info:display-text>Bob</info:display-text>\n              <info:associated-aors>\n\
    \                  <info:entry>\n                    <info:uri>mailto:bob.depippis@example.com</info:uri>\n\
    \                    <info:display-text>Bob's email</info:display-text>\n    \
    \              </info:entry>\n              </info:associated-aors>\n        \
    \      <info:endpoint entity=\"sip:bob83@example.com\">\n                  <info:display-text>Bob's\
    \ laptop</info:display-text>\n              </info:endpoint>\n          </userInfo>\n\
    \        </ccmp:userRequest>\n    </ccmpRequest>\n  </ccmp:ccmpRequest>\n"
- title: 2. userResponse/create message (a new XCON-USERID is
  contents:
  - "2. userResponse/create message (a new XCON-USERID is\n   created for Bob and\
    \ he is added to the conference)\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    yes\"?>\n  <ccmp:ccmpResponse xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\
    \n         xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\n         xmlns:xcon=\"\
    urn:ietf:params:xml:ns:xcon-conference-info\">\n    <ccmpResponse xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:type=\"ccmp:ccmp-user-response-message-type\"\
    >\n        <confUserID>xcon-userid:Alice@example.com</confUserID>\n        <confObjID>xcon:8977878@example.com</confObjID>\n\
    \        <operation>create</operation>\n        <response-code>200</response-code>\n\
    \        <response-string>success</response-string>\n        <version>10</version>\n\
    \        <ccmp:userResponse>\n          <userInfo entity=\"xcon-userid:Bob@example.com\"\
    >\n              <info:display-text>Bob</info:display-text>\n              <info:associated-aors>\n\
    \                  <info:entry>\n                    <info:uri>mailto:bob.depippis@example.com</info:uri>\n\
    \                    <info:display-text>Bob's email</info:display-text>\n    \
    \              </info:entry>\n              </info:associated-aors>\n        \
    \      <info:endpoint entity=\"sip:bob83@example.com\">\n                  <info:display-text>Bob's\
    \ laptop</info:display-text>\n              </info:endpoint>\n          </userInfo>\n\
    \        </ccmp:userResponse>\n    </ccmpResponse>\n  </ccmp:ccmpResponse>\n \
    \                  Figure 12: Add Party Message Details\n"
- title: 6.2.  Muting a Party
  contents:
  - "6.2.  Muting a Party\n   This section provides an example of the muting of a\
    \ party in an\n   active conference.  We assume that the user to mute has already\
    \ been\n   added to the conference.  The document only addresses muting and not\n\
    \   unmuting, since the latter would involve an almost identical CCMP\n   message\
    \ flow anyway.  However, if any external floor control is\n   involved, whether\
    \ a particular conferencing client can actually mute/\n   unmute itself must be\
    \ considered by the conferencing system.\n      Please notice that interaction\
    \ between CCMP and floor control\n      should be carefully considered.  In fact,\
    \ handling CCMP- and BFCP-\n      based media control has to be considered as\
    \ multiple layers: that\n      is, a participant may have the BFCP floor granted,\
    \ but be muted by\n      means of CCMP.  If so, he would still be muted in the\
    \ conference,\n      and would only be unmuted if both the protocols allowed for\
    \ this.\n   Figure 13 provides an example of one client, Alice, impacting the\n\
    \   media state of another client, Bob.  This example assumes an\n   established\
    \ conference.  In this example, Alice, who is the moderator\n   of the conference,\
    \ wants to mute Bob on a medium-sized multi-party\n   conference, as his device\
    \ is not muted (and he's obviously not\n   listening to the call) and background\
    \ noise in his office environment\n   is disruptive to the conference.  BFCP floor\
    \ control is assumed not\n   to be involved.\n   Muting can be accomplished using\
    \ the <mute> control element\n   associated with the target user's audio, in which\
    \ case the conference\n   server must update the settings associated with the\
    \ user's media\n   streams.  Muting/unmuting can also be accomplished by directly\n\
    \   modifying the settings related to the target user's media streams,\n   which\
    \ is the approach shown in this example.  Specifically, Bob's\n   <userInfo> is\
    \ updated by modifying the <endpoint> element in the\n   <media> part related\
    \ to audio information, identified by the 'id'\n   attribute.  The modification\
    \ consists in setting the audio <status>\n   to \"recvonly\", in case of muting.\n\
    \    Alice          Bob\n    CMCC1          CMCC2       CMCCx        ConfS   \
    \             MS\n     |               |           |            |            \
    \      |\n     |(1) userRequest(subject,   |            |                  |\n\
    \     |    confUserID,confObjID,  |            |                  |\n     |  \
    \  update,userInfo)       |            |                  |\n     |          \
    \     |           |            |                  |\n     |--------------------------------------->|\
    \                  |\n     |               |           |            | Mute Bob\
    \         |\n     |               |           |            |----------------->|\n\
    \     |               |           |            |           200 OK |\n     |  \
    \             |           |            |<-----------------|\n     |          \
    \     |           |            |                  |\n     |               |<======\
    \ XXX Bob excluded from mix XXX ====>|\n     |               |           |   \
    \         |                  |\n     |               |         (a) Update +---|\
    \                  |\n     |               |             Bob in |   |        \
    \          |\n     |               |         data model |   |                \
    \  |\n     |               |            (muted) +-->|                  |\n   \
    \  |               |           |            |                  |\n     | (2)userResponse(confUserID,confObjID,\
    \  |                  |\n     |           update,200,success,version)  |     \
    \             |\n     |<---------------------------------------|             \
    \     |\n     |               |           |            |                  |\n\
    \     |               |           | (b) Notify |                  |\n     |  \
    \             |           |   (\"Bob is |                  |\n     |         \
    \      |           |    muted\") |                  |\n     |               |\
    \           |<-----------|                  |\n     |               |        \
    \   |            |                  |\n     '               '           '    \
    \        '                  '\n     '               '           '            '\
    \                  '\n     '               '           '            '        \
    \          '\n        Figure 13: Client Manipulation of Conference - Mute a Party\n\
    \   1.  Alice sends a userRequest message with an \"update\" <operation>\n   \
    \    and the <userInfo> with the <status> field in the <media> element\n     \
    \  for Bob's <endpoint> set to \"revconly\".  In order to authenticate\n     \
    \  herself, Alice provides in the <subject> request parameter her\n       registration\
    \ credentials (i.e., username and password).  The\n       <subject> parameter\
    \ is an optional one: its use can be systematic\n       whenever the conference\
    \ server envisages to authenticate each\n       requester.  In such cases, if\
    \ the client does not provide the\n       required authentication information,\
    \ the conferencing server\n       answers with a CCMP \"authenticationRequired\"\
    \ <response-code>,\n       indicating that the request cannot be processed without\
    \ including\n       the proper <subject> parameter.  The conference server ensures\n\
    \       that Alice has the appropriate authority based on the policies\n     \
    \  associated with that specific conference object to perform the\n       operation.\
    \  It recognizes that Alice is allowed to request the\n       specified modification,\
    \ since she is moderator of the target\n       conference, and updates the <userInfo>\
    \ in the conference object\n       reflecting that Bob's media is not to be mixed\
    \ with the\n       conference media.  If the conference server relies on a remote\n\
    \       media server for its multimedia functionality, it subsequently\n     \
    \  changes Bob's media profile accordingly by means of the related\n       protocol\
    \ interaction with the MS.  An example describing a\n       possible way of dealing\
    \ with such a situation using the media\n       server control architecture [RFC5567]\
    \ is described in Figure 31,\n       \"Simple Bridging: Framework Transactions\
    \ (2)\", in [CALL-FLOWS].\n   2.  A userResponse message with a \"200\" <response-code>\
    \ (\"success\")\n       is then sent to Alice.  Depending upon the policies, the\n\
    \       conference server may notify other participants (including Bob)\n    \
    \   of this update via any conference notification service that may\n       be\
    \ in use.\n 1. userRequest/update message (Alice mutes Bob)\n  <?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpRequest xmlns:info=\"\
    urn:ietf:params:xml:ns:conference-info\"\n        xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\
    \n        xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\">\n    <ccmpRequest\
    \ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:type=\"\
    ccmp:ccmp-user-request-message-type\">\n       <subject>\n          <username>Alice83</username>\n\
    \          <conference-password>13011983</conference-password>\n        </subject>\n\
    \        <confUserID>xcon-userid:Alice@example.com</confUserID>\n        <confObjID>xcon:8977878@example.com</confObjID>\n\
    \        <operation>update</operation>\n        <ccmp:userRequest>\n         \
    \   <userInfo entity=\"xcon-userid:Bob@example.com\">\n                <info:endpoint\
    \ entity=\"sip:bob83@example.com\">\n                    <info:media id=\"1\"\
    >\n                        <info:label>123</info:label>\n                    \
    \    <info:status>recvonly</info:status>\n                    </info:media>\n\
    \                </info:endpoint>\n            </userInfo>\n        </ccmp:userRequest>\n\
    \    </ccmpRequest>\n  </ccmp:ccmpRequest>\n"
- title: 2. userResponse/update message (Bob has been muted)
  contents:
  - "2. userResponse/update message (Bob has been muted)\n  <?xml version=\"1.0\"\
    \ encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpResponse xmlns:info=\"\
    urn:ietf:params:xml:ns:conference-info\"\n               xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\
    \n               xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\">\n\
    \    <ccmpResponse xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n \
    \                 xsi:type=\"ccmp:ccmp-user-response-message-type\">\n       \
    \ <confUserID>xcon-userid:Alice@example.com</confUserID>\n        <confObjID>xcon:8977878@example.com</confObjID>\n\
    \        <operation>update</operation>\n        <response-code>200</response-code>\n\
    \        <response-string>success</response-string>\n            <version>7</version>\n\
    \        <ccmp:userResponse/>\n    </ccmpResponse>\n  </ccmp:ccmpResponse>\n \
    \                     Figure 14: Mute Message Details\n"
- title: 6.3.  Conference Announcements and Recordings
  contents:
  - "6.3.  Conference Announcements and Recordings\n   This section deals with features\
    \ that are typically required in a\n   conferencing system, such as public announcements\
    \ (e.g., to notify\n   vocally that a new user joined a conference) and name recording.\n\
    \   While this is not strictly CCMP-related (the CCMP signaling is\n   actually\
    \ the same as the one seen in Section 6.1), it is an\n   interesting scenario\
    \ to address to see how several components of an\n   XCON-compliant architecture\
    \ interact with each other to make it\n   happen.\n   In this example, as shown\
    \ in Figure 15, Alice is joining Bob's\n   conference that requires that she first\
    \ enter a passcode.  After\n   successfully entering the passcode, an announcement\
    \ prompts Alice to\n   speak her name so it can be recorded.  When Alice is added\
    \ to the\n   active conference, the recording is played back to all the existing\n\
    \   participants.  A very similar example is presented in Figure 33 of\n   [CALL-FLOWS].\n\
    \   CMCC  Alice                    ConfS                         MS\n        |\
    \                            |                            |\n        |(1)userRequest(confObjID,\
    \   |                            |\n        |         create,userInfo)   |   \
    \                         |\n        |--------------------------->|          \
    \                  |\n        |                            |--+ Alice is     \
    \           |\n        |                            |  | new in the          \
    \    |\n        |                            |<-+ system (create          |\n\
    \        |                            |    confUserID)             |\n       \
    \ |           ConfS handles +--|                            |\n        |     \
    \      SIP signaling |  |                            |\n        |    (Alice<->ConfS<->MS)\
    \ +->|                            |\n        |                            |  \
    \                          |\n        |                            |--+ A password\
    \ is           |\n        |                            |  | required for     \
    \       |\n        |                            |<-+ that conference         |\n\
    \        |                            |                            |\n       \
    \ |                            | Request IVR menu (PIN)     |\n        |     \
    \                       |--------------------------->|\n        |            \
    \                |                            |\n        |<========= MS gets PIN\
    \ from Alice through DTMF =========>|\n        |                            |\
    \                            |\n        |                            |       \
    \ Provided PIN is...  |\n        |                            |<---------------------------|\n\
    \        |                   Check +--|                            |\n       \
    \ |                     PIN |  |                            |\n        |     \
    \                    +->|                            |\n        |            \
    \                |--+ Alice must              |\n        |                   \
    \         |  | record her              |\n        |                          \
    \  |<-+ name                    |\n        |                            |    \
    \                        |\n        |                            | Request name\
    \ recording     |\n        |                            |--------------------------->|\n\
    \        |                            |                            |\n       \
    \ |<========= MS records Alice's audio RTP (name) =========>|\n        |     \
    \                       |                            |\n        |            \
    \                |            Audio recording |\n        |                   \
    \         |<---------------------------|\n        |                Complete +--|\
    \                            |\n        |                creation |  |       \
    \                     |\n        |                of Alice +->|              \
    \              |\n        |                            |                     \
    \       |\n        |                            |                            |\n\
    \        | (2)userResponse(confUserID,|                            |\n       \
    \ |       confObjID,create,200,|                            |\n        |     \
    \      success,version) |                            |\n        |<---------------------------|\
    \                            |\n        |                            |       \
    \                     |\n        '                            '              \
    \              '\n                  Figure 15: Recording and Announcements\n \
    \  1.  Upon receipt of the userRequest message from Alice to be added to\n   \
    \    Bob's conference, the conference server determines that a\n       password\
    \ is required for this specific conference.  Thus, an\n       announcement asking\
    \ Alice to enter the password is sent back.\n       This may be achieved by means\
    \ of typical IVR functionality.  Once\n       Alice enters the password, it is\
    \ validated against the policies\n       associated with Bob's active conference.\
    \  The conference server\n       then connects to a server that prompts and records\
    \ Alice's name.\n       The conference server must also determine whether Alice\
    \ is\n       already a user of this conferencing system or whether she is a\n\
    \       new user.  In this case, Alice is a new user for this\n       conferencing\
    \ system, so a new XCON-USERID is created for Alice.\n       Based upon the contact\
    \ information provided by Alice, the call\n       signaling to add Alice to the\
    \ conference is instigated through\n       the focus.\n   2.  The conference server\
    \ sends Alice a userResponse message that\n       includes in the <confUserID>\
    \ the XCON-USERID assigned by the\n       conferencing system to her.  This would\
    \ allow Alice to later\n       perform operations on the conference (if she were\
    \ to have the\n       appropriate policies), including registering for event\n\
    \       notifications associated with the conference.  Once the call\n       signaling\
    \ indicates that Alice has been successfully added to the\n       specific conference,\
    \ per updates to the state, and depending upon\n       the policies, other participants\
    \ (e.g., Bob) are notified of the\n       addition of Alice to the conference\
    \ via the conference\n       notification service and an announcement is provided\
    \ to all the\n       participants indicating that Alice has joined the conference.\n\
    \  1. userRequest/create message  (a new conferencing system client,\n     Alice,\
    \ enters Bob's conference)\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    yes\"?>\n  <ccmp:ccmpRequest\n       xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\
    \n             xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\n             xmlns:xcon=\"\
    urn:ietf:params:xml:ns:xcon-conference-info\">\n      <ccmpRequest xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\"\n              xsi:type=\"ccmp:ccmp-user-request-message-type\"\
    >\n          <confObjID>xcon:bobConf@example.com</confObjID>\n          <operation>create</operation>\n\
    \          <ccmp:userRequest>\n            <userInfo entity=\"xcon-userid:AUTO_GENERATE_1@example.com\"\
    >\n                  <info:associated-aors>\n                      <info:entry>\n\
    \                          <info:uri>\n                             mailto:Alice83@example.com\n\
    \                          </info:uri>\n                          <info:display-text>email</info:display-text>\n\
    \                      </info:entry>\n                  </info:associated-aors>\n\
    \                  <info:endpoint entity=\"sip:alice_789@example.com\"/>\n   \
    \           </userInfo>\n          </ccmp:userRequest>\n      </ccmpRequest>\n\
    \  </ccmp:ccmpRequest>\n  2. userResponse/create message (Alice provided with\
    \ a new XCON-USERID\n     and added to the conference)\n  <?xml version=\"1.0\"\
    \ encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpResponse\n      xmlns:info=\"\
    urn:ietf:params:xml:ns:conference-info\"\n      xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\
    \n      xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\">\n     <ccmpResponse\
    \ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                  \
    \  xsi:type=\"ccmp:ccmp-user-response-message-type\">\n          <confUserID>xcon-userid:Alice@example.com</confUserID>\n\
    \          <confObjID>xcon:bobConf@example.com</confObjID>\n          <operation>create</operation>\n\
    \          <response-code>200</response-code>\n          <response-string>success</response-string>\n\
    \          <version>5</version>\n          <ccmp:userResponse/>\n      </ccmpResponse>\n\
    \  </ccmp:ccmpResponse>\n                 Figure 16: Announcement Messaging Details\n"
- title: 6.4.  Monitoring for DTMF
  contents:
  - "6.4.  Monitoring for DTMF\n   Conferencing systems also often need the capability\
    \ to monitor for\n   dual-tone multi-frequency (DTMF) from each individual participant.\n\
    \   This would typically be used to enter the identifier and/or access\n   code\
    \ for joining a specific conference.  This feature is also often\n   exploited\
    \ to achieve interaction between participants and the\n   conferencing system\
    \ for non-XCON-aware user agents (e.g., using DTMF\n   tones to get muted/unmuted).\n\
    \   An example of DTMF monitoring, within the context of the framework\n   elements,\
    \ is shown in Figure 15.  The media control architecture and\n   protocols [RFC5567]\
    \ can be used by the conference server for all the\n   DTMF interactions.  Examples\
    \ for DTMF interception in conference\n   instances are presented in [CALL-FLOWS].\n"
- title: 6.5.  Entering a Password-Protected Conference
  contents:
  - "6.5.  Entering a Password-Protected Conference\n   Some conferences may require\
    \ a password to be provided by a user who\n   wants to manipulate the conference\
    \ objects (e.g., join, update,\n   delete) via CCMP.  In this case, a password\
    \ would be included in the\n   <conference-password> element in the appropriate\
    \ <conference-uris>\n   entry of the conference data model.  Such password must\
    \ be then\n   included in the <conference-password> field in the CCMP request\n\
    \   addressed to that conference.\n   In the following example, Alice, a conferencing\
    \ system client,\n   attempts to join a password-protected conference.\n   1.\
    \  Alice sends a userRequest message with a \"create\" <operation> to\n      \
    \ add herself in the conference with XCON-URI\n       \"xcon:8977777@example.com\"\
    \ (written in the <confObjID>\n       parameter).  Alice provides her XCON-USERID\
    \ via the <confUserID>\n       field of the userRequest message and leaves out\
    \ the <userInfo>\n       one (first-party join).  In this first attempt, she doesn't\n\
    \       insert any password parameter.\n   2.  Upon receipt the userRequest/create\
    \ message, the conference\n       server detects that the indicated conference\
    \ is not joinable\n       without providing the appropriate passcode.  A userResponse\n\
    \       message with a \"423\" <response-code> (\"conference password\n      \
    \ required\") is returned to Alice to indicate that her join has\n       been\
    \ refused and that she has to resend her request including the\n       appropriate\
    \ conference password in order to participate.\n   3.  After getting the passcode\
    \ through out-of-band mechanisms, Alice\n       provides it in the proper <conference-password>\
    \ request field of\n       a new userRequest/create message and sends the updated\
    \ request\n       back to the server.\n   4.  The conference server checks the\
    \ provided password and then adds\n       Alice to the protected conference. \
    \ After that, a userResponse\n       message with a \"200\" <response-code> (\"\
    success\") is sent to\n       Alice.\n 1. userRequest/create message (Alice tries\
    \ to enter the conference\n    without providing the password)\n <?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <ccmp:ccmpRequest\n      xmlns:info=\"\
    urn:ietf:params:xml:ns:conference-info\"\n            xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\
    \n            xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\">\n  \
    \   <ccmpRequest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   \
    \          xsi:type=\"ccmp:ccmp-user-request-message-type\">\n         <confUserID>xcon-userid:Alice@example.com</confUserID>\n\
    \         <confObjID>xcon:8977794@example.com</confObjID>\n         <operation>create</operation>\n\
    \         <ccmp:userRequest/>\n     </ccmpRequest>\n </ccmp:ccmpRequest>\n 2.\
    \ userResponse/create message (\"423\", \"conference password required\")\n <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <ccmp:ccmpResponse\n\
    \     xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n     xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\"\n     xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n    <ccmpResponse xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\
    \                   xsi:type=\"ccmp:ccmp-user-response-message-type\">\n     \
    \    <confUserID>xcon-userid:Alice@example.com</confUserID>\n         <confObjID>xcon:8977794@example.com</confObjID>\n\
    \         <operation>create</operation>\n         <response-code>423</response-code>\n\
    \         <response-string>conference password required</response-string>\n  \
    \       <ccmp:userResponse/>\n     </ccmpResponse>\n </ccmp:ccmpResponse>\n 3.\
    \ userRequest/create message (Alice provides the password)\n <?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <ccmp:ccmpRequest\n      xmlns:info=\"\
    urn:ietf:params:xml:ns:conference-info\"\n            xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\
    \n            xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\">\n  \
    \   <ccmpRequest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   \
    \          xsi:type=\"ccmp:ccmp-user-request-message-type\">\n         <confUserID>xcon-userid:Alice@example.com</confUserID>\n\
    \         <confObjID>xcon:8977794@example.com</confObjID>\n         <operation>create</operation>\n\
    \         <conference-password>8601</conference-password>\n         <ccmp:userRequest/>\n\
    \     </ccmpRequest>\n </ccmp:ccmpRequest>\n 4. userResponse/create message\n\
    \    (Alice has been added to the conference)\n <?xml version=\"1.0\" encoding=\"\
    UTF-8\" standalone=\"yes\"?>\n <ccmp:ccmpResponse\n     xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\
    \n     xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\n     xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n    <ccmpResponse xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\
    \                   xsi:type=\"ccmp:ccmp-user-response-message-type\">\n     \
    \    <confUserID>xcon-userid:Alice@example.com</confUserID>\n         <confObjID>xcon:8977794@example.com</confObjID>\n\
    \         <operation>create</operation>\n         <response-code>200</response-code>\n\
    \         <response-string>success</response-string>\n         <version>10</version>\n\
    \         <ccmp:userResponse/>\n     </ccmpResponse>\n </ccmp:ccmpResponse>\n\
    \      Figure 17: Password-Protected Conference Join Messages Details\n"
- title: 7.  Sidebars Scenarios and Examples
  contents:
  - "7.  Sidebars Scenarios and Examples\n   While creating conferences and manipulating\
    \ users and their media are\n   sufficient for many scenarios, there may be cases\
    \ when more complex\n   management is needed.\n   In fact, a feature typically\
    \ required in conferencing systems is the\n   ability to create sidebars.  A sidebar\
    \ is basically a child\n   conference that usually includes a subset of the participants\
    \ of the\n   parent conference and a subset of its media as well.  Sidebars are\n\
    \   typically required whenever some of the participants in a conference\n   want\
    \ a private discussion, without interfering with the main\n   conference.\n  \
    \ This section deals with some typical scenarios using a sidebar, like\n   whispering,\
    \ private messaging, and coaching scenarios.  The first\n   subsections present\
    \ some examples of how a generic sidebar can be\n   created, configured, and managed.\n"
- title: 7.1.  Internal Sidebar
  contents:
  - "7.1.  Internal Sidebar\n   Figure 18 provides an example of one client, Alice,\
    \ involved in an\n   active conference with Bob and Carol.  Alice wants to create\
    \ a\n   sidebar to have a side discussion with Bob while still viewing the\n \
    \  video associated with the main conference.  Alternatively, the audio\n   from\
    \ the main conference could be maintained at a reduced volume.\n   Alice initiates\
    \ the sidebar by sending a request to the ConfS to\n   create a conference reservation\
    \ based upon the active conference\n   object.  Alice and Bob would remain on\
    \ the roster of the main\n   conference, such that other participants could be\
    \ aware of their\n   participation in the main conference, while an internal-sidebar\n\
    \   conference is occurring.  Besides, Bob decides that he is not\n   interested\
    \ in still receiving the conference audio in background (not\n   even at a lower\
    \ volume as Alice configured) and so modifies the\n   sidebar in order to make\
    \ that stream inactive for him.\n  Alice                   Bob               \
    \     ConfS\n    |                      |                       |\n    |(1) sidebarByValRequest(confUserID,\
    \           |\n    |                  confObjID,create)           |\n    |--------------------------------------------->|\n\
    \    |                      |                       |\n    |                 \
    \     |        (a) Create +---|\n    |                      |    sidebar-by-val\
    \ |   |\n    |                      |     (new conf obj |   |\n    |         \
    \             |       cloned from +-->|\n    |                      |        confObjID)\
    \     | Sidebar now has\n    |                      |                       |\
    \ id confObjID*\n    |(2) sidebarByValResponse(confUserID,          | (parent\
    \ mapping\n    |     (confObjID*,create,200,success,          | conf<->sidebar)\n\
    \    |         version,sidebarByValInfo)            |\n    |<---------------------------------------------|\n\
    \    |                      |                       |\n    |(3) sidebarByValRequest\
    \                       |\n    |       (confUserID, confObjID*,              \
    \ |\n    |       update,sidebarByValInfo)               |\n    |--------------------------------------------->|\n\
    \    |                      |                       |\n    |                 \
    \     |        (b) Update +---|\n    |                      |    sidebar-by-val\
    \ |   |\n    |                      |     (media, users |   |\n    |         \
    \             |       etc.)       +-->|\n    |                      |        \
    \               | Sidebar is\n    |                      |                   \
    \    | modified\n    |(4) sidebarByValResponse(confUserID,          |\n    | \
    \                confObjID*, update,          |\n    |              200, success,\
    \ version)          |\n    |<---------------------------------------------|\n\
    \    |                      |                       |\n    |                 \
    \     |(5) userRequest        |\n    |                      |      (confUserID',\
    \    |\n    |                      |       confObjID*,     |\n    |          \
    \            |       update,userInfo)|\n    |                      |---------------------->|\n\
    \    |                      |                       |\n    |                 \
    \     |        (c) Update +---|\n    |                      |     user settings\
    \ |   |\n    |                      |     (Bob's media) |   |\n    |         \
    \             |                   +-->|\n    |                      |        \
    \               | Sidebar is modified\n    |                      |          \
    \             | (original audio\n    |                      |                \
    \       | inactive for Bob)\n    |                      |(6) userResponse    \
    \   |\n    |                      |     (confUserID',     |\n    |           \
    \           |      confObjID*,      |\n    |                      |      update,\
    \ 200,     |\n    |                      |      success,version) |\n    |    \
    \                  |<----------------------|\n    |                      |   \
    \                    |\n    '                      '                       '\n\
    \    '                      '                       '\n    '                 \
    \     '                       '\n            Figure 18: Client Creation of a Sidebar\
    \ Conference\n   1.  Upon receipt of CCMP sidebarByValRequest message to create\
    \ a new\n       sidebar based upon the conference whose XCON-URI is in the\n \
    \      <confObjID> received in the request, the conference server uses\n     \
    \  such XCON-URI to clone a conference reservation for the sidebar.\n       The\
    \ sidebar reservation is NOT independent of the active main\n       conference\
    \ (i.e., parent).  The conference server also allocates\n       a new XCON-URI\
    \ (\"confObjID*\" in Figure 18) for that sidebar to be\n       used for any subsequent\
    \ protocol requests from any of the members\n       of the conference.  The new\
    \ XCON-URI is returned in the response\n       message <confObjID> parameter.\n\
    \   2.  The relationship information is provided in the\n       sidebarByValResponse\
    \ message, specifically in the <sidebar-\n       parent> element.  A dump of the\
    \ complete representation of the\n       main/parent conference is provided below\
    \ as well to show how the\n       cloning process for the creation of the sidebar\
    \ could take place.\n   3.  Upon receipt of the sidebarByValResponse message to\
    \ reserve the\n       conference, Alice can now create an active conference using\
    \ that\n       reservation or create additional reservations based upon the\n\
    \       existing reservations.  In this example, Alice wants only Bob to\n   \
    \    be involved in the sidebar; thus, she manipulates the membership\n      \
    \ so that only the two of them appear in the <allowed-users-list>\n       section.\
    \  Alice also wants both audio and video from the original\n       conference\
    \ to be available in the sidebar.  For what concerns the\n       media belonging\
    \ to the sidebar itself, Alice wants the audio to\n       be restricted to the\
    \ participants in the sidebar (that is, Bob\n       and herself).  Additionally,\
    \ Alice manipulates the media values\n       to receive the audio from the main\
    \ conference at a reduced\n       volume, so that the communication between her\
    \ and Bob isn't\n       affected.  Alice sends a sidebarByValRequest message with\
    \ an\n       operation of \"update\" along with the <sidebarByValInfo>\n     \
    \  containing the aforementioned sidebar modifications.\n   4.  Upon receipt of\
    \ the sidebarByValRequest message to update the\n       sidebar reservation, the\
    \ conference server ensures that Alice has\n       the appropriate authority based\
    \ on the policies associated with\n       that specific conference object to perform\
    \ the operation.  The\n       conference server must also validate the updated\
    \ information in\n       the reservation, ensuring that a member like Bob is already\
    \ a\n       user of this conference server.  Once the data for the conference\n\
    \       identified by the <confObjID> is updated, the conference server\n    \
    \   sends a sidebarByValResponse message to Alice.  Depending upon\n       the\
    \ policies, the initiator of the request (i.e., Alice) and the\n       participants\
    \ in the sidebar (i.e., Bob) may be notified of his\n       addition to the sidebar\
    \ via the conference notification service.\n   5.  At this point, Bob sends a\
    \ userRequest message to the conference\n       server with an operation of \"\
    update\" to completely disable the\n       background audio from the parent conference,\
    \ since it prevents\n       him from understanding what Alice says in the sidebar.\n\
    \   6.  Notice that Bob's request only changes the media perspective for\n   \
    \    Bob.  Alice keeps on receiving both the audio from Bob and the\n       background\
    \ from the parent conference.  This request may be\n       relayed by the conference\
    \ server to the media server handling the\n       mixing, if present.  Upon completion\
    \ of the change, the\n       conference server sends a userResponse message to\
    \ Bob.  Depending\n       upon the policies, the initiator of the request (i.e.,\
    \ Bob) and\n       the participants in the sidebar (i.e., Alice) may be notified\
    \ of\n       this change via the conference notification service.\n   The following\
    \ conference object represents the conference in which\n   the sidebar is to be\
    \ created.  It will be used by the conference\n   server to create the new conference\
    \ object associated with the\n   sidebar.\n"
- title: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  contents:
  - "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <info:conference-info\n\
    \                xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n     \
    \           xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\n                xmlns:xcon=\"\
    urn:ietf:params:xml:ns:xcon-conference-info\"\n                entity=\"xcon:8977878@example.com\"\
    >\n     <info:conference-description>\n        <info:display-text>MAIN CONFERENCE</info:display-text>\n\
    \        <info:conf-uris>\n            <info:entry>\n               <info:uri>sip:8977878@example.com</info:uri>\n\
    \               <info:display-text>conference sip uri</info:display-text>\n  \
    \          </info:entry>\n        </info:conf-uris>\n        <info:available-media>\n\
    \          <info:entry label=\"123\">\n            <info:display-text>main conference\
    \ audio</info:display-text>\n            <info:type>audio</info:type>\n      \
    \      <info:status>sendrecv</info:status>\n          </info:entry>\n        \
    \  <info:entry label=\"456\">\n            <info:display-text>main conference\
    \ video</info:display-text>\n            <info:type>video</info:type>\n      \
    \      <info:status>sendrecv</info:status>\n            <xcon:controls>\n    \
    \                <xcon:video-layout>single-view</xcon:video-layout>\n        \
    \   </xcon:controls>\n          </info:entry>\n        </info:available-media>\n\
    \    </info:conference-description>\n    <info:conference-state>\n        <info:active>true</info:active>\n\
    \    </info:conference-state>\n    <info:users>\n        <info:user entity=\"\
    xcon-userid:Alice@example.com\">\n            <info:display-text>Alice</info:display-text>\n\
    \            <info:endpoint entity=\"sip:Alice@example.com\">\n              \
    \  <info:media id=\"1\">\n                    <info:label>123</info:label>\n \
    \                   <info:status>sendrecv</info:status>\n                </info:media>\n\
    \                <info:media id=\"2\">\n                    <info:label>456</info:label>\n\
    \                    <info:status>sendrecv</info:status>\n                </info:media>\n\
    \            </info:endpoint>\n        </info:user>\n        <info:user entity=\"\
    xcon-userid:Bob@example.com\">\n            <info:display-text>Bob</info:display-text>\n\
    \            <info:endpoint entity=\"sip:bob83@example.com\">\n              \
    \  <info:media id=\"1\">\n                    <info:label>123</info:label>\n \
    \                   <info:status>sendrecv</info:status>\n                </info:media>\n\
    \                <info:media id=\"2\">\n                    <info:label>456</info:label>\n\
    \                    <info:status>sendrecv</info:status>\n                </info:media>\n\
    \            </info:endpoint>\n        </info:user>\n        <info:user entity=\"\
    xcon-userid:Carol@example.com\">\n            <info:display-text>Carol</info:display-text>\n\
    \            <info:endpoint entity=\"sip:carol@example.com\">\n              \
    \  <info:media id=\"1\">\n                    <info:label>123</info:label>\n \
    \                   <info:status>sendrecv</info:status>\n                </info:media>\n\
    \                <info:media id=\"2\">\n                    <info:label>456</info:label>\n\
    \                    <info:status>sendrecv</info:status>\n                </info:media>\n\
    \            </info:endpoint>\n        </info:user>\n    </info:users>\n  </info:conference-info>\n\
    \             Figure 19: Conference with Alice, Bob, and Carol\n   The sidebar\
    \ creation happens through a cloning of the parent\n   conference.  Once the sidebar\
    \ is created, an update request makes\n   sure that the sidebar is customized\
    \ as needed.  The following\n   protocol dump makes the process clearer.\n"
- title: 1. sidebarByValRequest/create message (Alice creates an
  contents:
  - "1. sidebarByValRequest/create message (Alice creates an\n   internal sidebar)\n\
    \  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpRequest\
    \ xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n               xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\"\n               xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n    <ccmpRequest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\
    \                 xsi:type=\"ccmp:ccmp-sidebarByVal-request-message-type\">\n\
    \        <confUserID>xcon-userid:Alice@example.com</confUserID>\n        <confObjID>xcon:8977878@example.com</confObjID>\n\
    \        <operation>create</operation>\n        <ccmp:sidebarByValRequest/>\n\
    \    </ccmpRequest>\n  </ccmp:ccmpRequest>\n"
- title: 2. sidebarByValResponse/create message (sidebar returned)
  contents:
  - "2. sidebarByValResponse/create message (sidebar returned)\n  <?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpResponse\n        \
    \      xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n          \
    \    xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n              xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\">\n    <ccmpResponse xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n                xsi:type=\"ccmp:ccmp-sidebarByVal-response-message-type\">\n\
    \        <confUserID>xcon-userid:Alice@example.com</confUserID>\n        <confObjID>xcon:8974545@example.com</confObjID>\n\
    \        <operation>create</operation>\n        <response-code>200</response-code>\n\
    \        <response-string>success</response-string>\n            <version>1</version>\n\
    \        <ccmp:sidebarByValResponse>\n            <sidebarByValInfo entity=\"\
    xcon:8974545@example.com\">\n                <info:conference-description>\n \
    \                   <info:display-text>\n                         SIDEBAR CONFERENCE\
    \ registered by Alice\n                    </info:display-text>\n            \
    \        <info:available-media>\n                        <info:entry label=\"\
    123\">\n                            <info:display-text>\n                    \
    \              main conference audio\n                            </info:display-text>\n\
    \                            <info:type>audio</info:type>\n                  \
    \          <info:status>sendrecv</info:status>\n                        </info:entry>\n\
    \                        <info:entry label=\"456\">\n                        \
    \    <info:display-text>\n                                  main conference video\n\
    \                            </info:display-text>\n                          \
    \  <info:type>video</info:type>\n                            <info:status>sendrecv</info:status>\n\
    \                        </info:entry>\n                    </info:available-media>\n\
    \                </info:conference-description>\n                <info:conference-state>\n\
    \                    <info:active>false</info:active>\n                </info:conference-state>\n\
    \                <info:users>\n                    <xcon:allowed-users-list>\n\
    \                        <xcon:target method=\"dial-in\"\n                   \
    \           uri=\"xcon-userid:Alice@example.com\"/>\n                        <xcon:target\
    \ method=\"dial-in\"\n                              uri=\"xcon-userid:Bob@example.com\"\
    />\n                        <xcon:target method=\"dial-in\"\n                \
    \              uri=\"xcon-userid:Carol@example.com\"/>\n                    </xcon:allowed-users-list>\n\
    \                    <xcon:sidebar-parent>\n                         xcon:8977878@example.com\n\
    \                    </xcon:sidebar-parent>\n                </info:users>\n \
    \           </sidebarByValInfo>\n        </ccmp:sidebarByValResponse>\n    </ccmpResponse>\n\
    \  </ccmp:ccmpResponse>\n"
- title: 3. sidebarByValRequest/update message (Alice updates the
  contents:
  - "3. sidebarByValRequest/update message (Alice updates the\n   created sidebar)\n"
- title: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  contents:
  - "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpRequest\n\
    \            xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n    \
    \        xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n            xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\">\n    <ccmpRequest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n                 xsi:type=\"ccmp:ccmp-sidebarByVal-request-message-type\">\n\
    \        <confUserID>xcon-userid:Alice@example.com</confUserID>\n        <confObjID>xcon:8974545@example.com</confObjID>\n\
    \        <operation>update</operation>\n        <ccmp:sidebarByValRequest>\n \
    \           <sidebarByValInfo entity=\"xcon:8974545@example.com\">\n         \
    \       <info:conference-description>\n                  <info:display-text>\n\
    \                        private sidebar Alice - Bob\n                  </info:display-text>\n\
    \                  <info:available-media>\n                        <info:entry\
    \ label=\"123\">\n                            <info:display-text>\n          \
    \                      main conference audio\n                            </info:display-text>\n\
    \                            <info:type>audio</info:type>\n                  \
    \          <info:status>recvonly</info:status>\n                            <xcon:controls>\n\
    \                                <xcon:gain>-60</xcon:gain>\n                \
    \            </xcon:controls>\n                        </info:entry>\n       \
    \                 <info:entry label=\"456\">\n                            <info:display-text>\n\
    \                                main conference video\n                     \
    \       </info:display-text>\n                            <info:type>video</info:type>\n\
    \                            <info:status>recvonly</info:status>\n           \
    \             </info:entry>\n                        <info:entry label=\"AUTO_GENERATE_1\"\
    >\n                            <info:display-text>\n                         \
    \       sidebar audio\n                            </info:display-text>\n    \
    \                        <info:type>audio</info:type>\n                      \
    \      <info:status>sendrecv</info:status>\n                        </info:entry>\n\
    \                        <info:entry label=\"AUTO_GENERATE_2\">\n            \
    \                <info:display-text>\n                                sidebar\
    \ video\n                            </info:display-text>\n                  \
    \          <info:type>video</info:type>\n                            <info:status>sendrecv</info:status>\n\
    \                        </info:entry>\n                    </info:available-media>\n\
    \                </info:conference-description>\n                <info:users>\n\
    \                    <xcon:allowed-users-list>\n                        <xcon:target\
    \ method=\"dial-out\"\n                              uri=\"xcon-userid:Alice@example.com\"\
    />\n                        <xcon:target method=\"dial-out\"\n               \
    \               uri=\"xcon-userid:Bob@example.com\"/>\n                    </xcon:allowed-users-list>\n\
    \                </info:users>\n            </sidebarByValInfo>\n        </ccmp:sidebarByValRequest>\n\
    \    </ccmpRequest>\n"
- title: </ccmp:ccmpRequest>
  contents:
  - '</ccmp:ccmpRequest>

    '
- title: 4. sidebarByValResponse/update message (sidebar's
  contents:
  - "4. sidebarByValResponse/update message (sidebar's\n   updates accepted)\n  <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpResponse\n\
    \                xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n\
    \                xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n     \
    \           xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\">\n    <ccmpResponse\
    \ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                xsi:type=\"\
    ccmp:ccmp-sidebarByVal-response-message-type\">\n        <confUserID>xcon-userid:Alice@example.com</confUserID>\n\
    \        <confObjID>xcon:8974545@example.com</confObjID>\n        <operation>update</operation>\n\
    \        <response-code>200</response-code>\n        <response-string>success</response-string>\n\
    \            <version>2</version>\n        <ccmp:sidebarByValResponse/>\n    </ccmpResponse>\n\
    \  </ccmp:ccmpResponse>\n"
- title: 5. userRequest/update message (Bob updates his media)
  contents:
  - "5. userRequest/update message (Bob updates his media)\n  <?xml version=\"1.0\"\
    \ encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpRequest\n           xmlns:xcon=\"\
    urn:ietf:params:xml:ns:xcon-conference-info\"\n           xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\
    \n           xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\">\n      <ccmpRequest\
    \ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                  \
    \ xsi:type=\"ccmp:ccmp-user-request-message-type\">\n        <confUserID>xcon-userid:Bob@example.com</confUserID>\n\
    \        <confObjID>xcon:8974545@example.com</confObjID>\n        <operation>update</operation>\n\
    \        <ccmp:userRequest>\n            <userInfo entity=\"xcon-userid:Bob@example.com\"\
    >\n                <info:endpoint entity=\"sip:bob83@example.com\">\n        \
    \            <info:media id=\"1\">\n                        <info:display-text>\n\
    \                            main conference audio\n                        </info:display-text>\n\
    \                        <info:label>123</info:label>\n                      \
    \  <info:status>inactive</info:status>\n                    </info:media>\n  \
    \              </info:endpoint>\n            </userInfo>\n        </ccmp:userRequest>\n\
    \    </ccmpRequest>\n"
- title: </ccmp:ccmpRequest>
  contents:
  - '</ccmp:ccmpRequest>

    '
- title: 6. userResponse/update message (Bob's preferences are set)
  contents:
  - "6. userResponse/update message (Bob's preferences are set)\n  <?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpResponse xmlns:info=\"\
    urn:ietf:params:xml:ns:conference-info\"\n               xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\
    \n               xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\">\n\
    \    <ccmpResponse xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n \
    \                 xsi:type=\"ccmp:ccmp-user-response-message-type\">\n       \
    \ <confUserID>xcon-userid:Bob@example.com</confUserID>\n        <confObjID>xcon:8974545@example.com</confObjID>\n\
    \        <operation>update</operation>\n        <response-code>200</response-code>\n\
    \        <response-string>success</response-string>\n        <version>3</version>\n\
    \        <ccmp:userResponse/>\n    </ccmpResponse>\n  </ccmp:ccmpResponse>\n \
    \              Figure 20: Internal Sidebar Messaging Details\n"
- title: 7.2.  External Sidebar
  contents:
  - "7.2.  External Sidebar\n   Figure 21 provides an example of a different approach\
    \ towards\n   sidebars.  In this scenario, one client, Alice, is involved in an\n\
    \   active conference with Bob, Carol, David, and Ethel.  Alice gets an\n   important\
    \ text message via a whisper from Bob that a critical\n   customer needs to talk\
    \ to Alice, Bob, and Ethel.  Alice creates a\n   sidebar to have a side discussion\
    \ with the customer Fred including\n   the participants in the current conference\
    \ with the exception of\n   Carol and David, who remain in the active conference.\
    \  The difference\n   from the previous scenario is that Fred is not part of the\
    \ parent\n   conference: this means that different policies might be involved,\n\
    \   considering that Fred may access information coming from the parent\n   conference,\
    \ in case the sidebar was configured accordingly.  For this\n   reason, in this\
    \ scenario, we assume that Alice disables all the media\n   from the original\
    \ (parent) conference within the sidebar.  This means\n   that, while in the previous\
    \ example Alice and Bob still heard the\n   audio from the main conference in\
    \ background, this time no background\n   is made available.  Alice initiates\
    \ the sidebar by sending a request\n   to the conference server to create a conference\
    \ reservation based\n   upon the active conference object.  Alice, Bob and Ethel\
    \ would remain\n   on the roster of the main conference in a hold state.  Whether\
    \ or not\n   the hold state of these participants is visible to other participants\n\
    \   depends upon the individual and local policy.  However, providing the\n  \
    \ hold state allows the participants in the main conference to see that\n   others\
    \ in the conference are busy.  Note, that a separate conference\n   could have\
    \ been created by Alice to allow Bob and Ethel to talk to\n   Fred.  However,\
    \ creating a sidebar has somewhat of an advantage by\n   allowing the conference\
    \ to be created using some of the same settings\n   (e.g., role, floor control,\
    \ etc.) that Bob and Ethel had in the main\n   conference and it would allow for\
    \ updates such that the media could\n   be updated, for example, to provide audio\
    \ from the main conference.\n Alice                   Bob                   ConfS\n\
    \   |                      |                       |\n   |(1) sidebarByRefRequest(confUserID,\
    \           |\n   |                 confObjID, create)           |\n   |--------------------------------------------->|\n\
    \   |                      |                       |\n   |                   \
    \   |        (a) Create +---|\n   |                      |    sidebar-by-ref |\
    \   |\n   |                      |     (new conf obj |   |\n   |             \
    \         |       cloned from +-->|\n   |                      |        confObjID)\
    \     | Sidebar now has\n   |                      |                       | id\
    \ confObjID*\n   |(2) sidebarByRefResponse(confUserID,          | (parent mapping\n\
    \   |      confObjID*,create,200,success,          | conf<->sidebar)\n   |   \
    \        version,sidebarByRefInfo)          |\n   |<---------------------------------------------|\n\
    \   |                      |                       |\n   |(3) sidebarByRefRequest(confUserID,\
    \           |\n   |      confObjID*,update,sidebarByRefInfo)     |\n   |--------------------------------------------->|\n\
    \   |                      |                       |\n   |                   \
    \   |        (b) Create +---|\n   |                      |      new user for |\
    \   |\n   |                      |            Fred   |   |\n   |             \
    \         |                   +-->|\n   |                      |             \
    \          |\n   |                      |        (c) Update +---|\n   |      \
    \                |    sidebar-by-ref |   |\n   |                      |     (media,\
    \ users |   |\n   |                      |     policy, etc.) +-->|\n   |     \
    \                 |                       | Sidebar is modified:\n   |       \
    \               |                       | media from the\n   |               \
    \       |                       | parent conference is\n   |                 \
    \     |                       | not available to\n   |(4) sidebarByRefResponse(confUserID,\
    \          | anyone\n   |                 confObjID*, update,          |\n   |\
    \             200, success, version)           |\n   |<---------------------------------------------|\n\
    \   |                      |                       |\n   |                   \
    \   |        Notify (Fred   |\n   |                      |              added\
    \ to |\n   |                      |        sidebar users) |\n   |            \
    \          |<----------------------|\n   |                      |            \
    \           |\n   '                      '                       '\n   '     \
    \                 '                       '\n   '                      '     \
    \                  '\n             Figure 21: Client Creation of an External Sidebar\n\
    \   1.  Upon receipt of the sidebarByRefRequest message to create a new\n    \
    \   sidebar conference, based upon the active conference specified by\n      \
    \ <confObjID> in the request, the conference server uses that\n       active conference\
    \ to clone a conference reservation for the\n       sidebar.  The sidebar reservation\
    \ is NOT independent of the\n       active conference (i.e., parent).  The conference\
    \ server, as\n       before, allocates a new XCON-URI (\"confObjID*\" in Figure\
    \ 21) to\n       be used for any subsequent protocol requests toward the sidebar\n\
    \       reservation.  The mapping between the sidebar XCON-URI and the\n     \
    \  one associated with the main conference is maintained by the\n       conference\
    \ server and it is gathered from the <sidebar-parent>\n       element in the sidebar\
    \ conference object.\n   2.  Upon receipt of the sidebarByRefResponse message,\
    \ which\n       acknowledges the successful creation of the sidebar object, Alice\n\
    \       decides that only Bob and Ethel, along with the new participant\n    \
    \   Fred are to be involved in the sidebar.  Thus, she manipulates\n       the\
    \ membership accordingly.  Alice also sets the media in the\n       <conference-info>\
    \ such that the participants in the sidebar don't\n       receive any media from\
    \ the main conference.  All these settings\n       are provided to the conferencing\
    \ server by means of a new\n       sidebarByRefRequest message, with an \"update\"\
    \ <operation>.\n   3.  Alice sends the aforementioned sidebarByRefRequest message\
    \ to\n       update the information in the reservation and to create an active\n\
    \       conference.  Upon receipt of the sidebarByRefRequest/update\n       message,\
    \ the conference server ensures that Alice has the\n       appropriate authority\
    \ based on the policies associated with that\n       specific conference object\
    \ to perform the operation.  The\n       conference server also validates the\
    \ updated information in the\n       reservation.  Since Fred is a new user for\
    \ this conferencing\n       system, a conference user identifier (XCON-USERID)\
    \ is created for\n       Fred.  Specifically, Fred is added to the conference\
    \ by only\n       providing his SIP URI.  Based upon the contact information\n\
    \       provided for Fred by Alice, the call signaling to add Fred to the\n  \
    \     conference may be instigated through the focus (e.g., if Fred had\n    \
    \   a \"dial-out\" value for the 'method' attribute in his <target>\n       field\
    \ under <allowed-users-list>) at the actual activation of the\n       sidebar.\n\
    \   4.  The conference server sends a sidebarByRefResponse message and,\n    \
    \   depending upon the policies, the initiator of the request (i.e.,\n       Alice)\
    \ and the participants in the sidebar (i.e., Bob and Ethel)\n       may be notified\
    \ of his addition to the sidebar via the conference\n       notification service.\n"
- title: 1. sidebarByRefRequest/create message (Alice creates an
  contents:
  - "1. sidebarByRefRequest/create message (Alice creates an\n   external sidebar)\n\
    \  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpRequest\
    \ xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n               xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\"\n               xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n    <ccmpRequest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\
    \                 xsi:type=\"ccmp:ccmp-sidebarByRef-request-message-type\">\n\
    \        <confUserID>xcon-userid:Alice@example.com</confUserID>\n        <confObjID>xcon:8977878@example.com</confObjID>\n\
    \        <operation>create</operation>\n        <ccmp:sidebarByRefRequest/>\n\
    \    </ccmpRequest>\n  </ccmp:ccmpRequest>\n"
- title: 2. sidebarByRefResponse/create message (created
  contents:
  - "2. sidebarByRefResponse/create message (created\n   sidebar returned)\n  <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpResponse\n\
    \                xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n\
    \                xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n     \
    \           xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\">\n    <ccmpResponse\
    \ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                xsi:type=\"\
    ccmp:ccmp-sidebarByRef-response-message-type\">\n        <confUserID>xcon-userid:Alice@example.com</confUserID>\n\
    \        <confObjID>xcon:8971212@example.com</confObjID>\n            <operation>create</operation>\n\
    \        <response-code>200</response-code>\n        <response-string>success</response-string>\n\
    \        <version>1</version>\n        <ccmp:sidebarByRefResponse>\n         \
    \   <sidebarByRefInfo entity=\"xcon:8971212@example.com\">\n                <info:conference-description>\n\
    \                    <info:display-text>\n                        SIDEBAR CONFERENCE\
    \ registered by Alice\n                    </info:display-text>\n            \
    \        <info:available-media>\n                        <info:entry label=\"\
    123\">\n                            <info:display-text>\n                    \
    \             main conference audio\n                            </info:display-text>\n\
    \                            <info:type>audio</info:type>\n                  \
    \          <info:status>sendrecv</info:status>\n                        </info:entry>\n\
    \                        <info:entry label=\"456\">\n                        \
    \    <info:display-text>\n                                 main conference video\n\
    \                            </info:display-text>\n                          \
    \  <info:type>video</info:type>\n                            <info:status>sendrecv</info:status>\n\
    \                        </info:entry>\n                    </info:available-media>\n\
    \                </info:conference-description>\n                <info:conference-state>\n\
    \                    <info:active>false</info:active>\n                </info:conference-state>\n\
    \                <info:users>\n                    <xcon:allowed-users-list>\n\
    \                        <xcon:target method=\"dial-in\"\n                   \
    \           uri=\"xcon-userid:Alice@example.com\"/>\n                        <xcon:target\
    \ method=\"dial-in\"\n                              uri=\"xcon-userid:Bob@example.com\"\
    />\n                        <xcon:target method=\"dial-in\"\n                \
    \              uri=\"xcon-userid:Carol@example.com\"/>\n                     \
    \   <xcon:target method=\"dial-in\"\n                              uri=\"xcon-userid:David@example.com\"\
    />\n                        <xcon:target method=\"dial-in\"\n                \
    \              uri=\"xcon-userid:Ethel@example.com\"/>\n                    </xcon:allowed-users-list>\n\
    \                    <xcon:sidebar-parent>\n                        xcon:8977878@example.com\n\
    \                    </xcon:sidebar-parent>\n                </info:users>\n \
    \           </sidebarByRefInfo>\n        </ccmp:sidebarByRefResponse>\n    </ccmpResponse>\n\
    \  </ccmp:ccmpResponse>\n"
- title: 3. sidebarByRefRequest/update message (Alice updates the sidebar)
  contents:
  - "3. sidebarByRefRequest/update message (Alice updates the sidebar)\n  <?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpRequest\n         \
    \       xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n         \
    \       xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n              \
    \  xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\">\n    <ccmpRequest xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\"\n                 xsi:type=\"ccmp:ccmp-sidebarByRef-request-message-type\"\
    >\n        <confUserID>xcon-userid:Alice@example.com</confUserID>\n        <confObjID>xcon:8971212@example.com</confObjID>\n\
    \        <operation>update</operation>\n        <ccmp:sidebarByRefRequest>\n \
    \           <sidebarByRefInfo entity=\"xcon:8971212@example.com\">\n         \
    \       <info:conference-description>\n                    <info:display-text>\n\
    \                        sidebar with Alice, Bob, Ethel and Fred\n           \
    \         </info:display-text>\n                    <info:available-media>\n \
    \                       <info:entry label=\"123\">\n                         \
    \   <info:display-text>\n                                 main conference audio\n\
    \                            </info:display-text>\n                          \
    \  <info:type>audio</info:type>\n                            <info:status>inactive</info:status>\n\
    \                        </info:entry>\n                        <info:entry label=\"\
    456\">\n                            <info:display-text>\n                    \
    \             main conference video\n                        </info:display-text>\n\
    \                            <info:type>video</info:type>\n                  \
    \          <info:status>inactive</info:status>\n                        </info:entry>\n\
    \                        <info:entry label=\"AUTO_GENERATE_1\">\n            \
    \                <info:display-text>\n                                 sidebar\
    \ audio\n                            </info:display-text>\n                  \
    \          <info:type>audio</info:type>\n                            <info:status>sendrecv</info:status>\n\
    \                        </info:entry>\n                        <info:entry label=\"\
    AUTO_GENERATE_2\">\n                            <info:display-text>\n        \
    \                         sidebar video\n                            </info:display-text>\n\
    \                            <info:type>video</info:type>\n                  \
    \          <info:status>sendrecv</info:status>\n                            <xcon:controls>\n\
    \                                 <xcon:video-layout>\n                      \
    \                 single-view\n                                 </xcon:video-layout>\n\
    \                            </xcon:controls>\n                        </info:entry>\n\
    \                    </info:available-media>\n                </info:conference-description>\n\
    \                <info:conference-state>\n                    <info:active>false</info:active>\n\
    \                </info:conference-state>\n                <info:users>\n    \
    \                <xcon:allowed-users-list>\n                        <xcon:target\
    \ method=\"dial-out\"\n                              uri=\"xcon-userid:Alice@example.com\"\
    />\n                        <xcon:target method=\"dial-out\"\n               \
    \               uri=\"xcon-userid:Bob@example.com\"/>\n                      \
    \  <xcon:target method=\"dial-out\"\n                              uri=\"sip:fred@example.com\"\
    />\n                    </xcon:allowed-users-list>\n                </info:users>\n\
    \            </sidebarByRefInfo>\n        </ccmp:sidebarByRefRequest>\n    </ccmpRequest>\n\
    \  </ccmp:ccmpRequest>\n"
- title: 4. sidebarByRefResponse/update message (sidebar updated)
  contents:
  - "4. sidebarByRefResponse/update message (sidebar updated)\n    <?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n        <ccmp:ccmpResponse\n  \
    \              xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n  \
    \              xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n       \
    \         xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\">\n    <ccmpResponse\
    \ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                xsi:type=\"\
    ccmp:ccmp-sidebarByRef-response-message-type\">\n        <confUserID>xcon-userid:Alice@example.com</confUserID>\n\
    \        <confObjID>xcon:8971212@example.com</confObjID>\n        <operation>update</operation>\n\
    \        <response-code>200</response-code>\n        <response-string>success</response-string>\n\
    \        <version>2</version>\n        <ccmp:sidebarByRefResponse/>\n    </ccmpResponse>\n\
    \  </ccmp:ccmpResponse>\n               Figure 22: External Sidebar Messaging\
    \ Details\n"
- title: 7.3.  Private Messages
  contents:
  - "7.3.  Private Messages\n   The case of private messages can be handled as a sidebar\
    \ with just\n   two participants, similar to the example in Section 7.1.  Unlike\
    \ the\n   previous example, rather than using audio within the sidebar, Alice\n\
    \   could just add an additional text-based media stream to the sidebar\n   in\
    \ order to convey her textual messages to Bob, while still viewing\n   and listening\
    \ to the main conference.\n   In this scenario, Alice requests to the conference\
    \ server the\n   creation of a private chat room within the main conference context\n\
    \   (presented in Figure 19) in which the involved participants are just\n   Bob\
    \ and herself.  This can be achieved through the following CCMP\n   transaction\
    \ (Figure 23).\n   1.  Alice forwards a sidebarByValRequest/create message to\
    \ the\n       conference server with the main conference XCON-URI in the\n   \
    \    <confObjID> parameter and the desired sidebar conference object\n       in\
    \ the <sidebarByValInfo> field.  In this way, a sidebar creation\n       using\
    \ user-provided conference information is requested from the\n       conference\
    \ server.  Please note that, unlike the previous sidebar\n       examples, in\
    \ this case, a completely new conference object to\n       describe the sidebar\
    \ is provided: there is no cloning involved,\n       while the <confObjID> still\
    \ enforces the parent-child\n       relationship between the main conference and\
    \ the to-be-created\n       sidebar.\n   2.  The conference server, after checking\
    \ Alice's rights and\n       validating the conference object carried in the request,\
    \ creates\n       the required sidebar-by-val conference and a new XCON-URI for\
    \ it.\n       Instead of cloning the main conference object, as shown in\n   \
    \    Sections 7.1 and 7.2, the sidebar is created on the basis of the\n      \
    \ user-provided conference information.  However, the parent\n       relationship\
    \ between the main conference and the newly created\n       sidebar is still maintained\
    \ by the conference server (as a\n       consequence of the chosen CCMP request\
    \ message type -- the\n       sidebarByVal one) and it is reflected by the <sidebar-parent>\n\
    \       element in the <sidebarByValInfo> element returned in the\n       sidebarByValResponse\
    \ message.  Please notice that, according to\n       the CCMP specification, the\
    \ return of the created sidebar data in\n       this kind of \"success\" response\
    \ is not mandatory.\n"
- title: 1. sidebarByValRequest/create message (Alice creates a private
  contents:
  - "1. sidebarByValRequest/create message (Alice creates a private\n   chat room\
    \ between Bob and herself)\n"
- title: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  contents:
  - "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpRequest\n\
    \            xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n    \
    \        xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n            xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\">\n    <ccmpRequest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n                 xsi:type=\"ccmp:ccmp-sidebarByVal-request-message-type\">\n\
    \        <confUserID>xcon-userid:Alice@example.com</confUserID>\n        <confObjID>xcon:8977878@example.com</confObjID>\n\
    \        <operation>create</operation>\n        <ccmp:sidebarByValRequest>\n \
    \           <sidebarByValInfo entity=\"xcon:AUTO_GENERATE_1@example.com\">\n \
    \               <info:conference-description>\n                  <info:display-text>\n\
    \                        private textual sidebar alice - bob\n               \
    \   </info:display-text>\n                  <info:available-media>\n         \
    \               <info:entry label=\"123\">\n                            <info:display-text>\n\
    \                                main conference audio\n                     \
    \       </info:display-text>\n                            <info:type>audio</info:type>\n\
    \                            <info:status>recvonly</info:status>\n           \
    \             </info:entry>\n                        <info:entry label=\"456\"\
    >\n                            <info:display-text>\n                         \
    \       main conference video\n                            </info:display-text>\n\
    \                            <info:type>video</info:type>\n                  \
    \          <info:status>recvonly</info:status>\n                        </info:entry>\n\
    \                        <info:entry label=\"AUTO_GENERATE_2\">\n            \
    \                <info:display-text>\n                                sidebar\
    \ text\n                            </info:display-text>\n                   \
    \         <info:type>text</info:type>\n                            <info:status>sendrecv</info:status>\n\
    \                        </info:entry>\n                    </info:available-media>\n\
    \                </info:conference-description>\n                <info:users>\n\
    \                    <xcon:allowed-users-list>\n                        <xcon:target\
    \ method=\"dial-out\"\n                              uri=\"xcon-userid:Alice@example.com\"\
    />\n                        <xcon:target method=\"dial-out\"\n               \
    \               uri=\"xcon-userid:Bob@example.com\"/>\n                    </xcon:allowed-users-list>\n\
    \                </info:users>\n            </sidebarByValInfo>\n        </ccmp:sidebarByValRequest>\n\
    \    </ccmpRequest>\n"
- title: </ccmp:ccmpRequest>
  contents:
  - '</ccmp:ccmpRequest>

    '
- title: 2. sidebarByValResponse/create message (sidebar returned)
  contents:
  - "2. sidebarByValResponse/create message (sidebar returned)\n  <?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpResponse\n        \
    \      xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n          \
    \    xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n              xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\">\n    <ccmpResponse xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n                xsi:type=\"ccmp:ccmp-sidebarByVal-response-message-type\">\n\
    \        <confUserID>xcon-userid:Alice@example.com</confUserID>\n        <confObjID>xcon:8974545@example.com</confObjID>\n\
    \        <operation>create</operation>\n        <response-code>200</response-code>\n\
    \        <response-string>success</response-string>\n            <version>1</version>\n\
    \        <ccmp:sidebarByValResponse>\n            <sidebarByValInfo entity=\"\
    xcon:8974545@example.com\">\n                <info:conference-description>\n \
    \                   <info:display-text>\n                        private textual\
    \ sidebar alice - bob\n                    </info:display-text>\n            \
    \        <info:available-media>\n                        <info:entry label=\"\
    123\">\n                            <info:display-text>\n                    \
    \            main conference audio\n                            </info:display-text>\n\
    \                            <info:type>audio</info:type>\n                  \
    \          <info:status>recvonly</info:status>\n                        </info:entry>\n\
    \                        <info:entry label=\"456\">\n                        \
    \    <info:display-text>\n                                main conference video\n\
    \                            </info:display-text>\n                          \
    \  <info:type>video</info:type>\n                            <info:status>recvonly</info:status>\n\
    \                        </info:entry>\n                        <info:entry label=\"\
    789\">\n                            <info:display-text>\n                    \
    \            sidebar text\n                            </info:display-text>\n\
    \                            <info:type>text</info:type>\n                   \
    \         <info:status>sendrecv</info:status>\n                        </info:entry>\n\
    \                    </info:available-media>\n                    <xcon:sidebar-parent>\n\
    \                         xcon:8977878@example.com\n                    </xcon:sidebar-parent>\n\
    \                </info:conference-description>\n                <info:users>\n\
    \                    <xcon:allowed-users-list>\n                        <xcon:target\
    \ method=\"dial-out\"\n                              uri=\"xcon-userid:Alice@example.com\"\
    />\n                        <xcon:target method=\"dial-out\"\n               \
    \               uri=\"xcon-userid:Bob@example.com\"/>\n                    </xcon:allowed-users-list>\n\
    \                </info:users>\n            </sidebarByValInfo>\n        </ccmp:sidebarByValResponse>\n\
    \    </ccmpResponse>\n  </ccmp:ccmpResponse>\n             Figure 23: Sidebar\
    \ for Private Messages Scenario\n"
- title: 7.4.  Observing and Coaching
  contents:
  - "7.4.  Observing and Coaching\n   \"Observing and Coaching\" is one of the most\
    \ interesting sidebar-\n   related scenarios.  In fact, it highlights two different\
    \ interactions\n   that have to be properly coordinated.\n   An example of observing\
    \ and coaching is shown in Figure 25.  In this\n   example, call center agent\
    \ Bob is involved in a conference with\n   customer Carol.  Since Bob is a new\
    \ agent and Alice sees that he has\n   been on the call with Carol for longer\
    \ than normal, she decides to\n   observe the call and coach Bob as necessary.\
    \  Of course, the\n   conferencing system must make sure that the customer Carol\
    \ is not\n   aware of the presence of the coach Alice.  This makes the use of\
    \ a\n   sidebar necessary for the success of the scenario.\n   Consider the following\
    \ as the conference document associated with the\n   video conference involving\
    \ Bob (the call agent) and Carol (the\n   customer) (Figure 24):\n"
- title: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  contents:
  - "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <info:conference-info\n\
    \                xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n     \
    \           xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\n                xmlns:xcon=\"\
    urn:ietf:params:xml:ns:xcon-conference-info\"\n                entity=\"xcon:8978383@example.com\"\
    >\n     <info:conference-description>\n        <info:display-text>\n         \
    \       CUSTOMER SERVICE conference\n        </info:display-text>\n        <info:conf-uris>\n\
    \            <info:entry>\n               <info:uri>sip:8978383@example.com</info:uri>\n\
    \               <info:display-text>conference sip uri</info:display-text>\n  \
    \          </info:entry>\n        </info:conf-uris>\n        <info:available-media>\n\
    \          <info:entry label=\"123\">\n            <info:display-text>service\
    \ audio</info:display-text>\n            <info:type>audio</info:type>\n      \
    \      <info:status>sendrecv</info:status>\n          </info:entry>\n        \
    \  <info:entry label=\"456\">\n            <info:display-text>service video</info:display-text>\n\
    \            <info:type>video</info:type>\n            <info:status>sendrecv</info:status>\n\
    \            <xcon:controls>\n                    <xcon:video-layout>single-view</xcon:video-layout>\n\
    \           </xcon:controls>\n          </info:entry>\n        </info:available-media>\n\
    \    </info:conference-description>\n    <info:conference-state>\n        <info:active>true</info:active>\n\
    \    </info:conference-state>\n    <info:users>\n        <info:user entity=\"\
    xcon-userid:bob@example.com\">\n            <info:display-text>Bob - call agent</info:display-text>\n\
    \            <info:endpoint entity=\"sip:bob@example.com\">\n                <info:media\
    \ id=\"1\">\n                    <info:label>123</info:label>\n              \
    \      <info:status>sendrecv</info:status>\n                </info:media>\n  \
    \              <info:media id=\"2\">\n                    <info:label>456</info:label>\n\
    \                    <info:status>sendrecv</info:status>\n                </info:media>\n\
    \            </info:endpoint>\n        </info:user>\n        <info:user entity=\"\
    xcon-userid:carol@example.com\">\n            <info:display-text>Carol - customer</info:display-text>\n\
    \            <info:endpoint entity=\"sip:carol@example.com\">\n              \
    \  <info:media id=\"1\">\n                    <info:label>123</info:label>\n \
    \                   <info:status>sendrecv</info:status>\n                </info:media>\n\
    \                <info:media id=\"2\">\n                    <info:label>456</info:label>\n\
    \                    <info:status>sendrecv</info:status>\n                </info:media>\n\
    \            </info:endpoint>\n        </info:user>\n    </info:users>\n  </info:conference-info>\n\
    \            Figure 24: A Call-Center Conference Object Example\n"
- title: Alice                   Bob                    ConfS
  contents:
  - "Alice                   Bob                    ConfS\n  |                   \
    \   |                       |\n  |(1) sidebarByRefRequest(confUserID,        \
    \   |\n  |                 confObjID, create)           |\n  |--------------------------------------------->|\n\
    \  |                      |                       |\n  |                     \
    \ |        (a) Create +---|\n  |                      |    sidebar-by-ref |  \
    \ |\n  |                      |     (new conf obj |   |\n  |                 \
    \     |       cloned from +-->|\n  |                      |        confObjID)\
    \     | Sidebar now has\n  |                      |                       | id\
    \ confObjID*\n  |(2) sidebarByRefResponse(confUserID,          | (parent mapping\n\
    \  |      confObjID*,create,200,success,          | conf<->sidebar)\n  |     \
    \      version,sidebarByRefInfo)          |\n  |<---------------------------------------------|\n\
    \  |                      |                       |\n  |(3) sidebarByRefRequest(confUserID,\
    \           |\n  |      confObjID*,update,sidebarByRefInfo)     |\n  |--------------------------------------------->|\n\
    \  |                      |                       |\n  |                     \
    \ |        (b) Update +---|\n  |                      |    sidebar-by-val |  \
    \ |\n  |                      |     (media, users |   |\n  |                 \
    \     |     policy, etc.) +-->|\n  |                      |                  \
    \     | Sidebar is modified:\n  |                      |                     \
    \  | unilateral sidebar\n  |                      |                       | audio,\
    \ Carol excluded\n  |                      |                       | from the\
    \ sidebar\n  |(4) sidebarByRefResponse(confUserID,          |\n  |           \
    \      confObjID*, update,          |\n  |               200, success, version)\
    \         |\n  |<---------------------------------------------|\n  |         \
    \             |                       |\n  |                      |         Notify\
    \ (Bob   |\n  |                      |    he's been added to |\n  |          \
    \            |        sidebar users) |\n  |                      |<----------------------|\n\
    \  |                      |                       |\n  '                     \
    \ '                       '\n  '                      '                      \
    \ '\n  '                      '                       '\n      Figure 25: Supervisor\
    \ Creating a Sidebar for Observing/Coaching\n   1.  Upon receipt of the sidbarByRefRequest/create\
    \ message from Alice\n       to create a new sidebar conference from the <confObjID>\
    \ received\n       in the request, the conference server uses the received active\n\
    \       conference to clone a conference reservation for the sidebar.\n      \
    \ The conference server also allocates a new XCON-URI to be used\n       for any\
    \ subsequent protocol requests directed to the new sidebar.\n       The conference\
    \ server maintains the mapping between this sidebar\n       conference ID and\
    \ the one associated with the main conference\n       instance.  The conference\
    \ server sends a sidebarByRefResponse\n       message with the new XCON-URI in\
    \ the <confObjID> field and other\n       relevant information in the <sidebarByRefInfo>.\n\
    \   2.  Upon receipt of the sidebarByRefResponse message, Alice\n       manipulates\
    \ the data received in the <sidebarByRefInfo> in the\n       response.  Alice\
    \ wants only Bob to be involved in the sidebar;\n       thus, she updates the\
    \ <allowed-users-list> to include only Bob\n       and herself.  Alice also wants\
    \ the audio to be received by\n       herself and Bob from the original conference,\
    \ but wants any\n       outgoing audio from herself to be restricted to the participants\n\
    \       in the sidebar, whereas Bob's outgoing audio should go to the\n      \
    \ main conference, so that both Alice and the customer Carol hear\n       the\
    \ same audio from Bob.  Alice sends a sidebarByRefRequest\n       message with\
    \ an \"update\" <operation> including the updated\n       sidebar information\
    \ in the <sidebarByRefInfo> element.\n   3.  Upon receipt of the sidebarByRefRequest/update\
    \ message, the\n       conference server ensures that Alice has the appropriate\n\
    \       authority based on the policies associated with that specific\n      \
    \ conference object to perform the operation.  In order to request\n       the\
    \ insertion of a further media stream in the sidebar (i.e., in\n       this example\
    \ an audio stream from Alice to Bob), the requester\n       has to provide a new\
    \ <entry> element in the <available-media>\n       field of the <sidebarByRefInfo>.\
    \  The mandatory 'label' attribute\n       of that new <entry> is filled with\
    \ a dummy value\n       \"AUTO_GENERATE_1\", but it will contain the real server-generated\n\
    \       media stream identifier when the media stream is effectively\n       allocated\
    \ on the server side.  Similarly, the mandatory 'id'\n       attribute in the\
    \ <media> element referring to the new sidebar\n       audio stream under both\
    \ Alice's and Bob's <endpoint> contains a\n       wildcard value, respectively,\
    \ \"AUTO_GENERATE_2\" and\n       \"AUTO_GENERATE_3\": those values will be replaced\
    \ with the\n       appropriated server-generated identifiers upon the creation\
    \ of\n       the referred media stream.  We are assuming the conference server\n\
    \       is able to recognize those dummy values as placeholders.\n   4.  After\
    \ validating the data, the conference server sends a\n       sidebarByRefResponse\
    \ message.  Based upon the contact information\n       provided for Bob by Alice,\
    \ the call signaling to add Bob to the\n       sidebar with the appropriate media\
    \ characteristics is instigated\n       through the focus.  Bob is notified of\
    \ his addition to the\n       sidebar via the conference notification service;\
    \ thus, he is\n       aware that Alice, the supervisor, is available for coaching\
    \ him\n       through this call.\n"
- title: 1. sidebarByRefRequest/create message (Alice as coach creates a sidebar)
  contents:
  - '1. sidebarByRefRequest/create message (Alice as coach creates a sidebar)

    '
- title: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  contents:
  - "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpRequest\
    \ xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n               xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\"\n               xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n    <ccmpRequest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\
    \                 xsi:type=\"ccmp:ccmp-sidebarByRef-request-message-type\">\n\
    \        <confUserID>xcon-userid:alice@example.com</confUserID>\n        <confObjID>xcon:8978383@example.com</confObjID>\n\
    \        <operation>create</operation>\n        <ccmp:sidebarByRefRequest/>\n\
    \    </ccmpRequest>\n"
- title: </ccmp:ccmpRequest>
  contents:
  - '</ccmp:ccmpRequest>

    '
- title: 2. sidebarByRefResponse/create message (sidebar created)
  contents:
  - '2. sidebarByRefResponse/create message (sidebar created)

    '
- title: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  contents:
  - "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpResponse\n\
    \                xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n\
    \                xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n     \
    \           xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\">\n    <ccmpResponse\
    \ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                xsi:type=\"\
    ccmp:ccmp-sidebarByRef-response-message-type\">\n        <confUserID>xcon-userid:alice@example.com</confUserID>\n\
    \        <confObjID>xcon:8971313@example.com</confObjID>\n        <operation>create</operation>\n\
    \        <response-code>200</response-code>\n        <response-string>Success</response-string>\n\
    \        <version>1</version>\n        <ccmp:sidebarByRefResponse>\n         \
    \   <sidebarByRefInfo entity=\"xcon:8971313@example.com\">\n                <info:conference-description>\n\
    \                    <info:display-text>\n                        SIDEBAR CONFERENCE\
    \ registered by alice\n                    </info:display-text>\n            \
    \        <info:available-media>\n                        <info:entry label=\"\
    123\">\n                            <info:display-text>\n                    \
    \             main conference audio\n                            </info:display-text>\n\
    \                            <info:type>audio</info:type>\n                  \
    \          <info:status>sendrecv</info:status>\n                        </info:entry>\n\
    \                        <info:entry label=\"456\">\n                        \
    \    <info:display-text>\n                                 main conference video\n\
    \                            </info:display-text>\n                          \
    \  <info:type>video</info:type>\n                            <info:status>sendrecv</info:status>\n\
    \                        </info:entry>\n                    </info:available-media>\n\
    \                    <xcon:sidebar-parent>\n                        xcon:8971313@example.com\n\
    \                    </xcon:sidebar-parent>\n                </info:conference-description>\n\
    \                <info:conference-state>\n                    <info:active>false</info:active>\n\
    \                </info:conference-state>\n                <info:users>\n    \
    \                <xcon:allowed-users-list>\n                        <xcon:target\
    \ method=\"dial-in\"\n                              uri=\"xcon-userid:alice@example.com\"\
    />\n                        <xcon:target method=\"dial-in\"\n                \
    \              uri=\"xcon-userid:bob@example.com\"/>\n                       \
    \ <xcon:target method=\"dial-in\"\n                              uri=\"xcon-userid:carol@example.com\"\
    />\n                    </xcon:allowed-users-list>\n                </info:users>\n\
    \            </sidebarByRefInfo>\n        </ccmp:sidebarByRefResponse>\n    </ccmpResponse>\n\
    \  </ccmp:ccmpResponse>\n  3. sidebarByRefRequest/update message (Alice introduces\
    \ unilateral\n     sidebar audio and excludes Carol from the sidebar)\n  <ccmp:ccmpRequest\n\
    \                xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n\
    \                xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n     \
    \           xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\">\n    <ccmpRequest\
    \ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                 xsi:type=\"\
    ccmp:ccmp-sidebarByRef-request-message-type\">\n        <confUserID>xcon-userid:alice@example.com</confUserID>\n\
    \        <confObjID>xcon:8971313@example.com</confObjID>\n        <operation>update</operation>\n\
    \        <ccmp:sidebarByRefRequest>\n            <sidebarByRefInfo entity=\"xcon:8971313@example.com\"\
    >\n                <info:conference-description>\n                    <info:display-text>\n\
    \                        Coaching sidebar Alice and Bob\n                    </info:display-text>\n\
    \                    <info:available-media>\n                        <info:entry\
    \ label=\"AUTO_GENERATE_1\">\n                            <info:display-text>\n\
    \                                 Alice-to-Bob audio\n                       \
    \     </info:display-text>\n                            <info:type>audio</info:type>\n\
    \                            <info:status>sendrecv</info:status>\n           \
    \             </info:entry>\n                    </info:available-media>\n   \
    \             </info:conference-description>\n                <info:conference-state>\n\
    \                    <info:active>false</info:active>\n                </info:conference-state>\n\
    \                <info:users>\n                    <info:user entity=\"xcon-userid:alice@example.com\"\
    >\n                      <info:endpoint entity=\"sip:alice@example.com\">\n  \
    \                      <info:media id=\"AUTO_GENERATE_2\">\n                 \
    \        <info:label>AUTO_GENERATE_1</info:label>\n                         <info:status>sendonly</info:status>\n\
    \                        </info:media>\n                      </info:endpoint>\n\
    \                    </info:user>\n                    <info:user entity=\"xcon-userid:bob@example.com\"\
    >\n                      <info:endpoint entity=\"sip:bob@example.com\">\n    \
    \                    <info:media id=\"AUTO_GENERATE_3\">\n                   \
    \      <info:label>AUTO_GENERATE_1</info:label>\n                         <info:status>recvonly</info:status>\n\
    \                        </info:media>\n                      </info:endpoint>\n\
    \                    </info:user>\n                    <xcon:allowed-users-list>\n\
    \                        <xcon:target method=\"dial-in\"\n                   \
    \           uri=\"xcon-userid:alice@example.com\"/>\n                        <xcon:target\
    \ method=\"dial-out\"\n                              uri=\"xcon-userid:bob@example.com\"\
    />\n                    </xcon:allowed-users-list>\n                </info:users>\n\
    \            </sidebarByRefInfo>\n        </ccmp:sidebarByRefRequest>\n    </ccmpRequest>\n\
    \  </ccmp:ccmpRequest>\n"
- title: 4. sidebarByRefRequest/update message (updates accepted)
  contents:
  - '4. sidebarByRefRequest/update message (updates accepted)

    '
- title: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  contents:
  - "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpResponse\n\
    \                xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n\
    \                xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n     \
    \           xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\">\n    <ccmpResponse\
    \ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                xsi:type=\"\
    ccmp:ccmp-sidebarByRef-response-message-type\">\n        <confUserID>xcon-userid:alice@example.com</confUserID>\n\
    \        <confObjID>xcon:8971313@example.com</confObjID>\n        <operation>update</operation>\n\
    \        <response-code>200</response-code>\n        <response-string>success</response-string>\n\
    \        <version>2</version>\n        <ccmp:sidebarByRefResponse/>\n    </ccmpResponse>\n\
    \ </ccmp:ccmpResponse>\n            Figure 26: Coaching and Observing Messaging\
    \ Details\n"
- title: 8.  Removing Participants and Deleting Conferences
  contents:
  - "8.  Removing Participants and Deleting Conferences\n   The following scenarios\
    \ detail the basic operations associated with\n   removing participants from conferences\
    \ and entirely deleting\n   conferences.  The examples assume that a conference\
    \ has already been\n   correctly established, with media, if applicable, per one\
    \ of the\n   examples in Section 5.\n"
- title: 8.1.  Removing a Party
  contents:
  - "8.1.  Removing a Party\n   Figure 27 provides an example of a client, Alice,\
    \ removing another\n   participant, Bob, from a conference.  This example assumes\
    \ an\n   established conference with Alice, Bob, Claire, and Duck.  In this\n\
    \   example, Alice wants to remove Bob from the conference so that the\n   group\
    \ can continue in the same conference without Bob's\n   participation.\n   Alice\
    \            Bob       Claire       ConfS\n     |               |           |\
    \           |\n     |(1) userRequest(confUserID,|           |\n     |        \
    \ confObjID, delete,|           |\n     |         userInfo)         |        \
    \   |\n     |-------------------------------------->|\n     |               |\
    \           |           |\n     |               |           | (a) Focus |\n  \
    \   |               |           | tears down|\n     |               |        \
    \   | signaling |\n     |               |           |  to Bob   |\n     |    \
    \           |<----------------------|\n     |               |                \
    \       |\n     |               |         (b)Deletes+---|\n     |            \
    \   |           | Bob   |   |\n     |               |           | as a  |   |\n\
    \     |               |           | user  +-->|\n     |               |      \
    \     | in        |\n     |               |           | confObj   |\n     |  \
    \             |           |           |\n     |(2) userResponse(confUserID,confObjID,\
    \ |\n     |           delete,200,success,version) |\n     |<--------------------------------------|\n\
    \     |               |           |           |\n     |               |      \
    \     |           |\n     |               |           | (c) Notify|\n     |  \
    \             |           | (\"Bob just|\n     |               |           | \
    \ left\")   |\n     |               |           |<----------|\n     |        \
    \       |           |           |\n     '               '           '        \
    \   '\n     '               '           '           '\n     '               '\
    \           '           '\n       Figure 27: Client Manipulation of Conference\
    \ - Remove a Party\n   1.  Alice sends a userRequest message with a \"delete\"\
    \ <operation>.\n       The conference server ensures that Alice has the appropriate\n\
    \       authority based on the policies associated with that specific\n      \
    \ conference object to perform the operation.\n   2.  Based upon the contact and\
    \ media information in the conference\n       object for Bob in the <userInfo>\
    \ element, the conferencing system\n       starts the process to remove Bob (e.g.,\
    \ the call signaling to\n       remove Bob from the conference is instigated through\
    \ the focus).\n       The conference server updates the data in the conference\
    \ object,\n       thus, removing Bob from the <users> list.  After updating the\n\
    \       data, the conference server sends a userResponse message to\n       Alice.\
    \  Depending upon the policies, other participants (e.g.,\n       Claire) may\
    \ be notified of the removal of Bob from the conference\n       via the conference\
    \ notification service.\n 1. userRequest/delete message (Alice deletes Bob)\n\
    \ <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <ccmp:ccmpRequest\n\
    \        xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n        xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\"\n        xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n     <ccmpRequest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\
    \                  xsi:type=\"ccmp:ccmp-user-request-message-type\">\n       \
    \  <confUserID>xcon-userid:Alice@example.com</confUserID>\n         <confObjID>xcon:8977794@example.com</confObjID>\n\
    \         <operation>delete</operation>\n         <ccmp:userRequest>\n       \
    \      <userInfo entity=\"xcon-userid:Bob@example.com\"/>\n         </ccmp:userRequest>\n\
    \     </ccmpRequest>\n </ccmp:ccmpRequest>\n 2. userResponse/delete message (Bob\
    \ has been deleted)\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"\
    ?>\n <ccmp:ccmpResponse\n        xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\
    \n        xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\n        xmlns:xcon=\"\
    urn:ietf:params:xml:ns:xcon-conference-info\">\n     <ccmpResponse xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\"\n                   xsi:type=\"ccmp:ccmp-user-response-message-type\"\
    >\n         <confUserID>xcon-userid:Alice@example.com</confUserID>\n         <confObjID>xcon:8977794@example.com</confObjID>\n\
    \             <operation>delete</operation>\n         <response-code>200</response-code>\n\
    \         <response-string>success</response-string>\n         <version>17</version>\n\
    \         <ccmp:userResponse/>\n     </ccmpResponse>\n </ccmp:ccmpResponse>\n\
    \            Figure 28: Removing a Participant Messaging Details\n"
- title: 8.2.  Deleting a Conference
  contents:
  - "8.2.  Deleting a Conference\n   In this section, an example of a successful conference\
    \ deletion is\n   provided (Figure 29).\n   Alice                          ConfS\n\
    \    |                               |\n    |(1)confRequest(confUserID,     |\n\
    \    |       confObjID, delete)      |\n    |------------------------------>|\n\
    \    |                 (a)Delete +---|\n    |                    Conf   |   |\n\
    \    |                    Object |   |\n    |                           +-->|\n\
    \    |                               |--+ (b) MS\n    |                      \
    \         |  | removes related\n    |                               |  | mixer\
    \ instances and\n    |                               |<-+ their participants\n\
    \    |                               |    (SIP signaling as well)\n    |     \
    \                          |\n    |(2)confResponse(confUserID,    |\n    |   \
    \   confObjID,delete,200,    |\n    |      success)                 |\n    | \
    \                              |\n    |<------------------------------|\n    |\
    \                               |\n    '                               '\n   \
    \                  Figure 29: Deleting a Conference\n   1.  The conferencing system\
    \ client Alice sends a confRequest message\n       with a \"delete\" operation\
    \ to be performed on the conference\n       identified by the XCON-URI carried\
    \ in the <confObjID> parameter.\n       The conference server, on the basis of\
    \ the <confUserID> included\n       in the receipt request, ensures that Alice\
    \ has the appropriate\n       authority to fulfill the operation.\n   2.  After\
    \ validating Alice's rights, the conference server instigates\n       the process\
    \ to delete the conference object, disconnecting\n       participants and removing\
    \ associated resources such as mixer\n       instances.  Then, the conference\
    \ server returns a confResponse\n       message to Alice with \"200\" as <response-code>\
    \ and the deleted\n       conference XCON-URI in the <confObjID> field.\n 1. confRequest/delete\
    \ message (Alice deletes a conference)\n <?xml version=\"1.0\" encoding=\"UTF-8\"\
    \ standalone=\"yes\"?>\n <ccmp:ccmpRequest\n        xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\
    \n        xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon:ccmp\"\n        xmlns:xcon=\"\
    urn:ietf:params:xml:ns:xcon-conference-info\">\n     <ccmpRequest xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\"\n                  xsi:type=\"ccmp:ccmp-conf-request-message-type\"\
    >\n         <confUserID>xcon-userid:Alice@example.com</confUserID>\n         <confObjID>xcon:8977794@example.com</confObjID>\n\
    \         <operation>delete</operation>\n         <ccmp:confRequest/>\n     </ccmpRequest>\n\
    \ </ccmp:ccmpRequest>\n 2. confResponse/delete message (\"200\", \"success\")\n\
    \ <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <ccmp:ccmpResponse\n\
    \        xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n        xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon:ccmp\"\n        xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n     <ccmpResponse xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\
    \                   xsi:type=\"ccmp:ccmp-conf-response-message-type\">\n     \
    \    <confUserID>xcon-userid:Alice@example.com</confUserID>\n         <confObjID>xcon:8977794@example.com</confObjID>\n\
    \         <operation>delete</operation>\n         <response-code>200</response-code>\n\
    \         <response-string>success</response-string>\n         <ccmp:confResponse/>\n\
    \     </ccmpResponse>\n </ccmp:ccmpResponse>\n            Figure 30: Deleting\
    \ a Conference Messaging Details\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   The security considerations applicable to the\
    \ implementation of these\n   call flows are documented in the XCON framework,\
    \ with additional\n   security considerations documented in the CCMP document.\
    \  Statements\n   with regard to the necessary security are discussed in particular\n\
    \   flows; however, this is for informational purposes only.  The\n   implementer\
    \ is encouraged to carefully consider the security\n   requirements in the normative\
    \ documents.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   The detailed content for this document is derived from\
    \ the prototype\n   work of Lorenzo Miniero, Simon Pietro Romano, Tobia Castaldi,\
    \ and\n   their colleagues at the University of Napoli.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC5239]  Barnes, M., Boulton, C., and O. Levin,\
    \ \"A Framework for\n              Centralized Conferencing\", RFC 5239, June\
    \ 2008.\n   [RFC6501]  Novo, O., Camarillo, G., Morgan, D., and J. Urpalainen,\n\
    \              \"Conference Information Data Model for Centralized\n         \
    \     Conferencing (XCON)\", RFC 6501, March 2012.\n   [RFC6502]  Camarillo, G.,\
    \ Srinivasan, S., Even, R., and J.\n              Urpalainen, \"Conference Event\
    \ Package Data Format\n              Extension for Centralized Conferencing (XCON)\"\
    , RFC 6502,\n              March 2012.\n   [RFC6503]  Barnes, M., Boulton, C.,\
    \ Romano, S., and H. Schulzrinne,\n              \"Centralized Conferencing Manipulation\
    \ Protocol\",\n              RFC 6503, March 2012.\n   [W3C.REC-xml-20081126]\n\
    \              Bray, T., Paoli, J., Sperberg-McQueen, C., Maler, E., and\n   \
    \           F. Yergeau, \"Extensible Markup Language (XML) 1.0 (Fifth\n      \
    \        Edition)\", World Wide Web Consortium Recommendation REC-\n         \
    \     xml-20081126, November 2008,\n              <http://www.w3.org/TR/2008/REC-xml-20081126>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [CALL-FLOWS]\n              Amirante, A., Castaldi,\
    \ T., Miniero, L., and S. Romano,\n              \"Media Control Channel Framework\
    \ (CFW) Call Flow\n              Examples\", Work in Progress, July 2011.\n  \
    \ [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n      \
    \        A., Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler,\
    \ \"SIP: Session Initiation Protocol\", RFC 3261,\n              June 2002.\n\
    \   [RFC4575]  Rosenberg, J., Schulzrinne, H., and O. Levin, \"A Session\n   \
    \           Initiation Protocol (SIP) Event Package for Conference\n         \
    \     State\", RFC 4575, August 2006.\n   [RFC4579]  Johnston, A. and O. Levin,\
    \ \"Session Initiation Protocol\n              (SIP) Call Control - Conferencing\
    \ for User Agents\",\n              BCP 119, RFC 4579, August 2006.\n   [RFC4582]\
    \  Camarillo, G., Ott, J., and K. Drage, \"The Binary Floor\n              Control\
    \ Protocol (BFCP)\", RFC 4582, November 2006.\n   [RFC4597]  Even, R. and N. Ismail,\
    \ \"Conferencing Scenarios\",\n              RFC 4597, August 2006.\n   [RFC5567]\
    \  Melanchuk, T., \"An Architectural Framework for Media\n              Server\
    \ Control\", RFC 5567, June 2009.\n   [RFC6505]  McGlashan, S., Melanchuk, T.,\
    \ and C. Boulton, \"A Mixer\n              Control Package for the Media Control\
    \ Channel Framework\",\n              RFC 6505, March 2012.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mary Barnes\n   Polycom\n   TX\n   USA\n   EMail: mary.ietf.barnes@gmail.com\n\
    \   Lorenzo Miniero\n   Meetecho\n   Via Carlo Poerio 89/a\n   Napoli  80121\n\
    \   Italy\n   EMail: lorenzo@meetecho.com\n   Roberta Presta\n   University of\
    \ Napoli\n   Via Claudio 21\n   Napoli  80125\n   Italy\n   EMail: roberta.presta@unina.it\n\
    \   Simon Pietro Romano\n   University of Napoli\n   Via Claudio 21\n   Napoli\
    \  80125\n   Italy\n   EMail: spromano@unina.it\n"
