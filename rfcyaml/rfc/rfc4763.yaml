- title: __initial_text__
  contents:
  - "             Extensible Authentication Protocol Method for\n     Shared-secret\
    \ Authentication and Key Establishment (EAP-SAKE)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2006).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This RFC is not a candidate for any level of Internet Standard.\
    \  The\n   IETF disclaims any knowledge of the fitness of this RFC for any\n \
    \  purpose and in particular notes that the decision to publish is not\n   based\
    \ on IETF review for such things as security, congestion control,\n   or inappropriate\
    \ interaction with deployed protocols.  The RFC Editor\n   has chosen to publish\
    \ this document at its discretion.  Readers of\n   this document should exercise\
    \ caution in evaluating its value for\n   implementation and deployment.  See\
    \ RFC 3932 for more information.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies an Extensible Authentication Protocol (EAP)\n\
    \   mechanism for Shared-secret Authentication and Key Establishment\n   (SAKE).\
    \  This RFC is published as documentation for the IANA\n   assignment of an EAP\
    \ Type for a vendor's EAP method per RFC 3748.\n   The specification has passed\
    \ Designated Expert review for this IANA\n   assignment.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Protocol Description ............................................4\n    \
    \  3.1. Overview and Motivation of EAP-SAKE ........................4\n      3.2.\
    \ Protocol Operation .........................................5\n           3.2.1.\
    \ Successful Exchange .................................5\n           3.2.2. Authentication\
    \ Failure ..............................7\n           3.2.3. Identity Management\
    \ ................................11\n           3.2.4. Obtaining Peer Identity\
    \ ............................11\n           3.2.5. Key Hierarchy ......................................13\n\
    \           3.2.6. Key Derivation .....................................15\n  \
    \         3.2.7. Ciphersuite Negotiation ............................17\n    \
    \       3.2.8. Message Integrity and Encryption ...................17\n      \
    \     3.2.9. Fragmentation ......................................21\n        \
    \   3.2.10. Error Cases .......................................21\n      3.3.\
    \ Message Formats ...........................................22\n           3.3.1.\
    \ Message Format Summary .............................22\n           3.3.2. Attribute\
    \ Format ...................................23\n           3.3.3. Use of AT_ENCR_DATA\
    \ Attribute ......................25\n           3.3.4. EAP.Request/SAKE/Challenge\
    \ Format ..................26\n           3.3.5. EAP.Response/SAKE/Challenge Format\
    \ .................28\n           3.3.6. EAP.Request/SAKE/Confirm Format ....................30\n\
    \           3.3.7. EAP.Response/SAKE/Confirm Format ...................32\n  \
    \         3.3.8. EAP.Response/SAKE/Auth-Reject Format ...............33\n    \
    \       3.3.9. EAP.Request/SAKE/Identity Format ...................34\n      \
    \     3.3.10. EAP.Response/SAKE/Identity Format .................36\n        \
    \   3.3.11. Other EAP Messages Formats ........................37\n   4. IANA\
    \ Considerations ............................................37\n   5. Security\
    \ Considerations ........................................38\n      5.1. Denial-of-Service\
    \ Attacks .................................38\n      5.2. Root Secret Considerations\
    \ ................................38\n      5.3. Mutual Authentication .....................................39\n\
    \      5.4. Integrity Protection ......................................39\n  \
    \    5.5. Replay Protection .........................................39\n    \
    \  5.6. Confidentiality ...........................................40\n      5.7.\
    \ Key Derivation, Strength ..................................40\n      5.8. Dictionary\
    \ Attacks ........................................41\n      5.9. Man-in-the-Middle\
    \ Attacks .................................41\n      5.10. Result Indication Protection\
    \ .............................41\n      5.11. Cryptographic Separation of Keys\
    \ .........................41\n      5.12. Session Independence .....................................41\n\
    \      5.13. Identity Protection ......................................42\n  \
    \    5.14. Channel Binding ..........................................42\n    \
    \  5.15. Ciphersuite Negotiation ..................................42\n      5.16.\
    \ Random Number Generation .................................43\n   6. Security\
    \ Claims ................................................43\n   7. Acknowledgements\
    \ ...............................................44\n   8. References .....................................................44\n\
    \      8.1. Normative References ......................................44\n  \
    \    8.2. Informative References ....................................45\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Extensible Authentication Protocol (EAP), described\
    \ in [EAP],\n   provides a standard mechanism for support of multiple authentication\n\
    \   methods.  EAP is also used within IEEE 802 networks through the IEEE\n   802.11i\
    \ [IEEE802.11i] framework.\n   EAP supports several authentication schemes, including\
    \ smart cards,\n   Kerberos, Public Key, One Time Passwords, TLS, and others.\
    \  This\n   document defines an authentication scheme, called the EAP-SAKE.\n\
    \   EAP-SAKE supports mutual authentication and session key derivation,\n   based\
    \ on a static pre-shared secret data.  This RFC is published as\n   documentation\
    \ for the IANA assignment of an EAP Type for a vendor's\n   EAP method per RFC\
    \ 3748.  The specification has passed Designated\n   Expert review for this IANA\
    \ assignment.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   In this document, several words are used to signify the requirements\n\
    \   of the specification.  These words are often capitalized.  The key\n   words\
    \  \"MUST\", \"MUST NOT\", \"REQUIRED\", \"MUST\", \"MUST NOT\", \"SHOULD\",\n\
    \   \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document\n\
    \   are to be interpreted as described in BCP 14 [KEYWORDS].\n   In addition to\
    \ the terms used in [EAP], this document frequently uses\n   the following terms\
    \ and abbreviations:\n   MIC   Message Integrity Check\n   SMS   SAKE Master Secret\n\
    \   NAI   Network Access Identifier\n"
- title: 3.  Protocol Description
  contents:
  - '3.  Protocol Description

    '
- title: 3.1.  Overview and Motivation of EAP-SAKE
  contents:
  - "3.1.  Overview and Motivation of EAP-SAKE\n   The EAP-SAKE authentication protocol\
    \ is a native EAP authentication\n   method.  That is, a stand-alone version of\
    \ EAP-SAKE outside of EAP is\n   not defined.  EAP-SAKE is designed to enable\
    \ mutual authentication,\n   based on pre-shared keys and well-known public cryptographic\n\
    \   algorithms.  This method is ideal for subscription-based public\n   access\
    \ networks, e.g., cellular networks.\n   EAP-SAKE assumes a long-term or pre-shared\
    \ secret known only to the\n   Peer and the Server.  This pre-shared secret is\
    \ called the Root\n   Secret.  The Root Secret consists of a 16-byte part Root-Secret-A,\n\
    \   and 16-byte part Root-Secret-B.  The Root-Secret-A secret is reserved\n  \
    \ for use local to the EAP-SAKE method, i.e., to mutually authenticate\n   the\
    \ EAP Peer and EAP Server.  The Root-Secret-B secret is used to\n   derive other\
    \ quantities such as the Master Session Key (MSK) and\n   Extended Master Session\
    \ Key (EMSK).  Root-Secret-B and Root-Secret-A\n   MUST be cryptographically separate.\n\
    \   When a Backend Authentication Server is used, the Server typically\n   communicates\
    \ with the Authenticator using an AAA protocol.  The AAA\n   communications are\
    \ outside the scope of this document.\n   Some of the advantages of EAP-SAKE are\
    \ as follows:\n   o It is based on well-established Bellare-Rogaway mutual\n \
    \    authentication protocol.\n   o It supports key derivation for local EAP method\
    \ use and for export\n     to other third parties to use them independently of\
    \ EAP.\n   o It employs only two request/response exchanges.\n   o It relies on\
    \ the (corrected) IEEE 802.11i function for key\n     derivation and message integrity.\
    \  This way a device implementing a\n     lower-layer secure association protocol\
    \ compliant with IEEE 802.11i\n     standard will not need additional cryptographic\
    \ code.\n   o Its encryption algorithm is securely negotiated (with no extra\n\
    \     messages), yet encryption use is optional.\n   o Keys used for authentication\
    \ and those used for encryption are\n     cryptographically separate.\n   o User\
    \ identity anonymity can be optionally supported.\n   o No synchronization (e.g.,\
    \ of counters) needed between server and\n     peer.\n   o There is no one-time\
    \ key pre-processing step.\n"
- title: 3.2.  Protocol Operation
  contents:
  - "3.2.  Protocol Operation\n   EAP-SAKE uses four messages consisting of two EAP\
    \ request/response\n   exchanges.  The EAP.Success and EAP.Failure messages shown\
    \ in the\n   figures are not part of the EAP-SAKE method.  As a convention, method\n\
    \   attributes are named AT_XX, where XX is the name of the parameter the\n  \
    \ attribute value is set to.\n"
- title: 3.2.1.  Successful Exchange
  contents:
  - "3.2.1.  Successful Exchange\n   A successful EAP-SAKE authentication exchange\
    \ is depicted in Figure\n   1.  The following steps take place:\n   Peer     \
    \                                                  Server\n       |          \
    \                                                |\n       |                 \
    \       EAP.Request/SAKE/Challenge        |\n       |                        (AT_RAND_S,\
    \ AT_SERVERID)          |\n   1   |<---------------------------------------------------------|\n\
    \       |                                                          |\n       |\
    \ EAP.Response/SAKE/Challenge                              |\n       | (AT_RAND_P,\
    \ AT_PEERID, AT_SPI_P, AT_MIC_P)               |\n   2   |--------------------------------------------------------->|\n\
    \       |                                                          |\n       |\
    \                        EAP.Request/SAKE/Confirm          |\n       |       \
    \                 (AT_SPI_S, AT_ENCR_DATA, AT_MIC_S)|\n   3   |<---------------------------------------------------------|\n\
    \       |                                                          |\n       |\
    \ EAP.Response/SAKE/Confirm                                |\n       | (AT_MIC_P)\
    \                                               |\n   4   |--------------------------------------------------------->|\n\
    \       |                                                          |\n       |\
    \                                                          |\n       |       \
    \                                  EAP-Success      |\n   5   |<---------------------------------------------------------|\n\
    \       |                                                          |\n      Figure\
    \ 1.  EAP-SAKE Authentication Procedure (with ciphersuite\n                  \
    \             negotiation)\n   1.  The EAP server sends the first message of the\
    \ EAP-SAKE exchange.\n       This message is an EAP.Request message of type SAKE\
    \ and subtype\n       Challenge.  The EAP.Request/SAKE/Challenge message contains\
    \ the\n       attributes: AT_RAND_S, whose value is a nonce freshly generated\n\
    \       by the Server; and AT_SERVERID, which carries an identifier of\n     \
    \  the Server (a fully qualified domain name, such as the realm of\n       the\
    \ user NAI [NAI]).  The AT_SERVERID attribute is OPTIONAL but\n       SHOULD be\
    \ included in this message.  The purpose of the\n       AT_SERVERID is to aid\
    \ the Peer in selecting the correct security\n       association (i.e., Root-Secret,\
    \ PEERID, and SERVERID) to use\n       during this EAP phase.\n   2.  The Peer\
    \ responds by sending an EAP.Response message of type SAKE\n       and subtype\
    \ Challenge.  The EAP.Response/SAKE/Challenge message\n       contains the attributes:\
    \ AT_RAND_P, which carries a nonce freshly\n       generated by the Peer; AT_PEERID,\
    \ which carries a Peer\n       identifier; AT_SPI_P, which carries a list of one\
    \ or more\n       ciphersuites supported by the Peer;  and AT_MIC_P, containing\
    \ a\n       message integrity check.  The AT_SPI_P and AT_PEERID attributes\n\
    \       are OPTIONAL.  The AT_PEERID attribute SHOULD be included, in\n      \
    \ order to cover the case of multi-homed hosts.  A supported\n       ciphersuite\
    \ is represented by a value local to the EAP-SAKE\n       method, or \"Security\
    \ Parameter Index\", see section 3.2.8.3.  The\n       Peer uses both nonces,\
    \ along with the Root-Secret-A key, to\n       derive a SAKE Master Secret (SMS)\
    \ and Temporary EAP Keys (TEKs),\n       which also include the TEK-Auth and TEK-Cipher\
    \ keys.  The MIC_P\n       value is computed based on both nonces RAND_S and RAND_P,\
    \ and the\n       entire EAP packet, using the key TEK-Auth, see Section 3.2.6.\n\
    \   3.  Upon receipt of the EAP.Response/SAKE/Challenge message, the\n       Server\
    \ uses both nonces RAND_S and RAND_P, along with the Root-\n       Secret-A key,\
    \ to compute the SMS and TEK in exactly the same way\n       the Peer did.  Following\
    \ that, the Server computes the Peer's\n       MIC_P in exactly the same way the\
    \ Peer did.  The Server then\n       compares the computed MIC_P with the MIC_P\
    \ it received from the\n       Peer.  If they match, the Server considers the\
    \ Peer\n       authenticated.  If encryption is needed, the Server selects the\n\
    \       strongest ciphersuite from the Peer's ciphersuite list SPI_P, or\n   \
    \    a suitable ciphersuite if the Peer did not include the AT_SPI_P\n       attribute.\
    \  The Server sends an EAP.Request message of type SAKE\n       and subtype Confirm,\
    \ containing the attributes: AT_SPI_S,\n       carrying the ciphersuite chosen\
    \ by the Server; AT_ENCR_DATA,\n       containing encrypted data; and AT_MIC_S,\
    \ carrying a message\n       integrity check.  The AT_SPI_S and AT_ENCR_DATA are\
    \ OPTIONAL\n       attributes, included if confidentiality and/or user identity\n\
    \       anonymity is desired.  Other OPTIONAL attributes that MAY be\n       included\
    \ are AT_NEXT_TMPID, and AT_MSK_LIFE.  As before, the\n       MIC_S value is computed\
    \ using both nonces RAND_S and RAND_P, and\n       the entire EAP packet, using\
    \ the key TEK-Auth.\n   4.  If the Peer receives the EAP.Request/SAKE/Confirm\
    \ message\n       indicating successful authentication by the Server, the Peer\n\
    \       computes the MIC_S in the same manner as the Server did.  The\n      \
    \ Peer then compares the received MIC_S with the MIC_S it computed.\n       If\
    \ they match, the Peer considers the Server authenticated, and\n       it sends\
    \ an EAP.Response message of type SAKE and subtype\n       Confirm, with the attribute\
    \ AT_MIC_P containing a message\n       integrity check, computed in the same\
    \ manner as before.\n   5.  After a successful EAP-SAKE exchange, the Server concludes\
    \ the\n       EAP conversation by sending an EAP.Success message to the Peer.\n\
    \   All EAP-SAKE messages contain a Session ID, which is chosen by the\n   Server,\
    \ sent in the first message, and replicated in subsequent\n   messages until an\
    \ EAP.Success or EAP.Failure is sent.  Upon receipt\n   of an EAP-SAKE message,\
    \ both Peer and Server MUST check the format of\n   the message to ensure that\
    \ it is well-formed and contains a valid\n   Session ID.\n   Note that the Session\
    \ ID is introduced mainly for replay protection\n   purposes, as it helps uniquely\
    \ identify a session between a Peer and\n   a Server.  In most cases, there is\
    \ a one-to-one relationship between\n   the Session ID and the Peer/Server pair.\n\
    \   The parameters used by the EAP-SAKE method are summarized in the\n   table\
    \ below:\n     Name     Length (bytes)  Description\n   ---------+---------------+-------------\n\
    \   RAND_P      16             Peer nonce\n   RAND_S      16             Server\
    \ nonce\n   MIC_P       16             Peer MIC\n   MIC_S       16           \
    \  Server MIC\n   SPI_P       variable       Peer ciphersuite preference(s)\n\
    \   SPI_S       variable       Server chosen ciphersuite\n   PEERID      variable\
    \       Peer identifier\n   SERVERID    variable       Server identifier (FQDN)\n"
- title: 3.2.2.  Authentication Failure
  contents:
  - "3.2.2.  Authentication Failure\n   If the Authenticator receives an EAP.Failure\
    \ message from the Server,\n   the Authenticator MUST terminate the connection\
    \ with the Peer\n   immediately.\n   The Server considers the Peer to have failed\
    \ authentication if either\n   of the two received MIC_P values does not match\
    \ the computed MIC_P.\n   The Server SHOULD deny authorization for a Peer that\
    \ does not\n   advertise any of the ciphersuites that are considered acceptable\n\
    \   (e.g., by local system policy) and send an EAP.Failure message.\n   In case\
    \ of authentication failure, the Server MUST send an\n   EAP.Failure message to\
    \ the Peer as in Figure 2.  The following steps\n   take place:\n   Peer     \
    \                                                  Server\n       |          \
    \                                                |\n       |                 \
    \       EAP.Request/SAKE/Challenge        |\n       |                        (AT_RAND_S,\
    \ AT_SERVERID)          |\n   1   |<---------------------------------------------------------|\n\
    \       |                                                          |\n       |\
    \ EAP.Response/SAKE/Challenge                              |\n       | (AT_RAND_P,\
    \ AT_PEERID, AT_SPI_P, AT_MIC_P)               |\n   2   |--------------------------------------------------------->|\n\
    \       |                                                          |\n       |\
    \               +-------------------------------------------+\n       |      \
    \         | Server finds MIC_P invalid.               |\n       |            \
    \   +-------------------------------------------+\n       |                  \
    \                                        |\n       |                         \
    \                    EAP-Failure  |\n   3   |<---------------------------------------------------------|\n\
    \         Figure 2.  EAP-SAKE Authentication Procedure, Peer Fails\n         \
    \                     Authentication\n   1.  As in step 1 of Figure 1.\n   2.\
    \  As in step 2 of Figure 1.\n   3.  Upon receipt of the EAP.Response/SAKE/Challenge\
    \ message, the\n       Server uses both nonces RAND_S and RAND_P, along with the\
    \ Root-\n       Secret-A key, to compute the SMS and TEK in exactly the same way\n\
    \       the Peer did.  Following that, the Server computes the Peer's MIC\n  \
    \     in exactly the same way the Peer did.  The Server then compares\n      \
    \ the computed MIC_P with the MIC_P it received from the Peer.\n       Since they\
    \ do not match, the Server considers the Peer to have\n       failed authentication\
    \ and sends an EAP.Failure message back to\n       the Peer.\n   If the AT_SPI_S\
    \ attribute does not contain one of the SPI values that\n   the Peer listed in\
    \ the previous message, or if the Peer did not\n   include an AT_SPI_P attribute\
    \ yet does not accept the ciphersuite the\n   Server has chosen, then the Peer\
    \ SHOULD silently discard this\n   message.  Alternatively, the Peer MAY send\
    \ a SAKE/Auth-Reject message\n   back to the Server; in response to this message,\
    \ the Server MUST send\n   an EAP.Failure message to the Peer.\n   The AT_SPI_S\
    \ attribute MUST be included if encryption is to be used.\n   The Server knows\
    \ whether or not encryption is to be used, as it is\n   usually the Server that\
    \ needs to protect some data intended for the\n   Peer (e.g., temporary ID, group\
    \ keys, etc).  If the Peer receives an\n   AT_SPI_S attribute yet there is no\
    \ AT_ENCR_DATA attribute, the Peer\n   SHOULD process the message and skip the\
    \ AT_SPI_S attribute.\n   The Peer considers the Server to have failed authentication\
    \ if the\n   received and the computed MIC_S values do not match.  In this case,\n\
    \   the Peer MUST send to the Server an EAP.Response message of type SAKE\n  \
    \ and subtype Auth-Reject, indicating an authentication failure.  In\n   this\
    \ case, the Server MUST send an EAP.Failure message to the Peer as\n   in Figure\
    \ 3.  The following steps take place:\n    Peer                              \
    \                         Server\n        |                                  \
    \                        |\n        |                        EAP.Request/SAKE/Challenge\
    \        |\n        |                        (AT_RAND_S, AT_SERVERID)        \
    \  |\n    1   |<---------------------------------------------------------|\n \
    \       |                                                          |\n       \
    \ | EAP.Response/SAKE/Challenge                              |\n        | (AT_RAND_P,\
    \ AT_PEERID, AT_SPI_P, AT_MIC_P)               |\n    2   |--------------------------------------------------------->|\n\
    \        |                                                          |\n      \
    \  |                          EAP.Request/SAKE/Confirm        |\n        |   \
    \                     (AT_SPI_S, AT_ENCR_DATA, AT_MIC_S)|\n    3   |<---------------------------------------------------------|\n\
    \        |                                                          |\n      +-----------------------------------------------+\
    \            |\n      | Peer finds MIC_S invalid.                     |      \
    \      |\n      +-----------------------------------------------+            |\n\
    \        |                                                          |\n      \
    \  | EAP.Response/SAKE/Auth-Reject                            |\n     4  |--------------------------------------------------------->|\n\
    \        |                                                          |\n      \
    \  |                                             EAP-Failure  |\n     5  |<---------------------------------------------------------|\n\
    \        |                                                          |\n      \
    \  Figure 3.  EAP-SAKE Authentication Procedure, Server Fails\n              \
    \                Authentication\n   1.  As in step 1 of Figure 1.\n   2.  As in\
    \ step 2 of Figure 1.\n   3.  As in step 3 of Figure 1.\n   4.  The Peer receives\
    \ a EAP.Request/SAKE/Confirm message indicating\n       successful authentication\
    \ by the Server.  The Peer computes the\n       MIC_S in the same manner as the\
    \ Server did.  The Peer then\n       compares the received MIC_S with the MIC_S\
    \ it computed.  Since\n       they do not match, the Peer considers the Server\
    \ to have failed\n       authentication.  In this case, the Peer responds with\
    \ an\n       EAP.Response message of type SAKE and subtype Auth-Reject,\n    \
    \   indicating authentication failure.\n   5.  Upon receipt of a EAP.Response/SAKE/Auth-Reject\
    \ message, the\n       Server sends an EAP.Failure message back to the Peer.\n"
- title: 3.2.3.  Identity Management
  contents:
  - "3.2.3.  Identity Management\n   It may be advisable to assign a temporary identifier\
    \ (TempID) to a\n   Peer when user anonymity is desired.  The TempID is delivered\
    \ to the\n   Peer in the EAP.Request/SAKE/Confirm message.  The TempID follows\
    \ the\n   format of any NAI [NAI] and is generated by the EAP Server that\n  \
    \ engages in the EAP-SAKE authentication task with the Peer.  EAP\n   servers\
    \ SHOULD be configurable with TempID spaces that can be\n   distinguished from\
    \ the permanent identity space.  For instance, a\n   specific realm could be assigned\
    \ for TempIDs (e.g., tmp.example.biz).\n   A TempID is not assigned an explicit\
    \ lifetime.  The TempID is valid\n   until the Server requests the permanent identifier,\
    \ or the Peer\n   triggers the start of a new EAP session by sending in its permanent\n\
    \   identifier.  A Peer MUST be able to trigger an EAP session at any\n   time\
    \ using its permanent identifier.  A new TempID assigned during a\n   successful\
    \ EAP session MUST replace the existing TempID for future\n   transactions between\
    \ the Peer and the Server.\n   Note that the delivery of a TempID does not imply\
    \ that the Server\n   considers the Peer authenticated; the Server still has to\
    \ check the\n   MIC in the EAP.Response/SAKE/Confirm message.  In case the EAP\
    \ phase\n   ends with an EAP.Failure message, then the Server and the Peer MUST\n\
    \   consider the TempID that was just delivered as invalid.  Hence, the\n   Peer\
    \ MUST NOT use this TempID the next time it tries to authenticate\n   with the\
    \ Server.\n"
- title: 3.2.4.  Obtaining Peer Identity
  contents:
  - "3.2.4.  Obtaining Peer Identity\n   The types of identities that a Peer may possess\
    \ are permanent and\n   temporary identities, referred to as PermID and TempID,\
    \ respectively.\n   A PermID can be an NAI associated with the Root Secret, and\
    \ is long-\n   lived.  A TempID is an identifier generated through the EAP method\n\
    \   and that the Peer can use to identify itself during subsequent EAP\n   sessions\
    \ with the Server.  The purpose of the TempID is to allow for\n   user anonymity\
    \ support.  The use of TempIDs is optional in the EAP-\n   SAKE method.\n   The\
    \ Server MAY request the Peer ID via the EAP.Request/SAKE/Identity\n   message,\
    \ as shown in Figure 4.  This case may happen if, for example,\n   the Server\
    \ wishes to initiate an EAP-SAKE session for a Peer it does\n   not have a subscriber\
    \ identifier for.  The following steps take\n   place:\n   Peer              \
    \                                            Server\n          |             \
    \                                             |\n          |                 \
    \        +---------------------------------+\n          |                    \
    \     | Server wishes to initiate       |\n          |                       \
    \  | an EAP-SAKE session             |\n          |                         |\
    \                                 |\n          |                         +---------------------------------+\n\
    \          |                                                          |\n    \
    \      |                        EAP.Request/SAKE/Identity         |\n        \
    \  |                        (AT_ANY_ID_REQ, AT_SERVERID)      |\n     1    |<---------------------------------------------------------|\n\
    \          |                                                          |\n    \
    \      | EAP.Response/SAKE/Identity                               |\n        \
    \  | (AT_PEERID)                                              |\n     2    |--------------------------------------------------------->|\n\
    \          |                                                          |\n    \
    \    +--------------------------------------------------------------+\n      \
    \  | If identity found, normal EAP-SAKE authentication follows.   |\n        +--------------------------------------------------------------+\n\
    \                 Figure 4.  Server Requests Peer Identity\n   1.  The Server\
    \ sends an EAP.Request message of type SAKE and subtype\n       Identity, with\
    \ the attribute AT_ANY_ID_REQ, indicating a request\n       for any Peer identifier.\n\
    \   2.  The Peer constructs an EAP.Response message of type SAKE and\n       subtype\
    \ Identity, with the attribute AT_PEER_ID containing any\n       Peer identifier\
    \ (PermID or TempID).\n   If the Server cannot find the Peer identity reported\
    \ in the\n   EAP.Response/SAKE/Identity message, or if it does not recognize the\n\
    \   format of the Peer identifier, the Server MAY send an EAP.Failure\n   message\
    \ to the Peer.\n   If the Server is unable to look up a Peer by its TempID, or\
    \ if policy\n   dictates that the Peer should now use its permanent id, then the\n\
    \   Server may specifically ask for the permanent identifier, as in\n   Figure\
    \ 5.  The following steps occur:\n   Peer                                    \
    \                   Server\n       |                                         \
    \                 |\n       |                         +---------------------------------+\n\
    \    1  |                         | Server obtains TempID but       |\n      \
    \ |                         | requires PermID                 |\n       |    \
    \                     +---------------------------------+\n       |          \
    \                                                |\n       |                 \
    \       EAP.Request/SAKE/Identity         |\n       |                        (AT_PERM_ID_REQ,\
    \ AT_SERVERID)     |\n    2  |<---------------------------------------------------------|\n\
    \       |                                                          |\n       |\
    \ EAP.Response/SAKE/Identity                               |\n       | (AT_PEERID)\
    \                                              |\n    3  |--------------------------------------------------------->|\n\
    \       |                                                          |\n       |\
    \                         +---------------------------------+\n       |      \
    \                   | Server finds and uses           |\n       |            \
    \             | Peer PermID to start a          |\n       |                  \
    \       | EAP-SAKE authentication phase   |\n       |                        \
    \ +---------------------------------+\n       |\n    +---------------------------------------------------------------+\n\
    \    |  Normal EAP-SAKE authentication follows.                      |\n    +---------------------------------------------------------------+\n\
    \       Figure 5.  Server Is Given a TempID as Peer Identity; Server\n       \
    \                      Requires a PermID\n   1.  The Peer (or the Authenticator\
    \ on behalf of the Peer) sends an\n       EAP.Request message of type Identity\
    \ and includes the TempID.\n   2.  The Server requires a PermID instead, so it\
    \ sends an EAP.Request\n       message of type SAKE and subtype Identity with\
    \ attributes\n       AT_PERM_ID_REQ and AT_SERVERID.\n   3.  The Peer sends an\
    \ EAP.Response message of type SAKE and subtype\n       Identity containing the\
    \ attribute AT_PEERID carrying the Peer\n       PermID.\n"
- title: 3.2.5.  Key Hierarchy
  contents:
  - "3.2.5.  Key Hierarchy\n   EAP-SAKE uses a three-level key hierarchy.\n   Level\
    \ 1 contains the pre-shared secret called Root Secret.  This is a\n   32-byte\
    \ high-entropy string partitioned into the Root-Secret-A part\n   (16 bytes) and\
    \ the Root-Secret-B part (16 bytes).\n   Level 2 contains the key derivation key\
    \ called the SAKE Master Secret\n   (SMS).  SMS-A is derived from the Root-Secret-A\
    \ key and the Peer and\n   Server nonces using the EAP-SAKE Key-Derivation Function\
    \ (KDF), and\n   similarly for SMS-B.  The SMS is known only to the Peer and Server\n\
    \   and is not made known to other parties.\n   Level 3 contains session keys,\
    \ such as Transient EAP Keys (TEK),\n   Master Session Key (MSK), and Extended\
    \ MSK (EMSK).  TEKs are keys for\n   use local to the EAP method only.  They are\
    \ derived from the SMS-A\n   and the nonces using the EAP-SAKE KDF.  They are\
    \ partitioned into a\n   16-byte TEK-Auth, used to compute the MICs, and a 16-byte\
    \ TEK-Cipher,\n   used to encrypt selected attributes.  Since the SMS is fresh,\
    \ so are\n   the derived TEKs.\n   +--------------------+                    \
    \   +--------------------+\n   |  Root-Secret-A     |                       |\
    \  Root-Secret-B     |\n   | (pre-shared secret)|                       | (pre-shared\
    \ secret)|\n   +--------------------+                       +--------------------+\n\
    \          |                                       |\n          V            \
    \                           V\n   +-------------------+                      \
    \  +--------------------+\n   | SAKE Master Secret|<---RAND_S------------->| SAKE\
    \ Master Secret |\n   |    (SMS-A)        |        |               |   (SMS-B)\
    \          |\n   |                   |<-------]---RAND_P----->|              \
    \      |\n   +-------------------+        |     |         +--------------------+\n\
    \          |                     |     |                |\n          V       \
    \              |     |                V\n   +--------------------+       |   \
    \  |         +--------------------+\n   | Transient EAP Keys |<------+-----+-------->|\
    \  Session Keys:     |\n   | TEK-Auth,TEK-Cipher|<------------+-------->|  MSK,\
    \ EMSK         |\n   +--------------------+                       +--------------------+\n\
    \             Figure 6.  Key Hierarchy for the EAP-SAKE Method\n   On another\
    \ branch of level 3 of the key hierarchy are the MSK and\n   EMSK, each mandated\
    \ to be 64 bytes long.  They are derived from the\n   SMS-B and the nonces using\
    \ the EAP-SAKE KDF.  Again, since the SMS is\n   fresh, so are the derived MSK/EMSK.\
    \  The MSK is meant to be exported\n   and relayed to other parties.  The EMSK\
    \ is reserved for future use,\n   such as derivation of application-specific keys,\
    \ and is not shared\n   with other parties.\n   The EAP-SAKE key material is summarized\
    \ in the table below.\n   ===================================================================\n\
    \   Key              Size      Scope          Lifetime  Use\n                \
    \  (bytes)\n   ===================================================================\n\
    \   Root-Secret-A    16        Peer, Server   Device    Derive TEK\n   --------------------------------------------------------------------\n\
    \   Root-Secret-B    16        Peer, Server   Device    Derive MSK, EMSK\n   --------------------------------------------------------------------\n\
    \   TEK-Auth         16        Peer, Server   MSK Life  Compute MICs\n   --------------------------------------------------------------------\n\
    \   TEK-Cipher       16        Peer, Server   MSK Life  Encrypt attribute\n  \
    \ --------------------------------------------------------------------\n   MSK\
    \              64        Peer, Server,  MSK Life  Derive keys for\n          \
    \                    Authenticator            lower-layer use\n   --------------------------------------------------------------------\n\
    \   EMSK             64        Peer, Server   MSK Life  Reserved\n   --------------------------------------------------------------------\n\
    \   A key name format is not provided in this version.\n   Since this version\
    \ of EAP-SAKE does not support fast re-\n   authentication, the lifetime of the\
    \ TEKs is to extend only until the\n   next EAP mutual authentication.  The MSK\
    \ lifetime dictates when the\n   next mutual authentication is to take place.\
    \  The Server MAY convey\n   the MSK lifetime to the Peer in the AT_MSK_LIFE attribute.\
    \  Note that\n   EAP-SAKE does not support key lifetime negotiation.\n   The EAP-SAKE\
    \ Method-Id is the contents of the RAND_S field from the\n   AT_RAND_S attribute,\
    \ followed by the contents of the RAND_P field in\n   the AT_RAND_P attribute.\n"
- title: 3.2.6.  Key Derivation
  contents:
  - '3.2.6.  Key Derivation

    '
- title: 3.2.6.1.  Key-Derivation Function
  contents:
  - "3.2.6.1.  Key-Derivation Function\n   For the rest of this document, KDF-X denotes\
    \ the EAP-SAKE Key-\n   Derivation Function whose output is X bytes.  This function\
    \ is the\n   pseudo-random function of [IEEE802.11i].\n   The function takes three\
    \ strings of bytes of arbitrary lengths: a\n   Key, a Label, and a Msg, and outputs\
    \ a string Out of length X bytes\n   as follows:\n   Out = KDF-X (Key, Label,\
    \ Msg)\n   The KDF is a keyed hash function with key \"Key\" and operating on\n\
    \   input \"Label | Msg\".  The convention followed herein is that\n   concatenation\
    \ is denoted by |, FLOOR denotes the floor function, and\n   [x...y] denotes bytes\
    \ x through y.\n   The label is an ASCII character string.  It is included in\
    \ the exact\n   form it is given without a length byte or trailing null character.\n\
    \   Below, \"Length\" denotes a single unsigned octet with values between 0\n\
    \   and 255 (bytes).  The following functions are defined (see [HMAC],\n   [SHA1]):\n\
    \   H-SHA1(Key, Label, Msg, Length) := HMAC-SHA1(Key, Label|Y|Msg|Length)\n  \
    \ where Y := 0x00\n   KDF-16(Key, Label, Msg) := KDF(Key, Label, Msg, 16)\n  \
    \ KDF-32(Key, Label, Msg) := KDF(Key, Label, Msg, 32)\n   KDF-128(Key, Label,\
    \ Msg) := KDF(Key, Label, Msg, 128)\n   KDF(Key, Label, Msg, Length)\n   R :=\
    \ []  ;; null string\n   for i := 0 to FLOOR(Length/20)-1 do\n   R := R | H-SHA1(Key,\
    \ Label, Msg, i)\n   return R[0...(Length-1)]\n"
- title: 3.2.6.2.  Transient EAP Keys Derivation
  contents:
  - "3.2.6.2.  Transient EAP Keys Derivation\n   The Peer and Server derive the SMS\
    \ and then the TEK as follows:\n   SMS-A = KDF-16 (Root-Secret-A, \"SAKE Master\
    \ Secret A\", RAND_P|RAND_S)\n   TEK = KDF-32 (SMS-A, \"Transient EAP Key\", RAND_S\
    \ | RAND_P)\n   TEK-Auth = TEK[0...15]\n   TEK-Cipher = TEK[16...31]\n"
- title: 3.2.6.3.  Extended/Master Session Key Derivation
  contents:
  - "3.2.6.3.  Extended/Master Session Key Derivation\n   The Peer and the Server\
    \ derive the MSK/EMSK, as follows:\n   SMS-B = KDF-16 (Root-Secret-B, \"SAKE Master\
    \ Secret B\", RAND_P|RAND_S)\n   Session-Key-Block=KDF-128(SMS-B, \"Master Session\
    \ Key\", RAND_S|RAND_P)\n   MSK = Session-Key-Block[0...63]\n   EMSK = Session-Key-Block[64...127]\n\
    \   The derivation above affords the required cryptographic separation\n   between\
    \ the MSK and EMSK.  That is, knowledge of the EMSK does not\n   immediately lead\
    \ to knowledge of the MSK, nor does knowledge of the\n   MSK immediately lead\
    \ to knowledge of the EMSK.\n"
- title: 3.2.7.  Ciphersuite Negotiation
  contents:
  - "3.2.7.  Ciphersuite Negotiation\n   A ciphersuite is identified by a numeric\
    \ value called the Security\n   Parameter Index (SPI).  The SPI is used here in\
    \ the EAP-SAKE method\n   in order to negotiate a ciphersuite between the Peer\
    \ and the Server\n   for EAP data protection only.  Obviously, this ciphersuite\
    \ can only\n   be used late in the EAP conversation, after it has been agreed\
    \ upon\n   by both the Peer and the Server.\n   The EAP method may or may not\
    \ need to use this ciphersuite, since\n   attribute encryption is optional.  For\
    \ example, if the temporary\n   identifier needs to be delivered to the Peer and\
    \ needs to be\n   encrypted, then the negotiated ciphersuite will be used for\
    \ this\n   task.  If there are no attributes that need encryption as they are\n\
    \   passed to the Peer, then this ciphersuite is never used.\n   As with most\
    \ other methods employing ciphersuite negotiation, the\n   following exchange\
    \ is employed: the Peer sends an ordered list of one\n   or more supported ciphersuites,\
    \ starting with the most preferred one,\n   in a field SPI_P.  The Server then\
    \ sends back the one ciphersuite\n   chosen in a field SPI_S.  The Server SHOULD\
    \ choose the strongest\n   ciphersuite supported by both of them.\n   Ciphersuite\
    \ negotiation for data protection is achieved via SAKE\n   Signaling as follows.\
    \  In the EAP.Response/SAKE/Challenge, the Peer\n   sends a list of supported\
    \ ciphersuites, SPI_P, and protects that with\n   a MIC.  In the EAP.Request/SAKE/Confirm,\
    \ the Server sends one\n   selected ciphersuite, SPI_S, and signs that with a\
    \ MIC.  Finally, the\n   Peer confirms the selected ciphersuite and readiness\
    \ to use it in a\n   signed EAP.Response/SAKE/Confirm message.  The negotiation\
    \ is secure\n   because of the Message Integrity Checks that cover the entire\
    \ EAP\n   message.\n"
- title: 3.2.8.  Message Integrity and Encryption
  contents:
  - "3.2.8.  Message Integrity and Encryption\n   This section specifies the EAP/SAKE\
    \ attributes used for message\n   integrity and attribute encryption: AT_MIC_S,\
    \ AT_MIC_P, AT_IV,\n   AT_ENCR_DATA, and AT_PADDING.  Only the AT_MIC_S and AT_MIC_P\
    \ are\n   mandatory to use during the EAP-SAKE exchange.\n   Because the TEKs\
    \ necessary for protection of the attributes and for\n   message authentication\
    \ are derived using the nonces RAND_S and\n   RAND_P, the AT_MIC_S and AT_MIC_P\
    \ attributes can only be used in the\n   EAP.Response/SAKE/Challenge message and\
    \ any messages sent thereafter.\n"
- title: 3.2.8.1.  The AT_MIC_S and AT_MIC_P Attributes
  contents:
  - "3.2.8.1.  The AT_MIC_S and AT_MIC_P Attributes\n   The AT_MIC_S and AT_MIC_P\
    \ attributes are used for EAP-SAKE message\n   integrity.  The AT_MIC_S attribute\
    \ MUST be included in all EAP-SAKE\n   packets that the Server sends whenever\
    \ key material (TEK) has been\n   derived.  That is, the AT_MIC_S attribute MUST\
    \ be included in the\n   EAP.Request/SAKE/Confirm message.  The AT_MIC_S MUST\
    \ NOT be included\n   in EAP.Request/SAKE/Challenge messages, or EAP.Request/SAKE/Identity\n\
    \   messages.\n   The AT_MIC_P attribute MUST be included in all EAP-SAKE packets\
    \ the\n   Peer sends whenever key material (TEK) has been derived.  That is,\n\
    \   the AT_MIC_P attribute MUST be included in the\n   EAP.Response/SAKE/Challenge\
    \ and EAP.Response/SAKE/Confirm messages.\n   The AT_MIC_P attribute MUST NOT\
    \ be included in the\n   EAP.Response/SAKE/Auth-Reject message since the Peer\
    \ has not\n   confirmed that it has the same TEK as the Server.\n   Messages that\
    \ do not meet the conditions specified above MUST be\n   silently discarded upon\
    \ reception.\n   The value field of the AT_MIC_S and AT_MIC_P attributes contain\
    \ a\n   message integrity check (MIC).  The MIC is calculated over the entire\n\
    \   EAP packet, prepended with the Server nonce and identifier and the\n   Peer\
    \ nonce and identifier.  The value field of the MIC attribute is\n   set to zero\
    \ when calculating the MIC.  Including the Server and Peer\n   nonces and identifiers\
    \ aids in detecting replay and man-in-the-middle\n   attacks.\n   The Peer computes\
    \ its MIC as follows:\n   MIC_P = KDF-16 (TEK-Auth, \"Peer MIC\", RAND_S | RAND_P\
    \ |\n   PEERID | 0x00 | SERVERID | 0x00 | <EAP-packet>),\n   while the Server\
    \ computes its MIC as\n   MIC_S = KDF-16 (TEK-Auth, \"Server MIC\", RAND_P |RAND_S\
    \ |\n   SERVERID | 0x00 | PEERID | 0x00 | <EAP-packet>).\n   Here, <EAP-packet>\
    \ denotes the entire EAP packet, used as a string of\n   bytes, the MIC value\
    \ field set to zero.  0x00 denotes a single octet\n   value used to delimit SERVERID\
    \ and PEERID.  The PEERID and SERVERID,\n   respectively, are the ones carried\
    \ in the corresponding attributes in\n   the SAKE/Challenge messages.\n   In case\
    \ the SAKE/Challenge exchange was preceded by an\n   EAP.Request/SAKE/Identity\
    \ message containing the AT_SERVERID\n   Attribute, then the SERVERID value in\
    \ the MIC_P and MIC_S computation\n   MUST be set to the value of this attribute.\n\
    \   If the AT_SERVERID was not included in either the SAKE/Challenge\n   message\
    \ or the SAKE/Identity message, then the value of the SERVERID\n   used in the\
    \ computation of MIC_P and MIC_S MUST be empty.  If the\n   AT_PEERID was not\
    \ included in the SAKE/Challenge message, and there\n   was no EAP.Response/SAKE/Identity\
    \ message preceding the\n   SAKE/Challenge messages, then the value of the PEERID\
    \ used in the\n   computation of MIC_P and MIC_S MUST be empty.\n   The Server\
    \ and Peer identity are included in the computation of the\n   signed responses\
    \ so that the Peer and Server can verify each other's\n   identities, and the\
    \ possession of a common secret, the TEK-Auth.\n   However, since the AT_SERVERID\
    \ is not explicitly signed with a MIC by\n   the Server, EAP-SAKE does not claim\
    \ channel binding.\n"
- title: 3.2.8.2.  The AT_IV, AT_ENCR_DATA, and AT_PADDING Attributes
  contents:
  - "3.2.8.2.  The AT_IV, AT_ENCR_DATA, and AT_PADDING Attributes\n   The AT_IV and\
    \ AT_ENCR_DATA attributes can be used to transmit\n   encrypted information between\
    \ the Server and the Peer.  The value\n   field of AT_IV contains an initialization\
    \ vector (IV) if one is\n   required by the encryption algorithm used.  It is\
    \ not mandatory that\n   the AT_IV attribute be included whenever the AT_ENCR_DATA\
    \ attribute\n   is.\n   However, the AT_IV attribute MUST NOT be included unless\
    \ the\n   AT_ENCR_DATA is included.  Messages that do not meet this condition\n\
    \   MUST be silently discarded.\n   Attributes can be encrypted only after a ciphersuite\
    \ has been agreed\n   on, i.e., in any message starting with the Server's\n  \
    \ EAP.Request/SAKE/Confirm message.  The attributes MUST be encrypted\n   using\
    \ algorithms corresponding to the SPI value specified by the\n   AT_SPI_S attribute.\
    \  The attributes MUST be encrypted using the TEK-\n   Cipher key, whose derivation\
    \ is specified in Section 3.2.6.2.\n   If an IV is required by the encryption\
    \ algorithm, then the sender of\n   the AT_IV attribute MUST NOT reuse the IV\
    \ value from previous EAP-\n   SAKE packets.  The sender MUST choose a new value\
    \ for each AT_IV\n   attribute.  The sender SHOULD use a good random number generator\
    \ to\n   generate the initialization vector (see [RFC4086] for guidelines).\n\
    \   The value field of the AT_ENCR_DATA attribute consists of bytes\n   encrypted\
    \ using the ciphersuite specified in the AT_SPI_S attribute.\n   The encryption\
    \ key is the TEK-Cipher, and the plaintext consists of\n   one or more concatenated\
    \ EAP-SAKE attributes.\n   The default encryption algorithm, as described in Section\
    \ 3.2.8.3,\n   requires the length of the plaintext to be a multiple of 16 bytes.\n\
    \   The sender MAY need to include the AT_PADDING attribute as the last\n   attribute\
    \ within the value field of the AT_ENCR_DATA attribute.  The\n   length of the\
    \ padding is chosen so that the length of the value field\n   of the AT_ENCR_DATA\
    \ attribute becomes a multiple of 16 bytes.  The\n   AT_PADDING attribute SHOULD\
    \ NOT be included if the total length of\n   other attributes present within the\
    \ AT_ENCR_DATA attribute is a\n   multiple of 16 bytes.  The length of the AT_PADDING\
    \ attribute\n   includes the Attribute Type and Attribute Length fields.  The\
    \ actual\n   pad bytes in the value field are set to zero (0x00) on sending. \
    \ The\n   recipient of the message MUST verify that the pad bytes are zero\n \
    \  after decryption and MUST silently discard the message otherwise.\n   The MIC\
    \ computed on the entire EAP message can be used to obviate the\n   need for special\
    \ integrity protection or message authentication of\n   the encrypted attributes.\n\
    \   An example of the AT_ENCR_DATA attribute is shown in Section 3.3.3.\n"
- title: 3.2.8.3.  Security Parameter Index (SPI) Considerations
  contents:
  - "3.2.8.3.  Security Parameter Index (SPI) Considerations\n   An SPI value is a\
    \ variable-length string identifying at least an\n   encryption algorithm and\
    \ possibly a \"security association\".  EAP-SAKE\n   does not mandate the format\
    \ of the SPI; it only mandates that the\n   default encryption algorithm be supported\
    \ if encryption is supported.\n   That is, if an implementation compliant with\
    \ this document supports\n   encryption, then it MUST support the AES-CBC cipher.\n\
    \   The default encryption algorithm AES-CBC involves the AES block\n   cipher\
    \ [AES] in the Cipher-Block-Chaining (CBC) mode of operation\n   [CBC].\n   The\
    \ Peer in the EAP-SAKE method can send up to four SPI values in its\n   SPI_P\
    \ field.  Because the length of the AT_SPI_P and AT_SPI_S\n   attributes must\
    \ each be a multiple of 2 bytes, the sender pads the\n   value field with zero\
    \ bytes when necessary (the AT_PADDING attribute\n   is not used here).  For example,\
    \ the value field of the AT_SPI_S\n   contains one byte with the chosen SPI, followed\
    \ by one byte of zeros.\n"
- title: 3.2.9.  Fragmentation
  contents:
  - "3.2.9.  Fragmentation\n   The EAP-SAKE method does not require fragmentation,\
    \ as the messages\n   do not get excessively long.  That is, EAP packets are well\
    \ within\n   the limit of the maximum transmission unit of other layers (link,\n\
    \   network).  The only variable fields are those carrying NAIs, which\n   are\
    \ limited by their length field to 256 bytes.\n"
- title: 3.2.10.  Error Cases
  contents:
  - "3.2.10.  Error Cases\n   Malformed messages: As a general rule, if a Peer or\
    \ Server receives\n   an EAP-SAKE packet that contains an error, the implementation\
    \ SHOULD\n   silently discard this packet, not change state, and not send any\
    \ EAP\n   messages to the other party.  Examples of such errors include a\n  \
    \ missing mandatory attribute, an attribute that is not allowed in this\n   type\
    \ of message, and unrecognized subtypes or attributes.\n   Non-matching Session\
    \ Id: If a Peer or Server receives an EAP-SAKE\n   packet with a Session Id field\
    \ not matching the Session Id from the\n   previous packet in this session, that\
    \ entity SHOULD silently discard\n   this packet (not applicable for the first\
    \ message of an EAP-SAKE\n   session).\n   Peer Authorization Failure: It may\
    \ be possible that a Peer is not\n   authorized for services, such as when the\
    \ terminal device is reported\n   stolen.  In that case, the Server SHOULD send\
    \ an EAP.Failure message.\n   Unexpected EAP.Success: A Server MUST NOT send an\
    \ EAP-Success message\n   before the SAKE/Challenge and SAKE/Confirm rounds. \
    \ The Peer MUST\n   silently discard any EAP.Success packets before the Peer has\n\
    \   successfully authenticated the Server via the\n   EAP.Response/SAKE/Confirm\
    \ packet.\n   The Peer and Server SHOULD log all error cases.\n"
- title: 3.3.  Message Formats
  contents:
  - '3.3.  Message Formats

    '
- title: 3.3.1.  Message Format Summary
  contents:
  - "3.3.1.  Message Format Summary\n   A summary of the EAP packet format [EAP] is\
    \ shown below for\n   convenience.  The fields are transmitted from left to right.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |   Identifier  |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Type=EAP-SAKE  |    Version=2  | Session ID    |   Subtype     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Code\n   1 - Request\n   2 - Response\n   Identifier\n      The identifier\
    \ field is one octet and aids in matching responses\n      with requests.\n  \
    \ Length\n      The Length field is two octets and indicates the number of octets\n\
    \      in an EAP message including the Code, Identifier, Length, Type,\n     \
    \ and Data fields.\n   Type\n      To be assigned.\n   Version\n      The EAP-SAKE\
    \ method as described herein is version 2.\n   Session ID\n      The Session ID\
    \ is a 1-byte random number that MUST be freshly\n      generated by the Server\
    \ that must match all EAP messages in a\n      particular EAP conversation.\n\
    \   Subtype\n      EAP-SAKE subtype: SAKE/Challenge, SAKE/Confirm, SAKE/Auth-Reject,\n\
    \      and SAKE/Identity.  All messages of type \"EAP-SAKE\" that are not\n  \
    \    of these subtypes MUST silently discarded.\n      Message Name          Subtype\
    \ Value (decimal)\n      =============================================\n     \
    \ SAKE/Challenge        1\n      SAKE/Confirm          2\n      SAKE/Auth-Reject\
    \      3\n      SAKE/Identity         4\n"
- title: 3.3.2.  Attribute Format
  contents:
  - "3.3.2.  Attribute Format\n   The EAP-SAKE attributes that are part of the EAP-SAKE\
    \ packet follow\n   the Type-Length-Value format with 1-byte Type, 1-byte Length,\
    \ and\n   variable-length Value (up to 255 bytes).  The Length field is in\n \
    \  octets and includes the length of the Type and Length fields.  The\n   EAP-SAKE\
    \ attribute format is as follows:\n    0                   1                 \
    \  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |     Length    |  Value...                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      1-byte unsigned integer; see Table below.\n   Length\n      The\
    \ total number of octets in the attribute, including Type and\n      Length.\n\
    \   Value\n      Attribute-specific.\n   The following attribute types are allocated.\n\
    \   -----------------------------------------------------------------\n   Attr.\
    \  Name    Length\n                (bytes)       Skippable      Description\n\
    \   -----------------------------------------------------------------\n   AT_RAND_S\
    \     18           No        Server Nonce RAND_S\n   AT_RAND_P     18        \
    \   No        Peer Nonce RAND_P\n   AT_MIC_S      10           No        Server\
    \ MIC\n   AT_MIC_P      10           No        Peer MIC\n   AT_SERVERID   variable\
    \     No        Server FQDN\n   AT_PEERID     variable     No        Peer NAI\
    \ (tmp, perm)\n   AT_SPI_S      variable     No        Server chosen SPI SPI_S\n\
    \   AT_SPI_P      variable     No        Peer SPI list SPI_P\n   AT_ANY_ID_REQ\
    \    4         No        Requires any Peer Id (tmp, perm)\n   AT_PERM_ID_REQ \
    \  4         No        Requires Peer's permanent Id/NAI\n   AT_ENCR_DATA  Variable\
    \     Yes       Contains encrypted attributes\n   AT_IV         Variable     Yes\
    \       IV for encrypted attributes\n   AT_PADDING    2 to 18      Yes       Padding\
    \ for encrypted attributes\n   AT_NEXT_TMPID variable     Yes       TempID for\
    \ next EAP-SAKE phase\n   AT_MSK_LIFE      6         Yes       MSK Lifetime in\
    \ seconds\n   -----------------------------------------------------------------\n"
- title: 3.3.3.  Use of AT_ENCR_DATA Attribute
  contents:
  - "3.3.3.  Use of AT_ENCR_DATA Attribute\n   An example of the AT_ENCR_DATA attribute,\
    \ as used in the\n   EAP.Request/SAKE/Confirm message, is shown below:\n    0\
    \                   1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | AT_IV         | Length = 18   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n   |                                      \
    \                         |\n   |                 Initialization Vector      \
    \                   |\n   |                                                  \
    \             |\n   |                               |-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |AT_ENCR_DATA   | Length        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+}e\n\
    \   | AT_NEXT_TMPID | Length        |                               |}n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |}c\n   |                                    \
    \                           |}r\n   .                    Peer TempID         \
    \                       |}y\n   .                                            \
    \                   |}p\n   .                                                \
    \               |}t\n   |                                                    \
    \           |}e\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+}d\n\
    \   |   AT_MIC_S     | Length = 10  |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n   |                       MIC_S          \
    \                         |\n   +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \   |                               |AT_PADDING     | Length=2      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.3.4.  EAP.Request/SAKE/Challenge Format
  contents:
  - "3.3.4.  EAP.Request/SAKE/Challenge Format\n   The format of the EAP.Request/SAKE/Challenge\
    \ packet is shown below.\n    0                   1                   2      \
    \             3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Type=EAP-SAKE  |    Version=2  | Session ID    |   Subtype=1   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   AT_RAND_S    | Length = 18  |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n   |                                      \
    \                         |\n   |                     RAND_S                 \
    \                   |\n   |                                                  \
    \             |\n   |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \   |                               | AT_SERVERID   | Length        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   :  \
    \                                                             :\n   |        \
    \         Server ID                                     |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The semantics of the fields is described below:\n   Code\n      1 for Request\n\
    \   Identifier\n      A random number.  See [EAP].\n   Length\n      The length\
    \ of the entire EAP packet in octets.\n   Type\n      EAP-SAKE\n   Version\n \
    \     2\n   Session ID\n      A random number chosen by the server to identify\
    \ this EAP-Session.\n   Subtype\n      1 for SAKE/Challenge\n   AT_RAND_S\n  \
    \    The value field of this attribute contains the Server nonce RAND_S\n    \
    \  parameter.  The RAND_S attribute MUST be present in\n      EAP.Request/SAKE/Challenge.\n\
    \   AT_SERVERID\n      The value field of this attribute contains the Server identifier\n\
    \      (e.g., a non-null terminated string).  The AT_SERVERID attribute\n    \
    \  SHOULD be present in EAP.Request/SAKE Challenge.\n"
- title: 3.3.5.  EAP.Response/SAKE/Challenge Format
  contents:
  - "3.3.5.  EAP.Response/SAKE/Challenge Format\n   The format of the EAP.Response/SAKE/Challenge\
    \ packet is shown below.\n    0                   1                   2      \
    \             3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Type=EAP-SAKE  |    Version=2  | Session ID    |   Subtype=1   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   AT_RAND_P    | Length = 18  |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n   |                                      \
    \                         |\n   |                     RAND_P                 \
    \                   |\n   |                                                  \
    \             |\n   |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \   |                               | AT_PEERID     | Length        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   :  \
    \                   Peer NAI                                  :\n   |        \
    \                                                       |\n   |              \
    \                 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n   |                    \
    \           | AT_SPI_P      |  Length       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   SPIP                        | AT_MIC_P      |  Length = 18  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                           MIC_P                             |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The semantics of the fields is described below:\n   Code\n      2 for Response\n\
    \   Identifier\n      A number that MUST match the Identifier field from the\n\
    \      corresponding Request.\n   Length\n      The length of the entire EAP packet\
    \ in octets.\n   Type\n      EAP-SAKE\n   Version\n      2\n   Session ID\n  \
    \    A number matching all other EAP messages in this EAP session.\n   Subtype\n\
    \      1 for SAKE/Challenge\n   AT_RAND_P\n      The value field of this attribute\
    \ contains the Peer nonce RAND_P\n      parameter.  The AT_RAND_P attribute MUST\
    \ be present in the\n      EAP.Response/SAKE/Challenge.\n   AT_PEERID\n      The\
    \ value field of this attribute contains the NAI of the Peer.\n      The Peer\
    \ identity follows the same Network Access Identifier\n      format that is used\
    \ in EAP.Response/Identity, i.e., including the\n      NAI realm portion.  The\
    \ identity is the permanent identity, or a\n      temporary identity.  The identity\
    \ does not include any terminating\n      null characters.  The AT_PEERID attribute\
    \ is optional in the\n      EAP.Response/SAKE/Challenge.\n   AT_SPI_P\n      The\
    \ value field of this attribute contains the Peer's ciphersuite\n      list SPI_P\
    \ parameter.  The AT_SPI_P attribute is optional in the\n      EAP.Response/SAKE/Challenge.\n\
    \   AT_MIC_P\n      The value field of this attribute contains the Peer MIC_P\n\
    \      parameter.  The AT_MIC_P attribute MUST be present in the\n      EAP.Response/SAKE/Challenge.\n"
- title: 3.3.6.  EAP.Request/SAKE/Confirm Format
  contents:
  - "3.3.6.  EAP.Request/SAKE/Confirm Format\n   The format of the EAP.Request/SAKE/Confirm\
    \ packet is shown below.\n    0                   1                   2      \
    \             3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Type=EAP-SAKE  |    Version=2  | Session ID    |   Subtype=2   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \ AT_SPI_S    | Length        |        SPI_S                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   AT_IV       | Length        |   Initialization Vector ...   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               :\n   |                                      \
    \                         |\n   +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               | AT_ENCR_DATA  | Length        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Encrypted Data...                       |\n   |  \
    \                                                             |\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   AT_MSK_LIFE | Length=6      |    MSK Lifetime...            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |  AT_MIC_S     | Length=18     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                           MIC_S                             |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The semantics of the fields is described below:\n   Code\n      1 for Request\n\
    \   Identifier\n      A random number.  See [EAP].\n   Length\n      The length\
    \ of the entire EAP packet in octets.\n   Type\n      EAP-SAKE\n   Version\n \
    \     2\n   Session ID\n      A number matching all other EAP messages in this\
    \ EAP session.\n   Subtype\n      2 for SAKE Confirm\n   AT_SPI_S\n      The value\
    \ field of this attribute contains the Server chosen\n      ciphersuite SPI_S\
    \ parameter.  The AT_SPI_S attribute is optional\n      in the EAP.Request/SAKE/Confirm.\n\
    \   AT_IV\n      This attribute is optional to use in this message.  The value\n\
    \      field of this attribute contains the Initialization Vector that is\n  \
    \    used with the encrypted data following.\n   AT_ENCR_DATA\n      This attribute\
    \ is optional to use in this message.  The encrypted\n      data, if present,\
    \ may contain an attribute AT_NEXT_TMPID,\n      containing the NAI the Peer should\
    \ use in the next EAP\n      authentication.\n   AT_MSK_LIFE\n      This attribute\
    \ is optional to use in this message.  The value\n      field of this attribute\
    \ contains the MSK Lifetime in seconds.\n   AT_MIC_S\n      The value field of\
    \ this attribute contains the Server MIC_S\n      parameter.  The AT_MIC_S attribute\
    \ MUST be present in the\n      EAP.Request/SAKE/Confirm.\n"
- title: 3.3.7.  EAP.Response/SAKE/Confirm Format
  contents:
  - "3.3.7.  EAP.Response/SAKE/Confirm Format\n   The format of the EAP.Response/SAKE/Confirm\
    \ packet is shown below.\n    0                   1                   2      \
    \             3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Type=EAP-SAKE  |    Version=2  | Session ID    |   Subtype=2   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   AT_MIC_P     | Length = 18  |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n   |                       MIC_P          \
    \                         |\n   |                                            \
    \                   |\n   |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |  AT_PADDING   | Length = 2    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The semantics of the fields is described below:\n   Code\n      2 for Response\n\
    \   Identifier\n      A number that MUST match the Identifier field from the\n\
    \      corresponding Request.\n   Length\n      The length of the entire EAP packet\
    \ in octets.\n   Type\n      EAP-SAKE\n   Version\n      2\n   Session ID\n  \
    \    A number matching all other EAP messages in this EAP session.\n   Subtype\n\
    \      2 for SAKE Confirm\n   AT_MIC_P\n      The value field of this attribute\
    \ contains the Peer's MIC_P\n      parameter.  The AT_MIC_P attribute MUST be\
    \ present in the\n      EAP.Response/SAKE/Confirm.\n   AT_PADDING\n      The value\
    \ field is set to zero.  Added to achieve 32-bit alignment\n      of the EAP-SAKE\
    \ packet.\n"
- title: 3.3.8.  EAP.Response/SAKE/Auth-Reject Format
  contents:
  - "3.3.8.  EAP.Response/SAKE/Auth-Reject Format\n   The format of the EAP.Response/SAKE/Auth-Reject\
    \ packet is shown\n   below.\n    0                   1                   2  \
    \                 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Type=EAP-SAKE  |    Version=2  | Session ID    |   Subtype=3   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The semantics of the fields is described below:\n   Code\n      2 for Response\n\
    \   Identifier\n      A number that MUST match the Identifier field from the\n\
    \      corresponding Request.\n   Length\n      The length of the entire EAP packet\
    \ in octets.\n   Type\n      EAP-SAKE\n   Version\n      2\n   Session ID\n  \
    \    A number matching all other EAP messages in this EAP session.\n   Subtype\n\
    \      3 for SAKE/Auth-Reject\n"
- title: 3.3.9.  EAP.Request/SAKE/Identity Format
  contents:
  - "3.3.9.  EAP.Request/SAKE/Identity Format\n   The format of the EAP.Request/SAKE/Identity\
    \ is shown below.\n    0                   1                   2             \
    \      3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \   Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Type=EAP-SAKE  |    Version=2  | Session ID    |   Subtype=4   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |AT_PERM_ID_REQ | Length = 4    |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |AT_ANY_ID_REQ  | Length = 4    |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |AT_SERVERID    | Length        |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               :\n   |                       Server ID      \
    \                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The semantics of the fields is described below:\n   Code\n      1 for Request\n\
    \   Identifier\n      A random number.  See [EAP].\n   Length\n      The length\
    \ of the entire EAP packet in octets.\n   Type\n      EAP-SAKE\n   Version\n \
    \     2\n   Session ID\n      A number matching all other EAP messages in this\
    \ EAP session.\n   Subtype\n      4 for SAKE/Identity\n   AT_PERM_ID_REQ\n   \
    \   The AT_PERM_ID_REQ attribute is optional, to be included in cases\n      where\
    \ the Server requires the Peer to give its permanent\n      identifier (i.e.,\
    \ PermID).  The AT_PERM_ID_REQ MUST NOT be\n      included if the AT_ANY_ID_REQ\
    \ attribute is included.  The value\n      field only contains two reserved bytes,\
    \ which are set to zero on\n      sending and ignored on reception.\n   AT_ANY_ID_REQ\n\
    \      The AT_ANY_ID_REQ attribute is optional, to be included in cases\n    \
    \  where the Server requires the Peer to send any identifier (e.g.,\n      PermID,\
    \ TempID).  The AT_ANY_ID_REQ MUST NOT be included if\n      AT_PERM_ID_REQ is\
    \ included.  The value field only contains two\n      reserved bytes, which are\
    \ set to zero on sending and ignored on\n      reception.  One of the AT_PERM_ID_REQ\
    \ and AT_ANY_ID_REQ MUST be\n      included.\n   AT_SERVERID\n      The value\
    \ field of this attribute contains the identifier/realm of\n      the Server.\
    \  The AT_SERVERID attribute is optional but RECOMMENDED\n      to include in\
    \ the EAP.Request/SAKE/Identity.\n"
- title: 3.3.10.  EAP.Response/SAKE/Identity Format
  contents:
  - "3.3.10.  EAP.Response/SAKE/Identity Format\n   The format of the EAP.Response/SAKE/Identity\
    \ is shown below:\n    0                   1                   2             \
    \      3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \   Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Type=EAP-SAKE  |    Version=2  | Session ID    |   Subtype=4   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   AT_PEERID   | Length        |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               :\n   |                       Peer NAI       \
    \                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The semantics of the fields is described below:\n   Code\n      2 for Response\n\
    \   Identifier\n      A number that MUST match the Identifier field from the\n\
    \      corresponding Request.\n   Length\n      The length of the entire EAP packet.\n\
    \   Type\n      EAP-SAKE\n   Version\n      2\n   Session ID\n      A number matching\
    \ all other EAP messages in this EAP session.\n   Subtype\n      4 for SAKE/Identity\n\
    \   AT_PEERID\n      The value field of this attribute contains the NAI of the\
    \ Peer.\n      The AT_PEERID attribute MUST be present in\n      EAP.Response/SAKE/Identity.\n"
- title: 3.3.11.  Other EAP Messages Formats
  contents:
  - "3.3.11.  Other EAP Messages Formats\n   The format of the EAP.Request/Identity\
    \ and EAP.Response/Identity\n   packets is described in [EAP].  The user ID (e.g.,\
    \ NAI) SHOULD be\n   present in this packet.\n   The format of the EAP-Success\
    \ and EAP-Failure packet is also shown in\n   [EAP].\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   IANA allocated a new EAP Type for EAP-SAKE.\n   EAP-SAKE\
    \ messages include an 8-bit Subtype field.  The Subtype is a\n   new numbering\
    \ space for which IANA administration is required.  The\n   following subtypes\
    \ are specified in this memo:\n   SAKE/Challenge.................1\n   SAKE/Confirm...................2\n\
    \   SAKE/Auth-Reject...............3\n   SAKE/Identity..................4\n  \
    \ The Subtype-specific data is composed of attributes, which have an\n   8-bit\
    \ type number.  Attributes numbered within the range 0 through\n   127 are called\
    \ non-skippable attributes, and attributes within the\n   range of 128 through\
    \ 255 are called skippable attributes.  The EAP-\n   SAKE attribute type number\
    \ is a new numbering space for which IANA\n   administration is required.  The\
    \ following attribute types are\n   specified:\n   AT_RAND_S.......................................1\n\
    \   AT_RAND_P.......................................2\n   AT_MIC_S........................................3\n\
    \   AT_MIC_P........................................4\n   AT_SERVERID.....................................5\n\
    \   AT_PEERID.......................................6\n   AT_SPI_S........................................7\n\
    \   AT_SPI_P........................................8\n   AT_ANY_ID_REQ...................................9\n\
    \   AT_PERM_ID_REQ.................................10\n   AT_ENCR_DATA..................................128\n\
    \   AT_IV.........................................129\n   AT_PADDING....................................130\n\
    \   AT_NEXT_TMPID.................................131\n   AT_MSK_LIFE...................................132\n\
    \   All requests for value assignment from the two number spaces\n   described\
    \ in this memo require proper documentation, according to the\n   \"Specification\
    \ Required\" policy described in [IANA].\n   All assignments of values from the\
    \ two number spaces described in\n   this memo require IETF consensus.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The EAP specification [EAP] describes the security\
    \ vulnerabilities of\n   EAP, which does not include its method-specific security\
    \ mechanisms.\n   This section discusses the claimed security properties of the\
    \ EAP-\n   SAKE method, along with vulnerabilities and security recommendations.\n"
- title: 5.1.  Denial-of-Service Attacks
  contents:
  - "5.1.  Denial-of-Service Attacks\n   Since EAP-SAKE is not a tunneling method,\
    \ the\n   EAP.Response/SAKE/Auth-Reject, EAP.Success, and EAP.Failure packets\n\
    \   are not integrity or replay protected.  This makes it possible for an\n  \
    \ attacker to spoof such messages.  Note that EAP.Response/SAKE/Auth-\n   Reject\
    \ cannot be protected with a MIC since an authentication failure\n   indicates\
    \ that the Server and Peer do not agree on a common key.\n   Most importantly,\
    \ an attacker cannot cause a Peer to accept an\n   EAP.Success packet as indication\
    \ that the Server considers the mutual\n   authentication to have been achieved.\
    \  This is because a Peer does\n   not accept EAP.Success packets before it has\
    \ authenticated the Server\n   or after it has considered the Server to have failed\
    \ authentication.\n"
- title: 5.2.  Root Secret Considerations
  contents:
  - "5.2.  Root Secret Considerations\n   If the Root Secret is known to any party\
    \ other than the Server and\n   Peer, then the mutual authentication and key establishment\
    \ using\n   EAP-SAKE is compromised.\n   EAP-SAKE does not address how the Root\
    \ Secret is generated or\n   distributed to the Server and Peer.  It is RECOMMENDED\
    \ that the\n   entropy of the Root Secret be maximized.  The Root Secret SHOULD\
    \ be\n   machine-generated.\n   If the Root Secret is derived from a low-entropy,\
    \ guessable quantity\n   such as a human-selected password, then the EAP-SAKE\
    \ key derivation\n   is subject to on-line and off-line dictionary attacks.  To\
    \ help\n   identify whether such a password has been compromised,\n   implementations\
    \ SHOULD keep a log of the number of EAP-SAKE messages\n   received with invalid\
    \ MIC fields.  In these cases, a procedure for\n   updating the Root Secret securely\
    \ SHOULD be in place.\n"
- title: 5.3.  Mutual Authentication
  contents:
  - "5.3.  Mutual Authentication\n   Mutual authentication is accomplished via the\
    \ SAKE/Challenge and\n   SAKE/Confirm messages.  The EAP.Request/SAKE/Challenge\
    \ contains the\n   Server nonce RAND_S; the EAP.Response/SAKE/Challenge contains\
    \ the\n   Peer nonce RAND_P, along with the Peer MIC (MIC_P); and the\n   EAP.Request/SAKE/Confirm\
    \ contains the Server MIC (MIC_S).  Both MICs\n   (MIC_S and MIC_P) are computed\
    \ using both nonces RAND_S and RAND_P\n   and are keyed by the TEK, a shared secret\
    \ derived from the Root\n   Secret.  The Server considers the Peer authenticated\
    \ if the MIC_P it\n   computes matches the one that the Peer sends.  Similarly,\
    \ the Peer\n   considers the Server authenticated if the MIC_S it computes matches\n\
    \   the one that the Server sends.  The way the MICs are computed\n   involves\
    \ a keyed one-way hash function, which makes it\n   computationally hard for an\
    \ attacker to produce the correct MIC\n   without knowledge of the shared secret.\n"
- title: 5.4.  Integrity Protection
  contents:
  - "5.4.  Integrity Protection\n   Integrity protection of EAP-SAKE messages is accomplished\
    \ through the\n   use of the Message Integrity Checks (MIC), which are present\
    \ in every\n   message as soon as a common shared secret (TEK) is available, i.e.,\n\
    \   any message after the EAP.Request/SAKE/Challenge.  An adversary\n   cannot\
    \ modify any of the MIC-protected messages without causing the\n   recipient to\
    \ encounter a MIC failure.  The extent of the integrity\n   protection is commensurate\
    \ with the security of the KDF used to\n   derive the MIC, the length and entropy\
    \ of the shared secret used by\n   the KDF, and the length of the MIC.\n"
- title: 5.5.  Replay Protection
  contents:
  - "5.5.  Replay Protection\n   The first message of most session establishment protocols,\
    \ such as\n   EAP-SAKE, is subject to replay.  A replayed\n   EAP.Request/SAKE/Challenge\
    \ message results in the Peer sending an\n   EAP.Response/SAKE/Challenge message\
    \ back, which contains a MIC that\n   was computed using the attacker's chosen\
    \ nonce.  This poses a minimal\n   risk to the compromise of the TEK-Auth key,\
    \ and this EAP Session\n   cannot proceed successfully as the Peer will find the\
    \ Server's MIC\n   invalid.\n   Replay protection is achieved via the RAND_S and\
    \ RAND_P values,\n   together with the Session ID field, which are included in\
    \ the\n   calculation of the MIC present in each packet subsequent to the EAP-\n\
    \   SAKE/Challenge request packet.  The Session ID MUST be generated anew\n  \
    \ by the Server for each EAP session.  Session Ids also aid in\n   identification\
    \ of possible multiple EAP sessions between a Peer and a\n   Server.  Within the\
    \ same session, messages can be replayed by an\n   attacker, but the state machine\
    \ SHOULD be able to handle these cases.\n   Note that a replay within a session\
    \ is indistinguishable to a\n   recipient from a network malfunction (e.g., message\
    \ was first lost\n   and then re-transmitted, so the recipient thinks it is a\
    \ duplicate\n   message).\n   Replay protection between EAP sessions and within\
    \ an EAP session is\n   also accomplished via the MIC, which covers not only the\
    \ entire EAP\n   packet (including the Session ID) but also the nonces RAND_S\
    \ and\n   RAND_P.  Thus, the recipient of an EAP message can be assured that\n\
    \   the message it just received is the one just sent by the other Peer\n   and\
    \ not a replay, since it contains a valid MIC of the recipient's\n   nonce and\
    \ the other Peer nonce.  As before, the extent of replay\n   protection is commensurate\
    \ with the security of the KDF used to\n   derive the MIC, the length and entropy\
    \ of the shared secret used by\n   the KDF, and the length of the MIC.\n"
- title: 5.6.  Confidentiality
  contents:
  - "5.6.  Confidentiality\n   Confidentiality of EAP-SAKE attributes is supported\
    \ through the use\n   of the AT_ENCR_DATA and AT_IV attributes.  A ciphersuite\
    \ is\n   negotiated securely (see Section 3.2.7) and can be used to encrypt\n\
    \   any attributes as needed.  The default ciphersuite contains a strong\n   cipher\
    \ based on AES.\n"
- title: 5.7.  Key Derivation, Strength
  contents:
  - "5.7.  Key Derivation, Strength\n   EAP-SAKE derives a Master Key (for EAP use)\
    \ and Master Session Key,\n   as well as other lower-level keys, such as TEKs.\
    \  Some of the lower-\n   level keys may or may not be used.  The strength (entropy)\
    \ of all\n   these keys is at most the strength of the Root Secret.\n   The entropy\
    \ of the MSK and of the EMSK, assuming that the Server and\n   Peer 128-bit nonces\
    \ are generated using good random number\n   generators, is at most 256-bits.\n"
- title: 5.8.  Dictionary Attacks
  contents:
  - "5.8.  Dictionary Attacks\n   Dictionary attacks are not feasible to mount on\
    \ the EAP-SAKE method\n   because passwords are not used.  Instead, the Root Secret\
    \ is\n   machine-generated.  This does not necessarily pose provisioning\n   problems.\n"
- title: 5.9.  Man-in-the-Middle Attacks
  contents:
  - "5.9.  Man-in-the-Middle Attacks\n   Resistance to man-in-the-middle attacks is\
    \ provided through the\n   integrity protection that each EAP message carries\
    \ (i.e., Message\n   Integrity Check field) as soon as a common key for this EAP\
    \ session\n   has been derived through mutual authentication.  As before, the\n\
    \   extent of this resistance is commensurate with the strength of the\n   MIC\
    \ itself.  Man-in-the-middle attacks associated with the use of any\n   EAP method\
    \ within a tunneling or sequencing protocol are beyond the\n   scope of this document.\n"
- title: 5.10.  Result Indication Protection
  contents:
  - "5.10.  Result Indication Protection\n   EAP-SAKE provides result indication protection\
    \ in that it provides\n   result indications, integrity protection, and replay\
    \ protection.  The\n   Server indicates that it has successfully authenticated\
    \ the Peer by\n   sending the EAP.Request/SAKE/Confirm message, which is integrity\
    \ and\n   replay protected.  The Peer indicates that it has successfully\n   authenticated\
    \ the Server by sending the EAP.Response/SAKE/Confirm\n   message, which is also\
    \ integrity and replay protected.\n"
- title: 5.11.  Cryptographic Separation of Keys
  contents:
  - "5.11.  Cryptographic Separation of Keys\n   The TEKs used to protect EAP-SAKE\
    \ packets (TEK-Auth, TEK-Cipher), the\n   Master Session Key, and the Extended\
    \ Master Session Key are\n   cryptographically separate.  Information about any\
    \ of these keys does\n   not lead to information about any other keys.  We also\
    \ note that it\n   is infeasible to calculate the Root Secret from any or all\
    \ of the\n   TEKs, the MSK, or the EMSK.\n"
- title: 5.12.  Session Independence
  contents:
  - "5.12.  Session Independence\n   Within each EAP-SAKE session, fresh keying material\
    \ is generated.\n   The keying material exported by this method from two independent\n\
    \   EAP-SAKE sessions is cryptographically separate, as explained below.\n   Both\
    \ the Server and the Peer SHOULD generate fresh random numbers\n   (i.e., nonces)\
    \ for the EAP-SAKE exchange.  If either entity re-uses a\n   random number from\
    \ a previous session, then the fact that the other\n   does use a freshly generated\
    \ random number implies that the TEKs,\n   MSK, and EMSK derived within this session\
    \ are cryptographically\n   separate from the corresponding keys derived in the\
    \ previous\n   exchange.\n   Therefore, compromise of MSK or EMSK on one exchange\
    \ does not\n   compromise the MSK and EMSK of previous or subsequent exchanges\n\
    \   between a Peer and a Server.\n"
- title: 5.13.  Identity Protection
  contents:
  - "5.13.  Identity Protection\n   As seen from Section 3.2.3., the Server may assign\
    \ a temporary NAI to\n   a Peer in order to achieve user anonymity.  This identifier\
    \ may be\n   used by the Peer the next time it engages in an EAP-SAKE\n   authentication\
    \ phase with the Server.  The TempID is protected by\n   sending it encrypted,\
    \ within an AT_ENCR_DATA attribute, and signed by\n   the Server with a MIC. \
    \ Thus, an eavesdropper cannot link the\n   original PermID that the Peer first\
    \ sends (e.g., on power-up) to any\n   subsequent TempID values sent in the clear\
    \ to the Server.\n   The Server and Peer MAY be configured such that only TempID\n\
    \   identities are exchanged after one initial EAP-SAKE phase that uses\n   the\
    \ Peer permanent identity.  In this case, in order to achieve\n   maximum identity\
    \ protection,  the TempID SHOULD be stored in non-\n   volatile memory in the\
    \ Peer and Server.  Thus, compliance with this\n   document does not preclude\
    \ or mandate Peer identity protection across\n   the lifetime of the Peer.\n"
- title: 5.14.  Channel Binding
  contents:
  - "5.14.  Channel Binding\n   The Server identifier and Peer identifier MAY be sent\
    \ in the\n   SAKE/Challenge messages.  However, since there is no established\n\
    \   authentication key at the time of the first message, the Server\n   identifier\
    \ is not integrity-protected here.\n   All subsequent EAP-SAKE messages exchanged\
    \ during a successful EAP-\n   SAKE phase are integrity-protected, as they contain\
    \ a Message\n   Integrity Check (MIC).  The MIC is computed over the EAP message\
    \ and\n   also over the Server and Peer identities.  In that, both EAP\n   endpoints\
    \ can verify the identity of the other party.\n"
- title: 5.15.  Ciphersuite Negotiation
  contents:
  - "5.15.  Ciphersuite Negotiation\n   EAP-SAKE does not support negotiation of the\
    \ ciphersuite used to\n   integrity-protect the EAP conversation.  However, negotiation\
    \ of a\n   ciphersuite for data protection is supported.  This ciphersuite\n \
    \  negotiation is protected in order to minimize the risk of down-\n   negotiation\
    \ or man-in-the-middle attacks.\n   This negotiation is secure because of the\
    \ Message Integrity Checks\n   (MICs) that cover the entire EAP messages used\
    \ for ciphersuite\n   negotiation (see Section 3.2.7.).  The extent of the security\
    \ of the\n   negotiation is commensurate with the security of the KDF used to\n\
    \   derive the MICs, the length and entropy of the shared secret used by\n   the\
    \ KDF, and the length of the MICs.\n"
- title: 5.16.  Random Number Generation
  contents:
  - "5.16.  Random Number Generation\n   EAP-SAKE supports key derivation from a 32-byte\
    \ Root Secret.  The\n   entropy of all other keys derived from it is reduced somewhat\
    \ through\n   the use of keyed hash functions (e.g.  KDF).  Thus, assuming\n \
    \  optimistically that the effective key strength of the Root Secret is\n   32\
    \ bytes, the effective key strengths of the derived keys is at most\n   the effective\
    \ key strength of the Root Secret quantities they are\n   derived from: EMSK,\
    \ at most 16 bytes; MSK, at most 16 bytes.\n"
- title: 6.  Security Claims
  contents:
  - "6.  Security Claims\n   This section provides the security claims as required\
    \ by [EAP].\n      [a] Mechanism: EAP-SAKE is a challenge/response authentication\
    \ and\n          key establishment mechanism based on a symmetric pre-shared\n\
    \          secret.\n      [b] Security claims.  EAP-SAKE provides:\n         \
    \ Mutual authentication (Section 5.3)\n          Integrity protection (Section\
    \ 5.4)\n          Replay protection (Section 5.5)\n          Confidentiality (optional,\
    \ Section 5.6 and Section 5.13)\n          Key derivation (Section 5.7)\n    \
    \      Dictionary attack protection (Section 5.8)\n          Protected result\
    \ indication of successful authentication from\n          Server and from Peer\
    \ (Section 5.10)\n          Session independence (Section 5.12)\n      [c] Key\
    \ strength.  EAP-SAKE supports key derivation with 256-bit\n          effective\
    \ key strength (Section 5.7)\n      [d] Description of key hierarchy: see Section\
    \ 3.2.5.\n      [e] Indication of vulnerabilities: EAP-Make does not provide:\n\
    \          Fast reconnect\n          Fragmentation\n          Channel binding\n\
    \          Cryptographic binding\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   Thanks to R. Dynarski for his helpful comments.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [AES]          National Institute of  Standards\
    \ and Technology,\n                  \"Federal Information Processing Standards\
    \ (FIPS)\n                  Publication 197, Advanced Encryption Standard (AES)\"\
    ,\n                  November 2001.  http://csrc.nist.gov/publications/\n    \
    \              fips/fips197/fips-197.pdf\n   [CBC]          National Institute\
    \ of Standards and Technology, NIST\n                  Special Publication 800-38A,\
    \ \"Recommendation for Block\n                  Cipher Modes of Operation - Methods\
    \ and Techniques\",\n                  December 2001.  http://csrc.nist.gov/publications/\n\
    \                  drafts/Draft-NIST_SP800-38D_Public_Comment.pdf\n   [EAP]  \
    \        Aboba, B., Blunk, L., Vollbrecht, J., Carlson, J., and\n            \
    \      H. Levkowetz, \"Extensible Authentication Protocol\n                  (EAP)\"\
    , RFC 3748, June 2004.\n   [HMAC]         Krawczyk, H., Bellare, M., and R. Canetti,\
    \ \"HMAC:\n                  Keyed-Hashing for Message Authentication\", RFC 2104,\n\
    \                  February 1997.\n   [IANA]         Narten, T. and H. Alvestrand,\
    \ \"Guidelines for Writing\n                  an IANA Considerations Section in\
    \ RFCs\", BCP 26, RFC\n                  2434, October 1998.\n   [IEEE802.11i]\
    \  \"IEEE Standard for Information Technology-\n                  Telecommunications\
    \ and Information Exchange between\n                  Systems - LAN/MAN Specific\
    \ Requirements - Part 11:\n                  Wireless Medium Access Control (MAC)\
    \ and physical\n                  layer (PHY) specifications: Amendment 6: Medium\
    \ Access\n                  Control (MAC) Security Enhancements\", June 2004.\n\
    \   [KEYWORDS]     Bradner, S., \"Key words for use in RFCs to Indicate\n    \
    \              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [SHA1]\
    \         National Institute of Standards and Technology, U.S.\n             \
    \     Department of Commerce, Federal Information Processing\n               \
    \   Standard (FIPS) Publication 180-1, \"Secure Hash\n                  Standard\"\
    , April 1995.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [NAI]          Aboba, B., Beadles, M., Arkko,\
    \ J., and P. Eronen, \"The\n                  Network Access Identifier\", RFC\
    \ 4282, December 2005.\n   [RFC4086]      Eastlake, D., 3rd, Schiller, J., and\
    \ S. Crocker,\n                  \"Randomness Requirements for Security\", BCP\
    \ 106, RFC\n                  4086, June 2005.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Michaela Vanderveen\n   Qualcomm Flarion Technologies\n\
    \   135 Rte. 202/206 South\n   Bedminster, NJ 07921\n   USA\n   EMail: mvandervn@yahoo.com\n\
    \   Hesham Soliman\n   Qualcomm Flarion Technologies\n   135 Rte. 202/206 South\n\
    \   Bedminster, NJ 07921\n   USA\n   EMail: solimanhs@gmail.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2006).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78\
    \ and at www.rfc-editor.org/copyright.html, and\n   except as set forth therein,\
    \ the authors retain all their rights.\n   This document and the information contained\
    \ herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION\
    \ HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE\
    \ IETF TRUST,\n   AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\n\
    \   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT\n   THE\
    \ USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\n   IMPLIED\
    \ WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR\n   PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
