- contents:
  - '      Transport Layer Security (TLS) Cached Information Extension

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Transport Layer Security (TLS) handshakes often include fairly static\n
    \  information, such as the server certificate and a list of trusted\n   certification
    authorities (CAs).  This information can be of\n   considerable size, particularly
    if the server certificate is bundled\n   with a complete certificate chain (i.e.,
    the certificates of\n   intermediate CAs up to the root CA).\n   This document
    defines an extension that allows a TLS client to inform\n   a server of cached
    information, thereby enabling the server to omit\n   already available information.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7924.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    . . .   3\n   3.  Cached Information Extension  . . . . . . . . . . . . . . .
    .   3\n   4.  Exchange Specification  . . . . . . . . . . . . . . . . . . .   5\n
    \    4.1.  Server Certificate Message  . . . . . . . . . . . . . . .   6\n     4.2.
    \ CertificateRequest Message  . . . . . . . . . . . . . . .   7\n   5.  Fingerprint
    Calculation . . . . . . . . . . . . . . . . . . .   7\n   6.  Example . . . .
    . . . . . . . . . . . . . . . . . . . . . . .   8\n   7.  Security Considerations
    . . . . . . . . . . . . . . . . . . .  10\n   8.  IANA Considerations . . . .
    . . . . . . . . . . . . . . . . .  10\n     8.1.  New Entry to the TLS ExtensionType
    Registry . . . . . . .  10\n     8.2.  New Registry for CachedInformationType
    \ . . . . . . . . .  11\n   9.  References  . . . . . . . . . . . . . . . . .
    . . . . . . . .  11\n     9.1.  Normative References  . . . . . . . . . . . .
    . . . . . .  11\n     9.2.  Informative References  . . . . . . . . . . . . .
    . . . .  12\n   Appendix A.  Example  . . . . . . . . . . . . . . . . . . . .
    . .  13\n   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .
    \ 18\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  19\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Reducing the amount of information exchanged during a Transport
    Layer\n   Security handshake to a minimum helps to improve performance in\n   environments
    where devices are connected to a network with a low\n   bandwidth and lossy radio
    technology.  With the Internet of Things,\n   such environments exist, for example,
    when devices use IEEE 802.15.4,\n   Bluetooth Low Energy, or low power wide area
    networks.  For more\n   information about the challenges with smart object deployments,\n
    \  please see [RFC6574].\n   This specification defines a TLS extension that allows
    a client and a\n   server to exclude transmission information cached in an earlier
    TLS\n   handshake.\n   A typical example exchange may therefore look as follows.
    \ First, the\n   client and the server execute the full TLS handshake.  The client\n
    \  then caches the certificate provided by the server.  When the TLS\n   client
    connects to the TLS server some time in the future, without\n   using session
    resumption, it then attaches the \"cached_info\"\n   extension defined in this
    document to the ClientHello message to\n   indicate that it has cached the certificate,
    and it provides the\n   fingerprint of it.  If the server's certificate has not
    changed, then\n   the TLS server does not need to send its certificate and the\n
    \  corresponding certificate chain again.  In case information has\n   changed,
    which can be seen from the fingerprint provided by the\n   client, the certificate
    payload is transmitted to the client to allow\n   the client to update the cache.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"MUST\",
    \"MUST NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n   This
    document refers to the TLS protocol, but the description is\n   equally applicable
    to Datagram Transport Layer Security (DTLS) as\n   well.\n"
  title: 2.  Terminology
- contents:
  - "3.  Cached Information Extension\n   This document defines a new extension type
    (cached_info(25)), which\n   is used in ClientHello and ServerHello messages.
    \ The extension type\n   is specified as follows.\n         enum {\n              cached_info(25),
    (65535)\n         } ExtensionType;\n   The extension_data field of this extension,
    when included in the\n   ClientHello, MUST contain the CachedInformation structure.
    \ The\n   client MAY send multiple CachedObjects of the same\n   CachedInformationType.
    \ This may, for example, be the case when the\n   client has cached multiple certificates
    from a server.\n         enum {\n              cert(1), cert_req(2) (255)\n         }
    CachedInformationType;\n         struct {\n              select (type) {\n                case
    client:\n                  CachedInformationType type;\n                  opaque
    hash_value<1..255>;\n                case server:\n                  CachedInformationType
    type;\n              } body;\n         } CachedObject;\n         struct {\n              CachedObject
    cached_info<1..2^16-1>;\n         } CachedInformation;\n   This document defines
    the following two types:\n   'cert' type for not sending the complete server certificate
    message:\n      With the type field set to 'cert', the client MUST include the\n
    \     fingerprint of the Certificate message in the hash_value field.\n      For
    this type, the fingerprint MUST be calculated using the\n      procedure described
    in Section 5 with the Certificate message as\n      input data.\n   'cert_req'
    Type for not sending the complete CertificateRequest\n      Message:\n      With
    the type set to 'cert_req', the client MUST include the\n      fingerprint of
    the CertificateRequest message in the hash_value\n      field.  For this type,
    the fingerprint MUST be calculated using\n      the procedure described in Section
    5 with the CertificateRequest\n      message as input data.\n   New cached info
    types can be added following the policy described in\n   the IANA Considerations
    (Section 8).  New message digest algorithms\n   for use with these types can also
    be added by registering a new type\n   that makes use of the updated message digest
    algorithm.  For\n   practical reasons, we recommend reusing hash algorithms already\n
    \  available with TLS ciphersuites.  To avoid additional code and to\n   keep
    the collision probability low, new hash algorithms MUST NOT have\n   a collision
    resistance worse than SHA-256.\n"
  title: 3.  Cached Information Extension
- contents:
  - "4.  Exchange Specification\n   Clients supporting this extension MAY include
    the \"cached_info\"\n   extension in the (extended) ClientHello.  If the client
    includes the\n   extension, then it MUST contain one or more CachedObject attributes.\n
    \  A server supporting this extension MAY include the \"cached_info\"\n   extension
    in the (extended) ServerHello.  By returning the\n   \"cached_info\" extension,
    the server indicates that it supports the\n   cached info types.  For each indicated
    cached info type, the server\n   MUST alter the transmission of respective payloads,
    according to the\n   rules outlined with each type.  If the server includes the
    extension,\n   it MUST only include CachedObjects of a type also supported by
    the\n   client (as expressed in the ClientHello).  For example, if a client\n
    \  indicates support for 'cert' and 'cert_req', then the server cannot\n   respond
    with a \"cached_info\" attribute containing support for\n   ('foo-bar').\n   Since
    the client includes a fingerprint of information it cached (for\n   each indicated
    type), the server is able to determine whether cached\n   information is stale.
    \ If the server supports this specification and\n   notices a mismatch between
    the data cached by the client and its own\n   information, then the server MUST
    include the information in full and\n   MUST NOT list the respective type in the
    \"cached_info\" extension.\n   Note: If a server is part of a hosting environment,
    then the client\n   may have cached multiple data items for a single server.  To
    allow\n   the client to select the appropriate information from the cache, it\n
    \  is RECOMMENDED that the client utilizes the Server Name Indication\n   (SNI)
    extension [RFC6066].\n   Following a successful exchange of the \"cached_info\"
    extension in the\n   ClientHello and ServerHello, the server alters sending the\n
    \  corresponding handshake message.  How information is altered from the\n   handshake
    messages and for the types defined in this specification is\n   defined in Sections
    4.1 and 4.2, respectively.\n   Appendix A shows an example hash calculation, and
    Section 6\n   illustrates an example protocol exchange.\n"
  - contents:
    - "4.1.  Server Certificate Message\n   When a ClientHello message contains the
      \"cached_info\" extension with\n   a type set to 'cert', then the server MAY
      send the Certificate\n   message shown in Figure 1 under the following conditions:\n
      \  o  The server software implements the \"cached_info\" extension defined\n
      \     in this specification.\n   o  The 'cert' \"cached_info\" extension is
      enabled (for example, a\n      policy allows the use of this extension).\n   o
      \ The server compared the value in the hash_value field of the\n      client-provided
      \"cached_info\" extension with the fingerprint of\n      the Certificate message
      it normally sends to clients.  This check\n      ensures that the information
      cached by the client is current.  The\n      procedure for calculating the fingerprint
      is described in\n      Section 5.\n   The original certificate handshake message
      syntax is defined in\n   [RFC5246] and has been extended with [RFC7250].  RFC
      7250 allows the\n   certificate payload to contain only the SubjectPublicKeyInfo
      instead\n   of the full information typically found in a certificate.  Hence,\n
      \  when this specification is used in combination with [RFC7250] and the\n   negotiated
      certificate type is a raw public key, then the TLS server\n   omits sending
      a certificate payload that contains an ASN.1\n   certificate structure with
      the included SubjectPublicKeyInfo rather\n   than the full certificate chain.
      \ As such, this extension is\n   compatible with the raw public key extension
      defined in RFC 7250.\n   Note: We assume that the server implementation is able
      to select the\n   appropriate certificate or SubjectPublicKeyInfo from the received\n
      \  hash value.  If the SNI extension is used by the client, then the\n   server
      has additional information to guide the selection of the\n   appropriate cached
      info.\n   When the cached info specification is used, then a modified version\n
      \  of the Certificate message is exchanged.  The modified structure is\n   shown
      in Figure 1.\n         struct {\n             opaque hash_value<1..255>;\n         }
      Certificate;\n                 Figure 1: Cached Info Certificate Message\n"
    title: 4.1.  Server Certificate Message
  - contents:
    - "4.2.  CertificateRequest Message\n   When a fingerprint for an object of type
      'cert_req' is provided in\n   the ClientHello, the server MAY send the CertificateRequest
      message\n   shown in Figure 2 under the following conditions:\n   o  The server
      software implements the \"cached_info\" extension defined\n      in this specification.\n
      \  o  The 'cert_req' \"cached_info\" extension is enabled (for example, a\n
      \     policy allows the use of this extension).\n   o  The server compared the
      value in the hash_value field of the\n      client-provided \"cached_info\"
      extension with the fingerprint of\n      the CertificateRequest message it normally
      sends to clients.  This\n      check ensures that the information cached by
      the client is\n      current.  The procedure for calculating the fingerprint
      is\n      described in Section 5.\n   o  The server wants to request a certificate
      from the client.\n   The original CertificateRequest handshake message syntax
      is defined\n   in [RFC5246].  The modified structure of the CertificateRequest\n
      \  message is shown in Figure 2.\n         struct {\n             opaque hash_value<1..255>;\n
      \        } CertificateRequest;\n             Figure 2: Cached Info CertificateRequest
      Message\n   The CertificateRequest payload is the input parameter to the\n   fingerprint
      calculation described in Section 5.\n"
    title: 4.2.  CertificateRequest Message
  title: 4.  Exchange Specification
- contents:
  - "5.  Fingerprint Calculation\n   The fingerprint for the two cached info objects
    defined in this\n   document MUST be computed as follows:\n   1.  Compute the
    SHA-256 [RFC6234] hash of the input data.  The input\n       data depends on the
    cached info type.  This document defines two\n       cached info types, described
    in Sections 4.1 and in 4.2.  Note\n       that the computed hash only covers the
    input data structure (and\n       not any type and length information of the record
    layer).\n       Appendix A shows an example.\n   2.  Use the output of the SHA-256
    hash.\n   The purpose of the fingerprint provided by the client is to help the\n
    \  server select the correct information.  For example, in case of a\n   Certificate
    message, the fingerprint identifies the server\n   certificate (and the corresponding
    private key) for use with the rest\n   of the handshake.  Servers may have more
    than one certificate, and\n   therefore a hash needs to be long enough to keep
    the probably of hash\n   collisions low.  On the other hand, the cached info design
    aims to\n   reduce the amount of data being exchanged.  The security of the\n
    \  handshake depends on the private key and not on the size of the\n   fingerprint.
    \ Hence, the fingerprint is a way to prevent the server\n   from accidentally
    selecting the wrong information.  If an attacker\n   injects an incorrect fingerprint,
    then two outcomes are possible: (1)\n   the fingerprint does not relate to any
    cached state and the server\n   has to fall back to a full exchange, and (2) if
    the attacker manages\n   to inject a fingerprint that refers to data the client
    has not\n   cached, then the exchange will fail later when the client continues\n
    \  with the handshake and aims to verify the digital signature.  The\n   signature
    verification will fail since the public key cached by the\n   client will not
    correspond to the private key that was used by the\n   server to sign the message.\n"
  title: 5.  Fingerprint Calculation
- contents:
  - "6.  Example\n   In the regular, full TLS handshake exchange, shown in Figure
    3, the\n   TLS server provides its certificate in the certificate payload to the\n
    \  client; see step (1).  This allows the client to store the\n   certificate
    for future use.  After some time, the TLS client again\n   interacts with the
    same TLS server and makes use of the TLS\n   \"cached_info\" extension, as shown
    in Figure 4.  The TLS client\n   indicates support for this specification via
    the \"cached_info\"\n   extension, see step (2), and indicates that it has stored
    the\n   certificate from the earlier exchange (by indicating the 'cert'\n   type).
    \ With step (3), the TLS server acknowledges the support of the\n   'cert' type
    and by including the value in the ServerHello, it informs\n   the client that
    the content of the certificate payload contains the\n   fingerprint of the certificate
    instead of the payload, defined in RFC\n   5246, of the Certificate message; see
    step (4).\n   ClientHello            ->\n                          <-  ServerHello\n
    \                             Certificate* // (1)\n                              ServerKeyExchange*\n
    \                             CertificateRequest*\n                              ServerHelloDone\n
    \  Certificate*\n   ClientKeyExchange\n   CertificateVerify*\n   [ChangeCipherSpec]\n
    \  Finished               ->\n                          <- [ChangeCipherSpec]\n
    \                            Finished\n   Application Data <-------> Application
    Data\n        Figure 3: Example Message Exchange: Initial (Full) Exchange\n   ClientHello\n
    \  cached_info=(cert)     -> // (2)\n                          <-  ServerHello\n
    \                             cached_info=(cert) (3)\n                              Certificate
    (4)\n                              ServerKeyExchange*\n                              ServerHelloDone\n
    \  ClientKeyExchange\n   CertificateVerify*\n   [ChangeCipherSpec]\n   Finished
    \              ->\n                          <- [ChangeCipherSpec]\n                             Finished\n
    \  Application Data <-------> Application Data\n      Figure 4: Example Message
    Exchange: TLS Cached Extension Usage\n"
  title: 6.  Example
- contents:
  - "7.  Security Considerations\n   This specification defines a mechanism to reference
    stored state\n   using a fingerprint.  Sending a fingerprint of cached information
    in\n   an unencrypted handshake, as the ClientHello and ServerHello does,\n   may
    allow an attacker or observer to correlate independent TLS\n   exchanges.  While
    some information elements used in this\n   specification, such as server certificates,
    are public objects and\n   usually do not contain sensitive information, other
    types that are\n   not yet defined may.  Those who implement and deploy this\n
    \  specification should therefore make an informed decision whether the\n   cached
    information is in line with their security and privacy goals.\n   In case of concerns,
    it is advised to avoid sending the fingerprint\n   of the data objects in clear.\n
    \  The use of the \"cached_info\" extension allows the server to send\n   significantly
    smaller TLS messages.  Consequently, these omitted\n   parts of the messages are
    not included in the transcript of the\n   handshake in the TLS Finish message.
    \ However, since the client and\n   the server communicate the hash values of
    the cached data in the\n   initial handshake messages, the fingerprints are included
    in the TLS\n   Finish message.\n   Clients MUST ensure that they only cache information
    from legitimate\n   sources.  For example, when the client populates the cache
    from a TLS\n   exchange, then it must only cache information after the successful\n
    \  completion of a TLS exchange to ensure that an attacker does not\n   inject
    incorrect information into the cache.  Failure to do so allows\n   for man-in-the-middle
    attacks.\n   Security considerations for the fingerprint calculation are discussed\n
    \  in Section 5.\n"
  title: 7.  Security Considerations
- contents:
  - '8.  IANA Considerations

    '
  - contents:
    - "8.1.  New Entry to the TLS ExtensionType Registry\n   IANA has added an entry
      to the existing TLS \"ExtensionType Values\"\n   registry, defined in [RFC5246],
      for cached_info(25) defined in this\n   document.\n"
    title: 8.1.  New Entry to the TLS ExtensionType Registry
  - contents:
    - "8.2.  New Registry for CachedInformationType\n   IANA has established a registry
      titled \"TLS CachedInformationType\n   Values\".  The entries in the registry
      are:\n   Value    Description\n   -----    -----------\n     0      Reserved\n
      \    1      cert\n     2      cert_req\n   224-255  Reserved for Private Use\n
      \  The policy for adding new values to this registry, following the\n   terminology
      defined in [RFC5226], is as follows:\n   o  0-63 (decimal): Standards Action\n
      \  o  64-223 (decimal): Specification Required\n"
    title: 8.2.  New Registry for CachedInformationType
  title: 8.  IANA Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC6066]
      \ Eastlake 3rd, D., \"Transport Layer Security (TLS)\n              Extensions:
      Extension Definitions\", RFC 6066,\n              DOI 10.17487/RFC6066, January
      2011,\n              <http://www.rfc-editor.org/info/rfc6066>.\n   [RFC6234]
      \ Eastlake 3rd, D. and T. Hansen, \"US Secure Hash Algorithms\n              (SHA
      and SHA-based HMAC and HKDF)\", RFC 6234,\n              DOI 10.17487/RFC6234,
      May 2011,\n              <http://www.rfc-editor.org/info/rfc6234>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [ASN.1-Dump]\n              Gutmann, P., \"ASN.1
      Object Dump Program\", November 2010,\n              <http://manpages.ubuntu.com/manpages/precise/man1/\n
      \             dumpasn1.1.html>.\n   [RFC5226]  Narten, T. and H. Alvestrand,
      \"Guidelines for Writing an\n              IANA Considerations Section in RFCs\",
      BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226, May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n
      \  [RFC6574]  Tschofenig, H. and J. Arkko, \"Report from the Smart Object\n
      \             Workshop\", RFC 6574, DOI 10.17487/RFC6574, April 2012,\n              <http://www.rfc-editor.org/info/rfc6574>.\n
      \  [RFC7250]  Wouters, P., Ed., Tschofenig, H., Ed., Gilmore, J.,\n              Weiler,
      S., and T. Kivinen, \"Using Raw Public Keys in\n              Transport Layer
      Security (TLS) and Datagram Transport\n              Layer Security (DTLS)\",
      RFC 7250, DOI 10.17487/RFC7250,\n              June 2014, <http://www.rfc-editor.org/info/rfc7250>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A.  Example\n   Consider a certificate containing a NIST P256 elliptic
    curve public\n   key displayed using Peter Gutmann's ASN.1 decoder [ASN.1-Dump]
    in\n   Figure 5.\n    0 556: SEQUENCE {\n    4 434:   SEQUENCE {\n    8   3:     [0]
    {\n   10   1:       INTEGER 2\n         :       }\n   13   1:     INTEGER 13\n
    \  16  10:     SEQUENCE {\n   18   8:      OBJECT IDENTIFIER ecdsaWithSHA256 (1
    2 840 10045 4 3 2)\n         :       }\n   28  62:     SEQUENCE {\n   30  11:
    \      SET {\n   32   9:         SEQUENCE {\n   34   3:           OBJECT IDENTIFIER
    countryName (2 5 4 6)\n   39   2:           PrintableString 'NL'\n         :           }\n
    \        :         }\n   43  17:       SET {\n   45  15:         SEQUENCE {\n
    \  47   3:           OBJECT IDENTIFIER organizationName (2 5 4 10)\n   52   8:
    \          PrintableString 'PolarSSL'\n         :           }\n         :         }\n
    \  62  28:       SET {\n   64  26:         SEQUENCE {\n   66   3:           OBJECT
    IDENTIFIER commonName (2 5 4 3)\n   71  19:           PrintableString 'Polarssl
    Test EC CA'\n         :           }\n         :         }\n         :       }\n
    \  92  30:     SEQUENCE {\n   94  13:       UTCTime 24/09/2013 15:52:04 GMT\n
    \ 109  13:       UTCTime 22/09/2023 15:52:04 GMT\n         :       }\n  124  65:
    \    SEQUENCE {\n  126  11:       SET {\n  128   9:         SEQUENCE {\n  130
    \  3:           OBJECT IDENTIFIER countryName (2 5 4 6)\n  135   2:           PrintableString
    'NL'\n         :           }\n         :         }\n  139  17:       SET {\n  141
    \ 15:         SEQUENCE {\n  143   3:           OBJECT IDENTIFIER organizationName
    (2 5 4 10)\n  148   8:           PrintableString 'PolarSSL'\n         :           }\n
    \        :         }\n  158  31:       SET {\n  160  29:         SEQUENCE {\n
    \ 162   3:           OBJECT IDENTIFIER commonName (2 5 4 3)\n  167  22:           PrintableString
    'PolarSSL Test Client 2'\n         :           }\n         :         }\n         :
    \      }\n  191  89:     SEQUENCE {\n  193  19:       SEQUENCE {\n  195   7:         OBJECT
    IDENTIFIER ecPublicKey (1 2 840 10045 2 1)\n  204   8:         OBJECT IDENTIFIER
    prime256v1 (1 2 840 10045 3 1 7)\n         :         }\n  214  66:       BIT STRING\n
    \        :         04 57 E5 AE B1 73 DF D3 AC BB 93 B8 81 FF 12 AE\n         :
    \        EE E6 53 AC CE 55 53 F6 34 0E CC 2E E3 63 25 0B\n         :         DF
    98 E2 F3 5C 60 36 96 C0 D5 18 14 70 E5 7F 9F\n         :         D5 4B 45 18 E5
    B0 6C D5 5C F8 96 8F 87 70 A3 E4\n         :         C7\n         :       }\n
    \ 282 157:     [3] {\n  285 154:       SEQUENCE {\n  288   9:         SEQUENCE
    {\n  290   3:           OBJECT IDENTIFIER basicConstraints (2 5 29 19)\n  295
    \  2:           OCTET STRING, encapsulates {\n  297   0:             SEQUENCE
    {}\n         :             }\n         :           }\n  299  29:         SEQUENCE
    {\n  301   3:           OBJECT IDENTIFIER subjectKeyIdentifier (2 5 29 14)\n  306
    \ 22:           OCTET STRING, encapsulates {\n  308  20:             OCTET STRING\n
    \        :              7A 00 5F 86 64 FC E0 5D E5 11 10 3B B2 E6 3B C4\n         :
    \             26 3F CF E2\n         :             }\n         :           }\n
    \ 330 110:         SEQUENCE {\n  332   3:          OBJECT IDENTIFIER authorityKeyIdentifier
    (2 5 29 35)\n  337 103:          OCTET STRING, encapsulates {\n  339 101:             SEQUENCE
    {\n  341  20:               [0]\n         :               9D 6D 20 24 49 01 3F
    2B CB 78 B5 19 BC 7E 24\n         :               C9 DB FB 36 7C\n  363  66:               [1]
    {\n  365  64:                 [4] {\n  367  62:                   SEQUENCE {\n
    \ 369  11:                     SET {\n  371   9:                      SEQUENCE
    {\n  373   3:                       OBJECT IDENTIFIER countryName (2 5 4 6)\n
    \ 378   2:                       PrintableString 'NL'\n         :                       }\n
    \        :                      }\n  382  17:                     SET {\n  384
    \ 15:                      SEQUENCE {\n  386   3:                        OBJECT
    IDENTIFIER organizationName\n         :                               (2 5 4 10)\n
    \ 391   8:                        PrintableString 'PolarSSL'\n         :                        }\n
    \        :                      }\n  401  28:                     SET {\n  403
    \ 26:                      SEQUENCE {\n  405   3:                       OBJECT
    IDENTIFIER commonName (2 5 4 3)\n  410  19:                       PrintableString
    'Polarssl Test EC CA'\n         :                        }\n         :                      }\n
    \        :                     }\n         :                   }\n         :                 }\n
    \ 431   9:               [2] 00 C1 43 E2 7E 62 43 CC E8\n         :               }\n
    \        :             }\n         :           }\n         :         }\n         :
    \      }\n         :     }\n  442  10:   SEQUENCE {\n  444   8:     OBJECT IDENTIFIER
    ecdsaWithSHA256 (1 2 840 10045 4 3 2)\n         :     }\n  454 104:   BIT STRING,
    encapsulates {\n  457 101:     SEQUENCE {\n  459  48:       INTEGER\n         :
    \        4A 65 0D 7B 20 83 A2 99 B9 A8 0F FC 8D EE 8F 3D\n         :         BB
    70 4C 96 03 AC 8E 78 70 DD F2 0E A0 B2 16 CB\n         :         65 8E 1A C9 3F
    2C 61 7E F8 3C EF AD 1C EE 36 20\n  509  49:       INTEGER\n         :         00
    9D F2 27 A6 D5 74 B8 24 AE E1 6A 3F 31 A1 CA\n         :         54 2F 08 D0 8D
    EE 4F 0C 61 DF 77 78 7D B4 FD FC\n         :         42 49 EE E5 B2 6A C2 CD 26
    77 62 8E 28 7C 9E 57\n         :         45\n         :       }\n         :     }\n
    \        :   }\n                Figure 5: ASN.1-Based Certificate: Example\n   To
    include the certificate shown in Figure 5 in a TLS/DTLS\n   Certificate message,
    it is prepended with a message header.  This\n   Certificate message header in
    our example is 0b 00 02 36 00 02 33 00\n   02 00 02 30, which indicates:\n   Message
    Type:  0b -- 1-byte type field indicating a Certificate\n      message\n   Length:
    \ 00 02 36 -- 3-byte length field indicating a 566-byte\n      payload\n   Certificates
    Length:  00 02 33 -- 3-byte length field indicating 563\n      bytes for the entire
    certificates_list structure, which may\n      contain multiple certificates.  In
    our example, only one\n      certificate is included.\n   Certificate Length:
    \ 00 02 30 -- 3-byte length field indicating 560\n      bytes of the actual certificate
    following immediately afterwards.\n      In our example, this is the certificate
    content with 30 82 02 ....\n      9E 57 45 shown in Figure 6.\n   The hex encoding
    of the ASN.1-encoded certificate payload shown in\n   Figure 5 leads to the following
    encoding.\n             30 82 02 2C 30 82 01 B2  A0 03 02 01 02 02 01 0D\n             30
    0A 06 08 2A 86 48 CE  3D 04 03 02 30 3E 31 0B\n             30 09 06 03 55 04
    06 13  02 4E 4C 31 11 30 0F 06\n             03 55 04 0A 13 08 50 6F  6C 61 72
    53 53 4C 31 1C\n             30 1A 06 03 55 04 03 13  13 50 6F 6C 61 72 73 73\n
    \            6C 20 54 65 73 74 20 45  43 20 43 41 30 1E 17 0D\n             31
    33 30 39 32 34 31 35  35 32 30 34 5A 17 0D 32\n             33 30 39 32 32 31
    35 35  32 30 34 5A 30 41 31 0B\n             30 09 06 03 55 04 06 13  02 4E 4C
    31 11 30 0F 06\n             03 55 04 0A 13 08 50 6F  6C 61 72 53 53 4C 31 1F\n
    \            30 1D 06 03 55 04 03 13  16 50 6F 6C 61 72 53 53\n             4C
    20 54 65 73 74 20 43  6C 69 65 6E 74 20 32 30\n             59 30 13 06 07 2A
    86 48  CE 3D 02 01 06 08 2A 86\n             48 CE 3D 03 01 07 03 42  00 04 57
    E5 AE B1 73 DF\n             D3 AC BB 93 B8 81 FF 12  AE EE E6 53 AC CE 55 53\n
    \            F6 34 0E CC 2E E3 63 25  0B DF 98 E2 F3 5C 60 36\n             96
    C0 D5 18 14 70 E5 7F  9F D5 4B 45 18 E5 B0 6C\n             D5 5C F8 96 8F 87
    70 A3  E4 C7 A3 81 9D 30 81 9A\n             30 09 06 03 55 1D 13 04  02 30 00
    30 1D 06 03 55\n             1D 0E 04 16 04 14 7A 00  5F 86 64 FC E0 5D E5 11\n
    \            10 3B B2 E6 3B C4 26 3F  CF E2 30 6E 06 03 55 1D\n             23
    04 67 30 65 80 14 9D  6D 20 24 49 01 3F 2B CB\n             78 B5 19 BC 7E 24
    C9 DB  FB 36 7C A1 42 A4 40 30\n             3E 31 0B 30 09 06 03 55  04 06 13
    02 4E 4C 31 11\n             30 0F 06 03 55 04 0A 13  08 50 6F 6C 61 72 53 53\n
    \            4C 31 1C 30 1A 06 03 55  04 03 13 13 50 6F 6C 61\n             72
    73 73 6C 20 54 65 73  74 20 45 43 20 43 41 82\n             09 00 C1 43 E2 7E
    62 43  CC E8 30 0A 06 08 2A 86\n             48 CE 3D 04 03 02 03 68  00 30 65
    02 30 4A 65 0D\n             7B 20 83 A2 99 B9 A8 0F  FC 8D EE 8F 3D BB 70 4C\n
    \            96 03 AC 8E 78 70 DD F2  0E A0 B2 16 CB 65 8E 1A\n             C9
    3F 2C 61 7E F8 3C EF  AD 1C EE 36 20 02 31 00\n             9D F2 27 A6 D5 74
    B8 24  AE E1 6A 3F 31 A1 CA 54\n             2F 08 D0 8D EE 4F 0C 61  DF 77 78
    7D B4 FD FC 42\n             49 EE E5 B2 6A C2 CD 26  77 62 8E 28 7C 9E 57 45\n
    \            Figure 6: Hex Encoding of the Example Certificate\n   Applying the
    SHA-256 hash function to the Certificate message, which\n   starts with 0b 00
    02 and ends with 9E 57 45, produces\n   0x086eefb4859adfe977defac494fff6b73033b4ce1f86b8f2a9fc0c6bf98605af.\n"
  title: Appendix A.  Example
- contents:
  - "Acknowledgments\n   We would like to thank the following persons for your detailed\n
    \  document reviews:\n   o  Paul Wouters and Nikos Mavrogiannopoulos (December
    2011)\n   o  Rob Stradling (February 2012)\n   o  Ondrej Mikle (March 2012)\n
    \  o  Ilari Liusvaara, Adam Langley, and Eric Rescorla (July 2014)\n   o  Sean
    Turner (August 2014)\n   o  Martin Thomson (August 2015)\n   o  Jouni Korhonen
    (November 2015)\n   o  Dave Garrett (December 2015)\n   o  Matt Miller (December
    2015)\n   o  Anirudh Ramachandran (March 2016)\n   We would also to thank Martin
    Thomson, Karthikeyan Bhargavan, Sankalp\n   Bagaria, and Eric Rescorla for their
    feedback regarding the\n   fingerprint calculation.\n   Finally, we would like
    to thank the TLS working group chairs, Sean\n   Turner and Joe Salowey, as well
    as the responsible Security Area\n   Director, Stephen Farrell, for their support
    and their reviews.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Stefan Santesson\n   3xA Security AB\n   Forskningsbyn
    Ideon\n   Lund  223 70\n   Sweden\n   Email: sts@aaa-sec.com\n   Hannes Tschofenig\n
    \  ARM Ltd.\n   Hall in Tirol  6060\n   Austria\n   Email: Hannes.tschofenig@gmx.net\n
    \  URI:   http://www.tschofenig.priv.at\n"
  title: Authors' Addresses
