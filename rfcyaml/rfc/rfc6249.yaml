- contents:
  - '                   Metalink/HTTP: Mirrors and Hashes

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies Metalink/HTTP: Mirrors and Cryptographic\n
    \  Hashes in HTTP header fields, a different way to get information that\n   is
    usually contained in the Metalink XML-based download description\n   format.  Metalink/HTTP
    describes multiple download locations\n   (mirrors), Peer-to-Peer, cryptographic
    hashes, digital signatures,\n   and other information using existing standards
    for HTTP header\n   fields.  Metalink clients can use this information to make
    file\n   transfers more robust and reliable.  Normative requirements for\n   Metalink/HTTP
    clients and servers are described here.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6249.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Example Metalink Server Response ...........................4\n      1.2.
    Notational Conventions .....................................4\n      1.3. Terminology
    ................................................5\n   2. Requirements ....................................................5\n
    \  3. Mirrors / Multiple Download Locations ...........................7\n      3.1.
    Mirror Priority ............................................8\n      3.2. Mirror
    Geographical Location ...............................8\n      3.3. Coordinated
    Mirror Policies ................................8\n      3.4. Mirror Depth ...............................................9\n
    \  4. Peer-to-Peer / Metainfo .........................................9\n      4.1.
    Metalink/XML Files ........................................10\n   5. Signatures
    .....................................................10\n      5.1. OpenPGP Signatures
    ........................................10\n      5.2. S/MIME Signatures .........................................10\n
    \  6. Cryptographic Hashes of Whole Documents ........................11\n   7.
    Client / Server Multi-Source Download Interaction ..............11\n      7.1.
    Error Prevention, Detection, and Correction ...............15\n           7.1.1.
    Error Prevention (Early File Mismatch Detection) ...15\n           7.1.2. Error
    Correction ...................................16\n   8. IANA Considerations ............................................16\n
    \  9. Security Considerations ........................................17\n      9.1.
    URIs and IRIs .............................................17\n      9.2. Spoofing
    ..................................................17\n      9.3. Cryptographic
    Hashes ......................................17\n      9.4. Signing ...................................................17\n
    \  10. References ....................................................18\n      10.1.
    Normative References .....................................18\n      10.2. Informative
    References ...................................19\n   Appendix A. Acknowledgements
    and Contributors .....................20\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Metalink/HTTP is an alternative and complementary representation
    of\n   Metalink information, which is usually presented as an XML-based\n   document
    format [RFC5854].  Metalink/HTTP attempts to provide as much\n   functionality
    as the Metalink/XML format by using existing standards,\n   such as Web Linking
    [RFC5988], Instance Digests in HTTP [RFC3230],\n   and Entity Tags (also known
    as ETags) [RFC2616].  Metalink/HTTP is\n   used to list information about a file
    to be downloaded.  This can\n   include lists of multiple URIs (mirrors), Peer-to-Peer
    information,\n   cryptographic hashes, and digital signatures.\n   Identical copies
    of a file are frequently accessible in multiple\n   locations on the Internet
    over a variety of protocols (such as FTP,\n   HTTP, and Peer-to-Peer).  In some
    cases, users are shown a list of\n   these multiple download locations (mirrors)
    and must manually select\n   a single one on the basis of geographical location,
    priority, or\n   bandwidth.  This distributes the load across multiple servers,
    and\n   should also increase throughput and resilience.  At times, however,\n
    \  individual servers can be slow, outdated, or unreachable, but this\n   cannot
    be determined until the download has been initiated.  Users\n   will rarely have
    sufficient information to choose the most\n   appropriate server and will often
    choose the first in a list, which\n   might not be optimal for their needs, and
    will lead to a particular\n   server getting a disproportionate share of load.
    \ The use of\n   suboptimal mirrors can lead to the user canceling and restarting
    the\n   download to try to manually find a better source.  During downloads,\n
    \  errors in transmission can corrupt the file.  There are no easy ways\n   to
    repair these files.  For large downloads, this can be extremely\n   troublesome.
    \ Any of the number of problems that can occur during a\n   download lead to frustration
    on the part of users.\n   Some popular sites automate the process of selecting
    mirrors using\n   DNS load balancing, both to approximately balance load between\n
    \  servers, and to direct clients to nearby servers with the hope that\n   this
    improves throughput.  Indeed, DNS load balancing can balance\n   long-term server
    load fairly effectively, but it is less effective at\n   delivering the best throughput
    to users when the bottleneck is not\n   the server but the network.\n   This document
    describes a mechanism by which the benefit of mirrors\n   can be automatically
    and more effectively realized.  All the\n   information about a download, including
    mirrors, cryptographic\n   hashes, digital signatures, and more can be transferred
    in\n   coordinated HTTP header fields, hereafter referred to as a\n   \"Metalink\".
    \ This Metalink transfers the knowledge of the download\n   server (and mirror
    database) to the client.  Clients can fall back to\n   other mirrors if the current
    one has an issue.  With this knowledge,\n   the client is enabled to work its
    way to a successful download even\n   under adverse circumstances.  All this can
    be done without\n   complicated user interaction, and the download can be much
    more\n   reliable and efficient.  In contrast, a traditional HTTP redirect to\n
    \  a mirror conveys only minimal information -- one link to one server\n   --
    and there is no provision in the HTTP protocol to handle failures.\n   Furthermore,
    in order to provide better load distribution across\n   servers and potentially
    faster downloads to users, Metalink/HTTP\n   facilitates multi-source downloads,
    where portions of a file are\n   downloaded from multiple mirrors (and, optionally,
    Peer-to-Peer)\n   simultaneously.\n   Upon connection to a Metalink/HTTP server,
    a client will receive\n   information about other sources of the same resource
    and a\n   cryptographic hash of the whole resource.  The client will then be\n
    \  able to request chunks of the file from the various sources,\n   scheduling
    appropriately in order to maximize the download rate.\n"
  - contents:
    - "1.1.  Example Metalink Server Response\n   This example shows a brief Metalink
      server response with ETag,\n   mirrors, Peer-to-Peer information, Metalink/XML,
      OpenPGP signature,\n   and a cryptographic hash of the whole file:\n   Etag:
      \"thvDyvhfIqlvFe+A9MYgxAfm1q5=\"\n   Link: <http://www2.example.com/example.ext>;
      rel=duplicate\n   Link: <ftp://ftp.example.com/example.ext>; rel=duplicate\n
      \  Link: <http://example.com/example.ext.torrent>; rel=describedby;\n   type=\"application/x-bittorrent\"\n
      \  Link: <http://example.com/example.ext.meta4>; rel=describedby;\n   type=\"application/metalink4+xml\"\n
      \  Link: <http://example.com/example.ext.asc>; rel=describedby;\n   type=\"application/pgp-signature\"\n
      \  Digest: SHA-256=MWVkMWQxYTRiMzk5MDQ0MzI3NGU5NDEyZTk5OWY1ZGFmNzgyZTJlO\n   DYzYjRjYzFhOTlmNTQwYzI2M2QwM2U2MQ==\n"
    title: 1.1.  Example Metalink Server Response
  - contents:
    - "1.2.  Notational Conventions\n   This specification describes conformance of
      Metalink/HTTP.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in BCP
      14, [RFC2119], as\n   scoped to those conformance targets.\n"
    title: 1.2.  Notational Conventions
  - contents:
    - "1.3.  Terminology\n   The following terms, as used in this document, are defined
      here:\n   o  Metalink server: HTTP server that provides a Metalink in HTTP\n
      \     response header fields.\n   o  Metalink : A collection of HTTP response
      header fields from a\n      Metalink server, which is the reply to a GET or
      HEAD request from\n      a client and which includes Link header fields listing
      mirrors and\n      Instance Digests listing a cryptographic hash.\n   o  Link
      header field: HTTP response header field, defined in\n      [RFC5988], that
      can list mirrors and, potentially, other download\n      methods for obtaining
      a file, along with digital signatures.\n   o  Instance Digest: HTTP response
      header field, defined in [RFC3230],\n      that contains the cryptographic hash
      of a file, which is used by\n      the Metalink client to verify the integrity
      of the file once the\n      download has completed.\n   o  Entity Tag or ETag:
      HTTP response header field, defined in\n      [RFC2616], that, if synchronized
      between the Metalink server and\n      mirror servers, allows Metalink clients
      to provide advanced\n      features.\n   o  Mirror server: Typically, FTP or
      HTTP servers that \"mirror\" the\n      Metalink server, i.e., provide identical
      copies of (at least some)\n      files that are also on the mirrored server.\n
      \  o  Metalink clients: Applications that process Metalinks and use them\n      to
      provide an improved download experience.  They support HTTP and\n      could
      also support other download protocols like FTP or various\n      Peer-to-Peer
      methods.\n   o  Metalink/XML: An XML file that can contain similar information
      to\n      an HTTP response header Metalink, such as mirrors and\n      cryptographic
      hashes.\n"
    title: 1.3.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Requirements\n   In this context, \"Metalink\" refers to Metalink/HTTP, which
    consists\n   of mirrors and cryptographic hashes in HTTP header fields as\n   described
    in this document.  \"Metalink/XML\" refers to the XML format\n   described in
    [RFC5854].\n   Metalink resources include Link header fields [RFC5988] to present
    a\n   list of mirrors in the response to a client request for the resource.\n
    \  Metalink servers MUST include the cryptographic hash of a resource\n   via
    Instance Digests in HTTP [RFC3230].  Algorithms used in the\n   Instance Digest
    field are registered in the IANA registry named\n   \"Hypertext Transfer Protocol
    (HTTP) Digest Algorithm Values\" at\n   <http://www.iana.org/>.  This document
    restricts the use of these\n   algorithms.  SHA-256 and SHA-512 were added to
    the registry by\n   [RFC5843].  Metalinks contain whole file hashes as described
    in\n   Section 6, and MUST include SHA-256, as specified in [FIPS-180-3].\n   It
    MAY also include other hashes.\n   Metalink servers are HTTP servers with one
    or more Metalink\n   resources.  Metalink servers MUST support the Link header
    fields for\n   listing mirrors and MUST support Instance Digests in HTTP [RFC3230].\n
    \  Metalink servers MUST return the same Link header fields and Instance\n   Digests
    on HEAD requests.  Metalink servers and their associated\n   preferred mirror
    servers MUST all share the same ETag policy.\n   Metalink servers and their associated
    normal mirror servers SHOULD\n   all share the same ETag policy.  (See Section
    3.3 for the definition\n   of \"preferred\" and \"normal\" mirror servers.)  It
    is up to the\n   administrator of the Metalink server to communicate the details
    of\n   the shared ETag policy to the administrators of the mirror servers so\n
    \  that the mirror servers can be configured with the same ETag policy.\n   To
    have the same ETag policy means that ETags are synchronized across\n   servers
    for resources that are mirrored; i.e., byte-for-byte\n   identical files will
    have the same ETag on mirrors that they have on\n   the Metalink server.  For
    example, it would be better to derive an\n   ETag from a cryptographic hash of
    the file contents than on server-\n   unique filesystem metadata.  Metalink servers
    SHOULD offer Metalink/\n   XML documents that contain cryptographic hashes of
    parts of the file\n   (and other information) if error recovery is desirable.\n
    \  Mirror servers are typically FTP or HTTP servers that \"mirror\"\n   another
    server.  That is, they provide identical copies of (at least\n   some) files that
    are also on the mirrored server.  Mirror servers\n   SHOULD support serving partial
    content.  HTTP mirror servers SHOULD\n   share the same ETag policy as the originating
    Metalink server.  HTTP\n   mirror servers SHOULD support Instance Digests in HTTP
    [RFC3230]\n   using the same algorithm as the Metalink server.  Optimally, HTTP\n
    \  mirror servers will share the same ETag policy and support Instance\n   Digests
    in HTTP.  Mirror servers that share the same ETag policy\n   and/or support Instance
    Digests in HTTP using the same algorithm as a\n   Metalink server are known as
    preferred mirror servers.\n   Metalink clients use the mirrors provided by a Metalink
    server in\n   Link header fields [RFC5988] but these clients are restricted to\n
    \  using the mirrors provided by the initial Metalink server they\n   contacted.
    \ If Metalink clients find Link header fields [RFC5988]\n   from mirrors that
    in turn list mirrors, or from a Metalink server\n   listing itself as a mirror,
    they MUST discard such Link header fields\n   [RFC5988] to prevent a possible
    infinite loop.  Metalink clients MUST\n   support HTTP and SHOULD support FTP
    [RFC0959].  Metalink clients MAY\n   support BitTorrent [BITTORRENT] or other
    download methods.  Metalink\n   clients SHOULD switch downloads from one mirror
    to another if a\n   mirror becomes unreachable.  Metalink clients MAY support
    multi-\n   source, or parallel, downloads, where portions of a file can be\n   downloaded
    from multiple mirrors simultaneously (and, optionally,\n   from Peer-to-Peer sources).
    \ Metalink clients MUST support Instance\n   Digests in HTTP [RFC3230] by requesting
    and verifying cryptographic\n   hashes.  Metalink clients SHOULD support error
    recovery by using the\n   cryptographic hashes of parts of the file listed in
    Metalink/XML\n   files.  Metalink clients SHOULD support checking digital signatures.\n"
  title: 2.  Requirements
- contents:
  - "3.  Mirrors / Multiple Download Locations\n   Mirrors are specified with the
    Link header fields [RFC5988] and a\n   relation type of \"duplicate\" as defined
    in Section 8.\n   The following list contains OPTIONAL attributes, which are defined\n
    \  elsewhere in this document:\n   o  \"depth\" : mirror depth (see Section 3.4).\n
    \  o  \"geo\" : mirror geographical location (see Section 3.2).\n   o  \"pref\"
    : a preferred mirror server (see Section 3.3).\n   o  \"pri\" : mirror priority
    (see Section 3.1).\n   This example shows a brief Metalink server response with
    two mirrors\n   only:\n   Link: <http://www2.example.com/example.ext>; rel=duplicate;\n
    \  pri=1; pref\n   Link: <ftp://ftp.example.com/example.ext>; rel=duplicate;\n
    \  pri=2; geo=gb; depth=1\n   As some organizations can have many mirrors, it
    is up to the\n   organization to configure the amount of Link header fields the\n
    \  Metalink server will provide.  Such a decision could be a random\n   selection
    or a hard-coded limit based on network proximity, file\n   size, server load,
    or other factors.\n"
  - contents:
    - "3.1.  Mirror Priority\n   Entries for mirror servers MAY have a \"pri\" value
      to designate the\n   priority of a mirror.  Valid ranges for the \"pri\" attribute
      are from\n   1 to 999999.  Mirror servers with a lower value of the \"pri\"\n
      \  attribute have a higher priority, while mirrors with an undefined\n   \"pri\"
      attribute are considered to have a value of 999999, which is\n   the lowest
      priority.  For example, a mirror with \"pri=10\" has higher\n   priority than
      a mirror with \"pri=20\".  Metalink clients SHOULD use\n   mirrors with lower
      \"pri\" values first, but depending on other\n   conditions, they MAY decide
      to use other mirrors.\n   This is purely an expression of the server's preferences;
      it is up to\n   the client what it does with this information, particularly
      with\n   reference to how many servers to use at any one time.\n"
    title: 3.1.  Mirror Priority
  - contents:
    - "3.2.  Mirror Geographical Location\n   Entries for a mirror server MAY have
      a \"geo\" value, which is an\n   [ISO3166-1] alpha-2 two-letter country code
      for the geographical\n   location of the physical server the URI is used to
      access.  A client\n   MAY use this information to select a mirror, or set of
      mirrors, that\n   is geographically near (if the client has access to such\n
      \  information), with the aim of reducing network load at inter-country\n   bottlenecks.\n"
    title: 3.2.  Mirror Geographical Location
  - contents:
    - "3.3.  Coordinated Mirror Policies\n   There are two types of mirror servers:
      preferred and normal.  Entries\n   for preferred HTTP mirror servers have a
      \"pref\" value and entries for\n   normal mirrors don't.  Preferred mirror servers
      are HTTP mirror\n   servers that MUST share the same ETag policy as the originating\n
      \  Metalink server, or if the ETag is not used MUST provide an Instance\n   Digest
      using the same algorithm as the Metalink server.  Preferred\n   mirrors make
      it possible for Metalink clients to detect early on,\n   before data is transferred,
      if the file requested matches the desired\n   file.  This early file mismatch
      detection is described in\n   Section 7.1.1.  Normal mirrors do not necessarily
      share the same ETag\n   policy or support Instance Digests using the same algorithm
      as the\n   Metalink server.  FTP mirrors are considered \"normal\", as they
      do not\n   emit ETags or support Instance Digests.\n"
    title: 3.3.  Coordinated Mirror Policies
  - contents:
    - "3.4.  Mirror Depth\n   Some mirrors can mirror single files, whole directories,
      or multiple\n   directories.\n   Entries for mirror servers can have a \"depth\"
      value, where \"depth=0\"\n   is the default.  A value of 0 means that only that
      file is mirrored\n   and that other URI path segments are not.  A value of 1
      means that\n   the file and all other files and URI path segments contained
      in the\n   rightmost URI path segment are mirrored.  For values of N, N-1 URI\n
      \  path segments closer to the Host are mirrored.  A value of 2 means\n   one
      URI path segment closer to the Host is mirrored, and all files\n   and URI path
      segments contained are mirrored.  For each higher value,\n   another URI path
      segment closer to the Host is mirrored.\n   This example shows a mirror with
      a depth value of 4:\n   Link: <http://www2.example.com/dir1/dir2/dir3/dir4/dir5/example.ext>;\n
      \  rel=duplicate; pri=1; pref; depth=4\n   In the above example, four URI path
      segments closer to the Host are\n   mirrored, from /dir2/ and all files and
      directories included.\n"
    title: 3.4.  Mirror Depth
  title: 3.  Mirrors / Multiple Download Locations
- contents:
  - "4.  Peer-to-Peer / Metainfo\n   Entries for metainfo files, which describe ways
    to download a file\n   over Peer-to-Peer networks or otherwise, are specified
    with the Link\n   header fields [RFC5988] and a relation type of \"describedby\"
    and a\n   type parameter that indicates the MIME type of the metadata available\n
    \  at the URI.  Since metainfo files can sometimes describe multiple\n   files,
    or the filename MAY not be the same on the Metalink server and\n   in the metainfo
    file but MAY still have the same content, an OPTIONAL\n   \"name\" attribute can
    be used.\n   The following list contains an OPTIONAL attribute, which is defined\n
    \  in this document:\n   o  \"name\" : a file described within the metainfo file.\n
    \  This example shows a brief Metalink server response with .torrent and\n   .meta4:\n
    \  Link: <http://example.com/example.ext.torrent>; rel=describedby;\n   type=\"application/x-bittorrent\";
    name=\"differentname.ext\"\n   Link: <http://example.com/example.ext.meta4>; rel=describedby;\n
    \  type=\"application/metalink4+xml\"\n   Metalink clients MAY support the use
    of metainfo files for\n   downloading files.\n"
  - contents:
    - "4.1.  Metalink/XML Files\n   Metalink/XML files for a given resource MAY be
      provided in a Link\n   header field as shown in the example in Section 4.  Metalink/XML\n
      \  files are specified in [RFC5854], and they are particularly useful\n   for
      providing metadata such as cryptographic hashes of parts of a\n   file, allowing
      a client to recover from errors (see Section 7.1.2).\n   Metalink servers SHOULD
      provide Metalink/XML files with partial file\n   hashes in Link header fields,
      and Metalink clients SHOULD use them\n   for error recovery.\n"
    title: 4.1.  Metalink/XML Files
  title: 4.  Peer-to-Peer / Metainfo
- contents:
  - '5.  Signatures

    '
  - contents:
    - "5.1.  OpenPGP Signatures\n   OpenPGP signatures [RFC3156] of requested files
      are specified with\n   the Link header fields [RFC5988] and a relation type
      of \"describedby\"\n   and a type parameter of \"application/pgp-signature\".\n
      \  This example shows a brief Metalink server response with OpenPGP\n   signature
      only:\n   Link: <http://example.com/example.ext.asc>; rel=describedby;\n   type=\"application/pgp-signature\"\n
      \  Metalink clients SHOULD support the use of OpenPGP signatures.\n"
    title: 5.1.  OpenPGP Signatures
  - contents:
    - "5.2.  S/MIME Signatures\n   Secure/Multipurpose Internet Mail Extensions (S/MIME)
      signatures\n   [RFC5751] of requested files are specified with the Link header\n
      \  fields [RFC5988] and a relation type of \"describedby\" and a type\n   parameter
      of \"application/pkcs7-mime\".\n   This example shows a brief Metalink server
      response with S/MIME\n   signature only:\n   Link: <http://example.com/example.ext.p7m>;
      rel=describedby;\n   type=\"application/pkcs7-mime\"\n   Metalink clients SHOULD
      support the use of S/MIME signatures.\n"
    title: 5.2.  S/MIME Signatures
  title: 5.  Signatures
- contents:
  - "6.  Cryptographic Hashes of Whole Documents\n   If Instance Digests are not provided
    by the Metalink servers, the\n   Link header fields pertaining to this specification
    MUST be ignored.\n   This example shows a brief Metalink server response with
    ETag,\n   mirror, and cryptographic hash:\n   Etag: \"thvDyvhfIqlvFe+A9MYgxAfm1q5=\"\n
    \  Link: <http://www2.example.com/example.ext>; rel=duplicate\n   Digest: SHA-256=MWVkMWQxYTRiMzk5MDQ0MzI3NGU5NDEyZTk5OWY1ZGFmNzgyZTJlO\n
    \  DYzYjRjYzFhOTlmNTQwYzI2M2QwM2U2MQ==\n"
  title: 6.  Cryptographic Hashes of Whole Documents
- contents:
  - "7.  Client / Server Multi-Source Download Interaction\n   Metalink clients begin
    a download with a standard HTTP [RFC2616] GET\n   request to the Metalink server.
    \ Metalink clients MAY use a range\n   limit if desired.\n   GET /distribution/example.ext
    HTTP/1.1\n   Host: www.example.com\n   The Metalink server responds with the data
    and these header fields:\n   HTTP/1.1 200 OK\n   Accept-Ranges: bytes\n   Content-Length:
    14867603\n   Content-Type: application/x-cd-image\n   Etag: \"thvDyvhfIqlvFe+A9MYgxAfm1q5=\"\n
    \  Link: <http://www2.example.com/example.ext>; rel=duplicate; pref\n   Link:
    <ftp://ftp.example.com/example.ext>; rel=duplicate\n   Link: <http://example.com/example.ext.torrent>;
    rel=describedby;\n   type=\"application/x-bittorrent\"\n   Link: <http://example.com/example.ext.meta4>;
    rel=describedby;\n   type=\"application/metalink4+xml\"\n   Link: <http://example.com/example.ext.asc>;
    rel=describedby;\n   type=\"application/pgp-signature\"\n   Digest: SHA-256=MWVkMWQxYTRiMzk5MDQ0MzI3NGU5NDEyZTk5OWY1ZGFmNzgyZTJlO\n
    \  DYzYjRjYzFhOTlmNTQwYzI2M2QwM2U2MQ==\n   Alternatively, Metalink clients can
    begin with a HEAD request to the\n   Metalink server to discover mirrors via Link
    header fields and then\n   skip to making the following decisions on every available
    mirror\n   server found via the Link header fields.\n   After that, the client
    follows with a GET request to the desired\n   mirrors.\n   From the Metalink server
    response, the client learns some or all of\n   the following metadata about the
    requested object, in addition to\n   starting to receive the object:\n   o  Mirror
    locations, with optional attributes describing the mirror's\n      priority, whether
    it shares the ETag policy of the originating\n      Metalink server, geographical
    location, and mirror depth.\n   o  Instance Digest, which is the whole file cryptographic
    hash.\n   o  ETag.\n   o  Object size from the Content-Length header field.\n
    \  o  Metalink/XML, which can include partial file cryptographic hashes\n      to
    repair a file.\n   o  Peer-to-Peer information.\n   o  Digital signature.\n   Next,
    the Metalink client requests a range of the object from a\n   preferred mirror
    server, so it can use If-Match conditions:\n   GET /example.ext HTTP/1.1\n   Host:
    www2.example.com\n   Range: bytes=7433802-\n   If-Match: \"thvDyvhfIqlvFe+A9MYgxAfm1q5=\"\n
    \  Referer: http://www.example.com/distribution/example.ext\n   Metalink clients
    SHOULD use preferred mirrors, if possible, as they\n   allow early file mismatch
    detection as described in Section 7.1.1.\n   Preferred mirrors have coordinated
    ETags, as described in\n   Section 3.3, and Metalink clients SHOULD use If-Match
    conditions\n   based on the ETag to quickly detect out-of-date mirrors by using
    the\n   ETag from the Metalink server response.  Metalink clients SHOULD use\n
    \  partial file cryptographic hashes as described in Section 7.1.2, if\n   available,
    to detect if the mirror server returned the correct data.\n   Optimally, the mirror
    server also will include an Instance Digest in\n   the mirror response to the
    client GET request, which the client can\n   also use to detect a mismatch early.
    \ Metalink clients MUST reject\n   individual downloads from mirrors that support
    Instance Digests if\n   the Instance Digest from the mirror does not match the
    Instance\n   Digest as reported by the Metalink server and the same algorithm
    is\n   used.  If normal mirrors are used, then a mismatch cannot be detected\n
    \  until the completed object is verified.  Errors in transmission and\n   substitutions
    of incorrect data on mirrors, whether deliberate or\n   accidental, can be detected
    with error correction as described in\n   Section 7.1.2.\n   Here, the preferred
    mirror server has the correct file (the If-Match\n   conditions match) and responds
    with a 206 Partial Content HTTP status\n   code and appropriate \"Content-Length\",
    \"Content-Range\", ETag, and\n   Instance Digest header fields.  In this example,
    the mirror server\n   responds, with data, to the above request:\n   HTTP/1.1
    206 Partial Content\n   Accept-Ranges: bytes\n   Content-Length: 7433801\n   Content-Range:
    bytes 7433802-14867602/14867603\n   Etag: \"thvDyvhfIqlvFe+A9MYgxAfm1q5=\"\n   Digest:
    SHA-256=MWVkMWQxYTRiMzk5MDQ0MzI3NGU5NDEyZTk5OWY1ZGFmNzgyZTJlO\n   DYzYjRjYzFhOTlmNTQwYzI2M2QwM2U2MQ==\n
    \  Metalink clients MAY start a number of parallel range requests (one\n   per
    selected mirror server other than the first) using mirrors\n   provided by the
    Link header fields with \"duplicate\" relation type.\n   Metalink clients MUST
    limit the number of parallel connections to\n   mirror servers, ideally based
    on observing how the aggregate\n   throughput changes as connections are opened.
    \ It would be pointless\n   to blindly open connections once the path bottleneck
    is filled.\n   After establishing a new connection, a Metalink client SHOULD monitor\n
    \  whether the aggregate throughput increases over all connections that\n   are
    part of the download.  The client SHOULD NOT open additional\n   connections during
    this period.  If the aggregate throughput has\n   increased, the client MAY open
    an additional connection and repeat\n   these steps.  Otherwise, the client SHOULD
    NOT open a new connection\n   until an established one closes.  Metalink clients
    SHOULD use the\n   location of the original GET request in the \"Referer\" header
    field\n   for these range requests.\n   The Metalink client can determine the
    size and number of ranges\n   requested from each server, based upon the type
    and number of mirrors\n   and performance observed from each mirror.  Note that
    range requests\n   impose an overhead on servers, and clients need to be aware
    of that\n   and not abuse them.  When downloading a particular file, Metalink\n
    \  clients MUST NOT make more than one concurrent request to each mirror\n   server
    from which it downloads.\n   Metalink clients SHOULD close all but the fastest
    connection if any\n   range requests generated after the first request end up
    with a\n   complete response, instead of a partial response (as some mirrors\n
    \  might not support HTTP ranges), if the goal is the fastest transfer.\n   Metalink
    clients MAY monitor mirror conditions and dynamically switch\n   between mirrors
    to achieve the fastest download possible.  Similarly,\n   Metalink clients SHOULD
    abort extremely slow or stalled range\n   requests and finish the request on other
    mirrors.  If all ranges have\n   finished except for the final one, the Metalink
    client can split the\n   final range into multiple range requests to other mirrors
    so the\n   transfer finishes faster.\n   If the first request was a GET, no Range
    header field was sent, and\n   the client determines later that it will issue
    a range request, then\n   the client SHOULD close the first connection when it
    catches up with\n   the other parallel range requests of the same object.  This
    means the\n   first connection was sacrificed.  Metalink clients can use a HEAD\n
    \  request first, if possible, so that the client can find out if there\n   are
    any Link header fields, and then range-based requests are\n   undertaken to the
    mirror servers without sacrificing a first\n   connection.\n   Metalink clients
    MUST reject individual downloads from mirrors where\n   the file size does not
    match the file size as reported by the\n   Metalink server.\n   If a Metalink
    client does not support certain download methods (such\n   as FTP or BitTorrent)
    that a file is available from, and there are no\n   available download methods
    that the client supports, then the\n   download will have no way to complete.\n
    \  Metalink clients MUST verify the cryptographic hash of the file once\n   the
    download has completed.  If the cryptographic hash offered by the\n   Metalink
    server with Instance Digests does not match the\n   cryptographic hash of the
    downloaded file, see Section 7.1.2 for a\n   possible way to repair errors.\n
    \  If the download cannot be repaired, it is considered corrupt.  The\n   client
    can attempt to re-download the file.\n   Metalink clients that support verifying
    digital signatures MUST\n   verify digital signatures of requested files if they
    are included.\n   Digital signatures MUST validate back to a trust anchor as described\n
    \  in the validation rules in [RFC3156] and [RFC5280].\n"
  - contents:
    - "7.1.  Error Prevention, Detection, and Correction\n   Error prevention, or
      early file mismatch detection, is possible\n   before file transfers with the
      use of file sizes, ETags, and Instance\n   Digests provided by Metalink servers.
      \ Error detection requires\n   Instance Digests to detect errors in transfer
      after the transfers\n   have completed.  Error correction, or download repair,
      is possible\n   with partial file cryptographic hashes.\n   Note that cryptographic
      hashes obtained from Instance Digests are in\n   base64 encoding, while those
      from Metalink/XML are in hexadecimal.\n"
    - contents:
      - "7.1.1.  Error Prevention (Early File Mismatch Detection)\n   In HTTP terms,
        the merging of ranges from multiple responses SHOULD\n   be verified with
        a strong validator, which in this context is either\n   an Instance Digest
        or a shared ETag from that Metalink server that\n   matches with the Instance
        Digest or ETag provided by a preferred\n   mirror server.  In most cases,
        it is sufficient that the Metalink\n   server provides mirrors and Instance
        Digest information, but\n   operation will be more robust and efficient if
        the mirror servers do\n   implement a shared ETag policy or Instance Digests
        as well.  There is\n   no need to specify how the ETag is generated, just
        that it needs to\n   be shared between the Metalink server and the mirror
        servers.  The\n   benefit of having mirror servers return an Instance Digest
        is that\n   the client then can detect mismatches early even if ETags are
        not\n   used.  Mirrors that support both a shared ETag and Instance Digests\n
        \  do provide value, but just one is sufficient for early detection of\n   mismatches.
        \ If the mirror server provides neither shared ETag nor\n   Instance Digest,
        then early detection of mismatches is not possible\n   unless file length
        also differs.  Finally, errors are still\n   detectable after the download
        has completed, when the cryptographic\n   hash of the merged response is verified.\n
        \  ETags cannot be used for verifying the integrity of the received\n   content.
        \ If the ETag given by the mirror server matches the ETag\n   given by the
        Metalink server, then the Metalink client assumes the\n   responses are valid
        for that object.\n   This guarantees that a mismatch will be detected by using
        only the\n   shared ETag from a Metalink server and mirror server.  Metalink\n
        \  clients will detect an error if ETags do not match, which will\n   prevent
        accidental merges of ranges from different versions of files\n   with the
        same name.\n   A shared ETag or Instance Digest cannot strictly protect against\n
        \  malicious attacks or server or network errors replacing content.  An\n
        \  attacker can make a mirror server seemingly respond with the expected\n
        \  Instance Digest or ETags even if the file contents have been\n   modified.
        \ The same goes for various system failures, which would\n   also cause bad
        data (i.e., corrupted files) to be returned.  The\n   Metalink client has
        to rely on the Instance Digest returned by the\n   Metalink server in the
        first response for the verification of the\n   downloaded object as a whole.
        \ To verify the individual ranges, which\n   might have been requested from
        different sources, see Section 7.1.2.\n"
      title: 7.1.1.  Error Prevention (Early File Mismatch Detection)
    - contents:
      - "7.1.2.  Error Correction\n   Partial file cryptographic hashes can be used
        to detect errors during\n   the download.  Metalink servers SHOULD provide
        Metalink/XML files\n   with partial file hashes in Link header fields as specified
        in\n   Section 4.1, and Metalink clients SHOULD use them for error\n   correction.\n
        \  An error in transfer or a substitution attack will be detected by a\n   cryptographic
        hash of the object not matching the Instance Digest\n   from the Metalink
        server.  If the cryptographic hash of the object\n   does not match the Instance
        Digest from the Metalink server, then the\n   client SHOULD fetch the Metalink/XML
        (if available).  This may\n   contain partial file cryptographic hashes, which
        will allow detection\n   of which mirror server returned incorrect data.  Metalink
        clients\n   SHOULD use the Metalink/XML data to figure out what ranges of
        the\n   downloaded data can be recovered and what needs to be fetched again.\n
        \  Other methods can be used for error correction.  For example, some\n   other
        metainfo files also include partial file hashes that can be\n   used to check
        for errors.\n"
      title: 7.1.2.  Error Correction
    title: 7.1.  Error Prevention, Detection, and Correction
  title: 7.  Client / Server Multi-Source Download Interaction
- contents:
  - "8.  IANA Considerations\n   Accordingly, IANA has made the following registration
    to the \"Link\n   Relation Types\" registry at <http://www.iana.org/>.\n   o  Relation
    Name: duplicate\n   o  Description: Refers to a resource whose available representations\n
    \     are byte-for-byte identical with the corresponding representations\n      of
    the context IRI.\n   o  Reference: This specification.\n   o  Notes: This relation
    is for static resources.  That is, an HTTP\n      GET request on any duplicate
    will return the same representation.\n      It does not make sense for dynamic
    or POSTable resources and\n      should not be used for them.\n"
  title: 8.  IANA Considerations
- contents:
  - '9.  Security Considerations

    '
  - contents:
    - "9.1.  URIs and IRIs\n   Metalink clients handle URIs and Internationalized
      Resource\n   Identifiers (IRIs).  See Section 7 of [RFC3986] and Section 8 of\n
      \  [RFC3987] for security considerations related to their handling\n   and use.\n"
    title: 9.1.  URIs and IRIs
  - contents:
    - "9.2.  Spoofing\n   There is potential for spoofing attacks where the attacker
      publishes\n   Metalinks with false information.  In that case, this could deceive\n
      \  unaware downloaders into downloading a malicious or worthless file.\n   Metalink
      clients are advised to prevent loops, possibly from a mirror\n   server to a
      Metalink server and back again, in Section 2.  As with\n   all downloads, users
      should only download from trusted sources.\n   Also, malicious publishers could
      attempt a distributed denial-of-\n   service attack by inserting unrelated URIs
      into Metalinks.  [RFC4732]\n   contains information on amplification attacks
      and denial-of-service\n   attacks.\n"
    title: 9.2.  Spoofing
  - contents:
    - "9.3.  Cryptographic Hashes\n   Currently, some of the digest values defined
      in Instance Digests in\n   HTTP [RFC3230] are considered insecure.  These include
      the whole\n   Message Digest family of algorithms, which are not suitable for\n
      \  cryptographically strong verification.  Malicious people could\n   provide
      files that appear to be identical to another file because of\n   a collision;
      i.e., the weak cryptographic hashes of the intended file\n   and a substituted
      malicious file could match.\n"
    title: 9.3.  Cryptographic Hashes
  - contents:
    - "9.4.  Signing\n   Metalinks SHOULD include digital signatures, as described
      in\n   Section 5.\n   Digital signatures provide authentication and message
      integrity, and\n   enable non-repudiation with proof of origin.\n"
    title: 9.4.  Signing
  title: 9.  Security Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [BITTORRENT]  Cohen, B., \"The BitTorrent Protocol
      Specification\",\n                 BITTORRENT 11031, February 2008,\n                 <http://www.bittorrent.org/beps/bep_0003.html>.\n
      \  [FIPS-180-3]  National Institute of Standards and Technology (NIST),\n                 \"Secure
      Hash Standard (SHS)\", FIPS PUB 180-3,\n                 October 2008.\n   [ISO3166-1]
      \  International Organization for Standardization, \"ISO\n                 3166-1:2006.
      \ Codes for the representation of names of\n                 countries and their
      subdivisions -- Part 1: Country\n                 codes\", November 2006.\n
      \  [RFC0959]     Postel, J. and J. Reynolds, \"File Transfer Protocol\",\n                 STD
      9, RFC 0959, October 1985.\n   [RFC2119]     Bradner, S., \"Key words for use
      in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC2616]     Fielding, R., Gettys, J., Mogul, J., Frystyk,
      H.,\n                 Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n
      \                Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC3156]
      \    Elkins, M., Del Torto, D., Levien, R., and T. Roessler,\n                 \"MIME
      Security with OpenPGP\", RFC 3156, August 2001.\n   [RFC3230]     Mogul, J.
      and A. Van Hoff, \"Instance Digests in HTTP\",\n                 RFC 3230, January
      2002.\n   [RFC3986]     Berners-Lee, T., Fielding, R., and L. Masinter,\n                 \"Uniform
      Resource Identifier (URI): Generic Syntax\",\n                 STD 66, RFC 3986,
      January 2005.\n   [RFC3987]     Duerst, M. and M. Suignard, \"Internationalized
      Resource\n                 Identifiers (IRIs)\", RFC 3987, January 2005.\n   [RFC5280]
      \    Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n                 Housley,
      R., and W. Polk, \"Internet X.509 Public Key\n                 Infrastructure
      Certificate and Certificate Revocation\n                 List (CRL) Profile\",
      RFC 5280, May 2008.\n   [RFC5751]     Ramsdell, B. and S. Turner, \"Secure/Multipurpose\n
      \                Internet Mail Extensions (S/MIME) Version 3.2 Message\n                 Specification\",
      RFC 5751, January 2010.\n   [RFC5854]     Bryan, A., Tsujikawa, T., McNab, N.,
      and P. Poeml, \"The\n                 Metalink Download Description Format\",
      RFC 5854,\n                 June 2010.\n   [RFC5988]     Nottingham, M., \"Web
      Linking\", RFC 5988, October 2010.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC4732]     Handley, M., Ed., Rescorla,
      E., Ed., and IAB, \"Internet\n                 Denial-of-Service Considerations\",
      RFC 4732,\n                 December 2006.\n   [RFC5843]     Bryan, A., \"Additional
      Hash Algorithms for HTTP\n                 Instance Digests\", RFC 5843, April
      2010.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Acknowledgements and Contributors\n   Thanks to the Metalink community,
    Alexey Melnikov, Julian Reschke,\n   Mark Nottingham, Daniel Stenberg, Matt Domsch,
    Micah Cowan, David\n   Morris, Yves Lafon, Juergen Schoenwaelder, Ben Campbell,
    Lars Eggert,\n   Sean Turner, Robert Sparks, and the HTTPBIS Working Group.\n
    \  Thanks to Alan Ford and Mark Handley for spurring us on to publish\n   this
    document.\n   This document is dedicated to Zimmy Bryan, Juanita Anthony, and
    Janie\n   Burnett.\n"
  title: Appendix A.  Acknowledgements and Contributors
- contents:
  - "Authors' Addresses\n   Anthony Bryan\n   Pompano Beach, FL\n   USA\n   EMail:
    anthonybryan@gmail.com\n   URI:   http://www.metalinker.org\n   Neil McNab\n   EMail:
    neil@nabber.org\n   URI:   http://www.nabber.org\n   Tatsuhiro Tsujikawa\n   Shiga\n
    \  Japan\n   EMail: tatsuhiro.t@gmail.com\n   URI:   http://aria2.sourceforge.net\n
    \  Dr. med. Peter Poeml\n   MirrorBrain\n   Venloer Str. 317\n   Koeln  50823\n
    \  DE\n   Phone: +49 221 6778 333 8\n   EMail: peter@poeml.de\n   URI:   http://mirrorbrain.org/~poeml/\n
    \  Henrik Nordstrom\n   EMail: henrik@henriknordstrom.net\n   URI:   http://www.henriknordstrom.net/\n"
  title: Authors' Addresses
