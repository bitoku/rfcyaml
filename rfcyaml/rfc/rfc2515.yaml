- contents:
  - "                     Definitions of Managed Objects\n                           for
    ATM Management\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1 Abstract  .............................................
    \   2\n   2 The SNMP Network Management Framework .................    2\n   3
    ATM Terminology .......................................    3\n   3.1 VCL/VPL and
    VCC/VPC .................................    3\n   3.2 PVC, SVC and Soft PVC ...............................
    \   5\n   3.3 Traffic Management Parameters .......................    6\n   3.3.1
    Traffic Policing and Traffic Shaping  Parameters\n   3.3.2 Cell Loss Priority
    ................................    6\n   3.3.3 QoS Class .........................................
    \   6\n   3.3.4 Service Category ..................................    7\n   3.4
    Max Active and Max Current VPI and VCI Bits .........    7\n   4 Overview ..............................................
    \   8\n   4.1 Background ..........................................    8\n   4.2
    Structure of the MIB ................................    9\n   4.3 ATM Interface
    Configuration Table ...................    9\n   4.4 ATM Interface DS3 PLCP and
    TC Layer Tables ..........    9\n   4.5 ATM Virtual Link and Cross-Connect Tables
    ...........    9\n   5 Application of MIB II to ATM ..........................
    \  10\n   5.1 The System Group ....................................   10\n   5.2
    The Interface Group .................................   10\n   5.2.1 Support of
    the ATM Cell Layer by ifTable ..........   10\n   6 Support of the AAL3/4 Based
    Interfaces ................   12\n   7 Support of the AAL5 Managed Objects ...................
    \  12\n   7.1 Managing AAL5 in a Switch ...........................   12\n   7.2
    Managing AAL5 in a Host .............................   14\n   7.3 Support of
    AAL5 by ifTable ..........................   15\n   7.4 Support of Proprietary
    Virtual Interface  by  ifT-\n        able ...............................................
    \  16\n   7.5 AAL5 Connection Performance Statistics Table ........   17\n   8
    ILMI MIBs and the ATM Managed Objects .................   18\n   9 Definitions
    ...........................................   20\n   10 Acknowledgments ......................................
    \  83\n   11 References ...........................................   83\n   12
    Security Considerations ..............................   85\n   13 Author's Address
    .....................................   85\n   14 Intellectual Property ................................
    \  86\n   15 Full Copyright Statement .............................   87\n"
  title: Table of Contents
- contents:
  - "1.  Abstract\n   This memo defines a portion of the Management Information Base
    (MIB)\n   for use with network management protocols in the Internet community.\n
    \  In particular, it describes objects used for managing ATM-based\n   interfaces,
    devices, networks and services.\n   This memo replaces RFC 1695 [24].  Changes
    relative to RFC 1695 are\n   summarized in the MIB module's REVISION clause.\n
    \  Textual Conventions used in this MIB are defined in [6] and [19].\n"
  title: 1.  Abstract
- contents:
  - "2.  The SNMP Network Management Framework\n   The SNMP Management Framework presently
    consists of five major\n   components:\n   0    An overall architecture, described
    in RFC 2271 [1].\n   0    Mechanisms for describing and naming objects and events\n
    \       for the purpose of management.  The first version of this\n        Structure
    of Management Information (SMI) is called SMIv1 and\n        described in STD
    16, RFC 1155 [2], STD 16, RFC 1212 [3] and RFC\n        1215 [4].  The second
    version, called SMIv2, is described in RFC\n        1902 [5], RFC 1903 [6] and
    RFC 1904 [7].\n   0    Message protocols for transferring management information.
    \ The\n        first version of the SNMP message protocol is called SNMPv1 and\n
    \       described in STD 15, RFC 1157 [8].  A second version of the SNMP\n        message
    protocol, which is not an Internet standards track\n        protocol, is called
    SNMPv2c and described in RFC 1901 [9] and\n        RFC 1906 [10].\n        The
    third version of the message protocol is called SNMPv3 and\n        described
    in RFC 1906 [10], RFC 2272 [11] and RFC 2274 [12].\n   0    Protocol operations
    for accessing management information.  The\n        first set of protocol operations
    and associated PDU formats is\n        described in STD 15, RFC 1157 [8].  A second
    set of protocol\n        operations and associated PDU formats is described in
    RFC 1905\n        [13].\n   0    A set of fundamental applications described in
    RFC 2273 [14] and\n        the view-based access control mechanism described in
    RFC 2275\n        [15].\n   Managed objects are accessed via a virtual information
    store, termed\n   the Management Information Base or MIB.  Objects in the MIB
    are\n   defined using the mechanisms defined in the SMI.\n   This memo specifies
    a MIB module that is compliant to the SMIv2.  A\n   MIB conforming to the SMIv1
    can be produced through the appropriate\n   translations.  The resulting translated
    MIB must be semantically\n   equivalent, except where objects or events are omitted
    because no\n   translation is possible (e.g., use of Counter64).  Some machine\n
    \  readable information in SMIv2 will be converted into textual\n   descriptions
    in SMIv1 during the translation process.  However, this\n   loss of machine readable
    information is not considered to change the\n   semantics of the MIB.\n"
  title: 2.  The SNMP Network Management Framework
- contents:
  - "3.  ATM Terminology\n   Some basic ATM terminologies are described in this section
    to\n   facilitate defining the ATM managed objects.\n"
  - contents:
    - "3.1.  VCL/VPL and VCC/VPC\n   There are two distinct types of ATM virtual connections:
      Virtual\n   Channel Connections (VCCs) and Virtual Path Connection (VPCs).  As\n
      \  shown in Figures 1 and 2, ATM virtual connections consist of\n   concatenated
      series of virtual links which forms a path between two\n   end points, with
      each concatenation occurring at an ATM switch.\n   Virtual links of VCCs are
      called Virtual Channel Links (VCLs).\n   Virtual links of VPCs are called Virtual
      Path Links (VPLs). The VCI\n   and VPI fields in the ATM cell header associate
      each cell of a VCC\n   with a particular VCL over a given physical link.  The
      VPI field in\n   the ATM cell header associates each cell of a VPC with a particular\n
      \  VPL over a given physical link.  Switches route cells between VCLs\n   (or
      VPLs) via a cross-connect function according to the cells'\n   VCI/VPI (or VPI)
      values.\n     <-----------------------VCC-------------------------->\n               ------------
      \            -----------\n               |ATM       |             |ATM       |\n
      \              |X-Connect |             |X-Connect |\n        VCL1   |Point
      \    |    VCL2     |Point     |  VCL3\n     O---------|----X-----|-------|-----|----X-----|-------O\n
      \              |          |             |          |\n               ------------
      \            ------------\n                ATM Switch               ATM Switch\n
      \    Figure 1: Virtual Channel Links and\n               Virtual Channel Connection\n
      \    <-----------------------VPC-------------------------->\n               ------------
      \            -----------\n               |ATM       |             |ATM       |\n
      \              |X-Connect |             |X-Connect |\n        VPL1   |Point
      \    |    VPL2     |Point     |  VPL3\n     O---------|----X-----|-------|-----|----X-----|-------O\n
      \              |          |             |          |\n               ------------
      \            ------------\n                ATM Switch               ATM Switch\n
      \    Figure 2: Virtual Path Links and\n               Virtual Path Connection\n
      \  A single ATM end-system or switch does not support the whole end-to-\n   end
      span of a VCC (or VPC).  Rather, multiple ATM end-systems and/or\n   switches
      each support one piece of the VCC (or VPC).  That is, each\n   ATM end-system
      (or ATM switch) at one end of the VCC/VPC supports its\n   end of the VCC/VPC
      plus the VCL or VPL on its external interface, and\n   each switch through which
      the VCC/VPC passes supports the pair of\n   VCLs/VPLs on its external interfaces
      as well as the cross-connection\n   of those VCLs/VPLs. Thus, the end-to-end
      management of a VCC or VPC\n   is achieved only by appropriate management of
      its individual pieces\n   in combination.\n   Note that for management purposes,
      an ATM network may be viewed as a\n   large distributed switch by hiding all
      the network's internal\n   connectivity as being internal to the distributed
      switch (as shown in\n   Figure 2a).  This model may for example be used for
      Customer Network\n   Management (CNM) purposes.\n     <---------------------VCC--------------------------->\n
      \            --------------------------------------\n             |                                    |\n
      \            | ----------              ---------- |\n             | | ATM    |
      \             | ATM    | |\n        VCL1 | | Switch |              | Switch
      | | VCL3\n     O-------|-|--------|------/-------|--------|-|------O\n             |
      |        |              |        | |\n             | ----------              ----------
      |\n             |                                    |\n             |             ATM
      Network            |\n             --------------------------------------\n
      \    Figure 2a: ATM Network modeled as a large distributed\n                switch\n
      \  A VCC has a set of traffic characteristics (i.e., bandwidth\n   parameters,
      service category parameters, etc.).  VCLs inherit their\n   traffic characteristics
      from the VCC of which they are a part.  VCCs\n   are bi-directional by definition.
      \ However, the traffic parameters in\n   the two directions of a connection
      can be symmetric or asymmetric,\n   i.e., the two directions can have the same
      or different traffic\n   flows.  A uni-directional traffic flow across a VCC
      is achieved by\n   assigning a zero bandwidth in one direction.  Note that in
      addition\n   to the bandwidth required by the user traffic flow, bandwidth is
      also\n   required for OAM cell flows, even for the zero-bandwidth direction
      of\n   a uni-directional connection.  These same principles apply to VPCs.\n"
    title: 3.1.  VCL/VPL and VCC/VPC
  - contents:
    - "3.2.  PVC, SVC and Soft PVC\n   A Permanent Virtual Connection (PVC) is a provisioned
      VCC or VPC.  A\n   Switched Virtual Connection (SVC) is a switched VCC or VPC
      that is\n   set up in real-time via call set-up signaling procedures.  A PVC
      (or\n   an SVC) can be a point-to-point, point-to-multipoint, or multipoint-\n
      \  to-multipoint VCC or VPC.  A Soft PVC is a connection of which\n   portions
      are switched, while other portions are permanent (see Figure\n   3 and [22]).\n
      \      +--------+           +--------+           +--------+\n    pvc|  ATM   |svc
      \   svc |  ATM   |svc    svc |  ATM   |pvc\n   ----| Switch |-----------| Switch
      |-----------| Switch |----\n       +--------+           +--------+           +--------+\n
      \                 Figure 3: An example of a Soft PVC\n"
    title: 3.2.  PVC, SVC and Soft PVC
  - contents:
    - '3.3.  Traffic Management Parameters

      '
    - contents:
      - "3.3.1.  Traffic Policing and Traffic Shaping Parameters\n   In order to allocate
        resources fairly among different users, some\n   networks police traffic at
        resource access points.  The traffic\n   enforcement or policing taken at
        a UNI is called Usage Parameter\n   Control (UPC) and is conceptually activated
        on an incoming VCL or VPL\n   as shown in Figure 4.  The use of the traffic
        enforcer at the ingress\n   of the connection is to make sure that the user
        traffic does not\n   exceed the negotiated traffic parameters such as the
        peak cell rate\n   associated with a specific traffic descriptor type.\n              ----------
        \            ----------\n       UNI    |  ATM   |    NNI      |  ATM   |     UNI\n
        \       |     | switch |     |       | switch |      |\n   O<---|---->X(UPC)
        \  |<----|------>|   (UPC)X<-----|--->O\n        | VCL |        |     | VCL
        \  |        |  VCL |\n              ----------             ----------\n                  Figure
        4: An Example of a UPC\n   In addition, traffic shaping may be performed on
        an outgoing VPL or\n   VCL at a given ATM interface.  The function of the
        ATM traffic\n   shaper, conceptually either at the source or an egress point
        of the\n   connection, is to smooth the outgoing cell traffic inter-arrival\n
        \  time.  If policing or shaping is not performed then the policing or\n   shaping
        algorithm is not activated.\n"
      title: 3.3.1.  Traffic Policing and Traffic Shaping Parameters
    - contents:
      - "3.3.2.  Cell Loss Priority\n   To prioritize traffic during resource congestion,
        ATM cells are\n   assigned one of the two types of Cell Loss Priority (CLP),
        CLP=0 and\n   CLP=1.  ATM cells with CLP=0 have a higher priority in regard
        to cell\n   loss than ATM cells with CLP=1.  Therefore, during resource\n
        \  congestions, CLP=1 cells are dropped before any CLP=0 cell is\n   dropped.\n"
      title: 3.3.2.  Cell Loss Priority
    - contents:
      - "3.3.3.  QoS Class\n   RFC1695 specified that one of a number of Quality of
        Service (QoS)\n   classes is assigned to a VCC or VPC by associating the object\n
        \  atmTrafficQoSClass with each VCL or VPL.  However, new insights in\n   ATM
        traffic management have caused this object to be deprecated.\n"
      title: 3.3.3.  QoS Class
    - contents:
      - "3.3.4.  Service Category\n   Replacing QoS Class, VPLs and VCLs are qualified
        in terms of their\n   service category (atmServiceCategory). When properly
        configured, VCLs\n   (or VPLs) concatenated to form a VCC (or VPC) will all
        have the same\n   service category class as that of the VCC (or VPC).\n"
      title: 3.3.4.  Service Category
    title: 3.3.  Traffic Management Parameters
  - contents:
    - "3.4.  Max Active and Max Current VPI and VCI Bits\n   A manager may wish to
      configure the maximum number of VPI and VCI\n   bits that can be used to identify
      VPIs and VCIs on a given ATM\n   interface.  This value can be less than or
      equal to the maximum\n   number of bits supported by the interface hardware,
      and is referred\n   to in the MIB as the Max Active VPI Bits and Max Active
      VCI Bits.\n   However, a manager may not be able to configure the Max Active
      Bits\n   on both ends of an ATM link.  For example, the manager may not be\n
      \  allowed write access to the peer's MIB, or there may be hardware\n   limitations
      on the peer device.  Therefore, the two ATM devices may\n   use ILMI to negotiate
      \"Max Current\" VPI and VCI bits, which is the\n   maximum number of bits that
      both interfaces are willing to support.\n   This is illustrated in Figure 5.
      The relationship between the\n   different parameters is illustrated in Figure
      6.  Note that if ILMI\n   negotiation is not supported, then the devices have
      no choice but to\n   use the configured Max Active bits, and assume that it
      has been\n   configured to the same value on both ends of the link.\n     +--------+
      \             +--------+              +--------+\n     |  ATM   | IF a    IF
      b |  ATM   | IF c    IF d |  ATM   |\n     | Device |--------------| Device
      |--------------| Device |\n     +--------+              +--------+              +--------+\n
      \        IF a:  Max Active VPI Bits =  6  (configured)\n                Max
      Current VPI Bits = 6  (negotiated)\n         IF b:  Max Active VPI Bits =  8
      \ (configured)\n                Max Current VPI Bits = 6  (negotiated)\n         IF
      c:  Max Active VPI Bits =  8  (configured)\n                Max Current VPI
      Bits = 8  (negotiated)\n         IF d:  Max Active VPI Bits =  8  (configured)\n
      \               Max Current VPI Bits = 8  (negotiated)\n         (between IF
      a and IF b, the minimum of the two configured\n          \"Max Active VPI Bits\"
      is 6, so both interfaces set their\n          \"Max Current VPI Bits\" to 6.
      \ Since IF c and IF d both\n          are configured with \"Max Active VPI Bits\"
      of 8, they\n          set their \"Max Current VPI Bits\" to 8.)\n                                  Figure
      5\n       MSB                                                   LSB\n         +----------------------------------------------------+\n
      \        |         |         |                |               |\n         +----------------------------------------------------+\n
      \        ^         ^         ^                ^\n         |         |         |
      \               |\n    Max bits    Max Bits    Max              Max\n    supported
      \  supported   Active (config.) current (negotiated)\n    by MIB      by h/w
      \     Bits             Bits\n                                  Figure 6\n"
    title: 3.4.  Max Active and Max Current VPI and VCI Bits
  title: 3.  ATM Terminology
- contents:
  - "4.  Overview\n   ATM management objects are used to manage ATM interfaces, ATM
    virtual\n   links,  ATM cross-connects, AAL5 entities and AAL5 connections\n   supported
    by ATM hosts, ATM switches and ATM networks.  This section\n   provides an overview
    and background of how to use this MIB and other\n   potential MIBs for this purpose.\n
    \  The purpose of this memo is primarily to manage ATM PVCs.  ATM SVCs\n   are
    also represented by the management information in this MIB.\n   However, full
    management of SVCs may require additional capabilities\n   which are beyond the
    scope of this memo.\n"
  - contents:
    - "4.1.  Background\n   In addition to the MIB module defined in this memo, other
      MIB modules\n   are necessary to manage ATM interfaces, links and cross-connects.\n
      \  Examples include MIB II for general system and interface management\n   [16][17],
      the DS3 or SONET MIBs for management of physical\n   interfaces, and, as appropriate,
      MIB modules for applications that\n   make use of ATM, such as SMDS.  These
      MIB modules are outside the\n   scope of this specification.\n   The current
      specification of this ATM MIB is based on SNMPv2-SMI.\n"
    title: 4.1.  Background
  - contents:
    - "4.2.  Structure of the MIB\n   The managed ATM objects are arranged into the
      following tables:\n         (1) ATM interface configuration table\n         (2)
      ATM interface DS3 PLCP  and TC sublayer tables\n         (3) ATM traffic parameter
      table\n         (4) ATM interface virtual link (VPL/VCL) configuration\n             tables\n
      \        (5) ATM VP/VC cross-connect tables\n         (6) AAL5 connection performance
      statistics table\n   Note that, managed objects for activation/deactivation
      of OAM cell\n   flows and ATM traps notifying virtual connection or virtual
      link\n   failures are outside the scope of this memo.\n"
    title: 4.2.  Structure of the MIB
  - contents:
    - "4.3.  ATM Interface Configuration Table\n   This table contains information
      on ATM cell layer configuration of\n   local ATM interfaces on an ATM device
      in addition to the information\n   on such interfaces contained in the ifTable.\n"
    title: 4.3.  ATM Interface Configuration Table
  - contents:
    - "4.4.  ATM Interface DS3 PLCP and TC Layer Tables\n   These tables provide performance
      statistics of the DS3 PLCP and TC\n   sublayer of local ATM interfaces on a
      managed ATM device.  DS3 PLCP\n   and TC sublayer are currently used to carry
      ATM cells respectively\n   over DS3 and SONET transmission paths.\n"
    title: 4.4.  ATM Interface DS3 PLCP and TC Layer Tables
  - contents:
    - "4.5.  ATM Virtual Link and Cross-Connect Tables\n   ATM virtual link and cross-connect
      tables model bi-directional ATM\n   virtual links and ATM cross-connects.  The
      ATM VP/VC link tables are\n   implemented in an ATM host, ATM switch and ATM
      network.  The ATM\n   switch and ATM network also implement the ATM VP/VC cross-connect\n
      \  tables.  Both link and cross-connect tables are implemented in a\n   carrier's
      network for Customer Network Management (CNM) purposes.\n   The ATM virtual
      link tables are used to create, delete or modify ATM\n   virtual links in an
      ATM host, ATM switch and ATM network.  ATM\n   virtual link tables along with
      the cross-connect tables are used to\n   create, delete or modify ATM cross-connects
      in an ATM switch or ATM\n   network (e.g., for CNM purposes).\n   For a PVC,
      the cross-connect between two VPLs is represented in the\n   atmVpCrossConnectTable
      of the ATM-MIB, indexed by the\n   atmVplCrossConnectIdentifier values for the
      two VPLs, and the cross-\n   rconnect between two VCLs is represented in the\n
      \  atmVcCrossConnectTable of the ATM-MIB, indexed by the\n   atmVclCrossConnectIdentifier
      values for the two VCLs.\n   For an SVC or Soft PVC the VPL and VCL tables defined
      in this memo\n   are used. Hoewever, for an SVC or Soft PVC the cross-connect
      between\n   two VPLs is represented in the atmSvcVpCrossConnectTable of the\n
      \  ATM2-MIB, indexed by the atmVplCrossConnectIdentifier values for the\n   two
      VPLs, and the cross-connect between two VCLs is represented in\n   the atmSvcVcCrossConnectTable
      of the ATM2-MIB, indexed by the\n   atmVclCrossConnectIdentifier values for
      the two VCLs.\n   Note: The ATM2-MIB module was being defined in a separate
      memo at the\n   time of this publication. Please consult the RFC directory for
      an\n   exact reference.\n"
    title: 4.5.  ATM Virtual Link and Cross-Connect Tables
  title: 4.  Overview
- contents:
  - '5.  Application of MIB II to ATM

    '
  - contents:
    - "5.1.  The System Group\n   For the purposes of the sysServices object in the
      System Group of MIB\n   II [16], ATM is a data link layer protocol.  Thus, for
      ATM switches\n   and ATM networks, sysServices will have the value \"2\".\n"
    title: 5.1.  The System Group
  - contents:
    - "5.2.  The Interface Group\n   The Interfaces Group of MIB II defines generic
      managed objects for\n   managing interfaces.  This memo contains the media-specific\n
      \  extensions to the Interfaces Group for managing ATM interfaces.\n   This
      memo assumes the interpretation of the Interfaces Group to be in\n   accordance
      with [17] which states that the interfaces table (ifTable)\n   contains information
      on the managed resource's interfaces and that\n   each sub-layer below the internetwork
      layer of a network interface is\n   considered an interface.  Thus, the ATM
      cell layer interface is\n   represented as an entry in the ifTable.  This entry
      is concerned with\n   the ATM cell layer as a whole, and not with individual
      virtual\n   connections which are managed via the ATM-specific managed objects\n
      \  specified in this memo.  The inter-relation of entries in the ifTable\n   is
      defined by Interfaces Stack Group defined in [17].\n"
    - contents:
      - "5.2.1.  Support of the ATM Cell Layer by ifTable\n   Some specific interpretations
        of ifTable for the ATM cell layer\n   follow.\n   Object     Use for the generic
        ATM layer\n   ======     =============================\n   ifIndex    Each
        ATM port is represented by an ifEntry.\n   ifDescr    Description of the ATM
        interface.\n   ifType     The value that is allocated for ATM is 37.\n   ifSpeed
        \   The total bandwidth in bits per second\n              for use by the ATM
        layer.\n   ifPhysAddress  The interface's address at the ATM protocol\n              sublayer;
        the ATM address which would be used as the value\n              of the Called
        Party Address Information Element (IE) of a\n              signalling message
        for a connection which either:\n              - would terminate at this interface,
        or\n              - for which the Called Party Address IE\n                would
        need to be replaced by the Called Party SubAddress\n                IE before
        the message was forwarded to any other\n                interface.\n              For
        an interface on which signalling is not supported,\n              then the
        interface does not necessarily have an address,\n              but if it does,
        then ifPhysAddress is the address which\n              would be used as above
        in the event that signalling were\n              supported.  If the interface
        has multiple such addresses,\n              then ifPhysAddress is its primary
        address. If the\n              interface has no addresses, then ifPhysAddress
        is an octet\n              string of zero length.  Address encoding is as
        per [20].\n              Note that addresses assigned for purposes other than
        those\n              listed above (e.g., an address associated with the service\n
        \             provider side of a public network UNI) may be represented\n
        \             through atmInterfaceSubscrAddress.\n   ifAdminStatus  See [17].\n
        \  ifOperStatus   Assumes the value down(2) if the ATM cell\n              layer
        is down.\n   ifLastChange   See [17].\n   ifInOctets     The number of received
        octets over the\n              interface, i.e., the number of received, assigned
        cells\n              multiplied by 53.\n   ifOutOctets    The number of transmitted
        octets over the interface,\n              i.e., the number of transmitted,
        assigned cells multiplied\n              by 53.\n   ifInErrors     The number
        of cells dropped due to uncorrectable HEC\n              errors.\n   ifInUnknownProtos
        The number of received cells discarded during cell\n              header validation,
        including cells with unrecognized\n              VPI/VCI values, and cells
        with invalid cell header\n              patterns.  If cells with undefined
        PTI values are\n              discarded, they are also counted here.\n   ifOutErrors
        \   See [17].\n   ifName     Textual name (unique on this system) of the\n
        \             interface or an octet string of zero length.\n   ifLinkUpDownTrapEnable
        \ Default is disabled (2).\n   ifConnectorPresent      Set to false (2).\n
        \  ifHighSpeed    See [17].\n   ifHCInOctets   The 64-bit version of ifInOctets;
        supported\n              if required by the compliance statements in [17].\n
        \  ifHCOutOctets  The 64-bit version of ifOutOctets; supported\n              if
        required by the compliance statements in [17].\n   ifAlias        The non-volatile
        'alias' name for the interface\n              as specified by a network manager.\n"
      title: 5.2.1.  Support of the ATM Cell Layer by ifTable
    title: 5.2.  The Interface Group
  title: 5.  Application of MIB II to ATM
- contents:
  - "6.  Support of the AAL3/4 Based Interfaces\n   For the management of AAL3/4 CPCS
    layer, see [18].\n"
  title: 6.  Support of the AAL3/4 Based Interfaces
- contents:
  - "7.  Support of the AAL5 Managed Objects\n   Support of AAL5 managed objects in
    an ATM switch and ATM host are\n   described below.\n"
  - contents:
    - "7.1.  Managing AAL5 in a Switch\n   Managing AAL5 in a switch involves:\n        (1)
      performance management of an AAL5 entity as\n            an internal resource
      in a switch\n        (2) performance management of AAL5 per virtual connection\n
      \  AAL5 in a switch is modeled as shown in Figure 7 and 8.  AAL5 will be\n   managed
      in a switch for only those virtual connections that carry\n   AAL5 and are terminated
      at the AAL5 entity in the switch.  Note that,\n   the virtual channels within
      the ATM UNIs carrying AAL5 will be\n   switched by the ATM switching fabric
      (termed as ATM Entity in the\n   figure) to the virtual channels on a proprietary
      internal interface\n   associated with the AAL5 process (termed as AAL5 Entity
      in the\n   figure). Therefore, performance management of the AAL5 resource in\n
      \  the switch will be modeled using the ifTable through an internal\n   (pseudo-ATM)
      virtual interface and the AAL5 performance management\n   per virtual connection
      will be supported using an additional AAL5\n   connection table in the ATM MIB.
      \ The association between the AAL5\n   virtual link at the proprietary virtual,
      internal interface and the\n   ATM virtual link at the ATM interface will be
      derived from the\n   virtual channel cross-connect table and the virtual channel
      link\n   table in the ATM MIB. Note that for the proprietary virtual interface\n
      \  the traffic transmit and receive conventions in the virtual channel\n   link
      table are as follows:\n      Transmitting traffic:  ATM Entity     --->  AAL5
      Entity\n      Receiving traffic:     ATM Entity     <---  AAL5 Entity\n                 ___________________________\n
      \                |                         |\n                 |     =============
      \      |\n                 |     |    AAL5   |       |\n                 |     |
      \  Entity  |       |\n                 |     =============       |\n                 |
      \          |             |\n                 |         -----Prop. Virtual Interface\n
      \                |           |             |\n                 |     =============
      \      |\n                 |     |   ATM     |       |\n                 |     |
      \ Entity   |       |\n                 |     =============       |\n                 |_____|__|__|__|__|_______|\n
      \                      |  |  |  |  |\n                      ----------------
      ATM UNIs\n                       |  |  |  |  |\n                       |  |
      \ |  |  |\n                       v  v  v  v  v\n         Figure 7: Model of
      an AAL5 Entity in a Switch\n                     __________________\n                     |
      \               |\n                     |   AAL5         |\n                     |________________|\n
      \                    |                |\n                     | Prop. Virtual
      \ |\n                     |  Interface     |\n                     |________________|\n
      \       Figure 8: AAL5 Entity's Interface Stack in a Switch\n"
    title: 7.1.  Managing AAL5 in a Switch
  - contents:
    - "7.2.  Managing AAL5 in a Host\n   Managing AAL5 in a host involves managing
      the AAL5 sublayer interface\n   as shown in Figure 9 and 10.  The AAL5 sublayer
      is stacked directly\n   over the ATM sublayer.  The ifTable is applied to the
      AAL5 sublayer\n   as defined in Section 10.3.\n                 ___________________________\n
      \                |                         |\n                 |     =============
      \      |\n                 |     |    AAL5   |       |\n                 |     |
      \  Entity  |       |\n                 |     =============       |\n                 |
      \    |   ATM     |       |\n                 |     |  Entity   |       |\n                 |
      \    =============       |\n                 |___________|_____________|\n                             |\n
      \                          __|__ ATM UNI\n                             |\n                             |\n
      \                            v\n         Figure 9: Model of an AAL5 Entity in
      a Host\n                     __________________\n                     |                |\n
      \                    |   AAL5         |\n                     |________________|\n
      \                    |                |\n                     |   ATM Layer
      \   |\n                     |________________|\n                     |                |\n
      \                    |  Physical Layer|\n                     |________________|\n
      \         Figure 10: AAL5 Entity's Interface Stack in a Host\n"
    title: 7.2.  Managing AAL5 in a Host
  - contents:
    - "7.3.  Support of AAL5 by ifTable\n   The AAL5 entity in an ATM device (e.g.,
      switch or host) is managed\n   using the ifTable.  There are additional counters
      specified for AAL5\n   than those specified in the ATM B-ICI document [21].
      \ Specific\n   interpretations of ifTable for the AAL5 CPCS layer are as follows.\n
      \  Object   Use for AAL5 CPCS layer entity\n   ======   ==============================\n
      \  ifIndex  Each AAL5 entity is represented by an ifEntry.\n   ifDescr  Description
      of the AAL5 entity.\n   ifType   The value that is allocated for AAL5 is 49.\n
      \  ifMtu    Set to the largest PDU size for the\n            AAL5 CPCS layer
      that can be processed\n            by the AAL5 entity.\n   ifSpeed  Set to 0.\n
      \  ifPhysAddress   An octet string of zero length.\n   ifAdminStatus   See [17].\n
      \  ifOperStatus    Assumes the value down(2) if the AAL5\n            layer
      is down.\n   ifLastChange    See [17].\n   ifInOctets      The number of received
      AAL5 CPCS PDU octets.\n   ifOutOctets     The number of AAL5 CPCS PDU octets\n
      \           transmitted.\n   ifInUcastPkts   The number of received AAL5 CPCS
      PDUs passed\n            to a higher-layer.\n   ifOutUcastPkts  The number of
      AAL5 CPCS PDUs received from a\n            higher-layer for transmission.\n
      \           [Note:  The number of AAL5 PDUs actually\n            transmitted
      is the number received from a\n            higher-layer for transmission minus
      any which\n            are counted by ifOutErrors and ifOutDiscards.]\n   ifInErrors
      \     Number of errored AAL5 CPCS PDUs received.\n            The types of errors
      counted include  CRC-32 errors,\n            SAR time-out errors, and oversized
      SDU errors.\n   ifInUnknownProtos Set to 0.\n   ifInDiscards    Number of received
      AAL5 CPCS PDUs discarded.\n            Possible reason may be input buffer overflow.\n
      \  ifOutErrors     Number of AAL5 CPCS PDUs that could not\n            be transmitted
      due to errors.\n   ifOutDiscards   Number of AAL5 CPCS PDUs received for\n            transmission
      that are discarded.\n            Possible reason may be output buffer\n            overflow.\n
      \  ifInMulticastPkts  Set to 0.\n   ifInBroadcastPkts  Set to 0.\n   ifOutMulticastPkts
      Set to 0.\n   ifOutBroadcastPkts Set to 0.\n   ifName   Textual name (unique
      on this system) of the\n            AAL5 entity or an octet string of zero length.\n
      \  ifHighSpeed       Set to 0.\n   ifConnectorPresent Set to false (2).\n   ifPromiscuousMode
      Set to false(2).\n   ifLinkUpDownTrapEnable     Default is disabled (2).\n   ifAlias
      \       The non-volatile 'alias' name for the interface\n              as specified
      by a network manager.\n"
    title: 7.3.  Support of AAL5 by ifTable
  - contents:
    - "7.4.  Support of Proprietary Virtual Interface by ifTable\n   Specific interpretations
      of ifTable for the proprietary virtual,\n   internal interface associated with
      an AAL5 entity in an ATM switch\n   are as follows.\n   Object   Use for proprietary
      virtual, internal interface\n            associated with AAL entities\n   ======
      \  ===============================================\n   ifIndex  Each proprietary
      virtual, internal interface\n            associated with AAL entities is represented
      by an\n            ifEntry.\n   ifDescr  Description of the proprietary virtual,
      internal\n            interface associated with AAL entities.\n   ifType   The
      value that is allocated for proprietary\n            virtual, internal interface
      is 53.\n   ifSpeed  See [17].  Set to 0 if the speed is not\n            known.\n
      \  ifPhysAddress   See [17]. An octet string of zero length\n            if
      no address is used for this interface.\n   ifAdminStatus   See [17].\n   ifOperStatus
      \   See [17].\n   ifLastChange    See [17].\n   ifName   Textual name (unique
      on this system) of the\n            interface or an octet string of zero length.\n
      \  ifHighSpeed     See [17]. Set to 0 if the speed is not known.\n   ifConnectorPresent
      \ Set to false (2).\n   ifLinkUpDownTrapEnable     Default is disabled (2).\n
      \  ifAlias        The non-volatile 'alias' name for the interface\n                  as
      specified by a network manager.\n"
    title: 7.4.  Support of Proprietary Virtual Interface by ifTable
  - contents:
    - "7.5.  AAL5 Connection Performance Statistics Table\n   An AAL5 connection table
      is used to provide AAL5 performance\n   information for each AAL5 virtual connection
      that is terminated at\n   the AAL5 entity contained within an ATM switch or
      host.\n"
    title: 7.5.  AAL5 Connection Performance Statistics Table
  title: 7.  Support of the AAL5 Managed Objects
- contents:
  - "8.  ILMI MIBs and the ATM Managed Objects\n   The ILMI MIBs are specified by
    the ATM Forum as a set of several\n   MIBs, all currently defined in the ILMI
    Specification [23]. The ILMI\n   protocols and MIBs allow two connected ATM Interface
    Management\n   Entities (IMEs) to exchange bi-directional parameters, mainly to\n
    \  facilitate auto-configuration between ATM peer entities.  The support\n   of
    the ATM management functions by the ILMI MIBs and those contained\n   in this
    memo are compared in Table 1.  In this table, \"yes\" in the\n   \"ILMI MIBs\"
    \ column indicates that the management functions are\n   supported by the ILMI
    MIBs.  The parenthesized numbers in the \"This\n   memo\" column correspond to
    the sets of tables enumerated in Section\n   6.2.\n   For that subset of management
    information which the ILMI MIBs and\n   this memo have in common, every effort
    has been made to retain\n   identical semantics and syntax, even though the MIB
    objects are\n   identified using different OBJECT IDENTIFIERs.\n                Table
    1 - Structuring of ATM Managed Objects\n   ______________________________________________________________\n
    \                |                                 |This   |ILMI|\n   ATM Mgmt.Inf.
    |ATM Managed Objects              |memo   |MIBs|\n   ______________|_________________________________|_______|____|\n
    \  Local Interface Information:\n   _____________________________________________________________\n
    \  ATM interface:| (1) port identifier             |ATM MIB|    |\n   physical
    layer| (2) physical transmission types |   (1)*|yes |\n   configuration | (3)
    operational status          |MIB II | *  |\n                 | (4) administrative
    status       |       | ** |\n                 | (5) last change status          |
    \      |    |\n   _____________________________________________________________\n
    \  ATM interface:| (1) active VPI/VCI fields       |ATM MIB|    |\n   cell layer
    \   | (2) maximum number of VPCs/VCCs |   (1) |yes |\n   configuration | (3) configured
    VPCs/VCCs        |       | ** |\n                 | (4) ILMI VPI/VCI values         |
    \      |    |\n                 | (5) Neighbor system info        |       |    |\n
    \                | (6) Max. number of VPI/VCI bits |       |yes |\n                 |
    (7) ATM Subscribed Address      |       |    |\n   _____________________________________________________________\n
    \  ATM interface:|(1) received/transmitted cells   |       |    |\n   cell layer
    \   |(2) cells with HEC error         |MIB II |yes |\n   performance   |(3) cell
    header validation errors|       |    |\n   _____________________________________________________________\n
    \  _____________________________________________________________\n   ATM interface:|(1)DS3
    PLCP severely errored     |ATM MIB|    |\n   PLCP & TC     |   framing seconds
    \              |    (2)|    |\n   layer         |(2)DS3 PLCP unavailable seconds
    \ |       |no  |\n   performance   |(3)DS3 PLCP alarm state          |       |
    \   |\n                 |(4)out of cell delineation events|       |    |\n                 |(5)TC
    alarm state                |       |    |\n   _____________________________________________________________\n
    \  VP/VC link:   |(1)VPI or VPI/VCI value          |ATM MIB|    |\n   configuration
    |(2)VCL or VPL operational status |  (3,4)|yes |\n                 |(3)VCL/VPL
    administrative status |       |*** |\n                 |(4)VCL/VPL last change
    status    |       |    |\n                 |(5)transmit/receive traffic/     |
    \      |    |\n                 |   service category parameters   |       |    |\n
    \                |(6)AAL type                      |       |    |\n                 |(7)transmit/receive
    AAL5 SDU size|       |    |\n                 |(8)AAL5 encapsulation type       |
    \      |    |\n                 |(9)connection topology type      |       |    |\n
    \                |(10)use of call control          |       |    |\n   _____________________________________________________________\n
    \  VP/VC         |(1)cross-connect identifier      |       |    |\n   Cross-connect:|(2)port
    identifier of one        |       |    |\n   configuration |   end                           |
    \      |    |\n                 |(3)port identifier of the other  |ATM MIB|    |\n
    \                |   end                           |    (5)|no  |\n                 |(4)VPI
    or VPI/VCI value          |       |    |\n                 |   of one end                    |
    \      |    |\n                 |(5)VPI or VPI/VCI value of       |       |    |\n
    \                |   the other end                 |       |    |\n                 |(6)VC/VP
    cross-connect           |       |    |\n                 |   operational status
    \           |       |    |\n                 |(7)VC/VP cross-connect           |
    \      |    |\n                 |   administrative status         |       |    |\n
    \                |(8)VC/VP last change status      |       |    |\n   _____________________________________________________________\n
    \  VCC AAL5 CPCS |(1)PDUs discarded for CRC errors |ATM MIB|    |\n   layer:        |(2)PDUs
    discarded due to         |   (6) |    |\n   performance   |   reassembly time
    out           |       |no  |\n                 |(3)PDUs discarded due to large
    \  |       |    |\n                 |   SDUs                          |       |
    \   |\n   _____________________________________________________________\n   AAL5
    entity:  |(1)received/transmitted PDUs     |       |    |\n                 |(2)PDUs
    discarded due to         |       |    |\n                 |   protocol errors
    \              |MIB II |no  |\n                 |(3)a set of configuration/state
    \ |       |    |\n                 |   parameters                    |       |
    \   |\n   _____________________________________________________________\n   *The
    operational, administrative, and last change status of the ATM\n   interface and
    the physical transmission type shall be supported by\n   the interface table in
    MIB II [16][17].  ILMI does not contain the\n   administrative and last change
    status of the ATM interface.\n   ** The ILMI MIB contains read-only objects for
    various parameters at\n   the ATM interface level.\n   ***The ILMI MIBs contain
    local and end-to-end operational status of\n   the VPC/VCC segment.  However,
    it does not contain the VPC/VCC\n   administrative and last change status and
    the VCC AAL information.\n"
  title: 8.  ILMI MIBs and the ATM Managed Objects
- contents:
  - "9.  Definitions\n     ATM-MIB DEFINITIONS ::= BEGIN\n     IMPORTS\n        MODULE-IDENTITY,
    OBJECT-TYPE,\n        Counter32, Integer32, IpAddress, mib-2\n            FROM
    SNMPv2-SMI\n        DisplayString, RowStatus, TruthValue\n            FROM SNMPv2-TC\n
    \       MODULE-COMPLIANCE, OBJECT-GROUP\n            FROM SNMPv2-CONF\n        InterfaceIndex,
    ifIndex\n            FROM IF-MIB\n        AtmAddr, AtmConnKind, AtmConnCastType,\n
    \       AtmServiceCategory, AtmTrafficDescrParamIndex,\n        AtmVpIdentifier,
    AtmVcIdentifier,\n        AtmVorXAdminStatus, AtmVorXLastChange,\n        AtmVorXOperStatus,
    atmNoClpNoScr\n            FROM ATM-TC-MIB;\n     atmMIB MODULE-IDENTITY\n          LAST-UPDATED
    \"9810191200Z\"\n          ORGANIZATION \"IETF AToM MIB Working Group\"\n          CONTACT-INFO\n
    \           \"          Kaj Tesink\n              Postal:  Bellcore\n                       331
    Newman Springs Road\n                       Red Bank, NJ 07701\n              Tel:
    \    732-758-5254\n              Fax:     732-758-2269\n              E-mail:
    \ kaj@bellcore.com\"\n          DESCRIPTION\n           \"This is the MIB Module
    for ATM and AAL5-related\n            objects for managing ATM interfaces, ATM
    virtual\n            links, ATM cross-connects, AAL5 entities, and\n            and
    AAL5 connections.\"\n          REVISION      \"9810191200Z\"\n          DESCRIPTION\n
    \          \"The initial revision of this module was published\n            as
    RFC 1695. Key revisions include:\n            o  Textual Conventions and OBJECT
    IDENTITIES have\n               been moved to a separate MIB module.\n            o
    \ Applicability of objects to PVCs, SVCs and Soft\n               PVCs has been
    clarified.\n            o  DEFVAL clauses have been added.\n            o  The
    relationship of ifIndex values with different\n               layers and sublayers
    related to ATM has been\n               clarified.\n            o  atmTrafficQosClass
    has been deprecated\n               and replaced with atmServiceCategory.\n            o
    \ atmInterfaceCurrentMaxVpiBits and\n               atmInterfaceCurrentMaxVciBits
    have been added with\n               a description on their relationship with
    other\n               objects.\n            o  atmInterfaceAddressType and atmInterfaceAdminAddress\n
    \              have been deprecated and replaced by\n               atmInterfaceSubscrAddress.\n
    \           o  atmInterfaceTCAlarmState has been clarified.\n            o  atmTrafficDescrParamIndexNext
    has been introduced\n               in order to provide a manager a free\n               atmTrafficDescrParamIndex
    value.\n            o  The atmTrafficFrameDiscard capability has been added.\n
    \           o  A connection topology type (atmVpl/VclCastType) and\n               a
    call control type (atmVpl/VclConnKind) have been\n               added.\n            o
    \ aal2 has been added to atmVccAalType.\"\n          REVISION      \"9406072245Z\"\n
    \         DESCRIPTION\n           \"The RFC1695 version of this MIB module.\"\n
    \         ::= { mib-2 37 }\n     atmMIBObjects  OBJECT IDENTIFIER ::= {atmMIB
    1}\n     -- {atmMIBObjects 1} has been moved to a separate\n     -- specification
    [19].\n     -- This ATM MIB Module consists of the following tables:\n     --
    (1) ATM Interface configuration table\n     -- (2) ATM Interface DS3 PLCP table\n
    \    -- (3) ATM Interface TC Sublayer table\n     -- (4) Atm Traffic Descriptor
    table\n     -- (5) ATM Interface VPL configuration table\n     -- (6) ATM Interface
    VCL configuration table\n     -- (7) ATM VP Cross Connect table (for PVCs)\n     --
    (8) ATM VC Cross Connect table (for PVCs)\n     -- (9) ATM Interface AAL5 VCC
    performance statistics\n     --     table\n     --    ATM Interface Configuration
    Parameters Table\n     -- This table contains ATM specific\n     -- configuration
    information associated with\n     -- an ATM interface beyond those\n     -- supported
    using the ifTable.\n     atmInterfaceConfTable  OBJECT-TYPE\n          SYNTAX
    \        SEQUENCE OF AtmInterfaceConfEntry\n          MAX-ACCESS     not-accessible\n
    \         STATUS         current\n          DESCRIPTION\n           \"This table
    contains ATM local interface\n            configuration parameters, one entry
    per ATM\n            interface port.\"\n          ::= { atmMIBObjects 2 }\n     atmInterfaceConfEntry
    \   OBJECT-TYPE\n          SYNTAX         AtmInterfaceConfEntry\n          MAX-ACCESS
    \    not-accessible\n          STATUS         current\n          DESCRIPTION\n
    \          \"This list contains ATM interface configuration\n            parameters
    and state variables and is indexed\n            by ifIndex values of ATM interfaces.\"\n
    \         INDEX { ifIndex }\n          ::= { atmInterfaceConfTable  1}\n     AtmInterfaceConfEntry
    \   ::= SEQUENCE  {\n          atmInterfaceMaxVpcs             INTEGER,\n          atmInterfaceMaxVccs
    \            INTEGER,\n          atmInterfaceConfVpcs            INTEGER,\n          atmInterfaceConfVccs
    \           INTEGER,\n          atmInterfaceMaxActiveVpiBits    INTEGER,\n          atmInterfaceMaxActiveVciBits
    \   INTEGER,\n          atmInterfaceIlmiVpi             AtmVpIdentifier,\n          atmInterfaceIlmiVci
    \            AtmVcIdentifier,\n          atmInterfaceAddressType         INTEGER,\n
    \         atmInterfaceAdminAddress        AtmAddr,\n          atmInterfaceMyNeighborIpAddress
    IpAddress,\n          atmInterfaceMyNeighborIfName    DisplayString,\n          atmInterfaceCurrentMaxVpiBits
    \  INTEGER,\n          atmInterfaceCurrentMaxVciBits   INTEGER,\n          atmInterfaceSubscrAddress
    \      AtmAddr\n               }\n     atmInterfaceMaxVpcs OBJECT-TYPE\n          SYNTAX
    \        INTEGER  (0..4096)\n          MAX-ACCESS     read-write\n          STATUS
    \        current\n          DESCRIPTION\n           \"The maximum number of VPCs
    (PVPCs and SVPCs)\n            supported at this ATM interface. At the ATM UNI,\n
    \           the maximum number of VPCs (PVPCs and SVPCs)\n            ranges from
    0 to 256 only.\"\n          ::= { atmInterfaceConfEntry 1}\n     atmInterfaceMaxVccs
    OBJECT-TYPE\n          SYNTAX         INTEGER  (0..65536)\n          MAX-ACCESS
    \    read-write\n          STATUS         current\n          DESCRIPTION\n           \"The
    maximum number of VCCs (PVCCs and SVCCs)\n            supported at this ATM interface.\"\n
    \         ::= { atmInterfaceConfEntry 2}\n     atmInterfaceConfVpcs  OBJECT-TYPE\n
    \         SYNTAX         INTEGER  (0..4096)\n          MAX-ACCESS     read-only\n
    \         STATUS         current\n          DESCRIPTION\n           \"The number
    of VPCs (PVPC, Soft PVPC and SVPC)\n            currently in use at this ATM interface.
    \ It includes\n            the number of PVPCs and Soft PVPCs that are configured\n
    \           at the interface, plus the number of SVPCs\n            that are currently
    \ established at the\n            interface.\n            At the ATM UNI, the
    configured number of\n            VPCs (PVPCs and SVPCs) can range from\n            0
    to 256 only.\"\n          ::= { atmInterfaceConfEntry 3}\n     atmInterfaceConfVccs
    \ OBJECT-TYPE\n          SYNTAX         INTEGER  (0..65536)\n          MAX-ACCESS
    \    read-only\n          STATUS         current\n          DESCRIPTION\n           \"The
    number of VCCs (PVCC, Soft PVCC and SVCC)\n            currently in use at this
    ATM interface.  It includes\n            the number of PVCCs and Soft PVCCs that
    are configured\n            at the interface, plus the number of SVCCs\n            that
    are currently  established at the\n            interface.\"\n          ::= { atmInterfaceConfEntry
    4}\n     atmInterfaceMaxActiveVpiBits  OBJECT-TYPE\n          SYNTAX         INTEGER
    (0..12)\n          MAX-ACCESS     read-write\n          STATUS         current\n
    \         DESCRIPTION\n           \"The  maximum number of active VPI bits\n            configured
    for use at the ATM interface.\n            At the ATM UNI, the maximum number
    of active\n            VPI bits configured for use ranges from\n            0
    to 8 only.\"\n          ::= { atmInterfaceConfEntry 5}\n     atmInterfaceMaxActiveVciBits
    \ OBJECT-TYPE\n          SYNTAX         INTEGER (0..16)\n          MAX-ACCESS
    \    read-write\n          STATUS         current\n          DESCRIPTION\n           \"The
    maximum number of active VCI bits\n            configured for use at this ATM
    interface.\"\n          ::= { atmInterfaceConfEntry 6}\n     atmInterfaceIlmiVpi
    OBJECT-TYPE\n          SYNTAX         AtmVpIdentifier\n          MAX-ACCESS     read-write\n
    \         STATUS         current\n          DESCRIPTION\n           \"The VPI
    value of the VCC supporting\n            the ILMI at this ATM interface.  If the
    values of\n            atmInterfaceIlmiVpi and atmInterfaceIlmiVci are\n            both
    equal to zero then the ILMI is not\n            supported at this ATM interface.\"\n
    \         DEFVAL { 0 }\n          ::= { atmInterfaceConfEntry 7}\n     atmInterfaceIlmiVci
    OBJECT-TYPE\n          SYNTAX         AtmVcIdentifier\n          MAX-ACCESS     read-write\n
    \         STATUS         current\n          DESCRIPTION\n           \"The VCI
    value of the VCC supporting\n            the ILMI at this ATM interface.  If the
    values of\n            atmInterfaceIlmiVpi and atmInterfaceIlmiVci are\n            both
    equal to zero then the ILMI is not\n            supported at this ATM interface.\"\n
    \         DEFVAL { 16 }\n          ::= { atmInterfaceConfEntry 8}\n     atmInterfaceAddressType
    \ OBJECT-TYPE\n          SYNTAX         INTEGER {\n                            private(1),\n
    \                           nsapE164(2),\n                            nativeE164(3),\n
    \                           other(4)\n                              }\n          MAX-ACCESS
    \    read-only\n          STATUS         deprecated\n          DESCRIPTION\n           \"The
    type of primary ATM address configured\n            for use at this ATM interface.\"\n
    \         ::= { atmInterfaceConfEntry 9 }\n     --  The atmInterfaceAdminAddress
    object has been replaced by\n     --  atmInterfaceSubscrAddress.\n     atmInterfaceAdminAddress
    OBJECT-TYPE\n          SYNTAX         AtmAddr\n          MAX-ACCESS     read-only\n
    \         STATUS         deprecated\n          DESCRIPTION\n           \"The primary
    address assigned for administrative purposes,\n            for example, an address
    associated with the\n            service provider side of a public network UNI\n
    \           (thus, the value of this address corresponds\n            with the
    value of ifPhysAddress at the host side).\n            If this interface has no
    assigned administrative\n            address, or when the address used for\n            administrative
    purposes is the same as that used\n            for ifPhysAddress, then this is
    an octet string of\n            zero length.\"\n          ::= { atmInterfaceConfEntry
    10 }\n     atmInterfaceMyNeighborIpAddress OBJECT-TYPE\n          SYNTAX         IpAddress\n
    \         MAX-ACCESS     read-write\n          STATUS         current\n          DESCRIPTION\n
    \          \"The IP address of the neighbor system connected to\n            the
    \ far end of this interface, to which a Network\n            Management Station
    can send SNMP messages, as IP\n            datagrams sent to UDP port 161, in
    order to access\n            network management information concerning the\n            operation
    of that system.  Note that the value\n            of this object may be obtained
    in different ways,\n            e.g., by manual configuration, or through ILMI\n
    \           interaction with the neighbor system.\"\n          ::= { atmInterfaceConfEntry
    11 }\n     atmInterfaceMyNeighborIfName OBJECT-TYPE\n          SYNTAX         DisplayString\n
    \         MAX-ACCESS     read-write\n          STATUS         current\n          DESCRIPTION\n
    \          \"The textual name of the interface on the neighbor\n            system
    on the far end of this interface, and to\n            which this interface connects.
    \ If the neighbor\n            system is manageable through SNMP and supports\n
    \           the object ifName, the value of this object must\n            be identical
    with that of ifName for the ifEntry\n            of the lowest level physical
    interface\n            for this port.  If this interface does not have a\n            textual
    name, the value of this object is a zero\n            length string.  Note that
    the value of this object\n            may be obtained in different ways, e.g.,
    by manual\n            configuration, or through ILMI interaction with\n            the
    neighbor system.\"\n          ::= { atmInterfaceConfEntry 12 }\n     atmInterfaceCurrentMaxVpiBits
    \   OBJECT-TYPE\n          SYNTAX         INTEGER  (0..12)\n          MAX-ACCESS
    \    read-only\n          STATUS         current\n          DESCRIPTION\n           \"The
    maximum number of VPI Bits that may\n            currently be used at this ATM
    interface.\n            The value is the minimum of\n            atmInterfaceMaxActiveVpiBits,
    and the\n            atmInterfaceMaxActiveVpiBits of the interface's\n            UNI/NNI
    peer.\n            If the interface does not negotiate with\n            its peer
    to determine the number of VPI Bits\n            that can be used on the interface,
    then the\n            value of this object must equal\n            atmInterfaceMaxActiveVpiBits.\"\n
    \         ::= { atmInterfaceConfEntry 13 }\n     atmInterfaceCurrentMaxVciBits
    \   OBJECT-TYPE\n          SYNTAX         INTEGER  (0..16)\n          MAX-ACCESS
    \    read-only\n          STATUS         current\n          DESCRIPTION\n           \"The
    maximum number of VCI Bits that may\n            currently be used at this ATM
    interface.\n            The value is the minimum of\n            atmInterfaceMaxActiveVciBits,
    and the\n            atmInterfaceMaxActiveVciBits of the interface's\n            UNI/NNI
    peer.\n            If the interface does not negotiate with\n            its peer
    to determine the number of VCI Bits\n            that can be used on the interface,
    then the\n            value of this object must equal\n            atmInterfaceMaxActiveVciBits.\"\n
    \         ::= { atmInterfaceConfEntry 14 }\n     atmInterfaceSubscrAddress OBJECT-TYPE\n
    \         SYNTAX         AtmAddr\n          MAX-ACCESS     read-write\n          STATUS
    \        current\n          DESCRIPTION\n           \"The identifier assigned
    by a service provider\n            to the network side of a public network UNI.\n
    \           If this interface has no assigned service provider\n            address,
    or for other interfaces this is an octet string\n            of zero length.\"\n
    \         ::= { atmInterfaceConfEntry 15 }\n     -- The ATM Interface DS3 PLCP
    Table\n     -- This table contains the DS3 PLCP configuration and\n     -- state
    parameters of those ATM interfaces\n     -- which use DS3 PLCP for carrying ATM
    cells over DS3.\n     atmInterfaceDs3PlcpTable  OBJECT-TYPE\n          SYNTAX
    \      SEQUENCE OF AtmInterfaceDs3PlcpEntry\n          MAX-ACCESS   not-accessible\n
    \         STATUS       current\n          DESCRIPTION\n           \"This table
    contains ATM interface DS3 PLCP\n            parameters and state variables, one
    entry per\n            ATM interface port.\"\n          ::= { atmMIBObjects 3}\n
    \    atmInterfaceDs3PlcpEntry OBJECT-TYPE\n          SYNTAX         AtmInterfaceDs3PlcpEntry\n
    \         MAX-ACCESS     not-accessible\n          STATUS         current\n          DESCRIPTION\n
    \          \"This list contains DS3 PLCP parameters and\n            state variables
    at the ATM interface and is\n            indexed by the ifIndex value of the ATM
    interface.\"\n          INDEX    { ifIndex }\n          ::= { atmInterfaceDs3PlcpTable
    1}\n     AtmInterfaceDs3PlcpEntry    ::= SEQUENCE  {\n          atmInterfaceDs3PlcpSEFSs
    \      Counter32,\n          atmInterfaceDs3PlcpAlarmState  INTEGER,\n          atmInterfaceDs3PlcpUASs
    \       Counter32\n            }\n     atmInterfaceDs3PlcpSEFSs  OBJECT-TYPE\n
    \         SYNTAX         Counter32\n          MAX-ACCESS     read-only\n          STATUS
    \        current\n          DESCRIPTION\n           \"The number of DS3 PLCP Severely
    Errored Framing\n            Seconds (SEFS). Each SEFS represents a\n            one-second
    interval which contains\n            one or more SEF events.\"\n          ::=
    { atmInterfaceDs3PlcpEntry 1}\n     atmInterfaceDs3PlcpAlarmState    OBJECT-TYPE\n
    \         SYNTAX         INTEGER {\n                            noAlarm(1),\n
    \                           receivedFarEndAlarm(2),\n                            incomingLOF(3)\n
    \                                }\n          MAX-ACCESS     read-only\n          STATUS
    \        current\n          DESCRIPTION\n           \"This variable indicates
    if there is an\n            alarm present for the DS3 PLCP.  The value\n            receivedFarEndAlarm
    means that the DS3 PLCP\n            has received an incoming Yellow\n            Signal,
    the value incomingLOF means that\n            the DS3 PLCP has declared a loss
    of frame (LOF)\n            failure condition, and the value noAlarm\n            means
    that there are no alarms present.\n            Transition from the failure to
    the no alarm state\n            occurs when no defects (e.g., LOF) are received\n
    \           for more than 10 seconds.\"\n          ::= { atmInterfaceDs3PlcpEntry
    2}\n     atmInterfaceDs3PlcpUASs  OBJECT-TYPE\n          SYNTAX         Counter32\n
    \         MAX-ACCESS     read-only\n          STATUS         current\n          DESCRIPTION\n
    \          \"The counter associated with the number of\n            Unavailable
    Seconds encountered by the PLCP.\"\n          ::= { atmInterfaceDs3PlcpEntry 3}\n
    \    -- The ATM Interface TC Sublayer Table\n     -- This table contains TC sublayer
    configuration and\n     -- state parameters of those ATM interfaces\n     -- which
    use TC sublayer for carrying ATM cells over\n     -- SONET/SDH or DS3.\n     atmInterfaceTCTable
    \ OBJECT-TYPE\n          SYNTAX         SEQUENCE OF AtmInterfaceTCEntry\n          MAX-ACCESS
    \    not-accessible\n          STATUS         current\n          DESCRIPTION\n
    \          \"This table contains ATM interface TC\n            Sublayer parameters
    and state variables,\n            one entry per ATM interface port.\"\n          ::=
    { atmMIBObjects 4}\n     atmInterfaceTCEntry OBJECT-TYPE\n          SYNTAX         AtmInterfaceTCEntry\n
    \         MAX-ACCESS     not-accessible\n          STATUS         current\n          DESCRIPTION\n
    \          \"This list contains TC Sublayer parameters\n            and state
    variables at the ATM interface and is\n            indexed by the ifIndex value
    of the ATM interface.\"\n          INDEX  {ifIndex }\n          ::= { atmInterfaceTCTable
    1}\n     AtmInterfaceTCEntry    ::= SEQUENCE  {\n          atmInterfaceOCDEvents
    \     Counter32,\n          atmInterfaceTCAlarmState   INTEGER\n            }\n
    \    atmInterfaceOCDEvents  OBJECT-TYPE\n          SYNTAX         Counter32\n
    \         MAX-ACCESS     read-only\n          STATUS         current\n          DESCRIPTION\n
    \          \"The number of times the Out of Cell\n            Delineation (OCD)
    events occur.  If seven\n            consecutive ATM cells have Header Error\n
    \           Control (HEC) violations, an OCD event occurs.\n            A high
    number of OCD events may indicate a\n            problem with the TC Sublayer.\"\n
    \         ::= { atmInterfaceTCEntry 1}\n     atmInterfaceTCAlarmState    OBJECT-TYPE\n
    \         SYNTAX         INTEGER {\n                            noAlarm(1),\n
    \                           lcdFailure(2)\n                                  }\n
    \         MAX-ACCESS     read-only\n          STATUS         current\n          DESCRIPTION\n
    \          \"This variable indicates if there is an\n            alarm present
    for the TC Sublayer.  The value\n            lcdFailure(2) indicates that the
    TC Sublayer\n            is currently in the Loss of Cell Delineation\n            (LCD)
    defect maintenance state.  The value\n            noAlarm(1) indicates that the
    TC Sublayer\n            is currently not in the LCD defect\n            maintenance
    state.\"\n           ::= { atmInterfaceTCEntry 2}\n     --  ATM Traffic Descriptor
    Parameter Table\n     -- This table contains a set of self-consistent\n     --
    ATM traffic parameters including the\n     -- ATM traffic service category.\n
    \    -- The ATM virtual link tables (i.e., VPL and VCL tables)\n     -- will use
    this ATM Traffic Descriptor table\n     -- to assign traffic parameters and service
    category\n     -- to the receive and transmit directions of\n     -- the ATM virtual
    links (i.e., VPLs and VCLs).\n     -- The ATM VPL or VCL table will indicate a
    row\n     -- in the atmTrafficDescrParamTable\n     -- using its atmTrafficDescrParamIndex
    value.\n     -- The management application can then compare a set of\n     --
    ATM traffic parameters with a single value.\n     -- If no suitable row(s) in
    the atmTrafficDescrParamTable\n     -- exists, the manager must create a new row(s)
    in this\n     -- table. If such a row is created, agent checks the\n     -- sanity
    of that set of ATM traffic parameter values.\n     -- The manager may use atmTrafficDescrParamIndexNext\n
    \    -- in order to obtain a free atmTrafficDescrParamIndex\n     -- value.\n
    \    -- When creating a new row, the parameter values\n     -- will be checked
    for self-consistency.\n     -- Predefined/template rows may be supported.\n     --
    A row in the atmTrafficDescrParamTable is deleted\n     -- by setting the atmTrafficDescrRowStatus
    to destroy(6).\n     -- The agent will check whether this row is still in use\n
    \    -- by any entry of the atmVplTable or atmVclTable.\n     -- The agent denies
    the request if the row is still in\n     -- use.\n     --  The ATM Traffic Descriptor
    Parameter Table\n     atmTrafficDescrParamTable    OBJECT-TYPE\n          SYNTAX
    \      SEQUENCE OF AtmTrafficDescrParamEntry\n          MAX-ACCESS   not-accessible\n
    \         STATUS       current\n          DESCRIPTION\n           \"This table
    contains information on ATM traffic\n            descriptor type and the associated
    parameters.\"\n          ::= { atmMIBObjects 5}\n     atmTrafficDescrParamEntry
    \   OBJECT-TYPE\n          SYNTAX         AtmTrafficDescrParamEntry\n          MAX-ACCESS
    \    not-accessible\n          STATUS         current\n          DESCRIPTION\n
    \          \"This list contains ATM traffic descriptor\n            type and the
    associated parameters.\"\n          INDEX  {atmTrafficDescrParamIndex}\n          ::=
    { atmTrafficDescrParamTable 1}\n     AtmTrafficDescrParamEntry   ::= SEQUENCE
    \ {\n       atmTrafficDescrParamIndex  AtmTrafficDescrParamIndex,\n       atmTrafficDescrType
    \       OBJECT IDENTIFIER,\n       atmTrafficDescrParam1      Integer32,\n       atmTrafficDescrParam2
    \     Integer32,\n       atmTrafficDescrParam3      Integer32,\n       atmTrafficDescrParam4
    \     Integer32,\n       atmTrafficDescrParam5      Integer32,\n       atmTrafficQoSClass
    \        INTEGER,\n       atmTrafficDescrRowStatus   RowStatus,\n       atmServiceCategory
    \        AtmServiceCategory,\n       atmTrafficFrameDiscard     TruthValue\n                    }\n
    \    atmTrafficDescrParamIndex OBJECT-TYPE\n          SYNTAX  AtmTrafficDescrParamIndex
    (1..2147483647)\n          MAX-ACCESS     not-accessible\n          STATUS         current\n
    \         DESCRIPTION\n           \"This object is used by the virtual link\n
    \           table (i.e., VPL or VCL table)\n            to identify the row of
    this table.\n            When creating a new row in the table\n            the
    value of this index may be obtained\n            by retrieving the value of\n
    \           atmTrafficDescrParamIndexNext.\"\n          ::= { atmTrafficDescrParamEntry
    \ 1}\n     atmTrafficDescrType OBJECT-TYPE\n          SYNTAX         OBJECT IDENTIFIER\n
    \         MAX-ACCESS     read-create\n          STATUS         current\n          DESCRIPTION\n
    \          \"The value of this object identifies the type\n            of ATM
    traffic descriptor.\n            The type may indicate no traffic descriptor or\n
    \           traffic descriptor with one or more parameters.\n            These
    parameters are specified as a parameter\n            vector, in the corresponding
    instances of the\n            objects:\n                atmTrafficDescrParam1\n
    \               atmTrafficDescrParam2\n                atmTrafficDescrParam3\n
    \               atmTrafficDescrParam4\n                atmTrafficDescrParam5.\"\n
    \          DEFVAL  { atmNoClpNoScr }\n           ::= { atmTrafficDescrParamEntry
    2}\n     atmTrafficDescrParam1 OBJECT-TYPE\n          SYNTAX         Integer32\n
    \         MAX-ACCESS     read-create\n          STATUS         current\n          DESCRIPTION\n
    \          \"The first parameter of the ATM traffic descriptor\n            used
    according to the value of\n            atmTrafficDescrType.\"\n          DEFVAL
    \ { 0 }\n          ::= { atmTrafficDescrParamEntry 3}\n     atmTrafficDescrParam2
    OBJECT-TYPE\n          SYNTAX         Integer32\n          MAX-ACCESS     read-create\n
    \         STATUS         current\n          DESCRIPTION\n           \"The second
    parameter of the ATM traffic descriptor\n            used according to the value
    of\n            atmTrafficDescrType.\"\n          DEFVAL  { 0 }\n          ::=
    { atmTrafficDescrParamEntry 4}\n     atmTrafficDescrParam3 OBJECT-TYPE\n          SYNTAX
    \        Integer32\n          MAX-ACCESS     read-create\n          STATUS         current\n
    \         DESCRIPTION\n           \"The third parameter of the ATM traffic descriptor\n
    \           used according to the value of\n            atmTrafficDescrType.\"\n
    \         DEFVAL  { 0 }\n          ::= { atmTrafficDescrParamEntry 5}\n     atmTrafficDescrParam4
    OBJECT-TYPE\n          SYNTAX         Integer32\n          MAX-ACCESS     read-create\n
    \         STATUS         current\n          DESCRIPTION\n           \"The fourth
    parameter of the ATM traffic descriptor\n            used according to the value
    of\n            atmTrafficDescrType.\"\n          DEFVAL  { 0 }\n          ::=
    { atmTrafficDescrParamEntry 6}\n     atmTrafficDescrParam5 OBJECT-TYPE\n          SYNTAX
    \        Integer32\n          MAX-ACCESS     read-create\n          STATUS         current\n
    \         DESCRIPTION\n           \"The fifth parameter of the ATM traffic descriptor\n
    \           used according to the value of\n            atmTrafficDescrType.\"\n
    \         DEFVAL  { 0 }\n          ::= { atmTrafficDescrParamEntry 7}\n     atmTrafficQoSClass
    \ OBJECT-TYPE\n          SYNTAX         INTEGER (0..255)\n          MAX-ACCESS
    \    read-create\n          STATUS         deprecated\n          DESCRIPTION\n
    \          \"The value of this object identifies the QoS Class.\n            Four
    Service classes have been\n            specified in the ATM Forum UNI Specification:\n
    \           Service Class A: Constant bit rate video and\n                             Circuit
    emulation\n            Service Class B: Variable bit rate video/audio\n            Service
    Class C: Connection-oriented data\n            Service Class D: Connectionless
    data\n            Four QoS classes numbered 1, 2, 3, and 4 have\n            been
    specified with the aim to support service\n            classes A, B, C, and D
    respectively.\n            An unspecified QoS Class numbered `0' is used\n            for
    best effort traffic.\"\n          DEFVAL  { 0 }\n          ::= { atmTrafficDescrParamEntry
    8}\n     atmTrafficDescrRowStatus  OBJECT-TYPE\n          SYNTAX         RowStatus\n
    \         MAX-ACCESS     read-create\n          STATUS         current\n          DESCRIPTION\n
    \          \"This object is used to create\n            a new row or modify or
    delete an\n            existing row in this table.\"\n          DEFVAL  { active
    }\n          ::= {atmTrafficDescrParamEntry 9}\n     atmServiceCategory  OBJECT-TYPE\n
    \         SYNTAX         AtmServiceCategory\n          MAX-ACCESS     read-create\n
    \         STATUS         current\n          DESCRIPTION\n           \"The ATM
    service category.\"\n          DEFVAL  { ubr }\n          ::= { atmTrafficDescrParamEntry
    10}\n     atmTrafficFrameDiscard    OBJECT-TYPE\n          SYNTAX       TruthValue\n
    \         MAX-ACCESS   read-create\n          STATUS       current\n          DESCRIPTION\n
    \          \"If set to 'true', this object indicates that the network\n            is
    requested to treat data for this connection, in the\n            given direction,
    as frames (e.g. AAL5 CPCS_PDU's) rather\n            than as individual cells.
    \ While the precise\n            implementation is network-specific, this treatment
    may\n            for example involve discarding entire frames during\n            congestion,
    rather than a few cells from many frames.\"\n          DEFVAL { true }\n          ::=
    { atmTrafficDescrParamEntry 11 }\n     --  ATM Interface Virtual Path Link (VPL)
    Table\n     -- This table contains configuration and state\n     -- information
    of a bi-directional Virtual Path Link\n     -- (VPL)\n     -- This table can be
    used to create, delete or modify\n     -- a VPL that is terminated in an ATM host
    or switch.\n     -- This table can also be used to create, delete or\n     --
    modify a VPL which is cross-connected to another\n     -- VPL.\n     -- In the
    example below, the traffic flows on the receive\n     -- and transmit directions
    of the VPLs are characterized\n     -- by atmVplReceiveTrafficDescrIndex and\n
    \    -- atmVplTransmitTrafficDescrIndex respectively.\n     -- The cross-connected
    VPLs are identified by\n     -- atmVplCrossConnectIdentifier.\n     --           ________________________________\n
    \    --           |                              |\n     --  VPL      | ATM Host,
    Switch, or Network |   VPL\n     -- receive   |                              |
    \ receive\n     -- ========> X                              X <=======\n     --
    <======== X                              X ========>\n     -- transmit  |                              |
    \ transmit\n     --           |______________________________|\n     --  The ATM
    Interface VPL Table\n     atmVplTable         OBJECT-TYPE\n          SYNTAX         SEQUENCE
    OF AtmVplEntry\n          MAX-ACCESS     not-accessible\n          STATUS         current\n
    \         DESCRIPTION\n           \"The Virtual Path Link (VPL) table.  A\n            bi-directional
    VPL is modeled as one entry\n            in this table. This table can be used
    for\n            PVCs, SVCs and Soft PVCs.\n            Entries are not present
    in this table for\n            the VPIs used by entries in the atmVclTable.\"\n
    \         ::= { atmMIBObjects 6}\n     atmVplEntry         OBJECT-TYPE\n          SYNTAX
    \        AtmVplEntry\n          MAX-ACCESS     not-accessible\n          STATUS
    \        current\n          DESCRIPTION\n           \"An entry in the VPL table.
    \ This entry is\n            used to model a bi-directional VPL.\n            To
    create a VPL at an ATM interface,\n            either of the following procedures
    are used:\n            Negotiated VPL establishment\n          (1) The management
    application creates\n              a VPL entry in the atmVplTable\n              by
    setting atmVplRowStatus to createAndWait(5).\n              This may fail for
    the following reasons:\n              - The selected VPI value is unavailable,\n
    \             - The selected VPI value is in use.\n              Otherwise, the
    agent creates a row and\n              reserves the VPI value on that port.\n
    \         (2) The manager selects an existing row(s) in the\n              atmTrafficDescrParamTable,\n
    \             thereby, selecting a set of self-consistent\n              ATM traffic
    parameters and the service category\n              for receive and transmit directions
    of the VPL.\n         (2a) If no suitable row(s) in the\n              atmTrafficDescrParamTable
    exists,\n              the manager must create a new row(s)\n              in
    that table.\n         (2b) The manager characterizes the VPL's traffic\n              parameters
    through setting the\n              atmVplReceiveTrafficDescrIndex and the\n              atmVplTransmitTrafficDescrIndex
    values\n              in the VPL table, which point to the rows\n              containing
    desired ATM traffic parameter values\n              in the atmTrafficDescrParamTable.
    \ The agent\n              will check the availability of resources and\n              may
    refuse the request.\n              If the transmit and receive service categories\n
    \             are inconsistent, the agent should refuse the\n              request.\n
    \         (3) The manager activates the VPL by setting the\n              the
    atmVplRowStatus to active(1).\n              If this set is successful, the agent
    has\n              reserved the resources to satisfy the requested\n              traffic
    parameter values and the service category\n              for that VPL.\n          (4)
    If the VPL terminates a VPC in the ATM host\n              or switch, the manager
    turns on the\n              atmVplAdminStatus to up(1) to turn the VPL\n              traffic
    flow on.  Otherwise, the\n              atmVpCrossConnectTable  must be used\n
    \             to cross-connect the VPL to another VPL(s)\n              in an
    ATM switch or network.\n            One-Shot VPL Establishment\n            A
    VPL may also be established in one step by a\n            set-request with all
    necessary VPL parameter\n            values and atmVplRowStatus set to createAndGo(4).\n
    \           In contrast to the negotiated VPL establishment\n            which
    allows for detailed error checking\n            (i.e., set errors are explicitly
    linked to\n            particular resource acquisition failures),\n            the
    one-shot VPL establishment\n            performs the setup on one operation but\n
    \           does not have the advantage of step-wise\n            error checking.\n
    \           VPL Retirement\n            A VPL is released by setting atmVplRowStatus
    to\n            destroy(6), and the agent may release all\n            associated
    resources.\"\n          INDEX  {ifIndex, atmVplVpi }\n          ::= { atmVplTable
    \ 1}\n     AtmVplEntry    ::= SEQUENCE  {\n          atmVplVpi          AtmVpIdentifier,\n
    \         atmVplAdminStatus  AtmVorXAdminStatus,\n          atmVplOperStatus   AtmVorXOperStatus,\n
    \         atmVplLastChange   AtmVorXLastChange,\n          atmVplReceiveTrafficDescrIndex\n
    \                        AtmTrafficDescrParamIndex,\n          atmVplTransmitTrafficDescrIndex\n
    \                        AtmTrafficDescrParamIndex,\n          atmVplCrossConnectIdentifier
    INTEGER,\n          atmVplRowStatus    RowStatus,\n          atmVplCastType     AtmConnCastType,\n
    \         atmVplConnKind     AtmConnKind\n             }\n     atmVplVpi           OBJECT-TYPE\n
    \         SYNTAX         AtmVpIdentifier\n          MAX-ACCESS     not-accessible\n
    \         STATUS         current\n          DESCRIPTION\n           \"The VPI
    value of the VPL.\"\n          ::= { atmVplEntry 1}\n     atmVplAdminStatus   OBJECT-TYPE\n
    \         SYNTAX         AtmVorXAdminStatus\n          MAX-ACCESS     read-create\n
    \         STATUS         current\n          DESCRIPTION\n           \"This object
    is instanciated only for a VPL\n            which terminates a VPC (i.e., one
    which is\n            NOT cross-connected to other VPLs).\n            Its value
    specifies the desired\n            administrative state of the VPL.\"\n          DEFVAL
    { down }\n          ::= { atmVplEntry 2}\n     atmVplOperStatus    OBJECT-TYPE\n
    \         SYNTAX         AtmVorXOperStatus\n          MAX-ACCESS     read-only\n
    \         STATUS         current\n          DESCRIPTION\n           \"The current
    operational status of the VPL.\"\n          ::= { atmVplEntry 3}\n     atmVplLastChange
    \   OBJECT-TYPE\n          SYNTAX         AtmVorXLastChange\n          MAX-ACCESS
    \    read-only\n          STATUS         current\n          DESCRIPTION\n           \"The
    value of sysUpTime at the time this\n            VPL entered its current operational
    state.\"\n          ::= { atmVplEntry 4 }\n     atmVplReceiveTrafficDescrIndex
    \ OBJECT-TYPE\n          SYNTAX         AtmTrafficDescrParamIndex\n          MAX-ACCESS
    \    read-create\n          STATUS         current\n          DESCRIPTION\n           \"The
    value of this object identifies the row\n            in the atmTrafficDescrParamTable
    which\n            applies to the receive direction of the VPL.\"\n          DEFVAL
    { 0 }\n           ::= { atmVplEntry 5}\n     atmVplTransmitTrafficDescrIndex  OBJECT-TYPE\n
    \         SYNTAX         AtmTrafficDescrParamIndex\n          MAX-ACCESS     read-create\n
    \         STATUS         current\n          DESCRIPTION\n           \"The value
    of this object identifies the row\n            in the atmTrafficDescrParamTable
    which\n            applies to the transmit direction of the VPL.\"\n          DEFVAL
    { 0 }\n           ::= { atmVplEntry 6}\n     atmVplCrossConnectIdentifier   OBJECT-TYPE\n
    \         SYNTAX         INTEGER (0..2147483647)\n          MAX-ACCESS     read-only\n
    \         STATUS         current\n          DESCRIPTION\n           \"This object
    is instantiated only for a VPL\n            which is cross-connected to other
    VPLs\n            that belong to the same VPC.  All such\n            associated
    VPLs have the same value of this\n            object, and all their cross-connections
    are\n            identified either by entries that are indexed\n            by
    the same value of atmVpCrossConnectIndex in\n            the atmVpCrossConnectTable
    of this MIB module or by\n            the same value of the cross-connect index
    in\n            the cross-connect table for SVCs and Soft PVCs\n            (defined
    in a separate MIB module).\n            At no time should entries in these respective\n
    \           cross-connect tables exist simultaneously\n            with the same
    cross-connect index value.\n            The value of this object is initialized
    by the\n            agent after the associated entries in the\n            atmVpCrossConnectTable
    have been created.\"\n          ::= {atmVplEntry 7}\n     atmVplRowStatus     OBJECT-TYPE\n
    \         SYNTAX         RowStatus\n          MAX-ACCESS     read-create\n          STATUS
    \        current\n          DESCRIPTION\n           \"This object is used to create,
    delete\n            or modify a row in this table.\n            To create a new
    VCL, this object is\n            initially set to 'createAndWait' or\n            'createAndGo'.
    \ This object should not be\n            set to 'active' unless the following
    columnar\n            objects have been set to their desired value\n            in
    this row:\n            atmVplReceiveTrafficDescrIndex and\n            atmVplTransmitTrafficDescrIndex.\n
    \           The DESCRIPTION of atmVplEntry provides\n            further guidance
    to row treatment in this table.\"\n          DEFVAL { createAndWait }\n          ::=
    {atmVplEntry 8}\n     atmVplCastType      OBJECT-TYPE\n          SYNTAX         AtmConnCastType\n
    \         MAX-ACCESS     read-create\n          STATUS         current\n          DESCRIPTION\n
    \          \"The connection topology type.\"\n          DEFVAL { p2p }\n          ::=
    {atmVplEntry 9}\n     atmVplConnKind      OBJECT-TYPE\n          SYNTAX         AtmConnKind\n
    \         MAX-ACCESS     read-create\n          STATUS         current\n          DESCRIPTION\n
    \          \"The use of call control.\"\n          DEFVAL { pvc }\n          ::=
    {atmVplEntry 10}\n     --  ATM Interface Virtual Channel Link (VCL) Table\n     --
    This table contains configuration and state\n     -- information of a bi-directional
    Virtual Channel\n     -- Link (VCL) at an ATM interface.\n     -- This table can
    be used to create, delete or modify\n     -- a VCL that is terminated in an ATM
    host or switch.\n     -- This table can also be\n     -- used to create, delete
    or modify a VCL that is\n     -- cross-connected to another VCL.\n     --  The
    ATM Interface VCL Table\n     atmVclTable         OBJECT-TYPE\n          SYNTAX
    \        SEQUENCE OF AtmVclEntry\n          MAX-ACCESS     not-accessible\n          STATUS
    \        current\n          DESCRIPTION\n           \"The Virtual Channel Link
    (VCL) table.  A\n            bi-directional VCL is modeled as one entry\n            in
    this table. This table can be used for\n            PVCs, SVCs and Soft PVCs.\"\n
    \         ::= { atmMIBObjects 7}\n     atmVclEntry         OBJECT-TYPE\n          SYNTAX
    \        AtmVclEntry\n          MAX-ACCESS     not-accessible\n          STATUS
    \        current\n          DESCRIPTION\n           \"An entry in the VCL table.
    This entry is\n            used to model a bi-directional VCL.\n            To
    create a VCL at an ATM interface,\n            either of the following procedures
    are used:\n            Negotiated VCL establishment\n          (1) The management
    application creates\n              a VCL entry in the atmVclTable\n              by
    setting atmVclRowStatus to createAndWait(5).\n              This may fail for
    the following reasons:\n              - The selected VPI/VCI values are unavailable,\n
    \             - The selected VPI/VCI values are in use.\n              Otherwise,
    the agent creates a row and\n              reserves the VPI/VCI values on that
    port.\n          (2) The manager selects an existing row(s) in the\n              atmTrafficDescrParamTable,\n
    \             thereby, selecting a set of self-consistent\n              ATM traffic
    parameters and the service category\n              for receive and transmit directions
    of the VCL.\n         (2a) If no suitable row(s) in the\n              atmTrafficDescrParamTable
    exists,\n              the manager must create a new row(s)\n              in
    that table.\n         (2b) The manager characterizes the VCL's traffic\n              parameters
    through setting the\n              atmVclReceiveTrafficDescrIndex and the\n              atmVclTransmitTrafficDescrIndex
    values\n              in the VCL table, which point to the rows\n              containing
    desired ATM traffic parameter values\n              in the atmTrafficDescrParamTable.
    \ The agent\n              will check the availability of resources and\n              may
    refuse the request.\n              If the transmit and receive service categories\n
    \             are inconsistent, the agent should refuse the\n              request.\n
    \         (3) The manager activates the VCL by setting the\n              the
    atmVclRowStatus to active(1) (for\n              requirements on this activation
    see the\n              description of atmVclRowStatus).\n              If this
    set is successful, the agent has\n              reserved the resources to satisfy
    the requested\n              traffic parameter values and the service category\n
    \             for that VCL.\n          (4) If the VCL terminates a VCC in the
    ATM host\n              or switch, the manager turns on the\n              atmVclAdminStatus
    to up(1) to turn the VCL\n              traffic flow on.  Otherwise, the\n              atmVcCrossConnectTable
    \ must be used\n              to cross-connect the VCL to another VCL(s)\n              in
    an ATM switch or network.\n           One-Shot VCL Establishment\n           A
    VCL may also be established in one step by a\n           set-request with all
    necessary VCL parameter\n           values and atmVclRowStatus set to createAndGo(4).\n
    \          In contrast to the negotiated VCL establishment\n           which allows
    for detailed error checking\n           (i.e., set errors are explicitly linked
    to\n           particular resource acquisition failures),\n           the one-shot
    VCL establishment\n           performs the setup on one operation but\n           does
    not have the advantage of step-wise\n           error checking.\n           VCL
    Retirement\n           A VCL is released by setting atmVclRowStatus to\n           destroy(6),
    and the agent may release all\n           associated resources.\"\n          INDEX
    \ {ifIndex, atmVclVpi, atmVclVci }\n          ::= { atmVclTable  1}\n     AtmVclEntry
    \   ::= SEQUENCE  {\n          atmVclVpi                     AtmVpIdentifier,\n
    \         atmVclVci                     AtmVcIdentifier,\n          atmVclAdminStatus
    \            AtmVorXAdminStatus,\n          atmVclOperStatus              AtmVorXOperStatus,\n
    \         atmVclLastChange              AtmVorXLastChange,\n          atmVclReceiveTrafficDescrIndex\n
    \                               AtmTrafficDescrParamIndex,\n          atmVclTransmitTrafficDescrIndex\n
    \                               AtmTrafficDescrParamIndex,\n          atmVccAalType
    \                INTEGER,\n          atmVccAal5CpcsTransmitSduSize INTEGER,\n
    \         atmVccAal5CpcsReceiveSduSize  INTEGER,\n          atmVccAal5EncapsType
    \         INTEGER,\n          atmVclCrossConnectIdentifier  INTEGER,\n          atmVclRowStatus
    \              RowStatus,\n          atmVclCastType                AtmConnCastType,\n
    \         atmVclConnKind                AtmConnKind\n                 }\n     atmVclVpi
    \          OBJECT-TYPE\n          SYNTAX         AtmVpIdentifier\n          MAX-ACCESS
    \    not-accessible\n          STATUS         current\n          DESCRIPTION\n
    \          \"The VPI value of the VCL.\"\n          ::= { atmVclEntry 1}\n     atmVclVci
    \          OBJECT-TYPE\n          SYNTAX         AtmVcIdentifier\n          MAX-ACCESS
    \    not-accessible\n          STATUS         current\n          DESCRIPTION\n
    \          \"The VCI value of the VCL.\"\n          ::= { atmVclEntry 2}\n     atmVclAdminStatus
    \  OBJECT-TYPE\n          SYNTAX         AtmVorXAdminStatus\n          MAX-ACCESS
    \    read-create\n          STATUS         current\n          DESCRIPTION\n           \"This
    object is instanciated only for a VCL which\n            terminates a VCC (i.e.,
    one which is NOT\n            cross-connected to other VCLs). Its value\n            specifies
    the desired administrative state of\n            the VCL.\"\n          DEFVAL
    { down }\n          ::= { atmVclEntry 3}\n     atmVclOperStatus    OBJECT-TYPE\n
    \         SYNTAX         AtmVorXOperStatus\n          MAX-ACCESS     read-only\n
    \         STATUS         current\n          DESCRIPTION\n           \"The current
    operational status of the VCL.\"\n          ::= { atmVclEntry 4}\n     atmVclLastChange
    \   OBJECT-TYPE\n          SYNTAX         AtmVorXLastChange\n          MAX-ACCESS
    \    read-only\n          STATUS         current\n          DESCRIPTION\n           \"The
    value of sysUpTime at the time this VCL\n            entered its current operational
    state.\"\n          ::= { atmVclEntry 5 }\n     atmVclReceiveTrafficDescrIndex
    \ OBJECT-TYPE\n          SYNTAX         AtmTrafficDescrParamIndex\n          MAX-ACCESS
    \    read-create\n          STATUS         current\n          DESCRIPTION\n           \"The
    value of this object identifies the row\n            in the ATM Traffic Descriptor
    Table which\n            applies to the receive direction of this VCL.\"\n          DEFVAL
    { 0 }\n           ::= { atmVclEntry 6}\n     atmVclTransmitTrafficDescrIndex  OBJECT-TYPE\n
    \         SYNTAX         AtmTrafficDescrParamIndex\n          MAX-ACCESS     read-create\n
    \         STATUS         current\n          DESCRIPTION\n           \"The value
    of this object identifies the row\n            of the ATM Traffic Descriptor Table
    which applies\n            to the transmit direction of this VCL.\"\n          DEFVAL
    { 0 }\n           ::= { atmVclEntry 7}\n     atmVccAalType       OBJECT-TYPE\n
    \         SYNTAX         INTEGER {\n                            aal1(1),\n                            aal34(2),\n
    \                           aal5(3),\n                            other(4),\n
    \                           unknown(5),\n                            aal2(6)\n
    \                             }\n          MAX-ACCESS    read-create\n          STATUS
    \       current\n          DESCRIPTION\n           \"An instance of this object
    only exists when the\n            local VCL end-point is also the VCC end-point,\n
    \           and AAL is in use.\n            The type of AAL used on this VCC.\n
    \           The AAL type includes AAL1, AAL2, AAL3/4,\n            and AAL5. The
    other(4) may be user-defined\n            AAL type.  The unknown type indicates
    that\n            the AAL type cannot be determined.\"\n          DEFVAL { aal5
    }\n          ::= { atmVclEntry 8 }\n     atmVccAal5CpcsTransmitSduSize OBJECT-TYPE\n
    \         SYNTAX         INTEGER (1..65535)\n          MAX-ACCESS     read-create\n
    \         STATUS         current\n          DESCRIPTION\n           \"An instance
    of this object only exists when the\n            local VCL end-point is also the
    VCC end-point,\n            and AAL5 is in use.\n            The maximum AAL5
    CPCS SDU size in octets that is\n            supported on the transmit direction
    of this VCC.\"\n          DEFVAL { 9188 }\n                ::= { atmVclEntry 9
    }\n     atmVccAal5CpcsReceiveSduSize OBJECT-TYPE\n          SYNTAX         INTEGER
    (1..65535)\n          MAX-ACCESS     read-create\n          STATUS         current\n
    \         DESCRIPTION\n           \"An instance of this object only exists when
    the\n            local VCL end-point is also the VCC end-point,\n            and
    AAL5 is in use.\n            The maximum AAL5 CPCS SDU size in octets that is\n
    \           supported on the receive direction of this VCC.\"\n          DEFVAL
    { 9188 }\n                ::= { atmVclEntry 10 }\n     atmVccAal5EncapsType  OBJECT-TYPE\n
    \         SYNTAX         INTEGER {\n                         vcMultiplexRoutedProtocol(1),\n
    \                        vcMultiplexBridgedProtocol8023(2),\n                         vcMultiplexBridgedProtocol8025(3),\n
    \                        vcMultiplexBridgedProtocol8026(4),\n                         vcMultiplexLANemulation8023(5),\n
    \                        vcMultiplexLANemulation8025(6),\n                         llcEncapsulation(7),\n
    \                        multiprotocolFrameRelaySscs(8),\n                         other(9),\n
    \                        unknown(10)\n                            }\n          MAX-ACCESS
    \    read-create\n          STATUS         current\n          DESCRIPTION\n           \"An
    instance of this object only exists when the\n            local VCL end-point
    is also the VCC end-point,\n            and AAL5 is in use.\n            The type
    of data encapsulation used over\n            the AAL5 SSCS layer. The definitions
    reference\n            RFC 1483 Multiprotocol Encapsulation\n            over
    ATM AAL5 and to the ATM Forum\n            LAN Emulation specification.\"\n          DEFVAL
    { llcEncapsulation }\n                ::= { atmVclEntry 11 }\n     atmVclCrossConnectIdentifier
    \  OBJECT-TYPE\n          SYNTAX         INTEGER (0..2147483647)\n          MAX-ACCESS
    \    read-only\n          STATUS         current\n          DESCRIPTION\n           \"This
    object is instantiated only for a VCL\n            which is cross-connected to
    other VCLs\n            that belong to the same VCC.  All such\n            associated
    VCLs have the same value of this\n            object, and all their cross-connections
    are\n            identified either by entries that are indexed\n            by
    the same value of atmVcCrossConnectIndex in\n            the atmVcCrossConnectTable
    of this MIB module or by\n            the same value of the cross-connect index
    in\n            the cross-connect table for SVCs and Soft PVCs\n            (defined
    in a separate MIB module).\n            At no time should entries in these respective\n
    \           cross-connect tables exist simultaneously\n            with the same
    cross-connect index value.\n            The value of this object is initialized
    by the\n            agent after the associated entries in the\n            atmVcCrossConnectTable
    have been created.\"\n          ::= {atmVclEntry 12}\n     atmVclRowStatus     OBJECT-TYPE\n
    \         SYNTAX         RowStatus\n          MAX-ACCESS     read-create\n          STATUS
    \        current\n          DESCRIPTION\n           \"This object is used to create,
    delete or\n            modify a row in this table.  To create\n            a new
    VCL, this object is initially set\n            to 'createAndWait' or 'createAndGo'.\n
    \           This object should not be\n            set to 'active' unless the
    following columnar\n            objects have been set to their desired value\n
    \           in this row:\n            atmVclReceiveTrafficDescrIndex,\n            atmVclTransmitTrafficDescrIndex.\n
    \           In addition, if the local VCL end-point\n            is also the VCC
    end-point:\n            atmVccAalType.\n            In addition, for AAL5 connections
    only:\n            atmVccAal5CpcsTransmitSduSize,\n            atmVccAal5CpcsReceiveSduSize,
    and\n            atmVccAal5EncapsType. (The existence\n            of these objects
    imply the AAL connection type.).\n            The DESCRIPTION of atmVclEntry provides\n
    \           further guidance to row treatment in this table.\"\n          DEFVAL
    { createAndWait }\n                ::= {atmVclEntry 13}\n     atmVclCastType      OBJECT-TYPE\n
    \         SYNTAX         AtmConnCastType\n          MAX-ACCESS     read-create\n
    \         STATUS         current\n          DESCRIPTION\n           \"The connection
    topology type.\"\n          DEFVAL { p2p }\n                ::= {atmVclEntry 14}\n
    \    atmVclConnKind      OBJECT-TYPE\n          SYNTAX         AtmConnKind\n          MAX-ACCESS
    \    read-create\n          STATUS         current\n          DESCRIPTION\n           \"The
    use of call control.\"\n          DEFVAL { pvc }\n          ::= {atmVclEntry 15}\n
    \    --     ATM Virtual Path (VP) Cross Connect Table\n     -- This table contains
    configuration and state\n     -- information of point-to-point,\n     -- point-to-multipoint,
    or multipoint-to-multipoint\n     -- VP cross-connects for PVCs.\n     -- This
    table has read-create access and can be used\n     -- to cross-connect the VPLs
    together in an ATM switch\n     -- or network. The atmVpCrossConnectIndex\n     --
    is used to associate the related\n     -- VPLs that are cross-connected together.\n
    \    -- The ATM VP Cross Connect Table\n     -- models each bi-directional VPC\n
    \    -- cross-connect as a set of entries in\n     -- the atmVpCrossConnectTable.
    A\n     -- point-to-point VPC cross-connect is modeled\n     -- as one entry;
    a point-to-multipoint (N leafs) VPC\n     -- cross-connect as N entries in this
    table; and\n     -- a multipoint-to-multipoint (N parties) VPC cross-\n     --
    connect as N(N-1)/2 entries in this table.\n     -- In the latter cases, all the
    N (or N(N-1)/2) entries\n     -- are associated with a single VPC cross-connect
    by\n     -- having the same value of atmVpCrossConnectIndex.\n     --      _________________________________________\n
    \    --      |                                       |\n     --  Low |         ATM
    Switch or Network         | High\n     --  port|                                       |
    port\n     -- _____|>> from low to high VPC traffic flow >>|______\n     --      |<<
    from high to low VPC traffic flow <<|\n     --      |                                       |\n
    \    --      |_______________________________________|\n     --\n     -- The terms
    low and high are chosen to represent\n     -- numerical ordering of the two interfaces
    associated\n     -- with a VPC cross-connect. That is, the ATM interface\n     --
    with the lower value of ifIndex is termed 'low',\n     -- while the other ATM
    interface associated with the\n     -- VPC cross-connect is termed 'high'. This
    terminology\n     -- is used to provide directional information; for\n     --
    example, the atmVpCrossConnectL2HOperStatus applies\n     -- to the low->high
    direction, and\n     -- atmVpCrossConnectH2LOperStatus applies to the\n     --
    high->low  direction, as illustrated above.\n     atmVpCrossConnectIndexNext  OBJECT-TYPE\n
    \         SYNTAX         INTEGER (0..2147483647)\n          MAX-ACCESS     read-only\n
    \         STATUS         current\n          DESCRIPTION\n           \"This object
    contains an appropriate value to\n            be used for atmVpCrossConnectIndex
    when creating\n            entries in the atmVpCrossConnectTable.  The value\n
    \           0 indicates that no unassigned entries are\n            available.
    To obtain the atmVpCrossConnectIndex\n            value for a new entry, the manager
    issues a\n            management protocol retrieval operation to obtain\n            the
    current value of this object.  After each\n            retrieval, the agent should
    modify the value to\n            the next unassigned index.\n            After
    a manager retrieves a value the agent will\n            determine through its
    local policy when this index\n            value will be made available for reuse.\"\n
    \         ::= { atmMIBObjects 8 }\n     --  The ATM VP Cross Connect Table\n     atmVpCrossConnectTable
    OBJECT-TYPE\n          SYNTAX         SEQUENCE OF AtmVpCrossConnectEntry\n          MAX-ACCESS
    \    not-accessible\n          STATUS         current\n          DESCRIPTION\n
    \          \"The ATM VP Cross Connect table for PVCs.\n            An entry in
    this table models two\n            cross-connected VPLs.\n            Each VPL
    must have its atmConnKind set\n            to pvc(1).\"\n          ::= { atmMIBObjects
    9 }\n     atmVpCrossConnectEntry OBJECT-TYPE\n          SYNTAX         AtmVpCrossConnectEntry\n
    \         MAX-ACCESS     not-accessible\n          STATUS         current\n          DESCRIPTION\n
    \          \"An entry in the ATM VP Cross Connect table.\n            This entry
    is used to model a bi-directional\n            ATM VP cross-connect which cross-connects\n
    \           two VPLs.\n            Step-wise Procedures to set up a VP Cross-connect\n
    \           Once the entries in the atmVplTable are created,\n            the
    following procedures are used\n            to cross-connect the VPLs together.\n
    \          (1) The manager obtains a unique\n               atmVpCrossConnectIndex
    by reading the\n               atmVpCrossConnectIndexNext object.\n           (2)
    Next, the manager creates a set of one\n               or more rows in the ATM
    VP Cross Connect\n               Table, one for each cross-connection between\n
    \              two VPLs.  Each row is indexed by the ATM\n               interface
    port numbers and VPI values of the\n               two ends of that cross-connection.\n
    \              This set of rows specifies the topology of the\n               VPC
    cross-connect and is identified by a single\n               value of atmVpCrossConnectIndex.\n
    \           Negotiated VP Cross-Connect Establishment\n          (2a) The manager
    creates a row in this table by\n               setting atmVpCrossConnectRowStatus
    to\n               createAndWait(5).  The agent checks the\n               requested
    topology and the mutual sanity of\n               the ATM traffic parameters and\n
    \              service categories, i.e., the row creation\n               fails
    if:\n               - the requested topology is incompatible with\n                 associated
    values of atmVplCastType,\n               - the requested topology is not supported\n
    \                by the agent,\n               - the traffic/service category
    parameter values\n                 associated with the requested row are\n                 incompatible
    with those of already existing\n                 rows for this VP cross-connect.\n
    \              [For example, for setting up\n               a point-to-point VP
    cross-connect, the\n               ATM traffic parameters in the receive direction\n
    \              of a VPL at the low end of the cross-connect\n               must
    equal to the traffic parameters in the\n               transmit direction of the
    other VPL at the\n               high end of the cross-connect,\n               otherwise,
    the row creation fails.]\n               The agent also checks for internal errors\n
    \              in building the cross-connect.\n               The atmVpCrossConnectIndex
    values in the\n               corresponding atmVplTable rows are filled\n               in
    by the agent at this point.\n          (2b) The manager promotes the row in the\n
    \              atmVpCrossConnectTable by setting\n               atmVpCrossConnectRowStatus
    to active(1).  If\n               this set is successful, the agent has reserved\n
    \              the resources specified by the ATM traffic\n               parameter
    and Service category values\n               for each direction of the VP cross-connect\n
    \              in an ATM switch or network.\n           (3) The manager sets the\n
    \              atmVpCrossConnectAdminStatus to up(1) in all\n               rows
    of this VP cross-connect to turn the\n               traffic flow on.\n            One-Shot
    VP Cross-Connect Establishment\n            A VP cross-connect may also be established
    in\n            one step by a set-request with all necessary\n            parameter
    values and atmVpCrossConnectRowStatus\n            set to createAndGo(4).\n            In
    contrast to the negotiated VP cross-connect\n            establishment which allows
    for detailed error\n            checking (i.e., set errors are explicitly linked\n
    \           to particular resource acquisition failures),\n            the one-shot
    VP cross-connect establishment\n            performs the setup on one operation
    but does not\n            have the advantage of step-wise error checking.\n            VP
    Cross-Connect Retirement\n            A VP cross-connect identified by a particular\n
    \           value of atmVpCrossConnectIndex is released by:\n           (1) Setting
    atmVpCrossConnectRowStatus of all\n               rows identified by this value
    of\n               atmVpCrossConnectIndex to destroy(6).\n               The agent
    may release all\n               associated resources, and the\n               atmVpCrossConnectIndex
    values in the\n               corresponding atmVplTable row are removed.\n               Note
    that a situation when only a subset of\n               the associated rows are
    deleted corresponds\n               to a VP topology change.\n           (2) After
    deletion of the appropriate\n               atmVpCrossConnectEntries, the manager
    may\n               set atmVplRowStatus to destroy(6) the\n               associated
    VPLs.  The agent releases\n               the resources and removes the associated\n
    \              rows in the atmVplTable.\n            VP Cross-connect Reconfiguration\n
    \           At the discretion of the agent, a VP\n            cross-connect may
    be reconfigured by\n            adding and/or deleting leafs to/from\n            the
    VP topology as per the VP cross-connect\n            establishment/retirement
    procedures.\n            Reconfiguration of traffic/service category parameter\n
    \           values requires release of the VP cross-connect\n            before
    those parameter values may by changed\n            for individual VPLs.\"\n          INDEX
    { atmVpCrossConnectIndex,\n                atmVpCrossConnectLowIfIndex,\n                atmVpCrossConnectLowVpi,\n
    \               atmVpCrossConnectHighIfIndex,\n                atmVpCrossConnectHighVpi
    }\n          ::= { atmVpCrossConnectTable 1 }\n     AtmVpCrossConnectEntry ::=
    SEQUENCE {\n          atmVpCrossConnectIndex          INTEGER,\n          atmVpCrossConnectLowIfIndex
    \    InterfaceIndex,\n          atmVpCrossConnectLowVpi         AtmVpIdentifier,\n
    \         atmVpCrossConnectHighIfIndex    InterfaceIndex,\n          atmVpCrossConnectHighVpi
    \       AtmVpIdentifier,\n          atmVpCrossConnectAdminStatus    AtmVorXAdminStatus,\n
    \         atmVpCrossConnectL2HOperStatus  AtmVorXOperStatus,\n          atmVpCrossConnectH2LOperStatus
    \ AtmVorXOperStatus,\n          atmVpCrossConnectL2HLastChange  AtmVorXLastChange,\n
    \         atmVpCrossConnectH2LLastChange  AtmVorXLastChange,\n          atmVpCrossConnectRowStatus
    \     RowStatus\n                  }\n     atmVpCrossConnectIndex OBJECT-TYPE\n
    \         SYNTAX         INTEGER (1..2147483647)\n          MAX-ACCESS     not-accessible\n
    \         STATUS         current\n          DESCRIPTION\n           \"A unique
    value to identify this VP cross-connect.\n            For each VPL associated
    with this cross-connect,\n            the agent reports this cross-connect index
    value\n            in the atmVplCrossConnectIdentifier attribute of\n            the
    corresponding atmVplTable entries.\"\n          ::= { atmVpCrossConnectEntry 1
    }\n     atmVpCrossConnectLowIfIndex OBJECT-TYPE\n          SYNTAX         InterfaceIndex\n
    \         MAX-ACCESS     not-accessible\n          STATUS         current\n          DESCRIPTION\n
    \          \"The ifIndex value of the ATM interface for\n            this VP cross-connect.
    The term low implies\n            that this ATM interface has the numerically
    lower\n            ifIndex value than the other ATM interface\n            identified
    in the same atmVpCrossConnectEntry.\"\n          ::= { atmVpCrossConnectEntry
    2 }\n     atmVpCrossConnectLowVpi OBJECT-TYPE\n          SYNTAX         AtmVpIdentifier\n
    \         MAX-ACCESS     not-accessible\n          STATUS         current\n          DESCRIPTION\n
    \          \"The VPI value at the ATM interface\n            associated with the
    VP cross-connect that is\n            identified by atmVpCrossConnectLowIfIndex.\"\n
    \         ::= { atmVpCrossConnectEntry 3 }\n     atmVpCrossConnectHighIfIndex
    OBJECT-TYPE\n          SYNTAX         InterfaceIndex\n          MAX-ACCESS     not-accessible\n
    \         STATUS  current\n          DESCRIPTION\n           \"The ifIndex value
    of the ATM interface for\n            this VP cross-connect. The term high implies
    that\n            this ATM interface has the numerically higher\n            ifIndex
    value than the  other ATM interface\n            identified in the same atmVpCrossConnectEntry.\"\n
    \         ::= { atmVpCrossConnectEntry 4 }\n     atmVpCrossConnectHighVpi OBJECT-TYPE\n
    \         SYNTAX         AtmVpIdentifier\n          MAX-ACCESS     not-accessible\n
    \         STATUS         current\n          DESCRIPTION\n           \"The VPI
    value at the ATM interface\n            associated with the VP cross-connect that
    is\n            identified by atmVpCrossConnectHighIfIndex.\"\n          ::= {
    atmVpCrossConnectEntry 5 }\n     atmVpCrossConnectAdminStatus OBJECT-TYPE\n          SYNTAX
    \        AtmVorXAdminStatus\n          MAX-ACCESS     read-create\n          STATUS
    \        current\n          DESCRIPTION\n           \"The desired administrative
    status of this\n            bi-directional VP cross-connect.\"\n          DEFVAL
    { down }\n          ::= { atmVpCrossConnectEntry 6 }\n     atmVpCrossConnectL2HOperStatus
    OBJECT-TYPE\n          SYNTAX         AtmVorXOperStatus\n          MAX-ACCESS
    \    read-only\n          STATUS         current\n          DESCRIPTION\n           \"The
    operational status of the VP cross-connect\n            in one direction; (i.e.,
    from the low to\n            high direction).\"\n          ::= { atmVpCrossConnectEntry
    7 }\n     atmVpCrossConnectH2LOperStatus OBJECT-TYPE\n          SYNTAX         AtmVorXOperStatus\n
    \         MAX-ACCESS     read-only\n          STATUS         current\n          DESCRIPTION\n
    \          \"The operational status of the VP cross-connect\n            in one
    direction; (i.e., from the high to\n            low direction).\"\n          ::=
    { atmVpCrossConnectEntry 8 }\n     atmVpCrossConnectL2HLastChange OBJECT-TYPE\n
    \         SYNTAX         AtmVorXLastChange\n          MAX-ACCESS     read-only\n
    \         STATUS         current\n          DESCRIPTION\n           \"The value
    of sysUpTime at the time this\n            VP cross-connect entered its current
    operational\n            state in the low to high direction.\"\n          ::=
    { atmVpCrossConnectEntry 9 }\n     atmVpCrossConnectH2LLastChange OBJECT-TYPE\n
    \         SYNTAX         AtmVorXLastChange\n          MAX-ACCESS     read-only\n
    \         STATUS         current\n          DESCRIPTION\n            \"The value
    of sysUpTime at the time this\n            VP cross-connect entered its current
    operational\n            in the high to low direction.\"\n          ::= { atmVpCrossConnectEntry
    10 }\n     atmVpCrossConnectRowStatus OBJECT-TYPE\n          SYNTAX         RowStatus\n
    \         MAX-ACCESS     read-create\n          STATUS         current\n          DESCRIPTION\n
    \          \"The status of this entry in the\n            atmVpCrossConnectTable.
    \ This object is used to\n            create a cross-connect for cross-connecting\n
    \           VPLs which are created using the atmVplTable\n            or to change
    or delete an existing cross-connect.\n            This object must be initially
    set\n            to `createAndWait' or 'createAndGo'.\n            To turn on
    a VP cross-connect,\n            the atmVpCrossConnectAdminStatus\n            is
    set to `up'.\"\n          DEFVAL { createAndWait }\n          ::= { atmVpCrossConnectEntry
    11 }\n     --     ATM Virtual Channel (VC) Cross Connect Table\n     -- This table
    contains configuration and state\n     -- information of point-to-point,\n     --
    point-to-multipoint or multipoint-to-multipoint\n     -- VC cross-connects for
    PVCs.\n     -- This table has read-create access and is used\n     -- to cross-connect
    the VCLs together in an ATM switch\n     -- or network that belong to a VC connection.\n
    \    -- The atmVcCrossConnectIndex is used to associate\n     -- the related VCLs
    that are cross-connected together.\n     -- The model using step-wise procedures
    described for setting\n     -- up a VP cross-connect is also used for setting
    up\n     -- a VC cross-connect.\n     atmVcCrossConnectIndexNext  OBJECT-TYPE\n
    \         SYNTAX         INTEGER (0..2147483647)\n          MAX-ACCESS     read-only\n
    \         STATUS         current\n          DESCRIPTION\n           \"This object
    contains an appropriate value to\n            be used for atmVcCrossConnectIndex
    when creating\n            entries in the atmVcCrossConnectTable.  The value\n
    \           0 indicates that no unassigned entries are\n            available.
    To obtain the atmVcCrossConnectIndex\n            value for a new entry, the manager
    issues a\n            management protocol retrieval operation to obtain\n            the
    current value of this object.  After each\n            retrieval, the agent should
    modify the value to\n            the next unassigned index.\n            After
    a manager retrieves a value the agent will\n            determine through its
    local policy when this index\n            value will be made available for reuse.\"\n
    \         ::= { atmMIBObjects 10 }\n     --  The ATM VC Cross Connect Table\n
    \    atmVcCrossConnectTable OBJECT-TYPE\n          SYNTAX         SEQUENCE OF
    AtmVcCrossConnectEntry\n          MAX-ACCESS     not-accessible\n          STATUS
    \        current\n          DESCRIPTION\n           \"The ATM VC Cross Connect
    table for PVCs.\n            An entry in this table models two\n            cross-connected
    VCLs.\n            Each VCL must have its atmConnKind set\n            to pvc(1).\"\n
    \         ::= { atmMIBObjects 11 }\n     atmVcCrossConnectEntry OBJECT-TYPE\n
    \         SYNTAX       AtmVcCrossConnectEntry\n          MAX-ACCESS   not-accessible\n
    \         STATUS       current\n          DESCRIPTION\n           \"An entry in
    the ATM VC Cross Connect table.\n            This entry is used to model a bi-directional
    ATM\n            VC cross-connect cross-connecting two end points.\n            Step-wise
    Procedures to set up a VC Cross-connect\n            Once the entries in the atmVclTable
    are created,\n            the following procedures are used\n            to cross-connect
    the VCLs together to\n            form a VCC segment.\n           (1) The manager
    obtains a unique\n               atmVcCrossConnectIndex by reading the\n               atmVcCrossConnectIndexNext
    object.\n           (2) Next, the manager creates a set of one\n               or
    more rows in the ATM VC Cross Connect\n               Table, one for each cross-connection
    between\n               two VCLs.  Each row is indexed by the ATM\n               interface
    port numbers and VPI/VCI values of\n               the two ends of that cross-connection.\n
    \              This set of rows specifies the topology of the\n               VCC
    cross-connect and is identified by a single\n               value of atmVcCrossConnectIndex.\n
    \           Negotiated VC Cross-Connect Establishment\n          (2a) The manager
    creates a row in this table by\n               setting atmVcCrossConnectRowStatus
    to\n               createAndWait(5).  The agent checks the\n               requested
    topology and the mutual sanity of\n               the ATM traffic parameters and\n
    \              service categories, i.e., the row creation\n               fails
    if:\n               - the requested topology is incompatible with\n                 associated
    values of atmVclCastType,\n               - the requested topology is not supported\n
    \                by the agent,\n               - the traffic/service category
    parameter values\n                 associated with the requested row are\n                 incompatible
    with those of already existing\n                 rows for this VC cross-connect.\n
    \              [For example, for setting up\n               a point-to-point VC
    cross-connect, the\n               ATM traffic parameters in the receive direction\n
    \              of a VCL at the low end of the cross-connect\n               must
    equal to the traffic parameters in the\n               transmit direction of the
    other VCL at the\n               high end of the cross-connect,\n               otherwise,
    the row creation fails.]\n               The agent also checks for internal errors\n
    \              in building the cross-connect.\n               The atmVcCrossConnectIndex
    values in the\n               corresponding atmVclTable rows are filled\n               in
    by the agent at this point.\n          (2b) The manager promotes the row in the\n
    \              atmVcCrossConnectTable by setting\n               atmVcCrossConnectRowStatus
    to active(1).  If\n               this set is successful, the agent has reserved\n
    \              the resources specified by the ATM traffic\n               parameter
    and Service category values\n               for each direction of the VC cross-connect\n
    \              in an ATM switch or network.\n           (3) The manager sets the\n
    \              atmVcCrossConnectAdminStatus to up(1)\n               in all rows
    of this VC cross-connect to\n               turn the traffic flow on.\n            One-Shot
    VC Cross-Connect Establishment\n            A VC cross-connect may also be established
    in\n            one step by a set-request with all necessary\n            parameter
    values and atmVcCrossConnectRowStatus\n            set to createAndGo(4).\n            In
    contrast to the negotiated VC cross-connect\n            establishment which allows
    for detailed error\n            checking i.e., set errors are explicitly linked
    to\n            particular resource acquisition failures), the\n            one-shot
    VC cross-connect establishment\n            performs the setup on one operation
    but does\n            not have the advantage of step-wise error\n            checking.\n
    \           VC Cross-Connect Retirement\n            A VC cross-connect identified
    by a particular\n            value of atmVcCrossConnectIndex is released by:\n
    \          (1) Setting atmVcCrossConnectRowStatus of all rows\n               identified
    by this value of\n               atmVcCrossConnectIndex to destroy(6).\n               The
    agent may release all\n               associated resources, and the\n               atmVcCrossConnectIndex
    values in the\n               corresponding atmVclTable row are removed.\n               Note
    that a situation when only a subset of\n               the associated rows are
    deleted corresponds\n               to a VC topology change.\n           (2) After
    deletion of the appropriate\n               atmVcCrossConnectEntries, the manager
    may\n               set atmVclRowStatus to destroy(6) the\n               associated
    VCLs.  The agent releases\n               the resources and removes the associated\n
    \              rows in the atmVclTable.\n            VC Cross-Connect Reconfiguration\n
    \           At the discretion of the agent, a VC\n            cross-connect may
    be reconfigured by\n            adding and/or deleting leafs to/from\n            the
    VC topology as per the VC cross-connect\n            establishment/retirement
    procedures.\n            Reconfiguration of traffic/service category parameter\n
    \           values requires release of the VC cross-connect\n            before
    those parameter values may by changed\n            for individual VCLs.\"\n          INDEX
    { atmVcCrossConnectIndex,\n                atmVcCrossConnectLowIfIndex,\n                atmVcCrossConnectLowVpi,\n
    \               atmVcCrossConnectLowVci,\n                atmVcCrossConnectHighIfIndex,\n
    \               atmVcCrossConnectHighVpi,\n                atmVcCrossConnectHighVci
    }\n          ::= { atmVcCrossConnectTable 1 }\n     AtmVcCrossConnectEntry ::=
    SEQUENCE {\n          atmVcCrossConnectIndex          INTEGER,\n          atmVcCrossConnectLowIfIndex
    \    InterfaceIndex,\n          atmVcCrossConnectLowVpi         AtmVpIdentifier,\n
    \         atmVcCrossConnectLowVci         AtmVcIdentifier,\n          atmVcCrossConnectHighIfIndex
    \   InterfaceIndex,\n          atmVcCrossConnectHighVpi        AtmVpIdentifier,\n
    \         atmVcCrossConnectHighVci        AtmVcIdentifier,\n          atmVcCrossConnectAdminStatus
    \   AtmVorXAdminStatus,\n          atmVcCrossConnectL2HOperStatus  AtmVorXOperStatus,\n
    \         atmVcCrossConnectH2LOperStatus  AtmVorXOperStatus,\n          atmVcCrossConnectL2HLastChange
    \ AtmVorXLastChange,\n          atmVcCrossConnectH2LLastChange  AtmVorXLastChange,\n
    \         atmVcCrossConnectRowStatus      RowStatus\n                  }\n     atmVcCrossConnectIndex
    OBJECT-TYPE\n          SYNTAX         INTEGER (1..2147483647)\n          MAX-ACCESS
    \    not-accessible\n          STATUS         current\n          DESCRIPTION\n
    \          \"A unique value to identify this VC cross-connect.\n            For
    each VCL associated with this cross-connect,\n            the agent reports this
    cross-connect index value\n            in the atmVclCrossConnectIdentifier attribute
    of\n            the corresponding atmVclTable entries.\"\n          ::= { atmVcCrossConnectEntry
    1 }\n     atmVcCrossConnectLowIfIndex OBJECT-TYPE\n          SYNTAX         InterfaceIndex\n
    \         MAX-ACCESS     not-accessible\n          STATUS         current\n          DESCRIPTION\n
    \          \"The ifIndex value of the ATM interface for this\n            VC cross-connect.
    The term low implies\n            that this ATM interface has the numerically
    lower\n            ifIndex value than the other ATM interface\n            identified
    in the same atmVcCrossConnectEntry.\"\n          ::= { atmVcCrossConnectEntry
    2 }\n     atmVcCrossConnectLowVpi OBJECT-TYPE\n          SYNTAX         AtmVpIdentifier\n
    \         MAX-ACCESS     not-accessible\n          STATUS         current\n          DESCRIPTION\n
    \          \"The VPI value at the ATM interface\n            associated with the
    VC cross-connect that is\n            identified by atmVcCrossConnectLowIfIndex.\"\n
    \         ::= { atmVcCrossConnectEntry 3 }\n     atmVcCrossConnectLowVci OBJECT-TYPE\n
    \         SYNTAX         AtmVcIdentifier\n          MAX-ACCESS     not-accessible\n
    \         STATUS         current\n          DESCRIPTION\n           \"The VCI
    value at the ATM interface\n            associated with this VC cross-connect
    that is\n            identified by atmVcCrossConnectLowIfIndex.\"\n          ::=
    { atmVcCrossConnectEntry 4 }\n     atmVcCrossConnectHighIfIndex OBJECT-TYPE\n
    \         SYNTAX         InterfaceIndex\n          MAX-ACCESS     not-accessible\n
    \         STATUS         current\n          DESCRIPTION\n           \"The ifIndex
    value for the ATM interface for\n            this VC cross-connect. The term high
    implies\n            that this ATM interface has the numerically higher\n            ifIndex
    value than the other ATM interface\n            identified in the same atmVcCrossConnectEntry.\"\n
    \         ::= { atmVcCrossConnectEntry 5 }\n     atmVcCrossConnectHighVpi OBJECT-TYPE\n
    \         SYNTAX         AtmVpIdentifier\n          MAX-ACCESS     not-accessible\n
    \         STATUS         current\n          DESCRIPTION\n           \"The VPI
    value at the ATM interface\n            associated with the VC cross-connect that
    is\n            identified by atmVcCrossConnectHighIfIndex.\"\n          ::= {
    atmVcCrossConnectEntry 6 }\n     atmVcCrossConnectHighVci OBJECT-TYPE\n          SYNTAX
    \        AtmVcIdentifier\n          MAX-ACCESS     not-accessible\n          STATUS
    \        current\n          DESCRIPTION\n           \"The VCI value at the ATM
    interface\n            associated with the VC cross-connect that is\n            identified
    by atmVcCrossConnectHighIfIndex.\"\n          ::= { atmVcCrossConnectEntry 7 }\n
    \    atmVcCrossConnectAdminStatus OBJECT-TYPE\n          SYNTAX         AtmVorXAdminStatus\n
    \         MAX-ACCESS     read-create\n          STATUS         current\n          DESCRIPTION\n
    \          \"The desired administrative status of this\n            bi-directional
    VC cross-connect.\"\n          DEFVAL { down }\n          ::= { atmVcCrossConnectEntry
    8 }\n     atmVcCrossConnectL2HOperStatus OBJECT-TYPE\n          SYNTAX         AtmVorXOperStatus\n
    \         MAX-ACCESS     read-only\n          STATUS         current\n          DESCRIPTION\n
    \          \"The current operational status of the\n            VC cross-connect
    in one direction; (i.e.,\n            from the low to high direction).\"\n          ::=
    { atmVcCrossConnectEntry 9 }\n     atmVcCrossConnectH2LOperStatus OBJECT-TYPE\n
    \         SYNTAX         AtmVorXOperStatus\n          MAX-ACCESS     read-only\n
    \         STATUS         current\n          DESCRIPTION\n           \"The current
    operational status of the\n            VC cross-connect in one direction; (i.e.,\n
    \           from the high to low direction).\"\n          ::= { atmVcCrossConnectEntry
    10 }\n     atmVcCrossConnectL2HLastChange OBJECT-TYPE\n          SYNTAX         AtmVorXLastChange\n
    \         MAX-ACCESS     read-only\n          STATUS         current\n          DESCRIPTION\n
    \          \"The value of sysUpTime at the time this\n            VC cross-connect
    entered its current\n            operational state in low to high direction.\"\n
    \         ::= { atmVcCrossConnectEntry 11 }\n     atmVcCrossConnectH2LLastChange
    OBJECT-TYPE\n          SYNTAX         AtmVorXLastChange\n          MAX-ACCESS
    \    read-only\n          STATUS         current\n          DESCRIPTION\n           \"The
    value of sysUpTime at the time this\n            VC cross-connect entered its
    current\n            operational state in high to low direction.\"\n          ::=
    { atmVcCrossConnectEntry 12 }\n     atmVcCrossConnectRowStatus OBJECT-TYPE\n          SYNTAX
    \        RowStatus\n          MAX-ACCESS     read-create\n          STATUS         current\n
    \         DESCRIPTION\n           \"The status of this entry in the\n            atmVcCrossConnectTable.
    \ This object is used to\n            create a new cross-connect for cross-connecting\n
    \           VCLs which are created using the atmVclTable\n            or to change
    or delete existing cross-connect.\n            This object must be initially set
    to\n            `createAndWait' or 'createAndGo'.\n            To turn on a VC
    cross-connect,\n            the atmVcCrossConnectAdminStatus\n            is set
    to `up'.\"\n          DEFVAL { createAndWait }\n          ::= { atmVcCrossConnectEntry
    13 }\n     -- AAL5 Virtual Channel Connection Performance Statistics\n     --
    Table\n     -- This table contains the AAL5\n     -- performance statistics of
    a VCC at the\n     -- interface associated with an AAL5 entity in an ATM\n     --
    host or ATM switch.\n     aal5VccTable        OBJECT-TYPE\n          SYNTAX         SEQUENCE
    OF Aal5VccEntry\n          MAX-ACCESS     not-accessible\n          STATUS         current\n
    \         DESCRIPTION\n           \"This table contains AAL5 VCC performance\n
    \           parameters.\"\n          ::= { atmMIBObjects 12 }\n     aal5VccEntry
    \       OBJECT-TYPE\n          SYNTAX         Aal5VccEntry\n          MAX-ACCESS
    \    not-accessible\n          STATUS         current\n          DESCRIPTION\n
    \          \"This list contains the AAL5 VCC\n            performance parameters
    and is indexed\n            by ifIndex values of AAL5 interfaces\n            and
    the associated VPI/VCI values.\"\n          INDEX { ifIndex, aal5VccVpi, aal5VccVci
    }\n          ::= { aal5VccTable 1 }\n     Aal5VccEntry    ::= SEQUENCE  {\n          aal5VccVpi
    \            AtmVpIdentifier,\n          aal5VccVci             AtmVcIdentifier,\n
    \         aal5VccCrcErrors       Counter32,\n          aal5VccSarTimeOuts     Counter32,\n
    \         aal5VccOverSizedSDUs   Counter32\n               }\n     aal5VccVpi
    \         OBJECT-TYPE\n          SYNTAX         AtmVpIdentifier\n          MAX-ACCESS
    \    not-accessible\n          STATUS         current\n          DESCRIPTION\n
    \          \"The VPI value of the AAL5 VCC at the\n            interface identified
    by the ifIndex.\"\n          ::= { aal5VccEntry 1 }\n     aal5VccVci          OBJECT-TYPE\n
    \         SYNTAX         AtmVcIdentifier\n          MAX-ACCESS     not-accessible\n
    \         STATUS         current\n          DESCRIPTION\n           \"The VCI
    value of the AAL5 VCC at the\n            interface identified by the ifIndex.\"\n
    \         ::= { aal5VccEntry 2 }\n     aal5VccCrcErrors    OBJECT-TYPE\n          SYNTAX
    \        Counter32\n          MAX-ACCESS     read-only\n          STATUS         current\n
    \         DESCRIPTION\n           \"The number of AAL5 CPCS PDUs received with\n
    \           CRC-32 errors on this AAL5 VCC at the\n            interface associated
    with an AAL5 entity.\"\n          ::= { aal5VccEntry 3 }\n     aal5VccSarTimeOuts
    \ OBJECT-TYPE\n          SYNTAX         Counter32\n          MAX-ACCESS     read-only\n
    \         STATUS         current\n          DESCRIPTION\n           \"The number
    of partially re-assembled AAL5\n            CPCS PDUs which were discarded\n            on
    this AAL5 VCC at the interface associated\n            with an AAL5 entity because
    they\n            were not fully re-assembled within the\n            required
    time period.  If the re-assembly\n            timer is not supported, then this
    object\n            contains a zero value.\"\n          ::= { aal5VccEntry 4 }\n
    \    aal5VccOverSizedSDUs OBJECT-TYPE\n          SYNTAX         Counter32\n          MAX-ACCESS
    \    read-only\n          STATUS         current\n          DESCRIPTION\n           \"The
    number of AAL5 CPCS PDUs discarded\n            on this AAL5 VCC at the interface\n
    \           associated with an AAL5 entity because the\n            AAL5 SDUs
    were too large.\"\n          ::= { aal5VccEntry 5 }\n     --\n     -- The following
    object may be used in conjunction with\n     -- the atmTrafficDescrParamTable
    for the creation of\n     -- new table entries.\n     --\n     atmTrafficDescrParamIndexNext
    \ OBJECT-TYPE\n          SYNTAX         INTEGER (0..2147483647)\n          MAX-ACCESS
    \    read-only\n          STATUS         current\n          DESCRIPTION\n           \"This
    object contains an appropriate value to\n            be used for atmTrafficDescrParamIndex
    when\n            creating entries in the\n            atmTrafficDescrParamTable.\n
    \           The value 0 indicates that no unassigned\n            entries are
    available. To obtain the\n            atmTrafficDescrParamIndex value for a new\n
    \           entry, the manager issues a management\n            protocol retrieval
    operation to obtain the\n            current value of this object.  After each\n
    \           retrieval, the agent should modify the value\n            to the next
    unassigned index.\n            After a manager retrieves a value the agent will\n
    \           determine through its local policy when this index\n            value
    will be made available for reuse.\"\n          ::= { atmMIBObjects 13 }\n     --
    Conformance Information\n     atmMIBConformance   OBJECT IDENTIFIER ::= { atmMIB
    2 }\n     atmMIBGroups        OBJECT IDENTIFIER\n                                ::=
    { atmMIBConformance 1 }\n     atmMIBCompliances   OBJECT IDENTIFIER\n                                ::=
    { atmMIBConformance 2 }\n     -- Compliance Statements\n     atmMIBCompliance2
    \   MODULE-COMPLIANCE\n          STATUS         current\n          DESCRIPTION\n
    \           \"The compliance statement for SNMP entities\n             including
    networks which have ATM and\n             AAL5 interfaces.\"\n          MODULE
    -- this module\n     --\n     -- ****** Interface and Traffic Descriptor Support
    ***\n     --\n            MANDATORY-GROUPS  {atmInterfaceConfGroup2,\n                               atmTrafficDescrGroup2
    }\n            OBJECT         atmInterfaceMaxVpcs\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n            OBJECT
    \        atmInterfaceMaxVccs\n            MIN-ACCESS     read-only\n            DESCRIPTION\n
    \             \"Write access is not required.\"\n            OBJECT         atmInterfaceMaxActiveVpiBits\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\n               At the ATM UNI the maximum number of\n
    \              active VPI bits configured for use ranges\n               from
    0 to 8 only.\n               Implementations may support smaller ranges.\"\n            OBJECT
    \        atmInterfaceMaxActiveVciBits\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\n               Implementations
    may support smaller ranges.\"\n            OBJECT         atmInterfaceIlmiVpi\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmInterfaceIlmiVci\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required.\"\n
    \           OBJECT         atmInterfaceMyNeighborIpAddress\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required.\"\n
    \           OBJECT         atmInterfaceMyNeighborIfName\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required.\"\n
    \           OBJECT         atmInterfaceSubscrAddress\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n            OBJECT
    \        atmTrafficDescrParamIndexNext\n            DESCRIPTION\n              \"This
    object is only required for systems\n               that support the creation
    of entries in\n               the atmTrafficDescrParamTable.\"\n            OBJECT
    \        atmTrafficDescrType\n            MIN-ACCESS     read-only\n            DESCRIPTION\n
    \             \"Write access is not required.\"\n            OBJECT         atmTrafficDescrParam1\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmTrafficDescrParam2\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmTrafficDescrParam3\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmTrafficDescrParam4\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmTrafficDescrParam5\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmServiceCategory\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required.\"\n
    \           OBJECT         atmTrafficDescrRowStatus\n            SYNTAX         INTEGER
    {active(1)}\n                             -- subset of RowStatus\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required,
    and only one\n               of the six enumerated values for the\n               RowStatus
    textual convention need be\n               supported, specifically: active(1).\"\n
    \           OBJECT         atmTrafficFrameDiscard\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n     --\n
    \    -- ****** DS3 PLCP Support **************************\n     --\n            GROUP
    \         atmInterfaceDs3PlcpGroup\n            DESCRIPTION\n              \"This
    group is mandatory only for those\n               ATM interfaces which implement
    the\n               DS3 PLCP layer.\"\n     --\n     -- ****** TC Sublayer Support
    ********************************\n     --\n            GROUP          atmInterfaceTCGroup\n
    \           DESCRIPTION\n              \"This group is mandatory only for those\n
    \              ATM interfaces which implement the\n               TC Sublayer.\"\n
    \    --\n     -- ****** VPC Support *******************************\n     --\n
    \           GROUP          atmVpcTerminationGroup2\n            DESCRIPTION\n
    \             \"This group is mandatory only for those\n               ATM interfaces
    which implement ATM\n               VPLs that terminate VPCs (i.e., ones which\n
    \              are NOT cross-connected to other VPLs).\"\n            GROUP          atmVplCrossConnectGroup\n
    \           DESCRIPTION\n              \"This group is mandatory only for those\n
    \              ATM interfaces which implement ATM\n               VPLs that are
    not associated with VCLs\n               and are cross-connected to other VPLs\n
    \              for VPCs.\"\n            GROUP          atmVpPvcCrossConnectGroup\n
    \           DESCRIPTION\n              \"This group is mandatory only for those\n
    \              ATM interfaces which implement ATM\n               VPLs that are
    not associated with VCLs\n               and are cross-connected to other VPLs\n
    \              for permanent VPCs (i.e., PVCs).\n               This group is
    not used to crossconnect\n               a PVC with an SVC to form a Soft PVC.\"\n
    \           OBJECT         atmVplAdminStatus\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n            OBJECT
    \        atmVplReceiveTrafficDescrIndex\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n            OBJECT
    \        atmVplTransmitTrafficDescrIndex\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n            OBJECT
    \        atmVplRowStatus\n            SYNTAX         INTEGER {active(1)}\n                             --
    subset of RowStatus\n            MIN-ACCESS      read-only\n            DESCRIPTION\n
    \             \"Write access is not required, and only one\n               of
    the six enumerated values for the\n               RowStatus textual convention
    need be\n               supported, specifically: active(1).\"\n            OBJECT
    \        atmVplCastType\n            MIN-ACCESS     read-only\n            DESCRIPTION\n
    \             \"Write access is not required.\"\n            OBJECT         atmVplConnKind\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmVpCrossConnectAdminStatus\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmVpCrossConnectRowStatus\n
    \           SYNTAX         INTEGER {active(1)}\n                             --
    subset of RowStatus\n            MIN-ACCESS     read-only\n            DESCRIPTION\n
    \             \"Write access is not required, and only one\n               of
    the six enumerated values for the\n               RowStatus textual convention
    need be\n               supported, specifically: active(1).\"\n     --\n     --
    ****** VCC Support *******************************\n     --\n            GROUP
    \         atmVccTerminationGroup2\n            DESCRIPTION\n              \"This
    group is mandatory only for those\n               ATM interfaces which implement
    ATM\n               VCLs that terminate VCCs (i.e., ones which\n               are
    NOT cross-connected to other VCLs).\"\n            GROUP          atmVclCrossConnectGroup\n
    \           DESCRIPTION\n              \"This group is mandatory only for those\n
    \              ATM interfaces which implement ATM\n               VCLs that are
    cross-connected to other VCLs\n               for VCCs.\"\n            GROUP          atmVcPvcCrossConnectGroup\n
    \           DESCRIPTION\n              \"This group is mandatory only for those\n
    \              ATM interfaces which implement ATM\n               VCLs that are
    cross-connected to other\n               VCLs for permanent VCCs (i.e., PVCs).\n
    \              This group is not used to crossconnect\n               a PVC with
    an SVC to form a Soft PVC.\"\n            OBJECT         atmVclAdminStatus\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required.\"\n
    \           OBJECT         atmVclReceiveTrafficDescrIndex\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required.\"\n
    \           OBJECT         atmVclTransmitTrafficDescrIndex\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required.\"\n
    \           OBJECT         atmVccAalType\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n            OBJECT
    \        atmVclRowStatus\n            SYNTAX         INTEGER {active(1)}\n                             --
    subset of RowStatus\n            MIN-ACCESS     read-only\n            DESCRIPTION\n
    \             \"Write access is not required, and only one\n               of
    the six enumerated values for the\n               RowStatus textual convention
    need be\n               supported, specifically: active(1).\"\n            OBJECT
    \        atmVclCastType\n            MIN-ACCESS     read-only\n            DESCRIPTION\n
    \             \"Write access is not required.\"\n            OBJECT         atmVclConnKind\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmVcCrossConnectAdminStatus\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmVcCrossConnectRowStatus\n
    \           SYNTAX         INTEGER { active(1)}\n                             --
    subset of RowStatus\n            MIN-ACCESS     read-only\n            DESCRIPTION\n
    \             \"Write access is not required, and only one\n               of
    the six enumerated values for the\n               RowStatus textual convention
    need be\n               supported, specifically: active(1).\"\n     --\n     --
    ****** AAL5 Support ******************************\n     --\n            GROUP
    \         aal5VccGroup\n            DESCRIPTION\n              \"This group is
    mandatory for the\n               AAL5 virtual connections only.\"\n            OBJECT
    \        atmVccAal5CpcsTransmitSduSize\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n            OBJECT
    \        atmVccAal5CpcsReceiveSduSize\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n            OBJECT
    \        atmVccAal5EncapsType\n            MIN-ACCESS     read-only\n            DESCRIPTION\n
    \             \"Write access is not required.\"\n             ::= { atmMIBCompliances
    2 }\n     -- Units of Conformance\n     atmInterfaceDs3PlcpGroup    OBJECT-GROUP\n
    \           OBJECTS {atmInterfaceDs3PlcpSEFSs,\n                atmInterfaceDs3PlcpAlarmState,\n
    \               atmInterfaceDs3PlcpUASs}\n            STATUS     current\n            DESCRIPTION\n
    \              \"A collection of objects providing information\n                about
    DS3 PLCP layer at an ATM interface.\"\n            ::= { atmMIBGroups 3 }\n     atmInterfaceTCGroup
    \   OBJECT-GROUP\n            OBJECTS { atmInterfaceOCDEvents,\n                atmInterfaceTCAlarmState
    }\n            STATUS     current\n            DESCRIPTION\n               \"A
    collection of objects providing information\n                about TC sublayer
    at an ATM interface.\"\n            ::= { atmMIBGroups 4 }\n     aal5VccGroup
    \   OBJECT-GROUP\n            OBJECTS {atmVccAal5CpcsTransmitSduSize,\n                atmVccAal5CpcsReceiveSduSize,\n
    \               atmVccAal5EncapsType,\n                aal5VccCrcErrors, aal5VccSarTimeOuts,\n
    \               aal5VccOverSizedSDUs }\n            STATUS     current\n            DESCRIPTION\n
    \              \"A collection of objects providing\n                AAL5 configuration
    and performance statistics\n                of a VCC.\"\n            ::= { atmMIBGroups
    9 }\n     atmInterfaceConfGroup2    OBJECT-GROUP\n            OBJECTS {\n                  atmInterfaceMaxVpcs,
    atmInterfaceMaxVccs,\n                  atmInterfaceConfVpcs, atmInterfaceConfVccs,\n
    \                 atmInterfaceMaxActiveVpiBits,\n                  atmInterfaceMaxActiveVciBits,\n
    \                 atmInterfaceIlmiVpi,\n                  atmInterfaceIlmiVci,\n
    \                 atmInterfaceMyNeighborIpAddress,\n                  atmInterfaceMyNeighborIfName,\n
    \                 atmInterfaceCurrentMaxVpiBits,\n                  atmInterfaceCurrentMaxVciBits,\n
    \                 atmInterfaceSubscrAddress }\n            STATUS     current\n
    \           DESCRIPTION\n              \"A collection of objects providing configuration\n
    \              information about an ATM interface.\"\n            ::= { atmMIBGroups
    10 }\n     atmTrafficDescrGroup2    OBJECT-GROUP\n            OBJECTS {\n                atmTrafficDescrType,
    atmTrafficDescrParam1,\n                atmTrafficDescrParam2, atmTrafficDescrParam3,\n
    \               atmTrafficDescrParam4, atmTrafficDescrParam5,\n                atmTrafficDescrRowStatus,
    atmServiceCategory,\n                atmTrafficFrameDiscard,\n                atmTrafficDescrParamIndexNext
    }\n            STATUS     current\n            DESCRIPTION\n               \"A
    collection of objects providing information\n                about ATM traffic
    descriptor type and\n                the associated parameters.\"\n            ::=
    { atmMIBGroups 11 }\n     atmVpcTerminationGroup2    OBJECT-GROUP\n            OBJECTS
    \ {atmVplOperStatus, atmVplAdminStatus,\n                atmVplLastChange,\n                atmVplReceiveTrafficDescrIndex,\n
    \               atmVplTransmitTrafficDescrIndex,\n                atmVplRowStatus,
    atmVplCastType,\n                atmVplConnKind }\n            STATUS     current\n
    \           DESCRIPTION\n               \"A collection of objects providing information\n
    \               about a VPL at an ATM interface which\n                terminates
    a VPC (i.e., one which is NOT\n                cross-connected to other VPLs).\"\n
    \           ::= { atmMIBGroups 12 }\n     atmVccTerminationGroup2    OBJECT-GROUP\n
    \           OBJECTS {atmVclOperStatus, atmVclAdminStatus,\n                 atmVclLastChange,\n
    \                atmVclReceiveTrafficDescrIndex,\n                 atmVclTransmitTrafficDescrIndex,\n
    \                atmVccAalType, atmVclRowStatus,\n                 atmVclCastType,
    atmVclConnKind }\n            STATUS     current\n            DESCRIPTION\n               \"A
    collection of objects providing information\n                about a VCL at an
    ATM interface\n                which terminates a VCC (i.e., one which is\n                NOT
    cross-connected to other VCLs).\"\n            ::= { atmMIBGroups 13 }\n     atmVplCrossConnectGroup
    \   OBJECT-GROUP\n            OBJECTS { atmVplReceiveTrafficDescrIndex,\n                atmVplTransmitTrafficDescrIndex,\n
    \               atmVplOperStatus, atmVplLastChange,\n                atmVplRowStatus,\n
    \               atmVplCastType, atmVplConnKind }\n            STATUS     current\n
    \           DESCRIPTION\n               \"A collection of objects providing\n
    \               information about the VPLs that\n                are cross-connected
    together.\"\n            ::= { atmMIBGroups 14 }\n     atmVpPvcCrossConnectGroup
    \   OBJECT-GROUP\n            OBJECTS { atmVpCrossConnectAdminStatus,\n                atmVpCrossConnectL2HOperStatus,\n
    \               atmVpCrossConnectH2LOperStatus,\n                atmVpCrossConnectL2HLastChange,\n
    \               atmVpCrossConnectH2LLastChange,\n                atmVpCrossConnectRowStatus,\n
    \               atmVplCrossConnectIdentifier,\n                atmVpCrossConnectIndexNext
    }\n            STATUS     current\n            DESCRIPTION\n               \"A
    collection of objects providing\n                information about a VP cross-connect\n
    \               for PVCs. These objects are not used\n                for Soft
    PVCs or SVCs.\"\n            ::= { atmMIBGroups 15 }\n     atmVclCrossConnectGroup
    \   OBJECT-GROUP\n            OBJECTS { atmVclReceiveTrafficDescrIndex,\n                atmVclTransmitTrafficDescrIndex,\n
    \               atmVclOperStatus, atmVclLastChange,\n                atmVclRowStatus,\n
    \               atmVclCastType, atmVclConnKind }\n            STATUS     current\n
    \           DESCRIPTION\n               \"A collection of objects providing\n
    \               information about the VCLs that\n                are cross-connected
    together.\"\n            ::= { atmMIBGroups 16 }\n     atmVcPvcCrossConnectGroup
    \   OBJECT-GROUP\n            OBJECTS { atmVcCrossConnectAdminStatus,\n                atmVcCrossConnectL2HOperStatus,\n
    \               atmVcCrossConnectH2LOperStatus,\n                atmVcCrossConnectL2HLastChange,\n
    \               atmVcCrossConnectH2LLastChange,\n                atmVcCrossConnectRowStatus,\n
    \               atmVclCrossConnectIdentifier,\n                atmVcCrossConnectIndexNext
    }\n            STATUS     current\n            DESCRIPTION\n               \"A
    collection of objects providing\n                information about a VC cross-connect\n
    \               for PVCs. These objects are not used\n                for Soft
    PVCs or SVCs.\"\n            ::= { atmMIBGroups 17 }\n     -- Deprecated Definitions
    - Objects\n     -- atmInterfaceAddressType\n     -- atmTrafficQoSClass\n     --
    Deprecated Definitions - Compliance\n     atmMIBCompliance    MODULE-COMPLIANCE\n
    \         STATUS         deprecated\n          DESCRIPTION\n            \"The
    compliance statement for SNMP entities\n             including networks which
    have ATM and\n             AAL5 interfaces.\"\n          MODULE -- this module\n
    \           MANDATORY-GROUPS  {atmInterfaceConfGroup,\n                               atmTrafficDescrGroup}\n
    \           OBJECT         atmInterfaceMaxVpcs\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n            OBJECT
    \        atmInterfaceMaxVccs\n            MIN-ACCESS     read-only\n            DESCRIPTION\n
    \             \"Write access is not required.\"\n            OBJECT         atmInterfaceMaxActiveVpiBits\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmInterfaceMaxActiveVciBits\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmInterfaceIlmiVpi\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required.\"\n
    \           OBJECT         atmInterfaceIlmiVci\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n            OBJECT
    \        atmInterfaceMyNeighborIpAddress\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n            OBJECT
    \        atmInterfaceMyNeighborIfName\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n            OBJECT
    \        atmTrafficDescrType\n            MIN-ACCESS     read-only\n            DESCRIPTION\n
    \             \"Write access is not required.\"\n            OBJECT         atmTrafficDescrParam1\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmTrafficDescrParam2\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmTrafficDescrParam3\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmTrafficDescrParam4\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmTrafficDescrParam5\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmTrafficQoSClass\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required.\"\n
    \           OBJECT         atmTrafficDescrRowStatus\n            SYNTAX         INTEGER
    {active(1)}\n                             -- subset of RowStatus\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required,
    and only one\n               of the six enumerated values for the\n               RowStatus
    textual convention need be\n               supported, specifically: active(1).\"\n
    \           GROUP          atmInterfaceDs3PlcpGroup\n            DESCRIPTION\n
    \             \"This group is mandatory only for those\n               ATM interfaces
    which implement the\n               DS3 PLCP layer.\"\n            GROUP          atmInterfaceTCGroup\n
    \           DESCRIPTION\n              \"This group is mandatory only for those\n
    \              ATM interfaces which implement the\n               TC Sublayer.\"\n
    \           GROUP          atmVpcTerminationGroup\n            DESCRIPTION\n              \"This
    group is mandatory only for those\n               ATM interfaces which implement
    ATM\n               VPLs that terminate VPCs (i.e., ones which\n               are
    NOT cross-connected to other VPLs).\"\n            GROUP          atmVpCrossConnectGroup\n
    \           DESCRIPTION\n              \"This group is mandatory only for those\n
    \              ATM interfaces which implement ATM\n               VPLs that are
    not associated with VCLs\n               and are cross-connected to other VPLs.\"\n
    \           OBJECT         atmVplAdminStatus\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n            OBJECT
    \        atmVplReceiveTrafficDescrIndex\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n            OBJECT
    \        atmVplTransmitTrafficDescrIndex\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n            OBJECT
    \        atmVplRowStatus\n            SYNTAX         INTEGER {active(1)}\n                             --
    subset of RowStatus\n            MIN-ACCESS      read-only\n            DESCRIPTION\n
    \             \"Write access is not required, and only one\n               of
    the six enumerated values for the\n               RowStatus textual convention
    need be\n               supported, specifically: active(1).\"\n            OBJECT
    \        atmVpCrossConnectAdminStatus\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n            OBJECT
    \        atmVpCrossConnectRowStatus\n            SYNTAX         INTEGER {active(1)}\n
    \                            -- subset of RowStatus\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required, and only
    one\n               of the six enumerated values for the\n               RowStatus
    textual convention need be\n               supported, specifically: active(1).\"\n
    \           GROUP          atmVccTerminationGroup\n            DESCRIPTION\n              \"This
    group is mandatory only for those\n               ATM interfaces which implement
    ATM\n               VCLs that terminate VCCs (i.e., ones which\n               are
    NOT cross-connected to other VCLs).\"\n            GROUP          atmVcCrossConnectGroup\n
    \           DESCRIPTION\n              \"This group is mandatory only for those\n
    \              ATM interfaces which implement ATM\n               VCLs that are
    cross-connected to\n               other VCLs.\"\n            OBJECT         atmVclAdminStatus\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmVclReceiveTrafficDescrIndex\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmVclTransmitTrafficDescrIndex\n
    \           MIN-ACCESS     read-only\n            DESCRIPTION\n              \"Write
    access is not required.\"\n            OBJECT         atmVccAalType\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required.\"\n
    \           OBJECT         atmVclRowStatus\n            SYNTAX         INTEGER
    {active(1)}\n                             -- subset of RowStatus\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required,
    and only one\n               of the six enumerated values for the\n               RowStatus
    textual convention need be\n               supported, specifically: active(1).\"\n
    \           OBJECT         atmVcCrossConnectAdminStatus\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required.\"\n
    \           OBJECT         atmVcCrossConnectRowStatus\n            SYNTAX         INTEGER
    { active(1)}\n                             -- subset of RowStatus\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required,
    and only one\n               of the six enumerated values for the\n               RowStatus
    textual convention need be\n               supported, specifically: active(1).\"\n
    \           GROUP          aal5VccGroup\n            DESCRIPTION\n              \"This
    group is mandatory for the\n               AAL5 virtual connections only.\"\n
    \           OBJECT         atmVccAal5CpcsTransmitSduSize\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required.\"\n
    \           OBJECT         atmVccAal5CpcsReceiveSduSize\n            MIN-ACCESS
    \    read-only\n            DESCRIPTION\n              \"Write access is not required.\"\n
    \           OBJECT         atmVccAal5EncapsType\n            MIN-ACCESS     read-only\n
    \           DESCRIPTION\n              \"Write access is not required.\"\n             ::=
    { atmMIBCompliances 1 }\n     -- Deprecated Definitions - Groups\n     atmInterfaceConfGroup
    \   OBJECT-GROUP\n            OBJECTS {\n                  atmInterfaceMaxVpcs,
    atmInterfaceMaxVccs,\n                  atmInterfaceConfVpcs, atmInterfaceConfVccs,\n
    \                 atmInterfaceMaxActiveVpiBits,\n                  atmInterfaceMaxActiveVciBits,\n
    \                 atmInterfaceIlmiVpi,\n                  atmInterfaceIlmiVci,\n
    \                 atmInterfaceAddressType,\n                  atmInterfaceAdminAddress,\n
    \                 atmInterfaceMyNeighborIpAddress,\n                  atmInterfaceMyNeighborIfName
    }\n            STATUS     deprecated\n            DESCRIPTION\n              \"A
    collection of objects providing configuration\n               information about
    an ATM interface.\"\n            ::= { atmMIBGroups 1 }\n     atmTrafficDescrGroup
    \   OBJECT-GROUP\n            OBJECTS {\n                atmTrafficDescrType,
    atmTrafficDescrParam1,\n                atmTrafficDescrParam2, atmTrafficDescrParam3,\n
    \               atmTrafficDescrParam4, atmTrafficDescrParam5,\n                atmTrafficQoSClass,
    atmTrafficDescrRowStatus}\n            STATUS     deprecated\n            DESCRIPTION\n
    \              \"A collection of objects providing information\n                about
    ATM traffic descriptor type and\n                the associated parameters.\"\n
    \           ::= { atmMIBGroups 2 }\n     atmVpcTerminationGroup    OBJECT-GROUP\n
    \           OBJECTS  {atmVplOperStatus, atmVplAdminStatus,\n                atmVplLastChange,\n
    \               atmVplReceiveTrafficDescrIndex,\n                atmVplTransmitTrafficDescrIndex,\n
    \               atmVplRowStatus }\n            STATUS     deprecated\n            DESCRIPTION\n
    \              \"A collection of objects providing\n                information
    about a VPL at an ATM interface\n                which terminates a VPC\n                (i.e.,
    one which is NOT cross-connected\n                to other VPLs).\"\n            ::=
    { atmMIBGroups 5 }\n     atmVccTerminationGroup    OBJECT-GROUP\n            OBJECTS
    {atmVclOperStatus, atmVclAdminStatus,\n                atmVclLastChange,\n                 atmVclReceiveTrafficDescrIndex,\n
    \                atmVclTransmitTrafficDescrIndex,\n                 atmVccAalType,
    atmVclRowStatus }\n            STATUS     deprecated\n            DESCRIPTION\n
    \              \"A collection of objects providing information\n                about
    a VCL at an ATM interface\n                which terminates a VCC (i.e., one which
    is\n                NOT cross-connected to other VCLs).\"\n            ::= { atmMIBGroups
    6 }\n     atmVpCrossConnectGroup    OBJECT-GROUP\n            OBJECTS { atmVplReceiveTrafficDescrIndex,\n
    \               atmVplTransmitTrafficDescrIndex,\n                atmVplOperStatus,
    atmVplRowStatus,\n                atmVpCrossConnectAdminStatus,\n                atmVpCrossConnectL2HOperStatus,\n
    \               atmVpCrossConnectH2LOperStatus,\n                atmVpCrossConnectL2HLastChange,\n
    \               atmVpCrossConnectH2LLastChange,\n                atmVpCrossConnectRowStatus,\n
    \               atmVplCrossConnectIdentifier,\n                atmVpCrossConnectIndexNext
    }\n            STATUS     deprecated\n            DESCRIPTION\n               \"A
    collection of objects providing\n                information about a VP cross-connect\n
    \               and the associated VPLs that are\n                cross-connected
    together.\"\n            ::= { atmMIBGroups 7 }\n     atmVcCrossConnectGroup    OBJECT-GROUP\n
    \           OBJECTS { atmVclReceiveTrafficDescrIndex,\n                atmVclTransmitTrafficDescrIndex,\n
    \               atmVclOperStatus, atmVclRowStatus,\n                atmVcCrossConnectAdminStatus,\n
    \               atmVcCrossConnectL2HOperStatus,\n                atmVcCrossConnectH2LOperStatus,\n
    \               atmVcCrossConnectL2HLastChange,\n                atmVcCrossConnectH2LLastChange,\n
    \               atmVcCrossConnectRowStatus,\n                atmVclCrossConnectIdentifier,\n
    \               atmVcCrossConnectIndexNext }\n            STATUS     deprecated\n
    \           DESCRIPTION\n               \"A collection of objects providing\n
    \               information about a VC cross-connect\n                and the
    associated VCLs that are\n                cross-connected together.\"\n            ::=
    { atmMIBGroups 8 }\n     -- {atmMIB 3} has been used by [19].\n     END\n"
  title: 9.  Definitions
- contents:
  - "10.  Acknowledgments\n   This memo is the result of the work of the AToMMIB Working
    Group.\n"
  title: 10.  Acknowledgments
- contents:
  - "11.  References\n   [1]  Harrington, D., Presuhn, R. and B. Wijnen, \"An\n        Architecture
    for Describing SNMP Management Frameworks\", RFC\n        2271, January 1998.\n
    \  [2]  Rose, M. and K. McCloghrie, \"Structure and Identification of\n        Management
    Information for TCP/IP-based Internets\", STD 16, RFC\n        1155, May 1990.\n
    \  [3]  Rose, M. and K. McCloghrie, \"Concise MIB Definitions\", STD 16,\n        RFC
    1212, March 1991.\n   [4]  Rose, M., \"A Convention for Defining Traps for use
    with the\n        SNMP\", RFC 1215, March 1991.\n   [5]  SNMPv2 Working Group,
    Case, J., McCloghrie, K., Rose, M.  and S.\n        Waldbusser, \"Structure of
    Management Information for Version 2\n        of the Simple Network Management
    Protocol (SNMPv2)\", RFC 1902,\n        January 1996.\n   [6]  SNMPv2 Working
    Group, Case, J., McCloghrie, K., Rose, M.  and S.\n        Waldbusser, \"Textual
    Conventions for Version 2 of the Simple\n        Network Management Protocol (SNMPv2)\",
    RFC 1903, January 1996.\n   [7]  SNMPv2 Working Group, Case, J., McCloghrie, K.,
    Rose, M.  and S.\n        Waldbusser, \"Conformance Statements for Version 2 of
    the Simple\n        Network Management Protocol (SNMPv2)\", RFC 1904, January
    1996.\n   [8]  Case, J., Fedor, M., Schoffstall, M. and J. Davin, \"Simple\n        Network
    Management Protocol\", STD 15, RFC 1157, May 1990.\n   [9]  SNMPv2 Working Group,
    Case, J., McCloghrie, K., Rose, M.  and S.\n        Waldbusser, \"Introduction
    to Community-based SNMPv2\", RFC 1901,\n        January 1996.\n   [10] SNMPv2
    Working Group, Case, J., McCloghrie, K., Rose, M.  and S.\n        Waldbusser,
    \"Transport Mappings for Version 2 of the Simple\n        Network Management Protocol
    (SNMPv2)\", RFC 1906, January 1996.\n   [11] Case, J., Harrington D., Presuhn
    R. and B. Wijnen, \"Message\n        Processing and Dispatching for the Simple
    Network Management\n        Protocol (SNMP)\", RFC 2272, January 1998.\n   [12]
    Blumenthal, U. and B. Wijnen, \"User-based Security Model (USM)\n        for version
    3 of the Simple Network Management Protocol\n        (SNMPv3)\", RFC 2274, January
    1998.\n   [13] SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M.  and S.\n
    \       Waldbusser, \"Protocol Operations for Version 2 of the Simple\n        Network
    Management Protocol (SNMPv2)\", RFC 1905, January 1996.\n   [14] Levi, D., Meyer,
    P. and B. Stewart, MPv3 Applications\", RFC\n        2273, January 1998.\n   [15]
    Wijnen, B., Presuhn, R. and K. McCloghrie, \"View-based Access\n        Control
    Model (VACM) for the Simple Network Management Protocol\n        (SNMP)\", RFC
    2275, January 1998.\n   [16] McCloghrie, K. and M. Rose, Editors, \"Management
    Information\n        Base for Network Management of TCP/IP-based internets: MIB-II\",\n
    \       STD 17, RFC 1213, March 1991.\n   [17] McCloghrie, K. and F. Kastenholz,
    \"The Interfaces Group MIB\",\n        RFC 2233, November 1997.\n   [18] Brown,
    T. and K. Tesink, \"Definitions of Managed Objects for\n        SMDS Interfaces\",
    RFC 1694, May 1994.\n   [19] Noto, M., Spiegel, E. and K. Tesink, Editors, \"Definitions
    of\n        Textual Conventions and OBJECT-IDENTITIES for ATM Management\",\n
    \       RFC 2514, February 1999.\n   [20] ATM Forum, ATM User-Network Interface,
    Version 3.0 (UNI 3.0)\n        Specification, 1994.\n   [21] ATM Forum, B-ICI
    Specification, Version 2.0, af-bici-0013.002,\n        November 1995.\n   [22]
    \"ATM Forum Private Network-Network Interface Specification,\n        Version
    1.0 (PNNI 1.0)\", af-sig-0055.000, March 1996.\n   [23] \"ATM Forum Integrated
    Local Management Interface (ILMI)\n        Specification\", Version 4.0\", af-ilmi-0065.000,
    September 1996.\n   [24] Ahmed, M. and K. Tesink, \"Definitions of Managed Objects
    for ATM\n        Management Version 8.0 using SMIv2\", RFC 1695, August 1994.\n"
  title: 11.  References
- contents:
  - "12.  Security Considerations\n   There are a number of management objects defined
    in this MIB that\n   have a MAX-ACCESS clause of read-write and/or read-create.
    \ Such\n   objects may be considered sensitive or vulnerable in some network\n
    \  environments. The support for SET operations in a non-secure\n   environment
    without proper protection can have a negative effect on\n   network operations.\n
    \  The managed objects in this MIB contain sensitive information since,\n   collectively,
    they allow tracing and influencing of virtual\n   connections in ATM switches
    or networks and provide information of\n   their traffic characteristics.\n   It
    is thus important to control even GET access to these objects and\n   possibly
    to even encrypt the values of these object when sending them\n   over the network
    via SNMP. Not all versions of SNMP provide features\n   for such a secure environment.\n
    \  SNMPv1 by itself is not a secure environment. Even if the network\n   itself
    is secure (for example by using IPSec), even then, there is no\n   control as
    to who on the secure network is allowed to access and\n   GET/SET (read/change/create/delete)
    the objects in this MIB.\n   It is recommended that the implementers consider
    the security\n   features as provided by the SNMPv3 framework. Specifically, the
    use\n   of the User-based Security Model RFC 2274 [12] and the View-based\n   Access
    Control Model RFC 2275 [15] is recommended.\n   It is then a customer/user responsibility
    to ensure that the SNMP\n   entity giving access to an instance of this MIB, is
    properly\n   configured to give access to the objects only to those principals\n
    \  (users) that have legitimate rights to indeed GET or SET\n   (change/create/delete)
    them.\n"
  title: 12.  Security Considerations
- contents:
  - "13.  Author's Address\n   Kaj Tesink\n   Bellcore\n   331 Newman Springs Road\n
    \  P.O. Box 7020\n   Red Bank, NJ  07701-7020\n   Phone: (732) 758-5254\n   EMail:
    kaj@bellcore.com\n"
  title: 13.  Author's Address
- contents:
  - "14.  Intellectual Property\n   The IETF takes no position regarding the validity
    or scope of any\n   intellectual property or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; neither does it represent that it\n   has made any effort to
    identify any such rights.  Information on the\n   IETF's procedures with respect
    to rights in standards-track and\n   standards-related documentation can be found
    in BCP-11.  Copies of\n   claims of rights made available for publication and
    any assurances of\n   licenses to be made available, or the result of an attempt
    made to\n   obtain a general license or permission for the use of such\n   proprietary
    rights by implementors or users of this specification can\n   be obtained from
    the IETF Secretariat.\n   The IETF invites any interested party to bring to its
    attention any\n   copyrights, patents or patent applications, or other proprietary\n
    \  rights which may cover technology that may be required to practice\n   this
    standard.  Please address the information to the IETF Executive\n   Director.\n"
  title: 14.  Intellectual Property
- contents:
  - "15.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 15.  Full Copyright Statement
