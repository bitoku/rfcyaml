Abstract This document defines the conceptual state machines for the Protocol for Carrying Authentication for Network Access (PANA).
The state machines consist of the PANA Client (PaC) state machine and the PANA Authentication Agent (PAA) state machine.
The two state machines show how PANA can interface with the Extensible Authentication Protocol (EAP) state machines.
The state machines and associated models are informative only.
Implementations may achieve the same results using different methods.
This document defines the state machines for the Protocol for Carrying Authentication for Network Access (PANA)
There are state machines for the PANA Client (PaC) and for the PANA Authentication Agent (PAA).
Each state machine is specified through a set of variables, procedures, and a state transition table.
The state machines and associated models described in this document are informative only.
Implementations may achieve similar results using different models and/or methods.
A PANA protocol execution consists of several exchanges to carry authentication information.
Specifically, EAP PDUs are transported inside PANA PDUs between PaC and PAA; that is, PANA represents a lower layer for EAP.
Thus, a PANA state machine bases its execution on an EAP state machine execution and vice versa.
Thus, this document also shows for each of PaC and PAA an interface between an EAP state machine and a PANA state machine and how this interface allows to exchange information between them.
Thanks to this interface, a PANA state machine can be informed about several events generated in an EAP state machine and make its execution conditional to its events.
The details of EAP state machines are out of the scope of this document.
Additional information can be found in [RFC4137].
Nevertheless, PANA state machines presented here have been coordinated with state machines shown by [RFC4137].
This document, apart from defining PaC and PAA state machines and their interfaces to EAP state machines (running on top of PANA), provides some implementation considerations, taking into account that it is not a specification but an implementation guideline.
This document reuses the terminology used in [RFC5191].
Interface between PANA and EAP PANA carries EAP messages exchanged between an EAP peer and an EAP authenticator (see Figure 1).
Thus, a PANA state machine interacts with an EAP state machine.
Two state machines are defined in this document: the PaC state machine (see Section 7) and the PAA state machine (see Section 8).
The definition of each state machine consists of a set of variables, procedures, and a state transition table.
A subset of these variables and procedures defines the interface between a PANA state machine and an EAP state machine, and the state transition table defines the PANA state machine behavior based on results obtained through them.
On the one hand, the PaC state machine interacts with an EAP peer state machine in order to carry out the PANA protocol on the PaC side.
On the other hand, the PAA state machine interacts with an EAP authenticator state machine to run the PANA protocol on the PAA side.
EAP Thus, two interfaces are needed between PANA state machines and EAP state machines, namely:  Interface between the PaC state machine and the EAP peer state machine  Interface between the PAA state machine and the EAP authenticator state machine
In general, the PaC and PAA state machines present EAP messages to the EAP peer and authenticator state machines through the interface, respectively.
The EAP peer and authenticator state machines process these messages and send EAP messages through the PaC and PAA state machines that are responsible for actually transmitting this message, respectively.
For example, [RFC4137] specifies four interfaces to lower layers:
an interface between the EAP peer state machine and a lower layer, (ii)
an interface between the EAP standalone authenticator state machine and a lower layer, (iii)
an interface between the EAP full authenticator state machine and a lower layer, and (iv)
an interface between the EAP backend authenticator state machine and a lower layer.
In this document, the PANA protocol is the lower layer of EAP and
only the first three interfaces are of interest to PANA.
The second and third interfaces are the same.
In this regard, the EAP standalone authenticator or the EAP full authenticator and its state machine in [RFC4137] are referred to as the EAP authenticator and the EAP authenticator state machine, respectively, in this document.
If an EAP peer and an EAP authenticator follow the state machines defined in [RFC4137], the interfaces between PANA and EAP could be based on that document.
Detailed definition of interfaces between PANA and EAP are described in the subsequent sections.
This document is intended to comply with the technical contents of any of the related documents ([RFC5191] and [RFC4137]).
When there is a discrepancy, the related documents are considered authoritative and they take precedence over this document.
The following state transition tables are completed mostly based on the conventions specified in [RFC4137].
The complete text is described below.
State transition tables are used to represent the operation of the protocol by a number of cooperating state machines each comprising a group of connected, mutually exclusive states.
Only one state of each machine can be active at any given time.
All permissible transitions from a given state to other states and associated actions performed when the transitions occur are represented by using triplets of (exit condition, exit action, exit state).
All conditions are expressions that evaluate to TRUE or FALSE; if a condition evaluates to TRUE, then the condition is met.
A state "ANY" is a wildcard state that matches any state in each state machine except those explicitly enumerated as exception states.
The exit conditions of a wildcard state are evaluated after all other exit conditions specific to the current state are met.
On exit from a state, the exit actions defined for the state and the exit condition are executed exactly once, in the order that they appear.
(Note that the procedures defined in [RFC4137] are executed on entry to a state, which is one major difference from this document.)
Each exit action is deemed to be atomic; i.e., execution of an exit action completes before the next sequential exit action starts to execute.
No exit action executes outside of a state block.
The exit actions in only one state block execute at a time even if the conditions for execution of state blocks in different state machines are satisfied.
All exit actions in an executing state block complete execution before the transition to and execution of any other state blocks.
The execution of any state block appears to be atomic with respect to the execution of any other state block, and the transition condition to that state from the previous state is TRUE when execution commences.
The order of execution of state blocks in different state machines is undefined except as constrained by their transition conditions.
A variable that is set to a particular value in a state block retains this value until a subsequent state block executes an exit action that modifies the value.
On completion of the transition from the previous state to the current state, all exit conditions occurring during the current state (including exit conditions defined for the wildcard state) are evaluated until an exit condition for that state is met.
Any event variable is set to TRUE when the corresponding event occurs and set to FALSE immediately after completion of the action associated with the current state and the event.
The interpretation of the special symbols and operators used is defined in [RFC4137].
There are following procedures, variables, message initializing rules, and state transitions that are common to both the PaC and PAA state machines.
Throughout this document, the character string "PANA MESSAGE NAME" matches any one of the abbreviated PANA message names, i.e., "PCI", "PAR", "PAN", "PTR", "PTA", "PNR", "PNA".
A null procedure, i.e., nothing is done.
A procedure to delete the PANA session as well as the corresponding EAP session and authorization state.
A procedure to create or modify authorization state.
It returns TRUE if authorization is successful.
It is assumed that Authorize() procedure of PaC state machine always returns TRUE.
In the case that a non key generating EAP method is used but a PANA SA is required after successful authentication (generate pana sa() returns TRUE), Authorize() procedure must return FALSE.
A procedure to send a PANA message to its peering PANA entity.
The "flag" argument contains one or more flags (e.g., Tx:PAR[C]) to be set to the message, except for 'R' (Request) flag.
The "AVPs" contains a list of names of optional AVPs to be inserted in the message, except for AUTH AVP.
This procedure includes the following action before actual transmission: if (flag S) PANA MESSAGE NAME.S
flag Set; if (flag C)
PANA MESSAGE NAME.C flag Set; if (flag A)
PANA MESSAGE NAME.A flag Set; if (flag P) PANA MESSAGE NAME.P flag Set; PANA MESSAGE NAME.insert avp(AVPs); if (key available())
A procedure to send an EAP message to the EAP state machine to which it interfaces.
A procedure to start the retransmission timer, reset RTX COUNTER variable to zero, and set an appropriate value to RTX MAX NUM variable.
Note that RTX MAX NUM is assumed to be set to the same default value for all messages.
However, implementations may also reset RTX MAX NUM in this procedure and its value may vary depending on the message that was sent.
A procedure to stop the retransmission timer.
A procedure to (re)start the PANA session timer.
TIMEOUT specifies the expiration time associated with the session timer.
Expiration of TIMEOUT will trigger a SESS TIMEOUT event.
A procedure to stop the current PANA session timer.
A procedure to retransmit a PANA message and increment RTX COUNTER by one(1).
A procedure to (re)start an EAP conversation resulting in the re  initialization of an existing EAP session.
A procedure to insert AVPs for each specified AVP name in the list of AVP names in the PANA message.
A procedure that checks whether an AVP of the specified AVP name exists in the specified PANA message and returns TRUE if the specified AVP is found, otherwise returns FALSE.
A procedure to check whether the EAP method being used generates keys and that a PANA SA will be established on successful authentication.
For the PaC, the procedure is also used to check and match the PRF and Integrity algorithm AVPs advertised by the PAA in PAR[S] message.
For the PAA, it is used to indicate whether a PRF and Integrity algorithm AVPs will be sent in the PAR[S].
This procedure will return TRUE if a PANA SA will be generated.
A procedure to check whether the PANA session has a PANA AUTH KEY.
If the state machine already has a PANA AUTH KEY, it returns TRUE.
If the state machine does not have a PANA AUTH KEY, it tries to retrieve a Master Session Key (MSK) from the EAP entity.
If an MSK is retrieved, it computes a PANA AUTH KEY from the MSK and returns TRUE.
This variable contains the Result Code AVP value in the PANA Auth  Request message in process.
When this variable carries PANA SUCCESS, it is assumed that the PAR message always contains an EAP Payload AVP that carries an EAP Success message.
NONCE SENT This variable is set to TRUE to indicate that a Nonce AVP has already been sent.
Otherwise, it is set to FALSE.
This variable contains the current number of retransmissions of the outstanding PANA message.
This event variable is set to TRUE when the specified PANA message is received from its peering PANA entity.
The "flag" contains a flag (e.g., Rx:PAR[C]), except for 'R' (Request) flag.
This event variable is set to TRUE when the retransmission timer is expired.
This event variable is set to TRUE when an initiation of re  authentication phase is triggered.
This event variable can only be set while in the OPEN state.
This event variable is set to TRUE when initiation of PANA session termination is triggered.
This event variable can only be set while in the OPEN state.
This event variable is set to TRUE when initiation of liveness test based on PANA Notification exchange is triggered.
This event variable can only be set while in the OPEN state.
This event is variable is set to TRUE when the session timer has expired.
LIFETIME SESS TIMEOUT Configurable value used by the PaC and PAA to close or disconnect an established session in the access phase.
This variable indicates the expiration of the session and is set to the value of Session Lifetime AVP if present in the last PANA Auth Request message in the case of the PaC.
Otherwise, it is assumed that the value is infinite and therefore has no expiration.
SESS TIMEOUT will cause the event variable
SESS TIMEOUT to be set.
ANY This event variable is set to TRUE when any event occurs.
Configurable Values RTX MAX NUM Configurable maximum for how many retransmissions should be attempted before aborting.
When a message is prepared for sending, it is initialized as follows:  For a request message, R flag of the header is set.
Otherwise, R flag is not set.
Other message header flags are not set.
They are set explicitly by specific state machine actions.
AVPs that are mandatory to be included in a message are inserted with appropriate values set.
The state machines defined in this document assume that the PaC and the PAA cache the last transmitted answer message.
This scheme is described in Section 5.2 of [RFC5191].
When the PaC or PAA receives a retransmitted or duplicate request, it would be able to resend the corresponding answer without any aid from the EAP layer.
However, to simplify the state machine description, this caching scheme is omitted in the state machines below.
In the case that there is not a corresponding answer to a retransmitted request, the request will be handled by the corresponding state machine.
The following transitions can occur at any state with exemptions explicitly noted.
RTX COUNTER< RTX MAX NUM
(Reach maximum number of transmissions)
The following transitions can occur on any exit condition within the specified state.
(Catch all event on closed state)
Interface between PaC and EAP Peer
This interface defines the interactions between a PaC and an EAP peer.
The interface serves as a mechanism to deliver EAP messages for the EAP peer.
It allows the EAP peer to receive EAP requests and send EAP responses via the PaC.
It also provides a mechanism to notify the EAP peer of PaC events and a mechanism to receive notification of EAP peer events.
The EAP message delivery mechanism as well as the event notification mechanism in this interface have direct correlation with the PaC state transition table entries.
These message delivery and event notifications mechanisms occur only within the context of their associated states or exit actions.
Delivering EAP Messages from PaC to EAP Peer
() procedure in the PaC state machine serves as the mechanism to deliver EAP messages contained in PANA Auth Request messages to the EAP peer.
This procedure is enabled only after an EAP restart event is notified to the EAP peer and before any event resulting in a termination of the EAP peer session.
In the case where the EAP peer follows the EAP peer state machine defined in [RFC4137], TxEAP() procedure sets eapReq variable of the EAP peer state machine and puts the EAP request in eapReqData variable of the EAP peer state machine.
Delivering EAP Messages from EAP Peer to PaC
An EAP message is delivered from the EAP peer to the PaC via EAP RESPONSE event variable.
The event variable is set when the EAP peer passes the EAP message to its lower layer.
In the case where the EAP peer follows the EAP peer state machine defined in [RFC4137], EAP RESPONSE event variable refers to eapResp variable of the EAP peer state machine and the EAP message is contained in eapRespData
variable of the EAP peer state machine.
EAP Restart Notification from PaC to EAP Peer
The EAP peer state machine defined in [RFC4137] has an initialization procedure before receiving an EAP message.
To initialize the EAP state machine, the PaC state machine defines an event notification mechanism to send an EAP (re)start event to the EAP peer.
The event notification is done via EAP Restart() procedure in the initialization action of the PaC state machine.
EAP Authentication Result Notification from EAP Peer to PaC
In order for the EAP peer to notify the PaC of an EAP authentication result, EAP SUCCESS and EAP FAILURE
In the case where the EAP peer follows the EAP peer state machine defined in [RFC4137], EAP SUCCESS and EAP FAILURE event variables refer to eapSuccess and eapFail variables of the EAP peer state machine, respectively.
In this case, if EAP SUCCESS event variable is set to TRUE and an MSK is generated by the EAP authentication method in use, eapKeyAvailable variable is set to TRUE and eapKeyData variable contains the MSK.
Note that EAP SUCCESS and EAP FAILURE event variables may be set to TRUE even before the PaC receives a PAR with a 'Complete' flag set from the PAA.
Alternate Failure Notification from PaC to
EAP Peer alt reject() procedure in the PaC state machine serves as the mechanism to deliver an authentication failure event to the EAP peer without accompanying an EAP message.
In the case where the EAP peer follows the EAP peer state machine defined in [RFC4137], alt reject() procedure sets altReject variable of the EAP peer state machine.
Note that the EAP peer state machine in [RFC4137] also defines altAccept variable; however, it is never used in PANA in which EAP  Success messages are reliably delivered by the last PANA Auth exchange.
Configurable Values FAILED SESS TIMEOUT
This is a configurable value that allows the PaC to determine whether a PaC authentication and authorization phase has stalled without an explicit EAP success or failure notification.
This event variable is set to TRUE when initiation of EAP based (re )authentication is triggered by the application.
This event variable is set to TRUE when the EAP peer determines that an EAP conversation completes with success.
This event variable is set to TRUE when the EAP peer determines that an EAP conversation completes with failure.
This event variable is set to TRUE when the EAP peer delivers an EAP message to the PaC.
This event accompanies an EAP message received from the EAP peer.
This event variable is set to TRUE when the PaC that has passed an EAP message to the EAP layer does not receive a subsequent EAP message from the EAP layer in a given period.
This provides a time limit for certain EAP methods where user interaction may be required.
This event variable is set to TRUE when the EAP peer indicates that it has silently discarded the last received EAP Request.
This event does not accompany any EAP message.
In the case where the EAP peer follows the EAP peer state machine defined in [RFC4137], this event variable refers to eapNoResp.
Note that this specification does not support silently discarding EAP messages.
They are treated as fatal errors instead.
This may have an impact on denial of service resistance.
This procedure returns TRUE to indicate whether the next EAP response will be carried in the pending PAN message for optimization.
This procedure informs the EAP peer of an authentication failure event without accompanying an EAP message.
() This is a procedure to start a timer to receive an EAP Response from the EAP peer.
() This is a procedure to stop a timer to receive an EAP Response from the EAP peer.
PAN[S]("PRF Algorithm", "Integrity Algorithm"); else
; if (generate pana sa())
PAN[S]("PRF Algorithm", "Integrity Algorithm"); else
PAN[S]("EAP Payload", "PRF Algorithm", "Integrity Algorithm"); else
EAP RespTimerStart(); if (NONCE SENT Unset)
PAN[]("EAP Payload", "Nonce"); NONCE SENT Set; } else
(); Authorize(); SessionTimerReStart (LIFETIME SESS TIMEOUT); EAP FAILURE
(re authentication initiated by PAA)
(Session termination initiated by PaC)
Interface between PAA and EAP Authenticator
The interface between a PAA and an EAP authenticator provides a mechanism to deliver EAP messages for the EAP authenticator as well as a mechanism to notify the EAP authenticator of PAA events and to receive notification of EAP authenticator events.
These message delivery and event notification mechanisms occur only within context of their associated states or exit actions.
EAP Restart Notification from PAA to EAP Authenticator
An EAP authenticator state machine defined in [RFC4137] has an initialization procedure before sending the first EAP request.
To initialize the EAP state machine, the PAA state machine defines an event notification mechanism to send an EAP (re)start event to the EAP authenticator.
The event notification is done via EAP Restart() procedure in the initialization action of the PAA state machine.
Delivering EAP Responses from PAA to EAP Authenticator TxEAP() procedure in the PAA state machine serves as the mechanism to deliver EAP Responses contained in PANA Auth Answer messages to the EAP authenticator.
This procedure is enabled only after an EAP restart event is notified to the EAP authenticator and before any event resulting in a termination of the EAP authenticator session.
In the case where the EAP authenticator follows the EAP authenticator state machines defined in [RFC4137], TxEAP() procedure sets eapResp variable of the EAP authenticator state machine and puts the EAP response in eapRespData
variable of the EAP authenticator state machine.
Delivering EAP Messages from EAP Authenticator to PAA An EAP request is delivered from the EAP authenticator to the PAA via EAP REQUEST event variable.
The event variable is set when the EAP authenticator passes the EAP request to its lower layer.
In the case where the EAP authenticator follows the EAP authenticator state machines defined in [RFC4137], EAP REQUEST event variable refers to eapReq variable of the EAP authenticator state machine and the EAP request is contained in eapReqData variable of the EAP authenticator state machine.
EAP Authentication Result Notification from EAP Authenticator to PAA
In order for the EAP authenticator to notify the PAA of the EAP authentication result, EAP SUCCESS, EAP FAILURE, and EAP TIMEOUT event variables are defined.
In the case where the EAP authenticator follows the EAP authenticator state machines defined in [RFC4137], EAP SUCCESS, EAP FAILURE, and EAP TIMEOUT event variables refer to eapSuccess, eapFail, and eapTimeout variables of the EAP authenticator state machine, respectively.
In this case, if EAP SUCCESS event variable is set to TRUE, an EAP Success message is contained in eapReqData variable of the EAP authenticator state machine, and additionally, eapKeyAvailable variable is set to TRUE and eapKeyData variable contains an MSK if the MSK is generated as a result of successful authentication by the EAP authentication method in use.
Similarly, if EAP FAILURE event variable is set to TRUE, an EAP Failure message is contained in eapReqData variable of the EAP authenticator state machine.
The PAA uses EAP SUCCESS and EAP FAILURE event variables as a trigger to send a PAR message to the PaC. 8.2.
This variable indicates whether the PAA is able to piggyback an EAP Request in the initial PANA Auth Request.
Otherwise, it is set to FALSE.
PAC FOUND This variable is set to TRUE as a result of a PAA initiated handshake.
This event variable is set to TRUE to indicate that the PAA initiates a re authentication with the PaC.
The re authentication timeout should be set to a value less than the session timeout carried in the Session Lifetime AVP if present.
This event variable is set to TRUE when an EAP conversation completes with success.
This event accompanies an EAP Success message passed from the EAP authenticator.
This event variable is set to TRUE when an EAP conversation completes with failure.
This event accompanies an EAP Failure message passed from the EAP authenticator.
This event variable is set to TRUE when the EAP authenticator delivers an EAP Request to the PAA.
This event accompanies an EAP Request message received from the EAP authenticator.
This event variable is set to TRUE when an EAP conversation times out without generating an EAP Success or an EAP Failure message.
This event does not accompany any EAP message.
This event variable is set to TRUE when the EAP authenticator indicates that it has silently discarded the last received EAP  Response message.
This event does not accompany any EAP message.
In the case where the EAP authenticator follows the EAP authenticator state machines defined in [RFC4137], this event variable refers to eapNoReq.
Procedures boolean new key available()
This is a procedure to check whether the PANA session has a new PANA AUTH KEY.
If the state machine already has a PANA AUTH KEY, it returns FALSE.
If the state machine does not have a PANA AUTH KEY, it tries to retrieve an MSK from the EAP entity.
If an MSK has been retrieved, it computes a PANA AUTH KEY from the MSK and returns TRUE.
Tx:PAR[S]("PRF Algorithm", "Integrity Algorithm"); else
PAR[S]("EAP Payload", "PRF Algorithm", "Integrity Algorithm");
PAN OR PAR (OPTIMIZED INIT
; NONCE SENT Set; }
WAIT FAIL PAN PANA AUTHENTICATION  REJECTED;
PANA SUCCESS; if (new key available())
PAR[C]("EAP Payload", "Key Id"); else
REJECTED; if (new key available())
PAR[C]("EAP Payload", "Key Id"); else
(re authentication initiated by PaC)
PAA and PaC Interface to Service Management Entity
In general, it is assumed that each device or network equipment has a PANA protocol stack available for use by other modules within the device or network equipment.
One such module is the Service Management Entity (SME).
The SME is a generic term for modules that manage different services (including network protocols) that are installed on a device or equipment.
To integrate the PANA protocol with the SME, it is recommended that a generic interface (i.e., the SME PANA interface) between the SME and the PANA protocol stack be provided by the implementation.
This interface should include common procedures such as startup, shutdown, and re authenticate signals.
It should also provide for extracting keying material.
For the PAA, the SME PANA interface should also provide a method for communicating filtering parameters to the Enforcement Point(s)
when cryptographic filtering is used.
The filtering parameters include keying material used for bootstrapping secured transport such as IPsec.
When a PAA device interacts with the backend authentication server using a AAA protocol, its SME may also provide an interface to the AAA protocol to obtain authorization parameters such as the authorization lifetime and additional filtering parameters.
This document's intent is to describe the PANA state machines fully.
To this end, any security concerns with this document are likely a reflection of security concerns with PANA itself.
