Abstract IKEv2 specifies that Extensible Authentication Protocol (EAP) authentication must be used together with responder authentication based on public key signatures.
This is necessary with old EAP methods that provide only unilateral authentication using, e.g., one  time passwords or token cards.
This document specifies how EAP methods that provide mutual authentication and key agreement can be used to provide extensible responder authentication for IKEv2 based on methods other than public key signatures.
The Extensible Authentication Protocol (EAP), defined in [RFC3748], is an authentication framework that supports multiple authentication mechanisms.
Today, EAP has been implemented at end hosts and routers that connect via switched circuits or dial up lines using PPP [RFC1661], IEEE 802 wired switches [IEEE8021X], and IEEE 802.11 wireless access points [IEEE80211i].
One of the advantages of the EAP architecture is its flexibility.
EAP is used to select a specific authentication mechanism, typically after the authenticator requests more information in order to determine the specific authentication method to be used.
Rather than requiring the authenticator (e.g., wireless LAN access point) to be updated to support each new authentication method, EAP permits the use of a backend authentication server that may implement some or all authentication methods.
IKEv2 ([RFC4306] and [RFC5996]) is a component of IPsec used for performing mutual authentication and establishing and maintaining Security Associations (SAs) for IPsec ESP and Authentication Header (AH).
In addition to supporting authentication using public key signatures and shared secrets, IKEv2 also supports EAP authentication.
IKEv2 provides EAP authentication since it was recognized that public key signatures and shared secrets are not flexible enough to meet the requirements of many deployment scenarios.
By using EAP, IKEv2 can leverage existing authentication infrastructure and credential databases, since EAP allows users to choose a method suitable for existing credentials, and also makes separation of the IKEv2 responder (VPN gateway) from the EAP authentication endpoint (backend Authentication, Authorization, and Accounting (AAA) server) easier.
Some older EAP methods are designed for unilateral authentication only (that is, EAP peer to EAP server).
These methods are used in conjunction with IKEv2 public key based authentication of the responder to the initiator.
It is expected that this approach is especially useful for "road warrior" VPN gateways that use, for instance, one time passwords or token cards to authenticate the clients.
However, most newer EAP methods, such as those typically used with IEEE 802.11i wireless LANs, provide mutual authentication and key agreement.
Currently, IKEv2 specifies that these EAP methods must also be used together with responder authentication based on public key signatures.
In order for the public key signature authentication of the gateway to be effective, a deployment of Public Key Infrastructure (PKI) is required, which has to include management of trust anchors on all supplicants.
In many environments, this is not realistic, and the security of the gateway public key is the same as the security of a self signed certificate.
Mutually authenticating EAP methods alone can provide a sufficient level of security in many circumstances, and in fact, in some deployments, IEEE 802.11i uses EAP without any PKI for authenticating the Wireless Local Area Network (WLAN) access points.
This document specifies how EAP methods that offer mutual authentication and key agreement can be used to provide responder authentication in IKEv2 completely based on EAP.
All notation in this protocol extension is taken from [RFC4306].
Numbered messages refer to the IKEv2 message sequence when using EAP.
Thus:  Message 1 is the request message of IKE SA INIT.
Message 2 is the response message of IKE SA INIT.
Message 3 is the first request of IKE AUTH.
Message 4 is the first response of IKE AUTH.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
In this section, we describe two scenarios for extensible authentication within IKEv2.
These scenarios are intended to be illustrative examples rather than specifying how things should be done.
Figure 1 shows a configuration where the EAP and the IKEv2 endpoints are co located.
Authenticating the IKEv2 responder using both EAP and public key signatures is redundant.
Offering EAP based authentication has the advantage that multiple different authentication and key exchange protocols are available with EAP with different security properties (such as strong password based protocols, protocols offering user identity confidentiality, and many more).
EAP and IKEv2 Endpoints Are Co Located Figure 2
shows a typical corporate network access scenario.
The initiator (client) interacts with the responder (VPN gateway) in the corporate network.
The EAP exchange within IKE runs between the client and the home AAA server.
As a result of a successful EAP authentication protocol run, session keys are established and sent from the AAA server to the VPN gateway, and then used to authenticate the IKEv2 SA with AUTH payloads.
The protocol used between the VPN gateway and AAA server could be, for instance, Diameter [RFC4072] or RADIUS [RFC3579].
See Section 6 for related security considerations.
Solution IKEv2 specifies that when the EAP method establishes a shared secret key, that key is used by both the initiator and responder to generate an AUTH payload (thus authenticating the IKEv2 SA set up by messages 1 and 2).
When used together with public key responder authentication, the responder is, in effect, authenticated using two different methods: the public key signature AUTH payload in message 4, and the EAP based AUTH payload later.
If the initiator does not wish to use public key based responder authentication, it includes an EAP ONLY AUTHENTICATION notification payload (16417) in message 3.
The Protocol ID and Security Parameter Index (SPI) size fields are set to zero, and there is no additional data associated with this notification.
If the responder supports this notification and chooses to use it, it omits the public key based AUTH payload and CERT payloads from message 4.
If the responder does not support the EAP ONLY AUTHENTICATION notification or does not wish to use it, it ignores the notification payload, and includes the AUTH payload in message 4.
In this case, the initiator MUST verify that payload and any associated certificates, as per [RFC4306].
When receiving message 4, the initiator MUST verify that the proposed EAP method is allowed by this specification, and MUST abort the protocol immediately otherwise.
Both the initiator and responder MUST verify that the EAP method actually used provided mutual authentication and established a shared secret key.
The AUTH payloads sent after EAP Success MUST use the EAP generated key, and MUST NOT use SK pi or SK pr (see Section 2.15 of [RFC5996]).
HDR, SAr1, KEr, Nr, [CERTREQ], [N(NAT DETECTION SOURCE IP), N(NAT DETECTION DESTINATION IP)]
HDR, SK { IDi, [IDr], SAi2, TSi, TSr, N(EAP ONLY AUTHENTICATION), [CP(CFG REQUEST)] }
HDR, SK { IDr, EAP(Request) } HDR, SK { EAP(Response) }
HDR, SK { EAP(Request) }
HDR, SK { EAP(Response) }
HDR, SK { EAP(Success) }
all notation in the above protocol sequence and elsewhere in this specification is as defined in [RFC4306], and see in particular Sec.
1.2 of [RFC4306] for payload types.
The NAT detection and Configuration payloads are shown for informative purposes only; they do not change how EAP authentication works.
An IKE SA that was set up with this extension can be resumed using the mechanism described in [RFC5723].
However, session resumption does not change the authentication method.
Therefore, during the IKE AUTH exchange of the resumed session, this extension MUST NOT be sent by the initiator.
Safe EAP Methods EAP methods to be used with this extension MUST have the following properties: 1.
The method provides mutual authentication of the peers.
The method is key generating.
The method is resistant to dictionary attacks.
The authors believe that the following EAP methods are secure when used with the current extension.
The list is not inclusive, and there are likely other safe methods that have not been listed here.
column denotes protocols where protected identity information may be sent between the EAP endpoints.
This third, optional property of the method provides protection against certain types of attacks (see Section 6.2 for an explanation), and therefore in some scenarios, methods that allow for channel binding are to be preferred.
It is noted that at the time of writing, even when such capabilities are provided, they are not fully specified in an interoperable manner.
In particular, no RFC specifies what identities should be sent under the protection of the channel binding mechanism, or what policy is to be used to correlate identities at the different layers.
This document defines a new IKEv2 Notification Payload type, EAP ONLY AUTHENTICATION, described in Section 3.
This payload has been assigned the type number 16417 from the "Status Types" range.
Security Considerations Security considerations applicable to all EAP methods are discussed in [RFC3748].
The EAP Key Management Framework [RFC5247] deals with issues that arise when EAP is used as a part of a larger system.
It is important to note that the IKEv2 SA is not authenticated by just running an EAP conversation: the crucial step is the AUTH payload based on the EAP generated key.
Thus, EAP methods that do not provide mutual authentication or establish a shared secret key MUST NOT be used with the modifications presented in this document.
Authentication with Separated IKEv2 Responder / EAP Server
As described in Section 2, the EAP conversation can terminate either at the IKEv2 responder or at a backend AAA server.
If the EAP method is terminated at the IKEv2 responder, then no key transport via the AAA infrastructure is required.
Pre shared secret and public key based authentication offered by IKEv2 is then replaced by a wider range of authentication and key exchange methods.
However, typically EAP will be used with a backend AAA server.
See [RFC5247] for a more complete discussion of the related security issues
; here we provide only a short summary.
When a backend server is used, there are actually two authentication exchanges: the EAP method between the client and the AAA server, and another authentication between the AAA server and IKEv2 gateway.
The AAA server authenticates the client using the selected EAP method, and they establish a session key.
The AAA server then sends this key to the IKEv2
gateway over a connection authenticated using, e.g., IPsec or Transport
Some EAP methods do not have any concept of pass through authenticator (e.g., Network Access Server (NAS) or IKEv2 gateway) identity, and these two authentications remain quite independent of each other.
That is, after the client has verified the AUTH payload sent by
the IKEv2 gateway, it knows that it is talking to SOME gateway trusted by the home AAA server, but not which one.
The situation is somewhat similar if a single cryptographic hardware accelerator, containing a single private key, would be shared between multiple IKEv2 gateways (perhaps in some kind of cluster configuration).
In particular, if one of the gateways is compromised, it can impersonate any of the other gateways towards the user (until the compromise is discovered and access rights revoked).
In some environments it is not desirable to trust the IKEv2 gateways this much (also known as the "Lying NAS Problem").
EAP methods that provide what is called "connection binding" or "channel binding" transport some identity or identities of the gateway (or WLAN access point / NAS) inside the EAP method.
Then the AAA server can check that it is indeed sending the key to the gateway expected by the client.
A potential solution is described in [EAP SERVICE], see also [EMU AAAPAY].
In some deployment configurations, AAA proxies may be present between the IKEv2 gateway and the backend AAA server.
These AAA proxies MUST be trusted for secure operation, and therefore SHOULD be avoided when possible; see Section 2.3.4 of [RFC4072] and Section 4.3.7 of [RFC3579] for more discussion.
Although the EAP payloads are encrypted and integrity protected with SK e/SK a, this does not provide any protection against active attackers.
Until the AUTH payload has been received and verified, a man in the middle can change the KEi/KEr payloads and eavesdrop or modify the EAP payloads.
In IEEE 802.11i wireless LANs, the EAP payloads are neither encrypted nor integrity protected (by the link layer), so EAP methods are typically designed to take that into account.
In particular, EAP methods that are vulnerable to dictionary attacks when used in WLANs are still vulnerable (to active attackers) when run inside IKEv2.
The rules in Section 4 are designed to avoid this potential vulnerability.
When using this protocol, each of the peers sends two identity values: 1.
An identity contained in the IKE ID payload.
An identity transferred within the specific EAP method's messages.
(IKEv2 omits the EAP Identity request/response pair, see Section 3.16 of [RFC5996].)
The first identity value can be used by the recipient to route AAA messages and/or to select authentication and EAP types.
But it is only the second identity that is directly authenticated by the EAP method.
The reader is referred to Section 2.16 of [RFC5996] regarding the need to base IPsec policy decisions on the authenticated identity.
In the context of the extension described here, this guidance on IPsec policy applies both to the authentication of the client by the gateway and vice versa.
User Identity Confidentiality IKEv2 provides confidentiality for the initiator identity against passive eavesdroppers, but not against active attackers.
The initiator announces its identity first (in message 3), before the responder has been authenticated.
The usage of EAP in IKEv2 does not change this situation, since the ID payload in message 3 is used instead of the EAP Identity Request/Response exchange.
This is somewhat unfortunate since when EAP is used with public key authentication of the responder, it would be possible to provide active user identity confidentiality for the initiator.
IKEv2 protects the responder's identity even against active attacks.
This property cannot be provided when using EAP.
If public key responder authentication is used in addition to EAP, the responder reveals its identity before authenticating the initiator.
If only EAP is used (as proposed in this document), the situation depends on the EAP method used (in some EAP methods, the server reveals its identity first).
Hence, if active user identity confidentiality for the responder is required then EAP methods that offer this functionality have to be used (see [RFC3748], Section 7.3).
In this section, we list alternatives that have been considered during the work on this document.
We concluded that the solution presented in Section 3 seems to fit better into IKEv2.
Ignore AUTH Payload at the Initiator
With this approach, the initiator simply ignores the AUTH payload in message 4 (but obviously must check the second AUTH payload later!).
The main advantage of this approach is that no protocol modifications are required and no signature verification is required.
A significant disadvantage is that the EAP method to be used cannot be selected to take this behavior into account.
The initiator could signal to the responder (using a notification payload) that it did not verify the first AUTH payload.
Unauthenticated Public Keys in AUTH Payload (Message 4)
Another solution approach suggests the use of unauthenticated public keys in the public key signature AUTH payload (for message 4).
That is, the initiator verifies the signature in the AUTH payload, but does not verify that the public key indeed belongs to the intended party (using certificates)   since it doesn't have a PKI that would allow this.
This could be used with X.509 certificates (the initiator ignores all other fields of the certificate except the public key), or "Raw RSA Key" CERT payloads.
This approach has the advantage that initiators that wish to perform certificate based responder authentication (in addition to EAP) may do so, without requiring the responder to handle these cases separately.
A disadvantage here, again, is that the EAP method selection cannot take into account the incomplete validation of the responder's certificate.
If using RSA, the overhead of signature verification is quite small, compared to the g^xy calculation required by the Diffie Hellman exchange.
Using EAP Derived Session Keys for IKEv2
It has been proposed that when using an EAP method that provides mutual authentication and key agreement, the IKEv2 Diffie Hellman exchange could also be omitted.
This would mean that the session keys for IPsec SAs established later would rely only on EAP provided keys.
It seems the only benefit of this approach is saving some computation time (g^xy calculation).
This approach requires designing a completely new protocol (which would not resemble IKEv2 anymore); we do not believe that it should be considered.
Nevertheless, we include it for completeness.
