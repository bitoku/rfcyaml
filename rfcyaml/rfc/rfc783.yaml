- title: __initial_text__
  contents:
  - "                     THE TFTP PROTOCOL (REVISION 2)\n  TFTP  is  a  very  simple\
    \ protocol used to transfer files.  It is from\nthis that its name comes, Trivial\
    \ File Transfer Protocol or TFTP.   Each\nnonterminal  packet is acknowledged\
    \ separately.  This document describes\n                            ACKNOWLEDGEMENTS\n\
    \  The  protocol  was  originally  designed  by  Noel  Chiappa,  and  was\nredesigned\
    \ by him, Bob Baldwin and Dave Clark, with comments from  Steve\nSzymanski.  \
    \ The current revision of the document includes modifications\nstemming from discussions\
    \ with and suggestions from  Larry  Allen,  Noel\nChiappa,  Dave  Clark,  Geoff\
    \ Cooper, Mike Greenwald, Liza Martin, David\nReed, Craig Milo Rogers (of UCS-ISI),\
    \ Kathy  Yellick,  and  the  author.\nThe  acknowledgement  and retransmission\
    \ scheme was inspired by TCP, and\nthe error mechanism was suggested by PARC's\
    \ EFTP abort message.\nThis research was supported by the Advanced Research Projects\
    \ Agency  of\nthe  Department  of  Defense  and  was  monitored by the Office\
    \ of Naval\nResearch under contract number N00014-75-C-0661.\n               \
    \                 2\f1. Purpose\n  TFTP  is  a simple protocol to transfer files,\
    \ and therefore was named\nthe Trivial File Transfer Protocol or TFTP.  It has\
    \ been implemented  on\ntop  of  the Internet User Datagram protocol (UDP or Datagram)\
    \ [2] so it\nmay be used  to  move  files  between  machines  on  different  networks\n\
    implementing   UDP.     (This  should  not  exlude  the  possibility  of\nimplementing\
    \ TFTP on top of other datagram protocols.)  It  is  designed\nto  be  small \
    \ and  easy  to implement.  Therefore, it lacks most of the\nfeatures of a regular\
    \ FTP.  The only thing it can do is read  and  write\nfiles  (or  mail)  from/to\
    \ a remote server.  It cannot list directories,\nand currently has no provisions\
    \ for user authentication.  In common with\nother Internet protocols, it passes\
    \ 8 bit bytes of data.\n                                                     \
    \        1        2\n  Three modes of transfer are currently  supported:  netascii\
    \ ;  octet ,\nraw  8 bit bytes; mail, netascii characters sent to a user rather\
    \ than a\nfile.  Additional modes can be defined by pairs of cooperating hosts.\n\
    _______________\n  1\n   This is ascii as  defined  in  \"USA  Standard  Code\
    \  for  Information\nInterchange\"  [1]  with  the modifications specified in\
    \ \"Telnet Protocol\nSpecification\" [3].  Note that it is 8 bit ascii.  The \
    \ term  \"netascii\"\nwill be used throughout this document to mean this particular\
    \ version of\nascii.\n  2\n   This  replaces  the  \"binary\"  mode  of  previous\
    \  versions  of  this\n                                 3\f2. Overview of the\
    \ Protocol\n  Any transsfer begins with a request to read or write a file, which\
    \ also\nserves  to  request a connection.  If the server grants the request, the\n\
    connection is opened and the file is sent in fixed length blocks of  512\nbytes.\
    \    Each  data  packet  contains  one  block  of data, and must be\nacknowledged\
    \ by an acknowledgment packet before the next packet  can  be\nsent.    A  data\
    \  packet of less than 512 bytes signals termination of a\ntransfer.  If a packet\
    \ gets lost in the network, the intended  recipient\nwill timeout and may retransmit\
    \ his last packet (which may be data or an\nacknowledgment),   thus  causing \
    \ the  sender  of  the  lost  packet  to\nretransmit that lost packet.  The sender\
    \ has to keep just one packet  on\nhand  for  retransmission, since the lock step\
    \ acknowledgment guarantees\nthat all older packets have been received.  Notice\
    \  that  both  machines\ninvolved  in a transfer are considered senders and receivers.\
    \  One sends\ndata and receives acknowledgments, the other sends  acknowledgments\
    \  and\nreceives data.\n  Most  errors  cause  termination  of  the  connection.\
    \    An  error is\nsignalled by sending an error packet.  This packet is not \
    \ acknowledged,\nand  not  retransmitted (i.e., a TFTP server or user may terminate\
    \ after\nsending an error message), so the other end of the  connection  may \
    \ not\nget  it.   Therefore timeouts are used to detect such a termination when\n\
    the error packet has been lost.  Errors are caused  by  three  types  of\nevents:\
    \  not  being  able  to satisfy the request (e.g., file not found,\naccess violation,\
    \ or no such user), receiving a packet which  cannot  be\nexplained  by a delay\
    \ or duplication in the network (e.g. an incorrectly\n                       \
    \          4\fformed  packet),  and  losing access to a necessary resource (e.g.,\
    \ disk\nfull or access denied during a transfer).\n  TFTP  recognizes  only  one\
    \  error  condition  that  does  not   cause\ntermination,  the  source port of\
    \ a received packet being incorrect.  In\nthis case, an error packet is sent to\
    \ the originating host.\n  This  protocol   is   very   restrictive,   in   order\
    \   to   simplify\nimplementation.    For  example, the fixed length blocks make\
    \ allocation\nstraight forward,  and  the  lock  step  acknowledgement  provides\
    \  flow\ncontrol and eliminates the need to reorder incoming data packets.\n3.\
    \ Relation to other Protocols\n  As mentioned TFTP is designed to be implemented\
    \ on top of the Datagram\nprotocol.    Since  Datagram  is  implemented  on the\
    \ Internet protocol,\npackets will have an Internet header, a  Datagram  header,\
    \  and  a  TFTP\nheader.   Additionally, the packets may have a header (LNI, ARPA\
    \ header,\netc.)  to allow them through the local transport medium.   As  shown\
    \  in\nFigure 3-1, the order of the contents of a packet will be:  local medium\n\
    header, if used, Internet header, Datagram header, TFTP header, followed\nby \
    \ the  remainder  of  the  TFTP  packet.  (This may or may not be data\ndepending\
    \ on the type of packet as specified in the TFTP header.)   TFTP\ndoes not specify\
    \ any of the values in the Internet header.  On the other\nhand, the source and\
    \ destination port fields of the Datagram header (its\nformat  is  given in the\
    \ appendix) are used by TFTP and the length field\nreflects the size of the TFTP\
    \ packet.  The transfer identifiers  (TID's)\n                               \
    \  5\fused  by  TFTP  are  passed  to  the Datagram layer to be used as ports;\n\
    therefore they must be between 0 and  65,535.    The  initialization  of\nTID's\
    \ is discussed in the section on initial connection protocol.\n  The  TFTP header\
    \ consists of a 2 byte opcode field which indicates the\npacket's type (e.g.,\
    \ DATA, ERROR, etc.)  These opcodes and  the  formats\nof  the various types of\
    \ packets are discussed further in the section on\nTFTP packets.\n           \
    \           Figure 3-1: Order of Headers\n          ---------------------------------------------------\n\
    \         |  Local Medium  |  Internet  |  Datagram  |  TFTP  |\n          ---------------------------------------------------\n\
    4. Initial Connection Protocol\n  A transfer is established by sending a request\
    \ (WRQ to  write  onto  a\nforeign  file  system, or RRQ to read from it), and\
    \ receiving a positive\nreply, an acknowledgment packet for write, or the first\
    \ data packet  for\nread.  In general an acknowledgment packet will contain the\
    \ block number\nof  the data packet being acknowledged.  Each data packet has\
    \ associated\nwith it a block number; block numbers are  consecutive  and  begin\
    \  with\none.      Since   the  positive  response  to  a  write  request  is\
    \  an\nacknowledgment packet, in this special case the  block  number  will  be\n\
    zero.  (Normally, since an acknowledgment packet is acknowledging a data\npacket,\
    \  the  acknowledgment packet will contain the block number of the\ndata packet\
    \ being acknowledged.)  If the reply is an error packet,  then\n             \
    \                    6\fthe request has been denied.\n  In  order to create a\
    \ connection, each end of the connection chooses a\nTID for itself, to be used\
    \ for the duration of  that  connection.    The\nTID's  chosen  for  a  connection\
    \ should be randomly chosen, so that the\nprobability that the same number is\
    \ chosen twice in immediate succession\nis very low.  Every packet has associated\
    \ with it the two TID's  of  the\nends  of  the connection, the source TID and\
    \ the destination TID.  These\nTID's are handed to the supporting UDP (or other\
    \ datagram  protocol)  as\nthe  source and destination ports.  A requesting host\
    \ chooses its source\nTID as described above, and sends its initial request to\
    \ the  known  TID\n69  decimal  (105  octal)  on  the  serving  host.   The response\
    \ to the\nrequest, under normal operation, uses a TID chosen by the server as\
    \  its\nsource  TID and the TID chosen for the previous message by the requestor\n\
    as its destination TID.  The two chosen TID's  are  then  used  for  the\nremainder\
    \  of  the  transfer. \n  As an example, the following shows  the  steps  used\
    \  to  establish  a\nconnection  to write a file.  Note that WRQ, ACK, and DATA\
    \ are the names\nof  the  write  request,  acknowledgment,  and  data  types \
    \ of  packets\nrespectively.    The  appendix  contains a similar example for\
    \ reading a\nfile.\n   1. Host A sends  a  \"WRQ\"  to  host  B  with  source=\
    \  A's  TID,\n      destination= 69.\n   2. Host  B  sends  a \"ACK\" (with block\
    \ number= 0) to host A with\n      source= B's TID, destination= A's TID.\n  \
    \                               7\fAt this point the connection has been established\
    \  and  the  first  data\npacket  can  be sent by Host A with a sequence number\
    \ of 1.  In the next\nstep, and in all succeeding steps, the hosts should make\
    \ sure  that  the\nsource  TID matches the value that was agreed on in steps 1\
    \ and 2.  If a\nsource TID does not match, the packet should be discarded as erroneously\n\
    sent from somewhere else.  An error packet should be sent to the  source\nof the\
    \ incorrect packet, while not disturbing the transfer.\nThis  can be  done  only\
    \ if the  TFTP in fact  receives a packet with an\nincorrect  TID.  If the  supporting\
    \  protocols  do  not  allow  it, this\nparticular error condition will not arise.\n\
    \  The following example demonstrates a correct operation of the protocol\nin\
    \  which the above situation can occur.  Host A sends a request to host\nB. Somewhere\
    \ in the network, the request packet is duplicated, and as  a\nresult  two acknowledgments\
    \ are returned to host A, with different TID's\nchosen on host B in response to\
    \  the  two  requests.    When  the  first\nresponse  arrives,  host  A  continues\
    \  the connection.  When the second\nresponse to the request arrives, it should\
    \ be rejected, but there is  no\nreason to terminate the first connection.  Therefore,\
    \ if different TID's\nare  chosen  for  the  two  connections  on host B and host\
    \ A checks the\nsource TID's of the messages it receives, the first  connection\
    \  can  be\nmaintained while the second is rejected by returning an error packet.\n\
    \                                 8\f5. TFTP Packets\n  TFTP  supports five types\
    \ of packets, all of which have been mentioned\nabove:\n          opcode  operation\n\
    \            1     Read request (RRQ)\n            2     Write request (WRQ)\n\
    \            3     Data (DATA)\n            4     Acknowledgment (ACK)\n     \
    \       5     Error (ERROR)\nThe TFTP header of a packet contains the  opcode\
    \  associated  with  that\npacket.\n                       Figure 5-1: RRQ/WRQ\
    \ packet\n            2 bytes     string    1 byte     string   1 byte\n     \
    \       ------------------------------------------------\n           | Opcode\
    \ |  Filename  |   0  |    Mode    |   0  |\n            ------------------------------------------------\n\
    \  RRQ  and  WRQ  packets  (opcodes 1 and 2 respectively) have the format\nshown\
    \ in Figure 5-1.  The file name is a sequence of bytes  in  netascii\nterminated\
    \  by  a  zero  byte.    The  mode  field  contains  the string\n\"netascii\"\
    , \"octet\", or \"mail\" (or any comibnation of  upper  and  lower\ncase,  such\
    \  as  \"NETASCII\", NetAscii\", etc.) in netascii indicating the\nthree modes\
    \ defined in the protocol.  A  host  which  receives  netascii\nmode data must\
    \ translate the data to its own format.  Octet mode is used\nto transfer a file\
    \ that is in the 8-bit format of the machine from which\nthe  file is being transferred.\
    \  It is assumed that each type of machine\nhas a single 8-bit format that is\
    \ more common, and that that  format  is\n                                 9\f\
    chosen.   For example, on a DEC-20, a 36 bit machine, this is four 8-bit\nbytes\
    \ to a word with four bits of breakage.  If a host receives a  octet\nfile  and\
    \  then  returns  it, the returned file must be identical to the\noriginal.  Mail\
    \ mode uses the name of a mail recipient  in  place  of  a\nfile  and  must begin\
    \ with a WRQ.  Otherwise it is identical to netascii\nmode.  The mail recipient\
    \ string should be of  the  form  \"username\"  or\n\"username@hostname\".   \
    \ If the second form is used, it allows the option\nof mail forwarding by a relay\
    \ computer.\n  The discussion above assumes that both the sender  and  recipient\
    \  are\noperating  in  the same mode, but there is no reason that this has to\
    \ be\nthe case.  For example, one might build a storage server.  There  is  no\n\
    reason that such a machine needs to translate netascii into its own form\nof \
    \ text.    Rather,  the  sender  might send files in netascii, but the\nstorage\
    \ server might simply store  them  without  translation  in  8-bit\nformat.  \
    \  Another  such situation is a problem that currently exists on\nDEC-20 systems.\
    \  Neither netascii nor octet accesses all the bits  in  a\nword.  One might create\
    \ a special mode for such a machine which read all\nthe  bits in a word, but in\
    \ which the receiver stored the information in\n8-bit format.  When such a file\
    \ is retrieved from the storage  site,  it\nmust  be restored to its original\
    \ form to be useful, so the reverse mode\nmust also be implemented.  The user\
    \ site  will  have  to  remember  some\ninformation  to  achieve  this.   In both\
    \ of these examples, the request\npackets would specify octet mode to the foreign\
    \ host, but the local host\nwould be in some other mode.  No such machine  or\
    \  application  specific\nmodes have been specified in TFTP, but one would be\
    \ compatible with this\n                                 10\fspecification.\n\
    \  It  is  also  possible  to define other modes for cooperating pairs of\nhosts,\
    \ although this must be done with care.  There  is  no  requirement\nthat  any\
    \  other  hosts  implement these.  There is no central authority\nthat will define\
    \ these modes or assign them names.\n                        Figure 5-2: DATA\
    \ packet\n                   2 bytes     2 bytes      n bytes\n              \
    \     ----------------------------------\n                  | Opcode |   Block\
    \ #  |   Data     |\n                   ----------------------------------\n \
    \ Data is actually transferred in DATA packets depicted in  Figure  5-2.\nDATA\
    \ packets (opcode = 3) have a block number and data field.  The block\nnumbers\
    \  on data packets begin with one and increase by one for each new\nblock of data.\
    \  This restriction allows the  program  to  use  a  single\nnumber  to  discriminate\
    \  between  new packets and duplicates.  The data\nfield is from zero to 512 bytes\
    \ long.  If it  is  512  bytes  long,  the\nblock  is  not  the  last block of\
    \ data; if it is from zero to 511 bytes\nlong, it signals the end of the transfer.\
    \  (See the  section  on  Normal\nTermination for details.)\n  All  packets  other\
    \  than  those used for termination are acknowledged\nindividually unless a timeout\
    \ occurs.   Sending  a  DATA  packet  is  an\nacknowledgment  for the ACK packet\
    \ of the previous DATA packet.  The WRQ\nand DATA packets are acknowledged by\
    \ ACK or ERROR packets, while RRQ and\n                                 11\f \
    \                        Figure 5-3: ACK packet\n                         2 bytes\
    \     2 bytes\n                         ---------------------\n              \
    \          | Opcode |   Block #  |\n                         ---------------------\n\
    ACK  packets  are  acknowledged  by  DATA  or ERROR packets.  Figure 5-3\ndepicts\
    \ an ACK packet; the opcode is 4.  The  block  number  in  an  ACK\nechoes the\
    \ block number of the DATA packet being acknowledged.  A WRQ is\nacknowledged\
    \ with an ACK packet having a block number of zero.\n                        Figure\
    \ 5-4: ERROR packet\n               2 bytes     2 bytes      string    1 byte\n\
    \               -----------------------------------------\n              | Opcode\
    \ |  ErrorCode |   ErrMsg   |   0  |\n               -----------------------------------------\n\
    \  An  ERROR packet (opcode 5) takes the form depicted in Figure 5-4.  An\nERROR\
    \ packet can be the acknowledgment of any other type of packet.  The\nerror code\
    \ is an integer indicating the nature of the error.  A table of\nvalues and meanings\
    \ is given in the appendix.  (Note that several  error\ncodes  have  been  added\
    \  to  this version of this document.)  The error\nmessage is intended for human\
    \ consumption, and should  be  in  netascii.\nLike all other strings, it is terminated\
    \ with a zero byte.\n                                 12\f6. Normal Termination\n\
    \  The end of a transfer is marked by a DATA packet that contains between\n0 \
    \ and  511  bytes of data (i.e. Datagram length < 516).  This packet is\nacknowledged\
    \ by an ACK packet like all other DATA  packets.    The  host\nacknowledging \
    \ the  final  DATA  packet  may  terminate  its side of the\nconnection on sending\
    \ the final ACK.  On the  other  hand,  dallying  is\nencouraged.    This  means\
    \ that the host sending the final ACK will wait\nfor a while before terminating\
    \ in order to retransmit the final  ACK  if\nit has been lost.  The acknowledger\
    \ will know that the ACK has been lost\nif  it  receives the final DATA packet\
    \ again.  The host sending the last\nDATA must retransmit it until the packet\
    \ is acknowledged or the  sending\nhost  times  out.    If  the  response  is\
    \  an ACK, the transmission was\ncompleted successfully.  If the sender of the\
    \ data times out and is  not\nprepared  to  retransmit  any  more,  the  transfer\
    \  may still have been\ncompleted successfully, after which the acknowledger or\
    \ network may have\nexperienced a problem.  It is  also  possible  in  this  case\
    \  that  the\ntransfer was unsuccessful.  In any case, the connection has been\
    \ closed.\n7. Premature Termination\n  If  a  request  can  not  be  granted,\
    \ or some error occurs during the\ntransfer, then an ERROR packet (opcode 5) is\
    \  sent.    This  is  only  a\ncourtesy  since  it will not be retransmitted or\
    \ acknowledged, so it may\nnever be received.  Timeouts must also be used to detect\
    \ errors.\n                                 13\fI. Appendix\nOrder of Headers\n\
    \                                               2 bytes\n ----------------------------------------------------------\n\
    |  Local Medium  |  Internet  |  Datagram  |  TFTP Opcode  |\n ----------------------------------------------------------\n\
    TFTP Formats\nType   Op #     Format without header\n       2 bytes    string\
    \   1 byte     string   1 byte\n       -----------------------------------------------\n\
    RRQ/  | 01/02 |  Filename  |   0  |    Mode    |   0  |\nWRQ    -----------------------------------------------\n\
    \       2 bytes    2 bytes       n bytes\n       ---------------------------------\n\
    DATA  | 03    |   Block #  |    Data    |\n       ---------------------------------\n\
    \       2 bytes    2 bytes\n       -------------------\nACK   | 04    |   Block\
    \ #  |\n       --------------------\n       2 bytes  2 bytes        string   \
    \ 1 byte\n       ----------------------------------------\nERROR | 05    |  ErrorCode\
    \ |   ErrMsg   |   0  |\n       ----------------------------------------\n\x16\
    \n                                 14\fInitial Connection Protocol for reading\
    \ a file\n   1. Host  A  sends  a  \"RRQ\"  to  host  B  with  source= A's TID,\n\
    \      destination= 69.\n   2. Host B sends a \"DATA\" (with block number= 1)\
    \ to host  A  with\n      source= B's TID, destination= A's TID.\n           \
    \                      15\fError Codes\nValue     Meaning\n0         Not defined,\
    \ see error message (if any).\n1         File not found.\n2         Access violation.\n\
    3         Disk full or allocation exceeded.\n4         Illegal TFTP operation.\n\
    5         Unknown transfer ID.\n6         File already exists.\n7         No such\
    \ user.\n                               16\f                                 3\n\
    Internet User Datagram Header [2] \n  Format\n 0                   1         \
    \          2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    |          Source Port          |       Destination Port        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    |            Length             |           Checksum            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    Values of Fields\nSource Port     Picked by originator of packet.\nDest. Port\
    \      Picked by destination machine (69 for RRQ or WRQ).\nLength          Number\
    \ of bytes in packet after Datagram header.\n                                \
    \                                   4\nChecksum        Reference 2 describes rules\
    \ for computing checksum. \n                Field contains zero if unused.\nNote:\
    \  TFTP  passes  transfer  identifiers  (TID's) to the Internet User\nDatagram\
    \ protocol to be used as the source and destination ports.\n_______________\n\
    \  3\n   This has been included only  for  convenience.    TFTP  need  not  be\n\
    implemented on top of the Internet User Datagram Protocol.\n  4\n   The  implementor\
    \ of this should be sure that the correct algorithm is\nused here.\n         \
    \                        17\fReferences\n  [1]     USA  Standard  Code  for  Information\
    \ Interchange, USASI X3.4-\n          1968.\n  [2]     Postel, Jon., \"User Datagram\
    \  Protocol,\"  RFC768,  August  28,\n          1980.\n  [3]     \"Telnet Protocol\
    \ Specification,\" RFC764, June, 1980.\n"
