In this document an idea is submitted how IP and ARP can be used on inhomogeneous FDDI networks (FDDI networks with single MAC and dual MAC stations) by introducing a new protocol layer in the protocol suite of the dual MAC stations.
Thus two dual MAC stations are able to do a load splitting across the two rings and use the double bandwidth of 200 Mbits/s as single MAC stations.
The new layer is an extension of layer 3.
For the user, the higher layer protocols, IP and ARP the property "dual MAC" is transparent.
No modification is required in the protocol suite of single MAC stations and transparent bridges.
When a dual FDDI ring wraps, both MACs in a dual MAC station are assumed to remain connected to the ring.
ANSI is just investigating whether the Configuration Management in the Station Management of a FDDI station can be modified to allow this.
According to the FDDI SMT standard [1], different addresses are required for all MACs on the primary and the secondary ring.
In this paper, the MAC in a single MAC station is assumed to reside on the primary ring.
The application of single MAC stations which have their MAC attached to the secondary ring is not precluded, but therefor additional connectivity between the two rings is required.
These configurations are beyond the scope of this document.
The Application of Transparent Bridges Transparent bridges can provide links to other 802 LANs or further inhomogeneous FDDI rings.
The connection between two inhomogeneous FDDI rings can be realized by one or two transparent bridges.
When two transparent bridges are used, one transparent bridge links the primary rings, the other the secondary rings.
If two secondary rings are connected by a transparent bridge, a path of transparent bridges must exist between the two primary rings.
No transparent bridges are allowed between the primary and the secondary ring.
Protocol Layers in Single MAC Stations
The new protocol layer, named load sharing layer, is drafted to be introduced only in dual MAC stations.
In single MAC stations, IP and ARP are working on top of the Subnetwork Access Protocol (SNAP) 04] and the Logical Link Control protocol (802.2 LLC) [3].
LLC type 1 is used because connectionless services are investigated only.
The Address Conversion Unit handles the actual conversion of IP addresses to hardware addresses.
For this purpose, it uses the information in the ARP cache.
The cache administration communicates with other ARP entities by ARP and creates, deletes and renews the entries in the cache.
Protocol Layers in Dual MAC Stations
The load sharing layer provides the same interface to ARP as SNAP does.
To exchange information about addresses and reachability, the load sharing entities in dual MAC stations communicate with the Dual MAC Address Resolution Protocol (DMARP).
For the transmission of DMARP frames
the SNAP SAP of LLC is used, as for IP and ARP, too.
The Organizationally Unique Identifier (OUI) in the SNAP header is set to zero (24 bit),
the EtherType field (16 bit) contains a new number indicating DMARP, which is not defined yet.
Running Inhomogeneous FDDI Rings 8.1.
Exchange of Primary MAC Addresses between Stations IP and higher layer protocols only use the network independent IP addresses.
The ARP entity takes upon the conversion of an IP address to the appropriate hardware address.
To make the property dual MAC" transparent, ARP may only know the addresses of MACs on the primary ring.
Therefore, the load sharing entity always delivers ARP frames to SNAP 1 for transmission.
By this way, communication with ARP is done over the primary ring in normal state.
A secondary MAC can receive an ARP frame when the dual ring is wrapped and the destination hardware address is a multicast or broadcast address.
These frames will be discarded because they were received twice.
By this way, the associations of IP addresses to primary MAC addresses for the single MAC and dual MAC stations are stored in the ARP cache.
The ARP cache contains no secondary MAC addresses.
Exchange of Secondary MAC Addresses between Dual MAC Stations
The load sharing layer needs to know the secondary MAC addresses of the other dual MAC stations.
The DMARP is used to get these addresses.
Whenever the load sharing entity delivers an ARP frame to SNAP 1, a DMARP reply frame will be sent on the secondary ring, containing the stations primary and secondary MAC address.
The destination hardware address in this DMARP frame is the broadcast MAC address, the EtherType field in the SNAP header identifies DMARP.
The IP destination address is copied from the ARP frame.
If the ARP frame that was transmitted parallel to the DMARP reply was a request, an ARP reply frame will be sent back to the sending station by the ARP entity in the receiving station.
When the load sharing layer in the receiving station delivers this ARP reply frame to SNAP 1, it sends a DMARP reply frame on the secondary ring.
By this way, DMARP exchanges the additionally required secondary MAC addresses between the dual MAC stations.
This is done parallel to the exchange of the ARP frames.
Communication of Dual MAC Stations on Different Dual FDDI Rings
If two inhomogeneous dual FDDI rings are connected by one transparent bridge, dual MAC stations placed on different dual FDDI rings cannot perform a load sharing.
If both dual FDDI rings remain in normal state, no DMARP reply frames get from one secondary ring to the other secondary ring.
A dual MAC station realizes another dual MAC station placed on the other dual ring as a single MAC station, because it only receives ARP frames from it.
If one of the dual rings is wrapped, a DMARP reply frame can get on the primary ring of the other dual ring.
A target station on the unwrapped ring receives this DMARP frame by the primary MAC and the load sharing entity stores the contained addresses in an entry in the address cache.
This entry is marked with a control bit, named the OR bit Other ring bit").
No load sharing will be done with a station related to an entry with the OR bit set.
If both dual FDDI rings are wrapped, the MACs of all stations reside on one ring.
Now, dual MAC stations placed on different dual rings can communicate with DMARP.
If a DMARP reply frame is received by the primary MAC and no entry exists for the sending station,
a new entry with OR Bit set will be created.
Otherwise, the OR bit will be set in the existing entry.
If a DMARP reply frame is received by the secondary MAC and an entry with OR bit set already exists for the sending station, the bit will not be reset.
This mechanism provides that no load sharing will be done between Dual MAC stations on different dual rings if the dual rings are linked with one transparent bridge.
An additional DMARP error frame is used to provide against errors when a DMARP reply frame gets lost on the ring.
Timeout of Entries Marked with OR Bit Set
If a FDDI ring is wrapped, the DMARP reply frames are received by the primary and secondary MACs of the target dual MAC stations.
In that case, the entries for dual MAC stations on the same dual ring are also marked with the OR bit, although the load sharing is possible between these stations.
When an OR bit in an entry is set for the first time, a timer entity is started.
If the timer entity runs out, a DMARP request frame is sent over SNAP 2 to the secondary MAC of the associated target) station.
Then the entry will be discarded.
If the request cannot be received by the target station because the network configuration has changed, there is no entry in the address cache for this station any more and no load sharing is computed.
If the target station receives the DMARP request frame, it sends back a DMARP reply frame.
Problems with the Application of Large FDDI Networks With an increasing number of dual FDDI rings, each one linked together by two transparent bridges, the probability increases, that one of these inhomogeneous dual FDDI rings is wrapped in the moment when two dual MAC stations exchange ARP frames and DMARP replies.
If two dual MAC stations are communicating for the first time, the probability decreases that a load sharing is really computed after the exchange of DMARP replies, although this would be possible according to the network configuration.
It relies upon the fact, that DMARP replies get to the primary ring over the wrapped dual ring and only entries marked with the OR bit set are created.
To solve this problem further expedients are invented: At first, entries in the address cache can be marked read only by the setting of the R bit.
In dual MAC stations, entries can be written manually for other dual MAC stations that are frequently talked to or that have a special importance.
The control bits of these entries cannot be changed by DMARP.
Next, additional control bits are introduced.
One of these bits is the Hold bit (H bit).
When two dual MAC stations exchange ARP frames and DMARP replies to create entries in their address caches, one station starts sending a DMARP reply, first.
According to the network state, it sends an additional DMARP error frame, a moment later.
Within a maximum period of time (see "Configuring the Timer Parameters"), all frames arrive at the neighbour station and are received by the primary and/or secondary MAC.
If the OR bit was not set for an entry within this period of time, it is clear, that no further DMARP frames will be received, which result in setting the OR bit.
For such an entry the H bit is set.
As the reception of reply and error frames is not sufficient for setting the OR bit when the H bit is set, the load sharing is assumed to be sure.
The correctness of the H bit will be verified in relatively long time periods by queries (query and hold frames) at the station associated.
For two communicating stations there exists a possibility to get information from a third station.
Always, when the OR bit is set for an entry in a dual MAC station, a search frame is transmitted by the secondary MAC, containing the own primary MAC address and the primary MAC address of the counter station.
If a third station can compute a sure load sharing with both stations (the H bit is set for the associated entries), the stations can perform a load sharing between them, too.
The third station informs these stations by sending found frames to them.
Multicast and Broadcast Addresses in IP Frames
If the destination hardware address of an IP frame is a multicast or broadcast hardware address, the frame is always delivered to SNAP 1 and sent on the primary ring, because one of the addressed stations could be a single MAC station.
IP frames which are delivered to the load sharing entity by SNAP 2 are discarded by the load sharing entity.
Thus, the duplication of these frames can be prevented.
Internal Structure One load Sharing entity exists in the load sharing layer.
This load sharing entity consists of the address cache, the cache administration and the multiplexer.
In the address cache, the associations of primary MAC addresses to secondary MAC addresses are stored for other dual MAC stations on the network.
There are no entries for single MAC stations.
Because the OR  and the LS bit (see table) always have inverted values, one of the bits is redundant.
Afterwards the examination of an entry state gets easier by the introduction of both bits, they are defined together.
The ARP is able to support other protocol address formats than the IP format.
To support this ARP property by DMARP, the protocol type number as used in the ARP frames is stored in every entry of the address cache.
So, a dual MAC station is able to communicate with another station with DMARP, even if the other station does not use IP.
The numbers used in DMARP frames and the address cache for the protocol type and the address length are taken over from ARP.
A load sharing can be performed with that station ("Load sharing bit")
No load sharing may be done with that station ("Other ring bit")
The load sharing with that station is trusty.
A query frame was sent to that station, no hold frame was received yet ("Query bit")
This entry cannot be changed by DMARP ("Read only bit")
The Multiplexer The multiplexer deals with multiplexing the IP frames upon the two FDDI rings.
Broadcast and multicast frames are always sent on the primary ring.
Otherwise, the contents of the address cache and a load sharing criteria are used to decide on which of the rings an IP frame has to be transmitted.
If there is no entry for the primary MAC address of the destination station in the cache, the IP frame is transmitted on the primary ring.
If there is an entry for the destination station and the LS bit is set, a load sharing can be done with this station.
Later on a load sharing criteria, which is beyond the scope of this document, decides, which one of the rings is used for transmission.
An example for a load sharing criteria is the length of the transmit queues in the MACs.
The multiplexer requires an abstract function only, which returns the appropriate ring for the transmission of an actual IP frame.
Additionally, the multiplexer filters the received IP frames: multicast or broadcast frames received from the secondary MAC are discarded.
The cache administration creates and deletes the entries in the address cache.
For this purpose, it communicates with other load sharing entities in other dual MAC stations with the DMARP.
The cache administration handles the delivery of ARP frames to the ARP and the SNAP entity in the station, respectively.
The cache administration needs three timers for the communication with the DMARP, which have to be supported by the system environment.
Each of these timers must support a timer entity for each entry in the address cache, whereby a single one is running at a time.
Supported timer services: TIMER request(time, name, subscript) TIMER
cancel(name, subscript): A timer entity is started by the service TIMER request and cancelled by the TIMER cancel service request.
The TIMER response service indicates that a timer entity has run out.
The parameter name is the name of a timer: OR Entry Timer, Hold Timer, or Query Timer.
Each entry in the address cache is uniquely identified by a number subscript).
This number is also the number of an associated timer entity.
How to dispose these numbers is a question of implementation.
The parameter time determines the time period when the timer runs out.
This parameter has the value OR set timeout for the OR Entry Timer, Hold time for the Hold Timer and Query time for the Query Timer.
The OR set timeout parameter for the OR Entry Timer
The period of time, determined by this parameter, should be essentially longer than the maximum time for a frame to travel around the entire network.
The expression entire network means the network which is constituted by the subnetworks linked together with transparent bridges.
When entries with OR bit set are created continuously for a dual MAC station by the timeout mechanism, this parameter determines the periods of time between the consecutive requests that are sent to this station.
If the state of the dual FDDI ring changes and an entry with LS bit set could be created, this parameter additionally determines the maximum time until the new entry is created.
(If an entry could not be created by transmission of search frames.)
Therefore, the OR set timeout parameter should be set to some 10 seconds.
The Hold time parameter for the Hold Timer
The period of time, determined by this parameter, should as well be essentially longer than the maximum time for a frame to travel around the entire network.
When two stations communicate for the first time, they exchange ARP frames and DMARP replies.
The Hold time parameter determines the period of time until the load sharing is assumed to be accomplished after the setting of the LS bit.
In this period of time, the frames mentioned above must have reached its destination.
If an entry would be marked with the H bit incorrectly, the time until it gets corrected will be relatively long (Query time).
The Query time parameter for the Query Timer
When an entry is marked with LS  and H bit it is assumed, that load sharing can be performed with the associated station.
To allow the correction of a wrong value of the H bit, the correctness of the H bit is tested in periods of time, determined by the parameter Query time.
It is tested whether a frame is received, which was sent by the secondary MAC to the secondary MAC address of the target station.
(The target station acknowledges the reception of the query frame by a hold frame.)
To limit the traffic caused by the query and hold frames, the parameter Query  time should be set to several minutes.
MAC addresses length of protocol
: "reply" 2: "request" 3: "error" 4: "search" 5: "found" 6: "query" 7: "hold" 1.
The value for the field "protocol type" is the same as in ARP frames.
In the following tables of DMARP frames, the fields containing the length and type of protocol and hardware addresses are omitted.
S MAC address   protocol   protocol
Apart from the error frames all frames are sent on the secondary ring.
The reply, error and search frames are addressed to the broadcast hardware address.
The request, found, query and hold frames are addressed to an individual secondary MAC address.
The following description is written in ESTELLE.
The values of these variables are set in the initialization part or by external management functions.
Channels channel SAPchn(User,Provider); by User : UNITDATA request (
d  : timer name type; subscript : integer); 10.3.
SNAP2 LSSAP  : SAPchn(User); LS System Access Point : System Access Point chn(User);
end; body cache administration body for cache administration module
SNAP2 LSSAP; attach LS System Access Point  to cache administration.
LS System Access Point; end; end; 10.5.
HW addr type; function determ addrtype(HW addr: HW addr type):
Type of addr type; primitive;
(  Returns the type of a hardware address.
(Individual, multicast or broadcast address)
) function get cacheentry(prtype: integer;
HW addr type; var S MAC addr :
If an entry exists, the value TRUE is returned.
IPSAP.UNITDATA request(Source addr,Dest addr,QoS,PDU); else begin if get cacheentry(ip,Dest addr,act S MAC addr) and
(ls criteria secondary) then output SNAP2
IPSAP.UNITDATA request(My S MAC addr, act S MAC addr,QoS,PDU); else
IPSAP.UNITDATA request(Source addr,Dest addr,QoS,PDU); end;
when SNAP1 IPSAP.UNITDATA indication(Source addr,Dest addr,QoS,PDU) begin output LS IPSAP.UNITDATA indication(Source addr,Dest addr,QoS,PDU); end; when SNAP2 IPSAP.UNITDATA indication(Source addr,Dest addr,QoS,PDU) begin if determ addrtype(Dest addr)
individual then begin Dest addr :
My P MAC addr; output LS IPSAP.UNITDATA indication(Source addr,Dest addr,QoS,PDU); end; end; 10.6.
HW addr type; PR receiver   :
if praddr is my station address, the protocol type is prtype.
(2048d for the Internet protocol)  )
; function get my pr addr(prtype : integer) :
(  Returns my station address, the protocol has the number prtype.
) function extract arp pdu(PDU : PDU type) : arp pdu type; (
Returns the data contained in an ARP PDU as a record.
) primitive; function extract dmarp pdu(PDU : PDU type) : dmarp pdu type;
(  Returns the data contained in an DMARP PDU as a record.
) primitive; function assemble dmarp pdu(dmarp
pdu : dmarp pdu type):
(  Returns a DMARP PDU from the data in the record.
) primitive; procedure create entry(prtype:
S MAC addr: HW addr type; LS Bit: flag; OR Bit: flag; H Bit: flag; Q Bit: flag; R Bit: flag; V Bit: flag)
The protocol type has the number prtype.
The control bits are set as given in the parameters, the LS bit is set last.
) primitive; function search entry(prtype : integer; P MAC addr :
) primitive; procedure update entry(prtype: integer; P MAC addr:
) primitive; function H bit set(prtype: integer; P MAC addr : HW addr type)
) primitive; function OR bit set(prtype: integer; P MAC addr : HW addr type):
) primitive; function LS bit set(prtype: integer; P MAC addr : HW addr type)
) primitive; function Q bit
set(prtype: integer; P MAC addr : HW addr type)
) primitive; function get subscript(prtype
: integer; P MAC addr : HW addr type):
) primitive; function get broadcast addr(prtype
) function get P MAC addr(subscript : integer) :
(  Returns the primary MAC address of the entry with the given subscript number.
) primitive; function get S MAC addr(prtype: integer; P MAC addr: HW addr type):
(  Returns the secondary MAC address of the station with the given primary MAC address.
) primitive; function get pr type(subscript
(  Returns the protocol type for the entry with the given subscript number.
) primitive; function get pr
) primitive; trans when LS ARPSAP.UNITDATA request(Source addr,Dest addr,QoS,PDU)
My P MAC addr; dmarp pdu.
My S MAC addr; dmarp pdu.
; PDU :  assemble dmarp pdu(dmarp pdu); output SNAP2
LSSAP.UNITDATA request(My S MAC addr,Broadcast HW addr, dmarp QoS,PDU); end;
when SNAP1 ARPSAP.UNITDATA indication(Source addr,Dest addr,QoS,PDU) begin
output LS ARPSAP.UNITDATA indication(Source addr,Dest addr,QoS,PDU); end; when SNAP2 ARPSAP.UNITDATA indication(Source addr,Dest addr,QoS,PDU) begin end; when SNAP1 LSSAP.UNITDATA indication(Source addr,Dest addr,QoS,PDU) begin dmarp pdu :
extract dmarp pdu(PDU); if ((dmarp pdu.operation   error) or (dmarp pdu.operation   reply))
then begin if my pr address(dmarp pdu.prtype,dmarp pdu.
PR receiver) then begin if not H bit set(dmarp pdu.prtype,dmarp pdu.
HW 1) then begin if not OR bit
HW 1) then begin if LS bit set(dmarp pdu.prtype,dmarp pdu.
HW 1) then begin output LS System Access point.
Hold Timer",get subscript(dmarp pdu.prtype,dmarp pdu.
HW 1)); create entry(dmarp pdu.prtype,dmarp pdu.
HW 2, reset,set,reset,reset,reset,set); end; output LS System Access point.
TIMER request( OR set timeout,"OR Entry Timer", get subscript(dmarp pdu.prtype,dmarp pdu.
HW length :  fddi addr length
PR length :  dmarp pdu.
PR length; send pdu.operation :  search; send pdu.
My P MAC addr; send pdu.
get my pr addr(dmarp pdu.prtype); send pdu.
; PDU :  assemble dmarp pdu(dmarp pdu); output SNAP2
LSSAP.UNITDATA request( My S MAC addr,Broadcast HW addr,dmarp QoS,PDU);
end else begin if dmarp pdu.operation error then update entry(dmarp pdu.prtype,dmarp pdu.
HW 2); end; end else begin if dmarp pdu.operation   error then update entry(dmarp pdu.prtype,dmarp pdu.
HW 2); end; end else begin if my pr address(dmarp pdu.prtype,dmarp pdu.
(dmarp pdu.operation   reply) then begin dmarp pdu.operation :  error; PDU :  assemble dmarp pdu(dmarp pdu); output SNAP1
LSSAP.UNITDATA request( My P MAC addr,Broadcast HW addr,dmarp QoS,PDU);
end else begin if dmarp pdu.operation error and search entry(dmarp pdu.prtype,dmarp pdu.
HW 1) then update entry(dmarp pdu.prtype,dmarp pdu.
; end; end; end; end;
when SNAP2 LSSAP.UNITDATA indication(Source addr,Dest addr,QoS,PDU) begin dmarp pdu :  extract dmarp pdu(PDU); if (dmarp pdu.operation   found) and my pr address(dmarp pdu.prtype,dmarp pdu.
PR receiver) then begin if not H bit set(dmarp pdu.prtype,dmarp pdu.
HW 1) then begin if OR bit set(dmarp pdu.prtype,dmarp pdu.
HW 1) then begin output LS System Access Point.
Entry Timer", get subscript(dmarp pdu.prtype,dmarp pdu.
HW 1)); end; if LS bit set(dmarp pdu.prtype,dmarp pdu.
HW 1) then begin output LS System Access Point.
TIMER cancel("Hold Timer", get subscript(dmarp pdu.prtype,dmarp pdu.
HW 1)); end; create entry(dmarp pdu.prtype,dmarp pdu.
HW 2, set,reset,set,reset,reset,set); output LS System Access Point.
TIMER request(Query time,"Query Timer", get subscript(dmarp pdu.prtype,dmarp pdu.
HW 1)); end; end else begin if (dmarp pdu.operation   reply) or (dmarp pdu.operation   request) then begin if search entry(dmarp pdu.prtype,
HW 1) then update entry(dmarp pdu.prtype,dmarp pdu.
HW 2); end; if (dmarp pdu.operation request) and my pr
My P MAC addr; send pdu.
My S MAC addr; send pdu.
get my pr addr(dmarp pdu.prtype); send pdu.
PR sender; PDU :  assemble dmarp pdu(dmarp pdu); output SNAP2
LSSAP.UNITDATA request( My S MAC addr,Broadcast HW addr,dmarp QoS,PDU);
end else begin if my pr address(dmarp pdu.prtype,dmarp pdu.pr receiver) then begin case dmarp pdu.operation of reply:
begin if not ( OR bit set(dmarp pdu.prtype,dmarp pdu.
HW 1) or LS bit set(dmarp pdu.prtype
HW 1) )then begin create entry(dmarp pdu.prtype,dmarp pdu.
HW 2, set,reset,reset,reset,reset,set); output LS System Access Point.
HW 1)); end; end; error: begin if not ( OR bit set(dmarp pdu.prtype,dmarp pdu.
HW 1) or H bit set(dmarp pdu.prtype
then begin if LS bit set(dmarp pdu.prtype,dmarp pdu.
HW 1) then output LS System access point.
Hold Timer",get subscript(dmarp pdu.prtype,dmarp pdu.
HW 1)); create entry(dmarp pdu.prtype,dmarp pdu.
HW 2, reset,set,reset,reset,reset,set); output LS System access point.
TIMER request( OR set timeout,"OR Entry Timer", get subscript(dmarp pdu.prtype,dmarp pdu.
My P MAC addr; send pdu.
get my pr addr(dmarp pdu.prtype); send pdu.
LSSAP.UNITDATA request( My S MAC addr,Broadcast HW addr,dmarp QoS,PDU); end; end;
My P MAC addr or dmarp pdu.
My P MAC addr) then begin if H bit set(dmarp pdu.prtype,dmarp pdu.
HW 1) and H bit set(dmarp pdu.prtype
PR length; send pdu.operation   :
get my pr addr(dmarp pdu.prtype); send pdu.
; PDU :  assemble dmarp pdu(send pdu); output SNAP2
LSSAP.UNITDATA request(My S MAC addr, get S MAC addr(dmarp pdu.prtype,dmarp pdu.
HW 1),dmarp QoS,PDU); send pdu.
HW 1 :  dmarp pdu.
get S MAC addr(dmarp pdu.prtype, dmarp pdu.
; PDU :  assemble dmarp pdu(send pdu); output SNAP2 LSSAP.UNITDATA request(My S MAC addr
, get S MAC addr(dmarp pdu.prtype,dmarp pdu.
HW 2),dmarp QoS,PDU); end; end; end; Query: begin if dmarp pdu.
My P MAC addr; send pdu.
My S MAC addr; send pdu.
get my pr addr(dmarp pdu.prtype); send pdu.
PR sender; PDU :  assemble dmarp pdu(send pdu); output SNAP2
LSSAP.UNITDATA request( My S MAC addr,dmarp pdu.
HW 1,dmarp QoS,PDU); end; end;
Hold: begin if H bit set(dmarp pdu.prtype,dmarp pdu.
HW 1) then reset Q bit(dmarp pdu.prtype,dmarp pdu.
; end; end; end; end; end; end; when LS System Access Point.
TIMER response(Timer name,subscript) begin case Timer name of "OR Entry Timer": begin act P MAC addr :
get pr type(subscript); send pdu.
My P MAC addr; send pdu.
My S MAC addr; send pdu.
; PDU :  assemble dmarp pdu(send pdu);
LSSAP.UNITDATA request( My S MAC addr,get
S MAC addr(send pdu.prtype,act P MAC addr), dmarp QoS,PDU); delete entry(subscript)
; end; end; "Hold Timer": begin
:  get P MAC addr(subscript); if (not H bit set(get pr type(subscript),act P MAC addr)) and LS bit set(get pr type(subscript),act P MAC addr)
type(subscript),act P MAC addr); output LS System Access point.
get pr type(subscript); send pdu.
addr(send pdu.prtype); if Q bit set(get pr type(subscript),act P MAC addr)
My P MAC addr; send pdu.
My S MAC addr; send pdu.operation :  request;
PDU :  assemble dmarp pdu(send pdu); output SNAP2
LSSAP.UNITDATA request( My S MAC addr,get
S MAC addr(send pdu.prtype,act P MAC addr), dmarp QoS,PDU); delete entry(subscript); end else begin send pdu.
My S MAC addr; send pdu.
LSSAP.UNITDATA request( My S MAC addr,get
S MAC addr(send pdu.prtype,send pdu.
; set Q bit(send pdu.prtype,send pdu.
The introduction of the load sharing layer in the protocol layering of the dual MAC stations allows the application of IP and ARP on inhomogeneous FDDI rings.
The protocol suite of single MAC stations needs no modification.
By the load sharing layer, the property "dual MAC" is transparent for ARP, IP and the higher layer protocols.
In dual MAC stations, any load sharing criteria may be implemented in the multiplexer of the load sharing entity.
The conversion of addresses, the exchange of address and reachability information between dual MAC stations and the proper transmission of multicast and broadcast frames is taken upon by the load sharing entity.
Security Considerations Security issues are not discussed in this memo.
