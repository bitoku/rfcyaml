- contents:
  - "                 Reliability of Provisional Responses\n               in the
    Session Initiation Protocol (SIP)\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document specifies an extension to the Session Initiation\n
    \  Protocol (SIP) providing reliable provisional response messages.\n   This extension
    uses the option tag 100rel and defines the Provisional\n   Response ACKnowledgement
    (PRACK) method.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1     Introduction ........................................
    \   2\n   2     Terminology .........................................    3\n   3
    \    UAS Behavior ........................................    3\n   4     UAC
    Behavior ........................................    6\n   5     The Offer/Answer
    Model and PRACK ....................    9\n   6     Definition of the PRACK Method
    ......................   10\n   7     Header Field Definitions ............................
    \  10\n   7.1   RSeq ................................................   10\n   7.2
    \  RAck ................................................   11\n   8     IANA Considerations
    .................................   11\n   8.1   IANA Registration of the 100rel
    Option Tag ..........   11\n   8.2   IANA Registration of RSeq and RAck Headers
    ..........   12\n   9     Security Considerations .............................
    \  12\n   10    Collected BNF .......................................   12\n   11
    \   Acknowledgements ....................................   12\n   12    Normative
    References ................................   13\n   13    Informative References
    ..............................   13\n   14    Authors' Addresses ..................................
    \  13\n   15.   Full Copyright Statement.............................   14\n"
  title: Table of Contents
- contents:
  - "1 Introduction\n   The Session Initiation Protocol (SIP) (RFC 3261 [1]) is a
    request-\n   response protocol for initiating and managing communications\n   sessions.
    \ SIP defines two types of responses, provisional and final.\n   Final responses
    convey the result of the request processing, and are\n   sent reliably.  Provisional
    responses provide information on the\n   progress of the request processing, but
    are not sent reliably in RFC\n   3261.\n   It was later observed that reliability
    was important in several\n   cases, including interoperability scenarios with
    the PSTN.\n   Therefore, an optional capability was needed to support reliable\n
    \  transmission of provisional responses.  That capability is provided\n   in
    this specification.\n   The reliability mechanism works by mirroring the current
    reliability\n   mechanisms for 2xx final responses to INVITE.  Those requests
    are\n   transmitted periodically by the Transaction User (TU) until a\n   separate
    transaction, ACK, is received that indicates reception of\n   the 2xx by the UAC.
    \ The reliability for the 2xx responses to INVITE\n   and ACK messages are end-to-end.
    \ In order to achieve reliability for\n   provisional responses, we do nearly
    the same thing.  Reliable\n   provisional responses are retransmitted by the TU
    with an exponential\n   backoff.  Those retransmissions cease when a PRACK message
    is\n   received.  The PRACK request plays the same role as ACK, but for\n   provisional
    responses.  There is an important difference, however.\n   PRACK is a normal SIP
    message, like BYE.  As such, its own\n   reliability is ensured hop-by-hop through
    each stateful proxy.  Also\n   like BYE, but unlike ACK, PRACK has its own response.
    \ If this were\n   not the case, the PRACK message could not traverse proxy servers\n
    \  compliant to RFC 2543 [4].\n   Each provisional response is given a sequence
    number, carried in the\n   RSeq header field in the response.  The PRACK messages
    contain an\n   RAck header field, which indicates the sequence number of the\n
    \  provisional response that is being acknowledged.  The acknowledgments\n   are
    not cumulative, and the specifications recommend a single\n   outstanding provisional
    response at a time, for purposes of\n   congestion control.\n"
  title: 1 Introduction
- contents:
  - "2 Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\n
    \  \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",\n
    \  and \"OPTIONAL\" are to be interpreted as described in RFC 2119 [2] and\n   indicate
    requirement levels for compliant SIP implementations.\n"
  title: 2 Terminology
- contents:
  - "3 UAS Behavior\n   A UAS MAY send any non-100 provisional response to INVITE
    reliably,\n   so long as the initial INVITE request (the request whose provisional\n
    \  response is being sent reliably) contained a Supported header field\n   with
    the option tag 100rel.  While this specification does not allow\n   reliable provisional
    responses for any method but INVITE, extensions\n   that define new methods that
    can establish dialogs may make use of\n   the mechanism.\n   The UAS MUST send
    any non-100 provisional response reliably if the\n   initial request contained
    a Require header field with the option tag\n   100rel.  If the UAS is unwilling
    to do so, it MUST reject the initial\n   request with a 420 (Bad Extension) and
    include an Unsupported header\n   field containing the option tag 100rel.\n   A
    UAS MUST NOT attempt to send a 100 (Trying) response reliably.\n   Only provisional
    responses numbered 101 to 199 may be sent reliably.\n   If the request did not
    include either a Supported or Require header\n   field indicating this feature,
    the UAS MUST NOT send the provisional\n   response reliably.\n      100 (Trying)
    responses are hop-by-hop only.  For this reason, the\n      reliability mechanisms
    described here, which are end-to-end,\n      cannot be used.\n   An element that
    can act as a proxy can also send reliable provisional\n   responses.  In this
    case, it acts as a UAS for purposes of that\n   transaction.  However, it MUST
    NOT attempt to do so for any request\n   that contains a tag in the To field.
    \ That is, a proxy cannot\n   generate reliable provisional responses to requests
    sent within the\n   context of a dialog.  Of course, unlike a UAS, when the proxy
    element\n   receives a PRACK that does not match any outstanding reliable\n   provisional
    response, the PRACK MUST be proxied.\n   There are several reasons why a UAS might
    want to send a reliable\n   provisional response.  One reason is if the INVITE
    transaction will\n   take some time to generate a final response.  As discussed
    in Section\n   13.3.1.1 of RFC 3261, the UAS will need to send periodic provisional\n
    \  responses to request an \"extension\" of the transaction at proxies.\n   The
    requirement is that a proxy receive them every three minutes, but\n   the UAS
    needs to send them more frequently (once a minute is\n   recommended) because
    of the possibility of packet loss.  As a more\n   efficient alternative, the UAS
    can send the response reliably, in\n   which case the UAS SHOULD send provisional
    responses once every two\n   and a half minutes.  Use of reliable provisional
    responses for\n   extending transactions is RECOMMENDED.\n   The rest of this
    discussion assumes that the initial request\n   contained a Supported or Require
    header field listing 100rel, and\n   that there is a provisional response to be
    sent reliably.\n   The provisional response to be sent reliably is constructed
    by the\n   UAS core according to the procedures of Section 8.2.6 of RFC 3261.\n
    \  In addition, it MUST contain a Require header field containing the\n   option
    tag 100rel, and MUST include an RSeq header field.  The value\n   of the header
    field for the first reliable provisional response in a\n   transaction MUST be
    between 1 and 2**31 - 1.  It is RECOMMENDED that\n   it be chosen uniformly in
    this range.  The RSeq numbering space is\n   within a single transaction.  This
    means that provisional responses\n   for different requests MAY use the same values
    for the RSeq number.\n   The reliable provisional response MAY contain a body.
    \ The usage of\n   session descriptions is described in Section 5.\n   The reliable
    provisional response is passed to the transaction layer\n   periodically with
    an interval that starts at T1 seconds and doubles\n   for each retransmission
    (T1 is defined in Section 17 of RFC 3261).\n   Once passed to the server transaction,
    it is added to an internal\n   list of unacknowledged reliable provisional responses.
    \ The\n   transaction layer will forward each retransmission passed from the\n
    \  UAS core.\n      This differs from retransmissions of 2xx responses, whose\n
    \     intervals cap at T2 seconds.  This is because retransmissions of\n      ACK
    are triggered on receipt of a 2xx, but retransmissions of\n      PRACK take place
    independently of reception of 1xx.\n   Retransmissions of the reliable provisional
    response cease when a\n   matching PRACK is received by the UA core.  PRACK is
    like any other\n   request within a dialog, and the UAS core processes it according
    to\n   the procedures of Sections 8.2 and 12.2.2 of RFC 3261.  A matching\n   PRACK
    is defined as one within the same dialog as the response, and\n   whose method,
    CSeq-num, and response-num in the RAck header field\n   match, respectively, the
    method from the CSeq, the sequence number\n   from the CSeq, and the sequence
    number from the RSeq of the reliable\n   provisional response.\n   If a PRACK
    request is received by the UA core that does not match any\n   unacknowledged
    reliable provisional response, the UAS MUST respond to\n   the PRACK with a 481
    response.  If the PRACK does match an\n   unacknowledged reliable provisional
    response, it MUST be responded to\n   with a 2xx response.  The UAS can be certain
    at this point that the\n   provisional response has been received in order.  It
    SHOULD cease\n   retransmissions of the reliable provisional response, and MUST
    remove\n   it from the list of unacknowledged provisional responses.\n   If a
    reliable provisional response is retransmitted for 64*T1 seconds\n   without reception
    of a corresponding PRACK, the UAS SHOULD reject the\n   original request with
    a 5xx response.\n   If the PRACK contained a session description, it is processed
    as\n   described in Section 5 of this document.  If the PRACK instead\n   contained
    any other type of body, the body is treated in the same way\n   that body in an
    ACK would be treated.\n   After the first reliable provisional response for a
    request has been\n   acknowledged, the UAS MAY send additional reliable provisional\n
    \  responses.  The UAS MUST NOT send a second reliable provisional\n   response
    until the first is acknowledged.  After the first, it is\n   RECOMMENDED that
    the UAS not send an additional reliable provisional\n   response until the previous
    is acknowledged.  The first reliable\n   provisional response receives special
    treatment because it conveys\n   the initial sequence number.  If additional reliable
    provisional\n   responses were sent before the first was acknowledged, the UAS
    could\n   not be certain these were received in order.\n   The value of the RSeq
    in each subsequent reliable provisional\n   response for the same request MUST
    be greater by exactly one.  RSeq\n   numbers MUST NOT wrap around.  Because the
    initial one is chosen to\n   be less than 2**31 - 1, but the maximum is 2**32
    - 1, there can be up\n   to 2**31 reliable provisional responses per request,
    which is more\n   than sufficient.\n   The UAS MAY send a final response to the
    initial request before\n   having received PRACKs for all unacknowledged reliable
    provisional\n   responses, unless the final response is 2xx and any of the\n   unacknowledged
    reliable provisional responses contained a session\n   description.  In that case,
    it MUST NOT send a final response until\n   those provisional responses are acknowledged.
    \ If the UAS does send a\n   final response when reliable responses are still
    unacknowledged, it\n   SHOULD NOT continue to retransmit the unacknowledged reliable\n
    \  provisional responses, but it MUST be prepared to process PRACK\n   requests
    for those outstanding responses.  A UAS MUST NOT send new\n   reliable provisional
    responses (as opposed to retransmissions of\n   unacknowledged ones) after sending
    a final response to a request.\n"
  title: 3 UAS Behavior
- contents:
  - "4 UAC Behavior\n   When the UAC creates a new request, it can insist on reliable\n
    \  delivery of provisional responses for that request.  To do that, it\n   inserts
    a Require header field with the option tag 100rel into the\n   request.  A Require
    header with the value 100rel MUST NOT be present\n   in any requests excepting
    INVITE, although extensions to SIP may\n   allow its usage with other request
    methods.\n               Header field          where   PRACK\n               ___________________________________\n
    \              Accept                  R       o\n               Accept                 2xx
    \     -\n               Accept                 415      c\n               Accept-Encoding
    \        R       o\n               Accept-Encoding        2xx      -\n               Accept-Encoding
    \       415      c\n               Accept-Language         R       o\n               Accept-Language
    \       2xx      -\n               Accept-Language        415      c\n               Alert-Info
    \             R       -\n               Alert-Info             180      -\n               Allow
    \                  R       o\n               Allow                  2xx      o\n
    \              Allow                   r       o\n               Allow                  405
    \     m\n               Authentication-Info    2xx      o\n               Authorization
    \          R       o\n               Call-ID                 c       m\n               Call-Info
    \                      -\n               Contact                 R       -\n               Contact
    \               1xx      -\n               Contact                2xx      -\n
    \              Contact                3xx      o\n               Contact                485
    \     o\n               Content-Disposition             o\n               Content-Encoding
    \               o\n               Content-Language                o\n               Content-Length
    \                 t\n               Content-Type                    *\n               CSeq
    \                   c       m\n               Date                            o\n
    \              Error-Info           300-699    o\n               Expires                         -\n
    \              From                    c       m\n               In-Reply-To             R
    \      -\n               Max-Forwards            R       m\n               Min-Expires
    \           423      -\n               MIME-Version                    o\n               Organization
    \                   -\n               Table 1: Summary of header fields, A--O\n
    \           Header field              where      PRACK\n            __________________________________________\n
    \           Priority                    R          -\n            Proxy-Authenticate
    \        407         m\n            Proxy-Authenticate         401         o\n
    \           Proxy-Authorization         R          o\n            Proxy-Require
    \              R          o\n            Record-Route                R          o\n
    \           Record-Route             2xx,18x       o\n            Reply-To                               -\n
    \           Require                                c\n            Retry-After
    \         404,413,480,486   o\n                                     500,503       o\n
    \                                    600,603       o\n            Route                       R
    \         c\n            Server                      r          o\n            Subject
    \                    R          -\n            Supported                   R          o\n
    \           Supported                  2xx         o\n            Timestamp                              o\n
    \           To                          c          m\n            Unsupported
    \               420         m\n            User-Agent                             o\n
    \           Via                         c          m\n            Warning                     r
    \         o\n            WWW-Authenticate           401         m\n            Table
    2: Summary of header fields, P--Z\n   If the UAC does not wish to insist on usage
    of reliable provisional\n   responses, but merely indicate that it supports them
    if the UAS needs\n   to send one, a Supported header MUST be included in the request
    with\n   the option tag 100rel.  The UAC SHOULD include this in all INVITE\n   requests.\n
    \  If a provisional response is received for an initial request, and\n   that
    response contains a Require header field containing the option\n   tag 100rel,
    the response is to be sent reliably.  If the response is\n   a 100 (Trying) (as
    opposed to 101 to 199), this option tag MUST be\n   ignored, and the procedures
    below MUST NOT be used.\n   The provisional response MUST establish a dialog if
    one is not yet\n   created.\n   Assuming the response is to be transmitted reliably,
    the UAC MUST\n   create a new request with method PRACK.  This request is sent
    within\n   the dialog associated with the provisional response (indeed, the\n
    \  provisional response may have created the dialog).  PRACK requests\n   MAY
    contain bodies, which are interpreted according to their type and\n   disposition.\n
    \  Note that the PRACK is like any other non-INVITE request within a\n   dialog.
    \ In particular, a UAC SHOULD NOT retransmit the PRACK request\n   when it receives
    a retransmission of the provisional response being\n   acknowledged, although
    doing so does not create a protocol error.\n   Once a reliable provisional response
    is received, retransmissions of\n   that response MUST be discarded.  A response
    is a retransmission when\n   its dialog ID, CSeq, and RSeq match the original
    response.  The UAC\n   MUST maintain a sequence number that indicates the most
    recently\n   received in-order reliable provisional response for the initial\n
    \  request.  This sequence number MUST be maintained until a final\n   response
    is received for the initial request.  Its value MUST be\n   initialized to the
    RSeq header field in the first reliable\n   provisional response received for
    the initial request.\n   Handling of subsequent reliable provisional responses
    for the same\n   initial request follows the same rules as above, with the following\n
    \  difference: reliable provisional responses are guaranteed to be in\n   order.
    \ As a result, if the UAC receives another reliable provisional\n   response to
    the same request, and its RSeq value is not one higher\n   than the value of the
    sequence number, that response MUST NOT be\n   acknowledged with a PRACK, and
    MUST NOT be processed further by the\n   UAC.  An implementation MAY discard the
    response, or MAY cache the\n   response in the hopes of receiving the missing
    responses.\n   The UAC MAY acknowledge reliable provisional responses received
    after\n   the final response or MAY discard them.\n"
  title: 4 UAC Behavior
- contents:
  - "5 The Offer/Answer Model and PRACK\n   RFC 3261 describes guidelines for the
    sets of messages in which\n   offers and answers [3] can appear.  Based on those
    guidelines, this\n   extension provides additional opportunities for offer/answer\n
    \  exchanges.\n   If the INVITE contained an offer, the UAS MAY generate an answer
    in a\n   reliable provisional response (assuming these are supported by the\n
    \  UAC).  That results in the establishment of the session before\n   completion
    of the call.  Similarly, if a reliable provisional\n   response is the first reliable
    message sent back to the UAC, and the\n   INVITE did not contain an offer, one
    MUST appear in that reliable\n   provisional response.\n   If the UAC receives
    a reliable provisional response with an offer\n   (this would occur if the UAC
    sent an INVITE without an offer, in\n   which case the first reliable provisional
    response will contain the\n   offer), it MUST generate an answer in the PRACK.
    \ If the UAC receives\n   a reliable provisional response with an answer, it MAY
    generate an\n   additional offer in the PRACK.  If the UAS receives a PRACK with
    an\n   offer, it MUST place the answer in the 2xx to the PRACK.\n   Once an answer
    has been sent or received, the UA SHOULD establish the\n   session based on the
    parameters of the offer and answer, even if the\n   original INVITE itself has
    not been responded to.\n   If the UAS had placed a session description in any
    reliable\n   provisional response that is unacknowledged when the INVITE is\n
    \  accepted, the UAS MUST delay sending the 2xx until the provisional\n   response
    is acknowledged.  Otherwise, the reliability of the 1xx\n   cannot be guaranteed,
    and reliability is needed for proper operation\n   of the offer/answer exchange.\n
    \  All user agents that support this extension MUST support all\n   offer/answer
    exchanges that are possible based on the rules in\n   Section 13.2 of RFC 3261,
    based on the existence of INVITE and PRACK\n   as requests, and 2xx and reliable
    1xx as non-failure reliable\n   responses.\n"
  title: 5 The Offer/Answer Model and PRACK
- contents:
  - "6 Definition of the PRACK Method\n   This specification defines a new SIP method,
    PRACK.  The semantics of\n   this method are described above.  Tables 1 and 2
    extend Tables 2 and\n   3 from RFC 3261 for this new method.\n"
  title: 6 Definition of the PRACK Method
- contents:
  - "7 Header Field Definitions\n   This specification defines two new header fields,
    RAck and RSeq.\n   Table 3 extends Tables 2 and 3 from RFC 3261 for these headers.\n"
  - contents:
    - "7.1 RSeq\n   The RSeq header is used in provisional responses in order to transmit\n
      \  them reliably.  It contains a single numeric value from 1 to 2**32 -\n   1.
      \ For details on its usage, see Section 3.\n   Example:\n   RSeq: 988789\n      Header
      field  where  proxy ACK BYE CAN INV OPT REG PRA\n      ______________________________________________________\n
      \     RAck            R           -   -   -   -   -   -   m\n      RSeq           1xx
      \         -   -   -   o   -   -   -\n      Table 3: RAck and RSeq Header Fields\n"
    title: 7.1 RSeq
  - contents:
    - "7.2 RAck\n   The RAck header is sent in a PRACK request to support reliability
      of\n   provisional responses.  It contains two numbers and a method tag.\n   The
      first number is the value from the RSeq header in the provisional\n   response
      that is being acknowledged.  The next number, and the\n   method, are copied
      from the CSeq in the response that is being\n   acknowledged.  The method name
      in the RAck header is case sensitive.\n   Example:\n      RAck: 776656 1 INVITE\n"
    title: 7.2 RAck
  title: 7 Header Field Definitions
- contents:
  - "8 IANA Considerations\n   This document registers a new option tag and two new
    headers, based\n   on the IANA registration process of RFC 3261.\n"
  - contents:
    - "8.1 IANA Registration of the 100rel Option Tag\n   This specification registers
      a single option tag, 100rel.  The\n   required information for this registration,
      as specified in RFC 3261,\n   is:\n      Name: 100rel\n      Description: This
      option tag is for reliability of provisional\n         responses.  When present
      in a Supported header, it indicates\n         that the UA can send or receive
      reliable provisional responses.\n         When present in a Require header in
      a request, it indicates\n         that the UAS MUST send all provisional responses
      reliably.\n         When present in a Require header in a reliable provisional\n
      \        response, it indicates that the response is to be sent\n         reliably.\n"
    title: 8.1 IANA Registration of the 100rel Option Tag
  - contents:
    - "8.2 IANA Registration of RSeq and RAck Headers\n   The following is the registration
      for the RSeq header:\n      RFC Number: RFC3262\n      Header Name: RSeq\n      Compact
      Form: none\n   The following is the registration for the RAck header:\n      RFC
      Number: RFC3262\n      Header Name: RAck\n      Compact Form: none\n"
    title: 8.2 IANA Registration of RSeq and RAck Headers
  title: 8 IANA Considerations
- contents:
  - "9 Security Considerations\n   The PRACK request can be injected by attackers
    to force\n   retransmissions of reliable provisional responses to cease.  As these\n
    \  responses can convey important information, PRACK messages SHOULD be\n   authenticated
    as any other request.  Authentication procedures are\n   specified in RFC 3261.\n"
  title: 9 Security Considerations
- contents:
  - "10 Collected BNF\n   The BNF for the RAck and RSeq headers and the PRACK method
    are\n   defined here.\n   PRACKm        =  %x50.52.41.43.4B ; PRACK in caps\n
    \  Method        =  INVITEm / ACKm / OPTIONSm / BYEm\n                    / CANCELm
    / REGISTERm / PRACKm\n                    / extension-method\n   RAck          =
    \ \"RAck\" HCOLON response-num LWS CSeq-num LWS Method\n   response-num  =  1*DIGIT\n
    \  CSeq-num      =  1*DIGIT\n   RSeq          =  \"RSeq\" HCOLON response-num\n"
  title: 10 Collected BNF
- contents:
  - "11 Acknowledgements\n   The authors would like to thank Jo Hornsby, Jonathan
    Lennox, Rohan\n   Mahy, Allison Mankin, Adam Roach, and Tim Schroeder for the
    comments\n   on this document.\n"
  title: 11 Acknowledgements
- contents:
  - "12 Normative References\n   [1]   Rosenberg, J., Schulzrinne, H., Camarillo,
    G., Johnston, A.,\n         Peterson, J., Sparks, R., Handley, M. and E. Schooler,
    \"SIP:\n         Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]   Bradner,
    S., \"Key Words for Use in RFCs to Indicate Requirement\n         Levels\", BCP
    14, RFC 2119, March 1997.\n   [3]   Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer
    Model with\n         SDP\", RFC 3264, June 2002.\n"
  title: 12 Normative References
- contents:
  - "13 Informative References\n   [4]   Handley, M., Schulzrinne, H., Schooler, E.
    and J. Rosenberg,\n         \"SIP: Session Initiation Protocol\", RFC 2543, March
    1999.\n"
  title: 13 Informative References
- contents:
  - "14 Authors' Addresses\n   Jonathan Rosenberg\n   dynamicsoft\n   72 Eagle Rock
    Avenue\n   First Floor\n   East Hanover, NJ 07936\n   EMail: jdrosen@dynamicsoft.com\n
    \  Henning Schulzrinne\n   Columbia University\n   M/S 0401\n   1214 Amsterdam
    Ave.\n   New York, NY 10027-7003\n   EMail: schulzrinne@cs.columbia.edu\n"
  title: 14 Authors' Addresses
- contents:
  - "15.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 15.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
