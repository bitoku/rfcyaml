The BLAKE2 Cryptographic Hash and Message Authentication Code (MAC)
This document describes the cryptographic hash function BLAKE2 and makes the algorithm specification and C source code conveniently available to the Internet community.
BLAKE2 comes in two main flavors: BLAKE2b is optimized for 64 bit platforms and BLAKE2s for smaller architectures.
BLAKE2 can be directly keyed, making it functionally equivalent to a Message Authentication Code (MAC).
The BLAKE2 cryptographic hash function [BLAKE2] was designed by Jean  Philippe Aumasson, Samuel Neves, Zooko Wilcox O'Hearn, and Christian Winnerlein.
BLAKE2 comes in two basic flavors:  BLAKE2b (or just BLAKE2) is optimized for 64 bit platforms and produces digests of any size between 1 and 64 bytes.
BLAKE2s is optimized for 8  to 32 bit platforms and produces digests of any size between 1 and 32 bytes.
Both BLAKE2b and BLAKE2s are believed to be highly secure and perform well on any platform, software, or hardware.
BLAKE2 does not require a special "HMAC" (Hashed Message Authentication Code) construction for keyed message authentication as it has a built in keying mechanism.
The BLAKE2 hash function may be used by digital signature algorithms and message authentication and integrity protection mechanisms in applications such as Public Key Infrastructure (PKI), secure communication protocols, cloud storage, intrusion detection, forensic suites, and version control systems.
The BLAKE2 suite provides a more efficient alternative to US Secure Hash Algorithms SHA and HMAC SHA [RFC6234].
BLAKE2s 128 is especially suited as a fast and more secure drop in replacement to MD5 and HMAC MD5 in legacy applications [RFC6151].
To aid implementation, we provide a trace of BLAKE2b 512 hash computation in Appendix A and a trace of BLAKE2s 256 hash computation in Appendix B.
Due to space constraints, this document does not contain a full set of test vectors for BLAKE2.
A reference implementation in C programming language for BLAKE2b can be found in Appendix C and for BLAKE2s in Appendix D of this document.
These implementations MAY be validated with the more exhaustive Test Module contained in Appendix E.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
Conventions, Variables, and Constants 2.1.
These variables are used in the algorithm description:
9]  Message word permutations (constant).
7]  Parameter block (defines hash and key sizes).
15]  Sixteen words of a single message block.
7]  Internal state of the hash.
t  Message byte offset at the end of the current block.
f  Flag indicating the last block.
For real valued x, we define the following functions:
Floor, the largest integer <
Ceiling, the smallest integer >  x.
Positive fractional part of x, frac(x)
Operator notation in pseudocode: 2
n    2 to the power "n".
, 2  1 2, 2  2 4, 2  3 8, etc.
a ^ b    Bitwise exclusive or operation between "a" and "b".
a mod b    Remainder "a" modulo "b", always in range [0, b 1].
> n    floor(x / 2  n).
x" right by "n" bits.
Logical shift "x" left by "n".
Little Endian Interpretation of Words as Bytes
All mathematical operations are on 64 bit words in BLAKE2b and on 32 bit words in BLAKE2s.
We may also perform operations on vectors of words.
Vector indexing is zero based; the first element of an n element vector "v" is v[0] and the last one is v[n 1].
All elements are denoted by v[0..
Byte (octet) streams are interpreted as words in little endian order, with the least significant byte first.
Consider this sequence of eight hexadecimal bytes: x[0..
When interpreted as a 32 bit word from the beginning memory address, x[0..3] has a numerical value of 0x67452301 or 1732584193.
When interpreted as a 64 bit word, bytes x[0..7] have a numerical value of 0xEFCDAB8967452301 or 17279655951921914625.
We specify the parameter block words p[0..
Here the "nn" byte specifies the hash size in bytes.
The second (little endian) byte of the parameter block, "kk", specifies the key size in bytes.
Bytes 2 and 3 are set as 01.
All other bytes in the parameter block are set as zero.
[BLAKE2] defines additional variants of BLAKE2 with features such as salting, personalized hashes, and tree hashing.
These OPTIONAL features use fields in the parameter block that are not defined in this document.
We define the Initialization Vector constant IV mathematically as: IV[i]
), where prime(i) is the i:th prime number ( 2, 3, 5, 7, 11, 13, 17, 19 ) and sqrt(x) is the square root of x.
The numerical values of IV can also be found in implementations in Appendices C and D for BLAKE2b and BLAKE2s, respectively.
Note: BLAKE2b IV is the same as SHA 512 IV, and BLAKE2s IV is the same as SHA 256 IV; see [RFC6234].
Message Schedule SIGMA Message word schedule permutations for each round of both BLAKE2b and BLAKE2s are defined by SIGMA.
BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11]
10 11 12 13 14 15
11 12  6  8  3 13   SIGMA[5]
The G primitive function mixes two input words, "x" and "y", into four words indexed by "a", "b", "c", and "d" in the working vector v[0..15].
The full modified vector is returned.
The rotation constants (R1, R2, R3, R4) are given in Section 2.1.
FUNCTION G( v[0..15], a, b, c, d, x
Compression Function F Compression function F takes as an argument the state vector "h"
, message block vector "m" (last block is padded with zeros to full block size, if required), 2w bit offset counter "t", and final block indicator flag "f".
Local vector v[0..15] is used in processing.
F returns a new state vector.
The number of rounds, "r", is 12 for BLAKE2b and 10 for BLAKE2s.
Rounds are numbered from 0 to r 1.
FUNCTION F( h[0..7], m[0..15], t, f )
// Initialize local work vector v[0..
^ (t mod 2  w)
Low word of the offset.
Message word selection permutation for this round.
v :  G( v, 1, 5,  9, 13, m[s[ 2]], m[s[ 3]] )
v :  G( v, 2, 6, 10, 14, m[s[ 4]], m[s[ 5]] )
v :  G( v, 3, 7, 11, 15, m[s[ 6]],
v :  G( v, 0, 5, 10, 15, m[s[ 8]], m[s[ 9]] )
v :  G( v, 1, 6, 11, 12, m[s[10]], m[s[11]] )
v :  G( v, 2, 7,  8, 13, m[s[12]], m[s[13]] )
FOR i   0 TO 7 DO
Padding Data and Computing a BLAKE2
We refer the reader to Appendices C and D for reference C language implementations of BLAKE2b and BLAKE2s, respectively.
Key and data input are split and padded into "dd" message blocks
dd 1], each consisting of 16 words (or "bb" bytes).
If a secret key is used (kk > 0), it is padded with zero bytes and set as d[0].
Otherwise, d[0] is the first data block.
The final data block d[dd 1] is also padded with zero to "bb" bytes (16 words).
The number of blocks is therefore dd
However, in the special case of an unkeyed empty message (
kk   0 and ll   0), we still set dd   1 and d[0] consists of all zeros.
The following procedure processes the padded data blocks into an "nn" byte final hash value.
See Section 2 for a description of various variables and constants used.
dd 1], ll, kk, nn )
F( h, d[i], (i   1)   bb, FALSE )
RETURN first "nn" bytes from little endian word array h[].
Standard Parameter Sets and Algorithm Identifiers
An implementation of BLAKE2b and/or BLAKE2s MAY support the following digest size parameters for interoperability (e.g., digital signatures), as long as a sufficient level of security is attained by the parameter selections.
These parameters and identifiers are intended to be suitable as drop in replacements to MD5 and corresponding SHA algorithms.
Developers adapting BLAKE2 to ASN.1 based message formats SHOULD use the OID tree at x   1.3.6.1.4.1.1722.12.2.
The same OID can be used for both keyed and unkeyed hashing since in the latter case the key simply has zero length.
This document is intended to provide convenient open source access by the Internet community to the BLAKE2 cryptographic hash algorithm.
We wish to make no independent assertion to its security in this document.
We refer the reader to [BLAKE] and [BLAKE2] for detailed cryptanalytic rationale behind its design.
In order to avoid bloat, the reference implementations in Appendices C and D may not erase all sensitive data (such as secret keys) immediately from process memory after use.
Such cleanup can be added if needed.
We compute the unkeyed hash of three ASCII bytes "abc" with BLAKE2b 512 and show internal values during computation.
0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000
595CB8A9A1ACA66C BEC3AE837EAC4887 6267FC79DF9D6AD1 FA87B01273FA6DBE 521A715C63E08D8A E02D0975B8D37A83
3594B403F81B4393 8CD63C7462DE0DFF 85F693F3DA53F974 BAABDBB2F386D9AE CA5425AEC65A10A8 C6A22E2FF0F7AA48 C6A56A51CB89C595 224E6A3369224F96
500E125E58A92923 E9E4AD0D0E1A0D48 85DF9DC143C59A74 92A3AAAA6D952B7F C5FDF71090FAE853
(i  3) v[16]   60ED96AA7AD41725 E46A743C71800B9D 1A04B543A01F156B
A36077DEE3370B89 8A03C4CB7E97590A 24192E49EBF54EA0 4F82C9401CB32D7A 8CCD013726420DC4 A9C9A8F17B1FC614 55908187977514A0 5B44273E66B19D27
88ED6C4F3BD7A537 19AE688DDF67F026 4D8707AAB40F7E6D FD3F572687FEA4F1 (i 10) v[16]
6A 27 97 B6 9F 12 F6 E9 4C 21 2F 14 68 5A C4 B7 4B 12
BB 6F DB FF A2 D1 7D 87 C5 39 2A AB 79 2D C2 52 D5 DE 45 33 CC 95 18 D3 8A A8 DB F1 92 5A B9 23
Appendix B.  Example of BLAKE2s Computation
We compute the unkeyed hash of three ASCII bytes "abc" with BLAKE2s 256 and show internal values during computation.
BB67AE85 3C6EF372 A54FF53A 510E527F 9B05688C
BB67AE85 3C6EF372 A54FF53A 510E527C 9B05688C
10E864E2 D4AB70D0 C63CB1AB 6038DA9E 414594B0 F2C218B5 8DA0DCB7
D48FC2D5 DC854C10 523898A9 C03A0F89 47D6CD88
FA55A33A 87BE1FAD 4119370F 1E2261AA A1318FD3
32 7C 14 E2 E1 A7 2B A3 4E EB 45 2F 37 45 8B 20 9E D6 3A 29
4D 99 9B 4C 86 67 59 82 Appendix C.  BLAKE2b Implementation C Source C.1.
BLAKE2b Hashing Context and API Prototypes
#ifndef BLAKE2B H #define BLAKE2B H #include <stdint.h
total number of bytes size t c;
1 <  outlen <  64 gives the digest size in bytes. //
also <  64 bytes) is optional
ctx  ctx, size t outlen
Add "inlen" bytes from "in" into the hash.
context const void  in, size t inlen);
// data to be hashed //
All in one convenience function.
A simple BLAKE2b Reference Implementation.
last" flag indicates last block.
ctx  ctx, int last) { const uint8
low 64 bits of offset v[13]
last block flag set ?
twelve rounds B2B G( 0, 4,  8, 12, m[sigma[i]
1 <  outlen <  64 gives the digest size in bytes. //
also <  64 bytes) is optional
ctx  ctx, size t outlen
(keylen 0: no key) { size t i;
if (outlen   0    outlen >
illegal parameters for (i   0; i < 8;
, "param block" ctx h[i]   blake2b iv[i]; ctx h[0]
ctx, const void  in, size t inlen)
} ctx b[ctx c ]
ctx  ctx, void  out) { size t i;
last block offset if (ctx t[0]
little endian convert and store for (i   0
; i < ctx outlen;
Convenience function for all in one computation.
int blake2b(void  out, size t outlen
, const void  key, size t keylen
, const void  in, size t inlen) { blake2b
BLAKE2s Hashing Context and API Prototypes #
ifndef BLAKE2S H #define BLAKE2S H #include <stdint.h
total number of bytes size t c;
1 <  outlen <  32 gives the digest size in bytes. //
also <  32 bytes) is optional (keylen   0).
ctx  ctx, size t outlen
Add "inlen" bytes from "in" into the hash.
context const void  in, size t inlen);
// data to be hashed //
All in one convenience function.
A simple blake2s Reference Implementation.
Mixing function G. #define B2S G(a, b, c, d,
last" flag indicates last block.
blake2s compress(blake2s ctx  ctx, int last
low 32 bits of offset v[13]
last block flag set ?
ten rounds B2S G( 0, 4,  8, 12, m[sigma[i]
1 <  outlen <  32 gives the digest size in bytes. //
also <  32 bytes) is optional (keylen   0).
ctx  ctx, size t outlen
(keylen 0: no key) { size t i; if (outlen   0    outlen >
illegal parameters for (i   0; i < 8;
, "param block" ctx h[i]   blake2s iv[i]; ctx h[0]
zero input block ctx b[i]   0
ctx  ctx, const void  in, size t inlen)
} ctx b[ctx c ]
ctx  ctx, void  out) { size t i;
last block offset if (ctx t[0]
high word while (ctx c < 64)
little endian convert and store for (i   0
; i < ctx outlen;
Convenience function for all in one computation.
int blake2s(void  out, size t outlen
, const void  key, size t keylen
, const void  in, size t inlen) {
Appendix E.  BLAKE2b and BLAKE2s Self Test Module C Source
This module computes a series of keyed and unkeyed hashes from deterministically generated pseudorandom data and computes a hash over those results.
This is a fairly exhaustive, yet compact and fast method for verifying that the hashing module is functioning correctly.
Such testing is RECOMMENDED, especially when compiling the implementation for a new a target platform configuration.
Furthermore, some security standards, such as FIPS 140, may require a Power On Self Test (POST) to be performed every time the cryptographic module is loaded [FIPS140 2IG].
Self test Modules for BLAKE2b and BLAKE2s
> #include "blake2b.h" #include "blake2s.h" //
grand hash of hash results const uint8 t
256 bit hash for testing if (blake2b init(&ctx, 32, NULL, 0))
Grand hash of hash results.
if (blake2s init(&ctx, 32, NULL, 0))
blake2s final(&ctx, md); for (i   0
int main(int argc, char   argv) { printf("blake2b
