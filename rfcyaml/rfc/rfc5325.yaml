- title: __initial_text__
  contents:
  - '              Licklider Transmission Protocol - Motivation

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This RFC is not a candidate for any level of Internet Standard.\
    \  It\n   represents the consensus of the Delay Tolerant Networking (DTN)\n  \
    \ Research Group of the Internet Research Task Force (IRTF).  See RFC\n   3932\
    \ for more information.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the motivation for the development of the\n\
    \   Licklider Transmission Protocol (LTP) designed to provide\n   retransmission-based\
    \ reliability over links characterized by\n   extremely long message round-trip\
    \ times (RTTs) and/or frequent\n   interruptions in connectivity.  Since communication\
    \ across\n   interplanetary space is the most prominent example of this sort of\n\
    \   environment, LTP is principally aimed at supporting \"long-haul\"\n   reliable\
    \ transmission in interplanetary space, but it has\n   applications in other environments\
    \ as well.\n   In an Interplanetary Internet setting deploying the Bundle protocol,\n\
    \   LTP is intended to serve as a reliable convergence layer over\n   single-hop\
    \ deep-space radio frequency (RF) links.  LTP does Automatic\n   Repeat reQuest\
    \ (ARQ) of data transmissions by soliciting selective-\n   acknowledgment reception\
    \ reports.  It is stateful and has no\n   negotiation or handshakes.\n   This\
    \ document is a product of the Delay Tolerant Networking Research\n   Group and\
    \ has been reviewed by that group.  No objections to its\n   publication as an\
    \ RFC were raised.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Problem .........................................................3\n  \
    \    2.1. IPN Operating Environment ..................................3\n    \
    \  2.2. Why Not TCP or SCTP? .......................................5\n   3. Protocol\
    \ Overview ...............................................6\n      3.1. Nominal\
    \ Operation ..........................................6\n           3.1.1. Link\
    \ State Cues .....................................9\n           3.1.2. Deferred\
    \ Transmission ...............................9\n           3.1.3. Timers .............................................10\n\
    \      3.2. Retransmission ............................................13\n  \
    \    3.3. Accelerated Retransmission ................................16\n    \
    \  3.4. Session Cancellation ......................................17\n   4. Security\
    \ Considerations ........................................17\n   5. IANA Considerations\
    \ ............................................20\n   6. Acknowledgments ................................................20\n\
    \   7. References .....................................................20\n  \
    \    7.1. Informative References ....................................20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Licklider Transmission Protocol (LTP) is designed to\
    \ provide\n   retransmission-based reliability over links characterized by\n \
    \  extremely long message round-trip times and/or frequent interruptions\n   in\
    \ connectivity.  Communication in interplanetary space is the most\n   prominent\
    \ example of this sort of environment, and LTP is principally\n   aimed at supporting\
    \ \"long-haul\" reliable transmission over deep-space\n   RF links.  Specifically,\
    \ LTP is intended to serve as a reliable\n   \"convergence layer\" protocol, underlying\
    \ the Delay-Tolerant\n   Networking (DTN) [DTN] Bundle protocol [BP], in DTN deployments\
    \ where\n   data links are characterized by very long round-trip times.\n   This\
    \ document describes the motivation for LTP, its features,\n   functions, and\
    \ overall design.  It is part of a series of documents\n   describing LTP.  Other\
    \ documents in the series include the main\n   protocol specification document\
    \ [LTPSPEC] and the protocol extensions\n   document [LTPEXT].\n   The protocol\
    \ is named in honor of ARPA/Internet pioneer JCR\n   Licklider.\n"
- title: 2.  Problem
  contents:
  - '2.  Problem

    '
- title: 2.1.  IPN Operating Environment
  contents:
  - "2.1.  IPN Operating Environment\n   There are a number of fundamental differences\
    \ between the environment\n   for terrestrial communications (such as seen in\
    \ the Internet) and the\n   operating environments envisioned for the Interplanetary\
    \ Internet\n   (IPN) [IPN].\n   The most challenging difference between communication\
    \ among points on\n   Earth and communication among planets is round-trip delay,\
    \ of which\n   there are two main sources, both relatively intractable: physics\
    \ and\n   economics.\n   The more obvious type of delay imposed by nature is signal\n\
    \   propagation time.  Round-trip times between Earth and Jupiter's moon\n   Europa,\
    \ for example, run between 66 and 100 minutes.\n   Less obvious and more dynamic\
    \ is the delay imposed by occultation.\n   Communication between planets must\
    \ be by radiant transmission, which\n   is usually possible only when the communicating\
    \ entities are in line\n   of sight of each other.  During the time that communication\
    \ is\n   impossible, delivery is impaired and messages must wait in a queue\n\
    \   for later transmission.\n   Round-trip times and occultations can at least\
    \ be readily computed\n   given the ephemerides of the communicating entities.\
    \  Additional\n   delay that is less easily predictable is introduced by discontinuous\n\
    \   transmission support, which is rooted in economics.\n   Communicating over\
    \ interplanetary distances requires expensive\n   special equipment: large antennas,\
    \ high-performance receivers, etc.\n   For most deep-space missions, even non-NASA\
    \ ones, these are currently\n   provided by NASA's Deep Space Network (DSN) [DSN].\
    \  The communication\n   resources of the DSN are currently oversubscribed and\
    \ will probably\n   remain so for the foreseeable future.  Radio contact via the\
    \ DSN must\n   therefore be carefully scheduled and is often severely limited.\n\
    \   This over-subscription means that the round-trip times experienced by\n  \
    \ packets will be affected not only by the signal propagation delay and\n   occultation,\
    \ but also by the scheduling and queuing delays imposed by\n   the management\
    \ of Earth-based resources: packets to be sent to a\n   given destination may\
    \ have to be queued until the next scheduled\n   contact period, which may be\
    \ hours, days, or even weeks away.\n   These operating conditions imply a number\
    \ of additional constraints\n   on any protocol designed to ensure reliable communication\
    \ over deep-\n   space links.\n   - Long round-trip times mean substantial delay\
    \ between the\n     transmission of a block of data and the reception of an\n\
    \     acknowledgment from the block's destination, signaling arrival of\n    \
    \ the block.  If LTP postponed transmission of additional blocks of\n     data\
    \ until it received acknowledgment of the arrival of all prior\n     blocks, valuable\
    \ opportunities to utilize what little deep-space\n     transmission bandwidth\
    \ is available would be forever lost.\n     Multiple parallel data block transmission\
    \ \"sessions\" must be in\n     progress concurrently in order to avoid under-utilization\
    \ of the\n     links.\n   - Like any reliable transport service employing ARQ,\
    \ LTP is\n     \"stateful\".  In order to ensure the reception of a block of data\
    \ it\n     has sent, LTP must retain for possible retransmission all portions\n\
    \     of that block that might not have been received yet.  In order to\n    \
    \ do so, it must keep track of which portions of the block are known\n     to\
    \ have been received so far and which are not, together with any\n     additional\
    \ information needed for purposes of retransmitting part\n     or all of that\
    \ block.\n   - In the IPN, round-trip times may be so long and communication\n\
    \     opportunities so brief that a negotiation exchange, such as an\n     adjustment\
    \ of transmission rate, might not be completed before\n     connectivity is lost.\
    \  Even if connectivity is uninterrupted,\n     waiting for negotiation to complete\
    \ before revising data\n     transmission parameters might well result in costly\
    \ under-\n     utilization of link resources.\n   - Another respect in which LTP\
    \ differs from TCP is that, while TCP\n     connections are bidirectional (blocks\
    \ of application data may be\n     flowing in both directions on any single connection),\
    \ LTP sessions\n     are unidirectional.  This design decision derives from the\
    \ fact\n     that the flow of data in deep-space flight missions is usually\n\
    \     unidirectional.  (Long round-trip times make interactive spacecraft\n  \
    \   operation infeasible, so spacecraft are largely autonomous and\n     command\
    \ traffic is very light.)  Bidirectional data flow, where\n     possible, is performed\
    \ using two unidirectional links in opposite\n     directions and at different\
    \ data rates.\n   - Finally, the problem of timeout interval computation in the\n\
    \     environment for which LTP is mainly intended is different from the\n   \
    \  analogous problem in the Internet.  Since multiple sessions can be\n     conducted\
    \ in parallel, retardation of transmission on any single\n     session while awaiting\
    \ a timeout need not degrade communication\n     performance on the association\
    \ as a whole.  Timeout intervals that\n     would be intolerably optimistic in\
    \ TCP don't necessarily degrade\n     LTP's bandwidth utilization.\n     But the\
    \ reciprocal half-duplex nature of LTP communication makes it\n     infeasible\
    \ to use statistical analysis of round-trip history as a\n     means of predicting\
    \ round-trip time.  The round-trip time for\n     transmitted segment N could\
    \ easily be orders of magnitude greater\n     than that for segment N-1 if there\
    \ happened to be a transient loss\n     of connectivity between the segment transmissions.\
    \  A different\n     mechanism for timeout interval computation is needed.\n"
- title: 2.2.  Why Not TCP or SCTP?
  contents:
  - "2.2.  Why Not TCP or SCTP?\n   These environmental characteristics -- long and\
    \ highly variable\n   delays, intermittent connectivity, and relatively high error\
    \ rates --\n   make using unmodified TCP for end-to-end communications in the\
    \ IPN\n   infeasible.  Using the TCP throughput equation from [TFRC] we can\n\
    \   calculate the loss event rate (p) required to achieve a given steady-\n  \
    \ state throughput.  Assuming the minimum RTT to Mars from planet Earth\n   is\
    \ 8 minutes (one-way speed of light delay to Mars at its closest\n   approach\
    \ to Earth is 4 minutes), assuming a packet size of 1500\n   bytes, assuming that\
    \ the receiver acknowledges every other packet,\n   and ignoring negligible higher-order\
    \ terms in p (i.e., ignoring the\n   second additive term in the denominator of\
    \ the TCP throughput\n   equation), we obtain the following table of loss event\
    \ rates required\n   to achieve various throughput values.\n      Throughput \
    \             Loss event rate (p)\n      ----------              -------------------\n\
    \        10 Mbps                  4.68 * 10^(-12)\n         1 Mbps           \
    \       4.68 * 10^(-10)\n       100 Kbps                  4.68 * 10^(-8)\n   \
    \     10 Kbps                  4.68 * 10^(-6)\n   Note that although multiple\
    \ losses encountered in a single RTT are\n   treated as a single loss event in\
    \ the TCP throughput equation [TFRC],\n   such loss event rates are still unrealistic\
    \ on deep-space links.\n   For the purposes of this discussion, we are not considering\
    \ the more\n   aggressive TCP throughput equation that characterizes HighSpeed\
    \ TCP\n   [HSTCP].\n   The TCP characteristic of an initial three-way handshake\
    \ for each new\n   connection, followed by slow-start, is a further obstacle,\
    \ because\n   the delay of the three-way handshake and the additional delay of\n\
    \   slow-start could be exorbitant in a long-delay environment.\n   The Stream\
    \ Control Transmission Protocol (SCTP) [SCTP] can multiplex\n   \"chunks\" (units\
    \ of application data) for multiple sessions over a\n   single-layer connection\
    \ (called an 'association' in SCTP terminology)\n   as LTP does, but it still\
    \ requires multiple round trips prior to\n   transmitting application data for\
    \ session setup and so clearly does\n   not suit the needs of the IPN operating\
    \ environment.\n"
- title: 3. Protocol Overview
  contents:
  - '3. Protocol Overview

    '
- title: 3.1.  Nominal Operation
  contents:
  - "3.1.  Nominal Operation\n   The nominal sequence of events in an LTP transmission\
    \ session is as\n   follows.\n   Operation begins when a client service instance\
    \ asks an LTP engine to\n   transmit a block of data to a remote client service\
    \ instance.\n   LTP regards each block of data as comprising two parts: a \"red-part\"\
    ,\n   whose delivery must be assured by acknowledgment and retransmission\n  \
    \ as necessary, followed by a \"green-part\" whose delivery is attempted,\n  \
    \ but not assured.  The length of either part may be zero; that is, any\n   given\
    \ block may be designated entirely red (retransmission continues\n   until reception\
    \ of the entire block has been asserted by the\n   receiver) or entirely green\
    \ (no part of the block is acknowledged or\n   retransmitted).  Thus, LTP can\
    \ provide both TCP-like and UDP-like\n   functionality concurrently on a single\
    \ session.\n   Note that in a red-green block transmission, the red-part data\
    \ does\n   NOT have any urgency or higher-priority semantics relative to the\n\
    \   block's green-part data.  The red-part data is merely data for which\n   the\
    \ user has requested reliable transmission, possibly (though not\n   necessarily)\
    \ data without which the green-part data may be useless,\n   such as an application-layer\
    \ header or other metadata.\n   The client service instance uses the LTP implementation's\
    \ application\n   programming interface to specify to LTP the identity of the\
    \ remote\n   client service instance to which the data must be transmitted, the\n\
    \   location of the data to be transmitted, the total length of data to\n   be\
    \ transmitted, and the number of leading data bytes that are to be\n   transmitted\
    \ reliably as \"red\" data.  The sending engine starts a\n   transmission session\
    \ for this block and notifies the client service\n   instance that the session\
    \ has been started.  Note that\n   LTP communication session parameters are not\
    \ negotiated but are\n   instead asserted unilaterally, subject to application-level\
    \ network\n   management activity; the sending engine does not negotiate the start\n\
    \   of the session with the remote client service instance's engine.\n   The sending\
    \ engine then initiates the original transmission: it\n   queues for transmission\
    \ as many data segments as are necessary to\n   transmit the entire block, within\
    \ the constraints on maximum segment\n   size imposed by the underlying communication\
    \ service.  The last\n   segment of the red-part of the block is marked as the\
    \ end of red-part\n   (EORP) indicating the end of red-part data for the block,\
    \ and as a\n   checkpoint (identified by a unique checkpoint serial number)\n\
    \   indicating that the receiving engine must issue a reception report\n   upon\
    \ receiving the segment.  The last segment of the block overall is\n   marked\
    \ end of block (EOB) indicating that the receiving engine can\n   calculate the\
    \ size of the block by summing the offset and length of\n   the data in the segment.\n\
    \   LTP is designed to run directly over a data-link layer protocol, but\n   it\
    \ may instead be deployed directly over UDP in some cases (i.e., for\n   software\
    \ development or in private local area networks).  In either\n   case, the protocol\
    \ layer immediately underlying LTP is here referred\n   to as the \"local data-link\
    \ layer\".\n   At the next opportunity, subject to allocation of bandwidth to\
    \ the\n   queue into which the block data segments were written, the enqueued\n\
    \   segments and their lengths are passed to the local data-link layer\n   protocol\
    \ (which might be UDP/IP) via the API supported by that\n   protocol, for transmission\
    \ to the LTP engine serving the remote\n   client service instance.\n   A timer\
    \ is started for the EORP, so that it can be retransmitted\n   automatically if\
    \ no response is received.\n   The content of each local data-link layer protocol\
    \ data unit (link-\n   layer frame or UDP datagram) is required to be an integral\
    \ number of\n   LTP segments, and the local data-link layer protocol is required\n\
    \   never to deliver incomplete LTP segments to the receiving LTP engine.\n  \
    \ When the local data-link layer protocol is UDP, the LTP\n   authentication [LTPEXT]\
    \ extension should be used to ensure data\n   integrity unless the end-to-end\
    \ path is one in which either the\n   likelihood of datagram content corruption\
    \ is negligible (as in some\n   private local area networks) or the consequences\
    \ of receiving and\n   processing corrupt LTP segments are insignificant (as perhaps\
    \ during\n   software development).  When the LTP authentication extension is\
    \ not\n   used, LTP requires the local data-link layer protocol to perform\n \
    \  integrity checking of all segments received; specifically, the local\n   data-link\
    \ layer protocol is required to detect any corrupted segments\n   that are received\
    \ and to discard them silently.\n   Received segments that are not discarded are\
    \ passed up to the\n   receiving LTP engine via the API supported by the local\
    \ data-link\n   layer protocol.\n   On reception of the first data segment for\
    \ the block, the receiving\n   engine starts a reception session for this block\
    \ and notifies the\n   local instance of the relevant client service that the\
    \ session has\n   been started.  In the nominal case, it receives all segments\
    \ of the\n   original transmission without error.  Therefore, on reception of\
    \ the\n   EORP data segment, it responds by (a) queuing for transmission to the\n\
    \   sending engine a report segment indicating complete reception and (b)\n  \
    \ delivering the received red-part of the block to the local instance\n   of the\
    \ client service: on reception of each data segment of the\n   green-part, it\
    \ responds by immediately delivering the received data\n   to the local instance\
    \ of the client service.\n   All delivery of data and protocol event notices to\
    \ the local client\n   service instance is performed using the LTP implementation's\n\
    \   application programming interface.\n   Note that since LTP data flows are\
    \ unidirectional, LTP's data\n   acknowledgments -- \"reception reports\" -- can't\
    \ be piggybacked on\n   data segments as in TCP.  They are instead carried in\
    \ a separate\n   segment type.\n   At the next opportunity, the enqueued report\
    \ segment is immediately\n   transmitted to the sending engine and a timer is\
    \ started so that the\n   report segment can be retransmitted automatically if\
    \ no response is\n   received.\n   The sending engine receives the report segment,\
    \ turns off the timer\n   for the EORP, enqueues for transmission to the receiving\
    \ engine a\n   report-acknowledgment segment, and notifies the local client service\n\
    \   instance that the red-part of the block has been successfully\n   transmitted.\
    \  The session's red-part transmission has now ended.\n   At the next opportunity,\
    \ the enqueued report-acknowledgment segment\n   is immediately transmitted to\
    \ the receiving engine.\n   The receiving engine receives the report-acknowledgment\
    \ segment and\n   turns off the timer for the report segment.  The session's red-part\n\
    \   reception has now ended and transmission of the block is complete.\n"
- title: 3.1.1.  Link State Cues
  contents:
  - "3.1.1.  Link State Cues\n   Establishing a communication link across interplanetary\
    \ distances may\n   entail hardware configuration changes based on the presumed\n\
    \   operational state of the remote communicating entity, for example:\n     \
    \ o orienting a directional antenna correctly;\n      o tuning a transponder to\
    \ pre-selected transmission and/or\n        reception frequencies; and\n     \
    \ o diverting precious electrical power to the transponder at the\n        last\
    \ possible moment, and for the minimum necessary length of\n        time.\n  \
    \ We therefore assume that the operating environment in which LTP\n   functions\
    \ is able to pass information on the link status (termed\n   \"link state cues\"\
    \ in this document) to LTP, telling it which remote\n   LTP engine(s) should currently\
    \ be transmitting to the local LTP\n   engine and vice versa.  The operating environment\
    \ itself must have\n   this information in order to configure communication link\
    \ hardware\n   correctly.\n"
- title: 3.1.2.  Deferred Transmission
  contents:
  - "3.1.2.  Deferred Transmission\n   Link state cues also notify LTP when it is\
    \ and isn't possible to\n   transmit segments.  In deep-space communications,\
    \ at no moment can\n   there ever be any expectation of two-way connectivity.\
    \  It is always\n   possible for LTP to be generating outbound segments -- in\
    \ response to\n   received segments, timeouts, or requests from client services\
    \ -- that\n   cannot immediately be transmitted.  These segments must be queued\
    \ for\n   transmission at a later time when a link has been established, as\n\
    \   signaled by a link state cue.\n   In concept, every outbound LTP segment is\
    \ appended to one of two\n   queues -- forming a queue-set -- of traffic bound\
    \ for the LTP engine\n   that is that segment's destination.  One such traffic\
    \ queue is the\n   \"internal operations queue\" of that queue set; the other\
    \ is the\n   application data queue for the queue set.  The de-queuing of a\n\
    \   segment always implies delivering it to the underlying communication\n   system\
    \ for immediate transmission.  Whenever the internal operations\n   queue is non-empty,\
    \ the oldest segment in that queue is the next\n   segment de-queued for transmission\
    \ to the destination; at all other\n   times, the oldest segment in the application\
    \ data queue is the next\n   segment de-queued for transmission to the destination.\n\
    \   The production and enqueuing of a segment and the subsequent actual\n   transmission\
    \ of that segment are in principle wholly asynchronous.\n   In the event that\
    \ (a) a transmission link to the destination is\n   currently active and (b) the\
    \ queue to which a given outbound segment\n   is appended is otherwise empty and\
    \ (c) either this queue is the\n   internal operations queue or else the internal\
    \ operations queue is\n   empty, the segment will be transmitted immediately upon\
    \ production.\n   Transmission of a newly queued segment is necessarily deferred\
    \ in all\n   other circumstances.\n   Conceptually, the de-queuing of segments\
    \ from traffic queues bound\n   for a given destination is initiated upon reception\
    \ of a link state\n   cue indicating that the underlying communication system\
    \ is now\n   transmitting to that destination; i.e., the link to that destination\n\
    \   is now active.  It ceases upon reception of a link state cue\n   indicating\
    \ that the underlying communication system is no longer\n   transmitting to that\
    \ destination; i.e., the link to that destination\n   is no longer active.\n"
- title: 3.1.3.  Timers
  contents:
  - "3.1.3.  Timers\n   LTP relies on accurate calculation of expected arrival times\
    \ for\n   report and acknowledgment segments in order to know when proactive\n\
    \   retransmission is required.  If a calculated time were even slightly\n   early,\
    \ the result would be costly unnecessary retransmission.  On the\n   other hand,\
    \ calculated arrival times may safely be several seconds\n   late: the only penalties\
    \ for late timeout and retransmission are\n   slightly delayed data delivery and\
    \ slightly delayed release of\n   session resources.\n   Since statistics derived\
    \ from round-trip history cannot safely be\n   used as a predictor of LTP round-trip\
    \ times, we have to assume that\n   round-trip timing is at least roughly deterministic\
    \ -- i.e., that\n   sufficiently accurate RTT estimates can be computed individually\
    \ in\n   real time from available information.\n   This computation is performed\
    \ in two stages:\n      - We calculate a first approximation of RTT by simply\
    \ doubling the\n        known one-way light time to the destination and adding\
    \ an\n        arbitrary margin for any additional anticipated latency, such as\n\
    \        queuing and processing delay at both ends of the transmission.\n    \
    \    For deep-space operations, the margin value is typically a small\n      \
    \  number of whole seconds.  Although such a margin is enormous by\n        Internet\
    \ standards, it is insignificant compared to the two-way\n        light time component\
    \ of round-trip time in deep space.  We\n        choose to risk tardy retransmission,\
    \ which will postpone\n        delivery of one block by a relatively tiny increment,\
    \ in\n        preference to premature retransmission, which will unnecessarily\n\
    \        consume precious bandwidth and thereby degrade overall\n        performance.\n\
    \      - Then, to account for the additional delay imposed by interrupted\n  \
    \      connectivity, we dynamically suspend timers during periods when\n     \
    \   the relevant remote LTP engines are known to be unable to\n        transmit\
    \ responses.  This knowledge of the operational state of\n        remote entities\
    \ is assumed to be provided by link state cues\n        from the operating environment.\n\
    \   The following discussion is the basis for LTP's expected arrival time\n  \
    \ calculations.\n   The total time consumed in a single \"round trip\" (transmission\
    \ and\n   reception of the original segment, followed by transmission and\n  \
    \ reception of the acknowledging segment) has the following components:\n    \
    \  - Protocol processing time: The time consumed in issuing the\n        original\
    \ segment, receiving the original segment, generating and\n        issuing the\
    \ acknowledging segment, and receiving the\n        acknowledging segment.\n \
    \     - Outbound queuing delay: The delay at the sender of the original\n    \
    \    segment while that segment is in a queue waiting for\n        transmission,\
    \ and delay at the sender of the acknowledging\n        segment while that segment\
    \ is in a queue waiting for\n        transmission.\n      - Radiation time: The\
    \ time that passes while all bits of the\n        original segment are being radiated,\
    \ and the time that passes\n        while all bits of the acknowledging segment\
    \ are being radiated.\n        (This is significant only at extremely low data\
    \ transmission\n        rates.)\n      - Round-trip light time: The signal propagation\
    \ delay at the speed\n        of light, in both directions.\n      - Inbound queuing\
    \ delay: Delay at the receiver of the original\n        segment while that segment\
    \ is in a reception queue, and delay at\n        the receiver of the acknowledging\
    \ segment while that segment is\n        in a reception queue.\n      - Delay\
    \ in transmission of the original segment or the\n        acknowledging segment\
    \ due to loss of connectivity -- that is,\n        interruption in outbound link\
    \ activity at the sender of either\n        segment due to occultation, scheduled\
    \ end of tracking pass, etc.\n   In this context, where errors on the order of\
    \ seconds or even minutes\n   may be tolerated, protocol processing time at each\
    \ end of the session\n   is assumed to be negligible.\n   Inbound queuing delay\
    \ is also assumed to be negligible because, even\n   on small spacecraft, LTP\
    \ processing speeds are high compared to data\n   transmission rates.\n   Two\
    \ mechanisms are used to make outbound queuing delay negligible:\n      - The\
    \ expected arrival time of an acknowledging segment is not\n        calculated\
    \ until the moment the underlying communication system\n        notifies LTP that\
    \ radiation of the original segment has begun.\n        All outbound queuing delay\
    \ for the original segment has already\n        been incurred at that point.\n\
    \      - LTP's deferred transmission model minimizes latency in the\n        delivery\
    \ of acknowledging segments (reports and acknowledgments)\n        to the underlying\
    \ communication system.  That is, acknowledging\n        segments are (in concept)\
    \ appended to the internal operations\n        queue rather than the application\
    \ data queue, so they have\n        higher transmission priority than any other\
    \ outbound segments,\n        i.e., they should always be de-queued for transmission\
    \ first.\n        This limits outbound queuing delay for a given acknowledging\n\
    \        segment to the time needed to de-queue and radiate all\n        previously\
    \ generated acknowledging segments that have not yet\n        been de-queued for\
    \ transmission.  Since acknowledging segments\n        are sent infrequently and\
    \ are normally very small, outbound\n        queuing delay for a given acknowledging\
    \ segment is likely to be\n        minimal.\n   Deferring calculation of the expected\
    \ arrival time of the\n   acknowledging segment until the moment at which the\
    \ original segment\n   is radiated has the additional effect of removing from\
    \ consideration\n   any original segment transmission delay due to loss of connectivity\n\
    \   at the original segment sender.\n   Radiation delay at each end of the session\
    \ is simply segment size\n   divided by transmission data rate.  It is insignificant\
    \ except when\n   the data rate is extremely low (for example, 10 bps), in which\
    \ case\n   the use of LTP may well be inadvisable for other reasons (LTP header\n\
    \   overhead, for example, could be too much under such data rates).\n   Therefore,\
    \ radiation delay is normally assumed to be negligible.\n   We assume that one-way\
    \ light time to the nearest second can always be\n   known (for example, provided\
    \ by the operating environment).\n   So the initial expected arrival time for\
    \ each acknowledging segment\n   is typically computed as simply the current time\
    \ at the moment that\n   radiation of the original segment begins, plus twice\
    \ the one-way\n   light time, plus 2*N seconds of margin to account for processing\
    \ and\n   queuing delays and for radiation time at both ends.  N is a parameter\n\
    \   set by network management for which 2 seconds seem to be a reasonable\n  \
    \ default value.\n   This leaves only one unknown, the additional round-trip time\n\
    \   introduced by loss of connectivity at the sender of the acknowledging\n  \
    \ segment.  To account for this, we again rely on external link state\n   cues.\
    \  Whenever interruption of transmission at a remote LTP engine\n   is signaled\
    \ by a link state cue, we suspend the countdown timers for\n   all acknowledging\
    \ segments expected from that engine.  Upon a signal\n   that transmission has\
    \ resumed at that engine, we resume those timers\n   after (in effect) adding\
    \ to each expected arrival time the length of\n   the timer suspension interval.\n"
- title: 3.2.  Retransmission
  contents:
  - "3.2.  Retransmission\n   Loss or corruption of transmitted segments may cause\
    \ the operation of\n   LTP to deviate from the nominal sequence of events described\
    \ above.\n   Loss of one or more red-part data segments other than the EORP\n\
    \   segment triggers data retransmission: the receiving engine returns a\n   reception\
    \ report detailing all the contiguous ranges of red-part data\n   received (assuming\
    \ no discretionary checkpoints were received, which\n   are described below).\
    \  The reception report is normally sent in a\n   single report segment that carries\
    \ a unique report serial number and\n   the scope of red-part data covered.  For\
    \ example, if the red-part\n   data covered block offsets [0:1000] and all but\
    \ the segment in range\n   [500:600] were received, the report segment with a\
    \ unique serial\n   number (say 100) and scope [0:1000] would carry two report\
    \ entries:\n   (0:500) and (600:1000).  The maximum size of a report segment,\
    \ like\n   all LTP segments, is constrained by the data-link MTU; if many non-\n\
    \   contiguous segments were lost in a large block transmission and/or\n   the\
    \ data-link MTU was relatively small, multiple report segments need\n   to be\
    \ generated.  In this case, LTP generates as many report segments\n   as are necessary\
    \ and splits the scope of red-part data covered across\n   multiple report segments\
    \ so that each of them may stand on their own.\n   For example, if three report\
    \ segments are to be generated as part of\n   a reception report covering red-part\
    \ data in range [0:1,000,000],\n   they could look like this: RS 19, scope [0:300,000],\
    \ RS 20, scope\n   [300,000:950,000], and RS 21, scope [950,000:1,000,000].  In\
    \ all\n   cases, a timer is started upon transmission of each report segment of\n\
    \   the reception report.\n   On reception of each report segment, the sending\
    \ engine responds as\n   follows:\n      - It turns off the timer for the checkpoint\
    \ referenced by the\n        report segment, if any.\n      - It enqueues a reception-acknowledgment\
    \ segment acknowledging the\n        report segment (to turn off the report retransmission\
    \ timer at\n        the receiving engine).  This segment is sent immediately at\
    \ the\n        next transmission opportunity.\n      - If the reception claims\
    \ in the report segment indicate that not\n        all data within the scope have\
    \ been received, it normally\n        initiates a retransmission by enqueuing\
    \ all data segments not\n        yet received.  The last such segment is marked\
    \ as a checkpoint\n        and contains the report serial number of the report\
    \ segment to\n        which the retransmission is a response.  These segments\
    \ are\n        likewise sent at the next transmission opportunity, but only\n\
    \        after all data segments previously queued for transmission to\n     \
    \   the receiving engine have been sent.  A timer is started for the\n       \
    \ checkpoint, so that it can be retransmitted automatically if no\n        responsive\
    \ report segment is received.\n      - On the other hand, if the reception claims\
    \ in the report segment\n        indicate that all data within the scope of the\
    \ report segment\n        have been received, and the union of all reception claims\n\
    \        received so far in this session indicates that all data in the\n    \
    \    red-part of the block have been received, then the sending\n        engine\
    \ notifies the local client service instance that the red-\n        part of the\
    \ block has been successfully transmitted; the\n        session's red-part transmission\
    \ has ended.\n   On reception of a report-acknowledgment segment, the receiver\
    \ turns\n   off the timer for the referenced report segment.\n   On reception\
    \ of a checkpoint segment with a non-zero report serial\n   number, the receiving\
    \ engine responds as follows:\n      - It returns a reception report comprising\
    \ as many report segments\n        as are needed in order to report in detail\
    \ on all data reception\n        within the scope of the referenced report segment,\
    \ and a timer\n        is started for each report segment.\n      - If at this\
    \ point all data in the red-part of the block have been\n        received, the\
    \ receiving engine delivers the received block's\n        red-part to the local\
    \ instance of the client service and, upon\n        reception of reception-acknowledgment\
    \ segments acknowledging all\n        report segments, the session's red-part\
    \ reception ends and\n        transmission of the block is complete.  Otherwise,\
    \ the data\n        retransmission cycle continues.\n   Loss of a checkpoint segment\
    \ or the report segment generated in\n   response causes timer expiry; when this\
    \ occurs, the sending engine\n   normally retransmits the checkpoint segment.\
    \  Similarly, the loss of\n   a report segment or the corresponding report-acknowledgment\
    \ segment\n   causes the report segment's timer to expire; when this occurs, the\n\
    \   receiving engine normally retransmits the report segment.\n   Note that the\
    \ redundant reception of a report segment (i.e., one that\n   was already received\
    \ and processed by the sender), retransmitted due\n   to loss of the corresponding\
    \ report-acknowledgment segment for\n   example, causes another report-acknowledgment\
    \ segment to be\n   transmitted in response but is otherwise ignored.  If any\
    \ of the data\n   segments retransmitted in response to the original reception\
    \ of the\n   report segment were lost, further retransmission of those data\n\
    \   segments will be requested by the reception report generated in\n   response\
    \ to the last retransmitted data segment marked as a\n   checkpoint.  Thus, unnecessary\
    \ retransmission is suppressed.\n   Note also that the responsibility for responding\
    \ to segment loss in\n   LTP is shared between the sender and receiver of a block:\
    \ the sender\n   retransmits checkpoint segments in response to checkpoint timeouts,\n\
    \   and retransmits missing data in response to reception reports\n   indicating\
    \ incomplete reception, while the receiver retransmits\n   report segments in\
    \ response to timeouts.  An alternative design would\n   have been to make the\
    \ sender responsible for all retransmission, in\n   which case the receiver would\
    \ not expect report-acknowledgment\n   segments and would not retransmit report\
    \ segments.  There are two\n   disadvantages to this approach:\n   First, because\
    \ of constraints on segment size that might be imposed\n   by the underlying communication\
    \ service, it is at least remotely\n   possible that the response to any single\
    \ checkpoint might be multiple\n   report segments.  An additional sender-side\
    \ mechanism for detecting\n   and appropriately responding to the loss of some\
    \ proper subset of\n   those reception reports would be needed.  We believe that\
    \ the current\n   design is simpler.\n   Second, an engine that receives a block\
    \ needs a way to determine when\n   the session can be closed.  In the absence\
    \ of explicit final report\n   acknowledgment (which entails retransmission of\
    \ the report in case of\n   the loss of the report acknowledgment), the alternatives\
    \ are (a) to\n   close the session immediately on transmission of the report segment\n\
    \   that signifies complete reception and (b) to close the session on\n   receipt\
    \ of an explicit authorization from the sender.  In case (a),\n   loss of the\
    \ final report segment would cause retransmission of a\n   checkpoint by the sender,\
    \ but the session would no longer exist at\n   the time the retransmitted checkpoint\
    \ arrived.  The checkpoint could\n   reasonably be interpreted as the first data\
    \ segment of a new block,\n   most of which was lost in transit, and the result\
    \ would be redundant\n   retransmission of the entire block.  In case (b), the\
    \ explicit\n   session termination segment and the responsive acknowledgment by\
    \ the\n   receiver (needed in order to turn off the timer for the termination\n\
    \   segment, which in turn would be needed in case of in-transit loss or\n   corruption\
    \ of the termination segment) would somewhat complicate the\n   protocol, increase\
    \ bandwidth consumption, and retard the release of\n   session state resources\
    \ at the sender.  Here again we believe that\n   the current design is simpler\
    \ and more efficient.\n"
- title: 3.3.  Accelerated Retransmission
  contents:
  - "3.3.  Accelerated Retransmission\n   Data segment retransmission occurs only\
    \ on receipt of a report\n   segment indicating incomplete reception; report segments\
    \ are normally\n   transmitted only at the end of original transmission of the\
    \ red-part\n   of a block or at the end of a retransmission.  For some applications,\n\
    \   it may be desirable to trigger data segment retransmission\n   incrementally\
    \ during the course of red-part original transmission so\n   that the missing\
    \ segments are recovered sooner.  This can be\n   accomplished in two ways:\n\
    \      - Any red-part data segment prior to the EORP can additionally be\n   \
    \     flagged as a checkpoint.  Reception of each such \"discretionary\"\n   \
    \     checkpoint causes the receiving engine to issue a reception\n        report.\n\
    \      - At any time during the original transmission of a block's red-\n    \
    \    part (that is, prior to reception of any data segment of the\n        block's\
    \ green-part), the receiving engine can unilaterally issue\n        additional\
    \ asynchronous reception reports.  Note that the CFDP\n        protocol's \"Immediate\"\
    \ mode is an example of this sort of\n        asynchronous reception reporting\
    \ [CFDP].  The reception reports\n        generated for accelerated retransmission\
    \ are processed in\n        exactly the same way as the standard reception reports.\n"
- title: 3.4.  Session Cancellation
  contents:
  - "3.4.  Session Cancellation\n   A transmission session may be canceled by either\
    \ the sending or the\n   receiving engine in response either to a request from\
    \ the local\n   client service instance or to an LTP operational failure as noted\n\
    \   earlier.  Session cancellation is accomplished as follows.\n   The canceling\
    \ engine deletes all currently queued segments for the\n   session and notifies\
    \ the local instance of the affected client\n   service that the session is canceled.\
    \  If no segments for this\n   session have yet been sent to or received from\
    \ the corresponding LTP\n   engine, then at this point the canceling engine simply\
    \ closes its\n   state record for the session and cancellation is complete.\n\
    \   Otherwise, a session cancellation segment is queued for transmission.\n  \
    \ At the next opportunity, the enqueued cancellation segment is\n   immediately\
    \ transmitted to the LTP engine serving the remote client\n   service instance.\
    \  A timer is started for the segment, so that it can\n   be retransmitted automatically\
    \ if no response is received.\n   The corresponding engine receives the cancellation\
    \ segment, enqueues\n   for transmission to the canceling engine a cancellation-\n\
    \   acknowledgment segment, deletes all other currently queued segments\n   for\
    \ the indicated session, notifies the local client service instance\n   that the\
    \ block has been canceled, and closes its state record for the\n   session.\n\
    \   At the next opportunity, the enqueued cancellation-acknowledgment\n   segment\
    \ is immediately transmitted to the canceling engine.\n   The canceling engine\
    \ receives the cancellation-acknowledgment, turns\n   off the timer for the cancellation\
    \ segment, and closes its state\n   record for the session.\n   Loss of a cancellation\
    \ segment or of the responsive cancellation-\n   acknowledgment causes the cancellation\
    \ segment timer to expire.  When\n   this occurs, the canceling engine retransmits\
    \ the cancellation\n   segment.\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   There is a clear risk that unintended receivers\
    \ can listen in on LTP\n   transmissions over satellite and other radio broadcast\
    \ data links.\n   Such unintended recipients of LTP transmissions may also be\
    \ able to\n   manipulate LTP segments at will.\n   Hence, there is a potential\
    \ requirement for confidentiality,\n   integrity, and anti-DoS (Denial of Service)\
    \ security services and\n   mechanisms.\n   In particular, DoS problems are more\
    \ severe for LTP compared to\n   typical Internet protocols because LTP inherently\
    \ retains state for\n   long periods and has very long time-out values.  Further,\
    \ it could be\n   difficult to reset LTP nodes to recover from an attack.  Thus,\
    \ any\n   adversary who can actively attack an LTP transmission has the\n   potential\
    \ to create severe DoS conditions for the LTP receiver.\n   To give a terrestrial\
    \ example: were LTP to be used in a sparse sensor\n   network, DoS attacks could\
    \ be mounted resulting in nodes missing\n   critical information, such as communications\
    \ schedule updates.  In\n   such cases, a single successful DoS attack could take\
    \ a node entirely\n   off the network until the node was physically visited and\
    \ reset.\n   Even for deep-space applications of LTP, we need to consider certain\n\
    \   terrestrial attacks, in particular those involving insertion of\n   messages\
    \ into an ongoing session (usually without having seen the\n   exact bytes of\
    \ the previous messages in the session).  Such attacks\n   are likely in the presence\
    \ of firewall failures at various nodes in\n   the network, or due to Trojan software\
    \ running on an authorized host.\n   Many message insertion attacks will depend\
    \ on the attacker correctly\n   \"guessing\" something about the state of the\
    \ LTP peers, but experience\n   shows that successful guesses are easier than\
    \ might be thought [DDJ].\n   We now consider the appropriate layer(s) at which\
    \ security mechanisms\n   can be deployed to increase the security properties\
    \ of LTP, and the\n   trade-offs entailed in doing so.\n   The Application layer\
    \ (above-LTP)\n      Higher-layer security mechanisms clearly protect LTP payload,\
    \ but\n      leave LTP headers open.  Such mechanisms provide little or no\n \
    \     protection against DoS type attacks against LTP, but may well\n      provide\
    \ sufficient data integrity and ought to be able to provide\n      data confidentiality.\n\
    \   The LTP layer\n      An authentication header (similar to IPsec [AH]) can\
    \ help protect\n      against replay attacks and other bogus packets.  However,\
    \ an\n      adversary may still see the LTP header of segments passing by in\n\
    \      the ether.  This approach also requires some key management\n      infrastructure\
    \ to be in place in order to provide strong\n      authentication, which may not\
    \ always be an acceptable overhead.\n      Such an authentication header could\
    \ mitigate many DoS attacks.\n      Similarly, a confidentiality service could\
    \ be defined for LTP\n      payload and (some) header fields.  However, this seems\
    \ less\n      attractive since (a) confidentiality is arguably better provided\n\
    \      either above or below the LTP layer, (b) key management for such a\n  \
    \    service is harder (in a high-delay context) than for an integrity\n     \
    \ service, and (c) forcing LTP engines to attempt decryption of\n      incoming\
    \ segments can in itself provide a DoS opportunity.\n      Further, within the\
    \ LTP layer we can make various design decisions\n      to reduce the probability\
    \ of successful DoS attacks.  In\n      particular, we can mandate that values\
    \ for certain fields in the\n      header (session numbers, for example) be chosen\
    \ randomly.\n   The Data-link layer (below-LTP)\n      The lower layers can clearly\
    \ provide confidentiality and integrity\n      services, although such security\
    \ may result in unnecessary\n      overhead if the cryptographic service provided\
    \ is not required for\n      all data.  For example, it can be harder to manage\
    \ lower layers so\n      that only the data that requires encryption is in fact\
    \ encrypted.\n      Encrypting all data could represent a significant overhead\
    \ for\n      some LTP use cases.  However, the lower layers are often the place\n\
    \      where compression and error-correction is done, and so may well\n     \
    \ also be the optimal place to do encryption since the same issues\n      with\
    \ applying or not applying the service apply to both encryption\n      and compression.\n\
    \   In light of these considerations, LTP includes the following security\n  \
    \ mechanisms:\n      The optional LTP Authentication mechanism is an LTP segment\n\
    \      extension comprising a ciphersuite identifier and optional key\n      identifier\
    \ that precede the segment's content, plus an\n      authentication value (either\
    \ a message authentication code or a\n      digital signature) that follows the\
    \ segment's content; the\n      ciphersuite ID is used to indicate the length\
    \ and format of the\n      authentication value.  The authentication mechanism\
    \ serves to\n      assure the segment's integrity and, depending on the ciphersuite\n\
    \      selected and the key management regime, its authenticity.\n      The optional\
    \ LTP cookie mechanism is an LTP segment extension\n      comprising a \"cookie\"\
    \ -- a randomly chosen numeric value -- that\n      precedes the segment's content.\
    \  By increasing the number of bytes\n      in a segment that cannot be easily\
    \ predicted by an inauthentic\n      data source, and by requiring that segments\
    \ lacking the correct\n      values of these bytes be silently discarded, the\
    \ cookie mechanism\n      increases the difficulty of mounting a successful denial-of-\n\
    \      service attack on an LTP engine.\n      The above mechanisms are defined\
    \ in detail in the LTP extensions\n      document [LTPEXT].\n      In addition,\
    \ the serial numbers of LTP checkpoints and reports are\n      required to be\
    \ randomly chosen integers, and implementers are\n      encouraged to choose session\
    \ numbers randomly as well.  This\n      randomness adds a further increment of\
    \ protection against DoS\n      attacks.  See [PRNG] for recommendations related\
    \ to randomness.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   Please see the IANA Considerations sections of [LTPSPEC]\
    \ and\n   [LTPEXT].\n"
- title: 6.  Acknowledgments
  contents:
  - "6.  Acknowledgments\n   Many thanks to Tim Ray, Vint Cerf, Bob Durst, Kevin Fall,\
    \ Adrian\n   Hooke, Keith Scott, Leigh Torgerson, Eric Travis, and Howie Weiss\
    \ for\n   their thoughts on this protocol and its role in Delay-Tolerant\n   Networking\
    \ architecture.\n   Part of the research described in this document was carried\
    \ out at\n   the Jet Propulsion Laboratory, California Institute of Technology,\n\
    \   under a contract with the National Aeronautics and Space\n   Administration.\
    \  This work was performed under DOD Contract DAA-B07-\n   00-CC201, DARPA AO\
    \ H912; JPL Task Plan No. 80-5045, DARPA AO H870;\n   and NASA Contract NAS7-1407.\n\
    \   Thanks are also due to Shawn Ostermann, Hans Kruse, and Dovel Myers\n   at\
    \ Ohio University for their suggestions and advice in making various\n   design\
    \ decisions.  This work was done when Manikantan Ramadas was a\n   graduate student\
    \ at the EECS Dept., Ohio University, in the\n   Internetworking Research Group\
    \ Laboratory.\n   Part of this work was carried out at Trinity College Dublin\
    \ as part\n   of the SeNDT contract funded by Enterprise Ireland's research\n\
    \   innovation fund.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Informative References
  contents:
  - "7.1.  Informative References\n   [LTPSPEC] Ramadas, M., Burleigh, S., and S.\
    \ Farrell, \"Licklider\n             Transmission Protocol - Specification\",\
    \ RFC 5326, September\n             2008.\n   [LTPEXT]  Farrell, S., Ramadas,\
    \ M., and S. Burleigh, \"Licklider\n             Transmission Protocol - Security\
    \ Extensions\", RFC 5327,\n             September 2008.\n   [AH]      Kent, S.,\
    \ \"IP Authentication Header\", RFC 4302, December\n             2005.\n   [BP]\
    \      Scott, K. and S. Burleigh, \"Bundle Protocol Specification\",\n       \
    \      RFC 5050, November 2007.\n   [CFDP]    CCSDS File Delivery Protocol (CFDP).\
    \ Recommendation for\n             Space Data System Standards, CCSDS 727.0-B-2\
    \ BLUE BOOK\n             Issue 1, October 2002.\n   [DDJ]     I. Goldberg and\
    \ E. Wagner, \"Randomness and the Netscape\n             Browser\", Dr. Dobb's\
    \ Journal, 1996, (pages 66-70).\n   [DSN]     Deep Space Mission Systems Telecommunications\
    \ Link Design\n             Handbook (810-005) web-page,\n             \"http://eis.jpl.nasa.gov/deepspace/dsndocs/810-005/\"\
    \n   [DTN]     K. Fall, \"A Delay-Tolerant Network Architecture for\n        \
    \     Challenged Internets\", In Proceedings of ACM SIGCOMM 2003,\n          \
    \   Karlsruhe, Germany, Aug 2003.\n   [IPN]     InterPlanetary Internet Special\
    \ Interest Group web page,\n             \"http://www.ipnsig.org\".\n   [TFRC]\
    \    Handley, M., Floyd, S., Padhye, J., and J. Widmer, \"TCP\n             Friendly\
    \ Rate Control (TFRC): Protocol Specification\", RFC\n             3448, January\
    \ 2003.\n   [HSTCP]   Floyd, S., \"HighSpeed TCP for Large Congestion Windows\"\
    ,\n             RFC 3649, December 2003.\n   [SCTP]    Stewart, R., Ed., \"Stream\
    \ Control Transmission Protocol\",\n             RFC 4960, September 2007.\n \
    \  [PRNG]    Eastlake, D., 3rd, Schiller, J., and S. Crocker,\n             \"\
    Randomness Requirements for Security\", BCP 106, RFC 4086,\n             June\
    \ 2005.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Scott C. Burleigh\n   Jet Propulsion Laboratory\n   4800\
    \ Oak Grove Drive\n   M/S: 301-485B\n   Pasadena, CA 91109-8099\n   Telephone:\
    \ +1 (818) 393-3353\n   Fax: +1 (818) 354-1075\n   EMail: Scott.Burleigh@jpl.nasa.gov\n\
    \   Manikantan Ramadas\n   ISRO Telemetry Tracking and Command Network (ISTRAC)\n\
    \   Indian Space Research Organization (ISRO)\n   Plot # 12 & 13, 3rd Main, 2nd\
    \ Phase\n   Peenya Industrial Area\n   Bangalore 560097\n   India\n   Telephone:\
    \ +91 80 2364 2602\n   EMail: mramadas@gmail.com\n   Stephen Farrell\n   Computer\
    \ Science Department\n   Trinity College Dublin\n   Ireland\n   Telephone: +353-1-896-1761\n\
    \   EMail: stephen.farrell@cs.tcd.ie\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78\
    \ and at http://www.rfc-editor.org/copyright.html,\n   and except as set forth\
    \ therein, the authors retain all their rights.\n   This document and the information\
    \ contained herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR,\
    \ THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET\
    \ SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING TASK FORCE DISCLAIM\
    \ ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY\
    \ THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\
    \ IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
