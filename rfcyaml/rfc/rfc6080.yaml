- contents:
  - ''
  title: __initial_text__
- contents:
  - 'A Framework for Session Initiation Protocol User Agent Profile Delivery

    '
  title: A Framework for Session Initiation Protocol User Agent Profile Delivery
- contents:
  - "Abstract\n   This document specifies a framework to enable configuration of\n
    \  Session Initiation Protocol (SIP) user agents (UAs) in SIP\n   deployments.
    \ The framework provides a means to deliver profile data\n   that user agents
    need to be functional, automatically and with\n   minimal or no User and Administrative
    intervention.  The framework\n   describes how SIP user agents can discover sources,
    request profiles,\n   and receive notifications related to profile modifications.
    \ As part\n   of this framework, a new SIP event package is defined for\n   notification
    of profile changes.  The framework provides minimal data\n   retrieval options
    to ensure interoperability.  The framework does not\n   include specification
    of the profile data within its scope.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6080.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  4\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .
    . . . .  4\n   3.  Overview . . . . . . . . . . . . . . . . . . . . . . . . .
    . .  5\n     3.1.  Reference Model  . . . . . . . . . . . . . . . . . . . . .
    \ 6\n     3.2.  Motivation . . . . . . . . . . . . . . . . . . . . . . . .  7\n
    \    3.3.  Profile Types  . . . . . . . . . . . . . . . . . . . . . .  9\n     3.4.
    \ Profile Delivery Stages  . . . . . . . . . . . . . . . . .  9\n     3.5.  Supported
    Device Types . . . . . . . . . . . . . . . . . . 10\n   4.  Use Cases  . . . .
    . . . . . . . . . . . . . . . . . . . . . . 10\n     4.1.  Simple Deployment Scenario
    . . . . . . . . . . . . . . . . 10\n     4.2.  Devices Supporting Multiple Users
    from Different\n           Service Providers  . . . . . . . . . . . . . . . .
    . . . . 12\n   5.  Profile Delivery Framework . . . . . . . . . . . . . . . .
    . . 14\n     5.1.  Profile Delivery Stages  . . . . . . . . . . . . . . . . .
    14\n     5.2.  Securing Profile Delivery  . . . . . . . . . . . . . . . . 22\n
    \    5.3.  Additional Considerations  . . . . . . . . . . . . . . . . 24\n     5.4.
    \ Support for NATs . . . . . . . . . . . . . . . . . . . . . 33\n   6.  Event
    Package Definition . . . . . . . . . . . . . . . . . . . 33\n     6.1.  Event
    Package Name . . . . . . . . . . . . . . . . . . . . 33\n     6.2.  Event Package
    Parameters . . . . . . . . . . . . . . . . . 33\n     6.3.  SUBSCRIBE Bodies .
    . . . . . . . . . . . . . . . . . . . . 36\n     6.4.  Subscription Duration  .
    . . . . . . . . . . . . . . . . . 37\n     6.5.  NOTIFY Bodies  . . . . . . .
    . . . . . . . . . . . . . . . 37\n     6.6.  Notifier Processing of SUBSCRIBE
    Requests  . . . . . . . . 37\n     6.7.  Notifier Generation of NOTIFY Requests
    . . . . . . . . . . 38\n     6.8.  Subscriber Processing of NOTIFY Requests .
    . . . . . . . . 38\n     6.9.  Handling of Forked Requests  . . . . . . . . .
    . . . . . . 39\n     6.10. Rate of Notifications  . . . . . . . . . . . . . .
    . . . . 39\n     6.11. State Agents . . . . . . . . . . . . . . . . . . . . .
    . . 39\n   7.  Examples . . . . . . . . . . . . . . . . . . . . . . . . . . .
    39\n     7.1.  Example 1: Device Requesting Profile . . . . . . . . . . . 39\n
    \    7.2.  Example 2: Device Obtaining Change Notification  . . . . . 42\n   8.
    \ IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 46\n     8.1.
    \ SIP Event Package  . . . . . . . . . . . . . . . . . . . . 46\n     8.2.  Registry
    of SIP Configuration Profile Types  . . . . . . . 46\n   9.  Security Considerations
    \ . . . . . . . . . . . . . . . . . . . 47\n     9.1.  Local-Network Profile  .
    . . . . . . . . . . . . . . . . . 48\n     9.2.  Device Profile . . . . . . .
    . . . . . . . . . . . . . . . 49\n     9.3.  User Profile . . . . . . . . . .
    . . . . . . . . . . . . . 50\n   10. Acknowledgements . . . . . . . . . . . .
    . . . . . . . . . . . 51\n   11. References . . . . . . . . . . . . . . . . .
    . . . . . . . . . 52\n     11.1. Normative References . . . . . . . . . . . .
    . . . . . . . 52\n     11.2. Informative References . . . . . . . . . . . . .
    . . . . . 53\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   SIP user agents require configuration data to function properly.\n
    \  Examples include information specific to local networks, devices, and\n   users.
    \ A configuration data set specific to an entity is termed a\n   profile.  For
    example, device profile contains the configuration data\n   related to a device.
    \ The process of providing devices with one or\n   more profiles is termed \"profile
    delivery\".  Ideally, this profile\n   delivery process should be automatic and
    require minimal or no user\n   intervention.\n   Many deployments of SIP user
    agents require dynamic configuration and\n   cannot rely on pre-configuration.
    \ This framework provides a standard\n   means of providing dynamic configuration
    that simplifies deployments\n   containing SIP user agents from multiple vendors.
    \ This framework\n   also addresses change notifications when profiles change.
    \ However,\n   the framework does not define the content or format of the profile,\n
    \  leaving that to future standardization activities.\n   This document is organized
    as follows.  The normative requirements\n   are contained in Section 5 (framework
    operations) and Section 6 (the\n   event package definition).  The rest of the
    document provides\n   introductory and supporting explanations.  Section 3 provides
    a high-\n   level overview of the abstract components, profiles, and the profile\n
    \  delivery stages.  Section 4 provides some motivating use cases.\n   Section
    7 follows with illustrative examples of the framework in use.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n
    \  This document also reuses the SIP terminology defined in [RFC3261]\n   and
    [RFC3265], and it specifies the usage of the following terms.\n   Device:  software
    or hardware entity containing one or more SIP user\n      agents.  It may also
    contain applications such as a DHCP client.\n   Device Provider:  the entity responsible
    for managing a given device.\n   Local Network Provider:  the entity that controls
    the local network\n      to which a given device is connected.\n   SIP Service
    Provider:  the entity providing SIP services to users.\n      This can refer to
    private or public enterprises.\n   Profile:  configuration data set specific to
    an entity (e.g., user,\n      device, local network, or other).\n   Profile Type:
    \ a particular category of profile data (e.g., user,\n      device, local network,
    or other).\n   Profile Delivery Server (PDS):  the source of a profile, it is
    the\n      logical collection of the Profile Notification Component (PNC) and\n
    \     the Profile Content Component (PCC).\n   Profile Notification Component
    (PNC):  the logical component of a\n      Profile Delivery Server that is responsible
    for enrolling devices\n      and providing profile notifications.\n   Profile
    Content Component (PCC):  the logical component of a Profile\n      Delivery Server
    that is responsible for storing, providing access\n      to, and accepting profile
    content.\n   Profile Delivery Stages:  the processes that lead a device to obtain\n
    \     profile data, and any subsequent changes, are collectively called\n      profile
    delivery stages.\n   Bootstrapping:  Bootstrapping is the process by which a new
    (or\n      factory reset) device, with no configuration or minimal \"factory\"\n
    \     pre-configuration, enrolls with the PDS.  The device may use a\n      temporary
    identity and credentials to authenticate itself to\n      enroll and receive profiles,
    which may provide more permanent\n      identities and credentials for future
    enrollments.\n"
  title: 2.  Terminology
- contents:
  - "3.  Overview\n   This section provides an overview of the configuration framework.
    \ It\n   presents the reference model, the motivation, the profile delivery\n
    \  stages, and a mapping of the concepts to specific use cases.  It is\n   meant
    to serve as a reference section for the document, rather than\n   providing a
    specific logical flow of material, and it may be\n   necessary to revisit these
    sections for a complete appreciation of\n   the framework.\n   The SIP UA Profile
    Delivery Framework uses a combination of SIP event\n   messages (SUBSCRIBE and
    NOTIFY; [RFC3265]) and traditional file\n   retrieval protocols, such as HTTP
    [RFC2616], to discover, monitor,\n   and retrieve configuration profiles.  The
    framework defines three\n   types of profiles (local-network, device, and user)
    in order to\n   separate aspects of the configuration that may be independently\n
    \  managed by different administrative domains.  The initial SUBSCRIBE\n   message
    for each profile allows the UA to describe itself (both its\n   implementation
    and the identity requesting the profile), while\n   requesting access to a profile
    by type, without prior knowledge of\n   the profile name or location.  Discovery
    mechanisms are specified to\n   help the UA form the Subscription URI (the Request-URI
    for the SIP\n   SUBSCRIBE).  The SIP User Agent Server (UAS) handling these\n
    \  subscriptions is the Profile Delivery Server (PDS).  When the PDS\n   accepts
    a subscription, it sends a NOTIFY to the device.  The initial\n   NOTIFY from
    the PDS for each profile may contain profile data or a\n   reference to the location
    of the profile, to be retrieved using HTTP\n   or similar file retrieval protocols.
    \ By maintaining a subscription\n   to each profile, the UA will receive additional
    NOTIFY messages if\n   the profile is later changed.  These may contain a new
    profile, a\n   reference to a new profile, or a description of profile changes,\n
    \  depending on the Content-Type [RFC3261] in use by the subscription.\n   The
    framework describes the mechanisms for obtaining three different\n   profile types,
    but does not describe the data model they utilize (the\n   data model is out of
    scope for this specification).\n"
  - contents:
    - "3.1.  Reference Model\n   The design of the framework was the result of a careful
      analysis to\n   identify the configuration needs of a wide range of SIP deployments.\n
      \  As such, the reference model provides for a great deal of\n   flexibility,
      while breaking down the interactions to their basic\n   forms, which can be
      reused in many different scenarios.\n   The reference model for the framework
      defines the interactions\n   between the Profile Delivery Server (PDS) and the
      device.  The device\n   needs the profile data to function effectively in the
      network.  The\n   PDS is responsible for responding to device requests and providing\n
      \  the profile data.  The reference model is illustrated in Figure 1.\n                                          +-------------------------+\n
      \   +--------+                            | Profile Delivery Server |\n    |
      Device |<==========================>|  +---+          +---+   |\n    +--------+
      \                           |  |PNC|          |PCC|   |\n                                          |
      \ +---+          +---+   |\n                                          +-------------------------+\n
      \                               PNC = Profile Notification Component\n                                PCC
      = Profile Content Component\n                    Figure 1: Framework Reference
      Model\n   The PDS is subdivided into two logical components:\n   o  Profile
      Notification Component (PNC), responsible for enrolling\n      devices for profiles
      and providing profile change notifications.\n   o  Profile Content Component
      (PCC), responsible for storing,\n      providing access to, and accepting modifications
      related to\n      profile content.\n"
    title: 3.1.  Reference Model
  - contents:
    - "3.2.  Motivation\n   The motivation for the framework can be demonstrated by
      applying the\n   reference model presented in Section 3.1 to two scenarios that
      are\n   representative of the two ends of a spectrum of potential SIP\n   deployments.\n
      \  In the simplest deployment scenario, a device connects through a\n   network
      that is controlled by a single provider who provides the\n   local network,
      manages the devices, and offers services to the users.\n   The provider propagates
      profile data to the device that contains all\n   the necessary information to
      obtain services in the network\n   (including information related to the local
      network and the users).\n   This is illustrated in Figure 2.  An example is
      a simple enterprise\n   network that supports SIP-based devices.\n                               --------------\n
      \                            / Local Network, \\\n                            |
      Device & Service |\n                             \\    Provider    /\n                              ----------------\n
      \                                    |\n                                     |\n
      \                                 --------\n                                 |
      Device |\n                                  --------\n                                     |\n
      \                                    |\n                                   ----\n
      \                                 |User|\n                                   ----\n
      \                    Figure 2: Simple Deployment Model\n   In more complex deployments,
      devices connect via a local network that\n   is not controlled by the SIP service
      provider, such as devices that\n   connect via available public WiFi hot spots.
      \ In such cases, local\n   network providers may wish to provide local network
      information such\n   as bandwidth constraints to the devices.\n   Devices may
      also be controlled by device providers that are\n   independent of the SIP service
      provider who provides user services,\n   such as kiosks that allow users to
      access services from remote\n   locations.  In such cases, the profile data
      may have to be obtained\n   from different profile sources: local network provider,
      device\n   provider, and SIP service provider.  This is indicated in Figure
      3.\n      --------\n    /   SIP    \\\n   |   Service  |                -> Provides
      'user' profile\n   |  Provider  |                   data (e.g., services\n    \\
      \         /                    configuration)\n      --------      --------\n
      \         |       /          \\\n          |      |   Device   |  -> Provides
      'device' profile\n          |      |  Provider  |     data (e.g., device specifics)\n
      \         |       \\          /\n          |         ---------\n          |
      \       /\n          |       /    -------\n          |      /   /  Local  \\\n
      \         |     /   |  Network  |\n          |    |    |  Provider | -> Provides
      'local-network' profile\n          |    |     \\         /     data (e.g., bandwidth)\n
      \         |    |       -------\n          |    |        /\n          |    |
      \      /\n          |    |      |\n     ===================\n    (   Local Network
      \  )\n     ===================\n             |\n             |\n          --------\n
      \        | Device |              -> Needs the 'local-network'\n          --------
      \                 and 'device' profile\n          /     \\\n         /       \\\n
      \      ------   ------\n      |User A| |User B|          -> Users need 'user'
      profiles\n       ------   ------\n                    Figure 3: Complex Deployment
      Model\n   In either case, Providers need to deliver to the device, profile data\n
      \  that is required to participate in their network.  Examples of\n   profile
      data include the list of codecs that can be used and the SIP\n   proxies to
      which to connect for services.  Pre-configuration of such\n   information is
      one option if the device is always served by the same\n   set of Providers.
      \ In all other cases, the profile delivery needs to\n   be automated and consistent
      across Providers.  Given the presence of\n   a number of large deployments where
      pre-configuration is neither\n   desired nor optimal, there is a need for a
      common configuration\n   framework such as the one described in this document.\n
      \  Further, the former deployment model can be accomplished by the\n   device
      obtaining profile data from a single provider.  However, the\n   latter deployment
      model requires the device to obtain profile data\n   from different providers.
      \ To address either deployment or any\n   variation in between, one needs to
      allow for profile delivery via one\n   or more Providers.  The framework accomplishes
      this by specifying\n   multiple profile types and a set of profile delivery
      stages to obtain\n   them.  These are introduced in the subsections to follow.\n"
    title: 3.2.  Motivation
  - contents:
    - "3.3.  Profile Types\n   The framework handles the presence of potentially different
      Providers\n   by allowing for multiple profile types.  Clients request each
      profile\n   separately, and obtain them from the same, or different, Providers.\n
      \  A deployment can also choose to pre-configure the device to request\n   only
      a subset of the specified profile types.  The framework\n   specifies three
      basic profile types, as follows:\n   Local Network Profile:  contains configuration
      data related to the\n      local network to which a device is directly connected,
      provided by\n      the local network provider.\n   Device Profile:  contains
      configuration data related to a specific\n      device, provided by the device
      provider.\n   User Profile:  contains configuration data related to a specific\n
      \     User, as required to reflect that user's preferences and the\n      particular
      services to which it is subscribed.  It is provided by\n      the SIP service
      provider.\n   Additional profile types may also be specified by future work
      within\n      the IETF.  The data models associated with each profile type are\n
      \     out of scope for this document.\n"
    title: 3.3.  Profile Types
  - contents:
    - "3.4.  Profile Delivery Stages\n   The framework specified in this document
      requires a device to\n   explicitly request profiles.  It also requires one
      or more PDSs,\n   which provide the profile data.  The processes that lead a
      device to\n   obtain profile data, and any subsequent changes, can be explained
      in\n   three stages, termed the profile delivery stages.\n   Profile Enrollment:
      \ the process by which a device requests, and if\n      successful, enrolls
      with a PDS capable of providing a profile.  A\n      successful enrollment is
      indicated by a notification containing\n      the profile information (contents
      or content indirection\n      information).  Depending on the request, this
      could also result in\n      a subscription to notification of profile changes.\n
      \  Profile Content Retrieval:  the process by which a device retrieves\n      profile
      contents, if the profile enrollment resulted in content\n      indirection information.\n
      \  Profile Change Notification:  the process by which a device is\n      notified
      of any changes to an enrolled profile.  This may provide\n      the device with
      modified profile data or content indirection\n      information.\n"
    title: 3.4.  Profile Delivery Stages
  - contents:
    - "3.5.  Supported Device Types\n   The examples in this framework tend to associate
      devices with\n   entities that are accessible to end-users.  However, this is
      not\n   necessarily the only type of device that can utilize the specified\n
      \  framework.  Devices can be entities such as SIP Phones or soft\n   clients,
      with or without user interfaces (that allow for device\n   configuration), entities
      in the network that do not directly\n   communicate with any users (e.g., gateways,
      media servers, etc.) or\n   network infrastructure elements (e.g., SIP servers).
      \ The framework\n   is extensible for use with such device types.  However,
      it is to be\n   noted that some of these other device types (e.g., network elements)\n
      \  may also be configurable using other mechanisms.  The use of this\n   framework
      in conjunction with other mechanisms (specified outside of\n   this document),
      is out of scope.\n"
    title: 3.5.  Supported Device Types
  title: 3.  Overview
- contents:
  - "4.  Use Cases\n   This section provides a small, non-comprehensive set of\n   representative
    use cases to further illustrate how this framework can\n   be utilized in SIP
    deployments.  The first use case is simplistic in\n   nature, whereas the second
    is relatively complex.  The use cases\n   illustrate the effectiveness of the
    framework in either scenario.\n   For security considerations, please refer to
    Sections 5 and 9.\n"
  - contents:
    - "4.1.  Simple Deployment Scenario\n   Description: Consider a deployment scenario
      (e.g., a small private\n   enterprise) where a participating device implements
      this framework\n   and is configured, using previously obtained profile data,
      to request\n   only the device profile.  Assume that the device operates in
      the same\n   network as the PDS (i.e., there is no NAT) and it obtains its IP\n
      \  configuration using DHCP.  Typical communication between the device\n   and
      the PDS will traverse one or more SIP proxies, but is not\n   required, and
      is omitted in this illustration.\n   Figure 4 illustrates the sequence of events
      that includes device\n   start-up and a successful profile enrollment for the
      device profile\n   that results in device profile data.  It then illustrates
      how a\n   change in the profile data is delivered via Profile Change\n   Notification.\n
      \                                        +----------------------+\n    +--------+
      \                          |  Provider's Network  |\n    | Device |                           |
      \                     |\n    |        |                           |                      |\n
      \   +--------+                           |  DHCP        PDS     |\n                                         +----------------------+\n
      \        |                                   |          |\n    (A)  |<==============
      DHCP =============>|          |\n         |                                              |\n
      \        |                                              |\n         |                                              |\n
      \   (B)  |<=========== Profile Enrollment  ============>|\n         |                                              |
      Profile data\n         |                                              | is modified\n
      \        |                                              |\n    (C)  |<============
      Profile Change  ================|\n         |               Notification                   |\n
      \        |                                              |\n         |                                              |\n
      \                          Figure 4: Use Case 1\n   The following is an explanation
      of the interactions in Figure 4.\n   (A)  Upon initialization, the device obtains
      IP configuration\n        parameters such as an IP address using DHCP.\n   (B)
      \ The device requests profile enrollment for the device profile.\n        Successful
      enrollment provides it with a notification containing\n        the device profile
      data.\n   (C)  Due to a modification of the device profile, a profile change\n
      \       notification is sent across to the device, along with the\n        modified
      profile.\n"
    title: 4.1.  Simple Deployment Scenario
  - contents:
    - "4.2.  Devices Supporting Multiple Users from Different Service Providers\n
      \  Description: Consider a single device that allows multiple users to\n   obtain
      services from different SIP service providers, e.g., a kiosk\n   at an airport.\n
      \  The following assumptions apply:\n   o  Provider A is the device and local
      network provider for the\n      device, and the SIP service provider for user
      A; Provider B is the\n      SIP service provider for user B.\n   o  Profile
      enrollment always results in content indirection\n      information requiring
      profile content retrieval.\n   o  Communication between the device and the PDSs
      is facilitated via\n      one or more SIP proxies (only one is shown in the
      illustration).\n   Figure 5 illustrates the use case and highlights the communications\n
      \  relevant to the framework specified in this document.\n     User User\n       A
      \  B        +----------------------+  +----------------------+\n    +--------+
      \     |       Provider       |  |       Provider       |\n    | Device |      |
      \          A          |  |          B           |\n    |        |      |                      |
      \ |                      |\n    +--------+      | DHCP    PROXY   PDS  |  |
      \ PROXY        PDS    |\n                    +----------------------+  +----------------------+\n
      \        |              |        |      |          |           |\n     (A) |<====DHCP====>|
      \       |      |          |           |\n         |                       |
      \     |          |           |\n         |                       |      |          |
      \          |\n         |  Profile Enrollment   |      |          |           |\n
      \    (B) |<local-network profile>|<====>|          |           |\n         |\n
      \        |   <<Profile content retrieval>>\n         |\n         |\n         |
      \ Profile Enrollment   |      |          |           |\n     (C) |<== device
      profile ==> |<====>|          |           |\n         |\n         |   <<Profile
      content retrieval>>\n         |\n                      .\n                      .\n
      \                     .\n         |   Profile Enrollment  |      |          |
      \          |\n     (D) |<= user profile (A) => |<====>|          |           |\n
      \        |                       |      |          |           |\n         |\n
      \        |   <<Profile content retrieval>>\n                              .\n
      \            [[User A obtains services]]\n                      .\n                      .\n
      \                     .\n         |\n         |            Profile Enrollment
      \          |           |\n     (E) |<=========== user profile (B) ==========>|<=========>|\n
      \        |                                         |           |\n         |
      \  <<Profile content retrieval>>\n         |\n             [[User B obtains
      services]]\n                           Figure 5: Use Case 2\n   The following
      is an explanation of the interactions in Figure 5.\n   (A)  Upon initialization,
      the device obtains IP configuration\n        parameters using DHCP.  This also
      provides the local domain\n        information to help with local-network profile
      enrollment.\n   (B)  The device requests profile enrollment for the local network\n
      \       profile.  It receives an enrollment notification containing\n        content
      indirection information from Provider A's PDS.  The\n        device retrieves
      the profile (this contains useful information\n        such as firewall port
      restrictions and available bandwidth).\n   (C)  The device then requests profile
      enrollment for the device\n        profile.  It receives an enrollment notification
      resulting in\n        device profile content retrieval.  The device initializes
      the\n        user interface for services.\n   (D)  User A with a pre-existing
      service relationship with Provider A\n        attempts communication via the
      user interface.  The device uses\n        the user supplied information (including
      any credential\n        information) and requests profile enrollment for user
      A's\n        profile.  Successful enrollment and profile content retrieval\n
      \       results in services for user A.\n   (E)  At a different point in time,
      user B with a service relationship\n        with Provider B attempts communication
      via the user interface.\n        It enrolls and retrieves user B's profile and
      this results in\n        services for user B.\n   The discovery mechanisms for
      profile enrollment described by the\n   framework, or the profile data themselves,
      can result in outbound\n   proxies that support devices behind NATs, using procedures
      specified\n   in [RFC5626].\n"
    title: 4.2.  Devices Supporting Multiple Users from Different Service Providers
  title: 4.  Use Cases
- contents:
  - "5.  Profile Delivery Framework\n   This section specifies the profile delivery
    framework.  It provides\n   the requirements for the three profile delivery stages
    introduced in\n   Section 3.4 and presents the associated security requirements.
    \ It\n   also presents considerations such as back-off and retry mechanisms.\n"
  - contents:
    - "5.1.  Profile Delivery Stages\n   The three profile delivery stages -- enrollment,
      content retrieval,\n   and change notification -- apply separately to each profile
      type\n   specified for use with this framework.  The following subsections\n
      \  provide the requirements associated with each stage.\n"
    - contents:
      - "5.1.1.  Profile Enrollment\n   Profile enrollment is the process by means
        of which a device\n   requests, and receives, profile data.  Each profile
        type specified in\n   this document requires an independent enrollment request.
        \ However, a\n   particular PDS can support enrollment for one or more profile
        types.\n   PDSs and devices MUST implement all of the three profile types.
        \ A\n   device that has not been configured otherwise SHOULD try to obtain\n
        \  all the three profile types, in the order specified by this\n   framework.
        \ The exceptions are bootstrapping when it SHOULD request\n   the device profile
        type (see Section 5.3.1) or when it has been\n   explicitly configured with
        a different order via mechanisms such as\n   previously retrieved profile
        data or pre-configuration or manual\n   configuration.\n   Profile enrollment
        consists of the following operations, in the\n   specified order.\n   Enrollment
        request transmission\n      Profile enrollment is initiated when the device
        transmits a SIP\n      SUBSCRIBE request [RFC3265] for the 'ua-profile' event
        package,\n      specified in Section 6.  The profile being requested is indicated\n
        \     using the 'profile-type' parameter.  The device MUST transmit the\n
        \     SIP SUBSCRIBE message via configured outbound proxies for the\n      destination
        domain, or in accordance with RFC 3263 [RFC3263].\n      The device needs
        certain data to create an enrollment request,\n      form a Request-URI, and
        authenticate to the network.  This\n      includes the profile provider's
        domain name and device or user\n      identities and credentials.  Such data
        can be \"configured\" during\n      device manufacturing, by the user, or
        via profile data enrollment\n      (see Section 5.3.1).  The data can also
        be \"discovered\" using the\n      procedures specified by this framework.
        \ The \"discovered\" data can\n      be retained across device resets (but
        not across factory resets)\n      and such data is referred to as \"cached\".
        \ Thus, data can be\n      configured, discovered, or cached.  The following
        requirements\n      apply.\n      *  If the device is configured with a specific
        domain name (for\n         the local network provider or device provider),
        it MUST NOT\n         attempt \"discovery\" of the domain name.  This is the
        case when\n         the device is pre-configured (e.g., via a user interface)
        to be\n         managed by specific entities.\n      *  The device MUST only
        use data associated with the provider's\n         domain in an enrollment
        request.  As an example, when the\n         device is requesting a local-network
        profile in the domain\n         'example.net', it cannot present a user Address
        of Record (AoR)\n         associated with the local domain 'example.com'.\n
        \     *  The device SHOULD adhere to the following order of data usage:\n
        \        configured, cached, and discovered.  An exception is when the\n         device
        is explicitly configured to use a different order.\n      Upon failure to
        obtain the profile using any methods specified in\n      this framework, the
        device MAY provide a user interface to allow\n      for user intervention.
        \ This can result in temporary, one-time\n      data to bootstrap the device.
        \ Such temporary data is not\n      considered to be \"configured\" and SHOULD
        NOT be cached across\n      resets.  The configuration obtained using such
        data MAY provide\n      the configuration data required for the device to
        continue\n      functioning normally.\n      Devices attempting enrollment
        MUST comply with the SIP-specific\n      event notification specified in [RFC3265],
        the event package\n      requirements specified in Section 6.2, and the security\n
        \     requirements specified in Section 5.2.\n   Enrollment request admittance\n
        \     A PDS or a SIP proxy will receive a transmitted enrollment\n      request.
        \ If a SIP infrastructure element receives the request, it\n      will relay
        it to the authoritative proxy for the domain indicated\n      in the Request-URI
        (the same way it would handle any other\n      SUBSCRIBE message).  The authoritative
        proxy is required to\n      examine the request (e.g., event package) and
        transmit it to a PDS\n      capable of addressing the profile enrollment request.\n
        \     A PDS receiving the enrollment request SHOULD respond to the\n      request,
        or proxy it to a PDS that can respond.  An exception to\n      responding
        or proxying the request is when a policy prevents\n      response (e.g., recognition
        of a denial-of-service (DoS) attack,\n      an invalid device, etc.).  The
        PDS then verifies the identity\n      presented in the request and performs
        any necessary\n      authentication.  Once authentication is successful, the
        PDS MUST\n      either admit or reject the enrollment request, based on applicable\n
        \     authorization policies.  A PDS admitting the enrollment request\n      indicates
        it via a 2xx-class response, as specified in [RFC3265].\n      Refer to Sections
        6.6 and 5.2 for more information on subscription\n      request handling and
        security requirements, respectively.\n   Enrollment request acceptance\n      A
        PDS that admits the enrollment request verifies applicable\n      policies,
        identifies the requested profile data and prepares a SIP\n      NOTIFY message
        to the device.  Such a notification can either\n      contain the profile
        data or contain content indirection\n      information that results in the
        device performing profile content\n      retrieval.  The PDS then transmits
        the prepared SIP notification.\n      When the device successfully receives
        and accepts the SIP\n      notification, profile enrollment is complete.\n
        \     When it receives the SIP NOTIFY message, indicating successful\n      profile
        enrollment, the device SHOULD make the new profile\n      effective within
        the specified time frame, as described in\n      Section 6.2.  The exception
        is when the profile data is delivered\n      via content indirection, and
        the device cannot obtain the profile\n      data within the specified time
        frame.\n      Once profile enrollment is successful, the PDS MUST consider
        the\n      device enrolled for the specific profile, for the duration of the\n
        \     subscription.\n"
      title: 5.1.1.  Profile Enrollment
    - contents:
      - "5.1.2.  Content Retrieval\n   A successful profile enrollment leads to an
        initial SIP notification,\n   and may result in subsequent change notifications.
        \ Each of these\n   notifications can either contain profile data or content
        indirection\n   information.  If it contains content indirection information,
        the\n   device is required to retrieve the profile data using the specified\n
        \  content retrieval protocols.  This process is termed \"profile content\n
        \  retrieval\".  For information regarding the use of the SIP NOTIFY\n   message
        body, please refer to Section 6.5.\n   Devices and PDSs implementing this
        framework MUST implement two\n   content retrieval protocols: HTTP and HTTPS,
        as specified in\n   [RFC2616] and [RFC2818], respectively.  Future enhancements
        or usage\n   of this framework may specify additional or alternative content\n
        \  retrieval protocols.  For security requirements and considerations,\n   please
        refer to Section 5.2.\n"
      title: 5.1.2.  Content Retrieval
    - contents:
      - "5.1.3.  Change Notification\n   Profile data can change over time.  Changes
        can be initiated by\n   various entities (e.g., via the device, back-office
        components, and\n   end-user web interfaces) and for various reasons (e.g.,
        change in\n   user preferences and modifications to services).  Profiles may
        also\n   be shared by multiple devices simultaneously.  When a profile is\n
        \  changed, the PDS MUST inform all the devices currently enrolled for\n   the
        specific profile.  This process of informing a device of any\n   changes to
        the profile that it is currently enrolled for is termed\n   change notification.\n
        \  The PDS provides change notification using a SIP notification (the\n   SIP
        NOTIFY message, as specified in [RFC3265]).  The SIP notification\n   may
        provide the changes, a revised profile, or content indirection,\n   which
        contains a pointer to the revised data.  When a device\n   successfully receives
        a profile change notification for an enrolled\n   profile, it MUST act upon
        the changes prior to the expiration of the\n   'effective-by' parameter.\n
        \  For NOTIFY content, please refer to Section 6.5.\n"
      title: 5.1.3.  Change Notification
    - contents:
      - "5.1.4.  Enrollment Data and Caching\n   The requirements for the contents
        of the SIP SUBSCRIBE used to\n   request profile enrollment are described
        in this section.  The data\n   required can be configured, cached, or discovered
        -- depending on the\n   profile type.  If the data is not configured, the
        device MUST use\n   relevant cached data or proceed with data discovery.  This
        section\n   describes the requirements for creating a SIP SUBSCRIBE for\n
        \  enrollment, the caching requirements and how data can be discovered.\n"
      - contents:
        - "5.1.4.1.  Local-Network Profile\n   To create a Subscription URI to request
          the local-network profile, a\n   device needs the local network domain name,
          the device identifier,\n   and optionally a user AoR with associated credentials
          (if one is\n   configured).  Since the device can be potentially initialized
          in a\n   different local network each time, it SHOULD NOT cache the local\n
          \  network domain, the SIP Subscription URI or the local-network profile\n
          \  data across resets.  An exception to this is when the device can\n   confirm
          that it is reinitialized in the same network (using means\n   outside the
          scope of this document).  Thus, in most cases, the device\n   needs to discover
          the local network domain name.  The device\n   discovers this by establishing
          IP connectivity in the local network\n   (such as via DHCP or pre-configured
          IP information).  Once\n   established, the device MUST attempt to use the
          local network domain\n   obtained via pre-configuration, if available.  If
          it is not pre-\n   configured, it MUST employ dynamic discovery using DHCPv4
          ([RFC2132],\n   Domain Name option) or DHCPv6 ([RFC4704]).  Once the local
          network\n   domain is obtained, the device creates the SIP SUBSCRIBE for\n
          \  enrollment as described below.\n   o  The device MUST NOT populate the
          user part of the Request-URI.\n      The device MUST set the host portion
          of the Request-URI to the\n      dot-separated concatenation of \"_sipuaconfig\"
          and the local\n      network domain (see example below).\n   o  If the device
          has been configured with a user AoR for the local\n      network domain
          (verified as explained in Section 5.2) the device\n      MUST use it to
          populate the From field, unless configured not to\n      (due to privacy
          concerns, for example).  Otherwise, the device\n      MUST set the From
          field to a value of\n      \"anonymous@anonymous.invalid\".\n   o  The device
          MUST include the +sip.instance parameter within the\n      Contact header,
          as specified in [RFC5626].  The device MUST ensure\n      that the value
          of this parameter is the same as that included in\n      any subsequent
          profile enrollment request.\n   For example, if the device requested and
          received the local domain\n   name via DHCP to be: airport.example.net,
          then the local-network\n   profile SUBSCRIBE Request-URI would look like:\n
          \  sip:_sipuaconfig.airport.example.net\n   The local-network profile SUBSCRIBE
          Request-URI does not have a user\n   part so that the URI is distinct between
          the \"local\" and \"device\"\n   URIs when the domain is the same for the
          two.  This provides a means\n   of routing to the appropriate PDS in domains
          where there are distinct\n   servers.\n   The From field is populated with
          the user AoR, if available.  This\n   allows the local network provider
          to propagate user-specific profile\n   data, if available.  The \"+sip.instance\"
          parameter within the Contact\n   header is set to the device identifier
          or specifically, the SIP UA\n   instance.  Even though every device may
          get the same (or similar)\n   local-network profile, the uniqueness of the
          \"+sip.instance\"\n   parameter provides an important capability.  Having
          unique instance\n   ID fields allows the management of the local network
          to track devices\n   present in the network and consequently also manage
          resources such as\n   bandwidth allocation.\n"
        title: 5.1.4.1.  Local-Network Profile
      - contents:
        - "5.1.4.2.  Device Profile Type\n   Once associated with a device, the device
          provider is not expected to\n   change frequently.  Thus, the device is
          allowed to, and SHOULD, cache\n   the Subscription URI for the device profile
          upon successful\n   enrollment.  Exceptions include cases where the device
          identifier has\n   changed (e.g., new network card), device provider information
          has\n   changed (e.g., user initiated change), or the device cannot obtain\n
          \  its profile using the Subscription URI.  Thus, when available, the\n
          \  device MUST use a cached Subscription URI.  If no cached URI is\n   available
          then it needs to create a Subscription URI.  To create a\n   Subscription
          URI, the device needs a device identity and the device\n   provider's domain
          name.  Unless already configured, the device needs\n   to discover the necessary
          information and form the Subscription URI.\n   In such cases, the following
          requirements apply for creating a\n   Subscription URI for requesting the
          device profile:\n   o  The device MUST populate the user part of the Request-URI
          with the\n      device identifier.  The device MUST set the host portion
          of the\n      Request-URI to the domain name of the device provider.  The
          device\n      identifier format is explained in detail later in this section.\n
          \  o  The device MUST set the From field to a value of anonymous@<device\n
          \     provider's domain>.\n   o  The device MUST include the \"+sip.instance\"
          parameter within the\n      Contact header, as specified in [RFC5626].  The
          device MUST use\n      the same value as the one presented while requesting
          the local-\n      network profile.\n   Note that the discovered AoR for
          the Request-URI can be overridden by\n   a special, provisioned, AoR that
          is unique to the device.  In such\n   cases, the provisioned AoR is used
          to form the Request-URI and to\n   populate the From field.\n   If the device
          is not configured with an AoR, and needs a domain name\n   to populate the
          Request-URI and the From field, it can either use a\n   configured domain
          name, if available, or discover it.  The options to\n   discover are described
          below.  The device MUST use the results of\n   each successful discovery
          process for one enrollment attempt, in the\n   order specified below.\n
          \  o  Option 1: Devices that support DHCP MUST attempt to obtain the\n      domain
          name of the outbound proxy during the DHCP process, using\n      the DHCP
          option for SIP servers defined in [RFC3361] or [RFC3319]\n      (for IPv4
          and IPv6, respectively).\n   o  Option 2: Devices that support DHCP MUST
          attempt to obtain the\n      local IP network domain during the DHCP process
          (refer to\n      [RFC2132] and [RFC4704]).\n   o  Option 3: Devices MUST
          use the local network domain name\n      (configured or discovered to retrieve
          the local-network profile),\n      prefixing it with the label \"_sipuaconfig\".\n
          \  If the device needs to create a Subscription URI and needs to use its\n
          \  device identifier, it MUST use the UUID-based (Universally Unique\n   Identifier)
          URN representation as specified in [RFC4122].  The\n   following requirements
          apply:\n   o  When the device has a non-alterable Media Access Control (MAC)\n
          \     address, it SHOULD use the version 1 UUID representation with the\n
          \     timestamp and clock sequence bits set to a value of '0'.  This\n      will
          allow for easy recognition, and uniqueness of MAC-address-\n      based
          UUIDs.  An exception is the case where the device supports\n      independent
          device configuration for more than one SIP UA.  An\n      example would
          be multiple SIP UAs on the same platform.\n   o  If the device cannot use
          a non-alterable device identifier, it\n      SHOULD use an alternative non-alterable
          device identifier.  For\n      example, the International Mobile Equipment
          Identity (IMEI) for\n      mobile devices.\n   o  If the device cannot use
          a non-alterable MAC address, it MUST use\n      the same approach as defining
          a user agent instance ID in\n      [RFC5626].\n   o  Note: when the URN
          is used as the user part of the Request-URI, it\n      MUST be URL escaped
          since the colon (\":\") is not a legal character\n      in the user part
          of an addr-spec ([RFC4122]), and must be escaped.\n         For example,
          the instance ID:\n         urn:uuid:f81d4fae-7ced-11d0-a765-00a0c91e6bf6@example.com\n
          \        would be escaped to look as follows in a URI:\n         sip:urn%3auuid%3af81d4fae-7ced-11d0-a765-00a0c91e6bf6@\n
          \        example.com\n         The ABNF ([RFC5234]) for the UUID representation
          is provided in\n         [RFC4122].\n"
        title: 5.1.4.2.  Device Profile Type
      - contents:
        - "5.1.4.3.  User Profile Type\n   To create a Subscription URI to request
          the user profile on behalf of\n   a user, the device needs to know the user's
          AoR.  This can be\n   statically or dynamically configured on the device
          (e.g., user input,\n   or propagated as part of the device profile).  Similar
          to device\n   profiles, the content and propagation of user profiles may
          differ,\n   based on deployment scenarios (i.e., users belonging to the
          same\n   domain may -- or may not -- be provided the same profile).  To
          create\n   a Subscription URI, the following rules apply:\n   o  The device
          MUST set the Request-URI to the user AoR.\n   o  The device MUST populate
          the From field with the user AoR.\n   An authoritative SIP proxy for a SIP
          provider's network that receives\n   a profile enrollment request for the
          user profile type will route\n   based on the Event Header field values,
          thus allowing a subscription\n   to the user's AoR to be routed to the appropriate
          PDS.\n"
        title: 5.1.4.3.  User Profile Type
      title: 5.1.4.  Enrollment Data and Caching
    title: 5.1.  Profile Delivery Stages
  - contents:
    - "5.2.  Securing Profile Delivery\n   Profile data can contain sensitive information
      that needs to be\n   secured, such as identities and credentials.  Security
      involves\n   authentication, data integrity and data confidentiality.\n   Authentication
      is the process by which you verify that an entity is\n   who it claims to be,
      such as a user AoR presented during profile\n   enrollment.  Message integrity
      provides the assurance that the\n   message contents transmitted between two
      entities, such as between\n   the PDS and the device, has not been modified
      during transit.\n   Privacy ensures that the message contents have not been
      subjected to\n   monitoring by unwanted elements during transit.  Authentication
      and\n   data integrity are required to ensure that the profile contents were\n
      \  received by a valid entity, from a valid source, and without any\n   modifications
      during transit.  For profiles that contain sensitive\n   data, data confidentiality
      is also required.\n   For an overview of potential security threats, refer to
      Section 9.\n   For information on how the device can be configured with identities\n
      \  and credentials, refer to Section 5.3.1.  The following subsections\n   provide
      the security requirements associated with each profile\n   delivery stage, and
      applies to each of profile types specified by\n   this framework.\n"
    - contents:
      - "5.2.1.  Securing Profile Enrollment\n   Profile enrollment may result in
        sensitive profile data.  In such\n   cases, the PDS MUST authenticate the
        device, except during the\n   bootstrapping scenario when the device does
        not have existing\n   credentials (see Section 5.3.1 for more information
        on\n   bootstrapping).  Additionally, the device MUST authenticate the PDS\n
        \  to ensure that it is obtaining sensitive profile data from a valid\n   PDS.\n
        \  To authenticate a device that has been configured with identities and\n
        \  credentials, as specified in Section 5.3.1, and support profiles\n   containing
        sensitive profile data (refer to Section 5.3.3), devices\n   and PDSs MUST
        support digest authentication (over Transport Layer\n   Security (TLS)) as
        specified in [RFC3261].  Future enhancements may\n   provide other authentication
        methods such as authentication using\n   X.509 certificates.  For the device
        to authenticate the PDS, the\n   device MUST mutually authenticate with the
        PDS during digest\n   authentication (device challenges the PDS, which responds
        with the\n   Authorization header).  Transmission of sensitive profile data
        also\n   requires data integrity.  This can be accomplished by configuring
        the\n   device with, or by ensuring that the discovery process during profile\n
        \  enrollment provides, a Session Initiation Protocol Secure (SIPS) URI\n
        \  resulting in TLS establishment ([RFC5246]).  TLS also prevents\n   offline
        dictionary attacks when digest authentication is used.  Thus,\n   in the absence
        of TLS, the device MUST NOT respond to any\n   authentication challenges.
        \ It is to be noted that the digest\n   credentials used for obtaining profile
        data via this framework may,\n   or may not, be the same as those used for
        SIP registration (see\n   Section 5.3.1).  In addition, while [RFC3261] considers
        MD5 to be a\n   reasonable choice to compute the hash, and this may have been
        true\n   when [RFC3261] was published, implementers are recommended to use\n
        \  stronger alternatives such as SHA-256.  Refer to [FIPS-180-3] and\n   [RFC4634]
        for more information about SHA-256.\n   When the PDS challenges a profile
        enrollment request, and it fails,\n   the PDS MAY refuse enrollment or provide
        profile data without the\n   user-specific information (e.g., to bootstrap
        a device as indicated\n   in Section 5.3.1).  If the device challenges, but
        fails to\n   authenticate the PDS, it MUST reject the initial notification
        and\n   retry the profile enrollment process.  If the device is configured\n
        \  with, or discovers, a SIPS URI but TLS establishment fails because\n   the
        next-hop SIP entity does not support TLS, the device SHOULD\n   attempt other
        resolved next-hop SIP entities.  When the device\n   establishes TLS with
        the next-hop entity, the device MUST use the\n   procedures specified in [RFC2818],
        Section 3.1, for authentication,\n   unless it does not have any configured
        information (e.g.,\n   certification authority (CA) certificate) to perform
        authentication\n   (like prior to bootstrapping).  The 'Server Identity' for\n
        \  authentication is always the domain of the next-hop SIP entity.  If\n   the
        device attempts validation, and it fails, it MUST reject the\n   initial notification
        and retry profile enrollment.  In the absence of\n   a SIPS URI for the device
        and a mechanism for mutual authentication,\n   the PDS MUST NOT present any
        sensitive profile data in the initial\n   notification, except when the device
        is being bootstrapped.  It MAY\n   still use content indirection to transmit
        sensitive profile data.\n   When a device is being provided with bootstrapping
        profile data\n   within the notification, and it contains sensitive information,
        the\n   SIP Identity header SHOULD be used, as specified in [RFC4474].  This\n
        \  helps with devices that MAY be pre-configured with certificates to\n   validate
        bootstrapping sources (e.g., list of allowed domain\n   certificates, or a
        list of root CA certificates using Public Key\n   Infrastructure (PKI)).  When
        the SIP Identity header is used, the PDS\n   MUST set the host portion of
        the AoR in the From header to the\n   Provider's domain (the user portion
        is a entity-specific identifier).\n   If the device is capable of validating
        the SIP Identity, and it\n   fails, it MUST reject bootstrapping profile data.\n"
      title: 5.2.1.  Securing Profile Enrollment
    - contents:
      - "5.2.2.  Securing Content Retrieval\n   Initial or change notifications following
        a successful enrollment can\n   provide a device with the requested profile
        data or use content\n   indirection to direct it to a PCC that can provide
        the profile data.\n   This document specifies HTTP and HTTPS as content retrieval\n
        \  protocols.\n   If the profile is provided via content indirection and contains\n
        \  sensitive profile data, then the PDS MUST use a HTTPS URI for content\n
        \  indirection.  PCCs and devices MUST NOT use HTTP for sensitive\n   profile
        data, except for bootstrapping a device via the device\n   profile.  A device
        MUST authenticate the PCC as specified in\n   [RFC2818], Section 3.1.  A device
        that is being provided with profile\n   data that contains sensitive data
        MUST be authenticated using digest\n   authentication as specified in [RFC2617],
        with the exception of a\n   device that is being bootstrapped for the first
        time via the device\n   profile.  The resulting TLS channel also provides
        data integrity and\n   data confidentiality.\n"
      title: 5.2.2.  Securing Content Retrieval
    - contents:
      - "5.2.3.  Securing Change Notification\n   If the device requested enrollment
        via a SIP subscription with a non-\n   zero 'Expires' parameter, it can also
        result in change notifications\n   for the duration of the subscription.  For
        change notifications\n   containing sensitive profile data, this framework
        RECOMMENDS the use\n   of the SIP Identity header as specified in [RFC4474].
        \ When the SIP\n   Identity header is used, the PDS MUST set the host portion
        of the AoR\n   in the From header to the Provider's domain (the user portion
        is a\n   entity-specific identifier).  This provides header and body integrity\n
        \  as well.  However, for sensitive profile data requiring data\n   confidentiality
        , if the contact URI to which the NOTIFY request is\n   to be sent is not
        SIPS, the PDS MUST use content indirection.\n   Additionally, the PDS MUST
        also use content indirection for\n   notifications containing sensitive profile
        data, when the profile\n   enrollment was not authenticated.\n"
      title: 5.2.3.  Securing Change Notification
    title: 5.2.  Securing Profile Delivery
  - contents:
    - "5.3.  Additional Considerations\n   This section provides additional considerations,
      such as details on\n   how a device obtains identities and credentials, back-off
      and retry\n   methods, guidelines on profile data, and additional profile types.\n"
    - contents:
      - "5.3.1.  Bootstrapping Identities and Credentials\n   When requesting a profile,
        the profile delivery server will likely\n   require the device to provide
        an identity (i.e., a user AoR) and\n   associated credentials for authentication.
        \ During this process\n   (e.g., digest authentication), the PDS is also required
        to present\n   its knowledge of the credentials to ensure mutual authentication
        (see\n   Section 5.2.1).  For mutual authentication with the PDS, the device\n
        \  needs to be provided with the necessary identities and credentials\n   (e.g.,
        username/password, certificates).  This is done via\n   bootstrapping.  For
        a discussion around the security considerations\n   related to bootstrapping,
        please see Section 9.2.\n   Bootstrapping a device with the required identities
        and credentials\n   can be accomplished in one of the following ways:\n   Pre-configuration\n
        \     The device may be pre-configured with identities and associated\n      credentials,
        such as a user AoR and digest password.\n   Out-of-band methods\n      A device
        or Provider may provide hardware- or software-based\n      credentials such
        as Subscriber Identity Module (SIM) cards or\n      Universal Serial Bus (USB)
        drives.\n   End-user interface\n      The end-user may be provided with the
        necessary identities and\n      credentials.  The end-user can then configure
        the device (using a\n      user interface), or present when required (e.g.,
        IM login screen).\n   Using this framework\n      When a device is initialized,
        even if it has no pre-configured\n      information, it can request the local-network
        and device profiles.\n      For purposes of bootstrapping, this framework
        recommends that the\n      device profile provide one of the following to
        bootstrap the\n      device:\n      *  Profile data that allows the end-user
        to communicate with the\n         device provider or SIP service provider
        using non-SIP methods.\n         For example, the profile data can direct
        the end-user to a web\n         portal to obtain a subscription.  Upon obtaining
        a successful\n         subscription, the end-user or the device can be provided
        with\n         the necessary identities and credentials.\n      *  Content
        indirection information to a PCC that can provide\n         identities and
        credentials.  As an example, consider a device\n         that has an X.509
        certificate that can be authenticated by the\n         PCC.  In such a case,
        the PCC can use HTTPS to provide\n         identities and associated credentials.\n
        \     *  Profile data containing identities and credentials that can be\n
        \        used to bootstrap the device (see Section 5.3.3 for profile\n         data
        recommendations).  This can be used in cases where the\n         device is
        initialized for the first time, or after a factory\n         reset.  This
        can be considered only in cases where the device\n         is initialized
        in the Provider's network, for obvious security\n         reasons.\n   For
        interoperability purposes, this framework requires PDSs and\n   devices to
        support the last option (above), which is to use this\n   framework.  Specifically,
        the option of providing identities and\n   credentials via the profile data
        MUST be supported.\n   Additionally, AoRs are typically known by PDSs that
        serve the domain\n   indicated by the AoR.  Thus, devices can only present
        the configured\n   AoRs in the respective domains.  An exception is the use
        of federated\n   identities.  This allows a device to use a user's AoR in
        multiple\n   domains.  Further even within the same domain, the device's domain\n
        \  proxy and the PDS may be in two different realms, and as such may be\n
        \  associated with different credentials for digest authentication.  In\n
        \  such cases, multiple credentials may be configured, and associated\n   with
        the realms in which they are to be used.  This framework\n   specifies only
        digest authentication for profile enrollment and the\n   device is not expected
        to contain any other credentials.  For profile\n   retrieval using content
        indirection, the device will need to support\n   additional credentials such
        as X.509 certificates (for TLS).  Future\n   enhancements can specify additional
        credential types for profile\n   enrollment and retrieval.\n"
      title: 5.3.1.  Bootstrapping Identities and Credentials
    - contents:
      - "5.3.2.  Profile Enrollment Request Attempt\n   A state diagram representing
        a device requesting any specific profile\n   defined by this framework is
        shown in Figure 6.\n                                +------------+\n                                |
        Initialize |\n                                +-----+------+\n                                      |\n
        \                                     |\n                                      V\n
        \                              +-------------+\n                               |
        \  Prepare   |\n                    +--------->|  Enrollment |<------------------+\n
        \                   |          |   Request   |                   |\n                    |
        \         +------+------+                   |\n             +------+------+
        \         |                          |\n             |   Failure   | Enroll.
        Req. prepared               |\n         +-->|  Handling & |      /Send Req
        \                     |\n         |   |   Delay     |          |                          |\n
        \        |   +-------------+          V                          |\n         |
        \      ^    ^        +-------------+                   |\n         |       |
        \   |        |    Await    |                   |\n         |       |    +--------+
        \ Enrollment |                   |\n         |       |    Timeout, |  acceptance
        |                   |\n         |       |   non-2xx/- +------+------+                   |\n
        \        |       |                    |                          |\n         |
        \  Timeout            200 OK/-                    Enrollment\n         |  /Terminate
        \               |                       Timeout/-\n         |   Enrollment
        \              V                          |\n         |       |            +--------------+
        \                  |\n         |       |            |  Enrollment  |                   |\n
        \        |       +------------+   accepted   |                   |\n    Retries
        Exceeded          |(await NOTIFY)|                   |\n   /Retry Enrollment
        \         +---+------+---+                   |\n         |                        |
        \     |                       |\n         |                        |      |
        \                      |\n         |   NOTIFY w. Content Ind|      |  NOTIFY
        w. Profile    |\n         |     /Retrieve Profile  |      |  /Accept Profile
        \     |\n         |           +------------+      +------------+          |\n
        \        |           |                                |          |\n         |
        \          V                                V          |\n         |     +------------+
        \                  +------------+   |\n         +-----+ Retrieving |    Retrieved
        \     | Enrollment +---+\n            ,->|   Profile  +--/Apply Profile-->|
        Successful |\n           /   |            |                   |(monitoring)|<--.\n
        \     Timeout  +--+---------+                   +--+----+----+    :\n      /Retry
        \     ;      ^                         |    :         ;\n           `------'
        \     |   NOTIFY w. Cont.Ind    |    `-------'\n                         +---/Retrieve
        Profile-----+   NOTIFY w. Profile\n                                                          /Apply
        Profile\n                      Figure 6: Device State Diagram\n   As a reminder:\n
        \  o  The timeout for SIP messages is specified by [RFC3261].  In the\n      cases
        where this is not specified such as the timeout to wait for\n      the initial
        notification during profile enrollment, it is left to\n      device implementations
        or future protocol enhancements.\n   o  The timeout for profile retrieval
        using content indirection will\n      be as specified by profile retrieval
        protocols employed.  If none\n      exists, it is left to device implementations.\n
        \  In addition, since profile enrollment is a process unique to this\n   framework,
        the device MUST follow the enrollment attempt along with\n   exponential back-off
        and retry mechanisms as indicated in Figure 7.\n     Function for Profile
        Enrollment ()\n        Init Function: Iteration i=0\n        Loop 1: Attempt\n
        \            Loop 2: For each SIP Subscription URI\n                  Loop
        3: For each next-hop SIP entity\n                     - Prepare and transmit
        Enrollment Request\n                     - Await Enrollment Acceptance and
        initial NOTIFY\n                     + If the profile enrollment is successful\n
        \                      = Exit this function()\n                     + If profile
        enrollment fails due to an explicit\n                       failure or a timeout
        as specified in [RFC3261]\n                       = Continue with the next-hop
        SIP entity (Loop 3)\n                  End Loop: Loop 3\n             End
        Loop: Loop 2\n             (Note: If you are here, profile enrollment did
        not succeed)\n             + Is any valid cached profile data available?\n
        \              = If yes, use it and continue with Loop 1\n             + If
        the enrollment request is for a non-mandatory profile\n               = Start
        profile enrollment for the next profile,\n                 if applicable\n
        \            - Delay for 2^i*(64*T1); -- this is exponential back-off\n             -
        increment i;\n             - If i>8, reset i=8;\n       End loop: Loop 1\n
        \  End Function()\n            Figure 7: Profile Enrollment Attempt (Pseudo-Code)\n
        \  The pseudo-code above (Figure 7) allows for cached profiles to be\n   used.
        \ However, any cached local-network profile MUST NOT be used\n   unless the
        device can ensure that it is in the same local network\n   that provided the
        cached data.  This framework does not provide any\n   procedures for local
        network recognition.  Any cached device and user\n   profiles MUST only be
        used in domains with which they are associated.\n   For example, a cached
        device profile is used only when the associated\n   domain matches the current
        device provider's domain.  If a PDS wants\n   to invalidate a profile it may
        do so by transmitting a NOTIFY with an\n   'empty profile', i.e., profile
        instance without any included data (if\n   supported by the profile data model;
        not to be confused with an empty\n   NOTIFY), or via an explicit profile data
        element that invalidates the\n   data.  A device receiving such a NOTIFY MUST
        discard the applicable\n   profile (i.e., it cannot even store it in the cache).
        \ Additionally,\n   if a factory reset is available and performed on a device,
        it MUST\n   reset the device to its initial state prior to any configuration.\n
        \  Specifically, the device MUST set the device back to the state when\n   it
        was originally distributed.\n   The order of profile enrollment is important.
        \ For the profiles\n   specified in this framework, the device MUST enroll
        in the following\n   default order: local network, device, and user.  The
        pseudo-code\n   presented earlier (Figure 7) differentiates between 'mandatory'
        and\n   'non-mandatory' profiles.  This distinction is left to profile data\n
        \  definitions.\n   It is to be noted that this framework does not allow the
        devices to\n   inform the PDSs of profile retrieval errors such as invalid
        data.\n   Follow-on standardization activities are expected to address this\n
        \  feature.\n"
      title: 5.3.2.  Profile Enrollment Request Attempt
    - contents:
      - "5.3.3.  Profile Data\n   This framework does not specify the contents for
        any profile type.\n   Follow-on standardization activities are expected to
        address profile\n   contents.  However, the framework provides the following
        requirements\n   and recommendations for profile data definitions:\n   o  The
        device profile type SHOULD specify parameters to configure the\n      identities
        and credentials for use in scenarios such as\n      bootstrapping (see Section
        5.3.1) and run-time modifications to\n      identities and credentials.  This
        framework recommends the device\n      profile provide the identities and
        credentials due to a couple of\n      reasons.  The local-network profile
        may not always be available,\n      and even if present, may not be controlled
        by the device provider\n      who controls device configuration to provide
        services.  Further,\n      the device may not have any users configured prior
        to being\n      bootstrapped, resulting in an absence of user profile requests.\n
        \     However, this framework does not prevent other profile types from\n
        \     providing identities and credentials to meet deployment needs.\n      For
        example, the user profile can contain identities and\n      credentials for
        communicating with specific applications.\n   o  Each profile MUST clearly
        identify if it may contain any sensitive\n      data.  Such profiles MUST
        also identify the data elements that are\n      considered sensitive, i.e.,
        data that cannot be disclosed to\n      unauthorized parties.  As an example,
        a device profile definition\n      may identify itself as containing sensitive
        data and indicate data\n      such as device credentials to be sensitive.\n
        \  o  When the device receives multiple profiles, the contents of each\n      profile
        type SHOULD only contain data relevant to the entity it\n      represents.
        \ As an example, consider a device that obtains all the\n      defined profiles.
        \ Information pertaining to the local network is\n      contained in the 'local-network'
        profile and not the 'user'\n      profile.  This does not preclude relevant
        data about a different\n      entity from being included in a profile type,
        e.g., the 'device'\n      profile type may contain information about the users
        allowed to\n      access services via the device.  A profile may also contain\n
        \     starting information to obtain subsequent profiles.\n   o  Data overlap
        SHOULD be avoided across profile types, unless\n      necessary.  If data
        overlap is present, prioritization of the data\n      is left to data definitions.
        \ As an example, the device profile\n      may contain the list of codecs
        to be used by the device and the\n      user profile (for a user on the device)
        may contain the codecs\n      preferred by the user.  Thus, the same data
        (usable codecs) is\n      present in two profiles.  However, the data definitions
        may\n      indicate that, to function effectively, any codec chosen for\n
        \     communication needs to be present in both the profiles.\n"
      title: 5.3.3.  Profile Data
    - contents:
      - "5.3.4.  Profile Data Frameworks\n   The framework specified in this document
        does not address profile\n   data representation, storage, or retrieval protocols.
        \ It assumes\n   that the PDS has a PCC based on existing or other Profile
        Data\n   Frameworks.\n   While this framework does not impose specific constraints
        on any such\n   framework, it does allow for the propagation of profile content
        to\n   the PDS (specifically the PCC).  Thus, Profile Data Frameworks or\n
        \  retrieval frameworks used in conjunction with this framework MAY\n   consider
        techniques for propagating incremental, atomic changes to\n   the PDS.  One
        means for propagating changes to a PDS is XML\n   Configuration Access Protocol
        (XCAP) ([RFC4825]).\n"
      title: 5.3.4.  Profile Data Frameworks
    - contents:
      - "5.3.5.  Additional Profile Types\n   This document specifies three profile
        types: local-network, device,\n   and user.  However, there may be use cases
        for additional profile\n   types. e.g., profile types for application specific
        profile data or\n   to provide enterprise-specific policies.  Definition of
        such\n   additional profile types is not prohibited, but considered out of\n
        \  scope for this document.  Such profile definitions MUST specify the\n   order
        of retrieval with respect to all the other profiles such as the\n   local-network,
        device, and user profile types defined in this\n   document.\n"
      title: 5.3.5.  Additional Profile Types
    - contents:
      - "5.3.6.  Deployment Considerations\n   The framework defined in this document
        was designed to address\n   various deployment considerations, some of which
        are highlighted\n   below.\n   Provider relationships:\n   o  The local network
        provider and the SIP service provider can often\n      be different entities,
        with no administrative or business\n      relationship with each other.\n
        \  o  There may be multiple SIP service providers involved, one for each\n
        \     service to which a user subscribes (telephony service, instant\n      messaging,
        etc.); this framework does not specify explicit\n      behavior in such a
        scenario, but it does not prohibit its usage\n      either.\n   o  Each user
        accessing services via the same device may subscribe to\n      different sets
        of services, from different service providers.\n   User-device relationship:\n
        \  o  The relationship between devices and users can be many-to-many\n      (e.g.,
        a particular device may allow for many users to obtain\n      subscription
        services through it, and individual users may have\n      access to multiple
        devices).\n   o  Each user may have different preferences for use of services,
        and\n      presentation of those services in the device user interface.\n
        \  o  Each user may have different personal information applicable to\n      use
        of the device, either as related to particular services, or\n      independent
        of them.\n"
      title: 5.3.6.  Deployment Considerations
    title: 5.3.  Additional Considerations
  - contents:
    - "5.4.  Support for NATs\n   PDSs that support devices behind NATs, and devices
      that can be behind\n   NATs can use procedures specified in [RFC5626].  The
      Outbound proxies\n   can be configured or discovered.  Clients that support
      such behavior\n   MUST include the 'outbound' option-tag in a Supported header
      field\n   value, and add the \"ob\" parameter, as specified in [RFC5626], within\n
      \  the SIP SUBSCRIBE for profile enrollment.\n"
    title: 5.4.  Support for NATs
  title: 5.  Profile Delivery Framework
- contents:
  - "6.  Event Package Definition\n   The framework specified in this document proposes
    and specifies a new\n   SIP event package, as allowed by [RFC3265].  The purpose
    is to allow\n   for devices to subscribe to specific profile types with PDSs and
    for\n   the PDSs to notify the devices with the profile data or content\n   indirection
    information.\n   The requirements specified in [RFC3265] apply to this package.
    \ The\n   following subsections specify the event package description and the\n
    \  associated requirements.  The framework requirements are defined in\n   Section
    5.\n"
  - contents:
    - "6.1.  Event Package Name\n   The name of this package is \"ua-profile\".  This
      value appears in the\n   Event header field present in SUBSCRIBE and NOTIFY
      requests for this\n   package, as defined in [RFC3265].\n"
    title: 6.1.  Event Package Name
  - contents:
    - "6.2.  Event Package Parameters\n   This package defines the following new parameters
      for the event\n   header:\n      \"profile-type\", \"vendor\", \"model\", \"version\",
      and \"effective-by\"\n   The following rules apply:\n   o  All the new parameters,
      with the exception of the \"effective-by\"\n      parameter, MUST only be used
      in SUBSCRIBE requests and ignored if\n      they appear in NOTIFY requests.\n
      \  o  The \"effective-by\" parameter is for use in NOTIFY requests only\n      and
      MUST be ignored if it appears in SUBSCRIBE requests.\n   The semantics of these
      new parameters are specified in the following\n   subsections.\n"
    - contents:
      - "6.2.1.  \"profile-type\" Parameter\n   The \"profile-type\" parameter is
        used to indicate the token name of\n   the profile type the user agent wishes
        to obtain and to be notified\n   of subsequent changes.  This document defines
        three logical types of\n   profiles and their token names.  They are as follows:\n
        \  local-network:  specifying the \"local-network\" type profile indicates\n
        \     the desire for profile data, and potentially, profile change\n      notifications
        specific to the local network.\n   device:  specifying the \"device\" type
        profile(s) indicates the desire\n      for the profile data, and potentially,
        profile change notification\n      that is specific to the device or user
        agent.\n   user:  specifying the \"user\" type profile indicates the desire
        for\n      the profile data, and potentially, profile change notification\n
        \     specific to the user.\n   The profile type is identified in the Event
        header parameter:\n   \"profile-type\".  A separate SUBSCRIBE dialog is used
        for each profile\n   type.  Thus, the subscription dialog on which a NOTIFY
        arrives\n   implies which profile's data is contained in, or referred to,
        by the\n   NOTIFY message body.  The Accept header of the SUBSCRIBE request
        MUST\n   include the MIME types for all profile content types for which the\n
        \  subscribing user agent wishes to retrieve profiles, or receive change\n
        \  notifications.\n   In the following syntax definition using ABNF, EQUAL
        and token are\n   defined in [RFC3261].  It is to be noted that additional
        profile\n   types may be defined in subsequent documents.\n   Profile-type
        \  = \"profile-type\" EQUAL profile-value\n   profile-value  =  profile-types
        / token\n   profile-types  = \"device\" / \"user\" / \"local-network\"\n   The
        \"device\", \"user\", or \"local-network\" token in the profile-type\n   parameter
        may represent a class or set of profile properties.\n   Follow-on standards
        defining specific profile contents may find it\n   desirable to define additional
        tokens for the profile-type parameter.\n   Also, additional content types
        may be defined along with the profile\n   formats that can be used in the
        Accept header of the SUBSCRIBE to\n   filter or indicate what data sets of
        the profile are desired.\n"
      title: 6.2.1.  "profile-type" Parameter
    - contents:
      - "6.2.2.  \"vendor\", \"model\", and \"version\" Parameters\n   The \"vendor\",
        \"model\", and \"version\" parameter values are tokens\n   specified by the
        implementer of the user agent.  These parameters\n   MUST be provided in the
        SUBSCRIBE request for all profile types.  The\n   implementer SHOULD use their
        DNS domain name (e.g., example.com) as\n   the value of the \"vendor\" parameter
        so that it is known to be unique,\n   unless there is a good reason not to.
        \ Examples of exceptions\n   include: if the vendor does not have an assigned
        DNS domain name, if\n   they are using a different vendor's implementation,
        etc.  These\n   parameters are useful to the PDS to affect the profiles provided.
        \ In\n   some scenarios, it is desirable to provide different profiles based\n
        \  upon these parameters.  For example, feature property X in a profile\n
        \  may work differently on two versions of the same user agent.  This\n   gives
        the PDS the ability to compensate for or take advantage of the\n   differences.
        \ In the following ABNF defining the syntax, EQUAL and\n   quoted-string are
        defined in [RFC3261].\n   Vendor       =  \"vendor\" EQUAL quoted-string\n
        \  Model        =  \"model\" EQUAL quoted-string\n   Version      =  \"version\"
        EQUAL quoted-string\n"
      title: 6.2.2.  "vendor", "model", and "version" Parameters
    - contents:
      - "6.2.3.  \"effective-by\" Parameter\n   The \"effective-by\" parameter in
        the Event header of the NOTIFY\n   request specifies the maximum number of
        seconds before the user agent\n   MUST attempt to make the new profile effective.
        \ The \"effective-by\"\n   parameter MAY be provided in the NOTIFY request
        for any of the\n   profile types.  A value of 0 (zero) indicates that the
        subscribing\n   user agent MUST attempt to make the profiles effective immediately\n
        \  (despite possible service interruptions).  This gives the PDS the\n   power
        to control when the profile is effective.  This may be\n   important to resolve
        an emergency problem or disable a user agent\n   immediately.  If it is absent,
        the device SHOULD attempt to make the\n   profile data effective at the earliest
        possible opportunity that does\n   not disrupt any services being offered.
        \ The \"effective-by\" parameter\n   is ignored in all messages other than
        the NOTIFY request.  In the\n   following ABNF, EQUAL and DIGIT are defined
        in [RFC3261].\n   Effective-By =  \"effective-by\" EQUAL 1*DIGIT\n"
      title: 6.2.3.  "effective-by" Parameter
    - contents:
      - "6.2.4.  Summary of Event Parameters\n   The following are example Event headers
        that may occur in SUBSCRIBE\n   requests.  These examples are not intended
        to be complete SUBSCRIBE\n   requests.\n   Event: ua-profile;profile-type=device;\n
        \         vendor=\"vendor.example.com\";model=\"Z100\";version=\"1.2.3\"\n
        \  Event: ua-profile;profile-type=user;\n          vendor=\"premier.example.com\";model=\"trs8000\";version=\"5.5\"\n
        \  The following are example Event headers that may occur in NOTIFY\n   requests.
        \ These example headers are not intended to be complete\n   SUBSCRIBE requests.\n
        \  Event: ua-profile;effective-by=0\n   Event: ua-profile;effective-by=3600\n
        \  The following table shows the use of Event header parameters in\n   SUBSCRIBE
        requests for the three profile types:\n   profile-type || device | user |
        local-network\n   =============================================\n   vendor
        \      ||   m    |  m   |        m\n   model        ||   m    |  m   |        m\n
        \  version      ||   m    |  m   |        m\n   effective-by ||        |      |\n
        \  m - MUST be provided\n   s - SHOULD be provided\n   o - OPTIONAL to be
        provided\n   Non-specified means that the parameter has no meaning and should
        be\n   ignored.\n   The following table shows the use of Event header parameters
        in\n   NOTIFY requests for the three profile types:\n   profile-type || device
        | user | local-network\n   =============================================\n
        \  vendor       ||        |      |\n   model        ||        |      |\n   version
        \     ||        |      |\n   effective-by ||   o    |  o   |        o\n"
      title: 6.2.4.  Summary of Event Parameters
    title: 6.2.  Event Package Parameters
  - contents:
    - "6.3.  SUBSCRIBE Bodies\n   This package defines no use of the SUBSCRIBE request
      body.  If\n   present, it SHOULD be ignored.  Exceptions include future\n   enhancements
      to the framework that may specify a use for the\n   SUBSCRIBE request body.\n"
    title: 6.3.  SUBSCRIBE Bodies
  - contents:
    - "6.4.  Subscription Duration\n   The duration of a subscription is specific
      to SIP deployments, and no\n   specific recommendation is made by this event
      package.  If absent, a\n   value of 86400 seconds (24 hours; 1 day) is RECOMMENDED
      since the\n   presence (or absence) of a device subscription is not time critical\n
      \  to the regular functioning of the PDS.\n   It is to be noted that a one-time
      fetch of a profile, without ongoing\n   subscription, can be accomplished by
      setting the 'Expires' parameter\n   to a value of Zero, as specified in [RFC3265].\n"
    title: 6.4.  Subscription Duration
  - contents:
    - "6.5.  NOTIFY Bodies\n   The framework specifying the event package allows for
      the NOTIFY body\n   to contain the profile data, or a pointer to the profile
      data using\n   content indirection.  For profile data delivered via content\n
      \  indirection, i.e., a pointer to a PCC, then the Content-ID MIME\n   header,
      as described in [RFC4483], MUST be used for each profile\n   document URI.  At
      a minimum, the \"http:\" [RFC2616] and \"https:\"\n   [RFC2818] URI schemes
      MUST be supported; other URI schemes MAY be\n   supported based on the Profile
      Data Frameworks (examples include FTP\n   [RFC0959], Lightweight Directory Access
      Protocol (LDAP) [RFC4510],\n   and XCAP [RFC4825] ).\n   A non-empty NOTIFY
      body MUST include a MIME type specified in the\n   Accept header of the SUBSCRIBE.
      \ Further, if the Accept header of the\n   SUBSCRIBE included the MIME type
      message/external-body (indicating\n   support for content indirection) then
      the PDS MAY use content\n   indirection in the NOTIFY body for providing the
      profiles.\n"
    title: 6.5.  NOTIFY Bodies
  - contents:
    - "6.6.  Notifier Processing of SUBSCRIBE Requests\n   A successful SUBSCRIBE
      request results in a NOTIFY with either\n   profile contents or a pointer to
      it (via content indirection).  The\n   SUBSCRIBE SHOULD be either authenticated
      or transmitted over an\n   integrity protected SIP communications channel.  Exceptions
      include\n   cases where the identity of the Subscriber is unknown and the\n
      \  Notifier is configured to accept such requests.\n   The Notifier MAY also
      authenticate SUBSCRIBE messages even if the\n   NOTIFY is expected to only contain
      a pointer to profile data.\n   Securing data sent via content indirection is
      covered in Section 9.\n   If the profile type indicated in the \"profile-type\"
      Event header\n   parameter is unavailable or the Notifier is configured not
      to provide\n   it, the Notifier SHOULD return a 404 response to the SUBSCRIBE\n
      \  request.  If the specific user or device is unknown, the Notifier MAY\n   accept
      the subscription, or else it may reject the subscription (with\n   a 403 response).\n"
    title: 6.6.  Notifier Processing of SUBSCRIBE Requests
  - contents:
    - "6.7.  Notifier Generation of NOTIFY Requests\n   As specified in [RFC3265],
      the Notifier MUST always send a NOTIFY\n   request upon accepting a subscription.
      \ If the device or user is\n   unknown and the Notifier chooses to accept the
      subscription, the\n   Notifier MAY either respond with profile data (e.g., default
      profile\n   data) or provide no profile information (i.e., empty NOTIFY).\n
      \  If the identity indicated in the SUBSCRIBE request (From header) is a\n   known
      identity and the requested profile information is available\n   (i.e., as specified
      in the \"profile-type\" parameter of the Event\n   header), the Notifier SHOULD
      send a NOTIFY with profile data.\n   Profile data MAY be sent as profile contents
      or via content\n   indirection (if the content indirection MIME type was included
      in the\n   Accept header).  The Notifier MUST NOT use any scheme that was not\n
      \  indicated in the \"schemes\" Contact header field.\n   The Notifier MAY specify
      when the new profiles must be made effective\n   by the Subscriber by specifying
      a maximum time in seconds (zero or\n   more) in the \"effective-by\" Event header
      parameter.\n   If the SUBSCRIBE was received over an integrity protected SIP\n
      \  communications channel, the Notifier SHOULD send the NOTIFY over the\n   same
      channel.\n"
    title: 6.7.  Notifier Generation of NOTIFY Requests
  - contents:
    - "6.8.  Subscriber Processing of NOTIFY Requests\n   A Subscriber to this event
      package MUST adhere to the NOTIFY request\n   processing behavior specified
      in [RFC3265].  If the Notifier\n   indicated an effective time (using the \"effective-by\"
      Event header\n   parameter), the Subscriber SHOULD attempt to make the profiles\n
      \  effective within the specified time.  Exceptions include deployments\n   that
      prohibit such behavior in certain cases (e.g., emergency\n   sessions are in
      progress).  When profile data cannot be applied\n   within the recommended time
      frame and this affects device behavior,\n   any actions to be taken SHOULD be
      defined by the profile data\n   definitions.  By default, the Subscriber is
      RECOMMENDED to make the\n   profiles effective as soon as possible.\n   When
      accepting content indirection, the Subscriber MUST always\n   support \"http:\"
      or \"https:\" and be prepared to accept NOTIFY messages\n   with those URI schemes.
      \ If the Subscriber wishes to support\n   alternative URI schemes they MUST
      each be indicated in the \"schemes\"\n   Contact header field parameter as defined
      in [RFC4483].  The\n   Subscriber MUST also be prepared to receive a NOTIFY
      request with no\n   body.  The subscriber MUST NOT reject the NOTIFY request
      with no\n   body.  The subscription dialog MUST NOT be terminated by a empty\n
      \  NOTIFY, i.e., with no body.\n"
    title: 6.8.  Subscriber Processing of NOTIFY Requests
  - contents:
    - "6.9.  Handling of Forked Requests\n   This event package allows the creation
      of only one dialog as a result\n   of an initial SUBSCRIBE request as described
      in Section 4.4.9 of\n   [RFC3265].  It does not support the creation of multiple\n
      \  subscriptions using forked SUBSCRIBE requests.\n"
    title: 6.9.  Handling of Forked Requests
  - contents:
    - "6.10.  Rate of Notifications\n   The rate of notifications for the profiles
      in this framework is\n   deployment specific, but expected to be infrequent.
      \ Hence, the event\n   package specification does not specify a throttling or
      minimum period\n   between NOTIFY requests.\n"
    title: 6.10.  Rate of Notifications
  - contents:
    - "6.11.  State Agents\n   State agents are not applicable to this event package.\n"
    title: 6.11.  State Agents
  title: 6.  Event Package Definition
- contents:
  - "7.  Examples\n   This section provides examples along with sample SIP message
    bodies\n   relevant to this framework.  Both the examples are derived from the\n
    \  use case illustrated in Section 4.1, specifically the request for the\n   device
    profile.  The examples are informative only.\n"
  - contents:
    - "7.1.  Example 1: Device Requesting Profile\n   This example illustrates the
      detailed message flows between the\n   device and the SIP service provider's
      network for requesting and\n   retrieving the profile (the flow uses the device
      profile as an\n   example).\n   The following are assumed for this example:\n
      \  o  Device is assumed to have established local network connectivity;\n      NAT
      and firewall considerations are assumed to have been addressed\n      by the
      SIP service provider.\n   o  Examples are snapshots only and do not illustrate
      all the\n      interactions between the device and the service provider's network\n
      \     (and none between the entities in the SIP service provider's\n      network).\n
      \  o  All SIP communication with the SIP service provider happens via a\n      SIP
      proxy.\n   o  HTTP over TLS is assumed to be the Content Retrieval method used\n
      \     (any suitable alternative can be used as well).\n   The flow diagram and
      an explanation of the messages follow.\n                                      +----------------------+\n
      \   +--------+                        | SIP Service Provider |\n    | Device
      |                        |                      |\n    |(SIP UA)|                        |
      \ SIP     PDS   HTTP  |\n    +--------+                        | PROXY         Server
      |\n                                      |                      |\n                                      +----------------------+\n
      \        |                                |       |      |\n         |                                |
      \      |      |\n         |          SUBSCRIBE             |       |      |\n
      \  (SReq)|--------device profile--------->|       |      |\n         |                                |------>|
      \     |\n         |                                |200 OK |      |\n         |
      \           200 OK              |<------|      |\n   (SRes)|<-------------------------------|
      \      |      |\n         |                                |       |      |\n
      \        |                                | NOTIFY|      |\n         |    NOTIFY
      (Content Indirection)|<------|      |\n   (NTFY)|<-------------------------------|
      \      |      |\n         |            200 OK              |       |      |\n
      \  (NRes)|------------------------------->|200 OK |      |\n         |                                |------>|
      \     |\n         |                                               |\n         |
      \                                              |\n         |                                               |\n
      \        |<<<<<<<<<<<<<  TLS establishment  >>>>>>>>>>>>>|\n         |                                               |\n
      \        |                HTTP Request                   |\n   (XReq)|---------------------------------------------->|\n
      \        |                                               |\n         |                HTTP
      Response                  |\n   (XRes)|<----------------------------------------------|\n
      \        |                                               |\n   (SReq)\n      the
      device transmits a request for the 'device' profile using the\n      SIP SUBSCRIBE
      utilizing the event package specified in this\n      framework.\n      *  Note:
      Some of the header fields (e.g., SUBSCRIBE, Event, Via)\n         are continued
      on a separate line due to format constraints of\n         this document.\n   SUBSCRIBE
      sip:urn%3auuid%3a00000000-0000-1000-0000-00FF8D82EDCB\n             @example.com
      \ SIP/2.0\n   Event: ua-profile;profile-type=device;vendor=\"vendor.example.net\";\n
      \         model=\"Z100\";version=\"1.2.3\"\n   From: anonymous@example.com;tag=1234\n
      \  To: sip:urn%3auuid%3a00000000-0000-1000-0000-00FF8D82EDCB@example.com\n   Call-ID:
      3573853342923422@192.0.2.44\n   CSeq: 2131 SUBSCRIBE\n   Contact: sip:urn%3auuid%3a00000000-0000-1000-0000-00FF8D82EDCB\n
      \     @192.168.1.44\n      ;+sip.instance=\"<urn:uuid:00000000-0000-0000-0000-123456789AB0>\"\n
      \     ;schemes=\"http,https\"\n   Via: SIP/2.0/TCP 192.0.2.41;\n     branch=z9hG4bK6d6d35b6e2a203104d97211a3d18f57a\n
      \  Accept: message/external-body, application/x-z100-device-profile\n   Content-Length:
      0\n   (SRes)  the SUBSCRIBE request is received by a SIP proxy in the\n      service
      provider's network, which transmits it to the PDS.  The\n      PDS accepts the
      response and responds with a 200 OK.\n      *  Note: The device and the SIP
      proxy may have established a\n         secure communications channel (e.g.,
      TLS).\n   (NTFY)  subsequently, the PDS transmits a SIP NOTIFY message\n      indicating
      the profile location.\n      *  Note: Some of the fields (e.g., content-type)
      are continued on\n         a separate line due to format constraints of this
      document.\n NOTIFY sip:urn%3auuid%3a00000000-0000-1000-0000-00FF8D82EDCB\n        @192.168.1.44
      SIP/2.0\n Event: ua-profile;effective-by=3600\n From: sip:urn%3auuid%3a00000000-0000-1000-0000-00FF8D82EDCB@example.com\n
      \      ;tag=abca\n To: sip:urn%3auuid%3a00000000-0000-1000-0000-00FF8D82EDCB@example.com\n
      \    ;tag=1234\n Call-ID: 3573853342923422@192.0.2.44\n CSeq: 322 NOTIFY\n Via:
      SIP/2.0/UDP 192.0.2.3;\n   branch=z9hG4bK1e3effada91dc37fd5a0c95cbf6767d0\n
      MIME-Version: 1.0\n Content-Type: message/external-body; access-type=\"URL\";\n
      \              expiration=\"Mon, 01 Jan 2010 09:00:00 UTC\";\n               URL=\"http://example.com/z100-000000000000.html\";\n
      \              size=9999;\n               hash=10AB568E91245681AC1B\n Content-Type:
      application/x-z100-device-profile\n Content-ID: <39EHF78SA@example.com>\n .\n
      .\n .\n   (NRes)  Device accepts the NOTIFY message and responds with a 200
      OK.\n   (XReq)  once the necessary secure communications channel is\n      established,
      the device sends an HTTP request to the HTTP server\n      indicated in the
      NOTIFY.\n   (XRes)  the HTTP server responds to the request via a HTTP response\n
      \     containing the profile contents.\n"
    title: '7.1.  Example 1: Device Requesting Profile'
  - contents:
    - "7.2.  Example 2: Device Obtaining Change Notification\n   The following example
      illustrates the case where a user (X) is\n   simultaneously accessing services
      via two different devices (e.g.,\n   multimedia entities on a PC and PDA) and
      has access to a user\n   interface that allows for changes to the user profile.\n
      \  The following are assumed for this example:\n   o  The devices (A & B) obtain
      the necessary profiles from the same\n      SIP service provider.\n   o  The
      SIP service provider also provides a user interface that\n      allows the user
      to change preferences that impact the user\n      profile.\n   The flow diagram
      and an explanation of the messages follow.\n   o  Note: The example only shows
      retrieval of user X's profile, but it\n      may request and retrieve other
      profiles (e.g., local-network,\n      device).\n               -----           -----\n
      \             |User |_________| UI* | * = User Interface\n              |  X
      \ |         |     |\n               -----           -----\n             /       \\\n
      \           /         \\\n           /           \\              +----------------------+\n
      \   +--------+      +--------+        | SIP Service Provider |\n    | Device
      |      | Device |        |                      |\n    |    A   |      |    B
      \  |        |  SIP     PDS   HTTP  |\n    +--------+      +--------+        |
      PROXY         Server |\n                                      +----------------------+\n
      \        |                                |       |      |\n         |                                |
      \      |      |\n   (A-EX)|<=Enrolls for User X's profile=>|<=====>|      |\n
      \        |                                |       |      |\n         |                                               |\n
      \  (A-RX)|<===Retrieves User X's profile================>|\n         |                                               |\n
      \        |               |                |       |      |\n         |               |
      \ Enrolls for   |       |      |\n         |         (B-EX)|<== User X's ==>|<=====>|
      \     |\n         |               |    profile     |       |      |\n         |
      \              |                |       |      |\n         |               |
      \                              |\n         |         (B-RX)|<= Retrieves User
      X's profile=>|\n         |                                               |\n
      \        |                       |                       |\n         |                 (HPut)|---------------------->|\n
      \        |                       |                       |\n         |                 (HRes)|<----------------------|\n
      \        |                                               |\n         |                                |
      \      |      |\n         |                                | NOTIFY|      |\n
      \        |            NOTIFY              |<------|      |\n   (A-NT)|<-------------------------------|
      \      |      |\n         |            200 OK              |       |      |\n
      \  (A-RS)|------------------------------->|200 OK |      |\n         |                                |------>|
      \     |\n         |                                               |\n         |
      \              |                | NOTIFY|      |\n         |               |
      \   NOTIFY      |<------|      |\n         |         (B-NT)|<---------------|
      \      |      |\n         |               |    200 OK      |       |      |\n
      \        |         (B-RS)|--------------->|200 OK |      |\n         |               |
      \               |------>|      |\n         |                                               |\n
      \        |                                               |\n   (A-RX)|<===Retrieves
      User X's profile================>|\n         |                                               |\n
      \        |               |                               |\n         |               |
      \                              |\n         |         (B-RX)|<= Retrieves User
      X's profile=>|\n         |               |                               |\n
      \  (A-EX)   Device A discovers, enrolls, and obtains notification\n            related
      to user X's profile.\n   (A-RX)   Device A retrieves user X's profile.\n   (B-EX)
      \  Device B discovers, enrolls, and obtains notification\n            related
      to user X's profile.\n   (B-RX)   Device B retrieves user X's profile.\n   (HPut)
      \  Changes affected by the user via the user interface are\n            uploaded
      to the HTTP server.\n            *  Note: The Unique Identifier (UI) itself
      can act as a\n               device and subscribe to user X's profile.  This
      is not\n               the case in the example shown.\n   (HRes)   Changes are
      accepted by the HTTP server.\n   (A-NT)   PDS transmits a NOTIFY message to
      device A indicating the\n            changed profile.  A sample message is shown
      below:\n            *  Note: Some of the fields (e.g., Via) are continued on
      a\n               separate line due to format constraints of this document.\n
      \  NOTIFY sip:userX@192.0.2.44 SIP/2.0\n   Event: ua-profile;effective-by=3600\n
      \  From: sip:userX@sip.example.net;tag=abcd\n   To: sip:userX@sip.example.net.net;tag=1234\n
      \  Call-ID: 3573853342923422@192.0.2.44\n   CSeq: 322 NOTIFY\n   Via: SIP/2.0/UDP
      192.0.2.3;\n     branch=z9hG4bK1e3effada91dc37fd5a0c95cbf6767d1\n   MIME-Version:
      1.0\n   Content-Type: message/external-body; access-type=\"URL\";\n                 expiration=\"Mon,
      01 Jan 2010 09:00:00 UTC\";\n                 URL=\"http://www.example.com/user-x-profile.html\";\n
      \                size=9999;\n                 hash=123456789AAABBBCCCDD\n   .\n
      \  .\n   .\n   (A-RS)   Device A accepts the NOTIFY and sends a 200 OK.\n   (B-NT)
      \  PDS transmits a NOTIFY message to device B indicating the\n            changed
      profile.  A sample message is shown below:\n            *  Note: Some of the
      fields (e.g., Via) are continued on a\n               separate line due to format
      constraints of this document.\n   NOTIFY sip:userX@192.0.2.43 SIP/2.0\n   Event:
      ua-profile;effective-by=3600\n   From: sip:userX@sip.example.net;tag=abce\n
      \  To: sip:userX@sip.example.net.net;tag=1234\n   Call-ID: 3573853342923422@192.0.2.43\n
      \  CSeq: 322 NOTIFY\n   Via: SIP/2.0/UDP 192.0.2.3;\n     branch=z9hG4bK1e3effada91dc37fd5a0c95cbf6767d2\n
      \  MIME-Version: 1.0\n   Content-Type: message/external-body; access-type=\"URL\";\n
      \                expiration=\"Mon, 01 Jan 2010 09:00:00 UTC\";\n                 URL=\"http://www.example.com/user-x-profile.html\";\n
      \                size=9999;\n                 hash=123456789AAABBBCCCDD\n   .\n
      \  .\n   .\n   (B-RS)   Device B accepts the NOTIFY and sends a 200 OK.\n   (A-RX)
      \  Device A retrieves the updated profile pertaining to user X.\n   (B-RX)   Device
      B retrieves the updated profile pertaining to user X.\n"
    title: '7.2.  Example 2: Device Obtaining Change Notification'
  title: 7.  Examples
- contents:
  - "8.  IANA Considerations\n   IANA has registered a SIP event package, event header
    parameters, and\n   SIP configuration profile types as outlined in the following\n
    \  subsections.\n"
  - contents:
    - "8.1.  SIP Event Package\n   This specification registers a new event package
      as defined in\n   [RFC3265].  The registration is as follows:\n   Package Name:
      \ ua-profile\n   Package or Template-Package:  This is a package\n   Published
      Document:  RFC 6080\n   Persons to Contact:  Daniel Petrie <dan.ietf@SIPez.com>,\n
      \     Sumanth Channabasappa <sumanth@cablelabs.com>\n   New event header parameters:
      \ profile-type, vendor, model, version,\n      effective-by (The profile-type
      parameter has predefined values.\n      The new event header parameters do not.)\n
      \  The following table illustrates the additions to the IANA SIP \"Header\n
      \  Field Parameters and Parameter Values\" registry:\n                                                   Predefined\n
      \  Header Field                  Parameter Name    Values      Reference\n   ----------------------------
      \ ---------------   ----------  ---------\n   Event                         profile-type
      \     Yes         [RFC6080]\n   Event                         vendor            No
      \         [RFC6080]\n   Event                         model             No          [RFC6080]\n
      \  Event                         version           No          [RFC6080]\n   Event
      \                        effective-by      No          [RFC6080]\n"
    title: 8.1.  SIP Event Package
  - contents:
    - "8.2.  Registry of SIP Configuration Profile Types\n   IANA has registered new
      SIP configuration profile types at\n   http://www.iana.org in the \"SIP Configuration
      Profile Types\"\n   registry.\n   The registration procedures are \"Specification
      Required\", as\n   explained in \"Guidelines for Writing an IANA Considerations
      Section\n   in RFCs\" ([RFC5226]).\n   Registrations with the IANA MUST include
      the profile type, and a\n   published document that describes its purpose and
      usage.\n   As this document specifies three SIP configuration profile types,
      the\n   initial IANA registration contains the information shown in the table\n
      \  below.\n         Profile Type                          Reference\n         --------------
      \                        ---------\n         local-network                          [RFC6080]\n
      \        device                                 [RFC6080]\n         user                                   [RFC6080]\n"
    title: 8.2.  Registry of SIP Configuration Profile Types
  title: 8.  IANA Considerations
- contents:
  - "9.  Security Considerations\n   The framework specified in this document specifies
    profile delivery\n   stages, an event package, and three profile types to enable
    profile\n   delivery.  The profile delivery stages are enrollment, content\n   retrieval,
    and change notification.  The event package helps with\n   enrollment and change
    notifications.  Each profile type allows for\n   profile retrieval from a PDS
    belonging to a specific provider.\n   Enrollment allows a device to request, and
    if successful, enroll with\n   a PDS to obtain profile data.  To transmit the
    request the device\n   relies on configured, cached, or discovered data.  Such
    data includes\n   provider domain names, identities, and credentials.  The device\n
    \  either uses configured outbound proxies or discovers the next-hop\n   entity
    using [RFC3263] that can result in a SIP proxy or the PDS.  It\n   then transmits
    the request.  A SIP proxy receiving the request uses\n   the Request-URI and event
    header contents to route it to a PDS (via\n   other SIP proxies, if required).\n
    \  When a PDS receives the enrollment request, it can either challenge\n   any
    contained identity or admit the enrollment.  Authorization rules\n   then decide
    if the enrollment gets accepted.  If accepted, the PDS\n   sends an initial notification
    that contains either the profile data,\n   or content indirection information.
    \ The profile data can contain\n   generic profile data (common across multiple
    devices) or information\n   specific to an entity (such as the device or a user).
    \ If specific to\n   an entity, it may contain sensitive information such as credentials.\n
    \  Disclosure of sensitive data can lead to threats such as\n   impersonation
    attacks (establishing rogue sessions), theft of service\n   (if services are obtainable),
    and zombie attacks.  It is important\n   for the device to ensure the authenticity
    of the PNC and the PCC\n   since impersonation of the SIP service provider can
    lead to DoS and\n   man-in-the-middle (MITM) attacks.\n   Profile content retrieval
    allows a device to retrieve profile data\n   via content indirection from a PCC.
    \ This communication is\n   accomplished using one of many profile delivery protocols
    or\n   frameworks, such as HTTP or HTTPS as specified in this document.\n   However,
    since the profile data returned is subject to the same\n   considerations as that
    sent via profile notification, similar threats\n   exist.  For example, DoS attacks
    (rogue devices bombard the PCC with\n   requests for a specific profile) and attempts
    to modify erroneous\n   data onto the PCC (since the location and format may be
    known).\n   Thus, for the delivery of any sensitive profile data, authentication\n
    \  of the entity requesting profile data is required.  It is also\n   important
    for the requesting entity to authenticate the profile\n   source via content indirection
    and ensure that the sensitive profile\n   data is protected via data integrity.
    \ For sensitive data that should\n   not be disclosed to unauthorized parties,
    data confidentiality is\n   also required.\n   The following subsections highlight
    the security considerations that\n   are specific to each profile type.\n"
  - contents:
    - "9.1.  Local-Network Profile\n   A local network may or may not (e.g., home
      router) support local-\n   network profiles as specified in this framework.
      \ Even if supported,\n   the PDS may only be configured with a generic local-network
      profile\n   that is provided to every device that requests the local-network\n
      \  profile.  Such a PDS may not implement any authentication\n   requirements
      or TLS.\n   Alternatively, certain deployments may require the entities -- device\n
      \  and the PDS -- to authenticate each other prior to successful profile\n   enrollment.
      \ Such networks may pre-configure user identities to the\n   devices and allow
      user-specific local-network profiles.  In such\n   networks, the PDS will support
      digest authentication, and the devices\n   are configured with user identities
      and credentials as specified in\n   Section 5.3.1.  If sensitive profile data
      is being transmitted, the\n   user identity is a SIPS URI that results in TLS
      with the next-hop\n   (which is authenticated), and digest authentication is
      used by the\n   PDS and the device.\n   This framework supports both use cases
      and any variations in between.\n   However, devices obtaining local-network
      profiles from an\n   unauthenticated PDS are cautioned against potential MITM
      or PDS\n   impersonation attacks.  This framework requires that a device reject\n
      \  sensitive data, such as credentials, from unauthenticated local-\n   network
      sources.  It also prohibits devices from responding to\n   authentication challenges
      in the absence of TLS on all hops as a\n   result of using a SIPS URI.  Responding
      to unauthenticated challenges\n   allows for dictionary attacks that can reveal
      weak passwords.  The\n   only exception to accepting such sensitive data without\n
      \  authentication of the PDS is in the case of bootstrapping (see\n   Section
      5.3.1).  In the case of bootstrapping, the methods employed\n   need to be aware
      of potential security threats such as impersonation.\n   SIP Identity is useful
      for the device to validate notifications in\n   the absence of a secure channel
      such as TLS when a SIPS URI is used.\n   In such cases, the device can validate
      the SIP Identity header to\n   verify the source of the profile notification,
      and the source of the\n   profile data when content indirection is not used.
      \ However, the\n   presence of the header does not guarantee the validity of
      the data.\n   It verifies the source and confirms data integrity, but the data\n
      \  obtained from an undesired source may still be invalid, e.g., invalid\n   outbound
      proxy information, resulting in DoS.  Thus, devices\n   requesting the local-network
      profile from unknown networks need to be\n   prepared to discard information
      that prevent retrieval of other,\n   required, profiles.\n"
    title: 9.1.  Local-Network Profile
  - contents:
    - "9.2.  Device Profile\n   Device profiles deal with device-specific configuration.
      \ They may be\n   provided to unknown devices that are attempting to obtaining
      profiles\n   for purposes such as trials, self-subscription (not to be confused\n
      \  with [RFC3265]), and emergency services [PHONEBCP].\n   This framework allows
      the device profile to be used for bootstrapping\n   a device.  Such bootstrapping
      profile data may contain enough\n   information to connect to a Provider.  For
      example, it may enable the\n   device to communicate with a device provider,
      allowing for trial or\n   self-subscription services via visual or audio interfaces
      (e.g.,\n   interactive voice response), or customer service representatives.\n
      \  The profile data may also allow the device a choice of device\n   providers
      and allow the end-user to choose one.  The profile data may\n   also contain
      identities and credentials (temporary or long-term) that\n   can be used to
      obtain further profile data from the network.  This\n   framework recommends
      the use of the SIP Identity header by the PDS.\n   However, to be able to validate
      the SIP Identity header, the device\n   needs to be pre-configured with the
      knowledge of allowable domains or\n   certificates for validation (e.g., using
      PKI).  If not, the device\n   can still guarantee header and body integrity
      if the profile data\n   contains the domain certificate (but the data can still
      be invalid or\n   malicious).  In such cases, devices supporting user interfaces
      may\n   obtain confirmation from the user trying to bootstrap the device\n   (confirming
      header and body integrity).  However, when the SIP\n   Identity header is not
      present, or the device is not capable of\n   validating it, the bootstrapping
      data is unauthenticated and obtained\n   without any integrity protection.  Such
      bootstrapping data, however,\n   may contain only temporary credentials (SIPS
      URI and digest\n   credentials) that can be used to reconnect to the network
      to ensure\n   data integrity and data confidentiality prior to obtaining long-term\n
      \  credentials.  It is to be noted that such devices are at the mercy of\n   the
      network they request the device profile from.  If they are\n   initialized in
      a rogue network, or get hijacked by a rogue PDS, the\n   end-user may be left
      without desired device operation or, worse,\n   unwanted operation.  To mitigate
      such factors the device provider may\n   communicate temporary credentials (e.g.,
      passwords that can be\n   entered via an interface) or permanent credentials
      (e.g., a USB\n   device) to the end-user for connectivity.  If such methods
      are used,\n   those credentials MUST be quickly replaced by large-entropy\n
      \  credentials, to minimize the impact of dictionary attacks.  Future\n   enhancements
      to this framework may specify device capabilities that\n   allow for authentication
      without any provider-specific configuration\n   (e.g., X.509 certificates using
      PKI can allow for authentication by\n   any provider with access to the CA certificate).
      \ Alternatively, the\n   device may be pre-configured with credentials for use
      with content\n   indirection mechanisms.  In such circumstances a PDS can use
      secure\n   content indirection mechanism, such as HTTPS, to provide the\n   bootstrapping
      data.\n   Once a device is associated with a device provider the device profile\n
      \  is vital to device operation.  This is because the device profile can\n   contain
      important operational information such as users that are to\n   be allowed access
      (white-list or black-list), user credentials (if\n   required) and other sensitive
      information.  Thus, it is necessary to\n   ensure that any device profile containing
      sensitive information is\n   obtained via an authenticated source, with integrity
      protection, and\n   delivered to an authenticated device.  For sensitive information
      such\n   as credentials, data confidentiality is also required.  The framework\n
      \  requires that devices obtain sensitive information only from\n   authenticated
      entities except while it is being bootstrapped.  In\n   cases where data confidentiality
      needs to be mandated for\n   notifications, the device provider can configure
      the device with a\n   SIPS URI, to be used as the Subscription URI, during profile\n
      \  enrollment.  The framework also requires a PDS presenting sensitive\n   profile
      data to use digest authentication.  This ensures that the\n   data is delivered
      to an authenticated entity.  Authentication of\n   profile retrieval via content
      indirection for sensitive profiles is\n   via HTTPS utilizing HTTP digest.\n"
    title: 9.2.  Device Profile
  - contents:
    - "9.3.  User Profile\n   Devices can only request user profiles for users that
      are known by a\n   SIP service provider.  PDSs are required to reject user profile\n
      \  enrollment requests for any users that are unknown in the network.\n   For
      known user AoRs that are allowed to retrieve profiles, the\n   security considerations
      are similar to that of the device profile\n   (except for bootstrapping).\n"
    title: 9.3.  User Profile
  title: 9.  Security Considerations
- contents:
  - "10.  Acknowledgements\n   The author appreciates all those who contributed and
    commented on the\n   many iterations of this document.  Detailed comments were
    provided by\n   the following individuals: Jonathan Rosenberg, Henning Schulzrinne,\n
    \  Cullen Jennings, Rohan Mahy, Rich Schaaf, Volker Hilt, Adam Roach,\n   Hisham
    Khartabil, Henry Sinnreich, Martin Dolly, John Elwell, Elliot\n   Eichen, Robert
    Liao, Dale Worley, Francois Audet, Roni Even, Jason\n   Fischl, Josh Littlefield,
    and Nhut Nguyen.\n   The final revisions of this document were a product of design
    team\n   discussions.  The editor wishes to extend special appreciation to the\n
    \  following design team members for their numerous reviews and specific\n   contributions
    to various sections: Josh Littlefield (Overview,\n   Section 6), Peter Blatherwick
    (Section 6), Cullen Jennings\n   (Security), Sam Ganesan (Section 6), and Mary
    Barnes (layout, Section\n   6).\n   The following design team members are thanked
    for numerous reviews\n   and general contributions: Martin Dolly, Jason Fischl,
    Alvin Jiang,\n   and Francois Audet.\n   The following SIPPING WG members are
    thanked for numerous reviews,\n   comments and recommendations: John Elwell, Donald
    Lukacs, Roni Even,\n   David Robbins, Shida Schubert, and Eugene Nechamkin.  The
    editor\n   would also like to extend a special thanks to the comments and\n   recommendations
    provided by the SIPPING WG, specifically Keith Drage\n   (restructuring proposal)
    and John Elwell (numerous reviews and\n   recommendations).\n   Additionally,
    appreciation is also due to Peter Koch for expert DNS\n   advice.\n   Finally,
    sincere appreciation is extended to the chairs (Mary Barnes\n   and Gonzalo Camarillo);
    the past/current Area Directors (Cullen\n   Jennings, Jon Peterson, and Robert
    Sparks) for facilitating\n   discussions, reviews, and contributions; and, the
    expert reviewers\n   from the IESG (Peter McCann, Catherine Meadows).\n"
  title: 10.  Acknowledgements
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [FIPS-180-3]  National Institute of Standards
      and Technology (NIST),\n                 \"Secure Hash Standard (SHS)\", FIPS
      PUB 180-3,\n                 October 2008.\n   [RFC2119]     Bradner, S., \"Key
      words for use in RFCs to Indicate\n                 Requirement Levels\", BCP
      14, RFC 2119, March 1997.\n   [RFC2616]     Fielding, R., Gettys, J., Mogul,
      J., Frystyk, H.,\n                 Masinter, L., Leach, P., and T. Berners-Lee,
      \"Hypertext\n                 Transfer Protocol -- HTTP/1.1\", RFC 2616, June
      1999.\n   [RFC2617]     Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence,\n
      \                S., Leach, P., Luotonen, A., and L. Stewart, \"HTTP\n                 Authentication:
      Basic and Digest Access\n                 Authentication\", RFC 2617, June 1999.\n
      \  [RFC2818]     Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.\n   [RFC3261]
      \    Rosenberg, J., Schulzrinne, H., Camarillo, G.,\n                 Johnston,
      A., Peterson, J., Sparks, R., Handley, M.,\n                 and E. Schooler,
      \"SIP: Session Initiation Protocol\",\n                 RFC 3261, June 2002.\n
      \  [RFC3263]     Rosenberg, J. and H. Schulzrinne, \"Session Initiation\n                 Protocol
      (SIP): Locating SIP Servers\", RFC 3263,\n                 June 2002.\n   [RFC3265]
      \    Roach, A., \"Session Initiation Protocol (SIP)-Specific\n                 Event
      Notification\", RFC 3265, June 2002.\n   [RFC3319]     Schulzrinne, H. and B.
      Volz, \"Dynamic Host\n                 Configuration Protocol (DHCPv6) Options
      for Session\n                 Initiation Protocol (SIP) Servers\", RFC 3319,\n
      \                July 2003.\n   [RFC3361]     Schulzrinne, H., \"Dynamic Host
      Configuration Protocol\n                 (DHCP-for-IPv4) Option for Session
      Initiation Protocol\n                 (SIP) Servers\", RFC 3361, August 2002.\n
      \  [RFC4122]     Leach, P., Mealling, M., and R. Salz, \"A Universally\n                 Unique
      IDentifier (UUID) URN Namespace\", RFC 4122,\n                 July 2005.\n
      \  [RFC4474]     Peterson, J. and C. Jennings, \"Enhancements for\n                 Authenticated
      Identity Management in the Session\n                 Initiation Protocol (SIP)\",
      RFC 4474, August 2006.\n   [RFC4483]     Burger, E., \"A Mechanism for Content
      Indirection in\n                 Session Initiation Protocol (SIP) Messages\",
      RFC 4483,\n                 May 2006.\n   [RFC4704]     Volz, B., \"The Dynamic
      Host Configuration Protocol for\n                 IPv6 (DHCPv6) Client Fully
      Qualified Domain Name (FQDN)\n                 Option\", RFC 4704, October 2006.\n
      \  [RFC5226]     Narten, T. and H. Alvestrand, \"Guidelines for Writing\n                 an
      IANA Considerations Section in RFCs\", BCP 26,\n                 RFC 5226, May
      2008.\n   [RFC5234]     Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n
      \                Specifications: ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5246]
      \    Dierks, T. and E. Rescorla, \"The Transport Layer\n                 Security
      (TLS) Protocol Version 1.2\", RFC 5246,\n                 August 2008.\n   [RFC5626]
      \    Jennings, C., Mahy, R., and F. Audet, \"Managing Client-\n                 Initiated
      Connections in the Session Initiation\n                 Protocol (SIP)\", RFC
      5626, October 2009.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [PHONEBCP]    Rosen, B. and J. Polk, \"Best
      Current Practice for\n                 Communications Services in support of
      Emergency\n                 Calling\", Work in Progress, October 2010.\n   [RFC0959]
      \    Postel, J. and J. Reynolds, \"File Transfer Protocol\",\n                 STD
      9, RFC 959, October 1985.\n   [RFC2132]     Alexander, S. and R. Droms, \"DHCP
      Options and BOOTP\n                 Vendor Extensions\", RFC 2132, March 1997.\n
      \  [RFC4510]     Zeilenga, K., \"Lightweight Directory Access Protocol\n                 (LDAP):
      Technical Specification Road Map\", RFC 4510,\n                 June 2006.\n
      \  [RFC4634]     Eastlake, D. and T. Hansen, \"US Secure Hash Algorithms\n                 (SHA
      and HMAC-SHA)\", RFC 4634, July 2006.\n   [RFC4825]     Rosenberg, J., \"The
      Extensible Markup Language (XML)\n                 Configuration Access Protocol
      (XCAP)\", RFC 4825,\n                 May 2007.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Authors' Addresses\n   Daniel Petrie\n   SIPez LLC\n   246A Park Ave\n   Arlington,
    MA  02476\n   USA\n   EMail: dan.ietf@SIPez.com\n   URI:   http://www.SIPez.com/\n
    \  Sumanth Channabasappa (editor)\n   CableLabs\n   858 Coal Creek Circle\n   Louisville,
    CO  80027\n   USA\n   EMail: sumanth@cablelabs.com\n   URI:   http://www.cablelabs.com/\n"
  title: Authors' Addresses
