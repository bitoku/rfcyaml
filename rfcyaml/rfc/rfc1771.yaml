- title: __initial_text__
  contents:
  - '                  A Border Gateway Protocol 4 (BGP-4)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document, together with its companion document, \"Application\
    \ of\n   the Border Gateway Protocol in the Internet\", define an inter-\n   autonomous\
    \ system routing protocol for the Internet.\n"
- title: 1. Acknowledgements
  contents:
  - "1. Acknowledgements\n   This document was originally published as RFC 1267 in\
    \ October 1991,\n   jointly authored by Kirk Lougheed (cisco Systems) and Yakov\
    \ Rekhter\n   (IBM).\n   We would like to express our thanks to Guy Almes (ANS),\
    \ Len Bosack\n   (cisco Systems), and Jeffrey C. Honig (Cornell University) for\
    \ their\n   contributions to the earlier version of this document.\n   We like\
    \ to explicitly thank Bob Braden (ISI) for the review of the\n   earlier version\
    \ of this document as well as his constructive and\n   valuable comments.\n  \
    \ We would also like to thank Bob Hinden, Director for Routing of the\n   Internet\
    \ Engineering Steering Group, and the team of reviewers he\n   assembled to review\
    \ the previous version (BGP-2) of this document.\n   This team, consisting of\
    \ Deborah Estrin, Milo Medin, John Moy, Radia\n   Perlman, Martha Steenstrup,\
    \ Mike St. Johns, and Paul Tsuchiya, acted\n   with a strong combination of toughness,\
    \ professionalism, and\n   courtesy.\n   This updated version of the document\
    \ is the product of the IETF IDR\n   Working Group with Yakov Rekhter and Tony\
    \ Li as editors. Certain\n   sections of the document borrowed heavily from IDRP\
    \ [7], which is the\n   OSI counterpart of BGP. For this credit should be given\
    \ to the ANSI\n   X3S3.3 group chaired by Lyman Chapin (BBN) and to Charles Kunzinger\n\
    \   (IBM Corp.) who was the IDRP editor within that group.  We would also\n  \
    \ like to thank Mike Craren (Proteon, Inc.), Dimitry Haskin (Bay\n   Networks,\
    \ Inc.), John Krawczyk (Bay Networks, Inc.), and Paul Traina\n   (cisco Systems)\
    \ for their insightful comments.\n   We would like to specially acknowledge numerous\
    \ contributions by\n   Dennis Ferguson (MCI).\n   The work of Yakov Rekhter was\
    \ supported in part by the National\n   Science Foundation under Grant Number\
    \ NCR-9219216.\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   The Border Gateway Protocol (BGP) is an inter-Autonomous\
    \ System\n   routing protocol.  It is built on experience gained with EGP as\n\
    \   defined in RFC 904 [1] and EGP usage in the NSFNET Backbone as\n   described\
    \ in RFC 1092 [2] and RFC 1093 [3].\n   The primary function of a BGP speaking\
    \ system is to exchange network\n   reachability information with other BGP systems.\
    \  This network\n   reachability information includes information on the list\
    \ of\n   Autonomous Systems (ASs) that reachability information traverses.\n \
    \  This information is sufficient to construct a graph of AS\n   connectivity\
    \ from which routing loops may be pruned and some policy\n   decisions at the\
    \ AS level may be enforced.\n   BGP-4 provides a new set of mechanisms for supporting\
    \ classless\n   interdomain routing.  These mechanisms include support for\n \
    \  advertising an IP prefix and eliminates the concept of network\n   \"class\"\
    \ within BGP.  BGP-4 also introduces mechanisms which allow\n   aggregation of\
    \ routes, including aggregation of AS paths.  These\n   changes provide support\
    \ for the proposed supernetting scheme [8, 9].\n   To characterize the set of\
    \ policy decisions that can be enforced\n   using BGP, one must focus on the rule\
    \ that a BGP speaker advertise to\n   its peers (other BGP speakers which it communicates\
    \ with) in\n   neighboring ASs only those routes that it itself uses.  This rule\n\
    \   reflects the \"hop-by-hop\" routing paradigm generally used throughout\n \
    \  the current Internet.  Note that some policies cannot be supported by\n   the\
    \ \"hop-by-hop\" routing paradigm and thus require techniques such as\n   source\
    \ routing to enforce.  For example, BGP does not enable one AS\n   to send traffic\
    \ to a neighboring AS intending that the traffic take a\n   different route from\
    \ that taken by traffic originating in the\n   neighboring AS.  On the other hand,\
    \ BGP can support any policy\n   conforming to the \"hop-by-hop\" routing paradigm.\
    \  Since the current\n   Internet uses only the \"hop-by-hop\" routing paradigm\
    \ and since BGP\n   can support any policy that conforms to that paradigm, BGP\
    \ is highly\n   applicable as an inter-AS routing protocol for the current Internet.\n\
    \   A more complete discussion of what policies can and cannot be\n   enforced\
    \ with BGP is outside the scope of this document (but refer to\n   the companion\
    \ document discussing BGP usage [5]).\n   BGP runs over a reliable transport protocol.\
    \  This eliminates the\n   need to implement explicit update fragmentation, retransmission,\n\
    \   acknowledgement, and sequencing.  Any authentication scheme used by\n   the\
    \ transport protocol may be used in addition to BGP's own\n   authentication mechanisms.\
    \  The error notification mechanism used in\n   BGP assumes that the transport\
    \ protocol supports a \"graceful\" close,\n   i.e., that all outstanding data\
    \ will be delivered before the\n   connection is closed.\n   BGP uses TCP [4]\
    \ as its transport protocol.  TCP meets BGP's\n   transport requirements and is\
    \ present in virtually all commercial\n   routers and hosts.  In the following\
    \ descriptions the phrase\n   \"transport protocol connection\" can be understood\
    \ to refer to a TCP\n   connection.  BGP uses TCP port 179 for establishing its\
    \ connections.\n   This document uses the term `Autonomous System' (AS) throughout.\
    \  The\n   classic definition of an Autonomous System is a set of routers under\n\
    \   a single technical administration, using an interior gateway protocol\n  \
    \ and common metrics to route packets within the AS, and using an\n   exterior\
    \ gateway protocol to route packets to other ASs.  Since this\n   classic definition\
    \ was developed, it has become common for a single\n   AS to use several interior\
    \ gateway protocols and sometimes several\n   sets of metrics within an AS.  The\
    \ use of the term Autonomous System\n   here stresses the fact that, even when\
    \ multiple IGPs and metrics are\n   used, the administration of an AS appears\
    \ to other ASs to have a\n   single coherent interior routing plan and presents\
    \ a consistent\n   picture of what destinations are reachable through it.\n  \
    \ The planned use of BGP in the Internet environment, including such\n   issues\
    \ as topology, the interaction between BGP and IGPs, and the\n   enforcement of\
    \ routing policy rules is presented in a companion\n   document [5].  This document\
    \ is the first of a series of documents\n   planned to explore various aspects\
    \ of BGP application.  Please send\n   comments to the BGP mailing list (bgp@ans.net).\n"
- title: 3.  Summary of Operation
  contents:
  - "3.  Summary of Operation\n   Two systems form a transport protocol connection\
    \ between one another.\n   They exchange messages to open and confirm the connection\
    \ parameters.\n   The initial data flow is the entire BGP routing table.  Incremental\n\
    \   updates are sent as the routing tables change.  BGP does not require\n   periodic\
    \ refresh of the entire BGP routing table.  Therefore, a BGP\n   speaker must\
    \ retain the current version of the entire BGP routing\n   tables of all of its\
    \ peers for the duration of the connection.\n   KeepAlive messages are sent periodically\
    \ to ensure the liveness of\n   the connection.  Notification messages are sent\
    \ in response to errors\n   or special conditions.  If a connection encounters\
    \ an error\n   condition, a notification message is sent and the connection is\n\
    \   closed.\n   The hosts executing the Border Gateway Protocol need not be routers.\n\
    \   A non-routing host could exchange routing information with routers\n   via\
    \ EGP or even an interior routing protocol.  That non-routing host\n   could then\
    \ use BGP to exchange routing information with a border\n   router in another\
    \ Autonomous System.  The implications and\n   applications of this architecture\
    \ are for further study.\n   If a particular AS has multiple BGP speakers and\
    \ is providing transit\n   service for other ASs, then care must be taken to ensure\
    \ a consistent\n   view of routing within the AS.  A consistent view of the interior\n\
    \   routes of the AS is provided by the interior routing protocol.  A\n   consistent\
    \ view of the routes exterior to the AS can be provided by\n   having all BGP\
    \ speakers within the AS maintain direct BGP connections\n   with each other.\
    \  Using a common set of policies, the BGP speakers\n   arrive at an agreement\
    \ as to which border routers will serve as\n   exit/entry points for particular\
    \ destinations outside the AS.  This\n   information is communicated to the AS's\
    \ internal routers, possibly\n   via the interior routing protocol.  Care must\
    \ be taken to ensure that\n   the interior routers have all been updated with\
    \ transit information\n   before the BGP speakers announce to other ASs that transit\
    \ service is\n   being provided.\n   Connections between BGP speakers of different\
    \ ASs are referred to as\n   \"external\" links.  BGP connections between BGP\
    \ speakers within the\n   same AS are referred to as \"internal\" links.  Similarly,\
    \ a peer in a\n   different AS is referred to as an external peer, while a peer\
    \ in the\n   same AS may be described as an internal peer.\n"
- title: '3.1 Routes: Advertisement and Storage'
  contents:
  - "3.1 Routes: Advertisement and Storage\n   For purposes of this protocol a route\
    \ is defined as a unit of\n   information that pairs a destination with the attributes\
    \ of a path to\n   that destination:\n      - Routes are advertised between a\
    \ pair of BGP speakers in UPDATE\n      messages:  the destination is the systems\
    \ whose IP addresses are\n      reported in the Network Layer Reachability Information\
    \ (NLRI)\n      field, and the the path is the information reported in the path\n\
    \      attributes fields of the same UPDATE message.\n      - Routes are stored\
    \ in the Routing Information Bases (RIBs):\n      namely, the Adj-RIBs-In, the\
    \ Loc-RIB, and the Adj-RIBs-Out. Routes\n      that will be advertised to other\
    \ BGP speakers must be present in\n      the Adj-RIB-Out; routes that will be\
    \ used by the local BGP speaker\n      must be present in the Loc-RIB, and the\
    \ next hop for each of these\n      routes must be present in the local BGP speaker's\
    \ forwarding\n      information base; and routes that are received from other\
    \ BGP\n      speakers are present in the Adj-RIBs-In.\n   If a BGP speaker chooses\
    \ to advertise the route, it may add to or\n   modify the path attributes of the\
    \ route before advertising it to a\n   peer.\n   BGP provides mechanisms by which\
    \ a BGP speaker can inform its peer\n   that a previously advertised route is\
    \ no longer available for use.\n   There are three methods by which a given BGP\
    \ speaker can indicate\n   that a route has been withdrawn from service:\n   \
    \   a) the IP prefix that expresses destinations for a previously\n      advertised\
    \ route can be advertised in the WITHDRAWN ROUTES field\n      in the UPDATE message,\
    \ thus marking the associated route as being\n      no longer available for use\n\
    \      b) a replacement route with the same Network Layer Reachability\n     \
    \ Information can be advertised, or\n      c) the BGP speaker - BGP speaker connection\
    \ can be closed, which\n      implicitly removes from service all routes which\
    \ the pair of\n      speakers had advertised to each other.\n"
- title: 3.2 Routing Information Bases
  contents:
  - "3.2 Routing Information Bases\n   The Routing Information Base (RIB) within a\
    \ BGP speaker consists of\n   three distinct parts:\n      a) Adj-RIBs-In: The\
    \ Adj-RIBs-In store routing information that has\n      been learned from inbound\
    \ UPDATE messages. Their contents\n      represent routes that are available as\
    \ an input to the Decision\n      Process.\n      b) Loc-RIB: The Loc-RIB contains\
    \ the local routing information\n      that the BGP speaker has selected by applying\
    \ its local policies\n      to the routing information contained in its Adj-RIBs-In.\n\
    \      c) Adj-RIBs-Out: The Adj-RIBs-Out store the information that the\n    \
    \  local BGP speaker has selected for advertisement to its peers. The\n      routing\
    \ information stored in the Adj-RIBs-Out will be carried in\n      the local BGP\
    \ speaker's UPDATE messages and advertised to its\n      peers.\n   In summary,\
    \ the Adj-RIBs-In contain unprocessed routing information\n   that has been advertised\
    \ to the local BGP speaker by its peers; the\n   Loc-RIB contains the routes that\
    \ have been selected by the local BGP\n   speaker's Decision Process; and the\
    \ Adj-RIBs-Out organize the routes\n   for advertisement to specific peers by\
    \ means of the local speaker's\n   UPDATE messages.\n   Although the conceptual\
    \ model distinguishes between Adj-RIBs-In,\n   Loc-RIB, and Adj-RIBs-Out, this\
    \ neither implies nor requires that an\n   implementation must maintain three\
    \ separate copies of the routing\n   information. The choice of implementation\
    \ (for example, 3 copies of\n   the information vs 1 copy with pointers) is not\
    \ constrained by the\n   protocol.\n"
- title: 4.  Message Formats
  contents:
  - "4.  Message Formats\n   This section describes message formats used by BGP.\n\
    \   Messages are sent over a reliable transport protocol connection.  A\n   message\
    \ is processed only after it is entirely received.  The maximum\n   message size\
    \ is 4096 octets.  All implementations are required to\n   support this maximum\
    \ message size.  The smallest message that may be\n   sent consists of a BGP header\
    \ without a data portion, or 19 octets.\n"
- title: 4.1 Message Header Format
  contents:
  - "4.1 Message Header Format\n   Each message has a fixed-size header.  There may\
    \ or may not be a data\n   portion following the header, depending on the message\
    \ type.  The\n   layout of these fields is shown below:\n       0            \
    \       1                   2                   3\n       0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   +                                                               +\n      |\
    \                                                               |\n      +   \
    \                                                            +\n      |      \
    \                     Marker                              |\n      +         \
    \                                                      +\n      |            \
    \                                                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Length               |      Type     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Marker:\n         This 16-octet field contains a value that the receiver\
    \ of the\n         message can predict.  If the Type of the message is OPEN, or\
    \ if\n         the OPEN message carries no Authentication Information (as an\n\
    \         Optional Parameter), then the Marker must be all ones.\n         Otherwise,\
    \ the value of the marker can be predicted by some a\n         computation specified\
    \ as part of the authentication mechanism\n         (which is specified as part\
    \ of the Authentication Information)\n         used.  The Marker can be used to\
    \ detect loss of synchronization\n         between a pair of BGP peers, and to\
    \ authenticate incoming BGP\n         messages.\n      Length:\n         This\
    \ 2-octet unsigned integer indicates the total length of the\n         message,\
    \ including the header, in octets.  Thus, e.g., it\n         allows one to locate\
    \ in the transport-level stream the (Marker\n         field of the) next message.\
    \  The value of the Length field must\n         always be at least 19 and no greater\
    \ than 4096, and may be\n         further constrained, depending on the message\
    \ type.  No\n         \"padding\" of extra data after the message is allowed,\
    \ so the\n         Length field must have the smallest value required given the\n\
    \         rest of the message.\n      Type:\n         This 1-octet unsigned integer\
    \ indicates the type code of the\n         message.  The following type codes\
    \ are defined:\n                                    1 - OPEN\n               \
    \                     2 - UPDATE\n                                    3 - NOTIFICATION\n\
    \                                    4 - KEEPALIVE\n"
- title: 4.2 OPEN Message Format
  contents:
  - "4.2 OPEN Message Format\n   After a transport protocol connection is established,\
    \ the first\n   message sent by each side is an OPEN message.  If the OPEN message\
    \ is\n   acceptable, a KEEPALIVE message confirming the OPEN is sent back.\n \
    \  Once the OPEN is confirmed, UPDATE, KEEPALIVE, and NOTIFICATION\n   messages\
    \ may be exchanged.\n   In addition to the fixed-size BGP header, the OPEN message\
    \ contains\n   the following fields:\n        0                   1          \
    \         2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+\n       |    Version   \
    \ |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |     My Autonomous System\
    \      |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |           Hold Time\
    \           |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                         BGP Identifier                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   | Opt Parm Len  |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                                                               |\n  \
    \     |                       Optional Parameters                     |\n    \
    \   |                                                               |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Version:\n\
    \         This 1-octet unsigned integer indicates the protocol version\n     \
    \    number of the message.  The current BGP version number is 4.\n      My Autonomous\
    \ System:\n         This 2-octet unsigned integer indicates the Autonomous System\n\
    \         number of the sender.\n      Hold Time:\n         This 2-octet unsigned\
    \ integer indicates the number of seconds\n         that the sender proposes for\
    \ the value of the Hold Timer.  Upon\n         receipt of an OPEN message, a BGP\
    \ speaker MUST calculate the\n         value of the Hold Timer by using the smaller\
    \ of its configured\n         Hold Time and the Hold Time received in the OPEN\
    \ message.  The\n         Hold Time MUST be either zero or at least three seconds.\
    \  An\n         implementation may reject connections on the basis of the Hold\n\
    \         Time.  The calculated value indicates the maximum number of\n      \
    \   seconds that may elapse between the receipt of successive\n         KEEPALIVE,\
    \ and/or UPDATE messages by the sender.\n      BGP Identifier:\n         This\
    \ 4-octet unsigned integer indicates the BGP Identifier of\n         the sender.\
    \ A given BGP speaker sets the value of its BGP\n         Identifier to an IP\
    \ address assigned to that BGP speaker.  The\n         value of the BGP Identifier\
    \ is determined on startup and is the\n         same for every local interface\
    \ and every BGP peer.\n      Optional Parameters Length:\n         This 1-octet\
    \ unsigned integer indicates the total length of the\n         Optional Parameters\
    \ field in octets. If the value of this field\n         is zero, no Optional Parameters\
    \ are present.\n      Optional Parameters:\n         This field may contain a\
    \ list of optional parameters, where\n         each parameter is encoded as a\
    \ <Parameter Type, Parameter\n         Length, Parameter Value> triplet.\n   \
    \       0                   1\n          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   \
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...\n         |  Parm. Type   |\
    \ Parm. Length  |  Parameter Value (variable)\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...\n\
    \         Parameter Type is a one octet field that unambiguously\n         identifies\
    \ individual parameters. Parameter Length is a one\n         octet field that\
    \ contains the length of the Parameter Value\n         field in octets.  Parameter\
    \ Value is a variable length field\n         that is interpreted according to\
    \ the value of the Parameter\n         Type field.\n         This document defines\
    \ the following Optional Parameters:\n         a) Authentication Information (Parameter\
    \ Type 1):\n            This optional parameter may be used to authenticate a\
    \ BGP\n            peer. The Parameter Value field contains a 1-octet\n      \
    \      Authentication Code followed by a variable length\n            Authentication\
    \ Data.\n                0 1 2 3 4 5 6 7 8\n                +-+-+-+-+-+-+-+-+\n\
    \                |  Auth. Code   |\n                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                |                                                     |\n   \
    \             |              Authentication Data                    |\n      \
    \          |                                                     |\n         \
    \       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            \
    \   Authentication Code:\n                  This 1-octet unsigned integer indicates\
    \ the\n                  authentication mechanism being used.  Whenever an\n \
    \                 authentication mechanism is specified for use within\n     \
    \             BGP, three things must be included in the\n                  specification:\n\
    \                  - the value of the Authentication Code which indicates\n  \
    \                use of the mechanism,\n                  - the form and meaning\
    \ of the Authentication Data, and\n                  - the algorithm for computing\
    \ values of Marker fields.\n                  Note that a separate authentication\
    \ mechanism may be\n                  used in establishing the transport level\
    \ connection.\n               Authentication Data:\n                  The form\
    \ and meaning of this field is a variable-\n                  length field depend\
    \ on the Authentication Code.\n         The minimum length of the OPEN message\
    \ is 29 octets (including\n         message header).\n"
- title: 4.3 UPDATE Message Format
  contents:
  - "4.3 UPDATE Message Format\n   UPDATE messages are used to transfer routing information\
    \ between BGP\n   peers.  The information in the UPDATE packet can be used to\
    \ construct\n   a graph describing the relationships of the various Autonomous\n\
    \   Systems.  By applying rules to be discussed, routing information\n   loops\
    \ and some other anomalies may be detected and removed from\n   inter-AS routing.\n\
    \   An UPDATE message is used to advertise a single feasible route to a\n   peer,\
    \ or to withdraw multiple unfeasible routes from service (see\n   3.1). An UPDATE\
    \ message may simultaneously advertise a feasible route\n   and withdraw multiple\
    \ unfeasible routes from service.  The UPDATE\n   message always includes the\
    \ fixed-size BGP header, and can optionally\n   include the other fields as shown\
    \ below:\n      +-----------------------------------------------------+\n    \
    \  |   Unfeasible Routes Length (2 octets)               |\n      +-----------------------------------------------------+\n\
    \      |  Withdrawn Routes (variable)                        |\n      +-----------------------------------------------------+\n\
    \      |   Total Path Attribute Length (2 octets)            |\n      +-----------------------------------------------------+\n\
    \      |    Path Attributes (variable)                       |\n      +-----------------------------------------------------+\n\
    \      |   Network Layer Reachability Information (variable) |\n      +-----------------------------------------------------+\n\
    \      Unfeasible Routes Length:\n         This 2-octets unsigned integer indicates\
    \ the total length of\n         the Withdrawn Routes field in octets.  Its value\
    \ must allow the\n         length of the Network Layer Reachability Information\
    \ field to\n         be determined as specified below.\n         A value of 0\
    \ indicates that no routes are being withdrawn from\n         service, and that\
    \ the WITHDRAWN ROUTES field is not present in\n         this UPDATE message.\n\
    \      Withdrawn Routes:\n         This is a variable length field that contains\
    \ a list of IP\n         address prefixes for the routes that are being withdrawn\
    \ from\n         service.  Each IP address prefix is encoded as a 2-tuple of the\n\
    \         form <length, prefix>, whose fields are described below:\n         \
    \         +---------------------------+\n                  |   Length (1 octet)\
    \        |\n                  +---------------------------+\n                \
    \  |   Prefix (variable)       |\n                  +---------------------------+\n\
    \         The use and the meaning of these fields are as follows:\n         a)\
    \ Length:\n            The Length field indicates the length in bits of the IP\n\
    \            address prefix. A length of zero indicates a prefix that\n      \
    \      matches all IP addresses (with prefix, itself, of zero\n            octets).\n\
    \         b) Prefix:\n            The Prefix field contains IP address prefixes\
    \ followed by\n            enough trailing bits to make the end of the field fall\
    \ on an\n            octet boundary. Note that the value of trailing bits is\n\
    \            irrelevant.\n      Total Path Attribute Length:\n         This 2-octet\
    \ unsigned integer indicates the total length of the\n         Path Attributes\
    \ field in octets.  Its value must allow the\n         length of the Network Layer\
    \ Reachability field to be determined\n         as specified below.\n        \
    \ A value of 0 indicates that no Network Layer Reachability\n         Information\
    \ field is present in this UPDATE message.\n      Path Attributes:\n         A\
    \ variable length sequence of path attributes is present in\n         every UPDATE.\
    \  Each path attribute is a triple <attribute type,\n         attribute length,\
    \ attribute value> of variable length.\n         Attribute Type is a two-octet\
    \ field that consists of the\n         Attribute Flags octet followed by the Attribute\
    \ Type Code\n         octet.\n                0                   1\n        \
    \        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               |  Attr. Flags  |Attr. Type Code|\n               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         The high-order bit (bit 0) of the Attribute Flags octet is the\n   \
    \      Optional bit.  It defines whether the attribute is optional (if\n     \
    \    set to 1) or well-known (if set to 0).\n         The second high-order bit\
    \ (bit 1) of the Attribute Flags octet\n         is the Transitive bit.  It defines\
    \ whether an optional\n         attribute is transitive (if set to 1) or non-transitive\
    \ (if set\n         to 0).  For well-known attributes, the Transitive bit must\
    \ be\n         set to 1.  (See Section 5 for a discussion of transitive\n    \
    \     attributes.)\n         The third high-order bit (bit 2) of the Attribute\
    \ Flags octet\n         is the Partial bit.  It defines whether the information\n\
    \         contained in the optional transitive attribute is partial (if\n    \
    \     set to 1) or complete (if set to 0).  For well-known attributes\n      \
    \   and for optional non-transitive attributes the Partial bit must\n        \
    \ be set to 0.\n         The fourth high-order bit (bit 3) of the Attribute Flags\
    \ octet\n         is the Extended Length bit.  It defines whether the Attribute\n\
    \         Length is one octet (if set to 0) or two octets (if set to 1).\n   \
    \      Extended Length may be used only if the length of the attribute\n     \
    \    value is greater than 255 octets.\n         The lower-order four bits of\
    \ the Attribute Flags octet are .\n         unused. They must be zero (and must\
    \ be ignored when received).\n         The Attribute Type Code octet contains\
    \ the Attribute Type Code.\n         Currently defined Attribute Type Codes are\
    \ discussed in Section\n         5.\n         If the Extended Length bit of the\
    \ Attribute Flags octet is set\n         to 0, the third octet of the Path Attribute\
    \ contains the length\n         of the attribute data in octets.\n         If\
    \ the Extended Length bit of the Attribute Flags octet is set\n         to 1,\
    \ then the third and the fourth octets of the path\n         attribute contain\
    \ the length of the attribute data in octets.\n         The remaining octets of\
    \ the Path Attribute represent the\n         attribute value and are interpreted\
    \ according to the Attribute\n         Flags and the Attribute Type Code. The\
    \ supported Attribute Type\n         Codes, their attribute values and uses are\
    \ the following:\n         a)   ORIGIN (Type Code 1):\n            ORIGIN is a\
    \ well-known mandatory attribute that defines the\n            origin of the path\
    \ information.   The data octet can assume\n            the following values:\n\
    \                  Value      Meaning\n                  0         IGP - Network\
    \ Layer Reachability Information\n                               is interior to\
    \ the originating AS\n                  1         EGP - Network Layer Reachability\
    \ Information\n                               learned via EGP\n              \
    \    2         INCOMPLETE - Network Layer Reachability\n                     \
    \          Information learned by some other means\n            Its usage is defined\
    \ in 5.1.1\n         b) AS_PATH (Type Code 2):\n            AS_PATH is a well-known\
    \ mandatory attribute that is composed\n            of a sequence of AS path segments.\
    \ Each AS path segment is\n            represented by a triple <path segment type,\
    \ path segment\n            length, path segment value>.\n            The path\
    \ segment type is a 1-octet long field with the\n            following values\
    \ defined:\n                  Value      Segment Type\n                  1   \
    \      AS_SET: unordered set of ASs a route in the\n                         \
    \      UPDATE message has traversed\n                  2         AS_SEQUENCE:\
    \ ordered set of ASs a route in\n                               the UPDATE message\
    \ has traversed\n            The path segment length is a 1-octet long field containing\n\
    \            the number of ASs in the path segment value field.\n            The\
    \ path segment value field contains one or more AS\n            numbers, each\
    \ encoded as a 2-octets long field.\n            Usage of this attribute is defined\
    \ in 5.1.2.\n         c)   NEXT_HOP (Type Code 3):\n            This is a well-known\
    \ mandatory attribute that defines the IP\n            address of the border router\
    \ that should be used as the next\n            hop to the destinations listed\
    \ in the Network Layer\n            Reachability field of the UPDATE message.\n\
    \            Usage of this attribute is defined in 5.1.3.\n         d) MULTI_EXIT_DISC\
    \ (Type Code 4):\n            This is an optional non-transitive attribute that\
    \ is a four\n            octet non-negative integer. The value of this attribute\
    \ may\n            be used by a BGP speaker's decision process to discriminate\n\
    \            among multiple exit points to a neighboring autonomous\n        \
    \    system.\n            Its usage is defined in 5.1.4.\n         e) LOCAL_PREF\
    \ (Type Code 5):\n            LOCAL_PREF is a well-known discretionary attribute\
    \ that is a\n            four octet non-negative integer. It is used by a BGP\
    \ speaker\n            to inform other BGP speakers in its own autonomous system\
    \ of\n            the originating speaker's degree of preference for an\n    \
    \        advertised route. Usage of this attribute is described in\n         \
    \   5.1.5.\n         f) ATOMIC_AGGREGATE (Type Code 6)\n            ATOMIC_AGGREGATE\
    \ is a well-known discretionary attribute of\n            length 0. It is used\
    \ by a BGP speaker to inform other BGP\n            speakers that the local system\
    \ selected a less specific\n            route without selecting a more specific\
    \ route which is\n            included in it. Usage of this attribute is described\
    \ in\n            5.1.6.\n         g) AGGREGATOR (Type Code 7)\n            AGGREGATOR\
    \ is an optional transitive attribute of length 6.\n            The attribute\
    \ contains the last AS number that formed the\n            aggregate route (encoded\
    \ as 2 octets), followed by the IP\n            address of the BGP speaker that\
    \ formed the aggregate route\n            (encoded as 4 octets).  Usage of this\
    \ attribute is described\n            in 5.1.7\n      Network Layer Reachability\
    \ Information:\n         This variable length field contains a list of IP address\n\
    \         prefixes.  The length in octets of the Network Layer\n         Reachability\
    \ Information is not encoded explicitly, but can be\n         calculated as:\n\
    \            UPDATE message Length - 23 - Total Path Attributes Length -\n   \
    \         Unfeasible Routes Length\n         where UPDATE message Length is the\
    \ value encoded in the fixed-\n         size BGP header, Total Path Attribute\
    \ Length and Unfeasible\n         Routes Length  are the values encoded in the\
    \ variable part of\n         the UPDATE message, and 23 is a combined length of\
    \ the fixed-\n         size BGP header, the Total Path Attribute Length field\
    \ and the\n         Unfeasible Routes Length field.\n         Reachability information\
    \ is encoded as one or more 2-tuples of\n         the form <length, prefix>, whose\
    \ fields are described below:\n                  +---------------------------+\n\
    \                  |   Length (1 octet)        |\n                  +---------------------------+\n\
    \                  |   Prefix (variable)       |\n                  +---------------------------+\n\
    \         The use and the meaning of these fields are as follows:\n         a)\
    \ Length:\n            The Length field indicates the length in bits of the IP\n\
    \            address prefix. A length of zero indicates a prefix that\n      \
    \      matches all IP addresses (with prefix, itself, of zero\n            octets).\n\
    \         b) Prefix:\n            The Prefix field contains IP address prefixes\
    \ followed by\n            enough trailing bits to make the end of the field fall\
    \ on an\n            octet boundary. Note that the value of the trailing bits\
    \ is\n            irrelevant.\n   The minimum length of the UPDATE message is\
    \ 23 octets -- 19 octets\n   for the fixed header + 2 octets for the Unfeasible\
    \ Routes Length + 2\n   octets for the Total Path Attribute Length (the value\
    \ of Unfeasible\n   Routes Length is 0  and the value of Total Path Attribute\
    \ Length is\n   0).\n   An UPDATE message can advertise at most one route, which\
    \ may be\n   described by several path attributes. All path attributes contained\n\
    \   in a given UPDATE messages apply to the destinations carried in the\n   Network\
    \ Layer Reachability Information field of the UPDATE message.\n   An UPDATE message\
    \ can list multiple routes to be withdrawn from\n   service.  Each such route\
    \ is identified by its destination (expressed\n   as an IP prefix), which unambiguously\
    \ identifies the route in the\n   context of the BGP speaker - BGP speaker connection\
    \ to which it has\n   been previously been advertised.\n   An UPDATE message may\
    \ advertise only routes to be withdrawn from\n   service, in which case it will\
    \ not include path attributes or Network\n   Layer Reachability Information. Conversely,\
    \ it may advertise only a\n   feasible route, in which case the WITHDRAWN ROUTES\
    \ field need not be\n   present.\n"
- title: 4.4 KEEPALIVE Message Format
  contents:
  - "4.4 KEEPALIVE Message Format\n   BGP does not use any transport protocol-based\
    \ keep-alive mechanism to\n   determine if peers are reachable.  Instead, KEEPALIVE\
    \ messages are\n   exchanged between peers often enough as not to cause the Hold\
    \ Timer\n   to expire.  A reasonable maximum time between KEEPALIVE messages\n\
    \   would be one third of the Hold Time interval.  KEEPALIVE messages\n   MUST\
    \ NOT be sent more frequently than one per second.  An\n   implementation MAY\
    \ adjust the rate at which it sends KEEPALIVE\n   messages as a function of the\
    \ Hold Time interval.\n   If the negotiated Hold Time interval is zero, then periodic\
    \ KEEPALIVE\n   messages MUST NOT be sent.\n   KEEPALIVE message consists of only\
    \ message header and has a length of\n   19 octets.\n"
- title: 4.5 NOTIFICATION Message Format
  contents:
  - "4.5 NOTIFICATION Message Format\n   A NOTIFICATION message is sent when an error\
    \ condition is detected.\n   The BGP connection is closed immediately after sending\
    \ it.\n   In addition to the fixed-size BGP header, the NOTIFICATION message\n\
    \   contains the following fields:\n        0                   1            \
    \       2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       | Error code    | Error subcode |           Data                |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\n    \
    \   |                                                               |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Error\
    \ Code:\n         This 1-octet unsigned integer indicates the type of\n      \
    \   NOTIFICATION.  The following Error Codes have been defined:\n            Error\
    \ Code       Symbolic Name               Reference\n              1         Message\
    \ Header Error             Section 6.1\n              2         OPEN Message Error\
    \               Section 6.2\n              3         UPDATE Message Error    \
    \         Section 6.3\n              4         Hold Timer Expired            \
    \   Section 6.5\n              5         Finite State Machine Error       Section\
    \ 6.6\n              6         Cease                            Section 6.7\n\
    \      Error subcode:\n         This 1-octet unsigned integer provides more specific\n\
    \         information about the nature of the reported error.  Each Error\n  \
    \       Code may have one or more Error Subcodes associated with it.\n       \
    \  If no appropriate Error Subcode is defined, then a zero\n         (Unspecific)\
    \ value is used for the Error Subcode field.\n         Message Header Error subcodes:\n\
    \                               1  - Connection Not Synchronized.\n          \
    \                     2  - Bad Message Length.\n                             \
    \  3  - Bad Message Type.\n         OPEN Message Error subcodes:\n           \
    \                    1  - Unsupported Version Number.\n                      \
    \         2  - Bad Peer AS.\n                               3  - Bad BGP Identifier.\
    \ '\n         4  - Unsupported Optional Parameter.\n                         \
    \      5  - Authentication Failure.\n                                        \
    \   6  - Unacceptable Hold Time.\n         UPDATE Message Error subcodes:\n  \
    \                             1 - Malformed Attribute List.\n                \
    \               2 - Unrecognized Well-known Attribute.\n                     \
    \          3 - Missing Well-known Attribute.\n                               4\
    \ - Attribute Flags Error.\n                               5 - Attribute Length\
    \ Error.\n                               6 - Invalid ORIGIN Attribute\n      \
    \                         7 - AS Routing Loop.\n                             \
    \  8 - Invalid NEXT_HOP Attribute.\n                               9 - Optional\
    \ Attribute Error.\n                              10 - Invalid Network Field.\n\
    \                              11 - Malformed AS_PATH.\n      Data:\n        \
    \ This variable-length field is used to diagnose the reason for\n         the\
    \ NOTIFICATION.  The contents of the Data field depend upon\n         the Error\
    \ Code and Error Subcode.  See Section 6 below for more\n         details.\n \
    \        Note that the length of the Data field can be determined from\n     \
    \    the message Length field by the formula:\n                  Message Length\
    \ = 21 + Data Length\n   The minimum length of the NOTIFICATION message is 21\
    \ octets\n   (including message header).\n"
- title: 5.  Path Attributes
  contents:
  - "5.  Path Attributes\n   This section discusses the path attributes of the UPDATE\
    \ message.\n   Path attributes fall into four separate categories:\n         \
    \      1. Well-known mandatory.\n               2. Well-known discretionary.\n\
    \               3. Optional transitive.\n               4. Optional non-transitive.\n\
    \   Well-known attributes must be recognized by all BGP implementations.\n   Some\
    \ of these attributes are mandatory and must be included in every\n   UPDATE message.\
    \  Others are discretionary and may or may not be sent\n   in a particular UPDATE\
    \ message.\n   All well-known attributes must be passed along (after proper\n\
    \   updating, if necessary) to other BGP peers.\n   In addition to well-known\
    \ attributes, each path may contain one or\n   more optional attributes.  It is\
    \ not required or expected that all\n   BGP implementations support all optional\
    \ attributes.  The handling of\n   an unrecognized optional attribute is determined\
    \ by the setting of\n   the Transitive bit in the attribute flags octet.  Paths\
    \ with\n   unrecognized transitive optional attributes should be accepted. If\
    \ a\n   path with unrecognized transitive optional attribute is accepted and\n\
    \   passed along to other BGP peers, then the unrecognized transitive\n   optional\
    \ attribute of that path must be passed along with the path to\n   other BGP peers\
    \ with the Partial bit in the Attribute Flags octet set\n   to 1. If a path with\
    \ recognized transitive optional attribute is\n   accepted and passed along to\
    \ other BGP peers and the Partial bit in\n   the Attribute Flags octet is set\
    \ to 1 by some previous AS, it is not\n   set back to 0 by the current AS. Unrecognized\
    \ non-transitive optional\n   attributes must be quietly ignored and not passed\
    \ along to other BGP\n   peers.\n   New transitive optional attributes may be\
    \ attached to the path by the\n   originator or by any other AS in the path. \
    \ If they are not attached\n   by the originator, the Partial bit in the Attribute\
    \ Flags octet is\n   set to 1.  The rules for attaching new non-transitive optional\n\
    \   attributes will depend on the nature of the specific attribute.  The\n   documentation\
    \ of each new non-transitive optional attribute will be\n   expected to include\
    \ such rules.  (The description of the\n   MULTI_EXIT_DISC attribute gives an\
    \ example.)  All optional attributes\n   (both transitive and non-transitive)\
    \ may be updated (if appropriate)\n   by ASs in the path.\n   The sender of an\
    \ UPDATE message should order path attributes within\n   the UPDATE message in\
    \ ascending order of attribute type.  The\n   receiver of an UPDATE message must\
    \ be prepared to handle path\n   attributes within the UPDATE message that are\
    \ out of order.\n   The same attribute cannot appear more than once within the\
    \ Path\n   Attributes field of a particular UPDATE message.\n"
- title: 5.1 Path Attribute Usage
  contents:
  - "5.1 Path Attribute Usage\n   The usage of each BGP path attributes is described\
    \ in the following\n   clauses.\n"
- title: 5.1.1 ORIGIN
  contents:
  - "5.1.1 ORIGIN\n   ORIGIN is a well-known mandatory attribute.  The ORIGIN attribute\n\
    \   shall be generated by the autonomous system that originates the\n   associated\
    \ routing information. It shall be included in the UPDATE\n   messages of all\
    \ BGP speakers that choose to propagate this\n   information to other BGP speakers.\n"
- title: 5.1.2   AS_PATH
  contents:
  - "5.1.2   AS_PATH\n   AS_PATH is a well-known mandatory attribute. This attribute\n\
    \   identifies the autonomous systems through which routing information\n   carried\
    \ in this UPDATE message has passed. The components of this\n   list can be AS_SETs\
    \ or AS_SEQUENCEs.\n   When a BGP speaker propagates a route which it has learned\
    \ from\n   another BGP speaker's UPDATE message, it shall modify the route's\n\
    \   AS_PATH attribute based on the location of the BGP speaker to which\n   the\
    \ route will be sent:\n      a) When a given BGP speaker advertises the route\
    \ to another BGP\n      speaker located in its own autonomous system, the advertising\n\
    \      speaker shall not modify the AS_PATH attribute associated with the\n  \
    \    route.\n      b) When a given BGP speaker advertises the route to a BGP speaker\n\
    \      located in a neighboring autonomous system, then the advertising\n    \
    \  speaker shall update the AS_PATH attribute as follows:\n         1) if the\
    \ first path segment of the AS_PATH is of type\n         AS_SEQUENCE, the local\
    \ system shall prepend its own AS number\n         as the last element of the\
    \ sequence (put it in the leftmost\n         position).\n         2) if the first\
    \ path segment of the AS_PATH is of type AS_SET,\n         the local system shall\
    \ prepend a new path segment of type\n         AS_SEQUENCE to the AS_PATH, including\
    \ its own AS number in that\n         segment.\n      When a BGP speaker originates\
    \ a route then:\n         a) the originating speaker shall include its own AS\
    \ number in\n         the AS_PATH attribute of all UPDATE messages sent to BGP\n\
    \         speakers located in neighboring autonomous systems. (In this\n     \
    \    case, the AS number of the originating speaker's autonomous\n         system\
    \ will be the only entry in the AS_PATH attribute).\n         b) the originating\
    \ speaker shall include an empty AS_PATH\n         attribute in all UPDATE messages\
    \ sent to BGP speakers located\n         in its own autonomous system. (An empty\
    \ AS_PATH attribute is\n         one whose length field contains the value zero).\n"
- title: 5.1.3 NEXT_HOP
  contents:
  - "5.1.3 NEXT_HOP\n   The NEXT_HOP path attribute defines the IP address of the\
    \ border\n   router that should be used as the next hop to the destinations listed\n\
    \   in the UPDATE message.  If a border router belongs to the same AS as\n   its\
    \ peer, then the peer is an internal border router. Otherwise, it\n   is an external\
    \ border router.  A BGP speaker can advertise any\n   internal border router as\
    \ the next hop provided that the interface\n   associated with the IP address\
    \ of this border router (as specified in\n   the NEXT_HOP path attribute) shares\
    \ a common subnet with both the\n   local and remote BGP speakers. A BGP speaker\
    \ can advertise any\n   external border router as the next hop, provided that\
    \ the IP address\n   of this border router was learned from one of the BGP speaker's\n\
    \   peers, and the interface associated with the IP address of this\n   border\
    \ router (as specified in the NEXT_HOP path attribute) shares a\n   common subnet\
    \ with the local and remote BGP speakers.  A BGP speaker\n   needs to be able\
    \ to support disabling advertisement of external\n   border routers.\n   A BGP\
    \ speaker must never advertise an address of a peer to that peer\n   as a NEXT_HOP,\
    \ for a route that the speaker is originating.  A BGP\n   speaker must never install\
    \ a route with itself as the next hop.\n   When a BGP speaker advertises the route\
    \ to a BGP speaker located in\n   its own autonomous system, the advertising speaker\
    \ shall not modify\n   the NEXT_HOP attribute associated with the route.  When\
    \ a BGP speaker\n   receives the route via an internal link, it may forward packets\
    \ to\n   the NEXT_HOP address if the address contained in the attribute is on\n\
    \   a common subnet with the local and remote BGP speakers.\n"
- title: 5.1.4   MULTI_EXIT_DISC
  contents:
  - "5.1.4   MULTI_EXIT_DISC\n   The MULTI_EXIT_DISC attribute may be used on external\
    \ (inter-AS)\n   links to discriminate among multiple exit or entry points to\
    \ the same\n   neighboring AS.  The value of the MULTI_EXIT_DISC attribute is\
    \ a four\n   octet unsigned number which is called a metric.  All other factors\n\
    \   being equal, the exit or entry point with lower metric should be\n   preferred.\
    \  If received over external links, the MULTI_EXIT_DISC\n   attribute may be propagated\
    \ over internal links to other BGP speakers\n   within the same AS.  The MULTI_EXIT_DISC\
    \ attribute is never\n   propagated to other BGP speakers in neighboring AS's.\n"
- title: 5.1.5   LOCAL_PREF
  contents:
  - "5.1.5   LOCAL_PREF\n   LOCAL_PREF is a well-known discretionary attribute that\
    \ shall be\n   included in all UPDATE messages that a given BGP speaker sends\
    \ to the\n   other BGP speakers located in its own autonomous system. A BGP\n\
    \   speaker shall calculate the degree of preference for each external\n   route\
    \ and include the degree of preference when advertising a route\n   to its internal\
    \ peers. The higher degree of preference should be\n   preferred. A BGP speaker\
    \ shall use the degree of preference learned\n   via LOCAL_PREF in its decision\
    \ process (see section 9.1.1).\n   A BGP speaker shall not include this attribute\
    \ in UPDATE messages\n   that it sends to BGP speakers located in a neighboring\
    \ autonomous\n   system. If it is contained in an UPDATE message that is received\
    \ from\n   a BGP speaker which is not located in the same autonomous system as\n\
    \   the receiving speaker, then this attribute shall be ignored by the\n   receiving\
    \ speaker.\n"
- title: 5.1.6   ATOMIC_AGGREGATE
  contents:
  - "5.1.6   ATOMIC_AGGREGATE\n   ATOMIC_AGGREGATE is a well-known discretionary attribute.\
    \  If a BGP\n   speaker, when presented with a set of overlapping routes from\
    \ one of\n   its peers (see 9.1.4), selects the less specific route without\n\
    \   selecting the more specific one, then the local system shall attach\n   the\
    \ ATOMIC_AGGREGATE attribute to the route when propagating it to\n   other BGP\
    \ speakers (if that attribute is not already present in the\n   received less\
    \ specific route). A BGP speaker that receives a route\n   with the ATOMIC_AGGREGATE\
    \ attribute shall not remove the attribute\n   from the route when propagating\
    \ it to other speakers. A BGP speaker\n   that receives a route with the ATOMIC_AGGREGATE\
    \ attribute shall not\n   make any NLRI of that route more specific (as defined\
    \ in 9.1.4) when\n   advertising this route to other BGP speakers.  A BGP speaker\
    \ that\n   receives a route with the ATOMIC_AGGREGATE attribute needs to be\n\
    \   cognizant of the fact that the actual path to destinations, as\n   specified\
    \ in the NLRI of the route, while having the loop-free\n   property, may traverse\
    \ ASs that are not listed in the AS_PATH\n   attribute.\n"
- title: 5.1.7   AGGREGATOR
  contents:
  - "5.1.7   AGGREGATOR\n   AGGREGATOR is an optional transitive attribute which may\
    \ be included\n   in updates which are formed by aggregation (see Section 9.2.4.2).\
    \  A\n   BGP speaker which performs route aggregation may add the AGGREGATOR\n\
    \   attribute which shall contain its own AS number and IP address.\n"
- title: 6.  BGP Error Handling.
  contents:
  - "6.  BGP Error Handling.\n   This section describes actions to be taken when errors\
    \ are detected\n   while processing BGP messages.\n   When any of the conditions\
    \ described here are detected, a\n   NOTIFICATION message with the indicated Error\
    \ Code, Error Subcode,\n   and Data fields is sent, and the BGP connection is\
    \ closed.  If no\n   Error Subcode is specified, then a zero must be used.\n \
    \  The phrase \"the BGP connection is closed\" means that the transport\n   protocol\
    \ connection has been closed and that all resources for that\n   BGP connection\
    \ have been deallocated.  Routing table entries\n   associated with the remote\
    \ peer are marked as invalid.  The fact that\n   the routes have become invalid\
    \ is passed to other BGP peers before\n   the routes are deleted from the system.\n\
    \   Unless specified explicitly, the Data field of the NOTIFICATION\n   message\
    \ that is sent to indicate an error is empty.\n"
- title: 6.1 Message Header error handling.
  contents:
  - "6.1 Message Header error handling.\n   All errors detected while processing the\
    \ Message Header are indicated\n   by sending the NOTIFICATION message with Error\
    \ Code Message Header\n   Error.  The Error Subcode elaborates on the specific\
    \ nature of the\n   error.\n   The expected value of the Marker field of the message\
    \ header is all\n   ones if the message type is OPEN.  The expected value of the\
    \ Marker\n   field for all other types of BGP messages determined based on the\n\
    \   presence of the Authentication Information Optional Parameter in the\n   BGP\
    \ OPEN message and the actual authentication mechanism (if the\n   Authentication\
    \ Information in the BGP OPEN message is present). If\n   the Marker field of\
    \ the message header is not the expected one, then\n   a synchronization error\
    \ has occurred and the Error Subcode is set to\n   Connection Not Synchronized.\n\
    \   If the Length field of the message header is less than 19 or greater\n   than\
    \ 4096, or if the Length field of an OPEN message is less  than\n   the minimum\
    \ length of the OPEN message, or if the Length field of an\n   UPDATE message\
    \ is less than the minimum length of the UPDATE message,\n   or if the Length\
    \ field of a KEEPALIVE message is not equal to 19, or\n   if the Length field\
    \ of a NOTIFICATION message is less than the\n   minimum length of the NOTIFICATION\
    \ message, then the Error Subcode is\n   set to Bad Message Length.  The Data\
    \ field contains the erroneous\n   Length field.\n   If the Type field of the\
    \ message header is not recognized, then the\n   Error Subcode is set to Bad Message\
    \ Type.  The Data field contains\n   the erroneous Type field.\n"
- title: 6.2 OPEN message error handling.
  contents:
  - "6.2 OPEN message error handling.\n   All errors detected while processing the\
    \ OPEN message are indicated\n   by sending the NOTIFICATION message with Error\
    \ Code OPEN Message\n   Error.  The Error Subcode elaborates on the specific nature\
    \ of the\n   error.\n   If the version number contained in the Version field of\
    \ the received\n   OPEN message is not supported, then the Error Subcode is set\
    \ to\n   Unsupported Version Number.  The Data field is a 2-octet unsigned\n \
    \  integer, which indicates the largest locally supported version number\n   less\
    \ than the version the remote BGP peer bid (as indicated in the\n   received OPEN\
    \ message).\n   If the Autonomous System field of the OPEN message is unacceptable,\n\
    \   then the Error Subcode is set to Bad Peer AS.  The determination of\n   acceptable\
    \ Autonomous System numbers is outside the scope of this\n   protocol.\n   If\
    \ the Hold Time field of the OPEN message is unacceptable, then the\n   Error\
    \ Subcode MUST be set to Unacceptable Hold Time.  An\n   implementation MUST reject\
    \ Hold Time values of one or two seconds.\n   An implementation MAY reject any\
    \ proposed Hold Time.  An\n   implementation which accepts a Hold Time MUST use\
    \ the negotiated\n   value for the Hold Time.\n   If the BGP Identifier field\
    \ of the OPEN message is syntactically\n   incorrect, then the Error Subcode is\
    \ set to Bad BGP Identifier.\n   Syntactic correctness means that the BGP Identifier\
    \ field represents\n   a valid IP host address.\n   If one of the Optional Parameters\
    \ in the OPEN message is not\n   recognized, then the Error Subcode is set to\
    \ Unsupported Optional\n   Parameters.\n   If the OPEN message carries Authentication\
    \ Information (as an\n   Optional Parameter), then the corresponding authentication\
    \ procedure\n   is invoked.  If the authentication procedure (based on Authentication\n\
    \   Code and Authentication Data) fails, then the Error Subcode is set to\n  \
    \ Authentication Failure.\n"
- title: 6.3 UPDATE message error handling.
  contents:
  - "6.3 UPDATE message error handling.\n   All errors detected while processing the\
    \ UPDATE message are indicated\n   by sending the NOTIFICATION message with Error\
    \ Code UPDATE Message\n   Error.  The error subcode elaborates on the specific\
    \ nature of the\n   error.\n   Error checking of an UPDATE message begins by examining\
    \ the path\n   attributes.  If the Unfeasible Routes Length or Total Attribute\n\
    \   Length is too large (i.e., if Unfeasible Routes Length + Total\n   Attribute\
    \ Length + 23 exceeds the message Length), then the Error\n   Subcode is set to\
    \ Malformed Attribute List.\n   If any recognized attribute has Attribute Flags\
    \ that conflict with\n   the Attribute Type Code, then the Error Subcode is set\
    \ to Attribute\n   Flags Error.  The Data field contains the erroneous attribute\
    \ (type,\n   length and value).\n   If any recognized attribute has Attribute\
    \ Length that conflicts with\n   the expected length (based on the attribute type\
    \ code), then the\n   Error Subcode is set to Attribute Length Error.  The Data\
    \ field\n   contains the erroneous attribute (type, length and value).\n   If\
    \ any of the mandatory well-known attributes are not present, then\n   the Error\
    \ Subcode is set to Missing Well-known Attribute.  The Data\n   field contains\
    \ the Attribute Type Code of the missing well-known\n   attribute.\n   If any\
    \ of the mandatory well-known attributes are not recognized,\n   then the Error\
    \ Subcode is set to Unrecognized Well-known Attribute.\n   The Data field contains\
    \ the unrecognized attribute (type, length and\n   value).\n   If the ORIGIN attribute\
    \ has an undefined value, then the Error\n   Subcode is set to Invalid Origin\
    \ Attribute.  The Data field contains\n   the unrecognized attribute (type, length\
    \ and value).\n   If the NEXT_HOP attribute field is syntactically incorrect,\
    \ then the\n   Error Subcode is set to Invalid NEXT_HOP Attribute.  The Data field\n\
    \   contains the incorrect attribute (type, length and value).  Syntactic\n  \
    \ correctness means that the NEXT_HOP attribute represents a valid IP\n   host\
    \ address.  Semantic correctness applies only to the external BGP\n   links. It\
    \ means that the interface associated with the IP address, as\n   specified in\
    \ the NEXT_HOP attribute, shares a common subnet with the\n   receiving BGP speaker\
    \ and is not the IP address of the receiving BGP\n   speaker.  If the NEXT_HOP\
    \ attribute is semantically incorrect, the\n   error should be logged, and the\
    \ the route should be ignored.  In this\n   case, no NOTIFICATION message should\
    \ be sent.\n   The AS_PATH attribute is checked for syntactic correctness.  If\
    \ the\n   path is syntactically incorrect, then the Error Subcode is set to\n\
    \   Malformed AS_PATH.\n   If an optional attribute is recognized, then the value\
    \ of this\n   attribute is checked.  If an error is detected, the attribute is\n\
    \   discarded, and the Error Subcode is set to Optional Attribute Error.\n   The\
    \ Data field contains the attribute (type, length and value).\n   If any attribute\
    \ appears more than once in the UPDATE message, then\n   the Error Subcode is\
    \ set to Malformed Attribute List.\n   The NLRI field in the UPDATE message is\
    \ checked for syntactic\n   validity.  If the field is syntactically incorrect,\
    \ then the Error\n   Subcode is set to Invalid Network Field.\n"
- title: 6.4 NOTIFICATION message error handling.
  contents:
  - "6.4 NOTIFICATION message error handling.\n   If a peer sends a NOTIFICATION message,\
    \ and there is an error in that\n   message, there is unfortunately no means of\
    \ reporting this error via\n   a subsequent NOTIFICATION message.  Any such error,\
    \ such as an\n   unrecognized Error Code or Error Subcode, should be noticed,\
    \ logged\n   locally, and brought to the attention of the administration of the\n\
    \   peer.  The means to do this, however, lies outside the scope of this\n   document.\n"
- title: 6.5 Hold Timer Expired error handling.
  contents:
  - "6.5 Hold Timer Expired error handling.\n   If a system does not receive successive\
    \ KEEPALIVE and/or UPDATE\n   and/or NOTIFICATION messages within the period specified\
    \ in the Hold\n   Time field of the OPEN message, then the NOTIFICATION message\
    \ with\n   Hold Timer Expired Error Code must be sent and the BGP connection\n\
    \   closed.\n"
- title: 6.6 Finite State Machine error handling.
  contents:
  - "6.6 Finite State Machine error handling.\n   Any error detected by the BGP Finite\
    \ State Machine (e.g., receipt of\n   an unexpected event) is indicated by sending\
    \ the NOTIFICATION message\n   with Error Code Finite State Machine Error.\n"
- title: 6.7 Cease.
  contents:
  - "6.7 Cease.\n   In absence of any fatal errors (that are indicated in this section),\n\
    \   a BGP peer may choose at any given time to close its BGP connection\n   by\
    \ sending the NOTIFICATION message with Error Code Cease.  However,\n   the Cease\
    \ NOTIFICATION message must not be used when a fatal error\n   indicated by this\
    \ section does exist.\n"
- title: 6.8 Connection collision detection.
  contents:
  - "6.8 Connection collision detection.\n   If a pair of BGP speakers try simultaneously\
    \ to establish a TCP\n   connection to each other, then two parallel connections\
    \ between this\n   pair of speakers might well be formed.  We refer to this situation\
    \ as\n   connection collision.  Clearly, one of these connections must be\n  \
    \ closed.\n   Based on the value of the BGP Identifier a convention is established\n\
    \   for detecting which BGP connection is to be preserved when a\n   collision\
    \ does occur. The convention is to compare the BGP\n   Identifiers of the peers\
    \ involved in the collision and to retain only\n   the connection initiated by\
    \ the BGP speaker with the higher-valued\n   BGP Identifier.\n   Upon receipt\
    \ of an OPEN message, the local system must examine all of\n   its connections\
    \ that are in the OpenConfirm state.  A BGP speaker may\n   also examine connections\
    \ in an OpenSent state if it knows the BGP\n   Identifier of the peer by means\
    \ outside of the protocol.  If among\n   these connections there is a connection\
    \ to a remote BGP speaker whose\n   BGP Identifier equals the one in the OPEN\
    \ message, then the local\n   system performs the following collision resolution\
    \ procedure:\n      1. The BGP Identifier of the local system is compared to the\
    \ BGP\n      Identifier of the remote system (as specified in the OPEN\n     \
    \ message).\n      2. If the value of the local BGP Identifier is less than the\n\
    \      remote one, the local system closes BGP connection that already\n     \
    \ exists (the one that is already in the OpenConfirm state), and\n      accepts\
    \ BGP connection initiated by the remote system.\n      3. Otherwise, the local\
    \ system closes newly created BGP connection\n      (the one associated with the\
    \ newly received OPEN message), and\n      continues to use the existing one (the\
    \ one that is already in the\n      OpenConfirm state).\n      Comparing BGP Identifiers\
    \ is done by treating them as (4-octet\n      long) unsigned integers.\n     \
    \ A connection collision with an existing BGP connection that is in\n      Established\
    \ states causes unconditional closing of the newly\n      created connection.\
    \ Note that a connection collision cannot be\n      detected with connections\
    \ that are in Idle, or Connect, or Active\n      states.\n      Closing the BGP\
    \ connection (that results from the collision\n      resolution procedure) is\
    \ accomplished by sending the NOTIFICATION\n      message with the Error Code\
    \ Cease.\n"
- title: 7.  BGP Version Negotiation.
  contents:
  - "7.  BGP Version Negotiation.\n   BGP speakers may negotiate the version of the\
    \ protocol by making\n   multiple attempts to open a BGP connection, starting\
    \ with the highest\n   version number each supports.  If an open attempt fails\
    \ with an Error\n   Code OPEN Message Error, and an Error Subcode Unsupported\
    \ Version\n   Number, then the BGP speaker has available the version number it\n\
    \   tried, the version number its peer tried, the version number passed\n   by\
    \ its peer in the NOTIFICATION message, and the version numbers that\n   it supports.\
    \  If the two peers do support one or more common\n   versions, then this will\
    \ allow them to rapidly determine the highest\n   common version. In order to\
    \ support BGP version negotiation, future\n   versions of BGP must retain the\
    \ format of the OPEN and NOTIFICATION\n   messages.\n"
- title: 8.  BGP Finite State machine.
  contents:
  - "8.  BGP Finite State machine.\n   This section specifies BGP operation in terms\
    \ of a Finite State\n   Machine (FSM).  Following is a brief summary and overview\
    \ of BGP\n   operations by state as determined by this FSM.  A condensed version\n\
    \   of the BGP FSM is found in Appendix 1.\n      Initially BGP is in the Idle\
    \ state.\n      Idle state:\n         In this state BGP refuses all incoming BGP\
    \ connections.  No\n         resources are allocated to the peer.  In response\
    \ to the Start\n         event (initiated by either system or operator) the local\
    \ system\n         initializes all BGP resources, starts the ConnectRetry timer,\n\
    \         initiates a transport connection to other BGP peer, while\n        \
    \ listening for connection that may be initiated by the remote\n         BGP peer,\
    \ and changes its state to Connect.  The exact value of\n         the ConnectRetry\
    \ timer is a local matter, but should be\n         sufficiently large to allow\
    \ TCP initialization.\n         If a BGP speaker detects an error, it shuts down\
    \ the connection\n         and changes its state to Idle. Getting out of the Idle\
    \ state\n         requires generation of the Start event.  If such an event is\n\
    \         generated automatically, then persistent BGP errors may result\n   \
    \      in persistent flapping of the speaker.  To avoid such a\n         condition\
    \ it is recommended that Start events should not be\n         generated immediately\
    \ for a peer that was previously\n         transitioned to Idle due to an error.\
    \ For a peer that was\n         previously transitioned to Idle due to an error,\
    \ the time\n         between consecutive generation of Start events, if such events\n\
    \         are generated automatically, shall exponentially increase. The\n   \
    \      value of the initial timer shall be 60 seconds. The time shall\n      \
    \   be doubled for each consecutive retry.\n         Any other event received\
    \ in the Idle state is ignored.\n      Connect state:\n         In this state\
    \ BGP is waiting for the transport protocol\n         connection to be completed.\n\
    \         If the transport protocol connection succeeds, the local system\n  \
    \       clears the ConnectRetry timer, completes initialization, sends\n     \
    \    an OPEN message to its peer, and changes its state to OpenSent.\n       \
    \  If the transport protocol connect fails (e.g., retransmission\n         timeout),\
    \ the local system restarts the ConnectRetry timer,\n         continues to listen\
    \ for a connection that may be initiated by\n         the remote BGP peer, and\
    \ changes its state to Active state.\n         In response to the ConnectRetry\
    \ timer expired event, the local\n         system restarts the ConnectRetry timer,\
    \ initiates a transport\n         connection to other BGP peer, continues to listen\
    \ for a\n         connection that may be initiated by the remote BGP peer, and\n\
    \         stays in the Connect state.\n         Start event is ignored in the\
    \ Active state.\n         In response to any other event (initiated by either\
    \ system or\n         operator), the local system releases all BGP resources\n\
    \         associated with this connection and changes its state to Idle.\n   \
    \   Active state:\n         In this state BGP is trying to acquire a peer by initiating\
    \ a\n         transport protocol connection.\n         If the transport protocol\
    \ connection succeeds, the local system\n         clears the ConnectRetry timer,\
    \ completes initialization, sends\n         an OPEN message to its peer, sets\
    \ its Hold Timer to a large\n         value, and changes its state to OpenSent.\
    \  A Hold Timer value\n         of 4 minutes is suggested.\n         In response\
    \ to the ConnectRetry timer expired event, the local\n         system restarts\
    \ the ConnectRetry timer, initiates a transport\n         connection to other\
    \ BGP peer, continues to listen for a\n         connection that may be initiated\
    \ by the remote BGP peer, and\n         changes its state to Connect.\n      \
    \   If the local system detects that a remote peer is trying to\n         establish\
    \ BGP connection to it, and the IP address of the\n         remote peer is not\
    \ an expected one, the local system restarts\n         the ConnectRetry timer,\
    \ rejects the attempted connection,\n         continues to listen for a connection\
    \ that may be initiated by\n         the remote BGP peer, and stays in the Active\
    \ state.\n         Start event is ignored in the Active state.\n         In response\
    \ to any other event (initiated by either system or\n         operator), the local\
    \ system releases all BGP resources\n         associated with this connection\
    \ and changes its state to Idle.\n      OpenSent state:\n         In this state\
    \ BGP waits for an OPEN message from its peer.\n         When an OPEN message\
    \ is received, all fields are checked for\n         correctness.  If the BGP message\
    \ header checking or OPEN\n         message checking detects an error (see Section\
    \ 6.2), or a\n         connection collision (see Section 6.8) the local system\
    \ sends a\n         NOTIFICATION message and changes its state to Idle.\n    \
    \     If there are no errors in the OPEN message, BGP sends a\n         KEEPALIVE\
    \ message and sets a KeepAlive timer.  The Hold Timer,\n         which was originally\
    \ set to a large value (see above), is\n         replaced with the negotiated\
    \ Hold Time value (see section 4.2).\n         If the negotiated Hold Time value\
    \ is zero, then the Hold Time\n         timer and KeepAlive timers are not started.\
    \  If the value of\n         the Autonomous System field is the same as the local\
    \ Autonomous\n         System number, then the connection is an \"internal\" connection;\n\
    \         otherwise, it is \"external\".  (This will effect UPDATE\n         processing\
    \ as described below.)  Finally, the state is changed\n         to OpenConfirm.\n\
    \         If a disconnect notification is received from the underlying\n     \
    \    transport protocol, the local system closes the BGP connection,\n       \
    \  restarts the ConnectRetry timer, while continue listening for\n         connection\
    \ that may be initiated by the remote BGP peer, and\n         goes into the Active\
    \ state.\n         If the Hold Timer expires, the local system sends NOTIFICATION\n\
    \         message with error code Hold Timer Expired and changes its\n       \
    \  state to Idle.\n         In response to the Stop event (initiated by either\
    \ system or\n         operator) the local system sends NOTIFICATION message with\n\
    \         Error Code Cease and changes its state to Idle.\n         Start event\
    \ is ignored in the OpenSent state.\n         In response to any other event the\
    \ local system sends\n         NOTIFICATION message with Error Code Finite State\
    \ Machine Error\n         and changes its state to Idle.\n         Whenever BGP\
    \ changes its state from OpenSent to Idle, it closes\n         the BGP (and transport-level)\
    \ connection and releases all\n         resources associated with that connection.\n\
    \      OpenConfirm state:\n         In this state BGP waits for a KEEPALIVE or\
    \ NOTIFICATION\n         message.\n         If the local system receives a KEEPALIVE\
    \ message, it changes\n         its state to Established.\n         If the Hold\
    \ Timer expires before a KEEPALIVE message is\n         received, the local system\
    \ sends NOTIFICATION message with\n         error code Hold Timer Expired and\
    \ changes its state to Idle.\n         If the local system receives a NOTIFICATION\
    \ message, it changes\n         its state to Idle.\n         If the KeepAlive\
    \ timer expires, the local system sends a\n         KEEPALIVE message and restarts\
    \ its KeepAlive timer.\n         If a disconnect notification is received from\
    \ the underlying\n         transport protocol, the local system changes its state\
    \ to Idle.\n         In response to the Stop event (initiated by either system\
    \ or\n         operator) the local system sends NOTIFICATION message with\n  \
    \       Error Code Cease and changes its state to Idle.\n         Start event\
    \ is ignored in the OpenConfirm state.\n         In response to any other event\
    \ the local system sends\n         NOTIFICATION message with Error Code Finite\
    \ State Machine Error\n         and changes its state to Idle.\n         Whenever\
    \ BGP changes its state from OpenConfirm to Idle, it\n         closes the BGP\
    \ (and transport-level) connection and releases\n         all resources associated\
    \ with that connection.\n      Established state:\n         In the Established\
    \ state BGP can exchange UPDATE, NOTIFICATION,\n         and KEEPALIVE messages\
    \ with its peer.\n         If the local system receives an UPDATE or KEEPALIVE\
    \ message, it\n         restarts its Hold Timer, if the negotiated Hold Time value\
    \ is\n         non-zero.\n         If the local system receives a NOTIFICATION\
    \ message, it changes\n         its state to Idle.\n         If the local system\
    \ receives an UPDATE message and the UPDATE\n         message error handling procedure\
    \ (see Section 6.3) detects an\n         error, the local system sends a NOTIFICATION\
    \ message and\n         changes its state to Idle.\n         If a disconnect notification\
    \ is received from the underlying\n         transport protocol, the local system\
    \ changes its state to Idle.\n         If the Hold Timer expires, the local system\
    \ sends a\n         NOTIFICATION message with Error Code Hold Timer Expired and\n\
    \         changes its state to Idle.\n         If the KeepAlive timer expires,\
    \ the local system sends a\n         KEEPALIVE message and restarts its KeepAlive\
    \ timer.\n         Each time the local system sends a KEEPALIVE or UPDATE message,\n\
    \         it restarts its KeepAlive timer, unless the negotiated Hold\n      \
    \   Time value is zero.\n         In response to the Stop event (initiated by\
    \ either system or\n         operator), the local system sends a NOTIFICATION\
    \ message with\n         Error Code Cease and changes its state to Idle.\n   \
    \      Start event is ignored in the Established state.\n         In response\
    \ to any other event, the local system sends\n         NOTIFICATION message with\
    \ Error Code Finite State Machine Error\n         and changes its state to Idle.\n\
    \         Whenever BGP changes its state from Established to Idle, it\n      \
    \   closes the BGP (and transport-level) connection, releases all\n         resources\
    \ associated with that connection, and deletes all\n         routes derived from\
    \ that connection.\n"
- title: 9.  UPDATE Message Handling
  contents:
  - "9.  UPDATE Message Handling\n   An UPDATE message may be received only in the\
    \ Established state.\n   When an UPDATE message is received, each field is checked\
    \ for\n   validity as specified in Section 6.3.\n   If an optional non-transitive\
    \ attribute is unrecognized, it is\n   quietly ignored.  If an optional transitive\
    \ attribute is\n   unrecognized, the Partial bit (the third high-order bit) in\
    \ the\n   attribute flags octet is set to 1, and the attribute is retained for\n\
    \   propagation to other BGP speakers.\n   If an optional attribute is recognized,\
    \ and has a valid value, then,\n   depending on the type of the optional attribute,\
    \ it is processed\n   locally, retained, and updated, if necessary, for possible\n\
    \   propagation to other BGP speakers.\n   If the UPDATE message contains a non-empty\
    \ WITHDRAWN ROUTES field,\n   the previously advertised routes whose destinations\
    \ (expressed as IP\n   prefixes) contained in this field shall be removed from\
    \ the Adj-RIB-\n   In.  This BGP speaker shall run its Decision Process since\
    \ the\n   previously advertised route is not longer available for use.\n   If\
    \ the UPDATE message contains a feasible route, it shall be placed\n   in the\
    \ appropriate Adj-RIB-In, and the following additional actions\n   shall be taken:\n\
    \   i) If its Network Layer Reachability Information (NLRI) is identical\n   to\
    \ the one of a route currently stored in the Adj-RIB-In, then the\n   new route\
    \ shall replace the older route in the Adj-RIB-In, thus\n   implicitly withdrawing\
    \ the older route from service. The BGP speaker\n   shall run its Decision Process\
    \ since the older route is no longer\n   available for use.\n   ii) If the new\
    \ route is an overlapping route that is included (see\n   9.1.4) in an earlier\
    \ route contained in the Adj-RIB-In, the BGP\n   speaker shall run its Decision\
    \ Process since the more specific route\n   has implicitly made a portion of the\
    \ less specific route unavailable\n   for use.\n   iii) If the new route has identical\
    \ path attributes to an earlier\n   route contained in the Adj-RIB-In, and is\
    \ more specific (see 9.1.4)\n   than the earlier route, no further actions are\
    \ necessary.\n   iv) If the new route has NLRI that is not present in any of the\n\
    \   routes currently stored in the Adj-RIB-In, then the new route shall\n   be\
    \ placed in the Adj-RIB-In. The BGP speaker shall run its Decision\n   Process.\n\
    \   v) If the new route is an overlapping route that is less specific\n   (see\
    \ 9.1.4) than an earlier route contained in the Adj-RIB-In, the\n   BGP speaker\
    \ shall run its Decision Process on the set of destinations\n   described only\
    \ by the less specific route.\n"
- title: 9.1 Decision Process
  contents:
  - "9.1 Decision Process\n   The Decision Process selects routes for subsequent advertisement\
    \ by\n   applying the policies in the local Policy Information Base (PIB) to\n\
    \   the routes stored in its Adj-RIB-In. The output of the Decision\n   Process\
    \ is the set of routes that will be advertised to all peers;\n   the selected\
    \ routes will be stored in the local speaker's Adj-RIB-\n   Out.\n   The selection\
    \ process is formalized by defining a function that takes\n   the attribute of\
    \ a given route as an argument and returns a non-\n   negative integer denoting\
    \ the degree of preference for the route.\n   The function that calculates the\
    \ degree of preference for a given\n   route shall not use as its inputs any of\
    \ the following:  the\n   existence of other routes, the non-existence of other\
    \ routes, or the\n   path attributes of other routes. Route selection then consists\
    \ of\n   individual application of the degree of preference function to each\n\
    \   feasible route, followed by the choice of the one with the highest\n   degree\
    \ of preference.\n   The Decision Process operates on routes contained in each\
    \ Adj-RIB-In,\n   and is responsible for:\n      - selection of routes to be advertised\
    \ to BGP speakers located in\n      the local speaker's autonomous system\n  \
    \    - selection of routes to be advertised to BGP speakers located in\n     \
    \ neighboring autonomous systems\n      - route aggregation and route information\
    \ reduction\n   The Decision Process takes place in three distinct phases, each\n\
    \   triggered by a different event:\n      a) Phase 1 is responsible for calculating\
    \ the degree of preference\n      for each route received from a BGP speaker located\
    \ in a\n      neighboring autonomous system, and for advertising to the other\n\
    \      BGP speakers in the local autonomous system the routes that have\n    \
    \  the highest degree of preference for each distinct destination.\n      b) Phase\
    \ 2 is invoked on completion of phase 1. It is responsible\n      for choosing\
    \ the best route out of all those available for each\n      distinct destination,\
    \ and for installing each chosen route into\n      the appropriate Loc-RIB.\n\
    \      c) Phase 3 is invoked after the Loc-RIB has been modified. It is\n    \
    \  responsible for disseminating routes in the Loc-RIB to each peer\n      located\
    \ in a neighboring autonomous system, according to the\n      policies contained\
    \ in the PIB. Route aggregation and information\n      reduction can optionally\
    \ be performed within this phase.\n"
- title: '9.1.1 Phase 1: Calculation of Degree of Preference'
  contents:
  - "9.1.1 Phase 1: Calculation of Degree of Preference\n   The Phase 1 decision function\
    \ shall be invoked whenever the local BGP\n   speaker receives an UPDATE message\
    \ from a peer located in a\n   neighboring autonomous system that advertises a\
    \ new route, a\n   replacement route, or a withdrawn route.\n   The Phase 1 decision\
    \ function is a separate process which completes\n   when it has no further work\
    \ to do.\n   The Phase 1 decision function shall lock an Adj-RIB-In prior to\n\
    \   operating on any route contained within it, and shall unlock it after\n  \
    \ operating on all new or unfeasible routes contained within it.\n   For each\
    \ newly received or replacement feasible route, the local BGP\n   speaker shall\
    \ determine a degree of preference. If the route is\n   learned from a BGP speaker\
    \ in the local autonomous system, either the\n   value of the LOCAL_PREF attribute\
    \ shall be taken as the degree of\n   preference, or the local system shall compute\
    \ the degree of\n   preference of the route based on preconfigured policy information.\
    \ If\n   the route is learned from a BGP speaker in a neighboring autonomous\n\
    \   system, then the degree of preference shall be computed based on\n   preconfigured\
    \ policy information.  The exact nature of this policy\n   information and the\
    \ computation involved is a local matter.  The\n   local speaker shall then run\
    \ the internal update process of 9.2.1 to\n   select and advertise the most preferable\
    \ route.\n"
- title: '9.1.2 Phase 2: Route Selection'
  contents:
  - "9.1.2 Phase 2: Route Selection\n   The Phase 2 decision function shall be invoked\
    \ on completion of Phase\n   1.  The Phase 2 function is a separate process which\
    \ completes when\n   it has no further work to do. The Phase 2 process shall consider\
    \ all\n   routes that are present in the Adj-RIBs-In, including those received\n\
    \   from BGP speakers located in its own autonomous system and those\n   received\
    \ from BGP speakers located in neighboring autonomous systems.\n   The Phase 2\
    \ decision function shall be blocked from running while the\n   Phase 3 decision\
    \ function is in process. The Phase 2 function shall\n   lock all Adj-RIBs-In\
    \ prior to commencing its function, and shall\n   unlock them on completion.\n\
    \   If the NEXT_HOP attribute of a BGP route depicts an address to which\n   the\
    \ local BGP speaker doesn't have a route in its Loc-RIB, the BGP\n   route SHOULD\
    \ be excluded from the Phase 2 decision function.\n   For each set of destinations\
    \ for which a feasible route exists in the\n   Adj-RIBs-In, the local BGP speaker\
    \ shall identify the route that has:\n      a) the highest degree of preference\
    \ of any route to the same set\n      of destinations, or\n      b) is the only\
    \ route to that destination, or\n      c) is selected as a result of the Phase\
    \ 2 tie breaking rules\n      specified in 9.1.2.1.\n   The local speaker SHALL\
    \ then install that route in the Loc-RIB,\n   replacing any route to the same\
    \ destination that is currently being\n   held in the Loc-RIB. The local speaker\
    \ MUST determine the immediate\n   next hop to the address depicted by the NEXT_HOP\
    \ attribute of the\n   selected route by performing a lookup in the IGP and selecting\
    \ one of\n   the possible paths in the IGP.  This immediate next hop MUST be used\n\
    \   when installing the selected route in the Loc-RIB.  If the route to\n   the\
    \ address depicted by the NEXT_HOP attribute changes such that the\n   immediate\
    \ next hop changes, route selection should be recalculated as\n   specified above.\n\
    \   Unfeasible routes shall be removed from the Loc-RIB, and\n   corresponding\
    \ unfeasible routes shall then be removed from the Adj-\n   RIBs-In.\n"
- title: 9.1.2.1 Breaking Ties (Phase 2)
  contents:
  - "9.1.2.1 Breaking Ties (Phase 2)\n   In its Adj-RIBs-In a BGP speaker may have\
    \ several routes to the same\n   destination that have the same degree of preference.\
    \ The local\n   speaker can select only one of these routes for inclusion in the\n\
    \   associated Loc-RIB. The local speaker considers all equally\n   preferable\
    \ routes, both those received from BGP speakers located in\n   neighboring autonomous\
    \ systems, and those received from other BGP\n   speakers located in the local\
    \ speaker's autonomous system.\n   The following tie-breaking procedure assumes\
    \ that for each candidate\n   route all the BGP speakers within an autonomous\
    \ system can ascertain\n   the cost of a path (interior distance) to the address\
    \ depicted by the\n   NEXT_HOP attribute of the route.  Ties shall be broken according\
    \ to\n   the following algorithm:\n      a) If the local system is configured\
    \ to take into account\n      MULTI_EXIT_DISC, and the candidate routes differ\
    \ in their\n      MULTI_EXIT_DISC attribute, select the route that has the lowest\n\
    \      value of the MULTI_EXIT_DISC attribute.\n      b) Otherwise, select the\
    \ route that has the lowest cost (interior\n      distance) to the entity depicted\
    \ by the NEXT_HOP attribute of the\n      route.  If there are several routes\
    \ with the same cost, then the\n      tie-breaking shall be broken as follows:\n\
    \         - if at least one of the candidate routes was advertised by the\n  \
    \       BGP speaker in a neighboring autonomous system, select the\n         route\
    \ that was advertised by the BGP speaker in a neighboring\n         autonomous\
    \ system whose BGP Identifier has the lowest value\n         among all other BGP\
    \ speakers in neighboring autonomous systems;\n         - otherwise, select the\
    \ route that was advertised by the BGP\n         speaker whose BGP Identifier\
    \ has the lowest value.\n"
- title: '9.1.3   Phase 3: Route Dissemination'
  contents:
  - "9.1.3   Phase 3: Route Dissemination\n   The Phase 3 decision function shall\
    \ be invoked on completion of Phase\n   2, or when any of the following events\
    \ occur:\n      a) when routes in a Loc-RIB to local destinations have changed\n\
    \      b) when locally generated routes learned by means outside of BGP\n    \
    \  have changed\n      c) when a new BGP speaker - BGP speaker connection has\
    \ been\n      established\n   The Phase 3 function is a separate process which\
    \ completes when it\n   has no further work to do. The Phase 3 Routing Decision\
    \ function\n   shall be blocked from running while the Phase 2 decision function\
    \ is\n   in process.\n   All routes in the Loc-RIB shall be processed into a corresponding\n\
    \   entry in the associated Adj-RIBs-Out. Route aggregation and\n   information\
    \ reduction techniques (see 9.2.4.1) may optionally be\n   applied.\n   For the\
    \ benefit of future support of inter-AS multicast capabilities,\n   a BGP speaker\
    \ that participates in inter-AS multicast routing shall\n   advertise a route\
    \ it receives from one of its external peers and if\n   it installs it in its\
    \ Loc-RIB, it shall advertise it back to the peer\n   from which the route was\
    \ received. For a BGP speaker that does not\n   participate in inter-AS multicast\
    \ routing such an advertisement is\n   optional. When doing such an advertisement,\
    \ the NEXT_HOP attribute\n   should be set to the address of the peer. An implementation\
    \ may also\n   optimize such an advertisement by truncating information in the\n\
    \   AS_PATH attribute to include only its own AS number and that of the\n   peer\
    \ that advertised the route (such truncation requires the ORIGIN\n   attribute\
    \ to be set to INCOMPLETE).  In addition an implementation is\n   not required\
    \ to pass optional or discretionary path attributes with\n   such an advertisement.\n\
    \   When the updating of the Adj-RIBs-Out and the Forwarding Information\n   Base\
    \ (FIB) is complete, the local BGP speaker shall run the external\n   update process\
    \ of 9.2.2.\n"
- title: 9.1.4 Overlapping Routes
  contents:
  - "9.1.4 Overlapping Routes\n   A BGP speaker may transmit routes with overlapping\
    \ Network Layer\n   Reachability Information (NLRI) to another BGP speaker. NLRI\
    \ overlap\n   occurs when a set of destinations are identified in non-matching\n\
    \   multiple routes. Since BGP encodes NLRI using IP prefixes, overlap\n   will\
    \ always exhibit subset relationships.  A route describing a\n   smaller set of\
    \ destinations (a longer prefix) is said to be more\n   specific than a route\
    \ describing a larger set of destinations (a\n   shorted prefix); similarly, a\
    \ route describing a larger set of\n   destinations (a shorter prefix) is said\
    \ to be less specific than a\n   route describing a smaller set of destinations\
    \ (a longer prefix).\n   The precedence relationship effectively decomposes less\
    \ specific\n   routes into two parts:\n      -  a set of destinations described\
    \ only by the less specific\n      route, and\n      -  a set of destinations\
    \ described by the overlap of the less\n      specific and the more specific routes\n\
    \   When overlapping routes are present in the same Adj-RIB-In, the more\n   specific\
    \ route shall take precedence, in order from more specific to\n   least specific.\n\
    \   The set of destinations described by the overlap represents a portion\n  \
    \ of the less specific route that is feasible, but is not currently in\n   use.\
    \  If a more specific route is later withdrawn, the set of\n   destinations described\
    \ by the overlap will still be reachable using\n   the less specific route.\n\
    \   If a BGP speaker receives overlapping routes, the Decision Process\n   shall\
    \ take into account the semantics of the overlapping routes. In\n   particular,\
    \ if a BGP speaker accepts the less specific route while\n   rejecting the more\
    \ specific route from the same peer, then the\n   destinations represented by\
    \ the overlap may not forward along the ASs\n   listed in the AS_PATH attribute\
    \ of that route. Therefore, a BGP\n   speaker has the following choices:\n   \
    \   a)   Install both the less and the more specific routes\n      b)   Install\
    \ the more specific route only\n      c)   Install the non-overlapping part of\
    \ the less specific\n                 route only (that implies de-aggregation)\n\
    \      d)   Aggregate the two routes and install the aggregated route\n      e)\
    \   Install the less specific route only\n      f)   Install neither route\n \
    \  If a BGP speaker chooses e), then it should add ATOMIC_AGGREGATE\n   attribute\
    \ to the route. A route that carries ATOMIC_AGGREGATE\n   attribute can not be\
    \ de-aggregated. That is, the NLRI of this route\n   can not be made more specific.\
    \  Forwarding along such a route does\n   not guarantee that IP packets will actually\
    \ traverse only ASs listed\n   in the AS_PATH attribute of the route.  If a BGP\
    \ speaker chooses a),\n   it must not advertise the more general route without\
    \ the more\n   specific route.\n"
- title: 9.2 Update-Send Process
  contents:
  - "9.2 Update-Send Process\n   The Update-Send process is responsible for advertising\
    \ UPDATE\n   messages to all peers. For example, it distributes the routes chosen\n\
    \   by the Decision Process to other BGP speakers which may be located in\n  \
    \ either the same autonomous system or a neighboring autonomous system.\n   rules\
    \ for information exchange between BGP speakers located in\n   different autonomous\
    \ systems are given in 9.2.2; rules for\n   information exchange between BGP speakers\
    \ located in the same\n   autonomous system are given in 9.2.1.\n   Distribution\
    \ of routing information between a set of BGP speakers,\n   all of which are located\
    \ in the same autonomous system, is referred\n   to as internal distribution.\n"
- title: 9.2.1 Internal Updates
  contents:
  - "9.2.1 Internal Updates\n   The Internal update process is concerned with the\
    \ distribution of\n   routing information to BGP speakers located in the local\
    \ speaker's\n   autonomous system.\n   When a BGP speaker receives an UPDATE message\
    \ from another BGP\n   speaker located in its own autonomous system, the receiving\
    \ BGP\n   speaker shall not re-distribute the routing information contained in\n\
    \   that UPDATE message to other BGP speakers located in its own\n   autonomous\
    \ system.\n   When a BGP speaker receives a new route from a BGP speaker in a\n\
    \   neighboring autonomous system, it shall advertise that route to all\n   other\
    \ BGP speakers in its autonomous system by means of an UPDATE\n   message if any\
    \ of the following conditions occur:\n      1) the degree of preference assigned\
    \ to the newly received route\n      by the local BGP speaker is higher than the\
    \ degree of preference\n      that the local speaker has assigned to other routes\
    \ that have been\n      received from BGP speakers in neighboring autonomous systems,\
    \ or\n      2) there are no other routes that have been received from BGP\n  \
    \    speakers in neighboring autonomous systems, or\n      3) the newly received\
    \ route is selected as a result of breaking a\n      tie between several routes\
    \ which have the highest degree of\n      preference, and the same destination\
    \ (the tie-breaking procedure\n      is specified in 9.2.1.1).\n   When a BGP\
    \ speaker receives an UPDATE message with a non-empty\n   WITHDRAWN ROUTES field,\
    \ it shall remove from its Adj-RIB-In all\n   routes whose destinations was carried\
    \ in this field (as IP prefixes).\n   The speaker shall take the following additional\
    \ steps:\n      1) if the corresponding feasible route had not been previously\n\
    \      advertised, then no further action is necessary\n      2) if the corresponding\
    \ feasible route had been previously\n      advertised, then:\n         i) if\
    \ a new route is selected for advertisement that has the\n         same Network\
    \ Layer Reachability Information as the unfeasible\n         routes, then the\
    \ local BGP speaker shall advertise the\n         replacement route\n        \
    \ ii) if a replacement route is not available for advertisement,\n         then\
    \ the BGP speaker shall include the destinations  of the\n         unfeasible\
    \ route (in form of IP prefixes) in the WITHDRAWN\n         ROUTES field of an\
    \ UPDATE message, and shall send this message\n         to each peer to whom it\
    \ had previously advertised the\n         corresponding feasible route.\n   All\
    \ feasible routes which are advertised shall be placed in the\n   appropriate\
    \ Adj-RIBs-Out, and all unfeasible routes which are\n   advertised shall be removed\
    \ from the Adj-RIBs-Out.\n"
- title: 9.2.1.1 Breaking Ties (Internal Updates)
  contents:
  - "9.2.1.1 Breaking Ties (Internal Updates)\n   If a local BGP speaker has connections\
    \ to several BGP speakers in\n   neighboring autonomous systems, there will be\
    \ multiple Adj-RIBs-In\n   associated with these peers. These Adj-RIBs-In might\
    \ contain several\n   equally preferable routes to the same destination, all of\
    \ which were\n   advertised by BGP speakers located in neighboring autonomous\
    \ systems.\n   The local BGP speaker shall select one of these routes according\
    \ to\n   the following rules:\n      a) If the candidate route differ only in\
    \ their NEXT_HOP and\n      MULTI_EXIT_DISC attributes, and the local system is\
    \ configured to\n      take into account MULTI_EXIT_DISC attribute, select the\
    \ routes\n      that has the lowest value of the MULTI_EXIT_DISC attribute.\n\
    \      b) If the local system can ascertain the cost of a path to the\n      entity\
    \ depicted by the NEXT_HOP attribute of the candidate route,\n      select the\
    \ route with the lowest cost.\n      c) In all other cases, select the route that\
    \ was advertised by the\n      BGP speaker whose BGP Identifier has the lowest\
    \ value.\n"
- title: 9.2.2 External Updates
  contents:
  - "9.2.2 External Updates\n   The external update process is concerned with the\
    \ distribution of\n   routing information to BGP speakers located in neighboring\
    \ autonomous\n   systems. As part of Phase 3 route selection process, the BGP\
    \ speaker\n   has updated its Adj-RIBs-Out and its Forwarding Table. All newly\n\
    \   installed routes and all newly unfeasible routes for which there is\n   no\
    \ replacement route shall be advertised to BGP speakers located in\n   neighboring\
    \ autonomous systems by means of UPDATE message.\n   Any routes in the Loc-RIB\
    \ marked as unfeasible shall be removed.\n   Changes to the reachable destinations\
    \ within its own autonomous\n   system shall also be advertised in an UPDATE message.\n"
- title: 9.2.3 Controlling Routing Traffic Overhead
  contents:
  - "9.2.3 Controlling Routing Traffic Overhead\n   The BGP protocol constrains the\
    \ amount of routing traffic (that is,\n   UPDATE messages) in order to limit both\
    \ the link bandwidth needed to\n   advertise UPDATE messages and the processing\
    \ power needed by the\n   Decision Process to digest the information contained\
    \ in the UPDATE\n   messages.\n"
- title: 9.2.3.1 Frequency of Route Advertisement
  contents:
  - "9.2.3.1 Frequency of Route Advertisement\n   The parameter MinRouteAdvertisementInterval\
    \ determines the minimum\n   amount of time that must elapse between advertisement\
    \ of routes to a\n   particular destination from a single BGP speaker. This rate\
    \ limiting\n   procedure applies on a per-destination basis, although the value\
    \ of\n   MinRouteAdvertisementInterval is set on a per BGP peer basis.\n   Two\
    \ UPDATE messages sent from a single BGP speaker that advertise\n   feasible routes\
    \ to some common set of destinations received from BGP\n   speakers in neighboring\
    \ autonomous systems must be separated by at\n   least MinRouteAdvertisementInterval.\
    \ Clearly, this can only be\n   achieved precisely by keeping a separate timer\
    \ for each common set of\n   destinations. This would be unwarranted overhead.\
    \ Any technique which\n   ensures that the interval between two UPDATE messages\
    \ sent from a\n   single BGP speaker that advertise feasible routes to some common\
    \ set\n   of destinations received from BGP speakers in neighboring autonomous\n\
    \   systems will be at least MinRouteAdvertisementInterval, and will also\n  \
    \ ensure a constant upper bound on the interval is acceptable.\n   Since fast\
    \ convergence is needed within an autonomous system, this\n   procedure does not\
    \ apply for routes receives from other BGP speakers\n   in the same autonomous\
    \ system. To avoid long-lived black holes, the\n   procedure does not apply to\
    \ the explicit withdrawal of unfeasible\n   routes (that is, routes whose destinations\
    \ (expressed as IP prefixes)\n   are listed in the WITHDRAWN ROUTES field of an\
    \ UPDATE message).\n   This procedure does not limit the rate of route selection,\
    \ but only\n   the rate of route advertisement. If new routes are selected multiple\n\
    \   times while awaiting the expiration of MinRouteAdvertisementInterval,\n  \
    \ the last route selected shall be advertised at the end of\n   MinRouteAdvertisementInterval.\n"
- title: 9.2.3.2 Frequency of Route Origination
  contents:
  - "9.2.3.2 Frequency of Route Origination\n   The parameter MinASOriginationInterval\
    \ determines the minimum amount\n   of time that must elapse between successive\
    \ advertisements of UPDATE\n   messages that report changes within the advertising\
    \ BGP speaker's own\n   autonomous systems.\n"
- title: 9.2.3.3 Jitter
  contents:
  - "9.2.3.3 Jitter\n   To minimize the likelihood that the distribution of BGP messages\
    \ by a\n   given BGP speaker will contain peaks, jitter should be applied to the\n\
    \   timers associated with MinASOriginationInterval, Keepalive, and\n   MinRouteAdvertisementInterval.\
    \ A given BGP speaker shall apply the\n   same jitter to each of these quantities\
    \ regardless of the\n   destinations to which the updates are being sent; that\
    \ is, jitter\n   will not be applied on a \"per peer\" basis.\n   The amount of\
    \ jitter to be introduced shall be determined by\n   multiplying the base value\
    \ of the appropriate timer by a random\n   factor which is uniformly distributed\
    \ in the range from 0.75 to 1.0.\n"
- title: 9.2.4 Efficient Organization of Routing Information
  contents:
  - "9.2.4 Efficient Organization of Routing Information\n   Having selected the routing\
    \ information which it will advertise, a\n   BGP speaker may avail itself of several\
    \ methods to organize this\n   information in an efficient manner.\n"
- title: 9.2.4.1 Information Reduction
  contents:
  - "9.2.4.1 Information Reduction\n   Information reduction may imply a reduction\
    \ in granularity of policy\n   control - after information is collapsed, the same\
    \ policies will\n   apply to all destinations and paths in the equivalence class.\n\
    \   The Decision Process may optionally reduce the amount of information\n   that\
    \ it will place in the Adj-RIBs-Out by any of the following\n   methods:\n   \
    \   a)   Network Layer Reachability Information (NLRI):\n      Destination IP\
    \ addresses can be represented as IP address\n      prefixes.  In cases where\
    \ there is a correspondence between the\n      address structure and the systems\
    \ under control of an autonomous\n      system administrator, it will be possible\
    \ to reduce the size of\n      the NLRI carried in the UPDATE messages.\n    \
    \  b)   AS_PATHs:\n      AS path information can be represented as ordered AS_SEQUENCEs\
    \ or\n      unordered AS_SETs. AS_SETs are used in the route aggregation\n   \
    \   algorithm described in 9.2.4.2. They reduce the size of the\n      AS_PATH\
    \ information by listing each AS number only once,\n      regardless of how many\
    \ times it may have appeared in multiple\n      AS_PATHs that were aggregated.\n\
    \      An AS_SET implies that the destinations listed in the NLRI can be\n   \
    \   reached through paths that traverse at least some of the\n      constituent\
    \ autonomous systems. AS_SETs provide sufficient\n      information to avoid routing\
    \ information looping; however their\n      use may prune potentially feasible\
    \ paths, since such paths are no\n      longer listed individually as in the form\
    \ of AS_SEQUENCEs.  In\n      practice this is not likely to be a problem, since\
    \ once an IP\n      packet arrives at the edge of a group of autonomous systems,\
    \ the\n      BGP speaker at that point is likely to have more detailed path\n\
    \      information and can distinguish individual paths to destinations.\n"
- title: 9.2.4.2 Aggregating Routing Information
  contents:
  - "9.2.4.2 Aggregating Routing Information\n   Aggregation is the process of combining\
    \ the characteristics of\n   several different routes in such a way that a single\
    \ route can be\n   advertised.  Aggregation can occur as part of the decision\
    \  process\n   to reduce the amount of routing information that will be placed\
    \ in\n   the Adj-RIBs-Out.\n   Aggregation reduces the amount of information that\
    \ a BGP speaker must\n   store and exchange with other BGP speakers. Routes can\
    \ be aggregated\n   by applying the following procedure separately to path attributes\
    \ of\n   like type and to the Network Layer Reachability Information.\n   Routes\
    \ that have the following attributes shall not be aggregated\n   unless the corresponding\
    \ attributes of each route are identical:\n   MULTI_EXIT_DISC, NEXT_HOP.\n   Path\
    \ attributes that have different type codes can not be aggregated\n   together.\
    \ Path of the same type code may be aggregated, according to\n   the following\
    \ rules:\n      ORIGIN attribute: If at least one route among routes that are\n\
    \      aggregated has ORIGIN with the value INCOMPLETE, then the\n      aggregated\
    \ route must have the ORIGIN attribute with the value\n      INCOMPLETE. Otherwise,\
    \ if at least one route among routes that are\n      aggregated has ORIGIN with\
    \ the value EGP, then the aggregated\n      route must have the origin attribute\
    \ with the value EGP. In all\n      other case the value of the ORIGIN attribute\
    \ of the aggregated\n      route is INTERNAL.\n      AS_PATH attribute: If routes\
    \ to be aggregated have identical\n      AS_PATH attributes, then the aggregated\
    \ route has the same AS_PATH\n      attribute as each individual route.\n    \
    \  For the purpose of aggregating AS_PATH attributes we model each AS\n      within\
    \ the AS_PATH attribute as a tuple <type, value>, where\n      \"type\" identifies\
    \ a type of the path segment the AS belongs to\n      (e.g. AS_SEQUENCE, AS_SET),\
    \ and \"value\" is the AS number.  If the\n      routes to be aggregated have\
    \ different AS_PATH attributes, then\n      the aggregated AS_PATH attribute shall\
    \ satisfy all of the\n      following conditions:\n         - all tuples of the\
    \ type AS_SEQUENCE in the aggregated AS_PATH\n         shall appear in all of\
    \ the AS_PATH in the initial set of routes\n         to be aggregated.\n     \
    \    - all tuples of the type AS_SET in the aggregated AS_PATH shall\n       \
    \  appear in at least one of the AS_PATH in the initial set (they\n         may\
    \ appear as either AS_SET or AS_SEQUENCE types).\n         - for any tuple X of\
    \ the type AS_SEQUENCE in the aggregated\n         AS_PATH which precedes tuple\
    \ Y in the aggregated AS_PATH, X\n         precedes Y in each AS_PATH in the initial\
    \ set which contains Y,\n         regardless of the type of Y.\n         - No\
    \ tuple with the same value shall appear more than once in\n         the aggregated\
    \ AS_PATH, regardless of the tuple's type.\n      An implementation may choose\
    \ any algorithm which conforms to these\n      rules.  At a minimum a conformant\
    \ implementation shall be able to\n      perform the following algorithm that\
    \ meets all of the above\n      conditions:\n         - determine the longest\
    \ leading sequence of tuples (as defined\n         above) common to all the AS_PATH\
    \ attributes of the routes to be\n         aggregated. Make this sequence the\
    \ leading sequence of the\n         aggregated AS_PATH attribute.\n         -\
    \ set the type of the rest of the tuples from the AS_PATH\n         attributes\
    \ of the routes to be aggregated to AS_SET, and append\n         them to the aggregated\
    \ AS_PATH attribute.\n         - if the aggregated AS_PATH has more than one tuple\
    \ with the\n         same value (regardless of tuple's type), eliminate all, but\
    \ one\n         such tuple by deleting tuples of the type AS_SET from the\n  \
    \       aggregated AS_PATH attribute.\n      Appendix 6, section 6.8 presents\
    \ another algorithm that satisfies\n      the conditions and  allows for more\
    \ complex policy configurations.\n      ATOMIC_AGGREGATE: If at least one of the\
    \ routes to be aggregated\n      has ATOMIC_AGGREGATE path attribute, then the\
    \ aggregated route\n      shall have this attribute as well.\n      AGGREGATOR:\
    \ All AGGREGATOR attributes of all routes to be\n      aggregated should be ignored.\n"
- title: 9.3   Route Selection Criteria
  contents:
  - "9.3   Route Selection Criteria\n   Generally speaking, additional rules for comparing\
    \ routes among\n   several alternatives are outside the scope of this document.\
    \  There\n   are two exceptions:\n      - If the local AS appears in the AS path\
    \ of the new route being\n      considered, then that new route cannot be viewed\
    \ as better than\n      any other route.  If such a route were ever used, a routing\
    \ loop\n      would result.\n      - In order to achieve successful distributed\
    \ operation, only\n      routes with a likelihood of stability can be chosen.\
    \  Thus, an AS\n      must avoid using unstable routes, and it must not make rapid\n\
    \      spontaneous changes to its choice of route.  Quantifying the terms\n  \
    \    \"unstable\" and \"rapid\" in the previous sentence will require\n      experience,\
    \ but the principle is clear.\n"
- title: 9.4   Originating BGP routes
  contents:
  - "9.4   Originating BGP routes\n   A BGP speaker may originate BGP routes by injecting\
    \ routing\n   information acquired by some other means (e.g. via an IGP) into\
    \ BGP.\n   A BGP speaker that originates BGP routes shall assign the degree of\n\
    \   preference to these routes by passing them through the Decision\n   Process\
    \ (see Section 9.1).  These routes may also be distributed to\n   other BGP speakers\
    \ within the local AS as part of the Internal update\n   process (see Section\
    \ 9.2.1). The decision whether to distribute non-\n   BGP acquired routes within\
    \ an AS via BGP or not depends on the\n   environment within the AS (e.g. type\
    \ of IGP) and should be controlled\n   via configuration.\n"
- title: Appendix 1.  BGP FSM State Transitions and Actions.
  contents:
  - "Appendix 1.  BGP FSM State Transitions and Actions.\n   This Appendix discusses\
    \ the transitions between states in the BGP FSM\n   in response to BGP events.\
    \  The following is the list of these states\n   and events when the negotiated\
    \ Hold Time value is non-zero.\n       BGP States:\n                1 - Idle\n\
    \                2 - Connect\n                3 - Active\n                4 -\
    \ OpenSent\n                5 - OpenConfirm\n                6 - Established\n\
    \       BGP Events:\n                1 - BGP Start\n                2 - BGP Stop\n\
    \                3 - BGP Transport connection open\n                4 - BGP Transport\
    \ connection closed\n                5 - BGP Transport connection open failed\n\
    \                6 - BGP Transport fatal error\n                7 - ConnectRetry\
    \ timer expired\n                8 - Hold Timer expired\n                9 - KeepAlive\
    \ timer expired\n               10 - Receive OPEN message\n               11 -\
    \ Receive KEEPALIVE message\n               12 - Receive UPDATE messages\n   \
    \            13 - Receive NOTIFICATION message\n   The following table describes\
    \ the state transitions of the BGP FSM\n   and the actions triggered by these\
    \ transitions.\n    Event                Actions               Message Sent  \
    \ Next State\n    --------------------------------------------------------------------\n\
    \    Idle (1)\n     1            Initialize resources            none        \
    \     2\n                  Start ConnectRetry timer\n                  Initiate\
    \ a transport connection\n     others               none                    none\
    \             1\n    Connect(2)\n     1                    none              \
    \      none             2\n     3            Complete initialization         OPEN\
    \             4\n                  Clear ConnectRetry timer\n     5          \
    \  Restart ConnectRetry timer      none             3\n     7            Restart\
    \ ConnectRetry timer      none             2\n                  Initiate a transport\
    \ connection\n     others       Release resources               none         \
    \    1\n    Active (3)\n     1                    none                    none\
    \             3\n     3            Complete initialization         OPEN      \
    \       4\n                  Clear ConnectRetry timer\n     5            Close\
    \ connection                                 3\n                  Restart ConnectRetry\
    \ timer\n     7            Restart ConnectRetry timer      none             2\n\
    \                  Initiate a transport connection\n     others       Release\
    \ resources               none             1\n    OpenSent(4)\n     1        \
    \            none                    none             4\n     4            Close\
    \ transport connection      none             3\n                  Restart ConnectRetry\
    \ timer\n     6            Release resources               none             1\n\
    \    10            Process OPEN is OK            KEEPALIVE          5\n      \
    \            Process OPEN failed           NOTIFICATION       1\n    others  \
    \      Close transport connection    NOTIFICATION       1\n                  Release\
    \ resources\n    OpenConfirm (5)\n     1                   none              \
    \       none             5\n     4            Release resources              \
    \ none             1\n     6            Release resources               none \
    \            1\n     9            Restart KeepAlive timer       KEEPALIVE    \
    \      5\n    11            Complete initialization         none             6\n\
    \                  Restart Hold Timer\n    13            Close transport connection\
    \                       1\n                  Release resources\n    others   \
    \     Close transport connection    NOTIFICATION       1\n                  Release\
    \ resources\n    Established (6)\n     1                   none              \
    \       none             6\n     4            Release resources              \
    \ none             1\n     6            Release resources               none \
    \            1\n     9            Restart KeepAlive timer       KEEPALIVE    \
    \      6\n    11            Restart Hold Timer            KEEPALIVE          6\n\
    \    12            Process UPDATE is OK          UPDATE             6\n      \
    \            Process UPDATE failed         NOTIFICATION       1\n    13      \
    \      Close transport connection                       1\n                  Release\
    \ resources\n    others        Close transport connection    NOTIFICATION    \
    \   1\n                  Release resources\n   ---------------------------------------------------------------------\n\
    \      The following is a condensed version of the above state transition\n  \
    \    table.\n   Events| Idle | Connect | Active | OpenSent | OpenConfirm | Estab\n\
    \         | (1)  |   (2)   |  (3)   |    (4)   |     (5)     |   (6)\n       \
    \  |--------------------------------------------------------------\n    1    |\
    \  2   |    2    |   3    |     4    |      5      |    6\n         |      | \
    \        |        |          |             |\n    2    |  1   |    1    |   1\
    \    |     1    |      1      |    1\n         |      |         |        |   \
    \       |             |\n    3    |  1   |    4    |   4    |     1    |     \
    \ 1      |    1\n         |      |         |        |          |             |\n\
    \    4    |  1   |    1    |   1    |     3    |      1      |    1\n        \
    \ |      |         |        |          |             |\n    5    |  1   |    3\
    \    |   3    |     1    |      1      |    1\n         |      |         |   \
    \     |          |             |\n    6    |  1   |    1    |   1    |     1 \
    \   |      1      |    1\n         |      |         |        |          |    \
    \         |\n    7    |  1   |    2    |   2    |     1    |      1      |   \
    \ 1\n         |      |         |        |          |             |\n    8    |\
    \  1   |    1    |   1    |     1    |      1      |    1\n         |      | \
    \        |        |          |             |\n    9    |  1   |    1    |   1\
    \    |     1    |      5      |    6\n         |      |         |        |   \
    \       |             |\n   10    |  1   |    1    |   1    |  1 or 5  |     \
    \ 1      |    1\n         |      |         |        |          |             |\n\
    \   11    |  1   |    1    |   1    |     1    |      6      |    6\n        \
    \ |      |         |        |          |             |\n   12    |  1   |    1\
    \    |   1    |     1    |      1      | 1 or 6\n         |      |         | \
    \       |          |             |\n   13    |  1   |    1    |   1    |     1\
    \    |      1      |    1\n         |      |         |        |          |   \
    \          |\n         ---------------------------------------------------------------\n"
- title: Appendix 2. Comparison with RFC1267
  contents:
  - "Appendix 2. Comparison with RFC1267\n   BGP-4 is capable of operating in an environment\
    \ where a set of\n   reachable destinations may be expressed via a single IP prefix.\
    \  The\n   concept of network classes, or subnetting is foreign to BGP-4.  To\n\
    \   accommodate these capabilities BGP-4 changes semantics and encoding\n   associated\
    \ with the AS_PATH attribute. New text has been added to\n   define semantics\
    \ associated with IP prefixes.  These abilities allow\n   BGP-4 to support the\
    \ proposed supernetting scheme [9].\n   To simplify configuration this version\
    \ introduces a new attribute,\n   LOCAL_PREF, that facilitates route selection\
    \ procedures.\n   The INTER_AS_METRIC attribute has been renamed to be MULTI_EXIT_DISC.\n\
    \   A new attribute, ATOMIC_AGGREGATE, has been introduced to insure that\n  \
    \ certain aggregates are not de-aggregated.  Another new attribute,\n   AGGREGATOR,\
    \ can be added to aggregate routes in order to advertise\n   which AS and which\
    \ BGP speaker within that AS caused the aggregation.\n   To insure that Hold Timers\
    \ are symmetric, the Hold Time is now\n   negotiated on a per-connection basis.\
    \  Hold Times of zero are now\n   supported.\n"
- title: Appendix 3.  Comparison with RFC 1163
  contents:
  - "Appendix 3.  Comparison with RFC 1163\n   All of the changes listed in Appendix\
    \ 2, plus the following.\n   To detect and recover from BGP connection collision,\
    \ a new field (BGP\n   Identifier) has been added to the OPEN message. New text\
    \ (Section\n   6.8) has been added to specify the procedure for detecting and\n\
    \   recovering from collision.\n   The new document no longer restricts the border\
    \ router that is passed\n   in the NEXT_HOP path attribute to be part of the same\
    \ Autonomous\n   System as the BGP Speaker.\n   New document optimizes and simplifies\
    \ the exchange of the information\n   about previously reachable routes.\n"
- title: Appendix 4.  Comparison with RFC 1105
  contents:
  - "Appendix 4.  Comparison with RFC 1105\n   All of the changes listed in Appendices\
    \ 2 and 3, plus the following.\n   Minor changes to the RFC1105 Finite State Machine\
    \ were necessary to\n   accommodate the TCP user interface provided by 4.3 BSD.\n\
    \   The notion of Up/Down/Horizontal relations present in RFC1105 has\n   been\
    \ removed from the protocol.\n   The changes in the message format from RFC1105\
    \ are as follows:\n      1.  The Hold Time field has been removed from the BGP\
    \ header and\n      added to the OPEN message.\n      2.  The version field has\
    \ been removed from the BGP header and\n      added to the OPEN message.\n   \
    \   3.  The Link Type field has been removed from the OPEN message.\n      4.\
    \  The OPEN CONFIRM message has been eliminated and replaced with\n      implicit\
    \ confirmation provided by the KEEPALIVE message.\n      5.  The format of the\
    \ UPDATE message has been changed\n      significantly.  New fields were added\
    \ to the UPDATE message to\n      support multiple path attributes.\n      6.\
    \  The Marker field has been expanded and its role broadened to\n      support\
    \ authentication.\n      Note that quite often BGP, as specified in RFC 1105,\
    \ is referred\n      to as BGP-1, BGP, as specified in RFC 1163, is referred to\
    \ as\n      BGP-2, BGP, as specified in RFC1267 is referred to as BGP-3, and\n\
    \      BGP, as specified in this document is referred to as BGP-4.\n"
- title: Appendix 5.  TCP options that may be used with BGP
  contents:
  - "Appendix 5.  TCP options that may be used with BGP\n   If a local system TCP\
    \ user interface supports TCP PUSH function, then\n   each BGP message should\
    \ be transmitted with PUSH flag set.  Setting\n   PUSH flag forces BGP messages\
    \ to be transmitted promptly to the\n   receiver.\n   If a local system TCP user\
    \ interface supports setting precedence for\n   TCP connection, then the BGP transport\
    \ connection should be opened\n   with precedence set to Internetwork Control\
    \ (110) value (see also\n   [6]).\n"
- title: Appendix 6.  Implementation Recommendations
  contents:
  - "Appendix 6.  Implementation Recommendations\n   This section presents some implementation\
    \ recommendations.\n"
- title: 6.1 Multiple Networks Per Message
  contents:
  - "6.1 Multiple Networks Per Message\n   The BGP protocol allows for multiple address\
    \ prefixes with the same\n   AS path and next-hop gateway to be specified in one\
    \ message. Making\n   use of this capability is highly recommended. With one address\
    \ prefix\n   per message there is a substantial increase in overhead in the\n\
    \   receiver. Not only does the system overhead increase due to the\n   reception\
    \ of multiple messages, but the overhead of scanning the\n   routing table for\
    \ updates to BGP peers and other routing protocols\n   (and sending the associated\
    \ messages) is incurred multiple times as\n   well. One method of building messages\
    \ containing many address\n   prefixes per AS path and gateway from a routing\
    \ table that is not\n   organized per AS path is to build many messages as the\
    \ routing table\n   is scanned. As each address prefix is processed, a message\
    \ for the\n   associated AS path and gateway is allocated, if it does not exist,\n\
    \   and the new address prefix is added to it.  If such a message exists,\n  \
    \ the new address prefix is just appended to it. If the message lacks\n   the\
    \ space to hold the new address prefix, it is transmitted, a new\n   message is\
    \ allocated, and the new address prefix is inserted into the\n   new message.\
    \ When the entire routing table has been scanned, all\n   allocated messages are\
    \ sent and their resources released.  Maximum\n   compression is achieved when\
    \ all  the destinations covered by the\n   address prefixes share a gateway and\
    \ common path attributes, making\n   it possible to send many address prefixes\
    \ in one 4096-byte message.\n   When peering with a BGP implementation that does\
    \ not compress\n   multiple address prefixes into one message, it may be necessary\
    \ to\n   take steps to reduce the overhead from the flood of data received\n \
    \  when a peer is acquired or a significant network topology change\n   occurs.\
    \ One method of doing this is to limit the rate of updates.\n   This will eliminate\
    \ the redundant scanning of the routing table to\n   provide flash updates for\
    \ BGP peers and other routing protocols. A\n   disadvantage of this approach is\
    \ that it increases the propagation\n   latency of routing information.  By choosing\
    \ a minimum flash update\n   interval that is not much greater than the time it\
    \ takes to process\n   the multiple messages this latency should be minimized.\
    \ A better\n   method would be to read all received messages before sending updates.\n"
- title: 6.2  Processing Messages on a Stream Protocol
  contents:
  - "6.2  Processing Messages on a Stream Protocol\n   BGP uses TCP as a transport\
    \ mechanism.  Due to the stream nature of\n   TCP, all the data for received messages\
    \ does not necessarily arrive\n   at the same time. This can make it difficult\
    \ to process the data as\n   messages, especially on systems such as BSD Unix\
    \ where it is not\n   possible to determine how much data has been received but\
    \ not yet\n   processed.\n   One method that can be used in this situation is\
    \ to first try to read\n   just the message header. For the KEEPALIVE message\
    \ type, this is a\n   complete message; for other message types, the header should\
    \ first be\n   verified, in particular the total length. If all checks are\n \
    \  successful, the specified length, minus the size of the message\n   header\
    \ is the amount of data left to read. An implementation that\n   would \"hang\"\
    \ the routing information process while trying to read\n   from a peer could set\
    \ up a message buffer (4096 bytes) per peer and\n   fill it with data as available\
    \ until a complete message has been\n   received.\n"
- title: 6.3 Reducing route flapping
  contents:
  - "6.3 Reducing route flapping\n   To avoid excessive route flapping a BGP speaker\
    \ which needs to\n   withdraw a destination and send an update about a more specific\
    \ or\n   less specific route shall combine them into the same UPDATE message.\n"
- title: 6.4 BGP Timers
  contents:
  - "6.4 BGP Timers\n   BGP employs five timers: ConnectRetry, Hold Time, KeepAlive,\n\
    \   MinASOriginationInterval, and MinRouteAdvertisementInterval The\n   suggested\
    \ value for the ConnectRetry timer is 120 seconds.  The\n   suggested value for\
    \ the Hold Time is 90 seconds.  The suggested value\n   for the KeepAlive timer\
    \ is 30 seconds.  The suggested value for the\n   MinASOriginationInterval is\
    \ 15 seconds.  The suggested value for the\n   MinRouteAdvertisementInterval is\
    \ 30 seconds.\n   An implementation of BGP MUST allow these timers to be configurable.\n"
- title: 6.5 Path attribute ordering
  contents:
  - "6.5 Path attribute ordering\n   Implementations which combine update messages\
    \ as described above in\n   6.1 may prefer to see all path attributes presented\
    \ in a known order.\n   This permits them to quickly identify sets of attributes\
    \ from\n   different update messages which are semantically identical.  To\n \
    \  facilitate this, it is a useful optimization to order the path\n   attributes\
    \ according to type code.  This optimization is entirely\n    optional.\n"
- title: 6.6 AS_SET sorting
  contents:
  - "6.6 AS_SET sorting\n   Another useful optimization that can be done to simplify\
    \ this\n   situation is to sort the AS numbers found in an AS_SET.  This\n   optimization\
    \ is entirely optional.\n"
- title: 6.7 Control over version negotiation
  contents:
  - "6.7 Control over version negotiation\n   Since BGP-4 is capable of carrying aggregated\
    \ routes which cannot be\n   properly represented in BGP-3, an implementation\
    \ which supports BGP-4\n   and another BGP version should provide the capability\
    \ to only speak\n   BGP-4 on a per-peer basis.\n"
- title: 6.8 Complex AS_PATH aggregation
  contents:
  - "6.8 Complex AS_PATH aggregation\n   An implementation which chooses to provide\
    \ a path aggregation\n   algorithm which retains significant amounts of path information\
    \ may\n   wish to use the following procedure:\n      For the purpose of aggregating\
    \ AS_PATH attributes of two routes,\n      we model each AS as a tuple <type,\
    \ value>, where \"type\" identifies\n      a type of the path segment the AS belongs\
    \ to (e.g.  AS_SEQUENCE,\n      AS_SET), and \"value\" is the AS number.  Two\
    \ ASs are said to be the\n      same if their corresponding <type, value> tuples\
    \ are the same.\n      The algorithm to aggregate two AS_PATH attributes works\
    \ as\n      follows:\n         a) Identify the same ASs (as defined above) within\
    \ each AS_PATH\n         attribute that are in the same relative order within\
    \ both\n         AS_PATH attributes.  Two ASs, X and Y, are said to be in the\n\
    \         same order if either:\n            - X precedes Y in both AS_PATH attributes,\
    \ or - Y precedes X\n            in both AS_PATH attributes.\n         b) The\
    \ aggregated AS_PATH attribute consists of ASs identified\n         in (a) in\
    \ exactly the same order as they appear in the AS_PATH\n         attributes to\
    \ be aggregated. If two consecutive ASs identified\n         in (a) do not immediately\
    \ follow each other in both of the\n         AS_PATH attributes to be aggregated,\
    \ then the intervening ASs\n         (ASs that are between the two consecutive\
    \ ASs that are the\n         same) in both attributes are combined into an AS_SET\
    \ path\n         segment that consists of the intervening ASs from both AS_PATH\n\
    \         attributes; this segment is then placed in between the two\n       \
    \  consecutive ASs identified in (a) of the aggregated attribute.\n         If\
    \ two consecutive ASs identified in (a) immediately follow\n         each other\
    \ in one attribute, but do not follow in another, then\n         the intervening\
    \ ASs of the latter are combined into an AS_SET\n         path segment; this segment\
    \ is then placed in between the two\n         consecutive ASs identified in (a)\
    \ of the aggregated attribute.\n      If as a result of the above procedure a\
    \ given AS number appears\n      more than once within the aggregated AS_PATH\
    \ attribute, all, but\n      the last instance (rightmost occurrence) of that\
    \ AS number should\n      be removed from the aggregated AS_PATH attribute.\n"
- title: References
  contents:
  - "References\n   [1] Mills, D., \"Exterior Gateway Protocol Formal Specification\"\
    , RFC\n       904, BBN, April 1984.\n   [2] Rekhter, Y., \"EGP and Policy Based\
    \ Routing in the New NSFNET\n       Backbone\", RFC 1092, T.J. Watson Research\
    \ Center, February 1989.\n   [3] Braun, H-W., \"The NSFNET Routing Architecture\"\
    , RFC 1093,\n       MERIT/NSFNET Project, February 1989.\n   [4] Postel, J., \"\
    Transmission Control Protocol - DARPA Internet\n       Program Protocol Specification\"\
    , STD 7, RFC 793, DARPA, September\n       1981.\n   [5] Rekhter, Y., and P. Gross,\
    \ \"Application of the Border Gateway\n       Protocol in the Internet\", RFC\
    \ 1772, T.J. Watson Research Center,\n       IBM Corp., MCI, March 1995.\n   [6]\
    \ Postel, J., \"Internet Protocol - DARPA Internet Program Protocol\n       Specification\"\
    , STD 5, RFC 791, DARPA, September 1981.\n   [7] \"Information Processing Systems\
    \ - Telecommunications and\n       Information Exchange between Systems - Protocol\
    \ for Exchange of\n       Inter-domain Routeing Information among Intermediate\
    \ Systems to\n       Support Forwarding of ISO 8473 PDUs\", ISO/IEC IS10747, 1993\n\
    \   [8] Fuller, V., Li, T., Yu, J., and K. Varadhan, \"Classless Inter-\n    \
    \   Domain Routing (CIDR): an Address Assignment and Aggregation\n       Strategy\"\
    , RFC 1519, BARRNet, cisco, MERIT, OARnet, September\n       1993\n   [9] Rekhter,\
    \ Y., Li, T., \"An Architecture for IP Address Allocation\n       with CIDR\"\
    , RFC 1518, T.J. Watson Research Center, cisco,\n       September 1993\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this document.\n"
- title: Editors' Addresses
  contents:
  - "Editors' Addresses\n   Yakov Rekhter\n   T.J. Watson Research Center IBM Corporation\n\
    \   P.O. Box 704, Office H3-D40\n   Yorktown Heights, NY 10598\n   Phone:  +1\
    \ 914 784 7361\n   EMail:  yakov@watson.ibm.com\n   Tony Li\n   cisco Systems,\
    \ Inc.\n   170 W. Tasman Dr.\n   San Jose, CA 95134\n   EMail: tli@cisco.com\n"
