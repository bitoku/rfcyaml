- title: __initial_text__
  contents:
  - "      Internet Small Computer System Interface (iSCSI) Extensions\n         \
    \        for Remote Direct Memory Access (RDMA)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   Internet Small Computer System Interface (iSCSI) Extensions for\n\
    \   Remote Direct Memory Access (RDMA) provides the RDMA data transfer\n   capability\
    \ to iSCSI by layering iSCSI on top of an RDMA-Capable\n   Protocol, such as the\
    \ iWARP protocol suite.  An RDMA-Capable Protocol\n   provides RDMA Read and Write\
    \ services, which enable data to be\n   transferred directly into SCSI I/O Buffers\
    \ without intermediate data\n   copies.  This document describes the extensions\
    \ to the iSCSI protocol\n   to support RDMA services as provided by an RDMA-Capable\
    \ Protocol,\n   such as the iWARP protocol suite.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................5\n\
    \      1.1. Motivation .................................................5\n  \
    \    1.2. Architectural Goals ........................................6\n    \
    \  1.3. Protocol Overview ..........................................7\n      1.4.\
    \ RDMA Services and iSER .....................................8\n           1.4.1.\
    \ STag ................................................8\n           1.4.2. Send\
    \ ................................................9\n           1.4.3. RDMA Write\
    \ ..........................................9\n           1.4.4. RDMA Read ...........................................9\n\
    \      1.5. SCSI Read Overview ........................................10\n  \
    \    1.6. SCSI Write Overview .......................................10\n    \
    \  1.7. iSCSI/iSER Layering .......................................10\n   2. Definitions\
    \ and Acronyms .......................................11\n      2.1. Definitions\
    \ ...............................................11\n      2.2. Acronyms ..................................................17\n\
    \      2.3. Conventions ...............................................19\n  \
    \ 3. Upper Layer Interface Requirements .............................19\n    \
    \  3.1. Operational Primitives Offered by iSER ....................20\n      \
    \     3.1.1. Send_Control .......................................20\n        \
    \   3.1.2. Put_Data ...........................................20\n          \
    \ 3.1.3. Get_Data ...........................................21\n           3.1.4.\
    \ Allocate_Connection_Resources ......................21\n           3.1.5. Deallocate_Connection_Resources\
    \ ....................22\n           3.1.6. Enable_Datamover ...................................22\n\
    \           3.1.7. Connection_Terminate ...............................22\n  \
    \         3.1.8. Notice_Key_Values ..................................23\n    \
    \       3.1.9. Deallocate_Task_Resources ..........................23\n      3.2.\
    \ Operational Primitives Used by iSER .......................23\n           3.2.1.\
    \ Control_Notify .....................................24\n           3.2.2. Data_Completion_Notify\
    \ .............................24\n           3.2.3. Data_ACK_Notify ....................................24\n\
    \           3.2.4. Connection_Terminate_Notify ........................25\n  \
    \    3.3. iSCSI Protocol Usage Requirements .........................25\n   4.\
    \ Lower Layer Interface Requirements .............................26\n      4.1.\
    \ Interactions with the RCaP Layer ..........................26\n      4.2. Interactions\
    \ with the Transport Layer .....................27\n   5. Connection Setup and\
    \ Termination ...............................27\n      5.1. iSCSI/iSER Connection\
    \ Setup ...............................27\n           5.1.1. Initiator Behavior\
    \ .................................29\n           5.1.2. Target Behavior ....................................30\n\
    \           5.1.3. iSER Hello Exchange ................................32\n  \
    \    5.2. iSCSI/iSER Connection Termination .........................33\n    \
    \       5.2.1. Normal Connection Termination at the Initiator .....33\n      \
    \     5.2.2. Normal Connection Termination at the Target ........34\n        \
    \   5.2.3. Termination without Logout Request/Response PDUs ...34\n   6. Login/Text\
    \ Operational Keys ....................................35\n      6.1. HeaderDigest\
    \ and DataDigest ...............................35\n      6.2. MaxRecvDataSegmentLength\
    \ ..................................36\n      6.3. RDMAExtensions ............................................36\n\
    \      6.4. TargetRecvDataSegmentLength ...............................37\n  \
    \    6.5. InitiatorRecvDataSegmentLength ............................38\n    \
    \  6.6. OFMarker and IFMarker .....................................38\n      6.7.\
    \ MaxOutstandingUnexpectedPDUs ..............................38\n   7. iSCSI PDU\
    \ Considerations .......................................39\n      7.1. iSCSI Data-Type\
    \ PDU .......................................39\n      7.2. iSCSI Control-Type\
    \ PDU ....................................40\n      7.3. iSCSI PDUs ................................................40\n\
    \           7.3.1. SCSI Command .......................................40\n  \
    \         7.3.2. SCSI Response ......................................42\n    \
    \       7.3.3. Task Management Function Request/Response ..........44\n      \
    \     7.3.4. SCSI Data-Out ......................................45\n        \
    \   7.3.5. SCSI Data-In .......................................46\n          \
    \ 7.3.6. Ready to Transfer (R2T) ............................48\n           7.3.7.\
    \ Asynchronous Message ...............................50\n           7.3.8. Text\
    \ Request and Text Response .....................50\n           7.3.9. Login Request\
    \ and Login Response ...................50\n           7.3.10. Logout Request\
    \ and Logout Response ................51\n           7.3.11. SNACK Request .....................................51\n\
    \           7.3.12. Reject ............................................51\n  \
    \         7.3.13. NOP-Out and NOP-In ................................51\n   8.\
    \ Flow Control and STag Management ...............................52\n      8.1.\
    \ Flow Control for RDMA Send Message Types ..................52\n           8.1.1.\
    \ Flow Control for Control-Type PDUs from the\n                  Initiator ..........................................52\n\
    \           8.1.2. Flow Control for Control-Type PDUs from the\n             \
    \     Target .............................................55\n      8.2. Flow\
    \ Control for RDMA Read Resources ......................56\n      8.3. STag Management\
    \ ...........................................56\n           8.3.1. Allocation\
    \ of STags ................................57\n           8.3.2. Invalidation\
    \ of STags ..............................57\n   9. iSER Control and Data Transfer\
    \ .................................58\n      9.1. iSER Header Format ........................................58\n\
    \      9.2. iSER Header Format for the iSCSI Control-Type PDU .........59\n  \
    \    9.3. iSER Header Format for the iSER Hello Message .............60\n    \
    \  9.4. iSER Header Format for the iSER HelloReply Message ........61\n      9.5.\
    \ SCSI Data Transfer Operations .............................62\n           9.5.1.\
    \ SCSI Write Operation ...............................62\n           9.5.2. SCSI\
    \ Read Operation ................................63\n           9.5.3. Bidirectional\
    \ Operation ............................64\n   10. iSER Error Handling and Recovery\
    \ ..............................64\n      10.1. Error Handling ...........................................64\n\
    \           10.1.1. Errors in the Transport Layer .....................64\n  \
    \         10.1.2. Errors in the RCaP Layer ..........................65\n    \
    \       10.1.3. Errors in the iSER Layer ..........................66\n      \
    \     10.1.4. Errors in the iSCSI Layer .........................67\n      10.2.\
    \ Error Recovery ...........................................69\n           10.2.1.\
    \ PDU Recovery ......................................69\n           10.2.2. Connection\
    \ Recovery ...............................70\n   11. Security Considerations .......................................71\n\
    \   12. References ....................................................71\n  \
    \    12.1. Normative References .....................................71\n    \
    \  12.2. Informative References ...................................72\n   Appendix\
    \ A. iWARP Message Format for iSER .........................73\n      A.1. iWARP\
    \ Message Format for iSER Hello Message ...............73\n      A.2. iWARP Message\
    \ Format for iSER HelloReply Message ..........74\n      A.3. iWARP Message Format\
    \ for SCSI Read Command PDU ............75\n      A.4. iWARP Message Format for\
    \ SCSI Read Data ...................76\n      A.5. iWARP Message Format for SCSI\
    \ Write Command PDU ...........77\n      A.6. iWARP Message Format for RDMA Read\
    \ Request ................78\n      A.7. iWARP Message Format for Solicited SCSI\
    \ Write Data ........79\n      A.8. iWARP Message Format for SCSI Response PDU\
    \ ................80\n   Appendix B. Architectural Discussion of iSER over InfiniBand\
    \ ......81\n      B.1. The Host Side of the iSCSI and iSER Connections\n     \
    \      in InfiniBand .............................................81\n      B.2.\
    \ The Storage Side of the iSCSI and iSER Mixed\n           Network Environment\
    \ .......................................82\n      B.3. Discovery Processes for\
    \ an InfiniBand Host ................82\n      B.4. IBTA Connection Specifications\
    \ ............................83\n   Acknowledgments ...................................................83\n"
- title: Table of Figures
  contents:
  - "Table of Figures\n   Figure 1. Example of iSCSI/iSER Layering in Full Feature\
    \ Phase ....11\n   Figure 2. iSER Header Format ......................................58\n\
    \   Figure 3. iSER Header Format for iSCSI Control-Type PDU ...........59\n  \
    \ Figure 4. iSER Header Format for iSER Hello Message ...............60\n   Figure\
    \ 5. iSER Header Format for iSER HelloReply Message ..........61\n   Figure 6.\
    \ SendSE Message containing an iSER Hello Message .........72\n   Figure 7. SendSE\
    \ Message containing an iSER HelloReply Message ....74\n   Figure 8. SendSE Message\
    \ containing a SCSI Read Command PDU .......75\n   Figure 9. RDMA Write Message\
    \ containing SCSI Read Data ............76\n   Figure 10. SendSE Message containing\
    \ a SCSI Write Command PDU .....77\n   Figure 11. RDMA Read Request Message ..............................78\n\
    \   Figure 12. RDMA Read Response Message containing SCSI Write Data ..79\n  \
    \ Figure 13. SendInvSE Message containing SCSI Response PDU .........80\n   Figure\
    \ 14. iSCSI and iSER on IB ...................................81\n   Figure 15.\
    \ Storage Controller with TCP, iWARP, and IB Connections .82\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Motivation
  contents:
  - "1.1.  Motivation\n   The iSCSI protocol [RFC3720] is a mapping of the SCSI Architecture\n\
    \   Model (see [SAM2]) over the TCP protocol.  SCSI commands are carried\n   by\
    \ iSCSI requests, and SCSI responses and status are carried by iSCSI\n   responses.\
    \  Other iSCSI protocol exchanges and SCSI data are also\n   transported in iSCSI\
    \ Protocol Data Units (PDUs).\n   Out-of-order TCP segments in the Traditional\
    \ iSCSI model have to be\n   stored and reassembled before the iSCSI protocol\
    \ layer within an end\n   node can place the data in the iSCSI buffers.  This\
    \ reassembly is\n   required because not every TCP segment is likely to contain\
    \ an iSCSI\n   header to enable its placement, and TCP itself does not have a\n\
    \   built-in mechanism for signaling Upper Level Protocol (ULP) message\n   boundaries\
    \ to aid placement of out-of-order segments.  This TCP\n   reassembly at high\
    \ network speeds is quite counter-productive for the\n   following reasons: wasted\
    \ memory bandwidth in data copying, the need\n   for reassembly memory, wasted\
    \ CPU cycles in data copying, and the\n   general store-and-forward latency from\
    \ an application perspective.\n   TCP reassembly was recognized as a serious issue\
    \ in [RFC3720], and\n   the notion of a \"sync and steering layer\" was introduced\
    \ that is\n   optional to implement and use.  One specific sync and steering\n\
    \   mechanism, called \"markers\", was defined in [RFC3720], which provides\n\
    \   an application-level way of framing iSCSI Protocol Data Units (PDUs)\n   within\
    \ the TCP data stream even when the TCP segments are not yet\n   reassembled to\
    \ be in-order.\n   With these defined techniques in [RFC3720], a Network Interface\n\
    \   Controller customized for iSCSI (SNIC) could offload the TCP/IP\n   processing\
    \ and support direct data placement, but most iSCSI\n   implementations do not\
    \ support iSCSI \"markers\", making SNIC marker-\n   based direct data placement\
    \ unusable in practice.\n   The iWARP protocol stack provides direct data placement\
    \ functionality\n   that is usable in practice.  In addition, there is interest\
    \ in using\n   iSCSI with other Remote Direct Memory Access (RDMA) protocol stacks\n\
    \   that support direct data placement, such as the one provided by\n   InfiniBand.\
    \  The generic term RDMA-Capable Protocol (RCaP) is used to\n   refer to the RDMA\
    \ functionality provided by such protocol stacks.\n   With the availability of\
    \ RDMA-Capable Controllers within a host\n   system, which does not have SNICs,\
    \ it is appropriate for iSCSI to be\n   able to exploit the direct data placement\
    \ function of the RDMA-\n   Capable Controller like other applications.\n   iSCSI\
    \ Extensions for RDMA (iSER) is designed precisely to take\n   advantage of generic\
    \ RDMA technologies -- iSER's goal is to permit\n   iSCSI to employ direct data\
    \ placement and RDMA capabilities using a\n   generic RDMA-Capable Controller.\
    \  In summary, the iSCSI/iSER protocol\n   stack is designed to enable scaling\
    \ to high speeds by relying on a\n   generic data placement process and RDMA technologies\
    \ and products,\n   which enable direct data placement of both in-order and out-of-order\n\
    \   data.\n   This document describes iSER as a protocol extension to iSCSI, both\n\
    \   for convenience of description and because it is true in a very\n   strict\
    \ protocol sense.  However, note that iSER is in reality\n   extending the connectivity\
    \ of the iSCSI protocol defined in\n   [RFC3720], and the name iSER reflects this\
    \ reality.\n   When the iSCSI protocol as defined in [RFC3720] (i.e., without\
    \ the\n   iSER enhancements) is intended in the rest of the document, the term\n\
    \   \"Traditional iSCSI\" is used to make the intention clear.\n"
- title: 1.2.  Architectural Goals
  contents:
  - "1.2.  Architectural Goals\n   This section summarizes the architectural goals\
    \ that guided the\n   design of iSER.\n   1. Provide an RDMA data transfer model\
    \ for iSCSI that enables direct\n      in-order or out-of-order data placement\
    \ of SCSI data into pre-\n      allocated SCSI buffers while maintaining in-order\
    \ data delivery.\n   2. Not require any major changes to the SCSI Architecture\
    \ Model\n      [SAM2] and SCSI command set standards.\n   3. Utilize existing\
    \ iSCSI infrastructure (sometimes referred to as\n      \"iSCSI ecosystem\") including\
    \ but not limited to MIB,\n      bootstrapping, negotiation, naming and discovery,\
    \ and security.\n   4. Require a session to operate in the Traditional iSCSI data\n\
    \      transfer mode if iSER is not supported by either the initiator or\n   \
    \   the target (i.e., not require iSCSI Full Feature Phase\n      interoperability\
    \ between an end node operating in Traditional\n      iSCSI mode, and an end node\
    \ operating in iSER-assisted mode).\n   5. Allow initiator and target implementations\
    \ to utilize generic\n      RDMA-Capable Controllers such as RDMA-enabled Network\
    \ Interface\n      Controllers (RNICs), or to implement iSCSI and iSER in software\n\
    \      (not require iSCSI- or iSER-specific assists in the RCaP\n      implementation\
    \ or RDMA-Capable Controller).\n   6. Require full and only generic RCaP functionality\
    \ at both the\n      initiator and the target.\n   7. Implement a lightweight\
    \ Datamover protocol for iSCSI with minimal\n      state maintenance.\n"
- title: 1.3.  Protocol Overview
  contents:
  - "1.3.  Protocol Overview\n   Consistent with the architectural goals stated in\
    \ Section 2.2, the\n   iSER protocol does not require changes in the iSCSI ecosystem\
    \ or any\n   related SCSI specifications.  The iSER protocol defines the mapping\n\
    \   of iSCSI PDUs to RCaP Messages in such a way that it is entirely\n   feasible\
    \ to realize iSCSI/iSER implementations that are based on\n   generic RDMA-Capable\
    \ Controllers.  The iSER protocol layer requires\n   minimal state maintenance\
    \ to assist an iSCSI Full Feature Phase\n   connection, besides being oblivious\
    \ to the notion of an iSCSI\n   session.  The crucial protocol aspects of iSER\
    \ may be summarized\n   thus:\n   1. iSER-assisted mode is negotiated during the\
    \ iSCSI login for each\n      session, and an entire iSCSI session can only operate\
    \ in one mode\n      (i.e., a connection in a session cannot operate in iSER-assisted\n\
    \      mode if a different connection of the same session is already in\n    \
    \  Full Feature Phase in the Traditional iSCSI mode).\n   2. Once in iSER-assisted\
    \ mode, all iSCSI interactions on that\n      connection use RCaP Messages.\n\
    \   3. A Send Message Type is used for carrying an iSCSI control-type PDU\n  \
    \    preceded by an iSER header.  See Section 7.2 for more details on\n      iSCSI\
    \ control-type PDUs.\n   4. RDMA Write, RDMA Read Request, and RDMA Read Response\
    \ Messages are\n      used for carrying control and all data information associated\
    \ with\n      the iSCSI data-type PDUs.  See Section 7.1 for more details on\n\
    \      iSCSI data-type PDUs.\n   5. Target drives all data transfer (with the\
    \ exception of iSCSI\n      unsolicited data) for SCSI writes and SCSI reads,\
    \ by issuing RDMA\n      Read Requests and RDMA Writes, respectively.\n   6. RCaP\
    \ is responsible for ensuring data integrity.  (For example,\n      iWARP includes\
    \ a CRC-enhanced framing layer called Marker PDU\n      Aligned Framing for TCP\
    \ (MPA) on top of TCP; and for InfiniBand,\n      the CRCs are included in the\
    \ Reliable Connection mode).  For this\n      reason, iSCSI header and data digests\
    \ are negotiated to \"None\" for\n      iSCSI/iSER sessions.\n   7. The iSCSI\
    \ error recovery hierarchy defined in [RFC3720] is fully\n      supported by iSER.\
    \  (However, see Section 7.3.11 on the handling\n      of SNACK Request PDUs.)\n\
    \   8. iSER requires no changes to iSCSI authentication, security, and\n     \
    \ text mode negotiation mechanisms.\n   Note that Traditional iSCSI implementations\
    \ may have to be adapted to\n   employ iSER.  It is expected that the adaptation\
    \ when required is\n   likely to be centered around the upper layer interface\
    \ requirements\n   of iSER (Section 3).\n"
- title: 1.4.  RDMA Services and iSER
  contents:
  - "1.4.  RDMA Services and iSER\n   iSER is designed to work with software and/or\
    \ hardware protocol\n   stacks providing the protocol services defined in RCaP\
    \ documents such\n   as [RDMAP], [IB], etc.  The following subsections describe\
    \ the key\n   protocol elements of RCaP services that iSER relies on.\n"
- title: 1.4.1.  STag
  contents:
  - "1.4.1.  STag\n   A Steering Tag (STag) is the identifier of an I/O Buffer unique\
    \ to an\n   RDMA-Capable Controller that the iSER layer Advertises to the remote\n\
    \   iSCSI/iSER node in order to complete a SCSI I/O.\n   In iSER, Advertisement\
    \ is the act of informing the target by the\n   initiator that an I/O Buffer is\
    \ available at the initiator for RDMA\n   Read or RDMA Write access by the target.\
    \  The initiator Advertises\n   the I/O Buffer by including the STag in the header\
    \ of an iSER Message\n   containing the SCSI Command PDU to the target.  The base\
    \ Tagged\n   Offset is not explicitly specified, but the target must always assume\n\
    \   it as zero.  The buffer length is as specified in the SCSI Command\n   PDU.\n\
    \   The iSER layer at the initiator Advertises the STag for the I/O\n   Buffer\
    \ of each SCSI I/O to the iSER layer at the target in the iSER\n   header of the\
    \ Send with Solicited Event (SendSE) Message containing\n   the SCSI Command PDU,\
    \ unless the I/O can be completely satisfied by\n   unsolicited data alone.\n\
    \   The iSER layer at the target provides the STag for the I/O Buffer\n   that\
    \ is the Data Sink of an RDMA Read Operation (Section 2.4.4) to\n   the RCaP layer\
    \ on the initiator node -- i.e., this is completely\n   transparent to the iSER\
    \ layer at the initiator.\n   The iSER protocol is defined so that the Advertised\
    \ STag is\n   automatically invalidated upon a normal completion of the associated\n\
    \   task.  This automatic invalidation is realized via the Send with\n   Solicited\
    \ Event and Invalidate (SendInvSE) Message carrying the SCSI\n   Response PDU.\
    \  There are two exceptions to this automatic\n   invalidation -- bidirectional\
    \ commands, and abnormal completion of a\n   command.  The iSER layer at the initiator\
    \ is required to explicitly\n   invalidate the STag in these cases, in addition\
    \ to sanity checking\n   the automatic invalidation even when that does happen.\n"
- title: 1.4.2.  Send
  contents:
  - "1.4.2.  Send\n   Send is the RDMA Operation that is not addressed to an Advertised\n\
    \   buffer by the sending side, and thus uses Untagged buffers on the\n   receiving\
    \ side.\n   The iSER layer at the initiator uses the Send Operation to transmit\n\
    \   any iSCSI control-type PDU to the target.  As an example, the\n   initiator\
    \ uses Send Operations to transfer iSER Messages containing\n   SCSI Command PDUs\
    \ to the iSER layer at the target.\n   An iSER layer at the target uses the Send\
    \ Operation to transmit any\n   iSCSI control-type PDU to the initiator.  As an\
    \ example, the target\n   uses Send Operations to transfer iSER Messages containing\
    \ SCSI\n   Response PDUs to the iSER layer at the initiator.\n"
- title: 1.4.3.  RDMA Write
  contents:
  - "1.4.3.  RDMA Write\n   RDMA Write is the RDMA Operation that is used to place\
    \ data into an\n   Advertised buffer on the receiving side.  The sending side\
    \ addresses\n   the Message using an STag and a Tagged Offset that are valid on\
    \ the\n   Data Sink.\n   The iSER layer at the target uses the RDMA Write Operation\
    \ to\n   transfer the contents of a local I/O Buffer to an Advertised I/O\n  \
    \ Buffer at the initiator.  The iSER layer at the target uses the RDMA\n   Write\
    \ to transfer whole or part of the data required to complete a\n   SCSI read command.\n\
    \   The iSER layer at the initiator does not employ RDMA Writes.\n"
- title: 1.4.4.  RDMA Read
  contents:
  - "1.4.4.  RDMA Read\n   RDMA Read is the RDMA Operation that is used to retrieve\
    \ data from an\n   Advertised buffer on a remote node.  The sending side of the\
    \ RDMA\n   Read Request addresses the Message using an STag and a Tagged Offset\n\
    \   that are valid on the Data Source in addition to providing a valid\n   local\
    \ STag and Tagged Offset that identify the Data Sink.\n   The iSER layer at the\
    \ target uses the RDMA Read Operation to transfer\n   the contents of an Advertised\
    \ I/O Buffer at the initiator to a local\n   I/O Buffer at the target.  The iSER\
    \ layer at the target uses the RDMA\n   Read to fetch whole or part of the data\
    \ required to complete a SCSI\n   write command.\n   The iSER layer at the initiator\
    \ does not employ RDMA Reads.\n"
- title: 1.5.  SCSI Read Overview
  contents:
  - "1.5.  SCSI Read Overview\n   The iSER layer at the initiator receives the SCSI\
    \ Command PDU from\n   the iSCSI layer.  The iSER layer at the initiator generates\
    \ an STag\n   for the I/O Buffer of the SCSI Read and Advertises the buffer by\n\
    \   including the STag as part of the iSER header for the PDU.  The iSER\n   Message\
    \ is transferred to the target using a SendSE Message.\n   The iSER layer at the\
    \ target uses one or more RDMA Writes to transfer\n   the data required to complete\
    \ the SCSI Read.\n   The iSER layer at the target uses a SendInvSE Message to\
    \ transfer the\n   SCSI Response PDU back to the iSER layer at the initiator.\
    \  The iSER\n   layer at the initiator notifies the iSCSI layer of the availability\n\
    \   of the SCSI Response PDU.\n"
- title: 1.6.  SCSI Write Overview
  contents:
  - "1.6.  SCSI Write Overview\n   The iSER layer at the initiator receives the SCSI\
    \ Command PDU from\n   the iSCSI layer.  If solicited data transfer is involved,\
    \ the iSER\n   layer at the initiator generates an STag for the I/O Buffer of\
    \ the\n   SCSI Write and Advertises the buffer by including the STag as part of\n\
    \   the iSER header for the PDU.  The iSER Message is transferred to the\n   target\
    \ using a SendSE Message.\n   The iSER layer at the initiator may optionally send\
    \ one or more non-\n   immediate unsolicited data PDUs to the target using Send\
    \ Message\n   Types.\n   If solicited data transfer is involved, the iSER layer\
    \ at the target\n   uses one or more RDMA Reads to transfer the data required\
    \ to complete\n   the SCSI Write.\n   The iSER layer at the target uses a SendInvSE\
    \ Message to transfer the\n   SCSI Response PDU back to the iSER layer at the\
    \ initiator.  The iSER\n   layer at the initiator notifies the iSCSI layer of\
    \ the availability\n   of the SCSI Response PDU.\n"
- title: 1.7.  iSCSI/iSER Layering
  contents:
  - "1.7.  iSCSI/iSER Layering\n   iSCSI Extensions for RDMA (iSER) is layered between\
    \ the iSCSI layer\n   and the RCaP layer.  Note that the RCaP layer may be composed\
    \ of one\n   or more distinct protocol layers depending on the specifics of the\n\
    \   RCaP.  Figure 1 shows an example of the relationship between SCSI,\n   iSCSI,\
    \ iSER, and the different RCaP layers.  For TCP, the RCaP is\n   iWARP.  For InfiniBand,\
    \ the RCaP is the Reliable Connected Transport\n   Service.  Note that the iSCSI\
    \ layer as described here supports the\n   RDMA Extensions as used in iSER.\n\
    \                 +-------------------------------------+\n                 |\
    \              SCSI                   |\n                 +-------------------------------------+\n\
    \                 |              iSCSI                  |\n      DI ------> +-------------------------------------+\n\
    \                 |              iSER                   |\n                 +---------+--------------+------------+\n\
    \                 |  RDMAP  |              |            |\n                 +---------+\
    \  InfiniBand  |            |\n                 |   DDP   |   Reliable   |   Other\
    \    |\n                 +---------+  Connected   |   RDMA-    |\n           \
    \      |   MPA   |  Transport   |  Capable   |\n                 +---------+ \
    \  Service    |  Protocol  |\n                 |   TCP   |              |    \
    \        |\n                 +---------+--------------+------------+\n       \
    \          |         |  InfiniBand  |   Other    |\n                 |    IP \
    \  |   Network    |  Network   |\n                 |         |    Layer     |\
    \   Layer    |\n                 +---------+--------------+------------+\n   Figure\
    \ 1.  Example of iSCSI/iSER Layering in Full Feature Phase\n"
- title: 2.  Definitions and Acronyms
  contents:
  - '2.  Definitions and Acronyms

    '
- title: 2.1.  Definitions
  contents:
  - "2.1.  Definitions\n   Advertisement (Advertised, Advertise, Advertisements, Advertises)\
    \ -\n      The act of informing a remote iSER layer that a local node's\n    \
    \  buffer is available to it.  A Node makes a buffer available for\n      incoming\
    \ RDMA Read Request Message or incoming RDMA Write Message\n      access by informing\
    \ the remote iSER layer of the Tagged Buffer\n      identifiers (STag, TO, and\
    \ buffer length).  Note that this\n      Advertisement of Tagged Buffer information\
    \ is the responsibility\n      of the iSER layer on either end and is not defined\
    \ by the RDMA-\n      Capable Protocol.  A typical method would be for the iSER\
    \ layer to\n      embed the Tagged Buffer's STag, TO, and buffer length in a Send\n\
    \      Message destined for the remote iSER layer.\n   Completion (Completed,\
    \ Complete, Completes) - Completion is defined\n      as the process by the RDMA-Capable\
    \ Protocol layer to inform the\n      iSER layer, that a particular RDMA Operation\
    \ has performed all\n      functions specified for the RDMA Operation.\n   Connection\
    \ - A connection is a logical circuit between the initiator\n      and the target,\
    \ e.g., a TCP connection.  Communication between the\n      initiator and the\
    \ target occurs over one or more connections.  The\n      connections carry control\
    \ messages, SCSI commands, parameters, and\n      data within iSCSI Protocol Data\
    \ Units (iSCSI PDUs).\n   Connection Handle - An information element that identifies\
    \ the\n      particular iSCSI connection and is unique for a given iSCSI-iSER\n\
    \      pair.  Every invocation of an Operational Primitive is qualified\n    \
    \  with the Connection Handle.\n   Data Sink - The peer receiving a data payload.\
    \  Note that the Data\n      Sink can be required to both send and receive RCaP\
    \ Messages to\n      transfer a data payload.\n   Data Source - The peer sending\
    \ a data payload.  Note that the Data\n      Source can be required to both send\
    \ and receive RCaP Messages to\n      transfer a data payload.\n   Datamover Interface\
    \ (DI) - The interface between the iSCSI layer and\n      the Datamover layer\
    \ as described in [DA].\n   Datamover Layer - A layer that is directly below the\
    \ iSCSI layer and\n      above the underlying transport layers.  This layer exposes\
    \ and\n      uses a set of transport independent Operational Primitives for the\n\
    \      communication between the iSCSI layer and itself.  The Datamover\n    \
    \  layer, operating in conjunction with the transport layers, moves\n      the\
    \ control and data information on the iSCSI connection.  In this\n      specification,\
    \ the iSER layer is the Datamover layer.\n   Datamover Protocol - A Datamover\
    \ protocol is the wire-protocol that\n      is defined to realize the Datamover\
    \ layer functionality.  In this\n      specification, the iSER protocol is the\
    \ Datamover protocol.\n   Event - An indication provided by the RDMA-Capable Protocol\
    \ layer to\n      the iSER layer to indicate a Completion or other condition\n\
    \      requiring immediate attention.\n   Inbound RDMA Read Queue Depth (IRD)\
    \ - The maximum number of incoming\n      outstanding RDMA Read Requests that\
    \ the RDMA-Capable Controller\n      can handle on a particular RCaP Stream at\
    \ the Data Source.  For\n      some RDMA-Capable Protocol layers, the term \"\
    IRD\" may be known by\n      a different name.  For example, for InfiniBand, the\
    \ equivalent for\n      IRD is the Responder Resources.\n   Invalidate STag -\
    \ A mechanism used to prevent the Remote Peer from\n      reusing a previous explicitly\
    \ Advertised STag, until the iSER\n      layer at the local node makes it available\
    \ through a subsequent\n      explicit Advertisement.\n   I/O Buffer - A buffer\
    \ that is used in a SCSI Read or Write operation\n      so SCSI data may be sent\
    \ from or received into that buffer.\n   iSCSI - The iSCSI protocol as defined\
    \ in [RFC3720] is a mapping of\n      the SCSI Architecture Model of SAM-2 over\
    \ TCP.\n   iSCSI control-type PDU - Any iSCSI PDU that is not an iSCSI data-\n\
    \      type PDU and also not a SCSI Data-out PDU carrying solicited data\n   \
    \   is defined as an iSCSI control-type PDU.  Specifically, it is to\n      be\
    \ noted that SCSI Data-out PDUs for unsolicited data are defined\n      as iSCSI\
    \ control-type PDUs.\n   iSCSI data-type PDU - An iSCSI data-type PDU is defined\
    \ as an iSCSI\n      PDU that causes data transfer, transparent to the remote\
    \ iSCSI\n      layer, to take place between the peer iSCSI nodes on a Full\n \
    \     Feature Phase iSCSI connection.  An iSCSI data-type PDU, when\n      requested\
    \ for transmission by the sender iSCSI layer, results in\n      the associated\
    \ data transfer without the participation of the\n      remote iSCSI layer, i.e.\
    \ the PDU itself is not delivered as-is to\n      the remote iSCSI layer.  The\
    \ following iSCSI PDUs constitute the\n      set of iSCSI data-type PDUs - SCSI\
    \ Data-In PDU and R2T PDU.\n   iSCSI Layer - A layer in the protocol stack implementation\
    \ within an\n      end node that implements the iSCSI protocol and interfaces\
    \ with\n      the iSER layer via the Datamover Interface.\n   iSCSI PDU (iSCSI\
    \ Protocol Data Unit) - The iSCSI layer at the\n      initiator and the iSCSI\
    \ layer at the target divide their\n      communications into messages.  The term\
    \ \"iSCSI protocol data unit\"\n      (iSCSI PDU) is used for these messages.\n\
    \   iSCSI/iSER Connection - An iSER-assisted iSCSI connection.\n   iSCSI/iSER\
    \ Session - An iSER-assisted iSCSI session.\n   iSCSI-iSER Pair - The iSCSI layer\
    \ and the underlying iSER layer.\n   iSER - iSCSI Extensions for RDMA, the protocol\
    \ defined in this\n      document.\n   iSER-assisted - A term generally used to\
    \ describe the operation of\n      iSCSI when the iSER functionality is also enabled\
    \ below the iSCSI\n      layer for the specific iSCSI/iSER connection in question.\n\
    \   iSER-IRD - This variable represents the maximum number of incoming\n     \
    \ outstanding RDMA Read Requests that the iSER layer at the\n      initiator declares\
    \ on a particular RCaP Stream.\n   iSER-ORD - This variable represents the maximum\
    \ number of outstanding\n      RDMA Read Requests that the iSER layer can initiate\
    \ on a\n      particular RCaP Stream.  This variable is maintained only by the\n\
    \      iSER layer at the target.\n   iSER Layer - The layer that implements the\
    \ iSCSI Extensions for RDMA\n      (iSER) protocol.\n   iWARP - A suite of wire\
    \ protocols comprising of [RDMAP], [DDP], and\n      [MPA] when layered above\
    \ [TCP].  [RDMAP] and [DDP] may be layered\n      above SCTP or other transport\
    \ protocols.\n   Local Mapping - A task state record maintained by the iSER layer\
    \ that\n      associates the Initiator Task Tag to the local STag(s).  The\n \
    \     specifics of the record structure are implementation dependent.\n   Local\
    \ Peer - The implementation of the RDMA-Capable Protocol on the\n      local end\
    \ of the connection.  Used to refer to the local entity\n      when describing\
    \ protocol exchanges or other interactions between\n      two Nodes.\n   Node\
    \ - A computing device attached to one or more links of a network.\n      A Node\
    \ in this context does not refer to a specific application or\n      protocol\
    \ instantiation running on the computer.  A Node may\n      consist of one or\
    \ more RDMA-Capable Controllers installed in a\n      host computer.\n   Operational\
    \ Primitive - An Operational Primitive is an abstract\n      functional interface\
    \ procedure that requests that another layer\n      perform a specific action\
    \ on the requestor's behalf or notifies\n      the other layer of some event.\
    \  The Datamover Interface between an\n      iSCSI layer and a Datamover layer\
    \ within an iSCSI end node uses a\n      set of Operational Primitives to define\
    \ the functional interface\n      between the two layers.  Note that not every\
    \ invocation of an\n      Operational Primitive may elicit a response from the\
    \ requested\n      layer.  A full discussion of the Operational Primitive types\
    \ and\n      request-response semantics available to iSCSI and iSER can be\n \
    \     found in [DA].\n   Outbound RDMA Read Queue Depth (ORD) - The maximum number\
    \ of\n      outstanding RDMA Read Requests that the RDMA-Capable Controller\n\
    \      can initiate on a particular RCaP Stream at the Data Sink.  For\n     \
    \ some RDMA-Capable Protocol layer, the term \"ORD\" may be known by a\n     \
    \ different name.  For example, for InfiniBand, the equivalent for\n      ORD\
    \ is the Initiator Depth.\n   Phase-Collapse - Refers to the optimization in iSCSI\
    \ where the SCSI\n      status is transferred along with the final SCSI Data-in\
    \ PDU from a\n      target.  See Section 3.2 in [RFC3720].\n   RCaP Message -\
    \ One or more packets of the network layer comprising a\n      single RDMA Operation\
    \ or a part of an RDMA Read Operation of the\n      RDMA-Capable Protocol.  For\
    \ iWARP, an RCaP Message is known as an\n      RDMAP Message.\n   RCaP Stream\
    \ - A single bidirectional association between the peer\n      RDMA-Capable Protocol\
    \ layers on two Nodes over a single\n      transport-level stream.  For iWARP,\
    \ an RCaP Stream is known as an\n      RDMAP Stream, and the association is created\
    \ when the connection\n      transitions to iSER-assisted mode following a successful\
    \ Login\n      Phase during which iSER support is negotiated.\n   RDMA-Capable\
    \ Protocol (RCaP) - The protocol or protocol suite that\n      provides a reliable\
    \ RDMA transport functionality, e.g., iWARP,\n      InfiniBand, etc.\n   RDMA-Capable\
    \ Controller - A network I/O adapter or embedded\n      controller with RDMA functionality.\
    \  For example, for iWARP, this\n      could be an RNIC, and for InfiniBand, this\
    \ could be a HCA (Host\n      Channel Adapter) or TCA (Target Channel Adapter).\n\
    \   RDMA-enabled Network Interface Controller (RNIC) - A network I/O\n      adapter\
    \ or embedded controller with iWARP functionality.\n   RDMA Operation - A sequence\
    \ of RCaP Messages, including control\n      Messages, to transfer data from a\
    \ Data Source to a Data Sink.  The\n      following RDMA Operations are defined\
    \ - RDMA Write Operation, RDMA\n      Read Operation, Send Operation, Send with\
    \ Invalidate Operation,\n      Send with Solicited Event Operation, Send with\
    \ Solicited Event and\n      Invalidate Operation, and Terminate Operation.\n\
    \   RDMA Protocol (RDMAP) - A wire protocol that supports RDMA Operations\n  \
    \    to transfer ULP data between a Local Peer and the Remote Peer as\n      described\
    \ in [RDMAP].\n   RDMA Read Operation - An RDMA Operation used by the Data Sink\
    \ to\n      transfer the contents of a Data Source buffer from the Remote Peer\n\
    \      to a Data Sink buffer at the Local Peer.  An RDMA Read operation\n    \
    \  consists of a single RDMA Read Request Message and a single RDMA\n      Read\
    \ Response Message.\n   RDMA Read Request - An RCaP Message used by the Data Sink\
    \ to request\n      that the Data Source transfer the contents of a buffer.  The\
    \ RDMA\n      Read Request Message describes both the Data Source and the Data\n\
    \      Sink buffers.\n   RDMA Read Response - An RCaP Message used by the Data\
    \ Source to\n      transfer the contents of a buffer to the Data Sink, in response\
    \ to\n      an RDMA Read Request.  The RDMA Read Response Message only\n     \
    \ describes the Data Sink buffer.\n   RDMA Write Operation - An RDMA Operation\
    \ used by the Data Source to\n      transfer the contents of a Data Source buffer\
    \ from the Local Peer\n      to a Data Sink buffer at the Remote Peer.  The RDMA\
    \ Write Message\n      only describes the Data Sink buffer.\n   Remote Direct\
    \ Memory Access (RDMA) - A method of accessing memory on\n      a remote system\
    \ in which the local system specifies the remote\n      location of the data to\
    \ be transferred.  Employing an RDMA-\n      Capable Controller in the remote\
    \ system allows the access to take\n      place without interrupting the processing\
    \ of the CPU(s) on the\n      system.\n   Remote Mapping - A task state record\
    \ maintained by the iSER layer\n      that associates the Initiator Task Tag to\
    \ the Advertised STag(s).\n      The specifics of the record structure are implementation\n\
    \      dependent.\n   Remote Peer - The implementation of the RDMA-Capable Protocol\
    \ on the\n      opposite end of the connection.  Used to refer to the remote\n\
    \      entity when describing protocol exchanges or other interactions\n     \
    \ between two Nodes.\n   SCSI Layer - This layer builds/receives SCSI CDBs (Command\
    \ Descriptor\n      Blocks) and sends/receives them with the remaining command\
    \ execute\n      [SAM2] parameters to/from the iSCSI layer.\n   Send - An RDMA\
    \ Operation that transfers the contents of a Buffer from\n      the Local Peer\
    \ to a Buffer at the Remote Peer.\n   Send Message Type - A Send Message, Send\
    \ with Invalidate Message,\n      Send with Solicited Event Message, or Send with\
    \ Solicited Event\n      and Invalidate Message.\n   SendInvSE Message - A Send\
    \ with Solicited Event and Invalidate\n      Message.\n   SendSE Message - A Send\
    \ with Solicited Event Message.\n   Sequence Number (SN) - DataSN for a SCSI Data-in\
    \ PDU and R2TSN for an\n      R2T PDU.  The semantics for both types of sequence\
    \ numbers are as\n      defined in [RFC3720].\n   Session, iSCSI Session - The\
    \ group of connections that link an\n      initiator SCSI port with a target SCSI\
    \ port form an iSCSI session\n      (equivalent to a SCSI I-T nexus).  Connections\
    \ can be added to and\n      removed from a session even while the I-T nexus is\
    \ intact.  Across\n      all connections within a session, an initiator sees one\
    \ and the\n      same target.\n   Solicited Event (SE) - A facility by which an\
    \ RDMA Operation sender\n      may cause an Event to be generated at the recipient,\
    \ if the\n      recipient is configured to generate such an Event, when a Send\n\
    \      with Solicited Event or Send with Solicited Event and Invalidate\n    \
    \  Message is received.\n   Steering Tag (STag) - An identifier of a Tagged Buffer\
    \ on a Node\n      (Local or Remote) as defined in [RDMAP] and [DDP].  For other\n\
    \      RDMA-Capable Protocols, the Steering Tag may be known by different\n  \
    \    names but will be herein referred to as STags.  For example, for\n      InfiniBand,\
    \ a Remote STag is known as an R-Key, and a local STag\n      is known as an L-Key,\
    \ and both will be considered STags.\n   Tagged Buffer - A buffer that is explicitly\
    \ Advertised to the iSER\n      layer at the remote node through the exchange\
    \ of an STag, Tagged\n      Offset, and length.\n   Tagged Offset (TO) - The offset\
    \ within a Tagged Buffer.\n   Traditional iSCSI - Refers to the iSCSI protocol\
    \ as defined in\n      [RFC3720] (i.e. without the iSER enhancements).\n   Untagged\
    \ Buffer - A buffer that is not explicitly Advertised to the\n      iSER layer\
    \ at the remode node.\n"
- title: 2.2.  Acronyms
  contents:
  - "2.2.  Acronyms\n      Acronym        Definition\n      --------------------------------------------------------------\n\
    \      AHS            Additional Header Segment\n      BHS            Basic Header\
    \ Segment\n      CO             Connection Only\n      CRC            Cyclic Redundancy\
    \ Check\n      DDP            Direct Data Placement Protocol\n      DI       \
    \      Datamover Interface\n      HCA            Host Channel Adapter\n      IANA\
    \           Internet Assigned Numbers Authority\n      IB             InfiniBand\n\
    \      IETF           Internet Engineering Task Force\n      I/O            Input\
    \ - Output\n      IO             Initialize Only\n      IP             Internet\
    \ Protocol\n      IPoIB          IP over InfiniBand\n      IPsec          Internet\
    \ Protocol Security\n      iSER           iSCSI Extensions for RDMA\n      ITT\
    \            Initiator Task Tag\n      LO             Leading Only\n      MPA\
    \            Marker PDU Aligned Framing for TCP\n      NOP            No Operation\n\
    \      NSG            Next Stage (during the iSCSI Login Phase)\n      OS    \
    \         Operating System\n      PDU            Protocol Data Unit\n      R2T\
    \            Ready To Transfer\n      R2TSN          Ready To Transfer Sequence\
    \ Number\n      RDMA           Remote Direct Memory Access\n      RDMAP      \
    \    Remote Direct Memory Access Protocol\n      RFC            Request For Comments\n\
    \      RNIC           RDMA-enabled Network Interface Controller\n      SAM2  \
    \         SCSI Architecture Model - 2\n      SCSI           Small Computer Systems\
    \ Interface\n      SNACK          Selective Negative Acknowledgment - also\n \
    \                    Sequence Number Acknowledgement for data\n      STag    \
    \       Steering Tag\n      SW             Session Wide\n      TCA           \
    \ Target Channel Adapter\n      TCP            Transmission Control Protocol\n\
    \      TMF            Task Management Function\n      TTT            Target Transfer\
    \ Tag\n      TO             Tagged Offset\n      ULP            Upper Level Protocol\n"
- title: 2.3.  Conventions
  contents:
  - "2.3.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n"
- title: 3.  Upper Layer Interface Requirements
  contents:
  - "3.  Upper Layer Interface Requirements\n   This section discusses the upper layer\
    \ interface requirements in the\n   form of an abstract model of the required\
    \ interactions between the\n   iSCSI layer and the iSER layer.  The abstract model\
    \ used here is\n   derived from the architectural model described in [DA].  [DA]\
    \ also\n   provides a functional overview of the interactions between the iSCSI\n\
    \   layer and the Datamover layer as intended by the Datamover\n   Architecture.\n\
    \   The interface requirements are specified by Operational Primitives.\n   An\
    \ Operational Primitive is an abstract functional interface\n   procedure between\
    \ the iSCSI layer and the iSER layer that requests\n   one layer to perform a\
    \ specific action on behalf of the other layer\n   or notifies the other layer\
    \ of some event.  Whenever an Operational\n   Primitive in invoked, the Connection_Handle\
    \ qualifier is used to\n   identify a particular iSCSI connection.  For some Operational\n\
    \   Primitives, a Data_Descriptor is used to identify the iSCSI/SCSI data\n  \
    \ buffer associated with the requested or completed operation.\n   The abstract\
    \ model and the Operational Primitives defined in this\n   section facilitate\
    \ the description of the iSER protocol.  In the rest\n   of the iSER specification,\
    \ the compliance statements related to the\n   use of these Operational Primitives\
    \ are only for the purpose of the\n   required interactions between the iSCSI\
    \ layer and the iSER layer.\n   Note that the compliance statements related to\
    \ the Operational\n   Primitives in the rest of this specification only mandate\
    \ functional\n   equivalence on implementations, but do not put any requirements\
    \ on\n   the implementation specifics of the interface between the iSCSI layer\n\
    \   and the iSER layer.\n   Each Operational Primitive is invoked with a set of\
    \ qualifiers that\n   specify the information context for performing the specific\
    \ action\n   being requested of the Operational Primitive.  While the qualifiers\n\
    \   are required, the method of realizing the qualifiers (e.g., by\n   passing\
    \ synchronously with invocation, or by retrieving from task\n   context, or by\
    \ retrieving from shared memory, etc.) is implementation\n   dependent.\n"
- title: 3.1.  Operational Primitives Offered by iSER
  contents:
  - "3.1.  Operational Primitives Offered by iSER\n   The iSER protocol layer MUST\
    \ support the following Operational\n   Primitives to be used by the iSCSI protocol\
    \ layer.\n"
- title: 3.1.1.  Send_Control
  contents:
  - "3.1.1.  Send_Control\n      Input qualifiers:  Connection_Handle, BHS and AHS\
    \ (if any) of the\n      iSCSI PDU, PDU-specific qualifiers\n      Return results:\
    \  Not specified\n   This is used by the iSCSI layers at the initiator and the\
    \ target to\n   request the outbound transfer of an iSCSI control-type PDU (see\n\
    \   Section 7.2).  Qualifiers that only apply for a particular control-\n   type\
    \ PDU are known as PDU-specific qualifiers, e.g.,\n   ImmediateDataSize for a\
    \ SCSI write command.  For details on PDU-\n   specific qualifiers, see Section\
    \ 7.3.  The iSCSI layer can only\n   invoke the Send_Control Operational Primitive\
    \ when the connection is\n   in iSER-assisted mode.\n"
- title: 3.1.2.  Put_Data
  contents:
  - "3.1.2.  Put_Data\n      Input qualifiers:  Connection_Handle, content of a SCSI\
    \ Data-in\n      PDU header, Data_Descriptor, Notify_Enable\n      Return results:\
    \  Not specified\n   This is used by the iSCSI layer at the target to request\
    \ the outbound\n   transfer of data for a SCSI Data-in PDU from the buffer identified\
    \ by\n   the Data_Descriptor qualifier.  The iSCSI layer can only invoke the\n\
    \   Put_Data Operational Primitive when the connection is in iSER-\n   assisted\
    \ mode.\n   The Notify_Enable qualifier is used to indicate to the iSER layer\n\
    \   whether or not it should generate an eventual local completion\n   notification\
    \ to the iSCSI layer.  See Section 3.2.2 on\n   Data_Completion_Notify for details.\n"
- title: 3.1.3.  Get_Data
  contents:
  - "3.1.3.  Get_Data\n      Input qualifiers:  Connection_Handle, content of an R2T\
    \ PDU,\n      Data_Descriptor, Notify_Enable\n      Return results:  Not specified\n\
    \   This is used by the iSCSI layer at the target to request the inbound\n   transfer\
    \ of solicited data requested by an R2T PDU into the buffer\n   identified by\
    \ the Data_Descriptor qualifier.  The iSCSI layer can\n   only invoke the Get_Data\
    \ Operational Primitive when the connection is\n   in iSER-assisted mode.\n  \
    \ The Notify_Enable qualifier is used to indicate to the iSER layer\n   whether\
    \ or not it should generate the eventual local completion\n   notification to\
    \ the iSCSI layer.  See Section 3.2.2 on\n   Data_Completion_Notify for details.\n"
- title: 3.1.4.  Allocate_Connection_Resources
  contents:
  - "3.1.4.  Allocate_Connection_Resources\n      Input qualifiers:  Connection_Handle,\
    \ Resource_Descriptor\n      (optional)\n      Return results:  Status\n   This\
    \ is used by the iSCSI layers at the initiator and the target to\n   request the\
    \ allocation of all connection resources necessary to\n   support RCaP for an\
    \ operational iSCSI/iSER connection.  The iSCSI\n   layer may optionally specify\
    \ the implementation-specific resource\n   requirements for the iSCSI connection\
    \ using the Resource_Descriptor\n   qualifier.\n   A return result of Status=success\
    \ means that the invocation\n   succeeded, and a return result of Status=failure\
    \ means that the\n   invocation failed.  If the invocation is for a Connection_Handle\
    \ for\n   which an earlier invocation succeeded, the request will be ignored by\n\
    \   the iSER layer and the result of Status=success will be returned.\n   Only\
    \ one Allocate_Connection_Resources Operational Primitive\n   invocation can be\
    \ outstanding for a given Connection_Handle at any\n   time.\n"
- title: 3.1.5.  Deallocate_Connection_Resources
  contents:
  - "3.1.5.  Deallocate_Connection_Resources\n      Input qualifiers:  Connection_Handle\n\
    \      Return results:  Not specified\n   This is used by the iSCSI layers at\
    \ the initiator and the target to\n   request the deallocation of all connection\
    \ resources that were\n   allocated earlier as a result of a successful invocation\
    \ of the\n   Allocate_Connection_Resources Operational Primitive.\n"
- title: 3.1.6.  Enable_Datamover
  contents:
  - "3.1.6.  Enable_Datamover\n      Input qualifiers:  Connection_Handle,\n     \
    \ Transport_Connection_Descriptor, Final Login_Response_PDU\n      (optional)\n\
    \      Return results:  Not specified\n   This is used by the iSCSI layers at\
    \ the initiator and the target to\n   request that a specified iSCSI connection\
    \ be transitioned to iSER-\n   assisted mode.  The Transport_Connection_Descriptor\
    \ qualifier is used\n   to identify the specific connection associated with the\n\
    \   Connection_Handle.  The iSCSI layer can only invoke the\n   Enable_Datamover\
    \ Operational Primitive when there is a corresponding\n   prior resource allocation.\n\
    \   The Final_Login_Response_PDU input qualifier is applicable only for a\n  \
    \ target, and contains the final Login Response PDU that concludes the\n   iSCSI\
    \ Login Phase.  If the underlying transport is TCP, the final\n   Login Response\
    \ PDU must be sent as a byte stream as expected by the\n   iSCSI layer at the\
    \ initiator.  When this qualifier is used, the iSER\n   layer at the target MUST\
    \ transmit this final Login Response PDU\n   before transitioning to iSER-assisted\
    \ mode.\n"
- title: 3.1.7.  Connection_Terminate
  contents:
  - "3.1.7.  Connection_Terminate\n      Input qualifiers:  Connection_Handle\n  \
    \    Return results:  Not specified\n   This is used by the iSCSI layers at the\
    \ initiator and the target to\n   request that a specified iSCSI/iSER connection\
    \ be terminated and all\n   associated connection and task resources be freed.\
    \  When this\n   Operational Primitive invocation returns to the iSCSI layer,\
    \ the\n   iSCSI layer may assume full ownership of all iSCSI-level resources,\n\
    \   e.g., I/O Buffers, associated with the connection.\n"
- title: 3.1.8.  Notice_Key_Values
  contents:
  - "3.1.8.  Notice_Key_Values\n      Input qualifiers:  Connection_Handle, number\
    \ of keys, list of\n      Key-Value pairs\n      Return results:  Not specified\n\
    \   This is used by the iSCSI layers at the initiator and the target to\n   request\
    \ that the iSER layer take note of the specified Key-Value\n   pairs that were\
    \ negotiated by the iSCSI peers for the connection.\n"
- title: 3.1.9.  Deallocate_Task_Resources
  contents:
  - "3.1.9.  Deallocate_Task_Resources\n      Input qualifiers:  Connection_Handle,\
    \ ITT\n      Return results:  Not specified\n   This is used by the iSCSI layers\
    \ at the initiator and the target to\n   request the deallocation of all RCaP-specific\
    \ resources allocated by\n   the iSER layer for the task identified by the ITT\
    \ qualifier.  The\n   iSER layer may require a certain number of RCaP-specific\
    \ resources\n   associated with the ITT for each new iSCSI task.  In the normal\n\
    \   course of execution, these task-level resources in the iSER layer are\n  \
    \ assumed to be transparently allocated on each task initiation and\n   deallocated\
    \ on the conclusion of each task as appropriate.  In\n   exception scenarios where\
    \ the task does not conclude with a SCSI\n   Response PDU, the iSER layer needs\
    \ to be notified of the individual\n   task terminations to aid its task-level\
    \ resource management.  This\n   Operational Primitive is used for this purpose,\
    \ and is not needed\n   when a SCSI Response PDU normally concludes a task.  Note\
    \ that RCaP-\n   specific task resources are deallocated by the iSER layer when\
    \ a SCSI\n   Response PDU normally concludes a task, even if the SCSI status was\n\
    \   not success.\n"
- title: 3.2.  Operational Primitives Used by iSER
  contents:
  - "3.2.  Operational Primitives Used by iSER\n   The iSER layer MUST use the following\
    \ Operational Primitives offered\n   by the iSCSI protocol layer when the connection\
    \ is in iSER-assisted\n   mode.\n"
- title: 3.2.1.  Control_Notify
  contents:
  - "3.2.1.  Control_Notify\n      Input qualifiers:  Connection_Handle, an iSCSI\
    \ control-type PDU\n      Return results:  Not specified\n   This is used by the\
    \ iSER layers at the initiator and the target to\n   notify the iSCSI layer of\
    \ the availability of an inbound iSCSI\n   control-type PDU.  A PDU is described\
    \ as \"available\" to the iSCSI\n   layer when the iSER layer notifies the iSCSI\
    \ layer of the reception\n   of that inbound PDU, along with an implementation-specific\
    \ indication\n   as to where the received PDU is.\n"
- title: 3.2.2.  Data_Completion_Notify
  contents:
  - "3.2.2.  Data_Completion_Notify\n      Input qualifiers:  Connection_Handle, ITT,\
    \ SN\n      Return results:  Not specified\n   This is used by the iSER layer\
    \ to notify the iSCSI layer of the\n   completion of outbound data transfer that\
    \ was requested by the iSCSI\n   layer only if the invocation of the Put_Data\
    \ Operational Primitive\n   (see Section 3.1.2) was qualified with Notify_Enable\
    \ set.  SN refers\n   to the DataSN associated with the SCSI Data-in PDU.\n  \
    \ This is used by the iSER layer to notify the iSCSI layer of the\n   completion\
    \ of inbound data transfer that was requested by the iSCSI\n   layer only if the\
    \ invocation of the Get_Data Operational Primitive\n   (see Section 3.1.3) was\
    \ qualified with Notify_Enable set.  SN refers\n   to the R2TSN associated with\
    \ the R2T PDU.\n"
- title: 3.2.3.  Data_ACK_Notify
  contents:
  - "3.2.3.  Data_ACK_Notify\n      Input qualifier:  Connection_Handle, ITT, DataSN\n\
    \      Return results:  Not specified\n   This is used by the iSER layer at the\
    \ target to notify the iSCSI\n   layer of the arrival of the data acknowledgement\
    \ (as defined in\n   [RFC3720]) requested earlier by the iSCSI layer for the outbound\
    \ data\n   transfer via an invocation of the Put_Data Operational Primitive\n\
    \   where the A-bit in the SCSI Data-in PDU is set to 1.  See Section\n   7.3.5.\
    \  DataSN refers to the expected DataSN of the next SCSI Data-in\n   PDU, which\
    \ immediately follows the SCSI Data-in PDU with the A-bit\n   set to which this\
    \ notification corresponds, with semantics as defined\n   in [RFC3720].\n"
- title: 3.2.4.  Connection_Terminate_Notify
  contents:
  - "3.2.4.  Connection_Terminate_Notify\n      Input qualifiers:  Connection_Handle\n\
    \      Return results:  Not specified\n   This is used by the iSER layers at the\
    \ initiator and the target to\n   notify the iSCSI layer of the unsolicited termination\
    \ or failure of\n   an iSCSI/iSER connection.  The iSER layer MUST deallocate\
    \ the\n   connection and task resources associated with the terminated\n   connection\
    \ before the invocation of this Operational Primitive.  Note\n   that the Connection_Terminate_Notify\
    \ Operational Primitive is not\n   invoked when the termination of the connection\
    \ is earlier requested\n   by the local iSCSI layer.\n"
- title: 3.3.  iSCSI Protocol Usage Requirements
  contents:
  - "3.3.  iSCSI Protocol Usage Requirements\n   To operate in an iSER-assisted mode,\
    \ the iSCSI layers at both the\n   initiator and the target MUST negotiate the\
    \ RDMAExtensions key (see\n   Section 6.3) to \"Yes\" on the leading connection.\
    \  If the\n   RDMAExtensions key is not negotiated to \"Yes\", then iSER-assisted\n\
    \   mode MUST NOT be used.  If the RDMAExtensions key is negotiated to\n   \"\
    Yes\" but the invocation of the Allocate_Connection_Resources\n   Operational\
    \ Primitive to the iSER layer fails, the iSCSI layer MUST\n   fail the iSCSI Login\
    \ process or terminate the connection as\n   appropriate.  See Section 10.1.3.1\
    \ for details.\n   If the RDMAExtensions key is negotiated to \"Yes\", the iSCSI\
    \ layer\n   MUST satisfy the following protocol usage requirements from the iSER\n\
    \   protocol:\n   1.  The iSCSI layer at the initiator MUST set ExpDataSN to 0\
    \ in Task\n       Management Function Requests for Task Allegiance Reassignment\
    \ for\n       read/bidirectional commands, so as to cause the target to send\n\
    \       all unacknowledged read data.\n   2.  The iSCSI layer at the target MUST\
    \ always return the SCSI status\n       in a separate SCSI Response PDU for read\
    \ commands, i.e., there\n       MUST NOT be a \"phase collapse\" in concluding\
    \ a SCSI read command.\n   3.  The iSCSI layers at both the initiator and the\
    \ target MUST\n       support the keys as defined in Section 6 on Login/Text\n\
    \       Operational Keys.  If used as specified, these keys MUST NOT be\n    \
    \   answered with NotUnderstood, and the semantics as defined MUST be\n      \
    \ followed for each iSER-assisted connection.\n   4.  The iSCSI layer at the initiator\
    \ MUST NOT issue SNACKs for PDUs.\n"
- title: 4.  Lower Layer Interface Requirements
  contents:
  - '4.  Lower Layer Interface Requirements

    '
- title: 4.1.  Interactions with the RCaP Layer
  contents:
  - "4.1.  Interactions with the RCaP Layer\n   The iSER protocol layer is layered\
    \ on top of an RCaP layer (see\n   Figure 1) and the following are the key features\
    \ that are assumed to\n   be supported by any RCaP layer:\n   *  The RCaP layer\
    \ supports all basic RDMA operations, including RDMA\n      Write Operation, RDMA\
    \ Read Operation, Send Operation, Send with\n      Invalidate Operation, Send\
    \ with Solicited Event Operation, Send\n      with Solicited Event and Invalidate\
    \ Operation, and Terminate\n      Operation.\n   *  The RCaP layer provides reliable,\
    \ in-order message delivery and\n      direct data placement.\n   *  When the\
    \ iSER layer initiates an RDMA Read Operation following an\n      RDMA Write Operation\
    \ on one RCaP Stream, the RDMA Read Response\n      Message processing on the\
    \ remote node will be started only after\n      the preceding RDMA Write Message\
    \ payload is placed in the memory\n      of the remote node.\n   *  The RCaP layer\
    \ encapsulates a single iSER Message into a single\n      RCaP Message on the\
    \ Data Source side.  The RCaP layer decapsulates\n      the iSER Message before\
    \ delivering it to the iSER layer on the\n      Data Sink side.\n   *  When the\
    \ iSER layer provides the STag to be remotely invalidated\n      to the RCaP layer\
    \ for a SendInvSE Message, the RCaP layer uses\n      this STag as the STag to\
    \ be invalidated in the SendInvSE Message.\n   *  The RCaP layer uses the STag\
    \ and Tagged Offset provided by the\n      iSER layer for the RDMA Write and RDMA\
    \ Read Request Messages.\n   *  When the RCaP layer delivers the content of an\
    \ RDMA Send Message\n      Type to the iSER layer, the RCaP layer provides the\
    \ length of the\n      RDMA Send message.  This ensures that the iSER layer does\
    \ not have\n      to carry a length field in the iSER header.\n   *  When the\
    \ RCaP layer delivers the SendSE or SendInvSE Message to\n      the iSER layer,\
    \ it notifies the iSER layer with the mechanism\n      provided on that interface.\n\
    \   *  When the RCaP layer delivers a SendInvSE Message to the iSER\n      layer,\
    \ it passes the value of the STag that was invalidated.\n   *  The RCaP layer\
    \ propagates all status and error indications to the\n      iSER layer.\n   *\
    \  For a transport layer that operates in byte stream mode such as\n      TCP,\
    \ the RCaP implementation supports the enabling of the RDMA\n      mode after\
    \ connection establishment and the exchange of Login\n      parameters in byte\
    \ stream mode.  For a transport layer that\n      provides message delivery capability\
    \ such as [IB], the RCaP\n      implementation supports the use of the messaging\
    \ capability by the\n      iSCSI layer directly for the Login Phase after connection\n\
    \      establishment before enabling iSER-assisted mode.\n   *  Whenever the iSER\
    \ layer terminates the RCaP Stream, the RCaP layer\n      terminates the associated\
    \ connection.\n"
- title: 4.2.  Interactions with the Transport Layer
  contents:
  - "4.2.  Interactions with the Transport Layer\n   The iSER layer does not directly\
    \ setup the transport layer connection\n   (e.g., TCP, or [IB]).  During connection\
    \ setup, the iSCSI layer is\n   responsible for setting up the connection.  If\
    \ the login is\n   successful, the iSCSI layer invokes the Enable_Datamover Operational\n\
    \   Primitive to request the iSER layer to transition to the iSER-\n   assisted\
    \ mode for that iSCSI connection.  See Section 5.1 on\n   iSCSI/iSER connection\
    \ setup.  After transitioning to iSER-assisted\n   mode, the RCaP layer and the\
    \ underlying transport layer are\n   responsible for maintaining the connection\
    \ and reporting to the iSER\n   layer any connection failures.\n"
- title: 5.  Connection Setup and Termination
  contents:
  - '5.  Connection Setup and Termination

    '
- title: 5.1.  iSCSI/iSER Connection Setup
  contents:
  - "5.1.  iSCSI/iSER Connection Setup\n   During connection setup, the iSCSI layer\
    \ at the initiator is\n   responsible for establishing a connection with the target.\
    \  After the\n   connection is established, the iSCSI layers at the initiator\
    \ and the\n   target enter the Login Phase using the same rules as outlined in\n\
    \   [RFC3720].  Transition to iSER-assisted mode occurs when the\n   connection\
    \ transitions into the iSCSI Full Feature Phase following a\n   successful login\
    \ negotiation between the initiator and the target in\n   which iSER-assisted\
    \ mode is negotiated and the connection resources\n   necessary to support RCaP\
    \ have been allocated at both the initiator\n   and the target.  The same connection\
    \ MUST be used for both the iSCSI\n   Login Phase and the subsequent iSER-assisted\
    \ Full Feature Phase.\n   iSER-assisted mode MUST be enabled only if it is negotiated\
    \ on the\n   leading connection during the LoginOperationalNegotiation stage of\n\
    \   the iSCSI Login Phase.  iSER-assisted mode is negotiated using the\n   RDMAExtensions=<boolean-value>\
    \ key.  Both the initiator and the\n   target MUST exchange the RDMAExtensions\
    \ key with the value set to\n   \"Yes\" to enable iSER-assisted mode.  If both\
    \ the initiator and the\n   target fail to negotiate the RDMAExtensions key set\
    \ to \"Yes\", then\n   the connection MUST continue with the login semantics as\
    \ defined in\n   [RFC3720].  If the RDMAExtensions key is not negotiated to Yes,\
    \ then\n   for some RCaP implementation (such as [IB]), the connection may need\n\
    \   to be re-established in TCP capable mode.  (For InfiniBand this will\n   require\
    \ an [IPoIB] type connection.)\n   iSER-assisted mode is defined for a Normal\
    \ session only and the\n   RDMAExtensions key MUST NOT be negotiated for a Discovery\
    \ session.\n   Discovery sessions are always conducted using the transport layer\
    \ as\n   described in [RFC3720].\n   An iSER enabled node is not required to initiate\
    \ the RDMAExtensions\n   key exchange if its preference is for the Traditional\
    \ iSCSI mode.\n   The RDMAExtensions key, if offered, MUST be sent in the first\n\
    \   available Login Response or Login Request PDU in the\n   LoginOperationalNegotiation\
    \ stage.  This is due to the fact that the\n   value of some login parameters\
    \ might depend on whether iSER-assisted\n   mode is enabled.\n   iSER-assisted\
    \ mode is a session-wide attribute.  If both the\n   initiator and the target\
    \ negotiate RDMAExtensions=\"Yes\" on the\n   leading connection of a session,\
    \ then all subsequent connections of\n   the same session MUST enable iSER-assisted\
    \ mode without having to\n   exchange an RDMAExtensions key during the iSCSI Login\
    \ Phase.\n   Conversely, if both the initiator and the target fail to negotiate\n\
    \   RDMAExtensions to \"Yes\" on the leading connection of a session, then\n \
    \  the RDMAExtensions key MUST NOT be negotiated further on any\n   additional\
    \ subsequent connection of the session.\n   When the RDMAExtensions key is negotiated\
    \ to \"Yes\", the HeaderDigest\n   and the DataDigest keys MUST be negotiated\
    \ to \"None\" on all\n   iSCSI/iSER connections participating in that iSCSI session.\
    \  This is\n   because, for an iSCSI/iSER connection, RCaP is responsible for\n\
    \   providing error detection that is at least as good as a 32-bit CRC\n   for\
    \ all iSER Messages.  Furthermore, all SCSI Read data are sent\n   using RDMA\
    \ Write Messages instead of the SCSI Data-in PDUs, and all\n   solicited SCSI\
    \ write data are sent using RDMA Read Response Messages\n   instead of the SCSI\
    \ Data-out PDUs.  HeaderDigest and DataDigest that\n   apply to iSCSI PDUs, would\
    \ not be appropriate for RDMA Read and RDMA\n   Write operations used with iSER.\n"
- title: 5.1.1.  Initiator Behavior
  contents:
  - "5.1.1.  Initiator Behavior\n   If the outcome of the iSCSI negotiation is to\
    \ enable iSER-assisted\n   mode, then on the initiator side, prior to sending\
    \ the Login Request\n   with the T (Transit) bit set to 1 and the NSG (Next Stage)\
    \ field set\n   to FullFeaturePhase, the iSCSI layer MUST request that the iSER\
    \ layer\n   allocate the connection resources necessary to support RCaP by\n \
    \  invoking the Allocate_Connection_Resources Operational Primitive.\n   The connection\
    \ resources required are defined by implementation and\n   are outside the scope\
    \ of this specification.  The iSCSI layer may\n   invoke the Notice_Key_Values\
    \ Operational Primitive before invoking\n   the Allocate_Connection_Resources\
    \ Operational Primitive to request\n   that the iSER layer take note of the negotiated\
    \ values of the iSCSI\n   keys for the connection.  The specific keys to be passed\
    \ as input\n   qualifiers are implementation dependent.  These may include, but\
    \ are\n   not limited to, MaxOutstandingR2T, ErrorRecoveryLevel, etc.\n   To minimize\
    \ the potential for a denial-of service attack, the iSCSI\n   layer MUST NOT request\
    \ that the iSER layer allocate the connection\n   resources necessary to support\
    \ RCaP until the iSCSI layer is\n   sufficiently far along in the iSCSI Login\
    \ Phase that it is reasonably\n   certain that the peer side is not an attacker.\
    \  In particular, if the\n   Login Phase includes a SecurityNegotiation stage,\
    \ the iSCSI layer\n   MUST defer the connection resource allocation (i.e., invoking\
    \ the\n   Allocate_Connection_Resources Operational Primitive) to the\n   LoginOperationalNegotiation\
    \ stage [RFC3720] so that the resource\n   allocation occurs after the authentication\
    \ phase is completed.\n   Among the connection resources allocated at the initiator\
    \ is the\n   Inbound RDMA Read Queue Depth (IRD).  As described in Section 9.5.1,\n\
    \   R2Ts are transformed by the target into RDMA Read operations.  IRD\n   limits\
    \ the maximum number of simultaneously incoming outstanding RDMA\n   Read Requests\
    \ per an RCaP Stream from the target to the initiator.\n   The required value\
    \ of IRD is outside the scope of the iSER\n   specification.  The iSER layer at\
    \ the initiator MUST set IRD to 1 or\n   higher if R2Ts are to be used in the\
    \ connection.  However, the iSER\n   layer at the initiator MAY set IRD to 0 based\
    \ on implementation\n   configuration, which indicates that no R2Ts will be used\
    \ on that\n   connection.  Initially, the iSER-IRD value at the initiator SHOULD\
    \ be\n   set to the IRD value at the initiator and MUST NOT be more than the\n\
    \   IRD value.\n   On the other hand, the Outbound RDMA Read Queue Depth (ORD)\
    \ MAY be\n   set to 0, since the iSER layer at the initiator does not issue RDMA\n\
    \   Read Requests to the target.\n   Failure to allocate the requested connection\
    \ resources locally\n   results in a login failure and its handling is described\
    \ in Section\n   10.1.3.1.\n   If the iSER layer at the initiator is successful\
    \ in allocating the\n   connection resources necessary to support RCaP, the following\
    \ events\n   MUST occur in the specified sequence:\n   1.  The iSER layer MUST\
    \ return a success status to the iSCSI layer in\n       response to the Allocate_Connection_Resources\
    \ Operational\n       Primitive.\n   2.  After the target returns the Login Response\
    \ with the T bit set to\n       1 and the NSG field set to FullFeaturePhase, and\
    \ a status class\n       of 0 (Success), the iSCSI layer MUST request that the\
    \ iSER layer\n       transition to iSER-assisted mode by invoking the Enable_Datamover\n\
    \       Operational Primitive with the following qualifiers.  (See\n       Section\
    \ 10.1.4.6 for the case when the status class is not\n       Success.):\n    \
    \   a.  Connection_Handle that identifies the iSCSI connection.\n       b.  Transport_Connection_Descriptor\
    \ that identifies the specific\n           transport connection associated with\
    \ the Connection_Handle.\n   3.  If necessary, the iSER layer should enable RCaP\
    \ and transition\n       the connection to iSER-assisted mode.  When the RCaP\
    \ is iWARP,\n       then this step MUST be done.  Not all RCaPs may need it depending\n\
    \       on the RCaP Stream start-up state.\n   4.  The iSER layer MUST send the\
    \ iSER Hello Message as the first iSER\n       Message.  See Section 5.1.3 on\
    \ iSER Hello Exchange.\n"
- title: 5.1.2.  Target Behavior
  contents:
  - "5.1.2.  Target Behavior\n   If the outcome of the iSCSI negotiation is to enable\
    \ iSER-assisted\n   mode, then on the target side, prior to sending the Login\
    \ Response\n   with the T (Transit) bit set to 1 and the NSG (Next Stage) field\
    \ set\n   to FullFeaturePhase, the iSCSI layer MUST request that the iSER layer\n\
    \   allocate the resources necessary to support RCaP by invoking the\n   Allocate_Connection_Resources\
    \ Operational Primitive.  The connection\n   resources required are defined by\
    \ implementation and are outside the\n   scope of this specification.  Optionally,\
    \ the iSCSI layer may invoke\n   the Notice_Key_Values Operational Primitive before\
    \ invoking the\n   Allocate_Connection_Resources Operational Primitive to request\
    \ that\n   the iSER layer take note of the negotiated values of the iSCSI keys\n\
    \   for the connection.  The specific keys to be passed as input\n   qualifiers\
    \ are implementation dependent.  These may include, but are\n   not limited to,\
    \ MaxOutstandingR2T, ErrorRecoveryLevel, etc.\n   To minimize the potential for\
    \ a denial-of-service attack, the iSCSI\n   layer MUST NOT request that the iSER\
    \ layer allocate the connection\n   resources necessary to support RCaP until\
    \ the iSCSI layer is\n   sufficiently far along in the iSCSI Login Phase that\
    \ it is reasonably\n   certain that the peer side is not an attacker.  In particular,\
    \ if the\n   Login Phase includes a SecurityNegotiation stage, the iSCSI layer\n\
    \   MUST defer the connection resource allocation (i.e., invoking the\n   Allocate_Connection_Resources\
    \ Operational Primitive) to the\n   LoginOperationalNegotiation stage [RFC3720]\
    \ so that the resource\n   allocation occurs after the authentication phase is\
    \ completed.\n   Among the connection resources allocated at the target is the\n\
    \   Outbound RDMA Read Queue Depth (ORD).  As described in Section 9.5.1,\n  \
    \ R2Ts are transformed by the target into RDMA Read operations.  The\n   ORD limits\
    \ the maximum number of simultaneously outstanding RDMA Read\n   Requests per\
    \ RCaP Stream from the target to the initiator.\n   Initially, the iSER-ORD value\
    \ at the target SHOULD be set to the ORD\n   value at the target.\n   On the other\
    \ hand, the IRD at the target MAY be set to 0 since the\n   iSER layer at the\
    \ target does not expect RDMA Read Requests to be\n   issued by the initiator.\n\
    \   Failure to allocate the requested connection resources locally\n   results\
    \ in a login failure and its handling is described in Section\n   10.1.3.1.\n\
    \   If the iSER layer at the target is successful in allocating the\n   connection\
    \ resources necessary to support RCaP, the following events\n   MUST occur in\
    \ the specified sequence:\n   1.  The iSER layer MUST return a success status\
    \ to the iSCSI layer in\n       response to the Allocate_Connection_Resources\
    \ Operational\n       Primitive.\n   2.  The iSCSI layer MUST request that the\
    \ iSER layer transition to\n       iSER-assisted mode by invoking the Enable_Datamover\
    \ Operational\n       Primitive with the following qualifiers:\n       a.  Connection_Handle\
    \ that identifies the iSCSI connection.\n       b.  Transport_Connection_Descriptor\
    \ that identifies the specific\n           transport connection associated with\
    \ the Connection_Handle.\n       c.  The final transport layer (e.g., TCP) message\
    \ containing the\n           Login Response with the T bit set to 1 and the NSG\
    \ field set\n           to FullFeaturePhase.\n   3.  The iSER layer MUST send\
    \ the final Login Response PDU in the\n       native transport mode to conclude\
    \ the iSCSI Login Phase.  If the\n       underlying transport is TCP, then the\
    \ iSER layer MUST send the\n       final Login Response PDU in byte stream mode.\n\
    \   4.  After sending the final Login Response PDU, the iSER layer should\n  \
    \     enable RCaP if necessary and transition the connection to iSER-\n      \
    \ assisted mode.  When the RCaP is iWARP, then this step MUST be\n       done.\
    \  Not all RCaPs may need it depending on the RCaP Stream\n       start-up state.\n\
    \   5.  After receiving the iSER Hello Message from the initiator, the\n     \
    \  iSER layer MUST respond with the iSER HelloReply Message to be\n       sent\
    \ as the first iSER Message.  See Section 5.1.3 on iSER Hello\n       Exchange\
    \ for more details.\n   Note: In the above sequence, the operations as described\
    \ in bullets 3\n   and 4 MUST be performed atomically for iWARP connections. \
    \ Failure to\n   do this may result in race conditions.\n"
- title: 5.1.3.  iSER Hello Exchange
  contents:
  - "5.1.3.  iSER Hello Exchange\n   After the connection transitions into iSER-assisted\
    \ mode, the first\n   iSER Message sent by the iSER layer at the initiator to\
    \ the target\n   MUST be the iSER Hello Message.  The iSER Hello Message is used\
    \ by\n   the iSER layer at the initiator to declare iSER parameters to the\n \
    \  target.  See Section 9.3 on iSER Header Format for the iSER Hello\n   Message.\n\
    \   In response to the iSER Hello Message, the iSER layer at the target\n   MUST\
    \ return the iSER HelloReply Message as the first iSER Message\n   sent by the\
    \ target.  The iSER HelloReply Message is used by the iSER\n   layer at the target\
    \ to declare iSER parameters to the initiator.  See\n   Section 9.4 on iSER Header\
    \ Format for the iSER HelloReply Message.\n   In the iSER Hello Message, the iSER\
    \ layer at the initiator declares\n   the iSER-IRD value to the target.\n   Upon\
    \ receiving the iSER Hello Message, the iSER layer at the target\n   MUST set\
    \ the iSER-ORD value to the minimum of the iSER-ORD value at\n   the target and\
    \ the iSER-IRD value declared by the initiator.  The\n   iSER layer at the target\
    \ MAY adjust (lower) its ORD value to match\n   the iSER-ORD value if the iSER-ORD\
    \ value is smaller than the ORD\n   value at the target in order to free up the\
    \ unused resources.\n   In the iSER HelloReply Message, the iSER layer at the\
    \ target declares\n   the iSER-ORD value to the initiator.\n   Upon receiving\
    \ the iSER HelloReply Message, the iSER layer at the\n   initiator MAY adjust\
    \ (lower) its IRD value to match the iSER-ORD\n   value in order to free up the\
    \ unused resources, if the iSER-ORD value\n   declared by the target is smaller\
    \ than the iSER-IRD value declared by\n   the initiator.\n   It is an iSER level\
    \ negotiation failure if the iSER parameters\n   declared in the iSER Hello Message\
    \ by the initiator are unacceptable\n   to the target.  This includes the following:\n\
    \   *  The initiator-declared iSER-IRD value is greater than 0 and the\n     \
    \ target-declared iSER-ORD value is 0.\n   *  The initiator-supported and the\
    \ target-supported iSER protocol\n      versions do not overlap.\n   See Section\
    \ 10.1.3.2 for the handling of the error situation.\n"
- title: 5.2.  iSCSI/iSER Connection Termination
  contents:
  - '5.2.  iSCSI/iSER Connection Termination

    '
- title: 5.2.1.  Normal Connection Termination at the Initiator
  contents:
  - "5.2.1.  Normal Connection Termination at the Initiator\n   The iSCSI layer at\
    \ the initiator terminates an iSCSI/iSER connection\n   normally by invoking the\
    \ Send_Control Operational Primitive qualified\n   with the Logout Request PDU.\
    \  The iSER layer at the initiator MUST\n   use a SendSE Message to send the Logout\
    \ Request PDU to the target.\n   After the iSER layer at the initiator receives\
    \ the SendSE Message\n   containing the Logout Response PDU from the target, it\
    \ MUST notify\n   the iSCSI layer by invoking the Control_Notify Operational Primitive\n\
    \   qualified with the Logout Response PDU.\n   After the iSCSI logout process\
    \ is complete, the iSCSI layer at the\n   target is responsible for closing the\
    \ iSCSI/iSER connection as\n   described in Section 5.2.2.  After the RCaP layer\
    \ at the initiator\n   reports that the connection has been closed, the iSER layer\
    \ at the\n   initiator MUST deallocate all connection and task resources (if any)\n\
    \   associated with the connection, and invalidate the Local Mapping(s)\n   (if\
    \ any) that associate the ITT(s) used on that connection to the\n   local STag(s)\
    \ before notifying the iSCSI layer by invoking the\n   Connection_Terminate_Notify\
    \ Operational Primitive.\n"
- title: 5.2.2.  Normal Connection Termination at the Target
  contents:
  - "5.2.2.  Normal Connection Termination at the Target\n   Upon receiving the SendSE\
    \ Message containing the Logout Request PDU,\n   the iSER layer at the target\
    \ MUST notify the iSCSI layer at the\n   target by invoking the Control_Notify\
    \ Operational Primitive qualified\n   with the Logout Request PDU.  The iSCSI\
    \ layer completes the logout\n   process by invoking the Send_Control Operational\
    \ Primitive qualified\n   with the Logout Response PDU.  The iSER layer at the\
    \ target MUST use\n   a SendSE Message to send the Logout Response PDU to the\
    \ initiator.\n   After the iSCSI logout process is complete, the iSCSI layer at\
    \ the\n   target MUST request that the iSER layer at the target terminate the\n\
    \   RCaP Stream by invoking the Connection_Terminate Operational\n   Primitive.\n\
    \   As part of the termination process, the RCaP layer MUST close the\n   connection.\
    \  When the RCaP layer notifies the iSER layer after the\n   RCaP Stream and the\
    \ associated connection are terminated, the iSER\n   layer MUST deallocate all\
    \ connection and task resources (if any)\n   associated with the connection, and\
    \ invalidate the Local and Remote\n   Mapping(s) (if any) that associate the ITT(s)\
    \ used on that connection\n   to the local STag(s) and the Advertised STag(s)\
    \ respectively.\n"
- title: 5.2.3.  Termination without Logout Request/Response PDUs
  contents:
  - '5.2.3.  Termination without Logout Request/Response PDUs

    '
- title: 5.2.3.1.  Connection Termination Initiated by the iSCSI Layer
  contents:
  - "5.2.3.1.  Connection Termination Initiated by the iSCSI Layer\n   The Connection_Terminate\
    \ Operational Primitive MAY be invoked by the\n   iSCSI layer to request that\
    \ the iSER layer terminate the RCaP Stream\n   without having previously exchanged\
    \ the Logout Request and Logout\n   Response PDUs between the two iSCSI/iSER nodes.\
    \  As part of the\n   termination process, the RCaP layer will close the connection.\
    \  When\n   the RCaP layer notifies the iSER layer after the RCaP Stream and the\n\
    \   associated connection are terminated, the iSER layer MUST perform the\n  \
    \ following actions.\n   If the Connection_Terminate Operational Primitive is\
    \ invoked by the\n   iSCSI layer at the target, then the iSER layer at the target\
    \ MUST\n   deallocate all connection and task resources (if any) associated with\n\
    \   the connection, and invalidate the Local and Remote Mappings (if any)\n  \
    \ that associate the ITT(s) used on the connection to the local STag(s)\n   and\
    \ the Advertised STag(s), respectively.\n   If the Connection_Terminate Operational\
    \ Primitive is invoked by the\n   iSCSI layer at the initiator, then the iSER\
    \ layer at the initiator\n   MUST deallocate all connection and task resources\
    \ (if any) associated\n   with the connection, and invalidate the Local Mapping(s)\
    \ (if any)\n   that associate the ITT(s) used on the connection to the local\n\
    \   STag(s).\n"
- title: 5.2.3.2.  Connection Termination Notification to the iSCSI Layer
  contents:
  - "5.2.3.2.  Connection Termination Notification to the iSCSI Layer\n   If the iSCSI/iSER\
    \ connection is terminated without the invocation of\n   Connection_Terminate\
    \ from the iSCSI layer, the iSER layer MUST notify\n   the iSCSI layer that the\
    \ iSCSI/iSER connection has been terminated by\n   invoking the Connection_Terminate_Notify\
    \ Operational Primitive.\n   Prior to invoking Connection_Terminate_Notify, the\
    \ iSER layer at the\n   target MUST deallocate all connection and task resources\
    \ (if any)\n   associated with the connection, and invalidate the Local and Remote\n\
    \   Mappings (if any) that associate the ITT(s) used on the connection to\n  \
    \ the local STag(s) and the Advertised STag(s), respectively.\n   Prior to invoking\
    \ Connection_Terminate_Notify, the iSER layer at the\n   initiator MUST deallocate\
    \ all connection and task resources (if any)\n   associated with the connection,\
    \ and invalidate the Local Mappings (if\n   any) that associate the ITT(s) used\
    \ on the connection to the local\n   STag(s).\n   If the remote iSCSI/iSER node\
    \ initiated the closing of the connection\n   (e.g., by sending a TCP FIN or TCP\
    \ RST), the iSER layer MUST notify\n   the iSCSI layer after the RCaP layer reports\
    \ that the connection is\n   closed by invoking the Connection_Terminate_Notify\
    \ Operational\n   Primitive.\n   Another example of a connection termination without\
    \ a preceding\n   logout is when the iSCSI layer at the initiator does an implicit\n\
    \   logout (connection reinstatement).\n"
- title: 6.  Login/Text Operational Keys
  contents:
  - "6.  Login/Text Operational Keys\n   Certain iSCSI login/text operational keys\
    \ have restricted usage in\n   iSER, and additional keys are used to support the\
    \ iSER protocol\n   functionality.  All other keys defined in [RFC3720] and not\
    \ discussed\n   in this section may be used on iSCSI/iSER connections with the\
    \ same\n   semantics.\n"
- title: 6.1.  HeaderDigest and DataDigest
  contents:
  - "6.1.  HeaderDigest and DataDigest\n   Irrelevant when: RDMAExtensions=Yes\n \
    \  Negotiations resulting in RDMAExtensions=Yes for a session implies\n   HeaderDigest=None\
    \ and DataDigest=None for all connections in that\n   session and overrides both\
    \ the default and an explicit setting.\n"
- title: 6.2.  MaxRecvDataSegmentLength
  contents:
  - "6.2.  MaxRecvDataSegmentLength\n   For an iSCSI connection belonging to a session\
    \ in which\n   RDMAExtensions=Yes was negotiated on the leading connection of\
    \ the\n   session, MaxRecvDataSegmentLength need not be declared in the Login\n\
    \   Phase.  Instead, InitiatorRecvDataSegmentLength (as described in\n   Section\
    \ 6.5) and TargetRecvDataSegmentLength (as described in Section\n   6.4) keys\
    \ are negotiated.  The values of the local and remote\n   MaxRecvDataSegmentLength\
    \ are derived from the\n   InitiatorRecvDataSegmentLength and TargetRecvDataSegmentLength\
    \ keys\n   even if the MaxRecvDataSegmentLength is declared during the Login\n\
    \   Phase.\n   In the Full Feature Phase, the initiator MUST consider the value\
    \ of\n   its local MaxRecvDataSegmentLength (that it would have declared to\n\
    \   the target) as having the value of InitiatorRecvDataSegmentLength,\n   and\
    \ the value of the remote MaxRecvDataSegmentLength (that would have\n   been declared\
    \ by the target) as having the value of\n   TargetRecvDataSegmentLength.  Similarly,\
    \ the target MUST consider the\n   value of its local MaxRecvDataSegmentLength\
    \ (that it would have\n   declared to the initiator) as having the value of\n\
    \   TargetRecvDataSegmentLength, and the value of the remote\n   MaxRecvDataSegmentLength\
    \ (that would have been declared by the\n   initiator) as having the value of\
    \ InitiatorRecvDataSegmentLength.\n   The MaxRecvDataSegmentLength key is applicable\
    \ only for iSCSI\n   control-type PDUs.\n"
- title: 6.3.  RDMAExtensions
  contents:
  - "6.3.  RDMAExtensions\n   Use: LO (leading only)\n   Senders: Initiator and Target\n\
    \   Scope: SW (session-wide)\n   RDMAExtensions=<boolean-value>\n   Irrelevant\
    \ when: SessionType=Discovery\n   Default is No\n   Result function is AND\n \
    \  This key is used by the initiator and the target to negotiate support\n   for\
    \ iSER-assisted mode.  To enable the use of iSER-assisted mode,\n   both the initiator\
    \ and the target MUST exchange RDMAExtensions=Yes.\n   iSER-assisted mode MUST\
    \ NOT be used if either the initiator or the\n   target offers RDMAExtensions=No.\n\
    \   An iSER-enabled node is not required to initiate the RDMAExtensions\n   key\
    \ exchange if it prefers to operate in the Traditional iSCSI mode.\n   However,\
    \ if the RDMAExtensions key is to be negotiated, an initiator\n   MUST offer the\
    \ key in the first Login Request PDU in the\n   LoginOperationalNegotiation stage\
    \ of the leading connection, and a\n   target MUST offer the key in the first\
    \ Login Response PDU with which\n   it is allowed to do so (i.e., the first Login\
    \ Response PDU issued\n   after the first Login Request PDU with the C bit set\
    \ to 0) in the\n   LoginOperationalNegotiation stage of the leading connection.\
    \  In\n   response to the offered key=value pair of RDMAExtensions=yes, an\n \
    \  initiator MUST respond in the next Login Request PDU with which it is\n   allowed\
    \ to do so, and a target MUST respond in the next Login\n   Response PDU with\
    \ which it is allowed to do so.\n   Negotiating the RDMAExtensions key first enables\
    \ a node to negotiate\n   the optimal value for other keys.  Certain iSCSI keys\
    \ such as\n   MaxBurstLength, MaxOutstandingR2T, ErrorRecoveryLevel, InitialR2T,\n\
    \   ImmediateData, etc., may be negotiated differently depending on\n   whether\
    \ the connection is in Traditional iSCSI mode or iSER-assisted\n   mode.\n"
- title: 6.4.  TargetRecvDataSegmentLength
  contents:
  - "6.4.  TargetRecvDataSegmentLength\n   Use: IO (Initialize only)\n   Senders:\
    \ Initiator and Target\n   Scope: CO (connection-only)\n   Irrelevant when: RDMAExtensions=No\n\
    \   TargetRecvDataSegmentLength=<numerical-value-512-to-(2**24-1)>\n   Default\
    \ is 8192 bytes\n   Result function is minimum\n   This key is relevant only for\
    \ the iSCSI connection of an iSCSI\n   session if RDMAExtensions=Yes is negotiated\
    \ on the leading connection\n   of the session.  It is used by the initiator and\
    \ target to negotiate\n   the maximum size of the data segment that an initiator\
    \ may send to\n   the target in an iSCSI control-type PDU in the Full Feature\
    \ Phase.\n   For SCSI Command PDUs and SCSI Data-out PDUs containing non-immediate\n\
    \   unsolicited data to be sent by the initiator, the initiator MUST send\n  \
    \ all non-Final PDUs with a data segment size of exactly\n   TargetRecvDataSegmentLength\
    \ whenever the PDUs constitute a data\n   sequence whose size is larger than TargetRecvDataSegmentLength.\n"
- title: 6.5.  InitiatorRecvDataSegmentLength
  contents:
  - "6.5.  InitiatorRecvDataSegmentLength\n   Use: IO (Initialize only)\n   Senders:\
    \ Initiator and Target\n   Scope: CO (connection-only)\n   Irrelevant when: RDMAExtensions=No\n\
    \   InitiatorRecvDataSegmentLength=<numerical-value-512-to-(2**24-1)>\n   Default\
    \ is 8192 bytes\n   Result function is minimum\n   This key is relevant only for\
    \ the iSCSI connection of an iSCSI\n   session if RDMAExtensions=Yes is negotiated\
    \ on the leading connection\n   of the session.  It is used by the initiator and\
    \ target to negotiate\n   the maximum size of the data segment that a target may\
    \ send to the\n   initiator in an iSCSI control-type PDU in the Full Feature Phase.\n"
- title: 6.6.  OFMarker and IFMarker
  contents:
  - "6.6.  OFMarker and IFMarker\n   Irrelevant when: RDMAExtensions=Yes\n   Negotiations\
    \ resulting in RDMAExtensions=Yes for a session implies\n   OFMarker=No and IFMarker=No\
    \ for all connections in that session and\n   overrides both the default and an\
    \ explicit setting.\n"
- title: 6.7.  MaxOutstandingUnexpectedPDUs
  contents:
  - "6.7.  MaxOutstandingUnexpectedPDUs\n   Use: LO (leading only), Declarative\n\
    \   Senders: Initiator and Target\n   Scope: SW (session-wide)\n   Irrelevant\
    \ when: RDMAExtensions=No\n   MaxOutstandingUnexpectedPDUs=<numerical-value-from-2-to-(2**32-1)\
    \ |\n   0>\n   Default is 0\n   This key is used by the initiator and the target\
    \ to declare the\n   maximum number of outstanding \"unexpected\" iSCSI control-type\
    \ PDUs\n   that it can receive in the Full Feature Phase.  It is intended to\n\
    \   allow the receiving side to determine the amount of buffer resources\n   needed\
    \ beyond the normal flow control mechanism available in iSCSI.\n   An initiator\
    \ or target should select a value such that it would not\n   impose an unnecessary\
    \ constraint on the iSCSI layer under normal\n   circumstances.  The value of\
    \ 0 is defined to indicate that the\n   declarer has no limit on the maximum number\
    \ of outstanding\n   \"unexpected\" iSCSI control-type PDUs that it can receive.\
    \  See\n   Sections 8.1.1 and 8.1.2 for the usage of this key.  Note that iSER\n\
    \   Hello and HelloReply Messages are not iSCSI control-type PDUs and are\n  \
    \ not affected by this key.\n"
- title: 7.  iSCSI PDU Considerations
  contents:
  - "7.  iSCSI PDU Considerations\n   When a connection is in the iSER-assisted mode,\
    \ two types of message\n   transfers are allowed between the iSCSI layer at the\
    \ initiator and\n   the iSCSI layer at the target.  These are known as the iSCSI\
    \ data-\n   type PDUs and the iSCSI control-type PDUs, and these terms are\n \
    \  described in the following sections.\n"
- title: 7.1.  iSCSI Data-Type PDU
  contents:
  - "7.1.  iSCSI Data-Type PDU\n   An iSCSI data-type PDU is defined as an iSCSI PDU\
    \ that causes data\n   transfer, transparent to the remote iSCSI layer, to take\
    \ place\n   between the peer iSCSI nodes in the full feature phase of an\n   iSCSI/iSER\
    \ connection.  An iSCSI data-type PDU, when requested for\n   transmission by\
    \ the iSCSI layer in the sending node, results in the\n   data being transferred\
    \ without the participation of the iSCSI layers\n   at the sending and the receiving\
    \ nodes.  This is due to the fact that\n   the PDU itself is not delivered as-is\
    \ to the iSCSI layer in the\n   receiving node.  Instead, the data transfer operations\
    \ are\n   transformed into the appropriate RDMA operations that are handled by\n\
    \   the RDMA-Capable Controller.  The set of iSCSI data-type PDUs\n   consists\
    \ of SCSI Data-in PDUs and R2T PDUs.\n   If the invocation of the Operational\
    \ Primitive by the iSCSI layer to\n   request that the iSER layer process an iSCSI\
    \ data-type PDU is\n   qualified with Notify_Enable set, then upon completing\
    \ the RDMA\n   operation, the iSER layer at the target MUST notify the iSCSI layer\n\
    \   at the target by invoking the Data_Completion_Notify Operational\n   Primitive\
    \ qualified with ITT and SN.  There is no data completion\n   notification at\
    \ the initiator since the RDMA operations are\n   completely handled by the RDMA-Capable\
    \ Controller at the initiator\n   and the iSER layer at the initiator is not involved\
    \ with the data\n   transfer associated with iSCSI data-type PDUs.\n   If the\
    \ invocation of the Operational Primitive by the iSCSI layer to\n   request that\
    \ the iSER layer process an iSCSI data-type PDU is\n   qualified with Notify_Enable\
    \ cleared, then upon completing the RDMA\n   operation, the iSER layer at the\
    \ target MUST NOT notify the iSCSI\n   layer at the target and MUST NOT invoke\
    \ the Data_Completion_Notify\n   Operational Primitive.\n   If an operation associated\
    \ with an iSCSI data-type PDU fails for any\n   reason, the contents of the Data\
    \ Sink buffers associated with the\n   operation are considered indeterminate.\n"
- title: 7.2.  iSCSI Control-Type PDU
  contents:
  - "7.2.  iSCSI Control-Type PDU\n   Any iSCSI PDU that is not an iSCSI data-type\
    \ PDU and also not a SCSI\n   Data-out PDU carrying solicited data is defined\
    \ as an iSCSI control-\n   type PDU.  The iSCSI layer invokes the Send_Control\
    \ Operational\n   Primitive to request that the iSER layer process an iSCSI control-\n\
    \   type PDU.  iSCSI control-type PDUs are transferred using Send Message\n  \
    \ Types of RCaP.  Specifically, note that SCSI Data-out PDUs carrying\n   unsolicited\
    \ data are defined as iSCSI control-type PDUs.  See Section\n   7.3.4 on the treatment\
    \ of SCSI Data-out PDUs.\n   When the iSER layer receives an iSCSI control-type\
    \ PDU, it MUST\n   notify the iSCSI layer by invoking the Control_Notify Operational\n\
    \   Primitive qualified with the iSCSI control-type PDU.\n"
- title: 7.3.  iSCSI PDUs
  contents:
  - "7.3.  iSCSI PDUs\n   This section describes the handling of each of the iSCSI\
    \ PDU types by\n   the iSER layer.  The iSCSI layer requests that the iSER layer\
    \ process\n   the iSCSI PDU by invoking the appropriate Operational Primitive.\
    \  A\n   Connection_Handle MUST qualify each of these invocations.  In\n   addition,\
    \ BHS and the optional AHS of the iSCSI PDU as defined in\n   [RFC3720] MUST qualify\
    \ each of the invocations.  The qualifying\n   Connection_Handle, the BHS, and\
    \ the AHS are not explicitly listed in\n   the subsequent sections.\n"
- title: 7.3.1.  SCSI Command
  contents:
  - "7.3.1.  SCSI Command\n      Type:  control-type PDU\n      PDU-specific qualifiers\
    \ (for SCSI Write or bidirectional command):\n      ImmediateDataSize, UnsolicitedDataSize,\
    \ DataDescriptorOut\n      PDU-specific qualifiers (for SCSI read or bidirectional\
    \ command):\n      DataDescriptorIn\n   The iSER layer at the initiator MUST send\
    \ the SCSI command in a\n   SendSE Message to the target.\n   For a SCSI Write\
    \ or bidirectional command, the iSCSI layer at the\n   initiator MUST invoke the\
    \ Send_Control Operational Primitive as\n   follows:\n   *  If there is immediate\
    \ data to be transferred for the SCSI Write or\n      bidirectional command, the\
    \ qualifier ImmediateDataSize MUST be\n      used to define the number of bytes\
    \ of immediate unsolicited data\n      to be sent with the Write or bidirectional\
    \ command, and the\n      qualifier DataDescriptorOut MUST be used to define the\
    \ initiator's\n      I/O Buffer containing the SCSI Write data.\n   *  If there\
    \ is unsolicited data to be transferred for the SCSI Write\n      or bidirectional\
    \ command, the qualifier UnsolicitedDataSize MUST\n      be used to define the\
    \ number of bytes of immediate and non-\n      immediate unsolicited data for\
    \ the command.  The iSCSI layer will\n      issue one or more SCSI Data-out PDUs\
    \ for the non-immediate\n      unsolicited data.  See Section 7.3.4 on SCSI Data-out.\n\
    \   *  If there is solicited data to be transferred for the SCSI write or\n  \
    \    bidirectional command, as indicated by the Expected Data Transfer\n     \
    \ Length in the SCSI Command PDU exceeding the value of\n      UnsolicitedDataSize,\
    \ the iSER layer at the initiator MUST do the\n      following:\n         a. \
    \ It MUST allocate a Write STag for the I/O Buffer defined by\n             the\
    \ qualifier DataDescriptorOut.  The DataDescriptorOut\n             describes\
    \ the I/O buffer starting with the immediate\n             unsolicited data (if\
    \ any), followed by the non-immediate\n             unsolicited data (if any)\
    \ and solicited data.  This means\n             that the BufferOffset for the\
    \ SCSI Data-out for this\n             command is equal to the TO.  This implies\
    \ that a zero TO\n             for this STag points to the beginning of this I/O\
    \ Buffer.\n         b.  It MUST establish a Local Mapping that associates the\n\
    \             Initiator Task Tag (ITT) to the Write STag.\n         c.  It MUST\
    \ Advertise the Write STag to the target by sending\n             it as the Write\
    \ STag in the iSER header of the iSER Message\n             (the payload of the\
    \ SendSE Message of RCaP) containing the\n             SCSI write or bidirectional\
    \ command PDU.  See Section 9.2\n             on iSER Header Format for the iSCSI\
    \ Control-Type PDU.\n   For a SCSI read or bidirectional command, the iSCSI layer\
    \ at the\n   initiator MUST invoke the Send_Control Operational Primitive\n  \
    \ qualified with DataDescriptorIn, which defines the initiator's I/O\n   Buffer\
    \ for receiving the SCSI Read data.  The iSER layer at the\n   initiator MUST\
    \ do the following:\n         a.  It MUST allocate a Read STag for the I/O Buffer.\n\
    \         b.  It MUST establish a Local Mapping that associates the\n        \
    \     Initiator Task Tag (ITT) to the Read STag.\n         c.  It MUST Advertise\
    \ the Read STag to the target by sending it\n             as the Read STag in\
    \ the iSER header of the iSER Message\n             (the payload of the SendSE\
    \ Message of RCaP) containing the\n             SCSI read or bidirectional command\
    \ PDU.  See Section 9.2 on\n             iSER Header Format for the iSCSI Control-Type\
    \ PDU.\n   If the amount of unsolicited data to be transferred in a SCSI command\n\
    \   exceeds TargetRecvDataSegmentLength, then the iSCSI layer at the\n   initiator\
    \ MUST segment the data into multiple iSCSI control-type\n   PDUs, with the data\
    \ segment length in all PDUs generated except the\n   last one having exactly\
    \ the size TargetRecvDataSegmentLength.  The\n   data segment length of the last\
    \ iSCSI control-type PDU carrying the\n   unsolicited data can be up to TargetRecvDataSegmentLength.\n\
    \   When the iSER layer at the target receives the SCSI command, it MUST\n   establish\
    \ a Remote Mapping that associates the ITT to the Advertised\n   Write STag and\
    \ the Read STag if present in the iSER header.  The\n   Write STag is used by\
    \ the iSER layer at the target in handling the\n   data transfer associated with\
    \ the R2T PDU(s) as described in Section\n   7.3.6.  The Read STag is used in\
    \ handling the SCSI Data-in PDU(s)\n   from the iSCSI layer at the target as described\
    \ in Section 7.3.5.\n"
- title: 7.3.2.  SCSI Response
  contents:
  - "7.3.2.  SCSI Response\n      Type:  control-type PDU\n      PDU-specific qualifiers:\
    \  DataDescriptorStatus\n   The iSCSI layer at the target MUST invoke the Send_Control\n\
    \   Operational Primitive qualified with DataDescriptorStatus, which\n   defines\
    \ the buffer containing the sense and response information.\n   The iSCSI layer\
    \ at the target MUST always return the SCSI status for\n   a SCSI command in a\
    \ separate SCSI Response PDU.  \"Phase collapse\" for\n   transferring SCSI status\
    \ in a SCSI Data-in PDU MUST NOT be used.  The\n   iSER layer at the target sends\
    \ the SCSI Response PDU according to the\n   following rules:\n   *  If no STags\
    \ are Advertised by the initiator in the iSER Message\n      containing the SCSI\
    \ command PDU, then the iSER layer at the target\n      MUST send a SendSE Message\
    \ containing the SCSI Response PDU.\n   *  If the initiator Advertised a Read\
    \ STag in the iSER Message\n      containing the SCSI Command PDU, then the iSER\
    \ layer at the target\n      MUST send a SendInvSE Message containing the SCSI\
    \ Response PDU.\n      The header of the SendInvSE Message MUST carry the Read\
    \ STag to be\n      invalidated at the initiator.\n   *  If the initiator Advertised\
    \ only the Write STag in the iSER\n      Message containing the SCSI Command PDU,\
    \ then the iSER layer at\n      the target MUST send a SendInvSE Message containing\
    \ the SCSI\n      Response PDU.  The header of the SendInvSE Message MUST carry\
    \ the\n      Write STag to be invalidated at the initiator.\n   When the iSCSI\
    \ layer at the target invokes the Send_Control\n   Operational Primitive to send\
    \ the SCSI Response PDU, the iSER layer\n   at the target MUST invalidate the\
    \ Remote Mapping that associates the\n   ITT to the Advertised STag(s) before\
    \ transferring the SCSI Response\n   PDU to the initiator.\n   Upon receiving\
    \ the SendInvSE Message containing the SCSI Response PDU\n   from the target,\
    \ the RCaP layer at the initiator will invalidate the\n   STag specified in the\
    \ header.  The iSER layer at the initiator MUST\n   ensure that the correct STag\
    \ is invalidated.  If both the Read and\n   the Write STags are Advertised earlier\
    \ by the initiator, then the\n   iSER layer at the initiator MUST explicitly invalidate\
    \ the Write STag\n   upon receiving the SendInvSE Message because the header of\
    \ the\n   SendInvSE Message can only carry one STag (in this case, the Read\n\
    \   STag) to be invalidated.\n   The iSER layer at the initiator MUST ensure the\
    \ invalidation of the\n   STag(s) used in a command before notifying the iSCSI\
    \ layer at the\n   initiator by invoking the Control_Notify Operational Primitive\n\
    \   qualified with the SCSI Response.  This precludes the possibility of\n   using\
    \ the STag(s) after the completion of the command, thereby\n   causing data corruption.\n\
    \   When the iSER layer at the initiator receives the SendSE or the\n   SendInvSE\
    \ Message containing the SCSI Response PDU, it SHOULD\n   invalidate the Local\
    \ Mapping that associates the ITT to the local\n   STag(s).  The iSER layer MUST\
    \ ensure that all local STag(s)\n   associated with the ITT are invalidated before\
    \ notifying the iSCSI\n   layer of the SCSI Response PDU by invoking the Control_Notify\n\
    \   Operational Primitive qualified with the SCSI Response PDU.\n"
- title: 7.3.3.  Task Management Function Request/Response
  contents:
  - "7.3.3.  Task Management Function Request/Response\n      Type:  control-type\
    \ PDU\n      PDU-specific qualifiers (for TMF Request):  DataDescriptorOut,\n\
    \      DataDescriptorIn\n   The iSER layer MUST use a SendSE Message to send the\
    \ Task Management\n   Function Request/Response PDU.\n   For the Task Management\
    \ Function Request with the TASK REASSIGN\n   function, the iSER layer at the\
    \ initiator MUST do the following:\n   *  It MUST use the ITT as specified in\
    \ the Referenced Task Tag from\n      the Task Management Function Request PDU\
    \ to locate the existing\n      STag(s), if any, in the Local Mapping(s) that\
    \ associates the ITT\n      to the local STag(s).\n   *  It MUST invalidate the\
    \ existing STag(s), if any, and the Local\n      Mapping(s) that associates the\
    \ ITT to the local STag(s).\n   *  It MUST allocate a Read STag for the I/O Buffer\
    \ as defined by the\n      qualifier DataDescriptorIn if the Send_Control Operational\n\
    \      Primitive invocation is qualified with DataDescriptorIn.\n   *  It MUST\
    \ allocate a Write STag for the I/O Buffer as defined by the\n      qualifier\
    \ DataDescriptorOut if the Send_Control Operational\n      Primitive invocation\
    \ is qualified with DataDescriptorOut.\n   *  If STags are allocated, it MUST\
    \ establish a new Local Mapping(s)\n      that associate the ITT to the allocated\
    \ STag(s).\n   *  It MUST Advertise the STags, if allocated, to the target in\
    \ the\n      iSER header of the SendSE Message carrying the iSCSI PDU, as\n  \
    \    described in Section 9.2.\n   For the Task Management Function Request with\
    \ the TASK REASSIGN\n   function for a SCSI read or bidirectional command, the\
    \ iSCSI layer at\n   the initiator MUST set ExpDataSN to 0 since the data transfer\
    \ and\n   acknowledgements happen transparently to the iSCSI layer at the\n  \
    \ initiator.  This provides the flexibility to the iSCSI layer at the\n   target\
    \ to request transmission of only the unacknowledged data as\n   specified in\
    \ [RFC3720].\n   When the iSER layer at the target receives the Task Management\n\
    \   Function Request with the TASK REASSIGN function, it MUST do the\n   following:\n\
    \   *  It MUST use the ITT as specified in the Referenced Task Tag from\n    \
    \  the Task Management Function Request PDU to locate the mappings\n      that\
    \ associate the ITT to the Advertised STag(s) and the local\n      STag(s), if\
    \ any.\n   *  It MUST invalidate the local STag(s), if any, associated with the\n\
    \      ITT.\n   *  It MUST replace the Advertised STag(s) in the Remote Mapping\
    \ that\n      associates the ITT to the Advertised STag(s) with the Write STag\n\
    \      and the Read STag if present in the iSER header.  The Write STag\n    \
    \  is used in the handling of the R2T PDU(s) from the iSCSI layer at\n      the\
    \ target as described in Section 7.3.6.  The Read STag is used\n      in the handling\
    \ of the SCSI Data-in PDU(s) from the iSCSI layer at\n      the target as described\
    \ in Section 7.3.5.\n"
- title: 7.3.4.  SCSI Data-Out
  contents:
  - "7.3.4.  SCSI Data-Out\n      Type:  control-type PDU\n      PDU-specific qualifiers:\
    \  DataDescriptorOut\n   The iSCSI layer at the initiator MUST invoke the Send_Control\n\
    \   Operational Primitive qualified with DataDescriptorOut, which defines\n  \
    \ the initiator's I/O Buffer containing unsolicited SCSI Write data.\n   If the\
    \ amount of unsolicited data to be transferred as SCSI Data-out\n   exceeds TargetRecvDataSegmentLength,\
    \ then the iSCSI layer at the\n   initiator MUST segment the data into multiple\
    \ iSCSI control-type\n   PDUs, with the DataSegmentLength having the value of\n\
    \   TargetRecvDataSegmentLength in all PDUs generated except the last\n   one.\
    \  The DataSegmentLength of the last iSCSI control-type PDU\n   carrying the unsolicited\
    \ data can be up to\n   TargetRecvDataSegmentLength.  The iSCSI layer at the target\
    \ MUST\n   perform the reassembly function for the unsolicited data.\n   For unsolicited\
    \ data, if the F bit is set to 0 in a SCSI Data-out\n   PDU, the iSER layer at\
    \ the initiator MUST use a Send Message to send\n   the SCSI Data-out PDU.  If\
    \ the F bit is set to 1, the iSER layer at\n   the initiator MUST use a SendSE\
    \ Message to send the SCSI Data-out\n   PDU.\n   Note that for solicited data,\
    \ the SCSI Data-out PDUs are not used\n   since R2T PDUs are not delivered to\
    \ the iSCSI layer at the initiator;\n   instead, R2T PDUs are transformed by the\
    \ iSER layer at the target\n   into RDMA Read operations.  (See Section 7.3.6.)\n"
- title: 7.3.5.  SCSI Data-In
  contents:
  - "7.3.5.  SCSI Data-In\n      Type:  data-type PDU\n      PDU-specific qualifiers:\
    \  DataDescriptorIn\n   When the iSCSI layer at the target is ready to return\
    \ the SCSI Read\n   data to the initiator, it MUST invoke the Put_Data Operational\n\
    \   Primitive qualified with DataDescriptorIn, which defines the SCSI\n   Data-in\
    \ buffer.  See Section 7.1 on the general requirement on the\n   handling of iSCSI\
    \ data-type PDUs.  SCSI Data-in PDU(s) are used in\n   SCSI Read data transfer\
    \ as described in Section 9.5.2.\n   The iSER layer at the target MUST do the\
    \ following for each\n   invocation of the Put_Data Operational Primitive:\n \
    \  1.  It MUST use the ITT in the SCSI Data-in PDU to locate the remote\n    \
    \   Read STag in the Remote Mapping that associates the ITT to\n       Advertised\
    \ STag(s).  The Remote Mapping was established earlier\n       by the iSER layer\
    \ at the target when the SCSI read command was\n       received from the initiator.\n\
    \   2.  It MUST generate and send an RDMA Write Message containing the\n     \
    \  read data to the initiator.\n       a.  It MUST use the remote Read STag as\
    \ the Data Sink STag of the\n           RDMA Write Message.\n       b.  It MUST\
    \ use the Buffer Offset from the SCSI Data-in PDU as\n           the Data Sink\
    \ Tagged Offset of the RDMA Write Message.\n       c.  It MUST use DataSegmentLength\
    \ from the SCSI Data-in PDU to\n           determine the amount of data to be\
    \ sent in the RDMA Write\n           Message.\n   3.  It MUST associate DataSN\
    \ and ITT from the SCSI Data-in PDU with\n       the RDMA Write operation.  If\
    \ the Put_Data Operational Primitive\n       invocation was qualified with Notify_Enable\
    \ set, then when the\n       iSER layer at the target receives a completion from\
    \ the RCaP\n       layer for the RDMA Write Message, the iSER layer at the target\n\
    \       MUST notify the iSCSI layer by invoking the\n       Data_Completion_Notify\
    \ Operational Primitive qualified with\n       DataSN and ITT.  Conversely, if\
    \ the Put_Data Operational\n       Primitive invocation was qualified with Notify_Enable\
    \ cleared,\n       then the iSER layer at the target MUST NOT notify the iSCSI\
    \ layer\n       on completion and MUST NOT invoke the Data_Completion_Notify\n\
    \       Operational Primitive.\n   When the A-bit is set to 1 in the SCSI Data-in\
    \ PDU, the iSER layer at\n   the target MUST notify the iSCSI layer at the target\
    \ when the data\n   transfer is complete at the initiator.  To perform this additional\n\
    \   function, the iSER layer at the target can take advantage of the\n   operational\
    \ ErrorRecoveryLevel if previously disclosed by the iSCSI\n   layer via an earlier\
    \ invocation of the Notice_Key_Values Operational\n   Primitive.  There are two\
    \ approaches that can be taken:\n   1.  If the iSER layer at the target knows\
    \ that the operational\n       ErrorRecoveryLevel is 2, or if the iSER layer at\
    \ the target does\n       not know the operational ErrorRecoveryLevel, then the\
    \ iSER layer\n       at the target MUST issue a zero-length RDMA Read Request\
    \ Message\n       following the RDMA Write Message.  When the iSER layer at the\n\
    \       target receives a completion for the RDMA Read Request Message\n     \
    \  from the RCaP layer, implying that the RDMA-Capable Controller at\n       the\
    \ initiator has completed processing the RDMA Write Message due\n       to the\
    \ completion ordering semantics of RCaP, the iSER layer at\n       the target\
    \ MUST notify the iSCSI layer at the target by invoking\n       the Data_Ack_Notify\
    \ Operational Primitive qualified with ITT and\n       DataSN (see Section 3.2.3).\n\
    \   2.  If the iSER layer at the target knows that the operational\n       ErrorRecoveryLevel\
    \ is 1, then the iSER layer at the target MUST\n       do one of the following:\n\
    \       a.  It MUST notify the iSCSI layer at the target by invoking the\n   \
    \        Data_Ack_Notify Operational Primitive qualified with ITT and\n      \
    \     DataSN (see Section 3.2.3) when it receives the local\n           completion\
    \ from the RCaP layer for the RDMA Write Message.\n           This is allowed\
    \ since digest errors do not occur in iSER (see\n           Section 10.1.4.2)\
    \ and a CRC error will cause the connection\n           to be terminated and the\
    \ task to be terminated anyway.  The\n           local RDMA Write completion from\
    \ the RCaP layer guarantees\n           that the RCaP layer will not access the\
    \ I/O Buffer again to\n           transfer the data associated with that RDMA\
    \ Write operation.\n       b.  Alternatively, it MUST use the same procedure for\
    \ handling\n           the data transfer completion at the initiator as for\n\
    \           ErrorRecoveryLevel 2.\n   Note that the iSCSI layer at the target\
    \ cannot set the A-bit to 1 if\n   the ErrorRecoveryLevel=0.\n   The SCSI status\
    \ MUST always be returned in a separate SCSI Response\n   PDU.  The S bit in the\
    \ SCSI Data-in PDU MUST always be set to 0.\n   There MUST NOT be a \"phase collapse\"\
    \ in the SCSI Data-in PDU.\n   Since the RDMA Write Message only transfers the\
    \ data portion of the\n   SCSI Data-in PDU but not the control information in\
    \ the header, such\n   as ExpCmdSN, if timely updates of such information are\
    \ crucial, the\n   iSCSI layer at the initiator MAY issue NOP-Out PDUs to request\
    \ that\n   the iSCSI layer at the target respond with the information using NOP-\n\
    \   In PDUs.\n"
- title: 7.3.6.  Ready to Transfer (R2T)
  contents:
  - "7.3.6.  Ready to Transfer (R2T)\n      Type:  data-type PDU\n      PDU-specific\
    \ qualifiers:  DataDescriptorOut\n   In order to send an R2T PDU, the iSCSI layer\
    \ at the target MUST\n   invoke the Get_Data Operational Primitive qualified with\n\
    \   DataDescriptorOut, which defines the I/O Buffer for receiving the\n   SCSI\
    \ Write data from the initiator.  See Section 7.1 on the general\n   requirements\
    \ on the handling of iSCSI data-type PDUs.\n   The iSER layer at the target MUST\
    \ do the following for each\n   invocation of the Get_Data Operational Primitive:\n\
    \   1.  It MUST ensure a valid local STag for the I/O Buffer and a valid\n   \
    \    Local Mapping that associates the Initiator Task Tag (ITT) to the\n     \
    \  local STag.  This may involve allocating a valid local STag and\n       establishing\
    \ a Local Mapping.\n   2.  It MUST use the ITT in the R2T to locate the remote\
    \ Write STag in\n       the Remote Mapping that associates the ITT to Advertised\
    \ STag(s).\n       The Remote Mapping is established earlier by the iSER layer\
    \ at\n       the target when the iSER Message containing the Advertised Write\n\
    \       STag and the SCSI Command PDU for a SCSI write or bidirectional\n    \
    \   command is received from the initiator.\n   3.  If the iSER-ORD value at the\
    \ target is set to 0, the iSER layer\n       at the target MUST terminate the\
    \ connection and free up the\n       resources associated with the connection\
    \ (as described in Section\n       5.2.3) if it receives the R2T PDU from the\
    \ iSCSI layer at the\n       target.  Upon termination of the connection, the\
    \ iSER layer at\n       the target MUST notify the iSCSI layer at the target by\
    \ invoking\n       the Connection_Terminate_Notify Operational Primitive.\n  \
    \ 4.  If the iSER-ORD value at the target is set to greater than 0, the\n    \
    \   iSER layer at the target MUST transform the R2T PDU into an RDMA\n       Read\
    \ Request Message.  While transforming the R2T PDU, the iSER\n       layer at\
    \ the target MUST ensure that the number of outstanding\n       RDMA Read Request\
    \ Messages does not exceed the iSER-ORD value.\n       To transform the R2T PDU,\
    \ the iSER layer at the target:\n       a.  MUST derive the local STag and local\
    \ Tagged Offset from the\n           DataDescriptorOut that qualified the Get_Data\
    \ invocation.\n       b.  MUST use the local STag as the Data Sink STag of the\
    \ RDMA\n           Read Request Message.\n       c.  MUST use the local Tagged\
    \ Offset as the Data Sink Tagged\n           Offset of the RDMA Read Request Message.\n\
    \       d.  MUST use the Desired Data Transfer Length from the R2T PDU as\n  \
    \         the RDMA Read Message Size of the RDMA Read Request Message.\n     \
    \  e.  MUST use the remote Write STag as the Data Source STag of the\n       \
    \    RDMA Read Request Message.\n       f.  MUST use the Buffer Offset from the\
    \ R2T PDU as the Data\n           Source Tagged Offset of the RDMA Read Request\
    \ Message.\n   5.  It MUST associate R2TSN and ITT from the R2T PDU with the RDMA\n\
    \       Read operation.  If the Get_Data Operational Primitive invocation\n  \
    \     is qualified with Notify_Enable set, then when the iSER layer at\n     \
    \  the target receives a completion from the RCaP layer for the RDMA\n       Read\
    \ operation, the iSER layer at the target MUST notify the\n       iSCSI layer\
    \ by invoking the Data_Completion_Notify Operational\n       Primitive qualified\
    \ with R2TSN and ITT.  Conversely, if the\n       Get_Data Operational Primitive\
    \ invocation is qualified with\n       Notify_Enable cleared, then the iSER layer\
    \ at the target MUST NOT\n       notify the iSCSI layer on completion and MUST\
    \ NOT invoke the\n       Data_Completion_Notify Operational Primitive.\n   When\
    \ the RCaP layer at the initiator receives a valid RDMA Read\n   Request Message,\
    \ it will return an RDMA Read Response Message\n   containing the solicited write\
    \ data to the target.  When the RCaP\n   layer at target receives the RDMA Read\
    \ Response Message from the\n   initiator, it will place the solicited data in\
    \ the I/O Buffer\n   referenced by the Data Sink STag in the RDMA Read Response\
    \ Message.\n   Since the RDMA Read Request Message from the target does not transfer\n\
    \   the control information in the R2T PDU, such as ExpCmdSN, if timely\n   updates\
    \ of such information are crucial, the iSCSI layer at the\n   initiator MAY issue\
    \ NOP-Out PDUs to request that the iSCSI layer at\n   the target respond with\
    \ the information using NOP-In PDUs.\n   Similarly, since the RDMA Read Response\
    \ Message from the initiator\n   only transfers the data but not the control information\
    \ normally\n   found in the SCSI Data-out PDU, such as ExpStatSN, if timely updates\n\
    \   of such information are crucial, the iSCSI layer at the target MAY\n   issue\
    \ NOP-In PDUs to request that the iSCSI layer at the initiator\n   respond with\
    \ the information using NOP-Out PDUs.\n"
- title: 7.3.7.  Asynchronous Message
  contents:
  - "7.3.7.  Asynchronous Message\n      Type:  control-type PDU\n      PDU-specific\
    \ qualifiers:  DataDescriptorSense\n   The iSCSI layer MUST invoke the Send_Control\
    \ Operational Primitive\n   qualified with DataDescriptorSense, which defines\
    \ the buffer\n   containing the sense and iSCSI Event information.  The iSER layer\n\
    \   MUST use a SendSE Message to send the Asynchronous Message PDU.\n"
- title: 7.3.8.  Text Request and Text Response
  contents:
  - "7.3.8.  Text Request and Text Response\n      Type:  control-type PDU\n     \
    \ PDU-specific qualifiers:  DataDescriptorTextOut (for Text\n      Request), DataDescriptorIn\
    \ (for Text Response)\n   The iSCSI layer MUST invoke the Send_Control Operational\
    \ Primitive\n   qualified with DataDescriptorTextOut (or DataDescriptorIn), which\n\
    \   defines the Text Request (or Text Response) buffer.  The iSER layer\n   MUST\
    \ use SendSE Messages to send the Text Request (or Text Response\n   PDUs).\n"
- title: 7.3.9.  Login Request and Login Response
  contents:
  - "7.3.9.  Login Request and Login Response\n   During the login negotiation, the\
    \ iSCSI layer interacts with the\n   transport layer directly and the iSER layer\
    \ is not involved.  See\n   Section 5.1 on iSCSI/iSER connection setup.  If the\
    \ underlying\n   transport is TCP, the Login Request PDUs and the Login Response\
    \ PDUs\n   are exchanged when the connection between the initiator and the\n \
    \  target is still in the byte stream mode.\n   The iSCSI layer MUST not send\
    \ a Login Request (or a Login Response)\n   PDU during the Full Feature Phase.\
    \  A Login Request (or a Login\n   Response) PDU, if used, MUST be treated as\
    \ an iSCSI protocol error.\n   The iSER layer MAY reject such a PDU from the iSCSI\
    \ layer with an\n   appropriate error code.  If a Login Request PDU is received\
    \ by the\n   iSCSI layer at the target, it MUST respond with a Reject PDU with\
    \ a\n   reason code of \"protocol error\".\n"
- title: 7.3.10.  Logout Request and Logout Response
  contents:
  - "7.3.10.  Logout Request and Logout Response\n      Type:  control-type PDU\n\
    \      PDU-specific qualifiers:  None\n   The iSER layer MUST use a SendSE Message\
    \ to send the Logout Request\n   or Logout Response PDU.  Sections 5.2.1 and 5.2.2\
    \ describe the\n   handling of the Logout Request and the Logout Response at the\n\
    \   initiator and the target and the interactions between the initiator\n   and\
    \ the target to terminate a connection.\n"
- title: 7.3.11.  SNACK Request
  contents:
  - "7.3.11.  SNACK Request\n   Since HeaderDigest and DataDigest must be negotiated\
    \ to \"None\", there\n   are no digest errors when the connection is in iSER-assisted\
    \ mode.\n   Also, since RCaP delivers all messages in the order they were sent,\n\
    \   there are no sequence errors when the connection is in iSER-assisted\n   mode.\
    \  Therefore, the iSCSI layer MUST NOT send SNACK Request PDUs.\n   A SNCAK Request\
    \ PDU, if used, MUST be treated as an iSCSI protocol\n   error.  The iSER layer\
    \ MAY reject such a PDU from the iSCSI layer\n   with an appropriate error code.\
    \  If a SNACK Request PDU is received\n   by the iSCSI layer at the target, it\
    \ MUST respond with a Reject PDU\n   with a reason code of \"protocol error\"\
    .\n"
- title: 7.3.12.  Reject
  contents:
  - "7.3.12.  Reject\n      Type:  control-type PDU\n      PDU-specific qualifiers:\
    \  DataDescriptorReject\n   The iSCSI layer MUST invoke the Send_Control Operational\
    \ Primitive\n   qualified with DataDescriptorReject, which defines the Reject\
    \ buffer.\n   The iSER layer MUST use a SendSE Message to send the Reject PDU.\n"
- title: 7.3.13.  NOP-Out and NOP-In
  contents:
  - "7.3.13.  NOP-Out and NOP-In\n      Type:  control-type PDU\n      PDU-specific\
    \ qualifiers:  DataDescriptorNOPOut (for NOP-Out),\n      DataDescriptorNOPIn\
    \ (for NOP-In)\n   The iSCSI layer MUST invoke the Send_Control Operational Primitive\n\
    \   qualified with DataDescriptorNOPOut (or DataDescriptorNOPIn), which\n   defines\
    \ the Ping (or Return Ping) data buffer.  The iSER layer MUST\n   use SendSE Messages\
    \ to send the NOP-Out (or NOP-In) PDU.\n"
- title: 8.  Flow Control and STag Management
  contents:
  - '8.  Flow Control and STag Management

    '
- title: 8.1.  Flow Control for RDMA Send Message Types
  contents:
  - "8.1.  Flow Control for RDMA Send Message Types\n   Send Message Types in RCaP\
    \ are used by the iSER layer to transfer\n   iSCSI control-type PDUs.  Each Send\
    \ Message Type in RCaP consumes an\n   Untagged Buffer at the Data Sink.  However,\
    \ neither the RCaP layer\n   nor the iSER layer provides an explicit flow control\
    \ mechanism for\n   the Send Message Types.  Therefore, the iSER layer SHOULD\
    \ provision\n   enough Untagged buffers for handling incoming Send Message Types\
    \ to\n   prevent buffer exhaustion at the RCaP layer.  If buffer exhaustion\n\
    \   occurs, it may result in the termination of the connection.\n   An implementation\
    \ may choose to satisfy the buffer requirement by\n   using a common buffer pool\
    \ shared across multiple connections, with\n   usage limits on a per-connection\
    \ basis and usage limits on the buffer\n   pool itself.  In such an implementation,\
    \ exceeding the buffer usage\n   limit for a connection or the buffer pool itself\
    \ may trigger\n   interventions from the iSER layer to replenish the buffer pool\
    \ and/or\n   to isolate the connection causing the problem.\n   iSER also provides\
    \ the MaxOutstandingUnexpectedPDUs key to be used by\n   the initiator and the\
    \ target to declare the maximum number of\n   outstanding \"unexpected\" control-type\
    \ PDUs that it can receive.  It\n   is intended to allow the receiving side to\
    \ determine the amount of\n   buffer resources needed beyond the normal flow control\
    \ mechanism\n   available in iSCSI.\n   The buffer resources required at both\
    \ the initiator and the target as\n   a result of control-type PDUs sent by the\
    \ initiator is described in\n   Section 8.1.1.  The buffer resources required\
    \ at both the initiator\n   and target as a result of control-type PDUs sent by\
    \ the target is\n   described in Section 8.1.2.\n"
- title: 8.1.1.  Flow Control for Control-Type PDUs from the Initiator
  contents:
  - "8.1.1.  Flow Control for Control-Type PDUs from the Initiator\n   The control-type\
    \ PDUs that can be sent by an initiator to a target\n   can be grouped into the\
    \ following categories:\n   1.  Regulated:  Control-type PDUs in this category\
    \ are regulated by\n       the iSCSI CmdSN window mechanism and the immediate\
    \ flag is not\n       set.\n   2.  Unregulated but Expected:  Control-type PDUs\
    \ in this category are\n       not regulated by the iSCSI CmdSN window mechanism\
    \ but are\n       expected by the target.\n   3.  Unregulated and Unexpected:\
    \  Control-type PDUs in this category\n       are not regulated by the iSCSI CmdSN\
    \ window mechanism and are\n       \"unexpected\" by the target.\n"
- title: 8.1.1.1.  Control-Type PDUs from the Initiator in the Regulated Category
  contents:
  - "8.1.1.1.  Control-Type PDUs from the Initiator in the Regulated Category\n  \
    \ Control-type PDUs that can be sent by the initiator in this category\n   are\
    \ regulated by the iSCSI CmdSN window mechanism and the immediate\n   flag is\
    \ not set.\n   The queuing capacity required of the iSCSI layer at the target\
    \ is\n   described in Section 3.2.2.1 of [RFC3720].  For each of the control-\n\
    \   type PDUs that can be sent by the initiator in this category, the\n   initiator\
    \ MUST provision for the buffer resources required for the\n   corresponding control-type\
    \ PDU sent as a response from the target.\n   The following is a list of the PDUs\
    \ that can be sent by the initiator\n   and the PDUs that are sent by the target\
    \ in response:\n       a.  When an initiator sends a SCSI Command PDU, it expects\
    \ a SCSI\n           Response PDU from the target.\n       b.  When the initiator\
    \ sends a Task Management Function Request\n           PDU, it expects a Task\
    \ Management Function Response PDU from\n           the target.\n       c.  When\
    \ the initiator sends a Text Request PDU, it expects a\n           Text Response\
    \ PDU from the target.\n       d.  When the initiator sends a Logout Request PDU,\
    \ it expects a\n           Logout Response PDU from the target.\n       e.  When\
    \ the initiator sends a NOP-Out PDU as a ping request with\n           ITT !=\
    \ 0xffffffff and TTT = 0xffffffff, it expects a NOP-In\n           PDU from the\
    \ target with the same ITT and TTT as in the ping\n           request.\n   The\
    \ response from the target for any of the PDUs enumerated here may\n   alternatively\
    \ be in the form of a Reject PDU sent instead before the\n   task is active, as\
    \ described in Section 6.3 of [RFC3720].\n"
- title: 8.1.1.2.  Control-Type PDUs from the Initiator in the Unregulated but
  contents:
  - "8.1.1.2.  Control-Type PDUs from the Initiator in the Unregulated but\n     \
    \     Expected Category\n   For the control-type PDUs in the Unregulated but Expected\
    \ category,\n   the amount of buffering resources required at the target can be\n\
    \   predetermined.  The following is a list of the PDUs in this category:\n  \
    \     a.  SCSI Data-out PDUs are used by the initiator to send\n           unsolicited\
    \ data.  The amount of buffer resources required by\n           the target can\
    \ be determined using FirstBurstLength.  Note\n           that SCSI Data-out PDUs\
    \ are not used for solicited data since\n           the R2T PDU that is used for\
    \ solicitation is transformed into\n           RDMA Read operations by the iSER\
    \ layer at the target.  See\n           Section 7.3.4.\n       b.  A NOP-Out PDU\
    \ with TTT != 0xffffffff is sent as a ping\n           response by the initiator\
    \ to the NOP-In PDU sent as a ping\n           request by the target.\n"
- title: 8.1.1.3.  Control-Type PDUs from the Initiator in the Unregulated and
  contents:
  - "8.1.1.3.  Control-Type PDUs from the Initiator in the Unregulated and\n     \
    \     Unexpected Category\n   PDUs in the Unregulated and Unexpected category\
    \ are PDUs with the\n   immediate flag set.  The number of PDUs in this category\
    \ that can be\n   sent by an initiator is controlled by the value of\n   MaxOutstandingUnexpectedPDUs\
    \ declared by the target (see Section\n   6.7).  After a PDU in this category\
    \ is sent by the initiator, it is\n   outstanding until it is retired.  At any\
    \ time, the number of\n   outstanding unexpected PDUs MUST not exceed the value\
    \ of\n   MaxOutstandingUnexpectedPDUs declared by the target.\n   The target uses\
    \ the value of MaxOutstandingUnexpectedPDUs that it\n   declared to determine\
    \ the amount of buffer resources required for\n   control-type PDUs in this category\
    \ that can be sent by an initiator.\n   For the initiator, for each of the control-type\
    \ PDUs that can be sent\n   in this category, the initiator MUST provision for\
    \ the buffer\n   resources if required for the corresponding control-type PDU\
    \ that can\n   be sent as a response from the target.\n   An outstanding PDU in\
    \ this category is retired as follows.  If the\n   CmdSN of the PDU sent by the\
    \ initiator in this category is x, the PDU\n   is outstanding until the initiator\
    \ sends a non-immediate control-type\n   PDU on the same connection with CmdSN\
    \ = y (where y is at least x) and\n   the target responds with a control-type\
    \ PDU on any connection where\n   ExpCmdSN is at least y+1.\n   When the number\
    \ of outstanding unexpected control-type PDUs equals\n   MaxOutstandingUnexpectedPDUs,\
    \ the iSCSI layer at the initiator MUST\n   NOT generate any unexpected PDUs that\
    \ otherwise it would have\n   generated, even if it is intended for immediate\
    \ delivery.\n"
- title: 8.1.2.  Flow Control for Control-Type PDUs from the Target
  contents:
  - "8.1.2.  Flow Control for Control-Type PDUs from the Target\n   Control-type PDUs\
    \ that can be sent by a target and are expected by\n   the initiator are listed\
    \ in the Regulated category (see Section\n   8.1.1.1).\n   For the control-type\
    \ PDUs that can be sent by a target and are\n   unexpected by the initiator, the\
    \ number is controlled by\n   MaxOutstandingUnexpectedPDUs declared by the initiator\
    \ (see Section\n   6.7).  After a PDU in this category is sent by a target, it\
    \ is\n   outstanding until it is retired.  At any time, the number of\n   outstanding\
    \ unexpected PDUs MUST not exceed the value of\n   MaxOutstandingUnexpectedPDUs\
    \ declared by the initiator.  The\n   initiator uses the value of MaxOutstandingUnexpectedPDUs\
    \ that it\n   declared to determine the amount of buffer resources required for\n\
    \   control-type PDUs in this category that can be sent by a target.  The\n  \
    \ following is a list of the PDUs in this category and the conditions\n   for\
    \ retiring the outstanding PDU:\n       a.  For an Asynchronous Message PDU with\
    \ StatSN = x, the PDU is\n           outstanding until the initiator sends a control-type\
    \ PDU with\n           ExpStatSN set to at least x+1.\n       b.  For a Reject\
    \ PDU with StatSN = x that is sent after a task is\n           active, the PDU\
    \ is outstanding until the initiator sends a\n           control-type PDU with\
    \ ExpStatSN set to at least x+1.\n       c.  For a NOP-In PDU with ITT = 0xffffffff\
    \ and StatSN = x, the\n           PDU is outstanding until the initiator responds\
    \ with a\n           control-type PDU on the same connection where ExpStatSN is\
    \ at\n           least x+1.  But if the NOP-In PDU is sent as a ping request\n\
    \           with TTT != 0xffffffff, the PDU can also be retired when the\n   \
    \        initiator sends a NOP-Out PDU with the same ITT and TTT as in\n     \
    \      the ping request.  Note that when a target sends a NOP-In PDU\n       \
    \    as a ping request, it must provision a buffer for the NOP-Out\n         \
    \  PDU sent as a ping response from the initiator.\n   When the number of outstanding\
    \ unexpected control-type PDUs equals\n   MaxOutstandingUnexpectedPDUs, the iSCSI\
    \ layer at the target MUST NOT\n   generate any unexpected PDUs that otherwise\
    \ it would have generated,\n   even if its intent is to indicate an iSCSI error\
    \ condition (e.g.,\n   Asynchronous Message, Reject).  Task timeouts, as in the\
    \ initiator\n   waiting for a command completion or other connection and session\n\
    \   level exceptions, will ensure that correct operational behavior will\n   result\
    \ in these cases despite not generating the PDU.  This rule\n   overrides any\
    \ other requirements elsewhere that require that a Reject\n   PDU MUST be sent.\n\
    \   (Implementation note:  A SCSI task timeout and recovery can be a\n   lengthy\
    \ process and hence SHOULD be avoided by proper provisioning of\n   resources.)\n\
    \   (Implementation note:  To ensure that the initiator has a means to\n   inform\
    \ the target that outstanding PDUs have been retired, the target\n   should reserve\
    \ the last unexpected control-type PDU allowable by the\n   value of MaxOutstandingUnexpectedPDUs\
    \ declared by the initiator for\n   sending a NOP-In ping request with TTT !=\
    \ 0xffffffff to allow the\n   initiator to return the NOP-Out ping response with\
    \ the current\n   ExpStatSN.)\n"
- title: 8.2.  Flow Control for RDMA Read Resources
  contents:
  - "8.2.  Flow Control for RDMA Read Resources\n   The total number of RDMA Read\
    \ operations that can be active\n   simultaneously on an iSCSI/iSER connection\
    \ depends on the amount of\n   resources allocated as declared in the iSER Hello\
    \ exchange described\n   in Section 5.1.3.  Exceeding the number of RDMA Read\
    \ operations\n   allowed on a connection will result in the connection being\n\
    \   terminated by the RCaP layer.  The iSER layer at the target maintains\n  \
    \ the iSER-ORD to keep track of the maximum number of RDMA Read\n   Requests that\
    \ can be issued by the iSER layer on a particular RCaP\n   Stream.\n   During\
    \ connection setup (see Section 5.1), iSER-IRD is known at the\n   initiator and\
    \ iSER-ORD is known at the target after the iSER layers\n   at the initiator and\
    \ the target have respectively allocated the\n   connection resources necessary\
    \ to support RCaP, as directed by the\n   Allocate_Connection_Resources Operational\
    \ Primitive from the iSCSI\n   layer before the end of the iSCSI Login Phase.\
    \  In the Full Feature\n   Phase, the first message sent by the initiator is the\
    \ iSER Hello\n   Message (see Section 9.3), which contains the value of iSER-IRD.\
    \  In\n   response to the iSER Hello Message, the target sends the iSER\n   HelloReply\
    \ Message (see Section 9.4), which contains the value of\n   iSER-ORD.  The iSER\
    \ layer at both the initiator and the target MAY\n   adjust (lower) the resources\
    \ associated with iSER-IRD and iSER-ORD\n   respectively to match the iSER-ORD\
    \ value declared in the HelloReply\n   Message.  The iSER layer at the target\
    \ MUST flow control the RDMA\n   Read Request Messages to not exceed the iSER-ORD\
    \ value at the target.\n"
- title: 8.3.  STag Management
  contents:
  - "8.3.  STag Management\n   An STag, as defined in [RDMAP], is an identifier of\
    \ a Tagged Buffer\n   used in an RDMA operation.  The allocation and the subsequent\n\
    \   invalidation of the STags are specified in this document if the STags\n  \
    \ are exposed on the wire by being Advertised in the iSER header or\n   declared\
    \ in the header of an RCaP Message.\n"
- title: 8.3.1.  Allocation of STags
  contents:
  - "8.3.1.  Allocation of STags\n   When the iSCSI layer at the initiator invokes\
    \ the Send_Control\n   Operational Primitive to request that the iSER layer at\
    \ the initiator\n   process a SCSI command, zero, one, or two STags may be allocated\
    \ by\n   the iSER layer.  See Section 7.3.1 for details.  The number of STags\n\
    \   allocated depends on whether the command is unidirectional or\n   bidirectional\
    \ and whether or not solicited write data transfer is\n   involved.\n   When the\
    \ iSCSI layer at the initiator invokes the Send_Control\n   Operational Primitive\
    \ to request that the iSER layer at the initiator\n   process a Task Management\
    \ Function Request with the TASK REASSIGN\n   function, besides allocating zero,\
    \ one, or two STags, the iSER layer\n   MUST invalidate the existing STags, if\
    \ any, associated with the ITT.\n   See Section 7.3.3 for details.\n   The iSER\
    \ layer at the target allocates a local Data Sink STag when\n   the iSCSI layer\
    \ at the target invokes the Get_Data Operational\n   Primitive to request that\
    \ the iSER layer process an R2T PDU.  See\n   Section 7.3.6 for details.\n"
- title: 8.3.2.  Invalidation of STags
  contents:
  - "8.3.2.  Invalidation of STags\n   The invalidation of the STags at the initiator\
    \ at the completion of a\n   unidirectional or bidirectional command when the\
    \ associated SCSI\n   Response PDU is sent by the target is described in Section\
    \ 7.3.2.\n   When a unidirectional or bidirectional command concludes without\
    \ the\n   associated SCSI Response PDU being sent by the target, the iSCSI\n \
    \  layer at the initiator MUST request that the iSER layer at the\n   initiator\
    \ invalidate the STags by invoking the\n   Deallocate_Task_Resources Operational\
    \ Primitive qualified with ITT.\n   In response, the iSER layer at the initiator\
    \ MUST locate the STag(s)\n   (if any) in the Local Mapping that associates the\
    \ ITT to the local\n   STag(s).  The iSER layer at the initiator MUST invalidate\
    \ the STag(s)\n   (if any) and the Local Mapping.\n   For an RDMA Read operation\
    \ used to realize a SCSI Write data\n   transfer, the iSER layer at the target\
    \ SHOULD invalidate the Data\n   Sink STag at the conclusion of the RDMA Read\
    \ operation referencing\n   the Data Sink STag (to permit the immediate reuse\
    \ of buffer\n   resources).\n   For an RDMA Write operation used to realize a\
    \ SCSI Read data\n   transfer, the Data Source STag at the target is not declared\
    \ to the\n   initiator and is not exposed on the wire.  Invalidation of the STag\n\
    \   is thus not specified.\n   When a unidirectional or bidirectional command\
    \ concludes without the\n   associated SCSI Response PDU being sent by the target,\
    \ the iSCSI\n   layer at the target MUST request that the iSER layer at the target\n\
    \   invalidate the STags by invoking the Deallocate_Task_Resources\n   Operational\
    \ Primitive qualified with ITT.  In response, the iSER\n   layer at the target\
    \ MUST locate the local STag(s) (if any) in the\n   Local Mapping that associates\
    \ the ITT to the local STag(s).  The iSER\n   layer at the target MUST invalidate\
    \ the local STag(s) (if any) and\n   the mapping.\n"
- title: 9.  iSER Control and Data Transfer
  contents:
  - "9.  iSER Control and Data Transfer\n   For iSCSI data-type PDUs (see Section\
    \ 7.1), the iSER layer uses RDMA\n   Read and RDMA Write operations to transfer\
    \ the solicited data.  For\n   iSCSI control-type PDUs (see Section 7.2), the\
    \ iSER layer uses Send\n   Message Types of RCaP.\n"
- title: 9.1.  iSER Header Format
  contents:
  - "9.1.  iSER Header Format\n   An iSER header MUST be present in every Send Message\
    \ Type of RCaP.\n   The iSER header is located in the first 12 bytes of the message\n\
    \   payload of the Send Message Type of RCaP, as shown in Figure 2.\n       0\
    \                   1                   2                   3\n       0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Opcode|                  Opcode Specific Fields               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                    Opcode Specific Fields                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    Opcode Specific Fields                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \                 Figure 2.  iSER Header Format\n   Opcode - Operation Code: 4\
    \ bits\n        The Opcode field identifies the type of iSER Messages:\n     \
    \      0001b = iSCSI control-type PDU\n           0010b = iSER Hello Message\n\
    \           0011b = iSER HelloReply Message\n           All other opcodes are\
    \ reserved.\n"
- title: 9.2.  iSER Header Format for the iSCSI Control-Type PDU
  contents:
  - "9.2.  iSER Header Format for the iSCSI Control-Type PDU\n   The iSER layer uses\
    \ Send Message Types of RCaP to transfer iSCSI\n   control-type PDUs (see Section\
    \ 7.2).  The message payload of each of\n   the Send Message Types of RCaP used\
    \ for transferring an iSER Message\n   contains an iSER Header followed by an\
    \ iSCSI control-type PDU.\n   The iSER header in a Send Message Type of RCaP carrying\
    \ an iSCSI\n   control-type PDU MUST have the format as described in Figure 3.\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |       |W|R|                                                   |\n   \
    \   | 0001b |S|S|                  Reserved                         |\n      |\
    \       |V|V|                                                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                        Write STag (or N/A)                    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Read STag (or N/A)                    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          Figure 3.  iSER Header Format for iSCSI Control-Type PDU\n   WSV -\
    \ Write STag Valid flag: 1 bit\n       This flag indicates the validity of the\
    \ Write STag field of the\n       iSER Header.  If set to one, the Write STag\
    \ field in this iSER\n       Header is valid.  If set to zero, the Write STag\
    \ field in this\n       iSER Header MUST be ignored at the receiver.  The Write\
    \ STag\n       Valid flag is set to one when there is solicited data to be\n \
    \      transferred for a SCSI write or bidirectional command, or when\n      \
    \ there are non-immediate unsolicited and solicited data to be\n       transferred\
    \ for the referenced task specified in a Task\n       Management Function Request\
    \ with the TASK REASSIGN function.\n   RSV - Read STag Valid flag: 1 bit\n   \
    \    This flag indicates the validity of the Read STag field of the\n       iSER\
    \ Header.  If set to one, the Read STag field in this iSER\n       Header is valid.\
    \  If set to zero, the Read STag field in this\n       iSER Header MUST be ignored\
    \ at the receiver.  The Read STag Valid\n       flag is set to one for a SCSI\
    \ read or bidirectional command, or\n       for a Task Management Function Request\
    \ with the TASK REASSIGN\n       function.\n   Write STag - Write Steering Tag:\
    \ 32 bits\n       This field contains the Write STag when the Write STag Valid\
    \ flag\n       is set to one.  For a SCSI write or bidirectional command, the\n\
    \       Write STag is used to Advertise the initiator's I/O Buffer\n       containing\
    \ the solicited data.  For a Task Management Function\n       Request with the\
    \ TASK REASSIGN function, the Write STag is used\n       to Advertise the initiator's\
    \ I/O Buffer containing the non-\n       immediate unsolicited data and solicited\
    \ data.  This Write STag\n       is used as the Data Source STag in the resultant\
    \ RDMA Read\n       operation(s).  When the Write STag Valid flag is set to zero,\n\
    \       this field MUST be set to zero.\n   Read STag - Read Steering Tag: 32\
    \ bits\n       This field contains the Read STag when the Read STag Valid flag\n\
    \       is set to one.  The Read STag is used to Advertise the\n       initiator's\
    \ Read I/O Buffer of a SCSI read or bidirectional\n       command, or of a Task\
    \ Management Function Request with the TASK\n       REASSIGN function.  This Read\
    \ STag is used as the Data Sink STag\n       in the resultant RDMA Write operation(s).\
    \  When the Read STag\n       Valid flag is zero, this field MUST be set to zero.\n\
    \   Reserved:\n       Reserved fields MUST be set to zero on transmit and MUST\
    \ be\n       ignored on reception.\n"
- title: 9.3.  iSER Header Format for the iSER Hello Message
  contents:
  - "9.3.  iSER Header Format for the iSER Hello Message\n   An iSER Hello Message\
    \ MUST only contain the iSER header, which MUST\n   have the format as described\
    \ in Figure 4.  The iSER Hello Message is\n   the first iSER Message sent on the\
    \ RCaP Stream from the iSER layer at\n   the initiator to the iSER layer at the\
    \ target.\n       0                   1                   2                  \
    \ 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |       |       |       |       |                               |\n      |\
    \ 0010b | Rsvd  | MaxVer| MinVer|           iSER-IRD            |\n      |   \
    \    |       |       |       |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           Reserved                            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                           Reserved                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure 4.  iSER Header Format for iSER Hello Message\n   MaxVer -\
    \ Maximum Version: 4 bits\n       This field specifies the maximum version of\
    \ the iSER protocol\n       supported.  It MUST be set to one to indicate the\
    \ version of the\n       specification described in this document.\n   MinVer\
    \ - Minimum Version: 4 bits\n       This field specifies the minimum version of\
    \ the iSER protocol\n       supported.  It MUST be set to one to indicate the\
    \ version of the\n       specification described in this document.\n   iSER-IRD:\
    \ 16 bits\n       This field contains the value of the iSER-IRD at the initiator.\n\
    \   Reserved (Rsvd):\n       Reserved fields MUST be set to zero on transmit,\
    \ and MUST be\n       ignored on reception.\n"
- title: 9.4.  iSER Header Format for the iSER HelloReply Message
  contents:
  - "9.4.  iSER Header Format for the iSER HelloReply Message\n   An iSER HelloReply\
    \ Message MUST only contain the iSER header which\n   MUST have the format as\
    \ described in Figure 5.  The iSER HelloReply\n   Message is the first iSER Message\
    \ sent on the RCaP Stream from the\n   iSER layer at the target to the iSER layer\
    \ at the initiator.\n       0                   1                   2        \
    \           3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |       |     |R|       |       |                               |\n   \
    \   | 0011b |Rsvd |E| MaxVer| CurVer|           iSER-ORD            |\n      |\
    \       |     |J|       |       |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           Reserved                            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                           Reserved                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         Figure 5.  iSER Header Format for iSER HelloReply Message\n   REJ -\
    \ Reject flag: 1 bit\n       This flag indicates whether the target is rejecting\
    \ this\n       connection.  If set to one, the target is rejecting the\n     \
    \  connection.\n   MaxVer - Maximum Version: 4 bits\n       This field specifies\
    \ the maximum version of the iSER protocol\n       supported.  It MUST be set\
    \ to one to indicate the version of the\n       specification described in this\
    \ document.\n   CurVer - Current Version: 4 bits\n       This field specifies\
    \ the current version of the iSER protocol\n       supported.  It MUST be set\
    \ to one to indicate the version of the\n       specification described in this\
    \ document.\n   iSER-ORD: 16 bits\n       This field contains the value of the\
    \ iSER-ORD at the target.\n   Reserved (Rsvd):\n       Reserved fields MUST be\
    \ set to zero on transmit, and MUST be\n       ignored on reception.\n"
- title: 9.5.  SCSI Data Transfer Operations
  contents:
  - "9.5.  SCSI Data Transfer Operations\n   The iSER layer at the initiator and the\
    \ iSER layer at the target\n   handle each SCSI Write, SCSI Read, and bidirectional\
    \ operation as\n   described below.\n"
- title: 9.5.1.  SCSI Write Operation
  contents:
  - "9.5.1.  SCSI Write Operation\n   The iSCSI layer at the initiator MUST invoke\
    \ the Send_Control\n   Operational Primitive to request that the iSER layer at\
    \ the initiator\n   send the SCSI write command.  The iSER layer at the initiator\
    \ MUST\n   request that the RCaP layer transmit a SendSE Message with the\n  \
    \ message payload consisting of the iSER header followed by the SCSI\n   Command\
    \ PDU and immediate data (if any).  If there is solicited data,\n   the iSER layer\
    \ MUST Advertise the Write STag in the iSER header of\n   the SendSE Message,\
    \ as described in Section 9.2.  Upon receiving the\n   SendSE Message, the iSER\
    \ layer at the target MUST notify the iSCSI\n   layer at the target by invoking\
    \ the Control_Notify Operational\n   Primitive qualified with the SCSI Command\
    \ PDU.  See Section 7.3.1 for\n   details on the handling of the SCSI write command.\n\
    \   For the non-immediate unsolicited data, the iSCSI layer at the\n   initiator\
    \ MUST invoke a Send_Control Operational Primitive qualified\n   with the SCSI\
    \ Data-out PDU.  Upon receiving each Send or SendSE\n   Message containing the\
    \ non-immediate unsolicited data, the iSER layer\n   at the target MUST notify\
    \ the iSCSI layer at the target by invoking\n   the Control_Notify Operational\
    \ Primitive qualified with the SCSI\n   Data-out PDU.  See Section 7.3.4 for details\
    \ on the handling of the\n   SCSI Data-out PDU.\n   For the solicited data, when\
    \ the iSCSI layer at the target has an I/O\n   Buffer available, it MUST invoke\
    \ the Get_Data Operational Primitive\n   qualified with the R2T PDU.  See Section\
    \ 7.3.6 for details on the\n   handling of the R2T PDU.\n   When the data transfer\
    \ associated with this SCSI Write operation is\n   complete, the iSCSI layer at\
    \ the target MUST invoke the Send_Control\n   Operational Primitive when it is\
    \ ready to send the SCSI Response PDU.\n   Upon receiving a SendSE or SendInvSE\
    \ Message containing the SCSI\n   Response PDU, the iSER layer at the initiator\
    \ MUST notify the iSCSI\n   layer at the initiator by invoking the Control_Notify\
    \ Operational\n   Primitive qualified with the SCSI Response PDU.  See Section\
    \ 7.3.2\n   for details on the handling of the SCSI Response PDU.\n"
- title: 9.5.2.  SCSI Read Operation
  contents:
  - "9.5.2.  SCSI Read Operation\n   The iSCSI layer at the initiator MUST invoke\
    \ the Send_Control\n   Operational Primitive to request that the iSER layer at\
    \ the initiator\n   to send the SCSI read command.  The iSER layer at the initiator\
    \ MUST\n   request that the RCaP layer transmit a SendSE Message with the\n  \
    \ message payload consisting of the iSER header followed by the SCSI\n   Command\
    \ PDU.  The iSER layer at the initiator MUST Advertise the Read\n   STag in the\
    \ iSER header of the SendSE Message, as described in\n   Section 9.2.  Upon receiving\
    \ the SendSE Message, the iSER layer at\n   the target MUST notify the iSCSI layer\
    \ at the target by invoking the\n   Control_Notify Operational Primitive qualified\
    \ with the SCSI Command\n   PDU.  See Section 7.3.1 for details on the handling\
    \ of the SCSI read\n   command.\n   When the requested SCSI data is available\
    \ in the I/O Buffer, the\n   iSCSI layer at the target MUST invoke the Put_Data\
    \ Operational\n   Primitive qualified with the SCSI Data-in PDU.  See Section\
    \ 7.3.5 for\n   details on the handling of the SCSI Data-in PDU.\n   When the\
    \ data transfer associated with this SCSI Read operation is\n   complete, the\
    \ iSCSI layer at the target MUST invoke the Send_Control\n   Operational Primitive\
    \ when it is ready to send the SCSI Response PDU.\n   Upon receiving the SendInvSE\
    \ Message containing the SCSI Response\n   PDU, the iSER layer at the initiator\
    \ MUST notify the iSCSI layer at\n   the initiator by invoking the Control_Notify\
    \ Operational Primitive\n   qualified with the SCSI Response PDU.  See Section\
    \ 7.3.2 for details\n   on the handling of the SCSI Response PDU.\n"
- title: 9.5.3.  Bidirectional Operation
  contents:
  - "9.5.3.  Bidirectional Operation\n   The initiator and the target handle the SCSI\
    \ Write and the SCSI Read\n   portions of this bidirectional operation the same\
    \ as described in\n   Sections 9.5.1 and 9.5.2, respectively.\n"
- title: 10.  iSER Error Handling and Recovery
  contents:
  - "10.  iSER Error Handling and Recovery\n   RCaP provides the iSER layer with reliable\
    \ in-order delivery.\n   Therefore, the error management needs of an iSER-assisted\
    \ connection\n   are somewhat different than those of a Traditional iSCSI connection.\n"
- title: 10.1.  Error Handling
  contents:
  - "10.1.  Error Handling\n   iSER error handling is described in the following sections,\n\
    \   classified loosely based on the sources of errors:\n   1.  Those originating\
    \ at the transport layer (e.g., TCP).\n   2.  Those originating at the RCaP layer.\n\
    \   3.  Those originating at the iSER layer.\n   4.  Those originating at the\
    \ iSCSI layer.\n"
- title: 10.1.1.  Errors in the Transport Layer
  contents:
  - "10.1.1.  Errors in the Transport Layer\n   If the transport layer is TCP, then\
    \ TCP packets with detected errors\n   are silently dropped by the TCP layer and\
    \ result in retransmission at\n   the TCP layer.  This has no impact on the iSER\
    \ layer.  However,\n   connection loss (e.g., link failure) and unexpected termination\n\
    \   (e.g., TCP graceful or abnormal close without the iSCSI Logout\n   exchanges)\
    \ at the transport layer will cause the iSCSI/iSER\n   connection to be terminated\
    \ as well.\n"
- title: 10.1.1.1.  Failure in the Transport Layer before RCaP Mode Is Enabled
  contents:
  - "10.1.1.1.  Failure in the Transport Layer before RCaP Mode Is Enabled\n   If\
    \ the connection is lost or terminated before the iSCSI layer\n   invokes the\
    \ Allocate_Connection_Resources Operational Primitive, the\n   login process is\
    \ terminated and no further action is required.\n   If the connection is lost\
    \ or terminated after the iSCSI layer has\n   invoked the Allocate_Connection_Resources\
    \ Operational Primitive, then\n   the iSCSI layer MUST request that the iSER layer\
    \ deallocate all\n   connection resources by invoking the Deallocate_Connection_Resources\n\
    \   Operational Primitive.\n"
- title: 10.1.1.2.  Failure in the Transport Layer after RCaP Mode Is Enabled
  contents:
  - "10.1.1.2.  Failure in the Transport Layer after RCaP Mode Is Enabled\n   If the\
    \ connection is lost or terminated after the iSCSI layer has\n   invoked the Enable_Datamover\
    \ Operational Primitive, the iSER layer\n   MUST notify the iSCSI layer of the\
    \ connection loss by invoking the\n   Connection_Terminate_Notify Operational\
    \ Primitive.  Prior to invoking\n   the Connection_Terminate_Notify Operational\
    \ Primitive, the iSER layer\n   MUST perform the actions described in Section\
    \ 5.2.3.2.\n"
- title: 10.1.2.  Errors in the RCaP Layer
  contents:
  - "10.1.2.  Errors in the RCaP Layer\n   The RCaP layer does not have error recovery\
    \ operations built in.  If\n   errors are detected at the RCaP layer, the RCaP\
    \ layer will terminate\n   the RCaP Stream and the associated connection.\n"
- title: 10.1.2.1.  Errors Detected in the Local RCaP Layer
  contents:
  - "10.1.2.1.  Errors Detected in the Local RCaP Layer\n   If an error is encountered\
    \ at the local RCaP layer, the RCaP layer\n   MAY send a Terminate Message to\
    \ the Remote Peer to report the error\n   if possible.  (For iWARP, see [RDMAP]\
    \ for the list of errors where a\n   Terminate Message is sent.)  The RCaP layer\
    \ is responsible for\n   terminating the connection.  After the RCaP layer notifies\
    \ the iSER\n   layer that the connection is terminated, the iSER layer MUST notify\n\
    \   the iSCSI layer by invoking the Connection_Terminate_Notify\n   Operational\
    \ Primitive.  Prior to invoking the\n   Connection_Terminate_Notify Operational\
    \ Primitive, the iSER layer\n   MUST perform the actions described in Section\
    \ 5.2.3.2.\n"
- title: 10.1.2.2.  Errors Detected in the RCaP Layer at the Remote Peer
  contents:
  - "10.1.2.2.  Errors Detected in the RCaP Layer at the Remote Peer\n   If an error\
    \ is encountered at the RCaP layer at the Remote Peer, the\n   RCaP layer at the\
    \ Remote Peer may send a Terminate Message to report\n   the error if possible.\
    \  If it is unable to send the Terminate\n   Message, the connection is terminated.\
    \  This is treated the same as a\n   failure in the transport layer after RDMA\
    \ is enabled as described in\n   Section 10.1.1.2.\n   If an error is encountered\
    \ at the RCaP layer at the Remote Peer and\n   it is able to send a Terminate\
    \ Message, the RCaP layer at the Remote\n   Peer is responsible for terminating\
    \ the connection.  After the local\n   RCaP layer notifies the iSER layer that\
    \ the connection is terminated,\n   the iSER layer MUST notify the iSCSI layer\
    \ by invoking the\n   Connection_Terminate_Notify Operational Primitive.  Prior\
    \ to invoking\n   the Connection_Terminate_Notify Operational Primitive, the iSER\
    \ layer\n   MUST perform the actions described in Section 5.2.3.2.\n"
- title: 10.1.3.  Errors in the iSER Layer
  contents:
  - "10.1.3.  Errors in the iSER Layer\n   The error handling due to errors at the\
    \ iSER layer is described in\n   the following sections.\n"
- title: 10.1.3.1.  Insufficient Connection Resources to Support RCaP at
  contents:
  - "10.1.3.1.  Insufficient Connection Resources to Support RCaP at\n           Connection\
    \ Setup\n   After the iSCSI layer at the initiator invokes the\n   Allocate_Connection_Resources\
    \ Operational Primitive during the iSCSI\n   Login Negotiation Phase, if the iSER\
    \ layer at the initiator fails to\n   allocate the connection resources necessary\
    \ to support RCaP, it MUST\n   return a status of failure to the iSCSI layer at\
    \ the initiator.  The\n   iSCSI layer at the initiator MUST terminate the connection\
    \ as\n   described in Section 5.2.3.1.\n   After the iSCSI layer at the target\
    \ invokes the\n   Allocate_Connection_Resources Operational Primitive during the\
    \ iSCSI\n   Login Negotiation Phase, if the iSER layer at the target fails to\n\
    \   allocate the connection resources necessary to support RCaP, it MUST\n   return\
    \ a status of failure to the iSCSI layer at the target.  The\n   iSCSI layer at\
    \ the target MUST send a Login Response with a status\n   class of 3 (Target Error),\
    \ and a status code of \"0302\" (Out of\n   Resources).  The iSCSI layers at the\
    \ initiator and the target MUST\n   terminate the connection as described in Section\
    \ 5.2.3.1.\n"
- title: 10.1.3.2.  iSER Negotiation Failures
  contents:
  - "10.1.3.2.  iSER Negotiation Failures\n   If the RCaP or iSER related parameters\
    \ declared by the initiator in\n   the iSER Hello Message are unacceptable to\
    \ the iSER layer at the\n   target, the iSER layer at the target MUST set the\
    \ Reject (REJ) flag,\n   as described in Section 9.4, in the iSER HelloReply Message.\
    \  The\n   following are the cases when the iSER layer MUST set the REJ flag to\n\
    \   one in the HelloReply Message:\n   *  The initiator-declared iSER-IRD value\
    \ is greater than 0 and the\n      target-declared iSER-ORD value is 0.\n   *\
    \  The initiator-supported and the target-supported iSER protocol\n      versions\
    \ do not overlap.\n   After requesting that the RCaP layer send the iSER HelloReply\n\
    \   Message, the handling of the error situation is the same as that for\n   iSER\
    \ format errors as described in Section 10.1.3.3.\n"
- title: 10.1.3.3.  iSER Format Errors
  contents:
  - "10.1.3.3.  iSER Format Errors\n   The following types of errors in an iSER header\
    \ are considered format\n   errors:\n   *  Illegal contents of any iSER header\
    \ field\n   *  Inconsistent field contents in an iSER header\n   *  Length error\
    \ for an iSER Hello or HelloReply Message (see Section\n      9.3 and 9.4)\n \
    \  When a format error is detected, the following events MUST occur in\n   the\
    \ specified sequence:\n   1.  The iSER layer MUST request that the RCaP layer\
    \ terminate the\n       RCaP Stream.  The RCaP layer MUST terminate the associated\n\
    \       connection.\n   2.  The iSER layer MUST notify the iSCSI layer of the\
    \ connection\n       termination by invoking the Connection_Terminate_Notify\n\
    \       Operational Primitive.  Prior to invoking the\n       Connection_Terminate_Notify\
    \ Operational Primitive, the iSER layer\n       MUST perform the actions described\
    \ in Section 5.2.3.2.\n"
- title: 10.1.3.4.  iSER Protocol Errors
  contents:
  - "10.1.3.4.  iSER Protocol Errors\n   The first iSER Message sent by the iSER layer\
    \ at the initiator after\n   transitioning into iSER-assisted mode MUST be the\
    \ iSER Hello Message\n   (see Section 9.3).  Likewise, the first iSER Message\
    \ sent by the iSER\n   layer at the target after transitioning into iSER-assisted\
    \ mode MUST\n   be the iSER HelloReply Message (see Section 9.4).  Failure to\
    \ send\n   the iSER Hello or HelloReply Message, as indicated by the wrong\n \
    \  Opcode in the iSER header, is a protocol error.  The handling of this\n   error\
    \ situation is the same as that for iSER format errors as\n   described in Section\
    \ 10.1.3.3.\n   If the sending side of an iSER-enabled connection acts in a manner\n\
    \   not permitted by the negotiated or declared login/text operational\n   key\
    \ values as described in Section 6, this is a protocol error, and\n   the receiving\
    \ side MAY handle this the same as for iSER format errors\n   as described in\
    \ Section 10.1.3.3.\n"
- title: 10.1.4.  Errors in the iSCSI Layer
  contents:
  - "10.1.4.  Errors in the iSCSI Layer\n   The error handling due to errors at the\
    \ iSCSI layer is described in\n   the following sections.  For error recovery,\
    \ see Section 10.2.\n"
- title: 10.1.4.1.  iSCSI Format Errors
  contents:
  - "10.1.4.1.  iSCSI Format Errors\n   When an iSCSI format error is detected, the\
    \ iSCSI layer MUST request\n   that the iSER layer terminate the RCaP Stream by\
    \ invoking the\n   Connection_Terminate Operational Primitive.  For more details\
    \ on the\n   connection termination, see Section 5.2.3.1.\n"
- title: 10.1.4.2.  iSCSI Digest Errors
  contents:
  - "10.1.4.2.  iSCSI Digest Errors\n   In the iSER-assisted mode, the iSCSI layer\
    \ will not see any digest\n   error because both the HeaderDigest and the DataDigest\
    \ keys are\n   negotiated to \"None\".\n"
- title: 10.1.4.3.  iSCSI Sequence Errors
  contents:
  - "10.1.4.3.  iSCSI Sequence Errors\n   For Traditional iSCSI, sequence errors are\
    \ caused by dropped PDUs due\n   to header or data digest errors.  Since digests\
    \ are not used in\n   iSER-assisted mode and the RCaP layer will deliver all messages\
    \ in\n   the order they were sent, sequence errors will not occur in iSER-\n \
    \  assisted mode.\n"
- title: 10.1.4.4.  iSCSI Protocol Error
  contents:
  - "10.1.4.4.  iSCSI Protocol Error\n   When the iSCSI layer handles certain protocol\
    \ errors by dropping the\n   connection, the error handling is the same as that\
    \ for iSCSI format\n   errors as described in Section 10.1.4.1.\n   When the iSCSI\
    \ layer uses the iSCSI Reject PDU and response codes to\n   handle certain other\
    \ protocol errors, no special handling at the iSER\n   layer is required.\n"
- title: 10.1.4.5.  SCSI Timeouts and Session Errors
  contents:
  - "10.1.4.5.  SCSI Timeouts and Session Errors\n   SCSI Timeouts and Session Errors\
    \ are handled at the iSCSI layer and\n   no special handling at the iSER layer\
    \ is required.\n"
- title: 10.1.4.6.  iSCSI Negotiation Failures
  contents:
  - "10.1.4.6.  iSCSI Negotiation Failures\n   For negotiation failures that happen\
    \ during the Login Phase at the\n   initiator after the iSCSI layer has invoked\
    \ the\n   Allocate_Connection_Resources Operational Primitive and before the\n\
    \   Enable_Datamover Operational Primitive has been invoked, the iSCSI\n   layer\
    \ MUST request that the iSER layer deallocate all connection\n   resources by\
    \ invoking the Deallocate_Connection_Resources Operational\n   Primitive.  The\
    \ iSCSI layer at the initiator MUST terminate the\n   connection.\n   For negotiation\
    \ failures during the Login Phase at the target, the\n   iSCSI layer can use a\
    \ Login Response with a status class other than 0\n   (success) to terminate the\
    \ Login Phase.  If the iSCSI layer has\n   invoked the Allocate_Connection_Resources\
    \ Operational Primitive\n   before the Enable_Datamover Operational Primitive\
    \ has been invoked,\n   the iSCSI layer at the target MUST request that the iSER\
    \ layer at the\n   target deallocate all connection resources by invoking the\n\
    \   Deallocate_Connection_Resources Operational Primitive.  The iSCSI\n   layer\
    \ at both the initiator and the target MUST terminate the\n   connection.\n  \
    \ During the iSCSI Login Phase, if the iSCSI layer at the initiator\n   receives\
    \ a Login Response from the target with a status class other\n   than 0 (Success)\
    \ after the iSCSI layer at the initiator has invoked\n   the Allocate_Connection_Resources\
    \ Operational Primitive, the iSCSI\n   layer MUST request the iSER layer to deallocate\
    \ all connection\n   resources by invoking the Deallocate_Connection_Resources\
    \ Operational\n   Primitive.  The iSCSI layer MUST terminate the connection in\
    \ this\n   case.\n   For negotiation failures during the Full Feature Phase, the\
    \ error\n   handling is left to the iSCSI layer and no special handling at the\n\
    \   iSER layer is required.\n"
- title: 10.2.  Error Recovery
  contents:
  - "10.2.  Error Recovery\n   Error recovery requirements of iSCSI/iSER are the same\
    \ as that of\n   Traditional iSCSI.  All three ErrorRecoveryLevels as defined\
    \ in\n   [RFC3720] are supported in iSCSI/iSER.\n   *  For ErrorRecoveryLevel\
    \ 0, session recovery is handled by iSCSI and\n      no special handling by the\
    \ iSER layer is required.\n   *  For ErrorRecoveryLevel 1, see Section 10.2.1\
    \ on PDU Recovery.\n   *  For ErrorRecoveryLevel 2, see Section 10.2.2 on Connection\n\
    \      Recovery.\n   The iSCSI layer may invoke the Notice_Key_Values Operational\n\
    \   Primitive during connection setup to request that the iSER layer take\n  \
    \ note of the value of the operational ErrorRecoveryLevel, as described\n   in\
    \ Sections 5.1.1 and 5.1.2.\n"
- title: 10.2.1.  PDU Recovery
  contents:
  - "10.2.1.  PDU Recovery\n   As described in Sections 10.1.4.2 and 10.1.4.3, digest\
    \ and sequence\n   errors will not occur in the iSER-assisted mode.  If the RCaP\
    \ layer\n   detects an error, it will close the iSCSI/iSER connection, as\n  \
    \ described in Section 10.1.2.  Therefore, PDU recovery is not useful\n   in the\
    \ iSER-assisted mode.\n   The iSCSI layer at the initiator SHOULD disable iSCSI\
    \ timeout-driven\n   PDU retransmissions.\n"
- title: 10.2.2.  Connection Recovery
  contents:
  - "10.2.2.  Connection Recovery\n   The iSCSI layer at the initiator MAY reassign\
    \ connection allegiance\n   for non-immediate commands that are still in progress\
    \ and are\n   associated with the failed connection by using a Task Management\n\
    \   Function Request with the TASK REASSIGN function.  See Section 7.3.3\n   for\
    \ more details.\n   When the iSCSI layer at the initiator does a task reassignment\
    \ for a\n   SCSI write command, it MUST qualify the Send_Control Operational\n\
    \   Primitive invocation with DataDescriptorOut, which defines the I/O\n   Buffer\
    \ for both the non-immediate unsolicited data and the solicited\n   data.  This\
    \ allows the iSCSI layer at the target to use recovery R2Ts\n   to request data\
    \ originally sent as unsolicited and solicited from the\n   initiator.\n   When\
    \ the iSCSI layer at the target accepts a reassignment request for\n   a SCSI\
    \ read command, it MUST request that the iSER layer process SCSI\n   Data-in for\
    \ all unacknowledged data by invoking the Put_Data\n   Operational Primitive.\
    \  See Section 7.3.5 on the handling of SCSI\n   Data-in.\n   When the iSCSI layer\
    \ at the target accepts a reassignment request for\n   a SCSI write command, it\
    \ MUST request that the iSER layer process a\n   recovery R2T for any non-immediate\
    \ unsolicited data and any solicited\n   data sequences that have not been received\
    \ by invoking the Get_Data\n   Operational Primitive.  See Section 7.3.6 on the\
    \ handling of Ready To\n   Transfer (R2T).\n   The iSCSI layer at the target MUST\
    \ NOT issue recovery R2Ts on an\n   iSCSI/iSER connection for a task for which\
    \ the connection allegiance\n   was never reassigned.  The iSER layer at the target\
    \ MAY reject such a\n   recovery R2T received via the Get_Data Operational Primitive\n\
    \   invocation from the iSCSI layer at the target, with an appropriate\n   error\
    \ code.\n   The iSER layer at the target will process the requests invoked by\
    \ the\n   Put_Data and Get_Data Operational Primitives for a reassigned task in\n\
    \   the same way as for the original commands.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   When iSER is layered on top of an RCaP layer\
    \ and provides the RDMA\n   extensions to the iSCSI protocol, the security considerations\
    \ of iSER\n   are the same as that of the underlying RCaP layer.  For iWARP, this\n\
    \   is described in [RDMAP] and [RDDPSEC].\n   Since the iSER-assisted iSCSI protocol\
    \ is still functionally iSCSI\n   from a security considerations perspective,\
    \ all of the iSCSI security\n   requirements as described in [RFC3720] and [RFC3723]\
    \ apply.  If the\n   IPsec [IPSEC] mechanism is used, then it MUST be established\
    \ before\n   the connection transitions to the iSER-assisted mode.  If iSER is\n\
    \   layered on top of a non-IP based RCaP layer, all the security\n   protocol\
    \ mechanisms applicable to that RCaP layer are also applicable\n   to an iSCSI/iSER\
    \ connection.  If iSER is layered on top of a non-IP\n   protocol, the IPsec mechanism\
    \ as specified in [RFC3720] MUST be\n   implemented at any point where the iSER\
    \ protocol enters the IP\n   network (e.g., via gateways), and the non-IP protocol\
    \ SHOULD\n   implement (optional to use) a packet-by packet security protocol\n\
    \   equal in strength to the IPsec mechanism specified by [RFC3720].\n   To minimize\
    \ the potential for a denial-of-service attack, the iSCSI\n   layer MUST NOT request\
    \ that the iSER layer allocate the connection\n   resources necessary to support\
    \ RCaP until the iSCSI layer is\n   sufficiently far along in the iSCSI Login\
    \ Phase that it is reasonably\n   certain that the peer side is not an attacker,\
    \ as described in\n   Sections 5.1.1 and 5.1.2.\n   Note that the IPsec requirements\
    \ for this document are based on the\n   version of IPsec specified in RFC 2401\
    \ [IPSEC] and related RFCs, as\n   profiled by RFC 3723 [RFC3723], despite the\
    \ existence of a newer\n   version of IPsec specified in RFC 4301 [RFC4301] and\
    \ related RFCs.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC3720] Satran, J., Meth, K., Sapuntzakis,\
    \ C., Chadalapaka, M., and\n             E. Zeidner, \"Internet Small Computer\
    \ Systems Interface\n             (iSCSI)\", RFC 3720, April 2004.\n   [RFC3723]\
    \ Aboba, B., Tseng, J., Walker, J., Rangan, V., and F.\n             Travostino,\
    \ \"Securing Block Storage Protocols over IP\", RFC\n             3723, April\
    \ 2004.\n   [RDMAP]   Recio, R., Culley, P., Garcia, D., Hilland, J., and B.\n\
    \             Metzler, \"A Remote Direct Memory Access Protocol\n            \
    \ Specification\", RFC 5040, October 2007.\n   [DDP]     Shah, H., Pinkerton,\
    \ J., Recio, R., and P. Culley, \"Direct\n             Data Placement over Reliable\
    \ Transports\", RFC 5041, October\n             2007.\n   [IPSEC]   Kent, S. and\
    \ R. Atkinson, \"Security Architecture for the\n             Internet Protocol\"\
    , RFC 2401, November 1998.\n   [MPA]     Culley, P., Elzur, U., Recio, R., Bailey,\
    \ S., and J.\n             Carrier, \"Marker PDU Aligned Framing for TCP\n   \
    \          Specification\", RFC 5044, October 2007.\n   [RDDPSEC] Pinkerton, J.\
    \ and E. Deleganes, \"Direct Data Placement\n             Protocol (DDP) / Remote\
    \ Direct Memory Access Protocol\n             (RDMAP) Security\", RFC 5042, October\
    \ 2007.\n   [TCP]     Postel, J., \"Transmission Control Protocol\", STD 7, RFC\n\
    \             793, September 1981.\n   [RFC2119] Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n             Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [SAM2]    T10/1157D, SCSI Architecture Model\
    \ - 2 (SAM-2)\n   [DA]      Chadalapaka, M., Hufferd, J., Satran, J., and H. Shah,\
    \ \"DA:\n             Datamover Architecture for the Internet Small Computer\n\
    \             System Interface (iSCSI)\", RFC 5047, October 2007.\n   [IB]   \
    \   InfiniBand Architecture Specification Volume 1 Release 1.2,\n            \
    \ October 2004\n   [IPoIB]   Chu, J. and V. Kashyap, \"Transmission of IP over\
    \ InfiniBand\n             (IPoIB)\", RFC 4391, April 2006.\n   [RFC4301] Kent,\
    \ S. and K. Seo, \"Security Architecture for the\n             Internet Protocol\"\
    , RFC 4301, December 2005.\n"
- title: Appendix A.  iWARP Message Format for iSER
  contents:
  - "Appendix A.  iWARP Message Format for iSER\n   This section is for information\
    \ only and is NOT part of the standard.\n   It simply depicts the iWARP Message\
    \ format for the various iSER\n   Messages when the transport layer is TCP.\n"
- title: A.1.  iWARP Message Format for iSER Hello Message
  contents:
  - "A.1.  iWARP Message Format for iSER Hello Message\n   The following figure depicts\
    \ an iSER Hello Message encapsulated in an\n   iWARP SendSE Message.\n       0\
    \                   1                   2                   3\n       0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         MPA Header            |  DDP Control  | RDMA Control  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        Reserved                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       (Send) Queue Number                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                 (Send) Message Sequence Number                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      (Send) Message Offset                    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ 0010b | Zeros | 0001b | 0001b |           iSER-IRD            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           All Zeros                           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                           All Zeros                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           MPA CRC                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \   Figure 6.  SendSE Message Containing an iSER Hello Message\n"
- title: A.2.  iWARP Message Format for iSER HelloReply Message
  contents:
  - "A.2.  iWARP Message Format for iSER HelloReply Message\n   The following figure\
    \ depicts an iSER HelloReply Message encapsulated\n   in an iWARP SendSE Message.\
    \  The Reject (REJ) flag is set to 0.\n       0                   1          \
    \         2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         MPA Header            |  DDP Control  | RDMA Control  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        Reserved                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       (Send) Queue Number                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                 (Send) Message Sequence Number                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      (Send) Message Offset                    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ 0011b |Zeros|0| 0001b | 0001b |           iSER-ORD            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           All Zeros                           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                           All Zeros                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           MPA CRC                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \ Figure 7.  SendSE Message Containing an iSER HelloReply Message\n"
- title: A.3.  iWARP Message Format for SCSI Read Command PDU
  contents:
  - "A.3.  iWARP Message Format for SCSI Read Command PDU\n   The following figure\
    \ depicts a SCSI Read Command PDU embedded in an\n   iSER Message encapsulated\
    \ in an iWARP SendSE Message.  For this\n   particular example, in the iSER header,\
    \ the Write STag Valid flag is\n   set to zero, the Read STag Valid flag is set\
    \ to one, the Write STag\n   field is set to all zeros, and the Read STag field\
    \ contains a valid\n   Read STag.\n       0                   1              \
    \     2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         MPA Header            |  DDP Control  | RDMA Control  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        Reserved                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       (Send) Queue Number                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                 (Send) Message Sequence Number                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      (Send) Message Offset                    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ 0001b |0|1|                  All zeros                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         All Zeros                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Read STag                             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       SCSI Read Command PDU                   |\n   \
    \   //                                                             //\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           MPA CRC                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \  Figure 8.  SendSE Message Containing a SCSI Read Command PDU\n"
- title: A.4.  iWARP Message Format for SCSI Read Data
  contents:
  - "A.4.  iWARP Message Format for SCSI Read Data\n   The following figure depicts\
    \ an iWARP RDMA Write Message carrying\n   SCSI Read data in the payload:\n  \
    \     0                   1                   2                   3\n       0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         MPA Header            |   DDP Control | RDMA Control  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                       Data Sink STag                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                   Data Sink Tagged Offset                     |\n   \
    \   +                                                               +\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      SCSI Read data                           |\n   \
    \   //                                                             //\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           MPA CRC                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \     Figure 9.  RDMA Write Message Containing SCSI Read Data\n"
- title: A.5.  iWARP Message Format for SCSI Write Command PDU
  contents:
  - "A.5.  iWARP Message Format for SCSI Write Command PDU\n   The following figure\
    \ depicts a SCSI Write Command PDU embedded in an\n   iSER Message encapsulated\
    \ in an iWARP SendSE Message.  For this\n   particular example, in the iSER header,\
    \ the Write STag Valid flag is\n   set to one, the Read STag Valid flag is set\
    \ to zero, the Write STag\n   field contains a valid Write STag, and the Read\
    \ STag field is set to\n   all zeros since it is not used.\n       0         \
    \          1                   2                   3\n       0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         MPA Header            |  DDP Control  | RDMA Control  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        Reserved                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       (Send) Queue Number                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                 (Send) Message Sequence Number                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      (Send) Message Offset                    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ 0001b |1|0|                  All zeros                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                        Write STag                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         All Zeros                             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       SCSI Write Command PDU                  |\n   \
    \   //                                                             //\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           MPA CRC                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \ Figure 10.  SendSE Message Containing a SCSI Write Command PDU\n"
- title: A.6.  iWARP Message Format for RDMA Read Request
  contents:
  - "A.6.  iWARP Message Format for RDMA Read Request\n   An iSCSI R2T is transformed\
    \ into an iWARP RDMA Read Request Message.\n   The following figure depicts an\
    \ iWARP RDMA Read Request Message:\n       0                   1             \
    \      2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         MPA Header            |  DDP Control  | RDMA Control  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Reserved (Not Used)                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |              DDP (RDMA Read Request) Queue Number             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \        DDP (RDMA Read Request) Message Sequence Number        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |             DDP (RDMA Read Request) Message Offset            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                     Data Sink STag (SinkSTag)                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   +                  Data Sink Tagged Offset (SinkTO)             +\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                  RDMA Read Message Size (RDMARDSZ)            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                     Data Source STag (SrcSTag)                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   +                 Data Source Tagged Offset (SrcTO)             +\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           MPA CRC                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \             Figure 11.  RDMA Read Request Message\n"
- title: A.7.  iWARP Message Format for Solicited SCSI Write Data
  contents:
  - "A.7.  iWARP Message Format for Solicited SCSI Write Data\n   The following figure\
    \ depicts an iWARP RDMA Read Response Message\n   carrying the solicited SCSI\
    \ Write data in the payload:\n       0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         MPA Header            |  DDP Control  | RDMA Control  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                       Data Sink STag                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                   Data Sink Tagged Offset                     |\n   \
    \   +                                                               +\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       SCSI Write Data                         |\n   \
    \   //                                                             //\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           MPA CRC                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Figure\
    \ 12.  RDMA Read Response Message Containing SCSI Write Data\n"
- title: A.8.  iWARP Message Format for SCSI Response PDU
  contents:
  - "A.8.  iWARP Message Format for SCSI Response PDU\n   The following figure depicts\
    \ a SCSI Response PDU embedded in an iSER\n   Message encapsulated in an iWARP\
    \ SendInvSE Message:\n       0                   1                   2       \
    \            3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         MPA Header            |  DDP Control  | RDMA Control  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Invalidate STag                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       (Send) Queue Number                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                 (Send) Message Sequence Number                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      (Send) Message Offset                    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ 0001b |0|0|                  All Zeros                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           All Zeros                           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                           All Zeros                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       SCSI Response PDU                       |\n   \
    \   //                                                             //\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           MPA CRC                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \   Figure 13.  SendInvSE Message Containing SCSI Response PDU\n"
- title: Appendix B.  Architectural Discussion of iSER over InfiniBand
  contents:
  - "Appendix B.  Architectural Discussion of iSER over InfiniBand\n   This section\
    \ explains how an InfiniBand network (with Gateways) would\n   be structured.\
    \  It is informational only and is intended to provide\n   insight on how iSER\
    \ is used in an InfiniBand environment.\n"
- title: B.1.  The Host Side of the iSCSI and iSER Connections in InfiniBand
  contents:
  - "B.1.  The Host Side of the iSCSI and iSER Connections in InfiniBand\n   Figure\
    \ 14 defines the topologies in which iSCSI and iSER will be able\n   to operate\
    \ on an InfiniBand Network.\n   +---------+ +---------+ +---------+ +---------+\
    \ +--- -----+\n   |  Host   | |  Host   | |   Host  | |   Host  | |   Host  |\n\
    \   |         | |         | |         | |         | |         |\n   +---+-+---+\
    \ +---+-+---+ +---+-+---+ +---+-+---+ +---+-+---+\n   |HCA| |HCA| |HCA| |HCA|\
    \ |HCA| |HCA| |HCA| |HCA| |HCA| |HCA|\n   +-v-+ +-v-+ +-v-+ +-v-+ +-v-+ +-v-+\
    \ +-v-+ +-v-+ +-v-+ +-v-+\n     |----+------|-----+-----|-----+-----|-----+-----|-----+--->\
    \ To IB\n   IB|        IB |        IB |        IB |        IB |    SubNet2 SWTCH\n\
    \   +-v-----------v-----------v-----------v-----------v---------+\n   |      \
    \            InfiniBand Switch for Subnet1            |\n   +---+-----+--------+-----+--------+-----+------------v------+\n\
    \       | TCA |        | TCA |        | TCA |            |\n       +-----+   \
    \     +-----+        +-----+            | IB\n      /  IB   \\      /  IB   \\\
    \      /       \\     +--+--v--+--+\n     |  iSER   |    |  iSER   |    |  IPoIB\
    \  |    |  | TCA |  |\n     | Gateway |    | Gateway |    | Gateway |    |  +-----+\
    \  |\n     |   to    |    |   to    |    |   to    |    | Storage   |\n     |\
    \  iSCSI  |    |  iSER   |    |   IP    |    | Controller|\n     |   TCP   | \
    \   |  iWARP  |    |Ethernet |    +-----+-----+\n     +---v-----|    +---v-----|\
    \    +----v----+\n         | EN           | EN            | EN\n         +--------------+---------------+---->\
    \ to IP based storage\n           Ethernet links that carry iSCSI or iWARP\n \
    \                  Figure 14.  iSCSI and iSER on IB\n   In Figure 14, the Host\
    \ systems are connected via the InfiniBand Host\n   Channel Adapters (HCAs) to\
    \ the InfiniBand links.  With the use of IB\n   switch(es), the InfiniBand links\
    \ connect the HCA to InfiniBand Target\n   Channel Adapters (TCAs) located in\
    \ gateways or Storage Controllers.\n   An iSER-capable IB-IP Gateway converts\
    \ the iSER Messages encapsulated\n   in IB protocols to either standard iSCSI,\
    \ or iSER Messages for iWARP.\n   An [IPoIB] Gateway converts the InfiniBand [IPoIB]\
    \ protocol to IP\n   protocol, and in the iSCSI case, permits iSCSI to be operated\
    \ on an\n   IB Network between the Hosts and the [IPoIB] Gateway.\n"
- title: B.2.  The Storage Side of the iSCSI and iSER Mixed Network Environment
  contents:
  - "B.2.  The Storage Side of the iSCSI and iSER Mixed Network Environment\n   Figure\
    \ 15 shows a storage controller that has three different portal\n   groups: one\
    \ supporting only iSCSI (TPG-4), one supporting iSER/iWARP\n   or iSCSI (TPG-2),\
    \ and one supporting iSER/IB (TPG-1).\n                  |                |  \
    \              |\n                  |                |                |\n    \
    \        +--+--v--+----------+--v--+----------+--v--+--+\n            |  | IB\
    \  |          |iWARP|          | EN  |  |\n            |  |     |          | TCP\
    \ |          | NIC |  |\n            |  |(TCA)|          | RNIC|          |  \
    \   |  |\n            |  +-----|          +-----+          +-----+  |\n      \
    \      |   TPG-1            TPG-2            TPG-4   |\n            |  9.1.3.3\
    \          9.1.2.4          9.1.2.6  |\n            |                        \
    \                     |\n            |                  Storage Controller   \
    \      |\n            |                                             |\n      \
    \      +---------------------------------------------+\n   Figure 15.  Storage\
    \ Controller with TCP, iWARP, and IB Connections\n   The normal iSCSI portal group\
    \ advertising processes (via the Service\n   Location Protocol (SLP), the Internet\
    \ Storage Name Service (iSNS), or\n   SendTargets) are available to a Storage\
    \ Controller.\n"
- title: B.3.  Discovery Processes for an InfiniBand Host
  contents:
  - "B.3.  Discovery Processes for an InfiniBand Host\n   An InfiniBand Host system\
    \ can gather portal group IP addresses from\n   SLP, iSNS, or the SendTargets\
    \ discovery processes by using TCP/IP via\n   [IPoIB].  After obtaining one or\
    \ more remote portal IP addresses, the\n   Initiator uses the standard IP mechanisms\
    \ to resolve the IP address\n   to a local outgoing interface and the destination\
    \ hardware address\n   (Ethernet MAC or IB GID of the target or a gateway leading\
    \ to the\n   target).  If the resolved interface is an [IPoIB] network interface,\n\
    \   then the target portal can be reached through an InfiniBand fabric.\n   In\
    \ this case, the Initiator can establish an iSCSI/TCP or iSCSI/iSER\n   session\
    \ with the Target over that InfiniBand interface, using the\n   Hardware Address\
    \ (InfiniBand GID) obtained through the standard\n   Address Resolution (ARP)\
    \ processes.\n   If more than one IP address is obtained through the discovery\n\
    \   process, the Initiator should select a Target IP address that is on\n   the\
    \ same IP subnet as the Initiator, if one exists.  This will avoid\n   a potential\
    \ overhead of going through a gateway when a direct path\n   exists.\n   In addition,\
    \ a user can configure manual static IP route entries if a\n   particular path\
    \ to the target is preferred.\n"
- title: B.4.  IBTA Connection Specifications
  contents:
  - "B.4.  IBTA Connection Specifications\n   The InfiniBand Trade Association (IBTA)\
    \ connection specifications are\n   outside the scope of this document, but it\
    \ is expected that the IBTA\n   has or will define:\n   *  The iSER ServiceID.\n\
    \   *  A Means for permitting a Host to establish a connection with a\n      peer\
    \ InfiniBand end-node, and to fall back to iSCSI/TCP over\n      [IPoIB] if that\
    \ peer indicates iSER is not supported.\n   *  A Means for permitting the Host\
    \ to establish connections with IB\n      iSER connections on storage controllers\
    \ or IB iSER connected\n      Gateways in preference to [IPoIB] connected Gateways/Bridges\
    \ or\n      connections to Target Storage Controllers that also accept iSCSI\n\
    \      via [IPoIB].\n   *  A Means for combining the IB ServiceID for iSER and\
    \ the IP port\n      number such that the IB Host can use normal IB connection\n\
    \      processes, yet ensure that the iSER target peer can actually\n      connect\
    \ to the required IP port number.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This protocol was developed by a design team that, in addition\
    \ to the\n   authors, included Dwight Barron (HP), John Carrier (formerly from\n\
    \   Adaptec), Ted Compton (EMC), Paul R. Culley (HP), Yaron Haviv\n   (Voltaire),\
    \ Jeff Hilland (HP), Mike Krause (HP), Alex Nezhinsky\n   (Voltaire), Jim Pinkerton\
    \ (Microsoft), Renato J. Recio (IBM), Julian\n   Satran (IBM), Tom Talpey (Network\
    \ Appliance), and Jim Wendt (HP).\n   Special thanks to David Black (EMC) for\
    \ his extensive review\n   comments.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Mallikarjun Chadalapaka\n   Hewlett-Packard Company\n  \
    \ 8000 Foothills Blvd.\n   Roseville, CA 95747-5668, USA\n   Phone: +1-916-785-5621\n\
    \   EMail: cbm@rose.hp.com\n   Uri Elzur\n   Broadcom Corporation\n   5300 California\
    \ Avenue\n   Irvine, CA 92617, USA\n   Phone: +1-949-926-6432\n   EMail: Uri@Broadcom.com\n\
    \   John Hufferd\n   Brocade Communications Systems, Inc.\n   1745 Technology\
    \ Drive\n   San Jose, CA 95110, USA\n   Phone: +1-408-333-5244\n   EMail: jhufferd@brocade.com\n\
    \   Mike Ko\n   IBM Corp.\n   650 Harry Rd.\n   San Jose, CA 95120, USA\n   Phone:\
    \ +1-408-927-2085\n   EMail: mako@us.ibm.com\n   Hemal Shah\n   Broadcom Corporation\n\
    \   5300 California Avenue\n   Irvine, CA 92617, USA\n   Phone: +1-949-926-6941\n\
    \   EMail: hemal@broadcom.com\n   Patricia Thaler\n   Broadcom Corporation\n \
    \  5300 California Avenue\n   Irvine, CA 92617, USA\n   Phone: +1-916-570-2707\n\
    \   EMail: pthaler@broadcom.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
