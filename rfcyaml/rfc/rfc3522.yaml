- title: __initial_text__
  contents:
  - '                 The Eifel Detection Algorithm for TCP

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Eifel detection algorithm allows a TCP sender to detect a\n\
    \   posteriori whether it has entered loss recovery unnecessarily.  It\n   requires\
    \ that the TCP Timestamps option defined in RFC 1323 be\n   enabled for a connection.\
    \  The Eifel detection algorithm makes use of\n   the fact that the TCP Timestamps\
    \ option eliminates the retransmission\n   ambiguity in TCP.  Based on the timestamp\
    \ of the first acceptable ACK\n   that arrives during loss recovery, it decides\
    \ whether loss recovery\n   was entered unnecessarily.  The Eifel detection algorithm\
    \ provides a\n   basis for future TCP enhancements.  This includes response algorithms\n\
    \   to back out of loss recovery by restoring a TCP sender's congestion\n   control\
    \ state.\n"
- title: Terminology
  contents:
  - "Terminology\n   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,\n\
    \   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this\n   document,\
    \ are to be interpreted as described in [RFC2119].\n   We refer to the first-time\
    \ transmission of an octet as the 'original\n   transmit'.  A subsequent transmission\
    \ of the same octet is referred\n   to as a 'retransmit'.  In most cases, this\
    \ terminology can likewise\n   be applied to data segments as opposed to octets.\
    \  However, with\n   repacketization, a segment can contain both first-time transmissions\n\
    \   and retransmissions of octets.  In that case, this terminology is\n   only\
    \ consistent when applied to octets.  For the Eifel detection\n   algorithm, this\
    \ makes no difference as it also operates correctly\n   when repacketization occurs.\n\
    \   We use the term 'acceptable ACK' as defined in [RFC793].  That is an\n   ACK\
    \ that acknowledges previously unacknowledged data.  We use the\n   term 'duplicate\
    \ ACK', and the variable 'dupacks' as defined in\n   [WS95].  The variable 'dupacks'\
    \ is a counter of duplicate ACKs that\n   have already been received by a TCP\
    \ sender before the fast retransmit\n   is sent.  We use the variable 'DupThresh'\
    \ to refer to the so-called\n   duplicate acknowledgement threshold, i.e., the\
    \ number of duplicate\n   ACKs that need to arrive at a TCP sender to trigger\
    \ a fast\n   retransmit.  Currently, DupThresh is specified as a fixed value of\n\
    \   three [RFC2581].  Future TCPs might implement an adaptive DupThresh.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The retransmission ambiguity problem [Zh86], [KP87] is a\
    \ TCP sender's\n   inability to distinguish whether the first acceptable ACK that\n\
    \   arrives after a retransmit was sent in response to the original\n   transmit\
    \ or the retransmit.  This problem occurs after a timeout-\n   based retransmit\
    \ and after a fast retransmit.  The Eifel detection\n   algorithm uses the TCP\
    \ Timestamps option defined in [RFC1323] to\n   eliminate the retransmission ambiguity.\
    \  It thereby allows a TCP\n   sender to detect a posteriori whether it has entered\
    \ loss recovery\n   unnecessarily.\n   This added capability of a TCP sender is\
    \ useful in environments where\n   TCP's loss recovery and congestion control\
    \ algorithms may often get\n   falsely triggered.  This can be caused by packet\
    \ reordering, packet\n   duplication, or a sudden delay increase in the data or\
    \ the ACK path\n   that results in a spurious timeout.  For example, such sudden\
    \ delay\n   increases can often occur in wide-area wireless access networks due\n\
    \   to handovers, resource preemption due to higher priority traffic\n   (e.g.,\
    \ voice), or because the mobile transmitter traverses through a\n   radio coverage\
    \ hole (e.g., see [Gu01]).  In such wireless networks,\n   the often unnecessary\
    \ go-back-N retransmits that typically occur\n   after a spurious timeout create\
    \ a serious problem.  They decrease\n   end-to-end throughput, are useless load\
    \ upon the network, and waste\n   transmission (battery) power.  Note that across\
    \ such networks the use\n   of timestamps is recommended anyway [RFC3481].\n \
    \  Based on the Eifel detection algorithm, a TCP sender may then choose\n   to\
    \ implement dedicated response algorithms.  One goal of such a\n   response algorithm\
    \ would be to alleviate the consequences of a\n   falsely triggered loss recovery.\
    \  This may include restoring the TCP\n   sender's congestion control state, and\
    \ avoiding the mentioned\n   unnecessary go-back-N retransmits.  Another goal\
    \ would be to adapt\n   protocol parameters such as the duplicate acknowledgement\
    \ threshold\n   [RFC2581], and the RTT estimators [RFC2988].  This is to reduce\
    \ the\n   risk of falsely triggering TCP's loss recovery again as the\n   connection\
    \ progresses.  However, such response algorithms are outside\n   the scope of\
    \ this document.  Note: The original proposal, the \"Eifel\n   algorithm\" [LK00],\
    \ comprises both a detection and a response\n   algorithm.  This document only\
    \ defines the detection part.  The\n   response part is defined in [LG03].\n \
    \  A key feature of the Eifel detection algorithm is that it already\n   detects,\
    \ upon the first acceptable ACK that arrives during loss\n   recovery, whether\
    \ a fast retransmit or a timeout was spurious.  This\n   is crucial to be able\
    \ to avoid the mentioned go-back-N retransmits.\n   Another feature is that the\
    \ Eifel detection algorithm is fairly\n   robust against the loss of ACKs.\n \
    \  Also the DSACK option [RFC2883] can be used to detect a posteriori\n   whether\
    \ a TCP sender has entered loss recovery unnecessarily [BA02].\n   However, the\
    \ first ACK carrying a DSACK option usually arrives at a\n   TCP sender only after\
    \ loss recovery has already terminated.  Thus,\n   the DSACK option cannot be\
    \ used to eliminate the retransmission\n   ambiguity.  Consequently, it cannot\
    \ be used to avoid the mentioned\n   unnecessary go-back-N retransmits.  Moreover,\
    \ a DSACK-based detection\n   algorithm is less robust against ACK losses.  A\
    \ recent proposal based\n   on neither the TCP timestamps nor the DSACK option\
    \ does not have the\n   limitation of DSACK-based schemes, but only addresses\
    \ the case of\n   spurious timeouts [SK03].\n"
- title: 2. Events that Falsely Trigger TCP Loss Recovery
  contents:
  - "2. Events that Falsely Trigger TCP Loss Recovery\n   The following events may\
    \ falsely trigger a TCP sender's loss recovery\n   and congestion control algorithms.\
    \  This causes a so-called spurious\n   retransmit, and an unnecessary reduction\
    \ of the TCP sender's\n   congestion window and slow start threshold [RFC2581].\n\
    \      -  Spurious timeout\n      -  Packet reordering\n      -  Packet duplication\n\
    \   A spurious timeout is a timeout that would not have occurred had the\n   sender\
    \ \"waited longer\".  This may be caused by increased delay that\n   suddenly\
    \ occurs in the data and/or the ACK path.  That in turn might\n   cause an acceptable\
    \ ACK to arrive too late, i.e., only after a TCP\n   sender's retransmission timer\
    \ has expired.  For the purpose of\n   specifying the algorithm in Section 3,\
    \ we define this case as SPUR_TO\n   (equal 1).\n      Note: There is another\
    \ case where a timeout would not have\n      occurred had the sender \"waited\
    \ longer\": the retransmission timer\n      expires, and afterwards the TCP sender\
    \ receives the duplicate ACK\n      that would have triggered a fast retransmit\
    \ of the oldest\n      outstanding segment.  We call this a 'fast timeout', since\
    \ in\n      competition with the fast retransmit algorithm the timeout was\n \
    \     faster.  However, a fast timeout is not spurious since apparently\n    \
    \  a segment was in fact lost, i.e., loss recovery was initiated\n      rightfully.\
    \  In this document, we do not consider fast timeouts.\n   Packet reordering in\
    \ the network may occur because IP [RFC791] does\n   not guarantee in-order delivery\
    \ of packets.  Additionally, a TCP\n   receiver generates a duplicate ACK for\
    \ each segment that arrives\n   out-of-order.  This results in a spurious fast\
    \ retransmit if three or\n   more data segments arrive out-of-order at a TCP receiver,\
    \ and at\n   least three of the resulting duplicate ACKs arrive at the TCP sender.\n\
    \   This assumes that the duplicate acknowledgement threshold is set to\n   three\
    \ as defined in [RFC2581].\n   Packet duplication may occur because a receiving\
    \ IP does not (cannot)\n   remove packets that have been duplicated in the network.\
    \  A TCP\n   receiver in turn also generates a duplicate ACK for each duplicate\n\
    \   segment.  As with packet reordering, this results in a spurious fast\n   retransmit\
    \ if duplication of data segments or ACKs results in three\n   or more duplicate\
    \ ACKs to arrive at a TCP sender.  Again, this\n   assumes that the duplicate\
    \ acknowledgement threshold is set to three.\n   The negative impact on TCP performance\
    \ caused by packet reordering\n   and packet duplication is commonly the same:\
    \ a single spurious\n   retransmit (the fast retransmit), and the unnecessary\
    \ halving of a\n   TCP sender's congestion window as a result of the subsequent\
    \ fast\n   recovery phase [RFC2581].\n   The negative impact on TCP performance\
    \ caused by a spurious timeout\n   is more severe.  First, the timeout event itself\
    \ causes a single\n   spurious retransmit, and unnecessarily forces a TCP sender\
    \ into slow\n   start [RFC2581].  Then, as the connection progresses, a chain\n\
    \   reaction gets triggered that further decreases TCP's performance.\n   Since\
    \ the timeout was spurious, at least some ACKs for original\n   transmits typically\
    \ arrive at the TCP sender before the ACK for the\n   retransmit arrives.  (This\
    \ is unless severe packet reordering\n   coincided with the spurious timeout in\
    \ such a way that the ACK for\n   the retransmit is the first acceptable ACK to\
    \ arrive at the TCP\n   sender.)  Those ACKs for original transmits then trigger\
    \ an implicit\n   go-back-N loss recovery at the TCP sender [LK00].  Assuming\
    \ that none\n   of the outstanding segments and none of the corresponding ACKs\
    \ were\n   lost, all outstanding segments get retransmitted unnecessarily.  In\n\
    \   fact, during this phase, a TCP sender violates the packet\n   conservation\
    \ principle [Jac88].  This is because the unnecessary go-\n   back-N retransmits\
    \ are sent during slow start.  Thus, for each packet\n   that leaves the network\
    \ and that belongs to the first half of the\n   original flight, two useless retransmits\
    \ are sent into the network.\n   In addition, some TCPs suffer from a spurious\
    \ fast retransmit.  This\n   is because the unnecessary go-back-N retransmits\
    \ arrive as duplicates\n   at the TCP receiver, which in turn triggers a series\
    \ of duplicate\n   ACKs.  Note that this last spurious fast retransmit could be\
    \ avoided\n   with the careful variant of 'bugfix' [RFC2582].\n   More detailed\
    \ explanations, including TCP trace plots that visualize\n   the effects of spurious\
    \ timeouts and packet reordering, can be found\n   in the original proposal [LK00].\n"
- title: 3. The Eifel Detection Algorithm
  contents:
  - '3. The Eifel Detection Algorithm

    '
- title: 3.1 The Idea
  contents:
  - "3.1 The Idea\n   The goal of the Eifel detection algorithm is to allow a TCP\
    \ sender to\n   detect a posteriori whether it has entered loss recovery\n   unnecessarily.\
    \  Furthermore, the TCP sender should be able to make\n   this decision upon the\
    \ first acceptable ACK that arrives after the\n   timeout-based retransmit or\
    \ the fast retransmit has been sent.  This\n   in turn requires extra information\
    \ in ACKs by which the TCP sender\n   can unambiguously distinguish whether that\
    \ first acceptable ACK was\n   sent in response to the original transmit or the\
    \ retransmit.  Such\n   extra information is provided by the TCP Timestamps option\
    \ [RFC1323].\n   Generally speaking, timestamps are monotonously increasing \"\
    serial\n   numbers\" added into every segment that are then echoed within the\n\
    \   corresponding ACKs.  This is exploited by the Eifel detection\n   algorithm\
    \ in the following way.\n   Given that timestamps are enabled for a connection,\
    \ a TCP sender\n   always stores the timestamp of the retransmit sent in the beginning\n\
    \   of loss recovery, i.e., the timestamp of the timeout-based retransmit\n  \
    \ or the fast retransmit.  If the timestamp of the first acceptable\n   ACK, that\
    \ arrives after the retransmit was sent, is smaller then the\n   stored timestamp\
    \ of that retransmit, then that ACK must have been\n   sent in response to an\
    \ original transmit.  Hence, the TCP sender must\n   have entered loss recovery\
    \ unnecessarily.\n   The fact that the Eifel detection algorithm decides upon\
    \ the first\n   acceptable ACK is crucial to allow future response algorithms\
    \ to\n   avoid the unnecessary go-back-N retransmits that typically occur\n  \
    \ after a spurious timeout.  Also, if loss recovery was entered\n   unnecessarily,\
    \ a window worth of ACKs are outstanding that all carry\n   a timestamp that is\
    \ smaller than the stored timestamp of the\n   retransmit.  The arrival of any\
    \ one of those ACKs is sufficient for\n   the Eifel detection algorithm to work.\
    \  Hence, the solution is fairly\n   robust against ACK losses.  Even the ACK\
    \ sent in response to the\n   retransmit, i.e., the one that carries the stored\
    \ timestamp, may get\n   lost without compromising the algorithm.\n"
- title: 3.2 The Algorithm
  contents:
  - "3.2 The Algorithm\n   Given that the TCP Timestamps option [RFC1323] is enabled\
    \ for a\n   connection, a TCP sender MAY use the Eifel detection algorithm as\n\
    \   defined in this subsection.\n   If the Eifel detection algorithm is used,\
    \ the following steps MUST be\n   taken by a TCP sender, but only upon initiation\
    \ of loss recovery,\n   i.e., when either the timeout-based retransmit or the\
    \ fast retransmit\n   is sent.  The Eifel detection algorithm MUST NOT be reinitiated\
    \ after\n   loss recovery has already started.  In particular, it must not be\n\
    \   reinitiated upon subsequent timeouts for the same segment, and not\n   upon\
    \ retransmitting segments other than the oldest outstanding\n   segment, e.g.,\
    \ during selective loss recovery.\n      (1)     Set a \"SpuriousRecovery\" variable\
    \ to FALSE (equal 0).\n      (2)     Set a \"RetransmitTS\" variable to the value\
    \ of the\n              Timestamp Value field of the Timestamps option included\
    \ in\n              the retransmit sent when loss recovery is initiated.  A\n\
    \              TCP sender must ensure that RetransmitTS does not get\n       \
    \       overwritten as loss recovery progresses, e.g., in case of\n          \
    \    a second timeout and subsequent second retransmit of the\n              same\
    \ octet.\n      (3)     Wait for the arrival of an acceptable ACK.  When an\n\
    \              acceptable ACK has arrived, proceed to step (4).\n      (4)   \
    \  If the value of the Timestamp Echo Reply field of the\n              acceptable\
    \ ACK's Timestamps option is smaller than the\n              value of RetransmitTS,\
    \ then proceed to step (5),\n              else proceed to step (DONE).\n    \
    \  (5)     If the acceptable ACK carries a DSACK option [RFC2883],\n         \
    \     then proceed to step (DONE),\n              else if during the lifetime\
    \ of the TCP connection the TCP\n              sender has previously received\
    \ an ACK with a DSACK option,\n              or the acceptable ACK does not acknowledge\
    \ all outstanding\n              data, then proceed to step (6),\n           \
    \   else proceed to step (DONE).\n      (6)     If the loss recovery has been\
    \ initiated with a timeout-\n              based retransmit, then set\n      \
    \            SpuriousRecovery <- SPUR_TO (equal 1),\n              else set\n\
    \                  SpuriousRecovery <- dupacks+1\n      (RESP)  Do nothing (Placeholder\
    \ for a response algorithm).\n      (DONE)  No further processing.\n   The comparison\
    \ \"smaller than\" in step (4) is conservative.  In\n   theory, if the timestamp\
    \ clock is slow or the network is fast,\n   RetransmitTS could at most be equal\
    \ to the timestamp echoed by an ACK\n   sent in response to an original transmit.\
    \  In that case, it is\n   assumed that the loss recovery was not falsely triggered.\n\
    \   Note that the condition \"if during the lifetime of the TCP connection\n \
    \  the TCP sender has previously received an ACK with a DSACK option\" in\n  \
    \ step (5) would be true in case the TCP receiver would signal in the\n   SYN\
    \ that it is DSACK-enabled.  But unfortunately, this is not\n   required by [RFC2883].\n"
- title: '3.3 A Corner Case: "Timeout due to loss of all ACKs" (step 5)'
  contents:
  - "3.3 A Corner Case: \"Timeout due to loss of all ACKs\" (step 5)\n   Even though\
    \ the oldest outstanding segment arrived at a TCP receiver,\n   the TCP sender\
    \ is forced into a timeout if all ACKs are lost.\n   Although the resulting retransmit\
    \ is unnecessary, such a timeout is\n   unavoidable.  It should therefore not\
    \ be considered spurious.\n   Moreover, the subsequent reduction of the congestion\
    \ window is an\n   appropriate response to the potentially heavy congestion in\
    \ the ACK\n   path.  The original proposal [LK00] does not handle this case well.\n\
    \   It effectively disables this implicit form of congestion control for\n   the\
    \ ACK path, which otherwise does not exist in TCP.  This problem is\n   fixed\
    \ by step (5) of the Eifel detection algorithm as explained in\n   the remainder\
    \ of this section.\n   If all ACKs are lost while the oldest outstanding segment\
    \ arrived at\n   the TCP receiver, the retransmit arrives as a duplicate.  In\
    \ response\n   to duplicates, RFC 1323 mandates that the timestamp of the last\n\
    \   segment that arrived in-sequence should be echoed.  That timestamp is\n  \
    \ carried by the first acceptable ACK that arrives at the TCP sender\n   after\
    \ loss recovery was entered, and is commonly smaller than the\n   timestamp carried\
    \ by the retransmit.  Consequently, the Eifel\n   detection algorithm misinterprets\
    \ such a timeout as being spurious,\n   unless the TCP receiver is DSACK-enabled\
    \ [RFC2883].  In that case,\n   the acceptable ACK carries a DSACK option, and\
    \ the Eifel algorithm is\n   terminated through the first part of step (5).\n\
    \      Note: Not all TCP implementations strictly follow RFC 1323.  In\n     \
    \ response to a duplicate data segment, some TCP receivers echo the\n      timestamp\
    \ of the duplicate.  With such TCP receivers, the corner\n      case discussed\
    \ in this section does not apply.  The timestamp\n      carried by the retransmit\
    \ would be echoed in the first acceptable\n      ACK, and the Eifel detection\
    \ algorithm would be terminated through\n      step (4).  Thus, even though all\
    \ ACKs were lost and independent of\n      whether the DSACK option was enabled\
    \ for a connection, the Eifel\n      detection algorithm would have no effect.\n\
    \   With TCP receivers that are not DSACK-enabled, disabling the\n   mentioned\
    \ implicit congestion control for the ACK path is not a\n   problem as long as\
    \ data segments are lost, in addition to the entire\n   flight of ACKs.  The Eifel\
    \ detection algorithm misinterprets such a\n   timeout as being spurious, and\
    \ the Eifel response algorithm would\n   reverse the congestion control state.\
    \  Still, the TCP sender would\n   respond to congestion (in the data path) as\
    \ soon as it finds out\n   about the first loss in the outstanding flight.  I.e.,\
    \ the TCP sender\n   would still halve its congestion window for that flight of\
    \ packets.\n   If no data segment is lost while the entire flight of ACKs is lost,\n\
    \   the first acceptable ACK that arrives at the TCP sender after loss\n   recovery\
    \ was entered acknowledges all outstanding data.  In that\n   case, the Eifel\
    \ algorithm is terminated through the second part of\n   step (5).\n   Note that\
    \ there is little concern about violating the packet\n   conservation principle\
    \ when entering slow start after an unavoidable\n   timeout caused by the loss\
    \ of an entire flight of ACKs, i.e., when\n   the Eifel detection algorithm was\
    \ terminated through step (5).  This\n   is because in that case, the acceptable\
    \ ACK corresponds to the\n   retransmit, which is a strong indication that the\
    \ pipe has drained\n   entirely, i.e., that no more original transmits are in\
    \ the network.\n   This is different with spurious timeouts as discussed in Section\
    \ 2.\n"
- title: 3.4 Protecting Against Misbehaving TCP Receivers (the Safe Variant)
  contents:
  - "3.4 Protecting Against Misbehaving TCP Receivers (the Safe Variant)\n   A TCP\
    \ receiver can easily make a genuine retransmit appear to the TCP\n   sender as\
    \ a spurious retransmit by forging echoed timestamps.  This\n   may pose a security\
    \ concern.\n   Fortunately, there is a way to modify the Eifel detection algorithm\n\
    \   in a way that makes it robust against lying TCP receivers.  The idea\n   is\
    \ to use timestamps as a segment's \"secret\" that a TCP receiver only\n   gets\
    \ to know if it receives the segment.  Conversely, a TCP receiver\n   will not\
    \ know the timestamp of a segment that was lost.  Hence, to\n   \"prove\" that\
    \ it received the original transmit of a segment that a\n   TCP sender retransmitted,\
    \ the TCP receiver would need to return the\n   timestamp of that original transmit.\
    \  The Eifel detection algorithm\n   could then be modified to only decide that\
    \ loss recovery has been\n   unnecessarily entered if the first acceptable ACK\
    \ echoes the\n   timestamp of the original transmit.\n   Hence, implementers may\
    \ choose to implement the algorithm with the\n   following modifications.\n  \
    \ Step (2) is replaced with step (2'):\n      (2')    Set a \"RetransmitTS\" variable\
    \ to the value of the\n              Timestamp Value field of the Timestamps option\
    \ that was\n              included in the original transmit corresponding to the\n\
    \              retransmit.  Note: This step requires that the TCP sender\n   \
    \           stores the timestamps of all outstanding original\n              transmits.\n\
    \   Step (4) is replaced with step (4'):\n      (4')    If the value of the Timestamp\
    \ Echo Reply field of the\n              acceptable ACK's Timestamps option is\
    \ equal to the value\n              of the variable RetransmitTS, then proceed\
    \ to step (5),\n              else proceed to step (DONE).\n   These modifications\
    \ come at a cost: the modified algorithm is fairly\n   sensitive against ACK losses\
    \ since it relies on the arrival of the\n   acceptable ACK that corresponds to\
    \ the original transmit.\n      Note: The first acceptable ACK that arrives after\
    \ loss recovery\n      has been unnecessarily entered should echo the timestamp\
    \ of the\n      original transmit.  This assumes that the ACK corresponding to\
    \ the\n      original transmit was not lost, that that ACK was not reordered in\n\
    \      the network, and that the TCP receiver does not forge timestamps\n    \
    \  but complies with RFC 1323.  In case of a spurious fast\n      retransmit,\
    \ this is implied by the rules for generating ACKs for\n      data segments that\
    \ fill in all or part of a gap in the sequence\n      space (see section 4.2 of\
    \ [RFC2581]) and by the rules for echoing\n      timestamps in that case (see\
    \ rule (C) in section 3.4 of\n      [RFC1323]).  In case of a spurious timeout,\
    \ it is likely that the\n      delay that has caused the spurious timeout has\
    \ also caused the TCP\n      receiver's delayed ACK timer [RFC1122] to expire\
    \ before the\n      original transmit arrives.  Also, in this case the rules for\n\
    \      generating ACKs and the rules for echoing timestamps (see rule (A)\n  \
    \    in section 3.4 of [RFC1323]) ensure that the original transmit's\n      timestamp\
    \ is echoed.\n   A remaining problem is that a TCP receiver might guess a lost\n\
    \   segment's timestamp from observing the timestamps of recently\n   received\
    \ segments.  For example, if segment N was lost while segment\n   N-1 and N+1\
    \ have arrived, a TCP receiver could guess the timestamp\n   that lies in the\
    \ middle of the timestamps of segments N-1 and N+1,\n   and echo it in the ACK\
    \ sent in response to the retransmit of segment\n   N.  Especially if the TCP\
    \ sender implements timestamps with a coarse\n   granularity, a misbehaving TCP\
    \ receiver is likely to be successful\n   with such an approach.  In fact, with\
    \ the 500 ms granularity\n   suggested in [WS95], it even becomes quite likely\
    \ that the timestamps\n   of segments N-1, N, N+1 are identical.\n   One way to\
    \ reduce this risk is to implement fine grained timestamps.\n   Note that the\
    \ granularity of the timestamps is independent of the\n   granularity of the retransmission\
    \ timer.  For example, some TCP\n   implementations run a timestamp clock that\
    \ ticks every millisecond.\n   This should make it more difficult for a TCP receiver\
    \ to guess the\n   timestamp of a lost segment.  Alternatively, it might be possible\
    \ to\n   combine the timestamps with a nonce, as is done for the Explicit\n  \
    \ Congestion Notification (ECN) [RFC3168].  One would need to take\n   care, though,\
    \ that the timestamps of consecutive segments remain\n   monotonously increasing\
    \ and do not interfere with the RTT timing\n   defined in [RFC1323].\n"
- title: 4. IPR Considerations
  contents:
  - "4. IPR Considerations\n   The IETF has been notified of intellectual property\
    \ rights claimed in\n   regard to some or all of the specification contained in\
    \ this\n   document.  For more information consult the online list of claimed\n\
    \   rights at http://www.ietf.org/ipr.\n   The IETF takes no position regarding\
    \ the validity or scope of any\n   intellectual property or other rights that\
    \ might be claimed to\n   pertain to the implementation or use of the technology\
    \ described in\n   this document or the extent to which any license under such\
    \ rights\n   might or might not be available; neither does it represent that it\n\
    \   has made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP-11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementors or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   There do not seem to be any security considerations\
    \ associated with\n   the Eifel detection algorithm.  This is because the Eifel\
    \ detection\n   algorithm does not alter the existing protocol state at a TCP\
    \ sender.\n   Note that the Eifel detection algorithm only requires changes to\
    \ the\n   implementation of a TCP sender.\n   Moreover, a variant of the Eifel\
    \ detection algorithm has been\n   proposed in Section 3.4 that makes it robust\
    \ against lying TCP\n   receivers.  This may become relevant when the Eifel detection\n\
    \   algorithm is combined with a response algorithm such as the Eifel\n   response\
    \ algorithm [LG03].\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Many thanks to Keith Sklower, Randy Katz, Stephan Baucke,\
    \ Sally\n   Floyd, Vern Paxson, Mark Allman, Ethan Blanton, Andrei Gurtov, Pasi\n\
    \   Sarolahti, and Alexey Kuznetsov for useful discussions that\n   contributed\
    \ to this work.\n"
- title: Normative References
  contents:
  - "Normative References\n   [RFC2581] Allman, M., Paxson, V. and W. Stevens, \"\
    TCP Congestion\n             Control\", RFC 2581, April 1999.\n   [RFC2119] Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n             Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC2883] Floyd, S., Mahdavi, J., Mathis,\
    \ M., Podolsky, M. and A.\n             Romanow, \"An Extension to the Selective\
    \ Acknowledgement\n             (SACK) Option for TCP\", RFC 2883, July 2000.\n\
    \   [RFC1323] Jacobson, V., Braden, R. and D. Borman, \"TCP Extensions for\n \
    \            High Performance\", RFC 1323, May 1992.\n   [RFC2018] Mathis, M.,\
    \ Mahdavi, J., Floyd, S. and A. Romanow, \"TCP\n             Selective Acknowledgement\
    \ Options\", RFC 2018, October 1996.\n   [RFC793]  Postel, J., \"Transmission\
    \ Control Protocol\", STD 7, RFC\n             793, September 1981.\n"
- title: Informative References
  contents:
  - "Informative References\n   [BA02]    Blanton, E. and M. Allman, \"Using TCP DSACKs\
    \ and SCTP\n             Duplicate TSNs to Detect Spurious Retransmissions\",\
    \ Work in\n             Progress.\n   [RFC1122] Braden, R., \"Requirements for\
    \ Internet Hosts -\n             Communication Layers\", STD 3, RFC 1122, October\
    \ 1989.\n   [RFC2582] Floyd, S. and T. Henderson, \"The NewReno Modification to\n\
    \             TCP's Fast Recovery Algorithm\", RFC 2582, April 1999.\n   [Gu01]\
    \    Gurtov, A., \"Effect of Delays on TCP Performance\", In\n             Proceedings\
    \ of IFIP Personal Wireless Communications,\n             August 2001.\n   [RFC3481]\
    \ Inamura, H., Montenegro, G., Ludwig, R., Gurtov, A. and F.\n             Khafizov,\
    \ \"TCP over Second (2.5G) and Third (3G) Generation\n             Wireless Networks\"\
    , RFC 3481, February 2003.\n   [Jac88]   Jacobson, V., \"Congestion Avoidance\
    \ and Control\", In\n             Proceedings of ACM SIGCOMM 88.\n   [KP87]  \
    \  Karn, P. and C. Partridge, \"Improving Round-Trip Time\n             Estimates\
    \ in Reliable Transport Protocols\", In Proceedings\n             of ACM SIGCOMM\
    \ 87.\n   [LK00]    Ludwig, R. and R. H. Katz, \"The Eifel Algorithm: Making TCP\n\
    \             Robust Against Spurious Retransmissions\", ACM Computer\n      \
    \       Communication Review, Vol. 30, No. 1, January 2000.\n   [LG03]    Ludwig,\
    \ R. and A. Gurtov, \"The Eifel Response Algorithm for\n             TCP\", Work\
    \ in Progress.\n   [RFC2988] Paxson, V. and M. Allman, \"Computing TCP's Retransmission\n\
    \             Timer\", RFC 2988, November 2000.\n   [RFC791]  Postel, J., \"Internet\
    \ Protocol\", STD 5, RFC 791, September\n             1981.\n   [RFC3168] Ramakrishnan,\
    \ K., Floyd, S. and D. Black, \"The Addition of\n             Explicit Congestion\
    \ Notification (ECN) to IP\", RFC 3168,\n             September 2001.\n   [SK03]\
    \    Sarolahti, P. and M. Kojo, \"F-RTO: A TCP RTO Recovery\n             Algorithm\
    \ for Avoiding Unnecessary Retransmissions\", Work\n             in Progress.\n\
    \   [WS95]    Wright, G. R. and W. R. Stevens, \"TCP/IP Illustrated,\n       \
    \      Volume 2 (The Implementation)\", Addison Wesley, January\n            \
    \ 1995.\n   [Zh86]    Zhang, L., \"Why TCP Timers Don't Work Well\", In Proceedings\n\
    \             of ACM SIGCOMM 86.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Reiner Ludwig\n   Ericsson Research\n   Ericsson Allee\
    \ 1\n   52134 Herzogenrath, Germany\n   EMail: Reiner.Ludwig@eed.ericsson.se\n\
    \   Michael Meyer\n   Ericsson Research\n   Ericsson Allee 1\n   52134 Herzogenrath,\
    \ Germany\n   EMail: Michael.Meyer@eed.ericsson.se\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
