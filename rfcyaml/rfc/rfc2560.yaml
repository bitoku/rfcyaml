- title: __initial_text__
  contents:
  - "                X.509 Internet Public Key Infrastructure\n               Online\
    \ Certificate Status Protocol - OCSP\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: 1.  Abstract
  contents:
  - "1.  Abstract\n   This document specifies a protocol useful in determining the\
    \ current\n   status of a digital certificate without requiring CRLs. Additional\n\
    \   mechanisms addressing PKIX operational requirements are specified in\n   separate\
    \ documents.\n   An overview of the protocol is provided in section 2. Functional\n\
    \   requirements are specified in section 4. Details of the protocol are\n   in\
    \ section 5. We cover security issues with the protocol in section\n   6. Appendix\
    \ A defines OCSP over HTTP, appendix B accumulates ASN.1\n   syntactic elements\
    \ and appendix C specifies the mime types for the\n   messages.\n   The key words\
    \ \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\"\
    , \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document\
    \ (in uppercase, as shown) are to be interpreted as described\n   in [RFC2119].\n"
- title: 2.  Protocol Overview
  contents:
  - "2.  Protocol Overview\n   In lieu of or as a supplement to checking against a\
    \ periodic CRL, it\n   may be necessary to obtain timely information regarding\
    \ the\n   revocation status of a certificate (cf. [RFC2459], Section 3.3).\n \
    \  Examples include high-value funds transfer or large stock trades.\n   The Online\
    \ Certificate Status Protocol (OCSP) enables applications to\n   determine the\
    \ (revocation) state of an identified certificate. OCSP\n   may be used to satisfy\
    \ some of the operational requirements of\n   providing more timely revocation\
    \ information than is possible with\n   CRLs and may also be used to obtain additional\
    \ status information. An\n   OCSP client issues a status request to an OCSP responder\
    \ and suspends\n   acceptance of the certificate in question until the responder\n\
    \   provides a response.\n   This protocol specifies the data that needs to be\
    \ exchanged between\n   an application checking the status of a certificate and\
    \ the server\n   providing that status.\n"
- title: 2.1  Request
  contents:
  - "2.1  Request\n   An OCSP request contains the following data:\n   -- protocol\
    \ version\n   -- service request\n   -- target certificate identifier\n   -- optional\
    \ extensions which MAY be processed by the OCSP Responder\n   Upon receipt of\
    \ a request, an OCSP Responder determines if:\n   1. the message is well formed\n\
    \   2. the responder is configured to provide the requested service and\n   3.\
    \ the request contains the information needed by the responder If\n   any one\
    \ of the prior conditions are not met, the OCSP responder\n   produces an error\
    \ message; otherwise, it returns a definitive\n   response.\n"
- title: 2.2  Response
  contents:
  - "2.2  Response\n   OCSP responses can be of various types.  An OCSP response consists\
    \ of\n   a response type and the bytes of the actual response. There is one\n\
    \   basic type of OCSP response that MUST be supported by all OCSP\n   servers\
    \ and clients. The rest of this section pertains only to this\n   basic response\
    \ type.\n   All definitive response messages SHALL be digitally signed. The key\n\
    \   used to sign the response MUST belong to one of the following:\n   -- the\
    \ CA who issued the certificate in question\n   -- a Trusted Responder whose public\
    \ key is trusted by the requester\n   -- a CA Designated Responder (Authorized\
    \ Responder) who holds a\n      specially marked certificate issued directly by\
    \ the CA, indicating\n      that the responder may issue OCSP responses for that\
    \ CA\n   A definitive response message is composed of:\n   -- version of the response\
    \ syntax\n   -- name of the responder\n   -- responses for each of the certificates\
    \ in a request\n   -- optional extensions\n   -- signature algorithm OID\n   --\
    \ signature computed across hash of the response\n   The response for each of\
    \ the certificates in a request consists of\n   -- target certificate identifier\n\
    \   -- certificate status value\n   -- response validity interval\n   -- optional\
    \ extensions\n   This specification defines the following definitive response\n\
    \   indicators for use in the certificate status value:\n   -- good\n   -- revoked\n\
    \   -- unknown\n   The \"good\" state indicates a positive response to the status\
    \ inquiry.\n   At a minimum, this positive response indicates that the certificate\n\
    \   is not revoked, but does not necessarily mean that the certificate\n   was\
    \ ever issued or that the time at which the response was produced\n   is within\
    \ the certificate's validity interval. Response extensions\n   may be used to\
    \ convey additional information on assertions made by\n   the responder regarding\
    \ the status of the certificate such as\n   positive statement about issuance,\
    \ validity, etc.\n   The \"revoked\" state indicates that the certificate has\
    \ been revoked\n   (either permanantly or temporarily (on hold)).\n   The \"unknown\"\
    \ state indicates that the responder doesn't know about\n   the certificate being\
    \ requested.\n"
- title: 2.3  Exception Cases
  contents:
  - "2.3  Exception Cases\n   In case of errors, the OCSP Responder may return an\
    \ error message.\n   These messages are not signed. Errors can be of the following\
    \ types:\n   -- malformedRequest\n   -- internalError\n   -- tryLater\n   -- sigRequired\n\
    \   -- unauthorized\n   A server produces the \"malformedRequest\" response if\
    \ the request\n   received does not conform to the OCSP syntax.\n   The response\
    \ \"internalError\" indicates that the OCSP responder\n   reached an inconsistent\
    \ internal state. The query should be retried,\n   potentially with another responder.\n\
    \   In the event that the OCSP responder is operational, but unable to\n   return\
    \ a status for the requested certificate, the \"tryLater\"\n   response can be\
    \ used to indicate that the service exists, but is\n   temporarily unable to respond.\n\
    \   The response \"sigRequired\" is returned in cases where the server\n   requires\
    \ the client sign the request in order to construct a\n   response.\n   The response\
    \ \"unauthorized\" is returned in cases where the client is\n   not authorized\
    \ to make this query to this server.\n"
- title: 2.4  Semantics of thisUpdate, nextUpdate and producedAt
  contents:
  - "2.4  Semantics of thisUpdate, nextUpdate and producedAt\n   Responses can contain\
    \ three times in them - thisUpdate, nextUpdate\n   and producedAt. The semantics\
    \ of these fields are:\n   - thisUpdate: The time at which the status being indicated\
    \ is known\n                 to be correct\n   - nextUpdate: The time at or before\
    \ which newer information will be\n                 available about the status\
    \ of the certificate\n   - producedAt: The time at which the OCSP responder signed\
    \ this\n                 response.\n   If nextUpdate is not set, the responder\
    \ is indicating that newer\n   revocation information is available all the time.\n"
- title: 2.5  Response Pre-production
  contents:
  - "2.5  Response Pre-production\n   OCSP responders MAY pre-produce signed responses\
    \ specifying the\n   status of certificates at a specified time. The time at which\
    \ the\n   status was known to be correct SHALL be reflected in the thisUpdate\n\
    \   field of the response. The time at or before which newer information\n   will\
    \ be available is reflected in the nextUpdate field, while the\n   time at which\
    \ the response was produced will appear in the producedAt\n   field of the response.\n"
- title: 2.6  OCSP Signature Authority Delegation
  contents:
  - "2.6  OCSP Signature Authority Delegation\n   The key that signs a certificate's\
    \ status information need not be the\n   same key that signed the certificate.\
    \ A certificate's issuer\n   explicitly delegates OCSP signing authority by issuing\
    \ a certificate\n   containing a unique value for extendedKeyUsage in the OCSP\
    \ signer's\n   certificate. This certificate MUST be issued directly to the\n\
    \   responder by the cognizant CA.\n"
- title: 2.7  CA Key Compromise
  contents:
  - "2.7  CA Key Compromise\n   If an OCSP responder knows that a particular CA's\
    \ private key has\n   been compromised, it MAY return the revoked state for all\n\
    \   certificates issued by that CA.\n"
- title: 3.  Functional Requirements
  contents:
  - '3.  Functional Requirements

    '
- title: 3.1  Certificate Content
  contents:
  - "3.1  Certificate Content\n   In order to convey to OCSP clients a well-known\
    \ point of information\n   access, CAs SHALL provide the capability to include\
    \ the\n   AuthorityInfoAccess extension (defined in [RFC2459], section 4.2.2.1)\n\
    \   in certificates that can be checked using OCSP.  Alternatively, the\n   accessLocation\
    \ for the OCSP provider may be configured locally at the\n   OCSP client.\n  \
    \ CAs that support an OCSP service, either hosted locally or provided\n   by an\
    \ Authorized Responder, MUST provide for the inclusion of a value\n   for a uniformResourceIndicator\
    \ (URI) accessLocation and the OID value\n   id-ad-ocsp for the accessMethod in\
    \ the AccessDescription SEQUENCE.\n   The value of the accessLocation field in\
    \ the subject certificate\n   defines the transport (e.g. HTTP) used to access\
    \ the OCSP responder\n   and may contain other transport dependent information\
    \ (e.g. a URL).\n"
- title: 3.2  Signed Response Acceptance Requirements
  contents:
  - "3.2  Signed Response Acceptance Requirements\n   Prior to accepting a signed\
    \ response as valid, OCSP clients SHALL\n   confirm that:\n   1. The certificate\
    \ identified in a received response corresponds to\n   that which was identified\
    \ in the corresponding request;\n   2. The signature on the response is valid;\n\
    \   3. The identity of the signer matches the intended recipient of the\n   request.\n\
    \   4. The signer is currently authorized to sign the response.\n   5. The time\
    \ at which the status being indicated is known to be\n   correct (thisUpdate)\
    \ is sufficiently recent.\n   6. When available, the time at or before which newer\
    \ information will\n   be available about the status of the certificate (nextUpdate)\
    \ is\n   greater than the current time.\n"
- title: 4.  Detailed Protocol
  contents:
  - "4.  Detailed Protocol\n   The ASN.1 syntax imports terms defined in [RFC2459].\
    \ For signature\n   calculation, the data to be signed is encoded using the ASN.1\n\
    \   distinguished encoding rules (DER) [X.690].\n   ASN.1 EXPLICIT tagging is\
    \ used as a default unless specified\n   otherwise.\n   The terms imported from\
    \ elsewhere are: Extensions,\n   CertificateSerialNumber, SubjectPublicKeyInfo,\
    \ Name,\n   AlgorithmIdentifier, CRLReason\n"
- title: 4.1  Requests
  contents:
  - "4.1  Requests\n   This section specifies the ASN.1 specification for a confirmation\n\
    \   request. The actual formatting of the message could vary depending on\n  \
    \ the transport mechanism used (HTTP, SMTP, LDAP, etc.).\n"
- title: 4.1.1  Request Syntax
  contents:
  - "4.1.1  Request Syntax\n   OCSPRequest     ::=     SEQUENCE {\n       tbsRequest\
    \                  TBSRequest,\n       optionalSignature   [0]     EXPLICIT Signature\
    \ OPTIONAL }\n   TBSRequest      ::=     SEQUENCE {\n       version          \
    \   [0]     EXPLICIT Version DEFAULT v1,\n       requestorName       [1]     EXPLICIT\
    \ GeneralName OPTIONAL,\n       requestList                 SEQUENCE OF Request,\n\
    \       requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }\n   Signature\
    \       ::=     SEQUENCE {\n       signatureAlgorithm      AlgorithmIdentifier,\n\
    \       signature               BIT STRING,\n       certs               [0] EXPLICIT\
    \ SEQUENCE OF Certificate\n   OPTIONAL}\n   Version         ::=             INTEGER\
    \  {  v1(0) }\n   Request         ::=     SEQUENCE {\n       reqCert         \
    \            CertID,\n       singleRequestExtensions     [0] EXPLICIT Extensions\
    \ OPTIONAL }\n   CertID          ::=     SEQUENCE {\n       hashAlgorithm    \
    \   AlgorithmIdentifier,\n       issuerNameHash      OCTET STRING, -- Hash of\
    \ Issuer's DN\n       issuerKeyHash       OCTET STRING, -- Hash of Issuers public\
    \ key\n       serialNumber        CertificateSerialNumber }\n   issuerNameHash\
    \ is the hash of the Issuer's distinguished name. The\n   hash shall be calculated\
    \ over the DER encoding of the issuer's name\n   field in the certificate being\
    \ checked. issuerKeyHash is the hash of\n   the Issuer's public key. The hash\
    \ shall be calculated over the value\n   (excluding tag and length) of the subject\
    \ public key field in the\n   issuer's certificate. The hash algorithm used for\
    \ both these hashes,\n   is identified in hashAlgorithm. serialNumber is the serial\
    \ number of\n   the certificate for which status is being requested.\n"
- title: 4.1.2  Notes on the Request Syntax
  contents:
  - "4.1.2  Notes on the Request Syntax\n   The primary reason to use the hash of\
    \ the CA's public key in addition\n   to the hash of the CA's name, to identify\
    \ the issuer, is that it is\n   possible that two CAs may choose to use the same\
    \ Name (uniqueness in\n   the Name is a recommendation that cannot be enforced).\
    \ Two CAs will\n   never, however, have the same public key unless the CAs either\n\
    \   explicitly decided to share their private key, or the key of one of\n   the\
    \ CAs was compromised.\n   Support for any specific extension is OPTIONAL. The\
    \ critical flag\n   SHOULD NOT be set for any of them.  Section 4.4 suggests several\n\
    \   useful extensions.  Additional extensions MAY be defined in\n   additional\
    \ RFCs. Unrecognized extensions MUST be ignored (unless they\n   have the critical\
    \ flag set and are not understood).\n   The requestor MAY choose to sign the OCSP\
    \ request. In that case, the\n   signature is computed over the tbsRequest structure.\
    \ If the request\n   is signed, the requestor SHALL specify its name in the requestorName\n\
    \   field. Also, for signed requests, the requestor MAY include\n   certificates\
    \ that help the OCSP responder verify the requestor's\n   signature in the certs\
    \ field of Signature.\n"
- title: 4.2  Response Syntax
  contents:
  - "4.2  Response Syntax\n   This section specifies the ASN.1 specification for a\
    \ confirmation\n   response. The actual formatting of the message could vary depending\n\
    \   on the transport mechanism used (HTTP, SMTP, LDAP, etc.).\n"
- title: 4.2.1  ASN.1 Specification of the OCSP Response
  contents:
  - "4.2.1  ASN.1 Specification of the OCSP Response\n   An OCSP response at a minimum\
    \ consists of a responseStatus field\n   indicating the processing status of the\
    \ prior request. If the value\n   of responseStatus is one of the error conditions,\
    \ responseBytes are\n   not set.\n   OCSPResponse ::= SEQUENCE {\n      responseStatus\
    \         OCSPResponseStatus,\n      responseBytes          [0] EXPLICIT ResponseBytes\
    \ OPTIONAL }\n   OCSPResponseStatus ::= ENUMERATED {\n       successful      \
    \      (0),  --Response has valid confirmations\n       malformedRequest     \
    \ (1),  --Illegal confirmation request\n       internalError         (2),  --Internal\
    \ error in issuer\n       tryLater              (3),  --Try again later\n    \
    \                               --(4) is not used\n       sigRequired        \
    \   (5),  --Must sign the request\n       unauthorized          (6)   --Request\
    \ unauthorized\n   }\n   The value for responseBytes consists of an OBJECT IDENTIFIER\
    \ and a\n   response syntax identified by that OID encoded as an OCTET STRING.\n\
    \   ResponseBytes ::=       SEQUENCE {\n       responseType   OBJECT IDENTIFIER,\n\
    \       response       OCTET STRING }\n   For a basic OCSP responder, responseType\
    \ will be id-pkix-ocsp-basic.\n   id-pkix-ocsp           OBJECT IDENTIFIER ::=\
    \ { id-ad-ocsp }\n   id-pkix-ocsp-basic     OBJECT IDENTIFIER ::= { id-pkix-ocsp\
    \ 1 }\n   OCSP responders SHALL be capable of producing responses of the id-\n\
    \   pkix-ocsp-basic response type. Correspondingly, OCSP clients SHALL be\n  \
    \ capable of receiving and processing responses of the id-pkix-ocsp-\n   basic\
    \ response type.\n   The value for response SHALL be the DER encoding of\n   BasicOCSPResponse.\n\
    \   BasicOCSPResponse       ::= SEQUENCE {\n      tbsResponseData      ResponseData,\n\
    \      signatureAlgorithm   AlgorithmIdentifier,\n      signature            BIT\
    \ STRING,\n      certs                [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL\
    \ }\n   The value for signature SHALL be computed on the hash of the DER\n   encoding\
    \ ResponseData.\n   ResponseData ::= SEQUENCE {\n      version              [0]\
    \ EXPLICIT Version DEFAULT v1,\n      responderID              ResponderID,\n\
    \      producedAt               GeneralizedTime,\n      responses            \
    \    SEQUENCE OF SingleResponse,\n      responseExtensions   [1] EXPLICIT Extensions\
    \ OPTIONAL }\n   ResponderID ::= CHOICE {\n      byName               [1] Name,\n\
    \      byKey                [2] KeyHash }\n   KeyHash ::= OCTET STRING -- SHA-1\
    \ hash of responder's public key\n   (excluding the tag and length fields)\n \
    \  SingleResponse ::= SEQUENCE {\n      certID                       CertID,\n\
    \      certStatus                   CertStatus,\n      thisUpdate            \
    \       GeneralizedTime,\n      nextUpdate         [0]       EXPLICIT GeneralizedTime\
    \ OPTIONAL,\n      singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }\n\
    \   CertStatus ::= CHOICE {\n       good        [0]     IMPLICIT NULL,\n     \
    \  revoked     [1]     IMPLICIT RevokedInfo,\n       unknown     [2]     IMPLICIT\
    \ UnknownInfo }\n   RevokedInfo ::= SEQUENCE {\n       revocationTime        \
    \      GeneralizedTime,\n       revocationReason    [0]     EXPLICIT CRLReason\
    \ OPTIONAL }\n   UnknownInfo ::= NULL -- this can be replaced with an enumeration\n"
- title: 4.2.2  Notes on OCSP Responses
  contents:
  - '4.2.2  Notes on OCSP Responses

    '
- title: 4.2.2.1  Time
  contents:
  - "4.2.2.1  Time\n   The thisUpdate and nextUpdate fields define a recommended validity\n\
    \   interval. This interval corresponds to the {thisUpdate, nextUpdate}\n   interval\
    \ in CRLs. Responses whose nextUpdate value is earlier than\n   the local system\
    \ time value SHOULD be considered unreliable.\n   Responses whose thisUpdate time\
    \ is later than the local system time\n   SHOULD be considered unreliable. Responses\
    \ where the nextUpdate value\n   is not set are equivalent to a CRL with no time\
    \ for nextUpdate (see\n   Section 2.4).\n   The producedAt time is the time at\
    \ which this response was signed.\n"
- title: 4.2.2.2  Authorized Responders
  contents:
  - "4.2.2.2  Authorized Responders\n   The key that signs a certificate's status\
    \ information need not be the\n   same key that signed the certificate. It is\
    \ necessary however to\n   ensure that the entity signing this information is\
    \ authorized to do\n   so.  Therefore, a certificate's issuer MUST either sign\
    \ the OCSP\n   responses itself or it MUST explicitly designate this authority\
    \ to\n   another entity.  OCSP signing delegation SHALL be designated by the\n\
    \   inclusion of id-kp-OCSPSigning in an extendedKeyUsage certificate\n   extension\
    \ included in the OCSP response signer's certificate.  This\n   certificate MUST\
    \ be issued directly by the CA that issued the\n   certificate in question.\n\
    \   id-kp-OCSPSigning OBJECT IDENTIFIER ::= {id-kp 9}\n   Systems or applications\
    \ that rely on OCSP responses MUST be capable\n   of detecting and enforcing use\
    \ of the id-ad-ocspSigning value as\n   described above. They MAY provide a means\
    \ of locally configuring one\n   or more OCSP signing authorities, and specifying\
    \ the set of CAs for\n   which each signing authority is trusted. They MUST reject\
    \ the\n   response if the certificate required to validate the signature on the\n\
    \   response fails to meet at least one of the following criteria:\n   1. Matches\
    \ a local configuration of OCSP signing authority for the\n   certificate in question;\
    \ or\n   2. Is the certificate of the CA that issued the certificate in\n   question;\
    \ or\n   3. Includes a value of id-ad-ocspSigning in an ExtendedKeyUsage\n   extension\
    \ and is issued by the CA that issued the certificate in\n   question.\"\n   Additional\
    \ acceptance or rejection criteria may apply to either the\n   response itself\
    \ or to the certificate used to validate the signature\n   on the response.\n"
- title: 4.2.2.2.1  Revocation Checking of an Authorized Responder
  contents:
  - "4.2.2.2.1  Revocation Checking of an Authorized Responder\n   Since an Authorized\
    \ OCSP responder provides status information for\n   one or more CAs, OCSP clients\
    \ need to know how to check that an\n   authorized responder's certificate has\
    \ not been revoked. CAs may\n   choose to deal with this problem in one of three\
    \ ways:\n   - A CA may specify that an OCSP client can trust a responder for the\n\
    \   lifetime of the responder's certificate. The CA does so by including\n   the\
    \ extension id-pkix-ocsp-nocheck. This SHOULD be a non-critical\n   extension.\
    \ The value of the extension should be NULL. CAs issuing\n   such a certificate\
    \ should realized that a compromise of the\n   responder's key, is as serious\
    \ as the compromise of a CA key used to\n   sign CRLs, at least for the validity\
    \ period of this certificate. CA's\n   may choose to issue this type of certificate\
    \ with a very short\n   lifetime and renew it frequently.\n   id-pkix-ocsp-nocheck\
    \ OBJECT IDENTIFIER ::= { id-pkix-ocsp 5 }\n   - A CA may specify how the responder's\
    \ certificate be checked for\n   revocation. This can be done using CRL Distribution\
    \ Points if the\n   check should be done using CRLs or CRL Distribution Points,\
    \ or\n   Authority Information Access if the check should be done in some\n  \
    \ other way. Details for specifying either of these two mechanisms are\n   available\
    \ in [RFC2459].\n   - A CA may choose not to specify any method of revocation\
    \ checking\n   for the responder's certificate, in which case, it would be up\
    \ to the\n   OCSP client's local security policy to decide whether that\n   certificate\
    \ should be checked for revocation or not.\n"
- title: 4.3  Mandatory and Optional Cryptographic Algorithms
  contents:
  - "4.3  Mandatory and Optional Cryptographic Algorithms\n   Clients that request\
    \ OCSP services SHALL be capable of processing\n   responses signed used DSA keys\
    \ identified by the DSA sig-alg-oid\n   specified in section 7.2.2 of [RFC2459].\
    \ Clients SHOULD also be\n   capable of processing RSA signatures as specified\
    \ in section 7.2.1 of\n   [RFC2459]. OCSP responders SHALL support the SHA1 hashing\
    \ algorithm.\n"
- title: 4.4  Extensions
  contents:
  - "4.4  Extensions\n   This section defines some standard extensions, based on the\
    \ extension\n   model employed in X.509 version 3 certificates see [RFC2459].\
    \ Support\n   for all extensions is optional for both clients and responders.\
    \  For\n   each extension, the definition indicates its syntax, processing\n \
    \  performed by the OCSP Responder, and any extensions which are\n   included\
    \ in the corresponding response.\n"
- title: 4.4.1  Nonce
  contents:
  - "4.4.1  Nonce\n   The nonce cryptographically binds a request and a response to\
    \ prevent\n   replay attacks. The nonce is included as one of the requestExtensions\n\
    \   in requests, while in responses it would be included as one of the\n   responseExtensions.\
    \ In both the request and the response, the nonce\n   will be identified by the\
    \ object identifier id-pkix-ocsp-nonce, while\n   the extnValue is the value of\
    \ the nonce.\n   id-pkix-ocsp-nonce     OBJECT IDENTIFIER ::= { id-pkix-ocsp 2\
    \ }\n"
- title: 4.4.2  CRL References
  contents:
  - "4.4.2  CRL References\n   It may be desirable for the OCSP responder to indicate\
    \ the CRL on\n   which a revoked or onHold certificate is found. This can be useful\n\
    \   where OCSP is used between repositories, and also as an auditing\n   mechanism.\
    \ The CRL may be specified by a URL (the URL at which the\n   CRL is available),\
    \ a number (CRL number) or a time (the time at which\n   the relevant CRL was\
    \ created). These extensions will be specified as\n   singleExtensions. The identifier\
    \ for this extension will be id-pkix-\n   ocsp-crl, while the value will be CrlID.\n\
    \   id-pkix-ocsp-crl       OBJECT IDENTIFIER ::= { id-pkix-ocsp 3 }\n   CrlID\
    \ ::= SEQUENCE {\n      crlUrl               [0]     EXPLICIT IA5String OPTIONAL,\n\
    \      crlNum               [1]     EXPLICIT INTEGER OPTIONAL,\n      crlTime\
    \              [2]     EXPLICIT GeneralizedTime OPTIONAL }\n   For the choice\
    \ crlUrl, the IA5String will specify the URL at which\n   the CRL is available.\
    \ For crlNum, the INTEGER will specify the value\n   of the CRL number extension\
    \ of the relevant CRL. For crlTime, the\n   GeneralizedTime will indicate the\
    \ time at which the relevant CRL was\n   issued.\n"
- title: 4.4.3  Acceptable Response Types
  contents:
  - "4.4.3  Acceptable Response Types\n   An OCSP client MAY wish to specify the kinds\
    \ of response types it\n   understands. To do so, it SHOULD use an extension with\
    \ the OID id-\n   pkix-ocsp-response, and the value AcceptableResponses.  This\n\
    \   extension is included as one of the requestExtensions in requests.\n   The\
    \ OIDs included in AcceptableResponses are the OIDs of the various\n   response\
    \ types this client can accept (e.g., id-pkix-ocsp-basic).\n   id-pkix-ocsp-response\
    \  OBJECT IDENTIFIER ::= { id-pkix-ocsp 4 }\n   AcceptableResponses ::= SEQUENCE\
    \ OF OBJECT IDENTIFIER\n   As noted in section 4.2.1, OCSP responders SHALL be\
    \ capable of\n   responding with responses of the id-pkix-ocsp-basic response\
    \ type.\n   Correspondingly, OCSP clients SHALL be capable of receiving and\n\
    \   processing responses of the id-pkix-ocsp-basic response type.\n"
- title: 4.4.4  Archive Cutoff
  contents:
  - "4.4.4  Archive Cutoff\n   An OCSP responder MAY choose to retain revocation information\
    \ beyond\n   a certificate's expiration. The date obtained by subtracting this\n\
    \   retention interval value from the producedAt time in a response is\n   defined\
    \ as the certificate's \"archive cutoff\" date.\n   OCSP-enabled applications\
    \ would use an OCSP archive cutoff date to\n   contribute to a proof that a digital\
    \ signature was (or was not)\n   reliable on the date it was produced even if\
    \ the certificate needed\n   to validate the signature has long since expired.\n\
    \   OCSP servers that provide support for such historical reference\n   SHOULD\
    \ include an archive cutoff date extension in responses.  If\n   included, this\
    \ value SHALL be provided as an OCSP singleExtensions\n   extension identified\
    \ by id-pkix-ocsp-archive-cutoff and of syntax\n   GeneralizedTime.\n   id-pkix-ocsp-archive-cutoff\
    \  OBJECT IDENTIFIER ::= { id-pkix-ocsp 6 }\n   ArchiveCutoff ::= GeneralizedTime\n\
    \   To illustrate, if a server is operated with a 7-year retention\n   interval\
    \ policy and status was produced at time t1 then the value for\n   ArchiveCutoff\
    \ in the response would be (t1 - 7 years).\n"
- title: 4.4.5  CRL Entry Extensions
  contents:
  - "4.4.5  CRL Entry Extensions\n   All the extensions specified as CRL Entry Extensions\
    \ - in Section 5.3\n   of [RFC2459] - are also supported as singleExtensions.\n"
- title: 4.4.6  Service Locator
  contents:
  - "4.4.6  Service Locator\n   An OCSP server may be operated in a mode whereby the\
    \ server receives\n   a request and routes it to the OCSP server which is known\
    \ to be\n   authoritative for the identified certificate.  The serviceLocator\n\
    \   request extension is defined for this purpose.  This extension is\n   included\
    \ as one of the singleRequestExtensions in requests.\n   id-pkix-ocsp-service-locator\
    \ OBJECT IDENTIFIER ::= { id-pkix-ocsp 7 }\n   ServiceLocator ::= SEQUENCE {\n\
    \       issuer    Name,\n       locator   AuthorityInfoAccessSyntax OPTIONAL }\n\
    \   Values for these fields are obtained from the corresponding fields in\n  \
    \ the subject certificate.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   For this service to be effective, certificate\
    \ using systems must\n   connect to the certificate status service provider. In\
    \ the event such\n   a connection cannot be obtained, certificate-using systems\
    \ could\n   implement CRL processing logic as a fall-back position.\n   A denial\
    \ of service vulnerability is evident with respect to a flood\n   of queries.\
    \ The production of a cryptographic signature significantly\n   affects response\
    \ generation cycle time, thereby exacerbating the\n   situation. Unsigned error\
    \ responses open up the protocol to another\n   denial of service attack, where\
    \ the attacker sends false error\n   responses.\n   The use of precomputed responses\
    \ allows replay attacks in which an\n   old (good) response is replayed prior\
    \ to its expiration date but\n   after the certificate has been revoked. Deployments\
    \ of OCSP should\n   carefully evaluate the benefit of precomputed responses against\
    \ the\n   probability of a replay attack and the costs associated with its\n \
    \  successful execution.\n   Requests do not contain the responder they are directed\
    \ to. This\n   allows an attacker to replay a request to any number of OCSP\n\
    \   responders.\n   The reliance of HTTP caching in some deployment scenarios\
    \ may result\n   in unexpected results if intermediate servers are incorrectly\n\
    \   configured or are known to possess cache management faults.\n   Implementors\
    \ are advised to take the reliability of HTTP cache\n   mechanisms into account\
    \ when deploying OCSP over HTTP.\n"
- title: 6.  References
  contents:
  - "6.  References\n   [RFC2459] Housley, R., Ford, W., Polk, W. and D. Solo, \"\
    Internet\n             X.509 Public Key Infrastructure Certificate and CRL\n \
    \            Profile\", RFC 2459, January 1999.\n   [HTTP]    Fielding, R., Gettys,\
    \ J., Mogul, J., Frystyk, H. and T.\n             Berners-Lee, \"Hypertext Transfer\
    \ Protocol -- HTTP/1.1\", RFC\n             2068, January 1997.\n   [RFC2119]\
    \ Bradner, S., \"Key words for use in RFCs to Indicate\n             Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [URL]     Berners-Lee, T., Masinter,\
    \ L. and M. McCahill, \"Uniform\n             Resource Locators (URL)\", RFC 1738,\
    \ December 1994.\n   [X.690]   ITU-T Recommendation X.690 (1994) | ISO/IEC 8825-1:1995,\n\
    \             Information Technology - ASN.1 encoding rules:\n             Specification\
    \ of Basic Encoding Rules (BER), Canonical\n             Encoding Rules (CER)\
    \ and Distinguished Encoding Rules\n             (DER).\n"
- title: 7.  Authors' Addresses
  contents:
  - "7.  Authors' Addresses\n   Michael Myers\n   VeriSign, Inc.\n   1350 Charleston\
    \ Road\n   Mountain View, CA 94043\n   EMail: mmyers@verisign.com\n   Rich Ankney\n\
    \   CertCo, LLC\n   13506 King Charles Dr.\n   Chantilly, VA  20151\n   EMail:\
    \ rankney@erols.com\n   Ambarish Malpani\n   ValiCert, Inc.\n   1215 Terra Bella\
    \ Ave.\n   Mountain View, CA 94043\n   Phone: 650.567.5457\n   EMail: ambarish@valicert.com\n\
    \   Slava Galperin\n   My CFO, Inc.\n   1945 Charleston Road\n   Mountain View,\
    \ CA\n   EMail: galperin@mycfo.com\n   Carlisle Adams\n   Entrust Technologies\n\
    \   750 Heron Road, Suite E08\n   Ottawa, Ontario\n   K1V 1A7\n   Canada\n   EMail:\
    \ cadams@entrust.com\n"
- title: Appendix A.
  contents:
  - 'Appendix A.

    '
- title: A.1 OCSP over HTTP
  contents:
  - "A.1 OCSP over HTTP\n   This section describes the formatting that will be done\
    \ to the\n   request and response to support HTTP.\n"
- title: A.1.1 Request
  contents:
  - "A.1.1 Request\n   HTTP based OCSP requests can use either the GET or the POST\
    \ method to\n   submit their requests. To enable HTTP caching, small requests\
    \ (that\n   after encoding are less than 255 bytes), MAY be submitted using GET.\n\
    \   If HTTP caching is not important, or the request is greater than 255\n   bytes,\
    \ the request SHOULD be submitted using POST.  Where privacy is\n   a requirement,\
    \ OCSP transactions exchanged using HTTP MAY be\n   protected using either TLS/SSL\
    \ or some other lower layer protocol.\n   An OCSP request using the GET method\
    \ is constructed as follows:\n   GET {url}/{url-encoding of base-64 encoding of\
    \ the DER encoding of\n   the OCSPRequest}\n   where {url} may be derived from\
    \ the value of AuthorityInfoAccess or\n   other local configuration of the OCSP\
    \ client.\n   An OCSP request using the POST method is constructed as follows:\
    \ The\n   Content-Type header has the value \"application/ocsp-request\" while\n\
    \   the body of the message is the binary value of the DER encoding of\n   the\
    \ OCSPRequest.\n"
- title: A.1.2 Response
  contents:
  - "A.1.2 Response\n   An HTTP-based OCSP response is composed of the appropriate\
    \ HTTP\n   headers, followed by the binary value of the DER encoding of the\n\
    \   OCSPResponse. The Content-Type header has the value\n   \"application/ocsp-response\"\
    . The Content-Length header SHOULD specify\n   the length of the response. Other\
    \ HTTP headers MAY be present and MAY\n   be ignored if not understood by the\
    \ requestor.\n"
- title: Appendix B.  OCSP in ASN.1
  contents:
  - 'Appendix B.  OCSP in ASN.1

    '
- title: OCSP DEFINITIONS EXPLICIT TAGS::=
  contents:
  - 'OCSP DEFINITIONS EXPLICIT TAGS::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n      -- Directory Authentication Framework (X.509)\n             Certificate,\
    \ AlgorithmIdentifier, CRLReason\n             FROM AuthenticationFramework {\
    \ joint-iso-itu-t ds(5)\n                      module(1) authenticationFramework(7)\
    \ 3 }\n"
- title: -- PKIX Certificate Extensions
  contents:
  - "-- PKIX Certificate Extensions\n             AuthorityInfoAccessSyntax\n    \
    \      FROM PKIX1Implicit88 {iso(1) identified-organization(3)\n             \
    \     dod(6) internet(1) security(5) mechanisms(5) pkix(7)\n                 \
    \ id-mod(0) id-pkix1-implicit-88(2)}\n          Name, GeneralName, CertificateSerialNumber,\
    \ Extensions,\n           id-kp, id-ad-ocsp\n             FROM PKIX1Explicit88\
    \ {iso(1) identified-organization(3)\n                  dod(6) internet(1) security(5)\
    \ mechanisms(5) pkix(7)\n                  id-mod(0) id-pkix1-explicit-88(1)};\n"
- title: OCSPRequest     ::=     SEQUENCE {
  contents:
  - "OCSPRequest     ::=     SEQUENCE {\n    tbsRequest                  TBSRequest,\n\
    \    optionalSignature   [0]     EXPLICIT Signature OPTIONAL }\n"
- title: TBSRequest      ::=     SEQUENCE {
  contents:
  - "TBSRequest      ::=     SEQUENCE {\n    version             [0] EXPLICIT Version\
    \ DEFAULT v1,\n    requestorName       [1] EXPLICIT GeneralName OPTIONAL,\n  \
    \  requestList             SEQUENCE OF Request,\n    requestExtensions   [2] EXPLICIT\
    \ Extensions OPTIONAL }\n"
- title: Signature       ::=     SEQUENCE {
  contents:
  - "Signature       ::=     SEQUENCE {\n    signatureAlgorithm   AlgorithmIdentifier,\n\
    \    signature            BIT STRING,\n    certs                [0] EXPLICIT SEQUENCE\
    \ OF Certificate OPTIONAL }\n"
- title: Version  ::=  INTEGER  {  v1(0) }
  contents:
  - 'Version  ::=  INTEGER  {  v1(0) }

    '
- title: Request ::=     SEQUENCE {
  contents:
  - "Request ::=     SEQUENCE {\n    reqCert                    CertID,\n    singleRequestExtensions\
    \    [0] EXPLICIT Extensions OPTIONAL }\n"
- title: CertID ::= SEQUENCE {
  contents:
  - "CertID ::= SEQUENCE {\n    hashAlgorithm            AlgorithmIdentifier,\n  \
    \  issuerNameHash     OCTET STRING, -- Hash of Issuer's DN\n    issuerKeyHash\
    \      OCTET STRING, -- Hash of Issuers public key\n    serialNumber       CertificateSerialNumber\
    \ }\n"
- title: OCSPResponse ::= SEQUENCE {
  contents:
  - "OCSPResponse ::= SEQUENCE {\n   responseStatus         OCSPResponseStatus,\n\
    \   responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }\n"
- title: OCSPResponseStatus ::= ENUMERATED {
  contents:
  - "OCSPResponseStatus ::= ENUMERATED {\n    successful            (0),      --Response\
    \ has valid confirmations\n    malformedRequest      (1),      --Illegal confirmation\
    \ request\n    internalError         (2),      --Internal error in issuer\n  \
    \  tryLater              (3),      --Try again later\n                       \
    \             --(4) is not used\n    sigRequired           (5),      --Must sign\
    \ the request\n    unauthorized          (6)       --Request unauthorized\n"
- title: '}'
  contents:
  - '}

    '
- title: ResponseBytes ::=       SEQUENCE {
  contents:
  - "ResponseBytes ::=       SEQUENCE {\n    responseType   OBJECT IDENTIFIER,\n \
    \   response       OCTET STRING }\n"
- title: BasicOCSPResponse       ::= SEQUENCE {
  contents:
  - "BasicOCSPResponse       ::= SEQUENCE {\n   tbsResponseData      ResponseData,\n\
    \   signatureAlgorithm   AlgorithmIdentifier,\n   signature            BIT STRING,\n\
    \   certs                [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\n"
- title: ResponseData ::= SEQUENCE {
  contents:
  - "ResponseData ::= SEQUENCE {\n   version              [0] EXPLICIT Version DEFAULT\
    \ v1,\n   responderID              ResponderID,\n   producedAt               GeneralizedTime,\n\
    \   responses                SEQUENCE OF SingleResponse,\n   responseExtensions\
    \   [1] EXPLICIT Extensions OPTIONAL }\n"
- title: ResponderID ::= CHOICE {
  contents:
  - "ResponderID ::= CHOICE {\n   byName   [1] Name,\n   byKey    [2] KeyHash }\n"
- title: KeyHash ::= OCTET STRING --SHA-1 hash of responder's public key
  contents:
  - "KeyHash ::= OCTET STRING --SHA-1 hash of responder's public key\n           \
    \              --(excluding the tag and length fields)\n"
- title: SingleResponse ::= SEQUENCE {
  contents:
  - "SingleResponse ::= SEQUENCE {\n   certID                       CertID,\n   certStatus\
    \                   CertStatus,\n   thisUpdate                   GeneralizedTime,\n\
    \   nextUpdate           [0]     EXPLICIT GeneralizedTime OPTIONAL,\n   singleExtensions\
    \     [1]     EXPLICIT Extensions OPTIONAL }\n"
- title: CertStatus ::= CHOICE {
  contents:
  - "CertStatus ::= CHOICE {\n    good                [0]     IMPLICIT NULL,\n   \
    \ revoked             [1]     IMPLICIT RevokedInfo,\n    unknown             [2]\
    \     IMPLICIT UnknownInfo }\n"
- title: RevokedInfo ::= SEQUENCE {
  contents:
  - "RevokedInfo ::= SEQUENCE {\n    revocationTime              GeneralizedTime,\n\
    \    revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }\n"
- title: UnknownInfo ::= NULL -- this can be replaced with an enumeration
  contents:
  - 'UnknownInfo ::= NULL -- this can be replaced with an enumeration

    '
- title: ArchiveCutoff ::= GeneralizedTime
  contents:
  - 'ArchiveCutoff ::= GeneralizedTime

    '
- title: AcceptableResponses ::= SEQUENCE OF OBJECT IDENTIFIER
  contents:
  - 'AcceptableResponses ::= SEQUENCE OF OBJECT IDENTIFIER

    '
- title: ServiceLocator ::= SEQUENCE {
  contents:
  - "ServiceLocator ::= SEQUENCE {\n    issuer    Name,\n    locator   AuthorityInfoAccessSyntax\
    \ }\n"
- title: -- Object Identifiers
  contents:
  - '-- Object Identifiers

    '
- title: id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }
  contents:
  - 'id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }

    '
- title: id-pkix-ocsp                 OBJECT IDENTIFIER ::= { id-ad-ocsp }
  contents:
  - 'id-pkix-ocsp                 OBJECT IDENTIFIER ::= { id-ad-ocsp }

    '
- title: id-pkix-ocsp-basic           OBJECT IDENTIFIER ::= { id-pkix-ocsp 1 }
  contents:
  - 'id-pkix-ocsp-basic           OBJECT IDENTIFIER ::= { id-pkix-ocsp 1 }

    '
- title: id-pkix-ocsp-nonce           OBJECT IDENTIFIER ::= { id-pkix-ocsp 2 }
  contents:
  - 'id-pkix-ocsp-nonce           OBJECT IDENTIFIER ::= { id-pkix-ocsp 2 }

    '
- title: id-pkix-ocsp-crl             OBJECT IDENTIFIER ::= { id-pkix-ocsp 3 }
  contents:
  - 'id-pkix-ocsp-crl             OBJECT IDENTIFIER ::= { id-pkix-ocsp 3 }

    '
- title: id-pkix-ocsp-response        OBJECT IDENTIFIER ::= { id-pkix-ocsp 4 }
  contents:
  - 'id-pkix-ocsp-response        OBJECT IDENTIFIER ::= { id-pkix-ocsp 4 }

    '
- title: id-pkix-ocsp-nocheck         OBJECT IDENTIFIER ::= { id-pkix-ocsp 5 }
  contents:
  - 'id-pkix-ocsp-nocheck         OBJECT IDENTIFIER ::= { id-pkix-ocsp 5 }

    '
- title: id-pkix-ocsp-archive-cutoff  OBJECT IDENTIFIER ::= { id-pkix-ocsp 6 }
  contents:
  - 'id-pkix-ocsp-archive-cutoff  OBJECT IDENTIFIER ::= { id-pkix-ocsp 6 }

    '
- title: id-pkix-ocsp-service-locator OBJECT IDENTIFIER ::= { id-pkix-ocsp 7 }
  contents:
  - 'id-pkix-ocsp-service-locator OBJECT IDENTIFIER ::= { id-pkix-ocsp 7 }

    '
- title: END
  contents:
  - 'END

    '
- title: Appendix C. MIME registrations
  contents:
  - 'Appendix C. MIME registrations

    '
- title: C.1 application/ocsp-request
  contents:
  - "C.1 application/ocsp-request\n   To: ietf-types@iana.org\n   Subject: Registration\
    \ of MIME media type application/ocsp-request\n   MIME media type name: application\n\
    \   MIME subtype name: ocsp-request\n   Required parameters: None\n   Optional\
    \ parameters: None\n   Encoding considerations: binary\n   Security considerations:\
    \ Carries a  request for information. This\n   request may optionally be cryptographically\
    \ signed.\n   Interoperability considerations: None\n   Published specification:\
    \ IETF PKIX Working Group Draft on Online\n   Certificate Status Protocol - OCSP\n\
    \   Applications which use this media type: OCSP clients\n   Additional information:\n\
    \      Magic number(s): None\n      File extension(s): .ORQ\n      Macintosh File\
    \ Type Code(s): none\n   Person & email address to contact for further information:\n\
    \   Ambarish Malpani <ambarish@valicert.com>\n   Intended usage: COMMON\n   Author/Change\
    \ controller:\n   Ambarish Malpani <ambarish@valicert.com>\n"
- title: C.2 application/ocsp-response
  contents:
  - "C.2 application/ocsp-response\n   To: ietf-types@iana.org\n   Subject: Registration\
    \ of MIME media type application/ocsp-response\n   MIME media type name: application\n\
    \   MIME subtype name: ocsp-response\n   Required parameters: None\n   Optional\
    \ parameters: None\n   Encoding considerations: binary\n   Security considerations:\
    \ Carries a cryptographically signed response\n   Interoperability considerations:\
    \ None\n   Published specification: IETF PKIX Working Group Draft on Online\n\
    \   Certificate Status Protocol - OCSP\n   Applications which use this media type:\
    \ OCSP servers\n   Additional information:\n   Magic number(s): None\n   File\
    \ extension(s): .ORS\n   Macintosh File Type Code(s): none\n   Person & email\
    \ address to contact for further information:\n   Ambarish Malpani <ambarish@valicert.com>\n\
    \   Intended usage: COMMON\n   Author/Change controller:\n   Ambarish Malpani\
    \ <ambarish@valicert.com>\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
