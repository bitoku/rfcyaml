- title: __initial_text__
  contents:
  - '                 TIME-WAIT Assassination Hazards in TCP

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard.  Distribution of this memo is\n\
    \   unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This note describes some theoretically-possible failure modes for\
    \ TCP\n   connections and discusses possible remedies.  In particular, one very\n\
    \   simple fix is identified.\n"
- title: 1. INTRODUCTION
  contents:
  - "1. INTRODUCTION\n   Experiments to validate the recently-proposed TCP extensions\
    \ [RFC-\n   1323] have led to the discovery of a new class of TCP failures, which\n\
    \   have been dubbed the \"TIME-WAIT Assassination hazards\".  This note\n   describes\
    \ these hazards, gives examples, and discusses possible\n   prevention measures.\n\
    \   The failures in question all result from old duplicate segments.  In\n   brief,\
    \ the TCP mechanisms to protect against old duplicate segments\n   are [RFC-793]:\n\
    \   (1)  The 3-way handshake rejects old duplicate initial <SYN>\n        segments,\
    \ avoiding the hazard of replaying a connection.\n   (2)  Sequence numbers are\
    \ used to reject old duplicate data and ACK\n        segments from the current\
    \ incarnation of a given connection\n        (defined by a particular host and\
    \ port pair).  Sequence numbers\n        are also used to reject old duplicate\
    \ <SYN,ACK> segments.\n        For very high-speed connections, Jacobson's PAWS\
    \ (\"Protect\n        Against Wrapped Sequences\") mechanism [RFC-1323] effectively\n\
    \        extends the sequence numbers so wrap-around will not introduce a\n  \
    \      hazard within the same incarnation.\n   (3)  There are two mechanisms to\
    \ avoid hazards due to old duplicate\n        segments from an earlier instance\
    \ of the same connection; see\n        the Appendix to [RFC-1185] for details.\n\
    \        For \"short and slow\" connections [RFC-1185], the clock-driven\n   \
    \     ISN (initial sequence number) selection prevents the overlap of\n      \
    \  the sequence spaces of the old and new incarnations [RFC-793].\n        (The\
    \ algorithm used by Berkeley BSD TCP for stepping ISN\n        complicates the\
    \ analysis slightly but does not change the\n        conclusions.)\n   (4)  TIME-WAIT\
    \ state removes the hazard of old duplicates for \"fast\"\n        or \"long\"\
    \ connections, in which clock-driven ISN selection is\n        unable to prevent\
    \ overlap of the old and new sequence spaces.\n        The TIME-WAIT delay allows\
    \ all old duplicate segments time\n        enough to die in the Internet before\
    \ the connection is reopened.\n   (5)  After a system crash, the Quiet Time at\
    \ system startup allows\n        old duplicates to disappear before any connections\
    \ are opened.\n   Our new observation is that (4) is unreliable: TIME-WAIT state\
    \ can be\n   prematurely terminated (\"assassinated\") by an old duplicate data\
    \ or\n   ACK segment from the current or an earlier incarnation of the same\n\
    \   connection.  We refer to this as \"TIME-WAIT Assassination\" (TWA).\n   Figure\
    \ 1 shows an example of TIME-WAIT assassination.  Segments 1-5\n   are copied\
    \ exactly from Figure 13 of RFC-793, showing a normal close\n   handshake.  Packets\
    \ 5.1, 5.2, and 5.3 are an extension to this\n   sequence, illustrating TWA. \
    \  Here 5.1 is *any* old segment that is\n   unacceptable to TCP A.  It might\
    \ be unacceptable because of its\n   sequence number or because of an old PAWS\
    \ timestamp.  In either case,\n   TCP A sends an ACK segment 5.2 for its current\
    \ SND.NXT and RCV.NXT.\n   Since it has no state for this connection, TCP B reflects\
    \ this as RST\n   segment 5.3, which assassinates the TIME-WAIT state at A!\n\
    \       TCP A                                                TCP B\n   1.  ESTABLISHED\
    \                                          ESTABLISHED\n       (Close)\n   2.\
    \  FIN-WAIT-1  --> <SEQ=100><ACK=300><CTL=FIN,ACK>  --> CLOSE-WAIT\n   3.  FIN-WAIT-2\
    \  <-- <SEQ=300><ACK=101><CTL=ACK>      <-- CLOSE-WAIT\n                     \
    \                                       (Close)\n   4.  TIME-WAIT   <-- <SEQ=300><ACK=101><CTL=FIN,ACK>\
    \  <-- LAST-ACK\n   5.  TIME-WAIT   --> <SEQ=101><ACK=301><CTL=ACK>      --> CLOSED\n\
    \  - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n   5.1. TIME-WAIT\
    \   <--  <SEQ=255><ACK=33> ... old duplicate\n   5.2  TIME-WAIT   --> <SEQ=101><ACK=301><CTL=ACK>\
    \    -->  ????\n   5.3  CLOSED      <-- <SEQ=301><CTL=RST>             <--  ????\n\
    \      (prematurely)\n                         Figure 1.  TWA Example\n   Note\
    \ that TWA is not at all an unlikely event if there are any\n   duplicate segments\
    \ that may be delayed in the network.  Furthermore,\n   TWA cannot be prevented\
    \ by PAWS timestamps; the event may happen\n   within the same tick of the timestamp\
    \ clock.  TWA is a consequence of\n   TCP's half-open connection discovery mechanism\
    \ (see pp 33-34 of\n   [RFC-793]), which is designed to clean up after a system\
    \ crash.\n"
- title: 2. The TWA Hazards
  contents:
  - "2. The TWA Hazards\n   2.1 Introduction\n      If the connection is immediately\
    \ reopened after a TWA event, the\n      new incarnation will be exposed to old\
    \ duplicate segments (except\n      for the initial <SYN> segment, which is handled\
    \ by the 3-way\n      handshake).  There are three possible hazards that result:\n\
    \      H1.  Old duplicate data may be accepted erroneously.\n      H2.  The new\
    \ connection may be de-synchronized, with the two ends\n           in permanent\
    \ disagreement on the state.  Following the spec\n           of RFC-793, this\
    \ desynchronization results in an infinite ACK\n           loop.  (It might be\
    \ reasonable to change this aspect of RFC-\n           793 and kill the connection\
    \ instead.)\n           This hazard results from acknowledging something that\
    \ was not\n           sent.  This may result from an old duplicate ACK or as a\n\
    \           side-effect of hazard H1.\n      H3.  The new connection may die.\n\
    \           A duplicate segment (data or ACK) arriving in SYN-SENT state\n   \
    \        may kill the new connection after it has apparently opened\n        \
    \   successfully.\n      Each of these hazards requires that the seqence space\
    \ of the new\n      connection overlap to some extent with the sequence space\
    \ of the\n      previous incarnation.  As noted above, this is only possible for\n\
    \      \"fast\" or \"long\" connections.  Since these hazards all require the\n\
    \      coincidence of an old duplicate falling into a particular range of\n  \
    \    new sequence numbers, they are much less probable than TWA itself.\n    \
    \  TWA and the three hazards H1, H2, and H3 have been demonstrated on\n      a\
    \ stock Sun OS 4.1.1 TCP running in an simulated environment that\n      massively\
    \ duplicates segments.  This environment is far more\n      hazardous than most\
    \ real TCP's must cope with, and the conditions\n      were carefully tuned to\
    \ create the necessary conditions for the\n      failures.  However, these demonstrations\
    \ are in effect an\n      existence proof for the hazards.\n      We now present\
    \ example scenarios for each of these hazards.  Each\n      scenario is assumed\
    \ to follow immediately after a TWA event\n      terminated the previous incarnation\
    \ of the same connection.\n   2.2  HAZARD H1: Acceptance of erroneous old duplicate\
    \ data.\n      Without the protection of the TIME-WAIT delay, it is possible for\n\
    \      erroneous old duplicate data from the earlier incarnation to be\n     \
    \ accepted.  Figure 2 shows precisely how this might happen.\n           TCP A\
    \                                                 TCP B\n      1. ESTABL.  -->\
    \ <SEQ=400><ACK=101><DATA=100><CTL=ACK> --> ESTABL.\n      2. ESTABL.  <--   \
    \  <SEQ=101><ACK=500><CTL=ACK>     <--   ESTABL.\n      3.  (old dupl)...<SEQ=560><ACK=101><DATA=80><CTL=ACK>\
    \ --> ESTABL.\n      4. ESTABL.  <--     <SEQ=101><ACK=500><CTL=ACK>     <-- \
    \  ESTABL.\n      5. ESTABL.  --> <SEQ=500><ACK=101><DATA=100><CTL=ACK> --> ESTABL.\n\
    \      6.             ...  <SEQ=101><ACK=640><CTL=ACK>     <--   ESTABL.\n   \
    \  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n      7a.\
    \ ESTABL. --> <SEQ=600><ACK=101><DATA=100><CTL=ACK> --> ESTABL.\n      8a. ESTABL.\
    \  <--    <SEQ=101><ACK=640><CTL=ACK> ...\n      9a. ESTABL. --> <SEQ=700><ACK=101><DATA=100><CTL=ACK>\
    \ --> ESTABL.\n                    Figure 2: Accepting Erroneous Data\n      The\
    \ connection has already been successfully reopened after the\n      assumed TWA\
    \ event.  Segment 1 is a normal data segment and segment\n      2 is the corresponding\
    \ ACK segment.  Old duplicate data segment 3\n      from the earlier incarnation\
    \ happens to fall within the current\n      receive window, resulting in a duplicate\
    \ ACK segment #4.  The\n      erroneous data is queued and \"lurks\" in the TCP\
    \ reassembly queue\n      until data segment 5 overlaps it.  At that point, either\
    \ 80 or 40\n      bytes of erroneous data is delivered to the user B; the choice\n\
    \      depends upon the particulars of the reassembly algorithm, which\n     \
    \ may accept the first or the last duplicate data.\n      As a result, B sends\
    \ segment 6, an ACK for sequence = 640, which\n      is 40 beyond any data sent\
    \ by A.  Assume for the present that this\n      ACK arrives at A *after* A has\
    \ sent segment 7a, the next full data\n      segment.  In that case, the ACK segment\
    \ 8a acknowledges data that\n      has been sent, and the error goes undetected.\
    \  Another possible\n      continuation after segment 6 leads to hazard H3, shown\
    \ below.\n   2.3  HAZARD H2: De-synchronized Connection\n      This hazard may\
    \ result either as a side effect of H1 or directly\n      from an old duplicate\
    \ ACK that happens to be acceptable but\n      acknowledges something that has\
    \ not been sent.\n      Referring to Figure 2 above, suppose that the ACK generated\
    \ by the\n      old duplicate data segment arrived before the next data segment\n\
    \      had been sent.  The result is an infinite ACK loop, as shown by\n     \
    \ the following alternate continuation of Figure 2.\n     - - - - - - - - - -\
    \ - - - - - - - - - - - - - - - - - - - - - - -\n      7b. ESTABL.  <--    <SEQ=101><ACK=640><CTL=ACK>\
    \   ...\n     (ACK something not yet\n      sent => send ACK)\n      8b. ESTABL.\
    \  -->    <SEQ=600><ACK101><CTL=ACK>       -->   ESTABL.\n                   \
    \                                    (Below window =>\n                      \
    \                                      send ACK)\n      9b. ESTABL.  <--    <SEQ=101><ACK=640><CTL=ACK>\
    \     <--    ESTABL.\n                               (etc.!)\n               \
    \      Figure 3: Infinite ACK loop\n   2.4  HAZARD H3:  Connection Failure\n \
    \     An old duplicate ACK segment may lead to an apparent refusal of\n      TCP\
    \ A's next connection attempt, as illustrated in Figure 4.  Here\n      <W=...>\
    \ indicates the TCP window field SEG.WIND.*\n        TCP A                   \
    \                                  TCP B\n    1.  CLOSED                     \
    \                              LISTEN\n    2.  SYN-SENT    --> <SEQ=100><CTL=SYN>\
    \                 --> SYN-RCVD\n    3.         ... <SEQ=400><ACK=101><CTL=SYN,ACK><W=800>\
    \  <-- SYN-RCVD\n    4.  SYN-SENT    <-- <SEQ=300><ACK=123><CTL=ACK> ... (old\
    \ duplicate)\n    5.  SYN-SENT    --> <SEQ=123><CTL=RST>                   -->\
    \ LISTEN\n    6.  ESTABLISHED <-- <SEQ=400><ACK=101><CTL=SYN,ACK><W=900> ...\n\
    \    7.  ESTABLISHED --> <SEQ=101><ACK=401><CTL=ACK>          --> LISTEN\n   \
    \ 8.  CLOSED      <--  <SEQ=401><CTL=RST>                  <-- LISTEN\n      \
    \     Figure 4: Connection Failure from Old Duplicate\n      The key to the failure\
    \ in Figure 4 is that the RST segment 5 is\n      acceptable to TCP B in SYN-RECEIVED\
    \ state, because the sequence\n      space of the earlier connection that produced\
    \ this old duplicate\n      overlaps the new connection space.  Thus, <SEQ=123>\
    \ in segment #5\n      falls within TCP B's receive window [101,900).  In experiments,\n\
    \      this failure mode was very easy to demonstrate.  (Kurt Matthys has\n  \
    \    pointed out that this scenario is time-dependent:  if TCP A should\n    \
    \  timeout and retransmit the initial SYN after segment 5 arrives and\n      before\
    \ segment 6, then the open will complete successfully.)\n"
- title: 3. Fixes for TWA Hazards
  contents:
  - "3. Fixes for TWA Hazards\n   We discuss three possible fixes to TCP to avoid\
    \ these hazards.\n   (F1) Ignore RST segments in TIME-WAIT state.\n        If\
    \ the 2 minute MSL is enforced, this fix avoids all three\n        hazards.\n\
    \        This is the simplest fix.  One could also argue that it is\n        formally\
    \ the correct thing to do; since allowing time for old\n        duplicate segments\
    \ to die is one of TIME-WAIT state's functions,\n        the state should not\
    \ be truncated by a RST segment.\n   (F2) Use PAWS to avoid the hazards.\n   \
    \     Suppose that the TCP ignores RST segments in TIME-WAIT state,\n        but\
    \ only long enough to guarantee that the timestamp clocks on\n        both ends\
    \ have ticked.  Then the PAWS mechanism [RFC-1323] will\n        prevent old duplicate\
    \ data segments from interfering with the\n        new incarnation, eliminating\
    \ hazard H1.  For reasons explained\n        below, however, it may not eliminate\
    \ all old duplicate ACK\n        segments, so hazards H2 and H3 will still exist.\n\
    \        In the language of the TCP Extensions RFC [RFC-1323]:\n           When\
    \ processing a RST bit in TIME-WAIT state:\n               If (Snd.TS.OK is off)\
    \ or (Time.in.TW.state() >= W)\n                   then enter the CLOSED state,\
    \ delete the TCB,\n                   drop the RST segment, and return.\n    \
    \           else simply drop the RST segment and return.\n        Here \"Time.in.TW.state()\"\
    \ is a function returning the elapsed\n        time since TIME-WAIT state was\
    \ entered, and W is a constant that\n        is at least twice the longest possible\
    \ period for timestamp\n        clocks, i.e., W = 2 secs [RFC-1323].\n       \
    \ This assumes that the timestamp clock at each end continues to\n        advance\
    \ at a constant rate whether or not there are any open\n        connections. \
    \ We do not have to consider what happens across a\n        system crash (e.g.,\
    \ the timestamp clock may jump randomly),\n        because of the assumed Quiet\
    \ Time at system startup.\n        Once this change is in place, the initial timestamps\
    \ that occur\n        on the SYN and {SYN,ACK} segments reopening the connection\
    \ will\n        be larger than any timestamp on a segment from earlier\n     \
    \   incarnations.  As a result, the PAWS mechanism operating in the\n        new\
    \ connection incarnation will avoid the H1 hazard, ie.\n        acceptance of\
    \ old duplicate data.\n        The effectiveness of fix (F2) in preventing acceptance\
    \ of old\n        duplicate data segments, i.e., hazard H1, has been demonstrated\n\
    \        in the Sun OS TCP mentioned earlier.  Unfortunately, these tests\n  \
    \      revealed a somewhat surprising fact:  old duplicate ACKs from\n       \
    \ the earlier incarnation can still slip past PAWS, so that (F2)\n        will\
    \ not prevent failures H2 or H3.  What happens is that TIME-\n        WAIT state\
    \ effectively regenerates the timestamp of an old\n        duplicate ACK.  That\
    \ is, when an old duplicate arrives in TIME-\n        WAIT state, an extended\
    \ TCP will send out its own ACK with a\n        timestamp option containing its\
    \ CURRENT timestamp clock value.\n        If this happens immediately before the\
    \ TWA mechanism kills\n        TIME-WAIT state, the result will be a \"new old\
    \ duplicate\"\n        segment with a current timestamp that may pass the PAWS\
    \ test on\n        the reopened connection.\n        Whether H2 and H3 are critical\
    \ depends upon how often they\n        happen and what assumptions the applications\
    \ make about TCP\n        semantics.  In the case of the H3 hazard, merely trying\
    \ the open\n        again is likely to succeed.  Furthermore, many production\
    \ TCPs\n        have (despite the advice of the researchers who developed TCP)\n\
    \        incorporated a \"keep-alive\" mechanism, which may kill\n        connections\
    \ unnecessarily.  The frequency of occurrence of H2\n        and H3 may well be\
    \ much lower than keep-alive failures or\n        transient internet routing failures.\n\
    \   (F3) Use 64-bit Sequence Numbers\n        O'Malley and Peterson [RFC-1264]\
    \ have suggested expansion of the\n        TCP sequence space to 64 bits as an\
    \ alternative to PAWS for\n        avoiding the hazard of wrapped sequence numbers\
    \ within the same\n        incarnation.  It is worthwhile to inquire whether 64-bit\n\
    \        sequence numbers could be used to avoid the TWA hazards as well.\n  \
    \      Using 64 bit sequence numbers would not prevent TWA - the early\n     \
    \   termination of TIME-WAIT state.  However, it appears that a\n        combination\
    \ of 64-bit sequence numbers with an appropriate\n        modification of the\
    \ TCP parameters could defeat all of the TWA\n        hazards H1, H2, and H3.\
    \  The basis for this is explained in an\n        appendix to this memo.  In summary,\
    \ it could be arranged that\n        the same sequence space would be reused only\
    \ after a very long\n        period of time, so every connection would be \"slow\"\
    \ and \"short\".\n"
- title: 4.  Conclusions
  contents:
  - "4.  Conclusions\n   Of the three fixes described in the previous section, fix\
    \ (F1),\n   ignoring RST segments in TIME-WAIT state, seems like the best short-\n\
    \   term solution.  It is certainly the simplest.  It would be very\n   desirable\
    \ to do an extended test of this change in a production\n   environment, to ensure\
    \ there is no unexpected bad effect of ignoring\n   RSTs in TIME-WAIT state.\n\
    \   Fix (F2) is more complex and is at best a partial fix.  (F3), using\n   64-bit\
    \ sequence numbers, would be a significant change in the\n   protocol, and its\
    \ implications need to be thoroughly understood.\n   (F3) may turn out to be a\
    \ long-term fix for the hazards discussed in\n   this note.\n"
- title: 'APPENDIX: Using 64-bit Sequence Numbers'
  contents:
  - "APPENDIX: Using 64-bit Sequence Numbers\n   This appendix provides a justification\
    \ of our statement that 64-bit\n   sequence numbers could prevent the TWA hazards.\n\
    \   The theoretical ISN calculation used by TCP is:\n       ISN = (R*T) mod 2**n.\n\
    \   where T is the real time in seconds (from an arbitrary origin, fixed\n   when\
    \ the system is started), R is a constant, currently 250 KBps, and\n   n = 32\
    \ is the size of the sequence number field.\n   The limitations of current TCP\
    \ are established by n, R, and the\n   maximum segment lifetime MSL = 4 minutes.\
    \  The shortest time Twrap to\n   wrap the sequence space is:\n       Twrap =\
    \ (2**n)/r\n   where r is the maximum transfer rate.  To avoid old duplicate\n\
    \   segments in the same connection, we require that Twrap > MSL (in\n   practice,\
    \ we need Twrap >> MSL).\n   The clock-driven ISN numbers wrap in time TwrapISN:\n\
    \       TwrapISN = (2**n)/R\n   For current TCP, TwrapISN = 4.55 hours.\n   The\
    \ cases for old duplicates from previous connections can be divided\n   into four\
    \ regions along two dimensions:\n   *    Slow vs. fast connections, corresponding\
    \ to r < R or r >= R.\n   *    Short vs. long connections, corresponding to duration\
    \ E <\n        TwrapISN or E >= TwrapISN.\n   On short slow connections, the clock-driven\
    \ ISN selection rejects old\n   duplicates.  For all other cases, the TIME-WAIT\
    \ delay of 2*MSL is\n   required so old duplicates can expire before they infect\
    \ a new\n   incarnation.  This is discussed in detail in the Appendix to [RFC-\n\
    \   1185].\n   With this background, we can consider the effect of increasing\
    \ n to\n   64.  We would like to increase both R and TwrapISN far enough that\n\
    \   all connections will be short and slow, i.e., so that the clock-\n   driven\
    \ ISN selection will reject all old duplicates.  Put another\n   way, we want\
    \ to every connection to have a unique chunk of the\n   seqence space.  For this\
    \ purpose, we need R larger than the maximum\n   foreseeable rate r, and TwrapISN\
    \ greater than the longest foreseeable\n   connection duration E.\n   In fact,\
    \ this appears feasible with n = 64 bits.  Suppose that we use\n   R = 2**33 Bps;\
    \ this is approximately 8 gigabytes per second, a\n   reasonable upper limit on\
    \ throughput of a single TCP connection.\n   Then TwrapISN = 68 years, a reasonable\
    \ upper limit on TCP connection\n   duration.  Note that this particular choice\
    \ of R corresponds to\n   incrementing the ISN by 2**32 every 0.5 seconds, as\
    \ would happen with\n   the Berkeley BSD implementation of TCP.  Then the low-order\
    \ 32 bits\n   of a 64-bit ISN would always be exactly zero.\n   REFERENCES\n \
    \     [RFC-793]  Postel, J., \"Transmission Control Protocol\", RFC-793,\n   \
    \   USC/Information Sciences Institute, September 1981.\n      [RFC-1185]  Jacobson,\
    \ V., Braden, R., and Zhang, L., \"TCP\n      Extension for High-Speed Paths\"\
    , RFC-1185, Lawrence Berkeley Labs,\n      USC/Information Sciences Institute,\
    \ and Xerox Palo Alto Research\n      Center, October 1990.\n      [RFC-1263]\
    \  O'Malley, S. and L. Peterson, \"TCP Extensions\n      Considered Harmful\"\
    , RFC-1263, University of Arizona, October\n      1991.\n      [RFC-1323]  Jacobson,\
    \ V., Braden, R. and D. Borman \"TCP Extensions\n      for High Performance\"\
    , RFC-1323, Lawrence Berkeley Labs,\n      USC/Information Sciences Institute,\
    \ and Cray Research, May 1992.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 'Author''s Address:'
  contents:
  - "Author's Address:\n   Bob Braden\n   University of Southern California\n   Information\
    \ Sciences Institute\n   4676 Admiralty Way\n   Marina del Rey, CA 90292\n   Phone:\
    \ (213) 822-1511\n   EMail: Braden@ISI.EDU\n"
