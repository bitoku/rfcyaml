I. Introduction We have been engaged in two activities since the network meeting of March 17, 1970 and, as promised, are reporting our results.
First, we have considered the various modifications suggested from all quarters and have formed preferences about each of these.
In Section II we give our preferences on each issue, together with our reasoning.
Second, we have tried to formalize the protocol and algorithms for the NCP, we attempted to do this with very little specification of a particular implementation.
Our attempts to date have been seriously incomplete but have led to a better understanding.
We include here, only a brief sketch of the structure of the NCP.
Section III gives our assumptions about the environment of the NCP and in Section IV the components of the NCP are described.
Environment We assume that the typical host will have a time sharing operating system in which the cpu is shared by processes.
We envision that each process is tagged with a  user number .
There may be more than one process with the same user number, and if so, they should all be cooperating with respect to using the network.
We envision that each process contains a set of  ports  which are unique to the process.
These ports are used for input to or output from the process, from or to files, devices or other processes.
We also envision that each process has an event channel over which it can receive very short messages (several bits).
We will use this mechanism to notify a process that some action external to the process has occurred.
To engage in network activity, a process  attaches
a  local socket  to one of its ports.
Sockets are identified by user number, host and AEN, and a socket is local to a process if their user numbers match and they are in the same host.
A process need only specify an AEN when it is referring to a local socket.
Each port has a status which is modified by system calls and by concurrent events outside the process.
Whenever the status of a port is changed, the process is sent an event over its event channel which specifies which port's status has changed.
The process may then look at a port's status.
These assumptions are used descriptive material which follows.
However, these assumptions are not imposed by the network protocol and the implementation suggested by section IV is in no way binding.
We wish to make very clear that this material is offered only to provide clues as to what the implementation difficulties might be and not to impose any particular discipline.
For example, we treat <RFC>'s which arrive for unattached local sockets as valid and queue them.
If desired, an NCP may reject them, as Meyer suggests, or it might hold them for awhile and reject them if they're not soon satisfied.
The offered protocol supports all these options.
Another local option is the one mentioned before of attaching multiple ports to a socket.
We have shown one one correspondence but this may be ignored.
Similarly, the system calls are merely suggestive.
These are typical system calls which a user process might execute.
We show these only for completeness; each site will undoubtedly implement whatever equivalent set is convenient.
We use the notation Syscall ( arg , arg ...
are the parameters supplied with the call, and 1 val etc.
are any values returned by the system call.
AEN    Specifies a local socket.
The user number of this process and host number of this host are implicit.
Bsiz   Specified the amount of storage in bits the user wants to devote to buffering messages.
Init attempts to attach the local socket specified by AEN to the port P and to initiate a connection with socket FS.
Possible returned values of C are C
The Init was legal and the socket FS is being contacted.
When the connection is established or when FS refuses, the process will receive an event.
The local socket was in use by a port on this or some other process with the same user number.
The AEN and FS were either both send or both receive sockets.
The host designated within FS isn't known.
C   bufbig  Bsiz is too large.
AEN   Specifies a local socket.
Bsiz  Specified a buffer size.
Codes for C are C
The local socket specifies by AEN is attached to P.
If there is a waiting call, it is processed; otherwise no action is taken.
When a call comes in, a connection will be established and the process notified via an event.
Close (P) P Specifies a port of the process.
Any activity is stopped, and the port becomes free for other use.
The text to be transmitted.
L1    Specifies the length of the text.
Transmission between the processes on either side of the port takes place.
Codes for C are C
The status of port P is returned as C. IV.
We view the NCP as having five component programs, three associative tables, some queues and buffers, and a link assignment table.
Each site will of course, vary this design to meet its needs, so our design is only illustrative.
This is an interrupt driven input routine.
It initiates Imp  to Host transmission into a resident buffer and wakes up the Input Interpreter when transmission is complete.
This is an interrupt driven output routine.
It initiates Host to Imp transmission out of a resident buffer and wakes up the Output Scheduler when transmission is complete.
This program decides whether the input is a regular message intended for a user, a control message, an Imp to Host message, or an error.
For each class of message, this program takes the appropriate action.
The Output Scheduler Three classes of message are sent to the Imp (a) Host to Imp messages (b) Control messages (c)
Regular messages We believe that a priority should be imposed among these classes.
The priority we suggest is the ordering above.
The Output Scheduler selects the highest priority message and gives it to the Output Handler.
This program interprets requests from the user.
The two interesting components are the Input Interpreter and the System Call Interpreter.
These are similar in that the Input Interpreter services foreign requests and the System Call Interpreter services local requests.
We envision that the bulk of the NCP's data base is in three associative tables.
, we mean that there is some lookup routine which is presented with a key and either returns successfully with a pointer to the corresponding entry, or fails if no entry corresponds to the key.
The Rendezvous Table "Requests for connection" and other attributes of a connection are held in this table.
This table is accessed by local socket, but other tables have pointers to existing entries.
The components of an entry are: (a) local socket   (key) (b)
foreign socket (c) link (d) queue of callers (e)
text queue (f) connection state (g) flow state (h) pointer to attached port
An entry is created when a user executes either an Init or a Listen system call or when a <RFC> is received.
Some fields are unused until the connection is established, e.g. the foreign socket is not known until a <RFC> arrives if the user did a Listen.
The Input Interpreter uses the foreign host and link as a key to get a pointer to the entry in the rendezvous table for the connection using the incoming link.
In order to interpret RFNM's, the Input Interpreter needs a table in the same form as the Input Link Table but using outgoing links.
This is a very simple structure which keeps track of which links are in use for each host.
One word per host probably suffices.
The following diagram is our conception of the Network Control Program.
Boxes represent tables and Buffers, boxes with angled corners and
a double bottom represent Queues, and jagged boxes represent component programs, the arrows represent data paths.
The abbreviated names have the following meanings.
OLT   Output Link Table LAT
Link Assignment Table RT    Rendezvous Table HIQ   Host to Imp Queue
Output Regular Message Queue IHBuf Buffer filled by the Input Handler from the IMP and emptied by the Input Interpreter OHBuf Buffer of outgoing messages filled from the Queues by the Output Scheduler and emptied by the Output Handler.
[ This RFC was put into machine readable form for entry ]
[ into the online RFC archives by Donald and Jill Eastlake 1999 ] [Editor's note: The original hand drawn diagram represented Queues by cylinders and component programs by "squishy ameoba like things".]
