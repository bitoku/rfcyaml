- title: __initial_text__
  contents:
  - '                            XML Media Types

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document standardizes five new media types -- text/xml,\n \
    \  application/xml, text/xml-external-parsed-entity, application/xml-\n   external-parsed-entity,\
    \ and application/xml-dtd -- for use in\n   exchanging network entities that are\
    \ related to the Extensible Markup\n   Language (XML).  This document also standardizes\
    \ a convention (using\n   the suffix '+xml') for naming media types outside of\
    \ these five types\n   when those media types represent XML MIME (Multipurpose\
    \ Internet Mail\n   Extensions) entities.  XML MIME entities are currently exchanged\
    \ via\n   the HyperText Transfer Protocol on the World Wide Web, are an\n   integral\
    \ part of the WebDAV protocol for remote web authoring, and\n   are expected to\
    \ have utility in many domains.\n   Major differences from RFC 2376 are (1) the\
    \ addition of text/xml-\n   external-parsed-entity, application/xml-external-parsed-entity,\
    \ and\n   application/xml-dtd, (2) the '+xml' suffix convention (which also\n\
    \   updates the RFC 2048 registration process), and (3) the discussion of\n  \
    \ \"utf-16le\" and \"utf-16be\".\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.   Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.   Notational Conventions . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.   XML Media Types  . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   3.1  Text/xml Registration  . . . . . . . . . . . . . . . . .\
    \ . .   7\n   3.2  Application/xml Registration . . . . . . . . . . . . . . .\
    \ .   9\n   3.3  Text/xml-external-parsed-entity Registration . . . . . . . .\
    \  11\n   3.4  Application/xml-external-parsed-entity Registration  . . . .  12\n\
    \   3.5  Application/xml-dtd Registration . . . . . . . . . . . . . .  13\n  \
    \ 3.6  Summary  . . . . . . . . . . . . . . . . . . . . . . . . . .  14\n   4.\
    \   The Byte Order Mark (BOM) and Conversions to/from the UTF-16\n        Charset\
    \  . . . . . . . . . . . . . . . . . . . . . . . . . .  15\n   5.   Fragment Identifiers\
    \ . . . . . . . . . . . . . . . . . . . .  15\n   6.   The Base URI . . . . .\
    \ . . . . . . . . . . . . . . . . . . .  15\n   7.   A Naming Convention for XML-Based\
    \ Media Types  . . . . . . .  16\n   7.1  Referencing  . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  18\n   8.   Examples . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  18\n   8.1  Text/xml with UTF-8 Charset  . . . . . .\
    \ . . . . . . . . . .  19\n   8.2  Text/xml with UTF-16 Charset . . . . . . .\
    \ . . . . . . . . .  19\n   8.3  Text/xml with UTF-16BE Charset . . . . . . .\
    \ . . . . . . . .  19\n   8.4  Text/xml with ISO-2022-KR Charset  . . . . . .\
    \ . . . . . . .  20\n   8.5  Text/xml with Omitted Charset  . . . . . . . . .\
    \ . . . . . .  20\n   8.6  Application/xml with UTF-16 Charset  . . . . . . .\
    \ . . . . .  20\n   8.7  Application/xml with UTF-16BE Charset  . . . . . . .\
    \ . . . .  21\n   8.8  Application/xml with ISO-2022-KR Charset . . . . . . .\
    \ . . .  21\n   8.9  Application/xml with Omitted Charset and UTF-16 XML MIME\n\
    \        Entity . . . . . . . . . . . . . . . . . . . . . . . . . . .  21\n  \
    \ 8.10 Application/xml with Omitted Charset and UTF-8 Entity  . . .  22\n   8.11\
    \ Application/xml with Omitted Charset and Internal Encoding\n        Declaration\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  22\n   8.12 Text/xml-external-parsed-entity\
    \ with UTF-8 Charset . . . . .  22\n   8.13 Application/xml-external-parsed-entity\
    \ with UTF-16 Charset .  23\n   8.14 Application/xml-external-parsed-entity with\
    \ UTF-16BE Charset  23\n   8.15 Application/xml-dtd  . . . . . . . . . . . . .\
    \ . . . . . . .  23\n   8.16 Application/mathml+xml . . . . . . . . . . . . .\
    \ . . . . . .  24\n   8.17 Application/xslt+xml . . . . . . . . . . . . . . .\
    \ . . . . .  24\n   8.18 Application/rdf+xml  . . . . . . . . . . . . . . . .\
    \ . . . .  24\n   8.19 Image/svg+xml  . . . . . . . . . . . . . . . . . . . .\
    \ . . .  24\n   8.20 INCONSISTENT EXAMPLE: Text/xml with UTF-8 Charset  . . .\
    \ . .  25\n   9.   IANA Considerations  . . . . . . . . . . . . . . . . . . .\
    \ .  25\n   10.  Security Considerations  . . . . . . . . . . . . . . . . . .\
    \  25\n        References . . . . . . . . . . . . . . . . . . . . . . . . .  27\n\
    \        Authors' Addresses . . . . . . . . . . . . . . . . . . . . .  31\n  \
    \ A.   Why Use the '+xml' Suffix for XML-Based MIME Types?  . . . .  32\n   A.1\
    \  Why not just use text/xml or application/xml and let the XML\n        processor\
    \ dispatch to the correct application based on the\n        referenced DTD?  .\
    \ . . . . . . . . . . . . . . . . . . . . .  32\n   A.2  Why not create a new\
    \ subtree (e.g., image/xml.svg) to\n        represent XML MIME types?  . . . .\
    \ . . . . . . . . . . . . .  32\n   A.3  Why not create a new top-level MIME type\
    \ for XML-based media\n        types? . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  32\n   A.4  Why not just have the MIME processor 'sniff' the\
    \ content to\n        determine whether it is XML? . . . . . . . . . . . . . .\
    \ . .  33\n   A.5  Why not use a MIME parameter to specify that a media type\n\
    \        uses XML syntax? . . . . . . . . . . . . . . . . . . . . . .  33\n  \
    \ A.6  How about labeling with parameters in the other direction\n        (e.g.,\
    \ application/xml; Content-Feature=iotp)? . . . . . . .  34\n   A.7  How about\
    \ a new superclass MIME parameter that is defined to\n        apply to all MIME\
    \ types (e.g., Content-Type:\n        application/iotp; $superclass=xml)?  . .\
    \ . . . . . . . . . .  34\n   A.8  What about adding a new parameter to the Content-Disposition\n\
    \        header or creating a new Content-Structure header to\n        indicate\
    \ XML syntax? . . . . . . . . . . . . . . . . . . . .  35\n   A.9  How about a\
    \ new Alternative-Content-Type header? . . . . . .  35\n   A.10 How about using\
    \ a conneg tag instead (e.g., accept-features:\n        (syntax=xml))? . . . .\
    \ . . . . . . . . . . . . . . . . . . .  35\n   A.11 How about a third-level content-type,\
    \ such as text/xml/rdf?   35\n   A.12 Why use the plus ('+') character for the\
    \ suffix '+xml'?  . .  36\n   A.13 What is the semantic difference between application/foo\
    \ and\n        application/foo+xml? . . . . . . . . . . . . . . . . . . . .  36\n\
    \   A.14 What happens when an even better markup language (e.g.,\n        EBML)\
    \ is defined, or a new category of data? . . . . . . . .  36\n   A.15 Why must\
    \ I use the '+xml' suffix for my new XML-based media\n        type?  . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . .  37\n   B.   Changes from RFC 2376\
    \  . . . . . . . . . . . . . . . . . . .  37\n   C.   Acknowledgements . . . .\
    \ . . . . . . . . . . . . . . . . . .  38\n        Full Copyright Statement .\
    \ . . . . . . . . . . . . . . . . .  39\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The World Wide Web Consortium has issued Extensible Markup\
    \ Language\n   (XML) 1.0 (Second Edition)[XML].  To enable the exchange of XML\n\
    \   network entities, this document standardizes five new media types --\n   text/xml,\
    \ application/xml, text/xml-external-parsed-entity,\n   application/xml-external-parsed-entity,\
    \ and application/xml-dtd -- as\n   well as a naming convention for identifying\
    \ XML-based MIME media\n   types.\n   XML entities are currently exchanged on\
    \ the World Wide Web, and XML\n   is also used for property values and parameter\
    \ marshalling by the\n   WebDAV[RFC2518] protocol for remote web authoring.  Thus,\
    \ there is a\n   need for a media type to properly label the exchange of XML network\n\
    \   entities.\n   Although XML is a subset of the Standard Generalized Markup\
    \ Language\n   (SGML) ISO 8879[SGML], which has been assigned the media types\n\
    \   text/sgml and application/sgml, there are several reasons why use of\n   text/sgml\
    \ or application/sgml to label XML is inappropriate.  First,\n   there exist many\
    \ applications that can process XML, but that cannot\n   process SGML, due to\
    \ SGML's larger feature set.  Second, SGML\n   applications cannot always process\
    \ XML entities, because XML uses\n   features of recent technical corrigenda to\
    \ SGML.  Third, the\n   definition of text/sgml and application/sgml in [RFC1874]\
    \ includes\n   parameters for SGML bit combination transformation format (SGML-\n\
    \   bctf), and SGML boot attribute (SGML-boot).  Since XML does not use\n   these\
    \ parameters, it would be ambiguous if such parameters were given\n   for an XML\
    \ MIME entity.  For these reasons, the best approach for\n   labeling XML network\
    \ entities is to provide new media types for XML.\n   Since XML is an integral\
    \ part of the WebDAV Distributed Authoring\n   Protocol, and since World Wide\
    \ Web Consortium Recommendations have\n   conventionally been assigned IETF tree\
    \ media types, and since similar\n   media types (HTML, SGML) have been assigned\
    \ IETF tree media types,\n   the XML media types also belong in the IETF media\
    \ types tree.\n   Similarly, XML will be used as a foundation for other media\
    \ types,\n   including types in every branch of the IETF media types tree.  To\n\
    \   facilitate the processing of such types, media types based on XML,\n   but\
    \ that are not identified using text/xml or application/xml, SHOULD\n   be named\
    \ using a suffix of '+xml' as described in Section 7.  This\n   will allow XML-based\
    \ tools -- browsers, editors, search engines, and\n   other processors -- to work\
    \ with all XML-based media types.\n"
- title: 2. Notational Conventions
  contents:
  - "2. Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   As defined in [RFC2781], the three charsets \"utf-16\", \"\
    utf-16le\", and\n   \"utf-16be\" are used to label UTF-16 text.  In this document,\
    \ \"the\n   UTF-16 family\" refers to those three charsets.  By contrast, the\n\
    \   phrases \"utf-16\" or UTF-16 in this document refer specifically to the\n\
    \   single charset \"utf-16\".\n   As sometimes happens between two communities,\
    \ both MIME and XML have\n   defined the term entity, with different meanings.\
    \  Section 2.4 of\n   [RFC2045] says:\n      \"The term 'entity' refers specifically\
    \ to the MIME-defined header\n      fields and contents of either a message or\
    \ one of the parts in the\n      body of a multipart entity.\"\n   Section 4 of\
    \ [XML] says:\n      \"An XML document may consist of one or many storage units\"\
    \ called\n      entities that \"have content\" and are normally \"identified by\n\
    \      name\".\n   In this document, \"XML MIME entity\" is defined as the latter\
    \ (an XML\n   entity) encapsulated in the former (a MIME entity).\n"
- title: 3. XML Media Types
  contents:
  - "3. XML Media Types\n   This document standardizes five media types related to\
    \ XML MIME\n   entities: text/xml, application/xml, text/xml-external-parsed-entity,\n\
    \   application/xml-external-parsed-entity, and application/xml-dtd.\n   Registration\
    \ information for these media types is described in the\n   sections below.\n\
    \   Within the XML specification, XML MIME entities can be classified\n   into\
    \ four types.  In the XML terminology, they are called \"document\n   entities\"\
    , \"external DTD subsets\", \"external parsed entities\", and\n   \"external parameter\
    \ entities\".  The media types text/xml and\n   application/xml MAY be used for\
    \ \"document entities\", while text/xml-\n   external-parsed-entity or application/xml-external-parsed-entity\n\
    \   SHOULD be used for \"external parsed entities\".  The media type\n   application/xml-dtd\
    \ SHOULD be used for \"external DTD subsets\" or\n   \"external parameter entities\"\
    .  application/xml and text/xml MUST NOT\n   be used for \"external parameter\
    \ entities\" or \"external DTD subsets\",\n   and MUST NOT be used for \"external\
    \ parsed entities\" unless they are\n   also well-formed \"document entities\"\
    \ and are referenced as such.\n   Note that [RFC2376] (which this document obsoletes)\
    \ allowed such\n   usage, although in practice it is likely to have been rare.\n\
    \   Neither external DTD subsets nor external parameter entities parse as\n  \
    \ XML documents, and while some XML document entities may be used as\n   external\
    \ parsed entities and vice versa, there are many cases where\n   the two are not\
    \ interchangeable.  XML also has unparsed entities,\n   internal parsed entities,\
    \ and internal parameter entities, but they\n   are not XML MIME entities.\n \
    \  If an XML document -- that is, the unprocessed, source XML document\n   --\
    \ is readable by casual users, text/xml is preferable to\n   application/xml.\
    \  MIME user agents (and web user agents) that do not\n   have explicit support\
    \ for text/xml will treat it as text/plain, for\n   example, by displaying the\
    \ XML MIME entity as plain text.\n   Application/xml is preferable when the XML\
    \ MIME entity is unreadable\n   by casual users.  Similarly, text/xml-external-parsed-entity\
    \ is\n   preferable when an external parsed entity is readable by casual\n   users,\
    \ but application/xml-external-parsed-entity is preferable when\n   a plain text\
    \ display is inappropriate.\n      NOTE: Users are in general not used to text\
    \ containing tags such\n      as <price>, and often find such tags quite disorienting\
    \ or\n      annoying.  If one is not sure, the conservative principle would\n\
    \      suggest using application/* instead of text/* so as not to put\n      information\
    \ in front of users that they will quite likely not\n      understand.\n   The\
    \ top-level media type \"text\" has some restrictions on MIME\n   entities and\
    \ they are described in [RFC2045] and [RFC2046].  In\n   particular, the UTF-16\
    \ family, UCS-4, and UTF-32 are not allowed\n   (except over HTTP[RFC2616], which\
    \ uses a MIME-like mechanism).  Thus,\n   if an XML document or external parsed\
    \ entity is encoded in such\n   character encoding schemes, it cannot be labeled\
    \ as text/xml or\n   text/xml-external-parsed-entity (except for HTTP).\n   Text/xml\
    \ and application/xml behave differently when the charset\n   parameter is not\
    \ explicitly specified.  If the default charset (i.e.,\n   US-ASCII) for text/xml\
    \ is inconvenient for some reason (e.g., bad web\n   servers), application/xml\
    \ provides an alternative (see \"Optional\n   parameters\" of application/xml\
    \ registration in Section 3.2).  The\n   same rules apply to the distinction between\
    \ text/xml-external-\n   parsed-entity and application/xml-external-parsed-entity.\n\
    \   XML provides a general framework for defining sequences of structured\n  \
    \ data.  In some cases, it may be desirable to define new media types\n   that\
    \ use XML but define a specific application of XML, perhaps due to\n   domain-specific\
    \ security considerations or runtime information.\n   Furthermore, such media\
    \ types may allow UTF-8 or UTF-16 only and\n   prohibit other charsets.  This\
    \ document does not prohibit such media\n   types and in fact expects them to\
    \ proliferate.  However, developers\n   of such media types are STRONGLY RECOMMENDED\
    \ to use this document as\n   a basis for their registration.  In particular,\
    \ the charset parameter\n   SHOULD be used in the same manner, as described in\
    \ Section 7.1, in\n   order to enhance interoperability.\n   An XML document labeled\
    \ as text/xml or application/xml might contain\n   namespace declarations, stylesheet-linking\
    \ processing instructions\n   (PIs), schema information, or other declarations\
    \ that might be used\n   to suggest how the document is to be processed.  For\
    \ example, a\n   document might have the XHTML namespace and a reference to a\
    \ CSS\n   stylesheet.  Such a document might be handled by applications that\n\
    \   would use this information to dispatch the document for appropriate\n   processing.\n"
- title: 3.1 Text/xml Registration
  contents:
  - "3.1 Text/xml Registration\n   MIME media type name: text\n   MIME subtype name:\
    \ xml\n   Mandatory parameters: none\n   Optional parameters: charset\n      Although\
    \ listed as an optional parameter, the use of the charset\n      parameter is\
    \ STRONGLY RECOMMENDED, since this information can be\n      used by XML processors\
    \ to determine authoritatively the character\n      encoding of the XML MIME entity.\
    \  The charset parameter can also\n      be used to provide protocol-specific\
    \ operations, such as charset-\n      based content negotiation in HTTP.  \"utf-8\"\
    \ [RFC2279] is the\n      recommended value, representing the UTF-8 charset. \
    \ UTF-8 is\n      supported by all conforming processors of [XML].\n      If the\
    \ XML MIME entity is transmitted via HTTP, which uses a\n      MIME-like mechanism\
    \ that is exempt from the restrictions on the\n      text top-level type (see\
    \ section 19.4.1 of [RFC2616]), \"utf-16\"\n      [RFC2781]) is also recommended.\
    \  UTF-16 is supported by all\n      conforming processors of [XML].  Since the\
    \ handling of CR, LF and\n      NUL for text types in most MIME applications would\
    \ cause undesired\n      transformations of individual octets in UTF-16 multi-octet\n\
    \      characters, gateways from HTTP to these MIME applications MUST\n      transform\
    \ the XML MIME entity from text/xml; charset=\"utf-16\" to\n      application/xml;\
    \ charset=\"utf-16\".\n      Conformant with [RFC2046], if a text/xml entity is\
    \ received with\n      the charset parameter omitted, MIME processors and XML\
    \ processors\n      MUST use the default charset value of \"us-ascii\"[ASCII].\
    \  In cases\n      where the XML MIME entity is transmitted via HTTP, the default\n\
    \      charset value is still \"us-ascii\".  (Note: There is an\n      inconsistency\
    \ between this specification and HTTP/1.1, which uses\n      ISO-8859-1[ISO8859]\
    \ as the default for a historical reason.  Since\n      XML is a new format, a\
    \ new default should be chosen for better\n      I18N.  US-ASCII was chosen, since\
    \ it is the intersection of UTF-8\n      and ISO-8859-1 and since it is already\
    \ used by MIME.)\n      There are several reasons that the charset parameter is\n\
    \      authoritative.  First, some MIME processing engines do transcoding\n  \
    \    of MIME bodies of the top-level media type \"text\" without\n      reference\
    \ to any of the internal content.  Thus, it is possible\n      that some agent\
    \ might change text/xml; charset=\"iso-2022-jp\" to\n      text/xml; charset=\"\
    utf-8\" without modifying the encoding\n      declaration of an XML document.\
    \  Second, text/xml must be\n      compatible with text/plain, since MIME agents\
    \ that do not\n      understand text/xml will fallback to handling it as text/plain.\n\
    \      If the charset parameter for text/xml were not authoritative, such\n  \
    \    fallback would cause data corruption.  Third, recent web servers\n      have\
    \ been improved so that users can specify the charset\n      parameter.  Fourth,\
    \ [RFC2130] specifies that the recommended\n      specification scheme is the\
    \ \"charset\" parameter.\n      Since the charset parameter is authoritative,\
    \ the charset is not\n      always declared within an XML encoding declaration.\
    \  Thus, special\n      care is needed when the recipient strips the MIME header\
    \ and\n      provides persistent storage of the received XML MIME entity (e.g.,\n\
    \      in a file system).  Unless the charset is UTF-8 or UTF-16, the\n      recipient\
    \ SHOULD also persistently store information about the\n      charset, perhaps\
    \ by embedding a correct XML encoding declaration\n      within the XML MIME entity.\n\
    \   Encoding considerations: This media type MAY be encoded as\n      appropriate\
    \ for the charset and the capabilities of the underlying\n      MIME transport.\
    \  For 7-bit transports, data in UTF-8 MUST be\n      encoded in quoted-printable\
    \ or base64.  For 8-bit clean transport\n      (e.g., 8BITMIME[RFC1652] ESMTP\
    \ or NNTP[RFC0977]), UTF-8 does not\n      need to be encoded.  Over HTTP[RFC2616],\
    \ no content-transfer-\n      encoding is necessary and UTF-16 may also be used.\n\
    \   Security considerations: See Section 10.\n   Interoperability considerations:\
    \ XML has proven to be interoperable\n      across WebDAV clients and servers,\
    \ and for import and export from\n      multiple XML authoring tools.  For maximum\
    \ interoperability,\n      validating processors are recommended.  Although non-validating\n\
    \      processors may be more efficient, they are not required to handle\n   \
    \   all features of XML.  For further information, see sub-section 2.9\n     \
    \ \"Standalone Document Declaration\" and section 5 \"Conformance\" of\n     \
    \ [XML].\n   Published specification: Extensible Markup Language (XML) 1.0 (Second\n\
    \      Edition)[XML].\n   Applications which use this media type: XML is device-,\
    \ platform-,\n      and vendor-neutral and is supported by a wide range of Web\
    \ user\n      agents, WebDAV[RFC2518] clients and servers, as well as XML\n  \
    \    authoring tools.\n   Additional information:\n      Magic number(s): None.\n\
    \         Although no byte sequences can be counted on to always be\n        \
    \ present, XML MIME entities in ASCII-compatible charsets\n         (including\
    \ UTF-8) often begin with hexadecimal 3C 3F 78 6D 6C\n         (\"<?xml\"), and\
    \ those in UTF-16 often begin with hexadecimal FE\n         FF 00 3C 00 3F 00\
    \ 78 00 6D 00 6C or FF FE 3C 00 3F 00 78 00 6D\n         00 6C 00 (the Byte Order\
    \ Mark (BOM) followed by \"<?xml\").  For\n         more information, see Appendix\
    \ F of [XML].\n      File extension(s): .xml\n      Macintosh File Type Code(s):\
    \ \"TEXT\"\n   Person and email address for further information:\n      MURATA\
    \ Makoto (FAMILY Given) <mmurata@trl.ibm.co.jp>\n      Simon St.Laurent <simonstl@simonstl.com>\n\
    \      Daniel Kohn <dan@dankohn.com>\n   Intended usage: COMMON\n   Author/Change\
    \ controller: The XML specification is a work product of\n      the World Wide\
    \ Web Consortium's XML Working Group, and was edited\n      by:\n      Tim Bray\
    \ <tbray@textuality.com>\n      Jean Paoli <jeanpa@microsoft.com>\n      C. M.\
    \ Sperberg-McQueen <cmsmcq@uic.edu>\n      Eve Maler <eve.maler@east.sun.com>\n\
    \      The W3C, and the W3C XML Core Working Group, have change control\n    \
    \  over the XML specification.\n"
- title: 3.2 Application/xml Registration
  contents:
  - "3.2 Application/xml Registration\n   MIME media type name: application\n   MIME\
    \ subtype name: xml\n   Mandatory parameters: none\n   Optional parameters: charset\n\
    \      Although listed as an optional parameter, the use of the charset\n    \
    \  parameter is STRONGLY RECOMMENDED, since this information can be\n      used\
    \ by XML processors to determine authoritatively the charset of\n      the XML\
    \ MIME entity.  The charset parameter can also be used to\n      provide protocol-specific\
    \ operations, such as charset-based\n      content negotiation in HTTP.\n    \
    \  \"utf-8\" [RFC2279] and \"utf-16\" [RFC2781] are the recommended\n      values,\
    \ representing the UTF-8 and UTF-16 charsets, respectively.\n      These charsets\
    \ are preferred since they are supported by all\n      conforming processors of\
    \ [XML].\n      If an application/xml entity is received where the charset\n \
    \     parameter is omitted, no information is being provided about the\n     \
    \ charset by the MIME Content-Type header.  Conforming XML\n      processors MUST\
    \ follow the requirements in section 4.3.3 of [XML]\n      that directly address\
    \ this contingency.  However, MIME processors\n      that are not XML processors\
    \ SHOULD NOT assume a default charset if\n      the charset parameter is omitted\
    \ from an application/xml entity.\n      There are several reasons that the charset\
    \ parameter is\n      authoritative.  First, recent web servers have been improved\
    \ so\n      that users can specify the charset parameter.  Second, [RFC2130]\n\
    \      specifies that the recommended specification scheme is the\n      \"charset\"\
    \ parameter.\n      On the other hand, it has been argued that the charset parameter\n\
    \      should be omitted and the mechanism described in Appendix F of\n      [XML]\
    \ (which is non-normative) should be solely relied on.  This\n      approach would\
    \ allow users to avoid configuration of the charset\n      parameter; an XML document\
    \ stored in a file is likely to contain a\n      correct encoding declaration\
    \ or BOM (if necessary), since the\n      operating system does not typically\
    \ provide charset information\n      for files.  If users would like to rely on\
    \ the encoding\n      declaration or BOM and to hide charset information from\
    \ protocols,\n      they may determine not to use the parameter.\n      Since\
    \ the charset parameter is authoritative, the charset is not\n      always declared\
    \ within an XML encoding declaration.  Thus, special\n      care is needed when\
    \ the recipient strips the MIME header and\n      provides persistent storage\
    \ of the received XML MIME entity (e.g.,\n      in a file system).  Unless the\
    \ charset is UTF-8 or UTF-16, the\n      recipient SHOULD also persistently store\
    \ information about the\n      charset, perhaps by embedding a correct XML encoding\
    \ declaration\n      within the XML MIME entity.\n   Encoding considerations:\
    \ This media type MAY be encoded as\n      appropriate for the charset and the\
    \ capabilities of the underlying\n      MIME transport.  For 7-bit transports,\
    \ data in either UTF-8 or\n      UTF-16 MUST be encoded in quoted-printable or\
    \ base64.  For 8-bit\n      clean transport (e.g., 8BITMIME[RFC1652] ESMTP or\
    \ NNTP[RFC0977]),\n      UTF-8 is not encoded, but the UTF-16 family MUST be encoded\
    \ in\n      base64.  For binary clean transports (e.g., HTTP[RFC2616]), no\n \
    \     content-transfer-encoding is necessary.\n   Security considerations: See\
    \ Section 10.\n   Interoperability considerations: Same as Section 3.1.\n   Published\
    \ specification: Same as Section 3.1.\n   Applications which use this media type:\
    \ Same as Section 3.1.\n   Additional information: Same as Section 3.1.\n   Person\
    \ and email address for further information: Same as Section\n      3.1.\n   Intended\
    \ usage: COMMON\n   Author/Change controller: Same as Section 3.1.\n"
- title: 3.3 Text/xml-external-parsed-entity Registration
  contents:
  - "3.3 Text/xml-external-parsed-entity Registration\n   MIME media type name: text\n\
    \   MIME subtype name: xml-external-parsed-entity\n   Mandatory parameters: none\n\
    \   Optional parameters: charset\n      The charset parameter of text/xml-external-parsed-entity\
    \ is\n      handled the same as that of text/xml as described in Section 3.1.\n\
    \   Encoding considerations: Same as Section 3.1.\n   Security considerations:\
    \ See Section 10.\n   Interoperability considerations: XML external parsed entities\
    \ are as\n      interoperable as XML documents, though they have a less tightly\n\
    \      constrained structure and therefore need to be referenced by XML\n    \
    \  documents for proper handling by XML processors.  Similarly, XML\n      documents\
    \ cannot be reliably used as external parsed entities\n      because external\
    \ parsed entities are prohibited from having\n      standalone document declarations\
    \ or DTDs.  Identifying XML\n      external parsed entities with their own content\
    \ type should\n      enhance interoperability of both XML documents and XML external\n\
    \      parsed entities.\n   Published specification: Same as Section 3.1.\n  \
    \ Applications which use this media type: Same as Section 3.1.\n   Additional\
    \ information:\n      Magic number(s): Same as Section 3.1.\n      File extension(s):\
    \ .xml or .ent\n      Macintosh File Type Code(s): \"TEXT\"\n   Person and email\
    \ address for further information: Same as Section\n      3.1.\n   Intended usage:\
    \ COMMON\n   Author/Change controller: Same as Section 3.1.\n"
- title: 3.4 Application/xml-external-parsed-entity Registration
  contents:
  - "3.4 Application/xml-external-parsed-entity Registration\n   MIME media type name:\
    \ application\n   MIME subtype name: xml-external-parsed-entity\n   Mandatory\
    \ parameters: none\n   Optional parameters: charset\n      The charset parameter\
    \ of application/xml-external-parsed-entity is\n      handled the same as that\
    \ of application/xml as described in\n      Section 3.2.\n   Encoding considerations:\
    \ Same as Section 3.2.\n   Security considerations: See Section 10.\n   Interoperability\
    \ considerations: Same as those for text/xml-\n      external-parsed-entity as\
    \ described in Section 3.3.\n   Published specification: Same as text/xml as described\
    \ in Section\n      3.1.\n   Applications which use this media type: Same as Section\
    \ 3.1.\n   Additional information:\n      Magic number(s): Same as Section 3.1.\n\
    \      File extension(s): .xml or .ent\n      Macintosh File Type Code(s): \"\
    TEXT\"\n   Person and email address for further information: Same as Section\n\
    \      3.1.\n   Intended usage: COMMON\n   Author/Change controller: Same as Section\
    \ 3.1.\n"
- title: 3.5 Application/xml-dtd Registration
  contents:
  - "3.5 Application/xml-dtd Registration\n   MIME media type name: application\n\
    \   MIME subtype name: xml-dtd\n   Mandatory parameters: none\n   Optional parameters:\
    \ charset\n      The charset parameter of application/xml-dtd is handled the same\n\
    \      as that of application/xml as described in Section 3.2.\n   Encoding considerations:\
    \ Same as Section 3.2.\n   Security considerations: See Section 10.\n   Interoperability\
    \ considerations: XML DTDs have proven to be\n      interoperable by DTD authoring\
    \ tools and XML browsers, among\n      others.\n   Published specification: Same\
    \ as text/xml as described in Section\n      3.1.\n   Applications which use this\
    \ media type: DTD authoring tools handle\n      external DTD subsets as well as\
    \ external parameter entities.  XML\n      browsers may also access external DTD\
    \ subsets and external\n      parameter entities.\n   Additional information:\n\
    \      Magic number(s): Same as Section 3.1.\n      File extension(s): .dtd or\
    \ .mod\n      Macintosh File Type Code(s): \"TEXT\"\n   Person and email address\
    \ for further information: Same as Section\n      3.1.\n   Intended usage: COMMON\n\
    \   Author/Change controller: Same as Section 3.1.\n"
- title: 3.6 Summary
  contents:
  - "3.6 Summary\n   The following list applies to text/xml, text/xml-external-parsed-\n\
    \   entity, and XML-based media types under the top-level type \"text\"\n   that\
    \ define the charset parameter according to this specification:\n   o  Charset\
    \ parameter is strongly recommended.\n   o  If the charset parameter is not specified,\
    \ the default is \"us-\n      ascii\".  The default of \"iso-8859-1\" in HTTP\
    \ is explicitly\n      overridden.\n   o  No error handling provisions.\n   o\
    \  An encoding declaration, if present, is irrelevant, but when\n      saving\
    \ a received resource as a file, the correct encoding\n      declaration SHOULD\
    \ be inserted.\n   The next list applies to application/xml, application/xml-external-\n\
    \   parsed-entity, application/xml-dtd, and XML-based media types under\n   top-level\
    \ types other than \"text\" that define the charset parameter\n   according to\
    \ this specification:\n   o  Charset parameter is strongly recommended, and if\
    \ present, it\n      takes precedence.\n   o  If the charset parameter is omitted,\
    \ conforming XML processors\n      MUST follow the requirements in section 4.3.3\
    \ of [XML].\n"
- title: 4. The Byte Order Mark (BOM) and Conversions to/from the UTF-16 Charset
  contents:
  - "4. The Byte Order Mark (BOM) and Conversions to/from the UTF-16 Charset\n   Section\
    \ 4.3.3 of [XML] specifies that XML MIME entities in the\n   charset \"utf-16\"\
    \ MUST begin with a byte order mark (BOM), which is a\n   hexadecimal octet sequence\
    \ 0xFE 0xFF (or 0xFF 0xFE, depending on\n   endian).  The XML Recommendation further\
    \ states that the BOM is an\n   encoding signature, and is not part of either\
    \ the markup or the\n   character data of the XML document.\n   Due to the presence\
    \ of the BOM, applications that convert XML from\n   \"utf-16\" to a non-Unicode\
    \ encoding MUST strip the BOM before\n   conversion.  Similarly, when converting\
    \ from another encoding into\n   \"utf-16\", the BOM MUST be added after conversion\
    \ is complete.\n   In addition to the charset \"utf-16\", [RFC2781] introduces\
    \ \"utf-16le\"\n   (little endian) and \"utf-16be\" (big endian) as well.  The\
    \ BOM is\n   prohibited for these charsets.  When an XML MIME entity is encoded\
    \ in\n   \"utf-16le\" or \"utf-16be\", it MUST NOT begin with the BOM but SHOULD\n\
    \   contain an encoding declaration.  Conversion from \"utf-16\" to \"utf-\n \
    \  16be\" or \"utf-16le\" and conversion in the other direction MUST strip\n \
    \  or add the BOM, respectively.\n"
- title: 5. Fragment Identifiers
  contents:
  - "5. Fragment Identifiers\n   Section 4.1 of [RFC2396] notes that the semantics\
    \ of a fragment\n   identifier (the part of a URI after a \"#\") is a property\
    \ of the data\n   resulting from a retrieval action, and that the format and\n\
    \   interpretation of fragment identifiers is dependent on the media type\n  \
    \ of the retrieval result.\n   As of today, no established specifications define\
    \ identifiers for XML\n   media types.  However, a working draft published by\
    \ W3C, namely \"XML\n   Pointer Language (XPointer)\", attempts to define fragment\
    \ identifiers\n   for text/xml and application/xml.  The current specification\
    \ for\n   XPointer is available at http://www.w3.org/TR/xptr.\n"
- title: 6. The Base URI
  contents:
  - "6. The Base URI\n   Section 5.1 of [RFC2396] specifies that the semantics of\
    \ a relative\n   URI reference embedded in a MIME entity is dependent on the base\
    \ URI.\n   The base URI is either (1) the base URI embedded in the MIME entity,\n\
    \   (2) the base URI of the encapsulating MIME entity, (3) the URI used\n   to\
    \ retrieve the MIME entity, or (4) the application-dependent default\n   base\
    \ URI, where (1) has the highest precedence.  [RFC2396] further\n   specifies\
    \ that the mechanism for embedding the base URI is dependent\n   on the media\
    \ type.\n   As of today, no established specifications define mechanisms for\n\
    \   embedding the base URI in XML MIME entities.  However, a Proposed\n   Recommendation\
    \ published by W3C, namely \"XML Base\", attempts to\n   define such a mechanism\
    \ for text/xml, application/xml, text/xml-\n   external-parsed-entity, and application/xml-external-parsed-entity.\n\
    \   The current specification for XML Base is available at\n   http://www.w3.org/TR/xmlbase.\n"
- title: 7. A Naming Convention for XML-Based Media Types
  contents:
  - "7. A Naming Convention for XML-Based Media Types\n   This document recommends\
    \ the use of a naming convention (a suffix of\n   '+xml') for identifying XML-based\
    \ MIME media types, whatever their\n   particular content may represent.  This\
    \ allows the use of generic XML\n   processors and technologies on a wide variety\
    \ of different XML\n   document types at a minimum cost, using existing frameworks\
    \ for media\n   type registration.\n   Although the use of a suffix was not considered\
    \ as part of the\n   original MIME architecture, this choice is considered to\
    \ provide the\n   most functionality with the least potential for interoperability\n\
    \   problems or lack of future extensibility.  The alternatives to the '\n   +xml'\
    \ suffix and the reason for its selection are described in\n   Appendix A.\n \
    \  As XML development continues, new XML document types are appearing\n   rapidly.\
    \  Many of these XML document types would benefit from the\n   identification\
    \ possibilities of a more specific MIME media type than\n   text/xml or application/xml\
    \ can provide, and it is likely that many\n   new media types for XML-based document\
    \ types will be registered in\n   the near and ongoing future.\n   While the benefits\
    \ of specific MIME types for particular types of XML\n   documents are significant,\
    \ all XML documents share common structures\n   and syntax that make possible\
    \ common processing.\n   Some areas where 'generic' processing is useful include:\n\
    \   o  Browsing - An XML browser can display any XML document with a\n      provided\
    \ [CSS] or [XSLT] style sheet, whatever the vocabulary of\n      that document.\n\
    \   o  Editing - Any XML editor can read, modify, and save any XML\n      document.\n\
    \   o  Fragment identification - XPointers (work in progress) can work\n     \
    \ with any XML document, whatever vocabulary it uses and whether or\n      not\
    \ it uses XPointer for its own fragment identification.\n   o  Hypertext linking\
    \ - XLink (work in progress) hypertext linking is\n      designed to connect any\
    \ XML documents, regardless of vocabulary.\n   o  Searching - XML-oriented search\
    \ engines, web crawlers, agents, and\n      query tools should be able to read\
    \ XML documents and extract the\n      names and content of elements and attributes\
    \ even if the tools are\n      ignorant of the particular vocabulary used for\
    \ elements and\n      attributes.\n   o  Storage - XML-oriented storage systems,\
    \ which keep XML documents\n      internally in a parsed form, should similarly\
    \ be able to process,\n      store, and recreate any XML document.\n   o  Well-formedness\
    \ and validity checking - An XML processor can\n      confirm that any XML document\
    \ is well-formed and that it is valid\n      (i.e., conforms to its declared DTD\
    \ or Schema).\n   When a new media type is introduced for an XML-based format,\
    \ the name\n   of the media type SHOULD end with '+xml'.  This convention will\
    \ allow\n   applications that can process XML generically to detect that the MIME\n\
    \   entity is supposed to be an XML document, verify this assumption by\n   invoking\
    \ some XML processor, and then process the XML document\n   accordingly.  Applications\
    \ may match for types that represent XML\n   MIME entities by comparing the subtype\
    \ to the pattern '*/*+xml'.  (Of\n   course, 4 of the 5 media types defined in\
    \ this document -- text/xml,\n   application/xml, text/xml-external-parsed-entity,\
    \ and\n   application/xml-external-parsed-entity -- also represent XML MIME\n\
    \   entities while not conforming to the '*/*+xml' pattern.)\n      NOTE: Section\
    \ 14.1 of HTTP[RFC2616] does not support Accept\n      headers of the form \"\
    Accept: */*+xml\" and so this header MUST NOT\n      be used in this way.  Instead,\
    \ content negotiation[RFC2703] could\n      potentially be used if an XML-based\
    \ MIME type were needed.\n   XML generic processing is not always appropriate\
    \ for XML-based media\n   types.  For example, authors of some such media types\
    \ may wish that\n   the types remain entirely opaque except to applications that\
    \ are\n   specifically designed to deal with that media type.  By NOT following\n\
    \   the naming convention '+xml', such media types can avoid XML-generic\n   processing.\
    \  Since generic processing will be useful in many cases,\n   however -- including\
    \ in some situations that are difficult to predict\n   ahead of time -- those\
    \ registering media types SHOULD use the '+xml'\n   convention unless they have\
    \ a particularly compelling reason not to.\n   The registration process for these\
    \ media types is described in\n   [RFC2048].  The registrar for the IETF tree\
    \ will encourage new XML-\n   based media type registrations in the IETF tree\
    \ to follow this\n   guideline.  Registrars for other trees SHOULD follow this\
    \ convention\n   in order to ensure maximum interoperability of their XML-based\n\
    \   documents.  Similarly, media subtypes that do not represent XML MIME\n   entities\
    \ MUST NOT be allowed to register with a '+xml' suffix.\n"
- title: 7.1 Referencing
  contents:
  - "7.1 Referencing\n   Registrations for new XML-based media types under the top-level\
    \ type\n   \"text\" SHOULD, in specifying the charset parameter and encoding\n\
    \   considerations, define them as: \"Same as [charset parameter /\n   encoding\
    \ considerations] of text/xml as specified in RFC 3023.\"\n   Registrations for\
    \ new XML-based media types under top-level types\n   other than \"text\" SHOULD,\
    \ in specifying the charset parameter and\n   encoding considerations, define\
    \ them as: \"Same as [charset parameter\n   / encoding considerations] of application/xml\
    \ as specified in RFC\n   3023.\"\n   The use of the charset parameter is STRONGLY\
    \ RECOMMENDED, since this\n   information can be used by XML processors to determine\n\
    \   authoritatively the charset of the XML MIME entity.\n   These registrations\
    \ SHOULD specify that the XML-based media type\n   being registered has all of\
    \ the security considerations described in\n   RFC 3023 plus any additional considerations\
    \ specific to that media\n   type.\n   These registrations SHOULD also make reference\
    \ to RFC 3023 in\n   specifying magic numbers, fragment identifiers, base URIs,\
    \ and use of\n   the BOM.\n   These registrations MAY reference the text/xml registration\
    \ in RFC\n   3023 in specifying interoperability considerations, if these\n  \
    \ considerations are not overridden by issues specific to that media\n   type.\n"
- title: 8. Examples
  contents:
  - "8. Examples\n   The examples below give the value of the MIME Content-type header\
    \ and\n   the XML declaration (which includes the encoding declaration) inside\n\
    \   the XML MIME entity.  For UTF-16 examples, the Byte Order Mark\n   character\
    \ is denoted as \"{BOM}\", and the XML declaration is assumed\n   to come at the\
    \ beginning of the XML MIME entity, immediately\n   following the BOM.  Note that\
    \ other MIME headers may be present, and\n   the XML MIME entity may contain other\
    \ data in addition to the XML\n   declaration; the examples focus on the Content-type\
    \ header and the\n   encoding declaration for clarity.\n"
- title: 8.1 Text/xml with UTF-8 Charset
  contents:
  - "8.1 Text/xml with UTF-8 Charset\n   Content-type: text/xml; charset=\"utf-8\"\
    \n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   This is the recommended charset\
    \ value for use with text/xml.  Since\n   the charset parameter is provided, MIME\
    \ and XML processors MUST treat\n   the enclosed entity as UTF-8 encoded.\n  \
    \ If sent using a 7-bit transport (e.g., SMTP[RFC0821]), the XML MIME\n   entity\
    \ MUST use a content-transfer-encoding of either quoted-\n   printable or base64.\
    \  For an 8-bit clean transport (e.g., 8BITMIME\n   ESMTP or NNTP), or a binary\
    \ clean transport (e.g., HTTP), no\n   content-transfer-encoding is necessary.\n"
- title: 8.2 Text/xml with UTF-16 Charset
  contents:
  - "8.2 Text/xml with UTF-16 Charset\n   Content-type: text/xml; charset=\"utf-16\"\
    \n   {BOM}<?xml version='1.0' encoding='utf-16'?>\n   or\n   {BOM}<?xml version='1.0'?>\n\
    \   This is possible only when the XML MIME entity is transmitted via\n   HTTP,\
    \ which uses a MIME-like mechanism and is a binary-clean\n   protocol, hence does\
    \ not perform CR and LF transformations and allows\n   NUL octets.  As described\
    \ in [RFC2781], the UTF-16 family MUST NOT be\n   used with media types under\
    \ the top-level type \"text\" except over\n   HTTP (see section 19.4.1 of [RFC2616]\
    \ for details).\n   Since HTTP is binary clean, no content-transfer-encoding is\n\
    \   necessary.\n"
- title: 8.3 Text/xml with UTF-16BE Charset
  contents:
  - "8.3 Text/xml with UTF-16BE Charset\n   Content-type: text/xml; charset=\"utf-16be\"\
    \n   <?xml version='1.0' encoding='utf-16be'?>\n   Observe that the BOM does not\
    \ exist.  This is again possible only\n   when the XML MIME entity is transmitted\
    \ via HTTP.\n"
- title: 8.4 Text/xml with ISO-2022-KR Charset
  contents:
  - "8.4 Text/xml with ISO-2022-KR Charset\n   Content-type: text/xml; charset=\"\
    iso-2022-kr\"\n   <?xml version=\"1.0\" encoding='iso-2022-kr'?>\n   This example\
    \ shows text/xml with a Korean charset (e.g., Hangul)\n   encoded following the\
    \ specification in [RFC1557].  Since the charset\n   parameter is provided, MIME\
    \ and XML processors MUST treat the\n   enclosed entity as encoded per RFC 1557.\n\
    \   Since ISO-2022-KR has been defined to use only 7 bits of data, no\n   content-transfer-encoding\
    \ is necessary with any transport.\n"
- title: 8.5 Text/xml with Omitted Charset
  contents:
  - "8.5 Text/xml with Omitted Charset\n   Content-type: text/xml\n   {BOM}<?xml version=\"\
    1.0\" encoding=\"utf-16\"?>\n   or\n   {BOM}<?xml version=\"1.0\"?>\n   This example\
    \ shows text/xml with the charset parameter omitted.  In\n   this case, MIME and\
    \ XML processors MUST assume the charset is \"us-\n   ascii\", the default charset\
    \ value for text media types specified in\n   [RFC2046].  The default of \"us-ascii\"\
    \ holds even if the text/xml\n   entity is transported using HTTP.\n   Omitting\
    \ the charset parameter is NOT RECOMMENDED for text/xml.  For\n   example, even\
    \ if the contents of the XML MIME entity are UTF-16 or\n   UTF-8, or the XML MIME\
    \ entity has an explicit encoding declaration,\n   XML and MIME processors MUST\
    \ assume the charset is \"us-ascii\".\n"
- title: 8.6 Application/xml with UTF-16 Charset
  contents:
  - "8.6 Application/xml with UTF-16 Charset\n   Content-type: application/xml; charset=\"\
    utf-16\"\n   {BOM}<?xml version=\"1.0\" encoding=\"utf-16\"?>\n   or\n   {BOM}<?xml\
    \ version=\"1.0\"?>\n   This is a recommended charset value for use with application/xml.\n\
    \   Since the charset parameter is provided, MIME and XML processors MUST\n  \
    \ treat the enclosed entity as UTF-16 encoded.\n   If sent using a 7-bit transport\
    \ (e.g., SMTP) or an 8-bit clean\n   transport (e.g., 8BITMIME ESMTP or NNTP),\
    \ the XML MIME entity MUST be\n   encoded in quoted-printable or base64.  For\
    \ a binary clean transport\n   (e.g., HTTP), no content-transfer-encoding is necessary.\n"
- title: 8.7 Application/xml with UTF-16BE Charset
  contents:
  - "8.7 Application/xml with UTF-16BE Charset\n   Content-type: application/xml;\
    \ charset=\"utf-16be\"\n   <?xml version='1.0' encoding='utf-16be'?>\n   Observe\
    \ that the BOM does not exist.  Since the charset parameter is\n   provided, MIME\
    \ and XML processors MUST treat the enclosed entity as\n   UTF-16BE encoded.\n"
- title: 8.8 Application/xml with ISO-2022-KR Charset
  contents:
  - "8.8 Application/xml with ISO-2022-KR Charset\n   Content-type: application/xml;\
    \ charset=\"iso-2022-kr\"\n   <?xml version=\"1.0\" encoding=\"iso-2022-kr\"?>\n\
    \   This example shows application/xml with a Korean charset (e.g.,\n   Hangul)\
    \ encoded following the specification in [RFC1557].  Since the\n   charset parameter\
    \ is provided, MIME and XML processors MUST treat the\n   enclosed entity as encoded\
    \ per RFC 1557, independent of whether the\n   XML MIME entity has an internal\
    \ encoding declaration (this example\n   does show such a declaration, which agrees\
    \ with the charset\n   parameter).\n   Since ISO-2022-KR has been defined to use\
    \ only 7 bits of data, no\n   content-transfer-encoding is necessary with any\
    \ transport.\n"
- title: 8.9 Application/xml with Omitted Charset and UTF-16 XML MIME Entity
  contents:
  - "8.9 Application/xml with Omitted Charset and UTF-16 XML MIME Entity\n   Content-type:\
    \ application/xml\n   {BOM}<?xml version='1.0' encoding=\"utf-16\"?>\n   or\n\
    \   {BOM}<?xml version='1.0'?>\n   For this example, the XML MIME entity begins\
    \ with a BOM.  Since the\n   charset has been omitted, a conforming XML processor\
    \ follows the\n   requirements of [XML], section 4.3.3.  Specifically, the XML\n\
    \   processor reads the BOM, and thus knows deterministically that the\n   charset\
    \ is UTF-16.\n   An XML-unaware MIME processor SHOULD make no assumptions about\
    \ the\n   charset of the XML MIME entity.\n"
- title: 8.10 Application/xml with Omitted Charset and UTF-8 Entity
  contents:
  - "8.10 Application/xml with Omitted Charset and UTF-8 Entity\n   Content-type:\
    \ application/xml\n   <?xml version='1.0'?>\n   In this example, the charset parameter\
    \ has been omitted, and there is\n   no BOM.  Since there is no BOM, the XML processor\
    \ follows the\n   requirements in section 4.3.3 of [XML], and optionally applies\
    \ the\n   mechanism described in Appendix F (which is non-normative) of [XML]\n\
    \   to determine the charset encoding of UTF-8.  The XML MIME entity does\n  \
    \ not contain an encoding declaration, but since the encoding is UTF-8,\n   this\
    \ is still a conforming XML MIME entity.\n   An XML-unaware MIME processor SHOULD\
    \ make no assumptions about the\n   charset of the XML MIME entity.\n"
- title: 8.11 Application/xml with Omitted Charset and Internal Encoding
  contents:
  - "8.11 Application/xml with Omitted Charset and Internal Encoding\n     Declaration\n\
    \   Content-type: application/xml\n   <?xml version='1.0' encoding=\"iso-10646-ucs-4\"\
    ?>\n   In this example, the charset parameter has been omitted, and there is\n\
    \   no BOM.  However, the XML MIME entity does have an encoding\n   declaration\
    \ inside the XML MIME entity that specifies the entity's\n   charset.  Following\
    \ the requirements in section 4.3.3 of [XML], and\n   optionally applying the\
    \ mechanism described in Appendix F (non-\n   normative) of [XML], the XML processor\
    \ determines the charset of the\n   XML MIME entity (in this example, UCS-4).\n\
    \   An XML-unaware MIME processor SHOULD make no assumptions about the\n   charset\
    \ of the XML MIME entity.\n"
- title: 8.12 Text/xml-external-parsed-entity with UTF-8 Charset
  contents:
  - "8.12 Text/xml-external-parsed-entity with UTF-8 Charset\n   Content-type: text/xml-external-parsed-entity;\
    \ charset=\"utf-8\"\n   <?xml encoding=\"utf-8\"?>\n   This is the recommended\
    \ charset value for use with text/xml-\n   external-parsed-entity.  Since the\
    \ charset parameter is provided,\n   MIME and XML processors MUST treat the enclosed\
    \ entity as UTF-8\n   encoded.\n   If sent using a 7-bit transport (e.g., SMTP),\
    \ the XML MIME entity\n   MUST use a content-transfer-encoding of either quoted-printable\
    \ or\n   base64.  For an 8-bit clean transport (e.g., 8BITMIME ESMTP or NNTP),\n\
    \   or a binary clean transport (e.g., HTTP) no content-transfer-encoding\n  \
    \ is necessary.\n"
- title: 8.13 Application/xml-external-parsed-entity with UTF-16 Charset
  contents:
  - "8.13 Application/xml-external-parsed-entity with UTF-16 Charset\n   Content-type:\
    \ application/xml-external-parsed-entity;\n    charset=\"utf-16\"\n   {BOM}<?xml\
    \ encoding=\"utf-16\"?>\n   or\n   {BOM}<?xml?>\n   This is a recommended charset\
    \ value for use with application/xml-\n   external-parsed-entity.  Since the charset\
    \ parameter is provided,\n   MIME and XML processors MUST treat the enclosed entity\
    \ as UTF-16\n   encoded.\n   If sent using a 7-bit transport (e.g., SMTP) or an\
    \ 8-bit clean\n   transport (e.g., 8BITMIME ESMTP or NNTP), the XML MIME entity\
    \ MUST be\n   encoded in quoted-printable or base64.  For a binary clean transport\n\
    \   (e.g., HTTP), no content-transfer-encoding is necessary.\n"
- title: 8.14 Application/xml-external-parsed-entity with UTF-16BE Charset
  contents:
  - "8.14 Application/xml-external-parsed-entity with UTF-16BE Charset\n   Content-type:\
    \ application/xml-external-parsed-entity;\n    charset=\"utf-16be\"\n   <?xml\
    \ encoding=\"utf-16be\"?>\n   Since the charset parameter is provided, MIME and\
    \ XML processors MUST\n   treat the enclosed entity as UTF-16BE encoded.\n"
- title: 8.15 Application/xml-dtd
  contents:
  - "8.15 Application/xml-dtd\n   Content-type: application/xml-dtd; charset=\"utf-8\"\
    \n   <?xml encoding=\"utf-8\"?>\n   Charset \"utf-8\" is a recommended charset\
    \ value for use with\n   application/xml-dtd.  Since the charset parameter is\
    \ provided, MIME\n   and XML processors MUST treat the enclosed entity as UTF-8\
    \ encoded.\n"
- title: 8.16 Application/mathml+xml
  contents:
  - "8.16 Application/mathml+xml\n   Content-type: application/mathml+xml\n   <?xml\
    \ version=\"1.0\" ?>\n   MathML documents are XML documents whose content describes\n\
    \   mathematical information, as defined by [MathML].  As a format based\n   on\
    \ XML, MathML documents SHOULD use the '+xml' suffix convention in\n   their MIME\
    \ content-type identifier.  However, no content type has yet\n   been registered\
    \ for MathML and so this media type should not be used\n   until such registration\
    \ has been completed.\n"
- title: 8.17 Application/xslt+xml
  contents:
  - "8.17 Application/xslt+xml\n   Content-type: application/xslt+xml\n   <?xml version=\"\
    1.0\" ?>\n   Extensible Stylesheet Language (XSLT) documents are XML documents\n\
    \   whose content describes stylesheets for other XML documents, as\n   defined\
    \ by [XSLT].  As a format based on XML, XSLT documents SHOULD\n   use the '+xml'\
    \ suffix convention in their MIME content-type\n   identifier.  However, no content\
    \ type has yet been registered for\n   XSLT and so this media type should not\
    \ be used until such\n   registration has been completed.\n"
- title: 8.18 Application/rdf+xml
  contents:
  - "8.18 Application/rdf+xml\n   Content-type: application/rdf+xml\n   <?xml version=\"\
    1.0\" ?>\n   RDF documents identified using this MIME type are XML documents whose\n\
    \   content describes metadata, as defined by [RDF].  As a format based\n   on\
    \ XML, RDF documents SHOULD use the '+xml' suffix convention in\n   their MIME\
    \ content-type identifier.  However, no content type has yet\n   been registered\
    \ for RDF and so this media type should not be used\n   until such registration\
    \ has been completed.\n"
- title: 8.19 Image/svg+xml
  contents:
  - "8.19 Image/svg+xml\n   Content-type: image/svg+xml\n   <?xml version=\"1.0\"\
    \ ?>\n   Scalable Vector Graphics (SVG) documents are XML documents whose\n  \
    \ content describes graphical information, as defined by [SVG].  As a\n   format\
    \ based on XML, SVG documents SHOULD use the '+xml' suffix\n   convention in their\
    \ MIME content-type identifier.  However, no\n   content type has yet been registered\
    \ for SVG and so this media type\n   should not be used until such registration\
    \ has been completed.\n"
- title: '8.20 INCONSISTENT EXAMPLE: Text/xml with UTF-8 Charset'
  contents:
  - "8.20 INCONSISTENT EXAMPLE: Text/xml with UTF-8 Charset\n   Content-type: text/xml;\
    \ charset=\"utf-8\"\n   <?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n   Since\
    \ the charset parameter is provided in the Content-Type header,\n   MIME and XML\
    \ processors MUST treat the enclosed entity as UTF-8\n   encoded.  That is, the\
    \ \"iso-8859-1\" encoding MUST be ignored.\n   Processors generating XML MIME\
    \ entities MUST NOT label conflicting\n   charset information between the MIME\
    \ Content-Type and the XML\n   declaration.\n"
- title: 9. IANA Considerations
  contents:
  - "9. IANA Considerations\n   As described in Section 7, this document updates the\
    \ [RFC2048]\n   registration process for XML-based MIME types.\n"
- title: 10. Security Considerations
  contents:
  - "10. Security Considerations\n   XML, as a subset of SGML, has all of the same\
    \ security considerations\n   as specified in [RFC1874], and likely more, due\
    \ to its expected\n   ubiquitous deployment.\n   To paraphrase section 3 of RFC\
    \ 1874, XML MIME entities contain\n   information to be parsed and processed by\
    \ the recipient's XML system.\n   These entities may contain and such systems\
    \ may permit explicit\n   system level commands to be executed while processing\
    \ the data.  To\n   the extent that an XML system will execute arbitrary command\
    \ strings,\n   recipients of XML MIME entities may be a risk.  In general, it\
    \ may be\n   possible to specify commands that perform unauthorized file\n   operations\
    \ or make changes to the display processor's environment\n   that affect subsequent\
    \ operations.\n   In general, any information stored outside of the direct control\
    \ of\n   the user -- including CSS style sheets, XSL transformations, entity\n\
    \   declarations, and DTDs -- can be a source of insecurity, by either\n   obvious\
    \ or subtle means.  For example, a tiny \"whiteout attack\"\n   modification made\
    \ to a \"master\" style sheet could make words in\n   critical locations disappear\
    \ in user documents, without directly\n   modifying the user document or the stylesheet\
    \ it references.  Thus,\n   the security of any XML document is vitally dependent\
    \ on all of the\n   documents recursively referenced by that document.\n   The\
    \ entity lists and DTDs for XHTML 1.0[XHTML], for instance, are\n   likely to\
    \ be a commonly used set of information.  Many developers\n   will use and trust\
    \ them, few of whom will know much about the level\n   of security on the W3C's\
    \ servers, or on any similarly trusted\n   repository.\n   The simplest attack\
    \ involves adding declarations that break\n   validation.  Adding extraneous declarations\
    \ to a list of character\n   entities can effectively \"break the contract\" used\
    \ by documents.  A\n   tiny change that produces a fatal error in a DTD could\
    \ halt XML\n   processing on a large scale.  Extraneous declarations are fairly\n\
    \   obvious, but more sophisticated tricks, like changing attributes from\n  \
    \ being optional to required, can be difficult to track down.  Perhaps\n   the\
    \ most dangerous option available to crackers is redefining default\n   values\
    \ for attributes: e.g., if developers have relied on defaulted\n   attributes\
    \ for security, a relatively small change might expose\n   enormous quantities\
    \ of information.\n   Apart from the structural possibilities, another option,\
    \ \"entity\n   spoofing,\" can be used to insert text into documents, vandalizing\
    \ and\n   perhaps conveying an unintended message.  Because XML 1.0 permits\n\
    \   multiple entity declarations, and the first declaration takes\n   precedence,\
    \ it's possible to insert malicious content where an entity\n   is used, such\
    \ as by inserting the full text of Winnie the Pooh in\n   every occurrence of\
    \ &mdash;.\n   Use of the digital signatures work currently underway by the xmldsig\n\
    \   working group may eventually ameliorate the dangers of referencing\n   external\
    \ documents not under one's own control.\n   Use of XML is expected to be varied,\
    \ and widespread.  XML is under\n   scrutiny by a wide range of communities for\
    \ use as a common syntax\n   for community-specific metadata.  For example, the\
    \ Dublin\n   Core[RFC2413] group is using XML for document metadata, and a new\n\
    \   effort has begun that is considering use of XML for medical\n   information.\
    \  Other groups view XML as a mechanism for marshalling\n   parameters for remote\
    \ procedure calls.  More uses of XML will\n   undoubtedly arise.\n   Security\
    \ considerations will vary by domain of use.  For example, XML\n   medical records\
    \ will have much more stringent privacy and security\n   considerations than XML\
    \ library metadata.  Similarly, use of XML as a\n   parameter marshalling syntax\
    \ necessitates a case by case security\n   review.\n   XML may also have some\
    \ of the same security concerns as plain text.\n   Like plain text, XML can contain\
    \ escape sequences that, when\n   displayed, have the potential to change the\
    \ display processor\n   environment in ways that adversely affect subsequent operations.\n\
    \   Possible effects include, but are not limited to, locking the\n   keyboard,\
    \ changing display parameters so subsequent displayed text is\n   unreadable,\
    \ or even changing display parameters to deliberately\n   obscure or distort subsequent\
    \ displayed material so that its meaning\n   is lost or altered.  Display processors\
    \ SHOULD either filter such\n   material from displayed text or else make sure\
    \ to reset all important\n   settings after a given display operation is complete.\n\
    \   Some terminal devices have keys whose output, when pressed, can be\n   changed\
    \ by sending the display processor a character sequence.  If\n   this is possible\
    \ the display of a text object containing such\n   character sequences could reprogram\
    \ keys to perform some illicit or\n   dangerous action when the key is subsequently\
    \ pressed by the user.\n   In some cases not only can keys be programmed, they\
    \ can be triggered\n   remotely, making it possible for a text display operation\
    \ to directly\n   perform some unwanted action.  As such, the ability to program\
    \ keys\n   SHOULD be blocked either by filtering or by disabling the ability to\n\
    \   program keys entirely.\n   Note that it is also possible to construct XML\
    \ documents that make\n   use of what XML terms \"entity references\" (using the\
    \ XML meaning of\n   the term \"entity\" as described in Section 2), to construct\
    \ repeated\n   expansions of text.  Recursive expansions are prohibited by [XML]\
    \ and\n   XML processors are required to detect them.  However, even non-\n  \
    \ recursive expansions may cause problems with the finite computing\n   resources\
    \ of computers, if they are performed many times.\n"
- title: References
  contents:
  - "References\n   [ASCII]    \"US-ASCII. Coded Character Set -- 7-Bit American Standard\n\
    \              Code for Information Interchange\", ANSI X3.4-1986, 1986.\n   [CSS]\
    \      Bos, B., Lie, H.W., Lilley, C. and I. Jacobs, \"Cascading\n           \
    \   Style Sheets, level 2 (CSS2) Specification\", World Wide\n              Web\
    \ Consortium Recommendation REC-CSS2, May 1998,\n              <http://www.w3.org/TR/REC-CSS2/>.\n\
    \   [ISO8859]  \"ISO-8859. International Standard -- Information\n           \
    \   Processing -- 8-bit Single-Byte Coded Graphic Character\n              Sets\
    \ -- Part 1: Latin alphabet No. 1, ISO-8859-1:1987\",\n              1987.\n \
    \  [MathML]   Ion, P. and R. Miner, \"Mathematical Markup Language\n         \
    \     (MathML) 1.01\", World Wide Web Consortium Recommendation\n            \
    \  REC-MathML, July 1999, <http://www.w3.org/TR/REC-MathML/>.\n   [PNG]      Boutell,\
    \ T., \"PNG (Portable Network Graphics)\n              Specification\", World\
    \ Wide Web Consortium Recommendation\n              REC-png, October 1996, <http://www.w3.org/TR/REC-png>.\n\
    \   [RDF]      Lassila, O. and R.R. Swick, \"Resource Description\n          \
    \    Framework (RDF) Model and Syntax Specification\", World\n              Wide\
    \ Web Consortium Recommendation REC-rdf-syntax,\n              February 1999,\
    \ <http://www.w3.org/TR/REC-rdf-syntax/>.\n   [RFC0821]  Postel, J., \"Simple\
    \ Mail Transfer Protocol\", STD 10, RFC\n              821, August 1982.\n   [RFC0977]\
    \  Kantor, B. and P. Lapsley, \"Network News Transfer\n              Protocol\"\
    , RFC 977, February 1986.\n   [RFC1557]  Choi, U., Chon, K. and H. Park, \"Korean\
    \ Character Encoding\n              for Internet Messages\", RFC 1557, December\
    \ 1993.\n   [RFC1652]  Klensin, J., Freed, N., Rose, M., Stefferud, E. and D.\n\
    \              Crocker, \"SMTP Service Extension for 8bit-MIMEtransport\",\n \
    \             RFC 1652, July 1994.\n   [RFC1874]  Levinson, E., \"SGML Media Types\"\
    , RFC 1874, December 1995.\n   [RFC2045]  Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n              Extensions (MIME) Part One: Format of Internet\
    \ Message\n              Bodies\", RFC 2045, November 1996.\n   [RFC2046]  Freed,\
    \ N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions\
    \ (MIME) Part Two: Media Types\", RFC 2046,\n              November 1996.\n  \
    \ [RFC2048]  Freed, N., Klensin, J. and J. Postel, \"Multipurpose\n          \
    \    Internet Mail Extensions (MIME) Part Four: Registration\n              Procedures\"\
    , RFC 2048, November 1996.\n   [RFC2060]  Crispin, M., \"Internet Message Access\
    \ Protocol - Version\n              4rev1\", RFC 2060, December 1996.\n   [RFC2077]\
    \  Nelson, S., Parks, C. and Mitra, \"The Model Primary\n              Content\
    \ Type for Multipurpose Internet Mail Extensions\",\n              RFC 2077, January\
    \ 1997.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2130]\
    \  Weider, C., Preston, C., Simonsen, K., Alvestrand, H.,\n              Atkinson,\
    \ R., Crispin, M. and P. Svanberg, \"The Report of\n              the IAB Character\
    \ Set Workshop held 29 February - 1 March,\n              1996\", RFC 2130, April\
    \ 1997.\n   [RFC2279]  Yergeau, F., \"UTF-8, a transformation format of ISO\n\
    \              10646\", RFC 2279, January 1998.\n   [RFC2376]  Whitehead, E. and\
    \ M. Murata, \"XML Media Types\", RFC 2376,\n              July 1998.\n   [RFC2396]\
    \  Berners-Lee, T., Fielding, R. and L. Masinter, \"Uniform\n              Resource\
    \ Identifiers (URI): Generic Syntax.\", RFC 2396,\n              August 1998.\n\
    \   [RFC2413]  Weibel, S., Kunze, J., Lagoze, C. and M. Wolf, \"Dublin\n     \
    \         Core Metadata for Resource Discovery\", RFC 2413, September\n      \
    \        1998.\n   [RFC2445]  Dawson, F. and D. Stenerson, \"Internet Calendaring\
    \ and\n              Scheduling Core Object Specification (iCalendar)\", RFC\n\
    \              2445, November 1998.\n   [RFC2518]  Goland, Y., Whitehead, E.,\
    \ Faizi, A., Carter, S. and D.\n              Jensen, \"HTTP Extensions for Distributed\
    \ Authoring --\n              WEBDAV\", RFC 2518, February 1999.\n   [RFC2616]\
    \  Fielding, R., Gettys, J., Mogul, J., Nielsen, H.,\n              Masinter,\
    \ L., Leach, P. and T. Berners-Lee, \"Hypertext\n              Transfer Protocol\
    \ -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC2629]  Rose, M., \"Writing I-Ds\
    \ and RFCs using XML\", RFC 2629,\n              June 1999.\n   [RFC2703]  Klyne,\
    \ G., \"Protocol-independent Content Negotiation\n              Framework\", RFC\
    \ 2703, September 1999.\n   [RFC2781]  Hoffman, P. and F. Yergeau, \"UTF-16, an\
    \ encoding of ISO\n              10646\", RFC 2781, Februrary 2000.\n   [RFC2801]\
    \  Burdett, D., \"Internet Open Trading Protocol - IOTP\n              Version\
    \ 1.0\", RFC 2801, April 2000.\n   [SGML]     International Standard Organization,\
    \ \"Information\n              Processing -- Text and Office Systems -- Standard\n\
    \              Generalized Markup Language (SGML)\", ISO 8879, October\n     \
    \         1986.\n   [SVG]      Ferraiolo, J., \"Scalable Vector Graphics (SVG)\"\
    , World\n              Wide Web Consortium Candidate Recommendation SVG, November\n\
    \              2000, <http://www.w3.org/TR/SVG>.\n   [XHTML]    Pemberton, S.\
    \ and  et al, \"XHTML 1.0: The Extensible\n              HyperText Markup Language\"\
    , World Wide Web Consortium\n              Recommendation xhtml1, January 2000,\n\
    \              <http://www.w3.org/TR/xhtml1>.\n   [XML]      Bray, T., Paoli,\
    \ J., Sperberg-McQueen, C.M. and E. Maler,\n              \"Extensible Markup\
    \ Language (XML) 1.0 (Second Edition)\",\n              World Wide Web Consortium\
    \ Recommendation REC-xml, October\n              2000, <http://www.w3.org/TR/REC-xml>.\n\
    \   [XSLT]     Clark, J., \"XSL Transformations (XSLT) Version 1.0\", World\n\
    \              Wide Web Consortium Recommendation xslt, November 1999,\n     \
    \         <http://www.w3.org/TR/xslt>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   MURATA Makoto (FAMILY Given)\n   IBM Tokyo Research Laboratory\n\
    \   1623-14, Shimotsuruma\n   Yamato-shi, Kanagawa-ken  242-8502\n   Japan\n \
    \  Phone: +81-46-215-4678\n   EMail: mmurata@trl.ibm.co.jp\n   Simon St.Laurent\n\
    \   simonstl.com\n   1259 Dryden Road\n   Ithaca, New York  14850\n   USA\n  \
    \ EMail: simonstl@simonstl.com\n   URI:   http://www.simonstl.com/\n   Dan Kohn\n\
    \   Skymoon Ventures\n   3045 Park Boulevard\n   Palo Alto, California  94306\n\
    \   USA\n   Phone: +1-650-327-2600\n   EMail: dan@dankohn.com\n   URI:   http://www.dankohn.com/\n"
- title: Appendix A. Why Use the '+xml' Suffix for XML-Based MIME Types?
  contents:
  - "Appendix A. Why Use the '+xml' Suffix for XML-Based MIME Types?\n   Although\
    \ the use of a suffix was not considered as part of the\n   original MIME architecture,\
    \ this choice is considered to provide the\n   most functionality with the least\
    \ potential for interoperability\n   problems or lack of future extensibility.\
    \  The alternatives to the\n   '+xml' suffix and the reason for its selection\
    \ are described below.\n"
- title: A.1 Why not just use text/xml or application/xml and let the XML
  contents:
  - "A.1 Why not just use text/xml or application/xml and let the XML\n    processor\
    \ dispatch to the correct application based on the\n    referenced DTD?\n   text/xml\
    \ and application/xml remain useful in many situations,\n   especially for document-oriented\
    \ applications that involve combining\n   XML with a stylesheet in order to present\
    \ the data.  However, XML is\n   also used to define entirely new data types,\
    \ and an XML-based format\n   such as image/svg+xml fits the definition of a MIME\
    \ media type\n   exactly as well as image/png[PNG] does.  (Note that image/svg+xml\
    \ is\n   not yet registered.) Although extra functionality is available for\n\
    \   MIME processors that are also XML processors, XML-based media types\n   --\
    \ even when treated as opaque, non-XML media types -- are just as\n   useful as\
    \ any other media type and should be treated as such.\n   Since MIME dispatchers\
    \ work off of the MIME type, use of text/xml or\n   application/xml to label discrete\
    \ media types will hinder correct\n   dispatching and general interoperability.\
    \  Finally, many XML\n   documents use neither DTDs nor namespaces, yet are perfectly\
    \ legal\n   XML.\n"
- title: A.2 Why not create a new subtree (e.g., image/xml.svg) to represent XML
  contents:
  - "A.2 Why not create a new subtree (e.g., image/xml.svg) to represent XML\n   \
    \ MIME types?\n   The subtree under which a media type is registered -- IETF,\
    \ vendor\n   (*/vnd.*), or personal (*/prs.*); see [RFC2048] for details -- is\n\
    \   completely orthogonal from whether the media type uses XML syntax or\n   not.\
    \  The suffix approach allows XML document types to be identified\n   within any\
    \ subtree.  The vendor subtree, for example, is likely to\n   include a large\
    \ number of XML-based document types.  By using a\n   suffix, rather than setting\
    \ up a separate subtree, those types may\n   remain in the same location in the\
    \ tree of MIME types that they would\n   have occupied had they not been based\
    \ on XML.\n"
- title: A.3 Why not create a new top-level MIME type for XML-based media types?
  contents:
  - "A.3 Why not create a new top-level MIME type for XML-based media types?\n   The\
    \ top-level MIME type (e.g., model/*[RFC2077]) determines what kind\n   of content\
    \ the type is, not what syntax it uses.  For example, agents\n   using image/*\
    \ to signal acceptance of any image format should\n   certainly be given access\
    \ to media type image/svg+xml, which is in\n   all respects a standard image subtype.\
    \  It just happens to use XML to\n   describe its syntax.  The two aspects of\
    \ the media type are\n   completely orthogonal.\n   XML-based data types will\
    \ most likely be registered in ALL top-level\n   categories.  Potential, though\
    \ currently unregistered, examples could\n   include application/mathml+xml[MathML]\
    \ and image/svg+xml[SVG].\n"
- title: A.4 Why not just have the MIME processor 'sniff' the content to
  contents:
  - "A.4 Why not just have the MIME processor 'sniff' the content to\n    determine\
    \ whether it is XML?\n   Rather than explicitly labeling XML-based media types,\
    \ the processor\n   could look inside each type and see whether or not it is XML.\
    \  The\n   processor could also cache a list of XML-based media types.\n   Although\
    \ this method might work acceptably for some mail\n   applications, it would fail\
    \ completely in many other uses of MIME.\n   For instance, an XML-based web crawler\
    \ would have no way of\n   determining whether a file is XML except to fetch it\
    \ and check.  The\n   same issue applies in some IMAP4[RFC2060] mail applications,\
    \ where\n   the client first fetches the MIME type as part of the message\n  \
    \ structure and then decides whether to fetch the MIME entity.\n   Requiring these\
    \ fetches just to determine whether the MIME type is\n   XML could have significant\
    \ bandwidth and latency disadvantages in\n   many situations.\n   Sniffing XML\
    \ also isn't as simple as it might seem.  DOCTYPE\n   declarations aren't required,\
    \ and they can appear fairly deep into a\n   document under certain unpreventable\
    \ circumstances.  (E.g., the XML\n   declaration, comments, and processing instructions\
    \ can occupy space\n   before the DOCTYPE declaration.) Even sniffing the DOCTYPE\
    \ isn't\n   completely reliable, thanks to a variety of issues involving default\n\
    \   values for namespaces within external DTDs and overrides inside the\n   internal\
    \ DTD.  Finally, the variety in potential character encodings\n   (something XML\
    \ provides tools to deal with), also makes reliable\n   sniffing less likely.\n"
- title: A.5 Why not use a MIME parameter to specify that a media type uses XML
  contents:
  - "A.5 Why not use a MIME parameter to specify that a media type uses XML\n    syntax?\n\
    \   For example, one could use \"Content-Type: application/iotp;\n   alternate-type=text/xml\"\
    \ or \"Content-Type: application/iotp;\n   syntax=xml\".\n   Section 5 of [RFC2045]\
    \ says that \"Parameters are modifiers of the\n   media subtype, and as such do\
    \ not fundamentally affect the nature of\n   the content\".  However, all XML-based\
    \ media types are by their nature\n   always XML.  Parameters, as they have been\
    \ defined in the MIME\n   architecture, are never invariant across all instantiations\
    \ of a\n   media type.\n   More practically, very few if any MIME dispatchers\
    \ and other MIME\n   agents support dispatching off of a parameter.  While MIME\
    \ agents on\n   the receiving side will need to be updated in either case to support\n\
    \   (or fall back to) generic XML processing, it has been suggested that\n   it\
    \ is easier to implement this functionality when acting off of the\n   media type\
    \ rather than a parameter.  More important, sending agents\n   require no update\
    \ to properly tag an image as \"image/svg+xml\", but\n   few if any sending agents\
    \ currently support always tagging certain\n   content types with a parameter.\n"
- title: A.6 How about labeling with parameters in the other direction (e.g.,
  contents:
  - "A.6 How about labeling with parameters in the other direction (e.g.,\n    application/xml;\
    \ Content-Feature=iotp)?\n   This proposal fails under the simplest case, of a\
    \ user with neither\n   knowledge of XML nor an XML-capable MIME dispatcher. \
    \ In that case,\n   the user's MIME dispatcher is likely to dispatch the content\
    \ to an\n   XML processing application when the correct default behavior should\n\
    \   be to dispatch the content to the application responsible for the\n   content\
    \ type (e.g., an ecommerce engine for\n   application/iotp+xml[RFC2801], once\
    \ this media type is registered).\n   Note that even if the user had already installed\
    \ the appropriate\n   application (e.g., the ecommerce engine), and that installation\
    \ had\n   updated the MIME registry, many operating system level MIME\n   registries\
    \ such as .mailcap in Unix and HKEY_CLASSES_ROOT in Windows\n   do not currently\
    \ support dispatching off a parameter, and cannot\n   easily be upgraded to do\
    \ so.  And, even if the operating system were\n   upgraded to support this, each\
    \ MIME dispatcher would also separately\n   need to be upgraded.\n"
- title: A.7 How about a new superclass MIME parameter that is defined to apply
  contents:
  - "A.7 How about a new superclass MIME parameter that is defined to apply\n    to\
    \ all MIME types (e.g., Content-Type: application/iotp;\n    $superclass=xml)?\n\
    \   This combines the problems of Appendix A.5 and Appendix A.6.\n   If the sender\
    \ attaches an image/svg+xml file to a message and\n   includes the instructions\
    \ \"Please copy the French text on the road\n   sign\", someone with an XML-aware\
    \ MIME client and an XML browser but\n   no support for SVG can still probably\
    \ open the file and copy the\n   text.  By contrast, with superclasses, the sender\
    \ must add superclass\n   support to her existing mailer AND the receiver must\
    \ add superclass\n   support to his before this transaction can work correctly.\n\
    \   If the receiver comes to rely on the superclass tag being present and\n  \
    \ applications are deployed relying on that tag (as always seems to\n   happen),\
    \ then only upgraded senders will be able to interoperate with\n   those receiving\
    \ applications.\n"
- title: A.8 What about adding a new parameter to the Content-Disposition header
  contents:
  - "A.8 What about adding a new parameter to the Content-Disposition header\n   \
    \ or creating a new Content-Structure header to indicate XML syntax?\n   This\
    \ has nearly identical problems to Appendix A.7, in that it\n   requires both\
    \ senders and receivers to be upgraded, and few if any\n   operating systems and\
    \ MIME dispatchers support working off of\n   anything other than the MIME type.\n"
- title: A.9 How about a new Alternative-Content-Type header?
  contents:
  - "A.9 How about a new Alternative-Content-Type header?\n   This is better than\
    \ Appendix A.8, in that no extra functionality\n   needs to be added to a MIME\
    \ registry to support dispatching of\n   information other than standard content\
    \ types.  However, it still\n   requires both sender and receiver to be upgraded,\
    \ and it will also\n   fail in many cases (e.g., web hosting to an outsourced\
    \ server), where\n   the user can set MIME types (often through implicit mapping\
    \ to file\n   extensions), but has no way of adding arbitrary HTTP headers.\n"
- title: 'A.10 How about using a conneg tag instead (e.g., accept-features:'
  contents:
  - "A.10 How about using a conneg tag instead (e.g., accept-features:\n     (syntax=xml))?\n\
    \   When the conneg protocol is fully defined, this may potentially be a\n   reasonable\
    \ thing to do.  But given the limited current state of\n   conneg[RFC2703] development,\
    \ it is not a credible replacement for a\n   MIME-based solution.\n"
- title: A.11 How about a third-level content-type, such as text/xml/rdf?
  contents:
  - "A.11 How about a third-level content-type, such as text/xml/rdf?\n   MIME explicitly\
    \ defines two levels of content type, the top-level for\n   the kind of content\
    \ and the second-level for the specific media type.\n   [RFC2048] extends this\
    \ in an interoperable way by using prefixes to\n   specify separate trees for\
    \ IETF, vendor, and personal registrations.\n   This specification also extends\
    \ the two-level type by using the '\n   +xml' suffix.  In both cases, processors\
    \ that are unaware of these\n   later specifications treat them as opaque and\
    \ continue to\n   interoperate.  By contrast, adding a third-level type would\
    \ break the\n   current MIME architecture and cause numerous interoperability\n\
    \   failures.\n"
- title: A.12 Why use the plus ('+') character for the suffix '+xml'?
  contents:
  - "A.12 Why use the plus ('+') character for the suffix '+xml'?\n   As specified\
    \ in Section 5.1 of [RFC2045], a tspecial can't be used:\n      tspecials :=\n\
    \      \"(\" / \")\" / \"<\" / \">\" / \"@\" /\n      \",\" / \";\" / \":\" /\
    \ \"\\\" / <\">\n      \"/\" / \"[\" / \"]\" / \"?\" / \"=\"\n   It was thought\
    \ that \".\" would not be a good choice since it is\n   already used as an additional\
    \ hierarchy delimiter.  Also, \"*\" has a\n   common wildcard meaning, and \"\
    -\" and \"_\" are common word separators\n   and easily confused.  The characters\
    \ %'`#& are frequently used for\n   quoting or comments and so are not ideal.\n\
    \   That leaves: ~!$^+{}|\n   Note that \"-\" is used heavily in the current registry.\
    \  \"$\" and \"_\"\n   are used once each.  The others are currently unused.\n\
    \   It was thought that '+' expressed the semantics that a MIME type can\n   be\
    \ treated (for example) as both scalable vector graphics AND ALSO as\n   XML;\
    \ it is both simultaneously.\n"
- title: A.13 What is the semantic difference between application/foo and
  contents:
  - "A.13 What is the semantic difference between application/foo and\n     application/foo+xml?\n\
    \   MIME processors that are unaware of XML will treat the '+xml' suffix\n   as\
    \ completely opaque, so it is essential that no extra semantics be\n   assigned\
    \ to its presence.  Therefore, application/foo and\n   application/foo+xml SHOULD\
    \ be treated as completely independent media\n   types.  Although, for example,\
    \ text/calendar+xml could be an XML\n   version of text/calendar[RFC2445], it\
    \ is possible that this\n   (hypothetical) new media type would include new semantics\
    \ as well as\n   new syntax, and in any case, there would be many applications\
    \ that\n   support text/calendar but had not yet been upgraded to support\n  \
    \ text/calendar+xml.\n"
- title: A.14 What happens when an even better markup language (e.g., EBML) is
  contents:
  - "A.14 What happens when an even better markup language (e.g., EBML) is\n     defined,\
    \ or a new category of data?\n   In the ten years that MIME has existed, XML is\
    \ the first generic data\n   format that has seemed to justify special treatment,\
    \ so it is hoped\n   that no further suffixes will be necessary.  However, if\
    \ some are\n   later defined, and these documents were also XML, they would need\
    \ to\n   specify that the '+xml' suffix is always the outermost suffix (e.g.,\n\
    \   application/foo+ebml+xml not application/foo+xml+ebml).  If they were\n  \
    \ not XML, then they would use a regular suffix (e.g.,\n   application/foo+ebml).\n"
- title: A.15 Why must I use the '+xml' suffix for my new XML-based media type?
  contents:
  - "A.15 Why must I use the '+xml' suffix for my new XML-based media type?\n   You\
    \ don't have to, but unless you have a good reason to explicitly\n   disallow\
    \ generic XML processing, you should use the suffix so as not\n   to curtail the\
    \ options of future users and developers.\n   Whether the inventors of a media\
    \ type, today, design it for dispatch\n   to generic XML processing machinery\
    \ (and most won't) is not the\n   critical issue.  The core notion is that the\
    \ knowledge that some\n   media type happens to use XML syntax opens the door\
    \ to unanticipated\n   kinds of processing beyond those envisioned by its inventors,\
    \ and on\n   this basis identifying such encoding is a good and useful thing.\n\
    \   Developers of new media types are often tightly focused on a\n   particular\
    \ type of processing that meets current needs.  But there is\n   no need to rule\
    \ out generic processing as well, which could make your\n   media type more valuable\
    \ over time.  It is believed that registering\n   with the '+xml' suffix will\
    \ cause no interoperability problems\n   whatsoever, while it may enable significant\
    \ new functionality and\n   interoperability now and in the future.  So, the conservative\n\
    \   approach is to include the '+xml' suffix.\n"
- title: Appendix B. Changes from RFC 2376
  contents:
  - "Appendix B. Changes from RFC 2376\n   There are numerous and significant differences\
    \ between this\n   specification and [RFC2376], which it obsoletes.  This appendix\n\
    \   summarizes the major differences only.\n   First, text/xml-external-parsed-entity\
    \ and application/xml-external-\n   parsed-entity are added as media types for\
    \ external parsed entities,\n   and text/xml and application/xml are now prohibited.\n\
    \   Second, application/xml-dtd is added as a media type for external DTD\n  \
    \ subsets and external parameter entities, and text/xml and\n   application/xml\
    \ are now prohibited.\n   Third, \"utf-16le\" and \"utf-16be\" are added.  RFC\
    \ 2781 has introduced\n   these BOM-less variations of the UTF-16 family.\n  \
    \ Fourth, a naming convention ('+xml') for XML-based media types has\n   been\
    \ added, which also updates [RFC2048] as described in Section 7.\n   By following\
    \ this convention, an XML-based media type can be easily\n   recognized as such.\n"
- title: Appendix C. Acknowledgements
  contents:
  - "Appendix C. Acknowledgements\n   This document reflects the input of numerous\
    \ participants to the\n   ietf-xml-mime@imc.org mailing list, though any errors\
    \ are the\n   responsibility of the authors.  Special thanks to:\n   Mark Baker,\
    \ James Clark, Dan Connolly, Martin Duerst, Ned Freed,\n   Yaron Goland, Rick\
    \ Jelliffe, Larry Masinter, David Megginson, Keith\n   Moore, Chris Newman, Gavin\
    \ Nicol, Marshall Rose, Jim Whitehead and\n   participants of the XML activity\
    \ at the W3C.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
