- title: __initial_text__
  contents:
  - '                        Host Anycasting Service

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This RFC describes an internet anycasting service for IP.  The\n\
    \   primary purpose of this memo is to establish the semantics of an\n   anycasting\
    \ service within an IP internet.  Insofar as is possible,\n   this memo tries\
    \ to be agnostic about how the service is actually\n   provided by the internetwork.\
    \  This memo describes an experimental\n   service and does not propose a protocol.\
    \  This memo is produced by\n   the Internet Research Task Force (IRTF).\n"
- title: Motivation
  contents:
  - "Motivation\n   There are a number of situations in networking where a host,\n\
    \   application, or user wishes to locate a host which supports a\n   particular\
    \ service but, if several servers support the service, does\n   not particularly\
    \ care which server is used.  Anycasting is a\n   internetwork service which meets\
    \ this need.  A host transmits a\n   datagram to an anycast address and the internetwork\
    \ is responsible\n   for providing best effort delivery of the datagram to at\
    \ least one,\n   and preferably only one, of the servers that accept datagrams\
    \ for the\n   anycast address.\n   The motivation for anycasting is that it considerably\
    \ simplifies the\n   task of finding an appropriate server.  For example, users,\
    \ instead\n   of consulting a list of archie servers and choosing the closest\n\
    \   server, could simply type:\n                             telnet archie.net\n\
    \   and be connected to the nearest archie server.  DNS resolvers would\n   no\
    \ longer have to be configured with the IP addresses of their\n   servers, but\
    \ rather could send a query to a well-known DNS anycast\n   address.  Mirrored\
    \ FTP sites could similarly share a single anycast\n   address, and users could\
    \ simply FTP to the anycast address to reach\n   the nearest server.\n"
- title: Architectural Issues
  contents:
  - "Architectural Issues\n   Adding anycasting to the repertoire of IP services requires\
    \ some\n   decisions to be made about how to balance the architectural\n   requirements\
    \ of IP with those of anycasting.  This section discusses\n   these architectural\
    \ issues.\n   The first and most critical architectural issue is how to balance\n\
    \   IP's stateless service with the desire to have an anycast address\n   represent\
    \ a single virtual host.  The best way to illustrate this\n   problem is with\
    \ a couple of examples.  In both of these examples, two\n   hosts (X and Y) are\
    \ serving an anycast address and another host (Z)\n   is using the anycast address\
    \ to contact a service.\n   In the first example, suppose that Z sends a UDP datagram\
    \ addressed\n   to the anycast address.  Now, given that an anycast address is\n\
    \   logically considered the address of a single virtual host, should it\n   be\
    \ possible for the datagram to be delivered to both X and Y?  The\n   answer to\
    \ this question clearly has to be yes, delivery to both X and\n   Y is permissible.\
    \  IP is allowed to duplicate and misroute datagrams\n   so there clearly are\
    \ scenarios in which a single datagram could be\n   delivered to both X and Y.\
    \  The implication of this conclusion is\n   that the definition of anycasting\
    \ in an IP environment is that IP\n   anycasting provides best effort delivery\
    \ of an anycast datagram to\n   one, but possibly more than one, of the hosts\
    \ that serve the\n   destination anycast address.\n   In the second example, suppose\
    \ that Z sends two datagrams addressed\n   to the anycast address.  The first\
    \ datagram gets delivered to X.  To\n   which host (X or Y) does the second datagram\
    \ get delivered?  It would\n   be convenient for stateful protocols like TCP if\
    \ all of a\n   connection's datagrams were delivered to the same anycast address.\n\
    \   However, because IP is stateless (and thus cannot keep track of where\n  \
    \ earlier datagrams were delivered) and because one of the goals of\n   anycasting\
    \ is to support replicated services, it seems clear that the\n   second datagram\
    \ can be delivered to either X or Y.  Stateful\n   protocols will have to employ\
    \ some additional mechanism to ensure\n   that later datagrams are sent to the\
    \ same host.  Suggestions for how\n   to accomplish this for TCP are discussed\
    \ below.\n   After considering the two examples, it seems clear that the correct\n\
    \   definition of IP anycasting is a service which provides a stateless\n   best\
    \ effort delivery of an anycast datagram to at least one host, and\n   preferably\
    \ only one host, which serves the anycast address.  This\n   definition makes\
    \ clear that anycast datagrams receive the same basic\n   type of service as IP\
    \ datagrams.  And while the definition permits\n   delivery to multiple hosts,\
    \ it makes clear that the goal is delivery\n   to just one host.\n"
- title: Anycast Addresses
  contents:
  - "Anycast Addresses\n   There appear to be a number of ways to support anycast\
    \ addresses,\n   some of which use small pieces of the existing address space,\
    \ others\n   of which require that a special class of IP addresses be assigned.\n\
    \   The major advantage of using the existing address space is that it\n   may\
    \ make routing easier.  As an example, consider a situation where a\n   portion\
    \ of each IP network number can be used for anycasting.  I.e.,\n   a site, if\
    \ it desires, could assign a set of its subnet addresses to\n   be anycast addresses.\
    \  If, as some experts expect, anycast routes are\n   treated just like host routes\
    \ by the routing protocols, the anycast\n   addresses would not require special\
    \ advertisement outside the site --\n   the host routes could be folded in with\
    \ the net route.  (If the\n   anycast addresses is supported by hosts outside\
    \ the network, then\n   those hosts would still have be advertised using host\
    \ routes).  The\n   major disadvantages of this approach are (1) that there is\
    \ no easy\n   way for stateful protocols like TCP to discover that an address\
    \ is an\n   anycast address, and (2) it is more difficult to support internet-\n\
    \   wide well-known anycast address.  The reasons TCP needs to know that\n   an\
    \ address is an anycast address is discussed in more detail below.\n   The concern\
    \ about well-known anycast addresses requires a bit of\n   explanation.  The idea\
    \ is that the Internet might establish that a\n   particular anycast address is\
    \ the logical address of the DNS server.\n   Then host software could be configured\
    \ at the manufacturer to always\n   send DNS queries to the DNS anycast address.\
    \  In other words,\n   anycasting could be used to support autoconfiguration of\
    \ DNS\n   resolvers.\n   The major advantages of using a separate class of addresses\
    \ are that\n   it is easy to determine if an address is an anycast address and\n\
    \   well-known anycast addresses are easier to support.  The key\n   disadvantage\
    \ is that routing may be more painful, because the routing\n   protocols may have\
    \ to keep track of more anycast routes.\n   An intermediate approach is to take\
    \ part of the current address space\n   (say 256 Class C addresses) and make the\
    \ network addresses into\n   anycast addresses (and ignore the host part of the\
    \ class C address).\n   The advantage of this approach is that it makes anycast\
    \ routes look\n   like network routes (which are easier for some routing protocols\
    \ to\n   handle).  The disadvantages are that it uses the address space\n   inefficiently\
    \ and so more severely limits the number of anycast\n   addresses that can be\
    \ supported.\n   In the balance it seems wiser to use a separate class of addresses.\n\
    \   Carving anycast addresses from the existing address space seems more\n   likely\
    \ to cause problems in situations in which either applications\n   mistakenly\
    \ fail to recognize anycast addresses (if anycasts are part\n   of each site's\
    \ address space) or use the address space inefficiently\n   (if network addresses\
    \ are used as anycast addresses).  And the\n   advantages of using anycast addresses\
    \ for autoconfiguration seem\n   compelling.  So this memo assumes that anycast\
    \ addresses will be a\n   separate class of IP addresses (not yet assigned). \
    \ Since each\n   anycast address is a virtual host address and the number of\n\
    \   anycasting hosts seems unlikely to be larger than the number of\n   services\
    \ offered by protocols like TCP and UDP, the address space\n   could be quite\
    \ small, perhaps supporting as little as 2**16 different\n   addresses.\n"
- title: Transmission and Reception of Anycast Datagrams
  contents:
  - "Transmission and Reception of Anycast Datagrams\n   Historically, IP services\
    \ have been designed to work even if routers\n   are not present (e.g., on LANs\
    \ without routers).  Furthermore, many\n   in the Internet community have historically\
    \ felt that hosts should\n   not have to participate in routing protocols to operate.\
    \  (See, for\n   instance, page 7 of STD 3, RFC 1122). To provide an anycasting\n\
    \   service that is consistent with these traditions, the handling of\n   anycast\
    \ addresses varies slightly depending on the type of network on\n   which datagrams\
    \ with anycast addresses are sent.\n   On a shared media network, such as an Ethernet\
    \ and or Token Ring, it\n   must be possible to transmit an anycast datagram to\
    \ a server also on\n   the same network without consulting a (possibly non-existent)\
    \ router.\n   There are at least two ways this can be done.\n   One approach is\
    \ to ARP for the anycast address.  Servers which\n   support the anycast address\
    \ can reply to the ARP request, and the\n   sending host can transmit to the first\
    \ server that responds.  This\n   approach is reminiscent of the ARP hack (RFC\
    \ 1027) and like the ARP\n   hack, requires ARP cache timeouts for the anycast\
    \ addresses be kept\n   small (around 1 minute), so that if an anycast server\
    \ goes down,\n   hosts will promptly flush the ARP entry and query for other servers\n\
    \   supporting the anycast address.\n   Another approach is for hosts to transmit\
    \ anycast datagrams on a\n   link-level multicast address.  Hosts which serve\
    \ an anycast address\n   would be expected to listen to the link-level multicast\
    \ address for\n   datagrams destined for their anycast address.  By multicasting\
    \ on the\n   local network, there is no need for a router to route the anycast\n\
    \   datagrams.  One merit of this approach is that if there are multiple\n   servers\
    \ and one goes down, the others will still receive any\n   requests.  Another\
    \ possible advantage is that, because anycast ARP\n   entries must be quickly\
    \ timed out, the multicasting approach may be\n   less traffic intensive than\
    \ the ARP approach because in the ARP\n   approach, transmissions to an anycast\
    \ address are likely to cause a\n   broadcast ARP, while in the multicast approach,\
    \ transmissions are\n   only to a select multicast group.  An obvious disadvantage\
    \ is that if\n   there are multiple servers on a network, they will all receive\
    \ the\n   anycast message, when delivery to only one server was desired.\n   On\
    \ point-to-point links, anycast support is simpler.  A single copy\n   of the\
    \ anycast datagram is forwarded along the appropriate link\n   towards the anycast\
    \ destination.\n   When a router receives an anycast datagram, the router must\
    \ decide if\n   it should forward the datagram, and if so, transmits one copy\
    \ of the\n   datagram to the next hop on the route.  Note that while we may hope\n\
    \   that a router will always know the correct next hop for an anycast\n   datagram\
    \ and will not have to multicast anycast datagrams on a local\n   network, there\
    \ are probably situations in which there are multiple\n   servers on a local network,\
    \ and to avoid sending to one that has\n   recently crashed, routers may wish\
    \ to send anycast datagrams on a\n   link-level multicast address.  Because hosts\
    \ may multicast any\n   datagrams, routers should take care not to forward a datagram\
    \ if they\n   believe that another router will also be forwarding it.\n   Hosts\
    \ which wish to receive datagrams for a particular anycast\n   address will have\
    \ to advertise to routers that they have joined the\n   anycast address.  On shared\
    \ media networks, the best mechanism is\n   probably for a host to periodically\
    \ multicast information about the\n   anycast addresses it supports (possibly\
    \ using an enhanced version of\n   IGMP).  The multicast messages ensure that\
    \ any routers on the network\n   hear that the anycast address is supported on\
    \ the local subnet and\n   can advertise that fact (if appropriate) to neighboring\
    \ routers.\n   Note that if there are no routers on the subnet, the multicast\n\
    \   messages would simply simply ignored.  (The multicasting approach is\n   suggested\
    \ because it seems likely to be simpler and more reliable\n   than developing\
    \ a registration protocol, in which an anycast server\n   must register itself\
    \ with each router on its local network).\n   On point-to-point links, a host\
    \ can simply advertise its anycast\n   addresses to the router on the other end\
    \ of the link.\n   Observe that the advertisement protocols are a form of routing\n\
    \   protocol and that it may make sense to simply require anycast servers\n  \
    \ to participate (at least partly) in exchanges of regular routing\n   messages.\n\
    \   When a host receives an IP datagram destined for an anycast address\n   it\
    \ supports, the host should treat the IP datagram just as if it was\n   destined\
    \ for one of the host's non-anycast IP addresses.  If the host\n   does not support\
    \ the anycast address, it should silently discard the\n   datagram.\n   Hosts\
    \ should accept datagrams with an anycast source address,\n   although some transport\
    \ protocols (see below) may refuse to accept\n   them.\n"
- title: How UDP and TCP Use Anycasting
  contents:
  - "How UDP and TCP Use Anycasting\n   It is important to remember that anycasting\
    \ is a stateless service.\n   An internetwork has no obligation to deliver two\
    \ successive packets\n   sent to the same anycast address to the same host.\n\
    \   Because UDP is stateless and anycasting is a stateless service, UDP\n   can\
    \ treat anycast addresses like regular IP addresses.  A UDP\n   datagram sent\
    \ to an anycast address is just like a unicast UDP\n   datagram from the perspective\
    \ of UDP and its application.  A UDP\n   datagram from an anycast address is like\
    \ a datagram from a unicast\n   address.  Furthermore, a datagram from an anycast\
    \ address to an\n   anycast address can be treated by UDP as just like a unicast\
    \ datagram\n   (although the application semantics of such a datagram are a bit\n\
    \   unclear).\n   TCP's use of anycasting is less straightforward because TCP\
    \ is\n   stateful.  It is hard to envision how one would maintain TCP state\n\
    \   with an anycast peer when two successive TCP segments sent to the\n   anycast\
    \ peer might be delivered to completely different hosts.\n   The solution to this\
    \ problem is to only permit anycast addresses as\n   the remote address of a TCP\
    \ SYN segment (without the ACK bit set).  A\n   TCP can then initiate a connection\
    \ to an anycast address.  When the\n   SYN-ACK is sent back by the host that received\
    \ the anycast segment,\n   the initiating TCP should replace the anycast address\
    \ of its peer,\n   with the address of the host returning the SYN-ACK.  (The initiating\n\
    \   TCP can recognize the connection for which the SYN-ACK is destined by\n  \
    \ treating the anycast address as a wildcard address, which matches any\n   incoming\
    \ SYN-ACK segment with the correct destination port and\n   address and source\
    \ port, provided the SYN-ACK's full address,\n   including source address, does\
    \ not match another connection and the\n   sequence numbers in the SYN-ACK are\
    \ correct.)  This approach ensures\n   that a TCP, after receiving the SYN-ACK\
    \ is always communicating with\n   only one host.\n"
- title: Applications and Anycasting
  contents:
  - "Applications and Anycasting\n   In general, applications use anycast addresses\
    \ like any other IP\n   address.  The only worrisome application use of anycasting\
    \ is\n   applications which try to maintain stateful connections over UDP and\n\
    \   applications which try to maintain state across multiple TCP\n   connections.\
    \  Because anycasting is stateless and does not guarantee\n   delivery of multiple\
    \ anycast datagrams to the same system, an\n   application cannot be sure that\
    \ it is communicating with the same\n   peer in two successive UDP transmissions\
    \ or in two successive TCP\n   connections to the same anycast address.\n   The\
    \ obvious solutions to these issues are to require applications\n   which wish\
    \ to maintain state to learn the unicast address of their\n   peer on the first\
    \ exchange of UDP datagrams or during the first TCP\n   connection and use the\
    \ unicast address in future conversations.\n"
- title: Anycasting and Multicasting
  contents:
  - "Anycasting and Multicasting\n   It has often been suggested that IP multicasting\
    \ can be used for\n   resource location, so it is useful to compare the services\
    \ offered by\n   IP multicasting and IP anycasting.\n   Semantically, the difference\
    \ between the two services is that an\n   anycast address is the address of a\
    \ single (virtual) host and that\n   the internetwork will make an effort to deliver\
    \ anycast datagrams to\n   a single host.  There are two implications of this\
    \ difference.\n   First, applications sending to anycast addresses need not worry\
    \ about\n   managing the TTLs of their IP datagrams.  Applications using\n   multicast\
    \ to find a service must balance their TTLs to maximize the\n   chance of finding\
    \ a server while minimizing the chance of sending\n   datagrams to a large number\
    \ of servers it does not care about.\n   Second, making a TCP connection to an\
    \ anycast address makes perfectly\n   good sense, while the meaning of making\
    \ a TCP connection to a\n   multicast address are unclear.  (A TCP connection\
    \ to a multicast\n   address is presumably trying to establish a connection to\
    \ multiple\n   peers simultaneously, which TCP is not designed to support).\n\
    \   From a practical perspective, the major difference between anycasting\n  \
    \ and multicasting is that anycasting is a special use of unicast\n   addressing\
    \ while multicasting requires more sophisticated routing\n   support.  The important\
    \ observation is that multiple routes to an\n   anycast address appear to a router\
    \ as multiple routes to a unicast\n   destination, and the router can use standard\
    \ algorithms to choose to\n   the best route.\n   Another difference between the\
    \ two approaches is that resource\n   location using multicasting typically causes\
    \ more datagrams to be\n   sent.  To find a server using multicasting, an application\
    \ is\n   expected to transmit and retransmit a multicast datagram with\n   successively\
    \ larger IP TTLs.  The TTL is initially kept small to try\n   to limit the number\
    \ of servers contacted.  However, if no servers\n   respond, the TTL must be increased\
    \ on the assumption that the\n   available servers (if any) were farther away\
    \ than was reachable with\n   the initial TTL.  As a result, resource location\
    \ using multicasting\n   causes one or more multicast datagrams to be sent towards\
    \ multiple\n   servers, with some datagrams' TTLs expiring before reaching a server.\n\
    \   With anycasting, managing the TTL is not required and so (ignoring\n   the\
    \ case of loss) only one datagram need be sent to locate a server.\n   Furthermore,\
    \ this datagram will follow only a single path.\n   A minor difference between\
    \ the two approaches is that anycast may be\n   less fault tolerant than multicast.\
    \  When an anycast server fails,\n   some datagrams may continue to be mistakenly\
    \ routed to the server,\n   whereas if the datagram had been multicast, other\
    \ servers would have\n   received it.\n"
- title: Related Work
  contents:
  - "Related Work\n   The ARPANET AHIP-E Host Access Protocol described in RFC 878\
    \ supports\n   logical addressing which allows several hosts to share a single\n\
    \   logical address.  This scheme could be used to support anycasting\n   within\
    \ a PSN subnet.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   There are at least two security issues in anycasting,\
    \ which are\n   simply mentioned here without suggested solutions.\n   First,\
    \ it is clear that malevolent hosts could volunteer to serve an\n   anycast address\
    \ and divert anycast datagrams from legitimate servers\n   to themselves.\n  \
    \ Second, eavesdropping hosts could reply to anycast queries with\n   inaccurate\
    \ information.  Since there is no way to verify membership\n   in an anycast address,\
    \ there is no way to detect that the\n   eavesdropping host is not serving the\
    \ anycast address to which the\n   original query was sent.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This memo has benefitted from comments from Steve Deering,\
    \ Paul\n   Francis, Christian Huitema, Greg Minshall, Jon Postel, Ram\n   Ramanathan,\
    \ and Bill Simpson.  However, the authors are solely\n   responsible for any dumb\
    \ ideas in this work.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Craig Partridge\n   Bolt Beranek and Newman\n   10 Moulton\
    \ St\n   Cambridge MA 02138\n   EMail: craig@bbn.com\n   Trevor Mendez\n   Bolt\
    \ Beranek and Newman\n   10 Moulton St\n   Cambridge MA 02138\n   EMail: tmendez@bbn.com\n\
    \   Walter Milliken\n   Bolt Beranek and Newman\n   10 Moulton St\n   Cambridge\
    \ MA 02138\n   EMail: milliken@bbn.com\n"
