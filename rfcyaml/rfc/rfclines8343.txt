Abstract This document defines a YANG data model for the management of network interfaces.
It is expected that interface type specific data models augment the generic interfaces data model defined in this document.
The data model includes definitions for configuration and system state (status information and counters for the collection of statistics).
The YANG data model in this document conforms to the Network Management Datastore Architecture (NMDA) defined in RFC 8342.
This document obsoletes RFC 7223.
This document defines a YANG data model [RFC7950] for the management of network interfaces.
It is expected that interface type specific data models will augment the generic interfaces data model defined in this document.
Network interfaces are central to the management of many Internet protocols.
Thus, it is important to establish a common data model for how interfaces are identified, configured, and monitored.
The data model includes configuration data and state data (status information and counters for the collection of statistics).
This version of the interfaces data model supports the Network Management Datastore Architecture (NMDA) [RFC8342].
Summary of Changes from RFC 7223
The "/interfaces state" subtree with "config false" data nodes is deprecated.
All "config false" data nodes are now present in the "/interfaces" subtree.
Servers that do not implement NMDA, or that wish to support clients that do not implement NMDA, MAY implement the deprecated "/interfaces state" tree.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
The following terms are used within this document:  system controlled interface: An interface is said to be system  controlled if the system creates and deletes the interface independently of what has been explicitly configured.
Examples are interfaces representing physical hardware that appear and disappear when hardware (e.g., a line card or hot pluggable wireless interface) is added or removed.
System controlled interfaces may also appear if a certain functionality is enabled (e.g., a loopback interface might appear if the IP protocol stack is enabled).
user controlled interface: An interface is said to be user  controlled if the creation of the interface is controlled by adding explicit interface configuration to the intended configuration and the removal of the interface is controlled by removing explicit interface configuration from the intended configuration.
Examples are VLAN interfaces configured on a system controlled Ethernet interface.
The following terms are defined in [RFC8342] and are not redefined here:  client  server  configuration
system state  operational state  intended configuration
running configuration datastore  operational state datastore
The following terms are defined in [RFC7950] and are not redefined here:  augment  data model
Tree Diagrams Tree diagrams used in this document follow the notation defined in [RFC8340].
This section describes some of the design objectives for the model presented in Section 5.
It is recognized that existing implementations will have to map the interface data model defined in this memo to their proprietary native data model.
To facilitate such mappings, the data model should be simple.
The data model should be suitable for new implementations to use as is, without requiring a mapping to a different native model.
References to interfaces should be as simple as possible, preferably by using a single leafref.
The mapping to ifIndex [RFC2863] used by the Simple Network Management Protocol (SNMP) to identify interfaces must be clear.
The model must support interface layering: both (1) simple layering, where one interface is layered on top of exactly one other interface, and (2) more complex scenarios, where one interface results from the aggregation of N other interfaces or when N interfaces are multiplexed over one other interface.
The data model should support the pre provisioning of interface configuration; that is, it should be possible to configure an interface whose physical interface hardware is not present on the device.
It is recommended that devices that support dynamic addition and removal of physical interfaces also support pre provisioning.
The data model should support physical interfaces as well as logical interfaces.
The data model should include read only counters in order to gather statistics for sent and received octets and packets, received packets with errors, and packets that could not be sent due to errors.
This document defines the YANG module "ietf interfaces", which has the following structure, excluding the deprecated "/interfaces state" subtree: module:
rw link up down trap enable?
yang:date and time  ro if index
date and time  ro in octets?
counter64  ro in unicast pkts?
yang:counter64  ro in broadcast pkts?
counter64  ro in multicast pkts?
counter32  ro in unknown protos?
counter64  ro out unicast pkts?
counter64  ro out broadcast pkts?
counter64  ro out multicast pkts?
The data model for interfaces presented in this document uses a flat list of interfaces ("/interfaces/interface").
Each interface in the list is identified by its name.
Furthermore, each interface has a mandatory "type" leaf.
The "iana if type" module [RFC7224] defines YANG identities for the interface types in the IANA
It is expected that interface type specific data models augment the interface list and possibly use the "type" leaf to make the augmentation conditional.
As an example of such an interface type specific augmentation, consider this YANG snippet.
If the device supports arbitrarily named user controlled interfaces, then the server will advertise the "arbitrary names" feature.
If the server does not advertise this feature, the names of user controlled interfaces MUST match the device's naming scheme.
How a client can learn the naming scheme of such devices is outside the scope of this document.
See Appendices F.1 and F.2 for examples.
When a system controlled interface is created in the operational state by the system, the system tries to apply the interface configuration in the intended configuration with the same name as the new interface.
If no such interface configuration is found, or if the configured type does not match the real interface type, the system creates the interface without applying explicit configuration.
When a user controlled interface is created, the configuration determines the name of the interface.
Depending on the operating system and the physical attachment point to which a network interface may be attached or removed, it may be impossible for an implementation to provide predictable and consistent names for system controlled interfaces across insertion/ removal cycles as well as in anticipation of initial insertion.
The ability to provide configurations for such interfaces is therefore dependent on the implementation and cannot be assumed in all cases.
3.3.  Interface Layering There is no generic mechanism for how an interface is configured to be layered on top of some other interface.
It is expected that interface type specific models define their own data nodes for interface layering by using "interface ref" types to reference lower layers.
Below is an example of a model with such nodes.
when "if:type   'ianaift:ieee8023adLag'"; leaf list slave if { type if:interface ref; must "/if:interfaces/if:interface[if:name   current()]"
other bonding config params, failover times, etc. }
While the interface layering is configured in interface type specific models, two generic state data leaf lists, "higher layer if" and "lower layer if", represent a read only view of the interface layering hierarchy.
Relationship to the IF MIB
If the device implements the IF MIB [RFC2863], each entry in the "/interfaces/interface" list in the operational state is typically mapped to one ifEntry.
The "if index" leaf MUST contain the value of the corresponding ifEntry's ifIndex.
In most cases, the "name" of an "/interfaces/interface" entry is mapped to ifName.
IF MIB allows two different ifEntries to have the same ifName.
Devices that support this feature and also support the data model defined in this document cannot have a 1 1 mapping between the "name" leaf and ifName.
The configured "description" of an "interface" has traditionally been mapped to ifAlias in some implementations.
This document allows this mapping, but implementers should be aware of the differences in the value space and persistence for these objects.
See the YANG module definition of the leaf "description" in Section 5 for details.
The IF MIB also defines the writable object ifPromiscuousMode.
Since this object typically is not implemented as a configuration object by SNMP agents, it is not mapped to the "ietf interfaces" module.
The ifMtu object from the IF MIB is not mapped to the "ietf interfaces" module.
It is expected that interface type  specific YANG modules provide interface type specific MTU leafs by augmenting the "ietf interfaces" model.
There are a number of counters in the IF MIB that exist in two versions: one with 32 bits and one with 64 bits.
The 64 bit versions were added to support high speed interfaces with a data rate greater than 20,000,000 bits/second.
Today's implementations generally support such high speed interfaces; hence, only 64 bit counters are provided in this data model.
Note that the server that implements this module and an SNMP agent may differ in the time granularity in which they provide access to the counters.
For example, it is common that SNMP implementations cache counter values for some time.
The objects ifDescr and ifConnectorPresent from the IF MIB are not mapped to the "ietf interfaces" module.
The following table lists the YANG data nodes with corresponding objects in the IF MIB.
YANG Data Nodes and Related IF MIB Objects 5.
This YANG module imports typedefs from [RFC6991].
interfaces@2018 02 20.yang" module ietf interfaces { yang version 1.1; namespace "urn:ietf:params:xml:ns:
yang:ietf interfaces"; prefix if; import ietf yang types { prefix yang; } organization "IETF NETMOD (Network Modeling) Working Group"; contact
>"; description "This module contains a collection of YANG definitions for managing network interfaces.
IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 8343; see the RFC itself for full legal notices."
; revision 2018 02 20 { description "Updated to support NMDA."
/ typedef interface ref { type leafref { path "/if:interfaces/
"This feature indicates that the device implements the IF MIB."
/ container interfaces { description "Interface parameters."
; list interface { key "name"; description "The list of interfaces on the device.
The status of an interface is available in this list in the operational state.
If the configuration of a system controlled interface cannot be used by the system (e.g., the interface hardware present does not match the interface type), then the configuration is not applied to the system controlled interface shown in the operational state.
If the configuration of a user controlled interface cannot be used by the system, the configured interface is not instantiated in the operational state.
System controlled interfaces created by the system are always present in this list in the operational state, whether or not they are configured."; leaf name { type string; description "The name of the interface.
A device MAY restrict the allowed values for this leaf, possibly depending on the type of the interface.
For system controlled interfaces, this leaf is the device specific name of the interface.
If a client tries to create configuration for a system controlled interface that is not present in the operational state, the server MAY reject the request if the implementation does not support pre provisioning of interfaces or if the name refers to an interface that can never exist in the system.
A Network Configuration Protocol (NETCONF) server MUST reply with an rpc error with the error tag 'invalid value' in this case.
If the device supports pre provisioning of interface configuration, the 'pre provisioning' feature is advertised.
If the device allows arbitrarily named user controlled interfaces, the 'arbitrary names' feature is advertised.
When a configured user controlled interface is created by the system, it is instantiated with the same name in the operational state.
A server implementation MAY map this leaf to the ifName MIB object.
Such an implementation needs to use some mechanism to handle the differences in size and characters allowed between this leaf and ifName.
The definition of such a mechanism is outside the scope of this document."
A server implementation MAY map this leaf to the ifAlias
Such an implementation needs to use some mechanism to handle the differences in size and characters allowed between this leaf and ifAlias.
The definition of such a mechanism is outside the scope of this document.
Since ifAlias is defined to be stored in non volatile storage, the MIB implementation MUST map ifAlias to the value of 'description' in the persistently stored configuration."
When an interface entry is created, a server MAY initialize the type leaf with a valid value, e.g., if it is possible to derive the type from the name of the interface.
If a client tries to set the type of an interface to a value that can never be used by the system, e.g., if the type is not supported or if the type does not match the name of the interface, the server MUST reject the request.
A NETCONF server MUST reply with an rpc error with the error tag 'invalid value' in this case."
Systems that implement the IF MIB use the value of this leaf in the intended configuration to set IF MIB.ifAdminStatus to 'up' or 'down' after an ifEntry has been initialized, as described in RFC 2863.
Changes in this leaf in the intended configuration are reflected in ifAdminStatus."
If this node is not configured, the value 'enabled' is operationally used by the server for interfaces that do not operate on top of any other interface (i.e., there are no 'lower layer if' entries), and 'disabled' otherwise."
; description "The desired state of the interface.
This leaf has the same read semantics as ifAdminStatus."
; } enum down { value 2; description "The interface does not pass any packets."
; } enum testing { value 3; description "In some test mode.
; description "The current operational state of the interface.
This leaf has the same semantics as ifOperStatus."
If the current state was entered prior to the last re initialization of the local network management subsystem, then this node is not present."
For example, for an 802.x interface, this object normally contains a Media Access Control (MAC) address.
The interface's media specific modules must define the bit and byte ordering and the format of the value of this object.
For interfaces that do not have such an address (e.g., a serial line), this node is not present."
A list of references to interfaces layered underneath this interface."
For interfaces that do not vary in bandwidth or for those where no accurate estimation can be made, this node should contain the nominal bandwidth.
For interfaces that have no concept of bandwidth, this node is not present."
If no such discontinuities have occurred since the last re initialization of the local management subsystem, then this node contains the time the local management subsystem re initialized itself."
; } leaf in octets { type yang:counter64; description "The total number of octets received on the interface, including framing characters.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
The number of packets, delivered by this sub layer to a higher (sub )layer, that were addressed to a broadcast address at this sub layer.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
The number of packets, delivered by this sub layer to a higher (sub )layer, that were addressed to a multicast address at this sub layer.
For a MAC layer protocol, this includes both Group and Functional addresses.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
One possible reason for discarding such a packet could be to free up buffer space.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
For character  oriented or fixed length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher layer protocol.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
For character oriented or fixed length interfaces that support protocol multiplexing, the number of transmission units received via the interface that were discarded because of an unknown or unsupported protocol.
For any interface that does not support protocol multiplexing, this counter is not present.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
For a MAC layer protocol, this includes both Group and Functional addresses.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
The number of outbound packets that were chosen to be discarded even though no errors had been detected to prevent their being transmitted.
One possible reason for discarding such a packet could be to free up buffer space.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
For character oriented or fixed length interfaces, the number of outbound transmission units that could not be transmitted because of errors.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
/ typedef interface state ref { type leafref { path "
The list of interfaces on the device.
System controlled interfaces created by the system are always present in this list, whether or not they are configured."; leaf name { type string; status deprecated; description "The name of the interface.
A server implementation MAY map this leaf to the ifName MIB object.
Such an implementation needs to use some mechanism to handle the differences in size and characters allowed between this leaf and ifName.
The definition of such a mechanism is outside the scope of this document."
This leaf has the same read semantics as ifAdminStatus."
; } enum down { value 2; description "The interface does not pass any packets."
; } enum testing { value 3; description "In some test mode.
This leaf has the same semantics as ifOperStatus."
The time the interface entered its current operational state.
If the current state was entered prior to the last re initialization of the local network management subsystem, then this node is not present."
The ifIndex value for the ifEntry represented by this interface."
For example, for an 802.x interface, this object normally contains a Media Access Control (MAC) address.
The interface's media specific modules must define the bit and byte ordering and the format of the value of this object.
For interfaces that do not have such an address (e.g., a serial line), this node is not present."
if { type interface state ref; status deprecated; description "A list of references to interfaces layered underneath this interface."
For interfaces that do not vary in bandwidth or for those where no accurate estimation can be made, this node should contain the nominal bandwidth.
For interfaces that have no concept of bandwidth, this node is not present."
The Interfaces Group MIB ifSpeed, ifHighSpeed"
; } container statistics { status deprecated; description "A collection of interface related statistics objects."; leaf discontinuity time { type yang:date and time;
mandatory true; status deprecated; description "The time on the most recent occasion at which any one or more of this interface's counters suffered a discontinuity.
If no such discontinuities have occurred since the last re initialization of the local management subsystem, then this node contains the time the local management subsystem re initialized itself."
; } leaf in octets { type yang:counter64; status deprecated; description "
The total number of octets received on the interface, including framing characters.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
The number of packets, delivered by this sub layer to a higher (sub )layer, that were not addressed to a multicast or broadcast address at this sub layer.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
The number of packets, delivered by this sub layer to a higher (sub )layer, that were addressed to a broadcast address at this sub layer.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
The number of packets, delivered by this sub layer to a higher (sub )layer, that were addressed to a multicast address at this sub layer.
For a MAC layer protocol, this includes both Group and Functional addresses.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
The number of inbound packets that were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher layer protocol.
One possible reason for discarding such a packet could be to free up buffer space.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
For character  oriented or fixed length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher layer protocol.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
For character oriented or fixed length interfaces that support protocol multiplexing, the number of transmission units received via the interface that were discarded because of an unknown or unsupported protocol.
For any interface that does not support protocol multiplexing, this counter is not present.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
For a MAC layer protocol, this includes both Group and Functional addresses.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
The number of outbound packets that were chosen to be discarded even though no errors had been detected to prevent their being transmitted.
One possible reason for discarding such a packet could be to free up buffer space.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
For character oriented or fixed length interfaces, the number of outbound transmission units that could not be transmitted because of errors.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times as indicated by the value of 'discontinuity time'.
This document registers a URI in the "IETF XML Registry" [RFC3688].
Following the format in RFC 3688, the following registration has been made.
ietf interfaces Registrant Contact: The IESG.
N/A, the requested URI is an XML namespace.
This document registers a YANG module in the "YANG Module Names" registry [RFC6020].
The YANG module specified in this document defines a schema for data that is designed to be accessed via network management protocols such as NETCONF [RFC6241] or RESTCONF [RFC8040].
The lowest NETCONF layer is the secure transport layer, and the mandatory to implement secure transport is Secure Shell (SSH) [RFC6242].
The lowest RESTCONF layer is HTTPS, and the mandatory to implement secure transport is TLS [RFC5246].
The NETCONF access control model [RFC8341] provides the means to restrict access for particular NETCONF or RESTCONF users to a preconfigured subset of all available NETCONF or RESTCONF protocol operations and content.
There are a number of data nodes defined in this YANG module that are writable/creatable/deletable (i.e., config true, which is the default).
These data nodes may be considered sensitive or vulnerable in some network environments.
Write operations (e.g., edit config) to these data nodes without proper protection can have a negative effect on network operations.
These are the subtrees and data nodes and their sensitivity/vulnerability: /interfaces
This list specifies the configured interfaces on a device.
Unauthorized access to this list could cause the device to ignore packets it should receive and process.
/interface/enabled:  This leaf controls whether or not an interface is enabled.
Unauthorized access to this leaf could cause the device to ignore packets it should receive and process.
Appendix A.  Example: Ethernet Interface Module
This section gives a simple example of how an Ethernet interface module could be defined.
It demonstrates how media specific configuration parameters can be conditionally augmented to the generic interface list.
It also shows how operational state parameters can be conditionally augmented to the operational interface list.
The example is not intended as a complete module for Ethernet configuration.
} } Appendix B.  Example:
This section gives an example of how interface layering can be defined.
An Ethernet bonding interface that bonds several Ethernet interfaces into one logical interface is defined.
module example ethernet bonding { namespace "http://example.com/ethernet bonding"; prefix "bond"; import ietf interfaces { prefix if; } import iana if type { prefix ianaift; } augment "/if:interfaces/if:interface" { when "if:type   'ianaift:ieee8023adLag'"; leaf list slave if { type if:interface ref; must "/if:interfaces/
other bonding config params, failover times, etc. }
This section gives an example of how a VLAN interface module can be defined.
module example vlan { namespace "http://example.com/vlan"; prefix "vlan"; import ietf interfaces { prefix if; } import iana if type { prefix ianaift; } augment "/if:interfaces/
This section gives an example of a reply to the NETCONF <get config> request for the running configuration datastore for a device that implements the example data models above.
base:1.0" message id "101"> <data
yang:iana if type" xmlns:vlan "http://example.com/vlan"
> </interface> <interface> <name>eth1</name> <type>
vlan tagging>true</vlan:vlan tagging> </interface> <interface>
: NETCONF <get data> Reply
This section gives an example of a reply to the NETCONF <get data> request for the operational state datastore for a device that implements the example data models above.
This example uses the "origin" annotation, which is defined in the module "ietf origin" [RFC8342].
yang:iana if type" xmlns:vlan "http://example.com/vlan" xmlns:or "urn:ietf:
yang:ietf origin"> <interface or:origin "or:intended"> <name>
if index>2</if index> <phys address>00:01:02:03:04:05</phys address> <statistics
> <discontinuity time> 2013 04 01T03:00:00
if index>7</if index> <phys address>00:01:02:03:04:06</phys address> <higher layer if>eth1.10</higher layer if> <statistics> <discontinuity time
if index>9</if index> <lower layer if>eth1</lower layer if> <statistics> <discontinuity time
This interface is not configured   <interface or:origin "or:system"> <name
> <if index>8</if index> <phys address>00:01:02:03:04:07</phys address>
> <discontinuity time> 2013 04 01T03:00:00
>up</oper status> <if index>1</if index> <statistics> <discontinuity time
> </interfaces> </data> </rpc reply
This section gives examples of some implementation strategies.
The examples make use of the example data model "example vlan" (see Appendix C) to show how user controlled interfaces can be configured.
Router with Restricted Interface Names
In this example, a router has support for 4 line cards, each with 8 ports.
The slots for the cards are physically numbered from 0 to 3, and the ports on each card from 0 to 7.
Each card has Fast Ethernet or Gigabit Ethernet ports.
The device specific names for these physical interfaces are "fastethernet N/M" or "gigabitethernet N/M".
The name of a VLAN interface is restricted to the form "<physical interface name>.<subinterface number>".
It is assumed that the operator is aware of this naming scheme.
The implementation auto initializes the value for "type" based on the interface name.
The NETCONF server does not advertise the "arbitrary names" feature in the <hello> message.
An operator can configure a physical interface by sending an <edit config> containing: <interface nc:operation "create"> <name
> When the server processes this request, it will set the leaf "type" to "ianaift:ethernetCsmacd".
Thus, if the client performs a <get config> right after the <edit config>
above, it will get: <interface> <name>fastethernet 1/0</name
> The client can configure a VLAN interface by sending an <edit config> containing:
<interface nc:operation "create"> <name>fastethernet 1/0.10005</name
> If the client tries to change the type of the physical interface with an <edit config> containing: <interface nc:operation "merge"> <name>fastethernet 1/0</name
then the server will reply with an "invalid value" error, since the new type does not match the name.
Router with Arbitrary Interface Names
In this example, a router has support for 4 line cards, each with 8 ports.
The slots for the cards are physically numbered from 0 to 3, and the ports on each card from 0 to 7.
Each card has Fast Ethernet or Gigabit Ethernet ports.
The device specific names for these physical interfaces are "fastethernet N/M" or "gigabitethernet N/M".
The implementation does not restrict the user controlled interface names.
This allows an operator to more easily apply the interface configuration to a different interface.
However, the additional level of indirection also makes it a bit more complex to map interface names found in other protocols to configuration entries.
The NETCONF server advertises the "arbitrary names" feature in the <hello> message.
Physical interfaces are configured as in Appendix F.1.
An operator can configure a VLAN interface by sending an <edit config> containing: <interface nc:operation "create"> <name>acme
If necessary, the operator can move the configuration named "acme interface" over to a different physical interface with an <edit config
> containing: <interface nc:operation "merge"> <name>acme
Ethernet Switch with Restricted Interface Names
In this example, an Ethernet switch has a number of ports, each identified by a simple port number.
The device specific names for the physical interfaces are numbers that match the physical port number.
An operator can configure a physical interface by sending an <edit config> containing: <interface nc:operation "create"> <name>6</name>
> When the server processes this request, it will set the leaf "type" to "ianaift:ethernetCsmacd".
Thus, if the client performs a <get config> right after the <edit config>
above, it will get: <interface> <name>6</name> <type>ianaift:
Generic Host with Restricted Interface Names
In this example, a generic host has interfaces named by the kernel.
The system identifies the physical interface by the name assigned by the operating system to the interface.
The name of a VLAN interface is restricted to the form "<physical interface name>:<vlan number>".
The NETCONF server does not advertise the "arbitrary names" feature in the <hello> message.
An operator can configure an interface by sending an <edit config> containing: <interface nc:operation "create"> <name>eth8</name> </interface
> When the server processes this request, it will set the leaf "type" to "ianaift:ethernetCsmacd".
Thus, if the client performs a <get config> right after the <edit config>
above, it will get: <interface> <name>eth8</name> <type>ianaift:
> The client can configure a VLAN interface by sending an <edit config> containing:
Generic Host with Arbitrary Interface Names
In this example, a generic host has interfaces named by the kernel.
The system identifies the physical interface by the name assigned by the operating system to the interface.
The implementation does not restrict the user controlled interface names.
This allows an operator to more easily apply the interface configuration to a different interface.
However, the additional level of indirection also makes it a bit more complex to map interface names found in other protocols to configuration entries.
The NETCONF server advertises the "arbitrary names" feature in the <hello> message.
Physical interfaces are configured as in Appendix F.4.
An operator can configure a VLAN interface by sending an <edit config> containing: <interface nc:operation "create"> <name>acme
If necessary, the operator can move the configuration named "acme interface" over to a different physical interface with an <edit config
> containing: <interface nc:operation "merge"> <name>acme
