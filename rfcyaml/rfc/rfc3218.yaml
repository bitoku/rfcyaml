- title: __initial_text__
  contents:
  - "                Preventing the Million Message Attack on\n                  \
    \    Cryptographic Message Syntax\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes a strategy for resisting the Million Message\n\
    \   Attack.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   1\n   2. Overview of PKCS-1  . . . . . . . . . . . . . . . . . .\
    \ . . .   2\n   2.1. The Million Message Attack  . . . . . . . . . . . . . . .\
    \ .   3\n   2.2. Applicability . . . . . . . . . . . . . . . . . . . . . . . \
    \  3\n   2.2.1. Note on Block Cipher Padding  . . . . . . . . . . . . . .   4\n\
    \   2.3. Countermeasures . . . . . . . . . . . . . . . . . . . . . .   4\n   2.3.1.\
    \ Careful Checking  . . . . . . . . . . . . . . . . . . . .   4\n   2.3.2. Random\
    \ Filling  . . . . . . . . . . . . . . . . . . . . .   5\n   2.3.3. OAEP  . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . .   5\n   2.4. Security Considerations\
    \ . . . . . . . . . . . . . . . . . .   6\n   3. Acknowledgments . . . . . . .\
    \ . . . . . . . . . . . . . . . .   6\n   4. References  . . . . . . . . . . .\
    \ . . . . . . . . . . . . . .   6\n   5. Author's Address. . . . . . . . . . .\
    \ . . . . . . . . . . . .   6\n   6. Full Copyright Statement  . . . . . . . .\
    \ . . . . . . . . . .   7\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   When data is encrypted using RSA it must be padded out to\
    \ the length\n   of the modulus -- typically 512 to 2048 bits.  The most popular\n\
    \   technique for doing this is described in [PKCS-1-v1.5].  However, in\n   1998\
    \ Bleichenbacher described an adaptive chosen ciphertext attack on\n   SSL [MMA].\
    \  This attack, called the Million Message Attack, allowed\n   the recovery of\
    \ a single PKCS-1 encrypted block, provided that the\n   attacker could convince\
    \ the receiver to act as a particular kind of\n   oracle. (An oracle is a program\
    \ which answers queries based on\n   information unavailable to the requester\
    \ (in this case the private\n   key)).  The MMA is also possible against [CMS].\
    \  Mail list agents are\n   the most likely CMS implementations to be targets\
    \ for the MMA, since\n   mail list agents are automated servers that automatically\
    \ respond to\n   a large number of messages.  This document describes a strategy\
    \ for\n   resisting such attacks.\n"
- title: 2.  Overview of PKCS-1
  contents:
  - "2.  Overview of PKCS-1\n   The first stage in RSA encryption is to map the message\
    \ to be\n   encrypted (in CMS a symmetric content-encryption key (CEK)) into an\n\
    \   integer the same length as (but numerically less than) the RSA\n   modulus\
    \ of the recipient's public key (typically somewhere between\n   512 and 2048\
    \ bits).  PKCS-1 describes the most common procedure for\n   this transformation.\n\
    \   We start with an \"encryption block\" of the same length as the\n   modulus.\
    \  The rightmost bytes of the block are set to the message to\n   be encrypted.\
    \  The first two bytes are a zero byte and a \"block type\"\n   byte.  For encryption\
    \ the block type is 2.  The remaining bytes are\n   used as padding.  The padding\
    \ is constructed by generating a series\n   of non-zero random bytes.  The last\
    \ padding byte is zero, which\n   allows the padding to be distinguished from\
    \ the message.\n      +---+---+----------------------+---+---------------------+\n\
    \      | 0 | 2 | Nonzero random bytes | 0 |      Message        |\n      +---+---+----------------------+---+---------------------+\n\
    \   Once the block has been formatted, the sender must then convert the\n   block\
    \ into an integer.  This is done by treating the block as an\n   integer in big-endian\
    \ form.  Thus, the resulting number is less than\n   the modulus (because the\
    \ first byte is zero), but within a factor of\n   2^16 (because the second byte\
    \ is 2).\n   In CMS, the message is always a randomly generated symmetric\n  \
    \ content-encryption key (CEK).  Depending on the cipher being used it\n   might\
    \ be anywhere from 8 to 32 bytes.\n   There must be at least 8 bytes of non-zero\
    \ padding.  The padding\n   prevents an attacker from verifying guesses about\
    \ the encrypted\n   message.  Imagine that the attacker wishes to determine whether\
    \ or\n   not two RSA-encrypted keys are the same.  Because there are at least\n\
    \   255^8 (about 2^64) different padding values with high probability two\n  \
    \ encryptions of the same CEK will be different.  The padding also\n   prevents\
    \ the attacker from verifying guessed CEKs by trial-encrypting\n   them with the\
    \ recipient's RSA key since he must try each potential\n   pad for every guess.\
    \  Note that a lower cost attack would be to\n   exhaustively search the CEK space\
    \ by trial-decrypting the content and\n   examining the plaintext to see if it\
    \ appears reasonable.\n"
- title: 2.1.  The Million Message Attack
  contents:
  - "2.1.  The Million Message Attack\n   The purpose of the Million Message Attack\
    \ (MMA) is to recover a\n   single plaintext (formatted block) given the ciphertext\
    \ (encrypted\n   block).  The attacker first captures the ciphertext in transit\
    \ and\n   then uses the recipient as an oracle to recover the plaintext by\n \
    \  sending transformed versions of the ciphertext and observing the\n   recipient's\
    \ response.\n   Call the ciphertext C. The attacker then generates a series of\n\
    \   integers S and computes C'=C*(S^e) mod n.  Upon decryption, C'\n   produces\
    \ a corresponding plaintext M'.  Most values of M' will appear\n   to be garbage\
    \ but some values of M' (about one in 2^16) will have the\n   correct first two\
    \ bytes 00 02 and thus appear to be properly PKCS-1\n   formatted.  The attack\
    \ proceeds by finding a sequence of values S\n   such that the resulting M' is\
    \ properly PKCS-1 formatted.  This\n   information can be used to discover M.\
    \ Operationally, this attack\n   usually requires about 2^20 messages and responses.\
    \  Details can be\n   found in [MMA].\n"
- title: 2.2.  Applicability
  contents:
  - "2.2.  Applicability\n   Since the MMA requires so many messages, it must be mounted\
    \ against a\n   victim who is willing to process a large number of messages. \
    \ In\n   practice, no human is willing to read this many messages and so the\n\
    \   MMA can only be mounted against an automated victim.\n   The MMA also requires\
    \ that the attacker be able to distinguish cases\n   where M' was PKCS-1 formatted\
    \ from cases where it was not.  In the\n   case of CMS the attacker will be sending\
    \ CMS messages with C'\n   replacing the wrapped CEK.  Thus, there are five possibilities:\n\
    \   1. M' is improperly formatted.\n   2. M' is properly formatted but the CEK\
    \ is prima facie bogus (wrong\n      length, etc.)\n   3. M' is properly formatted\
    \ and the CEK appears OK.  A signature or\n      MAC is present so integrity checking\
    \ fails.\n   4. M' is properly formatted and no integrity check is applied.  In\n\
    \      this case there is some possibility (approximately 1/32) that the\n   \
    \   CBC padding block will verify properly.  (The actual probability\n      depends\
    \ highly on the receiving implementation.  See \"Note on\n      Block Cipher Padding\"\
    \ below).  The message will appear OK at the\n      CMS level but will be bogus\
    \ at the application level.\n   5. M' is properly formatted and the resulting\
    \ CEK is correct.  This\n      is extremely improbable but not impossible.\n \
    \  The MMA requires the attacker to be able to distinguish case 1 from\n   cases\
    \ 2-4.  (He can always distinguish case 5, of course).  This\n   might happen\
    \ if the victim returned different errors for each case.\n   The attacker might\
    \ also be able to distinguish these cases based on\n   timing -- decrypting the\
    \ message and verifying the signature takes\n   some time.  If the victim responds\
    \ uniformly to all four errors then\n   no attack is possible.\n"
- title: 2.2.1.  Note on Block Cipher Padding
  contents:
  - "2.2.1.  Note on Block Cipher Padding\n   [CMS] specifies a particular kind of\
    \ block cipher padding in which\n   the final cipher block is padded with bytes\
    \ containing the length of\n   the padding.  For instance, a 5-byte block would\
    \ be padded with three\n   bytes of value 03, as in:\n     XX XX XX XX XX 03 03\
    \ 03\n   [CMS] does not specify how this padding is to be removed but merely\n\
    \   observes that it is unambiguous.  An implementation might simply get\n   the\
    \ value of the final byte and truncate appropriately or might\n   verify that\
    \ all the padding bytes are correct.  If the receiver\n   simply truncates then\
    \ the probability that a random block will appear\n   to be properly padded is\
    \ roughly 1/32.  If the receiver checks all\n   the padding bytes, then the probability\
    \ is 1/256 + (1/256^2) + ...\n   (roughly 1/255).\n"
- title: 2.3.  Countermeasures
  contents:
  - '2.3.  Countermeasures

    '
- title: 2.3.1.  Careful Checking
  contents:
  - "2.3.1.  Careful Checking\n   Even without countermeasures, sufficiently careful\
    \ checking can go\n   quite a long way to mitigating the success of the MMA. \
    \ If the\n   receiving implementation also checks the length of the CEK and the\n\
    \   parity bits (if available) AND responds identically to all such\n   errors,\
    \ the chances of a given M' being properly formatted are\n   substantially decreased.\
    \  This increases the number of probe messages\n   required to recover M. However,\
    \ this sort of checking only increases\n   the workfactor and does not eliminate\
    \ the attack entirely because\n   some messages will still be properly formatted\
    \ up to the point of\n   keylength.  However, the combination of all three kinds\
    \ of checking\n   (padding, length, parity bits) increases the number of messages\
    \ to\n   the point where the attack is impractical.\n"
- title: 2.3.2.  Random Filling
  contents:
  - "2.3.2.  Random Filling\n   The simplest countermeasure is to treat misformatted\
    \ messages as if\n   they were properly PKCS-1 formatted.  When the victim detects\
    \ an\n   improperly formatted message, instead of returning an error he\n   substitutes\
    \ a randomly generated message.  In CMS, since the message\n   is always a wrapped\
    \ content-encryption key (CEK) the victim should\n   simply substitute a randomly\
    \ generated CEK of appropriate length and\n   continue.  Eventually this will\
    \ result in a decryption or signature\n   verification error but this is exactly\
    \ what would have happened if M'\n   happened to be properly formatted but contained\
    \ an incorrect CEK.\n   Note that this approach also prevents the attacker from\n\
    \   distinguishing various failure cases via timing since all failures\n   return\
    \ roughly the same timing behavior.  (The time required to\n   generate the random-padding\
    \ is negligible in almost all cases.  If an\n   implementation has a very slow\
    \ PRNG it can generate random padding\n   for every message and simply discard\
    \ it if the CEK decrypts\n   correctly).\n   In a layered implementation it's\
    \ quite possible that the PKCS-1 check\n   occurs at a point in the code where\
    \ the length of the expected CEK is\n   not known.  In that case the implementation\
    \ must ensure that bad\n   PKCS-1 padding and ok-looking PKCS-1 padding with an\
    \ incorrect length\n   CEK behave the same.  An easy way to do this is to also\
    \ randomize\n   CEKs that are of the wrong length or otherwise improperly formatted\n\
    \   when they are processed at the layer that knows the length.\n   Note: It is\
    \ a mistake to use a fixed CEK because the attacker could\n   then produce a CMS\
    \ message encrypted with that CEK.  This message\n   would decrypt properly (i.e.\
    \ appear to be a completely valid CMS\n   application to the receiver), thus allowing\
    \ the attacker to determine\n   that the PKCS-1 formatting was incorrect.  In\
    \ fact, the new CEK\n   should be cryptographically random, thus preventing the\
    \ attacker from\n   guessing the next \"random\" CEK to be used.\n"
- title: 2.3.3.  OAEP
  contents:
  - "2.3.3.  OAEP\n   Optimal Asymmetric Encryption Padding (OAEP) [OAEP, PKCS-1-v2]\
    \ is\n   another technique for padding a message into an RSA encryption block.\n\
    \   Implementations using OAEP are not susceptible to the MMA.  However,\n   OAEP\
    \ is incompatible with PKCS-1.  Implementations of S/MIME and CMS\n   must therefore\
    \ continue to use PKCS-1 for the foreseeable future if\n   they wish to communicate\
    \ with current widely deployed\n   implementations.  OAEP is being specified for\
    \ use with AES keys in\n   CMS so this provides an upgrade path to OAEP.\n"
- title: 2.4.  Security Considerations
  contents:
  - "2.4.  Security Considerations\n   This entire document describes how to avoid\
    \ a certain class of\n   attacks when performing PKCS-1 decryption with RSA.\n"
- title: 3.  Acknowledgments
  contents:
  - "3.  Acknowledgments\n   Thanks to Burt Kaliski and Russ Housley for their extensive\
    \ and\n   helpful comments.\n"
- title: 4.  References
  contents:
  - "4.  References\n   [CMS]         Housley, R., \"Cryptographic Message Syntax\"\
    , RFC 2630,\n                 June 1999.\n   [MMA]         Bleichenbacher, D.,\
    \ \"Chosen Ciphertext Attacks against\n                 Protocols based on RSA\
    \ Encryption Standard PKCS #1\",\n                 Advances in Cryptology -- CRYPTO\
    \ 98.\n   [MMAUPDATE]   D. Bleichenbacher, B. Kaliski, and J. Staddon, \"Recent\n\
    \                 Results on PKCS #1: RSA Encryption Standard\", RSA\n       \
    \          Laboratories' Bulletin #7, June 26, 1998.\n   [OAEP]        Bellare,\
    \ M., Rogaway, P., \"Optimal Asymmetric\n                 Encryption Padding\"\
    , Advances in Cryptology --\n                 Eurocrypt 94.\n   [PKCS-1-v1.5]\
    \ Kaliski, B., \"PKCS #1: RSA Encryption, Version 1.5.\",\n                 RFC\
    \ 2313, March 1998.\n   [PKCS-1-v2]   Kaliski, B., \"PKCS #1: RSA Encryption,\
    \ Version 2.0\",\n                 RFC 2347, October 1998.\n"
- title: 5.  Author's Address
  contents:
  - "5.  Author's Address\n   Eric Rescorla\n   RTFM, Inc.\n   2064 Edgewood Drive\n\
    \   Palo Alto, CA 94303\n   Phone: (650) 320-8549\n   EMail: ekr@rtfm.com\n"
- title: 6.  Full Copyright Statement
  contents:
  - "6.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
