- title: __initial_text__
  contents:
  - '                      Use of HTTP State Management

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The IESG notes that this mechanism makes use of the .local top-level\n\
    \   domain (TLD) internally when handling host names that don't contain\n   any\
    \ dots, and that this mechanism might not work in the expected way\n   should\
    \ an actual .local TLD ever be registered.\n"
- title: Abstract
  contents:
  - "Abstract\n   The mechanisms described in \"HTTP State Management Mechanism\"\
    \ (RFC-\n   2965), and its predecessor (RFC-2109), can be used for many different\n\
    \   purposes.  However, some current and potential uses of the protocol\n   are\
    \ controversial because they have significant user privacy and\n   security implications.\
    \  This memo identifies specific uses of\n   Hypertext Transfer Protocol (HTTP)\
    \ State Management protocol which\n   are either (a) not recommended by the IETF,\
    \ or (b) believed to be\n   harmful, and discouraged.  This memo also details\
    \ additional privacy\n   considerations which are not covered by the HTTP State\
    \ Management\n   protocol specification.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The HTTP State Management mechanism is both useful and controversial.\n\
    \   It is useful because numerous applications of HTTP benefit from the\n   ability\
    \ to save state between HTTP transactions, without encoding\n   such state in\
    \ URLs.  It is controversial because the mechanism has\n   been used to accomplish\
    \ things for which it was not designed and is\n   not well-suited.  Some of these\
    \ uses have attracted a great deal of\n   public criticism because they threaten\
    \ to violate the privacy of web\n   users, specifically by leaking potentially\
    \ sensitive information to\n   third parties such as the Web sites a user has\
    \ visited.  There are\n   also other uses of HTTP State Management which are inappropriate\
    \ even\n   though they do not threaten user privacy.\n   This memo therefore identifies\
    \ uses of the HTTP State Management\n   protocol specified in RFC-2965 which are\
    \ not recommended by the IETF,\n   or which are believed to be harmful and are\
    \ therefore discouraged.\n   This document occasionally uses terms that appear\
    \ in capital letters.\n   When the terms \"MUST\", \"MUST NOT\", \"SHOULD\", \"\
    SHOULD NOT\", and \"MAY\"\n   appear capitalized, they are being used to indicate\
    \ particular\n   requirements of this specification.  A discussion of the meanings\
    \ of\n   the terms \"MUST\", \"SHOULD\", and \"MAY\" appears in [RFC-1123]; the\n\
    \   terms \"MUST NOT\" and \"SHOULD NOT\" are logical extensions of this\n   usage.\n"
- title: 2.  Uses of HTTP State Management
  contents:
  - "2.  Uses of HTTP State Management\n   The purpose of HTTP State Management is\
    \ to allow an HTTP-based\n   service to create stateful \"sessions\" which persist\
    \ across multiple\n   HTTP transactions.  A single session may involve transactions\
    \ with\n   multiple server hosts.  Multiple client hosts may also be involved\
    \ in\n   a single session when the session data for a particular user is\n   shared\
    \ between client hosts (e.g., via a networked file system).  In\n   other words,\
    \ the \"session\" retains state between a \"user\" and a\n   \"service\", not\
    \ between particular hosts.\n   It's important to realize that similar capabilities\
    \ may also be\n   achieved using the \"bare\" HTTP protocol, and/or dynamically-generated\n\
    \   HTML, without the State Management extensions.  For example, state\n   information\
    \ can be transmitted from the service to the user by\n   embedding a session identifier\
    \ in one or more URLs which appear in\n   HTTP redirects, or dynamically generated\
    \ HTML; and the state\n   information may be returned from the user to the service\
    \ when such\n   URLs appear in a GET or POST request.  HTML forms can also be\
    \ used to\n   pass state information from the service to the user and back, without\n\
    \   the user being aware of this happening.\n   However, the HTTP State Management\
    \ facility does provide an increase\n   in functionality over ordinary HTTP and\
    \ HTML.  In practice, this\n   additional functionality includes:\n   (1)   The\
    \ ability to exchange URLs between users, of resources\n         accessed during\
    \ stateful sessions, without leaking the state\n         information associated\
    \ with those sessions.  (e.g. \"Here's the\n         URL for the FooCorp web catalog\
    \ entry for those sandals that\n         you wanted.\")\n   (2)   The ability\
    \ to maintain session state without \"cache-busting\".\n         That is, separating\
    \ the session state from the URL allows a web\n         cache to maintain only\
    \ a single copy of the named resource.  If\n         the state is maintained in\
    \ session-specific URLs, the cache\n         would likely have to maintain several\
    \ identical copies of the\n         resource.\n   (3)   The ability to implement\
    \ sessions with minimal server\n         configuration and minimal protocol overhead,\
    \ as compared to\n         other techniques of maintaining session state.\n  \
    \ (4)   The ability to associate the user with session state whenever a\n    \
    \     user accesses the service, regardless of whether the user\n         enters\
    \ through a particular \"home page\" or \"portal\".\n   (5)   The ability to save\
    \ session information in stable storage, so\n         that a \"session\" can be\
    \ maintained across client invocations,\n         system reboots, and client or\
    \ system crashes.\n"
- title: 2.1.  Recommended Uses
  contents:
  - "2.1.  Recommended Uses\n   Use of HTTP State Management is appropriate whenever\
    \ it is desirable\n   to maintain state between a user and a service across multiple\
    \ HTTP\n   transactions, provided that:\n   (1)   the user is aware that session\
    \ state is being maintained and\n         consents to it,\n   (2)   the user has\
    \ the ability to delete the state associated with\n         such a session at\
    \ any time,\n   (3)   the information obtained through the ability to track the\n\
    \         user's usage of the service is not disclosed to other parties\n    \
    \     without the user's explicit consent, and\n   (4)   session information itself\
    \ cannot contain sensitive information\n         and cannot be used to obtain\
    \ sensitive information that is not\n         otherwise available to an eavesdropper.\n\
    \   This last point is important because cookies are usually sent in the\n   clear\
    \ and hence are readily available to eavesdroppers.\n   An example of such a recommended\
    \ use would be a \"shopping cart\",\n   where the existence of the shopping cart\
    \ is explicitly made known to\n   the user, the user can explicitly \"empty\"\
    \ his or her shopping cart\n   (either by requesting that it be emptied or by\
    \ purchasing those\n   items) and thus cause the shared state to be discarded,\
    \ and the\n   service asserts that it will not disclose the user's shopping or\n\
    \   browsing habits to third parties without the user's consent.\n   Note that\
    \ the HTTP State Management protocol effectively allows a\n   service provider\
    \ to refuse to provide a service, or provide a reduced\n   level of service, if\
    \ the user or a user's client fails to honor a\n   request to maintain session\
    \ state.  Absent legal prohibition to the\n   contrary, the server MAY refuse\
    \ to provide the service, or provide a\n   reduced level of service, under these\
    \ conditions.  As a purely\n   practical consideration, services designed to utilize\
    \ HTTP State\n   Management may be unable to function properly if the client does\
    \ not\n   provide it.  Such servers SHOULD gracefully handle such conditions\n\
    \   and explain to the user why the full level of service is not\n   available.\n"
- title: 2.2.  Problematic Uses
  contents:
  - "2.2.  Problematic Uses\n   The following uses of HTTP State Management are deemed\
    \ inappropriate\n   and contrary to this specification:\n"
- title: 2.2.1.  Leakage of Information to Third Parties
  contents:
  - "2.2.1.  Leakage of Information to Third Parties\n   HTTP State Management MUST\
    \ NOT be used to leak information about the\n   user or the user's browsing habits\
    \ to other parties besides the user\n   or service, without the user's explicit\
    \ consent.  Such usage is\n   prohibited even if the user's name or other externally-assigned\n\
    \   identifier are not exposed to other parties, because the state\n   management\
    \ mechanism itself provides an identifier which can be used\n   to compile information\
    \ about the user.\n   Because such practices encourage users to defeat HTTP State\n\
    \   Management mechanisms, they tend to reduce the effectiveness of HTTP\n   State\
    \ Management, and are therefore considered detrimental to the\n   operation of\
    \ the web.\n"
- title: 2.2.2.  Use as an Authentication Mechanism
  contents:
  - "2.2.2.  Use as an Authentication Mechanism\n   It is generally inappropriate\
    \ to use the HTTP State Management\n   protocol as an authentication mechanism.\
    \  HTTP State Management is\n   not designed with such use in mind, and safeguards\
    \ for protection of\n   authentication credentials are lacking in both the protocol\n\
    \   specification and in widely deployed HTTP clients and servers.  Most\n   HTTP\
    \ sessions are not encrypted and \"cookies\" may therefore be\n   exposed to passive\
    \ eavesdroppers.  Furthermore, HTTP clients and\n   servers typically store \"\
    cookies\" in cleartext with little or no\n   protection against exposure.  HTTP\
    \ State Management therefore SHOULD\n   NOT be used as an authentication mechanism\
    \ to protect information\n   from being exposed to unauthorized parties, even\
    \ if the HTTP sessions\n   are encrypted.\n   The prohibition against using HTTP\
    \ State Management for\n   authentication includes both its use to protect information\
    \ which is\n   provided by the service, and its use to protect potentially sensitive\n\
    \   information about the user which is entrusted to the service's care.\n   For\
    \ example, it would be inappropriate to expose a user's name,\n   address, telephone\
    \ number, or billing information to a client that\n   merely presented a cookie\
    \ which had been previously associated with\n   the user.\n   Similarly, HTTP\
    \ State Management SHOULD NOT be used to authenticate\n   user requests if unauthorized\
    \ requests might have undesirable side-\n   effects for the user, unless the user\
    \ is aware of the potential for\n   such side-effects and explicitly consents\
    \ to such use.  For example,\n   a service which allowed a user to order merchandise\
    \ with a single\n   \"click\", based entirely on the user's stored \"cookies\"\
    , could\n   inconvenience the user by requiring her to dispute charges to her\n\
    \   credit card, and/or return the unwanted merchandise, in the event\n   that\
    \ the cookies were exposed to third parties.\n   Some uses of HTTP State Management\
    \ to identify users may be\n   relatively harmless, for example, if the only information\
    \ which can\n   be thus exposed belongs to the service, and the service will suffer\n\
    \   little harm from the exposure of such information.\n"
- title: 3.  User Interface Considerations for HTTP State Management
  contents:
  - "3.  User Interface Considerations for HTTP State Management\n   HTTP State Management\
    \ has been very controversial because of its\n   potential to expose information\
    \ about a user's browsing habits to\n   third parties, without the knowledge or\
    \ consent of the user.  While\n   such exposure is possible, this is less a flaw\
    \ in the protocol itself\n   than a failure of HTTP client implementations (and\
    \ of some providers\n   of HTTP-based services) to protect users' interests.\n\
    \   As implied above, there are other ways to maintain session state than\n  \
    \ using HTTP State Management, and therefore other ways in which users'\n   browsing\
    \ habits can be tracked.  Indeed, it is difficult to imagine\n   how the HTTP\
    \ protocol or an HTTP client could actually prevent a\n   service from disclosing\
    \ a user's \"click trail\" to other parties if\n   the service chose to do so.\
    \  Protection of such information from\n   inappropriate exposure must therefore\
    \ be the responsibility of the\n   service.  HTTP client implementations inherently\
    \ cannot provide such\n   protection, though they can implement countermeasures\
    \ which make it\n   more difficult for HTTP State Management to be used as the\
    \ mechanism\n   by which such information is exposed.\n   It is arguable that\
    \ HTTP clients should provide more protection in\n   general against inappropriate\
    \ exposure of tracking information,\n   regardless of whether the exposure were\
    \ facilitated by use of HTTP\n   State Management or by some other means.  However,\
    \ issues related to\n   other mechanisms are beyond the scope of this memo.\n"
- title: 3.1.  Capabilities Required of an HTTP Client
  contents:
  - "3.1.  Capabilities Required of an HTTP Client\n   A user's willingness to consent\
    \ to use of HTTP State Management is\n   likely to vary from one service to another,\
    \ according to whether the\n   user trusts the service to use the information\
    \ appropriately and to\n   limit its exposure to other parties.  The user therefore\
    \ SHOULD be\n   able to control whether his client supports a service's request\
    \ to\n   use HTTP State Management, on a per-service basis.  In particular:\n\
    \   (1)   Clients MUST NOT respond to HTTP State Management requests\n       \
    \  unless explicitly enabled by the user.\n   (2)   Clients SHOULD provide an\
    \ effective interface which allows\n         users to review, and approve or refuse,\
    \ any particular requests\n         from a server to maintain state information,\
    \ before the client\n         provides any state information to the server.\n\
    \   (3)   Clients SHOULD provide an effective interface which allows\n       \
    \  users to instruct their clients to ignore all requests from a\n         particular\
    \ service to maintain state information, on a per-\n         service basis, immediately\
    \ in response to any particular\n         request from a server, before the client\
    \ provides any state\n         information to the server.\n   (4)   Clients SHOULD\
    \ provide an effective interface which allows a\n         user to disable future\
    \ transmission of any state information to\n         a service, and/or discard\
    \ any saved state information for that\n         service, even though the user\
    \ has previously approved a\n         service's request to maintain state information.\n\
    \   (5)   Clients SHOULD provide an effective interface which allows a\n     \
    \    user to terminate a previous request not to retain state\n         management\
    \ information for a given service.\n"
- title: 3.2.  Limitations of the domain-match algorithm
  contents:
  - "3.2.  Limitations of the domain-match algorithm\n   The domain-match algorithm\
    \ in RFC-2965 section 2 is intended as a\n   heuristic to allow a client to \"\
    guess\" whether or not two domains are\n   part of the same service.  There are\
    \ few rules about how domain names\n   can be used, and the structure of domain\
    \ names and how they are\n   delegated varies from one top-level domain to another\
    \ (i.e. the\n   client cannot tell which part of the domain was assigned to the\n\
    \   service).  Therefore NO string comparison algorithm (including the\n   domain-match\
    \ algorithm) can be relied on to distinguish a domain that\n   belongs to a particular\
    \ service, from a domain that belongs to\n   another party.\n   As stated above,\
    \ each service is ultimately responsible for ensuring\n   that user information\
    \ is not inappropriately leaked to third parties.\n   Leaking information to third\
    \ parties via State Management by careful\n   selection of domain names, or by\
    \ assigning domain names to hosts\n   maintained by third parties, is at least\
    \ as inappropriate as leaking\n   the same information by other means.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This entire memo is about security considerations.\n"
- title: 5.  Authors' Addresses
  contents:
  - "5.  Authors' Addresses\n   Keith Moore\n   University of Tennessee Computer Science\
    \ Department\n   1122 Volunteer Blvd, Suite 203\n   Knoxville TN, 37996-3450\n\
    \   EMail: moore@cs.utk.edu\n   Ned Freed\n   Innosoft International, Inc.\n \
    \  1050 Lakes Drive\n   West Covina, CA 81790\n   EMail: ned.freed@innosoft.com\n"
- title: 6.  References
  contents:
  - "6.  References\n   [RFC 1123] Braden, R., \"Requirements for Internet Hosts --\n\
    \              Application and Support\", STD 3, RFC 1123, October 1989.\n   [RFC\
    \ 2965] Kristol, D. and L. Montulli, \"HTTP State Management\n              Mechanism\"\
    , RFC 2965, October 2000.\n   [RFC 2109] Kristol, D. and L. Montulli, \"HTTP State\
    \ Management\n              Mechanism\", RFC 2109, February 1997.\n"
- title: 7.  Full Copyright Statement
  contents:
  - "7.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
