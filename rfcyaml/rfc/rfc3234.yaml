- title: __initial_text__
  contents:
  - '                    Middleboxes: Taxonomy and Issues

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is intended as part of an IETF discussion about\n\
    \   \"middleboxes\" - defined as any intermediary box performing functions\n \
    \  apart from normal, standard functions of an IP router on the data\n   path\
    \ between a source host and destination host.  This document\n   establishes a\
    \ catalogue or taxonomy of middleboxes, cites previous\n   and current IETF work\
    \ concerning middleboxes, and attempts to\n   identify some preliminary conclusions.\
    \  It does not, however, claim\n   to be definitive.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction and Goals.........................................\
    \  3\n   1.1. Terminology..................................................  3\n\
    \   1.2. The Hourglass Model, Past and Future.........................  3\n  \
    \ 1.4. Goals of this Document.......................................  4\n   2.\
    \ A catalogue of middleboxes.....................................  5\n   2.1 NAT...........................................................\
    \  6\n   2.2 NAT-PT........................................................  7\n\
    \   2.3 SOCKS gateway.................................................  7\n  \
    \ 2.4 IP Tunnel Endpoints...........................................  8\n   2.5.\
    \ Packet classifiers, markers and schedulers...................  8\n   2.6 Transport\
    \ relay...............................................  9\n   2.7. TCP performance\
    \ enhancing proxies............................ 10\n   2.8. Load balancers that\
    \ divert/munge packets..................... 10\n   2.9. IP Firewalls.................................................\
    \ 11\n   2.10. Application Firewalls....................................... 11\n\
    \   2.11. Application-level gateways.................................. 12\n  \
    \ 2.12. Gatekeepers/ session control boxes.......................... 12\n   2.13.\
    \ Transcoders................................................. 12\n   2.14. Proxies.....................................................\
    \ 13\n   2.15. Caches...................................................... 14\n\
    \   2.16. Modified DNS servers........................................ 14\n  \
    \ 2.17. Content and applications distribution boxes................. 15\n   2.18.\
    \ Load balancers that divert/munge URLs....................... 16\n   2.19. Application-level\
    \ interceptors.............................. 16\n   2.20. Application-level multicast.................................\
    \ 16\n   2.21. Involuntary packet redirection.............................. 16\n\
    \   2.22. Anonymisers................................................. 17\n  \
    \ 2.23. Not included................................................ 17\n   2.24.\
    \ Summary of facets........................................... 17\n   3. Ongoing\
    \ work in the IETF and elsewhere......................... 18\n   4. Comments and\
    \ Issues............................................ 19\n   4.1. The end to end\
    \ principle under challenge..................... 19\n   4.2. Failure handling.............................................\
    \ 20\n   4.3. Failures at multiple layers.................................. 21\n\
    \   4.4. Multihop application protocols............................... 21\n  \
    \ 4.5. Common features.............................................. 22\n   5.\
    \ Security Considerations........................................ 22\n   6. Acknowledgements...............................................\
    \ 23\n   7. References..................................................... 23\n\
    \   Authors' Addresses................................................ 26\n  \
    \ Acknowledgement................................................... 26\n   Full\
    \ Copyright Statement.......................................... 27\n"
- title: 1. Introduction and Goals
  contents:
  - '1. Introduction and Goals

    '
- title: 1.1. Terminology
  contents:
  - "1.1. Terminology\n   The phrase \"middlebox\" was coined by Lixia Zhang as a\
    \ graphic\n   description of a recent phenomenon in the Internet.  A middlebox\
    \ is\n   defined as any intermediary device performing functions other than\n\
    \   the normal, standard functions of an IP router on the datagram path\n   between\
    \ a source host and destination host.\n   In some discussions, especially those\
    \ concentrating on HTTP traffic,\n   the word \"intermediary\" is used.  For the\
    \ present document, we prefer\n   the more graphic phrase.  Of course, a middlebox\
    \ can be virtual,\n   i.e., an embedded function of some other box.  It should\
    \ not be\n   interpreted as necessarily referring to a separate physical box.\
    \  It\n   may be a device that terminates one IP packet flow and originates\n\
    \   another, or a device that transforms or diverts an IP packet flow in\n   some\
    \ way, or a combination.  In any case it is never the ultimate\n   end-system\
    \ of an applications session.\n   Normal, standard IP routing functions (i.e.,\
    \ the route discovery and\n   selection functions described in [RFC 1812], and\
    \ their equivalent for\n   IPv6) are not considered to be middlebox functions;\
    \ a standard IP\n   router is essentially transparent to IP packets.  Other functions\n\
    \   taking place within the IP layer may be considered to be middlebox\n   functions,\
    \ but functions below the IP layer are excluded from the\n   definition.\n   There\
    \ is some discrepancy in the way the word \"routing\" is used in\n   the community.\
    \  Some people use it in the narrow, traditional sense\n   of path selection based\
    \ on IP address, i.e., the decision-making\n   action of an IP router.  Others\
    \ use it in the sense of higher layer\n   decision-making (based perhaps on a\
    \ URL or other applications layer\n   string).  In either case it implies a choice\
    \ of outbound direction,\n   not the mere forwarding of a packet in the only direction\
    \ available.\n   In this document, the traditional sense is always qualified as\
    \ \"IP\n   routing.\"\n"
- title: 1.2. The Hourglass Model, Past and Future
  contents:
  - "1.2. The Hourglass Model, Past and Future\n   The classical description of the\
    \ Internet architecture is based\n   around the hourglass model [HOURG] and the\
    \ end-to-end principle\n   [Clark88, Saltzer].  The hourglass model depicts the\
    \ protocol\n   architecture as a narrow-necked hourglass, with all upper layers\n\
    \   riding over a single IP protocol, which itself rides over a variety\n   of\
    \ hardware layers.\n   The end-to-end principle asserts that some functions (such\
    \ as\n   security and reliability) can only be implemented completely and\n  \
    \ correctly end-to-end, with the help of the end points.  The end-to-\n   end\
    \ principle notes that providing an incomplete version of such\n   functions in\
    \ the network itself can sometimes be useful as a\n   performance enhancement,\
    \ but not as a substitute for the end-to-end\n   implementation of the function.\
    \  The references above, and [RFC\n   1958], go into more detail.\n   In this\
    \ architecture, the only boxes in the neck of the hourglass are\n   IP routers,\
    \ and their only function is to determine routes and\n   forward packets (while\
    \ also updating fields necessary for the\n   forwarding process).  This is why\
    \ they are not classed as\n   middleboxes.\n   Today, we observe deviations from\
    \ this model, caused by the insertion\n   in the network of numerous middleboxes\
    \ performing functions other\n   than IP forwarding.  Viewed in one way, these\
    \ boxes are a challenge\n   to the transparency of the network layer [RFC 2775].\
    \  Viewed another\n   way, they are a challenge to the hourglass model: although\
    \ the IP\n   layer does not go away, middleboxes dilute its significance as the\n\
    \   single necessary feature of all communications sessions.  Instead of\n   concentrating\
    \ diversity and function at the end systems, they spread\n   diversity and function\
    \ throughout the network.\n   This is a matter of concern for several reasons:\n\
    \   *  New middleboxes challenge old protocols.  Protocols designed\n      without\
    \ consideration of middleboxes may fail, predictably or\n      unpredictably,\
    \ in the presence of middleboxes.\n   *  Middleboxes introduce new failure modes;\
    \ rerouting of IP packets\n      around crashed routers is no longer the only\
    \ case to consider.\n      The fate of sessions involving crashed middleboxes\
    \ must also be\n      considered.\n   *  Configuration is no longer limited to\
    \ the two ends of a session;\n      middleboxes may also require configuration\
    \ and management.\n   *  Diagnosis of failures and misconfigurations is more complex.\n"
- title: 1.4. Goals of this Document
  contents:
  - "1.4. Goals of this Document\n   The principle goal of this document is to describe\
    \ and analyse the\n   current impact of middleboxes on the architecture of the\
    \ Internet and\n   its applications.  From this, we attempt to identify some general\n\
    \   conclusions.\n   Goals that might follow on from this work are:\n   *  to\
    \ identify harmful and harmless practices,\n   *  to suggest architectural guidelines\
    \ for application protocol and\n      middlebox design,\n   *  to identify requirements\
    \ and dependencies for common functions in\n      the middlebox environment,\n\
    \   *  to derive a system design for standardisation of these functions,\n   *\
    \  to identify additional work that should be done in the IETF and\n      IRTF.\n\
    \   An implied goal is to identify any necessary updates to the\n   Architectural\
    \ Principles of the Internet [RFC 1958].\n   The document initially establishes\
    \ a catalogue of middleboxes, and\n   cites previous or current IETF work concerning\
    \ middleboxes, before\n   proceeding to discussion and conclusions.\n"
- title: 2. A catalogue of middleboxes
  contents:
  - "2. A catalogue of middleboxes\n   The core of this document is a catalogue of\
    \ a number of types of\n   middlebox.  There is no obvious way of classifying\
    \ them to form a\n   hierarchy or other simple form of taxonomy.  Middleboxes\
    \ have a\n   number of facets that might be used to classify them in a\n   multidimensional\
    \ taxonomy.\n   DISCLAIMER: These facets, many of distinctions between different\n\
    \   types of middlebox, and the decision to include or exclude a\n   particular\
    \ type of device, are to some extent subjective.  Not\n   everyone who commented\
    \ on drafts of this document agrees with our\n   classifications and descriptions.\
    \  We do not claim that the following\n   catalogue is mathematically complete\
    \ and consistent, and in some\n   cases purely arbitrary choices have been made,\
    \ or ambiguity remains.\n   Thus, this document makes no claim to be definitive.\n\
    \   The facets considered are:\n   1. Protocol layer.  Does the box act at the\
    \ IP layer, the transport\n      layer, the upper layers, or a mixture?\n   2.\
    \ Explicit versus implicit.  Is the middlebox function an explicit\n      design\
    \ feature of the protocol(s) in use, like an SMTP relay? Or\n      is it an add-on\
    \ not foreseen by the protocol design, probably\n      attempting to be invisible,\
    \ like a network address translator?\n   3. Single hop versus multi-hop.  Can\
    \ there be only one box in the\n      path, or can there be several?\n   4. In-line\
    \ versus call-out.  The middlebox function may be executed\n      in-line on the\
    \ datapath, or it may involve a call-out to an\n      ancillary box.\n   5. Functional\
    \ versus optimising.  Does the box perform a function\n      without which the\
    \ application session cannot run, or is the\n      function only an optimisation?\n\
    \   6. Routing versus processing.  Does the box simply choose which way\n    \
    \  to send the packets of a session, or does it actually process them\n      in\
    \ some way (i.e., change them or create a side-effect)?\n   7. Soft state versus\
    \ hard state.  If the box loses its state\n      information, does the session\
    \ continue to run in a degraded mode\n      while reconstructing necessary state\
    \ (soft state), or does it\n      simply fail (hard state)?\n   8. Failover versus\
    \ restart.  In the event that a hard state box\n      fails, is the session redirected\
    \ to an alternative box that has a\n      copy of the state information, or is\
    \ it forced to abort and\n      restart?\n   One possible classification is deliberately\
    \ excluded: \"good\" versus\n   \"evil\".  While analysis shows that some types\
    \ of middlebox come with\n   a host of complications and disadvantages, no useful\
    \ purpose would be\n   served by simply deprecating them.  They have been invented\
    \ for\n   compelling reasons, and it is instructive to understand those\n   reasons.\n\
    \   The types of box listed below are in an arbitrary order, although\n   adjacent\
    \ entries may have some affinity.  At the end of each entry is\n   an attempt\
    \ to characterise it in terms of the facets identified\n   above.  These characterisations\
    \ should not be interpreted as rigid;\n   in many cases they are a gross simplification.\n\
    \   Note: many types of middlebox may need to perform IP packet\n   fragmentation\
    \ and re-assembly.  This is mentioned only in certain\n   cases.\n"
- title: 2.1 NAT
  contents:
  - "2.1 NAT\n   Network Address Translator.  A function, often built into a router,\n\
    \   that dynamically assigns a globally unique address to a host that\n   doesn't\
    \ have one, without that host's knowledge.  As a result, the\n   appropriate address\
    \ field in all packets to and from that host is\n   translated on the fly.  Because\
    \ NAT is incompatible with application\n   protocols with IP address dependencies,\
    \ a NAT is in practice always\n   accompanied by an ALG (Application Level Gateway\
    \ - see below).  It\n   also touches the transport layer to the extent of fixing\
    \ up\n   checksums.\n   NATs have been extensively analysed in the IETF [RFC 2663,\
    \ RFC 2993,\n   RFC 3022, RFC 3027, etc.]\n   The experimental RSIP proposal complements\
    \ NAT with a dynamic tunnel\n   mechanism inserting a stateful RSIP server in\
    \ place of the NAT\n   [RSIP].\n   {1 IP layer, 2 implicit, 3 multihop, 4 in-line,\
    \ 5 functional, 6\n   processing, 7 hard, 8 restart}\n"
- title: 2.2 NAT-PT
  contents:
  - "2.2 NAT-PT\n   NAT with Protocol Translator.  A function, normally built into\
    \ a\n   router, that performs NAT between an IPv6 host and an IPv4 network,\n\
    \   additionally translating the entire IP header between IPv6 and IPv4\n   formats.\n\
    \   NAT-PT itself depends on the Stateless IP/ICMP Translation Algorithm\n   (SIIT)\
    \ mechanism [RFC 2765] for its protocol translation function.\n   In practice,\
    \ SIIT and NAT-PT will both need an associated ALG and\n   will need to touch\
    \ transport checksums.  Due to the permitted absence\n   of a UDP checksum in\
    \ IPv4, translation of fragmented unchecksummed\n   UDP from IPv4 to IPv6 is hopeless.\
    \  NAT-PT and SIIT also have other\n   potential fragmentation/MTU problems, particularly\
    \ when dealing with\n   endpoints that don't do path MTU discovery (or when transiting\
    \ other\n   middleboxes that break path MTU discovery).  ICMP translation also\n\
    \   has some intractable difficulties.\n   NAT-PT is a Proposed Standard from\
    \ the NGTRANS WG [RFC 2766].  The\n   Dual Stack Transition Mechanism adds a second\
    \ related middlebox, the\n   DSTM server [DSTM].\n   {1 IP layer, 2 implicit,\
    \ 3 multihop, 4 in-line, 5 functional, 6\n   processing, 7 hard, 8 restart}\n"
- title: 2.3 SOCKS gateway
  contents:
  - "2.3 SOCKS gateway\n   SOCKSv5 [RFC 1928] is a stateful mechanism for authenticated\
    \ firewall\n   traversal, in which the client host must communicate first with\
    \ the\n   SOCKS server in the firewall before it is able to traverse the\n   firewall.\
    \  It is the SOCKS server, not the client, that determines\n   the source IP address\
    \ and port number used outside the firewall.  The\n   client's stack must be \"\
    SOCKSified\" to take account of this, and\n   address-sensitive applications may\
    \ get confused, rather as with NAT.\n   However, SOCKS gateways do not require\
    \ ALGs.\n   SOCKS is maintained by the AFT (Authenticated Firewall Traversal)\
    \ WG.\n   {1 multi-layer, 2 explicit, 3 multihop, 4 in-line, 5 functional, 6\n\
    \   routing, 7 hard, 8 restart}\n"
- title: 2.4 IP Tunnel Endpoints
  contents:
  - "2.4 IP Tunnel Endpoints\n   Tunnel endpoints, including virtual private network\
    \ endpoints, use\n   basic IP services to set up tunnels with their peer tunnel\
    \ endpoints\n   which might be anywhere in the Internet.  Tunnels create entirely\
    \ new\n   \"virtual\" networks and network interfaces based on the Internet\n\
    \   infrastructure, and thereby open up a number of new services.  Tunnel\n  \
    \ endpoints base their forwarding decisions at least partly on their\n   own policies,\
    \ and only partly if at all on information visible to\n   surrounding routers.\n\
    \   To the extent that they deliver packets intact to their destinations,\n  \
    \ tunnel endpoints appear to follow the end-to-end principle in the\n   outer\
    \ Internet.  However, the destination may be completely different\n   from what\
    \ a router near the tunnel entrance might expect.  Also, the\n   per-hop treatment\
    \ a tunneled packet receives, for example in terms of\n   QoS, may not be what\
    \ it would have received had the packet traveled\n   untunneled [RFC2983].\n \
    \  Tunnels also cause difficulties with MTU size (they reduce it) and\n   with\
    \ ICMP replies (they may lack necessary diagnostic information).\n   When a tunnel\
    \ fails for some reason, this may cause the user session\n   to abort, or an alternative\
    \ IP route may prove to be available, or in\n   some cases the tunnel may be re-established\
    \ automatically.\n   {1 multi-layer, 2 implicit, 3 multihop, 4 in-line, 5 functional,\
    \ 6\n   processing, 7 hard, 8 restart or failover}\n"
- title: 2.5. Packet classifiers, markers and schedulers
  contents:
  - "2.5. Packet classifiers, markers and schedulers\n   Packet classifiers classify\
    \ packets flowing through them according to\n   policy and either select them\
    \ for special treatment or mark them, in\n   particular for differentiated services\
    \ [Clark95, RFC 2475].  They may\n   alter the sequence of packet flow through\
    \ subsequent hops, since they\n   control the behaviour of traffic conditioners.\n\
    \   Schedulers or traffic conditioners (in routers, hosts, or specialist\n   boxes\
    \ inserted in the data path) may alter the time sequence of\n   packet flow, the\
    \ order in which packets are sent, and which packets\n   are dropped.  This can\
    \ significantly impact end-to-end performance.\n   It does not, however, fundamentally\
    \ change the unreliable datagram\n   model of the Internet.\n   When a classifier\
    \ or traffic conditioner fails, the user session may\n   see any result between\
    \ complete loss of connectivity (all packets are\n   dropped), through best-effort\
    \ service (all packets are given default\n   QOS), up to automatic restoration\
    \ of the original service level.\n   {1 multi-layer, 2 implicit, 3 multihop, 4\
    \ in-line, 5 optimising, 6\n   processing, 7 soft, 8 failover or restart}\n"
- title: 2.6 Transport relay
  contents:
  - "2.6 Transport relay\n   Transport relays are basically the transport layer equivalent\
    \ of an\n   ALG; another (less common) name for them is a TLG.  As with ALGs,\n\
    \   they're used for a variety of purposes, some well established and\n   meeting\
    \ needs not otherwise met.  Early examples of transport relays\n   were those\
    \ that ran on MIT's ITS and TOPS-20 PDP-10s on the ARPANET\n   and allowed Chaosnet-only\
    \ hosts to make outgoing connections from\n   Chaosnet onto TCP/IP.  Later there\
    \ were some uses of TCP-TP4 relays.\n   A transport relay between IPv6-only and\
    \ IPv4-only hosts is one of the\n   tools of IPv6 transition [TRANS64].  TLGs\
    \ are sometimes used in\n   combination with simple packet filtering firewalls\
    \ to enforce\n   restrictions on which hosts can talk to the outside world or\
    \ to\n   kludge around strange IP routing configurations.  TLGs are also\n   sometimes\
    \ used to gateway between two instances of the same transport\n   protocol with\
    \ significantly different connection characteristics; it\n   is in this sense\
    \ that a TLG may also be called a TCP or transport\n   spoofer.  In this role,\
    \ the TLG may shade into being an optimising\n   rather than a functional middlebox,\
    \ but it is distinguished from\n   Transport Proxies (next section) by the fact\
    \ that it makes its\n   optimisations only by creating back-to- back connections,\
    \ and not by\n   modification or re-timing of TCP messages.\n   Terminating one\
    \ TCP connection and starting another mid-path means\n   that the TCP checksum\
    \ does not cover the sender's data end-to-end.\n   Data corruptions or modifications\
    \ may be introduced in the processing\n   when the data is transferred from the\
    \ first to the second connection.\n   Some TCP relays are split relays and have\
    \ even more possibility of\n   lost data integrity, because the there may be more\
    \ than two TCP\n   connections, and multiple nodes and network paths involved.\
    \  In all\n   cases, the sender has less than the expected assurance of data\n\
    \   integrity that is the TCP reliable byte stream service.  Note that\n   this\
    \ problem is not unique to middleboxes, but can also be caused by\n   checksum\
    \ offloading TCP implementations within the sender, for\n   example.\n   In some\
    \ such cases, other session layer mechanisms such as SSH or\n   HTTPS would detect\
    \ any loss of data integrity at the TCP level,\n   leading not to retransmission\
    \ as with TCP, but to session failure.\n   However, there is no general session\
    \ mechanism to add application\n   data integrity so one can detect or mitigate\
    \ possible lack of TCP\n   data integrity.\n   {1 Transport layer, 2 implicit,\
    \ 3 multihop, 4 in-line, 5 functional\n   (mainly), 6 routing, 7 hard, 8 restart}\n"
- title: 2.7. TCP performance enhancing proxies
  contents:
  - "2.7. TCP performance enhancing proxies\n   \"TCP spoofer\" is often used as a\
    \ term for middleboxes that modify the\n   timing or action of the TCP protocol\
    \ in flight for the purposes of\n   enhancing performance.  Another, more accurate\
    \ name is TCP\n   performance enhancing proxy (PEP).  Many TCP PEPs are proprietary\
    \ and\n   have been characterised in the open Internet primarily when they\n \
    \  introduce interoperability errors with standard TCP.  As with TLGs,\n   there\
    \ are circumstances in which a TCP PEP is seen to meet needs not\n   otherwise\
    \ met.  For example, a TCP PEP may provide re-spacing of ACKs\n   that have been\
    \ bunched together by a link with bursty service, thus\n   avoiding undesireable\
    \ data segment bursts.  The PILC (Performance\n   Implications of Link Characteristics)\
    \ working group has analyzed\n   types of TCP PEPs and their applicability [PILCPEP].\
    \  TCP PEPs can\n   introduce not only TCP errors, but also unintended changes\
    \ in TCP\n   adaptive behavior.\n   {1 Transport layer, 2 implicit, 3 multihop,\
    \ 4 in-line, 5 optimising,\n   6 routing, 7 hard, 8 restart}\n"
- title: 2.8. Load balancers that divert/munge packets.
  contents:
  - "2.8. Load balancers that divert/munge packets.\n   There is a variety of techniques\
    \ that divert packets from their\n   intended IP destination, or make that destination\
    \ ambiguous.  The\n   motivation is typically to balance load across servers,\
    \ or even to\n   split applications across servers by IP routing based on the\n\
    \   destination port number.  Except for rare instances of one-shot UDP\n   protocols,\
    \ these techniques are inevitably stateful as all packets\n   from the same application\
    \ session need to be directed to the same\n   physical server.  (However, a sophisticated\
    \ solution would also be\n   able to handle failover.)\n   To date these techniques\
    \ are proprietary and can therefore only be\n   applied in closely managed environments.\n\
    \   {1 multi-layer, 2 implicit, 3 single hop, 4 in-line, 5 optimising, 6\n   routing,\
    \ 7 hard, 8 restart}\n"
- title: 2.9. IP Firewalls
  contents:
  - "2.9. IP Firewalls\n   The simplest form of firewall is a router that screens\
    \ and rejects\n   packets based purely on fields in the IP and Transport headers\
    \ (e.g.,\n   disallow incoming traffic to certain port numbers, disallow any\n\
    \   traffic to certain subnets, etc.)\n   Although firewalls have not been the\
    \ subject of standardisation, some\n   analysis has been done [RFC 2979].\n  \
    \ Although a pure IP firewall does not alter the packets flowing\n   through it,\
    \ by rejecting some of them it may cause connectivity\n   problems that are very\
    \ hard for a user to understand and diagnose.\n   \"Stateless\" firewalls typically\
    \ allow all IP fragments through since\n   they do not contain enough upper-layer\
    \ header information to make a\n   filtering decision.  Many \"stateful\" firewalls\
    \ therefore reassemble\n   IP fragments (and re-fragment if necessary) in order\
    \ to avoid leaking\n   fragments, particularly fragments that may exploit bugs\
    \ in the\n   reassembly implementations of end receivers.\n   {1 IP layer, 2 implicit,\
    \ 3 multihop, 4 in-line, 5 functional, 6\n   routing, 7 hard, 8 restart}\n"
- title: 2.10. Application Firewalls
  contents:
  - "2.10. Application Firewalls\n   Application-level firewalls act as a protocol\
    \ end point and relay\n   (e.g., an SMTP client/server or a Web proxy agent).\
    \  They may\n      (1) implement a \"safe\" subset of the protocol,\n      (2)\
    \ perform extensive protocol validity checks,\n      (3) use an implementation\
    \ methodology designed to minimize the\n          likelihood of bugs,\n      (4)\
    \ run in an insulated, \"safe\" environment, or\n      (5) use some combination\
    \ of these techniques in tandem.\n   Although firewalls have not been the subject\
    \ of standardisation, some\n   analysis has been done [RFC 2979].  The issue of\
    \ firewall traversal\n   using HTTP has been discussed [HTTPSUB].\n   {1 Application\
    \ layer, 2 implicit, 3 multihop, 4 in-line, 5\n   functional, 6 processing, 7\
    \ hard, 8 restart}\n"
- title: 2.11. Application-level gateways
  contents:
  - "2.11. Application-level gateways\n   These come in many shapes and forms.  NATs\
    \ require ALGs for certain\n   address-dependent protocols such as FTP; these\
    \ do not change the\n   semantics of the application protocol, but carry out mechanical\n\
    \   substitution of fields.  At the other end of the scale, still using\n   FTP\
    \ as an example, gateways have been constructed between FTP and\n   other file\
    \ transfer protocols such as the OSI and DECnet (R)\n   equivalents.  In any case,\
    \ such gateways need to maintain state for\n   the sessions they are handling,\
    \ and if this state is lost, the\n   session will normally break irrevocably.\n\
    \   Some ALGs are also implemented in ways that create fragmentation\n   problems,\
    \ although in this case the problem is arguably the result of\n   a deliberate\
    \ layer violation (e.g., mucking with the application data\n   stream of an FTP\
    \ control connection by twiddling TCP segments on the\n   fly).\n   {1 Application\
    \ layer, 2 implicit or explicit, 3 multihop, 4 in-line,\n   5 functional, 6 processing,\
    \ 7 hard, 8 restart}\n"
- title: 2.12. Gatekeepers/ session control boxes
  contents:
  - "2.12. Gatekeepers/ session control boxes\n   Particularly with the rise of IP\
    \ Telephony, the need to create and\n   manage sessions other than TCP connections\
    \ has arisen.  In a\n   multimedia environment that has to deal with name lookup,\n\
    \   authentication, authorization, accounting, firewall traversal, and\n   sometimes\
    \ media conversion, the establishment and control of a\n   session by a third-party\
    \ box seems to be the inevitable solution.\n   Examples include H.323 gatekeepers\
    \ [H323], SIP servers [RFC 2543] and\n   MEGACO controllers [RFC 3015].\n   {1\
    \ Application layer, 2 explicit, 3 multihop, 4 in-line or call-out,\n   5 functional,\
    \ 6 processing, 7 hard, 8 restart?}\n"
- title: 2.13. Transcoders
  contents:
  - "2.13. Transcoders\n   Transcoders are boxes performing some type of on-the-fly\
    \ conversion\n   of application level data.  Examples include the transcoding\
    \ of\n   existing web pages for display on hand-held wireless devices, and\n \
    \  transcoding between various audio formats for interconnecting digital\n   mobile\
    \ phones with voice-over-IP services.  In many cases, such\n   transcoding cannot\
    \ be done by the end-systems, and at least in the\n   case of voice, it must be\
    \ done in strict real time with extremely\n   rapid failure recovery.\n   Not\
    \ all media translators are mandatory.  They may simply be an\n   optimisation.\
    \  For example, in the case of multicast, if all the\n   low-bandwidth receivers\
    \ sit in one \"corner\" of the network, it would\n   be inefficient for the sender\
    \ to generate two streams or send both\n   stream all the way across the network\
    \ if the \"thin\" one is only\n   needed far away from the sender.  Generally,\
    \ media translators are\n   only useful if the two end systems don't have overlapping\
    \ codecs or\n   if the overlapping set is not a good network match.\n   {1 Application\
    \ layer, 2 explicit or implicit, 3 single hop, 4 in-\n   line, 5 functional, 6\
    \ processing, 7 hard?, 8 restart or failover}\n"
- title: 2.14. Proxies
  contents:
  - "2.14. Proxies\n   HTTP1.1 [RFC 2616] defines a Web proxy as follows:\n      \"\
    An intermediary program which acts as both a server and a client\n      for the\
    \ purpose of making requests on behalf of other clients.\n      Requests are serviced\
    \ internally or by passing them on, with\n      possible translation, to other\
    \ servers.  A proxy MUST implement\n      both the client and server requirements\
    \ of this specification.  A\n      \"transparent proxy\" is a proxy that does\
    \ not modify the request or\n      response beyond what is required for proxy\
    \ authentication and\n      identification.  A \"non-transparent proxy\" is a\
    \ proxy that\n      modifies the request or response in order to provide some\
    \ added\n      service to the user agent, such as group annotation services,\n\
    \      media type transformation, protocol reduction, or anonymity\n      filtering.\"\
    \n   A Web proxy may be associated with a firewall, when the firewall does\n \
    \  not allow outgoing HTTP packets.  However, HTTP makes the use of a\n   proxy\
    \ \"voluntary\": the client must be configured to use the proxy.\n   Note that\
    \ HTTP proxies do in fact terminate an IP packet flow and\n   recreate another\
    \ one, but they fall under the definition of\n   \"middlebox\" given in Section\
    \ 1.1 because the actual applications\n   sessions traverse them.\n   SIP proxies\
    \ [RFC 2543] also raise some interesting issues, since they\n   can \"bend\" the\
    \ media pipe to also serve as media translators.  (A\n   proxy can modify the\
    \ session description so that media no longer\n   travel end-to-end but to a designated\
    \ intermediate box.)\n   {1 Application layer, 2 explicit (HTTP) or implicit (interception),\
    \ 3\n   multihop, 4 in-line, 5 functional, 6 processing, 7 soft, 8 restart}.\n\
    \   Note: Some so-called Web proxies have been implemented as\n   \"interception\"\
    \ devices that intercept HTTP packets and re-issue them\n   with their own source\
    \ address; like NAT and SOCKs, this can disturb\n   address-sensitive applications.\
    \  Unfortunately some vendors have\n   caused confusion by mis-describing these\
    \ as \"transparent\" proxies.\n   Interception devices are anything but transparent.\
    \  See [WREC] for a\n   full discussion.\n"
- title: 2.15. Caches
  contents:
  - "2.15. Caches\n   Caches are of course used in many shapes and forms in the Internet,\n\
    \   and are in principle distinct from proxies.  Here we refer mainly to\n   content\
    \ caches, intended to optimise user response times.  HTTP makes\n   provision\
    \ for proxies to act as caches, by providing for both\n   expiration and re-validation\
    \ mechanisms for cached content.  These\n   mechanisms may be used to guarantee\
    \ that specific content is not\n   cached, which is a requirement for transient\
    \ content, particularly in\n   transactional applications.  HTTP caching is well\
    \ described in\n   Section 13 of [RFC 2616], and in the HTTP case caches and proxies\
    \ are\n   inextricably mixed.\n   To improve optimisation, caching is not uniquely\
    \ conducted between\n   the origin server and the proxy cache directly serving\
    \ the user.  If\n   there is a network of caches, the nearest copy of the required\n\
    \   content may be in a peer cache.  For this an inter-cache protocol is\n   required.\
    \  At present the most widely deployed solution is Internet\n   Cache Protocol\
    \ (ICP) [RFC 2186] although there have been alternative\n   proposals such as\
    \ [RFC 2756].\n   It can be argued that caches terminate the applications sessions,\
    \ and\n   should not be counted as middleboxes (any more than we count SMTP\n\
    \   relays).  However, we have arbitrarily chosen to include them since\n   they\
    \ do in practice re-issue the client's HTTP request in the case of\n   a cache\
    \ miss, and they are not the ultimate source of the application\n   data.\n  \
    \ {1 Application layer, 2 explicit (if HTTP proxy caches), 3 multihop,\n   4 in-line,\
    \ 5 functional, 6 processing, 7 soft, 8 restart}\n"
- title: 2.16. Modified DNS servers
  contents:
  - "2.16. Modified DNS servers\n   DNS servers can play games.  As long as they appear\
    \ to deliver a\n   syntactically correct response to every query, they can fiddle\
    \ the\n   semantics.  For example, names can be made into \"anycast\" names by\n\
    \   arranging for them to resolve to different IP addresses in different\n   parts\
    \ of the network.  Or load can be shared among different members\n   of a server\
    \ farm by having the local DNS server return the address of\n   different servers\
    \ in turn.  In a NAT environment, it is not uncommon\n   for the FQDN-to-address\
    \ mapping to be quite different outside and\n   inside the NAT (\"two-faced DNS\"\
    ).\n   Modified DNS servers are not intermediaries in the application data\n \
    \  flow of interest.  They are included here because they mean that\n   independent\
    \ sessions that at one level appear to involve a single\n   host actually involve\
    \ multiple hosts, which can have subtle effects.\n   State created in host A.FOR.EXAMPLE\
    \ by one session may turn out not\n   to be there when a second session apparently\
    \ to the same host is\n   started, because the DNS server has directed the second\
    \ session\n   elsewhere.\n   If such a DNS server fails, users may fail over to\
    \ an alternate DNS\n   server that doesn't know the same tricks, with unpredicatble\
    \ results.\n   {1 Application layer, 2 implicit, 3 multihop, 4 in-line (on DNS\
    \ query\n   path), 5 functional or optimising, 6 processing, 7 soft, 8 failover}\n"
- title: 2.17. Content and applications distribution boxes
  contents:
  - "2.17. Content and applications distribution boxes\n   An emerging generalisation\
    \ of caching is content distribution and\n   application distribution.  In this\
    \ model, content (such as static web\n   content or streaming multimedia content)\
    \ is replicated in advance to\n   many widely distributed servers.  Further, interactive\
    \ or even\n   transactional applications may be remotely replicated, with some\
    \ of\n   their associated data.  Since this is a recent model, it cannot be\n\
    \   said that there is an industry standard practice in this area.  Some\n   of\
    \ the issues are discussed in [WREC] and several new IETF activities\n   have\
    \ been proposed in this area.\n   Content distribution solutions tend to play\
    \ with URLs in one way or\n   another, and often involve a system of middleboxes\
    \ - for example\n   using HTTP redirects to send a request for WWW.EXAMPLE.COM\
    \ off to\n   WWW.EXAMPLE.NET, where the latter name may be an \"anycast\" name\
    \ as\n   mentioned above, and will actually resolve in DNS to the nearest\n  \
    \ instance of a content distribution box.\n   As with caches, it is an arbitrary\
    \ choice to include these devices,\n   on the grounds that although they terminate\
    \ the client session, they\n   are not the ultimate origin of the applications\
    \ data.\n   {1 Application layer, 2 implicit or explicit, 3 multihop, 4 in-line\n\
    \   or call-out, 5 optimising, 6 routing or processing, 7 soft, 8\n   restart?}\n"
- title: 2.18. Load balancers that divert/munge URLs
  contents:
  - "2.18. Load balancers that divert/munge URLs\n   Like DNS tricks, URL redirects\
    \ can be used to balance load among a\n   pool of servers - essentially a local\
    \ version of a content\n   distribution network.  Alternatively, an HTTP proxy\
    \ can rewrite HTTP\n   requests to direct them to a particular member of a pool\
    \ of servers.\n   These devices are included as middleboxes because they divert\
    \ an\n   applications session in an arbitrary way.\n   {1 Application layer, 2\
    \ explicit, 3 single hop, 4 in-line, 5\n   functional, 6 routing, 7 soft, 8 restart}\n"
- title: 2.19. Application-level interceptors
  contents:
  - "2.19. Application-level interceptors\n   Some forms of pseudo-proxy intercept\
    \ HTTP packets and deliver them to\n   a local proxy server instead of forwarding\
    \ them to the intended\n   destination.  Thus the destination IP address in the\
    \ packet is\n   ignored.  It is hard to state whether this is a functional box\
    \ (i.e.,\n   a non-standard proxy) or an optimising box (i.e., a way of forcing\n\
    \   the user to use a cache).  Like any non-standard proxy, it has\n   undefined\
    \ consequences in the case of dynamic or non-cacheable\n   content.\n   {1 Application\
    \ layer, 2 implicit, 3 single hop, 4 in-line, 5\n   functional or optimising,\
    \ 6 routing, 7 hard, 8 restart}\n"
- title: 2.20. Application-level multicast
  contents:
  - "2.20. Application-level multicast\n   Some (mainly proprietary) applications,\
    \ including some approaches to\n   instant messaging, use an application-level\
    \ mechanism to replicate\n   packets to multiple destinations.\n   An example\
    \ is given in [CHU].\n   {1 Application layer, 2 explicit, 3 multihop, 4 in-line,\
    \ 5\n   functional, 6 routing, 7 hard, 8 restart}\n"
- title: 2.21. Involuntary packet redirection
  contents:
  - "2.21. Involuntary packet redirection\n   There appear to be a few instances of\
    \ boxes that (based on\n   application level content or other information above\
    \ the network\n   layer) redirect packets for functional reasons.  For example,\
    \ more\n   than one \"high speed Internet\" service offered in hotel rooms\n \
    \  intercepts initial HTTP requests and diverts them to an HTTP server\n   that\
    \ demands payment before opening access to the Internet.  These\n   boxes usually\
    \ also perform NAT functions.\n   {1 multi-layer, 2 implicit, 3 single hop, 4\
    \ call-out, 5 functional, 6\n   routing, 7 hard, 8 restart}\n"
- title: 2.22. Anonymisers
  contents:
  - "2.22. Anonymisers\n   Anonymiser boxes can be implemented in various ways that\
    \ hide the IP\n   address of the data sender or receiver.  Although the implementation\n\
    \   may be distinct, this is in practice very similar to a NAT plus ALG.\n   {1\
    \ multi-layer, 2 implicit or explicit, 3 multihop, 4 in-line, 5\n   functional,\
    \ 6 processing, 7 hard, 8 restart}\n"
- title: 2.23. Not included
  contents:
  - "2.23. Not included\n   Some candidates suggested for the above list were excluded\
    \ for the\n   reasons given below.  In general, they do not fundamentally change\n\
    \   the architectural model of packet delivery from source to\n   destination.\n\
    \   Bridges and switches that snoop ARP, IGMP etc.  These are below the\n   IP\
    \ layer, but use a layer violation to emulate network layer\n   functions.  They\
    \ do not change IP layer functions.\n   Wiretaps and snoopers in general - if\
    \ they are working correctly,\n   they have no impact on traffic, so do not require\
    \ analysis.\n   Mobile IP home agents are intended to assist packet delivery to\
    \ the\n   originally desired destination, so they are excluded on the same\n \
    \  grounds as standard routers.\n   Relays in interplanetary networks - although\
    \ these would certainly\n   appear to be middleboxes, they are not currently deployed.\n"
- title: 2.24. Summary of facets
  contents:
  - "2.24. Summary of facets\n   By tabulating the rough classifications above, we\
    \ observe that of the\n   22 classes of middlebox described:\n   17 are application\
    \ or multi-layer\n   16 are implicit (and others are explicit OR implicit)\n \
    \  17 are multi-hop\n   21 are in-line; call-out is rare\n   18 are functional;\
    \ pure optimisation is rare\n   Routing & processing are evenly split\n   16 have\
    \ hard state\n   21 must restart session on failure\n   We can deduce that current\
    \ types of middlebox are predominantly\n   application layer devices not designed\
    \ as part of the relevant\n   protocol, performing required functions, maintaining\
    \ hard state, and\n   aborting user sessions when they crash.  Indeed this represents\
    \ a\n   profound challenge to the end-to-end hourglass model.\n"
- title: 3. Ongoing work in the IETF and elsewhere
  contents:
  - "3. Ongoing work in the IETF and elsewhere\n   Apart from work cited in references\
    \ above, current or planned work in\n   the IETF includes:\n   MIDCOM - a working\
    \ group with focus on the architectural framework\n   and the requirements for\
    \ the protocol between a requesting device and\n   a middlebox and the architectural\
    \ framework for the interface between\n   a middlebox and a policy entity [MIDFRAME,\
    \ MIDARCH].  This may\n   interact with session control issues [SIPFIRE].\n  \
    \ Work is also proceeding outside the MIDCOM group on middlebox\n   discovery\
    \ [MIDDISC].\n   WEBI (Web Intermediaries) - a working group that addresses specific\n\
    \   issues in the world wide web infrastructure (as identified by the\n   WREC\
    \ working group), by providing generic mechanisms which are useful\n   in several\
    \ application domains (e.g., proxies, content delivery\n   surrogates).  Specific\
    \ mechanisms will be Intermediary Discovery and\n   Description and a Resource\
    \ Update Protocol.\n   Intermediaries are also an important focus in the development\
    \ of XML\n   Protocol by the World-Wide Web Consortium, who have published an\n\
    \   interesting analysis [XMLPI].\n   OPES (Open Pluggable Extension Services)\
    \ - a proposed  working group\n   whose output will enable construction of services\
    \ executed on\n   application data by participating transit intermediaries.  Caching\
    \ is\n   the most basic intermediary service, one that requires a basic\n   understanding\
    \ of application semantics by the cache server.\n   CDI (Content Distribution\
    \ Internetworking) is a potential working\n   group for allowing cooperation between\
    \ different Content Distribution\n   Networks and cache clusters [CDNP].\n   RSERPOOL\
    \ (Reliable Server Pooling) is a working group that will\n   define architecture\
    \ and requirements for management and access to\n   server pools, including requirements\
    \ from a variety of applications,\n   building blocks and interfaces, different\
    \ styles of pooling, security\n   requirements and performance requirements, such\
    \ as failover times and\n   coping with heterogeneous latencies.\n"
- title: 4. Comments and Issues
  contents:
  - "4. Comments and Issues\n   A review of the list in Section 2 suggests that middleboxes\
    \ fit into\n   one or more of three broad categories:\n   1) mechanisms to connect\
    \ dissimilar networks to enable cross-protocol\n      interoperability;\n   2)\
    \ mechanisms to separate similar networks into zones, especially\n      security\
    \ zones;\n   3) performance enhancement.\n   As observed in [RFC 2775], the rise\
    \ of middleboxes puts into question\n   the general applicability of the end-to-end\
    \ principle [RFC 1958].\n   Middleboxes introduce dependencies and hidden points\
    \ of failure that\n   violate the fate-sharing aspect of the end-to-end principle.\
    \  Can we\n   define architectural principles that guarantee robustness in the\n\
    \   presence of middleboxes?\n"
- title: 4.1. The end to end principle under challenge
  contents:
  - "4.1. The end to end principle under challenge\n   Many forms of middlebox are\
    \ explicitly addressed at the IP level, and\n   terminate a transport connection\
    \ (or act as a final destination for\n   UDP packets) in a normal way.  Although\
    \ they are potential single\n   points of failure, they do not otherwise interfere\
    \ with the end to\n   end principle [RFC 1958].  (This statement does not apply\
    \ to\n   transport relays or TCP spoofers; they do not terminate a transport\n\
    \   connection at the expected destination in the normal way.)\n   However, there\
    \ is a general feeling that middleboxes that divert an\n   IP packet from its\
    \ intended destination, or substantively modify its\n   content on the fly, are\
    \ fundamentally different from those that\n   correctly terminate a transport\
    \ connection and carry out their\n   manipulations at applications level.  Such\
    \ diversion or modification\n   violates the basic architectural assumption that\
    \ packets flow from\n   source to destination essentially unchanged (except for\
    \ time-to-live\n   and QOS-related fields).  The effects of such changes on transport\n\
    \   and applications is unpredictable in the general case.  Much of the\n   analysis\
    \ that applies to NAT [RFC 2993, RFC 3027] will also apply to\n   RSIP, NAT-PT,\
    \ DSTM, SOCKS, and involuntary packet redirectors.\n   Interception proxies, anonymisers,\
    \ and some types of load balancer\n   can also have subtle effects on address-sensitive\
    \ applications, when\n   they cause packets to be delivered to or from a different\
    \ address.\n   Transport relays and TCP spoofers may deceive applications by\n\
    \   delivering an unreliable service on a TCP socket.\n   We conclude that:\n\
    \      Although the rise of middleboxes has negative impact on the end to\n  \
    \    end principle at the packet level, it does not nullify it as a\n      useful\
    \ or desirable principle of applications protocol design.\n      However, future\
    \ application protocols should be designed in\n      recognition of the likely\
    \ presence of network address translation,\n      packet diversion, and packet\
    \ level firewalls, along the data path.\n"
- title: 4.2. Failure handling
  contents:
  - "4.2. Failure handling\n   If a middlebox fails, it is desirable that the effect\
    \ on sessions\n   currently in progress should be inconvenient rather than\n \
    \  catastrophic.  There appear to be three approaches to achieve this:\n     \
    \ Soft state mechanisms.  The session continues in the absence of\n      the box,\
    \ probably with reduced performance, until the necessary\n      session state\
    \ is recreated automatically in an alternative box (or\n      the original one,\
    \ restarted).  In other words the state\n      information optimises the user\
    \ session but is not essential.  An\n      example might be a true caching mechanism,\
    \ whose temporary failure\n      only reduces performance.\n      Rapid failover\
    \ mechanisms.  The session is promptly redirected to\n      a hot spare box, which\
    \ already has a copy of the necessary session\n      state.\n      Rapid restart\
    \ mechanisms.  The two ends of the session promptly\n      detect the failure\
    \ and themselves restart the session via a spare\n      box, without being externally\
    \ redirected.  Enough session state is\n      kept at each end to recover from\
    \ the glitch.\n   It appears likely that \"optimising\" middleboxes are suitable\n\
    \   candidates for the soft state approach and for non-real-time data\n   streams,\
    \ since the consequence of failure of the box is not\n   catastrophic for the\
    \ user.  (Configured HTTP proxies used as caches\n   are an awkward case, as their\
    \ failure causes client failure.)  On the\n   other hand, \"functional\" middleboxes\
    \ must be present for the session\n   to continue, so they are candidates for\
    \ rapid failover or rapid\n   restart mechanisms.  We conclude that:\n      Middlebox\
    \ design should include a clear mechanism for dealing with\n      failure.\n"
- title: 4.3. Failures at multiple layers
  contents:
  - "4.3. Failures at multiple layers\n   Difficulties occur when middlebox functions\
    \ occur at different\n   layers, for example the following situation, where B\
    \ and C are not in\n   the same physical box:\n      Apps layer:     A ------------------------>\
    \ C ------> D\n      Lower layer:    A -----> B -------------------------> D\n\
    \   When all is well, i.e., there is an IP path from A to B to C to D and\n  \
    \ both B and C are working, this may appear quite workable.  But the\n   failure\
    \ modes are very challenging.  For example, if there is a\n   network failure\
    \ between C and D, how is B instructed to divert the\n   session to a backup box\
    \ for C?.  Since C and B function at different\n   protocol layers, there is no\
    \ expectation that they will have\n   coordinated failure recovery mechanisms.\
    \  Unless this is remedied in\n   some general way, we conclude that\n      Middlebox\
    \ failure recovery mechanisms cannot currently assume they\n      will get any\
    \ help from other layers, and must have their own means\n      of dealing with\
    \ failures in other layers.\n      In the long term future, we should be able\
    \ to state clearly for\n      each middlebox function what it expects from its\
    \ environment, and\n      make recommendations about which middlebox functions\
    \ should be\n      bound together if deployed.\n"
- title: 4.4. Multihop application protocols
  contents:
  - "4.4. Multihop application protocols\n   We can also observe that protocols such\
    \ as SMTP, UUCP, and NNTP have\n   always worked hop-by-hop, i.e., via multiple\
    \ middleboxes.  Nobody\n   considers this to be an issue or a problem.  Difficulties\
    \ arise when\n   inserting a middlebox in an application protocol stream that\
    \ was not\n   designed for it.  We conclude that:\n      New application protocol\
    \ designs should include explicit\n      mechanisms for the insertion of middleboxes,\
    \ and should consider\n      the facets identified in Section 2 above as part\
    \ of the design.\n   A specific challenge is how to make interactive or real-time\n\
    \   applications ride smoothly over middleboxes.  This will put\n   particular\
    \ stress on the failure handling aspects.\n"
- title: 4.5. Common features
  contents:
  - "4.5. Common features\n   Given that the IP layer - the neck of the hourglass\
    \ - is no longer\n   alone in its role supporting end-to-end connectivity, it\
    \ would be\n   desirable to define requirements and features that are common to\n\
    \   middlebox intermediaries.  It would then be possible to implement\n   middleboxes,\
    \ and in particular the protocols that communicate with\n   them, fully from the\
    \ stance of supporting the end-to-end principle.\n   Conceptually, this would\
    \ extend the neck of the hourglass upwards to\n   include a set of common features\
    \ available to all (or many)\n   applications.  In the context of middleboxes\
    \ and multihop protocols,\n   this would require common features addressing at\
    \ least:\n      Middlebox discovery and monitoring\n      Middlebox configuration\
    \ and control\n      Call-out\n      Routing preferences\n      Failover and restart\
    \ handling\n      Security, including mutual authentication\n   As far as possible,\
    \ the solutions in these areas being developed in\n   the IETF and W3C should\
    \ be sufficiently general to cover all types of\n   middlebox; if not, the work\
    \ will be done several times.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   Security risks are specific to each type of middlebox,\
    \ so little can\n   be said in general.  Of course, adding extra boxes in the\n\
    \   communication path creates extra points of attack, reduces or\n   eliminates\
    \ the ability to perform end to end encryption, and\n   complicates trust models\
    \ and key distribution models.  Thus, every\n   middlebox design requires particular\
    \ attention to security analysis.\n   A few general points can be made:\n   1.\
    \ The interference with end-to-end packet transmission by many types\n      of\
    \ middlebox is a crippling impediment to generalised use of IPSEC\n      in its\
    \ present form, and also invalidates transport layer security\n      in many scenarios.\n\
    \   2. Middleboxes require us to move definitively from a two-way to an\n    \
    \  N-way approach to trust relationships and key sharing.\n   3. The management\
    \ and configuration mechanisms of middleboxes are a\n      tempting point of attack,\
    \ and must be strongly defended.\n   These points suggest that we need a whole\
    \ new approach to security\n   solutions as the middlebox paradigm ends up being\
    \ deployed in lots of\n   different technologies, if only to avoid each new technology\n\
    \   designing a end-to-end security solution appropriate to its\n   particular\
    \ impact on the data stream.\n   Additionally, content caches and content distribution\
    \ mechanisms\n   raise the issue of access control for content that is subject\
    \ to\n   copyright or other rights.  Distributed authentication, authorisation\n\
    \   and accounting are required.\n"
- title: 6. Acknowledgements
  contents:
  - "6. Acknowledgements\n   Steve Bellovin, Jon Crowcroft, Steve Deering, Patrik\
    \ Faltstrom,\n   Henning Schulzrinne, and Lixia Zhang all gave valuable feedback\
    \ on\n   early versions of this document.  Rob Austein and Allison Mankin\n  \
    \ drafted the text on transport relays and TCP spoofers, and Rob\n   Austein made\
    \ other substantial contributions.  Participants in the\n   MIDTAX BOF at the\
    \ 50th IETF and on the MIDTAX mailing list, including\n   Harald Alverstrand,\
    \ Stanislav Shalunov, Michael Smirnov, Jeff Parker,\n   Sandy Murphy, David Martin,\
    \ Phil Neumiller, Eric Travis, Ed Bowen,\n   Sally Floyd, Ian Cooper, Mike Fisk\
    \ and Eric Fleischman gave\n   invaluable input.  Mark Nottingham brought the\
    \ W3C work to our\n   attention.  Melinda Shore suggested using a facet-based\n\
    \   categorization.  Patrik Faltstrom inspired section 4.3.\n"
- title: 7. References
  contents:
  - "7. References\n   [RFC 1812] Baker, F., \"Requirements for IP Version 4 Routers\"\
    , RFC\n              1812, June 1995.\n   [RFC 1928] Leech, M., Ganis, M., Lee,\
    \ Y., Kuris, R., Koblas, D. and\n              L. Jones, \"SOCKS Protocol Version\
    \ 5\", March 1996.\n   [RFC 1958] Carpenter, B., \"Architectural Principles of\
    \ the Internet\",\n              RFC 1958, June 1996.\n   [RFC 2186] Wessels,\
    \ D. and K. Claffy, \"Internet Cache Protocol (ICP),\n              version 2\"\
    , RFC 2186, September 1997.\n   [RFC 2475] Blake, S., Black, D., Carlson, M.,\
    \ Davies, E., Wang, Z.\n              and W. Weiss, \"An Architecture for Differentiated\n\
    \              Service\", RFC 2475, December 1998.\n   [RFC 2543] Handley, M.,\
    \ Schulzrinne, H., Schooler, E. and J.\n              Rosenberg, \"SIP: Session\
    \ Initiation Protocol\", RFC 2543,\n              March 1999.\n   [RFC 2616] Fielding,\
    \ R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter, L., Leach,\
    \ P. and T. Berners-Lee, \"Hypertext\n              Transfer Protocol -- HTTP/1.1\"\
    , RFC 2616, June 1999.\n   [RFC 2663] Srisuresh, P. and M. Holdrege, \"IP Network\
    \ Address\n              Translator (NAT) Terminology and Considerations\", RFC\n\
    \              2663, August 1999.\n   [RFC 2756] Vixie, P. and D. Wessels, \"\
    Hyper Text Caching Protocol\n              (HTCP/0.0)\", RFC 2756, January 2000.\n\
    \   [RFC 2766] Tsirtsis, G. and P. Srisuresh, \"Network Address\n            \
    \  Translation - Protocol Translation (NAT-PT)\", RFC 2766,\n              February\
    \ 2000.\n   [RFC 2775] Carpenter, B., \"Internet Transparency\", RFC 2775, February\n\
    \              2000.\n   [RFC 2979] Freed, N., \"Behavior of and Requirements\
    \ for Internet\n              Firewalls\", RFC 2979, October 2000.\n   [RFC 2983]\
    \ Black, D., \"Differentiated Services and Tunnels\", RFC\n              2983,\
    \ October 2000.\n   [RFC 2993] Hain, T., \"Architectural Implications of NAT\"\
    , RFC 2993,\n              November 2000.\n   [RFC 3015] Cuervo, F., Greene, N.,\
    \ Rayhan, A., Huitema, C., Rosen, B.\n              and J. Segers, \"Megaco Protocol\
    \ 1.0\", RFC 3015, November\n              2000.\n   [RFC 3022] Srisuresh, P.\
    \ and K. Egevang, \"Traditional IP Network\n              Address Translator (Traditional\
    \ NAT)\", RFC 3022, January\n              2001.\n   [RFC 3027] Holdrege, M. and\
    \ P. Srisuresh, \"Protocol Complications\n              with the IP Network Address\
    \ Translator\", RFC 3027, January\n              2001.\n   [CHU]      Y. Chu,\
    \ S. Rao, and H. Zhang, A Case for End System\n              Multicast, SIGMETRICS,\
    \ June 2000.\n              http://citeseer.nj.nec.com/chu00case.html\n   [CLARK88]\
    \  The Design Philosophy of the DARPA Internet Protocols,\n              D.D.Clark,\
    \ Proc SIGCOMM 88, ACM CCR Vol 18, Number 4,\n              August 1988, pages\
    \ 106-114 (reprinted in ACM CCR Vol 25,\n              Number 1, January 1995,\
    \ pages 102-111).\n   [CLARK95]  \"Adding Service Discrimination to the Internet\"\
    , D.D.\n              Clark, Proceedings of the 23rd Annual Telecommunications\n\
    \              Policy Research Conference (TPRC), Solomons, MD, October\n    \
    \          1995.\n   [CDNP]     M. Day, et al., \"A Model for Content Internetworking\n\
    \              (CDI)\", Work in Progress.\n   [DSTM]     J. Bound, L. Toutain,\
    \ F. Dupont, O. Medina, H. Afifi, A.\n              Durand, \"Dual Stack Transition\
    \ Mechanism (DSTM)\", Work in\n              Progress.\n   [H323]     ITU-T Recommendation\
    \ H.323: \"Packet Based Multimedia\n              Communication Systems\".\n \
    \  [HOURG]    \"Realizing the Information Future: The Internet and\n         \
    \     Beyond\", Computer Science and Telecommunications Board,\n             \
    \ National Research Council, Washington, D.C., National\n              Academy\
    \ Press, 1994. However, the \"hourglass\" metaphor was\n              first used\
    \ by John Aschenbrenner in 1979, with reference\n              to the ISO Open\
    \ Systems Interconnection model.\n   [HTTPSUB]  Moore, K., \"On the use of HTTP\
    \ as a Substrate\", BCP 56,\n              RFC 3205, February 2002.\n   [MIDARCH]\
    \  E. Lear, \"A Middlebox Architectural Framework\", Work in\n              Progress.\n\
    \   [MIDDISC]  E. Lear, \"Requirements for Discovering Middleboxes\", Work\n \
    \             in Progress.\n   [MIDFRAME] P. Srisuresh, J. Kuthan, J. Rosenberg,\
    \ A. Molitor, A.\n              Rayhan, \"Middlebox Communication: Framework and\n\
    \              Requirements\", Work in Progress.\n   [PILCPEP]  Border, J., Kojo,\
    \ M., Griner, J., Montenegro, G. and Z.\n              Shelby, \"Performance Enhancing\
    \ Proxies Intended to\n              Mitigate Link-Related Degradations\", RFC\
    \ 3135, June 2001.\n   [RSIP]     Borella, M., Lo, J., Grabelsky, D. and G. Montenegro,\n\
    \              \"Realm Specific IP: Framework\", RFC 3102, October 2001.\n   [SALTZER]\
    \  End-To-End Arguments in System Design, J.H. Saltzer,\n              D.P.Reed,\
    \ D.D.Clark, ACM TOCS, Vol 2, Number 4, November\n              1984, pp 277-288.\n\
    \   [SIPFIRE]  S. Moyer, D. Marples, S. Tsang, J. Katz, P. Gurung, T.\n      \
    \        Cheng, A. Dutta, H. Schulzrinne, A. Roychowdhury,\n              \"Framework\
    \ Draft for Networked Appliances Using the\n              Session Initiation Protocol\"\
    , Work in Progress.\n   [SOCKS6]   Kitamura, H., \"A SOCKS-based IPv6/IPv4 Gateway\
    \ Mechanism\",\n              RFC 3089, April 2001.\n   [TRANS64]  \"Overview\
    \ of Transition Techniques for IPv6-only to Talk\n              to IPv4-only Communication\"\
    , Work in Progress.\n   [WREC]     Cooper, I, Melve, I. and G. Tomlinson, \"Internet\
    \ Web\n              Replication and Caching Taxonomy\", RFC 3040, January 2001.\n\
    \   [XMLPI]    Intermediaries and XML Protocol, Mark Nottingham, Work in\n   \
    \           Progress at http://lists.w3.org/Archives/Public/xml-dist-\n      \
    \        app/2001Mar/0045.html\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Brian E. Carpenter\n   IBM Zurich Research Laboratory\n\
    \   Saeumerstrasse 4 / Postfach\n   8803 Rueschlikon\n   Switzerland\n   EMail:\
    \ brian@hursley.ibm.com\n   Scott W. Brim\n   146 Honness Lane\n   Ithaca, NY\
    \ 14850\n   USA\n   EMail: sbrim@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
