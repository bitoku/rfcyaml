- contents:
  - '                    Incremental Zone Transfer in DNS

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   This document proposes extensions to the DNS protocols to provide
    an\n   incremental zone transfer (IXFR) mechanism.\n"
  title: Abstract
- contents:
  - "1. Introduction\n   For rapid propagation of changes to a DNS database [STD13],
    it is\n   necessary to reduce latency by actively notifying servers of the\n   change.
    \ This is accomplished by the NOTIFY extension of the DNS\n   [NOTIFY].\n   The
    current full zone transfer mechanism (AXFR) is not an efficient\n   means to propagate
    changes to a small part of a zone, as it transfers\n   the entire zone file.\n
    \  Incremental transfer (IXFR) as proposed is a more efficient\n   mechanism,
    as it transfers only the changed portion(s) of a zone.\n   In this document, a
    secondary name server which requests IXFR is\n   called an IXFR client and a primary
    or secondary name server which\n   responds to the request is called an IXFR server.\n"
  title: 1. Introduction
- contents:
  - "2. Brief Description of the Protocol\n   If an IXFR client, which likely has
    an older version of a zone,\n   thinks it needs new information about the zone
    (typically through SOA\n   refresh timeout or the NOTIFY mechanism), it sends
    an IXFR message\n   containing the SOA serial number of its, presumably outdated,
    copy of\n   the zone.\n   An IXFR server should keep record of the newest version
    of the zone\n   and the differences between that copy and several older versions.\n
    \  When an IXFR request with an older version number is received, the\n   IXFR
    server needs to send only the differences required to make that\n   version current.
    \ Alternatively, the server may choose to transfer\n   the entire zone just as
    in a normal full zone transfer.\n   When a zone has been updated, it should be
    saved in stable storage\n   before the new version is used to respond to IXFR
    (or AXFR) queries.\n   Otherwise, if the server crashes, data which is no longer
    available\n   may have been distributed to secondary servers, which can cause\n
    \  persistent database inconsistencies.\n   If an IXFR query with the same or
    newer version number than that of\n   the server is received, it is replied to
    with a single SOA record of\n   the server's current version, just as in AXFR.\n
    \  Transport of a query may be by either UDP or TCP.  If an IXFR query\n   is
    via UDP, the IXFR server may attempt to reply using UDP if the\n   entire response
    can be contained in a single DNS packet.  If the UDP\n   reply does not fit, the
    query is responded to with a single SOA\n   record of the server's current version
    to inform the client that a\n   TCP query should be initiated.\n   Thus, a client
    should first make an IXFR query using UDP.  If the\n   query type is not recognized
    by the server, an AXFR (preceded by a\n   UDP SOA query) should be tried, ensuring
    backward compatibility.  If\n   the query response is a single packet with the
    entire new zone, or if\n   the server does not have a newer version than the client,
    everything\n   is done.  Otherwise, a TCP IXFR query should be tried.\n   To ensure
    integrity, servers should use UDP checksums for all UDP\n   responses.  A cautious
    client which receives a UDP packet with a\n   checksum value of zero should ignore
    the result and try a TCP IXFR\n   instead.\n   The query type value of IXFR assigned
    by IANA is 251.\n"
  title: 2. Brief Description of the Protocol
- contents:
  - "3. Query Format\n   The IXFR query packet format is the same as that of a normal
    DNS\n   query, but with the query type being IXFR and the authority section\n
    \  containing the SOA record of client's version of the zone.\n"
  title: 3. Query Format
- contents:
  - "4. Response Format\n   If incremental zone transfer is not available, the entire
    zone is\n   returned.  The first and the last RR of the response is the SOA\n
    \  record of the zone.  I.e. the behavior is the same as an AXFR\n   response
    except the query type is IXFR.\n   If incremental zone transfer is available,
    one or more difference\n   sequences is returned.  The list of difference sequences
    is preceded\n   and followed by a copy of the server's current version of the
    SOA.\n   Each difference sequence represents one update to the zone (one SOA\n
    \  serial change) consisting of deleted RRs and added RRs.  The first RR\n   of
    the deleted RRs is the older SOA RR and the first RR of the added\n   RRs is the
    newer SOA RR.\n   Modification of an RR is performed first by removing the original
    RR\n   and then adding the modified one.\n   The sequences of differential information
    are ordered oldest first\n   newest last.  Thus, the differential sequences are
    the history of\n   changes made since the version known by the IXFR client up
    to the\n   server's current version.\n   RRs in the incremental transfer messages
    may be partial.  That is, if\n   a single RR of multiple RRs of the same RR type
    changes, only the\n   changed RR is transferred.\n   An IXFR client, should only
    replace an older version with a newer\n   version after all the differences have
    been successfully processed.\n   An incremental response is different from that
    of a non-incremental\n   response in that it begins with two SOA RRs, the server's
    current SOA\n   followed by the SOA of the client's version which is about to
    be\n   replaced.\n   5. Purging Strategy\n   An IXFR server can not be required
    to hold all previous versions\n   forever and may delete them anytime. In general,
    there is a trade-off\n   between the size of storage space and the possibility
    of using IXFR.\n   Information about older versions should be purged if the total
    length\n   of an IXFR response would be longer than that of an AXFR response.\n
    \  Given that the purpose of IXFR is to reduce AXFR overhead, this\n   strategy
    is quite reasonable.  The strategy assures that the amount\n   of storage required
    is at most twice that of the current zone\n   information.\n   Information older
    than the SOA expire period may also be purged.\n"
  title: 4. Response Format
- contents:
  - "6. Optional Condensation of Multiple Versions\n   An IXFR server may optionally
    condense multiple difference sequences\n   into a single difference sequence,
    thus, dropping information on\n   intermediate versions.\n   This may be beneficial
    if a lot of versions, not all of which are\n   useful, are generated. For example,
    if multiple ftp servers share a\n   single DNS name and the IP address associated
    with the name is\n   changed once a minute to balance load between the ftp servers,
    it is\n   not so important to keep track of all the history of changes.\n   But,
    this feature may not be so useful if an IXFR client has access\n   to two IXFR
    servers: A and B, with inconsistent condensation results.\n   The current version
    of the IXFR client, received from server A, may\n   be unknown to server B. In
    such a case, server B can not provide\n   incremental data from the unknown version
    and a full zone transfer is\n   necessary.\n   Condensation is completely optional.
    Clients can't detect from the\n   response whether the server has condensed the
    reply or not.\n   For interoperability, IXFR servers, including those without
    the\n   condensation feature, should not flag an error even if it receives a\n
    \  client's IXFR request with a unknown version number and should,\n   instead,
    attempt to perform a full zone transfer.\n"
  title: 6. Optional Condensation of Multiple Versions
- contents:
  - "7. Example\n   Given the following three generations of data with the current
    serial\n   number of 3,\n      JAIN.AD.JP.         IN SOA NS.JAIN.AD.JP. mohta.jain.ad.jp.
    (\n                                        1 600 600 3600000 604800)\n                          IN
    NS  NS.JAIN.AD.JP.\n      NS.JAIN.AD.JP.      IN A   133.69.136.1\n      NEZU.JAIN.AD.JP.
    \   IN A   133.69.136.5\n   NEZU.JAIN.AD.JP. is removed and JAIN-BB.JAIN.AD.JP.
    is added.\n      jain.ad.jp.         IN SOA ns.jain.ad.jp. mohta.jain.ad.jp. (\n
    \                                       2 600 600 3600000 604800)\n                          IN
    NS  NS.JAIN.AD.JP.\n      NS.JAIN.AD.JP.      IN A   133.69.136.1\n      JAIN-BB.JAIN.AD.JP.
    IN A   133.69.136.4\n                          IN A   192.41.197.2\n   One of
    the IP addresses of JAIN-BB.JAIN.AD.JP. is changed.\n      JAIN.AD.JP.         IN
    SOA ns.jain.ad.jp. mohta.jain.ad.jp. (\n                                        3
    600 600 3600000 604800)\n                          IN NS  NS.JAIN.AD.JP.\n      NS.JAIN.AD.JP.
    \     IN A   133.69.136.1\n      JAIN-BB.JAIN.AD.JP. IN A   133.69.136.3\n                          IN
    A   192.41.197.2\n   The following IXFR query\n                 +---------------------------------------------------+\n
    \     Header     | OPCODE=SQUERY                                     |\n                 +---------------------------------------------------+\n
    \     Question   | QNAME=JAIN.AD.JP., QCLASS=IN, QTYPE=IXFR          |\n                 +---------------------------------------------------+\n
    \     Answer     | <empty>                                           |\n                 +---------------------------------------------------+\n
    \     Authority  | JAIN.AD.JP.         IN SOA serial=1               |\n                 +---------------------------------------------------+\n
    \     Additional | <empty>                                           |\n                 +---------------------------------------------------+\n
    \  could be replied to with the following full zone transfer message:\n                 +---------------------------------------------------+\n
    \     Header     | OPCODE=SQUERY, RESPONSE                           |\n                 +---------------------------------------------------+\n
    \     Question   | QNAME=JAIN.AD.JP., QCLASS=IN, QTYPE=IXFR          |\n                 +---------------------------------------------------+\n
    \     Answer     | JAIN.AD.JP.         IN SOA serial=3               |\n                 |
    JAIN.AD.JP.         IN NS  NS.JAIN.AD.JP.         |\n                 | NS.JAIN.AD.JP.
    \     IN A   133.69.136.1           |\n                 | JAIN-BB.JAIN.AD.JP.
    IN A   133.69.136.3           |\n                 | JAIN-BB.JAIN.AD.JP. IN A   192.41.197.2
    \          |\n                 | JAIN.AD.JP.         IN SOA serial=3               |\n
    \                +---------------------------------------------------+\n      Authority
    \ | <empty>                                           |\n                 +---------------------------------------------------+\n
    \     Additional | <empty>                                           |\n                 +---------------------------------------------------+\n
    \  or with the following incremental message:\n                 +---------------------------------------------------+\n
    \     Header     | OPCODE=SQUERY, RESPONSE                           |\n                 +---------------------------------------------------+\n
    \     Question   | QNAME=JAIN.AD.JP., QCLASS=IN, QTYPE=IXFR          |\n                 +---------------------------------------------------+\n
    \     Answer     | JAIN.AD.JP.         IN SOA serial=3               |\n                 |
    JAIN.AD.JP.         IN SOA serial=1               |\n                 | NEZU.JAIN.AD.JP.
    \   IN A   133.69.136.5           |\n                 | JAIN.AD.JP.         IN
    SOA serial=2               |\n                 | JAIN-BB.JAIN.AD.JP. IN A   133.69.136.4
    \          |\n                 | JAIN-BB.JAIN.AD.JP. IN A   192.41.197.2           |\n
    \                | JAIN.AD.JP.         IN SOA serial=2               |\n                 |
    JAIN-BB.JAIN.AD.JP. IN A   133.69.136.4           |\n                 | JAIN.AD.JP.
    \        IN SOA serial=3               |\n                 | JAIN-BB.JAIN.AD.JP.
    IN A   133.69.136.3           |\n                 | JAIN.AD.JP.         IN SOA
    serial=3               |\n                 +---------------------------------------------------+\n
    \     Authority  | <empty>                                           |\n                 +---------------------------------------------------+\n
    \     Additional | <empty>                                           |\n                 +---------------------------------------------------+\n
    \  or with the following condensed incremental message:\n                 +---------------------------------------------------+\n
    \     Header     | OPCODE=SQUERY, RESPONSE                           |\n                 +---------------------------------------------------+\n
    \     Question   | QNAME=JAIN.AD.JP., QCLASS=IN, QTYPE=IXFR          |\n                 +---------------------------------------------------+\n
    \     Answer     | JAIN.AD.JP.         IN SOA serial=3               |\n                 |
    JAIN.AD.JP.         IN SOA serial=1               |\n                 | NEZU.JAIN.AD.JP.
    \   IN A   133.69.136.5           |\n                 | JAIN.AD.JP.         IN
    SOA serial=3               |\n                 | JAIN-BB.JAIN.AD.JP. IN A   133.69.136.3
    \          |\n                 | JAIN-BB.JAIN.AD.JP. IN A   192.41.197.2           |\n
    \                | JAIN.AD.JP.         IN SOA serial=3               |\n                 +---------------------------------------------------+\n
    \     Authority  | <empty>                                           |\n                 +---------------------------------------------------+\n
    \     Additional | <empty>                                           |\n                 +---------------------------------------------------+\n
    \  or, if UDP packet overflow occurs, with the following message:\n                 +---------------------------------------------------+\n
    \     Header     | OPCODE=SQUERY, RESPONSE                           |\n                 +---------------------------------------------------+\n
    \     Question   | QNAME=JAIN.AD.JP., QCLASS=IN, QTYPE=IXFR          |\n                 +---------------------------------------------------+\n
    \     Answer     | JAIN.AD.JP.         IN SOA serial=3               |\n                 +---------------------------------------------------+\n
    \     Authority  | <empty>                                           |\n                 +---------------------------------------------------+\n
    \     Additional | <empty>                                           |\n                 +---------------------------------------------------+\n"
  title: 7. Example
- contents:
  - "8. Acknowledgements\n   The original idea of IXFR was conceived by Anant Kumar,
    Steve Hotz\n   and Jon Postel.\n   For the refinement of the protocol and documentation,
    many people\n   have contributed including, but not limited to, Anant Kumar, Robert\n
    \  Austein, Paul Vixie, Randy Bush, Mark Andrews, Robert Elz and the\n   members
    of the IETF DNSIND working group.\n"
  title: 8. Acknowledgements
- contents:
  - "9. References\n   [NOTIFY] Vixie, P., \"DNS NOTIFY: A Mechanism for Prompt\n
    \  Notification of Zone Changes\", RFC 1996, August 1996.\n   [STD13] Mockapetris,
    P., \"Domain Name System\", STD 13, RFC 1034 and\n   RFC 1035), November 1987.\n"
  title: 9. References
- contents:
  - "10. Security Considerations\n   Though DNS is related to several security problems,
    no attempt is\n   made to fix them in this document.\n   This document is believed
    to introduce no additional security\n   problems to the current DNS protocol.\n"
  title: 10. Security Considerations
- contents:
  - "11. Author's Address\n   Masataka Ohta\n   Computer Center\n   Tokyo Institute
    of Technology\n   2-12-1, O-okayama, Meguro-ku, Tokyo 152, JAPAN\n   Phone: +81-3-5734-3299\n
    \  Fax: +81-3-5734-3415\n   EMail: mohta@necom830.hpcl.titech.ac.jp\n"
  title: 11. Author's Address
