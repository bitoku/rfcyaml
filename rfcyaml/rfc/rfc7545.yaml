- contents:
  - '            Protocol to Access White-Space (PAWS) Databases

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Portions of the radio spectrum that are allocated to licensees are\n
    \  available for non-interfering use.  This available spectrum is called\n   \"white
    space\".  Allowing secondary users access to available spectrum\n   \"unlocks\"
    existing spectrum to maximize its utilization and to\n   provide opportunities
    for innovation, resulting in greater overall\n   spectrum utilization.\n   One
    approach to managing spectrum sharing uses databases to report\n   spectrum availability
    to devices.  To achieve interoperability among\n   multiple devices and databases,
    a standardized protocol must be\n   defined and implemented.  This document defines
    such a protocol, the\n   \"Protocol to Access White-Space (PAWS) Databases\".\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7545.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   5\n   2.  Conventions and Terminology . . . . . . . . . . . . . .
    . . .   5\n     2.1.  Conventions Used in This Document . . . . . . . . . . .
    .   5\n     2.2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   6\n
    \  3.  Protocol Overview . . . . . . . . . . . . . . . . . . . . . .   7\n     3.1.
    \ Multi-ruleset Support . . . . . . . . . . . . . . . . . .   8\n   4.  Protocol
    Functionalities  . . . . . . . . . . . . . . . . . .   9\n     4.1.  Database
    Discovery  . . . . . . . . . . . . . . . . . . .  11\n       4.1.1.  Preconfiguration
    \ . . . . . . . . . . . . . . . . . .  11\n       4.1.2.  Configuration Update:
    Database URI Changes  . . . . .  11\n       4.1.3.  Error Handling  . . . . .
    . . . . . . . . . . . . . .  12\n     4.2.  PAWS Version  . . . . . . . . . .
    . . . . . . . . . . . .  12\n     4.3.  Initialization  . . . . . . . . . . .
    . . . . . . . . . .  12\n       4.3.1.  INIT_REQ  . . . . . . . . . . . . . .
    . . . . . . . .  13\n       4.3.2.  INIT_RESP . . . . . . . . . . . . . . . .
    . . . . . .  14\n     4.4.  Device Registration . . . . . . . . . . . . . . .
    . . . .  15\n       4.4.1.  REGISTRATION_REQ  . . . . . . . . . . . . . . . .
    . .  16\n       4.4.2.  REGISTRATION_RESP . . . . . . . . . . . . . . . . . .
    \ 17\n     4.5.  Available Spectrum Query  . . . . . . . . . . . . . . . .  18\n
    \      4.5.1.  AVAIL_SPECTRUM_REQ  . . . . . . . . . . . . . . . . .  21\n       4.5.2.
    \ AVAIL_SPECTRUM_RESP . . . . . . . . . . . . . . . . .  23\n       4.5.3.  AVAIL_SPECTRUM_BATCH_REQ
    \ . . . . . . . . . . . . . .  26\n       4.5.4.  AVAIL_SPECTRUM_BATCH_RESP .
    . . . . . . . . . . . . .  28\n       4.5.5.  SPECTRUM_USE_NOTIFY . . . . . .
    . . . . . . . . . . .  29\n       4.5.6.  SPECTRUM_USE_RESP . . . . . . . . .
    . . . . . . . . .  31\n     4.6.  Device Validation . . . . . . . . . . . . .
    . . . . . . .  31\n       4.6.1.  DEV_VALID_REQ . . . . . . . . . . . . . . .
    . . . . .  32\n       4.6.2.  DEV_VALID_RESP  . . . . . . . . . . . . . . . .
    . . .  33\n   5.  Protocol Parameters . . . . . . . . . . . . . . . . . . . .
    .  34\n     5.1.  GeoLocation . . . . . . . . . . . . . . . . . . . . . . .  34\n
    \    5.2.  DeviceDescriptor  . . . . . . . . . . . . . . . . . . . .  37\n     5.3.
    \ AntennaCharacteristics  . . . . . . . . . . . . . . . . .  38\n     5.4.  DeviceCapabilities
    \ . . . . . . . . . . . . . . . . . . .  39\n     5.5.  DeviceOwner . . . . .
    . . . . . . . . . . . . . . . . . .  39\n     5.6.  RulesetInfo . . . . . . .
    . . . . . . . . . . . . . . . .  40\n     5.7.  DbUpdateSpec  . . . . . . . .
    . . . . . . . . . . . . . .  41\n     5.8.  DatabaseSpec  . . . . . . . . . .
    . . . . . . . . . . . .  42\n     5.9.  SpectrumSpec  . . . . . . . . . . . .
    . . . . . . . . . .  42\n     5.10. SpectrumSchedule  . . . . . . . . . . . .
    . . . . . . . .  44\n     5.11. Spectrum  . . . . . . . . . . . . . . . . . .
    . . . . . .  44\n     5.12. SpectrumProfile . . . . . . . . . . . . . . . . .
    . . . .  50\n     5.13. FrequencyRange  . . . . . . . . . . . . . . . . . . .
    . .  51\n     5.14. EventTime . . . . . . . . . . . . . . . . . . . . . . . .
    \ 51\n     5.15. GeoSpectrumSpec . . . . . . . . . . . . . . . . . . . . .  52\n
    \    5.16. DeviceValidity  . . . . . . . . . . . . . . . . . . . . .  53\n     5.17.
    Error Element . . . . . . . . . . . . . . . . . . . . . .  53\n       5.17.1.
    \ OUTSIDE_COVERAGE Error . . . . . . . . . . . . . . .  55\n       5.17.2.  DATABASE_CHANGE
    Error  . . . . . . . . . . . . . . .  56\n       5.17.3.  MISSING Error  . . .
    . . . . . . . . . . . . . . . .  56\n   6.  Message Encoding  . . . . . . . .
    . . . . . . . . . . . . . .  57\n     6.1.  JSON-RPC Binding  . . . . . . . .
    . . . . . . . . . . . .  57\n       6.1.1.  Method Names  . . . . . . . . . .
    . . . . . . . . . .  59\n       6.1.2.  JSON Encoding of Data Models  . . . .
    . . . . . . . .  59\n     6.2.  Example Encoding: spectrum.paws.init Method .
    . . . . . .  61\n     6.3.  Example Encoding: spectrum.paws.getSpectrum Method
    \ . . .  62\n     6.4.  Example Encoding: DeviceOwner vCard . . . . . . . . .
    . .  66\n   7.  HTTPS Binding . . . . . . . . . . . . . . . . . . . . . . . .
    \ 66\n   8.  Extensibility . . . . . . . . . . . . . . . . . . . . . . . .  68\n
    \    8.1.  Defining Ruleset Identifiers  . . . . . . . . . . . . . .  68\n     8.2.
    \ Defining New Message Parameters . . . . . . . . . . . . .  69\n     8.3.  Defining
    Additional Error Codes . . . . . . . . . . . . .  69\n   9.  IANA Considerations
    . . . . . . . . . . . . . . . . . . . . .  69\n     9.1.  PAWS Ruleset ID Registry
    \ . . . . . . . . . . . . . . . .  70\n       9.1.1.  Registration Template .
    . . . . . . . . . . . . . . .  70\n       9.1.2.  Initial Registry Contents .
    . . . . . . . . . . . . .  72\n     9.2.  PAWS Parameters Registry  . . . . .
    . . . . . . . . . . .  78\n       9.2.1.  Registration Template . . . . . . .
    . . . . . . . . .  78\n       9.2.2.  Initial Registry Contents . . . . . . .
    . . . . . . .  78\n     9.3.  PAWS Error Code Registry  . . . . . . . . . . .
    . . . . .  80\n       9.3.1.  Registration Template . . . . . . . . . . . . .
    . . .  81\n       9.3.2.  Initial Registry Contents . . . . . . . . . . . . .
    .  81\n   10. Security Considerations . . . . . . . . . . . . . . . . . . .  81\n
    \    10.1.  Assurance of Proper Database . . . . . . . . . . . . . .  83\n     10.2.
    \ Protection against Modification  . . . . . . . . . . . .  84\n     10.3.  Protection
    against Eavesdropping . . . . . . . . . . . .  84\n     10.4.  Client Authentication
    Considerations . . . . . . . . . .  84\n   11. References  . . . . . . . . . .
    . . . . . . . . . . . . . . .  85\n     11.1.  Normative References . . . . .
    . . . . . . . . . . . . .  85\n     11.2.  Informative References . . . . . .
    . . . . . . . . . . .  86\n   Appendix A.  Database Listing Server Support  .
    . . . . . . . . .  88\n   Acknowledgments . . . . . . . . . . . . . . . . . .
    . . . . . . .  89\n   Contributors  . . . . . . . . . . . . . . . . . . . . .
    . . . . .  89\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . .
    . . .  90\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This section provides some high-level introductory material.
    \ Readers\n   are strongly encouraged to read \"Protocol to Access White-Space\n
    \  (PAWS) Databases: Use Cases and Requirements\" [RFC6953] for use\n   cases,
    requirements, and additional background.\n   A geospatial database can track available
    spectrum (in accordance\n   with the rules of one or more regulatory domains)
    and make this\n   information available to devices.  This approach shifts the\n
    \  complexity of spectrum-policy conformance out of the device and into\n   the
    database.  This approach also simplifies adoption of policy\n   changes, limiting
    updates to a handful of databases, rather than\n   numerous devices.  It opens
    the door for innovations in spectrum\n   management that can incorporate a variety
    of parameters, including\n   user location and time.  In the future, it also can
    include other\n   parameters, such as user priority, signal type and power, spectrum\n
    \  supply and demand, payment or micro-auction bidding, and more.\n   In providing
    this service, a database records and updates information\n   necessary to protect
    primary users -- for example, this information\n   may include parameters such
    as a fixed transmitter's call sign, its\n   geolocation, antenna height, power,
    and periods of operation.  The\n   rules that the database is required to follow,
    including its schedule\n   for obtaining and updating protection information,
    protection rules,\n   and information reported to devices, vary according to regulatory\n
    \  domain.  Such variations, however, should be handled by each database\n   and
    hidden from devices to the maximum extent possible.\n   This specification defines
    an extensible protocol, built on top of\n   HTTP and TLS, to obtain available
    spectrum from a geospatial database\n   by a device with geolocation capability.
    \ It enables a device to\n   operate in a regulatory domain that implements this
    protocol.\n"
  title: 1.  Introduction
- contents:
  - '2.  Conventions and Terminology

    '
  - contents:
    - "2.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in \"Key words for use in\n   RFCs to Indicate Requirement Levels\"
      [RFC2119].\n"
    title: 2.1.  Conventions Used in This Document
  - contents:
    - "2.2.  Terminology\n   Database or Spectrum Database:  A Database is an entity
      that contains\n      current information about available spectrum at a given
      location\n      and time, as well as other types of information related to\n
      \     spectrum availability and usage.\n   Device ID:  An identifier for a device.\n
      \  EIRP:  Effective Isotropically Radiated Power\n   ETSI:  European Telecommunications
      Standards Institute\n      (http://www.etsi.org)\n   FCC:  The U.S.  Federal
      Communications Commission\n      (http://www.fcc.gov)\n   Listing server:  A
      server that provides the URIs for one or more\n      Spectrum Databases.  A
      regulator, for example, may operate a\n      Database Listing Server to publish
      the list of authorized Spectrum\n      Databases for its regulatory domain.\n
      \  Master Device:  A device that queries the Database, on its own behalf\n      and/or
      on behalf of a slave device, to obtain available spectrum\n      information.\n
      \  Regulatory Domain:  A location where certain rules apply to the use\n      of
      white-space spectrum, including the operation of Databases and\n      devices
      involved in its use.  A regulatory domain is normally\n      defined by a unit
      of government for a particular country, but PAWS\n      is agnostic as to how
      a regulatory domain is constructed.\n   Ruleset:  A ruleset represents a set
      of rules that governs the\n      operation of white-space devices and Spectrum
      Databases.  A\n      regulatory authority can define its own set of rules or
      adopt an\n      existing ruleset.  When a Database or device is said to \"support
      a\n      ruleset\", it means that it contains out-of-band knowledge of the\n
      \     rules and that its hardware and software implementations conform\n      to
      those rules.\n   Ruleset Identifier:  A ruleset can be identified by an IANA-\n
      \     registered identifier (see PAWS Ruleset ID Registry\n      (Section 9.1)).
      \ When a Database or device indicates it supports a\n      ruleset identifier,
      it means that it conforms to the rules\n      associated with that identifier.
      \ A regulatory authority can\n      define and register its own ruleset identifiers,
      or it can use a\n      previously registered identifier if it adopts an existing
      ruleset.\n   Slave Device:  A device that queries the Database through a master\n
      \     device.\n"
    title: 2.2.  Terminology
  title: 2.  Conventions and Terminology
- contents:
  - "3.  Protocol Overview\n   A Master Device uses PAWS to obtain a schedule of available
    spectrum\n   at its location.  The security necessary to ensure the accuracy,\n
    \  privacy, and confidentiality of the device's location is described in\n   the
    Security Considerations (Section 10).  This document assumes that\n   the Master
    Device and the Database are connected to the Internet.\n   A typical sequence
    of PAWS operations is outlined as follows.  See\n   \"Protocol Functionalities\"
    (Section 4) and \"Protocol Parameters\"\n   (Section 5) for details:\n   1.   The
    Master Device obtains (statically or dynamically) the URI\n        for a Database
    appropriate for its location, to which to send\n        subsequent PAWS messages.\n
    \  2.   The Master Device establishes an HTTPS session with the\n        Database.\n
    \  3.   The Master Device optionally sends an initialization message to\n        the
    Database to exchange capabilities.\n   4.   If the Database receives an initialization
    message, it responds\n        with an initialization-response message in the body
    of the HTTP\n        response.\n   5.   The Database may require the Master Device
    to be registered\n        before providing service.\n   6.   The Master Device
    sends an available-spectrum request message to\n        the Database.  The message
    may be on behalf of a Slave Device\n        that made a request to the Master
    Device.\n   7.   If the Master Device is making a request on behalf of a Slave\n
    \       Device, the Master Device may verify with the Database that the\n        Slave
    Device is permitted to operate.\n   8.   The Database responds with an available-spectrum
    response\n        message in the body of the HTTP response.\n   9.   The Master
    Device may send a spectrum-usage notification message\n        to the Database.
    \ The notification is purely informational; it\n        notifies the Database
    what spectrum the Master Device intends to\n        use and is not a request to
    the Database to get permission to\n        use that spectrum.  Some Databases
    may require spectrum-usage\n        notification.\n   10.  If the Database receives
    a spectrum-usage notification message,\n        it responds by sending the Master
    Device a spectrum-usage\n        acknowledgement message.  Since the notification
    is purely\n        informational, the Master Device does not need to process the\n
    \       database response.\n   Different regulatory domains may impose particular
    requirements, such\n   as requiring Master Devices to register with the Database,
    performing\n   Slave Device verification, and sending spectrum-usage notifications.\n"
  - contents:
    - "3.1.  Multi-ruleset Support\n   For a Master Device that supports multiple
      rulesets and operates with\n   multiple Databases, PAWS supports the following
      sequence of\n   operations for each request by the Master Device:\n   1.  The
      Master Device includes in its request its location and\n       optionally includes
      the identifier of all the rulesets it\n       supports and any parameter values
      it might need for the request.\n   2.  The Database uses the device location
      and also may use the\n       ruleset list to determine its response, for example,
      to select\n       the list of required parameters.\n   3.  If required parameters
      are missing from the request, the Database\n       responds with an error and
      a list of names of the missing\n       parameters.\n   4.  The Master Device
      makes the request again, adding the missing\n       parameter values.\n   5.
      \ The Database responds to the request, including the identifier of\n       the
      applicable ruleset.\n   6.  The Master Device uses the indicated ruleset to
      determine how to\n       interpret the database response.\n   NOTE: Some regulatory
      domains specify sets of requirements for device\n   behavior that may be complex
      and not easily parameterized.  The\n   ruleset-id parameter provides a mechanism
      for the Database to inform\n   the Master Device of an applicable ruleset, and,
      for devices with\n   out-of-band knowledge of the particular regulatory domain\n
      \  requirements, to satisfy those requirements without having to specify\n   the
      device-side behavior within the protocol.  Ruleset identifiers\n   will normally
      contain the name of the regulatory body that\n   established the rules and version
      information, such as\n   \"FccTvBandWhiteSpace-2010\".\n   By separating the
      regulatory \"authority\" from the \"ruleset-id\", it\n   allows the protocol
      to support multiple regulatory authorities that\n   use the same device-side
      ruleset.  It also allows support for a\n   single authority to define multiple
      rulesets.\n"
    title: 3.1.  Multi-ruleset Support
  title: 3.  Protocol Overview
- contents:
  - "4.  Protocol Functionalities\n   PAWS consists of several components.  As noted
    below, some regulatory\n   domains or database implementations may mandate the
    use of a\n   component, even when its use is not mandated by PAWS.\n   o  Database
    Discovery (Section 4.1) is a required component for the\n      Master Device.\n
    \  o  Initialization (Section 4.3) is a required component for the\n      Database.
    \ Its use allows the Master Device to determine necessary\n      information that
    has not been preconfigured.\n   o  Device Registration (Section 4.4) is an optional
    component for the\n      Database.  It can be implemented as a separate component
    or as\n      part of the Available Spectrum Query (Section 4.5) component.  It\n
    \     is used by the Master Device when the Database requires it.  Note\n      that
    some regulators require device registration for only specific\n      device types,
    such as higher-power fixed (as opposed to mobile)\n      devices, to allow them
    to contact the operators to resolve any\n      interference issues.\n   o  Available
    Spectrum Query (Section 4.5) is a required component for\n      the Master Device
    and the Database.\n   o  Spectrum Use Notify (Section 4.5.5) is an optional component
    for\n      the Master Device and the Database.  When it is required, the\n      Database
    informs the Master Device via its response to the\n      Available Spectrum Query
    (Section 4.5).\n   o  Device Validation (Section 4.6) as a separate component
    is\n      optional for the Master Device and Database.  When implemented by\n
    \     the Database, its use allows the Master Device to validate Slave\n      Devices
    without having to use the full Available Spectrum Query.\n   This section describes
    the protocol components and their messages.\n   \"Protocol Parameters\" (Section
    5) contains a more thorough discussion\n   of the parameters that make up the
    PAWS request and response\n   messages.  \"Message Encoding\" (Section 6) provides
    examples of\n   message encodings.  \"HTTPS Binding\" (Section 7) describes the
    use of\n   HTTPS (\"HTTP Over TLS\" [RFC2818]) for transferring PAWS messages
    and\n   optional device authentication.\n   The parameter tables in this section
    and \"Protocol Parameters\"\n   (Section 5) are for reference and contain the
    name of each parameter,\n   the data type of each parameter, and whether the existence
    of the\n   parameter is required for the protocol transaction in question.  The\n
    \  diagrams are loosely based on the Unified Modeling Language (UML),\n   and
    the data types are defined either in \"Protocol Parameters\"\n   (Section 5) or
    are one of the following primitive or structured\n   types:\n   string:  A string,
    as defined by JSON [RFC7159], restricted to the\n      UTF-8 encoding.\n   int:
    \ A number, as defined by JSON [RFC7159], without a fractional or\n      exponent
    part.\n   float:  A number, as defined by JSON [RFC7159].\n   boolean:  A boolean,
    as defined by JSON [RFC7159].\n   list:  A structured type that represents a list
    of elements, as\n      defined by JSON [RFC7159] array type.  All elements of
    the list\n      are of the same data type, which is indicated in its diagram and\n
    \     description.  The diagram notation and description may include\n      additional
    constraints, such as minimum or maximum number of\n      elements.\n   Also:\n
    \  o  All parameter names are case sensitive.  Unless stated otherwise,\n      all
    string values are case sensitive.\n   o  All timestamps are in UTC and are expressed
    using exactly the\n      form, YYYY-MM-DDThh:mm:ssZ, as defined by \"Date and
    Time on the\n      Internet: Timestamps\" [RFC3339].\n   In some cases, specific
    rulesets may place additional requirements on\n   message parameters.  These additional
    requirements will be documented\n   in the IANA PAWS Ruleset ID Registry (Section
    9.1).  When a request\n   message sent to the Database has missing parameters,
    whether they are\n   required by PAWS or the applicable ruleset, the Database
    returns the\n   MISSING error (see Section 5.17.3), along with data indicating
    the\n   missing parameters.\n"
  - contents:
    - '4.1.  Database Discovery

      '
    - contents:
      - "4.1.1.  Preconfiguration\n   The Master Device can be provisioned statically
        (preconfigured) with\n   the URI of one or more Databases.  For example, in
        a particular\n   regulatory domain, there may be a number of certified Databases
        that\n   any device operating in that domain is permitted to connect to, and\n
        \  those URIs can be preconfigured in the device.\n   Listing Server Support:
        As an alternative to preconfiguring devices\n   with a list of certified Databases,
        some regulatory domains support\n   the preconfiguration of devices with the
        URI of a certified listing\n   server, to which devices can connect to obtain
        the list of certified\n   Databases.  See \"Database Listing Server Support\"
        (Appendix A) for\n   further information.\n"
      title: 4.1.1.  Preconfiguration
    - contents:
      - "4.1.2.  Configuration Update: Database URI Changes\n   To adapt to changes
        in the list of certified or approved Databases,\n   the device needs to update
        its preconfigured list of Databases.\n   A Database MAY change its URI, but
        before it changes its URI, it MUST\n   indicate the upcoming change by including
        the URI of one or more\n   alternate Databases using DbUpdateSpec (Section
        5.7) in its responses\n   to devices.  The Database MUST reply with DbUpdateSpec
        for a minimum\n   of 2 weeks before disabling the old URI.  A device will
        update its\n   preconfigured entry for the Database sending the DbUpdateSpec
        by\n   replacing this entry with the alternate Databases listed in the\n   DbUpdateSpec;
        the list of alternate Databases does not affect any\n   other entries.  Note
        that the ordering of Databases in the list does\n   not imply any preference
        and does not need to remain the same for\n   every request.  The device SHOULD
        detect infinite redirection loops;\n   if a suitable Database cannot be contacted,
        the device MUST treat\n   this as equivalent to a response indicating no available
        spectrum.\n   This database-change mechanism is used, for example, before
        a\n   Database ceases operation; it is not intended to be used for dynamic\n
        \  load balancing.\n"
      title: '4.1.2.  Configuration Update: Database URI Changes'
    - contents:
      - "4.1.3.  Error Handling\n   The device SHOULD select another Database from
        its list of\n   preconfigured Databases if:\n   o  The selected Database is
        unreachable or does not respond.\n   o  The selected Database returns an UNSUPPORTED
        error (see \"Error\n      Codes\" (Section 5.17)), which indicates the Database
        does not\n      support the device (based on its device type, model, etc.)
        or\n      supports none of the rulesets specified in the request.\n   If a
        suitable Database cannot be contacted, the device MUST treat\n   this as equivalent
        to a response indicating no available spectrum.\n   If the device had previously
        contacted a Database to get available\n   spectrum, but subsequently fails
        to contact a suitable Database, the\n   spectrum the device is currently using
        can be used for as long as the\n   spectrum data is valid.  However, after
        that period, the device will\n   no longer have valid spectrum to use.  Some
        regulatory domains may\n   have specific rules regarding how long the spectrum
        data remains\n   valid in these cases.\n"
      title: 4.1.3.  Error Handling
    title: 4.1.  Database Discovery
  - contents:
    - "4.2.  PAWS Version\n   PAWS version uses a \"<major>.<minor>\" numbering scheme
      to indicate\n   versions of the protocol.  The protocol versioning policy is
      intended\n   to allow the device or Database to indicate the format of a message\n
      \  and its understanding of PAWS functionality defined by that version.\n   No
      change is made to the version string for the addition of message\n   components
      that only add to extensible parameter values.  The <minor>\n   number is incremented
      when the changes made to the protocol add\n   functionalities (methods) but
      do not change the existing\n   functionalities.  The <major> number is incremented
      when incompatible\n   changes are made to existing functionality.\n   The current
      PAWS version is \"1.0\".\n"
    title: 4.2.  PAWS Version
  - contents:
    - "4.3.  Initialization\n   A Master Device SHOULD use the initialization procedure
      to exchange\n   capability information with the Database whenever the Master
      Device\n   powers up or initiates communication with the Database.  The\n   initialization
      response informs the Master Device of specific\n   parameterized-rule values
      for each supported ruleset, such as\n   threshold distances and time periods
      beyond which the device must\n   update its available-spectrum data (see \"RuleSetInfo\"
      (Section 5.6)).\n   When parameterized-rule values are not preconfigured for
      the\n   applicable ruleset at the specified location, a Master Device MUST\n
      \  use the initialization procedure.\n   It is important to note that, when
      parameterized-rule values are\n   preconfigured in a Master Device, they are
      preconfigured on a per-\n   ruleset basis.  That is, values preconfigured for
      one ruleset are not\n   applicable to any other ruleset.\n   For database implementations
      that require it, the initialization\n   message also enables extra database-specific
      or ruleset-specific\n   handshake parameters to be communicated before allowing
      available-\n   spectrum requests.\n   The Initialization request procedure is
      depicted in Figure 1.\n   o  INIT_REQ (Section 4.3.1) is the initialization
      request message\n   o  INIT_RESP (Section 4.3.2) is the initialization response
      message\n                  +---------------+    +-------------------+\n                  |
      Master Device |    | Spectrum Database |\n                  +---------------+
      \   +-------------------+\n                        |                     |\n
      \                       |    INIT_REQ         |\n                        |-------------------->|\n
      \                       |                     |\n                        |    INIT_RESP
      \       |\n                        |<--------------------|\n                        |
      \                    |\n                                 Figure 1\n"
    - contents:
      - "4.3.1.  INIT_REQ\n   The initialization request message allows the Master
        Device to\n   initiate exchange of capabilities with the Database.\n   +---------------------------------------+\n
        \  |INIT_REQ                               |\n   +----------------------------+----------|\n
        \  |deviceDesc:DeviceDescriptor | REQUIRED |\n   |location:GeoLocation        |
        REQUIRED |\n   |.......................................|\n   |*other:any                  |
        OPTIONAL |\n   +----------------------------+----------+\n   Parameters:\n
        \  deviceDesc:  The DeviceDescriptor (Section 5.2) for the device is\n      REQUIRED.
        \ If the device descriptor does not contain any ruleset\n      IDs, the Master
        Device is asking the Database to return a\n      RulesetInfo (Section 5.6)
        list that specifies the rulesets that it\n      supports at the specified
        location.\n   location:  The GeoLocation (Section 5.1) of the device is REQUIRED.\n
        \     If the location is outside all regulatory domain supported by the\n
        \     Database, the Database MUST respond with an OUTSIDE_COVERAGE error\n
        \     (see Table 1).\n   other:  The Master Device MAY specify additional
        handshake parameters\n      in the INIT_REQ message.  The Database MUST ignore
        all parameters\n      it does not understand.  To simplify its initialization
        logic, a\n      Master Device that supports multiple Databases and rulesets
        can\n      include the union of all required parameters for all its supported\n
        \     rulesets.  Consult the PAWS Parameters Registry (Section 9.2) for\n
        \     possible additional parameters.\n"
      title: 4.3.1.  INIT_REQ
    - contents:
      - "4.3.2.  INIT_RESP\n   The initialization response message communicates database
        parameters\n   to the requesting device.  This response is returned only when
        there\n   is at least one ruleset.  Otherwise, the Database returns an error\n
        \  response, as described in INIT_REQ (Section 4.3.1).\n   +---------------------------------------+\n
        \  |INIT_RESP                              |\n   +----------------------------+----------+
        \  1..* +-------------+\n   |rulesetInfos:list           | REQUIRED |------->|
        RulesetInfo |\n   |databaseChange:DbUpdateSpec | OPTIONAL |        +-------------+\n
        \  |.......................................|\n   |*other:any                  |
        OPTIONAL |\n   +----------------------------+----------+\n   Parameters:\n
        \  rulesetInfos:  A RulesetInfo (Section 5.6) list MUST be included in\n      the
        response.  Each RulesetInfo corresponds to a ruleset supported\n      by the
        Database and is applicable to the location specified in the\n      INIT_REQ
        (Section 4.3.1) message.\n      If the device included a list of ruleset IDs
        in the\n      DeviceDescriptor of its INIT_REQ message, each RulesetInfo in
        the\n      response MUST match one of the specified ruleset IDs.\n      If
        the DeviceDescriptor did not contain any ruleset IDs, the\n      Database
        SHOULD include in the rulesetInfos list a RulesetInfo for\n      each ruleset
        it supports at the specified location.\n      If the Database does not support
        the device or supports none of\n      the rulesets specified in the DeviceDescriptor,
        it MUST instead\n      return an error with the UNSUPPORTED code (see Table
        1) in the\n      error response.\n   databaseChange:  The Database MAY include
        a DbUpdateSpec\n      (Section 5.7) to notify the Master Device of a change
        to the\n      database URI, providing one or more alternate database URIs.
        \ The\n      device needs to update its preconfigured entry for the responding\n
        \     Database with the alternate Databases listed in the DbUpdateSpec.\n
        \  other:  The Database MAY include additional handshake parameters in\n      the
        INIT_RESP (Section 4.3.2) message.  The Master Device MUST\n      ignore all
        parameters it does not understand.  Consult the PAWS\n      Parameters Registry
        (Section 9.2) for possible additional\n      parameters.\n"
      title: 4.3.2.  INIT_RESP
    title: 4.3.  Initialization
  - contents:
    - "4.4.  Device Registration\n   Some rulesets require a Master Device to send
      its registration\n   information to the Database in order to establish certain
      operational\n   parameters.  FCC rules, for example, require that a 'Fixed Device'\n
      \  register its owner and operator contact information, its device\n   identifier,
      its location, and its antenna height (see FCC CFR47-15H\n   [FCC-CFR47-15H]).\n
      \  The Database MAY implement device registration as a separate Device\n   Registration
      request, or as part of the available-spectrum request.\n   If the Database does
      not implement a separate Device Registration\n   request, it MUST return an
      error with the UNIMPLEMENTED code (see\n   Table 1) in the error-response message.\n
      \  The Device Registration request procedure is depicted in Figure 2.\n   o
      \ REGISTRATION_REQ (Section 4.4.1) is the device-registration\n      request
      message\n   o  REGISTRATION_RESP (Section 4.4.2) is the device-registration\n
      \     response message\n                +---------------+        +-------------------+\n
      \               | Master Device |        | Spectrum Database |\n                +---------------+
      \       +-------------------+\n                      |                         |\n
      \                     |    REGISTRATION_REQ     |\n                      |------------------------>|\n
      \                     |                         |\n                      |    REGISTRATION_RESP
      \   |\n                      |<------------------------|\n                      |
      \                        |\n                                 Figure 2\n"
    - contents:
      - "4.4.1.  REGISTRATION_REQ\n   The registration request message contains the
        required registration\n   parameters.  A parameter marked as optional may
        be required by some\n   rulesets.\n   +-------------------------------------------+\n
        \  |REGISTRATION_REQ                           |\n   +-------------------------------+-----------+\n
        \  |deviceDesc:DeviceDescriptor    | REQUIRED  |\n   |location:GeoLocation
        \          | REQUIRED  |\n   |deviceOwner:DeviceOwner        | OPTIONAL  |\n
        \  |antenna:AntennaCharacteristics | OPTIONAL  |\n   |...........................................|\n
        \  |*other:any                     | OPTIONAL  |\n   +-------------------------------+-----------+\n
        \  Parameters:\n   deviceDesc:  The DeviceDescriptor (Section 5.2) for the
        Master Device\n      is REQUIRED.  The ruleset IDs included in the DeviceDescriptor\n
        \     indicate the rulesets for which the device wishes to register.\n   location:
        \ The GeoLocation (Section 5.1) for the device is REQUIRED.\n      More precisely,
        this is the location at which the device intends\n      to operate.  If the
        location is outside all regulatory domains\n      supported by the Database,
        the Database MUST respond with an\n      OUTSIDE_COVERAGE error (see Table
        1).\n   deviceOwner:  The DeviceOwner (Section 5.5) information is OPTIONAL.\n
        \     Some rulesets may require deviceOwner information under certain\n      conditions.
        \ See PAWS Ruleset ID Registry (Section 9.1) for\n      ruleset-specific requirements.\n
        \  antenna:  The AntennaCharacteristics (Section 5.3) is OPTIONAL.\n   other:
        \ Rulesets and database implementations may require additional\n      registration
        parameters.  To simplify its registration logic, the\n      Master Device
        MAY send a union of the registration information\n      required by all supported
        rulesets.  The Database MUST ignore all\n      parameters it does not understand.
        \ Consult the PAWS Parameters\n      Registry (Section 9.2) for possible additional
        parameters.\n"
      title: 4.4.1.  REGISTRATION_REQ
    - contents:
      - "4.4.2.  REGISTRATION_RESP\n   The registration response message acknowledges
        successful\n   registration by including a RulesetInfo message for each ruleset
        in\n   which the registration is accepted.  If the Database accepts the\n
        \  registration for none of the specified rulesets, the Database MUST\n   return
        the NOT_REGISTERED error (see \"Error Codes\" (Section 5.17)).\n   +---------------------------------------+\n
        \  |REGISTRATION_RESP                      |\n   +----------------------------+----------+
        \  1..* +-------------+\n   |rulesetInfos:list           | REQUIRED |------->|
        RulesetInfo |\n   |databaseChange:DbUpdateSpec | OPTIONAL |        +-------------+\n
        \  |............................|..........|\n   |*other:any                  |
        OPTIONAL |\n   +----------------------------+----------+\n   Parameters:\n
        \  rulesetInfos:  A RulesetInfo (Section 5.6) list MUST be included in\n      the
        response.  Each entry corresponds to a ruleset for which the\n      registration
        was accepted.  The list MUST contain at least one\n      entry.\n      Each
        RulesetInfo in the response MUST match one of the ruleset IDs\n      specified
        in the DeviceDescriptor of REGISTRATION_REQ.\n      If the Database does not
        support the device or supports none of\n      the rulesets specified in the
        DeviceDescriptor, it MUST instead\n      return an error with the UNSUPPORTED
        code (see Table 1) in the\n      error response.\n   databaseChange:  The
        Database MAY include a DbUpdateSpec\n      (Section 5.7) to notify the Master
        Device of a change to the\n      database URI, providing one or more alternate
        database URIs.  The\n      device needs to update its preconfigured entry
        for the responding\n      Database with the alternate Databases listed in
        the DbUpdateSpec.\n   other:  Database implementations MAY return additional
        parameters in\n      the registration response.  The Master Device MUST ignore
        any\n      parameters it does not understand.  Consult the PAWS Parameters\n
        \     Registry (Section 9.2) for possible additional parameters.\n"
      title: 4.4.2.  REGISTRATION_RESP
    title: 4.4.  Device Registration
  - contents:
    - "4.5.  Available Spectrum Query\n   To obtain the available spectrum from the
      Database, a Master Device\n   sends a request that contains its geolocation
      and any parameters\n   required by the ruleset (such as device identifier, capabilities,
      and\n   characteristics).  The Database returns a response that describes\n
      \  which frequencies are available, at what permissible operating power\n   levels,
      and a schedule of when they are available.\n   The Available Spectrum Query
      procedure is depicted in Figure 3.\n   o  AVAIL_SPECTRUM_REQ (Section 4.5.1)
      is the available-spectrum\n      request message.\n   o  AVAIL_SPECTRUM_RESP
      (Section 4.5.2) is the available-spectrum\n      response message.\n   o  AVAIL_SPECTRUM_BATCH_REQ
      (Section 4.5.3) is an OPTIONAL batch\n      version of the available-spectrum
      request message that allows\n      multiple locations to be specified in the
      request.\n   o  AVAIL_SPECTRUM_BATCH_RESP (Section 4.5.4) is the response message\n
      \     for the batch version of the available-spectrum request that\n      contains
      available spectrum for each location in the request.\n   o  SPECTRUM_USE_NOTIFY
      (Section 4.5.5) is the spectrum-usage\n      notification message.\n   o  SPECTRUM_USE_RESP
      (Section 4.5.6) is the spectrum-usage\n      acknowledgment message.\n               +---------------+
      \         +-------------------+\n               | Master Device |          |
      Spectrum Database |\n               +---------------+          +-------------------+\n
      \                    |                            |\n                     |
      \   AVAIL_SPECTRUM_REQ      |\n                     | (AVAIL_SPECTRUM_BATCH_REQ)
      |\n                     |--------------------------->|\n                     |
      \                           |\n                     |    AVAIL_SPECTRUM_RESP
      \    |\n                     | (AVAIL_SPECTRUM_BATCH_RESP)|\n                     |<---------------------------|\n
      \                    |                            |\n                     |
      \  (SPECTRUM_USE_NOTIFY)    |\n                     |--------------------------->|\n
      \                    |                            |\n                     |
      \   (SPECTRUM_USE_RESP)     |\n                     |<---------------------------|\n
      \                    |                            |\n                                 Figure
      3\n   1.  First, the Master Device sends an available-spectrum request\n       message
      to the Database.\n   2.  The Database MUST respond with an error using the NOT_REGISTERED\n
      \      code (see Table 1) if:\n       *  registration information is required,
      and\n       *  the request does not include registration information, and\n
      \      *  the device has not previously registered with the Database\n   3.
      \ If the location specified in the request is outside the\n       regulatory
      domain supported by the Database, the Database MUST\n       respond with an
      OUTSIDE_COVERAGE error (see Table 1).  If some,\n       but not all, locations
      within a batch request are outside the\n       regulatory domain supported by
      the Database, the Database MUST\n       return an OK response with available
      spectrum for only the valid\n       locations; otherwise, if all locations within
      a batch request are\n       outside the regulatory domain, the Database MUST
      respond with an\n       OUTSIDE_COVERAGE error.\n   4.  The Database MAY perform
      other validation of the request, (e.g.,\n       checking for missing required
      parameters or authorizations).  If\n       validation fails, the Database returns
      an appropriate error code\n       (Table 1).  If the request is missing required
      parameters, the\n       Database MUST respond with a MISSING error (see Table
      1) and\n       SHOULD include a list of the missing parameters.\n   5.  If the
      request is valid, the Database responds with an available-\n       spectrum
      response message.  If the ruleset requires that devices\n       must report
      anticipated spectrum usage, the Database will\n       indicate so in the response
      message.\n   6.  If the available-spectrum response indicates that the Master\n
      \      Device must send a spectrum-usage notification message, the\n       Master
      Device sends the notification message to the Database.\n       Even when not
      required by the Database, the Master Device MAY\n       send a notification
      message.\n   7.  If the Database receives a spectrum-usage notification message,\n
      \      it MUST send a spectrum-usage acknowledgment message to the\n       Master
      Device.\n   The procedure for a Master Device to ask for available spectrum
      on\n   behalf of a Slave Device is similar, except that the process is\n   initiated
      by the Slave Device.  The device identifier, capabilities,\n   and characteristics
      communicated in the AVAIL_SPECTRUM_REQ message\n   MUST be those of the Slave
      Device, and:\n   o  The \"masterDeviceLocation\" field specifying the location
      of the\n      Master Device is REQUIRED.\n   o  The \"location\" field specifying
      the location of the Slave Device\n      is OPTIONAL, since the Slave Device
      may not have location-sensing\n      capabilities.\n   Although the communication
      and protocol between the Slave Device and\n   Master Device are outside the
      scope of this document (represented as\n   dotted lines), the expected message
      sequence is shown in Figure 4.\n      +------------+     +---------------+      +-------------------+\n
      \     |Slave Device|     | Master Device |      | Spectrum Database |\n      +------------+
      \    +---------------+      +-------------------+\n          |                 |
      \                          |\n          | AVAIL_SPEC_REQ  |                           |\n
      \         |................>|                           |\n          |                 |
      \                          |\n          |                 |    AVAIL_SPECTRUM_REQ
      \    |\n          |                 |-------------------------->|\n          |
      \                |                           |\n          |                 |
      \   AVAIL_SPECTRUM_RESP    |\n          |                 |<--------------------------|\n
      \         | AVAIL_SPEC_RESP |                           |\n          |<................|
      \                          |\n          |                 |                           |\n
      \         | (SPECTRUM_USE)  |                           |\n          |................>|
      \  (SPECTRUM_USE_NOTIFY)   |\n          |                 |-------------------------->|\n
      \         |                 |                           |\n          |                 |
      \   (SPECTRUM_USE_RESP)    |\n          |                 |<--------------------------|\n
      \         |                 |                           |\n                                 Figure
      4\n"
    - contents:
      - "4.5.1.  AVAIL_SPECTRUM_REQ\n   The request message for the Available Spectrum
        Query protocol MUST\n   include a geolocation.  Rulesets may mandate that
        it be the device's\n   current location or allow it to be an anticipated location.
        \ A\n   parameter marked as optional may be required by some rulesets.\n   +----------------------------------------------------+\n
        \  |AVAIL_SPECTRUM_REQ                                  |\n   +----------------------------------+-----------------+\n
        \  |deviceDesc:DeviceDescriptor       | see description |\n   |location:GeoLocation
        \             | see description |\n   |owner:DeviceOwner                 |
        OPTIONAL        |\n   |antenna:AntennaCharacteristics    | OPTIONAL        |\n
        \  |capabilities:DeviceCapabilities   | OPTIONAL        |\n   |masterDeviceDesc:DeviceDescriptor
        | OPTIONAL        |\n   |masterDeviceLocation:GeoLocation  | see description
        |\n   |requestType:string                | OPTIONAL        |\n   |..................................|.................|\n
        \  |*other:any                        | OPTIONAL        |\n   +----------------------------------+-----------------+\n
        \  Parameters:\n   deviceDesc:  The DeviceDescriptor (Section 5.2) for the
        device\n      requesting available spectrum.  When the request is made by
        a\n      Master Device on its own behalf, the descriptor is that of the\n
        \     Master Device, and it is REQUIRED.  When the request is made on\n      behalf
        of a Slave Device, the descriptor is that of the Slave\n      Device, and
        it is REQUIRED if the \"requestType\" parameter is not\n      specified.  The
        deviceDesc parameter may be OPTIONAL for some\n      values of requestType.\n
        \  location:  The GeoLocation (Section 5.1) for the device requesting\n      available
        spectrum.  More precisely, this is the location at which\n      the device
        intends to operate.  When the request is made by the\n      Master Device
        on its own behalf, the location is that of the\n      Master Device, and it
        is REQUIRED.  When the request is made by\n      the Master Device on behalf
        of a Slave Device, the location is\n      that of the Slave Device, and it
        is OPTIONAL (see also\n      masterDeviceLocation).  The location may be an
        anticipated\n      position of the device to support mobile devices, but its
        use\n      depends on the ruleset.  If the location specifies a region,\n
        \     rather than a point, the Database MAY return an error with the\n      UNIMPLEMENTED
        code (see Table 1), if it does not implement query\n      by region.\n      NOTE:
        Technically, this is the location of the radiation center of\n      the device's
        antenna, but that distinction may be relevant only\n      for fixed devices.\n
        \  owner:  The DeviceOwner (Section 5.5) information MAY be included to\n
        \     register the device with the Database.  This enables the device to\n
        \     register and get spectrum-availability information in a single\n      request.
        \ Some rulesets mandate registration for specific device\n      types.\n   antenna:
        \ The AntennaCharacteristics (Section 5.3) is OPTIONAL.\n   capabilities:
        \ The Master Device MAY include its DeviceCapabilities\n      (Section 5.4)
        to limit the available-spectrum response to the\n      spectrum that is compatible
        with its capabilities.  The Database\n      SHOULD NOT return spectrum that
        is not compatible with the\n      specified capabilities.\n   masterDeviceDesc:
        \ When the request is made by the Master Device on\n      behalf of a Slave
        Device, the Master Device MAY provide its own\n      descriptor.\n   masterDeviceLocation:
        \ When the request is made by the Master Device\n      on behalf of a Slave
        Device, the Master Device MUST provide its\n      own GeoLocation (Section
        5.1).\n   requestType:  The request type is OPTIONAL; it may be used to modify\n
        \     the request, but its use depends on the applicable ruleset.  The\n      request
        type may be used, for example, to indicate that the\n      response should
        include generic Slave Device parameters without\n      having to specify the
        device descriptor for a specific device.\n      When requestType is missing,
        the request is for a specific device\n      (Master or Slave), so deviceDesc
        is REQUIRED.  The maximum length\n      of the value is 64 octets.  See the
        specifics in the Initial\n      Registry Contents (Section 9.1.2) for the
        Ruleset ID Registry.\n   other:  Rulesets and database implementations may
        require additional\n      request parameters.  The Database MUST ignore all
        parameters it\n      does not understand.  Consult the PAWS Parameters Registry\n
        \     (Section 9.2) for possible additional parameters.\n"
      title: 4.5.1.  AVAIL_SPECTRUM_REQ
    - contents:
      - "4.5.2.  AVAIL_SPECTRUM_RESP\n   The response message for the Available Spectrum
        Query contains one or\n   more SpectrumSpec (Section 5.9) elements, one for
        each ruleset\n   supported at the location specified in the corresponding\n
        \  AVAIL_SPECTRUM_REQ (Section 4.5.1) message.  Each SpectrumSpec\n   element
        contains a list of one or more spectrum schedules,\n   representing permissible
        power levels over time:\n   o  Each spectrum schedule specifies the permissible
        power level for a\n      duration defined by a pair of start and stop times.
        \ The power\n      levels refer to permissible EIRP over a resolution bandwidth.\n
        \  o  Within each list of schedules, event-time intervals MUST be\n      disjoint
        and MUST be sorted in increasing time.\n   o  A gap in the time schedule means
        no spectrum is available for that\n      time interval.\n   Consider a Database
        that provides a schedule of available spectrum\n   for the next 24 hours.
        \ If spectrum availability were to be different\n   at different times of
        day, the response would contain a list of\n   schedules, each transition representing
        some change to the spectrum\n   availability.  A device might use different
        strategies to select\n   which spectrum to use, e.g.:\n   o  Always use the
        frequencies that permit the highest power\n   o  Use the frequencies that
        are available for the longest period of\n      time.\n   o  Just use the first
        set of frequencies that matches its needs.\n   +---------------------------------------+\n
        \  |AVAIL_SPECTRUM_RESP                    |\n   +----------------------------+----------+\n
        \  |timestamp:string            | REQUIRED |\n   |deviceDesc:DeviceDescriptor
        | REQUIRED |\n   |spectrumSpecs:list          | REQUIRED |-------+\n   |............................|..........|
        \      |\n   |databaseChange:DbUpdateSpec | OPTIONAL |       |\n   |*other:any
        \                 | OPTIONAL |       |\n   +----------------------------+----------+
        \      | 1..*\n                                                   V\n                              +-----------------------------------+\n
        \                             |SpectrumSpec                       |\n                              +------------------------+----------+\n
        \                             |rulesetInfo:RulesetInfo | REQUIRED |\n                              |spectrumSchedules:list
        \ | REQUIRED |-+\n                              |timeRange:EventTime     |
        OPTIONAL | |\n                              |frequencyRanges:list    | OPTIONAL
        | |\n                              |needsSpectrumReport:bool| OPTIONAL | |\n
        \                             |maxTotalBwHz:float      | OPTIONAL | |\n                              |maxContiguousBwHz:float
        | OPTIONAL | |\n                              +------------------------+----------+
        |\n                                               +--------------------+\n
        \                                              | 1..*\n                                               V\n
        \                                 +-------------------------------+\n                                  |SpectrumSchedule
        \              |\n                                  +--------------------+----------+\n
        \                                 |eventTime:EventTime | REQUIRED |\n                                  |spectra:list
        \       | REQUIRED |\n                                  +--------------------+----------+\n
        \  Parameters:\n   timestamp:  Timestamp of the response is expressed in UTC
        using the\n      form, YYYY-MM-DDThh:mm:ssZ, as defined by \"Date and Time
        on the\n      Internet: Timestamps\" [RFC3339].  This can be used by the device\n
        \     as a reference for the start and stop times in the spectrum\n      schedules.\n
        \  deviceDesc:  The Database MUST include the DeviceDescriptor\n      (Section
        5.2) specified in the AVAIL_SPECTRUM_REQ message.\n   spectrumSpecs:  The
        SpectrumSpec (Section 5.9) list MUST include at\n      least one entry.  Each
        entry contains the schedules of available\n      spectrum for a ruleset.  The
        Database MAY return more than one\n      SpectrumSpec to represent available
        spectrum for multiple rulesets\n      at the specified location.\n   databaseChange:
        \ The Database MAY include a DbUpdateSpec\n      (Section 5.7) to notify the
        device of a change to the database\n      URI, providing one or more alternate
        database URIs.  The device\n      needs to update its preconfigured entry
        for the responding\n      Database with the alternate Databases listed in
        the DbUpdateSpec.\n   other:  Database implementations MAY return additional
        parameters in\n      the response.  The device MUST ignore any parameters
        that it does\n      not understand.  Consult the PAWS Parameters Registry\n
        \     (Section 9.2) for possible additional parameters and requirements\n
        \     they place on the device.\n"
      - contents:
        - "4.5.2.1.  Update Requirements\n   When the stop time specified in the schedule
          has been reached, the\n   device:\n   o  MUST obtain a new spectrum-availability
          schedule, either by using\n      the next one in the list (if provided)
          or making another Available\n      Spectrum Query (Section 4.5).\n   o  If
          the device is unable to contact the Database to obtain a new\n      schedule,
          it MUST treat this as equivalent to a response with no\n      available
          spectrum.\n   Some rulesets also mandate that a device must obtain a new
          spectrum-\n   availability schedule if the device moves beyond a threshold
          distance\n   (established by the ruleset) from the actual location and all\n
          \  anticipated location(s) it reported in previous AVAIL_SPECTRUM_REQ or\n
          \  AVAIL_SPECTRUM_BATCH_REQ messages (see \"maxLocationChange\" in\n   RulesetInfo
          (Section 5.6)).  If the device is unable to contact the\n   Database to
          obtain a new schedule, it MUST treat this as equivalent\n   to a response
          with no available spectrum.\n   NOTE: The ruleset determines required device
          behavior when spectrum\n   is no longer available.  The ruleset also governs
          whether a device\n   may request and use spectrum at anticipated locations
          beyond the\n   threshold distance from its current location.\n"
        title: 4.5.2.1.  Update Requirements
      title: 4.5.2.  AVAIL_SPECTRUM_RESP
    - contents:
      - "4.5.3.  AVAIL_SPECTRUM_BATCH_REQ\n   The Database MAY implement the batch
        request that allows multiple\n   locations to be specified.  This enables
        a portable Master Device,\n   for example, to get available spectrum for a
        sequence of anticipated\n   locations using a single request.  The Database
        interprets each\n   location in the batch request as if it were an independent
        request\n   and returns results consistent with multiple individual\n   AVAIL_SPECTRUM_REQ
        (Section 4.5.1) messages, but it returns these\n   results in a batched response
        (Section 4.5.4).  The request message\n   for the batch Available Spectrum
        Query protocol MUST include at least\n   one GeoLocation (Section 5.1).  If
        the Database does not implement\n   batch requests, it MUST return an UNIMPLEMENTED
        error (see Table 1).\n   NOTE: Whether anticipated locations are allowed depends
        on the\n   specified ruleset.  A parameter marked as optional may be required
        by\n   some rulesets.\n   +---------------------------------------------------+\n
        \  |AVAIL_SPECTRUM_BATCH_REQ                           |\n   +---------------------------------+-----------------+\n
        \  |deviceDesc:DeviceDescriptor      | see description |\n   |locations:list
        \                  | REQUIRED        |--+\n   |owner:DeviceOwner                |
        OPTIONAL        |  |\n   |antenna:AntennaCharacteristics   | OPTIONAL        |
        \ |\n   |capabilities:DeviceCapabilities  | OPTIONAL        |  |\n   |masterDeviceDesc:DeviceDescriptor|
        OPTIONAL        |  |\n   |masterDeviceLocation:GeoLocation | see description
        |  |\n   |requestType:string               | OPTIONAL        |  |\n   +.................................+.................+
        \ |\n   |*other:any                       | OPTIONAL        |  |\n   +---------------------------------+-----------------+
        \ |\n                                                          |\n                                                     1..*
        V\n                                                 +-------------+\n                                                 |
        GeoLocation |\n                                                 +-------------+\n
        \  Parameters:\n   deviceDesc:  The DeviceDescriptor (Section 5.2) for the
        device\n      requesting available spectrum.  When the request is made by
        a\n      Master Device on its own behalf, the descriptor is that of the\n
        \     Master Device, and it is REQUIRED.  When the request is made on\n      behalf
        of a Slave Device, the descriptor is that of the Slave\n      Device, and
        it is REQUIRED if the \"requestType\" parameter is not\n      specified.  The
        deviceDesc parameter may be OPTIONAL for some\n      values of requestType.\n
        \  locations:  The GeoLocation (Section 5.1) list for the device is\n      REQUIRED.
        \ This allows the device to specify its actual location\n      plus additional
        anticipated locations.  At least one location MUST\n      be included.  This
        specification places no upper limit on the\n      number of locations, but
        the Database MAY restrict the number of\n      locations it supports by returning
        a response with fewer locations\n      than specified in the request.  If
        the locations specify regions,\n      rather than points, the Database MAY
        return an error with the\n      UNIMPLEMENTED code (see Table 1), if it does
        not implement query\n      by region.  When the request is made by a Master
        Device on its own\n      behalf, the locations are those of the Master Device.
        \ When the\n      request is made by the Master Device on behalf of a Slave
        Device,\n      the locations are those of the Slave Device (see also\n      masterDeviceLocation).\n
        \  owner:  The DeviceOwner (Section 5.5) information MAY be included to\n
        \     register the device with the Database.  This enables the device to\n
        \     register and get spectrum-availability information in a single\n      request.
        \ Some rulesets mandate registration for specific device\n      types.\n   antenna:
        \ The AntennaCharacteristics (Section 5.3) is OPTIONAL.\n   capabilities:
        \ The Master Device MAY include its DeviceCapabilities\n      (Section 5.4)
        to limit the available-spectrum response to the\n      spectrum that is compatible
        with its capabilities.  The Database\n      SHOULD NOT return spectrum that
        is not compatible with the\n      specified capabilities.\n   masterDeviceDesc:
        \ When the request is made by the Master Device on\n      behalf of a Slave
        Device, the Master Device MAY provide its own\n      descriptor.\n   masterDeviceLocation:
        \ When the request is made by the Master Device\n      on behalf of a Slave
        Device, the Master Device MUST provide its\n      own GeoLocation (Section
        5.1).\n   requestType:  The request type is an OPTIONAL parameter that may
        be\n      used to modify the request, but its use depends on the applicable\n
        \     ruleset.  The request type may be used, for example, to request\n      generic
        Slave Device parameters without having to specify the\n      device descriptor
        for a specific device.  When the requestType\n      parameter is missing,
        the request is for a specific device (Master\n      or Slave), so deviceDesc
        is REQUIRED.  The maximum length is 64\n      octets.  See the ruleset specifics
        in the Initial Registry\n      Contents (Section 9.1.2) for the Ruleset ID
        Registry.\n   other:  Rulesets and database implementations may require additional\n
        \     request parameters.  The Database MUST ignore all parameters it\n      does
        not understand.  Consult the PAWS Parameters Registry\n      (Section 9.2)
        for possible additional parameters.\n"
      title: 4.5.3.  AVAIL_SPECTRUM_BATCH_REQ
    - contents:
      - "4.5.4.  AVAIL_SPECTRUM_BATCH_RESP\n   The response message for the batch
        Available Spectrum Query contains\n   a schedule of available spectrum for
        the device at multiple\n   locations.\n   +---------------------------------------+\n
        \  |AVAIL_SPECTRUM_BATCH_RESP              |\n   +----------------------------+----------+\n
        \  |timestamp:string            | REQUIRED |\n   |deviceDesc:DeviceDescriptor
        | REQUIRED |\n   |geoSpectrumSpecs:list       | REQUIRED |-------+\n   |............................|..........|
        \      |\n   |databaseChange:DbUpdateSpec | OPTIONAL |       |\n   |*other:any
        \                 | OPTIONAL |       |\n   +----------------------------+----------+
        \      | 0..*\n                                                   V\n                                +---------------------------------+\n
        \                               |GeoSpectrumSpec                  |\n                                +----------------------+----------+\n
        \                               |location:GeoLocation  | REQUIRED |\n                                |spectrumSpecs:list
        \   | REQUIRED |\n                                +----------------------+----------+\n
        \  Parameters:\n   timestamp:  Timestamp of the response of the form,\n      YYYY-MM-DDThh:mm:ssZ,
        as defined by \"Date and Time on the\n      Internet: Timestamps\" [RFC3339].
        \ This can be used by the device\n      as a reference for the start and stop
        times in the spectrum\n      schedules.\n   deviceDesc:  The Database MUST
        include the DeviceDescriptor\n      (Section 5.2) specified in the AVAIL_SPECTRUM_BATCH_REQ
        message.\n   geoSpectrumSpecs:  The geoSpectrumSpecs (Section 5.15) list is\n
        \     REQUIRED (although it MAY be empty if spectrum is unavailable).\n      For
        each location, the Database MAY return one or more\n      SpectrumSpecs (Section
        5.9) to represent available spectrum for\n      one or more rulesets.  The
        Database MAY return available spectrum\n      for fewer locations than requested.
        \ The order of the entries in\n      the list is not significant, and the
        device MUST use the location\n      value in each GeoSpectrumSpec entry to
        match available spectrum to\n      a location.\n   databaseChange:  The Database
        MAY include a DbUpdateSpec\n      (Section 5.7) to notify the device of a
        change to the database\n      URI, providing one or more alternate database
        URIs.  The device\n      needs to update its preconfigured entry for the responding\n
        \     Database with the alternate Databases listed in the DbUpdateSpec.\n
        \  other:  Database implementations MAY return additional parameters in\n
        \     the response.  Consult the PAWS Parameters Registry (Section 9.2)\n
        \     for possible additional parameters and requirements they place on\n
        \     the device.\n   See \"Update Requirements\" (Section 4.5.2.1) for when
        the device must\n   update its available spectrum data.\n"
      title: 4.5.4.  AVAIL_SPECTRUM_BATCH_RESP
    - contents:
      - "4.5.5.  SPECTRUM_USE_NOTIFY\n   The spectrum-use notification message indicates
        the spectrum\n   anticipated to be used by the device.\n   +---------------------------------------------------+\n
        \  |SPECTRUM_USE_NOTIFY                                |\n   +---------------------------------+-----------------+\n
        \  |deviceDesc:DeviceDescriptor      | REQUIRED        |\n   |location:GeoLocation
        \            | see description |\n   |masterDeviceDesc:DeviceDescriptor| OPTIONAL
        \       |\n   |masterDeviceLocation:GeoLocation | see description |\n   |spectra:list
        \                    | REQUIRED        |--+\n   |...................................................|
        \ |\n   |*other:any                       | OPTIONAL        |  |\n   +---------------------------------+-----------------+
        \ | 0..*\n                                                          V\n                                 +--------------------------------+\n
        \                                |Spectrum                        |\n                                 +---------------------+----------+\n
        \                                |resolutionBwHz:float | REQUIRED |\n                                 |profiles:list
        \       | REQUIRED |\n                                 +---------------------+----------+\n
        \  Parameters:\n   deviceDesc:  The DeviceDescriptor (Section 5.2) for the
        device is\n      REQUIRED.\n   location:  The GeoLocation (Section 5.1) for
        the device.  When the\n      notification is made by a Master Device on its
        own behalf, the\n      location is that of the Master Device and is REQUIRED.
        \ When the\n      notification is made by a Master Device on behalf of a Slave\n
        \     Device, the location is that of the Slave Device and is OPTIONAL\n      but
        may be required by some rulesets.\n   spectra:  The Spectrum (Section 5.11)
        list is REQUIRED and specifies\n      the spectrum anticipated to be used
        by the device; this includes\n      profiles of frequencies and power levels.
        \ The list MAY be empty,\n      if the device decides not to use any spectrum.
        \ For consistency,\n      the resolution bandwidth value, \"resolutionBwHz\",
        MUST match that\n      from one of the Spectrum (Section 5.11) elements in
        the\n      corresponding AVAIL_SPECTRUM_RESP message, and the maximum power\n
        \     levels in the Spectrum element MUST be expressed as power (EIRP)\n      over
        the specified \"resolutionBwHz\" value.  The actual bandwidth\n      to be
        used (as computed from the start and stop frequencies) MAY\n      be different
        from the \"resolutionBwHz\" value.  As an example, when\n      the ruleset
        expresses maximum power spectral density in terms of\n      maximum power
        over any 100 kHz band, then the \"resolutionBwHz\"\n      value should be
        set to 100 kHz, even though the actual bandwidth\n      used can be 20 kHz.\n
        \  masterDeviceDesc:  When the notification is made by the Master Device\n
        \     on behalf of a Slave Device, the Master Device MAY provide its own\n
        \     descriptor.\n   masterDeviceLocation:  When the notification is made
        by the Master\n      Device on behalf of a Slave Device, the Master Device
        MUST include\n      its own GeoLocation (Section 5.1).\n   other:  Depending
        on the ruleset, other parameters may be required.\n      To simplify its logic,
        the device MAY include the union of all\n      parameters required by all
        supported rulesets.  The Database MUST\n      ignore all parameters it does
        not understand.\n"
      title: 4.5.5.  SPECTRUM_USE_NOTIFY
    - contents:
      - "4.5.6.  SPECTRUM_USE_RESP\n   The spectrum-use response message simply acknowledges
        receipt of the\n   notification.\n   +---------------------------------------+\n
        \  |SPECTRUM_USE_RESP                      |\n   +----------------------------+----------+\n
        \  |databaseChange:DbUpdateSpec | OPTIONAL |\n   |.......................................|\n
        \  |*other:any                  | OPTIONAL |\n   +----------------------------+----------+\n
        \  Parameters:\n   databaseChange:  The Database MAY include a DbUpdateSpec\n
        \     (Section 5.7) to notify the device of a change to the database\n      URI,
        providing one or more alternate database URIs.  The device\n      needs to
        update its preconfigured entry for the responding\n      Database with the
        alternate Databases listed in the DbUpdateSpec.\n   other:  Database implementations
        MAY return additional parameters in\n      the response.  Consult the PAWS
        Parameters Registry (Section 9.2)\n      for possible additional parameters.\n"
      title: 4.5.6.  SPECTRUM_USE_RESP
    title: 4.5.  Available Spectrum Query
  - contents:
    - "4.6.  Device Validation\n   A Slave Device needs a Master Device to ask the
      Database on its\n   behalf for available spectrum.  Depending on the ruleset,
      the Master\n   Device also must validate with the Database that the Slave Device
      is\n   permitted to operate.  When the ruleset allows a Master Device to\n   \"cache\"
      the available spectrum for a period of time, the Master\n   Device may use the
      simpler Device Validation component, instead of\n   the full Available Spectrum
      Query component, to validate a Slave\n   Device.\n   When validating one or
      more Slave Devices, the Master Device sends\n   the Database a request that
      includes the device identifier -- and any\n   other parameters required by the
      ruleset -- for each Slave Device.\n   The Database MUST return a response with
      an entry for each device to\n   indicate whether it is permitted to use the
      spectrum.\n   A typical sequence for using the Device Validation request is\n
      \  illustrated in Figure 5, where the Master Device already has a valid\n   set
      of available spectrum for Slave Devices.  Note that the\n   communication and
      protocol between the Slave Device and Master Device\n   are outside the scope
      of this document.\n   o  DEV_VALID_REQ (Section 4.6.1) is the device-validation
      request\n      message.\n   o  DEV_VALID_RESP (Section 4.6.2) is the device-validation
      response\n      message.\n      +------------+     +---------------+      +-------------------+\n
      \     |Slave Device|     | Master Device |      | Spectrum Database |\n      +------------+
      \    +---------------+      +-------------------+\n          |                 |
      \                          |\n          | AVAIL_SPEC_REQ  |                           |\n
      \         |................>|                           |\n          |                 |
      \                          |\n          |                 |    DEV_VALID_REQ
      \         |\n          |                 |-------------------------->|\n          |
      \                |                           |\n          |                 |
      \   DEV_VALID_RESP         |\n          |                 |<--------------------------|\n
      \         | AVAIL_SPEC_RESP |                           |\n          |<................|
      \                          |\n          |                 |                           |\n
      \         | (SPECTRUM_USE)  |                           |\n          |................>|
      \  (SPECTRUM_USE_NOTIFY)   |\n          |                 |-------------------------->|\n
      \         |                 |                           |\n          |                 |
      \   (SPECTRUM_USE_RESP)    |\n          |                 |<--------------------------|\n
      \                                Figure 5\n"
    - contents:
      - "4.6.1.  DEV_VALID_REQ\n   This request is used by a Master Device to determine
        which Slave\n   Devices are permitted to operate.\n   +---------------------------------------------+\n
        \  |DEV_VALID_REQ                                |\n   +----------------------------------+----------+\n
        \  |deviceDescs:list                  | REQUIRED |---+\n   |masterDeviceDesc:DeviceDescriptor
        | OPTIONAL |   |\n   +----------------------------------+----------+   |\n
        \                                                    V 1..*\n                                    +----------------------+\n
        \                                   |DeviceDescriptor      |\n                                    +----------------------+\n
        \  Parameters:\n   deviceDescs:  A DeviceDescriptor (Section 5.2) list is
        REQUIRED; it\n      specifies the list of Slave Devices that are to be validated.\n
        \  masterDeviceDesc:  The Master Device MAY provide its own descriptor.\n"
      title: 4.6.1.  DEV_VALID_REQ
    - contents:
      - "4.6.2.  DEV_VALID_RESP\n   +---------------------------------------+\n   |DEV_VALID_RESP
        \                        |\n   +----------------------------+----------+\n
        \  |deviceValidities:list       | REQUIRED |----\n   |databaseChange:DbUpdateSpec
        | OPTIONAL |   |\n   +----------------------------+----------+   |\n                                               V
        1..*\n                            +---------------------------------------+\n
        \                           |DeviceValidity                         |\n                            +----------------------------+----------+\n
        \                           |deviceDesc:DeviceDescriptor | REQUIRED |\n                            |isValid:boolean
        \            | REQUIRED |\n                            |reason:string               |
        OPTIONAL |\n                            +----------------------------+----------+\n
        \  Parameters:\n   deviceValidities:  A DeviceValidities (Section 5.16) list
        is REQUIRED\n      to report the list of Slave Devices and whether each listed
        device\n      is valid.  The number of entries MUST match the number of\n
        \     DeviceDescriptors (Section 5.2) listed in the DEV_VALID_REQ\n      message.\n
        \  databaseChange:  The Database MAY include a DbUpdateSpec\n      (Section
        5.7) to notify the device of a change to the database\n      URI, providing
        one or more alternate database URIs.  The device\n      needs to update its
        preconfigured entry for the responding\n      Database with the alternate
        Databases listed in the DbUpdateSpec.\n"
      title: 4.6.2.  DEV_VALID_RESP
    title: 4.6.  Device Validation
  title: 4.  Protocol Functionalities
- contents:
  - "5.  Protocol Parameters\n   This section presents more details of the parameters
    that make up the\n   PAWS request and response messages.  It also includes a subsection\n
    \  that defines response codes.\n"
  - contents:
    - "5.1.  GeoLocation\n   GeoLocation is used to specify one of the following:\n
      \  o  a single point with optional uncertainty\n   o  a region described by
      a polygon\n   These are represented using geometric shapes defined in Section
      5 of\n   \"GEOPRIV Presence Information Data Format Location Object\" [RFC5491],\n
      \  where:\n   o  A \"point\" with uncertainty is represented using the Ellipse
      shape.\n   o  A region is represented using the Polygon shape.\n   The coordinates
      are expressed using the WGS84 datum [WGS-84], and\n   units are degrees or meters.
      \ GeoLocation MAY also include a\n   confidence level, expressed as a percentage.
      \ The confidence and\n   uncertainty parameters may be required by some rulesets
      (see also\n   [RFC7459]).\n   The data model for GeoLocation is illustrated
      below:\n   +------------------------------------+\n   |GeoLocation                         |\n
      \  +------------------+-----------------+\n   |point:Ellipse     | see description
      |\n   |region:Polygon    | see description |\n   |confidence:int    | OPTIONAL
      \       |\n   +------------------+-----------------+\n   Note: Point and region
      are mutually exclusive.  Exactly one must\n   be present.\n   +-------------------------------+\n
      \  |Ellipse                        |\n   +--------------------+----------+\n
      \  |center:Point        | REQUIRED |--+\n   |semiMajorAxis:float | OPTIONAL
      |  |\n   |semiMinorAxis:float | OPTIONAL |  |\n   |orientation:float   | OPTIONAL
      |  |\n   +--------------------+----------+  v\n                              +---------------------------+\n
      \                             |Point                      |\n                              +----------------+----------+\n
      \                             |latitude:float  | REQUIRED |\n                              |longitude:float
      | REQUIRED |\n                              +----------------+----------+\n
      \  +-------------------------------+\n   |Polygon                        |\n
      \  +-------------------+-----------+  4..* +---------------------------+\n   |exterior:list
      \     | REQUIRED  |------>|Point                      |\n   +-------------------+-----------+
      \      +----------------+----------+\n                                           |latitude:float
      \ | REQUIRED |\n                                           |longitude:float
      | REQUIRED |\n                                           +----------------+----------+\n
      \  Parameters:\n   point:  If present, it specifies the GeoLocation as a point.\n
      \     Paradoxically, a \"point\" is parameterized using an Ellipse, where\n
      \     the center represents the location of the point and the distances\n      along
      the major and minor axes represent the uncertainty.  The\n      uncertainty
      values may be required, depending on the ruleset.\n      Exactly one of \"point\"
      or \"region\" MUST be present.\n   region:  If present, it specifies the GeoLocation
      as a region.\n      Exactly one of \"point\" or \"region\" MUST be present.\n
      \  center:  The center refers to the location of a GeoLocation point and\n      is
      represented as the center of an ellipse.\n   latitude, longitude:  Floating-point
      numbers that express the\n      latitude and longitude in degrees using the
      WGS84 datum [WGS-84].\n   semiMajorAxis, semiMinorAxis:  This OPTIONAL parameter
      expresses the\n      location uncertainty, in meters.  It is parameterized using\n
      \     distances along the major and minor axes of the ellipse.  The\n      default
      value for each parameter is 0.\n   orientation:  This defines the orientation
      of the ellipse, expressed\n      as the rotation, in degrees, of the semi-major
      axis from North\n      towards the East.  For example, when the uncertainty
      is greatest\n      along the North-South direction, orientation is 0 degrees;\n
      \     conversely, if the uncertainty is greatest along the East-West\n      direction,
      orientation is 90 degrees.  When orientation is not\n      present, the default
      value is 0.\n   exterior:  When GeoLocation describes a region, the \"exterior\"\n
      \     parameter refers to a list of latitude and longitude points that\n      represents
      the vertices of a polygon.  The first and last points\n      MUST be the same.
      \ Thus, a minimum of 4 points is required.  The\n      following polygon restrictions
      from [RFC5491] apply:\n      *  A connecting line SHALL NOT cross another connecting
      line of\n         the same polygon.\n      *  The vertices MUST be defined in
      a counter-clockwise direction,\n         looking at them from above.\n      *
      \ The edges of a polygon are defined by the shortest path between\n         two
      points in space (not a geodesic curve).  Consequently, the\n         length
      between two adjacent vertices SHOULD be restricted to a\n         maximum of
      130 km.\n      *  Polygon shapes SHOULD be restricted to a maximum of 15 vertices\n
      \        (16 points that includes the repeated vertex).\n      Additionally,
      all vertices are assumed to be at the same altitude.\n   confidence:  The location
      confidence level, as a percentage, MAY be\n      provided.  When this parameter
      is not provided, the default value\n      is 95.  Valid values range from 0
      to 100, but, in practice, 100%\n      confidence is not achievable.  The confidence
      value is meaningful\n      only when GeoLocation refers to a point with uncertainty.\n"
    title: 5.1.  GeoLocation
  - contents:
    - "5.2.  DeviceDescriptor\n   The device descriptor contains parameters that identify
      the specific\n   device, such as its manufacturer serial number, manufacturer's
      ID,\n   and any other device characteristics required by ruleset.\n   +--------------------------------+\n
      \  |DeviceDescriptor                |\n   +---------------------+----------+\n
      \  |serialNumber:string  | OPTIONAL |\n   |manufacturerId:string| OPTIONAL |\n
      \  |modelId:string       | OPTIONAL |  1..*\n   |rulesetIds:list      | OPTIONAL
      |------>string\n   |.....................|..........|\n   |*other:any           |
      OPTIONAL |\n   +---------------------+----------+\n   Parameters:\n   serialNumber:
      \ The manufacturer's device serial number is OPTIONAL,\n      although rulesets
      typically require it.  Its maximum length is 64\n      octets.\n   manufacturerId:
      \ The manufacturer's ID is OPTIONAL but may be\n      required by some rulesets.
      \ This represents the name of the device\n      manufacturer, and therefore
      ought to be consistent across all\n      devices from the same manufacturer
      and distinct from that of other\n      manufacturers.  Its maximum length is
      64 octets.\n   modelId:  The device's model ID is OPTIONAL but may be required
      by\n      some rulesets.  Its maximum length is 64 octets.\n   rulesetIds:  The
      list of identifiers for rulesets supported by the\n      device (see Ruleset
      ID Registry (Section 9.1)).  A Database MAY\n      require that the device provides
      this list before servicing the\n      device requests.  If the Database supports
      none of the rulesets\n      specified in the list, the Database MAY refuse to
      service the\n      device requests.  See RulesetInfo (Section 5.6) for discussion
      on\n      ruleset identifiers.  If present, the list MUST contain at least\n
      \     one entry.\n   other:  Depending on the ruleset, other parameters may
      be required.\n      The Database MUST ignore all parameters in the message it
      does not\n      understand.  See PAWS Parameters Registry (Section 9.2) for\n
      \     additional valid parameters and for the process for extending the\n      message
      with more parameters.  Additionally, see PAWS Ruleset ID\n      Registry (Section
      9.1) for the valid set of parameters for each\n      ruleset.\n"
    title: 5.2.  DeviceDescriptor
  - contents:
    - "5.3.  AntennaCharacteristics\n   Antenna characteristics provide additional
      information, such as the\n   antenna height, antenna type, etc.  Whether antenna
      characteristics\n   must be provided in a request depends on the device type
      and ruleset.\n   Additionally, a parameter marked as optional may be required
      by some\n   rulesets.\n   +------------------------------------+\n   |AntennaCharacteristics
      \             |\n   +-------------------------+----------+\n   |height:float
      \            | OPTIONAL |\n   |heightType:enum          | OPTIONAL |\n   |heightUncertainty:float
      \ | OPTIONAL |\n   |.........................|..........|\n   |*characteristics:
      \       | OPTIONAL |\n   |   various               |          |\n   +-------------------------+----------+\n
      \  Parameters:\n   height:  The antenna height in meters.  Note that the height
      may be\n      negative.\n   heightType:  Valid values are:\n      AGL   - Above
      Ground Level (default)\n      AMSL  - Above Mean Sea Level\n   heightUncertainty:
      \ The height uncertainty in meters.\n   NOTE: Depending on the ruleset, additional
      antenna characteristics\n   may be required, such as:\n   o  antenna direction\n
      \  o  antenna radiation pattern\n   o  antenna gain\n   o  antenna polarization\n
      \  These are not defined by the base protocol but may be added to the\n   PAWS
      Parameters Registry, as needed.\n"
    title: 5.3.  AntennaCharacteristics
  - contents:
    - "5.4.  DeviceCapabilities\n   Device capabilities provide additional information
      that may be used\n   by the device to provide additional information to the
      Database that\n   can help it to determine available spectrum.  If the Database
      does\n   not support device capabilities, it MUST ignore the parameter\n   altogether.\n
      \  +-------------------------------+\n   |DeviceCapabilities             |\n
      \  +---------------------+---------+\n   |frequencyRanges:list |OPTIONAL |--+\n
      \  |.....................|.........|  |\n   |*other:any           |OPTIONAL
      |  |\n   +---------------------+---------+  | 0..*\n                                      V\n
      \               +--------------------------------+\n                |FrequencyRange
      \                 |\n                +----------------------+---------+\n                |startHz:float
      \        |REQUIRED |\n                |stopHz:float          |REQUIRED |\n                +----------------------+---------+\n
      \  Parameters:\n   frequencyRanges:  Optional FrequencyRange (Section 5.13)
      list.  Each\n      FrequencyRange element contains start and stop frequencies
      in\n      which the device can operate.  When specified, the Database SHOULD\n
      \     NOT return available spectrum that falls outside these ranges.\n   other
      \ Consult the PAWS Parameters Registry (Section 9.2) for\n      possible additional
      parameters.  The Database MUST ignore all\n      parameters it does not understand.\n"
    title: 5.4.  DeviceCapabilities
  - contents:
    - "5.5.  DeviceOwner\n   DeviceOwner contains information on device ownership
      that is provided\n   as part of device registration.  Some rulesets may require
      additional\n   parameters.\n   +-----------------------------+\n   |DeviceOwner
      \                 |\n   +------------------+----------+\n   |owner:vcard       |
      REQUIRED |\n   |operator:vcard    | OPTIONAL |\n   +------------------+----------+\n
      \  Parameters:\n   owner:  The vCard contact information for the individual
      or business\n      that owns the device is REQUIRED.\n   operator:  The vCard
      contact information for the device operator is\n      OPTIONAL but may be required
      by specific rulesets.\n   See PAWS Ruleset ID Registry (Section 9.1) for ruleset-specific\n
      \  requirements on mandatory vCard properties.  Depending on the\n   ruleset,
      the Database may be required to validate the device-owner\n   information.  In
      these cases, the Database MUST respond with an\n   INVALID_VALUE error (see
      \"Error Codes\" (Section 5.17)) if validation\n   fails.\n   All contact information
      MUST be expressed using the structure defined\n   by the \"vCard Format Specification\"
      [RFC6350], encoded in JSON\n   [RFC7095].  Note that the vCard specification
      defines maximum lengths\n   for each parameter.\n"
    title: 5.5.  DeviceOwner
  - contents:
    - "5.6.  RulesetInfo\n   RulesetInfo contains parameters for the ruleset of a
      regulatory\n   domain that is communicated using the Initialization (Section
      4.3),\n   Device Registration (Section 4.4), and Available Spectrum Query\n
      \  (Section 4.5) components.\n   +------------------------------------------+\n
      \  |RulesetInfo                               |\n   +------------------------------------------+\n
      \  |authority:string        | REQUIRED        |\n   |rulesetId:string        |
      REQUIRED        |\n   |maxLocationChange:float | see description |\n   |maxPollingSecs:int
      \     | see description |\n   |..........................................|\n
      \  |*other:any              | OPTIONAL        |\n   +------------------------+-----------------+\n
      \  Parameters:\n   authority:  A string that indicates the regulatory domain
      to which\n      the ruleset applies is REQUIRED.  It will normally be a 2-letter\n
      \     country code defined by Country Codes - ISO 3166 [ISO3166-1].\n   rulesetId:
      \ The ID of a ruleset for the specified authority (see\n      Ruleset ID Registry
      (Section 9.1)).  The device can use this to\n      determine additional device
      behavior required by the associated\n      ruleset.  To define new ruleset IDs,
      see \"Defining Ruleset\n      Identifiers\" (Section 8.1).\n   maxLocationChange:
      \ The maximum location change in meters is REQUIRED\n      for the Initialization
      Response (Section 4.3.2), but OPTIONAL\n      otherwise.  Some regulatory domains
      mandate that, when the device\n      changes location by more than this specified
      distance, it contact\n      the Database to get the available spectrum for the
      new location.\n      If this value is provided by the Database within the context
      of an\n      Available Spectrum Response (Section 4.5.2), it takes precedence\n
      \     over the value within the Initialization Response (Section 4.3.2).\n   maxPollingSecs:
      \ The maximum duration, in seconds, between requests\n      for available spectrum
      is REQUIRED for the Initialization Response\n      (Section 4.3.2), but OPTIONAL
      otherwise.  The device MUST contact\n      the Database to get available spectrum
      no less frequently than\n      this duration.  If this value is provided within
      the context of an\n      Available Spectrum Response (Section 4.5.2), it takes
      precedence\n      over the value within the Initialization Response (Section
      4.3.2).\n   other:  Depending on the ruleset, other parameters may be required.\n
      \     The device MUST ignore all parameters in the message it does not\n      understand.
      \ Consult the PAWS Parameters Registry (Section 9.2)\n      for possible additional
      parameters.\n"
    title: 5.6.  RulesetInfo
  - contents:
    - "5.7.  DbUpdateSpec\n   This element is provided by the Database to notify devices
      of an\n   upcoming change to the database URI.\n   +-------------------------------+\n
      \  |DbUpdateSpec                   |\n   +---------------------+---------+       +--------------------------+\n
      \  |databases:list       |REQUIRED |------>|DatabaseSpec              |\n   +---------------------+---------+
      \ 1..* +---------------+----------+\n                                           |name:string
      \   | REQUIRED |\n                                           |uri:string     |
      REQUIRED |\n                                           +---------------+----------+\n
      \  Parameters:\n   databases:  List of one or more DatabaseSpec (Section 5.8)
      entries.\n      A device needs to update its preconfigured entry for the\n      responding
      Database with the alternate Databases listed in the\n      DbUpdateSpec.\n"
    title: 5.7.  DbUpdateSpec
  - contents:
    - "5.8.  DatabaseSpec\n   This element contains the name and URI of a Database.\n
      \  +--------------------------+\n   |DatabaseSpec              |\n   +---------------+----------+\n
      \  |name:string    | REQUIRED |\n   |uri:string     | REQUIRED |\n   +---------------+----------+\n
      \  Parameters:\n   name:  The display name.  Its maximum length is 64 octets.\n
      \  uri:  The corresponding URI of the Database.  Its maximum length is\n      1024
      octets.\n"
    title: 5.8.  DatabaseSpec
  - contents:
    - "5.9.  SpectrumSpec\n   The SpectrumSpec element encapsulates the schedule of
      available\n   spectrum for a ruleset.\n   +---------------------------------------+\n
      \  |SpectrumSpec                           |\n   +----------------------------+----------+\n
      \  |rulesetInfo:RulesetInfo     | REQUIRED |\n   |spectrumSchedules:list      |
      REQUIRED |-----+\n   |timeRange:EventTime         | OPTIONAL |     |\n   |frequencyRanges:list
      \       | OPTIONAL |     |\n   |needsSpectrumReport:boolean | OPTIONAL |     |\n
      \  |maxTotalBwHz:float          | OPTIONAL |     |\n   |maxContiguousBwHz:float
      \    | OPTIONAL |     |\n   +----------------------------+----------+     |\n
      \                                                | 1..*\n                                                 V\n
      \                                     +-------------------------------+\n                                      |SpectrumSchedule
      \              |\n                                      +--------------------+----------+\n
      \                                     |eventTime:EventTime | REQUIRED |\n                                      |spectra:list
      \       | REQUIRED |\n                                      +--------------------+----------+\n
      \  Parameters:\n   rulesetInfo:  RulesetInfo (Section 5.6) is REQUIRED to identify
      the\n      regulatory domain and ruleset to which the spectrum schedule\n      applies
      (see Ruleset ID Registry (Section 9.1)).  The device needs\n      to use the
      corresponding ruleset to interpret the response.\n      Values provided within
      rulesetInfo, such as maxLocationChange,\n      take precedence over the values
      provided by the Initialization\n      Procedure (Section 4.3).\n   spectrumSchedules:
      \ The SpectrumSchedule (Section 5.10) list is\n      REQUIRED.  At least one
      schedule MUST be included.  More than one\n      schedule MAY be included to
      represent future changes to the\n      available spectrum.  How far in advance
      a schedule may be provided\n      depends on the ruleset.  If more than one
      schedule is included,\n      the eventTime intervals MUST be disjoint and MUST
      be sorted in\n      increasing time.  A gap in the time schedule indicates no\n
      \     available spectrum during that time-interval gap.\n   timeRange:  The
      time range for which the specification is\n      comprehensive is OPTIONAL.
      \ When specified, any gaps in time\n      intervals within the spectrumSchedules
      element that overlap with\n      the range specified by \"timeRange\" are interpreted
      by the device\n      as time intervals in which there is no available spectrum.\n
      \  frequencyRanges:  Specifying the frequency ranges for which the\n      specification
      is comprehensive is OPTIONAL.  It is a list of\n      disjoint FrequencyRange
      (Section 5.13) entries.  When specified,\n      it typically corresponds to
      the frequency ranges governed by the\n      ruleset, e.g., for TV white space,
      the frequency ranges can\n      correspond to the VHF and UHF bands of the associated
      regulatory\n      domain.  A device can combine this information with the available-\n
      \     spectrum specification within the spectrumSchedules element to\n      distinguish
      between \"unavailable spectrum\" and \"spectrum for which\n      no information
      has been provided\".\n   needsSpectrumReport:  The Database MAY return true
      for this parameter\n      if spectrumSchedules list is non-empty; otherwise,
      the Database\n      MAY omit this parameter altogether, in which case, the default\n
      \     value is false.  If this parameter is present and its value is\n      true,
      the device sends a SPECTRUM_USE_NOTIFY (Section 4.5.5)\n      message to the
      Database; otherwise, the device SHOULD NOT send the\n      SPECTRUM_USE_NOTIFY
      message.  Some rulesets mandate this value be\n      set to true.\n   maxTotalBwHz:
      \ The Database MAY return a constraint on the maximum\n      total bandwidth
      (in hertz) allowed, which may or may not be\n      contiguous.  Some rulesets
      mandate the Database to return this\n      parameter.  When present in the response,
      the device needs to\n      apply this constraint to its spectrum-selection logic
      to ensure\n      total bandwidth does not exceed this value.\n   maxContiguousBwHz:
      \ The Database MAY return a constraint on the\n      maximum contiguous bandwidth
      (in hertz) allowed.  Some rulesets\n      mandate the Database to return this
      parameter.  When present in\n      the response, the device needs to apply this
      constraint to its\n      spectrum-selection logic to ensure no single block
      of spectrum has\n      bandwidth that exceeds this value.\n"
    title: 5.9.  SpectrumSpec
  - contents:
    - "5.10.  SpectrumSchedule\n   The SpectrumSchedule element combines EventTime
      (Section 5.14) with\n   Spectrum (Section 5.11) to define a time period in which
      the spectrum\n   is valid.\n   +-------------------------------+\n   |SpectrumSchedule
      \              |\n   +--------------------+----------+\n   |eventTime:EventTime
      | REQUIRED |        +--------------------+\n   |spectra:list        | REQUIRED
      |------->|Spectrum            |\n   +--------------------+----------+   0..*
      +--------------------+\n                                            |resolutionBwHz:float|\n
      \                                           |profiles:list       |\n                                            +--------------------+\n
      \  Parameters:\n   eventTime:  The EventTime (Section 5.14) is REQUIRED to express\n
      \     \"when\" this specification is valid.\n   spectra:  The Spectrum (Section
      5.11) list is REQUIRED to specify the\n      available spectrum and permissible
      power levels, one per\n      resolutionBwHz.  The list MAY be empty when there
      is no available\n      spectrum.\n"
    title: 5.10.  SpectrumSchedule
  - contents:
    - "5.11.  Spectrum\n   Available spectrum can be characterized by an ordered list
      of\n   spectrum profiles that defines permissible power levels over a set of\n
      \  frequency ranges.  Each Spectrum element defines permissible power\n   levels
      as maximum power spectral densities over a specified\n   resolution bandwidth,
      \"resolutionBwHz\".  Note that the spectrum\n   profiles represent the \"availability
      mask\", as defined by the\n   governing ruleset; they are not intended to encode
      device-level\n   transmission-mask requirements.\n   NOTE: Within the contexts
      of the AVAIL_SPECTRUM_RESP (Section 4.5.2),\n   AVAIL_SPECTRUM_BATCH_RESP (Section
      4.5.4), and SPECTRUM_USE_NOTIFY\n   (Section 4.5.5) messages, the power levels
      expressed within the\n   Spectrum messages refer to EIRP.  Future extensions
      of PAWS may use\n   Spectrum in other contexts for other definitions of power
      levels.\n   o  To support a ruleset that defines different \"wide-band\" and\n
      \     \"narrow-band\" power levels, PAWS allows multiple Spectrum elements\n
      \     to be included in the available-spectrum response, each with a\n      different
      resolution bandwidth.\n   o  When multiple Spectrum elements are included in
      the response, each\n      represents a constraint that the device must satisfy
      (logical\n      AND).\n   o  Each Spectrum element covers the range of frequencies
      governed by\n      a ruleset, rather than splitting the frequencies across multiple\n
      \     Spectrum elements for the same resolution bandwidth.\n   o  Each spectrum
      profile represents the maximum permissible power\n      spectral density over
      a contiguous range of frequencies.\n   o  When multiple spectrum profiles are
      included, they MUST be\n      disjoint and MUST be ordered in non-decreasing
      frequency value.\n   o  Gaps in frequencies between consecutive spectrum profiles\n
      \     represent unavailability for those frequencies.\n   The following figure
      illustrates the Spectrum element and the\n   SpectrumProfile list.\n   +-------------------------------+\n
      \  |Spectrum                       |\n   +---------------------+---------+\n
      \  |resolutionBwHz:float |REQUIRED |\n   |profiles:list        |REQUIRED |---+\n
      \  +---------------------+---------+   |  0..*\n                                       V\n
      \                +-----------------------------+\n                 |SpectrumProfile
      \             |\n                 +-------------------+---------+\n                 |list
      \              |REQUIRED |\n                 +-------------------+---------+\n
      \                                      |\n                                       V
      2..*\n                  +--------------------------+\n                  |SpectrumProfilePoint
      \     |\n                  +----------------+---------+\n                  |hz:float
      \       |REQUIRED |\n                  |dbm:float       |REQUIRED |\n                  +----------------+---------+\n
      \  Parameters:\n   resolutionBwHz:  This parameter defines the resolution bandwidth
      (in\n      hertz) over which permissible power spectral density is defined.\n
      \     For example, FCC regulation would require one spectrum\n      specification
      at a bandwidth of 6 MHz, and ETSI regulation would\n      require two specifications,
      at 0.1 MHz and 8 MHz.\n   profiles:   A SpectrumProfile (Section 5.12) list
      specifies\n      permissible power levels over a set of frequency ranges.  The
      list\n      MAY be empty if there is no available spectrum.\n   The following
      example shows permitted power spectral densities for a\n   single resolution
      bandwidth of 6 MHz (for illustrative purposes\n   only):\n   [\n     {\n       \"resolutionBwHz\":
      6e6,\n       \"profiles\": [\n         [\n           {\"hz\": 5.18e8, \"dbm\":
      30.0},\n           {\"hz\": 5.30e8, \"dbm\": 30.0}\n         ],\n         ...\n
      \      ]\n     }\n   ]\n   This is interpreted as:\n   o  Over any 6 MHz within
      the frequency range [518 MHz, 530 MHz),\n      maximum permitted power is 30.0
      dBm (1000 mW)\n   Consider now an example with two different sets of permitted
      power\n   spectral densities for the same set of frequencies over different\n
      \  resolution bandwidths (for illustrative purposes only):\n   [\n     {\n       \"resolutionBwHz\":
      6e6,\n       \"profiles\": [\n         [\n           {\"hz\": 5.18e8, \"dbm\":
      30.0},\n           {\"hz\": 5.30e8, \"dbm\": 30.0}\n         ],\n         ...\n
      \      ]\n     },\n     {\n       \"resolutionBwHz\": 1e5,\n       \"profiles\":
      [\n         [\n           {\"hz\": 5.18e8, \"dbm\": 27.0},\n           {\"hz\":
      5.30e8, \"dbm\": 27.0}\n         ],\n         ...\n       ]\n     }\n   ]\n
      \  This is interpreted as:\n   o  Over any 6 MHz within the frequency range
      [518 MHz, 530 MHz),\n      maximum permitted power is 30.0 dBm (1000 mW), and\n
      \  o  Over any 100 kHz within the frequency range [518 MHz, 530 MHz),\n      maximum
      permitted power is 27.0 dBm (500 mW)\n   This would allow, for example, operating
      two 100 kHz sub-channels\n   within the indicated 12 MHz range at 500 mW each,
      totaling 1000 mW.\n   Of course, many combinations are possible, as long as
      they satisfy\n   both conditions.\n   The following example encodes multiple
      (two) spectrum profiles, each\n   having a gap from 530 MHz to 536 MHz (for
      illustrative purposes\n   only):\n   [\n     {\n       \"resolutionBwHz\": 6e6,\n
      \      \"profiles\": [\n         [\n           {\"hz\": 5.18e8, \"dbm\": 30.0},\n
      \          {\"hz\": 5.24e8, \"dbm\": 30.0},\n           {\"hz\": 5.24e8, \"dbm\":
      36.0},\n           {\"hz\": 5.30e8, \"dbm\": 36.0}\n         ],\n         [\n
      \          {\"hz\": 5.36e8, \"dbm\": 30.0},\n           {\"hz\": 5.42e8, \"dbm\":
      30.0}\n         ],\n         ...\n       ]\n     },\n     {\n       \"resolutionBwHz\":
      1e5,\n       \"profiles\": [\n         [\n           {\"hz\": 5.18e8, \"dbm\":
      27.0},\n           {\"hz\": 5.24e8, \"dbm\": 27.0},\n           {\"hz\": 5.24e8,
      \"dbm\": 30.0},\n           {\"hz\": 5.30e8, \"dbm\": 30.0}\n         ],\n         [\n
      \          {\"hz\": 5.36e8, \"dbm\": 27.0},\n           {\"hz\": 5.42e8, \"dbm\":
      27.0}\n         ],\n         ...\n       ]\n     }\n   ]\n"
    title: 5.11.  Spectrum
  - contents:
    - "5.12.  SpectrumProfile\n   A spectrum profile is characterized by an ordered
      list of (frequency,\n   power) points that represents the shape of maximum permissible
      power\n   levels over a range of frequencies as a piecewise linear curve.\n
      \  o  It MUST contain a minimum of two entries.\n   o  The entries in the list
      MUST be ordered in non-decreasing\n      frequency values.\n   o  Two consecutive
      points MAY have the same frequency value to\n      represent a \"step function\".\n
      \  o  Three or more points MUST NOT share the same frequency value.\n   o  The
      first frequency is inclusive; the last frequency is exclusive.\n   NOTE: This
      encoding allows presentation of \"ramps\" where the slope of\n   a line segment
      may be finite and non-zero.\n   The following figure illustrates the SpectrumProfile
      element.\n   +-------------------------------+\n   |SpectrumProfile                |\n
      \  +---------------------+---------+\n   |list                 |REQUIRED |---+\n
      \  +---------------------+---------+   |  2..*\n                                       V\n
      \                +--------------------------+\n                 |SpectrumProfilePoint
      \     |\n                 +----------------+---------+\n                 |hz:float
      \       |REQUIRED |\n                 |dbm:float       |REQUIRED |\n                 +----------------+---------+\n
      \  Parameters of each point in the profile:\n   hz:  The frequency, in hertz,
      at which the power level is defined.\n   dbm:   The power level, expressed as
      dBm per resolution bandwidth, as\n      defined by the resolutionBwHz element
      of the enclosing Spectrum\n      (Section 5.11) element.\n"
    title: 5.12.  SpectrumProfile
  - contents:
    - "5.13.  FrequencyRange\n   FrequencyRange specifies a frequency range.\n   +--------------------------------+\n
      \  |FrequencyRange                  |\n   +----------------------+---------+\n
      \  |startHz:float         |REQUIRED |\n   |stopHz:float          |REQUIRED |\n
      \  +----------------------+---------+\n   Parameters:\n   startHz:  The inclusive
      start of the frequency range (in hertz) is\n      REQUIRED.\n   stopHz:  The
      exclusive end of the frequency range (in hertz) is\n      REQUIRED.\n"
    title: 5.13.  FrequencyRange
  - contents:
    - "5.14.  EventTime\n   The EventTime element specifies the start and stop times
      of an\n   \"event\".  This is used to indicate the time period for which a\n
      \  Spectrum (Section 5.11) is valid.\n   +---------------------------+\n   |EventTime
      \                 |\n   +-----------------+---------+\n   |startTime:string
      |REQUIRED |\n   |stopTime:string  |REQUIRED |\n   +-----------------+---------+\n
      \  Parameters:\n   startTime:  The inclusive start of the event is REQUIRED.\n
      \  stopTime:  The exclusive end of the event is REQUIRED.\n   Both times are
      expressed using the format, YYYY-MM-DDThh:mm:ssZ, as\n   defined by \"Date and
      Time on the Internet: Timestamps\" [RFC3339].\n   The times MUST be expressed
      using UTC.\n   A device that does not have access to the current date and time
      MUST\n   use the timestamp at the top level of the response message as a\n   substitute
      for the current time (see \"Available Spectrum Response\"\n   (Section 4.5.2)
      and \"Available Spectrum Batch Response\"\n   (Section 4.5.4)).  For example,\n
      \  o  (startTime - timestamp) gives the duration that a device must wait\n      before
      the event becomes \"active\".  If the value is zero or\n      negative, the
      event is already active.\n   o  If the event is already active, (stopTime -
      timestamp) is the\n      duration that the event remains active.  If the value
      is zero or\n      negative, the event is no longer active and MUST be ignored.\n"
    title: 5.14.  EventTime
  - contents:
    - "5.15.  GeoSpectrumSpec\n   The GeoSpectrumSpec element encapsulates the available
      spectrum for a\n   location.  It is returned within an AVAIL_SPECTRUM_BATCH_RESP\n
      \  (Section 4.5.4) batch response that contains multiple GeoSpectrumSpec\n   entries,
      each matching a location provided in the batch request.\n   +----------------------------------+\n
      \  |GeoSpectrumSpec                   |\n   +-----------------------+----------+\n
      \  |location:GeoLocation   | REQUIRED |\n   |spectrumSpecs:list     | REQUIRED
      |-------+\n   +-----------------------+----------+       |\n                                              |
      1..*\n                                              V\n                                      +--------------+\n
      \                                     | SpectrumSpec |\n                                      +--------------+\n
      \  Parameters:\n   location:  The GeoLocation (Section 5.1) identifies the location
      at\n      which the spectrum schedule applies.\n   spectrumSpecs:  The SpectrumSpec
      (Section 5.9) list is REQUIRED.  At\n      least one entry MUST be included.
      \ Each entry represents schedules\n      of available spectrum for a ruleset.
      \ More than one entry MAY be\n      included to support multiple rulesets at
      a location.\n"
    title: 5.15.  GeoSpectrumSpec
  - contents:
    - "5.16.  DeviceValidity\n   The DeviceValidity element is used to indicate whether
      a device is\n   valid.  See Section 4.6.2.\n   +---------------------------------------+\n
      \  |DeviceValidity                         |\n   +----------------------------+----------+\n
      \  |deviceDesc:DeviceDescriptor | REQUIRED |\n   |isValid:boolean             |
      REQUIRED |\n   |reason:string               | OPTIONAL |\n   +----------------------------+----------+\n
      \  Parameters:\n   deviceDesc:  The DeviceDescriptor (Section 5.2) that was
      used to\n      check for validity is REQUIRED.\n   isValid:  This is a REQUIRED
      boolean value that indicates whether the\n      device is valid.\n   reason:
      \ If the device identifier is not valid, the Database MAY\n      include a reason.
      \ The reason MAY be in any language.  Its maximum\n      length is 128 octets.\n"
    title: 5.16.  DeviceValidity
  - contents:
    - "5.17.  Error Element\n   If the Database responds to a PAWS request message
      with an error, it\n   MUST include an Error element.\n   +----------------------------------+\n
      \  |Error                             |\n   +----------------+-----------------+\n
      \  |code:int        | REQUIRED        |\n   |message:string  | OPTIONAL        |\n
      \  |data:any        | see description |\n   +----------------+-----------------+\n
      \  Parameters:\n   code:  An integer code that indicates the error type is REQUIRED.\n
      \     Values MUST be within the range -32768 to 32767, inclusive.\n   message:
      \ A description of the error is OPTIONAL.  It MAY be in any\n      language.
      \ Its maximum length is 128 octets.\n   data:  The Database MAY include additional
      data.  For some errors,\n      additional data may be required (see Table 1).
      \ The device MUST\n      ignore any data parameters it does not understand.\n
      \  The following table lists predefined and reserved error codes.  They\n   are
      loosely grouped into the following categories:\n   -100s:  Indicates compatibility
      issues, e.g., version mismatch,\n      unsupported or unimplemented features.\n
      \  -200s:  Indicates that the device request contains an error that\n      needs
      to be modified before making another request.\n   -300s:  Indicates authorization-related
      issues.\n   Values that are not defined explicitly in the Error Codes\n   Table
      (Table 1) below are unassigned.  To define new error codes, see\n   PAWS Error
      Code Registry (Section 9.3).\n   Code   Name             Description and Additional
      Parameters\n   ------ ---------------- ---------------------------------------------\n
      \  0      (reserved)\n   -100   (reserved)\n   -101   VERSION          The Database
      does not support the specified\n                           version of the message.
      \ This error does not\n                           use any additional data.\n
      \  -102   UNSUPPORTED      The Database does not support the device.\n                           For
      example, it supports none of the rulesets\n                           specified
      in the request or does not support\n                           the device, based
      on its device type, model,\n                           etc.  This error does
      not use any additional\n                           data.\n   -103   UNIMPLEMENTED
      \   The Database does not implement the optional\n                           request
      or optional feature.  This error does\n                           not use any
      additional data.\n   -104   OUTSIDE_COVERAGE The specified geolocation is outside
      the\n                           coverage area of the Database.  The Database\n
      \                          MAY include a DbUpdateSpec (Section 5.7) to\n                           provide
      a list of alternate Databases that\n                           might be appropriate
      for the requested\n                           location.  See OUTSIDE_COVERAGE
      Error\n                           (Section 5.17.1) for more details.\n   -105
      \  DATABASE_CHANGE  The Database has changed its URI.  The\n                           Database
      MAY include a DbUpdateSpec (Section\n                           5.7) in the
      error response to provide devices\n                           with one or more
      alternate database URIs.\n                           The device needs to update
      its preconfigured\n                           entry for the responding Database
      with the\n                           alternate Databases listed in the\n                           DbUpdateSpec.
      \ See DATABASE_CHANGE Error\n                           (Section 5.17.2) for
      more details.\n   -200   (reserved)\n   -201   MISSING          A required parameter
      is missing.  The\n                           Database MUST include a list of
      the required\n                           parameter names.  The Database MAY
      include\n                           only names of parameters that are missing,\n
      \                          but MAY include a full list. Including the\n                           full
      list of missing parameters may reduce\n                           the number
      of re-queries from the device.\n                           See MISSING Error
      (Section 5.17.3) for more\n                           details.\n   -202   INVALID_VALUE
      \   A parameter value is invalid in some way.\n                           The
      Database SHOULD include a message\n                           indicating which
      parameter and why its value\n                           is invalid.  This error
      does not use any\n                           additional data.\n   -300   (reserved)\n
      \  -301   UNAUTHORIZED     The device is not authorized to used the\n                           Database.
      \  Authorization may be determined\n                           by the ruleset
      or be dependent on prior\n                           arrangement between the
      device and Database.\n                           This error does not use any
      additional data.\n   -302   NOT_REGISTERED   Device registration required, but
      the device\n                           is not registered.  This error does not
      use\n                           any additional data.\n   -32000 (reserved)       Reserved
      for JSON-RPC error codes.\n   to\n   -32768\n                           Table
      1: Error Codes\n"
    - contents:
      - "5.17.1.  OUTSIDE_COVERAGE Error\n   When the error code is OUTSIDE_COVERAGE,
        the Database MAY include an\n   ErrorData element within its Error response
        as the \"data\" parameter,\n   and, if present, the ErrorData contains a DbUpdateSpec
        (Section 5.7)\n   element that provides a list of alternate Databases that
        might be\n   appropriate for the requested location.\n   +---------------------------+\n
        \  |Error                      |\n   +----------------+----------+\n   |code:int
        \       | REQUIRED |\n   |message:string  | OPTIONAL |    +-----------------------------+\n
        \  |data:ErrorData  | OPTIONAL |--->|ErrorData                    |\n   +----------------+----------+
        \   +------------------+----------+\n                                    |spec:DbUpdateSpec
        | OPTIONAL |\n                                    +------------------+----------+\n"
      title: 5.17.1.  OUTSIDE_COVERAGE Error
    - contents:
      - "5.17.2.  DATABASE_CHANGE Error\n   When the error code is DATABASE_CHANGE,
        the Database MAY include an\n   ErrorData element within its Error response
        as the \"data\" parameter,\n   and, if present, the ErrorData contains a DbUpdateSpec
        (Section 5.7)\n   element that provides a list of alternate Databases.\n   +---------------------------+\n
        \  |Error                      |\n   +----------------+----------+\n   |code:int
        \       | REQUIRED |\n   |message:string  | OPTIONAL |    +-----------------------------+\n
        \  |data:ErrorData  | OPTIONAL |--->|ErrorData                    |\n   +----------------+----------+
        \   +------------------+----------+\n                                    |spec:DbUpdateSpec
        | REQUIRED |\n                                    +------------------+----------+\n"
      title: 5.17.2.  DATABASE_CHANGE Error
    - contents:
      - "5.17.3.  MISSING Error\n   When the error code is MISSING, the Database MUST
        include an\n   ErrorData element within its Error response as the \"data\"
        parameter,\n   and the ErrorData element MUST include a list of the missing
        required\n   parameters and MAY include the list of all required parameters.\n
        \  +---------------------------+\n   |Error                      |\n   +----------------+----------+\n
        \  |code:int        | REQUIRED |\n   |message:string  | OPTIONAL |    +---------------------------+\n
        \  |data:ErrorData  | REQUIRED |--->|ErrorData                  |\n   +----------------+----------+
        \   +----------------+----------+ 1..*\n                                    |parameters:list
        | REQUIRED |--+\n                                    +----------------+----------+
        \ |\n                                                                   v\n
        \                                                                string\n
        \  Parameters:\n   parameters:  List of one or more parameter names (strings).
        \ The name\n      of a parameter is expressed using dotted notation, when\n
        \     appropriate, e.g., \"deviceDesc.serialNumber\".\n"
      title: 5.17.3.  MISSING Error
    title: 5.17.  Error Element
  title: 5.  Protocol Parameters
- contents:
  - "6.  Message Encoding\n   PAWS is encoded using JSON-RPC [JSON-RPC] (see also
    \"The JavaScript\n   Object Notation (JSON) Data Interchange Format\" [RFC7159]).
    \ Each\n   component described in Protocol Functionalities (Section 4)\n   corresponds
    to one or more JSON-RPC methods.  This section discusses\n   how to encode the
    data models presented in Sections 4 and 5 into JSON\n   and provides some example
    encodings.  The JSON examples may contain\n   ellipses (...) to represent additional
    properties or elements that\n   have been omitted in order to make the examples
    more concise.\n"
  - contents:
    - "6.1.  JSON-RPC Binding\n   The JSON-RPC [JSON-RPC] protocol consists of two
      basic objects,\n   Request and Response:\n   o  The JSON-RPC Request object
      encapsulates a PAWS functionality\n      (operation) and the request message.\n
      \  o  The JSON-RPC Response object encapsulates a PAWS response message\n      and
      an Error element.\n   The Database and device MUST support JSON-RPC 2.0 encoding,
      with the\n   restriction that the \"id\" parameter in the messages MUST be a
      string.\n   The device should generate the \"id\" uniquely enough to allow the
      use\n   of JSON-RPC batch.\n   The JSON-RPC Request for PAWS has the following
      form:\n   {\n     \"jsonrpc\": \"2.0\",\n     \"method\": \"spectrum.paws.methodName\",\n
      \    \"params\": <PAWS_REQ>,\n     \"id\": \"idString\"\n   }\n   where \"method\"
      is the name of a PAWS functionality (operation), and\n   <PAWS_REQ> represents
      one of the PAWS request messages associated\n   with the method (see Sections
      4.3 through 4.6).  Method names are\n   defined with the prefix \"spectrum.paws.\".\n
      \  The non-error JSON-RPC Response for PAWS has the following form:\n   {\n
      \    \"jsonrpc\": \"2.0\",\n     \"result\": <PAWS_RESP>,\n     \"id\": \"idString\"\n
      \  }\n   where <PAWS_RESP> represents one of the PAWS response messages\n   associated
      with the method, and \"id\" is copied from the request.\n   The error JSON-RPC
      Response for PAWS has the following form:\n   {\n     \"jsonrpc\": \"2.0\",\n
      \    \"error\": {\n       \"code\": -102,\n       \"message\": \"An appropriate
      error message.\",\n       \"data\": { ... }\n     },\n     \"id\": \"idString\"\n
      \  }\n   where the \"error\" object corresponds to the Error Element\n   (Section
      5.17), and \"code\" is an error code described in the same\n   section.  The
      Database SHOULD attempt to use the most specific\n   applicable PAWS error code.
      \ When an accurate one is not available,\n   it SHOULD fall back to standard
      JSON-RPC error codes as defined in\n   the JSON-RPC specification.  For example,
      if the Database receives\n   invalid JSON from the device, it should respond
      with \"-32700\",\n   signifying a parse error.  As a last resort, the Database
      MAY send a\n   suitable HTTP 5xx response.\n"
    - contents:
      - "6.1.1.  Method Names\n   Table 2 defines the method name, request object,
        and response object\n   for each functionality defined in Protocol Functionalities\n
        \  (Section 4).\n   +-------------------------------------------------------------------+\n
        \  | Method Name                                                       |\n
        \  |    Request                                                        |\n
        \  |    Response                                                       |\n
        \  +-------------------------------------------------------------------+\n
        \  | spectrum.paws.init                                                |\n
        \  |    INIT_REQ (Section 4.3.1)                                       |\n
        \  |    INIT_RESP (Section 4.3.2)                                      |\n
        \  |                                                                   |\n
        \  | spectrum.paws.register                                            |\n
        \  |    REGISTRATION_REQ (Section 4.4.1)                               |\n
        \  |    REGISTRATION_RESP (Section 4.4.2)                              |\n
        \  |                                                                   |\n
        \  | spectrum.paws.getSpectrum                                         |\n
        \  |    AVAIL_SPECTRUM_REQ (Section 4.5.1)                             |\n
        \  |    AVAIL_SPECTRUM_RESP (Section 4.5.2)                            |\n
        \  |                                                                   |\n
        \  | spectrum.paws.getSpectrumBatch                                    |\n
        \  |    AVAIL_SPECTRUM_BATCH_REQ (Section 4.5.3)                       |\n
        \  |    AVAIL_SPECTRUM_BATCH_RESP (Section 4.5.4)                      |\n
        \  |                                                                   |\n
        \  | spectrum.paws.notifySpectrumUse                                   |\n
        \  |    SPECTRUM_USE_NOTIFY (Section 4.5.5)                            |\n
        \  |    SPECTRUM_USE_RESP (Section 4.5.6)                              |\n
        \  |                                                                   |\n
        \  | spectrum.paws.verifyDevice                                        |\n
        \  |    DEV_VALID_REQ (Section 4.6.1)                                  |\n
        \  |    DEV_VALID_RESP (Section 4.6.2)                                 |\n
        \  +-------------------------------------------------------------------+\n
        \                       Table 2: Method Names\n"
      title: 6.1.1.  Method Names
    - contents:
      - "6.1.2.  JSON Encoding of Data Models\n   JSON [RFC7159] encoding of the data
        models described in Sections 4\n   and 5 is straightforward:\n   o  Each data
        model describes the contents of a JSON object.\n   o  Each parameter of a
        data model corresponds to a member of the\n      corresponding JSON object:\n
        \     *  The parameter name of the data model is the same as the member\n
        \        name of the JSON object.\n      *  The parameter data type describes
        the type of the member value.\n   o  Primitive types map to JSON type, as
        described in Section 4 and\n      repeated here:\n      string:  A JSON string,
        restricted to UTF-8 encoding\n      int:  A JSON number, without a fractional
        or exponent part\n      float:  A JSON number\n      boolean:  One of the
        JSON values, true or false\n   o  The list type maps to a JSON array, except
        that all values in the\n      array are of the same type.\n   o  When the
        parameter data type refers to another data model, that\n      data model describes
        a nested JSON object.\n   o  The encoded JSON object for each of the Request
        and Response\n      message listed in the Method Names Table (Table 2) also
        includes\n      the following members:\n      type:  The name of the message,
        e.g., \"INIT_REQ\"\n      version:  The PAWS version, e.g., \"1.0\"\n   See
        the following sections for examples.\n"
      title: 6.1.2.  JSON Encoding of Data Models
    title: 6.1.  JSON-RPC Binding
  - contents:
    - "6.2.  Example Encoding: spectrum.paws.init Method\n   An example of the \"spectrum.paws.init\"
      JSON-RPC request is shown\n   below.\n   {\n    \"jsonrpc\": \"2.0\",\n    \"method\":
      \"spectrum.paws.init\",\n    \"params\": {\n     \"type\": \"INIT_REQ\",\n     \"version\":
      \"1.0\",\n     \"deviceDesc\": {\n      \"serialNumber\": \"XXX\",\n      \"fccId\":
      \"YYY\",\n      \"rulesetIds\": [\"FccTvBandWhiteSpace-2010\"]\n     },\n     \"location\":
      {\n      \"point\": {\n       \"center\": {\"latitude\": 37.0, \"longitude\":
      -101.3}\n      }\n     }\n    },\n    \"id\": \"xxxxxx\"\n   }\n   An example
      of the corresponding JSON-RPC response is shown below.\n   {\n    \"jsonrpc\":
      \"2.0\",\n    \"result\": {\n     \"type\": \"INIT_RESP\",\n     \"version\":
      \"1.0\",\n     \"rulesetInfos\": [\n       {\n         \"authority\": \"us\",\n
      \        \"rulesetId\": \"FccTvBandWhiteSpace-2010\",\n         \"maxLocationChange\":
      100,\n         \"maxPollingSecs\": 86400\n       }\n     ]\n    },\n    \"id\":
      \"xxxxxx\"\n   }\n"
    title: '6.2.  Example Encoding: spectrum.paws.init Method'
  - contents:
    - "6.3.  Example Encoding: spectrum.paws.getSpectrum Method\n   An example of
      the \"spectrum.paws.getSpectrum\" JSON-RPC request is\n   shown below:\n   {\n
      \   \"jsonrpc\": \"2.0\",\n    \"method\": \"spectrum.paws.getSpectrum\",\n
      \   \"params\": {\n     \"type\": \"AVAIL_SPECTRUM_REQ\",\n     \"version\":
      \"1.0\",\n     \"deviceDesc\": {\n      \"serialNumber\": \"XXX\",\n      \"fccId\":
      \"YYY\",\n      \"rulesetIds\": [\"FccTvBandWhiteSpace-2010\"]\n     },\n     \"location\":
      {\n      \"point\": {\n       \"center\": {\"latitude\": 37.0, \"longitude\":
      -101.3}\n      }\n     },\n     \"antenna\": {\"height\": 10.2, \"heightType\":
      \"AGL\"}\n    },\n    \"id\": \"xxxxxx\"\n   }\n   The following example \"spectrum.paws.getSpectrum\"
      JSON-RPC response\n   contains:\n   o  A schedule with two time ranges\n   o
      \ A spectrum profile for one resolution bandwidth (6 MHz)\n   o  The power levels
      for two frequency segments:\n      *  From 518 MHz to 542 MHz\n      *  From
      620 MHz to 626 MHz\n   o  In practice, each \"profiles\" list contains (frequency,
      power)\n      points to cover all frequencies governed by the associated\n      ruleset.
      \ See \"Spectrum\" (Section 5.11) for a more detailed\n      discussion on the
      representation.\n   {\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n     \"type\":
      \"AVAIL_SPECTRUM_RESP\",\n     \"version\": \"1.0\",\n     \"timestamp\": \"2013-03-02T14:30:21Z\",\n
      \    \"deviceDesc\": {\n      \"serialNumber\": \"XXX\",\n      \"fccId\": \"YYY\",\n
      \     \"rulesetIds\": [\"FccTvBandWhiteSpace-2010\"]\n     },\n     \"spectrumSpecs\":
      [\n      {\n       \"rulesetInfo\": {\n         \"authority\": \"us\",\n         \"rulesetId\":
      \"FccTvBandWhiteSpace-2010\"\n       },\n       \"needsSpectrumReport\": false,\n
      \      \"spectrumSchedules\": [\n        {\n         \"eventTime\": {\n          \"startTime\":
      \"2013-03-02T14:30:21Z\",\n          \"stopTime\": \"2013-03-02T20:00:00Z\"\n
      \        },\n         \"spectra\": [\n           {\n            \"resolutionBwHz\":
      6e6,\n            \"profiles\": [\n              ...\n              [\n               {\"hz\":5.18e8,
      \"dbm\":30.0},\n               {\"hz\":5.36e8, \"dbm\":30.0},\n               {\"hz\":5.36e8,
      \"dbm\":36.0},\n               {\"hz\":5.42e8, \"dbm\":36.0}\n              ],\n
      \             [\n               {\"hz\":6.20e8, \"dbm\":30.0},\n               {\"hz\":6.26e8,
      \"dbm\":30.0}\n              ],\n              ...\n            ]\n           }\n
      \        ]\n        },\n        {\n         \"eventTime\": {\n          \"startTime\":
      \"2013-03-02T22:00:00Z\",\n          \"stopTime\": \"2013-03-03T14:30:21Z\"\n
      \        },\n         \"spectra\": [\n          ...\n         ]\n        }\n
      \      ]\n      }\n     ]\n    },\n    \"id\": \"xxxxxx\"\n   }\n   The following
      example \"spectrum.paws.getSpectrum\" JSON-RPC response\n   includes a spectrum
      profile that contains specifications for two\n   different bandwidth resolutions
      (6 MHz and 100 kHz):\n   {\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n     \"type\":
      \"AVAIL_SPECTRUM_RESP\",\n     \"version\": \"1.0\",\n     \"timestamp\": \"2013-03-02T14:30:21Z\",\n
      \    \"deviceDesc\": {\n      \"serialNumber\": \"XXX\",\n      ...\n     },\n
      \    \"spectrumSpecs\": [\n      {\n       \"rulesetInfo\": {\n         \"authority\":
      \"xx\",\n         ...\n       },\n       \"needsSpectrumReport\": false,\n       \"spectrumSchedules\":
      [\n        {\n         \"eventTime\": {\n          \"startTime\": \"2013-03-02T14:30:21Z\",\n
      \         \"stopTime\": \"2013-03-02T20:00:00Z\"\n         },\n         \"spectra\":
      [\n           {\n            \"resolutionBwHz\": 6e6,\n            \"profiles\":
      [\n              ...\n              [\n               {\"hz\":5.18e8, \"dbm\":30.0},\n
      \              {\"hz\":5.36e8, \"dbm\":30.0},\n               {\"hz\":5.36e8,
      \"dbm\":36.0},\n               {\"hz\":5.42e8, \"dbm\":36.0}\n              ],\n
      \             [\n               {\"hz\":6.20e8, \"dbm\":30.0},\n               {\"hz\":6.26e8,
      \"dbm\":30.0}\n              ],\n              ...\n            ]\n           },\n
      \          {\n            \"resolutionBwHz\": 1e5,\n            \"profiles\":
      [\n              ...\n              [\n               {\"hz\":5.18e8, \"dbm\":27.0},\n
      \              {\"hz\":5.36e8, \"dbm\":27.0},\n               {\"hz\":5.36e8,
      \"dbm\":30.0},\n               {\"hz\":5.42e8, \"dbm\":30.0}\n              ],\n
      \             [\n               {\"hz\":6.20e8, \"dbm\":27.0},\n               {\"hz\":6.26e8,
      \"dbm\":27.0}\n              ],\n              ...\n            ]\n           }\n
      \        ]\n        },\n        {\n         \"eventTime\": {\n          \"startTime\":
      \"2013-03-02T22:00:00Z\",\n          \"stopTime\": \"2013-03-03T14:30:21Z\"\n
      \        },\n         \"spectra\": [\n          ...\n         ]\n        }\n
      \      ]\n      }\n     ]\n    },\n    \"id\": \"xxxxxx\"\n   }\n"
    title: '6.3.  Example Encoding: spectrum.paws.getSpectrum Method'
  - contents:
    - "6.4.  Example Encoding: DeviceOwner vCard\n   The DeviceOwner (Section 5.5)
      data model contains member values that\n   are JSON encodings of vCard, as described
      in \"jCard: The JSON format\n   for vCard\" [RFC7095].  An example fragment
      is provided below:\n     {\n       ...\n       \"deviceOwner\": {\n         \"owner\":
      [\n           \"vcard\", [\n             [\"version\", {}, \"text\", \"4.0\"],\n
      \            [\"kind\", {}, \"text\", \"org\"],\n             [\"fn\", {}, \"text\",
      \"Racafrax, Inc.\"]\n           ]\n         ],\n         \"operator\": [\n           \"vcard\",
      [\n             [\"version\", {}, \"text\", \"4.0\"],\n             [\"fn\",
      {}, \"text\", \"John Frax\"],\n             [\"adr\", {}, \"text\",\n               [\"\",
      \"\", \"100 Main Street\",\n                \"Summersville\", \"CA\", \"90034\",
      \"USA\"\n               ]\n             ],\n             [\"tel\", {}, \"uri\",
      \"tel:+1-213-555-1212\"],\n             [\"email\", {}, \"text\", \"j.frax@rackafrax.com\"]\n
      \          ]\n         ]\n       }\n     }\n"
    title: '6.4.  Example Encoding: DeviceOwner vCard'
  title: 6.  Message Encoding
- contents:
  - "7.  HTTPS Binding\n   This section describes the use of \"HTTP Over TLS\" [RFC2818]
    (HTTPS)\n   as the transfer mechanism for PAWS.  TLS provides message integrity\n
    \  and confidentiality between the Master Device and the Database, but\n   only
    when best current practices are adopted, including use of\n   recommended cipher
    suites and modes of operation.  Consequently, to\n   improve PAWS security and
    interoperability, implementations of the\n   Database and Master Device MUST follow
    best current practices defined\n   by \"Recommendations for Secure Use of Transport
    Layer Security (TLS)\n   and Datagram Transport Layer Security (DTLS)\" [RFC7525].\n
    \  Depending on a prior relationship between a Database and device, the\n   server
    MAY require client authentication, as described in the\n   \"Transport Layer Security
    (TLS) Protocol\" [RFC5246], to authenticate\n   the device.  When client authentication
    is required, the Database\n   MUST specify, by prior arrangement, acceptable root
    Certification\n   Authorities (CAs) to serve as trust anchors for device certificates.\n
    \  To enable Databases to handle large numbers of requests from large\n   numbers
    of devices, the Database MAY support and devices SHOULD\n   support \"Stateless
    TLS Session Resumption\" [RFC5077].\n   A PAWS request message is carried in the
    body of an HTTP POST\n   request.  A PAWS response message is carried in the body
    of an HTTP\n   response.  A PAWS response SHOULD include a Content-Length header.\n
    \  The POST method is the only method REQUIRED for PAWS.  If a Database\n   chooses
    to support GET, it MUST be an escaped URI, but the encoding\n   of the URI is
    outside the scope of this document.  The Database MAY\n   refuse to support the
    GET request by returning an HTTP error code,\n   such as 405 (method not allowed).\n
    \  The Database MAY redirect a PAWS request by returning a HTTP 3xx\n   response
    (as defined by Section 6.4 of \"HTTP/1.1: Semantics and\n   Content\" [RFC7231]).
    \ The Database MUST provide the redirect URI in\n   the Location header of the
    3xx response, and the device MUST handle\n   redirects by using the Location header
    provided by the Database.\n   When redirecting, the device MUST observe the delay
    indicated by the\n   Retry-After header.  The device MUST authenticate the Database
    that\n   returns the redirect response before following the redirect.  Also,\n
    \  the device MUST authenticate the Database indicated in the redirect.\n   Since
    the device may communicate with a Database (which it\n   authenticated) without
    user interaction, when the response code is\n   301 (Moved Permanently), the device
    MAY redirect without asking a\n   user for confirmation, even thought it is in
    response to an HTTP POST\n   method.\n   The Database SHOULD use HTTP status code
    \"307 Temporary Redirect\" to\n   indicate that the device SHOULD resubmit the
    same request to an\n   alternate URI.  The device MAY revert to the original URI
    for the\n   very next request, or it MAY continue to use the alternate URI for
    a\n   period of time, e.g.,:\n   o  For the remainder of its session, or\n   o
    \ For a fixed period of time, or\n   o  Until power cycled, or\n   o  Until it
    receives another redirect\n   However, the device does not need to modify its
    stored list of URIs.\n   For a minimum of two weeks before the URI of the Database
    changes\n   permanently, it MUST use the database-change (DbUpdateSpec\n   (Section
    5.7)) mechanism to notify devices, as described in\n   \"Configuration Update:
    Database URI Changes\" (Section 4.1.2).  After\n   the Database has moved, requests
    to the original URI MAY return HTTP\n   status code 301 (Moved Permanently) to
    indicate that the device\n   SHOULD resubmit the request, and all future requests,
    to the\n   indicated alternate URI.\n"
  title: 7.  HTTPS Binding
- contents:
  - "8.  Extensibility\n   This section describes procedures for extending PAWS.  No
    extensions\n   should be made that would return sensitive device-specific\n   information
    in database responses.\n"
  - contents:
    - "8.1.  Defining Ruleset Identifiers\n   A ruleset represents a set of device-side
      requirements for which the\n   device has been certified.  It typically corresponds
      to, but is not\n   limited to, a set of rules that govern a specific set of
      radio\n   spectrum for a regulatory domain.\n   Ruleset identifiers are defined
      and registered in the Ruleset ID\n   Registry following the procedure in Section
      9.1.  Ruleset ID values\n   MUST conform to the ruleset-id ABNF.  If the Ruleset
      ID requires\n   additional parameters, they are registered in the PAWS Parameters\n
      \  Registry, as described by Section 9.2.  The ABNF syntax [RFC5234] is\n   as
      follows.\n   ruleset-id   = 1*64ruleset-char\n   ruleset-char = ALPHA / DIGIT
      / \"_\" / \".\"\n   When defining a Ruleset ID:\n   o  It can be useful for
      the identifier to be descriptive of the set\n      of rules that allow a device
      to operate within one or more\n      regulatory domains.  For example, it might
      include the name of a\n      regulatory body or a certification process.\n   o
      \ The identifier SHOULD include some sort of version information,\n      such
      as a year and/or version number.\n   o  The maximum length of the identifier
      is 64 octets.\n"
    title: 8.1.  Defining Ruleset Identifiers
  - contents:
    - "8.2.  Defining New Message Parameters\n   New request or response parameters
      for use with PAWS are defined and\n   registered in the parameters registry
      following the procedure in\n   Section 9.2.\n   Parameter names MUST conform
      to the param-name ABNF, and parameter\n   values syntax MUST be well-defined
      (e.g., using ABNF or a reference\n   to the syntax of an existing parameter).\n
      \  param-name = 1*64name-char\n   name-char  = ALPHA / DIGIT / \"_\"\n   Parameter
      names use lowerCamelCase by convention.  The maximum length\n   of a name is
      64 octets.\n   Unregistered vendor-specific parameter extensions that are not\n
      \  commonly applicable and are specific to the implementation details of\n   the
      Database where they are used SHOULD use a vendor-specific prefix\n   that is
      not likely to conflict with other registered values (e.g.,\n   begin with 'companyname').\n"
    title: 8.2.  Defining New Message Parameters
  - contents:
    - "8.3.  Defining Additional Error Codes\n   Additional error codes can be registered
      to extend the set listed in\n   Section 5.17, following the procedures in Section
      9.3.  If the error\n   code requires additional response parameters, they are
      registered in\n   the PAWS Parameters Registry, as described by Section 9.2.\n
      \  By convention, the error code is a negative integer value, using one\n   of
      the range of values defined in Error Codes (Section 5.17).  If an\n   appropriate
      category does not exist, a value from a different range\n   may be used.\n"
    title: 8.3.  Defining Additional Error Codes
  title: 8.  Extensibility
- contents:
  - "9.  IANA Considerations\n   There are three registries associated with PAWS:\n
    \  o  PAWS Ruleset ID Registry (Section 9.1)\n   o  PAWS Parameter Registry (Section
    9.2)\n   o  PAWS Error Code Registry (Section 9.3)\n   All registries use the
    Specification Required policy [RFC5226], with\n   a Designated Expert appointed
    by the IESG.  Specific criteria that\n   the Designated Expert should use in assessing
    registrations are given\n   below in the description of each registry.  The Designated
    Expert\n   should take advice from the community through the paws@ietf.org\n   mailing
    list, and the registrant is encouraged to post to the mailing\n   list before
    formally requesting the registration from IANA.  The\n   intention is that new
    registrations will be accompanied by a\n   published specification.  But in order
    to allow for the allocation of\n   values prior to publication of the specification,
    the Designated\n   Expert can approve allocations once it seems clear that the\n
    \  specification will be published.  Upon approval, IANA will post the\n   registrations
    that are not intended to be published in an RFC.\n"
  - contents:
    - "9.1.  PAWS Ruleset ID Registry\n   This specification establishes the \"PAWS
      Ruleset ID Registry\".\n   Ruleset type names for inclusion in PAWS messages
      are registered on\n   the advice of one or more Designated Experts, with Specification\n
      \  Required [RFC5226].  The specification must include a reference to\n   the
      regulatory domain to which it applies.  To increase\n   interoperability, it
      is more desirable to have fewer rulesets than to\n   have many rulesets with
      small variations.  Consequently, the\n   Designated Expert should avoid duplication
      and should encourage the\n   registrant to look for alternatives if there are
      only small\n   variations from an existing ruleset.  The Designated Expert should\n
      \  ensure that the proposed registration is complete with respect to its\n   associated
      regulatory domain and may seek an expert familiar with\n   those rules to participate
      in the review on the paws@ietf.org mailing\n   list.\n   The PAWS Ruleset ID
      Registry includes the following: 'Ruleset\n   Identifier', 'Reference', and
      'Template'.  The Template column will\n   include links to the registration
      templates, either posted by IANA or\n   linked to the relevant sections of RFCs.\n"
    - contents:
      - "9.1.1.  Registration Template\n   Ruleset identifier:  The name of the ruleset.
        \ See Section 8.1 of RFC\n      7545 for the format requirements of this identifier.\n
        \  Specification document(s):  Reference to the document that specifies\n
        \     the parameter, preferably including a URI that can be used to\n      retrieve
        a copy of the document.  An indication of the relevant\n      sections also
        may be included but is not required.\n   Additional Parameter Requirements:
        \ Listing of additional parameter\n      requirements to associate with the
        ruleset.  Note that new\n      parameters are registered separately in the
        PAWS Parameters\n      Registry, as described by Section 8.2.  Two types of
        additional\n      parameter requirements are:\n      *  Addition of new parameters
        to existing structures, or\n         modification of the REQUIRED and OPTIONAL
        requirements for\n         existing parameters.\n      *  Modification of
        requirements to existing parameter values.\n      For adding new parameters
        or modifying requirements of existing\n      parameters, the registration
        should include a table for each\n      affected structure that lists the structure's
        parameter changes.\n      Each table should include a structure name in its
        heading and have\n      the following columns:\n      Parameter name:  Name
        of the parameter added or modified.\n      Type:  Data type of the parameter
        value.\n      Requirement:  Whether the parameter is REQUIRED or OPTIONAL
        for\n         the ruleset.\n      Notes:  Any additional notes that might
        be useful to implementors.\n      For modifying requirements to existing parameter
        values, the\n      registration should include a table for each affected structure\n
        \     that lists the structure's parameter changes.  Each table should\n      include
        a structure name in its heading and have the following\n      columns:\n      Parameter
        name:  Name of the parameter.\n      Type:  Data type of the parameter value.\n
        \     Additional requirements:  Additional requirements on the parameter\n
        \        value.\n   IANA will post each registration template that is not
        intended to be\n   published in an RFC.\n   Note that the Additional Parameter
        Requirements section can be quite\n   extensive, so it will not appear directly
        in the IANA Ruleset ID\n   Registry table.  The table, however, will contain
        a link to the full\n   registration template for easy access to the additional
        requirements.\n"
      title: 9.1.1.  Registration Template
    - contents:
      - "9.1.2.  Initial Registry Contents\n   The PAWS Ruleset ID Registry enables
        protocol extensibility to\n   support any regulatory domain and ruleset.  The
        initial contents of\n   the registry, however, include only FCC-specific and
        ETSI-specific\n   entries, because, as of this writing, they are the only
        regulatory\n   domains that have finalized rules.  There is no intent to restrict\n
        \  the protocol to any particular set of authorities.\n   The initial contents
        of the PAWS Ruleset ID Registry are listed\n   below; each section corresponds
        to a single entry in the registry.\n"
      - contents:
        - "9.1.2.1.  Federal Communications Commission (FCC)\n   For the additional
          parameters that start with the \"fcc\" prefix, see\n   PAWS Parameters Registry
          Initial Contents (Section 9.2.2) for more\n   information.\n   Ruleset identifier:
          \ FccTvBandWhiteSpace-2010\n   Specification document(s):  This ruleset
          refers to the FCC rules for\n      TV-band white-space operations established
          in the Code of Federal\n      Regulations (CFR), Title 47, Part 15, Subpart
          H [FCC-CFR47-15H].\n   Additional Parameter Requirements\n   Each of the
          following tables defines additional parameters for the\n   indicated PAWS
          message.  Note that the Requirement column lists FCC,\n   not PAWS, requirements/optionality
          rules.\n   The FCC requires registration of \"Fixed Devices\".  Additionally,\n
          \  deviceOwner is required in the registration request:\n                   Registration
          Request (Section 4.4.1)\n   +-------------+-------------------+-------------+-------------------+\n
          \  | Parameter   | Type              | Requirement | Notes             |\n
          \  | Name        |                   |             |                   |\n
          \  +-------------+-------------------+-------------+-------------------+\n
          \  | deviceOwner | DeviceOwner       | REQUIRED    | For registering   |\n
          \  |             | (Section 5.5)     |             | Fixed Devices     |\n
          \  +-------------+-------------------+-------------+-------------------+\n
          \               Available Spectrum Request (Section 4.5.1)\n   +---------------+-----------------------------+-------------+-------+\n
          \  | Parameter     | Type                        | Requirement | Notes |\n
          \  | Name          |                             |             |       |\n
          \  +---------------+-----------------------------+-------------+-------+\n
          \  | deviceDesc    | DeviceDescriptor (Section   | REQUIRED    |       |\n
          \  |               | 5.2)                        |             |       |\n
          \  +---------------+-----------------------------+-------------+-------+\n
          \            Available Spectrum Batch Request (Section 4.5.3)\n   +---------------+-----------------------------+-------------+-------+\n
          \  | Parameter     | Type                        | Requirement | Notes |\n
          \  | Name          |                             |             |       |\n
          \  +---------------+-----------------------------+-------------+-------+\n
          \  | deviceDesc    | DeviceDescriptor (Section   | REQUIRED    |       |\n
          \  |               | 5.2)                        |             |       |\n
          \  +---------------+-----------------------------+-------------+-------+\n
          \                     DeviceDescriptor (Section 5.2)\n   +-------------------+--------+-------------+------------------------+\n
          \  | Parameter Name    | Type   | Requirement | Notes                  |\n
          \  +-------------------+--------+-------------+------------------------+\n
          \  | serialNumber      | string | REQUIRED    | Specifies a device's   |\n
          \  |                   |        |             | serial number.  See    |\n
          \  |                   |        |             | Section 5.2.           |\n
          \  | fccId             | string | REQUIRED    | Specifies a device's   |\n
          \  |                   |        |             | FCC certification ID   |\n
          \  |                   |        |             | (Section 9.2.2.1).     |\n
          \  | fccTvbdDeviceType | string | REQUIRED    | Specifies the FCC      |\n
          \  |                   |        |             | Device Type (Section   |\n
          \  |                   |        |             | 9.2.2.2) of TV-band    |\n
          \  |                   |        |             | white-space device, as |\n
          \  |                   |        |             | defined by the FCC     |\n
          \  |                   |        |             | rules.                 |\n
          \  +-------------------+--------+-------------+------------------------+\n
          \  The following table lists additional requirements for DeviceOwner\n   (Section
          5.5) parameter values.\n                         DeviceOwner (Section 5.5)\n
          \  +-----------+-------+-----------------------------------------------+\n
          \  | Parameter | Type  | Additional Requirement                        |\n
          \  | Name      |       |                                               |\n
          \  +-----------+-------+-----------------------------------------------+\n
          \  | owner     | vCard | The owner is required to contain the          |\n
          \  |           |       | formatted name of an individual or            |\n
          \  |           |       | organization using the \"fn\" property.  When   |\n
          \  |           |       | the name is that of an organization, the      |\n
          \  |           |       | entry also is required to contain the \"kind\"
          \ |\n   |           |       | property, with a value of \"org\".              |\n
          \  | operator  | vCard | The operator entry is required to contain the |\n
          \  |           |       | following properties for the contact person   |\n
          \  |           |       | responsible for the device's operation: \"fn\",
          |\n   |           |       | \"adr\", \"tel\", and \"email\".                    |\n
          \  +-----------+-------+-----------------------------------------------+\n"
        title: 9.1.2.1.  Federal Communications Commission (FCC)
      - contents:
        - "9.1.2.2.  European Telecommunications Standards Institute (ETSI)\n   For
          the additional parameters that start with the \"etsi\" prefix, see\n   PAWS
          Parameters Registry Initial Contents (Section 9.2.2) for more\n   information.\n
          \  Ruleset identifier:  ETSI-EN-301-598-1.1.1\n   Specification document(s):
          \ This ruleset refers to the ETSI\n      Harmonised Standard [ETSI-EN-301-598]
          established by ETSI.\n   Additional Parameter Requirements\n   Each of the
          following tables defines additional parameters for the\n   indicated PAWS
          message.  Note that the Requirement column lists ETSI,\n   not PAWS, requirements/optionality
          rules.\n   +-------------------------------------------------------------------+\n
          \  | Parameter Name                                                    |\n
          \  |    Type                                                           |\n
          \  |    Requirement                                                    |\n
          \  |    Notes                                                          |\n
          \  +-------------------------------------------------------------------+\n
          \  | serialNumber                                                      |\n
          \  |    string                                                         |\n
          \  |    REQUIRED                                                       |\n
          \  |    Specifies a device's serial number (Section 5.2).              |\n
          \  |                                                                   |\n
          \  | manufacturerId                                                    |\n
          \  |    string                                                         |\n
          \  |    REQUIRED                                                       |\n
          \  |    Specifies a device's manufacturer's identifier                 |\n
          \  |     (Section 5.2).                                                |\n
          \  |                                                                   |\n
          \  | modelId                                                           |\n
          \  |    string                                                         |\n
          \  |    REQUIRED                                                       |\n
          \  |    Specifies a device's model identifier (Section 5.2).           |\n
          \  |                                                                   |\n
          \  | etsiEnDeviceType                                                  |\n
          \  |    string                                                         |\n
          \  |    REQUIRED                                                       |\n
          \  |    Specifies the device's ETSI device type (Section 9.2.2.3).     |\n
          \  |                                                                   |\n
          \  | etsiEnDeviceEmissionsClass                                        |\n
          \  |    string                                                         |\n
          \  |    REQUIRED                                                       |\n
          \  |    Specifies the device's ETSI device emissions class             |\n
          \  |     (Section 9.2.2.4).                                            |\n
          \  |                                                                   |\n
          \  | etsiEnTechnologyId                                                |\n
          \  |    string                                                         |\n
          \  |    REQUIRED                                                       |\n
          \  |    Specifies the device's ETSI technology ID (Section 9.2.2.5).   |\n
          \  |                                                                   |\n
          \  | etsiEnDeviceCategory                                              |\n
          \  |    string                                                         |\n
          \  |    REQUIRED                                                       |\n
          \  |    Specifies the device's ETSI device category (Section 9.2.2.6). |\n
          \  +-------------------------------------------------------------------+\n
          \                   AVAIL_SPECTRUM_REQ (Section 4.5.1)\n   +-------------+--------+-------------+------------------------------+\n
          \  | Parameter   | Type   | Requirement | Notes                        |\n
          \  | Name        |        |             |                              |\n
          \  +-------------+--------+-------------+------------------------------+\n
          \  | requestType | string | OPTIONAL    | Modifies the available-      |\n
          \  |             |        |             | spectrum request type.  If   |\n
          \  |             |        |             | specified, the only valid    |\n
          \  |             |        |             | value is, \"Generic Slave\",   |\n
          \  |             |        |             | and the Database is required |\n
          \  |             |        |             | to respond with generic      |\n
          \  |             |        |             | operating parameters for any |\n
          \  |             |        |             | Slave Device.                |\n
          \  +-------------+--------+-------------+------------------------------+\n
          \            Available Spectrum Batch Request (Section 4.5.3)\n   +-------------+--------+-------------+------------------------------+\n
          \  | Parameter   | Type   | Requirement | Notes                        |\n
          \  | Name        |        |             |                              |\n
          \  +-------------+--------+-------------+------------------------------+\n
          \  | requestType | string | OPTIONAL    | Modifies the available-      |\n
          \  |             |        |             | spectrum request type.  If   |\n
          \  |             |        |             | specified, the only valid    |\n
          \  |             |        |             | value is, \"Generic Slave\",   |\n
          \  |             |        |             | and the Database is required |\n
          \  |             |        |             | to respond with generic      |\n
          \  |             |        |             | operating parameters for any |\n
          \  |             |        |             | Slave Device.                |\n
          \  +-------------+--------+-------------+------------------------------+\n
          \  The following tables define additional requirements for the\n   DeviceDescriptor
          (Section 5.2) and RulesetInfo (Section 5.6)\n   parameters that appear in
          the AVAIL_SPECTRUM_RESP (Section 4.5.2) and\n   AVAIL_SPECTRUM_BATCH_RESP
          (Section 4.5.4) messages.  Note that this\n   means the Database is modifying
          the DeviceDescriptor sent by the\n   Master Device to return device-specific
          restrictions.\n   +-------------------------------------------------------------------+\n
          \  | Parameter Name                                                    |\n
          \  |    Type                                                           |\n
          \  |    Requirement                                                    |\n
          \  |    Notes                                                          |\n
          \  +-------------------------------------------------------------------+\n
          \  | needsSpectrumReport                                               |\n
          \  |    boolean                                                        |\n
          \  |    REQUIRED                                                       |\n
          \  |    The Database is required to set this to true to indicate that  |\n
          \  |     the device must report spectrum usage.                        |\n
          \  |                                                                   |\n
          \  | maxTotalBwHz                                                      |\n
          \  |    float                                                          |\n
          \  |    REQUIRED                                                       |\n
          \  |    Specifies a constraint on total allowed bandwidth.             |\n
          \  |                                                                   |\n
          \  | maxContiguousBwHz                                                 |\n
          \  |    float                                                          |\n
          \  |    REQUIRED                                                       |\n
          \  |    Specifies a constraint on total allowed contiguous             |\n
          \  |     bandwidth.                                                    |\n
          \  |                                                                   |\n
          \  | etsiEnSimultaneousChannelOpera                                    |\n
          \  |    string                                                         |\n
          \  |    REQUIRED                                                       |\n
          \  |    Specifies a constraint on simultaneous channel operation       |\n
          \  |     (Section 9.2.2.7).  If it is not provided, the default value  |\n
          \  |      is \"0\".                                                      |\n
          \  +-------------------------------------------------------------------+\n
          \                        RulesetInfo (Section 5.6)\n   +-------------------+-------+-------------+-------------------------+\n
          \  | Parameter Name    | Type  | Requirement | Notes                   |\n
          \  +-------------------+-------+-------------+-------------------------+\n
          \  | maxLocationChange | float | OPTIONAL    | Specifies a constraint  |\n
          \  |                   |       |             | on maximum location     |\n
          \  |                   |       |             | changes.                |\n
          \  +-------------------+-------+-------------+-------------------------+\n"
        title: 9.1.2.2.  European Telecommunications Standards Institute (ETSI)
      title: 9.1.2.  Initial Registry Contents
    title: 9.1.  PAWS Ruleset ID Registry
  - contents:
    - "9.2.  PAWS Parameters Registry\n   This specification establishes the \"PAWS
      Parameters Registry\".\n   Additional parameters for inclusion in PAWS requests,
      responses, or\n   sub-messages are registered on the advice of one or more Designated\n
      \  Experts, with Specification Required [RFC5226].\n   The Designated Expert
      should avoid duplication, i.e., avoid adding a\n   new parameter when an existing
      one suffices.  When a set of\n   parameters is added in support of a new ruleset
      (Section 9.1), the\n   parameters should share a common prefix that reflects
      the ruleset ID.\n   The prefix may be omitted, of course, if a parameter has
      more general\n   applicability.  Similarly, when a parameter is not associated
      with a\n   ruleset, the Designated Expert should ensure that the parameter name\n
      \  does not have a prefix that is used by existing ruleset parameters\n   (e.g.,
      \"fcc\", \"etsi\") or that is the initials of an organization that\n   has not
      yet registered anything, but reasonably might.\n   The PAWS Parameters Registry
      includes the following: 'Parameter\n   name', 'Parameter usage location', and
      'Specification document(s)'.\n"
    - contents:
      - "9.2.1.  Registration Template\n   Parameter name:  The name of the parameter
        (e.g., \"example\").\n   Parameter usage location:  The location(s) where
        the parameter can be\n      used.  The possible locations are the named structures
        defined in\n      \"Protocol Functionalities\" (Section 4) and \"Protocol
        Parameters\"\n      (Section 5).\n   Specification document(s):  Reference
        to the document that specifies\n      the parameter, preferably including
        a URI that can be used to\n      retrieve a copy of the document.  An indication
        of the relevant\n      sections also may be included, but is not required.\n"
      title: 9.2.1.  Registration Template
    - contents:
      - "9.2.2.  Initial Registry Contents\n   The PAWS Parameters Registry enables
        protocol extensibility to\n   support any regulatory domain and ruleset.  The
        initial contents of\n   the registry, however, include only FCC-specific and
        ETSI-specific\n   entries, because, as of this writing, they are the only
        regulatory\n   domains that have established rules.  There is no intent to
        restrict\n   the protocol to any particular set of authorities.\n   The initial
        contents of the PAWS Parameters Registry are listed\n   below; each section
        corresponds to a row of the registry.\n"
      - contents:
        - "9.2.2.1.  FCC ID\n   Parameter name:  fccId\n   Parameter usage location:
          \ DeviceDescriptor (Section 5.2)\n   Specification document(s):  This document.
          \ Specifies the device's\n      FCC certification identifier.  A valid FCC
          ID is limited to 19\n      characters in the ASCII value range, as proposed
          in FCC\n      Administration Topics Review [FCC-Review-2012-10].  For the\n
          \     purposes of the PAWS protocol, the maximum length of the fccId\n      value
          is 32 octets.\n"
        title: 9.2.2.1.  FCC ID
      - contents:
        - "9.2.2.2.  FCC Device Type\n   Parameter name:  fccTvbdDeviceType\n   Parameter
          usage location:  DeviceDescriptor (Section 5.2)\n   Specification document(s):
          \ This document.  Specifies the TV-band\n      white-space device type,
          as defined by the FCC.  Valid values are\n      \"FIXED\", \"MODE_1\", and
          \"MODE_2\".\n"
        title: 9.2.2.2.  FCC Device Type
      - contents:
        - "9.2.2.3.  ETSI Device Type\n   Parameter name:  etsiEnDeviceType\n   Parameter
          usage location:  DeviceDescriptor (Section 5.2)\n   Specification document(s):
          \ Specifies the white-space device type, as\n      defined by the ETSI Harmonised
          Standard [ETSI-EN-301-598].  Valid\n      values are single-letter strings,
          such as \"A\", \"B\", etc.  Consult\n      the documentation for details
          about the device types.\n"
        title: 9.2.2.3.  ETSI Device Type
      - contents:
        - "9.2.2.4.  ETSI Device Emissions Class\n   Parameter name:  etsiEnDeviceEmissionsClass\n
          \  Parameter usage location:  DeviceDescriptor (Section 5.2)\n   Specification
          document(s):  Specifies the white-space device\n      emissions class, as
          defined by the ETSI Harmonised Standard\n      [ETSI-EN-301-598], that characterizes
          the out-of-block emissions\n      of the device.  The values are represented
          by numeric strings,\n      such as \"1\", \"2\", \"3\", etc.  Consult the
          documentation for details\n      about emissions classes.\n"
        title: 9.2.2.4.  ETSI Device Emissions Class
      - contents:
        - "9.2.2.5.  ETSI Technology Identifier\n   Parameter name:  etsiEnTechnologyId\n
          \  Parameter usage location:  DeviceDescriptor (Section 5.2)\n   Specification
          document(s):  Specifies the white-space device\n      technology identifier,
          as defined by the ETSI Harmonised Standard\n      [ETSI-EN-301-598].  The
          maximum length of the string value is 64\n      octets.  Consult the documentation
          for valid values.\n"
        title: 9.2.2.5.  ETSI Technology Identifier
      - contents:
        - "9.2.2.6.  ETSI Device Category\n   Parameter name:  etsiEnDeviceCategory\n
          \  Parameter usage location:  DeviceDescriptor (Section 5.2)\n   Specification
          document(s):  Specifies the white-space device\n      category, as defined
          by the ETSI Harmonised Standard\n      [ETSI-EN-301-598].  Valid values
          are the strings \"master\" and\n      \"slave\".  It is case insensitive.\n"
        title: 9.2.2.6.  ETSI Device Category
      - contents:
        - "9.2.2.7.  ETSI Simultaneous Channel Operation Restriction\n   Parameter
          name:  etsiEnSimultaneousChannelOperationRestriction\n   Parameter usage
          location:  SpectrumSpec (Section 5.9)\n   Specification document(s):  Specifies
          the constraint on the device\n      maximum total EIRP, as defined by the
          ETSI Harmonised Standard\n      [ETSI-EN-301-598].  The values are represented
          by numeric strings,\n      such as \"0\", \"1\", etc.  Consult the documentation
          for the\n      specification of the power constraint corresponding to each\n
          \     parameter value.\n"
        title: 9.2.2.7.  ETSI Simultaneous Channel Operation Restriction
      title: 9.2.2.  Initial Registry Contents
    title: 9.2.  PAWS Parameters Registry
  - contents:
    - "9.3.  PAWS Error Code Registry\n   This specification establishes the \"PAWS
      Error Code Registry\".\n   Additional error codes for inclusion in PAWS error
      messages are\n   registered on the advice of one or more Designated Experts,
      with\n   Specification Required [RFC5226].\n   Error codes are intended to be
      used for automated error handling by\n   devices.  Before approval, the Designated
      Expert should consider\n   whether a device would handle the new error code
      differently from an\n   existing error code, or whether the difference could
      be communicated\n   effectively to the end-user via the \"reason\" parameter
      of the Error\n   (Section 5.17) object.\n   The PAWS Error Code Registry includes
      the following: 'Code', 'Name',\n   'Description and Additional Parameters',
      and 'Specification\n   Document(s)'.\n"
    - contents:
      - "9.3.1.  Registration Template\n   Code:  Integer value of the error code.
        \ The value MUST be an\n      unassigned value in the range -32768 to 32767,
        inclusive.\n   Name:  Name of the error.\n   Description and Additional Parameters:
        \ Description of the error and\n      its associated parameters, if any.  It
        also lists additional\n      parameters that are returned in the data portion
        of the error (see\n      Section 5.17).  New parameters MUST be registered
        separately in\n      the PAWS Parameters Registry, as described by Section
        9.2.\n"
      title: 9.3.1.  Registration Template
    - contents:
      - "9.3.2.  Initial Registry Contents\n   Initial registry contents are defined
        in the Error Codes\n   Table (Table 1).\n   The registry will also include
        the error-code categories describing\n   -100s, -200s, and -300s as a note
        (see \"Error Codes\" (Section 5.17)).\n"
      title: 9.3.2.  Initial Registry Contents
    title: 9.3.  PAWS Error Code Registry
  title: 9.  IANA Considerations
- contents:
  - "10.  Security Considerations\n   PAWS is a protocol whereby a Master Device requests
    a schedule of\n   available spectrum at its location (or location of its Slave
    Devices)\n   before it (they) can operate using those frequencies.  Whereas the\n
    \  information provided by the Database must be accurate and conform to\n   the
    applicable ruleset, the Database cannot enforce, through the\n   protocol, that
    a client device uses only the spectrum it provided.\n   In other words, devices
    can put energy in the air and cause\n   interference without asking the Database.
    \ Hence, PAWS security\n   considerations do not include protection against malicious
    use of the\n   white-space spectrum.  For more detailed information on specific\n
    \  requirements and security considerations associated with PAWS, see\n   \"Protocol
    to Access White-Space (PAWS) Databases: Use Cases and\n   Requirements\" [RFC6953].\n
    \  By using PAWS, the Master Device and the Database expose themselves\n   to
    the following risks:\n   o  Accuracy: The Master Device receives incorrect spectrum-\n
    \     availability information.\n   o  Privacy:\n      *  An unauthorized entity
    intercepts identifying data for the\n         Master Device or its Slave Devices,
    such as serial number and\n         location.\n      *  Where Databases are required
    to take device registrations and/\n         or maintain request logs, there could
    be unauthorized access to\n         such information.\n   Protection from these
    risks depends on the success of the following\n   steps:\n   1.  The Master Device
    must determine the address of a proper\n       Database.\n   2.  The Master Device
    must connect to the proper Database.\n   3.  The Database must determine or compute
    accurate spectrum-\n       availability information.\n   4.  PAWS messages must
    be transmitted unmodified between the Database\n       and the Master Device.\n
    \  5.  PAWS messages must be encrypted between the Database and the\n       Master
    Device to prevent exposing private information.\n   6.  For a Slave Device, the
    spectrum-availability information also\n       must be transmitted unmodified
    and securely between the Master\n       Device and the Slave Device.\n   7.  When
    a Listing Server is required, any attack that would prevent\n       reaching a
    Listing Server would result in all devices relying on\n       that Listing Server
    ceasing their use of any white space.\n   8.  No future extensions to PAWS can
    allow the return of sensitive\n       information, such as device information
    or logs.\n   9.  The Database must not allow unauthorized access to device\n       information
    and request logs and should publish and implement\n       privacy policies regarding
    their use.\n   Of these, only steps 1, 2, 4, 5, and 8 are within the scope of
    this\n   document.  This document addresses step 1 by allowing static\n   provisioning
    of one or more trusted Databases; dynamic provisioning\n   is out of scope.  Step
    3 is dependent on specific database\n   implementations and rulesets and is outside
    the scope of this\n   document.  Step 6 requires a protocol between master and
    slave\n   devices and is thus outside the scope of this document.\n   Use of \"HTTP
    Over TLS\" [RFC2818], assuming the PKI used is not\n   compromised, ensures steps
    2, 4, and 5, as detailed in the following\n   sections:\n   o  \"Assurance of
    Proper Database\" (Section 10.1)\n   o  \"Protection against Modification\" (Section
    10.2)\n   o  \"Protection against Eavesdropping\" (Section 10.3)\n   Any specification
    for an alternate transport MUST define mechanisms\n   that ensure each of these
    steps.\n   In addition to the privacy risks described above, information\n   provided
    in DeviceDescriptor (Section 5.2) and DeviceOwner\n   (Section 5.5), along with
    device location, may allow a database\n   administrator to track the activity
    and location of a device and its\n   user over time.  Risks of secondary use of
    such tracking information,\n   including sharing with third parties, require out-of-band
    mitigation,\n   such as public statements or contractual terms.  Furthermore,
    while\n   it is understandable that regulators require DeviceOwner information\n
    \  for higher-power fixed white-space devices, for privacy concerns,\n   regulators
    should not require DeviceOwner information for mobile\n   devices.  Similarly,
    regulators should require, and implementations\n   should provide, device location
    at a level of granularity only as\n   precise as necessary to support accurate
    database responses.\n"
  - contents:
    - "10.1.  Assurance of Proper Database\n   This document assumes that the Database
      is contacted using a domain\n   name or an IP address.  Using HTTP over TLS,
      the Database\n   authenticates its identity, either as a domain name or IP address,
      to\n   the Master Device by presenting a certificate containing that\n   identifier
      as a \"subjectAltName\" (i.e., as a dNSName or IP address).\n   If the Master
      Device has external information as to the expected\n   identity or credentials
      of the proper Database (e.g., a certificate\n   fingerprint), checks of the
      subjectAltName MAY be omitted.  Note that\n   in order for the presented certificate
      to be valid at the client, the\n   client must be able to validate the certificate.
      \ In particular, the\n   validation path of the certificate must end in one
      of the client's\n   trust anchors, even if that trust anchor is the Database's\n
      \  certificate.  A Master Device should allow for the fact that a\n   Database
      can change its Certification Authorities (CAs) over time.\n"
    title: 10.1.  Assurance of Proper Database
  - contents:
    - "10.2.  Protection against Modification\n   To prevent a PAWS response message
      from being modified en route,\n   messages must be transmitted over an integrity-protected
      channel.\n   Using HTTP over TLS, the channel will be protected by appropriate\n
      \  cipher suites.\n"
    title: 10.2.  Protection against Modification
  - contents:
    - "10.3.  Protection against Eavesdropping\n   Using HTTP over TLS, messages protected
      by appropriate cipher suites\n   are also protected from eavesdropping or otherwise
      unrestricted\n   reading by unauthorized parties en route.\n"
    title: 10.3.  Protection against Eavesdropping
  - contents:
    - "10.4.  Client Authentication Considerations\n   Although the Database can inform
      a device of available spectrum it\n   can use, the Database cannot enforce that
      the Master Device uses only\n   (or any of) those frequencies.  Indeed, a malicious
      device can\n   operate without ever contacting a Database.  Note also that,
      whereas\n   a malicious device may send fraudulent SPECTRUM_USE_NOTIFY\n   (Section
      4.5.5) messages, in the regulatory domains that have\n   established rules,
      such notifications do not change the available-\n   spectrum answers, so no
      harm can result from such messages.\n   Consequently, client authentication
      is not required for the core PAWS\n   (although it may be required by specific
      regulatory domains).\n   Depending on a prior relationship between a Database
      and Master\n   Device, the Database MAY require client authentication.  TLS
      provides\n   client authentication, but there are some considerations:\n   o
      \ The Database must nominate acceptable CAs, and the Master Device\n      must
      have a certificate rooted at one of those CAs.\n   o  As indicated in Section
      3.2 of \"HTTP Over TLS\" [RFC2818], the TLS\n      client authentication procedure
      only determines that the device\n      has a certificate chain rooted in an
      appropriate CA (or a self-\n      signed certificate).  The Database would not
      know what the client\n      identity ought to be, unless it has some external
      source of\n      information.  Distribution and management of such information,\n
      \     including revocation lists, are outside the scope of this\n      document.\n
      \  o  Authentication schemes are secure only to the extent that secrets\n      or
      certificates are kept secure.  When there are a vast number of\n      deployed
      devices using PAWS, the possibility that device keys will\n      not leak becomes
      small.  Implementations should consider how to\n      manage the system in the
      eventuality that there is a leak.\n"
    title: 10.4.  Client Authentication Considerations
  title: 10.  Security Considerations
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [JSON-RPC]\n              \"JSON-RPC 2.0 Specification\",\n
      \             <http://www.jsonrpc.org/specification>.\n   [RFC2119]  Bradner,
      S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\",
      BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC2818]  Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n              DOI
      10.17487/RFC2818, May 2000,\n              <http://www.rfc-editor.org/info/rfc2818>.\n
      \  [RFC3339]  Klyne, G. and C. Newman, \"Date and Time on the Internet:\n              Timestamps\",
      RFC 3339, DOI 10.17487/RFC3339, July 2002,\n              <http://www.rfc-editor.org/info/rfc3339>.\n
      \  [RFC5077]  Salowey, J., Zhou, H., Eronen, P., and H. Tschofenig,\n              \"Transport
      Layer Security (TLS) Session Resumption without\n              Server-Side State\",
      RFC 5077, DOI 10.17487/RFC5077,\n              January 2008, <http://www.rfc-editor.org/info/rfc5077>.\n
      \  [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226,
      May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC5234]
      \ Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:
      ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234, January 2008,\n
      \             <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5246]  Dierks,
      T. and E. Rescorla, \"The Transport Layer Security\n              (TLS) Protocol
      Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August 2008,\n
      \             <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5491]  Winterbottom,
      J., Thomson, M., and H. Tschofenig, \"GEOPRIV\n              Presence Information
      Data Format Location Object (PIDF-LO)\n              Usage Clarification, Considerations,
      and Recommendations\",\n              RFC 5491, DOI 10.17487/RFC5491, March
      2009,\n              <http://www.rfc-editor.org/info/rfc5491>.\n   [RFC6350]
      \ Perreault, S., \"vCard Format Specification\", RFC 6350,\n              DOI
      10.17487/RFC6350, August 2011,\n              <http://www.rfc-editor.org/info/rfc6350>.\n
      \  [RFC7095]  Kewisch, P., \"jCard: The JSON Format for vCard\", RFC 7095,\n
      \             DOI 10.17487/RFC7095, January 2014,\n              <http://www.rfc-editor.org/info/rfc7095>.\n
      \  [RFC7159]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n
      \             Interchange Format\", RFC 7159, DOI 10.17487/RFC7159, March\n
      \             2014, <http://www.rfc-editor.org/info/rfc7159>.\n   [RFC7231]
      \ Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol
      (HTTP/1.1): Semantics and Content\", RFC 7231,\n              DOI 10.17487/RFC7231,
      June 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n   [RFC7525]
      \ Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations
      for Secure Use of Transport Layer\n              Security (TLS) and Datagram
      Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,
      May\n              2015, <http://www.rfc-editor.org/info/rfc7525>.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [ETSI-EN-301-598]\n              European
      Telecommunication Standards Institute (ETSI),\n              \"ETSI EN 301 598
      (V1.1.1): White Space Devices (WSD);\n              Wireless Access Systems
      operating in the 470 MHz to 790\n              MHz TV broadcast band; Harmonized
      EN covering the\n              essential requirements of article 3.2 of the
      R&TTE\n              Directive\", April 2014, <http://www.etsi.org/deliver/\n
      \             etsi_en/301500_301599/301598/01.01.01_60/\n              en_301598v010101p.pdf>.\n
      \  [FCC-CFR47-15H]\n              U. S. Government, \"Electronic Code of Federal
      Regulations,\n              Title 47, Part 15, Subpart H: Television Band Devices\",\n
      \             December 2010, <http://www.ecfr.gov/cgi-bin/\n              text-idx?rgn=div6&view=text&node=47:1.0.1.1.16.8>.\n
      \  [FCC-Review-2012-10]\n              Federal Communications Commission, \"Administration
      Topics\n              Review\", October 2012,\n              <http://transition.fcc.gov/bureaus/oet/ea/presentations/\n
      \             files/oct12/2b-TCB-Admin-Issues-Oct-2012-GT.pdf>.\n   [ISO3166-1]\n
      \             \"Country Codes\",\n              <http://www.iso.org/iso/country_codes.htm>.\n
      \  [RFC6953]  Mancuso, A., Ed., Probasco, S., and B. Patil, \"Protocol to\n
      \             Access White-Space (PAWS) Databases: Use Cases and\n              Requirements\",
      RFC 6953, DOI 10.17487/RFC6953, May 2013,\n              <http://www.rfc-editor.org/info/rfc6953>.\n
      \  [RFC7459]  Thomson, M. and J. Winterbottom, \"Representation of\n              Uncertainty
      and Confidence in the Presence Information\n              Data Format Location
      Object (PIDF-LO)\", RFC 7459,\n              DOI 10.17487/RFC7459, February
      2015,\n              <http://www.rfc-editor.org/info/rfc7459>.\n   [WGS-84]
      \  National Imagery and Mapping Agency, \"Department of\n              Defense
      World Geodetic System 1984, Its Definition and\n              Relationships
      with Local Geodetic Systems\", NIMA TR8350.2,\n              Third Edition,
      Amendment 1, January 2000,\n              <http://earth-info.nga.mil/GandG/publications/tr8350.2/\n
      \             tr8350_2.html>.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Appendix A.  Database Listing Server Support\n   As discussed in \"Database Discovery\"
    (Section 4.1), some regulatory\n   domains support the preconfiguration of devices
    with the URI of a\n   listing server, to which devices can connect to obtain a
    list of\n   Databases certified by the regulatory domain.  Regulatory domains
    may\n   require the device to periodically contact the Database Listing\n   Server
    to validate and/or update its list of certified Databases.  If\n   the device
    is unable to validate its list of certified Databases\n   within the required
    period, regulatory rules may require the device\n   to treat this inability as
    equivalent to the device having no\n   available spectrum.\n   A sample JSON response
    from a Database Listing Server might be\n   represented as follows:\n   {\n     \"lastUpdateTime\":
    \"2014-06-28T10:00:00Z\",\n     \"maxRefreshMinutes\": 1440\n     \"dbs\": [\n
    \      {\n         \"name\": \"Some Operator\",\n         \"uris\": [\n           {\n
    \            \"uri\": \"https://example.some.operator.com\",\n             \"protocol\":
    \"paws\"\n           },\n           ...\n         ]\n       },\n       ...\n     ]\n
    \  }\n   The parameters in this sample message are:\n   lastUpdateTime:  The time
    at which the database entries were last\n      updated.\n   maxRefreshMinutes:
    \ The maximum interval, expressed in minutes, that\n      is allowed between device
    requests to the Database Listing Server.\n   dbs:  A list of entries for certified
    Databases, each containing the\n      following\n      name:  The name of the
    database operator.\n      uris:  One or more URIs for each Database, allowing
    a Database to\n         support more than one protocol.\n      uri, protocol:
    \ Each protocol supported by a certified Database is\n         associated with
    a separate URI (PAWS protocol URI shown).\n"
  title: Appendix A.  Database Listing Server Support
- contents:
  - "Acknowledgments\n   The authors gratefully acknowledge the contributions of:
    Gabor Bajko,\n   Ray Bellis, Teco Boot, Nancy Bravin, Rex Buddenberg, Gerald\n
    \  Chouinard, Stephen Farrell, Michael Fitch, Joel M. Halpern, Daniel\n   Harasty,
    Michael Head, Jussi Kahtava, Kalle Kulsmanen, Warren Kumari,\n   Paul Lambert,
    Andy Lee, Anthony Mancuso, Basavaraj Patil, Scott\n   Probasco, Brian Rosen, Andy
    Sago, Peter Stanforth, John Stine, and\n   Juan Carlos Zuniga.\n"
  title: Acknowledgments
- contents:
  - "Contributors\n   This document draws heavily from draft-das-paws-protocol and\n
    \  draft-wei-paws-framework.  The editor would like to specifically call\n   out
    and thank the contributing authors of those two documents.\n      Donald Joslyn\n
    \     Spectrum Bridge Inc.\n      1064 Greenwood Blvd.\n      Lake Mary, FL  32746\n
    \     United States\n      EMail: d.joslyn@spectrumbridge.com\n      Xinpeng Wei\n
    \     Huawei\n      Phone: +86 13436822355\n      EMail: weixinpeng@huawei.com\n"
  title: Contributors
- contents:
  - "Authors' Addresses\n   Vincent Chen (editor)\n   Google\n   1600 Amphitheatre
    Parkway\n   Mountain View, CA  94043\n   United States\n   EMail: vchen@google.com\n
    \  Subir Das\n   Applied Communication Sciences\n   150 Mount Airy Road\n   Basking
    Ridge, NJ  07920\n   United States\n   EMail: sdas@appcomsci.com\n   Lei Zhu\n
    \  Huawei\n   Phone: +86 13910157020\n   EMail: lei.zhu@huawei.com\n   John Malyar\n
    \  iconectiv (formerly Telcordia Interconnection Solutions)\n   444 Hoes Lane/RRC
    4E1106\n   Piscataway, NJ  08854\n   United States\n   EMail: jmalyar@iconectiv.com\n
    \  Peter J. McCann\n   Huawei\n   400 Crossing Blvd, 2nd Floor\n   Bridgewater,
    NJ  08807\n   United States\n   Phone: +1 908 541 3563\n   EMail: peter.mccann@huawei.com\n"
  title: Authors' Addresses
