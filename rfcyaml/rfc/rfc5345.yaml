- title: __initial_text__
  contents:
  - "               Simple Network Management Protocol (SNMP)\n            Traffic\
    \ Measurements and Trace Exchange Formats\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The IESG thinks that this work is related to IETF work done in\
    \ the\n   Operations and Management Area related to SNMP, but this does not\n\
    \   prevent publishing.  This RFC is not a candidate for any level of\n   Internet\
    \ Standard.  The IETF disclaims any knowledge of the fitness\n   of this RFC for\
    \ any purpose and notes that the decision to publish is\n   not based on IETF\
    \ review apart from the IETF Last Call on the\n   allocation of a URI by IANA\
    \ and the IESG review for conflict with\n   IETF work.  The RFC Editor has chosen\
    \ to publish this document at its\n   discretion.  See RFC 3932 for more information.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Simple Network Management Protocol (SNMP) is widely deployed\
    \ to\n   monitor, control, and (sometimes also) configure network elements.\n\
    \   Even though the SNMP technology is well documented, it remains\n   relatively\
    \ unclear how SNMP is used in practice and what typical SNMP\n   usage patterns\
    \ are.\n   This document describes an approach to carrying out large-scale SNMP\n\
    \   traffic measurements in order to develop a better understanding of\n   how\
    \ SNMP is used in real-world production networks.  It describes the\n   motivation,\
    \ the measurement approach, and the tools and data formats\n   needed to carry\
    \ out such a study.\n   This document was produced within the IRTF's Network Management\n\
    \   Research Group (NMRG), and it represents the consensus of all of the\n   active\
    \ contributors to this group.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Measurement Approach ............................................4\n  \
    \    2.1. Capturing Traffic Traces ...................................5\n    \
    \  2.2. Converting Traffic Traces ..................................6\n      2.3.\
    \ Filtering Traffic Traces ...................................7\n      2.4. Storing\
    \ Traffic Traces .....................................7\n      2.5. Analyzing\
    \ Traffic Traces ...................................8\n   3. Analysis of Traffic\
    \ Traces ......................................9\n      3.1. Basic Statistics\
    \ ...........................................9\n      3.2. Periodic versus Aperiodic\
    \ Traffic ..........................9\n      3.3. Message Size and Latency Distributions\
    \ .....................9\n      3.4. Concurrency Levels ........................................10\n\
    \      3.5. Table Retrieval Approaches ................................10\n  \
    \    3.6. Trap-Directed Polling - Myths or Reality? .................10\n    \
    \  3.7. Popular MIB Definitions ...................................11\n      3.8.\
    \ Usage of Obsolete Objects .................................11\n      3.9. Encoding\
    \ Length Distributions .............................11\n      3.10. Counters and\
    \ Discontinuities .............................11\n      3.11. Spin Locks ...............................................12\n\
    \      3.12. Row Creation .............................................12\n  \
    \ 4. Trace Exchange Formats .........................................12\n    \
    \  4.1. XML Representation ........................................12\n      4.2.\
    \ CSV Representation ........................................17\n   5. Security\
    \ Considerations ........................................18\n   6. IANA Considerations\
    \ ............................................19\n   7. Acknowledgements ...............................................19\n\
    \   8. References .....................................................20\n  \
    \    8.1. Normative References ......................................20\n    \
    \  8.2. Informative References ....................................20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Simple Network Management Protocol (SNMP) was introduced\
    \ in the\n   late 1980s [RFC1052] and has since then evolved to what is known\n\
    \   today as the SNMP version 3 Framework (SNMPv3) [RFC3410].  While SNMP\n  \
    \ is widely deployed, it is not clear what protocol versions are being\n   used,\
    \ which protocol features are being used, how SNMP usage differs\n   in different\
    \ types of networks or organizations, which information is\n   frequently queried,\
    \ and what typical SNMP interaction patterns occur\n   in real-world production\
    \ networks.\n   There have been several publications in the recent past dealing\
    \ with\n   the performance of SNMP in general [SM99][Mal02][Pat01], the impact\n\
    \   of SNMPv3 security [DSR01][CT04], or the relative performance of SNMP\n  \
    \ compared to Web Services [PDMQ04][PFGL04].  While these papers are\n   generally\
    \ useful to better understand the impact of various design\n   decisions and technologies,\
    \ some of these papers lack a strong\n   foundation because authors typically\
    \ assume certain SNMP interaction\n   patterns without having experimental evidence\
    \ that the assumptions\n   are correct.  In fact, there are many speculations\
    \ on how SNMP is\n   being used in real-world production networks, and performance\n\
    \   comparisons are based on limited test cases, but no systematic\n   measurements\
    \ have been performed and published so far.\n   Many authors use the ifTable of\
    \ the IF-MIB [RFC2863] or the\n   tcpConnTable of the TCP-MIB [RFC4022] as a starting\
    \ point for their\n   analysis and comparison.  Despite the fact that there is\
    \ no evidence\n   that operations on these tables dominate SNMP traffic, it is\
    \ even\n   more unclear how these tables are read and which optimizations are\n\
    \   done (or not done) by real-world applications.  It is also unclear\n   what\
    \ the actual traffic trade-off between periodic polling and more\n   aperiodic\
    \ bulk data retrieval is.  Furthermore, we do not generally\n   understand how\
    \ much traffic is devoted to standardized MIB objects\n   and how much traffic\
    \ deals with proprietary MIB objects and whether\n   the operation mix between\
    \ these object classes differs between\n   different operational environments\
    \ (e.g., backbone networks, access\n   networks, enterprise networks).\n   This\
    \ document recommends an approach to collecting, codifying, and\n   handling SNMP\
    \ traffic traces in order to find answers to some of\n   these questions.  It\
    \ describes the tools that have been developed to\n   allow network operators\
    \ to collect traffic traces and to share them\n   with research groups interested\
    \ in analyzing and modeling network\n   management interactions.\n   While the\
    \ SNMP trace collection and analysis effort was initiated by\n   the research\
    \ community, network operators can benefit from the SNMP\n   measurements too.\
    \  Several new tools are being developed as part of\n   this effort that can be\
    \ used to capture and analyze the traffic\n   generated by management stations.\
    \  This resulting information can\n   then be used to improve the efficiency and\
    \ scalability of management\n   systems.\n   The measurement approach described\
    \ in this document is by design\n   limited to the study of SNMP traffic.  Studies\
    \ of other management\n   protocols or the impact of management protocols such\
    \ as SNMP on other\n   traffic sharing the same network resources is left to future\
    \ efforts.\n   This is an Informational document, produced within the IRTF's Network\n\
    \   Management Research Group (NMRG), and it represents the consensus of\n   all\
    \ of the active contributors to this group.\n"
- title: 2.  Measurement Approach
  contents:
  - "2.  Measurement Approach\n   This section outlines the process of doing SNMP\
    \ traffic measurements\n   and analysis.  The process consists of the following\
    \ five basic\n   steps:\n   1.  Capture raw SNMP traffic traces in pcap packet\
    \ capture files [1].\n   2.  Convert the raw traffic traces into a structured\
    \ machine and\n       human-readable format.  A suitable XML schema has been developed\n\
    \       for this purpose that captures all SNMP message details.  Another\n  \
    \     more compact comma-separated values (CSV) format has been\n       developed\
    \ that only keeps key information about SNMP messages.\n   3.  Filter the converted\
    \ traffic traces to hide or anonymize\n       sensitive information.  While the\
    \ filtering is conceptually a\n       separate step, filtering may actually be\
    \ implemented as part of\n       the previous data conversion step for efficiency\
    \ reasons.\n   4.  Submit the filtered traffic traces to a repository from which\n\
    \       they can be retrieved and analyzed.  Such a repository may be\n      \
    \ public, under the control of a research group, or under the\n       control\
    \ of a network operator who commits to run analysis scripts\n       on the repository\
    \ on behalf of researchers.\n   5.  Analyze the traces by creating and executing\
    \ analysis scripts\n       that extract and aggregate information.\n   Several\
    \ of the steps listed above require the involvement of network\n   operators supporting\
    \ the SNMP measurement projects.  In many cases,\n   the filtered XML and CSV\
    \ representation of the SNMP traces will be\n   the interface between the researchers\
    \ writing analysis scripts and\n   the operators involved in the measurement activity.\
    \  It is therefore\n   important to have a well-defined specification of these\
    \ interfaces.\n   This section provides some advice and concrete hints on how\
    \ the steps\n   listed above can be carried out efficiently.  Some special tools\
    \ have\n   been developed to assist network operators and researchers so that\n\
    \   the time spent on supporting SNMP traffic measurement projects is\n   limited.\
    \  The following sections describe the five steps and some\n   tools in more detail.\n"
- title: 2.1.  Capturing Traffic Traces
  contents:
  - "2.1.  Capturing Traffic Traces\n   Capturing SNMP traffic traces can be done\
    \ using packet sniffers such\n   as tcpdump [2], wireshark [3], or similar applications.\
    \  Some care\n   must be taken to specify pcap filter expressions that match the\
    \ SNMP\n   transport endpoints used to carry SNMP traffic (typically 'udp and\n\
    \   (port 161 or port 162)').  Furthermore, it is necessary to ensure\n   that\
    \ full packets are captured, that is packets are not truncated\n   (tcpdump option\
    \ -s 0).  Finally, it is necessary to carefully select\n   the placement of the\
    \ capturing probe within the network.  Especially\n   on bridged LANs, it is important\
    \ to ensure that all management\n   traffic is captured and that the probe has\
    \ access to all virtual LANs\n   carrying management traffic.  This usually requires\
    \ placing the\n   probe(s) close to the management system(s) and configuring dedicated\n\
    \   monitoring ports on bridged networks.  Some bridges have restrictions\n  \
    \ concerning their monitoring capabilities, and this should be\n   investigated\
    \ and documented where necessary.\n   It is recommended to capture at least a\
    \ full week of data to capture\n   diurnal patterns and one cycle of weekly behavior.\
    \  Operators are\n   strongly encouraged to capture traces over even longer periods\
    \ of\n   time.  Tools such as tcpdump and tcpslice [2] or mergecap and\n   editcap\
    \ [3] can be used to split or merge pcap trace files as needed.\n   Several operating\
    \ systems can offload some of the TCP/IP processing\n   such as the calculation\
    \ of transport layer checksum to network\n   interface cards.  Traces that include\
    \ traffic to/from a capturing\n   interface that supports TCP/IP offloading can\
    \ include incorrect\n   transport layer checksums.  The simplest solution is of\
    \ course to\n   turn checksum offloading off while capturing traces (if that is\n\
    \   feasible without losing too many packets).  The other solution is to\n   correct\
    \ or ignore checksums during the subsequent conversion of the\n   raw pcap files.\n\
    \   It is important to note that the raw pcap files should ideally be\n   kept\
    \ in permanent storage (e.g., compressed and encrypted on a CD ROM\n   or DVD).\
    \  To verify measurements, it might be necessary to go back to\n   the original\
    \ pcap files if, for example, bugs in the tools described\n   below have been\
    \ detected and fixed.\n   For each captured trace, some meta data should be recorded\
    \ and made\n   available.  The meta data should include information such as where\n\
    \   the trace was collected (name of the network and name of the\n   organization\
    \ owning the network, description of the measurement point\n   in the network\
    \ topology where the trace was collected), when it was\n   collected, contact\
    \ information, the size of the trace, any known\n   special events, equipment\
    \ failures, or major infrastructure changes\n   during the data collection period\
    \ and so on.  It is also extremely\n   useful to provide a unique identification.\
    \  There are special online\n   services such as DatCat [4] where meta data can\
    \ be stored and which\n   provide unique identifiers.\n"
- title: 2.2.  Converting Traffic Traces
  contents:
  - "2.2.  Converting Traffic Traces\n   Raw traces in pcap format must be converted\
    \ into a format that is\n   human readable while also remaining machine readable\
    \ for efficient\n   post-processing.  Human readability makes it easy for an operator\
    \ to\n   verify that no sensitive data is left in a trace while machine\n   readability\
    \ is needed to efficiently extract relevant information.\n   The natural choice\
    \ here is to use an XML format since XML is human as\n   well as machine readable\
    \ and there are many tools and high-level\n   scripting language application programming\
    \ interfaces (APIs) that can\n   be used to process XML documents and to extract\
    \ meaningful\n   information.  However, XML is also pretty verbose, which increases\n\
    \   processing overhead.  In particular, the usage of XML streaming APIs\n   is\
    \ strongly suggested since APIs that require an in-memory\n   representation of\
    \ XML documents do not handle large traces well.\n   Section 4.1 of this document\
    \ defines a RELAX NG schema [OASISRNG] for\n   representing SNMP traffic traces\
    \ in XML.  The schema captures all\n   relevant details of an SNMP message in\
    \ the XML format.  Note that the\n   XML format retains some information about\
    \ the original ASN.1/BER\n   encoding to support message size analysis.\n   A\
    \ lightweight alternative to the full-blown XML representation based\n   on comma-separated\
    \ values (CSV) is defined in Section 4.2.  The CSV\n   format only captures selected\
    \ parts of SNMP messages and is thus more\n   compact and faster to process.\n\
    \   As explained in the previous sections, analysis programs that process\n  \
    \ raw pcap files should have an option to ignore incorrect checksums\n   caused\
    \ by TCP/IP offloading.  In addition, analysis programs that\n   process raw pcap\
    \ files should be able to perform IP reassembly for\n   SNMP messages that were\
    \ fragmented at the IP layer.\n   The snmpdump [5] package has been developed\
    \ to convert raw pcap files\n   into XML and CSV format.  The snmpdump program\
    \ reads pcap, XML, or\n   CSV files as input and produces XML files or CSV files\
    \ as output.\n   Specific elements can be filtered as required to protect sensitive\n\
    \   data.\n"
- title: 2.3.  Filtering Traffic Traces
  contents:
  - "2.3.  Filtering Traffic Traces\n   Filtering sensitive data (e.g., access control\
    \ lists or community\n   strings) can be achieved by manipulating the XML representation\
    \ of an\n   SNMP trace.  Standard XSLT processors (e.g., xsltproc [6]) can be\n\
    \   used for this purpose.  People familiar with the scripting language\n   Perl\
    \ might be interested in choosing a suitable Perl module to\n   manipulate XML\
    \ documents [7].\n   The snmpdump program, for example, can filter out sensitive\n\
    \   information, e.g., by deleting or clearing all XML elements whose\n   name\
    \ matches a regular expression.  Data type specific anonymization\n   transformations\
    \ that maintain lexicographic ordering for values that\n   appear in instance\
    \ identifiers [HS06] can be applied.  Note that\n   anonymization transformations\
    \ are often bound to an initialization\n   key and depend on the data being anonymized\
    \ in an anonymization run.\n   As a consequence, users must be careful when they\
    \ merge data from\n   independently anonymized traces.  More information about\
    \ network\n   traffic trace anonymization techniques can be found in [XFA02],\n\
    \   [FXAM04], [PAPL06], and [RW07].\n"
- title: 2.4.  Storing Traffic Traces
  contents:
  - "2.4.  Storing Traffic Traces\n   The raw pcap traces as well as the XML / CSV\
    \ formatted traces should\n   be stored in a stable archive or repository.  Such\
    \ an archive or\n   repository might be maintained by research groups (e.g., the\
    \ NMRG),\n   network operators, or both.  It is of key importance that captured\n\
    \   traces are not lost or modified as they may form the basis of future\n   research\
    \ projects and may also be needed to verify published research\n   results.  Access\
    \ to the archive might be restricted to those who have\n   signed some sort of\
    \ a non-disclosure agreement.\n   While this document recommends that raw traces\
    \ should be kept, it\n   must be noted that there are situations where this may\
    \ not be\n   feasible.  The recommendation to keep raw traces may be ignored,\
    \ for\n   example, to comply with data-protection laws or to protect a network\n\
    \   operator from being forced to provide the data to other\n   organizations.\n\
    \   Lossless compression algorithms embodied in programs such as gzip or\n   bzip2\
    \ can be used to compress even large trace files down to a size\n   where they\
    \ can be burned on DVDs for cheap long-term storage.\n   It must be stressed again\
    \ that it is important to keep the original\n   pcap traces in addition to the\
    \ XML/CSV formatted traces since the\n   pcap traces are the most authentic source\
    \ of information.\n   Improvements in the tool chain may require going back to\
    \ the original\n   pcap traces and rebuilding all intermediate formats from them.\n"
- title: 2.5.  Analyzing Traffic Traces
  contents:
  - "2.5.  Analyzing Traffic Traces\n   Scripts that analyze traffic traces must be\
    \ verified for correctness.\n   Ideally, all scripts used to analyze traffic traces\
    \ will be\n   publically accessible so that third parties can verify them.\n \
    \  Furthermore, sharing scripts will enable other parties to repeat an\n   analysis\
    \ on other traffic traces and to extend such analysis scripts.\n   It might be\
    \ useful to establish a common, versioning repository for\n   analysis scripts.\n\
    \   Due to the availability of XML parsers and the simplicity of the CSV\n   format,\
    \ trace files can be processed with tools written in almost any\n   programming\
    \ language.  However, in order to facilitate a common\n   vocabulary and to allow\
    \ operators to easily read scripts they execute\n   on trace files, it is suggested\
    \ that analysis scripts be written in\n   scripting languages such as Perl using\
    \ suitable Perl modules to\n   manipulate XML documents <http://perl-xml.sourceforge.net/faq/>.\n\
    \   Using a scripting language such as Perl instead of system programming\n  \
    \ languages such as C or C++ has the advantage of reducing development\n   time\
    \ and making scripts more accessible to operators who may want to\n   verify scripts\
    \ before running them on trace files that may contain\n   sensitive data.\n  \
    \ The snmpdump tool provides an API to process SNMP messages in C/C++.\n   While\
    \ the coding of trace analysis programs in C/C++ should in\n   general be avoided\
    \ for code readability, verifiability, and\n   portability reasons, using C/C++\
    \ might be the only option in dealing\n   with very large traces efficiently.\n\
    \   Any results produced by analyzing a trace must be interpreted in the\n   context\
    \ of the trace.  The nature of the network, the attachment\n   point used to collect\
    \ the trace, the nature of the applications\n   generating SNMP traffic, or the\
    \ events that happened while the trace\n   was collected clearly influence the\
    \ result.  It is therefore\n   important to be careful when drawing general conclusions\
    \ based on a\n   potentially (too) limited data set.\n"
- title: 3.  Analysis of Traffic Traces
  contents:
  - "3.  Analysis of Traffic Traces\n   This section discusses several questions that\
    \ can be answered by\n   analyzing SNMP traffic traces.  The questions raised\
    \ in the following\n   subsections are meant to be illustrative and no attempt\
    \ has been made\n   to provide a complete list.\n"
- title: 3.1.  Basic Statistics
  contents:
  - "3.1.  Basic Statistics\n   Basic statistics cover things such as:\n   o  protocol\
    \ version used,\n   o  protocol operations used,\n   o  message size distribution,\n\
    \   o  error message type frequency, or\n   o  usage of authentication and encryption\
    \ mechanisms.\n   The Object Identifier (OID) names of the objects manipulated\
    \ can be\n   categorized into OID subtrees, for example, to identify\n   'standardized',\
    \ 'proprietary', and 'experimental' objects.\n"
- title: 3.2.  Periodic versus Aperiodic Traffic
  contents:
  - "3.2.  Periodic versus Aperiodic Traffic\n   SNMP is used to periodically poll\
    \ devices as well as to retrieve\n   information at the request of an operator\
    \ or application.  The\n   periodic polling leads to periodic traffic patterns\
    \ while on-demand\n   information retrieval causes more aperiodic traffic patterns.\
    \  It is\n   worthwhile to understand what the relationship is between the amount\n\
    \   of periodic and aperiodic traffic.  It will be interesting to\n   understand\
    \ whether there are multiple levels of periodicity at\n   different time scales.\n\
    \   Periodic polling behavior may be dependent on the application and\n   polling\
    \ engine it uses.  For example, some management platforms allow\n   applications\
    \ to specify how long polled values may be kept in a cache\n   before they are\
    \ polled again.  Such optimizations need to be\n   considered when analyzing traces\
    \ for periodic and aperiodic traffic.\n"
- title: 3.3.  Message Size and Latency Distributions
  contents:
  - "3.3.  Message Size and Latency Distributions\n   SNMP messages are size constrained\
    \ by the transport mappings used and\n   the buffers provided by the SNMP engines.\
    \  For the further evolution\n   of the SNMP framework, it would be useful to\
    \ know what the actual\n   message size distributions are.  It would be useful\
    \ to understand the\n   latency distributions, especially the distribution of\
    \ the processing\n   times by SNMP command responders.  Some SNMP implementations\n\
    \   approximate networking delays by measuring request-response times,\n   and\
    \ it would be useful to understand to what extent this is a viable\n   approach.\n\
    \   Some SNMP implementations update their counters from the underlying\n   instrumentation\
    \ following adaptive algorithms, not necessarily\n   periodically, and not necessarily\
    \ on-demand.  The granularity of\n   internal counter updates may impact latency\
    \ measurements and should\n   be taken into account.\n"
- title: 3.4.  Concurrency Levels
  contents:
  - "3.4.  Concurrency Levels\n   SNMP allows management stations to retrieve information\
    \ from multiple\n   agents concurrently.  It will be interesting to identify what\
    \ the\n   typical concurrency level is that can be observed on production\n  \
    \ networks or whether management applications prefer more sequential\n   ways\
    \ of retrieving data.\n   Furthermore, it will be interesting to analyze how many\
    \ redundant\n   requests coming from applications are processed almost simultaneously\n\
    \   by a device.  The concurrency level and the amount of redundant\n   requests\
    \ has implications on caching strategies employed by SNMP\n   agents.\n"
- title: 3.5.  Table Retrieval Approaches
  contents:
  - "3.5.  Table Retrieval Approaches\n   Tables can be read in several different\
    \ ways.  The simplest and most\n   inefficient approach is to retrieve tables\
    \ object-by-object in\n   column-by-column order.  More advanced approaches try\
    \ to read tables\n   row-by-row or even multiple-rows-by-multiple-rows.  The retrieval\
    \ of\n   index elements can be suppressed in most cases or only a subset of\n\
    \   columns of a table are retrieved.  It will be useful to know which of\n  \
    \ these approaches are used on production networks since this has a\n   direct\
    \ implication on agent implementation techniques and caching\n   strategies.\n"
- title: 3.6.  Trap-Directed Polling - Myths or Reality?
  contents:
  - "3.6.  Trap-Directed Polling - Myths or Reality?\n   SNMP is built around a concept\
    \ called trap-directed polling.\n   Management applications are responsible to\
    \ periodically poll SNMP\n   agents to determine their status.  In addition, SNMP\
    \ agents can send\n   traps to notify SNMP managers about events so that SNMP\
    \ managers can\n   adapt their polling strategy and basically react faster than\
    \ normal\n   polling would allow.\n   Analysis of SNMP traffic traces can identify\
    \ whether trap-directed\n   polling is actually deployed.  In particular, the\
    \ question that\n   should be addressed is whether SNMP notifications lead to\
    \ changes in\n   the short-term polling behavior of management stations.  In\n\
    \   particular, it should be investigated to what extent SNMP managers\n   use\
    \ automated procedures to track down the meaning of the event\n   conveyed by\
    \ an SNMP notification.\n"
- title: 3.7.  Popular MIB Definitions
  contents:
  - "3.7.  Popular MIB Definitions\n   An analysis of object identifier prefixes can\
    \ identify the most\n   popular MIB modules and the most important object types\
    \ or\n   notification types defined by these modules.  Such information would\n\
    \   be very valuable for the further maintenance and development of these\n  \
    \ and related MIB modules.\n"
- title: 3.8.  Usage of Obsolete Objects
  contents:
  - "3.8.  Usage of Obsolete Objects\n   Several objects from the early days have\
    \ been obsoleted because they\n   cannot properly represent today's networks.\
    \  A typical example is the\n   ipRouteTable that was obsoleted because it was\
    \ not able to represent\n   classless routing, introduced and deployed on the\
    \ Internet in 1993.\n   Some of these obsolete objects are still mentioned in\
    \ popular\n   publications as well as research papers.  It will be interesting\
    \ to\n   find out whether they are also still used by management applications\n\
    \   or whether management applications have been updated to use the\n   replacement\
    \ objects.\n   Depending on the data recorded in a trace, it might be possible\
    \ to\n   determine the age of devices by looking at the values of objects such\n\
    \   as sysObjectID and sysDecr [RFC3418].  The age of a device can then\n   be\
    \ taken into consideration when analyzing the use of obsolete and\n   deprecated\
    \ objects.\n"
- title: 3.9.  Encoding Length Distributions
  contents:
  - "3.9.  Encoding Length Distributions\n   It will be useful to understand the encoding\
    \ length distributions for\n   various data types.  Assumptions about encoding\
    \ length distributions\n   are sometimes used to estimate SNMP message sizes in\
    \ order to meet\n   transport and buffer size constraints.\n"
- title: 3.10.  Counters and Discontinuities
  contents:
  - "3.10.  Counters and Discontinuities\n   Counters can experience discontinuities\
    \ [RFC2578].  A widely used\n   discontinuity indicator is the sysUpTime scalar\
    \ of the SNMPv2-MIB\n   [RFC3418], which can be reset through a warm start to\
    \ indicate\n   counter discontinuities.  Some MIB modules introduce more specific\n\
    \   discontinuity indicators, e.g., the ifCounterDiscontinuityTime of the\n  \
    \ IF-MIB [RFC2863].  It will be interesting to study to what extent\n   these\
    \ objects are actually used by management applications to handle\n   discontinuity\
    \ events.\n"
- title: 3.11.  Spin Locks
  contents:
  - "3.11.  Spin Locks\n   Cooperating command generators can use advisory locks to\
    \ coordinate\n   their usage of SNMP write operations.  The snmpSetSerialNo scalar\
    \ of\n   the SNMPv2-MIB [RFC3418] is the default coarse-grain coordination\n \
    \  object.  It will be interesting to find out whether there are command\n   generators\
    \ that coordinate themselves using these spin locks.\n"
- title: 3.12.  Row Creation
  contents:
  - "3.12.  Row Creation\n   Row creation is an operation not natively supported by\
    \ the protocol\n   operations.  Instead, conceptual tables supporting row creation\n\
    \   typically provide a control column that uses the RowStatus textual\n   convention\
    \ defined in the SNMPv2-TC [RFC2579] module.  The RowStatus\n   itself supports\
    \ different row creation modes, namely createAndWait\n   (dribble-mode) and createAndGo\
    \ (one-shot mode).  Different approaches\n   can be used to derive the instance\
    \ identifier if it does not have\n   special semantics associated with it.  It\
    \ will be useful to study\n   which of the various row creation approaches are\
    \ actually used by\n   management applications on production networks.\n"
- title: 4.  Trace Exchange Formats
  contents:
  - '4.  Trace Exchange Formats

    '
- title: 4.1.  XML Representation
  contents:
  - "4.1.  XML Representation\n   The XML format has been designed to keep all information\
    \ associated\n   with SNMP messages.  The format is specified in RELAX NG compact\n\
    \   notation [OASISRNC].  Freely available tools such as trang [8] can be\n  \
    \ used to convert RELAX NG compact syntax to other XML schema\n   notations.\n\
    \   The XML format can represent SNMPv1, SNMPv2c, and SNMPv3 messages.\n   In\
    \ case a new version of SNMP is introduced in the future or existing\n   SNMP\
    \ versions are extended in ways that require changes to the XML\n   format, a\
    \ new XML format with a different namespace needs to be\n   defined (e.g., by\
    \ incrementing the version number included in the\n   namespace URI).\n"
- title: '# Relax NG grammar for the XML SNMP trace format.'
  contents:
  - '# Relax NG grammar for the XML SNMP trace format.

    '
- title: '#'
  contents:
  - '#

    '
- title: '# Published as part of RFC 5345.'
  contents:
  - '# Published as part of RFC 5345.

    '
- title: default namespace = "urn:ietf:params:xml:ns:snmp-trace-1.0"
  contents:
  - 'default namespace = "urn:ietf:params:xml:ns:snmp-trace-1.0"

    '
- title: start =
  contents:
  - "start =\n  element snmptrace {\n    packet.elem*\n  }\n"
- title: packet.elem =
  contents:
  - "packet.elem =\n  element packet {\n    element time-sec  { xsd:unsignedInt },\n\
    \    element time-usec { xsd:unsignedInt },\n    element src-ip    { ipaddress.type\
    \ },\n    element src-port  { xsd:unsignedInt },\n    element dst-ip    { ipaddress.type\
    \ },\n    element dst-port  { xsd:unsignedInt },\n    snmp.elem\n  }\n"
- title: snmp.elem =
  contents:
  - "snmp.elem =\n  element snmp {\n    length.attrs?,\n    message.elem\n  }\n"
- title: message.elem =
  contents:
  - "message.elem =\n  element version   { length.attrs, xsd:int },\n  element community\
    \ { length.attrs, xsd:hexBinary },\n  pdu.elem\n"
- title: message.elem |=
  contents:
  - "message.elem |=\n  element version { length.attrs, xsd:int },\n  element message\
    \ {\n    length.attrs,\n    element msg-id         { length.attrs, xsd:unsignedInt\
    \ },\n    element max-size       { length.attrs, xsd:unsignedInt },\n    element\
    \ flags          { length.attrs, xsd:hexBinary },\n    element security-model\
    \ { length.attrs, xsd:unsignedInt }\n  },\n  usm.elem?,\n  element scoped-pdu\
    \ {\n    length.attrs,\n    element context-engine-id { length.attrs, xsd:hexBinary\
    \ },\n    element context-name      { length.attrs, xsd:string },\n    pdu.elem\n\
    \  }\n"
- title: usm.elem =
  contents:
  - "usm.elem =\n  element usm {\n    length.attrs,\n    element auth-engine-id  \
    \  { length.attrs, xsd:hexBinary },\n    element auth-engine-boots { length.attrs,\
    \ xsd:unsignedInt },\n    element auth-engine-time  { length.attrs, xsd:unsignedInt\
    \ },\n    element user              { length.attrs, xsd:hexBinary },\n    element\
    \ auth-params       { length.attrs, xsd:hexBinary },\n    element priv-params\
    \       { length.attrs, xsd:hexBinary }\n  }\n"
- title: pdu.elem =
  contents:
  - "pdu.elem =\n  element trap {\n    length.attrs,\n    element enterprise     \
    \   { length.attrs, oid.type },\n    element agent-addr        { length.attrs,\
    \ ipv4address.type },\n    element generic-trap      { length.attrs, xsd:int },\n\
    \    element specific-trap     { length.attrs, xsd:int },\n    element time-stamp\
    \        { length.attrs, xsd:int },\n    element variable-bindings { length.attrs,\
    \ varbind.elem* }\n  }\n"
- title: pdu.elem |=
  contents:
  - "pdu.elem |=\n  element (get-request | get-next-request | get-bulk-request |\n\
    \           set-request | inform-request | snmpV2-trap |\n           response\
    \ | report) {\n    length.attrs,\n    element request-id        { length.attrs,\
    \ xsd:int },\n    element error-status      { length.attrs, xsd:int },\n    element\
    \ error-index       { length.attrs, xsd:int },\n    element variable-bindings\
    \ { length.attrs, varbind.elem* }\n  }\n"
- title: varbind.elem =
  contents:
  - "varbind.elem =\n  element varbind { length.attrs, name.elem, value.elem }\n"
- title: name.elem =
  contents:
  - "name.elem =\n  element name { length.attrs, oid.type }\n"
- title: value.elem =
  contents:
  - "value.elem =\n  element null              { length.attrs, empty } |\n  element\
    \ integer32         { length.attrs, xsd:int } |\n  element unsigned32        {\
    \ length.attrs, xsd:unsignedInt } |\n  element counter32         { length.attrs,\
    \ xsd:unsignedInt } |\n  element counter64         { length.attrs, xsd:unsignedLong\
    \ } |\n  element timeticks         { length.attrs, xsd:unsignedInt } |\n  element\
    \ ipaddress         { length.attrs, ipv4address.type } |\n  element octet-string\
    \      { length.attrs, xsd:hexBinary } |\n  element object-identifier { length.attrs,\
    \ oid.type } |\n  element opaque            { length.attrs, xsd:hexBinary } |\n\
    \  element no-such-object    { length.attrs, empty } |\n  element no-such-instance\
    \  { length.attrs, empty } |\n  element end-of-mib-view   { length.attrs, empty\
    \ }\n"
- title: '# The blen attribute indicates the number of octets used by the BER'
  contents:
  - '# The blen attribute indicates the number of octets used by the BER

    '
- title: '# encoded tag / length / value triple.  The vlen attribute indicates'
  contents:
  - '# encoded tag / length / value triple.  The vlen attribute indicates

    '
- title: '# the number of octets used by the BER encoded value alone.'
  contents:
  - '# the number of octets used by the BER encoded value alone.

    '
- title: length.attrs =
  contents:
  - "length.attrs =\n  ( attribute blen { xsd:unsignedShort },\n    attribute vlen\
    \ { xsd:unsignedShort } )?\n"
- title: oid.type =
  contents:
  - "oid.type =\n  xsd:string {\n    pattern =\n      \"(([0-1](\\.[1-3]?[0-9]))|(2.(0|([1-9]\\\
    d*))))\" ~\n      \"(\\.(0|([1-9]\\d*))){0,126}\"\n  }\n"
- title: '# The types below are for IP addresses.  Note that SNMP''s buildin'
  contents:
  - '# The types below are for IP addresses.  Note that SNMP''s buildin

    '
- title: '# IpAddress type only supports IPv4 addresses; IPv6 addresses are only'
  contents:
  - '# IpAddress type only supports IPv4 addresses; IPv6 addresses are only

    '
- title: '# introduced to cover SNMP over IPv6 endpoints.'
  contents:
  - '# introduced to cover SNMP over IPv6 endpoints.

    '
- title: ipv4address.type =
  contents:
  - "ipv4address.type =\n  xsd:string {\n    pattern =\n      \"((0|(1[0-9]{0,2})\"\
    \ ~\n      \"|(2(([0-4][0-9]?)|(5[0-5]?)|([6-9]?)))|([3-9][0-9]?))\\.){3}\" ~\n\
    \      \"(0|(1[0-9]{0,2})\" ~\n      \"|(2(([0-4][0-9]?)|(5[0-5]?)|([6-9]?)))|([3-9][0-9]?))\"\
    \n  }\n"
- title: ipv6address.type =
  contents:
  - "ipv6address.type =\n  xsd:string {\n    pattern =\n      \"(([0-9a-fA-F]+:){7}[0-9a-fA-F]+)|\"\
    \ ~\n      \"(([0-9a-fA-F]+:)*[0-9a-fA-F]+)?::(([0-9a-fA-F]+:)*[0-9a-fA-F]+)?\"\
    \n  }\n"
- title: ipaddress.type = ipv4address.type | ipv6address.type
  contents:
  - "ipaddress.type = ipv4address.type | ipv6address.type\n   The following example\
    \ shows an SNMP trace file in XML format\n   containing an SNMPv1 get-next-request\
    \ message for the OID\n   1.3.6.1.2.1.1.3 (sysUpTime) and the response message\
    \ returned by the\n   agent.\n   <snmptrace xmlns=\"urn:ietf:params:xml:ns:snmp-trace-1.0\"\
    >\n     <packet>\n       <time-sec>1147212206</time-sec>\n       <time-usec>739609</time-usec>\n\
    \       <src-ip>192.0.2.1</src-ip>\n       <src-port>60371</src-port>\n      \
    \ <dst-ip>192.0.2.2</dst-ip>\n       <dst-port>12345</dst-port>\n       <snmp\
    \ blen=\"42\" vlen=\"40\">\n         <version blen=\"3\" vlen=\"1\">1</version>\n\
    \         <community blen=\"8\" vlen=\"6\">7075626c6963</community>\n        \
    \ <get-next-request blen=\"29\" vlen=\"27\">\n           <request-id blen=\"6\"\
    \ vlen=\"4\">1804289383</request-id>\n           <error-status blen=\"3\" vlen=\"\
    1\">0</error-status>\n           <error-index blen=\"3\" vlen=\"1\">0</error-index>\n\
    \           <variable-bindings blen=\"15\" vlen=\"13\">\n             <varbind\
    \ blen=\"13\" vlen=\"11\">\n               <name blen=\"9\" vlen=\"7\">1.3.6.1.2.1.1.3</name>\n\
    \               <null blen=\"2\" vlen=\"0\"/>\n             </varbind>\n     \
    \      </variable-bindings>\n         </get-next-request>\n       </snmp>\n  \
    \   </packet>\n     <packet>\n       <time-sec>1147212206</time-sec>\n       <time-usec>762891</time-usec>\n\
    \       <src-ip>192.0.2.2</src-ip>\n       <src-port>12345</src-port>\n      \
    \ <dst-ip>192.0.2.1</dst-ip>\n       <dst-port>60371</dst-port>\n       <snmp\
    \ blen=\"47\" vlen=\"45\">\n         <version blen=\"3\" vlen=\"1\">1</version>\n\
    \         <community blen=\"8\" vlen=\"6\">7075626c6963</community>\n        \
    \ <response blen=\"34\" vlen=\"32\">\n           <request-id blen=\"6\" vlen=\"\
    4\">1804289383</request-id>\n           <error-status blen=\"3\" vlen=\"1\">0</error-status>\n\
    \           <error-index blen=\"3\" vlen=\"1\">0</error-index>\n           <variable-bindings\
    \ blen=\"20\" vlen=\"18\">\n             <varbind blen=\"18\" vlen=\"16\">\n \
    \              <name blen=\"10\" vlen=\"8\">1.3.6.1.2.1.1.3.0</name>\n       \
    \        <unsigned32 blen=\"6\" vlen=\"4\">26842224</unsigned32>\n           \
    \  </varbind>\n           </variable-bindings>\n         </response>\n       </snmp>\n\
    \     </packet>\n   </snmptrace>\n"
- title: 4.2.  CSV Representation
  contents:
  - "4.2.  CSV Representation\n   The comma-separated values (CSV) format has been\
    \ designed to capture\n   only the most relevant information about an SNMP message.\
    \  In\n   situations where all information about an SNMP message must be\n   captured,\
    \ the XML format defined above must be used.  The CSV format\n   uses the following\
    \ fields:\n   1.   Timestamp in the format seconds.microseconds since 1970, for\n\
    \        example, \"1137764769.425484\".\n   2.   Source IP address in dotted\
    \ quad notation (IPv4), for example,\n        \"192.0.2.1\", or compact hexadecimal\
    \ notation (IPv6), for\n        example, \"2001:DB8::1\".\n   3.   Source port\
    \ number represented as a decimal number, for example,\n        \"4242\".\n  \
    \ 4.   Destination IP address in dotted quad notation (IPv4), for\n        example,\
    \ \"192.0.2.1\", or compact hexadecimal notation (IPv6),\n        for example,\
    \ \"2001:DB8::1\".\n   5.   Destination port number represented as a decimal number,\
    \ for\n        example, \"161\".\n   6.   Size of the SNMP message (a decimal\
    \ number) counted in octets,\n        for example, \"123\".  The size excludes\
    \ all transport, network,\n        and link-layer headers.\n   7.   SNMP message\
    \ version represented as a decimal number.  The\n        version 0 stands for\
    \ SNMPv1, 1 for SNMPv2c, and 3 for SNMPv3,\n        for example, \"3\".\n   8.\
    \   SNMP protocol operation indicated by one of the keywords get-\n        request,\
    \ get-next-request, get-bulk-request, set-request, trap,\n        snmpV2-trap,\
    \ inform-request, response, report.\n   9.   SNMP request-id in decimal notation,\
    \ for example, \"1511411010\".\n   10.  SNMP error-status in decimal notation,\
    \ for example, \"0\".\n   11.  SNMP error-index in decimal notation, for example,\
    \ \"0\".\n   12.  Number of variable-bindings contained in the varbind-list in\n\
    \        decimal notation, for example, \"5\".\n   13.  For each varbind in the\
    \ varbind list, three output elements are\n        generated:\n        1.  Object\
    \ name given as object identifier in dotted decimal\n            notation, for\
    \ example, \"1.3.6.1.2.1.1.3.0\".\n        2.  Object base type name or exception\
    \ name, that is one of the\n            following: null, integer32, unsigned32,\
    \ counter32,\n            counter64, timeticks, ipaddress, octet-string, object-\n\
    \            identifier, opaque, no-such-object, no-such-instance, and\n     \
    \       end-of-mib-view.\n        3.  Object value is printed as a number if the\
    \ underlying base\n            type is numeric.  An IPv4 addresses is rendered\
    \ in the\n            dotted quad notation and an IPv6 address is rendered in\
    \ the\n            usual hexadecimal notation.  An octet string value is\n   \
    \         printed in hexadecimal format while an object identifier\n         \
    \   value is printed in dotted decimal notation.  In case of an\n            exception,\
    \ the object value is empty.\n   Note that the format does not preserve the information\
    \ needed to\n   understand SNMPv1 traps.  It is therefore recommended that\n \
    \  implementations be able to convert the SNMPv1 trap format into the\n   trap\
    \ format used by SNMPv2c and SNMPv3, according to the rules\n   defined in [RFC3584].\
    \  The activation of trap format conversion\n   should be the user's choice.\n\
    \   The following example shows an SNMP trace file in CSV format\n   containing\
    \ an SNMPv1 get-next-request message for the OID\n   1.3.6.1.2.1.1.3 (sysUpTime)\
    \ and the response message returned by the\n   agent.  (Note that the example\
    \ uses backslash line continuation marks\n   in order to fit the example into\
    \ the RFC format.  Backslash line\n   continuations are not part of the CSV format.)\n\
    \   1147212206.739609,192.0.2.1,60371,192.0.2.2,12345,42,1,\\\n     get-next-request,1804289383,0,0,1,1.3.6.1.2.1.1.3,null,\n\
    \   1147212206.762891,192.0.2.2,12345,192.0.2.1,60371,47,1,\\\n     response,1804289383,0,0,1,1.3.6.1.2.1.1.3.0,timeticks,26842224\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   SNMP traffic traces usually contain sensitive\
    \ information.  It is\n   therefore necessary to (a) remove unwanted information\
    \ and (b) to\n   anonymize the remaining necessary information before traces are\
    \ made\n   available for analysis.  It is recommended to encrypt traces when\n\
    \   they are archived.\n   Implementations that generate CSV or XML traces from\
    \ raw pcap files\n   should have an option to suppress or anonymize values.  Note\
    \ that\n   instance identifiers of tables also include values, and it might\n\
    \   therefore be necessary to suppress or anonymize (parts of) the\n   instance\
    \ identifiers.  Similarly, the packet and message headers\n   typically contain\
    \ sensitive information about the source and\n   destination of SNMP messages\
    \ as well as authentication information\n   (community strings or user names).\n\
    \   Anonymization techniques can be applied to keep information in traces\n  \
    \ that could otherwise reveal sensitive information.  When using\n   anonymization,\
    \ values should only be kept when the underlying data\n   type is known and an\
    \ appropriate anonymization transformation is\n   available (filter-in principle).\
    \  For values appearing in instance\n   identifiers, it is usually desirable to\
    \ maintain the lexicographic\n   order.  Special anonymization transformations\
    \ that preserve this\n   property have been developed, although their anonymization\
    \ strength\n   is usually reduced compared to transformations that do not preserve\n\
    \   lexicographic ordering [HS06].\n   The meta data associated with traces and\
    \ in particular information\n   about the organization owning a network and the\
    \ description of the\n   measurement point in the network topology where a trace\
    \ was collected\n   may be misused to decide/pinpoint where and how to attack\
    \ a network.\n   Meta data therefore needs to be properly protected.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   Per this document, IANA has registered a URI for\
    \ the SNMP XML trace\n   format namespace in the IETF XML registry [RFC3688].\
    \  Following the\n   format in RFC 3688, the following registration has been made:\n\
    \   URI: \"urn:ietf:params:xml:ns:snmp-trace-1.0\"\n   Registrant Contact: The\
    \ NMRG of the IRTF.\n   XML: N/A, the URI is an XML namespace.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   This document was influenced by discussions within the\
    \ Network\n   Management Research Group (NMRG).  Special thanks to Remco van de\n\
    \   Meent for writing the initial Perl script that lead to the\n   development\
    \ of the snmpdump software package and Matus Harvan for his\n   work on lexicographic\
    \ order preserving anonymization transformations.\n   Aiko Pras contributed ideas\
    \ to Section 3 while David Harrington\n   helped to improve the readability of\
    \ this document.\n   Last call reviews have been received from Bert Wijnen, Aiko\
    \ Pras,\n   Frank Strauss, Remco van de Meent, Giorgio Nunzi, Wes Hardacker, Liam\n\
    \   Fallon, Sharon Chisholm, David Perkins, Deep Medhi, Randy Bush, David\n  \
    \ Harrington, Dan Romascanu, Luca Deri, and Marc Burgess.  Karen R.\n   Sollins\
    \ reviewed the document for the Internet Research Steering\n   Group (IRSG). \
    \ Jari Arkko, Pasi Eronen, Chris Newman, and Tim Polk\n   provided helpful comments\
    \ during the Internet Engineering Steering\n   Group (IESG) review.\n   Part of\
    \ this work was funded by the European Commission under grant\n   FP6-2004-IST-4-EMANICS-026854-NOE.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2578]   McCloghrie, K., Perkins, D., and J.\
    \ Schoenwaelder,\n               \"Structure of Management Information Version\
    \ 2 (SMIv2)\",\n               STD 58, RFC 2578, April 1999.\n   [OASISRNG]  Clark,\
    \ J. and M. Makoto, \"RELAX NG Specification\",\n               OASIS Committee\
    \ Specification, December 2001.\n   [OASISRNC]  Clark, J., \"RELAX NG Compact\
    \ Syntax\", OASIS Committee\n               Specification, November 2002.\n  \
    \ [RFC3584]   Frye, R., Levi, D., Routhier, S., and B. Wijnen,\n             \
    \  \"Coexistence between Version 1, Version 2, and Version 3\n               of\
    \ the Internet-standard Network Management Framework\",\n               BCP 74,\
    \ RFC 3584, August 2003.\n   [RFC3688]   Mealling, M., \"The IETF XML Registry\"\
    , BCP 81, RFC 3688,\n               January 2004.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC1052]   Cerf, V., \"IAB Recommendations\
    \ for the development of\n               Internet network management standards\"\
    , RFC 1052,\n               April 1998.\n   [RFC2579]   McCloghrie, K., Perkins,\
    \ D., and J. Schoenwaelder,\n               \"Textual Conventions for SMIv2\"\
    , STD 58, RFC 2579,\n               April 1999.\n   [RFC3418]   Presuhn, R., Ed.,\
    \ \"Management Information Base (MIB) for\n               the Simple Network Management\
    \ Protocol (SNMP)\", STD 62,\n               RFC 3418, December 2002.\n   [RFC2863]\
    \   McCloghrie, K. and F. Kastenholz, \"The Interfaces Group\n               MIB\"\
    , RFC 2863, June 2000.\n   [RFC3410]   Case, J., Mundy, R., Partain, D., and B.\
    \ Stewart,\n               \"Introduction and Applicability Statements for Internet-\n\
    \               Standard Management Framework\", RFC 3410, December 2002.\n  \
    \ [RFC4022]   Raghunarayan, R., \"Management Information Base for the\n      \
    \         Transmission Control Protocol (TCP)\", RFC 4022,\n               March\
    \ 2005.\n   [PDMQ04]    Pras, A., Drevers, T., van de Meent, R., and D. Quartel,\n\
    \               \"Comparing the Performance of SNMP and Web Services based\n \
    \              Management\", IEEE Transactions on Network and Service\n      \
    \         Management 1(2), November 2004.\n   [Pat01]     Pattinson, C., \"A Study\
    \ of the Behaviour of the Simple\n               Network Management Protocol\"\
    , Proc. 12th IFIP/IEEE\n               Workshop on Distributed Systems: Operations\
    \ and\n               Management , October 2001.\n   [DSR01]     Du, X., Shayman,\
    \ M., and M. Rozenblit, \"Implementation\n               and Performance Analysis\
    \ of SNMP on a TLS/TCP Base\",\n               Proc. 7th IFIP/IEEE International\
    \ Symposium on Integrated\n               Network Management , May 2001.\n   [CT04]\
    \      Corrente, A. and L. Tura, \"Security Performance Analysis\n           \
    \    of SNMPv3 with Respect to SNMPv2c\", Proc. 2004 IEEE/IFIP\n             \
    \  Network Operations and Management Symposium , April 2004.\n   [PFGL04]    Pavlou,\
    \ G., Flegkas, P., Gouveris, S., and A. Liotta, \"On\n               Management\
    \ Technologies and the Potential of Web\n               Services\", IEEE Communications\
    \ Magazine 42(7), July 2004.\n   [SM99]      Sprenkels, R. and J. Martin-Flatin,\
    \ \"Bulk Transfers of\n               MIB Data\", Simple Times 7(1), March 1999.\n\
    \   [Mal02]     Malowidzki, M., \"GetBulk Worth Fixing\", Simple\n           \
    \    Times 10(1), December 2002.\n   [HS06]      Harvan, M. and J. Schoenwaelder,\
    \ \"Prefix- and\n               Lexicographical-order-preserving IP Address\n\
    \               Anonymization\", IEEE/IFIP Network Operations and\n          \
    \     Management Symposium NOMS 2006, April 2006.\n   [XFA02]     Xu, J., Fan,\
    \ J., and M. Ammar, \"Prefix-Preserving IP\n               Address Anonymization:\
    \ Measurement-based Security\n               Evaluation and a New Cryptography-based\
    \ Scheme\", 10th\n               IEEE International Conference on Network\n  \
    \             Protocols ICNP'02, November 2002.\n   [FXAM04]    Fan, J., Xu, J.,\
    \ Ammar, M., and S. Moon, \"Prefix-\n               Preserving IP Address Anonymization\"\
    , Computer\n               Networks 46(2), October 2004.\n   [PAPL06]    Pang,\
    \ R., Allman, M., Paxson, V., and J. Lee, \"The Devil\n               and Packet\
    \ Trace Anonymization\", Computer Communication\n               Review 36(1),\
    \ January 2006.\n   [RW07]      Ramaswamy, R. and T. Wolf, \"High-Speed Prefix-Preserving\n\
    \               IP Address Anonymization for Passive Measurement\n           \
    \    Systems\", IEEE Transactions on Networking 15(1),\n               February\
    \ 2007.\n"
- title: URIs
  contents:
  - "URIs\n   [1]  <http://en.wikipedia.org/wiki/Pcap>\n   [2]  <http://www.tcpdump.org/>\n\
    \   [3]  <http://www.wireshark.org/>\n   [4]  <http://www.datcat.org/>\n   [5]\
    \  <https://svn.eecs.jacobs-university.de/svn/schoenw/src/snmpdump>\n   [6]  <http://xmlsoft.org/XSLT/>\n\
    \   [7]  <http://perl-xml.sourceforge.net/faq/>\n   [8]  <http://www.relaxng.org/>\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Juergen Schoenwaelder\n   Jacobs University Bremen\n   Campus\
    \ Ring 1\n   28725 Bremen\n   Germany\n   Phone: +49 421 200-3587\n   EMail: j.schoenwaelder@jacobs-university.de\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78\
    \ and at http://www.rfc-editor.org/copyright.html,\n   and except as set forth\
    \ therein, the authors retain all their rights.\n   This document and the information\
    \ contained herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR,\
    \ THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET\
    \ SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING TASK FORCE DISCLAIM\
    \ ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY\
    \ THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\
    \ IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
