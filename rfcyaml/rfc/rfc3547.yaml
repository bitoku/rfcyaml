- title: __initial_text__
  contents:
  - '                  The Group Domain of Interpretation

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document presents an ISAMKP Domain of Interpretation (DOI)\
    \ for\n   group key management to support secure group communications.  The\n\
    \   GDOI manages group security associations, which are used by IPSEC and\n  \
    \ potentially other data security protocols running at the IP or\n   application\
    \ layers.  These security associations protect one or more\n   key-encrypting\
    \ keys, traffic-encrypting keys, or data shared by group\n   members.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n       1.1.  GDOI Applications. . . . . . . . . . . . . . .\
    \ . . . . .  5\n       1.2.  Extending GDOI . . . . . . . . . . . . . . . . .\
    \ . . . .  5\n   2.  GDOI Phase 1 protocol. . . . . . . . . . . . . . . . . .\
    \ . . .  6\n       2.1.  ISAKMP Phase 1 protocol. . . . . . . . . . . . . . .\
    \ . .  6\n             2.1.1.  DOI value. . . . . . . . . . . . . . . . . . .\
    \ .  6\n             2.1.2.  UDP port . . . . . . . . . . . . . . . . . . . .\
    \  6\n   3.  GROUPKEY-PULL Exchange . . . . . . . . . . . . . . . . . . . .  6\n\
    \       3.1.  Authorization. . . . . . . . . . . . . . . . . . . . . .  7\n  \
    \     3.2.  Messages . . . . . . . . . . . . . . . . . . . . . . . .  7\n    \
    \         3.2.1.  Perfect Forward Secrecy. . . . . . . . . . . . .  9\n      \
    \       3.2.2.  ISAKMP Header Initialization . . . . . . . . . .  9\n       3.3.\
    \  Initiator Operations . . . . . . . . . . . . . . . . . . 10\n       3.4.  Receiver\
    \ Operations. . . . . . . . . . . . . . . . . . . 11\n   4.  GROUPKEY-PUSH Message.\
    \ . . . . . . . . . . . . . . . . . . . . 11\n       4.1.  Perfect Forward Secrecy\
    \ (PFS). . . . . . . . . . . . . . 12\n       4.2.  Forward and Backward Access\
    \ Control. . . . . . . . . . . 12\n             4.2.1.  Forward Access Control\
    \ Requirements. . . . . . . 13\n       4.3.  Delegation of Key Management . .\
    \ . . . . . . . . . . . . 14\n       4.4.  Use of signature keys. . . . . . .\
    \ . . . . . . . . . . . 14\n       4.5.  ISAKMP Header Initialization . . . .\
    \ . . . . . . . . . . 14\n       4.6.  Deletion of SAs. . . . . . . . . . . .\
    \ . . . . . . . . . 14\n       4.7.  GCKS Operations. . . . . . . . . . . . .\
    \ . . . . . . . . 15\n       4.8.  Group Member Operations. . . . . . . . . .\
    \ . . . . . . . 16\n   5.  Payloads and Defined Values. . . . . . . . . . . .\
    \ . . . . . . 16\n       5.1.  Identification Payload . . . . . . . . . . . .\
    \ . . . . . 17\n             5.1.1.  Identification Type Values . . . . . . .\
    \ . . . . 18\n       5.2.  Security Association Payload . . . . . . . . . . .\
    \ . . . 18\n             5.2.1.  Payloads following the SA payload. . . . . .\
    \ . . 19\n       5.3.  SA KEK payload . . . . . . . . . . . . . . . . . . . .\
    \ . 19\n             5.3.1.  KEK Attributes . . . . . . . . . . . . . . . . .\
    \ 22\n             5.3.2.  KEK_MANAGEMENT_ALGORITHM . . . . . . . . . . . . 22\n\
    \             5.3.3.  KEK_ALGORITHM. . . . . . . . . . . . . . . . . . 23\n  \
    \           5.3.4.  KEK_KEY_LENGTH . . . . . . . . . . . . . . . . . 23\n    \
    \         5.3.5.  KEK_KEY_LIFETIME . . . . . . . . . . . . . . . . 24\n      \
    \       5.3.6.  SIG_HASH_ALGORITHM . . . . . . . . . . . . . . . 24\n        \
    \     5.3.7.  SIG_ALGORITHM. . . . . . . . . . . . . . . . . . 24\n          \
    \   5.3.8.  SIG_KEY_LENGTH . . . . . . . . . . . . . . . . . 25\n            \
    \ 5.3.9.  KE_OAKLEY_GROUP. . . . . . . . . . . . . . . . . 25\n       5.4.  SA\
    \ TEK Payload . . . . . . . . . . . . . . . . . . . . . 25\n             5.4.1.\
    \  PROTO_IPSEC_ESP. . . . . . . . . . . . . . . . . 26\n             5.4.2.  Other\
    \ Security Protocols . . . . . . . . . . . . 28\n       5.5.  Key Download Payload\
    \ . . . . . . . . . . . . . . . . . . 28\n             5.5.1.  TEK Download Type.\
    \ . . . . . . . . . . . . . . . 30\n             5.5.2.  KEK Download Type. .\
    \ . . . . . . . . . . . . . . 31\n             5.5.3.  LKH Download Type. . .\
    \ . . . . . . . . . . . . . 32\n       5.6.  Sequence Number Payload. . . . .\
    \ . . . . . . . . . . . . 35\n       5.7.  Proof of Possession. . . . . . . .\
    \ . . . . . . . . . . . 36\n       5.8.  Nonce. . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 36\n   6.  Security Considerations. . . . . . . . . . .\
    \ . . . . . . . . . 36\n       6.1.  ISAKMP Phase 1 . . . . . . . . . . . . .\
    \ . . . . . . . . 37\n             6.1.1.  Authentication . . . . . . . . . .\
    \ . . . . . . . 37\n             6.1.2.  Confidentiality. . . . . . . . . . .\
    \ . . . . . . 37\n             6.1.3.  Man-in-the-Middle Attack Protection. .\
    \ . . . . . 38\n             6.1.4.  Replay/Reflection Attack Protection. . .\
    \ . . . . 38\n             6.1.5.  Denial of Service Protection . . . . . . .\
    \ . . . 38\n       6.2.  GROUPKEY-PULL Exchange . . . . . . . . . . . . . . .\
    \ . . 38\n             6.2.1.  Authentication . . . . . . . . . . . . . . . .\
    \ . 38\n             6.2.2.  Confidentiality. . . . . . . . . . . . . . . . .\
    \ 39\n             6.2.3.  Man-in-the-Middle Attack Protection. . . . . . . 39\n\
    \             6.2.4.  Replay/Reflection Attack Protection. . . . . . . 39\n  \
    \           6.2.5.  Denial of Service Protection . . . . . . . . . . 39\n    \
    \         6.2.6.  Authorization. . . . . . . . . . . . . . . . . . 40\n      \
    \ 6.3.  GROUPKEY-PUSH Exchange . . . . . . . . . . . . . . . . . 40\n        \
    \     6.3.1.  Authentication . . . . . . . . . . . . . . . . . 40\n          \
    \   6.3.2.  Confidentiality. . . . . . . . . . . . . . . . . 40\n            \
    \ 6.3.3.  Man-in-the-Middle Attack Protection. . . . . . . 40\n             6.3.4.\
    \  Replay/Reflection Attack Protection. . . . . . . 40\n             6.3.5.  Denial\
    \ of Service Protection . . . . . . . . . . 41\n             6.3.6.  Forward Access\
    \ Control . . . . . . . . . . . . . 41\n   7.  IANA Considerations. . . . . .\
    \ . . . . . . . . . . . . . . . . 41\n       7.1.  ISAKMP DOI . . . . . . . .\
    \ . . . . . . . . . . . . . . . 41\n       7.2.  Payload Types. . . . . . . .\
    \ . . . . . . . . . . . . . . 42\n       7.3.  New Name spaces. . . . . . . .\
    \ . . . . . . . . . . . . . 42\n       7.4.  UDP Port . . . . . . . . . . . .\
    \ . . . . . . . . . . . . 42\n   8.  Intellectual Property Rights Statement .\
    \ . . . . . . . . . . . 42\n   9.  Acknowledgements . . . . . . . . . . . . .\
    \ . . . . . . . . . . 43\n   10. References . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . 43\n       10.1. Normative References . . . . . . . . . .\
    \ . . . . . . . . 43\n       10.2. Informative References . . . . . . . . . .\
    \ . . . . . . . 44\n   Appendix A: Alternate GDOI Phase 1 protocols . . . . .\
    \ . . . . . . 46\n       A.1.  IKEv2 Phase 1 protocol . . . . . . . . . . . .\
    \ . . . . . 46\n       A.2.  KINK Protocol. . . . . . . . . . . . . . . . . .\
    \ . . . . 46\n   Authors' Addresses . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 47\n   Full Copyright Statement . . . . . . . . . . . . . . . . . . .\
    \ . . 48\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document presents an ISAMKP Domain of Interpretation\
    \ (DOI) for\n   group key management called the \"Group Domain of Interpretation\"\
    \n   (GDOI).  In this group key management model, the GDOI protocol is run\n \
    \  between a group member and a \"group controller/key server\" (GCKS),\n   which\
    \ establishes security associations [Section 4.6.2 RFC2401] among\n   authorized\
    \ group members.  ISAKMP defines two \"phases\" of negotiation\n   [p.16 RFC2408].\
    \  The GDOI MUST be protected by a Phase 1 security\n   association.  This document\
    \ incorporates the Phase 1 security\n   association (SA) definition from the Internet\
    \ DOI [RFC2407, RFC2409].\n   Other possible Phase 1 security association types\
    \ are noted in\n   Appendix A.  The Phase 2 exchange is defined in this document,\
    \ and\n   proposes new payloads and exchanges according to the ISAKMP standard\n\
    \   [p. 14 RFC2408].\n   There are six new payloads:\n      1) GDOI SA\n     \
    \ 2) SA KEK (SAK) which follows the SA payload\n      3) SA TEK (SAT) which follows\
    \ the SA payload\n      4) Key Download Array (KD)\n      5) Sequence number (SEQ)\n\
    \      6) Proof of Possession (POP)\n   There are two new exchanges.\n   1) A\
    \ Phase 2 exchange creates Re-key and Data-Security Protocol SAs.\n   The new\
    \ Phase 2 exchange, called \"GROUPKEY-PULL,\" downloads keys for\n   a group's\
    \ \"Re-key\" SA and/or \"Data-security\" SA.  The Re-key SA\n   includes a key\
    \ encrypting key, or KEK, common to the group; a\n   Data-security SA includes\
    \ a data encryption key, or TEK, used by a\n   data-security protocol to encrypt\
    \ or decrypt data traffic [Section\n   2.1 RFC2407].  The SA for the KEK or TEK\
    \ includes authentication\n   keys, encryption keys, cryptographic policy, and\
    \ attributes.  The\n   GROUPKEY-PULL exchange uses \"pull\" behavior since the\
    \ member\n   initiates the retrieval of these SAs from a GCKS.\n   2) A datagram\
    \ subsequently establishes additional Rekey and/or\n   Data-Security Protocol\
    \ SAs.\n   The GROUPKEY-PUSH datagram is \"pushed\" from the GCKS to the members\n\
    \   to create or update a Re-key or Data-security SA.  A Re-key SA\n   protects\
    \ GROUPKEY-PUSH messages.  Thus, a GROUPKEY-PULL is necessary\n   to establish\
    \ at least one Re-key SA in order to protect subsequent\n   GROUPKEY-PUSH messages.\
    \  The GCKS encrypts the GROUPKEY-PUSH message\n   using the KEK Re-key SA.  GDOI\
    \ accommodates the use of arrays of KEKs\n   for group key management algorithms\
    \ using the Logical Key Hierarchy\n   (LKH) algorithm to efficiently add and remove\
    \ group members\n   [RFC2627].  Implementation of the LKH algorithm is OPTIONAL.\n\
    \   Although the GROUPKEY-PUSH specified by this document can be used to\n   refresh\
    \ a Re-key SA, the most common use of GROUPKEY-PUSH is to\n   establish a Data-security\
    \ SA for a data security protocol.  GDOI can\n   accommodate future extensions\
    \ to support a variety of data security\n   protocols.  This document only specifies\
    \ data-security SAs for one\n   security protocol, IPsec ESP.  A separate RFC\
    \ will specify support\n   for other data security protocols such as a future\
    \ secure Real-time\n   Transport Protocol.  A security protocol uses the TEK and\
    \ \"owns\" the\n   data-security SA in the same way that IPsec ESP uses the IKE\
    \ Phase 2\n   keys and owns the Phase 2 SA; for GDOI, IPsec ESP uses the TEK.\n\
    \   Thus, GDOI is a group security association management protocol: All\n   GDOI\
    \ messages are used to create, maintain, or delete security\n   associations for\
    \ a group.  As described above, these security\n   associations protect one or\
    \ more key-encrypting keys,\n   traffic-encrypting keys, or data shared by group\
    \ members for\n   multicast and groups security applications.\n   The keywords\
    \ MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,\n   SHOULD NOT, RECOMMENDED,\
    \ MAY, and OPTIONAL, when they appear in this\n   document, are to be interpreted\
    \ as described in BCP 14, RFC 2119\n   [RFC2119].\n"
- title: 1.1.  GDOI Applications
  contents:
  - "1.1.  GDOI Applications\n   Secure multicast applications include video broadcast\
    \ and multicast\n   file transfer.  In a business environment, many of these applications\n\
    \   require network security and may use IPsec ESP to secure their data\n   traffic.\
    \  Section 5.4.1 specifies how GDOI carries the needed SA\n   parameters for ESP.\
    \  In this way, GDOI supports multicast ESP with\n   group authentication of ESP\
    \ packets using the shared, group key\n   (authentication of unique sources of\
    \ ESP packets is not possible).\n   GDOI can also secure group applications that\
    \ do not use multicast\n   transport such as video-on-demand.  For example, the\
    \ GROUPKEY-PUSH\n   message may establish a pair-wise IPsec ESP SA for a member\
    \ of a\n   subscription group without the need for key management exchanges and\n\
    \   costly asymmetric cryptography.\n"
- title: 1.2.  Extending GDOI
  contents:
  - "1.2.  Extending GDOI\n   Not all secure multicast or multimedia applications\
    \ can use IPsec\n   ESP.  Many Real Time Transport Protocol applications, for\
    \ example,\n   require security above the IP layer to preserve RTP header\n  \
    \ compression efficiencies and transport-independence [RFC3550].  A\n   future\
    \ RTP security protocol may benefit from using GDOI to establish\n   group SAs.\n\
    \   In order to add a new data security protocol, a new RFC MUST specify\n   the\
    \ data-security SA parameters conveyed by GDOI for that security\n   protocol;\
    \ these parameters are listed in section 5.4.2 of this\n   document.\n   Data\
    \ security protocol SAs MUST protect group traffic.  GDOI provides\n   no restriction\
    \ on whether that group traffic is transmitted as\n   unicast or multicast packets.\
    \  However, GDOI MUST NOT be used as a\n   key management mechanism by a data\
    \ security protocol when the packets\n   protected by the data-security SA are\
    \ intended to be private and\n   never become part of group communications.\n"
- title: 2.  GDOI Phase 1 protocol
  contents:
  - "2.  GDOI Phase 1 protocol\n   GDOI is a \"phase 2\" protocol which MUST be protected\
    \ by a \"phase 1\"\n   protocol.  The \"phase 1\" protocol can be any protocol\
    \ which provides\n   for the following protections:\n   o Peer Authentication\n\
    \   o Confidentiality\n   o Message Integrity\n   The following sections describe\
    \ one such \"phase 1\" protocol.  Other\n   protocols which may be potential \"\
    phase 1\" protocols are described in\n   Appendix A.  However, the use of the\
    \ protocols listed there are not\n   considered part of this document.\n"
- title: 2.1.  ISAKMP Phase 1 protocol
  contents:
  - "2.1.  ISAKMP Phase 1 protocol\n   This document defines how the ISAKMP phase\
    \ 1 exchanges as defined in\n   [RFC2409] can be used a \"phase 1\" protocol for\
    \ GDOI.  The following\n   sections define characteristics of the ISAKMP phase\
    \ 1 protocols that\n   are unique for these exchanges when used for GDOI.\n  \
    \ Section 6.1 describes how the ISAKMP Phase 1 protocols meet the\n   requirements\
    \ of a GDOI \"phase 1\" protocol.\n"
- title: 2.1.1.  DOI value
  contents:
  - "2.1.1.  DOI value\n   The Phase 1 SA payload has a DOI value.  That value MUST\
    \ be the GDOI\n   DOI value as defined later in this document.\n"
- title: 2.1.2.  UDP port
  contents:
  - "2.1.2.  UDP port\n   GDOI MUST NOT run on port 500 (the port commonly used for\
    \ IKE).  IANA\n   has assigned port 848 for the use of GDOI.\n"
- title: 3.  GROUPKEY-PULL Exchange
  contents:
  - "3.  GROUPKEY-PULL Exchange\n   The goal of the GROUPKEY-PULL exchange is to establish\
    \ a Re-key\n   and/or Data-security SAs at the member for a particular group.\
    \  A\n   Phase 1 SA protects the GROUPKEY-PULL; there MAY be multiple\n   GROUPKEY-PULL\
    \ exchanges for a given Phase 1 SA.  The GROUPKEY-PULL\n   exchange downloads\
    \ the data security keys (TEKs) and/or group key\n   encrypting key (KEK) or KEK\
    \ array under the protection of the Phase 1\n   SA.\n"
- title: 3.1.  Authorization
  contents:
  - "3.1.  Authorization\n   There are two alternative means for authorizing the GROUPKEY-PULL\n\
    \   message.  First, the Phase 1 identity can be used to authorize the\n   Phase\
    \ 2 (GROUPKEY-PULL) request for a group key.  Second, a new\n   identity can be\
    \ passed in the GROUPKEY-PULL request.  The new\n   identity could be specific\
    \ to the group and use a certificate that is\n   signed by the group owner to\
    \ identify the holder as an authorized\n   group member.  The Proof-of-Possession\
    \ payload validates that the\n   holder possesses the secret key associated with\
    \ the Phase 2 identity.\n"
- title: 3.2.  Messages
  contents:
  - "3.2.  Messages\n   The GROUPKEY-PULL is a Phase 2 exchange.  Phase 1 computes\
    \ SKEYID_a\n   which is the \"key\" in the keyed hash used in the GROUPKEY-PULL\
    \ HASH\n   payloads.  When using the Phase 1 defined in this document, SKEYID_a\n\
    \   is derived according to [RFC2409].  As with the IKE HASH payload\n   generation\
    \ [RFC 2409 section 5.5], each GROUPKEY-PULL message hashes\n   a uniquely defined\
    \ set of values.  Nonces permute the HASH and\n   provide some protection against\
    \ replay attacks.  Replay protection is\n   important to protect the GCKS from\
    \ attacks that a key management\n   server will attract.\n   The GROUPKEY-PULL\
    \ uses nonces to guarantee \"liveliness\", or against\n   replay of a recent GROUPKEY-PULL\
    \ message.  The replay attack is only\n   useful in the context of the current\
    \ Phase 1.  If a GROUPKEY-PULL\n   message is replayed based on a previous Phase\
    \ 1, the HASH calculation\n   will fail due to a wrong SKEYID_a.  The message\
    \ will fail processing\n   before the nonce is ever evaluated.  In order for either\
    \ peer to get\n   the benefit of the replay protection, it must postpone as much\n\
    \   processing as possible until it receives the message in the protocol\n   that\
    \ proves the peer is live.  For example, the Responder MUST NOT\n   compute the\
    \ shared Diffie-Hellman number (if KE payloads were\n   included) or install the\
    \ new SAs until it receives a message with Nr\n   included properly in the HASH\
    \ payload.\n   Nonces require an additional message in the protocol exchange to\n\
    \   ensure that the GCKS does not add a group member until it proves\n   liveliness.\
    \  The GROUPKEY-PULL member-initiator expects to find its\n   nonce, Ni, in the\
    \ HASH of a returned message.  And the GROUPKEY-PULL\n   GKCS responder expects\
    \ to see its nonce, Nr, in the HASH of a\n   returned message before providing\
    \ group-keying material as in the\n   following exchange.\n           Initiator\
    \ (Member)                   Responder (GCKS)\n           ------------------ \
    \                  ----------------\n           HDR*, HASH(1), Ni, ID     -->\n\
    \                                     <--     HDR*, HASH(2), Nr, SA\n        \
    \   HDR*, HASH(3) [,KE_I]     -->\n              [,CERT] [,POP_I]\n          \
    \                           <--     HDR*, HASH(4),[KE_R,][SEQ,]\n            \
    \                                   KD [,CERT] [,POP_R]\n   Hashes are computed\
    \ as follows:\n     HASH(1) = prf(SKEYID_a, M-ID | Ni | ID)\n     HASH(2) = prf(SKEYID_a,\
    \ M-ID | Ni_b | Nr | SA)\n     HASH(3) = prf(SKEYID_a, M-ID | Ni_b | Nr_b [ |\
    \ KE_I ] [ | CERT ]\n                [ | POP_I ])\n     HASH(4) = prf(SKEYID_a,\
    \ M-ID | Ni_b | Nr_b [ | KE_R ] [ | SEQ | ]\n                KD [ | CERT ] [ |\
    \ POP_R])\n     POP payload is constructed as described in Section 5.7.\n   *\
    \ Protected by the Phase 1 SA, encryption occurs after HDR\n   HDR is an ISAKMP\
    \ header payload that uses the Phase 1 cookies and a\n   message identifier (M-ID)\
    \ as in IKE [RFC2409].  Note that nonces are\n   included in the first two exchanges,\
    \ with the GCKS returning only the\n   SA policy payload before liveliness is\
    \ proven.  The HASH payloads\n   [RFC2409] prove that the peer has the Phase 1\
    \ secret (SKEYID_a) and\n   the nonce for the exchange identified by message id,\
    \ M-ID.  Once\n   liveliness is established, the last message completes the real\n\
    \   processing of downloading the KD payload.\n   In addition to the Nonce and\
    \ HASH payloads, the member-initiator\n   identifies the group it wishes to join\
    \ through the ISAKMP ID payload.\n   The GCKS responder informs the member of\
    \ the current value of the\n   sequence number in the SEQ payload; the sequence\
    \ number orders the\n   GROUPKEY-PUSH datagrams (section 4); the member MUST check\
    \ to see\n   that the sequence number is greater than in the previous SEQ payload\n\
    \   the member holds for the group (if it holds any) before installing\n   any\
    \ new SAs.  The SEQ payload MUST be present if the SA payload\n   contains an\
    \ SA KEK attribute.  The GCKS responder informs the member\n   of the cryptographic\
    \ policies of the group in the SA payload, which\n   describes the DOI, KEK and/or\
    \ TEK keying material, and authentication\n   transforms.  The SPIs are also determined\
    \ by the GCKS and downloaded\n   in the SA payload chain (see section 5.2).  The\
    \ SA KEK attribute\n   contains the ISAKMP cookie pair for the Re-key SA, which\
    \ is not\n   negotiated but downloaded.  The SA TEK attribute contains an SPI\
    \ as\n   defined in section 5.4 of this document.  The second message\n   downloads\
    \ this SA payload.  If a Re-key SA is defined in the SA\n   payload, then KD will\
    \ contain the KEK; if one or more Data-security\n   SAs are defined in the SA\
    \ payload, KD will contain the TEKs.  This is\n   useful if there is an initial\
    \ set of TEKs for the particular group\n   and can obviate the need for future\
    \ TEK GROUPKEY-PUSH messages\n   (described in section 4).\n   As described above,\
    \ the member may establish an identity in the\n   GROUPKEY-PULL exchange in an\
    \ optional CERT payload that is separate\n   from the Phase 1 identity.  When\
    \ the member passes a new CERT, a\n   proof of possession (POP) payload accompanies\
    \ it.  The POP payload\n   demonstrates that the member or GCKS has used the very\
    \ secret that\n   authenticates it.  POP_I is an ISAKMP SIG payload containing\
    \ a hash\n   including the nonces Ni and Nr signed by the member, when the member\n\
    \   passes a CERT, signed by the Group Owner to prove its authorization.\n   POP_R\
    \ contains the hash including the concatenated nonces Ni and Nr\n   signed by\
    \ the GCKS, when the GCKS passes a CERT, signed by the group\n   owner, to prove\
    \ its authority to provide keys for a particular group.\n   The use of the nonce\
    \ pair for the POP payload, transformed through a\n   pseudo-random function (prf)\
    \ and encrypted, is designed to withstand\n   compromise of the Phase 1 key. \
    \ Implementation of the CERT and POP\n   payloads is OPTIONAL.\n"
- title: 3.2.1.  Perfect Forward Secrecy
  contents:
  - "3.2.1.  Perfect Forward Secrecy\n   If PFS is desired and the optional KE payload\
    \ is used in the\n   exchange, then both sides compute a DH secret and use it\
    \ to protect\n   the new keying material contained in KD.  The GCKS responder\
    \ will xor\n   the DH secret with the KD payload and send it to the member\n \
    \  Initiator, which recovers the KD by repeating this operation as in\n   the\
    \ Oakley IEXTKEY procedure [RFC2412].  Implementation of the KE\n   payload is\
    \ OPTIONAL.\n"
- title: 3.2.2.  ISAKMP Header Initialization
  contents:
  - "3.2.2.  ISAKMP Header Initialization\n   Cookies are used in the ISAKMP header\
    \ as a weak form of denial of\n   service protection.  The GDOI GROUPKEY-PULL\
    \ exchange uses cookies\n   according to ISAKMP [RFC2408].\n   Next Payload identifies\
    \ an ISAKMP or GDOI payload (see Section 5.0).\n   Major Version is 1 and Minor\
    \ Version is 0 according to ISAKMP\n   [RFC2408, Section 3.1].\n   The Exchange\
    \ Type has value 32 for the GDOI GROUPKEY-PULL exchange.\n   Flags, Message ID,\
    \ and Length are according to ISAKMP [RFC2408,\n   Section 3.1]\n"
- title: 3.3.  Initiator Operations
  contents:
  - "3.3.  Initiator Operations\n   Before a group member (GDOI initiator) contacts\
    \ the GCKS, it must\n   determine the group identifier and acceptable Phase 1\
    \ policy via an\n   out-of-band method such as SDP.  Phase 1 is initiated using\
    \ the GDOI\n   DOI in the SA payload.  Once Phase 1 is complete, the initiator\
    \ state\n   machine moves to the GDOI protocol.\n   To construct the first GDOI\
    \ message the initiator chooses Ni and\n   creates a nonce payload, builds an\
    \ identity payload including the\n   group identifier, and generates HASH(1).\n\
    \   Upon receipt of the second GDOI message, the initiator validates\n   HASH(2),\
    \ extracts the nonce Nr, and interprets the SA payload.  If\n   the policy in\
    \ the SA payload is acceptable (e.g., the security\n   protocol and cryptographic\
    \ protocols can be supported by the\n   initiator), the initiator continues the\
    \ protocol.\n   If the group policy uses certificates for authorization, the\n\
    \   initiator generates a hash including Ni and Nr and signs it.  This\n   becomes\
    \ the contents of the POP payload.  If necessary, a CERT\n   payload is constructed\
    \ which holds the public key corresponding to\n   the private key used to sign\
    \ the POP payload.\n   The initiator constructs the third GDOI message by including\
    \ the CERT\n   and POP payloads (if needed) and creating HASH(3).\n   Upon receipt\
    \ of the fourth GDOI message, the initiator validates\n   HASH(4).  If the responder\
    \ sent CERT and POP_R payloads, the POP\n   signature is validated.\n   If SEQ\
    \ payload is present, the sequence number in the SEQ payload\n   must be checked\
    \ against any previously received sequence number for\n   this group.  If it is\
    \ less than the previously received number, it\n   should be considered stale\
    \ and ignored.  This could happen if two\n   GROUPKEY-PULL messages happened in\
    \ parallel, and the sequence number\n   changed between the times the results\
    \ of two GROUPKEY-PULL messages\n   were returned from the GCKS.\n   The initiator\
    \ interprets the KD key packets, matching the SPIs in the\n   key packets to SPIs\
    \ previously sent in the SA payloads identifying\n   particular policy.  For TEKs,\
    \ once the keys and policy are matched,\n   the initiator is ready to send or\
    \ receive packets matching the TEK\n   policy.  (If policy and keys had been previously\
    \ received for this\n   TEK policy, the initiator may decide instead to ignore\
    \ this TEK\n   policy in case it is stale.)  If this group has a KEK, the KEK\
    \ policy\n   and keys are marked as ready for use.\n"
- title: 3.4.  Receiver Operations
  contents:
  - "3.4.  Receiver Operations\n   The GCKS (responder) passively listens for incoming\
    \ requests from\n   group members.  The Phase 1 authenticates the group member\
    \ and sets\n   up the secure session with them.\n   Upon receipt of the first\
    \ GDOI message the GCKS validates HASH(1),\n   extracts the Ni and group identifier\
    \ in the ID payload.  It verifies\n   that its database contains the group information\
    \ for the group\n   identifier.\n   The GCKS constructs the second GDOI message,\
    \ including a nonce Nr,\n   and the policy for the group in an SA payload, followed\
    \ by SA TEK\n   payloads for traffic SAs, and SA KEK policy (if the group controller\n\
    \   will be sending Re-key messages to the group).\n   Upon receipt of the third\
    \ GDOI message the GCKS validates HASH(3).\n   If the initiator sent CERT and\
    \ POP_I payloads, the POP signature is\n   validated.\n   The GCKS constructs\
    \ the fourth GDOI message, including the SEQ\n   payload (if the GCKS sends rekey\
    \ messages), the KD payload containing\n   keys corresponding to policy previously\
    \ sent in the SA TEK and SA KEK\n   payloads, and the CERT and POP payloads (if\
    \ needed).\n"
- title: 4.  GROUPKEY-PUSH Message
  contents:
  - "4.  GROUPKEY-PUSH Message\n   GDOI sends control information securely using group\
    \ communications.\n   Typically this will be using IP multicast distribution of\
    \ a\n   GROUPKEY-PUSH message but it can also be \"pushed\" using unicast\n  \
    \ delivery if IP multicast is not possible.  The GROUPKEY-PUSH message\n   replaces\
    \ a Re-key SA KEK or KEK array, and/or creates a new\n   Data-security SA.\n \
    \          Member                               GCKS or Delegate\n           ------\
    \                               ----------------\n                           <----\
    \ HDR*, SEQ, SA, KD, [CERT,] SIG\n   * Protected by the Re-key SA KEK; encryption\
    \ occurs after HDR\n   HDR is defined below.  The SEQ payload is defined in the\
    \ Payloads\n   section.  The SA defines the policy (e.g., protection suite) and\n\
    \   attributes (e.g., SPI) for a Re-key and/or Data-security SAs.  The\n   GCKS\
    \ or delegate optionally provides a CERT payload for verification\n   of the SIG.\
    \  KD is the key download payload as described in the\n   Payloads section.\n\
    \   The SIG payload is a signature of a hash of the entire message before\n  \
    \ encryption (including the header and excluding the SIG payload\n   itself),\
    \ prefixed with the string \"rekey\".  The prefixed string\n   ensures that the\
    \ signature of the Rekey datagram cannot be used for\n   any other purpose in\
    \ the GDOI protocol.\n   If the SA defines an LKH KEK array or single KEK, KD\
    \ contains a KEK\n   or KEK array for a new Re-key SA, which has a new cookie\
    \ pair.  When\n   the KD payload carries a new SA KEK attribute (section 5.3),\
    \ a Re-key\n   SA is replaced with a new SA having the same group identifier (ID\n\
    \   specified in message 1 of section 3.2) and incrementing the same\n   sequence\
    \ counter, which is initialized in message 4 of section 3.2.\n   If the SA defines\
    \ an SA TEK payload, this informs the member that a\n   new Data-security SA has\
    \ been created, with keying material carried\n   in KD (Section 5.5).\n   If the\
    \ SA defines a large LKH KEK array (e.g., during group\n   initialization and\
    \ batched rekeying), parts of the array MAY be sent\n   in different unique GROUPKEY-PUSH\
    \ datagrams.  However, each of the\n   GROUPKEY-PUSH datagrams MUST be a fully\
    \ formed GROUPKEY-PUSH\n   datagram.  This results in each datagram containing\
    \ a sequence number\n   and the policy in the SA payload, which corresponds to\
    \ the KEK array\n   portion sent in the KD payload.\n"
- title: 4.1.  Perfect Forward Secrecy (PFS)
  contents:
  - "4.1.  Perfect Forward Secrecy (PFS)\n   The GROUPKEY-PUSH message is protected\
    \ by the group KEK though in all\n   cases, the GROUPKEY-PUSH message carries\
    \ new key downloads, among\n   other information.  A freshly generated secret\
    \ must protect the key\n   download for the GROUPKEY-PUSH message to have PFS.\
    \  This issue is\n   for further study.\n"
- title: 4.2.  Forward and Backward Access Control
  contents:
  - "4.2.  Forward and Backward Access Control\n   Through GROUPKEY-PUSH, the GDOI\
    \ supports algorithms such as LKH that\n   have the property of denying access\
    \ to a new group key by a member\n   removed from the group (forward access control)\
    \ and to an old group\n   key by a member added to the group (backward access\
    \ control).  An\n   unrelated notion to PFS, \"forward access control\" and \"\
    backward\n   access control\" have been called \"perfect forward security\" and\n\
    \   \"perfect backward security\" in the literature [RFC2627].\n   Group management\
    \ algorithms providing forward and backward access\n   control other than LKH\
    \ have been proposed in the literature,\n   including OFT [OFT] and Subset Difference\
    \ [NNL].  These algorithms\n   could be used with GDOI, but are not specified\
    \ as a part of this\n   document.\n   Support for group management algorithms\
    \ is supported via the\n   KEY_MANAGEMENT_ALGORITHM attribute which is sent in\
    \ the SA_KEK\n   payload.  GDOI specifies one method by which LKH can be used\
    \ for\n   forward and backward access control.  Other methods of using LKH, as\n\
    \   well as other group management algorithms such as OFT or Subset\n   Difference\
    \ may be added to GDOI as part of a later document.  Any\n   such addition MUST\
    \ be due to a Standards Action as defined in\n   [RFC2434].\n"
- title: 4.2.1.  Forward Access Control Requirements
  contents:
  - "4.2.1.  Forward Access Control Requirements\n   When group membership is altered\
    \ using a group management algorithm\n   new SA_TEKs (and their associated keys)\
    \ are usually also needed.  New\n   SAs and keys ensure that members who were\
    \ denied access can no longer\n   participate in the group.\n   If forward access\
    \ control is a desired property of the group, new\n   SA_TEKs and the associated\
    \ key packets in the KD payload MUST NOT be\n   included in a GROUPKEY-PUSH message\
    \ which changes group membership.\n   This is required because the SA_TEK policy\
    \ and the associated key\n   packets in the KD payload are not protected with\
    \ the new KEK.  A\n   second GROUPKEY-PUSH message can deliver the new SA_TEKS\
    \ and their\n   associated keys because it will be protected with the new KEK,\
    \ and\n   thus will not be visible to the members who were denied access.\n  \
    \ If forward access control policy for the group includes keeping group\n   policy\
    \ changes from members that are denied access to the group, then\n   two sequential\
    \ GROUPKEY-PUSH messages changing the group KEK MUST be\n   sent by the GCKS.\
    \  The first GROUPKEY-PUSH message creates a new KEK\n   for the group.  Group\
    \ members, which are denied access, will not be\n   able to access the new KEK,\
    \ but will see the group policy since the\n   GROUPKEY-PUSH message is protected\
    \ under the current KEK.  A\n   subsequent GROUPKEY-PUSH message containing the\
    \ changed group policy\n   and again changing the KEK allows complete forward\
    \ access control.  A\n   GROUPKEY-PUSH message MUST NOT change the policy without\
    \ creating a\n   new KEK.\n   If other methods of using LKH or other group management\
    \ algorithms\n   are added to GDOI, those methods MAY remove the above restrictions\n\
    \   requiring multiple GROUPKEY-PUSH messages, providing those methods\n   specify\
    \ how forward access control policy is maintained within a\n   single GROUPKEY-PUSH\
    \ message.\n"
- title: 4.3.  Delegation of Key Management
  contents:
  - "4.3.  Delegation of Key Management\n   GDOI supports delegation of GROUPKEY-PUSH\
    \ datagrams through the\n   delegation capabilities of the PKI.  However, GDOI\
    \ does not\n   explicitly specify how the GCKS identifies delegates, but leaves\
    \ this\n   to the PKI that is used by a particular GDOI implementation.\n"
- title: 4.4.  Use of signature keys
  contents:
  - "4.4.  Use of signature keys\n   The GCKS SHOULD NOT use the same key to sign\
    \ the SIG payload in the\n   GROUPKEY-PUSH message as was used for authorization\
    \ in the\n   GROUPKEY-PULL POP payload.  If the same key must be used, a different\n\
    \   hash function SHOULD be used as a base for the POP payload than is\n   used\
    \ as a base for the SIG payload.\n"
- title: 4.5.  ISAKMP Header Initialization
  contents:
  - "4.5.  ISAKMP Header Initialization\n   Unlike ISAKMP or IKE, the cookie pair\
    \ is completely determined by the\n   GCKS.  The cookie pair in the GDOI ISAKMP\
    \ header identifies the Re-\n   key SA to differentiate the secure groups managed\
    \ by a GCKS.  Thus,\n   GDOI uses the cookie fields as an SPI.\n   Next Payload\
    \ identifies an ISAKMP or GDOI payload (see Section 5.0).\n   Major Version is\
    \ 1 and Minor Version is 0 according to ISAKMP\n   [RFC2408, Section 3.1].\n \
    \  The Exchange Type has value 33 for the GDOI GROUPKEY-PUSH message.\n   Flags\
    \ MUST have the Encryption bit set according to [RFC2008, Section\n   3.1].  All\
    \ other bits MUST be set to zero.\n   Message ID MUST be set to zero.\n   Length\
    \ is according to ISAKMP [RFC2408, Section 3.1]\n"
- title: 4.6.  Deletion of SAs
  contents:
  - "4.6.  Deletion of SAs\n   There are times the GCKS may want to signal to receivers\
    \ to delete\n   SAs, for example at the end of a broadcast.  Deletion of keys\
    \ may be\n   accomplished by sending an ISAKMP Delete payload [RFC2408, Section\n\
    \   3.15] as part of a GDOI GROUPKEY-PUSH message.\n   One or more Delete payloads\
    \ MAY be placed following the SEQ payload\n   in a GROUPKEY-PUSH message.  If\
    \ a GCKS has no further SAs to send to\n   group members, the SA and KD payloads\
    \ MUST be omitted from the\n   message.\n   The following fields of the Delete\
    \ Payload are further defined as\n   follows:\n      o  The Domain of Interpretation\
    \ field contains the GDOI DOI.\n      o  The Protocol-Id field contains TEK protocol\
    \ id values defined\n         in Section 5.4 of this document.  To delete a KEK\
    \ SA, the value\n         of zero MUST be used as the protocol id.  Note that\
    \ only one\n         protocol id value can be defined in a Delete payload.  If\
    \ a TEK\n         SA and a KEK SA must be deleted, they must be sent in different\n\
    \         Delete payloads.\n"
- title: 4.7.  GCKS Operations
  contents:
  - "4.7.  GCKS Operations\n   GCKS or its delegate may initiate a Rekey message for\
    \ one of several\n   reasons, e.g., the group membership has changed or keys are\
    \ due to\n   expire.\n   To begin the rekey datagram the GCKS builds an ISAKMP\
    \ HDR with the\n   correct cookie pair, and a SEQ payload that includes a sequence\n\
    \   number which is one greater than the previous rekey datagram.\n   An SA payload\
    \ is then added.  This is identical in structure and\n   meaning to a SA payload\
    \ sent in a GROUPKEY-PULL exchange.  If there\n   are changes to the KEK (in the\
    \ case of a static KEK) or in group\n   membership (in the case of LKH) an SA_KEK\
    \ attribute is added to the\n   SA.  If there are one or more new TEKs then SA_TEK\
    \ attributes are\n   added to describe that policy.\n   A KD payload is then added.\
    \  This is identical in structure and\n   meaning to a KD payload sent in a GROUPKEY-PULL\
    \ exchange.  If an\n   SA_KEK attribute was included in the SA payload then corresponding\n\
    \   KEK keys (or a KEK array) is included.  TEK keys are sent for each\n   SA_TEK\
    \ attribute included in the SA payload.\n   A CERT payload is added if the initiator\
    \ needs to provide its\n   certificate.\n   In the penultimate step, the initiator\
    \ hashes the string \"rekey\"\n   followed by the key management message already\
    \ formed.  The hash is\n   signed, placed in a SIG payload and added to the datagram.\n\
    \   Lastly, the payloads following the HDR are encrypted using the\n   current\
    \ KEK encryption key.  The datagram can now be sent.\n"
- title: 4.8.  Group Member Operations
  contents:
  - "4.8.  Group Member Operations\n   A group member receiving the GROUPKEY-PUSH\
    \ datagram matches the\n   cookie pair in the ISAKMP HDR to an existing SA.  The\
    \ message is\n   decrypted, and the form of the datagram is validated.  This weeds\
    \ out\n   obvious ill-formed messages (which may be sent as part of a Denial of\n\
    \   Service attack on the group).\n   The signature of the decrypted message is\
    \ then validated, possibly\n   using the CERT payload if it is included.\n   The\
    \ sequence number in the SEQ payload is validated to ensure that it\n   is greater\
    \ than the previously received sequence number, and that it\n   fits within a\
    \ window of acceptable values.\n   The SA and KD payloads are processed which\
    \ results in a new GDOI\n   Rekey SA (if the SA payload included an SA_KEK attribute)\
    \ and/or new\n   IPsec SAs being added to the system.\n"
- title: 5.  Payloads and Defined Values
  contents:
  - "5.  Payloads and Defined Values\n   This document specifies use of several ISAKMP\
    \ payloads, which are\n   defined in accordance with RFC2408.  The following payloads\
    \ are\n   extended or further specified.\n               Next Payload Type   \
    \         Value\n               -----------------            -----\n         \
    \      Security Association (SA)      1\n               Identification (ID)  \
    \          5\n               Nonce (N)                     10\n   Several new\
    \ payload formats are required in the group security\n   exchanges.\n        \
    \       Next Payload Type            Value\n               ----------------- \
    \           -----\n               SA KEK Payload (SAK)          15\n         \
    \      SA TEK Payload (SAT)          16\n               Key Download (KD)    \
    \         17\n               Sequence Number (SEQ)         18\n              \
    \ Proof of Possession (POP)     19\n"
- title: 5.1.  Identification Payload
  contents:
  - "5.1.  Identification Payload\n   The Identification Payload is used to identify\
    \ a group identity that\n   will later be associated with Security Associations\
    \ for the group.  A\n   group identity may map to a specific IP multicast group,\
    \ or may\n   specify a more general identifier, such as one that represents a\
    \ set\n   of related multicast streams.\n   The Identification Payload is defined\
    \ as follows:\n       0                   1                   2              \
    \     3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !  Next Payload !   RESERVED    !        Payload Length         !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \   ID Type     !                    RESERVE2                   !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ~                     Identification Data                       ~\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The\
    \ Identification Payload fields are defined as follows:\n      o  Next Payload\
    \ (1 octet) -- Identifier for the payload type of\n         the next payload in\
    \ the message.  If the current payload is the\n         last in the message, this\
    \ field will be zero (0).\n      o  RESERVED (1 octet) -- Unused, must be zero\
    \ (0).\n      o  Payload Length (2 octets) -- Length, in octets, of the\n    \
    \     identification data, including the generic header.\n      o  Identification\
    \ Type (1 octet) -- Value describing the identity\n         information found\
    \ in the Identification Data field.\n      o  RESERVED2 (2 octets) -- Unused,\
    \ must be zero (0).\n      o  Identification Data (variable length) -- Value,\
    \ as indicated by\n         the Identification Type.\n"
- title: 5.1.1.  Identification Type Values
  contents:
  - "5.1.1.  Identification Type Values\n   The following table lists the assigned\
    \ values for the Identification\n   Type field found in the Identification Payload.\n\
    \          ID Type                           Value\n          -------        \
    \                   -----\n          RESERVED                          0 - 10\n\
    \          ID_KEY_ID                           11\n          RESERVED        \
    \                 12 - 127\n          Private Use                     128 - 255\n"
- title: 5.1.1.1.  ID_KEY_ID
  contents:
  - "5.1.1.1.  ID_KEY_ID\n   In the context of a GDOI ID payload, ID_KEY_ID specifies\
    \ a four\n   (4)-octet group identifier.\n"
- title: 5.2.  Security Association Payload
  contents:
  - "5.2.  Security Association Payload\n   The Security Association payload is defined\
    \ in RFC 2408.  For the\n   GDOI, it is used by the GCKS to assert security attributes\
    \ for both\n   Re-key and Data-security SAs.\n      0                   1    \
    \               2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \     ! Next Payload  !   RESERVED    !         Payload Length        !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     !  \
    \                            DOI                              !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \     !                           Situation                           !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n     ! SA\
    \ Attribute Next Payload     !          RESERVED2            !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \   The Security Association Payload fields are defined as follows:\n      o \
    \ Next Payload (1 octet) -- Identifies the next payload for the\n         GROUPKEY-PULL\
    \ or the GROUPKEY-PUSH message as defined above.\n         The next payload MUST\
    \ NOT be a SAK Payload or SAT Payload type,\n         but the next non-Security\
    \ Association type payload.\n      o  RESERVED (1 octet) -- Must be zero.\n  \
    \    o  Payload Length (2 octets) -- Is the octet length of the current\n    \
    \     payload including the generic header and all TEK and KEK\n         payloads.\n\
    \      o  DOI (4 octets) -- Is the GDOI, which is value 2.\n      o  Situation\
    \ (4 octets) -- Must be zero.\n      o  SA Attribute Next Payload (1 octet) --\
    \ Must be either a SAK\n         Payload or a SAT Payload.  See section 5.2.1\
    \ for a description\n         of which circumstances are required for each payload\
    \ type to be\n         present.\n      o  RESERVED (2 octets) -- Must be zero.\n"
- title: 5.2.1.  Payloads following the SA payload
  contents:
  - "5.2.1.  Payloads following the SA payload\n   Payloads that define specific security\
    \ association attributes for the\n   KEK and/or TEKs used by the group MUST follow\
    \ the SA payload.  How\n   many of each payload is dependent upon the group policy.\
    \  There may\n   be zero or one SAK Payloads, and zero or more SAT Payloads, where\n\
    \   either one SAK or SAT payload MUST be present.\n   This latitude allows various\
    \ group policies to be accommodated.  For\n   example if the group policy does\
    \ not require the use of a Re-key SA,\n   the GCKS would not need to send an SA\
    \ KEK attribute to the group\n   member since all SA updates would be performed\
    \ using the Registration\n   SA.  Alternatively, group policy might use a Re-key\
    \ SA but choose to\n   download a KEK to the group member only as part of the\
    \ Registration\n   SA.  Therefore, the KEK policy (in the SA KEK attribute) would\
    \ not be\n   necessary as part of the Re-key SA message SA payload.\n   Specifying\
    \ multiple SATs allows multiple sessions to be part of the\n   same group and\
    \ multiple streams to be associated with a session\n   (e.g., video, audio, and\
    \ text) but each with individual security\n   association policy.\n"
- title: 5.3.  SA KEK payload
  contents:
  - "5.3.  SA KEK payload\n   The SA KEK (SAK) payload contains security attributes\
    \ for the KEK\n   method for a group and parameters specific to the GROUPKEY-PULL\n\
    \   operation.  The source and destination identities describe the\n   identities\
    \ used for the GROUPKEY-PULL datagram.\n      0                   1          \
    \         2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \     ! Next Payload  !   RESERVED    !         Payload Length        !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n     !  \
    \  Protocol   !  SRC ID Type  !         SRC ID Port           !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \     !SRC ID Data Len!          SRC Identification Data              ~\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n     ! DST\
    \ ID Type   !         DST ID Port           !DST ID Data Len!\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \     !                    DST Identification Data                    ~\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n     !  \
    \                                                             !\n     ~      \
    \                        SPI                              ~\n     !          \
    \                                                     !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \     !         POP Algorithm         !         POP Key Length        !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n     ~  \
    \                      KEK Attributes                         ~\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \   The SAK Payload fields are defined as follows:\n      o  Next Payload (1 octet)\
    \ -- Identifies the next payload for the\n         GROUPKEY-PULL or the GROUPKEY-PUSH\
    \ message.  The only valid\n         next payload types for this message are a\
    \ SAT Payload or zero\n         to indicate there is no SA TEK payload.\n    \
    \  o  RESERVED (1 octet) -- Must be zero.\n      o  Payload Length (2 octets)\
    \ -- Length of this payload, including\n         the KEK attributes.\n      o\
    \  Protocol (1 octet) -- Value describing an IP protocol ID (e.g.,\n         UDP/TCP)\
    \ for the rekey datagram.\n      o  SRC ID Type (1 octet) -- Value describing\
    \ the identity\n         information found in the SRC Identification Data field.\n\
    \         Defined values are specified by the IPSEC Identification Type\n    \
    \     section in the IANA isakmpd-registry [ISAKMP-REG].\n      o  SRC ID Port\
    \ (2 octets) -- Value specifying a port associated\n         with the source Id.\
    \  A value of zero means that the SRC ID Port\n         field should be ignored.\n\
    \      o  SRC ID Data Len (1 octet) -- Value specifying the length of the\n  \
    \       SRC Identification Data field.\n      o  SRC Identification Data (variable\
    \ length) -- Value, as\n         indicated by the SRC ID Type.\n      o  DST ID\
    \ Type (1 octet) -- Value describing the identity\n         information found\
    \ in the DST Identification Data field.\n         Defined values are specified\
    \ by the IPSEC Identification Type\n         section in the IANA isakmpd-registry\
    \ [ISAKMP-REG].\n      o  DST ID Prot (1 octet) -- Value describing an IP protocol\
    \ ID\n         (e.g., UDP/TCP).\n      o  DST ID Port (2 octets) -- Value specifying\
    \ a port associated\n         with the source Id.\n      o  DST ID Data Len (1\
    \ octet) -- Value specifying the length of the\n         DST Identification Data\
    \ field.\n      o  DST Identification Data (variable length) -- Value, as\n  \
    \       indicated by the DST ID Type.\n      o  SPI (16 octets) -- Security Parameter\
    \ Index for the KEK.  The\n         SPI must be the ISAKMP Header cookie pair\
    \ where the first 8\n         octets become the \"Initiator Cookie\" field of\
    \ the GROUPKEY-PUSH\n         message ISAKMP HDR, and the second 8 octets become\
    \ the\n         \"Responder Cookie\" in the same HDR.  As described above, these\n\
    \         cookies are assigned by the GCKS.\n      o  POP Algorithm (2 octets)\
    \ -- The POP payload algorithm.  Defined\n         values are specified in the\
    \ following table.  If no POP\n         algorithm is defined by the KEK policy\
    \ this field must be zero.\n                Algorithm Type  Value\n          \
    \      --------------  -----\n                RESERVED           0\n         \
    \       POP_ALG_RSA        1\n                POP_ALG_DSS        2\n         \
    \       POP_ALG_ECDSS      3\n                RESERVED         4-127\n       \
    \         Private Use    128-255\n      o  POP Key Length (2 octets) -- Length\
    \ of the POP payload key.  If\n         no POP algorithm is defined in the KEK\
    \ policy, this field must\n         be zero.\n      o  KEK Attributes -- Contains\
    \ KEK policy attributes associated\n         with the group.  The following sections\
    \ describe the possible\n         attributes. Any or all attributes may be optional,\
    \ depending on\n         the group policy.\n"
- title: 5.3.1.  KEK Attributes
  contents:
  - "5.3.1.  KEK Attributes\n   The following attributes may be present in a SAK Payload.\
    \  The\n   attributes must follow the format defined in ISAKMP [RFC2408] section\n\
    \   3.3.  In the table, attributes that are defined as TV are marked as\n   Basic\
    \ (B); attributes that are defined as TLV are marked as Variable\n   (V).\n  \
    \           ID Class                   Value    Type\n             --------  \
    \                 -----    ----\n             RESERVED                     0\n\
    \             KEK_MANAGEMENT_ALGORITHM     1        B\n             KEK_ALGORITHM\
    \                2        B\n             KEK_KEY_LENGTH               3     \
    \   B\n             KEK_KEY_LIFETIME             4        V\n             SIG_HASH_ALGORITHM\
    \           5        B\n             SIG_ALGORITHM                6        B\n\
    \             SIG_KEY_LENGTH               7        B\n             KE_OAKLEY_GROUP\
    \              8        B\n   The following attributes may only be included in\
    \ a GROUPKEY-PULL\n   message: KEK_MANAGEMENT_ALGORITHM, KE_OAKLEY_GROUP.\n"
- title: 5.3.2.  KEK_MANAGEMENT_ALGORITHM
  contents:
  - "5.3.2.  KEK_MANAGEMENT_ALGORITHM\n   The KEK_MANAGEMENT_ALGORITHM class specifies\
    \ the group KEK management\n   algorithm used to provide forward or backward access\
    \ control (i.e.,\n   used to exclude group members). Defined values are specified\
    \ in the\n   following table.\n               KEK Management Type            \
    \   Value\n               -------------------               -----\n          \
    \     RESERVED                            0\n               LKH              \
    \                   1\n               RESERVED                           2-127\n\
    \               Private Use                       128-255\n"
- title: 5.3.3.  KEK_ALGORITHM
  contents:
  - "5.3.3.  KEK_ALGORITHM\n   The KEK_ALGORITHM class specifies the encryption algorithm\
    \ using with\n   the KEK.  Defined values are specified in the following table.\n\
    \                Algorithm Type  Value\n                --------------  -----\n\
    \                RESERVED           0\n                KEK_ALG_DES        1\n\
    \                KEK_ALG_3DES       2\n                KEK_ALG_AES        3\n\
    \                RESERVED         4-127\n                Private Use    128-255\n\
    \   A GDOI implementation MUST support the KEK_ALG_3DES algorithm\n   attribute.\n\
    \   If a KEK_MANAGEMENT_ALGORITHM is defined which defines multiple keys\n   (e.g.,\
    \ LKH), and if the management algorithm does not specify the\n   algorithm for\
    \ those keys, then the algorithm defined by the\n   KEK_ALGORITHM attribute MUST\
    \ be used for all keys which are included\n   as part of the management.\n"
- title: 5.3.3.1.  KEK_ALG_DES
  contents:
  - "5.3.3.1.  KEK_ALG_DES\n   This algorithm specifies DES using the Cipher Block\
    \ Chaining (CBC)\n   mode as described in [FIPS81].\n"
- title: 5.3.3.2.  KEK_ALG_3DES
  contents:
  - "5.3.3.2.  KEK_ALG_3DES\n   This algorithm specifies 3DES using three independent\
    \ keys as\n   described in \"Keying Option 1\" in [FIPS46-3].\n"
- title: 5.3.3.3.  KEK_ALG_AES
  contents:
  - "5.3.3.3.  KEK_ALG_AES\n   This algorithm specifies AES as described in [FIPS197].\
    \  The mode of\n   operation for AES is Cipher Block Chaining (CBC) as recommended\
    \ in\n   [AES-MODES].\n"
- title: 5.3.4.  KEK_KEY_LENGTH
  contents:
  - "5.3.4.  KEK_KEY_LENGTH\n   The KEK_KEY_LENGTH class specifies the KEK Algorithm\
    \ key length (in\n   bits).\n"
- title: 5.3.5.  KEK_KEY_LIFETIME
  contents:
  - "5.3.5.  KEK_KEY_LIFETIME\n   The KEK_KEY_LIFETIME class specifies the maximum\
    \ time for which the\n   KEK is valid.  The GCKS may refresh the KEK at any time\
    \ before the\n   end of the valid period.  The value is a four (4) octet number\n\
    \   defining a valid time period in seconds.\n"
- title: 5.3.6.  SIG_HASH_ALGORITHM
  contents:
  - "5.3.6.  SIG_HASH_ALGORITHM\n   SIG_HASH_ALGORITHM specifies the SIG payload hash\
    \ algorithm.  The\n   following tables define the algorithms for SIG_HASH_ALGORITHM.\n\
    \                Algorithm Type  Value\n                --------------  -----\n\
    \                RESERVED           0\n                SIG_HASH_MD5       1\n\
    \                SIG_HASH_SHA1      2\n                RESERVED        3-127\n\
    \                Private Use   128-255\n   SIG_HASH_ALGORITHM is not required\
    \ if the SIG_ALGORITHM is\n   SIG_ALG_DSS or SIG_ALG_ECDSS, which imply SIG_HASH_SHA1.\n"
- title: 5.3.7.  SIG_ALGORITHM
  contents:
  - "5.3.7.  SIG_ALGORITHM\n   The SIG_ALGORITHM class specifies the SIG payload signature\n\
    \   algorithm.  Defined values are specified in the following table.\n       \
    \         Algorithm Type  Value\n                --------------  -----\n     \
    \           RESERVED           0\n                SIG_ALG_RSA        1\n     \
    \           SIG_ALG_DSS        2\n                SIG_ALG_ECDSS      3\n     \
    \           RESERVED         4-127\n                Private Use    128-255\n \
    \  A GDOI implementation MUST support the following algorithm attribute:\n   SIG_ALG_RSA.\n"
- title: 5.3.7.1.  SIG_ALG_RSA
  contents:
  - "5.3.7.1.  SIG_ALG_RSA\n   This algorithm specifies the RSA digital signature\
    \ algorithm as\n   described in [RSA].\n"
- title: 5.3.7.2.  SIG_ALG_DSS
  contents:
  - "5.3.7.2.  SIG_ALG_DSS\n   This algorithm specifies the DSS digital signature\
    \ algorithm as\n   described in [FIPS186-2].\n"
- title: 5.3.7.3.  SIG_ALG_ECDSS
  contents:
  - "5.3.7.3.  SIG_ALG_ECDSS\n   This algorithm specifies the Elliptic Curve digital\
    \ signature\n   algorithm as described in [FIPS186-2].\n"
- title: 5.3.8.  SIG_KEY_LENGTH
  contents:
  - "5.3.8.  SIG_KEY_LENGTH\n   The SIG_KEY_LENGTH class specifies the length of the\
    \ SIG payload key.\n"
- title: 5.3.9.  KE_OAKLEY_GROUP
  contents:
  - "5.3.9.  KE_OAKLEY_GROUP\n   The KE_OAKLEY_GROUP class defines the OAKLEY Group\
    \ used to compute\n   the PFS secret in the optional KE payload of the GDOI GROUPKEY-PULL\n\
    \   exchange.  This attribute uses the values assigned to Group\n   Definitions\
    \ in the IANA IPsec-registry [IPSEC-REG].\n"
- title: 5.4.  SA TEK Payload
  contents:
  - "5.4.  SA TEK Payload\n   The SA TEK (SAT) payload contains security attributes\
    \ for a single\n   TEK associated with a group.\n        0                   1\
    \                   2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \       ! Next Payload  !   RESERVED    !         Payload Length        !\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n    \
    \   ! Protocol-ID   !       TEK Protocol-Specific Payload           ~\n      \
    \ +-+-+-+-+-+-+-+-+                                               ~\n       ~\
    \                                                               ~\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \   The SAT Payload fields are defined as follows:\n      o  Next Payload (1 octet)\
    \ -- Identifies the next payload for the\n         GROUPKEY-PULL or the GROUPKEY-PUSH\
    \ message.  The only valid\n         next payload types for this message are another\
    \ SAT Payload or\n         zero to indicate there are no more security association\n\
    \         attributes.\n      o  RESERVED (1 octet) -- Must be zero.\n      o \
    \ Payload Length (2 octets) -- Length of this payload, including\n         the\
    \ TEK Protocol-Specific Payload.\n      o  Protocol-ID (1 octet) -- Value specifying\
    \ the Security\n         Protocol. The following table defines values for the\
    \ Security\n         Protocol\n          Protocol ID                       Value\n\
    \          -----------                       -----\n          RESERVED       \
    \                     0\n          GDOI_PROTO_IPSEC_ESP                1\n   \
    \       RESERVED                           2-127\n          Private Use      \
    \                128-255\n      o  TEK Protocol-Specific Payload (variable) --\
    \ Payload which\n         describes the attributes specific for the Protocol-ID.\n"
- title: 5.4.1.  PROTO_IPSEC_ESP
  contents:
  - "5.4.1.  PROTO_IPSEC_ESP\n   The TEK Protocol-Specific payload for ESP is as follows:\n\
    \        0                   1                   2                   3\n     \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \       !    Protocol   !  SRC ID Type  !         SRC ID Port           !\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n    \
    \   !SRC ID Data Len!          SRC Identification Data              ~\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n       !\
    \ DST ID Type   !         DST ID Port           !DST ID Data Len!\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \       ! DST Identification Data                                       ~\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n    \
    \   ! Transform ID  !                        SPI                    !\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n       !\
    \      SPI      !       RFC 2407 SA Attributes                  ~\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \   The SAT Payload fields are defined as follows:\n      o  Protocol (1 octet)\
    \ -- Value describing an IP protocol ID (e.g.,\n         UDP/TCP).  A value of\
    \ zero means that the Protocol field should\n         be ignored.\n      o  SRC\
    \ ID Type (1 octet) -- Value describing the identity\n         information found\
    \ in the SRC Identification Data field.\n         Defined values are specified\
    \ by the IPSEC Identification Type\n         section in the IANA isakmpd-registry\
    \ [ISAKMP-REG].\n      o  SRC ID Port (2 octets) -- Value specifying a port associated\n\
    \         with the source Id.  A value of zero means that the SRC ID Port\n  \
    \       field should be ignored.\n      o  SRC ID Data Len (1 octet) -- Value\
    \ specifying the length of the\n         SRC Identification Data field.\n    \
    \  o  SRC Identification Data (variable length) -- Value, as\n         indicated\
    \ by the SRC ID Type.  Set to three bytes of zero for\n         multiple-source\
    \ multicast groups that use a common TEK for all\n         senders.\n      o \
    \ DST ID Type (1 octet) -- Value describing the identity\n         information\
    \ found in the DST Identification Data field.\n         Defined values are specified\
    \ by the IPSEC Identification Type\n         section in the IANA isakmpd-registry\
    \ [ISAKMP-REG].\n      o  DST ID Prot (1 octet) -- Value describing an IP protocol\
    \ ID\n         (e.g., UDP/TCP).  A value of zero means that the DST Id Prot\n\
    \         field should be ignored.\n      o  DST ID Port (2 octets) -- Value specifying\
    \ a port associated\n         with the source Id.  A value of zero means that\
    \ the DST ID Port\n         field should be ignored.\n      o  DST ID Data Len\
    \ (1 octet) -- Value specifying the length of the\n         DST Identification\
    \ Data field.\n      o  DST Identification Data (variable length) -- Value, as\n\
    \         indicated by the DST ID Type.\n      o  Transform ID (1 octet) -- Value\
    \ specifying which ESP transform\n         is to be used.  The list of valid values\
    \ is defined in the\n         IPSEC ESP Transform Identifiers section of the IANA\n\
    \         isakmpd-registry [ISAKMP-REG].\n      o  SPI (4 octets) -- Security\
    \ Parameter Index for ESP.\n      o  RFC 2407 Attributes -- ESP Attributes from\
    \ RFC 2407 Section\n         4.5. The GDOI supports all IPSEC DOI SA Attributes\
    \ for\n         PROTO_IPSEC_ESP excluding the Group Description [RFC2407,\n  \
    \       section 4.5], which MUST NOT be sent by a GDOI implementation\n      \
    \   and is ignored by a GDOI implementation if received.  All\n         mandatory\
    \ IPSEC DOI attributes are mandatory in GDOI\n         PROTO_IPSEC_ESP.  The Authentication\
    \ Algorithm attribute of the\n         IPSEC DOI is group authentication in GDOI.\n"
- title: 5.4.2.  Other Security Protocols
  contents:
  - "5.4.2.  Other Security Protocols\n   Besides ESP, GDOI should serve to establish\
    \ SAs for secure groups\n   needed by other Security Protocols that operate at\
    \ the transport,\n   application, and internetwork layers.  These other Security\n\
    \   Protocols, however, are in the process of being developed or do not\n   yet\
    \ exist.\n   The following information needs to be provided for a Security\n \
    \  Protocol to the GDOI.\n      o  The Protocol-ID for the particular Security\
    \ Protocol\n      o  The SPI Size\n      o  The method of SPI generation\n   \
    \   o  The transforms, attributes and keys needed by the Security\n         Protocol\n\
    \   All Security Protocols must provide the information in the bulleted\n   list\
    \ above to guide the GDOI specification for that protocol.\n   Definitions for\
    \ the support of those Security Protocols in GDOI will\n   be specified in separate\
    \ documents.\n   A Security Protocol MAY protect traffic at any level of the network\n\
    \   stack.  However, in all cases applications of the Security Protocol\n   MUST\
    \ protect traffic which MAY be shared by more than two entities.\n"
- title: 5.5.  Key Download Payload
  contents:
  - "5.5.  Key Download Payload\n   The Key Download Payload contains group keys for\
    \ the group specified\n   in the SA Payload.  These key download payloads can\
    \ have several\n   security attributes applied to them based upon the security\
    \ policy of\n   the group as defined by the associated SA Payload.\n   When included\
    \ as part of the Re-key SA with an optional KE payload,\n   The Key Download Payload\
    \ will be xor'ed with the new Diffie-Hellman\n   shared secret.  The xor operation\
    \ will begin at the \"Number of Key\n   Packets\" field.\n      0            \
    \       1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \     ! Next Payload  !   RESERVED    !         Payload Length        !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n     ! Number\
    \ of Key Packets         !            RESERVED2          !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \     ~                    Key Packets                                ~\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n   The Key\
    \ Download Payload fields are defined as follows:\n      o  Next Payload (1 octet)\
    \ -- Identifier for the payload type of\n         the next payload in the message.\
    \  If the current payload is the\n         last in the message, then this field\
    \ will be zero.\n      o  RESERVED (1 octet) -- Unused, set to zero.\n      o\
    \  Payload Length (2 octets) -- Length in octets of the current\n         payload,\
    \ including the generic payload header.\n      o  Number of Key Packets (2 octets)\
    \ -- Contains the total number\n         of both TEK and Rekey arrays being passed\
    \ in this data block.\n      o  Key Packets\n         Several types of key packets\
    \ are defined.  Each Key Packet has\n         the following format.\n      0 \
    \                  1                   2                   3\n      0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \     !   KD Type     !   RESERVED    !            KD Length          !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n     !  \
    \  SPI Size   !                   SPI (variable)              ~\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \     ~                    Key Packet Attributes                      ~\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n      o \
    \ Key Download (KD) Type (1 octet) -- Identifier for the Key Data\n         field\
    \ of this Key Packet.\n                       Key Download Type        Value\n\
    \                       -----------------        -----\n                     \
    \  RESERVED                   0\n                       TEK                  \
    \      1\n                       KEK                        2\n              \
    \         LKH                        3\n                       RESERVED      \
    \            4-127\n                       Private Use             128-255\n \
    \  \"KEK\" is a single key whereas LKH is an array of key-encrypting keys.\n \
    \     o  RESERVED (1 octet) -- Unused, set to zero.\n      o  Key Download Length\
    \ (2 octets) -- Length in octets of the Key\n         Packet data, including the\
    \ Key Packet header.\n      o  SPI Size (1 octet) -- Value specifying the length\
    \ in octets of\n         the SPI as defined by the Protocol-Id.\n      o  SPI\
    \ (variable length) -- Security Parameter Index which matches\n         a SPI\
    \ previously sent in an SAK or SAT Payload.\n      o  Key Packet Attributes (variable\
    \ length) -- Contains Key\n         information.  The format of this field is\
    \ specific to the value\n         of the KD Type field.  The following sections\
    \ describe the\n         format of each KD Type.\n"
- title: 5.5.1.  TEK Download Type
  contents:
  - "5.5.1.  TEK Download Type\n   The following attributes may be present in a TEK\
    \ Download Type.\n   Exactly one attribute matching each type sent in the SAT\
    \ payload MUST\n   be present.  The attributes must follow the format defined\
    \ in ISAKMP\n   [RFC2408] section 3.3. In the table, attributes defined as TV\
    \ are\n   marked as Basic (B); attributes defined as TLV are marked as Variable\n\
    \   (V).\n             TEK Class                 Value      Type\n           \
    \  ---------                 -----      ----\n             RESERVED          \
    \           0\n             TEK_ALGORITHM_KEY            1        V\n        \
    \     TEK_INTEGRITY_KEY            2        V\n             TEK_SOURCE_AUTH_KEY\
    \          3        V\n   If no TEK key packets are included in a Registration\
    \ KD payload, the\n   group member can expect to receive the TEK as part of a\
    \ Re-key SA.\n   At least one TEK must be included in each Re-key KD payload.\n\
    \   Multiple TEKs may be included if multiple streams associated with the\n  \
    \ SA are to be rekeyed.\n"
- title: 5.5.1.1.  TEK_ALGORITHM_KEY
  contents:
  - "5.5.1.1.  TEK_ALGORITHM_KEY\n   The TEK_ALGORITHM_KEY class declares that the\
    \ encryption key for this\n   SPI is contained as the Key Packet Attribute.  The\
    \ encryption\n   algorithm that will use this key was specified in the SAT payload.\n\
    \   In the case that the algorithm requires multiple keys (e.g., 3DES),\n   all\
    \ keys will be included in one attribute.\n   DES keys will consist of 64 bits\
    \ (the 56 key bits with parity bit).\n   Triple DES keys will be specified as\
    \ a single 192 bit attribute\n   (including parity bits) in the order that the\
    \ keys are to be used for\n   encryption (e.g., DES_KEY1, DES_KEY2, DES_KEY3).\n"
- title: 5.5.1.2.  TEK_INTEGRITY_KEY
  contents:
  - "5.5.1.2.  TEK_INTEGRITY_KEY\n   The TEK_INTEGRITY_KEY class declares that the\
    \ integrity key for this\n   SPI is contained as the Key Packet Attribute.  The\
    \ integrity\n   algorithm that will use this key was specified in the SAT payload.\n\
    \   Thus, GDOI assumes that both the symmetric encryption and integrity\n   keys\
    \ are pushed to the member.  SHA keys will consist of 160 bits,\n   and MD5 keys\
    \ will consist of 128 bits.\n"
- title: 5.5.1.3.  TEK_SOURCE_AUTH_KEY
  contents:
  - "5.5.1.3.  TEK_SOURCE_AUTH_KEY\n   The TEK_SOURCE_AUTH_KEY class declares that\
    \ the source authentication\n   key for this SPI is contained in the Key Packet\
    \ Attribute.  The\n   source authentication algorithm that will use this key was\
    \ specified\n   in the SAT payload.\n"
- title: 5.5.2.  KEK Download Type
  contents:
  - "5.5.2.  KEK Download Type\n   The following attributes may be present in a KEK\
    \ Download Type.\n   Exactly one attribute matching each type sent in the SAK\
    \ payload MUST\n   be present.  The attributes must follow the format defined\
    \ in ISAKMP\n   [RFC2408] section 3.3. In the table, attributes defined as TV\
    \ are\n   marked as Basic (B); attributes defined as TLV are marked as Variable\n\
    \   (V).\n             KEK Class                 Value      Type\n           \
    \  ---------                 -----      ----\n             RESERVED          \
    \           0\n             KEK_ALGORITHM_KEY            1        V\n        \
    \     SIG_ALGORITHM_KEY            2        V\n   If the KEK key packet is included,\
    \ there MUST be only one present in\n   the KD payload.\n"
- title: 5.5.2.1.  KEK_ALGORITHM_KEY
  contents:
  - "5.5.2.1.  KEK_ALGORITHM_KEY\n   The KEK_ALGORITHM_KEY class declares the encryption\
    \ key for this SPI\n   is contained in the Key Packet Attribute.  The encryption\
    \ algorithm\n   that will use this key was specified in the SAK payload.\n   If\
    \ the mode of operation for the algorithm requires an Initialization\n   Vector\
    \ (IV), an explicit IV MUST be included in the KEK_ALGORITHM_KEY\n   before the\
    \ actual key.\n"
- title: 5.5.2.2.  SIG_ALGORITHM_KEY
  contents:
  - "5.5.2.2.  SIG_ALGORITHM_KEY\n   The SIG_ALGORITHM_KEY class declares that the\
    \ public key for this SPI\n   is contained in the Key Packet Attribute, which\
    \ may be useful when no\n   public key infrastructure is available.  The signature\
    \ algorithm that\n   will use this key was specified in the SAK payload.\n"
- title: 5.5.3.  LKH Download Type
  contents:
  - "5.5.3.  LKH Download Type\n   The LKH key packet is comprised of attributes representing\
    \ different\n   leaves in the LKH key tree.\n   The following attributes are used\
    \ to pass an LKH KEK array in the KD\n   payload.  The attributes must follow\
    \ the format defined in ISAKMP\n   [RFC2408] section 3.3.  In the table, attributes\
    \ defined as TV are\n   marked as Basic (B); attributes defined as TLV are marked\
    \ as Variable\n   (V).\n             KEK Class                 Value      Type\n\
    \             ---------                 -----      ----\n             RESERVED\
    \                     0\n             LKH_DOWNLOAD_ARRAY           1        V\n\
    \             LKH_UPDATE_ARRAY             2        V\n             SIG_ALGORITHM_KEY\
    \            3        V\n             RESERVED                    4-127\n    \
    \         Private Use               128-255\n   If an LKH key packet is included\
    \ in the KD payload, there must be\n   only one present.\n"
- title: 5.5.3.1.  LKH_DOWNLOAD_ARRAY
  contents:
  - "5.5.3.1.  LKH_DOWNLOAD_ARRAY\n   This attribute is used to download a set of\
    \ keys to a group member.\n   It MUST NOT be included in a GROUPKEY-PUSH message\
    \ KD payload if the\n   GROUPKEY-PUSH is sent to more than the group member. \
    \ If an\n   LKH_DOWNLOAD_ARRAY attribute is included in a KD payload, there must\n\
    \   be only one present.\n   This attribute consists of a header block, followed\
    \ by one or more\n   LKH keys.\n    0                   1                   2\
    \                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !  LKH Version  !          # of LKH Keys        !  RESERVED     !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !                             LKH Keys                          !\n   ~  \
    \                                                             ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The KEK_LKH attribute fields are defined as follows:\n      o  LKH version\
    \ (1 octet) -- Contains the version of the LKH\n         protocol which the data\
    \ is formatted in.  Must be one.\n      o  Number of LKH Keys (2 octets) -- This\
    \ value is the number of\n         distinct LKH keys in this sequence.\n     \
    \ o  RESERVED (1 octet) -- Unused, set to zero. Each LKH Key is\n         defined\
    \ as follows:\n    0                   1                   2                 \
    \  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   !    \
    \         LKH ID            !    Key Type   !    RESERVED   !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                        Key Creation Date                      !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                       Key expiration Date                     !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                           Key Handle                          !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !                                                               !\n   ~  \
    \                          Key Data                           ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      o  LKH ID (2 octets) -- This is the position of this key in the\n     \
    \    binary tree structure used by LKH.\n      o  Key Type (1 octet) -- This is\
    \ the encryption algorithm for\n         which this key data is to be used.  This\
    \ value is specified in\n         Section 5.3.3.\n      o  RESERVED (1 octet)\
    \ -- Unused, set to zero.\n      o  Key Creation Date (4 octets) -- This is the\
    \ time value of when\n         this key data was originally generated.  A time\
    \ value of zero\n         indicates that there is no time before which this key\
    \ is not\n         valid.\n      o  Key Expiration Date (4 octets) -- This is\
    \ the time value of\n         when this key is no longer valid for use.  A time\
    \ value of zero\n         indicates that this key does not have an expiration\
    \ time.\n      o  Key Handle (4 octets) -- This is the randomly generated value\n\
    \         to uniquely identify a key within an LKH ID.\n      o  Key Data (variable\
    \ length) -- This is the actual encryption key\n         data, which is dependent\
    \ on the Key Type algorithm for its\n         format.  If the mode of operation\
    \ for the algorithm requires an\n         Initialization Vector (IV), an explicit\
    \ IV MUST be included in\n         the Key Data field before the actual key.\n\
    \   The Key Creation Date and Key expiration Dates MAY be zero.  This is\n   necessary\
    \ in the case where time synchronization within the group is\n   not possible.\n\
    \   The first LKH Key structure in an LKH_DOWNLOAD_ARRAY attribute\n   contains\
    \ the Leaf identifier and key for the group member.  The rest\n   of the LKH Key\
    \ structures contain keys along the path of the key tree\n   in order from the\
    \ leaf, culminating in the group KEK.\n"
- title: 5.5.3.2.  LKH_UPDATE_ARRAY
  contents:
  - "5.5.3.2.  LKH_UPDATE_ARRAY\n   This attribute is used to update the keys for\
    \ a group.  It is most\n   likely to be included in a GROUPKEY-PUSH message KD\
    \ payload to rekey\n   the entire group.  This attribute consists of a header\
    \ block,\n   followed by one or more LKH keys, as defined in Section 5.5.3.1\n\
    \   There may be any number of UPDATE_ARRAY attributes included in a KD\n   payload.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !  LKH Version  !          # of LKH Keys        !  RESERVED     !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !            LKH ID             !           RESERVED2           !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !                           Key Handle                          !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !                            LKH Keys                           !\n   ~  \
    \                                                             ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      o  LKH version (1 octet) -- Contains the version of the LKH\n         protocol\
    \ which the data is formatted in.  Must be one.\n      o  Number of LKH Keys (2\
    \ octets) -- This value is the number of\n         distinct LKH keys in this sequence.\n\
    \      o  RESERVED (1 octet) -- Unused, set to zero.\n      o  LKH ID (2 octets)\
    \ -- This is the node identifier associated\n         with the key used to encrypt\
    \ the first LKH Key.\n      o  RESERVED2 (2 octets) -- Unused, set to zero.\n\
    \      o  Key Handle (4 octets) -- This is the value to uniquely identify\n  \
    \       the key within the LKH ID which was used to encrypt the first\n      \
    \   LKH key.\n   The LKH Keys are as defined in Section 5.5.3.1.  The LKH Key\n\
    \   structures contain keys along the path of the key tree in order from\n   the\
    \ LKH ID found in the LKH_UPDATE_ARRAY header, culminating in the\n   group KEK.\
    \  The Key Data field of each LKH Key is encrypted with the\n   LKH key preceding\
    \ it in the LKH_UPDATE_ARRAY attribute.  The first\n   LKH Key is encrypted under\
    \ the key defined by the LKH ID and Key\n   Handle found in the LKH_UPDATE_ARRAY\
    \ header.\n"
- title: 5.5.3.3.  SIG_ALGORITHM_KEY
  contents:
  - "5.5.3.3.  SIG_ALGORITHM_KEY\n   The SIG_ALGORITHM_KEY class declares that the\
    \ public key for this SPI\n   is contained in the Key Packet Attribute, which\
    \ may be useful when no\n   public key infrastructure is available.  The signature\
    \ algorithm that\n   will use this key was specified in the SAK payload.\n"
- title: 5.6.  Sequence Number Payload
  contents:
  - "5.6.  Sequence Number Payload\n   The Sequence Number Payload (SEQ) provides\
    \ an anti-replay protection\n   for GROUPKEY-PUSH messages.  Its use is similar\
    \ to the Sequence\n   Number field defined in the IPsec ESP protocol [RFC2406].\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ! Next Payload  !   RESERVED    !         Payload Length        !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !                      Sequence Number                          !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Sequence Number Payload fields are defined as follows:\n      o  Next\
    \ Payload (1 octet) -- Identifier for the payload type of\n         the next payload\
    \ in the message.  If the current payload is the\n         last in the message,\
    \ then this field will be zero.\n      o  RESERVED (1 octet) -- Unused, set to\
    \ zero.\n      o  Payload Length (2 octets) -- Length in octets of the current\n\
    \         payload, including the generic payload header.\n      o  Sequence Number\
    \ (4 octets) -- This field contains a\n         monotonically increasing counter\
    \ value for the group.  It is\n         initialized to zero by the GCKS, and incremented\
    \ in each\n         subsequently-transmitted message.  Thus the first packet sent\n\
    \         for a given Rekey SA will have a Sequence Number of 1.  The\n      \
    \   GDOI implementation keeps a sequence counter as an attribute\n         for\
    \ the Rekey SA and increments the counter upon receipt of a\n         GROUPKEY-PUSH\
    \ message.  The current value of the sequence\n         number must be transmitted\
    \ to group members as a part of the\n         Registration SA SA payload.  A group\
    \ member must keep a sliding\n         receive window.  The window must be treated\
    \ as in the ESP\n         protocol [RFC2406] Section 3.4.3.\n"
- title: 5.7.  Proof of Possession
  contents:
  - "5.7.  Proof of Possession\n   The Proof of Possession Payload is used as part\
    \ of group membership\n   authorization during a GDOI exchange.  The Proof of\
    \ Possession\n   Payload is identical to an ISAKMP SIG payload.  However, the\
    \ usage is\n   entirely different.\n   The GCKS, GCKS delegate or member signs\
    \ a hash of the following\n   values:\n        POP_HASH = hash(\"pop\" | Ni |\
    \ Nr)\n   Where hash() is the hash function used with the signature.\n   The \"\
    pop\" prefix ensures that the signature of the POP payload cannot\n   be used\
    \ for any other purpose in the GDOI protocol.\n"
- title: 5.8.  Nonce
  contents:
  - "5.8.  Nonce\n   The data portion of the Nonce payload (i.e., Ni_b and Nr_b included\n\
    \   in the HASHs) MUST be a value between 8 and 128 bytes.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   GDOI is a security association (SA) management\
    \ protocol for groups of\n   senders and receivers.  Unlike a data security protocol,\
    \ SA\n   management includes a key establishment protocol to securely\n   establish\
    \ keys at communication endpoints.  This protocol performs\n   entity authentication\
    \ of the GDOI member or Group Controller/Key\n   Server (GCKS), it provides confidentiality\
    \ of key management\n   messages, and it provides source authentication of those\
    \ messages.\n   This protocol also uses best-known practices for defense against\n\
    \   man-in-middle, connection hijacking, replay, reflection, and\n   denial-of-service\
    \ (DOS) attacks on unsecured networks [STS, RFC2522,\n   SKEME].  GDOI assumes\
    \ the network is not secure and may be under the\n   complete control of an attacker.\n\
    \   GDOI assumes that the host computer is secure even though the network\n  \
    \ is insecure.  GDOI ultimately establishes keys among members of a\n   group,\
    \ which MUST be trusted to use those keys in an authorized\n   manner according\
    \ to group policy.  The security of GDOI, therefore,\n   is as good as the degree\
    \ to which group members can be trusted to\n   protect authenticators, encryption\
    \ keys, decryption keys, and message\n   authentication keys.\n   There are three\
    \ phases of GDOI as described in this document: an\n   ISAKMP Phase 1 protocol,\
    \ a new exchange called GROUPKEY-PULL which is\n   protected by the ISAKMP Phase\
    \ 1 protocol, and a new message called\n   GROUPKEY-PUSH.  Each phase is considered\
    \ separately below.\n"
- title: 6.1.  ISAKMP Phase 1
  contents:
  - "6.1.  ISAKMP Phase 1\n   As described in this document, GDOI uses the Phase 1\
    \ exchanges\n   defined in [RFC2409] to protect the GROUPKEY-PULL exchange.\n\
    \   Therefore all security properties and considerations of those\n   exchanges\
    \ (as noted in [RFC2409]) are relevant for GDOI.\n   GDOI may inherit the problems\
    \ of its ancestor protocols [FS00], such\n   as identity exposure, absence of\
    \ unidirectional authentication, or\n   stateful cookies [PK01].  GDOI could benefit,\
    \ however, from\n   improvements to its ancestor protocols just as it benefits\
    \ from years\n   of experience and work embodied in those protocols.  To reap\
    \ the\n   benefits of future IKE improvements, however, GDOI would need to be\n\
    \   revised in a future standards-track RFC, which is beyond the scope of\n  \
    \ this specification.\n"
- title: 6.1.1.  Authentication
  contents:
  - "6.1.1.  Authentication\n   Authentication is provided via the mechanisms defined\
    \ in [RFC2409],\n   namely Pre-Shared Keys or Public Key encryption.\n"
- title: 6.1.2.  Confidentiality
  contents:
  - "6.1.2.  Confidentiality\n   Confidentiality is achieved in Phase 1 through a\
    \ Diffie-Hellman\n   exchange that provides keying material, and through negotiation\
    \ of\n   encryption transforms.\n   The Phase 1 protocol will be protecting encryption\
    \ and integrity keys\n   sent in the GROUPKEY-PULL protocol.  The strength of\
    \ the encryption\n   used for Phase 1 SHOULD exceed that of the keys send in the\n\
    \   GROUPKEY-PULL protocol.\n"
- title: 6.1.3.  Man-in-the-Middle Attack Protection
  contents:
  - "6.1.3.  Man-in-the-Middle Attack Protection\n   A successful man-in-the-middle\
    \ or connection-hijacking attack foils\n   entity authentication of one or more\
    \ of the communicating entities\n   during key establishment.  GDOI relies on\
    \ Phase 1 authentication to\n   defeat man-in-the-middle attacks.\n"
- title: 6.1.4.  Replay/Reflection Attack Protection
  contents:
  - "6.1.4.  Replay/Reflection Attack Protection\n   In a replay/reflection attack,\
    \ an attacker captures messages between\n   GDOI entities and subsequently forwards\
    \ them to a GDOI entity.\n   Replay and reflection attacks seek to gain information\
    \ from a\n   subsequent GDOI message response or seek to disrupt the operation\
    \ of\n   a GDOI member or GCKS entity.  GDOI relies on the Phase 1 nonce\n   mechanism\
    \ in combination with a hash-based message authentication\n   code to protect\
    \ against the replay or reflection of previous key\n   management messages.\n"
- title: 6.1.5.  Denial of Service Protection
  contents:
  - "6.1.5.  Denial of Service Protection\n   A denial of service attacker sends messages\
    \ to a GDOI entity to cause\n   that entity to perform unneeded message authentication\
    \ operations.\n   GDOI uses the Phase 1 cookie mechanism to identify spurious\
    \ messages\n   prior to cryptographic hash processing.  This is a \"weak\" form\
    \ of\n   denial of service protection in that the GDOI entity must check for\n\
    \   good cookies, which can be successfully imitated by a sophisticated\n   attacker.\
    \  The Phase 1 cookie mechanism is stateful, and commits\n   memory resources\
    \ for cookies, but stateless cookies are a better\n   defense against denial of\
    \ service attacks.\n"
- title: 6.2.  GROUPKEY-PULL Exchange
  contents:
  - "6.2.  GROUPKEY-PULL Exchange\n   The GROUPKEY-PULL exchange allows a group member\
    \ to request SAs and\n   keys from a GCKS.  It runs as a \"phase 2\" protocol\
    \ under protection\n   of the Phase 1 security association.\n"
- title: 6.2.1.  Authentication
  contents:
  - "6.2.1.  Authentication\n   Peer authentication is not required in the GROUPKEY-PULL\
    \ protocol.\n   It is running in the context of the Phase 1 protocol, which has\n\
    \   previously authenticated the identity of the peer.\n   Message authentication\
    \ is provided by HASH payloads in each message,\n   where the HASH is defined\
    \ to be over SKEYID_a (derived in the Phase 1\n   exchange), the ISAKMP Message-ID,\
    \ and all payloads in the message.\n   Because only the two endpoints of the exchange\
    \ know the SKEYID_a\n   value, this provides confidence that the peer sent the\
    \ message.\n"
- title: 6.2.2.  Confidentiality
  contents:
  - "6.2.2.  Confidentiality\n   Confidentiality is provided by the Phase 1 security\
    \ association,\n   after the manner described in [RFC2409].\n"
- title: 6.2.3.  Man-in-the-Middle Attack Protection
  contents:
  - "6.2.3.  Man-in-the-Middle Attack Protection\n   Message authentication (described\
    \ above) includes a secret known only\n   to the group member and GCKS when constructing\
    \ a HASH payload. This\n   prevents man-in-the-middle and connection-hijacking\
    \ attacks because\n   an attacker would not be able to change the message undetected.\n"
- title: 6.2.4.  Replay/Reflection Attack Protection
  contents:
  - "6.2.4.  Replay/Reflection Attack Protection\n   Nonces provide freshness of the\
    \ GROUPKEY-PULL exchange.  The group\n   member and GCKS exchange nonce values\
    \ first two messages.  These\n   nonces are included in subsequent HASH payload\
    \ calculations.  The\n   Group member and GCKS MUST NOT perform any computationally\
    \ expensive\n   tasks before receiving a HASH with its own nonce included.  The\
    \ GCKS\n   MUST NOT update the group management state (e.g., LKH key tree) until\n\
    \   it receives the third message in the exchange with a valid HASH\n   payload\
    \ including its own nonce.\n   Implementations SHOULD keep a record of recently\
    \ received\n   GROUPKEY-PULL messages and reject messages that have already been\n\
    \   processed.  This enables an early discard of the replayed messages.\n"
- title: 6.2.5.  Denial of Service Protection
  contents:
  - "6.2.5.  Denial of Service Protection\n   A GROUPKEY-PULL message identifies its\
    \ messages using a cookie pair\n   from the Phase 1 exchange that precedes it.\
    \  The cookies provide a\n   weak form of denial of service protection as described\
    \ above, in the\n   sense that a GROUPKEY-PULL message with invalid cookies will\
    \ be\n   discarded.\n   The replay protection mechanisms described above provide\
    \ the basis\n   for denial of service protection.\n"
- title: 6.2.6.  Authorization
  contents:
  - "6.2.6.  Authorization\n   The CERT payload in a GROUPKEY-PULL exchange allows\
    \ a group member or\n   GCKS to submit a certificate containing authorization\
    \ attributes to\n   the peer as well as identifying a public/private key pair.\
    \  The\n   GROUPKEY-PULL POP payload enables authorization to be accomplished\n\
    \   where the authorization infrastructure is different than the\n   GROUPKEY-PULL\
    \ authentication infrastructure by proving that it is in\n   possession of the\
    \ private key.\n"
- title: 6.3.  GROUPKEY-PUSH Exchange
  contents:
  - "6.3.  GROUPKEY-PUSH Exchange\n   The GROUPKEY-PUSH exchange is a single message\
    \ that allows a GCKS to\n   send SAs and keys to group members.  This is likely\
    \ to be sent to all\n   members using an IP multicast group.  This provides an\
    \ efficient\n   rekey and group membership adjustment capability.\n"
- title: 6.3.1.  Authentication
  contents:
  - "6.3.1.  Authentication\n   The GROUPKEY-PULL exchange identifies a public key\
    \ that is used for\n   message authentication.  The GROUPKEY-PUSH message is digitally\n\
    \   signed using the corresponding private key held by the GCKS or its\n   delegate.\
    \  This digital signature provides source authentication for\n   the message.\
    \  Thus, GDOI protects the GCKS from impersonation in\n   group environments.\n"
- title: 6.3.2.  Confidentiality
  contents:
  - "6.3.2.  Confidentiality\n   The GCKS encrypts the GROUPKEY-PUSH message with\
    \ an encryption key\n   that was established by the GROUPKEY-PULL exchange.\n"
- title: 6.3.3.  Man-in-the-Middle Attack Protection
  contents:
  - "6.3.3.  Man-in-the-Middle Attack Protection\n   This combination of confidentiality\
    \ and message authentication\n   services protects the GROUPKEY-PUSH message from\
    \ man-in-middle and\n   connection-hijacking attacks.\n"
- title: 6.3.4.  Replay/Reflection Attack Protection
  contents:
  - "6.3.4.  Replay/Reflection Attack Protection\n   The GROUPKEY-PUSH message includes\
    \ a monotonically increasing\n   sequence number to protect against replay and\
    \ reflection attacks.  A\n   group member will recognize a replayed message by\
    \ comparing the\n   sequence number to a sliding window, in the same manner as\
    \ the ESP\n   protocol uses sequence numbers.\n   Implementations SHOULD keep\
    \ a record of recently received\n   GROUPKEY-PUSH messages and reject duplicate\
    \ messages.  This enables\n   an early discard of the replayed messages.\n"
- title: 6.3.5.  Denial of Service Protection
  contents:
  - "6.3.5.  Denial of Service Protection\n   A cookie pair identifies the security\
    \ association for the\n   GROUPKEY-PUSH message.  The cookies thus serve as a\
    \ weak form of\n   denial-of-service protection for the GROUPKEY-PUSH message.\n\
    \   The digital signature used for message authentication has a much\n   greater\
    \ computational cost than a message authentication code and\n   could amplify\
    \ the effects of a denial of service attack on GDOI\n   members who process GROUPKEY-PUSH\
    \ messages.  The added cost of\n   digital signatures is justified by the need\
    \ to prevent GCKS\n   impersonation:  If a shared symmetric key were used for\n\
    \   GROUPKEY-PUSH message authentication, then GCKS source authentication\n  \
    \ would be impossible and any member would be capable of GCKS\n   impersonation.\n\
    \   The potential of the digital signature amplifying a denial of service\n  \
    \ attack is mitigated by the order of operations a group member takes,\n   where\
    \ the least expensive cryptographic operation is performed first.\n   The group\
    \ member first decrypts the message using a symmetric cipher.\n   If it is a validly\
    \ formed message then the sequence number is checked\n   against the replay window.\
    \  Only if the sequence number is valid is\n   the digital signature verified.\
    \  Thus in order for a denial of\n   service attack to be mounted, an attacker\
    \ would need to know both the\n   symmetric encryption key used for confidentiality,\
    \ and a valid\n   sequence number.  Generally speaking this means only current\
    \ group\n   members can effectively deploy a denial of service attack.\n"
- title: 6.3.6.  Forward Access Control
  contents:
  - "6.3.6.  Forward Access Control\n   If a group management algorithm (such as LKH)\
    \ is used, forward access\n   control may not be ensured in some cases.  This\
    \ can happen if some\n   group members are denied access to the group in the same\n\
    \   GROUPKEY-PUSH message as new policy and TEKs are delivered to the\n   group.\
    \  As discussed in Section 4.2.1, forward access control can be\n   maintained\
    \ by sending multiple GROUPKEY-PUSH messages, where the\n   group membership changes\
    \ are sent from the GCKS separate from the new\n   policy and TEKs.\n"
- title: 7.  IANA Considerations
  contents:
  - '7.  IANA Considerations

    '
- title: 7.1.  ISAKMP DOI
  contents:
  - "7.1.  ISAKMP DOI\n   An ISAKMP DOI number is needed to identify an SA payload\
    \ as a GDOI SA\n   payload. The IANA has assigned the value 2 to represent GDOI.\n"
- title: 7.2.  Payload Types
  contents:
  - "7.2.  Payload Types\n   The present document defines new ISAKMP Next Payload\
    \ types.  See\n   Section 5.0 for the payloads defined in this document, including\
    \ the\n   Next Payload values defined by the IANA to identify these payloads.\n"
- title: 7.3.  New Name spaces
  contents:
  - "7.3.  New Name spaces\n   The present document describes many new name spaces\
    \ for use in the\n   GDOI payloads.  Those may be found in subsections under Section\
    \ 5.0.\n   A new GDOI registry has been created for these name spaces.\n   Portions\
    \ of name spaces marked \"RESERVED\" are reserved for IANA\n   allocation.  New\
    \ values MUST be added due to a Standards Action as\n   defined in [RFC2434].\n\
    \   Portions of name spaces marked \"Private Use\" may be allocated by\n   implementations\
    \ for their own purposes.\n"
- title: 7.4.  UDP Port
  contents:
  - "7.4.  UDP Port\n   The IANA has assigned port 848 for use by GDOI.\n"
- title: 8.  Intellectual Property Rights Statement
  contents:
  - "8.  Intellectual Property Rights Statement\n   The IETF takes no position regarding\
    \ the validity or scope of any\n   intellectual property or other rights that\
    \ might be claimed to\n   pertain to the implementation or use of the technology\
    \ described in\n   this document or the extent to which any license under such\
    \ rights\n   might or might not be available; neither does it represent that it\n\
    \   has made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP-11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementors or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\n   The IETF invites\
    \ any interested party to bring to its attention any\n   copyrights, patents or\
    \ patent applications, or other proprietary\n   rights which may cover technology\
    \ that may be required to practice\n   this standard.  Please address the information\
    \ to the IETF Executive\n   Director.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   The authors thank Ran Canetti, Cathy Meadows, Andrea\
    \ Colegrove, and\n   Lakshminath Dondeti.  Ran has advised the authors on secure\
    \ group\n   cryptography, which has led to changes in the exchanges and payload\n\
    \   definitions.  Cathy identified several problems in previous versions\n   of\
    \ this document, including a replay attack against the proof of\n   possession\
    \ exchange, as well as several man-in-the-middle attacks.\n   Andrea contributed\
    \ to the group policy section of this document.\n   Lakshminath identified several\
    \ protocol issues that needed further\n   specification and helped to resolve\
    \ them.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [AES-MODES]  \"Recommendation for Block Cipher\
    \ Modes of Operation\",\n                United States of American, National Institute\
    \ of Science\n                and Technology, NIST Special Publication 800-38A\
    \ 2001\n                Edition, December 2001.\n   [FIPS46-3]   \"Data Encryption\
    \ Standard (DES)\", United States of\n                American, National Institute\
    \ of Science and Technology,\n                Federal Information Processing Standard\
    \ (FIPS) 46-3,\n                October 1999.\n   [FIPS81]     \"DES Modes of\
    \ Operation\", United States of American,\n                National Institute\
    \ of Science and Technology, Federal\n                Information Processing Standard\
    \ (FIPS) 81, December\n                1980.\n   [FIPS186-2]  \"Digital Signature\
    \ Standard (DSS)\", United States of\n                American, National Institute\
    \ of Science and Technology,\n                Federal Information Processing Standard\
    \ (FIPS) 186-2,\n                January 2000.\n   [FIPS197]    \"Advanced Encryption\
    \ Standard (AES)\", United States of\n                American, National Institute\
    \ of Science and Technology,\n                Federal Information Processing Standard\
    \ (FIPS) 197,\n                November 2001.\n   [IPSEC-REG]  http://www.iana.org/assignments/ipsec-registry\n\
    \   [ISAKMP-REG] http://www.iana.org/assignments/isakmp-registry\n   [RFC2119]\
    \    Bradner, S., \"Key words for use in RFCs to Indicate\n                Requirement\
    \ Level\", BCP 14, RFC 2119, March 1997.\n   [RFC2401]    Kent, S. and R. Atkinson,\
    \ \"Security Architecture for the\n                Internet Protocol\", RFC 2401,\
    \ November 1998\n   [RFC2406]    Kent, S. and R. Atkinson, \"IP Encapsulating\
    \ Security\n                Payload (ESP)\", RFC 2406, November 1998.\n   [RFC2407]\
    \    Piper, D., \"The Internet IP Domain of Interpretation for\n             \
    \   ISAKMP\", RFC 2407, November 1998.\n   [RFC2408]    Maughan, D., Shertler,\
    \ M., Schneider, M. and J. Turner,\n                \"Internet Security Association\
    \ and Key Management\n                Protocol\", RFC 2408, November 1998.\n \
    \  [RFC2409]    Harkins, D. and D. Carrel, \"The Internet Key Exchange\n     \
    \           (IKE)\", RFC 2409, November 1998.\n   [RFC2412]    Orman, H., \"The\
    \ OAKLEY Key Determination Protocol\", RFC\n                2412, November 1998.\n\
    \   [RFC2434]    Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n \
    \               IANA Considerations Section in RFCs\", BCP 26, RFC 2434,\n   \
    \             October 1998.\n   [RFC2522]    Karn, P. and W. Simpson, \"Photuris:\
    \ Session-Key\n                Management Protocol\", RFC 2522, March 1999.\n\
    \   [RFC2627]    Wallner, D., Harder, E. and R. Agee, \"Key Management for\n \
    \               Multicast: Issues and Architectures\", RFC 2627,\n           \
    \     September 1998.\n   [RSA]        RSA Laboratories, \"PKCS #1 v2.0: RSA Encryption\n\
    \                Standard\", October 1998.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [FS00]       N. Ferguson and B. Schneier, \"\
    A Cryptographic Evaluation\n                of IPsec, CounterPane\",\n       \
    \         http://www.counterpane.com/ipsec.html.\n   [GKMARCH]    M. Baugher,\
    \ R. Canetti, L. Dondeti, F. Lindholm, \"Group\n                Key Management\
    \ Architecture\", Work in Progress.\n   [IKEv2]      D. Harkins, et. al., \"Proposal\
    \ for the IKEv2 protocol\",\n                Work In Progress.\n   [KINK]    \
    \   M. Thomas, J. Vilhuber, \"Kerberized Internet Negotiation\n              \
    \  of Keys (KINK)\", Work in Progress.\n   [NNL]        D. Naor, M. Naor and J.\
    \ Lotspiech, \"Revocation and\n                Tracing Schemes for Stateless Receivers\"\
    , Advances in\n                Cryptology, Crypto '01, Springer-Verlag LNCS 2139,\
    \ 2001,\n                pp. 41-62.  A full version of the paper appears in\n\
    \                http://www.wisdom.weizmann.ac.il/~naor/.\n   [OFT]        D.\
    \ Mcgrew and A. Sherman, \"Key Establishment in Large\n                Dynamic\
    \ Groups Using One-Way Function Trees\", Manuscript\n                submitted\
    \ to IEEE Transactions on Software Engineering.\n                A full version\
    \ of the paper\n                appears in http://download.nai.com/products/media/nai/\n\
    \                misc/oft052098.ps, 1998\n   [PK01]       R.Perlman, C.Kaufman,\
    \ \"Analysis of the IPsec Key\n                Exchange Standard\", WET-ICE conference,\
    \ 2001.\n                http://sec.femto.org/wetice-2001/papers/radia-paper.pdf\n\
    \   [RFC2093]    Harney, H., and C. Muckenhirn, \"Group Key Management\n     \
    \           Protocol (GKMP) Specification,\" RFC 2093, July 1997.\n   [RFC2094]\
    \    Harney, H. and C. Muckenhirn, \"Group Key Management\n                Protocol\
    \ (GKMP) Architecture,\" RFC 2094, July 1997.\n   [RFC2367]    McDonald, D., Metz,\
    \ C. and B. Phan, \"PF_KEY Key\n                Management API, Version 2\", RFC\
    \ 2367, July 1998.\n   [RFC3550]    Schulzrinne, H., Casner, S., Jacobson, V.\
    \ and R.\n                Frederick, \"RTP: A Transport Protocol for Real-Time\n\
    \                Applications\", RFC 3550, June 2003.\n   [SKEME]      H. Krawczyk,\
    \ \"SKEME: A Versatile Secure Key Exchange\n                Mechanism for Internet\"\
    , ISOC Secure Networks and\n                Distributed Systems Symposium, San\
    \ Diego, 1996.\n   [STS]        Diffie, P. van Oorschot, M. J. Wiener, \"Authentication\n\
    \                and Authenticated Key Exchanges, Designs, Codes and\n       \
    \         Cryptography\", 2, 107-125 (1992), Kluwer Academic\n               \
    \ Publishers.\n"
- title: 'Appendix A: Alternate GDOI Phase 1 protocols'
  contents:
  - "Appendix A: Alternate GDOI Phase 1 protocols\n   This section describes a manner\
    \ in which other protocols could be\n   used as GDOI Phase 1 protocols in place\
    \ of the ISAKMP Phase 1\n   protocol.  However, they are not specified as a part\
    \ of this\n   document.  A separate document MUST be written in order for another\n\
    \   protocol to be used as a GDOI Phase 1 protocol.\n   Other possible phase 1\
    \ protocols are also described in [GKMARCH].\n   Any GDOI phase 1 protocol MUST\
    \ satisfy the requirements specified in\n   Section 2 of this document.\n"
- title: A.1.  IKEv2 Phase 1 protocol
  contents:
  - "A.1.  IKEv2 Phase 1 protocol\n   Version 2 of the IKE protocol (IKEv2) is a work\
    \ in progress [IKEv2].\n   That protocol seeks to simplify the IKE Phase 1 and\
    \ Phase 2\n   protocols, and improve the security of the IKE protocol.  An IKEv2\n\
    \   Phase 1 negotiates an IPSEC SA during phase 1, which was not possible\n  \
    \ in IKE.  However, IKEv2 also defines a phase 2 protocol.  The phase 2\n   protocol\
    \ is protected by the Phase 1, similar in concept to how IKE\n   Quick Mode is\
    \ protected by the IKE Phase 1 protocols in [RFC2409].\n   IKEv2 may not include\
    \ a DOI value in the SA payload.  However, since\n   GDOI uses a unique port,\
    \ choice of a phase 2 protocol in the SA\n   payload using a GDOI value is not\
    \ necessary.  It is expected that an\n   IKEv2 Phase 1 protocol definition could\
    \ be run on the GDOI port.  The\n   SA payload in the protocol would be specific\
    \ to GDOI, or omitted if\n   not needed at all.\n   The GROUPKEY-PULL protocol\
    \ would follow the IKEv2 Phase 1 protocol in\n   the same manner as described\
    \ in this document.\n"
- title: A.2.  KINK Protocol
  contents:
  - "A.2.  KINK Protocol\n   A work in progress [KINK] has defined a method of encapsulating\
    \ an\n   IKE Quick Mode [RFC2409] encapsulated in Kerberos KRB_AP_REQ and\n  \
    \ KRB_AP_REP payloads.  KINK provides a low-latency, computationally\n   inexpensive,\
    \ easily managed, and cryptographically sound method of\n   setting up IPSec security\
    \ associations.\n   The KINK message format includes a GDOI field in the KINK\
    \ header.\n   The [KINK] document defines the DOI for the IPSEC DOI.\n   A new\
    \ DOI for KINK could be defined which would encapsulate a\n   GROUPKEY-PULL exchange\
    \ in the Kerberos KRB_AP_REQ and KRB_AP_REP\n   payloads.  As such, GDOI would\
    \ benefit from the computational\n   efficiencies of KINK.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mark Baugher\n   Cisco Systems\n   5510 SW Orchid Street\n\
    \   Portland, OR  97219, USA\n   Phone: (503) 245-4543\n   EMail: mbaugher@cisco.com\n\
    \   Thomas Hardjono\n   VeriSign\n   401 Edgewater Place, Suite 280\n   Wakefield,\
    \ MA 01880\n   Phone: 781-245-6996\n   EMail: thardjono@verisign.com\n   Hugh\
    \ Harney\n   Sparta\n   9861 Broken Land Parkway\n   Columbia, MD 21046\n   Phone:\
    \ (410) 381-9400 x203\n   EMail: hh@sparta.com\n   Brian Weis\n   Cisco Systems\n\
    \   170 W. Tasman Drive,\n   San Jose, CA 95134-1706, USA\n   Phone: (408) 526-4796\n\
    \   EMail: bew@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
