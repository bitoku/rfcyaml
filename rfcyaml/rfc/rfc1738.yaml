- title: __initial_text__
  contents:
  - '                    Uniform Resource Locators (URL)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a Uniform Resource Locator (URL), the syntax\n\
    \   and semantics of formalized information for location and access of\n   resources\
    \ via the Internet.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document describes the syntax and semantics for a compact\
    \ string\n   representation for a resource available via the Internet.  These\n\
    \   strings are called \"Uniform Resource Locators\" (URLs).\n   The specification\
    \ is derived from concepts introduced by the World-\n   Wide Web global information\
    \ initiative, whose use of such objects\n   dates from 1990 and is described in\
    \ \"Universal Resource Identifiers\n   in WWW\", RFC 1630. The specification of\
    \ URLs is designed to meet the\n   requirements laid out in \"Functional Requirements\
    \ for Internet\n   Resource Locators\" [12].\n   This document was written by\
    \ the URI working group of the Internet\n   Engineering Task Force.  Comments\
    \ may be addressed to the editors, or\n   to the URI-WG <uri@bunyip.com>. Discussions\
    \ of the group are archived\n   at <URL:http://www.acl.lanl.gov/URI/archive/uri-archive.index.html>\n"
- title: 2. General URL Syntax
  contents:
  - "2. General URL Syntax\n   Just as there are many different methods of access\
    \ to resources,\n   there are several schemes for describing the location of such\n\
    \   resources.\n   The generic syntax for URLs provides a framework for new schemes\
    \ to\n   be established using protocols other than those defined in this\n   document.\n\
    \   URLs are used to `locate' resources, by providing an abstract\n   identification\
    \ of the resource location.  Having located a resource,\n   a system may perform\
    \ a variety of operations on the resource, as\n   might be characterized by such\
    \ words as `access', `update',\n   `replace', `find attributes'. In general, only\
    \ the `access' method\n   needs to be specified for any URL scheme.\n"
- title: 2.1. The main parts of URLs
  contents:
  - "2.1. The main parts of URLs\n   A full BNF description of the URL syntax is given\
    \ in Section 5.\n   In general, URLs are written as follows:\n       <scheme>:<scheme-specific-part>\n\
    \   A URL contains the name of the scheme being used (<scheme>) followed\n   by\
    \ a colon and then a string (the <scheme-specific-part>) whose\n   interpretation\
    \ depends on the scheme.\n   Scheme names consist of a sequence of characters.\
    \ The lower case\n   letters \"a\"--\"z\", digits, and the characters plus (\"\
    +\"), period\n   (\".\"), and hyphen (\"-\") are allowed. For resiliency, programs\n\
    \   interpreting URLs should treat upper case letters as equivalent to\n   lower\
    \ case in scheme names (e.g., allow \"HTTP\" as well as \"http\").\n"
- title: 2.2. URL Character Encoding Issues
  contents:
  - "2.2. URL Character Encoding Issues\n   URLs are sequences of characters, i.e.,\
    \ letters, digits, and special\n   characters. A URLs may be represented in a\
    \ variety of ways: e.g., ink\n   on paper, or a sequence of octets in a coded\
    \ character set. The\n   interpretation of a URL depends only on the identity\
    \ of the\n   characters used.\n   In most URL schemes, the sequences of characters\
    \ in different parts\n   of a URL are used to represent sequences of octets used\
    \ in Internet\n   protocols. For example, in the ftp scheme, the host name, directory\n\
    \   name and file names are such sequences of octets, represented by\n   parts\
    \ of the URL.  Within those parts, an octet may be represented by\n   the chararacter\
    \ which has that octet as its code within the US-ASCII\n   [20] coded character\
    \ set.\n   In addition, octets may be encoded by a character triplet consisting\n\
    \   of the character \"%\" followed by the two hexadecimal digits (from\n   \"\
    0123456789ABCDEF\") which forming the hexadecimal value of the octet.\n   (The\
    \ characters \"abcdef\" may also be used in hexadecimal encodings.)\n   Octets\
    \ must be encoded if they have no corresponding graphic\n   character within the\
    \ US-ASCII coded character set, if the use of the\n   corresponding character\
    \ is unsafe, or if the corresponding character\n   is reserved for some other\
    \ interpretation within the particular URL\n   scheme.\n   No corresponding graphic\
    \ US-ASCII:\n   URLs are written only with the graphic printable characters of\
    \ the\n   US-ASCII coded character set. The octets 80-FF hexadecimal are not\n\
    \   used in US-ASCII, and the octets 00-1F and 7F hexadecimal represent\n   control\
    \ characters; these must be encoded.\n   Unsafe:\n   Characters can be unsafe\
    \ for a number of reasons.  The space\n   character is unsafe because significant\
    \ spaces may disappear and\n   insignificant spaces may be introduced when URLs\
    \ are transcribed or\n   typeset or subjected to the treatment of word-processing\
    \ programs.\n   The characters \"<\" and \">\" are unsafe because they are used\
    \ as the\n   delimiters around URLs in free text; the quote mark (\"\"\") is used\
    \ to\n   delimit URLs in some systems.  The character \"#\" is unsafe and should\n\
    \   always be encoded because it is used in World Wide Web and in other\n   systems\
    \ to delimit a URL from a fragment/anchor identifier that might\n   follow it.\
    \  The character \"%\" is unsafe because it is used for\n   encodings of other\
    \ characters.  Other characters are unsafe because\n   gateways and other transport\
    \ agents are known to sometimes modify\n   such characters. These characters are\
    \ \"{\", \"}\", \"|\", \"\\\", \"^\", \"~\",\n   \"[\", \"]\", and \"`\".\n  \
    \ All unsafe characters must always be encoded within a URL. For\n   example,\
    \ the character \"#\" must be encoded within URLs even in\n   systems that do\
    \ not normally deal with fragment or anchor\n   identifiers, so that if the URL\
    \ is copied into another system that\n   does use them, it will not be necessary\
    \ to change the URL encoding.\n   Reserved:\n   Many URL schemes reserve certain\
    \ characters for a special meaning:\n   their appearance in the scheme-specific\
    \ part of the URL has a\n   designated semantics. If the character corresponding\
    \ to an octet is\n   reserved in a scheme, the octet must be encoded.  The characters\
    \ \";\",\n   \"/\", \"?\", \":\", \"@\", \"=\" and \"&\" are the characters which\
    \ may be\n   reserved for special meaning within a scheme. No other characters\
    \ may\n   be reserved within a scheme.\n   Usually a URL has the same interpretation\
    \ when an octet is\n   represented by a character and when it encoded. However,\
    \ this is not\n   true for reserved characters: encoding a character reserved\
    \ for a\n   particular scheme may change the semantics of a URL.\n   Thus, only\
    \ alphanumerics, the special characters \"$-_.+!*'(),\", and\n   reserved characters\
    \ used for their reserved purposes may be used\n   unencoded within a URL.\n \
    \  On the other hand, characters that are not required to be encoded\n   (including\
    \ alphanumerics) may be encoded within the scheme-specific\n   part of a URL,\
    \ as long as they are not being used for a reserved\n   purpose.\n"
- title: 2.3 Hierarchical schemes and relative links
  contents:
  - "2.3 Hierarchical schemes and relative links\n   In some cases, URLs are used\
    \ to locate resources that contain\n   pointers to other resources. In some cases,\
    \ those pointers are\n   represented as relative links where the expression of\
    \ the location of\n   the second resource is in terms of \"in the same place as\
    \ this one\n   except with the following relative path\". Relative links are not\n\
    \   described in this document. However, the use of relative links\n   depends\
    \ on the original URL containing a hierarchical structure\n   against which the\
    \ relative link is based.\n   Some URL schemes (such as the ftp, http, and file\
    \ schemes) contain\n   names that can be considered hierarchical; the components\
    \ of the\n   hierarchy are separated by \"/\".\n"
- title: 3. Specific Schemes
  contents:
  - "3. Specific Schemes\n   The mapping for some existing standard and experimental\
    \ protocols is\n   outlined in the BNF syntax definition.  Notes on particular\
    \ protocols\n   follow. The schemes covered are:\n   ftp                     File\
    \ Transfer protocol\n   http                    Hypertext Transfer Protocol\n\
    \   gopher                  The Gopher protocol\n   mailto                  Electronic\
    \ mail address\n   news                    USENET news\n   nntp              \
    \      USENET news using NNTP access\n   telnet                  Reference to\
    \ interactive sessions\n   wais                    Wide Area Information Servers\n\
    \   file                    Host-specific file names\n   prospero            \
    \    Prospero Directory Service\n   Other schemes may be specified by future specifications.\
    \ Section 4 of\n   this document describes how new schemes may be registered,\
    \ and lists\n   some scheme names that are under development.\n"
- title: 3.1. Common Internet Scheme Syntax
  contents:
  - "3.1. Common Internet Scheme Syntax\n   While the syntax for the rest of the URL\
    \ may vary depending on the\n   particular scheme selected, URL schemes that involve\
    \ the direct use\n   of an IP-based protocol to a specified host on the Internet\
    \ use a\n   common syntax for the scheme-specific data:\n        //<user>:<password>@<host>:<port>/<url-path>\n\
    \   Some or all of the parts \"<user>:<password>@\", \":<password>\",\n   \":<port>\"\
    , and \"/<url-path>\" may be excluded.  The scheme specific\n   data start with\
    \ a double slash \"//\" to indicate that it complies with\n   the common Internet\
    \ scheme syntax. The different components obey the\n   following rules:\n    user\n\
    \        An optional user name. Some schemes (e.g., ftp) allow the\n        specification\
    \ of a user name.\n    password\n        An optional password. If present, it\
    \ follows the user\n        name separated from it by a colon.\n   The user name\
    \ (and password), if present, are followed by a\n   commercial at-sign \"@\".\
    \ Within the user and password field, any \":\",\n   \"@\", or \"/\" must be encoded.\n\
    \   Note that an empty user name or password is different than no user\n   name\
    \ or password; there is no way to specify a password without\n   specifying a\
    \ user name. E.g., <URL:ftp://@host.com/> has an empty\n   user name and no password,\
    \ <URL:ftp://host.com/> has no user name,\n   while <URL:ftp://foo:@host.com/>\
    \ has a user name of \"foo\" and an\n   empty password.\n    host\n        The\
    \ fully qualified domain name of a network host, or its IP\n        address as\
    \ a set of four decimal digit groups separated by\n        \".\". Fully qualified\
    \ domain names take the form as described\n        in Section 3.5 of RFC 1034\
    \ [13] and Section 2.1 of RFC 1123\n        [5]: a sequence of domain labels separated\
    \ by \".\", each domain\n        label starting and ending with an alphanumerical\
    \ character and\n        possibly also containing \"-\" characters. The rightmost\
    \ domain\n        label will never start with a digit, though, which\n       \
    \ syntactically distinguishes all domain names from the IP\n        addresses.\n\
    \    port\n        The port number to connect to. Most schemes designate\n   \
    \     protocols that have a default port number. Another port number\n       \
    \ may optionally be supplied, in decimal, separated from the\n        host by\
    \ a colon. If the port is omitted, the colon is as well.\n    url-path\n     \
    \   The rest of the locator consists of data specific to the\n        scheme,\
    \ and is known as the \"url-path\". It supplies the\n        details of how the\
    \ specified resource can be accessed. Note\n        that the \"/\" between the\
    \ host (or port) and the url-path is\n        NOT part of the url-path.\n   The\
    \ url-path syntax depends on the scheme being used, as does the\n   manner in\
    \ which it is interpreted.\n"
- title: 3.2. FTP
  contents:
  - "3.2. FTP\n   The FTP URL scheme is used to designate files and directories on\n\
    \   Internet hosts accessible using the FTP protocol (RFC959).\n   A FTP URL follow\
    \ the syntax described in Section 3.1.  If :<port> is\n   omitted, the port defaults\
    \ to 21.\n"
- title: 3.2.1. FTP Name and Password
  contents:
  - "3.2.1. FTP Name and Password\n   A user name and password may be supplied; they\
    \ are used in the ftp\n   \"USER\" and \"PASS\" commands after first making the\
    \ connection to the\n   FTP server.  If no user name or password is supplied and\
    \ one is\n   requested by the FTP server, the conventions for \"anonymous\" FTP\
    \ are\n   to be used, as follows:\n        The user name \"anonymous\" is supplied.\n\
    \        The password is supplied as the Internet e-mail address\n        of the\
    \ end user accessing the resource.\n   If the URL supplies a user name but no\
    \ password, and the remote\n   server requests a password, the program interpreting\
    \ the FTP URL\n   should request one from the user.\n"
- title: 3.2.2. FTP url-path
  contents:
  - "3.2.2. FTP url-path\n   The url-path of a FTP URL has the following syntax:\n\
    \        <cwd1>/<cwd2>/.../<cwdN>/<name>;type=<typecode>\n   Where <cwd1> through\
    \ <cwdN> and <name> are (possibly encoded) strings\n   and <typecode> is one of\
    \ the characters \"a\", \"i\", or \"d\".  The part\n   \";type=<typecode>\" may\
    \ be omitted. The <cwdx> and <name> parts may be\n   empty. The whole url-path\
    \ may be omitted, including the \"/\"\n   delimiting it from the prefix containing\
    \ user, password, host, and\n   port.\n   The url-path is interpreted as a series\
    \ of FTP commands as follows:\n      Each of the <cwd> elements is to be supplied,\
    \ sequentially, as the\n      argument to a CWD (change working directory) command.\n\
    \      If the typecode is \"d\", perform a NLST (name list) command with\n   \
    \   <name> as the argument, and interpret the results as a file\n      directory\
    \ listing.\n      Otherwise, perform a TYPE command with <typecode> as the argument,\n\
    \      and then access the file whose name is <name> (for example, using\n   \
    \   the RETR command.)\n   Within a name or CWD component, the characters \"/\"\
    \ and \";\" are\n   reserved and must be encoded. The components are decoded prior\
    \ to\n   their use in the FTP protocol.  In particular, if the appropriate FTP\n\
    \   sequence to access a particular file requires supplying a string\n   containing\
    \ a \"/\" as an argument to a CWD or RETR command, it is\n   necessary to encode\
    \ each \"/\".\n   For example, the URL <URL:ftp://myname@host.dom/%2Fetc/motd>\
    \ is\n   interpreted by FTP-ing to \"host.dom\", logging in as \"myname\"\n  \
    \ (prompting for a password if it is asked for), and then executing\n   \"CWD\
    \ /etc\" and then \"RETR motd\". This has a different meaning from\n   <URL:ftp://myname@host.dom/etc/motd>\
    \ which would \"CWD etc\" and then\n   \"RETR motd\"; the initial \"CWD\" might\
    \ be executed relative to the\n   default directory for \"myname\". On the other\
    \ hand,\n   <URL:ftp://myname@host.dom//etc/motd>, would \"CWD \" with a null\n\
    \   argument, then \"CWD etc\", and then \"RETR motd\".\n   FTP URLs may also\
    \ be used for other operations; for example, it is\n   possible to update a file\
    \ on a remote file server, or infer\n   information about it from the directory\
    \ listings. The mechanism for\n   doing so is not spelled out here.\n"
- title: 3.2.3. FTP Typecode is Optional
  contents:
  - "3.2.3. FTP Typecode is Optional\n   The entire ;type=<typecode> part of a FTP\
    \ URL is optional. If it is\n   omitted, the client program interpreting the URL\
    \ must guess the\n   appropriate mode to use. In general, the data content type\
    \ of a file\n   can only be guessed from the name, e.g., from the suffix of the\
    \ name;\n   the appropriate type code to be used for transfer of the file can\n\
    \   then be deduced from the data content of the file.\n"
- title: 3.2.4 Hierarchy
  contents:
  - "3.2.4 Hierarchy\n   For some file systems, the \"/\" used to denote the hierarchical\n\
    \   structure of the URL corresponds to the delimiter used to construct a\n  \
    \ file name hierarchy, and thus, the filename will look similar to the\n   URL\
    \ path. This does NOT mean that the URL is a Unix filename.\n"
- title: 3.2.5. Optimization
  contents:
  - "3.2.5. Optimization\n   Clients accessing resources via FTP may employ additional\
    \ heuristics\n   to optimize the interaction. For some FTP servers, for example,\
    \ it\n   may be reasonable to keep the control connection open while accessing\n\
    \   multiple URLs from the same server. However, there is no common\n   hierarchical\
    \ model to the FTP protocol, so if a directory change\n   command has been given,\
    \ it is impossible in general to deduce what\n   sequence should be given to navigate\
    \ to another directory for a\n   second retrieval, if the paths are different.\
    \  The only reliable\n   algorithm is to disconnect and reestablish the control\
    \ connection.\n"
- title: 3.3. HTTP
  contents:
  - "3.3. HTTP\n   The HTTP URL scheme is used to designate Internet resources\n \
    \  accessible using HTTP (HyperText Transfer Protocol).\n   The HTTP protocol\
    \ is specified elsewhere. This specification only\n   describes the syntax of\
    \ HTTP URLs.\n   An HTTP URL takes the form:\n      http://<host>:<port>/<path>?<searchpart>\n\
    \   where <host> and <port> are as described in Section 3.1. If :<port>\n   is\
    \ omitted, the port defaults to 80.  No user name or password is\n   allowed.\
    \  <path> is an HTTP selector, and <searchpart> is a query\n   string. The <path>\
    \ is optional, as is the <searchpart> and its\n   preceding \"?\". If neither\
    \ <path> nor <searchpart> is present, the \"/\"\n   may also be omitted.\n   Within\
    \ the <path> and <searchpart> components, \"/\", \";\", \"?\" are\n   reserved.\
    \  The \"/\" character may be used within HTTP to designate a\n   hierarchical\
    \ structure.\n"
- title: 3.4. GOPHER
  contents:
  - "3.4. GOPHER\n   The Gopher URL scheme is used to designate Internet resources\n\
    \   accessible using the Gopher protocol.\n   The base Gopher protocol is described\
    \ in RFC 1436 and supports items\n   and collections of items (directories). The\
    \ Gopher+ protocol is a set\n   of upward compatible extensions to the base Gopher\
    \ protocol and is\n   described in [2]. Gopher+ supports associating arbitrary\
    \ sets of\n   attributes and alternate data representations with Gopher items.\n\
    \   Gopher URLs accommodate both Gopher and Gopher+ items and item\n   attributes.\n"
- title: 3.4.1. Gopher URL syntax
  contents:
  - "3.4.1. Gopher URL syntax\n   A Gopher URL takes the form:\n      gopher://<host>:<port>/<gopher-path>\n\
    \   where <gopher-path> is one of\n       <gophertype><selector>\n       <gophertype><selector>%09<search>\n\
    \       <gophertype><selector>%09<search>%09<gopher+_string>\n   If :<port> is\
    \ omitted, the port defaults to 70.  <gophertype> is a\n   single-character field\
    \ to denote the Gopher type of the resource to\n   which the URL refers. The entire\
    \ <gopher-path> may also be empty, in\n   which case the delimiting \"/\" is also\
    \ optional and the <gophertype>\n   defaults to \"1\".\n   <selector> is the Gopher\
    \ selector string.  In the Gopher protocol,\n   Gopher selector strings are a\
    \ sequence of octets which may contain\n   any octets except 09 hexadecimal (US-ASCII\
    \ HT or tab) 0A hexadecimal\n   (US-ASCII character LF), and 0D (US-ASCII character\
    \ CR).\n   Gopher clients specify which item to retrieve by sending the Gopher\n\
    \   selector string to a Gopher server.\n   Within the <gopher-path>, no characters\
    \ are reserved.\n   Note that some Gopher <selector> strings begin with a copy\
    \ of the\n   <gophertype> character, in which case that character will occur twice\n\
    \   consecutively. The Gopher selector string may be an empty string;\n   this\
    \ is how Gopher clients refer to the top-level directory on a\n   Gopher server.\n"
- title: 3.4.2 Specifying URLs for Gopher Search Engines
  contents:
  - "3.4.2 Specifying URLs for Gopher Search Engines\n   If the URL refers to a search\
    \ to be submitted to a Gopher search\n   engine, the selector is followed by an\
    \ encoded tab (%09) and the\n   search string. To submit a search to a Gopher\
    \ search engine, the\n   Gopher client sends the <selector> string (after decoding),\
    \ a tab,\n   and the search string to the Gopher server.\n"
- title: 3.4.3 URL syntax for Gopher+ items
  contents:
  - "3.4.3 URL syntax for Gopher+ items\n   URLs for Gopher+ items have a second encoded\
    \ tab (%09) and a Gopher+\n   string. Note that in this case, the %09<search>\
    \ string must be\n   supplied, although the <search> element may be the empty\
    \ string.\n   The <gopher+_string> is used to represent information required for\n\
    \   retrieval of the Gopher+ item. Gopher+ items may have alternate\n   views,\
    \ arbitrary sets of attributes, and may have electronic forms\n   associated with\
    \ them.\n   To retrieve the data associated with a Gopher+ URL, a client will\n\
    \   connect to the server and send the Gopher selector, followed by a tab\n  \
    \ and the search string (which may be empty), followed by a tab and the\n   Gopher+\
    \ commands.\n"
- title: 3.4.4 Default Gopher+ data representation
  contents:
  - "3.4.4 Default Gopher+ data representation\n   When a Gopher server returns a\
    \ directory listing to a client, the\n   Gopher+ items are tagged with either\
    \ a \"+\" (denoting Gopher+ items)\n   or a \"?\" (denoting Gopher+ items which\
    \ have a +ASK form associated\n   with them). A Gopher URL with a Gopher+ string\
    \ consisting of only a\n   \"+\" refers to the default view (data representation)\
    \ of the item\n   while a Gopher+ string containing only a \"?\" refer to an item\
    \ with a\n   Gopher electronic form associated with it.\n"
- title: 3.4.5 Gopher+ items with electronic forms
  contents:
  - "3.4.5 Gopher+ items with electronic forms\n   Gopher+ items which have a +ASK\
    \ associated with them (i.e. Gopher+\n   items tagged with a \"?\") require the\
    \ client to fetch the item's +ASK\n   attribute to get the form definition, and\
    \ then ask the user to fill\n   out the form and return the user's responses along\
    \ with the selector\n   string to retrieve the item.  Gopher+ clients know how\
    \ to do this but\n   depend on the \"?\" tag in the Gopher+ item description to\
    \ know when to\n   handle this case. The \"?\" is used in the Gopher+ string to\
    \ be\n   consistent with Gopher+ protocol's use of this symbol.\n"
- title: 3.4.6 Gopher+ item attribute collections
  contents:
  - "3.4.6 Gopher+ item attribute collections\n   To refer to the Gopher+ attributes\
    \ of an item, the Gopher URL's\n   Gopher+ string consists of \"!\" or \"$\".\
    \ \"!\" refers to the all of a\n   Gopher+ item's attributes. \"$\" refers to\
    \ all the item attributes for\n   all items in a Gopher directory.\n"
- title: 3.4.7 Referring to specific Gopher+ attributes
  contents:
  - "3.4.7 Referring to specific Gopher+ attributes\n   To refer to specific attributes,\
    \ the URL's gopher+_string is\n   \"!<attribute_name>\" or \"$<attribute_name>\"\
    . For example, to refer to\n   the attribute containing the abstract of an item,\
    \ the gopher+_string\n   would be \"!+ABSTRACT\".\n   To refer to several attributes,\
    \ the gopher+_string consists of the\n   attribute names separated by coded spaces.\
    \ For example,\n   \"!+ABSTRACT%20+SMELL\" refers to the +ABSTRACT and +SMELL\
    \ attributes\n   of an item.\n"
- title: 3.4.8 URL syntax for Gopher+ alternate views
  contents:
  - "3.4.8 URL syntax for Gopher+ alternate views\n   Gopher+ allows for optional\
    \ alternate data representations (alternate\n   views) of items. To retrieve a\
    \ Gopher+ alternate view, a Gopher+\n   client sends the appropriate view and\
    \ language identifier (found in\n   the item's +VIEW attribute). To refer to a\
    \ specific Gopher+ alternate\n   view, the URL's Gopher+ string would be in the\
    \ form:\n        +<view_name>%20<language_name>\n   For example, a Gopher+ string\
    \ of \"+application/postscript%20Es_ES\"\n   refers to the Spanish language postscript\
    \ alternate view of a Gopher+\n   item.\n"
- title: 3.4.9 URL syntax for Gopher+ electronic forms
  contents:
  - "3.4.9 URL syntax for Gopher+ electronic forms\n   The gopher+_string for a URL\
    \ that refers to an item referenced by a\n   Gopher+ electronic form (an ASK block)\
    \ filled out with specific\n   values is a coded version of what the client sends\
    \ to the server.\n   The gopher+_string is of the form:\n"
- title: +%091%0D%0A+-1%0D%0A<ask_item1_value>%0D%0A<ask_item2_value>%0D%0A.%0D%0A
  contents:
  - "+%091%0D%0A+-1%0D%0A<ask_item1_value>%0D%0A<ask_item2_value>%0D%0A.%0D%0A\n \
    \  To retrieve this item, the Gopher client sends:\n       <a_gopher_selector><tab>+<tab>1<cr><lf>\n\
    \       +-1<cr><lf>\n       <ask_item1_value><cr><lf>\n       <ask_item2_value><cr><lf>\n\
    \       .<cr><lf>\n   to the Gopher server.\n"
- title: 3.5. MAILTO
  contents:
  - "3.5. MAILTO\n   The mailto URL scheme is used to designate the Internet mailing\n\
    \   address of an individual or service. No additional information other\n   than\
    \ an Internet mailing address is present or implied.\n   A mailto URL takes the\
    \ form:\n        mailto:<rfc822-addr-spec>\n   where <rfc822-addr-spec> is (the\
    \ encoding of an) addr-spec, as\n   specified in RFC 822 [6]. Within mailto URLs,\
    \ there are no reserved\n   characters.\n   Note that the percent sign (\"%\"\
    ) is commonly used within RFC 822\n   addresses and must be encoded.\n   Unlike\
    \ many URLs, the mailto scheme does not represent a data object\n   to be accessed\
    \ directly; there is no sense in which it designates an\n   object. It has a different\
    \ use than the message/external-body type in\n   MIME.\n"
- title: 3.6. NEWS
  contents:
  - "3.6. NEWS\n   The news URL scheme is used to refer to either news groups or\n\
    \   individual articles of USENET news, as specified in RFC 1036.\n   A news URL\
    \ takes one of two forms:\n     news:<newsgroup-name>\n     news:<message-id>\n\
    \   A <newsgroup-name> is a period-delimited hierarchical name, such as\n   \"\
    comp.infosystems.www.misc\". A <message-id> corresponds to the\n   Message-ID\
    \ of section 2.1.5 of RFC 1036, without the enclosing \"<\"\n   and \">\"; it\
    \ takes the form <unique>@<full_domain_name>.  A message\n   identifier may be\
    \ distinguished from a news group name by the\n   presence of the commercial at\
    \ \"@\" character. No additional characters\n   are reserved within the components\
    \ of a news URL.\n   If <newsgroup-name> is \"*\" (as in <URL:news:*>), it is\
    \ used to refer\n   to \"all available news groups\".\n   The news URLs are unusual\
    \ in that by themselves, they do not contain\n   sufficient information to locate\
    \ a single resource, but, rather, are\n   location-independent.\n"
- title: 3.7. NNTP
  contents:
  - "3.7. NNTP\n   The nntp URL scheme is an alternative method of referencing news\n\
    \   articles, useful for specifying news articles from NNTP servers (RFC\n   977).\n\
    \   A nntp URL take the form:\n      nntp://<host>:<port>/<newsgroup-name>/<article-number>\n\
    \   where <host> and <port> are as described in Section 3.1. If :<port>\n   is\
    \ omitted, the port defaults to 119.\n   The <newsgroup-name> is the name of the\
    \ group, while the <article-\n   number> is the numeric id of the article within\
    \ that newsgroup.\n   Note that while nntp: URLs specify a unique location for\
    \ the article\n   resource, most NNTP servers currently on the Internet today\
    \ are\n   configured only to allow access from local clients, and thus nntp\n\
    \   URLs do not designate globally accessible resources. Thus, the news:\n   form\
    \ of URL is preferred as a way of identifying news articles.\n"
- title: 3.8. TELNET
  contents:
  - "3.8. TELNET\n   The Telnet URL scheme is used to designate interactive services\
    \ that\n   may be accessed by the Telnet protocol.\n   A telnet URL takes the\
    \ form:\n       telnet://<user>:<password>@<host>:<port>/\n   as specified in\
    \ Section 3.1. The final \"/\" character may be omitted.\n   If :<port> is omitted,\
    \ the port defaults to 23.  The :<password> can\n   be omitted, as well as the\
    \ whole <user>:<password> part.\n   This URL does not designate a data object,\
    \ but rather an interactive\n   service. Remote interactive services vary widely\
    \ in the means by\n   which they allow remote logins; in practice, the <user>\
    \ and\n   <password> supplied are advisory only: clients accessing a telnet URL\n\
    \   merely advise the user of the suggested username and password.\n"
- title: 3.9.  WAIS
  contents:
  - "3.9.  WAIS\n   The WAIS URL scheme is used to designate WAIS databases, searches,\
    \ or\n   individual documents available from a WAIS database. WAIS is\n   described\
    \ in [7]. The WAIS protocol is described in RFC 1625 [17];\n   Although the WAIS\
    \ protocol is based on Z39.50-1988, the WAIS URL\n   scheme is not intended for\
    \ use with arbitrary Z39.50 services.\n   A WAIS URL takes one of the following\
    \ forms:\n     wais://<host>:<port>/<database>\n     wais://<host>:<port>/<database>?<search>\n\
    \     wais://<host>:<port>/<database>/<wtype>/<wpath>\n   where <host> and <port>\
    \ are as described in Section 3.1. If :<port>\n   is omitted, the port defaults\
    \ to 210.  The first form designates a\n   WAIS database that is available for\
    \ searching. The second form\n   designates a particular search.  <database> is\
    \ the name of the WAIS\n   database being queried.\n   The third form designates\
    \ a particular document within a WAIS\n   database to be retrieved. In this form\
    \ <wtype> is the WAIS\n   designation of the type of the object. Many WAIS implementations\n\
    \   require that a client know the \"type\" of an object prior to\n   retrieval,\
    \ the type being returned along with the internal object\n   identifier in the\
    \ search response.  The <wtype> is included in the\n   URL in order to allow the\
    \ client interpreting the URL adequate\n   information to actually retrieve the\
    \ document.\n   The <wpath> of a WAIS URL consists of the WAIS document-id, encoded\n\
    \   as necessary using the method described in Section 2.2. The WAIS\n   document-id\
    \ should be treated opaquely; it may only be decomposed by\n   the server that\
    \ issued it.\n"
- title: 3.10 FILES
  contents:
  - "3.10 FILES\n   The file URL scheme is used to designate files accessible on a\n\
    \   particular host computer. This scheme, unlike most other URL schemes,\n  \
    \ does not designate a resource that is universally accessible over the\n   Internet.\n\
    \   A file URL takes the form:\n       file://<host>/<path>\n   where <host> is\
    \ the fully qualified domain name of the system on\n   which the <path> is accessible,\
    \ and <path> is a hierarchical\n   directory path of the form <directory>/<directory>/.../<name>.\n\
    \   For example, a VMS file\n     DISK$USER:[MY.NOTES]NOTE123456.TXT\n   might\
    \ become\n     <URL:file://vms.host.edu/disk$user/my/notes/note12345.txt>\n  \
    \ As a special case, <host> can be the string \"localhost\" or the empty\n   string;\
    \ this is interpreted as `the machine from which the URL is\n   being interpreted'.\n\
    \   The file URL scheme is unusual in that it does not specify an\n   Internet\
    \ protocol or access method for such files; as such, its\n   utility in network\
    \ protocols between hosts is limited.\n"
- title: 3.11 PROSPERO
  contents:
  - "3.11 PROSPERO\n   The Prospero URL scheme is used to designate resources that\
    \ are\n   accessed via the Prospero Directory Service. The Prospero protocol is\n\
    \   described elsewhere [14].\n   A prospero URLs takes the form:\n      prospero://<host>:<port>/<hsoname>;<field>=<value>\n\
    \   where <host> and <port> are as described in Section 3.1. If :<port>\n   is\
    \ omitted, the port defaults to 1525. No username or password is\n   allowed.\n\
    \   The <hsoname> is the host-specific object name in the Prospero\n   protocol,\
    \ suitably encoded.  This name is opaque and interpreted by\n   the Prospero server.\
    \  The semicolon \";\" is reserved and may not\n   appear without quoting in the\
    \ <hsoname>.\n   Prospero URLs are interpreted by contacting a Prospero directory\n\
    \   server on the specified host and port to determine appropriate access\n  \
    \ methods for a resource, which might themselves be represented as\n   different\
    \ URLs. External Prospero links are represented as URLs of\n   the underlying\
    \ access method and are not represented as Prospero\n   URLs.\n   Note that a\
    \ slash \"/\" may appear in the <hsoname> without quoting and\n   no significance\
    \ may be assumed by the application.  Though slashes\n   may indicate hierarchical\
    \ structure on the server, such structure is\n   not guaranteed. Note that many\
    \ <hsoname>s begin with a slash, in\n   which case the host or port will be followed\
    \ by a double slash: the\n   slash from the URL syntax, followed by the initial\
    \ slash from the\n   <hsoname>. (E.g., <URL:prospero://host.dom//pros/name> designates\
    \ a\n   <hsoname> of \"/pros/name\".)\n   In addition, after the <hsoname>, optional\
    \ fields and values\n   associated with a Prospero link may be specified as part\
    \ of the URL.\n   When present, each field/value pair is separated from each other\
    \ and\n   from the rest of the URL by a \";\" (semicolon).  The name of the field\n\
    \   and its value are separated by a \"=\" (equal sign). If present, these\n \
    \  fields serve to identify the target of the URL.  For example, the\n   OBJECT-VERSION\
    \ field can be specified to identify a specific version\n   of an object.\n"
- title: 4. REGISTRATION OF NEW SCHEMES
  contents:
  - "4. REGISTRATION OF NEW SCHEMES\n   A new scheme may be introduced by defining\
    \ a mapping onto a\n   conforming URL syntax, using a new prefix. URLs for experimental\n\
    \   schemes may be used by mutual agreement between parties. Scheme names\n  \
    \ starting with the characters \"x-\" are reserved for experimental\n   purposes.\n\
    \   The Internet Assigned Numbers Authority (IANA) will maintain a\n   registry\
    \ of URL schemes. Any submission of a new URL scheme must\n   include a definition\
    \ of an algorithm for accessing of resources\n   within that scheme and the syntax\
    \ for representing such a scheme.\n   URL schemes must have demonstrable utility\
    \ and operability.  One way\n   to provide such a demonstration is via a gateway\
    \ which provides\n   objects in the new scheme for clients using an existing protocol.\
    \  If\n   the new scheme does not locate resources that are data objects, the\n\
    \   properties of names in the new space must be clearly defined.\n   New schemes\
    \ should try to follow the same syntactic conventions of\n   existing schemes,\
    \ where appropriate.  It is likewise recommended\n   that, where a protocol allows\
    \ for retrieval by URL, that the client\n   software have provision for being\
    \ configured to use specific gateway\n   locators for indirect access through\
    \ new naming schemes.\n   The following scheme have been proposed at various times,\
    \ but this\n   document does not define their syntax or use at this time. It is\n\
    \   suggested that IANA reserve their scheme names for future definition:\n  \
    \ afs              Andrew File System global file names.\n   mid             \
    \ Message identifiers for electronic mail.\n   cid              Content identifiers\
    \ for MIME body parts.\n   nfs              Network File System (NFS) file names.\n\
    \   tn3270           Interactive 3270 emulation sessions.\n   mailserver     \
    \  Access to data available from mail servers.\n   z39.50           Access to\
    \ ANSI Z39.50 services.\n"
- title: 5. BNF for specific URL schemes
  contents:
  - "5. BNF for specific URL schemes\n   This is a BNF-like description of the Uniform\
    \ Resource Locator\n   syntax, using the conventions of RFC822, except that \"\
    |\" is used to\n   designate alternatives, and brackets [] are used around optional\
    \ or\n   repeated elements. Briefly, literals are quoted with \"\", optional\n\
    \   elements are enclosed in [brackets], and elements may be preceded\n   with\
    \ <n>* to designate n or more repetitions of the following\n   element; n defaults\
    \ to 0.\n"
  - '; The generic form of a URL is:

    '
  - 'genericurl     = scheme ":" schemepart

    '
  - '; Specific predefined schemes are defined here; new schemes

    '
  - '; may be registered with IANA

    '
  - "url            = httpurl | ftpurl | newsurl |\n                 nntpurl | telneturl\
    \ | gopherurl |\n                 waisurl | mailtourl | fileurl |\n          \
    \       prosperourl | otherurl\n"
  - '; new schemes follow the general syntax

    '
  - 'otherurl       = genericurl

    '
  - '; the scheme is in lower case; interpreters should use case-ignore

    '
  - 'scheme         = 1*[ lowalpha | digit | "+" | "-" | "." ]

    '
  - 'schemepart     = *xchar | ip-schemepart

    '
  - '; URL schemeparts for ip based protocols:

    '
  - 'ip-schemepart  = "//" login [ "/" urlpath ]

    '
  - 'login          = [ user [ ":" password ] "@" ] hostport

    '
  - 'hostport       = host [ ":" port ]

    '
  - 'host           = hostname | hostnumber

    '
  - 'hostname       = *[ domainlabel "." ] toplabel

    '
  - 'domainlabel    = alphadigit | alphadigit *[ alphadigit | "-" ] alphadigit

    '
  - 'toplabel       = alpha | alpha *[ alphadigit | "-" ] alphadigit

    '
  - 'alphadigit     = alpha | digit

    '
  - 'hostnumber     = digits "." digits "." digits "." digits

    '
  - 'port           = digits

    '
  - 'user           = *[ uchar | ";" | "?" | "&" | "=" ]

    '
  - 'password       = *[ uchar | ";" | "?" | "&" | "=" ]

    '
  - 'urlpath        = *xchar    ; depends on protocol see section 3.1

    '
  - '; The predefined schemes:

    '
  - '; FTP (see also RFC959)

    '
  - 'ftpurl         = "ftp://" login [ "/" fpath [ ";type=" ftptype ]]

    '
  - 'fpath          = fsegment *[ "/" fsegment ]

    '
  - 'fsegment       = *[ uchar | "?" | ":" | "@" | "&" | "=" ]

    '
  - 'ftptype        = "A" | "I" | "D" | "a" | "i" | "d"

    '
  - '; FILE

    '
  - 'fileurl        = "file://" [ host | "localhost" ] "/" fpath

    '
  - '; HTTP

    '
  - 'httpurl        = "http://" hostport [ "/" hpath [ "?" search ]]

    '
  - 'hpath          = hsegment *[ "/" hsegment ]

    '
  - 'hsegment       = *[ uchar | ";" | ":" | "@" | "&" | "=" ]

    '
  - 'search         = *[ uchar | ";" | ":" | "@" | "&" | "=" ]

    '
  - '; GOPHER (see also RFC1436)

    '
  - "gopherurl      = \"gopher://\" hostport [ / [ gtype [ selector\n            \
    \     [ \"%09\" search [ \"%09\" gopher+_string ] ] ] ] ]\n"
  - 'gtype          = xchar

    '
  - 'selector       = *xchar

    '
  - 'gopher+_string = *xchar

    '
  - '; MAILTO (see also RFC822)

    '
  - 'mailtourl      = "mailto:" encoded822addr

    '
  - 'encoded822addr = 1*xchar               ; further defined in RFC822

    '
  - '; NEWS (see also RFC1036)

    '
  - 'newsurl        = "news:" grouppart

    '
  - 'grouppart      = "*" | group | article

    '
  - 'group          = alpha *[ alpha | digit | "-" | "." | "+" | "_" ]

    '
  - 'article        = 1*[ uchar | ";" | "/" | "?" | ":" | "&" | "=" ] "@" host

    '
  - '; NNTP (see also RFC977)

    '
  - 'nntpurl        = "nntp://" hostport "/" group [ "/" digits ]

    '
  - '; TELNET

    '
  - 'telneturl      = "telnet://" login [ "/" ]

    '
  - '; WAIS (see also RFC1625)

    '
  - 'waisurl        = waisdatabase | waisindex | waisdoc

    '
  - 'waisdatabase   = "wais://" hostport "/" database

    '
  - 'waisindex      = "wais://" hostport "/" database "?" search

    '
  - 'waisdoc        = "wais://" hostport "/" database "/" wtype "/" wpath

    '
  - 'database       = *uchar

    '
  - 'wtype          = *uchar

    '
  - 'wpath          = *uchar

    '
  - '; PROSPERO

    '
  - 'prosperourl    = "prospero://" hostport "/" ppath *[ fieldspec ]

    '
  - 'ppath          = psegment *[ "/" psegment ]

    '
  - 'psegment       = *[ uchar | "?" | ":" | "@" | "&" | "=" ]

    '
  - 'fieldspec      = ";" fieldname "=" fieldvalue

    '
  - 'fieldname      = *[ uchar | "?" | ":" | "@" | "&" ]

    '
  - 'fieldvalue     = *[ uchar | "?" | ":" | "@" | "&" ]

    '
  - '; Miscellaneous definitions

    '
  - "lowalpha       = \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\"\
    \ |\n                 \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" |\
    \ \"p\" |\n                 \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"\
    w\" | \"x\" |\n                 \"y\" | \"z\"\n"
  - "hialpha        = \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\"\
    \ | \"I\" |\n                 \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" |\
    \ \"P\" | \"Q\" | \"R\" |\n                 \"S\" | \"T\" | \"U\" | \"V\" | \"\
    W\" | \"X\" | \"Y\" | \"Z\"\n"
  - 'alpha          = lowalpha | hialpha

    '
  - "digit          = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\"\
    \ |\n                 \"8\" | \"9\"\n"
  - 'safe           = "$" | "-" | "_" | "." | "+"

    '
  - 'extra          = "!" | "*" | "''" | "(" | ")" | ","

    '
  - 'national       = "{" | "}" | "|" | "\" | "^" | "~" | "[" | "]" | "`"

    '
  - 'punctuation    = "<" | ">" | "#" | "%" | <">

    '
  - 'reserved       = ";" | "/" | "?" | ":" | "@" | "&" | "="

    '
  - "hex            = digit | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" |\n  \
    \               \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\"\n"
  - 'escape         = "%" hex hex

    '
  - 'unreserved     = alpha | digit | safe | extra

    '
  - 'uchar          = unreserved | escape

    '
  - 'xchar          = unreserved | reserved | escape

    '
  - 'digits         = 1*digit

    '
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   The URL scheme does not in itself pose a security\
    \ threat. Users\n   should beware that there is no general guarantee that a URL\
    \ which at\n   one time points to a given object continues to do so, and does\
    \ not\n   even at some later time point to a different object due to the\n   movement\
    \ of objects on servers.\n   A URL-related security threat is that it is sometimes\
    \ possible to\n   construct a URL such that an attempt to perform a harmless idempotent\n\
    \   operation such as the retrieval of the object will in fact cause a\n   possibly\
    \ damaging remote operation to occur.  The unsafe URL is\n   typically constructed\
    \ by specifying a port number other than that\n   reserved for the network protocol\
    \ in question.  The client\n   unwittingly contacts a server which is in fact\
    \ running a different\n   protocol.  The content of the URL contains instructions\
    \ which when\n   interpreted according to this other protocol cause an unexpected\n\
    \   operation. An example has been the use of gopher URLs to cause a rude\n  \
    \ message to be sent via a SMTP server.  Caution should be used when\n   using\
    \ any URL which specifies a port number other than the default\n   for the protocol,\
    \ especially when it is a number within the reserved\n   space.\n   Care should\
    \ be taken when URLs contain embedded encoded delimiters\n   for a given protocol\
    \ (for example, CR and LF characters for telnet\n   protocols) that these are\
    \ not unencoded before transmission.  This\n   would violate the protocol but\
    \ could be used to simulate an extra\n   operation or parameter, again causing\
    \ an unexpected and possible\n   harmful remote operation to be performed.\n \
    \  The use of URLs containing passwords that should be secret is clearly\n   unwise.\n"
- title: 7. Acknowledgements
  contents:
  - "7. Acknowledgements\n   This paper builds on the basic WWW design (RFC 1630)\
    \ and much\n   discussion of these issues by many people on the network. The\n\
    \   discussion was particularly stimulated by articles by Clifford Lynch,\n  \
    \ Brewster Kahle [10] and Wengyik Yeong [18]. Contributions from John\n   Curran,\
    \ Clifford Neuman, Ed Vielmetti and later the IETF URL BOF and\n   URI working\
    \ group were incorporated.\n   Most recently, careful readings and comments by\
    \ Dan Connolly, Ned\n   Freed, Roy Fielding, Guido van Rossum, Michael Dolan,\
    \ Bert Bos, John\n   Kunze, Olle Jarnefors, Peter Svanberg and many others have\
    \ helped\n   refine this RFC.\n"
- title: 'APPENDIX: Recommendations for URLs in Context'
  contents:
  - "APPENDIX: Recommendations for URLs in Context\n   URIs, including URLs, are intended\
    \ to be transmitted through\n   protocols which provide a context for their interpretation.\n\
    \   In some cases, it will be necessary to distinguish URLs from other\n   possible\
    \ data structures in a syntactic structure. In this case, is\n   recommended that\
    \ URLs be preceeded with a prefix consisting of the\n   characters \"URL:\". For\
    \ example, this prefix may be used to\n   distinguish URLs from other kinds of\
    \ URIs.\n   In addition, there are many occasions when URLs are included in other\n\
    \   kinds of text; examples include electronic mail, USENET news\n   messages,\
    \ or printed on paper. In such cases, it is convenient to\n   have a separate\
    \ syntactic wrapper that delimits the URL and separates\n   it from the rest of\
    \ the text, and in particular from punctuation\n   marks that might be mistaken\
    \ for part of the URL. For this purpose,\n   is recommended that angle brackets\
    \ (\"<\" and \">\"), along with the\n   prefix \"URL:\", be used to delimit the\
    \ boundaries of the URL.  This\n   wrapper does not form part of the URL and should\
    \ not be used in\n   contexts in which delimiters are already specified.\n   In\
    \ the case where a fragment/anchor identifier is associated with a\n   URL (following\
    \ a \"#\"), the identifier would be placed within the\n   brackets as well.\n\
    \   In some cases, extra whitespace (spaces, linebreaks, tabs, etc.) may\n   need\
    \ to be added to break long URLs across lines.  The whitespace\n   should be ignored\
    \ when extracting the URL.\n   No whitespace should be introduced after a hyphen\
    \ (\"-\") character.\n   Because some typesetters and printers may (erroneously)\
    \ introduce a\n   hyphen at the end of line when breaking a line, the interpreter\
    \ of a\n   URL containing a line break immediately after a hyphen should ignore\n\
    \   all unencoded whitespace around the line break, and should be aware\n   that\
    \ the hyphen may or may not actually be part of the URL.\n   Examples:\n     \
    \ Yes, Jim, I found it under <URL:ftp://info.cern.ch/pub/www/doc;\n      type=d>\
    \ but you can probably pick it up from <URL:ftp://ds.in\n      ternic.net/rfc>.\
    \  Note the warning in <URL:http://ds.internic.\n      net/instructions/overview.html#WARNING>.\n"
- title: References
  contents:
  - "References\n   [1] Anklesaria, F., McCahill, M., Lindner, P., Johnson, D.,\n\
    \       Torrey, D., and B. Alberti, \"The Internet Gopher Protocol\n       (a\
    \ distributed document search and retrieval protocol)\",\n       RFC 1436, University\
    \ of Minnesota, March 1993.\n       <URL:ftp://ds.internic.net/rfc/rfc1436.txt;type=a>\n\
    \   [2] Anklesaria, F., Lindner, P., McCahill, M., Torrey, D.,\n       Johnson,\
    \ D., and B. Alberti, \"Gopher+: Upward compatible\n       enhancements to the\
    \ Internet Gopher protocol\",\n       University of Minnesota, July 1993.\n  \
    \     <URL:ftp://boombox.micro.umn.edu/pub/gopher/gopher_protocol\n       /Gopher+/Gopher+.txt>\n\
    \   [3] Berners-Lee, T., \"Universal Resource Identifiers in WWW: A\n       Unifying\
    \ Syntax for the Expression of Names and Addresses of\n       Objects on the Network\
    \ as used in the World-Wide Web\", RFC\n       1630, CERN, June 1994.\n      \
    \ <URL:ftp://ds.internic.net/rfc/rfc1630.txt>\n   [4] Berners-Lee, T., \"Hypertext\
    \ Transfer Protocol (HTTP)\",\n       CERN, November 1993.\n       <URL:ftp://info.cern.ch/pub/www/doc/http-spec.txt.Z>\n\
    \   [5] Braden, R., Editor, \"Requirements for Internet Hosts --\n       Application\
    \ and Support\", STD 3, RFC 1123, IETF, October 1989.\n       <URL:ftp://ds.internic.net/rfc/rfc1123.txt>\n\
    \   [6] Crocker, D. \"Standard for the Format of ARPA Internet Text\n       Messages\"\
    , STD 11, RFC 822, UDEL, April 1982.\n       <URL:ftp://ds.internic.net/rfc/rfc822.txt>\n\
    \   [7] Davis, F., Kahle, B., Morris, H., Salem, J., Shen, T., Wang, R.,\n   \
    \    Sui, J., and M. Grinbaum, \"WAIS Interface Protocol Prototype\n       Functional\
    \ Specification\", (v1.5), Thinking Machines\n       Corporation, April 1990.\n\
    \       <URL:ftp://quake.think.com/pub/wais/doc/protspec.txt>\n   [8] Horton,\
    \ M. and R. Adams, \"Standard For Interchange of USENET\n       Messages\", RFC\
    \ 1036, AT&T Bell Laboratories, Center for Seismic\n       Studies, December 1987.\n\
    \       <URL:ftp://ds.internic.net/rfc/rfc1036.txt>\n   [9] Huitema, C., \"Naming:\
    \ Strategies and Techniques\", Computer\n       Networks and ISDN Systems 23 (1991)\
    \ 107-110.\n  [10] Kahle, B., \"Document Identifiers, or International Standard\n\
    \       Book Numbers for the Electronic Age\", 1991.\n       <URL:ftp://quake.think.com/pub/wais/doc/doc-ids.txt>\n\
    \  [11] Kantor, B. and P. Lapsley, \"Network News Transfer Protocol:\n       A\
    \ Proposed Standard for the Stream-Based Transmission of News\",\n       RFC 977,\
    \ UC San Diego & UC Berkeley, February 1986.\n       <URL:ftp://ds.internic.net/rfc/rfc977.txt>\n\
    \  [12] Kunze, J., \"Functional Requirements for Internet Resource\n       Locators\"\
    , Work in Progress, December 1994.\n       <URL:ftp://ds.internic.net/internet-drafts\n\
    \       /draft-ietf-uri-irl-fun-req-02.txt>\n  [13] Mockapetris, P., \"Domain\
    \ Names - Concepts and Facilities\",\n       STD 13, RFC 1034, USC/Information\
    \ Sciences Institute,\n       November 1987.\n       <URL:ftp://ds.internic.net/rfc/rfc1034.txt>\n\
    \  [14] Neuman, B., and S. Augart, \"The Prospero Protocol\",\n       USC/Information\
    \ Sciences Institute, June 1993.\n       <URL:ftp://prospero.isi.edu/pub/prospero/doc\n\
    \       /prospero-protocol.PS.Z>\n  [15] Postel, J. and J. Reynolds, \"File Transfer\
    \ Protocol (FTP)\",\n       STD 9, RFC 959, USC/Information Sciences Institute,\n\
    \       October 1985.\n       <URL:ftp://ds.internic.net/rfc/rfc959.txt>\n  [16]\
    \ Sollins, K. and L. Masinter, \"Functional Requirements for\n       Uniform Resource\
    \ Names\", RFC 1737, MIT/LCS, Xerox Corporation,\n       December 1994.\n    \
    \   <URL:ftp://ds.internic.net/rfc/rfc1737.txt>\n  [17] St. Pierre, M, Fullton,\
    \ J., Gamiel, K., Goldman, J., Kahle, B.,\n       Kunze, J., Morris, H., and F.\
    \ Schiettecatte, \"WAIS over\n       Z39.50-1988\", RFC 1625, WAIS, Inc., CNIDR,\
    \ Thinking Machines\n       Corp., UC Berkeley, FS Consulting, June 1994.\n  \
    \     <URL:ftp://ds.internic.net/rfc/rfc1625.txt>\n  [18] Yeong, W. \"Towards\
    \ Networked Information Retrieval\", Technical\n       report 91-06-25-01, Performance\
    \ Systems International, Inc.\n       <URL:ftp://uu.psi.com/wp/nir.txt>, June\
    \ 1991.\n  [19] Yeong, W., \"Representing Public Archives in the Directory\",\n\
    \       Work in Progress, November 1991.\n  [20] \"Coded Character Set -- 7-bit\
    \ American Standard Code for\n       Information Interchange\", ANSI X3.4-1986.\n"
- title: Editors' Addresses
  contents:
  - 'Editors'' Addresses

    '
  - 'Tim Berners-Lee

    '
  - 'World-Wide Web project

    '
  - 'CERN,

    '
  - '1211 Geneva 23,

    '
  - 'Switzerland

    '
  - 'Phone: +41 (22)767 3755

    '
  - 'Fax: +41 (22)767 7155

    '
  - 'EMail: timbl@info.cern.ch

    '
  - 'Larry Masinter

    '
  - 'Xerox PARC

    '
  - '3333 Coyote Hill Road

    '
  - 'Palo Alto, CA 94034

    '
  - 'Phone: (415) 812-4365

    '
  - 'Fax: (415) 812-4333

    '
  - 'EMail: masinter@parc.xerox.com

    '
  - 'Mark McCahill

    '
  - 'Computer and Information Services,

    '
  - 'University of Minnesota

    '
  - 'Room 152 Shepherd Labs

    '
  - '100 Union Street SE

    '
  - 'Minneapolis, MN 55455

    '
  - 'Phone: (612) 625 1300

    '
  - 'EMail: mpm@boombox.micro.umn.edu

    '
