- title: __initial_text__
  contents:
  - '         The Q Method of Implementing TELNET Option Negotiation

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is RFC discusses an implementation approach to option\n\
    \   negotiation in the Telnet protocol (RFC 854).  It does not propose\n   any\
    \ changes to the TELNET protocol.  Rather, it discusses the\n   implementation\
    \ of the protocol of one feature, only.  This is not a\n   protocol specification.\
    \  This is an experimental method of\n   implementing a protocol.  This memo is\
    \ not a recommendation of the\n   Telnet Working Group of the Internet Engineering\
    \ Task Force (IETF).\n   This RFC is Copyright 1990, Daniel J. Bernstein.  However,\n\
    \   distribution of this memo in original form is unlimited.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This RFC amplifies, supplements, and extends the RFC 854\
    \ [7] option\n   negotiation rules and guidelines, which are insufficient to prevent\n\
    \   all option negotiation loops.  This RFC also presents an example of\n   correct\
    \ implementation.\n   DISCUSSION:\n   The two items in this RFC of the most interest\
    \ to implementors are\n   1. the examples of option negotiation loops given below;\
    \ and 2. the\n   example of a TELNET state machine preventing loops.\n      1.\
    \ Implementors of TELNET should read the examples of option\n         negotiation\
    \ loops and beware that preventing such loops is a\n         nontrivial task.\n\
    \      2. Section 7 of this RFC shows by example a working method\n         of\
    \ avoiding loops.  It prescribes the state information that\n         you must\
    \ keep about each side of each option; it shows what\n         to do in each state\
    \ when you receive WILL/WONT/DO/DONT from\n         the network, and when the\
    \ user or process requests that an\n         option be enabled or disabled.  An\
    \ implementor who uses the\n         procedures given in that example need not\
    \ worry about\n         compliance with this RFC or with a large chunk of RFC\
    \ 854.\n   In short, all implementors should be familiar with TELNET loops, and\n\
    \   some implementors may wish to use the pre-written example here in\n   writing\
    \ a new TELNET implementation.\n   NOTE: Reading This Document\n      A TELNET\
    \ implementation is not compliant with this RFC if it fails\n      to satisfy\
    \ all rules marked MUST.  It is compliant if it satisfies\n      all rules marked\
    \ MUST.  If it is compliant, it is unconditionally\n      compliant if it also\
    \ satisfies all rules marked SHOULD and\n      conditionally compliant otherwise.\
    \  Rules marked MAY are optional.\n      Options are in almost all cases negotiated\
    \ separately for each\n      side of the connection.  The option on one side is\
    \ separate from\n      the option on the other side. In this document, \"the\"\
    \ option\n      referred to by a DONT/WONT or DO/WILL is really two options,\n\
    \      combined only for semantic convenience.  Each sentence could be\n     \
    \ split into two, one with the words before the slash and one with\n      the\
    \ words after the slash.\n      An implementor should be able to determine whether\
    \ or not an\n      implementation complies with this RFC without reading any text\n\
    \      marked DISCUSSION.  An implementor should be able to implement\n      option\
    \ negotiation machinery compliant with both this RFC and RFC\n      854 using\
    \ just the information in Section 7.\n"
- title: 2. RFC 854 Option Negotiation Requirements
  contents:
  - "2. RFC 854 Option Negotiation Requirements\n   As specified by RFC 854: A TELNET\
    \ implementation MUST obey a refusal\n   to enable an option; i.e., if it receives\
    \ a DONT/WONT in response to\n   a WILL/DO, it MUST NOT enable the option.\n \
    \  DISCUSSION:\n      Where RFC 854 implies that the other side may reject a request\
    \ to\n      enable an option, it means that you must accept such a rejection.\n\
    \   It MUST therefore remember that it is negotiating a WILL/DO, and this\n  \
    \ negotiation state MUST be separate from the enabled state and from\n   the disabled\
    \ state.  During the negotiation state, any effects of\n   having the option enabled\
    \ MUST NOT be used.\n   If it receives WONT/DONT and the option is enabled, it\
    \ MUST respond\n   DONT/WONT repectively and disable the option.  It MUST NOT\
    \ initiate a\n   DO/WILL negotiation for an already enabled option or a DONT/WONT\n\
    \   negotiation for a disabled option.  It MUST NOT respond to receipt of\n  \
    \ such a negotiation.  It MUST respond to receipt of a negotiation that\n   does\
    \ propose to change the status quo.\n   DISCUSSION:\n      Many existing implementations\
    \ respond to rejection by confirming\n      the rejection; i.e., if they send\
    \ WILL and receive DONT, they send\n      WONT.  This has been construed as acceptable\
    \ behavior under a\n      certain (strained) interpretation of RFC 854.  However,\
    \ to allow\n      this possibility severely complicates later rules; there seems\
    \ to\n      be no use for the wasted bandwidth and processing.  Note that an\n\
    \      implementation compliant with this RFC will simply ignore the\n      extra\
    \ WONT if the other side sends it.\n   The implementation MUST NOT automatically\
    \ respond to the rejection of\n   a request by submitting a new request.  As a\
    \ rule of thumb, new\n   requests should be sent either at the beginning of a\
    \ connection or in\n   response to an external stimulus, i.e., input from the\
    \ human user or\n   from the process behind the server.\n   A TELNET implementation\
    \ MUST refuse (DONT/WONT) a request to enable\n   an option for which it does\
    \ not comply with the appropriate protocol\n   specification.\n   DISCUSSION:\n\
    \      This is not stated as strongly in RFC 854.  However, any other\n      action\
    \ would be counterproductive.  This rule appears in\n      Requirements for Internet\
    \ Hosts [6, Section 3.2.2]; it appears\n      here for completeness.\n"
- title: '3. Rule: Remember DONT/WONT requests'
  contents:
  - "3. Rule: Remember DONT/WONT requests\n   A TELNET implementation MUST remember\
    \ starting a DONT/WONT\n   negotiation.\n   DISCUSSION:\n      It is not clear\
    \ from RFC 854 whether or not TELNET must remember\n      beginning a DONT/WONT\
    \ negotiation.  There seem to be no reasons to\n      remember starting a DONT/WONT\
    \ negotiation: 1. The argument for\n      remembering a DO/WILL negotiation (viz.,\
    \ the state of negotiating\n      for enabling means different things for the\
    \ data stream than the\n      state of having the option enabled) does not apply.\
    \  2. There is\n      no choice for the other side in responding to a DONT/WONT;\
    \ the\n      option is going to end up disabled.  3. If we simply disable the\n\
    \      option immediately and forget negotiating, we will ignore the\n      WONT/DONT\
    \ response since the option is disabled.\n      Unfortunately, that conclusion\
    \ is wrong.  Consider the following\n      TELNET conversation between two parties,\
    \ \"us\" and \"him\".  (The\n      reader of this RFC may want to sort the steps\
    \ into chronological\n      order for a different view.)\n      LOOP EXAMPLE 1\n\
    \         Both sides know that the option is on.\n         On his side:\n    \
    \   1 He decides to disable.  He sends DONT and disables the option.\n       2\
    \ He decides to reenable.  He sends DO and remembers he is\n         negotiating.\n\
    \       5 He receives WONT and gives up on negotiation.\n       6 He decides to\
    \ try once again to reenable.  He sends DO and\n         remembers he is negotiating.\n\
    \       7 He receives WONT and gives up on negotiation.\n         For whatever\
    \ reason, he decides to agree with future requests.\n      10 He receives WILL\
    \ and agrees. He responds DO and enables the\n         option.\n      11 He receives\
    \ WONT and sighs. He responds DONT and disables the\n         option.\n      \
    \   (repeat 10 and then 11, forever)\n         On our side:\n       3 We receive\
    \ DONT and sigh.  We respond WONT and disable the\n         option.\n       4\
    \ We receive DO but disagree.  We respond WONT.\n       8 We receive DO and decide\
    \ to agree.  We respond WILL and enable\n         the option.\n       9 We decide\
    \ to disable.  We send WONT and disable the option.\n         For whatever reason,\
    \ we decide to agree with future requests.\n      12 We receive DO and agree.\
    \  We send WILL and enable the option.\n      13 We receive DONT and sigh.  We\
    \ send WONT and disable the option.\n         (repeat 12 and then 13, forever)\n\
    \      Both sides have followed RFC 854; but we end in an option\n      negotiation\
    \ loop, as DONT DO DO and then DO DONT forever travel\n      through the network\
    \ one way, and WONT WONT followed by WILL WONT\n      forever travel through the\
    \ network the other way.  The behavior in\n      steps 1 and 9 is responsible\
    \ for this loop.  Hence this section's\n      rule.  In Section 6 below is discussion\
    \ of whether separate states\n      are needed for \"negotiate for disable\" and\
    \ \"negotiate for enable\"\n      or whether a single \"negotiate\" state suffices.\n"
- title: '4. Rule: Prohibit new requests before completing old negotiation'
  contents:
  - "4. Rule: Prohibit new requests before completing old negotiation\n   A TELNET\
    \ implementation MUST NOT initiate a new WILL/WONT/DO/DONT\n   request about an\
    \ option that is under negotiation, i.e., for which it\n   has already made such\
    \ a request and not yet received a response.\n   DISCUSSION:\n      It is unclear\
    \ from RFC 854 whether or not a TELNET implementation\n      may allow new requests\
    \ about an option that is currently under\n      negotiation; it certainly seems\
    \ limiting to prohibit \"option\n      typeahead\".  Unfortunately, consider the\
    \ following:\n      LOOP EXAMPLE 2\n         Suppose an option is disabled, and\
    \ we decide in quick\n         succession to enable it, disable it, and reenable\
    \ it.  We send\n         WILL WONT WILL and at the end remember that we are negotiating.\n\
    \         The other side agrees with DO DONT DO. We receive the first DO,\n  \
    \       enable the option, and forget we have negotiated.  Now DONT DO\n     \
    \    are coming through the network and both sides have forgotten\n         they\
    \ are negotiating; consequently we loop.\n      (All possible TELNET loops eventually\
    \ degenerate into the same\n      form, where WILL WONT [or WONT WILL, or WILL\
    \ WONT WILL WONT, etc.]\n      go through the network while both sides think negotiation\
    \ is over;\n      the response is DO DONT and we loop forever.  TELNET implementors\n\
    \      are encouraged to implement any option that can detect such a loop\n  \
    \    and cut it off; e.g., a method of explicitly differentiating\n      requests\
    \ from acknowledgments would be sufficient.  No such option\n      exists as of\
    \ February 1990.)\n      This particular case is of considerable practical importance:\
    \ most\n      combinations of existing user-server TELNET implementations do\n\
    \      enter an infinite loop when asked quickly a few times to enable\n     \
    \ and then disable an option.  This has taken on an even greater\n      importance\
    \ with the advent of LINEMODE [4], because LINEMODE is\n      the first option\
    \ that tends to generate such rapidly changing\n      requests in the normal course\
    \ of communication.  It is clear that\n      a new rule is needed.\n      One\
    \ might try to prevent the several-alternating-requests problem\n      by maintaining\
    \ a more elaborate state than YES/NO/WANTwhatever,\n      e.g., a state that records\
    \ all outstanding requests.  Dave Borman\n      has proposed an apparently working\
    \ scheme [2] that won't blow up\n      if both sides initiate several requests\
    \ at once, and that seems to\n      prevent option negotiation loops; complete\
    \ analysis of his\n      solution is somewhat difficult since it means that TELNET\
    \ can no\n      longer be a finite-state automaton.  He has implemented his\n\
    \      solution in the latest BSD telnet version [5]; as of May 1989, he\n   \
    \   does not intend to publish it for others to use [3].\n      Here the author\
    \ decided to preserve TELNET's finite-state\n      property, for robustness and\
    \ because the result can be easily\n      proven to work.  Hence the above rule.\n\
    \      A more restrictive solution would be to buffer all data and do\n      absolutely\
    \ nothing until the response comes back.  There is no\n      apparent reason for\
    \ this, though some existing TELNET\n      implementations do so anyway at the\
    \ beginning of a connection,\n      when most options are negotiated.\n"
- title: 5. How to reallow the request queue
  contents:
  - "5. How to reallow the request queue\n   DISCUSSION:\n      The above rule prevents\
    \ queueing of more than one request through\n      the network.  However, it is\
    \ possible to queue new requests within\n      the TELNET implementation, so that\
    \ \"option typeahead\" is\n      effectively restored.\n      An obvious possibility\
    \ is to maintain a list of requests that have\n      been made but not yet sent,\
    \ so that when one negotiation finishes,\n      the next can be started immediately.\
    \  So while negotiating for a\n      WILL, TELNET could buffer the user's requests\
    \ for WONT, then WILL\n      again, then WONT, then WILL, then WONT, as far as\
    \ desired.\n      This requires a dynamic and potentially unmanageable buffer.\n\
    \      However, the restrictions upon possible requests guarantee that\n     \
    \ the list of requests must simply alternate between WONT and WILL.\n      It\
    \ is wasteful to enable an option and then disable it, just to\n      enable it\
    \ again; we might as well just enable it in the first\n      place.  The few possible\
    \ exceptions to this rule do not outweigh\n      the immense simplification afforded\
    \ by remembering only the last\n      few entries on the queue.\n      To be more\
    \ precise, during a WILL negotiation, the only sensible\n      queues are WONT\
    \ and WONT WILL, and similarly during a WONT\n      negotiation.  In the interest\
    \ of simplicity, the Q method does not\n      allow the WONT WILL possibility.\n\
    \      We are now left with a queue consisting of either nothing or the\n    \
    \  opposite of the current negotiation.  When we receive a reply to\n      the\
    \ negotiation, if the queue indicates that the option should be\n      changed,\
    \ we send the opposite request immediately and empty the\n      queue.  Note that\
    \ this does not conflict with the RFC 854 rule\n      about automatic regeneration\
    \ of requests, as these new requests\n      are simply the delayed effects of\
    \ user or process commands.\n   An implementation SHOULD support the queue, where\
    \ support is defined\n   by the rules following.\n   If it does support the queue,\
    \ and if an option is currently under\n   negotiation, it MUST NOT handle a new\
    \ request from the user or\n   process to switch the state of that option by sending\
    \ a new request\n   through the network.  Instead, it MUST remember internally\
    \ that the\n   new request was made.\n   If the user or process makes a second\
    \ new request, for switching back\n   again, while the original negotiation is\
    \ still incomplete, the\n   implementation SHOULD handle the request simply by\
    \ forgetting the\n   previous one.  The third request SHOULD be treated like the\
    \ first,\n   etc.  In any case, these further requests MUST NOT generate immediate\n\
    \   requests through the network.\n   When the option negotiation completes, if\
    \ the implementation is\n   remembering a request internally, and that request\
    \ is for the\n   opposite state to the result of the completed negotiation, then\
    \ the\n   implementation MUST act as if that request had been made after the\n\
    \   completion of the negotiation.  It SHOULD thus immediately generate a\n  \
    \ new request through the network.\n   The implementation MAY provide a method\
    \ by which support for the\n   queue may be turned off and back on.  In this case,\
    \ it MUST default\n   to having the support turned on.  Furthermore, when support\
    \ is turned\n   off, if the implementation is remembering a new request for an\n\
    \   outstanding negotiation, it SHOULD continue remembering and then deal\n  \
    \ with it at the close of the outstanding negotiation, as if support\n   were\
    \ still turned on through that point.\n   DISCUSSION:\n      It is intended (and\
    \ it is the author's belief) that this queue\n      system restores the full functionality\
    \ of TELNET.  Dave Borman has\n      provided some informal analysis of this issue\
    \ [1]; the most\n      important possible problem of note is that certain options\
    \ which\n      may require buffering could be slowed by the queue.  The author\n\
    \      believes that network delays caused by buffering are independent\n    \
    \  of the implementation method used, and that the Q Method does not\n      cause\
    \ any problems; this is borne out by examples.\n"
- title: '6. Rule: Separate WANTNO and WANTYES'
  contents:
  - "6. Rule: Separate WANTNO and WANTYES\n   Implementations SHOULD separate any\
    \ states of negotiating WILL/DO\n   from any states of negotiating WONT/DONT.\n\
    \   DISCUSSION:\n      It is possible to maintain a working TELNET implementation\
    \ if the\n      NO/YES/WANTNO/WANTYES states are simplified to NO/YES/WANT.\n\
    \      However, in a hostile environment this is a bad idea, as it means\n   \
    \   that handling a DO/WILL response to a WONT/DONT cannot be done\n      correctly.\
    \  It does not greatly simplify code; and the simplicity\n      gained is lost\
    \ in the extra complexity needed to maintain the\n      queue.\n"
- title: 7. Example of Correct Implementation
  contents:
  - "7. Example of Correct Implementation\n   To ease the task of writing TELNET implementations,\
    \ the author\n   presents here a precise example of the response that a compliant\n\
    \   TELNET implementation could give in each possible situation.  All\n   TELNET\
    \ implementations compliant with this RFC SHOULD follow the\n   procedures shown\
    \ here.\n   EXAMPLE STATE MACHINE\n   FOR THE Q METHOD OF IMPLEMENTING TELNET\
    \ OPTION NEGOTIATION\n      There are two sides, we (us) and he (him).  We keep\
    \ four\n      variables:\n         us: state of option on our side (NO/WANTNO/WANTYES/YES)\n\
    \         usq: a queue bit (EMPTY/OPPOSITE) if us is WANTNO or WANTYES\n     \
    \    him: state of option on his side\n         himq: a queue bit if him is WANTNO\
    \ or WANTYES\n      An option is enabled if and only if its state is YES.  Note\
    \ that\n      us/usq and him/himq could be combined into two six-choice states.\n\
    \      \"Error\" below means that producing diagnostic information may be a\n\
    \      good idea, though it isn't required.\n      Upon receipt of WILL, we choose\
    \ based upon him and himq:\n         NO            If we agree that he should\
    \ enable, him=YES, send\n                       DO; otherwise, send DONT.\n  \
    \       YES           Ignore.\n         WANTNO  EMPTY Error: DONT answered by\
    \ WILL. him=NO.\n              OPPOSITE Error: DONT answered by WILL. him=YES*,\n\
    \                       himq=EMPTY.\n         WANTYES EMPTY him=YES.\n       \
    \       OPPOSITE him=WANTNO, himq=EMPTY, send DONT.\n      * This behavior is\
    \ debatable; DONT will never be answered by WILL\n        over a reliable connection\
    \ between TELNETs compliant with this\n        RFC, so this was chosen (1) not\
    \ to generate further messages,\n        because if we know we're dealing with\
    \ a noncompliant TELNET we\n        shouldn't trust it to be sensible; (2) to\
    \ empty the queue\n        sensibly.\n      Upon receipt of WONT, we choose based\
    \ upon him and himq:\n         NO            Ignore.\n         YES           him=NO,\
    \ send DONT.\n         WANTNO  EMPTY him=NO.\n              OPPOSITE him=WANTYES,\
    \ himq=NONE, send DO.\n         WANTYES EMPTY him=NO.*\n              OPPOSITE\
    \ him=NO, himq=NONE.**\n      * Here is the only spot a length-two queue could\
    \ be useful; after\n        a WILL negotiation was refused, a queue of WONT WILL\
    \ would mean\n        to request the option again. This seems of too little utility\n\
    \        and too much potential waste; there is little chance that the\n     \
    \   other side will change its mind immediately.\n      ** Here we don't have\
    \ to generate another request because we've\n         been \"refused into\" the\
    \ correct state anyway.\n      If we decide to ask him to enable:\n         NO\
    \            him=WANTYES, send DO.\n         YES           Error: Already enabled.\n\
    \         WANTNO  EMPTY If we are queueing requests, himq=OPPOSITE;\n        \
    \               otherwise, Error: Cannot initiate new request\n              \
    \         in the middle of negotiation.\n              OPPOSITE Error: Already\
    \ queued an enable request.\n         WANTYES EMPTY Error: Already negotiating\
    \ for enable.\n              OPPOSITE himq=EMPTY.\n      If we decide to ask him\
    \ to disable:\n         NO            Error: Already disabled.\n         YES \
    \          him=WANTNO, send DONT.\n         WANTNO  EMPTY Error: Already negotiating\
    \ for disable.\n              OPPOSITE himq=EMPTY.\n         WANTYES EMPTY If\
    \ we are queueing requests, himq=OPPOSITE;\n                       otherwise,\
    \ Error: Cannot initiate new request\n                       in the middle of\
    \ negotiation.\n              OPPOSITE Error: Already queued a disable request.\n\
    \      We handle the option on our side by the same procedures, with DO-\n   \
    \   WILL, DONT-WONT, him-us, himq-usq swapped.\n"
- title: 8. References
  contents:
  - "8. References\n   [1] Borman, D., private communication, April 1989.\n   [2]\
    \ Borman, D., private communication, May 1989.\n   [3] Borman, D., private communication,\
    \ May 1989.\n   [4] Borman, D., Editor, \"Telnet Linemode Option\", RFC 1116,\
    \ Cray\n       Research, August 1989.\n   [5] Borman, D., BSD Telnet Source, November\
    \ 1989.\n   [6] Braden, R., Editor, \"Requirements for Internet Hosts --\n   \
    \    Application and Support\", RFC 1123, USC/Information Sciences\n       Institute,\
    \ October 1989.\n   [7] Postel, J., and J. Reynolds, \"Telnet Protocol Specification\"\
    , RFC\n       854, USC/Information Sciences Institute, May 1983.\n"
- title: 9. Acknowledgments
  contents:
  - "9. Acknowledgments\n   Thanks to Dave Borman, dab@opus.cray.com, for his helpful\
    \ comments.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Daniel J. Bernstein\n   5 Brewster Lane\n   Bellport, NY\
    \ 11713\n   Phone:  516-286-1339\n   Email:  brnstnd@acf10.nyu.edu\n"
