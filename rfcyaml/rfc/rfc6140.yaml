- contents:
  - "                Registration for Multiple Phone Numbers\n                in the
    Session Initiation Protocol (SIP)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a mechanism by which a Session Initiation\n
    \  Protocol (SIP) server acting as a traditional Private Branch Exchange\n   (PBX)
    can register with a SIP Service Provider (SSP) to receive phone\n   calls for
    SIP User Agents (UAs).  In order to function properly, this\n   mechanism requires
    that each of the Addresses of Record (AORs)\n   registered in bulk map to a unique
    set of contacts.  This requirement\n   is satisfied by AORs representing phone
    numbers regardless of the\n   domain, since phone numbers are fully qualified
    and globally unique.\n   This document therefore focuses on this use case.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6140.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Constraints .....................................................3\n   3.
    Terminology and Conventions .....................................4\n   4. Mechanism
    Overview ..............................................5\n   5. Registering for
    Multiple Phone Numbers ..........................5\n      5.1. SIP-PBX Behavior
    ...........................................5\n      5.2. Registrar Behavior .........................................6\n
    \     5.3. SIP URI \"user\" Parameter Handling ..........................8\n   6.
    SSP Processing of Inbound Requests ..............................8\n   7. Interaction
    with Other Mechanisms ...............................9\n      7.1. Globally Routable
    User Agent URIs (GRUU) ...................9\n           7.1.1. Public GRUUs ........................................9\n
    \          7.1.2. Temporary GRUUs ....................................11\n      7.2.
    Registration Event Package ................................16\n           7.2.1.
    SIP-PBX Aggregate Registration State ...............16\n           7.2.2. Individual
    AOR Registration State ..................16\n      7.3. Client-Initiated (Outbound)
    Connections ...................18\n      7.4. Non-Adjacent Contact Registration
    (Path) and\n           Service-Route Discovery ...................................19\n
    \  8. Examples .......................................................20\n      8.1.
    Usage Scenario: Basic Registration ........................20\n      8.2. Usage
    Scenario: Using Path to Control Request URI .........22\n   9. IANA Considerations
    ............................................24\n      9.1. New SIP Option Tag
    ........................................24\n      9.2. New SIP URI Parameters
    ....................................25\n           9.2.1. 'bnc' SIP URI Parameter
    ............................25\n           9.2.2. 'sg' SIP URI Parameter .............................25\n
    \     9.3. New SIP Header Field Parameter ............................25\n   10.
    Security Considerations .......................................25\n   11. Acknowledgements
    ..............................................28\n   12. References ....................................................28\n
    \     12.1. Normative References .....................................28\n      12.2.
    Informative References ...................................29\n   Appendix A. Requirements
    Analysis .................................31\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Session Initiation Protocol (SIP) is an application-layer
    control\n   (signaling) protocol for creating, modifying, and terminating\n   sessions
    with one or more participants.  One of SIP's primary\n   functions is providing
    rendezvous between users.  By design, these\n   rendezvous have been provided
    through a combination of the server\n   look-up procedures defined in RFC 3263
    [4] and the registrar\n   procedures described in RFC 3261 [3].\n   The intention
    of the original protocol design was that any user's AOR\n   (Address of Record)
    would be handled by the authority indicated by\n   the hostport portion of the
    AOR.  The users would register individual\n   reachability information with this
    authority, which would then route\n   incoming requests accordingly.\n   In actual
    deployments, some SIP servers have been deployed in\n   architectures that, for
    various reasons, have requirements to provide\n   dynamic routing information
    for large blocks of AORs, where all of\n   the AORs in the block were to be handled
    by the same server.  For\n   purposes of efficiency, many of these deployments
    do not wish to\n   maintain separate registrations for each of the AORs in the
    block.\n   Thus, an alternate mechanism to provide dynamic routing information\n
    \  for blocks of AORs is desirable.\n   Although the use of SIP REGISTER request
    messages to update\n   reachability information for multiple users simultaneously
    is\n   somewhat beyond the original semantics defined for REGISTER requests\n
    \  by RFC 3261 [3], this approach has seen significant deployment in\n   certain
    environments.  In particular, deployments in which small to\n   medium SIP-PBX
    servers are addressed using E.164 numbers have used\n   this mechanism to avoid
    the need to maintain DNS entries or static IP\n   addresses for the SIP-PBX servers.\n
    \  In recognition of the momentum that REGISTER-based approaches have\n   seen
    in deployments, this document defines a REGISTER-based approach.\n   Since E.164-addressed
    UAs are very common today in SIP-PBX\n   environments, and since SIP URIs in which
    the user portion is an\n   E.164 number are always globally unique, regardless
    of the domain,\n   this document focuses on registration of SIP URIs in which
    the user\n   portion is an E.164 number.\n"
  title: 1.  Introduction
- contents:
  - "2.  Constraints\n   Within the problem space that has been established for this
    work,\n   several constraints shape our solution.  These are defined in the\n
    \  MARTINI requirements document [22] and are analyzed in Appendix A.\n   In terms
    of impact to the solution at hand, the following two\n   constraints have the
    most profound effect: (1) The SIP-PBX cannot be\n   assumed to be assigned a static
    IP address; and (2) No DNS entry can\n   be relied upon to consistently resolve
    to the IP address of the SIP-\n   PBX.\n"
  title: 2.  Constraints
- contents:
  - "3.  Terminology and Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
    2119 [2].\n   Further, the term \"SSP\" is meant as an acronym for a \"SIP Service\n
    \  Provider,\" while the term \"SIP-PBX\" is used to indicate a SIP Private\n
    \  Branch Exchange.\n      Indented portions of the document, such as this one,
    form non-\n      normative, explanatory sections of the document.\n   Although
    SIP is a text-based protocol, some of the examples in this\n   document cannot
    be unambiguously rendered without additional markup\n   due to the constraints
    placed on the formatting of RFCs.  This\n   document uses the <allOneLine/> markup
    convention established in RFC\n   4475 [17] to avoid ambiguity and meet the RFC
    layout requirements.\n   For the sake of completeness, the text defining this
    markup (Section\n   2.1 of RFC 4475 [17]) is reproduced in its entirety below:\n
    \     Several of these examples contain unfolded lines longer than 72\n      characters.
    \ These are captured between <allOneLine/> tags.  The\n      single unfolded line
    is reconstructed by directly concatenating\n      all lines appearing between
    the tags (discarding any line feeds or\n      carriage returns).  There will be
    no whitespace at the end of\n      lines.  Any whitespace appearing at a fold-point
    will appear at\n      the beginning of a line.\n      The following represent
    the same string of bits:\n      Header-name: first value, reallylongsecondvalue,
    third value\n      <allOneLine>\n      Header-name: first value,\n       reallylongsecondvalue\n
    \     , third value\n      </allOneLine>\n      <allOneLine>\n      Header-name:
    first value,\n       reallylong\n      second\n      value,\n       third value\n
    \     </allOneLine>\n      Note that this is NOT SIP header-line folding, where
    different\n      strings of bits have equivalent meaning.\n"
  title: 3.  Terminology and Conventions
- contents:
  - "4.  Mechanism Overview\n   The overall mechanism is achieved using a REGISTER
    request with a\n   specially formatted Contact URI.  This document also defines
    an\n   option tag that can be used to ensure that a registrar and any\n   intermediaries
    understand the mechanism described herein.\n   The Contact URI itself is tagged
    with a URI parameter to indicate\n   that it actually represents multiple phone-number-associated\n
    \  contacts.\n   We also define some lightweight extensions to the Globally Routable\n
    \  UA URIs (GRUU) mechanism defined by RFC 5627 [20] to allow the use of\n   public
    and temporary GRUUs assigned by the SSP.\n   Aside from these extensions, the
    REGISTER request itself is processed\n   by a registrar in the same way as normal
    registrations: by updating\n   its location service with additional AOR-to-Contact
    bindings.\n   Note that the list of AORs associated with a SIP-PBX is a matter
    of\n   local provisioning at the SSP and the SIP-PBX.  The mechanism defined\n
    \  in this document does not provide any means to detect or recover from\n   provisioning
    mismatches (although the registration event package can\n   be used as a standardized
    means for auditing such AORs; see\n   Section 7.2.1).\n"
  title: 4.  Mechanism Overview
- contents:
  - '5.  Registering for Multiple Phone Numbers

    '
  - contents:
    - "5.1.  SIP-PBX Behavior\n   To register for multiple AORs, the SIP-PBX sends
      a REGISTER request\n   to the SSP.  This REGISTER request varies from a typical
      REGISTER\n   request in two important ways.  First, it MUST contain an option
      tag\n   of \"gin\" in both a \"Require\" header field and a \"Proxy-Require\"\n
      \  header field.  (The option tag \"gin\" is an acronym for \"generate\n   implicit
      numbers\".)  Second, in at least one \"Contact\" header field,\n   it MUST include
      a Contact URI that contains the URI parameter \"bnc\"\n   (which stands for
      \"bulk number contact\") and has no user portion\n   (hence no \"@\" symbol).
      \ A URI with a \"bnc\" parameter MUST NOT contain\n   a user portion.  Except
      for the SIP URI \"user\" parameter, this URI\n   MAY contain any other parameters
      that the SIP-PBX desires.  These\n   parameters will be echoed back by the SSP
      in any requests bound for\n   the SIP-PBX.\n   Because of the constraints discussed
      in Section 2, the host portion\n   of the Contact URI will generally contain
      an IP address, although\n   nothing in this mechanism enforces or relies upon
      that fact.  If the\n   SIP-PBX operator chooses to maintain DNS entries that
      resolve to the\n   IP address of his SIP-PBX via RFC 3263 resolution procedures,
      then\n   this mechanism works just fine with domain names in the \"Contact\"\n
      \  header field.\n   The \"bnc\" URI parameter indicates that special interpretation
      of the\n   Contact URI is necessary: instead of indicating the insertion of
      a\n   single Contact URI into the location service, it indicates that\n   multiple
      URIs (one for each associated AOR) should be inserted.\n   Any SIP-PBX implementing
      the registration mechanism defined in this\n   document MUST also support the
      path mechanism defined by RFC 3327\n   [10], and MUST include a 'path' option
      tag in the \"Supported\" header\n   field of the REGISTER request (which is
      a stronger requirement than\n   imposed by the path mechanism itself).  This
      behavior is necessary\n   because proxies between the SIP-PBX and the registrar
      may need to\n   insert \"Path\" header field values in the REGISTER request
      for this\n   document's mechanism to function properly, and, per RFC 3327 [10],\n
      \  they can only do so if the User Agent Client (UAC) inserted the\n   option
      tag in the \"Supported\" header field.  In accordance with the\n   procedures
      defined in RFC 3327 [10], the SIP-PBX is allowed to ignore\n   the \"Path\"
      header fields returned in the REGISTER response.\n"
    title: 5.1.  SIP-PBX Behavior
  - contents:
    - "5.2.  Registrar Behavior\n   The registrar, upon receipt of a REGISTER request
      containing at least\n   one \"Contact\" header field with a \"bnc\" parameter,
      will use the value\n   in the \"To\" header field to identify the SIP-PBX for
      which\n   registration is being requested.  It then authenticates the SIP-PBX\n
      \  (e.g., using SIP digest authentication, mutual Transport Layer\n   Security
      (TLS) [18], or some other authentication mechanism).  After\n   the SIP-PBX
      is authenticated, the registrar updates its location\n   service with a unique
      AOR-to-Contact mapping for each of the AORs\n   associated with the SIP-PBX.
      \ Semantically, each of these mappings\n   will be treated as a unique row in
      the location service.  The actual\n   implementation may, of course, perform
      internal optimizations to\n   reduce the amount of memory used to store such
      information.\n   For each of these unique rows, the AOR will be in the format
      that the\n   SSP expects to receive from external parties (e.g.,\n   \"sip:+12145550102@ssp.example.com\").
      \ The corresponding contact will\n   be formed by adding to the REGISTER request's
      Contact URI a user\n   portion containing the fully qualified, E.164-formatted
      number\n   (including the preceding \"+\" symbol) and removing the \"bnc\"\n
      \  parameter.  Aside from the initial \"+\" symbol, this E.164-formatted\n   number
      MUST consist exclusively of digits from 0 through 9 and\n   explicitly MUST
      NOT contain any visual separator symbols (e.g., \"-\",\n   \".\", \"(\", or
      \")\").  For example, if the \"Contact\" header field\n   contains the URI <sip:198.51.100.3:5060;bnc>,
      then the contact value\n   associated with the aforementioned AOR will be\n
      \  <sip:+12145550102@198.51.100.3:5060>.\n   Although the SSP treats this registration
      as a number of discrete\n   rows for the purpose of re-targeting incoming requests,
      the renewal,\n   expiration, and removal of these rows is bound to the registered\n
      \  contact.  In particular, this means that REGISTER requests that\n   attempt
      to de-register a single AOR that has been implicitly\n   registered MUST NOT
      remove that AOR from the bulk registration.  In\n   this circumstance, the registrar
      simply acts as if the UA attempted\n   to unregister a contact that wasn't actually
      registered (e.g., return\n   the list of presently registered contacts in a
      success response).  A\n   further implication of this property is that an individual
      extension\n   that is implicitly registered may also be explicitly registered
      using\n   a normal, non-bulk registration (subject to SSP policy).  If such
      a\n   registration exists, it is refreshed independently of the bulk\n   registration
      and is not removed when the bulk registration is\n   removed.\n   A registrar
      that receives a REGISTER request containing a Contact URI\n   with both a \"bnc\"
      parameter and a user portion MUST NOT send a 200-\n   class (Success) response.
      \ If no other error is applicable, the\n   registrar can use a 400 (Bad Request)
      response to indicate this error\n   condition.\n      Note that the preceding
      paragraph is talking about the user\n      portion of a URI:\n      sip:+12145550100@example.com\n
      \         ^^^^^^^^^^^^\n   A registrar compliant with this document MUST support
      the path\n   mechanism defined in RFC 3327 [10].  The rationale for support
      of\n   this mechanism is given in Section 5.1.\n   Aside from the \"bnc\" parameter,
      all URI parameters present on the\n   Contact URI in the REGISTER request MUST
      be copied to the contact\n   value stored in the location service.\n   If the
      SSP servers perform processing based on User Agent\n   Capabilities (as defined
      in RFC 3840 [13]), they will treat any\n   feature tags present on a \"Contact\"
      header field with a \"bnc\"\n   parameter in its URI as applicable to all of
      the resulting AOR-to-\n   Contact mappings.  Similarly, any option tags present
      on the REGISTER\n   request that indicate special handling for any subsequent
      requests\n   are also applicable to all of the AOR-to-Contact mappings.\n"
    title: 5.2.  Registrar Behavior
  - contents:
    - "5.3.  SIP URI \"user\" Parameter Handling\n   This document does not modify
      the behavior specified in RFC 3261 [3]\n   for inclusion of the \"user\" parameter
      on Request URIs.  However, to\n   avoid any ambiguity in handling at the SIP-PBX,
      the following\n   normative behavior is imposed on its interactions with the
      SSP.\n   When a SIP-PBX registers with an SSP using a Contact URI containing
      a\n   \"bnc\" parameter, that Contact URI MUST NOT include a \"user\"\n   parameter.
      \ A registrar that receives a REGISTER request containing a\n   Contact URI
      with both a \"bnc\" parameter and a \"user\" parameter MUST\n   NOT send a 200-class
      (success) response.  If no other error is\n   applicable, the registrar can
      use a 400 (Bad Request) response to\n   indicate this error condition.\n      Note
      that the preceding paragraph is talking about the \"user\"\n      parameter
      of a URI:\n      sip:+12145550100@example.com;user=phone\n                                   ^^^^^^^^^^\n
      \  When a SIP-PBX receives a request from an SSP, and the Request URI\n   contains
      a user portion corresponding to an AOR registered using a\n   Contact URI containing
      a \"bnc\" parameter, then the SIP-PBX MUST NOT\n   reject the request (or otherwise
      cause the request to fail) due to\n   the absence, presence, or value of a \"user\"
      parameter on the Request\n   URI.\n"
    title: 5.3.  SIP URI "user" Parameter Handling
  title: 5.  Registering for Multiple Phone Numbers
- contents:
  - "6.  SSP Processing of Inbound Requests\n   In general, after processing the AOR-to-Contact
    mapping described in\n   the preceding section, the SSP proxy/registrar (or equivalent
    entity)\n   performs traditional proxy/registrar behavior, based on the mapping.\n
    \  For any inbound SIP requests whose AOR indicates an E.164 number\n   assigned
    to one of the SSP's customers, this will generally involve\n   setting the target
    set to the registered contacts associated with\n   that AOR and performing request
    forwarding as described in Section\n   16.6 of RFC 3261 [3].  An SSP using the
    mechanism defined in this\n   document MUST perform such processing for inbound
    INVITE requests and\n   SUBSCRIBE requests to the \"reg\" event package (see Section
    7.2.2) and\n   SHOULD perform such processing for all other method types, including\n
    \  unrecognized SIP methods.\n"
  title: 6.  SSP Processing of Inbound Requests
- contents:
  - "7.  Interaction with Other Mechanisms\n   The following sections describe the
    means by which this mechanism\n   interacts with relevant REGISTER-related extensions
    currently defined\n   by the IETF.\n"
  - contents:
    - "7.1.  Globally Routable User Agent URIs (GRUU)\n   To enable advanced services
      to work with UAs behind a SIP-PBX, it is\n   important that the GRUU mechanism
      defined by RFC 5627 [20] work\n   correctly with the mechanism defined by this
      document -- that is,\n   that user agents served by the SIP-PBX can acquire
      and use GRUUs for\n   their own use.\n"
    - contents:
      - "7.1.1.  Public GRUUs\n   Support of public GRUUs is OPTIONAL in SSPs and
        SIP-PBXes.\n   When a SIP-PBX registers a Bulk Number Contact (a contact with
        a\n   \"bnc\" parameter), and also invokes GRUU procedures for that contact\n
        \  during registration, then the SSP will assign a public GRUU to the\n   SIP-PBX
        in the normal fashion.  Because the URI being registered\n   contains a \"bnc\"
        parameter, the GRUU will also contain a \"bnc\"\n   parameter.  In particular,
        this means that the GRUU will not contain\n   a user portion.\n   When a UA
        registers a contact with the SIP-PBX using GRUU procedures,\n   the SIP-PBX
        provides to the UA a public GRUU formed by adding an \"sg\"\n   parameter
        to the GRUU parameter it received from the SSP.  This \"sg\"\n   parameter
        contains a disambiguation token that the SIP-PBX can use to\n   route inbound
        requests to the proper UA.\n   So, for example, when the SIP-PBX registers
        with the following\n   \"Contact\" header field:\n   Contact: <sip:198.51.100.3;bnc>;\n
        \    +sip.instance=\"<urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6>\"\n   the
        SSP may choose to respond with a \"Contact\" header field that\n   looks like
        this:\n   <allOneLine>\n   Contact: <sip:198.51.100.3;bnc>;\n   pub-gruu=\"sip:ssp.example.com;bnc;gr=urn:\n
        \  uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6\";\n   +sip.instance=\"<urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6>\"\n
        \  ;expires=7200\n   </allOneLine>\n   When its own UAs register using GRUU
        procedures, the SIP-PBX can then\n   add whatever device identifier it feels
        appropriate in an \"sg\"\n   parameter and present this value to its own UAs.
        \ For example, assume\n   the UA associated with the AOR \"+12145550102\"
        sent the following\n   \"Contact\" header field in its REGISTER request:\n
        \  Contact: <sip:line-1@10.20.1.17>;\n     +sip.instance=\"<urn:uuid:d0e2f290-104b-11df-8a39-0800200c9a66>\"\n
        \  The SIP-PBX will add an \"sg\" parameter to the pub-gruu it received\n
        \  from the SSP with a token that uniquely identifies the device\n   (possibly
        the URN itself; possibly some other identifier), insert a\n   user portion
        containing the fully qualified E.164 number associated\n   with the UA, and
        return the result to the UA as its public GRUU.  The\n   resulting \"Contact\"
        header field sent from the SIP-PBX to the\n   registering UA would look something
        like this:\n   <allOneLine>\n   Contact: <sip:line-1@10.20.1.17>;\n   pub-gruu=\"sip:+12145550102@ssp.example.com;gr=urn:\n
        \  uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6;sg=00:05:03:5e:70:a6\";\n   +sip.instance=\"<urn:uuid:d0e2f290-104b-11df-8a39-0800200c9a66>\"\n
        \  ;expires=3600\n   </allOneLine>\n   When an incoming request arrives at
        the SSP for a GRUU corresponding\n   to a bulk number contact (\"bnc\"), the
        SSP performs slightly different\n   processing for the GRUU than it would
        for a URI without a \"bnc\"\n   parameter.  When the GRUU is re-targeted to
        the registered bulk\n   number contact, the SSP MUST copy the \"sg\" parameter
        from the GRUU to\n   the new target.  The SIP-PBX can then use this \"sg\"
        parameter to\n   determine to which user agent the request should be routed.
        \ For\n   example, the first line of an INVITE request that has been re-\n
        \  targeted to the SIP-PBX for the UA shown above would look like this:\n
        \  INVITE sip:+12145550102@198.51.100.3;sg=00:05:03:5e:70:a6 SIP/2.0\n"
      title: 7.1.1.  Public GRUUs
    - contents:
      - "7.1.2.  Temporary GRUUs\n   In order to provide support for privacy, the
        SSP SHOULD implement the\n   temporary GRUU mechanism described in this section.
        \ Reasons for not\n   doing so would include systems with an alternative privacy
        mechanism\n   that maintains the integrity of public GRUUs (i.e., if public
        GRUUs\n   are anonymized, then the anonymizer function would need to be capable\n
        \  of providing -- as the anonymized URI -- a globally routable URI that\n
        \  routes back only to the target identified by the original public\n   GRUU).\n
        \  Temporary GRUUs are used to provide anonymity for the party creating\n
        \  and sharing the GRUU.  Being able to correlate two temporary GRUUs as\n
        \  having originated from behind the same SIP-PBX violates this\n   principle
        of anonymity.  Consequently, rather than relying upon a\n   single, invariant
        identifier for the SIP-PBX in its UA's temporary\n   GRUUs, we define a mechanism
        whereby the SSP provides the SIP-PBX\n   with sufficient information for the
        SIP-PBX to mint unique temporary\n   GRUUs.  These GRUUs have the property
        that the SSP can correlate them\n   to the proper SIP-PBX, but no other party
        can do so.  To achieve this\n   goal, we use a slight modification of the
        procedure described in\n   Appendix A.2 of RFC 5627 [20].\n   The SIP-PBX
        needs to be able to construct a temp-gruu in a way that\n   the SSP can decode.
        \ In order to ensure that the SSP can decode\n   GRUUs, we need to standardize
        the algorithm for creation of temp-\n   gruus at the SIP-PBX.  This allows
        the SSP to reverse the algorithm\n   in order to identify the registration
        entry that corresponds to the\n   GRUU.\n   It is equally important that no
        party other than the SSP be capable\n   of decoding a temporary GRUU, including
        other SIP-PBXes serviced by\n   the SSP.  To achieve this property, an SSP
        that supports temporary\n   GRUUs MUST create and store an asymmetric key
        pair: {K_e1,K_e2}.\n   K_e1 is kept secret by the SSP, while K_e2 is shared
        with the SIP-\n   PBXes via provisioning.\n   All base64 encoding discussed
        in the following sections MUST use the\n   character set and encoding defined
        in Section 4 of RFC 4648 [8],\n   except that any trailing \"=\" characters
        are discarded on encoding and\n   added as necessary to decode.\n   The following
        sections make use of the term \"HMAC-SHA256-80\" to\n   describe a particular
        Hashed Message Authentication Code (HMAC)\n   algorithm.  In this document,
        HMAC-SHA256-80 is defined as the\n   application of the SHA-256 [24] secure
        hashing algorithm, truncating\n   the results to 80 bits by discarding the
        trailing (least-significant)\n   bits.\n"
      - contents:
        - "7.1.2.1.  Generation of \"temp-gruu-cookie\" by the SSP\n   An SSP that
          supports temporary GRUUs MUST include a \"temp-gruu-\n   cookie\" parameter
          on all \"Contact\" header fields containing a \"bnc\"\n   parameter in a
          200-class REGISTER response.  This \"temp-gruu-cookie\"\n   MUST have the
          following properties:\n   1.  It can be used by the SSP to uniquely identify
          the registration\n       to which it corresponds.\n   2.  It is encoded
          using base64.  This allows the SIP-PBX to decode it\n       into as compact
          a form as possible for use in its calculations.\n   3.  It is of a fixed
          length.  This allows for its extraction once the\n       SIP-PBX has concatenated
          a distinguisher onto it.\n   4.  The temp-gruu-cookie MUST NOT be forgeable
          by any party.  In\n       other words, the SSP needs to be able to examine
          the cookie and\n       validate that it was generated by the SSP.\n   5.
          \ The temp-gruu-cookie MUST be invariant during the course of a\n       registration,
          including any refreshes to that registration.  This\n       property is
          important, as it allows the SIP-PBX to examine the\n       temp-gruu-cookie
          to determine whether the temp-gruus it has\n       issued to its UAs are
          still valid.\n   The above properties can be met using the following algorithm,
          which\n   is non-normative.  Implementors may chose to implement any algorithm\n
          \  of their choosing for generation of the temp-gruu-cookie, as long as\n
          \  it fulfills the five properties listed above.\n      The registrar maintains
          a counter, I.  This counter is 48 bits\n      long and initialized to zero.
          \ This counter is persistently\n      stored, using a back-end database
          or similar technique.  When the\n      registrar creates the first temporary
          GRUU for a particular SIP-\n      PBX and instance ID (as defined by [20]),
          the registrar notes the\n      current value of the counter, I_i, and increments
          the counter in\n      the database.  The registrar then maps I_i to the
          contact and\n      instance ID using the database, a persistent hash-map,
          or similar\n      technology.  If the registration expires such that there
          are no\n      longer any contacts with that particular instance ID bound
          to the\n      GRUU, the registrar removes the mapping.  Similarly, if the\n
          \     temporary GRUUs are invalidated due to a change in Call-ID, the\n
          \     registrar removes the current mapping from I_i to the AOR and\n      instance
          ID, notes the current value of the counter I_j, and\n      stores a mapping
          from I_j to the contact containing a \"bnc\"\n      parameter and instance
          ID.  Based on these rules, the hash-map\n      will contain a single mapping
          for each contact containing a \"bnc\"\n      parameter and instance ID for
          which there is a currently valid\n      registration.\n      The registrar
          maintains a symmetric key SK_a, which is regenerated\n      every time the
          counter rolls over or is reset.  When the counter\n      rolls over or is
          reset, the registrar remembers the old value of\n      SK_a for a while.
          \ To generate a temp-gruu-cookie, the registrar\n      computes:\n         SA
          = HMAC(SK_a, I_i)\n         temp-gruu-cookie = base64enc(I_i || SA)\n   where
          || denotes concatenation.  \"HMAC\" represents any suitably\n   strong HMAC
          algorithm; see RFC 2104 [1] for a discussion of HMAC\n   algorithms.  One
          suitable HMAC algorithm for this purpose is HMAC-\n   SHA256-80.\n"
        title: 7.1.2.1.  Generation of "temp-gruu-cookie" by the SSP
      - contents:
        - "7.1.2.2.  Generation of temp-gruu by the SIP-PBX\n   According to Section
          3.2 of RFC 5627 [20], every registration refresh\n   generates a new temp-gruu
          that is valid for as long as the contact\n   remains registered.  This property
          is both critical for the privacy\n   properties of temp-gruu and is expected
          by UAs that implement the\n   temp-gruu procedures.  Nothing in this document
          should be construed\n   as changing this fundamental temp-gruu property
          in any way.  SIP-\n   PBXes that implement temporary GRUUs MUST generate
          a new temp-gruu\n   according to the procedures in this section for every
          registration or\n   registration refresh from GRUU-supporting UAs attached
          to the SIP-\n   PBX.\n   Similarly, if the registration that a SIP-PBX has
          with its SSP\n   expires or is terminated, then the temp-gruu cookie it
          maintains with\n   the SSP will change.  This change will invalidate all
          the temp-gruus\n   the SIP-PBX has issued to its UAs.  If the SIP-PBX tracks
          this\n   information (e.g., to include <temp-gruu> elements in registration\n
          \  event bodies, as described in RFC 5628 [9]), it can determine that\n
          \  previously issued temp-gruus are invalid by observing a change in the\n
          \  temp-gruu-cookie provided to it by the SSP.\n   A SIP-PBX that issues
          temporary GRUUs to its UAs MUST maintain an\n   HMAC key: PK_a.  This value
          is used to validate that incoming GRUUs\n   were generated by the SIP-PBX.\n
          \  To generate a new temporary GRUU for use by its own UAs, the SIP-PBX\n
          \  MUST generate a random distinguisher value: D.  The length of this\n
          \  value is up to implementors, but it MUST be long enough to prevent\n
          \  collisions among all the temporary GRUUs issued by the SIP-PBX.  A\n
          \  size of 80 bits or longer is RECOMMENDED.  See RFC 4086 [16] for\n   further
          considerations on the generation of random numbers in a\n   security context.
          \ After generating the distinguisher D, the SIP-PBX\n   MUST calculate:\n
          \    M    = base64dec(SSP-cookie) || D\n     E    = RSA-Encrypt(K_e2, M)\n
          \    PA   = HMAC(PK_a, E)\n     Temp-Gruu-userpart = \"tgruu.\" || base64(E)
          || \".\" || base64(PA)\n   where || denotes concatenation.  \"HMAC\" represents
          any suitably\n   strong HMAC algorithm; see RFC 2104 [1] for a discussion
          of HMAC\n   algorithms.  One suitable HMAC algorithm for this purpose is
          HMAC-\n   SHA256-80.\n   Finally, the SIP-PBX adds a \"gr\" parameter to
          the temporary GRUU that\n   can be used to uniquely identify the UA registration
          record to which\n   the GRUU corresponds.  The means of generation of the
          \"gr\" parameter\n   are left to the implementor, as long as they satisfy
          the properties\n   of a GRUU as described in RFC 5627 [20].\n      One valid
          approach for generation of the \"gr\" parameter is\n      calculation of
          \"E\" and \"A\" as described in Appendix A.2 of RFC\n      5627 [20] and
          forming the \"gr\" parameter as:\n         gr = base64enc(E) || base64enc(A)\n
          \  Using this procedure may result in a temporary GRUU returned to the\n
          \  registering UA by the SIP-PBX that looks similar to this:\n   <allOneLine>\n
          \  Contact: <sip:line-1@10.20.1.17>\n   ;temp-gruu=\"sip:tgruu.MQyaRiLEd78RtaWkcP7N8Q.5qVbsasdo2pkKw@\n
          \  ssp.example.com;gr=YZGSCjKD42ccxO08pA7HwAM4XNDIlMSL0HlA\"\n   ;+sip.instance=\"<urn:uuid:d0e2f290-104b-11df-8a39-0800200c9a66>\"\n
          \  ;expires=3600\n   </allOneLine>\n"
        title: 7.1.2.2.  Generation of temp-gruu by the SIP-PBX
      - contents:
        - "7.1.2.3.  Decoding of temp-gruu by the SSP\n   When the SSP proxy receives
          a request in which the user part begins\n   with \"tgruu.\", it extracts
          the remaining portion and splits it at the\n   \".\" character into E' and
          PA'.  It discards PA'.  It then computes E\n   by performing a base64 decode
          of E'.  Next, it computes:\n     M = RSA-Decrypt(K_e1, E)\n   The SSP proxy
          extracts the fixed-length temp-gruu-cookie information\n   from the beginning
          of this M and discards the remainder (which will\n   be the distinguisher
          added by the SIP-PBX).  It then validates this\n   temp-gruu-cookie.  If
          valid, it uses it to locate the corresponding\n   SIP-PBX registration record
          and routes the message appropriately.\n      If the non-normative, exemplary
          algorithm described in\n      Section 7.1.2.1 is used to generate the temp-gruu-cookie,
          then\n      this identification is performed by splitting the temp-gruu-cookie\n
          \     information into its 48-bit counter I and 80-bit HMAC.  It\n      validates
          that the HMAC matches the counter I and then uses\n      counter I to locate
          the SIP-PBX registration record in its map.\n      If the counter has rolled
          over or reset, this computation is\n      performed with the current and
          previous SK_a.\n"
        title: 7.1.2.3.  Decoding of temp-gruu by the SSP
      - contents:
        - "7.1.2.4.  Decoding of temp-gruu by the SIP-PBX\n   When the SIP-PBX receives
          a request in which the user part begins\n   with \"tgruu.\", it extracts
          the remaining portion and splits it at the\n   \".\" character into E' and
          PA'.  It then computes E and PA by\n   performing a base64 decode of E'
          and PA', respectively.  Next, it\n   computes:\n     PAc = HMAC(PK_a, E)\n
          \  where HMAC is the HMAC algorithm used for the steps in\n   Section 7.1.2.2.
          \ If this computed value for PAc does not match the\n   value of PA extracted
          from the GRUU, then the GRUU is rejected as\n   invalid.\n   The SIP-PBX
          then uses the value of the \"gr\" parameter to locate the\n   UA registration
          to which the GRUU corresponds, and routes the message\n   accordingly.\n"
        title: 7.1.2.4.  Decoding of temp-gruu by the SIP-PBX
      title: 7.1.2.  Temporary GRUUs
    title: 7.1.  Globally Routable User Agent URIs (GRUU)
  - contents:
    - "7.2.  Registration Event Package\n   Neither the SSP nor the SIP-PBX is required
      to support the\n   registration event package defined by RFC 3680 [12].  However,
      if\n   they do support the registration event package, they MUST conform to\n
      \  the behavior described in this section and its subsections.\n   As this mechanism
      inherently deals with REGISTER transaction\n   behavior, it is imperative to
      consider its impact on the registration\n   event package defined by RFC 3680
      [12].  In practice, there will be\n   two main use cases for subscribing to
      registration data: learning\n   about the overall registration state for the
      SIP-PBX and learning\n   about the registration state for a single SIP-PBX AOR.\n"
    - contents:
      - "7.2.1.  SIP-PBX Aggregate Registration State\n   If the SIP-PBX (or another
        interested and authorized party) wishes to\n   monitor or audit the registration
        state for all of the AORs currently\n   registered to that SIP-PBX, it can
        subscribe to the SIP registration\n   event package at the SIP-PBX's main
        URI -- that is, the URI used in\n   the \"To\" header field of the REGISTER
        request.\n   The NOTIFY messages for such a subscription will contain a body
        that\n   contains one record for each AOR associated with the SIP-PBX.  The\n
        \  AORs will be in the format expected to be received by the SSP (e.g.,\n
        \  \"sip:+12145550105@ssp.example.com\"), and the contacts will correspond\n
        \  to the mapped contact created by the registration (e.g.,\n   \"sip:+12145550105@98.51.100.3\").\n
        \  In particular, the \"bnc\" parameter is forbidden from appearing in the\n
        \  body of a reg-event NOTIFY request unless the subscriber has\n   indicated
        knowledge of the semantics of the \"bnc\" parameter.  The\n   means for indicating
        this support are out of scope of this document.\n   Because the SSP does not
        necessarily know which GRUUs have been\n   issued by the SIP-PBX to its associated
        UAs, these records will not\n   generally contain the <temp-gruu> or <pub-gruu>
        elements defined in\n   RFC 5628 [9].  This information can be learned, if
        necessary, by\n   subscribing to the individual AOR registration state, as
        described in\n   Section 7.2.2.\n"
      title: 7.2.1.  SIP-PBX Aggregate Registration State
    - contents:
      - "7.2.2.  Individual AOR Registration State\n   As described in Section 6,
        the SSP will generally re-target all\n   requests addressed to an AOR owned
        by a SIP-PBX to that SIP-PBX\n   according to the mapping established at registration
        time.  Although\n   policy at the SSP may override this generally expected
        behavior,\n   proper behavior of the registration event package requires that
        all\n   \"reg\" event SUBSCRIBE requests are processed by the SIP-PBX.  As
        a\n   consequence, the requirements on an SSP for processing registration\n
        \  event package SUBSCRIBE requests are not left to policy.\n   If the SSP
        receives a SUBSCRIBE request for the registration event\n   package with a
        Request URI that indicates an AOR registered via the\n   \"Bulk Number Contact\"
        mechanism defined in this document, then the\n   SSP MUST proxy that SUBSCRIBE
        to the SIP-PBX in the same way that it\n   would proxy an INVITE bound for
        that AOR, unless the SSP has and can\n   maintain a copy of complete, accurate,
        and up-to-date information\n   from the SIP-PBX (e.g., through an active back-end
        subscription).\n   If the Request URI in a SUBSCRIBE request for the registration
        event\n   package indicates a contact that is registered by more than one
        SIP-\n   PBX, then the SSP proxy will fork the SUBSCRIBE request to all the\n
        \  applicable SIP-PBXes.  Similarly, if the Request URI corresponds to a\n
        \  contact that is both implicitly registered by a SIP-PBX and\n   explicitly
        registered directly with the SSP proxy, then the SSP proxy\n   will semantically
        fork the SUBSCRIBE request to the applicable SIP-\n   PBX or SIP-PBXes and
        to the registrar function (which will respond\n   with registration data corresponding
        to the explicit registrations at\n   the SSP).  The forking in both of these
        cases can be avoided if the\n   SSP has and can maintain a copy of up-to-date
        information from the\n   PBXes.\n   Section 4.9 of RFC 3680 [12] indicates
        that \"a subscriber MUST NOT\n   create multiple dialogs as a result of a
        single [registration event]\n   subscription request\".  Consequently, subscribers
        who are not aware\n   of the extension described by this document will accept
        only one\n   dialog in response to such requests.  In the case described in
        the\n   preceding paragraph, this behavior will result in such clients\n   receiving
        accurate but incomplete information about the registration\n   state of an
        AOR.  As an explicit change to the normative behavior of\n   RFC 3680, this
        document stipulates that subscribers to the\n   registration event package
        MAY create multiple dialogs as the result\n   of a single subscription request.
        \ This will allow subscribers to\n   create a complete view of an AOR's registration
        state.\n   Defining the behavior as described above is important, since the
        reg-\n   event subscriber is interested in finding out about the comprehensive\n
        \  list of devices associated with the AOR.  Only the SIP-PBX will have\n
        \  authoritative access to this information.  For example, if the user\n   has
        registered multiple UAs with differing capabilities, the SSP will\n   not
        know about the devices or their capabilities.  By contrast, the\n   SIP-PBX
        will.\n   If the SIP-PBX is not registered with the SSP when a registration\n
        \  event subscription for a contact that would be implicitly registered\n
        \  if the SIP-PBX were registered is received, then the SSP SHOULD\n   accept
        the subscription and indicate that the user is not currently\n   registered.
        \ Once the associated SIP-PBX is registered, the SSP\n   SHOULD use the subscription
        migration mechanism defined in RFC 3265\n   [5] to migrate the subscription
        to the SIP-PBX.\n   When a SIP-PBX receives a registration event subscription
        addressed\n   to an AOR that has been registered using the bulk registration\n
        \  mechanism described in this document, then each resulting\n   registration
        information document SHOULD contain an 'aor' attribute\n   in its <registration/>
        element that corresponds to the AOR at the\n   SSP.\n      For example, consider
        a SIP-PBX that has registered with an SSP\n      that has a domain of \"ssp.example.com\".
        \ The SIP-PBX used a\n      Contact URI of \"sip:198.51.100.3:5060;bnc\".
        \ After such\n      registration is complete, a registration event subscription\n
        \     arriving at the SSP with a Request URI of\n      \"sip:+12145550102@ssp.example.com\"
        will be re-targeted to the SIP-\n      PBX, with a Request URI of \"sip:+12145550102@198.51.100.3:5060\".\n
        \     The resulting registration document created by the SIP-PBX would\n      contain
        a <registration/> element with an \"aor\" attribute of\n      \"sip:+12145550102@ssp.example.com\".\n
        \     This behavior ensures that subscribers external to the system (and\n
        \     unaware of GIN (generate implicit numbers) procedures) will be\n      able
        to find the relevant information in the registration document\n      (since
        they will be looking for the publicly visible AOR, not the\n      address
        used for sending information from the SSP to the SIP-PBX).\n   A SIP-PBX that
        supports both GRUU procedures and the registration\n   event packages SHOULD
        implement the extension defined in RFC 5628\n   [9].\n"
      title: 7.2.2.  Individual AOR Registration State
    title: 7.2.  Registration Event Package
  - contents:
    - "7.3.  Client-Initiated (Outbound) Connections\n   RFC 5626 [19] defines a mechanism
      that allows UAs to establish long-\n   lived TCP connections or UDP associations
      with a proxy in a way that\n   allows bidirectional traffic between the proxy
      and the UA.  This\n   behavior is particularly important in the presence of
      NATs, and\n   whenever TLS [18] security is required.  Neither the SSP nor the
      SIP-\n   PBX is required to support client-initiated connections.\n   Generally,
      the outbound mechanism works with the solution defined in\n   this document,
      without any modifications.  Implementors should note\n   that the instance ID
      used between the SIP-PBX and the SSP's registrar\n   identifies the SIP-PBX
      itself, and not any of the UAs registered with\n   the SIP-PBX.  As a consequence,
      any attempts to use caller\n   preferences (defined in RFC 3841 [14]) to target
      a specific instance\n   are likely to fail.  This shouldn't be an issue, as
      the preferred\n   mechanism for targeting specific instances of a user agent
      is GRUU\n   (see Section 7.1).\n"
    title: 7.3.  Client-Initiated (Outbound) Connections
  - contents:
    - "7.4.  Non-Adjacent Contact Registration (Path) and Service-Route\n      Discovery\n
      \  RFC 3327 [10] defines a means by which a registrar and its associated\n   proxy
      can be informed of a route that is to be used between the proxy\n   and the
      registered user agent.  The scope of the route created by a\n   \"Path\" header
      field is contact specific; if an AOR has multiple\n   contacts associated with
      it, the routes associated with each contact\n   may be different from each other.
      \ Support for non-adjacent contact\n   registration is required in all SSPs
      and SIP-PBXes implementing the\n   multiple-AOR-registration protocol described
      in this document.\n   At registration time, any proxies between the user agent
      and the\n   registrar may add themselves to the \"Path\" header field.  By doing\n
      \  so, they request that any requests destined to the user agent as a\n   result
      of the associated registration include them as part of the\n   Route towards
      the user agent.  Although the path mechanism does\n   deliver the final path
      value to the registering UA, UAs typically\n   ignore the value of the path.\n
      \  To provide similar functionality in the opposite direction -- that\n   is,
      to establish a route for requests sent by a registering UA -- RFC\n   3608 [11]
      defines a means by which a UA can be informed of a route\n   that is to be used
      by the UA to route all outbound requests\n   associated with the AOR used in
      the registration.  This information\n   is scoped to the AOR within the UA,
      and is not specific to the\n   contact (or contacts) in the REGISTER request.
      \ Support of service\n   route discovery is OPTIONAL in SSPs and SIP-PBXes.\n
      \  The registrar unilaterally generates the values of the service route\n   using
      whatever local policy it wishes to apply.  Although it is\n   common to use
      the \"Path\" and/or \"Route\" header field information in\n   the request in
      composing the service route, registrar behavior is not\n   constrained in any
      way that requires it to do so.\n   In considering the interaction between these
      mechanisms and the\n   registration of multiple AORs in a single request, implementors
      of\n   proxies, registrars, and intermediaries must keep in mind the\n   following
      issues, which stem from the fact that GIN effectively\n   registers multiple
      AORs and multiple contacts.\n   First, all location service records that result
      from expanding a\n   single Contact URI containing a \"bnc\" parameter will
      necessarily\n   share a single path.  Proxies will be unable to make policy
      decisions\n   on a contact-by-contact basis regarding whether to include themselves\n
      \  in the path.  Second, and similarly, all AORs on the SIP-PBX that are\n   registered
      with a common REGISTER request will be forced to share a\n   common service
      route.\n   One interesting technique that the path and service route mechanisms\n
      \  enable is the inclusion of a token or cookie in the user portion of\n   the
      service route or path entries.  This token or cookie may convey\n   information
      to proxies about the identity, capabilities, and/or\n   policies associated
      with the user.  Since this information will be\n   shared among several AORs
      and several contacts when multiple AOR\n   registration is employed, care should
      be taken to ensure that doing\n   so is acceptable for all AORs and all contacts
      registered in a single\n   REGISTER request.\n"
    title: 7.4.  Non-Adjacent Contact Registration (Path) and Service-Route
  title: 7.  Interaction with Other Mechanisms
- contents:
  - "8.  Examples\n   Note that the following examples elide any steps related to\n
    \  authentication.  This is done for the sake of clarity.  Actual\n   deployments
    will need to provide a level of authentication\n   appropriate to their system.\n"
  - contents:
    - "8.1.  Usage Scenario: Basic Registration\n   This example shows the message
      flows for a basic bulk REGISTER\n   transaction, followed by an INVITE addressed
      to one of the registered\n   UAs.  Example messages are shown after the sequence
      diagram.\n   Internet                        SSP                          SIP-PBX\n
      \  |                                |                                 |\n   |
      \                               |(1) REGISTER                     |\n   |                                |Contact:<sip:198.51.100.3;bnc>
      \  |\n   |                                |<--------------------------------|\n
      \  |                                |                                 |\n   |
      \                               |(2) 200 OK                       |\n   |                                |-------------------------------->|\n
      \  |                                |                                 |\n   |(3)
      INVITE                      |                                 |\n   |sip:+12145550105@ssp.example.com|
      \                                |\n   |------------------------------->|                                 |\n
      \  |                                |                                 |\n   |
      \                               |(4) INVITE                       |\n   |                                |sip:+12145550105@198.51.100.3
      \   |\n   |                                |-------------------------------->|\n
      \  (1) The SIP-PBX registers with the SSP for a range of AORs.\n   REGISTER
      sip:ssp.example.com SIP/2.0\n   Via: SIP/2.0/UDP 198.51.100.3:5060;branch=z9hG4bKnashds7\n
      \  Max-Forwards: 70\n   To: <sip:pbx@ssp.example.com>\n   From: <sip:pbx@ssp.example.com>;tag=a23589\n
      \  Call-ID: 843817637684230@998sdasdh09\n   CSeq: 1826 REGISTER\n   Proxy-Require:
      gin\n   Require: gin\n   Supported: path\n   Contact: <sip:198.51.100.3:5060;bnc>\n
      \  Expires: 7200\n   Content-Length: 0\n   (3) The SSP receives a request for
      an AOR assigned\n       to the SIP-PBX.\n   INVITE sip:+12145550105@ssp.example.com
      SIP/2.0\n   Via: SIP/2.0/UDP foo.example;branch=z9hG4bKa0bc7a0131f0ad\n   Max-Forwards:
      69\n   To: <sip:2145550105@some-other-place.example.net>\n   From: <sip:gsmith@example.org>;tag=456248\n
      \  Call-ID: f7aecbfc374d557baf72d6352e1fbcd4\n   CSeq: 24762 INVITE\n   Contact:
      <sip:line-1@192.0.2.178:2081>\n   Content-Type: application/sdp\n   Content-Length:
      ...\n   <sdp body here>\n   (4) The SSP re-targets the incoming request according
      to the\n       information received from the SIP-PBX at registration time.\n
      \  INVITE sip:+12145550105@198.51.100.3 SIP/2.0\n   Via: SIP/2.0/UDP ssp.example.com;branch=z9hG4bKa45cd5c52a6dd50\n
      \  Via: SIP/2.0/UDP foo.example;branch=z9hG4bKa0bc7a0131f0ad\n   Max-Forwards:
      68\n   To: <sip:2145550105@some-other-place.example.net>\n   From: <sip:gsmith@example.org>;tag=456248\n
      \  Call-ID: f7aecbfc374d557baf72d6352e1fbcd4\n   CSeq: 24762 INVITE\n   Contact:
      <sip:line-1@192.0.2.178:2081>\n   Content-Type: application/sdp\n   Content-Length:
      ...\n   <sdp body here>\n"
    title: '8.1.  Usage Scenario: Basic Registration'
  - contents:
    - "8.2.  Usage Scenario: Using Path to Control Request URI\n   This example shows
      a bulk REGISTER transaction with the SSP making\n   use of the \"Path\" header
      field extension [10].  This allows the SSP\n   to designate a domain on the
      incoming Request URI that does not\n   necessarily resolve to the SIP-PBX when
      the SSP applies RFC 3263\n   procedures to it.\n   Internet                        SSP
      \                         SIP-PBX\n   |                                |                                 |\n
      \  |                                |(1) REGISTER                     |\n   |
      \                               |Path:<sip:pbx@198.51.100.3;lr>   |\n   |                                |Contact:<sip:pbx.example;bnc>
      \   |\n   |                                |<--------------------------------|\n
      \  |                                |                                 |\n   |
      \                               |(2) 200 OK                       |\n   |                                |-------------------------------->|\n
      \  |                                |                                 |\n   |(3)
      INVITE                      |                                 |\n   |sip:+12145550105@ssp.example.com|
      \                                |\n   |------------------------------->|                                 |\n
      \  |                                |                                 |\n   |
      \                               |(4) INVITE                       |\n   |                                |sip:+12145550105@pbx.example
      \    |\n   |                                |Route:<sip:pbx@198.51.100.3;lr>
      \ |\n   |                                |-------------------------------->|\n
      \  (1) The SIP-PBX registers with the SSP for a range of AORs.\n       It includes
      the form of the URI it expects to receive in the\n       Request URI in its
      \"Contact\" header field, and it includes\n       information that routes to
      the SIP-PBX in the \"Path\" header\n       field.\n   REGISTER sip:ssp.example.com
      SIP/2.0\n   Via: SIP/2.0/UDP 198.51.100.3:5060;branch=z9hG4bKnashds7\n   Max-Forwards:
      70\n   To: <sip:pbx@ssp.example.com>\n   From: <sip:pbx@ssp.example.com>;tag=a23589\n
      \  Call-ID: 326983936836068@998sdasdh09\n   CSeq: 1826 REGISTER\n   Proxy-Require:
      gin\n   Require: gin\n   Supported: path\n   Path: <sip:pbx@198.51.100.3:5060;lr>\n
      \  Contact: <sip:pbx.example;bnc>\n   Expires: 7200\n   Content-Length: 0\n
      \  (3) The SSP receives a request for an AOR assigned\n       to the SIP-PBX.\n
      \  INVITE sip:+12145550105@ssp.example.com SIP/2.0\n   Via: SIP/2.0/UDP foo.example;branch=z9hG4bKa0bc7a0131f0ad\n
      \  Max-Forwards: 69\n   To: <sip:2145550105@some-other-place.example.net>\n
      \  From: <sip:gsmith@example.org>;tag=456248\n   Call-ID: 7ca24b9679ffe9aff87036a105e30d9b\n
      \  CSeq: 24762 INVITE\n   Contact: <sip:line-1@192.0.2.178:2081>\n   Content-Type:
      application/sdp\n   Content-Length: ...\n   <sdp body here>\n   (4) The SSP
      re-targets the incoming request according to the\n       information received
      from the SIP-PBX at registration time.\n       Per the normal processing associated
      with \"Path\", it\n       will insert the \"Path\" value indicated by the SIP-PBX
      at\n       registration time in a \"Route\" header field, and\n       set the
      Request URI to the registered contact.\n   INVITE sip:+12145550105@pbx.example
      SIP/2.0\n   Via: SIP/2.0/UDP ssp.example.com;branch=z9hG4bKa45cd5c52a6dd50\n
      \  Via: SIP/2.0/UDP foo.example;branch=z9hG4bKa0bc7a0131f0ad\n   Route: <sip:pbx@198.51.100.3:5060;lr>\n
      \  Max-Forwards: 68\n   To: <sip:2145550105@some-other-place.example.net>\n
      \  From: <sip:gsmith@example.org>;tag=456248\n   Call-ID: 7ca24b9679ffe9aff87036a105e30d9b\n
      \  CSeq: 24762 INVITE\n   Contact: <sip:line-1@192.0.2.178:2081>\n   Content-Type:
      application/sdp\n   Content-Length: ...\n   <sdp body here>\n"
    title: '8.2.  Usage Scenario: Using Path to Control Request URI'
  title: 8.  Examples
- contents:
  - "9.  IANA Considerations\n   This document registers a new SIP option tag to indicate
    support for\n   the mechanism it defines, two new SIP URI parameters, and a \"Contact\"\n
    \  header field parameter.  The process governing registration of these\n   protocol
    elements is outlined in RFC 5727 [21].\n"
  - contents:
    - "9.1.  New SIP Option Tag\n   This section defines a new SIP option tag per
      the guidelines in\n   Section 27.1 of RFC 3261 [3].\n   Name:  gin\n   Description:
      \ This option tag is used to identify the extension that\n      provides registration
      for Multiple Phone Numbers in SIP.  When\n      present in a \"Require\" or
      \"Proxy-Require\" header field of a\n      REGISTER request, it indicates that
      support for this extension is\n      required of registrars and proxies, respectively,
      that are a party\n      to the registration transaction.\n   Reference:  RFC
      6140\n"
    title: 9.1.  New SIP Option Tag
  - contents:
    - "9.2.  New SIP URI Parameters\n   This specification defines two new SIP URI
      parameters, as per the\n   registry created by RFC 3969 [7].\n"
    - contents:
      - "9.2.1.  'bnc' SIP URI Parameter\n   Parameter Name:  bnc\n   Predefined Values:
        \ No (no values are allowed)\n   Reference:  RFC 6140\n"
      title: 9.2.1.  'bnc' SIP URI Parameter
    - contents:
      - "9.2.2.  'sg' SIP URI Parameter\n   Parameter Name:  sg\n   Predefined Values:
        \ No\n   Reference:  RFC 6140\n"
      title: 9.2.2.  'sg' SIP URI Parameter
    title: 9.2.  New SIP URI Parameters
  - contents:
    - "9.3.  New SIP Header Field Parameter\n   This section defines a new SIP header
      field parameter per the\n   registry created by RFC 3968 [6].\n   Header field:
      \ Contact\n   Parameter name:  temp-gruu-cookie\n   Predefined values:  No\n
      \  Reference:  RFC 6140\n"
    title: 9.3.  New SIP Header Field Parameter
  title: 9.  IANA Considerations
- contents:
  - "10.  Security Considerations\n   The change proposed for the mechanism described
    in this document\n   takes the unprecedented step of extending the previously
    defined\n   REGISTER method to apply to more than one AOR.  In general, this kind\n
    \  of change has the potential to cause problems at intermediaries --\n   such
    as proxies -- that are party to the REGISTER transaction.  In\n   particular,
    such intermediaries may attempt to apply policy to the\n   user indicated in the
    \"To\" header field (i.e., the SIP-PBX's\n   identity), without any knowledge
    of the multiple AORs that are being\n   implicitly registered.\n   The mechanism
    defined by this document solves this issue by adding an\n   option tag to a \"Proxy-Require\"
    header field in such REGISTER\n   requests.  Proxies that are unaware of this
    mechanism will not\n   process the requests, preventing them from misapplying
    policy.\n   Proxies that process requests with this option tag are clearly aware\n
    \  of the nature of the REGISTER request and can make reasonable policy\n   decisions.\n
    \  As noted in Section 7.4, intermediaries need to take care if they use\n   a
    policy token in the path and service route mechanisms, as doing so\n   will cause
    them to apply the same policy to all users serviced by the\n   same SIP-PBX.  This
    may frequently be the correct behavior, but\n   circumstances can arise in which
    differentiation of user policy is\n   required.\n   Section 7.4 also notes that
    these techniques use a token or cookie in\n   the \"Path\" and/or \"Service-Route\"
    header values, and that this value\n   will be shared among all AORs associated
    with a single registration.\n   Because this information will be visible to user
    agents under certain\n   conditions, proxy designers using this mechanism in conjunction
    with\n   the techniques described in this document need to take care that\n   doing
    so does not leak sensitive information.\n   One of the key properties of the outbound
    client connection mechanism\n   discussed in Section 7.3 is the assurance that
    a single connection is\n   associated with a single user and cannot be hijacked
    by other users.\n   With the mechanism defined in this document, such connections\n
    \  necessarily become shared between users.  However, the only entity in\n   a
    position to hijack calls as a consequence is the SIP-PBX itself.\n   Because the
    SIP-PBX acts as a registrar for all the potentially\n   affected users, it already
    has the ability to redirect any such\n   communications as it sees fit.  In other
    words, the SIP-PBX must be\n   trusted to handle calls in an appropriate fashion,
    and the use of the\n   outbound connection mechanism introduces no additional\n
    \  vulnerabilities.\n   The ability to learn the identity and registration state
    of every\n   user on the PBX (as described in Section 7.2.1) is invaluable for\n
    \  diagnostic and administrative purposes.  For example, this allows the\n   SIP-PBX
    to determine whether all its extensions are properly\n   registered with the SSP.
    \ However, this information can also be\n   highly sensitive, as many organizations
    may not wish to make their\n   entire list of phone numbers available to external
    entities.\n   Consequently, SSP servers are advised to use explicit (i.e., white-\n
    \  list) and configurable policies regarding who can access this\n   information,
    with very conservative defaults (e.g., an empty access\n   list or an access list
    consisting only of the PBX itself).\n   The procedure for the generation of temporary
    GRUUs requires the use\n   of an HMAC to detect any tampering that external entities
    may attempt\n   to perform on the contents of a temporary GRUU.  The mention of
    HMAC-\n   SHA256-80 in Section 7.1.2 is intended solely as an example of a\n   suitable
    HMAC algorithm.  Since all HMACs used in this document are\n   generated and consumed
    by the same entity, the choice of an actual\n   HMAC algorithm is entirely up
    to an implementation, provided that the\n   cryptographic properties are sufficient
    to prevent third parties from\n   spoofing GRUU-related information.\n   The procedure
    for the generation of temporary GRUUs also requires the\n   use of RSA keys.  The
    selection of the proper key length for such\n   keys requires careful analysis,
    taking into consideration the current\n   and foreseeable speed of processing
    for the period of time during\n   which GRUUs must remain anonymous, as well as
    emerging cryptographic\n   analysis methods.  The most recent guidance from RSA
    Laboratories\n   [25] suggests a key length of 2048 bits for data that needs\n
    \  protection through the year 2030, and a length of 3072 bits\n   thereafter.\n
    \  Similarly, implementors are warned to take precautionary measures to\n   prevent
    unauthorized disclosure of the private key used in GRUU\n   generation.  Any such
    disclosure would result in the ability to\n   correlate temporary GRUUs to each
    other and, potentially, to their\n   associated PBXes.\n   Further, the use of
    RSA decryption when processing GRUUs received\n   from arbitrary parties can be
    exploited by Denial-of-Service (DoS)\n   attackers to amplify the impact of an
    attack: because of the presence\n   of a cryptographic operation in the processing
    of such messages, the\n   CPU load may be marginally higher when the attacker
    uses (valid or\n   invalid) temporary GRUUs in the messages employed by such an
    attack.\n   Normal DoS mitigation techniques, such as rate-limiting processing
    of\n   received messages, should help to reduce the impact of this issue as\n
    \  well.\n   Finally, good security practices should be followed regarding the\n
    \  duration an RSA key is used.  For implementors, this means that\n   systems
    MUST include an easy way to update the public key provided to\n   the SIP-PBX.
    \ To avoid immediately invalidating all currently issued\n   temporary GRUUs,
    the SSP servers SHOULD keep the retired RSA key\n   around for a grace period
    before discarding it.  If decryption fails\n   based on the new RSA key, then
    the SSP server can attempt to use the\n   retired key instead.  By contrast, the
    SIP-PBXes MUST discard the\n   retired public key immediately and exclusively
    use the new public\n   key.\n"
  title: 10.  Security Considerations
- contents:
  - "11.  Acknowledgements\n   This document represents the hard work of many people
    in the IETF\n   MARTINI working group and the IETF RAI community as a whole.\n
    \  Particular thanks are owed to John Elwell for his requirements\n   analysis
    of the mechanism described in this document, to Dean Willis\n   for his analysis
    of the interaction between this mechanism and the\n   \"Path\" and \"Service-Route\"
    extensions, to Cullen Jennings for his\n   analysis of the interaction between
    this mechanism and the SIP\n   Outbound extension, and to Richard Barnes for his
    detailed security\n   analysis of the GRUU construction algorithm.  Thanks to
    Eric\n   Rescorla, whose text in the appendix of RFC 5627 was lifted directly\n
    \  to provide substantial portions of Section 7.1.2.  Finally, thanks to\n   Bernard
    Aboba, Francois Audet, Brian Carpenter, John Elwell, David\n   Hancock, Ted Hardie,
    Martien Huysmans, Cullen Jennings, Alan\n   Johnston, Hadriel Kaplan, Paul Kyzivat,
    and Radia Perlman for their\n   careful reviews of and constructive feedback on
    this document.\n"
  title: 11.  Acknowledgements
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [1]   Krawczyk, H., Bellare, M., and R. Canetti,
      \"HMAC: Keyed-Hashing\n         for Message Authentication\", RFC 2104, February
      1997.\n   [2]   Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n
      \        Levels\", BCP 14, RFC 2119, March 1997.\n   [3]   Rosenberg, J., Schulzrinne,
      H., Camarillo, G., Johnston, A.,\n         Peterson, J., Sparks, R., Handley,
      M., and E. Schooler, \"SIP:\n         Session Initiation Protocol\", RFC 3261,
      June 2002.\n   [4]   Rosenberg, J. and H. Schulzrinne, \"Session Initiation
      Protocol\n         (SIP): Locating SIP Servers\", RFC 3263, June 2002.\n   [5]
      \  Roach, A., \"Session Initiation Protocol (SIP)-Specific Event\n         Notification\",
      RFC 3265, June 2002.\n   [6]   Camarillo, G., \"The Internet Assigned Number
      Authority (IANA)\n         Header Field Parameter Registry for the Session Initiation\n
      \        Protocol (SIP)\", BCP 98, RFC 3968, December 2004.\n   [7]   Camarillo,
      G., \"The Internet Assigned Number Authority (IANA)\n         Uniform Resource
      Identifier (URI) Parameter Registry for the\n         Session Initiation Protocol
      (SIP)\", BCP 99, RFC 3969,\n         December 2004.\n   [8]   Josefsson, S.,
      \"The Base16, Base32, and Base64 Data Encodings\",\n         RFC 4648, October
      2006.\n   [9]   Kyzivat, P., \"Registration Event Package Extension for Session\n
      \        Initiation Protocol (SIP) Globally Routable User Agent URIs\n         (GRUUs)\",
      RFC 5628, October 2009.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [10]  Willis, D. and B. Hoeneisen, \"Session
      Initiation Protocol (SIP)\n         Extension Header Field for Registering Non-Adjacent
      Contacts\",\n         RFC 3327, December 2002.\n   [11]  Willis, D. and B. Hoeneisen,
      \"Session Initiation Protocol (SIP)\n         Extension Header Field for Service
      Route Discovery During\n         Registration\", RFC 3608, October 2003.\n   [12]
      \ Rosenberg, J., \"A Session Initiation Protocol (SIP) Event\n         Package
      for Registrations\", RFC 3680, March 2004.\n   [13]  Rosenberg, J., Schulzrinne,
      H., and P. Kyzivat, \"Indicating\n         User Agent Capabilities in the Session
      Initiation Protocol\n         (SIP)\", RFC 3840, August 2004.\n   [14]  Rosenberg,
      J., Schulzrinne, H., and P. Kyzivat, \"Caller\n         Preferences for the
      Session Initiation Protocol (SIP)\",\n         RFC 3841, August 2004.\n   [15]
      \ Schulzrinne, H., \"The tel URI for Telephone Numbers\", RFC 3966,\n         December
      2004.\n   [16]  Eastlake, D., Schiller, J., and S. Crocker, \"Randomness\n         Requirements
      for Security\", BCP 106, RFC 4086, June 2005.\n   [17]  Sparks, R., Hawrylyshen,
      A., Johnston, A., Rosenberg, J., and\n         H. Schulzrinne, \"Session Initiation
      Protocol (SIP) Torture Test\n         Messages\", RFC 4475, May 2006.\n   [18]
      \ Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS)\n         Protocol
      Version 1.2\", RFC 5246, August 2008.\n   [19]  Jennings, C., Mahy, R., and
      F. Audet, \"Managing Client-\n         Initiated Connections in the Session
      Initiation Protocol\n         (SIP)\", RFC 5626, October 2009.\n   [20]  Rosenberg,
      J., \"Obtaining and Using Globally Routable User\n         Agent URIs (GRUUs)
      in the Session Initiation Protocol (SIP)\",\n         RFC 5627, October 2009.\n
      \  [21]  Peterson, J., Jennings, C., and R. Sparks, \"Change Process for\n         the
      Session Initiation Protocol (SIP) and the Real-time\n         Applications and
      Infrastructure Area\", BCP 67, RFC 5727,\n         March 2010.\n   [22]  Elwell,
      J. and H. Kaplan, \"Requirements for Multiple Address of\n         Record (AOR)
      Reachability Information in the Session Initiation\n         Protocol (SIP)\",
      RFC 5947, September 2010.\n   [23]  Kaplan, H., \"GIN with Literal AORs for
      SIP in SSPs (GLASS)\",\n         Work in Progress, November 2010.\n   [24]  National
      Institute of Standards and Technology, \"Secure Hash\n         Standard (SHS)\",
      FIPS PUB 180-3, October 2008, <http://\n         csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf>.\n
      \  [25]  Kaliski, B., \"TWIRL and RSA Key Size\", May 2003.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Appendix A.  Requirements Analysis\n   The document \"Requirements for Multiple
    Address of Record (AOR)\n   Reachability Information in the Session Initiation
    Protocol (SIP)\"\n   [22] contains a list of requirements and desired properties
    for a\n   mechanism to register multiple AORs with a single SIP transaction.\n
    \  This section evaluates those requirements against the mechanism\n   described
    in this document.\n   REQ1 - The mechanism MUST allow a SIP-PBX to enter into
    a trunking\n   arrangement with an SSP whereby the two parties have agreed on
    a set\n   of telephone numbers assigned to the SIP-PBX.\n      The requirement
    is satisfied.\n   REQ2 - The mechanism MUST allow a set of assigned telephone
    numbers\n   to comprise E.164 numbers, which can be in contiguous ranges,\n   discrete,
    or in any combination of the two.\n      The requirement is satisfied.  The Direct
    Inward Dialing (DID)\n      numbers associated with a registration are established
    by\n      bilateral agreement between the SSP and the SIP-PBX; they are not\n
    \     part of the mechanism described in this document.\n   REQ3 - The mechanism
    MUST allow a SIP-PBX to register reachability\n   information with its SSP, in
    order to enable the SSP to route to the\n   SIP-PBX inbound requests targeted
    at assigned telephone numbers.\n      The requirement is satisfied.\n   REQ4 -
    The mechanism MUST allow UAs attached to a SIP-PBX to register\n   with the SIP-PBX
    for AORs based on assigned telephone numbers, in\n   order to receive requests
    targeted at those telephone numbers,\n   without needing to involve the SSP in
    the registration process.\n      The requirement is satisfied; in the presumed
    architecture, SIP-\n      PBX UAs register with the SIP-PBX and require no interaction
    with\n      the SSP.\n   REQ5 - The mechanism MUST allow a SIP-PBX to handle requests\n
    \  originating at its own UAs and targeted at its assigned telephone\n   numbers,
    without routing those requests to the SSP.\n      The requirement is satisfied;
    SIP-PBXes may recognize their own\n      DID numbers and GRUUs, and perform on-SIP-PBX
    routing without\n      sending the requests to the SSP.\n   REQ6 - The mechanism
    MUST allow a SIP-PBX to receive requests to its\n   assigned telephone numbers
    originating outside the SIP-PBX and\n   arriving via the SSP, so that the SIP-PBX
    can route those requests\n   onwards to its UAs, as it would for internal requests
    to those\n   telephone numbers.\n      The requirement is satisfied\n   REQ7 -
    The mechanism MUST provide a means whereby a SIP-PBX knows\n   which of its assigned
    telephone numbers an inbound request from its\n   SSP is targeted at.\n      The
    requirement is satisfied.  For ordinary calls and calls using\n      public GRUUs,
    the DID number is indicated in the user portion of\n      the Request URI.  For
    calls using Temp GRUUs constructed with the\n      mechanism described in Section
    7.1.2, the \"gr\" parameter provides\n      a correlation token the SIP-PBX can
    use to identify to which UA\n      the call should be routed.\n   REQ8 - The mechanism
    MUST provide a means of avoiding problems due to\n   one side using the mechanism
    and the other side not.\n      The requirement is satisfied through the 'gin'
    option tag and the\n      'bnc' Contact URI parameter.\n   REQ9 - The mechanism
    MUST observe SIP backwards compatibility\n   principles.\n      The requirement
    is satisfied through the 'gin' option tag.\n   REQ10 - The mechanism MUST work
    in the presence of a sequence of\n   intermediate SIP entities on the SIP-PBX-to-SSP
    interface (i.e.,\n   between the SIP-PBX and the SSP's domain proxy), where those\n
    \  intermediate SIP entities indicated during registration a need to be\n   on
    the path of inbound requests to the SIP-PBX.\n      The requirement is satisfied
    through the use of the path mechanism\n      defined in RFC 3327 [10]\n   REQ11
    - The mechanism MUST work when a SIP-PBX obtains its IP address\n   dynamically.\n
    \     The requirement is satisfied by allowing the SIP-PBX to use an IP\n      address
    in the Bulk Number Contact URI contained in a REGISTER\n      \"Contact\" header
    field.\n   REQ12 - The mechanism MUST work without requiring the SIP-PBX to have\n
    \  a domain name or the ability to publish its domain name in the DNS.\n      The
    requirement is satisfied by allowing the SIP-PBX to use an IP\n      address in
    the Bulk Number Contact URI contained in a REGISTER\n      \"Contact\" header
    field.\n   REQ13 - For a given SIP-PBX and its SSP, there MUST be no impact on\n
    \  other domains, which are expected to be able to use normal RFC 3263\n   procedures
    to route requests, including requests needing to be routed\n   via the SSP in
    order to reach the SIP-PBX.\n      The requirement is satisfied by allowing the
    domain name in the\n      Request URI used by external entities to resolve to
    the SSP's\n      servers via normal RFC 3263 resolution procedures.\n   REQ14
    - The mechanism MUST be able to operate over a transport that\n   provides end-to-end
    integrity protection and confidentiality between\n   the SIP-PBX and the SSP,
    e.g., using TLS as specified in [3].\n      The requirement is satisfied; nothing
    in the proposed mechanism\n      prevents the use of TLS between the SSP and the
    SIP-PBX.\n   REQ15 - The mechanism MUST support authentication of the SIP-PBX
    by\n   the SSP and vice versa, e.g., using SIP digest authentication plus\n   TLS
    server authentication as specified in [3].\n      The requirement is satisfied;
    SIP-PBXes may employ either SIP\n      digest authentication or mutually authenticated
    TLS for\n      authentication purposes.\n   REQ16 - The mechanism MUST allow the
    SIP-PBX to provide its UAs with\n   public or temporary Globally Routable UA URIs
    (GRUUs) [20].\n      The requirement is satisfied via the mechanisms detailed
    in\n      Section 7.1.\n   REQ17 - The mechanism MUST work over any existing transport
    specified\n   for SIP, including UDP.\n      The requirement is satisfied to the
    extent that UDP can be used\n      for REGISTER requests in general.  The application
    of certain\n      extensions and/or network topologies may exceed UDP MTU sizes,
    but\n      such issues arise both with and without the mechanism described in\n
    \     this document.  This document does not exacerbate such issues.\n   REQ18
    - Documentation MUST give guidance or warnings about how\n   authorization policies
    may be affected by the mechanism, to address\n   the problems described in Section
    3.3 [of RFC 5947].\n      These issues are addressed at length in Section 10,
    as well as\n      summarized in Section 7.4.\n   REQ19 - The mechanism MUST be
    extensible to allow a set of assigned\n   telephone numbers to comprise local
    numbers as specified in RFC 3966\n   [15], which can be in contiguous ranges,
    discrete, or in any\n   combination of the two.\n      Assignment of telephone
    numbers to a registration is performed by\n      the SSP's registrar, which is
    not precluded from assigning local\n      numbers in any combination it desires.\n
    \  REQ20 - The mechanism MUST be extensible to allow a set of\n   arbitrarily
    assigned SIP URI's as specified in RFC 3261 [3], as\n   opposed to just telephone
    numbers, without requiring a complete\n   change of mechanism as compared to that
    used for telephone numbers.\n      The mechanism is extensible in such a fashion,
    as demonstrated by\n      the document \"GIN with Literal AoRs for SIP in SSPs
    (GLASS)\" [23].\n   DES1 - The mechanism SHOULD allow an SSP to exploit its mechanisms\n
    \  for providing SIP service to normal UAs in order to provide a SIP\n   trunking
    service to SIP-PBXes.\n      The desired property is satisfied; the routing mechanism
    described\n      in this document is identical to the routing performed for singly\n
    \     registered AORs.\n   DES2 - The mechanism SHOULD scale to SIP-PBXes of several
    thousand\n   assigned telephone numbers.\n      The desired property is satisfied;
    nothing in this document\n      precludes DID number pools of arbitrary size.\n
    \  DES3 - The mechanism SHOULD scale to support several thousand SIP-\n   PBX's
    on a single SSP.\n      The desired property is satisfied; nothing in this document\n
    \     precludes an arbitrary number of SIP-PBXes from attaching to a\n      single
    SSP.\n"
  title: Appendix A.  Requirements Analysis
- contents:
  - "Author's Address\n   Adam Roach\n   Tekelec\n   17210 Campbell Rd.\n   Suite
    250\n   Dallas, TX  75252\n   US\n   EMail: adam@nostrum.com\n"
  title: Author's Address
