- title: __initial_text__
  contents:
  - '                 Hash Of Root Key Certificate Extension

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the Hash Of Root Key certificate extension.\n\
    \   This certificate extension is carried in the self-signed certificate\n   for\
    \ a trust anchor, which is often called a Root Certification\n   Authority (CA)\
    \ certificate.  This certificate extension unambiguously\n   identifies the next\
    \ public key that will be used at some point in the\n   future as the next Root\
    \ CA certificate, eventually replacing the\n   current one.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8649.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Terminology ................................................2\n  \
    \    1.2. ASN.1 ......................................................3\n   2.\
    \ Overview ........................................................3\n   3. Hash\
    \ Of Root Key Certificate Extension ..........................4\n   4. IANA Considerations\
    \ .............................................4\n   5. Operational Considerations\
    \ ......................................4\n   6. Security Considerations .........................................6\n\
    \   7. References ......................................................7\n  \
    \    7.1. Normative References .......................................7\n    \
    \  7.2. Informative References .....................................8\n   Appendix\
    \ A.  ASN.1 Module ..........................................9\n   Acknowledgements\
    \ ..................................................10\n   Author's Address ..................................................10\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies the Hash Of Root Key X.509 version\
    \ 3\n   certificate extension.  The extension is an optional addition to the\n\
    \   Internet X.509 Public Key Infrastructure Certificate and Certificate\n   Revocation\
    \ List (CRL) Profile [RFC5280].  The certificate extension\n   facilitates the\
    \ orderly transition from one Root Certification\n   Authority (CA) public key\
    \ to the next.  It does so by publishing the\n   hash value of the next-generation\
    \ public key in the current self-\n   signed certificate.  This hash value is\
    \ a commitment to a particular\n   public key in the next-generation self-signed\
    \ certificate.  This\n   commitment allows a relying party to unambiguously recognize\
    \ the\n   next-generation self-signed certificate when it becomes available,\n\
    \   install the new self-signed certificate in the trust anchor store,\n   and\
    \ eventually remove the previous one from the trust anchor store.\n   A Root CA\
    \ certificate MAY include the Hash Of Root Key certificate\n   extension to provide\
    \ the hash value of the next public key that will\n   be used by the Root CA.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 1.2.  ASN.1
  contents:
  - "1.2.  ASN.1\n   Certificates [RFC5280] use ASN.1 [X680]; Distinguished Encoding\
    \ Rules\n   (DER) [X690] are REQUIRED for certificate signing and validation.\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   Before the initial deployment of the Root CA, the following\
    \ are\n   generated:\n      R1 = The initial Root key pair\n      R2 = The second-generation\
    \ Root key pair\n      H2 = Thumbprint (hash) of the public key of R2\n      C1\
    \ = Self-signed certificate for R1, which also contains H2\n   C1 is a self-signed\
    \ certificate, and it contains H2 within the\n   HashOfRootKey extension.  C1\
    \ is distributed as part of the initial\n   system deployment.  The HashOfRootKey\
    \ certificate extension is\n   described in Section 3.\n   When the time comes\
    \ to replace the initial Root CA certificate, R1,\n   the following are generated:\n\
    \      R3 = The third-generation Root key pair\n      H3 = Thumbprint (hash) the\
    \ public key of R3\n      C2 = Self-signed certificate for R2, which contains\
    \ H3\n   This is an iterative process.  That is, R4 and H4 are generated when\n\
    \   it is time for C3 to replace C2, and so on.\n   The successor to the Root\
    \ CA self-signed certificate can be delivered\n   by any means.  Whenever a new\
    \ Root CA self-signed certificate is\n   received, the recipient is able to verify\
    \ that the potential Root CA\n   certificate links back to a previously authenticated\
    \ Root CA\n   certificate with the HashOfRootKey certificate extension.  That\
    \ is,\n   the recipient verifies the signature on the self-signed certificate\n\
    \   and verifies that the hash of the DER-encoded SubjectPublicKeyInfo\n   from\
    \ the potential Root CA certificate matches the value from the\n   HashOfRootKey\
    \ certificate extension of the current Root CA\n   certificate.  Checking the\
    \ self-signed certificate signature ensures\n   that the certificate contains\
    \ the subject name, public key algorithm\n   identifier, and public key algorithm\
    \ parameters intended by the key\n   owner; these are important inputs to certification\
    \ path validation as\n   defined in Section 6 of [RFC5280].  Checking the hash\
    \ of the\n   SubjectPublicKeyInfo ensures that the certificate contains the\n\
    \   intended public key.  If either check fails, then the potential Root\n   CA\
    \ certificate is not a valid replacement, and the recipient\n   continues to use\
    \ the current Root CA certificate.  If both checks\n   succeed, then the recipient\
    \ adds the potential Root CA certificate to\n   the trust anchor store.  As discussed\
    \ in Section 5, the recipient can\n   remove the current Root CA certificate immediately\
    \ in some\n   situations.  In other situations, the recipient waits an appropriate\n\
    \   amount of time to ensure that existing certification paths continue\n   to\
    \ validate.\n"
- title: 3.  Hash Of Root Key Certificate Extension
  contents:
  - "3.  Hash Of Root Key Certificate Extension\n   The HashOfRootKey certificate\
    \ extension MUST NOT be critical.\n   The following ASN.1 [X680] [X690] syntax\
    \ defines the HashOfRootKey\n   certificate extension:\n   ext-HashOfRootKey EXTENSION\
    \ ::= {    -- Only in Root CA certificates\n      SYNTAX         HashedRootKey\n\
    \      IDENTIFIED BY  id-ce-hashOfRootKey\n      CRITICALITY    {FALSE} }\n  \
    \ HashedRootKey ::= SEQUENCE {\n      hashAlg        HashAlgorithm,        --\
    \ Hash algorithm used\n      hashValue      OCTET STRING }        -- Hash of DER-encoded\n\
    \                                           --   SubjectPublicKeyInfo\n   id-ce-hashOfRootKey\
    \  ::=  OBJECT IDENTIFIER { 1 3 6 1 4 1 51483 2 1 }\n   The definitions of EXTENSION\
    \ and HashAlgorithm can be found in\n   [RFC5912].\n   The hashAlg indicates the\
    \ one-way hash algorithm that was used to\n   compute the hash value.\n   The\
    \ hashValue contains the hash value computed from the next-\n   generation public\
    \ key.  The public key is the DER-encoded\n   SubjectPublicKeyInfo as defined\
    \ in [RFC5280].\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 5.  Operational Considerations
  contents:
  - "5.  Operational Considerations\n   Guidance on the transition from one root key\
    \ to another is available\n   in Section 4.4 of [RFC4210].  Of course, a root\
    \ key is also known as\n   a trust anchor.  In particular, the oldWithNew and\
    \ newWithOld advice\n   ensures that relying parties are able to validate certificates\
    \ issued\n   under the current Root CA certificate and the next-generation Root\
    \ CA\n   certificate throughout the transition.  The notAfter field in the\n \
    \  oldWithNew certificate MUST cover the validity period of all\n   unexpired\
    \ certificates issued under the old Root CA private key.\n   Further, this advice\
    \ SHOULD be followed by Root CAs to avoid the need\n   for all relying parties\
    \ to make the transition at the same time.\n   After issuing the newWithOld certificate,\
    \ the Root CA MUST stop using\n   the old private key to sign certificates.\n\
    \   Some enterprise and application-specific environments offer a\n   directory\
    \ service or certificate repository to make certificate and\n   CRLs available\
    \ to relying parties.  Section 3 in [RFC5280] describes\n   a certificate repository.\
    \  When a certificate repository is\n   available, the oldWithNew and newWithOld\
    \ certificates SHOULD be\n   published before the successor to the current Root\
    \ CA self-signed\n   certificate is released.  Recipients that are able to obtain\
    \ the\n   oldWithNew certificate SHOULD immediately remove the old Root CA\n \
    \  self-signed certificate from the trust anchor store.\n   In environments without\
    \ such a directory service or repository, like\n   the Web PKI, recipients need\
    \ a way to obtain the oldWithNew and\n   newWithOld certificates.  The Root CA\
    \ SHOULD include the subject\n   information access extension [RFC5280] with the\
    \ accessMethod set to\n   id-ad-caRepository and the assessLocation set to the\
    \ HTTP URL that\n   can be used to fetch a DER-encoded \"certs-only\" (simple\
    \ PKI response)\n   message as specified in [RFC5272] in all of their self-signed\n\
    \   certificates.  The Root CA SHOULD publish the \"certs-only\" message\n   with\
    \ the oldWithNew certificate and the newWithOld certificate before\n   the subsequent\
    \ Root CA self-signed certificate is released.  The\n   \"certs-only\" message\
    \ format allows certificates to be added and\n   removed from the bag of certificates\
    \ over time, so the same HTTP URL\n   can be used throughout the lifetime of the\
    \ Root CA.\n   In environments without such a directory service or repository,\n\
    \   recipients SHOULD keep both the old and replacement Root CA self-\n   signed\
    \ certificates in the trust anchor store for some amount of time\n   to ensure\
    \ that all end-entity certificates can be validated until\n   they expire.  The\
    \ recipient MAY keep the old Root CA self-signed\n   certificate until all of\
    \ the certificates in the local cache that are\n   subordinate to it have expired.\n\
    \   Certification path construction is more complex when the trust anchor\n  \
    \ store contains multiple self-signed certificates with the same\n   distinguished\
    \ name.  For this reason, the replacement Root CA self-\n   signed certificate\
    \ SHOULD contain a different distinguished name than\n   the one it is replacing.\
    \  One approach is to include a number as part\n   of the name that is incremented\
    \ with each generation, such as\n   \"Example CA\", \"Example CA G2\", \"Example\
    \ CA G3\", and so on.\n   Changing names from one generation to another can lead\
    \ to confusion\n   when reviewing the history of a trust anchor store.  To assist\
    \ with\n   such review, a recipient MAY create an audit entry to capture the old\n\
    \   and replacement self-signed certificates.\n   The Root CA must securely back\
    \ up the yet-to-be-deployed key pair.\n   If the Root CA stores the key pair in\
    \ a hardware security module and\n   that module fails, the Root CA remains committed\
    \ to the key pair that\n   is no longer available.  This leaves the Root CA with\
    \ no alternative\n   but to deploy a new self-signed certificate that contains\
    \ a newly\n   generated key pair in the same manner as the initial self-signed\n\
    \   certificate, thus losing the benefits of the Hash Of Root Key\n   certificate\
    \ extension altogether.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The security considerations from [RFC5280] apply,\
    \ especially the\n   discussion of self-issued certificates.\n   The Hash Of Root\
    \ Key certificate extension facilitates the orderly\n   transition from one Root\
    \ CA public key to the next by publishing the\n   hash value of the next-generation\
    \ public key in the current\n   certificate.  This allows a relying party to unambiguously\
    \ recognize\n   the next-generation public key when it becomes available; however,\n\
    \   the full public key is not disclosed until the Root CA releases the\n   next-generation\
    \ certificate.  In this way, attackers cannot begin to\n   analyze the public\
    \ key before the next-generation Root CA self-signed\n   certificate is released.\n\
    \   The Root CA needs to ensure that the public key in the next-\n   generation\
    \ certificate is as strong or stronger than the key that it\n   is replacing.\
    \  Of course, a significant advance in cryptoanalytic\n   capability can break\
    \ the yet-to-be-deployed key pair.  Such advances\n   are rare and difficult to\
    \ predict.  If such an advance occurs, the\n   Root CA remains committed to the\
    \ now broken key.  This leaves the\n   Root CA with no alternative but to deploy\
    \ a new self-signed\n   certificate that contains a newly generated key pair,\
    \ most likely\n   using a different signature algorithm, in the same manner as\
    \ the\n   initial self-signed certificate, thus losing the benefits of the Hash\n\
    \   Of Root Key certificate extension altogether.\n   The Root CA needs to employ\
    \ a hash function that is resistant to\n   preimage attacks [RFC4270].  A first-preimage\
    \ attack against the hash\n   function would allow an attacker to find another\
    \ input that results\n   in the hash value of the next-generation public key that\
    \ was\n   published in the current certificate.  For the attack to be\n   successful,\
    \ the input would have to be a valid SubjectPublicKeyInfo\n   that contains a\
    \ public key that corresponds to a private key known to\n   the attacker.  A second-preimage\
    \ attack becomes possible once the\n   Root CA releases the next-generation public\
    \ key, which makes the\n   input to the hash function available to the attacker\
    \ and everyone\n   else.  Again, the attacker needs to find a valid SubjectPublicKeyInfo\n\
    \   that contains the public key that corresponds to a private key known\n   to\
    \ the attacker.  If the employed hash function is broken after the\n   Root CA\
    \ publishes the self-signed certificate with the HashOfRootKey\n   certificate\
    \ extension, an attacker would be able to trick the\n   recipient into installing\
    \ the incorrect next-generation certificate\n   in the trust anchor store.\n \
    \  If an early release of the next-generation public key occurs and the\n   Root\
    \ CA is concerned that attackers were given too much lead time to\n   analyze\
    \ that public key, then the Root CA can transition to a freshly\n   generated\
    \ key pair by rapidly performing two transitions.  After the\n   first transition,\
    \ the Root CA is using the key pair that suffered the\n   early release, and that\
    \ transition causes the Root CA to generate the\n   subsequent Root key pair.\
    \  The second transition occurs when the Root\n   CA is confident that the population\
    \ of relying parties has completed\n   the first transition, and it takes the\
    \ Root CA to the freshly\n   generated key pair.  Of course, the second transition\
    \ also causes the\n   Root CA to generate another key pair that is reserved for\
    \ future use.\n   Queries for the CRLs associated with certificates that are\n\
    \   subordinate to the self-signed certificate can give some indication\n   of\
    \ the number of relying parties that are still actively using the\n   self-signed\
    \ certificates.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC4210]  Adams, C., Farrell, S., Kause, T., and T. Mononen,\n          \
    \    \"Internet X.509 Public Key Infrastructure Certificate\n              Management\
    \ Protocol (CMP)\", RFC 4210,\n              DOI 10.17487/RFC4210, September 2005,\n\
    \              <https://www.rfc-editor.org/info/rfc4210>.\n   [RFC4270]  Hoffman,\
    \ P. and B. Schneier, \"Attacks on Cryptographic\n              Hashes in Internet\
    \ Protocols\", RFC 4270,\n              DOI 10.17487/RFC4270, November 2005,\n\
    \              <https://www.rfc-editor.org/info/rfc4270>.\n   [RFC5272]  Schaad,\
    \ J. and M. Myers, \"Certificate Management over CMS\n              (CMC)\", RFC\
    \ 5272, DOI 10.17487/RFC5272, June 2008,\n              <https://www.rfc-editor.org/info/rfc5272>.\n\
    \   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n         \
    \     Housley, R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure\
    \ Certificate and Certificate Revocation List\n              (CRL) Profile\",\
    \ RFC 5280, DOI 10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n\
    \   [RFC5912]  Hoffman, P. and J. Schaad, \"New ASN.1 Modules for the\n      \
    \        Public Key Infrastructure Using X.509 (PKIX)\", RFC 5912,\n         \
    \     DOI 10.17487/RFC5912, June 2010,\n              <https://www.rfc-editor.org/info/rfc5912>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [X680]     ITU-T,\
    \ \"Information technology -- Abstract Syntax Notation\n              One (ASN.1):\
    \ Specification of basic notation\",\n              ITU-T Recommendation X.680,\
    \ August 2015.\n   [X690]     ITU-T, \"Information Technology -- ASN.1 encoding\
    \ rules:\n              Specification of Basic Encoding Rules (BER), Canonical\n\
    \              Encoding Rules (CER) and Distinguished Encoding Rules\n       \
    \       (DER)\", ITU-T Recommendation X.690, August 2015.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [SET]      MasterCard and VISA, \"SET Secure\
    \ Electronic Transaction\n              Specification -- Book 2: Programmer's\
    \ Guide, Version 1.0\",\n              May 1997.\n"
- title: Appendix A.  ASN.1 Module
  contents:
  - "Appendix A.  ASN.1 Module\n   The following ASN.1 module provides the complete\
    \ definition of the\n   HashOfRootKey certificate extension.\n   <CODE BEGINS>\n\
    \   HashedRootKeyCertExtn { 1 3 6 1 4 1 51483 0 1 }\n   DEFINITIONS IMPLICIT TAGS\
    \ ::=\n   BEGIN\n   -- EXPORTS All\n   IMPORTS\n   HashAlgorithm\n     FROM PKIX1-PSS-OAEP-Algorithms-2009\
    \  -- RFC 5912\n          { iso(1) identified-organization(3) dod(6) internet(1)\n\
    \            security(5) mechanisms(5) pkix(7) id-mod(0)\n            id-mod-pkix1-rsa-pkalgs-02(54)\
    \ }\n   EXTENSION\n     FROM PKIX-CommonTypes-2009  -- RFC 5912\n       { iso(1)\
    \ identified-organization(3) dod(6) internet(1)\n         security(5) mechanisms(5)\
    \ pkix(7) id-mod(0)\n         id-mod-pkixCommon-02(57) } ;\n   --\n   -- Expand\
    \ the certificate extensions list in RFC 5912\n   --\n   CertExtensions EXTENSION\
    \ ::= {\n      ext-HashOfRootKey, ... }\n   --\n   -- HashOfRootKey Certificate\
    \ Extension\n   --\n   ext-HashOfRootKey EXTENSION ::= {    -- Only in Root CA\
    \ certificates\n      SYNTAX         HashedRootKey\n      IDENTIFIED BY  id-ce-hashOfRootKey\n\
    \      CRITICALITY    {FALSE} }\n   HashedRootKey  ::=  SEQUENCE {\n      hashAlg\
    \        HashAlgorithm,     -- Hash algorithm used\n      hashValue      OCTET\
    \ STRING }     -- Hash of DER-encoded\n                                      \
    \  --   SubjectPublicKeyInfo\n   id-ce-hashOfRootKey OBJECT IDENTIFIER  ::=  {\
    \ 1 3 6 1 4 1 51483 2 1 }\n   END\n   <CODE ENDS>\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The Secure Electronic Transaction (SET) [SET] specification\
    \ published\n   by MasterCard and VISA in 1997 includes a very similar certificate\n\
    \   extension.  The SET certificate extension has essentially the same\n   semantics,\
    \ but the syntax fairly different.\n   CTIA - The Wireless Association - is developing\
    \ a public key\n   infrastructure that will make use of the certificate extension\n\
    \   described in this document; the object identifiers used in the ASN.1\n   module\
    \ were assigned by CTIA.\n   Many thanks to Stefan Santesson, Jim Schaad, Daniel\
    \ Kahn Gillmor,\n   Joel Halpern, Paul Hoffman, Rich Salz, and Ben Kaduk.  Their\
    \ reviews\n   and comments greatly improved the document, especially the\n   \"\
    Operational Considerations\" and \"Security Considerations\" sections.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Russ Housley\n   Vigil Security\n   516 Dranesville Road\n\
    \   Herndon, VA  20170\n   United States of America\n   Email: housley@vigilsec.com\n"
