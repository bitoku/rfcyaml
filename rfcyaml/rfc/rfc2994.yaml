- title: __initial_text__
  contents:
  - '            A Description of the MISTY1 Encryption Algorithm

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a secret-key cryptosystem MISTY1, which\
    \ is\n   block cipher with a 128-bit key, a 64-bit block and a variable number\n\
    \   of rounds.  It documents the algorithm description including key\n   scheduling\
    \ part and data randomizing part.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document describes a secret-key cryptosystem MISTY1,\
    \ which is\n   block cipher with a 128-bit key, a 64-bit block and a variable\
    \ number\n   of rounds.  It is designed on the basis of the theory of provable\n\
    \   security against differential and linear cryptanalysis, and moreover\n   it\
    \ realizes high-speed encryption on hardware platforms as well as on\n   software\
    \ environments.  As the result of weighing strength and speed,\n   8-rounds of\
    \ MISTY1 is recommended and used in most cases.\n   Our implementation shows that\
    \ MISTY1 with eight rounds can encrypt a\n   data stream in CBC mode at a speed\
    \ of 57Mbps and 40Mbps on Pentium\n   II/266MHz and PA-7200/120MHz, respectively.\
    \  For its hardware\n   performance, we have produced a prototype LSI by a process\
    \ of 0.8-\n   micron CMOS gate-array and confirmed a speed of 512Mbps.\n"
- title: 2. Algorithm Description
  contents:
  - "2. Algorithm Description\n   Algorithm [1] could be divided into two parts, namely\
    \ \"key scheduling\n   part\" and \"data randomizing part\".  Key scheduling part\
    \ takes a 128-\n   bit input key and produces a 128-bit expanded key.  Data randomizing\n\
    \   part takes a 64-bit input data and mixes it, namely encryption.  If\n   data\
    \ randomizing part is processed in reverse order, mixed data is\n   transformed\
    \ to input data, namely decryption.\n"
- title: 2.1 Terminology
  contents:
  - "2.1 Terminology\n   Some operators are used in this document to describe the\
    \ algorithm.\n   The operator `+' indicates two's complement addition.  The operator\n\
    \   `*' indicates multiplication.  The operator `/' yields the quotient,\n   and\
    \ the operator `%' yields the remainder from the division.  The\n   operator `&'\
    \ indicates bitwise AND operation.  The operator `|'\n   indicates bitwise inclusive\
    \ OR operation.  The operator `^' indicates\n   bitwise exclusive OR operation.\
    \  The operator `<<' indicates bitwise\n   left shift operation.  The operator\
    \ `>>' indicates bitwise right\n   shift operation.\n"
- title: 2.2 Key Scheduling Part
  contents:
  - "2.2 Key Scheduling Part\n   Key scheduling part consists of the following operations.\n\
    \   for i = 0, ..., 7 do\n       EK[i] = K[i*2]*256 + K[i*2+1];\n   for i = 0,\
    \ ..., 7 do\n   begin\n       EK[i+ 8] = FI(EK[i], EK[(i+1)%8]);\n       EK[i+16]\
    \ = EK[i+8] & 0x1ff;\n       EK[i+24] = EK[i+8] >> 9;\n   end\n   K is an input\
    \ key, and each element of K, namely K[i], holds an 8-bit\n   of the key, respectively.\
    \  EK denotes an expanded key, and each\n   element of EK, namely EK[i], holds\
    \ a 16-bit of the expanded key.\n   Input data of K[0], ..., K[15] are copied\
    \ to EK[0], ..., EK[7].\n   Expanded key is produced from EK[0], ..., EK[7] by\
    \ using function FI,\n   and stored in EK[8], ..., EK[15].  Function FI is described\
    \ in the\n   following section.\n"
- title: 2.3 Data Randomizing Part
  contents:
  - "2.3 Data Randomizing Part\n   Data randomizing part uses two kinds of function,\
    \ which are called\n   function FO and function FL.  Function FO calls another\
    \ function,\n   namely FI.  The key expansion part also uses function FI.  Function\n\
    \   FI uses two S-boxes, namely S7, S9.  Each function is described as\n   follows.\n\
    \   Function FO takes two parameters.  One is a 32-bit width input data,\n   namely\
    \ FO_IN.  The other is an index of EK, namely k.  And FO returns\n   a 32-bit\
    \ width data, namely FO_OUT.\n   FO(FO_IN, k)\n   begin\n       var t0, t1 as\
    \ 16-bit integer;\n       t0 = FO_IN >> 16;\n       t1 = FO_IN & 0xffff;\n   \
    \    t0 = t0 ^ EK[k];\n       t0 = FI(t0, EK[(k+5)%8+8]);\n       t0 = t0 ^ t1;\n\
    \       t1 = t1 ^ EK[(k+2)%8];\n       t1 = FI(t1, EK[(k+1)%8+8]);\n       t1\
    \ = t1 ^ t0;\n       t0 = t0 ^ EK[(k+7)%8];\n       t0 = FI(t0, EK[(k+3)%8+8]);\n\
    \       t0 = t0 ^ t1;\n       t1 = t1 ^ EK[(k+4)%8];\n       FO_OUT = (t1<<16)\
    \ | t0;\n       return FO_OUT;\n   end.\n   Function FI takes two parameters.\
    \  One is a 16-bit width input data,\n   namely FI_IN.  The other is a part of\
    \ EK, namely FI_KEY, which is\n   also 16-bit width.  And FI returns a 16-bit\
    \ width data, namely\n   FI_OUT.\n   FI(FI_IN, FI_KEY)\n   begin\n       var d9\
    \ as 9-bit integer;\n       var d7 as 7-bit integer;\n       d9 = FI_IN >> 7;\n\
    \       d7 = FI_IN & 0x7f;\n       d9 = S9TABLE[d9] ^ d7;\n       d7 = S7TABLE[d7]\
    \ ^ d9;\n       ( d7 = d7 & 0x7f; )\n       d7 = d7 ^ (FI_KEY >> 9);\n       d9\
    \ = d9 ^ (FI_KEY & 0x1ff);\n       d9 = S9TABLE[d9] ^ d7;\n       FI_OUT = (d7<<9)\
    \ | d9;\n       return FI_OUT;\n   end.\n   S7TABLE and S9TABLE denote the S-boxes\
    \ S7 and S9 respectively in\n   terms of look up table notation.  Here are the\
    \ description of S7TABLE\n   and S9TABLE in hexadecimal notation.\n   S7TABLE:\n\
    \        0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n   00: 1b 32 33 5a 3b\
    \ 10 17 54 5b 1a 72 73 6b 2c 66 49\n   10: 1f 24 13 6c 37 2e 3f 4a 5d 0f 40 56\
    \ 25 51 1c 04\n   20: 0b 46 20 0d 7b 35 44 42 2b 1e 41 14 4b 79 15 6f\n   30:\
    \ 0e 55 09 36 74 0c 67 53 28 0a 7e 38 02 07 60 29\n   40: 19 12 65 2f 30 39 08\
    \ 68 5f 78 2a 4c 64 45 75 3d\n   50: 59 48 03 57 7c 4f 62 3c 1d 21 5e 27 6a 70\
    \ 4d 3a\n   60: 01 6d 6e 63 18 77 23 05 26 76 00 31 2d 7a 7f 61\n   70: 50 22\
    \ 11 06 47 16 52 4e 71 3e 69 43 34 5c 58 7d\n   S9TABLE:\n          0   1   2\
    \   3   4   5   6   7   8   9   a   b   c   d   e   f\n   000: 1c3 0cb 153 19f\
    \ 1e3 0e9 0fb 035 181 0b9 117 1eb 133 009 02d 0d3\n   010: 0c7 14a 037 07e 0eb\
    \ 164 193 1d8 0a3 11e 055 02c 01d 1a2 163 118\n   020: 14b 152 1d2 00f 02b 030\
    \ 13a 0e5 111 138 18e 063 0e3 0c8 1f4 01b\n   030: 001 09d 0f8 1a0 16d 1f3 01c\
    \ 146 07d 0d1 082 1ea 183 12d 0f4 19e\n   040: 1d3 0dd 1e2 128 1e0 0ec 059 091\
    \ 011 12f 026 0dc 0b0 18c 10f 1f7\n   050: 0e7 16c 0b6 0f9 0d8 151 101 14c 103\
    \ 0b8 154 12b 1ae 017 071 00c\n   060: 047 058 07f 1a4 134 129 084 15d 19d 1b2\
    \ 1a3 048 07c 051 1ca 023\n   070: 13d 1a7 165 03b 042 0da 192 0ce 0c1 06b 09f\
    \ 1f1 12c 184 0fa 196\n   080: 1e1 169 17d 031 180 10a 094 1da 186 13e 11c 060\
    \ 175 1cf 067 119\n   090: 065 068 099 150 008 007 17c 0b7 024 019 0de 127 0db\
    \ 0e4 1a9 052\n   0a0: 109 090 19c 1c1 028 1b3 135 16a 176 0df 1e5 188 0c5 16e\
    \ 1de 1b1\n   0b0: 0c3 1df 036 0ee 1ee 0f0 093 049 09a 1b6 069 081 125 00b 05e\
    \ 0b4\n   0c0: 149 1c7 174 03e 13b 1b7 08e 1c6 0ae 010 095 1ef 04e 0f2 1fd 085\n\
    \   0d0: 0fd 0f6 0a0 16f 083 08a 156 09b 13c 107 167 098 1d0 1e9 003 1fe\n   0e0:\
    \ 0bd 122 089 0d2 18f 012 033 06a 142 0ed 170 11b 0e2 14f 158 131\n   0f0: 147\
    \ 05d 113 1cd 079 161 1a5 179 09e 1b4 0cc 022 132 01a 0e8 004\n   100: 187 1ed\
    \ 197 039 1bf 1d7 027 18b 0c6 09c 0d0 14e 06c 034 1f2 06e\n   110: 0ca 025 0ba\
    \ 191 0fe 013 106 02f 1ad 172 1db 0c0 10b 1d6 0f5 1ec\n   120: 10d 076 114 1ab\
    \ 075 10c 1e4 159 054 11f 04b 0c4 1be 0f7 029 0a4\n   130: 00e 1f0 077 04d 17a\
    \ 086 08b 0b3 171 0bf 10e 104 097 15b 160 168\n   140: 0d7 0bb 066 1ce 0fc 092\
    \ 1c5 06f 016 04a 0a1 139 0af 0f1 190 00a\n   150: 1aa 143 17b 056 18d 166 0d4\
    \ 1fb 14d 194 19a 087 1f8 123 0a7 1b8\n   160: 141 03c 1f9 140 02a 155 11a 1a1\
    \ 198 0d5 126 1af 061 12e 157 1dc\n   170: 072 18a 0aa 096 115 0ef 045 07b 08d\
    \ 145 053 05f 178 0b2 02e 020\n   180: 1d5 03f 1c9 1e7 1ac 044 038 014 0b1 16b\
    \ 0ab 0b5 05a 182 1c8 1d4\n   190: 018 177 064 0cf 06d 100 199 130 15a 005 120\
    \ 1bb 1bd 0e0 04f 0d6\n   1a0: 13f 1c4 12a 015 006 0ff 19b 0a6 043 088 050 15f\
    \ 1e8 121 073 17e\n   1b0: 0bc 0c2 0c9 173 189 1f5 074 1cc 1e6 1a8 195 01f 041\
    \ 00d 1ba 032\n   1c0: 03d 1d1 080 0a8 057 1b9 162 148 0d9 105 062 07a 021 1ff\
    \ 112 108\n   1d0: 1c0 0a9 11d 1b0 1a6 0cd 0f3 05c 102 05b 1d9 144 1f6 0ad 0a5\
    \ 03a\n   1e0: 1cb 136 17f 046 0e1 01e 1dd 0e6 137 1fa 185 08c 08f 040 1b5 0be\n\
    \   1f0: 078 000 0ac 110 15e 124 002 1bc 0a2 0ea 070 1fc 116 15c 04c 1c2\n   Function\
    \ FL takes two parameters.  One is a 32-bit data, namely\n   FL_IN.  The other\
    \ is an index of EK, namely k.  And FL returns a 32-\n   bit width data, namely\
    \ FL_OUT.\n   FL(FL_IN, k)\n   begin\n       var d0, d1 as 16-bit integer;\n \
    \      d0 = FL_IN >> 16;\n       d1 = FL_IN & 0xffff;\n       if (k is an even\
    \ number) then\n           d1 = d1 ^ (d0 & EK[k/2]);\n           d0 = d0 ^ (d1\
    \ | EK[(k/2+6)%8+8]);\n       else\n           d1 = d1 ^ (d0 & EK[((k-1)/2+2)%8+8]);\n\
    \           d0 = d0 ^ (d1 | EK[((k-1)/2+4)%8]);\n       endif\n       FL_OUT =\
    \ (d0<<16) | d1;\n       return FL_OUT;\n   end.\n   When the algorithm is used\
    \ for decryption, function FLINV is used\n   instead of function FL.\n   FLINV(FL_IN,\
    \ k)\n   begin\n       var d0, d1 as 16-bit integer;\n       d0 = FL_IN >> 16;\n\
    \       d1 = FL_IN & 0xffff;\n       if (k is an even number) then\n         \
    \  d0 = d0 ^ (d1 | EK[(k/2+6)%8+8]);\n           d1 = d1 ^ (d0 & EK[k/2]);\n \
    \      else\n           d0 = d0 ^ (d1 | EK[((k-1)/2+4)%8]);\n           d1 = d1\
    \ ^ (d0 & EK[((k-1)/2+2)%8+8]);\n       endif\n       FL_OUT = (d0<<16) | d1;\n\
    \       return FL_OUT;\n   end.\n   In most cases, data randomizing part consists\
    \ of 8 \"rounds\".  Round\n   contains the call of function FO.  Additionally,\
    \ even-number round\n   includes the calls of function FL.  After the final round,\
    \ FLs are\n   called again.  The detail description is as follows.\n   64-bit\
    \ plaintext P is divided into the leftmost 32-bit D0 and the\n   rightmost 32-bit\
    \ D1.\n   // 0 round\n   D0 = FL(D0, 0);\n   D1 = FL(D1, 1);\n   D1 = D1 ^ FO(D0,\
    \ 0);\n   // 1 round\n   D0 = D0 ^ FO(D1, 1);\n   // 2 round\n   D0 = FL(D0, 2);\n\
    \   D1 = FL(D1, 3);\n   D1 = D1 ^ FO(D0, 2);\n   // 3 round\n   D0 = D0 ^ FO(D1,\
    \ 3);\n   // 4 round\n   D0 = FL(D0, 4);\n   D1 = FL(D1, 5);\n   D1 = D1 ^ FO(D0,\
    \ 4);\n   // 5 round\n   D0 = D0 ^ FO(D1, 5);\n   // 6 round\n   D0 = FL(D0, 6);\n\
    \   D1 = FL(D1, 7);\n   D1 = D1 ^ FO(D0, 6);\n   // 7 round\n   D0 = D0 ^ FO(D1,\
    \ 7);\n   // final\n   D0 = FL(D0, 8);\n   D1 = FL(D1, 9);\n   64-bit ciphertext\
    \ C is constructed from D0 and D1 as following\n   operation.\n   C = (D1<<32)\
    \ | D0;\n   When data randomizing part is used as decrypting operation, it should\n\
    \   be executed in reverse order.  The detail description is as follows.\n   D0\
    \ = C & 0xffffffff;\n   D1 = C >> 32;\n   D0 = FLINV(D0, 8);\n   D1 = FLINV(D1,\
    \ 9);\n   D0 = D0 ^ FO(D1, 7);\n   D1 = D1 ^ FO(D0, 6);\n   D0 = FLINV(D0, 6);\n\
    \   D1 = FLINV(D1, 7);\n   D0 = D0 ^ FO(D1, 5);\n   D1 = D1 ^ FO(D0, 4);\n   D0\
    \ = FLINV(D0, 4);\n   D1 = FLINV(D1, 5);\n   D0 = D0 ^ FO(D1, 3);\n   D1 = D1\
    \ ^ FO(D0, 2);\n   D0 = FLINV(D0, 2);\n   D1 = FLINV(D1, 3);\n   D0 = D0 ^ FO(D1,\
    \ 1);\n   D1 = D1 ^ FO(D0, 0);\n   D0 = FLINV(D0, 0);\n   D1 = FLINV(D1, 1);\n\
    \   P = (D0<<32) | D1;\n"
- title: 3. Object Identifier
  contents:
  - "3. Object Identifier\n   The Object Identifier for MISTY1 in Cipher Block Chaining\
    \ (CBC) mode\n   is as follows:\n   MISTY1-CBC OBJECT IDENTIFIER ::=\n     {iso(1)\
    \ member-body(2) jisc(392)\n      mitsubishi-electric-corporation(200011) isl(61)\
    \ security(1)\n      algorithm(1) symmetric-encryption-algorithm(1) misty1-cbc(1)}\n\
    \   MISTY1-CBC needs Initialization Vector (IV) as like as other\n   algorithms,\
    \ such as DES-CBC, DES-EDE3-CBC and so on.  To determine\n   the value of IV,\
    \ MISTY1-CBC takes parameter as:\n   MISTY1-CBC Parameter ::= IV\n   where IV\
    \ ::= OCTET STRING -- 8 octets.\n   When this Object Identifier is used, plaintext\
    \ is padded before\n   encrypt it.  At least 1 padding octet is appended at the\
    \ end of the\n   plaintext to make the length of the plaintext to the multiple\
    \ of 8\n   octets.  The value of these octets is as same as the number of\n  \
    \ appended octets.  (e.g., If 5 octets are needed to pad, the value is\n   0x05.)\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   The algorithm, which is described in this document,\
    \ is designed in\n   consideration of the theory of provable security against\
    \ differential\n   cryptanalysis and linear cryptanalysis [2][3][4].  According\
    \ to the\n   recent result, when the algorithm consists of 8 rounds, both\n  \
    \ differential characteristic probability and liner characteristic\n   probability\
    \ are 2^-140.  For reference, probabilities of DES are 2^-\n   62 and 2^-46, respectively.\n"
- title: 5. Legal Issues
  contents:
  - "5. Legal Issues\n   The algorithm description is applied for a patent in several\n\
    \   countries as PCT/JP96/02154.  However, the algorithm is freely\n   available\
    \ for academic (non-profit) use.  Additionally, the algorithm\n   can be used\
    \ for commercial use without paying the patent fee if you\n   contract with Mitsubishi\
    \ Electric Corporation.  For more information,\n   please contact at MISTY@isl.melco.co.jp.\n"
- title: 6. References
  contents:
  - "6. References\n   [1]  M. Matsui, \"New Block Encryption Algorithm MISTY\", Fast\
    \ Software\n        Encryption - 4th International Workshop (FSE'97), LNCS 1267,\n\
    \        Springer Verlag, 1997, pp.54-68\n   [2]  K. Nyberg and L.R. Knudsen,\
    \ \"Provable Security Against a\n        Differential Attack\", Journal of Cryptology,\
    \ Vol.8, No.1, 1995,\n        pp. 27-37\n   [3]  K. Nyberg, \"Linear Approximation\
    \ of Block Ciphers\", Advances in\n        Cryptology - Eurocrypt'94, LNCS 950,\
    \ Springer Verlag, 1995,\n        pp.439-444\n   [4]  M. Matsui, \"New Structure\
    \ of Block Ciphers with Provable\n        Security Against Differential and Linear\
    \ Cryptanalysis\", Fast\n        Software Encryption - Third International Workshop,\
    \ LNCS 1039,\n        Springer Verlag, 1996, pp.205-218\n"
- title: 7. Authors' Addresses
  contents:
  - "7. Authors' Addresses\n   Hidenori Ohta\n   Mitsubishi Electric Corporation,\
    \ Information Technology R&D Center\n   5-1-1 Ofuna, Kamakura, Kanagawa 247-8501,\
    \ Japan\n   Phone: +81-467-41-2183\n   Fax:   +81-467-41-2185\n   EMail: hidenori@iss.isl.melco.co.jp\n\
    \   Mitsuru Matsui\n   Mitsubishi Electric Corporation, Information Technology\
    \ R&D Center\n   5-1-1 Ofuna, Kamakura, Kanagawa 247-8501, Japan\n   Phone: +81-467-41-2181\n\
    \   Fax:   +81-467-41-2185\n   EMail: matsui@iss.isl.melco.co.jp\n"
- title: Appendix A. Example Data of MISTY1
  contents:
  - "Appendix A. Example Data of MISTY1\n   Here is an example ciphertext of MISTY1\
    \ when the key and the\n   plaintext are set as following value.\n   Key:    \
    \    00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff\n   Plaintext:  01 23 45\
    \ 67 89 ab cd ef fe dc ba 98 76 54 32 10\n   Ciphertext: 8b 1d a5 f5 6a b3 d0\
    \ 7c 04 b6 82 40 b1 3b e9 5d\n   In the above example, because the plaintext has\
    \ a length of 128-bit,\n   MISTY1 is used two times to each 64-bit, namely ECB\
    \ mode.\n   Following example is ciphertext of MISTY1 in CBC mode.\n   Key:  \
    \      00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff\n   IV:         01 02 03\
    \ 04 05 06 07 08\n   Plaintext:  01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32\
    \ 10\n   Ciphertext: 46 1c 1e 87 9c 18 c2 7f b9 ad f2 d8 0c 89 03 1f\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
