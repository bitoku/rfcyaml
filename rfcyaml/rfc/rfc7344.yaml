- contents:
  - '             Automating DNSSEC Delegation Trust Maintenance

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes a method to allow DNS Operators to more\n
    \  easily update DNSSEC Key Signing Keys using the DNS as a\n   communication
    channel.  The technique described is aimed at\n   delegations in which it is currently
    hard to move information from\n   the Child to Parent.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;
    it is\n   published for informational purposes.\n   This document is a product
    of the Internet Engineering Task Force\n   (IETF).  It represents the consensus
    of the IETF community.  It has\n   received public review and has been approved
    for publication by the\n   Internet Engineering Steering Group (IESG).  Not all
    documents\n   approved by the IESG are a candidate for any level of Internet\n
    \  Standard; see Section 2 of RFC 5741.\n   Information about the current status
    of this document, any errata,\n   and how to provide feedback on it may be obtained
    at\n   http://www.rfc-editor.org/info/rfc7344.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n     1.1.  Terminology . . . . . . . . . . . . . . . . . . . .
    . . .   4\n     1.2.  Requirements Notation . . . . . . . . . . . . . . . . .
    .   4\n   2.  Background  . . . . . . . . . . . . . . . . . . . . . . . . .   5\n
    \    2.1.  DNS Delegations . . . . . . . . . . . . . . . . . . . . .   5\n     2.2.
    \ Relationship between Parent and Child DNS Operators . . .   5\n       2.2.1.
    \ Solution Space  . . . . . . . . . . . . . . . . . . .   6\n       2.2.2.  DNSSEC
    Key Change Process . . . . . . . . . . . . . .   7\n   3.  CDS (Child DS) and
    CDNSKEY (Child DNSKEY) Record Definitions    7\n     3.1.  CDS Resource Record
    Format  . . . . . . . . . . . . . . .   8\n     3.2.  CDNSKEY Resource Record
    Format  . . . . . . . . . . . . .   8\n   4.  Automating DS Maintenance with CDS/CDNSKEY
    Records  . . . . .   8\n     4.1.  CDS and CDNSKEY Processing Rules  . . . . .
    . . . . . . .   9\n   5.  CDS/CDNSKEY Publication . . . . . . . . . . . . . .
    . . . . .   9\n   6.  Parent-Side CDS/CDNSKEY Consumption . . . . . . . . . .
    . . .   9\n     6.1.  Detecting a Changed CDS/CDNSKEY . . . . . . . . . . . .
    .  10\n       6.1.1.  CDS/CDNSKEY Polling . . . . . . . . . . . . . . . . .  10\n
    \      6.1.2.  Polling Triggers  . . . . . . . . . . . . . . . . . .  11\n     6.2.
    \ Using the New CDS/CDNSKEY Records . . . . . . . . . . . .  11\n       6.2.1.
    \ Parent Calculates DS  . . . . . . . . . . . . . . . .  12\n   7.  IANA Considerations
    . . . . . . . . . . . . . . . . . . . . .  12\n   8.  Privacy Considerations  .
    . . . . . . . . . . . . . . . . . .  12\n   9.  Security Considerations . . .
    . . . . . . . . . . . . . . . .  13\n   10. Acknowledgements  . . . . . . . .
    . . . . . . . . . . . . . .  14\n   11. References  . . . . . . . . . . . . .
    . . . . . . . . . . . .  15\n     11.1.  Normative References . . . . . . . .
    . . . . . . . . . .  15\n     11.2.  Informative References . . . . . . . . .
    . . . . . . . .  15\n   Appendix A.  RRR Background . . . . . . . . . . . . .
    . . . . . .  17\n   Appendix B.  CDS Key Rollover Example . . . . . . . . . .
    . . . .  17\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The first time a DNS Operator signs a zone, they need to
    communicate\n   the keying material to their Parent through some out-of-band method\n
    \  to complete the chain of trust.  Depending on the desires of the\n   Parent,
    the Child might send their DNSKEY record, a DS record, or\n   both.\n   Each time
    the Child changes the key that is represented in the\n   Parent, the updated and/or
    deleted key information has to be\n   communicated to the Parent and published
    in the Parent's zone.  How\n   this information is sent to the Parent depends
    on the relationship\n   the Child has with the Parent.  In many cases this is
    a manual\n   process -- and not an easy one.  For each key change, there may be
    up\n   to two interactions with the Parent.  Any manual process is\n   susceptible
    to mistakes and/or errors.  In addition, due to the\n   annoyance factor of the
    process, Operators may avoid changing keys or\n   skip needed steps to publish
    the new DS at the Parent.\n   DNSSEC provides data integrity to information published
    in DNS; thus,\n   DNS publication can be used to automate maintenance of delegation\n
    \  information.  This document describes a method to automate\n   publication
    of subsequent DS records after the initial one has been\n   published.\n   Readers
    are expected to be familiar with DNSSEC, including [RFC4033],\n   [RFC4034], [RFC4035],
    [RFC5011], and [RFC6781].\n   This document outlines a technique in which the
    Parent periodically\n   (or upon request) polls its signed Children and automatically\n
    \  publishes new DS records.  To a large extent, the procedures this\n   document
    follows are as described in [RFC6781], Section 4.1.2.\n   This technique is designed
    to be friendly both to fully automated\n   tools and humans.  Fully automated
    tools can perform all the actions\n   needed without human intervention and thus
    can monitor when it is\n   safe to move to the next step.\n   The solution described
    in this document only allows transferring\n   information about DNSSEC keys (DS
    and DNSKEY) from the Child to the\n   Parental Agent.  It lists exactly what the
    Parent should publish and\n   allows for publication of standby keys.  A different
    protocol,\n   [CPSYNC-DNS], can be used to maintain other important delegation\n
    \  information, such as NS and glue records.  These two protocols have\n   been
    kept as separate solutions because the problems are\n   fundamentally different
    and a combined solution is overly complex.\n   This document describes a method
    for automating maintenance of the\n   delegation trust information and proposes
    a polled/periodic trigger\n   for simplicity.  Some users may prefer a different
    trigger, for\n   example, a button on a web page, a REST interface, or a DNS NOTIFY.\n
    \  These alternate additional triggers are not discussed in this\n   document.\n
    \  This proposal does not include all operations needed for the\n   maintenance
    of DNSSEC key material, specifically the initial\n   introduction or complete
    removal of all keys.  Because of this,\n   alternate communications mechanisms
    must always exist, potentially\n   introducing more complexity.\n"
  - contents:
    - "1.1.  Terminology\n   The terminology we use is defined in this section.  The
      highlighted\n   roles are as follows:\n   o  Child: The entity on record that
      has the delegation of the domain\n      from the Parent.\n   o  Parent: The
      domain in which the Child is registered.\n   o  Child DNS Operator: The entity
      that maintains and publishes the\n      zone information for the Child DNS.\n
      \  o  Parental Agent: The entity that the Child has a relationship with\n      to
      change its delegation information.\n   o  Provisioning System: A system that
      the Operator of the master DNS\n      server operates to maintain the information
      published in the DNS.\n      This includes the systems that sign the DNS data.\n
      \  o  CDS/CDNSKEY: This notation refers to CDS and/or CDNSKEY, i.e., one\n      or
      both.\n"
    title: 1.1.  Terminology
  - contents:
    - "1.2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   [RFC2119].\n"
    title: 1.2.  Requirements Notation
  title: 1.  Introduction
- contents:
  - '2.  Background

    '
  - contents:
    - "2.1.  DNS Delegations\n   DNS operation consists of delegations of authority.
      \ For each\n   delegation, there are (most of the time) two parties: the Parent
      and\n   the Child.\n   The Parent publishes information about the delegations
      to the Child;\n   for the name servers, it publishes an NS [RFC1035] Resource
      Record\n   Set (RRset) that lists a hint for name servers that are authoritative\n
      \  for the Child.  The Child also publishes an NS RRset, and this set is\n   the
      authoritative list of name servers to the Child zone.\n   The second RRset the
      Parent sometimes publishes is the DS [RFC4034]\n   set.  The DS RRset provides
      information about the DNSKEY(s) that the\n   Child has told the Parent it will
      use to sign its DNSKEY RRset.  In\n   DNSSEC, a trust relationship between zones
      is provided by the\n   following chain:\n   Parent DNSKEY --> DS --> Child DNSKEY.\n
      \  A prior proposal [AUTO-CPSYNC] suggested that the Child send an\n   \"update\"
      to the Parent via a mechanism similar to DNS UPDATE.  The\n   main issue became:
      how does the Child find the actual Parental Agent/\n   server to send the update
      to?  While that could have been solved via\n   technical means, it failed to
      reach consensus.  There is also a\n   similar proposal in [PARENT-ZONES].\n
      \  As the DS record can only be present at the Parent [RFC4034], some\n   other
      method is needed to automate which DNSKEYs are picked to be\n   represented
      in the Parent zone's DS records.  One possibility is to\n   use flags in the
      DNSKEY record.  If the Secure Entry Point (SEP) bit\n   is set, this indicates
      that the DNSKEY is intended for use as a\n   secure entry point.  This DNSKEY
      signs the DNSKEY RRset, and the\n   Parental Agent can calculate DS records
      based on that.  But this\n   fails to meet some operating needs, including the
      Child having no\n   influence on what DS digest algorithms are used and DS records
      that\n   can only be published for keys that are in the DNSKEY RRset; thus,\n
      \  this technique would not be compatible with Double-DS rollover\n   [RFC6781].\n"
    title: 2.1.  DNS Delegations
  - contents:
    - "2.2.  Relationship between Parent and Child DNS Operators\n   In practical
      application, there are many different relationships\n   between the Parent and
      Child DNS Operators.  The type of relationship\n   affects how the Child DNS
      Operator communicates with the Parent.\n   This section will highlight some
      of the different situations but is\n   by no means a complete list.\n   Different
      communication paths:\n   o  Direct/API: The Child can change the delegation
      information via\n      automated/scripted means.  The Extensible Provisioning
      Protocol\n      (EPP) [RFC5730], used by many Top-Level Domains (TLDs), is an\n
      \     example of this.  Other examples are web-based programmatic\n      interfaces
      that Registrars make available to their Resellers.\n   o  User Interface: The
      Child uses a web site set up by the Parental\n      Agent for updating delegation
      information.\n   o  Indirect: The communication has to be transmitted via an
      out-of-\n      band mechanism between two parties, such as by email or telephone.\n
      \     This is common when the Child DNS Operator is neither the Child\n      itself
      nor the Registrar for the domain, but a third party.\n   o  Multi-step Combinations:
      The information flows through an\n      intermediary.  It is possible, but unlikely,
      that all the steps\n      are automated via APIs and there are no humans involved.\n
      \  A domain name holder (Child) may operate its own DNS servers or\n   outsource
      the operation.  While we use the word \"Parent\" as singular,\n   a Parent can
      consist of a single entity or a composite of many\n   discrete parts that have
      rules and roles.  We refer to the entity\n   that the Child corresponds with
      as the Parent.\n   An organization (such as an enterprise) may delegate parts
      of its\n   name-space to be operated by a group that is not the same as that\n
      \  which operates the organization's DNS servers.  In some of these\n   cases,
      the flow of information is handled either in an ad hoc manner\n   or via some
      corporate mechanism; this can range from email to a fully\n   automated operation.\n"
    - contents:
      - "2.2.1.  Solution Space\n   This document is aimed at the cases in which there
        is a separation\n   between the Child and Parent.\n   A further complication
        is when the Child DNS Operator is not the\n   Child.  There are two common
        cases of this:\n   a)  The Parental Agent (e.g., Registrar) handles the DNS
        operation.\n   b)  A third party takes care of the DNS operation.\n   If the
        Parental Agent is the DNS Operator, life is much easier; the\n   Parental
        Agent can inject any delegation changes directly into the\n   Parent's provisioning
        system.  The techniques described below are not\n   needed in the case when
        the Parental Agent is the DNS Operator.\n   In the case of a third-party DNS
        Operator, the Child either needs to\n   relay changes in DNS delegation or
        give the Child DNS Operator access\n   to its delegation/registration account.\n
        \  Some Parents want the Child to express their DNSKEYs in the form of\n   DS
        records, while others want to receive the DNSKEY records and\n   calculate
        the DS records themselves.  There is no consensus on which\n   method is better;
        both have good reasons to exist.  This solution is\n   DS vs. DNSKEY agnostic
        and allows operation with either.\n"
      title: 2.2.1.  Solution Space
    - contents:
      - "2.2.2.  DNSSEC Key Change Process\n   After a Child DNS Operator first signs
        the zone, there is a need to\n   interact with the Parent, for example, via
        a delegation account\n   interface to upload or paste in the zone's DS information.
        \ This\n   action of logging in through the delegation account user interface\n
        \  authenticates that the user is authorized to change delegation\n   information
        for the Child published in the Parent zone.  In the case\n   where the Child
        DNS Operator does not have access to the registration\n   account, the Child
        needs to perform the action.\n   At a later date, the Child DNS Operator may
        want to publish a new DS\n   record in the Parent, either because they are
        changing keys or\n   because they want to publish a standby key.  This involves
        performing\n   the same process as before.  Furthermore, when this is a manual\n
        \  process with cut and paste, operational mistakes will happen -- or\n   worse,
        the update action will not be performed at all.\n   The Child DNS Operator
        may also introduce new keys and can do so when\n   old keys exist and can
        be used.  The Child may also remove old keys,\n   but this document does not
        support removing all keys.  This is to\n   avoid making signed zones unsigned.
        \ The Child may not enroll the\n   initial key or introduce a new key when
        there are no old keys that\n   can be used (without some additional out-of-band
        validation of the\n   keys) because there is no way to validate the information.\n"
      title: 2.2.2.  DNSSEC Key Change Process
    title: 2.2.  Relationship between Parent and Child DNS Operators
  title: 2.  Background
- contents:
  - "3.  CDS (Child DS) and CDNSKEY (Child DNSKEY) Record Definitions\n   This document
    specifies two new DNS resource records, CDS and\n   CDNSKEY.  These records are
    used to convey, from one zone to its\n   Parent, the desired contents of the zone's
    DS resource record set\n   residing in the Parent zone.\n   The CDS and CDNSKEY
    resource records are published in the Child zone\n   and give the Child control
    of what is published for it in the\n   parental zone.  The Child can publish these
    manually, or they can be\n   automatically maintained by DNS provisioning tools.
    \ The CDS/CDNSKEY\n   RRset expresses what the Child would like the DS RRset to
    look like\n   after the change; it is a \"replace\" operation, and it is up to
    the\n   software that consumes the records to translate that into the\n   appropriate
    add/delete operations in the provisioning systems (and in\n   the case of CDNSKEY,
    to generate the DS from the DNSKEY).  If neither\n   CDS nor CDNSKEY RRset is
    present in the Child, this means that no\n   change is needed.\n"
  - contents:
    - "3.1.  CDS Resource Record Format\n   The wire and presentation format of the
      Child DS (CDS) resource\n   record is identical to the DS record [RFC4034].
      \ IANA has allocated\n   RR code 59 for the CDS resource record via Expert Review\n
      \  [DNS-TRANSPORT].  The CDS RR uses the same registries as DS for its\n   fields.\n
      \  No special processing is performed by authoritative servers or by\n   resolvers,
      when serving or resolving.  For all practical purposes,\n   CDS is a regular
      RR type.\n"
    title: 3.1.  CDS Resource Record Format
  - contents:
    - "3.2.  CDNSKEY Resource Record Format\n   The wire and presentation format of
      the CDNSKEY (\"Child DNSKEY\")\n   resource record is identical to the DNSKEY
      record.  IANA has\n   allocated RR code 60 for the CDNSKEY resource record via
      Expert\n   Review.  The CDNSKEY RR uses the same registries as DNSKEY for its\n
      \  fields.\n   No special processing is performed by authoritative servers or
      by\n   resolvers, when serving or resolving.  For all practical purposes,\n
      \  CDNSKEY is a regular RR type.\n"
    title: 3.2.  CDNSKEY Resource Record Format
  title: 3.  CDS (Child DS) and CDNSKEY (Child DNSKEY) Record Definitions
- contents:
  - "4.  Automating DS Maintenance with CDS/CDNSKEY Records\n   CDS/CDNSKEY resource
    records are intended to be \"consumed\" by\n   delegation trust maintainers.  The
    use of CDS/CDNSKEY is OPTIONAL.\n   If the Child publishes either the CDS or the
    CDNSKEY resource record,\n   it SHOULD publish both.  If the Child knows which
    the Parent\n   consumes, it MAY choose to only publish that record type (for\n
    \  example, some Children wish the Parent to publish a DS, but they wish\n   to
    keep the DNSKEY \"hidden\" until needed).  If the Child publishes\n   both, the
    two RRsets MUST match in content.\n"
  - contents:
    - "4.1.  CDS and CDNSKEY Processing Rules\n   If there is neither CDS nor CDNSKEY
      RRset in the Child, this signals\n   that no change should be made to the current
      DS set.  This means\n   that, once the Child and Parent are in sync, the Child
      DNS Operator\n   MAY remove all CDS and CDNSKEY resource records from the zone.
      \ The\n   Child DNS Operator may choose to do this to decrease the size of the\n
      \  zone or to decrease the workload for the Parent (if the Parent\n   receives
      no CDS/CDNSKEY records, it can go back to sleep).  If it\n   does receive a
      CDS or CDNSKEY RRset, it needs to check them against\n   what is currently published
      (see Section 5).\n   The following acceptance rules are placed on the CDS and
      CDNSKEY\n   resource records as follows:\n   o  Location: MUST be at the Child
      zone apex.\n   o  Signer: MUST be signed with a key that is represented in both
      the\n      current DNSKEY and DS RRsets, unless the Parent uses the CDS or\n
      \     CDNSKEY RRset for initial enrollment; in that case, the Parent\n      validates
      the CDS/CDNSKEY through some other means (see\n      Section 6.1 and the Security
      Considerations).\n   o  Continuity: MUST NOT break the current delegation if
      applied to DS\n      RRset.\n   If any these conditions fail, the CDS or CDNSKEY
      resource record MUST\n   be ignored, and this error SHOULD be logged.\n"
    title: 4.1.  CDS and CDNSKEY Processing Rules
  title: 4.  Automating DS Maintenance with CDS/CDNSKEY Records
- contents:
  - "5.  CDS/CDNSKEY Publication\n   The Child DNS Operator publishes CDS/CDNSKEY
    RRset(s).  In order to\n   be valid, the CDS/CDNSKEY RRset(s) MUST be compliant
    with the rules\n   in Section 4.1.  When the Parent DS is in sync with the CDS/CDNSKEY\n
    \  RRset(s), the Child DNS Operator MAY delete the CDS/CDNSKEY RRset(s);\n   the
    Child can determine if this is the case by querying for DS\n   records in the
    Parent.\n"
  title: 5.  CDS/CDNSKEY Publication
- contents:
  - "6.  Parent-Side CDS/CDNSKEY Consumption\n   The CDS/CDNSKEY RRset(s) SHOULD be
    used by the Parental Agent to\n   update the DS RRset in the Parent zone.  The
    Parental Agent for this\n   uses a tool that understands the CDS/CDNSKEY signing
    rules in\n   Section 4.1, so it might not be able to use a standard validator.\n
    \  The Parent MUST choose to use either CDNSKEY or CDS resource records\n   as
    its default updating mechanism.  The Parent MAY only accept either\n   CDNSKEY
    or CDS, but it MAY also accept both so it can use the other\n   in the absence
    of the default updating mechanism; it MUST NOT expect\n   there to be both.\n"
  - contents:
    - "6.1.  Detecting a Changed CDS/CDNSKEY\n   How the Parental Agent gets the CDS/CDNSKEY
      RRset may differ.  Below\n   are two examples of how this can take place.\n
      \  Polling:  The Parental Agent operates a tool that periodically checks\n         each
      of the Children that has a DS record to see if there is a\n         CDS or CDNSKEY
      RRset.\n   Pushing:  The delegation user interface has a button {Fetch DS} that,\n
      \        when pushed, performs the CDS/CDNSKEY processing.  If the\n         Parent
      zone does not contain DS for this delegation, then the\n         \"push\" SHOULD
      be ignored.  If the Parental Agent displays the\n         contents of the CDS/CDNSKEY
      to the user and gets confirmation\n         that this represents their key,
      the Parental Agent MAY use this\n         for initial enrollment (when the Parent
      zone does not contain\n         the DS for this delegation).\n   In either case,
      the Parental Agent MAY apply additional rules that\n   defer the acceptance
      of a CDS/CDNSKEY change.  These rules may\n   include a condition that the CDS/CDNSKEY
      remains in place and valid\n   for some time period before it is accepted.  It
      may be appropriate in\n   the \"Pushing\" case to assume that the Child is ready
      and thus accept\n   changes without delay.\n"
    - contents:
      - "6.1.1.  CDS/CDNSKEY Polling\n   This is the only defined use of CDS/CDNSKEY
        resource records in this\n   document.  There are limits to the scalability
        of polling techniques;\n   thus, some other mechanism is likely to be specified
        later that\n   addresses CDS/CDNSKEY resource record usage in the situation
        where\n   polling runs into scaling issues.  Having said that, polling will\n
        \  work in many important cases such as enterprises, universities, and\n   smaller
        TLDs.  In many regulatory environments, the Registry is\n   prohibited from
        talking to the Registrant.  In most of these cases,\n   the Registrant has
        a business relationship with the Registrar, so the\n   Registrar can offer
        this as a service.\n   If the CDS/CDNSKEY RRset(s) do not exist, the Parental
        Agent MUST\n   take no action.  Specifically, it MUST NOT delete or alter
        the\n   existing DS RRset.\n"
      title: 6.1.1.  CDS/CDNSKEY Polling
    - contents:
      - "6.1.2.  Polling Triggers\n   It is assumed that other mechanisms will be
        implemented to trigger\n   the Parent to look for an updated CDS/CDNSKEY RRset.
        \ As the CDS/\n   CDNSKEY resource records are validated with DNSSEC, these
        mechanisms\n   can be unauthenticated.  As an example, a Child could telephone
        its\n   Parent and request that it process the new CDS or CDNSKEY resource\n
        \  records, or an unauthenticated POST could be made to a web server\n   (with
        rate-limiting).\n   Other documents can specify the trigger conditions.\n"
      title: 6.1.2.  Polling Triggers
    title: 6.1.  Detecting a Changed CDS/CDNSKEY
  - contents:
    - "6.2.  Using the New CDS/CDNSKEY Records\n   Regardless of how the Parental
      Agent detected changes to a CDS/\n   CDNSKEY RRset, the Parental Agent SHOULD
      use a DNSSEC validator to\n   obtain a validated CDS/CDNSKEY RRset from the
      Child zone.  A NOT\n   RECOMMENDED exception to this is if the Parent performs
      some\n   additional validation on the data to confirm that it is the \"correct\"\n
      \  key.\n   The Parental Agent MUST ensure that previous versions of the CDS/\n
      \  CDNSKEY RRset do not overwrite more recent versions.  This MAY be\n   accomplished
      by checking that the signature inception in the Resource\n   Record Signature
      (RRSIG) for CDS/CDNSKEY RRset is later and/or that\n   the serial number on
      the Child's Start of Authority (SOA) is greater.\n   This may require the Parental
      Agent to maintain some state\n   information.\n   The Parental Agent MAY take
      extra security measures.  For example, to\n   mitigate the possibility that
      a Child's Key Signing Key (KSK) has\n   been compromised, the Parental Agent
      may inform (by email or other\n   methods) the Child DNS Operator of the change.
      \ However, the precise\n   out-of-band measures that a Parent zone takes are
      outside the scope\n   of this document.\n   Once the Parental Agent has obtained
      a valid CDS/CDNSKEY RRset it\n   MUST check the publication rules from Section
      4.1.  In particular,\n   the Parental Agent MUST check the Continuity rule and
      do its best not\n   to invalidate the Child zone.  Once checked, if the information
      in\n   the CDS/CDNSKEY and DS differ, it may apply the changes to the Parent\n
      \  zone.  If the Parent consumes CDNSKEY, the Parent should calculate\n   the
      DS before doing this comparison.\n"
    - contents:
      - "6.2.1.  Parent Calculates DS\n   There are cases where the Parent wants to
        calculate the DS record due\n   to policy reasons.  In this case, the Child
        publishes CDNSKEY\n   records, and the Parent calculates the DS records on
        behalf of the\n   Children.\n   When a Parent operates in \"calculate DS\"
        mode, it can operate in one\n   of two sub-modes:\n   full:  The Parent only
        publishes DS records it calculates from DNSKEY\n      records.\n   augment:
        \ The Parent will make sure there are DS records for the\n      digest algorithm(s)
        it requires(s).\n   In the case where the Parent fetches the CDNSKEY RRset
        and calculates\n   the DS, the resulting DS can differ from the CDS published
        by the\n   Child.  It is expected that the differences are only due to the\n
        \  different set of digest algorithms used.\n"
      title: 6.2.1.  Parent Calculates DS
    title: 6.2.  Using the New CDS/CDNSKEY Records
  title: 6.  Parent-Side CDS/CDNSKEY Consumption
- contents:
  - "7.  IANA Considerations\n   IANA has assigned RR Type code 59 for the CDS resource
    record.  This\n   was done for a draft version whose content was later incorporated\n
    \  into this document [DNS-TRANSPORT].  This document is the reference\n   for
    CDS RRtype.\n   IANA has assigned an RR Type for the CDNSKEY as described below:\n
    \  Type:  CDNSKEY\n   Value:  60\n   Meaning:  DNSKEY(s) the Child wants reflected
    in DS\n   Reference:  This document\n"
  title: 7.  IANA Considerations
- contents:
  - "8.  Privacy Considerations\n   All of the information handled or transmitted
    by this protocol is\n   public information published in the DNS.\n"
  title: 8.  Privacy Considerations
- contents:
  - "9.  Security Considerations\n   This work is for the normal case; when things
    go wrong there is only\n   so much that automation can fix.\n   If the Child breaks
    DNSSEC validation by removing all the DNSKEYs\n   that are represented in the
    DS set, its only repair actions are to\n   contact the Parent or restore the DNSKEYs
    in the DS set.\n   In the event of a compromise of the server or system generating\n
    \  signatures for a zone, an attacker might be able to generate and\n   publish
    new CDS/CDNSKEY resource records.  The modified CDS/CDNSKEY\n   records will be
    picked up by this technique and may allow the\n   attacker to extend the effective
    time of his attack.  If there is a\n   delay in accepting changes to DS, as in
    [RFC5011], then the attacker\n   needs to hope his activity is not detected before
    the DS in the\n   Parent is changed.  If this type of change takes place, the
    Child\n   needs to contact the Parent (possibly via a Registrar web interface)\n
    \  and remove any compromised DS keys.\n   A compromise of the account with the
    Parent (e.g., Registrar) will\n   not be mitigated by this technique, as the \"new
    Registrant\" can\n   delete or modify the DS records at will.\n   While it may
    be tempting, the techniques specified in this document\n   SHOULD NOT be used
    for initial enrollment of keys since there is no\n   way to ensure that the initial
    key is the correct one.  If it is\n   used, strict rules for inclusion of keys
    -- such as hold-down times,\n   challenge data inclusion, or similar -- MUST be
    used along with some\n   kind of challenge mechanism.  A Child cannot use this
    mechanism to go\n   from signed to unsigned (publishing an empty CDS/CDNSKEY RRset
    means\n   no change should be made in the Parent).\n   The CDS RR type should
    allow for enhanced security by simplifying the\n   process.  Since key change
    is automated, updating a DS RRset by other\n   means may be regarded as unusual
    and subject to extra security\n   checks.\n   As this introduces a new mechanism
    to update information in the\n   Parent, it MUST be clear who is fetching the
    records and creating the\n   appropriate records in the Parent zone.  Specifically,
    some\n   operations may use mechanisms other than what is described here.  For\n
    \  example, a Registrar may assume that it is maintaining the DNSSEC key\n   information
    in the Registry and may have this cached.  If the\n   Registry is fetching the
    CDS/CDNSKEY RRset, then the Registry and\n   Registrar may have different views
    of the DNSSEC key material; the\n   result of such a situation is unclear.  Therefore,
    this mechanism\n   SHOULD NOT be used to bypass intermediaries that might cache\n
    \  information and, because of that, get the wrong state.\n   If there is a failure
    in applying changes in the Child zone to all\n   DNS servers listed in either
    Parent or Child NS set, it is possible\n   that the Parental Agent may get confused
    either because it gets\n   different answers on different checks or CDS RR validation
    fails.  In\n   the worst case, the Parental Agent performs an action reversing
    a\n   prior action after the Child signing system decides to take the next\n   step
    in the key change process, resulting in a broken delegation.\n   DNS is a loosely
    coherent distributed database with local caching;\n   therefore, it is important
    to allow old information to expire from\n   caches before deleting DS or DNSKEY
    records.  Similarly, it is\n   important to allow new records to propagate through
    the DNS before\n   use (see [RFC6781]).\n   It is common practice for users to
    outsource their DNS hosting to a\n   third-party DNS provider.  In order for that
    provider to be able to\n   maintain the DNSSEC information, some users give the
    provider their\n   Registrar login credentials (which obviously has negative security\n
    \  implications).  Deploying the solution described in this document\n   allows
    third-party DNS providers to maintain the DNSSEC information\n   without Registrants
    giving their Registrar credentials, thereby\n   improving security.\n   By automating
    the maintenance of the DNSSEC key information (and\n   removing humans from the
    process), we expect to decrease the number\n   of DNSSEC related outages, which
    should increase DNSSEC deployment.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  Acknowledgements\n   We would like to thank a large number of folk, including
    Mark\n   Andrews, Joe Abley, Jaap Akkerhuis, Roy Arends, Doug Barton, Brian\n
    \  Dickson, Paul Ebersman, Tony Finch, Jim Galvin, Paul Hoffman, Samir\n   Hussain,
    Tatuya Jinmei, Olaf Kolkman, Stephan Lagerholm, Cricket Liu,\n   Matt Larson,
    Marco Sanz, Antoin Verschuren, Suzanne Woolf, Paul\n   Wouters, John Dickinson,
    Timothe Litt, and Edward Lewis.\n   Special thanks to Wes Hardaker for contributing
    significant text and\n   creating the complementary (CSYNC) solution, and to Patrik
    Faltstrom,\n   Paul Hoffman, Matthijs Mekking, Mukund Sivaraman, and Jeremy C.
    Reed\n   for text and in-depth review.  Brian Carpenter provided a good\n   Gen-ART
    review.\n   There were a number of other folk with whom we discussed this\n   document;
    apologies for not remembering everyone.\n"
  title: 10.  Acknowledgements
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [RFC1035]  Mockapetris, P., \"Domain names
      - implementation and\n              specification\", STD 13, RFC 1035, November
      1987.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n
      \             Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC4033]
      \ Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,
      \"DNS Security Introduction and Requirements\", RFC\n              4033, March
      2005.\n   [RFC4034]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n
      \             Rose, \"Resource Records for the DNS Security Extensions\",\n
      \             RFC 4034, March 2005.\n   [RFC4035]  Arends, R., Austein, R.,
      Larson, M., Massey, D., and S.\n              Rose, \"Protocol Modifications
      for the DNS Security\n              Extensions\", RFC 4035, March 2005.\n   [RFC5011]
      \ StJohns, M., \"Automated Updates of DNS Security (DNSSEC)\n              Trust
      Anchors\", STD 74, RFC 5011, September 2007.\n   [RFC6781]  Kolkman, O., Mekking,
      W., and R. Gieben, \"DNSSEC\n              Operational Practices, Version 2\",
      RFC 6781, December\n              2012.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [AUTO-CPSYNC]\n              Mekking, W.,
      \"Automated (DNSSEC) Child Parent\n              Synchronization using DNS UPDATE\",
      Work in Progress,\n              December 2010.\n   [CPSYNC-DNS]\n              Hardaker,
      W., \"Child To Parent Synchronization in DNS\",\n              Work in Progress,
      July 2014.\n   [DNS-TRANSPORT]\n              Barwood, G., \"DNS Transport\",
      Work in Progress, June 2011.\n   [PARENT-ZONES]\n              Andrews, M.,
      \"Updating Parent Zones\", Work in Progress,\n              November 2013.\n
      \  [RFC5730]  Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\",\n
      \             STD 69, RFC 5730, August 2009.\n   [RFC5910]  Gould, J. and S.
      Hollenbeck, \"Domain Name System (DNS)\n              Security Extensions Mapping
      for the Extensible\n              Provisioning Protocol (EPP)\", RFC 5910, May
      2010.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Appendix A.  RRR Background\n   RRR is our shorthand for the Registry/Registrar/Registrant
    model of\n   Parent-Child relationships.\n   In the RRR world, the different parties
    are frequently from different\n   organizations.  In the single enterprise world,
    there are also\n   organizational, geographical, and cultural separations that
    affect\n   how information flows from a Child to the Parent.\n   Due to the complexity
    of the different roles and interconnections,\n   automation of delegation information
    has not yet occurred.  There\n   have been proposals to automate this, in order
    to improve the\n   reliability of the DNS.  These proposals have not gained enough\n
    \  traction to become standards.\n   For example, in many of the TLD cases, there
    is the RRR model\n   (Registry/Registrar/Registrant).  The Registry operates DNS
    for the\n   TLD, and the Registrars accept registrations and place information\n
    \  into the Registry's database.  The Registrant only communicates with\n   the
    Registrar; frequently, the Registry is not allowed to communicate\n   with the
    Registrant.  In that case, as far as the Registrant is\n   concerned, the Registrar
    is the same entity as the Parent.\n   In many RRR cases, the Registrar and Registry
    communicate via EPP\n   [RFC5730] and use the EPP DNSSEC extension [RFC5910].
    \ In a number of\n   Country Code TLDs (ccTLDs), there are other mechanisms in
    use as well\n   as EPP, but in general, there seems to be a movement towards EPP\n
    \  usage when DNSSEC is enabled in the TLD.\n"
  title: Appendix A.  RRR Background
- contents:
  - "Appendix B.  CDS Key Rollover Example\n   This section shows an example on how
    CDS is used when performing a\n   KSK rollover.  This example will demonstrate
    the Double-DS rollover\n   method from Section 4.1.2 of [RFC6781].  Other rollovers
    using\n   CDNSKEY and double KSK are left as an exercise to the reader.  The\n
    \  table below does not reflect the Zone Signing Keys (ZSKs) as they do\n   not
    matter during KSK rollovers.  The wait steps highlight what RRset\n   needs to
    expire from caches before progressing to the next step.\n   +------+---------------+---------+---------+--------------+---------+\n
    \  | Step | State         |  Parent |  Child  |  DNSKEY and  |  Child  |\n   |
    \     |               |    DS   |   KSK   |  CDS signer  |   CDS   |\n   +------+---------------+---------+---------+--------------+---------+\n
    \  |      | Beginning     |    A    |    A    |      A       |         |\n   |
    1    | Add CDS       |    A    |    A    |      A       |    AB   |\n   | Wait
    | for DS change |    A    |    A    |      A       |    AB   |\n   | 2    | Updated
    DS    |    AB   |    A    |      A       |    AB   |\n   | Wait | > DS TTL      |
    \   AB   |    A    |      A       |    AB   |\n   | 3    | Actual        |    AB
    \  |    B    |      B       |    AB   |\n   |      | Rollover      |         |
    \        |              |         |\n   | Wait | > DNSKEY TTL  |    AB   |    B
    \   |      B       |    AB   |\n   | 4    | Child Cleanup |    AB   |    B    |
    \     B       |    B    |\n   | 5    | Parent cleans |    B    |    B    |      B
    \      |    B    |\n   | 6    | Optional CDS  |    B    |    B    |      B       |
    \        |\n   |      | delete        |         |         |              |         |\n
    \  +------+---------------+---------+---------+--------------+---------+\n                              Table
    1: States\n"
  title: Appendix B.  CDS Key Rollover Example
- contents:
  - "Authors' Addresses\n   Warren Kumari\n   Google\n   1600 Amphitheatre Parkway\n
    \  Mountain View, CA  94043\n   US\n   EMail: warren@kumari.net\n   Olafur Gudmundsson\n
    \  OGUD Consulting\n   3821 Village Park Dr.\n   Chevy Chase, MD  20815\n   US\n
    \  EMail: ogud@ogud.com\n   George Barwood\n   33 Sandpiper Close\n   Gloucester
    \ GL2 4LZ\n   United Kingdom\n   EMail: george.barwood@blueyonder.co.uk\n"
  title: Authors' Addresses
