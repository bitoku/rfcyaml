- contents:
  - ' Entropy Label for Source Packet Routing in Networking (SPRING) Tunnels

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Segment Routing (SR) leverages the source-routing paradigm.  A node\n
    \  steers a packet through an ordered list of instructions, called\n   segments.
    \ Segment Routing can be applied to the Multiprotocol Label\n   Switching (MPLS)
    data plane.  Entropy labels (ELs) are used in MPLS\n   to improve load-balancing.
    \ This document examines and describes how\n   ELs are to be applied to Segment
    Routing MPLS.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8662.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Requirements Language\n   2.
    \ Abbreviations and Terminology\n   3.  Use Case Requiring Multipath Load-Balancing\n
    \  4.  Entropy Readable Label Depth\n   5.  Maximum SID Depth\n   6.  LSP Stitching
    Using the Binding SID\n   7.  Insertion of Entropy Labels for SPRING Path\n     7.1.
    \ Overview\n       7.1.1.  Example 1: The Ingress Node Has a Sufficient MSD\n
    \      7.1.2.  Example 2: The Ingress Node Does Not Have a Sufficient\n               MSD\n
    \    7.2.  Considerations for the Placement of Entropy Labels\n       7.2.1.  ERLD
    Value\n       7.2.2.  Segment Type\n       7.2.3.  Maximizing Number of LSRs That
    Will Load-Balance\n       7.2.4.  Preference for a Part of the Path\n       7.2.5.
    \ Combining Criteria\n   8.  A Simple Example Algorithm\n   9.  Deployment Considerations\n
    \  10. Options Considered\n     10.1.  Single EL at the Bottom of the Stack\n
    \    10.2.  An EL per Segment in the Stack\n     10.3.  A Reusable EL for a Stack
    of Tunnels\n     10.4.  EL at Top of Stack\n     10.5.  ELs at Readable Label
    Stack Depths\n   11. IANA Considerations\n   12. Security Considerations\n   13.
    References\n     13.1.  Normative References\n     13.2.  Informative References\n
    \  Acknowledgements\n   Contributors\n   Authors' Addresses\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Segment Routing [RFC8402] is based on source-routed tunnels
    to steer\n   a packet along a particular path.  This path is encoded as an ordered\n
    \  list of segments.  When applied to the MPLS data plane [RFC8660],\n   each
    segment is an LSP (Label Switched Path) with an associated MPLS\n   label value.
    \ Hence, label stacking is used to represent the ordered\n   list of segments,
    and the label stack associated with an SR tunnel\n   can be seen as nested LSPs
    (LSP hierarchy) in the MPLS architecture.\n   Using label stacking to encode the
    list of segments has implications\n   on the label stack depth.\n   Traffic load-balancing
    over ECMP (Equal-Cost Multipath) or LAGs (Link\n   Aggregation Groups) is usually
    based on a hashing function.  The\n   local node that performs the load-balancing
    is required to read some\n   header fields in the incoming packets and then compute
    a hash based\n   on those fields.  The result of the hash is finally mapped to
    a list\n   of outgoing next hops.  The hashing technique is required to perform\n
    \  a per-flow load-balancing and thus, prevents packet misordering.  For\n   IP
    traffic, the usual fields that are hashed are the source address,\n   the destination
    address, the protocol type, and, if provided by the\n   upper layer, the source
    port and destination port.\n   The MPLS architecture brings some challenges when
    an LSR (Label\n   Switching Router) tries to look up at header fields.  An LSR
    needs be\n   able to look up at header fields that are beyond the MPLS label stack\n
    \  while the MPLS header does not provide any information about the\n   upper-layer
    protocol.  An LSR must perform a deeper inspection\n   compared to an ingress
    router, which could be challenging for some\n   hardware.  Entropy labels (ELs)
    [RFC6790] are used in the MPLS data\n   plane to provide entropy for load-balancing.
    \ The idea behind the\n   entropy label is that the ingress router computes a
    hash based on\n   several fields from a given packet and places the result in
    an\n   additional label named \"entropy label\".  Then, this entropy label can\n
    \  be used as part of the hash keys used by an LSR.  Using the entropy\n   label
    as part of the hash keys reduces the need for deep packet\n   inspection in the
    LSR while keeping a good level of entropy in the\n   load-balancing.  When the
    entropy label is used, the keys used in the\n   hashing functions are still a
    local configuration matter, and an LSR\n   may use solely the entropy label or
    a combination of multiple fields\n   from the incoming packet.\n   When using
    LSP hierarchies, there are implications on how [RFC6790]\n   should be applied.
    \ The current document addresses the case where a\n   hierarchy is created at
    a single LSR as required by Segment Routing.\n   A use case requiring load-balancing
    with SR is given in Section 3.  A\n   recommended solution is described in Section
    7 keeping in\n   consideration the limitations of implementations when applying\n
    \  [RFC6790] to deeper label stacks.  Options that were considered to\n   arrive
    at the recommended solution are documented for historical\n   purposes in Section
    10.\n"
  - contents:
    - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
      in all\n   capitals, as shown here.\n"
    title: 1.1.  Requirements Language
  title: 1.  Introduction
- contents:
  - "2.  Abbreviations and Terminology\n   Adj-SID   Adjacency Segment Identifier\n
    \  ECMP      Equal-Cost Multipath\n   EL        Entropy Label\n   ELI       Entropy
    Label Indicator\n   ELC       Entropy Label Capability\n   ERLD      Entropy Readable
    Label Depth\n   FEC       Forwarding Equivalence Class\n   LAG       Link Aggregation
    Group\n   LSP       Label Switched Path\n   LSR       Label Switching Router\n
    \  MPLS      Multiprotocol Label Switching\n   MSD       Maximum SID Depth\n   Node
    SID  Node Segment Identifier\n   OAM       Operations, Administration, and Maintenance\n
    \  RLD       Readable Label Depth\n   SID       Segment Identifier\n   SPT       Shortest
    Path Tree\n   SR        Segment Routing\n   SRGB      Segment Routing Global Block\n
    \  VPN       Virtual Private Network\n"
  title: 2.  Abbreviations and Terminology
- contents:
  - "3.  Use Case Requiring Multipath Load-Balancing\n   Traffic engineering is one
    of the applications of MPLS and is also a\n   requirement for Segment Routing
    [RFC7855].  Consider the topology\n   shown in Figure 1.  The LSR S requires data
    to be sent to LSR D along\n   a traffic-engineered path that goes over the link
    L1.  Good load-\n   balancing is also required across equal-cost paths (including\n
    \  parallel links).  To steer traffic along a path that crosses link L1,\n   the
    label stack that LSR S creates consists of a label to the Node\n   SID of LSR
    P3 stacked over the label for the Adj-SID (Adjacency\n   Segment Identifier) of
    link L1 and that in turn is stacked over the\n   label to the Node SID of LSR
    D.  For simplicity, lets assume that all\n   LSRs use the same label space for
    Segment Routing (as a reminder, it\n   is called the SRGB, Segment Routing Global
    Block).  Let L_N-Px denote\n   the label to be used to reach the Node SID of LSR
    Px.  Let L_A-Ln\n   denote the label used for the Adj-SID for link Ln.  In our
    example,\n   the LSR S must use the label stack <L_N-P3, L_A-L1, L_N-D>.  However,\n
    \  to achieve good load-balancing over the equal-cost paths P2-P4-D,\n   P2-P5-D,
    and the parallel links L3 and L4, a mechanism such as\n   entropy labels [RFC6790]
    should be adapted for Segment Routing.\n   Indeed, the Source Packet Routing in
    Networking (SPRING) architecture\n   with the MPLS data plane [RFC8660] uses nested
    MPLS LSPs composing\n   the source-routed label stack.\n                 +-------|
    \ P3  |-----+\n               L3| |L4   +------+ L1| |L2     +----+\n   |  S  |-----|
    P1  |------------| P2  |--+          +--|  D  |\n       Key:\n           S = Source
    LSR\n           D = Destination LSR\n           P1, P2, P3, P4, P5 = Transit LSRs\n
    \          L1, L2, L3, L4 = Links\n                   Figure 1: Traffic-Engineering
    Use Case\n   An MPLS node may have limitations in the number of labels it can\n
    \  push.  It may also have a limitation in the number of labels it can\n   inspect
    when looking for hash keys during load-balancing.  While the\n   entropy label
    is normally inserted at the bottom of the transport\n   tunnel, this may prevent
    an LSR from taking into account the EL in\n   its load-balancing function if the
    EL is too deep in the stack.  In a\n   Segment Routing environment, it is important
    to define the\n   considerations that need to be taken into account when inserting
    an\n   EL.  Multiple ways to apply entropy labels were considered and are\n   documented
    in Section 10 along with their trade-offs.  A recommended\n   solution is described
    in Section 7.\n"
  title: 3.  Use Case Requiring Multipath Load-Balancing
- contents:
  - "4.  Entropy Readable Label Depth\n   The Entropy Readable Label Depth (ERLD)
    is defined as the number of\n   labels a router can both:\n   a.  Read in an MPLS
    packet received on its incoming interface(s)\n       (starting from the top of
    the stack).\n   b.  Use in its load-balancing function.\n   The ERLD means that
    the router will perform load-balancing using the\n   EL if the EL is placed within
    the first ERLD labels.\n   A router capable of reading N labels but not using
    an EL located\n   within those N labels MUST consider its ERLD to be 0.\n   In
    a distributed switching architecture, each line card may have a\n   different
    capability in terms of ERLD.  For simplicity, an\n   implementation MAY use the
    minimum ERLD of all line cards as the ERLD\n   value for the system.\n   There
    may also be a case where a router has a fast switching path\n   (handled by an
    Application-Specific Integrated Circuit, or ASIC, or\n   network processor) and
    a slow switching path (handled by a CPU) with\n   a different ERLD for each switching
    path.  Again, for simplicity's\n   sake, an implementation MAY use the minimum
    ERLD as the ERLD value\n   for the system.\n   The drawback of using a single
    ERLD for a system lower than the\n   capability of one or more specific components
    is that it may increase\n   the number of ELI/ELs inserted.  This leads to an
    increase of the\n   label stack size and may have an impact on the capability
    of the\n   ingress node to push this label stack.\n   Examples:\n                             |
    Payload  | |    EL    | |    ELI   |\n                | Payload  | |   EL     |
    |    ELI   | | Label 50 |\n   |  Payload | |     EL   | |   ELI    | | Label 40
    | | Label 40 |\n   |     EL   | |    ELI   | | Label 30 | | Label 30 | | Label
    30 |\n   |    ELI   | | Label 20 | | Label 20 | | Label 20 | | Label 20 |\n   |
    Label 16 | | Label 16 | | Label 16 | | Label 16 | | Label 16 | P1\n     Packet
    1     Packet 2     Packet 3     Packet 4     Packet 5\n                     Figure
    2: Label Stacks with ELI/EL\n   In Figure 2, we consider the displayed packets
    received on a router\n   interface.  We consider also a single ERLD value for
    the router.\n   *  If the router has an ERLD of 3, it will be able to load-balance\n
    \     Packet 1 displayed in Figure 2 using the EL as part of the load-\n      balancing
    keys.  The ERLD value of 3 means that the router can\n      read and take into
    account the entropy label for load-balancing if\n      it is placed between position
    1 (top of the MPLS label stack) and\n      position 3.\n   *  If the router has
    an ERLD of 5, it will be able to load-balance\n      Packets 1 to 3 in Figure
    2 using the EL as part of the load-\n      balancing keys.  Packets 4 and 5 have
    the EL placed at a position\n      greater than 5, so the router is not able to
    read it and use it as\n      part of the load-balancing keys.\n   *  If the router
    has an ERLD of 10, it will be able to load-balance\n      all the packets displayed
    in Figure 2 using the EL as part of the\n      load-balancing keys.\n   To allow
    an efficient load-balancing based on entropy labels, a\n   router running SPRING
    SHOULD advertise its ERLD (or ERLDs), so all\n   the other SPRING routers in the
    network are aware of its capability.\n   How this advertisement is done is outside
    the scope of this document\n   (see Section 7.2.1 for potential approaches).\n
    \  To advertise an ERLD value, a SPRING router:\n   *  MUST be entropy label capable
    and, as a consequence, MUST apply\n      the data-plane procedures defined in
    [RFC6790].\n   *  MUST be able to read an ELI/EL, which is located within its
    ERLD\n      value.\n   *  MUST take into account an EL within the first ERLD labels
    in its\n      load-balancing function.\n"
  title: 4.  Entropy Readable Label Depth
- contents:
  - "5.  Maximum SID Depth\n   The Maximum SID Depth defines the maximum number of
    labels that a\n   particular node can impose on a packet.  This can include any
    kind of\n   labels (service, entropy, transport, etc.).  In an MPLS network, the\n
    \  MSD is a limit of the head-end of an SR tunnel or a Binding SID\n   anchor
    node that performs imposition of additional labels on an\n   existing label stack.\n
    \  Depending on the number of MPLS operations (POP, SWAP, etc.) to be\n   performed
    before the PUSH, the MSD can vary due to hardware or\n   software limitations.
    \ As for the ERLD, different MSD limits can\n   exist within a single node based
    on the line-card types used in a\n   distributed switching system.  Thus, the
    MSD is a per link and/or\n   per-node property.\n   An external controller can
    be used to program a label stack on a\n   particular node.  This node SHOULD advertise
    its MSD to the\n   controller in order to let the controller know the maximum
    label\n   stack depth of the path computed that is supported on the head-end.\n
    \  How this advertisement is done is outside the scope of this document.\n   ([RFC8476],
    [RFC8491], and [MSD-BGP] provide examples of\n   advertisement of the MSD.)  As
    the controller does not have the\n   knowledge of the entire label stack to be
    pushed by the node, in\n   addition to the MSD value, the node SHOULD advertise
    the type of the\n   MSD.  For instance, the MSD value can represent the limit
    for pushing\n   transport labels only while in reality the node can push an\n
    \  additional service label.  As another example, the MSD value can\n   represent
    the full limit of the node including all label types\n   (transport, service,
    entropy, etc.).  This gives the ability for the\n   controller to program a label
    stack while leaving room for the local\n   node to add more labels (e.g., service,
    entropy, etc.) without\n   reaching the hardware/software limit.  If the node
    does not provide\n   the meaning of the MSD value, the controller could program
    an LSP\n   using a number of labels equal to the full limit of the node.  When\n
    \  receiving this label stack from the controller, the ingress node may\n   not
    be able to add any service (L2VPN, L3VPN, EVPN, etc.) label on\n   top of this
    label stack.  The consequence could be for the ingress\n   node to drop service
    packets that should have been forwarded over the\n   LSP.\n                 P7
    ---- P8 ---- P9\n       PE1 --- P1 --- P2 --- P3 --- P4 --- P5 --- P6 --- PE2\n
    \  IP Pkt                                  |    \\          |\n           Figure
    3: Topology Illustrating Label Stack Reduction\n   In Figure 3, an IP packet comes
    into the MPLS network at PE1.  All\n   metrics are considered equal to 1 except
    P12-P13, which is 10000, and\n   P11-P12, which is 100.  PE1 wants to steer the
    traffic using a SPRING\n   path to PE2 along PE1 -> P1 -> P7 -> P8 -> P9 -> P4
    -> P5 -> P10 ->\n   P11 -> P12 -> P13 -> PE2.  By using Adj-SIDs only, PE1 (acting
    as an\n   ingress LSR, also known as an I-LSR) will be required to push 10\n   labels
    on the IP packet received and thus, requires an MSD of 10.  If\n   the IP packet
    should be carried over an MPLS service like a regular\n   layer 3 VPN, an additional
    service label should be imposed requiring\n   an MSD of 11 for PE1.  In addition,
    if PE1 wants to insert an ELI/EL\n   for load-balancing purposes, PE1 will need
    to push 13 labels on the\n   IP packet requiring an MSD of 13.\n   In the SPRING
    architecture, Node SIDs or Binding SIDs can be used to\n   reduce the label stack
    size.  As an example, to steer the traffic on\n   the same path as before, PE1
    could use the following label stack:\n   <Node_P9, Node_P5, Binding_P5, Node_PE2>.
    \ In this example, we\n   consider a combination of Node SIDs and a Binding SID
    advertised by\n   P5 that will stitch the traffic along the path P10 -> P11 ->
    P12 ->\n   P13.  The instruction associated with the Binding SID at P5 is thus\n
    \  to swap Binding_P5 to Adj_P12-P13 and then push <Adj_P11-P12,\n   Node_P11>.
    \ P5 acts as a stitching node that pushes additional labels\n   on an existing
    label stack; P5's MSD needs also to be taken into\n   account and may limit the
    number of labels that can be imposed.\n"
  title: 5.  Maximum SID Depth
- contents:
  - "6.  LSP Stitching Using the Binding SID\n   The Binding SID allows binding a
    segment identifier to an existing\n   LSP.  As examples, the Binding SID can represent
    an RSVP-TE tunnel,\n   an LDP path (through the Mapping Server Advertisement),
    or a SPRING\n   path.  Each tail-end router of an MPLS LSP associated with a Binding\n
    \  SID has its own entropy label capability.  The entropy label\n   capability
    of the associated LSP is advertised in the control-plane\n   protocol used to
    signal the LSP.\n   In Figure 4, we consider that:\n   *  P6, PE2, P10, P11, P12,
    and P13 are pure LDP routers.\n   *  PE1, P1, P2, P3, P4, P7, P8, and P9 are pure
    SPRING routers.\n   *  P5 is running SPRING and LDP.\n   *  P5 acts as a Mapping
    Server and advertises Prefix-SIDs for the LDP\n      FECs: an index value of 20
    is used for PE2.\n   *  All SPRING routers use an SRGB of [1000, 1999].\n   *
    \ P6 advertises label 20 for the PE2 FEC.\n   *  Traffic from PE1 to PE2 uses
    the shortest path.\n           PE1 ----- P1 -- P2 -- P3 -- P4 ---- P5 --- P6 ---
    PE2\n     IP Pkt   | IP |                   | IP |   | IP |  | IP |\n              |1020|
    \                  |1020|   | 20 |\n          Figure 4: Example Illustrating Need
    for ELC Propagation\n   In terms of packet forwarding, by learning the Mapping
    Server\n   Advertisement from P5, PE1 imposes a label 1020 to an IP packet\n   destined
    to PE2.  SPRING routers along the shortest path to PE2 will\n   switch the traffic
    until it reaches P5.  P5 will perform the LSP\n   stitching by swapping the SPRING
    label 1020 to the LDP label 20\n   advertised by the next hop P6.  P6 will finally
    forward the packet\n   using the LDP label towards PE2.\n   PE1 cannot push an
    ELI/EL for the Binding SID without knowing that\n   the tail end of the LSP associated
    with the binding (PE2) is entropy\n   label capable.\n   To accommodate the mix
    of signaling protocols involved during the\n   stitching, the entropy label capability
    SHOULD be propagated between\n   the signaling domains.  Each Binding SID SHOULD
    have its own entropy\n   label capability that MUST be inherited from the entropy
    label\n   capability of the associated LSP.  If the router advertising the\n   Binding
    SID does not know the ELC state of the target FEC, it MUST\n   NOT set the ELC
    for the Binding SID.  An ingress node MUST NOT push\n   an ELI/EL associated with
    a Binding SID unless this Binding SID has\n   the entropy label capability.  How
    the entropy label capability is\n   advertised for a Binding SID is outside the
    scope of this document\n   (see Section 7.2.1 for potential approaches).\n   In
    our example, if PE2 is LDP entropy label capable, it will add the\n   entropy
    label capability in its LDP advertisement.  When P5 receives\n   the FEC/label
    binding for PE2, it learns about the ELC and can set\n   the ELC in the Mapping
    Server Advertisement.  Thus, PE1 learns about\n   the ELC of PE2 and may push
    an ELI/EL associated with the Binding\n   SID.\n   The proposed solution only
    works if the SPRING router advertising the\n   Binding SID is also performing
    the data-plane LSP stitching.  In our\n   example, if the Mapping Server function
    is hosted on P8 instead of\n   P5, P8 does not know about the ELC state of PE2's
    LDP FEC.  As a\n   consequence, it does not set the ELC for the associated Binding
    SID.\n"
  title: 6.  LSP Stitching Using the Binding SID
- contents:
  - '7.  Insertion of Entropy Labels for SPRING Path

    '
  - contents:
    - "7.1.  Overview\n   The solution described in this section follows the data-plane\n
      \  processing defined in [RFC6790].  Within a SPRING path, a node may be\n   ingress,
      egress, transit (regarding the entropy label processing\n   described in [RFC6790]),
      or it can be any combination of those.  For\n   example:\n   *  The ingress
      node of a SPRING domain can be an ingress node from an\n      entropy label
      perspective.\n   *  Any LSR terminating a segment of the SPRING path is an egress
      node\n      (because it terminates the segment) but can also be a transit node\n
      \     if the SPRING path is not terminated because there is a subsequent\n      SPRING
      MPLS label in the stack.\n   *  Any LSR processing a Binding SID may be a transit
      node and an\n      ingress node (because it may push additional labels when\n
      \     processing the Binding SID).\n   As described earlier, an LSR may have
      a limitation (the ERLD) on the\n   depth of the label stack that it can read
      and process in order to do\n   multipath load-balancing based on entropy labels.\n
      \  If an EL does not occur within the ERLD of an LSR in the label stack\n   of
      an MPLS packet that it receives, then it would lead to poor load-\n   balancing
      at that LSR.  Hence, an ELI/EL pair must be within the ERLD\n   of the LSR in
      order for the LSR to use the EL during load-balancing.\n   Adding a single ELI/EL
      pair for the entire SPRING path can also lead\n   to poor load-balancing as
      well because the ELI/EL may not occur\n   within the ERLD of some LSR on the
      path (if too deep) or may not be\n   present in the stack when it reaches some
      LSRs (if it is too\n   shallow).\n   In order for the EL to occur within the
      ERLD of LSRs along the path\n   corresponding to a SPRING label stack, multiple
      <ELI, EL> pairs MAY\n   be inserted in this label stack.\n   The insertion of
      an ELI/EL MUST occur only with a SPRING label\n   advertised by an LSR that
      advertised an ERLD (the LSR is entropy\n   label capable) or with a SPRING label
      associated with a Binding SID\n   that has the ELC set.\n   The ELs among multiple
      <ELI, EL> pairs inserted in the stack MAY be\n   the same or different.  The
      LSR that inserts <ELI, EL> pairs can have\n   limitations on the number of such
      pairs that it can insert and also\n   the depth at which it can insert them.
      \ If, due to limitations, the\n   inserted ELs are at positions such that an
      LSR along the path\n   receives an MPLS packet without an EL in the label stack
      within that\n   LSR's ERLD, then the load-balancing performed by that LSR would
      be\n   poor.  An implementation MAY consider multiple criteria when\n   inserting
      <ELI, EL> pairs.\n"
    - contents:
      - "7.1.1.  Example 1: The Ingress Node Has a Sufficient MSD\n                        ECMP
        \         LAG           LAG\n      PE1 --- P1 --- P2 --- P3 --- P4 --- P5
        --- P6 --- PE2\n                  Figure 5: Accommodating MSD Limitations\n
        \  In Figure 5, PE1 wants to forward some MPLS VPN traffic over an\n   explicit
        path to PE2 resulting in the following label stack to be\n   pushed onto the
        received IP header: <Adj_P1P2, Adj_set_P2P3,\n   Adj_P3P4, Adj_P4P5, Adj_P5P6,
        Adj_P6PE2, VPN_label>.  PE1 is limited\n   to push a maximum of 11 labels
        (MSD=11).  P2, P3, and P6 have an ERLD\n   of 3 while others have an ERLD
        of 10.\n   PE1 can only add two ELI/EL pairs in the label stack due to its
        MSD\n   limitation.  It should insert them strategically to benefit load-\n
        \  balancing along the longest part of the path.\n   PE1 can take into account
        multiple parameters when inserting ELs; as\n   examples:\n   *  The ERLD value
        advertised by transit nodes.\n   *  The requirement of load-balancing for
        a particular label value.\n   *  Any service provider preference: favor beginning
        of the path or\n      end of the path.\n   In Figure 5, a good strategy may
        be to use the following stack\n   <Adj_P1P2, Adj_set_P2P3, ELI1, EL1, Adj_P3P4,
        Adj_P4P5, Adj_P5P6,\n   Adj_P6PE2, ELI2, EL2, VPN_label>.  The original stack
        requests P2 to\n   forward based on an L3 adjacency-set that will require
        load-\n   balancing.  Therefore, it is important to ensure that P2 can load-\n
        \  balance correctly.  As P2 has a limited ERLD of 3, an ELI/EL must be\n
        \  inserted just after the label that P2 will use to forward.  On the\n   path
        to PE2, P3 has also a limited ERLD, but P3 will forward based on\n   a regular
        adjacency segment that may not require load-balancing.\n   Therefore, it does
        not seem important to ensure that P3 can do load-\n   balancing despite its
        limited ERLD.  The next nodes along the\n   forwarding path have a high ERLD
        that does not cause any issue,\n   except P6.  Moreover, P6 is using some
        LAGs to PE2 and so is expected\n   to load-balance.  It becomes important
        to insert a new ELI/EL just\n   after the P6 forwarding label.\n   In the
        case above, the ingress node was able to support a sufficient\n   MSD to ensure
        end-to-end load-balancing while taking into account the\n   path attributes.
        \ However, there might be cases where the ingress\n   node may not have the
        necessary label imposition capacity.\n"
      title: '7.1.1.  Example 1: The Ingress Node Has a Sufficient MSD'
    - contents:
      - "7.1.2.  Example 2: The Ingress Node Does Not Have a Sufficient MSD\n                      ECMP
        \         LAG           ECMP         ECMP\n    PE1 --- P1 --- P2 --- P3 ---
        P4 --- P5 --- P6 --- P7 --- P8 --- PE2\n                        Figure 6:
        MSD Considerations\n   In Figure 6, PE1 wants to forward MPLS VPN traffic
        over an explicit\n   path to PE2 resulting in the following label stack to
        be pushed onto\n   the IP header: <Adj_P1P2, Adj_set_P2P3, Adj_P3P4, Adj_P4P5,
        Adj_P5P6,\n   Adj_set_P6P7, Adj_P7P8; Adj_set_P8PE2, VPN_label>.  PE1 is limited
        to\n   push a maximum of 11 labels.  P2, P3, and P6 have an ERLD of 3 while\n
        \  others have an ERLD of 15.\n   Using a similar strategy as the previous
        case may lead to a dilemma,\n   as PE1 can only push a single ELI/EL while
        we may need a minimum of\n   three to load-balance the end-to-end path.  An
        optimized stack that\n   would enable end-to-end load-balancing may be: <Adj_P1P2,\n
        \  Adj_set_P2P3, ELI1, EL1, Adj_P3P4, Adj_P4P5, Adj_P5P6, Adj_set_P6P7,\n
        \  ELI2, EL2, Adj_P7P8, Adj_set_P8PE2, ELI3, EL3, VPN_label>.\n   A decision
        needs to be taken to favor some part of the path for load-\n   balancing considering
        that load-balancing may not work on the other\n   parts.  A service provider
        may decide to place the ELI/EL after the\n   P6 forwarding label as it will
        allow P4 and P6 to load-balance.\n   Placing the ELI/EL at the bottom of the
        stack is also a possibility\n   enabling load-balancing for P4 and P8.\n"
      title: '7.1.2.  Example 2: The Ingress Node Does Not Have a Sufficient MSD'
    title: 7.1.  Overview
  - contents:
    - "7.2.  Considerations for the Placement of Entropy Labels\n   The sample cases
      described in the previous section showed that ELI/EL\n   placement when the
      maximum number of labels to be pushed is limited\n   is not an easy decision,
      and multiple criteria may be taken into\n   account.\n   This section describes
      some considerations that an implementation MAY\n   take into account when placing
      ELI/ELs.  This list of criteria is not\n   considered exhaustive and an implementation
      MAY take into account\n   additional criteria or tiebreakers that are not documented
      here.  As\n   the insertion of ELI/ELs is performed by the ingress node, having\n
      \  ingress nodes that do not use the same criteria does not cause an\n   interoperability
      issue.  However, from a network design and operation\n   perspective, it is
      better to have all ingress routers using the same\n   criteria.\n   An implementation
      SHOULD try to maximize the possibility of load-\n   balancing along the path
      by inserting an ELI/EL where multiple equal-\n   cost paths are available and
      minimize the number of ELI/ELs that need\n   to be inserted.  In case of a trade-off,
      an implementation SHOULD\n   provide flexibility to the operator to select the
      criteria to be\n   considered when placing ELI/ELs or specify a subobjective
      for\n   optimization.\n                            2      2\n      PE1 -- P1
      -- P2 --P3 --- P4 --- P5 -- ... -- P8 -- P9 -- PE2\n                        P3'---
      P4'--- P5'\n                          Figure 7: MSD Trade-Offs\n   Figure 7
      will be used as reference in the following subsections.  All\n   metrics are
      equal to 1 except P3-P4 and P4-P5, which have a metric 2.\n   We consider the
      MSD of nodes to be the full limit of label imposition\n   (including service
      labels, entropy labels, and transport labels).\n"
    - contents:
      - "7.2.1.  ERLD Value\n   As mentioned in Section 7.1, the ERLD value is an
        important parameter\n   to consider when inserting an ELI/EL.  If an ELI/EL
        does not fall\n   within the ERLD of a node on the path, the node will not
        be able to\n   load-balance the traffic efficiently.\n   The ERLD value can
        be advertised via protocols, and those extensions\n   are described in separate
        documents (for instance, [ISIS-ELC] and\n   [OSPF-ELC]).\n   Let's consider
        a path from PE1 to PE2 using the following stack\n   pushed by PE1: <Adj_P1P2,
        Node_P9, Adj_P9PE2, Service_label>.\n   Using the ERLD as an input parameter
        can help to minimize the number\n   of required ELI/EL pairs to be inserted.
        \ An ERLD value must be\n   retrieved for each SPRING label in the label stack.\n
        \  For a label bound to an adjacency segment, the ERLD is the ERLD of\n   the
        node that has advertised the adjacency segment.  In the example\n   above,
        the ERLD associated with Adj_P1P2 would be the ERLD of router\n   P1, as P1
        will perform the forwarding based on the Adj_P1P2 label.\n   For a label bound
        to a node segment, multiple strategies MAY be\n   implemented.  An implementation
        MAY try to evaluate the minimum ERLD\n   value along the node segment path.
        \ If an implementation cannot find\n   the minimum ERLD along the path of
        the segment or does not support\n   the computation of the minimum ERLD, it
        SHOULD instead use the ERLD\n   of the tail-end node.  Using the ERLD of the
        tail end of the node\n   segment mimics the behavior of [RFC6790] where the
        ingress takes only\n   care of the egress of the LSP.  In the example above,
        if the\n   implementation supports computation of minimum ERLD along the path,\n
        \  the ERLD associated with label Node_P9 would be the minimum ERLD\n   between
        nodes {P2,P3,P4 ..., P8}.  If the implementation does not\n   support the
        computation of minimum ERLD, it will consider the ERLD of\n   P9 (tail-end
        node of Node_P9 SID).  While providing the more optimal\n   ELI/EL placement,
        evaluating the minimum ERLD increases the\n   complexity of ELI/EL insertion.
        \ As the path to the Node SID may\n   change over time, a recomputation of
        the minimum ERLD is required for\n   each topology change.  This recomputation
        may require the positions\n   of the ELI/ELs to change.\n   For a label bound
        to a Binding Segment, if the Binding Segment\n   describes a path, an implementation
        MAY also try to evaluate the\n   minimum ERLD along this path.  If the implementation
        cannot find the\n   minimum ERLD along the path of the segment or does not
        support this\n   evaluation, it SHOULD instead use the ERLD of the node advertising\n
        \  the Binding SID.  As for the node segment, evaluating the minimum\n   ERLD
        adds complexity in the ELI/EL insertion process.\n"
      title: 7.2.1.  ERLD Value
    - contents:
      - "7.2.2.  Segment Type\n   Depending on the type of segment a particular label
        is bound to, an\n   implementation can deduce that this particular label will
        be subject\n   to load-balancing on the path.\n"
      - contents:
        - "7.2.2.1.  Node SID\n   An MPLS label bound to a Node SID represents a path
          that may cross\n   multiple hops.  Load-balancing may be needed on the node
          starting\n   this path but also on any node along the path.\n   In Figure
          7, let's consider a path from PE1 to PE2 using the\n   following stack pushed
          by PE1: <Adj_P1P2, Node_P9, Adj_P9PE2,\n   Service_label>.\n   If, for example,
          PE1 is limited to push 6 labels, it can add a single\n   ELI/EL within the
          label stack.  An operator may want to favor a\n   placement that would allow
          load-balancing along the Node SID path.\n   In Figure 7, P3, which is along
          the Node SID path, requires load-\n   balancing between two equal-cost paths.\n
          \  An implementation MAY try to evaluate if load-balancing is really\n   required
          within a node segment path.  This could be done by running\n   an additional
          SPT (Shortest Path Tree) computation and analyzing of\n   the node segment
          path to prevent a node segment that does not really\n   require load-balancing
          from being preferred when placing ELI/ELs.\n   Such inspection may be time
          consuming for implementations and without\n   a 100% guarantee, as a node
          segment path may use LAGs that are\n   invisible to the IP topology.  As
          a simpler approach, an\n   implementation MAY consider that a label bound
          to a Node SID will be\n   subject to load-balancing and require an ELI/EL.\n"
        title: 7.2.2.1.  Node SID
      - contents:
        - "7.2.2.2.  Adjacency-Set SID\n   An adjacency-set is an Adj-SID that refers
          to a set of adjacencies.\n   When an adjacency-set segment is used within
          a label stack, an\n   implementation can deduce that load-balancing is expected
          at the node\n   that advertised this adjacency segment.  An implementation
          MAY favor\n   the insertion of an ELI/EL after the Adj-SID representing
          an\n   adjacency-set.\n"
        title: 7.2.2.2.  Adjacency-Set SID
      - contents:
        - "7.2.2.3.  Adjacency SID Representing a Single IP Link\n   When an adjacency
          segment representing a single IP link is used\n   within a label stack,
          an implementation can deduce that load-\n   balancing may not be expected
          at the node that advertised this\n   adjacency segment.\n   An implementation
          MAY NOT place an ELI/EL after a regular Adj-SID in\n   order to favor the
          insertion of ELI/ELs following other segments.\n   Readers should note that
          an adjacency segment representing a single\n   IP link may require load-balancing.
          \ This is the case when a LAG (L2\n   bundle) is implemented between two
          IP nodes and the L2 bundle SR\n   extensions [RFC8668] are not implemented.
          \ In such a case, it could\n   be useful to insert an ELI/EL in a readable
          position for the LSR\n   advertising the label associated with the adjacency
          segment.  To\n   communicate the requirement for load-balancing for a particular\n
          \  Adjacency SID to ingress nodes, a user can enforce the use of the L2\n
          \  bundle SR extensions defined in [RFC8668] or can declare the single\n
          \  adjacency as an adjacency-set.\n"
        title: 7.2.2.3.  Adjacency SID Representing a Single IP Link
      - contents:
        - "7.2.2.4.  Adjacency SID Representing a Single Link within an L2 Bundle\n
          \  When the L2 bundle SR extensions [RFC8668] are used, adjacency\n   segments
          may be advertised for each member of the bundle.  In this\n   case, an implementation
          can deduce that load-balancing is not\n   expected on the LSR advertising
          this segment and MAY NOT insert an\n   ELI/EL after the corresponding label.\n"
        title: 7.2.2.4.  Adjacency SID Representing a Single Link within an L2 Bundle
      - contents:
        - "7.2.2.5.  Adjacency SID Representing an L2 Bundle\n   When the L2 bundle
          SR extensions [RFC8668] are used, an adjacency\n   segment may be advertised
          to represent the bundle.  In this case, an\n   implementation can deduce
          that load-balancing is expected on the LSR\n   advertising this segment
          and MAY insert an ELI/EL after the\n   corresponding label.\n"
        title: 7.2.2.5.  Adjacency SID Representing an L2 Bundle
      title: 7.2.2.  Segment Type
    - contents:
      - "7.2.3.  Maximizing Number of LSRs That Will Load-Balance\n   When placing
        ELI/ELs, an implementation MAY optimize the number of\n   LSRs that both need
        to load-balance (i.e., have ECMPs) and that will\n   be able to perform load-balancing
        (i.e., the EL is within their\n   ERLD).\n   Let's consider a path from PE1
        to PE2 using the following stack\n   pushed by PE1: <Adj_P1P2, Node_P9, Adj_P9PE2,
        Service_label>.  All\n   routers have an ERLD of 10 except P1 and P2, which
        have an ERLD of 4.\n   PE1 is able to push 6 labels, so only a single ELI/EL
        can be added.\n   In the example above, adding an ELI/EL after Adj_P1P2 will
        only allow\n   load-balancing at P1, while inserting it after Adj_PE2P9 will
        allow\n   load-balancing at P2, P3 ... P9 and maximize the number of LSRs
        that\n   can perform load-balancing.\n"
      title: 7.2.3.  Maximizing Number of LSRs That Will Load-Balance
    - contents:
      - "7.2.4.  Preference for a Part of the Path\n   An implementation MAY allow
        the user to favor a part of the end-to-\n   end path when the number of ELI/ELs
        that can be pushed is not enough\n   to cover the entire path.  As an example,
        a service provider may want\n   to favor load-balancing at the beginning of
        the path or at the end of\n   the path, so the implementation favors putting
        the ELI/ELs near the\n   top or the bottom of the stack.\n"
      title: 7.2.4.  Preference for a Part of the Path
    - contents:
      - "7.2.5.  Combining Criteria\n   An implementation MAY combine multiple criteria
        to determine the best\n   ELI/ELs placement.  However, combining too many
        criteria could lead\n   to implementation complexity and high resource consumption.
        \ Each\n   time the network topology changes, a new evaluation of the ELI/EL\n
        \  placement will be necessary for each impacted LSP.\n"
      title: 7.2.5.  Combining Criteria
    title: 7.2.  Considerations for the Placement of Entropy Labels
  title: 7.  Insertion of Entropy Labels for SPRING Path
- contents:
  - "8.  A Simple Example Algorithm\n   A simple implementation might take into account
    the ERLD when placing\n   ELI/EL while trying to minimize the number of ELI/ELs
    inserted and\n   trying to maximize the number of LSRs that can load-balance.\n
    \  The example algorithm is based on the following considerations:\n   *  An LSR
    that can insert a limited number of <ELI, EL> pairs should\n      insert such
    pairs deeper in the stack.\n   *  An LSR should try to insert <ELI, EL> pairs
    at positions to\n      maximize the number of transit LSRs for which the EL occurs
    within\n      the ERLD of those LSRs.\n   *  An LSR should try to insert the minimum
    number of such pairs while\n      trying to satisfy the above criteria.\n   The
    pseudocode of the example algorithm is shown below.\n      Initialize the current
    EL insertion point to the\n        bottom-most label in the stack that is EL-capable\n
    \     while (local-node can push more <ELI,EL> pairs OR\n                insertion
    point is not above label stack) {\n          insert an <ELI,EL> pair below current
    insertion point\n          move new insertion point up from current insertion
    point until\n              ((last inserted EL is below the ERLD) AND (ERLD > 2)\n
    \              (new insertion point is EL-capable))\n          set current insertion
    point to new insertion point\n      }\n      Figure 8: Example Algorithm to Insert
    <ELI, EL> Pairs in a Label\n   When this algorithm is applied to the example described
    in Section 3,\n   it will result in ELs being inserted in two positions; one after
    the\n   label L_N-D and another after L_N-P3.  Thus, the resulting label\n   stack
    would be <L_N-P3, ELI, EL, L_A-L1, L_N-D, ELI, EL>.\n"
  title: 8.  A Simple Example Algorithm
- contents:
  - "9.  Deployment Considerations\n   As long as LSR node data-plane capabilities
    are limited (number of\n   labels that can be pushed or number of labels that
    can be inspected),\n   hop-by-hop load-balancing of SPRING-encapsulated flows
    will require\n   trade-offs.\n   The entropy label is still a good and usable
    solution as it allows\n   load-balancing without having to perform deep packet
    inspection on\n   each LSR: It does not seem reasonable to have an LSR inspecting
    UDP\n   ports within a GRE tunnel carried over a 15-label SPRING tunnel.\n   Due
    to the limited capacity of reading a deep stack of MPLS labels,\n   multiple ELI/ELs
    may be required within the stack, which directly\n   impacts the capacity of the
    head-end to push a deep stack: each ELI/\n   EL inserted requires two additional
    labels to be pushed.\n   Placement strategies of ELI/ELs are required to find
    the best trade-\n   off.  Multiple criteria could be taken into account, and some
    level\n   of customization (by the user) is required to accommodate different\n
    \  deployments.  Since analyzing the path of each destination to\n   determine
    the best ELI/EL placement may be time consuming for the\n   control plane, we
    encourage implementations to find the best trade-\n   off between simplicity,
    resource consumption, and load-balancing\n   efficiency.\n   In the future, hardware
    and software capacity may increase data-plane\n   capabilities and may remove
    some of these limitations, increasing\n   load-balancing capability using entropy
    labels.\n"
  title: 9.  Deployment Considerations
- contents:
  - "10.  Options Considered\n   Different options that were considered to arrive
    at the recommended\n   solution are documented in this section.\n   These options
    are detailed here only for historical purposes.\n"
  - contents:
    - "10.1.  Single EL at the Bottom of the Stack\n   In this option, a single EL
      is used for the entire label stack.  The\n   source LSR S encodes the entropy
      label at the bottom of the label\n   stack.  In the example described in Section
      3, it will result in the\n   label stack at LSR S to look like <L_N-P3, L_A-L1,
      L_N-D, ELI, EL>\n   <remaining packet header>.  Note that the notation in [RFC6790]
      is\n   used to describe the label stack.  An issue with this approach is\n   that
      as the label stack grows due an increase in the number of SIDs,\n   the EL goes
      correspondingly deeper in the label stack.  Hence,\n   transit LSRs have to
      access a larger number of bytes in the packet\n   header when making forwarding
      decisions.  In the example described in\n   Section 3, if we consider that the
      LSR P1 has an ERLD of 3, P1 would\n   load-balance traffic poorly on the parallel
      links L3 and L4 since the\n   EL is below the ERLD of P1.  A load-balanced network
      design using\n   this approach must ensure that all intermediate LSRs have the\n
      \  capability to read the maximum label stack depth as required for the\n   application
      that uses source-routed stacking.\n   This option was rejected since there exist
      a number of hardware\n   implementations that have a low maximum readable label
      depth.\n   Choosing this option can lead to a loss of load-balancing using EL
      in\n   a significant part of the network when that is a critical requirement\n
      \  in a service-provider network.\n"
    title: 10.1.  Single EL at the Bottom of the Stack
  - contents:
    - "10.2.  An EL per Segment in the Stack\n   In this option, each segment/label
      in the stack can be given its own\n   EL.  When load-balancing is required to
      direct traffic on a segment,\n   the source LSR pushes an <ELI, EL> before pushing
      the label\n   associated to this segment.  In the example described in Section
      3,\n   the source label stack that is LSR S encoded would be <L_N-P3, ELI,\n
      \  EL, L_A-L1, L_N-D, ELI, EL>, where all the ELs can be the same.\n   Accessing
      the EL at an intermediate LSR is independent of the depth\n   of the label stack
      and hence, independent of the specific application\n   that uses source-routed
      tunnels with label stacking.  A drawback is\n   that the depth of the label
      stack grows significantly, almost 3 times\n   as the number of labels in the
      label stack.  The network design\n   should ensure that source LSRs have the
      capability to push such a\n   deep label stack.  Also, the bandwidth overhead
      and potential MTU\n   issues of deep label stacks should be considered in the
      network\n   design.\n   This option was rejected due to the existence of hardware\n
      \  implementations that can push a limited number of labels on the label\n   stack.
      \ Choosing this option would result in a hardware requirement\n   to push two
      additional labels per tunnel label.  Hence, it would\n   restrict the number
      of tunnels that can be stacked in an LSP and\n   hence, constrain the types
      of LSPs that can be created.  This was\n   considered unacceptable.\n"
    title: 10.2.  An EL per Segment in the Stack
  - contents:
    - "10.3.  A Reusable EL for a Stack of Tunnels\n   In this option, an LSR that
      terminates a tunnel reuses the EL of the\n   terminated tunnel for the next
      inner tunnel.  It does this by storing\n   the EL from the outer tunnel when
      that tunnel is terminated and\n   reinserting it below the next inner tunnel
      label during the label-\n   swap operation.  The LSR that stacks tunnels should
      insert an EL\n   below the outermost tunnel.  It should not insert ELs for any
      inner\n   tunnels.  Also, the penultimate hop LSR of a segment must not pop
      the\n   ELI and EL even though they are exposed as the top labels since the\n
      \  terminating LSR of that segment would reuse the EL for the next\n   segment.\n
      \  In Section 3, the source label stack that is LSR S encoded would be\n   <L_N-P3,
      ELI, EL, L_A-L1, L_N-D>.  At P1, the outgoing label stack\n   would be <L_N-P3,
      ELI, EL, L_A-L1, L_N-D> after it has load-balanced\n   to one of the links L3
      or L4.  At P3, the outgoing label stack would\n   be <L_N-D, ELI, EL>.  At P2,
      the outgoing label stack would be <L_N-\n   D, ELI, EL> and it would load-balance
      to one of the next-hop LSRs P4\n   or P5.  Accessing the EL at an intermediate
      LSR (e.g., P1) is\n   independent of the depth of the label stack and hence,
      independent of\n   the specific use case to which the label stack is applied.\n
      \  This option was rejected due to the significant change in label-swap\n   operations
      that would be required for existing hardware.\n"
    title: 10.3.  A Reusable EL for a Stack of Tunnels
  - contents:
    - "10.4.  EL at Top of Stack\n   A slight variant of the reusable EL option is
      to keep the EL at the\n   top of the stack rather than below the tunnel label.
      \ In this case,\n   each LSR that is not terminating a segment should continue
      to keep\n   the received EL at the top of the stack when forwarding the packet\n
      \  along the segment.  An LSR that terminates a segment should use the\n   EL
      from the terminated segment at the top of the stack when\n   forwarding onto
      the next segment.\n   This option was rejected due to the significant change
      in label swap\n   operations that would be required for existing hardware.\n"
    title: 10.4.  EL at Top of Stack
  - contents:
    - "10.5.  ELs at Readable Label Stack Depths\n   In this option, the source LSR
      inserts ELs for tunnels in the label\n   stack at depths such that each LSR
      along the path that must load-\n   balance is able to access at least one EL.
      \ Note that the source LSR\n   may have to insert multiple ELs in the label
      stack at different\n   depths for this to work since intermediate LSRs may have
      differing\n   capabilities in accessing the depth of a label stack.  The label\n
      \  stack depth access value of intermediate LSRs must be known to create\n   such
      a label stack.  How this value is determined is outside the\n   scope of this
      document.  This value can be advertised using a\n   protocol such as an IGP.\n
      \  Applying this method to the example in Section 3, if LSR P1 needs to\n   have
      the EL within a depth of 4, then the source label stack that is\n   LSR S encoded
      would be <L_N-P3, ELI, EL, L_A-L1, L_N-D, ELI, EL>,\n   where all the ELs would
      typically have the same value.\n   In the case where the ERLD has different
      values along the path and\n   the LSR that is inserting <ELI, EL> pairs has
      no limit on how many\n   pairs it can insert, and it knows the appropriate positions
      in the\n   stack where they should be inserted, this option is the same as the\n
      \  recommended solution in Section 7.\n   Note that a refinement of this solution,
      which balances the number of\n   pushed labels against the desired entropy,
      is the solution described\n   in Section 7.\n"
    title: 10.5.  ELs at Readable Label Stack Depths
  title: 10.  Options Considered
- contents:
  - "11.  IANA Considerations\n   This document has no IANA actions.\n"
  title: 11.  IANA Considerations
- contents:
  - "12.  Security Considerations\n   Compared to [RFC6790], this document introduces
    the notion of ERLD\n   and MSD, and may require an ingress node to push multiple
    ELIs/ELs.\n   These changes do not introduce any new security considerations beyond\n
    \  those already listed in [RFC6790].\n"
  title: 12.  Security Considerations
- contents:
  - '13.  References

    '
  - contents:
    - "13.1.  Normative References\n   [RFC6790]  Kompella, K., Drake, J., Amante,
      S., Henderickx, W., and\n              L. Yong, \"The Use of Entropy Labels
      in MPLS Forwarding\",\n              RFC 6790, DOI 10.17487/RFC6790, November
      2012,\n              <https://www.rfc-editor.org/info/rfc6790>.\n   [RFC2119]
      \ Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC8174]  Leiba,
      B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119 Key Words\",
      BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n
      \  [RFC8402]  Filsfils, C., Ed., Previdi, S., Ed., Ginsberg, L.,\n              Decraene,
      B., Litkowski, S., and R. Shakir, \"Segment\n              Routing Architecture\",
      RFC 8402, DOI 10.17487/RFC8402,\n              July 2018, <https://www.rfc-editor.org/info/rfc8402>.\n
      \  [RFC8660]  Bashandy, A., Ed., Filsfils, C., Ed., Previdi, S.,\n              Litkowski,
      S., and R. Shakir, \"Segment Routing with the\n              MPLS Data Plane\",
      RFC 8660, DOI 10.17487/RFC8660, December\n              2019, <https://www.rfc-editor.org/info/rfc8660>.\n"
    title: 13.1.  Normative References
  - contents:
    - "13.2.  Informative References\n   [ISIS-ELC] Xu, X., Kini, S., Psenak, P.,
      Filsfils, C., Litkowski, S.,\n              and M. Bocci, \"Signaling Entropy
      Label Capability and\n              Entropy Readable Label Depth Using IS-IS\",
      Work in\n              Progress, Internet-Draft, draft-ietf-isis-mpls-elc-10,
      21\n              October 2019,\n              <https://tools.ietf.org/html/draft-ietf-isis-mpls-elc-10>.\n
      \  [OSPF-ELC] Xu, X., Kini, S., Psenak, P., Filsfils, C., Litkowski, S.,\n              and
      M. Bocci, \"Signaling Entropy Label Capability and\n              Entropy Readable
      Label-stack Depth Using OSPF\", Work in\n              Progress, Internet-Draft,
      draft-ietf-ospf-mpls-elc-12, 25\n              October 2019,\n              <https://tools.ietf.org/html/draft-ietf-ospf-mpls-elc-12>.\n
      \  [RFC8668]  Ginsberg, L., Bashandy, A., Filsfils, C., Nanduri, M., and\n              E.
      Aries, \"Advertising Layer 2 Bundle Member Link\n              Attributes in
      IS-IS\", RFC 8668, DOI 10.17487/RFC8668,\n              December 2019, <https://www.rfc-editor.org/info/rfc8668>.\n
      \  [RFC7855]  Previdi, S., Ed., Filsfils, C., Ed., Decraene, B.,\n              Litkowski,
      S., Horneffer, M., and R. Shakir, \"Source\n              Packet Routing in
      Networking (SPRING) Problem Statement\n              and Requirements\", RFC
      7855, DOI 10.17487/RFC7855, May\n              2016, <https://www.rfc-editor.org/info/rfc7855>.\n
      \  [RFC8476]  Tantsura, J., Chunduri, U., Aldrin, S., and P. Psenak,\n              \"Signaling
      Maximum SID Depth (MSD) Using OSPF\", RFC 8476,\n              DOI 10.17487/RFC8476,
      December 2018,\n              <https://www.rfc-editor.org/info/rfc8476>.\n   [RFC8491]
      \ Tantsura, J., Chunduri, U., Aldrin, S., and L. Ginsberg,\n              \"Signaling
      Maximum SID Depth (MSD) Using IS-IS\", RFC 8491,\n              DOI 10.17487/RFC8491,
      November 2018,\n              <https://www.rfc-editor.org/info/rfc8491>.\n   [MSD-BGP]
      \ Tantsura, J., Chunduri, U., Talaulikar, K., Mirsky, G.,\n              and
      N. Triantafillis, \"Signaling MSD (Maximum SID Depth)\n              using Border
      Gateway Protocol Link-State\", Work in\n              Progress, Internet-Draft,
      draft-ietf-idr-bgp-ls-segment-\n              routing-msd-09, 15 October 2019,\n
      \             <https://tools.ietf.org/html/draft-ietf-idr-bgp-ls-\n              segment-routing-msd-09>.\n"
    title: 13.2.  Informative References
  title: 13.  References
- contents:
  - "Acknowledgements\n   The authors would like to thank John Drake, Loa Andersson,
    Curtis\n   Villamizar, Greg Mirsky, Markus Jork, Kamran Raza, Carlos Pignataro,\n
    \  Bruno Decraene, Chris Bowers, Nobo Akiya, Daniele Ceccarelli, and Joe\n   Clarke
    for their review, comments, and suggestions.\n"
  title: Acknowledgements
- contents:
  - "Contributors\n   Xiaohu Xu\n   Huawei\n   Email: xuxiaohu@huawei.com\n   Wim
    Hendrickx\n   Nokia\n   Email: wim.henderickx@nokia.com\n   Gunter Van de Velde\n
    \  Nokia\n   Email: gunter.van_de_velde@nokia.com\n   Acee Lindem\n   Cisco\n
    \  Email: acee@cisco.com\n"
  title: Contributors
- contents:
  - "Authors' Addresses\n   Sriganesh Kini\n   Email: sriganeshkini@gmail.com\n   Kireeti
    Kompella\n   Juniper\n   Email: kireeti@juniper.net\n   Siva Sivabalan\n   Cisco\n
    \  Email: msiva@cisco.com\n   Stephane Litkowski\n   Orange\n   Email: slitkows.ietf@gmail.com\n
    \  Rob Shakir\n   Google\n   Email: robjs@google.com\n   Jeff Tantsura\n"
  title: Authors' Addresses
