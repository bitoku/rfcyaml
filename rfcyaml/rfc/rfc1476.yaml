- title: __initial_text__
  contents:
  - '                  RAP: Internet Route Access Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard.  Discussion and\n  \
    \ suggestions for improvement are requested.  Please refer to the\n   current\
    \ edition of the \"IAB Official Protocol Standards\" for the\n   standardization\
    \ state and status of this protocol.  Distribution of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This RFC describes an open distance vector routing protocol for\
    \ use\n   at all levels of the internet, from isolated LANs to the major\n   routers\
    \ of an international commercial network provider.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.       Introduction  . . . . . . . . . . . . . . . .\
    \ . . . 2\n   1.1       Link-State and Distance-Vector . . . . . . . . . . 3\n\
    \   1.2       Terminology  . . . . . . . . . . . . . . . . . . . 3\n   1.3   \
    \    Philosophy . . . . . . . . . . . . . . . . . . . . 3\n   2.       RAP Protocol\
    \  . . . . . . . . . . . . . . . . . . . 4\n   2.1       Command Header Format\
    \  . . . . . . . . . . . . . . 4\n   2.1.1     Length field . . . . . . . . .\
    \ . . . . . . . . . . 4\n   2.1.2     RAP version  . . . . . . . . . . . . . .\
    \ . . . . . 5\n   2.2       RAP Commands . . . . . . . . . . . . . . . . . . .\
    \ 5\n   2.2.1     No operation . . . . . . . . . . . . . . . . . . . 5\n   2.2.2\
    \     Poll . . . . . . . . . . . . . . . . . . . . . . . 6\n   2.2.3     Error\
    \  . . . . . . . . . . . . . . . . . . . . . . 7\n   2.2.4     Add Route  . .\
    \ . . . . . . . . . . . . . . . . . . 8\n   2.2.5     Purge Route  . . . . . .\
    \ . . . . . . . . . . . . . 9\n   3.       Attributes of Routes  . . . . . . .\
    \ . . . . . . . . 9\n   3.1       Metric and Option Format . . . . . . . . . .\
    \ . . .10\n   3.1.1     Option Class . . . . . . . . . . . . . . . . . .  10\n\
    \   3.1.2     Type . . . . . . . . . . . . . . . . . . . . . .  10\n   3.1.3 \
    \    Format . . . . . . . . . . . . . . . . . . . . .  11\n   3.2       Metrics\
    \ and Options  . . . . . . . . . . . . . .  11\n   3.2.1     Distance . . . .\
    \ . . . . . . . . . . . . . . . .  12\n   3.2.2     Delay  . . . . . . . . . .\
    \ . . . . . . . . . . .  12\n   3.2.3     MTU  . . . . . . . . . . . . . . . .\
    \ . . . . . .  12\n   3.2.4     Bandwidth  . . . . . . . . . . . . . . . . . .\
    \ .  12\n   3.2.5     Origin . . . . . . . . . . . . . . . . . . . . .  12\n \
    \  3.2.6     Target . . . . . . . . . . . . . . . . . . . . .  13\n   3.2.7  \
    \   Packet Cost  . . . . . . . . . . . . . . . . . .  13\n   3.2.8     Time Cost\
    \  . . . . . . . . . . . . . . . . . . .  13\n   3.2.9     Source Restriction\
    \ . . . . . . . . . . . . . . .  14\n   3.2.10    Destination Restriction  . .\
    \ . . . . . . . . . .  14\n   3.2.11    Trace  . . . . . . . . . . . . . . . .\
    \ . . . . .  14\n   3.2.12    AUP  . . . . . . . . . . . . . . . . . . . . . .\
    \  15\n   3.2.13    Public . . . . . . . . . . . . . . . . . . . . .  15\n   4.\
    \       Procedure   . . . . . . . . . . . . . . . . . . .  15\n   4.1       Receiver\
    \ filtering . . . . . . . . . . . . . . .  16\n   4.2       Update of metrics\
    \ and options  . . . . . . . . .  16\n   4.3       Aggregation  . . . . . . .\
    \ . . . . . . . . . . .  17\n   4.4       Active route selection . . . . . . .\
    \ . . . . . .  17\n   4.5       Transmitter filtering  . . . . . . . . . . . .\
    \ .  17\n   4.6       Last resort loop prevention  . . . . . . . . . .  18\n \
    \  5.       Conclusion  . . . . . . . . . . . . . . . . . . .  18\n   6.     \
    \  Appendix: Real Number Representation  . . . . . .  19\n   7.       References\
    \  . . . . . . . . . . . . . . . . . . .  20\n   8.       Security Considerations\
    \ . . . . . . . . . . . . .  20\n   9.       Author's Address  . . . . . . . .\
    \ . . . . . . . .  20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   RAP is a general protocol for distributing routing information\
    \ at all\n   levels of the Internet, from private LANs to the widest-flung\n \
    \  international carrier networks.  It does not distinguish between\n   \"interior\"\
    \ and \"exterior\" routing (except as restricted by specific\n   policy), and\
    \ therefore is not as restricted nor complex as those\n   protocols that have\
    \ strict level and area definitions in their\n   models.\n   The protocol encourages\
    \ the widest possible dissemination of topology\n   information, aggregating it\
    \ only when limits of thrust, bandwidth, or\n   administrative policy require\
    \ it.  Thus RAP permits aggressive use of\n   resources to optimize routes where\
    \ desired, without the restrictions\n   inherent in the simplifications of other\
    \ models.\n   While RAP uses IPv7 [RFC1475] addressing internally, it is run over\n\
    \   both IPv4 and IPv7 networks, and shares routing information between\n   them.\
    \  A IPv4 router will only be able to activate and propagate\n   routes that are\
    \ defined within the local Administrative Domain (AD),\n   loading the version\
    \ 4 subset of the address into the local IP\n   forwarding database.\n"
- title: 1.1  Link-State and Distance-Vector
  contents:
  - "1.1  Link-State and Distance-Vector\n   Of the two major classes of routing algorithm,\
    \ link-state and\n   distance vector, only distance vector seems to scale from\
    \ the local\n   network (where RIP is existence-proof of its validity) to large\
    \ scale\n   inter-domain policy routing, where the number of links and policies\n\
    \   exceeds the ability of each router to map the entire network.\n   In between,\
    \ we have OSPF, an open link state (specifically, using\n   shortest-path-first\
    \ analysis of the graph, hence the acronym)\n   protocol, with extensive development\
    \ in intra-area routing.\n   Since distance vector has proven useful at both ends\
    \ of the range, it\n   seems reasonable to apply it to the entire range of scales,\
    \ creating\n   a protocol that works automatically on small groups of LANs, but\
    \ can\n   apply fairly arbitrary policy in the largest networks.\n   This helps\
    \ model the real world, where networks are not clearly\n   divided into hierarchical\
    \ domains with identifiable \"border\" routers,\n   but have many links across\
    \ organizational structure and over back\n   fences.\n"
- title: 1.2  Terminology
  contents:
  - "1.2  Terminology\n   The RAP protocol propagates routes in the opposite direction\
    \ to the\n   travel of datagrams using the routes.  To avoid confusion explaining\n\
    \   the routing protocol, several terms are distinguished:\n   source        \
    \  where datagrams come from, the source of the\n                   datagrams\n\
    \   destination     where datagrams go to, the destination of the\n          \
    \         datagrams\n   origin          where routing information originates,\
    \ the router\n                   initially inserting route information into the\n\
    \                   RAP domain\n   target          where routing information goes,\
    \ the target uses the\n                   information to send datagrams\n"
- title: 1.3  Philosophy
  contents:
  - "1.3  Philosophy\n   Protocols should become simpler as they evolve.\n"
- title: 2.  RAP Protocol
  contents:
  - "2.  RAP Protocol\n   The RAP protocol operates on TCP port 38, with peers opening\
    \ a\n   symmetric TCP connection between the RAP ports on each system.  Thus\n\
    \   only one RAP connection exists between any pair of peers.\n   RAP is also\
    \ used on UDP port 38, as a peer discovery method.  Hosts\n   (i.e., non-routing\
    \ systems) may listen to RAP datagrams on this port\n   to discover local gateways.\
    \  This is in addition to, or in lieu of,\n   an Internet Standard gateway discovery\
    \ protocol, which does not exist\n   at this writing.\n   The peers then use RAP\
    \ commands to send each other all routes\n   available though the sending peer.\
    \  This occurs as a full-duplex\n   (i.e., simultaneous) exchange of information,\
    \ with no acknowledgement\n   of individual commands.\n   Once the initial exchange\
    \ has been completed, the peers send only\n   updates to routes, new routes, and\
    \ purge commands to delete routes\n   previously offered.\n   When the connection\
    \ is broken, each system purges all routes that had\n   been offered by the peer.\n"
- title: 2.1  Command Header Format
  contents:
  - "2.1  Command Header Format\n   Each RAP command starts with a header.  The header\
    \ contains a length\n   field to identify the start of the next packet in the\
    \ TCP stream, a\n   version number, and the code for the command.  On UDP, the\
    \ length\n   field does not appear:  each UDP datagram must contain exactly one\n\
    \   RAP command and not contain data or padding after the end of the\n   command.\n\
    \     0                   1                   2                   3\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |        length                                                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |        RAP version            |       command code            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 2.1.1  Length field
  contents:
  - "2.1.1  Length field\n   The length is a 32 bit unsigned number specifying the\
    \ offset in bytes\n   from the first byte of the length field of this command\
    \ packet to the\n   start of the length field of the next.  The minimum value\
    \ is 8.\n   There is no specific limit to the length of a command packet;\n  \
    \ implementations MUST be able to at least count and skip over a packet\n   that\
    \ is too large and then MAY send an error indication.\n   Each version of the\
    \ protocol will profile what size should be\n   considered the limit for senders,\
    \ and what (larger) size should be\n   considered by receivers to mean that the\
    \ connection is insane:\n   either unsynchronized or worse.\n   For version 1\
    \ of the protocol, senders MUST NOT send command packets\n   greater than 16384\
    \ bytes.  Receivers SHOULD consider packets that\n   appear to be greater than\
    \ 162144 bytes in length to be an indication\n   of an unrecoverable error.\n\
    \   Note that these limits probably will not be approached in normal\n   operation\
    \ of version 1 of the protocol; receivers may reasonably\n   decline to use routes\
    \ described by 16K bytes of metrics and policy.\n   But even the most memory-restricted\
    \ implementation MUST be able to\n   skip such a command packet.\n"
- title: 2.1.2  RAP version
  contents:
  - "2.1.2  RAP version\n   The version field is a 16 bit unsigned number.  It identifies\
    \ the\n   version of RAP used for that command.  Note that commands with\n   different\
    \ versions may be mixed on the same connection, although the\n   usual procedure\
    \ will be to do the serious protocol (exchanging route\n   updates) only at the\
    \ highest version common to both ends of the\n   connection.\n   Each side starts\
    \ the connection by sending a poll command, using the\n   highest version supported\
    \ and continues by using the highest version\n   received in any command from\
    \ the remote.  The response to the poll\n   will either be a no-operation packet\
    \ at that version or an error\n   packet at the highest version supported by the\
    \ remote.\n   This document describes version 1 of the RAP protocol.\n"
- title: 2.2  RAP Commands
  contents:
  - "2.2  RAP Commands\n   There five simple RAP commands, described in the following\
    \ sections.\n"
- title: 2.2.1  No operation
  contents:
  - "2.2.1  No operation\n   The no operation command serves to reset the poll timer\
    \ (see next\n   section) of the receiver, or (as a side effect) to tell the receiver\n\
    \   that a particular version is supported.  It never contains option\n   specific\
    \ data and its length is always 8.\n   The no operation command is also used in\
    \ a UDP broadcast to inform\n   other systems that the sender is running RAP actively\
    \ on the network\n   and is both a possible gateway and a candidate peer.  If\
    \ this command\n   is being sent in response to a broadcast poll, it should be\
    \ sent only\n   to the poller.\n   A RAP process may send such broadcasts in a\
    \ startup sequence, or it\n   may persist indefinitely to inform other systems\
    \ coming on line.  If\n   it persists, it must not send them more than once every\
    \ 10 minutes\n   (after the initial startup sequence).  If the RAP process sends\
    \ polls\n   as part of its startup, it must not persist in sending them after\
    \ the\n   startup sequence.\n   The command code for no-operation is always 0,\
    \ regardless of RAP\n   version.\n"
- title: 2.2.2  Poll
  contents:
  - "2.2.2  Poll\n   A poll command packet requests that the other side transmit either\
    \ a\n   no-operation packet, or some other packet if sent without delay.\n   (i.e.,\
    \ receivers MUST NOT delay a response to a poll by waiting for\n   some other\
    \ packet expected to be queued soon.)\n   The poll command code is always 1, regardless\
    \ of version, and the\n   length is always 8.\n   Each RAP implementation runs\
    \ a timer for each connection, to ensure\n   that if the other system becomes\
    \ unreachable, the connection will be\n   closed or reset.  The timers run at\
    \ each end of the connection are\n   independent; each system is responsible for\
    \ sending polls in time to\n   reset its own timer.\n   The timer MUST be reset\
    \ (restarted) on the receipt of any RAP packet,\n   regardless of whether the\
    \ version or command code is known.\n   In normal operation, if route updates\
    \ are being sent in both\n   directions, polls may not be necessary for long periods\
    \ of time as\n   the timers are continually reset.  When the connection is quiescent,\n\
    \   both timers will typically get reset as a result of the side with the\n  \
    \ shorter timer doing a poll, and then getting a no-operation in\n   response.\
    \  RAP implementations MUST NOT be dependent in any way on\n   the size or existence\
    \ of the remote timer.\n   An implementation that has access to information from\
    \ the TCP layer,\n   such as the results of TCP layer keepalives, MAY use this\
    \ instead of\n   or in addition to a timer.  However, the use of TCP keepalives\
    \ is\n   discouraged, and this procedure does not ensure that the remote RAP\n\
    \   process is alive, only that its TCP is accepting data.  Thus a\n   failure\
    \ mode exists that would not exist for active RAP layer polls.\n   The timer MUST\
    \ be implemented, SHOULD be configurable in at least the\n   range 1 to 10 minutes\
    \ on a per-peer basis, and MAY be infinite\n   (disabled) by explicit configuration.\n\
    \   On UDP, a system (router or non-routing host) may send RAP polls to\n   attempt\
    \ to locate candidate peers or possible gateways.  Such a\n   system must not\
    \ persist in sending polls after its startup sequence,\n   except that a system\
    \ which actually has offered traffic for non-local\n   destinations, and has no\
    \ available gateways, may continue to send\n   periodic polls to attempt to acquire\
    \ a gateway.\n"
- title: 2.2.3  Error
  contents:
  - "2.2.3  Error\n   The error packet is used to report an error, whether fatal,\
    \ serious\n   or informational.  It includes a null terminated text description\
    \ in\n   ISO-10646-UTF-1 of the condition, which may be useful to a human\n  \
    \ administrator, and SHOULD be written to a log file.  (The machine is\n   not\
    \ expected to understand the text.)\n   Errors are actual failures (in the interpretation\
    \ of the receiver) to\n   use the correct syntax and semantics of the RAP protocol\
    \ itself, or\n   \"failure\" of the receiver to implement a version of the protocol.\n\
    \   Other conditions that may require action on the part of the peer\n   (such\
    \ as purging a route) are given their own command codes.\n     0             \
    \      1                   2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |        length                                                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |        RAP version (1)        |       command code (2)        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |        error code (0)  [reserved]                             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |        description                                            |\n    +\
    \                                                               +\n    |     \
    \                  ...                                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The RAP system receiving an Error packet MUST NOT regard it as fatal,\n  \
    \ and close the connection or discard routes.  If the sending system\n   desires\
    \ the condition to be fatal (unrecoverable), its proper action\n   is to close\
    \ the connection.  This requirement is to prevent the kind\n   of failure mode\
    \ demonstrated by hosts that killed off TCP connections\n   on the receipt of\
    \ ICMP Host-Unreachable notifications, even when the\n   condition is transient.\
    \  We do not want to discourage the reporting\n   of errors, in the way that some\
    \ implementations avoided sending ICMP\n   datagrams to deal with overly sensitive\
    \ hosts.\n   An error packet MUST NOT be sent in response to something that is\
    \ (or\n   might be) an error packet itself.  Subsequent versions of RAP should\n\
    \   keep the command code point (2) of the error packet.\n"
- title: 2.2.4  Add Route
  contents:
  - "2.2.4  Add Route\n   The add route command offers a route to the receiving peer.\
    \  As noted\n   later, it MUST be a route actually loaded into the forwarding\n\
    \   database of the offering peer at the time the add route is sent.\n     0 \
    \                  1                   2                   3\n     0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |        length                                                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |        RAP version (1)        |       command code (3)        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |        distance               |     (MBZ)     |     mask      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |        destination network                                    |\n    +\
    \                                                               +\n    |     \
    \               ...                                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |        route identifier                                       |\n    +\
    \                                                               +\n    |     \
    \               ...                                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |        metrics and options    ....                            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The add route command describes a single offered route, with the\n   metrics\
    \ and other options (such as policies) associated with the\n   route.\n   Distance\
    \ is a simple count of the hops to the RAP process (or other\n   routing process)\
    \ that originated the route, incremented every time\n   the route is forwarded.\
    \  Its initial value may be greater than 1,\n   particularily for a route that\
    \ is administratively configured to\n   aggregate routes for a large network or\
    \ AD.  It may also enter the\n   RAP routing domain for the first time with a\
    \ non-zero distance\n   because the route originated in RIP, OSPF, or BGP; if\
    \ so, the\n   distance carried in that protocol is copied into the RAP route.\n\
    \   The mask is a count of the number of bits of prefix ones in the\n   binary\
    \ representation of the network mask.  Non-contiguous masks are\n   not supported\
    \ directly.  (The destination restriction option may be\n   used to give another,\
    \ non-contiguous, mask; the header mask would\n   then describes the number of\
    \ contiguous ones.)\n   The route identifier is a 64 bit value that the IP forwarding\
    \ module\n   on the sending host can use to rapidly identify the route and the\n\
    \   next hop for each incoming datagram.  The host receiving the route\n   places\
    \ this identifier into the forward route ID field of the\n   datagrams being sent\
    \ to this host.\n   The route ID is also used to uniquely identify the route in\
    \ the purge\n   route operation.\n"
- title: 2.2.5  Purge Route
  contents:
  - "2.2.5  Purge Route\n   The purge route command requires that the receiving peer\
    \ delete a\n   route from its database if in use, and requires that it revoke\
    \ that\n   route from any of its peers to whom it has offered the route.  This\n\
    \   command should preferably be sent before the route is deleted from\n   the\
    \ sending peer's forwarding database, but this is not (cannot be)\n   required;\
    \ it should be sent without delay when the route is removed.\n   The command code\
    \ is 4.  The format is the same as add route without\n   any added metrics or\
    \ options.\n   If the route identifier in a purge route command is zero, the command\n\
    \   requires the deletion of all routes to the destination previously\n   offered\
    \ by this peer.\n"
- title: 3.  Attributes of Routes
  contents:
  - "3.  Attributes of Routes\n   There are a rather large number of possible attributes.\n\
    \   Possibilities include both metrics, and other options describing for\n   example\
    \ policy restrictions and alterations of proximity.  Any\n   particular route\
    \ will usefully carry only a few attributes or none at\n   all, particularily\
    \ on an infrastructure backbone.  A reasonable\n   policy for the routers that\
    \ make up a backbone might be to strip all\n   attributes before propagating routes\
    \ (discarding routes that carry\n   attributes with class indications prohibiting\
    \ this), and then adding\n   (for example) an AUP attribute to all routes propagated\
    \ off of the\n   backbone.  A less drastic method would be to simply prefer routes\n\
    \   with no restrictions, but still propagate a route with restrictions\n   if\
    \ no other is available.\n   Most options can occur more than once in a route\
    \ if there is any\n   sensible reason to do so.\n"
- title: 3.1  Metric and Option Format
  contents:
  - "3.1  Metric and Option Format\n   Each metric or option for a route begins with\
    \ a 32 bit header:\n     0                   1                   2           \
    \        3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \   |   length      | C |  format   |           type                |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |        option data                 ...        |   padding     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                   RAP Option/Metric Header Format\n"
- title: 'A description of each field:'
  contents:
  - "A description of each field:\n   length       length of the option or metric\n\
    \   C            option class, see below\n   format       data format\n   type\
    \         option type identifier\n   data         variable length\n"
- title: 3.1.1  Option Class
  contents:
  - "3.1.1  Option Class\n   This field tells implementations what to do with routes\
    \ containing\n   options or metrics they do not understand.  No implementation\
    \ is\n   required to implement (i.e., understand) any given option or metric\n\
    \   by the RAP specification itself, except for the distance metric in\n   the\
    \ RAP header.\n   Classes:\n   0        use, propagate, and include this option\
    \ unmodified\n   1        use, propagate, but do not include this option\n   2\
    \        use this route, but do not propagate it\n   3        discard this route\n\
    \   Note that class 0 is an imperative:  if the route is propagated, the\n   option\
    \ must be included.\n   Class and type are entirely orthogonal, different implementations\n\
    \   might use different classes for the same option or metric.\n"
- title: 3.1.2  Type
  contents:
  - "3.1.2  Type\n   The type code identifies the specific option or metric.  The\
    \ codes\n   are part of the option descriptions following.\n   Type 0 indicates\
    \ a null (no-operation) option.  It should be class\n   zero, but an implementation\
    \ that \"understands\" the null option may\n   decline to propagate it.\n   Note\
    \ that since an implementation may delete an option of class 1 by\n   simply setting\
    \ its type to 0 and forwarding the route description,\n   class 1 does not provide\
    \ any confidentiality of the content of an\n   option.\n"
- title: 3.1.3  Format
  contents:
  - "3.1.3  Format\n   The format field specifies the format of the data included\
    \ after the\n   option header.  Formats:\n   0        none, no data present.\n\
    \   1        one or more 32-bit signed integers\n   2        a character string,\
    \ null terminated\n   3        one or more real numbers\n   4        an octet\
    \ string\n   5        one real, followed by a character string\n   Format is also\
    \ orthogonal to type, but a particular type is usually\n   only reasonably represented\
    \ by one format.  This allows decoding of\n   all option values for logging and\
    \ other troubleshooting, even when\n   the option type is unknown.  (A new unknown\
    \ format will still present\n   a problem.)\n   Format 4, octet string, is to\
    \ be represented in dotted-decimal byte\n   form when printed; it is normally\
    \ an internet address.\n   Format 5 is intended for dimensioned parameters with\
    \ the character\n   string giving the dimension or scale.\n"
- title: 3.2  Metrics and Options
  contents:
  - "3.2  Metrics and Options\n   As much as possible, metrics are kept in the base\
    \ units of bytes and\n   seconds, by analogy to the physics systems of MKS (meter-kilogram-\n\
    \   second) and CGS (centimeter-gram-second) of base units.\n   Bytes aren't the\
    \ real primitive, the bit is.  We are thus using a\n   multiple of 8 that isn't\
    \ part of what one would come to expect from a\n   decimal metric system that\
    \ uses the other prefixes.  However, since K\n   (kilo) is often taken to be 1024,\
    \ and M (mega) to be 1,048,576 (or\n   even 1,024,000) we allow this liberty.\n\
    \   Distance is measured in units also unique to the field.  It is the\n   integer\
    \ number of times that a datagram must be forwarded to reach\n   the destination.\
    \  (Hop count.)\n"
- title: 3.2.1  Distance
  contents:
  - "3.2.1  Distance\n   The Distance metric counts the number of hops on a route;\
    \ this is\n   included in the RAP route command header.\n   The initial distance\
    \ at insertion into the RAP domain by the origin\n   of the route MUST be less\
    \ than or equal to 2z, where z is the number\n   of zero bits in the route mask.\n\
    \   If the origin derives the route from RIP or OSPF, and the distance\n   exceeds\
    \ 2z, the route must not be used.\n   When a router originates a route designed\
    \ to permit aggregation, the\n   distance is usefully set to more than 0; this\
    \ allows simple subset\n   aggregation without propagating small distance changes\
    \ repeatedly as\n   the internal diameter of the described network changes.\n\
    \   For example, for routers designated to announce a default route for\n   an\
    \ AD, with a 24/48 mask, the maximum initial distance is 96.\n"
- title: 3.2.2  Delay
  contents:
  - "3.2.2  Delay\n   The Delay metric (Type = 2) measures the one-way path delay.\
    \  It is\n   usually the sum of delays configured for the gateways and interfaces,\n\
    \   but might also include path segments that are actually measured.\n   Format\
    \ is real (3), with one value.  The units are seconds.\n"
- title: 3.2.3  MTU
  contents:
  - "3.2.3  MTU\n   The MTU metric (Type = 3) measures the minimum value over the\
    \ route\n   of the Maximum Transmission Unit, i.e., the largest IP datagram that\n\
    \   can be routed without resulting in fragmentation.\n   Format is one integer,\
    \ measuring the MTU in bytes.\n"
- title: 3.2.4  Bandwidth
  contents:
  - "3.2.4  Bandwidth\n   The Bandwidth metric (Type = 4) measures the minimum bandwidth\
    \ of the\n   path segments that make up the route.\n   Format is one real, representing\
    \ bandwidth in bytes/second.\n"
- title: 3.2.5  Origin
  contents:
  - "3.2.5  Origin\n   The origin attribute (type = 5) identifies the router that\
    \ originally\n   inserted the route into the RAP domain.  It is one of the IP\n\
    \   addresses of the router, format is 4.\n"
- title: 3.2.6  Target
  contents:
  - "3.2.6  Target\n   The target attribute (type = 6) identifies a host or network\
    \ toward\n   which the route should be propagated, regardless of proximity\n \
    \  filtering that would otherwise occur.  This aids in the establishment\n   of\
    \ tunnels for hosts or subnets \"away from home.\" It can be used to\n   force\
    \ the route to propagate all the way to the home network, or to\n   try to propagate\
    \ a better route to a host that the origin has\n   established a connection (e.g.,\
    \ TCP) with.  Note that a router can\n   distinguish these two cases during proximity\
    \ filtering by comparing\n   the route described with the host or network identified\
    \ by the target\n   option.\n   Format is 4.\n"
- title: 3.2.7  Packet Cost
  contents:
  - "3.2.7  Packet Cost\n   The packet cost metric (type = 7) measures the actual\
    \ cost (to\n   someone) of sending data over the route.  It is probably either\
    \ class\n   3 or 0.  Format is 5.\n   The real number is the cost in currency\
    \ units/byte.  Tariffs set in\n   packets or \"segments\" should be converted\
    \ using the nominal (or\n   actual path) size.  For example, Sprintnet charges\
    \ for DAF\n   connections within its network are US$1.40/Ksegment thus for segments\n\
    \   of 64 bytes, the cost is 0.000021875 USD.\n   The string is the 3 capital\
    \ letter ISO code [ISO4217] for the\n   currency used.  Funds codes and codes\
    \ XAU, XBA, XBB, XBC, XBD, and\n   XXX are not used.\n   If a route already has\
    \ a packet cost in a different currency\n   associated with it, another instance\
    \ of this option should be added.\n   RAP implementations MUST NOT attempt to\
    \ convert the currency units\n   except when actually making a route selection\
    \ decision.  That is, the\n   effects of a currency conversion should never be\
    \ propagated, except\n   for the proper effect of such a selection decision.\n"
- title: 3.2.8  Time Cost
  contents:
  - "3.2.8  Time Cost\n   The time cost metric (type = 8) measures the actual cost\
    \ of holding\n   one or more paths in the route open to send data.  It is probably\n\
    \   either class 3 or 0.  Format is 5.\n   The real number is the cost in currency\
    \ units/second.  For example,\n   Sprintnet charges for international connections\
    \ (to typical\n   destinations) are US$10/hour so the cost is 0.002777778 USD.\n\
    \   The other notes re codes used and conversions in the previous section\n  \
    \ also apply.\n"
- title: 3.2.9  Source Restriction
  contents:
  - "3.2.9  Source Restriction\n   A source restriction option (type 9, format 4,\
    \ class 2 or 3)\n   indicates that a route may only be used by datagrams from\
    \ a\n   particular source or set of sources.  The data consists of a network\n\
    \   or host number, and a mask to qualify it.  If multiple source\n   restriction\
    \ options are included, the restriction is the logical\n   union of the sources\
    \ specified; i.e., any are permitted.\n   Source restrictions must be added to\
    \ routes when the RAP system has\n   security filters set in the IP forwarding\
    \ layer.  This is necessary\n   to prevent datagrams from taking \"better\" routes\
    \ that end in the\n   datagram being silently discarded at the filter.  Note that\
    \ this\n   propagates confidential information about the security configuration,\n\
    \   but only toward the net authorized to use the route if the RAP\n   implementation\
    \ is careful about where it is propagated.\n"
- title: 3.2.10  Destination Restriction
  contents:
  - "3.2.10  Destination Restriction\n   A destination restriction option (type 10,\
    \ format 4, class 3) serves\n   only to provide a non-contiguous mask, the destination\
    \ already having\n   been specified in the command header.  Data is the destination\n\
    \   network and mask.\n"
- title: 3.2.11  Trace
  contents:
  - "3.2.11  Trace\n   Trace (type 11, format 4, class 0) provides an indication that\
    \ the\n   route has propagated through a particular system.  This can be used\n\
    \   for loop detection, as well as various methods of troubleshooting.\n   The\
    \ data is one internet address, one of the addresses of the system.\n   If an\
    \ arriving route already carries a trace identifying this system,\n   and is not\
    \ an update, it is discarded.  If it is an update, the route\n   is purged.\n\
    \   Trace SHOULD NOT be simply added to every route traversing a system.\n   Rather,\
    \ it should be added (if being used for loop detection) when\n   there is a suspicion\
    \ that a loop has formed.\n   When the distance to a destination has increased\
    \ twice in a row in a\n   fairly short period of time, and the number of trace\
    \ options present\n   in the route did not increase as a result of the last update,\
    \ the RAP\n   process should add a trace option identifying itself to the route.\n\
    \   Effectively, when a loop forms, one router will select itself to be a\n  \
    \ tracer, adding itself and breaking the loop after one more turn.  If\n   that\
    \ fails for some reason, another router will add its trace.  Each\n   router thus\
    \ depends in the end only on its own trace and will break\n   the loop, even if\
    \ the other routers are using other methods, or\n   simply counting-out the route.\n"
- title: 3.2.12  AUP
  contents:
  - "3.2.12  AUP\n   The AUP (Acceptable Use Policy) option (type 12, format 2, class\n\
    \   any), tags a route as being useable only according to the policy of a\n  \
    \ network.  This may be used to avoid traversal of the net by (for\n   example)\
    \ commercial traffic, or to prevent un-intentional use of an\n   organization's\
    \ internal net.  (It does not provide a security barrier\n   in the sense of forwarding\
    \ filters, but does provide cooperative\n   exchange of information on the useability\
    \ of a net.)\n   The data is a domain name, probably the name of the network,\
    \ although\n   it may be the name of another organization.  E.g., the routers\
    \ that\n   are subject to the NSF AUP might add NSF.NET as the descriptor of\n\
    \   that policy.\n"
- title: 3.2.13  Public
  contents:
  - "3.2.13  Public\n   Public (type 13, format 0, class 2 or 3) marks the route as\n\
    \   consisting in part of a public broadcast medium.  Examples of a\n   public\
    \ medium are direct radio broadcast or a multi-drop cable in\n   which other receivers,\
    \ not associated with the destination may read\n   the traffic.  I.e., a TV cable\
    \ is a public medium, a LAN within an\n   organization is not, even if it can\
    \ be easily wiretapped.\n   This is intended for use by cable TV providers to\
    \ identify routes\n   that should not be used for private communications, in spite\
    \ of the\n   attractively high bandwidth being offered.\n"
- title: 4.  Procedure
  contents:
  - "4.  Procedure\n   Routing information arrives in the RAP process from other peers,\
    \ from\n   (local) static route and interface configuration, and from other\n\
    \   protocols (e.g., RIP).  The RAP process filters out routes that are\n   of\
    \ no interest (too detailed or too \"far away\" in the topology) and\n   builds\
    \ an internal database of available routes.\n   From this database, it selects\
    \ routes that are to be active and loads\n   them into the IP forwarding database.\n\
    \   It then advertises those routes to its peers, at a greater distance.\n   -------------------------------------------------------------------\n\
    \           [incoming routes]\n                   |\n                   v\n  \
    \         [proximity filtering/aggregation]       [static routes]\n          \
    \         |                                  |\n                   v         \
    \                         v\n           [route database]  --->  [selected active\
    \ routes]\n                   ^                       |\n                   |\
    \                       v\n           [RIP, etc. routes]      [output filtering]\n\
    \                                           |\n                              \
    \             v\n                                   [routes advertised]\n   -------------------------------------------------------------------\n"
- title: 4.1  Receiver filtering
  contents:
  - "4.1  Receiver filtering\n   The first step is to filter out offered routes that\
    \ are too \"far\n   away\" or too specific.  The filter consists of a maximum\
    \ distance at\n   which a route is considered usable for each possible (contiguous)\n\
    \   mask.\n   Routers that need universal connectivity must either pass through\
    \ the\n   filter all routes regardless of distance (short of \"infinity\"), and\n\
    \   use aggregation to reduce them, or have a default route to a router\n   that\
    \ does this.\n   The filter may be adjusted dynamically to fit limited resources,\
    \ but\n   if the filter is opened, i.e., made less restrictive, there may be\n\
    \   routes that have already been offered and discarded that will never\n   become\
    \ available.\n"
- title: 4.2  Update of metrics and options
  contents:
  - "4.2  Update of metrics and options\n   The process then updates any metrics present\
    \ on the route to reflect\n   the path to the RAP peer.  MTU and bandwidth are\
    \ minimized, delay and\n   cost are added in.  Distance is incremented.  Any unknown\
    \ options\n   cause class-dependent processing:  discarding the option (class\
    \ 2) or\n   route (3), or marking the route as non-propagatable (1).\n   Policy\
    \ options that are known may cause the route to be discarded at\n   this stage.\n"
- title: 4.3  Aggregation
  contents:
  - "4.3  Aggregation\n   The next step is to aggregate routes that are subsetted\
    \ by other\n   routes through the same peer.  This should not be done automatically\n\
    \   in every possible case.  The more information that is propagated, the\n  \
    \ more effective the use of forward route identifiers is likely to be,\n   particularily\
    \ in the case of aggregating into a default route.\n   In general, a route can\
    \ be included in an aggregate, and not\n   propagated further, if it is through\
    \ the same peer (next hop) and has\n   a smaller distance metric than the containing\
    \ route.  (Thus datagrams\n   will always travel \"downhill\" as they take more\
    \ specific routes.)\n   The usual case of aggregation is that routes derived from\
    \ interface\n   configurations on the routers from which they originated are subsumed\n\
    \   into routes offered by routers explicitly configured to route for an\n   entire\
    \ network, area, or AD.  If the larger area becomes partitioned,\n   unaggregatable\
    \ routes will appear (as routes outside the area become\n   the shortest distance\
    \ routes) and traffic will flow around the\n   partition.\n   Attributes of routes,\
    \ particularily policy options, may prevent\n   aggregation and may result in\
    \ routes simply being discarded.\n   Some information about aggregation also needs\
    \ to be represented in\n   the forwarding database, if the route is made active:\
    \  the router\n   will need to make a decision as to which forward route identifier\
    \ to\n   use for each datagram arriving on the active route.\n"
- title: 4.4  Active route selection
  contents:
  - "4.4  Active route selection\n   The router selects those routes to be entered\
    \ into the IP forwarding\n   database and actively used to forward datagrams from\
    \ the set of\n   routes after aggregation, combined with routes derived from other\n\
    \   protocols such as RIP.  This selection may be made on any combination\n  \
    \ of attributes and options desired by local policy.\n"
- title: 4.5  Transmitter filtering
  contents:
  - "4.5  Transmitter filtering\n   Finally, the RAP process must decide which routes\
    \ to offer to its\n   peers.  These must be a subset of the active routes, and\
    \ may in turn\n   be a selected subset for each peer.  Arbitrary local policies\
    \ may be\n   used in deciding whether or not to offer any particular route to\
    \ a\n   given peer.\n   However, the transmitter must ensure that any datagram\
    \ filters are\n   represented in the offered route, so that the peer (and its\
    \ peers)\n   will not route into a black hole.\n"
- title: 4.6  Last resort loop prevention
  contents:
  - "4.6  Last resort loop prevention\n   RAP is designed to support many different\
    \ kinds of routing selection\n   algorithms, and allow them to interact to varying\
    \ extents.  Routes\n   can be shared among administrations, and between systems\
    \ managed with\n   more or less sophistication.\n   This leaves one absolute requirement:\
    \  routing loops must be self-\n   healing, regardless of the algorithm used on\
    \ each host.  There are\n   two caveats:\n     1.  A loop will not fix itself\
    \ in the presence of an error that\n         continually recurs (thus re-generating\
    \ the loop)\n     2.  The last resort algorithm does not provide rapid breaking\
    \ of\n         loops, only eventual breaking of them even in the absence of\n\
    \         any intervention by (human) intelligence.\n   The algorithm relies on\
    \ the distance in the RAP route header.  This\n   count must be updated (i.e.,\
    \ incremented by one) at each router\n   forwarding the route.\n   Routers must\
    \ also impose some limit on the number of hops permitted\n   in incoming routes,\
    \ discarding any routes that exceed the limit.\n   This limit is \"infinity\"\
    \ in the classic algorithm.  In RIP, infinity\n   is 15, much too low for general\
    \ inter-domain routing.\n   In RAP, infinity is defined as 2z + i, where z is\
    \ the number of zero\n   bits in the mask (as described previously) and i is a\
    \ small number\n   which MUST be configurable.\n   Note that RAP depends on the\
    \ last resort algorithm, \"counting to\n   infinity,\" much less than predecessors\
    \ such as RIP.  Routes in the\n   RAP domain will usually be purged from the net\
    \ as the purge route\n   command is flooded without the delays typical of periodic\
    \ broadcast\n   algorithms.  Only in some cases will loops form, and they will\
    \ be\n   counted out as fast as the routing processes can exchange the\n   information.\n"
- title: 5.  Conclusion
  contents:
  - "5.  Conclusion\n   Unlike prior routing protocols, RAP is designed to solve the\
    \ entire\n   problem, from hands-off autoconfiguration of LAN networks, to\n \
    \  implementing the most complex policies of international carriers.  It\n   provides\
    \ a scaleable solution to carry the Internet forward to a\n   future in which\
    \ essentially all users of data transmission use IP as\n   the fabric of their\
    \ networks.\n"
- title: '6.  Appendix:  Real Number Representation'
  contents:
  - "6.  Appendix:  Real Number Representation\n   Real numbers are represented by\
    \ a one byte exponent, e, in excess-128\n   notation, and a fraction, f, in excess-8388608\
    \ notation, with the\n   radix point at the right.  (I.e., the \"fraction\" is\
    \ actually an\n   integer.)\n   e is thus in the range 0 to 255, representing\
    \ exponents (powers of 2)\n   in the range 2^-128 to 2^127.\n   f is in the range\
    \ 0 to 16777215, representing numbers from -8388608\n   to 8388607\n   The value\
    \ is (f-8338608) x 2^(e-128)\n   The real number is not necessarily normalized,\
    \ but a normalized\n   representation will, of course, provide more accuracy for\
    \ numbers not\n   exactly representable.\n   Example code, in C:\n   #include\
    \ <math.h>\n   typedef struct {\n           unsigned e : 8;\n           unsigned\
    \ f : 24;\n           } real;\n   double a;          /* input value */\n   real\
    \ r;\n   double b;          /* output value */\n   double d;\n   int e32;\n  \
    \ /* convert to real: */\n   d = frexp(a, &e32);\n   r.e = e32+105;\n   r.f =\
    \ (int)(d*8388608.0) + 8388608;\n   /* convert back: */\n   b = ldexp((double)r.f\
    \ - 8388608.0, (int)r.e - 128);\n"
- title: 7.  References
  contents:
  - "7.  References\n   [ISO3166]   International Organization for Standardization.\
    \  Codes\n               for the Representation of Names of Countries.  ISO\n\
    \               3166, ISO, 1988.\n   [ISO4217]   International Organization for\
    \ Standardization.  Codes\n               for the representation of currencies\
    \ and funds.  ISO\n               4217, ISO, 1981.\n   [RFC791]    Postel, J.,\
    \ \"Internet Protocol - DARPA Internet Program\n               Protocol Specification\"\
    , STD 5, RFC 791, DARPA,\n               September 1981.\n   [RFC1058]   Hedrick,\
    \ C., \"Routing Information Protocol\", STD 34,\n               RFC 1058, Rutgers\
    \ University, June 1988.\n   [RFC1247]   Moy, J., \"OSPF Version 2\", RFC 1247,\
    \ Proteon, Inc.,\n               July 1991.\n   [RFC1287]   Clark, D., Chapin,\
    \ L., Cerf, V., Braden, R., and\n               R. Hobby, \"Towards the Future\
    \ Internet Architecture\",\n               RFC 1287, MIT, BBN, CNRI, ISI, UCDavis,\
    \ December 1991.\n   [RFC1338]   Fuller, V., Li, T., Yu, J., and K. Varadhan,\n\
    \               \"Supernetting: an Address Assignment and Aggregation\n      \
    \         Strategy\", RFC 1338, BARRNet, cicso, Merit, OARnet,\n             \
    \  June 1992.\n   [RFC1475]   Ullmann, R., \"TP/IX: The Next Internet\", RFC 1475,\n\
    \               Process Software Corporation, June 1993.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Security issues are discussed in sections 3.2.9\
    \ and 3.2.12.\n"
- title: 9.  Author's Address
  contents:
  - "9.  Author's Address\n   Robert Ullmann\n   Process Software Corporation\n  \
    \ 959 Concord Street\n   Framingham, MA 01701\n   USA\n   Phone: +1 508 879 6994\
    \ x226\n   Email: Ariel@Process.COM\n"
