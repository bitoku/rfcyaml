- title: __initial_text__
  contents:
  - "               DATA DESCRIPTIVE LANGUAGE FOR SHARED DATA\n                  \
    \             A. Mullery\n                    Thomas J. Watson Research Center\n\
    \                         Yorktown Heights, N.Y.\n                           \
    \  July 19, 1971\nIntroduction\n    A primary consequence of the use of networks\
    \ of computers is the\ndemand for more efficient shared use of data.\n    Many\
    \ of the impedements to easy shared data follow from the many\ndiverse ways of\
    \ representing and making reference to the same data.\nAlmost all of these problems\
    \ have been known before data was shared\nthrough computer networks, but the network\
    \ facility has simply\nemphasized the problems.\n    For convenience of discussion,\
    \ representation differences will be\nclassified in three categories. The first\
    \ category is one of very local\nrepresentation - the bit patterns for the character\
    \ set, for fixed point\nand floating point numbers. These differences are usually\
    \ imposed by\ndifferences in CPU's and storage devices. Translations from one\n\
    representation to another at another at this level can usually be made a\nunit\
    \ at a time (e.g. computer word by computer word) with the most\nserious problems\
    \ occurring when there are some values in one\nrepresentation scheme which have\
    \ no corresponding meaning in the other\nrepresentation scheme, as, for expamble,\
    \ when trying to translate\neight-bit bytes to six-bit bytes.\n    A second category\
    \ of differences has to do with the representation\nof collections of data, e.g.,\
    \ their size, ordering and location.\nthat data collections may have - for example,\
    \ files with indexes, fields\nwith internal pointers and cross references, and\
    \ collections of files\nsuch as partitioned data sets and generation data sets\
    \ in OS 360.\n    The approach to coping with these problems within our project\
    \ of\nNetwork/440 has been to work on the development of a descriptive\nlanguage\
    \ which would permit the specification of those aspects of data\nrepresentation\
    \ which would be subject to transformation in moving data\nabout in a network.\
    \ Then, the network data managment system would be\nable to refer to the descriptions\
    \ as needed in the data management\nfunction. For example, to a large extent,\
    \ one could supply two\ndescriptions to the data manager, one wich indicates how\
    \ data is now\nrepresented, and one which indicates how a copy of it should look,\
    \ and\nthe data managment systems could invoke the necessary transformations to\n\
    make the proper copy.\n    This approach to specifying data transformation contrasts\
    \ somewhat\nwith systems, such as the RAND Form Machine, which provide a formalism\n\
    for specifying the particular translation alogrithms for changing form\none form\
    \ to another. the descriptor-to descriptor approach seems to\nsimplyfy the programming\
    \ burden when creating new field formats. Neither\nmethod of specifying translations\
    \ precludes the use of a Network\nStandard Reprsentation.\nStructure\n    The\
    \ descriptive language assumes that data may have an inherent\nstructure independent\
    \ of other groupings, such as name groupings,\nlocking groupings, etc., imposed\
    \ on it. A data structure description\nconsists of groupings of established data\
    \ value type codes. The list of\nestablished data value types should be sufficient,\
    \ through appropriate\ngroupings, to describe any hierarchical structure of data.\n\
    \    The data type identifies how the data value is to be interpreted. A\nlist\
    \ of data type codes is given below. This list must be able identify\neach data\
    \ type that may exist in a data set in any machine in the\nnetwork. However, for\
    \ data sets that contain only data types of the\nmachine on which it is stored,\
    \ it is not necessary that a different code\nbe defined for different forms of\
    \ any single type that may exist among\ndifferent machines. The data type specified\
    \ in the description along\nwith the identification of the machine at which the\
    \ data is stored is\nsufficient to completely describe all such forms of the data\
    \ types. A\ntentative list of machine dependent type codes, compiled by\n    \
    \      F    floating point\n          I    fixed\n          D    double precision\
    \ floating point\n          C    character string\n          X    complex\n  \
    \        P    packed decimal\n          L    logical\n    It is desirable to be\
    \ able to construct data sets that contain\neither data types not allowable at\
    \ the machine at which the data set\nis stored or, possibly, even types that say\
    \ not exist at any machine\nin the network. For example, one may wish to store\
    \ eight bit data on a\nsix bit machine.  This may, in principle at least, be done\
    \ by defining\na logical data set containing eight bit bytes in terms of a real\
    \ data\nset containing six bit characters. For this, however, data value type\n\
    descriptors have to be defined that are machine independent. The basic\nmachine\
    \ independent data type is as follows:\n          B    bit.\nIt is not clear at\
    \ this time that any others are necessary since others\ncan be built from this\
    \ one. For convenience, other standard machine\nindependent data types may later\
    \ be defined.\n    Two other machine independent types are useful in describing\n\
    structures. These are:\n          Z    null\n          O    omit.\nthe null type\
    \ indicates that there is no data corresponding to this\nitem: however, the item\
    \ should be counted as existing in the structure.\nThe omit type indicates just\
    \ the opposite: there is data that should not\nbe counted as an item, it should\
    \ be ignored.\neither a data value as described by one of the data value type\
    \ codes, or\na grouping. The list consists of these elements, separated by commas\
    \ and\nindicates that the elements appear in the grouping in the order\nindicated.\
    \ For example, the description:\n          ((C,C),(F,F,I))\ndescribes a data collection\
    \ consisting of two subgroupings, the first\nsubgrouping consisting of two data\
    \ values of type 'C', and the second\nsubgrouping consisting of two data values\
    \ of type 'F' followed by a data\nvalue of type 'I'. the structure of this data\
    \ collection is thus a three\nlevel tree which may be shown in two dimensions\
    \ as follows:\n          ( )\n           |\n          ( )---( )\n           |\
    \     |\n           C-C   F-F-I\nProperties\n    Other properties of data beyond\
    \ that of the structures and\ncomposition of the data set have also to be described.\
    \  These may be\nassigned to items of the data collection, where an item may be\
    \ defined\nas an individual data value, or a grouping of these, by modifying the\n\
    item description with the specification of the preperties that apply to\nit. The\
    \ notation that will be used will be an infix notation of the\nform:\n       \
    \  operand operator |[extent]|\nwhere the operator indicates the property type,\
    \ the operand the property\nvalue and the optional extent the numer of items to\
    \ which the property\napplies. Normally the property is assumed to apply to just\
    \ the following\nitem in the description. If the property is to apply to more\
    \ than just\nthe following item description, this is indicated by specifying a\
    \ number\nas the extent, this number indicating how many of the following item\n\
    definitions at the same level the property is to apply to.\n    Type - The structure\
    \ description of the data set is a constitutional\nor syntactic description of\
    \ the data set. In some cases it is necessary\nto give a discription of the use\
    \ or meaning of an element. For example,\nin some complex data structures, the\
    \ linkages of the structures may be\nrepresented as data values in the data set.\
    \ Thus, though the more\nthat represent the linkages, and their meaning, must\
    \ somehow he\nrepresented in the data description in order for the complex data\n\
    structure to be truly described. As another example, one may wish\nascribe to\
    \ some level of the data structure the type 'record' so that\nthe data set can\
    \ be used by some system which uses the concept 'record'\nin accessing the data.\n\
    \    What an initial set of such types should be has not been deicded.\n    Names\
    \ - Items of a data structure can be given names by modifying\nthe items description\
    \ with a notation of the form:\n          name n |[extent]|.\nDepending on the\
    \ context of its use, the name can refer to the\ndescription itself or to the\
    \ data pertaining to the named part of the\ndescription. The name is assumed to\
    \ be unique only within the scope of\nextent of the next higher encompassing name\
    \ unless otherwise indicated\nby giving another encompassing name as the scope.\
    \ This may be the name\nof the whole data set or description, for example. The\
    \ scope of a name\nis specified by preceding the inner name by the outer name\
    \ or names,\nseparated by dots. The name:\n          A,BETA\nindicates that the\
    \ scope of the name BETA is A.\n    The name applies to just the following item\
    \ in the description\nunless otherwise indicated by including the extent parameter,\
    \ For\nexampel, the description:\n          (An(C,C), (Bn[ 2 ]F,Cn[ 2 ]F,I))\n\
    indicates that name A is given to the item that contains two data values\nof type\
    \ 'C', the name B to two data values, both of type 'F', and the\nname C to the\
    \ last two data values, one of type 'F', and the other of\ntype 'I'. Notice that\
    \ with this notation, extents can overlap. For\nexample, in the above description,\
    \ the extent of name B overlapped that\nof name C.\n    In a description, the\
    \ same name can be applied to more than one item\ndefinition either by use of\
    \ the extent parameter, or by actually\nspecifying the name at each item to be\
    \ included in the extent of the\nname. If a name is multiply-applied within the\
    \ same scope, then the name\nis assumed to apply to the aggregate of the items\
    \ to which it has been\ngiven. Thus is possible to apply names to aggregates of\
    \ items that are\n    Lock - During the course of processing data, it may be necessary\
    \ to\nlock out use of some portion of data to other users. Seqmentation of a\n\
    data set into units for locking purposes may be indicated by the\nnotation:\n\
    \          k|[extent]|.\nWhether or not the data is locked and the type of lock\
    \ applied (for\nexample, write protect or read/write protect) is specified at\
    \ the time\nthe data is used.\n    Authorization - Authorization for a user to\
    \ access data may be\ngoverned by some access code assigned to the data.  This\
    \ access code can\nbe specified in the description by modifying the desired elements\
    \ of the\ndescription with an indication of the code. The notation is:\n     \
    \     code a |[extent ]|\nControl.\n    Two modifiers are provided which govern\
    \ the existence of items in\nthe definition. The first is the repetition modifier:\n\
    \          factor r |[extent ]|.\nThis causes the following item definition or\
    \ item definitions (if the\nextent indicates more than one) to be repeated. Thus\
    \ the description\n          (3rC)\nis equivalent to the description\n       \
    \   (C,C,C).\nThe other control modifier is the condition modifier:\n        \
    \  condition c |[extent ]|.\nIf the condition specified is not true, then the\
    \ following item\ndefinition is ignored. The condition is specified by a Boolean\n\
    expression.\n    Since several modifiers may apply to an item definition, there\
    \ is a\nproblem concerning the relationship among them. For example, if a\nrepetition\
    \ modifier and a conditional modifier apply to an item, does\nthe condition apply\
    \ to all the repeated items, or only to the first,\nevaluated. Two possible conventions\
    \ come to mind. One says that\nrepetitions are expanded first, then properties\
    \ applied, and finally\nconditions applied to the resulting expanded item definitions,\n\
    independent of the order in which the modifiers were specified in the\ndescription.\
    \ Thus the description\n          (A=3c [ 4 ]4rF,I)\nis equivalent to\n      \
    \    (4rA=3c[ 4 ]F,T),\nand if the condition is true, is equivalent to\n     \
    \     (F,F,F,F,I),\nor, if the condition is not true, is equivalent to\n     \
    \     (T).\nThe other convention is that the modifiers are evaluated in the order\
    \ in\nwhich they appear in the description, perhaps.  in reverse order - the\n\
    modifier immediately preceding an item definition is evaluated first,\nthen the\
    \ one next preceding, etc. This gives more flexibility of meaning\nto the mulitple\
    \ modifiers. For example, the descriptions\n          (A=3c3rC)\nand\n       \
    \   (3rA=3cC)\nare not equivalent.  In the first, only the first of the three\n\
    repetitions is affected by the condition whereas in the second, ll three\nrepetitions\
    \ are affected. Since this second convention is more flexible,\nit shall be the\
    \ one assumed. This convention allows, for example, the\nrepetition modifier to\
    \ the applied to a named item as shown:\n          (3rAnC).\nThe name A applies\
    \ to the three items (in effect, the name A is applied\nthree times). This facility\
    \ allows a name to be applied to a vertical\ncolumn in a two dimensioned array\
    \ by, for example, the description:\n          (3r[ 3 ]C,AnC,C)\nReference\n \
    \   Named descriptions, or parts of descriptions, that have already been\ndefined\
    \ may be inserted into a description using the notation:\n          $ specification.\n\
    Is a description, the reference is used as an item definition of a\nstring fo\
    \ item definitions. The item definitions used are those defined\nby the name given.\
    \ Names that apply to the named item or items as a\nwhole in the description in\
    \ which it is defined are ignored by the\ndescription at which is referred. However,\
    \ names that apply to parts of\nthe named item are carried over to the description\
    \ at which it is\nreferred. For example the description\n          (An(F,F),I,$A)\n\
    is equivalent to\n          (An(F,F),T,(F,F)).\nNotice that the name \"A\" was\
    \ not carried over to where the description\nwas referenced since it applied to\
    \ the referred-to item or items as a\nwhole.\n    Parts of a data set or description\
    \ must be able to be specified for\nuse in a reference. This specification is\
    \ in terms of the structure of\nthe data set or description. The specification\
    \ has the form of a data\nset name, or description name, followed by modifiers\
    \ which particularize\nto specifications, to the part desired. The four types\
    \ of modifiers are\nfor going down a level, going up a level, going frontwards\
    \ along a\nlevel, and going backwards.\n    Down - To go down a level from that\
    \ previously specified, the\nmodifier has the following form:\n         . item\n\
    or\n         . (item |,extent| |,=value|).\nHaving gone down a level, the item\
    \ indicates which particular item at\nthis level is the first (or only one) desired.\
    \ This may be a number or a\nthe first item that meets the conditions that may\
    \ he get on it or\nsubitems in following modifiers.) The items selected may he\
    \ conditioned\nby their contents. If a value is given, then only those items with\
    \ the\nvalue indicated are selected. For example,\n          A.1.1\nspecifies\
    \ the first field of the first record of data set A,\n          A.(1*).1\nspecified\
    \ the first field of all the records of A,\n          A.1.(1,2)\nspecifies the\
    \ first two fields of the first record of data\nset A,\n          A.(1,*).(1,=\"\
    768174\")\nspecified only the first fields of all the records of A that\nhave\
    \ value \"768174\", and\n          A.(1,!)-(1,=\"768174\")\nfinds the first field\
    \ that has value \"768174\".\n    Up- To go up a level from that previously specified,\n\
    the modifier has the following form:\n          ' item\nor\n          ' (item\
    \ |,extent| |,=value|).\nGoing up a level specifies the item up one level that\
    \ contains the item\npreviously specified. The item indicates which particular\
    \ item at this\nlevel is desired where the containing item is considered the first.\
    \ For\nexample,\n          A.(1,!).(1,=768174\")'1\n    Forward. - To go forward\
    \ on the same level as that previously\nspecified, the modifier is as follows:\n\
    \          + item\nor\n          + (item |,extent| |,=value|).\nThis modifier\
    \ is useful when an item following the one which has a\ncertain value in a field\
    \ is desired. It may also be used when the data\nset name is really a pointer,\
    \ into the data set, which has beet set\npreviously. Pointers may or may net be\
    \ described in a section elsewhere.\nBackward. - To go backward on the same level\
    \ as that previously\nspecified, the modifier has the following form:\n      \
    \    - item\nor\n          - (item |,extent| |,=value|).\nAn example of the use\
    \ of this modifier is when an item preceding the one\nwhich has a certain value\
    \ in a field is desired. This might be\nspecified:\n          A.(1,!).(2,=\"768174\"\
    )'1-1\n       [ This RFC was put into machine readable form for entry ]\n    \
    \   [ into the online RFC archives Gottfried Janik   9/97   ]\n"
