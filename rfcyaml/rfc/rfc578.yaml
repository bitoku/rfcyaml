- title: __initial_text__
  contents:
  - "             USING MIT-MATHLAB MACSYMA FROM MIT-DMS MUDDLE\n              An\
    \ Experiment in Automated Resource Sharing\nI.  INTRODUCTION\n   This paper describes\
    \ an experiment in non-trivial automated resource\n   sharing between dissimilar\
    \ systems.  The goal of the experiment was\n   to interface the MUDDLE system\
    \ at MIT-DMS (Host 70.) to the MACSYMA\n   system at MIT-Mathlab (Host 198.),\
    \ in such a manner that the MUDDLE-\n   user at MIT-DMS is not required to know\
    \ anything about the ARPANET,\n   Mathlab, or even MACSYMA.  In fact, the user\
    \ need not be aware that\n   part of the computation is performed by MACSYMA on\
    \ the Mathlab\n   computer.\n   This experiment differs from the MATHLAB-UCSB/OLS\
    \ experiment (ref.\n   NWG/RFC 525, NIC 17161 \"MIT-MATHLAB Meets UCSB-OLS\" by\
    \ Parrish and\n   Pickens) in several important respects.  First, the use of the\
    \ remote\n   network resource is *completely automated*.  The human user does\n\
    \   nothing more than use a function in MUDDLE such as \"INTEGRATE\" which\n \
    \  requires the remote MACSYMA resource for computation.  The program\n   performs\
    \ all the required tasks of connecting to Mathlab, log in, and\n   using MACSYMA.\
    \  (In the UCSB-OLS experiment, the user had to manually\n   connect to Mathlab,\
    \ login, use MACSYMA, type the input in a form\n   suitable for MACSYMA, save\
    \ the results in a file at Mathlab,\n   disconnect from Mathlab, start a retrieval\
    \ job at UCSB to retrieve\n   the \"saved\" results, and finally submit the results\
    \ to a local\n   program.)  Second, the use of the remote resource is *completely\n\
    \   integrated* into the local MUDDLE system.  The user can specify the\n   computations\
    \ in a form that MUDDLE understands.  The resource-sharing\n   program (whose\
    \ existence the user need not be aware of) does the\n   translation from the MUDDLE\
    \ \"prefix\" form to the MACSYMA \"infix\" form\n   on input, and vice-versa on\
    \ output.  This ability allows the MACSYMA\n   resources to be completely integrated\
    \ into MUDDLE to the extent that\n   parts of the same computation can be performed\
    \ by MACSYMA and others\n   by MUDDLE.\nII.  THE MACSYMA AND MUDDLE RESOURCES\n\
    \   Before proceeding to describe the resource sharing facility a\n   description\
    \ of the two resources, MACSYMA and MUDDLE, is in order.\n   The MACSYMA system\
    \ at Mathlab is a powerful resource for symbolic\n   manipulation of algebraic\
    \ functions.  It can, among other things,\n   perform symbolic integration and\
    \ differentiation, expand series,\n   perform Laplace and inverse-Laplace transforms,\
    \ solve equations and\n   systems of equations, and simplify rational functions.\
    \  (A\n   description of MACSYMA's capabilities is given in \"The MACSYMA Users'\n\
    \   Manual\" available from the MIT-Mathlab group at Project MAC.)\n   The MUDDLE\
    \ system provides a general-purpose environment suitable for\n   automatic programming,\
    \ graphics, data management, \"networking\", and\n   mathematical computations.\
    \  The MUDDLE language represents a powerful\n   extension of the list processing\
    \ language LISP in the area of data\n   types such as strings, vectors, uniform\
    \ vectors, and user definable\n   types.  (MUDDLE is described in some detail\
    \ in \"The MUDDLE Primer\"\n   (SYS.11.01) by Greg Pfister, available from the\
    \ Programming\n   Technology Division at Project MAC.)\n   MUDDLE has extensive\
    \ graphical and numerical computation facilities.\n   The user can display graphs\
    \ on ARDS and IMLAC type consoles, and on\n   the Evans and Sutherland (E&S) display\
    \ system.  The MUDDLE console\n   graphics provide a facility to view graphical\
    \ representation of\n   functions with overlay capability and automatic scaling\
    \ that can be\n   controlled by the user.  The E&S provides the user with a versatile\n\
    \   tool for studying the dynamic characteristics of graphs, curved\n   surfaces,\
    \ and other three-dimensional objects.  The combination of\n   MACSYMA, MUDDLE,\
    \ and the E&S graphics capabilities represents a very\n   powerful resource for\
    \ problem solving that is integrated and made\n   easily usable by the resource\
    \ sharing facility.\nIII.  THE AUTOMATED RESOURCE-SHARING FACILITY\n   The resource-sharing\
    \ facility described herein uses the most easily\n   accessible communication\
    \ path to MACSYMA, the TELNET connection to\n   the logger service on socket 1.\
    \  No modifications were made to\n   MACSYMA, nor were any special programs created\
    \ on the Mathlab\n   computer.  The entire task of resource sharing is performed\
    \ by\n   programs in MUDDLE.  Let us say on the outset that we are not\n   advocating\
    \ this mode of usage for automated resource sharing.  A\n   resource-sharing protocol\
    \ that allows convenient use of remote\n   resources via programs is a far more\
    \ reliable and efficient way, but\n   that requires work on the part of server\
    \ sites.  The existing\n   protocols and systems FTP, RJE, RSEXEC, and the Datacomputer\
    \ cater to\n   a limited subset of easily managed resources.  We register here\
    \ our\n   desire for uniformity (which alas is lacking) in the current systems,\n\
    \   and work along the direction of general-purpose resource sharing.  In\n  \
    \ the absence of a general resource-sharing protocol and a MACSYMA\n   server\
    \ to go along with it at Mathlab, the TELNET connection is the\n   best a user\
    \ can do.\n   The resource sharing facility comprises of several independent but\n\
    \   integrated parts.  These are:\n   1) Connecting to Mathlab, login, and invoking\
    \ MACSYMA.\n   2) Conversion of MUDDLE's prefix to MACSYMA's infix form.\n   3)\
    \ Generation of MACSYMA input.\n   4) Interpreting MACSYMA's results including\
    \ errors and comments.\n   5) MACSYMA infix to MUDDLE prefix conversion.\n   6)\
    \ Plotting graphs for the functions.\n   7) Allowing human intervention if desired.\n\
    \   8) Disconnect from MACSYMA.\n   The user (assuming that he has loaded the\
    \ necessary programs in\n   MUDDLE) to integrate the function \"3*X\" has only\
    \ to type:\n                        <INTEGRATE '<* .X 3>>$\n   where '$' represents\
    \ the ASCII character <ESC> (or <ALT-MODE>).\n   MUDDLE will then return the following\
    \ result:\n                        </ <* 3 <^ .X 2>> 2>\n   Alternatively, if\
    \ the user wishes to use the infix form, he can type:\n                      \
    \  <INTEGRATE \"3*X\">$\n   and the corresponding answer returned by MUDDLE would\
    \ be\n                        \"3*X^2/2\"\n   The following sequence of events\
    \ takes place when integrate (or any\n   other function that uses MACSYMA) is\
    \ used.  If the user isn't already\n   communicating with a MACSYMA (the program\
    \ keeps track of the\n   connection), a connection is established to MIT-Mathlab,\
    \ the user is\n   logged in (automatically by program, using the user's\n   identification),\
    \ and a MACSYMA is initiated.  A prefix to infix\n   conversion is performed and\
    \ the following input is sent to MACSYMA\n   (using the above example):\n    \
    \                    STRING (INTEGRATE (3*X,X));\n   The program then interprets\
    \ MACSYMA's output recognizing error\n   responses and comments and extracts the\
    \ result if no error is\n   encountered.  The result which is in infix form is\
    \ then converted to\n   the prefix form which is returned by the MUDDLE function\
    \ INTEGRATE.\n   The INTEGRATE function takes an optional argument, the variable\
    \ with\n   respect to which the integration is be performed.  The syntax for the\n\
    \   function is:\n                        <INTEGRATE {EXPR} [\"{VAR}\"]>\n   where\
    \ EXPR is any expression of the type STRING or QUOTED FORM.  The\n   optional\
    \ argument (in square brackets) VAR must be of the type STRING\n   (enclosed by\
    \ double-quotes).  The syntax of other functions is:\n                       \
    \          <SIMPLIFY {EXPR}>\n                         <DIFF {EXPR} [\"{VAR}\"\
    \ \"{TIMES}\"]>\n                    <EXPAND {EXPR} [\"{MAXPOSEX}\" \"{MAXNEGEX}\"\
    ]>\n   where TIMES is the number of times the EXPR is to be differentiated\n \
    \  and MAXPOSEX and MAXNEGEX control the maximum positive and negative\n   integer\
    \ exponent to be used in expansion.  The default value for VAR\n   is \"X\", for\
    \ times is \"1\", and for MAXPOSEX and MAXNEGEX is \"6\" each.\n   The user can\
    \ use the result returned by MUDDLE in any of his\n   computations, including\
    \ drawing a graph.  For example, typing:\n                        <GRAPH <DIFF\
    \ '<^ X. 3>> X -5 5>$\n   to MUDDLE will draw the graph \"Y = 3*X^2\" on the IMLAC\
    \ or ARDS screen\n   with values of X from -5 to +5 (assuming the user has the\
    \ graphics\n   package and the right IMLAC program loaded).  The same graph would\
    \ be\n   drawn if the user typed:\n                        <GRAPH <IPARSE <DIFF\
    \ \"X^3\">> X -5 5>$\n   where IPARSE is the MUDDLE function that converts infix\
    \ to prefix\n   form.  The corresponding function for prefix to infix conversion\
    \ is\n   UNIPARSE.\n   The details of using the MACSYMA resource sharing facility\
    \ may be\n   gathered from the annotated script of the example given in Section\
    \ V\n   of this paper.\nIV.  CAPABILITIES AND LIMITATIONS\n   The program tries\
    \ to be helpful to the user as much as possible.  For\n   example, if for some\
    \ reason the MIT-Mathlab computer is not\n   available, the MACSYMA service at\
    \ the MIT-AI computer is procured.\n   It should be mentioned that though the\
    \ program is fairly capable in\n   retrieving results, recognizing error messages,\
    \ and separating\n   comments, its recognition is not fool-proof.  The program\
    \ only makes\n   an educated guess as to where the answer lies: it is not as clever\
    \ as\n   a human user sitting at a console, who can filter out such messages\n\
    \   as \"System going down\" and communication from another user (console-\n \
    \  link) if they were to appear in the middle of the result.  This\n   points\
    \ to one of the pitfalls of using a facility via a program that\n   is basically\
    \ designed for use by human users.\n   The program reliability can be marginally\
    \ improved by asking MACSYMA\n   to print special characters before and after\
    \ the results it sends\n   (but again this is not fool-proof).  For example, the\
    \ following input\n   to MACSYMA:\n           Block ([ans],\n           print\
    \ (/(),\n           ans: diff (X^2,X),\n           print (string (ans))\n    \
    \       print (/)),\n           return (ans));\n   will cause MACSYMA to generate\
    \ the following output:\n           (\n           2*X\n           )\n        \
    \   (D**)           2X\n   From the above output, the answer \"2*X\" can be easily\
    \ extracted.\n   The resource sharing program does however recognize the so-called\n\
    \   \"unintegratable\" functions such as \"EXP (X^2)\" -- and gives the\n   correct\
    \ error response.  Normally, the user is in \"TERSE\" mode, and\n   does not see\
    \ the interaction between MACSYMA and MUDDLE.  To see the\n   interaction the\
    \ user must enter \"VERBOSE\" mode by typing:\n                        <VERBOSE>$\n\
    \   to MUDDLE.  To return to \"TERSE\" mode the user types:\n                \
    \        <TERSE>$\n   The user can also, if he is proficient in use of MACSYMA,\
    \ communicate\n   directly with MACSYMA at any point by typing:\n            \
    \            <TELCOM 1>$\n   to MUDDLE.  The TELCOM feature may be useful if the\
    \ user wishes to\n   see what is going on, or wants to examine the MACSYMA computations\
    \ by\n   entering the LISP environment (typing <Control-G> to MACSYMA).  To\n\
    \   return to MUDDLE and the automated environment, the user first\n   escapes\
    \ to MUDDLE by typing <Control-E>, and then types:\n                        <AUTO>$\n\
    \   to MUDDLE.  If the user types \"<ERRET 1>$\" after escaping to MUDDLE\n  \
    \ from \"TELCOM\" mode, he will be returned in direct communication with\n   MACSYMA.\
    \  If the user discovers that his \"MACSYMA\" is hopelessly\n   confused or if\
    \ he wishes to start a new version of MACSYMA, he must\n   type:\n           \
    \             <DIS>$\n   to MUDDLE, which will disconnect him.  Typing \"<MACSYMA>$\"\
    \ or using\n   any of the functions that use MACSYMA will connect him to MACSYMA\n\
    \   again.\n   Currently, MUDDLE recognizes and takes action as described above\n\
    \   whenever differentiate, integrate, expand, simplify, and\n   integrate.simplify\
    \ (integrate and simplify) functions are\n   encountered.  But it is quite easy\
    \ to generate programs for other\n   operations such as Laplace transforms and\
    \ solving equations.  The\n   prefix-to-infix conversion and vice-versa works\
    \ for all mathematical\n   forms we have encountered so far in our short experiment.\n\
    \   An alternate way to utilize MACSYMA's capabilities would have been to\n  \
    \ use it in the LISP environment by constructing a suitable interface\n   between\
    \ LISP and MUDDLE.  Such an approach would avoid the multiple\n   conversions\
    \ from prefix to infix form and vice-versa, but other,\n   perhaps more difficult,\
    \ conversions would be required.\nV.  EXAMPLE\n   The following scenario describes\
    \ the use of the resource-sharing\n   facility.  The facility is accessible in\
    \ the MUDDLE system at MIT-\n   DMS.  The interaction between MUDDLE and MACSYMA,\
    \ normally not\n   visible to the user, is also shown here (in VERBOSE mode) so\
    \ that the\n   reader may gain a better understanding of how the program operates.\n\
    \   It should be noted that the graphs will be plotted only if the user\n   has\
    \ loaded the \"graphics package\" and is on an IMLAC or ARDS console.\n   We would\
    \ also like to stress that this scenario is not intended to\n   demonstrate the\
    \ full capabilities of MACSYMA, or of MUDDLE, but only\n   to illustrate the resource\
    \ sharing facility.\n           SCENARIO FOR USING THE MUDDLE-MACSYMA FACILITY\n\
    \   (In the following scenario, user input is underlined and our comments\n  \
    \ are preceded with a semicolon.  <CR> represents a carriage return and\n   $\
    \ represents <ESC> or alt-mode.  The user is assumed to be logged in\n   at MIT-DMS\
    \ (Host 70).  Note that the input should be typed exactly as\n   shown, as MUDDLE\
    \ distinguishes between upper and lower case\n   characters.  Please refer to\
    \ \"THE MUDDLE PRIMER\" (SYS.11.01) by Greg\n   Pfister for a description of the\
    \ MUDDLE system and to \"MUDDLE CONSOLE\n   GRAPHICS USER GUIDE\" (SYS.11.11)\
    \ by Neal Ryan for a description of\n   the graphics package.  Both documents\
    \ are available from the\n   Programming Technology Division at Project MAC.)\n\
    [;]MUDDLE<CR>                   ; Get a MUDDLE, ';' is MONIT prompt.\n   ----------\n\
    MUDDLE 42 IN OPERATION.\nLISTENING-AT-LEVEL 1 PROCESS 1\n<FLOAD \"MUDDLE;MACSYM\"\
    >$        ; Load the program from MUDDLE\n------------------------        ; directory.\n\
    /METMUDGIN GOUT\nGIN GOUT                        ; Harmless comments from MUDDLE.\n\
    \"DONE\"\n<DIFF '<- <* .X <LOG .X>> .X>>$\n-------------------------------\nPLEASE\
    \ BE PATIENT, MACSYMA LOADING MAY TAKE TIME\nMACSYMA AT MIT-MATHLAB          ;\
    \ Comments from the program.\n<LOG .X>                        ; The result is\
    \ a MUDDLE form.\n<INTEGRATE '<LOG .X>>$\n----------------------\nSIN FASL DSK\
    \ MACSYM BEING LOADED\nLOADING DONE                    ; Comments from MACSYMA.\n\
    SCHATC FASL DSK MACSYM BEING LOADED\nLOADING DONE\n<- <* .X <LOG .X>> .X>    \
    \      ; The answer again.\n<SET A <INTEGRATE \"X/(X^3+1)\">>$; The input is in\
    \ infix form.\n--------------------------------\n\"LOG(X^2-X+1)/6+ATAN((2*X-1)/SQRT(3))/SQRT(3)-LOG(X+1)/3\"\
    \n                                ; The answer now is in infix form.\n<SET B <DIFF\
    \ .A>>$\n------------------\n\"2/(3*((2*X-1)^2/3+1))+(2*X-1)/(6*(X^2-X+1))-1/(3*(X+1))\"\
    \n<SIMPLIFY .B>$\n--------------\n\"X/(X^3+1)\"                     ; We get back\
    \ the original expression.\n<EXPAND '<^ <+ .X 2> 5>>$\n-------------------------\n\
    <+ <+ <+ <+ <+ <^ .X 5> <* 10 <^ .X 4>>> <* 40 <^ .X 3>>>\n<* 80 <^ .X 2>>> <*\
    \ 80 .X>> 32>\n<INTEGRATE '<EXP <^ .X 2>>>$\n----------------------------\nRISCH\
    \ FASL DSK MACSYM BEING LOADED\nLOADING DONE\n*ERROR*                        \
    \ ; Program recognizes that MACSYMA\nCANT-INTEGRATE                  ; couldn't\
    \ integrate.\nLISTENING-AT-LEVEL 2 PROCESS 1\n<ERRET>$                       \
    \ ; To get back to level 1.\n--------\nLISTENING-AT-LEVEL 1 PROCESS 1\n<DIS>$\
    \          ; We disconnect here to show the verbose mode,\n------          ; the\
    \ program disconnects automatically on quitting.\n\"CONNECTIONS CLOSED NOW\"\n\
    <VERBOSE>$\n----------\n\"YOU WILL BE ABLE TO OBSERVE MUDDLE-MACSYMA INTERACTION\
    \ NOW\"\n<DIFF '<^ .X 3>>$\n-----------------\nPLEASE BE PATIENT, MACSYMA LOADING\
    \ MAY TAKE TIME\nMIT MATHLAB PDP-10 STELNT.59\nML ITS.1. DDT.516.\n10. USERS\n\
    :LOGIN 70GUEST          ; The program uses User's SNAME (GUEST here).\n:MACSYMA\n\
    THIS IS MACSYMA 226\nSEE UPDATE > MACSYM; FOR CHANGES\nFIX 226 DSK MACSYM BEING\
    \ LOADED\nLOADING DONE\n(C1)\nMACSYMA AT MIT-MATHLAB          ; The program announces\
    \ MACSYMA,\n STRING (DIFF ((X^3),X,1));     ; and sends input in infix form.\n\
    (D1)                                   3*X^2\n<* 3 <^ .X 2>>                 \
    \ ; The output is in MUDDLE prefix form.\n<INTEGRATE '</ .X <+ .X 1>>>$\n-----------------------------\n\
    C2) STRING (INTEGRATE ((X/(X+1)),X));\nSIN FASL DSK MACSYM BEING LOADED\nLOADING\
    \ DONE\nSCHATC FASL DSK MACSYM BEING LOADED\nLOADING DONE\n(D2)              \
    \                   X-LOG(X+1)\n<- .X <LOG <+ .X 1>>>           ; The output again.\n\
    <TERSE>$\n--------\n\"OK\"                            ; Back in TERSE mode now.\n\
    <FLOAD \"MUDDLE;UGRF\">$          ; To load graphics program\n----------------------\n\
    IMLAC? (ANSWER Y OR N) Y        ; for graphics on an IMLAC.\n                \
    \       -\n\"DONE\"\n<GRAPH <SLT A '<^ <SIN .X> 2>> X -3 3>$\n---------------------------------------\n\
    \        ; To graph function sin(X)^2 (graph 1 on Figure 1).\n<GRAPH  <DIFF .A>>$\n\
    -------------------\n        ; To graph diff of sin(X)^2 (see graph 2, Figure\
    \ 1).\n<GRAPH <INTEGRATE .A>>$\n-----------------------\n        ; To graph integral\
    \ of sin(X)^2 (see graph 3, Figure 1).\n<QUIT>$                         ; To quit\
    \ from program and MUDDLE.\n-------\nKILL\n[;]                     ; semicolon\
    \ prompt from MONIT.\n     FIG 1.  GRAPH FOR SIN(X)^2, DIFF(SIN(X)^2), AND INTEGRATE(SIN(X)^2)\n\
    \                                --+--2.0\n                                  |\n\
    \                                  |\n                                  |    \
    \                    +++ (3)\n                                  |            \
    \        ++++\n                                  |                  ++\n     \
    \                             |                 +\n                          \
    \        |               ++\n             ooo   ****         --+--   ooo   ***+\n\
    \            o   o**    **         |    o   o**  + **\n           o    *o    \
    \   *        |   o    *o  +    *\n          o    *          *       |  o    *\
    \   +      *\n         o    *   o        *      | o    *   o        *\n      \
    \       *     o        *     |     *   + o        *\n        o  **           \
    \     **   |o  **  ++            **\n|         *      |  o          *  |  *  ++\
    \     o   |      *   (1)   |\n|-------**-------+-----------+++++o+++++-----------+-------**-------|\n\
    |-4.0            |   o     ++     |             o  |          (2)   |4.0\n   \
    \                      ++      o|                         o\n                \
    \      o +         |              o\n                       o        o |     \
    \          o        o\n                      +        o  |                   \
    \    o\n                     +  o     o   |                o     o\n         \
    \           +    o   o    |                 o   o\n                   +      ooo\
    \   --+-- -1.0           ooo\n                 ++               |\n          \
    \      +                 |\n              ++                  |\n          ++++\
    \                    |\n       +++                        |\n                \
    \                  |\n                                  |\n                  \
    \              --+-- -2.0\n     [ This RFC was put into machine readable form\
    \ for entry ]\n      [ into the online RFC archives by Graeme Hewson 3/98 ]\n"
