- title: __initial_text__
  contents:
  - "                       ISO Presentation Services\n                    on top\
    \ of TCP/IP-based internets\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo proposes a standard for the Internet community.\n\
    \   Distribution of this memo is unlimited.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   [RFC1006] describes a mechanism for providing the ISO transport\n\
    \   service on top of the Transmission Control Protocol (TCP) [RFC793]\n   and\
    \ Internet Protocol (IP) [RFC791].  Once this method is applied,\n   one may implement\
    \ \"real\" ISO applications on top of TCP/IP-based\n   internets, by simply implementing\
    \ OSI session, presentation, and\n   application services on top of the transport\
    \ service access point\n   which is provided on top of the TCP.  Although straight-forward,\n\
    \   there are some environments in which the richness provided by the OSI\n  \
    \ application layer is desired, but it is nonetheless impractical to\n   implement\
    \ the underlying OSI infrastructure (i.e., the presentation,\n   session, and\
    \ transport services on top of the TCP).  This memo\n   describes an approach\
    \ for providing \"stream-lined\" support of OSI\n   application services on top\
    \ of TCP/IP-based internets for such\n   constrained environments.\n"
- title: 2. Terminology
  contents:
  - "2. Terminology\n   In as much as this memo is concerned primarily with concepts\
    \ defined\n   in the framework of Open Systems Interconnection (OSI) as promulgated\n\
    \   by the International Organization for Standardization (ISO), the\n   terminology\
    \ used herein is intended to be entirely consistent within\n   that domain of\
    \ discourse.  This perspective is being taken despite\n   the expressed intent\
    \ of implementing the mechanism proposed by this\n   memo in the Internet and\
    \ other TCP/IP-based internets.  For those\n   more familiar with the terminology\
    \ used in this latter domain, the\n   author is apologetic but unyielding.\n \
    \  Although no substitute for the \"correct\" definitions given in the\n   appropriate\
    \ ISO documents, here is a short summary of the terms used\n   herein.\n     \
    \ Application Context:\n         The collection of application service elements\
    \ which\n         cooperatively interact within an application-entity.\n     \
    \ Application Service Element:\n         A standardized mechanism, defined by\
    \ both a service and a\n         protocol, which provides a well-defined capability,\
    \ e.g.,\n         ROSE -  the Remote Operations Service Element,\n           \
    \      which orchestrates the invocation of \"total\"\n                 operations\
    \ between application-entities [ISO9066/2].\n         ACSE -  the Association\
    \ Control Service Element,\n                 which manages associations between\
    \ application\n                 entities [ISO8650].\n      Object Identifier:\n\
    \         An ordered set of integers, used for authoritative\n         identification.\n\
    \      Presentation Service:\n         A set of facilities used to manage a connection\
    \ between two\n         application-entities.  The fundamental responsibility\
    \ of the\n         presentation service is to maintain transfer syntaxes which\n\
    \         are used to serialize application protocol data units for\n        \
    \ transmission on the network and subsequent de-serialization\n         for reception.\n\
    \      Protocol Data Unit (PDU):\n         A data object exchanged between service\
    \ providers.\n      Serialization:\n         The process of applying an abstract\
    \ transfer notation to an\n         object described using abstract syntax notation\
    \ one (ASN.1)\n         [ISO8824] in order to produce a stream of octets.\n  \
    \       De-serialization is the inverse process.\n         It is assumed that\
    \ the reader is familiar with terminology\n         pertaining to the reference\
    \ model [ISO7498], to the service\n         conventions in the model [ISO8509],\
    \ and to the\n         connection-oriented presentation service [ISO8822].\n"
- title: 3. Scope
  contents:
  - "3. Scope\n   The mechanism proposed by this memo is targeted for a particular\n\
    \   class of OSI applications, namely those entities whose application\n   context\
    \ contains only an Association Control Service Element (ACSE)\n   and a Remote\
    \ Operations Service Element (ROSE).  In addition, a\n   Directory Services Element\
    \ (DSE) is assumed for use by the\n   application-entity, but only in a very limited\
    \ sense.  The\n   organization of such an entity is as follows:\n      +------------------------------------------------------------+\n\
    \      |                                                            |\n      |\
    \                     Application-Entity                     |\n      |      \
    \                                                      |\n      |    +------+\
    \              +------+              +------+    |\n      |    | ACSE |      \
    \        | ROSE |              | DSE  |    |\n      |    +------+            \
    \  +------+              +------+    |\n      |                              \
    \                              |\n      +------------------------------------------------------------+\n\
    \      |                                                            |\n      |\
    \                Presentation Services                       |\n      |      \
    \                                                      |\n      |    P-CONNECT\
    \         P-RELEASE         P-DATA              |\n      |                   \
    \   P-U-ABORT                             |\n      |                      P-P-ABORT\
    \                             |\n      |                                     \
    \                       |\n      +------------------------------------------------------------+\n\
    \   The mechanism proposed by this memo is not applicable to entities\n   whose\
    \ application context is more extensive (e.g., contains a\n   Reliable Transfer\
    \ Service Element).  The mechanism proposed by this\n   memo could be modified\
    \ to support additional elements.  However, such\n   extensions would, at this\
    \ time, merely serve to defeat the purpose of\n   providing the minimal software\
    \ infrastructure required to run the\n   majority of OSI applications.\n   The\
    \ motivation for this memo was initially derived from a requirement\n   to run\
    \ the ISO Common Management Information Protocol (CMIP) in\n   TCP/IP-based internets.\
    \  In its current definition, CMIP uses\n   precisely the application service\
    \ elements provided for herein.  It\n   may be desirable to offer CMIP users a\
    \ quality of service different\n   than the one offered by a connection with a\
    \ high-quality level of\n   reliability.  This would permit a reduced utilization\
    \ of connection-\n   related resources.  This memo proposes a mechanism to implement\
    \ this\n   less robust -- and less costly -- quality of service.\n"
- title: 4. Approach
  contents:
  - "4. Approach\n   The approach proposed by this memo relies on the following\n\
    \   architectural nuances:\n     - the TCP is a stream-oriented transport protocol\n\
    \     - ASN.1 objects, when represented as a stream of octets are\n       self-delimiting\n\
    \     - The ISO presentation service permits the exchange of ASN.1\n       objects\n\
    \     - The ACSE and ROSE require the following presentation\n       facilities:\n\
    \           The Connection Establishment Facility\n           The Connection Termination\
    \ Facility\n           The Information Transfer Facility (P-DATA\n           service\
    \ only)\n     - The majority of the parameters used by the services which\n  \
    \     provide these facilities can be \"hard-wired\" to avoid\n       negotiation\n\
    \   In principle, these nuances suggest that a \"cheap\" emulation of the\n  \
    \ ISO presentation services could be implemented by simply serializing\n   ASN.1\
    \ objects over a TCP connection.  This approach is precisely what\n   is proposed\
    \ by this memo.\n   Given this perspective, this memo details how the essential\
    \ features\n   of the ISO presentation service may be maintained while using a\n\
    \   protocol entirely different from the one given in [ISO8823]. The\n   overall\
    \ composition proposed by this memo is as follows:\n   +-----------+         \
    \                              +-----------+\n   |  PS-user  |               \
    \                        |  PS-user  |\n   +-----------+                     \
    \                  +-----------+\n        |                                  \
    \                   |\n        | PS interface                           PS interface\
    \ |\n        |  [ISO8822]                                          |\n       \
    \ |                                                     |\n   +----------+   ISO\
    \ Presentation Services on the TCP  +----------+\n   |  client  |-----------------------------------------|\
    \  server  |\n   +----------+              (this memo)                +----------+\n\
    \        |                                                     |\n        | TCP\
    \ interface                         TCP interface |\n        |  [RFC793]     \
    \                                      |\n        |                          \
    \                           |\n   In greater detail, the \"client\" and \"server\"\
    \ boxes implement the\n   protocol described in this memo.  Each box contains\
    \ three modules:\n      - a dispatch module, which provides the presentation services\n\
    \        interface,\n      - a serialization module, containing a serializer,\
    \ which takes\n        an ASN.1 object and applies the encoding rules of [ISO8825]\n\
    \        to produce a stream of octets, and a de-serializer, which\n        performs\
    \ the inverse operation, and\n      - a network module, which manages a TCP connection.\n\
    \   The software architecture used to model a network entity using this\n   approach\
    \ is as follows:\n   +---------+    +----------+                             \
    \      +-----+\n   |         |    |          |  output +---------------+  input\
    \  |  n  |\n   |         |    |          |<--------| de-serializer |<--------|\
    \  e  |\n   |         |    |          |   queue +---------------+  queue  |  t\
    \  |\n   | PS-user |----| dispatch |                                   |  w  |\n\
    \   |         |    |          |  input  +---------------+ output  |  o  |\n  \
    \ |         |    |          |-------->|   serializer  |-------->|  r  |\n   |\
    \         |    |          |  queue  +---------------+ queue   |  k  |\n   +---------+\
    \    +----------+                                   +-----+\n                \
    \                 |---- serialization module ----|\n   The ISO presentation layer\
    \ is concerned primarily with the\n   negotiation of transfer syntaxes in addition\
    \ to the transformation to\n   and from transfer syntax.  However, using the mechanism\
    \ proposed by\n   this memo, no negotiation component will be employed.  This\
    \ memo\n   specifies the fixed contexts which exist over each presentation\n \
    \  connection offered.  This memo further specifies other constants\n   which\
    \ are used in order to eliminate the need for presentation layer\n   negotiation.\n"
- title: 5. Fundamental Parameters
  contents:
  - "5. Fundamental Parameters\n   There are certain parameters which are used by\
    \ the presentation\n   service and are defined here.\n      1. Presentation address:\n\
    \      The structure of a presentation address is presented in Addendum 3\n  \
    \    to [ISO7498].  This memo interprets a presentation address as an\n      ordered-tuple\
    \ containing:\n         - one or more network addresses\n         - a transport\
    \ selector\n         - a session selector\n         - a presentation selector\n\
    \      Each selector is an uninterpreted octet string of possibly zero\n     \
    \ length.  The mechanism proposed in this memo completely ignores\n      the values\
    \ of these selectors.  Note however that the value of the\n      presentation\
    \ selector is preserved by the provider.\n      A network address is interpreted\
    \ as containing three components:\n         - a 32-bit IP address\n         -\
    \ a set indicating which transport services are available\n           at the IP\
    \ address  (currently only two members are defined:\n           TCP and UDP; as\
    \ experience is gained, other transport\n           services may be added); as\
    \ a local matter, if a member is\n           present it may have an \"intensity\"\
    \ associated with it:\n           either \"possibly present\" or \"definitely\
    \ present\"\n         - a 16-bit port number\n      As a consequence of these\
    \ interpretations, any application-entity\n      residing in the network can be\
    \ identified by its network address.\n      2. Presentation context list\n   \
    \   A list of one or more presentation contexts.  Each presentation\n      context\
    \ has three components:\n         - a presentation context identifier (PCI), an\
    \ integer\n         - an abstract syntax name, an object identifier\n        \
    \ - an abstract transfer name, an object identifier\n      The range of values\
    \ these components may take is severely\n      restricted by this memo.  In particular,\
    \ exactly two contexts are\n      defined: one for association control and the\
    \ other for the\n      specific application service element which is being carried\
    \ as ROS\n      APDUs (see the section on connection establishment for the precise\n\
    \      values).\n      In addition, if the presentation context list appears in\
    \ a\n      \"result\" list (e.g., the Presentation context result list\n     \
    \ parameter for the P-CONNECT service), a fourth component is\n      present:\n\
    \         - an acceptance indicator\n      which indicates if the context was\
    \ accepted by both the service\n      provider and the remote peer.  If the context\
    \ was not accept, a\n      brief reason, such as \"abstract syntax not supported\"\
    \ is given.\n      For the novice reader, one might think of the abstract syntax\n\
    \      notation as defining the vocabulary of some language, that is, it\n   \
    \   lists the words which can be spoken.  In contrast, the abstract\n      transfer\
    \ notation defines the pronunciation of the language.\n      3. User data\n  \
    \    User data passes through the presentation service interface as\n      ASN.1\
    \ objects (in a locally defined form).  Associated with each\n      object is\
    \ a presentation context identifier.  The PCI\n      distinguishes the context\
    \ for which the data is intended.  The\n      range of values the PCI may take\
    \ is severely restricted by this\n      memo.  Exactly one of two contexts must\
    \ always be used: either the\n      value for the ACSE presentation context or\
    \ the value for the ROSE.\n      4. Quality of Service\n      Quality of service\
    \ is a collection of \"elements\".  Each element\n      denotes some characteristics\
    \ of the communication, e.g., desired\n      throughput, and some value in an\
    \ arbitrary unit of measure.  For\n      our purposes, only one quality of service\
    \ element is interpreted,\n      \"transport-mapping\".  Currently, the \"transport-mapping\"\
    \ element\n      takes on one of two values: \"tcp-based\" or \"udp-based\". \
    \ At\n      present, the two values may also be referred to as \"high-quality\"\
    \n      or \"low-quality\", respectively.\n      As experience is gained, other\
    \ values may be added.  These values\n      would correspond directly to the new\
    \ transport services which are\n      listed in the network address.\n      5.\
    \ Version of Session Service\n      Some application service elements (e.g., the\
    \ ACSE) invoke\n      different procedures based on the (negotiated) version of\
    \ the\n      session service available.  Implementations of this memo always\n\
    \      indicate that session service version 2 has been negotiated.\n"
- title: 6. Choice of Transport Service
  contents:
  - "6. Choice of Transport Service\n   Discussion thus far has centered along the\
    \ use of the TCP as the\n   underlying transport protocol.  However, it has also\
    \ been noted that\n   it may be desirable to permit a quality of service with\
    \ less\n   reliability in order to take advantage of some other characteristic\n\
    \   of the transport service.\n   The introduction of this service has several\
    \ profound impacts on the\n   model, and it is beyond the scope of this memo to\
    \ enumerate these\n   impacts.  However, this memo does propose a mechanism by\
    \ which such a\n   facility is implemented.\n   To begin, we use the quality of\
    \ service parameter for the P-CONNECT\n   service to select an underlying transport\
    \ service.  Only one element\n   is currently interpreted, \"transport-mapping\"\
    \ which takes the value\n   \"tcp-based\" or \"udp-based\".  If the value is \"\
    tcp-based\", then the\n   presentation provider will use TCP as the underlying\
    \ transport\n   service. If, however, the value of \"transport-mapping\" is \"\
    udp-\n   based\", then the presentation provider will use the UDP instead.\n \
    \  The User Datagram Protocol (UDP) [RFC768] is used to implement the\n   udp-based\
    \ service.  Very few transport-level facilities are placed on\n   top of the UDP\
    \ service, i.e., it is not the intent of this memo to\n   \"re-invent\" the facilities\
    \ in the TCP.  Hence, It is critical to\n   understand that\n           low-quality\
    \ means LOW-QUALITY!\n   Because the UDP is a packet-oriented protocol, it is\
    \ necessary to\n   slightly redefine the role of the serialization module.  For\
    \ the\n   serializer, we say that each top-level ASN.1 object placed on the\n\
    \   input queue will form a single UDP datagram on the output queue which\n  \
    \ is given to the network.  Similarly, for the de-serializer, we say\n   that\
    \ each UDP datagram placed on the input queue from the network\n   will form a\
    \ single top-level ASN.1 object placed on the output queue.\n   The term \"top-level\
    \ ASN.1 object\" refers, of course, to the protocol\n   data units being exchanged\
    \ by the presentation providers.\n   It should be noted that in its current incarnation,\
    \ this memo permits\n   the choice of two different transport protocols, e.g.,\
    \ the TCP or the\n   UDP.  However, as experience is gained and as other transport\n\
    \   protocols are deployed (e.g., the VMTP), then future incarnations of\n   this\
    \ memo will permit these transport protocols to be used.  This is\n   a three\
    \ step process: first, the set of transport services defined\n   for the network\
    \ address is updated; second, a corresponding value is\n   added to the range\
    \ of the quality of service element \"transport-\n   mapping\"; and, third, the\
    \ following sections of this memo are\n   modified accordingly.\n"
- title: 7. Connection Establishment
  contents:
  - "7. Connection Establishment\n   The Connection Establishment facility consists\
    \ of one service, the\n   P-CONNECT service.\n"
- title: 7.1. The P-CONNECT Service
  contents:
  - "7.1. The P-CONNECT Service\n   This service is used to bring two identified application-entities\n\
    \   into communication.  Its successful use results in a presentation\n   connection,\
    \ with an initial defined context set, being established\n   between then.  This\
    \ connection is available for their subsequent\n   communication.  This is a confirmed\
    \ service whose effects are\n   sequenced and non-destructive.\n   If the udp-based\
    \ service is selected, then a presentation connection\n   is formed which should\
    \ be used infrequently and will have minimal\n   reliability characteristics.\n\
    \   For our purposes, the P-CONNECT service:\n      - requests TCP or UDP resources,\n\
    \      - builds a fixed defined context set, and\n      - exchanges initial user\
    \ data.\n   Following are the interpretation of and the defaults assigned to the\n\
    \   parameters of the P-CONNECT service:\n      1. Calling Presentation Address\n\
    \        This is a presentation address.  Although the ISO presentation\n    \
    \    service states that this parameter is mandatory, in practice, a\n       \
    \ local implementation rule may be used to determine an\n        \"ephemeral\"\
    \ address to use.\n      2. Called Presentation Address\n        This is a presentation\
    \ address.  Note that when issuing the P-\n        CONNECT.REQUEST primitive,\
    \ this parameter may contain more than\n        one network address.  In the P-CONNECT.INDICATION\
    \ primitive\n        however, only one network address, the one actually used\
    \ to\n        establish the presentation connection, is present.  (Appendix C\n\
    \        describes a strategy which might be used to determine the actual\n  \
    \      network address).\n      3. Responding Presentation Address\n        This\
    \ parameter is identical to the value of the Called\n        Presentation Address\
    \ parameter of the P-CONNECT.INDICATION\n        primitive.\n      4. Multiple\
    \ defined Contexts\n        Always TRUE.  Note that this parameter is present\
    \ only in the\n        DIS version of the presentation service.\n      5. Presentation\
    \ context definition list\n      Two contexts are defined:\n      PCI     Abstract\
    \ Syntax Name            Abstract Transfer Name\n      ---     --------------------\
    \            ----------------------\n       1      specific to the application\
    \     \"iso asn.1 abstract\n                                              transfer\"\
    \n                                              1.0.8825\n       3      \"acse\
    \ pci version 1\"            \"iso asn.1 abstract\n                          \
    \                    transfer\"\n              2.2.1.0.0                     \
    \  1.0.8825\n      The abstract syntax and transfer names for the ACSE PCI are\
    \ for\n      use with the DIS version of association control.  If the IS\n   \
    \   version is being used, then this PCI is used instead:\n       3      \"acse\
    \ pci version 1\"            \"asn.1 basic encoding\"\n              2.2.1.0.1\
    \                       2.1.1\n      6. Presentation context result list\n   \
    \     Identical to the Presentation context definition list with the\n       \
    \ addition that the acceptance indicator for both contexts is\n        \"accepted\"\
    .\n      7. Default Context Name\n        None.\n      8. Default Context Result\n\
    \        Not applicable.\n      9. Quality of Service\n        The element \"\
    transport-mapping\" takes the value \"tcp-based\" or\n        \"udp-based\". \
    \ In the future the range of values may be extended.\n      10. Presentation Requirements\n\
    \        None (the kernel functional unit is always used).\n      11. Session\
    \ Requirements\n        Full duplex.\n      12. Initial synchronization point\
    \ serial number\n        None.\n      13. Initial Assignment of tokens\n     \
    \   None.\n      14. Session connection identifier\n        Unlike the \"real\"\
    \ presentation service, depending on the quality\n        of service selected,\
    \ this parameter may have great significance\n        to presentation provider.\
    \  Hence, the following format of the\n        session connection identifier is\
    \ mandated by this memo.\n        user data:        a local string encoded as\
    \ a T.61 string\n                          using ASN.1, e.g., given string \"\
    gonzo\":\n                          14     05     67   6f   6e   7a   6f\n   \
    \                       tag  length   \"g\"  \"o\"  \"n\"  \"z\"  \"o\"\n    \
    \    common data:      a universal time encoding using ASN.1, e.g.,\n        \
    \                  given time \"880109170845\":\n                          17\
    \     0c     38   38   30   31   30   ...\n                          tag  length\
    \   \"8\"  \"8\"  \"0\"  \"1\"  \"0\"  ...\n        additional data:  any string\
    \ encoded as a T.61 string using ASN.1\n                          (optional)\n\
    \        As a local convention, the presentation provider may disregard\n    \
    \    the first two octets of each data component for transmission on\n       \
    \ the network as when the session connection identifier is\n        represented\
    \ with ASN.1, the tag and length octets will be added\n        anyway.\n     \
    \ 15. User Data\n        A single ASN.1 object is present, the appropriate A-ASSOCIATE\n\
    \        PDU, carried in presentation context 3.\n      16. Result\n        One\
    \ of the following values: acceptance, user-rejection,\n        provider-rejection\
    \ (transient), or provider-rejection\n        (permanent).\n"
- title: 8. Connection Termination
  contents:
  - "8. Connection Termination\n   The Connection Termination facility consists of\
    \ three services, the\n   P-RELEASE, P-U-ABORT, and P-P-ABORT services.\n"
- title: 8.1. The P-RELEASE Service
  contents:
  - "8.1. The P-RELEASE Service\n   This service provides the service user with access\
    \ to a negotiated\n   release facility.  This service has effects which are sequenced\
    \ and\n   non-destructive.  Either presentation user is permitted to request\n\
    \   this service.  However, in the event of collision, a provider-\n   initiated\
    \ abort procedure will be invoked.\n   If the udp-based service is selected, then\
    \ any data in transit may be\n   discarded.\n      For our purposes, the P-RELEASE\
    \ service:\n      - waits for the serialization module to drain,\n      - sends\
    \ release user data, and\n      - releases TCP or UDP resources\n   Following\
    \ are the interpretation of and the defaults assigned to the\n   parameters of\
    \ the P-RELEASE service:\n      1. Result\n        Release accepted.\n      2.\
    \ User data\n        A single ASN.1 object is present, the appropriate A-RELEASE\
    \ PDU,\n"
- title: 8.2. The P-U-ABORT Service
  contents:
  - "8.2. The P-U-ABORT Service\n   This service can be used by either presentation\
    \ user to force the\n   release of a presentation connection at any time and have\
    \ the\n   correspondent presentation user informed of this termination.  This\n\
    \   service has effects which are not sequenced with respect to preceding\n  \
    \ service invocations and may be destructive.  It does not require the\n   agreement\
    \ of both service users.\n      For our purposes, the P-U-ABORT service:\n   \
    \   - flushes the serialization module,\n      - sends abort user data, and\n\
    \      - releases TCP or UDP resources\n   Following are the interpretation of\
    \ and the defaults assigned to the\n   parameters of the P-U-ABORT service:\n\
    \      1. Presentation context identifier list\n        Contained in the ASN.1\
    \ objects, if any, that are delivered as\n        user data.\n      2. User data\n\
    \        A single ASN.1 object is present, an A-ABORT PDU, carried in\n      \
    \  presentation context 3.\n"
- title: 8.3. The P-P-ABORT Service
  contents:
  - "8.3. The P-P-ABORT Service\n   This service is the means by which the service\
    \ provider may indicate\n   the termination of the presentation connection for\
    \ reasons internal\n   to the service provider.  This service has effects which\
    \ are not\n   sequenced with respect to preceding service invocations.  The\n\
    \   execution of this service disrupts any other concurrently active\n   service\
    \ and may thus be destructive.\n      For our purposes, the P-P-ABORT service:\n\
    \      - flushes the serialization module, and\n      - releases TCP or UDP resources\n\
    \   Following are the interpretation of and the defaults assigned to the\n   parameters\
    \ of the P-P-ABORT service.\n      1. Provider reason\n        An integer code\
    \ detailing why the connection was aborted. Codes\n        include, but are not\
    \ limited to: invalid PPDU parameter,\n        unexpected PPDU, unrecognized PPDU,\
    \ and specified reason.\n      2. Abort data\n        None.\n"
- title: 9. Information Transfer
  contents:
  - "9. Information Transfer\n   Although the Information Transfer facility consists\
    \ of many services,\n   only one, the P-DATA service, is provided by this memo.\n"
- title: 9.1. The P-DATA Service
  contents:
  - "9.1. The P-DATA Service\n   This services provides the service user with a data\
    \ transfer\n   capability.  This service has effects which are sequenced and non-\n\
    \   destructive.\n   If the udp-based service is selected, then there is an upper-bound\
    \ on\n   the size of the serialized ASN.1 objects which may be transmitted.\n\
    \   This limit, imposed by the UDP, is 65536 octets.  As a practical\n   matter,\
    \ it is probably a good idea to keep datagrams less than or\n   equal to 536 octets\
    \ in size.\n   For our purposes, the P-DATA service:\n              - sends user\
    \ data\n   Following are the interpretation of and the defaults assigned to the\n\
    \   parameters of the P-DATA service:\n      1. User data\n        A single ASN.1\
    \ object is present, a remote operations APDU,\n        carried in presentation\
    \ context 1.\n"
- title: 10. Elements of Procedure
  contents:
  - "10. Elements of Procedure\n   The service provider is in one of the following\
    \ states:\n           IDLE, WAIT1, WAIT2, DATA, WAIT3, or WAIT4\n        The possible\
    \ events are:\n           PS-user         P-CONNECT.REQUEST\n                \
    \           P-CONNECT.RESPONSE\n                           P-RELEASE.REQUEST\n\
    \                           P-RELEASE.RESPONSE\n                           P-DATA.REQUEST\n\
    \                           P-U-ABORT.REQUEST\n           network         TCP\
    \ closed or errored(*)\n                           receive ConnectRequest PDU\n\
    \                           receive ConnectResponse PDU\n                    \
    \       receive ReleaseRequest PDU\n                           receive ReleaseResponse\
    \ PDU\n                           receive UserData(*) or CL-UserData(**) PDU\n\
    \                           receive user-initiated Abort PDU\n               \
    \            receive provider-initiated Abort PDU\n                          \
    \ timer expires(**)\n        The possible actions are:\n           PS-user   \
    \      P-CONNECT.INDICATION\n                           P-CONNECT.CONFIRMATION\n\
    \                           P-RELEASE.INDICATION\n                           P-RELEASE.CONFIRMATION\n\
    \                           P-DATA.INDICATION\n                           P-U-ABORT.INDICATION\n\
    \                           P-P-ABORT.INDICATION\n           network         open\
    \ TCP(*)\n                           close TCP(*)\n                          \
    \ send ConnectRequest PDU\n                           send ConnectResponse PDU\n\
    \                           send ReleaseRequest PDU\n                        \
    \   send ReleaseResponse PDU\n                           send UserData(*) or CL-UserData(**)\
    \ PDU\n                           send user-initiated Abort PDU\n            \
    \               send provider-initiated Abort PDU\n                          \
    \ set timer(**)\n           (*)   tcp-based service only\n           (**)  udp-based\
    \ service only\n"
- title: 10.1. Elements of Procedure specific to the tcp-based service
  contents:
  - "10.1. Elements of Procedure specific to the tcp-based service\n   The provider\
    \ maintains the following information for each\n   presentation connection:\n\
    \      - a local designator for the PS-user\n      - a local designator for a\
    \ TCP connection\n      - the state of the connection (e.g., IDLE, WAIT1, and\
    \ so on)\n   Upon receiving an event from the network, the provider finds the\n\
    \   associated presentation connection.  Matching is done by simply\n   comparing\
    \ local designators for the TCP connection.  Whenever a\n   connection remains\
    \ in or returns to the IDLE state, any associated\n   resources, such as an attachment\
    \ to a local TCP port, are released.\n   In the procedures which follow, outgoing\
    \ PDUs are \"placed on the\n   input queue for the serializer\".  This has a different\
    \ meaning\n   depending on the type of PDU being enqueued.  If the PDU is not\
    \ an\n   abort PDU (user-initiated or provider-initiated), then the PDU is\n \
    \  simply appended to the input queue regardless of the number of PDUs\n   present.\
    \  If however, the PDU is an abort PDU, then the provider\n   checks the size\
    \ of the input queue.  If the input queue is non-empty\n   or if the serializer\
    \ is busy transmitting to the network, then the\n   abort PDU is discarded, and\
    \ the serializer is flushed, aborting any\n   output to the network in progress.\
    \  However, if the input queue is\n   empty, then the Abort PDU is appended to\
    \ the queue, and a small timer\n   started.  If the timer expires before the PDU\
    \ has been serialized and\n   transmitted, then the serializer is flushed, aborting\
    \ any output to\n   the network in progress.\n   Further, in general, whenever\
    \ the TCP connection is closed (either\n   locally by the provider, or remotely\
    \ by the network) or has errored,\n   the serializer is flushed.  The one exception\
    \ to this is if a\n   ReleaseResponse PDU is being serialized and transmitted\
    \ to the\n   network.  In this case, the provider will not close the TCP\n   connection\
    \ until after the serializer has finished.\n"
- title: 10.2. Elements of Procedure specific to the udp-based service
  contents:
  - "10.2. Elements of Procedure specific to the udp-based service\n   The provider\
    \ maintains the following information for each\n   presentation connection:\n\
    \      - a local designator for the PS-user\n      - the 32-bit IP address and\
    \ 16-bit UDP port number of the\n        initiating host\n      - the 32-bit IP\
    \ address and 16-bit UDP port number of the\n        responding host\n      -\
    \ the session connection identifier used to establish the\n        presentation\
    \ connection\n      - a local designator for an UDP endpoint\n      - the state\
    \ of the connection (e.g., IDLE, WAIT1, and so on)\n      - a retransmission counter\n\
    \   Upon receiving an event from the network, the provider finds the\n   associated\
    \ presentation connection.  Matching is done on the basis of\n   addresses, ports,\
    \ and the session connection identifier (i.e., two\n   different presentation\
    \ connections may differ only in their session\n   connection identifier).  If\
    \ no presentation connection can be found,\n   then for the purposes of discussion,\
    \ it may be assumed that a\n   \"vanilla\" presentation connection is created\
    \ and initialized to the\n   IDLE state.  Further, whenever a connection remains\
    \ in or returns to\n   the IDLE state, any associated resources, such as an attachment\
    \ to a\n   local UDP port, are released.\n   In the procedures which follow, outgoing\
    \ PDUs are \"placed on the\n   input queue for the serializer\".  This means that\
    \ the ASN.1 object is\n   serialized and the resulting sequence of octets is sent\
    \ as a single\n   UDP datagram.\n"
- title: 10.3. State Transitions
  contents:
  - "10.3. State Transitions\n   Following are the rules for transitioning states.\
    \  If an event\n   associated with a user-generated primitive is omitted, then\
    \ it is an\n   interface error for the user to issue that primitive in the given\n\
    \   state.  Each state considers all possible incoming PDUs.\n   We assume that\
    \ for the tcp-based service, that some entity starts a\n   passive TCP open. \
    \ When the passive open completes, the entity, using\n   some local rule, locates\
    \ a PS-user to be associated with the incoming\n   presentation connection.  This\
    \ presentation connection is then placed\n   in the IDLE state.  The entity then\
    \ continues listening for other\n   passive opens to complete.  The mechanisms\
    \ associated with this\n   entity are entirely a local matter, the concept of\
    \ this listener is\n   introduced solely as a modeling artifact.\n   Finally,\
    \ if the udp-based service is selected, then CL-UserData PDUs\n   are exchanged\
    \ by the provider instead of UserData PDUs.\n                                \
    \    IDLE state\n        Event:     P-CONNECT.REQUEST primitive issued\n   Based\
    \ on the quality of service parameter and the list of network\n   addresses in\
    \ the called presentation address parameter, the provider\n   selects an address\
    \ for the use of the presentation connection.  The\n   method for making this\
    \ determination is a local matter.  (Appendix C\n   discusses a strategy which\
    \ might be used.)  For the discussion that\n   follows, we assume that a network\
    \ address supporting the desired\n   quality of service has been determined.\n\
    \   Based on the network address chosen from the called presentation\n   address\
    \ parameter, the provider selects a compatible network address\n   from the calling\
    \ presentation address parameter.  The provider\n   attaches itself to the port\
    \ associated with this network address.\n   (By local determination, this address\
    \ need not be used, and an\n   \"ephemeral\" port may be chosen by the provider.)\n\
    \   For the tcp-based service, the provider attempts to establish a TCP\n   connection\
    \ to the network address listed in the called presentation\n   address.  If the\
    \ connection can not be established, the P-\n   CONNECT.CONFIRMATION(-) primitive\
    \ is issued with a reason of\n   provider-rejection, and the provider remains\
    \ in the IDLE state.\n   Regardless, the user data parameter is placed in a ConnectRequest\n\
    \   PDU, which is put on the input queue for the serializer.\n   For the udp-based\
    \ service, the provider sets the retransmission\n   counter to a small value (e.g.,\
    \ 2), and now starts a small timer.\n   Regardless, the provider enters the WAIT1\
    \ state.\n        Event:     ConnectRequest PDU received\n   The provider issues\
    \ the P-CONNECT.INDICATION primitive and enters the\n   WAIT2 state.\n       \
    \ Event:     any other PDU received\n   If the PDU is not an Abort PDU, the provider\
    \ constructs a provider-\n   initiated Abort PDU, which is put on the input queue\
    \ for the\n   serializer.  Regardless, the provider remains in the IDLE state.\n\
    \                                    WAIT1 state\n        Event:     P-U-ABORT.REQUEST\
    \ primitive issued\n   The user data parameter is placed in an Abort PDU, which\
    \ is put on\n   the input queue for the serializer.  The provider enters the IDLE\n\
    \   state.\n        Event:     ConnectResponse PDU received\n   For the udp-based\
    \ service, the timer is cancelled.  If the PDU\n   indicates rejection, the P-CONNECT.CONFIRMATION(-)\
    \ primitive is\n   issued and the provider enters the IDLE state.  Otherwise,\
    \ the P-\n   CONNECT.CONFIRMATION(+) primitive is issued and the provider enters\n\
    \   the DATA state.\n        Event:     user-initiated Abort PDU received\n  \
    \ The provider issues the P-U-ABORT.INDICATION primitive and enters the\n   IDLE\
    \ state.\n        Event:     any other PDU received\n   If the PDU not an Abort\
    \ PDU, the provider constructs a provider-\n   initiated Abort PDU, which is put\
    \ on the input queue for the\n   serializer.  Regardless, The provider issues\
    \ the P-P-ABORT.INDICATION\n   primitive and enters the the IDLE state.\n    \
    \    Event:     timer expires\n   The provider decrements the retransmission counter.\
    \  If the resulting\n   value is less than or equal to zero, the provider issues\
    \ the P-\n   CONNECT.CONFIRMATION(-) primitive and enters the IDLE state.\n  \
    \ Otherwise, a ConnectRequest PDU is put on the input queue for the\n   serializer,\
    \ the small timer is started again, and the provider\n   remains in the WAIT1\
    \ state.\n                                    WAIT2 state\n        Event:    \
    \ P-CONNECT.RESPONSE primitive issued\n   The user data parameter is placed in\
    \ a ConnectResponse PDU, which is\n   put on the input queue for the serializer.\
    \  If the result parameter\n   had the value user-rejection, the provider enters\
    \ the IDLE state.\n   Otherwise if the parameter had the value acceptance, the\
    \ provider\n   enters the DATA state.\n        Event:     P-U-ABORT.REQUEST primitive\
    \ issued\n   The user data parameter is placed in an Abort PDU, which is put on\n\
    \   the input queue for the serializer.  The provider enters the IDLE\n   state.\n\
    \        Event:     user-initiated Abort PDU received\n   The provider issues\
    \ the P-U-ABORT.INDICATION primitive and enters the\n   IDLE state.\n        Event:\
    \     any other PDU received\n   If the PDU is not an Abort PDU, the provider\
    \ constructs a provider-\n   initiated Abort PDU, which is put on the input queue\
    \ for the\n   serializer.  Regardless, The provider issues the P-P-ABORT.INDICATION\n\
    \   primitive and enters the the IDLE state.\n                               \
    \     DATA state\n        Event:     P-DATA.REQUEST primitive issued\n   The user\
    \ data parameter is placed in a UserData PDU, which is put on\n   the input queue\
    \ for the serializer.  The provider remains in the DATA\n   state.\n        Event:\
    \     P-RELEASE.REQUEST primitive issued\n   The user data parameter is placed\
    \ in a ReleaseRequest PDU, which is\n   put on the input queue for the serializer.\n\
    \   For the udp-based service, the provider sets the retransmission\n   counter\
    \ to a small value (e.g., 2), and now starts a small timer.\n   Regardless, the\
    \ provider enters the WAIT3 state.\n        Event:     P-U-ABORT.REQUEST primitive\
    \ issued\n   The user data parameter is placed in an Abort PDU, which is put on\n\
    \   the input queue for the serializer.  The provider enters the IDLE\n   state.\n\
    \        Event:     UserData PDU received\n   The provider issues the P-DATA.INDICATION\
    \ primitive and remains in\n   the DATA state.\n        Event:     ReleaseRequest\
    \ PDU received\n   The provider issues the P-RELEASE.INDICATION primitive, and\
    \ enters\n   the WAIT4 state.\n        Event:     user-initiated Abort PDU received\n\
    \   The provider issues the P-U-ABORT.INDICATION primitive and enters\n    the\
    \ IDLE state.\n        Event:     any other PDU received\n   If the PDU is not\
    \ an Abort PDU, the provider constructs a provider-\n   initiated Abort PDU, which\
    \ is put on the input queue for the\n   serializer.  Regardless, the provider\
    \ issues the P-P-ABORT.INDICATION\n   primitive and enters the the IDLE state.\n\
    \                                    WAIT3 state\n        Event:     P-U-ABORT.REQUEST\
    \ primitive issued\n   The user data parameter is placed in an Abort PDU, which\
    \ is put on\n   the input queue for the serializer.  The provider enters the IDLE\n\
    \   state.\n        Event:     ReleaseResponse PDU received\n   For the udp-based\
    \ service, the timer is cancelled.  The provider\n   issues the P-RELEASE.CONFIRMATION\
    \ primitive and enters the IDLE\n   state.\n        Event:     user-initiated\
    \ Abort PDU received\n   The provider issues the P-U-ABORT.INDICATION primitive\
    \ and enters the\n   IDLE state.\n        Event:     any other PDU received\n\
    \   If the PDU is not an Abort PDU, the provider constructs a provider-\n   initiated\
    \ Abort PDU, which is put on the input queue for the\n   serializer.  Regardless,\
    \ the provider issues the P-P-ABORT.INDICATION\n   primitive and enters the the\
    \ IDLE state.\n        Event:     timer expires\n   The provider decrements the\
    \ retransmission counter.  If the resulting\n   value is less than or equal to\
    \ zero, the provider constructs a\n   provider-initiated Abort PDU, which is put\
    \ on the input queue for the\n   serializer.  It then issues the P-P-ABORT.INDICATION\
    \ primitive and\n   enters the IDLE state.  Otherwise, a ReleaseRequest PDU is\
    \ put on the\n   input queue for the serializer, the small timer is started again,\
    \ and\n   the provider remains in the WAIT3 state.\n                         \
    \           WAIT4 state\n        Event:     P-RELEASE.RESPONSE primitive issued\n\
    \   The user data parameter is placed in a ReleaseResponse PDU, which is\n   put\
    \ on the input queue for the serializer.  The provider now enters\n   the IDLE\
    \ state.\n        Event:     P-U-ABORT.REQUEST primitive issued\n   The user data\
    \ parameter is placed in an Abort PDU, which is put on\n   the input queue for\
    \ the serializer.  The provider now enters the IDLE\n   state.\n        Event:\
    \     user-initiated Abort PDU received\n   The provider issues the P-U-ABORT.INDICATION\
    \ primitive and enters the\n   IDLE state.\n        Event:     any other PDU received\n\
    \   If the PDU is not an Abort PDU, the provider constructs a provider-\n   initiated\
    \ Abort PDU, which is put on the input queue for the\n   serializer.  Regardless,\
    \ the provider issues the P-P-ABORT.INDICATION\n   primitive and enters the the\
    \ IDLE state.\n"
- title: 11. Directory Services
  contents:
  - "11. Directory Services\n   Although not properly part of the presentation service,\
    \ this memo\n   assumes and specifies a minimal Directory service capability for\
    \ use\n   by the application-entity.\n   The function of the Directory Service\
    \ Element is to provide two\n   mappings: first, a service name is mapped into\
    \ an application entity\n   title, which is a global handle on the service; and,\
    \ second, the\n   application-entity title is mapped onto a presentation address.\n\
    \   The structure of presentation addresses were defined in Section 5.\n   The\
    \ structure of application-entity titles is less solidly agreed\n   upon at the\
    \ present time.  Since objects of this type are not\n   interpreted by the presentation\
    \ service, this memo does not specify\n   their structure.  If the DIS version\
    \ of association control is being\n   used, then use of an OBJECT IDENTIFIER will\
    \ suffice.  If the IS\n   version is being employed, then application-entity titles\
    \ consist of\n   two parts: an application-process title and an application-entity\n\
    \   qualifier.  It is suggested that the AP-Title use an OBJECT\n   IDENTIFIER\
    \ and that the AE-Qualifier use NULL.\n   This memo requires the following mapping\
    \ rules:\n      1.  The service name for an OSI application-entity using the\n\
    \      mechanisms proposed by this memo is:\n              <designator> \"-\"\
    \ <qualifier>\n      where <designator> is a string denoting either domain name\
    \ or a\n      32-bit IP address, and <qualifier> is a string denoting the type\n\
    \      of application-entity desired, e.g.,\n              \"gonzo.twg.com-mgmtinfobase\"\
    \n      2.  Any locally defined mapping rules may be used to map the\n      service\
    \ designation into an application-entity title.\n      3.  The application-entity\
    \ title is then mapped into a\n      presentation address, with uninterpreted\
    \ transport, session, and\n      presentation selectors, and one or more network\
    \ addresses, each\n      containing:\n         -the 32-bit IP address resolved\
    \ from the <designator> portion\n          of the service name,\n         - a\
    \ set indicating which transport services are available\n           at the IP\
    \ address,\n         - the 16-bit port number resolved from the <qualifier>\n\
    \           portion of the service name (using the Assigned Numbers\n        \
    \   document), and\n         - optionally, a presentation selector, which is an\n\
    \           uninterpreted sequence of octets.\n   The method by which the mappings\
    \ are obtained are straight-forward.\n   The directory services element employs\
    \ the Domain Name System along\n   with a local table which may be used to resolve\
    \ the address employing\n   local rules.\n   In the simplest of implementations,\
    \ the DNS is used to map the\n   <designator> to an IP address, and to fill-in\
    \ the set of transport\n   services available at the IP address.  The port number\
    \ is found in a\n   local table derived from the current Assigned Numbers document.\n\
    \   Finally, the presentation selector is empty.\n   A more ambitious implementation\
    \ would use a local table to perhaps\n   provide a presentation selector.  This\
    \ would be useful, e.g., in\n   \"proxy\" connections.  The network address would\
    \ resolve to the proxy\n   agent for the non-IP device, and the presentation selector\
    \ would\n   indicate to the proxy agent the particular non-IP device desired.\n\
    \   This implies, of course, that the local table and the proxy agent\n   bilaterally\
    \ agree as to the interpretation of each presentation\n   selector.\n"
- title: 12. Remarks
  contents:
  - "12. Remarks\n   To begin, if one really wanted to implement ISO applications\
    \ in a\n   TCP/IP-based network, then the method proposed by [RFC1006] is the\n\
    \   preferred method for achieving this.  However, in a constrained\n   environment,\
    \ where it is necessary to host an application layer\n   entity with a minimal\
    \ amount of underlying OSI infrastructure, this\n   memo proposes an alternative\
    \ mechanism.  It should be noted that an\n   OSI application realized using this\
    \ approach can be moved directly to\n   an [RFC1006]-based environment with no\
    \ modifications.\n   A key motivation therefore is to minimize the size of the\
    \ alternate\n   underling infrastructure specified by this memo.  As more and\
    \ more\n   presentation services functionality is added, the method proposed\n\
    \   herein would begin to approximate the ISO presentation protocol.\n   Since\
    \ this in contrary to the key motivation, featurism must be\n   avoided at all\
    \ costs.\n"
- title: 13. Acknowledgements
  contents:
  - "13. Acknowledgements\n   Several individuals contributed to the technical quality\
    \ of this\n   memo:\n           Karl Auerbach, Epilogue Technologies\n       \
    \    Joseph Bannister, Unisys\n           Amatzia Ben-Artzi, Sytek\n         \
    \  Stephen Dunford, Unisys\n           Lee Labarre, MITRE\n           Keith McCloghrie,\
    \ The Wollongong Group\n           Jim Robertson, Bridge Communications\n    \
    \       Glenn Trewitt, Stanford University\n"
- title: 14. References
  contents:
  - "14. References\n     [ISO7498]  Information Processing Systems - Open Systems\n\
    \                Interconnection, \"Basic Reference Model\", October, 1984.\n\
    \     [ISO8509]  Information Processing Systems - Open Systems\n             \
    \   Interconnection, \" Service Conventions\".\n     [ISO8650]  Information Processing\
    \ Systems - Open Systems\n                Interconnection, \" Protocol Specification\
    \ for the\n                Association Control Service Element (Final Text\n \
    \               of DIS 8650)\", January, 1988.\n     [ISO8822]  Information Processing\
    \ Systems - Open Systems\n                Interconnection, \" Connection Oriented\
    \ Presentation\n                Service Definition (Final Text of DIS 8822)\"\
    ,\n                April, 1988.\n     [ISO8823]  Information Processing Systems\
    \ - Open Systems\n                Interconnection, \" Connection Oriented Presentation\n\
    \                Protocol Specification (Final Text of DIS 8822)\",\n        \
    \        April, 1988.\n     [ISO8824]  Information Processing Systems - Open Systems\n\
    \                Interconnection, \" Specification of Abstract Syntax\n      \
    \          Notation One (ASN.1)\", December, 1987.\n     [ISO8825]  Information\
    \ Processing Systems - Open Systems\n                Interconnection, \"Specification\
    \ of basic encoding rules\n                for Abstract Syntax Notation One (ASN.1)\"\
    ,\n                December, 1987.\n     [ISO9072/2]  Information Processing Systems\
    \ - Text Communication\n                  MOTIS, \" Remote Operations Part 2:\
    \ Protocol\n                  Specification (Working Document for DIS 9072/2)\"\
    ,\n                  November, 1987.\n     [RFC768]  Postel, J., \"User Datagram\
    \ Protocol\", RFC 768, USC/ISI,\n               28 August 1980.\n     [RFC791]\
    \  Postel, J., \"Internet Protocol - DARPA Internet Program\n               Protocol\
    \ Specification\", RFC 791, USC/ISI,\n               September 1981.\n     [RFC793]\
    \  Postel, J., \"Transmission Control Protocol - DARPA\n               Internet\
    \ Program Protocol Specification\", RFC 793,\n               USC/ISI, September\
    \ 1981.\n     [RFC1006]  Rose, M., and D. Cass, \"ISO Transport 1 on Top of the\n\
    \                TCP Version: 3\", Northrop Research and Technology\n        \
    \        Center, May 1987.\n"
- title: 'Appendix A:'
  contents:
  - 'Appendix A:

    '
- title: Abstract Syntax Definitions
  contents:
  - "Abstract Syntax Definitions\n   RFC1085-PS DEFINITIONS ::=\n   BEGIN\n   PDUs\
    \ ::=\n           CHOICE {\n               connectRequest\n                  \
    \ ConnectRequest-PDU,\n               connectResponse\n                   ConnectResponse-PDU,\n\
    \               releaseRequest\n                   ReleaseRequest-PDU,\n     \
    \          releaseResponse\n                   ReleaseResponse-PDU,\n        \
    \       abort\n                   Abort-PDU,\n               userData\n      \
    \             UserData-PDU,\n               cL-userData\n                   CL-UserData-PDU\n\
    \           }\n   -- connect request PDU\n   ConnectRequest-PDU ::=\n       [0]\n\
    \           IMPLICIT SEQUENCE {\n               version[0]          -- version-1\
    \ corresponds to to this\n                                      memo\n       \
    \            IMPLICIT INTEGER { version-1(0) },\n               reference\n  \
    \                 SessionConnectionIdentifier,\n               calling\n     \
    \              PresentationSelector\n                   OPTIONAL,\n          \
    \     called[2]\n                   IMPLICIT PresentationSelector\n          \
    \         OPTIONAL,\n               asn[3]              -- the ASN for PCI #1\n\
    \                   IMPLICIT OBJECT IDENTIFIER,\n               user-data\n  \
    \                 UserData-PDU\n           }\n   SessionConnectionIdentifier ::=\n\
    \       [0]\n           SEQUENCE {\n               callingSSUserReference\n  \
    \                 T61String,\n               commonReference\n               \
    \    UTCTime,\n               additionalReferenceInformation[0]\n            \
    \       IMPLICIT T61String\n                   OPTIONAL\n           }\n   PresentationSelector\
    \ ::=\n       [1]\n           IMPLICIT OCTET STRING\n   -- connect response PDU\n\
    \   ConnectResponse-PDU ::=\n       [1]\n           IMPLICIT SEQUENCE {\n    \
    \           reference           -- present only in the udp-based\n           \
    \                        -- service\n                   SessionConnectionIdentifier\n\
    \                   OPTIONAL,\n               responding\n                   PresentationSelector\n\
    \                   OPTIONAL,\n               reason[2]           -- present only\
    \ if the connection\n                                   -- was rejected\n    \
    \               IMPLICIT Rejection-reason\n                   OPTIONAL,\n    \
    \           user-data           -- present only if reason is absent\n        \
    \                           -- OR has the\n                                  \
    \ -- value rejected-by-responder\n                   UserData-PDU\n          \
    \         OPTIONAL\n           }\n   Rejection-reason ::=\n           INTEGER\
    \ {\n               rejected-by-responder(0)\n               called-presentation-address-unknown(1),\n\
    \               local-limit-exceeded(3),\n               protocol-version-not-supported(4),\n\
    \           }\n   -- release request PDU\n   ReleaseRequest-PDU ::=\n       [2]\n\
    \           IMPLICIT SEQUENCE {\n               reference           -- present\
    \ only in the udp-based\n                                   -- service\n     \
    \              SessionConnectionIdentifier\n                   OPTIONAL,\n   \
    \            user-data\n                   UserData-PDU\n           }\n   -- release\
    \ response PDU\n   ReleaseResponse-PDU ::=\n       [3]\n           IMPLICIT SEQUENCE\
    \ {\n               reference           -- present only in the udp-based\n   \
    \                                -- service\n                   SessionConnectionIdentifier\n\
    \                   OPTIONAL,\n               user-data\n                   UserData-PDU\n\
    \           }\n   -- abort PDU\n   Abort-PDU ::=\n       [4]\n           SEQUENCE\
    \ {\n               reference           -- present only in the udp-based\n   \
    \                                -- service\n                   SessionConnectionIdentifier\n\
    \                   OPTIONAL,\n               user-data   -- MAY BE present on\
    \ user-initiated abort\n                   UserData-PDU\n                   OPTIONAL,\n\
    \               reason[1]   -- ALWAYS present on provider-initiated abort\n  \
    \                 IMPLICIT Abort-reason\n                   OPTIONAL\n       \
    \    }\n   Abort-reason ::=\n           INTEGER {\n               unspecified(0),\n\
    \               unrecognized-ppdu(1),\n               unexpected-ppdu(2),\n  \
    \             unrecognized-ppdu-parameter(4),\n               invalid-ppdu-parameter(5),\n\
    \               reference-mismatch(9)\n           }\n   -- data PDU\n   UserData-PDU\
    \ ::=\n       [5]                         -- this is the ASN.1 object\n      \
    \     ANY                     -- if it is a top-level PDU, it\n              \
    \                     -- is in PCI #1, otherwise PCI #3\n   -- data PDU for the\
    \ udp-based service\n   CL-UserData-PDU ::=\n       [6]\n           IMPLICIT SEQUENCE\
    \ {\n               reference\n                   SessionConnectionIdentifier,\n\
    \               user-data[0]                -- this is the ASN.1 object\n    \
    \               ANY                     -- it is always in PCI #1\n          \
    \ }\n   END\n"
- title: 'Appendix B:'
  contents:
  - 'Appendix B:

    '
- title: Example of Serialization
  contents:
  - "Example of Serialization\n   Consider the following call to ROSE:\n         \
    \  RO-INVOKE (operation number      = 5\n                      operation class\
    \       = synchronous\n                      argument              = NONE\n  \
    \                    invocation identifier = 1\n                      linked invocation\
    \ id. = NONE\n                      priority              = 0)\n             \
    \  .REQUEST\n   Ultimately, ROSE will use the P-DATA service:\n           P-DATA\
    \ (user data = {\n                                 1,        -- this is the PCI\n\
    \                                 {         -- this is the ASN.1 object\n    \
    \                                invokeID 1,\n                               \
    \     operation-value 5,\n                                    argument {}\n  \
    \                               }\n                               })\n       \
    \        .REQUEST\n   The presentation provider will construct a UserData PDU\
    \ and send this\n   via the transport connection:\n      [5] {\n            {\n\
    \              1,\n              5,\n              {}\n            }\n       \
    \   }\n   Applying the basic encoding rules for ASN.1, we have an stream of 12\n\
    \   octets.\n      a5  0a                                       [5]\n      tag\
    \ len\n      a0  08                               [0]\n      tag len\n      02\
    \  01  01           invokeID 1\n      tag len value\n      02  01  05        \
    \   operation-value 5\n      tag len value\n      30  00                     \
    \  argument NULL\n      tag len\n   Of course, in actual use, the argument would\
    \ not be NONE and this\n   could be expected to dominate the size of the UserData\
    \ PDU.  However,\n   it is worth nothing that the overhead of the encoding mechanism\
    \ used\n   is on the order of 10 octets, hardly a staggering amount!\n"
- title: 'Appendix C:'
  contents:
  - 'Appendix C:

    '
- title: Determination of Network Called Address
  contents:
  - "Determination of Network Called Address\n   As described in Section 10, when\
    \ the P-CONNECT.REQUEST primitive is\n   issued the presentation provider must\
    \ determine which of the network\n   addresses present in the called presentation\
    \ address parameter to use\n   for the presentation connection.  The first step\
    \ in this\n   determination is to examine the quality of service parameter and\n\
    \   consider only those network addresses which support the corresponding\n  \
    \ transport service.  In practice, it is likely that each network\n   address\
    \ will support exactly the same transport services, so using\n   quality of service\
    \ as a discriminant will either permit all or none\n   or the network addresses\
    \ present to be selected.  This appendix\n   describes a local policy which might\
    \ be employed when deciding which\n   network address to use.\n   The policy distinguishes\
    \ between \"underlying failures\" and\n   \"connection establishment failures\"\
    .  An \"underlying failure\" occurs\n   when, using the desired transport service,\
    \ the initiating\n   presentation provider is unable to contact the responding\n\
    \   presentation provider.  For the tcp-based service, this means that a\n   TCP\
    \ connection could not be established for some reason.  For the\n   udp-based\
    \ service, it means that a response was not received before\n   final time-out.\
    \  In contrast, a \"connection establishment failure\"\n   occurs when the responding\
    \ presentation provider can be contacted,\n   but the presentation connection\
    \ is rejected by either the\n   presentation provider or the correspondent presentation\
    \ user.\n   The policy is simple: starting with the first network address\n  \
    \ present, attempt the connection procedure.  If the procedure fails\n   due to\
    \ an \"underlying failure\", then the next network address in the\n   list is\
    \ tried.  This process is repeated until either an underlying\n   connection is\
    \ established or all network addresses are exhausted.\n   If, however, a \"connection\
    \ establishment failure\" occurs, then the\n   presentation provider immediately\
    \ indicates this failure to the\n   presentation user and no further network addresses\
    \ are considered.\n   Note that this is only one conformant policy of many.  For\
    \ example,\n   the presentation provider may wish to order network addresses based\n\
    \   on the \"intensity\" associated with the members present in the set of\n \
    \  transport services for each network address.\n"
- title: 'Author''s Address:'
  contents:
  - "Author's Address:\n   Marshall Rose\n   The Wollongong Group\n   1129 San Antonio\
    \ Road\n   Palo Alto, CA 94303\n   Phone: (415) 962-7100\n   EMail: mrose@TWG.COM\n"
