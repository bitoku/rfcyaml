Abstract The Secure Shell protocol (SSH) is a protocol for secure remote login and other secure network services over an insecure network.
The Generic Security Service Application Program Interface (GSS API) provides security services to callers in a mechanism independent fashion.
This memo describes methods for using the GSS API for authentication and key exchange in SSH.
It defines an SSH user authentication method that uses a specified GSS API mechanism to authenticate a user, and a family of SSH key exchange methods that use GSS API to authenticate a Diffie Hellman key exchange.
This memo also defines a new host public key algorithm that can be used when no operations are needed using a host's public key, and a new user authentication method that allows an authorization name to be used in conjunction with any authentication that has already occurred as a side effect of GSS API based key exchange.
This document describes the methods used to perform key exchange and user authentication in the Secure Shell protocol using the GSS API.
To do this, it defines a family of key exchange methods, two user authentication methods, and a new host key algorithm.
These definitions allow any GSS API mechanism to be used with the Secure Shell protocol.
This document should be read only after reading the documents describing the SSH protocol architecture [SSH ARCH], transport layer protocol [SSH TRANSPORT], and user authentication protocol [SSH USERAUTH].
This document freely uses terminology and notation from the architecture document without reference or further explanation.
The data types used in the packets are defined in the SSH architecture document [SSH ARCH].
It is particularly important to note the definition of string allows binary content.
The SSH MSG USERAUTH REQUEST packet refers to a service; this service name is an SSH service name and has no relationship to GSS API service names.
Currently, the only defined service name is "ssh connection", which refers to the SSH connection protocol [SSH CONNECT].
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [KEYWORDS].
GSS API Authenticated Diffie Hellman Key Exchange
This section defines a class of key exchange methods that combine the Diffie Hellman key exchange from Section 8 of [SSH TRANSPORT] with mutual authentication using GSS API.
Since the GSS API key exchange methods described in this section do not require the use of public key signature or encryption algorithms, they MAY be used with any host key algorithm, including the "null" algorithm described in Section 5. 2.1.
Generic GSS API Key Exchange
The following symbols are used in this description:  C is the client, and S is the server  p is a large safe prime, g is a generator for a subgroup of GF(p), and q is the order of the subgroup
V S is S's version string, and V C is C's version
I C is C's KEXINIT message, and
I S is S's KEXINIT message 1.
C generates a random number
(1 < x < q) and computes
GSS Init sec context(), using the most recent reply token received from S during this exchange, if any.
For this call, the client MUST set mutual req flag to "true" to request that mutual authentication be performed.
It also MUST set integ req flag to "true" to request that per message integrity protection be supported for this context.
In addition, deleg req flag MAY be set to "true" to request access delegation, if requested by the user.
Since the key exchange process authenticates only the host, the setting of anon req flag is immaterial to this process.
If the client does not support the "gssapi keyex" user authentication method described in Section 4, or does not intend to use that method in conjunction with the GSS API context established during key exchange, then anon req flag SHOULD be set to "true".
Otherwise, this flag MAY be set to true if the client wishes to hide its identity.
Since the key exchange process will involve the exchange of only a single token once the context has been established, it is not necessary that the GSS API context support detection of replayed or out of sequence tokens.
Thus, replay det req flag and sequence req flag need not be set for this process.
These flags SHOULD be set to "false".
If the resulting major status code is
GSS S COMPLETE and the mutual state flag is not true, then mutual authentication has not been established, and the key exchange MUST fail.
If the resulting major status code is
GSS S COMPLETE and the integ avail flag is not true, then per message integrity protection is not available, and the key exchange MUST fail.
If the resulting major status code is
GSS S COMPLETE and both the mutual state and integ avail flags are true, the resulting output token is sent to S.
If the resulting major status code is
GSS S CONTINUE NEEDED, the output token is sent to S, which will reply with a new token to be provided to GSS Init sec context().
The client MUST also include "e" with the first message it sends to the server during this process; if the server receives more than one "e" or none at all, the key exchange fails.
It is an error if the call does not produce a token of non  zero length to be sent to the server.
In this case, the key exchange MUST fail.
S calls GSS Accept sec context(), using the token received from C.
If the resulting major status code is
GSS S COMPLETE and the mutual state flag is not true, then mutual authentication has not been established, and the key exchange MUST fail.
If the resulting major status code is
GSS S COMPLETE and the integ avail flag is not true, then per message integrity protection is not available, and the key exchange MUST fail.
If the resulting major status code is
GSS S COMPLETE and both the mutual state and integ avail flags are true, then the security context has been established, and processing continues with step 4.
If the resulting major status code is GSS S CONTINUE NEEDED, then the output token is sent to C, and processing continues with step 2.
If the resulting major status code is GSS S COMPLETE, but a non zero length reply token is returned, then that token is sent to the client.
S generates a random number y (0 < y < q) and computes f
y mod p, and H
It then calls GSS GetMIC() to obtain a GSS API message integrity code for H.  S then sends f and the message integrity code (MIC) to C. 5.
This step is performed only (1) if the server's final call to GSS Accept sec context() produced a non zero length final reply token to be sent to the client and (2) if no previous call by the client to GSS Init sec context() has resulted in a major status of GSS S COMPLETE.
Under these conditions, the client makes an additional call to GSS Init sec context() to process the final reply token.
This call is made exactly as described above.
However, if the resulting major status is anything other than GSS S COMPLETE, or a non zero length token is returned, it is an error and the key exchange MUST fail.
C computes K   f^x mod p, and H
It then calls GSS VerifyMIC() to verify that the MIC sent by S matches H.
If the MIC is not successfully verified, the key exchange MUST fail.
Either side MUST NOT send or accept e or f values that are not in the range [1, p 1].
If this condition is violated, the key exchange fails.
If any call to GSS Init sec context() or GSS Accept sec context() returns a major status other than GSS S COMPLETE or GSS S CONTINUE NEEDED, or any other GSS API call returns a major status other than GSS S COMPLETE, the key exchange fails.
In this case, several mechanisms are available for communicating error information to the peer before terminating the connection as required by [SSH TRANSPORT]:
In this case, if an error token is also sent (see below), then this message MUST be sent before the error token.
If the key exchange fails due to a GSS API error returned from the server's call to GSS Accept sec context(), and an "error token" is also returned, then the server SHOULD send the error token to the client to allow completion of the GSS security exchange.
If the key exchange fails due to a GSS API error returned from the client's call to GSS Init sec context(), and an "error token" is also returned, then the client SHOULD send the error token to the server to allow completion of the GSS security exchange.
As noted in Section 9, it may be desirable under site security policy to obscure information about the precise nature of the error; thus, it is RECOMMENDED that implementations provide a method to suppress these messages as a matter of policy.
This is implemented with the following messages.
The hash algorithm for computing the exchange hash is defined by the method name, and is called HASH.
The group used for Diffie Hellman key exchange and the underlying GSS API mechanism are also defined by the method name.
Upon receiving the SSH MSG KEXGSS INIT message, the server MAY send the following message, prior to any other messages, to inform the client of its host key.
Since this key exchange method does not require the host key to be used for any encryption operations, this message is OPTIONAL.
If the "null" host key algorithm described in Section 5 is used, this message MUST NOT be sent.
If this message is sent, the server public host key(s)
and/or certificate(s) in this message are encoded as a single string, in the format specified by the public key type in use (see [SSH TRANSPORT], Section 6.6).
In traditional SSH deployments, host keys are normally expected to change infrequently, and there is often no mechanism for validating host keys not already known to the client.
As a result, the use of a new host key by an already known host is usually considered an indication of a possible man in the middle attack, and clients often present strong warnings and/or abort the connection in such cases.
By contrast, when GSS API based key exchange is used, host keys sent via the SSH MSG KEXGSS HOSTKEY message are authenticated as part of the GSS API key exchange, even when previously unknown to the client.
Further, in environments in which GSS API based key exchange is used heavily, it is possible and even likely that host keys will change much more frequently and/or without advance warning.
Therefore, when a new key for an already known host is received via the SSH MSG KEXGSS HOSTKEY message, clients SHOULD NOT issue strong warnings or abort the connection, provided the GSS API
In order to facilitate key re exchange after the user's GSS API credentials have expired, client implementations SHOULD store host keys received via SSH MSG KEXGSS HOSTKEY for the duration of the session, even when such keys are not stored for long term use.
Each time the server's call to GSS Accept sec context() returns a major status code of GSS S CONTINUE NEEDED, it sends the following reply to the client:
SSH MSG KEXGSS CONTINUE string
output token (from GSS Accept sec context())
If the client receives this message after a call to GSS Init sec context() has returned a major status code of GSS S COMPLETE, a protocol error has occurred and the key exchange MUST fail.
Each time the client receives the message described above, it makes another call to GSS Init sec context().
The server and client continue to trade these two messages as long as the server's calls to GSS Accept sec context() result in major status codes of GSS S CONTINUE NEEDED.
When a call results in a major status code of GSS S COMPLETE, it sends one of two final messages.
If the server's final call to GSS Accept sec context() (resulting in a major status code of GSS S COMPLETE) returns a non zero length token to be sent to the client, it sends the following:
SSH MSG KEXGSS COMPLETE mpint
f string    per msg token (MIC of H)
TRUE string    output token (from GSS Accept sec context())
If the client receives this message after a call to GSS Init sec context() has returned a major status code of GSS S COMPLETE, a protocol error has occurred and the key exchange MUST fail.
If the server's final call to GSS Accept sec context() (resulting in a major status code of GSS S COMPLETE) returns a zero length token or no token at all, it sends the following:
SSH MSG KEXGSS COMPLETE mpint
f string    per msg token (MIC of H)
If the client receives this message when no call to GSS Init sec context() has yet resulted in a major status code of GSS S COMPLETE, a protocol error has occurred and the key exchange MUST fail.
If a server sends both this message and an SSH MSG KEXGSS ERROR message, the SSH MSG KEXGSS ERROR message MUST be sent first, to allow clients to record and/or display the error information before processing the error token.
This is important because a client processing an error token will likely disconnect without reading any further messages.
In the event of a GSS API error on the server, the server MAY send the following message before terminating the connection: byte
SSH MSG KEXGSS ERROR uint32
minor status string    message string    language tag
The message text MUST be encoded in the UTF 8 encoding described in [UTF8].
Language tags are those described in [LANGTAG].
Note that the message text may contain multiple lines separated by carriage return line feed (CRLF) sequences.
Application developers should take this into account when displaying these messages.
The hash H is computed as the HASH hash of the concatenation of the following: string    V C, the client's version string (CR, NL excluded)
string    V S, the server's version string (CR, NL excluded)
I C, the payload of the client's SSH MSG KEXINIT string
The exchange hash SHOULD be kept secret.
If no SSH MSG KEXGSS HOSTKEY message has been sent by the server or received by the client, then the empty string is used in place of K S when computing the exchange hash.
The GSS GetMIC call MUST be applied over H, not the original data.
This section describes a modification to the generic GSS API  authenticated Diffie Hellman key exchange to allow the negotiation of the group to be used, using a method based on that described in [GROUP EXCHANGE].
The server keeps a list of safe primes and corresponding generators that it can select from.
These are chosen as described in Section 3 of [GROUP EXCHANGE].
The client requests a modulus from the server, indicating the minimum, maximum, and preferred sizes; the server responds with a suitable modulus and generator.
The exchange then proceeds as described in Section 2.1 above.
This description uses the following symbols, in addition to those defined above:  n is the size of the modulus p in bits that the client would like to receive from the server  min and max are the minimal and maximal sizes of p in bits that are acceptable to the client 1.
C sends "min    n    max" to S, indicating the minimal acceptable group size, the preferred size of the group, and the maximal group size in bits the client will accept.
S finds a group that best matches the client's request, and sends "p    g" to C. 3.
The exchange proceeds as described in Section 2.1 above, beginning with step 1, except that the exchange hash is computed as described below.
Servers and clients SHOULD support groups with a modulus length of k bits, where 1024 <  k <  8192.
The recommended values for min and max are 1024 and 8192, respectively.
This is implemented using the following messages, in addition to those described above: First, the client sends:
SSH MSG KEXGSS GROUPREQ uint32    min, minimal size in bits of an acceptable group uint32    n, preferred size in bits of the group
This is followed by the message exchange described above in Section 2.1, except that the exchange hash H is computed as the HASH hash of the concatenation of the following: string    V C, the client's version string (CR, NL excluded) string    V S, the server's version string (CR, NL excluded)
I C, the payload of the client's SSH MSG KEXINIT string
Each of these methods specifies GSS API authenticated Diffie Hellman key exchange as described in Section 2.1 with SHA 1 as HASH, and the group defined in Section 8.1 of [SSH TRANSPORT].
The method name for each method is the concatenation of the string "gss group1 sha1 " with the Base64 encoding of the MD5 hash [MD5] of the ASN.1 Distinguished Encoding Rules (DER) encoding [ASN1] of the underlying GSS API mechanism's Object Identifier (OID).
Base64 encoding is described in Section 6.8 of [MIME].
Each and every such key exchange method is implicitly registered by this specification.
The IESG is considered to be the owner of all such key exchange methods; this does NOT imply that the IESG is considered to be the owner of the underlying GSS API mechanism.
Each of these methods specifies GSS API authenticated Diffie Hellman key exchange as described in Section 2.1 with SHA 1 as HASH, and the group defined in Section 8.2 of [SSH TRANSPORT].
The method name for each method is the concatenation of the string "gss group14 sha1 " with the Base64 encoding of the MD5 hash [MD5] of the ASN.1 DER encoding [ASN1] of the underlying GSS API mechanism's OID.
Base64 encoding is described in Section 6.8 of [MIME].
Each and every such key exchange method is implicitly registered by this specification.
The IESG is considered to be the owner of all such key exchange methods; this does NOT imply that the IESG is considered to be the owner of the underlying GSS API mechanism.
Each of these methods specifies GSS API authenticated Diffie Hellman key exchange as described in Section 2.2 with SHA 1 as HASH.
The method name for each method is the concatenation of the string "gss  gex sha1 " with the Base64 encoding of the MD5 hash [MD5] of the ASN.1 DER encoding [ASN1] of the underlying GSS API mechanism's OID.
Base64 encoding is described in Section 6.8 of [MIME].
Each and every such key exchange method is implicitly registered by this specification.
The IESG is considered to be the owner of all such key exchange methods; this does NOT imply that the IESG is considered to be the owner of the underlying GSS API mechanism.
Key Exchange Methods Key exchange method names starting with "gss " are reserved for key exchange methods that conform to this document; in particular, for those methods that use the GSS API authenticated Diffie Hellman key exchange algorithm described in Section 2.1, including any future methods that use different groups and/or hash functions.
The intent is that the names for any such future methods be defined in a similar manner to that used in Section 2.3.
This section describes a general purpose user authentication method based on [GSSAPI].
It is intended to be run over the SSH user authentication protocol [SSH USERAUTH].
The authentication method name for this protocol is "gssapi with  mic".
GSS API Authentication Overview GSS API authentication must maintain a context.
Authentication begins when the client sends an SSH MSG USERAUTH REQUEST, which specifies the mechanism OIDs the client supports.
If the server supports any of the requested mechanism OIDs, the server sends an SSH MSG USERAUTH GSSAPI RESPONSE message containing the mechanism OID.
After the client receives SSH MSG USERAUTH GSSAPI RESPONSE, the client and server exchange SSH MSG USERAUTH GSSAPI TOKEN packets until the authentication mechanism either succeeds or fails.
If at any time during the exchange the client sends a new SSH MSG USERAUTH REQUEST packet, the GSS API context is completely discarded and destroyed, and any further GSS API authentication MUST restart from the beginning.
If the authentication succeeds and a non empty user name is presented by the client, the SSH server implementation verifies that the user name is authorized based on the credentials exchanged in the GSS API exchange.
If the user name is not authorized, then the authentication MUST fail.
The GSS API authentication method is initiated when the client sends an SSH MSG USERAUTH REQUEST
the number of mechanism OIDs client supports string[n
] mechanism OIDs Mechanism OIDs are encoded according to the ASN.1 Distinguished Encoding Rules (DER), as described in [ASN1] and in Section 3.1 of [GSSAPI].
The mechanism OIDs MUST be listed in order of preference, and the server must choose the first mechanism OID on the list that it supports.
The client SHOULD send GSS API mechanism OIDs only for mechanisms that are of the same priority, compared to non GSS API authentication methods.
Otherwise, authentication methods may be executed out of order.
Thus, the client could first send an SSH MSG USERAUTH REQUEST for one GSS API mechanism, then try public key authentication, and then try another GSS API mechanism.
If the server does not support any of the specified OIDs, the server MUST fail the request by sending an SSH MSG USERAUTH FAILURE packet.
The user name may be an empty string if it can be deduced from the results of the GSS API authentication.
If the user name is not empty, and the requested user does not exist, the server MAY disconnect or MAY send a bogus list of acceptable authentications but never accept any.
This makes it possible for the server to avoid disclosing information about which accounts exist.
In any case, if the user does not exist, the authentication request MUST NOT be accepted.
Note that the 'user name' value is encoded in ISO 10646 UTF 8.
It is up to the server how it interprets the user name and determines whether the client is authorized based on his GSS API credentials.
In particular, the encoding used by the system for user names is a matter for the ssh server implementation.
However, if the client reads the user name in some other encoding (e.g., ISO 8859 1 ISO Latin1), it MUST convert the user name to ISO 10646 UTF 8 before transmitting, and the server MUST convert the user name to the encoding used on that system for user names.
Any normalization or other preparation of names is done by the ssh server based on the requirements of the system, and is outside the scope of SSH.
SSH implementations which maintain private user databases SHOULD prepare user names as described by [SASLPREP].
The client MAY at any time continue with a new SSH MSG USERAUTH REQUEST message, in which case the server MUST abandon the previous authentication attempt and continue with the new one.
The server responds to the SSH MSG USERAUTH REQUEST with either an SSH MSG
USERAUTH FAILURE if none of the mechanisms are supported or with an SSH MSG USERAUTH GSSAPI RESPONSE as follows
The mechanism OID must be one of the OIDs sent by the client in the SSH MSG USERAUTH REQUEST packet.
Once the mechanism OID has been selected, the client will then initiate an exchange of one or more pairs of SSH MSG USERAUTH GSSAPI TOKEN packets.
These packets contain the tokens produced from the 'GSS Init sec context()' and 'GSS Accept sec context()' calls.
The actual number of packets exchanged is determined by the underlying GSS API mechanism.
If an error occurs during this exchange on server side, the server can terminate the method by sending an SSH MSG USERAUTH FAILURE packet.
If an error occurs on client side, the client can terminate the method by sending a new SSH MSG USERAUTH REQUEST packet.
When calling GSS Init sec context(), the client MUST set integ req flag to "true" to request that per message integrity protection be supported for this context.
In addition, deleg req flag MAY be set to "true" to request access delegation, if requested by the user.
Since the user authentication process by its nature authenticates only the client, the setting of mutual req flag is not needed for this process.
This flag SHOULD be set to "false".
Since the user authentication process will involve the exchange of only a single token once the context has been established, it is not necessary that the context support detection of replayed or out of  sequence tokens.
Thus, the setting of replay det req flag and sequence req flag are not needed for this process.
These flags SHOULD be set to "false".
Additional SSH MSG USERAUTH GSSAPI TOKEN messages are sent if and only if the calls to the GSS API routines produce send tokens of non  zero length.
Any major status code other than GSS S COMPLETE or GSS S
CONTINUE NEEDED SHOULD be a failure.
In some cases, it is possible to obtain improved security by allowing access only if the client sends a valid message integrity code (MIC) binding the GSS API context to the keys used for encryption and integrity protection of the SSH session.
With this extra level of protection, a "man in the middle" attacker who has convinced a client of his authenticity cannot then relay user authentication messages between the real client and server, thus gaining access to the real server.
This additional protection is available when the negotiated GSS API context supports per message integrity protection, as indicated by the setting of the integ avail flag on successful return from GSS Init sec context() or GSS Accept sec context().
This message MUST be sent only if GSS Init sec context() returned GSS S COMPLETE.
If a token is also returned, then the SSH MSG USERAUTH GSSAPI TOKEN message MUST be sent before this one.
If this message is received by the server when the negotiated GSS API context does not support per message integrity protection, the server MUST fail the authentication.
As with all SSH authentication methods, successful completion is indicated by an SSH MSG
USERAUTH SUCCESS if no other authentication is required, or an SSH MSG USERAUTH FAILURE with the partial success flag set if the server requires further authentication.
This packet SHOULD be sent immediately following receipt of the SSH MSG USERAUTH GSSAPI EXCHANGE COMPLETE packet.
In the event that a GSS API error occurs on the server during context establishment, the server MAY send the following message to inform the client of the details of the error before sending an SSH MSG USERAUTH FAILURE message: byte
SSH MSG USERAUTH GSSAPI ERROR uint32
minor status string    message string    language tag
The message text MUST be encoded in the UTF 8 encoding described in [UTF8].
Language tags are those described in [LANGTAG].
Note that the message text may contain multiple lines separated by carriage return line feed (CRLF) sequences.
Application developers should take this into account when displaying these messages.
Clients receiving this message MAY log the error details and/or report them to the user.
Any server sending this message MUST ignore any SSH MSG UNIMPLEMENTED sent by the client in response.
This message implies that the authentication is about to fail, and is defined to allow the error token to be communicated without losing synchronization.
When a server sends this message, it MUST be followed by an SSH MSG USERAUTH FAILURE message, which is to be interpreted as applying to the same authentication request.
A client receiving this message SHOULD wait for the following SSH MSG USERAUTH FAILURE message before beginning another authentication attempt.
When a client sends this message, it MUST be followed by a new authentication request or by terminating the connection.
A server receiving this message MUST NOT send an SSH MSG USERAUTH FAILURE in reply, since such a message might otherwise be interpreted by a client as a response to the following authentication sequence.
Any server sending this message MUST ignore any SSH MSG UNIMPLEMENTED sent by the client in response.
If a server sends both this message and an SSH MSG USERAUTH GSSAPI ERROR message, the SSH MSG USERAUTH GSSAPI ERROR message MUST be sent first, to allow the client to store and/or display the error status before processing the error token.
Authentication Using GSS API Key Exchange
This section describes a user authentication method building on the framework described in [SSH USERAUTH].
This method performs user authentication by making use of an existing GSS API context established during key exchange.
The authentication method name for this protocol is "gssapi keyex".
This method may be used only if the initial key exchange was performed using a GSS API based key exchange method defined in accordance with Section 2.
The GSS API context used with this method is always that established during an initial GSS API based key exchange.
Any context established during key exchange for the purpose of rekeying MUST NOT be used with this method.
The server SHOULD include this user authentication method in the list of methods that can continue (in an SSH MSG
if the initial key exchange was performed using a GSS API based key exchange method and provides information about the user's identity that is useful to the server.
It MUST NOT include this method if the initial key exchange was not performed using a GSS API based key exchange method defined in accordance with Section 2.
The client SHOULD attempt to use this method if it is advertised by the server, initial key exchange was performed using a GSS API based key exchange method, and this method has not already been tried.
The client SHOULD NOT try this method more than once per session.
It MUST NOT try this method if initial key exchange was not performed using a GSS API based key exchange method defined in accordance with Section 2.
If a server receives a request for this method when initial key exchange was not performed using a GSS API based key exchange method defined in accordance with Section 2, it MUST return SSH MSG USERAUTH FAILURE.
Upon receiving this message when initial key exchange was performed using a GSS API based key exchange method, the server uses GSS VerifyMIC() to verify that the MIC received is valid.
If the MIC is not valid, the user authentication fails, and the server MUST return SSH MSG
If the MIC is valid and the server is satisfied as to the user's credentials, it MAY return either SSH MSG USERAUTH SUCCESS or SSH MSG
FAILURE with the partial success flag set, depending on whether additional authentications are needed.
The "null" host key algorithm has no associated host key material and provides neither signature nor encryption algorithms.
Thus, it can be used only with key exchange methods that do not require any public key operations and do not require the use of host public key material.
The key exchange methods described in Section 2 are examples of such methods.
This algorithm is used when, as a matter of configuration, the host does not have or does not wish to use a public key.
For example, it can be used when the administrator has decided as a matter of policy to require that all key exchanges be authenticated using Kerberos [KRB5], and thus the only permitted key exchange method is the GSS API authenticated Diffie Hellman exchange described above, with Kerberos V5 as the underlying GSS API mechanism.
In such a configuration, the server implementation supports the "ssh dss" key algorithm (as required by [SSH TRANSPORT]), but could be prohibited by configuration from using it.
In this situation, the server needs some key exchange algorithm to advertise; the "null" algorithm fills this purpose.
Note that the use of the "null" algorithm in this way means that the server will not be able to interoperate with clients that do not support this algorithm.
This is not a significant problem, since in the configuration described, it will also be unable to interoperate with implementations that do not support the GSS API authenticated key exchange and Kerberos.
Any implementation supporting at least one key exchange method that conforms to Section 2 MUST also support the "null" host key algorithm.
Servers MUST NOT advertise the "null" host key algorithm unless it is the only algorithm advertised.
The following message numbers have been defined for use with GSS  API based key exchange methods: #define SSH MSG KEXGSS INIT
define SSH MSG KEXGSS GROUP
The numbers 30 49 are specific to key exchange and may be redefined by other kex methods.
The following message numbers have been defined for use with the 'gssapi with mic' user authentication method:
#define SSH MSG USERAUTH GSSAPI EXCHANGE COMPLETE 63
The numbers 60 79 are specific to user authentication and may be redefined by other user auth methods.
Note that in the method described in this document, message number 62 is unused.
In order to establish a GSS API security context, the SSH client needs to determine the appropriate targ name to use in identifying the server when calling GSS Init sec context().
For this purpose, the GSS API mechanism independent name form for host based services is used, as described in Section 4.1 of [GSSAPI].
In particular, the targ name to pass to GSS Init sec context() is obtained by calling GSS Import name() with an input name type of GSS C NT HOSTBASED SERVICE, and an input name string consisting of the string "host@" concatenated with the hostname of the SSH server.
Because the GSS API mechanism uses the targ name to authenticate the server's identity, it is important that it be determined in a secure fashion.
One common way to do this is to construct the targ name from the hostname as typed by the user; unfortunately, because some GSS API mechanisms do not canonicalize hostnames, it is likely that this technique will fail if the user has not typed a fully qualified, canonical hostname.
Thus, implementers may wish to use other methods, but should take care to ensure they are secure.
For example, one should not rely on an unprotected DNS record to map a host alias to the primary name of a server, or an IP address to a hostname, since an attacker can modify the mapping and impersonate the server.
Implementations of mechanisms conforming to this document MUST NOT use the results of insecure DNS queries to construct the targ name.
Clients MAY make use of a mapping provided by local configuration or use other secure means to determine the targ name to be used.
If a client system is unable to securely determine which targ name to use, then it SHOULD NOT use this mechanism.
This document recommends that channel bindings SHOULD NOT be specified in the calls during context establishment.
This document does not specify any standard data to be used as channel bindings, and the use of network addresses as channel bindings may break SSH in environments where it is most useful.
The use of the Simple and Protected GSS API Negotiation Mechanism [SPNEGO] in conjunction with the authentication and key exchange methods described in this document is both unnecessary and undesirable.
As a result, mechanisms conforming to this document MUST NOT use SPNEGO as the underlying GSS API mechanism.
Since SSH performs its own negotiation of authentication and key exchange methods, the negotiation capability of SPNEGO alone does not provide any added benefit.
In fact, as described below, it has the potential to result in the use of a weaker method than desired.
Normally, SPNEGO provides the added benefit of protecting the GSS API mechanism negotiation.
It does this by having the server compute a MIC of the list of mechanisms proposed by the client, and then checking that value at the client.
In the case of key exchange, this protection is not needed because the key exchange methods described here already perform an equivalent operation; namely, they generate a MIC of the SSH exchange hash, which is a hash of several items including the lists of key exchange mechanisms supported by both sides.
In the case of user authentication, the protection is not needed because the negotiation occurs over a secure channel, and the host's identity has already been proved to the user.
The use of SPNEGO combined with GSS API mechanisms used without SPNEGO can lead to interoperability problems.
For example, a client that supports key exchange using the Kerberos V5 GSS API mechanism [KRB5 GSS] only underneath SPNEGO will not interoperate with a server that supports key exchange only using the Kerberos V5 GSS API mechanism directly.
As a result, allowing GSS API mechanisms to be used both with and without SPNEGO is undesirable.
If a client's policy is to first prefer GSS API based
key exchange method X, then non GSS API method Y, then GSS API based method Z, and if a server supports mechanisms Y and Z but not X, then an attempt to use SPNEGO to negotiate a GSS API mechanism might result in the use of method Z when method Y would have been preferable.
As a result, the use of SPNEGO could result in the subversion of the negotiation algorithm for key exchange methods as described in Section 7.1 of [SSH TRANSPORT] and/or the negotiation algorithm for user authentication methods as described in [SSH USERAUTH].
IANA Considerations Consistent with Section 8 of [SSH ARCH] and Section 4.6 of [SSH NUMBERS]
The SSH host public key algorithm name "null", to name the NULL host key algorithm defined in Section 5.
The SSH user authentication method name "gssapi with mic", to name the GSS API user authentication method defined in Section 3.
The SSH user authentication method name "gssapi keyex", to name the GSS API user authentication method defined in Section 4.
The SSH user authentication method name "gssapi" is to be reserved, in order to avoid conflicts with implementations supporting an earlier version of this specification.
The SSH user authentication method name "external keyx" is to be reserved, in order to avoid conflicts with implementations supporting an earlier version of this specification.
This document creates no new registries.
This document describes authentication and key exchange protocols.
As such, security considerations are discussed throughout.
This protocol depends on the SSH protocol itself, the GSS API, any underlying GSS API mechanisms that are used, and any protocols on which such mechanisms might depend.
Each of these components plays a part in the security of the resulting connection, and each will have its own security considerations.
The key exchange method described in Section 2 depends on the underlying GSS API mechanism to provide both mutual authentication and per message integrity services.
If either of these features is not supported by a particular GSS API mechanism, or by a particular implementation of a GSS API mechanism, then the key exchange is not secure and MUST fail.
In order for the "external keyx" user authentication method to be used, it MUST have access to user authentication information obtained as a side effect of the key exchange.
If this information is unavailable, the authentication MUST fail.
Revealing information about the reason for an authentication failure may be considered by some sites to be an unacceptable security risk for a production environment.
However, having that information available can be invaluable for debugging purposes.
Thus, it is RECOMMENDED that implementations provide a means for controlling, as a matter of policy, whether to send SSH MSG USERAUTH GSSAPI ERROR, SSH MSG USERAUTH
GSSAPI ERRTOK, and SSH MSG KEXGSS ERROR messages, and SSH MSG KEXGSS CONTINUE messages containing a GSS API error token.
