- title: __initial_text__
  contents:
  - "      Applicability of Remote Direct Memory Access Protocol (RDMA)\n        \
    \        and Direct Data Placement Protocol (DDP)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the applicability of Remote Direct Memory\n\
    \   Access Protocol (RDMAP) and the Direct Data Placement Protocol (DDP).\n  \
    \ It compares and contrasts the different transport options over IP\n   that DDP\
    \ can use, provides guidance to ULP developers on choosing\n   between available\
    \ transports and/or how to be indifferent to the\n   specific transport layer\
    \ used, compares use of DDP with direct use of\n   the supporting transports,\
    \ and compares DDP over IP transports with\n   non-IP transports that support\
    \ RDMA functionality.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Definitions  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Direct Placement . . . . . . . . . . . . . . . . . . .\
    \ . . . .  5\n     3.1.  Direct Placement Using Only the LLP  . . . . . . . .\
    \ . . .  5\n     3.2.  Fewer Required ULP Interactions  . . . . . . . . . . .\
    \ . .  6\n   4.  Tagged Messages  . . . . . . . . . . . . . . . . . . . . . .\
    \ .  6\n     4.1.  Order-Independent Reception  . . . . . . . . . . . . . . .\
    \  7\n     4.2.  Reduced ULP Notifications  . . . . . . . . . . . . . . . .  7\n\
    \     4.3.  Simplified ULP Exchanges . . . . . . . . . . . . . . . . .  8\n  \
    \   4.4.  Order-Independent Sending  . . . . . . . . . . . . . . . .  9\n    \
    \ 4.5.  Untagged Messages and Tagged Buffers as ULP Credits  . . . 10\n   5. \
    \ RDMA Read  . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n   6.  LLP\
    \ Comparisons  . . . . . . . . . . . . . . . . . . . . . . . 13\n     6.1.  Multistreaming\
    \ Implications  . . . . . . . . . . . . . . . 13\n     6.2.  Out-of-Order Reception\
    \ Implications  . . . . . . . . . . . 13\n     6.3.  Header and Marker Overhead\
    \ . . . . . . . . . . . . . . . . 13\n     6.4.  Middlebox Support  . . . . .\
    \ . . . . . . . . . . . . . . . 14\n     6.5.  Processing Overhead  . . . . .\
    \ . . . . . . . . . . . . . . 14\n     6.6.  Data Integrity Implications  . .\
    \ . . . . . . . . . . . . . 14\n       6.6.1.  MPA/TCP Specifics  . . . . . .\
    \ . . . . . . . . . . . . 15\n       6.6.2.  SCTP Specifics . . . . . . . . .\
    \ . . . . . . . . . . . 15\n     6.7.  Non-IP Transports  . . . . . . . . . .\
    \ . . . . . . . . . . 15\n       6.7.1.  No RDMA-Layer Ack  . . . . . . . . .\
    \ . . . . . . . . . 16\n     6.8.  Other IP Transports  . . . . . . . . . . .\
    \ . . . . . . . . 16\n     6.9.  LLP-Independent Session Establishment  . . .\
    \ . . . . . . . 17\n       6.9.1.  RDMA-Only Session Establishment  . . . . .\
    \ . . . . . . 17\n       6.9.2.  RDMA-Conditional Session Establishment . . .\
    \ . . . . . 18\n   7.  Local Interface Implications . . . . . . . . . . . . .\
    \ . . . . 18\n   8.  Security Considerations  . . . . . . . . . . . . . . . .\
    \ . . . 19\n     8.1.  Connection/Association Setup . . . . . . . . . . . . .\
    \ . . 19\n     8.2.  Tagged Buffer Exposure . . . . . . . . . . . . . . . . .\
    \ . 19\n     8.3.  Impact of Encrypted Transports . . . . . . . . . . . . . .\
    \ 19\n   9.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n\
    \     9.1.  Normative References . . . . . . . . . . . . . . . . . . . 19\n  \
    \   9.2.  Informative References . . . . . . . . . . . . . . . . . . 19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Remote Direct Memory Access Protocol (RDMAP) [RFC5040] and\
    \ Direct\n   Data Placement (DDP) [RFC5041] work together to provide application-\n\
    \   independent efficient placement of application payload directly into\n   buffers\
    \ specified by the Upper Layer Protocol (ULP).\n   The DDP protocol is responsible\
    \ for direct placement of received\n   payload into ULP-specified buffers.  The\
    \ RDMAP protocol provides\n   completion notifications to the ULP and support\
    \ for Data-Sink-\n   initiated fetch of Advertised Buffers (RDMA Reads).\n   DDP\
    \ and RDMAP are both application-independent protocols that allow\n   the ULP\
    \ to perform remote direct data placement.  DDP can use\n   multiple standard\
    \ IP transports including SCTP and TCP.\n   By clarifying the situations where\
    \ the functionality of these\n   protocols is applicable, this document can guide\
    \ implementers and\n   application and protocol designers in selecting which protocols\
    \ to\n   use.\n   The applicability of RDMAP/DDP is driven by their unique\n \
    \  capabilities:\n   o  This document will discuss when common data placement\
    \ procedures\n      are of more benefit to applications than application-specific\n\
    \      solutions built on top of direct use of the underlying transport.\n   o\
    \  DDP supports both Untagged and Tagged Buffers.  Tagged Buffers\n      allow\
    \ the Data Sink ULP to be indifferent to what order (or in\n      what messages)\
    \ the Data Source sent the data, or in what order\n      packets are received.\
    \  Typically, tagged data can be used for\n      payload transfer, while untagged\
    \ is best used for control\n      messages.  However each upper-layer protocol\
    \ can determine the\n      optimal use of Tagged and Untagged Messages for itself.\
    \  This\n      document will discuss when Data Source flexibility is of benefit\n\
    \      to applications.\n   o  RDMAP consolidates ULP notifications, thereby minimizing\
    \ the\n      number of required ULP interactions.\n   o  RDMAP defines RDMA Reads,\
    \ which allow remote access to Advertised\n      Buffers.  This document will\
    \ review the advantages of using RDMA\n      Reads as contrasted to alternate\
    \ solutions.\n      A more comprehensive introduction to the RDMAP and DDP protocols\n\
    \      and discussion of their security considerations can be found in\n     \
    \ [RFC5042].\n   Some non-IP transports, such as InfiniBand, directly integrate\
    \ RDMA\n   features.  This document will review the applicability of providing\n\
    \   RDMA services over ubiquitous IP transports instead of over\n   customized\
    \ transport protocols.  Due to the fact that DDP is defined\n   cleanly as a layer\
    \ over existing IP transports, DDP has simpler\n   ordering rules than some prior\
    \ RDMA protocols.  This may have some\n   implications for application designers.\n\
    \   The full capabilities of DDP and RDMAP can only be fully realized by\n   applications\
    \ that are designed to exploit them.  The coexistence of\n   RDMAP/DDP-aware local\
    \ interfaces with traditional socket interfaces\n   will also be explored.\n \
    \  Finally, DDP support is defined for at least two IP transports: SCTP\n   [RFC5043]\
    \ and TCP [RFC5044].  The rationale for supporting both\n   transports is reviewed,\
    \ as well as when each would be the appropriate\n   selection.\n"
- title: 2.  Definitions
  contents:
  - "2.  Definitions\n   Advertisement -  the act of informing a Remote Peer that\
    \ a local RDMA\n      Buffer is available to it.  A Node makes available an RDMA\
    \ Buffer\n      for incoming RDMA Read or RDMA Write access by informing its RDMA/\n\
    \      DDP peer of the Tagged Buffer identifiers (STag, base address, and\n  \
    \    buffer length).  This Advertisement of Tagged Buffer information\n      is\
    \ not defined by RDMA/DDP and is left to the ULP.  A typical\n      method would\
    \ be for the Local Peer to embed the Tagged Buffer's\n      Steering Tag, base\
    \ address, and length in a Send Message destined\n      for the Remote Peer.\n\
    \   Data Sink -  The peer receiving a data payload.  Note that the Data\n    \
    \  Sink can be required to both send and receive RDMA/DDP Messages to\n      transfer\
    \ a data payload.\n   Data Source -  The peer sending a data payload.  Note that\
    \ the Data\n      Source can be required to both send and receive RDMA/DDP Messages\n\
    \      to transfer a data payload.\n   Lower Layer Protocol (LLP) -  The transport\
    \ protocol that provides\n      services to DDP.  This is an IP transport with\
    \ any required\n      adaptation layer.  Adaptation layers are defined for SCTP\
    \ and TCP.\n   Steering Tag (STag) -  An identifier of a Tagged Buffer on a Node,\n\
    \      valid as defined within a protocol specification.\n   Tagged Message -\
    \  A DDP message that is directed to a ULP-specified\n      buffer based upon\
    \ imbedded addressing information.  In the\n      immediate sense, the destination\
    \ buffer is specified by the\n      message sender.  The message receiver is given\
    \ no independent\n      indication that a Tagged Message has been received.\n\
    \   Untagged Message -  A DDP message that is directed to a ULP-specified\n  \
    \    buffer based upon a Message Sequence Number being matched with a\n      receiver-supplied\
    \ buffer.  The destination buffer is specified by\n      the message receiver.\
    \  The message receiver is notified by some\n      mechanism that an Untagged\
    \ Message has been received.\n   Upper Layer Protocol (ULP) -  The direct user\
    \ of RDMAP/DDP services.\n      In addition to protocols such as iSER [RFC5046]\
    \ and NFSv4 over\n      RDMA [NFSDIRECT], the ULP may be embedded in an application\
    \ or a\n      middleware layer, as is often the case for the Sockets Direct\n\
    \      Protocol (SDP) and Remote Procedure Call (RPC) protocols.\n"
- title: 3.  Direct Placement
  contents:
  - "3.  Direct Placement\n   Direct Data Placement optimizes the placement of ULP\
    \ Payload into the\n   correct destination buffers, typically eliminating intermediate\n\
    \   copying.  Placement is enabled without regard to order of arrival,\n   order\
    \ of transmission, or requirement of per-placement interaction\n   with the ULP.\n\
    \   RDMAP minimizes the required ULP interactions.  This capability is\n   most\
    \ valuable for applications that require multiple transport layer\n   packets\
    \ for each required ULP interaction.\n"
- title: 3.1.  Direct Placement Using Only the LLP
  contents:
  - "3.1.  Direct Placement Using Only the LLP\n   Direct data placement can be achieved\
    \ without RDMA.  Pre-posting of\n   receive buffers could allow a non-RDMA network\
    \ stack to place data\n   directly to user buffers.\n   The degree to which DDP\
    \ optimizes depends on which transport it is\n   being compared with, and on the\
    \ nature of the local interface.\n   Without RDMAP/DDP, pre-posting buffers require\
    \ the receiving side to\n   accurately predict the required buffers and their\
    \ sizes.  This is not\n   feasible for all ULPs.  By contrast, DDP only requires\
    \ the ULP to\n   predict the sequence and size of incoming Untagged Messages.\n\
    \   An application that could predict incoming messages and required\n   nothing\
    \ more than direct placement into buffers might be able to do\n   so with a properly\
    \ designed local interface to native SCTP or TCP\n   (without RDMA).  This is\
    \ easier using native SCTP because the\n   application would only have to predict\
    \ the sequence of messages and\n   the maximum size of each message, not the exact\
    \ size.\n   The main benefit of DDP for such an application would be that pre-\n\
    \   posting of receive buffers is a mandated local interface capability,\n   and\
    \ that predictions can always be made on a per-message basis (not\n   per byte).\n\
    \   The Lower Layer Protocol, LLP, can also be used directly if ULP-\n   specific\
    \ knowledge is built into the protocol stack to allow \"parse\n   and place\"\
    \ handling of received packets.  Such a solution either\n   requires interaction\
    \ with the ULP or the protocol stack's knowledge\n   of ULP-specific syntax rules.\n\
    \   DDP achieves the benefits of directly placing incoming payload\n   without\
    \ requiring tight coupling between the ULP and the protocol\n   stack.  However,\
    \ \"parse and place\" capabilities can certainly provide\n   equivalent services\
    \ to a limited number of ULPs.\n"
- title: 3.2.  Fewer Required ULP Interactions
  contents:
  - "3.2.  Fewer Required ULP Interactions\n   While reducing the number of required\
    \ ULP interactions is in itself\n   desirable, it is critical for high-speed connections.\
    \  The burst\n   packet rate for a high-speed interface could easily exceed the\
    \ host\n   system's ability to switch ULP contexts.\n   Content access applications\
    \ are important examples of applications\n   that require high bandwidth and can\
    \ transfer a significant amount of\n   content between required ULP interactions.\
    \  These applications\n   include file access protocols (NAS), storage access\
    \ (SAN), database\n   access, and other application-specific forms of content\
    \ access such\n   as HTTP, XML, and email.\n"
- title: 4.  Tagged Messages
  contents:
  - "4.  Tagged Messages\n   This section covers the major benefits from the use of\
    \ Tagged\n   Messages.\n   A more critical advantage of DDP is the ability of\
    \ the Data Source to\n   use Tagged Buffers.  Tagging messages allows the Data\
    \ Source to\n   choose the ordering and packetization of its payload deliveries.\n\
    \   With direct data placement based solely upon pre-posted receives, the\n  \
    \ packetization and delivery of payload must be agreed by the ULP peers\n   in\
    \ advance.\n   The Upper Layer Protocol can allocate content between Untagged\
    \ and/or\n   Tagged Messages to maximize the potential optimizations.  Placing\n\
    \   content within an Untagged Message can deliver the content in the\n   same\
    \ packet that signals completion to the receiver.  This can\n   improve latency.\
    \  It can even eliminate round trips.  But it requires\n   making larger anonymous\
    \ buffers to be available.\n   Some examples of data that typically belongs in\
    \ the Untagged Message\n   would include:\n      short fixed-size control data\
    \ that is inherently part of the\n      control message.  This is especially true\
    \ when the data is a\n      required part of the control message.\n      relatively\
    \ short payload that is almost always needed, especially\n      when its inclusion\
    \ would eliminate a round-trip to fetch the data.\n      Examples would include\
    \ the initial data on a write request and\n      Advertisements of Tagged Buffers.\n\
    \   Tagged Messages standardize direct placement of data without per-\n   packet\
    \ interaction with the upper layers.  Even if there is an upper-\n   layer protocol\
    \ encoding of what is being transferred, as is common\n   with middleware solutions,\
    \ this information is not understood at the\n   application-independent layers.\
    \  The directions on where to place the\n   incoming data cannot be accessed without\
    \ switching to the ULP first.\n   DDP provides a standardized 'packing list',\
    \ which can be interpreted\n   without requiring ULP interaction.  Indeed, it\
    \ is designed to be\n   implementable in hardware.\n"
- title: 4.1.  Order-Independent Reception
  contents:
  - "4.1.  Order-Independent Reception\n   Tagged Messages are directed to a buffer\
    \ based on an included\n   Steering Tag.  Additionally, no notice is provided\
    \ to the ULP for\n   each individual Tagged Message's arrival.  Together these\
    \ allow\n   Tagged Messages received out of order to be processed without\n  \
    \ intermediate buffering or additional notifications to the ULP.\n"
- title: 4.2.  Reduced ULP Notifications
  contents:
  - "4.2.  Reduced ULP Notifications\n   RDMAP offers both Tagged and Untagged Messages.\
    \  No receiving-side\n   ULP interactions are required for Tagged Messages.  By\
    \ optimally\n   dividing traffic between Tagged and Untagged Messages, the ULP\
    \ can\n   limit the number of events that must be dealt with at the ULP layer.\n\
    \   This typically reduces the number of context switches required and\n   improves\
    \ performance.\n   RDMAP further reduces required ULP interactions, consolidating\n\
    \   completion notifications of Tagged Messages with the completion\n   notification\
    \ of a trailing Untagged Message.  For most ULPs, this\n   radically reduces the\
    \ number of ULP required interactions even\n   further.\n   While RDMAP consolidation\
    \ of notices is beneficial to most\n   applications, it may be detrimental to\
    \ some applications that benefit\n   from streamed delivery to enable ULP processing\
    \ of received data as\n   promptly as possible.  A ULP that uses RDMAP cannot\
    \ begin processing\n   any portion of an exchange until it receives notification\
    \ that the\n   entire exchange has been placed.  An \"exchange\" here is a set\
    \ of zero\n   or more Tagged Messages and a single terminating Untagged Message.\n\
    \   An application that would prefer to begin work on the received\n   payload\
    \ as soon as possible, no matter what order it arrived in,\n   might prefer to\
    \ work directly with the LLP.  RDMAP is optimized for\n   applications that are\
    \ more concerned when the entire exchange is\n   complete.\n   An application\
    \ that benefits from being able to begin processing of\n   each received packet\
    \ as quickly as possible may find RDMAP interferes\n   with that goal.\n   Such\
    \ an application might be able to retain most of the benefits of\n   RDMAP by\
    \ using the DDP layer directly.  However, in addition to\n   taking on the responsibilities\
    \ of the RDMAP layer, the application\n   would likely have more difficulty finding\
    \ support for a DDP-only API.\n   Many hardware implementations may choose to\
    \ tightly couple RDMAP and\n   DDP, and might not provide an API directly to DDP\
    \ services.\n   These features minimize the required interactions with the ULP.\
    \  This\n   can be extremely beneficial for applications that use multiple\n \
    \  transport layer packets to accomplish what is a single ULP\n   interaction.\n"
- title: 4.3.  Simplified ULP Exchanges
  contents:
  - "4.3.  Simplified ULP Exchanges\n   The notification rules for Tagged Messages\
    \ allows ULPs to create\n   multi-message \"exchanges\" consisting of zero or\
    \ more Tagged Messages\n   that represent a single step in the ULP interaction.\
    \  The receiving\n   ULP is notified that the Untagged Message has arrived, and\
    \ implicitly\n   notified of any associated Tagged Messages.\n   If a ULP cannot\
    \ effectively use Tagged Messages, it would derive\n   little benefit from use\
    \ of RDMAP/DDP by comparison to direct use of\n   SCTP.  But, while Tagged Buffers\
    \ are the justification for RDMAP/DDP,\n   Untagged Buffers are still necessary.\
    \  Without Untagged Buffers, the\n   only method to exchange buffer Advertisements\
    \ would require out-of-\n   band communications.  Most RDMA-aware ULPs use Untagged\
    \ Buffers for\n   requests and responses.  Buffer Advertisements are typically\
    \ done\n   within these Untagged Messages.\n   More importantly, there would be\
    \ no reliable method for the upper-\n   layer peers to synchronize.  The absence\
    \ of any guarantees about\n   ordering within or between Tagged Messages is fundamental\
    \ to allowing\n   the DDP layer to optimize transfer of tagged payload.\n   Therefore,\
    \ no ULP can be defined entirely in terms of Tagged\n   Messages.  Eventually,\
    \ a notification that confirms delivery must be\n   generated from the RDMAP/DDP\
    \ layer.\n   Limiting use of Untagged Buffers to requests and responses by moving\n\
    \   all bulk data using tagged transfers can greatly simplify the amount\n   of\
    \ prediction that the Data Sink must perform in pre-posting receive\n   buffers.\
    \  For example, a typical RDMA-enabled interaction would\n   consist of the following:\n\
    \   1.  Client sends transaction request to server as an Untagged\n       Message.\n\
    \   2.  This message includes buffer Advertisements for the buffers where\n  \
    \     the results are to be placed.\n   3.  The server sends multiple Tagged Messages\
    \ to the Advertised\n       buffers.\n   4.  The server sends transaction reply\
    \ as an Untagged Message to the\n       client.\n   5.  Client receives single\
    \ notification, indicating completion of the\n       interaction.\n   With this\
    \ type of exchange, the pacing and required size of Untagged\n   Buffers are highly\
    \ predictable.  The variability of response sizes is\n   absorbed by tagged transfers.\n"
- title: 4.4.  Order-Independent Sending
  contents:
  - "4.4.  Order-Independent Sending\n   Use of Tagged Messages is especially applicable\
    \ when the Data Sink\n   does not know the actual size, structure, or location\
    \ of the content\n   it is requesting (or updating).\n   For example, suppose\
    \ the Data Sink ULP needs to fetch four related\n   pieces of data into four separate\
    \ buffers.  With SCTP, the Data Sink\n   ULP could receive four messages into\
    \ four separate buffers, only\n   having to predict the maximum size of each.\
    \  However, it would have\n   to dictate the order in which the Data Source supplied\
    \ the separate\n   pieces.  If the Data Source found it advantageous to fetch\
    \ them in a\n   different order, it would have to use intermediate buffering to\
    \ re-\n   order the pieces into the expected order even though the application\n\
    \   only required that all four be delivered and did not truly have an\n   ordering\
    \ requirement.\n   Techniques, such as RAID striping and mirroring, represent\
    \ this same\n   problem, but one step further.  What appears to be a single resource\n\
    \   to the Data Sink is actually stored in separate locations by the Data\n  \
    \ Source.  Non RDMA protocols would either require the Data Source to\n   fetch\
    \ the material in the desired order or force the Data Source to\n   use its own\
    \ holding buffers to assemble an image of the destination\n   buffer.\n   While\
    \ sometimes referred to as a \"buffer-to-buffer\" solution, RDMA\n   more fundamentally\
    \ enables remote buffer access.  The ULP is free to\n   work with larger remote\
    \ buffers than it has locally.  This reduces\n   buffering requirements and the\
    \ number of times the data must be\n   copied in an end-to-end transfer.\n   There\
    \ are numerous reasons why the Data Sink would not know the true\n   order or\
    \ location of the requested data.  It could be different for\n   each client,\
    \ different records selected and/or different sort orders,\n   as well as RAID\
    \ striping, file fragmentation, volume fragmentation,\n   volume mirroring, and\
    \ server-side dynamic compositing of content\n   (such as server-side includes\
    \ for HTTP).\n   In all of these cases, the Data Source is free to assemble the\n\
    \   desired data in the Data Sink's buffer in whatever order the\n   component\
    \ data becomes available to it.  It is not constrained on\n   ordering.  It does\
    \ not have to assemble an image in its own memory\n   before creating it in the\
    \ Data Sink's buffers.\n   Note that while DDP enables use of Tagged Messages\
    \ for bulk transfer,\n   there are some application scenarios where Untagged Messages\
    \ would\n   still be used for bulk transfer.  For example, a file server may not\n\
    \   expose its own memory to its clients.  A client wishing to write may\n   Advertise\
    \ a buffer upon which the server will issue RDMA Reads.\n   However, when performing\
    \ a small write, it may be preferable to\n   include the data in the Untagged\
    \ Message rather than incurring an\n   additional round trip with the RDMA Read\
    \ and its response.\n   Generally, the best use of an Untagged Message is to synchronize\
    \ and\n   to deliver data that is naturally tied to the same message as the\n\
    \   synchronization.  For initial data transfers, this has the additional\n  \
    \ benefit of avoiding the need to Advertise specific Tagged Buffers for\n   indefinite\
    \ time periods.  Instead, anonymous buffers can be used for\n   initial data reception.\
    \  Because anonymous buffers do not need to be\n   tied to specific messages in\
    \ advance, this can be a major benefit.\n"
- title: 4.5.  Untagged Messages and Tagged Buffers as ULP Credits
  contents:
  - "4.5.  Untagged Messages and Tagged Buffers as ULP Credits\n   The handling of\
    \ end-to-end buffer credits differs considerably with\n   DDP than when the ULP\
    \ directly uses either TCP or SCTP.\n   With both TCP and SCTP, buffer credits\
    \ are based upon the receiver\n   granting transmit permission based on the total\
    \ number of bytes.\n   These credits reflect system buffering resources and/or\
    \ simple flow\n   control.  They do not represent ULP resources.\n   DDP defines\
    \ no standard flow control, but presumes the existence of a\n   ULP mechanism.\
    \  The presumed mechanism is that the Data Sink ULP has\n   issued credits to\
    \ the Data Source, allowing the Data Source to send a\n   specific number of Untagged\
    \ Messages.\n   The ULP peers must ensure that the sender is aware of the maximum\n\
    \   size that can be sent to any specific target buffer.  One method of\n   doing\
    \ so is to use a standard size for all Untagged Buffers within a\n   given connection.\
    \  For example, a ULP may specify an initial Untagged\n   Buffer size to be used\
    \ immediately after session establishment, and\n   then optionally specify mechanisms\
    \ for negotiating changes.\n   Tagged Buffers are ULP resources Advertised directly\
    \ from ULP to ULP.\n   A DDP put to a known Tagged Buffer is constrained only\
    \ by transport\n   level flow control, not by available system buffering.\n  \
    \ Either Tagged or Untagged Buffers allows bypassing of system buffer\n   resources.\
    \  Use of Tagged Buffers additionally allows the Data Source\n   to choose in\
    \ what order to exercise the credits.\n   To the extent allowed by the ULP, Tagged\
    \ Buffers are also divisible\n   resources.  The Data Sink can Advertise a single\
    \ 100 KB buffer, and\n   then receive notifications from its peer that it had\
    \ written 50 KB,\n   20 KB, and 30 KB to that buffer in three successive transactions.\n\
    \   ULP management of Tagged Buffer resources, independent of transport\n   and\
    \ DDP layer credits, is an additional benefit of RDMA protocols.\n   Large bulk\
    \ transfers cannot be blocked by limited general-purpose\n   buffering capacity.\
    \  Applications can flow control based upon higher\n   level abstractions, such\
    \ as number of outstanding requests,\n   independent of the amount of data that\
    \ must be transferred.\n   However, use of system buffering, as offered by direct\
    \ use of the\n   underlying transports, can be preferable under certain circumstances.\n\
    \   One example would be when the number of target ULP Buffers is\n   sufficiently\
    \ large, and the rate at which any writes arrive is\n   sufficiently low, that\
    \ pinning all the target ULP Buffers in memory\n   would be undesirable.  The\
    \ maximum transfer rate, and hence the\n   maximum amount of system buffering\
    \ required, may be more stable and\n   predictable than the total ULP Buffer exposure.\n\
    \   Another example would be when the Data Sink wishes to receive a\n   stream\
    \ of data at a predictable rate, but does not know in advance\n   what the size\
    \ of each data packet will be.  This is common from\n   streaming media that has\
    \ been encoded with a variable bit rate.  With\n   DDP, the Data Sink would either\
    \ have to use Untagged Buffers large\n   enough for the largest packet, or Advertise\
    \ a circular buffer.  If,\n   for security or other reasons, the Data Sink did\
    \ not want the size of\n   its buffer to be publicly known, using the underlying\
    \ SCTP transport\n   directly may be preferable because of its byte-oriented credits.\n"
- title: 5.  RDMA Read
  contents:
  - "5.  RDMA Read\n   RDMA Reads are a further service provided by RDMAP.  RDMA Reads\
    \ allow\n   the Data Sink to fetch exactly the portion of the peer ULP Buffer\n\
    \   required on a \"just in time\" basis.  This can be done without\n   requiring\
    \ per-fetch support from the Data Source ULP.\n   Storage servers may wish to\
    \ limit the maximum write buffer allocated\n   to any single session.  The storage\
    \ server may be a very minimal\n   layer between the client and the disk storage\
    \ media, or the server\n   may merely wish to limit the total resources that would\
    \ be required\n   if all clients could push the entire payload they wished written\
    \ at\n   their own convenience.\n   In either case, there is little benefit in\
    \ transferring data from the\n   Data Source far in advance of when it will be\
    \ written to the\n   persistent storage media.  RDMA Reads allow the Storage Server\
    \ to\n   fetch the payload on a \"just in time\" basis.  In this fashion, a\n\
    \   relatively small number of block-sized buffers can be used to execute\n  \
    \ a single transaction that specified writing a large file, or a\n   Storage Server\
    \ with numerous clients can fetch buffers from the\n   individual clients in the\
    \ order that is most convenient to the\n   server.\n   This same capability can\
    \ be used when the desired portion of the\n   Advertised Buffer is not known in\
    \ advance.  For example, the\n   Advertised Buffer could contain performance statistics.\
    \  The Data\n   Sink could request the portions of the data it required, without\n\
    \   requiring an interaction with the Data Source ULP.\n   This is applicable\
    \ for many applications that publish semi-volatile\n   data that does not require\
    \ transactional validity checking (i.e.,\n   authorized users have read access\
    \ to the entire set of data).  It is\n   less applicable when there are ULP consistency\
    \ checks that must be\n   performed upon the data.  Such applications would be\
    \ better served by\n   having the client send a request, and having the server\
    \ use RDMA\n   Writes to publish the requested data.  Neither RDMAP nor DDP provide\n\
    \   mechanisms for bundling multiple disjoint updates into an atomic\n   operation.\
    \  Therefore, use of an Advertised Buffer as a data resource\n   is subject to\
    \ the same caveats as any randomly updated data resource,\n   such as flat files,\
    \ that do not enforce their own consistency.\n"
- title: 6.  LLP Comparisons
  contents:
  - "6.  LLP Comparisons\n   Normally, the choice of underlying IP transport is irrelevant\
    \ to the\n   ULP.  RDMAP and DDP provides the same services over either.  There\n\
    \   may be performance impacts of the choice, however.  It is the\n   responsibility\
    \ of the ULP to determine which IP transport is best\n   suited to its needs.\n\
    \   SCTP provides for preservation of message boundaries.  Each DDP\n   Segment\
    \ will be delivered within a single SCTP packet.  The\n   equivalent services\
    \ are only available with TCP through the use of\n   the MPA (Marker PDU Alignment)\
    \ adaptation layer.\n"
- title: 6.1.  Multistreaming Implications
  contents:
  - "6.1.  Multistreaming Implications\n   SCTP also provides multi-streaming.  When\
    \ the same pair of hosts have\n   need for multiple DDP streams, this can be a\
    \ major advantage.  A\n   single SCTP association carries multiple DDP streams,\
    \ consolidating\n   connection setup, congestion control, and acknowledgements.\n\
    \   Completions are controlled by the DDP Source Sequence Number (DDP-\n   SSN)\
    \ on a per-stream basis.  Therefore, combining multiple DDP\n   Streams into a\
    \ single SCTP association cannot result in a dropped\n   packet carrying data\
    \ for one stream delaying completions on others.\n"
- title: 6.2.  Out-of-Order Reception Implications
  contents:
  - "6.2.  Out-of-Order Reception Implications\n   The use of unordered Data Chunks\
    \ with SCTP guarantees that the DDP\n   layer will be able to perform placements\
    \ when IP datagrams are\n   received out of order.\n   Placement of out-of-order\
    \ DDP Segments carried over MPA/TCP is not\n   guaranteed, but certainly allowed.\
    \  The ability of the MPA receiver\n   to process out-of-order DDP Segments may\
    \ be impaired when alignment\n   of TCP segments and MPA FPDUs is lost.  Using\
    \ SCTP, each DDP Segment\n   is encoded in a single Data Chunk and never spread\
    \ over multiple IP\n   datagrams.\n"
- title: 6.3.  Header and Marker Overhead
  contents:
  - "6.3.  Header and Marker Overhead\n   MPA and TCP headers together are smaller\
    \ than the headers used by\n   SCTP and its adaptation layer.  However, this advantage\
    \ can be\n   reduced by the insertion of MPA markers.  The difference in ULP\n\
    \   Payload per IP Datagram is not likely to be a significant factor.\n"
- title: 6.4.  Middlebox Support
  contents:
  - "6.4.  Middlebox Support\n   Even with the MPA adaptation layer, DDP traffic carried\
    \ over MPA/TCP\n   will appear to all network middleboxes as a normal TCP connection.\n\
    \   In many environments, there may be a requirement to use only TCP\n   connections\
    \ to satisfy existing network elements and/or to facilitate\n   monitoring and\
    \ control of connections.  While SCTP is certainly just\n   as monitorable and\
    \ controllable as TCP, there is no guarantee that\n   the network management infrastructure\
    \ has the required support for\n   both.\n"
- title: 6.5.  Processing Overhead
  contents:
  - "6.5.  Processing Overhead\n   A DDP stream delivered via MPA/TCP will require\
    \ more processing\n   effort than one delivered over SCTP.  However, this extra\
    \ work may be\n   justified for many deployments where full SCTP support is unavailable\n\
    \   in the endpoints of the network, or where middleboxes impair the\n   usability\
    \ of SCTP.\n"
- title: 6.6.  Data Integrity Implications
  contents:
  - "6.6.  Data Integrity Implications\n   Both the SCTP [RFC4960] and MPA/TCP [RFC5044]\
    \ adaptation provide end-\n   to-end CRC32c protection against data accidental\
    \ corruption, or its\n   equivalent.\n   A ULP that requires a greater degree\
    \ of protection may add its own.\n   However, DDP and RDMAP headers will only\
    \ be guaranteed to have the\n   equivalent of end-to-end CRC32c protection.  A\
    \ ULP that requires data\n   integrity checking more thorough than an end-to-end\
    \ CRC32c should\n   first invalidate all STags that reference a buffer before\
    \ applying\n   its own integrity check.\n   CRC32c only provides protection against\
    \ random corruption.  To\n   protect against unauthorized alteration or forging\
    \ of data packets,\n   security methods must be applied.  The RDMA security document\n\
    \   [RFC5042] specifies usage of RFC 2406 [RFC2406] for both adaptation\n   layers.\
    \  As stated in [RFC5042], note that the IPsec requirements for\n   RDDP are based\
    \ on the version of IPsec specified in RFC 2401\n   [RFC2401] and related RFCs,\
    \ as profiled by RFC 3723 [RFC3723],\n   despite the existence of a newer version\
    \ of IPsec specified in RFC\n   4301 [RFC4301] and related RFCs.\n"
- title: 6.6.1.  MPA/TCP Specifics
  contents:
  - "6.6.1.  MPA/TCP Specifics\n   It is mandatory for MPA/TCP implementations to\
    \ implement CRC32c, but\n   it is not mandatory to use the CRC32c during an RDMA\
    \ connection.  The\n   activating or deactivating of the CRC in MPA/TCP is an\
    \ administrative\n   configuration operation at the local and remote end.  The\n\
    \   administration of the CRC (ON/OFF) is invisible to the ULP.\n   Applications\
    \ should assume that disabling CRC32c will only be used\n   when the end-to-end\
    \ protection is at least as effective as a\n   transport layer CRC32c.  Applications\
    \ should not use additional\n   integrity checks based solely on the possibility\
    \ that CRC32c could be\n   disabled without equivalent integrity checks at a lower\
    \ level.\n   CRC32c must not be disabled unless equivalent or better end-to-end\n\
    \   integrity protection is provided.\n   If the CRC is active/used for one direction/end,\
    \ then the use of the\n   CRC is mandatory in both directions/ends.\n   If both\
    \ ends have been configured not to use the CRC, then this is\n   allowed as long\
    \ as an equivalent protection (comparable to or better\n   than CRC) from undetected\
    \ errors on the connection is provided.\n"
- title: 6.6.2.  SCTP Specifics
  contents:
  - "6.6.2.  SCTP Specifics\n   SCTP provides CRC32c protection automatically.  The\
    \ adaptation to\n   SCTP provides for no option to suppress SCTP CRC32c protection.\n"
- title: 6.7.  Non-IP Transports
  contents:
  - "6.7.  Non-IP Transports\n   DDP is defined to operate over ubiquitous IP transports\
    \ such as SCTP\n   and TCP.  This enables a new DDP-enabled node to be added anywhere\
    \ to\n   an IP network.  No DDP-specific support from middleboxes is required.\n\
    \   There are non-IP transport fabric offering RDMA capabilities.\n   Because\
    \ these capabilities are integrated with the transport protocol\n   they have\
    \ some technical advantages when compared to RDMA over IP.\n   For example, fencing\
    \ of RDMA Operations can be based upon transport\n   level acks.  Because DDP\
    \ is cleanly layered over an IP transport, any\n   explicit RDMA layer ack must\
    \ be separate from the transport layer\n   ack.\n   There may be deployments where\
    \ the benefits of RDMA/transport\n   integration outweigh the benefits of being\
    \ on an IP network.\n"
- title: 6.7.1.  No RDMA-Layer Ack
  contents:
  - "6.7.1.  No RDMA-Layer Ack\n   DDP does not provide for its own acknowledgements.\
    \  The only form of\n   ack provided at the RDMAP layer is an RDMA Read Response.\
    \  DDP and\n   RDMAP rely almost entirely upon other layers for flow control and\n\
    \   pacing.  The LLP is relied upon to guarantee delivery and avoid\n   network\
    \ congestion, and ULP-level acking is relied upon for ULP\n   pacing and to avoid\
    \ ULP Buffer overruns.\n   Previous RDMA protocols, such as InfiniBand, have been\
    \ able to use\n   their integration with the transport layer to provide stronger\n\
    \   ordering guarantees.  It is important that application designers that\n  \
    \ require such guarantees provide them through ULP interaction.\n   Specifically:\n\
    \      There is no ability for a local interface to \"fence\" outbound\n     \
    \ messages to guarantee that prior Tagged Messages have been placed\n      prior\
    \ to sending a Tagged Message.  The only guarantees available\n      from the\
    \ other side would be an RDMA Read Response (coming from\n      the RDMAP layer)\
    \ or a response from the ULP layer.  Remember that\n      the normal ordering\
    \ rules only guarantee when the Data Sink ULP\n      will be notified of Untagged\
    \ Messages; it does not control when\n      data is placed into receive buffers.\n\
    \      Re-use of Tagged Buffers must be done with extreme care.  The fact\n  \
    \    that an Untagged Message indicates that all prior Tagged Messages\n     \
    \ have been placed does not guarantee that no later Tagged Message\n      has.\
    \  The best strategy is to change only the state of any given\n      Advertised\
    \ Buffers with Untagged Messages.\n      As covered elsewhere in this document,\
    \ flow control of Untagged\n      Messages is the responsibility of the ULP.\n"
- title: 6.8.  Other IP Transports
  contents:
  - "6.8.  Other IP Transports\n   Both TCP and SCTP provide DDP with reliable transport\
    \ with TCP-\n   friendly rate control.  Currently, DDP is defined to work over\n\
    \   reliable transports and implicitly relies upon some form of rate\n   control.\n\
    \   DDP is fully compatible with a non-reliable protocol.  Out-of-order\n   placement\
    \ is obviously not dependent on whether the other DDP\n   Segments ever actually\
    \ arrive.\n   However, RDMAP requires the LLP to provide reliable service.  An\n\
    \   alternate completion handling protocol would be required if DDP were\n   to\
    \ be deployed over an unreliable IP transport.\n   As noted in the prior section\
    \ on Tagged Buffers as ULP credits,\n   neither RDMAP nor DDP provides any flow\
    \ control for Tagged Messages.\n   If no transport layer flow control is provided,\
    \ an RDMAP/DDP\n   application would be limited only by the link layer rate, almost\n\
    \   inevitably resulting in severe network congestion.\n   RDMAP encourages applications\
    \ to be ignorant of the underlying\n   transport path MTU.  The ULP is only notified\
    \ when all messages\n   ending in a single Untagged Message have completed.  The\
    \ ULP is not\n   aware of the granularity or ordering of the underlying message.\
    \  This\n   approach assumes that the ULP is only interested in the complete set\n\
    \   of messages, and has no use for a subset of them.\n"
- title: 6.9.  LLP-Independent Session Establishment
  contents:
  - "6.9.  LLP-Independent Session Establishment\n   For an RDMAP/DDP application,\
    \ the transport services provided by a\n   pair of SCTP streams and by a TCP connection\
    \ both provide the same\n   service (reliable delivery of DDP Segments between\
    \ two connected\n   RDMAP/DDP endpoints).\n"
- title: 6.9.1.  RDMA-Only Session Establishment
  contents:
  - "6.9.1.  RDMA-Only Session Establishment\n   It is also possible to allow for\
    \ transport-neutral establishment of\n   RDMAP/DDP sessions between endpoints.\
    \  Combined, these two features\n   would allow most applications to be unconcerned\
    \ as to which LLP was\n   actually in use.\n   Specifically, the procedures for\
    \ DDP Stream Session establishment\n   discussed in section 3 of the SCTP mapping,\
    \ and section 13.3 of the\n   MPA/TCP mapping, both allow for the exchange of\
    \ ULP-specific data\n   (\"Private Data\") before enabling the exchange of DDP\
    \ Segments.  This\n   delay can allow for proper selection and/or configuration\
    \ of the\n   endpoints based upon the exchanged data.  For example, each DDP\n\
    \   Stream Session associated with a single client session might be\n   assigned\
    \ to the same DDP Protection Domain.\n   To be transport neutral, the applications\
    \ should exchange Private\n   Data as part of session establishment messages to\
    \ determine how the\n   RDMA endpoints are to be configured.  One side must be\
    \ the Initiator,\n   and the other, the Responder.\n   With SCTP, a pair of SCTP\
    \ streams can be used for successive sessions\n   while the SCTP association remains\
    \ open.  With MPA/TCP, each\n   connection can be used for, at most, one session.\
    \  However, the same\n   source/destination pair of ports can be re-used for a\
    \ subsequent TCP\n   connection, as allowed by TCP.\n   Both SCTP and MPA limit\
    \ the private data size to a maximum of 512\n   bytes.\n   MPA/TCP requires the\
    \ end of the TCP connection that initiated the\n   conversion to MPA mode to send\
    \ the first DDP Segment.  SCTP does not\n   have this requirement.  ULPs that\
    \ wish to be transport neutral should\n   require the initiating end to send the\
    \ first message.  A zero-length\n   RDMA Write can be used for this purpose if\
    \ the ULP logic itself does\n   naturally support this restriction.\n"
- title: 6.9.2.  RDMA-Conditional Session Establishment
  contents:
  - "6.9.2.  RDMA-Conditional Session Establishment\n   It is sometimes desirable\
    \ for the active side of a session to connect\n   with the passive side before\
    \ knowing whether the passive side\n   supports RDMA.\n   This style of session\
    \ establishment can be supported with either TCP\n   or SCTP, but not as transparently\
    \ as for RDMA-only sessions.  Pre-\n   existing non-RDMA servers are also far\
    \ more likely to be using TCP\n   than SCTP.\n   With TCP, a normal TCP connection\
    \ is established.  It is then used by\n   the ULP to determine whether or not\
    \ to convert to MPA mode and use\n   RDMA.  This will typically be integral with\
    \ other session-\n   establishment negotiations.\n   With SCTP, the establishment\
    \ of an association tests whether RDMA is\n   supported.  If not supported, the\
    \ application simply requests the\n   association without the RDMA adaptation\
    \ indication.\n   One key difference is that with SCTP the determination as to\
    \ whether\n   the peer can support RDMA is made before the transport layer\n \
    \  association/connection is established, while with TCP the established\n   connection\
    \ itself is used to determine whether RDMA is supported.\n"
- title: 7.  Local Interface Implications
  contents:
  - "7.  Local Interface Implications\n   Full utilization of DDP and RDMAP capabilities\
    \ requires a local\n   interface that explicitly requests these services.  Protocols\
    \ such as\n   Sockets Direct Protocol (SDP) can allow applications to keep their\n\
    \   traditional byte-stream or message-stream interface and still enjoy\n   many\
    \ of the benefits of the optimized wire level protocols.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   RDMA security considerations are discussed in\
    \ the RDMA security\n   document [RFC5042].  This document will only deal with\
    \ the more\n   usage-oriented aspects, and where there are implications in the\n\
    \   choice of underlying transport.\n"
- title: 8.1.  Connection/Association Setup
  contents:
  - "8.1.  Connection/Association Setup\n   Both the SCTP and TCP adaptations allow\
    \ for existing procedures to be\n   followed for the establishment of the SCTP\
    \ association or TCP\n   connection.  Use of DDP does not impair the use of any\
    \ security\n   measures to filter, validate, and/or log the remote end of an\n\
    \   association/connection.\n"
- title: 8.2.  Tagged Buffer Exposure
  contents:
  - "8.2.  Tagged Buffer Exposure\n   DDP only exposes ULP memory to the extent explicitly\
    \ allowed by ULP\n   actions.  These include posting of receive operations and\
    \ enabling of\n   Steering Tags.\n   Neither RDMAP nor DDP places requirements\
    \ on how ULPs Advertise\n   Buffers.  A ULP may use a single Steering Tag for\
    \ multiple buffer\n   Advertisements.  However, the ULP should be aware that enforcement\
    \ on\n   STag usage is likely limited to the overall range that is enabled.\n\
    \   If the Remote Peer writes into the 'wrong' Advertised Buffer, neither\n  \
    \ the DDP nor the RDMAP layer will be aware of this.  Nor is there any\n   report\
    \ to the ULP on how the Remote Peer specifically used Tagged\n   Buffers.\n  \
    \ Unless the ULP peers have an adequate basis for mutual trust, the\n   receiving\
    \ ULP might be well advised to use a distinct STag for each\n   interaction, and\
    \ to invalidate it after each use, or to require its\n   peer to use the RDMAP\
    \ option to invalidate the STag with its\n   responding Untagged Message.\n"
- title: 8.3.  Impact of Encrypted Transports
  contents:
  - "8.3.  Impact of Encrypted Transports\n   While DDP is cleanly layered over the\
    \ LLP, its maximum benefit may be\n   limited when the LLP Stream is secured with\
    \ a streaming cypher, such\n   as Transport Layer Security (TLS) [RFC4346].  If\
    \ the LLP must decrypt\n   in order, it cannot provide out-of-order DDP Segments\
    \ to the DDP\n   layer for placement purposes.  IPsec [RFC2401] tunnel mode encrypts\n\
    \   entire IP Datagrams.  IPsec transport mode encrypts TCP Segments or\n   SCTP\
    \ packets, as does use of Datagram TLS (DTLS) [RFC4347] over UDP\n   beneath TCP\
    \ or SCTP.  Neither IPsec nor this use of DTLS precludes\n   providing out-of-order\
    \ DDP Segments to the DDP layer for placement.\n   Note that end-to-end use of\
    \ cryptographic integrity protection may\n   allow suppression of MPA CRC generation\
    \ and checking under certain\n   circumstances.  This is one example where the\
    \ LLP may be judged to\n   have \"or equivalent\" protection to an end-to-end\
    \ CRC32c.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2401]    Kent, S. and R. Atkinson, \"Security\
    \ Architecture for the\n                Internet Protocol\", RFC 2401, November\
    \ 1998.\n   [RFC2406]    Kent, S. and R. Atkinson, \"IP Encapsulating Security\n\
    \                Payload (ESP)\", RFC 2406, November 1998.\n   [RFC4960]    Stewart,\
    \ R., \"Stream Control Transmission Protocol\",\n                RFC 4960, September\
    \ 2007.\n   [RFC5040]    Recio, R., Metzler, B., Culley, P., Hilland, J., and\
    \ D.\n                Garcia, \"A Remote Direct Memory Access Protocol\n     \
    \           Specification\", RFC 5040, October 2007.\n   [RFC5041]    Shah, H.,\
    \ Pinkerton, J., Recio, R., and P. Culley,\n                \"Direct Data Placement\
    \ over Reliable Transports\",\n                RFC 5041, October 2007.\n   [RFC5042]\
    \    Pinkerton, J. and E. Deleganes, \"DDP/RDMAP Security\",\n               \
    \ RFC 5042, October 2007.\n   [RFC5043]    Bestler, C. and R. Stewart, \"Stream\
    \ Control Transmission\n                Protocol (SCTP) Direct Data Placement\
    \ (DDP) Adaptation\",\n                RFC 5043, October 2007.\n   [RFC5044] \
    \   Culley, P., Elzur, U., Recio, R., Bailey, S., and J.\n                Carrier,\
    \ \"Marker PDU Aligned Framing for TCP\n                Specification\", RFC 5044,\
    \ October 2007.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [NFSDIRECT]  Talpey, T., Callaghan, B., and\
    \ I. Property, \"NFS Direct\n                Data Placement\", Work in Progress,\
    \ June 2007.\n   [RFC3723]    Aboba, B., Tseng, J., Walker, J., Rangan, V., and\
    \ F.\n                Travostino, \"Securing Block Storage Protocols over IP\"\
    ,\n                RFC 3723, April 2004.\n   [RFC4301]    Kent, S. and K. Seo,\
    \ \"Security Architecture for the\n                Internet Protocol\", RFC 4301,\
    \ December 2005.\n   [RFC4346]    Dierks, T. and E. Rescorla, \"The Transport\
    \ Layer\n                Security (TLS) Protocol Version 1.1\", RFC 4346,\n  \
    \              April 2006.\n   [RFC4347]    Rescorla, E. and N. Modadugu, \"Datagram\
    \ Transport Layer\n                Security\", RFC 4347, April 2006.\n   [RFC5046]\
    \    Ko, M., Chadalapaka, M., Elzur, U., Shah, H., and P.\n                Thaler,\
    \ \"Internet Small Computer System Interface\n                (iSCSI) Extensions\
    \ for Remote Direct Memory Access\n                (RDMA)\", RFC 5046, October\
    \ 2007.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Caitlin Bestler (editor)\n   Neterion\n   20230 Stevens\
    \ Creek Blvd.\n   Suite C\n   Cupertino, CA  95014\n   USA\n   Phone: 408-366-4639\n\
    \   EMail: caitlin.bestler@neterion.com\n   Lode Coene\n   Nokia Siemens Networks\n\
    \   Atealaan 26\n   Herentals  2200\n   Belgium\n   Phone: +32-14-252081\n   EMail:\
    \ lode.coene@nsn.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
