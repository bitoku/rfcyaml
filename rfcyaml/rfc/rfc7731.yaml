- contents:
  - '       Multicast Protocol for Low-Power and Lossy Networks (MPL)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies the Multicast Protocol for Low-Power and\n
    \  Lossy Networks (MPL), which provides IPv6 multicast forwarding in\n   constrained
    networks.  MPL avoids the need to construct or maintain\n   any multicast forwarding
    topology, disseminating messages to all MPL\n   Forwarders in an MPL Domain.\n
    \  MPL has two modes of operation.  One mode uses the Trickle algorithm\n   to
    manage control-plane and data-plane message transmissions and is\n   applicable
    for deployments with few multicast sources.  The other\n   mode uses classic flooding.
    \ By providing both modes and\n   parameterization of the Trickle algorithm, an
    MPL implementation can\n   be used in a variety of multicast deployments and can
    trade between\n   dissemination latency and transmission efficiency.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7731.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \  2. Terminology .....................................................5\n   3.
    Applicability Statement .........................................6\n   4. MPL
    Protocol Overview ...........................................7\n      4.1. MPL
    Domains ................................................7\n      4.2. Information
    Base Overview ..................................8\n      4.3. Protocol Overview
    ..........................................8\n      4.4. Signaling Overview ........................................10\n
    \  5. MPL Parameters and Constants ...................................11\n      5.1.
    MPL Multicast Addresses ...................................11\n      5.2. MPL
    Message Types .........................................11\n      5.3. MPL Seed
    Identifiers ......................................11\n      5.4. MPL Parameters
    ............................................11\n   6. Protocol Message Formats
    .......................................14\n      6.1. MPL Option ................................................14\n
    \     6.2. MPL Control Message .......................................15\n      6.3.
    MPL Seed Info .............................................16\n   7. Information
    Base ...............................................17\n      7.1. Local Interface
    Set .......................................17\n      7.2. Domain Set ................................................18\n
    \     7.3. Seed Set ..................................................18\n      7.4.
    Buffered Message Set ......................................18\n   8. MPL Seed
    Sequence Numbers ......................................19\n   9. MPL Data Messages
    ..............................................19\n      9.1. MPL Data Message
    Generation ...............................19\n      9.2. MPL Data Message Transmission
    .............................20\n      9.3. MPL Data Message Processing ...............................21\n
    \  10. MPL Control Messages ..........................................22\n      10.1.
    MPL Control Message Generation ...........................22\n      10.2. MPL
    Control Message Transmission .........................22\n      10.3. MPL Control
    Message Processing ...........................23\n   11. IANA Considerations ...........................................24\n
    \     11.1. MPL Option Type ..........................................24\n      11.2.
    MPL ICMPv6 Type ..........................................25\n      11.3. Well-Known
    Multicast Addresses ...........................25\n   12. Security Considerations
    .......................................25\n   13. References ....................................................26\n
    \     13.1. Normative References .....................................26\n      13.2.
    Informative References ...................................28\n   Acknowledgements
    ..................................................29\n   Authors' Addresses ................................................29\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Low-Power and Lossy Networks (LLNs) typically operate with
    strict\n   resource constraints in communication, computation, memory, and\n   energy.
    \ Such resource constraints may preclude the use of existing\n   IPv6 multicast
    routing and forwarding mechanisms.  Traditional IP\n   multicast delivery typically
    relies on topology maintenance\n   mechanisms to discover and maintain routes
    to all subscribers of a\n   multicast group (e.g., [RFC3973] [RFC4601]).  However,
    maintaining\n   such topologies in LLNs is costly and may not be feasible given
    the\n   available resources.\n   Memory constraints may limit devices to maintaining
    links/routes to\n   one or a few neighbors.  For this reason, the Routing Protocol
    for\n   LLNs (RPL) specifies both storing and non-storing modes [RFC6550].\n   The
    latter allows RPL routers to maintain only one or a few default\n   routes towards
    an LLN Border Router (LBR) and use source routing to\n   forward messages away
    from the LBR.  For the same reasons, an LLN\n   device may not be able to maintain
    a multicast routing topology when\n   operating with limited memory.\n   Furthermore,
    the dynamic properties of wireless networks can make the\n   cost of maintaining
    a multicast routing topology prohibitively\n   expensive.  In wireless environments,
    topology maintenance may\n   involve selecting a connected dominating set used
    to forward\n   multicast messages to all nodes in an administrative domain.\n
    \  However, existing mechanisms often require two-hop topology\n   information,
    and the cost of maintaining such information grows\n   polynomially with network
    density.\n   This document specifies the Multicast Protocol for Low-Power and\n
    \  Lossy Networks (MPL), which provides IPv6 multicast forwarding in\n   constrained
    networks.  MPL avoids the need to construct or maintain\n   any multicast routing
    topology, disseminating multicast messages to\n   all MPL Forwarders in an MPL
    Domain.  By using the Trickle algorithm\n   [RFC6206], MPL requires only small,
    constant state for each MPL\n   device that initiates disseminations.  The Trickle
    algorithm also\n   allows MPL to be density aware, allowing the communication
    rate to\n   scale logarithmically with density.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   [RFC2119].\n   The following terms are used throughout this document:\n
    \  MPL Forwarder  - A router that implements MPL.  An MPL Forwarder is\n      equipped
    with at least one MPL Interface.\n   MPL Interface  - An MPL Forwarder's attachment
    to a communications\n      medium, over which it transmits and receives MPL Data
    Messages and\n      MPL Control Messages according to this specification.  An
    MPL\n      Interface is assigned one or more unicast addresses and is\n      subscribed
    to one or more MPL Domain Addresses.\n   MPL Domain Address  - A multicast address
    that identifies the set of\n      MPL Interfaces within an MPL Domain.  MPL Data
    Messages\n      disseminated in an MPL Domain have the associated MPL Domain\n
    \     Address as their destination address.\n   MPL Domain  - A scope zone, as
    defined in [RFC4007], in which MPL\n      Interfaces subscribe to the same MPL
    Domain Address and\n      participate in disseminating MPL Data Messages.\n   MPL
    Data Message  - A multicast message that is used to communicate a\n      multicast
    payload between MPL Forwarders within an MPL Domain.  An\n      MPL Data Message
    contains an MPL Option in the IPv6 header and has\n      as its destination address
    the MPL Domain Address corresponding to\n      the MPL Domain.\n   MPL Control
    Message  - A link-local multicast message that is used to\n      communicate information
    about recently received MPL Data Messages\n      to neighboring MPL Forwarders.\n
    \  MPL Seed  - An MPL Forwarder that generates MPL Data Messages and\n      serves
    as an entry point into an MPL Domain.\n   MPL Seed Identifier  - An unsigned integer
    that uniquely identifies\n      an MPL Seed within an MPL Domain.\n   Node  -
    Used within this document to refer to an MPL Forwarder.\n"
  title: 2.  Terminology
- contents:
  - "3.  Applicability Statement\n   MPL is an IPv6 multicast forwarding protocol
    designed for the\n   communication characteristics and resource constraints of
    LLNs.  By\n   implementing controlled disseminations of multicast messages using\n
    \  the Trickle algorithm, MPL is designed for networks that communicate\n   using
    low-power and lossy links with widely varying topologies in\n   both the space
    and time dimensions.\n   While designed specifically for LLNs, MPL is not limited
    to use over\n   such networks.  MPL may be applicable to any network where no\n
    \  multicast routing state is desired.  MPL may also be used in\n   environments
    where only a subset of links are considered low-power\n   and lossy links.\n   A
    host need not be aware that their multicast is supported by MPL as\n   long as
    its attachment router forwards multicast messages between the\n   MPL Domain and
    the host.  However, a host may choose to implement MPL\n   so that it can take
    advantage of the broadcast medium inherent in\n   many LLNs and receive multicast
    messages carried by MPL directly.\n   MPL is parameterized to support different
    dissemination techniques.\n   In one parameterization, MPL may utilize the classic
    flooding method\n   that involves having each device receiving a message rebroadcast
    the\n   message.  In another parameterization, MPL may utilize Trickle's\n   [RFC6206]
    \"polite gossip\" method, which involves transmission\n   suppression and adaptive
    timing techniques.  [Clausen2013] questions\n   the efficiency of Trickle's \"polite
    gossip\" mechanism in some\n   multicast scenarios, so by also including a classic
    flooding mode of\n   operation MPL aims to be able to perform satisfactorily in
    a variety\n   of situations.\n   To support efficient message delivery in networks
    that have many poor\n   links, MPL supports a reactive forwarding mode that utilizes
    MPL\n   Control Messages to summarize the current multicast state.  The MPL\n
    \  Control Message size grows linearly with the number of simultaneous\n   MPL
    Seeds in the MPL Domain -- 4 octets per MPL Seed.  When reactive\n   forwarding
    is not enabled, MPL Control Messages are not transmitted,\n   and the associated
    overhead is not incurred.\n   This document does not specify a cryptographic security
    mechanism for\n   MPL to ensure that MPL messages are not spoofed by anyone with
    access\n   to the LLN.  In general, the basic ability to inject messages into
    an\n   LLN may be used as a denial-of-service attack, regardless of what\n   forwarding
    protocol is used.  For these reasons, LLNs typically\n   employ link-layer security
    mechanisms to mitigate an attacker's\n   ability to inject messages.  For example,
    the IEEE 802.15.4\n   [IEEE802.15.4] standard specifies frame security mechanisms
    using\n   AES-128 to support access control, message integrity, message\n   confidentiality,
    and replay protection.  However, if the attack\n   vector includes attackers that
    have access to the LLN, then MPL\n   SHOULD NOT be used.\n"
  title: 3.  Applicability Statement
- contents:
  - "4.  MPL Protocol Overview\n   The goal of MPL is to deliver multicast messages
    to all interfaces\n   that subscribe to the multicast messages' destination address
    within\n   an MPL Domain.\n"
  - contents:
    - "4.1.  MPL Domains\n   An MPL Domain is a scope zone, as defined in [RFC4007],
      in which MPL\n   Interfaces subscribe to the same MPL Domain Address and participate\n
      \  in disseminating MPL Data Messages.\n   When participating in only one MPL
      Domain, the MPL Domain Address is\n   the ALL_MPL_FORWARDERS multicast address
      with Realm-Local scope\n   (\"scop\" value 3) [RFC7346].\n   When an MPL Forwarder
      participates in multiple MPL Domains\n   simultaneously, at most one MPL Domain
      may be assigned an MPL Domain\n   Address equal to the ALL_MPL_FORWARDERS multicast
      address.  All other\n   MPL Domains MUST be assigned a unique MPL Domain Address
      that allows\n   the MPL Forwarder to identify each MPL Domain.  The MPL Domains\n
      \  SHOULD be configured automatically based on some underlying topology.\n   For
      example, when using RPL [RFC6550], MPL Domains may be configured\n   based on
      RPL Instances.\n   When MPL is used in deployments that use administratively
      defined\n   scopes that cover, for example, multiple subnets based on different\n
      \  underlying network technologies, Admin-Local scope (scop value 4) or\n   Site-Local
      scope (scop value 5) SHOULD be used.\n   An MPL Forwarder MAY participate in
      additional MPL Domains identified\n   by other multicast addresses.  An MPL
      Interface MUST subscribe to the\n   MPL Domain Addresses for the MPL Domains
      that it participates in.\n   The assignment of other multicast addresses is
      out of scope.\n   For each MPL Domain Address that an MPL Interface subscribes
      to, the\n   MPL Interface MUST also subscribe to the same MPL Domain Address
      with\n   Link-Local scope (scop value 2) when reactive forwarding is in use\n
      \  (i.e., when communicating MPL Control Messages).\n"
    title: 4.1.  MPL Domains
  - contents:
    - "4.2.  Information Base Overview\n   A node records necessary protocol state
      in the following\n   information sets:\n   o  The Local Interface Set records
      the set of local MPL Interfaces\n      and the unicast addresses assigned to
      those MPL Interfaces.\n   o  The Domain Set records the set of MPL Domain Addresses
      and the\n      local MPL Interfaces that subscribe to those addresses.\n   o
      \ A Seed Set records information about received MPL Data Messages\n      received
      from an MPL Seed within an MPL Domain.  Each MPL Domain\n      has an associated
      Seed Set.  A Seed Set maintains the minimum\n      sequence number for MPL Data
      Messages that the MPL Forwarder is\n      willing to receive or has buffered
      in its Buffered Message Set\n      from an MPL Seed.  MPL uses Seed Sets and
      Buffered Message Sets to\n      determine when to accept an MPL Data Message,
      process its payload,\n      and retransmit it.\n   o  A Buffered Message Set
      records recently received MPL Data Messages\n      from an MPL Seed within an
      MPL Domain.  Each MPL Domain has an\n      associated Buffered Message Set.
      \ MPL Data Messages resident in a\n      Buffered Message Set have sequence
      numbers that are greater than\n      or equal to the minimum threshold maintained
      in the corresponding\n      Seed Set.  MPL uses Buffered Message Sets to store
      MPL Data\n      Messages that may be transmitted by the MPL Forwarder for\n
      \     forwarding.\n"
    title: 4.2.  Information Base Overview
  - contents:
    - "4.3.  Protocol Overview\n   MPL achieves its goal by implementing a controlled
      flood that\n   attempts to disseminate the multicast data message to all interfaces\n
      \  within an MPL Domain.  MPL performs the following tasks to\n   disseminate
      a multicast message:\n   o  When having a multicast message to forward into
      an MPL Domain, the\n      MPL Seed generates an MPL Data Message that includes
      the MPL\n      Domain Address as the IPv6 Destination Address, the MPL Seed\n
      \     Identifier, a newly generated sequence number, and the multicast\n      message.
      \ If the multicast destination address is not the MPL\n      Domain Address,
      IP-in-IP tunneling [RFC2473] is used to\n      encapsulate the multicast message
      in an MPL Data Message,\n      preserving the original IPv6 Destination Address.\n
      \  o  Upon receiving an MPL Data Message, the MPL Forwarder extracts the\n      MPL
      Seed and sequence number and determines whether or not the MPL\n      Data Message
      was previously received using the MPL Domain's Seed\n      Set and Buffered
      Message Set.\n      *  If the sequence number is less than the lower-bound sequence\n
      \        number maintained in the Seed Set or a message with the same\n         sequence
      number exists within the Buffered Message Set, the MPL\n         Forwarder marks
      the MPL Data Message as old.\n      *  Otherwise, the MPL Forwarder marks the
      MPL Data Message as new.\n   o  For each newly received MPL Data Message, an
      MPL Forwarder updates\n      the Seed Set, adds the MPL Data Message into the
      Buffered Message\n      Set, processes its payload, and multicasts the MPL Data
      Message a\n      number of times on all MPL Interfaces participating in the
      same\n      MPL Domain to forward the message.\n   o  Each MPL Forwarder may
      periodically link-local multicast MPL\n      Control Messages on MPL Interfaces
      to communicate information\n      contained in an MPL Domain's Seed Set and
      Buffered Message Set.\n   o  Upon receiving an MPL Control Message, an MPL Forwarder
      determines\n      whether or not there are any new MPL Data Messages that have
      yet\n      to be received by the MPL Control Message's source and multicasts\n
      \     those MPL Data Messages.\n   MPL's configuration parameters allow two
      forwarding strategies for\n   disseminating MPL Data Messages via MPL Interfaces:\n
      \  Proactive Forwarding  - With proactive forwarding, an MPL Forwarder\n      schedules
      transmissions of MPL Data Messages using the Trickle\n      algorithm, without
      any prior indication that neighboring nodes\n      have yet to receive the message.
      \ After transmitting the MPL Data\n      Message a limited number of times,
      the MPL Forwarder may terminate\n      proactive forwarding for the MPL Data
      Message.\n   Reactive Forwarding  - With reactive forwarding, an MPL Forwarder\n
      \     link-local multicasts MPL Control Messages using the Trickle\n      algorithm
      [RFC6206].  MPL Forwarders use MPL Control Messages to\n      discover new MPL
      Data Messages that have not yet been received.\n      When discovering that
      a neighboring MPL Forwarder has not yet\n      received an MPL Data Message,
      the MPL Forwarder schedules those\n      MPL Data Messages for transmission
      using the Trickle algorithm.\n   Note that, when used within the same MPL Domain,
      proactive and\n   reactive forwarding strategies are not mutually exclusive
      and may be\n   used simultaneously.  For example, upon receiving a new MPL Data\n
      \  Message when both proactive and reactive forwarding techniques are\n   enabled,
      an MPL Forwarder will proactively retransmit the MPL Data\n   Message a limited
      number of times and schedule further transmissions\n   upon receiving MPL Control
      Messages.\n"
    title: 4.3.  Protocol Overview
  - contents:
    - "4.4.  Signaling Overview\n   MPL generates and processes the following messages:\n
      \  MPL Data Message  - Generated by an MPL Seed to deliver a multicast\n      message
      across an MPL Domain.  The MPL Data Message's source is an\n      address in
      the Local Interface Set of the MPL Seed that generated\n      the message and
      is valid within the MPL Domain.  The MPL Data\n      Message's destination is
      the MPL Domain Address corresponding to\n      the MPL Domain.  An MPL Data
      Message contains:\n      *  The Seed Identifier of the MPL Seed that generated
      the MPL Data\n         Message.\n      *  The sequence number of the MPL Seed
      that generated the MPL Data\n         Message.\n      *  The original multicast
      message.\n   MPL Control Message  - Generated by an MPL Forwarder to communicate\n
      \     information contained in an MPL Domain's Seed Set and Buffered\n      Message
      Set to neighboring MPL Forwarders.  An MPL Control Message\n      contains a
      list of tuples for each entry in the Seed Set.  Each\n      tuple contains:\n
      \     *  The minimum sequence number maintained in the Seed Set for the\n         MPL
      Seed.\n      *  A bit-vector indicating the sequence numbers of MPL Data\n         Messages
      resident in the Buffered Message Set for the MPL Seed,\n         where the first
      bit represents a sequence number equal to the\n         minimum threshold maintained
      in the Seed Set.\n      *  The length of the bit-vector.\n"
    title: 4.4.  Signaling Overview
  title: 4.  MPL Protocol Overview
- contents:
  - "5.  MPL Parameters and Constants\n   This section describes various program and
    networking parameters and\n   constants used by MPL.\n"
  - contents:
    - "5.1.  MPL Multicast Addresses\n   MPL makes use of MPL Domain Addresses to
      identify MPL Interfaces of\n   an MPL Domain.  By default, MPL Forwarders subscribe
      to the\n   ALL_MPL_FORWARDERS multicast address with Realm-Local scope (scop\n
      \  value 3) [RFC7346].\n   For each MPL Domain Address that an MPL Interface
      subscribes to, the\n   MPL Interface MUST also subscribe to the MPL Domain Address
      with\n   Link-Local scope (scop value 2) when reactive forwarding is in use.\n
      \  MPL Forwarders use the link-scoped MPL Domain Address to communicate\n   MPL
      Control Messages to neighboring (i.e., on-link) MPL Forwarders.\n"
    title: 5.1.  MPL Multicast Addresses
  - contents:
    - "5.2.  MPL Message Types\n   MPL defines an IPv6 Option for carrying an MPL
      Seed Identifier and a\n   sequence number within an MPL Data Message.  The IPv6
      Option Type has\n   value 0x6D.\n   MPL defines an ICMPv6 Message (MPL Control
      Message) for communicating\n   information contained in an MPL Domain's Seed
      Set and Buffered\n   Message Set to neighboring MPL Forwarders.  The MPL Control
      Message\n   has ICMPv6 Type 159.\n"
    title: 5.2.  MPL Message Types
  - contents:
    - "5.3.  MPL Seed Identifiers\n   MPL uses MPL Seed Identifiers to uniquely identify
      MPL Seeds within\n   an MPL Domain.  For each MPL Domain that the MPL Forwarder
      serves as\n   an MPL Seed, the MPL Forwarder MUST have an associated MPL Seed\n
      \  Identifier.  An MPL Forwarder MAY use the same MPL Seed Identifier\n   across
      multiple MPL Domains, but the MPL Seed Identifier MUST be\n   unique within
      each MPL Domain.  The mechanism for assigning and\n   verifying uniqueness of
      MPL Seed Identifiers is not specified in this\n   document.\n"
    title: 5.3.  MPL Seed Identifiers
  - contents:
    - "5.4.  MPL Parameters\n   PROACTIVE_FORWARDING  - A boolean value that indicates
      whether or not\n      the MPL Forwarder schedules MPL Data Message transmissions
      after\n      receiving them for the first time.  PROACTIVE_FORWARDING has a\n
      \     default value of TRUE.  All MPL Interfaces on the same link SHOULD\n      be
      configured with the same value of PROACTIVE_FORWARDING.  An\n      implementation
      MAY choose to vary the value of\n      PROACTIVE_FORWARDING across interfaces
      on the same link if\n      reactive forwarding is also in use.  The mechanism
      for setting\n      PROACTIVE_FORWARDING is not specified within this document.\n
      \  SEED_SET_ENTRY_LIFETIME  - The minimum lifetime for an entry in the\n      Seed
      Set.  SEED_SET_ENTRY_LIFETIME has a default value of\n      30 minutes.  It
      is RECOMMENDED that all MPL Forwarders use the\n      same value for SEED_SET_ENTRY_LIFETIME
      for a given MPL Domain and\n      use a default value of 30 minutes.  Using
      a value of\n      SEED_SET_ENTRY_LIFETIME that is too small can cause the duplicate\n
      \     detection mechanism to fail, resulting in an MPL Forwarder\n      receiving
      a given MPL Data Message more than once.  The mechanism\n      for setting SEED_SET_ENTRY_LIFETIME
      is not specified within this\n      document.\n   As specified in [RFC6206],
      a Trickle timer runs for a defined\n   interval and has three configuration
      parameters: the minimum interval\n   size Imin, the maximum interval size Imax,
      and a redundancy\n   constant k.\n   This specification defines a fourth Trickle
      configuration parameter,\n   TimerExpirations, which indicates the number of
      Trickle timer\n   expiration events that occur before terminating the Trickle
      algorithm\n   for a given MPL Data Message or MPL Control Message.\n   Each
      MPL Interface uses the following Trickle parameters for MPL Data\n   Message
      and MPL Control Message transmissions:\n   DATA_MESSAGE_IMIN  - The minimum
      Trickle timer interval, as defined\n      in [RFC6206], for MPL Data Message
      transmissions.\n      DATA_MESSAGE_IMIN has a default value of 10 times the
      expected\n      link-layer latency.\n   DATA_MESSAGE_IMAX  - The maximum Trickle
      timer interval, as defined\n      in [RFC6206], for MPL Data Message transmissions.\n
      \     DATA_MESSAGE_IMAX has a default value equal to DATA_MESSAGE_IMIN.\n   DATA_MESSAGE_K
      \ - The redundancy constant, as defined in [RFC6206],\n      for MPL Data Message
      transmissions.  DATA_MESSAGE_K has a default\n      value of 1.\n   DATA_MESSAGE_TIMER_EXPIRATIONS
      \ - The number of Trickle timer\n      expirations that occur before terminating
      the Trickle algorithm's\n      retransmission of a given MPL Data Message.\n
      \     DATA_MESSAGE_TIMER_EXPIRATIONS has a default value of 3.\n   CONTROL_MESSAGE_IMIN
      \ - The minimum Trickle timer interval, as\n      defined in [RFC6206], for
      MPL Control Message transmissions.\n      CONTROL_MESSAGE_IMIN has a default
      value of 10 times the\n      worst-case link-layer latency.\n   CONTROL_MESSAGE_IMAX
      \ - The maximum Trickle timer interval, as\n      defined in [RFC6206], for
      MPL Control Message transmissions.\n      CONTROL_MESSAGE_IMAX has a default
      value of 5 minutes.\n   CONTROL_MESSAGE_K  - The redundancy constant, as defined
      in\n      [RFC6206], for MPL Control Message transmissions.\n      CONTROL_MESSAGE_K
      has a default value of 1.\n   CONTROL_MESSAGE_TIMER_EXPIRATIONS  - The number
      of Trickle timer\n      expirations that occur before terminating the Trickle
      algorithm\n      for MPL Control Message transmissions.\n      CONTROL_MESSAGE_TIMER_EXPIRATIONS
      has a default value of 10.\n   As described in [RFC6206], if different nodes
      have different\n   configuration parameters, Trickle may have unintended behaviors.\n
      \  Therefore, it is RECOMMENDED that all MPL Interfaces attached to the\n   same
      link of a given MPL Domain use the same values for the Trickle\n   parameters
      above for a given MPL Domain.  The mechanism for setting\n   the Trickle parameters
      is not specified within this document.\n   The default MPL parameters specify
      a forwarding strategy that\n   utilizes both proactive and reactive techniques.
      \ Using these default\n   values, an MPL Forwarder proactively transmits any
      new MPL Data\n   Messages it receives and then uses MPL Control Messages to
      trigger\n   additional MPL Data Message retransmissions where message drops
      are\n   detected.  Setting DATA_MESSAGE_IMAX to the same value as\n   DATA_MESSAGE_IMIN
      in this case is acceptable, since subsequent MPL\n   Data Message retransmissions
      are triggered by MPL Control Messages,\n   where CONTROL_MESSAGE_IMAX is greater
      than CONTROL_MESSAGE_IMIN.\n"
    title: 5.4.  MPL Parameters
  title: 5.  MPL Parameters and Constants
- contents:
  - "6.  Protocol Message Formats\n   Messages generated and processed by an MPL Forwarder
    are described in\n   this section.\n"
  - contents:
    - "6.1.  MPL Option\n   The MPL Option is carried in MPL Data Messages in an IPv6
      Hop-by-Hop\n   Options header, immediately following the IPv6 header.  The MPL\n
      \  Option has the following format:\n      0                   1                   2
      \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n                                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                                    |  Option Type  |  Opt Data Len |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | S |M|V|  rsv  |   sequence    |      seed-id (optional)       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Option Type    0x6D.\n   Opt Data Len   Length of the Option Data field [RFC2460]
      in octets.\n   S              2-bit unsigned integer.  Identifies the length
      of the\n                  seed-id.  '0' indicates that the seed-id is the IPv6\n
      \                 Source Address and not included in the MPL Option.\n                  '1'
      indicates that the seed-id is a 16-bit unsigned\n                  integer.
      \ '2' indicates that the seed-id is a 64-bit\n                  unsigned integer.
      \ '3' indicates that the seed-id is a\n                  128-bit unsigned integer.\n
      \  M              1-bit flag.  '1' indicates that the value in the\n                  sequence
      field is known to be the largest sequence\n                  number that was
      received from the MPL Seed.\n   V              1-bit flag.  '0' indicates that
      the MPL Option\n                  conforms to this specification.  MPL Data
      Messages\n                  with an MPL Option in which this flag is set to
      1 MUST\n                  be dropped.\n   rsv            4-bit reserved field.
      \ MUST be set to 0 on\n                  transmission and ignored on reception.\n
      \  sequence       8-bit unsigned integer.  Identifies relative ordering\n                  of
      MPL Data Messages from the MPL Seed identified by\n                  the seed-id.\n
      \  seed-id        Uniquely identifies the MPL Seed that initiated\n                  dissemination
      of the MPL Data Message.  The size of\n                  the seed-id is indicated
      by the S field.\n   The Option Data (specifically, the M flag) of the MPL Option
      is\n   updated by MPL Forwarders as the MPL Data Message is forwarded.\n   Nodes
      that do not understand the MPL Option MUST discard the MPL Data\n   Message.
      \ Thus, according to [RFC2460], the three high-order bits of\n   the Option
      Type are set to '011'.  The Option Data length is\n   variable.\n   The seed-id
      uniquely identifies an MPL Seed.  When the seed-id is\n   128 bits (S=3), the
      MPL Seed MAY use an IPv6 address assigned to one\n   of its interfaces that
      is unique within the MPL Domain.  Managing MPL\n   Seed Identifiers is not within
      the scope of this document.\n   The sequence field establishes a total ordering
      of MPL Data Messages\n   generated by an MPL Seed for an MPL Domain.  The MPL
      Seed MUST\n   increment the sequence field's value on each new MPL Data Message\n
      \  that it generates for an MPL Domain.  Implementations MUST follow the\n   Serial
      Number Arithmetic as defined in [RFC1982] when incrementing a\n   sequence value
      or comparing two sequence values.\n   Future updates to this specification may
      define additional fields\n   following the seed-id field.\n"
    title: 6.1.  MPL Option
  - contents:
    - "6.2.  MPL Control Message\n   An MPL Forwarder uses ICMPv6 Messages to communicate
      information\n   contained in an MPL Domain's Seed Set and Buffered Message Set
      to\n   neighboring MPL Forwarders.  The MPL Control Message has the\n   following
      format:\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |     Code      |          Checksum             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     .
      \                     MPL Seed Info[0..n]                      .\n     .                                                               .\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   IP
      Fields:\n   Source Address        An IPv6 address in the AddressSet of the\n
      \                        corresponding MPL Interface.  MUST be valid\n                         within
      the MPL Domain.\n   Destination Address   The link-scoped MPL Domain Address\n
      \                        corresponding to the MPL Domain.\n   Hop Limit             255\n
      \  ICMPv6 Fields:\n   Type                  159\n   Code                  0\n
      \  Checksum              The ICMP checksum.  See [RFC4443].\n   MPL Seed Info[0..n]
      \  List of zero or more MPL Seed Info entries.\n   The MPL Control Message indicates
      the sequence numbers of MPL Data\n   Messages that are within the MPL Domain's
      Buffered Message Set.  The\n   MPL Control Message also indicates the sequence
      numbers of MPL Data\n   Messages that an MPL Forwarder is willing to receive.
      \ The MPL\n   Control Message allows neighboring MPL Forwarders to determine\n
      \  whether or not there are any new MPL Data Messages to exchange.\n"
    title: 6.2.  MPL Control Message
  - contents:
    - "6.3.  MPL Seed Info\n   The MPL Seed Info encodes the minimum sequence number
      for an MPL Seed\n   maintained in the MPL Domain's Seed Set.  The MPL Seed Info
      also\n   indicates the sequence numbers of MPL Data Messages generated by the\n
      \  MPL Seed that are stored within the MPL Domain's Buffered Message\n   Set.
      \ The MPL Seed Info has the following format:\n      0                   1                   2
      \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   min-seqno   |  bm-len   | S |   seed-id (0/2/8/16 octets)   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     .
      \           buffered-mpl-messages (variable length)            .\n     .                                                               .\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   min-seqno
      \              8-bit unsigned integer.  The lower-bound\n                           sequence
      number for the MPL Seed.\n   bm-len                  6-bit unsigned integer.
      \ The size of\n                           buffered-mpl-messages in octets.\n
      \  S                       2-bit unsigned integer.  Identifies the\n                           length
      of the seed-id.  '0' indicates that\n                           the seed-id
      value is the IPv6 Source Address\n                           and not included
      in the MPL Seed Info.  '1'\n                           indicates that the seed-id
      value is a 16-bit\n                           unsigned integer.  '2' indicates
      that the\n                           seed-id value is a 64-bit unsigned integer.\n
      \                          '3' indicates that the seed-id is a 128-bit\n                           unsigned
      integer.\n   seed-id                 Variable-length unsigned integer.  Indicates\n
      \                          the MPL Seed associated with this MPL\n                           Seed
      Info.\n   buffered-mpl-messages   Variable-length bit-vector.  Identifies the\n
      \                          sequence numbers of MPL Data Messages\n                           maintained
      in the corresponding Buffered\n                           Message Set for the
      MPL Seed.  The i-th bit\n                           represents a sequence number
      of min-seqno\n                           + i.  '0' indicates that the corresponding\n
      \                          MPL Data Message does not exist in the\n                           Buffered
      Message Set.  '1' indicates that the\n                           corresponding
      MPL Data Message does exist in\n                           the Buffered Message
      Set.\n   The MPL Seed Info does not have any octet alignment requirement.\n"
    title: 6.3.  MPL Seed Info
  title: 6.  Protocol Message Formats
- contents:
  - '7.  Information Base

    '
  - contents:
    - "7.1.  Local Interface Set\n   The Local Interface Set records the local MPL
      Interfaces of an MPL\n   Forwarder.  The Local Interface Set consists of Local
      Interface\n   Tuples, one per MPL Interface: (AddressSet).\n   AddressSet  -
      a set of unicast addresses assigned to the MPL\n      Interface.\n"
    title: 7.1.  Local Interface Set
  - contents:
    - "7.2.  Domain Set\n   The Domain Set records the MPL Interfaces that subscribe
      to each MPL\n   Domain Address.  The Domain Set consists of MPL Domain Tuples,
      one\n   per MPL Domain: (MPLInterfaceSet).\n   MPLInterfaceSet  - a set of MPL
      Interfaces that subscribe to the MPL\n      Domain Address that identifies the
      MPL Domain.\n"
    title: 7.2.  Domain Set
  - contents:
    - "7.3.  Seed Set\n   A Seed Set records a sliding window used to determine the
      sequence\n   numbers of MPL Data Messages (generated by the MPL Seed) that an
      MPL\n   Forwarder is willing to accept.  An MPL Forwarder maintains a Seed\n
      \  Set for each MPL Domain that it participates in.  A Seed Set consists\n   of
      MPL Seed Tuples: (SeedID, MinSequence, Lifetime).\n   SeedID  - the identifier
      for the MPL Seed.\n   MinSequence  - a lower-bound sequence number that represents
      the\n      sequence number of the oldest MPL Data Message the MPL Forwarder\n
      \     is willing to receive or transmit.  An MPL Forwarder MUST ignore\n      any
      MPL Data Message that has a sequence value less than\n      MinSequence.\n   Lifetime
      \ - indicates the minimum remaining lifetime of the Seed Set\n      entry.  An
      MPL Forwarder MUST NOT free a Seed Set entry before the\n      remaining lifetime
      expires.\n"
    title: 7.3.  Seed Set
  - contents:
    - "7.4.  Buffered Message Set\n   A Buffered Message Set records recently received
      MPL Data Messages\n   from an MPL Seed within an MPL Domain.  An MPL Forwarder
      uses a\n   Buffered Message Set to buffer MPL Data Messages while the MPL\n
      \  Forwarder is forwarding the MPL Data Messages.  An MPL Forwarder\n   maintains
      a Buffered Message Set for each MPL Domain that it\n   participates in.  A Buffered
      Message Set consists of Buffered Message\n   Tuples: (SeedID, SequenceNumber,
      DataMessage).\n   SeedID  - the identifier for the MPL Seed that generated the
      MPL Data\n      Message.\n   SequenceNumber  - the sequence number for the MPL
      Data Message.\n   DataMessage  - the MPL Data Message.\n   All MPL Data Messages
      within a Buffered Message Set MUST have a\n   sequence number greater than or
      equal to MinSequence for the\n   corresponding SeedID.  When increasing MinSequence
      for an MPL Seed,\n   the MPL Forwarder MUST delete any MPL Data Messages from
      the\n   corresponding Buffered Message Set that have sequence numbers less\n
      \  than MinSequence.\n"
    title: 7.4.  Buffered Message Set
  title: 7.  Information Base
- contents:
  - "8.  MPL Seed Sequence Numbers\n   Each MPL Seed maintains a sequence number for
    each MPL Domain that it\n   serves.  The sequence numbers are included in MPL
    Data Messages\n   generated by the MPL Seed.  The MPL Seed MUST increment the
    sequence\n   number for each MPL Data Message that it generates for an MPL Domain.\n
    \  Implementations MUST follow the Serial Number Arithmetic as defined\n   in
    [RFC1982] when incrementing a sequence value or comparing two\n   sequence values.
    \ This sequence number is used to establish a total\n   ordering of MPL Data Messages
    generated by an MPL Seed for an MPL\n   Domain.\n"
  title: 8.  MPL Seed Sequence Numbers
- contents:
  - '9.  MPL Data Messages

    '
  - contents:
    - "9.1.  MPL Data Message Generation\n   MPL Data Messages are generated by MPL
      Seeds when these messages\n   enter the MPL Domain.  All MPL Data Messages have
      the following\n   properties:\n   o  The IPv6 Source Address MUST be an address
      in the AddressSet of a\n      corresponding MPL Interface and MUST be valid
      within the MPL\n      Domain.\n   o  The IPv6 Destination Address MUST be set
      to the MPL Domain Address\n      corresponding to the MPL Domain.\n   o  An
      MPL Data Message MUST contain an MPL Option in its IPv6 header\n      to identify
      the MPL Seed that generated the message and the\n      ordering relative to
      other MPL Data Messages generated by the\n      MPL Seed.\n   When the destination
      address is an MPL Domain Address and the source\n   address is in the AddressList
      of an MPL Interface that belongs to\n   that MPL Domain Address, the application
      message and the MPL Data\n   Message MAY be identical.  In other words, the
      MPL Data Message may\n   contain a single IPv6 header that includes the MPL
      Option.\n   Otherwise, IPv6-in-IPv6 encapsulation MUST be used to satisfy the
      MPL\n   Data Message requirements listed above [RFC2473].  The complete\n   IPv6-in-IPv6
      message forms an MPL Data Message.  The outer IPv6\n   header conforms to the
      MPL Data Message requirements listed above.\n   The encapsulated IPv6 datagram
      encodes the multicast data message\n   that is communicated beyond the MPL Domain.\n"
    title: 9.1.  MPL Data Message Generation
  - contents:
    - "9.2.  MPL Data Message Transmission\n   An MPL Forwarder manages transmission
      of MPL Data Messages in its\n   Buffered Message Sets using the Trickle algorithm
      [RFC6206].  An MPL\n   Forwarder MUST use a separate Trickle timer for each
      MPL Data Message\n   that it is actively forwarding.  In accordance with Section
      5 of\n   RFC 6206 [RFC6206], the following items apply:\n   o  This document
      defines a \"consistent\" transmission as receiving an\n      MPL Data Message
      that has the same MPL Domain Address, seed-id,\n      and sequence value as
      the MPL Data Message managed by the\n      Trickle timer.\n   o  This document
      defines an \"inconsistent\" transmission as receiving\n      an MPL Data Message
      that has the same MPL Domain Address, seed-id\n      value, and the M flag set,
      but has a sequence value less than that\n      of the MPL Data Message managed
      by the Trickle timer.\n   o  This document does not define any external \"events\".\n
      \  o  This document defines MPL Data Messages as Trickle messages.\n   o  The
      actions outside the Trickle algorithm that MPL takes involve\n      managing
      the MPL Domain's Seed Set and Buffered Message Set.\n   As specified in [RFC6206],
      a Trickle timer has three variables: the\n   current interval size I, a time
      within the current interval t, and a\n   counter c.  MPL defines a fourth variable,
      e, which counts the number\n   of Trickle timer expiration events since the
      Trickle timer was last\n   reset.\n   After DATA_MESSAGE_TIMER_EXPIRATIONS Trickle
      timer events, the MPL\n   Forwarder MUST disable the Trickle timer.  When a
      buffered MPL Data\n   Message does not have an associated Trickle timer, the
      MPL Forwarder\n   MAY delete the message from the Buffered Message Set by advancing
      the\n   MinSequence value of the corresponding MPL Seed in the Seed Set.\n   When
      the MPL Forwarder no longer buffers any messages for an MPL\n   Seed, the MPL
      Forwarder MUST NOT increment MinSequence for that\n   MPL Seed.\n   When transmitting
      an MPL Data Message, the MPL Forwarder MUST either\n   set the M flag to zero
      or set it to a level that indicates whether or\n   not the message's sequence
      number is the largest value that has been\n   received from the MPL Seed.\n"
    title: 9.2.  MPL Data Message Transmission
  - contents:
    - "9.3.  MPL Data Message Processing\n   Upon receiving an MPL Data Message, the
      MPL Forwarder first processes\n   the MPL Option and updates the Trickle timer
      associated with the MPL\n   Data Message if one exists.\n   Upon receiving an
      MPL Data Message, an MPL Forwarder MUST perform one\n   of the following actions:\n
      \  o  Accept the message and enter the MPL Data Message in the MPL\n      Domain's
      Buffered Message Set.\n   o  Accept the message and update the corresponding
      MinSequence in\n      the MPL Domain's Seed Set to 1 greater than the message's\n
      \     sequence number.\n   o  Discard the message without any change to the
      MPL\n      Information Base.\n   If a Seed Set entry exists for the MPL Seed,
      the MPL Forwarder MUST\n   discard the MPL Data Message if its sequence number
      is less than\n   MinSequence or exists in the Buffered Message Set.\n   If a
      Seed Set entry does not exist for the MPL Seed, the MPL\n   Forwarder MUST create
      a new entry for the MPL Seed before accepting\n   the MPL Data Message.\n   If
      memory is limited, an MPL Forwarder SHOULD reclaim memory\n   resources by:\n
      \  o  Incrementing MinSequence entries in a Seed Set and deleting MPL\n      Data
      Messages in the corresponding Buffered Message Set that fall\n      below the
      MinSequence value.\n   o  Deleting other Seed Set entries that have expired
      and the\n      corresponding MPL Data Messages in the Buffered Message Set.\n
      \  If the MPL Forwarder accepts the MPL Data Message, the MPL Forwarder\n   MUST
      perform the following actions:\n   o  Reset the Lifetime of the corresponding
      Seed Set entry to\n      SEED_SET_ENTRY_LIFETIME.\n   o  If PROACTIVE_FORWARDING
      is TRUE, the MPL Forwarder MUST initialize\n      and start a Trickle timer
      for the MPL Data Message.\n   o  If the MPL Control Message Trickle timer is
      not running and\n      CONTROL_MESSAGE_TIMER_EXPIRATIONS is non-zero, the MPL
      Forwarder\n      MUST initialize and start the MPL Control Message Trickle timer.\n
      \  o  If the MPL Control Message Trickle timer is running, the MPL\n      Forwarder
      MUST reset the MPL Control Message Trickle timer.\n"
    title: 9.3.  MPL Data Message Processing
  title: 9.  MPL Data Messages
- contents:
  - '10.  MPL Control Messages

    '
  - contents:
    - "10.1.  MPL Control Message Generation\n   An MPL Forwarder generates MPL Control
      Messages to communicate an MPL\n   Domain's Seed Set and Buffered Message Set
      to neighboring MPL\n   Forwarders.  Each MPL Control Message is generated according
      to\n   Section 6.2, with an MPL Seed Info entry for each entry in the MPL\n
      \  Domain's Seed Set.  Each MPL Seed Info entry has the following\n   content:\n
      \  o  S set to the size of the seed-id field in the MPL Seed Info entry.\n   o
      \ min-seqno set to the MinSequence value of the MPL Seed.\n   o  bm-len set
      to the size of buffered-mpl-messages in octets.\n   o  seed-id set to the MPL
      Seed Identifier.\n   o  buffered-mpl-messages with each bit representing whether
      or not an\n      MPL Data Message with the corresponding sequence number exists
      in\n      the Buffered Message Set.  The i-th bit represents a sequence\n      number
      of min-seqno + i.  '0' indicates that the corresponding MPL\n      Data Message
      does not exist in the Buffered Message Set.  '1'\n      indicates that the corresponding
      MPL Data Message does exist in\n      the Buffered Message Set.\n"
    title: 10.1.  MPL Control Message Generation
  - contents:
    - "10.2.  MPL Control Message Transmission\n   An MPL Forwarder transmits MPL
      Control Messages using the Trickle\n   algorithm.  An MPL Forwarder maintains
      a single Trickle timer for\n   each MPL Domain.  When CONTROL_MESSAGE_TIMER_EXPIRATIONS
      is 0, the\n   MPL Forwarder does not execute the Trickle algorithm and does
      not\n   transmit MPL Control Messages.  In accordance with Section 5 of\n   RFC
      6206 [RFC6206], the following items apply:\n   o  This document defines a \"consistent\"
      transmission as receiving an\n      MPL Control Message that results in a determination
      that neither\n      the receiving nor transmitting node has any new MPL Data
      Messages\n      to offer.\n   o  This document defines an \"inconsistent\" transmission
      as receiving\n      an MPL Control Message that results in a determination that
      either\n      the receiving or transmitting node has at least one new MPL Data\n
      \     Message to offer.\n   o  The Trickle timer is reset in response to external
      \"events\".  This\n      document defines an \"event\" as increasing the MinSequence
      value of\n      any entry in the corresponding Seed Set or adding a message
      to the\n      corresponding Buffered Message Set.\n   o  This document defines
      an MPL Control Message as a Trickle message.\n   As specified in [RFC6206],
      a Trickle timer has three variables: the\n   current interval size I, a time
      within the current interval t, and a\n   counter c.  MPL defines a fourth variable,
      e, which counts the number\n   of Trickle timer expiration events since the
      Trickle timer was last\n   reset.  After CONTROL_MESSAGE_TIMER_EXPIRATIONS Trickle
      timer events,\n   the MPL Forwarder MUST disable the Trickle timer.\n"
    title: 10.2.  MPL Control Message Transmission
  - contents:
    - "10.3.  MPL Control Message Processing\n   An MPL Forwarder processes each MPL
      Control Message that it receives\n   to determine if it has any new MPL Data
      Messages to receive or offer.\n   An MPL Forwarder determines if a new MPL Data
      Message has not been\n   received from a neighboring node if any of the following
      conditions\n   hold true:\n   o  The MPL Control Message includes an MPL Seed
      that does not exist\n      in the MPL Domain's Seed Set.\n   o  The MPL Control
      Message indicates that the neighbor has an MPL\n      Data Message in its Buffered
      Message Set with sequence number\n      greater than MinSequence (i.e., the
      i-th bit is set to 1 and\n      min-seqno + i > MinSequence) and is not included
      in the MPL\n      Domain's Buffered Message Set.\n   When an MPL Forwarder determines
      that it has not yet received an MPL\n   Data Message buffered by a neighboring
      device, the MPL Forwarder MUST\n   reset its Trickle timer associated with MPL
      Control Message\n   transmissions.  If an MPL Control Message Trickle timer
      is not\n   running, the MPL Forwarder MUST initialize and start a new\n   Trickle
      timer.\n   An MPL Forwarder determines if an MPL Data Message in the Buffered\n
      \  Message Set has not yet been received by a neighboring MPL Forwarder\n   if
      any of the following conditions hold true:\n   o  The MPL Control Message does
      not include an MPL Seed for the MPL\n      Data Message.\n   o  The MPL Data
      Message's sequence number is greater than or equal to\n      min-seqno and not
      included in the neighbor's corresponding\n      Buffered Message Set (i.e.,
      the MPL Data Message's sequence number\n      does not have a corresponding
      bit in buffered-mpl-messages\n      set to 1).\n   When an MPL Forwarder determines
      that it has at least one MPL Data\n   Message in its corresponding Buffered
      Message Set that has not yet\n   been received by a neighbor, the MPL Forwarder
      MUST reset the MPL\n   Control Message Trickle timer.  Additionally, for each
      of those\n   entries in the Buffered Message Set, the MPL Forwarder MUST reset
      the\n   Trickle timer and reset e to 0.  If a Trickle timer is not associated\n
      \  with the MPL Data Message, the MPL Forwarder MUST initialize and\n   start
      a new Trickle timer.\n"
    title: 10.3.  MPL Control Message Processing
  title: 10.  MPL Control Messages
- contents:
  - "11.  IANA Considerations\n   This document defines one IPv6 Option, a type that
    has been allocated\n   from the IPv6 \"Destination Options and Hop-by-Hop Options\"
    registry\n   of [RFC2780].\n   This document defines one ICMPv6 Message, a type
    that has been\n   allocated from the \"ICMPv6 'type' Numbers\" registry of [RFC4443].\n
    \  This document registers a well-known multicast address from the\n   \"Variable
    Scope Multicast Addresses\" registry of [RFC3307].\n"
  - contents:
    - "11.1.  MPL Option Type\n   IANA has allocated an IPv6 Option Type from the
      IPv6 \"Destination\n   Options and Hop-by-Hop Options\" registry of [RFC2780],
      as specified\n   in Table 1 below:\n        +-----------+-----+-----+-------+-------------+-----------+\n
      \       | Hex Value | act | chg |  rest | Description | Reference |\n        +-----------+-----+-----+-------+-------------+-----------+\n
      \       |    0x6D   |  01 |  1  | 01101 |  MPL Option |  RFC 7731 |\n        +-----------+-----+-----+-------+-------------+-----------+\n
      \                  Table 1: IPv6 Option Type Allocation\n   Note: IANA has marked
      the value 0x4D (previously \"MPL Option\") as\n   \"Deprecated\".\n"
    title: 11.1.  MPL Option Type
  - contents:
    - "11.2.  MPL ICMPv6 Type\n   IANA has allocated an ICMPv6 Type from the \"ICMPv6
      'type' Numbers\"\n   registry of [RFC4443], as specified in Table 2 below:\n
      \               +------+---------------------+-----------+\n                |
      Type |         Name        | Reference |\n                +------+---------------------+-----------+\n
      \               | 159  | MPL Control Message |  RFC 7731 |\n                +------+---------------------+-----------+\n
      \                     Table 2: ICMPv6 Type Allocation\n"
    title: 11.2.  MPL ICMPv6 Type
  - contents:
    - "11.3.  Well-Known Multicast Addresses\n   IANA has allocated an IPv6 multicast
      address, with Group ID in the\n   range [0x01,0xFF] for IPv6 over Low-Power
      Wireless Personal Area\n   Network (6LoWPAN) compression [RFC6282], \"ALL_MPL_FORWARDERS\"
      from\n   the \"Variable Scope Multicast Addresses\" sub-registry of the \"IPv6\n
      \  Multicast Address Space Registry\" [RFC3307], as specified in Table 3\n   below:\n
      \  +---------------------+--------------------+-----------+------------+\n   |
      \    Address(es)     |    Description     | Reference |    Date    |\n   |                     |
      \                   |           | Registered |\n   +---------------------+--------------------+-----------+------------+\n
      \  | FF0X:0:0:0:0:0:0:FC | ALL_MPL_FORWARDERS |  RFC 7731 | 2013-04-10 |\n   +---------------------+--------------------+-----------+------------+\n
      \          Table 3: Variable Scope Multicast Address Allocation\n"
    title: 11.3.  Well-Known Multicast Addresses
  title: 11.  IANA Considerations
- contents:
  - "12.  Security Considerations\n   MPL uses sequence numbers to maintain a total
    ordering of MPL Data\n   Messages from an MPL Seed.  The use of sequence numbers
    allows a\n   denial-of-service attack where an attacker can spoof a message with
    a\n   sufficiently large sequence number to (i) flush messages from the\n   Buffered
    Message List and (ii) increase the MinSequence value for an\n   MPL Seed in the
    corresponding Seed Set.  In both cases, the side\n   effect allows an attacker
    to halt the forwarding process of any MPL\n   Data Messages being disseminated
    and prevents MPL Forwarders from\n   accepting new MPL Data Messages that an MPL
    Seed generates while the\n   sequence number is less than MinSequence or until
    the corresponding\n   Seed Set Entry expires.  The net effect applies to both
    proactive and\n   reactive forwarding modes.\n   In general, the basic ability
    to inject messages into an LLN may be\n   used as a denial-of-service attack,
    regardless of what forwarding\n   protocol is used.  Because MPL is a dissemination
    protocol, the\n   ability to spoof MPL messages allows an attacker to affect an
    entire\n   MPL Domain.  For these reasons, LLNs typically employ link-layer\n
    \  security mechanisms to mitigate an attacker's ability to inject\n   messages.
    \ For example, the IEEE 802.15.4 [IEEE802.15.4] standard\n   specifies frame security
    mechanisms using AES-128 to support access\n   control, message integrity, message
    confidentiality, and replay\n   protection.  However, if the attack vector includes
    attackers that\n   have access to the LLN, then MPL SHOULD NOT be used.\n   To
    prevent attackers from injecting packets through an MPL Forwarder,\n   the MPL
    Forwarder MUST NOT accept or forward MPL Data Messages from a\n   communication
    interface that does not subscribe to the MPL Domain\n   Address identified in
    the message's destination address.\n   MPL uses the Trickle algorithm to manage
    message transmissions;\n   therefore, the security considerations described in
    [RFC6206] apply.\n"
  title: 12.  Security Considerations
- contents:
  - '13.  References

    '
  - contents:
    - "13.1.  Normative References\n   [RFC1982]  Elz, R. and R. Bush, \"Serial Number
      Arithmetic\", RFC 1982,\n              DOI 10.17487/RFC1982, August 1996,\n
      \             <http://www.rfc-editor.org/info/rfc1982>.\n   [RFC2119]  Bradner,
      S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\",
      BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6)
      Specification\", RFC 2460, DOI 10.17487/RFC2460,\n              December 1998,
      <http://www.rfc-editor.org/info/rfc2460>.\n   [RFC2473]  Conta, A. and S. Deering,
      \"Generic Packet Tunneling in\n              IPv6 Specification\", RFC 2473,
      DOI 10.17487/RFC2473,\n              December 1998, <http://www.rfc-editor.org/info/rfc2473>.\n
      \  [RFC2780]  Bradner, S. and V. Paxson, \"IANA Allocation Guidelines For\n
      \             Values In the Internet Protocol and Related Headers\",\n              BCP
      37, RFC 2780, DOI 10.17487/RFC2780, March 2000,\n              <http://www.rfc-editor.org/info/rfc2780>.\n
      \  [RFC3307]  Haberman, B., \"Allocation Guidelines for IPv6 Multicast\n              Addresses\",
      RFC 3307, DOI 10.17487/RFC3307, August 2002,\n              <http://www.rfc-editor.org/info/rfc3307>.\n
      \  [RFC4007]  Deering, S., Haberman, B., Jinmei, T., Nordmark, E., and\n              B.
      Zill, \"IPv6 Scoped Address Architecture\", RFC 4007,\n              DOI 10.17487/RFC4007,
      March 2005,\n              <http://www.rfc-editor.org/info/rfc4007>.\n   [RFC4443]
      \ Conta, A., Deering, S., and M. Gupta, Ed., \"Internet\n              Control
      Message Protocol (ICMPv6) for the Internet\n              Protocol Version 6
      (IPv6) Specification\", RFC 4443,\n              DOI 10.17487/RFC4443, March
      2006,\n              <http://www.rfc-editor.org/info/rfc4443>.\n   [RFC6206]
      \ Levis, P., Clausen, T., Hui, J., Gnawali, O., and J. Ko,\n              \"The
      Trickle Algorithm\", RFC 6206, DOI 10.17487/RFC6206,\n              March 2011,
      <http://www.rfc-editor.org/info/rfc6206>.\n   [RFC6282]  Hui, J., Ed., and P.
      Thubert, \"Compression Format for IPv6\n              Datagrams over IEEE 802.15.4-Based
      Networks\", RFC 6282,\n              DOI 10.17487/RFC6282, September 2011,\n
      \             <http://www.rfc-editor.org/info/rfc6282>.\n   [RFC6550]  Winter,
      T., Ed., Thubert, P., Ed., Brandt, A., Hui, J.,\n              Kelsey, R., Levis,
      P., Pister, K., Struik, R., Vasseur,\n              JP., and R. Alexander, \"RPL:
      IPv6 Routing Protocol for\n              Low-Power and Lossy Networks\", RFC
      6550,\n              DOI 10.17487/RFC6550, March 2012,\n              <http://www.rfc-editor.org/info/rfc6550>.\n
      \  [RFC7346]  Droms, R., \"IPv6 Multicast Address Scopes\", RFC 7346,\n              DOI
      10.17487/RFC7346, August 2014,\n              <http://www.rfc-editor.org/info/rfc7346>.\n"
    title: 13.1.  Normative References
  - contents:
    - "13.2.  Informative References\n   [Clausen2013]\n              Clausen, T.,
      de Verdiere, A., and J. Yi, \"Performance\n              Analysis of Trickle
      as a Flooding Mechanism\", The 15th\n              IEEE International Conference
      on Communication\n              Technology (ICCT2013), DOI 10.1109/ICCT.2013.6820439,\n
      \             November 2013.\n   [IEEE802.15.4]\n              IEEE, \"IEEE
      Standard for Local and metropolitan area\n              networks--Part 15.4:
      Low-Rate Wireless Personal Area\n              Networks (LR-WPANs)\", IEEE 802.15.4,\n
      \             DOI 10.1109/ieeestd.2011.6012487,\n              <http://ieeexplore.ieee.org/servlet/\n
      \             opac?punumber=6012485>.\n   [RFC3973]  Adams, A., Nicholas, J.,
      and W. Siadak, \"Protocol\n              Independent Multicast - Dense Mode
      (PIM-DM): Protocol\n              Specification (Revised)\", RFC 3973, DOI 10.17487/RFC3973,\n
      \             January 2005, <http://www.rfc-editor.org/info/rfc3973>.\n   [RFC4601]
      \ Fenner, B., Handley, M., Holbrook, H., and I. Kouvelas,\n              \"Protocol
      Independent Multicast - Sparse Mode (PIM-SM):\n              Protocol Specification
      (Revised)\", RFC 4601,\n              DOI 10.17487/RFC4601, August 2006,\n              <http://www.rfc-editor.org/info/rfc4601>.\n"
    title: 13.2.  Informative References
  title: 13.  References
- contents:
  - "Acknowledgements\n   The authors would like to acknowledge the helpful comments
    of Robert\n   Cragie, Esko Dijk, Ralph Droms, Paul Duffy, Adrian Farrel, Ulrich\n
    \  Herberg, Owen Kirby, Philip Levis, Kerry Lynn, Joseph Reddy, Michael\n   Richardson,
    Ines Robles, Don Sturek, Dario Tedeschi, and Peter\n   van der Stok, which greatly
    improved the document.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Jonathan W. Hui\n   Nest Labs\n   3400 Hillview Ave.\n
    \  Palo Alto, California  94304\n   United States\n   Phone: +650 253 2770\n   Email:
    jonhui@nestlabs.com\n   Richard Kelsey\n   Silicon Labs\n   25 Thomson Place\n
    \  Boston, Massachusetts  02210\n   United States\n   Phone: +617 951 1225\n   Email:
    richard.kelsey@silabs.com\n"
  title: Authors' Addresses
