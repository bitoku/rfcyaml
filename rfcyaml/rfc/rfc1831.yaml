- title: __initial_text__
  contents:
  - '      RPC: Remote Procedure Call Protocol Specification Version 2

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: ABSTRACT
  contents:
  - "ABSTRACT\n   This document describes the ONC Remote Procedure Call (ONC RPC\n\
    \   Version 2) protocol as it is currently deployed and accepted.  \"ONC\"\n \
    \  stands for \"Open Network Computing\".\n"
- title: TABLE OF CONTENTS
  contents:
  - "TABLE OF CONTENTS\n      1. INTRODUCTION                                    \
    \          2\n      2. TERMINOLOGY                                           \
    \    2\n      3. THE RPC MODEL                                             2\n\
    \      4. TRANSPORTS AND SEMANTICS                                  4\n      5.\
    \ BINDING AND RENDEZVOUS INDEPENDENCE                       5\n      6. AUTHENTICATION\
    \                                            5\n      7. RPC PROTOCOL REQUIREMENTS\
    \                                 5\n      7.1 RPC Programs and Procedures   \
    \                           6\n      7.2 Authentication                      \
    \                     7\n      7.3 Program Number Assignment                 \
    \               8\n      7.4 Other Uses of the RPC Protocol                  \
    \         8\n      7.4.1 Batching                                            \
    \   8\n      7.4.2 Broadcast Remote Procedure Calls                       8\n\
    \      8. THE RPC MESSAGE PROTOCOL                                  9\n      9.\
    \ AUTHENTICATION PROTOCOLS                                 12\n      9.1 Null\
    \ Authentication                                     13\n      10. RECORD MARKING\
    \ STANDARD                                 13\n      11. THE RPC LANGUAGE    \
    \                                    13\n      11.1 An Example Service Described\
    \ in the RPC Language       13\n      11.2 The RPC Language Specification    \
    \                     14\n      11.3 Syntax Notes                            \
    \               15\n      APPENDIX A: SYSTEM AUTHENTICATION                  \
    \         16\n      REFERENCES                                               \
    \   17\n      Security Considerations                                     18\n\
    \      Author's Address                                            18\n"
- title: 1. INTRODUCTION
  contents:
  - "1. INTRODUCTION\n   This document specifies version two of the message protocol\
    \ used in\n   ONC Remote Procedure Call (RPC).  The message protocol is specified\n\
    \   with the eXternal Data Representation (XDR) language [9].  This\n   document\
    \ assumes that the reader is familiar with XDR.  It does not\n   attempt to justify\
    \ remote procedure calls systems or describe their\n   use.  The paper by Birrell\
    \ and Nelson [1] is recommended as an\n   excellent background for the remote\
    \ procedure call concept.\n"
- title: 2. TERMINOLOGY
  contents:
  - "2. TERMINOLOGY\n   This document discusses clients, calls, servers, replies,\
    \ services,\n   programs, procedures, and versions.  Each remote procedure call\
    \ has\n   two sides: an active client side that makes the call to a server,\n\
    \   which sends back a reply.  A network service is a collection of one\n   or\
    \ more remote programs.  A remote program implements one or more\n   remote procedures;\
    \ the procedures, their parameters, and results are\n   documented in the specific\
    \ program's protocol specification.  A\n   server may support more than one version\
    \ of a remote program in order\n   to be compatible with changing protocols.\n\
    \   For example, a network file service may be composed of two programs.\n   One\
    \ program may deal with high-level applications such as file system\n   access\
    \ control and locking.  The other may deal with low-level file\n   input and output\
    \ and have procedures like \"read\" and \"write\".  A\n   client of the network\
    \ file service would call the procedures\n   associated with the two programs\
    \ of the service on behalf of the\n   client.\n   The terms client and server\
    \ only apply to a particular transaction; a\n   particular hardware entity (host)\
    \ or software entity (process or\n   program) could operate in both roles at different\
    \ times.  For\n   example, a program that supplies remote execution service could\
    \ also\n   be a client of a network file service.\n"
- title: 3. THE RPC MODEL
  contents:
  - "3. THE RPC MODEL\n   The ONC RPC protocol is based on the remote procedure call\
    \ model,\n   which is similar to the local procedure call model.  In the local\n\
    \   case, the caller places arguments to a procedure in some well-\n   specified\
    \ location (such as a register window).  It then transfers\n   control to the\
    \ procedure, and eventually regains control.  At that\n   point, the results of\
    \ the procedure are extracted from the well-\n   specified location, and the caller\
    \ continues execution.\n   The remote procedure call model is similar.  One thread\
    \ of control\n   logically winds through two processes: the caller's process,\
    \ and a\n   server's process.  The caller process first sends a call message to\n\
    \   the server process and waits (blocks) for a reply message.  The call\n   message\
    \ includes the procedure's parameters, and the reply message\n   includes the\
    \ procedure's results.  Once the reply message is\n   received, the results of\
    \ the procedure are extracted, and caller's\n   execution is resumed.\n   On the\
    \ server side, a process is dormant awaiting the arrival of a\n   call message.\
    \  When one arrives, the server process extracts the\n   procedure's parameters,\
    \ computes the results, sends a reply message,\n   and then awaits the next call\
    \ message.\n   In this model, only one of the two processes is active at any given\n\
    \   time.  However, this model is only given as an example.  The ONC RPC\n   protocol\
    \ makes no restrictions on the concurrency model implemented,\n   and others are\
    \ possible.  For example, an implementation may choose\n   to have RPC calls be\
    \ asynchronous, so that the client may do useful\n   work while waiting for the\
    \ reply from the server.  Another\n   possibility is to have the server create\
    \ a separate task to process\n   an incoming call, so that the original server\
    \ can be free to receive\n   other requests.\n   There are a few important ways\
    \ in which remote procedure calls differ\n   from local procedure calls:\n   \
    \   1. Error handling: failures of the remote server or network must\n      be\
    \ handled when using remote procedure calls.\n      2. Global variables and side-effects:\
    \ since the server does not\n      have access to the client's address space,\
    \ hidden arguments cannot\n      be passed as global variables or returned as\
    \ side effects.\n      3. Performance:  remote procedures usually operate one\
    \ or more\n      orders of magnitude slower than local procedure calls.\n    \
    \  4. Authentication: since remote procedure calls can be transported\n      over\
    \ unsecured networks, authentication may be necessary.\n      Authentication prevents\
    \ one entity from masquerading as some other\n      entity.\n   The conclusion\
    \ is that even though there are tools to automatically\n   generate client and\
    \ server libraries for a given service, protocols\n   must still be designed carefully.\n"
- title: 4. TRANSPORTS AND SEMANTICS
  contents:
  - "4. TRANSPORTS AND SEMANTICS\n   The RPC protocol can be implemented on several\
    \ different transport\n   protocols.  The RPC protocol does not care how a message\
    \ is passed\n   from one process to another, but only with specification and\n\
    \   interpretation of messages.  However, the application may wish to\n   obtain\
    \ information about (and perhaps control over) the transport\n   layer through\
    \ an interface not specified in this document.  For\n   example, the transport\
    \ protocol may impose a restriction on the\n   maximum size of RPC messages, or\
    \ it may be stream-oriented like TCP\n   with no size limit.  The client and server\
    \ must agree on their\n   transport protocol choices.\n   It is important to point\
    \ out that RPC does not try to implement any\n   kind of reliability and that\
    \ the application may need to be aware of\n   the type of transport protocol underneath\
    \ RPC.  If it knows it is\n   running on top of a reliable transport such as TCP\
    \ [6], then most of\n   the work is already done for it.  On the other hand, if\
    \ it is running\n   on top of an unreliable transport such as UDP [7], it must\
    \ implement\n   its own time-out, retransmission, and duplicate detection policies\
    \ as\n   the RPC protocol does not provide these services.\n   Because of transport\
    \ independence, the RPC protocol does not attach\n   specific semantics to the\
    \ remote procedures or their execution\n   requirements.  Semantics can be inferred\
    \ from (but should be\n   explicitly specified by) the underlying transport protocol.\
    \  For\n   example, consider RPC running on top of an unreliable transport such\n\
    \   as UDP.  If an application retransmits RPC call messages after time-\n   outs,\
    \ and does not receive a reply, it cannot infer anything about\n   the number\
    \ of times the procedure was executed.  If it does receive a\n   reply, then it\
    \ can infer that the procedure was executed at least\n   once.\n   A server may\
    \ wish to remember previously granted requests from a\n   client and not regrant\
    \ them in order to insure some degree of\n   execute-at-most-once semantics. \
    \ A server can do this by taking\n   advantage of the transaction ID that is packaged\
    \ with every RPC\n   message.  The main use of this transaction ID is by the client\
    \ RPC\n   entity in matching replies to calls.  However, a client application\n\
    \   may choose to reuse its previous transaction ID when retransmitting a\n  \
    \ call.  The server may choose to remember this ID after executing a\n   call\
    \ and not execute calls with the same ID in order to achieve some\n   degree of\
    \ execute-at-most-once semantics.  The server is not allowed\n   to examine this\
    \ ID in any other way except as a test for equality.\n   On the other hand, if\
    \ using a \"reliable\" transport such as TCP, the\n   application can infer from\
    \ a reply message that the procedure was\n   executed exactly once, but if it\
    \ receives no reply message, it cannot\n   assume that the remote procedure was\
    \ not executed.  Note that even if\n   a connection-oriented protocol like TCP\
    \ is used, an application still\n   needs time-outs and reconnection to handle\
    \ server crashes.\n   There are other possibilities for transports besides datagram-\
    \ or\n   connection-oriented protocols.  For example, a request-reply protocol\n\
    \   such as VMTP [2] is perhaps a natural transport for RPC.  ONC RPC\n   uses\
    \ both TCP and UDP transport protocols.  Section 10 (RECORD\n   MARKING STANDARD)\
    \ describes the mechanism employed by ONC RPC to\n   utilize a connection-oriented,\
    \ stream-oriented transport such as TCP.\n"
- title: 5. BINDING AND RENDEZVOUS INDEPENDENCE
  contents:
  - "5. BINDING AND RENDEZVOUS INDEPENDENCE\n   The act of binding a particular client\
    \ to a particular service and\n   transport parameters is NOT part of this RPC\
    \ protocol specification.\n   This important and necessary function is left up\
    \ to some higher-level\n   software.\n   Implementors could think of the RPC protocol\
    \ as the jump-subroutine\n   instruction (\"JSR\") of a network; the loader (binder)\
    \ makes JSR\n   useful, and the loader itself uses JSR to accomplish its task.\n\
    \   Likewise, the binding software makes RPC useful, possibly using RPC\n   to\
    \ accomplish this task.\n"
- title: 6. AUTHENTICATION
  contents:
  - "6. AUTHENTICATION\n   The RPC protocol provides the fields necessary for a client\
    \ to\n   identify itself to a service, and vice-versa, in each call and reply\n\
    \   message.  Security and access control mechanisms can be built on top\n   of\
    \ this message authentication.  Several different authentication\n   protocols\
    \ can be supported.  A field in the RPC header indicates\n   which protocol is\
    \ being used. More information on specific\n   authentication protocols is in\
    \ section 9: \"Authentication Protocols\".\n"
- title: 7. RPC PROTOCOL REQUIREMENTS
  contents:
  - "7. RPC PROTOCOL REQUIREMENTS\n   The RPC protocol must provide for the following:\n\
    \      (1) Unique specification of a procedure to be called.\n      (2) Provisions\
    \ for matching response messages to request messages.\n      (3) Provisions for\
    \ authenticating the caller to service and\n          vice-versa.\n   Besides\
    \ these requirements, features that detect the following are\n   worth supporting\
    \ because of protocol roll-over errors, implementation\n   bugs, user error, and\
    \ network administration:\n      (1) RPC protocol mismatches.\n      (2) Remote\
    \ program protocol version mismatches.\n      (3) Protocol errors (such as misspecification\
    \ of a procedure's\n          parameters).\n      (4) Reasons why remote authentication\
    \ failed.\n      (5) Any other reasons why the desired procedure was not called.\n"
- title: 7.1 RPC Programs and Procedures
  contents:
  - "7.1 RPC Programs and Procedures\n   The RPC call message has three unsigned integer\
    \ fields -- remote\n   program number, remote program version number, and remote\
    \ procedure\n   number -- which uniquely identify the procedure to be called.\n\
    \   Program numbers are administered by a central authority\n   (rpc@sun.com).\
    \  Once implementors have a program number, they can\n   implement their remote\
    \ program; the first implementation would most\n   likely have the version number\
    \ 1.  Because most new protocols evolve,\n   a version field of the call message\
    \ identifies which version of the\n   protocol the caller is using.  Version numbers\
    \ enable support of both\n   old and new protocols through the same server process.\n\
    \   The procedure number identifies the procedure to be called.  These\n   numbers\
    \ are documented in the specific program's protocol\n   specification.  For example,\
    \ a file service's protocol specification\n   may state that its procedure number\
    \ 5 is \"read\" and procedure number\n   12 is \"write\".\n   Just as remote program\
    \ protocols may change over several versions,\n   the actual RPC message protocol\
    \ could also change.  Therefore, the\n   call message also has in it the RPC version\
    \ number, which is always\n   equal to two for the version of RPC described here.\n\
    \   The reply message to a request message has enough information to\n   distinguish\
    \ the following error conditions:\n      (1) The remote implementation of RPC\
    \ does not support protocol\n      version 2.  The lowest and highest supported\
    \ RPC version numbers\n      are returned.\n      (2) The remote program is not\
    \ available on the remote system.\n      (3) The remote program does not support\
    \ the requested version\n      number.  The lowest and highest supported remote\
    \ program version\n      numbers are returned.\n      (4) The requested procedure\
    \ number does not exist.  (This is\n      usually a client side protocol or programming\
    \ error.)\n      (5) The parameters to the remote procedure appear to be garbage\n\
    \      from the server's point of view.  (Again, this is usually caused\n    \
    \  by a disagreement about the protocol between client and service.)\n"
- title: 7.2 Authentication
  contents:
  - "7.2 Authentication\n   Provisions for authentication of caller to service and\
    \ vice-versa are\n   provided as a part of the RPC protocol.  The call message\
    \ has two\n   authentication fields, the credential and verifier.  The reply\n\
    \   message has one authentication field, the response verifier.  The RPC\n  \
    \ protocol specification defines all three fields to be the following\n   opaque\
    \ type (in the eXternal Data Representation (XDR) language [9]):\n      enum auth_flavor\
    \ {\n         AUTH_NONE       = 0,\n         AUTH_SYS        = 1,\n         AUTH_SHORT\
    \      = 2\n         /* and more to be defined */\n      };\n      struct opaque_auth\
    \ {\n         auth_flavor flavor;\n         opaque body<400>;\n      };\n   In\
    \ other words, any \"opaque_auth\" structure is an \"auth_flavor\"\n   enumeration\
    \ followed by up to 400 bytes which are opaque to\n   (uninterpreted by) the RPC\
    \ protocol implementation.\n   The interpretation and semantics of the data contained\
    \ within the\n   authentication fields is specified by individual, independent\n\
    \   authentication protocol specifications.  (Section 9 defines the\n   various\
    \ authentication protocols.)\n   If authentication parameters were rejected, the\
    \ reply message\n   contains information stating why they were rejected.\n"
- title: 7.3 Program Number Assignment
  contents:
  - "7.3 Program Number Assignment\n   Program numbers are given out in groups of\
    \ hexadecimal 20000000\n   (decimal 536870912) according to the following chart:\n\
    \              0 - 1fffffff   defined by rpc@sun.com\n       20000000 - 3fffffff\
    \   defined by user\n       40000000 - 5fffffff   transient\n       60000000 -\
    \ 7fffffff   reserved\n       80000000 - 9fffffff   reserved\n       a0000000\
    \ - bfffffff   reserved\n       c0000000 - dfffffff   reserved\n       e0000000\
    \ - ffffffff   reserved\n   The first group is a range of numbers administered\
    \ by rpc@sun.com and\n   should be identical for all sites.  The second range\
    \ is for\n   applications peculiar to a particular site.  This range is intended\n\
    \   primarily for debugging new programs.  When a site develops an\n   application\
    \ that might be of general interest, that application\n   should be given an assigned\
    \ number in the first range.  Application\n   developers may apply for blocks\
    \ of RPC program numbers in the first\n   range by sending electronic mail to\
    \ \"rpc@sun.com\".  The third group\n   is for applications that generate program\
    \ numbers dynamically.  The\n   final groups are reserved for future use, and\
    \ should not be used.\n"
- title: 7.4 Other Uses of the RPC Protocol
  contents:
  - "7.4 Other Uses of the RPC Protocol\n   The intended use of this protocol is for\
    \ calling remote procedures.\n   Normally, each call message is matched with a\
    \ reply message.\n   However, the protocol itself is a message-passing protocol\
    \ with which\n   other (non-procedure call) protocols can be implemented.\n"
- title: 7.4.1 Batching
  contents:
  - "7.4.1 Batching\n   Batching is useful when a client wishes to send an arbitrarily\
    \ large\n   sequence of call messages to a server.  Batching typically uses\n\
    \   reliable byte stream protocols (like TCP) for its transport.  In the\n   case\
    \ of batching, the client never waits for a reply from the server,\n   and the\
    \ server does not send replies to batch calls.  A sequence of\n   batch calls\
    \ is usually terminated by a legitimate remote procedure\n   call operation in\
    \ order to flush the pipeline and get positive\n   acknowledgement.\n"
- title: 7.4.2 Broadcast Remote Procedure Calls
  contents:
  - "7.4.2 Broadcast Remote Procedure Calls\n   In broadcast protocols, the client\
    \ sends a broadcast call to the\n   network and waits for numerous replies.  This\
    \ requires the use of\n   packet-based protocols (like UDP) as its transport protocol.\
    \  Servers\n   that support broadcast protocols usually respond only when the\
    \ call\n   is successfully processed and are silent in the face of errors, but\n\
    \   this varies with the application.\n   The principles of broadcast RPC also\
    \ apply to multicasting - an RPC\n   request can be sent to a multicast address.\n"
- title: 8. THE RPC MESSAGE PROTOCOL
  contents:
  - "8. THE RPC MESSAGE PROTOCOL\n   This section defines the RPC message protocol\
    \ in the XDR data\n   description language [9].\n      enum msg_type {\n     \
    \    CALL  = 0,\n         REPLY = 1\n      };\n   A reply to a call message can\
    \ take on two forms: The message was\n   either accepted or rejected.\n      enum\
    \ reply_stat {\n         MSG_ACCEPTED = 0,\n         MSG_DENIED   = 1\n      };\n\
    \   Given that a call message was accepted, the following is the status\n   of\
    \ an attempt to call a remote procedure.\n      enum accept_stat {\n         SUCCESS\
    \       = 0, /* RPC executed successfully             */\n         PROG_UNAVAIL\
    \  = 1, /* remote hasn't exported program        */\n         PROG_MISMATCH =\
    \ 2, /* remote can't support version #        */\n         PROC_UNAVAIL  = 3,\
    \ /* program can't support procedure       */\n         GARBAGE_ARGS  = 4, /*\
    \ procedure can't decode params         */\n         SYSTEM_ERR    = 5  /* errors\
    \ like memory allocation failure */\n      };\n   Reasons why a call message was\
    \ rejected:\n      enum reject_stat {\n         RPC_MISMATCH = 0, /* RPC version\
    \ number != 2          */\n         AUTH_ERROR = 1    /* remote can't authenticate\
    \ caller */\n      };\n   Why authentication failed:\n      enum auth_stat {\n\
    \         AUTH_OK           = 0,  /* success                          */\n   \
    \      /*\n          * failed at remote end\n          */\n         AUTH_BADCRED\
    \      = 1,  /* bad credential (seal broken)     */\n         AUTH_REJECTEDCRED\
    \ = 2,  /* client must begin new session    */\n         AUTH_BADVERF      = 3,\
    \  /* bad verifier (seal broken)       */\n         AUTH_REJECTEDVERF = 4,  /*\
    \ verifier expired or replayed     */\n         AUTH_TOOWEAK      = 5,  /* rejected\
    \ for security reasons    */\n         /*\n          * failed locally\n      \
    \    */\n         AUTH_INVALIDRESP  = 6,  /* bogus response verifier         \
    \ */\n         AUTH_FAILED       = 7   /* reason unknown                   */\n\
    \      };\n   The RPC message:\n   All messages start with a transaction identifier,\
    \ xid, followed by a\n   two-armed discriminated union.  The union's discriminant\
    \ is a\n   msg_type which switches to one of the two types of the message.  The\n\
    \   xid of a REPLY message always matches that of the initiating CALL\n   message.\
    \  NB: The xid field is only used for clients matching reply\n   messages with\
    \ call messages or for servers detecting retransmissions;\n   the service side\
    \ cannot treat this id as any type of sequence number.\n      struct rpc_msg {\n\
    \         unsigned int xid;\n         union switch (msg_type mtype) {\n      \
    \   case CALL:\n            call_body cbody;\n         case REPLY:\n         \
    \   reply_body rbody;\n         } body;\n      };\n   Body of an RPC call:\n \
    \  In version 2 of the RPC protocol specification, rpcvers must be equal\n   to\
    \ 2.  The fields prog, vers, and proc specify the remote program,\n   its version\
    \ number, and the procedure within the remote program to be\n   called.  After\
    \ these fields are two authentication parameters:  cred\n   (authentication credential)\
    \ and verf (authentication verifier).  The\n   two authentication parameters are\
    \ followed by the parameters to the\n   remote procedure, which are specified\
    \ by the specific program\n   protocol.\n   The purpose of the authentication\
    \ verifier is to validate the\n   authentication credential.  Note that these\
    \ two items are\n   historically separate, but are always used together as one\
    \ logical\n   entity.\n      struct call_body {\n         unsigned int rpcvers;\
    \       /* must be equal to two (2) */\n         unsigned int prog;\n        \
    \ unsigned int vers;\n         unsigned int proc;\n         opaque_auth  cred;\n\
    \         opaque_auth  verf;\n         /* procedure specific parameters start\
    \ here */\n      };\n   Body of a reply to an RPC call:\n      union reply_body\
    \ switch (reply_stat stat) {\n      case MSG_ACCEPTED:\n         accepted_reply\
    \ areply;\n      case MSG_DENIED:\n         rejected_reply rreply;\n      } reply;\n\
    \   Reply to an RPC call that was accepted by the server:\n   There could be an\
    \ error even though the call was accepted.  The first\n   field is an authentication\
    \ verifier that the server generates in\n   order to validate itself to the client.\
    \  It is followed by a union\n   whose discriminant is an enum accept_stat.  The\
    \ SUCCESS arm of the\n   union is protocol specific.  The PROG_UNAVAIL, PROC_UNAVAIL,\n\
    \   GARBAGE_ARGS, and SYSTEM_ERR arms of the union are void.  The\n   PROG_MISMATCH\
    \ arm specifies the lowest and highest version numbers of\n   the remote program\
    \ supported by the server.\n      struct accepted_reply {\n         opaque_auth\
    \ verf;\n         union switch (accept_stat stat) {\n         case SUCCESS:\n\
    \            opaque results[0];\n            /*\n             * procedure-specific\
    \ results start here\n             */\n          case PROG_MISMATCH:\n       \
    \      struct {\n                unsigned int low;\n                unsigned int\
    \ high;\n             } mismatch_info;\n          default:\n             /*\n\
    \              * Void.  Cases include PROG_UNAVAIL, PROC_UNAVAIL,\n          \
    \    * GARBAGE_ARGS, and SYSTEM_ERR.\n              */\n             void;\n \
    \         } reply_data;\n      };\n   Reply to an RPC call that was rejected by\
    \ the server:\n   The call can be rejected for two reasons: either the server\
    \ is not\n   running a compatible version of the RPC protocol (RPC_MISMATCH),\
    \ or\n   the server rejects the identity of the caller (AUTH_ERROR). In case\n\
    \   of an RPC version mismatch, the server returns the lowest and highest\n  \
    \ supported RPC version numbers.  In case of invalid authentication,\n   failure\
    \ status is returned.\n      union rejected_reply switch (reject_stat stat) {\n\
    \      case RPC_MISMATCH:\n         struct {\n            unsigned int low;\n\
    \            unsigned int high;\n         } mismatch_info;\n      case AUTH_ERROR:\n\
    \         auth_stat stat;\n      };\n"
- title: 9. AUTHENTICATION PROTOCOLS
  contents:
  - "9. AUTHENTICATION PROTOCOLS\n   As previously stated, authentication parameters\
    \ are opaque, but\n   open-ended to the rest of the RPC protocol.  This section\
    \ defines two\n   standard \"flavors\" of authentication.  Implementors are free\
    \ to\n   invent new authentication types, with the same rules of flavor number\n\
    \   assignment as there is for program number assignment.  The \"flavor\"\n  \
    \ of a credential or verifier refers to the value of the \"flavor\" field\n  \
    \ in the opaque_auth structure. Flavor numbers, like RPC program\n   numbers,\
    \ are also administered centrally, and developers may assign\n   new flavor numbers\
    \ by applying through electronic mail to\n   \"rpc@sun.com\".  Credentials and\
    \ verifiers are represented as variable\n   length opaque data (the \"body\" field\
    \ in the opaque_auth structure).\n   In this document, two flavors of authentication\
    \ are described.  Of\n   these, Null authentication (described in the next subsection)\
    \ is\n   mandatory - it must be available in all implementations.  System\n  \
    \ authentication is described in Appendix A.  It is strongly\n   recommended that\
    \ implementors include System authentication in their\n   implementations.  Many\
    \ applications use this style of authentication,\n   and availability of this\
    \ flavor in an implementation will enhance\n   interoperability.\n"
- title: 9.1 Null Authentication
  contents:
  - "9.1 Null Authentication\n   Often calls must be made where the client does not\
    \ care about its\n   identity or the server does not care who the client is. \
    \ In this\n   case, the flavor of the RPC message's credential, verifier, and\
    \ reply\n   verifier is \"AUTH_NONE\".  Opaque data associated with \"AUTH_NONE\"\
    \ is\n   undefined.  It is recommended that the length of the opaque data be\n\
    \   zero.\n"
- title: 10. RECORD MARKING STANDARD
  contents:
  - "10. RECORD MARKING STANDARD\n   When RPC messages are passed on top of a byte\
    \ stream transport\n   protocol (like TCP), it is necessary to delimit one message\
    \ from\n   another in order to detect and possibly recover from protocol errors.\n\
    \   This is called record marking (RM).  One RPC message fits into one RM\n  \
    \ record.\n   A record is composed of one or more record fragments.  A record\n\
    \   fragment is a four-byte header followed by 0 to (2**31) - 1 bytes of\n   fragment\
    \ data.  The bytes encode an unsigned binary number; as with\n   XDR integers,\
    \ the byte order is from highest to lowest.  The number\n   encodes two values\
    \ -- a boolean which indicates whether the fragment\n   is the last fragment of\
    \ the record (bit value 1 implies the fragment\n   is the last fragment) and a\
    \ 31-bit unsigned binary value which is the\n   length in bytes of the fragment's\
    \ data.  The boolean value is the\n   highest-order bit of the header; the length\
    \ is the 31 low-order bits.\n   (Note that this record specification is NOT in\
    \ XDR standard form!)\n"
- title: 11. THE RPC LANGUAGE
  contents:
  - "11. THE RPC LANGUAGE\n   Just as there was a need to describe the XDR data-types\
    \ in a formal\n   language, there is also need to describe the procedures that\
    \ operate\n   on these XDR data-types in a formal language as well.  The RPC\n\
    \   Language is an extension to the XDR language, with the addition of\n   \"\
    program\", \"procedure\", and \"version\" declarations.  The following\n   example\
    \ is used to describe the essence of the language.\n"
- title: 11.1 An Example Service Described in the RPC Language
  contents:
  - "11.1 An Example Service Described in the RPC Language\n   Here is an example\
    \ of the specification of a simple ping program.\n   program PING_PROG {\n   \
    \      /*\n          * Latest and greatest version\n          */\n         version\
    \ PING_VERS_PINGBACK {\n            void\n            PINGPROC_NULL(void) = 0;\n\
    \            /*\n             * Ping the client, return the round-trip time\n\
    \             * (in microseconds). Returns -1 if the operation\n             *\
    \ timed out.\n             */\n            int\n            PINGPROC_PINGBACK(void)\
    \ = 1;\n         } = 2;\n         /*\n          * Original version\n         \
    \ */\n         version PING_VERS_ORIG {\n            void\n            PINGPROC_NULL(void)\
    \ = 0;\n         } = 1;\n      } = 1;\n      const PING_VERS = 2;      /* latest\
    \ version */\n   The first version described is PING_VERS_PINGBACK with two\n\
    \   procedures, PINGPROC_NULL and PINGPROC_PINGBACK.  PINGPROC_NULL takes\n  \
    \ no arguments and returns no results, but it is useful for computing\n   round-trip\
    \ times from the client to the server and back again.  By\n   convention, procedure\
    \ 0 of any RPC protocol should have the same\n   semantics, and never require\
    \ any kind of authentication.  The second\n   procedure is used for the client\
    \ to have the server do a reverse ping\n   operation back to the client, and it\
    \ returns the amount of time (in\n   microseconds) that the operation used.  The\
    \ next version,\n   PING_VERS_ORIG, is the original version of the protocol and\
    \ it does\n   not contain PINGPROC_PINGBACK procedure. It is useful for\n   compatibility\
    \ with old client programs, and as this program matures\n   it may be dropped\
    \ from the protocol entirely.\n"
- title: 11.2 The RPC Language Specification
  contents:
  - "11.2 The RPC Language Specification\n   The RPC language is identical to the\
    \ XDR language defined in RFC\n   1014, except for the added definition of a \"\
    program-def\" described\n   below.\n   program-def:\n      \"program\" identifier\
    \ \"{\"\n         version-def\n         version-def *\n      \"}\" \"=\" constant\
    \ \";\"\n   version-def:\n      \"version\" identifier \"{\"\n          procedure-def\n\
    \          procedure-def *\n      \"}\" \"=\" constant \";\"\n   procedure-def:\n\
    \      type-specifier identifier \"(\" type-specifier\n        (\",\" type-specifier\
    \ )* \")\" \"=\" constant \";\"\n"
- title: 11.3 Syntax Notes
  contents:
  - "11.3 Syntax Notes\n   (1) The following keywords are added and cannot be used\
    \ as\n   identifiers: \"program\" and \"version\";\n   (2) A version name cannot\
    \ occur more than once within the scope of a\n   program definition. Nor can a\
    \ version number occur more than once\n   within the scope of a program definition.\n\
    \   (3) A procedure name cannot occur more than once within the scope of\n   a\
    \ version definition. Nor can a procedure number occur more than once\n   within\
    \ the scope of version definition.\n   (4) Program identifiers are in the same\
    \ name space as constant and\n   type identifiers.\n   (5) Only unsigned constants\
    \ can be assigned to programs, versions and\n   procedures.\n"
- title: 'APPENDIX A: SYSTEM AUTHENTICATION'
  contents:
  - "APPENDIX A: SYSTEM AUTHENTICATION\n   The client may wish to identify itself,\
    \ for example, as it is\n   identified on a UNIX(tm) system.  The flavor of the\
    \ client credential\n   is \"AUTH_SYS\".  The opaque data constituting the credential\
    \ encodes\n   the following structure:\n      struct authsys_parms {\n       \
    \  unsigned int stamp;\n         string machinename<255>;\n         unsigned int\
    \ uid;\n         unsigned int gid;\n         unsigned int gids<16>;\n      };\n\
    \   The \"stamp\" is an arbitrary ID which the caller machine may generate.\n\
    \   The \"machinename\" is the name of the caller's machine (like\n   \"krypton\"\
    ).  The \"uid\" is the caller's effective user ID.  The \"gid\"\n   is the caller's\
    \ effective group ID.  The \"gids\" is a counted array of\n   groups which contain\
    \ the caller as a member.  The verifier\n   accompanying the credential should\
    \ have \"AUTH_NONE\" flavor value\n   (defined above).  Note this credential is\
    \ only unique within a\n   particular domain of machine names, uids, and gids.\n\
    \   The flavor value of the verifier received in the reply message from\n   the\
    \ server may be \"AUTH_NONE\" or \"AUTH_SHORT\".  In the case of\n   \"AUTH_SHORT\"\
    , the bytes of the reply verifier's string encode an\n   opaque structure.  This\
    \ new opaque structure may now be passed to the\n   server instead of the original\
    \ \"AUTH_SYS\" flavor credential.  The\n   server may keep a cache which maps\
    \ shorthand opaque structures\n   (passed back by way of an \"AUTH_SHORT\" style\
    \ reply verifier) to the\n   original credentials of the caller.  The caller can\
    \ save network\n   bandwidth and server cpu cycles by using the shorthand credential.\n\
    \   The server may flush the shorthand opaque structure at any time.  If\n   this\
    \ happens, the remote procedure call message will be rejected due\n   to an authentication\
    \ error.  The reason for the failure will be\n   \"AUTH_REJECTEDCRED\".  At this\
    \ point, the client may wish to try the\n   original \"AUTH_SYS\" style of credential.\n\
    \   It should be noted that use of this flavor of authentication does not\n  \
    \ guarantee any security for the users or providers of a service, in\n   itself.\
    \  The authentication provided by this scheme can be considered\n   legitimate\
    \ only when applications using this scheme and the network\n   can be secured\
    \ externally, and privileged transport addresses are\n   used for the communicating\
    \ end-points (an example of this is the use\n   of privileged TCP/UDP ports in\
    \ Unix systems - note that not all\n   systems enforce privileged transport address\
    \ mechanisms).\n"
- title: REFERENCES
  contents:
  - "REFERENCES\n   [1]  Birrell, A. D.  & Nelson, B. J., \"Implementing Remote Procedure\n\
    \        Calls\", XEROX CSL-83-7, October 1983.\n   [2]  Cheriton, D., \"VMTP:\
    \ Versatile Message Transaction Protocol\",\n        Preliminary Version 0.3,\
    \ Stanford University, January 1987.\n   [3]  Diffie & Hellman, \"New Directions\
    \ in Cryptography\", IEEE\n        Transactions on Information Theory IT-22, November\
    \ 1976.\n   [4]  Mills, D., \"Network Time Protocol\", RFC 1305, UDEL,\n     \
    \   March 1992.\n   [5]  National Bureau of Standards, \"Data Encryption Standard\"\
    ,\n        Federal Information Processing Standards Publication 46, January\n\
    \        1977.\n   [6]  Postel, J., \"Transmission Control Protocol - DARPA Internet\n\
    \        Program Protocol Specification\", STD 7, RFC 793, USC/Information\n \
    \       Sciences Institute, September 1981.\n   [7]  Postel, J., \"User Datagram\
    \ Protocol\", STD 6, RFC 768,\n        USC/Information Sciences Institute, August\
    \ 1980.\n   [8]  Reynolds, J., and Postel, J., \"Assigned Numbers\", STD 2,\n\
    \        RFC 1700, USC/Information Sciences Institute, October 1994.\n   [9] \
    \ Srinivasan, R., \"XDR: External Data Representation Standard\",\n        RFC\
    \ 1832, Sun Microsystems, Inc., August 1995.\n   [10] Miller, S., Neuman, C.,\
    \ Schiller, J., and  J. Saltzer, \"Section\n        E.2.1: Kerberos  Authentication\
    \ and Authorization System\",\n        M.I.T. Project Athena, Cambridge, Massachusetts,\
    \ December 21,\n        1987.\n   [11] Steiner, J., Neuman, C., and J. Schiller,\
    \ \"Kerberos: An\n        Authentication Service for Open Network Systems\", pp.\
    \ 191-202 in\n        Usenix Conference Proceedings, Dallas, Texas, February 1988.\n\
    \   [12] Kohl, J. and C. Neuman, \"The Kerberos Network Authentication\n     \
    \   Service (V5)\", RFC 1510, Digital Equipment Corporation,\n        USC/Information\
    \ Sciences Institute, September 1993.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Raj Srinivasan\n   Sun Microsystems, Inc.\n   ONC Technologies\n\
    \   2550 Garcia Avenue\n   M/S MTV-5-40\n   Mountain View, CA  94043\n   USA\n\
    \   Phone: 415-336-2478\n   Fax:   415-336-6015\n   EMail: raj@eng.sun.com\n"
