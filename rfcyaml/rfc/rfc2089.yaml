- title: __initial_text__
  contents:
  - "                       Mapping SNMPv2 onto SNMPv1\n                     within\
    \ a bi-lingual SNMP agent\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The goal of this memo is to document a common way of mapping an\n\
    \   SNMPv2 response into an SNMPv1 response within a bi-lingual SNMP\n   agent\
    \ (one that supports both SNMPv1 and SNMPv2).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n     1.0  Introduction  . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n     2.0  Mapping SNMPv2 into SNMPv1  . . . . . . . . . . .\
    \ . . . . .  2\n     2.1  Mapping SNMPv2 error-status into SNMPv1 error-status\
    \  . . .  3\n     2.2  Mapping SNMPv2 exceptions into SNMPv1   . . . . . . . .\
    \ . .  3\n     2.3  Mapping noSuchObject and noSuchInstance   . . . . . . . .\
    \ .  4\n     2.4  Mapping endOfMibView  . . . . . . . . . . . . . . . . . . .\
    \  5\n     2.5  Mapping SNMPv2 SMI into SNMPv1  . . . . . . . . . . . . . .  5\n\
    \     3.0  Processing SNMPv1 requests  . . . . . . . . . . . . . . . .  6\n  \
    \   3.1  Processing an SNMPv1 GET request  . . . . . . . . . . . . .  6\n    \
    \ 3.2  Processing an SNMPv1 GETNEXT request  . . . . . . . . . . .  7\n     3.3\
    \  Processing an outgoing SNMPv2 trap  . . . . . . . . . . . .  8\n     4.0  Acknowledgements\
    \  . . . . . . . . . . . . . . . . . . . . . 10\n     5.0  References  . . . .\
    \ . . . . . . . . . . . . . . . . . . . . 10\n     6.0  Security Considerations\
    \   . . . . . . . . . . . . . . . . . 10\n     7.0  Authors' Addresses  . . .\
    \ . . . . . . . . . . . . . . . . . 11\n     Appendix A.  Background Information\
    \  . . . . . . . . . . . . .   12\n     A.1  Mapping of error-status Values  .\
    \ . . . . . . . . . . . .   12\n     A.2  SNMPv1 traps without Counter64 varBinds.\
    \  . . . . . . . .   12\n"
- title: 1.0  Introduction
  contents:
  - "1.0  Introduction\n   We now have the SNMPv1 protocol (RFC1157 [1]) as a full\
    \ standard and\n   the SNMPv2 protocol (RFC1905 [1]) as a DRAFT standard.  It\
    \ can be\n   expected that many agent implementations will support both SNMPv1\
    \ and\n   SNMPv2 requests coming from SNMP management entities.  In many cases\n\
    \   the underlying instrumentation will be implemented using the new\n   SNMPv2\
    \ SMI and SNMPv2 protocol.  The SNMP engine then gets the task\n   to ensure that\
    \ any SNMPv2 response data coming from such SNMPv2\n   compliant instrumentation\
    \ gets converted to a proper SNMPv1 response\n   if the original request came\
    \ in as an SNMPv1 request.  The SNMP\n   engine should also deal with mapping\
    \ SNMPv2 traps which are generated\n   by an application or by the SNMPv2 compliant\
    \ instrumentation into\n   SNMPv1 traps if the agent has been configured to send\
    \ traps to an\n   SNMPv1 manager.\n   It seems beneficial if all such agents do\
    \ this mapping in the same\n   way. This document describes such a mapping based\
    \ on discussions and\n   perceived consensus on the various mailing lists.  The\
    \ authors of\n   this document have also compared their own implementations of\
    \ these\n   mappings. They had a few minor differences and decided to make their\n\
    \   implementation behave the same and document this mapping so others\n   can\
    \ benefit from it.\n   We recommend that all agents implement this same mapping.\n\
    \   Note that the mapping described in this document should also be\n   followed\
    \ by SNMP proxies that provide a mapping between SNMPv1\n   management applications\
    \ and SNMPv2 agents.\n"
- title: 2.0  Mapping SNMPv2 into SNMPv1
  contents:
  - "2.0  Mapping SNMPv2 into SNMPv1\n   These are the type of mappings that we need:\n\
    \     o   Mapping of the SNMPv2 error-status into SNMPv1 error-status\n     o\
    \   Mapping of the SNMPv2 exceptions into SNMPv1 error-status\n     o   Skipping\
    \ object instances that have a non-SNMPv1 Syntax\n         (specifically Counter64)\n\
    \     o   Mapping of SNMPv2 traps into SNMPv1 traps\n"
- title: 2.1  Mapping SNMPv2 error-status into SNMPv1 error-status
  contents:
  - "2.1  Mapping SNMPv2 error-status into SNMPv1 error-status\n   With the new SNMPv2\
    \ protocol (RFC1905 [1]) we get a set of error-\n   status values that return\
    \ the cause of an error in much more detail.\n   But an SNMPv1 manager does not\
    \ understand such error-status values.\n   So, when the instrumentation code returns\
    \ response data and uses an\n   SNMPv2 error-status to report on the success or\
    \ failure of the\n   requested operation and if the original SNMP request is an\
    \ SNMPv1\n   request, then we must map such an error-status into an SNMPv1 error-\n\
    \   status when composing the SNMP response PDU.\n   The SNMPv2 error status is\
    \ mapped to an SNMPv1 error-status using\n   this table:\n             SNMPv2\
    \ error-status    SNMPv1 error-status\n             ===================    ===================\n\
    \             noError                noError\n             tooBig            \
    \     tooBig\n             noSuchName             noSuchName\n             badValue\
    \               badValue\n             readOnly               readOnly\n     \
    \        genErr                 genErr\n             wrongValue             badValue\n\
    \             wrongEncoding          badValue\n             wrongType        \
    \      badValue\n             wrongLength            badValue\n             inconsistentValue\
    \      badValue\n             noAccess               noSuchName\n            \
    \ notWritable            noSuchName\n             noCreation             noSuchName\n\
    \             inconsistentName       noSuchName\n             resourceUnavailable\
    \    genErr\n             commitFailed           genErr\n             undoFailed\
    \             genErr\n             authorizationError     noSuchName\n"
- title: 2.2  Mapping SNMPv2 exceptions into SNMPv1
  contents:
  - "2.2  Mapping SNMPv2 exceptions into SNMPv1\n   In SNMPv2 we have so called exception\
    \ values. These will allow an\n   SNMPv2 response PDU to return as much management\
    \ information as\n   possible, even if one or more of the requested variables\
    \ do not\n   exist.  SNMPv1 does not support exception values, and thus does not\n\
    \   return the value of management information when any error occurs.\n   When\
    \ multiple variables do not exist, an SNMPv1 agent can return only\n   a single\
    \ error and index of a single variable.  The agent determines\n   by its implementation\
    \ strategy which variable to identify as the\n   cause of the error via the value\
    \ of the error-index field. Thus, an\n   SNMPv1 manager may make no assumption\
    \ on the validity of the other\n   variables in the request.\n   So, when an SNMPv1\
    \ request is received, we must check the varBinds\n   returned from SNMPv2 compliant\
    \ instrumentation for exception values,\n   and convert these exception values\
    \ into SNMPv1 error codes.\n   The type of exception we can get back and the action\
    \ we must take\n   depends on the SNMP operation that is requested.\n     o  \
    \ For SNMP GET requests we can get back noSuchObject and\n         noSuchInstance.\n\
    \     o   For SNMP GETNEXT requests we can get back endOfMibView.\n     o   For\
    \ SNMP SET requests we cannot get back any exceptions.\n     o   For SNMP GETBULK\
    \ requests we can get back endOfMibView, but\n         such a request should only\
    \ come in as an SNMPv2 request, so we\n         do not have to worry about any\
    \ mapping onto SNMPv1.  If a\n         GETBULK comes in as an SNMPv1 request,\
    \ it is treated as an\n         error and the packet is dropped.\n"
- title: 2.3  Mapping noSuchObject and noSuchInstance
  contents:
  - "2.3  Mapping noSuchObject and noSuchInstance\n   A noSuchObject or noSuchInstance\
    \ exception generated by SNMPv2\n   compliant instrumentation indicates that the\
    \ requested object\n   instance can not be returned.  The SNMPv1 error code for\
    \ this\n   condition is noSuchName, and so the error-status field of the\n   response\
    \ PDU should be set to noSuchName.  Also, the error-index\n   field is set to\
    \ the index of the varBind for which an exception\n   occurred, and the varBind\
    \ list from the original request is returned\n   with the response PDU.\n   Note\
    \ that when the response contains multiple exceptions, that the\n   agent may\
    \ pick any one to be returned.\n"
- title: 2.4  Mapping endOfMibView
  contents:
  - "2.4  Mapping endOfMibView\n   When SNMPv2 compliant instrumentation returns a\
    \ varBind containing an\n   endOfMibView exception in response to a GETNEXT request,\
    \ it indicates\n   that there are no object instances available which lexicographically\n\
    \   follow the object in the request. In an SNMPv1 agent, this condition\n   normally\
    \ results in a noSuchName error, and so the error-status field\n   of the response\
    \ PDU should be set to noSuchName. Also, the error-\n   index field is set to\
    \ the index of the varBind for which an exception\n   occurred, and the varBind\
    \ list from the original request is returned\n   with the response PDU.\n   Note\
    \ that when the response contains multiple exceptions, that the\n   agent may\
    \ pick any one to be returned.\n"
- title: 2.5  Mapping SNMPv2 SMI into SNMPv1
  contents:
  - "2.5  Mapping SNMPv2 SMI into SNMPv1\n   The SNMPv2 SMI (RFC1902 [2]) defines\
    \ basically one new syntax that is\n   problematic for SNMPv1 managers. That is\
    \ the syntax Counter64.  All\n   the others can be handled by SNMPv1 managers.\n\
    \   The net impact on bi-lingual agents is that they should make sure\n   that\
    \ they never return a varBind with a Counter64 value to an SNMPv1\n   manager.\n\
    \   The best accepted practice is to consider such object instances\n   implicitly\
    \ excluded from the view.  So:\n     o   On an SNMPv1 GET request, we return an\
    \ error-status of\n         noSuchName and the error-index is set to the varBind\
    \ that\n         causes this error.\n     o   On an SNMPv1 GETNEXT request, we\
    \ skip the object instance and\n         fetch the next object instance that follows\
    \ the one with a\n         syntax of Counter64.\n     o   Any SET request that\
    \ has a varBind with a Counter64 value must\n         have come from a SNMPv2\
    \ manager, and so it should not cause a\n         problem.  If we do receive a\
    \ Counter64 value in an SNMPv1 SET\n         packet, it should result in an ASN.1\
    \ parse error since\n         Counter64 is not valid in the SNMPv1 protocol. When\
    \ an ASN.1\n         parse error occurs, the counter snmpInASNParseErrs is\n \
    \        incremented and no response is returned.\n     o   The GETBULK is an\
    \ SNMPv2 operation, so it should never come\n         from an SNMPv1 manager.\
    \  If we do receive a GETBULK PDU from in\n         an SNMPv1 packet, then we\
    \ consider it an invalid PDU-type and\n         we drop the packet.\n"
- title: 3.0  Processing SNMPv1 requests
  contents:
  - "3.0  Processing SNMPv1 requests\n   This sections contains a step by step description\
    \ of how to handle\n   SNMPv1 requests in an agent where the underlying instrumentation\
    \ code\n   is SNMPv2 compliant.\n"
- title: 3.1  Processing an SNMPv1 GET request
  contents:
  - "3.1  Processing an SNMPv1 GET request\n   First, the request is converted into\
    \ a call to the underlying\n   instrumentation. This is implementation specific.\n\
    \   When such instrumentation returns response data using SNMPv2 syntax\n   and\
    \ error-status values, then:\n   1.  If the error-status is anything other than\
    \ noError,\n         a.  The error status is translated to an SNMPv1 error-status\n\
    \             using the table from 2.1, \"Mapping SNMPv2 error-status into\n \
    \            SNMPv1 error-status\" on page 2\n         b.  The error-index is\
    \ set to the position (in the original\n             request) of the varBind that\
    \ caused the error-status.\n         c.  The varBindList of the response PDU is\
    \ made exactly the\n             same as the varBindList that was received in\
    \ the original\n             request.\n    2.  If the error-status is noError,\
    \ then find any varBind that\n        contains an SNMPv2 exception (noSuchObject\
    \ or noSuchInstance)\n        or an SNMPv2 syntax that is unknown to SNMPv1 (Counter64).\n\
    \        (Note that if there are more than one, the agent may choose any\n   \
    \     such varBind.)  If there are any such varBinds, then for the\n        one\
    \ chosen:\n         a.  Set the error-status to noSuchName\n         b.  Set the\
    \ error-index to the position (in the varBindList of\n             the original\
    \ request) of the varBind that returned such an\n             SNMPv2 exception\
    \ or syntax.\n         c.  Make the varBindList of the response PDU exactly the\
    \ same\n             as the varBindList that was received in the original\n  \
    \           request.\n     3.  If there are no such varBinds, then:\n        \
    \ a.  Set the error-status to noError\n         b.  Set the error-index to zero\n\
    \         c.  Compose the varBindList of the response, using the data as\n   \
    \          it is returned by the instrumentation code.\n"
- title: 3.2  Processing an SNMPv1 GETNEXT request
  contents:
  - "3.2  Processing an SNMPv1 GETNEXT request\n   First, the request is converted\
    \ into a call to the underlying\n   instrumentation. This is implementation specific.\
    \  There may be\n   repetitive calls to (possibly different pieces of) instrumentation\n\
    \   code to try to find the first object which lexicographically follows\n   each\
    \ of the objects in the request.  Again, this is implementation\n   specific.\n\
    \   When the instrumentation finally returns response data using SNMPv2\n   syntax\
    \ and error-status values, then:\n     1.  If the error-status is anything other\
    \ than noError,\n         a.  The error status is translated to an SNMPv1 error-status\n\
    \             using the table from 2.1, \"Mapping SNMPv2 error-status into\n \
    \            SNMPv1 error-status\" on page 2\n         b.  The error-index is\
    \ set to the position (in the original\n             request) of the varBind that\
    \ caused the error-status.\n         c.  The varBindList of the response PDU is\
    \ made exactly the\n             same as the varBindList that was received in\
    \ the original\n             request.\n     2.  If the error-status is noError,\
    \ then:\n         a.  If there are any varBinds containing an SNMPv2 syntax of\n\
    \             Counter64, then consider these varBinds to be not in view\n    \
    \         and repeat the call to the instrumentation code as often as\n      \
    \       needed till a value other than Counter64 is returned.\n         b.  Find\
    \ any varBind that contains an SNMPv2 exception\n             endOfMibView.  (Note\
    \ that if there are more than one, the\n             agent may choose any such\
    \ varBind.)  If there are any such\n             varBinds, then for the one chosen:\n\
    \             1)  Set the error-status to noSuchName\n             2)  Set the\
    \ error-index to the position (in the varBindList\n                 of the original\
    \ request) of the varBind that returned\n                 such an SNMPv2 exception.\n\
    \             3)  Make the varBindList of the response PDU exactly the\n     \
    \            same as the varBindList that was received in the\n              \
    \   original request.\n         c.  If there are no such varBinds, then:\n   \
    \          1)  Set the error-status to noError\n             2)  Set the error-index\
    \ to zero\n             3)  Compose the varBindList of the response, using the\
    \ data\n                 as it is returned by the instrumentation code.\n"
- title: 3.3  Processing an outgoing SNMPv2 TRAP
  contents:
  - "3.3  Processing an outgoing SNMPv2 TRAP\n   If SNMPv2 compliant instrumentation\
    \ presents an SNMPv2 trap to the\n   SNMP engine and such a trap passes all regular\
    \ checking and then is\n   to be sent to an SNMPv1 destination, then the following\
    \ steps must be\n   followed to convert such a trap to an SNMPv1 trap.  This is\
    \ basically\n   the reverse of the SNMPv1 to SNMPv2 mapping as described in RFC1908\n\
    \   [3].\n     1.  If any of the varBinds in the varBindList has an SNMPv2 syntax\n\
    \         of Counter64, then such varBinds are implicitly considered to\n    \
    \     be not in view, and so they are removed from the varBindList to\n      \
    \   be sent with the SNMPv1 trap.\n     2.  The 3 special varBinds in the varBindList\
    \ of an SNMPv2 trap\n         (sysUpTime.0 (TimeTicks), snmpTrapOID.0 (OBJECT\
    \ IDENTIFIER) and\n         optionally snmpTrapEnterprise.0 (OBJECT IDENTIFIER))\
    \ are\n         removed from the varBindList to be sent with the SNMPv1 trap.\n\
    \         These 2 (or 3) varBinds are used to decide how to set other\n      \
    \   fields in the SNMPv1 trap PDU as follows:\n         a.  The value of sysUpTime.0\
    \ is copied into the timestamp field\n             of the SNMPv1 trap.\n     \
    \    b.  If the snmpTrapOID.0 value is one of the standard traps the\n       \
    \      specific-trap field is set to zero and the generic trap\n             field\
    \ is set according to this mapping:\n                value of snmpTrapOID.0  \
    \              generic-trap\n                =============================== \
    \      ============\n                1.3.6.1.6.3.1.1.5.1 (coldStart)         \
    \         0\n                1.3.6.1.6.3.1.1.5.2 (warmStart)                 \
    \ 1\n                1.3.6.1.6.3.1.1.5.3 (linkDown)                   2\n    \
    \            1.3.6.1.6.3.1.1.5.4 (linkUp)                     3\n            \
    \    1.3.6.1.6.3.1.1.5.5 (authenticationFailure)      4\n                1.3.6.1.6.3.1.1.5.6\
    \ (egpNeighborLoss)            5\n             The enterprise field is set to\
    \ the value of\n             snmpTrapEnterprise.0 if this varBind is present,\
    \ otherwise\n             it is set to the value snmpTraps as defined in RFC1907\
    \ [4].\n         c.  If the snmpTrapOID.0 value is not one of the standard\n \
    \            traps, then the generic-trap field is set to 6 and the\n        \
    \     specific-trap field is set to the last subid of the\n             snmpTrapOID.0\
    \ value.\n             o   If the next to last subid of snmpTrapOID.0 is zero,\n\
    \                 then the enterprise field is set to snmpTrapOID.0 value\n  \
    \               and the last 2 subids are truncated from that value.\n       \
    \      o   If the next to last subid of snmpTrapOID.0 is not zero,\n         \
    \        then the enterprise field is set to snmpTrapOID.0 value\n           \
    \      and the last 1 subid is truncated from that value.\n             In any\
    \ event, the snmpTrapEnterprise.0 varBind (if present)\n             is ignored\
    \ in this case.\n     3.  The agent-addr field is set with the appropriate address\
    \ of the\n         the sending SNMP entity, which is the IP address of the sending\n\
    \         entity of the trap goes out over UDP; otherwise the agent-addr\n   \
    \      field is set to address 0.0.0.0.\n"
- title: 4.0  Acknowledgements
  contents:
  - "4.0  Acknowledgements\n   The authors wish to thank the contributions of the\
    \ SNMPv2 Working\n   Group in general.  Special thanks for their detailed review\
    \ and\n   comments goes to these individuals:\n       Mike Daniele (DEC)\n   \
    \    Dave Harrington (Cabletron)\n       Brian O'Keefe (Hewlett Packard)\n   \
    \    Keith McCloghrie (Cisco Systems)\n       Dave Perkins (independent)\n   \
    \    Shawn Routhier (Epilogue)\n       Juergen Schoenwaelder (University of Twente)\n"
- title: 5.0  References
  contents:
  - "5.0  References\n     [1]  Jeffrey  D. Case, Mark Fedor, Martin Lee Schoffstall\
    \ and James\n          R. Davin, Simple  Network  Management  Protocol  (SNMP),\
    \  SNMP\n          Research,  Performance  Systems  International, MIT Laboratory\n\
    \          for Computer Science, RFC 1157, May 1990.\n     [2]  Jeffrey D. Case,\
    \ Keith McCloghrie, Marshall T. Rose and Steven\n          Waldbusser, Structure\
    \ of Managment Information for  Version  2\n          of  the  Simple  Network\
    \  Management  Protocol  (SNMPv2), SNMP\n          Research Inc, Cisco Systems\
    \ Inc, Dover Beach  Consulting  Inc,\n          International Network Services,\
    \ RFC1902, January 1996.\n     [3]  Jeffrey D. Case, Keith McCloghrie, Marshall\
    \ T. Rose and Steven\n          Waldbusser, Coexistence between Version 1 and\
    \ Version 2 of the\n          Internet-standard  Network Management Framework,\
    \ SNMP Research\n          Inc,  Cisco  Systems  Inc,   Dover   Beach   Consulting\
    \   Inc,\n          International Network Services, RFC1908, January 1996.\n \
    \    [4]  Jeffrey D. Case, Keith McCloghrie, Marshall T. Rose and Steven\n   \
    \       Waldbusser,  Management  Information Base for Version 2 of the\n     \
    \     Simple Network Management  Protocol  (SNMPv2),  SNMP  Research\n       \
    \   Inc,   Cisco   Systems   Inc,   Dover  Beach  Consulting  Inc,\n         \
    \ International Network Services, RFC1907, January 1996.\n"
- title: 6.0  Security Considerations
  contents:
  - "6.0  Security Considerations\n   Security considerations are not discussed in\
    \ this memo.\n"
- title: 7.0  Authors' Addresses
  contents:
  - "7.0  Authors' Addresses\n          Bert Wijnen\n          IBM International Operations\n\
    \          Watsonweg 2\n          1423 ND Uithoorn\n          The Netherlands\n\
    \          Phone: +31-079-322-8316\n          E-mail: wijnen@vnet.ibm.com\n  \
    \        David Levi\n          SNMP Research, Inc\n          3001 Kimberlin Heights\
    \ Rd.\n          Knoxville, TN 37920-9716\n          USA\n          Phone: +1-615-573-1434\n\
    \          E-mail: levi@snmp.com\n"
- title: APPENDIX A.  Background Information
  contents:
  - "APPENDIX A.  Background Information\n   Here follows some reasoning as to why\
    \ some choices were made.\n   A.1  Mapping of error-status values\n   The mapping\
    \ of SNMPv2 error-status values to SNMPv1 error-status\n   values is based on\
    \ the common interpretation of how an SNMPv1 entity\n   should create an error-status\
    \ value based on the elements of\n   procedure defined in RFC1157 [1].\n   There\
    \ was a suggestion to map wrongEncoding into genErr, because it\n   could be caused\
    \ by an ASN.1 parsing error.  Such maybe true, but in\n   most cases when we detect\
    \ the ASN.1 parsing error, we do not yet know\n   about the PDU data yet.  Most\
    \ people who responded to our queries\n   have implemented the mapping to a badValue.\
    \ So we \"agreed\" on the\n   mapping to badValue.\n   A.2  SNMPv1 Traps without\
    \ Counter64 varBinds.\n   RFC1448 says that if one of the objects in the varBindList\
    \ is not\n   included in the view, then the trap is NOT sent.  Current SNMPv2u\
    \ and\n   SNMPv2* documents make the same statement.  However, the \"rough\n \
    \  consensus\" is that it is better to send partial information than no\n   information\
    \ at all. Besides:\n     o   RFC1448 does not allow for a TRAP to be sent with\
    \ the varBinds\n         that are not included in the view removed, so it is an\
    \ all or\n         nothing decision.\n     o   We do NOT include the Counter64\
    \ varBinds... so the \"not in\n         view\" varBinds are not sent to the trap\
    \ destination.\n     o   The Counter64 objects are \"implicit\" not in view. \
    \ If any\n         objects are explicit not in view, then this is checked before\n\
    \         we do the conversion from an SNMPv2 trap to an SNMPv1 trap, and\n  \
    \       so the trap is not sent at all.\n"
