- title: __initial_text__
  contents:
  - "                 Taxonomy of Communication Requirements\n                 for\
    \ Large-scale Multicast Applications\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The intention of this memo is to define a classification system\
    \ for\n   the communication requirements of any large-scale multicast\n   application\
    \ (LSMA). It is very unlikely one protocol can achieve a\n   compromise between\
    \ the diverse requirements of all the parties\n   involved in any LSMA. It is\
    \ therefore necessary to understand the\n   worst-case scenarios in order to minimize\
    \ the range of protocols\n   needed. Dynamic protocol adaptation is likely to\
    \ be necessary which\n   will require logic to map particular combinations of\
    \ requirements to\n   particular mechanisms.  Standardizing the way that applications\n\
    \   define their requirements is a necessary step towards this.\n   Classification\
    \ is a first step towards standardization.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction . . . . . . . . . . . . . . . . . . . .\
    \ . . 2\n   2. Definitions of Sessions. . . . . . . . . . . . . . . . . 3\n  \
    \ 3. Taxonomy . . . . . . . . . . . . . . . . . . . . . . . . 4\n     3.1. Summary\
    \ of Communications Parameters . . . . . . . . 4\n     3.2. Definitions, types\
    \ and strictest requirements. . . . 5\n       3.2.1. Types  . . . . . . . . .\
    \ . . . . . . . . . . . . 6\n       3.2.2. Reliability  . . . . . . . . . . .\
    \ . . . . . . . 7\n         3.2.2.1. Packet Loss  . . . . . . . . . . . . . .\
    \ . . 7\n         3.2.2.2. Component Reliability  . . . . . . . . . . . 8\n  \
    \     3.2.3. Ordering . . . . . . . . . . . . . . . . . . . . 9\n       3.2.4.\
    \ Timeliness . . . . . . . . . . . . . . . . . . . 9\n       3.2.5. Session Control\
    \  . . . . . . . . . . . . . . . .13\n       3.2.6. Session Topology . . . . .\
    \ . . . . . . . . . . .16\n       3.2.7. Directory  . . . . . . . . . . . . .\
    \ . . . . . .17\n       3.2.8. Security . . . . . . . . . . . . . . . . . . .\
    \ .17\n         3.2.8.1. Security Dynamics  . . . . . . . . . . . . .23\n    \
    \   3.2.9. Payment & Charging . . . . . . . . . . . . . . .24\n   4. Security\
    \ Considerations  . . . . . . . . . . . . . . . .25\n   5. References   . . .\
    \ . . . . . . . . . . . . . . . . . . .25\n   6. Authors' Addresses . . . . .\
    \ . . . . . . . . . . . . . .26\n   7. Full Copyright Statement . . . . . . .\
    \ . . . . . . . . .27\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This taxonomy consists of a large number of parameters that\
    \ are\n   considered useful for describing the communication requirements of\n\
    \   LSMAs. To describe a particular application, each parameter would be\n   assigned\
    \ a value. Typical ranges of values are given wherever\n   possible.  Failing\
    \ this, the type of any possible values is given.\n   The parameters are collected\
    \ into ten or so higher level categories,\n   but this is purely for convenience.\n\
    \   The parameters are pitched at a level considered meaningful to\n   application\
    \ programmers. However, they describe communications not\n   applications - the\
    \ terms '3D virtual world', or 'shared TV' might\n   imply communications requirements,\
    \ but they don't accurately describe\n   them.  Assumptions about the likely mechanism\
    \ to achieve each\n   requirement are avoided where possible.\n   While the parameters\
    \ describe communications, it will be noticed that\n   few requirements concerning\
    \ routing etc. are apparent. This is\n   because applications have few direct\
    \ requirements on these second\n   order aspects of communications. Requirements\
    \ in these areas will\n   have to be inferred from application requirements (e.g.\
    \ latency).\n   The taxonomy is likely to be useful in a number of ways:\n   1.\
    \ Most simply, it can be used as a checklist to create a\n      requirements statement\
    \ for a particular LSMA. Example applications\n      will be classified [bagnall98]\
    \ using the taxonomy in order to\n      exercise (and improve) it\n   2. Because\
    \ strictest requirement have been defined for many\n      parameters, it will\
    \ be possible to identify worst case scenarios\n      for the design of protocols\n\
    \   3. Because the scope of each parameter has been defined (per session,\n  \
    \    per receiver etc.), it will be possible to highlight where\n      heterogeneity\
    \ is going to be most marked\n   4. It is a step towards standardization of the\
    \ way LSMAs define their\n      communications requirements. This could lead to\
    \ standard APIs\n      between applications and protocol adaptation middleware\n\
    \   5. Identification of limitations in current Internet technology for\n    \
    \  LSMAs to be added to the LSMA limitations memo [limitations]\n   6. Identification\
    \ of gaps in Internet Engineering Task Force (IETF)\n      working group coverage\n\
    \   This approach is intended to complement that used where application\n   scenarios\
    \ for Distributed Interactive Simulation (DIS) are proposed\n   in order to generate\
    \ network design metrics (values of communications\n   parameters). Instead of\
    \ creating the communications parameters from\n   the applications, we try to\
    \ imagine applications that might be\n   enabled by stretching communications\
    \ parameters.\n"
- title: 2. Definition of Sessions
  contents:
  - "2. Definition of Sessions\n   The following terms have no agreed definition,\
    \ so they will be\n   defined for this document.\n   Session\n      a happening\
    \ or gathering consisting of flows of information\n      related by a common description\
    \ that persists for a non-trivial\n      time (more than a few seconds) such that\
    \ the participants (be they\n      humans or applications) are involved and interested\
    \ at\n      intermediate times.  A session may be defined recursively as a\n \
    \     super-set of other sessions.\n   Secure session\n      a session with restricted\
    \ access\n   A session or secure session may be a sub and/or super set of a\n\
    \   multicast group. A session can simultaneously be both a sub and a\n   super-set\
    \ of a multicast group by spanning a number of groups while\n   time-sharing each\
    \ group with other sessions.\n"
- title: 3. Taxonomy
  contents:
  - '3. Taxonomy

    '
- title: 3.1 Summary of Communications Parameters
  contents:
  - "3.1 Summary of Communications Parameters\n   Before the communications parameters\
    \ are defined, typed and given\n   worst-case values, they are simply listed for\
    \ convenience. Also for\n   convenience they are collected under classification\
    \ headings.\n      Reliability  . . . . . . . . . . . . . . . . . . . . . . 3.2.1\n\
    \         Packet loss . . . . . . . . . . . . . . . . . . . . 3.2.1.1\n      \
    \      Transactional\n            Guaranteed\n            Tolerated loss\n   \
    \         Semantic loss\n         Component reliability . . . . . . . . . . .\
    \ . . . . 3.2.1.2\n            Setup fail-over time\n            Mean time between\
    \ failures\n            Fail over time during a stream\n      Ordering . . . .\
    \ . . . . . . . . . . . . . . . . . . . . 3.2.2\n         Ordering type\n    \
    \  Timeliness . . . . . . . . . . . . . . . . . . . . . . . 3.2.3\n         Hard\
    \ Realtime\n         Synchronicity\n         Burstiness\n         Jitter\n   \
    \      Expiry\n         Latency\n         Optimum bandwidth\n         Tolerable\
    \ bandwidth\n         Required by time and tolerance\n         Host performance\n\
    \         Fair delay\n         Frame size\n         Content size\n      Session\
    \ Control  . . . . . . . . . . . . . . . . . . . . 3.2.4\n         Initiation\n\
    \         Start time\n         End time\n         Duration\n         Active time\n\
    \         Session Burstiness\n         Atomic join\n         Late join allowed\
    \ ?\n         Temporary leave allowed ?\n         Late join with catch-up allowed\
    \ ?\n         Potential streams per session\n         Active streams per sessions\n\
    \      Session Topology . . . . . . . . . . . . . . . . . . . . 3.2.5\n      \
    \   Number of senders\n         Number of receivers\n      Directory  . . . .\
    \ . . . . . . . . . . . . . . . . . . . 3.2.6\n         Fail-over time-out (see\
    \ Reliability: fail-over time)\n         Mobility\n      Security . . . . . .\
    \ . . . . . . . . . . . . . . . . . . 3.2.7\n         Authentication strength\n\
    \         Tamper-proofing\n         Non-repudiation strength\n         Denial\
    \ of service\n         Action restriction\n         Privacy\n         Confidentiality\n\
    \         Retransmit prevention strength\n         Membership criteria\n     \
    \    Membership principals\n         Collusion prevention\n         Fairness\n\
    \         Action on compromise\n      Security dynamics  . . . . . . . . . . .\
    \ . . . . . . . . 3.2.8\n         Mean time between compromises\n         Compromise\
    \ detection time limit\n         compromise recovery time limit\n      Payment\
    \ & Charging . . . . . . . . . . . . . . . . . . . 3.2.9\n         Total Cost\n\
    \         Cost per time\n         Cost per Mb\n"
- title: 3.2 Definitions, types and strictest requirements
  contents:
  - "3.2 Definitions, types and strictest requirements\n   The terms used in the above\
    \ table are now defined for the context of\n   this document. Under each definition,\
    \ the type of their value is\n   given and where possible worst-case values and\
    \ example applications\n   that would exhibit this requirement.\n   There is no\
    \ mention of whether a communication is a stream or a\n   discrete interaction.\
    \ An attempt to use this distinction as a way of\n   characterizing communications\
    \ proved to be remarkably unhelpful and\n   was dropped.\n"
- title: 3.2.1 Types
  contents:
  - "3.2.1 Types\n   Each requirement has a type. The following is a list of all the\
    \ types\n   used in the following definitions.\n   Application Benchmark\n   \
    \   This is some measure of the processor load of an application, in\n      some\
    \ architecture neutral unit. This is non-trivial since the\n      processing an\
    \ application requires may change radically with\n      different hardware, for\
    \ example, a video client with and without\n      hardware support.\n   Bandwidth\
    \ Measured in bits per second, or a multiple of.\n   Boolean\n   Abstract Currency\n\
    \      An abstract currency is one which is adjusted to take inflation\n     \
    \ into account. The simplest way of doing this is to use the value\n      of a\
    \ real currency on a specific date. It is effectively a way of\n      assessing\
    \ the cost of something in \"real terms\". An example might\n      be 1970 US$.\
    \ Another measure might be \"average man hours\".\n   Currency - current local\n\
    \   Data Size\n   Date (time since epoch)\n   Enumeration\n   Fraction\n   Identifiers\n\
    \      A label used to distinguish different parts of a communication\n   Integer\n\
    \   Membership list/rule\n   Macro\n      A small piece of executable code used\
    \ to describe policies\n   Time\n"
- title: 3.2.2 Reliability
  contents:
  - '3.2.2 Reliability

    '
- title: 3.2.2.1 Packet Loss
  contents:
  - "3.2.2.1 Packet Loss\n   Transactional\n      When multiple operations must occur\
    \ atomically, transactional\n      communications guarantee that either all occur\
    \ or none occur and a\n      failure is flagged.\n      Type:                \
    \  Boolean\n      Meaning:               Transactional or Not transaction\n  \
    \    Strictest Requirement: Transactional\n      Scope:                 per stream\n\
    \      Example Application:   Bank credit transfer, debit and credit must\n  \
    \                           be atomic.\n      NB:                    Transactions\
    \ are potentially much more\n                             complex, but it is believed\
    \ this is\n                             an application layer problem.\n   Guaranteed\n\
    \      Guarantees communications will succeed under certain conditions.\n    \
    \  Type:                  Enumerated\n      Meaning:               Deferrable\
    \ - if communication fails it will\n                             be deferred until\
    \ a time when it will be\n                             successful.\n         \
    \                    Guaranteed - the communication will succeed\n           \
    \                  so long as all necessary components are\n                 \
    \            working.\n                             No guarantee - failure will\
    \ not be\n                             reported.\n      Strictest Requirement:\
    \ Deferrable\n      Example Application:   Stock quote feed - Guaranteed\n   \
    \   Scope:                 per stream\n      NB:                    The application\
    \ will need to set parameters\n                             to more fully define\
    \ Guarantees, which the\n                             middleware may translate\
    \ into, for example,\n                             queue lengths.\n   Tolerated\
    \ loss\n      This specifies the proportion of data from a communication that\n\
    \      can be lost before the application becomes completely unusable.\n     \
    \ Type:                  Fraction\n      Meaning:               fraction of the\
    \ stream that can be lost\n      Strictest Requirement: 0%\n      Scope:     \
    \            per stream\n      Example Application:   Video - 20%\n   Semantic\
    \ loss\n      The application specifies how many and which parts of the\n    \
    \  communication can be discarded if necessary.\n      Type:                 \
    \ Identifiers, name disposable application\n                             level\
    \ frames\n      Meaning:               List of the identifiers of application\n\
    \                             frames which may be lost\n      Strictest Requirement:\
    \ No loss allowed\n      Scope:                 per stream\n      Example Application:\
    \   Video feed - P frames may be lost, I frames\n                            \
    \ not\n"
- title: 3.2.2.2. Component Reliability
  contents:
  - "3.2.2.2. Component Reliability\n   Setup Fail-over time\n      The time before\
    \ a failure is detected and a replacement component\n      is invoked. From the\
    \ applications point of view this is the time\n      it may take in exceptional\
    \ circumstances for a channel to be set-\n      up. It is not the \"normal\" operating\
    \ delay before a channel is\n      created.\n      Type:                  Time\n\
    \      Strictest Requirement: Web server - 1 second\n      Scope:            \
    \     per stream\n      Example Application:   Name lookup - 5 seconds\n   Mean\
    \ time between failures\n      The mean time between two consecutive total failures\
    \ of the\n      channel.\n      Type:                  Time\n      Strictest Requirement:\
    \ Indefinite\n      Scope:                 per stream\n      Example Application:\
    \   Telephony - 1000 hours\n   Fail over time during a stream\n      The time\
    \ between a stream breaking and a replacement being set up.\n      Type:     \
    \             Time\n      Strictest Requirement: Equal to latency requirement\n\
    \      Scope:                 per stream\n      Example Application:   File Transfer\
    \ - 10sec\n"
- title: 3.2.3. Ordering
  contents:
  - "3.2.3. Ordering\n   Ordering type\n      Specifies what ordering must be preserved\
    \ for the application\n      Type:                  {\n                      \
    \         Enumeration timing,\n                               Enumeration sequencing,\n\
    \                               Enumeration causality\n                      \
    \       }\n      Meaning:               Timing - the events are timestamped\n\
    \                               Global\n                               Per Sender\n\
    \                               none\n                             Sequencing\
    \ - the events are sequenced in\n                             order of occurrence\n\
    \                               Global\n                               Per Sender\n\
    \                               none\n                             Causality -\
    \ the events form a graph\n                             relating cause and effect\n\
    \                               Global\n                               Per Sender\n\
    \                               none\n      Strictest Requirement: Global, Global,\
    \ Global\n      Scope:                 per stream\n      Example Application:\
    \   Game - { none, per sender, global } (to\n                             make\
    \ sure being hit by bullet occurs\n                             after the shot\
    \ is fired!)\n"
- title: 3.2.4. Timeliness
  contents:
  - "3.2.4. Timeliness\n   Hard real- time\n      There is a meta-requirement on timeliness.\
    \ If hard real-time is\n      required then the interpretation of all the other\
    \ requirements\n      changes.  Failures to achieve the required timeliness must\
    \ be\n      reported before the communication is made. By contrast soft real-\n\
    \      time means that there is no guarantee that an event will occur in\n   \
    \   time. However statistical measures can be used to indicate the\n      probability\
    \ of completion in the required time, and policies such\n      as making sure\
    \ the probability is 95% or better could be used.\n      Type:               \
    \   Boolean\n      Meaning:               Hard or Soft realtime\n      Strictest\
    \ Requirement: Hard\n      Scope:                 per stream\n      Example Application:\
    \   Medical monitor - Hard\n   Synchronicity\n      To make sure that separate\
    \ elements of a session are correctly\n      synchronized with respect to each\
    \ other\n      Type:                  Time\n      Meaning:               The maximum\
    \ time drift between streams\n      Strictest Requirement: 80ms for human perception\n\
    \      Scope:                 per stream pair/set\n      Example Application:\
    \   TV lip-sync value 80ms\n      NB:                    the scope is not necessarily\
    \ the same as\n                             the session. Some streams may no need\
    \ to be\n                             sync'd, (say, a score ticker in a football\n\
    \                             match\n   Burstiness\n      This is a measure of\
    \ the variance of bandwidth requirements over\n      time.\n      Type:      \
    \            Fraction\n      Meaning:               either:\n                \
    \               Variation in b/w as fraction of b/w for\n                    \
    \           variable b/w communications\n                             or\n   \
    \                            duty cycle (fraction of time at peak b/w)\n     \
    \                          for intermittent b/w communications.\n      Strictest\
    \ Requirement: Variation = max b/w Duty cycle ~ 0\n      Scope:              \
    \   per stream\n      Example Application:   Sharing video clips, with chat channel\
    \ -\n                             sudden bursts as clips are swapped.\n      \
    \                       Compressed Audio - difference between\n              \
    \               silence and talking\n      NB:                    More detailed\
    \ analysis of communication\n                             flow (e.g. max rate\
    \ of b/w change or\n                             Fourier Transform of the b/w\
    \ requirement) is\n                             possible but as complexity increases\n\
    \                             usefulness and computability decrease.\n   Jitter\n\
    \      Jitter is a measure of variance in the time taken for\n      communications\
    \ to traverse from the sender (application) to the\n      receiver, as seen from\
    \ the application layer.\n      Type:                  Time\n      Meaning:  \
    \             Maximum permissible time variance\n      Strictest Requirement:\
    \ <1ms\n      Scope:                 per stream\n      Example Application:  \
    \ audio streaming - <1ms\n      NB:                    A jitter requirement implies\
    \ that the\n                             communication is a real-time stream.\
    \  It\n                             makes relatively little sense for a file\n\
    \                             transfer for example.\n   Expiry\n             \
    \                This specifies how long the information\n                   \
    \          being transferred remains valid for.\n      Type:                 \
    \ Date\n      Meaning:               Date at which data expires\n      Strictest\
    \ Requirement: For ever\n      Scope:                 per stream\n      Example\
    \ Application:   key distribution - now+3600 seconds (valid\n                \
    \             for at least one hour)\n   Latency\n                           \
    \  Time between initiation and occurrence of\n                             an\
    \ action from application perspective.\n      Type:                  Time\n  \
    \    Strictest Requirement: Near zero for process control apps\n      Scope: \
    \                per stream\n      Example Application:   Audio conference 20ms\n\
    \      NB:                    Where an action consists of several\n          \
    \                   distinct sequential parts the latency\n                  \
    \           budget must be split over those parts. For\n                     \
    \        process control the requirement may take\n                          \
    \   any value.\n   Optimum Bandwidth\n      Bandwidth required to complete communication\
    \ in time\n      Type:                  Bandwidth\n      Strictest Requirement:\
    \ No upper limit\n      Scope:                 per stream\n      Example Application:\
    \   Internet Phone 8kb/s\n   Tolerable Bandwidth\n      Minimum bandwidth that\
    \ application can tolerate\n      Type:                  Bandwidth\n      Strictest\
    \ Requirement: No upper limit\n      Scope:                 per stream\n     \
    \ Example Application:   Internet phone 4kb/s\n   Required by time and tolerance\n\
    \      Time communication should complete by and time when failure to\n      complete\
    \ renders communication useless (therefore abort).\n      Type:              \
    \    {\n                               Date - preferred complete time,\n     \
    \                          Date - essential complete time\n                  \
    \           }\n      Strictest Requirement: Both now.\n      Scope:          \
    \       per stream\n      Example Application:   Email - Preferred 5 minutes &\
    \ Essential in\n                             1 day\n      NB:                \
    \    Bandwidth * Duration = Size; only two of\n                             these\
    \ parameters may be specified. An API\n                             though could\
    \ allow application authors to\n                             think in terms of\
    \ any two.\n   Host performance\n      Ability of host to create/consume communication\n\
    \      Type:                  Application benchmark\n      Meaning:          \
    \     Level of resources required by Application\n      Strictest Requirement:\
    \ Full consumption\n      Scope:                 per stream\n      Example Application:\
    \   Video - consume 15 frames a second\n      NB:                    Host performance\
    \ is complex since load,\n                             media type, media quality,\
    \ h/w assistance,\n                             and encoding scheme all affect\
    \ the\n                             processing load. These are difficult to\n\
    \                             predict prior to a communication starting.\n   \
    \                          To some extent these will need to be\n            \
    \                 measured and modified as the communication\n               \
    \              proceeds.\n   Frame size\n      Size of logical data packets from\
    \ application perspective\n      Type:                  data size\n      Strictest\
    \ Requirement: 6 bytes (gaming)\n      Scope:                 per stream\n   \
    \   Example Application:   video = data size of single frame update\n   Content\
    \ size\n      The total size of the content (not relevant for continuous media)\n\
    \      Type:                  data size\n      Strictest Requirement: N/A\n  \
    \    Scope:                 per stream\n      Example Application:   document\
    \ transfer, 4kbytes\n"
- title: 3.2.5. Session Control
  contents:
  - "3.2.5. Session Control\n   Initiation\n      Which initiation mechanism will\
    \ be used.\n      Type:                  Enumeration\n      Meaning:         \
    \      Announcement - session is publicly\n                                 announced\
    \ via a mass distribution\n                                 system\n         \
    \                    Invitation - specific participants are\n                \
    \                 explicitly invited, e.g. my email\n                        \
    \     Directive - specific participants are\n                                \
    \ forced to join the session\n      Strictest Requirement: Directive\n      Scope:\
    \                 per stream\n      Example Application:   Corporate s/w update\
    \ - Directive\n   Start Time\n      Time sender starts sending!\n      Type: \
    \                 Date\n      Strictest Requirement: Now\n      Scope:       \
    \          per stream\n      Example Application:   FTP - at 3am\n   End Time\n\
    \      Type:                  Date\n      Strictest Requirement: Now\n      Scope:\
    \                 per stream\n      Example Application:   FTP - Now+30mins\n\
    \   Duration\n      (end time) - (start time) = (duration), therefore only two\
    \ of\n      three should be specified.\n      Type:                  Time\n  \
    \    Strictest Requirement: - 0ms for discrete, indefinite for streams\n     \
    \ Scope:                 per stream\n      Example Application:   audio feed -\
    \ 60mins\n   Active Time\n      Total time session is active, not including breaks\n\
    \      Type:                  Time\n      Strictest Requirement: equals duration\n\
    \      Scope:                 per stream\n      Example Application:   Spectator\
    \ sport transmission\n   Session Burstiness\n      Expected level of burstiness\
    \ of the session\n      Type:                  Fraction\n      Meaning:      \
    \         Variance as a fraction of maximum bandwidth\n      Strictest Requirement:\
    \ =bandwidth\n      Scope:                 per stream\n      Example Application:\
    \   commentary & slide show: 90% of max\n   Atomic join\n      Session fails unless\
    \ a certain proportion of the potential\n      participants accept an invitation\
    \ to join. Alternatively, may be\n      specified as a specific numeric quorum.\n\
    \      Type:                  Fraction (proportion required) or int\n        \
    \                     (quorum)\n      Strictest Requirement: 1.0 (proportion)\n\
    \      Example Application:   price list update, committee meeting\n      Scope:\
    \                 per stream or session\n      NB:                    whether\
    \ certain participants are essential\n                                    is application\
    \ dependent.\n   Late join allowed ?\n      Does joining a session after it starts\
    \ make sense\n      Type:                  Boolean\n      Strictest Requirement:\
    \ allowed\n      Scope:                 per stream or session\n      Example Application:\
    \   game - not allowed\n      NB:                    An application may wish to\
    \ define an\n                             alternate session if late join is not\n\
    \                             allowed\n   Temporary leave allowed ?\n      Does\
    \ leaving and then coming back make sense for session\n      Type:           \
    \       Boolean\n      Strictest Requirement: allowed\n      Scope:          \
    \       per stream or session\n      Example Application:   FTP - not allowed\n\
    \   Late join with catch-up allowed ?\n      Is there a mechanism for a late joiner\
    \ to see what they've missed\n      Type:                  Boolean\n      Strictest\
    \ Requirement: allowed\n      Scope:                 per stream or session\n \
    \     Example Application:   sports event broadcast, allowed\n      NB:      \
    \              An application may wish to define an\n                        \
    \     alternate session if late join is not\n                             allowed\n\
    \   Potential streams per session\n      Total number of streams that are part\
    \ of session, whether being\n      consumed or not\n      Type:              \
    \    Integer\n      Strictest Requirement: No upper limit\n      Scope:      \
    \           per session\n      Example Application:   football match mcast - multiple\
    \ camera's,\n                             commentary, 15 streams\n   Active streams\
    \ per sessions  (i.e. max app can handle)\n      Maximum number of streams that\
    \ an application can consume\n      simultaneously\n      Type:              \
    \    Integer\n      Strictest Requirement: No upper limit\n      Scope:      \
    \           per session\n      Example Application:   football match mcast - 6,\
    \ one main video,\n                             four user selected, one audio\
    \ commentary\n"
- title: 3.2.6. Session Topology
  contents:
  - "3.2.6. Session Topology\n   Note: topology may be dynamic. One of the challenges\
    \ in designing\n   adaptive protocol frameworks is to predict the topology before\
    \ the\n   first join.\n   Number of senders\n      The number of senders is a\
    \ result the middleware may pass up to\n      the application\n      Type:   \
    \               Integer\n      Strictest Requirement: No upper limit\n      Scope:\
    \                 per stream\n      Example Application:   network MUD - 100\n\
    \   Number of receivers\n      The number of receivers is a results the middleware\
    \ may pass up to\n      the application\n      Type:                  Integer\n\
    \      Strictest Requirement: No upper limit\n      Scope:                 per\
    \ stream\n      Example Application:   video mcast - 100,000\n"
- title: 3.2.7. Directory
  contents:
  - "3.2.7. Directory\n   Fail-over timeout (see Reliability: fail-over time)\n  \
    \ Mobility\n      Defines restrictions on when directory entries may be changed\n\
    \      Type:                  Enumeration\n      Meaning:               while\
    \ entry is in use\n                             while entry in unused\n      \
    \                       never\n      Strictest Requirement: while entry is in\
    \ use\n      Scope:                 per stream\n      Example Application:   voice\
    \ over mobile phone, while entry is in\n                             use (as phone\
    \ gets new address when\n                             changing cell).\n"
- title: 3.2.8. Security
  contents:
  - "3.2.8. Security\n   The strength of any security arrangement can be stated as\
    \ the\n   expected cost of mounting a successful attack. This allows mechanisms\n\
    \   such as physical isolation to be considered alongside encryption\n   mechanisms.\
    \  The cost is measured in an abstract currency, such as\n   1970 UD$ (to inflation\
    \ proof).\n   Security is an orthogonal requirement. Many requirements can have\
    \ a\n   security requirement on them which mandates that the cost of causing\n\
    \   the system to fail to meet that requirement is more than the\n   specified\
    \ amount. In terms of impact on other requirements though,\n   security does potentially\
    \ have a large impact so when a system is\n   trying to determine which mechanisms\
    \ to use and whether the\n   requirements can be met security will clearly be\
    \ a major influence.\n   Authentication Strength\n      Authentication aims to\
    \ ensure that a principal is who they claim\n      to be.  For each role in a\
    \ communication, (e.g. sender, receiver)\n      there is a strength for the authentication\
    \ of the principle who\n      has taken on that role. The principal could be a\
    \ person,\n      organization or other legal entity. It could not be a process\n\
    \      since a process has no legal representation.\n      Type:             \
    \     Abstract Currency\n      Meaning:               That the cost of hijacking\
    \ a role is in\n                             excess of the specified amount. Each\
    \ role\n                             is a different requirement.\n      Strictest\
    \ Requirement: budget of largest attacker\n      Scope:                 per stream\n\
    \      Example Application:   inter-governmental conference\n   Tamper-proofing\n\
    \      This allows the application to specify how much security will be\n    \
    \  applied to ensuring that a communication is not tampered with.\n      This\
    \ is specified as the minimum cost of successfully tampering\n      with the communication.\
    \ Each non-security requirement has a\n      tamper-proofing requirement attached\
    \ to it.\n      Requirement: The cost of tampering with the communication is in\n\
    \      excess of the specified amount.\n      Type:                  {\n     \
    \                          Abstract Currency,\n                              \
    \ Abstract Currency,\n                               Abstract Currency\n     \
    \                        }\n      Meaning:               cost to alter or destroy\
    \ data,\n                             cost to replay data (successfully),\n  \
    \                           cost to interfere with timeliness.\n      Scope: \
    \                per stream\n      Strictest Requirement: Each budget of largest\
    \ attacker\n      Example Application:   stock price feed\n   Non-repudiation\
    \ strength\n      The non-repudiation strength defines how much care is taken\
    \ to\n      make sure there is a reliable audit trail on all interactions. It\n\
    \      is measured as the cost of faking an audit trail, and therefore\n     \
    \ being able to \"prove\" an untrue event. There are a number of\n      possible\
    \ parameters of the event that need to be proved. The\n      following list is\
    \ not exclusive but shows the typical set of\n      requirements.\n      1. Time\
    \ 2. Ordering (when relative to other events) 3. Whom 4.\n      What (the event\
    \ itself)\n      There are a number of events that need to be provable.  1. sender\n\
    \      proved sent 2. receiver proves received 3. sender proves received.\n  \
    \    Type:                  Abstract Currency\n      Meaning:               minimum\
    \ cost of faking or denying an event\n      Strictest Requirement:  Budget of\
    \ largest attacker\n      Scope:                 per stream\n      Example Application:\
    \   Online shopping system\n   Denial of service\n      There may be a requirement\
    \ for some systems (999,911,112 emergency\n      services access for example)\
    \ that denial of service attacks cannot\n      be launched. While this is difficult\
    \ (maybe impossible) in many\n      systems at the moment it is still a requirement,\
    \ just one that\n      can't be met.\n      Type:                  Abstract Currency\n\
    \      Meaning:               Cost of launching a denial of service\n        \
    \                     attack is greater than specified amount.\n      Strictest\
    \ Requirement: budget of largest attacker\n      Scope:                 per stream\n\
    \      Example Application:   web hosting, to prevent individual hackers\n   \
    \                          stalling system.\n   Action restriction\n      For\
    \ any given communication there are a two actions, send and\n      receive.  Operations\
    \ like adding to members to a group are done as\n      a send to the membership\
    \ list. Examining the list is a request to\n      and receive from the list. Other\
    \ actions can be generalized to\n      send and receive on some communication,\
    \ or are application level\n      not comms level issues.\n      Type:       \
    \           Membership list/rule for each action.\n      Meaning:            \
    \   predicate for determining permission for\n                             role\n\
    \      Strictest Requirement: Send and receive have different policies.\n    \
    \  Scope:                 per stream\n      Example Application:   TV broadcast,\
    \ sender policy defines\n                             transmitter, receiver policy\
    \ is null.\n      NB:                    Several actions may share the same\n\
    \                             membership policy.\n   Privacy\n      Privacy defines\
    \ how well obscured a principals identity is. This\n      could be for any interaction.\
    \ A list of participants may be\n      obscured, a sender may obscure their identity\
    \ when they send.\n      There are also different types of privacy. For example\
    \ knowing two\n      messages were sent by the same person breaks the strongest\
    \ type of\n      privacy even if the identity of that sender is still unknown.\
    \ For\n      each \"level\" of privacy there is a cost associated with violating\n\
    \      it. The requirement is that this cost is excessive for the\n      attacker.\n\
    \      Type:                  {\n                               Abstract Currency,\n\
    \                               Abstract Currency,\n                         \
    \      Abstract Currency,\n                               Abstract Currency\n\
    \                             }\n      Meaning:               Level of privacy,\
    \ expected cost to violate\n                             privacy level for:-\n\
    \                             openly identified - this is the unprotected\n  \
    \                               case\n                             anonymously\
    \ identified  - (messages from\n                                 the same sender\
    \ can be linked)\n                             unadvertised (but traceable) -\
    \ meaning that\n                                 traffic can be detected and traced\
    \ to\n                                 it's source or destination, this is a\n\
    \                                 breach if the very fact that two\n         \
    \                        specific principals are communicating\n             \
    \                    is sensitive.\n                             undetectable\n\
    \      Strictest Requirement: All levels budget of attacker\n      Scope:    \
    \             per stream\n      Example Application:   Secret ballot voting system\n\
    \                             openly identified - budget of any\n            \
    \                     interested party\n                             anonymously\
    \ identified - zero\n                             unadvertised - zero\n      \
    \                       undetectable - zero\n   Confidentiality\n      Confidentiality\
    \ defines how well protected the content of a\n      communication is from snooping.\n\
    \      Type:                  Abstract Currency\n      Meaning:              \
    \ Level of Confidentiality, the cost of\n                             gaining\
    \ illicit access to the content of a\n                             stream\n  \
    \    Strictest Requirement:  budget of attacker\n      Scope:                \
    \ per stream\n      Example Application:   Secure email -  value of transmitted\n\
    \                             information\n   Retransmit prevention strength\n\
    \      This is extremely hard at the moment. This is not to say it's not\n   \
    \   a requirement.\n      Type:                  Abstract Currency\n      Meaning:\
    \               The cost of retransmitting a secure piece\n                  \
    \           of information should exceed the specified\n                     \
    \        amount.\n      Strictest Requirement: Cost of retransmitting  value of\n\
    \                             information\n      Scope:                 per stream\n\
    \   Membership Criteria\n      If a principal attempts to participate in a communication\
    \ then a\n      check will be made to see if it is allowed to do so. The\n   \
    \   requirement is that certain principals will be allowed, and others\n     \
    \ excluded. Given the application is being protected from network\n      details\
    \ there are only two types of specification available, per\n      user, and per\
    \ organization (where an organization may contain\n      other organizations,\
    \ and each user may be a member of multiple\n      organizations). Rules could\
    \ however be built on properties of a\n      user, for example does the user own\
    \ a key? Host properties could\n      also be used, so users on slow hosts or\
    \ hosts running the wrong OS\n      could be excluded.\n      Type:          \
    \        Macros\n      Meaning:               Include or exclude\n           \
    \                     users (list)\n                                organizations\
    \ (list)\n                                hosts (list)\n                     \
    \           user properties (rule)\n                                org properties\
    \ (rule)\n                                hosts properties (rule)\n      Strictest\
    \ Requirement: List of individual users\n      Scope:                 per stream\n\
    \      Example Application:   Corporate video-conference - organization\n    \
    \                         membership\n   Collusion prevention\n      Which aspects\
    \ of collusion it is required to prevent. Collusion is\n      defined as malicious\
    \ co-operation between members of a secure\n      session.  Superficially, it\
    \ would appear that collusion is not a\n      relevant threat in a multicast,\
    \ because everyone has the same\n      information, however, wherever there is\
    \ differentiation, it can be\n      exploited.\n      Type:                  {\n\
    \                               Abstract Currency,\n                         \
    \      Abstract Currency,\n                               Abstract Currency\n\
    \                             }\n      Meaning:               time race collusion\
    \ - cost of colluding\n                             key encryption key (KEK) sharing\
    \ - cost of\n                             colluding\n                        \
    \     sharing of differential QoS (not strictly\n                            \
    \ collusion as across sessions not within\n                             one) -\
    \ cost of colluding\n      Strictest Requirement: For all threats cost attackers\n\
    \                             combined resources\n      Scope:               \
    \  per stream\n      Example Application:   A race where delay of the start signal\
    \ may\n                             be allowed for, but one participant may\n\
    \                             fake packet delay while receiving the start\n  \
    \                           signal from another participant.\n      NB:      \
    \              Time race collusion is the most difficult\n                   \
    \          one to prevent. Also note that while these\n                      \
    \       may be requirements for some systems this\n                          \
    \   does not mean there are necessarily\n                             solutions.\
    \ Setting tough requirements may\n                             result in the middleware\
    \ being unable to\n                             create a valid channel.\n   Fairness\n\
    \      Fairness is a meta-requirement of many other requirements. Of\n      particular\
    \ interest are Reliability and Timeliness requirements.\n      When a communication\
    \ is first created the creator may wish to\n      specify a set of requirements\
    \ for these parameters. Principals\n      which join later may wish to set tighter\
    \ limits. Fairness enforces\n      a policy that any improvement is requirement\
    \ by one principal must\n      be matched by all others, in effect requirements\
    \ can only be set\n      for the whole group. This increases the likelihood that\n\
    \      requirements of this kind will fail to be met. If fairness if not\n   \
    \   an issue then some parts of the network can use more friendly\n      methods\
    \ to achieve those simpler requirements.\n      Type:                  Level of\
    \ variance of the requirement that\n                             needs to be fair.\
    \ For example, if the\n                             latency requirement states\
    \ within 2\n                             seconds, the level of fairness required\
    \ may\n                             be that variations in latency are not more\n\
    \                             than 0.1s. This has in fact become an issue\n  \
    \                           in online gaming (e.g. Quake)\n      Meaning:    \
    \           The variance of performance with respect to\n                    \
    \         any other requirement is less than the\n                           \
    \  specified amount.\n      Scope:                 per stream, per requirement\n\
    \      Example Application:   Networked game, latency to receive\n           \
    \                  positions of players must be within 5ms for\n             \
    \                all players.\n   Action on compromise\n      The action to take\
    \ on detection of compromise (until security\n      reassured).\n      Type: \
    \                 Enumeration\n      Meaning:               warn but continue\n\
    \                             pause\n                             abort\n    \
    \  Scope:                 Per stream\n      Strictest Requirement: pause\n   \
    \   Example Application:   Secure video conference - if intruder\n           \
    \                  alert, everyone is warned, but they can\n                 \
    \            continue while knowing not to discuss\n                         \
    \    sensitive matters (cf. catering staff\n                             during\
    \ a meeting).\n"
- title: 3.2.8.1. Security Dynamics
  contents:
  - "3.2.8.1. Security Dynamics\n      Security dynamics are the temporal properties\
    \ of the security\n      mechanisms that are deployed. They may affect other requirements\n\
    \      such as latency or simply be a reflection of the security\n      limitations\
    \ of the system. The requirements are often concerned\n      with abnormal circumstances\
    \ (e.g. system violation).\n   Mean time between compromises\n      This is not\
    \ the same as the strength of a system. A fairly weak\n      system may have a\
    \ very long time between compromises because it is\n      not worth breaking in\
    \ to, or it is only worth it for very few\n      people. Mean time between compromises\
    \ is a combination of\n      strength, incentive and scale.\n      Type:     \
    \             Time\n      Scope:                 Per stream\n      Strictest Requirement:\
    \ indefinite\n      Example Application:   Secure Shell - 1500hrs\n   Compromise\
    \ detection time limit\n      The average time it must take to detect a compromise\
    \ (one\n      predicted in the design of the detection system, that is).\n   \
    \   Type:                  Time\n      Scope:                 Per stream\n   \
    \   Strictest Requirement: Round trip time\n      Example Application:   Secure\
    \ Shell - 2secs\n   Compromise recovery time limit\n      The maximum time it\
    \ must take to re-seal the security after a\n      breach.  This combined with\
    \ the compromise detection time limit\n      defines how long the system must\
    \ remain inactive to avoid more\n      security breaches. For example if a compromise\
    \ is detected in one\n      minute, and recovery takes five, then one minute of\
    \ traffic is now\n      insecure and the members of the communication must remain\
    \ silent\n      for four minutes after detection while security is re-established.\n\
    \      Type:                  Time\n      Scope:                 Per stream\n\
    \      Strictest Requirement: 1 second\n      Example Application:   Audio conference\
    \ - 10 seconds\n"
- title: 3.2.9. Payment & Charging
  contents:
  - "3.2.9. Payment & Charging\n   Total Cost\n      The total cost of communication\
    \ must be limited to this amount.\n      This would be useful for transfer as\
    \ opposed to stream type\n      applications.\n      Type:                  Currency\n\
    \      Meaning:               Maximum charge allowed\n      Scope:           \
    \      Per user per stream\n      Strictest Requirement: Free\n      Example Application:\
    \   File Transfer: comms cost must be < 1p/Mb\n   Cost per Time\n            \
    \                 This is the cost per unit time. Some\n                     \
    \        applications may not be able to predict the\n                       \
    \      duration of a communication. It may be more\n                         \
    \    meaningful for those to be able to specify\n                            \
    \ price per time instead.\n      Type:                  Currency per timeS\n \
    \     Scope:                 Per user per stream\n      Strictest Requirement:\
    \ Free\n      Example Application:   Video Conference - 15p / minute\n   Cost\
    \ per Mb\n      This is the cost per unit of data. Some communications may be\n\
    \      charged by the amount of data transferred. Some applications may\n    \
    \  prefer to specify requirements in this way.\n      Type:                  Currency\
    \ per data size\n      Scope:                 Per user per stream\n      Strictest\
    \ Requirement: Free\n      Example Application:   Email advertising - 15p / Mb\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   See comprehensive security section of taxonomy.\n"
- title: 5. References
  contents:
  - "5. References\n   [Bagnall98]   Bagnall Peter, Poppitt Alan, Example LSMA\n \
    \                classifications, BT Tech report,\n                 <URL:http://www.labs.bt.com/projects/mware/>\n\
    \   [limitations] Pullen, M., Myjak, M. and C. Bouwens, \"Limitations of\n   \
    \              Internet Protocol Suite for Distributed Simulation in\n       \
    \          the Large Multicast Environment\", RFC 2502, February\n           \
    \      1999.\n   [rmodp]       Open Distributed Processing Reference Model (RM-ODP),\n\
    \                 ISO/IEC 10746-1 to 10746-4 or ITU-T (formerly CCITT)\n     \
    \            X.901 to X.904. Jan 1995.\n   [blaze95]     Blaze, Diffie, Rivest,\
    \ Schneier, Shimomura, Thompson\n                 and Wiener, Minimal Key Lengths\
    \ for Symmetric Ciphers\n                 to Provide Adequate Commercial Security,\
    \ January 1996.\n"
- title: 6. Authors' Addresses
  contents:
  - "6. Authors' Addresses\n   Peter Bagnall\n   c/o B54/77 BT Labs\n   Martlesham\
    \ Heath\n   Ipswich, IP5 3RE\n   England\n   EMail: pete@surfaceeffect.com\n \
    \  Home page: http://www.surfaceeffect.com/people/pete/\n   Bob Briscoe\n   B54/74\
    \ BT Labs\n   Martlesham Heath\n   Ipswich, IP5 3RE\n   England\n   Phone: +44\
    \ 1473 645196\n   Fax:   +44 1473 640929\n   EMail: bob.briscoe@bt.com\n   Home\
    \ page: http://www.labs.bt.com/people/briscorj/\n   Alan Poppitt\n   B54/77 BT\
    \ Labs\n   Martlesham Heath\n   Ipswich, IP5 3RE\n   England\n   Phone: +44 1473\
    \ 640889\n   Fax:   +44 1473 640929\n   EMail: apoppitt@jungle.bt.co.uk\n   Home\
    \ page: http://www.labs.bt.com/people/poppitag/\n"
- title: 7.  Full Copyright Statement
  contents:
  - "7.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
