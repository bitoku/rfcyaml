- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                          J. Kunze
  contents:
  - "Independent Submission                                          J. Kunze\n  \
    \               The BagIt File Packaging Format (V1.0)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes BagIt, a set of hierarchical file layout\n\
    \   conventions for storage and transfer of arbitrary digital content.  A\n  \
    \ \"bag\" has just enough structure to enclose descriptive metadata\n   \"tags\"\
    \ and a file \"payload\" but does not require knowledge of the\n   payload's internal\
    \ semantics.  This BagIt format is suitable for\n   reliable storage and transfer.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not candidates for any level of Internet\
    \ Standard;\n   see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8493.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n     1.1.  Purpose . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n     1.2.  Requirements  . . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n     1.3.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . .   5\n   2.  Structure . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   6\n     2.1.  Required Elements . . . . . . . . . . . . . . . . . . . .\
    \   6\n       2.1.1.  Bag Declaration: bagit.txt  . . . . . . . . . . . . .  \
    \ 6\n       2.1.2.  Payload Directory: data/  . . . . . . . . . . . . . .   7\n\
    \       2.1.3.  Payload Manifest: manifest-algorithm.txt  . . . . . .   7\n  \
    \   2.2.  Optional Elements . . . . . . . . . . . . . . . . . . . .   8\n    \
    \   2.2.1.  Tag Manifest: tagmanifest-algorithm.txt . . . . . . .   8\n      \
    \ 2.2.2.  Bag Metadata: bag-info.txt  . . . . . . . . . . . . .   9\n       2.2.3.\
    \  Fetch File: fetch.txt . . . . . . . . . . . . . . . .  12\n       2.2.4.  Other\
    \ Tag Files . . . . . . . . . . . . . . . . . . .  12\n     2.3.  Text Tag File\
    \ Format  . . . . . . . . . . . . . . . . . .  13\n     2.4.  Bag Checksum Algorithms\
    \ . . . . . . . . . . . . . . . . .  13\n   3.  Complete and Valid Bags . . .\
    \ . . . . . . . . . . . . . . . .  14\n   4.  Examples  . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  15\n     4.1.  Example of a Basic Bag  . . .\
    \ . . . . . . . . . . . . . .  15\n     4.2.  Example Bag Using fetch.txt . .\
    \ . . . . . . . . . . . . .  16\n   5.  Security Considerations . . . . . . .\
    \ . . . . . . . . . . . .  16\n     5.1.  Special Directory Characters  . . .\
    \ . . . . . . . . . . .  16\n     5.2.  Control of URLs in fetch.txt  . . . .\
    \ . . . . . . . . . .  17\n     5.3.  File Sizes in fetch.txt . . . . . . . .\
    \ . . . . . . . . .  17\n     5.4.  Attacks on Payload File Content . . . . .\
    \ . . . . . . . .  17\n   6.  Practical Considerations (Non-normative)  . . .\
    \ . . . . . . .  17\n     6.1.  Interoperability  . . . . . . . . . . . . . .\
    \ . . . . . .  17\n       6.1.1.  Filename Normalization  . . . . . . . . . .\
    \ . . . . .  18\n       6.1.2.  Windows and Unix File Naming  . . . . . . . .\
    \ . . . .  18\n       6.1.3.  Legacy Checksum Tools . . . . . . . . . . . . .\
    \ . . .  18\n   7.  Augmented Backus-Naur Form (Non-normative)  . . . . . . .\
    \ . .  21\n     7.1.  Bag Declaration: bagit.txt  . . . . . . . . . . . . . .\
    \ .  21\n     7.2.  Payload Manifest: manifest-algorithm.txt  . . . . . . . .\
    \  21\n     7.3.  Bag Metadata: bag-info.txt  . . . . . . . . . . . . . . .  22\n\
    \     7.4.  Fetch File: fetch.txt . . . . . . . . . . . . . . . . . .  22\n  \
    \ 8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  22\n   9.\
    \  References  . . . . . . . . . . . . . . . . . . . . . . . . .  22\n     9.1.\
    \  Normative References  . . . . . . . . . . . . . . . . . .  22\n     9.2.  Informative\
    \ References  . . . . . . . . . . . . . . . . .  23\n   Acknowledgements  . .\
    \ . . . . . . . . . . . . . . . . . . . . . .  24\n   Contributors  . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . .  24\n   Authors' Addresses  . . .\
    \ . . . . . . . . . . . . . . . . . . . .  25\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Purpose
  contents:
  - "1.1.  Purpose\n   BagIt is a set of hierarchical file layout conventions designed\
    \ to\n   support storage and transfer of arbitrary digital content.  A \"bag\"\
    \n   consists of a directory containing the payload files and other\n   accompanying\
    \ metadata files known as \"tag\" files.  The \"tags\" are\n   metadata files\
    \ intended to facilitate and document the storage and\n   transfer of the bag.\
    \  Processing a bag does not require any\n   understanding of the payload file\
    \ contents, and the payload files can\n   be accessed without processing the BagIt\
    \ metadata.\n   The name, BagIt, is inspired by the \"enclose and deposit\" method\n\
    \   [ENCDEP], sometimes referred to as \"bag it and tag it\".  BagIt\n   differs\
    \ from serialized archival formats such as MIME, TAR, or ZIP in\n   two general\
    \ areas:\n   1.  Strong integrity assurances.  The format supports cryptographic-\n\
    \       quality hash algorithms (see Section 2.4) and allows for in-place\n  \
    \     upgrades to add additional manifests using stronger algorithms\n       without\
    \ breaking backwards compatibility.  This provides high\n       levels of confidence\
    \ against data corruption, but it is not\n       designed to be secure against\
    \ active attacks.\n   2.  Direct file access.  Because BagIt specifies an actual\
    \ filesystem\n       hierarchy rather than a serialized representation of one,\
    \ files\n       can be accessed using standard operating system utilities,\n \
    \      implementations do not need to process a potentially large\n       archival\
    \ file to extract a subset of data, and the format imposes\n       no size limits\
    \ for either individual files or a bag.\n   BagIt is widely used for preserving\
    \ digital assets originating from\n   different domains.  Organizations involved\
    \ in digital preservation\n   with BagIt include the Library of Congress, Dryad\
    \ Data Repository,\n   NSF DataONE, and the Rockefeller Archive Center.  Software\n\
    \   implementations are available for many languages, including Python,\n   Ruby,\
    \ Java, Perl, and PHP.  It is also used in the libraries of many\n   universities,\
    \ such as Cornell, Purdue, Stanford, Ghent University,\n   New York University,\
    \ and the University of California.\n"
- title: 1.2.  Requirements
  contents:
  - "1.2.  Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n   Implementers are strongly encouraged\
    \ to review the interoperability\n   considerations described in Section 6.1.\n"
- title: 1.3.  Terminology
  contents:
  - "1.3.  Terminology\n   The following terms have precise definitions as used in\
    \ this\n   document:\n   bag:  A set of opaque files contained within the structure\
    \ defined by\n      this document.\n   bag declaration:  The file required to\
    \ be in all bags conforming to\n      this document.  Contains values necessary\
    \ to process the rest of a\n      bag.  See Section 2.1.1.\n   bag checksum algorithm:\
    \  The name of a cryptographic checksum\n      algorithm that has been normalized\
    \ for use in a manifest or tag\n      manifest file name (e.g., \"sha512\") as\
    \ described in Section 2.4.\n   manifest:  A tag file that maps filepaths to checksums.\
    \  A manifest\n      can be a payload manifest (see Section 2.1.3) or a tag manifest\n\
    \      (see Section 2.2.1).\n   payload:  The data encapsulated by the bag as\
    \ a set of named files,\n      which may be organized in subdirectories.  The\
    \ contents of the\n      payload files are opaque to this document, and, with\
    \ respect to\n      BagIt processing, are always considered as sequences of\n\
    \      uninterpreted octets.  See Section 2.1.2.\n   tag directory:  A directory\
    \ that contains one or more tag files.\n   tag file:  A file that contains metadata\
    \ about the bag or its\n      payload.  This document defines the standard BagIt\
    \ tag files: the\n      bag declaration in \"bagit.txt\" (see Section 2.1.1),\
    \ payload\n      manifests (see Section 2.1.3), tag manifests (see Section 2.2.1),\n\
    \      bag metadata in \"bag-info.txt\" (see Section 2.2.2), and remote\n    \
    \  payload in \"fetch.txt\" (see Section 2.2.3).  This document also\n      allows\
    \ other arbitrary tag files as described in Section 2.2.4.\n   complete:  A bag\
    \ that contains every element required by this\n      document, every payload\
    \ file listed in a manifest, and any\n      optional files that are listed in\
    \ a tag manifest.  See Section 3.\n   valid:  A complete bag where every checksum\
    \ in every manifest has\n      been successfully verified against the corresponding\
    \ file.\n"
- title: 2.  Structure
  contents:
  - "2.  Structure\n   A bag MUST consist of a base directory containing the following:\n\
    \   1.  a set of required and optional tag files (see Section 2.2);\n   2.  a\
    \ subdirectory named \"data\", called the payload directory (see\n       Section\
    \ 2.1.2); and\n   3.  a set of optional tag directories.\n   The tag files in\
    \ the base directory consist of one or more files\n   named \"manifest-_algorithm_.txt\"\
    \ (see Sections 2.1.3 and 2.4), a file\n   named \"bagit.txt\" (see Section 2.1.1),\
    \ and zero or more additional\n   tag files (see Section 2.2).  The tag files\
    \ and directories are in\n   arbitrary file hierarchies and MAY have any name\
    \ that is not reserved\n   for a file or directory in this document.\n   The base\
    \ directory can have any name, as illustrated by the figure\n   below.\n     \
    \    <base directory>/\n         |\n         +-- bagit.txt\n         |\n     \
    \    +-- manifest-<algorithm>.txt\n         |\n         +-- [additional tag files]\n\
    \         |\n         +-- data/\n         |     |\n         |     +-- [payload\
    \ files]\n         |\n         +-- [tag directories]/\n               |\n    \
    \           +-- [tag files]\n"
- title: 2.1.  Required Elements
  contents:
  - '2.1.  Required Elements

    '
- title: '2.1.1.  Bag Declaration: bagit.txt'
  contents:
  - "2.1.1.  Bag Declaration: bagit.txt\n   The \"bagit.txt\" tag file MUST consist\
    \ of exactly two lines in this\n   order:\n   BagIt-Version: M.N\n   Tag-File-Character-Encoding:\
    \ ENCODING\n   _M.N_ identifies the BagIt major (M) and minor (N) version numbers.\n\
    \   _ENCODING_ identifies the character set encoding used by the\n   remaining\
    \ tag files.  _ENCODING_ SHOULD be \"UTF-8\", but for backwards\n   compatibility\
    \ it MAY be any other encoding registered in\n   [cs-registry].  The bag declaration\
    \ itself MUST be encoded in UTF-8\n   and MUST NOT contain a Byte Order Mark (BOM)\
    \ [RFC3629].\n   The number for this version of BagIt is \"1.0\".\n"
- title: '2.1.2.  Payload Directory: data/'
  contents:
  - "2.1.2.  Payload Directory: data/\n   The base directory MUST contain a subdirectory\
    \ named \"data\".\n   The payload directory contains the arbitrary digital content\
    \ within\n   the bag.  The files under the payload directory are called payload\n\
    \   files, or the payload.  Each payload file is treated as an opaque\n   octet\
    \ stream when verifying file correctness.  Payload files MAY be\n   organized\
    \ in arbitrary subdirectory structures within the payload\n   directory; however,\
    \ for the purpose of this document, such\n   subdirectory structures and filenames\
    \ have no given meaning.\n"
- title: '2.1.3.  Payload Manifest: manifest-algorithm.txt'
  contents:
  - "2.1.3.  Payload Manifest: manifest-algorithm.txt\n   A payload manifest file\
    \ provides a complete listing of each payload\n   file name along with a corresponding\
    \ checksum to permit data\n   integrity checking.  A bag can have more than one\
    \ payload manifest,\n   with each using a different checksum algorithm.  Manifest\
    \ entries\n   MUST satisfy the following constraints:\n   o  Every bag MUST contain\
    \ at least one payload manifest file and MAY\n      contain more than one.\n \
    \  o  Every payload manifest MUST list every payload file name exactly\n     \
    \ once.\n   o  A payload manifest file MUST have a name of the form \"manifest-\n\
    \      _algorithm_.txt\", where _algorithm_ is a string specifying the\n     \
    \ checksum algorithm used by that manifest as described in\n      Section 2.4.\n\
    \   Example payload manifest filenames:\n   manifest-sha256.txt\n   manifest-sha512.txt\n\
    \   Each line of a payload manifest file MUST be of the form\n   checksum filepath\n\
    \   where _filepath_ is the pathname of a file relative to the base\n   directory,\
    \ and _checksum_ is a hex-encoded checksum calculated by\n   applying _algorithm_\
    \ over the file.\n   o  The hex-encoded checksum MAY use uppercase and/or lowercase\n\
    \      letters.\n   o  The slash character ('/') MUST be used as a path separator\
    \ in\n      _filepath_.\n   o  One or more linear whitespace characters (spaces\
    \ or tabs) MUST\n      separate _checksum_ from _filepath_.\n   o  There is no\
    \ limitation on the length of a pathname.\n   o  The payload manifest MUST NOT\
    \ reference files outside the payload\n      directory.\n   o  If a _filepath_\
    \ includes a Line Feed (LF), a Carriage Return (CR),\n      a Carriage-Return\
    \ Line Feed (CRLF), or a percent sign (%), those\n      characters (and only those)\
    \ MUST be percent-encoded following\n      [RFC3986].\n   A manifest MUST NOT\
    \ reference directories.  Bag creators who wish to\n   create an otherwise empty\
    \ directory have typically done so by\n   creating an empty placeholder file with\
    \ a name such as \".keep\".\n"
- title: 2.2.  Optional Elements
  contents:
  - '2.2.  Optional Elements

    '
- title: '2.2.1.  Tag Manifest: tagmanifest-algorithm.txt'
  contents:
  - "2.2.1.  Tag Manifest: tagmanifest-algorithm.txt\n   A tag manifest is a tag file\
    \ that lists other tag files and checksums\n   for those tag files generated using\
    \ a particular bag checksum\n   algorithm.\n   A bag MAY contain one or more tag\
    \ manifests, in which case each tag\n   manifest SHOULD list the same set of tag\
    \ files.\n   Each tag manifest MUST list every payload manifest.  Each tag\n \
    \  manifest MUST NOT list any tag manifests but SHOULD list the\n   remaining\
    \ tag files present in the bag.\n   A tag manifest file MUST have a name of the\
    \ form \"tagmanifest-\n   _algorithm_.txt\", where _algorithm_ is a string following\
    \ the format\n   described in Section 2.4 that specifies the bag checksum algorithm\n\
    \   used in that manifest.\n   Tag manifests SHOULD use the same algorithms as\
    \ the payload manifests\n   that are present in the bag.\n   Example tag manifest\
    \ filenames:\n   tagmanifest-sha256.txt\n   tagmanifest-sha512.txt\n   A tag manifest\
    \ file has the same form as the payload manifest file\n   described in Section\
    \ 2.1.3 but MUST NOT list any payload files.  As a\n   result, no _filepath_ listed\
    \ in a tag manifest begins \"data/\".\n"
- title: '2.2.2.  Bag Metadata: bag-info.txt'
  contents:
  - "2.2.2.  Bag Metadata: bag-info.txt\n   The \"bag-info.txt\" file is a tag file\
    \ that contains metadata elements\n   describing the bag and the payload.  The\
    \ metadata elements contained\n   in the \"bag-info.txt\" file are intended primarily\
    \ for human use.  All\n   metadata elements are OPTIONAL and MAY be repeated.\
    \  Because \"bag-\n   info.txt\" is intended for human reading and editing, ordering\
    \ MAY be\n   significant and the ordering of metadata elements MUST be preserved.\n\
    \   A metadata element MUST consist of a label, a colon \":\", a single\n   linear\
    \ whitespace character (space or tab), and a value that is\n   terminated with\
    \ an LF, a CR, or a CRLF.\n   The label MUST NOT contain a colon (:), LF, or CR.\
    \  The label MAY\n   contain linear whitespace characters but MUST NOT start or\
    \ end with\n   whitespace.\n   It is RECOMMENDED that lines not exceed 79 characters\
    \ in length.\n   Long values MAY be continued onto the next line by inserting\
    \ a LF,\n   CR, or CRLF, and then indenting the next line with one or more linear\n\
    \   white space characters (spaces or tabs).  Except for linebreaks, such\n  \
    \ padding does not form part of the value.\n   Implementations wishing to support\
    \ previous BagIt versions MUST\n   accept multiple linear whitespace characters\
    \ before and after the\n   colon when the bag version is earlier than 1.0; such\
    \ whitespace does\n   not form part of the label or value.\n   The following are\
    \ reserved metadata elements.  The use of these\n   reserved metadata elements\
    \ is OPTIONAL but encouraged.  Reserved\n   metadata element names are case insensitive.\
    \  Except where indicated\n   otherwise, these metadata element names MAY be repeated\
    \ to capture\n   multiple values.\n   Source-Organization:  Organization transferring\
    \ the content.\n   Organization-Address:  Mailing address of the source organization.\n\
    \   Contact-Name:  Person at the source organization who is responsible\n    \
    \  for the content transfer.\n   Contact-Phone:  International format telephone\
    \ number of person or\n      position responsible.\n   Contact-Email:  Fully qualified\
    \ email address of person or position\n      responsible.\n   External-Description:\
    \  A brief explanation of the contents and\n      provenance.\n   Bagging-Date:\
    \  Date (YYYY-MM-DD) that the content was prepared for\n      transfer.  This\
    \ metadata element SHOULD NOT be repeated.\n   External-Identifier:  A sender-supplied\
    \ identifier for the bag.\n   Bag-Size:  The size or approximate size of the bag\
    \ being transferred,\n      followed by an abbreviation such as MB (megabytes),\
    \ GB\n      (gigabytes), or TB (terabytes): for example, 42600 MB, 42.6 GB, or\n\
    \      .043 TB.  Compared to Payload-Oxum (described next), Bag-Size is\n    \
    \  intended for human consumption.  This metadata element SHOULD NOT\n      be\
    \ repeated.\n   Payload-Oxum:  The \"octetstream sum\" of the payload, which is\n\
    \      intended for the purpose of quickly detecting incomplete bags\n      before\
    \ performing checksum validation.  This is strictly an\n      optimization, and\
    \ implementations MUST perform the standard\n      checksum validation process\
    \ before proclaiming a bag to be valid.\n      This element MUST NOT be present\
    \ more than once and, if present,\n      MUST be in the form \"_OctetCount_._StreamCount_\"\
    , where\n      _OctetCount_ is the total number of octets (8-bit bytes) across\n\
    \      all payload file content and _StreamCount_ is the total number of\n   \
    \   payload files.  This metadata element MUST NOT be repeated.\n   Bag-Group-Identifier:\
    \  A sender-supplied identifier for the set, if\n      any, of bags to which it\
    \ logically belongs.  This identifier\n      SHOULD be unique across the sender's\
    \ content, and if it is\n      recognizable as belonging to a globally unique\
    \ scheme, the\n      receiver SHOULD make an effort to honor the reference to\
    \ it.  This\n      metadata element SHOULD NOT be repeated.\n   Bag-Count:  Two\
    \ numbers separated by \"of\", in particular, \"N of T\",\n      where T is the\
    \ total number of bags in a group of bags and N is\n      the ordinal number within\
    \ the group.  If T is not known, specify\n      it as \"?\" (question mark): for\
    \ example, 1 of 2, 4 of 4, 3 of ?, 89\n      of 145.  This metadata element SHOULD\
    \ NOT be repeated.  If this\n      metadata element is present, it is RECOMMENDED\
    \ to also include the\n      Bag-Group-Identifier element.\n   Internal-Sender-Identifier:\
    \  An alternate sender-specific identifier\n      for the content and/or bag.\n\
    \   Internal-Sender-Description:  A sender-local explanation of the\n      contents\
    \ and provenance.\n   In addition to these metadata elements, other arbitrary\
    \ metadata\n   elements MAY also be present.\n   An example of \"bag-info.txt\"\
    \ file is as follows:\n   Source-Organization: FOO University\n   Organization-Address:\
    \ 1 Main St., Cupertino, California, 11111\n   Contact-Name: Jane Doe\n   Contact-Phone:\
    \ +1 111-111-1111\n   Contact-Email: example@example.com\n   External-Description:\
    \ Uncompressed greyscale TIFF images from the\n         FOO papers colle...\n\
    \   Bagging-Date: 2008-01-15\n   External-Identifier: university_foo_001\n   Payload-Oxum:\
    \ 279164409832.1198\n   Bag-Group-Identifier: university_foo\n   Bag-Count: 1\
    \ of 15\n   Internal-Sender-Identifier: /storage/images/foo\n   Internal-Sender-Description:\
    \ Uncompressed greyscale TIFFs created\n         from microfilm and are...\n"
- title: '2.2.3.  Fetch File: fetch.txt'
  contents:
  - "2.2.3.  Fetch File: fetch.txt\n   For reasons of efficiency, a bag MAY be sent\
    \ with a list of files to\n   be fetched and added to the payload before it can\
    \ meaningfully be\n   checked for completeness.  The fetch file allows a bag to\
    \ be\n   transmitted with \"holes\" in it, which can be practical for several\n\
    \   reasons.  For example, it obviates the need for the sender to stage a\n  \
    \ large serialized copy of the content while the bag is transferred to\n   the\
    \ receiver.  Also, this method allows a sender to construct a bag\n   from components\
    \ that are either a subset of logically related\n   components (e.g., the localized\
    \ logical object could be much larger\n   than what is intended for export) or\
    \ assembled from logically\n   distributed sources (e.g., the object components\
    \ for export are not\n   stored locally under one filesystem tree).  An OPTIONAL\
    \ tag file,\n   called the fetch file, contains such a list.\n   The fetch file\
    \ MUST be named \"fetch.txt\".  Every file listed in the\n   fetch file MUST be\
    \ listed in every payload manifest.  A fetch file\n   MUST NOT list any tag files.\n\
    \   Each line of a fetch file MUST be of the form\n   url length filepath\n  \
    \ where _url_ identifies the file to be fetched and MUST be an absolute\n   URI\
    \ as defined in [RFC3986], _length_ is the number of octets in the\n   file (or\
    \ \"-\", to leave it unspecified), and _filepath_ identifies the\n   corresponding\
    \ payload file, relative to the base directory.\n   The slash character ('/')\
    \ MUST be used as a path separator in\n   _filepath_. One or more linear whitespace\
    \ characters (spaces or tabs)\n   MUST separate these three values, and any such\
    \ characters in the\n   _url_ MUST be percent-encoded [RFC3986].  If _filename_\
    \ includes an\n   LF, a CR, a CRLF, or a percent sign (%), those characters (and\
    \ only\n   those) MUST be percent-encoded as described in [RFC3986].  There is\n\
    \   no limitation on the length of any of the fields in the fetch file.\n"
- title: 2.2.4.  Other Tag Files
  contents:
  - "2.2.4.  Other Tag Files\n   A bag MAY contain other tag files that are not defined\
    \ by this\n   document.  Implementations MUST perform standard checksum validation\n\
    \   on any tag file that is listed in a tag manifest but MUST otherwise\n   ignore\
    \ their contents.\n"
- title: 2.3.  Text Tag File Format
  contents:
  - "2.3.  Text Tag File Format\n   All tag files specifically described in this document\
    \ MUST adhere to\n   the text tag file format described below.  Other tag files\
    \ MAY adhere\n   to the text tag file format described below.\n   Text tag files\
    \ are line oriented, and each line MUST be terminated by\n   an LF, a CR, or a\
    \ CRLF.  It is RECOMMENDED that the last line in a\n   tag file also end with\
    \ LF, CR, or CRLF.  Text tag file names MUST end\n   in the extension \".txt\"\
    .\n   In all text tag files except for the bag declaration file, text MUST\n \
    \  use the character encoding specified in the \"bagit.txt\" bag\n   declaration\
    \ file.  Text tag files except for the bag declaration file\n   MAY include a\
    \ Byte Order Mark (BOM) only if the specified encoding\n   requires it for proper\
    \ decoding.  In accordance with [RFC3629], when\n   \"bagit.txt\" specifies UTF-8,\
    \ the tag files MUST NOT begin with a BOM.\n   See Section 2.1.1.\n   The use\
    \ of UTF-8 for text tag files is strongly RECOMMENDED.  A\n   future version of\
    \ BagIt may disallow encodings other than UTF-8.\n"
- title: 2.4.  Bag Checksum Algorithms
  contents:
  - "2.4.  Bag Checksum Algorithms\n   The payload manifest and tag manifest permit\
    \ validating the integrity\n   of the payload and tag files in a bag produced\
    \ by the checksum\n   algorithms.  Checksum values MUST be encoded so as to conform\
    \ to the\n   manifest format specified in Section 2.1.3.  However, the internal\n\
    \   details of a checksum are outside the scope of this document.\n   To avoid\
    \ future ambiguity, the checksum algorithm SHOULD be\n   registered in IANA's\
    \ \"Named Information Hash Algorithm Registry\"\n   [ni-registry] according to\
    \ [RFC6920] but MAY, for backwards\n   compatibility, also be MD5 [RFC1321] or\
    \ SHA-1 [RFC3174].\n   The name of the checksum algorithm MUST be normalized for\
    \ use in the\n   manifest's filename by lowercasing the common name of the algorithm\n\
    \   and removing all non-alphanumeric characters.  Following is a partial\n  \
    \ list that maps common algorithm names to normalized names:\n   o  MD5: md5\n\
    \   o  SHA-1: sha1\n   o  sha-256: sha256\n   o  sha-512: sha512\n   Starting\
    \ with BagIt 1.0, bag creation and validation tools MUST\n   support the SHA-256\
    \ and SHA-512 algorithms [RFC6234] and SHOULD\n   enable SHA-512 by default when\
    \ creating new bags.  For backwards\n   compatibility, implementers SHOULD support\
    \ MD5 [RFC1321] and SHA-1\n   [RFC3174].  Implementers are encouraged to simplify\
    \ the process of\n   adding additional manifests using new algorithms to streamline\
    \ the\n   process of in-place upgrades.\n"
- title: 3.  Complete and Valid Bags
  contents:
  - "3.  Complete and Valid Bags\n   A _complete_ bag MUST meet the following requirements:\n\
    \   1.  Every required element MUST be present (see Section 2.1).\n   2.  Every\
    \ file listed in every tag manifest MUST be present.\n   3.  Every file listed\
    \ in every payload manifest MUST be present.\n   4.  For BagIt 1.0, every payload\
    \ file MUST be listed in every payload\n       manifest.  Note that older versions\
    \ of BagIt allowed payload\n       files to be listed in just one of the manifests.\n\
    \   5.  Every element present MUST conform to BagIt 1.0.\n   A _valid_ bag MUST\
    \ meet the following requirements:\n   1.  The bag MUST be _complete_.\n   2.\
    \  Every checksum in every payload manifest and tag manifest has\n       been\
    \ successfully verified against the contents of the\n       corresponding file.\n"
- title: 4.  Examples
  contents:
  - '4.  Examples

    '
- title: 4.1.  Example of a Basic Bag
  contents:
  - "4.1.  Example of a Basic Bag\n   This is the layout of a basic bag containing\
    \ an image and a companion\n   Optical Character Recognition (OCR) file.  Lines\
    \ of file content are\n   shown with added parentheses to indicate each complete\
    \ line.  For\n   brevity, this example uses MD5 rather than the recommended SHA-512.\n\
    \   myfirstbag/\n   |\n   |   manifest-md5.txt\n   |    (49afbd86a1ca9f34b677a3f09655eae9\
    \ data/27613-h/images/q172.png)\n   |    (408ad21d50cef31da4df6d9ed81b01a7 data/27613-h/images/q172.txt)\n\
    \   |\n   |   bagit.txt\n   |    (BagIt-version: 1.0                         \
    \                  )\n   |    (Tag-File-Character-Encoding: UTF-8            \
    \               )\n   |\n   \\--- data/\n        |\n        |   27613-h/images/q172.png\n\
    \        |    (... image bytes ...                                     )\n   \
    \     |\n        |   27613-h/images/q172.txt\n        |    (... OCR text ... \
    \                                       )\n        ....\n"
- title: 4.2.  Example Bag Using fetch.txt
  contents:
  - "4.2.  Example Bag Using fetch.txt\n   This is the layout of a bag that expects\
    \ the receiver to download the\n   files listed in the payload manifests prior\
    \ to validation.  Lines of\n   file content are shown with added parentheses to\
    \ indicate each\n   complete line.  For brevity, this example uses MD5 rather\
    \ than the\n   recommended SHA-512.\n   highsmith-tahoe/\n   |\n   |   manifest-md5.txt\n\
    \   |    (102b0e6effe208ef9b29864946de9e22 data/23364a.tif             )\n   |\n\
    \   |    fetch.txt\n   |     (https://cdn.loc.gov/master/pnp/highsm/23300/23364a.tif\n\
    \   |         216951362 data/23364a.tif                                )\n   |\n\
    \   |   bagit.txt\n   |    (BagIt-version: 1.0                               \
    \            )\n   |    (Tag-File-Character-Encoding: UTF-8                  \
    \         )\n   |\n   |   bag-info.txt\n   |    (Internal-Sender-Description:\
    \ Download link found at          )\n   |    (  https://www.loc.gov/resource/highsm.23364/\
    \                 )\n"
- title: 5.  Security Considerations
  contents:
  - '5.  Security Considerations

    '
- title: 5.1.  Special Directory Characters
  contents:
  - "5.1.  Special Directory Characters\n   The paths specified in the payload manifests,\
    \ tag manifests, and\n   fetch files do not prohibit special directory characters\
    \ that have\n   special meaning on some operating systems.  Implementers MUST\
    \ ensure\n   that files outside the bag directory structure are not accessed when\n\
    \   reading or writing files based on paths specified in a bag.\n   All implementations\
    \ SHOULD have a test suite to guard against special\n   directory characters.\n\
    \   For example, a maliciously crafted \"tagmanifest-sha512.txt\" file\n   might\
    \ contain entries that begin with a path character such as \"/\",\n   \"..\",\
    \ or a \"~username\" home directory reference in an attempt to\n   cause a naive\
    \ implementation to leak or overwrite targeted files on a\n   POSIX operating\
    \ system.\n   Windows implementations SHOULD test their implementations to ensure\n\
    \   that safety checks prevent use of drive letters and the less commonly\n  \
    \ used namespace sequences (e.g., \"\\\\?\\C:\\...\") described in [MSFNAM].\n\
    \   To assist implementers, the Library of Congress conformance suite\n   [LC-CONFORMANCE-SUITE]\
    \ has some tests for invalid bags that are\n   expected to fail on POSIX or Windows\
    \ clients.\n"
- title: 5.2.  Control of URLs in fetch.txt
  contents:
  - "5.2.  Control of URLs in fetch.txt\n   Implementers of tools that complete bags\
    \ by retrieving URLs listed in\n   a fetch file need to be aware that some of\
    \ those URLs might point to\n   hosts, intentionally or unintentionally, that\
    \ are not under control\n   of the bag's sender.  Moreover, older checksum algorithms,\
    \ even if\n   reasonable for detecting corruption during transit, may not offer\n\
    \   strong cryptographic protection against intentional spoofing.\n"
- title: 5.3.  File Sizes in fetch.txt
  contents:
  - "5.3.  File Sizes in fetch.txt\n   The size of files, as optionally reported in\
    \ the fetch file, cannot\n   be guaranteed to match the actual file size to be\
    \ downloaded.\n   Implementers SHOULD take steps to monitor and abort transfer\
    \ when the\n   received file size exceeds the file size reported in the fetch\
    \ file.\n   Implementers SHOULD NOT use the file size in the fetch file for\n\
    \   critical resource allocation, such as buffer sizing or storage\n   requisitioning.\n"
- title: 5.4.  Attacks on Payload File Content
  contents:
  - "5.4.  Attacks on Payload File Content\n   The integrity assurance provided by\
    \ manifests is designed to provide\n   high levels of confidence against data\
    \ corruption but is not designed\n   to be secure against active attacks.  Organizations\
    \ that need to\n   secure bags against such threats SHOULD agree on additional\
    \ measures,\n   such as digital signatures, that are out of scope for this\n \
    \  specification.\n"
- title: 6.  Practical Considerations (Non-normative)
  contents:
  - '6.  Practical Considerations (Non-normative)

    '
- title: 6.1.  Interoperability
  contents:
  - "6.1.  Interoperability\n   This section lists practical considerations for implementers\
    \ and\n   users.  None of the points below are required, but they are\n   recommended\
    \ for general-purpose usage.\n   Upon discovering errors in bags, an implementation\
    \ is free to take\n   action (for example, logging or reporting) in an application-specific\n\
    \   manner.  This document does not mandate any particular action.\n   The Library\
    \ of Congress conformance suite [LC-CONFORMANCE-SUITE] is\n   provided as a public\
    \ resource to test new implementations for\n   compatibility and error handling.\n"
- title: 6.1.1.  Filename Normalization
  contents:
  - "6.1.1.  Filename Normalization\n   This section provides background information\
    \ on various challenges\n   caused by differences in how operating systems, filesystems,\
    \ and\n   common tools handle filenames.  This section is followed by a list of\n\
    \   recommendations for implementers in Section 6.1.1.3.\n"
- title: 6.1.1.1.  Case Sensitivity
  contents:
  - "6.1.1.1.  Case Sensitivity\n   There are three challenges for interoperability\
    \ related to filename\n   case:\n   o  Filesystems such as File Allocation Table\
    \ (FAT) or Extended File\n      Allocation Table (EXFAT) always convert filenames\
    \ to uppercase:\n      \"example.txt\" will be stored as \"EXAMPLE.TXT\".\n  \
    \ o  Many Unix filesystems save filenames exactly as provided, which\n      allows\
    \ multiple files that differ only in case: \"example.txt\" and\n      \"Example.txt\"\
    \ are separate files.\n   o  New Technology File System (NTFS) and Apple's Hierarchical\
    \ File\n      System (HFS) Plus usually preserve case when storing files but are\n\
    \      case insensitive when retrieving them.  A file saved as\n      \"Example.txt\"\
    \ will be retrieved by that name but will also be\n      retrieved as \"EXAMPLE.TXT\"\
    , \"example.txt\", etc.\n"
- title: 6.1.1.2.  Unicode Normalization
  contents:
  - "6.1.1.2.  Unicode Normalization\n   The Unicode specification has common cases\
    \ where different character\n   sequences produce the same human-meaningful text.\
    \  These are referred\n   to as \"canonically equivalent\" and the Unicode specification\
    \ defines\n   different normalization forms - see [UNICODE-TR15] for the full\n\
    \   details.\n   The example below shows the common surname \"Nunez\" normalized\
    \ in\n   different forms.\n   Normalization Form D (Decomposition)\n   Char  \
    \    UTF8 Hex  Name\n   ----------------------------------------------\n   N \
    \              4e  LATIN CAPITAL LETTER N\n   u               75  LATIN SMALL\
    \ LETTER U\n   \\u0301        cc81  COMBINING ACUTE ACCENT\n   n             \
    \  6e  LATIN SMALL LETTER N\n   \\u0303        cc83  COMBINING TILDE\n   e   \
    \            65  LATIN SMALL LETTER E\n   z               7a  LATIN SMALL LETTER\
    \ Z\n   Normalization Form C (Canonical Composition)\n   Char      UTF8 Hex  Name\n\
    \   ----------------------------------------------\n   N               4e  LATIN\
    \ CAPITAL LETTER N\n   u             c3ba  LATIN SMALL LETTER U WITH ACUTE\n \
    \  n             c3b1  LATIN SMALL LETTER N WITH TILDE\n   e               65\
    \  LATIN SMALL LETTER E\n   z               7a  LATIN SMALL LETTER Z\n   Unicode\
    \ normalization is relevant to BagIt implementors because\n   different systems\
    \ have different standards for normalization:\n   o  Apple's HFS Plus filesystem\
    \ always normalizes filenames to a fully\n      decomposed form based on the Unicode\
    \ 2.0 specification (see\n      [TN1150]).\n   o  Windows treats filenames as\
    \ opaque character sequences (see\n      [MSFNAM]) and will store and return the\
    \ encoded bytes exactly as\n      provided.\n   o  Linux and other common Unix\
    \ systems are generally similar to\n      Windows in storing and returning opaque\
    \ byte streams, but this\n      behavior is technically dependent on the filesystem.\n\
    \   o  Utilities used for file management, transfer, and archiving may\n     \
    \ ignore this issue, apply an arbitrary normalization form, or allow\n      the\
    \ user to control how normalization is applied.\n   In practice, this means that\
    \ the encoded filename stored in a\n   manifest may fail a simple file existence\
    \ check because the\n   filename's normalization was changed at some point after\
    \ the manifest\n   was written.  This situation is very confusing for users because\
    \ the\n   filenames are visually indistinguishable, and the \"missing\" file is\n\
    \   obviously present in the payload directory.\n"
- title: 6.1.1.3.  Recommendations
  contents:
  - "6.1.1.3.  Recommendations\n   o  Implementations SHOULD discourage the creation\
    \ of bags containing\n      files that differ only in case.\n   o  Implementations\
    \ SHOULD prevent the creation of bags containing\n      files that differ only\
    \ in normalization form.\n   o  BagIt implementations SHOULD tolerate differences\
    \ in normalization\n      form by comparing both the list of filesystem and manifest\
    \ names\n      after applying the same normalization form to both.\n   o  Implementations\
    \ SHOULD issue a warning when multiple manifests are\n      present that differ\
    \ only in case or normalization form.\n"
- title: 6.1.2.  Windows and Unix File Naming
  contents:
  - "6.1.2.  Windows and Unix File Naming\n   As specified above, only the Unix-based\
    \ path separator ('/') may be\n   used inside filenames listed in BagIt manifest\
    \ and fetch.txt files.\n   When bags are exchanged between Windows and Unix platforms,\
    \ the path\n   separator SHOULD be translated as needed.  Receivers of bags on\n\
    \   physical media SHOULD be prepared for filesystems created under\n   either\
    \ Windows or Unix.  Besides the fundamental difference between\n   path separators\
    \ ('\\' and '/'), generally, Windows filesystems have\n   more limitations than\
    \ Unix filesystems.\n   Windows path names have a maximum of 255 characters, and\
    \ none of\n   these characters may be used in a path component:\n       < > :\
    \ \" / | ? *\n   Windows also reserves the following names, with or without a\
    \ file\n   extension:\n       CON, PRN, AUX, NUL\n       COM1, COM2, COM3, COM4,\
    \ COM5, COM6, COM7, COM8, COM9\n       LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7,\
    \ LPT8, LPT9\n   See [MSFNAM] for more information and possible alternatives.\n"
- title: 6.1.3.  Legacy Checksum Tools
  contents:
  - "6.1.3.  Legacy Checksum Tools\n   Some bags have been manually assembled using\
    \ checksum utilities such\n   as those contained in the GNU Coreutils package\
    \ (md5sum, sha1sum,\n   etc.), collectively referred to here as \"md5sum\".  Implementers\
    \ who\n   desire wide support of legacy content should be aware of some known\n\
    \   quirks of these tools.\n   md5sum can be run in \"text mode\", which causes\
    \ it to normalize line\n   endings on some operating systems.  On Unix-like systems,\
    \ both modes\n   will usually produce the same results; on systems like Windows,\
    \ they\n   can produce different results based on the file contents.  The md5sum\n\
    \   output format has two characters between the checksum and the\n   filepath:\
    \ the first is always a space, and the second is an asterisk\n   (\"*\") for binary\
    \ mode and a space for text mode.\n   A final note about md5sum-generated manifests\
    \ is that, for a\n   _filepath_ containing a backslash ('\\'), the manifest line\
    \ will have\n   a backslash inserted in front of the _checksum_ and, under Windows,\n\
    \   the backslashes inside _filepath_ can be doubled.\n   Implementers MAY wish\
    \ to accept this format by ignoring a leading\n   asterisk or handling differences\
    \ in line termination gracefully but,\n   if so, implementations MUST warn the\
    \ user that the bag in question\n   will fail strict validation.  In such cases,\
    \ it is RECOMMENDED that\n   tools provide an easy option to update the bag with\
    \ valid manifests.\n"
- title: 7.  Augmented Backus-Naur Form (Non-normative)
  contents:
  - "7.  Augmented Backus-Naur Form (Non-normative)\n   The Augmented Backus-Naur\
    \ Form (ABNF) rules provided below are non-\n   normative.  If there is a discrepancy\
    \ between requirements in the\n   normative sections and the ABNF, the requirements\
    \ in the normative\n   sections prevail.  Some definitions use the core rules\
    \ (e.g., DIGIT,\n   HEXDIG, etc) as defined in [RFC5234].\n"
- title: '7.1.  Bag Declaration: bagit.txt'
  contents:
  - "7.1.  Bag Declaration: bagit.txt\n   bagit.txt ABNF rules:\n   bagit-txt = \"\
    BagIt-Version: \" 1*DIGIT \".\" 1*DIGIT ending\n               \"Tag-File-Character-Encoding:\
    \ \" encoding ending\n   encoding  = 1*CHAR\n   ending    = CR / LF / CRLF\n"
- title: '7.2.  Payload Manifest: manifest-algorithm.txt'
  contents:
  - "7.2.  Payload Manifest: manifest-algorithm.txt\n   Payload Manifest ABNF rules:\n\
    \   payload-manifest      = 1*payload-manifest-line\n   payload-manifest-line\
    \ = checksum 1*WSP filepath ending\n   checksum              = 1*case-hexdig\n\
    \   case-hexdig           = DIGIT / \"A\" / \"a\" / \"B\" / \"b\" / \"C\" / \"\
    c\" /\n                           \"D\" / \"d\" / \"E\"/ \"e\"/ \"F\" / \"f\"\n\
    \   filepath              = \"data/\"\n                           1*( unreserved\
    \ / pct-encoded / sub-delims )\n   unreserved            = ALPHA / DIGIT / \"\
    -\" / \".\" / \"_\" / \"~\"\n   sub-delims            = \"!\" / \"$\" / \"&\"\
    \ / DQUOTE / \"'\" / \"(\" / \")\" /\n                           \"*\" / \"+\"\
    \ / \",\" / \";\" / \"=\" / \"/\"\n   pct-encoded           = \"%0D\" / \"%0d\"\
    \ / \"%0A\" / \"%0a\" / \"%25\"\n   ending                = CR / LF / CRLF\n"
- title: '7.3.  Bag Metadata: bag-info.txt'
  contents:
  - "7.3.  Bag Metadata: bag-info.txt\n   bag-info.txt ABNF rules:\n   metadata  \
    \    = 1*metadata-line\n   metadata-line = key \":\" WSP value ending *(continuation\
    \ ending)\n   key           = 1*non-reserved\n   value         = 1*non-reserved\n\
    \   continuation  = WSP 1*non-reserved\n   non-reserved  = VCHAR / WSP\n     \
    \              ; any valid character for the specific encoding\n             \
    \      ; except those that match \"ending\"\n   ending        = CR / LF / CRLF\n"
- title: '7.4.  Fetch File: fetch.txt'
  contents:
  - "7.4.  Fetch File: fetch.txt\n   fetch.txt ABNF rules:\n   fetch      = 1*fetch-line\n\
    \   fetch-line = url 1*WSP length 1*WSP filepath ending\n   url        = <absolute-URI,\
    \ see [RFC3986], Section 4.3>\n   length     = 1*DIGIT / \"-\"\n   filepath  \
    \ = (\"data/\"\n                 1*( unreserved / pct-encoded / sub-delims ))\n\
    \   ending     = CR / LF / CRLF\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [cs-registry]\n              IANA, \"Character\
    \ Set\",\n              <https://www.iana.org/assignments/character-sets>.\n \
    \  [ni-registry]\n              IANA, \"Named Information Hash Algorithm\",\n\
    \              <https://www.iana.org/assignments/named-information>.\n   [RFC1321]\
    \  Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC 1321,\n             \
    \ DOI 10.17487/RFC1321, April 1992,\n              <https://www.rfc-editor.org/info/rfc1321>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3174]\
    \  Eastlake 3rd, D. and P. Jones, \"US Secure Hash Algorithm 1\n             \
    \ (SHA1)\", RFC 3174, DOI 10.17487/RFC3174, September 2001,\n              <https://www.rfc-editor.org/info/rfc3174>.\n\
    \   [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n        \
    \      10646\", STD 63, RFC 3629, DOI 10.17487/RFC3629, November\n           \
    \   2003, <https://www.rfc-editor.org/info/rfc3629>.\n   [RFC3986]  Berners-Lee,\
    \ T., Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier\
    \ (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,\
    \ January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n  \
    \ [RFC6234]  Eastlake 3rd, D. and T. Hansen, \"US Secure Hash Algorithms\n   \
    \           (SHA and SHA-based HMAC and HKDF)\", RFC 6234,\n              DOI\
    \ 10.17487/RFC6234, May 2011,\n              <https://www.rfc-editor.org/info/rfc6234>.\n\
    \   [RFC6920]  Farrell, S., Kutscher, D., Dannewitz, C., Ohlman, B.,\n       \
    \       Keranen, A., and P. Hallam-Baker, \"Naming Things with\n             \
    \ Hashes\", RFC 6920, DOI 10.17487/RFC6920, April 2013,\n              <https://www.rfc-editor.org/info/rfc6920>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [ENCDEP]   Tabata, K., Okada, T., Nagamori,\
    \ M., Sakaguchi, T., and S.\n              Sugimoto, \"A Collaboration Model between\
    \ Archival Systems\n              to Enhance the Reliability of Preservation by\
    \ an Enclose-\n              and-Deposit Method\", 2005,\n              <https://web.archive.org/web/20060508015635/\n\
    \              http://www.iwaw.net/05/papers/iwaw05-tabata.pdf>.\n   [LC-CONFORMANCE-SUITE]\n\
    \              The Library of Congress, \"Test cases for validating Bagit\n  \
    \            Implementations\", commit 43bcbdf, November 2017,\n             \
    \ <https://github.com/LibraryOfCongress/\n              bagit-conformance-suite/>.\n\
    \   [MSFNAM]   Microsoft, Inc., \"Naming Files, Paths, and Namespaces\",\n   \
    \           May 2018,\n              <http://msdn2.microsoft.com/en-us/library/aa365247.aspx>.\n\
    \   [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n \
    \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <https://www.rfc-editor.org/info/rfc5234>.\n  \
    \ [TN1150]   Apple Inc., \"Technical Note TN1150: HFS Plus Volume\n          \
    \    Format\", March 2004, <https://developer.apple.com/legacy/\n            \
    \  library/technotes/tn/tn1150.html>.\n   [UNICODE-TR15]\n              Unicode\
    \ Consortium, \"Unicode Standard Annex #15: Unicode\n              Normalization\
    \ Forms\", Technical Report, Unicode 11.0.0,\n              May 2018, <http://www.unicode.org/reports/tr15/>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   BagIt benefitted from the thoughtful assistance of Stephen\
    \ Abrams,\n   Mike Ashenfelder, Dan Chudnov, Dave Crocker, Scott Fisher, Brad\n\
    \   Hards, Erik Hetzner, Keith Johnson, Leslie Johnston, David Loy, Mark\n   Phillips,\
    \ Tracy Seneca, Stian Soiland-Reyes, Brian Tingle, Adam\n   Turoff, and Jim Tuttle.\n"
- title: Contributors
  contents:
  - "Contributors\n   Additional contributors to the authoring of BagIt are Andy Boyko,\n\
    \   David Brunton, Rosie Storey, Ed Summers, Brian Vargas, and Kate\n   Zwaard.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   John A. Kunze\n   California Digital Library\n   415 20th\
    \ St, 4th Floor\n   Oakland, CA  94612\n   United States of America\n   Email:\
    \ jak@ucop.edu\n   Justin Littman\n   Stanford Libraries\n   518 Memorial Way\n\
    \   Stanford, CA  94305\n   United States of America\n   Email: justinlittman@stanford.edu\n\
    \   Liz Madden\n   Library of Congress\n   101 Independence Avenue SE\n   Washington,\
    \ DC  20540\n   United States of America\n   Email: emad@loc.gov\n   John Scancella\n\
    \   Email: john.scancella@gmail.com\n   Chris Adams\n   Library of Congress\n\
    \   101 Independence Avenue SE\n   Washington, DC  20540\n   United States of\
    \ America\n   Email: cadams@loc.gov\n"
