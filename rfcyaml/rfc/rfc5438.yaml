- contents:
  - '            Instant Message Disposition Notification (IMDN)

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    (http://trustee.ietf.org/\n   license-info) in effect on the date of publication
    of this document.\n   Please review these documents carefully, as they describe
    your rights\n   and restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   Instant Messaging (IM) refers to the transfer of messages between\n
    \  users in real-time.  This document provides a mechanism whereby\n   endpoints
    can request Instant Message Disposition Notifications\n   (IMDN), including delivery,
    processing, and display notifications,\n   for page-mode instant messages.\n   The
    Common Presence and Instant Messaging (CPIM) data format\n   specified in RFC
    3862 is extended with new header fields that enable\n   endpoints to request IMDNs.
    \ A new message format is also defined to\n   convey IMDNs.\n   This document
    also describes how SIP entities behave using this\n   extension.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Conventions .....................................................4\n   3.
    Terminology .....................................................4\n   4. Overview
    ........................................................5\n   5. Disposition Types
    ...............................................6\n      5.1. Delivery ...................................................6\n
    \     5.2. Processing .................................................6\n      5.3.
    Display ....................................................7\n   6. New CPIM
    Header Fields ..........................................7\n      6.1. CPIM Header
    Field Namespace ................................7\n      6.2. Disposition-Notification
    ...................................8\n      6.3. Message-ID .................................................8\n
    \     6.4. Original-To ................................................8\n      6.5.
    IMDN-Record-Route ..........................................9\n      6.6. IMDN-Route
    .................................................9\n   7. Endpoint Behaviour ..............................................9\n
    \     7.1. IM Sender ..................................................9\n           7.1.1.
    Constructing Instant Messages .......................9\n           7.1.2. Matching
    IMs with IMDNs ............................11\n           7.1.3. Keeping State
    ......................................11\n           7.1.4. Aggregation of IMDNs
    ...............................12\n      7.2. IM Recipient ..............................................12\n
    \          7.2.1. Constructing IMDNs .................................12\n   8.
    Intermediary Behaviour .........................................15\n      8.1.
    Constructing Processing Notifications .....................16\n      8.2. Constructing
    Delivery Notifications .......................17\n      8.3. Aggregation of IMDNs
    ......................................17\n   9. Identifying Messages ...........................................19\n
    \  10. Header Fields Formal Syntax ...................................20\n   11.
    IMDN Format ...................................................20\n      11.1.
    Structure of an XML-Encoded IMDN Payload .................20\n           11.1.1.
    The <message-id> Element ..........................21\n           11.1.2. The
    <datetime> Element ............................22\n           11.1.3. The <recipient-uri>
    Element .......................22\n           11.1.4. The <original-recipient-uri>
    Element ..............22\n           11.1.5. The <subject> Element .............................22\n
    \          11.1.6. The <delivery-notification>,\n                   <processing-notification>,
    and\n                   <display-notification> Elements ...................22\n
    \          11.1.7. The <status> Element ..............................22\n           11.1.8.
    MIME Type for IMDN Payload ........................23\n           11.1.9. The
    RelaxNG Schema ................................23\n   12. Transporting Messages
    Using SIP ...............................27\n      12.1. Endpoint Behaviour .......................................27\n
    \          12.1.1. Sending Requests ..................................27\n           12.1.2.
    Sending Responses .................................27\n           12.1.3. Receiving
    Requests ................................27\n      12.2. Intermediary Behaviour
    ...................................29\n   13. Transporting Messages using MSRP
    ..............................30\n   14. Security Considerations .......................................30\n
    \     14.1. Forgery ..................................................33\n      14.2.
    Confidentiality ..........................................33\n      14.3. IMDN
    as a Certified Delivery Service .....................34\n   15. IANA Considerations
    ...........................................34\n      15.1. message/imdn+xml MIME
    TYPE ...............................34\n      15.2. XML Registration .........................................35\n
    \     15.3. URN Registration for IMDN Header Parameters ..............35\n      15.4.
    Content-Disposition: notification ........................36\n   16. Acknowledgements
    ..............................................36\n   17. References ....................................................37\n
    \     17.1. Normative References .....................................37\n      17.2.
    Informative References ...................................37\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   In many user-to-user message exchange systems, message senders
    often\n   wish to know if the human recipient actually received a message or\n
    \  has the message displayed.\n   Electronic mail [RFC5321] offers a solution
    to this need with Message\n   Disposition Notifications [RFC3798].  After the
    recipient views the\n   message, her mail user agent generates a Message Disposition\n
    \  Notification, or MDN.  The MDN is an email that follows the format\n   prescribed
    by RFC 3798 [RFC3798].  The fixed format ensures that an\n   automaton can process
    the message.\n   The Common Presence and Instant Messaging (CPIM) format, Message/CPIM\n
    \  [RFC3862], is a message format used to generate instant messages.\n   The Session
    Initiation Protocol (SIP [RFC3261]) can carry instant\n   messages generated using
    message/CPIM in SIP MESSAGE requests\n   [RFC3428].\n   This document extends
    the Message/CPIM message format in much the\n   same way Message Disposition Notifications
    extends electronic mail.\n   This extension enables Instant Message Senders to
    request, create,\n   and send Instant Message Disposition Notifications (IMDN).
    \ This\n   mechanism works for page-mode as well as session-mode instant\n   messages.
    \ This document only discusses page-mode.  Session-mode is\n   left for future
    standardisation efforts.\n   This specification defines three categories of disposition
    types:\n   \"delivery\", \"processing\", and \"display\".  Specific disposition
    types\n   provide more detailed information.  For example, the \"delivery\"\n
    \  category includes \"delivered\" to indicate successful delivery and\n   \"failed\"
    to indicate failure in delivery.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n
    \  This document refers generically to the sender of a message in the\n   masculine
    (he/him/his) and the recipient of the message in the\n   feminine (she/her/hers).
    \ This convention is purely for convenience\n   and makes no assumption about
    the gender of a message sender or\n   recipient.\n"
  title: 2.  Conventions
- contents:
  - "3.  Terminology\n   o  IM: An Instant Message generated using the Message/CPIM
    format.\n   o  IMDN: An Instant Message Disposition Notification generated using\n
    \     the Message/CPIM format that carries an IMDN XML document.\n   o  Message:
    An IM or an IMDN generated using the Message/CPIM format.\n   o  IM Sender: An
    endpoint (user agent) generating and sending an IM.\n      Also, the endpoint
    request IMDNs for an IM.  Quite often, the IM\n      Sender is the IMDN Recipient.
    \ However, that is not always the\n      case, since the IMDN uses the From header
    in the CPIM message.\n      That value is often the IM Sender's Address of Record
    (AOR).  This\n      address may in fact resolve to different user agents.\n   o
    \ IM Recipient: An endpoint (user agent) that receives IMs.  The IM\n      Recipient,
    as the node that presumably renders the IM to the user,\n      generates and sends
    delivery IMDNs to IMs, if requested by the IM\n      Sender and allowed by the
    IM Recipient.\n   o  Endpoint: An IM Sender or an IM Recipient.\n   o  Intermediary:
    An entity in the network, most often an application\n      server (including URI-List
    and store-and-forward servers), that\n      forwards an IM to its final destination.
    \ Intermediaries also can\n      generate and send processing IMDNs to IMs, if
    requested by the IM\n      Sender and allowed by policy.\n   o  Gateway: An intermediary
    that translates between different IM\n      systems that use different protocols.\n
    \  o  IMDN payload: An XML document carrying the disposition\n      notification
    information.  In this specification, it is of MIME\n      type \"message/imdn+xml\".\n
    \  o  Disposition type: This specification defines three categories of\n      disposition
    types: \"delivery\", \"processing\", and \"display\".\n   o  Transport Protocol
    Message: A SIP or other protocol message that\n      contains an IM or IMDN.\n"
  title: 3.  Terminology
- contents:
  - "4.  Overview\n   The diagram below shows the basic protocol flow.  An IM Sender\n
    \  creates an IM, adds IMDN request information that the IM Sender is\n   interested
    in receiving, and then sends the IM.  At a certain point\n   in time, the IM Recipient
    or an intermediary determines that the user\n   or application has received, did
    not receive, displayed, or otherwise\n   disposed of the IM.  The mechanism by
    which an IM Recipient\n   determines its user has read an IM is beyond the scope
    of this\n   document.  At that point, the IM Recipient or intermediary\n   automatically
    generates a notification message to the IM Sender.\n   This notification message
    is the Instant Message Disposition\n   Notification (IMDN).\n      +--------------+
    \                       +--------------+\n      |  IM Sender   |                        |
    IM Recipient |\n      |IMDN Recipient|                        | IMDN Sender  |\n
    \     +--------------+                        +--------------+\n              |
    \                                      |\n              |                                       |\n
    \             |         1. IM requesting IMDN         |\n              |-------------------------------------->|\n
    \             |                                       |\n              |                                       |\n
    \             |         2. IMDN (disposition)         |\n              |<--------------------------------------|\n
    \             |                                       |\n              |                                       |\n
    \                       Basic IMDN Message Flow\n   Note the recipient of an IMDN,
    in some instances, may not be the IM\n   Sender.  This is specifically true for
    page-mode IMs where the\n   Address of Record (AOR) of the IM Sender, which is
    present in the IM,\n   resolves to a different location or user agent than that
    from which\n   the IM originated.  This could happen, for example, if resolving
    the\n   AOR results in forking the request to multiple user agents.  For\n   simplicity,
    the rest of this document assumes that the IM Sender and\n   the IMDN Recipient
    are the same and therefore will refer to both as\n   the IM Sender.\n"
  title: 4.  Overview
- contents:
  - "5.  Disposition Types\n   There are three broad categories of disposition states.
    \ They are\n   delivery, processing, and display.\n"
  - contents:
    - "5.1.  Delivery\n   The delivery notification type indicates whether or not
      the IM has\n   been delivered to the IM Recipient.  The delivery notification
      type\n   can have the following states:\n   o  \"delivered\" to indicate successful
      delivery.\n   o  \"failed\" to indicate failure in delivery.\n   o  \"forbidden\"
      to indicate denial for the IM Sender to receive the\n      requested IMDN.  The
      IM Recipient can send the \"forbidden\" state,\n      but usually it is an intermediary
      that sends the message, if one\n      configures it to do so.  For example,
      it is possible the\n      administrator has disallowed IMDNs.\n   o  \"error\"
      to indicate an error in determining the fate of an IM.\n"
    title: 5.1.  Delivery
  - contents:
    - "5.2.  Processing\n   The processing notification type indicates that an intermediary
      has\n   processed an IM.  The processing notification type can have the\n   following
      states:\n   o  \"processed\" to indicate that the intermediary has performed
      its\n      task on the IM.  This is a general state of the IM.\n   o  \"stored\"
      to indicate that the intermediary stored the IM for later\n      delivery.\n
      \  o  \"forbidden\" to indicate denial for the IM Sender to receive the\n      requested
      IMDN.  The \"forbidden\" state is sent by an intermediary\n      that is configured
      to do so.  For example, the administrator has\n      disallowed IMDNs.\n   o
      \ \"error\" to indicate an error in determining the fate of an IM.\n"
    title: 5.2.  Processing
  - contents:
    - "5.3.  Display\n   The display notification type indicates whether or not the
      IM\n   Recipient rendered the IM to the user.  The display notification type\n
      \  can have the following states:\n   o  \"displayed\" to indicate that the
      IM has been rendered to the user.\n   o  \"forbidden\" to indicate denial, by
      the IM Recipient, for the IM\n      Sender to receive the requested IMDN.\n
      \  o  \"error\" to indicate an error in determining the fate of an IM.\n   In
      addition to text, some IMs may contain audio, video, and still\n   images.  Therefore,
      the state \"displayed\" includes the start of\n   rendering the audio or video
      file to the user.\n   Since there is no positive acknowledgement from the user,
      one cannot\n   determine if the user actually read the IM.  Thus, one cannot
      use the\n   protocol described here as a service to prove someone actually read\n
      \  the IM.\n"
    title: 5.3.  Display
  title: 5.  Disposition Types
- contents:
  - "6.  New CPIM Header Fields\n   This specification extends the CPIM data format
    specified in RFC 3862\n   [RFC3862].  A new namespace is created as well as a
    number of new\n   CPIM header fields.\n"
  - contents:
    - "6.1.  CPIM Header Field Namespace\n   Per CPIM [RFC3862], this specification
      defines a new namespace for\n   the CPIM extension header fields defined in
      the following sections.\n   The namespace is:\n   urn:ietf:params:imdn\n   As
      per CPIM [RFC3862] requirements, the new header fields defined in\n   the following
      sections are prepended, in CPIM messages, by a prefix\n   assigned to the URN
      through the NS header field of the CPIM message.\n   The remainder of this specification
      always assumes an NS header field\n   like this one:\n   NS: imdn <urn:ietf:params:imdn>.\n
      \  Of course, clients are free to use any prefix while servers and\n   intermediaries
      must accept any legal namespace prefix specification.\n"
    title: 6.1.  CPIM Header Field Namespace
  - contents:
    - "6.2.  Disposition-Notification\n   The IM Sender MUST include the Disposition-Notification
      header field\n   to indicate the desire to receive IMDNs from the IM Recipient
      for\n   that specific IM.  Section 10 defines the syntax.\n"
    title: 6.2.  Disposition-Notification
  - contents:
    - "6.3.  Message-ID\n   The IM Sender MUST include the Message-ID header field
      in the IM for\n   which he wishes to receive an IMDN.  The Message-ID contains
      a\n   globally unique message identifier that the IM Sender can use to\n   correlate
      received IMDNs.  Because the Message-ID is used by the\n   sender to correlate
      IMDNs with their respective IMs, the Message-ID\n   MUST be selected so that:\n
      \  o  There is a minimal chance of any two Message-IDs accidentally\n      colliding
      during the time period within which an IMDN might be\n      received.\n   o
      \ It is prohibitive for an attacker who has seen one or more valid\n      Message-IDs
      to generate additional valid Message-IDs.\n   The first requirement is a correctness
      requirement to ensure correct\n   matching by the sender.  The second requirement
      prevents off-path\n   attackers from forging IMDNs.  In order to meet both of
      these\n   requirements, it is RECOMMENDED that Message-IDs be generated using
      a\n   cryptographically secure, pseudo-random number generator and contain\n
      \  at least 64 bits of randomness, thus reducing the chance of a\n   successful
      guessing attack to n/2^64, where n is the number of\n   outstanding valid messages.\n
      \  When the IM Sender receives an IMDN, it can compare its value with\n   the
      value of the <message-id> element present in the IMDN payload.\n   IMDNs also
      carry this header field.  Note that since the IMDN is\n   itself an IM, the
      Message-ID of the IMDN will be different than the\n   Message-ID of the original
      IM.  Section 10 defines the syntax.\n"
    title: 6.3.  Message-ID
  - contents:
    - "6.4.  Original-To\n   An intermediary MAY insert an Original-To header field
      into the IM.\n   The value of the Original-To field MUST be the address of the
      IM\n   Receiver.  The IM Recipient uses this header to indicate the original\n
      \  IM address in the IMDNs.  The IM Recipient does this by populating\n   the
      <original-recipient-uri> element in the IMDN.  The intermediary\n   MUST insert
      this header if the intermediary changes the CPIM To\n   header field value.
      \ The header field MUST NOT appear more than once\n   in an IM.  The intermediary
      MUST NOT change this header field value\n   if it is already present.  Section
      10 defines the syntax.\n"
    title: 6.4.  Original-To
  - contents:
    - "6.5.  IMDN-Record-Route\n   An intermediary MAY insert an IMDN-Record-Route
      header field to the\n   IM.  This enables the intermediary to receive and process
      the IMDN on\n   its way back to the IM Sender.  The value of the IMDN-Record-Route\n
      \  header field MUST be the address of the intermediary.  Multiple IMDN-\n   Record-Route
      header fields can appear in an IM.  Section 10 defines\n   the syntax.\n"
    title: 6.5.  IMDN-Record-Route
  - contents:
    - "6.6.  IMDN-Route\n   The IMDN-Route header field provides routing information
      by including\n   one or more addresses to which to route the IMDN.  An intermediary\n
      \  that needs the IMDN to flow back through the same intermediary MUST\n   add
      the IMDN-Record-Route header.  When the IM Recipient creates the\n   corresponding
      IMDN, the IM Recipient copies the IMDN-Record-Route\n   headers into corresponding
      IMDN-Route header fields.  Section 10\n   defines the syntax.\n"
    title: 6.6.  IMDN-Route
  title: 6.  New CPIM Header Fields
- contents:
  - '7.  Endpoint Behaviour

    '
  - contents:
    - '7.1.  IM Sender

      '
    - contents:
      - "7.1.1.  Constructing Instant Messages\n   An IM is constructed using the
        CPIM message format defined in RFC\n   3862 [RFC3862].\n"
      - contents:
        - "7.1.1.1.  Adding a Message-ID Header Field\n   If the IM Sender requests
          the reception of IMDNs, the IM Sender MUST\n   include a Message-ID header
          field.  This header field enables the IM\n   Sender to match any IMDNs with
          their corresponding IMs.  See\n   Section 6.3 for Message-ID uniqueness
          requirements.\n"
        title: 7.1.1.1.  Adding a Message-ID Header Field
      - contents:
        - "7.1.1.2.  Adding a DateTime Header Field\n   Some devices are not able
          to retain state over long periods.  For\n   example, mobile devices may
          have memory or battery limits.  Such\n   limits mean these devices may not
          be able to, or may choose not to,\n   keep sent messages for the purposes
          of correlating IMDNs with sent\n   IMs.  To make some use of IMDN in this
          case, we add a time stamp to\n   the IM to indicate when the user sent the
          message.  The IMDN returns\n   this time stamp to enable the user to correlate
          the IM with the IMDN\n   at the human level.  We use the DateTime CPIM header
          field for this\n   purpose.  Thus, if the IM Sender would like an IMDN,
          the IM Sender\n   MUST include the DateTime CPIM header field.\n"
        title: 7.1.1.2.  Adding a DateTime Header Field
      - contents:
        - "7.1.1.3.  Adding a Disposition-Notification Header Field\n   The Disposition-Notification
          conveys the type of disposition\n   notification requested by the IM Sender.
          \ There are three types of\n   disposition notification: delivery, processing,
          and display.  The\n   delivery notification is further subdivided into failure
          and success\n   delivery notifications.  An IM Sender requests failure delivery\n
          \  notification by including a Disposition-Notification header field\n   with
          value \"negative-delivery\".  Similarly, a success notification is\n   requested
          by including a Disposition-Notification header field with\n   value \"positive-delivery\".
          \ The IM Sender can request both types of\n   delivery notifications for
          the same IM.\n   The IM Sender can request a processing notification by
          including a\n   Disposition-Notification header field with value \"processing\".\n
          \  The IM Sender can also request a display notification.  The IM Sender\n
          \  MUST include a Disposition-Notification header field with the value\n
          \  \"display\" to request a display IMDN.\n   The absence of this header
          field or the presence of the header field\n   with an empty value indicates
          that the IM Sender is not requesting\n   any IMDNs.  Disposition-Notification
          header field values are comma-\n   separated.  The IM Sender MAY request
          more than one type of IMDN for\n   a single IM.\n   Future extensions may
          define other disposition notifications not\n   defined in this document.\n
          \  Section 10 describes the formal syntax for the Disposition-\n   Notification
          header field.  The following is an example CPIM body of\n   an IM where
          the IM Sender requests positive and negative delivery\n   notifications,
          but not display notification or processing\n   notifications:\n   From:
          Alice <im:alice@example.com>\n   To: Bob <im:bob@example.com>\n   NS: imdn
          <urn:ietf:params:imdn>\n   imdn.Message-ID: 34jk324j\n   DateTime: 2006-04-04T12:16:49-05:00\n
          \  imdn.Disposition-Notification: positive-delivery, negative-delivery\n
          \  Content-type: text/plain\n   Content-length: 12\n   Hello World\n"
        title: 7.1.1.3.  Adding a Disposition-Notification Header Field
      title: 7.1.1.  Constructing Instant Messages
    - contents:
      - "7.1.2.  Matching IMs with IMDNs\n   An IM Sender matches an IMDN to an IM
        by matching the Message-ID\n   header field value in the IM with the <message-id>
        element value in\n   the body of the IMDN.  If the IM was delivered to multiple\n
        \  recipients, the IM Sender uses the <recipient-uri> element and the\n   <original-recipient-uri>
        element in the XML body of the IMDN it\n   received to determine if the IM
        was sent to multiple recipients and\n   to identify the IM Recipient that
        sent the IMDN.\n   An IM Sender can determine an IMDN is a disposition notification
        by\n   noting if the Content-Disposition in the IMDN is \"notification\".\n
        \  This does mean the IM Sender MUST understand the Content-Disposition\n
        \  MIME header in CPIM messages.\n"
      title: 7.1.2.  Matching IMs with IMDNs
    - contents:
      - "7.1.3.  Keeping State\n   This specification does not mandate the IM Sender
        to keep state for a\n   sent IM.\n   Once an IM Sender sends an IM containing
        an IMDN request, it MAY\n   preserve the IM context (principally the Message-ID),
        other user-\n   identifiable information such as the IM subject or content,
        and the\n   date and time it was sent.  Without preservation of the IM context,\n
        \  the IM Sender will not be able to correlate the IMDN with the IM it\n   sent.
        \ The IM Sender may find it impossible to preserve IM state if\n   it has
        limited resources or does not have non-volatile memory and\n   then loses
        power.\n   There is, however, the concept of a \"Sent Items\" box in an\n
        \  application that stores sent IMs.  This \"Sent Items\" box has the\n   necessary
        information and may have a fancy user interface indicating\n   the state of
        a sent IM.  A unique Message-ID for this purpose proves\n   to be useful.
        \ The length of time for items to remain in the \"Sent\n   Items\" box is
        a user choice.  The user is usually free to keep or\n   delete items from
        the \"Sent Items\" box as she pleases or as the\n   memory on the device reaches
        capacity.\n   Clearly, if an IM Sender loses its sent items state (for example,
        the\n   user deletes items from the \"Sent Items\" box), the client may use
        a\n   different display strategy in response to apparently unsolicited\n   IMDNs.\n
        \  This specification also does not mandate an IM Sender to run any\n   timers
        waiting for an IMDN.  There are no time limits regarding when\n   IMDNs may
        be received.\n   IMDNs may legitimately never be received, so the time between
        the\n   sending of an IM and the generation and ultimate receipt of the IMDN\n
        \  may simply take a very long time.  Some clients may choose to purge\n   the
        state associated with the sent IM.  This is the reason for adding\n   the
        time stamp in the IM and having it returned in the IMDN.  This\n   gives the
        user some opportunity to remember what IM was sent.  For\n   example, if the
        IMDN indicates that the IM the user sent at 2 p.m.\n   last Thursday was delivered,
        the user has a chance to remember that\n   they sent an IM at 2 p.m. last
        Thursday.\n"
      title: 7.1.3.  Keeping State
    - contents:
      - "7.1.4.  Aggregation of IMDNs\n   An IM Sender may send an IM to multiple
        recipients in one Transport\n   Protocol Message (typically using a URI-List
        server [RFC5365]) and\n   request IMDNs.  An IM Sender that requested IMDNs
        MUST be prepared to\n   receive multiple aggregated or non-aggregated IMDNs.
        \ See Section 8.3\n   for details.\n"
      title: 7.1.4.  Aggregation of IMDNs
    title: 7.1.  IM Sender
  - contents:
    - '7.2.  IM Recipient

      '
    - contents:
      - "7.2.1.  Constructing IMDNs\n   IM Recipients examine the contents of the
        Disposition-Notification\n   header field of the CPIM message to determine
        if the recipient needs\n   to generate an IMDN for that IM.  Disposition-Notification
        header\n   fields of CPIM messages can include one or more values.  IM\n   Recipients
        may need to generate zero, one, or more IMDNs for that IM,\n   for example,
        a delivery notification as well as a display\n   notification.  In this case,
        the IM Recipient MUST be able to\n   construct multiple IMDNs per IM.  An
        IM Recipient MUST NOT construct\n   more than one IMDN per disposition type.
        \ That is, it must not\n   generate a delivery notification indicating \"delivered\"
        followed by a\n   delivery notification indicating \"failed\" for the same
        IM.  If the IM\n   Sender requested only failure notifications and the IM
        was\n   successfully delivered, then no IMDNs will be generated.  If the IM\n
        \  Recipient does not understand a value of the Disposition-Notification\n
        \  header field, the IM Recipient ignores that value.\n   The IM Recipient
        MUST NOT generate \"processing\" notifications.\n   A Disposition-Notification
        header field MUST NOT appear in an IMDN\n   since it is forbidden to request
        an IMDN for an IMDN.  An IM Sender\n   MUST ignore a delivery notification
        request in an IMDN if present.\n   The IM Sender MUST NOT send an IMDN for
        an IMDN.\n   An IMDN MUST contain a Message-ID header field.  The same rules
        of\n   uniqueness for the Message-ID header field that appears in an IM\n
        \  apply to an IMDN.  The Message-ID header field in the IMDN is\n   different
        and unrelated to the one in the IM.\n   An IM may contain an IMDN-Record-Route
        header field (see Section 8\n   for details).  If IMDN-Record-Route header
        fields appear in the IM,\n   the IM Recipient constructing the IMDN MUST copy
        the contents of the\n   IMDN-Record-Route header fields into IMDN-Route header
        fields in the\n   IMDN and maintain their order.  The IMDN is then sent to
        the URI in\n   the top IMDN-Route header field.  IMDN-Record-Route header
        fields do\n   not make sense in an IMDN and therefore MUST NOT be placed in
        an\n   IMDN.  IMDN Recipients MUST ignore it if present.\n   If there is no
        IMDN-Record-Route header field, the IM Recipient MUST\n   send the IMDN to
        the URI in the From header field.\n   As stated in CPIM [RFC3862], CPIM messages
        may need to support MIME\n   headers other than Content-type.  IM Recipients
        MUST insert a\n   Content-Disposition header field set to the value \"notification\".\n
        \  This indicates to the IM Sender that the message is an IMDN to an IM\n
        \  it has earlier sent.\n"
      - contents:
        - "7.2.1.1.  Constructing Delivery Notifications\n   The IM Recipient constructs
          a delivery notification in a similar\n   fashion as an IM, using a CPIM
          body [RFC3862] that carries a\n   Disposition Notification XML document
          formatted according to the\n   rules specified in Section 11.  The MIME
          type of the Disposition\n   Notification XML document is \"message/imdn+xml\".\n
          \  Section 10 defines the schema for an IMDN.\n   The following is an example
          CPIM body of an IMDN:\n   From: Bob <im:bob@example.com>\n   To: Alice <im:alice@example.com>\n
          \  NS: imdn <urn:ietf:params:imdn>\n   imdn.Message-ID: d834jied93rf\n   Content-type:
          message/imdn+xml\n   Content-Disposition: notification\n   Content-length:
          ...\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <imdn xmlns=\"urn:ietf:params:xml:ns:imdn\">\n
          \        <message-id>34jk324j</message-id>\n         <datetime>2008-04-04T12:16:49-05:00</datetime>\n
          \       <recipient-uri>im:bob@example.com</recipient-uri>\n         <original-recipient-uri\n
          \          >im:bob@example.com</original-recipient-uri>\n         <delivery-notification>\n
          \           <status>\n               <delivered/>\n            </status>\n
          \        </delivery-notification>\n       </imdn>\n"
        title: 7.2.1.1.  Constructing Delivery Notifications
      - contents:
        - "7.2.1.2.  Constructing Display Notifications\n   The IM Recipient constructs
          a display notification in a similar\n   fashion as the delivery notification.
          \ See Section 7.2.1.1 for\n   details.\n   Section 10 defines the schema
          for an IMDN.\n   The following is an example:\n   From: Bob <im:bob@example.com>\n
          \  To: Alice <im:alice@example.com>\n   NS: imdn <urn:ietf:params:imdn>\n
          \  imdn.Message-ID: dfjkleriou432333\n   Content-type: message/imdn+xml\n
          \  Content-Disposition: notification\n   Content-length: ...\n   <?xml version=\"1.0\"
          encoding=\"UTF-8\"?>\n   <imdn xmlns=\"urn:ietf:params:xml:ns:imdn\">\n
          \        <message-id>34jk324j</message-id>\n         <datetime>2008-04-04T12:16:49-05:00</datetime>\n
          \       <recipient-uri>im:bob@example.com</recipient-uri>\n         <original-recipient-uri\n
          \           >im:bob@example.com</original-recipient-uri>\n         <display-notification>\n
          \           <status>\n               <displayed/>\n            </status>\n
          \        </display-notification>\n       </imdn>\n   There are situations
          where the IM Recipient cannot determine if or\n   when the IM has been displayed.
          \ The IM Recipient in this case\n   generates a display notification with
          a <status> value of \"error\" to\n   indicate an internal error by the server.
          \ Note that the IM Recipient\n   may choose to ignore any IMDN requests
          and not send any IMDNs.  An IM\n   Recipient may not wish to let a sender
          know whether or not a\n   particular message has been displayed to her.
          \ This could be a per-\n   message, per-sender, or programmed policy choice.\n"
        title: 7.2.1.2.  Constructing Display Notifications
      title: 7.2.1.  Constructing IMDNs
    title: 7.2.  IM Recipient
  title: 7.  Endpoint Behaviour
- contents:
  - "8.  Intermediary Behaviour\n   In this context, intermediaries are application
    servers (including\n   URI-List and store-and-forward servers) and gateways.  A
    gateway is a\n   server that translates between different IM systems that use\n
    \  different protocols.\n   A URI-List server may change the IM Recipient address
    from its own to\n   the address of the final recipient of that IM for every copy
    it makes\n   that it sends to the list members (see [RFC5365] for details).  In\n
    \  this case, if the IM Sender is requesting an IMDN, the intermediary\n   SHOULD
    add an Original-To header field to the IM, populating it with\n   the address
    that was in the CPIM To header field before it was\n   changed.  That is, the
    intermediary populates the Original-To header\n   field with the intermediary
    address.  Of course, one may configure an\n   intermediary to restrict it from
    rewriting or populating the\n   Original-To field.  An intermediary MUST NOT add
    an Original-To\n   header field if one already exists.  An intermediary MAY have
    an\n   administrative configuration to not reveal the original Request-URI,\n
    \  and as such, MUST NOT add an Original-To header.\n   An IM reply for a page-mode
    IM is not linked in any way to the\n   initial IM and can end up at a different
    user agent from where the\n   initial IM originated, depending on how the recipient
    URI gets\n   resolved.  Therefore, IM replies may traverse different\n   intermediaries.
    \ An IMDN, on the other hand, needs to traverse the\n   same intermediaries as
    the IM itself since those intermediaries may\n   be required to report negative
    delivery notifications if the IM was\n   not delivered successfully.  Some of
    those intermediaries are, for\n   example, store-and-forward servers that may
    report that an IM has\n   been processed and later report that the IM has failed
    to be\n   delivered.\n   For the reasons stated above, an intermediary MAY choose
    to remain on\n   the path of IMDNs for a specific IM.  It can do so by adding
    a CPIM\n   IMDN-Record-Route header field as the top IMDN-Record-Route header\n
    \  field.  The value of this field MUST be the intermediary's own\n   address.
    \ An intermediary that does not support this extension will\n   obviously not
    add the IMDN-Record-Route header field.  This allows\n   IMDNs to traverse directly
    from the IM Recipient to the IM Sender\n   even if the IM traversed an intermediary
    not supporting this\n   extension.\n   An intermediary receiving an IMDN checks
    the top IMDN-Route header\n   field.  If that header field carries the intermediary
    address, the\n   intermediary removes that value and forwards the IMDN to the
    address\n   indicated in the new top IMDN-Route header field.  If no additional\n
    \  IMDN-Route header fields are present, the IMDN is forwarded to the\n   address
    in the CPIM To header field.\n   An intermediary MUST remove any information about
    the final\n   recipients of a list if the list membership is not disclosed.  The\n
    \  intermediary does that by removing the <recipient-uri> element and/or\n   <original-recipient-uri>
    element from the body of the IMDN before\n   forwarding it to the IM Sender.\n"
  - contents:
    - "8.1.  Constructing Processing Notifications\n   Intermediaries are the only
      entities that construct processing\n   notifications.  They do so only if the
      IM Sender has requested a\n   \"processing\" notification by including a Disposition-Notification\n
      \  header field with value \"processing\".\n   The intermediary can create and
      send \"processing\" notifications\n   indicating that an IM has been processed
      or stored.  The intermediary\n   MUST NOT send more than one IMDN for the same
      disposition type --\n   i.e., it must not send a \"processing\" notification
      indicating that an\n   IM is being \"processed\" followed by another IMDN indicating
      that the\n   same IM is \"stored\".\n   An intermediary constructs a \"processing\"
      notification in a similar\n   fashion as the IM Recipient constructs a delivery
      notification.  See\n   Section 7.2.1.1 for details.\n   The following is an
      example:\n   Content-type: Message/CPIM\n   From: Bob <im:bob@example.com>\n
      \  To: Alice <im:alice@example.com>\n   Content-type: message/imdn+xml\n   Content-Disposition:
      notification\n   Content-length: ...\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
      \  <imdn xmlns=\"urn:ietf:params:xml:ns:imdn\">\n         <message-id>34jk324j</message-id>\n
      \        <datetime>2008-04-04T12:16:49-05:00</datetime>\n        <recipient-uri>im:bob@example.com</recipient-uri>\n
      \        <original-recipient-uri\n            >im:bob@example.com</original-recipient-uri>\n
      \        <processing-notification>\n            <status>\n               <processed/>\n
      \           </status>\n         </processing-notification>\n       </imdn>\n
      \  There are situations where the intermediary cannot know the fate of\n   an
      IM.  The intermediary in this case generates a processing\n   notification with
      a <status> value of \"error\" to indicate so.\n"
    title: 8.1.  Constructing Processing Notifications
  - contents:
    - "8.2.  Constructing Delivery Notifications\n   Intermediaries MAY construct
      negative delivery notifications.  They\n   do so only if the IM Sender has requested
      a \"negative-delivery\"\n   notification by including a Disposition-Notification
      header field\n   with value \"negative-delivery\" AND an error was returned
      for that IM.\n   The intermediary can create and send \"negative-delivery\"\n
      \  notifications indicating that an IM has failed to be delivered.  The\n   intermediary
      MUST NOT send more than one IMDN for the same\n   disposition type -- i.e.,
      it must not send a \"failed\" notification\n   indicating that an IM has failed
      followed by another IMDN indicating\n   that an IMDN is \"forbidden\".\n   An
      intermediary constructs a \"negative-delivery\" notification much\n   like the
      IM Recipient.  See Section 7.2.1.1 for details.\n"
    title: 8.2.  Constructing Delivery Notifications
  - contents:
    - "8.3.  Aggregation of IMDNs\n   As previously described, URI-List servers are
      intermediaries.\n   A URI-List server may choose (using local policy) to aggregate
      IMDNs\n   or it may send individual IMDNs instead.  When a URI-List server\n
      \  receives an IM and decides to aggregate IMDNs, it can wait for a\n   configurable
      period of time or until all recipients have sent the\n   IMDN, whichever comes
      first, before it sends an aggregated IMDN.\n   Note that some IMDNs, for example
      \"displayed\" notifications, may\n   never come due to user settings.  How long
      to wait before sending an\n   aggregated IMDN and before a URI-List server removes
      state for that\n   IM is an administrator configuration and implementation issue.\n
      \  A URI-List server MAY choose to send multiple aggregated IMDNs.  A\n   timer
      can be started, and when it fires, the URI-List server can\n   aggregate whatever
      IMDNs it has so far for that IM, send the\n   aggregated IMDN, and restart the
      timer for the next batch.  This is\n   needed for scenarios where the IM Sender
      has requested more than one\n   IMDN for a specific IM -- for example, delivery
      notifications as well\n   as display notifications -- or when the URI-List server
      is short on\n   resources and chooses to prioritise forwarding IMs over IMDNs.\n
      \  A second timer can be running, and when it fires, the state of the IM\n   is
      deleted.  In this case, the URI-List server consumes any IMDNs\n   that might
      arrive after that time.\n   Please note the references to timers in the above
      paragraphs are not\n   normative and are only present to help describe one way
      one might\n   implement aggregation.\n   A URI-List server MAY aggregate IMDNs
      for the case where the list\n   membership information is not disclosed.  There
      may be scenarios\n   where the URI-List server starts sending aggregated IMDNs
      and\n   switches to individual ones or visa versa.  A timer firing often may\n
      \  in fact have that effect.\n   The aggregated IMDN is constructed using the
      multipart/mixed MIME\n   type and including as individual payloads all the IMDNS
      that were\n   received as message/imdn+xml.\n   Below is an example of aggregated
      IMDNs.\n   From: Bob <im:bob@example.com>\n   To: Alice <im:alice@example.com>\n
      \  NS: imdn <urn:ietf:params:imdn>\n   imdn.Message-ID: d834jied93rf\n   Content-type:
      multipart/mixed;\n                      boundary=\"imdn-boundary\"\n   Content-Disposition:
      notification\n   Content-length: ...\n   --imdn-boundary\n   Content-type: message/imdn+xml\n
      \  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <imdn xmlns=\"urn:ietf:params:xml:ns:imdn\">\n
      \        <message-id>34jk324j</message-id>\n         <datetime>2008-04-04T12:16:49-05:00</datetime>\n
      \       <recipient-uri>im:bob@example.com</recipient-uri>\n         <original-recipient-uri\n
      \          >im:bob@example.com</original-recipient-uri>\n         <delivery-notification>\n
      \           <status>\n               <delivered/>\n            </status>\n         </delivery-notification>\n
      \      </imdn>\n   --imdn-boundary\n   Content-type: message/imdn+xml\n   <?xml
      version=\"1.0\" encoding=\"UTF-8\"?>\n   <imdn xmlns=\"urn:ietf:params:xml:ns:imdn\">\n
      \        <message-id>34jk324j</message-id>\n         <datetime>2008-04-04T12:16:49-05:00</datetime>\n
      \       <recipient-uri>im:bob@example.com</recipient-uri>\n         <original-recipient-uri\n
      \           >im:bob@example.com</original-recipient-uri>\n         <display-notification>\n
      \           <status>\n               <displayed/>\n            </status>\n         </display-notification>\n
      \      </imdn>\n   --imdn-boundary\n"
    title: 8.3.  Aggregation of IMDNs
  title: 8.  Intermediary Behaviour
- contents:
  - "9.  Identifying Messages\n   Messages are typically carried in a transport protocol
    like SIP\n   [RFC3261].  If the payload carried by the transport protocol does
    not\n   contain any parts of type Message/CPIM, then the message is an IM.\n   If
    the payload contains any parts of type Message/CPIM, and none of\n   those parts
    contains a payload that is of type \"message/imdn+xml\",\n   the message is an
    IM.  It is not valid to attempt to carry both an IM\n   and an IMDN in a multipart
    payload in a single transport protocol\n   message.\n   A message is identified
    as a delivery notification by examining its\n   contents.  The message is a delivery
    notification if the Content-type\n   header field present has a value of \"message/imdn+xml\",
    the Content-\n   Disposition header field has a value of \"notification\", and
    the\n   <delivery-notification> element appears in that XML body.\n   A message
    is identified as a processing notification or display\n   notification in a similar
    fashion as a delivery notification.  The\n   difference is that, for a processing
    notification, the <processing-\n   notification> element appears in the XML body.
    \ For a display\n   notification, the <display-notification> element appears in
    the XML\n   body.\n"
  title: 9.  Identifying Messages
- contents:
  - "10.  Header Fields Formal Syntax\n   The following syntax specification uses
    the message header field\n   syntax as described in Section 3 of RFC 3862 [RFC3862].\n
    \  Header field syntax is described without a namespace qualification.\n   Following
    the rules in RFC 3862 [RFC3862], header field names and\n   other text are case
    sensitive and MUST be used as given, using\n   exactly the indicated upper-case
    and lower-case letters.\n   Disposition-Notification =\n       \"Disposition-Notification\"
    \": \"\n       [(notify-req *(COMMA notify-req))]\n   notify-req =\n       (\"negative-delivery\"
    / \"positive-delivery\" /\n        \"processing\" / \"display\" / Token) *(SEMI
    disp-notify-params)\n   disp-notify-params = Ext-param\n   Message-ID = \"Message-ID\"
    \": \" Token\n   Original-To = \"Original-To\" \": \"  [ Formal-name ] \"<\" URI
    \">\"\n   IMDN-Record-Route =\n       \"IMDN-Record-Route\" \": \"  [ Formal-name
    ] \"<\" URI \">\"\n   IMDN-Route = \"IMDN-Route\" \": \"  [ Formal-name ] \"<\"
    URI \">\"\n   SEMI    =  *SP \";\" *SP ; semicolon\n   COMMA   =  *SP \",\" *SP
    ; comma\n"
  title: 10.  Header Fields Formal Syntax
- contents:
  - '11.  IMDN Format

    '
  - contents:
    - "11.1.  Structure of an XML-Encoded IMDN Payload\n   An IMDN payload is an XML
      document [XML] that MUST be well-formed and\n   MUST be valid according to schemas,
      including extension schemas,\n   available to the validater and applicable to
      the XML document.  The\n   IMDN payload MUST be based on XML 1.0 and MUST be
      encoded using\n   UTF-8.\n   The schema allows qualified extension elements
      in several positions\n   other than the \"urn:ietf:params:xml:ns:imdn\" namespace.
      \ To maintain\n   forwards compatibility (i.e., newer instance documents can
      be used by\n   existing consumers), the new specifications MUST NOT extend the\n
      \  allowable content of this specification.  The backwards compatibility\n   (i.e.,
      existing instance documents can also be used by updated, new\n   consumers)
      MAY break if there are conflicts with the existing\n   qualified names of extension
      elements and possible future\n   specifications.  The IETF MAY specify new extension
      elements within\n   the \"sub-namespace\" of \"urn:ietf:params:xml:ns:\" for
      this message/\n   imdn+xml MIME type.\n   Possible future specifications can
      add new element definitions with\n   the combine=\"interleave\" pattern.  When
      multiple elements of this new\n   type are then allowed, the new definition
      MUST contain the\n   <zeroOrMore> cardinality rule.  If the new specification
      does allow\n   only a single new element, the <optional> cardinality rule MUST
      be\n   used.  These cardinality requirements maintain the backwards\n   compatibility
      of existing instance documents with newer consumers.\n   Also, the new specification
      MUST then redefine either the \"anyIMDN\"\n   extension or the individual extension
      points that reference it, so\n   that new element definitions do not match with
      this redefined and\n   more limited wildcard pattern.\n   The namespace identifier
      for elements defined by this specification\n   is a URN [URN], using the namespace
      identifier 'ietf' defined by\n   [URN_NS] and extended by [IANA].  This urn
      is:\n   urn:ietf:params:xml:ns:imdn.\n   This namespace declaration indicates
      the namespace on which the IMDN\n   is based.\n   The root element is <imdn>.
      \ The <imdn> element has sub-elements,\n   namely <message-id>, <datetime>,
      <recipient-uri>, <original-\n   recipient-uri>, <subject>, and one of <delivery-notification>,\n
      \  <processing-notification>, or <display-notification>.  A <status>\n   also
      appears as a sub-element of <delivery-notification>,\n   <processing-notification>,
      and <display-notification>.  The elements\n   are described in detail in the
      following sections.\n   <imdn> can be extended in the future to include new
      disposition\n   notification types or other elements, as described in Section
      11.1.9.\n"
    - contents:
      - "11.1.1.  The <message-id> Element\n   The <message-id> element is mandatory
        according to the XML schema and\n   carries the message ID that appeared in
        the Message-ID header field\n   of the IM.\n"
      title: 11.1.1.  The <message-id> Element
    - contents:
      - "11.1.2.  The <datetime> Element\n   The <datetime> element is mandatory and
        carries the date and time the\n   IM was sent (not the IMDN).  This information
        is obtained from the\n   DateTime header field of the IM.\n"
      title: 11.1.2.  The <datetime> Element
    - contents:
      - "11.1.3.  The <recipient-uri> Element\n   The <recipient-uri> element is optional
        and carries the URI of the\n   final recipient.  This information is obtained
        from the CPIM To\n   header field of the IM.\n"
      title: 11.1.3.  The <recipient-uri> Element
    - contents:
      - "11.1.4.  The <original-recipient-uri> Element\n   The <original-recipient-uri>
        element is optional and carries the URI\n   of the original recipient.  It
        MUST be present if the IM carried the\n   Original-To header field.  This
        information is obtained from the\n   Original-To header field of the IM.\n"
      title: 11.1.4.  The <original-recipient-uri> Element
    - contents:
      - "11.1.5.  The <subject> Element\n   The <subject> element is optional.  If
        present, it MUST carry the\n   text and language attributes that were in the
        Subject header field,\n   if any.  This allows for a human-level correlation
        between an IM and\n   an IMDN.  If there are more than one Subject header
        fields in an IM,\n   selecting any one of them to place in the IMDN payload
        <subject>\n   element will suffice.  The sender then needs to compare Subject\n
        \  header fields until a match or not match is determined.\n"
      title: 11.1.5.  The <subject> Element
    - contents:
      - "11.1.6.  The <delivery-notification>, <processing-notification>, and\n         <display-notification>
        Elements\n   The appearance of one of the <delivery-notification>, <processing-\n
        \  notification>, and <display-notification> elements is mandatory and\n   carries
        the disposition type that the IM Sender requested and is\n   being reported.
        \ It carries the sub-element <status>.\n"
      title: 11.1.6.  The <delivery-notification>, <processing-notification>, and
    - contents:
      - "11.1.7.  The <status> Element\n   The <status> element is mandatory and carries
        the result of the\n   disposition request.  For notification type <delivery-notification>,\n
        \  it can carry one of the sub-elements <delivered>, <failed>,\n   <forbidden>,
        or <error>.  For notification type <display-\n   notification>, it can carry
        one of the sub-elements <displayed>,\n   <forbidden>, or <error>.  For notification
        type <processing-\n   notification>, it can carry one of the sub-elements
        <processed>,\n   <stored>, <forbidden>, or <error>. <forbidden> means the
        disposition\n   was denied. <error> means internal server error.  The <status>\n
        \  element can also be extended to carry any other status extension.\n"
      title: 11.1.7.  The <status> Element
    - contents:
      - "11.1.8.  MIME Type for IMDN Payload\n   The MIME type for the IMDN payload
        is \"message/imdn+xml\".  The IMDN\n   MUST identify the payload as MIME type
        \"message/imdn+xml\" in the\n   Content-type header field.\n"
      title: 11.1.8.  MIME Type for IMDN Payload
    - contents:
      - '11.1.9.  The RelaxNG Schema

        '
      - "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n     <grammar\n       xmlns=\"http://relaxng.org/ns/structure/1.0\"\n
        \      xmlns:a=\"http://relaxng.org/ns/compatibility/annotations/1.0\"\n       datatypeLibrary=\"http://www.w3.org/2001/XMLSchema-datatypes\"\n
        \      ns=\"urn:ietf:params:xml:ns:imdn\">\n         <start>\n             <element
        name=\"imdn\">\n                 <element name=\"message-id\">\n                     <data
        type=\"token\"/>\n                 </element>\n                 <element name=\"datetime\">\n
        \                    <data type=\"string\"/>\n                 </element>\n
        \                <optional>\n                     <element name=\"recipient-uri\">\n
        \                        <data type=\"anyURI\"/>\n                     </element>\n
        \                    <element name=\"original-recipient-uri\">\n                         <data
        type=\"anyURI\"/>\n                     </element>\n                     <optional>\n
        \                        <element name=\"subject\">\n                             <data
        type=\"string\"/>\n                         </element>\n                     </optional>\n
        \                </optional>\n                 <choice>\n                     <ref
        name=\"deliveryNotification\"/>\n                     <ref name=\"displayNotification\"/>\n
        \                    <ref name=\"processingNotification\"/>\n                     <empty/>\n
        \                </choice>\n                 <ref name=\"imdnExtension\"/>\n
        \            </element>\n         </start>\n         <define name=\"deliveryNotification\">\n
        \            <element name=\"delivery-notification\">\n                 <element
        name=\"status\">\n                     <choice>\n                         <element
        name=\"delivered\">\n                             <empty/>\n                         </element>\n
        \                        <element name=\"failed\">\n                             <empty/>\n
        \                        </element>\n                         <ref name=\"commonDispositionStatus\"></ref>\n
        \                    </choice>\n                     <ref name=\"deliveryExtension\"/>\n
        \                  </element>\n              </element>\n         </define>\n
        \        <define name=\"displayNotification\">\n             <element name=\"display-notification\">\n
        \                <element name=\"status\">\n                     <choice>\n
        \                        <element name=\"displayed\">\n                             <empty/>\n
        \                        </element>\n                         <ref name=\"commonDispositionStatus\"></ref>\n
        \                    </choice>\n                     <ref name=\"displayExtension\"/>\n
        \                </element>\n             </element>\n         </define>\n
        \        <define name=\"processingNotification\">\n             <element name=\"processing-notification\">\n
        \                <element name=\"status\">\n                     <choice>\n
        \                        <element name=\"processed\">\n                             <empty/>\n
        \                        </element>\n                         <element name=\"stored\">\n
        \                            <empty/>\n                         </element>\n
        \                        <ref name=\"commonDispositionStatus\"></ref>\n                     </choice>\n
        \                    <ref name=\"processingExtension\"/>\n                  </element>\n
        \            </element>\n         </define>\n         <define name=\"commonDispositionStatus\">\n
        \            <choice>\n                 <element name=\"forbidden\">\n                     <empty/>\n
        \                </element>\n                 <element name=\"error\">\n                     <empty/>\n
        \                </element>\n             </choice>\n         </define>\n
        \        <!-- <imdn> extension point for the extension schemas to add\n              new
        definitions with the combine=\"interleave\" pattern.\n              Extension
        schemas should add proper cardinalities.  For\n              example, the
        <zeroOrMore> cardinality should be used if\n              the extension is
        to allow multiple elements, and the\n              <optional> cardinality
        should be used if the extension\n              is to allow a single optional
        element. -->\n         <define name=\"imdnExtension\">\n             <zeroOrMore>\n
        \                <ref name=\"anyIMDN\"/>\n             </zeroOrMore>\n         </define>\n
        \        <!-- delivery-notification <status> extension point -->\n         <define
        name=\"deliveryExtension\">\n             <zeroOrMore>\n                 <ref
        name=\"anyIMDN\"/>\n             </zeroOrMore>\n         </define>\n         <!--
        display-notification <status> extension point -->\n         <define name=\"displayExtension\">\n
        \            <zeroOrMore>\n                 <ref name=\"anyIMDN\"/>\n             </zeroOrMore>\n
        \        </define>\n         <!-- processing-notification <status> extension
        point -->\n         <define name=\"processingExtension\">\n             <zeroOrMore>\n
        \                <ref name=\"anyIMDN\"/>\n             </zeroOrMore>\n         </define>\n
        \        <!-- wildcard definition for complex elements (of mixed type)\n              unqualified
        or qualified in the imdn namespace.\n              Extension schemas MUST
        redefine this or the\n              individual, previous definitions that
        use this definition.\n              In other words, the extension schema MUST
        reduce the\n              allowable content in order to maintain deterministic\n
        \             and unambiguous schemas with the interleave pattern. -->\n         <define
        name=\"anyIMDN\">\n             <element>\n                 <anyName>\n                     <except>\n
        \                        <nsName ns=\"urn:ietf:params:xml:ns:imdn\"/>\n                         <nsName
        ns=\"\"/>\n                     </except>\n                 </anyName>\n                 <ref
        name=\"anyExtension\"/>\n             </element>\n         </define>\n        <!--
        the rest of the \"anyIMDN\" wildcard definition -->\n         <define name=\"anyExtension\">\n
        \            <zeroOrMore>\n                <choice>\n                    <attribute>\n
        \                      <anyName/>\n                    </attribute>\n                    <ref
        name=\"any\"/>\n                </choice>\n             </zeroOrMore>\n         </define>\n
        \        <!-- wildcard type for complex elements (of mixed type)\n              without
        any namespace or content restrictions -->\n         <define name=\"any\">\n
        \            <element>\n                 <anyName/>\n                 <zeroOrMore>\n
        \                   <choice>\n                       <attribute>\n                          <anyName/>\n
        \                      </attribute>\n                       <text/>\n                       <ref
        name=\"any\"/>\n                    </choice>\n                 </zeroOrMore>\n
        \            </element>\n         </define>\n    </grammar>\n"
      title: 11.1.9.  The RelaxNG Schema
    title: 11.1.  Structure of an XML-Encoded IMDN Payload
  title: 11.  IMDN Format
- contents:
  - '12.  Transporting Messages Using SIP

    '
  - contents:
    - '12.1.  Endpoint Behaviour

      '
    - contents:
      - "12.1.1.  Sending Requests\n   The IM Sender constructs a SIP MESSAGE request
        using RFC 3428\n   [RFC3428].  The Content-type header field indicates the
        MIME type of\n   the request payload.  When using this extension, the Content-type\n
        \  header field MUST be of MIME type \"message/cpim\" [RFC3862] for both\n
        \  IMs and IMDNs.  The IM Sender constructs the payload according to\n   Section
        7.\n   The IM Sender constructs a SIP MESSAGE request to multiple recipients\n
        \  in a similar manner as a SIP MESSAGE request to a single recipient.\n   \"Multiple-Recipient
        MESSAGE Requests in SIP\" [RFC5365] describes the\n   differences.\n   IM
        Senders can remain anonymous.  For example, the sender can set the\n   SIP
        From header field of the SIP message to an anonymous URI.  As\n   there is
        no return address, anonymous IM Senders SHOULD NOT request\n   disposition
        notifications.  An IM Recipient MAY ignore such a request\n   if the IM Sender
        is anonymous.\n"
      title: 12.1.1.  Sending Requests
    - contents:
      - "12.1.2.  Sending Responses\n   An endpoint receiving a SIP MESSAGE request
        constructs a SIP response\n   according to RFC 3428 [RFC3428].  Of course,
        an endpoint will send a\n   SIP response to the MESSAGE request regardless
        of the type of message\n   (IM or IMDN) it has received or the disposition
        type for which it has\n   been asked.\n"
      title: 12.1.2.  Sending Responses
    - contents:
      - '12.1.3.  Receiving Requests

        '
      - contents:
        - "12.1.3.1.  Instant Message\n   A SIP MESSAGE request is identified as an
          IM by examining its\n   contents according to Section 9.\n   If an IM Recipient
          received a SIP MESSAGE request that is an IM\n   requesting a positive-delivery
          notification, and that IM Recipient\n   has constructed and sent a SIP 2xx
          class response, it MAY generate a\n   positive-delivery notification after
          making sure that the IM has been\n   delivered to the user or application.
          \ A gateway, for example, can\n   generate a 2xx response before the final
          recipient received the IM.\n   The IM Recipient constructs a positive-delivery
          notification\n   according to Section 7.2.1.1.  The IM Recipient places
          the message as\n   the payload in a SIP MESSAGE request.\n   If an IM Recipient
          received a SIP MESSAGE request that is an IM\n   requesting a negative-delivery,
          and that IM Recipient has constructed\n   and sent a 2xx class response,
          it SHOULD generate a negative-delivery\n   notification if it learnt that
          the final recipient or application did\n   not receive the IM (a gateway,
          for example, can generate a 2xx\n   response before it has an error response
          from downstream or before\n   any internal timers fire waiting for a response).
          \ The negative-\n   delivery notification is constructed according to Section
          7.2.1.1.\n   The message is then placed as the payload in a SIP MESSAGE
          request.\n   If an IM Recipient received a SIP MESSAGE request that is an
          IM\n   requesting a negative-delivery notification, and the IM Recipient
          has\n   constructed and sent a non-2xx final response, it MUST NOT generate
          a\n   negative-delivery notification.\n   If an IM Recipient received a
          SIP MESSAGE request that is an IM\n   requesting a display notification,
          and that IM Recipient has\n   constructed and sent a SIP 2xx class response,
          it MAY generate a\n   display notification after making sure that the IM
          has been presented\n   to the user or application.  It is outside the scope
          of this document\n   to discuss how a determination can be made whether
          the IM has been\n   read.  Note that the decision whether or not to send
          a display\n   notification can be left to the user.  An application may
          allow a\n   user to configure such a choice.  The IM Recipient constructs
          the\n   display notification according to Section 7.2.1.2.  The IM Recipient\n
          \  places the message as the payload in a SIP MESSAGE request.\n   For IMDNs,
          the IM Recipient populates the SIP Request-URI and the SIP\n   To header
          field using the address that appeared in the SIP From\n   header field in
          the IM.\n"
        title: 12.1.3.1.  Instant Message
      - contents:
        - "12.1.3.2.  Delivery Notification\n   A SIP MESSAGE request is identified
          as a delivery notification by\n   examining its contents according to Section
          9.\n"
        title: 12.1.3.2.  Delivery Notification
      - contents:
        - "12.1.3.3.  Display Notification\n   A SIP MESSAGE request is identified
          as a display notification by\n   examining its contents according to Section
          9.\n"
        title: 12.1.3.3.  Display Notification
      title: 12.1.3.  Receiving Requests
    title: 12.1.  Endpoint Behaviour
  - contents:
    - "12.2.  Intermediary Behaviour\n   In this context, intermediaries include application
      servers\n   (including URI-List and store-and-forward servers) and gateways.
      \ SIP\n   Proxies MUST NOT generate IMDNs but MUST forward them like any other\n
      \  SIP request.\n   Intermediaries forward a SIP MESSAGE request to multiple
      recipients\n   according to [RFC5365].\n   If an intermediary receives an IM,
      the intermediary examines the\n   body.  If the body is of type \"message/cpim\",
      the intermediary then\n   looks for a Disposition-Notification CPIM header field
      in the\n   message.  If the Disposition-Notification CPIM header field has\n
      \  either the value \"positive-delivery\" or \"negative-delivery\", and, in\n
      \  processing the IM, the intermediary generates a SIP 2xx class\n   response
      to the MESSAGE request, then the intermediary performs the\n   following actions.\n
      \  If the Disposition-Notification header field contains a value of\n   \"positive-delivery\",
      the intermediary MUST NOT generate a delivery\n   notification if it receives
      a SIP 2xx class response for the sent IM.\n   Just because a downstream entity
      received a MESSAGE request does not\n   mean the message was relayed to its
      ultimate destination or was\n   delivered.  Thus, the intermediary cannot say
      delivery occurred just\n   because it received a 2xx response.\n   If the Disposition-Notification
      header field contains a value of\n   \"negative-delivery\", the intermediary
      SHOULD generate a delivery\n   notification if it receives a SIP 4xx, 5xx, or
      6xx class final\n   response for the sent IM.  If it has received a SIP 2xx
      class\n   response followed by a negative-delivery notification, the\n   intermediary
      forwards that negative-delivery notification or\n   aggregates it.\n   If the
      Disposition-Notification header field contains a value of\n   \"processing\",
      the intermediary MAY generate a processing notification\n   after it has forwarded
      or stored the IM.  The rest of the procedures\n   in Section 8.1 apply.\n   The
      procedure for generating such an IMDN is the same as that of an\n   IM Recipient
      (Section 7.2.1.1).\n   The <recipient-uri> element of the XML body is populated
      with the URI\n   of the IM Recipient.\n   If an intermediary receives a SIP
      MESSAGE request carrying a positive\n   delivery notification or a display notification,
      it forwards it using\n   the rules in Section 8.\n"
    title: 12.2.  Intermediary Behaviour
  title: 12.  Transporting Messages Using SIP
- contents:
  - "13.  Transporting Messages using MSRP\n   The Message Session Relay Protocol
    (MSRP) [RFC4975] already provides\n   a built-in mechanism to supply positive
    and negative delivery\n   reports.  These reports do not provide built-in display
    or processing\n   notifications.  However, these notifications in session-mode
    are not\n   as useful as they are for page-mode.  This is because the base use\n
    \  case for MSRP is that the recipient user agent immediately renders\n   SEND
    requests sequentially, providing the session experience.  This\n   is unlike page-mode
    requests where a user has to actively initiate\n   the display of the message.
    \ That is, they need to click on a button,\n   open a message, and so on to read
    the message.\n   If new requirements arise in the future determining the need
    for IMDN\n   in MSRP, new specifications can be drafted.\n"
  title: 13.  Transporting Messages using MSRP
- contents:
  - "14.  Security Considerations\n   IMDNs provide a fine-grained view of the activity
    of the IM\n   Recipient, and thus deserve particularly careful confidentiality\n
    \  protection so that only the intended recipient of the IMDN will\n   receive
    the IMDN.  In most cases, the intended recipient of the IMDN\n   is the IM Sender.\n
    \  Since the IM transport protocol carries the IMDN, all security\n   considerations
    of the underlying IM protocol also apply to the IMDNs.\n   The threats in the
    IMDN system, over and beyond the threats inherent\n   to IM, include the following:\n
    \  o  A malicious endpoint attempts to send messages to a user that\n      would
    normally not wish to receive messages from that endpoint by\n      convincing
    the IMDN system to \"bounce\" an IMDN from an\n      unsuspecting endpoint to
    the user.\n   o  A malicious endpoint attempts to flood an IM Sender with IMDNs
    by\n      convincing a URI-List server to send IMDNs to an unsuspecting IM\n      Sender.\n
    \  o  A malicious intermediary or node attempts to flood a target node\n      with
    IMDNs by inserting the target's address in the From field or\n      IMDN-Record-Route
    field.\n   o  A malicious node in the network attempts to modify an IMDN from
    an\n      IM Recipient.\n   o  A malicious intermediary attempts to forward an
    IMDN from an IM\n      Recipient to the IM Sender, where the IM Recipient would
    not\n      normally forward the IMDN to that IM Sender if the IM Recipient\n      knew
    the identity of the IM Sender.\n   o  A malicious endpoint attempts to discover
    the Request-URI of an\n      endpoint beyond an intermediary, where the endpoint
    would normally\n      wish to keep its identity private from the malicious endpoint.\n
    \  o  A malicious node in the network attempts to eavesdrop on IMDN\n      traffic
    to, for example, learn Request-URI or traffic pattern\n      information.\n   o
    \ A malicious node in the network attempts to stage a denial-of-\n      service
    attack on an intermediary by requesting a large list\n      expansion.\n   The
    protocol cannot protect against attacks that include the\n   following:\n   o
    \ A malicious intermediary directly revealing the identity of a\n      downstream
    endpoint that would not normally wish its identity\n      revealed.  Keeping such
    information private is an intermediary\n      implementation issue.\n   o  A malicious
    IM Recipient alters the time of the IMDN.  There is no\n      protocol mechanism
    for ensuring that the IM Recipient does not lie\n      about the time or purposely
    holds an IMDN for transmission to make\n      it appear that the IM displayed
    to the user was read later than it\n      actually was.\n   o  A deletion attack
    on an IMDN.  This is a trade-off between privacy\n      and security.  The privacy
    considerations allow the IM Recipient\n      to silently ignore an IMDN request.
    \ Any mechanism that would\n      reliably indicate that a malicious node deleted
    an IM Recipient's\n      IMDN would also serve the purpose of detecting an IM
    Recipient\n      that chose not to issue an IMDN.\n   To combat eavesdropping,
    modification, and man-in-the-middle attacks,\n   we require some level of authentication
    and integrity protections.\n   That said, there are circumstances where strong
    integrity would be\n   overkill.  The presumption is that the IM Sender has, and
    sets the\n   expectation for, the level of protection.  The procedures for\n   integrity
    protection are as follows.\n   o  If the IM Recipient has a certificate, it MUST
    sign the IMDN.\n      Signing the IMDN provides integrity protection.  While an\n
    \     intermediary can replace the IMDN body, the IM Sender (the\n      recipient
    of the IMDN) can validate the signature and note the\n      IMDN does not come
    directly from the IM Receiver.  This is not a\n      problem if the IM Sender
    trusts the intermediary.  Likewise, an\n      IMDN in response to a signed IM
    without a signature indicates\n      something bad might have happened.\n   o
    \ If the IM is encrypted, the IM Recipient or intermediary MUST\n      encrypt
    the IMDN body, as an attacker may attempt to discern the\n      user's activity
    profile and identity from sniffing IMDNs on the\n      network.\n   o  The two
    above rules are cumulative.\n   The IM Recipient or intermediary MUST be capable
    of accessing the IM\n   Sender's public certificate in order to verify the signature
    in the\n   IM.\n   CPIM security considerations [RFC3862] apply here, as this
    is an\n   extension of CPIM.  In order to make the IMDN mechanism independent\n
    \  of the transport protocol, the Working Group made the design choice\n   of
    putting routing information into the IMDN application-layer\n   payload.  One
    consequence of this choice is it eliminates the\n   possibility of having end-to-end
    encryption.\n   An attacker can mount a distributed denial-of-service attack on
    a\n   node by sending lots of IMs to the node with IMDN requests.  Note\n   that
    this is the same problem as there is without IMDN; IMDN simply\n   linearly increases
    the load on the node under attack.  One can\n   mitigate, but not eliminate, this
    threat by the endpoint immediately\n   ignoring requests that are not authenticated.\n
    \  One way to address the potential for a malicious node to use the IMDN\n   system
    to anonymize attacks is to log all IMDN requests on the IM\n   Recipient user
    agent.  This allows for tracking of attacks, if only\n   after they occur.  Note
    this also puts a burden on the IM Recipient\n   user agent host.  Limited user
    agents may not be able to preserve\n   much of a log.\n   Likewise, an attacker
    can mount a denial-of-service attack on an\n   intermediary by asking the intermediary
    to explode a large list.\n   The following security considerations apply when
    using IMDNs.\n"
  - contents:
    - "14.1.  Forgery\n   IMs can be forged.  To protect against that, an IM can be
      signed.  An\n   intermediary that receives a signed message and needs to modify
      any\n   part of it that is included in the signature (like adding an\n   Original-To
      header field to the CPIM header fields) MUST consume the\n   IM and create a
      new copy of it that the intermediary signs itself.\n   IMDNs may be forged as
      easily as ordinary IMs.  Endpoints and\n   intermediaries that wish to make
      automatic use of IMDNs should take\n   appropriate precautions to minimize the
      potential damage from denial-\n   of-service attacks.  Security threats related
      to forged IMDNs include\n   the sending of a falsified IMDN when the indicated
      disposition of the\n   IM has not actually occurred.  For example, display notification\n
      \  could be forged to indicate that an IM has been displayed to the\n   Recipient.
      \ Unsolicited IMDNs is also another form of forgery.\n"
    title: 14.1.  Forgery
  - contents:
    - "14.2.  Confidentiality\n   There may be cases where an IM Recipient does not
      wish to reveal that\n   she has received, or in fact read, the IM.  In this
      situation, it is\n   acceptable for the IM Recipient to silently ignore requests
      for an\n   IMDN.  It is strongly RECOMMENDED that the IM Recipient obtain the\n
      \  user's consent before sending an IMDN.  Circumstances where the IM\n   Recipient
      does not ask for the user's consent include IM systems\n   that, for regulatory
      reasons, are required to issue an IMDN, such as\n   in the health care field
      or financial community.\n   An IM Recipient can obtain such consent by a prompt
      or dialog box on\n   a per-IM basis, globally through the user's setting of
      a preference,\n   or another, user-configurable mechanism.  The user might also\n
      \  indicate globally that IMDNs are never to be sent or that a\n   \"forbidden\"
      IMDN status is always sent in response to a request for\n   an IMDN.\n   There
      are situations where a user sends an IM and requests IMDNs to a\n   list whose
      member information is not disclosed.  In this situation,\n   the user will learn
      of the list members.  Therefore, in this case,\n   the URI-List server MUST
      remove any information about list members.\n   If the number of members in the
      list is also not disclosed, the URI-\n   List server MUST only deliver one aggregated
      IMDN.  Alternatively,\n   the URI-list server MAY reject the IM.\n   It is possible
      for a list server to not understand IMDN.  IM\n   Recipients may note the To
      header field is a list name and not the IM\n   Recipient's name.  In this case,
      the IM Recipient can take the\n   appropriate action if it wishes to keep its
      identity private.\n   An unencrypted IMDN could reveal confidential information
      about an\n   encrypted IM.  The same level of security applied to an IM MUST
      be\n   applied to its IMDNs.  For example, if an IM is signed and encrypted,\n
      \  the IMDN must be signed and encrypted.\n"
    title: 14.2.  Confidentiality
  - contents:
    - "14.3.  IMDN as a Certified Delivery Service\n   IMDNs cannot be relied on as
      a guarantee that an IM was or was not\n   seen by the user.  Even if IMDNs are
      not actively forged, they may be\n   lost in transit.  Moreover, the IM Recipient
      may bypass the IMDN\n   issuing mechanism through policy or manipulation of
      their user agent\n   Server.\n"
    title: 14.3.  IMDN as a Certified Delivery Service
  title: 14.  Security Considerations
- contents:
  - '15.  IANA Considerations

    '
  - contents:
    - "15.1.  message/imdn+xml MIME TYPE\n   This document registers a new MIME type
      \"message/imdn+xml\", and\n   registers a new XML namespace.\n   This specification
      follows the guidelines of RFC 3023 [RFC3023].\n   MIME media type: message\n
      \  MIME subtype name: imdn+xml\n   Mandatory parameters: none\n   Optional parameters:
      Same as charset parameter application/xml as\n   specified in RFC 3023 [RFC3023].\n
      \  Encoding considerations: Same as encoding considerations of\n   application/xml
      as specified in RFC 3023 [RFC3023].\n   Security considerations: See Section
      10 of RFC 3023 [RFC3023] and\n   Section 14 of this document.\n   Interoperability
      considerations: none\n   Published specification: This document\n   Applications
      which use this media type: This media type is used to\n   support CPIM-based
      instant Messaging.\n   Additional information: none\n   Magic number: none\n
      \  File extension: .cl or .xml\n   Macintosh file type code: \"TEXT\"\n   Personal
      and email address for further information: Hisham Khartabil\n   (hisham.khartabil@gmail.com)\n
      \  Intended Usage: COMMON\n   Author/change controller: The IETF\n"
    title: 15.1.  message/imdn+xml MIME TYPE
  - contents:
    - "15.2.  XML Registration\n   This section registers a new XML namespace and
      schema, as per\n   guidelines in the IETF XML Registry [IANA].\n   URI: urn:ietf:params:xml:ns:imdn\n
      \  XML: The schema for this namespace is in Section 11.1.9 above.\n   Registrant
      Contact: IETF, SIMPLE working group, Hisham Khartabil\n   (hisham.khartabil@gmail.com)\n"
    title: 15.2.  XML Registration
  - contents:
    - "15.3.  URN Registration for IMDN Header Parameters\n   Per [RFC3553], please
      establish the following registry.  New entries\n   to the registry are Specification
      Required.\n   Registry name: urn:ietf:params:imdn\n   Specification: RFC 5438.
      Additional values may be defined by a\n   Standards Action [RFC5226] that updates
      or obsoletes RFC 5438.\n   Repository: RFC 5438\n   Index value: Values subordinate
      to urn:ietf:params:imdn require RFC\n   publication.  The index value is the
      IMDN header name.  The index\n   value must follow the rules for a legal IMDN
      header name.  In\n   particular, the IMDN header name, and thus the index value
      to\n   register, must be a string of octets taken from the restricted set of\n
      \  US-ASCII characters per Section 3.1 of [RFC3553].  The index value is\n   case
      sensitive.\n   URN Formation: The URI for a header is formed from its name by\n
      \     a) replacing any non-URN characters (as defined by RFC 2141 [URN])\n      with
      the corresponding '%hh' escape sequence (per RFC 3986\n      [RFC3986]) and\n
      \     b) prepending the resulting string with 'urn:ietf:params:imdn:'.\n   Thus,
      the URI corresponding to the CPIM message IMDN header\n   'Disposition-Notification:'
      would be\n   'urn:ietf:params:imdn:Disposition-Notification'.\n   Initial values:\n
      \           +--------------------------+---------------------+\n            |
      Index Value              | Reference           |\n            +--------------------------+---------------------+\n
      \           | Disposition-Notification | RFC5438 Section 6.2 |\n            |
      Message-ID               | RFC5438 Section 6.3 |\n            | Original-To
      \             | RFC5438 Section 6.4 |\n            | IMDN-Record-Route        |
      RFC5438 Section 6.5 |\n            | IMDN-Route               | RFC5438 Section
      6.6 |\n            +--------------------------+---------------------+\n"
    title: 15.3.  URN Registration for IMDN Header Parameters
  - contents:
    - "15.4.  Content-Disposition: notification\n   This document registers one new
      Content-Disposition header field\n   \"disposition-types\": notification, which
      has been recorded in the\n   IANA registry for Mail Content Dispositions.\n
      \  Descriptions of this \"disposition-types\", including motivation and\n   examples,
      are given in Section 7.2.1.1 and Section 9.\n   Short descriptions suitable
      for the IANA registry are:\n   notification: the payload of the message carrying
      this Content-\n   Disposition header field value is an Instant Message Disposition\n
      \  Notification as requested in the corresponding Instant Message.\n"
    title: '15.4.  Content-Disposition: notification'
  title: 15.  IANA Considerations
- contents:
  - "16.  Acknowledgements\n   Special thanks to Jari Urpalainen for the thorough
    review and\n   suggestions for the RelaxNG schema.\n   The authors would also
    like to thank Paul Kyzivat, Ben Campbell, Adam\n   Roach, Gonzalo Camarillo, Frank
    Ellermann, Sean Olson, Eva Leppanen,\n   Miguel Garcia, Eric McMurry, Jon Peterson,
    and Robert Sparks for\n   their comments and support.  In addition, we would like
    to thank the\n   Gen-Art reviewer extraordinaire, Spencer Dawkins.\n"
  title: 16.  Acknowledgements
- contents:
  - '17.  References

    '
  - contents:
    - "17.1.  Normative References\n   [IANA]     Mealling, M., \"The IETF XML Registry\",
      BCP 81, RFC 3688,\n              January 2004.\n   [RFC2119]  Bradner, S., \"Key
      words for use in RFCs to Indicate\n              Requirement Levels\", BCP 14,
      RFC 2119, March 1997.\n   [RFC3023]  Murata, M., St. Laurent, S., and D. Kohn,
      \"XML Media\n              Types\", RFC 3023, January 2001.\n   [RFC3862]  Klyne,
      G. and D. Atkins, \"Common Presence and Instant\n              Messaging (CPIM):
      Message Format\", RFC 3862, August 2004.\n   [RFC3986]  Berners-Lee, T., Fielding,
      R., and L. Masinter, \"Uniform\n              Resource Identifier (URI): Generic
      Syntax\", STD 66,\n              RFC 3986, January 2005.\n   [URN]      Moats,
      R., \"URN Syntax\", RFC 2141, May 1997.\n   [XML]      Bray, T., \"Extensible
      Markup Language (XML) 1.0 (Second\n              Edition)\", W3C CR CR-xml11-20011006,
      October 2000.\n"
    title: 17.1.  Normative References
  - contents:
    - "17.2.  Informative References\n   [RFC3261]  Rosenberg, J., Schulzrinne, H.,
      Camarillo, G., Johnston,\n              A., Peterson, J., Sparks, R., Handley,
      M., and E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC
      3261,\n              June 2002.\n   [RFC3428]  Campbell, B., Rosenberg, J.,
      Schulzrinne, H., Huitema, C.,\n              and D. Gurle, \"Session Initiation
      Protocol (SIP) Extension\n              for Instant Messaging\", RFC 3428, December
      2002.\n   [RFC3553]  Mealling, M., Masinter, L., Hardie, T., and G. Klyne, \"An\n
      \             IETF URN Sub-namespace for Registered Protocol\n              Parameters\",
      BCP 73, RFC 3553, June 2003.\n   [RFC3798]  Hansen, T. and G. Vaudreuil, \"Message
      Disposition\n              Notification\", RFC 3798, May 2004.\n   [RFC4975]
      \ Campbell, B., Mahy, R., and C. Jennings, \"The Message\n              Session
      Relay Protocol (MSRP)\", RFC 4975, September 2007.\n   [RFC5321]  Klensin, J.,
      \"Simple Mail Transfer Protocol\", RFC 5321,\n              October 2008.\n
      \  [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n
      \  [RFC5365]  Garcia-Martin, M. and G. Camarillo, \"Multiple-Recipient\n              MESSAGE
      Requests in the Session Initiation Protocol\n              (SIP)\", RFC 5365,
      October 2008.\n   [URN_NS]   Moats, R., \"A URN Namespace for IETF Documents\",
      RFC 2648,\n              August 1999.\n"
    title: 17.2.  Informative References
  title: 17.  References
- contents:
  - "Authors' Addresses\n   Eric Burger\n   Unaffiliated\n   New Hampshire\n   USA\n
    \  Phone:\n   Fax:   +1 603 457 5933\n   EMail: eburger@standardstrack.com\n   Hisham
    Khartabil\n   Ericsson Australia\n   Melbourne\n   Australia\n   Phone: +61 416
    108 890\n   EMail: hisham.khartabil@gmail.com\n"
  title: Authors' Addresses
