- title: __initial_text__
  contents:
  - '        An Architecture for Open Pluggable Edge Services (OPES)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines an architecture that enables the creation of an\n\
    \   application service in which a data provider, a data consumer, and\n   zero\
    \ or more application entities cooperatively implement a data\n   stream service.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2 . The Architecture . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n       2.1.  OPES Entities. . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n             2.1.1.  Data Dispatcher. . . . . . . . . . . . . .\
    \ . . .  5\n       2.2.  OPES Flows . . . . . . . . . . . . . . . . . . . . .\
    \ . .  6\n       2.3.  OPES Rules . . . . . . . . . . . . . . . . . . . . . .\
    \ .  6\n       2.4.  Callout Servers. . . . . . . . . . . . . . . . . . . . .\
    \  7\n       2.5.  Tracing Facility . . . . . . . . . . . . . . . . . . . .  8\n\
    \   3.  Security and Privacy Considerations  . . . . . . . . . . . . .  9\n  \
    \     3.1.  Trust Domains. . . . . . . . . . . . . . . . . . . . . .  9\n    \
    \   3.2.  Establishing Trust and Service Authorization . . . . . . 11\n      \
    \ 3.3.  Callout Protocol . . . . . . . . . . . . . . . . . . . . 11\n       3.4.\
    \  Privacy. . . . . . . . . . . . . . . . . . . . . . . . . 12\n       3.5.  End-to-end\
    \ Integrity . . . . . . . . . . . . . . . . . . 12\n   4.  IAB Architectural and\
    \ Policy Considerations for OPES . . . . . 12\n       4.1.  IAB consideration\
    \ (2.1) One-party Consent. . . . . . . . 12\n       4.2.  IAB consideration (2.2)\
    \ IP-Layer Communications. . . . . 13\n       4.3.  IAB consideration (3.1 and\
    \ 3.2) Notification . . . . . . 13\n       4.4.  IAB consideration (3.3) Non-Blocking\
    \ . . . . . . . . . . 13\n       4.5.  IAB consideration (4.1) URI Resolution\
    \ . . . . . . . . . 13\n       4.6.  IAB consideration (4.2) Reference Validity\
    \ . . . . . . . 13\n       4.7.  IAB consideration (4.3) Application Addressing\n\
    \             Extensions . . . . . . . . . . . . . . . . . . . . . . . 14\n  \
    \     4.8.  IAB consideration (5.1) Privacy. . . . . . . . . . . . . 14\n   5.\
    \  Security Considerations  . . . . . . . . . . . . . . . . . . . 14\n   6.  IANA\
    \ Considerations  . . . . . . . . . . . . . . . . . . . . . 14\n   7.  Summary\
    \  . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n   8.  References\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 15\n       8.1.  Normative\
    \ References . . . . . . . . . . . . . . . . . . 15\n       8.2.  Informative\
    \ References . . . . . . . . . . . . . . . . . 15\n   9.  Acknowledgements . .\
    \ . . . . . . . . . . . . . . . . . . . . . 15\n   10. Authors' Addresses . .\
    \ . . . . . . . . . . . . . . . . . . . . 16\n   11. Full Copyright Statement\
    \ . . . . . . . . . . . . . . . . . . . 17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   When supplying a data stream service between a provider\
    \ and a\n   consumer, the need to provision the use of other application\n   entities,\
    \ in addition to the provider and consumer, may arise.  For\n   example, some\
    \ party may wish to customize a data stream as a service\n   to a consumer.  The\
    \ customization step might be based on the\n   customer's resource availability\
    \ (e.g., display capabilities).\n   In some cases it may be beneficial to provide\
    \ a customization service\n   at a network location between the provider and consumer\
    \ host rather\n   than at one of these endpoints.  For certain services performed\
    \ on\n   behalf of the end-user, this may be the only option of service\n   deployment.\
    \  In this case, zero or more additional application\n   entities may participate\
    \ in the data stream service.  There are many\n   possible provisioning scenarios\
    \ which make a data stream service\n   attractive.  The OPES Use Cases and Deployment\
    \ Scenarios [1] document\n   provides examples of OPES services.  The document\
    \ discusses services\n   that modify requests, services that modify responses,\
    \ and services\n   that create responses.  It is recommended that the document\
    \ on OPES\n   Use Cases and Deployment Scenarios [1] be read before reading this\n\
    \   document.\n   This document presents the architectural components of Open\
    \ Pluggable\n   Edge Services (OPES) that are needed in order to perform a data\n\
    \   stream service.  The architecture addresses the IAB considerations\n   described\
    \ in [2].  These considerations are covered in various parts\n   of the document.\
    \  Section 2.5 addresses tracing; section 3 addresses\n   security considerations.\
    \  Section 4 provides a summary of IAB\n   considerations and how the architecture\
    \ addresses them.\n   The document is organized as follows: Section 2 introduces\
    \ the OPES\n   architecture.  Section 3 discusses OPES security and privacy\n\
    \   considerations.  Section 4 addresses IAB considerations for OPES.\n   Section\
    \ 5 discusses security considerations.  Section 6 addresses\n   IANA considerations.\
    \  Section 7 provides a summary of the\n   architecture and the requirements for\
    \ interoperability.\n"
- title: 2.  The Architecture
  contents:
  - "2.  The Architecture\n   The architecture of Open Pluggable Edge Services (OPES)\
    \ can be\n   described in terms of three interrelated concepts, mainly:\n   o\
    \  OPES entities: processes operating in the network;\n   o  OPES flows:  data\
    \ flows that are cooperatively realized by the\n      OPES entities; and,\n  \
    \ o  OPES rules: these specify when and how to execute OPES services.\n"
- title: 2.1.  OPES Entities
  contents:
  - "2.1.  OPES Entities\n   An OPES entity is an application that operates on a data\
    \ flow between\n   a data provider application and a data consumer application.\
    \  OPES\n   entities can be:\n   o  an OPES service application, which analyzes\
    \ and possibly\n      transforms messages exchanged between the data provider\n\
    \      application and the data consumer application;\n   o  a data dispatcher,\
    \ which invokes an OPES service application based\n      on an OPES ruleset and\
    \ application-specific knowledge.\n   The cooperative behavior of OPES entities\
    \ introduces additional\n   functionality for each data flow provided that it\
    \ matches the OPES\n   rules.  In the network, OPES entities reside inside OPES\
    \ processors.\n   In the current work, an OPES processor MUST include a data\n\
    \   dispatcher.  Furthermore, the data provider and data consumer\n   applications\
    \ are not considered as OPES entities.\n   To provide verifiable system integrity\
    \ (see section 3.1 on trust\n   domains below) and to facilitate deployment of\
    \ end-to-end encryption\n   and data integrity control, OPES processors MUST be:\n\
    \   o  explicitly addressable at the IP layer by the end user (data\n      consumer\
    \ application).  This requirement does not preclude a chain\n      of OPES processors\
    \ with the first one in the chain explicitly\n      addressed at the IP layer\
    \ by the end user (data consumer\n      application).\n   o  consented to by either\
    \ the data consumer or data provider\n      application.  The details of this\
    \ process are beyond the scope of\n      the current work.\n   The OPES architecture\
    \ is largely independent of the protocol that is\n   used by the data provider\
    \ application and the data consumer\n   application to exchange data.  However,\
    \ this document selects HTTP\n   [3] as the example for the underlying protocol\
    \ in OPES flows.\n"
- title: 2.1.1.   Data Dispatcher
  contents:
  - "2.1.1.   Data Dispatcher\n   Data dispatchers include a ruleset that can be compiled\
    \ from several\n   sources and MUST resolve into an unambiguous result.  The combined\n\
    \   ruleset enables an OPES processor to determine which service\n   applications\
    \ to invoke for which data flow.  Accordingly, the data\n   dispatcher constitutes\
    \ an enhanced policy enforcement point, where\n   policy rules are evaluated and\
    \ service-specific data handlers and\n   state information are maintained, as\
    \ depicted in Figure 1.\n                                        +----------+\n\
    \                                        |  callout |\n                      \
    \                  |  server  |\n                                        +----------+\n\
    \                                             ||\n                           \
    \                  ||\n                                             ||\n     \
    \                                        ||\n                         +--------------------------+\n\
    \                         | +-----------+     ||     |\n                     \
    \    | |   OPES    |     ||     |\n                         | |  service  |  \
    \   ||     |\n                         | |application|     ||     |\n        \
    \                 | +-----------+     ||     |\n                         | +----------------------+\
    \ |\n         OPES flow <---->| | data dispatcher and  | |<----> OPES flow\n \
    \                        | | policy enforcement   | |\n                      \
    \   | +----------------------+ |\n                         |           OPES  \
    \         |\n                         |         processor        |\n         \
    \                +--------------------------+\n                          Figure\
    \ 1: Data Dispatchers\n   The architecture allows for more than one policy enforcement\
    \ point to\n   be present on an OPES flow.\n"
- title: 2.2.  OPES Flows
  contents:
  - "2.2.  OPES Flows\n   An OPES flow is a cooperative undertaking between a data\
    \ provider\n   application, a data consumer application, zero or more OPES service\n\
    \   applications, and one or more data dispatchers.\n   Since policies are enforced\
    \ by data dispatchers, the presence of at\n   least one data dispatcher is required\
    \ in the OPES flow.\n    data          OPES               OPES             data\n\
    \      consumer        processor A        processor N      provider\n    +-----------+\
    \    +-----------+  .  +-----------+    +-----------+\n    |   data    |    |\
    \  OPES     |  .  |  OPES     |    |   data    |\n    | consumer  |    | service\
    \   |  .  | service   |    | provider  |\n    |application|    |application| \
    \ .  |application|    |application|\n    +-----------+    +-----------+  .  +-----------+\
    \    +-----------+\n    |           |    |           |  .  |           |    |\
    \           |\n    |   HTTP    |    |    HTTP   |  .  |    HTTP   |    |   HTTP\
    \    |\n    |           |    |           |  .  |           |    |           |\n\
    \    +-----------+    +-----------+  .  +-----------+    +-----------+\n    |\
    \  TCP/IP   |    |   TCP/IP  |  .  |   TCP/IP  |    |  TCP/IP   |\n    +-----------+\
    \    +-----------+  .  +-----------+    +-----------+\n         ||           \
    \  ||    ||    .       ||    ||         ||\n         ================      =====.========\
    \      ===========\n         | <----------------- OPES flow ------------------->\
    \ |\n                       Figure 2: An OPES flow\n   Figure 2 depicts two data\
    \ dispatchers that are present in the OPES\n   flow.  The architecture allows\
    \ for one or more data dispatchers to be\n   present in any flow.\n"
- title: 2.3.  OPES Rules
  contents:
  - "2.3.  OPES Rules\n   OPES' policy regarding services and the data provided to\
    \ them is\n   determined by a ruleset consisting of OPES rules.  The rules consist\n\
    \   of a set of conditions and related actions.  The ruleset is the\n   superset\
    \ of all OPES rules on the processor.  The OPES ruleset\n   determines which service\
    \ applications will operate on a data stream.\n   In this model, all data dispatchers\
    \ are invoked for all flows.\n   In order to ensure predictable behavior, the\
    \ OPES architecture\n   requires the use of a standardized schema for the purpose\
    \ of defining\n   and interpreting the ruleset.  The OPES architecture does not\
    \ require\n   a mechanism for configuring a ruleset into a data dispatcher.  This\n\
    \   is treated as a local matter for each implementation (e.g., through\n   the\
    \ use of a text editor or a secure upload protocol), as long as\n   such a mechanism\
    \ complies with the requirements set forth in section\n   3.\n"
- title: 2.4.  Callout Servers
  contents:
  - "2.4.  Callout Servers\n   The evaluation of the OPES ruleset determines which\
    \ service\n   applications will operate on a data stream.  How the ruleset is\n\
    \   evaluated is not the subject of the architecture, except to note that\n  \
    \ it MUST result in the same unambiguous result in all implementations.\n   In\
    \ some cases it may be useful for the OPES processor to distribute\n   the responsibility\
    \ of service execution by communicating with one or\n   more callout servers.\
    \  A data dispatcher invokes the services of a\n   callout server by using the\
    \ OPES callout protocol (OCP).  The\n   requirements for the OCP are given in\
    \ [5].  The OCP is application-\n   agnostic, being unaware of the semantics of\
    \ the encapsulated\n   application protocol (e.g., HTTP).  However, the data dispatcher\
    \ MUST\n   incorporate a service aware vectoring capability that parses the data\n\
    \   flow according to the ruleset and delivers the data to either the\n   local\
    \ or remote OPES service application.\n   The general interaction situation is\
    \ depicted in Figure 3, which\n   illustrates the positions and interaction of\
    \ different components of\n   OPES architecture.\n   +--------------------------+\n\
    \   | +-----------+            |\n   | |   OPES    |            |\n   | |  service\
    \  |            |      +---------------+     +-----------+\n   | |application|\
    \            |      | Callout       |     | Callout   |\n   | +-----------+  \
    \          |      | Server A      |     | Server X  |\n   |     ||           \
    \        |      | +--------+    |     |           |\n   | +----------------------+\
    \ |      | | OPES   |    |     |           |\n   | |     data dispatcher  | |\
    \      | | Service|    |     | +--------+|\n   | +----------------------+ |  \
    \    | | Appl A |    |     | | OPES   ||\n   |      ||           ||     |    \
    \  | +--------+    |     | |Service ||\n   |  +---------+  +-------+  |      |\
    \     ||        |     | | Appl X ||\n   |  |  HTTP   |  |       |  |      | +--------+\
    \    | ... | +--------||\n   |  |         |  |  OCP  |=========| | OCP    |  \
    \  |     |    ||     |\n   |  +---------+  +-------+  |      | +--------+    |\
    \     | +------+  |\n   |  |         |     ||      |      +---------------+  \
    \   | | OCP  |  |\n   |  | TCP/IP  |     =======================================|\
    \      |  |\n   |  |         |             |                            | +------+\
    \  |\n   |  +---------+             |                            +-----------+\n\
    \   +--------||-||-------------+\n            || ||\n +--------+ || ||       \
    \                                +--------+\n |data    |==  =========================================|data\
    \    |\n |producer|                                             |consumer|\n +--------+\
    \                                             +--------+\n              Figure\
    \ 3: Interaction of OPES Entities\n"
- title: 2.5.  Tracing Facility
  contents:
  - "2.5.  Tracing Facility\n   The OPES architecture requires that each data dispatcher\
    \ provides\n   tracing facilities that allow the appropriate verification of its\n\
    \   operation.  The OPES architecture requires that tracing be feasible\n   on\
    \ the OPES flow, per OPES processor, using in-band annotation.  One\n   of those\
    \ annotations could be a URI with more detailed information on\n   the OPES services\
    \ being executed in the OPES flow.\n   Providing the ability for in-band annotation\
    \ MAY require header\n   extensions on the application protocol that is used (e.g.,\
    \ HTTP).\n   However, the presence of an OPES processor in the data request/\n\
    \   response flow SHALL NOT interfere with the operations of non-OPES\n   aware\
    \ clients and servers.  Non-OPES clients and servers need not\n   support these\
    \ extensions to the base protocol.\n   OPES processors MUST obey tracing, reporting,\
    \ and notification\n   requirements set by the center of authority in the trust\
    \ domain to\n   which an OPES processor belongs.  As part of these requirements,\
    \ the\n   OPES processor may be instructed to reject or ignore such\n   requirements\
    \ that originate from other trust domains.\n"
- title: 3. Security and Privacy Considerations
  contents:
  - "3. Security and Privacy Considerations\n   Each data flow MUST be secured in\
    \ accordance with several policies.\n   The primary stakeholders are the data\
    \ consumer and the data provider.\n   The secondary stakeholders are the entities\
    \ to which they may have\n   delegated their trust.  The other stakeholders are\
    \ the owners of the\n   callout servers.  Any of these parties may be participants\
    \ in the\n   OPES flow.\n   These parties MUST have a model, explicit or implicit,\
    \ describing\n   their trust policy, which of the other parties are trusted to\
    \ operate\n   on data, and what security enhancements are required for\n   communication.\
    \  The trust might be delegated for all data, or it\n   might be restricted to\
    \ granularity as small as an application data\n   unit.\n   All parties that are\
    \ involved in enforcing policies MUST communicate\n   the policies to the parties\
    \ that are involved.  These parties are\n   trusted to adhere to the communicated\
    \ policies.\n   In order to delegate fine-grained trust, the parties MUST convey\n\
    \   policy information by implicit contract, by a setup protocol, by a\n   dynamic\
    \ negotiation protocol, or in-line with application data\n   headers.\n"
- title: 3.1.  Trust Domains
  contents:
  - "3.1.  Trust Domains\n   The delegation of authority starts at either a data consumer\
    \ or data\n   provider and moves to more distant entities in a \"stepwise\" fashion.\n\
    \   Stepwise means A delegates to B, and B delegates to C, and so forth.\n   The\
    \ entities thus \"colored\" by the delegation are said to form a\n   trust domain\
    \ with respect to the original delegating party.  Here,\n   \"Colored\" means\
    \ that if the first step in the chain is the data\n   provider, then the stepwise\
    \ delegation \"colors\" the chain with that\n   data \"provider\" color.  The\
    \ only colors defined are the data\n   \"provider\" and the data \"consumer\"\
    .  Delegation of authority\n   (coloring) propagates from the content producer\
    \ start of authority or\n   from the content consumer start of authority, which\
    \ may be different\n   from the end points in the data flow.\n   Figure 4 illustrates\
    \ administrative domains, out-of-band rules, and\n   policy distribution.\n provider\
    \ administrative domain         consumer administrative domain\n +------------------------------+\
    \      +-------------------------------+\n | +--------------+             |  \
    \    |            +--------------+   |\n | |Provider      |      <- out-of-band\
    \ rules, ->   |Consumer      |   |\n | |Administrative|~~>~~~:  policies and \
    \        ~<~|Administrative|   |\n | |Authority     |      : service authorization\
    \ :  |Authority     |   |\n | +--------------+      :        |     |        :\
    \  +--------------+   |\n |         :             :        |     |        :  \
    \         :         |\n |         :             :        |     |        :    \
    \       :         |\n |   +----------+        :        |     |        :      \
    \  +----------+ |\n |   |  callout |    +---------+  |     |  +---------+    |\
    \  callout | |\n |   |  server  |====|         |  |     |  |         |====|  server\
    \  | |\n |   +----------+    |         |  |     |  |         |    +----------+\
    \ |\n |                   | OPES    |  |     |  | OPES    |                 |\n\
    \ |   +----------+    |processor|  |     |  |processor|   +----------+  |\n |\
    \   |          |    |         |  |     |  |         |   |          |  |\n |  \
    \ | data     |    |         |  |     |  |         |   | data     |  |\n |   |\
    \ provider |    |         |  |     |  |         |   | consumer |  |\n |   |  \
    \        |    +---------+  |     |  +---------+   +----------+  |\n |   +----------+\
    \     ||     ||   |     |   ||    ||     +----------+  |\n |        ||       \
    \   ||     ||   |     |   ||    ||         ||        |\n |        =============\
    \     =================      ===========         |\n |                       \
    \        |     |                               |\n +-------------------------------+\
    \     +-------------------------------+\n          | <----------------- OPES flow\
    \ -----------------> |\n    Figure 4: OPES administrative domains and policy distribution\n\
    \   In order to understand the trust relationships between OPES entities,\n  \
    \ each is labeled as residing in an administrative domain.  Entities\n   associated\
    \ with a given OPES flow may reside in one or more\n   administrative domains.\n\
    \   An OPES processor may be in several trust domains at any time.  There\n  \
    \ is no restriction on whether the OPES processors are authorized by\n   data\
    \ consumers and/or data providers.  The original party has the\n   option of forbidding\
    \ or limiting redelegation.\n   An OPES processor MUST have a representation of\
    \ its trust domain\n   memberships that it can report in whole or in part for\
    \ tracing\n   purposes.  It MUST include the name of the party that delegated\
    \ each\n   privilege to it.\n"
- title: 3.2.  Establishing Trust and Service Authorization
  contents:
  - "3.2.  Establishing Trust and Service Authorization\n   The OPES processor will\
    \ have a configuration policy specifying what\n   privileges the callout servers\
    \ have and how they are to be\n   identified.  OPES uses standard protocols for\
    \ authentication and\n   other security communication with callout servers.\n\
    \   An OPES processor will have a trusted method for receiving\n   configuration\
    \ information, such as rules for the data dispatcher,\n   trusted callout servers,\
    \ primary parties that opt-in or opt-out of\n   individual services, etc.\n  \
    \ Protocol(s) for policy/rule distribution are out of scope for this\n   document,\
    \ but the OPES architecture assumes the existence of such a\n   mechanism.\n \
    \  Requirements for the authorization mechanism are set in a separate\n   document\
    \ [4].\n   Service requests may be done in-band.  For example, a request to\n\
    \   bypass OPES services could be signalled by a user agent using an HTTP\n  \
    \ header string \"Bypass-OPES\".  Such requests MUST be authenticated.\n   The\
    \ way OPES entities will honor such requests is subordinate to the\n   authorization\
    \ policies effective at that moment.\n"
- title: 3.3.  Callout Protocol
  contents:
  - "3.3.  Callout Protocol\n   The determination of whether or not OPES processors\
    \ will use the\n   measures that are described in the previous section during\
    \ their\n   communication with callout servers depends on the details of how the\n\
    \   primary parties delegated trust to the OPES processors and the trust\n   relationship\
    \ between the OPES processors and the callout server.\n   Strong authentication,\
    \ message authentication codes, and encryption\n   SHOULD be used.  If the OPES\
    \ processors are in a single\n   administrative domain with strong confidentiality\
    \ and integrity\n   guarantees, then cryptographic protection is recommended but\n\
    \   optional.\n   If the delegation mechanism names the trusted parties and their\n\
    \   privileges in some way that permits authentication, then the OPES\n   processors\
    \ will be responsible for enforcing the policy and for using\n   authentication\
    \ as part of that enforcement.\n   The callout servers MUST be aware of the policy\
    \ governing the\n   communication path.  They MUST not, for example, communicate\n\
    \   confidential information to auxiliary servers outside the trust\n   domain.\n\
    \   A separate security association MUST be used for each channel\n   established\
    \ between an OPES processor and a callout server.  The\n   channels MUST be separate\
    \ for different primary parties.\n"
- title: 3.4.  Privacy
  contents:
  - "3.4.  Privacy\n   Some data from OPES flow endpoints is considered \"private\"\
    \ or\n   \"sensitive\", and OPES processors MUST advise the primary parties of\n\
    \   their privacy policy and respect the policies of the primary parties.\n  \
    \ The privacy information MUST be conveyed on a per-flow basis.  This\n   can\
    \ be accomplished by using current available privacy techniques\n   such as P3P\
    \ [7] and HTTP privacy capabilities.\n   The callout servers MUST also participate\
    \ in the handling of private\n   data, they MUST be prepared to announce their\
    \ own capabilities, and\n   enforce the policy required by the primary parties.\n"
- title: 3.5.  End-to-End Integrity
  contents:
  - "3.5.  End-to-End Integrity\n   Digital signature techniques can be used to mark\
    \ data changes in such\n   a way that a third-party can verify that the changes\
    \ are or are not\n   consistent with the originating party's policy.  This requires\
    \ an\n   inline method to specify policy and its binding to data, a trace of\n\
    \   changes and the identity of the party making the changes, and strong\n   identification\
    \ and authentication methods.\n   Strong end-to-end integrity can fulfill some\
    \ of the functions\n   required by \"tracing\".\n"
- title: 4.  IAB Architectural and Policy Considerations for OPES
  contents:
  - "4.  IAB Architectural and Policy Considerations for OPES\n   This section addresses\
    \ the IAB considerations for OPES [2] and\n   summarizes how the architecture\
    \ addresses them.\n"
- title: 4.1.  IAB Consideration (2.1) One-Party Consent
  contents:
  - "4.1.  IAB Consideration (2.1) One-Party Consent\n   The IAB recommends that all\
    \ OPES services be explicitly authorized by\n   one of the application-layer end-hosts\
    \ (that is, either the data\n   consumer application or the data provider application).\n\
    \   The current work requires that either the data consumer application\n   or\
    \ the data provider application consent to OPES services.  These\n   requirements\
    \ have been addressed in sections 2 (section 2.1) and 3.\n"
- title: 4.2.  IAB Consideration (2.2) IP-Layer Communications
  contents:
  - "4.2.  IAB Consideration (2.2) IP-Layer Communications\n   The IAB recommends\
    \ that OPES processors must be explicitly addressed\n   at the IP layer by the\
    \ end user (data consumer application).\n   This requirement has been addressed\
    \ in section 2.1, by the\n   requirement that OPES processors be addressable at\
    \ the IP layer by\n   the data consumer application.\n"
- title: 4.3.  IAB Consideration (3.1 and 3.2) Notification
  contents:
  - "4.3.  IAB Consideration (3.1 and 3.2) Notification\n   The IAB recommends that\
    \ the OPES architecture incorporate tracing\n   facilities.  Tracing enables data\
    \ consumer and data provider\n   applications to detect and respond to actions\
    \ performed by OPES\n   processors that are deemed inappropriate to the data consumer\
    \ or data\n   provider applications.\n   Section 3.2 of this document discusses\
    \ the tracing and notification\n   facilities that must be supported by OPES services.\n"
- title: 4.4.  IAB Consideration (3.3) Non-Blocking
  contents:
  - "4.4.  IAB Consideration (3.3) Non-Blocking\n   The OPES architecture requires\
    \ the specification of extensions to\n   HTTP.  These extensions will allow the\
    \ data consumer application to\n   request a non-OPES version of the content from\
    \ the data provider\n   application.  These requirements are covered in Section\
    \ 3.2.\n"
- title: 4.5.  IAB Consideration (4.1) URI Resolution
  contents:
  - "4.5.  IAB Consideration (4.1) URI Resolution\n   This consideration recommends\
    \ that OPES documentation must be clear\n   in describing OPES services as being\
    \ applied to the result of URI\n   resolution, not as URI resolution itself.\n\
    \   This requirement has been addressed in sections 2.5 and 3.2, by\n   requiring\
    \ OPES entities to document all the transformations that have\n   been performed.\n"
- title: 4.6.  IAB Consideration (4.2) Reference Validity
  contents:
  - "4.6.  IAB Consideration (4.2) Reference Validity\n   This consideration recommends\
    \ that all proposed services must define\n   their impact on inter- and intra-document\
    \ reference validity.\n   This requirement has been addressed in section 2.5 and\
    \ throughout the\n   document whereby OPES entities are required to document the\
    \ performed\n   transformations.\n"
- title: 4.7.  IAB Consideration (4.3) Application Addressing Extensions
  contents:
  - "4.7.  IAB Consideration (4.3) Application Addressing Extensions\n   This consideration\
    \ recommends that any OPES services that cannot be\n   achieved while respecting\
    \ the above two considerations may be\n   reviewed as potential requirements for\
    \ Internet application\n   addressing architecture extensions, but must not be\
    \ undertaken as ad\n   hoc fixes.\n   The current work does not require extensions\
    \ of the Internet\n   application addressing architecture.\n"
- title: 4.8.  IAB Consideration (5.1) Privacy
  contents:
  - "4.8.  IAB Consideration (5.1) Privacy\n   This consideration recommends that\
    \ the overall OPES framework must\n   provide for mechanisms for end users to\
    \ determine the privacy\n   policies of OPES intermediaries.\n   This consideration\
    \ has been addressed in section 3.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The proposed work has to deal with security from\
    \ various\n   perspectives.  There are security and privacy issues that relate\
    \ to\n   data consumer application, callout protocol, and the OPES flow.  In\n\
    \   [6], there is an analysis of the threats against OPES entities.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   The proposed work will evaluate current protocols\
    \ for OCP.  If the\n   work determines that a new protocol needs to be developed,\
    \ then there\n   may be a need to request new numbers from IANA.\n"
- title: 7.  Summary
  contents:
  - "7.  Summary\n   Although the architecture supports a wide range of cooperative\n\
    \   transformation services, it has few requirements for\n   interoperability.\n\
    \   The necessary and sufficient elements are specified in the following\n   documents:\n\
    \   o  the OPES ruleset schema, which defines the syntax and semantics of\n  \
    \    the rules interpreted by a data dispatcher; and,\n   o  the OPES callout\
    \ protocol (OCP) [5], which defines the\n      requirements for the protocol between\
    \ a data dispatcher and a\n      callout server.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [1]  Barbir, A., Burger, E., Chen, R., McHenry,\
    \ S., Orman, H., and R.\n        Penno, \"Open Pluggable Edge Services (OPES)\
    \ Use Cases and\n        Deployment Scenarios\", RFC 3752, April 2004.\n   [2]\
    \  Floyd, S. and L. Daigle, \"IAB Architectural and Policy\n        Considerations\
    \ for Open Pluggable Edge Services\", RFC 3238,\n        January 2002.\n   [3]\
    \  Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L.,\n        Leach,\
    \ P., and T. Berners-Lee, \"Hypertext Transfer Protocol --\n        HTTP/1.1\"\
    , RFC 2616, June 1999.\n   [4]  Barbir, A., Batuner, O., Beck, A., Chan, T., and\
    \ H. Orman,\n        \"Policy, Authorization, and Enforcement Requirements of\
    \ the Open\n        Pluggable Edge Services (OPES)\", RFC 3838, August 2004.\n\
    \   [5]  Beck, A., Hofmann, M., Orman, H., Penno, R., and A. Terzis,\n       \
    \ \"Requirements for Open Pluggable Edge Services (OPES) Callout\n        Protocols\"\
    , RFC 3836, August 2004.\n   [6]  Barbir, A., Batuner, O., Srinivas, B., Hofmann,\
    \ M., and H.\n        Orman, \"Security Threats and Risks for Open Pluggable Edge\n\
    \        Services (OPES)\", RFC 3837, August 2004.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [7]  Cranor, L. et. al, \"The Platform for Privacy\
    \ Preferences 1.0\n        (P3P1.0) Specification\", W3C Recommendation 16\n \
    \       http://www.w3.org/TR/2002/REC-P3P-20020416/, April 2002.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   This document is the product of OPES WG.  Oskar Batuner\
    \ (Independent\n   consultant) and Andre Beck (Lucent) are additional authors\
    \ that have\n   contributed to this document.\n   Earlier versions of this work\
    \ were done by Gary Tomlinson (The\n   Tomlinson Group) and Michael Condry (Intel).\n\
    \   The authors gratefully acknowledge the contributions of: John Morris,\n  \
    \ Mark Baker, Ian Cooper and Marshall T. Rose.\n"
- title: 10.  Authors' Addresses
  contents:
  - "10.  Authors' Addresses\n   Abbie Barbir\n   Nortel Networks\n   3500 Carling\
    \ Avenue\n   Nepean, Ontario  K2H 8E9\n   Canada\n   Phone: +1 613 763 5229\n\
    \   EMail: abbieb@nortelnetworks.com\n   Yih-Farn Robin Chen\n   AT&T Labs - Research\n\
    \   180 Park Avenue\n   Florham Park, NJ  07932\n   US\n   Phone: +1 973 360 8653\n\
    \   EMail: chen@research.att.com\n   Markus Hofmann\n   Bell Labs/Lucent Technologies\n\
    \   Room 4F-513\n   101 Crawfords Corner Road\n   Holmdel, NJ  07733\n   US\n\
    \   Phone: +1 732 332 5983\n   EMail: hofmann@bell-labs.com\n   Hilarie Orman\n\
    \   Purple Streak Development\n   EMail: ho@alum.mit.edu\n   Reinaldo Penno\n\
    \   Nortel Networks\n   600 Technology Park Drive\n   Billerica, MA 01821\n  \
    \ USA\n   EMail: rpenno@nortelnetworks.com\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\
    \  This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78, and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n\
    \   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
