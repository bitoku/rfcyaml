- title: __initial_text__
  contents:
  - "                     Overview of IP Multicast in a\n           Multi-Protocol\
    \ Label Switching (MPLS) Environment\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document offers a framework for IP multicast deployment in\
    \ an\n   MPLS environment.  Issues arising when MPLS techniques are applied to\n\
    \   IP multicast are overviewed.  The pros and cons of existing IP\n   multicast\
    \ routing protocols in the context of MPLS are described and\n   the relation\
    \ to the different trigger methods and label distribution\n   modes are discussed.\
    \  The consequences of various layer 2 (L2)\n   technologies are listed.  Both\
    \ point-to-point and multi-access\n   networks are considered.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.     Introduction .............................................\
    \  3\n   2.     Layer 2 Characteristics ..................................  4\n\
    \   3.     Taxonomy of IP Multicast Routing Protocols\n          in the Context\
    \ of MPLS ...................................  5\n   3.1.   Aggregation ..............................................\
    \  5\n   3.2.   Flood & Prune ............................................  5\n\
    \   3.3.   Source/Shared Trees ......................................  6\n   3.4.\
    \   Co-existence of Source and Shared Trees ..................  7\n   3.5.   Uni/Bi-directional\
    \ Shared Trees .......................... 10\n   3.6.   Encapsulated Multicast\
    \ Data .............................. 11\n   3.7.   Loop-free-ness ...........................................\
    \ 11\n   3.8.   Mapping of Characteristics on Existing Protocols ......... 11\n\
    \   4.     Mixed L2/L3 Forwarding in a Single Node .................. 12\n   5.\
    \     Taxonomy of IP Multicast LSP Triggers .................... 14\n   5.1. \
    \  Request Driven ........................................... 14\n   5.1.1. General\
    \ .................................................. 14\n   5.1.2. Multicast Routing\
    \ Messages ............................... 15\n   5.1.3. Resource Reservation\
    \ Messages ............................ 15\n   5.2.   Topology Driven ..........................................\
    \ 16\n   5.3.   Traffic Driven ........................................... 16\n\
    \   5.3.1. General .................................................. 16\n   5.3.2.\
    \ An Implementation Example ................................ 17\n   5.4.   Combinations\
    \ of Triggers and Label Distribution Modes .... 18\n   6.     Piggy-backing ............................................\
    \ 18\n   7.     Explicit Routing ......................................... 20\n\
    \   8.     QoS/CoS .................................................. 20\n   8.1.\
    \   DiffServ ................................................. 20\n   8.2.   IntServ\
    \ and RSVP ......................................... 21\n   9.     Multi-access\
    \ Networks .................................... 21\n   10.    More Issues ..............................................\
    \ 22\n   10.1.  TTL Field ................................................ 22\n\
    \   10.2.  Independent vs. Ordered Label Distribution Control ....... 23\n   10.3.\
    \  Conservative vs. Liberal Label Retention Mode ............ 24\n   10.4.  Downstream\
    \ vs. Upstream Label Allocation ................. 25\n   10.5.  Explicit vs. Implicit\
    \ Label Distribution ................. 25\n   11.    Security Considerations ..................................\
    \ 26\n   12.    Acknowledgements ......................................... 26\n\
    \   Informative References........................................... 27\n   Authors'\
    \ Addresses .............................................. 28\n   Full Copyright\
    \ Statement ........................................ 30\n"
- title: Table of Abbreviations
  contents:
  - "Table of Abbreviations\n   ATM     Asynchronous Transfer Node\n   CBT     Core\
    \ Based Tree\n   CoS     Class of Service\n   DLCI    Data Link Connection Identifier\n\
    \   DRrecv  Designated Router of the receiver\n   DRsend  Designated Router of\
    \ the sender\n   DVMRP   Distant Vector Multicast Routing Protocol\n   FR    \
    \  Frame Relay\n   IGMP    Internet Group Management Protocol\n   IP      Internet\
    \ Protocol\n   L2      layer 2 (e.g. ATM, Frame Relay)\n   L3      layer 3 (e.g.\
    \ IP)\n   LSP     Label Switched Path\n   LSR     Label Switching Router\n   LSRd\
    \    Downstream LSR\n   LSRu    Upstream LSR\n   MOSPF   Multicast OSPF\n   mp2mp\
    \   multipoint-to-multipoint\n   MRT     Multicast Routing Table\n   p2mp    point-to-multipoint\n\
    \   PIM-DM  Protocol Independent Multicast-Dense Mode\n   PIM-SM  Protocol Independent\
    \ Multicast-Sparse Mode\n   QoS     Quality of Service\n   RP      Rendezvous\
    \ Point\n   RPT-bit RP Tree bit [DEER]\n   RSVP    Resource reSerVation Protocol\n\
    \   SPT-bit Shortest Path Tree [DEER]\n   SSM     Source Specific Multicast\n\
    \   TCP     Transmission Control Protocol\n   UDP     User Datagram Protocol\n\
    \   VC      Virtual Circuit\n   VCI     Virtual Circuit Identifier\n   VP    \
    \  Virtual Path\n   VPI     Virtual Path Identifier\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   In an MPLS cloud the routes are determined by a L3 routing\
    \ protocol.\n   These routes can then be mapped onto L2 paths to enhance network\n\
    \   performance.  Besides this, MPLS offers a vehicle for enhanced\n   network\
    \ services such as QoS/CoS, traffic engineering, etc.\n   Current unicast routing\
    \ protocols generate a same (optimal) shortest\n   path in steady state for a\
    \ certain (source, destination) pair.\n   Remark that unicast protocols can behave\
    \ slightly different with\n   regard to equal cost paths.\n   For multicast, the\
    \ optimal solution (minimum cost to interconnect N\n   nodes) would impose a Steiner\
    \ tree computation.  Unfortunately, no\n   multicast routing protocol today is\
    \ able to maintain such an optimal\n   tree.  Different multicast protocols will\
    \ therefore, in general,\n   generate different trees.\n   The discussion is focused\
    \ on intra-domain multicast routing\n   protocols.  Aspects of inter-domain routing\
    \ are beyond the scope of\n   this document.\n"
- title: 2. Layer 2 Characteristics
  contents:
  - "2. Layer 2 Characteristics\n   Although MPLS is multiprotocol both at L3 and\
    \ at L2, in practice IP\n   is the only considered L3 protocol.  MPLS can run\
    \ on top of several\n   L2 technologies (PPP/Sonet, Ethernet, ATM, FR, ...).\n\
    \   When label switching is mapped on L2 switching capabilities (e.g.\n   VPI/VCI\
    \ is used as label), attention is mainly focused on the mapping\n   to ATM [DAVI].\
    \  ATM offers high switching capacities and QoS\n   awareness, but in the context\
    \ of MPLS it poses several limitations\n   which are described in [DAVI].  Similar\
    \ considerations are made for\n   Frame Relay on L2 in [CONT].  The limitations\
    \ can be summarized as:\n   - Limited Label Space:  either the standardized or\
    \ the implemented\n     number of bits available for a label can be small (e.g.\
    \ VPI/VCI\n     space, DLCI space), limiting the number of LSPs that can be\n\
    \     established.\n   - Merging:  some L2 technologies or implementations of\
    \ these\n     technologies do not support multipoint-to-point and/or\n     multipoint-to-multipoint\
    \ 'connections', obstructing the merging of\n     LSPs.\n   - TTL:  L2 technologies\
    \ do not support a 'TTL-decrement' function.\n   All three limitations can impact\
    \ the implementation of multicast in\n   MPLS as will be described in this document.\n\
    \   When native MPLS is deployed the above limitations vanish.  Moreover\n   on\
    \ PPP and Ethernet links the same label can be used at the same time\n   for a\
    \ unicast and a multicast LSP because different EtherTypes for\n   MPLS unicast\
    \ and multicast are defined [ROSE].\n"
- title: 3. Taxonomy of IP Multicast Routing Protocols in the Context of MPLS
  contents:
  - "3. Taxonomy of IP Multicast Routing Protocols in the Context of MPLS\n   At the\
    \ moment, an abundance of IP multicast routing protocols is\n   being proposed\
    \ and developed.  All these protocols have different\n   characteristics (scalability,\
    \ computational complexity, latency,\n   control message overhead, tree type,\
    \ etc...).  It is not the purpose\n   of this document to give a complete taxonomy\
    \ of IP multicast routing\n   protocols, only their characteristics relevant to\
    \ the MPLS technology\n   will be addressed.\n   The following characteristics\
    \ are considered:\n   - Aggregation\n   - Flood & Prune\n   - Source/Shared trees\n\
    \   - Co-existence of Source and Shared Trees\n   - Uni/Bi-directional shared\
    \ trees\n   - Encapsulated multicast data\n   - Loop-free-ness\n   The discussion\
    \ of these characteristics will not lead to the\n   selection of one superior\
    \ multicast routing protocol.  It is not\n   impossible that different IP multicast\
    \ routing protocols will be\n   deployed in the Internet.\n"
- title: 3.1. Aggregation
  contents:
  - "3.1. Aggregation\n   In unicast different destination addresses are aggregated\
    \ to one\n   entry in the routing table, yielding one FEC and one LSP.\n   The\
    \ granularity of multicast streams is (*, G) for a shared tree and\n   (S, G)\
    \ for a source tree, S being the source address and G the\n   multicast group\
    \ address.  Aggregation of multicast trees with\n   different multicast 'destination'\
    \ addresses on one LSP is a subject\n   for further study.\n"
- title: 3.2. Flood & Prune
  contents:
  - "3.2. Flood & Prune\n   To establish a multicast tree some IP multicast routing\
    \ protocols\n   (e.g. DVMRP, PIM-DM) flood the network with multicast data.  The\n\
    \   branches can then be pruned by nodes which do not want to receive the\n  \
    \ data of the specific multicast group.  This process is repeated\n   periodically.\n\
    \   Flood & Prune multicast routing protocols have some characteristics\n   which\
    \ significantly differ from unicast routing protocols:\n   a) Volatile.  Due to\
    \ the Flood & Prune nature of the protocol, very\n      volatile tree structures\
    \ are generated.  Solutions to map a\n      dynamic L3 p2mp tree to a L2 p2mp\
    \ LSP need to be efficient in\n      terms of signaling overhead and LSP setup\
    \ time.  The volatile L2\n      LSP will consume a lot of labels throughout the\
    \ network, which is\n      a disadvantage when label space is limited.\n   b)\
    \ Traffic-driven.  The router only creates state for a certain group\n      when\
    \ data arrives for that group.  Routers also independently\n      decide to remove\
    \ state when an inactivity timer expires.\n      - Thus LSPs can not be pre-established\
    \ as is usually done in\n        unicast.  To minimize the time between traffic\
    \ arrival and LSP\n        establishment a fast LSP setup method is favorable.\n\
    \      - Since creation and deletion of a L3 route at each node is\n        triggered\
    \ by traffic, this suggests that the LSP associated with\n        the route be\
    \ setup and torn down in a traffic-driven manner as\n        well.\n      - If\
    \ an LSR does not support L3 forwarding this traffic-driven\n        nature even\
    \ requires that the upstream LSR takes the initiative\n        to create an LSP\
    \ (Upstream Unsolicited or Downstream on Demand\n        label advertisement).\n"
- title: 3.3. Source/Shared Trees
  contents:
  - "3.3. Source/Shared Trees\n   IP multicast routing protocols create either source\
    \ trees (S, G),\n   i.e. a tree per source (S) and per multicast group (G), or\
    \ shared\n   trees (*, G), i.e. one tree per multicast group (Figure 1).\n   \
    \             R1                         R1           R1\n         S1    /   \
    \                       /            /\n          \\   /                     \
    \     /            /\n           \\ /                          /            /\n\
    \            C---R2                    S1---R2      S2---R2\n           / \\ \
    \                         \\            \\\n          /   \\                 \
    \         \\            \\\n        S2     \\                          \\    \
    \        \\\n                R3                         R3           R3\n    \
    \              Figure 1. Shared tree and Source trees\n   The advantage of using\
    \ shared trees, when label switching is applied,\n   is that shared trees consume\
    \ less labels than source trees (1 label\n   per group versus 1 label per source\
    \ and per group).\n   However, mapping a shared tree end-to-end on L2 implies\
    \ setting up\n   multipoint-to-multipoint (mp2mp) LSPs.  The problem of implementing\n\
    \   mp2mp LSPs boils down to the merging problem discussed earlier.\n   Note that\
    \ in practice shared trees are often only used to discover\n   new sources of\
    \ the group and a switchover to a source tree is made at\n   very low bitrates.\n"
- title: 3.4. Co-existence of Source and Shared Trees
  contents:
  - "3.4. Co-existence of Source and Shared Trees\n   Some protocols support both\
    \ source and shared trees (e.g. PIM-SM) and\n   one router can maintain both (*,\
    \ G) and (S, G) state for the same\n   group G.  Two cases of state co-existence\
    \ are described below.\n   Assume topologies with senders Si and receivers Ri.\
    \  RP is the\n   Rendezvous Point.  Ni are LSRs.  The numbers are the interface\n\
    \   numbers, \"Reg\" is the Register interface.  All IGMP and PIM\n   Join/Prune\
    \ messages are shown in the figures.  It is also indicated\n   whether the RPT-bit\
    \ is set for the (S, G) state.\n   1) Figure 2 shows a switchover from shared\
    \ to source tree.  Assume\n      that the shortest path from R1 to RP is via N1-N2-N5.\
    \  N1, the\n      Designated Router of receiver R1 (DRrecv), decides to initiate\
    \ a\n      source tree for source S1.  After the arrival of data via the\n   \
    \   source tree in N2, N2 will send a prune to N5 for source S1.\n      State\
    \ co-existence occurs in the node where the overlap of shared\n      and source\
    \ tree starts (N2) and in the node where S1 does not need\n      forwarding on\
    \ the shared tree anymore (N5).\n                  PJ\n          IJ      PJS \
    \    PJS\n           -> 1  2 -> 1  2 -> 1  2\n       R1-----N1------N2------N3----S1\n\
    \                     3|       |3            IJ=Igmp Join\n                  \
    \    ||PPS   |             PJ=Pim Join (*,G)\n                      |vPJ    |\
    \             PJS=Pim Join (S1,G)\n           IJ     PJ  |    PJ |           \
    \  PPS=Pim Prune (S1,G)\n           ->     ->  |3   -> |\n       R2-----N4------N5------RP----S2\n\
    \             1  2    1  2    1\n                                 Figure 2\n \
    \  The multicast routing states created in the Multicast Routing Table\n   (MRT)\
    \ are:\n     in RP: (*,G):Reg->1   (i.e. incoming itf=Reg; outgoing itf=1)\n \
    \    in N1: (*,G):2->1\n     in N2: (*,G):3->1\n            (S1,G):2->1\n    \
    \ in N3: (S1,G):2->Reg,1\n     in N4: (*,G):2->1\n     in N5: (*,G):2->1,3\n \
    \           (S1,G)RPT-bit:2->1\n   2) Figure 3 shows that even without a switchover,\
    \ state co-existence\n      can occur.  Multicast traffic from a sender will create\
    \ (S, G)\n      state in the Designated Router of the sender (DRsend; N3 in Figure\n\
    \      3 is the DRsend of S).  Each node on a shared-tree has (*, G)\n      state.\
    \  Thus an on-tree DRsend has both (*, G) and (S, G) state.\n      If the DRsend\
    \ is on-tree it will also send a prune for S towards\n      the RP, creating (S,\
    \ G) state in all nodes until the first router\n      which has a branch (N1 and\
    \ N2 in Figure 3).\n                             S\n                    PPS  PPS\
    \ |\n             PJ     PJ    PJ |2 PJ    IJ\n           1 <- 1  3<-    <- |\
    \  <-    <-            PJ=Pim Join\n         RP------N1----N2----N3----N4----R1\
    \         IJ=Igmp Join\n                ^|2   1  2  1  3  1  2              PPS=Pim\
    \ Prune (S,G)\n              PJ||  IJ\n                1|  <-\n              \
    \   N5----R2\n                    2\n                                   Figure\
    \ 3\n      The multicast routing states created in the MRT are:\n        in RP:\
    \ (*,G):Reg->1   (i.e. incoming itf=Reg; outgoing itf=1)\n        in N1: (*,G):1->2,3\n\
    \               (S,G)RPT-bit:1->2\n        in N2: (*,G):1->2\n               (S,G)RPT-bit:1->none\n\
    \        in N3: (*,G):1->3\n               (S,G):2->Reg,3\n        in N4: (*,G):1->2\n\
    \        in N5: (*,G):1->2\n      In the examples one can observe that two types\
    \ of state co-\n      existence occur:\n   1) (S, G) with RPT-bit not set (N2\
    \ in Figure 2, N3 in Figure 3).  The\n      (*, G) and (S, G) state have different\
    \ incoming interfaces, but\n      some common outgoing interfaces.  It is possible\
    \ that the traffic\n      of S arrives on both the (*, G) and (S, G) interfaces.\
    \  In normal\n      L3 forwarding the (S, G)SPT-bit entry prohibits the forwarding\
    \ of\n      the traffic from S arriving on the (*, G) incoming interface.  The\n\
    \      traffic of S can only temporarily arrive on the incoming\n      interfaces\
    \ of both the (*, G) and (S, G) entries (until N5 in\n      Figure 2 and N1 in\
    \ Figure 3 have processed the prune messages).\n      To avoid the temporary forwarding\
    \ of duplicate packets L3\n      forwarding can be applied in this type of node.\
    \  If one does not\n      mind the temporary duplicate packets L2 forwarding can\
    \ be applied.\n      In this case the (*, G) and (S, G) streams have to be merged\
    \ into\n      the (*, G) LSP on their common outgoing interfaces.\n   2) (S, G)\
    \ with RPT-bit set (N5 in Figure 2, N1 in Figure 3).  The\n      (*, G) and (S,\
    \ G) state have the same incoming interface.  The (S,\n      G) traffic must be\
    \ extracted from the (*, G) stream.  In MPLS this\n      state co-existence can\
    \ be handled in several ways.  Four\n      approaches to this problem will be\
    \ described:\n      a) A first method to handle this state co-existence is to\n\
    \         terminate the LSPs and forward all traffic of this group at L3.\n  \
    \       However a return to L3 can be avoided in case a (S, G) entry\n       \
    \  without an outgoing interface is added to the MRT (N2 in Figure\n         3).\
    \  This entry will only receive traffic temporarily.  In this\n         particular\
    \ case one could ignore the (S, G) state and maintain\n         the existing (*,\
    \ G) LSP, the disadvantage being duplicate\n         traffic for a very short\
    \ time.\n      b) A second approach is to assign source specific labels on the\n\
    \         nodes of the shared tree.  Multiple labels will be associated\n    \
    \     with one (*, G) entry, corresponding to one label per active\n         source.\
    \  Since the nodes only know which sources are active\n         when traffic from\
    \ these sources arrives, the LSPs cannot be\n         pre-established and a fast\
    \ LSP setup method is favorable.\n      c) A third way is that only source trees\
    \ are labelswitched and\n         that traffic on the shared tree is always forwarded\
    \ at L3.\n         This assumes that the shared tree is only used as a way for\
    \ the\n         receivers to find out who the sources are.  By configuring a\n\
    \         low bitrate switchover threshold, one can ensure that the\n        \
    \ receivers switchover to source trees very quickly.\n      d) In the fourth approach,\
    \ an LSR which has (S, G) RPT-bit state\n         with a non-null oif, advertises\
    \ a label for (S, G) to the\n         upstream LSR and this label advertisement\
    \ is then propagated by\n         each upstream LSR towards the RP.  In this way\
    \ a dedicated LSP\n         is created for (S, G) traffic from the RP to the LSR\
    \ with the\n         (S, G) RPT-bit state.  In the latter LSR, the (S, G) LSP\
    \ is\n         merged onto the (*, G) LSP for the appropriate outgoing\n     \
    \    interfaces.  This ensures that (S, G) packets traveling on the\n        \
    \ shared tree do not make it past any LSR which has pruned S.\n"
- title: 3.5. Uni/Bi-directional Shared Trees
  contents:
  - "3.5. Uni/Bi-directional Shared Trees\n   Bidirectional shared trees (e.g. CBT\
    \ [BALL]) have the disadvantage of\n   creating a lot of merging points (M) in\
    \ the nodes (N) of the shared\n   tree.  Figure 4 shows these merging points resulting\
    \ from 2 senders\n   S1 and S2 on a bidirectional tree.\n                 S1 \
    \                  S2\n                 ||                   ||\n            \
    \     v| <-   <-   <-   <- |v\n          <-   <- | ->   ->   ->   -> | ->\n  \
    \        ----N----M----M----M----M----M----N\n             ||   ||   ||   || \
    \  ||   ||\n             |v   |v   |v   |v   |v   |v\n             |    |    |\
    \    |    |    |\n                                Figure 4.\n      Multicast traffic\
    \ flows from 2 senders on a bidirectional tree\n   In Figure 5 the same situation\
    \ for unidirectional shared trees is\n   depicted.  In this case the data of the\
    \ senders is tunneled towards\n   the root node R, yielding only a single merging\
    \ point, namely the\n   root of the shared tree itself.\n                 S1\n\
    \          tunnel ||                  S2\n          <----- v|       tunnel   \
    \  ||\n      to R<------------------------- v|\n          ->   -> | ->   ->  \
    \ ->   -> | ->\n          ----N----N----N----N----N----N----N\n             ||\
    \   ||   ||   ||   ||   ||\n             |v   |v   |v   |v   |v   |v\n       \
    \      |    |    |    |    |    |\n                                Figure 5.\n\
    \      Multicast traffic flows from 2 senders on a unidirectional tree\n"
- title: 3.6. Encapsulated Multicast Data
  contents:
  - "3.6. Encapsulated Multicast Data\n   Sources of unidirectional shared trees and\
    \ non-member sources of\n   bidirectional shared trees encapsulate the data towards\
    \ the root\n   node.  The data is then decapsulated in the root node.  The\n \
    \  encapsulation and decapsulation of multicast data are L3 processes.\n   Thus\
    \ in case of encapsulation/decapsulation a path can never be\n   mapped onto an\
    \ end-to-end LSP:  the traffic can not be forwarded on\n   L2 on the Register\
    \ interface of the DRsend (encapsulation), nor can\n   it cross the root (decapsulation)\
    \ at L2.\n   Remarks:\n   1) If the LSR supports mixed L2/L3 forwarding (section\
    \ 4), the (S, G)\n      traffic in DRsend can still be forwarded at L2 on all\
    \ outgoing\n      interfaces other than the Register interface.\n   2) The encapsulated\
    \ traffic can also benefit from MPLS by label\n      switching the tunnels.\n\
    \   3) If the root node decides to join the source (to avoid\n      encapsulation/decapsulation),\
    \ an end-to-end (S, G) LSP can be\n      constructed.\n"
- title: 3.7. Loop-free-ness
  contents:
  - "3.7. Loop-free-ness\n   Multicast routing protocols which depend on a unicast\
    \ routing\n   protocol suffer from the same transient loops as the unicast\n \
    \  protocols do, however the effect of loops will be much worse in the\n   case\
    \ of multicast.  The reason being, each time a multicast packet\n   goes around\
    \ a loop, copies of the packet may be emitted from the loop\n   if branches exist\
    \ in the loop.\n   Currently loop detection is a configurable option in LDP and\
    \ a\n   decision on the mechanism for loop prevention is postponed.\n"
- title: 3.8. Mapping of Characteristics on Existing Protocols
  contents:
  - "3.8. Mapping of Characteristics on Existing Protocols\n   The above characteristics\
    \ are summarized in Table 1 for a\n   non-exhaustive list of existing IP multicast\
    \ routing protocols:\n   DVMRP [PUSA], MOSPF [MOY], CBT [BALL], PIM-DM [ADAM],\
    \ PIM-SM [DEER],\n   SSM [HOLB], SM [PERL].\n   +------------------+------+------+------+------+------+------+------+\n\
    \   |                  |DVMRP |MOSPF |CBT   |PIM-DM|PIM-SM|SSM   |SM    |\n  \
    \ +------------------+------+------+------+------+------+------+------+\n   |Aggregation\
    \       |no    |no    |no    |no    |no    |no    |no    |\n   +------------------+------+------+------+------+------+------+------+\n\
    \   |Flood & Prune     |yes   |no    |no    |yes   |no    |no    |option|\n  \
    \ +------------------+------+------+------+------+------+------+------+\n   |Tree\
    \ Type         |source|source|shared|source|both  |source|shared|\n   +------------------+------+------+------+------+------+------+------+\n\
    \   |State Co-existence|no    |no    |no    |no    |yes   |no    |no    |\n  \
    \ +------------------+------+------+------+------+------+------+------+\n   |Uni/Bi-directional|N/A\
    \   |N/A   |bi    |N/A   |uni   |uni   |bi    |\n   +------------------+------+------+------+------+------+------+------+\n\
    \   |Encapsulation     |no    |no    |yes   |no    |yes   |no    |yes   |\n  \
    \ +------------------+------+------+------+------+------+------+------+\n   |Loop\
    \ Free         |no    |no    |no    |no    |no    |no    |no    |\n   +------------------+------+------+------+------+------+------+------+\n\
    \            Table 1. Taxonomy of IP Multicast Routing Protocols\n   From Table\
    \ 1 one can derive e.g. that DVMRP will consume a lot of\n   labels when the Flood\
    \ & Prune L3 tree is mapped onto a L2 tree.\n   Furthermore since DVMRP uses source\
    \ trees it experiences no merging\n   problem when label switching is applied.\
    \  The table can be\n   interpreted in the same way for the other protocols.\n"
- title: 4. Mixed L2/L3 Forwarding in a Single Node
  contents:
  - "4. Mixed L2/L3 Forwarding in a Single Node\n   Since unicast traffic has one\
    \ incoming and one outgoing interface the\n   traffic is either forwarded at L2\
    \ OR at L3 (Figure 6).  Because\n   multicast traffic can be forwarded to more\
    \ than one outgoing\n   interface one can consider the case that traffic to some\
    \ branches is\n   forwarded on L2 and to other branches on L3 (Figure 7).\n  \
    \                +--------+            +--------+\n                  |   L3  \
    \ |            |   L3   |\n                  |  +>>+  |            |        |\n\
    \                  |  |  |  |            |        |\n                  +--|--|--+\
    \            +--------+\n                  |  |  |  |            |        |\n\
    \              ->-----+  +----->     ->------>>----->\n                  |   L2\
    \   |            |   L2   |\n                  +--------+            +--------+\n\
    \              Figure 6. Unicast forwarding on resp. L3 or L2\n            +--------+\
    \          +--------+         +--------+\n            |   L3   |          |  \
    \ L3   |         |   L3   |\n            |  +>>++ |          |  +>>+  |      \
    \   |        |\n            |  |  || |          |  |  |  |         |        |\n\
    \            +--|--||-+          +--|--|--+         +--------+\n            |\
    \  |  |+---->       |  |  +----->      |      +---->\n        ->-----+  |  | \
    \         |  |L2   |      ->----->>-+ |\n            |   L2+----->   ->-----+>>------>\
    \      |   L2 +---->\n            +--------+          +--------+         +--------+\n\
    \       Figure 7. Multicast forwarding on resp. L3, mixed L2/L3 or L2\n   Nodes\
    \ that support this 'mixed L2/L3 forwarding' feature allow\n   splitting of a\
    \ multicast tree into branches in which some are\n   forwarded at L3 while others\
    \ are switched at L2.\n   The L3 forwarding has to take care that the traffic\
    \ is not forwarded\n   on those branches that already get their traffic on L2.\
    \  This can be\n   accomplished by e.g. providing an extra bit in the Multicast\
    \ Routing\n   Table.\n   Although the mixed L2/L3 forwarding requires processing\
    \ of the\n   traffic at L3, the load on the L3 forwarding engine is generally\
    \ less\n   than in a pure L3 node.\n   Supporting this 'mixed L2/L3 forwarding'\
    \ feature has the following\n   advantages:\n   a) Assume LSR A (Figure 8) is\
    \ an MPLS edge node for the branch\n      towards LSR B and an MPLS core node\
    \ for the branch towards LSR C.\n      The mixed L2/L3 forwarding allows that\
    \ the branch towards C is not\n      disturbed by a return to L3 in LSR A.\n \
    \                          +-------------+\n                           | MPLS\
    \ cloud  |\n                           |     N       |\n                     \
    \      |    / \\      |\n                           |   /   \\     |\n       \
    \                    |  /     \\    |\n                           | A       N\
    \   |\n                           |/ \\       \\  |\n                        \
    \   |   \\       \\ |\n                          /|    \\        |\n         \
    \                B |     C       |\n                           |             |\n\
    \                           +-------------+\n                Figure 8.  Mixed\
    \ L2/L3 forwarding in node A\n   b) Enables the use of the traffic driven trigger\
    \ with the Downstream\n      Unsolicited or Upstream on Demand label distribution\
    \ mode, as\n      explained in section 5.3.1.\n"
- title: 5. Taxonomy of IP Multicast LSP Triggers
  contents:
  - "5. Taxonomy of IP Multicast LSP Triggers\n   The creation of an LSP for multicast\
    \ streams can be triggered by\n   different events, which can be mapped on the\
    \ well known categories of\n   'request driven', 'topology driven' and 'traffic\
    \ driven'.\n   a) Request driven:  intercept the sending or receiving of control\n\
    \      messages (e.g. multicast routing messages, resource reservation\n     \
    \ messages).\n   b) Topology driven:  map the L3 tree, which is available in the\n\
    \      Multicast Routing Table, to a L2 tree.  The mapping is done even\n    \
    \  if there is no traffic.\n   c) Traffic driven:  the L3 tree is mapped onto\
    \ a L2 tree when data\n      arrives on the tree.\n"
- title: 5.1. Request Driven
  contents:
  - '5.1. Request Driven

    '
- title: 5.1.1. General
  contents:
  - "5.1.1. General\n   The establishment of LSPs can be triggered by the interception\
    \ of\n   outgoing (requiring that the label is requested by the downstream\n \
    \  LSR) or incoming (requiring that the label is requested by the\n   upstream\
    \ LSR) control messages.  Figure 9 illustrates these two\n   cases.\n        \
    \   LSRu              LSRd      LSRu              LSRd\n       -------+      \
    \        +---      ---+              +-------\n              |   control    |\
    \            |   control    |\n       <---*<-----message-------      <-------message-------*----\n\
    \           |  |              |            |              |  |\n    trigger| \
    \ |              |            |              |  |trigger\n           |  |    bind\
    \      |            |    bind      |  |\n           +--------or--------->    \
    \  <---------or----------+\n              | bind-request |            | bind-request\
    \ |\n              |              |            |              |\n            \
    \  |              |            |              |\n              |----data----->|\
    \            |-----data---->|\n                  incoming                    outgoing\n\
    \                     Figure 9. Request driven trigger\n      (interception of\
    \ resp. incoming and outgoing control messages)\n   The downstream LSR (LSRd)\
    \ sends a control message to the upstream LSR\n   (LSRu).  In the case that incoming\
    \ control messages are intercepted\n   and the MPLS module in LSRu decides to\
    \ establish an LSP, it will send\n   an LDP bind (Upstream Unsolicited mode) or\
    \ an LDP bind request\n   (Downstream on Demand mode) to LSRd.\n   Currently,\
    \ for multicast, we can identify two important types of\n   control messages:\
    \  the multicast routing messages and the resource\n   reservation messages.\n"
- title: 5.1.2. Multicast Routing Messages
  contents:
  - "5.1.2. Multicast Routing Messages\n   In principle, this mechanism can only be\
    \ used by IP multicast routing\n   protocols which use explicit signaling:  e.g.\
    \ the Join messages in\n   PIM-SM or CBT.  Remark that DVMRP and PIM-DM can be\
    \ adapted to\n   support this type of trigger [FARI], however, at the cost of\n\
    \   modifying the IP multicast routing protocol itself!\n   IP multicast routing\
    \ messages can create both hard states (e.g. CBT\n   Join + CBT Join-Ack) and\
    \ soft states (e.g. PIM-SM Joins are sent\n   periodically).  The latter generates\
    \ more control traffic for tree\n   maintenance and thus requires more processing\
    \ in the MPLS module.\n   Triggers based on the multicast routing protocol messages\
    \ have the\n   disadvantage that the 'routing calculations' performed by the\n\
    \   multicast routing daemon to determine the Multicast Routing Table are\n  \
    \ repeated by the MPLS module.  The former determines the tree that\n   will be\
    \ used at L3, the latter calculates an identical tree to be\n   used by L2.  Since\
    \ the same task is performed twice, it is better to\n   create the multicast LSP\
    \ on the basis of information extracted from\n   the Multicast Routing Table itself\
    \ (see section 5.2 and 5.3).  The\n   routing calculations become more complex\
    \ for protocols which support\n   a switch-over from a (*, G) tree to a (S, G)\
    \ tree because more\n   messages have to be interpreted.\n   When a host has a\
    \ point-to-point connection to the first router one\n   could create 'LSPs up\
    \ to the end-user' by intercepting not only the\n   multicast routing messages\
    \ but the IGMP Join/Prune messages ([FENN])\n   as well.\n"
- title: 5.1.3. Resource Reservation Messages
  contents:
  - "5.1.3. Resource Reservation Messages\n   As is the case for unicast the RSVP\
    \ Resv message can be used as a\n   trigger to establish LSPs.  A source of a\
    \ multicast group will send\n   an RSVP Path message down the tree, the receivers\
    \ can then reply with\n   an RSVP Resv message.  RSVP scales equally well for\
    \ multicast as it\n   does for unicast because:\n   a) RSVP Resv messages can\
    \ merge.\n   b) RSVP Resv messages are only sent up to the first branch which\
    \ made\n      the required reservation.\n"
- title: 5.2. Topology Driven
  contents:
  - "5.2. Topology Driven\n   The Multicast Routing Table (MRT) is maintained by the\
    \ IP multicast\n   routing protocol daemon.  The MPLS module maps this L3 tree\
    \ topology\n   information to L2 p2mp LSPs.\n   The MPLS module can poll the MRT\
    \ to extract the tree topologies.\n   Alternatively, the multicast daemon can\
    \ be modified to notify the\n   MPLS module directly of any change to the MRT.\n\
    \   The disadvantage of this method is that labels are consumed even when\n  \
    \ no traffic exists.\n"
- title: 5.3. Traffic Driven
  contents:
  - '5.3. Traffic Driven

    '
- title: 5.3.1. General
  contents:
  - "5.3.1. General\n   A traffic driven trigger method will only construct LSPs for\
    \ trees\n   which carry traffic.  It consumes less labels than the topology\n\
    \   driven method, as labels are only allocated when there is traffic on\n   the\
    \ multicast tree.\n   If the mixed L2/L3 forwarding capability (see section 4)\
    \ is not\n   supported, the traffic driven trigger requires a label distribution\n\
    \   mode in which the label is requested by the LSRu (Downstream on\n   Demand\
    \ or Upstream Unsolicited mode).  In Figure 10, suppose an LSP\n   for a certain\
    \ group exists to LSRd1 and another LSRd2 wants to join\n   the tree.  In order\
    \ for LSRd2 to initiate a trigger, it must already\n   receive the traffic from\
    \ the tree.  This can be either at L2 or at\n   L3.  The former case is a chicken\
    \ and egg problem.  The latter case\n   requires a mixed L2/L3 forwarding capability\
    \ in LSRu to add the L3\n   branch.\n                                    +--------+\n\
    \                                    |  LSRd1 |\n                            \
    \        |        |\n         +--------+                 |   L3   |\n        \
    \ |  LSRu  |                 +--------+\n         |        |                 |\
    \        |\n         |   L3   |    +-------------------------->\n         +--------+\
    \   /             |   L2   |\n         |        |  /              +--------+\n\
    \     ->-------------+\n         |   L2   |                 +--------+\n     \
    \    +--------+                 |  LSRd2 |\n                                 \
    \   |        |\n                                    |   L3   |\n             \
    \                       +--------+\n                                    |    \
    \    |\n                                    |        |\n                     \
    \               |   L2   |\n                                    +--------+\n \
    \              Figure 10. The LSRu has to request the label.\n"
- title: 5.3.2. An Implementation Example
  contents:
  - "5.3.2. An Implementation Example\n   To illustrate that by choosing an appropriate\
    \ trigger one can\n   conclude that MPLS multicast is independent of the deployed\
    \ multicast\n   routing protocol, the following implementation example is given.\n\
    \   Current implementations on Unix platforms of IP multicast routing\n   protocols\
    \ (DVMRP, PIM) have a Multicast Forwarding Cache (MFC).  The\n   MFC is a cached\
    \ copy of the Multicast Routing Table.  The MFC\n   requests an entry for a certain\
    \ multicast group when it experiences a\n   'cache miss' for an incoming multicast\
    \ packet.  The missing routing\n   information is provided by the multicast daemon.\
    \  If at a later point\n   in time something changes to the route (outgoing interfaces\
    \ added or\n   removed), the multicast daemon will update the MFC.\n   The MFC\
    \ is implemented as a common component (part of the kernel),\n   which makes this\
    \ trigger very attractive because it can be\n   transparently used for any IP\
    \ multicast routing protocol.\n   Entries in the MFC are removed when no traffic\
    \ is received for this\n   entry for a certain period of time.  When label switching\
    \ is applied\n   to a certain MFC-entry, the L3 will not see any packets arriving\n\
    \   anymore.  To retain the normal MFC behavior, the L3 counters of the\n   MFC\
    \ need to be updated by L2 measurements.\n"
- title: 5.4. Combinations of Triggers and Label Distribution Modes
  contents:
  - "5.4. Combinations of Triggers and Label Distribution Modes\n   Table 2 shows\
    \ the valid combinations of label distribution modes and\n   trigger types that\
    \ were discussed in the previous sections.  The (X)\n   means that the combination\
    \ is valid when the mixed L2/L3 forwarding\n   feature is supported in the LSR.\n\
    \     +----------------+---------------------------------------------+\n     |\
    \                |              label requested by             |\n     |     \
    \           |          LSRu        |          LSRd        |\n     |          \
    \      +----------------------+----------------------+\n     |               \
    \ | upstream  |downstream|downstream |upstream  |\n     |                |unsolicited|on\
    \ demand |unsolicited|on demand |\n     +----------------+-----------+----------+-----------+----------+\n\
    \     |Request Driven  |           |          |           |          |\n     |(incoming\
    \ msg)  |    X      |    X     |           |          |\n     +----------------+-----------+----------+-----------+----------+\n\
    \     |Request Driven  |           |          |           |          |\n     |(outgoing\
    \ msg)  |           |          |     X     |    X     |\n     +----------------+-----------+----------+-----------+----------+\n\
    \     |Topology Driven |    X      |    X     |     X     |    X     |\n     +----------------+-----------+----------+-----------+----------+\n\
    \     |Traffic Driven  |    X      |    X     |    (X)    |   (X)    |\n     +----------------+-----------+----------+-----------+----------+\n\
    \   Table 2. Valid combinations of triggers and label distribution modes\n"
- title: 6. Piggy-backing
  contents:
  - "6. Piggy-backing\n   In Figure 9 (outgoing case) one can observe that instead\
    \ of sending 2\n   separate messages the label advertisement can be piggy-backed\
    \ on the\n   existing control messages.  For multicast two piggy-back candidates\n\
    \   exist:\n   a) Multicast routing messages:  protocols such as PIM-SM and CBT\
    \ have\n      explicit Join messages which could carry the label mappings.  This\n\
    \      approach is described in [FARI].  When different multicast routing\n  \
    \    protocols are deployed, an extension to each of these protocols\n      has\
    \ to be defined.\n   b) RSVP Resv messages:  a label mapping extension object\
    \ for RSVP,\n      also applicable to multicast, is proposed in [AWDU].\n   The\
    \ pros and cons of piggy-backing on multicast routing messages will\n   be described\
    \ now.\n   Piggy-backing has following advantages:\n   a) If the label advertisement\
    \ is piggy-backed on multicast routing\n      messages, then the distribution\
    \ of routes and the distribution of\n      labels is tightly synchronized.  This\
    \ eliminates difficult corner\n      cases such as \"what do I do with a label\
    \ if I don't (yet) have a\n      routing table entry to attach it to?\".  It also\
    \ minimizes the\n      interval between the establishment of the multicast route\
    \ and the\n      mapping of a label to the route.\n   b) The number of control\
    \ messages needed to support label\n      advertisement beyond those needed to\
    \ support the multicast routing\n      itself is zero.\n   Following disadvantages\
    \ of piggy-backing can be identified:\n   a) In dense-mode protocols there are\
    \ no messages on which the label\n      advertisement can be piggy-backed.  [FARI]\
    \ proposes to add\n      periodic messages to dense-mode protocols for the purpose\
    \ of label\n      advertisement, which is a heavy impact on the multicast routing\n\
    \      protocol and it eliminates the message conserving benefit of\n      piggy-backing.\n\
    \   b) The second solution for the state co-existence problem (section\n     \
    \ 3.4) cannot be applied in combination with piggy-backing.\n   c) Piggy-backing\
    \ requires extending the multicast routing protocol,\n      and hence becomes\
    \ less attractive if label advertisement needs to\n      be supported for multiple\
    \ multicast routing protocols.  Especially\n      when not only the label advertisement\
    \ but also the other two LDP\n      functions (discovery and adjacency) are piggy-backed.\n\
    \   d) Piggy-backing assumes the Downstream Unsolicited label\n      distribution\
    \ mode, this excludes a number of trigger methods (see\n      Table 2).\n   e)\
    \ LDP normally runs on top of TCP, assuring a reliable communication\n      between\
    \ peer nodes.  Piggy-backed label advertisement often\n      replaces the reliable\
    \ communication with periodic soft-state label\n      advertisements.  Because\
    \ of this periodic label advertisement the\n      control traffic (in number of\
    \ bytes) will increase.\n   f) If a VCID notification mechanism [NAGA] is required,\
    \ the (in-band)\n      notification can normally be done by sending the LDP bind\
    \ through\n      the newly established VC.  This way only one message is\n   \
    \   required.  This method cannot be combined with piggy-backing\n      because\
    \ the routing message is sent before the VC can be\n      established.  An extra\
    \ handshake message is thus required,\n      diminishing the benefit of piggy-backing.\n\
    \   So whether piggy-backing makes sense or not depends heavily on which\n   and\
    \ how many multicast routing protocols are deployed, whether LDP is\n   already\
    \ used for unicast, which trigger mechanism is used, ...\n   Piggy-backing is\
    \ just one possible component of an MPLS multicast\n   solution.\n"
- title: 7. Explicit Routing
  contents:
  - "7. Explicit Routing\n   Explicit routing for unicast refers to overriding the\
    \ unicast routing\n   table by using LSPs.\n   A first way to interpret \"multicast\
    \ explicit routing\" is overriding\n   the tree established by the multicast routing\
    \ protocol by another LSP\n   tree (e.g. a Steiner tree calculated by an off-line\
    \ tool).  In this\n   interpretation the current 'shortest path' multicast routing\
    \ protocol\n   becomes obsolete and can be replaced by label advertisement messages\n\
    \   that follow an explicit route (e.g. a branch of the Steiner tree).\n   A second\
    \ way of interpreting \"multicast explicit routing\" is that the\n   known multicast\
    \ routing protocols are running, but that the messages\n   generated by these\
    \ protocols use explicit unicast routes (instead of\n   the IGP shortest path\
    \ routes) to construct trees.\n"
- title: 8. QoS/CoS
  contents:
  - '8. QoS/CoS

    '
- title: 8.1. DiffServ
  contents:
  - "8.1. DiffServ\n   The Differentiated Services approach can be applied to multicast\
    \ as\n   well.  It introduces finer stream granularities (DiffServ Codepoint\n\
    \   (DSCP) as an extra differentiator).  A sender can construct one or\n   more\
    \ trees with different DSCPs.\n   These (S, G, DSCP) or (*, G, DSCP) trees can\
    \ be mapped very easily\n   onto LSPs when the traffic driven trigger is used.\
    \  In this case one\n   can create LSPs with different attributes for the various\
    \ DSCPs.\n   Note however that these LSPs still use the same route as long as\
    \ the\n   tree construction mechanism itself does not take the DSCP as an\n  \
    \ input.\n"
- title: 8.2. IntServ and RSVP
  contents:
  - "8.2. IntServ and RSVP\n   RSVP can be used to setup multicast trees with QoS.\
    \  An important\n   multicast issue is the problem of how to map the 'heterogeneous\n\
    \   receivers' paradigm onto L2 (remark that it is not solved in IP\n   either).\
    \  This subject is tackled in [CRAW].  Pragmatic approaches\n   are the 'Limited\
    \ Heterogeneity Model' which allows a best effort\n   service and a single alternate\
    \ QoS (e.g. a QoS proposed by the sender\n   in a RSVP Path message) and the 'Homogeneous\
    \ Model' which allows only\n   a single QoS.\n   The first approach will construct\
    \ full trees for each service class.\n   The sender has to send its traffic twice\
    \ across the network (e.g. 1\n   best-effort and 1 QoS tree).  Both trees can\
    \ be label switched.\n   The second approach constructs one tree and the best-effort\
    \ users are\n   connected to the QoS tree.  If the branches created for best-effort\n\
    \   users are not to be label switched, (thus carried by a hop-by-hop\n   default\
    \ LSP) the QoS multicast traffic has to be merged onto these\n   default LSPs.\
    \  This function can be provided by the 'mixed L2/L3\n   forwarding' feature described\
    \ in section 4.  If this is not\n   available, merging is necessary to avoid a\
    \ return to L3 in the QoS\n   LSP.\n   The mapping of the IntServ service categories\
    \ onto L2 for ATM service\n   categories is studied in [GARR].\n"
- title: 9. Multi-access Networks
  contents:
  - "9. Multi-access Networks\n   Multicast MPLS on multi-access networks poses a\
    \ special problem.  An\n   LSR that wants to join a group must always be ready\
    \ to accept the\n   label that is already assigned to the group LSP (to another\n\
    \   downstream LSR on the link).  This can be achieved in three ways:\n   1) Each\
    \ LSR on the multi-access link memorizes all the advertised\n      labels on the\
    \ link, even if it has not received a join for the\n      associated group.  If\
    \ an LSR is added to the multi-access link it\n      has to retrieve this information\
    \ from another LSR on the link or\n      in case of soft state label advertisement\
    \ it can wait a certain\n      time before it can allocate labels itself.  If\
    \ LSRs allocate a\n      label 'at the same moment' the LSR with the highest IP\
    \ address\n      could keep it, while the other LSRs withdraw the label.\n   2)\
    \ Each LSR gets its own label range to allocate labels from.  A\n      mechanism\
    \ for label partitioning is described in [FARI].  If an\n      LSR is added to\
    \ the multi-access link, the label ranges have to be\n      negotiated again and\
    \ possibly existing LSPs are torn down and\n      are reconstructed with other\
    \ labels.\n   3) Per multi-access link one LSR could be elected to be responsible\n\
    \      for label allocation.  When an LSR needs a label, it can request\n    \
    \  it from this Label Allocation LSR.\n   Unlike the unicast case, a multicast\
    \ stream can have more than one\n   downstream LSR which all have to use the same\
    \ label.  Two solutions\n   for label advertisement can be thought of:\n   1)\
    \ [FARI] proposes to multicast the label advertisements to all LSRs\n      on\
    \ the shared link.  Since multicast is not reliable this requires\n      periodic\
    \ label advertisements, yielding label advertisement\n      duplicates in time.\n\
    \   2) Another approach is that an LSR unicasts its label advertisements\n   \
    \   in a reliable way (TCP) to all other (or to all interested) LSRs\n      on\
    \ the shared link.  In this approach the hard-state character of\n      LDP can\
    \ be maintained but the label advertisement is duplicated in\n      space.\n \
    \  Since LSPs are only rewarding if they have a long lifetime and since\n   the\
    \ number of LSRs on a shared link is limited the second approach\n   seems advantageous.\n\
    \   Another issue with multicast in multi-access networks is whether to\n   use\
    \ upstream or downstream label assignment.  For multicast traffic,\n   upstream\
    \ label allocation is simpler since there can be only one\n   upstream node per\
    \ link that belongs to a multicast tree.  This\n   (upstream) node can assign\
    \ a unique label for the FEC.  With\n   downstream allocation, there may be multiple\
    \ downstream nodes for a\n   given tree on a multi-access link; each node may\
    \ propose a different\n   label assignment for a FEC that would require some resolution\
    \ process\n   in order to come up with a single label per multicast FEC on the\n\
    \   link.\n   Once a label has been assigned, it is possible that the label\n\
    \   assigner leaves the tree.  With downstream label assignment, this\n   could\
    \ happen when the label allocator leaves the group.  With\n   upstream assignment\
    \ this could happen when the upstream LSR changes\n   due to a unicast topology\
    \ change.\n"
- title: 10. More Issues
  contents:
  - '10. More Issues

    '
- title: 10.1. TTL Field
  contents:
  - "10.1. TTL Field\n   The TTL field in the IP header is typically used for loop\
    \ detection.\n   In IP multicast it is also used to limit the scope of the multicast\n\
    \   packets by setting an appropriate TTL value.\n   Thus in LSRs that do not\
    \ support a TTL decrement function (e.g. ATM\n   LSR), the scope restriction function\
    \ is affected.  Suppose one could\n   calculate in advance the number of hops\
    \ an LSP traverses.  In a\n   unicast LSP the TTL value could then be decremented\
    \ at the ingress or\n   the egress node.  For multicast all the branches of the\
    \ tree can have\n   different lengths so the TTL can only be decremented at the\
    \ egress\n   node, potentially wasting bandwidth if the TTL turns out to be zero\n\
    \   or negative.\n"
- title: 10.2. Independent vs. Ordered Label Distribution Control
  contents:
  - "10.2. Independent vs. Ordered Label Distribution Control\n   Current Label Distribution\
    \ Terminology is only defined for unicast.\n   The following sections explore\
    \ what this terminology might mean in a\n   multicast context.\n   In Independent\
    \ Control ([ANDE]) each LSR can take the initiative to\n   do a label mapping.\
    \  In Ordered Control ([ANDE]) an LSR only maps a\n   label when it already received\
    \ a label from its next-hop.\n   All the previously described trigger methods\
    \ (section 5) combine with\n   Independent Control.  Note that if the request\
    \ driven approach is\n   used with Independent Control the label distribution\
    \ still behaves as\n   in Ordered Control:  the control messages flow from the\
    \ egress node\n   upstream, imposing the same sequence to the label advertisement.\n\
    \   Ordered Control is not applicable for a traffic driven trigger in\n   case\
    \ the node does not support mixed L2/L3 forwarding.  According to\n   Table 2,\
    \ this case implies that labels are requested by the upstream\n   LSR.  Suppose\
    \ in Figure 11 that an LSP exists from S to R1 and a new\n   branch must be added\
    \ to R2.  B will only accept a label on the A-B\n   link if a label is already\
    \ assigned on the B-C link.  However, to\n   establish a label on the B-C link,\
    \ B must already receive traffic on\n   the A-B link.\n                      \
    \               N---N---R1\n                                    /\n          \
    \                         /\n                           S -----A\n           \
    \                        \\\n                                    \\\n        \
    \                             B---C---R2\n                                Figure\
    \ 11.\n"
- title: 10.3. Conservative vs. Liberal Label Retention Mode
  contents:
  - "10.3. Conservative vs. Liberal Label Retention Mode\n   In the Conservative Mode\
    \ ([ANDE]) only the labels that are used for\n   forwarding data (if the next-hop\
    \ for the FEC is the LSR which\n   advertised the label) are allocated and maintained.\
    \  In the Liberal\n   Mode labels are advertised and maintained to all neighbors.\
    \  Liberal\n   Mode does not make sense in multicast.  Two reasons can be identified\n\
    \   for this:\n   1) All LSRs have a route for each unicast FEC.  This is not\
    \ true for\n      multicast FECs.\n   2) For multicast an LSR always knows to\
    \ which neighbor to send the\n      label request or the label map messages. \
    \ In e.g. unicast\n      Downstream Unsolicited mode (see below) the LSR does\
    \ not know\n      where to send the label mappings and thus has to send the mapping\n\
    \      to all its neighbors.  In this case supporting the Liberal Mode\n     \
    \ does not generate extra messages (it still requires extra state\n      information\
    \ and label space) and thus the threshold to support\n      Liberal Mode could\
    \ be considered lower.\n   Table 3 shows the cases where it is known by an LSR\
    \ where to send its\n   label requests.\n              +---------+----------------------------------+\n\
    \              |         |       label requested by         |\n              |\
    \         |      LSRu      |      LSRd       |\n              +---------+----------------+-----------------|\n\
    \              |unicast  |      Yes       |       No        |\n              +---------+----------------+-----------------|\n\
    \              |multicast|      Yes       |      Yes        |\n              +---------+----------------+-----------------+\n\
    \       Table 3. Does an LSR know where to send its label requests ?\n   For a\
    \ unicast flow, an LSR can determine the next hop LSR, which is\n   the one to\
    \ send the request to in case of Upstream Unsolicited or\n   Downstream on Demand\
    \ mode.  The LSR is however not able to find the\n   previous hop.  The previous\
    \ hop is not necessarily the next hop\n   towards the source, because the path\
    \ from A to B is not necessarily\n   the same as the path from B to A.  Such a\
    \ situation can occur as a\n   result of asymmetric link measures or in the event\
    \ that multiple\n   equal cost paths exist [PAXS].\n   In the case of multicast,\
    \ an LSR knows both the next hop(s) and the\n   previous hop.  Because multicast\
    \ trees are constructed using the\n   reverse shortest path method, the previous\
    \ hop is always the next hop\n   towards the source or towards the root of the\
    \ tree.\n"
- title: 10.4. Downstream vs. Upstream Label Allocation
  contents:
  - "10.4. Downstream vs. Upstream Label Allocation\n   The label can be allocated\
    \ by either the downstream LSR (Downstream\n   on Demand, Downstream Unsolicited)\
    \ or the upstream LSR (Upstream on\n   Demand, Upstream Unsolicited, implicit).\
    \  The advantages of\n   downstream label allocation are:\n   a) It is the same\
    \ mode as for unicast LDP, thus eliminating the need\n      to develop upstream\
    \ label distribution procedures.\n   b) The same label can be kept when the upstream\
    \ LSR changes due to a\n      route change, which is an advantage on multi-access\
    \ networks (see\n      section 9).\n   c) Compatible with piggy-backing (especially\
    \ the downstream\n      distribution mode).\n   The advantages of upstream label\
    \ allocation are:\n   a) Easier label allocation in multi-access networks (see\
    \ section 9).\n   b) The same label can be kept when the downstream LSR (which\
    \ would\n      have been the label allocator in downstream mode in a multi-access\n\
    \      network) leaves the group (see section 9).\n   c) The upstream and implicit\
    \ distribution mode allow a faster LSP\n      setup when the LSP is traffic triggered.\n\
    \   Whether to use upstream or downstream label distribution is outside\n   the\
    \ scope of this framework.  The relative complexity between the\n   necessary\
    \ protocol extensions and the resolution mechanism needed, as\n   well as the\
    \ relative operational complexity, will influence which way\n   to go.\n"
- title: 10.5. Explicit vs. Implicit Label Distribution
  contents:
  - "10.5. Explicit vs. Implicit Label Distribution\n   Beside the explicit distribution\
    \ modes (which use a signaling\n   protocol), [ACHA] proposes an implicit label\
    \ distribution method by\n   using unknown labels.  This method has all the advantages\
    \ of the\n   upstream label allocation method and is probably the fastest label\n\
    \   advertisement method for traffic triggered LSPs.\n   Implicit label distribution\
    \ is not applicable if the FEC-to-label\n   binding has been advertised prior\
    \ to traffic arrival, e.g. explicit\n   routing (i.e. if all the information necessary\
    \ to identify the FEC is\n   not present in the packet).\n   Explicit distribution\
    \ allows pre-establishment (before the arrival of\n   data) of LSPs with topology\
    \ or request driven triggers.\n"
- title: 11. Security Considerations
  contents:
  - "11. Security Considerations\n   In general, the use of multicast in an MPLS environment\
    \ poses no\n   extra security issues beyond the ones that already exist in multicast\n\
    \   and MPLS protocols as such.\n   The protocols described in this document are\
    \ however not suited to\n   cross administrative boundaries.\n   When the multicast\
    \ tree is determined by an existing multicast\n   routing protocol (this is the\
    \ assumption made in this document,\n   except for the Explicit Routing section),\
    \ clearly no additional\n   security issues are introduced with respect to the\
    \ shape of the tree\n   (e.g.  unauthorized joining, tapping, blackholing, injecting\
    \ traffic,\n   ...).  These security issues should have been addressed in the\n\
    \   specifications of the multicast routing protocols.\n   In the MPLS context\
    \ it is possible that control messages trigger L2\n   resource allocations (e.g.\
    \ LSPs).  If security flaws would still be\n   present in the existing protocols\
    \ (which possibly are not too harmful\n   in its original context) the abusive\
    \ sending of such control messages\n   can yield more severe DoS attacks.\n  \
    \ In case of an \"explicit routed\" tree that is calculated centrally,\n   sufficient\
    \ authentication must be done on the control messages that\n   set up the tree\
    \ in the network nodes.\n"
- title: 12. Acknowledgements
  contents:
  - "12. Acknowledgements\n   The authors would like to thank Eric Rosen, Piet Van\
    \ Mieghem, Philip\n   Dumortier, Hans De Neve, Jan Vanhoutte, Alex Mondrus and\
    \ Gerard\n   Gastaud for the fruitful discussions and/or their thorough revision\n\
    \   of this document.\n"
- title: Informative References
  contents:
  - "Informative References\n   [ACHA]  A. Acharya, R. Dighe and F. Ansari, \"IP Switching\
    \ Over Fast\n           ATM Cell Transport (IPSOFACTO) : Switching Multicast flows\"\
    ,\n           IEEE Globecom '97.\n   [ADAM]  A. Adams, J. Nicholas, W. Siadak,\
    \ Protocol Independent\n           Multicast Version 2 Dense Mode Specification\"\
    , Work In\n           Progress.\n   [ANDE]  Andersson, L., Doolan, P., Feldman,\
    \ N., Fredette, A. and\n           R. Thomas, \"LDP Specification\", RFC 3036,\
    \ January 2001.\n   [AWDU]  Awduche, D., Berger, L., Gan, D., Li, T., Swallow,\
    \ G.  and\n           V. Srinivasan, \"RSVP-TE: Extensions to RSVP for LSP Tunnels\"\
    ,\n           RFC 3209, December 2001.\n   [BALL]  Ballardie, A., \"Core Based\
    \ Trees (CBT) Multicast Routing\n           Architecture\", RFC 2201, September\
    \ 1997.\n   [CONT]  Conta, D., Doolan, P. and A. Malis, \"Use of Label Switching\n\
    \           on Frame Relay Networks\", RFC 3034, January 2001.\n   [CRAW]  Crawley,\
    \ E., Berger, L., Berson, S., Baker, F., Borden, M.\n           and J. Krawczyk,\
    \ \"A Framework for Integrated Services and\n           RSVP over ATM\", RFC 2382,\
    \ August 1998.\n   [DAVI]  Davie, B., Lawrence, J., McCloghrie, K., Rekhter, Y.,\
    \ Rosen,\n           E., Swallow, G. and P. Doolan, \"MPLS using LDP and ATM VC\n\
    \           switching\", RFC 3035, January 2001.\n   [DEER]  Deering, S., Estrin,\
    \ D., Farinacci, D., Helmy, A., Thaler,\n           D., Handley, M., Jacobson,\
    \ V., Liu, C., Sharma, P. and L Wei,\n           \"Protocol Independent Multicast-Sparse\
    \ Mode (PIM-SM):\n           Protocol Specification\", RFC 2362, June 1998.\n\
    \   [FARI]  D. Farinacci, Y. Rekhter, E. Rosen and T. Qian, \"Using PIM to\n \
    \          Distribute MPLS Labels for Multicast Routes\", Work In\n          \
    \ Progress.\n   [FENN]  Fenner, W., \"Internet Group Management Protocol, IGMP,\n\
    \           Version 2\", RFC 2236, November 1997.\n   [GARR]  Garrett, M. and\
    \ M. Borden, \"Interoperation of Controlled-Load\n           Service and Guaranteed\
    \ Service with ATM\", RFC 2381, August\n           1998.\n   [HOLB]  H. Holbrook,\
    \ B. Cain, \"Source-Specific Multicast for IP\",\n           Work In Progress.\n\
    \   [MOY]   Moy, J., \"Multicast Extensions to OSPF\", RFC 1584, March\n     \
    \      1994.\n   [NAGA]  Nagami, K., Demizu, N., Esaki, H., Katsube, Y. and P.\
    \ Doolan,\n           \"VCID Notification over ATM link for LDP\", RFC 3038, January\n\
    \           2001.\n   [PERL]  R. Perlman, C-Y. Lee, A. Ballardie, J. Crowcroft,\
    \ Z. Wang, T.\n           Maufer, \"Simple Multicast\", Work In Progress.\n  \
    \ [PUSA]  T. Pusateri, \"Distance Vector Multicast Routing Protocol\",\n     \
    \      Work In Progress.\n   [PAXS]  V. Paxson, \"End-to-End Routing Behavior\
    \ in the Internet\",\n           IEEE/ACM Transactions on Networking 5(5), pp.\
    \ 601-615.\n   [ROSE]  Rosen, E., Rekhter, Y., Tappan, D., Farinacci, D., Fedorkow,\n\
    \           G., Li, T. and A. Conta, \"MPLS Label Stack Encoding\",\n        \
    \   RFC 3032, January 2001.\n"
- title: Authors Addresses
  contents:
  - "Authors Addresses\n   Dirk Ooms\n   Alcatel Corporate Research Center\n   Fr.\
    \ Wellesplein 1, 2018 Antwerp, Belgium.\n   Phone : 32 3 2404732\n   Fax   : 32\
    \ 3 2409879\n   EMail: Dirk.Ooms@alcatel.be\n   Bernard Sales\n   Alcatel Corporate\
    \ Research Center\n   Fr. Wellesplein 1, 2018 Antwerp, Belgium.\n   Phone : 32\
    \ 3 2409574\n   EMail: Bernard.Sales@alcatel.be\n   Wim Livens\n   Colt Telecom\n\
    \   Zweefvliegtuigstraat 10, 1130 Brussels, Belgium\n   Phone : 32 2 7901705\n\
    \   Fax   : 32 2 7901711\n   EMail: WLivens@colt-telecom.be\n   Arup Acharya\n\
    \   IBM TJ Watson Research Center\n   30 Saw Mill River Road, Hawthorne\n   NY\
    \ 10532\n   Phone : 1 914 784 7481\n   EMail: arup@us.ibm.com\n   Frederic Griffoul\n\
    \   Ulticom, Inc.\n   Les Algorithmes, 2000 Route des Lucioles, BP29\n   06901\
    \ Sophia-Antipolis, FRANCE\n   EMail: griffoul@ulticom.com\n   Furquan Ansari\n\
    \   Bell Labs, Lucent Tech.\n   101 Crawfords Corner Rd., Holmdel, NJ 07733\n\
    \   Phone : 1 732 949 5249\n   Fax   : 1 732 949 4556\n   EMail: furquan@dnrc.bell-labs.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
