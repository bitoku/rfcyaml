- title: __initial_text__
  contents:
  - '           Remote Network Monitoring MIB Protocol Identifiers

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1 Introduction ....................................................    3
  contents:
  - '1 Introduction ....................................................    3

    '
- title: 2 The SNMP Network Management Framework ...........................    3
  contents:
  - '2 The SNMP Network Management Framework ...........................    3

    '
- title: 2.1 Object Definitions ............................................    3
  contents:
  - '2.1 Object Definitions ............................................    3

    '
- title: 3 Overview ........................................................    3
  contents:
  - '3 Overview ........................................................    3

    '
- title: 3.1 Terms .........................................................    4
  contents:
  - '3.1 Terms .........................................................    4

    '
- title: 3.2 Relationship to the Remote Network Monitoring MIB .............    6
  contents:
  - '3.2 Relationship to the Remote Network Monitoring MIB .............    6

    '
- title: 3.3 Relationship to the Other MIBs ................................    6
  contents:
  - '3.3 Relationship to the Other MIBs ................................    6

    '
- title: 4 Protocol Identifier Encoding ....................................    7
  contents:
  - '4 Protocol Identifier Encoding ....................................    7

    '
- title: 4.1 ProtocolDirTable INDEX Format Examples ........................    9
  contents:
  - '4.1 ProtocolDirTable INDEX Format Examples ........................    9

    '
- title: 4.2 Protocol Identifier Macro Format ..............................   10
  contents:
  - '4.2 Protocol Identifier Macro Format ..............................   10

    '
- title: 4.2.1 Mapping of the Protocol Name ................................   12
  contents:
  - '4.2.1 Mapping of the Protocol Name ................................   12

    '
- title: 4.2.2 Mapping of the VARIANT-OF Clause ............................   13
  contents:
  - '4.2.2 Mapping of the VARIANT-OF Clause ............................   13

    '
- title: 4.2.3 Mapping of the PARAMETERS Clause ............................   13
  contents:
  - '4.2.3 Mapping of the PARAMETERS Clause ............................   13

    '
- title: 4.2.3.1 Mapping of the 'countsFragments(0)' BIT ...................   14
  contents:
  - '4.2.3.1 Mapping of the ''countsFragments(0)'' BIT ...................   14

    '
- title: 4.2.3.2 Mapping of the 'tracksSessions(1)' BIT ....................   15
  contents:
  - '4.2.3.2 Mapping of the ''tracksSessions(1)'' BIT ....................   15

    '
- title: 4.2.4 Mapping of the ATTRIBUTES Clause ............................   15
  contents:
  - '4.2.4 Mapping of the ATTRIBUTES Clause ............................   15

    '
- title: 4.2.5 Mapping of the DESCRIPTION Clause ...........................   15
  contents:
  - '4.2.5 Mapping of the DESCRIPTION Clause ...........................   15

    '
- title: 4.2.6 Mapping of the CHILDREN Clause ..............................   16
  contents:
  - '4.2.6 Mapping of the CHILDREN Clause ..............................   16

    '
- title: 4.2.7 Mapping of the ADDRESS-FORMAT Clause ........................   16
  contents:
  - '4.2.7 Mapping of the ADDRESS-FORMAT Clause ........................   16

    '
- title: 4.2.8 Mapping of the DECODING Clause ..............................   16
  contents:
  - '4.2.8 Mapping of the DECODING Clause ..............................   16

    '
- title: 4.2.9 Mapping of the REFERENCE Clause .............................   17
  contents:
  - '4.2.9 Mapping of the REFERENCE Clause .............................   17

    '
- title: 4.2.10 Evaluating a Protocol-Identifier INDEX .....................   17
  contents:
  - '4.2.10 Evaluating a Protocol-Identifier INDEX .....................   17

    '
- title: 5 Protocol Identifier Macros ......................................   18
  contents:
  - '5 Protocol Identifier Macros ......................................   18

    '
- title: 5.1 Base Identifier Encoding ......................................   18
  contents:
  - '5.1 Base Identifier Encoding ......................................   18

    '
- title: 5.1.1 Protocol Identifier Functions ...............................   19
  contents:
  - '5.1.1 Protocol Identifier Functions ...............................   19

    '
- title: '5.1.1.1 Function 0: No-op .........................................   19'
  contents:
  - '5.1.1.1 Function 0: No-op .........................................   19

    '
- title: '5.1.1.2 Function 1: Protocol Wildcard Function ....................   19'
  contents:
  - '5.1.1.2 Function 1: Protocol Wildcard Function ....................   19

    '
- title: 5.2 Base Layer Protocol Identifiers ...............................   20
  contents:
  - '5.2 Base Layer Protocol Identifiers ...............................   20

    '
- title: 5.2.1 Ether2 Encapsulation ........................................   21
  contents:
  - '5.2.1 Ether2 Encapsulation ........................................   21

    '
- title: 5.2.2 LLC Encapsulation ...........................................   22
  contents:
  - '5.2.2 LLC Encapsulation ...........................................   22

    '
- title: 5.2.3 SNAP over LLC (OUI=000) Encapsulation .......................   23
  contents:
  - '5.2.3 SNAP over LLC (OUI=000) Encapsulation .......................   23

    '
- title: 5.2.4 SNAP over LLC (OUI != 000) Encapsulation ....................   24
  contents:
  - '5.2.4 SNAP over LLC (OUI != 000) Encapsulation ....................   24

    '
- title: 5.2.5 IANA Assigned Protocols .....................................   25
  contents:
  - '5.2.5 IANA Assigned Protocols .....................................   25

    '
- title: 5.2.5.1 IANA Assigned Protocol Identifiers ........................   27
  contents:
  - '5.2.5.1 IANA Assigned Protocol Identifiers ........................   27

    '
- title: '5.3 L3: Children of Base Protocol Identifiers .....................   27'
  contents:
  - '5.3 L3: Children of Base Protocol Identifiers .....................   27

    '
- title: 5.3.1 IP ..........................................................   28
  contents:
  - '5.3.1 IP ..........................................................   28

    '
- title: 5.3.2 IPX .........................................................   29
  contents:
  - '5.3.2 IPX .........................................................   29

    '
- title: 5.3.3 ARP .........................................................   30
  contents:
  - '5.3.3 ARP .........................................................   30

    '
- title: 5.3.4 IDP .........................................................   30
  contents:
  - '5.3.4 IDP .........................................................   30

    '
- title: 5.3.5 AppleTalk ARP ...............................................   31
  contents:
  - '5.3.5 AppleTalk ARP ...............................................   31

    '
- title: 5.3.6 AppleTalk ...................................................   31
  contents:
  - '5.3.6 AppleTalk ...................................................   31

    '
- title: '5.4 L4: Children of L3 Protocols ..................................   32'
  contents:
  - '5.4 L4: Children of L3 Protocols ..................................   32

    '
- title: 5.4.1 ICMP ........................................................   32
  contents:
  - '5.4.1 ICMP ........................................................   32

    '
- title: 5.4.2 TCP .........................................................   32
  contents:
  - '5.4.2 TCP .........................................................   32

    '
- title: 5.4.3 UDP .........................................................   33
  contents:
  - '5.4.3 UDP .........................................................   33

    '
- title: '5.5 L5: Application Layer Protocols ...............................   33'
  contents:
  - '5.5 L5: Application Layer Protocols ...............................   33

    '
- title: 5.5.1 FTP .........................................................   33
  contents:
  - '5.5.1 FTP .........................................................   33

    '
- title: 5.5.1.1 FTP-DATA ..................................................   33
  contents:
  - '5.5.1.1 FTP-DATA ..................................................   33

    '
- title: 5.5.1.2 FTP Control ...............................................   34
  contents:
  - '5.5.1.2 FTP Control ...............................................   34

    '
- title: 5.5.2 Telnet ......................................................   34
  contents:
  - '5.5.2 Telnet ......................................................   34

    '
- title: 5.5.3 SMTP ........................................................   34
  contents:
  - '5.5.3 SMTP ........................................................   34

    '
- title: 5.5.4 DNS .........................................................   35
  contents:
  - '5.5.4 DNS .........................................................   35

    '
- title: 5.5.5 BOOTP .......................................................   35
  contents:
  - '5.5.5 BOOTP .......................................................   35

    '
- title: 5.5.5.1 Bootstrap Server Protocol .................................   35
  contents:
  - '5.5.5.1 Bootstrap Server Protocol .................................   35

    '
- title: 5.5.5.2 Bootstrap Client Protocol .................................   35
  contents:
  - '5.5.5.2 Bootstrap Client Protocol .................................   35

    '
- title: 5.5.6 TFTP ........................................................   36
  contents:
  - '5.5.6 TFTP ........................................................   36

    '
- title: 5.5.7 HTTP ........................................................   36
  contents:
  - '5.5.7 HTTP ........................................................   36

    '
- title: 5.5.8 POP3 ........................................................   36
  contents:
  - '5.5.8 POP3 ........................................................   36

    '
- title: 5.5.9 SUNRPC ......................................................   37
  contents:
  - '5.5.9 SUNRPC ......................................................   37

    '
- title: 5.5.10 NFS ........................................................   38
  contents:
  - '5.5.10 NFS ........................................................   38

    '
- title: 5.5.11 SNMP .......................................................   38
  contents:
  - '5.5.11 SNMP .......................................................   38

    '
- title: 5.5.11.1 SNMP Request/Response ....................................   38
  contents:
  - '5.5.11.1 SNMP Request/Response ....................................   38

    '
- title: 5.5.11.2 SNMP Trap ................................................   39
  contents:
  - '5.5.11.2 SNMP Trap ................................................   39

    '
- title: 6 Acknowledgements ................................................   39
  contents:
  - '6 Acknowledgements ................................................   39

    '
- title: 7 References ......................................................   40
  contents:
  - '7 References ......................................................   40

    '
- title: 8 Security Considerations .........................................   43
  contents:
  - '8 Security Considerations .........................................   43

    '
- title: 9 Authors' Addresses ..............................................   43
  contents:
  - '9 Authors'' Addresses ..............................................   43

    '
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo defines an experimental portion of the Management\n\
    \   Information Base (MIB) for use with network management protocols in\n   the\
    \ Internet community.  In particular, it describes the algorithms\n   required\
    \ to identify different protocol encapsulations managed with\n   the Remote Network\
    \ Monitoring MIB Version 2 [RMON2]. Although related\n   to the original Remote\
    \ Network Monitoring MIB [RFC1757], this\n   document refers only to objects found\
    \ in the RMON-2 MIB.\n"
- title: 2.  The SNMP Network Management Framework
  contents:
  - "2.  The SNMP Network Management Framework\n   The SNMP Network Management Framework\
    \ presently consists of three\n   major components.  They are:\n"
- title: o    the SMI, described in RFC 1902 [RFC1902], - the mechanisms used for
  contents:
  - "o    the SMI, described in RFC 1902 [RFC1902], - the mechanisms used for\n  \
    \   describing and naming objects for the purpose of management.\n"
- title: o    the MIB-II, STD 17, RFC 1213 [RFC1213], - the core set of managed
  contents:
  - "o    the MIB-II, STD 17, RFC 1213 [RFC1213], - the core set of managed\n    \
    \ objects for the Internet suite of protocols.\n"
- title: o    the protocol, STD 15, RFC 1157 [RFC1157] and/or RFC 1905 [RFC1905],
  contents:
  - "o    the protocol, STD 15, RFC 1157 [RFC1157] and/or RFC 1905 [RFC1905],\n  \
    \   - the protocol for accessing managed information.\n   Textual conventions\
    \ are defined in RFC 1903 [RFC1903], and\n   conformance statements are defined\
    \ in RFC 1904 [RFC1904].\n   The Framework permits new objects to be defined for\
    \ the purpose of\n   experimentation and evaluation.\n"
- title: 2.1.  Object Definitions
  contents:
  - "2.1.  Object Definitions\n   Managed objects are accessed via a virtual information\
    \ store, termed\n   the Management Information Base or MIB.  Objects in the MIB\
    \ are\n   defined using the subset of Abstract Syntax Notation One (ASN.1)\n \
    \  defined in the SMI.  In particular, each object type is named by an\n   OBJECT\
    \ IDENTIFIER, an administratively assigned name.  The object\n   type together\
    \ with an object instance serves to uniquely identify a\n   specific instantiation\
    \ of the object.  For human convenience, we\n   often use a textual string, termed\
    \ the descriptor, to refer to the\n   object type.\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   The RMON-2 MIB [RMON2] uses hierarchically formatted OCTET STRINGs\
    \ to\n   globally identify individual protocol encapsulations in the\n   protocolDirTable.\n\
    \   This guide contains algorithms and examples of protocol identifier\n   encapsulations\
    \ for use as INDEX values in the protocolDirTable.\n   This document is not intended\
    \ to be an authoritative reference on the\n   protocols described herein. Refer\
    \ to the Official Internet Standards\n   document [RFC1800], the Assigned Numbers\
    \ document [RFC1700], or other\n   appropriate RFCs, IEEE documents, etc. for\
    \ complete and authoritative\n   protocol information.\n"
- title: 3.1.  Terms
  contents:
  - "3.1.  Terms\n   Several terms are used throughout this document, as well as in\
    \ the\n   RMON-2 MIB [RMON2], that should be introduced:\n"
- title: 'layer-identifier:'
  contents:
  - "layer-identifier:\n     An octet string fragment representing a particular protocol\n\
    \     encapsulation layer. A string fragment identifying a particular\n     protocol\
    \ encapsulation layer. This string is exactly four octets,\n     (except for the\
    \ 'vsnap' base-layer identifier, which is exactly\n     eight octets) encoded\
    \ in network byte order. A particular protocol\n     encapsulation can be identified\
    \ by starting with a base layer\n     encapsulation (see the 'Base Protocol Identifiers'\
    \ section for more\n     detail), and following the encoding rules specified in\
    \ the CHILDREN\n     clause and assignment section for that layer. Then repeat\
    \ for each\n     identified layer in the encapsulation. (See section 4.2.10\n\
    \     'Evaluating a Protocol-Identifier INDEX' for more detail.)\n"
- title: 'protocol:'
  contents:
  - "protocol:\n     A particular protocol layer, as specified by encoding rules in\
    \ this\n     document. Usually refers to a single layer in a given\n     encapsulation.\
    \ Note that this term is sometimes used in the RMON-2\n     MIB [RMON2] to name\
    \ a fully-specified protocol-identifier string.\n     In such a case, the protocol-identifier\
    \ string is named for its\n     upper-most layer. A named protocol may also refer\
    \ to any\n     encapsulation of that protocol.\n"
- title: 'protocol-identifier string:'
  contents:
  - "protocol-identifier string:\n     An octet string representing a particular protocol\
    \ encapsulation,\n     as specified by encoding rules in this document. This string\
    \ is\n     identified in the RMON-2 MIB [RMON2] as the protocolDirID object. A\n\
    \     protocol-identifier string is composed of one or more layer-\n     identifiers.\n"
- title: 'protocol-identifier macro:'
  contents:
  - "protocol-identifier macro:\n     A group of formatted text describing a particular\
    \ protocol layer,\n     as used within the RMON-2 MIB [RMON2]. The macro serves\
    \ several\n     purposes:\n     - Name the protocol for use within the RMON-2\
    \ MIB [RMON2].\n     - Describe how the protocol is encoded into an octet string.\n\
    \     - Describe how child protocols are identified (if applicable),\n       and\
    \ encoded into an octet string.\n     - Describe which protocolDirParameters are\
    \ allowed for the protocol.\n     - Describe how the associated protocolDirType\
    \ object is encoded\n       for the protocol.\n     - Provide reference(s) to\
    \ authoritative documentation for the\n       protocol.\n"
- title: 'protocol-variant-identifier macro:'
  contents:
  - "protocol-variant-identifier macro:\n     A group of formatted text describing\
    \ a particular protocol layer,\n     as used within the RMON-2 MIB [RMON2]. This\
    \ protocol is a variant\n     of a well known encapsulation that may be present\
    \ in the\n     protocolDirTable. This macro is used to document the IANA\n   \
    \  assigned protocols, which are needed to identify protocols which\n     cannot\
    \ be practically identified by examination of 'appropriate\n     network traffic'\
    \ (e.g. the packets which carry them). All other\n     protocols (which can be\
    \ identified by examination of appropriate\n     network traffic) should be documented\
    \ using the protocol-identifier\n     macro. A protocol-variant-identifier is\
    \ documented using the\n     protocol-variant version of the protocol-identifier\
    \ macro.\n"
- title: 'protocol-parameter:'
  contents:
  - "protocol-parameter:\n     A single octet, corresponding to a specific layer-identifier\
    \ in the\n     protocol-identifier. This octet is a bit-mask indicating special\n\
    \     functions or capabilities that this agent is providing for the\n     corresponding\
    \ protocol.\n"
- title: 'protocol-parameters string:'
  contents:
  - "protocol-parameters string:\n     An octet string, which contains one protocol-parameter\
    \ for each\n     layer-identifier in the protocol-identifier.  See the section\n\
    \     'Mapping of the PARAMETERS Clause' for more detail.  This string is\n  \
    \   identified in the RMON-2 MIB [RMON2] as the protocolDirParameters\n     object.\n"
- title: 'protocolDirTable INDEX:'
  contents:
  - "protocolDirTable INDEX:\n     A protocol-identifier and protocol-parameters octet\
    \ string pair\n     that have been converted to an INDEX value, according to the\n\
    \     encoding rules in in section 7.7 of RFC 1902 [RFC1902].\n"
- title: 'pseudo-protocol:'
  contents:
  - "pseudo-protocol:\n     A convention or algorithm used only within this document\
    \ for the\n     purpose of encoding protocol-identifier strings.\n"
- title: 3.2.  Relationship to the Remote Network Monitoring MIB
  contents:
  - "3.2.  Relationship to the Remote Network Monitoring MIB\n   This document is\
    \ intended to identify possible string values for the\n   OCTET STRING objects\
    \ protocolDirID and protocolDirParameters.  Tables\n   in the new Protocol Distribution,\
    \ Host, and Matrix groups use a local\n   INTEGER INDEX, in order to remain unaffected\
    \ by changes in this\n   document. Only the protocolDirTable uses the strings\
    \ (protocolDirID\n   and protocolDirParameters) described in this document.\n\
    \   This document is not intended to limit the protocols that may be\n   identified\
    \ for counting in the RMON-2 MIB. Many protocol\n   encapsulations, not explicitly\
    \ identified in this document, may be\n   present in an actual implementation\
    \ of the protocolDirTable. Also,\n   implementations of the protocolDirTable may\
    \ not include all the\n   protocols identified in the example section below.\n\
    \   This document is intentionally separated from the MIB objects to\n   allow\
    \ frequent updates to this document without any republication of\n   MIB objects.\
    \  Protocol Identifier macros submitted from the RMON\n   working group and community\
    \ at large (to the RMONMIB WG mailing list\n   at 'rmonmib@cisco.com') will be\
    \ collected and added to this document.\n   Macros submissions will be collected\
    \ in the IANA's MIB files under\n   the directory \"ftp://ftp.isi.edu/mib/rmonmib/rmon2_pi_macros/\"\
    \ and in\n   the RMONMIB working group mailing list message archive file\n   \"\
    ftp://ftp.cisco.com/ftp/rmonmib/rmonmib\".\n   This document does not discuss\
    \ auto-discovery and auto-population of\n   the protocolDirTable. This functionality\
    \ is not explicitly defined by\n   the RMON standard. An agent should populate\
    \ the directory with\n   'interesting' protocols--depending on the intended applications.\n"
- title: 3.3.  Relationship to the Other MIBs
  contents:
  - "3.3.  Relationship to the Other MIBs\n   The RMON Protocol Identifiers document\
    \ is intended for use with the\n   protocolDirTable within the RMON MIB. It is\
    \ not relevant to any other\n   MIB, or intended for use with any other MIB.\n"
- title: 4.  Protocol Identifier Encoding
  contents:
  - "4.  Protocol Identifier Encoding\n   The protocolDirTable is indexed by two OCTET\
    \ STRINGs, protocolDirID\n   and protocolDirParameters. To encode the table index,\
    \ each variable-\n   length string is converted to an OBJECT IDENTIFIER fragment,\n\
    \   according to the encoding rules in section 7.7 of RFC 1902 [RFC1902].\n  \
    \ Then the index fragments are simply concatenated. (Refer to figures\n   1a -\
    \ 1d below for more detail.)\n   The first OCTET STRING (protocolDirID) is composed\
    \ of one or more 4-\n   octet \"layer-identifiers\". The entire string uniquely\
    \ identifies a\n   particular protocol encapsulation tree. The second OCTET STRING,\n\
    \   (protocolDirParameters) which contains a corresponding number of 1-\n   octet\
    \ protocol-specific parameters, one for each 4-octet layer-\n   identifier in\
    \ the first string.\n   A protocol layer is normally identified by a single 32-bit\
    \ value.\n   Each layer-identifier is encoded in the ProtocolDirID OCTET STRING\n\
    \   INDEX as four sub-components [ a.b.c.d ], where 'a' - 'd' represent\n   each\
    \ byte of the 32-bit value in network byte order.  If a particular\n   protocol\
    \ layer cannot be encoded into 32 bits, (except for the\n   'vsnap' base layer)\
    \ then it must be defined as a 'ianaAssigned'\n   protocol (see below for details\
    \ on IANA assigned protocols).\n   The following figures show the differences\
    \ between the OBJECT\n   IDENTIFIER and OCTET STRING encoding of the protocol\
    \ identifier\n   string.\n                   Fig. 1a\n         protocolDirTable\
    \ INDEX Format\n         -----------------------------\n     +---+--------------------------+---+---------------+\n\
    \     | c !                          | c !  protocolDir  |\n     | n !  protocolDirID\
    \           | n !  Parameters   |\n     | t !                          | t ! \
    \              |\n     +---+--------------------------+---+---------------+\n\
    \                   Fig. 1b\n         protocolDirTable OCTET STRING Format\n \
    \        ------------------------------------\n      protocolDirID\n     +----------------------------------------+\n\
    \     |                                        |\n     |              4 * N octets\
    \              |\n     |                                        |\n     +----------------------------------------+\n\
    \     protocolDirParameters\n     +----------+\n     |          |\n     | N octets\
    \ |\n     |          |\n     +----------+\n                    Fig. 1c\n     \
    \   protocolDirTable INDEX Format Example\n        -------------------------------------\n\
    \     protocolDirID                   protocolDirParameters\n     +---+--------+--------+--------+--------+---+---+---+---+---+\n\
    \     | c |  proto |  proto |  proto |  proto | c |par|par|par|par|\n     | n\
    \ |  base  |    L3  |   L4   |   L5   | n |ba-| L3| L4| L5|\n     | t |(+flags)|\
    \        |        |        | t |se |   |   |   |\n     +---+--------+--------+--------+--------+---+---+---+---+---+\
    \ subOID\n     | 1 | 4 or 8 |    4   |    4   |    4   | 1 |1/2| 1 | 1 | 1 | count\n\
    \     where N is the number of protocol-layer-identifiers required\n     for the\
    \ entire encapsulation of the named protocol. Note that\n     the 'vsnap' base\
    \ layer identifier is encoded into 8 sub-identifiers,\n     All other protocol\
    \ layers are either encoded into 4 sub-identifiers\n     or encoded as a 'ianaAssigned'\
    \ protocol.\n                    Fig. 1d\n       protocolDirTable OCTET STRING\
    \ Format Example\n       --------------------------------------------\n     protocolDirID\n\
    \     +--------+--------+--------+--------+\n     |  proto |  proto |  proto |\
    \  proto |\n     |   base |    L3  |   L4   |   L5   |\n     |        |      \
    \  |        |        |\n     +--------+--------+--------+--------+ octet\n   \
    \  | 4 or 8 |    4   |    4   |    4   | count\n     protocolDirParameters\n \
    \    +---+---+---+---+\n     |par|par|par|par|\n     |ba-| L3| L4| L5|\n     |se\
    \ |   |   |   |\n     +---+---+---+---+ octet\n     |1/2| 1 | 1 | 1 | count\n\
    \     where N is the number of protocol-layer-identifiers required\n     for the\
    \ entire encapsulation of the named protocol. Note that\n     the 'vsnap' base\
    \ layer identifier is encoded into 8\n     protocolDirID sub-identifiers and 2\
    \ protocolDirParameters\n     sub-identifiers.\n   Although this example indicates\
    \ four encapsulated protocols, in\n   practice, any non-zero number of layer-identifiers\
    \ may be present,\n   theoretically limited only by OBJECT IDENTIFIER length restrictions,\n\
    \   as specified in section 3.5 of RFC 1902 [RFC1902].\n   Note that these two\
    \ strings would not be concatenated together if\n   ever returned in a GetResponse\
    \ PDU, since they are different MIB\n   objects.  However, protocolDirID and protocolDirParameters\
    \ are not\n   currently readable MIB objects.\n"
- title: 4.1.  ProtocolDirTable INDEX Format Examples
  contents:
  - "4.1.  ProtocolDirTable INDEX Format Examples\n    -- HTTP; fragments counted\
    \ from IP and above\n    ether2.ip.tcp.www-http =\n       16.0.0.0.1.0.0.8.0.0.0.0.6.0.0.0.80.4.0.1.0.0\n\
    \    -- SNMP over UDP/IP over SNAP\n    snap.ip.udp.snmp =\n       16.0.0.0.3.0.0.8.0.0.0.0.17.0.0.0.161.4.0.0.0.0\n\
    \    -- SNMP over IPX over SNAP\n    snap.ipx.snmp =\n       12.0.0.0.3.0.0.129.55.0.0.144.15.3.0.0.0\n\
    \    -- SNMP over IPX over raw8023\n    -- ianaAssigned(ipxOverRaw8023(1)).snmp\
    \ =\n       12.0.0.0.5.0.0.0.1.0.0.155.15.3.0.0.0\n    -- IPX over LLC\n    llc.ipx\
    \ =\n       8.0.0.0.2.0.224.224.3.2.0.0\n    -- SNMP over UDP/IP over any link\
    \ layer\n    -- wildcard-ether2.ip.udp.snmp\n       16.1.0.0.1.0.0.8.0.0.0.0.17.0.0.0.161.4.0.0.0.0\n\
    \    -- IP over any link layer; base encoding is IP over ether2\n    -- wildcard-ether2.ip\n\
    \       8.1.0.0.1.0.0.8.0.2.0.0\n   -- AppleTalk Phase 2 over ether2\n   -- ether2.atalk\n\
    \      8.0.0.0.1.0.0.128.155.2.0.0\n   -- AppleTalk Phase 2 over vsnap\n   --\
    \ vsnap(apple).atalk\n      12.0.0.0.4.0.8.0.7.0.0.128.155.3.0.0.0\n"
- title: 4.2.  Protocol Identifier Macro Format
  contents:
  - "4.2.  Protocol Identifier Macro Format\n   The following example is meant to\
    \ introduce the protocol-identifier\n   macro. (The syntax is not quite ASN.1.)\
    \ This macro is used to\n   represent both protocols and protocol-variants.\n\
    \   If the 'VariantOfPart' component of the macro is present, then the\n   macro\
    \ represents a protocol-variant instead of a protocol.  A\n   protocol- variant-identifier\
    \ is used only for IANA assigned\n   protocols, enumerated under the 'ianaAssigned'\
    \ base-layer.\n     RMON-PROTOCOL-IDENTIFIER MACRO ::=\n     BEGIN\n         \
    \    PIMacroName \"PROTOCOL-IDENTIFIER\"\n                     VariantOfPart\n\
    \                     \"PARAMETERS\"   ParamPart\n                     \"ATTRIBUTES\"\
    \   AttrPart\n                     \"DESCRIPTION\"  Text\n                   \
    \  ChildDescrPart\n                     AddrDescrPart\n                     DecodeDescrPart\n\
    \                     ReferPart\n             \"::=\" \"{\" EncapsPart \"}\"\n\
    \             PIMacroName ::=\n                 identifier\n             VariantOfPart\
    \ ::=\n                 \"VARIANT-OF\" identifier | empty\n             ParamPart\
    \ ::=\n                 \"{\" ParamList \"}\"\n             ParamList ::=\n  \
    \               Params | empty\n             Params ::=\n                 Param\
    \ | Params \",\" Param\n             Param ::=\n                 identifier \"\
    (\" nonNegativeNumber \")\"\n             AttrPart ::=\n                 \"{\"\
    \ AttrList \"}\"\n             AttrList ::=\n                 Attrs | empty\n\
    \             Attrs ::=\n                 Attr | Attrs \",\" Attr\n          \
    \   Attr ::=\n                 identifier \"(\" nonNegativeNumber \")\"\n    \
    \         ChildDescrPart ::=\n                 \"CHILDREN\" Text | empty\n   \
    \          AddrDescrPart ::=\n                 \"ADDRESS-FORMAT\" Text | empty\n\
    \             DecodeDescrPart ::=\n                 \"DECODING\" Text | empty\n\
    \             ReferPart ::=\n                 \"REFERENCE\" Text | empty\n   \
    \          EncapsPart ::=\n                 \"{\" Encaps \"}\"\n             Encaps\
    \ ::=\n                 Encap | Encaps \",\" Encap\n             Encap ::=\n \
    \                BaseEncap | NormalEncap | VsnapEncap | IanaEncap\n          \
    \   BaseEncap ::=\n                 nonNegativeNumber\n             NormalEncap\
    \ ::=\n                 identifier nonNegativeNumber\n             VsnapEncap\
    \ ::=\n                 identifier \"(\" nonNegativeNumber \")\" nonNegativeNumber\n\
    \             IanaEncap ::=\n                 \"ianaAssigned\" nonNegativeNumber\n\
    \                 | \"ianaAssigned\" identifier\n                 | \"ianaAssigned\"\
    \ identifier \"(\" nonNegativeNumber \")\"\n             Text ::=\n          \
    \       \"\"\"\" string \"\"\"\"\n     END\n"
- title: 4.2.1.  Mapping of the Protocol Name
  contents:
  - "4.2.1.  Mapping of the Protocol Name\n   The 'PIMacroName' value should be a\
    \ lower-case ASCII string, and\n   contain the name or acronym identifying the\
    \ protocol.  NMS\n   applications may treat protocol names as case-insensitive\
    \ strings,\n   and agent implementations must make sure the protocolDirTable does\n\
    \   not contain any instances of the protocolDirDescr object which differ\n  \
    \ only in the case of one of more letters (if the identifiers are\n   intended\
    \ to represent different protocols).\n   It is possible that different encapsulations\
    \ of the same protocol\n   (which are represented by different entries in the\
    \ protocolDirTable)\n   will be assigned the same protocol name.\n   A protocol\
    \ name should match the \"most well-known\" name or acronym\n   for the indicated\
    \ protocol.  For example, the document indicated by\n   the URL:\n       ftp://ftp.isi.edu/in-notes/iana/assignments/protocol-numbers\n\
    \   defines IP Protocol field values, so protocol-identifier macros for\n   children\
    \ of IP should be given names consistent with the protocol\n   names found in\
    \ this authoritative document.\n"
- title: 4.2.2.  Mapping of the VARIANT-OF Clause
  contents:
  - "4.2.2.  Mapping of the VARIANT-OF Clause\n   This clause is present for IANA\
    \ assigned protocols only.  It\n   identifies the protocol-identifier macro that\
    \ most closely represents\n   this particular protocol, and is known as the \"\
    reference protocol\".\n   (A protocol-identifier macro must exist for the reference\
    \ protocol.)\n   When this clause is present in a protocol-identifier macro, the\
    \ macro\n   is called a 'protocol-variant-identifier'.\n   Any clause (e.g. CHILDREN,\
    \ ADDRESS-FORMAT) in the reference protocol-\n   identifier macro should not be\
    \ duplicated in the protocol-variant-\n   identifier macro, if the 'variant' protocols'\
    \ semantics are identical\n   for a given clause.\n   Since the PARAMETERS and\
    \ ATTRIBUTES clauses must be present in a\n   protocol-identifier, an empty 'ParamPart'\
    \ and 'AttrPart' (i.e.\n   \"PARAMETERS {}\") must be present in a protocol-variant-identifier\n\
    \   macro, and the 'ParamPart' and 'AttrPart' found in the reference\n   protocol-\
    \ identifier macro examined instead.\n   Note that if a 'ianaAssigned' protocol\
    \ is defined that is not a\n   variant of any other documented protocol, then\
    \ the protocol-\n   identifier macro should be used instead of the protocol-variant-\n\
    \   identifier version of the macro.\n"
- title: 4.2.3.  Mapping of the PARAMETERS Clause
  contents:
  - "4.2.3.  Mapping of the PARAMETERS Clause\n   The protocolDirParameters object\
    \ provides an NMS the ability to turn\n   on and off expensive probe resources.\
    \ An agent may support a given\n   parameter all the time, not at all, or subject\
    \ to current resource\n   load.\n   The PARAMETERS clause is a list of bit definitions\
    \ which can be\n   directly encoded into the associated ProtocolDirParameters\
    \ octet in\n   network byte order. Zero or more bit definitions may be present.\
    \ Only\n   bits 0-7 are valid encoding values. This clause defines the entire\n\
    \   BIT set allowed for a given protocol. A conforming agent may choose\n   to\
    \ implement a subset of zero or more of these PARAMETERS.\n   By convention, the\
    \ following common bit definitions are used by\n   different protocols.  These\
    \ bit positions must not be used for other\n   parameters. They should be reserved\
    \ if not used by a given protocol.\n   Bits are encoded in network-byte order.\n\
    \         Table 3.1  Reserved PARAMETERS Bits\n         ------------------------------------\n"
- title: Bit Name              Description
  contents:
  - 'Bit Name              Description

    '
- title: '---------------------------------------------------------------------'
  contents:
  - '---------------------------------------------------------------------

    '
- title: 0   countsFragments   higher-layer protocols encapsulated within
  contents:
  - "0   countsFragments   higher-layer protocols encapsulated within\n          \
    \            this protocol will be counted correctly even\n                  \
    \    if this protocol fragments the upper layers\n                      into multiple\
    \ packets.\n"
- title: 1   tracksSessions    correctly attributes all packets of a protocol
  contents:
  - "1   tracksSessions    correctly attributes all packets of a protocol\n      \
    \                which starts sessions on well known ports or\n              \
    \        sockets and then transfers them to dynamically\n                    \
    \  assigned ports or sockets thereafter (e.g. TFTP).\n   The PARAMETERS clause\
    \ must be present in all protocol-identifier\n   macro declarations, but may be\
    \ equal to zero (empty). Note that an\n   NMS must determine if a given PARAMETER\
    \ bit is supported by\n   attempting to create the desired protocolDirEntry The\
    \ associated\n   ATTRIBUTE bits for 'countsFragments' and 'tracksSessions' do\
    \ not\n   exist.\n"
- title: 4.2.3.1.  Mapping of the 'countsFragments(0)' BIT
  contents:
  - "4.2.3.1.  Mapping of the 'countsFragments(0)' BIT\n   This bit indicates whether\
    \ the probe is correctly attributing all\n   fragmented packets of the specified\
    \ protocol, even if individual\n   frames carrying this protocol cannot be identified\
    \ as such.  Note\n   that the probe is not required to actually present any re-assembled\n\
    \   datagrams (for address-analysis, filtering, or any other purpose) to\n   the\
    \ NMS.\n   This bit may only be set in a protocolDirParameters octet which\n \
    \  corresponds to a protocol that supports fragmentation and reassembly\n   in\
    \ some form. Note that TCP packets are not considered 'fragmented-\n   streams'\
    \ and so TCP is not eligible.\n   This bit may be set in at most one protocolDirParameters\
    \ octet within\n   a protocolDirTable INDEX.\n"
- title: 4.2.3.2.  Mapping of the 'tracksSessions(1)' BIT
  contents:
  - "4.2.3.2.  Mapping of the 'tracksSessions(1)' BIT\n   The 'tracksSessions(1)'\
    \ bit indicates whether frames which are part\n   of remapped-sessions (e.g. TFTP\
    \ download sessions) are correctly\n   counted by the probe. For such a protocol,\
    \ the probe must usually\n   analyze all packets received on the indicated interface,\
    \ and maintain\n   some state information, (e.g. the remapped UDP port number\
    \ for TFTP).\n   The semantics of the 'tracksSessions' parameter are independent\
    \ of\n   the other protocolDirParameters definitions, so this parameter may be\n\
    \   combined with any other legal parameter configurations.\n"
- title: 4.2.4.  Mapping of the ATTRIBUTES Clause
  contents:
  - "4.2.4.  Mapping of the ATTRIBUTES Clause\n   The protocolDirType object provides\
    \ an NMS with an indication of a\n   probe's capabilities for decoding a given\
    \ protocol, or the general\n   attributes of the particular protocol.\n   The\
    \ ATTRIBUTES clause is a list of bit definitions which are encoded\n   into the\
    \ associated instance of ProtocolDirType. The BIT definitions\n   are specified\
    \ in the SYNTAX clause of the protocolDirType MIB object.\n         Table 3.2\
    \  Reserved ATTRIBUTES Bits\n         ------------------------------------\n \
    \    Bit Name              Description\n     ---------------------------------------------------------------------\n\
    \     0  hasChildren        indicates that there may be children of\n        \
    \                   this protocol defined in the protocolDirTable\n          \
    \                 (by either the agent or the manager).\n     1  addressRecognitionCapable\n\
    \                           indicates that this protocol can be used\n       \
    \                    to generate host and matrix table entries.\n   The ATTRIBUTES\
    \ clause must be present in all protocol-identifier\n   macro declarations, but\
    \ may be empty.\n"
- title: 4.2.5.  Mapping of the DESCRIPTION Clause
  contents:
  - "4.2.5.  Mapping of the DESCRIPTION Clause\n   The DESCRIPTION clause provides\
    \ a textual description of the protocol\n   identified by this macro.  Notice\
    \ that it should not contain details\n   about items covered by the CHILDREN,\
    \ ADDRESS-FORMAT, DECODING and\n   REFERENCE clauses.\n   The DESCRIPTION clause\
    \ must be present in all protocol-identifier\n   macro declarations.\n"
- title: 4.2.6.  Mapping of the CHILDREN Clause
  contents:
  - "4.2.6.  Mapping of the CHILDREN Clause\n   The CHILDREN clause provides a description\
    \ of child protocols for\n   protocols which support them. It has three sub-sections:\n\
    \  -  Details on the field(s)/value(s) used to select the child protocol,\n  \
    \   and how that selection process is performed\n  -  Details on how the value(s)\
    \ are encoded in the protocol identifier\n     octet string\n  -  Details on how\
    \ child protocols are named with respect to their\n     parent protocol label(s)\n\
    \   The CHILDREN clause must be present in all protocol-identifier macro\n   declarations\
    \ in which the 'hasChildren(0)' BIT is set in the\n   ATTRIBUTES clause.\n"
- title: 4.2.7.  Mapping of the ADDRESS-FORMAT Clause
  contents:
  - "4.2.7.  Mapping of the ADDRESS-FORMAT Clause\n   The ADDRESS-FORMAT clause provides\
    \ a description of the OCTET-STRING\n   format(s) used when encoding addresses.\n\
    \   This clause must be present in all protocol-identifier macro\n   declarations\
    \ in which the 'addressRecognitionCapable(1)' BIT is set\n   in the ATTRIBUTES\
    \ clause.\n"
- title: 4.2.8.  Mapping of the DECODING Clause
  contents:
  - "4.2.8.  Mapping of the DECODING Clause\n   The DECODING clause provides a description\
    \ of the decoding procedure\n   for the specified protocol. It contains useful\
    \ decoding hints for the\n   implementor, but should not over-replicate information\
    \ in documents\n   cited in the REFERENCE clause.  It might contain a complete\n\
    \   description of any decoding information required.\n   For 'extensible' protocols\
    \ ('hasChildren(0)' BIT set) this includes\n   offset and type information for\
    \ the field(s) used for child selection\n   as well as information on determining\
    \ the start of the child\n   protocol.\n   For 'addressRecognitionCapable' protocols\
    \ this includes offset and\n   type information for the field(s) used to generate\
    \ addresses.\n   The DECODING clause is optional, and may be omitted if the REFERENCE\n\
    \   clause contains pointers to decoding information for the specified\n   protocol.\n"
- title: 4.2.9.  Mapping of the REFERENCE Clause
  contents:
  - "4.2.9.  Mapping of the REFERENCE Clause\n   If a publicly available reference\
    \ document exists for this protocol\n   it should be listed here.  Typically this\
    \ will be a URL if possible;\n   if not then it will be the name and address of\
    \ the controlling body.\n   The CHILDREN, ADDRESS-FORMAT, and DECODING clauses\
    \ should limit the\n   amount of information which may currently be obtained from\
    \ an\n   'authoritative' document, such as the Assigned Numbers document\n   [RFC1700].\
    \ Any duplication or paraphrasing of information should be\n   brief and consistent\
    \ with the authoritative document.\n   The REFERENCE clause is optional, but should\
    \ be implemented if an\n   authoritative reference exists for the protocol (especially\
    \ for\n   standard protocols).\n"
- title: 4.2.10.  Evaluating a Protocol-Identifier INDEX
  contents:
  - "4.2.10.  Evaluating a Protocol-Identifier INDEX\n   The following evaluation\
    \ is done after protocolDirTable INDEX value\n   has been converted into two OCTET\
    \ STRINGs according to the INDEX\n   encoding rules specified in the SMI [RFC1902].\n\
    \   Protocol-identifiers are evaluated left to right, starting with the\n   protocolDirID,\
    \ which length should be evenly divisible by four. The\n   protocolDirParameters\
    \ length should be exactly one quarter of the\n   protocolDirID string length.\n\
    \   Protocol-identifier parsing starts with the base layer identifier,\n   which\
    \ must be present, and continues for one or more upper layer\n   identifiers,\
    \ until all OCTETs of the protocolDirID have been used.\n   Layers may not be\
    \ skipped, so identifiers such as 'SNMP over IP' or\n   'TCP over anylink' can\
    \ not exist.\n   The base-layer-identifier also contains a 'special function\n\
    \   identifier' which may apply to the rest of the protocol identifier.\n   Wild-carding\
    \ at the base layer within a protocol encapsulation is the\n   only supported\
    \ special function at this time. Refer to the 'Base\n   Protocol Identifiers'\
    \ section for wildcard encoding rules.\n   After the protocol-tree identified\
    \ in protocolDirID has been parsed,\n   each parameter bit-mask (one octet for\
    \ each 4-octet layer-identifier)\n   is evaluated, and applied to the corresponding\
    \ protocol layer.\n   A protocol-identifier label may map to more than one value.\
    \  For\n   instance, 'ip' maps to 5 distinct values, one for each supported\n\
    \   encapsulation.  (see the 'IP' section under 'L3 Protocol\n   Identifiers'),\n\
    \   It is important to note that these macros are conceptually expanded\n   at\
    \ implementation time, not at run time.\n   If all the macros are expanded completely\
    \ by substituting all\n   possible values of each label for each child protocol,\
    \ a list of all\n   possible protocol-identifiers is produced.  So 'ip' would\
    \ result in 5\n   distinct protocol-identifiers.  Likewise each child of 'ip'\
    \ would map\n   to at least 5 protocol-identifiers, one for each encapsulation\
    \ (e.g.\n   ip over ether2, ip over LLC, etc.).\n"
- title: 5.  Protocol Identifier Macros
  contents:
  - "5.  Protocol Identifier Macros\n   The following PROTOCOL IDENTIFIER macros can\
    \ be used to construct\n   protocolDirID and protocolDirParameters strings.\n\
    \   The sections defining protocol examples are intended to grow over\n   subsequent\
    \ releases. Minimal protocol support is included at this\n   time.  (Refer to\
    \ section 3.2 for details on the protocol macro update\n   procedure.)\n   An\
    \ identifier is encoded by constructing the base-identifier, then\n   adding one\
    \ layer-identifier for each encapsulated protocol.\n"
- title: 5.1.  Base Identifier Encoding
  contents:
  - "5.1.  Base Identifier Encoding\n   The first layer encapsulation is called the\
    \ base identifier and it\n   contains optional protocol-function information and\
    \ the base layer\n   (e.g.  MAC layer) enumeration value used in this protocol\
    \ identifier.\n   The base identifier is encoded as four octets as shown in figure\
    \ 2.\n          Fig. 2\n     base-identifier format\n     +---+---+---+---+\n\
    \     |   |   |   |   |\n     | f |op1|op2| m |\n     |   |   |   |   |\n    \
    \ +---+---+---+---+ octet\n     | 1 | 1 | 1 | 1 | count\n   The first octet ('f')\
    \ is the special function code, found in table\n   4.1.  The next two octets ('op1'\
    \ and 'op2') are operands for the\n   indicated function. If not used, an operand\
    \ must be set to zero.  The\n   last octet, 'm', is the enumerated value for a\
    \ particular base layer\n   encapsulation, found in table 4.2.  All four octets\
    \ are encoded in\n   network-byte-order.\n"
- title: 5.1.1.  Protocol Identifier Functions
  contents:
  - "5.1.1.  Protocol Identifier Functions\n   The base layer identifier contains\
    \ information about any special\n   functions to perform during collections of\
    \ this protocol, as well as\n   the base layer encapsulation identifier.\n   The\
    \ first three octets of the identifier contain the function code\n   and two optional\
    \ operands. The fourth octet contains the particular\n   base layer encapsulation\
    \ used in this protocol (fig. 2).\n     Table 4.1  Assigned Protocol Identifier\
    \ Functions\n     -------------------------------------------------\n        \
    \   Function     ID    Param1               Param2\n           ----------------------------------------------------\n\
    \           none          0    not used (0)         not used (0)\n           wildcard\
    \      1    not used (0)         not used (0)\n"
- title: '5.1.1.1.  Function 0: No-op'
  contents:
  - "5.1.1.1.  Function 0: No-op\n   If the function ID field (1st octet) is equal\
    \ to zero, the the 'op1'\n   and 'op2' fields (2nd and 3rd octets) must also be\
    \ equal to zero.\n   This special value indicates that no functions are applied\
    \ to the\n   protocol identifier encoded in the remaining octets. The identifier\n\
    \   represents a normal protocol encapsulation.\n"
- title: '5.1.1.2.  Function 1: Protocol Wildcard Function'
  contents:
  - "5.1.1.2.  Function 1: Protocol Wildcard Function\n   The wildcard function (function-ID\
    \ = 1), is used to aggregate\n   counters, by using a single protocol value to\
    \ indicate potentially\n   many base layer encapsulations of a particular network\
    \ layer\n   protocol. A protocolDirEntry of this type will match any base-layer\n\
    \   encapsulation of the same protocol.\n   The 'op1' field (2nd octet) is not\
    \ used and must be set to zero.\n   The 'op2' field (3rd octet) is not used and\
    \ must be set to zero.\n   Each wildcard protocol identifier must be defined in\
    \ terms of a 'base\n   encapsulation'. This should be as 'standard' as possible\
    \ for\n   interoperability purposes. If an encapsulation over 'ether2' is\n  \
    \ permitted, than this should be used as the base encapsulation.\n   The agent\
    \ may also be requested to count some or all of the\n   individual encapsulations\
    \ for the same protocols, in addition to\n   wildcard counting.  Note that the\
    \ RMON-2 MIB [RMON2] does not require\n   that agents maintain counters for multiple\
    \ encapsulations of the same\n   protocol.  It is an implementation-specific matter\
    \ as to how an agent\n   determines which protocol combinations to allow in the\n\
    \   protocolDirTable at any given time.\n"
- title: 5.2.  Base Layer Protocol Identifiers
  contents:
  - "5.2.  Base Layer Protocol Identifiers\n   The base layer is mandatory, and defines\
    \ the base encapsulation of\n   the packet and any special functions for this\
    \ identifier.\n   There are no suggested protocolDirParameters bits for the base\
    \ layer.\n   The suggested ProtocolDirDescr field for the base layer is given\
    \ by\n   the corresponding \"Name\" field in the table 4.1 below. However,\n \
    \  implementations are only required to use the appropriate integer\n   identifier\
    \ values.\n   For most base layer protocols, the protocolDirType field should\n\
    \   contain bits set for  the 'hasChildren(0)' and\n   'addressRecognitionCapable(1)'\
    \ attributes.  However, the special\n   'ianaAssigned' base layer should have\
    \ no parameter or attribute bits\n   set.\n   By design, only 255 different base\
    \ layer encapsulations are\n   supported.  There are five base encapsulation values\
    \ defined at this\n   time. New base encapsulations (e.g. for new media types)\
    \ are expected\n   to be added over time.\n     Table 4.2  Base Layer Encoding\
    \ Values\n     --------------------------------------\n           Name       \
    \   ID\n           ------------------\n           ether2        1\n          \
    \ llc           2\n           snap          3\n           vsnap         4\n  \
    \         ianaAssigned    5\n"
- title: 5.2.1.  Ether2 Encapsulation
  contents:
  - '5.2.1.  Ether2 Encapsulation

    '
- title: ether2 PROTOCOL-IDENTIFIER
  contents:
  - "ether2 PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES {\n        hasChildren(0),\n\
    \        addressRecognitionCapable(1)\n    }\n    DESCRIPTION\n       \"DIX Ethernet,\
    \ also called Ethernet-II.\"\n    CHILDREN\n       \"The Ethernet-II type field\
    \ is used to select child protocols.\n       This is a 16-bit field.  Child protocols\
    \ are deemed to start at\n       the first octet after this type field.\n    \
    \   Children of this protocol are encoded as [ 0.0.0.1 ], the\n       protocol\
    \ identifier for 'ether2' followed by [ 0.0.a.b ] where\n       'a' and 'b' are\
    \ the network byte order encodings of the MSB and\n       LSB of the Ethernet-II\
    \ type value.\n       For example, a protocolDirID-fragment value of:\n      \
    \    0.0.0.1.0.0.8.0 defines IP encapsulated in ether2.\n       Children of are\
    \ named as 'ether2' followed by the type field\n       value in hexadecimal. \
    \ The above example would be declared as:\n          ether2 0x0800\"\n    ADDRESS-FORMAT\n\
    \       \"Ethernet addresses are 6 octets in network order.\"\n    DECODING\n\
    \       \"Only type values greater than or equal to 1500 decimal indicate\n  \
    \     Ethernet-II frames; lower values indicate 802.3 encapsulation\n       (see\
    \ below).\"\n    REFERENCE\n       \"A Standard for the Transmission of IP Datagrams\
    \ over Ethernet\n       Networks; RFC 894 [RFC894].\n       The authoritative\
    \ list of Ether Type values is identified by the\n       URL:\n          ftp://ftp.isi.edu/in-notes/iana/assignments/ethernet-numbers\"\
    \n    ::= { 1 }\n"
- title: 5.2.2.  LLC Encapsulation
  contents:
  - '5.2.2.  LLC Encapsulation

    '
- title: llc PROTOCOL-IDENTIFIER
  contents:
  - "llc PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES {\n        hasChildren(0),\n\
    \        addressRecognitionCapable(1)\n    }\n    DESCRIPTION\n       \"The LLC\
    \ (802.2) protocol.\"\n    CHILDREN\n       \"The LLC SSAP and DSAP (Source/Dest\
    \ Service Access Points) are\n       used to select child protocols.  Each of\
    \ these is one octet long,\n       although the least significant bit is a control\
    \ bit and should be\n       masked out in most situations.  Typically SSAP and\
    \ DSAP (once\n       masked) are the same for a given protocol - each end implicitly\n\
    \       knows whether it is the server or client in a client/server\n       protocol.\
    \  This is only a convention, however, and it is possible\n       for them to\
    \ be different.  The SSAP is matched against child\n       protocols first.  If\
    \ none is found then the DSAP is matched\n       instead.  The child protocol\
    \ is deemed to start at the first\n       octet after the LLC control field(s).\n\
    \       Children of 'llc' are encoded as [ 0.0.0.2 ], the protocol\n       identifier\
    \ component for LLC followed by [ 0.0.0.a ] where 'a' is\n       the SAP value\
    \ which maps to the child protocol.  For example, a\n       protocolDirID-fragment\
    \ value of:\n          0.0.0.2.0.0.0.240\n       defines NetBios over LLC.\n \
    \      Children are named as 'llc' followed by the SAP value in\n       hexadecimal.\
    \  So the above example would have been named:\n          llc 0xf0\"\n    ADDRESS-FORMAT\n\
    \       \"The address consists of 6 octets of MAC address in network\n       order.\
    \  Source routing bits should be stripped out of the address\n       if present.\"\
    \n    DECODING\n       \"Notice that LLC has a variable length protocol header;\
    \ there are\n       always three octets (DSAP, SSAP, control).  Depending on the\n\
    \       value of the control bits in the DSAP, SSAP and control fields\n     \
    \  there may be an additional octet of control information.\n       LLC can be\
    \ present on several different media.  For 802.3 and\n       802.5 its presence\
    \ is mandated (but see ether2 and raw802.3\n       encapsulations).  For 802.5\
    \ there is no other link layer\n       protocol.\n       Notice also that the\
    \ raw802.3 link layer protocol may take\n       precedence over this one in a\
    \ protocol specific manner such that\n       it may not be possible to utilize\
    \ all LSAP values if raw802.3 is\n       also present.\"\n    REFERENCE\n    \
    \   \"The authoritative list of LLC LSAP values is controlled by the\n       IEEE\
    \ Registration Authority:\n       IEEE Registration Authority\n          c/o Iris\
    \ Ringel\n          IEEE Standards Dept\n          445 Hoes Lane, P.O. Box 1331\n\
    \          Piscataway, NJ 08855-1331\n          Phone +1 908 562 3813\n      \
    \    Fax: +1 908 562 1571\"\n    ::= { 2 }\n"
- title: 5.2.3.  SNAP over LLC (OUI=000) Encapsulation
  contents:
  - '5.2.3.  SNAP over LLC (OUI=000) Encapsulation

    '
- title: snap PROTOCOL-IDENTIFIER
  contents:
  - "snap PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES {\n        hasChildren(0),\n\
    \        addressRecognitionCapable(1)\n    }\n    DESCRIPTION\n       \"The Sub-Network\
    \ Access Protocol (SNAP) is layered on top of LLC\n       protocol, allowing Ethernet-II\
    \ protocols to be run over a media\n       restricted to LLC.\"\n    CHILDREN\n\
    \       \"Children of 'snap' are identified by Ethernet-II type values;\n    \
    \   the SNAP PID (Protocol Identifier) field is used to select the\n       appropriate\
    \ child.  The entire SNAP protocol header is consumed;\n       the child protocol\
    \ is assumed to start at the next octet after\n       the PID.\n       Children\
    \ of 'snap' are encoded as [ 0.0.0.3 ], the protocol\n       identifier for 'snap',\
    \ followed by [ 0.0.a.b ] where 'a' and 'b'\n       are the MSB and LSB of the\
    \ Ethernet-II type value.  For example,\n       a protocolDirID-fragment value\
    \ of:\n          0.0.0.3.0.0.8.0\n       defines the IP/SNAP protocol.\n     \
    \  Children of this protocol are named 'snap' followed by the\n       Ethernet-II\
    \ type value in hexadecimal.  The above example would\n       be named:\n    \
    \      snap 0x0800\"\n    ADDRESS-FORMAT\n         \"The address format for SNAP\
    \ is the same as that for LLC\"\n    DECODING\n       \"SNAP is only present over\
    \ LLC.  Both SSAP and DSAP will be 0xAA\n       and a single control octet will\
    \ be present.  There are then three\n       octets of OUI and two octets of PID.\
    \  For this encapsulation the\n       OUI must be 0x000000 (see 'vsnap' below\
    \ for non-zero OUIs).\"\n    REFERENCE\n       \"SNAP Identifier values are assigned\
    \ by the IEEE Standards\n       Office.  The address is:\n               IEEE\
    \ Registration Authority\n               c/o Iris Ringel\n               IEEE\
    \ Standards Dept\n               445 Hoes Lane, P.O. Box 1331\n              \
    \ Piscataway, NJ 08855-1331\n               Phone +1 908 562 3813\n          \
    \     Fax: +1 908 562 1571\"\n    ::= { 3 }\n"
- title: 5.2.4.  SNAP over LLC (OUI != 000) Encapsulation
  contents:
  - '5.2.4.  SNAP over LLC (OUI != 000) Encapsulation

    '
- title: vsnap PROTOCOL-IDENTIFIER
  contents:
  - "vsnap PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES {\n        hasChildren(0),\n\
    \        addressRecognitionCapable(1)\n    }\n    DESCRIPTION\n       \"This pseudo-protocol\
    \ handles all SNAP packets which do not have\n       a zero OUI.  See 'snap' above\
    \ for details of those that do.\"\n    CHILDREN\n       \"Children of 'vsnap'\
    \ are selected by the 3 octet OUI; the PID is\n       not parsed; child protocols\
    \ are deemed to start with the first\n       octet of the SNAP PID field, and\
    \ continue to the end of the\n       packet.\n       Children of 'vsnap' are encoded\
    \ as [ 0.0.0.4 ], the protocol\n       identifier for 'vsnap', followed by [ 0.a.b.c.0.0.d.e\
    \ ] where\n       'a', 'b' and 'c' are the 3 octets of the OUI field in network\n\
    \       byte order. This is in turn followed by the 16-bit EtherType\n       value,\
    \ where the 'd' and 'e' represent the MSB and LSB of the\n       EtherType, respectively.\n\
    \       For example, a protocolDirID-fragment value of:\n         0.0.0.4.0.8.0.7.0.0.128.155\n\
    \       defines the AppleTalk Phase 2 protocol over vsnap.\n       Note that two\
    \ protocolDirParameters octets must be present in\n       protocolDirTable INDEX\
    \ values for 'vsnap' protocols.  The first\n       protocolDirParameters octet\
    \ defines the actual parameters. The\n       second protocolDirParameters octet\
    \ is not used and must be set to\n       zero.\n       Children are named as 'vsnap(<OUI>)\
    \ <ethertype>', where the\n       '<OUI>' field is represented as 3 octets in\
    \ hexadecimal notation\n       or the ASCII string associated with the OUI value.\
    \ The\n       <ethertype> field is represented by the 2 byte EtherType value in\n\
    \       hexadecimal notation. So the above example would be named:\n         'vsnap(0x080007)\
    \ 0x809b' or 'vsnap(apple) 0x809b'\"\n    ADDRESS-FORMAT\n       \"The LLC address\
    \ format is inherited by 'vsnap'.  See the 'llc'\n       protocol identifier for\
    \ more details.\"\n    DECODING\n       \"Same as for 'snap' except the OUI is\
    \ non-zero.\"\n    REFERENCE\n       \"SNAP Identifier values are assigned by\
    \ the IEEE Standards\n       Office.  The address is:\n               IEEE Registration\
    \ Authority\n               c/o Iris Ringel\n               IEEE Standards Dept\n\
    \               445 Hoes Lane, P.O. Box 1331\n               Piscataway, NJ 08855-1331\n\
    \               Phone +1 908 562 3813\n               Fax: +1 908 562 1571\"\n\
    \    ::= { 4 }\n"
- title: 5.2.5.  IANA Assigned Protocols
  contents:
  - '5.2.5.  IANA Assigned Protocols

    '
- title: ianaAssigned PROTOCOL-IDENTIFIER
  contents:
  - "ianaAssigned PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES { }\n  \
    \  DESCRIPTION\n       \"This branch contains protocols which do not conform easily\
    \ to\n       the hierarchical format utilized in the other link layer\n      \
    \ branches.  Usually, such a protocol 'almost' conforms to a\n       particular\
    \ 'well-known' identifier format, but additional\n       criteria are used (e.g.\
    \ configuration-based), making protocol\n       identification difficult or impossible\
    \ by examination of\n       appropriate network traffic.  preventing the any 'well-known'\n\
    \       protocol-identifier macro from being used.\n       Sometimes well-known\
    \ protocols are simply remapped to a different\n       port number by one or more\
    \ venders (e.g. SNMP). These protocols\n       can be identified with the 'user-extensibility'\
    \ feature of the\n       protocolDirTable, and do not need special IANA\n    \
    \   assignments.\n       A centrally located list of these enumerated protocols\
    \ must be\n       maintained to insure interoperability.\n       (See section\
    \ 3.2 for details on the document update procedure.)\n       Support for new link-layers\
    \ will be added explicitly, and only\n       protocols which cannot possibly be\
    \ represented in a better way\n       will be considered as 'ianaEnumerated' protocols.\n\
    \       IANA assigned protocols are identified by the base-layer-selector\n  \
    \     value [ 0.0.0.5 ], followed by the four octets [ a.b.c.d ] of the\n    \
    \   integer value corresponding to the particular IANA protocol.\n       Do not\
    \ create children of this protocol unless you are sure that\n       they cannot\
    \ be handled by the more conventional link layers\n       above.\"\n    CHILDREN\n\
    \       \"Children of this protocol are identified by implementation-\n      \
    \ specific means, described (as best as possible) in the 'DECODING'\n       clause\
    \ within the protocol-variant-identifier macro for each\n       enumerated protocol.\n\
    \       For example, a protocolDirID-fragment value of:\n          0.0.0.5.0.0.0.1\n\
    \       defines the IPX protocol encapsulated directly in 802.3\n       Children\
    \ are named 'ianaAssigned' followed by the name or numeric\n       of the particular\
    \ IANA assigned protocol. The above\n       example would be named:\n        \
    \  'ianaAssigned 1' or 'ianaAssigned ipxOverRaw8023'\"\n    DECODING\n       \"\
    The 'ianaAssigned' base layer is a pseudo-protocol and is not\n       decoded.\"\
    \n    REFERENCE\n       \"Refer to individual PROTOCOL-IDENTIFIER macros for information\n\
    \       on each child of the IANA assigned protocol.\"\n    ::= { 5 }\n"
- title: 5.2.5.1.  IANA Assigned Protocol Identifiers
  contents:
  - "5.2.5.1.  IANA Assigned Protocol Identifiers\n   The following protocol-variant-identifier\
    \ macro declarations are used\n   to identify the RMONMIB IANA assigned protocols\
    \ in a proprietary way,\n   by simple enumeration. Note that an additional four-octet\
    \ layer\n   identifier may be used for some enumerations (as with the 'vsnap'\n\
    \   base-layer identifier). Refer to the 'CHILDREN' clause in the\n   protocol-identifier\
    \ macro for a particular protocol to determine the\n   number of octets in the\
    \ 'ianaAssigned' layer-identifier.\n"
- title: ipxOverRaw8023 PROTOCOL-IDENTIFIER
  contents:
  - "ipxOverRaw8023 PROTOCOL-IDENTIFIER\n    VARIANT-OF  \"ipx\"\n    PARAMETERS \
    \ { }\n    ATTRIBUTES  { }\n    DESCRIPTION\n       \"This pseudo-protocol describes\
    \ an encapsulation of IPX over\n       802.3, without a type field.\n       Refer\
    \ to the macro for IPX for additional information about this\n       protocol.\"\
    \n    DECODING\n       \"Whenever the 802.3 header indicates LLC a set of protocol\n\
    \       specific tests needs to be applied to determine whether this is a\n  \
    \     'raw8023' packet or a true 802.2 packet.  The nature of these\n       tests\
    \ depends on the active child protocols for 'raw8023' and is\n       beyond the\
    \ scope of this document.\"\n    ::= { ianaAssigned 1 }\n"
- title: '5.3.  L3: Children of Base Protocol Identifiers'
  contents:
  - "5.3.  L3: Children of Base Protocol Identifiers\n   Network layer protocol identifier\
    \ macros contain additional\n   information about the network layer, and is found\
    \ immediately\n   following a base layer-identifier in a protocol identifier.\n\
    \   The ProtocolDirParameters supported at the network layer are\n   'countsFragments(0)',\
    \ and 'tracksSessions(1). An agent may choose to\n   implement a subset of these\
    \ parameters.\n   The protocol-name should be used for the ProtocolDirDescr field.\
    \  The\n   ProtocolDirType ATTRIBUTES used at the network layer are\n   'hasChildren(0)'\
    \ and 'addressRecognitionCapable(1)'. Agents may\n   choose to implement a subset\
    \ of these attributes for each protocol,\n   and therefore limit which tables\
    \ the indicated protocol can be\n   present (e.g.  protocol distribution, host,\
    \ and matrix tables)..\n   The following protocol-identifier macro declarations\
    \ are given for\n   example purposes only. They are not intended to constitute\
    \ an\n   exhaustive list or an authoritative source for any of the protocol\n\
    \   information given.  However, any protocol that can encapsulate other\n   protocols\
    \ must be documented here in order to encode the children\n   identifiers into\
    \ protocolDirID strings. Leaf protocols should be\n   documented as well, but\
    \ an implementation can identify a leaf\n   protocol even if it isn't listed here\
    \ (as long as the parent is\n   documented).\n"
- title: 5.3.1.  IP
  contents:
  - '5.3.1.  IP

    '
- title: ip PROTOCOL-IDENTIFIER
  contents:
  - "ip PROTOCOL-IDENTIFIER\n    PARAMETERS {\n          countsFragments(0)  -- This\
    \ parameter applies to all child\n                              -- protocols.\n\
    \    }\n    ATTRIBUTES {\n        hasChildren(0),\n        addressRecognitionCapable(1)\n\
    \    }\n    DESCRIPTION\n       \"The protocol identifiers for the Internet Protocol\
    \ (IP). Note\n       that IP may be encapsulated within itself, so more than one\
    \ of\n       the following identifiers may be present in a particular\n      \
    \ protocolDirID string.\"\n    CHILDREN\n       \"Children of 'ip' are selected\
    \ by the value in the Protocol field\n       (one octet), as defined in the PROTOCOL\
    \ NUMBERS table within the\n       Assigned Numbers Document.\n       The value\
    \ of the Protocol field is encoded in an octet string as\n       [ 0.0.0.a ],\
    \ where 'a' is the protocol field .\n       Children of 'ip' are encoded as [\
    \ 0.0.0.a ], and named as 'ip a'\n       where 'a' is the protocol field value.\
    \ For example, a\n       protocolDirID-fragment value of:\n          0.0.0.1.0.0.8.0.0.0.0.1\n\
    \       defines an encapsulation of ICMP (ether2.ip.icmp)\"\n    ADDRESS-FORMAT\n\
    \       \"4 octets of the IP address, in network byte order.  Each ip\n      \
    \ packet contains two addresses, the source address and the\n       destination\
    \ address.\"\n    DECODING\n       \"Note: ether2/ip/ipip4/udp is a different\
    \ protocolDirID than\n       ether2/ip/udp, as identified in the protocolDirTable.\
    \ As such,\n       two different local protocol index values will be assigned\
    \ by the\n       agent. E.g. (full INDEX values shown):\n        ether2/ip/ipip4/udp\
    \ 16.0.0.0.1.0.0.8.0.0.0.0.4.0.0.0.17.4.0.0.0.0\n        ether2/ip/udp       12.0.0.0.1.0.0.8.0.0.0.0.17.3.0.0.0\
    \ \"\n    REFERENCE\n       \"RFC 791 [RFC791] defines the Internet Protocol;\
    \ The following\n       URL defines the authoritative repository for the PROTOCOL\
    \ NUMBERS\n       Table:\n          ftp://ftp.isi.edu/in-notes/iana/assignments/protocol-numbers\"\
    \n    ::= {\n          ether2 0x0800,\n          llc 0x06,\n          snap 0x0800,\n\
    \          ip 4,\n          ip 94\n    }\n"
- title: 5.3.2.  IPX
  contents:
  - '5.3.2.  IPX

    '
- title: ipx PROTOCOL-IDENTIFIER
  contents:
  - "ipx PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES {\n         hasChildren(0),\n\
    \         addressRecognitionCapable(1)\n    }\n    DESCRIPTION\n       \"Novell\
    \ IPX\"\n    CHILDREN\n       \"Children of IPX are defined by the 16 bit value\
    \ of the\n       Destination Socket field.  The value is encoded into an octet\n\
    \       string as [ 0.0.a.b ], where 'a' and 'b' are the network byte\n      \
    \ order encodings of the MSB and LSB of the destination socket\n       field.\"\
    \n    ADDRESS-FORMAT\n       \"4 bytes of Network number followed by the 6 bytes\
    \ Host address\n       each in network byte order\".\n    REFERENCE\n       \"\
    The IPX protocol is defined by the Novell Corporation\n       A complete description\
    \ of IPX may be secured at the following\n       address:\n              Novell,\
    \ Inc.\n              122 East 1700 South\n              P. O. Box 5900\n    \
    \          Provo, Utah 84601 USA\n              800 526 5463\n              Novell\
    \ Part # 883-000780-001\"\n    ::= {\n        ether2     0x8137,           --\
    \ 0.0.129.55\n        llc        0xe0e003,         -- 0.224.224.3\n        snap\
    \       0x8137,           -- 0.0.129.55\n        ianaAssigned 0x1            \
    \   -- 0.0.0.1   (ipxOverRaw8023)\n    }\n"
- title: 5.3.3.  ARP
  contents:
  - '5.3.3.  ARP

    '
- title: arp PROTOCOL-IDENTIFIER
  contents:
  - "arp PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES { }\n    DESCRIPTION\n\
    \       \"An Address Resolution Protocol message (request or response).\n    \
    \   This protocol does not include Reverse ARP (RARP) packets, which\n       are\
    \ counted separately.\"\n    REFERENCE\n       \"RFC 826 [RFC826] defines the\
    \ Address Resolution Protocol.\"\n    ::= {\n        ether2 0x806,   -- [ 0.0.8.6\
    \ ]\n        snap 0x806\n    }\n"
- title: 5.3.4.  IDP
  contents:
  - '5.3.4.  IDP

    '
- title: idp PROTOCOL-IDENTIFIER
  contents:
  - "idp PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES {\n         hasChildren(0),\n\
    \         addressRecognitionCapable(1)\n    }\n    DESCRIPTION\n       \"Xerox\
    \ IDP\"\n    CHILDREN\n       \"Children of IDP are defined by the 8 bit value\
    \ of the Packet\n       type field.  The value is encoded into an octet string\
    \ as [\n       0.0.0.a ], where 'a' is the value of the packet type field in\n\
    \       network byte order.\"\n    ADDRESS-FORMAT\n       \"4 bytes of Network\
    \ number followed by the 6 bytes Host address\n       each in network byte order\"\
    .\n    REFERENCE\n       \"Xerox Corporation, Document XNSS 028112, 1981\"\n \
    \   ::=  {\n       ether2  0x600,     -- [ 0.0.6.0 ]\n       snap    0x600\n \
    \   }\n"
- title: 5.3.5.  AppleTalk ARP
  contents:
  - '5.3.5.  AppleTalk ARP

    '
- title: atalkarp PROTOCOL-IDENTIFIER
  contents:
  - "atalkarp PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES { }\n    DESCRIPTION\n\
    \       \"AppleTalk Address Resolution Protocol.\"\n    REFERENCE\n       \"AppleTalk\
    \ Phase 2 Protocol Specification, document ADPA\n       #C0144LL/A.\"\n    ::=\
    \   {\n      ether2 0x80f3,  --  [ 0.0.128.243 ]\n      vsnap(0x080007) 0x80f3\n\
    \    }\n"
- title: 5.3.6.  AppleTalk
  contents:
  - '5.3.6.  AppleTalk

    '
- title: atalk PROTOCOL-IDENTIFIER
  contents:
  - "atalk PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES {\n        hasChildren(0),\n\
    \        addressRecognitionCapable(1)\n    }\n    DESCRIPTION\n       \"AppleTalk\
    \ Protocol.\"\n    CHILDREN\n       \"Children of ATALK are defined by the 8 bit\
    \ value of the DDP type\n       field.  The value is encoded into an octet string\
    \ as [ 0.0.0.a ],\n       where 'a' is the value of the DDP type field in network\
    \ byte\n       order.\"\n    ADDRESS-FORMAT\n       \"2 bytes of Network number\
    \ followed by 1 byte of node id each in\n       network byte order\".\n    REFERENCE\n\
    \       \"AppleTalk Phase 2 Protocol Specification, document ADPA\n       #C0144LL/A.\"\
    \n    ::=   {\n      ether2  0x809b,   -- [ 0.0.128.155 ]\n      vsnap(0x080007)\
    \ 0x809b\n    }\n"
- title: '5.4.  L4: Children of L3 Protocols'
  contents:
  - '5.4.  L4: Children of L3 Protocols

    '
- title: 5.4.1.  ICMP
  contents:
  - '5.4.1.  ICMP

    '
- title: icmp PROTOCOL-IDENTIFIER
  contents:
  - "icmp PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES { }\n    DESCRIPTION\n\
    \       \"Internet Message Control Protocol.\"\n    REFERENCE\n       \"RFC 792\
    \ [RFC792] defines the Internet Control Message Protocol.\"\n    ::= { ip 1 }\n"
- title: 5.4.2.  TCP
  contents:
  - '5.4.2.  TCP

    '
- title: tcp  PROTOCOL-IDENTIFIER
  contents:
  - "tcp  PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES {\n         hasChildren(0)\n\
    \    }\n    DESCRIPTION\n       \"Transmission Control Protocol.\"\n    CHILDREN\n\
    \       \"Children of TCP are identified by the 16 bit Destination Port\n    \
    \   value as specified in RFC 793. They are encoded as [ 0.0.a.b],\n       where\
    \ 'a' is the MSB and 'b' is the LSB of the Destination Port\n       value. Both\
    \ bytes are encoded in network byte order.  For\n       example, a protocolDirId-fragment\
    \ of:\n           0.0.0.1.0.0.8.0.0.0.0.6.0.0.0.23\n       identifies an encapsulation\
    \ of the telnet protocol\n       (ether2.ip.tcp.telnet)\"\n    REFERENCE\n   \
    \    \"RFC 793 [RFC793] defines the Transmission Control Protocol.\n       The\
    \ following URL defines the authoritative repository for\n       reserved and\
    \ registered TCP port values:\n         ftp://ftp.isi.edu/in-notes/iana/assignments/port-numbers\"\
    \n    ::=  { ip 6 }\n"
- title: 5.4.3.  UDP
  contents:
  - '5.4.3.  UDP

    '
- title: udp  PROTOCOL-IDENTIFIER
  contents:
  - "udp  PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES {\n         hasChildren(0)\n\
    \    }\n    DESCRIPTION\n       \"User Datagram Protocol.\"\n    CHILDREN\n  \
    \     \"Children of UDP are identified by the 16 bit Destination Port\n      \
    \ value as specified in RFC 768. They are encoded as [ 0.0.a.b ],\n       where\
    \ 'a' is the MSB and 'b' is the LSB of the Destination Port\n       value. Both\
    \ bytes are encoded in network byte order.  For\n       example, a protocolDirId-fragment\
    \ of:\n           0.0.0.1.0.0.8.0.0.0.0.17.0.0.0.161\n       identifies an encapsulation\
    \ of SNMP (ether2.ip.udp.snmp)\"\n    REFERENCE\n       \"RFC 768 [RFC768] defines\
    \ the User Datagram Protocol.\n       The following URL defines the authoritative\
    \ repository for\n       reserved and registered UDP port values:\n         ftp://ftp.isi.edu/in-notes/iana/assignments/port-numbers\"\
    \n   ::= { ip 17 }\n"
- title: '5.5.  L5: Application Layer Protocols'
  contents:
  - '5.5.  L5: Application Layer Protocols

    '
- title: 5.5.1.  FTP
  contents:
  - '5.5.1.  FTP

    '
- title: 5.5.1.1.  FTP-DATA
  contents:
  - '5.5.1.1.  FTP-DATA

    '
- title: ftp-data PROTOCOL-IDENTIFIER
  contents:
  - "ftp-data PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES { }\n    DESCRIPTION\n\
    \       \"The File Transfer Protocol Data Port; the FTP Server process\n     \
    \  default data-connection port. \"\n    REFERENCE\n       \"RFC 959 [RFC959]\
    \ defines the File Transfer Protocol.  Refer to\n       section 3.2 of [RFC959]\
    \ for details on FTP data connections.\"\n    ::= { tcp 20 }\n"
- title: 5.5.1.2.  FTP Control
  contents:
  - '5.5.1.2.  FTP Control

    '
- title: ftp PROTOCOL-IDENTIFIER
  contents:
  - "ftp PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES { }\n    DESCRIPTION\n\
    \       \"The File Transfer Protocol Control Port; An FTP client initiates\n \
    \      an FTP control connection by sending FTP commands from user port\n    \
    \   (U) to this port.\"\n    REFERENCE\n       \"RFC 959 [RFC959] defines the\
    \ File Transfer Protocol.\"\n    ::= { tcp 21 }\n"
- title: 5.5.2.  Telnet
  contents:
  - '5.5.2.  Telnet

    '
- title: telnet PROTOCOL-IDENTIFIER
  contents:
  - "telnet PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES { }\n    DESCRIPTION\n\
    \       \"The Telnet Protocol; The purpose of the TELNET Protocol is to\n    \
    \   provide a fairly general, bi-directional, eight-bit byte oriented\n      \
    \ communications facility.  Its primary goal is to allow a standard\n       method\
    \ of interfacing terminal devices and terminal-oriented\n       processes to each\
    \ other. \"\n    REFERENCE\n       \"RFC 854 [RFC854] defines the basic Telnet\
    \ Protocol.\"\n    ::= { tcp 23 }\n"
- title: 5.5.3.  SMTP
  contents:
  - '5.5.3.  SMTP

    '
- title: smtp PROTOCOL-IDENTIFIER
  contents:
  - "smtp PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES { }\n    DESCRIPTION\n\
    \       \"The Simple Mail Transfer Protocol; SMTP control and data\n       messages\
    \ are sent on this port.\"\n    REFERENCE\n       \"RFC 821 [RFC821] defines the\
    \ basic Simple Mail Transfer\n       Protocol.\"\n    ::= { tcp 25 }\n"
- title: 5.5.4.  DNS
  contents:
  - '5.5.4.  DNS

    '
- title: domain PROTOCOL-IDENTIFIER
  contents:
  - "domain PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES { }\n    DESCRIPTION\n\
    \       \"Domain Name Service Protocol; DNS may be transported by either\n   \
    \    UDP [RFC768] or TCP [RFC793].  If the transport is UDP, DNS\n       requests\
    \ restricted to 512 bytes in length may be sent to this\n       port.\"\n    REFERENCE\n\
    \       \"RFC 1035 [RFC1035] defines the Bootstrap Protocol.\"\n    ::= { udp\
    \ 53,\n          tcp 53  }\n"
- title: 5.5.5.  BOOTP
  contents:
  - '5.5.5.  BOOTP

    '
- title: 5.5.5.1.  Bootstrap Server Protocol
  contents:
  - '5.5.5.1.  Bootstrap Server Protocol

    '
- title: bootps PROTOCOL-IDENTIFIER
  contents:
  - "bootps PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES { }\n    DESCRIPTION\n\
    \       \"Bootstrap Protocol Server Protocol; BOOTP Clients send requests\n  \
    \     (usually broadcast) to the bootps port.\"\n    REFERENCE\n       \"RFC 951\
    \ [RFC951] defines the Bootstrap Protocol.\"\n    ::= { udp 67 }\n"
- title: 5.5.5.2.  Bootstrap Client Protocol
  contents:
  - '5.5.5.2.  Bootstrap Client Protocol

    '
- title: bootpc PROTOCOL-IDENTIFIER
  contents:
  - "bootpc PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES { }\n    DESCRIPTION\n\
    \       \"Bootstrap Protocol Client Protocol; BOOTP Server replies are\n     \
    \  sent to the BOOTP Client using this destination port.\"\n    REFERENCE\n  \
    \     \"RFC 951 [RFC951] defines the Bootstrap Protocol.\"\n    ::= { udp 68 }\n"
- title: 5.5.6.  TFTP
  contents:
  - '5.5.6.  TFTP

    '
- title: tftp PROTOCOL-IDENTIFIER
  contents:
  - "tftp PROTOCOL-IDENTIFIER\n    PARAMETERS {\n        tracksSessions(1)\n    }\n\
    \    ATTRIBUTES { }\n    DESCRIPTION\n       \"Trivial File Transfer Protocol;\
    \ Only the first packet of each\n       TFTP transaction will be sent to port\
    \ 69. If the tracksSessions\n       attribute is set, then packets for each TFTP\
    \ transaction will be\n       attributed to tftp, instead of the unregistered\
    \ port numbers that\n       will be encoded in subsequent packets.\"\n    REFERENCE\n\
    \       \"RFC 1350 [RFC1350] defines the TFTP Protocol (revision 2); RFC\n   \
    \    1782 [RFC1782] defines TFTP Option Extensions; RFC 1783 [RFC1783]\n     \
    \  defines the TFTP Blocksize Option; RFC 1784 [RFC1784] defines\n       TFTP\
    \ Timeout Interval and Transfer Size Options.\"\n    ::= { udp 69 }\n"
- title: 5.5.7.  HTTP
  contents:
  - '5.5.7.  HTTP

    '
- title: www-http PROTOCOL-IDENTIFIER
  contents:
  - "www-http PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES { }\n    DESCRIPTION\n\
    \       \"Hypertext Transfer Protocol; \"\n    REFERENCE\n       \"RFC 1945 [RFC1945]\
    \ defines the Hypertext Transfer Protocol\n       (HTTP/1.0).\"\n    ::= { tcp\
    \ 80 }\n"
- title: 5.5.8.  POP3
  contents:
  - '5.5.8.  POP3

    '
- title: pop3 PROTOCOL-IDENTIFIER
  contents:
  - "pop3 PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES { }\n    DESCRIPTION\n\
    \       \"Post Office Protocol -- Version 3. Clients establish connections\n \
    \      with POP3 servers by using this destination port number.\"\n    REFERENCE\n\
    \       \"RFC 1725 [RFC1725] defines Version 3 of the Post Office\n       Protocol.\"\
    \n    ::= { tcp 110 }\n"
- title: 5.5.9.  SUNRPC
  contents:
  - '5.5.9.  SUNRPC

    '
- title: sunrpc PROTOCOL-IDENTIFIER
  contents:
  - "sunrpc PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES {\n          \
    \      hasChildren(0)   -- port mapper function numbers\n        }\n    DESCRIPTION\n\
    \       \"SUN Remote Procedure Call Protocol. Port mapper function\n       requests\
    \ are sent to this destination port.\"\n    CHILDREN\n       Specific RPC functions\
    \ are represented as children of the sunrpc\n       protocol. Each 'RPC function\
    \ protocol' is identified by its\n       function number assignment. RPC function\
    \ number assignments are\n       defined by different naming authorities, depending\
    \ of the\n       function identifier value.\n       From [RFC1831]:\n       Program\
    \ numbers are given out in groups of hexadecimal 20000000\n       (decimal 536870912)\
    \ according to the following chart:\n                     0 - 1fffffff   defined\
    \ by rpc@sun.com\n              20000000 - 3fffffff   defined by user\n      \
    \        40000000 - 5fffffff   transient\n              60000000 - 7fffffff  \
    \ reserved\n              80000000 - 9fffffff   reserved\n              a0000000\
    \ - bfffffff   reserved\n              c0000000 - dfffffff   reserved\n      \
    \        e0000000 - ffffffff   reserved\n       Children of 'sunrpc' are encoded\
    \ as [ 0.0.0.111], the protocol\n       identifier component for 'sunrpc', followed\
    \ by [ a.b.c.d ], where\n       a.b.c.d is the 32 bit binary RPC program number\
    \ encoded in\n       network byte order.  For example, a protocolDirID-fragment\
    \ value\n       of:\n           0.0.0.111.0.1.134.163\n       defines the NFS\
    \ function (and protocol).\n       Children are named as 'sunrpc' followed by\
    \ the RPC function\n       number in base 10 format. For example, NFS would be\
    \ named:\n           'sunrpc 100003'.\n    REFERENCE\n       \"RFC 1831 [RFC1831]\
    \ defines the Remote Procedure Call Protocol\n       Version 2.  The authoritative\
    \ list of RPC Functions is identified\n       by the URL:\n           ftp://ftp.isi.edu/in-notes/iana/assignments/sun-rpc-numbers\"\
    \n    ::= { udp 111 }\n"
- title: 5.5.10.  NFS
  contents:
  - '5.5.10.  NFS

    '
- title: nfs  PROTOCOL-IDENTIFIER
  contents:
  - "nfs  PROTOCOL-IDENTIFIER\n    PARAMETERS {\n                countsFragments(0)\n\
    \        }\n    ATTRIBUTES { }\n    DESCRIPTION\n       \"Sun Network File System\
    \ (NFS);\"\n    DECODING\n       \"The first packet in an NFS transaction is sent\
    \ to the port-\n       mapper, and therefore decoded statically by monitoring\
    \ RFC\n       portmap requests [RFC1831]. Any subsequent NFS fragments must be\n\
    \       decoded and correctly identified by 'remembering' the port\n       assignments\
    \ used in each RPC function call (as identified\n       according to the procedures\
    \ in the RPC Specification Version 2\n       [RFC1831]).\n       The 'countsFragments(0)'\
    \ PARAMETER bit is used to indicate\n       whether the probe can (and should)\
    \ monitor portmapper activity to\n       correctly attribute all NFS packets.\"\
    \n    REFERENCE\n       \"The NFS Version 3 Protocol Specification is defined\
    \ in RFC 1813\n       [RFC1813].\"\n    ::= {\n        sunrpc 100003         \
    \  --  [0.1.134.163]\n    }\n"
- title: 5.5.11.  SNMP
  contents:
  - '5.5.11.  SNMP

    '
- title: 5.5.11.1.  SNMP Request/Response
  contents:
  - '5.5.11.1.  SNMP Request/Response

    '
- title: snmp  PROTOCOL-IDENTIFIER
  contents:
  - "snmp  PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES { }\n    DESCRIPTION\n\
    \       \"Simple Network Management Protocol. Includes SNMPv1 and SNMPv2\n   \
    \    protocol versions. Does not include SNMP trap packets.\"\n    REFERENCE\n\
    \       \"The SNMP SMI is defined in RFC 1902 [RFC1902]. The SNMP\n       protocol\
    \ is defined in RFC 1905 [RFC1905].  Transport mappings\n       are defined in\
    \ RFC 1906 [RFC1906]; RFC 1420 (SNMP over IPX)\n       [RFC1420]; RFC 1419 (SNMP\
    \ over AppleTalk) [RFC1419].\"\n    ::= {\n        udp 161,\n        ipx 0x900f,\
    \   -- [ 0.0.144.15 ]\n        atalk 8\n    }\n"
- title: 5.5.11.2.  SNMP Trap
  contents:
  - '5.5.11.2.  SNMP Trap

    '
- title: snmptrap PROTOCOL-IDENTIFIER
  contents:
  - "snmptrap PROTOCOL-IDENTIFIER\n    PARAMETERS { }\n    ATTRIBUTES { }\n    DESCRIPTION\n\
    \       \"Simple Network Management Protocol Trap Port.\"\n    REFERENCE\n   \
    \    \"The SNMP SMI is defined in RFC 1902 [RFC1902]. The SNMP\n       protocol\
    \ is defined in RFC 1905 [RFC1905].  Transport mappings\n       are defined in\
    \ RFC 1906 [RFC1906]; RFC 1420 (SNMP over IPX)\n       [RFC1420]; RFC 1419 (SNMP\
    \ over AppleTalk) [RFC1419].\"\n    ::= {\n        udp 162,\n        ipx 0x9010,\n\
    \        atalk 9\n    }\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   This document was produced by the IETF RMONMIB Working\
    \ Group.\n   The authors wish to thank the following people for their\n   contributions\
    \ to this document:\n        Anil Singhal\n        Frontier Software Development,\
    \ Inc.\n        Jeanne Haney\n        Bay Networks\n        Dan Hansen\n     \
    \   Network General Corp.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: '[RFC768]'
  contents:
  - "[RFC768]\n     Postel, J., \"User Datagram Protocol\", STD 6, RFC 768,\n    \
    \ USC/Information Sciences Institute, August 1980.\n"
- title: '[RFC791]'
  contents:
  - "[RFC791]\n     Postel, J., ed., \"Internet Protocol - DARPA Internet Program\n\
    \     Protocol Specification\", STD 5, RFC 791, USC/Information Sciences\n   \
    \  Institute, September 1981.\n"
- title: '[RFC792]'
  contents:
  - "[RFC792]\n     Postel, J., \"Internet Control Message Protocol - DARPA Internet\n\
    \     Program Protocol Specification\", STD 5, RFC 792, USC/Information\n    \
    \ Sciences Institute, September 1981.\n"
- title: '[RFC793]'
  contents:
  - "[RFC793]\n     Postel, J., \"Transmission Control Protocol - DARPA Internet Program\n\
    \     Protocol Specification\", STD 5, RFC 793, USC/Information Sciences\n   \
    \  Institute, September 1981.\n"
- title: '[RFC821]'
  contents:
  - "[RFC821]\n     Postel, J., \"Simple Mail Transfer Protocol\", STD 10, RFC 821,\n\
    \     USC/Information Sciences Institute, August 1982.\n"
- title: '[RFC826]'
  contents:
  - "[RFC826]\n     Plummer, D., \"An Ethernet Address Resolution Protocol or\n  \
    \   \"Converting Network Protocol Addresses to 48-bit Ethernet Addresses\n   \
    \  for Transmission on Ethernet Hardware\", STD 37, RFC 826, MIT-LCS,\n     November\
    \ 1982.\n"
- title: '[RFC854]'
  contents:
  - "[RFC854]\n     Postel, J. and J. Reynolds, \"Telnet Protocol Specification\"\
    ,\n     STD 8, RFC 854, ISI, May 1983.\n"
- title: '[RFC894]'
  contents:
  - "[RFC894]\n     Hornig, C., \"A Standard for the Transmission of IP Datagrams\
    \ over\n     Ethernet Networks\", RFC 894, Symbolics, April 1984.\n"
- title: '[RFC951]'
  contents:
  - "[RFC951]\n     Croft, B., and J. Gilmore, \"BOOTSTRAP Protocol (BOOTP)\", RFC\
    \ 951,\n     Stanford and SUN Microsytems, September 1985.\n"
- title: '[RFC959]'
  contents:
  - "[RFC959]\n     Postel, J., and J. Reynolds, \"File Transfer Protocol\", STD 8,\n\
    \     RFC 959, USC/Information Sciences Institute, October 1985.\n"
- title: '[RFC1035]'
  contents:
  - "[RFC1035]\n     Mockapetris, P., \"Domain Names - Implementation and Specification\"\
    ,\n     STD 13, RFC 1035, USC/Information Sciences Institute, November\n     1987.\n"
- title: '[RFC1157]'
  contents:
  - "[RFC1157]\n     Case, J., M. Fedor, M. Schoffstall, J. Davin, \"Simple Network\n\
    \     Management Protocol\", STD 15, RFC 1157, SNMP Research,\n     Performance\
    \ Systems International, MIT Laboratory for Computer\n     Science, May 1990.\n"
- title: '[RFC1213]'
  contents:
  - "[RFC1213]\n     McCloghrie, K., and M. Rose, Editors, \"Management Information\
    \ Base\n     for Network Management of TCP/IP-based internets: MIB-II\", STD 17,\n\
    \     RFC 1213, Hughes LAN Systems, Performance Systems International,\n     March\
    \ 1991.\n"
- title: '[RFC1350]'
  contents:
  - "[RFC1350]\n     Sollins, K., \"TFTP Protocol (revision 2)\", RFC 1350, MIT, July\n\
    \     1992.\n"
- title: '[RFC1419]'
  contents:
  - "[RFC1419]\n     Minshall, G., and M.  Ritter, \"SNMP over AppleTalk\", RFC 1419,\n\
    \     Novell, Inc., Apple Computer, Inc., March 1993.\n"
- title: '[RFC1420]'
  contents:
  - "[RFC1420]\n     Bostock, S., \"SNMP over IPX\", RFC 1420, Novell, Inc., March\
    \ 1993.\n"
- title: '[RFC1700]'
  contents:
  - "[RFC1700]\n     Reynolds, J., and J. Postel, \"Assigned Numbers\", STD 2, RFC\
    \ 1700,\n     USC/Information Sciences Institute, October 1994.\n"
- title: '[RFC1725]'
  contents:
  - "[RFC1725]\n     Myers, J., and M. Rose, \"Post Office Protocol - Version 3\"\
    , RFC\n     1725, Carnegie Mellon, Dover Beach Consulting, November 1994.\n"
- title: '[RFC1757]'
  contents:
  - "[RFC1757]\n     S. Waldbusser, \"Remote Network Monitoring MIB\", RFC 1757, Carnegie\n\
    \     Mellon University, February 1995.\n"
- title: '[RFC1782]'
  contents:
  - "[RFC1782]\n     Malkin, G., and A. Harkin, T \"TFTP Option Extension\", RFC 1782,\n\
    \     Xylogics, Inc., Hewlett Packard Co., March 1995.\n"
- title: '[RFC1783]'
  contents:
  - "[RFC1783]\n     Malkin, G., and A. Harkin, T \"TFTP BlockOption Option\", RFC\
    \ 1783,\n     Xylogics, Inc., Hewlett Packard Co., March 1995.\n"
- title: '[RFC1784]'
  contents:
  - "[RFC1784]\n     Malkin, G., and A. Harkin, \"TFTP Timeout Interval and Transfer\
    \ Size\n     Options\", RFC 1784, Xylogics, Inc., Hewlett Packard Co., March\n\
    \     1995.\n"
- title: '[RFC1800]'
  contents:
  - "[RFC1800]\n     Postel, J., Editor, \"Internet Official Protocol Standards\"\
    , STD 1,\n     RFC 1920, IAB, March 1996.\n"
- title: '[RFC1831]'
  contents:
  - "[RFC1831]\n     Srinivasan, R., \"Remote Procedure Call Protocol Version 2\"\
    , RFC\n     1831, Sun Microsystems, Inc., August 1995.\n"
- title: '[RFC1902]'
  contents:
  - "[RFC1902]\n     SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n\
    \     S. Waldbusser, \"Structure of Management Information for version 2\n   \
    \  of the Simple Network Management Protocol (SNMPv2)\", RFC 1902,\n     January\
    \ 1996.\n"
- title: '[RFC1903]'
  contents:
  - "[RFC1903]\n     SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n\
    \     S. Waldbusser, \"Textual Conventions for version 2 of the Simple\n     Network\
    \ Management Protocol (SNMPv2)\", RFC 1903, January 1996.\n"
- title: '[RFC1904]'
  contents:
  - "[RFC1904]\n     SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n\
    \     S. Waldbusser, \"Conformance Statements for version 2 of the Simple\n  \
    \   Network Management Protocol (SNMPv2)\", RFC 1904, January 1996.\n"
- title: '[RFC1905]'
  contents:
  - "[RFC1905]\n     SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n\
    \     S. Waldbusser, \"Protocol Operations for version 2 of the Simple\n     Network\
    \ Management Protocol (SNMPv2)\", RFC 1905, January 1996.\n"
- title: '[RFC1906]'
  contents:
  - "[RFC1906]\n     SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\
    \ S.\n     Waldbusser, \"Transport Mappings for Version 2 of the Simple Network\n\
    \     Management Protocol (SNMPv2)\", RFC 1906, January 1996.\n"
- title: '[RFC1945]'
  contents:
  - "[RFC1945]\n     Berners-Lee, T., and R. Fielding, \"Hypertext Transfer Protocol\
    \ --\n     HTTP/1.0\", RFC 1945, MIT/UC-Irvine, November 1995.\n"
- title: '[RMON2]'
  contents:
  - "[RMON2]\n     S. Waldbusser, \"Remote Network Monitoring MIB (RMON-2)\", draft-\n\
    \     ietf-rmonmib-rmon2-03.txt, International Network Services, January\n   \
    \  1996.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 9.  Authors' Addresses
  contents:
  - "9.  Authors' Addresses\n   Andy Bierman\n   Cisco Systems, Inc.\n   170 West\
    \ Tasman Drive\n   San Jose, CA 95134\n   Phone: 408-527-3711\n   EMail: abierman@cisco.com\n\
    \   Robin Iddon\n   3Com/AXON\n   40/50 Blackfrias Street\n   Edinburgh, UK\n\
    \   Phone: +44 131.558.3888\n   EMail: robin_iddon@3mail.3com.com\n"
