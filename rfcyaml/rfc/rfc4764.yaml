- title: __initial_text__
  contents:
  - "                         The EAP-PSK Protocol:\n    A Pre-Shared Key Extensible\
    \ Authentication Protocol (EAP) Method\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This RFC is not a candidate for any level of Internet Standard.\
    \  The\n   IETF disclaims any knowledge of the fitness of this RFC for any\n \
    \  purpose and in particular notes that the decision to publish is not\n   based\
    \ on IETF review for such things as security, congestion control,\n   or inappropriate\
    \ interaction with deployed protocols.  The RFC Editor\n   has chosen to publish\
    \ this document at its discretion.  Readers of\n   this document should exercise\
    \ caution in evaluating its value for\n   implementation and deployment.  See\
    \ RFC 3932 for more information.\n   The IESG thinks that this work is related\
    \ to IETF work done in WGs\n   EMU and EAP, but this does not prevent publishing.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies EAP-PSK, an Extensible Authentication\n\
    \   Protocol (EAP) method for mutual authentication and session key\n   derivation\
    \ using a Pre-Shared Key (PSK).  EAP-PSK provides a\n   protected communication\
    \ channel when mutual authentication is\n   successful for both parties to communicate\
    \ over.  This document\n   describes the use of this channel only for protected\
    \ exchange of\n   result indications, but future EAP-PSK extensions may use the\
    \ channel\n   for other purposes.  EAP-PSK is designed for authentication over\n\
    \   insecure networks such as IEEE 802.11.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Design Goals for EAP-PSK ...................................4\n  \
    \         1.1.1. Simplicity ..........................................4\n    \
    \       1.1.2. Wide Applicability ..................................5\n      \
    \     1.1.3. Security ............................................5\n        \
    \   1.1.4. Extensibility .......................................5\n      1.2.\
    \ Terminology ................................................5\n      1.3. Conventions\
    \ ................................................8\n      1.4. Related Work ...............................................9\n\
    \   2. Protocol Overview ..............................................12\n  \
    \    2.1. EAP-PSK Key Hierarchy .....................................13\n    \
    \       2.1.1. The PSK ............................................13\n      \
    \     2.1.2. AK .................................................14\n        \
    \   2.1.3. KDK ................................................14\n      2.2.\
    \ The TEK ...................................................15\n      2.3. The\
    \ MSK ...................................................15\n      2.4. The EMSK\
    \ ..................................................15\n      2.5. The IV ....................................................15\n\
    \   3. Cryptographic Design of EAP-PSK ................................15\n  \
    \    3.1. The Key Setup .............................................16\n    \
    \  3.2. The Authenticated Key Exchange ............................19\n      3.3.\
    \ The Protected Channel .....................................23\n   4. EAP-PSK\
    \ Message Flows ..........................................25\n      4.1. EAP-PSK\
    \ Standard Authentication ...........................26\n      4.2. EAP-PSK Extended\
    \ Authentication ...........................28\n   5. EAP-PSK Message Format .........................................31\n\
    \      5.1. EAP-PSK First Message .....................................32\n  \
    \    5.2. EAP-PSK Second Message ....................................34\n    \
    \  5.3. EAP-PSK Third Message .....................................36\n      5.4.\
    \ EAP-PSK Fourth Message ....................................39\n   6. Rules of\
    \ Operation for the EAP-PSK Protected Channel ...........41\n      6.1. Protected\
    \ Result Indications ..............................41\n           6.1.1. CONT\
    \ ...............................................42\n           6.1.2. DONE_SUCCESS\
    \ .......................................43\n           6.1.3. DONE_FAILURE .......................................43\n\
    \      6.2. Extended Authentication ...................................43\n  \
    \ 7. IANA Considerations ............................................45\n    \
    \  7.1. Allocation of an EAP-Request/Response Type for EAP-PSK ....45\n      7.2.\
    \ Allocation of EXT Type Numbers ............................45\n   8. Security\
    \ Considerations ........................................46\n      8.1. Mutual\
    \ Authentication .....................................46\n      8.2. Protected\
    \ Result Indications ..............................47\n      8.3. Integrity Protection\
    \ ......................................48\n      8.4. Replay Protection .........................................48\n\
    \      8.5. Reflection Attacks ........................................48\n  \
    \    8.6. Dictionary Attacks ........................................49\n    \
    \  8.7. Key Derivation ............................................49\n      8.8.\
    \ Denial-of-Service Resistance ..............................51\n      8.9. Session\
    \ Independence ......................................51\n      8.10. Exposition\
    \ of the PSK ....................................52\n      8.11. Fragmentation\
    \ ............................................52\n      8.12. Channel Binding\
    \ ..........................................53\n      8.13. Fast Reconnect ...........................................53\n\
    \      8.14. Identity Protection ......................................53\n  \
    \    8.15. Protected Ciphersuite Negotiation ........................55\n    \
    \  8.16. Confidentiality ..........................................55\n      8.17.\
    \ Cryptographic Binding ....................................55\n      8.18. Implementation\
    \ of EAP-PSK ................................55\n   9. Security Claims ................................................56\n\
    \   10. Acknowledgments ...............................................57\n  \
    \ 11. References ....................................................57\n    \
    \  11.1. Normative References .....................................57\n      11.2.\
    \ Informative References ...................................58\n   Appendix A.\
    \ Generation of the PSK from a Password - Discouraged ...62\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Design Goals for EAP-PSK
  contents:
  - "1.1.  Design Goals for EAP-PSK\n   The Extensible Authentication Protocol (EAP)\
    \ [3] provides an\n   authentication framework that supports multiple authentication\n\
    \   methods.\n   This document specifies an EAP method, called EAP-PSK, that uses\
    \ a\n   Pre-Shared Key (PSK).\n   EAP-PSK was developed at France Telecom R&D\
    \ in 2003-2004.  It is\n   published as an RFC for the general information of\
    \ the Internet\n   community and to allow independent implementations.\n   Because\
    \ PSKs are of frequent use in security protocols, other\n   protocols may also\
    \ refer to a PSK or contain this word in their name.\n   For instance, Wi-Fi Protected\
    \ Access (WPA) [48] specifies an\n   authentication mode called \"WPA-PSK\". \
    \ EAP-PSK is distinct from these\n   protocols and should not be confused with\
    \ them.\n   Design goals for EAP-PSK were:\n   o  Simplicity: EAP-PSK should be\
    \ easy to implement and deploy without\n      any pre-existing infrastructure.\
    \  It should be available quickly\n      because recently-released protocols,\
    \ such as IEEE 802.11i [27],\n      employ EAP in a different threat model than\
    \ PPP [44] and thus\n      require \"modern\" EAP methods.\n   o  Wide applicability:\
    \ EAP-PSK should be suitable to authenticate\n      over any network, and in particular\
    \ over IEEE 802.11 [28] wireless\n      LANs.\n   o  Security: EAP-PSK should\
    \ be conservative in its cryptographic\n      design.\n   o  Extensibility: EAP-PSK\
    \ should be easily extensible.\n"
- title: 1.1.1.  Simplicity
  contents:
  - "1.1.1.  Simplicity\n   For the sake of simplicity, EAP-PSK relies on a single\
    \ cryptographic\n   primitive, AES-128 [7].\n   Restriction to such a primitive,\
    \ and in particular, not using\n   asymmetric cryptography like Diffie-Hellman\
    \ key exchange, makes EAP-\n   PSK:\n   o  Easy to understand and implement while\
    \ avoiding cryptographic\n      negotiations.\n   o  Lightweight and well suited\
    \ for any type of device, especially\n      those with little processing power\
    \ and memory.\n   However, as further discussed in Section 8, this prevents EAP-PSK\n\
    \   from offering advanced features such as identity protection, password\n  \
    \ support, or Perfect Forward Secrecy (PFS).  This choice has been\n   deliberately\
    \ made as a trade-off between simplicity and security.\n   For the sake of simplicity,\
    \ EAP-PSK has also chosen a fixed message\n   format and not a Type-Length-Value\
    \ (TLV) design.\n"
- title: 1.1.2.  Wide Applicability
  contents:
  - "1.1.2.  Wide Applicability\n   EAP-PSK has been designed in a threat model where\
    \ the attacker has\n   full control over the communication channel.  This is the\
    \ EAP threat\n   model that is presented in Section 7.1 of [3].\n"
- title: 1.1.3.  Security
  contents:
  - "1.1.3.  Security\n   Since the design of authenticated key exchange is notoriously\
    \ known\n   to be hard and error prone, EAP-PSK tries to avoid inventing any new\n\
    \   cryptographic mechanism.  It attempts instead to build on existing\n   primitives\
    \ and protocols that have been reviewed by the cryptographic\n   community.\n"
- title: 1.1.4.  Extensibility
  contents:
  - "1.1.4.  Extensibility\n   EAP-PSK explicitly provides a mechanism to allow future\
    \ extensions\n   within its protected channel (see Section 3.3).  Thanks to this\n\
    \   mechanism, EAP-PSK will be able to provide more sophisticated\n   services\
    \ as the need to do so arises.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   Authentication, Authorization, and Accounting (AAA)\n \
    \            Please refer to [10] for more details.\n   AES-128   A block cipher\
    \ specified in the Advanced Encryption\n             Standard [7].\n   Authentication\
    \ Key (AK)\n             A 16-byte key derived from the PSK that the EAP peer\
    \ and\n             server use to mutually authenticate.\n   AKEP2     An authenticated\
    \ key exchange protocol; please refer to\n             [14] for more details.\n\
    \   Backend Authentication Server\n             An entity that provides an authentication\
    \ service to an\n             Authenticator.  When used, this server typically\
    \ executes\n             EAP methods for the Authenticator.  (This terminology\
    \ is\n             also used in [26], and has the same meaning in this\n     \
    \        document.)\n   CMAC      Cipher-based Message Authentication Code.  It\
    \ is the\n             authentication mode of operation of AES recommended by\
    \ NIST\n             in [8].\n   Extensible Authentication Protocol (EAP)\n  \
    \           Defined in [3].\n   EAP Authenticator (or simply Authenticator)\n\
    \             The end of the EAP link initiating the EAP authentication\n    \
    \         methods.  (This terminology is also used in [26], and has\n        \
    \     the same meaning in this document.)\n   EAP peer (or simply peer)\n    \
    \         The end of the EAP link that responds to the Authenticator.\n      \
    \       (In [26], this end is known as the Supplicant.)\n   EAP server (or simply\
    \ server)\n             The entity that terminates the EAP authentication with\
    \ the\n             peer.  When there is no Backend Authentication Server, this\n\
    \             term refers to the EAP Authenticator.  Where the EAP\n         \
    \    Authenticator operates in pass-through mode, it refers to\n             the\
    \ Backend Authentication Server.\n   EAX       An authenticated-encryption with\
    \ associated data mode of\n             operation for block ciphers [4].\n   Extended\
    \ Master Session Key (EMSK)\n             Additional keying material derived between\
    \ the EAP peer and\n             server that is exported by the EAP method.  The\
    \ EMSK is\n             reserved for future uses that are not defined yet and\
    \ is\n             not provided to a third party.  Please refer to [9] for\n \
    \            more details.\n             EAP-PSK generates a 64-byte EMSK.\n \
    \  Initialization Vector (IV)\n             A quantity of at least 64 bytes, suitable\
    \ for use in an\n             initialization vector field, that is derived between\
    \ the\n             peer and EAP server.  Since the IV is a known value in\n \
    \            methods such as EAP-TLS [11], it cannot be used by itself\n     \
    \        for computation of any quantity that needs to remain\n             secret.\
    \  As a result, its use has been deprecated and EAP\n             methods are\
    \ not required to generate it.  Please refer to\n             [9] for more details.\n\
    \             EAP-PSK does not generate an IV.\n   Key-Derivation Key (KDK)\n\
    \             A 16-byte key derived from the PSK that the EAP peer and\n     \
    \        server use to derive session keys (namely, the TEK, MSK,\n          \
    \   and EMSK).\n   Message Authentication Code (MAC)\n             Informally,\
    \ the purpose of a MAC is to provide assurances\n             regarding both the\
    \ source of a message and its integrity\n             [40].  IEEE 802.11i uses\
    \ the acronym MIC (Message Integrity\n             Check) to avoid confusion with\
    \ the other meaning of the\n             acronym MAC (Medium Access Control).\n\
    \   Master Session Key (MSK)\n             Keying material that is derived between\
    \ the EAP peer and\n             server and exported by the EAP method.  In existing\n\
    \             implementations, a AAA server acting as an EAP server\n        \
    \     transports the MSK to the Authenticator [9].\n             EAP-PSK generates\
    \ a 64-byte MSK.\n   Network Access Identifier (NAI)\n             Identifier\
    \ used to identify the communicating parties [2].\n   One Key CBC-MAC 1 (OMAC1)\n\
    \             A method to generate a Message Authentication Code [29].\n     \
    \        CMAC is the name under which NIST has standardized OMAC1.\n   Perfect\
    \ Forward Secrecy (PFS)\n             The confidence that the compromise of a\
    \ long-term private\n             key does not compromise any earlier session\
    \ keys.  In other\n             words, once an EAP dialog is finished and its\
    \ corresponding\n             keys are forgotten, even someone who has recorded\
    \ all of\n             the data from the connection and gets access to all of\
    \ the\n             long-term keys of the peer and the server cannot\n       \
    \      reconstruct the keys used to protect the conversation\n             without\
    \ doing a brute-force search of the session key\n             space.\n       \
    \      EAP-PSK does not have this property.\n   Pre-Shared Key (PSK)\n       \
    \      A Pre-Shared Key simply means a key in symmetric\n             cryptography.\
    \  This key is derived by some prior mechanism\n             and shared between\
    \ the parties before the protocol using it\n             takes place.  It is merely\
    \ a bit sequence of given length,\n             each bit of which has been chosen\
    \ at random uniformly and\n             independently.  For EAP-PSK, the PSK is\
    \ the long-term 16-\n             byte credential shared by the EAP peer and server.\n\
    \   Protected Result Indication\n             Please refer to Section 7.16 of\
    \ [3] for a definition of\n             this term.  This feature has been introduced\
    \ because EAP-\n             Success/Failure packets are unidirectional and are\
    \ not\n             protected.\n   Transient EAP Key (TEK)\n             A session\
    \ key that is used to establish a protected channel\n             between the\
    \ EAP peer and server during the EAP\n             authentication exchange.  The\
    \ TEK is appropriate for use\n             with the ciphersuite negotiated between\
    \ the EAP peer and\n             server to protect the EAP conversation.  Note\
    \ that the\n             ciphersuite used to set up the protected channel between\n\
    \             the EAP peer and server during EAP authentication is\n         \
    \    unrelated to the ciphersuite used to subsequently protect\n             data\
    \ sent between the EAP peer and Authenticator [9].\n             EAP-PSK uses\
    \ a 16-byte TEK for its protected channel, which\n             is the only ciphersuite\
    \ available between the EAP peer and\n             server to protect the EAP conversation.\
    \  This ciphersuite\n             uses AES-128 in the EAX mode of operation.\n"
- title: 1.3.  Conventions
  contents:
  - "1.3.  Conventions\n   All numbers presented in this document are considered in\
    \ network-byte\n   order.\n   || denotes concatenation of strings (and not the\
    \ logical OR).\n   MAC(K, String) denotes the MAC of String under the key K (the\n\
    \   algorithm used in this document to compute the MACs is CMAC with AES-\n  \
    \ 128; see Section 3.2).\n   [String] denotes the concatenation of String with\
    \ the MAC of String\n   calculated as specified by the context.  Hence, we have,\
    \ with K\n   specified by the context: [String]=String||MAC(K,String)\n   ** denotes\
    \ integer exponentiation.\n   \"i\" denotes the unsigned binary representation\
    \ on 16 bytes of the\n   integer i in network byte order.  Therefore, this notation\
    \ only makes\n   sense when i is between 0 and 2**128-1.\n   <i> denotes the unsigned\
    \ binary representation on 4 bytes of the\n   integer i in network byte order.\
    \  Therefore, this notation only makes\n   sense when i is between 0 and 2**32-1.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in [1].\n"
- title: 1.4.  Related Work
  contents:
  - "1.4.  Related Work\n   At the time this document is written, only three EAP methods\
    \ are\n   standards track EAP methods per IETF terminology (see [17]), namely:\n\
    \   o  MD5-Challenge (EAP-Request/Response type 4), defined in [3], which\n  \
    \    uses a MD5 challenge similar to [45].\n   o  OTP (EAP-Request/Response type\
    \ 5), defined in [3], which aims at\n      providing One-Time Password support\
    \ similar to [22] and [39].\n   o  GTC (EAP-Request/Response type 6), defined\
    \ in [3], which aims at\n      providing Generic Token Card Support.\n   Unfortunately,\
    \ all three methods are deprecated for security reasons\n   that are explained\
    \ in part in [3].\n   Myriads of EAP methods have, however, been otherwise proposed:\n\
    \   o  One as an experimental RFC (EAP-TLS [11]), which therefore is not\n   \
    \   a standard (see [25]).\n   o  Some as individual Internet-Draft submissions\
    \ (e.g., [42] or this\n      document).\n   o  And some even undocumented (e.g.,\
    \ Rob EAP, which has EAP-Request/\n      Response type 31).\n   However, no secure\
    \ and mature Pre-Shared Key EAP method is yet easily\n   and widely available,\
    \ which is all the more regrettable because Pre-\n   Shared Key methods are the\
    \ most basic ones!\n   The existing proposals for a future Pre-Shared Key EAP\
    \ method are\n   briefly reviewed hereafter (please refer to [16] for a more thorough\n\
    \   synthesis of EAP methods).\n   Among these proposals, there are some that:\n\
    \   o  Are broken from a security point of view, e.g.:\n      *  LEAP, which is\
    \ specified in [38] and whose vulnerabilities are\n         discussed in [49].\n\
    \      *  EAP-MSCHAPv2, which is specified in [34] and whose\n         vulnerabilities\
    \ are indirectly discussed in [43].\n   o  Essentially require additional infrastructure,\
    \ e.g., EAP-SIM [24],\n      EAP-AKA [12], or OTP/token card methods like [31].\n\
    \   o  Are not shared key methods but are often confused with them,\n      namely,\
    \ the password methods, e.g., EAP-SRP [18] or SPEKE [30],\n      whose wide adoption\
    \ very unfortunately seems to be hindered by\n      Intellectual Property Rights\
    \ issues.\n   o  Are generic tunneling methods, which do not essentially rely\
    \ on\n      Pre-Shared Keys as they require a public-key certificate for the\n\
    \      server and allow the peer to authenticate with whatever EAP method\n  \
    \    or even other non-EAP authentication mechanisms, namely, [32] and\n     \
    \ [21].\n   o  Are abandoned but have provided the basis for EAP-PSK, namely,\n\
    \      EAP-Archie [47].\n   o  Are possible alternatives to EAP-PSK (i.e., claimed\
    \ to be secure\n      and subject of active work):\n      *  EAP-FAST [42].\n\
    \      *  EAP-IKEv2 [46].\n      *  EAP-TLS (when shared key/password support\
    \ is added to TLS; see\n         [50]).\n   EAP-PSK differs from the aforementioned\
    \ methods on the following\n   points:\n   o  No attacks on EAP-PSK within its\
    \ threat model have yet been found.\n   o  EAP-PSK was not designed to leverage\
    \ a pre-existing\n      infrastructure.  Thus, it does not inherit potential limitations\n\
    \      of such an infrastructure and it should be easier to deploy \"from\n  \
    \    scratch\".\n   o  EAP-PSK wished to avoid IPR blockages.\n   o  EAP-PSK does\
    \ not have any dependencies on protocols other than\n      EAP.\n   o  EAP-PSK\
    \ was restricted to simply proposing a Pre-Shared Key method\n      with symmetric\
    \ cryptography\n      *  To remain simple to understand and implement\n      *\
    \  To avoid potentially complex configurations and negotiations\n   o  EAP-PSK\
    \ was designed with efficiency in mind.\n"
- title: 2.  Protocol Overview
  contents:
  - "2.  Protocol Overview\n   Figure 1 presents an overview of the EAP-PSK key hierarchy.\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++ ---+\n  \
    \ |                                                              |    ^\n   |\
    \          EAP-PSK Protocol: a Pre-Shared Key EAP Method       |    |\n   |  \
    \                                                            |    |\n   |    \
    \                    +----------+                          |    |\n   |      \
    \                  |   PSK    |                          |    |\n   |        \
    \                |(16 bytes)|                          |    |\n   |          \
    \              +----------+                          |    |\n   |            \
    \                 |                                |    |\n   |              \
    \               v                                |    |\n   |                \
    \     ***********************                  |    |\n   |                  \
    \   *Modified Counter Mode*                  |    |\n   |                    \
    \ ***********************                  |    |\n   |                      \
    \    |     |                             |    |\n   |                        \
    \  v     v                             |    |\n   |                 +----------+\
    \ +----------+ +----------------+ |    |\n   |                 |    AK    | |\
    \   KDK    | |     RAND_P     | |    |\n   |                 |(16 bytes)| |(16\
    \ bytes)| |   (16 bytes)   | |    |\n   |                 +----------+ +----------+\
    \ +----------------+ |    |\n   |                                   |        \
    \       |          |    |\n   |                                   |          \
    \     |          |    |\n   |                   +-----------+   |            \
    \   |          |    |\n   |         +--------+|Plain Text |   |              \
    \ |          |    |\n   |+-------+|Header H||Var.Length |   |               |\
    \          |    |\n   ||Nonce N||22 bytes|+-----------+   v               v  \
    \       Local |\n   ||4 bytes|+--------+   |          ***********************\
    \    to EAP |\n   |+-------+  | +--------+   +------*Modified Counter Mode*  \
    \  Method |\n   |    |      v v            v      ***********************    \
    \  |    |\n   |    |   *******       +--------+ |64             |64          |\
    \    |\n   |    |   * EAX *-------|TEK     | |bytes          |bytes       |  \
    \  |\n   |    +-->*******       |16 bytes| |               |            |    |\n\
    \   |           |          +--------+ |               |            |    |\n  \
    \ |     +-----+----+                |               |            |    |\n   |\
    \     v          v                |               |            |    |\n   |+--------+\
    \ +-------------------+ |               |            |    |\n   ||Tag     | |Cipher\
    \ Text Payload| |               |            |    |\n   ||16 bytes| | Variable\
    \ length L | |               |            |    |\n   |+--------+ +-------------------+\
    \ |               |            |    V\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++\
    \ ---+\n                                     |               |               \
    \  ^\n                                 +-+-+-+-+-++  +-+-+-+-+-++            |\n\
    \                                 |MSK       |  |EMSK      |            |\n  \
    \                               |          |  |          |   Exported |\n    \
    \                             +-+-+-+-+-++  +-+-+-+-+-++     by EAP |\n      \
    \                               |               |          Method |\n        \
    \                             |               |                 |\n          \
    \                           V               V                 |\n            \
    \                     *************************             V\n              \
    \                   *   AAA  Key Derivation *          ---+\n                \
    \                 *   Naming & Binding    *\n                                \
    \ *************************\n                 Figure 1: EAP-PSK Key Hierarchy\
    \ Overview\n"
- title: 2.1.  EAP-PSK Key Hierarchy
  contents:
  - "2.1.  EAP-PSK Key Hierarchy\n   This section presents the key hierarchy used\
    \ by EAP-PSK.  This\n   hierarchy is inspired by the EAP key hierarchy described\
    \ in [9].\n"
- title: 2.1.1.  The PSK
  contents:
  - "2.1.1.  The PSK\n   The PSK is shared between the EAP peer and the EAP server.\n\
    \   EAP-PSK assumes that the PSK is known only to the EAP peer and EAP\n   server.\
    \  The security properties of the protocol are compromised if\n   it has wider\
    \ distribution.  Please note that EAP-PSK shares this\n   property with all other\
    \ symmetric key methods (including all\n   password-based methods).\n   EAP-PSK\
    \ also assumes the EAP server and EAP peer identify the correct\n   PSK to use\
    \ with each other thanks to their respective NAIs.  This\n   means that there\
    \ MUST only be at most one PSK shared between an EAP\n   server using a given\
    \ server NAI and an EAP peer using a given peer\n   NAI.\n   This PSK is used,\
    \ as shown in Figure 2, to derive two 16-byte static\n   long-lived subkeys, respectively\
    \ called the Authentication Key (AK)\n   and the Key-Derivation Key (KDK).  This\
    \ derivation should only be\n   done once: it is called the key setup.  See Section\
    \ 3.1 for an\n   explanation of why PSK is not used as a static long-lived key,\
    \ but\n   only as the initial keying material for deriving the static long-\n\
    \   lived keys, AK and KDK, which are actually used by the protocol EAP-\n   PSK.\n\
    \                   +---------------------------+\n                   |      \
    \      PSK            |\n                   |        (16 bytes)         |\n  \
    \                 +---------------------------+\n                      |     \
    \                |\n                      v                     v\n   +---------------------------+\
    \     +---------------------------+\n   |            AK             |     |  \
    \          KDK            |\n   |        (16 bytes)         |     |        (16\
    \ bytes)         |\n   +---------------------------+     +---------------------------+\n\
    \              Figure 2: Derivation of AK and KDK from the PSK\n"
- title: 2.1.2.  AK
  contents:
  - "2.1.2.  AK\n   EAP-PSK uses AK to mutually authenticate the EAP peer and the\
    \ EAP\n   server.\n   AK is a static long-lived key derived from the PSK; see\
    \ Section 3.1.\n   AK is not a session key.\n   The EAP server and EAP peer identify\
    \ the correct AK to use with each\n   other thanks to their respective NAIs. \
    \ This means that there MUST\n   only be at most one AK shared between an EAP\
    \ server using a given\n   server NAI and an EAP peer using a given peer NAI.\
    \  This is the case\n   when there is at most one PSK shared between an EAP server\
    \ using a\n   given server NAI and an EAP peer using a given peer NAI; see\n \
    \  Section 2.1.1.\n   The EAP peer chooses the AK to use based on the EAP server\
    \ NAI that\n   has been sent by the EAP server in the first EAP-PSK message (namely,\n\
    \   ID_S; see Section 4.1) and the EAP peer NAI it chooses to include in\n   the\
    \ second EAP-PSK message (namely, ID_P; see Section 4.1).\n"
- title: 2.1.3.  KDK
  contents:
  - "2.1.3.  KDK\n   EAP-PSK uses KDK to derive session keys shared by the EAP peer\
    \ and\n   the EAP server (namely, the TEK, MSK, and EMSK).\n   KDK is a static\
    \ long-lived key derived from the PSK; see Section 3.1.\n   KDK is not a session\
    \ key.\n   The EAP server and EAP peer identify the correct AK to use with each\n\
    \   other thanks to their respective NAIs.  This means that there MUST\n   only\
    \ be at most one AK shared between an EAP server using a given\n   server NAI\
    \ and an EAP peer using a given peer NAI.  This is the case\n   when there is\
    \ at most one PSK shared between an EAP server using a\n   given server NAI and\
    \ an EAP peer using a given peer NAI; see\n   Section 2.1.1.\n   The EAP peer\
    \ chooses the AK to use based on the EAP server NAI that\n   has been sent by\
    \ the EAP server in the first EAP-PSK message (namely,\n   ID_S; see Section 4.1)\
    \ and the EAP peer NAI it chooses to include in\n   the second EAP-PSK message\
    \ (namely, ID_P; see Section 4.1).\n"
- title: 2.2.  The TEK
  contents:
  - "2.2.  The TEK\n   EAP-PSK derives a 16-byte TEK thanks to a random number exchanged\n\
    \   during authentication (RAND_P; see Section 5.1) and KDK.\n   This TEK is used\
    \ to implement a protected channel for both mutually\n   authenticated parties\
    \ to communicate over securely.\n"
- title: 2.3.  The MSK
  contents:
  - "2.3.  The MSK\n   EAP-PSK derives a MSK thanks to a random number exchanged during\n\
    \   authentication (RAND_P; see Section 5.1) and the KDK.\n   The MSK is 64 bytes\
    \ long, which complies with [3].\n"
- title: 2.4.  The EMSK
  contents:
  - "2.4.  The EMSK\n   EAP-PSK derives an EMSK thanks to a random number exchanged\
    \ during\n   authentication (RAND_P; see Section 5.1) and the KDK.\n   The EMSK\
    \ is 64 bytes long, which complies with [3].\n"
- title: 2.5.  The IV
  contents:
  - "2.5.  The IV\n   EAP-PSK does not derive any IV, which complies with [9].\n"
- title: 3.  Cryptographic Design of EAP-PSK
  contents:
  - "3.  Cryptographic Design of EAP-PSK\n   EAP-PSK relies on a single cryptographic\
    \ primitive, a block cipher,\n   which is instantiated with AES-128.  AES-128\
    \ takes a 16-byte Pre-\n   Shared Key and a 16-byte Plain Text block as inputs.\
    \  It outputs a\n   16-byte Cipher Text block.  For a detailed description of\
    \ AES-128,\n   please refer to [7].\n   AES-128 has been chosen because:\n   o\
    \  It is standardized and implementations are widely available.\n   o  It has\
    \ been carefully reviewed by the cryptographic community and\n      is believed\
    \ to be secure.\n   Other block ciphers could easily be proposed for EAP-PSK,\
    \ as EAP-PSK\n   does not intrinsically depend on AES-128.  The only parameters\
    \ of\n   AES-128 that EAP-PSK depends on are the AES-128 block and key size\n\
    \   (16 bytes).  For the sake of simplicity, EAP-PSK has, however, been\n   chosen\
    \ to restrict to a single mandatory block cipher and not allow\n   the negotiation\
    \ of other block ciphers.  In the case that AES-128 is\n   deprecated for security\
    \ reasons, EAP-PSK should also be deprecated\n   and a cut-and-paste EAP-PSK'\
    \ should be defined with another block\n   cipher.  This EAP-PSK' should not be\
    \ backward compatible with EAP-PSK\n   because of the security issues with AES-128.\
    \  EAP-PSK' should\n   therefore use a different EAP-Request/Response Type number.\
    \  With the\n   EAP-Request/Response Type number space structure defined in [3],\
    \ this\n   should not be a problem.  The use of a different EAP-Request/Response\n\
    \   Type number for EAP-PSK' will prevent this new method from being\n   vulnerable\
    \ to chosen protocol attacks.\n   EAP-PSK uses three cryptographic parts:\n  \
    \ o  A key setup to derive AK and KDK from the PSK.\n   o  An authenticated key\
    \ exchange protocol to mutually authenticate\n      the communicating parties\
    \ and derive session keys.\n   o  A protected channel protocol for both mutually\
    \ authenticated\n      parties to communicate over.\n   Each part is discussed\
    \ in more detail in the subsequent paragraphs.\n"
- title: 3.1.  The Key Setup
  contents:
  - "3.1.  The Key Setup\n   EAP-PSK needs two cryptographically separated 16-byte\
    \ subkeys for\n   mutual authentication and session key derivation.  Indeed, it\
    \ is a\n   rule of thumb in cryptography to use different keys for different\n\
    \   applications.\n   It could have implemented these two subkeys either by specifying\
    \ a\n   32-byte PSK that would then be split in two 16-byte subkeys, or by\n \
    \  specifying a 16-byte PSK that would then be cryptographically\n   expanded\
    \ to two 16-byte subkeys.\n   Because provisioning a 32-byte long-term credential\
    \ is more\n   cumbersome than a 16-byte one, and the strength of the derived\n\
    \   session keys is 16 bytes either way, the latter option was chosen.\n   Hence,\
    \ the PSK is only used by EAP-PSK to derive AK and KDK.  This\n   derivation should\
    \ be done only once, immediately after the PSK has\n   been provisioned.  As soon\
    \ as AK and KDK have been derived, the PSK\n   should be deleted.  If the PSK\
    \ is deleted, it should be done so\n   securely (see, for instance, [19] for guidance\
    \ on secure deletion of\n   the PSK).\n   Derivation of AK and KDK from the PSK\
    \ is called the key setup:\n   o  The input to the key setup is the PSK.\n   o\
    \  The outputs of the key setup are AK and KDK.\n   AK and KDK are derived from\
    \ the PSK using the modified counter mode\n   of operation of AES-128.  The modified\
    \ counter mode is a length\n   increasing function, i.e., it expands one AES-128\
    \ input block into a\n   longer t-block output, where t>=2.  This mode was chosen\
    \ for the key\n   setup because it had already been chosen for the derivation\
    \ of the\n   session keys (see Section 3.2).\n   The details of the derivation\
    \ of AK and KDK from the PSK are shown in\n   Figure 3.\n   +--------------------------+\n\
    \   |            \"0\"           |\n   |  Input Block (16 bytes)  |\n   +--------------------------+\n\
    \                 |\n                 v\n        +----------------+\n        |\
    \                |\n        | AES-128(PSK,.) |\n        |                |\n \
    \       +----------------+\n                 |\n                 |\n         \
    \        +----------------------------+\n                 |                  \
    \          |\n                 v                            v\n   +--------+ \
    \ +---+            +--------+  +---+\n   | c1=\"1\" |->|XOR|            | c2=\"\
    2\" |->|XOR|\n   |16 bytes|  +---+            |16 bytes|  +---+\n   +--------+\
    \    |              +--------+    |\n                 |                      \
    \      |\n        +----------------+            +----------------+\n        |\
    \                |            |                |\n        | AES-128(PSK,.) | \
    \           | AES-128(PSK,.) |\n        |                |            |      \
    \          |\n        +----------------+            +----------------+\n     \
    \            |                            |\n                 |              \
    \              |\n                 v                            v\n    +------------------------+\
    \    +------------------------+\n    |           AK           |    |         \
    \ KDK           |\n    |       (16 bytes)       |    |      (16 bytes)       \
    \ |\n    +------------------------+    +------------------------+\n        Figure\
    \ 3: Derivation of AK and KDK from the PSK in Details\n   The input block is \"\
    0\".  For the sake of simplicity, this input block\n   has been chosen constant:\
    \ it could have been set to a value depending\n   on the peer and the server (for\
    \ instance, the XOR of their respective\n   NAIs appropriately truncated or zero-padded),\
    \ but this did not seem\n   to add much security to the scheme, whereas it added\
    \ complexity.  Any\n   16-byte constant could have been chosen, as the security\
    \ is not\n   supposed to depend on the particular value taken by the constant.\
    \ \"0\"\n   was arbitrarily chosen.\n"
- title: 3.2.  The Authenticated Key Exchange
  contents:
  - "3.2.  The Authenticated Key Exchange\n   The authentication protocol used by\
    \ EAP-PSK is inspired by AKEP2,\n   which is described in [14].\n   AKEP2 consists\
    \ of a one-and-a-half round-trip exchange, as shown in\n   Figure 4, which is\
    \ inspired by Figure 5 of [14].\n   Bob                                      \
    \                 Alice\n    |                            RA                 \
    \           |\n    |<---------------------------------------------------------|\n\
    \    |                                                          |\n    |     \
    \                [B||A||RA||RB]                       |\n    |--------------------------------------------------------->|\n\
    \    |                                                          |\n    |     \
    \                   [A||RB]                           |\n    |<---------------------------------------------------------|\n\
    \                        Figure 4: Overview of AKEP2\n   It is also worth noting\
    \ that [14] focuses on cryptography and not on\n   designing a real-life protocol.\
    \  Thus, as noted in subsection \"Out-\n   Of-Band-Data\" of [14], Alice has to\
    \ send A, its identity, to Bob so\n   that Bob may select the appropriate credential\
    \ for the sequel to the\n   conversation.  This leads to a slightly complemented\
    \ version of AKEP2\n   for EAP-PSK as depicted in Figure 5.\n   Bob          \
    \                                             Alice\n    |                   \
    \      A||RA                            |\n    |<---------------------------------------------------------|\n\
    \    |                                                          |\n    |     \
    \                [B||A||RA||RB]                       |\n    |--------------------------------------------------------->|\n\
    \    |                                                          |\n    |     \
    \                   [A||RB]                           |\n    |<---------------------------------------------------------|\n\
    \                        Figure 5: Overview of AKEP2\n   In AKEP2,\n   o  RA and\
    \ RB are random numbers chosen respectively by Alice and Bob.\n   o  A and B are\
    \ Alice's and Bob's respective identities.  They allow\n      Alice and Bob to\
    \ retrieve the key that they have to use to run an\n      authenticated key exchange\
    \ between each other.  They are also\n      included in the protocol for cryptographic\
    \ reasons.\n   o  The MACs (see Section 1.3 for the notation \"[]\") are calculated\n\
    \      using a dedicated key.\n   EAP-PSK instantiates this protocol with:\n \
    \  o  The server as Alice and the peer as Bob.\n   o  RA and RB as 16-byte random\
    \ numbers, using Section 4.1 notations;\n      this means RA=RAND_S and RB=RAND_P.\n\
    \   o  A and B as Alice's and Bob's respective NAIs, using Section 4.1\n     \
    \ notations; this means A=ID_S and B=ID_P.\n   o  The MAC algorithm as CMAC with\
    \ AES-128 using AK and producing a\n      tag length of 16 bytes.\n   o  The modified\
    \ counter mode of operation of AES-128 using KDK, to\n      derive session keys\
    \ as a result of this exchange.\n   CMAC was chosen as the MAC algorithm because\
    \ it is capable of\n   handling arbitrary length messages, and its design is simple.\
    \  It\n   also enjoys up-to-date review by the cryptographic community,\n   especially\
    \ using provable security concepts.  It has been recommended\n   by the NIST.\
    \  For a detailed description of CMAC, please refer to\n   [8].\n   In AKEP2,\
    \ the key exchange is \"implicit\": the session keys are\n   derived from RB.\
    \  In EAP-PSK, the session keys are thus derived from\n   RAND_P by using KDK\
    \ and the modified counter mode of operation of\n   AES-128 described in [5].\
    \  This mode was chosen because it is a\n   simple key derivation scheme that\
    \ relies on a block cipher and has a\n   proof of its security.  It is a length\
    \ increasing function, i.e., it\n   expands one AES-128 input block into a longer\
    \ t-block output, where\n   t>=2.  The derivation of the session keys is shown\
    \ in Figure 6.\n   +--------------------------+      +-------------------------------+\n\
    \   |         RAND_P           |      |              KDK              |\n   |\
    \  Input Block (16 bytes)  |      | Key Derivation Key (16 bytes) |\n   +--------------------------+\
    \      +-------------------------------+\n               |                   \
    \                  |\n               v                                     v\n\
    \   +-----------------------------------------------------------------+\n   |\
    \                                                                 |\n   |    \
    \                     Modified Counter Mode                   |\n   |        \
    \                                                         |\n   +-----------------------------------------------------------------+\n\
    \          |                     |                         |\n          v    \
    \                 v                         v\n   +------------+   +----------------------+\
    \   +----------------------+\n   |     TEK    |   |          MSK         |   |\
    \         EMSK         |\n   | (16 bytes) |   |      (64 bytes)      |   |   \
    \   (64 bytes)      |\n   +------------+   +----------------------+   +----------------------+\n\
    \                 Figure 6: Derivation of the Session Keys\n   The input to the\
    \ derivation of the session keys is RAND_P.\n   The outputs of the derivation\
    \ of the session keys are:\n   o  The 16-byte TEK (the first output block).\n\
    \   o  The 64-byte MSK (the concatenation of the second to fifth output\n    \
    \  blocks).\n   o  The 64-byte EMSK (the concatenation of the sixth to ninth output\n\
    \      blocks).\n   The details of the derivation of the session keys are shown\
    \ in\n   Figure 7.\n  +--------------------------+\n  |         RAND_P       \
    \    |\n  |  Input Block (16 bytes)  |\n  +--------------------------+\n     \
    \           |\n                v\n       +----------------+\n       |        \
    \        |\n       | AES-128(KDK,.) |\n       |                |\n       +----------------+\n\
    \                |\n                |\n                +---------------------+--\
    \ - - - - - - - - - --+\n                |                     |             \
    \          |\n                v                     v                       v\n\
    \  +--------+  +---+     +--------+  +---+       +--------+  +---+\n  | c1=\"\
    1\" |->|XOR|     | c2=\"2\" |->|XOR|.......| c9=\"9\" |->|XOR|\n  |16 bytes| \
    \ +---+     |16 bytes|  +---+       |16 bytes|  +---+\n  +--------+    |     \
    \  +--------+    |         +--------+    |\n                |                \
    \     |                       |\n       +----------------+   +----------------+\
    \      +----------------+\n       |                |   |                |    \
    \  |                |\n       | AES-128(KDK,.) |   | AES-128(KDK,.) |......| AES-128(KDK,.)\
    \ |\n       |                |   |                |      |                |\n\
    \       +----------------+   +----------------+      +----------------+\n    \
    \            |                     |                       |\n               \
    \ |                     |                       |\n                v         \
    \            v                       v\n       +-----------------+  +-----------------+\
    \     +------------------+\n       | Output Block #1 |  | Output Block #2 |  \
    \   | Output Block #9  |\n       |    (16 bytes)   |  |    (16 bytes)   |.....|\
    \    (16 bytes)    |\n       |      TEK        |  | MSK (block 1/4) |     | EMSK\
    \ (block 4/4) |\n       +-----------------+  +-----------------+     +------------------+\n\
    \            Figure 7: Derivation of the Session Keys in Details\n   The counter\
    \ values are set respectively to the first t integers (that\n   is, ci=\"i\",\
    \ with i=1 to 9).\n   Keying material is sensitive information and should be handled\n\
    \   accordingly (see Section 8.10 for further discussion).\n"
- title: 3.3.  The Protected Channel
  contents:
  - "3.3.  The Protected Channel\n   EAP-PSK provides a protected channel for both\
    \ parties to communicate\n   over, in case of a successful authentication.  This\
    \ protected channel\n   is currently used to exchange protected result indications\
    \ and may be\n   used in the future to implement extensions.\n   EAP-PSK uses\
    \ the EAX mode of operation to provide this protected\n   channel.  For a detailed\
    \ description of EAX, please refer to [4].\n   Figure 8 shows how EAX is used\
    \ to implement EAP-PSK protected\n   channel.\n   +-----------+ +----------------+\
    \ +---------------------+ +----------+\n   |  Nonce N  | |    Header H    | |\
    \ Plain Text Payload  | |   TEK    |\n   |  4 bytes  | |    22 bytes    | |  Variable\
    \ length L  | | 16 bytes |\n   +-----------+ +----------------+ +---------------------+\
    \ +----------+\n         |                 |                   |             \
    \    |\n         v                 v                   v                 v\n \
    \  +-------------------------------------------------------------------+\n   |\
    \                                                                   |\n   |  \
    \                              EAX                                |\n   |    \
    \                                                               |\n   +-------------------------------------------------------------------+\n\
    \                           |                   |\n                          \
    \ v                   v\n                +---------------------+   +----------+\n\
    \                | Cipher Text Payload |   |   Tag    |\n                |  Variable\
    \ length L  |   | 16 bytes |\n                +---------------------+   +----------+\n\
    \                      Figure 8: The Protected Channel\n   This protected channel:\n\
    \   o  Provides replay protection.\n   o  Encrypts and authenticates a Plain Text\
    \ Payload that becomes an\n      Encrypted Payload.  The Plain Text Payload must\
    \ not exceed 960\n      bytes; see Sections 5.3, 5.4, and 8.11.\n   o  Only authenticates\
    \ a Header that is thus sent in clear.\n   EAX is instantiated with AES-128 as\
    \ the underlying block cipher.\n   AES-128 is keyed with the TEK.\n   The nonce\
    \ N is used to provide cryptographic security to the\n   encryption and data origin\
    \ authentication as well as protection\n   replay.  Indeed, N is a 4-byte sequence\
    \ number starting from <0> that\n   is monotonically incremented at each EAP-PSK\
    \ message within one EAP-\n   PSK dialog, except retransmissions, of course.\n\
    \   N was taken to be 4 bytes to avoid 16-byte arithmetic.  Since EAX\n   uses\
    \ a 16-byte nonce, N is padded with 96 zero bits for its high-\n   order bits.\n\
    \   For cryptographic reasons, N is not allowed to wrap around.  In the\n   unlikely,\
    \ yet possible, event of the server sending an EAP-PSK\n   message with N set\
    \ to <2**32-2>, it must not send any further message\n   on this protected channel,\
    \ which would cause to reusing the value 0.\n   Either the conversation is finished\
    \ after the server receives the\n   EAP-PSK answer from the peer with N set to\
    \ <2**32-1> and the server\n   proceeds (typically by sending an EAP-Success or\
    \ Failure), or the\n   conversation is not finished and must then be aborted (a\
    \ new EAP-PSK\n   dialog may subsequently be started to try again to authenticate).\n\
    \   Thus, the maximum number of messages that can be exchanged over the\n   same\
    \ protected channel is 2**32 (which should not be a limitation in\n   practice,\
    \ as this is approximately equal to 4 billion).\n   The Header H consists of the\
    \ first 22 bytes of the EAP Request or\n   Response packet (i.e., the EAP Code,\
    \ Identifier, Length, and Type\n   fields followed by the EAP-PSK Flags and RAND_S\
    \ fields).  Although it\n   may appear unorthodox that an upper layer (EAP-PSK)\
    \ protects some\n   information of the lower layer (EAP), this was chosen to comply\
    \ with\n   EAP recommendation (see Section 7.5. of [3]) and seems to be existing\n\
    \   practice at IETF (see, for instance, [35]).\n   The Plain Text Payload is\
    \ the payload that is to be encrypted and\n   integrity protected.  The Cipher\
    \ Text Payload is the result of the\n   encryption of the Plain Text.\n   The\
    \ Tag is a MAC that protects both the Header and the Plain Text\n   Payload. \
    \ The verification of the Tag must only be done after a\n   successful verification\
    \ of the Nonce for replay protection.  If the\n   verification of the Tag succeeds,\
    \ then the Encrypted Payload is\n   decrypted to recover the Plain Text Payload.\
    \  If the verification of\n   the Tag fails, then no decryption is performed and\
    \ this MAC failure\n   should be logged.  The tag length is chosen to be 16 bytes\
    \ for EAX\n   within EAP-PSK.  This length is considered appropriate by the\n\
    \   cryptographic community.\n   EAX was mainly chosen because:\n   o  It strongly\
    \ relies on OMAC in its design and OMAC1, a variant of\n      OMAC, had already\
    \ been chosen in EAP-PSK for the authentication\n      part (please remember that\
    \ OMAC1 and CMAC are analogous).\n   o  Its design is simple.\n   o  It enjoys\
    \ a security proof.\n   o  It is free of any Intellectual Property Rights claims.\n"
- title: 4.  EAP-PSK Message Flows
  contents:
  - "4.  EAP-PSK Message Flows\n   EAP-PSK may consist of two different types of message\
    \ flows:\n   o  The \"standard authentication\", which is:\n      *  Mandatory\
    \ to implement.\n      *  Fully specified in this document.\n      *  The simpler\
    \ type of message flow, which is expected to be used\n         most frequently.\n\
    \   o  The \"extended authentication\", which is:\n      *  Optional to implement\
    \ (i.e., there are no mandatory\n         extensions).\n      *  Partly specified\
    \ in this document since it depends on\n         extensions and none are currently\
    \ specified, let alone in this\n         document.\n      *  The type of message\
    \ flow that should be used when extensions of\n         EAP-PSK are needed by\
    \ more sophisticated usage scenarios and\n         are available.\n   EAP-PSK\
    \ introduces the concept of a session to facilitate its\n   analysis and provide\
    \ a cleaner interface to other layers.  A session\n   is a particular instance\
    \ of an EAP-PSK dialog between two parties.\n   This session is identified by\
    \ a session identifier.\n   In the first EAP-PSK message, the EAP server asserts\
    \ its identity.\n   Given that the EAP-Request/Identity and EAP-Response/Identity\
    \ may not\n   be assumed to have occurred prior to this sending and that the\n\
    \   response included in EAP-Response/Identity (if this EAP Identity\n   exchange\
    \ takes place) may not contain the actual NAI the peer shall\n   use with EAP-PSK,\
    \ this means that an EAP server implementing EAP-PSK\n   must use the same EAP\
    \ server NAI for all EAP-PSK dialogs with any EAP\n   peer implementing EAP-PSK.\n"
- title: 4.1.  EAP-PSK Standard Authentication
  contents:
  - "4.1.  EAP-PSK Standard Authentication\n   EAP-PSK standard authentication is\
    \ comprised of four messages, i.e.,\n   two round-trips; see Figure 9.\n   peer\
    \                                                      server\n    |         \
    \                           Flags||RAND_S||ID_S   |\n    |<---------------------------------------------------------|\n\
    \    |                                                          |\n    |   Flags||RAND_S||RAND_P||MAC_P||ID_P\
    \                     |\n    |--------------------------------------------------------->|\n\
    \    |                                                          |\n    |     \
    \                Flags||RAND_S||MAC_S||PCHANNEL_S_0   |\n    |<---------------------------------------------------------|\n\
    \    |                                                          |\n    |   Flags||RAND_S||PCHANNEL_P_1\
    \                            |\n    |--------------------------------------------------------->|\n\
    \    |                                                          |\n          \
    \       Figure 9: EAP-PSK Standard Authentication\n   o  The first message is\
    \ sent by the server to the peer to:\n      *  Send a 16-byte random challenge\
    \ (RAND_S).  RAND_S was called RA\n         in Section 3.2\n      *  State its\
    \ identity (ID_S).  ID_S was denoted by A in\n         Section 3.2.\n   o  The\
    \ second message is sent by the peer to the server to:\n      *  Send another\
    \ 16-byte random challenge (RAND_P).  RAND_P was\n         called RB in Section\
    \ 3.2\n      *  State its identity (ID_P).  ID_P was denoted by B in\n       \
    \  Section 3.2.\n      *  Authenticate to the server by proving that it is able\
    \ to\n         compute a particular MAC (MAC_P), which is a function of the\n\
    \         two challenges and AK:\n         MAC_P = CMAC-AES-128(AK, ID_P||ID_S||RAND_S||RAND_P)\n\
    \   o  The third message is sent by the server to the peer to:\n      *  Authenticate\
    \ to the peer by proving that it is able to compute\n         another MAC (MAC_S),\
    \ which is a function of the peer's\n         challenge and AK:\n         MAC_S\
    \ = CMAC-AES-128(AK, ID_S||RAND_P)\n      *  Set up the protected channel (P_CHANNEL_S_0)\
    \ to:\n         +  Confirm that it has derived session keys (at least the TEK).\n\
    \         +  Give a protected result indication of the authentication.\n   o \
    \ The fourth message is sent by the peer to the server to finish the\n      setup\
    \ of the protected channel (P_CHANNEL_P_1) to:\n      *  Confirm that it has derived\
    \ session keys (at least the TEK).\n      *  Give a protected result indication\
    \ of the authentication.\n   The PCHANNEL_S_0 and PCHANNEL_P_1 fields of the third\
    \ and fourth EAP-\n   PSK messages contain a MAC-computed thanks to TEK that protects\
    \ the\n   integrity of the messages.  For a detailed list of the fields of the\n\
    \   messages that are integrity protected, please refer to Section 3.3.\n   All\
    \ EAP-PSK messages include a sort of header, which is comprised of\n   two fields:\n\
    \   o  Flags, a 1-byte field that is currently only used to number EAP-\n    \
    \  PSK messages.\n   o  RAND_S, a 16-byte challenge sent by the server that is\
    \ used as a\n      session identifier.\n   This standard message flow could be\
    \ comprised of only three messages,\n   like AKEP2, were it not the request/response\
    \ nature of EAP that\n   prevents the third message to be the last one.  Since\
    \ the fourth\n   message is mandatory, EAP-PSK chose to take advantage of this\
    \ and set\n   up a protected channel.\n   The standard message flow also includes\
    \ a statement by the peer of\n   its identity, in addition to the EAP-Response/Identity\
    \ it may have\n   sent.  This behavior follows Section 5.1 of [3], which recommends\n\
    \   that the EAP-Response/Identity be used primarily for routing purposes\n  \
    \ and selecting which EAP method to use, and therefore that EAP methods\n   include\
    \ a method-specific mechanism for obtaining the identity, so\n   that they do\
    \ not have to rely on the Identity Response.\n   When a party receives an EAP-PSK\
    \ message, it checks that the message\n   is syntactically valid in accordance\
    \ with the message formats defined\n   in Section 5.  If the message is syntactically\
    \ incorrect, then it is\n   silently discarded.  Then it checks the cryptographic\
    \ validity of\n   this message, i.e., it checks the MAC(s) as follows:\n   o \
    \ If the received message is the first EAP-PSK message, there is no\n      MAC\
    \ to check as none is included in message 1.\n   o  If the received message is\
    \ the second EAP-PSK message, the\n      validity of MAC_P is checked.\n   o \
    \ If the received message is the third EAP-PSK message, the validity\n      of\
    \ MAC_S is checked and then the validity of the Tag included in\n      P_CHANNEL_S_0\
    \ is checked.  The validity checks must be done in\n      this order to avoid\
    \ unnecessarily deriving TEK, MSK, and EMSK in\n      case MAC_S is invalid, meaning\
    \ that mutual authentication has\n      failed.  Indeed, TEK is used to verify\
    \ the validity of the Tag\n      included in P_CHANNEL_S_0.\n   o  If the received\
    \ message is the fourth EAP-PSK message, the\n      validity of the Tag included\
    \ in P_CHANNEL_P_1 is checked.\n   If a validity check fails, the message is silently\
    \ discarded.  There\n   can be a counter to track the number of silently discarded\
    \ messages\n   Section 8.8.  If there is an encrypted payload in the message\n\
    \   (namely, in the PCHANNEL attribute), then the encrypted payload is\n   decrypted.\
    \  Then, if the decrypted payload is syntactically\n   incorrect, the message\
    \ is silently discarded.\n"
- title: 4.2.  EAP-PSK Extended Authentication
  contents:
  - "4.2.  EAP-PSK Extended Authentication\n   To remain simple and yet be extensible\
    \ to meet future requirements,\n   EAP-PSK provides an extension mechanism within\
    \ its protected channel:\n   the payload of the protected channel may contain\
    \ an optional\n   extension field (EXT).\n   Figure 10 presents the message sequence\
    \ for EAP-PSK extended\n   authentication.\n   Extended authentication MUST be\
    \ supported, i.e., any EAP-PSK\n   implementation MUST support sending and reception\
    \ of an EXT attribute\n   according to rules of operation described in Section\
    \ 6.  Yet,\n   although support of the EXT field is mandatory, there is no mandatory\n\
    \   extension type to support.  This means that if a server engages in\n   EAP-PSK\
    \ extended authentication, as only the server can start\n   extended authentication\
    \ per Section 6, a peer will recognize the\n   attempt to start extended authentication\
    \ through its EXT support.  If\n   the peer does not support the particular extension\
    \ type used by the\n   server, the peer will still be able to conclude the EAP-PSK\
    \ dialog.\n   The mandatory support of the EXT field is dictated:\n   o  To guarantee\
    \ a robust behavior in the future where some peers\n      might support some extensions\
    \ and others not.  All peers will thus\n      be able to understand that an extended\
    \ authentication is being\n      attempted and indicate whether or not they support\
    \ the extension\n      that is tried.\n   o  To ensure that all implementations\
    \ will indeed be extensible.\n   No extension is currently defined.\n   At most,\
    \ one extension may be run within a single EAP-PSK dialog:\n   there can neither\
    \ be sequences of extensions nor interleaved\n   extensions.  However, extensions\
    \ may take a variable number of round-\n   trips to complete.\n   Only the server\
    \ can start an extension and, if it does so, it must\n   start it in the first\
    \ payload it sends over the protected channel.\n   peer                      \
    \                                server\n    |                               \
    \     Flags||RAND_S||ID_S   |\n    |<---------------------------------------------------------|\n\
    \    |                                                          |\n    |   Flags||RAND_S||RAND_P||MAC_P||ID_P\
    \                     |\n    |--------------------------------------------------------->|\n\
    \    |                                                          |\n    |     \
    \           Flags||RAND_S||MAC_S||PCHANNEL_S_0(EXT)   |\n    |<---------------------------------------------------------|\n\
    \    |                                                          |\n    |   Flags||RAND_S||PCHANNEL_P_1(EXT)\
    \                       |\n    |--------------------------------------------------------->|\n\
    \    |                                                          |\n    .     \
    \                                                     .\n    .               \
    \                                           .\n    .                         \
    \                                 .\n    |                       Flags||RAND_S||PCHANNEL_S_2i(EXT)\
    \  |\n    |<---------------------------------------------------------|\n    |\
    \                                                          |\n    |   Flags||RAND_S||PCHANNEL_P_2i+1(EXT)\
    \                    |\n    |--------------------------------------------------------->|\n\
    \    |                                                          |\n          \
    \      Figure 10: EAP-PSK Extended Authentication\n   Please refer to Section\
    \ 6 for more details on how extended\n   authentication works.\n   The PCHANNEL_S_2j\
    \ and PCHANNEL_P_2j+1 fields of the EAP-PSK messages\n   (where j varies from\
    \ 0 to i) contain a MAC-computed thanks to TEK\n   that protects the integrity\
    \ of the messages.  For a detailed list of\n   the fields of the messages that\
    \ are integrity protected, please refer\n   to Section 3.3.\n   When a party receives\
    \ an EAP-PSK message, it checks that the message\n   is syntactically valid in\
    \ accordance with the message formats defined\n   in Section 5.  If the message\
    \ is syntactically incorrect, then it is\n   silently discarded.  Then it checks\
    \ the cryptographic validity of\n   this message, i.e., it checks the MAC(s) as\
    \ follows:\n   o  If the received message is the first EAP-PSK message, there\
    \ is no\n      MAC to check as none is included in message 1.\n   o  If the received\
    \ message is the second EAP-PSK message, the\n      validity of MAC_P is checked.\n\
    \   o  If the received message is the third EAP-PSK message, the validity\n  \
    \    of MAC_S is checked and then the validity of the Tag included in\n      P_CHANNEL_S_0\
    \ is checked.  The validity checks must be done in\n      this order to avoid\
    \ unnecessarily deriving TEK, MSK, and EMSK in\n      case MAC_S is invalid, meaning\
    \ that mutual authentication has\n      failed.  Indeed, TEK is used to verify\
    \ the validity of the Tag\n      included in P_CHANNEL_S_0.\n   o  If the received\
    \ message is the fourth EAP-PSK message, the\n      validity of the Tag included\
    \ in P_CHANNEL_P_1 is checked.\n   o  If the received message is an EAP-PSK message\
    \ different from the\n      first four ones, then validity of the Tag included\
    \ in P_CHANNEL is\n      checked.\n   If a validity check fails, the message is\
    \ silently discarded.  There\n   can be a counter to track the number of silently\
    \ discarded messages\n   Section 8.8.  If there is an encrypted payload in the\
    \ message (namely\n   in the PCHANNEL attribute), then the encrypted payload is\
    \ decrypted.\n   Then, if the decrypted payload is syntactically incorrect, the\n\
    \   message is silently discarded.\n"
- title: 5.  EAP-PSK Message Format
  contents:
  - "5.  EAP-PSK Message Format\n   For the sake of simplicity, EAP-PSK uses a fixed\
    \ message format.\n   There are four different types of EAP-PSK messages:\n  \
    \ o  The first EAP-PSK message, which is sent by the server to the\n      peer.\n\
    \   o  The second EAP-PSK message, which is sent by the peer to the\n      server.\n\
    \   o  The third EAP-PSK message, which is sent by the server to the\n      peer.\n\
    \   o  The fourth EAP-PSK message, which is sent by the peer to the\n      server.\
    \  This is also the type of message that the peer further\n      sends to the\
    \ server in case of an extended authentication.  This\n      is also essentially\
    \ the type of message that the server further\n      sends to the peer in case\
    \ of an extended authentication: the only\n      slight modification that occurs\
    \ in this last case is the setting\n      of the EAP Code to 1 instead of 2 in\
    \ the other cases.\n   For the sake of clarity, the whole EAP packet that encapsulates\
    \ the\n   EAP-PSK message (i.e., the EAP-PSK message plus its EAP headers) is\n\
    \   depicted in Figures 11, 13, 14, and 18.\n"
- title: 5.1.  EAP-PSK First Message
  contents:
  - "5.1.  EAP-PSK First Message\n   The first EAP-PSK message is sent by the server\
    \ to the peer.  It has\n   the format presented in Figure 11.\n   0          \
    \         1                   2                   3\n   0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Code=1     |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Type EAP-PSK |     Flags     |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                                      \
    \                         |\n   +                                            \
    \                   +\n   |                             RAND_S               \
    \             |\n   +                                                        \
    \       +\n   |                                                              \
    \ |\n   +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |                               |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   :                                      \
    \                         :\n   :                              ID_S          \
    \                   :\n   :                                                  \
    \             :\n   +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 11: EAP-PSK First Message\n   Since IANA has allocated\
    \ EAP method type 47 for EAP-PSK, Type EAP-PSK\n   for the first EAP-PSK message\
    \ as well as any other EAP-PSK message\n   MUST be 47.\n   The first EAP-PSK message\
    \ consists of:\n   o  A 1-byte Flags field\n   o  A 16-byte random number: RAND_S\n\
    \   o  A variable length field that conveys the server's NAI: ID_S. The\n    \
    \  length of this field is deduced from the EAP length field.  The\n      length\
    \ of this NAI must not exceed 966 bytes.  This restriction\n      aims at avoiding\
    \ fragmentation issues (see Section 8.11).\n   The Flags field has the format\
    \ presented in Figure 12.\n   0\n   0 1 2 3 4 5 6 7 8\n   +-+-+-+-+-+-+-+-+\n\
    \   | T | Reserved  |\n   +-+-+-+-+-+-+-+-+\n                      Figure 12:\
    \ EAP-PSK Flags Field\n   The Flags field is comprised of two subfields:\n   o\
    \  A 2-bit T subfield, which indicates the type of EAP-PSK message:\n      * \
    \ T=0 for the first EAP-PSK message presented in Section 5.1.\n      *  T=1 for\
    \ the second EAP-PSK message presented in Section 5.2.\n      *  T=2 for the third\
    \ EAP-PSK message presented in Section 5.3.\n      *  T=3 for the fourth EAP-PSK\
    \ message presented in Section 5.4 and\n         the subsequent EAP-PSK messages\
    \ that may be exchanged during\n         extended authentication.\n   o  A 6-bit\
    \ Reserved subfield that is set to zero on transmission and\n      ignored on\
    \ reception.\n   The PCHANNEL Nonce field N (see Section 5.3) is used to distinguish\n\
    \   between the different EAP-PSK messages that may be exchanged during\n   extended\
    \ authentication that all have T set to 3, i.e., the fourth\n   EAP-PSK message\
    \ and possibly the next ones.\n"
- title: 5.2.  EAP-PSK Second Message
  contents:
  - "5.2.  EAP-PSK Second Message\n   The second EAP-PSK message is sent by the peer\
    \ to the server.  It has\n   the format presented in Figure 13.\n   0        \
    \           1                   2                   3\n   0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Code=2     |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Type EAP-PSK |     Flags     |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                                      \
    \                         |\n   +                                            \
    \                   +\n   |                             RAND_S               \
    \             |\n   +                                                        \
    \       +\n   |                                                              \
    \ |\n   +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |                               |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                                      \
    \                         |\n   +                                            \
    \                   +\n   |                             RAND_P               \
    \             |\n   +                                                        \
    \       +\n   |                                                              \
    \ |\n   +               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |               |                                               |\n   +-+-+-+-+-+-+-+-+\
    \                                               +\n   |                      \
    \                                         |\n   +                            \
    \                                   +\n   |                             MAC_P\
    \                             |\n   +                                        \
    \                       +\n   |                                              \
    \                 |\n   +               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               |                                               |\n   +-+-+-+-+-+-+-+-+\
    \                                               +\n   :                      \
    \        ID_P                             :\n   :                            \
    \                                   :\n   +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 13: EAP-PSK Second Message\n   It consists of:\n\
    \   o  A 1-byte Flags field\n   o  The 16-byte random number sent by the server\
    \ in the first EAP-PSK\n      message (RAND_S) that serves as a session identifier\n\
    \   o  A 16-byte random number: RAND_P\n   o  A 16-byte MAC: MAC_P\n   o  A variable\
    \ length field that conveys the peer's NAI: ID_P.  The\n      length of this field\
    \ is deduced from the EAP length field.  The\n      length of this NAI must not\
    \ exceed 966 bytes.  This restriction\n      aims at avoiding fragmentation issues\
    \ (see Section 8.11).\n   The Flags field format is presented in Figure 12.\n"
- title: 5.3.  EAP-PSK Third Message
  contents:
  - "5.3.  EAP-PSK Third Message\n   The third EAP-PSK message is sent by the server\
    \ to the peer.  It has\n   the format presented in Figure 14.\n   0          \
    \         1                   2                   3\n   0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Code=1     |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Type EAP-PSK |     Flags     |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                                      \
    \                         |\n   +                                            \
    \                   +\n   |                             RAND_S               \
    \             |\n   +                                                        \
    \       +\n   |                                                              \
    \ |\n   +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |                               |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                                      \
    \                         |\n   +                                            \
    \                   +\n   |                             MAC_S                \
    \             |\n   +                                                        \
    \       +\n   |                                                              \
    \ |\n   +               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |               |                                               |\n   +-+-+-+-+-+-+-+-+\
    \                                               +\n   :                      \
    \      PCHANNEL                           :\n   :                            \
    \                                   :\n   :                                  \
    \                             :\n   +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 14: EAP-PSK Third Message\n   It consists of:\n \
    \  o  A 1-byte Flags field\n   o  The 16-byte random number sent by the server\
    \ in the first EAP-PSK\n      message (RAND_S) that is used as a session identifier\n\
    \   o  A 16-byte MAC: MAC_S\n   o  A variable length field that constitutes the\
    \ protected channel:\n      PCHANNEL\n   The Flags field format is presented in\
    \ Figure 12.\n   If there is no extension, i.e., if the authentication is standard,\n\
    \   the PCHANNEL field consists of:\n   o  A 4-byte Nonce N (see Section 3.3).\n\
    \   o  A 16-byte Tag (see Section 3.3).\n   o  A 2-bit result indication flag\
    \ R.\n   o  A 1-bit extension flag E, which is set to 0.\n   o  A 5-bit Reserved\
    \ field, which is set to zero on emission and\n      ignored on reception.\n \
    \  R, E, and Reserved are sent encrypted by the protected channel (see\n   Section\
    \ 3.3).\n   If there is no extension, PCHANNEL has the format presented in\n \
    \  Figure 15 (where R, E, and Reserved are presented in the clear for\n   the\
    \ sake of clarity, although in reality they are sent encrypted).\n   0       \
    \            1                   2                   3\n   0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             Nonce                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                                                             +\n   |        \
    \                      Tag                              |\n   +              \
    \                                                 +\n   |                    \
    \                                           |\n   +                          \
    \                                     +\n   |                                \
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | R |0| Reserved|\n   +-+-+-+-+-+-+-+-+\n                  Figure 15: The\
    \ PCHANNEL Field with E=0\n   If there is an extension, i.e., if the authentication\
    \ is extended,\n   the PCHANNEL field consists of:\n   o  A 4-byte Nonce N (see\
    \ Section 3.3).\n   o  A 16-byte Tag (see Section 3.3).\n   o  A 2-bit result\
    \ indication flag R.\n   o  A 1-bit extension flag E, which is set to 1.\n   o\
    \  A 5-bit Reserved field, which is set to zero on emission and\n      ignored\
    \ on reception.\n   o  A variable length EXT field.\n   R, E, Reserved, and EXT\
    \ are sent encrypted by the protected channel\n   (see Section 3.3).\n   If there\
    \ is an extension, PCHANNEL has the format presented in\n   Figure 16 where R,\
    \ E, Reserved and EXT are presented in the clear for\n   the sake of clarity,\
    \ although in reality they are sent encrypted).\n   0                   1    \
    \               2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             Nonce                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                                                             +\n   |        \
    \                      Tag                              |\n   +              \
    \                                                 +\n   |                    \
    \                                           |\n   +                          \
    \                                     +\n   |                                \
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | R |1| Reserved|                                               |\n   +-+-+-+-+-+-+-+-+\
    \                                               +\n   :                      \
    \      EXT                                :\n   :                            \
    \                                   :\n   +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 16: The PCHANNEL Field with E=1\n   This EXT field is\
    \ split in two subfields:\n   o  The EXT_Type subfield, which indicates the type\
    \ of the extension\n   o  The EXT_Payload subfield, which consists of the payload\
    \ of the\n      extension.  The EXT_Payload length is derived from the EAP Length\n\
    \      field.  EXT_Payload must have a bit length that is a multiple of 8\n  \
    \    bits and must not exceed 960 bytes.  The latter restriction aims\n      at\
    \ avoiding fragmentation issues (see Section 8.11), whereas the\n      former\
    \ comes from the EAP length being specified in bytes.\n   The format of the EXT\
    \ field is presented in Figure 17.\n   0                   1                 \
    \  2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   EXT_Type    |                                               |\n   +-+-+-+-+-+-+-+-+\
    \                                               +\n   :                      \
    \     EXT_Payload                         :\n   :                            \
    \                                   :\n   +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                         Figure 17: The EXT Field\n"
- title: 5.4.  EAP-PSK Fourth Message
  contents:
  - "5.4.  EAP-PSK Fourth Message\n   The fourth EAP-PSK message is sent by the peer\
    \ to the server.  It has\n   the format presented in Figure 18.\n   0        \
    \           1                   2                   3\n   0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Code=2     |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Type EAP-PSK |     Flags     |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                                      \
    \                         |\n   +                                            \
    \                   +\n   |                             RAND_S               \
    \             |\n   +                                                        \
    \       +\n   |                                                              \
    \ |\n   +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |                               |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   :                                      \
    \                         :\n   :                            PCHANNEL        \
    \                   :\n   :                                                  \
    \             :\n   :                                                        \
    \       :\n   +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 18: EAP-PSK Fourth Message\n   It consists of:\n\
    \   o  A 1-byte Flags field\n   o  The 16-byte random number sent by the server\
    \ in the first EAP-PSK\n      message (RAND_S) that is used as a session identifier\n\
    \   o  A variable length field that constitutes the protected channel:\n     \
    \ PCHANNEL\n   The Flags field format is presented in Figure 12.\n   The PCHANNEL\
    \ field has the following structure, which was already\n   described in Section\
    \ 5.3.\n   If there is no extension, i.e., if the authentication is standard,\n\
    \   the PCHANNEL field consists of:\n   o  A 4-byte Nonce N (see Section 3.3).\n\
    \   o  A 16-byte Tag (see Section 3.3).\n   o  A 2-bit result indication flag\
    \ R.\n   o  A 1-bit extension flag E, which is set to 0.\n   o  A 5-bit Reserved\
    \ field, which is set to zero on emission and\n      ignored on reception.\n \
    \  R, E, and Reserved are sent encrypted by the protected channel (see\n   Section\
    \ 3.3).\n   If there is no extension, PCHANNEL has the format presented in\n \
    \  Figure 15.\n   If there is an extension, i.e., if the authentication is extended,\n\
    \   the PCHANNEL field consists of:\n   o  A 4-byte Nonce N (see Section 3.3).\n\
    \   o  A 16-byte Tag (see Section 3.3).\n   o  A 2-bit result indication flag\
    \ R.\n   o  A 1-bit extension flag E, which is set to 1.\n   o  A 5-bit Reserved\
    \ field, which is set to zero on emission and\n      ignored on reception.\n \
    \  o  A variable length EXT field.\n   R, E, Reserved, and EXT are sent encrypted\
    \ by the protected channel\n   (see Section 3.3).\n   If there is an extension,\
    \ PCHANNEL has the format presented in\n   Figure 16.\n   This EXT field is split\
    \ in two subfields:\n   o  The EXT_Type subfield, which indicates the type of\
    \ the extension\n   o  The EXT_Payload subfield, which consists of the payload\
    \ of the\n      extension.  The EXT_Payload length is derived from the EAP Length\n\
    \      field.  EXT_Payload must have a bit length that is a multiple of 8\n  \
    \    bits and must not exceed 960 bytes.  The latter restriction aims\n      at\
    \ avoiding fragmentation issues (see Section 8.11).\n   The format of the EXT\
    \ field is presented in Figure 17.\n"
- title: 6.  Rules of Operation for the EAP-PSK Protected Channel
  contents:
  - "6.  Rules of Operation for the EAP-PSK Protected Channel\n   In this section,\
    \ the rules of operation of the EAP-PSK protected\n   channel are presented:\n\
    \   o  How protected result indications are implemented.\n   o  How an extended\
    \ authentication works in details.\n"
- title: 6.1.  Protected Result Indications
  contents:
  - "6.1.  Protected Result Indications\n   The R flag of the PCHANNEL field in the\
    \ third and fourth types of\n   EAP-PSK messages is used to provide result indications.\n\
    \   Since this 2-bit flag is communicated over the protected channel, it\n   is:\n\
    \   o  Encrypted so that only the peer and the server can know its value.\n  \
    \ o  Integrity-protected so that it cannot be modified by an attacker\n      without\
    \ the peer or the server detecting this modification.\n   o  Protected against\
    \ replays.\n   This 2-bit R flag can take the following values:\n   o  01 to mean\
    \ CONT\n   o  10 to mean DONE_SUCCESS\n   o  11 to mean DONE_FAILURE\n   The peer\
    \ and the server each remember some information about both the\n   values of R\
    \ that they have sent and the values of R they have\n   received.  It is the conjunction\
    \ of both sent and received R values\n   that indicate the success or the failure\
    \ of the EAP-PSK dialog.\n   In the case of a standard authentication, the following\
    \ values of R\n   should be exchanged:\n   o  Either the server sends a DONE_SUCCESS\
    \ in the PCHANNEL of the\n      third EAP-PSK message, to which the peer replies\
    \ with a\n      DONE_SUCCESS in the PCHANNEL of the fourth EAP-PSK message, which\n\
    \      successfully ends the EAP-PSK dialog.\n   o  Or the server sends a DONE_FAILURE\
    \ in the PCHANNEL of the third\n      EAP-PSK message, to which the peer replies\
    \ with a DONE_FAILURE in\n      the PCHANNEL of the fourth EAP-PSK message, which\
    \ unsuccessfully\n      ends the EAP-PSK dialog.\n   In the case of an extended\
    \ authentication, more complex exchanges may\n   occur, which is why the CONT\
    \ value was introduced.\n   The rules of operation for each value that R may take\
    \ are detailed\n   below.\n"
- title: 6.1.1.  CONT
  contents:
  - "6.1.1.  CONT\n   The server and the peer each initialize the values of R they\
    \ intend\n   to send and receive as CONT.\n   Here CONT stands for \"Continue\"\
    .  It indicates that the EAP-PSK\n   dialog is not yet successful and that the\
    \ party sending it wants to\n   continue the dialog to try and reach success.\n\
    \   Indeed, although the peer and the server must have successfully\n   authenticated\
    \ each other, thanks to MAC_P and MAC_S, before they\n   start communicating over\
    \ the protected channel, the EAP-PSK dialog\n   may not yet be deemed successful\
    \ after this mutual authentication\n   because of authorization issues.  For instance,\
    \ a prepaid customer of\n   a wireless Hot-Spot might have successfully authenticated\
    \ but has to\n   refill its account, e.g., with a credit card transaction over\
    \ the\n   protected channel, before it is authorized.\n"
- title: 6.1.2.  DONE_SUCCESS
  contents:
  - "6.1.2.  DONE_SUCCESS\n   DONE_SUCCESS indicates that the party that sent it deems\
    \ the EAP-PSK\n   dialog successful and therefore proposes to end this dialog.\n\
    \   Once the server has sent a DONE_SUCCESS, it must keep sending this\n   value\
    \ for R.\n   The peer must first receive a DONE_SUCCESS from the server before\
    \ it\n   is allowed to send a DONE_SUCCESS.\n   After the peer has received a\
    \ DONE_SUCCESS from the server, it may:\n   o  Send a CONT to the server if it\
    \ has not reached success on its\n      side.  The server that receives a CONT\
    \ should continue the EAP-PSK\n      dialog (see Section 8.2 for some discussion\
    \ on the security\n      implications of this).\n   o  Send a DONE_SUCCESS to\
    \ the server, which will end the EAP-PSK\n      dialog with success.\n   o  Send\
    \ a DONE_FAILURE to the server, which will end the EAP-PSK\n      dialog with\
    \ failure.\n"
- title: 6.1.3.  DONE_FAILURE
  contents:
  - "6.1.3.  DONE_FAILURE\n   DONE_FAILURE indicates that the party that sent it deems\
    \ the EAP-PSK\n   dialog unsuccessful and proposes to end this dialog because\
    \ nothing\n   will make it change its mind.\n   If the server is the first to\
    \ send a DONE_FAILURE, then the peer that\n   receives this DONE_FAILURE must\
    \ reply with a DONE_FAILURE and fail,\n   which ends the EAP-PSK dialog.\n   If\
    \ the peer is the first to send a DONE_FAILURE, then the server that\n   receives\
    \ this DONE_FAILURE must immediately end this EAP-PSK dialog\n   without sending\
    \ any further EAP-PSK message, and fail.\n"
- title: 6.2.  Extended Authentication
  contents:
  - "6.2.  Extended Authentication\n   An extended authentication can only be started\
    \ by the server.\n   Exactly one extension (identified by the EXT_Type subfield\
    \ of the EXT\n   field) must be run during an EAP-PSK extended authentication\
    \ dialog.\n   The extension is run over the protected channel: it can assume\n\
    \   confidentiality, integrity, and replay protection.\n   To start an extended\
    \ authentication, the server sets the PCHANNEL E\n   flag to 1 and includes the\
    \ EXT_Payload of the extension it has\n   chosen.\n   Since EAP-PSK does not provide\
    \ fragmentation, the extension must not\n   send an EXT_Payload larger than 960\
    \ bytes, which corresponds to the\n   1020-byte EAP MTU that may minimally be\
    \ assumed (see [3]).\n   Moreover, an extension must not send an empty EXT_Payload\
    \ (because\n   this has a particular meaning for EAP-PSK; see below).\n   When\
    \ the peer receives the third EAP-PSK message with the E flag set\n   to 1, it\
    \ checks whether it is able to process the proposed extension.\n   If the peer\
    \ is not able to process the proposed extension, i.e., it\n   does not recognize\
    \ the EXT_Type of the proposed extension, it sets\n   E=1 in its reply (the fourth\
    \ EAP-PSK message) and include an EXT\n   field of the same EXT_Type but with\
    \ an empty EXT_Payload.\n   Depending on the values taken by the R flags, the\
    \ EAP-PSK dialog may:\n   o  End\n      *  If the peer's policy mandates that\
    \ it fails in the case of an\n         unrecognized extension, it sends a DONE_FAILURE\
    \ in the fourth\n         EAP-PSK message.\n      *  If the server has sent a\
    \ DONE_SUCCESS in the third EAP-PSK\n         message, and the peer's policy authorizes\
    \ it to succeed even if\n         the extension is not recognized, the peer sends\
    \ a DONE_SUCCESS.\n   o  Continue for exactly one round-trip; namely, in case\
    \ the server\n      has sent a CONT in the third EAP-PSK message and the peer's\
    \ policy\n      authorizes it to succeed even if the extension is not recognized,\n\
    \      the peer replies with a CONT in the fourth EAP-PSK message.  The\n    \
    \  server must then, depending on its policy, send either a\n      DONE_SUCCESS\
    \ or a DONE_FAILURE to the peer in the fifth EAP-PSK\n      message.  If the server\
    \ sent a DONE_SUCCESS in the fifth EAP-PSK\n      message, the peer must send\
    \ a DONE_SUCCESS in the sixth EAP-PSK\n      message.  All these messages must\
    \ have the E flag set to 1 with an\n      EXT field with the EXT_Type of the extension\
    \ that was proposed and\n      an empty EXT_Payload (this behavior was chosen\
    \ to simplify\n      implementations).\n   If the peer is able to process the\
    \ proposed extension, then it does\n   so.  In this case, the extension must be\
    \ aware of the R values sent\n   and received and able to propose to update them.\
    \  All the subsequent\n   messages exchanged between the peer and the server must\
    \ have the E\n   flag set to 1 with an EXT field of the EXT_Type of the extension\
    \ that\n   was proposed and a non-empty EXT_Payload.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This section provides guidance to the IANA regarding\
    \ registration of\n   values related to the EAP-PSK protocol, in accordance with\
    \ [6].\n   The following terms are used here with the meanings defined in [6]:\n\
    \   \"name space\" and \"registration\".\n   The following policies are used here\
    \ with the meanings defined in\n   [6]: \"Expert Review\" and \"Specification\
    \ Required\".\n   This document introduces one new Internet Assigned Numbers Authority\n\
    \   (IANA) consideration: there is one name space in EAP-PSK that\n   requires\
    \ registration: the EXT_Type values (see Section 5.3 and\n   Section 5.4).\n \
    \  For registration requests where a Designated Expert should be\n   consulted,\
    \ the responsible IETF Area Director should appoint the\n   Designated Expert.\
    \  The intention is that any allocation will be\n   accompanied by a published\
    \ RFC.  But in order to allow for the\n   allocation of values prior to the RFC\
    \ being approved for publication,\n   the Designated Expert can approve allocations\
    \ once it seems clear\n   that an RFC will be published.  The Designated Expert\
    \ will post a\n   request to the EAP WG mailing list (or a successor designated\
    \ by the\n   Area Director) for comment and review, including an Internet-Draft.\n\
    \   Before a period of 30 days has passed, the Designated Expert will\n   either\
    \ approve or deny the registration request and publish a notice\n   of the decision\
    \ to the EAP WG mailing list or its successor, as well\n   as informing IANA.\
    \  A denial notice must be justified by an\n   explanation and, in the cases where\
    \ it is possible, concrete\n   suggestions on how the request can be modified\
    \ so as to become\n   acceptable.\n"
- title: 7.1.  Allocation of an EAP-Request/Response Type for EAP-PSK
  contents:
  - "7.1.  Allocation of an EAP-Request/Response Type for EAP-PSK\n   IANA allocated\
    \ a new EAP Type for EAP-PSK.\n"
- title: 7.2.  Allocation of EXT Type Numbers
  contents:
  - "7.2.  Allocation of EXT Type Numbers\n   EAP-PSK is not intended as a general-purpose\
    \ protocol, and\n   allocations of EXT_Type should not be made for purposes unrelated\
    \ to\n   authentication, authorization, and accounting.\n   EXT_Type numbers have\
    \ a range from 1 to 255.\n   EXT_Type 255 has been allocated for Experimental\
    \ use.\n   EXT_Type 1-254 may be allocated on the advice of a Designated Expert,\n\
    \   with Specification Required.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   [3] highlights several attacks that are possible\
    \ against EAP, as EAP\n   does not provide any robust security mechanism.\n  \
    \ This section discusses the claimed security properties of EAP-PSK as\n   well\
    \ as vulnerabilities and security recommendations in the threat\n   model of [3].\n"
- title: 8.1.  Mutual Authentication
  contents:
  - "8.1.  Mutual Authentication\n   EAP-PSK provides mutual authentication.\n   The\
    \ server believes that the peer is authentic because it can\n   calculate a valid\
    \ MAC and the peer believes that the server is\n   authentic because it can calculate\
    \ another valid MAC.\n   The authentication protocol that inspired EAP-PSK, AKEP2,\
    \ enjoys a\n   security proof in the provable security paradigm; see [14].\n \
    \  The MAC algorithm used in the instantiation of AKEP2 within EAP-PSK,\n   CMAC,\
    \ also enjoys a security proof in the provable security paradigm;\n   see [29].\
    \  A tag length of 16 bytes for CMAC is currently deemed\n   appropriate by the\
    \ cryptographic community for entity authentication.\n   The underlying block\
    \ cipher used, AES-128, is widely believed to be a\n   secure block cipher.\n\
    \   Finally, the key used for mutual authentication, AK, is only used for\n  \
    \ that purpose, which makes this part cryptographically independent of\n   the\
    \ other parts of the protocol.\n   EAP-PSK provides mutual authentication if it\
    \ is based on a pairwise\n   PSK of sufficient strength.  If the PSK is not pairwise\
    \ or not\n   sufficiently strong, then it does not provide authentication.  In\n\
    \   this way, EAP-PSK is no different than other authentication protocols\n  \
    \ based on Pre-Shared Keys.\n"
- title: 8.2.  Protected Result Indications
  contents:
  - "8.2.  Protected Result Indications\n   EAP-PSK provides protected result indications\
    \ thanks to its 2-bit R\n   flag (see Section 6.1).  This 2-bit R flag is protected\
    \ because it is\n   encrypted and integrity protected by the EAX mode of operation;\
    \ see\n   Section 3.3.\n   Care may be taken against Byzantine failures, that\
    \ is to say, for\n   instance, when a peer tries to force a server to engage in\
    \ a never-\n   ending conversation.  This could, for example, be done by a peer\
    \ that\n   keeps sending a CONT after it has received a DONE_SUCCESS from the\n\
    \   server.  A policy may limit the number of rounds in an EAP-PSK\n   extended\
    \ authentication to mitigate this threat, which is outside our\n   threat model.\n\
    \   It should also be noted that the cryptographic protection of the\n   result\
    \ indications does not prevent message deletion.\n   For instance, let us consider\
    \ a scenario in which:\n   o  A server sends a DONE_SUCCESS to a peer.\n   o \
    \ The peer replies with a DONE_SUCCESS.\n   In the case that the last message\
    \ from the peer is intercepted, and\n   an EAP Success is sent to the peer before\
    \ any retransmission from the\n   server reaches it, or the retransmissions from\
    \ the server are also\n   deleted, the peer will believe that it has successfully\
    \ authenticated\n   to the server while the server will fail.\n   This behavior\
    \ is well known (see, e.g., [23]) and in a sense\n   unavoidable.  There is a\
    \ trade-off between efficiency and the \"level\"\n   of information sharing that\
    \ is attainable.  EAP-PSK specified a\n   single round-trip of DONE_SUCCESS because\
    \ it is believed that:\n   o  If there is an adversary capable of disrupting the\
    \ communication\n      channel, it can do so whenever it wants (be it after 1\
    \ or 10\n      round-trips or even during data communication).\n   o  Other layers/applications\
    \ will generally start by doing a specific\n      key exchange and confirmation\
    \ procedure using the keys derived by\n      EAP-PSK.  This is typically done\
    \ by IEEE 802.11i \"four-way\n      handshake\".  In case the error is not detected\
    \ by EAP-PSK, it\n      should be detected then (please note, however, that it\
    \ is bad\n      practice to rely on an external mechanism to ensure\n      synchronization,\
    \ unless this is an explicit property of the\n      external mechanism).\n"
- title: 8.3.  Integrity Protection
  contents:
  - "8.3.  Integrity Protection\n   EAP-PSK provides integrity protection thanks to\
    \ the Tag of its\n   protected channel (see Section 3.3).\n   EAP-PSK provides\
    \ integrity protection if it is based on a pairwise\n   PSK of sufficient strength.\
    \  If the PSK is not pairwise or not\n   sufficiently strong, then it does not\
    \ provide authentication.  In\n   this way, it is no different than other authentication\
    \ protocols\n   based on Pre-Shared Keys.\n"
- title: 8.4.  Replay Protection
  contents:
  - "8.4.  Replay Protection\n   EAP-PSK provides replay protection of its mutual\
    \ authentication part\n   thanks to the use of random numbers RAND_S and RAND_P.\
    \  Since RAND_S\n   is 128 bits long, one expects to have to record 2**64 (i.e.,\n\
    \   approximately 1.84*10**19) EAP-PSK successful authentications before\n   an\
    \ authentication can be replayed.  Hence, EAP-PSK provides replay\n   protection\
    \ of its mutual authentication part as long as RAND_S and\n   RAND_P are chosen\
    \ at random; randomness is critical for security.\n   EAP-PSK provides replay\
    \ protection during the conversation of the\n   protected channel thanks to the\
    \ Nonce N of its protected channel (see\n   Section 3.3).  This nonce is initialized\
    \ to 0 by the server and\n   monotonically incremented by one by the party that\
    \ receives a valid\n   EAP-PSK message.  For instance, after receiving from the\
    \ server a\n   valid EAP-PSK message with Nonce set to x, the peer will answer\
    \ with\n   an EAP-PSK message with Nonce set to x+1 and wait for an EAP-PSK\n\
    \   message with Nonce set to x+2.  A retransmission of the server's\n   message\
    \ with Nonce set to x would cause the peer EAP layer to resend\n   the message\
    \ in which Nonce was set to x+1, which would be transparent\n   to the EAP-PSK\
    \ layer.\n   The EAP peer must check that the Nonce is indeed initialized to 0\
    \ by\n   the server.\n"
- title: 8.5.  Reflection Attacks
  contents:
  - "8.5.  Reflection Attacks\n   EAP-PSK provides protection against reflection attacks\
    \ in case of an\n   extended authentication because:\n   o  It integrity protects\
    \ the EAP header (which contains the\n      indication Request/Response.\n   o\
    \  It includes two separate spaces for the Nonces: the EAP server\n      only\
    \ receives messages with odd nonces, whereas the EAP peer only\n      receives\
    \ messages with even nonces.\n"
- title: 8.6.  Dictionary Attacks
  contents:
  - "8.6.  Dictionary Attacks\n   Because EAP-PSK is not a password protocol, it is\
    \ not vulnerable to\n   dictionary attacks.\n   Indeed, the PSK used by EAP-PSK\
    \ must not be derived from a password.\n   Derivation of the PSK from a password\
    \ may lead to dictionary attacks.\n   However, using a 16-byte PSK has:\n   o\
    \  Ergonomic impacts: some people may find it cumbersome to manually\n      provision\
    \ a 16-byte PSK.\n   o  Deployment impacts: some people may want to reuse existing\n\
    \      credential databases that contain passwords and not PSKs.\n   Because people\
    \ will probably not heed the warning not to use\n   passwords, guidance to derive\
    \ a PSK from a password is provided in\n   Appendix A.  The method proposed in\
    \ Appendix A only tries to make\n   dictionary attacks harder.  It does not eliminate\
    \ them.\n   However, it does not cause a fatal error if passwords are used\n \
    \  instead of PSKs: people rarely use password-derived certificates, so\n   why\
    \ should they do so for shared keys?\n"
- title: 8.7.  Key Derivation
  contents:
  - "8.7.  Key Derivation\n   EAP-PSK supports key derivation.\n   The key hierarchy\
    \ is specified in Section 2.1.\n   The mechanism used for key derivation is the\
    \ modified counter mode.\n   The instantiation of the modified counter in EAP-PSK\
    \ complies with\n   the conditions stated in [5] so that the security proof for\
    \ this mode\n   holds.\n   The underlying block cipher used, AES-128, is widely\
    \ believed to be a\n   secure block cipher.\n   A first key derivation occurs\
    \ to calculate AK and KDK from the PSK:\n   it is called the key setup (see Section\
    \ 3.1).  It uses the PSK as the\n   key to the modified counter mode.  Thus, AK\
    \ and KDK are believed to\n   be cryptographically separated and computable only\
    \ to those who have\n   knowledge of the PSK.\n   A second key derivation occurs\
    \ to derive session keys, namely, the\n   TEK, MSK, and EMSK (see Section 3.2).\
    \  It uses KDK as the key to the\n   modified counter mode.\n   The protocol design\
    \ explicitly assumes that neither AK nor KDK are\n   shared beyond the two parties\
    \ utilizing them.  AK loses its efficacy\n   to mutually authenticate the peer\
    \ and server with each other when it\n   is shared.  Similarly, the derived TEK,\
    \ MSK, and EMSK lose their\n   value when KDK is shared with a third party.\n\
    \   It should be emphasized that the peer has control of the session keys\n  \
    \ derived by EAP-PSK.  In particular, it can easily choose the random\n   number\
    \ it sends in EAP-PSK so that one of the nine derived 16-byte\n   key blocks (see\
    \ Section 2.1) takes a pre-specified value.\n   It was chosen not to prevent this\
    \ control of the session keys by the\n   peer because:\n   o  Preventing it would\
    \ have added some complexity to the protocol\n      (typically, the inclusion\
    \ of a one-way mode of operation of AES in\n      the key derivation part).\n\
    \   o  It is believed that the peer won't try to force the server to use\n   \
    \   some pre-specified value for the session keys.  Such an attack is\n      outside\
    \ the threat model and seems to have little value compared\n      to a peer sharing\
    \ its PSK.\n   However, this is not the behavior recommended by EAP in Section\
    \ 7.10\n   of [3].\n   Since deriving the session keys requires some cryptographic\n\
    \   computations, it is recommended that the session keys be derived only\n  \
    \ once authentication has succeeded (i.e., once the server has\n   successfully\
    \ verified MAC_P for the server side, and once the peer\n   has successfully verified\
    \ MAC_S for the peer side).\n   It is recommended to take great care in implementations,\
    \ so that\n   derived keys are not made available if the EAP-PSK dialog fails\n\
    \   (e.g., ends with DONE_FAILURE).\n   The TEK must not be made available to\
    \ anyone except to the current\n   EAP-PSK dialog.\n"
- title: 8.8.  Denial-of-Service Resistance
  contents:
  - "8.8.  Denial-of-Service Resistance\n   Denial of Service (DoS) resistance has\
    \ not been a design goal for\n   EAP-PSK.\n   It is, however, believed that EAP-PSK\
    \ does not provide any obvious\n   and avoidable venue for such attacks.\n   It\
    \ is worth noting that the server has to do a cryptographic\n   calculation and\
    \ maintain some state when it engages in an EAP-PSK\n   conversation, namely,\
    \ generate and remember the 16-byte RAND_S.\n   However, this should not lead\
    \ to resource exhaustion as this state\n   and the associated computation are\
    \ fairly lightweight.\n   Please note that both the peer and the server must commit\
    \ to their\n   RAND_S and RAND_P to protect their partners from flooding attacks.\n\
    \   It is recommended that EAP-PSK not allow EAP notifications to be\n   interleaved\
    \ in its dialog to prevent potential DoS attacks.  Indeed,\n   since EAP notifications\
    \ are not integrity protected, they can easily\n   be spoofed by an attacker.\
    \  Such an attacker could force a peer that\n   allows EAP notifications to engage\
    \ in a discussion that would delay\n   his or her authentication or result in\
    \ the peer taking unexpected\n   actions (e.g., in case a notification is used\
    \ to prompt the peer to\n   do some \"bad\" action).\n   It is up to the implementation\
    \ of EAP-PSK or to the peer and the\n   server to specify the maximum number of\
    \ failed cryptographic checks\n   that are allowed.  For instance, does the reception\
    \ of a bogus MAC_P\n   in the second EAP-PSK message cause a fatal error or is\
    \ it discarded\n   to continue waiting for the valid response of the valid peer?\
    \  There\n   is a trade-off between possibly allowing multiple tentative forgeries\n\
    \   and allowing a direct DoS (in case the first error is fatal).\n   For the\
    \ sake of simplicity and denial-of-service resilience, EAP-PSK\n   has chosen\
    \ not to include any error messages.  Hence, an \"invalid\"\n   EAP-PSK message\
    \ is silently discarded.  Although this makes\n   interoperability testing and\
    \ debugging harder, this leads to simpler\n   implementations and does not open\
    \ any venue for denial-of-service\n   attacks.\n"
- title: 8.9.  Session Independence
  contents:
  - "8.9.  Session Independence\n   Thanks to its key derivation mechanisms, EAP-PSK\
    \ provides session\n   independence: passive attacks (such as capture of the EAP\n\
    \   conversation) or active attacks (including compromise of the MSK or\n   EMSK)\
    \ do not enable compromise of subsequent or prior MSKs or EMSKs.\n   The assumption\
    \ that RAND_P and RAND_S are random is central for the\n   security of EAP-PSK\
    \ in general and session independence in\n   particular.\n"
- title: 8.10.  Exposition of the PSK
  contents:
  - "8.10.  Exposition of the PSK\n   EAP-PSK does not provide Perfect Forward Secrecy.\
    \  Compromise of the\n   PSK leads to compromise of recorded past sessions.\n\
    \   Compromise of the PSK enables the attacker to impersonate the peer\n   and\
    \ the server: compromise of the PSK leads to \"full\" compromise of\n   future\
    \ sessions.\n   EAP-PSK provides no protection against a legitimate peer sharing\
    \ its\n   PSK with a third party.  Such protection may be provided by\n   appropriate\
    \ repositories for the PSK, whose choice is outside the\n   scope of this document.\
    \  The PSK used by EAP-PSK must only be shared\n   between two parties: the peer\
    \ and the server.  In particular, this\n   PSK must not be shared by a group of\
    \ peers communicating with the\n   same server.\n   The PSK used by EAP-PSK must\
    \ be cryptographically separated from keys\n   used by other protocols, otherwise\
    \ the security of EAP-PSK may be\n   compromised.  It is a rule of thumb in cryptography\
    \ to use different\n   keys for different applications.\n"
- title: 8.11.  Fragmentation
  contents:
  - "8.11.  Fragmentation\n   EAP-PSK does not support fragmentation and reassembly.\n\
    \   Indeed, the largest EAP-PSK frame is at most 1015 bytes long,\n   because:\n\
    \   o  The maximum length for the peer NAI identity used in EAP-PSK is\n     \
    \ 966 bytes (see Section 5.2).  This should not be a limitation in\n      practice\
    \ (see Section 2.2 of [2] for more considerations on NAI\n      length).\n   o\
    \  The maximum length for the EXT_Payload field used in EAP-PSK is\n      960\
    \ bytes (see Section 5.3 and Section 5.4).\n   Per Section 3.1 of [3], the lower\
    \ layers over which EAP may be run\n   are assumed to have an EAP MTU of 1020\
    \ bytes or greater.  Since the\n   EAP header is 5 bytes long, supporting fragmentation\
    \ for EAP-PSK is\n   unnecessary.\n   Extensions that require sending a payload\
    \ larger than 960 bytes\n   should provide their own fragmentation and reassembly\
    \ mechanism.\n"
- title: 8.12.  Channel Binding
  contents:
  - "8.12.  Channel Binding\n   EAP-PSK does not provide channel binding as this feature\
    \ is still\n   very much a work in progress (see [13]).\n   However, it should\
    \ be easy to add it to EAP-PSK as an extension (see\n   Section 4.2).\n"
- title: 8.13.  Fast Reconnect
  contents:
  - "8.13.  Fast Reconnect\n   EAP-PSK does not provide any fast reconnect capability.\n\
    \   Indeed, as noted, for instance, in [15], mutual authentication\n   (without\
    \ counters or timestamps) requires three exchanges, thus four\n   exchanges in\
    \ EAP since any EAP-Request must be answered to by an EAP-\n   Response.\n   Since\
    \ this minimum bound is already reached in EAP-PSK standard\n   authentication,\
    \ there is no way the number of round-trips used within\n   EAP-PSK can be reduced\
    \ without using timestamps or counters.\n   Timestamps and counters were deliberately\
    \ avoided for the sake of\n   simplicity and security (e.g., synchronization issues).\n"
- title: 8.14.  Identity Protection
  contents:
  - "8.14.  Identity Protection\n   Since it was chosen to restrict to a single cryptographic\
    \ primitive\n   from symmetric cryptography, namely, the block cipher AES-128,\
    \ it\n   appears that it is not possible to provide \"reasonable\" identity\n\
    \   protection without failing to meet the simplicity goal.\n   Hereafter is an\
    \ informal discussion of what is meant by identity\n   protection and the rationale\
    \ behind the requirement of identity\n   protection.  For some complementary discussion,\
    \ refer to [37].\n   Identity protection basically means preventing the disclosure\
    \ of the\n   identities of the communicating parties over the network, which is\n\
    \   quite contradictory to authentication.  There are two levels of\n   identity\
    \ protection: protection against passive attackers and\n   protection against\
    \ active eavesdroppers.\n   As explained in [37], \"a common example [for identity\
    \ protection] is\n   the case of mobile devices wishing to prevent an attacker\
    \ from\n   correlating their (changing) location with the logical identity of\n\
    \   the device (or user)\".\n   If only symmetric cryptography is used, only a\
    \ weak form of identity\n   protection may be offered, namely, pseudonym management.\
    \  In other\n   words, the peer and the server agree on pseudonyms that they use\
    \ to\n   identify each other and usually change them periodically, possibly in\n\
    \   a protected way so that an attacker cannot learn new pseudonyms\n   before\
    \ they are used.\n   With pseudonym management, there is a trade-off between allowing\
    \ for\n   pseudonym resynchronization (thanks to a permanent identity) and\n \
    \  being vulnerable to active attacks (in which the attacker forges\n   messages\
    \ simulating a pseudonym desynchronization).\n   Indeed, a protocol using time-varying\
    \ pseudonyms may want to\n   anticipate \"desynchronization\" situations such\
    \ as, for instance, when\n   the peer believes that its current pseudonym is \"\
    pseudo1@bigco.com\"\n   whereas the server believes this peer will use the pseudonym\n\
    \   \"pseudo2@bigco.com\" (which is the pseudonym the server has sent to\n   update\
    \ \"pseudo1@bigco.com\").\n   Because pseudonym management adds complexity to\
    \ the protocol and\n   implies this unsatisfactory trade-off, it was decided not\
    \ to include\n   this feature in EAP-PSK.\n   However, EAP-PSK may trivially provide\
    \ some protection when the\n   concern is to avoid the \"real-life\" identity\
    \ of the user being\n   \"discovered\".  For instance, let us take the example\
    \ of user John Doe\n   that roams and connects to a Hot-Spot owned and operated\
    \ by Wireless\n   Internet Service Provider (WISP) BAD.  Suppose this user\n \
    \  authenticates to his home WISP (WISP GOOD) with an EAP method under\n   an\
    \ identity (e.g., \"john.doe@wispgood.com\") that allows WISP BAD (or\n   an attacker)\
    \ to recover his \"real-life\" identity, i.e., John Doe.  An\n   example drawback\
    \ of this is when a competitor of John Doe's WISP\n   wants to win John Doe as\
    \ a new customer by sending him some special\n   targeted advertisement.\n   EAP-PSK\
    \ can very simply thwart this attack, merely by avoiding to\n   provide John Doe\
    \ with an NAI that allows easy recovery of his real-\n   life identity.  It is\
    \ believed that when an NAI that is not\n   correlated to a real-life identity\
    \ is used, no valuable information\n   leaks because of the EAP method.\n   Indeed,\
    \ the identity of the WISP used by a peer has to be disclosed\n   anyway in the\
    \ realm portion of its NAI to allow AAA routing.\n   Moreover, the Medium Access\
    \ Control Address of the peer's Network\n   Interface Card can generally be used\
    \ to track the peer as efficiently\n   as a fixed NAI.\n   It is worth noting\
    \ that the server systematically discloses its\n   identity, which may allow probing\
    \ attacks.  This may not be a problem\n   as the identity of the server is not\
    \ supposed to remain secret.  On\n   the contrary, users tend to want to know\
    \ to whom they will be talking\n   in order to choose the right network to attach\
    \ to.\n"
- title: 8.15.  Protected Ciphersuite Negotiation
  contents:
  - "8.15.  Protected Ciphersuite Negotiation\n   EAP-PSK does not allow negotiating\
    \ ciphersuites.  Hence, it is not\n   vulnerable to negotiation attacks and does\
    \ not implement protected\n   ciphersuite negotiation.\n"
- title: 8.16.  Confidentiality
  contents:
  - "8.16.  Confidentiality\n   Although EAP-PSK provides confidentiality in its protected\
    \ channel,\n   it cannot claim to do so as per Section 7.2.1 of [3]: \"A method\n\
    \   making this claim must support identity protection\".\n"
- title: 8.17.  Cryptographic Binding
  contents:
  - "8.17.  Cryptographic Binding\n   Since EAP-PSK is not intended to be tunneled\
    \ within another protocol\n   that omits peer authentication, it does not implement\
    \ cryptographic\n   binding.\n"
- title: 8.18.  Implementation of EAP-PSK
  contents:
  - "8.18.  Implementation of EAP-PSK\n   To really provide security, not only must\
    \ a protocol be well thought-\n   out and correctly specified, but its implementation\
    \ must take special\n   care.\n   For instance, implementing cryptographic algorithms\
    \ requires special\n   skills since cryptographic software is vulnerable not only\
    \ to\n   classical attacks (e.g., buffer overflow or missing checks) but also\n\
    \   to some special cryptographic attacks (e.g., side channels attacks\n   like\
    \ timing ones; see [36]).  In particular, care must be taken to\n   avoid such\
    \ attacks in EAX implementation; please refer to [4] for a\n   note on this point.\n\
    \   An EAP-PSK implementation should use a good source of randomness to\n   generate\
    \ the random numbers required in the protocol.  Please refer\n   to [20] for more\
    \ information on generating random numbers for\n   security applications.\n  \
    \ Handling sensitive material (namely, keying material such as the PSK,\n   AK,\
    \ KDK, etc.) should be done in a secure way (see, for instance,\n   [19] for guidance\
    \ on secure deletion).\n   The specification of a repository for the PSK that\
    \ EAP-PSK uses is\n   outside the scope of this document.  In particular, nothing\
    \ prevents\n   one from storing this PSK on a tamper-resistant device such as\
    \ a\n   smart card rather than having it memorized or written down on a sheet\n\
    \   of paper.  The choice of the PSK repository may have important\n   security\
    \ impacts.\n"
- title: 9.  Security Claims
  contents:
  - "9.  Security Claims\n   This section provides the security claims required by\
    \ [3].\n   [a]  Mechanism.  EAP-PSK is based on symmetric cryptography (AES-128)\n\
    \        and uses a 16-byte Pre-Shared Key (PSK).\n   [b]  Security claims.  EAP-PSK\
    \ provides:\n        *  Mutual authentication (see Section 8.1)\n        *  Integrity\
    \ protection (see Section 8.3)\n        *  Replay protection (see Section 8.4)\n\
    \        *  Key derivation (see Section 8.7)\n        *  Dictionary attack resistance\
    \ (see Section 8.6)\n        *  Session independence (see Section 8.9)\n   [c]\
    \  Key strength.  EAP-PSK provides a 16-byte effective key\n        strength.\n\
    \   [d]  Description of key hierarchy.  Please see Section 2.1.\n   [e]  Indication\
    \ of vulnerabilities.  EAP-PSK does not provide:\n        *  Identity protection\
    \ (see Section 8.14)\n        *  Confidentiality (see Section 8.16)\n        *\
    \  Fast reconnect (see Section 8.13)\n        *  Fragmentation (see Section 8.11)\n\
    \        *  Cryptographic binding (see Section 8.17)\n        *  Protected ciphersuite\
    \ negotiation (see Section 8.15)\n        *  Perfect Forward Secrecy (see Section\
    \ 8.10)\n        *  Key agreement: the session key is chosen by the peer (see\n\
    \           Section 8.7)\n        *  Channel binding (see Section 8.12)\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   This EAP method has been inspired by EAP-Archie and\
    \ EAP-SIM.  Many\n   thanks to their respective authors: Jesse Walker (extra thanks\
    \ to\n   Jesse Walker for his thorough and challenging expert review of EAP-\n\
    \   PSK), Russ Housley, Henry Haverinen, and Joseph Salowey.\n   Thanks to\n \
    \  o  Henri Gilbert for some interesting discussions on the\n      cryptographic\
    \ parts of EAP-PSK.\n   o  Aurelien Magniez for his valuable feedback on network\
    \ aspects of\n      EAP-PSK, his curiosity and rigor that led to numerous\n  \
    \    improvements, and his help in the first implementation of EAP-PSK\n     \
    \ under Microsoft Windows and Freeradius.\n   o  Thomas Otto for his valuable\
    \ feedback on EAP-PSK and the\n      implementation of the first version of EAP-PSK\
    \ under Xsupplicant.\n   o  Nancy Cam-Winget for some exchanges on EAP-PSK.\n\
    \   o  Jari Arkko and Bernard Aboba, the beloved EAP WG chairs, for the\n    \
    \  work they stimulate.\n   Finally, thanks to Vir Z., who has brought a permanent\
    \ and\n   outstanding though discreet contribution to this protocol.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [2]   Aboba, B., Beadles, M., Arkko, J., and P. Eronen, \"The Network\n  \
    \       Access Identifier\", RFC 4282, December 2005.\n   [3]   Aboba, B., Blunk,\
    \ L., Vollbrecht, J., Carlson, J., and H.\n         Levkowetz, \"Extensible Authentication\
    \ Protocol (EAP)\",\n         RFC 3748, June 2004.\n   [4]   Bellare, M., Rogaway,\
    \ P., and D. Wagner, \"The EAX mode of\n         operation\", FSE 04, Springer-Verlag\
    \ LNCS 3017, 2004.\n   [5]   Gilbert, H., \"The Security of One-Block-to-Many\
    \ Modes of\n         Operation\", FSE 03, Springer-Verlag LNCS 2287, 2003.\n \
    \  [6]   Narten, T. and H. Alvestrand, \"Guidelines for Writing an IANA\n    \
    \     Considerations Section in RFCs\", BCP 26, RFC 2434,\n         October 1998.\n\
    \   [7]   National Institute of Standards and Technology, \"Specification\n  \
    \       for the Advanced Encryption Standard (AES)\", Federal\n         Information\
    \ Processing Standards (FIPS) 197, November 2001.\n   [8]   National Institute\
    \ of Standards and Technology, \"Recommendation\n         for Block Cipher Modes\
    \ of Operation: The CMAC Mode for\n         Authentication\", Special Publication\
    \ (SP) 800-38B, May 2005.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [9]   Aboba, B., Simon, D., Eronen, P., and\
    \ H. Levkowetz,\"Extensible\n         Authentication Protocol (EAP) Key Management\
    \ Framework\", Work\n         in Progress, October 2006.\n   [10]  Aboba, B.,\
    \ Calhoun, P., Glass, S., Hiller, T., McCann, P.,\n         Shiino, H., Zorn,\
    \ G., Dommety, G., Perkins, C., Patil, B.,\n         Mitton, D., Manning, S.,\
    \ Beadles, M., Walsh, P., Chen, X.,\n         Sivalingham, S., Hameed, A., Munson,\
    \ M., Jacobs, S., Lim, B.,\n         Hirschman, B., Hsu, R., Xu, Y., Campell,\
    \ E., Baba, S., and E.\n         Jaques, \"Criteria for Evaluating AAA Protocols\
    \ for work\n         Access\", RFC 2989, November 2000.\n   [11]  Aboba, B. and\
    \ D. Simon, \"PPP EAP TLS Authentication Protocol\",\n         RFC 2716, October\
    \ 1999.\n   [12]  Arkko, J. and H. Haverinen, \"Extensible Authentication Protocol\n\
    \         Method for 3rd Generation Authentication and Key Agreement\n       \
    \  (EAP-AKA)\", RFC 4187, January 2006.\n   [13]  Arkko, J. and P. Eronen, \"\
    Authenticated Service Information for\n         the Extensible Authentication\
    \ Protocol  (EAP)\", Work in\n         Progress, October 2005.\n   [14]  Bellare,\
    \ M. and P. Rogaway, \"Entity Authentication and Key\n         Distribution\"\
    , CRYPTO 93, Springer-Verlag LNCS 773, 1994.\n   [15]  Bellare, M., Pointcheval,\
    \ D., and P. Rogaway, \"Authenticated\n         Key Exchange Secure Against Dictionary\
    \ attacks\", EUROCRYPT 00,\n         Springer-Verlag LNCS 1807, 2000.\n   [16]\
    \  Bersani, F., \"EAP shared key methods: a tentative synthesis of\n         those\
    \ proposed so far\", Work in Progress, April 2004.\n   [17]  Bradner, S., \"The\
    \ Internet Standards Process -- Revision 3\",\n         BCP 9, RFC 2026, October\
    \ 1996.\n   [18]  Carlson, J., Aboba, B., and H. Haverinen, \"EAP SRP-SHA1\n \
    \        Authentication Protocol\", Work in Progress, July 2001.\n   [19]  Department\
    \ of Defense of the United States, \"National\n         Industrial Security Program\
    \ Operating Manual\", DoD 5220-22M,\n         January 1995.\n   [20]  Eastlake,\
    \ D., Schiller, J., and S. Crocker, \"Randomness\n         Requirements for Security\"\
    , BCP 106, RFC 4086, June 2005.\n   [21]  Funk, P. and S. Blake-Wilson, \"EAP\
    \ Tunneled TLS Authentication\n         Protocol (EAP-TTLS)\", Work in Progress,\
    \ July 2004.\n   [22]  Haller, N., Metz, C., Nesser, P., and M. Straw, \"A One-Time\n\
    \         Password System\", RFC 2289, February 1998.\n   [23]  Halpern, J. and\
    \ Y. Moses, \"Knowledge and common knowledge in a\n         distributed environment\"\
    , Journal of the ACM 37:3, 1990.\n   [24]  Haverinen, H. and J. Salowey, \"Extensible\
    \ Authentication\n         Protocol Method for Global System for Mobile Communications\n\
    \         (GSM) Subscriber Identity Modules (EAP-SIM)\", RFC 4186,\n         January\
    \ 2006.\n   [25]  Huitema, C., Postel, J., and S. Crocker, \"Not All RFCs are\n\
    \         Standards\", RFC 1796, April 1995.\n   [26]  Institute of Electrical\
    \ and Electronics Engineers, \"Local and\n         Metropolitan Area Networks:\
    \ Port-Based Network Access Control\",\n         IEEE Standard 802.1X, September\
    \ 2001.\n   [27]  Institute of Electrical and Electronics Engineers, \"Approved\n\
    \         Draft Supplement to Standard for Telecommunications and\n         Information\
    \ Exchange Between Systems-LAN/MAN Specific\n         Requirements - Part 11:\
    \ Wireless LAN Medium Access Control\n         (MAC) and Physical Layer (PHY)\
    \ Specifications: Specification\n         for Enhanced Security\", IEEE 802.11i-2004,\
    \ 2004.\n   [28]  Institute of Electrical and Electronics Engineers, \"Standard\n\
    \         for Telecommunications and Information Exchange Between Systems\n  \
    \       - LAN/MAN Specific Requirements - Part 11: Wireless LAN Medium\n     \
    \    Access Control (MAC) and Physical Layer (PHY) Specifications\",\n       \
    \  IEEE Standard 802.11, 1999.\n   [29]  Iwata, T. and K. Kurosawa, \"OMAC: One-Key\
    \ CBC MAC\", FSE 03,\n         Springer-Verlag LNCS 2887, 2003.\n   [30]  Jablon,\
    \ D., \"The SPEKE Password-Based Key Agreement Methods\",\n         Work in Progress,\
    \ November 2002.\n   [31]  Josefsson, S., \"The EAP SecurID(r) Mechanism\", Work\
    \ in\n         Progress, February 2002.\n   [32]  Josefsson, S., Palekar, A.,\
    \ Simon, D., and G. Zorn, \"Protected\n         EAP Protocol (PEAP) Version 2\"\
    , Work in Progress, October 2004.\n   [33]  Kaliski, B., \"PKCS #5: Password-Based\
    \ Cryptography\n         Specification Version 2.0\", RFC 2898, September 2000.\n\
    \   [34]  Kamath, V. and A. Palekar, \"Microsoft EAP CHAP Extensions\",\n    \
    \     Work in Progress, April 2004.\n   [35]  Kent, S., \"IP Authentication Header\"\
    , RFC 4302, December 2005\n   [36]  Kocher, P., \"Timing Attacks on Implementations\
    \ of Diffie-\n         Hellman, RSA, DSS, and Other Systems\", CRYPTO 96, Springer-\n\
    \         Verlag LNCS 1109, 1996.\n   [37]  Krawczyk, H., \"SIGMA: the `SIGn-and-MAc'\
    \ Approach to\n         Authenticated Diffie-Hellman and its Use in the IKE Protocols\"\
    ,\n         CRYPTO 03, Springer-Verlag LNCS 2729, June 2003.\n   [38]  MacNally,\
    \ C., \"Cisco LEAP protocol description\",\n         September 2001, available\
    \ from\n         <http://www.missl.cs.umd.edu/wireless/ethereal/leap.txt>.\n \
    \  [39]  Metz, C., \"OTP Extended Responses\", RFC 2243, November 1997.\n   [40]\
    \  Menezes, A., van Oorschot, P., and S. Vanstone, \"Handbook of\n         Applied\
    \ Cryptography\", CRC Press , 1996.\n   [41]  National Institute of Standards\
    \ and Technology, \"Password\n         Usage\", Federal Information Processing\
    \ Standards (FIPS) 112,\n         May 1985.\n   [42]  Cam-Winget, N., McGrew,\
    \ D., Salowey, J., and H. Zhou, \"The\n         Flexible Authentication via Secure\
    \ Tunneling Extensible\n         Authentication Protocol Method (EAP-FAST)\",\
    \ Work in Progress,\n         October 2006.\n   [43]  Schneier, B., Mudge, and\
    \ D. Wagner, \"Cryptanalysis of\n         Microsoft's PPTP Authentication Extensions\
    \ (MS-CHAPv2)\",\n         CQRE 99, Springer-Verlag LNCS 1740, October 1999.\n\
    \   [44]  Simpson, W., \"The Point-to-Point Protocol (PPP)\", STD 51,\n      \
    \   RFC 1661, July 1994.\n   [45]  Simpson, W., \"PPP Challenge Handshake Authentication\
    \ Protocol\n         (CHAP)\", RFC 1994, August 1996.\n   [46]  Tschofenig, H.,\
    \ Kroeselberg, D., Pashalidis, A., Ohba, Y., and\n         F. Bersani, \"EAP IKEv2\
    \ Method\", Work in Progress, October 2006.\n   [47]  Walker, J. and R. Housley,\
    \ \"The EAP Archie Protocol\", Work in\n         Progress, June 2003.\n   [48]\
    \  Wi-Fi Alliance, \"Wi-Fi Protected Access, version 2.0\",\n         April 2003.\n\
    \   [49]  Wright, J., \"Weaknesses in LEAP Challenge/Response\", Defcon 03,\n\
    \         August 2003.\n   [50]  Eronen, P. and H. Tschofenig, \"Pre-Shared Key\
    \ Ciphersuites for\n         Transport Layer Security (TLS)\", RFC 4279, December\
    \ 2005.\n"
- title: Appendix A.  Generation of the PSK from a Password - Discouraged
  contents:
  - "Appendix A.  Generation of the PSK from a Password - Discouraged\n   It is formally\
    \ discouraged to use a password to generate the PSK,\n   since this opens the\
    \ door to exhaustive search or dictionary attacks,\n   two attacks that would\
    \ not otherwise be possible.\n   EAP-PSK only provides a 16-byte key strength\
    \ when a 16-byte PSK is\n   drawn at random from the set of all possible 16-byte\
    \ strings.\n   However, as people will probably do this anyway, guidance is provided\n\
    \   hereafter to generate the PSK from a password.\n   For some hints on how passwords\
    \ should be selected, please refer to\n   [41].\n   The technique presented herein\
    \ is drawn from [33].  It is intended to\n   try to mitigate the risks associated\
    \ with password usage in\n   cryptography, typically dictionary attacks.\n   If\
    \ the binary representation of the password is strictly fewer than\n   16 bytes\
    \ long (which by the way means that the chosen password is\n   probably weak because\
    \ it is too short), then it is padded to 16 bytes\n   with zeroes as its high-order\
    \ bits.\n   If the binary representation of the password is strictly more than\
    \ 16\n   bytes long, then it is hashed down to exactly 16 bytes using the\n  \
    \ Matyas-Meyer-Oseas hash (please refer to [40] for a description of\n   this\
    \ hash.  Using the notation of Figure 9.3 of [40], g is the\n   identity function\
    \ and E is AES-128 in our construction.) with\n   IV=0x0123456789ABCDEFFEDCBA9876543210\
    \ (this value has been\n   arbitrarily selected).\n   We now assume that we have\
    \ a 16-byte number derived from the initial\n   password (that can be the password\
    \ itself if its binary\n   representation is exactly 16 bytes long).  We shall\
    \ call this number\n   P16.\n   Following the notations used in [33], the PSK\
    \ is derived thanks to\n   PBKDF2 instantiated with:\n   o  P16 as P\n   o  The\
    \ first 96 bits of the XOR of the peer and server NAIs as Salt\n      (zero-padded\
    \ in the high-order bits if necessary).\n   o  5000 as c\n   o  16 as dkLen\n\
    \   Although this gives better protection than nothing, this derivation\n   does\
    \ not stricto sensu protect against dictionary attacks.  It only\n   makes dictionary\
    \ precomputation harder.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Florent Bersani\n   France Telecom R&D\n   38, rue du\
    \ General Leclerc\n   Issy-Les-Moulineaux  92794 Cedex 9\n   FR\n   EMail: bersani_florent@yahoo.fr\n\
    \   Hannes Tschofenig\n   Siemens Networks GmbH & Co KG\n   Otto-Hahn-Ring 6\n\
    \   Munich  81739\n   GE\n   EMail: Hannes.Tschofenig@siemens.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78\
    \ and at www.rfc-editor.org/copyright.html, and\n   except as set forth therein,\
    \ the authors retain all their rights.\n   This document and the information contained\
    \ herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION\
    \ HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE\
    \ IETF TRUST AND\n   THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\
    \ EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE\
    \ OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n\
    \   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
