- title: __initial_text__
  contents:
  - ' Identity-Based Encryption Architecture and Supporting Data Structures

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ (http://trustee.ietf.org/\n   license-info) in effect on the date of publication\
    \ of this document.\n   Please review these documents carefully, as they describe\
    \ your rights\n   and restrictions with respect to this document.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the security architecture required to\n\
    \   implement identity-based encryption, a public-key encryption\n   technology\
    \ that uses a user's identity as a public key.  It also\n   defines data structures\
    \ that can be used to implement the technology.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................3\n  \
    \ 2. Identity-Based Encryption .......................................3\n    \
    \  2.1. Overview ...................................................3\n      2.2.\
    \ Sending a Message That Is IBE-Encrypted ....................5\n           2.2.1.\
    \ Sender Obtains Public Parameters ....................5\n           2.2.2. Construct\
    \ and Send an IBE-Encrypted Message .........6\n      2.3. Receiving and Viewing\
    \ an IBE-Encrypted Message .............6\n           2.3.1. Recipient Obtains\
    \ Public Parameters .................7\n           2.3.2. Recipient Obtains IBE\
    \ Private Key ...................8\n           2.3.3. Recipient Decrypts IBE-Encrypted\
    \ Message ............8\n   3. Identity Format .................................................9\n\
    \   4. Public Parameter Lookup .........................................9\n  \
    \    4.1. Request Method ............................................10\n    \
    \  4.2. Parameter and Policy Format ...............................11\n      4.3.\
    \ The application/ibe-pp-data MIME Type .....................14\n   5. Private\
    \ Key Request Protocol ...................................15\n      5.1. Overview\
    \ ..................................................15\n      5.2. Private Key\
    \ Request .......................................15\n      5.3. Request Structure\
    \ .........................................16\n      5.4. The application/ibe-key-request+xml\
    \ MIME type .............17\n      5.5. Authentication ............................................18\n\
    \      5.6. Server Response Format ....................................18\n  \
    \         5.6.1. The IBE100 responseCode ............................19\n    \
    \       5.6.2. The IBE101 responseCode ............................20\n      \
    \     5.6.3. The IBE201 responseCode ............................20\n        \
    \   5.6.4. The IBE300 responseCode ............................21\n          \
    \ 5.6.5. The IBE301 responseCode ............................21\n           5.6.6.\
    \ The IBE303 responseCode ............................21\n           5.6.7. The\
    \ IBE304 responseCode ............................22\n      5.7. The application/ibe-pkg-reply+xml\
    \ MIME type ...............22\n   6. ASN.1 Module ...................................................23\n\
    \   7. Security Considerations ........................................25\n  \
    \    7.1. Attacks outside the Scope of This Document ................25\n    \
    \  7.2. Attacks within the Scope of This Document .................26\n      \
    \     7.2.1. Attacks on the Protocols Defined in This Document ..26\n   8. IANA\
    \ Considerations ............................................27\n      8.1. Media\
    \ Types ...............................................27\n      8.2. XML Namespace\
    \ .............................................27\n   9. References .....................................................28\n\
    \      9.1. Normative References ......................................28\n  \
    \    9.2. Informative References ....................................29\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document describes the security architecture required\
    \ to\n   implement identity-based encryption, a public-key encryption\n   technology\
    \ that uses a user's identity as a public key.  It also\n   defines data structures\
    \ that are required to implement the\n   technology.  Objects used in this implementation\
    \ are defined using\n   ASN.1 [ASN1] and XML [XML].\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [KEY].\n"
- title: 2.  Identity-Based Encryption
  contents:
  - '2.  Identity-Based Encryption

    '
- title: 2.1.  Overview
  contents:
  - "2.1.  Overview\n   Identity-based encryption (IBE) is a public-key encryption\
    \ technology\n   that allows a public key to be calculated from an identity and\
    \ a set\n   of public mathematical parameters and that allows for the\n   corresponding\
    \ private key to be calculated from an identity, a set of\n   public mathematical\
    \ parameters, and a domain-wide secret value.  An\n   IBE public key can be calculated\
    \ by anyone who has the necessary\n   public parameters; a cryptographic secret\
    \ is needed to calculate an\n   IBE private key, and the calculation can only\
    \ be performed by a\n   trusted server that has this secret.\n   Calculation of\
    \ both the public and private keys in an IBE system can\n   occur as needed, resulting\
    \ in just-in-time creation of both public\n   and private keys.  This contrasts\
    \ with other public-key systems\n   [P1363], in which keys are generated randomly\
    \ and distributed prior\n   to secure communication commencing, and in which private\
    \ encryption\n   keys need to be securely archived to allow for their recovery\
    \ if they\n   are lost or destroyed.  The ability to calculate a recipient's public\n\
    \   key, in particular, eliminates the need for the sender and receiver\n   to\
    \ interact with each other, either directly or through a proxy such\n   as a directory\
    \ server, before sending secure messages.\n   A characteristic of IBE systems\
    \ that differentiates them from other\n   server-based cryptographic systems is\
    \ that once a set of public\n   parameters is fetched, encryption is possible\
    \ with no further\n   communication with a server during the validity period of\
    \ the public\n   parameters.  Other server-based systems may require a connection\
    \ to a\n   server for each encryption operation.\n   This document describes an\
    \ IBE-based messaging system, how the\n   components of such a system work together,\
    \ and defines data\n   structures that support the operation of such a system.\
    \  The server\n   components required for such a system are the following:\n \
    \     o  A Public Parameter Server (PPS).  IBE public parameters include\n   \
    \      publicly-sharable cryptographic material, known as IBE public\n       \
    \  parameters, and policy information for an associated PKG.  A\n         PPS\
    \ provides a well-known location for secure distribution of\n         IBE public\
    \ parameters and policy information that describe the\n         operation of a\
    \ PKG.  Section 5 of this document describes the\n         protocol that a client\
    \ uses to communicate with a PPS.\n      o  A Private-key Generator (PKG).  The\
    \ PKG stores and uses\n         cryptographic material, known as a master secret,\
    \ which is used\n         for generating a user's IBE private key.  A PKG accepts\
    \ an IBE\n         user's private key request, and after successfully\n      \
    \   authenticating them in some way, returns their IBE private key.\n        \
    \ Section 5 of this document describes the protocol that a client\n         uses\
    \ to communicate with a PKG.\n   A logical architecture of such an IBE system\
    \ would be to have a PKG\n   and PPS per name space, such as a DNS zone.  The\
    \ organization that\n   controls the DNS zone would also control the PKG and PPS\
    \ and thus the\n   determination of which PKG or PPS to use when creating public\
    \ and\n   private keys for the organization's members.  In this case, the PPS\n\
    \   URI/IRI can be uniquely created from a user-friendly name for the\n   form\
    \ of identity that the PPS supports.  This architecture would make\n   it clear\
    \ which set of public parameters to use and where to retrieve\n   them for a given\
    \ identity (for example, an RFC 2821 address [SMTP]).\n   IBE-encrypted messages\
    \ can use standard message formats, such as the\n   Cryptographic Message Syntax\
    \ [CMS].  How to use IBE with the CMS to\n   encrypt email messages is defined\
    \ in [IBECMS].\n   Note that IBE algorithms are used only for encryption, so if\
    \ digital\n   signatures are required, they will need to be provided by an\n \
    \  additional mechanism.\n   Section 3 of this document describes the identity\
    \ format that all PPS\n   and PKG servers MUST support.\n"
- title: 2.2.  Sending a Message That Is IBE-Encrypted
  contents:
  - "2.2.  Sending a Message That Is IBE-Encrypted\n   In order to send an encrypted\
    \ message, an IBE user must perform the\n   following steps:\n      1. Obtain\
    \ the recipient's public parameters\n         The public parameters of the recipient's\
    \ system are needed to\n         perform IBE operations.  Once a user obtains\
    \ these public\n         parameters, he can perform IBE encryption operations.\
    \  These\n         public parameters may be available at a PPS that is operated\
    \ by\n         the user's organization, one that is operated by the sender's\n\
    \         organization, or by a different organization entirely.\n      2. Construct\
    \ and send an IBE-encrypted message\n         In addition to the IBE public parameters,\
    \ all that is needed to\n         construct an IBE-encrypted message is the recipient's\
    \ identity,\n         the form of which is defined by the public parameters. \
    \ When\n         this identity is the same as the identity that a message would\n\
    \         be addressed to, then no more information is needed from a user\n  \
    \       to send them an encrypted message than is needed to send them\n      \
    \   an unencrypted message.  This is one of the major benefits of\n         an\
    \ IBE-based secure messaging system.  Examples of identities\n         are individual,\
    \ group, or role identifiers.\n"
- title: 2.2.1.  Sender Obtains Public Parameters
  contents:
  - "2.2.1.  Sender Obtains Public Parameters\n   The sender of a message obtains\
    \ the IBE public parameters that he\n   needs from a PPS that is hosted at a well-known\
    \ URI or IRI.  The IBE\n   public parameters contain all of the information that\
    \ the sender\n   needs to create an IBE-encrypted message except for the identity\
    \ of\n   the recipient.  Section 4 of this document describes the URI [URI] or\n\
    \   IRI [IRI] of a PPS, the format of IBE public parameters, and how to\n   obtain\
    \ them from a PPS.  The URI or IRI from which users obtain IBE\n   public parameters\
    \ MUST be authenticated in some way.  PPS servers\n   MUST support TLS 1.2 [TLS]\
    \ to satisfy this requirement and SHOULD\n   support its successors.  This step\
    \ is shown below in Figure 1.\n                     IBE Public Parameter Request\n\
    \                    ----------------------------->\n             Sender     \
    \                           PPS\n                    <-----------------------------\n\
    \                         IBE Public Parameters\n             Figure 1: Requesting\
    \ IBE Public Parameters\n   The sender of an IBE-encrypted message selects the\
    \ PPS and\n   corresponding PKG based on his local security policy.  Different\
    \ PPS\n   servers may provide public parameters that specify different IBE\n \
    \  algorithms or different key strengths, for example.  Or, they may\n   require\
    \ the use of PKG servers that require different levels of\n   authentication before\
    \ granting IBE private keys.\n"
- title: 2.2.2.  Construct and Send an IBE-Encrypted Message
  contents:
  - "2.2.2.  Construct and Send an IBE-Encrypted Message\n   To IBE-encrypt a message,\
    \ the sender chooses a content-encryption key\n   (CEK) and uses it to encrypt\
    \ his message and then encrypts the CEK\n   with the recipient's IBE public key\
    \ as described in [CMS].  This\n   operation is shown below in Figure 2.  The\
    \ document [IBCS] describes\n   the algorithms needed to implement two forms of\
    \ IBE, and [IBECMS]\n   describes how to use the Cryptographic Message Syntax\
    \ (CMS) to\n   encapsulate the encrypted message along with the IBE information\
    \ that\n   the recipient needs to decrypt an email message.\n                \
    \      CEK ----> Sender ----> IBE-encrypted CEK\n                            \
    \      ^\n                                  |\n                              \
    \    |\n                         Recipient's Identity\n                      \
    \ and IBE Public Parameters\n           Figure 2: Using an IBE Public-key Algorithm\
    \ to Encrypt\n"
- title: 2.3.  Receiving and Viewing an IBE-Encrypted Message
  contents:
  - "2.3.  Receiving and Viewing an IBE-Encrypted Message\n   In order to read an\
    \ IBE-encrypted message, a recipient of such a\n   message parses it to find the\
    \ URI or IRI he needs in order to obtain\n   the IBE public parameters that are\
    \ required to perform IBE\n   calculations as well as to obtain a component of\
    \ the identity that\n   was used to encrypt the message.  Next, the recipient\
    \ carries out the\n   following steps:\n      1. Obtain the IBE public parameters\n\
    \         An IBE system's public parameters allow it to uniquely create\n    \
    \     public and private keys.  The recipient of an IBE-encrypted\n         message\
    \ can decrypt an IBE-encrypted message if he has both the\n         IBE public\
    \ parameters and the necessary IBE private key.  The\n         public parameters\
    \ also provide the URI or IRI of the PKG where\n         the recipient of an IBE-encrypted\
    \ message can obtain the IBE\n         private keys.\n      2. Obtain the IBE\
    \ private key from the PKG\n         To decrypt an IBE-encrypted message, in addition\
    \ to the IBE\n         public parameters, the recipient needs to obtain the private\n\
    \         key that corresponds to the public key that the sender used.\n     \
    \    The IBE private key is obtained after successfully\n         authenticating\
    \ to a private key generator (PKG), a trusted\n         third party that calculates\
    \ private keys for users.  The\n         recipient then receives the IBE private\
    \ key over a secure\n         connection.\n      3. Decrypt the IBE-encrypted\
    \ Message\n         The IBE private key decrypts the CEK (see Section 2.3.3).\
    \  The\n         CEK is then used to decrypt the encrypted message.\n   It may\
    \ be useful for a PKG to allow users other than the intended\n   recipient to\
    \ receive some IBE private keys.  Giving a mail-filtering\n   appliance permission\
    \ to obtain IBE private keys on behalf of users,\n   for example, can allow the\
    \ appliance to decrypt and scan encrypted\n   messages for viruses or other malicious\
    \ features.\n"
- title: 2.3.1.  Recipient Obtains Public Parameters
  contents:
  - "2.3.1.  Recipient Obtains Public Parameters\n   Before he can perform any IBE\
    \ calculations related to the message\n   that he has received, the recipient\
    \ of an IBE-encrypted message needs\n   to obtain the IBE public parameters that\
    \ were used in the encryption\n   operation.  This operation is shown below in\
    \ Figure 3.  Because the\n   use of the correct public parameters is vital to\
    \ the overall security\n   of an IBE system, IBE public parameters MUST be transported\
    \ to\n   recipients over a secure protocol.  PPS servers MUST support TLS 1.2\n\
    \   [TLS] or its successors, using the latest version supported by both\n   parties,\
    \ for transport of IBE public parameters.  In addition, users\n   MUST verify\
    \ that the subject name in the server certificate matches\n   the URI/IRI of the\
    \ PPS.  The comments in Section 2.2.1 also apply to\n   this operation.\n    \
    \                    IBE Public Parameter Request\n                       ----------------------------->\n\
    \             Recipient                                PPS\n                 \
    \      <-----------------------------\n                            IBE Public\
    \ Parameters\n               Figure 3: Requesting IBE Public Parameters\n"
- title: 2.3.2.  Recipient Obtains IBE Private Key
  contents:
  - "2.3.2.  Recipient Obtains IBE Private Key\n   To obtain an IBE private key, the\
    \ recipient of an IBE-encrypted\n   message provides the IBE public key used to\
    \ encrypt the message and\n   their authentication credentials to a PKG and requests\
    \ the private\n   key that corresponds to the IBE public key.  Section 5 of this\n\
    \   document defines the protocol for communicating with a PKG as well as\n  \
    \ a minimum interoperable way to authenticate to a PKG that all IBE\n   implementations\
    \ MUST support.  Because the security of IBE private\n   keys is vital to the\
    \ overall security of an IBE system, IBE private\n   keys MUST be transported\
    \ to recipients over a secure protocol.  PKG\n   servers MUST support TLS 1.2\
    \ [TLS] or its successors, using the\n   latest version supported by both parties,\
    \ for transport of IBE\n   private keys.  This operation is shown below in Figure\
    \ 4.\n                          IBE Private Key Request\n                    \
    \   ---------------------------->\n             Recipient                    \
    \            PKG\n                       <----------------------------\n     \
    \                         IBE Private Key\n                 Figure 4: Obtaining\
    \ an IBE Private Key\n"
- title: 2.3.3.  Recipient Decrypts IBE-Encrypted Message
  contents:
  - "2.3.3.  Recipient Decrypts IBE-Encrypted Message\n   After obtaining the necessary\
    \ IBE private key, the recipient uses\n   that IBE private key and the corresponding\
    \ IBE public parameters to\n   decrypt the CEK.  This operation is shown below\
    \ in Figure 5.  He then\n   uses the CEK to decrypt the encrypted message content.\
    \  An example of\n   how to do this with email messages is given in [IBECMS].\n\
    \        IBE-encrypted CEK ----> Recipient ----> CEK\n                       \
    \             ^\n                                    |\n                     \
    \               |\n                            IBE Private Key\n             \
    \           and IBE Public Parameters\n       Figure 5: Using an IBE Public-Key\
    \ Algorithm to Decrypt\n"
- title: 3.  Identity Format
  contents:
  - "3.  Identity Format\n   An IBEIdentityInfo type MUST be used to represent the\
    \ identity of a\n   recipient.  This is defined to be the following:\n   IBEIdentityInfo\
    \ ::= SEQUENCE {\n     district        IA5String,\n     serial          INTEGER,\n\
    \     identityType    OBJECT IDENTIFIER,\n     identityData    OCTET STRING\n\
    \   }\n   An IBEIdentityInfo type is used to calculate public and private IBE\n\
    \   keys.  Because of this, such a structure is typically DER-encoded\n   [DER].\n\
    \   The fields of an IBEIdentityInfo structure have the following\n   meanings.\n\
    \   The district is an IA5String that represents the URI [URI] or IRI\n   [IRI]\
    \ where the recipient of an IBE-encrypted message can retrieve\n   the IBE public\
    \ parameters needed to encrypt or decrypt a message\n   encrypted for this identity.\
    \  Applications MUST support the method\n   described in Section 4 for doing this\
    \ and MAY support other methods.\n   IRIs MUST be handled according to the procedures\
    \ specified in Section\n   7.4 of [PKIX].\n   The serial is an INTEGER that defines\
    \ a unique set of IBE public\n   parameters in the event that more than one set\
    \ of parameters is used\n   by a single district.\n   identityType is an OBJECT\
    \ IDENTIFIER that defines the format that the\n   identityData field is encoded\
    \ with.\n   An example of a useful IBEIdentityInfo type is given in [IBECMS].\n\
    \   This example is tailored to the use of IBE in encrypting email.\n   Because\
    \ the information that comprises an identity is very dependent\n   on the application,\
    \ this document does not define an identityType\n   that all applications MUST\
    \ support.\n"
- title: 4.  Public Parameter Lookup
  contents:
  - "4.  Public Parameter Lookup\n   This section specifies how a component of an\
    \ IBE system can retrieve\n   the public parameters.  A sending or receiving client\
    \ MUST allow\n   configuration of these parameters manually, for example, through\n\
    \   editing a configuration file.  However, for simplified configuration,\n  \
    \ a client SHOULD also implement the public parameter URI/IRI request\n   method\
    \ described in this document to fetch the public parameters\n   based on a configured\
    \ URI/IRI.  This is especially useful for\n   federating between IBE systems.\
    \  By specifying a single URI/IRI, a\n   client can be configured to fetch all\
    \ the relevant parameters for a\n   remote PKG.  These public parameters can then\
    \ be used to encrypt\n   messages to recipients who authenticate to and retrieve\
    \ private keys\n   from that PKG.\n   The following section outlines the URI/IRI\
    \ request method to retrieve\n   a parameter block and describes the structure\
    \ of the parameter block\n   itself.  The technique for fetching IBE public parameters\
    \ using the\n   process defined in this section is indicated by the OID uriPPSOID,\n\
    \   which is defined to be the following:\n   uriPPSOID OBJECT IDENTIFIER ::=\
    \ {\n     joint-iso-itu-t(2) country(16) us(840)\n     organization(1) identicrypt(114334)\n\
    \     pps-schemas(3) ic-schemas(1) pps-uri(1) version(1)\n   }\n"
- title: 4.1.  Request Method
  contents:
  - "4.1.  Request Method\n   The configuration URI/IRI SHOULD be an HTTPS URI [HTTP]\
    \ and MAY\n   additionally support IRIs [IRI] for this purpose.  To retrieve the\n\
    \   IBE public parameters, the client SHOULD use the HTTP GET method as\n   defined\
    \ in [HTTP].  The request MUST happen over a secure protocol.\n   The requesting\
    \ client MUST support TLS 1.2 [TLS] or its successors\n   and SHOULD use the latest\
    \ version supported by both parties.  When\n   requesting the URI/IRI, the client\
    \ MUST only accept the system\n   parameter block if the server identity was verified\
    \ successfully by\n   TLS 1.2 [TLS] or its successors.\n   A successful GET request\
    \ returns in its body the base64 [B64]\n   encoding of the DER-encoded [DER] IBESysParams\
    \ structure that is\n   described in the next section.  This structure MUST be\
    \ encoded as an\n   application/ibe-pp-data MIME type.\n"
- title: 4.2.  Parameter and Policy Format
  contents:
  - "4.2.  Parameter and Policy Format\n   The IBE public parameters are a structure\
    \ of the form\n   IBESysParams ::= SEQUENCE {\n     version              INTEGER\
    \ { v2(2) },\n     districtName         IA5String,\n     districtSerial      \
    \ INTEGER,\n     validity             ValidityPeriod,\n     ibePublicParameters\
    \  IBEPublicParameters,\n     ibeIdentityType      OBJECT IDENTIFIER,\n     ibeParamExtensions\
    \   IBEParamExtensions OPTIONAL\n   }\n   The fields of an IBESysParams structure\
    \ have the following meanings.\n   The version field specifies the version of\
    \ the IBESysParams format.\n   For the format described in this document, this\
    \ MUST be set to 2.\n   The districtName field is an IA5String that MUST be an\
    \ encoding of an\n   URI [URI] or IRI [IRI].  IRIs MUST be handled according to\
    \ the\n   procedures specified in Section 7.4 of [PKIX].\n   The districtSerial\
    \ field is an integer that represents a unique set\n   of IBE public parameters\
    \ that are available at the URI or IRI defined\n   by the districtName.  If new\
    \ parameters are published for a\n   districtName, the districtSerial MUST be\
    \ increased to a number\n   greater than the previously-used districtSerial.\n\
    \   The validity field defines the lifetime of a specific instance of the\n  \
    \ IBESysParams and is defined to be the following:\n   ValidityPeriod ::= SEQUENCE\
    \ {\n     notBefore     GeneralizedTime,\n     notAfter      GeneralizedTime\n\
    \   }\n   The values of notBefore and notAfter MUST be expressed in Greenwich\n\
    \   Mean Time (Zulu), MUST include seconds (i.e., times are always\n   YYYYMMDDHHMMSSZ),\
    \ even where the number of seconds is equal to zero,\n   and MUST be expressed\
    \ to the nearest second.\n   A client MUST verify that the date on which it uses\
    \ the IBE public\n   parameters falls between the notBefore time and the notAfter\
    \ time of\n   the IBE public parameters, and it MUST NOT use the parameters for\
    \ IBE\n   encryption operations if they do not.\n   IBE public parameters MUST\
    \ be regenerated and republished whenever\n   the values of ibePublicParameters,\
    \ ibeIdentityType, or\n   ibeParamExtensions change for a district.  A client\
    \ SHOULD refetch\n   the IBE public parameters at an application-configurable\
    \ interval to\n   ensure that it has the most current version of the IBE public\n\
    \   parameters.\n   It is possible to create identities for use in IBE that have\
    \ a time\n   component, as described in [IBECMS], for example.  If such an\n \
    \  identity is used, the time component of the identity MUST fall\n   between\
    \ the notBefore time and the notAfter times of the IBE public\n   parameters.\n\
    \   IBEPublicParameters is a structure containing public parameters that\n   correspond\
    \ to IBE algorithms that the PKG supports.  This structure\n   is defined to be\
    \ following:\n   IBEPublicParameters ::= SEQUENCE (1..MAX) OF\n     IBEPublicParameter\n\
    \   IBEPublicParameter  ::= SEQUENCE {\n     ibeAlgorithm          OBJECT IDENTIFIER,\n\
    \     publicParameterData   OCTET STRING\n   }\n   The ibeAlgorithm OID specifies\
    \ an IBE algorithm.  The OIDs for two\n   IBE algorithms (the Boneh-Franklin and\
    \ Boneh-Boyen algorithms) and\n   their publicParameterData structures are defined\
    \ in [IBCS].\n   The publicParameterData is a DER-encoded [DER] structure that\n\
    \   contains the actual cryptographic parameters.  Its specific structure\n  \
    \ depends on the algorithm.\n   The IBESysParams of a district MUST contain an\
    \ OID that identifies at\n   least one algorithm and MAY contain OIDs that identify\
    \ more than one\n   algorithm.  It MUST NOT contain two or more IBEPublicParameter\n\
    \   entries with the same algorithm.  A client that wants to use\n   IBESysParams\
    \ can chose any of the algorithms specified in the\n   publicParameterData structure.\
    \  A client MUST implement at least the\n   Boneh-Franklin algorithm [IBCS] and\
    \ MAY implement the Boneh-Boyen\n   [IBCS] and other algorithms.  If a client\
    \ does not support any of the\n   supported algorithms, it MUST generate an error\
    \ message and fail.\n   ibeIdentityType is an OID that defines the type of identities\
    \ that\n   are used with this district.  The OIDs and the required and optional\n\
    \   fields for each OID are application dependent.  An example of this is\n  \
    \ given in [IBECMS], which defines an identity format suitable for use\n   in\
    \ encrypting email.\n   IBEParamExtensions is a set of extensions that can be\
    \ used to define\n   additional parameters that particular implementations may\
    \ require.\n   This structure is defined as follows:\n   IBEParamExtensions ::=\
    \ SEQUENCE OF IBEParamExtension\n   IBEParamExtension ::= SEQUENCE {\n     ibeParamExtensionOID\
    \     OBJECT IDENTIFIER,\n     ibeParamExtensionValue   OCTET STRING\n   }\n \
    \  The contents of the octet string ibeParamExtensionValue are defined\n   by\
    \ the specific ibeParamExtensionOID.  The IBEParamExtensions of a\n   district\
    \ MAY have any number of extensions, including zero.  One\n   example of extensions\
    \ that have been used in practice is to provide a\n   URI where an encrypted message\
    \ can be decrypted and viewed by users\n   of webmail systems.  Another example\
    \ is to provide commercial\n   branding information, so that a bank can provide\
    \ a different user\n   interface for customers of different lines of business.\n\
    \   If a client receives public parameters that contain an extension that\n  \
    \ it is unable to process, it MUST NOT use the values in the\n   IBESysParams\
    \ structure for any cryptographic operations.  Clients\n   MUST be able to process\
    \ an IBESysParams structure that contains no\n   IBEParamExtensions.\n   The pkgURI\
    \ OID that is defined below defines an IBEParamExtensions\n   structure that contains\
    \ the URI or IRI of a Private Key Generator.\n   The presence of this OID in an\
    \ IBEParamExtension indicates that\n   clients MUST use the protocol defined in\
    \ Section 5 of this document\n   to obtain IBE private keys from the PKG and MUST\
    \ do so using the\n   URI/IRI that is defined by the ibeParamExtensionValue in\
    \ the\n   IBEParamExtension.\n   If the PKG is publicly-accessible, this extension\
    \ SHOULD be present\n   to allow the automatic retrieval of private keys for recipients\
    \ of\n   encrypted messages.  For this extension, the ibeParamExtensionValue\n\
    \   OCTET STRING is an IA5String containing the URI [URI] or IRI [IRI] of\n  \
    \ the PKG where IBE private keys can be obtained.  IRIs MUST be handled\n   according\
    \ to the procedures specified in Section 7.4 of [PKIX].\n   ibeParamExt OBJECT\
    \ IDENTIFIER ::= {\n     ibcs ibcs3(3) parameter-extensions(2)\n   }\n   pkgURI\
    \ OBJECT IDENTIFIER ::= { ibeParamExt pkgURI(1) }\n"
- title: 4.3.  The application/ibe-pp-data MIME Type
  contents:
  - "4.3.  The application/ibe-pp-data MIME Type\n   The following summarizes the\
    \ properties of the\n   application/ibe-pp-data MIME type.\n   MIME media type\
    \ name: application\n   MIME subtype name: ibe-pp-data\n   Mandatory parameters:\
    \ none\n   Optional parameters: none\n   Encoding considerations: This media type\
    \ MUST be encoded as 7-bit\n      (US-ASCII text [ASCII]).\n   Security considerations:\
    \ The data conveyed as this media type are the\n      public parameters needed\
    \ for the operation of a cryptographic\n      system.  To ensure that the parameters\
    \ can be trusted, the request\n      for these parameters must take place over\
    \ a secure protocol, such\n      as TLS 1.2 or its successors.  To ensure the\
    \ validity of the\n      server, the client MUST verify the server certificate\
    \ and MUST\n      abort the parameter request if the verification of the server\n\
    \      certificate of the TLS connection fails.  This media type contains\n  \
    \    no active content and does not use compression.\n   Interoperability considerations:\
    \ There are no known interoperability\n      considerations for this media type.\n\
    \   Applications that use this media type: Applications that implement\n     \
    \ IBE in compliance with this specification will use this media\n      type. \
    \ The most commonly used of these applications are encrypted\n      email and\
    \ file encryption.\n   Additional information: none\n   Person and email address\
    \ for further information: Luther Martin,\n      martin@voltage.com.\n   Intended\
    \ usage: COMMON\n   Author/Change controller: Luther Martin, martin@voltage.com.\n"
- title: 5.  Private Key Request Protocol
  contents:
  - '5.  Private Key Request Protocol

    '
- title: 5.1.  Overview
  contents:
  - "5.1.  Overview\n   When requesting a private key, a client has to transmit three\n\
    \   parameters:\n      1. The IBE algorithm for which the key is being requested\n\
    \      2. The identity for which it is requesting a key\n      3. Authentication\
    \ credentials for the individual requesting the\n         key\n   The identity\
    \ for which a client requests a key may not necessarily be\n   the same as the\
    \ identity that the authentication credentials\n   validate.  This may happen,\
    \ for example, when a single user has\n   access to multiple aliases.  For example,\
    \ an email user may have\n   access to the keys that correspond to two different\
    \ email addresses,\n   e.g., bob@example.com and bob.smith@example.com.\n   This\
    \ section defines the protocol to request private keys, a minimum\n   user authentication\
    \ method for interoperability, and how to pass\n   authentication credentials\
    \ to the server.  It assumes that a client\n   has already determined the URI/IRI\
    \ of the PKG.  This can be done from\n   information included in the IBE message\
    \ format and the public\n   parameters of the IBE system.\n   The technique for\
    \ fetching an IBE private key using the process\n   defined in this section is\
    \ indicated by the OBJECT IDENTIFIER pkgURI,\n   which is defined to be the following:\n\
    \   ibcs OBJECT IDENTIFIER ::= {\n     joint-iso-itu-t(2) country(16) us(840)\n\
    \     organization(1) identicrypt(114334) ibcs(1)\n   }\n   ibeParamExt OBJECT\
    \ IDENTIFIER ::= {\n     ibcs ibcs3(3) parameter-extensions(2)\n   }\n   pkgURI\
    \ OBJECT IDENTIFIER ::= { ibeParamExt pkgURI(1) }\n"
- title: 5.2.  Private Key Request
  contents:
  - "5.2.  Private Key Request\n   To request a private key, a client MUST perform\
    \ a HTTP POST method as\n   defined in [HTTP].  The request MUST take place over\
    \ a secure\n   protocol.  The requesting client MUST support TLS 1.2 [TLS] or\
    \ its\n   successors, using the latest version supported by both the client and\n\
    \   the PKG.  When requesting the URI/IRI, the client MUST verify the\n   server\
    \ certificate [HTTPTLS], and it MUST abort the key request if\n   the server certificate\
    \ verification of the TLS connection fails.\n   Doing so is critical to protect\
    \ the authentication credentials and\n   the private key against man-in-the-middle\
    \ attacks when it is\n   transmitted from the key server to the client.\n"
- title: 5.3.  Request Structure
  contents:
  - "5.3.  Request Structure\n   The POST method contains in its body the following\
    \ XML structure that\n   MUST be encoded as an application/ibe-key-request+xml\
    \ MIME type:\n   <ibe:request xmlns:ibe=\"urn:ietf:params:xml:ns:ibe\">\n    \
    \  <ibe:header>\n         <ibe:client version=\"clientID\"/>\n      </ibe:header>\n\
    \      <ibe:body>\n      <ibe:keyRequest>\n         <ibe:algorithm>\n        \
    \    algorithmOID\n         </ibe:algorithm>\n         <ibe:id>\n            ibeIdentityInfo\n\
    \         </ibe:id>\n      </ibe:keyRequest>\n      <ibe:authData>\n         ibeAuthData\n\
    \      </ibe:authData>\n      </ibe:body>\n   </ibe:request>\n   A <ibe:request>\
    \ SHOULD include an <ibe:client> element in the\n   <ibe:header> part of a key\
    \ request that contains an ASCII string that\n   identifies the client type and\
    \ client version.\n   A key request MUST contain an <ibe:oid> element that contains\
    \ the\n   base64 [B64] encoding of a DER-encoded [DER] object identifier that\n\
    \   identifies the algorithm for which a key is requested.  OIDs for the\n   Boneh-Boyen\
    \ (BB1) and Boneh-Franklin (BF) algorithms are listed in\n   [IBCS].\n   A key\
    \ request MUST contain an <ibe:id> element that contains the\n   identity that\
    \ the private key is being requested for.  This identity\n   is the base64 [B64]\
    \ encoding of a DER-encoded [DER] ASN.1 structure.\n   This structure defines\
    \ a user's identity in a way appropriate for the\n   application.  An example\
    \ of such a structure that is appropriate for\n   use in encrypting email is defined\
    \ in [IBECMS].\n   A key request MAY contain an <ibe:authData> element.  This\
    \ element\n   contains authentication information that the PKG can use to determine\n\
    \   whether or not a request for a particular IBE private key should be\n   granted.\n\
    \   A client MAY include optional additional XML elements in the\n   <ibe:body>\
    \ part of the key request.  A PKG MUST be able to process\n   key requests that\
    \ contain no such optional elements.\n"
- title: 5.4.  The application/ibe-key-request+xml MIME type
  contents:
  - "5.4.  The application/ibe-key-request+xml MIME type\n   The following summarizes\
    \ the properties of the\n   application/ibe-key-request+xml MIME type.\n   MIME\
    \ media type name: application\n   MIME subtype name: ibe-key-request+xml\n  \
    \ Mandatory parameters: none\n   Optional parameters: none\n   Encoding considerations:\
    \ This media type MUST be encoded as US-ASCII\n      [ASCII].\n   Security considerations:\
    \ The data conveyed in this media type may\n      contain authentication credentials.\
    \  Because of this, its\n      confidentiality and integrity is extremely important.\
    \  To ensure\n      this, the request for an IBE private key must take place over\
    \ a\n      secure protocol, such as TLS 1.2 or its successors.  To ensure the\n\
    \      validity of the server, the client MUST verify the server\n      certificate\
    \ and MUST abort the key request if the verification of\n      the server certificate\
    \ of the TLS connection fails.  This media\n      type contains no active content\
    \ and does not use compression.\n   Interoperability considerations: There are\
    \ no known interoperability\n      considerations for this media type.\n   Applications\
    \ that use this media type: Applications that implement\n      IBE in compliance\
    \ with this specification will use this media\n      type.  The most commonly\
    \ used of these applications are encrypted\n      email and file encryption.\n\
    \   Additional information: none\n   Person and email address for further information:\
    \ Luther Martin,\n      martin@voltage.com.\n   Intended usage: COMMON\n   Author/Change\
    \ controller: Luther Martin, martin@voltage.com.\n"
- title: 5.5.  Authentication
  contents:
  - "5.5.  Authentication\n   When a client requests a key from a PKG, the PKG MUST\
    \ authenticate\n   the client before issuing the key.  Authentication may either\
    \ be done\n   through the key request structure or as part of the secure transport\n\
    \   protocol.\n   A client or server implementing the request protocol MUST support\n\
    \   HTTP Basic Auth [AUTH] and SHOULD also support HTTP Digest Auth\n   [AUTH].\
    \  Applications MAY also use other means of authentication that\n   are appropriate\
    \ for the application.  An email application, for\n   example, might rely on deployed\
    \ email infrastructure for this.\n   For authentication methods that are not done\
    \ by the transport\n   protocol, a client MAY include additional authentication\
    \ information\n   in XML elements in the <ibe:authData> element of a key request.\
    \  If a\n   client does not know how to authenticate to a server, the client MAY\n\
    \   send a key request without authentication information.  If the key\n   server\
    \ requires the client to authenticate externally, it MAY reply\n   with an IBE201\
    \ responseCode (as defined below) to redirect the client\n   to the correct authentication\
    \ mechanism.  After receiving an\n   authentication credential from this external\
    \ mechanism, a client can\n   then use the credential to form a key request that\
    \ contains the\n   additional authentication data.\n"
- title: 5.6.  Server Response Format
  contents:
  - "5.6.  Server Response Format\n   The key server replies to the HTTP request with\
    \ an HTTP response.  If\n   the response contains a client error or server error\
    \ status code, the\n   client MUST abort the key request and fail.\n   If the\
    \ PKG replies with an HTTP response that has a status code\n   indicating success,\
    \ the body of the reply MUST contain the following\n   XML structure that MUST\
    \ be encoded as an\n   application/ibe-pkg-reply+xml MIME type:\n   <ibe:response\
    \ xmlns:ibe=\"urn:ietf:params:xml:ns:ibe\">\n      <ibe:responseType value=\"\
    responseCode\"/>\n      <ibe:body>\n         bodyTags\n      </ibe:body>\n   </ibe:response>\n\
    \   The responseCode attribute contains an ASCII string that describes\n   the\
    \ type of response from the key server.  The list of currently-\n   defined responseCodes\
    \ and their associated meanings is:\n      IBE100 KEY_FOLLOWS\n      IBE101 RESERVED\n\
    \      IBE201 FOLLOW_ENROLL_URI\n      IBE300 SYSTEM_ERROR\n      IBE301 INVALID_REQUEST\n\
    \      IBE303 CLIENT_OBSOLETE\n      IBE304 AUTHORIZATION DENIED\n"
- title: 5.6.1.  The IBE100 responseCode
  contents:
  - "5.6.1.  The IBE100 responseCode\n   If the key request was successful, the key\
    \ server responds with a\n   responseCode of IBE100, and the <ibe:body> MUST contain\
    \ a\n   <ibe:privateKey> element that contains a valid private key.  An\n   example\
    \ of this is shown below.\n   <ibe:response xmlns:ibe=\"urn:ietf:params:xml:ns:ibe\"\
    >\n      <ibe:responseType value=\"IBE100\"/>\n      <ibe:body>\n         <ibe:privateKey>\n\
    \           privateKey\n         </ibe:privateKey>\n      </ibe:body>\n   </ibe:response>\n\
    \   The privateKey is the base64 [B64] encoding of the DER encoding [DER]\n  \
    \ of the following structure:\n   IBEPrivateKeyReply ::= SEQUENCE {\n     pkgIdentity\
    \    IBEIdentityInfo,\n     pgkAlgorithm   OBJECT IDENTIFIER,\n     pkgKeyData\
    \     OCTET STRING,\n     pkgOptions     SEQUENCE SIZE (1..MAX) OF PKGOption\n\
    \   }\n   PKGOption ::=  SEQUENCE  {\n     optionID    OBJECT IDENTIFIER,\n  \
    \   optionValue OCTET STRING\n   }\n   The pkgIdentity is an IBEIdentityInfo structure\
    \ that MUST be\n   identical to the IBEIdentityInfo structure that was sent in\
    \ the key\n   request.\n   The pkgAlgorithm is an OID that identifies the algorithm\
    \ of the\n   returned private key.  The OIDs for the BB1 and BF algorithms are\n\
    \   defined in [IBCS].\n   The pkgKeyData is a structure that contains the actual\
    \ private key.\n   Private-key formats for the BB1 and BF algorithms are defined\
    \ in\n   [IBCS].\n   A server MAY pass back additional information to a client\
    \ in the\n   pkgOptions structure.  A client that receives a IBEPrivateKeyReply\n\
    \   from a PKG that contains information in a pkgOptions structure that\n   it\
    \ is unable process MUST NOT use the IBE private key in the\n   IBEPrivateKeyReply\
    \ structure for any cryptographic operations.  A\n   client MUST be able to process\
    \ an IBEPrivateKeyReply that contains no\n   PKGOptions structure.\n"
- title: 5.6.2.  The IBE101 responseCode
  contents:
  - "5.6.2.  The IBE101 responseCode\n   The responseCode IBE101 is reserved to ensure\
    \ interoperability with\n   earlier versions of the protocol described in this\
    \ document.  An\n   example of such a response is shown below.  A response with\
    \ the\n   IBE101 responseCode SHOULD contain no body.  If information is\n   contained\
    \ in the body of such a response, the client receiving the\n   response MUST discard\
    \ any data that is contained in the body.\n   <ibe:response xmlns:ibe=\"urn:ietf:params:xml:ns:ibe\"\
    >\n      <ibe:responseType value=\"IBE101\"/>\n      <ibe:body>\n         This\
    \ message must be discarded by the recipient\n      </ibe:body\n   </ibe:response>\n"
- title: 5.6.3.  The IBE201 responseCode
  contents:
  - "5.6.3.  The IBE201 responseCode\n   A PKG MAY support authenticating users to\
    \ external authentication\n   mechanisms.  If this is the case, the server replies\
    \ to the client\n   with responseCode IBE201 and the body of the response MUST\
    \ contain a\n   <ibe:location> element that specifies the URI of the authentication\n\
    \   mechanism.  An example of such a response is shown below.\n   <ibe:response\
    \ xmlns:ibe=\"urn:ietf:params:xml:ns:ibe\">\n      <ibe:responseType value=\"\
    IBE201\"/>\n      <ibe:body>\n         <ibe:location\n            URI=\"http://www.example.com/enroll.asp\"\
    />\n      </ibe:body>\n   </ibe:response>\n   The client can now contact the URI\
    \ returned in such a response using\n   the same mechanisms as defined in Section\
    \ 5.2 to obtain an\n   authentication credential.  Once the client has obtained\
    \ the\n   credential from the authentication mechanism at this URI, it sends a\n\
    \   new key request to the PKG with the correct authentication\n   credentials\
    \ contained in the request, placing the authentication\n   credential in the <ibe:authData>\
    \ element of a key request as\n   described in Section 5.5.\n"
- title: 5.6.4.  The IBE300 responseCode
  contents:
  - "5.6.4.  The IBE300 responseCode\n   The IBE300 responseCode indicates that an\
    \ internal server error has\n   occurred.  Information that may help diagnose\
    \ the error MAY be\n   included in the body of such a response.  An example of\
    \ such a\n   response is shown below.  Upon receiving a IBE300 responseCode, the\n\
    \   client MUST abort the key request and discard any data that was\n   included\
    \ in the body of the response.\n   <ibe:response xmlns:ibe=\"urn:ietf:params:xml:ns:ibe\"\
    >\n      <ibe:responseType value=\"IBE300\"/>\n      <ibe:body>\n         Widget\
    \ phlebotomy failure\n      </ibe:body>\n   </ibe:response>\n"
- title: 5.6.5.  The IBE301 responseCode
  contents:
  - "5.6.5.  The IBE301 responseCode\n   The IBE303 responseCode indicates that an\
    \ invalid key request has\n   been received by the server.  Information that may\
    \ help diagnose the\n   error MAY be included in the body of such a response.\
    \  An example of\n   such a response is shown below.  Upon receiving an IBE301\n\
    \   responseCode, the client MUST abort the key request and discard any\n   data\
    \ that was included in the body of the response.\n   <ibe:response xmlns:ibe=\"\
    urn:ietf:params:xml:ns:ibe\">\n      <ibe:responseType value=\"IBE301\"/>\n  \
    \    <ibe:body>\n         Some additional stuff\n      </ibe:body>\n   </ibe:response>\n"
- title: 5.6.6.  The IBE303 responseCode
  contents:
  - "5.6.6.  The IBE303 responseCode\n   The IBE303 responseCode indicates that the\
    \ server is unable to\n   correctly process the request because the version of\
    \ the request is\n   no longer supported by the server.  Information that may\
    \ help\n   diagnose the error MAY be included in the body of such a response.\n\
    \   An example of such a response is shown below.  Upon receiving an\n   IBE303\
    \ responseCode, the client MUST abort the key request and\n   discard any data\
    \ that was included in the body of the response.\n   <ibe:response xmlns:ibe=\"\
    urn:ietf:params:xml:ns:ibe\">\n      <ibe:responseType value=\"IBE303\"/>\n  \
    \    <ibe:body>\n         Version 3.3 or later needed\n      </ibe:body>\n   </ibe:response>\n"
- title: 5.6.7.  The IBE304 responseCode
  contents:
  - "5.6.7.  The IBE304 responseCode\n   The IBE304 responseCode indicates that a\
    \ valid key request has been\n   received by the server, but the authentication\
    \ credentials provided\n   were invalid.  Information that may help diagnose the\
    \ error MAY be\n   included in the body of such a response.  An example of such\
    \ a\n   response is shown below.  Upon receiving an IBE304 responseCode, the\n\
    \   client MUST abort the key request and discard any data that was\n   included\
    \ in the body of the response.\n   <ibe:response xmlns:ibe=\"urn:ietf:params:xml:ns:ibe\"\
    >\n      <ibe:responseType value=\"IBE304\"/>\n      <ibe:body>\n         Helpful\
    \ error message\n      </ibe:body>\n   </ibe:response>\n"
- title: 5.7.  The application/ibe-pkg-reply+xml MIME type
  contents:
  - "5.7.  The application/ibe-pkg-reply+xml MIME type\n   The following summarizes\
    \ the properties of the\n   application/ibe-pkg-reply+xml MIME type.\n   MIME\
    \ media type name: application\n   MIME subtype name: ibe-pkg-reply+xml\n   Mandatory\
    \ parameters: none\n   Optional parameters: none\n   Encoding considerations:\
    \ This media type MUST be encoded as US-ASCII\n      [ASCII].\n   Security considerations:\
    \ The data conveyed as this media type is an\n      IBE private key, so its confidentiality\
    \ and integrity are\n      extremely important.  To ensure this, the response\
    \ from the server\n      that contains an IBE private key must take place over\
    \ a secure\n      protocol, such as TLS 1.2 or its successors.  To ensure the\n\
    \      validity of the server, the client MUST verify the server\n      certificate\
    \ and MUST abort the key request if the verification of\n      the server certificate\
    \ of the TLS connection fails.  This media\n      type contains no active content\
    \ and does not use compression.\n   Interoperability considerations: There are\
    \ no known interoperability\n      considerations for this media type.\n   Applications\
    \ that use this media type: Applications that implement\n      IBE in compliance\
    \ with this specification will use this media\n      type.  The most commonly\
    \ used of these applications are encrypted\n      email and file encryption.\n\
    \   Additional information: none\n   Person and email address for further information:\
    \ Luther Martin,\n      martin@voltage.com.\n   Intended usage: COMMON\n   Author/Change\
    \ controller: Luther Martin, martin@voltage.com.\n"
- title: 6.  ASN.1 Module
  contents:
  - "6.  ASN.1 Module\n   The following ASN.1 module summarizes the ASN.1 definitions\
    \ discussed\n   in this document.\n   IBEARCH-module { joint-iso-itu-t(2) country(16)\
    \ us(840)\n     organization(1) identicrypt(114334) ibcs(1) ibearch(5)\n     module(5)\
    \ version(1)\n   }\n   DEFINITIONS IMPLICIT TAGS ::= BEGIN\n   IBESysParams ::=\
    \ SEQUENCE {\n     version               INTEGER { v2(2) },\n     districtName\
    \          IA5String,\n     districtSerial        INTEGER,\n     validity    \
    \          ValidityPeriod,\n     ibePublicParameters   IBEPublicParameters,\n\
    \     ibeIdentityType       OBJECT IDENTIFIER,\n     ibeParamExtensions    IBEParamExtensions\
    \ OPTIONAL\n   }\n   ValidityPeriod ::= SEQUENCE {\n     notBefore     GeneralizedTime,\n\
    \     notAfter      GeneralizedTime\n   }\n   IBEPublicParameters ::= SEQUENCE\
    \ (1..MAX) OF\n     IBEPublicParameter\n   IBEPublicParameter  ::= SEQUENCE {\n\
    \     ibeAlgorithm          OBJECT IDENTIFIER,\n     publicParameterData   OCTET\
    \ STRING\n   }\n   IBEParamExtensions ::= SEQUENCE OF IBEParamExtension\n   IBEParamExtension\
    \ ::= SEQUENCE {\n     ibeParamExtensionOID     OBJECT IDENTIFIER,\n     ibeParamExtensionValue\
    \   OCTET STRING\n   }\n   ibcs OBJECT IDENTIFIER ::= {\n     joint-iso-itu-t(2)\
    \ country(16) us(840)\n     organization(1) identicrypt(114334) ibcs(1)\n   }\n\
    \   ibeParamExt OBJECT IDENTIFIER ::= {\n     ibcs ibcs3(3) parameter-extensions(2)\n\
    \   }\n   pkgURI OBJECT IDENTIFIER ::= { ibeParamExt pkgURI(1) }\n   IBEPrivateKeyReply\
    \ ::= SEQUENCE {\n     pkgIdentity  IBEIdentityInfo,\n     pgkAlgorithm OBJECT\
    \ IDENTIFIER,\n     pkgKeyData   OCTET STRING,\n     pkgOptions   SEQUENCE SIZE\
    \ (1..MAX) OF PKGOption\n   }\n   PKGOption  ::=  SEQUENCE  {\n     optionID \
    \   OBJECT IDENTIFIER,\n     optionValue OCTET STRING\n   }\n   uriPPSOID OBJECT\
    \ IDENTIFIER ::= {\n     joint-iso-itu-t(2) country(16) us(840)\n     organization(1)\
    \ identicrypt(114334)\n     pps-schemas(3) ic-schemas(1) pps-uri(1) version(1)\n\
    \   }\n   IBEIdentityInfo ::= SEQUENCE {\n     district        IA5String,\n  \
    \   serial          INTEGER,\n     identityType    OBJECT IDENTIFIER,\n     identityData\
    \    OCTET STRING\n   }\n   END\n"
- title: 7.  Security Considerations
  contents:
  - '7.  Security Considerations

    '
- title: 7.1.  Attacks outside the Scope of This Document
  contents:
  - "7.1.  Attacks outside the Scope of This Document\n   Attacks on the cryptographic\
    \ algorithms that are used to implement\n   IBE are outside the scope of this\
    \ document.  Such attacks are\n   detailed in [IBCS], which defines parameters\
    \ that give 80-bit,\n   112-bit, and 128-bit encryption strength.  We assume that\
    \ capable\n   administrators of an IBE system will select parameters that provide\
    \ a\n   sufficient resistance to cryptanalytic attacks by adversaries.\n   Attacks\
    \ that give an adversary the ability to access or change the\n   information on\
    \ a PPS or PKG, especially the cryptographic material\n   (referred to in this\
    \ document as the master secret), will defeat the\n   security of an IBE system.\
    \  In particular, if the cryptographic\n   material is compromised, the adversary\
    \ will have the ability to\n   recreate any user's private key and therefore decrypt\
    \ all messages\n   protected with the corresponding public key.  To address this\n\
    \   concern, it is highly RECOMMENDED that best practices for physical\n   and\
    \ operational security for PPS and PKG servers be followed and that\n   these\
    \ servers be configured (sometimes known as hardened) in\n   accordance with best\
    \ current practices [NIST].  An IBE system SHOULD\n   be operated in an environment\
    \ where illicit access is infeasible for\n   attackers to obtain.\n   Attacks\
    \ that require administrative access or IBE-user-equivalent\n   access to machines\
    \ used by either the client or the server components\n   defined in this document\
    \ are also outside the scope of this document.\n   We also assume that all administrators\
    \ of a system implementing the\n   protocols that are defined in this document\
    \ are trustworthy and will\n   not abuse their authority to bypass the security\
    \ provided by an IBE\n   system.  Similarly, we assume that users of an IBE system\
    \ will behave\n   responsibly, not sharing their authentication credentials with\n\
    \   others.  Thus, attacks that require such assumptions are outside the\n   scope\
    \ of this document.\n"
- title: 7.2.  Attacks within the Scope of This Document
  contents:
  - "7.2.  Attacks within the Scope of This Document\n   Attacks within the scope\
    \ of this document are those that allow an\n   adversary to:\n      o  passively\
    \ monitor information transmitted between users of an\n         IBE system and\
    \ the PPS and PKG\n      o  masquerade as a PPS or PKG\n      o  perform a denial-of-service\
    \ (DoS) attack on a PPS or PKG\n      o  easily guess an IBE users authentication\
    \ credential\n"
- title: 7.2.1.  Attacks on the Protocols Defined in This Document
  contents:
  - "7.2.1.  Attacks on the Protocols Defined in This Document\n   All communications\
    \ between users of an IBE system and the PPS or PKG\n   are protected using TLS\
    \ 1.2 [TLS].  The IBE system defined in this\n   document provides no additional\
    \ security protections for the\n   communications between IBE users and the PPS\
    \ or PKG.  Therefore, the\n   described IBE system is completely dependent on\
    \ the TLS security\n   mechanisms for authentication of the PKG or PPS server\
    \ and for\n   confidentiality and integrity of the communications.  Should there\
    \ be\n   a compromise of the TLS security mechanisms, the integrity of all\n \
    \  communications between an IBE user and the PPS or PKG will be\n   suspect.\n\
    \   The protocols defined in this document do not explicitly defend\n   against\
    \ an attacker masquerading as a legitimate IBE PPS or PKG.  The\n   protocols\
    \ rely on the server authentication mechanism of TLS [TLS].\n   In addition to\
    \ the TLS server authentication mechanism, IBE client\n   software can provide\
    \ protection against this possibility by providing\n   user interface capabilities\
    \ that allow users to visually determine\n   that a connection to PPS and PKG\
    \ servers is legitimate.  This\n   additional capability can help ensure that\
    \ users cannot easily be\n   tricked into providing valid authorization credentials\
    \ to an\n   attacker.\n   The protocols defined in this document are also vulnerable\
    \ to attacks\n   against an IBE PPS or PKG.  Denial-of-service attacks against\
    \ either\n   component can result in users' being unable to encrypt or decrypt\n\
    \   using IBE, and users of an IBE system SHOULD take the appropriate\n   countermeasures\
    \ [DOS, BGPDOS] that their use of IBE requires.\n   The IBE user authentication\
    \ method selected by an IBE PKG SHOULD be\n   of sufficient strength to prevent\
    \ attackers from easily guessing the\n   IBE user's authentication credentials\
    \ through trial and error.\n"
- title: 8.  IANA Considerations
  contents:
  - '8.  IANA Considerations

    '
- title: 8.1.  Media Types
  contents:
  - "8.1.  Media Types\n   With this specification, IANA has registered three media\
    \ types in the\n   standard registration tree.  These are application/ibe-pp-data,\n\
    \   application/ibe-key-request+xml, and application/ibe-pkg-reply+xml.\n   The\
    \ media type application/ibe-pp-data is defined in Section 4.3 of\n   this document.\
    \  The media type application/ibe-key-request+xml is\n   defined in Section 5.4\
    \ of this document.  The media type\n   application/ibe-pkg-reply+xml is defined\
    \ in Section 5.7 of this\n   document.\n"
- title: 8.2.  XML Namespace
  contents:
  - "8.2.  XML Namespace\n   The IANA is requested to register the following namespace\
    \ identifier:\n   urn:ietf:params:xml:ns:ibe\n   Registrant Contact:\n      Luther\
    \ Martin\n      Voltage Security\n      1070 Arastradero Rd Suite 100\n      Palo\
    \ Alto, CA 94304\n      Phone: +1 650 543 1280\n      Email: martin@voltage.com\n\
    \   XML:\n      <?xml version=\"1.0\"?>\n      <!DOCTYPE html PUBLIC \"-//W3C/DTD\
    \ XHTML Basic 1.0//EN\"\n                \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\"\
    >\n      <html xmlns=\"http://www.w3.org/1999/xhtml\">\n        <head>\n     \
    \     <meta http-equiv=\"content-type\"\n                content=\"text/html;charset=iso-8859-1\"\
    />\n          <title>Identity-Based Encryption</title>\n        </head>\n    \
    \    <body>\n          <h1>Namespace for Identity-Based Encryption</h1>\n    \
    \      <h2>urn:ietf:params:xml:ns:ibe</h2>\n          <p>\n      <a href=\"http://www.rfc-editor.org/rfc/rfc5408.txt\"\
    >RFC5408</a>.\n          </p>\n        </body>\n      </html>\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [ASCII]   ISO/IEC 646:1991 - Information Technology\
    \ - ISO 7-bit Coded\n             Character Set for Information Exchange.\n  \
    \ [ASN1]    ITU-T Recommendation X.680: Information Technology -\n           \
    \  Abstract Syntax Notation One, 1997.\n   [AUTH]    Franks, J., Hallam-Baker,\
    \ P., Hostetler, J., Lawrence, S.,\n             Leach, P., Luotonen, A., and\
    \ L. Stewart, \"HTTP\n             Authentication: Basic and Digest Access Authentication\"\
    ,\n             RFC 2617, June 1999.\n   [B64]     Freed, N. and N. Borenstein,\
    \ \"Multipurpose Internet Mail\n             Extensions (MIME) Part One: Format\
    \ of Internet Message\n             Bodies\", RFC 2045, November 1996.\n   [CMS]\
    \     Housley, R., \"Cryptographic Message Syntax (CMS)\", RFC\n             3852,\
    \ July 2004.\n   [DER]     ITU-T Recommendation X.690: OSI Networking and System\n\
    \             Aspects: Abstract Syntax Notation One (ASN.1), July 2002.\n   [DOS]\
    \     Ferguson, P. and D. Senie, \"Network Ingress Filtering:\n             Defeating\
    \ Denial of Service Attacks which employ IP Source\n             Address Spoofing\"\
    , BCP 38, RFC 2827, May 2000.\n   [HTTP]    Fielding, R., Gettys, J., Mogul, J.,\
    \ Frystyk, H., Masinter,\n             L., Leach, P., and T. Berners-Lee, \"Hypertext\
    \ Transfer\n             Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [HTTPTLS]\
    \ Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.\n   [IBCS]    Boyen, X.\
    \ and L. Martin, \"Identity-Based Cryptography\n             Standard (IBCS) #1:\
    \ Supersingular Curve Implementations of\n             the BF and BB1 Cryptosystems\"\
    , RFC 5091, December 2007.\n   [IRI]     Duerst, M. and M. Suignard, \"Internationalized\
    \ Resource\n             Identifiers (IRIs)\", RFC 3987, January 2005.\n   [KEY]\
    \     Bradner, S., \"Key words for use in RFCs to Indicate\n             Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [PKIX]    Cooper, D., Santesson,\
    \ S., Farrell, S., Boeyen, S.,\n             Housley, R., and W. Polk, \"Internet\
    \ X.509 Public Key\n             Infrastructure Certificate and Certificate Revocation\
    \ List\n             (CRL) Profile\", RFC 5280, May 2008.\n   [SMTP]    Klensin,\
    \ J., \"Simple Mail Transfer Protocol\", RFC 5321,\n             October 2008.\n\
    \   [TLS]     Dierks, T. and E. Rescorla, \"The Transport Layer Security\n   \
    \          (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n   [URI]    \
    \ Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n             Resource\
    \ Identifier (URI): Generic Syntax\", STD 66, RFC\n             3986, January\
    \ 2005.\n   [XML]     W3C, Extensible Markup Language (XML) 1.0 (Fourth Edition),\n\
    \             September 2006.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [BGPDOS]  Turk, D., \"Configuring BGP to Block\
    \ Denial-of-Service\n             Attacks\", RFC 3882, September 2004.\n   [IBECMS]\
    \  Martin, L. and M. Schertler, \"Using the Boneh-Franklin\n             Identity-Based\
    \ Encryption Algorithm with the Cryptographic\n             Message Syntax (CMS)\"\
    , RFC 5409, January 2009.\n   [NIST]    M. Souppaya, J. Wack and K. Kent, \"Security\
    \ Configuration\n             Checklist Program for IT Products - Guidance for\
    \ Checklist\n             Users and Developers\", NIST Special Publication SP\
    \ 800-70,\n             May 2005.\n   [P1363]  IEEE P1363, \"Standard Specifications\
    \ for Public-Key\n             Cryptography\", 2001.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Guido Appenzeller\n   Stanford University\n   Gates Building\
    \ 3A\n   Stanford, CA 94305\n   Phone: +1 650 732 2273\n   EMail: appenz@cs.stanford.edu\n\
    \   Luther Martin\n   Voltage Security\n   1070 Arastradero Rd, Suite 100\n  \
    \ Palo Alto, CA 94304\n   USA\n   Phone: +1 650 543 1280\n   EMail: martin@voltage.com\n\
    \   Mark Schertler\n   Axway\n   1600 Seaport Blvd, Suite 400\n   Redwood City,\
    \ CA 94063\n   USA\n   Phone: +1 650 216 2039\n   EMail: mschertler@us.axway.com\n"
