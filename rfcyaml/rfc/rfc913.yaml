- title: __initial_text__
  contents:
  - '                     Simple File Transfer Protocol

    '
- title: STATUS OF THIS MEMO
  contents:
  - "STATUS OF THIS MEMO\n   This RFC suggests a proposed protocol for the ARPA-Internet\n\
    \   community, and requests discussion and suggestions for improvements.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: INTRODUCTION
  contents:
  - "INTRODUCTION\n   SFTP is a simple file transfer protocol.  It fills the need\
    \ of people\n   wanting a protocol that is more useful than TFTP but easier to\n\
    \   implement (and less powerful) than FTP.  SFTP supports user access\n   control,\
    \ file transfers, directory listing, directory changing, file\n   renaming and\
    \ deleting.\n   SFTP can be implemented with any reliable 8-bit byte stream oriented\n\
    \   protocol, this document describes its TCP specification.  SFTP uses\n   only\
    \ one TCP connection; whereas TFTP implements a connection over\n   UDP, and FTP\
    \ uses two TCP connections (one using the TELNET\n   protocol).\n"
- title: THE PROTOCOL
  contents:
  - "THE PROTOCOL\n   SFTP is used by opening a TCP connection to the remote hosts'\
    \ SFTP\n   port (115 decimal).  You then send SFTP commands and wait for\n   replies.\
    \  SFTP commands sent to the remote server are always 4 ASCII\n   letters (of\
    \ any case) followed by a space, the argument(s), and a\n   <NULL>.  The argument\
    \ can sometimes be null in which case the command\n   is just 4 characters followed\
    \ by <NULL>.  Replies from the server are\n   always a response character followed\
    \ immediately by an ASCII message\n   string terminated by a <NULL>.  A reply\
    \ can also be just a response\n   character and a <NULL>.\n      <command> : =\
    \ <cmd> [<SPACE> <args>] <NULL>\n      <cmd> : =  USER ! ACCT ! PASS ! TYPE !\
    \ LIST ! CDIR\n                 KILL ! NAME ! DONE ! RETR ! STOR\n      <response>\
    \ : = <response-code> [<message>] <NULL>\n      <response-code> : =  + | - | \
    \  | !\n      <message> can contain <CRLF>\n   Commands that can be sent to the\
    \ server are listed below.  The server\n"
- title: RFC 913                                                   September 1984
  contents:
  - 'RFC 913                                                   September 1984

    '
- title: Simple File Transfer Protocol
  contents:
  - "Simple File Transfer Protocol\n   replies to each command with one of the possible\
    \ response codes\n   listed under each message.  Along with the response, the\
    \ server\n   should optionally return a message explaining the error in more\n\
    \   detail.  Example message texts are listed but do not have to be\n   followed.\
    \  All characters used in messages are ASCII 7-bit with the\n   high-order bit\
    \ zero, in an 8 bit field.\n   The response codes and their meanings:\n      +\
    \  Success.\n      -  Error.\n         An error occurred while processing your\
    \ command.\n         Number.\n         The number-sign is followed immediately\
    \ by ASCII digits\n         representing a decimal number.\n      !  Logged in.\n\
    \         You have sent enough information to be able to log yourself in.\n  \
    \       This is also used to mean you have sent enough information to\n      \
    \   connect to a directory.\n   To use SFTP you first open a connection to the\
    \ remote SFTP server.\n   The server replies by sending either a positive or negative\
    \ greeting,\n   such as:\n      +MIT-XX SFTP Service\n         (the first word\
    \ should be the host name)\n      -MIT-XX Out to Lunch\n"
- title: RFC 913                                                   September 1984
  contents:
  - 'RFC 913                                                   September 1984

    '
- title: Simple File Transfer Protocol
  contents:
  - "Simple File Transfer Protocol\n   If the server send back a '-' response it will\
    \ also close the\n   connection, otherwise you must now send a USER command.\n\
    \      USER user-id\n         Your userid on the remote system.\n         The\
    \ reply to this command will be one of:\n            !<user-id> logged in\n  \
    \             Meaning you don't need an account or password or you\n         \
    \      specified a user-id not needing them.\n            +User-id valid, send\
    \ account and password\n            -Invalid user-id, try again\n         If the\
    \ remote system does not have user-id's then you should\n         send an identification\
    \ such as your personal name or host name\n         as the argument, and the remote\
    \ system would reply with '+'.\n      ACCT account\n         The account you want\
    \ to use (usually used for billing) on the\n         remote system.\n        \
    \ Valid replies are:\n            ! Account valid, logged-in\n               Account\
    \ was ok or not needed. Skip the password.\n            +Account valid, send password\n\
    \               Account ok or not needed. Send your password next.\n         \
    \   -Invalid account, try again\n"
- title: RFC 913                                                   September 1984
  contents:
  - 'RFC 913                                                   September 1984

    '
- title: Simple File Transfer Protocol
  contents:
  - "Simple File Transfer Protocol\n      PASS password\n         Your password on\
    \ the remote system.\n         Valid replies are:\n            ! Logged in\n \
    \              Password is ok and you can begin file transfers.\n            +Send\
    \ account\n               Password ok but you haven't specified the account.\n\
    \            -Wrong password, try again\n"
- title: RFC 913                                                   September 1984
  contents:
  - 'RFC 913                                                   September 1984

    '
- title: Simple File Transfer Protocol
  contents:
  - "Simple File Transfer Protocol\n   You cannot specify any of the following commands\
    \ until you receive a\n   '!' response from the remote system.\n      TYPE { A\
    \ | B | C }\n         The mapping of the stored file to the transmission byte\
    \ stream\n         is controlled by the type.  The default is binary if the type\n\
    \         is not specified.\n         A - ASCII\n            The ASCII bytes are\
    \ taken from the file in the source\n            system, transmitted over the\
    \ connection, and stored in the\n            file in the destination system.\n\
    \            The data is the 7-bit ASCII codes, transmitted in the\n         \
    \   low-order 7 bits of 8-bit bytes.  The high-order bit of the\n            transmission\
    \ byte must be zero, and need not be stored in\n            the file.\n      \
    \      The data is \"NETASCII\" and is to follow the same rules as\n         \
    \   data sent on Telnet connections.  The key requirement here\n            is\
    \ that the local end of line is to be converted to the pair\n            of ASCII\
    \ characters CR and LF when transmitted on the\n            connection.\n    \
    \        For example, TOPS-20 machines have 36-bit words.  On TOPS-20\n      \
    \      machines, The standard way of labeling the bits is 0 through\n        \
    \    35 from high-order to low-order.  On TOPS-20 the normal way\n           \
    \ of storing ASCII data is to use 5 7-bit bytes per word.  In\n            ASCII\
    \ mode, the bytes transmitted would be [0-6], [7-13],\n            [14-20], [21-27],\
    \ [28-34], (bit 35 would not be\n            transmitted), each of these 7-bit\
    \ quantities would be\n            transmitted as the low-order 7 bits of an 8-bit\
    \ byte (with\n            the high-order bit zero).\n            For example,\
    \ one disk page of a TOPS-20 file is 512 36-bit\n            words.  But using\
    \ only 35 bits per word for 7-bit bytes, a\n            page is 17920 bits or\
    \ 2560 bytes.\n"
- title: RFC 913                                                   September 1984
  contents:
  - 'RFC 913                                                   September 1984

    '
- title: Simple File Transfer Protocol
  contents:
  - "Simple File Transfer Protocol\n         B - BINARY\n            The 8-bit bytes\
    \ are taken from the file in the source\n            system, transmitted over\
    \ the connection, and stored in the\n            file in the destination system.\n\
    \            The data is in 8-bit units.  In systems with word sizes\n       \
    \     which are not a multiple of 8, some bits of the word will\n            not\
    \ be transmitted.\n            For example, TOPS-20 machines have 36-bit words.\
    \  In binary\n            mode, the bytes transmitted would be [0-7], [8-15],\
    \ [16-23],\n            [24-31], (bits 32-35 would not be transmitted).\n    \
    \        For example, one disk page of a TOPS-20 file is 512 36-bit\n        \
    \    words.  But using only 32 bits per word for 8-bit bytes, a\n            page\
    \ is 16384 bits or 2048 bytes.\n         C - CONTINUOUS\n            The bits\
    \ are taken from the file in the source system\n            continuously, ignoring\
    \ word boundaries, and sent over the\n            connection packed into 8-bit\
    \ bytes.  The destination system\n            stores the bits received into the\
    \ file continuously,\n            ignoring word boundaries.\n            For systems\
    \ on machines with a word size that is a multiple\n            of 8 bits, the\
    \ implementation of binary and continuous modes\n            should be identical.\n\
    \            For example, TOPS-20 machines have 36-bit words.  In\n          \
    \  continuous mode, the bytes transmitted would be [first word,\n            bits\
    \ 0-7], [first word, bits 8-15], [first word, bits\n            16-23], [first\
    \ word, bits 24-31], [first word, bits 32-35 +\n            second word, bits\
    \ 0-3], [second word, bits 4-11], [second\n            word, bits 12-19], [second\
    \ word, bits 20-27], [second word,\n            bits 28-35], then the pattern\
    \ repeats.\n            For example, one disk page of a TOPS-20 file is 512 36-bit\n\
    \            words.  This is 18432 bits or 2304 8-bit bytes.\n         Replies\
    \ are:\n            +Using { Ascii | Binary | Continuous } mode\n            -Type\
    \ not valid\n"
- title: RFC 913                                                   September 1984
  contents:
  - 'RFC 913                                                   September 1984

    '
- title: Simple File Transfer Protocol
  contents:
  - "Simple File Transfer Protocol\n      LIST { F | V } directory-path\n        \
    \ A null directory-path will return the current connected\n         directory\
    \ listing.\n         F specifies a standard formatted directory listing.\n   \
    \         An error reply should be a '-' followed by the error message\n     \
    \       from the remote systems directory command.  A directory\n            listing\
    \ is a '+' followed immediately by the current\n            directory path specification\
    \ and a <CRLF>.  Following the\n            directory path is a single line for\
    \ each file in the\n            directory.  Each line is just the file name followed\
    \ by\n            <CRLF>.  The listing is terminated with a <NULL> after the\n\
    \            last <CRLF>.\n         V specifies a verbose directory listing.\n\
    \            An error returns '-' as above.  A verbose directory listing\n   \
    \         is a '+' followed immediately by the current directory path\n      \
    \      specification and a <CRLF>.  It is then followed by one line\n        \
    \    per file in the directory (a line ending in <CRLF>).  The\n            line\
    \ returned for each file can be of any format.  Possible\n            information\
    \ to return would be the file name, size,\n            protection, last write\
    \ date, and name of last writer.\n"
- title: RFC 913                                                   September 1984
  contents:
  - 'RFC 913                                                   September 1984

    '
- title: Simple File Transfer Protocol
  contents:
  - "Simple File Transfer Protocol\n      CDIR new-directory\n         This will change\
    \ the current working directory on the remote\n         host to the argument passed.\n\
    \         Replies are:\n            !Changed working dir to <new-directory>\n\
    \            -Can't connect to directory because: (reason)\n            +directory\
    \ ok, send account/password\n         If the server replies with '+' you should\
    \ then send an ACCT or\n         PASS command.  The server will wait for ACCT\
    \ or PASS commands\n         until it returns a '-' or '!' response.\n       \
    \     Replies to ACCT could be:\n               !Changed working dir to <new-directory>\n\
    \               +account ok, send password\n               -invalid account\n\
    \            Replies to PASS could be:\n               !Changed working dir to\
    \ <new-directory>\n               +password ok, send account\n               -invalid\
    \ password\n      KILL file-spec\n         This will delete the file from the\
    \ remote system.\n         Replies are:\n            +<file-spec> deleted\n  \
    \          -Not deleted because (reason)\n"
- title: RFC 913                                                   September 1984
  contents:
  - 'RFC 913                                                   September 1984

    '
- title: Simple File Transfer Protocol
  contents:
  - "Simple File Transfer Protocol\n      NAME old-file-spec\n         Renames the\
    \ old-file-spec to be new-file-spec on the remote\n         system.\n        \
    \ Replies:\n            +File exists\n            -Can't find <old-file-spec>\n\
    \               NAME command is aborted, don't send TOBE.\n         If you receive\
    \ a '+' you then send:\n            TOBE new-file-spec\n         The server replies\
    \ with:\n            +<old-file-spec> renamed to <new-file-spec>\n           \
    \ -File wasn't renamed because (reason)\n      DONE\n         Tells the remote\
    \ system you are done.\n         The remote system replies:\n            +(the\
    \ message may be charge/accounting info)\n         and then both systems close\
    \ the connection.\n"
- title: RFC 913                                                   September 1984
  contents:
  - 'RFC 913                                                   September 1984

    '
- title: Simple File Transfer Protocol
  contents:
  - "Simple File Transfer Protocol\n      RETR file-spec\n         Requests that the\
    \ remote system send the specified file.\n         Receiving a '-' from the server\
    \ should abort the RETR command\n         and the server will wait for another\
    \ command.\n         The reply from the remote system is:\n             <number-of-bytes-that-will-be-sent>\
    \ (as ascii digits)\n            -File doesn't exist\n         You then reply\
    \ to the remote system with:\n            SEND (ok, waiting for file)\n      \
    \         The file is then sent as a stream of exactly the number\n          \
    \     of 8-bit bytes specified.  When all bytes are received\n               control\
    \ passes back to you (the remote system is waiting\n               for the next\
    \ command).  If you don't receive a byte\n               within a reasonable amount\
    \ of time you should abort the\n               file transfer by closing the connection.\n\
    \            STOP (You don't have enough space to store file)\n              \
    \ Replies could be:\n                  +ok, RETR aborted\n         You are then\
    \ ready to send another command to the remote host.\n"
- title: RFC 913                                                   September 1984
  contents:
  - 'RFC 913                                                   September 1984

    '
- title: Simple File Transfer Protocol
  contents:
  - "Simple File Transfer Protocol\n      STOR { NEW | OLD | APP } file-spec\n   \
    \      Tells the remote system to receive the following file and save\n      \
    \   it under that name.\n         Receiving a '-' should abort the STOR command\
    \ sequence and the\n         server should wait for the next command.\n      \
    \   NEW specifies it should create a new generation of the file and\n        \
    \ not delete the existing one.\n            Replies could be:\n              \
    \ +File exists, will create new generation of file\n               +File does\
    \ not exist, will create new file\n               -File exists, but system doesn't\
    \ support generations\n         OLD specifies it should write over the existing\
    \ file, if any,\n         or else create a new file with the specified name.\n\
    \            Replies could be:\n               +Will write over old file\n   \
    \            +Will create new file\n               (OLD should always return a\
    \ '+')\n         APP specifies that what you send should be appended to the file\n\
    \         on the remote site.  If the file doesn't exist it will be\n        \
    \ created.\n            Replies could be:\n               +Will append to file\n\
    \               +Will create file\n               (APP should always return a\
    \ '+')\n"
- title: RFC 913                                                   September 1984
  contents:
  - 'RFC 913                                                   September 1984

    '
- title: Simple File Transfer Protocol
  contents:
  - "Simple File Transfer Protocol\n         You then send:\n            SIZE <number-of-bytes-in-file>\
    \ (as ASCII digits)\n               where number-of-bytes-in-file\n          \
    \        is the exact number of 8-bit bytes you will be\n                  sending.\n\
    \         The remote system replies:\n            +ok, waiting for file\n    \
    \           You then send the file as exactly the number of bytes\n          \
    \     specified above.\n               When you are done the remote system should\
    \ reply:\n                  +Saved <file-spec>\n                  -Couldn't save\
    \ because (reason)\n            -Not enough room, don't send it\n            \
    \   This aborts the STOR sequence, the server is waiting for\n               your\
    \ next command.\n         You are then ready to send another command to the remote\
    \ host.\n"
- title: RFC 913                                                   September 1984
  contents:
  - 'RFC 913                                                   September 1984

    '
- title: Simple File Transfer Protocol
  contents:
  - 'Simple File Transfer Protocol

    '
- title: AN EXAMPLE
  contents:
  - "AN EXAMPLE\n   An example file transfer.  'S' is the sender, the user process.\
    \  'R'\n   is the reply from the remote server.  Remember all server replies are\n\
    \   terminated with <NULL>.  If the reply is more than one line each line\n  \
    \ ends with a <CRLF>.\n      R: (listening for connection)\n      S: (opens connection\
    \ to R)\n      R: +MIT-XX SFTP Service\n      S: USER MKL\n      R: +MKL ok, send\
    \ password\n      S: PASS foo\n      R: ! MKL logged in\n      S: LIST F PS: <MKL>\n\
    \      R: +PS: <MKL>\n         Small.File\n         Large.File\n      S: LIST\
    \ V\n      R: +PS: <MKL>\n         Small.File  1        69(7)  P775240  2-Aug-84\
    \ 20:08  MKL\n         Large.File  100  255999(8)  P770000  9-Dec-84 06:04  MKL\n\
    \      S: RETR SMALL.FILE\n      R:  69\n      S: SEND\n      R: This is a small\
    \ file, the file is sent without\n         a terminating null.\n      S: DONE\n\
    \      R: +MIT-XX closing connection\n"
- title: RFC 913                                                   September 1984
  contents:
  - 'RFC 913                                                   September 1984

    '
- title: Simple File Transfer Protocol
  contents:
  - 'Simple File Transfer Protocol

    '
- title: EDITORS NOTE
  contents:
  - "EDITORS NOTE\n   Mark Lotter receives full credit for all the good ideas in this\
    \ memo.\n   As RFC editor, i have made an number of format changes, a few wording\n\
    \   changes, and one or two technical changes (mostly in the TYPEs).  I\n   accept\
    \ full responsibility for any flaws i may have introduced.\n   A draft form of\
    \ this memo was circulated for comments.  I will\n   attempt to list the issues\
    \ raised and summarize the pros and cons,\n   and resolution for each.\n     \
    \ ASCII Commands vs Binary Operation Codes\n         The ASCII command style is\
    \ easier to debug, the extra\n         programming cost in minimal, the extra\
    \ transmission cost is\n         trivial.\n         Binary operation codes are\
    \ more efficient, and a few days of\n         debugging should not out weigh years\
    \ of use.\n         Resolution:  I have kept the ASCII Commands.\n      Additional\
    \ Modes\n         Pro:  For some machines you can't send all the bits in a word\n\
    \         using this protocol.  There should be some additional mode to\n    \
    \     allow it.\n         Con:  Forget it, this is supposed to be SIMPLE file\
    \ transfer.\n         If you need those complex modes use real FTP.\n        \
    \ Resolution:  I have added the Continuous mode.\n"
- title: RFC 913                                                   September 1984
  contents:
  - 'RFC 913                                                   September 1984

    '
- title: Simple File Transfer Protocol
  contents:
  - "Simple File Transfer Protocol\n      CRLF Conversion\n         Pro:  In ASCII\
    \ type, convert the local end of line indicator to\n         CRLF on the way out\
    \ of the host and onto the network.\n         Con:  If you require that you have\
    \ to look at the bytes as you\n         send them, otherwise you can just send\
    \ them.  Most of the time\n         both sides will have the same end of line\
    \ convention anyway.\n         If someone needs a conversion it can be done with\
    \ a TECO macro\n         separately.\n         Resolution:  I have required CRLF\
    \ conversion in ASCII type.  If\n         you have the same kind of machines and\
    \ the same end of line\n         convention you can avoid the extra cost of conversion\
    \ by using\n         the binary or continuous type.\n      TCP Urgent\n      \
    \   Pro:  Use TCP Urgent to abort a transfer, instead of aborting\n         the\
    \ connection.  Then one could retry the file, or try a\n         different file\
    \ without having to login again.\n         Con:  That would couple SFTP to TCP\
    \ too much.  SFTP is supposed\n         to be able to be work over any reliable\
    \ 8-bit data stream.\n         Resolution:  I have not made use of TCP Urgent.\n\
    \      Random Access\n         Pro:  Wouldn't it be nice if (WIBNIF) SFTP had\
    \ a way of\n         accessing parts of a file?\n         Con:  Forget it, this\
    \ is supposed to be SIMPLE file transfer.\n         If you need random access\
    \ use real FTP (oops, real FTP doesn't\n         have random access either --\
    \ invent another protocol?).\n         Resolution:  I have not made any provision\
    \ for Random Access.\n   -- jon postel.\n"
