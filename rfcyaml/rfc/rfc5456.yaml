- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                        M. Spencer
  contents:
  - "Independent Submission                                        M. Spencer\n  \
    \               IAX: Inter-Asterisk eXchange Version 2\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes IAX, the Inter-Asterisk eXchange protocol,\
    \ an\n   application-layer control and media protocol for creating, modifying,\n\
    \   and terminating multimedia sessions over Internet Protocol (IP)\n   networks.\
    \  IAX was developed by the open source community for the\n   Asterisk Private\
    \ Branch Exchange (PBX) and is targeted primarily at\n   Voice over Internet Protocol\
    \ (VoIP) call control, but it can be used\n   with streaming video or any other\
    \ type of multimedia.\n   IAX is an \"all in one\" protocol for handling multimedia\
    \ in IP\n   networks.  It combines both control and media services in the same\n\
    \   protocol.  In addition, IAX uses a single UDP data stream on a static\n  \
    \ port greatly simplifying Network Address Translation (NAT) gateway\n   traversal,\
    \ eliminating the need for other protocols to work around\n   NAT, and simplifying\
    \ network and firewall management.  IAX employs a\n   compact encoding that decreases\
    \ bandwidth usage and is well suited\n   for Internet telephony service.  In addition,\
    \ its open nature permits\n   new payload type additions needed to support additional\
    \ services.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5456.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This RFC is not a candidate for any level of Internet Standard.\
    \  The\n   IETF disclaims any knowledge of the fitness of this RFC for any\n \
    \  purpose and in particular notes that the decision to publish is not\n   based\
    \ on IETF review for such things as security, congestion control,\n   or inappropriate\
    \ interaction with deployed protocols.  The RFC Editor\n   has chosen to publish\
    \ this document at its discretion.  Readers of\n   this document should exercise\
    \ caution in evaluating its value for\n   implementation and deployment.  See\
    \ RFC 3932 for more information.\n   The IESG thinks that this work is related\
    \ to IETF work done in SIP,\n   MMUSIC, and AVT WGs, but this does not prevent\
    \ publishing.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Basic Properties ...........................................4\n  \
    \    1.2. Drawbacks ..................................................5\n   2.\
    \ IAX Terminology .................................................6\n   3. Overview\
    \ of IAX Protocol ........................................6\n   4. Naming Conventions\
    \ ..............................................8\n   5. IAX Uniform Resource\
    \ Identifiers ................................8\n      5.1. IAX URI Scheme Registration\
    \ ................................8\n      5.2. URI Comparison ............................................11\n\
    \   6. Peer Behavior and Related Messages .............................11\n  \
    \    6.1. Registration (OPTIONAL) ...................................12\n    \
    \  6.2. Call Leg Management .......................................18\n      6.3.\
    \ Call Control ..............................................24\n      6.4. Mid-Call\
    \ Link Operations ..................................26\n      6.5. Call Path Optimization\
    \ ....................................28\n      6.6. Call Tear Down ............................................33\n\
    \      6.7. Network Monitoring ........................................33\n  \
    \    6.8. Digit Dialing .............................................34\n    \
    \  6.9. Miscellaneous .............................................36\n      6.10.\
    \ Media Messages ...........................................38\n   7. Message\
    \ Transport ..............................................39\n      7.1. Trunking\
    \ ..................................................40\n      7.2. Timers ....................................................41\n\
    \      7.3. NAT Considerations ........................................41\n  \
    \    7.4. Encryption ................................................42\n   8.\
    \ Message Encoding ...............................................42\n      8.1.\
    \ Frame Structure ...........................................42\n      8.2. Frame\
    \ Types ...............................................52\n      8.3. Control\
    \ Frames Subclasses .................................55\n      8.4. IAX Frames\
    \ ................................................56\n      8.5. HTML Command\
    \ Subclasses ...................................58\n      8.6. Information Elements\
    \ ......................................58\n      8.7. Media Formats .............................................86\n\
    \   9. Example Message Flows ..........................................87\n  \
    \    9.1. Ping/Pong .................................................88\n    \
    \  9.2. Lagrq/Lagrp ...............................................88\n      9.3.\
    \ Registration ..............................................89\n      9.4. Registration\
    \ Release ......................................89\n      9.5. Call Path Optimization\
    \ ....................................90\n      9.6. IAX Media Call ............................................91\n\
    \      9.7. IAX Media Call via an IAX Device ..........................93\n  \
    \ 10. Security Considerations .......................................94\n   11.\
    \ IANA Considerations ...........................................96\n   12. Implementation\
    \ Notes ..........................................96\n   13. Acknowledgments ...............................................97\n\
    \   14. References ....................................................97\n  \
    \    14.1. Normative References .....................................97\n    \
    \  14.2. Informative References ...................................99\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Numerous protocols have been specified by the Internet community\
    \ to\n   support control or signaling of multimedia sessions, for instance,\n\
    \   SIP [RFC3261], Media Gateway Control Protocol (MGCP) [RFC3435], and\n   MEGACO/H.248\
    \ [RFC3525] (which has been obsoleted and made historic by\n   [RFC5125]).  In\
    \ general, these protocols are designed to offer full\n   support for many types\
    \ of media transmission.  This flexible approach\n   adds some overhead to the\
    \ protocol headers, but allows for the\n   protocol use well beyond the current\
    \ application.  Typically, these\n   protocols reference, but do not specify,\
    \ the media transmission\n   protocol used to carry the actual stream.  SIP commonly\
    \ uses Session\n   Description Protocol (SDP) [RFC4566] to specify Real-Time Transport\n\
    \   Protocol (RTP) [RFC3550] streams.  This method allows for great\n   flexibility,\
    \ but again leads to more overhead.  Furthermore,\n   multimedia solutions that\
    \ use different, perhaps dynamic, network\n   addresses for signaling and media\
    \ transmission frequently suffer from\n   Network Address Translation (NAT) traversal\
    \ and security challenges.\n   IAX is the Inter-Asterisk eXchange protocol, which\
    \ facilitates VoIP\n   connections between servers, and between servers and clients\
    \ that\n   also use the IAX protocol.  IAX was created through an open source\n\
    \   methodology rather than through a traditional, standards-based\n   methodology.\
    \  It is an open protocol originally used by Asterisk, a\n   dual-licensed open\
    \ source and commercial PBX server from Digium.\n   Independent IAX implementations\
    \ may be open, proprietary, or licensed\n   in anyway the author seems fit without\
    \ royalty to the protocol\n   creators.\n"
- title: 1.1.  Basic Properties
  contents:
  - "1.1.  Basic Properties\n   IAX is a robust and full-featured, yet, simple protocol.\
    \  It is\n   general enough that it can handle most common types of media streams.\n\
    \   However, the protocol is highly optimized for VoIP calls where low-\n   overhead\
    \ and low-bandwidth consumption are priorities.  This\n   pragmatic aspect makes\
    \ IAX more efficient for VoIP than protocols\n   that consider possibilities far\
    \ beyond current needs and specify many\n   more details than are strictly necessary\
    \ to describe or transport a\n   point-to-point call.  Furthermore, because IAX\
    \ is designed to be\n   lightweight and VoIP-friendly, it consumes less bandwidth\
    \ than more\n   general approaches.  IAX is a binary protocol, designed to reduce\n\
    \   overhead, especially in regards to voice streams.  Bandwidth\n   efficiency,\
    \ in some places, is sacrificed in exchange for bandwidth\n   efficiency for individual\
    \ voice calls.  For example, when\n   transmitting a voice stream compressed to\
    \ 8 kbit/s with a 20 ms\n   packetization, each data packet consists of 20 bytes.\
    \  IAX adds 20%\n   overhead, 4 bytes, on the majority of voice packets while\
    \ RTP adds\n   60% overhead with 12 additional bytes per voice packet.\n   In\
    \ addition to efficiency, IAX's single static UDP port approach\n   makes IAX\
    \ traffic easy for network managers to shape, prioritize, and\n   pass through\
    \ firewalls.  IAX's basic structure is that it multiplexes\n   signaling and multiple\
    \ media streams over a single UDP stream between\n   two computers.  IAX also\
    \ uses the same UDP port for both its\n   signaling and media messages, and because\
    \ all communications\n   regarding a call are done over a the same point-to-point\
    \ path, NAT\n   traversal is much simpler for IAX than for other commonly deployed\n\
    \   protocols.\n"
- title: 1.2.  Drawbacks
  contents:
  - "1.2.  Drawbacks\n   While IAX is very effective, addressing many of today's\n\
    \   communications needs, it does have a few limitations.  For instance,\n   IAX\
    \ uses a point-to-point codec negotiation mechanism that limits\n   extensibility\
    \ because every IAX node in a call path must support\n   every used codec to some\
    \ degree.  In addition, the codec definition\n   is controlled by an internally\
    \ defined 32-bit mask, so the codecs\n   must be defined in the protocol, and\
    \ the maximum number of\n   simultaneous codecs is, therefore, limited.\n   One\
    \ of IAX's design strengths also presents a potential problem.  The\n   use of\
    \ a single, well-known, port makes the protocol an easier target\n   for denial-of-service\
    \ attacks.  Real-time systems like VoIP are\n   particularly sensitive to these\
    \ attacks.\n   The protocol is typically deployed with all signaling and media\
    \ going\n   to a centralized server.  While this combined path approach provides\n\
    \   a great deal of control, it limits the overall system scalability.\n   IAX\
    \ now provides the ability to split the media from the signaling\n   stream, which\
    \ overcomes this limitation of earlier IAX versions.\n   Most IAX drawbacks are\
    \ due to implementation issues rather than\n   protocol issues.  Threading presents\
    \ a series of problems.  Many\n   implementations have a limited number of threads\
    \ available to process\n   IAX traffic and can become overwhelmed by high use\
    \ or denial-of-\n   service attacks.  Newer implementations have additional controls\
    \ to\n   minimize the impact of these challenges.\n"
- title: 2.  IAX Terminology
  contents:
  - "2.  IAX Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n   Additionally, this document uses the following terminology:\n\
    \   Peer:  A host or device that implements the IAX protocol.\n   Call:  A call\
    \ is a relationship between two or more parties (i.e.,\n      resources such as\
    \ devices, user agents, or programs) that exists\n      for some time for the\
    \ purpose of exchanging real-time media.  In\n      the context of this document,\
    \ a call is an end-to-end relationship\n      where at least the one leg of call\
    \ path is implemented using the\n      IAX protocol.\n   Calling Party:  A device\
    \ or program that initiates a call.\n   Called Party:  A device or program to\
    \ which a call is directed.\n   Context:  A context is a named partition of a\
    \ Dialplan.\n   Dialplan:  A Dialplan is a set of rules for associating provided\n\
    \      names and numbers with a particular called party.\n   Frame:  The atomic\
    \ communication unit between two IAX peers.  All IAX\n      messages are carried\
    \ within frames.\n   Information Element (IE):  A discrete data unit appended\
    \ to an IAX\n      frame that specifies user- or call-specific data.\n   Registrant:\
    \  A registrant is a peer that makes REGISTER requests in\n      order to advertise\
    \ the address of a resource, i.e., a device or\n      program to which a call\
    \ may be directed.\n   Registrar:  A registrar is a peer that processes REGISTER\
    \ requests\n      and places the information it receives in those requests into\
    \ the\n      location service.  [RFC3261].\n"
- title: 3.  Overview of IAX Protocol
  contents:
  - "3.  Overview of IAX Protocol\n   IAX is a peer-to-peer, VoIP-oriented protocol.\
    \  IAX includes both\n   control and media functions.  It can register locations,\
    \ create,\n   modify, terminate multimedia sessions, and carry the actual media\n\
    \   streams specified by the sessions it manages.  The protocol is\n   designed\
    \ and optimized for describing and transporting multimedia\n   calls using Internet\
    \ Protocol.  This document describes Version 2 of\n   IAX; Version 1, although\
    \ somewhat similar in design, utilized a\n   different port and was not widely\
    \ deployed.\n   The basic design approach for IAX multiplexes signaling and multiple\n\
    \   media streams over a single UDP association between two hosts.  This\n   is\
    \ accomplished by using the same \"well-known\" UDP port, 4569, for\n   all types\
    \ of IAX traffic.  IAX's unified signaling and media paths\n   achieve NAT transparency,\
    \ which is an advantage of IAX over\n   alternative media transport protocols\
    \ such as SIP [RFC3261].\n   IAX is coded as a binary protocol.  One major benefit\
    \ of using a\n   binary protocol is bandwidth efficiency because the quality of\
    \ voice\n   calls is frequently related to the amount of bandwidth consumed.\n\
    \   This is one way the protocol is specifically optimized to make\n   efficient\
    \ use of bandwidth for individual voice calls.  The bandwidth\n   efficiency for\
    \ other stream types is sacrificed for the sake of\n   individual voice calls.\
    \  Other benefits of a binary protocol are\n   robustness against buffer-overrun\
    \ attacks, and compact implementation\n   capability, which reduces interoperability\
    \ issues related to parsing.\n   The atomic communication unit in IAX is the \"\
    Frame\".  There are\n   multiple classes of Frames, each of which is described\
    \ below.  In\n   general, \"Full Frames\" carry signaling/control data, while\
    \ \"Mini\n   Frames\" carry media stream data.  Full Frames enclose optional\n\
    \   'Information Elements' (IEs).  IEs describe various types of user- or\n  \
    \ call-specific data.  \"Meta Frames\" are used for call trunking or\n   video\
    \ stream transmission.\n   An IAX-based call may consist of many call legs, or\
    \ segments.  Each\n   call leg may be implemented using different protocols, e.g.,\
    \ SIP to\n   IAX to ISDN (Integrated Services Digital Network).  IAX is\n   responsible\
    \ for setting up one or more legs of a complete call path,\n   not necessarily\
    \ the end-to-end call.\n   IAX is an optimized peer-to-peer protocol.  If two\
    \ adjacent call legs\n   utilize the IAX protocol and if the intermediate peer\
    \ determines that\n   it does not need to remain in the call path, it can supervise\
    \ a\n   calling path change such that it removes itself from the path.  This\n\
    \   supervision is complete, a call path is not changed until all peers\n   in\
    \ the optimized call path confirm they can properly communicate.\n   IAX supports\
    \ security features by allowing multiple methods of user\n   authentication and\
    \ authorization, as well as allowing multiple\n   security methods for peer registration.\
    \  IAX also specifies a generic\n   framework for native encryption.\n"
- title: 4.  Naming Conventions
  contents:
  - "4.  Naming Conventions\n   Call Identifier:  A call leg is marked with two unique\
    \ integers, one\n      assigned by each peer involved in creating the call leg.\n\
    \   Number:  The Calling and Called Numbers are a set of digits and\n      letters\
    \ identifying a call originator and the desired terminating\n      resource. \
    \ The term 'Number' is historic and has been expanded to\n      include letters.\
    \  A peer is responsible for defining its own\n      dialplan.  A peer MAY define\
    \ its dialplan according to ITU-T\n      Recommendation E.164 [E164].  However,\
    \ this is not required.\n   Username:  A username is a string used for identification\
    \ purposes.\n"
- title: 5.  IAX Uniform Resource Identifiers
  contents:
  - '5.  IAX Uniform Resource Identifiers

    '
- title: 5.1.  IAX URI Scheme Registration
  contents:
  - "5.1.  IAX URI Scheme Registration\n   This section registers IAX according to\
    \ the guidelines in [RFC4395].\n   URI scheme name:\n      iax.\n   Status:\n\
    \      Permanent.\n   URI scheme syntax:\n      The \"iax:\" scheme follows the\
    \ guidelines in [RFC3986].\n      The general form is as follows:\n         iax:[username@]host[:port][/number[?context]]\n\
    \         where these tokens have the following meanings:\n         iax:  The\
    \ literal 'iax:'.\n         username:  A string used for identification purposes.\n\
    \         host:  The domain of the resource.  The host part contains\n       \
    \     either a fully-qualified domain name or numeric IPv4 or IPv6\n         \
    \   address.  An IPv6 address must be enclosed within brackets\n            (i.e.,\
    \ '[2001:db8::1]') as defined in [RFC3986].  Using the\n            fully-qualified\
    \ domain name form is RECOMMENDED whenever\n            possible.\n         port:\
    \  The numeric UDP port number.\n         number:  The name or number identifying\
    \ the resource on that\n            host.\n         context:  The name of the\
    \ host partition in which the service\n            is identified or processed.\n\
    \      Examples\n         iax:example.com/alice\n         iax:example.com:4569/alice\n\
    \         iax:example.com:4570/alice?friends\n         iax:192.0.2.4:4569/alice?friends\n\
    \         iax:[2001:db8::1]:4569/alice?friends\n         iax:example.com/12022561414\n\
    \         iax:johnQ@example.com/12022561414\n      ABNF\n         Formal syntax\
    \ is defined using ABNF [RFC5234].  Certain values\n         are included by reference\
    \ from [RFC3986]:\n            iax-uri     = \"iax:\" [ userinfo \"@\" ] host\
    \ [ \":\" port ]\n                          [ \"/\" number [ \"?\" context ] ]\n\
    \            userinfo    = <as specified in RFC 3986>\n            host      \
    \  = <as specified in RFC 3986>\n            port        = <as specified in RFC\
    \ 3986>\n            number      = *(unreserved / sub-delims / pct-encoded )\n\
    \            context     = *(unreserved / sub-delims / pct-encoded )\n       \
    \     unreserved  = <as specified in RFC 3986>\n            sub-delims  = <as\
    \ specified in RFC 3986>\n            pct-encoded = <as specified in RFC 3986>\n\
    \   URI Scheme Semantics:\n      An IAX URI identifies a communications resource\
    \ capable of\n      communicating using the IAX Version 2 protocol defined in\
    \ this\n      document.  Within this document, we refer to IAX Version 2\n   \
    \   protocol URI as IAX.  An IAX URI contains enough information to\n      initiate\
    \ an IAX-based call with that resource.\n      IAX URIs are associated with server\
    \ resources to which calls may\n      be routed.  For instance, an IAX URI may\
    \ represent an appearance\n      on a phone, a voice-mail box on a messaging service,\
    \ an\n      interactive program, a Public Switched Telephone Network (PSTN)\n\
    \      address or gateway, or any group of the above.\n      The IAX URI scheme\
    \ translates into a location that may be used by\n      the IAX protocol to establish\
    \ a new call using the URI scheme\n      components described in the previous\
    \ section.  This new call\n      function is the only defined operation.\n   Encoding\
    \ considerations:\n      IAX URI scheme encoding conforms to the encoding rules\
    \ established\n      for URIs in [RFC3986].\n   Applications/protocols that use\
    \ this URI scheme name:\n      The scheme is used by ENUM Dynamic Delegation Discovery\
    \ System\n      (DDDS) services to specify resources that support the IAX\n  \
    \    protocol.  The IAX protocol provides application-layer control and\n    \
    \  media protocol for creating, modifying, and terminating multimedia\n      sessions\
    \ over Internet Protocol (IP) networks.\n   Interoperability considerations:\n\
    \      None.\n   Security considerations:\n      The IAX URI Scheme does not introduce\
    \ any new security concerns\n      except that it provides a uniform syntax for\
    \ describing IAX\n      resources and that, when published, these addresses are\
    \ subject to\n      various denial-of-service attacks.\n   Contact:\n      Ed\
    \ Guy, edguy@emcsw.com, +1.973.437.4519.\n   Author/Change controller\n      Not\
    \ Applicable.\n   References:\n      RFC 5456 (this document)\n"
- title: 5.2.  URI Comparison
  contents:
  - "5.2.  URI Comparison\n   Some operations in this specification require determining\
    \ whether two\n   IAX URIs are equivalent.  IAX URIs are compared for equality\n\
    \   according to the following rules:\n   All components of the URI MUST be identical\
    \ except:\n      The port, if omitted, is considered to be the same as the default,\n\
    \      4569.\n      All URI components, except the username field, are case\n\
    \      insensitive, and MUST be normalized to lower case as per Section\n    \
    \  6.2.2.1 of [RFC3986] before comparison.\n   The URIs within each of the following\
    \ sets are equivalent:\n   iax:atlanta.com/alice\n   iax:AtLaNtA.com/ALicE\n \
    \  iax:atlanta.com:4569/alice\n   iax:alice@atlanta.com/alice\n   iax:alice@AtLaNtA.com:4569/ALicE\n\
    \   The URIs within the following set are not equivalent:\n   iax:ALICE@atlanta.com/alice\n\
    \   iax:alice@atlanta.com/alice\n   NOTE: A host in domain form and in IP address\
    \ form are NOT considered\n   identical even if the host name resolves to an address\
    \ record that\n   matches the given IP address.\n"
- title: 6.  Peer Behavior and Related Messages
  contents:
  - "6.  Peer Behavior and Related Messages\n   Messages are divided into two categories:\
    \ reliable and non-\n   guaranteed.  The reliable messages are referred to as\
    \ \"Full Frames\".\n   In addition to a message type indicator and facilities\
    \ to ensure\n   reliability, see Section 7, they include the full call identifier.\n\
    \   It consists of each of peer's identifiers for the call.  Additional\n   attributes,\
    \ \"Information Elements\" or \"IEs\", may be associated with\n   the Full Frame\
    \ messages.\n   The non-guaranteed messages are referred to as \"Mini-Frames\"\
    \ and\n   \"Meta Frames\" and these more compact messages only have the\n   originating\
    \ peer's call identifier and MUST NOT have any \"Information\n   Elements\".\n\
    \   Peer behavior is presented in several partitions divided by the\n   following\
    \ functional areas:\n      Registration (OPTIONAL)\n      Call Link Management\n\
    \      Call Path Optimization (OPTIONAL)\n      Mid-Call Behavior\n      Call\
    \ Tear Down\n      Network Monitoring\n      Digit Dialing (OPTIONAL)\n      Miscellaneous\n\
    \      Media Messages\n   Each of these behavior topics and the messages involved\
    \ are described\n   in the sections that follow.\n"
- title: 6.1.  Registration (OPTIONAL)
  contents:
  - '6.1.  Registration (OPTIONAL)

    '
- title: 6.1.1.  Overview
  contents:
  - "6.1.1.  Overview\n   In order for one IAX peer to be reachable by another IAX\
    \ peer, the\n   calling peer needs the network address of the receiving peer.\
    \  This\n   address may be manually provisioned, determined through a shared\n\
    \   directory, e.g. an ENUM-like service, [RFC3761] or configured using\n   the\
    \ IAX protocol.  IAX provides a facility for one peer to register\n   its address\
    \ and credentials with another so that callers can reach\n   the registrant. \
    \ The IAX registration facility is optional.  If\n   implemented, the IAX registration\
    \ protocol MAY be done in parts,\n   e.g., an analog telephone adapter MAY only\
    \ implement the registrant\n   portion of the protocol.\n   IAX allows user authentication\
    \ via multiple methods.  MD5 Message-\n   Digest authentication [RFC1321] uses\
    \ an MD5 sum arrangement, but\n   still requires that both ends have plaintext\
    \ access to the secret.\n   (See Section 8.6.15.)  Rivest, Shamir, and Adleman's\
    \ (RSA) algorithm\n   [RFC3447] allows unidirectional secret knowledge through\
    \ public/\n   private key pairs.  IAX Private keys SHOULD always be Triple Data\n\
    \   Encryption Standard (3DES) encrypted [RFC1851].  (See\n   Section 8.6.16.)\n\
    \                         ________________\n                        |        \
    \        |\n                        |  Unregistered  |<--------------------------\\\
    \n                        |________________|                           |\n   \
    \                             |                                    |\n       \
    \           /Init         |                                    |\n           \
    \       ------------  |                                    |\n               \
    \   snd REGREQ    |    +--------+                      |\n                   \
    \             |    |        | rec REGAUTH          |\n                       \
    \  _______V____V___     | -----------          |\n                        |  \
    \              |    | snd REGREQ           |\n                        |   Reg\
    \ Sent     +----+                      |\n                        |________________+----------+\
    \                |\n                                |    ^              | rec\
    \ REGAUTH    |\n                   rec REGACK   |    |              | /No Credentials|\n\
    \                  ------------  |    | REG timeout  | -------------- |\n    \
    \               snd ack      |    | -------      | snd ack        |\n        \
    \                        |    | REGREQ     __V___             |\n            \
    \             _______V____|___        |      |            |\n                \
    \        |                |       |  No  |            |\n                    \
    \    |   Registered   |       | Auth |            |\n                        |________________|\
    \       |______|            |\n                                |             \
    \      ^                |\n                                |                 \
    \  | rec REGAUTH    |\n                                | release           | /No\
    \ Credentials|\n                                | -------           | --------------\
    \ |\n                  +-------+     | snd REGREL        | snd ack        |\n\
    \     rec REGAUTH  |       |     |                   |                |\n    \
    \ -----------  |      _V_____V________           |                |\n     snd\
    \ REGREL   |     |                |----------+                |\n            \
    \      +-----+   Releasing    |---------------------------+\n                \
    \        |________________|      rec ACK\n                                   \
    \             -------\n                                                   x\n\
    \                     __________\n    rec  REGREJ     |          |\n    ----------\
    \   *->| Rejected |\n    snd   ack       |__________|\n                    Figure\
    \ 1: Registrant State Diagram\n   Registration, illustrated in Figure 1, is performed\
    \ by a registrant\n   that sends a username and a registration 'refresh' period\
    \ to the\n   registrar.  This is accomplished with a REGREQ message.  If\n   authentication\
    \ is required, the registrar responds with the REGAUTH\n   message that indicates\
    \ the types of authentication supported by the\n   registrar.  In response, the\
    \ registrant resends a REGREQ with one of\n   the supported authentications. \
    \ If the registrant cannot\n   authenticate, no further action is necessary. \
    \ If accepted, the\n   registrar sends a REGACK message, which MUST indicate the\
    \ 'apparent\n   address' and SHOULD indicate the 'refresh'/expire time.  If no\n\
    \   'refresh' is sent, a default registration expiration of 60 seconds\n   MUST\
    \ be assumed by both peers.  At any time during this exchange, the\n   registrar\
    \ may send a REGREJ message to indicate a failure.\n   A registration has a specified\
    \ time period associated with it for\n   which it is valid.  This time period\
    \ begins when the registrar sends\n   a REGACK message.  A registrant may extend\
    \ that time period by\n   repeating the registration process.  A registrant MAY\
    \ also force an\n   expiration in the registrar by sending the REGREL message.\
    \  This\n   message may be challenged with REGAUTH or, if sufficient credentials\n\
    \   were included, it will be accepted with REGACK.  In response to a\n   REGAUTH,\
    \ a REGREL message SHOULD be resent using the specified\n   credentials.\n   See\
    \ Sections 9.3 and 9.4 for example call flows.\n"
- title: 6.1.2.  REGREQ Registration Request Message
  contents:
  - "6.1.2.  REGREQ Registration Request Message\n   The REGREQ occurs independently\
    \ of any media-carrying call.  A REGREQ\n   MUST include the 'username' IE and\
    \ SHOULD include the 'refresh' IE.\n   A REGREQ is used both for an initial registration\
    \ request as well as\n   for a reply to a REGAUTH.  As a reply to a REGAUTH message,\
    \ it MUST\n   include credentials such as a response to a REGAUTH's challenge.\n\
    \   Upon receipt of a REGREQ message that has credentials, a registrar\n   MUST\
    \ determine their validity.  If valid, it MUST respond with a\n   REGACK message\
    \ indicating the time period for which this registration\n   is valid.  If the\
    \ provided credentials are not valid or the registrar\n   cannot validate the\
    \ credentials, the registrar MUST respond with a\n   REGREJ message.  If credentials\
    \ are not provided, the registrar MUST\n   respond with a REGAUTH message that\
    \ indicates the available\n   authentication methods.\n   Registrants MUST implement\
    \ this message and registrars MUST be able\n   to process it.\n   The following\
    \ table specifies IEs for this message:\n        +------------+----------------+-------------+-------------+\n\
    \        | IE         | Section        | Status      | Comments    |\n       \
    \ +------------+----------------+-------------+-------------+\n        | Username\
    \   | Section 8.6.6  | Required    |             |\n        |            |   \
    \             |             |             |\n        | MD5 Result | Section 8.6.15\
    \ | Conditional | per REGAUTH |\n        |            |                |     \
    \        |             |\n        | RSA Result | Section 8.6.16 | Conditional\
    \ | per REGAUTH |\n        |            |                |             |     \
    \        |\n        | Refresh    | Section 8.6.18 | Optional    |            \
    \ |\n        +------------+----------------+-------------+-------------+\n"
- title: 6.1.3.  REGAUTH Registration Authentication Response Message
  contents:
  - "6.1.3.  REGAUTH Registration Authentication Response Message\n   A REGAUTH is\
    \ a response to a REGREQ or REGREL.  It is sent when a\n   registrar requires\
    \ authentication to permit registration.  A REGAUTH\n   message MUST include the\
    \ 'authentication methods' and 'username' IEs,\n   and the 'MD5 challenge' or\
    \ 'RSA challenge' IE if the authentication\n   methods include MD5 or RSA.\n \
    \  Upon receipt of a REGAUTH message, the registrant MUST resend the\n   REGREQ\
    \ or REGREL message with one of the requested credentials, if it\n   has the specified\
    \ credentials.\n   Registrars MUST implement this message and registrants MUST\
    \ be able\n   to process it.\n   The following table specifies IEs for this message:\n\
    \      +--------------+----------------+-------------+---------------+\n     \
    \ | IE           | Section        | Status      | Comments      |\n      +--------------+----------------+-------------+---------------+\n\
    \      | Username     | Section 8.6.6  | Required    |               |\n     \
    \ |              |                |             |               |\n      | Auth\
    \ Methods | Section 8.6.13 | Required    |               |\n      |          \
    \    |                |             |               |\n      | Challenge    |\
    \ Section 8.6.14 | Conditional | If RSA or MD5 |\n      +--------------+----------------+-------------+---------------+\n"
- title: 6.1.4.  REGACK Registration Acknowledgment Message
  contents:
  - "6.1.4.  REGACK Registration Acknowledgment Message\n   A REGACK is sent in response\
    \ to a REGREQ.  A REGACK typically\n   includes the 'refresh' IE specifying the\
    \ number of seconds before the\n   registration will expire.  If the 'refresh'\
    \ IE is not included with a\n   REGACK, a default registration expiration of 60\
    \ seconds MUST be\n   assumed.  A REGACK MAY also include the 'username' and 'apparent\n\
    \   address' IEs to indicate how the peer identifies the registrant.  IEs\n  \
    \ related to caller identification or the time the registration\n   occurred MAY\
    \ be sent as well.\n   Receipt of a REGACK message requires an ACK in response.\n\
    \   Registrars MUST be able to send this message and registrants MUST be\n   able\
    \ to process it.\n   The following table specifies IEs for this message:\n   \
    \     +------------------+----------------+----------+----------+\n        | IE\
    \               | Section        | Status   | Comments |\n        +------------------+----------------+----------+----------+\n\
    \        | Username         | Section 8.6.6  | Required |          |\n       \
    \ |                  |                |          |          |\n        | Date\
    \ Time        | Section 8.6.28 | Required |          |\n        |            \
    \      |                |          |          |\n        | Apparent Address |\
    \ Section 8.6.17 | Required |          |\n        |                  |       \
    \         |          |          |\n        | Message Count    | Section 8.6.23\
    \ | Optional |          |\n        |                  |                |     \
    \     |          |\n        | Calling Number   | Section 8.6.2  | Optional | \
    \         |\n        |                  |                |          |        \
    \  |\n        | Calling Name     | Section 8.6.4  | Optional |          |\n  \
    \      |                  |                |          |          |\n        |\
    \ Refresh          | Section 8.6.18 | Optional |          |\n        +------------------+----------------+----------+----------+\n"
- title: 6.1.5.  REGREJ Registration Rejection Message
  contents:
  - "6.1.5.  REGREJ Registration Rejection Message\n   A REGREJ indicates that a registration\
    \ request has been rejected.\n   This rejection can occur for several reasons.\
    \  A REGREJ MUST include\n   the 'causecode' and 'cause' IEs to specify why registration\
    \ was\n   rejected.\n   Upon receipt of a REGREJ message, the registrant MUST\
    \ consider\n   registration process unsuccessful and no further interaction is\n\
    \   required.  A peer MAY reinitiate the process at later time accounting\n  \
    \ for potential configuration changes on the registrar or registrant.\n   Both\
    \ registrants and registrars MUST be capable of sending and\n   processing this\
    \ message.\n   The following table specifies IEs for this message:\n         \
    \  +------------+----------------+----------+----------+\n           | IE    \
    \     | Section        | Status   | Comments |\n           +------------+----------------+----------+----------+\n\
    \           | Cause      | Section 8.6.21 | Required |          |\n          \
    \ |            |                |          |          |\n           | Cause Code\
    \ | Section 8.6.33 | Required |          |\n           +------------+----------------+----------+----------+\n"
- title: 6.1.6.  REGREL Registration Release Request Message
  contents:
  - "6.1.6.  REGREL Registration Release Request Message\n   A REGREL is used by a\
    \ registrant for a forced release of a prior\n   registration.  It MUST include\
    \ the 'username' IE to identify the\n   registrant to be released, and MAY include\
    \ the 'causecode' and\n   'cause' IEs to specify why registration is being released.\n\
    \   Upon receipt of this message, a peer MUST authenticate the sender\n   using\
    \ the provided credentials or send a REGAUTH message requesting\n   them.  If\
    \ authenticated, it MUST immediately purge its registration\n   of the specified\
    \ registrant or send a REGREJ message if the\n   registration is not found.\n\
    \   Registrants SHOULD be capable of sending this message and registrars\n   MUST\
    \ be able to process it.\n   The following table specifies IEs for this message:\n\
    \   +----------+----------------+-------------+-------------------------+\n  \
    \ | IE       | Section        | Status      | Comments                |\n   +----------+----------------+-------------+-------------------------+\n\
    \   | Username | Section 8.6.6  | Required    |                         |\n  \
    \ |          |                |             |                         |\n   |\
    \ MD5      | Section 8.6.15 | Conditional | MD5 or RSA Result is    |\n   | Result\
    \   |                |             | required                |\n   |         \
    \ |                |             |                         |\n   | RSA      |\
    \ Section 8.6.16 | Conditional |                         |\n   | Result   |  \
    \              |             |                         |\n   |          |    \
    \            |             |                         |\n   | Cause    | Section\
    \ 8.6.21 | Optional    |                         |\n   |          |          \
    \      |             |                         |\n   | Cause    | Section 8.6.33\
    \ | Optional    |                         |\n   | Code     |                |\
    \             |                         |\n   +----------+----------------+-------------+-------------------------+\n"
- title: 6.2.  Call Leg Management
  contents:
  - "6.2.  Call Leg Management\n                                          +--------+\
    \  HANGUP/ack\n                                          |        |\n        \
    \                     _____________|__      |\n                            | \
    \               |     |\n                 +--------->|    Initial     |<----+\n\
    \                 |          |________________|<---------------------+\n     \
    \            |                  |                               ^\n          \
    \       |       start call |                               |\n               \
    \  |       ---------- |                               |\n                 |  \
    \     send NEW   |  +-------+                    |\n                 |       \
    \           |  |       |  rec AUTHREQ       |\n                 |            \
    \ _____V__V__     |  -----------       |\n                 |            |    \
    \       |    |  snd AUTHREP       |\n                 +------------|  Waiting\
    \  |----+                    |\n         rec REJECT           |___________|------------------------>+\n\
    \         ----------                  |                              |\n     \
    \      ack                       |              rec HANGUP      |\n          \
    \                           |              ---------       |\n               \
    \                      |              snd ack         |\n                    \
    \                 |                              |\n                       rec\
    \ ACCEPT    |                              |\n                       ----------\
    \    |   +------+                   |\n                       snd ack       |\
    \   |      | PROCEEDING / ack  |\n                            _________V___V \
    \     | RINGING / ack     |\n                           |              |     |\
    \                   |\n                           |     Linked   |-----+     \
    \              |\n                           |______________|------------------------>+\n\
    \                                    |               rec HANGUP      |\n     \
    \                  rec ANSWER   |               ----------      |\n          \
    \             -----------  |               snd ack         |\n               \
    \        snd ack      |                               |\n                    \
    \                |                               |\n                         \
    \           |               rec HANGUP      |\n                             _______V________\
    \       ---------       |\n                            |                |    \
    \  snd ack         |\n                            |      UP        |--------------------->+\n\
    \                            |________________|--------------------->+\n     \
    \                                               finish\n                     \
    \                               ------\n                                     \
    \               snd HANGUP\n                 Figure 2: Call Origination State\
    \ Diagram\n                                 +--------+ rec HANGUP/ack\n      \
    \                           |        |\n                    _____________V__ \
    \     | rec NEW(no Auth)/snd AUTHREQ\n                   |                |  \
    \   |\n                   |    Initial     |-----+ rec NEW(not Auth)/snd REJECT\n\
    \                   |                |\n                   |________________|<--------------------+\n\
    \                           |                              |\n             rec\
    \ NEW       |                              |\n        (valid credentials)|   \
    \                           |\n             ----------    |   +------+       \
    \            |\n             snd ACCEPT    |   |      | snd PROCEEDING    |\n\
    \                  _________V___V      | snd RINGING       |\n               \
    \  |              |     |                   |\n                 |     Linked \
    \  |-----+                   |\n                 |              |\n          \
    \       |______________|------------------------>+\n                         \
    \ |               rec HANGUP      |\n              /answered   |             \
    \  ----------      |\n             -----------  |               snd ack      \
    \   |\n             snd ANSWER   |                               |\n         \
    \                 |               rec HANGUP      |\n                   _______V________\
    \       ---------       |\n                  |                |       snd ack\
    \        |\n                  |      UP        |--------------------->+\n    \
    \              |________________|--------------------->+\n                   \
    \                       finish\n                                          ------\n\
    \                                          snd HANGUP\n                 Figure\
    \ 3: Call Termination State Diagram\n"
- title: 6.2.1.  Overview
  contents:
  - "6.2.1.  Overview\n   The IAX protocol can be used to set up 'links' or 'call\
    \ legs' between\n   two peers for the purposes of placing a call.  The process,\n\
    \   illustrated in Figure 2 and Figure 3, starts when a peer sends a NEW\n   message\
    \ indicating the destination 'number' (or name) of a Called\n   Party on the remote\
    \ peer.  The remote peer can respond with either a\n   credentials challenge (AUTHREQ),\
    \ a REJECT message, or an ACCEPT\n   message.  The AUTHREQ message indicates the\
    \ permitted authentication\n   schemes and SHOULD result in the sending of an\
    \ AUTHREP message with\n   the requested credentials.  The REJECT message indicates\
    \ the call\n   cannot be established at this time.  ACCEPT indicates that the\
    \ call\n   leg between these two peers is established and that higher-level call\n\
    \   signaling (Section 6.3) MAY proceed.  After sending or receiving the\n   ACCEPT\
    \ message, the call leg is in the 'Linked' state and is used to\n   pass call\
    \ control messages until the call is completed.  Further\n   detail on messages\
    \ used for this process can be found in Section 6.3.\n   Call legs are labeled\
    \ with a pair of identifiers.  Each end of the\n   call leg assigns the source\
    \ or destination identifier during the call\n   leg creation process.\n"
- title: 6.2.2.  NEW Request Message
  contents:
  - "6.2.2.  NEW Request Message\n   A NEW message is sent to initiate a call.  It\
    \ is the first call-\n   specific message sent to initiate an actual media exchange\
    \ between\n   two peers.  'NEW' messages are unique compared to other Call\n \
    \  Supervision messages in that they do not require a destination call\n   identifier\
    \ in their header.  This absence is because the remote\n   peer's source call\
    \ identifier is not created until after receipt of\n   this frame.  Before sending\
    \ a NEW message, the local IAX peer MUST\n   assign a source call identifier that\
    \ is not currently being used for\n   another call.  A time-stamp MUST also be\
    \ assigned for the call,\n   beginning at zero and incrementing by one each millisecond.\
    \  Sequence\n   numbers for a NEW message, described in the transport section,\n\
    \   (Section 7) are both set to 0.\n   A NEW message MUST include the 'version'\
    \ IE, and it MUST be the first\n   IE; the order of other IEs is unspecified.\
    \  A NEW SHOULD generally\n   include IEs to indicate routing on the remote peer,\
    \ e.g., via the\n   'called number' IE or to indicate a peer partition or ruleset,\
    \ the\n   'called context' IE.  Caller identification and CODEC negotiation IEs\n\
    \   MAY also be included.\n   Upon receipt of a NEW message, the receiving peer\
    \ examines the\n   destination and MUST perform one of the following actions:\n\
    \      Send a REJECT response,\n      Challenge the caller with an AUTHREQ response,\n\
    \      Accept the call using an ACCEPT message, or\n      Abort the connection\
    \ using a HANGUP message, although the REJECT\n      message is preferred at this\
    \ point in call.\n   If the call is accepted, the peer MUST progress the call\
    \ and further\n   respond with one of PROCEEDING, RINGING, BUSY, or ANSWER depending\
    \ on\n   the status of the called party on the peer.  See Section 6.3 for\n  \
    \ further details.\n   The following table specifies IEs for the NEW message:\n\
    \   +--------------+----------------+-------------+---------------------+\n  \
    \ | IE           | Section        | Status      | Comments            |\n   +--------------+----------------+-------------+---------------------+\n\
    \   | Version      | Section 8.6.10 | Required    |                     |\n  \
    \ |              |                |             |                     |\n   |\
    \ Called       | Section 8.6.1  | Required    |                     |\n   | Number\
    \       |                |             |                     |\n   |         \
    \     |                |             |                     |\n   | Auto Answer\
    \  | Section 8.6.24 | Optional    |                     |\n   |              |\
    \                |             |                     |\n   | Codecs Prefs | Section\
    \ 8.6.35 | Required    |                     |\n   |              |          \
    \      |             |                     |\n   | Calling      | Section 8.6.29\
    \ | Required    |                     |\n   | Presentation |                |\
    \             |                     |\n   |              |                |  \
    \           |                     |\n   | Calling      | Section 8.6.2  | Optional\
    \    |                     |\n   | Number       |                |           \
    \  |                     |\n   |              |                |             |\
    \                     |\n   | Calling TON  | Section 8.6.30 | Required    |  \
    \                   |\n   |              |                |             |    \
    \                 |\n   | Calling TNS  | Section 8.6.31 | Required    |      \
    \               |\n   |              |                |             |        \
    \             |\n   | Calling Name | Section 8.6.4  | Optional    |          \
    \           |\n   |              |                |             |            \
    \         |\n   | ANI          | Section 8.6.3  | Optional    |              \
    \       |\n   |              |                |             |                \
    \     |\n   | Language     | Section 8.6.9  | Optional    |                  \
    \   |\n   |              |                |             |                    \
    \ |\n   | DNID         | Section 8.6.12 | Optional    |                     |\n\
    \   |              |                |             |                     |\n  \
    \ | Called       | Section 8.6.5  | Conditional | 'Default' assumed   |\n   |\
    \ Context      |                |             | if IE excluded      |\n   |  \
    \            |                |             |                     |\n   | Username\
    \     | Section 8.6.6  | Optional    |                     |\n   |           \
    \   |                |             |                     |\n   | RSA Result  \
    \ | Section 8.6.16 | Conditional | If challenged with  |\n   |              |\
    \                |             | RSA                 |\n   |              |  \
    \              |             |                     |\n   | MD5 Result   | Section\
    \ 8.6.15 | Conditional | If challenged with  |\n   |              |          \
    \      |             | MD5                 |\n   |              |            \
    \    |             |                     |\n   | Format       | Section 8.6.8\
    \  | Required    |                     |\n   |              |                |\
    \             |                     |\n   | Capability   | Section 8.6.7  | Conditional\
    \ |                     |\n   |              |                |             |\
    \                     |\n   | ADSICPE      | Section 8.6.11 | Optional    |  \
    \                   |\n   |              |                |             |    \
    \                 |\n   | Date Time    | Section 8.6.28 | Optional    | Suggested\
    \           |\n   |              |                |             |            \
    \         |\n   | Encryption   | Section 8.6.34 | Optional    |              \
    \       |\n   |              |                |             |                \
    \     |\n   | OSP Token    | Section 8.6.42 | Optional    |                  \
    \   |\n   +--------------+----------------+-------------+---------------------+\n"
- title: 6.2.3.  ACCEPT Response Message
  contents:
  - "6.2.3.  ACCEPT Response Message\n   An ACCEPT response is issued when a NEW message\
    \ is received, and\n   authentication has taken place (if required).  It acknowledges\n\
    \   receipt of a NEW message and indicates that the call leg has been set\n  \
    \ up on the terminating side, including assigning a CODEC.  An ACCEPT\n   message\
    \ MUST include the 'format' IE to indicate its desired CODEC to\n   the originating\
    \ peer.  The CODEC format MUST be one of the formats\n   sent in the associated\
    \ NEW command.\n   Upon receipt of an ACCEPT, an ACK MUST be sent and the CODEC\
    \ for the\n   call MAY be configured using the 'format' IE from the received\n\
    \   ACCEPT.  The call then waits for an ANSWER, HANGUP, or other call\n   control\
    \ signal.  (See Section 6.3.)  If a subsequent ACCEPT message\n   is received\
    \ for a call that has already started, or has not sent a\n   NEW message, the\
    \ message MUST be ignored.\n   The following table specifies IEs for this message:\n\
    \             +--------+---------------+----------+----------+\n             |\
    \ IE     | Section       | Status   | Comments |\n             +--------+---------------+----------+----------+\n\
    \             | Format | Section 8.6.8 | Required |          |\n             +--------+---------------+----------+----------+\n"
- title: 6.2.4.  REJECT Response Message
  contents:
  - "6.2.4.  REJECT Response Message\n   A REJECT response is sent to indicate that\
    \ a NEW, AUTHREP, DIAL, or\n   ACCEPT request has been denied.  It MAY be due\
    \ to an authentication\n   failure, an invalid username, or if a peer cannot provide\
    \ a valid\n   password or response to an issued challenge.  It MAY also be used\
    \ to\n   notify a peer of a call setup failure, e.g., when IAX peers cannot\n\
    \   negotiate a CODEC to use.  Upon receipt of a REJECT message, the call\n  \
    \ leg is destroyed and no further action is required.  (Note: REJECT\n   messages\
    \ require an explicit ACK.)\n   REJECT messages MAY include the 'causecode' and\
    \ 'cause' IEs to\n   indicate the rejection reason.\n   The following table specifies\
    \ IEs for this message:\n           +------------+----------------+----------+----------+\n\
    \           | IE         | Section        | Status   | Comments |\n          \
    \ +------------+----------------+----------+----------+\n           | Cause  \
    \    | Section 8.6.21 | Optional |          |\n           |            |     \
    \           |          |          |\n           | Cause Code | Section 8.6.33\
    \ | Optional |          |\n           +------------+----------------+----------+----------+\n"
- title: 6.2.5.  HANGUP Request Message
  contents:
  - "6.2.5.  HANGUP Request Message\n   A HANGUP message is sent by either peer and\
    \ indicates a call tear-\n   down.  It MAY include the 'causecode' and 'cause'\
    \ IEs to indicate the\n   reason for terminating the call.  Upon receipt of a\
    \ HANGUP message,\n   an IAX peer MUST immediately respond with an ACK, and then\
    \ destroy\n   the call leg at its end.  After a HANGUP message has been received\n\
    \   for a call leg, any messages received that reference that call leg\n   (i.e.,\
    \ have the same source/destination call identifiers) MUST be\n   answered with\
    \ an INVAL message.  This indicates that the received\n   message is invalid because\
    \ the call no longer exists.\n   After sending a HANGUP message, the sender MUST\
    \ destroy the call and\n   respond to subsequent messages regarding this call\
    \ with an INVAL\n   message.\n   The following table specifies IEs for this message:\n\
    \           +------------+----------------+----------+----------+\n          \
    \ | IE         | Section        | Status   | Comments |\n           +------------+----------------+----------+----------+\n\
    \           | Cause      | Section 8.6.21 | Optional |          |\n          \
    \ |            |                |          |          |\n           | Cause Code\
    \ | Section 8.6.33 | Optional |          |\n           +------------+----------------+----------+----------+\n"
- title: 6.2.6.  AUTHREP Authentication Reply Message
  contents:
  - "6.2.6.  AUTHREP Authentication Reply Message\n   An AUTHREP MUST include the\
    \ appropriate challenge response or\n   password IE, and is only sent in response\
    \ to an AUTHREQ.  An AUTHREP\n   requires a response of either an ACCEPT or a\
    \ REJECT.\n   Typical reasons for rejecting an AUTHREP include 'destination does\n\
    \   not exist' and 'suitable bearer not found'.\n   The following table specifies\
    \ IEs for this message:\n         +------------+----------------+-------------+----------+\n\
    \         | IE         | Section        | Status      | Comments |\n         +------------+----------------+-------------+----------+\n\
    \         | RSA Result | Section 8.6.16 | Conditional | If RSA   |\n         |\
    \            |                |             |          |\n         | MD5 Result\
    \ | Section 8.6.15 | Conditional | If MD5   |\n         +------------+----------------+-------------+----------+\n"
- title: 6.2.7.  AUTHREQ Authentication Request Message
  contents:
  - "6.2.7.  AUTHREQ Authentication Request Message\n   The AUTHREQ message is sent\
    \ in response to a NEW message if\n   authentication is required for the call\
    \ to be accepted.  It MUST\n   include the 'authentication methods' and 'username'\
    \ IEs, and the\n   'challenge' IE if MD5 or RSA authentication is specified.\n\
    \   Upon receiving an AUTHREQ message, the receiver MUST respond with an\n   AUTHREP\
    \ or HANGUP message.\n   The following table specifies IEs for this message:\n\
    \          +--------------+----------------+----------+----------+\n         \
    \ | IE           | Section        | Status   | Comments |\n          +--------------+----------------+----------+----------+\n\
    \          | Username     | Section 8.6.6  | Required |          |\n         \
    \ |              |                |          |          |\n          | Auth Methods\
    \ | Section 8.6.13 | Required |          |\n          |              |       \
    \         |          |          |\n          | Challenge    | Section 8.6.14 |\
    \ Required |          |\n          +--------------+----------------+----------+----------+\n"
- title: 6.3.  Call Control
  contents:
  - '6.3.  Call Control

    '
- title: 6.3.1.  Overview
  contents:
  - "6.3.1.  Overview\n   IAX's call control messages provide end-to-end signaling\
    \ functions\n   common to other telephony control protocols.  The messages include\n\
    \   RINGING, ANSWER, BUSY, and PROCEEDING.  These messages MUST only be\n   sent\
    \ after an IAX call leg has been ACCEPTed.\n   In response to an exchange starting\
    \ with a NEW message, typically,\n   the first call control message is RINGING;\
    \ however, a PROCEEDING\n   message MAY precede it or the call MAY proceed directly\
    \ to the ANSWER\n   message.  If the call is answered, an ANSWER message will\
    \ be sent.\n   Other possibilities include a \"BUSY\" indication, or if the called\n\
    \   party's service cannot be reached, the call will be torn down using\n   the\
    \ link-level HANGUP and an appropriate cause code.\n   If the link was started\
    \ with a DIAL message, the sequence is an\n   optional PROCEEDING, then optional\
    \ RINGING, then ANSWER or BUSY.  Of\n   course, a link level HANGUP MAY occur\
    \ at any time.\n   Various private extensions to IAX Control messages have been\
    \ deployed\n   for passing application-specific data over the IAX control link.\
    \  One\n   such extension is an application that controls ham radio\n   transceivers.\
    \  An IAX peer that receives a control message that is\n   not understood MUST\
    \ respond with the UNSUPPORT message.\n   The mandatory IAX control messages are\
    \ explained below.\n"
- title: 6.3.2.  PROCEEDING Response Message
  contents:
  - "6.3.2.  PROCEEDING Response Message\n   The PROCEEDING message SHOULD be sent\
    \ to a calling party when their\n   call request is being processed by a further\
    \ network element but has\n   not yet reached the called party.\n   Upon receipt\
    \ of a PROCEEDING message, the peer SHOULD perform\n   protocol-specific actions\
    \ to indicate this fact to the calling party,\n   e.g., tones, an ISUP (ISDN User\
    \ Part) Proceeding message, etc.  If\n   the prior call leg is utilizing the IAX\
    \ protocol, a PROCEEDING\n   message MUST be sent to that peer.  The processing\
    \ of this message at\n   an originating or transcoding peer is not specified;\
    \ however, if\n   possible, the status may be displayed to the calling party.\n\
    \   The PROCEEDING message does not require any IEs.\n"
- title: 6.3.3.  RINGING Response Message
  contents:
  - "6.3.3.  RINGING Response Message\n   This message is sent from a terminating\
    \ party to indicate that the\n   called party's service has processed the call\
    \ request and is being\n   alerted to the call.  An IAX RINGING message MUST be\
    \ sent to an IAX-\n   based calling party when the peer determines that the called\
    \ party is\n   being alerted, e.g., when their phone is ringing.\n   Upon receipt\
    \ of an IAX RINGING message, the peer MUST pass this\n   indication to the calling\
    \ party, unless the calling party has already\n   received such indication.  For\
    \ an initiating peer, this is typically\n   done by starting the ring-back tone;\
    \ however, many implementations\n   start ring-back before ringing in order to\
    \ meet user expectations.\n   If the calling party is using the IAX protocol,\
    \ a RINGING message\n   MUST be passed to this caller.\n   The RINGING message\
    \ does not require any IEs.\n"
- title: 6.3.4.  ANSWER Response Message
  contents:
  - "6.3.4.  ANSWER Response Message\n   This message is sent from the called party\
    \ to indicate that the party\n   has accepted the call request and is communicating\
    \ with the calling\n   party.  Upon receipt of this message, any ring-back or\
    \ other progress\n   tones MUST be terminated and the communications channel MUST\
    \ be\n   opened.\n   The ANSWER message does not require any IEs.\n"
- title: 6.4.  Mid-Call Link Operations
  contents:
  - '6.4.  Mid-Call Link Operations

    '
- title: 6.4.1.  FLASH Request Message
  contents:
  - "6.4.1.  FLASH Request Message\n   The FLASH message is sent to indicate a mid-call\
    \ feature.  Its\n   interpretation is system dependent and if it is not expected,\
    \ it\n   SHOULD be ignored.  Typically, this message is only sent from analog\n\
    \   telephone adapters when a brief circuit interruption is made during\n   an\
    \ answered call.\n   The FLASH message does not require any IEs.\n"
- title: 6.4.2.  HOLD Request Message
  contents:
  - "6.4.2.  HOLD Request Message\n   The HOLD message is sent to cause the remote\
    \ system to stop\n   transmitting audio on this channel, and optionally replace\
    \ the audio\n   with music or other sounds.  If the remote system cannot perform\
    \ this\n   request, it SHOULD be ignored.\n   The HOLD message SHOULD only be\
    \ sent in IAX calls that are started\n   using the DIAL message.\n   The HOLD\
    \ message does not require any IEs.\n"
- title: 6.4.3.  UNHOLD Request Message
  contents:
  - "6.4.3.  UNHOLD Request Message\n   The UNHOLD message is sent to cause the remote\
    \ system to resume\n   transmitting audio on this channel.  If the remote system\
    \ cannot\n   perform this request, it SHOULD be ignored.\n   The UNHOLD message\
    \ SHOULD only be sent in IAX calls after the HOLD\n   message.\n   The UNHOLD\
    \ message does not require any IEs.\n"
- title: 6.4.4.  QUELCH Request Message
  contents:
  - "6.4.4.  QUELCH Request Message\n   The QUELCH message is sent to cause the remote\
    \ peer to squelch or\n   stop transmitting audio on this channel.  It MAY replace\
    \ the audio\n   sent to the further party with music or other sounds.  If the\
    \ remote\n   system cannot perform this request, it SHOULD be ignored.\n   The\
    \ QUELCH message MUST only be sent in IAX calls after an ACCEPT is\n   sent or\
    \ received; it SHOULD only be used on calls that are started\n   using the NEW\
    \ message.\n   The QUELCH message does not require any IEs.\n"
- title: 6.4.5.  UNQUELCH Request Message
  contents:
  - "6.4.5.  UNQUELCH Request Message\n   The UNQUELCH message is sent to cause the\
    \ remote system to resume\n   transmitting audio on this channel.  If it previously\
    \ replaced the\n   audio with music or other sounds, it MUST discontinue it immediately.\n\
    \   If the remote system cannot perform this request, it SHOULD be\n   ignored.\n\
    \   The UNQUELCH message SHOULD only be sent in IAX calls after the\n   QUELCH\
    \ message.\n   The UNQUELCH message does not require any IEs.\n"
- title: 6.4.6.  TRANSFER Request Message
  contents:
  - "6.4.6.  TRANSFER Request Message\n   The TRANSFER message causes the receiving\
    \ peer to restart the call\n   using another specified number.  The receiving\
    \ peer MUST be on the\n   calling side of this call leg and the new call behavior\
    \ is\n   unspecified.  After processing this message, a HANGUP message SHOULD\n\
    \   be sent and the call leg torn down.\n   When sending a TRANSFER message, the\
    \ new number to which the call is\n   being transferred MUST be included in the\
    \ CALLED_NUMBER IE and a\n   CALLED_CONTEXT IE MAY be included.  The call leg\
    \ MUST NOT be used for\n   anything else and MAY be torn down.\n   The following\
    \ table specifies IEs for this message:\n   +-----------+---------------+----------+----------------------------+\n\
    \   | IE        | Section       | Status   | Comments                   |\n  \
    \ +-----------+---------------+----------+----------------------------+\n   |\
    \ Called    | Section 8.6.1 | Required |                            |\n   | Number\
    \    |               |          |                            |\n   |         \
    \  |               |          |                            |\n   | Called    |\
    \ Section 8.6.5 | Optional | Use this IE if context is  |\n   | Context   |  \
    \             |          | other than default.        |\n   +-----------+---------------+----------+----------------------------+\n"
- title: 6.5.  Call Path Optimization
  contents:
  - "6.5.  Call Path Optimization\n   If a peer is handling a call between two other\
    \ IAX peers and the peer\n   no longer has any need to monitor the progress, content,\
    \ or duration\n   of the call, it MAY remove itself from the call by directing\
    \ the\n   other two peers to communicate directly.  This call path\n   optimization,\
    \ or \"supervised transfer\", is done in a manner that\n   ensures the call will\
    \ not be lost in the process; the initiating peer\n   does not give up control\
    \ of the process until it has confirmed the\n   other two peers are communicating.\
    \  Note: the parties involved in the\n   call are not aware of this operation;\
    \ it is purely a network\n   operation.\n                                 ________________\n\
    \        rec  TXREJ              |                |     rec TXREL\n        ----------\
    \   *--------->|      None      |<-----------------+\n        snd  TXREJ     \
    \         |________________|        ack       ^\n        to other            \
    \      |           |                     |\n                                 \
    \ |           V                     |\n                                  |   \
    \                              |\n                                  |        \
    \   *   (From All)        |\n                   /Init Transfer |           | rec\
    \ TXREQ           |\n                    ------------  |           | ---------\
    \           |\n                      snd TXREQ   |           | snd TXCNT     \
    \      |\n                      to both     |           |                    \
    \ |\n                                 _v___________v__                   |\n \
    \                               |                |                  |\n      \
    \                          |     Begin      |----------------->+\n           \
    \                     |________________|                  |\n                \
    \                  |           |                     |\n                     \
    \   rec TXACC |           | rec TXREADY         |\n                        ---------\
    \ |           | ---------           |\n                      snd TXREADY |   \
    \        |     x               |\n                                  |        \
    \   |                     |\n                                 _v___________v__\
    \                   |\n                                |                |----------------->+\n\
    \                      ----------|     Ready      |----------        |\n     \
    \                |          |________________|          |       |\n          \
    \           |                   |                  |       |\n     /Both Legs\
    \ Ready|   /Both Legs Ready|       rec TXMEDIA|       |\n   and not media-only|\
    \    and media-only |                  |       |\n       ------------  |    ------------\
    \   |       -----------|       |\n       snd TXREL     |     snd TXMEDIA   | \
    \           x     |       |\n                     |                   |      \
    \            |       |\n                 ____V____          _____V___        \
    \    ___V_____  |\n                |         |        |         |          | \
    \        | |\n                | Release |        |  Media  |          | Media\
    \   | |\n                |_________|        |_________|          |  Pass   | |\n\
    \                                         |              |_________| |\n     \
    \                                    |                  |       |\n          \
    \                               V                  V       |\n    rec  TXCNT \
    \                          +------------------------->+\n    ----------  (In any\
    \ state)\n    snd  TXACC\n              Figure 4: Call Path Optimization State\
    \ Diagram\n   When a peer initiates this procedure, both call legs MUST be in\
    \ the\n   UP state, i.e., they MUST have sent or received the ACCEPT message\n\
    \   for that call leg.  To start, it sends a TXREQ message with the\n   addresses\
    \ and information from the other remote peers to each its\n   neighbors.  If capable\
    \ of performing this procedure, they begin\n   transmitting all channel information\
    \ to both the initiating peer and\n   the new remote peer.  They also send a TXCNT\
    \ message indicating\n   packet counts for the call leg to the new remote peer.\
    \  Each TXCNT\n   message is acknowledged with a TXACC message.  The peers respond\
    \ by\n   sending a TXREADY message to the initiator indicating that they have\n\
    \   confirmed the new communications path.  When all remote peers have\n   sent\
    \ the initiator a TXREADY message, the transfer is successful and\n   the initiator\
    \ responds with a TXREL and has finished its involvement\n   with the call.  If\
    \ during the transfer process, the two remote peers\n   cannot communicate, they\
    \ send a TXREJ message to the initiator.  An\n   example is shown in Section 9.5.\n\
    \   These messages are described in the sections that follow.\n"
- title: 6.5.1.  TXREQ Transfer Request Message
  contents:
  - "6.5.1.  TXREQ Transfer Request Message\n   The TXREQ message is sent by a peer\
    \ to initiate the transfer process.\n   When sent, it MUST be sent to both adjacent\
    \ peers involved in the\n   call.\n   It MUST include the following Information\
    \ Elements:\n        +------------------+----------------+----------+----------+\n\
    \        | IE               | Section        | Status   | Comments |\n       \
    \ +------------------+----------------+----------+----------+\n        | Apparent\
    \ Address | Section 8.6.17 | Required |          |\n        |                \
    \  |                |          |          |\n        | Call Number      | Section\
    \ 8.6.20 | Required |          |\n        |                  |               \
    \ |          |          |\n        | Transfer ID      | Section 8.6.26 | Required\
    \ |          |\n        +------------------+----------------+----------+----------+\n\
    \   The Apparent Address is the IP address data structure address for the\n  \
    \ other remote peer.  The Call Number IE is the callid used by the\n   other remote\
    \ peer and the Transfer ID is a unique number assigned by\n   the initiator.\n\
    \   Upon receipt of a TXREQ message for a valid call from the\n   corresponding\
    \ remote peer, a peer MUST respond by attempting to\n   communicate with the newly\
    \ specified remote peer.  This task is\n   accomplished by sending a TXCNT message\
    \ directly to the peer at the\n   address specified in the Apparent Address parameter.\n"
- title: 6.5.2.  TXCNT Transfer Connectivity Response Message
  contents:
  - "6.5.2.  TXCNT Transfer Connectivity Response Message\n   The TXCNT message is\
    \ used to verify connectivity with a potential\n   replacement peer for a call.\
    \  It MUST include the TRANSFERID IE.\n   Upon receipt on a message of this type,\
    \ and if the peer has\n   previously received a TXREQ for this call leg, the peer\
    \ MUST respond\n   with a TXACC message.\n   If the TXCNT message is not successfully\
    \ transmitted or if a TXACC\n   message is not received in response to it, the\
    \ transfer process MUST\n   be aborted by sending a TXREJ message to the initiating\
    \ host.\n   It MUST include the following Information Element:\n   +----------+----------------+----------+----------------------------+\n\
    \   | IE       | Section        | Status   | Comments                   |\n  \
    \ +----------+----------------+----------+----------------------------+\n   |\
    \ Transfer | Section 8.6.26 | Required | A unique number assigned   |\n   | ID\
    \       |                |          | by the initiator.          |\n   +----------+----------------+----------+----------------------------+\n"
- title: 6.5.3.  TXACC Response Message
  contents:
  - "6.5.3.  TXACC Response Message\n   Like the TXCNT message, the TXACC message\
    \ is used to verify\n   connectivity with a potential replacement peer.  It MUST\
    \ include the\n   TRANSFERID IE.  Upon receipt on a message of this type if the\
    \ peer is\n   attempting to transfer this call leg, the peer stops sending call-\n\
    \   related media to the initiating peer and sends a TXREADY message to\n   it.\n\
    \   It MUST include the following Information Element:\n   +----------+----------------+----------+----------------------------+\n\
    \   | IE       | Section        | Status   | Comments                   |\n  \
    \ +----------+----------------+----------+----------------------------+\n   |\
    \ Transfer | Section 8.6.26 | Required | A unique number assigned   |\n   | ID\
    \       |                |          | by the initiator.          |\n   +----------+----------------+----------+----------------------------+\n"
- title: 6.5.4.  TXREADY Transfer Ready Response Message
  contents:
  - "6.5.4.  TXREADY Transfer Ready Response Message\n   The TXREADY message indicates\
    \ that the sending peer has verified\n   connectivity with the peer which it was\
    \ instructed to transfer the\n   call.  It MUST include the TRANSFERID IE.  When\
    \ TXREADY messages are\n   received from both remote peers, it MUST discontinue\
    \ media transport\n   and send a TXREL message to each peer.\n   It MUST include\
    \ the following Information Element:\n   +----------+----------------+----------+----------------------------+\n\
    \   | IE       | Section        | Status   | Comments                   |\n  \
    \ +----------+----------------+----------+----------------------------+\n   |\
    \ Transfer | Section 8.6.26 | Required | A unique number assigned   |\n   | ID\
    \       |                |          | by the initiator.          |\n   +----------+----------------+----------+----------------------------+\n"
- title: 6.5.5.  TXREL Transfer Release Response Message
  contents:
  - "6.5.5.  TXREL Transfer Release Response Message\n   The TXREL message indicates\
    \ that the transfer process has\n   successfully completed.  After sending and\
    \ upon receipt of this\n   message, no further interaction (other than an ACK,\
    \ of course) is\n   needed between the peers on this call leg.  The TXREL is also\
    \ used to\n   revert a split-media call (one where the media and signaling follow\n\
    \   different paths) to a call where the media and signaling follow the\n   same\
    \ path.\n   It MUST include the following Information Element:\n          +-------------+----------------+----------+----------+\n\
    \          | IE          | Section        | Status   | Comments |\n          +-------------+----------------+----------+----------+\n\
    \          | Call Number | Section 8.6.20 | Required |          |\n          +-------------+----------------+----------+----------+\n"
- title: 6.5.6.  TXMEDIA Transfer Media Message
  contents:
  - "6.5.6.  TXMEDIA Transfer Media Message\n   The TXREL message indicates that the\
    \ MEDIA transfer process has\n   successfully completed.  After sending and upon\
    \ processing of this\n   message, Full Frames MUST continue to follow the original\
    \ signaling\n   path and media frames MUST follow the newly negotiated path. \
    \ This\n   split-path process continues until the call ends with a HANGUP or\n\
    \   peer receives a TXREL message for the call leg.  A peer MAY force the\n  \
    \ paths to rejoin by sending a TXREL message.\n   It MUST include the following\
    \ Information Element:\n          +-------------+----------------+----------+----------+\n\
    \          | IE          | Section        | Status   | Comments |\n          +-------------+----------------+----------+----------+\n\
    \          | Call Number | Section 8.6.20 | Required |          |\n          +-------------+----------------+----------+----------+\n"
- title: 6.5.7.  TXREJ Transfer Rejection Response Message
  contents:
  - "6.5.7.  TXREJ Transfer Rejection Response Message\n   The TXREJ MAY be sent at\
    \ anytime during the transfer process to\n   indicate that the transfer cannot\
    \ proceed.  Upon receiving a TXREJ\n   message, if the receiver is the initiating\
    \ peer, it MUST form a TXREJ\n   message and send it to the other remote peer.\n\
    \   The TXREJ message does not require any IEs.\n"
- title: 6.6.  Call Tear Down
  contents:
  - "6.6.  Call Tear Down\n   The messages used to finish a call vary depending on\
    \ the particular\n   process the call is in at the time.  The terminal messages\
    \ for a call\n   are:\n      HANGUP.  See Section 6.2.5.\n      REJECT.  See Section\
    \ 6.2.4.\n      TRANSFER.  See Section 6.4.6.\n      TXREADY.  See Section 6.5.4.\n\
    \   These messages are discussed in their respective sections.  Also, if\n   the\
    \ reliable transport procedures determine that messaging cannot be\n   maintained,\
    \ the call leg MUST be torn down without any other\n   indications over the errant\
    \ IAX call leg.\n"
- title: 6.7.  Network Monitoring
  contents:
  - "6.7.  Network Monitoring\n   The IAX protocol has various tools to determine\
    \ the network load.  It\n   uses the POKE message to monitor reachability of remote\
    \ peer and the\n   LAGRQ message to measure the quality of a current call leg\
    \ including\n   the jitter buffer delay.\n"
- title: 6.7.1.  POKE Request Message
  contents:
  - "6.7.1.  POKE Request Message\n   A POKE message is sent to test connectivity\
    \ of a remote IAX peer.  It\n   is similar to a PING message, except that it MUST\
    \ be sent when there\n   is no existing call to the remote endpoint.  It MAY also\
    \ be used to\n   \"qualify\" a user to a remote peer, so that the remote peer\
    \ can\n   maintain awareness of the state of the user.  A POKE MUST have 0 as\n\
    \   its destination call number.\n   Upon receiving a POKE message, the peer MUST\
    \ respond with a PONG\n   message.\n   This message does not require any IEs.\n"
- title: 6.7.2.  PING Request Message
  contents:
  - "6.7.2.  PING Request Message\n   A PING message is sent to test connectivity\
    \ of the remote IAX\n   endpoint on an existing call.  Transmission of a PING\
    \ MAY occur when\n   a peer-defined number of seconds have passed without receiving\
    \ an\n   incoming media frame on a call, or by default every 20 seconds.\n   Receipt\
    \ of a PING requires an acknowledging PONG be sent.\n   This message does not\
    \ require any IEs.\n"
- title: 6.7.3.  PONG Response Message
  contents:
  - "6.7.3.  PONG Response Message\n   A PONG message is a response to a PING or a\
    \ POKE.  It acknowledges\n   the connection.  The receiver uses the time-stamp\
    \ of the received\n   PING or POKE and its times to determine the Round Trip Time\
    \ of the\n   connection.  Several receiver report IEs MAY be included with a PONG,\n\
    \   including received jitter, received frames, delay, and dropped\n   frames.\
    \  Receipt of a PONG requires an ACK.\n   This message does not require any IEs.\n"
- title: 6.7.4.  LAGRQ Lag Request Message
  contents:
  - "6.7.4.  LAGRQ Lag Request Message\n   A LAGRQ is a lag request.  It is sent to\
    \ determine the lag between\n   two IAX endpoints, including the amount of time\
    \ used to process a\n   frame through a jitter buffer (if any).  It requires a\
    \ clock-based\n   time-stamp, and MUST be answered with a LAGRP, which MUST echo\
    \ the\n   LAGRQ's time-stamp.  The lag between the two peers can be computed on\n\
    \   the peer sending the LAGRQ by comparing the time-stamp of the LAGRQ\n   and\
    \ the time the LAGRP was received.\n   This message does not require any IEs.\n"
- title: 6.7.5.  LAGRP Lag Response Message
  contents:
  - "6.7.5.  LAGRP Lag Response Message\n   A LAGRP is a lag reply, sent in response\
    \ to a LAGRQ message.  It MUST\n   send the same time-stamp it received in the\
    \ LAGRQ after passing the\n   received frame through any jitter buffer the peer\
    \ has configured.\n   This message does not require any IEs.\n"
- title: 6.8.  Digit Dialing
  contents:
  - "6.8.  Digit Dialing\n   Digit Dialing support is an optional portion of the IAX\
    \ protocol\n   designed to support devices that do not maintain their own dial\n\
    \   plans, for instance, analog telephone adapters, or ATAs.  The dialing\n  \
    \ portion of the IAX protocol MAY be implemented for the client/\n   phone-side,\
    \ server-side or not all.  The exchanges work as a series\n   of Dialing Plan\
    \ requests (DPREQs) each followed by a response (DPREP)\n   indicating if additional\
    \ digits SHOULD be collected before sending\n   the call.  The sections that follow\
    \ describe these messages and the\n   rules associated with them.\n"
- title: 6.8.1.  DPREQ Dial Plan Request Message
  contents:
  - "6.8.1.  DPREQ Dial Plan Request Message\n   A DPREQ is a request for the server\
    \ to analyze the passed called\n   number and determine if there is a valid dialing\
    \ pattern on the\n   remote peer.  It MUST include the 'called number' IE to specify\
    \ what\n   extension is being queried.  This command is used in the case where\
    \ a\n   local peer does not handle its own dialplan/extension switching.  The\n\
    \   local peer can inquire (as a user dials) how the remote peer\n   perceives\
    \ the 'called number'.  If a DPREP is received indicating\n   that the number\
    \ is valid, a DIAL MAY be sent.\n   This message MAY be sent by the client and\
    \ MUST be implemented on\n   servers which provide IAX dialing support.\n   It\
    \ MUST include the following Information Element:\n          +-------------+----------------+----------+----------+\n\
    \          | IE          | Section        | Status   | Comments |\n          +-------------+----------------+----------+----------+\n\
    \          | Call Number | Section 8.6.20 | Required |          |\n          +-------------+----------------+----------+----------+\n"
- title: 6.8.2.  DPREP Dial Plan Response Message
  contents:
  - "6.8.2.  DPREP Dial Plan Response Message\n   A DPREP is a reply to a DPREQ, containing\
    \ the status of the dialplan\n   entry requested in the 'called number' IE of\
    \ the DPREQ.  It MUST\n   include the 'called number', 'dpstatus', and 'refresh'\
    \ IEs.  The\n   called number is the same one received in the 'called number'\
    \ IE of\n   the DPREQ.  The 'dpstatus' IE contains the status of the dialplan\n\
    \   entry referenced by the received called number.  The status indicates\n  \
    \ whether the called number exists, can exist, needs more digits, or is\n   invalid.\
    \  More information can be found in Section 8.6 under the\n   DPSTATUS information\
    \ element.  The 'refresh' IE specifies the number\n   of minutes the 'dpstatus'\
    \ is valid.  If the 'refresh' IE is not\n   present, a default 10 minutes period\
    \ is assumed.\n   The sending of this message MUST be implemented by servers which\n\
    \   support IAX dialing.  Clients which support IAX dialing MUST be\n   capable\
    \ of receiving such messages.\n   It MUST include the following Information Elements:\n\
    \   +----------+----------------+----------+----------------------------+\n  \
    \ | IE       | Section        | Status   | Comments                   |\n   +----------+----------------+----------+----------------------------+\n\
    \   | Call     | Section 8.6.20 | Required |                            |\n  \
    \ | Number   |                |          |                            |\n   |\
    \          |                |          |                            |\n   | Dial\
    \     | Section 8.6.20 | Required | Indicates if number        |\n   | Plan  \
    \   |                |          | exists, is a partial       |\n   | Status  \
    \ |                |          | match, etc.                |\n   |          |\
    \                |          |                            |\n   | Dial     | Section\
    \ 8.6.20 | Optional | Inclusion is strongly      |\n   | Plan     |          \
    \      |          | suggested.  The default is |\n   | Refresh  |            \
    \    |          | 10 minutes.                |\n   +----------+----------------+----------+----------------------------+\n"
- title: 6.8.3.  DIAL Request Message
  contents:
  - "6.8.3.  DIAL Request Message\n   The DIAL message is used with IAX peers that\
    \ do not maintain their\n   own dialplan/extension routing.  Once an extension\
    \ is validated by\n   one or more DPREQ/DPREP exchanges, the number MAY be dialed\
    \ in a DIAL\n   message, using the 'called number' IE to specify the extension\
    \ it is\n   attempting to reach.  The remote peer then handles the remaining\n\
    \   aspects of call setup, including ringing the extension and notifying\n   the\
    \ local peer when it has been answered following the same\n   requirements as\
    \ the NEW command (Section 6.2.2).\n   The following table specifies the IEs used\
    \ by this message:\n   +-----------+---------------+----------+----------------------------+\n\
    \   | IE        | Section       | Status   | Comments                   |\n  \
    \ +-----------+---------------+----------+----------------------------+\n   |\
    \ Called    | Section 8.6.1 | Required |                            |\n   | Number\
    \    |               |          |                            |\n   |         \
    \  |               |          |                            |\n   | Called    |\
    \ Section 8.6.5 | Optional | Use this IE if context is  |\n   | Context   |  \
    \             |          | other than default.        |\n   +-----------+---------------+----------+----------------------------+\n"
- title: 6.9.  Miscellaneous
  contents:
  - '6.9.  Miscellaneous

    '
- title: '6.9.1.  ACK: Acknowledgement Message'
  contents:
  - "6.9.1.  ACK: Acknowledgement Message\n   An ACK acknowledges the receipt of an\
    \ IAX message.  An ACK is sent\n   upon receipt of a Full Frame that does not\
    \ have any other protocol-\n   defined response.  An ACK MUST have both a source\
    \ call number and\n   destination call number.  It MUST also not change the sequence\
    \ number\n   counters, and MUST return the same time-stamp it received.  This\n\
    \   time-stamp allows the originating peer to determine to which message\n   the\
    \ ACK is responding.  Receipt of an ACK requires no action.\n   An ACK MAY also\
    \ be sent as an initial acknowledgment of an IAX\n   message that requires some\
    \ other protocol-defined message\n   acknowledgment, as long as the required message\
    \ is also sent within\n   some peer-defined amount of time.  This allows the acknowledging\
    \ peer\n   to delay transmission of the proper IAX message, which may add\n  \
    \ security against brute-force password attacks during authentication\n   exchanges.\n\
    \   When the following messages are received, an ACK MUST be sent in\n   return:\
    \ NEW, HANGUP, REJECT, ACCEPT, PONG, AUTHREP, REGREL, REGACK,\n   REGREJ, TXREL.\
    \  ACKs SHOULD not be expected by any peer and their\n   purpose is purely to\
    \ force the transport layer to be up to date.\n   The ACK message does not requires\
    \ any IEs.\n"
- title: '6.9.2.  INVAL: Invalid Response Message'
  contents:
  - "6.9.2.  INVAL: Invalid Response Message\n   An INVAL is sent as a response to\
    \ a received message that is not\n   valid.  This occurs when an IAX peer sends\
    \ a message on a call after\n   the remote peer has hung up its end.  Upon receipt\
    \ of an INVAL, a\n   peer MUST destroy its side of a call.\n   The INVAL message\
    \ does not requires any IEs.\n"
- title: '6.9.3.  VNAK: Voice Negative Acknowledgement Message'
  contents:
  - "6.9.3.  VNAK: Voice Negative Acknowledgement Message\n   A VNAK is sent when\
    \ a message is received out of order, particularly\n   when a Mini Frame is received\
    \ before the first full voice frame on a\n   call.  It is a request for retransmission\
    \ of dropped messages.  A\n   message is considered out of sequence if the received\
    \ iseqno is\n   different than the expected iseqno.  On receipt of a VNAK, a peer\n\
    \   MUST retransmit all frames with a higher sequence number than the\n   VNAK\
    \ message's iseqno.\n   The VNAK message does not requires any IEs.\n"
- title: '6.9.4.  MWI: Message Waiting Indicator Request Message'
  contents:
  - "6.9.4.  MWI: Message Waiting Indicator Request Message\n   An MWI message is\
    \ used to indicate to a remote peer that it has one\n   or more messages waiting.\
    \  It MAY include the 'msgcount' IE to\n   specify how many messages are waiting.\n\
    \   The following table specifies IEs used by this message:\n           +----------+----------------+----------+-----------+\n\
    \           | IE       | Section        | Status   | Comments  |\n           +----------+----------------+----------+-----------+\n\
    \           | MSGCOUNT | Section 8.6.23 | Optional | Suggested |\n           +----------+----------------+----------+-----------+\n"
- title: 6.9.5.  UNSUPPORT Unsupported Response Message
  contents:
  - "6.9.5.  UNSUPPORT Unsupported Response Message\n   An UNSUPPORT message is sent\
    \ in response to a message that is not\n   supported by an IAX peer.  This occurs\
    \ when an IAX command with an\n   unrecognized or unsupported subclass is received.\
    \  No action is\n   required upon receipt of this message, though the peer SHOULD\
    \ be\n   aware that the message referred to in the optionally included 'IAX\n\
    \   unknown' IE is not supported by the remote peer.\n   The following table specifies\
    \ IEs used by this message:\n            +---------+----------------+----------+-----------+\n\
    \            | IE      | Section        | Status   | Comments  |\n           \
    \ +---------+----------------+----------+-----------+\n            | UNKNOWN |\
    \ Section 8.6.22 | Optional | Suggested |\n            +---------+----------------+----------+-----------+\n"
- title: 6.10.  Media Messages
  contents:
  - "6.10.  Media Messages\n   The IAX protocol supports many types of media and these\
    \ are\n   transported through the same UDP port as other IAX messages.  Voice\n\
    \   and video are unique in that they utilize two different encodings,\n   each\
    \ with different support procedures.  Abbreviated 'Mini Frames'\n   are normally\
    \ used for audio and video; however, each time the time-\n   stamp is a multiple\
    \ of 32,768 (0x8000 hex), a standard or 'Full\n   Frame' MUST be sent.  This approach\
    \ facilitates efficiency and\n   reliability by sending compressed packets, without\
    \ guaranteed\n   delivery, most of the time while periodically forcing reliable\n\
    \   exchanges with the peer.  If communication fails, call tear-down\n   procedures\
    \ are invoked.\n   Upon receiving any media message, except the abbreviated audio\
    \ and\n   video Mini Frames, an ACK message MUST be sent.  The content SHOULD\n\
    \   be passed to an associated application, device, or call leg.  The\n   data\
    \ MAY be buffered before it is presented to the user.\n"
- title: 6.10.1.  DTMF Media Message
  contents:
  - "6.10.1.  DTMF Media Message\n   The message carries a single digit of DTMF (Dual\
    \ Tone Multi-\n   Frequency).  Useful background information about DTMF can be\
    \ found in\n   [RFC4733] and [RFC4734], but, note that IAX does not use the RTP\n\
    \   protocol.\n"
- title: 6.10.2.  Voice Media Message
  contents:
  - "6.10.2.  Voice Media Message\n   The message carries voice data and indicates\
    \ the CODEC used.\n"
- title: 6.10.3.  Video Media Message
  contents:
  - "6.10.3.  Video Media Message\n   The frame carries video data and indicates the\
    \ video format of the\n   data.\n"
- title: 6.10.4.  Text Media Message
  contents:
  - "6.10.4.  Text Media Message\n   The frame carries a text message in UTF-8 [RFC3629]\
    \ format.\n"
- title: 6.10.5.  Image Media Message
  contents:
  - "6.10.5.  Image Media Message\n   This message carries a single image.  The image\
    \ MUST fit in one\n   message in this version of the protocol.\n"
- title: 6.10.6.  HTML Media Message
  contents:
  - "6.10.6.  HTML Media Message\n   The HTML message class carries HTML and related\
    \ data as well as\n   status about the display of that HTML page.  The subclass\
    \ parameter\n   indicates the HTML content type.  It MAY be a URL, the start,\
    \ middle,\n   or end of a data block.  HTML data MUST be in the format described\
    \ in\n   [html401].\n   If a peer receives an HTML message for a channel that\
    \ does not\n   support HTML, it MUST respond with an HTML message that has the\
    \ HTML\n   NOT SUPPORTED indication.\n   When a device that supports HTML completes\
    \ loading the page, it\n   SHOULD send a LOAD COMPLETE message\n"
- title: 6.10.7.  Comfort Noise  Media Message
  contents:
  - "6.10.7.  Comfort Noise  Media Message\n   This message indicates that comfort\
    \ noise SHOULD be played.  It has a\n   parameter that indicates the level.  The\
    \ noise is to be locally\n   generated.\n"
- title: 7.  Message Transport
  contents:
  - "7.  Message Transport\n   IAX is sent over UDP and uses an application-level\
    \ protocol to\n   provide reliable transport where needed.\n   With respect to\
    \ transport, there are two message formats: reliable or\n   'Full Frames' and\
    \ unacknowledged 'Mini' or 'Meta' frames.  All\n   messages except certain voice\
    \ and video messages are reliable.\n   Reliable messages are transported by a\
    \ scheme that maintains message\n   counts and time-stamps for both peers involved\
    \ in the call.  The\n   counts are per call.  Each peer maintains a timer for\
    \ all reliable\n   messages and MUST periodically retransmit those messages until\
    \ they\n   acknowledge or the retry limit is exceeded.\n   When starting a call,\
    \ the outgoing and incoming message sequence\n   numbers MUST both be set to zero.\
    \  Each reliable message that is sent\n   increments the message count by one\
    \ except the ACK, INVAL, TXCNT,\n   TXACC, and VNAK messages, which do not change\
    \ the message count.  The\n   message includes the outgoing message count and\
    \ the highest numbered\n   incoming message that has been received.  In addition,\
    \ it contains a\n   time-stamp that represents the number of milliseconds since\
    \ the call\n   started.  Or, in the case of certain network timing messages, it\n\
    \   contains a copy of the time-stamp sent to it.  Time-stamps MAY be\n   approximate,\
    \ but, MUST be in order.\n   When any message is received, the time-stamps MUST\
    \ be checked to make\n   sure that they are in order.  If a message is received\
    \ out of order,\n   it MUST be ignored and a VNAK message sent to resynchronize\
    \ the\n   peers.  If the message is a reliable message, the incoming message\n\
    \   counter MUST be used to acknowledge all the messages up to that\n   sequence\
    \ number that have been sent.\n   If no acknowledgment is received after a locally\
    \ configured number of\n   retries (default 4), the call leg SHOULD be considered\
    \ unusable and\n   the call MUST be torn down without any further interaction\
    \ on this\n   call leg.\n"
- title: 7.1.  Trunking
  contents:
  - "7.1.  Trunking\n   IAX allows multiple media exchanges between the same two peers\
    \ to be\n   multiplexed into a single trunk call coalescing media payload into\
    \ a\n   combined packet.  This decreases bandwidth usage as there are fewer\n\
    \   total packets being transmitted.  Trunking MAY occur in one or both\n   directions\
    \ of an IAX exchange.  A trunk consists of a trunk header\n   and one or more\
    \ trunked IAX calls.  The trunk message contains a\n   time-stamp specifying the\
    \ time of transmission of the trunk frame.\n   The audio data from the trunked\
    \ calls are encapsulated in the trunk\n   frame following the header.  Each trunked\
    \ call consists of two octets\n   specifying the call's source number, two octets\
    \ specifying the length\n   in octets of the media data, and the media data itself.\
    \  IAX permits\n   transmitting the time-stamps of each encapsulated Mini Frame\
    \ as well,\n   so that accurate timing information can be used for jitter buffers,\n\
    \   etc.  A flag in the meta command header specifies whether the\n   encapsulated\
    \ Mini Frames retain their original time-stamps.  If they\n   do not retain them,\
    \ they MUST assume the time-stamp in the trunk\n   header upon being received\
    \ by the trunk peer.\n"
- title: 7.2.  Timers
  contents:
  - "7.2.  Timers\n   There are various timers in the IAX protocol.  There are other\n\
    \   application-level timers, such as the call timer and ring timer, that\n  \
    \ are beyond the scope of this document.  This section describes the\n   IAX timers\
    \ and specifies their default values and behaviors.\n"
- title: 7.2.1.  Retransmission Timer
  contents:
  - "7.2.1.  Retransmission Timer\n   The message retransmission procedures are described\
    \ in Section 7.  On\n   each call, there is a timer for how long to wait for an\n\
    \   acknowledgment of a message.  This timer starts at twice the measured\n  \
    \ Round-Trip Time from the last PING/PONG command.  If a retransmission\n   is\
    \ needed, it is exponentially increased until it meets a boundary\n   value. \
    \ The maximum retry time period boundary is 10 seconds.\n"
- title: 7.2.2.  Registration Period Timer
  contents:
  - "7.2.2.  Registration Period Timer\n   Registrations are valid for a specified\
    \ time period.  It is the\n   client's responsibility to renew this registration\
    \ before the time\n   period expires.  The registrations SHOULD be renewed at\
    \ random\n   intervals to prevent network congestion.  A registrar MUST monitor\n\
    \   this time period and invalidate the registration if the client/\n   registrant\
    \ has not renewed their registration before the timer\n   elapses.\n"
- title: 7.3.  NAT Considerations
  contents:
  - "7.3.  NAT Considerations\n   IAX is very well suited to operating behind NAT\
    \ due to its single\n   port approach.  This approach eliminates any start of\
    \ call media\n   stream delays while the NAT gateway establishes a bidirectional\
    \ port\n   association.  Deploying a single IAX server behind a NAT gateway\n\
    \   requires little effort.  If the server acts as a registrar, the IAX\n   UDP\
    \ port on the NAT gateway must be forwarded to the server.  If the\n   server\
    \ acts as a registrant, the default, 60 second, REGREQ refresh\n   timer should\
    \ be sufficient to maintain a port association in the NAT\n   gateway; however,\
    \ a static port mapping is preferred.\n   If multiple servers are to be deployed\
    \ behind a single NAT gateway,\n   most NAT gateways require each IAX server to\
    \ use different UDP ports.\n   Of course, there may be NAT implementations that\
    \ recognize when\n   multiple devices utilize the same private port and manage\
    \ it\n   appropriately.\n"
- title: 7.4.  Encryption
  contents:
  - "7.4.  Encryption\n   IAX supports call encryption using the symmetric key, Rijndael\
    \ [AES]\n   block cipher (also called AES -- Advanced Encryption Standard).\n\
    \   Rijndael is a 128-bit block cipher utilizing a shared secret.  IAX\n   encrypts\
    \ on a call-by-call basis starting with a plaintext NEW\n   message indicating,\
    \ in addition to the other message parameters, that\n   the call should be encrypted.\
    \  This indication is given by sending\n   the ENCRYPTION IE (Section 8.6.34)\
    \ in the NEW request message.  If\n   the called host supports encryption, it\
    \ will respond with a plaintext\n   AUTHREQ message that also includes the ENCRYPTION\
    \ IE.  All subsequent\n   messages in the call MUST be encrypted.  If the called\
    \ host does not\n   support encryption, the AUTHREQ sent in response to the NEW\
    \ must not\n   include the ENCRYPTION IE and the calling host MUST either HANGUP\
    \ the\n   request or continue with the unencrypted call.\n   The key to use in\
    \ encrypting the messages is computed by taking the\n   CHALLENGE IE Section 8.6.14\
    \ from the AUTHREQ and concatenating any\n   one of the shared passwords then\
    \ computing the 128-bit MD5 digest of\n   this combination.  To decrypt, if there\
    \ is more than one password for\n   the peer, each must be tried until the message\
    \ is successfully\n   decoded.  The key remains constant for the duration of the\
    \ call.\n   Only the data portion of the messages are encoded.\n"
- title: 8.  Message Encoding
  contents:
  - '8.  Message Encoding

    '
- title: 8.1.  Frame Structure
  contents:
  - "8.1.  Frame Structure\n   This section contains the specification for each type\
    \ of frame that\n   IAX defines.\n"
- title: 8.1.1.  Full Frames
  contents:
  - "8.1.1.  Full Frames\n   Full Frames can send signaling or media data.  Generally,\
    \ Full Frames\n   are used to control initiation, setup, and termination of an\
    \ IAX\n   call, but they can also be used to carry stream data (though this is\n\
    \   generally not optimal).\n   Full Frames are sent reliably, so all Full Frames\
    \ require an\n   immediate acknowledgment upon receipt.  This acknowledgment can\
    \ be\n   explicit via an 'ACK' message (see Section 8.4) or implicit based\n \
    \  upon receipt of an appropriate response to the Full Frame issued.\n   The standard\
    \ Full Frame header length is 12 octets.\n   Field descriptions:\n   'F' bit\n\
    \      This bit specifies whether or not the frame is a Full Frame.  If\n    \
    \  the 'F' bit is set to 1, the frame is a Full Frame.  If it is set\n      to\
    \ 0, it is not a Full Frame.\n   Source call number\n      This 15-bit value specifies\
    \ the call number the transmitting\n      client uses to identify this call. \
    \ The source call number for an\n      active call MUST NOT be in use by another\
    \ call on the same client.\n      Call numbers MAY be reused once a call is no\
    \ longer active, i.e.,\n      either when there is positive acknowledgment that\
    \ the call has\n      been destroyed or when all possible timeouts for the call\
    \ have\n      expired.\n   'R' bit\n      This bit specifies whether or not the\
    \ frame is being\n      retransmitted.  If the 'R' bit is set to 0, the frame\
    \ is being\n      transmitted for the first time.  If it is set to 1, the frame\
    \ is\n      being retransmitted.  IAX does not specify a retransmit timeout;\n\
    \      this is left to the implementor.\n   Destination call number\n      This\
    \ 15-bit value specifies the call number the transmitting\n      client uses to\
    \ reference the call at the remote peer.  This number\n      is the same as the\
    \ remote peer's source call number.  The\n      destination call number uniquely\
    \ identifies a call on the remote\n      peer.  The source call number uniquely\
    \ identifies the call on the\n      local peer.\n   Time-stamp\n      The time-stamp\
    \ field contains a 32-bit time-stamp maintained by an\n      IAX peer for a given\
    \ call.  The time-stamp is an incrementally\n      increasing representation of\
    \ the number of milliseconds since the\n      first transmission of the call.\n\
    \   OSeqno\n      The 8-bit OSeqno field is the outbound stream sequence number.\n\
    \      Upon initialization of a call, its value is 0.  It increases\n      incrementally\
    \ as Full Frames are sent.  When the counter\n      overflows, it silently resets\
    \ to 0.\n   ISeqno\n      The 8-bit ISeqno field is the inbound stream sequence\
    \ number.\n      Upon initialization of a call, its value is 0.  It increases\n\
    \      incrementally as Full Frames are received.  At any time, the\n      ISeqno\
    \ of a call represents the next expected inbound stream\n      sequence number.\
    \  When the counter overflows, it silently resets\n      to 0.\n   Frametype\n\
    \      The Frametype field identifies the type of message carried by the\n   \
    \   frame.  See Section 8.2 for more information.\n   'C' bit\n      This bit\
    \ determines how the remaining 7 bits of the Subclass field\n      are coded.\
    \  If the 'C' bit is set to 1, the Subclass value is\n      interpreted as a power\
    \ of 2.  If it is not set, the Subclass value\n      is interpreted as a simple\
    \ 7-bit unsigned integer.\n                        1                   2     \
    \              3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |F|     Source Call Number      |R|   Destination Call Number   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                            time-stamp                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    OSeqno     |    ISeqno     |   Frame Type  |C|  Subclass   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   :  \
    \                           Data                              :\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 5: Full Frame Binary Format\n"
- title: 8.1.2.  Mini Frames
  contents:
  - "8.1.2.  Mini Frames\n   Mini Frames are so named because their header is a minimal\
    \ 4 octets.\n   Mini Frames carry no control or signaling data; their sole purpose\
    \ is\n   to carry a media stream on an already-established IAX call.  They are\n\
    \   sent unreliably.  This decision was made because VoIP calls typically\n  \
    \ can miss several frames without significant degradation in call\n   quality\
    \ while the incurred overhead in ensuring reliability increases\n   bandwidth\
    \ requirements and decreases throughput.  Further, because\n   voice calls are\
    \ typically sent in real time, lost frames are too old\n   to be reintegrated\
    \ into the audio stream by the time they can be\n   retransmitted.\n   Field descriptions:\n\
    \   'F' bit\n      Mini Frames MUST have the 'F' bit set to 0 to specify that\
    \ they\n      are not Full Frames.\n   Source call number\n      The source call\
    \ number is the number that is used by the\n      transmitting peer to identify\
    \ the current call.\n   time-stamp\n      Mini frames carry a 16-bit time-stamp,\
    \ which is the lower 16 bits\n      of the transmitting peer's full 32-bit time-stamp\
    \ for the call.\n      The time-stamp allows synchronization of incoming frames\
    \ so that\n      they MAY be processed in chronological order instead of the\n\
    \      (possibly different) order in which they are received.  The 16-bit\n  \
    \    time-stamp wraps after 65.536 seconds, at which point a full frame\n    \
    \  SHOULD be sent to notify the remote peer that its time-stamp has\n      been\
    \ reset.  A call MUST continue to send mini frames starting\n      with time-stamp\
    \ 0 even if acknowledgment of the resynchronization\n      is not received.\n\
    \   The F bit, source call number, and 16-bit time-stamp comprise the\n   entire\
    \ 4-octet header for a full frame.  Following this header is the\n   actual stream\
    \ data, of arbitrary length, up to the maximum supported\n   by the network.\n\
    \   Mini frames are implicitly defined to be of type 'voice frame'\n   (frametype\
    \ 2; see Section 8.2).  The subclass is implicitly defined\n   by the most recent\
    \ full voice frame of a call (i.e. the subclass for\n   a voice frame specifies\
    \ the CODEC used with the stream).  The first\n   voice frame of a call SHOULD\
    \ be sent using the CODEC agreed upon in\n   the initial CODEC negotiation.  On-the-fly\
    \ CODEC negotiation is\n   permitted by sending a full voice frame specifying\
    \ the new CODEC to\n   use in the subclass field.\n                        1 \
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |F|     Source call number      |            time-stamp         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   :  \
    \                           Data                              :\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 6: Mini Frame Binary Format\n"
- title: 8.1.3.  Meta Frames
  contents:
  - "8.1.3.  Meta Frames\n   Meta frames serve one of two purposes.  Meta video frames\
    \ allow the\n   transmission of video streams with an optimized header.  They\
    \ are\n   similar in purpose to mini voice frames.  Meta trunk frames are used\n\
    \   for trunking multiple IAX media streams between two peers into one\n   header,\
    \ to further minimize bandwidth consumption.\n"
- title: 8.1.3.1.  Meta Video Frames
  contents:
  - "8.1.3.1.  Meta Video Frames\n   Field descriptions:\n   'F' bit\n      Meta video\
    \ frames MUST have the 'F' bit set to 0 to indicate that\n      they are not full\
    \ frames.\n   Meta Indicator\n      The meta indicator is a 15-bit field of all\
    \ zeroes, used to\n      indicate that the frame is a Meta Frame.  Meta Frames\
    \ are\n      identifiable because the first 16 bits will always be zero in any\n\
    \      Meta Frame, whereas Full or Mini Frames will have either the 'F'\n    \
    \  bit set or some (nonzero) value for the source call number (or\n      both).\n\
    \   'V' bit\n      The 'V' bit in a meta video frame is set to 1 to specify that\
    \ the\n      frame is a meta video frame.\n   Source call number\n      The call\
    \ number that is used by the transmitting peer to identify\n      this video call.\n\
    \   time-stamp\n      Meta video frames carry a 16-bit time-stamp, which is the\
    \ lower 16\n      bits of the transmitting peer's full 32-bit time-stamp for the\n\
    \      call.  When this time-stamp wraps, a Full Frame SHOULD be sent to\n   \
    \   notify the remote peer that the time-stamp has been reset to 0.\n   Following\
    \ the time-stamp is the actual video stream data.  Meta video\n   frames are implicitly\
    \ defined to be of type 'video frame' (frametype\n   3; see Section 8.2).  The\
    \ video CODEC used is implicitly defined by\n   the subclass of the most recent\
    \ full video frame of a call.\n                        1                   2 \
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |F|         Meta Indicator      |V|      Source Call Number     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |?|          time-stamp         |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n   |                                      \
    \   Data                  |\n   :                                            \
    \                   :\n   |                                                  \
    \             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 7: Meta Video Frame Binary Format\n"
- title: 8.1.3.2.  Meta Trunk Frames
  contents:
  - "8.1.3.2.  Meta Trunk Frames\n   IAX natively supports two methods of trunking\
    \ multiple media streams\n   between two peers into a single association.  The\
    \ first method sends\n   a standard meta header, along with a single 32-bit time-stamp\n\
    \   describing the transmission time of the trunk frame.  Following the\n   time-stamp\
    \ are one or more media frames consisting of the call number\n   and the length\
    \ in octets of the stream data included in the frame.\n   The second method of\
    \ trunking is very similar to the first.  It sends\n   a standard meta header,\
    \ including the 32-bit time-stamp describing\n   the time of transmission of the\
    \ trunk frame.  But the media frames\n   included in the trunk are actually complete\
    \ Mini Frames, including\n   the 16-bit time-stamp for each call.  The first method\
    \ uses slightly\n   less bandwidth (2 fewer octets per call in the trunk), while\
    \ the\n   second method maintains the individual time-stamps for each call so\n\
    \   that jitter buffering can use the actual time-stamps associated with\n   a\
    \ call instead of the (less accurate) time-stamp representing the\n   entire trunk.\
    \  Either method is permissible for trunking.\n   Field descriptions:\n   'F'\
    \ bit\n      Meta trunk frames MUST have the 'F' bit set to 0 to indicate that\n\
    \      they are not Full Frames.\n   Meta Indicator\n      The meta indicator\
    \ is a 15-bit field of all zeroes, used to\n      indicate that the frame is a\
    \ Meta Frame.  Meta Frames are\n      identifiable because the first 16 bits will\
    \ always be zero in any\n      Meta Frame, whereas Full or Mini Frames will have\
    \ either the 'F'\n      bit set or some (nonzero) value for the source call number\
    \ (or\n      both).\n   'V' bit\n      The 'V' bit in a meta trunk frame is set\
    \ to 0 to specify that the\n      frame is not a meta video frame.\n   Meta Command\n\
    \      This 7-bit field identifies whether or not the Meta Frame is a\n      trunk.\
    \  A value of '1' indicates that the frame is a meta trunk\n      frame.  All\
    \ other values are reserved for future use.  See the\n      IANA Registry for\
    \ additional IAX Meta Command Assignments.\n   Command Data\n      This 8-bit\
    \ field specifies flags for options that apply to a\n      trunked call.  The\
    \ least significant bit of the field is the\n      'trunk time-stamps' flag. \
    \ A value of 0 indicates that the calls\n      in the trunk do not include their\
    \ individual time-stamps.  A value\n      of 1 indicates that the calls do each\
    \ include their own time-\n      stamp.  All other bits are reserved for future\
    \ use.\n   time-stamp\n      Meta trunk frames carry a 32-bit time-stamp, which\
    \ represents the\n      actual time of transmission of the trunk frame.  This\
    \ is distinct\n      from the time-stamps of the calls included in the trunk.\n\
    \   Following the 32-bit time-stamp is one or more trunked calls.  If the\n  \
    \ 'trunk time-stamps' flag is set to 0, each entry consists of 2 octets\n   specifying\
    \ the source call number of the call, 2 octets specifying\n   the length in octets\
    \ of the media data, and then the media data.  If\n   the 'trunk time-stamps'\
    \ flag is set to 1, each entry consists of 2\n   octets specifying the length\
    \ in octets of the media data, and then a\n   Mini Frame (2 octets specifying\
    \ source call number, 2 octets\n   specifying 16-bit time-stamp, and the media\
    \ data).  The following two\n   diagrams help illustrate this structure.\n   \
    \                     1                   2                   3\n    0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |F|         Meta Indicator      |V|Meta Command | Cmd Data (0)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                            time-stamp                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |R|      Source Call Number     |     Data Length (in octets)   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   :  \
    \                           Data                              :\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                   .\n                                   .\n\
    \                                   .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |R|      Source Call Number     |     Data Length (in octets)   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   :  \
    \                           Data                              :\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Figure 8: Meta Trunk Frame Binary Format (trunk time-stamps 0)\n      \
    \                  1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |F|         Meta Indicator      |V|Meta Command | Cmd Data (1)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                            time-stamp                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Data Length (in octets)   |R|     Source Call Number      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           time-stamp          |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n   |                                      \
    \ Data                    |\n   :                                            \
    \                   :\n   |                                                  \
    \             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                   .\n                                   .\n\
    \                                   .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Data Length (in octets)   |R|     Source Call Number      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           time-stamp          |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n   |                                      \
    \ Data                    |\n   :                                            \
    \                   :\n   |                                                  \
    \             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Figure 9: Meta Trunk Frame Binary Format (trunk time-stamps 1)\n"
- title: 8.1.4.  Encrypted Frames
  contents:
  - "8.1.4.  Encrypted Frames\n   All of the above frames may be encrypted.  The header\
    \ call numbers\n   are passed through in the clear, first 4 bytes for a Full Frame\
    \ or 2\n   bytes for a Mini Frame.  The remainder of the frame is padded with\n\
    \   between 16 and 32 bytes of random data, then encrypted with AES each\n   block\
    \ being XOR'd with the previous block.  The padding is added at\n   the front\
    \ of the data.\n   Figure 10 shows a padded Full Frame before encryption, and\
    \ Figure 11\n   shows the frame after encryption.  Other frame types follow the\
    \ same\n   procedure, except the cleartext portion is shorter, as described\n\
    \   above.\n                        1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |F|     Source Call Number      |R|   Destination Call Number   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         12 Random bytes                       |\n   |  \
    \                                                             |\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               28  Random bits                         |padding|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   : between\
    \ 0 and 15 (as indicated by the padding field above)    :\n   :              \
    \           Random bytes                          :\n   |                    \
    \                                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   :  \
    \                  Remainder of Actual Frame                  :\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 10: Full Frame before encryption\n   Since AES requires\
    \ a 16 byte block size, some padding is essential.\n   This padding has been placed\
    \ at the beginning of the payload because\n   it makes it more difficult to take\
    \ advantage of the predictability of\n   the IAX frame header.  For example, the\
    \ first encrypted Frame an IAX\n   client sends within an incoming IAX call is\
    \ entirely predictable: It\n   is always an ACK - where even the time-stamp is\
    \ guessable as it is\n   the time the AUTHREP packet was sent.\n             \
    \           1                   2                   3\n    0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |F|     Source Call Number      |R|   Destination Call Number   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Encrypted data                        |\n   |  \
    \              Multiple of 16 bytes                           |\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 11: Frame after encryption\n   The same encryption\
    \ rules apply to the Mini Frames, except that the\n   initial unencrypted portion\
    \ is only 2 bytes.\n"
- title: 8.2.  Frame Types
  contents:
  - "8.2.  Frame Types\n   The IAX protocol specifies 10 types of possible frames\
    \ for the\n   \"frametype\" field of a Full Frame.  They are described in the\n\
    \   following subsections.\n"
- title: 8.2.1.  DTMF Frame
  contents:
  - "8.2.1.  DTMF Frame\n   The frame carries a single digit of DTMF (Dual Tone Multi-Frequency).\n\
    \   More information about DTMF can be found in RFC 4733 [RFC4733] and\n   [RFC4734].\n\
    \   For DTMF frames, the subclass is the actual DTMF digit carried by the\n  \
    \ frame.\n"
- title: 8.2.2.  Voice Frame
  contents:
  - "8.2.2.  Voice Frame\n   The frame carries voice data.\n   The subclass specifies\
    \ the audio format of the data.  Predefined\n   voice formats can be found in\
    \ Section 8.7.\n"
- title: 8.2.3.  Video Frame
  contents:
  - "8.2.3.  Video Frame\n   The frame carries video data.\n   The subclass specifies\
    \ the video format of the data.  Predefined\n   video formats can be found in\
    \ Section 8.7.\n"
- title: 8.2.4.  Control Frame
  contents:
  - "8.2.4.  Control Frame\n   The frame carries session control data, i.e., it refers\
    \ to control of\n   a device connected to an IAX endpoint.\n   The subclass is\
    \ a value from Section 8.3 describing the device\n   control signal.\n"
- title: 8.2.5.  Null Frame
  contents:
  - "8.2.5.  Null Frame\n   Frames with the Null value MUST NOT be transmitted.\n"
- title: 8.2.6.  IAX Frame
  contents:
  - "8.2.6.  IAX Frame\n   The frame carries control data that provides IAX protocol-specific\n\
    \   endpoint management.  This frametype is used to manage IAX protocol\n   interactions\
    \ that are generally independent of the type of endpoints.\n   The subclass is\
    \ a value from Section 8.4 describing an IAX event.\n"
- title: 8.2.7.  Text Frame
  contents:
  - "8.2.7.  Text Frame\n   The frame carries a non-control text message in UTF-8\
    \ [RFC3629]\n   format.\n   All text frames have a subclass of 0.\n"
- title: 8.2.8.  Image Frame
  contents:
  - "8.2.8.  Image Frame\n   The frame carries a single image.\n   The subclass describes\
    \ the format of the image from Section 8.7.\n"
- title: 8.2.9.  HTML Frame
  contents:
  - "8.2.9.  HTML Frame\n   The frame carries HTML data.\n   The subclass is a value\
    \ from the HTML Subclasses table in\n   Section 8.5.\n"
- title: 8.2.10.  Comfort Noise Frame
  contents:
  - "8.2.10.  Comfort Noise Frame\n   The frame carries comfort noise.\n   The subclass\
    \ is the level of comfort noise in -dBov.\n   The following table specifies valid\
    \ Frame Type Values:\n   +------+-------------+--------------------------+-------------------+\n\
    \   | TYPE | Description | Subclass Description     | Data Description  |\n  \
    \ +------+-------------+--------------------------+-------------------+\n   |\
    \ 0x01 | DTMF        | 0-9, A-D, *, #           | Undefined         |\n   |  \
    \    |             |                          |                   |\n   | 0x02\
    \ | Voice       | Audio Compression Format | Data              |\n   |      |\
    \             |                          |                   |\n   | 0x03 | Video\
    \       | Video Compression Format | Data              |\n   |      |        \
    \     |                          |                   |\n   | 0x04 | Control  \
    \   | See Control Frame Types  | Varies with       |\n   |      |            \
    \ |                          | subclass          |\n   |      |             |\
    \                          |                   |\n   | 0x05 | Null        | Undefined\
    \                | Undefined         |\n   |      |             |            \
    \              |                   |\n   | 0x06 | IAX Control | See IAX Protocol\
    \         | Information       |\n   |      |             | Messages          \
    \       | Elements          |\n   |      |             |                     \
    \     |                   |\n   | 0x07 | Text        | Always 0              \
    \   | Raw Text          |\n   |      |             |                         \
    \ |                   |\n   | 0x08 | Image       | Image Compression Format |\
    \ Raw image         |\n   |      |             |                          |  \
    \                 |\n   | 0x09 | HTML        | See HTML Frame Types     | Message\
    \ Specific  |\n   |      |             |                          |          \
    \         |\n   | 0x0A | Comfort     | Level in -dBov of        | None       \
    \       |\n   |      | Noise       | comfort noise            |              \
    \     |\n   +------+-------------+--------------------------+-------------------+\n\
    \   Refer to the IANA Registry for additional IAX Frame Type values.\n"
- title: 8.3.  Control Frames Subclasses
  contents:
  - "8.3.  Control Frames Subclasses\n   The following table specifies valid Control\
    \ Frame Subclasses:\n   +-------------+---------------+-------------------------------------+\n\
    \   | VALUE       | Name          | Description                         |\n  \
    \ +-------------+---------------+-------------------------------------+\n   |\
    \ 0x01        | Hangup        | The call has been hungup at the     |\n   |  \
    \           |               | remote end                          |\n   |    \
    \         |               |                                     |\n   | 0x02 \
    \       | Reserved      | Reserved for future use             |\n   |        \
    \     |               |                                     |\n   | 0x03     \
    \   | Ringing       | Remote end is ringing (ring-back)   |\n   |            \
    \ |               |                                     |\n   | 0x04        |\
    \ Answer        | Remote end has answered             |\n   |             |  \
    \             |                                     |\n   | 0x05        | Busy\
    \          | Remote end is busy                  |\n   |             |       \
    \        |                                     |\n   | 0x06        | Reserved\
    \      | Reserved for future use             |\n   |             |           \
    \    |                                     |\n   | 0x07        | Reserved    \
    \  | Reserved for future use             |\n   |             |               |\
    \                                     |\n   | 0x08        | Congestion    | The\
    \ call is congested               |\n   |             |               |      \
    \                               |\n   | 0x09        | Flash Hook    | Flash hook\
    \                          |\n   |             |               |             \
    \                        |\n   | 0x0a        | Reserved      | Reserved for future\
    \ use             |\n   |             |               |                      \
    \               |\n   | 0x0b        | Option        | Device-specific options\
    \ are being   |\n   |             |               | transmitted              \
    \           |\n   |             |               |                            \
    \         |\n   | 0x0c        | Key Radio     | Key Radio                    \
    \       |\n   |             |               |                                \
    \     |\n   | 0x0d        | Unkey Radio   | Unkey Radio                      \
    \   |\n   |             |               |                                    \
    \ |\n   | 0x0e        | Call Progress | Call is in progress                 |\n\
    \   |             |               |                                     |\n  \
    \ | 0x0f        | Call          | Call is proceeding                  |\n   |\
    \             | Proceeding    |                                     |\n   |  \
    \           |               |                                     |\n   | 0x10\
    \        | Hold          | Call is placed on hold              |\n   |       \
    \      |               |                                     |\n   | 0x11    \
    \    | Unhold        | Call is taken off hold              |\n   +-------------+---------------+-------------------------------------+\n\
    \   Refer to the IANA Registry for additional IAX Control Frame Subclass\n   values.\n"
- title: 8.4.  IAX Frames
  contents:
  - "8.4.  IAX Frames\n   Frames of type 'IAX' are used to provide management of IAX\
    \ endpoints.\n   They handle IAX signaling (e.g., call setup, maintenance, and\
    \ tear-\n   down).  They MAY also handle direct transmission of media data, but\n\
    \   this is not optimal for VoIP calls.  They do not carry session-\n   specific\
    \ control (e.g., device state), as this is the purpose of\n   Control Frames.\
    \  The IAX commands are listed and described below.\n   The following table specifies\
    \ all valid IAX Frame values:\n      +------+-----------+-----------------------------------------+\n\
    \      | Hex  | Name      | Description                             |\n      +------+-----------+-----------------------------------------+\n\
    \      | 0x01 | NEW       | Initiate a new call                     |\n      |\
    \      |           |                                         |\n      | 0x02 |\
    \ PING      | Ping request                            |\n      |      |      \
    \     |                                         |\n      | 0x03 | PONG      |\
    \ Ping or poke reply                      |\n      |      |           |      \
    \                                   |\n      | 0x04 | ACK       | Explicit acknowledgment\
    \                 |\n      |      |           |                              \
    \           |\n      | 0x05 | HANGUP    | Initiate call tear-down            \
    \     |\n      |      |           |                                         |\n\
    \      | 0x06 | REJECT    | Reject a call                           |\n      |\
    \      |           |                                         |\n      | 0x07 |\
    \ ACCEPT    | Accept a call                           |\n      |      |      \
    \     |                                         |\n      | 0x08 | AUTHREQ   |\
    \ Authentication request                  |\n      |      |           |      \
    \                                   |\n      | 0x09 | AUTHREP   | Authentication\
    \ reply                    |\n      |      |           |                     \
    \                    |\n      | 0x0a | INVAL     | Invalid message           \
    \              |\n      |      |           |                                 \
    \        |\n      | 0x0b | LAGRQ     | Lag request                           \
    \  |\n      |      |           |                                         |\n \
    \     | 0x0c | LAGRP     | Lag reply                               |\n      |\
    \      |           |                                         |\n      | 0x0d |\
    \ REGREQ    | Registration request                    |\n      |      |      \
    \     |                                         |\n      | 0x0e | REGAUTH   |\
    \ Registration authentication             |\n      |      |           |      \
    \                                   |\n      | 0x0f | REGACK    | Registration\
    \ acknowledgement            |\n      |      |           |                   \
    \                      |\n      | 0x10 | REGREJ    | Registration reject     \
    \                |\n      |      |           |                               \
    \          |\n      | 0x11 | REGREL    | Registration release                \
    \    |\n      |      |           |                                         |\n\
    \      | 0x12 | VNAK      | Video/Voice retransmit request          |\n      |\
    \      |           |                                         |\n      | 0x13 |\
    \ DPREQ     | Dialplan request                        |\n      |      |      \
    \     |                                         |\n      | 0x14 | DPREP     |\
    \ Dialplan reply                          |\n      |      |           |      \
    \                                   |\n      | 0x15 | DIAL      | Dial       \
    \                             |\n      |      |           |                  \
    \                       |\n      | 0x16 | TXREQ     | Transfer request       \
    \                 |\n      |      |           |                              \
    \           |\n      | 0x17 | TXCNT     | Transfer connect                   \
    \     |\n      |      |           |                                         |\n\
    \      | 0x18 | TXACC     | Transfer accept                         |\n      |\
    \      |           |                                         |\n      | 0x19 |\
    \ TXREADY   | Transfer ready                          |\n      |      |      \
    \     |                                         |\n      | 0x1a | TXREL     |\
    \ Transfer release                        |\n      |      |           |      \
    \                                   |\n      | 0x1b | TXREJ     | Transfer reject\
    \                         |\n      |      |           |                      \
    \                   |\n      | 0x1c | QUELCH    | Halt audio/video [media] transmission\
    \   |\n      |      |           |                                         |\n\
    \      | 0x1d | UNQUELCH  | Resume audio/video [media] transmission |\n      |\
    \      |           |                                         |\n      | 0x1e |\
    \ POKE      | Poke request                            |\n      |      |      \
    \     |                                         |\n      | 0x1f | Reserved  |\
    \ Reserved for future use                 |\n      |      |           |      \
    \                                   |\n      | 0x20 | MWI       | Message waiting\
    \ indication              |\n      |      |           |                      \
    \                   |\n      | 0x21 | UNSUPPORT | Unsupported message        \
    \             |\n      |      |           |                                  \
    \       |\n      | 0x22 | TRANSFER  | Remote transfer request                \
    \ |\n      |      |           |                                         |\n  \
    \    | 0x23 | Reserved  | Reserved for future use                 |\n      | \
    \     |           |                                         |\n      | 0x24 |\
    \ Reserved  | Reserved for future use                 |\n      |      |      \
    \     |                                         |\n      | 0x25 | Reserved  |\
    \ Reserved for future use                 |\n      +------+-----------+-----------------------------------------+\n\
    \   Refer to the IANA Registry for additional IAX Frame values.\n"
- title: 8.5.  HTML Command Subclasses
  contents:
  - "8.5.  HTML Command Subclasses\n   IAX HTML Command Subclasses:\n            \
    \      +--------+----------------------------+\n                  | NUMBER | DESCRIPTION\
    \                |\n                  +--------+----------------------------+\n\
    \                  | 0x01   | Sending a URL              |\n                 \
    \ |        |                            |\n                  | 0x02   | Data frame\
    \                 |\n                  |        |                            |\n\
    \                  | 0x04   | Beginning frame            |\n                 \
    \ |        |                            |\n                  | 0x08   | End frame\
    \                  |\n                  |        |                           \
    \ |\n                  | 0x10   | Load is complete           |\n             \
    \     |        |                            |\n                  | 0x11   | Peer\
    \ does not support HTML |\n                  |        |                      \
    \      |\n                  | 0x12   | Link URL                   |\n        \
    \          |        |                            |\n                  | 0x13 \
    \  | Unlink URL                 |\n                  |        |              \
    \              |\n                  | 0x14   | Reject Link URL            |\n\
    \                  +--------+----------------------------+\n   Refer to the IANA\
    \ Registry for additional IAX HTML Command Subclass\n   values.\n"
- title: 8.6.  Information Elements
  contents:
  - "8.6.  Information Elements\n   IAX messages sent as Full Frames MAY carry information\
    \ elements to\n   specify user- or call-specific data.  Information elements are\n\
    \   appended to a frame header in its data field.  Zero, one, or multiple\n  \
    \ information elements MAY be included with any IAX message.\n   Information elements\
    \ are coded as follows:\n      The first octet of any information element consists\
    \ of the \"IE\"\n      field.  The IE field is an identification number that defines\
    \ the\n      particular information element.  Table 1 lists the defined\n    \
    \  information elements and each information element is defined below\n      the\
    \ table.\n      The second octet of any information element is the \"data length\"\
    \n      field.  It specifies the length in octets of the information\n      element's\
    \ data field.\n      The remaining octet(s) of an information element contain\
    \ the\n      actual data being transmitted.  The representation of the data is\n\
    \      dependent on the particular information element as identified by\n    \
    \  its \"IE\" field.  Some information elements carry binary data, some\n    \
    \  carry UTF-8 [RFC3629] data, and some have no data field at all.\n      Elements\
    \ that carry UTF-8 MUST prepare strings as per [RFC3454]\n      and [RFC3491],\
    \ so that illegal characters, case folding, and other\n      characters properties\
    \ are handled and compared properly.  The data\n      representation for each\
    \ information element is described below.\n   The following table specifies the\
    \ Information Element Binary Format:\n                        1\n    0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      IE  \
    \     |  Data Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |          \
    \                     |\n   :             DATA              :\n   |          \
    \                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The following\
    \ is a table of the information elements IAX defines, and\n   a brief description\
    \ of each information element's purpose.  More\n   information about each IE may\
    \ be found below the table.\n   +------+----------------+-------------------------------------------+\n\
    \   | HEX  | NAME           | DESCRIPTION                               |\n  \
    \ +------+----------------+-------------------------------------------+\n   |\
    \ HEX  | NAME           | DESCRIPTION                               |\n   | 0x01\
    \ | CALLED NUMBER  | Number/extension being called             |\n   | 0x02 |\
    \ CALLING NUMBER | Calling number                            |\n   | 0x03 | CALLING\
    \ ANI    | Calling number ANI for billing            |\n   | 0x04 | CALLING NAME\
    \   | Name of caller                            |\n   | 0x05 | CALLED CONTEXT\
    \ | Context for number                        |\n   | 0x06 | USERNAME       |\
    \ Username (peer or user) for               |\n   |      |                | authentication\
    \                            |\n   | 0x07 | PASSWORD       | Password for authentication\
    \               |\n   | 0x08 | CAPABILITY     | Actual CODEC capability      \
    \             |\n   | 0x09 | FORMAT         | Desired CODEC format           \
    \           |\n   | 0x0a | LANGUAGE       | Desired language                 \
    \         |\n   | 0x0b | VERSION        | Protocol version                   \
    \       |\n   | 0x0c | ADSICPE        | CPE ADSI capability                  \
    \     |\n   | 0x0d | DNID           | Originally dialed DNID                 \
    \   |\n   | 0x0e | AUTHMETHODS    | Authentication method(s)                 \
    \ |\n   | 0x0f | CHALLENGE      | Challenge data for MD5/RSA                |\n\
    \   | 0x10 | MD5 RESULT     | MD5 challenge result                      |\n  \
    \ | 0x11 | RSA RESULT     | RSA challenge result                      |\n   |\
    \ 0x12 | APPARENT ADDR  | Apparent address of peer                  |\n   | 0x13\
    \ | REFRESH        | When to refresh registration              |\n   | 0x14 |\
    \ DPSTATUS       | Dialplan status                           |\n   | 0x15 | CALLNO\
    \         | Call number of peer                       |\n   | 0x16 | CAUSE   \
    \       | Cause                                     |\n   | 0x17 | IAX UNKNOWN\
    \    | Unknown IAX command                       |\n   | 0x18 | MSGCOUNT     \
    \  | How many messages waiting                 |\n   | 0x19 | AUTOANSWER     |\
    \ Request auto-answering                    |\n   | 0x1a | MUSICONHOLD    | Request\
    \ musiconhold with QUELCH           |\n   | 0x1b | TRANSFERID     | Transfer Request\
    \ Identifier               |\n   | 0x1c | RDNIS          | Referring DNIS    \
    \                        |\n   | 0x1d | Reserved       | Reserved for future use\
    \                   |\n   | 0x1e | Reserved       | Reserved for future use  \
    \                 |\n   | 0x1f | DATETIME       | Date/Time                  \
    \               |\n   | 0x20 | Reserved       | Reserved for future use      \
    \             |\n   | 0x21 | Reserved       | Reserved for future use        \
    \           |\n   | 0x22 | Reserved       | Reserved for future use          \
    \         |\n   | 0x23 | Reserved       | Reserved for future use            \
    \       |\n   | 0x24 | Reserved       | Reserved for future use              \
    \     |\n   | 0x25 | Reserved       | Reserved for future use                \
    \   |\n   | 0x26 | CALLINGPRES    | Calling presentation                     \
    \ |\n   | 0x27 | CALLINGTON     | Calling type of number                    |\n\
    \   | 0x28 | CALLINGTNS     | Calling transit network select            |\n  \
    \ | 0x29 | SAMPLINGRATE   | Supported sampling rates                  |\n   |\
    \ 0x2a | CAUSECODE      | Hangup cause                              |\n   | 0x2b\
    \ | ENCRYPTION     | Encryption format                         |\n   | 0x2c |\
    \ ENCKEY         | Reserved for future Use                   |\n   | 0x2d | CODEC\
    \ PREFS    | CODEC Negotiation                         |\n   | 0x2e | RR JITTER\
    \      | Received jitter, as in RFC 3550           |\n   | 0x2f | RR LOSS    \
    \    | Received loss, as in RFC 3550             |\n   | 0x30 | RR PKTS      \
    \  | Received frames                           |\n   | 0x31 | RR DELAY       |\
    \ Max playout delay for received frames in  |\n   |      |                | ms\
    \                                        |\n   | 0x32 | RR DROPPED     | Dropped\
    \ frames (presumably by jitter      |\n   |      |                | buffer)  \
    \                                 |\n   | 0x33 | RR OOO         | Frames received\
    \ Out of Order              |\n   | 0x34 | OSPTOKEN       | OSP Token Block  \
    \                         |\n   +------+----------------+-------------------------------------------+\n\
    \                 Table 1: Information Element Definitions\n   Refer to the IANA\
    \ Registry for additional IAX Information Element\n   values.\n"
- title: 8.6.1.  CALLED NUMBER
  contents:
  - "8.6.1.  CALLED NUMBER\n   The purpose of the CALLED NUMBER information element\
    \ is to indicate\n   the number or extension being called.  It carries UTF-8-encoded\
    \ data.\n   The CALLED NUMBER information element MUST use UTF-8 encoding and\
    \ not\n   numeric data because destinations are not limited to E.164 numbers\n\
    \   ([E164]), national numbers, or even digits.  It is possible for a\n   number\
    \ or extension to include non-numeric characters.  The CALLED\n   NUMBER IE MAY\
    \ contain a SIP URI, [RFC3261] or a URI in any other\n   format.  The ability\
    \ to serve a CALLED NUMBER is server dependent.\n   The CALLED NUMBER information\
    \ element is generally sent with IAX NEW,\n   DPREQ, DPREP, DIAL, and TRANSFER\
    \ messages.\n                        1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x01     |  Data Length  |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                               |\n\
    \   :  UTF-8-encoded CALLED NUMBER  :\n   |                               |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.2.  CALLING NUMBER
  contents:
  - "8.6.2.  CALLING NUMBER\n   The purpose of the CALLING NUMBER information element\
    \ is to indicate\n   the number or extension of the calling entity to the remote\
    \ peer.  It\n   carries UTF-8-encoded data.\n   The CALLING NUMBER information\
    \ element is usually sent with IAX NEW\n   messages.\n                       \
    \ 1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0x02     |  Data Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |\n   : UTF-8-encoded CALLING NUMBER  :\n\
    \   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.3.  CALLING ANI
  contents:
  - "8.6.3.  CALLING ANI\n   The purpose of the CALLING ANI information element is\
    \ to indicate the\n   calling number ANI (Automatic Number Identification) for\
    \ billing.  It\n   carries UTF-8-encoded data.\n   The CALLING ANI information\
    \ element MAY be sent with an IAX NEW\n   message, but it is not required.\n \
    \                       1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0x03     |  Data Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |\n   :   UTF-8-encoded CALLING ANI   :\n\
    \   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.4.  CALLING NAME
  contents:
  - "8.6.4.  CALLING NAME\n   The purpose of the CALLING NAME information element\
    \ is to indicate\n   the calling name of the transmitting peer.  It carries UTF-8-encoded\n\
    \   data.\n   The CALLING NAME information element is usually sent with IAX NEW\n\
    \   messages.\n                        1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x04     |  Data Length  |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                               |\n\
    \   :   UTF-8-encoded CALLING NAME  :\n   |                               |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.5.  CALLED CONTEXT
  contents:
  - "8.6.5.  CALLED CONTEXT\n   The purpose of the CALLED CONTEXT information element\
    \ is to indicate\n   the context (or partition) of the remote peer's dialplan\
    \ that the\n   CALLED NUMBER is interpreted.  It carries UTF-8-encoded data.\n\
    \   The CALLED CONTEXT information element MAY be sent with IAX NEW or\n   TRANSFER\
    \ messages, though it is not required.\n                        1\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x05\
    \     |  Data Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |          \
    \                     |\n   : UTF-8-encoded CALLED CONTEXT  :\n   |          \
    \                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.6.  USERNAME
  contents:
  - "8.6.6.  USERNAME\n   The purpose of the USERNAME information element is to specify\
    \ the\n   identity of the user participating in an IAX message exchange.  It\n\
    \   carries UTF-8-encoded data.\n   The USERNAME information element MAY be sent\
    \ with IAX NEW, AUTHREQ,\n   REGREQ, REGAUTH, or REGACK messages, or any time\
    \ a peer needs to\n   identify a user.\n                        1\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x06\
    \     |  Data Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |          \
    \                     |\n   :     UTF-8-encoded USERNAME    :\n   |          \
    \                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.7.  CAPABILITY
  contents:
  - "8.6.7.  CAPABILITY\n   The purpose of the CAPABILITY information element is to\
    \ indicate the\n   media CODEC capabilities of an IAX peer.  Its data is represented\
    \ in\n   a 4-octet bitmask according to Section 8.7.  Multiple CODECs MAY be\n\
    \   specified by logically OR'ing them into the CAPABILITY information\n   element.\n\
    \   The CAPABILITY information element is sent with IAX NEW messages if\n   appropriate\
    \ for the CODEC negotiation method the peer is using.\n                      \
    \  1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0x08     |      0x04     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | CAPABILITY according to Media |\n   | Format Subclass Values Table  |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.8.  FORMAT
  contents:
  - "8.6.8.  FORMAT\n   The purpose of the FORMAT information element is to indicate\
    \ a single\n   preferred media CODEC.  When sent with a NEW message, the indicated\n\
    \   CODEC is the desired CODEC an IAX peer wishes to use for a call.\n   When\
    \ sent with an ACCEPT message, it indicates the actual CODEC that\n   has been\
    \ selected for the call.  Its data is represented in a 4-octet\n   bitmask according\
    \ to Section 8.7.  Only one CODEC MUST be specified\n   in the FORMAT information\
    \ element.\n                        1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x09     |      0x04     |\n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |   FORMAT according to Media   |\n \
    \  | Format Subclass Values Table  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.9.  LANGUAGE
  contents:
  - "8.6.9.  LANGUAGE\n   The purpose of the LANGUAGE information element is to indicate\
    \ the\n   language in which the transmitting peer would like the remote peer to\n\
    \   send signaling information.  It carries UTF-8-encoded data and tags\n   should\
    \ be selected per [RFC5646] and [RFC4647].\n   The LANGUAGE information element\
    \ MAY be sent with an IAX NEW message.\n                        1\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x0a\
    \     |  Data Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |          \
    \                     |\n   :     UTF-8-encoded LANGUAGE    :\n   |          \
    \                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.10.  VERSION
  contents:
  - "8.6.10.  VERSION\n   The purpose of the VERSION information element is to indicate\
    \ the\n   protocol version the peer is using.  Peers at each end of a call MUST\n\
    \   use the same protocol version.  Currently, the only supported version\n  \
    \ is 2.  The data field of the VERSION information element is 2 octets\n   long.\n\
    \   The VERSION information element MUST be sent with an IAX NEW message.\n  \
    \ When sent, the VERSION information element MUST be the first IE in\n   the message.\n\
    \                        1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0x0b     |      0x02     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            0x0002             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.11.  ADSICPE
  contents:
  - "8.6.11.  ADSICPE\n   The purpose of the ADSICPE information element is to indicate\
    \ the CPE\n   (Customer Premises Equipment) ADSI (Analog Display Services\n  \
    \ Interface) capability.  The data field of the ADSICPE information\n   element\
    \ is 2 octets long.\n   The ADSICPE information element MAY be sent with an IAX\
    \ NEW message.\n                        1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x0c     |      0x02     |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |       ADSICPE Capability      |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.12.  DNID
  contents:
  - "8.6.12.  DNID\n   The purpose of the DNID information element is to indicate\
    \ the Dialed\n   Number ID, which may differ from the 'called number'.  It carries\n\
    \   UTF-8-encoded data.\n   The DNID information element MAY be sent with an IAX\
    \ NEW message.\n                        1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x0d     |  Data Length  |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                               |\n\
    \   :    UTF-8-encoded DNID Data    :\n   |                               |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.13.  AUTHMETHODS
  contents:
  - "8.6.13.  AUTHMETHODS\n   The purpose of the AUTHMETHODS information element is\
    \ to indicate the\n   authentication methods a peer accepts.  It is sent as a\
    \ bitmask two\n   octets long.  The table below lists the valid authentication\
    \ methods.\n   The AUTHMETHODS information element MUST be sent with IAX AUTHREQ\
    \ and\n   REGAUTH messages.\n                        1\n    0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x0e     |  \
    \    0x02     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  Valid Authentication\
    \ Methods |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The following table lists\
    \ valid values for authentication:\n                   +--------+--------------------------+\n\
    \                   | METHOD | DESCRIPTION              |\n                  \
    \ +--------+--------------------------+\n                   | 0x0001 | Reserved\
    \ (was Plaintext) |\n                   |        |                          |\n\
    \                   | 0x0002 | MD5                      |\n                  \
    \ |        |                          |\n                   | 0x0004 | RSA   \
    \                   |\n                   +--------+--------------------------+\n\
    \   Refer to the IANA Registry for additional IAX Authentication Method\n   values.\n"
- title: 8.6.14.  CHALLENGE
  contents:
  - "8.6.14.  CHALLENGE\n   The purpose of the CHALLENGE information element is to\
    \ offer the MD5\n   or RSA challenge to be used for authentication.  It carries\
    \ the\n   actual UTF-8-encoded challenge data.\n   The CHALLENGE information element\
    \ MUST be sent with IAX AUTHREQ and\n   REGAUTH messages.\n                  \
    \      1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0x0f     |  Data Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |\n   :  UTF-8-encoded Challenge Data :\n\
    \   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.15.  MD5 RESULT
  contents:
  - "8.6.15.  MD5 RESULT\n   The purpose of the MD5 RESULT information element is\
    \ to offer an MD5\n   response to an authentication CHALLENGE.  It carries the\
    \ UTF-8-\n   encoded challenge result.  The MD5 Result value is computed by taking\n\
    \   the MD5 [RFC1321] digest of the challenge string and the password\n   string.\n\
    \   The MD5 RESULT information element MAY be sent with IAX AUTHREP and\n   REGREQ\
    \ messages if an AUTHREQ or REGAUTH and appropriate CHALLENGE\n   has been received.\
    \  This information element MUST NOT be sent except\n   in response to a CHALLENGE.\n\
    \                        1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     0x10      |  Data Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |\n   :    UTF-8-encoded MD5 Result   :\n\
    \   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.16.  RSA RESULT
  contents:
  - "8.6.16.  RSA RESULT\n   The purpose of the RSA RESULT information element is\
    \ to offer an RSA\n   response to an authentication CHALLENGE.  It carries the\
    \ UTF-8-\n   encoded challenge result.  The result is computed as follows: first,\n\
    \   compute the SHA1 digest [RFC3174] of the challenge string and second,\n  \
    \ RSA sign the SHA1 digest using the private RSA key as specified in\n   PKCS\
    \ #1 v2.0 [PKCS].  The RSA keys are stored locally.\n   Upon receiving an RSA\
    \ RESULT information element, its value must be\n   verified with the sender's\
    \ public key to match the SHA1 digest\n   [RFC3174] of the challenge string.\n\
    \   The RSA RESULT information element MAY be sent with IAX AUTHREP and\n   REGREQ\
    \ messages if an AUTHREQ or REGAUTH and appropriate CHALLENGE\n   have been received.\
    \  This information element MUST NOT be sent except\n   in response to a CHALLENGE.\n\
    \                        1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0x11     |  Data Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |\n   :    UTF-8-encoded RSA Result   :\n\
    \   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.17.  APPARENT ADDR
  contents:
  - "8.6.17.  APPARENT ADDR\n   The purpose of the APPARENT ADDR information element\
    \ is to indicate\n   the perceived network connection information used to reach\
    \ a peer,\n   which may differ from the actual address when the peer is behind\
    \ NAT.\n   The APPARENT ADDR IE is populated using the source address values of\n\
    \   the UDP and IP headers in the IAX message to which this response is\n   generated.\
    \  The data field of the APPARENT ADDR information element\n   is the same as\
    \ the POSIX sockaddr struct for the address family in\n   use (i.e., sockaddr_in\
    \ for IPv4, sockaddr_in6 for IPv6).  The data\n   length depends on the type of\
    \ address being represented.\n   The APPARENT ADDR information element MUST be\
    \ sent with IAX TXREQ and\n   REGACK messages.  When used with a TXREQ message,\
    \ the APPARENT ADDR\n   MUST specify the address of the peer to which the local\
    \ peer is\n   trying to transfer its end of the connection.  When used with a\n\
    \   REGACK message, the APPARENT ADDR MUST specify the address it uses to\n  \
    \ reach the peer (which may be different than the address the peer\n   perceives\
    \ itself as in the case of NAT or multi-homed peer machines).\n   The data field\
    \ of the APPARENT ADDR information element is the same\n   as the Linux struct\
    \ sockaddr_in: two octets for the address family,\n   two octets for the port\
    \ number, four octets for the IPv4 address, and\n   8 octets of padding consisting\
    \ of all bits set to 0.  Thus, the total\n   length of the APPARENT ADDR information\
    \ element is 18 octets.\n   The following diagram demonstrates the generic APPARENT\
    \ ADDR format:\n                        1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x12     |  Data Length  |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |        sockaddr struct        |\n\
    \   :   for address family in use   :\n   |                               |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The following diagram demonstrates the\
    \ APPARENT ADDR format for an\n   IPv4 address:\n                        1\n \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |      0x12     |      0x10     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |            0x0200             | <- Address family (INET)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            0x11d9             | <- Portno (default 4569)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      32-bit IP address        |\n   |                               |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                               |\n\
    \   |      8 octets of all 0s       |\n   |   (padding in sockaddr_in)    |\n\
    \   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The following diagram demonstrates the APPARENT ADDR format for an\n   IPv6\
    \ address:\n                        1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x12     |      0x1C     |\n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |            0x0A00             | <-\
    \ Address family (INET6)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         \
    \   0x11d9             | <- Portno (default 4569)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           32 bits             | <- Flow information\n   |              \
    \                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      128-bit IP\
    \ address       | <- Ip6 Address\n   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           32 bits             | <- Scope ID\n   |                      \
    \         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.18.  REFRESH
  contents:
  - "8.6.18.  REFRESH\n   The purpose of the REFRESH information element is to indicate\
    \ the\n   number of seconds before an event expires.  Its data field is 2\n  \
    \ octets long.\n   The REFRESH information element is used with IAX REGREQ, REGACK,\
    \ and\n   DPREP messages.  When sent with a REGREQ, it is a request that the\n\
    \   peer maintaining the registration set the timeout to REFRESH seconds.\n  \
    \ When sent with a DPREP or REGACK, it is informational and tells a\n   remote\
    \ peer when the local peer will no longer consider the event\n   valid.  The REFRESH\
    \ sent with a DPREP tells a peer how long it SHOULD\n   store the received dialplan\
    \ response.\n   If the REFRESH information element is not received with a DPREP,\
    \ the\n   expiration of the cache data is assumed to be 10 minutes.  If the\n\
    \   REFRESH information element is not received with a REGACK,\n   registration\
    \ expiration is assumed to occur after 60 seconds.\n                        1\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \  |      0x13     |      0x02     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \  |  2 octets specifying refresh  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.19.  DPSTATUS
  contents:
  - "8.6.19.  DPSTATUS\n   The purpose of the DPSTATUS information element is to indicate\
    \ the\n   status of a CALLED NUMBER in a remote dialplan.  Its data field is a\n\
    \   2-octet bitmask specifying flags from the table below.  Exactly one\n   of\
    \ the low 3 bits MUST be set, and zero, 1, or 2 of the high 2 bits\n   MAY be\
    \ set.\n   The DPSTATUS information element MUST be sent with IAX DPREP\n   messages,\
    \ as it is the payload of the dialplan response.\n                        1\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \  |      0x14     |      0x02     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \  |M|R|                     |N|C|E|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \  The following table lists the dialplan status flags:\n                 +--------+------------------------------+\n\
    \                 | FLAG   | DESCRIPTION                  |\n                \
    \ +--------+------------------------------+\n                 | 0x0001 | Exists\
    \                       |\n                 |        |                       \
    \       |\n                 | 0x0002 | Can exist                    |\n      \
    \           |        |                              |\n                 | 0x0004\
    \ | Non-existent                 |\n                 |        |              \
    \                |\n                 | 0x4000 | Retain dialtone (ignorepat)  |\n\
    \                 |        |                              |\n                \
    \ | 0x8000 | More digits may match number |\n                 +--------+------------------------------+\n\
    \   Refer to the IANA Registry for additional IAX dialplan status values.\n"
- title: 8.6.20.  CALLNO
  contents:
  - "8.6.20.  CALLNO\n   The purpose of the CALLNO information element is to indicate\
    \ the call\n   number a remote peer needs to use as a destination call number\
    \ to\n   identify a call being transferred.  The peer managing a transfer\n  \
    \ sends the CALLNO for one transfer endpoint to the other transfer\n   endpoint\
    \ so that it knows what call number to specify for the\n   transfer.  The data\
    \ field is 2 octets long and specifies a call\n   number in the same manner as\
    \ a source call number or destination call\n   number is specified in a frame\
    \ header.\n   The CALLNO information element MUST be sent with IAX TXREQ, TXREADY,\n\
    \   and TXREL messages.  Transferring cannot succeed if the CALLNO IE is\n   not\
    \ included with the appropriate transfer messages.\n                        1\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \  |     0x15      |      0x02     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \  |  Callno of transfer recipient |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.21.  CAUSE
  contents:
  - "8.6.21.  CAUSE\n   The purpose of the CAUSE information element is to indicate\
    \ the\n   reason an event occurred.  It carries a description of the CAUSE of\n\
    \   the event as UTF-8-encoded data.  Notification of the event itself is\n  \
    \ handled at the message level.\n   The CAUSE information element SHOULD be sent\
    \ with IAX HANGUP, REJECT,\n   REGREJ, and TXREJ messages.\n                 \
    \       1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0x16     |  Data Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |\n   :  UTF-8-encoded CAUSE of event :\n\
    \   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.22.  IAX UNKNOWN
  contents:
  - "8.6.22.  IAX UNKNOWN\n   The purpose of the IAX UNKNOWN information element is\
    \ to indicate\n   that a received IAX command was unknown or unrecognized.  The\
    \ 1-octet\n   data field contains the subclass of the received frame that was\n\
    \   unrecognized.\n   The IAX UNKNOWN information element MUST be sent with IAX\
    \ UNSUPPORT\n   messages.\n                        1\n    0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x17     |    \
    \  0x01     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   | Rec'd Subclass|\n  \
    \ +-+-+-+-+-+-+-+-+\n"
- title: 8.6.23.  MSGCOUNT
  contents:
  - "8.6.23.  MSGCOUNT\n   The purpose of the MSGCOUNT information element is to indicate\
    \ how\n   many voicemail messages are waiting in a registered user's mailbox.\n\
    \   The data field is 2 octets long.  If it is set to all 1s, there is at\n  \
    \ least one message present.  Any other value specifies the number of\n   old\
    \ messages in the high 8 bits and the number of new messages in the\n   low 8\
    \ bits.\n   The IAX MSGCOUNT information element MAY be sent with IAX REGACK\n\
    \   messages.\n                        1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x18     |      0x02     |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  Old messages |  New messages |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.24.  AUTOANSWER
  contents:
  - "8.6.24.  AUTOANSWER\n   The purpose of the AUTOANSWER information element is\
    \ to request that\n   a call be auto-answered upon receipt of a NEW message that\
    \ includes\n   the AUTOANSWER information element.  Note that this is a request\
    \ and\n   may or may not be granted by the remote peer.  There is no data field\n\
    \   with this information element, as its presence alone indicates all\n   necessary\
    \ information.\n   The AUTOANSWER information element MAY be sent with IAX NEW\
    \ messages.\n                        1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x19     |      0x00     |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.25.  MUSICONHOLD
  contents:
  - "8.6.25.  MUSICONHOLD\n   The purpose of the MUSICONHOLD information element is\
    \ to request that\n   music-on-hold be played while a call is in the QUELCH state.\
    \  The\n   optional data field specifies a music-on-hold class to be used, as\n\
    \   UTF-8-encoded data.  In the absence of a data field, no music-on-hold\n  \
    \ class is specified and the IE SHOULD be treated as a generic request\n   for\
    \ music-on-hold.\n   The MUSICONHOLD information element MAY be sent with IAX\
    \ QUELCH\n   messages.\n   If no MUSICONHOLD information element is received,\
    \ music-on-hold is\n   not requested.\n                        1\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x1a\
    \     |  Data Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |          \
    \                     |\n   :  Optional Music On Hold Class :\n   |          \
    \                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.26.  TRANSFERID
  contents:
  - "8.6.26.  TRANSFERID\n   The purpose of the TRANSFERID information element is\
    \ to identify a\n   transfer across all three peers participating in a transfer\
    \ event.\n   It carries a number, four octets long, that SHOULD be unique for\
    \ the\n   duration of the transfer process.\n   The TRANSFERID information element\
    \ SHOULD be sent with IAX TXREQ and\n   TXCNT messages to aid the peers involved\
    \ in a transfer in identifying\n   the proper calls.  It is not required as long\
    \ as the transferring\n   peers can positively identify the calls participating\
    \ in the transfer\n   without the TRANSFERID.\n                        1\n   \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |\
    \      0x1b     |      0x04     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |\
    \       4-octet transfer        |\n   |           identifier          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.27.  RDNIS
  contents:
  - "8.6.27.  RDNIS\n   The purpose of the RDNIS (Redirected Dialed Number Identification\n\
    \   Service) information element is to indicate the referring DNIS.  It\n   carries\
    \ UTF-8-encoded data.\n                        1\n    0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x1c     |  Data Length\
    \  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                             \
    \  |\n   :      UTF-8-encoded RDNIS      :\n   |                             \
    \  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.28.  DATETIME
  contents:
  - "8.6.28.  DATETIME\n   The DATETIME information element indicates the time a message\
    \ is\n   sent.  This differs from the header time-stamp because that time-\n \
    \  stamp begins at 0 for each call, while the DATETIME is a call-\n   independent\
    \ value representing the actual real-world time.  The data\n   field of a DATETIME\
    \ information element is four octets long and\n   stores the time as follows:\
    \ the 5 least significant bits are seconds,\n   the next 6 least significant bits\
    \ are minutes, the next least\n   significant 5 bits are hours, the next least\
    \ significant 5 bits are\n   the day of the month, the next least significant\
    \ 4 bits are the\n   month, and the most significant 7 bits are the year.  The\
    \ year is\n   offset from 2000, and the month is a 1-based index (i.e., January\
    \ ==\n   1, February == 2, etc.).  The timezone of the clock MUST be UTC to\n\
    \   avoid confusion between the peers.\n   The DATETIME information element SHOULD\
    \ be sent with IAX NEW and\n   REGACK messages.  However, it is strictly informational.\n\
    \                        1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0x1f     |      0x04     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     year    | month |   day   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  hours  |  minutes  | seconds |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.29.  CALLINGPRES
  contents:
  - "8.6.29.  CALLINGPRES\n   The purpose of the CALLINGPRES information element is\
    \ to indicate the\n   calling presentation of a caller.  The data field is 1 octet\
    \ long and\n   contains a value from the table below.\n   The CALLINGPRES information\
    \ element MUST be sent with IAX NEW\n   messages.\n                        1\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \  |      0x26     |      0x01     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \  | Calling Pres. |\n   +-+-+-+-+-+-+-+-+\n   The following table lists valid\
    \ calling presentation values:\n              +------+--------------------------------------+\n\
    \              | FLAG | PRESENTATION                         |\n             \
    \ +------+--------------------------------------+\n              | 0x00 | Allowed\
    \ user/number not screened     |\n              |      |                     \
    \                 |\n              | 0x01 | Allowed user/number passed screen\
    \    |\n              |      |                                      |\n      \
    \        | 0x02 | Allowed user/number failed screen    |\n              |    \
    \  |                                      |\n              | 0x03 | Allowed network\
    \ number               |\n              |      |                             \
    \         |\n              | 0x20 | Prohibited user/number not screened  |\n \
    \             |      |                                      |\n              |\
    \ 0x21 | Prohibited user/number passed screen |\n              |      |      \
    \                                |\n              | 0x22 | Prohibited user/number\
    \ failed screen |\n              |      |                                    \
    \  |\n              | 0x23 | Prohibited network number            |\n        \
    \      |      |                                      |\n              | 0x43 |\
    \ Number not available                 |\n              +------+--------------------------------------+\n\
    \   Refer to the IANA Registry for additional IAX Calling Presentation\n   values.\n"
- title: 8.6.30.  CALLINGTON
  contents:
  - "8.6.30.  CALLINGTON\n   The purpose of the CALLINGTON information element is\
    \ to indicate the\n   calling type of number of a caller, according to ITU-T Recommendation\n\
    \   Q.931 specifications.  The data field is 1 octet long and contains\n   data\
    \ from the table below.\n   The CALLINGTON information element MUST be sent with\
    \ IAX NEW\n   messages.\n                        1\n    0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x27     |      0x01\
    \     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  Calling TON  |\n   +-+-+-+-+-+-+-+-+\n\
    \   The following table lists valid calling type of number values from\n   ITU-T\
    \ Recommendation Q.931:\n                    +-------+-------------------------+\n\
    \                    | VALUE | DESCRIPTION             |\n                   \
    \ +-------+-------------------------+\n                    | 0x00  | Unknown \
    \                |\n                    |       |                         |\n\
    \                    | 0x10  | International Number    |\n                   \
    \ |       |                         |\n                    | 0x20  | National\
    \ Number         |\n                    |       |                         |\n\
    \                    | 0x30  | Network Specific Number |\n                   \
    \ |       |                         |\n                    | 0x40  | Subscriber\
    \ Number       |\n                    |       |                         |\n  \
    \                  | 0x60  | Abbreviated Number      |\n                    |\
    \       |                         |\n                    | 0x70  | Reserved for\
    \ extension  |\n                    +-------+-------------------------+\n   Refer\
    \ to the IANA Registry for any additional IAX Calling Type of\n   Number values.\n"
- title: 8.6.31.  CALLINGTNS
  contents:
  - "8.6.31.  CALLINGTNS\n   The CALLINGTNS information element indicates the calling\
    \ transit\n   network selected for a call.  Values are chosen according to ITU-T\n\
    \   Recommendation Q.931 specifications.  The data field is two octets\n   long.\
    \  The first octet stores the network identification plan in the\n   least significant\
    \ four bits according to the first table below, and\n   the type of network in\
    \ the next three least significant bits\n   according to the second table below.\
    \  The second octet stores the\n   actual network identification in UTF-8-encoded\
    \ data.\n   The CALLINGTNS information element MUST be sent with IAX NEW\n   messages.\n\
    \                        1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0x28     |      0x02     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | | TON | Plan  | UTF-8 Net ID  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The following tables list the valid values for the data field of the\n   'calling\
    \ tns' IE.\n   Q.931 Network Identification Plan Values:\n                +------+----------------------------------+\n\
    \                | BITS | DESCRIPTION                      |\n               \
    \ +------+----------------------------------+\n                | 0000 | Unknown\
    \                          |\n                |      |                       \
    \           |\n                | 0001 | Caller Identification Code       |\n \
    \               |      |                                  |\n                |\
    \ 0011 | Data Network Identification Code |\n                +------+----------------------------------+\n\
    \   Refer to the IAX Transit Network Identification IANA Registry for any\n  \
    \ additional values.\n   Q.931 Type of Network Values:\n              +------+--------------------------------------+\n\
    \              | BITS | DESCRIPTION                          |\n             \
    \ +------+--------------------------------------+\n              | 000  | User\
    \ Specified                       |\n              |      |                  \
    \                    |\n              | 010  | National Network Identification\
    \      |\n              |      |                                      |\n    \
    \          | 011  | International Network Identification |\n              +------+--------------------------------------+\n\
    \   Refer to the IAX Type of Network IANA Registry for any additional\n   values.\n"
- title: 8.6.32.  SAMPLINGRATE
  contents:
  - "8.6.32.  SAMPLINGRATE\n   The purpose of the SAMPLINGRATE information element\
    \ is to specify to\n   a remote IAX peer the sampling rate in hertz of the audio\
    \ data being\n   the peer will use when sending data.  Its data field is 2 octets\n\
    \   long.\n   If the SAMPLINGRATE information element is not specified, a default\n\
    \   sampling rate of 8 kHz may be assumed.\n                        1\n    0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |    \
    \  0x29     |      0x02     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |    \
    \ Sampling Rate in Hertz    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.33.  CAUSECODE
  contents:
  - "8.6.33.  CAUSECODE\n   The purpose of the CAUSECODE information element is to\
    \ indicate the\n   reason a call was REJECTed or HANGUPed.  It derives from ITU-T\n\
    \   Recommendation Q.931.  The data field is one octet long and contains\n   an\
    \ entry from the table below.\n   The CAUSECODE information element SHOULD be\
    \ sent with IAX HANGUP,\n   REJECT, REGREJ, and TXREJ messages.\n            \
    \            1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0x2a     |      0x01     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Cause Code  |\n   +-+-+-+-+-+-+-+-+\n   +--------+----------------------------------------------------------+\n\
    \   | NUMBER | CAUSE                                                    |\n  \
    \ +--------+----------------------------------------------------------+\n   |\
    \ 1      | Unassigned/unallocated number                            |\n   |  \
    \      |                                                          |\n   | 2  \
    \    | No route to specified transit network                    |\n   |      \
    \  |                                                          |\n   | 3      |\
    \ No route to destination                                  |\n   |        |  \
    \                                                        |\n   | 6      | Channel\
    \ unacceptable                                     |\n   |        |          \
    \                                                |\n   | 7      | Call awarded\
    \ and delivered                               |\n   |        |               \
    \                                           |\n   | 16     | Normal call clearing\
    \                                     |\n   |        |                       \
    \                                   |\n   | 17     | User busy               \
    \                                 |\n   |        |                           \
    \                               |\n   | 18     | No user response            \
    \                             |\n   |        |                               \
    \                           |\n   | 19     | No answer                       \
    \                         |\n   |        |                                   \
    \                       |\n   | 21     | Call rejected                       \
    \                     |\n   |        |                                       \
    \                   |\n   | 22     | Number changed                          \
    \                 |\n   |        |                                           \
    \               |\n   | 27     | Destination out of order                    \
    \             |\n   |        |                                               \
    \           |\n   | 28     | Invalid number format/incomplete number         \
    \         |\n   |        |                                                   \
    \       |\n   | 29     | Facility rejected                                   \
    \     |\n   |        |                                                       \
    \   |\n   | 30     | Response to status enquiry                              \
    \ |\n   |        |                                                          |\n\
    \   | 31     | Normal, unspecified                                      |\n  \
    \ |        |                                                          |\n   |\
    \ 34     | No circuit/channel available                             |\n   |  \
    \      |                                                          |\n   | 38 \
    \    | Network out of order                                     |\n   |      \
    \  |                                                          |\n   | 41     |\
    \ Temporary failure                                        |\n   |        |  \
    \                                                        |\n   | 42     | Switch\
    \ congestion                                        |\n   |        |         \
    \                                                 |\n   | 43     | Access information\
    \ discarded                             |\n   |        |                     \
    \                                     |\n   | 44     | Requested channel not available\
    \                          |\n   |        |                                  \
    \                        |\n   | 45     | Preempted (causes.h only)          \
    \                      |\n   |        |                                      \
    \                    |\n   | 47     | Resource unavailable, unspecified (Q.931\
    \ only)           |\n   |        |                                           \
    \               |\n   | 50     | Facility not subscribed (causes.h only)     \
    \             |\n   |        |                                               \
    \           |\n   | 52     | Outgoing call barred (causes.h only)            \
    \         |\n   |        |                                                   \
    \       |\n   | 54     | Incoming call barred (causes.h only)                \
    \     |\n   |        |                                                       \
    \   |\n   | 57     | Bearer capability not authorized                        \
    \ |\n   |        |                                                          |\n\
    \   | 58     | Bearer capability not available                          |\n  \
    \ |        |                                                          |\n   |\
    \ 63     | Service or option not available (Q.931 only)             |\n   |  \
    \      |                                                          |\n   | 65 \
    \    | Bearer capability not implemented                        |\n   |      \
    \  |                                                          |\n   | 66     |\
    \ Channel type not implemented                             |\n   |        |  \
    \                                                        |\n   | 69     | Facility\
    \ not implemented                                 |\n   |        |           \
    \                                               |\n   | 70     | Only restricted\
    \ digital information bearer capability is |\n   |        | available (Q.931 only)\
    \                                   |\n   |        |                         \
    \                                 |\n   | 79     | Service or option not available\
    \ (Q.931 only)             |\n   |        |                                  \
    \                        |\n   | 81     | Invalid call reference             \
    \                      |\n   |        |                                      \
    \                    |\n   | 82     | Identified channel does not exist (Q.931\
    \ only)           |\n   |        |                                           \
    \               |\n   | 83     | A suspended call exists, but this call identity\
    \ does not |\n   |        | (Q.931 only)                                     \
    \        |\n   |        |                                                    \
    \      |\n   | 84     | Call identity in use (Q.931 only)                    \
    \    |\n   |        |                                                        \
    \  |\n   | 85     | No call suspended (Q.931 only)                           |\n\
    \   |        |                                                          |\n  \
    \ | 86     | Call has been cleared (Q.931 only)                       |\n   |\
    \        |                                                          |\n   | 88\
    \     | Incompatible destination                                 |\n   |     \
    \   |                                                          |\n   | 91    \
    \ | Invalid transit network selection (Q.931 only)           |\n   |        |\
    \                                                          |\n   | 95     | Invalid\
    \ message, unspecified                             |\n   |        |          \
    \                                                |\n   | 96     | Mandatory information\
    \ element missing (Q.931 only)       |\n   |        |                        \
    \                                  |\n   | 97     | Message type nonexistent/not\
    \ implemented                 |\n   |        |                               \
    \                           |\n   | 98     | Message not compatible with call\
    \ state                   |\n   |        |                                   \
    \                       |\n   | 99     | Information element nonexistent     \
    \                     |\n   |        |                                       \
    \                   |\n   | 100    | Invalid information element contents    \
    \                 |\n   |        |                                           \
    \               |\n   | 101    | Message not compatible with call state      \
    \             |\n   |        |                                               \
    \           |\n   | 102    | Recovery on timer expiration                    \
    \         |\n   |        |                                                   \
    \       |\n   | 103    | Mandatory information element length error (causes.h\
    \     |\n   |        | only)                                                 \
    \   |\n   |        |                                                         \
    \ |\n   | 111    | Protocol error, unspecified                              |\n\
    \   |        |                                                          |\n  \
    \ | 127    | Internetworking, unspecified                             |\n   +--------+----------------------------------------------------------+\n\
    \   Refer to the IAX Cause Codes IANA Registry for any additional values.\n"
- title: 8.6.34.  ENCRYPTION
  contents:
  - "8.6.34.  ENCRYPTION\n   The purpose of the ENCRYPTION information element is\
    \ to indicate what\n   encryption methods are accepted for an IAX peer.  The data\
    \ field is a\n   2-octet bitmask specifying which encryption methods from the\
    \ table\n   below are accepted.\n   The ENCRYPTION information element MAY be\
    \ sent with IAX NEW and\n   AUTHREQ messages.\n                        1\n   \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |\
    \      0x2b     |      0x01     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |\
    \      Encryption Methods       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The\
    \ following table lists valid native encryption methods:\n                   \
    \      +--------+-------------+\n                         | METHOD | DESCRIPTION\
    \ |\n                         +--------+-------------+\n                     \
    \    | 0x0001 | AES-128     |\n                         +--------+-------------+\n\
    \   Refer to the IAX Encryption Methods IANA Registry for any additional\n   values.\n"
- title: 8.6.35.  CODEC PREFS
  contents:
  - "8.6.35.  CODEC PREFS\n   The purpose of the CODEC PREFS information element is\
    \ to indicate the\n   CODEC preferences of the calling peer.  The data field consists\
    \ of a\n   list of CODECs in the peer's order of preference as UTF-8-encoded\n\
    \   data.\n   The CODEC PREFS information element MAY be sent with IAX NEW\n \
    \  messages.\n   If the CODEC PREFS information element is absent, CODEC negotiation\n\
    \   takes place via the CAPABILITY and FORMAT information elements.\n        \
    \                1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0x2d     |  Data Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |\n   :       CODEC Prefs Data        :\n\
    \   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.36.  RR JITTER
  contents:
  - "8.6.36.  RR JITTER\n   The purpose of the Receiver Report (RR) JITTER information\
    \ element is\n   to indicate the received jitter on a call, per [RFC3550].  The\
    \ data\n   field is 4 octets long and carries the current measured jitter.\n \
    \  The RR JITTER information element MAY be sent with IAX PONG messages.\n   \
    \                     1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0x2e     |      0x04     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Received Jitter       |\n   |                               |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.37.  RR LOSS
  contents:
  - "8.6.37.  RR LOSS\n   The purpose of the RR LOSS information element is to indicate\
    \ the\n   number of lost frames on a call, per [RFC3550].  The data field is 4\n\
    \   octets long and carries the percentage of frames lost in the first\n   octet,\
    \ and the count of lost frames in the next 3 octets.\n   The RR LOSS information\
    \ element MAY be sent with IAX PONG messages.\n                        1\n   \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |\
    \      0x2f     |      0x04     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |\
    \  Loss Percent |               |\n   +-+-+-+-+-+-+-+-+  Loss Count   |\n   |\
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.38.  RR PKTS
  contents:
  - "8.6.38.  RR PKTS\n   The purpose of the RR PKTS information element is to indicate\
    \ the\n   total number of frames received on a call, per [RFC3550].  The data\n\
    \   field is 4 octets long and carries the count of frames received.\n   The RR\
    \ PKTS information element MAY be sent with IAX PONG messages.\n             \
    \           1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0x30     |      0x04     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Frames Received Count      |\n   |                               |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.39.  RR DELAY
  contents:
  - "8.6.39.  RR DELAY\n   The purpose of the RR DELAY information element is to indicate\
    \ the\n   maximum playout delay for a call, per [RFC3550].  The data field is\
    \ 2\n   octets long and specifies the number of milliseconds a frame may be\n\
    \   delayed before it MUST be discarded.\n   The RR DELAY information element\
    \ MAY be sent with IAX PONG messages.\n                        1\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |      0x31\
    \     |      0x02     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |    Maximum\
    \ Playout Delay      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.40.  RR DROPPED
  contents:
  - "8.6.40.  RR DROPPED\n   The purpose of the RR DROPPED information element is\
    \ to indicate the\n   total number of dropped frames for a call, per [RFC3550].\
    \  The data\n   field is 4 octets long and carries the number of frames dropped.\n\
    \   The RR DROPPED information element MAY be sent with IAX PONG\n   messages.\n\
    \                        1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0x32     |      0x04     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Total Frames Dropped     |\n   |                               |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.41.  RR OOO
  contents:
  - "8.6.41.  RR OOO\n   The purpose of the RR OOO information element is to indicate\
    \ the\n   number of frames received out of order for a call, per [RFC3550].\n\
    \   The data field is 4 octets long and carries the number of frames\n   received\
    \ out of order.\n   The RR OOO information element MAY be sent with IAX PONG messages.\n\
    \                        1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0x33     |      0x04     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Frames Received       |\n   |          Out of Order         |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.6.42.  OSPTOKEN
  contents:
  - "8.6.42.  OSPTOKEN\n   The purpose of the OSPTOKEN information element is to carry\
    \ European\n   Telecommunications Standards Institute (ETSI) Technical Specification\n\
    \   101 321 [OSP] (also referred to as the Open Settlement Protocol or\n   OSP)\
    \ tokens.  The OSP tokens will be used to provide authorization,\n   authentication\
    \ and account support for IAX by using the OSP protocol.\n   The first octet of\
    \ the data field is the OSP token block index\n   starting from 0.\n   The OSPTOKEN\
    \ information element MAY only be sent with IAX NEW\n   messages.  If the token\
    \ is not supported by the receiver, it is\n   ignored.\n                     \
    \              1\n               0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n           \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n              |      0x34     |  Data Length\
    \  |\n              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n              |  Block\
    \ Index  |               |\n              +-+-+-+-+-+-+-+-+               +\n\
    \              |        OSP Token Block        |\n              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 8.7.  Media Formats
  contents:
  - "8.7.  Media Formats\n   Media Format Values\n   +------------+-----------------+------------------------------------+\n\
    \   | SUBCLASS   | DESCRIPTION     | LENGTH CALCULATION                 |\n  \
    \ +------------+-----------------+------------------------------------+\n   |\
    \ 0x00000001 | G.723.1         | 4-, 20-, and 24-byte frames of 240 |\n   |  \
    \          |                 | samples                            |\n   |    \
    \        |                 |                                    |\n   | 0x00000002\
    \ | GSM Full Rate   | 33-byte chunks of 160 samples or   |\n   |            |\
    \                 | 65-byte chunks of 320 samples      |\n   |            |  \
    \               |                                    |\n   | 0x00000004 | G.711\
    \ mu-law    | 1 byte per sample                  |\n   |            |        \
    \         |                                    |\n   | 0x00000008 | G.711 a-law\
    \     | 1 byte per sample                  |\n   |            |              \
    \   |                                    |\n   | 0x00000010 | G.726          \
    \ |                                    |\n   |            |                 |\
    \                                    |\n   | 0x00000020 | IMA ADPCM       | 1\
    \ byte per 2 samples               |\n   |            |                 |    \
    \                                |\n   | 0x00000040 | 16-bit linear   | 2 bytes\
    \ per sample                 |\n   |            | little-endian   |          \
    \                          |\n   |            |                 |            \
    \                        |\n   | 0x00000080 | LPC10           | Variable size\
    \ frame of 172 samples |\n   |            |                 |                \
    \                    |\n   | 0x00000100 | G.729           | 20-byte chunks of\
    \ 172 samples      |\n   |            |                 |                    \
    \                |\n   | 0x00000200 | Speex           | Variable             \
    \              |\n   |            |                 |                        \
    \            |\n   | 0x00000400 | ILBC            | 50 bytes per 240 samples \
    \          |\n   |            |                 |                            \
    \        |\n   | 0x00000800 | G.726 AAL2      |                              \
    \      |\n   |            |                 |                                \
    \    |\n   | 0x00001000 | G.722           | 16 kHz ADPCM                     \
    \  |\n   |            |                 |                                    |\n\
    \   | 0x00002000 | AMR             | Variable                           |\n  \
    \ |            |                 |                                    |\n   |\
    \ 0x00010000 | JPEG            |                                    |\n   |  \
    \          |                 |                                    |\n   | 0x00020000\
    \ | PNG             |                                    |\n   |            |\
    \                 |                                    |\n   | 0x00040000 | H.261\
    \           |                                    |\n   |            |        \
    \         |                                    |\n   | 0x00080000 | H.263    \
    \       |                                    |\n   |            |            \
    \     |                                    |\n   | 0x00100000 | H.263p       \
    \   |                                    |\n   |            |                \
    \ |                                    |\n   | 0x00200000 | H.264           |\
    \                                    |\n   +------------+-----------------+------------------------------------+\n\
    \   Refer to the IANA Registry for any additional IAX Media Format\n   values.\n"
- title: 9.  Example Message Flows
  contents:
  - "9.  Example Message Flows\n   This section includes call flow diagrams for some\
    \ of the various\n   types of IAX calls that can be made.  In each diagram, the\
    \ '='\n   character represents a Full Frame and the '-' character represents a\n\
    \   Mini Frame.  Notes applicable to a generic call may be presented\n   alongside\
    \ each diagram.\n"
- title: 9.1.  Ping/Pong
  contents:
  - "9.1.  Ping/Pong\n   PING->PONG\n           Peer A                           \
    \     Peer B\n            ________________________________________\n         \
    \  |                                        |\n      T    |                  \
    \                      |\n      i    |  ===PING============================> \
    \ |\n      m    |                                        |\n      e    |  <============================PONG===\
    \  |Has same time-stamp\n           |                                        |\
    \ as received PING.\n      |    |  ===ACK=============================>  |Has\
    \ same time-stamp\n      |    |                                        | as received\
    \ PONG\n     \\ /   |________________________________________| and original PING.\n"
- title: 9.2.  Lagrq/Lagrp
  contents:
  - "9.2.  Lagrq/Lagrp\n   LAGRQ->LAGRP\n           Peer A                       \
    \         Peer B\n            ________________________________________\n     \
    \      |                                        |\n      T    |              \
    \                          |\n      i    |  ===LAGRQ===========================>\
    \  |\n      m    |                                        |\n      e    |  <===========================LAGRP===\
    \  |Same time-stamp as\n           |                                        |\
    \ received LAGRQ.\n      |    |  ===ACK=============================>  |Same time-stamp\
    \ as\n      |    |                                        | received LAGRP and\n\
    \     \\ /   |________________________________________| original LAGRQ.\n"
- title: 9.3.  Registration
  contents:
  - "9.3.  Registration\n   Registration of an IAX Peer\n         Registrant  A  \
    \                   Registrar B\n            ________________________________________\n\
    \           |                                        |\n      T    |  ===REGREQ==========================>\
    \  |\n      i    |                                        |\n      m    |  <=========================REGAUTH===\
    \  |\n      e    |                                        |\n           |  ===REGREQ==========================>\
    \  |\n      |    |                                        |\n      |    |  <==========================REGACK===\
    \  |\n    \\ | /  |                                        |\n     \\|/   |  ===ACK=============================>\
    \  |\n           |                                        |\n           |________________________________________|\n"
- title: 9.4.  Registration Release
  contents:
  - "9.4.  Registration Release\n   Registration Release\n         Registrant A  \
    \                      Registrar B\n            ________________________________________\n\
    \           |                                        |\n      T    |  ===REGREL==========================>\
    \  |\n      i    |                                        |\n      m    |  <=========================REGAUTH===\
    \  |\n      e    |                                        |\n           |  ===REGREL==========================>\
    \  |\n      |    |                                        |\n      |    |  <==========================REGACK===\
    \  |\n    \\ | /  |                                        |\n     \\|/   |  ===ACK=============================>\
    \  |\n           |                                        |\n           |________________________________________|\n"
- title: 9.5.  Call Path Optimization
  contents:
  - "9.5.  Call Path Optimization\n   IAX Transfer\n           Peer L         Peer\
    \ C                Peer R\n            ________________________________________\n\
    \           |                 |                      |\n      T    |         \
    \        |                      |\n           | <== TXREQ =====[*]== TXREQ =========>\
    \  |C requests transfer\n      i    |                 |                      |\n\
    \           | ========================== TXCNT  ==>  |L sends to R\n      m  \
    \  |                 |                      |\n           | <=========================\
    \ TXACC  ==== |R replies\n      e    |                 |                     \
    \ |R sends Media\n           |                 |                      | to L\n\
    \      |    |                 |                      |\n      |    | = TXREADY\
    \ ====> |                      |L tells C 'ready'\n      |    |              \
    \   |                      | C stops media to L\n      |    |                \
    \ |                      |\n      |    | <== TXCNT ===========================\
    \  |L sends to R\n      |    |                 |                      |\n    \
    \  |    | === TXACC ===========================> |R replies\n     \\ /   |   \
    \              |                      |\n           |                 | <== TXREADY\
    \ ======   |R tells C 'ready'\n           |                 |                \
    \      | C stops media to R\n           |                 |                  \
    \    |\n           | <== TXREL =====[*]== TXREL =========>  |C Releases\n    \
    \       |                                        |\n           |________________________________________|\n"
- title: 9.6.  IAX Media Call
  contents:
  - "9.6.  IAX Media Call\n   Complete end-to-end IAX media exchange\n           Peer\
    \ A                            Peer B\n            ________________________________________\n\
    \           |                                        |\n           |  ====NEW============================>\
    \  |\n      T    |  <=========================AUTHREQ===  |If authentication\n\
    \           |                                        |   specified.\n      i \
    \   |  ====AUTHREP========================>  |\n      m    |  <==========================ACCEPT===\
    \  |\n      e    |  ====ACK============================>  |\n           |    \
    \                                    |\n      |    |  <=============Voice (Full\
    \ Frame)===   |\n      |    |  ====ACK===========================>   |\n     \
    \ |    |                                        |\n      |    |  <---------Voice\
    \ Mini Frame (ring)--   |\n      |    |  <---------Voice Mini Frame (ring)-- \
    \  |\n      |    |                                        |\n    \\ | /  |  <=========================RINGING===\
    \  |\n     \\|/   |  ====ACK============================>  |\n           |   \
    \                                     |\n           |  <---------Voice Mini Frame\
    \ (ring)--   |\n           |  <---------Voice Mini Frame (ring)--   |\n      \
    \     |                                        |\n           |  <==========================ANSWER===\
    \  |\n           |  ====ACK============================>  |\n           |    \
    \                                    |\n           |  ====Voice (Full Frame)=============>\
    \  |\n           |  <=============================ACK===  |\n           |    \
    \                                    |\n           |                         \
    \               |\n           |  <-----------Voice Mini Frames------>  |  exchange\
    \ occurs\n           |  <---               .            --->  |\n           |\
    \  <---               .            --->  |\n           |  <---               .\
    \            --->  |\n           |  <-----------Voice Mini Frames------>  |\n\
    \           |                                        |\n           |         \
    \                               |\n           |  ====Voice (Full Frame)=============>\
    \  |  (note 1)\n           |  <===ACK=============================  |  (note 2)\n\
    \           |                                        |  (every 65536 ms)\n   \
    \        |  <=============Voice (Full Frame)====  |  (note 3)\n           |  ====ACK============================>\
    \  |\n           |                                        |\n           |    \
    \                                    |\n           |  <-----------Voice Mini Frames------>\
    \  |\n           |  <---               .            --->  |\n           |  <---\
    \               .            --->  |\n           |  <---               .     \
    \       --->  |\n           |  <-----------Voice Mini Frames------>  |\n     \
    \      |                                        |\n           |              \
    \                          |\n           |  ====HANGUP=========================>\
    \  |  Either can hangup\n           |  <=============================ACK===  |\n\
    \           |________________________________________|\n   Note 1: Mini Frames\
    \ carry the low 16 bits of the peer's\n           32-bit time-stamp.\n   Note\
    \ 2: Full frames resync the 32-bit time-stamp when the 16-bit\n           time-stamp\
    \ overflows.\n   Note 3: Each side has its own 32-bit time-stamp so each side\
    \ needs\n           to sync at 16-bit overflow.\n"
- title: 9.7.  IAX Media Call via an IAX Device
  contents:
  - "9.7.  IAX Media Call via an IAX Device\n   An IAX peer is not required to maintain\
    \ a complete dialplan.  In the\n   event that a user wishes to dial from an IAX\
    \ peer that does not\n   switch its own calls, the following call flow diagram\
    \ may represent\n   the transaction:\n           Peer A (IAX Device)         \
    \        Peer B (Dialplan Server)\n            ________________________________________\n\
    \           |                                        |\n           |  ====NEW============================>\
    \  |\n      T    |  <=========================AUTHREQ===  |  If auth specified\n\
    \      i    |  ====AUTHREP========================>  |\n      m    |  <==========================ACCEPT===\
    \  |\n      e    |  ====ACK============================>  |\n           |    \
    \                                    |\n           |  ====DPREQ==========================>\
    \  |  (Note 1)\n      |    |  <===========================DPREP===  |\n      |\
    \    |                                        |\n      |    |  ====DIAL===========================>\
    \  |\n      |    |  <========================PROGRESS===  |\n      |    |  ====ACK============================>\
    \  |\n    \\ | /  |  <==========================ANSWER===  |\n     \\|/   |  ====ACK============================>\
    \  |\n           |                                        |\n           |  ====Voice\
    \ (Full Frame)=============>  |\n           |  <=============================ACK===\
    \  |\n           |  <=============Voice (Full Frame)====  |\n           |  ====ACK============================>\
    \  |\n           |                                        |\n           |    \
    \                                    |\n           |  <-----------Voice Mini Frames------>\
    \  |  Media exchange\n           |  <---               .            --->  |\n\
    \           |  <---               .            --->  |\n           |  <---   \
    \            .            --->  |\n           |  <-----------Voice Mini Frames------>\
    \  |\n           |                                        |\n           |    \
    \                                    |\n           |  ====Voice (Full Frame)=============>\
    \  |  (note 2)\n           |  <===ACK=============================  |  (note 3)\n\
    \           |                                        |  (every 65536 ms)\n   \
    \        |  <=============Voice (Full Frame)====  |  (Note 4)\n           |  ====ACK============================>\
    \  |\n           |                                        |\n           |    \
    \                                    |\n           |  <-----------Voice Mini Frames------>\
    \  |\n           |  <---               .            --->  |\n           |  <---\
    \               .            --->  |\n           |  <---               .     \
    \       --->  |\n           |  <-----------Voice Mini Frames------>  |\n     \
    \      |                                        |\n           |              \
    \                          |\n           |  ====HANGUP=========================>\
    \  |  Either can hangup\n           |  <=============================ACK===  |\n\
    \           |________________________________________|\n   Note 1: There will\
    \ be multiple DPREQ/DPREPs per call unless\n           dialed number is 1 digit\
    \ long.\n   Note 2: Mini Frames carry the low 16 bits of the peer's\n        \
    \   32-bit time-stamp.\n   Note 3: Full Frames resync the 32-bit time-stamp when\
    \ the 16 bit\n           time-stamp overflows.\n   Note 4: Each side has its own\
    \ 32-bit time-stamp so each side needs\n           to sync at 16-bit overflow.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   IAX is a binary protocol for setting up point-to-point\
    \ call legs that\n   include both media and signaling.  As such, it is simpler\
    \ to secure\n   than other more general purpose VoIP protocols; however, security\n\
    \   remains a difficult task and various aspects of the protocol must be\n   examined\
    \ to identify risks.\n   IAX registration is an area that requires careful attention.\n\
    \   Previous protocol versions supported cleartext passwords; this\n   feature\
    \ has been eliminated.  The MD5 and RSA alternatives offer much\n   higher security.\
    \  Although not specified by the IAX protocol, some\n   implementations limit\
    \ the number of registrants per account to one.\n   A subsequent registrant with\
    \ the same credentials would overwrite the\n   prior and receive the calls destined\
    \ for that user.  Theft of service\n   is trivial once a malicious caller has\
    \ the ability to authenticate.\n   In addition, since distinct cause codes are\
    \ returned to erroneous\n   registration attempts, an attacker can distinguish\
    \ between existent\n   and nonexistent users in a registration system, thus resulting\
    \ in a\n   possible directory harvest attack.\n   The IAX protocol protects against\
    \ message replay by using a challenge\n   response method.  The IAX registrar\
    \ or server challenges each call or\n   registration with an arbitrary MD5 or\
    \ RSA challenge.  The response\n   and subsequent authorization relies upon knowledge\
    \ of a shared\n   secret.  Since the server typically chooses a challenges using\
    \ a\n   random-number-based technique, the challenge set is large, making\n  \
    \ replay highly unlikely.\n   Although operation in the following manner is not\
    \ recommended, the\n   IAX protocol does permit servers to forego the challenge\
    \ process\n   described above.  This open approach is inherently insecure and\
    \ does\n   nothing to prevent unauthorized usage.\n   Call Encryption in IAX starts\
    \ by utilizing static keys.  Once\n   negotiated, the key may be changed for the\
    \ remainder of the call.\n   Once the initial key is compromised, all subsequent\
    \ calls are subject\n   to interception.  A more secure implementation would update\
    \ the key\n   frequently and as early as practical during each call.\n   The IAX\
    \ protocol is also susceptible to eavesdropping.  Call Detail,\n   i.e., who is\
    \ calling whom, is sent in unencrypted binary whether or\n   not the call is to\
    \ be encrypted.  Without encryption, call content,\n   i.e., audio and video,\
    \ may be easily intercepted.  However, this\n   content is protected if the call\
    \ is encrypted.\n   Man-in-the-middle attacks are a threat to IAX if encryption\
    \ is not\n   used.  This form of attack permits message insertion, deletion, and\n\
    \   modification such that a call may be redirected or the audio or video\n  \
    \ replaced in either or both directions for the complete or any portion\n   of\
    \ a call.  If encryption is used, the call is protected end to end.\n   Note:\
    \ an initial NEW message in an encrypted call is unencrypted and\n   could be\
    \ changed; however, this is limited to a denial-of-service\n   (DoS) attack because\
    \ subsequent messages containing the same address\n   information are redelivered\
    \ in an encrypted form.\n   DoS attacks can take at least two forms in IAX.  One\
    \ is simply\n   overloading the peers with bogus requests.  A carefully implemented\n\
    \   IAX peer would identify this situation and raise an alarm or take\n   other\
    \ protective action.\n   Another form of DoS against an existing call is an engineered\
    \ attack\n   against an existing call.  Injecting media, causing excess processing\n\
    \   by inserting out-of-order packets, and sending commands such as\n   hangup\
    \ or transfer.  These attacks require close monitoring of the\n   binary channel\
    \ to be successful as the message sequence numbers would\n   need to be synchronized\
    \ with the protocol exchange.\n   Of course, providing lower-layer security with\
    \ Datagram Transport\n   Layer Security (DTLS) [RFC4347], or IPsec [RFC4301],\
    \ would address\n   many of these potential issues.\n   Unicode [RFC3629] and\
    \ stringprep [RFC3454] security considerations\n   also apply.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   In order to facilitate the orderly extension of\
    \ the IAX protocol,\n   several IANA registries have been created.  These registry\
    \ requests\n   are found in [RFC5457].  In addition, the \"iax\" URI scheme has\
    \ been\n   registered; see Section 5.  Also, IAX has been assigned a well-known\n\
    \   UDP port number (4569).\n"
- title: 12.  Implementation Notes
  contents:
  - "12.  Implementation Notes\n   The original IAX implementation was in Asterisk,\
    \ the open-source PBX,\n   but [wikipedia] lists thirteen other publicly available\n\
    \   implementations at the time of this writing.  Some of these\n   implementations\
    \ used draft versions of this specification.  Many\n   others were developed using\
    \ the Asterisk source code as the only\n   specification.  While this approach\
    \ is definitive, it is very\n   difficult to determine the protocol's higher-level\
    \ logic and optimize\n   it for the particular programming language or application\n\
    \   environment.  Interoperability of these implementations cannot be\n   guaranteed.\n\
    \   Aside from the trials and tribulations of reverse engineering the\n   source\
    \ code to create a new implementation, the key lessons learned\n   involve the\
    \ use of threads, support of international character sets,\n   security, and improved\
    \ controls to limit interference during DoS\n   attacks.\n   The current Asterisk\
    \ implementation has a limited number of IAX\n   worker threads and, as a result,\
    \ its scalability is limited, but it\n   can run on low end machines where threads\
    \ may not be freely\n   available.  Improving the threading model will undoubtedly\
    \ improve\n   performance.\n   Internationalization and localization are issues\
    \ that were not\n   originally addressed by most implementations.  It was always\
    \ on the\n   IAX developers' road map, but never a priority.  While creating this\n\
    \   document, we formalized support for UTF-8 encoding to better support\n   internationalization\
    \ and localization.\n   With regards to security, many IAX implementations permit\
    \ cleartext\n   authentication.  This method is not secure and should not be used.\n\
    \   Recently, some issues have been raised regarding server robustness\n   when\
    \ under a DoS attack.  IAX servers that support unauthenticated\n   requests can\
    \ receive the equivalent of a SYN attack.  To mitigate the\n   impact of these\
    \ attacks, various controls to limit the number of\n   unauthenticated calls and\
    \ the number of calls per user may be added\n   to the implementation.  Other\
    \ approaches, such as transferring the\n   call to another, more protected port\
    \ or using IP rate limiting when\n   excessive failures are detected, are also\
    \ suggested.\n   Lastly, given the open nature of the protocol and implementations,\
    \ it\n   is very easy to extend.  This situation makes Postel's Robustness\n \
    \  Principle, \"Be conservative in what you do, be liberal in what you\n   accept\
    \ from others\", essential to any successful IAX implementation.\n"
- title: 13.  Acknowledgments
  contents:
  - "13.  Acknowledgments\n   This work was supported by Internet Foundation Austria.\
    \  The authors\n   would like to thank Birgit Arkesteijn, Marc Blanchet, Mohamed\n\
    \   Boucadair, Steve Kann, Olle Johansson, Alexander Mayrhofer, Tim\n   Panton,\
    \ and Peter Saint-Andre for their extensive review and\n   technical input.  We\
    \ would also like to thank Jim Dalton, Christopher\n   DeMarco, Frank Ellermann,\
    \ Daniel Medeiros, Dimitri E. Prado, Leif\n   Madson, and Tilghman Lesher for\
    \ their support and suggestions.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [AES]        U.S. Department of Commerce/N.I.S.T.,\
    \ \"FIPS-197,\n                Announcing the Advanced Encryption Standard\",\n\
    \                November 2001.\n   [E164]       ITU-T, \"The International Public\
    \ Telecommunication\n                Number Plan\",  Recommendation E.164, May\
    \ 1997.\n   [OSP]        European Telecommunications Standards Institute,\n  \
    \              \"Telecommunications and Internet Protocol  Harmonization\n   \
    \             Over Networks (TIPHON) Release 4;  Open Settlement\n           \
    \     Protocol (OSP) for  Inter-Domain pricing, authorization\n              \
    \  and usage exchange\", November 2003.\n   [RFC1321]    Rivest, R., \"The MD5\
    \ Message-Digest Algorithm\",\n                RFC 1321, April 1992.\n   [RFC1851]\
    \    Karn, P., Metzger, P., and W. Simpson, \"The ESP Triple\n               \
    \ DES Transform\", RFC 1851, September 1995.\n   [RFC2119]    Bradner, S., \"\
    Key words for use in RFCs to Indicate\n                Requirement Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [RFC3261]    Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston,\n                A., Peterson, J., Sparks, R., Handley, M., and\
    \ E.\n                Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n\
    \                June 2002.\n   [RFC3447]    Jonsson, J. and B. Kaliski, \"Public-Key\
    \ Cryptography\n                Standards (PKCS) #1: RSA Cryptography Specifications\n\
    \                Version 2.1\", RFC 3447, February 2003.\n   [RFC3454]    Hoffman,\
    \ P. and M. Blanchet, \"Preparation of\n                Internationalized Strings\
    \ (\"stringprep\")\", RFC 3454,\n                December 2002.\n   [RFC3491]\
    \    Hoffman, P. and M. Blanchet, \"Nameprep: A Stringprep\n                Profile\
    \ for Internationalized Domain Names (IDN)\",\n                RFC 3491, March\
    \ 2003.\n   [RFC3550]    Schulzrinne, H., Casner, S., Frederick, R., and V.\n\
    \                Jacobson, \"RTP: A Transport Protocol for Real-Time\n       \
    \         Applications\", STD 64, RFC 3550, July 2003.\n   [RFC3629]    Yergeau,\
    \ F., \"UTF-8, a transformation format of ISO\n                10646\", STD 63,\
    \ RFC 3629, November 2003.\n   [RFC3986]    Berners-Lee, T., Fielding, R., and\
    \ L. Masinter, \"Uniform\n                Resource Identifier (URI): Generic Syntax\"\
    , STD 66,\n                RFC 3986, January 2005.\n   [RFC4347]    Rescorla,\
    \ E. and N. Modadugu, \"Datagram Transport Layer\n                Security\",\
    \ RFC 4347, April 2006.\n   [RFC4647]    Phillips, A. and M. Davis, \"Matching\
    \ of Language Tags\",\n                BCP 47, RFC 4647, September 2006.\n   [RFC5234]\
    \    Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n                Specifications:\
    \ ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5646]    Phillips, A., Ed.,\
    \ and M. Davis, Ed., \"Tags for\n                Identifying Languages\", BCP\
    \ 47, RFC 5646, September\n                2009.\n   [html401]    Jacobs, I.,\
    \ Raggett, D., and A. Hors, \"HTML 4.01\n                Specification\", World\
    \ Wide Web Consortium\n                Recommendation REC-html401-19991224, December\
    \ 1999,\n                <http://www.w3.org/TR/1999/REC-html401-19991224>.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [PKCS]       RSA Laboratories, \"PKCS #1 v2.0:\
    \ RSA Cryptography\n                Standard\", October 1998.\n   [RFC3174]  \
    \  Eastlake, D. and P. Jones, \"US Secure Hash Algorithm 1\n                (SHA1)\"\
    , RFC 3174, September 2001.\n   [RFC3435]    Andreasen, F. and B. Foster, \"Media\
    \ Gateway Control\n                Protocol (MGCP) Version 1.0\", RFC 3435, January\
    \ 2003.\n   [RFC3525]    Groves, C., Pantaleo, M., Anderson, T., and T. Taylor,\n\
    \                \"Gateway Control Protocol Version 1\", RFC 3525,\n         \
    \       June 2003.\n   [RFC3761]    Faltstrom, P. and M. Mealling, \"The E.164\
    \ to Uniform\n                Resource Identifiers (URI) Dynamic Delegation Discovery\n\
    \                System (DDDS) Application (ENUM)\", RFC 3761, April 2004.\n \
    \  [RFC4301]    Kent, S. and K. Seo, \"Security Architecture for the\n       \
    \         Internet Protocol\", RFC 4301, December 2005.\n   [RFC4395]    Hansen,\
    \ T., Hardie, T., and L. Masinter, \"Guidelines and\n                Registration\
    \ Procedures for New URI Schemes\", BCP 35,\n                RFC 4395, February\
    \ 2006.\n   [RFC4566]    Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n\
    \                Description Protocol\", RFC 4566, July 2006.\n   [RFC4733]  \
    \  Schulzrinne, H. and T. Taylor, \"RTP Payload for DTMF\n                Digits,\
    \ Telephony Tones, and Telephony Signals\",\n                RFC 4733, December\
    \ 2006.\n   [RFC4734]    Schulzrinne, H. and T. Taylor, \"Definition of Events\
    \ for\n                Modem, Fax, and Text Telephony Signals\", RFC 4734,\n \
    \               December 2006.\n   [RFC5125]    Taylor, T., \"Reclassification\
    \ of RFC 3525 to Historic\",\n                RFC 5125, February 2008.\n   [RFC5457]\
    \    Guy, E., \"IANA Considerations for IAX: Inter-Asterisk\n                eXchange\
    \ Version 2\", RFC 5457, February 2010.\n   [wikipedia]  Wikipedia, \"Inter-Asterisk\
    \ eXchange\",\n                <http://en.wikipedia.org/wiki/IAX>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mark A. Spencer\n   Digium, Inc.\n   445 Jan Davis Drive\
    \ NW\n   Huntsville, AL  35806\n   US\n   Phone: +1 256 428 6000\n   EMail: markster@digium.com\n\
    \   URI:   http://www.digium.com/\n   Brian Capouch\n   Saint Joseph's College\n\
    \   PO Box 909\n   Rensselaer, IN  47978\n   US\n   Phone: +1 219 866 6114\n \
    \  EMail: brianc@saintjoe.edu\n   Ed Guy (editor)\n   Truphone\n   12 Williams\
    \ Rd\n   Chatham, NJ  07928\n   US\n   Phone: +1 973 437 4519\n   EMail: edguy@emcsw.com\n\
    \   URI:   http://www.truphone.com/\n   Frank Miller\n   Cornfed Systems, LLC\n\
    \   3476 Dayton Street\n   Denver, CO  80238\n   US\n   Phone: +1 410 404-8790\n\
    \   EMail: mail@frankwmiller.net\n   URI:   http://www.sipuseragent.net\n   Kenneth\
    \ C. Shumard\n   3818 N Lakegrove Way\n   Boise, ID  83713\n   US\n   Phone: +1\
    \ 208 724 7801\n   EMail: kshumard@gmail.com\n"
