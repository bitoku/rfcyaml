- title: __initial_text__
  contents:
  - '  Using Trust Anchor Constraints during Certification Path Processing

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes how to use information associated with a\n\
    \   trust anchor public key when validating certification paths.  This\n   information\
    \ can be used to constrain the usage of a trust anchor.\n   Typically, constraints\
    \ are used to limit the certificate policies and\n   names that can appear in\
    \ certification paths validated using a trust\n   anchor.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5937.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................3\n  \
    \ 2. Identifying Trust Anchor Constraints ............................3\n   3.\
    \ Using Trust Anchor Constraints during Certification Path\n      Processing ......................................................4\n\
    \      3.1. Inputs .....................................................4\n  \
    \    3.2. Initialization .............................................4\n    \
    \  3.3. Basic Certificate Processing ...............................6\n      3.4.\
    \ Preparation for Certificate i+1 ............................6\n      3.5. Wrap-Up\
    \ Procedure ..........................................6\n   4. Relationship to\
    \ RFC 5280 ........................................6\n   5. Security Considerations\
    \ .........................................7\n   6. References ......................................................7\n\
    \      6.1. Normative References .......................................7\n  \
    \    6.2. Informative References .....................................7\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Trust anchors are widely used to verify digital signatures\
    \ and\n   validate certification paths [RFC5280] [X.509].  They are required\n\
    \   when validating certification paths.  The Trust Anchor Format (TAF)\n   specification\
    \ [RFC5914] defines a means for limiting the scope in\n   which a trust anchor\
    \ may be used.  [RFC5280] describes how to\n   validate a certification path.\
    \  The algorithm requires processing the\n   name and key from a trust anchor.\
    \  Usage of other information,\n   including enforcement of constraints, is permitted\
    \ but not required,\n   and the processing rules are not specified (see Section\
    \ 6.2 of\n   RFC 5280).\n   This document defines a mechanism to identify constraints\
    \ that should\n   be enforced and the supplementary processing rules.  The\n \
    \  supplementary rules specify an additional input and extend the\n   initialization\
    \ procedures in the [RFC5280] path validation algorithm.\n   Post-initialization\
    \ processing steps are not affected.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119 [RFC2119].\n"
- title: 2.  Identifying Trust Anchor Constraints
  contents:
  - "2.  Identifying Trust Anchor Constraints\n   TAF supports three formats for representing\
    \ trust anchor information:\n   TrustAnchorInfo, Certificate, and TBSCertificate.\
    \  In all three\n   cases, trust anchor constraints may be represented as extensions.\
    \  In\n   the TrustAnchorInfo structure, certificate policies, policy\n   constraints,\
    \ name constraints, inhibit any policy, and basic\n   constraints do not appear\
    \ as extensions and instead appear as part of\n   the CertPathControls field.\n\
    \   Extensions may be marked critical or not critical.  When trust anchor\n  \
    \ constraints are enforced, clients MUST reject certification paths\n   containing\
    \ a trust anchor with unrecognized critical extensions.\n   When trust anchor\
    \ constraints are not enforced, clients MAY accept\n   certification paths containing\
    \ a trust anchor with unrecognized\n   critical extensions.  Information appearing\
    \ in the CertPathControls\n   field of a TrustAnchorInfo object MUST be processed,\
    \ ensuring\n   enforcement of the constraints indicated by this field in all cases.\n\
    \   For some types of trust anchor constraints, there is a type mismatch\n   between\
    \ the input parameters for the certification path validation\n   algorithm and\
    \ the extension that contains the constraint.  The\n   certification path validation\
    \ algorithm essentially defines the\n   initial-any-policy-inhibit, initial-policy-mapping-inhibit,\
    \ and\n   initial-explicit-policy as Boolean values.  The inhibitAnyPolicy and\n\
    \   policyConstraints extensions that correspond to these inputs are\n   expressed\
    \ as integer values.  In the steps described below, presence\n   of an inhibitAnyPolicy\
    \ extension results in the initial-any-policy-\n   inhibit value being set to\
    \ true.  If a policyConstraints extension is\n   present and contains a requireExplicitPolicy\
    \ field, the initial-\n   explicit-policy value is set to true.  If a policyConstraints\n\
    \   extension is present and contains an inhibitPolicyMapping field, the\n   initial-policy-mapping-inhibit\
    \ value is set to true.\n"
- title: 3.  Using Trust Anchor Constraints during Certification Path Processing
  contents:
  - '3.  Using Trust Anchor Constraints during Certification Path Processing

    '
- title: 3.1.  Inputs
  contents:
  - "3.1.  Inputs\n   This algorithm assumes that the nine inputs defined in Section\
    \ 6.1.1\n   of RFC 5280 are provided to the path processing logic, plus one\n\
    \   additional variable:\n   o  enforceTrustAnchorConstraints: indicates if trust\
    \ anchor\n      constraints should be enforced\n   Conforming implementations\
    \ are not required to support the setting of\n   the enforceTrustAnchorConstraints\
    \ input.  If a conforming\n   implementation does not support the setting of this\
    \ flag, it MUST\n   validate all certification paths using a value of TRUE for\n\
    \   enforceTrustAnchorConstraints.\n"
- title: 3.2.  Initialization
  contents:
  - "3.2.  Initialization\n   If enforceTrustAnchorConstraints is false, no additional\n\
    \   initialization steps are required.\n   If enforceTrustAnchorConstraints is\
    \ true, perform the following\n   initialization steps described below.  These\
    \ steps (or equivalent)\n   MUST be performed prior to initialization steps described\
    \ in\n   RFC 5280.\n   o  If no subject distinguished name is associated with\
    \ the trust\n      anchor, path validation fails.  The name may appear in the\
    \ subject\n      field of a Certificate or TBSCertificate structure or in the\n\
    \      taName field of CertPathControls in a TrustAnchorInfo structure.\n   o\
    \  If name constraints are associated with the trust anchor, set the\n      initial-permitted-subtrees\
    \ variable equal to the intersection of\n      the permitted subtrees from the\
    \ trust anchor and the user-provided\n      initial-permitted-subtrees.  If one\
    \ of these two inputs is not\n      provided, the initial-permitted-subtrees variable\
    \ is set to the\n      value that is available.  If neither is provided, the initial-\n\
    \      permitted-subtrees variable is set to an infinite set.\n   o  If name constraints\
    \ are associated with the trust anchor, set the\n      initial-excluded-subtrees\
    \ variable equal to the union of the\n      excluded subtrees from the trust anchor\
    \ and the user-provided\n      initial-excluded-subtrees.  If one of these two\
    \ inputs is not\n      provided, the initial-excluded-subtrees variable is set\
    \ to the\n      value that is available.  If neither is provided, the initial-\n\
    \      excluded-subtrees variable is set to an empty set.\n   o  If certificate\
    \ policies are associated with the trust anchor, set\n      the user-initial-policy-set\
    \ variable equal to the intersection of\n      the certificate policies associated\
    \ with the trust anchor and the\n      user-provided user-initial-policy-set.\
    \  If one of these two inputs\n      is not provided, the user-initial-policy-set\
    \ variable is set to\n      the value that is available.  If neither is provided,\
    \ the\n      user-initial-policy-set variable is set to any-policy.\n   o  If\
    \ an inhibit any policy value of true is associated with the\n      trust anchor\
    \ (either in a CertPathControls or in an\n      inhibitAnyPolicy extension) and\
    \ the initial-any-policy-inhibit\n      value is false, set the initial-any-policy-inhibit\
    \ value to true.\n   o  If a require explicit policy value of true is associated\
    \ with the\n      trust anchor (either in a CertPathControls or in a\n      PolicyConstraints\
    \ extension) and the initial-explicit-policy value\n      is false, set the initial-explicit-policy\
    \ value to true.\n   o  If an inhibit policy mapping value of true is associated\
    \ with the\n      trust anchor (either in a CertPathControls or in a\n      PolicyConstraints\
    \ extension) and the initial-policy-mapping-\n      inhibit value is false, set\
    \ the initial-policy-mapping-inhibit\n      value to true.\n   o  If a basic constraints\
    \ extension is associated with the trust\n      anchor and contains a pathLenConstraint\
    \ value, set the\n      max_path_length state variable equal to the pathLenConstraint\n\
    \      value from the basic constraints extension.\n"
- title: 3.3.  Basic Certificate Processing
  contents:
  - "3.3.  Basic Certificate Processing\n   This document does not require any augmentation\
    \ of the basic\n   certificate processing steps described in Section 6.1.3 of\
    \ RFC 5280.\n   However, some types of trust anchor constraints may have defined\n\
    \   additional steps, for example, CMS Content Constraints or Authority\n   Clearance\
    \ Constraints.\n"
- title: 3.4.  Preparation for Certificate i+1
  contents:
  - "3.4.  Preparation for Certificate i+1\n   This document does not require any\
    \ augmentation of the steps to\n   prepare for processing of certificate i+1 described\
    \ in Section 6.1.4\n   of RFC 5280.  However, some types of trust anchor constraints\
    \ may\n   have defined additional steps, for example, CMS Content Constraints\n\
    \   or Authority Clearance Constraints.\n"
- title: 3.5.  Wrap-Up Procedure
  contents:
  - "3.5.  Wrap-Up Procedure\n   This document does not require any augmentation of\
    \ the wrap-up\n   procedure steps described in Section 6.1.5 of RFC 5280.  However,\n\
    \   some types of trust anchor constraints may have defined additional\n   steps,\
    \ for example, CMS Content Constraints or Authority Clearance\n   Constraints.\n"
- title: 4.  Relationship to RFC 5280
  contents:
  - "4.  Relationship to RFC 5280\n   The processing described above can be incorporated\
    \ into an RFC 5280\n   implementation or be implemented as pre-processing of RFC\
    \ 5280 inputs\n   and post-processing of RFC 5280 outputs, i.e., as a wrapper\
    \ around an\n   RFC 5280 compliant implementation.\n   For name constraints and\
    \ policy-related constraints, pre-processing\n   can be used, provided the RFC\
    \ 5280 implementation allows\n   configuration of the user-initial-policy-set,\
    \ initial-policy-mapping-\n   inhibit, initial-explicit-policy, initial-any-policy-inhibit,\n\
    \   initial-permitted-subtrees, and initial-excluded-subtrees input\n   values.\
    \  RFC 5280 does not define an input for path length\n   constraints, so basic\
    \ constraints cannot be implemented using\n   pre-processing.  It can be implemented\
    \ as post-processing, provided\n   the RFC 5280 implementation returns the certification\
    \ path to enable\n   the post-processor to perform the length check.\n   Some\
    \ types of trust anchor constraints may impose additional\n   requirements on\
    \ an RFC 5280 implementation to support pre-processing\n   or post-processing\
    \ to enforce trust anchor constraints.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Implementations that do not enforce trust anchor\
    \ constraints may\n   accept some certification paths rejected by implementations\
    \ that do\n   enforce trust anchor constraints.  For example, an application that\n\
    \   does not enforce a certificate policy constraint included in a trust\n   anchor\
    \ may accept certificates issued under a certificate policy that\n   provides\
    \ a lower-than-required-level of assurance.\n   Trust anchor information must\
    \ be securely stored.  Changes to trust\n   anchor information can cause acceptance\
    \ of certificates that should\n   be rejected.  For example, if a trust anchor\
    \ definition is altered to\n   remove a name constraint, applications may accept\
    \ certificates\n   containing names that should only be trusted in certificates\
    \ that\n   validate to a different trust anchor.  Similarly, addition of\n   inappropriate\
    \ trust anchors to a trust anchor store can result in\n   validation of certificates\
    \ to a different trust anchor and with\n   different constraints than intended.\n\
    \   [RFC5914] and [RFC5934] provide additional security considerations\n   regarding\
    \ the preparation, storage, and usage of trust anchors.\n   [RFC5280] provides\
    \ additional security considerations regarding the\n   usage of name constraints.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n \
    \             Housley, R., and W. Polk, \"Internet X.509 Public Key\n        \
    \      Infrastructure Certificate and Certificate Revocation List\n          \
    \    (CRL) Profile\", RFC 5280, May 2008.\n   [RFC5914]  Housley, R., Ashmore,\
    \ S., and C. Wallace, \"Trust Anchor\n              Format\", RFC 5914, June 2010.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC5934]  Housley, R., Ashmore, S., and C.\
    \ Wallace, \"Trust Anchor\n              Management Protocol (TAMP)\", RFC 5934,\
    \ August 2010.\n   [X.509]    ITU-T Recommendation X.509 (2005) | ISO/IEC 9594-8:2005,\n\
    \              Information technology - Open Systems Interconnection -\n     \
    \         The Directory: Public-key and attribute certificate\n              frameworks.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sam Ashmore\n   National Security Agency\n   Suite 6751\n\
    \   9800 Savage Road\n   Fort Meade, MD  20755\n   USA\n   EMail: srashmo@radium.ncsc.mil\n\
    \   Carl Wallace\n   Cygnacom Solutions\n   Suite 5400\n   7925 Jones Branch Drive\n\
    \   McLean, VA  22102\n   USA\n   EMail: cwallace@cygnacom.com\n"
