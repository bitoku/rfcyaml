- title: __initial_text__
  contents:
  - '                NBMA Address Resolution Protocol (NARP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n   Note that the work contained in this memo does\
    \ not describe an\n   Internet standard.  This work represents an early stage\
    \ in the\n   ongoing efforts to resolve direct communication over NBMA subnets.\n\
    \   It is a suitable experimental protocol for early deployment.  It is\n   expect\
    \ that it will be superceded by other work being developed\n   within the IETF.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the NBMA Address Resolution Protocol (NARP).\n\
    \   NARP can be used by a source terminal (host or router) connected to a\n  \
    \ Non-Broadcast, Multi-Access link layer (NBMA) network to find out the\n   NBMA\
    \ addresses of the a destination terminal provided that the\n   destination terminal\
    \ is connected to the same NBMA network.  Although\n   this document focuses on\
    \ NARP in the context of IP, the technique is\n   applicable to other network\
    \ layer protocols as well.  This RFC is a\n   product of the Routing over Large\
    \ Clouds Working Group of the IETF.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The NBMA Address Resolution Protocol (NARP) allows a source\
    \ terminal\n   (a host or router), wishing to communicate over a Non-Broadcast,\n\
    \   Multi-Access link layer (NBMA) network, to find out the NBMA\n   addresses\
    \ of a destination terminal if the destination terminal is\n   connected to the\
    \ same NBMA network as the source.\n   A conventional address resolution protocol,\
    \ such as ARP [1, 2] for\n   IP, may not be sufficient to resolve the NBMA address\
    \ of the\n   destination terminal, since it only applies to terminals belonging\
    \ to\n   the same IP subnetwork, whereas an NBMA network can consist of\n   multiple\
    \ logically independent IP subnets (LISs, [3]).\n   Once the NBMA address of the\
    \ destination terminal is resolved, the\n   source may either start sending IP\
    \ packets to the destination (in a\n   connectionless NBMA network such as SMDS)\
    \ or may first establish a\n   connection to the destination with the desired\
    \ bandwidth and QOS\n   characteristics (in a connection oriented NBMA network\
    \ such as ATM).\n   An NBMA network can be non-broadcast either because it technically\n\
    \   doesn't support broadcasting (e.g., an X.25 network) or because\n   broadcasting\
    \ is not feasible for one reason or another (e.g., an SMDS\n   broadcast group\
    \ or an extended Ethernet would be too large).\n"
- title: 2. Protocol Overview
  contents:
  - "2. Protocol Overview\n   In this section, we briefly describe how a source S\
    \ uses NARP to\n   determine the NBMA address of a destination D or to find out\
    \ that\n   such an address doesn't exist.  S first checks if the destination\n\
    \   terminal belongs to the same IP subnetwork as S itself.  If so, S\n   resolves\
    \ the NBMA address of D using conventional means, such as ARP\n   [1, 2] or preconfigured\
    \ tables.  If D resides in another subnetwork,\n   S formulates a NARP request\
    \ containing the source and destination IP\n   addresses.  S then forwards the\
    \ request to an entity called the \"NBMA\n   ARP Server\" (NAS).\n   For administrative\
    \ and policy reasons, a physical NBMA network may be\n   partitioned into several\
    \ disjoint logical NBMA networks.  NASs\n   cooperatively resolve the NBMA next\
    \ hop within their logical NBMA\n   network.  In the following we'll always use\
    \ the term \"NBMA network\"\n   to mean a logical NBMA network.  If S is connected\
    \ to several NBMA\n   networks, it should have at least one NAS in each of them.\
    \  In order\n   to know which NAS(s) to query for which destination addresses,\
    \ a\n   multi-homed S should also be configured to receive reachability\n   information\
    \ from its NASs.\n   Each NAS \"serves\" a pre-configured set of terminals and\
    \ peers with a\n   pre-configured set of NASs, which all belong to the same NBMA\n\
    \   network.  A NAS may also peer with routers outside the served NBMA.\n   A\
    \ NAS exchanges reachability information with its peers (and possibly\n   with\
    \ the terminals it serves) using regular routing protocols.  This\n   exchange\
    \ is used to construct a forwarding table in every NAS.  The\n   forwarding table\
    \ determines the next hop NAS towards the NARP\n   request's destination or a\
    \ next hop router outside the NBMA.\n   After receiving a NARP request, the NAS\
    \ checks if it \"serves\" D.  If\n   so, the NAS resolves D's NBMA address, using\
    \ mechanisms beyond the\n   scope of this document (examples of such mechanisms\
    \ include ARP [1,\n   2] and pre-configured tables).  The NAS then either forwards\
    \ the NARP\n   request to D or generates a positive NARP reply on its behalf.\
    \  The\n   reply contains D's IP and NBMA address and is sent back to S.  NARP\n\
    \   replies usually traverse the same sequence of NASs as the NARP\n   request\
    \ (in reverse order, of course).\n   If the NAS does not serve D, it extracts\
    \ from its forwarding table\n   the next hop towards D.  If the next hop is a\
    \ peer NAS, it forwards\n   the NARP request to the next hop.  If the next hop\
    \ is a peer router\n   outside the served NBMA or if no such next hop entry is\
    \ found, the\n   NAS generates a negative NARP reply.\n   A NAS receiving a NARP\
    \ reply may cache the NBMA address information\n   contained therein.  If a subsequent\
    \ NARP request for the same target\n   address does not desire an authorative\
    \ reply, a caching NAS can then\n   respond with the cached non-authoritative\
    \ NBMA address or with cached\n   negative information.  A well behaving terminal\
    \ should always first\n   accept a non-authoritative reply.  Only if communication\
    \ attempt\n   based on the non-authoritative information fails, the terminal can\n\
    \   choose to issue another request this time asking for an authoritative\n  \
    \ reply.\n   NARP requests and replies never cross the borders of an NBMA network.\n\
    \   Thus, IP traffic out off and into an NBMA network always traverses an\n  \
    \ IP router at its border.  Network layer filtering can then be\n   implemented\
    \ at these border routers.\n"
- title: 3. Configuration
  contents:
  - "3. Configuration\n   Terminals\n      To participate in NARP, a terminal connected\
    \ to an NBMA network\n      should to be configured with the IP address(es) of\
    \ its NAS(s).  If\n      the terminal is attached to several NBMA networks, it\
    \ should also\n      be configured to receive reachability information from its\
    \ NAS(s)\n      so that it can determine, which IP destinations are reachable\n\
    \      through which NBMA networks.\n   NBMA ARP Servers\n      A NAS is configured\
    \ with a set of IP address prefixes that\n      correspond to the IP addresses\
    \ of the terminals it is serving.\n      Moreover, the NAS must be configured\
    \ to exchange reachability\n      information with its peer NASs (if any).  In\
    \ addition, the NAS may\n      be configured to exchange reachability information\
    \ with routers\n      outside the served NBMA.  And finally, if a served terminal\
    \ is\n      attached to several NBMA networks, the NAS may need to be\n      configured\
    \ to send reachability information to such a terminal.\n"
- title: 4. Packet Formats
  contents:
  - "4. Packet Formats\n   NARP requests and replies are carried in IP packets as\
    \ protocol type\n   54.  This section describes the packet formats of NARP requests\
    \ and\n   replies:\n   NARP Request\n       0                   1            \
    \       2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Version    |   Hop Count   |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \     Type      |    Code       |           Unused              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    Destination IP address                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Source IP address                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | NBMA length   |                NBMA address                   |\n   \
    \   +-+-+-+-+-+-+-+-+                                               |\n      |\
    \                  (variable length)                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Version\n     The NARP version number.  Currently this value is 1.\n   Hop\
    \ Count\n     The Hop count indicates the maximum number of NASs that a request\n\
    \     or reply is allowed to traverse before being discarded.\n   Checksum\n \
    \    The standard IP checksum over the entire NARP packet (starting with\n   \
    \  the fixed header).\n   Type\n     The NARP packet type.  The NARP Request has\
    \ a Type code 1.\n   Code\n     A response to an NARP request may contain cached\
    \ information. If an\n     authoritative answer is desired, then code 2 (NARP\
    \ Request for\n     Authoritative Information) should be used. Otherwise, a code\
    \ value\n     of 1 (NARP Request) should be used.\n   Source and Destination IP\
    \ Addresses\n     Respectively, these are the IP addresses of the NARP requestor\
    \ and\n     the target terminal for which the NBMA address is desired.\n   NBMA\
    \ Length and NBMA Address\n     The NBMA length field is the length of the NBMA\
    \ address of the\n     source terminal in bits.  The NBMA address itself is zero-filled\
    \ to\n     the nearest 32-bit boundary.\n   NARP Reply\n       0             \
    \      1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Version    |   Hop Count   |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \     Type      |      Code     |           Unused              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    Destination IP address                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Source IP address                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | NBMA length   |                NBMA address                   |\n   \
    \   +-+-+-+-+-+-+-+-+                                               |\n      |\
    \                  (variable length)                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Version\n     The NARP version number.  Currently this value is 1.\n   Hop\
    \ Count\n     The Hop count indicates the maximum number of NASs that a request\n\
    \     or reply is allowed to traverse before being discarded.\n   Checksum\n \
    \    The standard IP checksum over the entire NARP packet (starting with\n   \
    \  the fixed header).\n   Type\n     The NARP packet type.  The NARP Reply has\
    \ a Type code 2.\n   Code\n     NARP replies may be positive or negative.  A Positive,\
    \ Non-\n     authoritative Reply carries a code of 1, while a Positive,\n    \
    \ Authoritative Reply carries a code of 2. A Negative, Non-\n     authoritative\
    \ Reply carries a code of 3 and a Negative,\n     Authoritative reply carries\
    \ a code of 4.\n     The general rule is that a NAS should not reply to an NARP\
    \ request\n     for authoritative information with cached information, but may\
    \ do\n     so for an NARP request.  A NAS implementation is allowed to relax\n\
    \     this rule and return non-authoritative information even in case\n     authorative\
    \ was desired if the NAS becomes heavily loaded and the\n     cached information\
    \ is very recently updated.\n   Source and Destination IP Address\n     Respectively,\
    \ these are the IP addresses of the NARP requestor and\n     the target terminal\
    \ for which the NBMA address is desired.\n   NBMA Length and NBMA Address\n  \
    \   The NBMA length field is the length of the NBMA address of the\n     destination\
    \ terminal in bits.  The NBMA address itself is zero-\n     filled to the nearest\
    \ 32-bit boundary.  Negative replies do not\n     carry the NBMA length or the\
    \ NBMA address field.\n     A NAS may cache NBMA replies.\n"
- title: 5. Protocol Operation
  contents:
  - "5. Protocol Operation\n   The external behavior of a NAS may be described in\
    \ terms of two\n   procedures (processRequest and processReply) operating on two\
    \ tables\n   (forwardingTable and cacheTable).  In an actual implementation, the\n\
    \   code and data structures may be realized differently.\n   Each NAS has a forwardingTable\
    \ consisting of entries with the fields:\n       <networkLayerAddrPrefix, type,\
    \ outIf, outIfAddr>\n   The networkLayerAddrPrefix field identifies a set of IP\
    \ addresses\n   known to the NAS.  It consists of two subfields <ipAddr, mask>.\n\
    \   The type field indicates the type of the networkLayerAddrPrefix.  The\n  \
    \ possible values are:\n   - locallyServed: The NAS is itself serving the\n  \
    \   networkLayerAddrPrefix.  The outIf field denotes the NBMA interface\n    \
    \ via which the served terminals can be reached and the outIfAddr\n     field\
    \ has no meaning.  Such a forwardingTable entry has been\n     created by manual\
    \ configuration.\n   - nasLearned: The NAS has learned about the networkLayerAddrPrefix\n\
    \     from another NAS.  The outIf and outIfAddr fields, respectively,\n     denote\
    \ the NBMA interface and IP address of this next hop NAS.\n     Such a forwardingTable\
    \ entry is a result of network layer address\n     prefix information exchange\
    \ with one of the NAS' peer NASs.\n   - externallyLearned: The NAS has learned\
    \ about the\n     networkLayerAddrPrefix from a peer router outside the served\
    \ NBMA.\n     The outIf and outIfAddr fields, respectively, denote the NBMA\n\
    \     interface and IP address of this next hop NAS.  Such a\n     forwardingTable\
    \ entry is a result of network layer address prefix\n     information exchange\
    \ with one of the NAS' peer routers.\n   The protocol used to exchange networkLayerAddrPrefix\
    \ information\n   among the NASs can be any regular IP intra-domain or inter-domain\n\
    \   routing protocol.\n   In addition to the forwardingTable, each NAS has an\
    \ NARP cacheTable\n   consisting of entries with the fields:\n       <networkLayerAddr,\
    \ nbmaAddr, timeStamp>\n   The entries in the cacheTable are learned from NARP\
    \ replies\n   traversing the NAS.  In case of a negative cache entry the nbmaAddr\n\
    \   is empty.  The timeStamp field records the time when the cacheTable\n   entry\
    \ has been created or updated.  It is used to determine if an\n   entry is a very\
    \ recent one and to age old entries after a certain\n   hold period.\n   The following\
    \ pseudocode defines how NBMA NARP requests and replies\n   are processed by an\
    \ NAS.\n  procedure processRequest(request);\n    let bestMatch == matchForwardingTable(request.dIPa)\
    \ do\n       if bestMatch then\n          if bestMatch.type == locallyServed then\n\
    \             let nbmaAddr == arp(request.dIPa) do\n                if nbmaAddr\
    \ then\n                   genPosAuthReply(request.sIPa, request.dIPa, nbmaAddr)\n\
    \                else\n                   genNegAuthReply(request.sIPa, request.dIPa)\n\
    \                end\n             end\n          elseif bestMatch.type == nasLearned\
    \ then\n             if not requestForAuthInfo?(request) or\n                \
    \   realBusyRightNow?() then\n                let cacheMatch == matchCacheTable(request.dIPa)\
    \ do\n                   if cacheMatch and\n                         (not requestForAuthInfo?(request)\
    \ or\n                            realRecentCacheEntry?(cacheMatch)) then\n  \
    \                    if cacheMatch.nbmaAddr == EMPTY then\n                  \
    \       genNegNonAuthReply(request.sIPa, request.dIPa)\n                     \
    \ else\n                         genPosNonAuthReply(request.sIPa, request.dIPa,\n\
    \                            cacheMatch.nbmaAddr)\n                      end\n\
    \                   else /* no cache match */\n                      forwardRequest(request,\
    \ bestMatch.OutIf,\n                         bestMatch.OutIfAddr)\n          \
    \         end\n                end\n             else /* request for authoritative\
    \ information */\n                forwardRequest(request, bestMatch.OutIf,\n \
    \                  bestMatch.OutIfAddr)\n             end\n          else /* bestMatch.type\
    \ == externallyLearned */\n             genNegAuthReply(request.sIPa, request.dIPa)\n\
    \          end\n       else /* no match in forwardingTable */\n          genNegAuthReply(request.sIPa,\
    \ request.dIPa)\n       end\n    end\n  end\n  procedure processReply(reply);\n\
    \    addCacheTableEntry(reply.dIPa, reply.nbmaAddr, currentTime);\n    if reply.sIPa\
    \ == selfIpAddr then\n       /* reply is to the NAS itself */\n    else\n    \
    \   let bestMatch == matchForwardingTable(reply.sIPa) do\n          if bestMatch\
    \ then\n             forwardReply(reply, bestMatch.outIf, bestMatch.outIfAddr)\n\
    \          end\n       end\n    end\n  end\n   The semantics of the procedures\
    \ used in the pseudocode are explained\n   below.\n   matchForwardingTable(ipAddress)\
    \ returns the forwardingTable entry\n   whose networkLayerAddrPrefix field is\
    \ the longest match for ipAddress\n   or FALSE if no match is found.\n   arp(ipAddress)\
    \ resolves the NBMA address corresponding to ipAddress.\n   It returns FALSE if\
    \ the resolution fails.\n   genPosAuthReply(sourceIpAddr, destIpAddr, destNbmaAddr)\
    \ and\n   genPosNonAuthReply(sourceIpAddr, destIpAddr, destNbmaAddr) generate\
    \ a\n   positive, authoritative and non-authoritative reply with\n   sourceIpAddr,\
    \ destIpAddr, and destNbmaAddr in Source IP address,\n   Destination IP address,\
    \ and NBMA Address fields, respectively.\n   genNegAuthReply(sourceIpAddr, destIpAddr)\
    \ and\n   genNegNonAuthReply(sourceIpAddr, destIpAddr) respectively generate a\n\
    \   negative, authoritative and non-authoritative reply with sourceIpAddr\n  \
    \ and destIpAddr in Source IP address and Destination IP address\n   fields, respectively.\n\
    \   requestForAuthInfo?(request) tests if request is a Request for\n   authoritative\
    \ information.\n   realBusyRightNow?() returns TRUE if the NAS is heavily loaded\
    \ and\n   FALSE otherwise.\n   realRecentCacheEntry?(cacheTableEntry) returns\
    \ TRUE if the\n   cacheTableEntry is very recently updated and FALSE otherwise.\n\
    \   matchCacheTable(ipAddr) returns a cacheTable entry whose\n   networkLayerAddr\
    \ field is equal to ipAddr or FALSE if no match is\n   found.\n   forwardRequest(request,\
    \ interface, ipAddr) decrements the Hop count\n   field of request, recomputes\
    \ the NARP Checksum field, and forwards\n   request to ipAddr of interface provided\
    \ that the value of the Hop\n   count field remains positive.\n   addCacheTableEntry(ipAddr,\
    \ nbmaAddr, time) adds a new entry to the\n   cacheTable or overwrites an existing\
    \ entry whose networkLayerAddr\n   field is equal to ipAddr.\n   forwardReply(reply,\
    \ interface, ipAddr) decrements the Hop count field\n   of request, recomputes\
    \ the NARP Checksum field, and forwards reply to\n   ipAddr of interface provided\
    \ that the value of the Hop count field\n   remains positive.\n   Like NASs, each\
    \ NBMA terminal has a forwardingTable and a cacheTable.\n   The forwardingTable\
    \ is either manually configured or filled via\n   reachability information exchange\
    \ with the terminal's NASs or peer\n   routers.\n   When the terminal wishes to\
    \ find out the NBMA address of a particular\n   destination terminal, it first\
    \ checks if a matching entry is found in\n   the forwardingTable.  If not, the\
    \ destination is unreachable and the\n   terminal gives up.  If a forwardingTable\
    \ entry is found, and if the\n   next hop belongs to one of the terminal's NASs,\
    \ the terminal next\n   consults its cacheTable to obtain the NBMA address.  If\
    \ no cache\n   match is found, the terminal generates a NARP request to the next\
    \ hop\n   NAS.  If the reply to the NARP request is positive, the terminal\n \
    \  learns the NBMA address and updates its cacheTable with the new\n   information.\n"
- title: 6. Discussion
  contents:
  - "6. Discussion\n   The NARP semantics resembles closely the ATMARP semantics described\n\
    \   in [2].  The only actual differences are:\n   - NARP requests and replies\
    \ include a hop count to prevent them from\n     looping forever in case of misconfigured\
    \ NAS routing.\n   - NARP request and replies distinguish between authoritative\
    \ and\n     non-authoritative information.\n   In order to keep the NBMA terminals\
    \ as simple as possible, it would\n   be desirable to extend the the ATMARP protocol\
    \ a little further so\n   that it could be also used as the terminal-NAS protocol.\
    \  This could\n   be easily accomplished just by adding three new operation codes\
    \ to\n   ATMARP to cover the different kinds of queries and responses.  NARP\n\
    \   would then become the NAS-NAS protocol.  Finally, if the NASs are\n   co-located\
    \ with the \"classical\" ATM ARP servers, the terminals would\n   not need to\
    \ make any distinction between between local and foreign IP\n   subnetworks.\n\
    \   The NASs can also act as \"connectionless servers\" for the terminal by\n\
    \   advertizing to it all destinations no matter if they are inside or\n   outside\
    \ the served NBMA.  Then, the terminal could choose either to\n   try to resolve\
    \ the NBMA address of the destination or just to send\n   the IP packets to the\
    \ NAS.  The latter option may be desirable if\n   communication with the destination\
    \ is short-lived and/or doesn't\n   require much network resources.\n   NARP supports\
    \ portability of NBMA terminals.  A terminal can be moved\n   anywhere within\
    \ the NBMA network and still keep its original IP\n   address as long as its NAS(s)\
    \ remain the same.  Requests for\n   authoritative information will always return\
    \ the correct NBMA\n   address.\n"
- title: References
  contents:
  - "References\n   [1] Plummer, D., \"An Ethernet Address Resolution Protocol - or\
    \ -\n       Converting Network Protocol Addresses to 48.bit Ethernet Address\n\
    \       for Transmission on Ethernet Hardware\", STD 37, RFC 826, MIT,\n     \
    \  November 1982.\n   [2] Laubach, M., \"Classical IP and ARP over ATM\", RFC\
    \ 1577, Hewlett-\n       Packard Laboratories, January 1994.\n   [3] Piscitello,\
    \ D., and J. Lawrence, \"Transmission of IP Datagrams\n       over the SMDS Service,\
    \ RFC 1209, Bell Communications Research,\n       March 1991.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   We would like to thank John Burnett of Adaptive, Dennis\
    \ Ferguson of\n   ANS, Joel Halpern of Network Systems, and Paul Francis of Bellcore\n\
    \   for their valuable insight and comments to earlier versions of this\n   draft.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Juha Heinanen\n   Telecom Finland\n   PO Box 228\n   SF-33101\
    \ Tampere\n   Finland\n   Phone: +358 49 500 958\n   EMail: Juha.Heinanen@datanet.tele.fi\n\
    \   Ramesh Govindan\n   USC/Information Sciences Institute\n   4676 Admiralty\
    \ Way\n   Marina del Rey, CA 90292\n   Phone: +1 310-822-1511\n   EMail: govindan@isi.edu\n"
