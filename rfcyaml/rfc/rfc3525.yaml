- title: __initial_text__
  contents:
  - '                  Gateway Control Protocol Version 1

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the protocol used between elements of a\n\
    \   physically decomposed multimedia gateway, i.e., a Media Gateway and a\n  \
    \ Media Gateway Controller.  The protocol presented in this document\n   meets\
    \ the requirements for a media gateway control protocol as\n   presented in RFC\
    \ 2805.\n   This document replaces RFC 3015.  It is the result of continued\n\
    \   cooperation between the IETF Megaco Working Group and ITU-T Study\n   Group\
    \ 16.  It incorporates the original text of RFC 3015, modified by\n   corrections\
    \ and clarifications discussed on the Megaco\n   E-mail list and incorporated\
    \ into the Study Group 16 Implementor's\n   Guide for Recommendation H.248.  The\
    \ present version of this document\n   underwent  ITU-T Last Call as Recommendation\
    \ H.248 Amendment 1.\n   Because of ITU-T renumbering, it was published by the\
    \ ITU-T as\n   Recommendation H.248.1 (03/2002), Gateway Control Protocol Version\
    \ 1.\n   Users of this specification are advised to consult the H.248 Sub-\n \
    \  series Implementors' Guide at http://www.itu.int/itudoc/itu-\n   t/com16/implgd\
    \ for additional corrections and clarifications.\n"
- title: Conventions used in this document
  contents:
  - "Conventions used in this document\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1 Scope.........................................................5\n\
    \     1.1 Changes From RFC 3015.....................................5\n     1.2\
    \ Differences From ITU-T Recommendation H.248.1 (03/2002)...5\n   2 References....................................................6\n\
    \     2.1 Normative references......................................6\n     2.2\
    \ Informative references....................................9\n   3 Definitions..................................................10\n\
    \   4 Abbreviations................................................11\n   5 Conventions..................................................12\n\
    \   6 Connection model.............................................13\n     6.1\
    \ Contexts.................................................16\n     6.2 Terminations.............................................17\n\
    \       6.2.1 Termination dynamics.................................21\n      \
    \ 6.2.2 TerminationIDs.......................................21\n       6.2.3\
    \ Packages.............................................22\n       6.2.4 Termination\
    \ properties and descriptors...............23\n       6.2.5 Root Termination.....................................25\n\
    \   7 Commands.....................................................26\n     7.1\
    \ Descriptors..............................................27\n       7.1.1 Specifying\
    \ parameters................................27\n       7.1.2 Modem descriptor.....................................28\n\
    \       7.1.3 Multiplex descriptor.................................28\n      \
    \ 7.1.4 Media descriptor.....................................29\n       7.1.5\
    \ TerminationState descriptor..........................29\n       7.1.6 Stream\
    \ descriptor....................................30\n       7.1.7 LocalControl\
    \ descriptor..............................31\n       7.1.8 Local and Remote descriptors.........................32\n\
    \       7.1.9 Events descriptor....................................35\n      \
    \ 7.1.10 EventBuffer descriptor..............................38\n       7.1.11\
    \ Signals descriptor..................................38\n       7.1.12 Audit\
    \ descriptor....................................40\n       7.1.13 ServiceChange\
    \ descriptor............................41\n       7.1.14 DigitMap descriptor.................................41\n\
    \       7.1.15 Statistics descriptor...............................46\n      \
    \ 7.1.16 Packages descriptor.................................47\n       7.1.17\
    \ ObservedEvents descriptor...........................47\n       7.1.18 Topology\
    \ descriptor.................................47\n       7.1.19 Error Descriptor....................................50\n\
    \     7.2 Command Application Programming Interface................50\n      \
    \ 7.2.1 Add..................................................51\n       7.2.2\
    \ Modify...............................................52\n       7.2.3 Subtract.............................................53\n\
    \       7.2.4 Move.................................................55\n      \
    \ 7.2.5 AuditValue...........................................56\n       7.2.6\
    \ AuditCapabilities....................................59\n       7.2.7 Notify...............................................60\n\
    \       7.2.8 ServiceChange........................................61\n      \
    \ 7.2.9 Manipulating and Auditing Context Attributes.........65\n       7.2.10\
    \ Generic Command Syntax..............................66\n     7.3 Command Error\
    \ Codes......................................66\n   8 Transactions.................................................66\n\
    \     8.1 Common parameters........................................68\n      \
    \ 8.1.1 Transaction Identifiers..............................68\n       8.1.2\
    \ Context Identifiers..................................68\n     8.2 Transaction\
    \ Application Programming Interface............69\n       8.2.1 TransactionRequest...................................69\n\
    \       8.2.2 TransactionReply.....................................69\n      \
    \ 8.2.3 TransactionPending...................................71\n     8.3 Messages.................................................72\n\
    \   9 Transport....................................................72\n     9.1\
    \ Ordering of Commands.....................................73\n     9.2 Protection\
    \ against Restart Avalanche.....................74\n   10 Security Considerations.....................................75\n\
    \     10.1 Protection of Protocol Connections......................75\n     10.2\
    \ Interim AH scheme.......................................76\n     10.3 Protection\
    \ of Media Connections.........................77\n   11 MG-MGC Control Interface....................................78\n\
    \     11.1 Multiple Virtual MGs....................................78\n     11.2\
    \ Cold start..............................................79\n     11.3 Negotiation\
    \ of protocol version.........................79\n     11.4 Failure of a MG.........................................80\n\
    \     11.5 Failure of an MGC.......................................81\n   12 Package\
    \ definition..........................................82\n     12.1 Guidelines\
    \ for defining packages........................82\n       12.1.1 Package.............................................83\n\
    \       12.1.2 Properties..........................................84\n      \
    \ 12.1.3 Events..............................................85\n       12.1.4\
    \ Signals.............................................85\n       12.1.5 Statistics..........................................86\n\
    \       12.1.6 Procedures..........................................86\n     12.2\
    \ Guidelines to defining Parameters to Events and Signals.86\n     12.3 Lists...................................................87\n\
    \     12.4 Identifiers.............................................87\n     12.5\
    \ Package registration....................................88\n   13 IANA Considerations.........................................88\n\
    \     13.1 Packages................................................88\n     13.2\
    \ Error codes.............................................89\n     13.3 ServiceChange\
    \ reasons...................................89\n   ANNEX A  Binary encoding of\
    \ the protocol.......................90\n     A.1 Coding of wildcards......................................90\n\
    \     A.2 ASN.1 syntax specification...............................92\n     A.3\
    \ Digit maps and path names...............................111\n   ANNEX B Text\
    \ encoding of the protocol.........................113\n     B.1 Coding of wildcards.....................................113\n\
    \     B.2 ABNF specification......................................113\n     B.3\
    \ Hexadecimal octet coding................................127\n     B.4 Hexadecimal\
    \ octet sequence..............................127\n   ANNEX C Tags for media stream\
    \ properties......................128\n     C.1 General media attributes................................128\n\
    \     C.2 Mux properties..........................................130\n     C.3\
    \ General bearer properties...............................130\n     C.4 General\
    \ ATM properties..................................130\n     C.5 Frame Relay.............................................134\n\
    \     C.6 IP......................................................134\n     C.7\
    \ ATM AAL2................................................134\n     C.8 ATM AAL1................................................136\n\
    \     C.9 Bearer capabilities.....................................137\n     C.10\
    \ AAL5 properties........................................147\n     C.11 SDP equivalents........................................148\n\
    \     C.12 H.245..................................................149\n   ANNEX\
    \ D Transport over IP.....................................150\n     D.1 Transport\
    \ over IP/UDP using Application Level Framing ..150\n       D.1.1 Providing At-Most-Once\
    \ functionality................150\n       D.1.2 Transaction identifiers and three-way\
    \ handshake.....151\n       D.1.3 Computing retransmission timers.....................152\n\
    \       D.1.4 Provisional responses...............................153\n      \
    \ D.1.5 Repeating Requests, Responses and Acknowledgements..153\n     D.2 Using\
    \ TCP...............................................155\n       D.2.1 Providing\
    \ the At-Most-Once functionality............155\n       D.2.2 Transaction identifiers\
    \ and three-way handshake.....155\n       D.2.3 Computing retransmission timers.....................156\n\
    \       D.2.4 Provisional responses...............................156\n      \
    \ D.2.5 Ordering of commands................................156\n   ANNEX E  Basic\
    \ packages.......................................157\n     E.1 Generic.................................................157\n\
    \     E.2 Base Root Package.......................................159\n     E.3\
    \ Tone Generator Package..................................161\n     E.4 Tone Detection\
    \ Package..................................163\n     E.5 Basic DTMF Generator\
    \ Package............................166\n     E.6 DTMF detection Package..................................167\n\
    \     E.7 Call Progress Tones Generator Package...................169\n     E.8\
    \ Call Progress Tones Detection Package...................171\n     E.9 Analog\
    \ Line Supervision Package.........................172\n     E.10 Basic Continuity\
    \ Package...............................175\n     E.11 Network Package........................................178\n\
    \     E.12 RTP Package............................................180\n     E.13\
    \ TDM Circuit Package....................................182\n   APPENDIX I EXAMPLE\
    \ CALL FLOWS (INFORMATIVE)...................184\n     A.1 Residential Gateway\
    \ to Residential Gateway Call.........184\n       A.1.1 Programming Residential\
    \ GW Analog Line Terminations\n             for Idle Behavior...................................184\n\
    \       A.1.2 Collecting Originator Digits and Initiating\n             Termination.........................................186\n\
    \   APPENDIX II  Changes From RFC 3015............................195\n   Intellectual\
    \ Property Rights..................................210\n   Acknowledgments...............................................211\n\
    \   Authors' Addresses............................................212\n   Full\
    \ Copyright Statement......................................213\n"
- title: 1  Scope
  contents:
  - "1  Scope\n   The present document, which is identical to the published version\
    \ of\n   ITU-T Recommendation H.248.1 (03/2002) except as noted below, defines\n\
    \   the protocols used between elements of a physically decomposed\n   multimedia\
    \ gateway.  There are no functional differences from a\n   system view between\
    \ a decomposed gateway, with distributed sub-\n   components potentially on more\
    \ than one physical device, and a\n   monolithic gateway such as described in\
    \ ITU-T Recommendation H.246.\n   This document does not define how gateways,\
    \ multipoint control units\n   or interactive voice response units (IVRs) work.\
    \  Instead it creates\n   a general framework that is suitable for these applications.\n\
    \   Packet network interfaces may include IP, ATM or possibly others.\n   The\
    \ interfaces will support a variety of Switched Circuit Network\n   (SCN) signalling\
    \ systems, including tone signalling, ISDN, ISUP, QSIG\n   and GSM.  National\
    \ variants of these signalling systems will be\n   supported where applicable.\n"
- title: 1.1 Changes From RFC 3015
  contents:
  - "1.1 Changes From RFC 3015\n   The differences between this document and RFC 3015\
    \ are documented in\n   Appendix II.\n"
- title: 1.2 Differences From ITU-T Recommendation H.248.1 (03/2002)
  contents:
  - "1.2 Differences From ITU-T Recommendation H.248.1 (03/2002)\n   This document\
    \ differs from the corresponding ITU-T publication in the\n   following respects:\n\
    \   -  Added IETF front matter in place of the corresponding ITU-T\n      material.\n\
    \   -  The ITU-T summary is too H.323-specific and has been omitted.\n   -  The\
    \ IETF conventions have been stated as governing this document.\n      As discussed\
    \ in section 5 below, this gives slightly greater\n      strength to \"should\"\
    \ requirements.\n   -  The Scope section (just above) has been edited slightly\
    \ to suit\n      its IETF context.\n   -  Added normative references to RFCs 2026\
    \ and 2119.\n   -  Figures 4, 5, and 6 show the centre of the context for greater\n\
    \      clarity.  Also added Figure 6a showing an important additional\n      example.\n\
    \   -  Added a paragraph in section 7.1.18 which was approved in the\n      Implementor's\
    \ Guide but lost inadvertently in the ITU-T approved\n      version.\n   -  This\
    \ document incorporates corrections to the informative examples\n      in Appendix\
    \ I which also appear in H.248.1 version 2, but which\n      were not picked up\
    \ in H.248.1 (03/2002).\n   -  This document includes a new Appendix II listing\
    \ all the changes\n      from RFC 3015.\n   -  This document includes an Acknowledgements\
    \ section listing the\n      authors of RFC 3015 but also many other people who\
    \ contributed to\n      the development of the Megaco/H.248.x protocol.\n   -\
    \  Moved the Intellectual Property declaration to its usual place in\n      an\
    \ IETF document and added a reference to declarations on the IETF\n      web site.\n"
- title: 2  References
  contents:
  - "2  References\n   The following ITU-T Recommendations and other references contain\n\
    \   provisions which, through reference in this text, constitute\n   provisions\
    \ of this RFC.  At the time of publication, the editions\n   indicated were valid.\
    \  All Recommendations and other references are\n   subject to revision; all users\
    \ of this RFC are therefore encouraged\n   to investigate the possibility of applying\
    \ the most recent edition of\n   the Recommendations and other references listed\
    \ below.  A list of the\n   currently valid ITU-T Recommendations is regularly\
    \ published.\n"
- title: 2.1   Normative references
  contents:
  - "2.1   Normative references\n   -  ITU-T Recommendation H.225.0 (1999), Call signalling\
    \ protocols and\n      media stream packetization for packet-based multimedia\n\
    \      communication systems.\n   -  ITU-T Recommendation H.235 (1998), Security\
    \ and encryption for\n      H-Series (H.323 and other H.245-based) multimedia\
    \ terminals.\n   -  ITU-T Recommendation H.245 (1998), Control protocol for multimedia\n\
    \      communication.\n   -  ITU-T Recommendation H.246 (1998), Interworking of\
    \ H-series\n      multimedia terminals with H-series multimedia terminals and\n\
    \      voice/voiceband terminals on GSTN and ISDN.\n   -  ITU-T Recommendation\
    \ H.248.8 (2002), H.248 Error Codes and Service\n      Change Reasons.\n   - \
    \ ITU-T Recommendation H.323 (1999), Packet-based multimedia\n      communication\
    \ systems.\n   -  ITU-T Recommendation I.363.1 (1996), B-ISDN ATM adaptation layer\n\
    \      (AAL) specification: Type 1 AAL.\n   -  ITU-T Recommendation I.363.2 (1997),\
    \ B-ISDN ATM adaptation layer\n      (AAL) specification: Type 2 AAL.\n   -  ITU-T\
    \ Recommendation I.363.5 (1996), B-ISDN ATM adaptation layer\n      (AAL) specification:\
    \ Type 5 AAL.\n   -  ITU-T Recommendation I.366.1 (1998), Segmentation and Reassembly\n\
    \      Service Specific Convergence Sublayer for the AAL type 2.\n   -  ITU-T\
    \ Recommendation I.366.2 (1999), AAL type 2 service specific\n      convergence\
    \ sublayer for trunking.\n   -  ITU-T Recommendation I.371 (2000), Traffic control\
    \ and congestion\n      control in B-ISDN.\n   -  ITU-T Recommendation Q.763 (1999),\
    \ Signalling System No. 7 - ISDN\n      user part formats and codes.\n   -  ITU-T\
    \ Recommendation Q.765.5 (2001), Application transport\n      mechanism - Bearer\
    \ independent call control (BICC).\n   -  ITU-T Recommendation Q.931 (1998), ISDN\
    \ user-network interface\n      layer 3 specification for basic call control.\n\
    \   -  ITU-T Recommendation Q.2630.1 (1999), AAL type 2 signalling\n      protocol\
    \ (Capability Set 1).\n   -  ITU-T Recommendation Q.2931 (1995), Digital Subscriber\
    \ Signalling\n      System No. 2 (DSS2) - User-Network Interface (UNI) - Layer\
    \ 3\n      specification for basic call/connection control.\n   -  ITU-T Recommendation\
    \ Q.2941.1 (1997), Digital Subscriber\n      Signalling System No. 2 - Generic\
    \ identifier transport.\n   -  ITU-T Recommendation Q.2961.1 (1995), Additional\
    \ signalling\n      capabilities to support traffic parameters for the tagging\
    \ option\n      and the sustainable call rate parameter set.\n   -  ITU-T Recommendation\
    \ Q.2961.2 (1997), Additional traffic\n      parameters: Support of ATM transfer\
    \ capability in the broadband\n      bearer capability information element.\n\
    \   -  ITU-T Recommendation Q.2965.1 (1999), Digital subscriber\n      signalling\
    \ system No. 2 - Support of Quality of Service classes.\n   -  ITU-T Recommendation\
    \ Q.2965.2 (1999), Digital subscriber\n      signalling system No. 2 - Signalling\
    \ of individual Quality of\n      Service parameters.\n   -  ITU-T Recommendation\
    \ V.76 (1996), Generic multiplexer using V.42\n      LAPM-based procedures.\n\
    \   -  ITU-T Recommendation X.213 (1995), Information technology - Open\n    \
    \  Systems Interconnection - Network service definition plus\n      Amendment\
    \ 1 (1997), Addition of the Internet protocol address\n      format identifier.\n\
    \   -  ITU-T Recommendation X.680 (1997), Information technology -\n      Abstract\
    \ Syntax Notation One (ASN.1): Specification of basic\n      notation.\n   - \
    \ ITU-T Recommendation X.690 (1997), Information Technology - ASN.1\n      Encoding\
    \ Rules: Specification of Basic Encoding Rules (BER),\n      Canonical Encoding\
    \ Rules (CER) and Distinguished Encoding Rules\n      (DER).\n   -  ATM Forum\
    \ (1996), ATM User-Network Interface (UNI) Signalling\n      Specification - Version\
    \ 4.0.\n   [RFC 1006] Rose, M. and D. Cass, \"ISO Transport Service on top of\
    \ the\n              TCP, Version 3\", STD 35, RFC 1006, May 1987.\n   [RFC 2026]\
    \ Brander, S., \"The Internet Standards Process -- Revision\n              3\"\
    , BCP 9, RFC 2026, October 1996.\n   [RFC 2119] Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC 2234] Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n\
    \              Specifications: ABNF\", RFC 2234, November 1997.\n   [RFC 2327]\
    \ Handley, M. and V. Jacobson, \"SDP: Session Description\n              Protocol\"\
    , RFC 2327, April 1998.\n   [RFC 2402] Kent, S. and R. Atkinson, \"IP Authentication\
    \ Header\", RFC\n              2402, November 1998.\n   [RFC 2406] Kent, S. and\
    \ R. Atkinson, \"IP Encapsulating Security\n              Payload (ESP)\", RFC\
    \ 2406, November 1998.\n"
- title: 2.2   Informative references
  contents:
  - "2.2   Informative references\n   -  ITU-T Recommendation E.180/Q.35 (1998), Technical\
    \ characteristics\n      of tones for the telephone service.\n   -  CCITT Recommendation\
    \ G.711 (1988), Pulse Code Modulation (PCM) of\n      voice frequencies.\n   -\
    \  ITU-T Recommendation H.221 (1999), Frame structure for a 64 to\n      1920\
    \ kbit/s channel in audiovisual teleservices.\n   -  ITU  T Recommendation H.223\
    \ (1996), Multiplexing protocol for low\n      bit rate multimedia communication.\n\
    \   -  ITU-T Recommendation H.226 (1998), Channel aggregation protocol\n     \
    \ for multilink operation on circuit-switched networks\n   -  ITU-T Recommendation\
    \ Q.724 (1998), Signalling procedures.\n   -  ITU-T Recommendation Q.764 (1999),\
    \ Signalling system No. 7 - ISDN\n      user part signalling procedures.\n   -\
    \  ITU-T Recommendation Q.1902.4 (2001), Bearer independent call\n      control\
    \ protocol - Basic call procedures.\n   [RFC 768]  Postel, J., \"User Datagram\
    \ Protocol\", STD 6, RFC 768,\n              August 1980.\n   [RFC 791]  Postel,\
    \ J., \"Internet Protocol\", STD 5, RFC 791, September\n              1981.\n\
    \   [RFC 793]  Postel, J., \"Transmission Control Protocol\", STD 7, RFC\n   \
    \           793, September 1981.\n   [RFC 1661] Simpson, W., Ed., \"The Point-to-Point\
    \ Protocol (PPP)\", STD\n              51, RFC 1661, July 1994.\n   [RFC 1889]\
    \ Schulzrinne, H., Casner, S., Frederick, R. and V.\n              Jacobson, \"\
    RTP: A Transport Protocol for Real-Time\n              Applications\", RFC 1889,\
    \ January 1996.\n   [RFC 1890] Schulzrinne, H. and G. Fokus, \"RTP Profile for\
    \ Audio and\n              Video Conferences with Minimal Control\",  RFC 1890,\n\
    \              January 1996.\n   [RFC 2401] Kent, S. and R. Atkinson, \"Security\
    \ Architecture for the\n              Internet Protocol\", RFC 2401, November\
    \ 1998.\n   [RFC 2460] Deering, S. and R. Hinden, \"Internet Protocol, Version\
    \ 6\n              (IPv6) Specification\", RFC 2460, December 1998.\n   [RFC 2543]\
    \ Handley, M., Schulzrinne, H., Schooler, E. and J.\n              Rosenberg,\
    \ \"SIP: Session Initiation Protocol\", RFC 2543,\n              March 1999.\n\
    \   [RFC 2805] Greene, N., Ramalho, M. and B. Rosen, \"Media Gateway\n       \
    \       Control Protocol Architecture and Requirements\", RFC 2805,\n        \
    \      April 2000.\n"
- title: 3  Definitions
  contents:
  - "3  Definitions\n   This document defines the following terms:\n   Access gateway:\n\
    \   A type of gateway that provides a User-Network Interface (UNI) such\n   as\
    \ ISDN.\n   Descriptor:\n   A syntactic element of the protocol that groups related\
    \ properties.\n   For instance, the properties of a media flow on the MG can be\
    \ set by\n   the MGC by including the appropriate descriptor in a command.\n \
    \  Media Gateway (MG):\n   The media gateway converts media provided in one type\
    \ of network to\n   the format required in another type of network.  For example,\
    \ a MG\n   could terminate bearer channels from a switched circuit network\n \
    \  (e.g., DS0s) and media streams from a packet network (e.g., RTP\n   streams\
    \ in an IP network).  This gateway may be capable of processing\n   audio, video\
    \ and T.120 alone or in any combination, and will be\n   capable of full duplex\
    \ media translations.  The MG may also play\n   audio/video messages and perform\
    \ other IVR functions, or may perform\n   media conferencing.\n   Media Gateway\
    \ Controller (MGC):\n   Controls the parts of the call state that pertain to connection\n\
    \   control for media channels in a MG.\n   Multipoint Control Unit (MCU):\n \
    \  An entity that controls the setup and coordination of a multi-user\n   conference\
    \ that typically includes processing of audio, video and\n   data.\n   Residential\
    \ gateway:\n   A gateway that interworks an analogue line to a packet network.\
    \  A\n   residential gateway typically contains one or two analogue lines and\n\
    \   is located at the customer premises.\n   SCN FAS signalling gateway:\n   This\
    \ function contains the SCN Signalling Interface that terminates\n   SS7, ISDN\
    \ or other signalling links where the call control channel\n   and bearer channels\
    \ are collocated in the same physical span.\n   SCN NFAS signalling gateway:\n\
    \   This function contains the SCN Signalling Interface that terminates\n   SS7\
    \ or other signalling links where the call control channels are\n   separated\
    \ from bearer channels.\n   Stream:\n   Bidirectional media or control flow received/sent\
    \ by a media gateway\n   as part of a call or conference.\n   Trunk:\n   A communication\
    \ channel between two switching systems such as a DS0\n   on a T1 or E1 line.\n\
    \   Trunking gateway:\n   A gateway between SCN network and packet network that\
    \ typically\n   terminates a large number of digital circuits.\n"
- title: 4  Abbreviations
  contents:
  - "4  Abbreviations\n   This RFC document uses the following abbreviations:\n  \
    \ ALF   Application Layer Framing\n   ATM   Asynchronous Transfer Mode\n   CAS\
    \   Channel Associated Signalling\n   DTMF  Dual Tone Multi-Frequency\n   FAS\
    \   Facility Associated Signalling\n   GSM   Global System for Mobile communications\n\
    \   GW    GateWay\n   IANA  Internet Assigned Numbers Authority (superseded by\
    \ Internet\n         Corporation for Assigned Names and Numbers - ICANN)\n   IP\
    \    Internet Protocol\n   ISUP  ISDN User Part\n   IVR   Interactive Voice Response\n\
    \   MG    Media Gateway\n   MGC   Media Gateway Controller\n   NFAS  Non-Facility\
    \ Associated Signalling\n   PRI   Primary Rate Interface\n   PSTN  Public Switched\
    \ Telephone Network\n   QoS   Quality of Service\n   RTP   Real-time Transport\
    \ Protocol\n   SCN   Switched Circuit Network\n   SG    Signalling Gateway\n \
    \  SS7   Signalling System No. 7\n"
- title: 5  Conventions
  contents:
  - "5  Conventions\n   In the H.248.1 Recommendation, \"SHALL\" refers to a mandatory\n\
    \   requirement, while \"SHOULD\" refers to a suggested but optional\n   feature\
    \ or procedure.  The term \"MAY\" refers to an optional course of\n   action without\
    \ expressing a preference.  Note that these definition\n   are overridden in the\
    \ present document by the RFC 2119 conventions\n   stated at the beginning of\
    \ this document.  RFC 2119 has a more\n   precise definition of \"should\" than\
    \ is provided by the ITU-T.\n"
- title: 6  Connection model
  contents:
  - "6  Connection model\n   The connection model for the protocol describes the logical\
    \ entities,\n   or objects, within the Media Gateway that can be controlled by\
    \ the\n   Media Gateway Controller.  The main abstractions used in the\n   connection\
    \ model are Terminations and Contexts.\n   A Termination sources and/or sinks\
    \ one or more streams.  In a\n   multimedia conference, a Termination can be multimedia\
    \ and sources or\n   sinks multiple media streams.  The media stream parameters,\
    \ as well\n   as modem, and bearer parameters are encapsulated within the\n  \
    \ Termination.\n   A Context is an association between a collection of Terminations.\n\
    \   There is a special type of Context, the null Context, which contains\n   all\
    \ Terminations that are not associated to any other Termination.\n   For instance,\
    \ in a decomposed access gateway, all idle lines are\n   represented by Terminations\
    \ in the null Context.\n   Following is a graphical depiction of these concepts.\
    \  The diagram of\n   Figure 1 gives several examples and is not meant to be an\n\
    \   all-inclusive illustration.  The asterisk box in each of the Contexts\n  \
    \ represents the logical association of Terminations implied by the\n   Context.\n\
    \         +------------------------------------------------------+\n         |Media\
    \ Gateway                                         |\n         | +-------------------------------------------------+\
    \  |\n         | |Context                          +-------------+ |  |\n    \
    \     | |                                 | Termination | |  |\n         | | \
    \                                |-------------| |  |\n         | |  +-------------+\
    \             +->| SCN Bearer  |<---+->\n         | |  | Termination |   +-----+\
    \   |  |   Channel   | |  |\n         | |  |-------------|   |     |---+  +-------------+\
    \ |  |\n       <-+--->| RTP Stream  |---|  *  |                      |  |\n  \
    \       | |  |             |   |     |---+  +-------------+ |  |\n         | |\
    \  +-------------+   +-----+   |  | Termination | |  |\n         | |         \
    \                     |  |-------------| |  |\n         | |                  \
    \            +->| SCN Bearer  |<---+->\n         | |                         \
    \        |   Channel   | |  |\n         | |                                 +-------------+\
    \ |  |\n         | +-------------------------------------------------+  |\n  \
    \       |                                                      |\n         | \
    \                                                     |\n         |          \
    \          +------------------------------+  |\n         |   (NULL Context)  \
    \ |Context                       |  |\n         |  +-------------+   |       \
    \       +-------------+ |  |\n         |  | Termination |   | +-----+      | Termination\
    \ | |  |\n         |  |-------------|   | |     |      |-------------| |  |\n\
    \         |  | SCN Bearer  |   | |  *  |------| SCN Bearer  |<---+->\n       \
    \  |  |   Channel   |   | |     |      |   Channel   | |  |\n         |  +-------------+\
    \   | +-----+      +-------------+ |  |\n         |                    +------------------------------+\
    \  |\n         |                                                      |\n    \
    \     |                                                      |\n         | +-------------------------------------------------+\
    \  |\n         | |Context                                          |  |\n    \
    \     | |  +-------------+                +-------------+ |  |\n         | | \
    \ | Termination |   +-----+      | Termination | |  |\n         | |  |-------------|\
    \   |     |      |-------------| |  |\n       <-+--->| SCN Bearer  |---|  *  |------|\
    \ SCN Bearer  |<---+->\n         | |  |   Channel   |   |     |      |   Channel\
    \   | |  |\n         | |  +-------------+   +-----+      +-------------+ |  |\n\
    \         | +-------------------------------------------------+  |\n         |\
    \ ___________________________________________________  |\n         +------------------------------------------------------+\n\
    \            Figure 1: Examples of Megaco/H.248 Connection Model\n   The example\
    \ in Figure 2 shows an example of one way to accomplish a\n   call-waiting scenario\
    \ in a decomposed access gateway, illustrating\n   the relocation of a Termination\
    \ between Contexts.  Terminations T1\n   and T2 belong to Context C1 in a two-way\
    \ audio call.  A second audio\n   call is waiting for T1 from Termination T3.\
    \  T3 is alone in Context\n   C2.  T1 accepts the call from T3, placing T2 on\
    \ hold.  This action\n   results in T1 moving into Context C2, as shown in Figure\
    \ 3.\n         +------------------------------------------------------+\n    \
    \     |Media Gateway                                         |\n         | +-------------------------------------------------+\
    \  |\n         | |Context C1                                       |  |\n    \
    \     | |  +-------------+                +-------------+ |  |\n         | | \
    \ | Term. T2    |   +-----+      | Term. T1    | |  |\n         | |  |-------------|\
    \   |     |      |-------------| |  |\n       <-+--->| RTP Stream  |---|  *  |------|\
    \ SCN Bearer  |<---+->\n         | |  |             |   |     |      |   Channel\
    \   | |  |\n         | |  +-------------+   +-----+      +-------------+ |  |\n\
    \         | +-------------------------------------------------+  |\n         |\
    \                                                      |\n         | +-------------------------------------------------+\
    \  |\n         | |Context C2                                       |  |\n    \
    \     | |                                 +-------------+ |  |\n         | | \
    \                   +-----+      | Term. T3    | |  |\n         | |          \
    \          |     |      |-------------| |  |\n         | |                   \
    \ |  *  |------| SCN Bearer  |<---+->\n         | |                    |     |\
    \      |   Channel   | |  |\n         | |                    +-----+      +-------------+\
    \ |  |\n         | +-------------------------------------------------+  |\n  \
    \       +------------------------------------------------------+\n     Figure\
    \ 2: Example Call Waiting Scenario / Alerting Applied to T1\n         +------------------------------------------------------+\n\
    \         |Media Gateway                                         |\n         |\
    \ +-------------------------------------------------+  |\n         | |Context\
    \ C1                                       |  |\n         | |  +-------------+\
    \                                |  |\n         | |  | Term. T2    |   +-----+\
    \                      |  |\n         | |  |-------------|   |     |         \
    \             |  |\n       <-+--->| RTP Stream  |---|  *  |                  \
    \    |  |\n         | |  |             |   |     |                      |  |\n\
    \         | |  +-------------+   +-----+                      |  |\n         |\
    \ +-------------------------------------------------+  |\n         |         \
    \                                             |\n         | +-------------------------------------------------+\
    \  |\n         | |Context C2                                       |  |\n    \
    \     | |  +-------------+                +-------------+ |  |\n         | | \
    \ | Term. T1    |   +-----+      | Term. T3    | |  |\n         | |  |-------------|\
    \   |     |      |-------------| |  |\n       <-+--->| SCN Bearer  |---|  *  |------|\
    \ SCN Bearer  |<---+->\n         | |  |   Channel   |   |     |      |   Channel\
    \   | |  |\n         | |  +-------------+   +-----+      +-------------+ |  |\n\
    \         | +-------------------------------------------------+  |\n         +------------------------------------------------------+\n\
    \          Figure 3. Example Call Waiting Scenario / Answer by T1\n"
- title: 6.1   Contexts
  contents:
  - "6.1   Contexts\n   A Context is an association between a number of Terminations.\
    \  The\n   Context describes the topology (who hears/sees whom) and the media\n\
    \   mixing and/or switching parameters if more than two Terminations are\n   involved\
    \ in the association.\n   There is a special Context called the null Context.\
    \  It contains\n   Terminations that are not associated to any other Termination.\n\
    \   Terminations in the null Context can have their parameters examined\n   or\
    \ modified, and may have events detected on them.\n   In general, an Add command\
    \ is used to add Terminations to Contexts.\n   If the MGC does not specify an\
    \ existing Context to which the\n   Termination is to be added, the MG creates\
    \ a new Context.  A\n   Termination may be removed from a Context with a Subtract\
    \ command,\n   and a Termination may be moved from one Context to another with\
    \ a\n   Move command.  A Termination SHALL exist in only one Context at a\n  \
    \ time.\n   The maximum number of Terminations in a Context is a MG property.\n\
    \   Media gateways that offer only point-to-point connectivity might\n   allow\
    \ at most two Terminations per Context.  Media gateways that\n   support multipoint\
    \ conferences might allow three or more Terminations\n   per Context.\n"
- title: 6.1.1 Context attributes and descriptors
  contents:
  - "6.1.1 Context attributes and descriptors\n   The attributes of Contexts are:\n\
    \   -  ContextID.\n   -  The topology (who hears/sees whom).\n      The topology\
    \ of a Context describes the flow of media between the\n      Terminations within\
    \ a Context.  In contrast, the mode of a\n      Termination (send/receive/...)\
    \ describes the flow of the media at\n      the ingress/egress of the media gateway.\n\
    \   -  The priority is used for a Context in order to provide the MG with\n  \
    \    information about a certain precedence handling for a Context.\n      The\
    \ MGC can also use the priority to control autonomously the\n      traffic precedence\
    \ in the MG in a smooth way in certain\n      situations (e.g., restart), when\
    \ a lot of Contexts must be handled\n      simultaneously.  Priority 0 is the\
    \ lowest priority and a priority\n      of 15 is the highest priority.\n   - \
    \ An indicator for an emergency call is also provided to allow a\n      preference\
    \ handling in the MG.\n"
- title: 6.1.2 Creating, deleting and modifying Contexts
  contents:
  - "6.1.2 Creating, deleting and modifying Contexts\n   The protocol can be used\
    \ to (implicitly) create Contexts and modify\n   the parameter values of existing\
    \ Contexts.  The protocol has commands\n   to add Terminations to Contexts, subtract\
    \ them from Contexts, and to\n   move Terminations between Contexts.  Contexts\
    \ are deleted implicitly\n   when the last remaining Termination is subtracted\
    \ or moved out.\n"
- title: 6.2   Terminations
  contents:
  - "6.2   Terminations\n   A Termination is a logical entity on a MG that sources\
    \ and/or sinks\n   media and/or control streams.  A Termination is described by\
    \ a number\n   of characterizing Properties, which are grouped in a set of\n \
    \  Descriptors that are included in commands.  Terminations have unique\n   identities\
    \ (TerminationIDs), assigned by the MG at the time of their\n   creation.\n  \
    \ Terminations representing physical entities have a semi-permanent\n   existence.\
    \  For example, a Termination representing a TDM channel\n   might exist for as\
    \ long as it is provisioned in the gateway.\n   Terminations representing ephemeral\
    \ information flows, such as RTP\n   flows, would usually exist only for the duration\
    \ of their use.\n   Ephemeral Terminations are created by means of an Add command.\
    \  They\n   are destroyed by means of a Subtract command.  In contrast, when a\n\
    \   physical Termination is Added to or Subtracted from a Context, it is\n   taken\
    \ from or to the null Context, respectively.\n   Terminations may have signals\
    \ applied to them (see 7.1.11).\n   Terminations may be programmed to detect Events,\
    \ the occurrence of\n   which can trigger notification messages to the MGC, or\
    \ action by the\n   MG.  Statistics may be accumulated on a Termination.  Statistics\
    \ are\n   reported to the MGC upon request (by means of the AuditValue command,\n\
    \   see 7.2.5) and when the Termination is taken out of the call it is\n   in.\n\
    \   Multimedia gateways may process multiplexed media streams.  For\n   example,\
    \ Recommendation H.221 describes a frame structure for\n   multiple media streams\
    \ multiplexed on a number of digital 64 kbit/s\n   channels.  Such a case is handled\
    \ in the connection model in the\n   following way.  For every bearer channel\
    \ that carries part of the\n   multiplexed streams, there is a physical or ephemeral\
    \ \"bearer\n   Termination\".  The bearer Terminations that source/sink the digital\n\
    \   channels are connected to a separate Termination called the\n   \"multiplexing\
    \ Termination\".  The multiplexing termination is an\n   ephemeral termination\
    \ representing a frame-oriented session.  The\n   MultiplexDescriptor for this\
    \ Termination describes the multiplex used\n   (e.g., H.221 for an H.320 session)\
    \ and indicates the order in which\n   the contained digital channels are assembled\
    \ into a frame.\n   Multiplexing terminations may be cascades (e.g., H.226 multiplex\
    \ of\n   digital channels feeding into a H.223 multiplex supporting an H.324\n\
    \   session).\n   The individual media streams carried in the session are described\
    \ by\n   StreamDescriptors on the multiplexing Termination.  These media\n   streams\
    \ can be associated with streams sourced/sunk by Terminations\n   in the Context\
    \ other than the bearer Terminations supporting the\n   multiplexing Termination.\
    \  Each bearer Termination supports only a\n   single data stream.  These data\
    \ streams do not appear explicitly as\n   streams on the multiplexing Termination\
    \ and they are hidden from the\n   rest of the context.\n   Figures 4, 5, 6, and\
    \ 6a illustrate typical applications of the\n   multiplexing termination and Multiplex\
    \ Descriptor.\n                  +-----------------------------------+\n     \
    \             | Context     +-------+             |\n                 +----+ \
    \        |       |             |\n   Circuit 1 -|--| TC1|---------+ Tmux  |  \
    \           |\n              |  +----+ (Str 1) |       |  Audio    +-----+\n \
    \             |   |             |       +-----*-----+     |-----\n           \
    \   |  +----+         | H.22x | Stream 1  |     |\n   Circuit 2 -|--| TC2|---------+\
    \ multi-|           | TR1 |\n              |  +----+ (Str 1) | plex  |       \
    \    |(RTP)|\n              |   |             |       |  Video    |     |\n  \
    \            |  +----+         |       +-----*-----+     |-----\n   Circuit 3\
    \ -|--| TC3|---------+       | Stream 2  |     |\n              /  +----+ (Str\
    \ 1) |       |           +-----+\n             /    |             +-------+  \
    \           |\n            /     +-----------------\\-----------------+\n   Audio,\
    \ video, and control         \\\n   signals are carried in frames    Tmux is an\
    \ ephemeral with two\n   spanning the circuits.           explicit Stream Descriptors\n\
    \                                    and a Multiplex Descriptor.\n      Figure\
    \ 4: Multiplexed Termination Scenario - Circuit to Packet\n              (Asterisks\
    \ * denote the centre of the context)\n                    Context\n         \
    \         +--------------------------------------+\n                  |      \
    \ +-------+        +-------+     |\n                 +----+   |       |      \
    \  |       |   +----+\n   Circuit 1 ----| TC1|---+ Tmux1 |  Audio | Tmux2 +---|\
    \ TC4|---\n                 +----+   |       +---*----+       |   +----+\n   \
    \               |       |       |  Str 1 |       |     |\n                 +----+\
    \   | H.22x |        | H.22x |   +----+\n   Circuit 2 ----| TC2|---+ multi-| \
    \       | multi-+---| TC5|---\n                 +----+   | plex  |        | plex\
    \  |   +----+\n                  |       |       |  Video |       |     |\n  \
    \               +----+   |       +---*----+       |   +----+\n   Circuit 3 ----|\
    \ TC3|---+       |  Str 2 |       +---| TC6|---\n                 +----+   | \
    \      |        |       |   +----+\n                  |       +-------+      \
    \  +-------+     |\n                  +-----------------\\-----/--------------+\n\
    \                                     \\   /\n             Tmux1 and Tmux2 are\
    \ ephemerals each with two\n            explicit Stream Descriptors and a Multiplex\
    \ Descriptor.\n      Figure 5: Multiplexed Termination Scenario - Circuit to Circuit\n\
    \              (Asterisks * denote the centre of the context)\n              \
    \    +-----------------------------------+\n                  | Context     +-------+\
    \             |\n                 +----+         |       |             |\n   Circuit\
    \ 1 -|--| TC1|---------+ Tmux  |             |\n              |  +----+ (Str 1)\
    \ |       |  Audio    +-----+\n              |   |             |       +-----*-----+\
    \ TR1 |-----\n              |  +----+         | H.22x | Stream 1  |(RTP)|\n  \
    \ Circuit 2 -|--| TC2|---------+ multi-|           +-----+\n              |  +----+\
    \ (Str 1) | plex  |             |\n              |   |             |       | \
    \ Video    +-----+\n              |  +----+         |       +-----*-----+ TR2\
    \ |-----\n   Circuit 3 -|--| TC3|---------+       | Stream 2  |(RTP)|\n      \
    \        /  +----+ (Str 1) |       |           +-----+\n             /    |  \
    \           +-------+             |\n            /     +-----------------\\-----------------+\n\
    \   Audio, video, and control         \\ Tmux is an ephemeral with two\n   signals\
    \ are carried in frames    explicit Stream Descriptors and\n   spanning the circuits.\
    \           and a Multiplex Descriptor.\n      Figure 6: Multiplexed Termination\
    \ Scenario - Single to Multiple\n                               Terminations\n\
    \              (Asterisks * denote the centre of the context)\n            Context\n\
    \          +---------------------------------------------+\n          |      \
    \ +-------+       +-------+             |\n   Cct 1 +----+   |       |       |\
    \       | Audio     +-----+\n     ----| TC1|---+ Tmux1 |       | Tmux2 +-----*-----|\
    \ TR1 |-----\n         +----+   |       |       |       | Stream 1  |(RTP)|\n\
    \          |       |       | Data  |       |           +-----+\n   Cct 2 +----+\
    \   | H.226 +-------+ H.223 |             |\n     ----| TC2|---+ multi-|(Str 1)|\
    \ multi-| Control   +-----+\n         +----+   | plex  |       | plex  +-----*-----+\
    \ Tctl|-----\n          |       |       |       |       | Stream 3  +-----+\n\
    \   Cct 3 +----+   |       |       |       |             |\n     ----| TC3|---+\
    \       |       |       |           +-----+\n         +----+   |       |     \
    \  |       +-----*-----+ TR2 |-----\n          |       +-------+       |     \
    \  |  Video    |(RTP)|\n          |                       +-------+ Stream 2 \
    \ +-----+\n          |                                             |\n       \
    \   +---------------------------------------------+\n        Tmux1 has a Multiplex\
    \ Descriptor and a single data stream.\n        Tmux2 has a Multiplex Descriptor\
    \ with a single bearer and\n        three explicit Stream Descriptors.\n    Figure\
    \ 6a: Multiplexed Termination Scenario - Cascaded Multiplexes\n              (Asterisks\
    \ * denote the centre of the context)\n     Note: this figure does not appear\
    \ in Rec.  H.248.1\n   Terminations may be created which represent multiplexed\
    \ bearers, such\n   as an ATM AAL Type 2 bearer.  When a new multiplexed bearer\
    \ is to be\n   created, an ephemeral Termination is created in a Context established\n\
    \   for this purpose.  When the Termination is subtracted, the\n   multiplexed\
    \ bearer is destroyed.\n"
- title: 6.2.1 Termination dynamics
  contents:
  - "6.2.1 Termination dynamics\n   The protocol can be used to create new Terminations\
    \ and to modify\n   property values of existing Terminations.  These modifications\n\
    \   include the possibility of adding or removing events and/or signals.\n   The\
    \ Termination properties, and events and signals are described in\n   the ensuing\
    \ subclauses.  An MGC can only release/modify Terminations\n   and the resources\
    \ that the Termination represents which it has\n   previously seized via, e.g.,\
    \ the Add command.\n"
- title: 6.2.2 TerminationIDs
  contents:
  - "6.2.2 TerminationIDs\n   Terminations are referenced by a TerminationID, which\
    \ is an arbitrary\n   schema chosen by the MG.\n   TerminationIDs of physical\
    \ Terminations are provisioned in the Media\n   Gateway.  The TerminationIDs may\
    \ be chosen to have structure.  For\n   instance, a TerminationID may consist\
    \ of trunk group and a trunk\n   within the group.\n   A wildcarding mechanism\
    \ using two types of wildcards can be used with\n   TerminationIDs.  The two wildcards\
    \ are ALL and CHOOSE.  The former is\n   used to address multiple Terminations\
    \ at once, while the latter is\n   used to indicate to a media gateway that it\
    \ must select a Termination\n   satisfying the partially specified TerminationID.\
    \  This allows, for\n   instance, that a MGC instructs a MG to choose a circuit\
    \ within a\n   trunk group.\n   When ALL is used in the TerminationID of a command,\
    \ the effect is\n   identical to repeating the command with each of the matching\n\
    \   TerminationIDs.  The use of ALL does not address the ROOT\n   termination.\
    \  Since each of these commands may generate a response,\n   the size of the entire\
    \ response may be large.  If individual\n   responses are not required, a wildcard\
    \ response may be requested.  In\n   such a case, a single response is generated,\
    \ which contains the UNION\n   of all of the individual responses which otherwise\
    \ would have been\n   generated, with duplicate values suppressed.  For instance,\
    \ given a\n   Termination Ta with properties p1=a, p2=b and Termination Tb with\n\
    \   properties p2=c, p3=d, a UNION response would consist of a wildcarded\n  \
    \ TerminationId and the sequence of properties p1=a, p2=b,c and p3=d.\n   Wildcard\
    \ response may be particularly useful in the Audit commands.\n   The encoding\
    \ of the wildcarding mechanism is detailed in Annexes A\n   and B.\n"
- title: 6.2.3 Packages
  contents:
  - "6.2.3 Packages\n   Different types of gateways may implement Terminations that\
    \ have\n   widely differing characteristics.  Variations in Terminations are\n\
    \   accommodated in the protocol by allowing Terminations to have\n   optional\
    \ Properties, Events, Signals and Statistics implemented by\n   MGs.\n   In order\
    \ to achieve MG/MGC interoperability, such options are grouped\n   into Packages,\
    \ and typically a Termination realizes a set of such\n   Packages.  More information\
    \ on definition of packages can be found in\n   clause 12.  An MGC can audit a\
    \ Termination to determine which\n   Packages it realizes.\n   Properties, Events,\
    \ Signals and Statistics defined in Packages, as\n   well as parameters to them,\
    \ are referenced by identifiers (Ids).\n   Identifiers are scoped.  For each package,\
    \ PropertyIds, EventIds,\n   SignalIds, StatisticsIds and ParameterIds have unique\
    \ name spaces and\n   the same identifier may be used in each of them.  Two PropertyIds\
    \ in\n   different packages may also have the same identifier, etc.\n   To support\
    \ a particular package the MG must support all properties,\n   signals, events\
    \ and statistics defined in a package.  It must also\n   support all Signal and\
    \ Event parameters.  The MG may support a subset\n   of the values listed in a\
    \ package for a particular Property or\n   Parameter.\n   When packages are extended,\
    \ the properties, events, signals and\n   statistics defined in the base package\
    \ can be referred to using\n   either the extended package name or the base package\
    \ name.  For\n   example, if Package A defines event e1, and Package B extends\
    \ Package\n   A, then B/e1 is an event for a termination implementing Package\
    \ B. By\n   definition, the MG MUST also implement the base Package, but it is\n\
    \   optional to publish the base package as an allowed interface.  If it\n   does\
    \ publish  A, then A would be reported on the Package Descriptor\n   in AuditValue\
    \ as well as B, and event A/e1 would be available on a\n   termination.  If the\
    \ MG does not publish A, then only B/e1 would be\n   available.  If published\
    \ through AuditValue, A/e1 and B/e1 are the\n   same event.\n   For improved interoperability\
    \ and backward compatibility, an MG MAY\n   publish all Packages supported by\
    \ its Terminations, including base\n   Packages from which extended Packages are\
    \ derived.  An exception to\n   this is in cases where the base packages are expressly\
    \ \"Designed to\n   be extended only\".\n"
- title: 6.2.4 Termination properties and descriptors
  contents:
  - "6.2.4 Termination properties and descriptors\n   Terminations have properties.\
    \  The properties have unique\n   PropertyIDs. Most properties have default values,\
    \ which are\n   explicitly defined in this protocol specification or in a package\n\
    \   (see clause 12) or set by provisioning.  If not provisioned\n   otherwise,\
    \ the properties in all descriptors except TerminationState\n   and LocalControl\
    \ default to empty/\"no value\" when a Termination is\n   first created or returned\
    \ to the null Context.  The default contents\n   of the two exceptions are described\
    \ in 7.1.5 and 7.1.7.\n   The provisioning of a property value in the MG will\
    \ override any\n   default value, be it supplied in this protocol specification\
    \ or in a\n   package.  Therefore if it is essential for the MGC to have full\n\
    \   control over the property values of a Termination, it should supply\n   explicit\
    \ values when ADDing the Termination to a Context.\n   Alternatively, for a physical\
    \ Termination the MGC can determine any\n   provisioned property values by auditing\
    \ the Termination while it is\n   in the NULL Context.\n   There are a number\
    \ of common properties for Terminations and\n   properties specific to media streams.\
    \  The common properties are also\n   called the Termination state properties.\
    \  For each media stream,\n   there are local properties and properties of the\
    \ received and\n   transmitted flows.\n   Properties not included in the base\
    \ protocol are defined in Packages.\n   These properties are referred to by a\
    \ name consisting of the\n   PackageName and a PropertyId.  Most properties have\
    \ default values\n   described in the Package description.  Properties may be\
    \ read-only or\n   read/write.  The possible values of a property may be audited,\
    \ as can\n   their current values.  For properties that are read/write, the MGC\n\
    \   can set their values.  A property may be declared as \"Global\" which\n  \
    \ has a single value shared by all Terminations realizing the package.\n   Related\
    \ properties are grouped into descriptors for convenience.\n   When a Termination\
    \ is added to a Context, the value of its read/write\n   properties can be set\
    \ by including the appropriate descriptors as\n   parameters to the Add command.\
    \  Similarly, a property of a\n   Termination in a Context may have its value\
    \ changed by the Modify\n   command.\n   Properties may also have their values\
    \ changed when a Termination is\n   moved from one Context to another as a result\
    \ of a Move command.  In\n   some cases, descriptors are returned as output from\
    \ a command.\n   In general, if a Descriptor is completely omitted from one of\
    \ the\n   aforementioned Commands, the properties in that Descriptor retain\n\
    \   their prior values for the Termination(s) upon which the Command\n   acts.\
    \  On the other hand, if some read/write properties are omitted\n   from a Descriptor\
    \ in a Command (i.e., the Descriptor is only\n   partially specified), those properties\
    \ will be reset to their default\n   values for the Termination(s) upon which\
    \ the Command acts, unless the\n   package specifies other behavior.  For more\
    \ details, see clause 7.1\n   dealing with the individual Descriptors.\n   The\
    \ following table lists all of the possible descriptors and their\n   use.  Not\
    \ all descriptors are legal as input or output parameters to\n   every command.\n\
    \   Descriptor name  Description\n   Modem            Identifies modem type and\
    \ properties when\n                    applicable\n   Mux              Describes\
    \ multiplex type for multimedia\n                    Terminations (e.g., H.221,\
    \ H.223, H.225.0) and\n                    Terminations forming the input mux\n\
    \   Media            A list of media stream specifications (see 7.1.4)\n   TerminationState\
    \ Properties of a Termination (which can be defined\n                    in Packages)\
    \ that are not stream specific\n   Stream           A list of remote/local/localControl\
    \ descriptors for\n                    a single stream\n   Local            Contains\
    \ properties that specify the media flows\n                    that the MG receives\
    \ from the remote entity.\n   Remote           Contains properties that specify\
    \ the media flows\n                    that the MG sends to the remote entity.\n\
    \   LocalControl     Contains properties (which can be defined in\n          \
    \          packages) that are of interest between the MG and\n               \
    \     the MGC.\n   Events           Describes events to be detected by the MG\
    \ and what\n                    to do when an event is detected.\n   EventBuffer\
    \      Describes events to be detected by the MG when\n                    Event\
    \ Buffering is active.\n   Signals          Describes signals (see 7.1.11) applied\
    \  to\n                    Terminations.\n   Audit            In Audit commands,\
    \ identifies which information is\n                    desired.\n   Packages \
    \        In AuditValue, returns a list of Packages realized\n                \
    \    by Termination.\n   DigitMap         Defines patterns against which sequences\
    \ of a\n                    specified set of events are to be matched so they\n\
    \                    can be reported as a group rather than singly.\n   ServiceChange\
    \    In ServiceChange, what, why service change\n                    occurred,\
    \ etc.\n   ObservedEvents   In Notify or AuditValue, report of events observed.\n\
    \   Statistics       In Subtract and Audit, report of Statistics kept on\n   \
    \                 a Termination.\n   Topology         Specifies flow directions\
    \ between Terminations in a\n                    Context.\n   Error          \
    \  Contains an error code and optionally error text;\n                    it may\
    \ occur in command replies and in Notify\n                    requests.\n"
- title: 6.2.5 Root Termination
  contents:
  - "6.2.5 Root Termination\n   Occasionally, a command must refer to the entire gateway,\
    \ rather than\n   a Termination within it.  A special TerminationID, \"Root\"\
    \ is reserved\n   for this purpose.  Packages may be defined on Root.  Root thus\
    \ may\n   have properties, events and statistics (signals are not appropriate\n\
    \   for root).  Accordingly, the root TerminationID may appear in:\n   -  a Modify\
    \ command - to change a property or set an event\n   -  a Notify command - to\
    \ report an event\n   -  an AuditValue return - to examine the values of properties\
    \ and\n      statistics implemented on root\n   -  an AuditCapability - to determine\
    \ what properties of root are\n      implemented\n   -  a ServiceChange - to declare\
    \ the gateway in or out of service.\n   Any other use of the root TerminationID\
    \ is an error.  Error code\n   410 - Incorrect identifier shall be returned in\
    \ these cases.\n"
- title: 7  Commands
  contents:
  - "7  Commands\n   The protocol provides commands for manipulating the logical entities\n\
    \   of the protocol connection model, Contexts and Terminations.\n   Commands\
    \ provide control at the finest level of granularity supported\n   by the protocol.\
    \  For example, Commands exist to add Terminations to\n   a Context, modify Terminations,\
    \ subtract Terminations from a Context,\n   and audit properties of Contexts or\
    \ Terminations.  Commands provide\n   for complete control of the properties of\
    \ Contexts and Terminations.\n   This includes specifying which events a Termination\
    \ is to report,\n   which signals/actions are to be applied to a Termination and\n\
    \   specifying the topology of a Context (who hears/sees whom).\n   Most commands\
    \ are for the specific use of the Media Gateway\n   Controller as command initiator\
    \ in controlling Media Gateways as\n   command responders.  The exceptions are\
    \ the Notify and ServiceChange\n   commands: Notify is sent from Media Gateway\
    \ to Media Gateway\n   Controller, and ServiceChange may be sent by either entity.\
    \  Below is\n   an overview of the commands; they are explained in more detail\
    \ in\n   7.2.\n   1) Add - The Add command adds a Termination to a Context.  The\
    \ Add\n      command on the first Termination in a Context is used to create a\n\
    \      Context.\n   2) Modify - The Modify command modifies the properties, events\
    \ and\n      signals of a Termination.\n   3) Subtract - The Subtract command\
    \ disconnects a Termination from its\n      Context and returns statistics on\
    \ the Termination's participation\n      in the Context.  The Subtract command\
    \ on the last Termination in a\n      Context deletes the Context.\n   4) Move\
    \ - The Move command atomically moves a Termination to another\n      Context.\n\
    \   5) AuditValue - The AuditValue command returns the current state of\n    \
    \  properties, events, signals and statistics of Terminations.\n   6) AuditCapabilities\
    \ - The AuditCapabilities command returns all the\n      possible values for Termination\
    \ properties, events and signals\n      allowed by the Media Gateway.\n   7) Notify\
    \ - The Notify command allows the Media Gateway to inform the\n      Media Gateway\
    \ Controller of the occurrence of events in the Media\n      Gateway.\n   8) ServiceChange\
    \ - The ServiceChange command allows the Media Gateway\n      to notify the Media\
    \ Gateway Controller that a Termination or group\n      of Terminations is about\
    \ to be taken out of service or has just\n      been returned to service.  ServiceChange\
    \ is also used by the MG to\n      announce its availability to a MGC (registration),\
    \ and to notify\n      the MGC of impending or completed restart of the MG.  The\
    \ MGC may\n      announce a handover to the MG by sending it a ServiceChange\n\
    \      command.  The MGC may also use ServiceChange to instruct the MG to\n  \
    \    take a Termination or group of Terminations in or out of service.\n   These\
    \ commands are detailed in 7.2.1 through 7.2.8.\n"
- title: 7.1   Descriptors
  contents:
  - "7.1   Descriptors\n   The parameters to a command are termed Descriptors.  A\
    \ descriptor\n   consists of a name and a list of items.  Some items may have\
    \ values.\n   Many Commands share common descriptors.  This subclause enumerates\n\
    \   these descriptors.  Descriptors may be returned as output from a\n   command.\
    \  In any such return of descriptor contents, an empty\n   descriptor is represented\
    \ by its name unaccompanied by any list.\n   Parameters and parameter usage specific\
    \ to a given Command type are\n   described in the subclause that describes the\
    \ Command.\n"
- title: 7.1.1 Specifying parameters
  contents:
  - "7.1.1 Specifying parameters\n   Command parameters are structured into a number\
    \ of descriptors.  In\n   general, the text format of descriptors is\n   DescriptorName=<someID>{parm=value,\
    \ parm=value, ...}.\n   Parameters may be fully specified, overspecified or underspecified:\n\
    \   1) Fully specified parameters have a single, unambiguous value that\n    \
    \  the command initiator is instructing the command responder to use\n      for\
    \ the specified parameter.\n   2) Underspecified parameters, using the CHOOSE\
    \ value, allow the\n      command responder to choose any value it can support.\n\
    \   3) Overspecified parameters have a list of potential values.  The\n      list\
    \ order specifies the command initiator's order of preference\n      of selection.\
    \  The command responder chooses one value from\n      the offered list and returns\
    \ that value to the command initiator.\n   If a required descriptor other than\
    \ the Audit descriptor is\n   unspecified (i.e., entirely absent) from a command,\
    \ the previous\n   values set in that descriptor for that Termination, if any,\
    \ are\n   retained.  In commands other than Subtract, a missing Audit\n   descriptor\
    \ is equivalent to an empty Audit descriptor.  The Behaviour\n   of the MG with\
    \ respect to unspecified parameters within a descriptor\n   varies with the descriptor\
    \ concerned, as indicated in succeeding\n   subclauses.  Whenever a parameter\
    \ is underspecified or overspecified,\n   the descriptor containing the value\
    \ chosen by the responder is\n   included as output from the command.\n   Each\
    \ command specifies the TerminationId the command operates on.\n   This TerminationId\
    \ may be \"wildcarded\".  When the TerminationId of a\n   command is wildcarded,\
    \ the effect shall be as if the command was\n   repeated with each of the TerminationIds\
    \ matched.\n"
- title: 7.1.2 Modem descriptor
  contents:
  - "7.1.2 Modem descriptor\n   The Modem descriptor specifies the modem type and\
    \ parameters, if any,\n   required for use in e.g., H.324 and text conversation.\
    \  The\n   descriptor includes the following modem types: V.18, V.22, V.22 bis,\n\
    \   V.32, V.32 bis, V.34, V.90, V.91, Synchronous ISDN, and allows for\n   extensions.\
    \  By default, no Modem descriptor is present in a\n   Termination.\n"
- title: 7.1.3 Multiplex descriptor
  contents:
  - "7.1.3 Multiplex descriptor\n   In multimedia calls, a number of media streams\
    \ are carried on a\n   (possibly different) number of bearers.  The multiplex\
    \ descriptor\n   associates the media and the bearers.  The descriptor includes\
    \ the\n   multiplex type:\n   -  H.221;\n   -  H.223;\n   -  H.226;\n   -  V.76;\n\
    \   -  possible extensions,\n   and a set of TerminationIDs representing the multiplexed\
    \ bearers, in\n   order.  For example:\n      Mux = H.221{ MyT3/1/2, MyT3/2/13,\
    \ MyT3/3/6, MyT3/21/22}\n"
- title: 7.1.4 Media descriptor
  contents:
  - "7.1.4 Media descriptor\n   The Media descriptor specifies the parameters for\
    \ all the media\n   streams.  These parameters are structured into two descriptors:\
    \ a\n   TerminationState descriptor, which specifies the properties of a\n   Termination\
    \ that are not stream dependent, and one or more Stream\n   descriptors each of\
    \ which describes a single media stream.\n   A stream is identified by a StreamID.\
    \  The StreamID is used to link\n   the streams in a Context that belong together.\
    \  Multiple streams\n   exiting a Termination shall be synchronized with each\
    \ other.  Within\n   the Stream descriptor, there are up to three subsidiary descriptors:\n\
    \   LocalControl, Local, and Remote.  The relationship between these\n   descriptors\
    \ is thus:\n   Media descriptor\n      TerminationState Descriptor\n      Stream\
    \ descriptor\n         LocalControl descriptor\n         Local descriptor\n  \
    \       Remote descriptor\n   As a convenience, LocalControl, Local, or Remote\
    \ descriptors may be\n   included in the Media descriptor without an enclosing\
    \ Stream\n   descriptor.  In this case, the StreamID is assumed to be 1.\n"
- title: 7.1.5 TerminationState descriptor
  contents:
  - "7.1.5 TerminationState descriptor\n   The TerminationState descriptor contains\
    \ the ServiceStates property,\n   the EventBufferControl property and properties\
    \ of a Termination\n   (defined in Packages) that are not stream specific.\n \
    \  The ServiceStates property describes the overall state of the\n   Termination\
    \ (not stream specific).  A Termination can be in one of\n   the following states:\
    \ \"test\", \"out of service\", or \"in service\".  The\n   \"test\" state indicates\
    \ that the Termination is being tested.  The\n   state \"out of service\" indicates\
    \ that the Termination cannot be used\n   for traffic.  The state \"in service\"\
    \ indicates that a Termination can\n   be used or is being used for normal traffic.\
    \  \"in service\" is the\n   default state.\n   Values assigned to Properties\
    \ may be simple values\n   (integer/string/enumeration) or may be underspecified,\
    \ where more\n   than one value is supplied and the MG may make a choice:\n  \
    \ -  Alternative Values - multiple values in a list, one of which must\n     \
    \ be selected\n   -  Ranges - minimum and maximum values, any value between min\
    \ and max\n      must be selected, boundary values included\n   -  Greater Than/Less\
    \ Than - value must be greater/less than specified\n      value\n   -  CHOOSE\
    \ Wildcard - the MG chooses from the allowed values for the\n      property\n\
    \   The EventBufferControl property specifies whether events are buffered\n  \
    \ following detection of an event in the Events descriptor, or\n   processed immediately.\
    \  See 7.1.9 for details.\n"
- title: 7.1.6 Stream descriptor
  contents:
  - "7.1.6 Stream descriptor\n   A Stream descriptor specifies the parameters of a\
    \ single\n   bidirectional stream.  These parameters are structured into three\n\
    \   descriptors: one that contains Termination properties specific to a\n   stream\
    \ and one each for local and remote flows.  The Stream\n   Descriptor includes\
    \ a StreamID which identifies the stream.  Streams\n   are created by specifying\
    \ a new StreamID on one of the Terminations\n   in a Context.  A stream is deleted\
    \ by setting empty Local and Remote\n   descriptors for the stream with ReserveGroup\
    \ and ReserveValue in\n   LocalControl set to \"false\" on all Terminations in\
    \ the Context that\n   previously supported that stream.\n   StreamIDs are of\
    \ local significance between MGC and MG and they are\n   assigned by the MGC.\
    \  Within a Context, StreamID is a means by which\n   to indicate which media\
    \ flows are interconnected: streams with the\n   same StreamID are connected.\n\
    \   If a Termination is moved from one Context to another, the effect on\n   the\
    \ Context to which the Termination is moved is the same as in the\n   case that\
    \ a new Termination were added with the same StreamIDs as the\n   moved Termination.\n"
- title: 7.1.7 LocalControl descriptor
  contents:
  - "7.1.7 LocalControl descriptor\n   The LocalControl descriptor contains the Mode\
    \ property, the\n   ReserveGroup and ReserveValue properties and properties of\
    \ a\n   Termination (defined in Packages) that are stream specific, and are\n\
    \   of interest between the MG and the MGC.  Values of properties may be\n   underspecified\
    \ as in 7.1.1.\n   The allowed values for the mode property are send-only, receive-only,\n\
    \   send/receive, inactive and loop-back. \"Send\" and \"receive\" are with\n\
    \   respect to the exterior of the Context, so that, for example, a\n   stream\
    \ set to mode=sendOnly does not pass received media into the\n   Context.  The\
    \ default value for the mode property is \"Inactive\".\n   Signals and Events\
    \ are not affected by mode.\n   The boolean-valued Reserve properties, ReserveValue\
    \ and ReserveGroup,\n   of a Termination indicate what the MG is expected to do\
    \ when it\n   receives a Local and/or Remote descriptor.\n   If the value of a\
    \ Reserve property is True, the MG SHALL reserve\n   resources for all alternatives\
    \ specified in the Local and/or Remote\n   descriptors for which it currently\
    \ has resources available.  It SHALL\n   respond with the alternatives for which\
    \ it reserves resources.  If it\n   cannot not support any of the alternatives,\
    \ it SHALL respond with a\n   reply to the MGC that contains empty Local and/or\
    \ Remote descriptors.\n   If media begins to flow while more than a single alternative\
    \ is\n   reserved, media packets may be sent/received on any of the\n   alternatives\
    \ and must be processed, although only a single\n   alternative may be active\
    \ at any given time.\n   If the value of a Reserve property is False, the MG SHALL\
    \ choose one\n   of the alternatives specified in the Local descriptor (if present)\n\
    \   and one of the alternatives specified in the Remote descriptor (if\n   present).\
    \  If the MG has not yet reserved resources to support the\n   selected alternative,\
    \ it SHALL reserve the resources.  If, on the\n   other hand, it already reserved\
    \ resources for the Termination\n   addressed (because of a prior exchange with\
    \ ReserveValue and/or\n   ReserveGroup equal to True), it SHALL release any excess\
    \ resources it\n   reserved previously.  Finally, the MG shall send a reply to\
    \ the MGC\n   containing the alternatives for the Local and/or Remote descriptor\n\
    \   that it selected.  If the MG does not have sufficient resources to\n   support\
    \ any of the alternatives specified, it SHALL respond with\n   error 510 (insufficient\
    \ resources).\n   The default value of ReserveValue and ReserveGroup is False.\
    \  More\n   information on the use of the two Reserve properties is provided in\n\
    \   7.1.8.\n   A new setting of the LocalControl Descriptor completely replaces\
    \ the\n   previous setting of that descriptor in the MG.  Thus, to retain\n  \
    \ information from the previous setting, the MGC must include that\n   information\
    \ in the new setting.  If the MGC wishes to delete some\n   information from the\
    \ existing descriptor, it merely resends the\n   descriptor (in a Modify command)\
    \ with the unwanted information\n   stripped out.\n"
- title: 7.1.8 Local and Remote descriptors
  contents:
  - "7.1.8 Local and Remote descriptors\n   The MGC uses Local and Remote descriptors\
    \ to reserve and commit MG\n   resources for media decoding and encoding for the\
    \ given Stream(s) and\n   Termination to which they apply.  The MG includes these\
    \ descriptors\n   in its response to indicate what it is actually prepared to\
    \ support.\n   The MG SHALL include additional properties and their values in\
    \ its\n   response if these properties are mandatory yet not present in the\n\
    \   requests made by the MGC (e.g., by specifying detailed video encoding\n  \
    \ parameters where the MGC only specified the payload type).\n   Local refers\
    \ to the media received by the MG and Remote refers to the\n   media sent by the\
    \ MG.\n   When text encoding the protocol, the descriptors consist of session\n\
    \   descriptions as defined in SDP (RFC 2327).  In session descriptions\n   sent\
    \ from the MGC to the MG, the following exceptions to the syntax\n   of RFC 2327\
    \ are allowed:\n   -  the \"s=\", \"t=\" and \"o=\" lines are optional;\n   -\
    \  the use of CHOOSE is allowed in place of a single parameter value;\n      and\n\
    \   -  the use of alternatives is allowed in place of a single parameter\n   \
    \   value.\n   A Stream Descriptor specifies a single bi-directional media stream\n\
    \   and so a single session description MUST NOT include more than one\n   media\
    \ description (\"m=\" line).  A Stream Descriptor may contain\n   additional session\
    \ descriptions as alternatives.  Each media stream\n   for a termination must\
    \ appear in distinct Stream Descriptors.  When\n   multiple session descriptions\
    \ are provided in one descriptor, the\n   \"v=\" lines are required as delimiters;\
    \ otherwise they are optional in\n   session descriptions sent to the MG.  Implementations\
    \ shall accept\n   session descriptions that are fully conformant to RFC 2327.\
    \  When\n   binary encoding the protocol the descriptor consists of groups of\n\
    \   properties (tag-value pairs) as specified in Annex C.  Each such\n   group\
    \ may contain the parameters of a session description.\n   Below, the semantics\
    \ of the Local and Remote descriptors are\n   specified in detail.  The specification\
    \ consists of two parts.  The\n   first part specifies the interpretation of the\
    \ contents of the\n   descriptor.  The second part specifies the actions the MG\
    \ must take\n   upon receiving the Local and Remote descriptors.  The actions\
    \ to be\n   taken by the MG depend on the values of the ReserveValue and\n   ReserveGroup\
    \ properties of the LocalControl descriptor.\n   Either the Local or the Remote\
    \ descriptor or both may be:\n   1) unspecified (i.e., absent);\n   2) empty;\n\
    \   3) underspecified through use of CHOOSE in a property value;\n   4) fully\
    \ specified; or\n   5) overspecified through presentation of multiple groups of\n\
    \      properties and possibly multiple property values in one or more of\n  \
    \    these groups.\n   Where the descriptors have been passed from the MGC to\
    \ the MG, they\n   are interpreted according to the rules given in 7.1.1, with\
    \ the\n   following additional comments for clarification:\n   a) An unspecified\
    \ Local or Remote descriptor is considered to be a\n      missing mandatory parameter.\
    \  It requires the MG to use whatever\n      was last specified for that descriptor.\
    \  It is possible that there\n      was no previously specified value, in which\
    \ case the descriptor\n      concerned is ignored in further processing of the\
    \ command.\n   b) An empty Local (Remote) descriptor in a message from the MGC\n\
    \      signifies a request to release any resources reserved for the\n      media\
    \ flow received (sent).\n   c) If multiple groups of properties are present in\
    \ a Local or Remote\n      descriptor or multiple values within a group, the order\
    \ of\n      preference is descending.\n   d) Underspecified or overspecified properties\
    \ within a group of\n      properties sent by the MGC are requests for the MG\
    \ to choose one\n      or more values which it can support for each of those properties.\n\
    \      In case of an overspecified property, the list of values is in\n      descending\
    \ order of preference.\n   Subject to the above rules, subsequent action depends\
    \ on the values\n   of the ReserveValue and ReserveGroup properties in LocalControl.\n\
    \   If ReserveGroup is True, the MG reserves the resources required to\n   support\
    \ any of the requested property group alternatives that it can\n   currently support.\
    \  If ReserveValue is True, the MG reserves the\n   resources required to support\
    \ any of the requested property value\n   alternatives that it can currently support.\n\
    \   NOTE - If a Local or Remote descriptor contains multiple groups of\n   properties,\
    \ and ReserveGroup is True, then the MG is requested to\n   reserve resources\
    \ so that it can decode or encode the media stream\n   according to any of the\
    \ alternatives.  For instance, if the Local\n   descriptor contains two groups\
    \ of properties, one specifying\n   packetized G.711 A-law audio and the other\
    \ G.723.1 audio, the MG\n   reserves resources so that it can decode one audio\
    \ stream encoded in\n   either G.711 A-law format or G.723.1 format.  The MG does\
    \ not have to\n   reserve resources to decode two audio streams simultaneously,\
    \ one\n   encoded in G.711 A-law and one in G.723.1.  The intention for the use\n\
    \   of ReserveValue is analogous.\n   If ReserveGroup is true or ReserveValue\
    \ is True, then the following\n   rules apply:\n   -  If the MG has insufficient\
    \ resources to support all alternatives\n      requested by the MGC and the MGC\
    \ requested resources in both Local\n      and Remote, the MG should reserve resources\
    \ to support at least\n      one alternative each within Local and Remote.\n \
    \  -  If the MG has insufficient resources to support at least one\n      alternative\
    \ within a Local (Remote) descriptor received from the\n      MGC, it shall return\
    \ an empty Local (Remote) in response.\n   -  In its response to the MGC, when\
    \ the MGC included Local and Remote\n      descriptors, the MG SHALL include Local\
    \ and Remote descriptors for\n      all groups of properties and property values\
    \ it reserved resources\n      for.  If the MG is incapable of supporting at least\
    \ one of the\n      alternatives within the Local (Remote) descriptor received\
    \ from\n      the MGC, it SHALL return an empty Local (Remote) descriptor.\n \
    \  -  If the Mode property of the LocalControl descriptor is RecvOnly,\n     \
    \ SendRecv, or LoopBack, the MG must be prepared to receive media\n      encoded\
    \ according to any of the alternatives included in its\n      response to the\
    \ MGC.\n   If ReserveGroup is False and ReserveValue is False, then the MG\n \
    \  SHOULD apply the following rules to resolve Local and Remote to a\n   single\
    \ alternative each:\n   -  The MG chooses the first alternative in Local for which\
    \ it is able\n      to support at least one alternative in Remote.\n   -  If the\
    \ MG is unable to support at least one Local and one Remote\n      alternative,\
    \ it returns Error 510 (Insufficient Resources).\n   -  The MG returns its selected\
    \ alternative in each of Local and\n      Remote.\n   A new setting of a Local\
    \ or Remote descriptor completely replaces the\n   previous setting of that descriptor\
    \ in the MG.  Thus, to retain\n   information from the previous setting, the MGC\
    \ must include that\n   information in the new setting.  If the MGC wishes to\
    \ delete some\n   information from the existing descriptor, it merely resends\
    \ the\n   descriptor (in a Modify command) with the unwanted information\n   stripped\
    \ out.\n"
- title: 7.1.9 Events descriptor
  contents:
  - "7.1.9 Events descriptor\n   The EventsDescriptor parameter contains a RequestIdentifier\
    \ and a\n   list of events that the Media Gateway is requested to detect and\n\
    \   report.  The RequestIdentifier is used to correlate the request with\n   the\
    \ notifications that it may trigger.  Requested events include, for\n   example,\
    \ fax tones, continuity test results, and on-hook and off-hook\n   transitions.\
    \  The RequestIdentifier is omitted if the\n   EventsDescriptor is empty (i.e.,\
    \ no events are specified).\n   Each event in the descriptor contains the Event\
    \ name, an optional\n   streamID, an optional KeepActive flag, and optional parameters.\
    \  The\n   Event name consists of a Package Name (where the event is defined)\n\
    \   and an EventID.  The ALL wildcard may be used for the EventID,\n   indicating\
    \ that all events from the specified package have to be\n   detected.  The default\
    \ streamID is 0, indicating that the event to be\n   detected is not related to\
    \ a particular media stream.  Events can\n   have parameters.  This allows a single\
    \ event description to have some\n   variation in meaning without creating large\
    \ numbers of individual\n   events.  Further event parameters are defined in the\
    \ package.\n   If a digit map completion event is present or implied in the\n\
    \   EventsDescriptor, the EventDM parameter is used to carry either the\n   name\
    \ or the value of the associated digit map.  See 7.1.14 for\n   further details.\n\
    \   When an event is processed against the contents of an active Events\n   Descriptor\
    \ and found to be present in that descriptor (\"recognized\"),\n   the default\
    \ action of the MG is to send a Notify command to the MGC.\n   Notification may\
    \ be deferred if the event is absorbed into the\n   current dial string of an\
    \ active digit map (see 7.1.14).  Any other\n   action is for further study. \
    \ Moreover, event recognition may cause\n   currently active signals to stop,\
    \ or may cause the current Events\n   and/or Signals descriptor to be replaced,\
    \ as described at the end of\n   this subclause.  Unless the Events Descriptor\
    \ is replaced by another\n   Events Descriptor, it remains active after an event\
    \ has been\n   recognized.\n   If the value of the EventBufferControl property\
    \ equals LockStep,\n   following detection of such an event, normal handling of\
    \ events is\n   suspended.  Any event which is subsequently detected and occurs\
    \ in\n   the EventBuffer descriptor is added to the end of the EventBuffer (a\n\
    \   FIFO queue), along with the time that it was detected.  The MG SHALL\n   wait\
    \ for a new EventsDescriptor to be loaded.  A new EventsDescriptor\n   can be\
    \ loaded either as the result of receiving a command with a new\n   EventsDescriptor,\
    \ or by activating an embedded EventsDescriptor.\n   If EventBufferControl equals\
    \ Off, the MG continues processing based\n   on the active EventsDescriptor.\n\
    \   In the case of an embedded EventsDescriptor being activated, the MG\n   continues\
    \ event processing based on the newly activated\n   EventsDescriptor.\n     NOTE\
    \ 1 - For purposes of EventBuffer handling, activation of an\n     embedded EventsDescriptor\
    \ is equivalent to receipt of a new\n     EventsDescriptor.\n   When the MG receives\
    \ a command with a new EventsDescriptor, one or\n   more events may have been\
    \ buffered in the EventBuffer in the MG.  The\n   value of EventBufferControl\
    \ then determines how the MG treats such\n   buffered events.\n   Case 1\n   If\
    \ EventBufferControl equals LockStep and the MG receives a new\n   EventsDescriptor,\
    \ it will check the FIFO EventBuffer and take the\n   following actions:\n   1)\
    \ If the EventBuffer is empty, the MG waits for detection of events\n      based\
    \ on the new EventsDescriptor.\n   2) If the EventBuffer is non-empty, the MG\
    \ processes the FIFO queue\n      starting with the first event:\n      a) If\
    \ the event in the queue is in the events listed in the new\n         EventsDescriptor,\
    \ the MG acts on the event and removes the\n         event from the EventBuffer.\
    \  The time stamp of the Notify shall\n         be the time the event was actually\
    \ detected.  The MG then waits\n         for a new EventsDescriptor.  While waiting\
    \ for a new\n         EventsDescriptor, any events detected that appear in the\n\
    \         EventsBufferDescriptor will be placed in the EventBuffer.  When\n  \
    \       a new EventsDescriptor is received, the event processing will\n      \
    \   repeat from step 1.\n      b) If the event is not in the new EventsDescriptor,\
    \ the MG SHALL\n         discard the event and repeat from step 1.\n   Case 2\n\
    \   If EventBufferControl equals Off and the MG receives a new\n   EventsDescriptor,\
    \ it processes new events with the new\n   EventsDescriptor.\n   If the MG receives\
    \ a command instructing it to set the value of\n   EventBufferControl to Off,\
    \ all events in the EventBuffer SHALL be\n   discarded.\n   The MG may report\
    \ several events in a single Transaction as long as\n   this does not unnecessarily\
    \ delay the reporting of individual events.\n   For procedures regarding transmitting\
    \ the Notify command, refer to\n   the appropriate annex or Recommendation of\
    \ the H.248 sub-series for\n   specific transport considerations.\n   The default\
    \ value of EventBufferControl is Off.\n     NOTE 2 - Since the EventBufferControl\
    \ property is in the\n     TerminationStateDescriptor, the MG might receive a\
    \ command that\n     changes the EventBufferControl property and does not include\
    \ an\n     EventsDescriptor.\n   Normally, recognition of an event shall cause\
    \ any active signals to\n   stop.  When KeepActive is specified in the event,\
    \ the MG shall not\n   interrupt any signals active on the Termination on which\
    \ the event is\n   detected.\n   An event can include an Embedded Signals descriptor\
    \ and/or an\n   Embedded Events descriptor which, if present, replaces the current\n\
    \   Signals/Events descriptor when the event is recognized.  It is\n   possible,\
    \ for example, to specify that the dial-tone Signal be\n   generated when an off-hook\
    \ Event is recognized, or that the dial-tone\n   Signal be stopped when a digit\
    \ is recognized.  A media gateway\n   controller shall not send EventsDescriptors\
    \ with an event both marked\n   KeepActive and containing an embedded SignalsDescriptor.\n\
    \   Only one level of embedding is permitted.  An embedded\n   EventsDescriptor\
    \ SHALL NOT contain another embedded EventsDescriptor;\n   an embedded EventsDescriptor\
    \ MAY contain an embedded\n   SignalsDescriptor.\n   An EventsDescriptor received\
    \ by a media gateway replaces any previous\n   Events descriptor.  Event notification\
    \ in process shall complete, and\n   events detected after the command containing\
    \ the new EventsDescriptor\n   executes, shall be processed according to the new\
    \ EventsDescriptor.\n   An empty Events Descriptor disables all event recognition\
    \ and\n   reporting.  An empty EventBuffer Descriptor clears the EventBuffer\n\
    \   and disables all event accumulation in LockStep mode: the only events\n  \
    \ reported will be those occurring while an Events Descriptor is\n   active. \
    \ If an empty Events Descriptor is activated while the\n   Termination is operating\
    \ in LockStep mode, the events buffer is\n   immediately cleared.\n"
- title: 7.1.10   EventBuffer descriptor
  contents:
  - "7.1.10   EventBuffer descriptor\n   The EventBuffer descriptor contains a list\
    \ of events, with their\n   parameters if any, that the MG is requested to detect\
    \ and buffer when\n   EventBufferControl equals LockStep (see 7.1.9).\n"
- title: 7.1.11   Signals descriptor
  contents:
  - "7.1.11   Signals descriptor\n   Signals are MG generated media such as tones\
    \ and announcements as\n   well as bearer-related signals such as hookswitch.\
    \  More complex\n   signals may include a sequence of such simple signals interspersed\n\
    \   with and conditioned upon the receipt and analysis of media or\n   bearer-related\
    \ signals.  Examples include echoing of received data as\n   in Continuity Test\
    \ package.  Signals may also request preparation of\n   media content for future\
    \ signals.\n   A SignalsDescriptor is a parameter that contains the set of signals\n\
    \   that the Media Gateway is asked to apply to a Termination.  A\n   SignalsDescriptor\
    \ contains a number of signals and/or sequential\n   signal lists.  A SignalsDescriptor\
    \ may contain zero signals and\n   sequential signal lists.  Support of sequential\
    \ signal lists is\n   optional.\n   Signals are defined in packages.  Signals\
    \ shall be named with a\n   Package name (in which the signal is defined) and\
    \ a SignalID.  No\n   wildcard shall be used in the SignalID.  Signals that occur\
    \ in a\n   SignalsDescriptor have an optional StreamID parameter (default is 0,\n\
    \   to indicate that the signal is not related to a particular media\n   stream),\
    \ an optional signal type (see below), an optional duration\n   and possibly parameters\
    \ defined in the package that defines the\n   signal.  This allows a single signal\
    \ to have some variation in\n   meaning, obviating the need to create large numbers\
    \ of individual\n   signals.\n   Finally, the optional parameter \"notifyCompletion\"\
    \ allows a MGC to\n   indicate that it wishes to be notified when the signal finishes\n\
    \   playout.  The possible cases are that the signal timed out (or\n   otherwise\
    \ completed on its own), that it was interrupted by an event,\n   that it was\
    \ halted when a Signals descriptor was replaced, or that it\n   stopped or never\
    \ started for other reasons.  If the notifyCompletion\n   parameter is not included\
    \ in a Signals descriptor, notification is\n   generated only if the signal stopped\
    \ or was never started for other\n   reasons.  For reporting to occur, the signal\
    \ completion event (see\n   E.1.2) must be enabled in the currently active Events\
    \ descriptor.\n   The duration is an integer value that is expressed in hundredths\
    \ of a\n   second.\n   There are three types of signals:\n   -  on/off - the signal\
    \ lasts until it is turned off;\n   -  timeout - the signal lasts until it is\
    \ turned off or a specific\n      period of time elapses;\n   -  brief - the signal\
    \ will stop on its own unless a new Signals\n      descriptor is applied that\
    \ causes it to stop; no timeout value is\n      needed.\n   If a signal of default\
    \ type other than TO has its type overridden to\n   type TO in the Signals descriptor,\
    \ the duration parameter must be\n   present.\n   If the signal type is specified\
    \ in a SignalsDescriptor, it overrides\n   the default signal type (see 12.1.4).\
    \  If duration is specified for\n   an on/off signal, it SHALL be ignored.\n \
    \  A sequential signal list consists of a signal list identifier and a\n   sequence\
    \ of signals to be played sequentially.  Only the trailing\n   element of the\
    \ sequence of signals in a sequential signal list may be\n   an on/off signal.\
    \  The duration of a sequential signal list is the\n   sum of the durations of\
    \ the signals it contains.\n   Multiple signals and sequential signal lists in\
    \ the same\n   SignalsDescriptor shall be played simultaneously.\n   Signals are\
    \ defined as proceeding from the Termination towards the\n   exterior of the Context\
    \ unless otherwise specified in a package.\n   When the same Signal is applied\
    \ to multiple Terminations within one\n   Transaction, the MG should consider\
    \ using the same resource to\n   generate these Signals.\n   Production of a Signal\
    \ on a Termination is stopped by application of\n   a new SignalsDescriptor, or\
    \ detection of an Event on the Termination\n   (see 7.1.9).\n   A new SignalsDescriptor\
    \ replaces any existing SignalsDescriptor.  Any\n   signals applied to the Termination\
    \ not in the replacement descriptor\n   shall be stopped, and new signals are\
    \ applied, except as follows.\n   Signals present in the replacement descriptor\
    \ and containing the\n   KeepActive flag shall be continued if they are currently\
    \ playing and\n   have not already completed.  If a replacement signal descriptor\n\
    \   contains a signal that is not currently playing and contains the\n   KeepActive\
    \ flag, that signal SHALL be ignored.  If the replacement\n   descriptor contains\
    \ a sequential signal list with the same identifier\n   as the existing descriptor,\
    \ then\n   -  the signal type and sequence of signals in the sequential signal\n\
    \      list in the replacement descriptor shall be ignored; and\n   -  the playing\
    \ of the signals in the sequential signal list in the\n      existing descriptor\
    \ shall not be interrupted.\n"
- title: 7.1.12   Audit descriptor
  contents:
  - "7.1.12   Audit descriptor\n   The Audit descriptor specifies what information\
    \ is to be audited.\n   The Audit descriptor specifies the list of descriptors\
    \ to be\n   returned.  Audit may be used in any command to force the return of\n\
    \   any descriptor containing the current values of its properties,\n   events,\
    \ signals and statistics even if that descriptor was not\n   present in the command,\
    \ or had no underspecified parameters.\n   Possible items in the Audit descriptor\
    \ are:\n      Modem\n      Mux\n      Events\n      Media\n      Signals\n   \
    \   ObservedEvents\n      DigitMap\n      Statistics\n      Packages\n      EventBuffer\n\
    \   Audit may be empty, in which case, no descriptors are returned.  This\n  \
    \ is useful in Subtract, to inhibit return of statistics, especially\n   when\
    \ using wildcard.\n"
- title: 7.1.13   ServiceChange descriptor
  contents:
  - "7.1.13   ServiceChange descriptor\n   The ServiceChangeDescriptor contains the\
    \ following parameters:\n      .  ServiceChangeMethod\n      .  ServiceChangeReason\n\
    \      .  ServiceChangeAddress\n      .  ServiceChangeDelay\n      .  ServiceChangeProfile\n\
    \      .  ServiceChangeVersion\n      .  ServiceChangeMGCId\n      .  TimeStamp\n\
    \      .  Extension\n   See 7.2.8.\n"
- title: 7.1.14   DigitMap descriptor
  contents:
  - '7.1.14   DigitMap descriptor

    '
- title: 7.1.14.1 DigitMap definition, creation, modification and deletion
  contents:
  - "7.1.14.1 DigitMap definition, creation, modification and deletion\n   A DigitMap\
    \ is a dialing plan resident in the Media Gateway used for\n   detecting and reporting\
    \ digit events received on a Termination.  The\n   DigitMap descriptor contains\
    \ a DigitMap name and the DigitMap to be\n   assigned.  A digit map may be preloaded\
    \ into the MG by management\n   action and referenced by name in an EventsDescriptor,\
    \ may be defined\n   dynamically and subsequently referenced by name, or the actual\n\
    \   digitmap itself may be specified in the EventsDescriptor.  It is\n   permissible\
    \ for a digit map completion event within an Events\n   descriptor to refer by\
    \ name to a DigitMap which is defined by a\n   DigitMap descriptor within the\
    \ same command, regardless of the\n   transmitted order of the respective descriptors.\n\
    \   DigitMaps defined in a DigitMapDescriptor can occur in any of the\n   standard\
    \ Termination manipulation Commands of the protocol.  A\n   DigitMap, once defined,\
    \ can be used on all Terminations specified by\n   the (possibly wildcarded) TerminationID\
    \ in such a command.  DigitMaps\n   defined on the root Termination are global\
    \ and can be used on every\n   Termination in the MG, provided that a DigitMap\
    \ with the same name\n   has not been defined on the given Termination.  When\
    \ a DigitMap is\n   defined dynamically in a DigitMap descriptor:\n   -  A new\
    \ DigitMap is created by specifying a name that is not yet\n      defined.  The\
    \ value shall be present.\n   -  A DigitMap value is updated by supplying a new\
    \ value for a name\n      that is already defined.  Terminations presently using\
    \ the\n      digitmap shall continue to use the old definition; subsequent\n \
    \     EventsDescriptors specifying the name, including any\n      EventsDescriptor\
    \ in the command containing the DigitMap\n      descriptor, shall use the new\
    \ one.\n   -  A DigitMap is deleted by supplying an empty value for a name that\n\
    \      is already defined.  Terminations presently using the digitmap\n      shall\
    \ continue to use the old definition.\n"
- title: 7.1.14.2 DigitMap Timers
  contents:
  - "7.1.14.2 DigitMap Timers\n   The collection of digits according to a DigitMap\
    \ may be protected by\n   three timers, viz. a start timer (T), short timer (S),\
    \ and long timer\n   (L).\n   1) The start timer (T) is used prior to any digits\
    \ having been\n      dialed.  If the start timer is overridden with the value\
    \ set to\n      zero (T=0), then the start timer shall be disabled.  This implies\n\
    \      that the MG will wait indefinitely for digits.\n   2) If the Media Gateway\
    \ can determine that at least one more digit is\n      needed for a digit string\
    \ to match any of the allowed patterns in\n      the digit map, then the interdigit\
    \ timer value should be set to a\n      long (L) duration (e.g., 16 seconds).\n\
    \   3) If the digit string has matched one of the patterns in a digit\n      map,\
    \ but it is possible that more digits could be received which\n      would cause\
    \ a match with a different pattern, then instead of\n      reporting the match\
    \ immediately, the MG must apply the short timer\n      (S) and wait for more\
    \ digits.\n   The timers are configurable parameters to a DigitMap.  Default values\n\
    \   of these timers should be provisioned on the MG, but can be\n   overridden\
    \ by values specified within the DigitMap.\n"
- title: 7.1.14.3 DigitMap Syntax
  contents:
  - "7.1.14.3 DigitMap Syntax\n   The formal syntax of the digit map is described\
    \ by the DigitMap rule\n   in the formal syntax description of the protocol (see\
    \ Annex A and\n   Annex B).  A DigitMap, according to this syntax, is defined\
    \ either by\n   a string or by a list of strings.  Each string in the list is\
    \ an\n   alternative event sequence, specified either as a sequence of digit\n\
    \   map symbols or as a regular expression of digit map symbols.  These\n   digit\
    \ map symbols, the digits \"0\" through \"9\" and letters \"A\" through\n   a\
    \ maximum value depending on the signalling system concerned, but\n   never exceeding\
    \ \"K\", correspond to specified events within a package\n   which has been designated\
    \ in the Events descriptor on the Termination\n   to which the digit map is being\
    \ applied.  (The mapping between events\n   and digit map symbols is defined in\
    \ the documentation for packages\n   associated with channel-associated signalling\
    \ systems such as DTMF,\n   MF, or R2.  Digits \"0\" through \"9\" MUST be mapped\
    \ to the\n   corresponding digit events within the signalling system concerned.\n\
    \   Letters should be allocated in logical fashion, facilitating the use\n   of\
    \ range notation for alternative events.)\n   The letter \"x\" is used as a wildcard,\
    \ designating any event\n   corresponding to symbols in the range \"0\"-\"9\"\
    .  The string may also\n   contain explicit ranges and, more generally, explicit\
    \ sets of\n   symbols, designating alternative events any one of which satisfies\n\
    \   that position of the digit map.  Finally, the dot symbol \".\" stands\n  \
    \ for zero or more repetitions of the event selector (event, range of\n   events,\
    \ set of alternative events, or wildcard) that precedes it.  As\n   a consequence\
    \ of the third timing rule above, inter-event timing\n   while matching a terminal\
    \ dot symbol uses the short timer by default.\n   In addition to these event symbols,\
    \ the string may contain \"S\" and\n   \"L\" inter-event timing specifiers and\
    \ the \"Z\" duration modifier.  \"S\"\n   and \"L\" respectively indicate that\
    \ the MG should use the short (S)\n   timer or the long (L) timer for subsequent\
    \ events, overriding the\n   timing rules described above.  If an explicit timing\
    \ specifier is in\n   effect in one alternative event sequence, but none is given\
    \ in any\n   other candidate alternative, the timer value set by the explicit\n\
    \   timing specifier must be used.  If all sequences with explicit timing\n  \
    \ controls are dropped from the candidate set, timing reverts to the\n   default\
    \ rules given above.  Finally, if conflicting timing specifiers\n   are in effect\
    \ in different alternative sequences, the long timer\n   shall be used.\n   A\
    \ \"Z\" designates a long duration event: placed in front of the\n   symbol(s)\
    \ designating the event(s) which satisfy a given digit\n   position, it indicates\
    \ that that position is satisfied only if the\n   duration of the event exceeds\
    \ the long-duration threshold.  The value\n   of this threshold is assumed to\
    \ be provisioned in the MG.\n"
- title: 7.1.14.4 DigitMap Completion Event
  contents:
  - "7.1.14.4 DigitMap Completion Event\n   A digit map is active while the Events\
    \ descriptor which invoked it is\n   active and it has not completed.  A digit\
    \ map completes when:\n   -  a timer has expired; or\n   -  an alternative event\
    \ sequence has been matched and no other\n      alternative event sequence in\
    \ the digit map could be matched\n      through detection of an additional event\
    \ (unambiguous match); or\n   -  an event has been detected such that a match\
    \ to a complete\n      alternative event sequence of the digit map will be impossible\
    \ no\n      matter what additional events are received.\n   Upon completion, a\
    \ digit map completion event as defined in the\n   package providing the events\
    \ being mapped into the digit map shall be\n   generated.  At that point the digit\
    \ map is deactivated.  Subsequent\n   events in the package are processed as per\
    \ the currently active event\n   processing mechanisms.\n"
- title: 7.1.14.5 DigitMap Procedures
  contents:
  - "7.1.14.5 DigitMap Procedures\n   Pending completion, successive events shall\
    \ be processed according to\n   the following rules:\n   1) The \"current dial\
    \ string\", an internal variable, is initially\n      empty.  The set of candidate\
    \ alternative event sequences includes\n      all of the alternatives specified\
    \ in the digit map.\n   2) At each step, a timer is set to wait for the next event,\
    \ based\n      either on the default timing rules given above or on explicit\n\
    \      timing specified in one or more alternative event sequences.  If\n    \
    \  the timer expires and a member of the candidate set of\n      alternatives\
    \ is fully satisfied, a timeout completion with full\n      match is reported.\
    \  If the timer expires and part or none of any\n      candidate alternative is\
    \ satisfied, a timeout completion with\n      partial match is reported.\n   3)\
    \ If an event is detected before the timer expires, it is mapped to\n      a digit\
    \ string symbol and provisionally added to the end of the\n      current dial\
    \ string.  The duration of the event (long or not long)\n      is noted if and\
    \ only if this is relevant in the current symbol\n      position (because at least\
    \ one of the candidate alternative event\n      sequences includes the \"Z\" modifier\
    \ at this position in the\n      sequence).\n   4) The current dial string is\
    \ compared to the candidate alternative\n      event sequences.  If and only if\
    \ a sequence expecting a\n      long-duration event at this position is matched\
    \ (i.e., the event\n      had long duration and met the specification for this\
    \ position),\n      then any alternative event sequences not specifying a long\n\
    \      duration event at this position are discarded, and the current\n      dial\
    \ string is modified by inserting a \"Z\" in front of the symbol\n      representing\
    \ the latest event.   Any sequence expecting a long-\n      duration event at\
    \ this position but not matching the observed\n      event is discarded from the\
    \ candidate set.  If alternative event\n      sequences not specifying a long\
    \ duration event in the given\n      position remain in the candidate set after\
    \ application of the\n      above rules, the observed event duration is treated\
    \ as irrelevant\n      in assessing matches to them.\n   5) If exactly one candidate\
    \ remains and it has been fully matched, a\n      completion event is generated\
    \ indicating an unambiguous match.  If\n      no candidates remain, the latest\
    \ event is removed from the current\n      dial string and a completion event\
    \ is generated indicating full\n      match if one of the candidates from the\
    \ previous step was fully\n      satisfied before the latest event was detected,\
    \ or partial match\n      otherwise.  The event removed from the current dial\
    \ string will\n      then be reported as per the currently active event processing\n\
    \      mechanisms.\n   6) If no completion event is reported out of step 5, processing\n\
    \      returns to step 2.\n"
- title: 7.1.14.6 DigitMap Activation
  contents:
  - "7.1.14.6 DigitMap Activation\n   A digit map is activated whenever a new Event\
    \ descriptor is applied\n   to the Termination or embedded Event descriptor is\
    \ activated, and\n   that Event descriptor contains a digit map completion event.\
    \  The\n   digit map completion event contains an eventDM field in the requested\n\
    \   actions field.  Each new activation of a digit map begins at step 1\n   of\
    \ the above procedure, with a clear current dial string.  Any\n   previous contents\
    \ of the current dial string from an earlier\n   activation are lost.\n   A digit\
    \ map completion event that does not contain an eventDM field\n   in its requested\
    \ actions field is considered an error.  Upon receipt\n   of such an event in\
    \ an EventsDescriptor, a MG shall respond with an\n   error response, including\
    \ Error 457 - Missing parameter in signal or\n   event.\n"
- title: 7.1.14.7 Interaction Of DigitMap and Event Processing
  contents:
  - "7.1.14.7 Interaction Of DigitMap and Event Processing\n   While the digit map\
    \ is activated, detection is enabled for all events\n   defined in the package\
    \ containing the specified digit map completion\n   event.  Normal event behaviour\
    \ (e.g., stopping of signals unless the\n   digit completion event has the KeepActive\
    \ flag enabled) continues to\n   apply for each such event detected, except that:\n\
    \   -  the events in the package containing the specified digit map\n      completion\
    \ event other than the completion event itself are not\n      individually notified\
    \ and have no side-effects unless separately\n      enabled; and\n   -  an event\
    \ that triggers a partial match completion event is not\n      recognized and\
    \ therefore has no side effects until reprocessed\n      following the recognition\
    \ of the digit map completion event.\n"
- title: 7.1.14.8 Wildcards
  contents:
  - "7.1.14.8 Wildcards\n   Note that if a package contains a digit map completion\
    \ event, then an\n   event specification consisting of the package name with a\
    \ wildcarded\n   ItemID (Property Name) will activate a digit map; to that end,\
    \ the\n   event specification must include an eventDM field according to\n   section\
    \ 7.1.14.6.  If the package also contains the digit events\n   themselves, this\
    \ form of event specification will cause the\n   individual events to be reported\
    \ to the MGC as they are detected.\n"
- title: 7.1.14.9 Example
  contents:
  - "7.1.14.9 Example\n   As an example, consider the following dial plan:\n   0 \
    \                     Local operator\n   00                     Long-distance\
    \ operator\n   xxxx                   Local extension number (starts with 1-7)\n\
    \   8xxxxxxx               Local number\n   #xxxxxxx               Off-site extension\n\
    \   *xx                    Star services\n   91xxxxxxxxxx           Long-distance\
    \ number\n   9011 + up to 15 digits International number\n   If the DTMF detection\
    \ package described in E.6 is used to collect the\n   dialed digits, then the\
    \ dialing plan shown above results in the\n   following digit map:\n    (0| 00|[1-7]xxx|8xxxxxxx|Fxxxxxxx|Exx|91xxxxxxxxxx|9011x.)\n"
- title: 7.1.15   Statistics descriptor
  contents:
  - "7.1.15   Statistics descriptor\n   The Statistics Descriptor provides information\
    \ describing the status\n   and usage of a Termination during its existence within\
    \ a specific\n   Context.  There is a set of standard statistics kept for each\n\
    \   Termination where appropriate (number of octets sent and received for\n  \
    \ example).  The particular statistical properties that are reported\n   for a\
    \ given Termination are determined by the Packages realized by\n   the Termination.\
    \  By default, statistics are reported when the\n   Termination is Subtracted\
    \ from the Context.  This behaviour can be\n   overridden by including an empty\
    \ AuditDescriptor in the Subtract\n   command.  Statistics may also be returned\
    \ from the AuditValue\n   command, or any Add/Move/Modify command using the Audit\
    \ descriptor.\n   Statistics are cumulative; reporting Statistics does not reset\
    \ them.\n   Statistics are reset when a Termination is Subtracted from a Context.\n"
- title: 7.1.16   Packages descriptor
  contents:
  - "7.1.16   Packages descriptor\n   Used only with the AuditValue command, the PackageDescriptor\
    \ returns\n   a list of Packages realized by the Termination.\n"
- title: 7.1.17   ObservedEvents descriptor
  contents:
  - "7.1.17   ObservedEvents descriptor\n   ObservedEvents is supplied with the Notify\
    \ command to inform the MGC\n   of which event(s) were detected.  Used with the\
    \ AuditValue command,\n   the ObservedEventsDescriptor returns events in the event\
    \ buffer which\n   have not been Notified.  ObservedEvents contains the\n   RequestIdentifier\
    \ of the EventsDescriptor that triggered the\n   notification, the event(s) detected,\
    \ optionally the detection time(s)\n   and any parameters of the observed event.\
    \  Detection times are\n   reported with a precision of hundredths of a second.\n"
- title: 7.1.18   Topology descriptor
  contents:
  - "7.1.18   Topology descriptor\n   A Topology descriptor is used to specify flow\
    \ directions between\n   Terminations in a Context.  Contrary to the descriptors\
    \ in previous\n   subclauses, the Topology descriptor applies to a Context instead\
    \ of a\n   Termination.  The default topology of a Context is that each\n   Termination's\
    \ transmission is received by all other Terminations.\n   The Topology descriptor\
    \ is optional to implement.  An MG that does\n   not support Topology descriptors,\
    \ but receives a command containing\n   one, returns Error 444 Unsupported or\
    \ unknown descriptor, and\n   optionally includes a string containing the name\
    \ of the unsupported\n   Descriptor (\"Topology\") in the error text in the error\
    \ descriptor.\n   The Topology descriptor occurs before the commands in an action.\
    \  It\n   is possible to have an action containing only a Topology descriptor,\n\
    \   provided that the Context to which the action applies already exists.\n  \
    \ A Topology descriptor consists of a sequence of triples of the form\n   (T1,\
    \ T2, association).  T1 and T2 specify Terminations within the\n   Context, possibly\
    \ using the ALL or CHOOSE wildcard.  The association\n   specifies how media flows\
    \ between these two Terminations as follows.\n   -  (T1, T2, isolate) means that\
    \ the Terminations matching T2 do not\n      receive media from the Terminations\
    \ matching T1, nor vice versa.\n   -  (T1, T2, oneway) means that the Terminations\
    \ that match T2 receive\n      media from the Terminations matching T1, but not\
    \ vice versa.  In\n      this case use of the ALL wildcard such that there are\
    \ Terminations\n      that match both T1 and T2 is not allowed.\n   -  (T1, T2,\
    \ bothway) means that the Terminations matching T2 receive\n      media from the\
    \ Terminations matching T1, and vice versa.  In this\n      case it is allowed\
    \ to use wildcards such that there are\n      Terminations that match both T1\
    \ and T2.  However, if there is a\n      Termination that matches both, no loopback\
    \ is introduced.\n   CHOOSE wildcards may be used in T1 and T2 as well, under\
    \ the\n   following restrictions:\n   -  the action (see clause 8) of which the\
    \ topology descriptor is part\n      contains an Add command in which a CHOOSE\
    \ wildcard is used;\n   -  if a CHOOSE wildcard occurs in T1 or T2, then a partial\
    \ name SHALL\n      NOT be specified.\n   The CHOOSE wildcard in a Topology descriptor\
    \ matches the\n   TerminationID that the MG assigns in the first Add command that\
    \ uses\n   a CHOOSE wildcard in the same action.  An existing Termination that\n\
    \   matches T1 or T2 in the Context to which a Termination is added, is\n   connected\
    \ to the newly added Termination as specified by the Topology\n   descriptor.\n\
    \   If a termination is not mentioned within a Topology Descriptor, any\n   topology\
    \ associated with it remains unchanged.  If, however, a new\n   termination is\
    \ added into a context its association with the other\n   terminations within\
    \ the context defaults to bothway, unless a\n   Topology Descriptor is given to\
    \ change this (e.g., if T3 is added to\n   a context with T1 and T2 with topology\
    \ (T3, T1, oneway) it will be\n   connected bothway to T2).\n   Figure 7 and the\
    \ table following it show some examples of the effect\n   of including topology\
    \ descriptors in actions.  In these examples it\n   is assumed that the topology\
    \ descriptors are applied in sequence.\n     +------------------+  +------------------+\
    \  +------------------+\n     |      +----+      |  |      +----+      |  |  \
    \    +----+      |\n     |      | T2 |      |  |      | T2 |      |  |      |\
    \ T2 |      |\n     |      +----+      |  |      +----+      |  |      +----+\
    \      |\n     |       ^  ^       |  |          ^       |  |          ^      \
    \ |\n     |       |  |       |  |          |       |  |          |       |\n \
    \    |    +--+  +--+    |  |          +---+   |  |          +--+    |\n     |\
    \    |        |    |  |              |   |  |             |    |\n     |    v\
    \        v    |  |              v   |  |             |    |\n     | +----+   \
    \ +----+ |  | +----+    +----+ |  | +----+    +----+ |\n     | | T1 |<-->| T3\
    \ | |  | | T1 |<-->| T3 | |  | | T1 |<-->| T3 | |\n     | +----+    +----+ | \
    \ | +----+    +----+ |  | +----+    +----+ |\n     +------------------+  +------------------+\
    \  +------------------+\n     1. No Topology Desc.   2. T1, T2, Isolate    3.\
    \ T3, T2, Oneway\n     +------------------+  +------------------+  +------------------+\n\
    \     |      +----+      |  |      +----+      |  |      +----+      |\n     |\
    \      | T2 |      |  |      | T2 |      |  |      | T2 |      |\n     |     \
    \ +----+      |  |      +----+      |  |      +----+      |\n     |          |\
    \       |  |          ^       |  |       ^  ^       |\n     |          |     \
    \  |  |          |       |  |       |  |       |\n     |          +--+    |  |\
    \          +---+   |  |    +--+  +--+    |\n     |             |    |  |     \
    \         |   |  |    |        |    |\n     |             v    |  |          \
    \    v   |  |    v        v    |\n     | +----+    +----+ |  | +----+    +----+\
    \ |  | +----+    +----+ |\n     | | T1 |<-->| T3 | |  | | T1 |<-->| T3 | |  |\
    \ | T1 |<-->| T3 | |\n     | +----+    +----+ |  | +----+    +----+ |  | +----+\
    \    +----+ |\n     +------------------+  +------------------+  +------------------+\n\
    \     4. T2, T3 oneway      5. T2, T3 bothway     6. T1, T2 bothway\n     Note:\
    \ the direction of the arrow indicates the direction of flow.\n              \
    \         Figure 7: Example topologies\n   Topology Description\n   1 No topology\
    \ descriptors    When no topology descriptors are\n                          \
    \      included, all Terminations have a\n                                bothway\
    \ connection to all other\n                                Terminations.\n   2\
    \ T1, T2 Isolate             Removes the connection between T1 and\n         \
    \                       T2.  T3 has a bothway connection with\n              \
    \                  both T1 and T2.  T1 and T2 have bothway\n                 \
    \               connection to T3.\n   3 T3, T2 oneway              A oneway connection\
    \ from T3 to T2 (i.e.,\n                                T2 receives media flow\
    \ from T3).  A\n                                bothway connection between T1\
    \ and T3.\n   4 T2, T3 oneway              A oneway connection between T2 to T3.\n\
    \                                T1 and T3 remain bothway connected.\n   5 T2,\
    \ T3 bothway             T2 is bothway connected to T3.  This\n              \
    \                  results in the same as 2.\n   6 T1, T2 bothway (T2, T3    \
    \ All Terminations have a bothway\n     bothway and T1, T3         connection\
    \ to all other Terminations.\n     bothway may be implied or\n     explicit).\n\
    \   A oneway connection must be implemented in such a way that the other\n   Terminations\
    \ in the Context are not aware of the change in topology.\n"
- title: 7.1.19   Error Descriptor
  contents:
  - "7.1.19   Error Descriptor\n   If a responder encounters an error when processing\
    \ a transaction\n   request, it must include an error descriptor in its response.\
    \  A\n   Notify request may contain an error descriptor as well.\n   An error\
    \ descriptor consists of an IANA-registered error code,\n   optionally accompanied\
    \ by an error text.  H.248.8 contains a list of\n   valid error codes and error\
    \ descriptions.\n   An error descriptor shall be specified at the \"deepest level\"\
    \ that is\n   semantically appropriate for the error being described and that\
    \ is\n   possible given any parsing problems with the original request.  An\n\
    \   error descriptor may refer to a syntactical construct other than\n   where\
    \ it appears.  For example, Error descriptor 422 - Syntax Error\n   in Action,\
    \ could appear within a command even though it refers to the\n   larger construct\
    \ - the action - and not the particular command within\n   which it appears.\n"
- title: 7.2   Command Application Programming Interface
  contents:
  - "7.2   Command Application Programming Interface\n   Following is an Application\
    \ Programming Interface (API) describing\n   the Commands of the protocol.  This\
    \ API is shown to illustrate the\n   Commands and their parameters and is not\
    \ intended to specify\n   implementation (e.g., via use of blocking function calls).\
    \  It\n   describes the input parameters in parentheses after the command name\n\
    \   and the return values in front of the Command.  This is only for\n   descriptive\
    \ purposes; the actual Command syntax and encoding are\n   specified in later\
    \ subclauses.  The order of parameters to commands\n   is not fixed.  Descriptors\
    \ may appear as parameters to commands in\n   any order.  The descriptors SHALL\
    \ be processed in the order in which\n   they appear.\n   Any reply to a command\
    \ may contain an error descriptor; the API does\n   not specifically show this.\n\
    \   All parameters enclosed by square brackets ([. . .]) are considered\n   optional.\n"
- title: 7.2.1 Add
  contents:
  - "7.2.1 Add\n   The Add Command adds a Termination to a Context.\n     TerminationID\n\
    \     [,MediaDescriptor]\n     [,ModemDescriptor]\n     [,MuxDescriptor]\n   \
    \  [,EventsDescriptor]\n     [,SignalsDescriptor]\n     [,DigitMapDescriptor]\n\
    \     [,ObservedEventsDescriptor]\n     [,EventBufferDescriptor]\n     [,StatisticsDescriptor]\n\
    \     [,PackagesDescriptor]\n       Add( TerminationID\n        [, MediaDescriptor]\n\
    \        [, ModemDescriptor]\n        [, MuxDescriptor]\n        [, EventsDescriptor]\n\
    \        [, EventBufferDescriptor]\n        [, SignalsDescriptor]\n        [,\
    \ DigitMapDescriptor]\n        [, AuditDescriptor]\n        )\n   The TerminationID\
    \ specifies the Termination to be added to the\n   Context.  The Termination is\
    \ either created, or taken from the null\n   Context.  If a CHOOSE wildcard is\
    \ used in the TerminationID, the\n   selected TerminationID will be returned.\
    \  Wildcards may be used in an\n   Add, but such usage would be unusual.  If the\
    \ wildcard matches more\n   than one TerminationID, all possible matches are attempted,\
    \ with\n   results reported for each one.  The order of attempts when multiple\n\
    \   TerminationIDs match is not specified.\n   The optional MediaDescriptor describes\
    \ all media streams.\n   The optional ModemDescriptor and MuxDescriptor specify\
    \ a modem and\n   multiplexer if applicable.  For convenience, if a Multiplex\n\
    \   descriptor is present in an Add command and lists any Terminations\n   that\
    \ are not currently in the Context, such Terminations are added to\n   the Context\
    \ as if individual Add commands listing the Terminations\n   were invoked. If\
    \ an error occurs on such an implied Add, error 471 -\n   Implied Add for Multiplex\
    \ failure shall be returned and further\n   processing of the command shall cease.\n\
    \   The EventsDescriptor parameter is optional.  If present, it provides\n   the\
    \ list of events that should be detected on the Termination.\n   The EventBufferDescriptor\
    \ parameter is optional.  If present, it\n   provides the list of events that\
    \ the MG is requested to detect and\n   buffer when EventBufferControl equals\
    \ LockStep.\n   The SignalsDescriptor parameter is optional.  If present, it provides\n\
    \   the list of signals that should be applied to the Termination.\n   The DigitMapDescriptor\
    \ parameter is optional.  If present, it defines\n   a DigitMap definition that\
    \ may be used in an EventsDescriptor.\n   The AuditDescriptor is optional.  If\
    \ present, the command will return\n   descriptors as specified in the AuditDescriptor.\n\
    \   All descriptors that can be modified could be returned by MG if a\n   parameter\
    \ was underspecified or overspecified.  ObservedEvents,\n   Statistics, and Packages,\
    \ and the EventBuffer descriptors are\n   returned only if requested in the AuditDescriptor.\n\
    \   Add SHALL NOT be used on a Termination with a serviceState of\n   \"OutofService\"\
    .\n"
- title: 7.2.2 Modify
  contents:
  - "7.2.2 Modify\n   The Modify Command modifies the properties of a Termination.\n\
    \     TerminationID\n     [,MediaDescriptor]\n     [,ModemDescriptor]\n     [,MuxDescriptor]\n\
    \     [,EventsDescriptor]\n     [,SignalsDescriptor]\n     [,DigitMapDescriptor]\n\
    \     [,ObservedEventsDescriptor]\n     [,EventBufferDescriptor]\n     [,StatisticsDescriptor]\n\
    \     [,PackagesDescriptor]\n      Modify( TerminationID\n         [, MediaDescriptor]\n\
    \         [, ModemDescriptor]\n         [, MuxDescriptor]\n         [, EventsDescriptor]\n\
    \         [, EventBufferDescriptor]\n         [, SignalsDescriptor]\n        \
    \ [, DigitMapDescriptor]\n         [, AuditDescriptor]\n         )\n   The TerminationID\
    \ may be specific if a single Termination in the\n   Context is to be modified.\
    \  Use of wildcards in the TerminationID may\n   be appropriate for some operations.\
    \  If the wildcard matches more\n   than one TerminationID, all possible matches\
    \ are attempted, with\n   results reported for each one.  The order of attempts\
    \ when multiple\n   TerminationIDs match is not specified.  The CHOOSE option\
    \ is an\n   error, as the Modify command may only be used on existing\n   Terminations.\n\
    \   For convenience, if a Multiplex Descriptor is present in a Modify\n   command,\
    \ then:\n   -  if the new Multiplex Descriptor lists any Terminations that are\n\
    \      not currently in the Context, such Terminations are added to the\n    \
    \  context as if individual commands listing the Terminations were\n      invoked.\n\
    \   -  if any Terminations listed previously in the Multiplex Descriptor\n   \
    \   are no longer present in the new Multiplex Descriptor, they are\n      subtracted\
    \ from the context as if individual Subtract commands\n      listing the Terminations\
    \ were invoked.\n   The remaining parameters to Modify are the same as those to\
    \ Add.\n   Possible return values are the same as those to Add.\n"
- title: 7.2.3 Subtract
  contents:
  - "7.2.3 Subtract\n   The Subtract Command disconnects a Termination from its Context\
    \ and\n   returns statistics on the Termination's participation in the Context.\n\
    \     TerminationID\n     [,MediaDescriptor]\n     [,ModemDescriptor]\n     [,MuxDescriptor]\n\
    \     [,EventsDescriptor]\n     [,SignalsDescriptor]\n     [,DigitMapDescriptor]\n\
    \     [,ObservedEventsDescriptor]\n     [,EventBufferDescriptor]\n     [,StatisticsDescriptor]\n\
    \     [,PackagesDescriptor]\n      Subtract(TerminationID\n         [, AuditDescriptor]\n\
    \         )\n   TerminationID in the input parameters represents the Termination\
    \ that\n   is being subtracted.  The TerminationID may be specific or may be a\n\
    \   wildcard value indicating that all (or a set of related) Terminations\n  \
    \ in the Context of the Subtract Command are to be subtracted.  If the\n   wildcard\
    \ matches more than one TerminationID, all possible matches\n   are attempted,\
    \ with results reported for each one.  The order of\n   attempts when multiple\
    \ TerminationIDs match is not specified.\n   The use of CHOOSE in the TerminationID\
    \ is an error, as the Subtract\n   command may only be used on existing Terminations.\n\
    \   ALL may be used as the ContextID as well as the TerminationId in a\n   Subtract,\
    \ which would have the effect of deleting all Contexts,\n   deleting all ephemeral\
    \ Terminations, and returning all physical\n   Terminations to Null Context. \
    \ Subtract of a termination from the\n   Null Context is not allowed.\n   For\
    \ convenience, if a multiplexing Termination is the object of a\n   Subtract command,\
    \ then any bearer Terminations listed in its\n   Multiplex Descriptor are subtracted\
    \ from the context as if individual\n   Subtract commands listing the Terminations\
    \ were invoked.\n   By default, the Statistics parameter is returned to report\n\
    \   information collected on the Termination or Terminations specified in\n  \
    \ the Command.  The information reported applies to the Termination's\n   or Terminations'\
    \ existence in the Context from which it or they are\n   being subtracted.\n \
    \  The AuditDescriptor is optional.  If present, the command will return\n   only\
    \ those descriptors as specified in the AuditDescriptor, which may\n   be empty.\
    \  If omitted, the Statistics descriptor is returned, by\n   default.  Possible\
    \ return values are the same as those to Add.\n   When a provisioned Termination\
    \ is Subtracted from a Context, its\n   property values shall revert to:\n   -\
    \  the default value, if specified for the property and not\n      overridden\
    \ by provisioning;\n   -  otherwise, the provisioned value.\n"
- title: 7.2.4 Move
  contents:
  - "7.2.4 Move\n   The Move Command moves a Termination to another Context from its\n\
    \   current Context in one atomic operation.  The Move command is the\n   only\
    \ command that refers to a Termination in a Context different from\n   that to\
    \ which the command is applied.  The Move command shall not be\n   used to move\
    \ Terminations to or from the null Context.\n     TerminationID\n     [,MediaDescriptor]\n\
    \     [,ModemDescriptor]\n     [,MuxDescriptor]\n     [,EventsDescriptor]\n  \
    \   [,SignalsDescriptor]\n     [,DigitMapDescriptor]\n     [,ObservedEventsDescriptor]\n\
    \     [,EventBufferDescriptor]\n     [,StatisticsDescriptor]\n     [,PackagesDescriptor]\n\
    \      Move( TerminationID\n         [, MediaDescriptor]\n         [, ModemDescriptor]\n\
    \         [, MuxDescriptor]\n         [, EventsDescriptor]\n         [, EventBufferDescriptor]\n\
    \         [, SignalsDescriptor]\n         [, DigitMapDescriptor]\n         [,\
    \ AuditDescriptor]\n         )\n   The TerminationID specifies the Termination\
    \ to be moved.  It may be\n   wildcarded, but CHOOSE shall not be used in the\
    \ TerminationID.  If\n   the wildcard matches more than one TerminationID, all\
    \ possible\n   matches are attempted, with results reported for each one.  The\
    \ order\n   of attempts when multiple TerminationIDs match is not specified. \
    \ The\n   Context to which the Termination is moved is indicated by the target\n\
    \   ContextId in the Action.  If the last remaining Termination is moved\n   out\
    \ of a Context, the Context is deleted.\n   The Move command does not affect the\
    \ properties of the Termination on\n   which it operates, except those properties\
    \ explicitly modified by\n   descriptors included in the Move command.  The AuditDescriptor\
    \ with\n   the Statistics option, for example, would return statistics on the\n\
    \   Termination just prior to the Move.  Possible descriptors returned\n   from\
    \ Move are the same as for Add.\n   For convenience, if a multiplexing Termination\
    \ is the object of a\n   Move command, then any bearer Terminations listed in\
    \ its Multiplex\n   Descriptor are also moved as if individual Move commands listing\
    \ the\n   Terminations were invoked.\n   Move SHALL NOT be used on a Termination\
    \ with a serviceState of\n   \"OutofService\".\n"
- title: 7.2.5 AuditValue
  contents:
  - "7.2.5 AuditValue\n   The AuditValue Command returns the current values of properties,\n\
    \   events, signals and statistics associated with Terminations.\n   TerminationID\n\
    \   [,MediaDescriptor]\n   [,ModemDescriptor]\n   [,MuxDescriptor]\n   [,EventsDescriptor]\n\
    \   [,SignalsDescriptor]\n   [,DigitMapDescriptor]\n   [,ObservedEventsDescriptor]\n\
    \   [,EventBufferDescriptor]\n   [,StatisticsDescriptor]\n   [,PackagesDescriptor]\n\
    \     AuditValue(TerminationID,\n      AuditDescriptor\n      )\n   TerminationID\
    \ may be specific or wildcarded.  If the wildcard matches\n   more than one TerminationID,\
    \ all possible matches are attempted, with\n   results reported for each one.\
    \  The order of attempts when multiple\n   TerminationIDs match is not specified.\
    \  If a wildcarded response is\n   requested, only one command return is generated,\
    \ with the contents\n   containing the union of the values of all Terminations\
    \ matching the\n   wildcard.  This convention may reduce the volume of data required\
    \ to\n   audit a group of Terminations.  Use of CHOOSE is an error.\n   The appropriate\
    \ descriptors, with the current values for the\n   Termination, are returned from\
    \ AuditValue.  Values appearing in\n   multiple instances of a descriptor are\
    \ defined to be alternate values\n   supported, with each parameter in a descriptor\
    \ considered\n   independent.\n   ObservedEvents returns a list of events in the\
    \ EventBuffer.  If the\n   ObservedEventsDescriptor is audited while a DigitMap\
    \ is active, the\n   returned ObservedEvents descriptor also includes a digit\
    \ map\n   completion event that shows the current dial string but does not show\n\
    \   a Termination method.\n   EventBuffer returns the set of events and associated\
    \ parameter values\n   currently enabled in the EventBufferDescriptor.  PackagesDescriptor\n\
    \   returns a list of packages realized by the Termination.\n   DigitMapDescriptor\
    \ returns the name or value of the current DigitMap\n   for the Termination. \
    \ DigitMap requested in an AuditValue command\n   with TerminationID ALL returns\
    \ all DigitMaps in the gateway.\n   Statistics returns the current values of all\
    \ statistics being kept on\n   the Termination.   Specifying an empty Audit descriptor\
    \ results in\n   only the TerminationID being returned.  This may be useful to\
    \ get a\n   list of TerminationIDs when used with wildcard.  Annexes A and B\n\
    \   provide a special syntax for presenting such a list in condensed\n   form,\
    \ such that the AuditValue command tag does not have to be\n   repeated for each\
    \ TerminationID.\n   AuditValue results depend on the Context, viz. specific,\
    \ null, or\n   wildcarded.  (Note that ContextID ALL does not include the null\n\
    \   Context.)  The TerminationID may be specific, or wildcarded.\n   The following\
    \ are examples of what is returned in case the context\n   and/or the termination\
    \ is wildcarded and a wildcarded response has\n   been specified.\n   Assume that\
    \ the gateway has 4 terminations: t1/1, t1/2, t2/1 and\n   t2/2.  Assume that\
    \ terminations t1/* have implemented packages aaa\n   and bbb and that terminations\
    \ t2/* have implemented packages ccc and\n   ddd.  Assume that Context 1 has t1/1\
    \ and t2/1 in it and that Context\n   2 has t1/2 and t2/2 in it.\n   The command:\n\
    \     Context=1{AuditValue=t1/1{Audit{Packages}}}\n   Returns:\n     Context=1{AuditValue=t1/1{Packages{aaa,bbb}}}\n\
    \   The command:\n     Context=*{AuditValue=t2/*{Audit{Packages}}}\n   Returns:\n\
    \     Context=1{AuditValue=t2/1{Packages{ccc,ddd}}},\n     Context=2{AuditValue=t2/2{Packages{ccc,ddd}}}\n\
    \   The command:\n     Context=*{W-AuditValue=t1/*{Audit{Packages}}}\n   Returns:\n\
    \     Context=*{W-AuditValue=t1/*{Packages{aaa,bbb}}}\n   Note: A wildcard response\
    \ may also be used for other commands such as\n   Subtract.\n   The following\
    \ illustrates other information that can be obtained with\n   the AuditValue Command:\n\
    \   ContextID TerminationID Information Obtained\n   Specific  wildcard      Audit\
    \ of matching Terminations in a Context\n   Specific  specific      Audit of a\
    \ single Termination in a Context\n   Null      Root          Audit of Media Gateway\
    \ state and events\n   Null      wildcard      Audit of all matching Terminations\
    \ in the\n                            null Context\n   Null      specific    \
    \  Audit of a single Termination outside of any\n                            Context\n\
    \   All       wildcard      Audit of all matching Terminations and the\n     \
    \                       Context to which they are associated\n   All       Root\
    \          List of all ContextIds (the ContextID list\n                      \
    \      should be returned by using multiple action\n                         \
    \   replies, each containing a ContextID from\n                            the\
    \ list)\n   All       Specific      (Non-null) ContextID in which the\n      \
    \                      Termination currently exists\n"
- title: 7.2.6 AuditCapabilities
  contents:
  - "7.2.6 AuditCapabilities\n   The AuditCapabilities Command returns the possible\
    \ values of\n   properties, events, signals and statistics associated with\n \
    \  Terminations.\n     TerminationID\n     [,MediaDescriptor]\n     [,ModemDescriptor]\n\
    \     [,MuxDescriptor]\n     [,EventsDescriptor]\n     [,SignalsDescriptor]\n\
    \     [,ObservedEventsDescriptor]\n     [,EventBufferDescriptor]\n     [,StatisticsDescriptor]\n\
    \      AuditCapabilities(TerminationID,\n         AuditDescriptor\n         )\n\
    \   The appropriate descriptors, with the possible values for the\n   Termination\
    \ are returned from AuditCapabilities.  Descriptors may be\n   repeated where\
    \ there are multiple possible values.  If a wildcarded\n   response is requested,\
    \ only one command return is generated, with the\n   contents containing the union\
    \ of the values of all Terminations\n   matching the wildcard.  This convention\
    \ may reduce the volume of data\n   required to audit a group of Terminations.\n\
    \   Interpretation of what capabilities are requested for various values\n   of\
    \ ContextID and TerminationID is the same as in AuditValue.\n   The EventsDescriptor\
    \ returns the list of possible events on the\n   Termination together with the\
    \ list of all possible values for the\n   EventsDescriptor Parameters.  EventBufferDescriptor\
    \ returns the same\n   information as EventsDescriptor.  The SignalsDescriptor\
    \ returns the\n   list of possible signals that could be applied to the Termination\n\
    \   together with the list of all possible values for the Signals\n   Parameters.\
    \  StatisticsDescriptor returns the names of the statistics\n   being kept on\
    \ the termination.  ObservedEventsDescriptor returns the\n   names of active events\
    \ on the Termination.  DigitMap and Packages are\n   not legal in AuditCapability.\n\
    \   The following illustrates other information that can be obtained with\n  \
    \ the AuditCapabilties Command:\n   ContextID TerminationID Information Obtained\n\
    \   Specific  wildcard      Audit of matching Terminations in a Context\n   Specific\
    \  specific      Audit of a single Termination in a Context\n   Null      Root\
    \          Audit of MG state and events\n   Null      wildcard      Audit of all\
    \ matching Terminations in the\n                            Null Context\n   Null\
    \      specific      Audit of a single Termination outside of any\n          \
    \                  Context\n   All       wildcard      Audit of all matching Terminations\
    \ and the\n                            Context to which they are associated\n\
    \   All       Root          Same as for AuditValue\n   All       Specific    \
    \  Same as for AuditValue\n"
- title: 7.2.7 Notify
  contents:
  - "7.2.7 Notify\n   The Notify Command allows the Media Gateway to notify the Media\n\
    \   Gateway Controller of events occurring within the Media Gateway.\n     TerminationID\n\
    \      Notify(TerminationID,\n         ObservedEventsDescriptor,\n         [ErrorDescriptor]\n\
    \         )\n   The TerminationID parameter specifies the Termination issuing\
    \ the\n   Notify Command.  The TerminationID shall be a fully qualified name.\n\
    \   The ObservedEventsDescriptor contains the RequestID and a list of\n   events\
    \ that the Media Gateway detected in the order that they were\n   detected.  Each\
    \ event in the list is accompanied by parameters\n   associated with the event\
    \ and optionally an indication of the time\n   that the event was detected.  Procedures\
    \ for sending Notify commands\n   with RequestID equal to 0 are for further study.\n\
    \   Notify Commands with RequestID not equal to 0 shall occur only as the\n  \
    \ result of detection of an event specified by an Events descriptor\n   which\
    \ is active on the Termination concerned.\n   The RequestID returns the RequestID\
    \ parameter of the EventsDescriptor\n   that triggered the Notify Command.  It\
    \ is used to correlate the\n   notification with the request that triggered it.\
    \  The events in the\n   list must have been requested via the triggering EventsDescriptor\
    \ or\n   embedded events descriptor unless the RequestID is 0 (which is for\n\
    \   further study).\n   The ErrorDescriptor may be sent in the Notify Command\
    \ as a result of\n   Error 518 - Event buffer full.\n"
- title: 7.2.8 ServiceChange
  contents:
  - "7.2.8 ServiceChange\n   The ServiceChange Command allows the Media Gateway to\
    \ notify the\n   Media Gateway Controller that a Termination or group of Terminations\n\
    \   is about to be taken out of service or has just been returned to\n   service.\
    \  The Media Gateway Controller may indicate that\n   Termination(s) shall be\
    \ taken out of or returned to service.   The\n   Media Gateway may notify the\
    \ MGC that the capability of a Termination\n   has changed.  It also allows a\
    \ MGC to hand over control of a MG to\n   another MGC.\n   TerminationID,\n  \
    \   [ServiceChangeDescriptor]\n      ServiceChange ( TerminationID,\n        \
    \ ServiceChangeDescriptor\n         )\n   The TerminationID parameter specifies\
    \ the Termination(s) that are\n   taken out of or returned to service.  Wildcarding\
    \ of Termination\n   names is permitted, with the exception that the CHOOSE mechanism\n\
    \   shall not be used.  Use of the \"Root\" TerminationID indicates a\n   ServiceChange\
    \ affecting the entire Media Gateway.\n   The ServiceChangeDescriptor contains\
    \ the following parameters as\n   required:\n   -  ServiceChangeMethod\n   - \
    \ ServiceChangeReason\n   -  ServiceChangeDelay\n   -  ServiceChangeAddress\n\
    \   -  ServiceChangeProfile\n   -  ServiceChangeVersion\n   -  ServiceChangeMgcId\n\
    \   -  TimeStamp\n   The ServiceChangeMethod parameter specifies the type of ServiceChange\n\
    \   that will or has occurred:\n   1) Graceful - indicates that the specified\
    \ Terminations will be taken\n      out of service after the specified ServiceChangeDelay;\
    \ established\n      connections are not yet affected, but the Media Gateway Controller\n\
    \      should refrain from establishing new connections and should\n      attempt\
    \ to gracefully tear down existing connections on the\n      Termination(s) affected\
    \ by the serviceChange command.  The MG\n      should set Termination serviceState\
    \ at the expiry of\n      ServiceChangeDelay or the removal of the Termination\
    \ from an\n      active Context (whichever is first), to \"out of service\".\n\
    \   2) Forced - indicates that the specified Terminations were taken\n      abruptly\
    \ out of service and any established connections associated\n      with them may\
    \ be lost.  For non-Root terminations, the MGC is\n      responsible for cleaning\
    \ up the Context (if any) with which the\n      failed Termination is associated.\
    \  At a minimum the Termination\n      shall be subtracted from the Context. \
    \ The Termination\n      serviceState should be \"out of service\".  For the root\n\
    \      termination, the MGC can assume that all connections are lost on\n    \
    \  the MG and thus can consider that all the terminations have been\n      subtracted.\n\
    \   3) Restart - indicates that service will be restored on the specified\n  \
    \    Terminations after expiration of the ServiceChangeDelay.  The\n      serviceState\
    \ should be set to \"inService\" upon expiry of\n      ServiceChangeDelay.\n \
    \  4) Disconnected - always applied with the Root TerminationID,\n      indicates\
    \ that the MG lost communication with the MGC, but it was\n      subsequently\
    \ restored to the same MGC (possibly after trying other\n      MGCs on a pre-provisioned\
    \ list).  Since MG state may have changed,\n      the MGC may wish to use the\
    \ Audit command to resynchronize its\n      state with the MG's.\n   5) Handoff\
    \ - sent from the MGC to the MG, this reason indicates that\n      the MGC is\
    \ going out of service and a new MGC association must be\n      established. \
    \ Sent from the MG to the MGC, this indicates that the\n      MG is attempting\
    \ to establish a new association in accordance with\n      a Handoff received\
    \ from the MGC with which it was previously\n      associated.\n   6) Failover\
    \ - sent from MG to MGC to indicate the primary MG is out\n      of service and\
    \ a secondary MG is taking over.  This serviceChange\n      method is also sent\
    \ from the MG to the MGC when the MG detects\n      that MGC has failed.\n   7)\
    \ Another value whose meaning is mutually understood between the MG\n      and\
    \ the MGC.\n   The ServiceChangeReason parameter specifies the reason why the\n\
    \   ServiceChange has or will occur.  It consists of an alphanumeric\n   token\
    \ (IANA registered) and, optionally, an explanatory string.\n   The optional ServiceChangeAddress\
    \ parameter specifies the address\n   (e.g., IP port number for IP networks) to\
    \ be used for subsequent\n   communications.  It can be specified in the input\
    \ parameter\n   descriptor or the returned result descriptor.  ServiceChangeAddress\n\
    \   and ServiceChangeMgcId parameters must not both be present in the\n   ServiceChangeDescriptor\
    \ or the ServiceChangeResultDescriptor.  The\n   ServiceChangeAddress provides\
    \ an address to be used within the\n   Context of the association currently being\
    \ negotiated, while the\n   ServiceChangeMgcId provides an alternate address where\
    \ the MG should\n   seek to establish another association.  Note that the use\
    \ of\n   ServiceChangeAddress is not encouraged.  MGCs and MGs must be able to\n\
    \   cope with the ServiceChangeAddress being either a full address or\n   just\
    \ a port number in the case of TCP transports.\n   The optional ServiceChangeDelay\
    \ parameter is expressed in seconds.\n   If the delay is absent or set to zero,\
    \ the delay value should be\n   considered to be null.  In the case of a \"graceful\"\
    \n   ServiceChangeMethod, a null delay indicates that the Media Gateway\n   Controller\
    \ should wait for the natural removal of existing\n   connections and should not\
    \ establish new connections.  For \"graceful\"\n   only, a null delay means the\
    \ MG must not set serviceState \"out of\n   service\" until the Termination is\
    \ in the null Context.\n   The optional ServiceChangeProfile parameter specifies\
    \ the Profile (if\n   any) of the protocol supported.  The ServiceChangeProfile\
    \ includes\n   the version of the profile supported.\n   The optional ServiceChangeVersion\
    \ parameter contains the protocol\n   version and is used if protocol version\
    \ negotiation occurs (see\n   11.3).\n   The optional TimeStamp parameter specifies\
    \ the actual time as kept by\n   the sender.  As such, it is not necessarily absolute\
    \ time according\n   to, for example, a local time zone - it merely establishes\
    \ an\n   arbitrary starting time against which all future timestamps\n   transmitted\
    \ by a sender during this association shall be compared.\n   It can be used by\
    \ the responder to determine how its notion of time\n   differs from that of its\
    \ correspondent.  TimeStamp is sent with a\n   precision of hundredths of a second.\n\
    \   The optional Extension parameter may contain any value whose meaning\n   is\
    \ mutually understood by the MG and MGC.\n   A ServiceChange Command specifying\
    \ the \"Root\" for the TerminationID\n   and ServiceChangeMethod equal to Restart\
    \ is a registration command by\n   which a Media Gateway announces its existence\
    \ to the Media Gateway\n   Controller.  The Media Gateway may also announce a\
    \ registration\n   command by specifying the \"Root\" for the TerminationID and\n\
    \   ServiceChangeMethod equal to Failover when the MG detects MGC\n   failures.\
    \  The Media Gateway is expected to be provisioned with the\n   name of one primary\
    \ and optionally some number of alternate Media\n   Gateway Controllers.  Acknowledgement\
    \ of the ServiceChange Command\n   completes the registration process, except\
    \ when the MGC has returned\n   an alternative ServiceChangeMgcId as described\
    \ in the following\n   paragraph.  The MG may specify the transport ServiceChangeAddress\
    \ to\n   be used by the MGC for sending messages in the ServiceChangeAddress\n\
    \   parameter in the input ServiceChangeDescriptor.  The MG may specify\n   an\
    \ address in the ServiceChangeAddress parameter of the ServiceChange\n   request,\
    \ and the MGC may also do so in the ServiceChange reply.  In\n   either case,\
    \ the recipient must use the supplied address as the\n   destination for all subsequent\
    \ transaction requests within the\n   association.  At the same time, as indicated\
    \ in clause 9, transaction\n   replies and pending indications must be sent to\
    \ the address from\n   which the corresponding requests originated.  This must\
    \ be done even\n   if it implies extra messaging because commands and responses\
    \ cannot\n   be packed together.  The TimeStamp parameter shall be sent with a\n\
    \   registration command and its response.\n   The Media Gateway Controller may\
    \ return a ServiceChangeMgcId\n   parameter that describes the Media Gateway Controller\
    \ that should\n   preferably be contacted for further service by the Media Gateway.\
    \  In\n   this case the Media Gateway shall reissue the ServiceChange command\n\
    \   to the new Media Gateway Controller.  The MGC specified in a\n   ServiceChangeMgcId,\
    \ if provided, shall be contacted before any\n   further alternate MGCs.  On a\
    \ HandOff message from MGC to MG, the\n   ServiceChangeMgcId is the new MGC that\
    \ will take over from the\n   current MGC.\n   The return from ServiceChange is\
    \ empty except when the Root\n   terminationID is used.  In that case it includes\
    \ the following\n   parameters as required:\n   -  ServiceChangeAddress, if the\
    \ responding MGC wishes to specify a\n      new destination for messages from\
    \ the MG for the remainder of the\n      association;\n   -  ServiceChangeMgcId,\
    \ if the responding MGC does not wish to sustain\n      an association with the\
    \ MG;\n   -  ServiceChangeProfile, if the responder wishes to negotiate the\n\
    \      profile to be used for the association;\n   -  ServiceChangeVersion, if\
    \ the responder wishes to negotiate the\n      version of the protocol to be used\
    \ for the association.\n   The following ServiceChangeReasons are defined.  This\
    \ list may be\n   extended by an IANA registration as outlined in 13.3.\n    \
    \  900 Service Restored\n      901 Cold Boot\n      902 Warm Boot\n      903 MGC\
    \ Directed Change\n      904 Termination malfunctioning\n      905 Termination\
    \ taken out of service\n      906 Loss of lower layer connectivity (e.g., downstream\
    \ sync)\n      907 Transmission Failure\n      908 MG Impending Failure\n    \
    \  909 MGC Impending Failure\n      910 Media Capability Failure\n      911 Modem\
    \ Capability Failure\n      912 Mux Capability Failure\n      913 Signal Capability\
    \ Failure\n      914 Event Capability Failure\n      915 State Loss\n"
- title: 7.2.9 Manipulating and Auditing Context Attributes
  contents:
  - "7.2.9 Manipulating and Auditing Context Attributes\n   The commands of the protocol\
    \ as discussed in the preceding subclauses\n   apply to Terminations.  This subclause\
    \ specifies how Contexts are\n   manipulated and audited.\n   Commands are grouped\
    \ into actions (see clause 8).  An action applies\n   to one Context.  In addition\
    \ to commands, an action may contain\n   Context manipulation and auditing instructions.\n\
    \   An action request sent to a MG may include a request to audit\n   attributes\
    \ of a Context.  An action may also include a request to\n   change the attributes\
    \ of a Context.\n   The Context properties that may be included in an action reply\
    \ are\n   used to return information to a MGC.  This can be information\n   requested\
    \ by an audit of Context attributes or details of the effect\n   of manipulation\
    \ of a Context.\n   If a MG receives an action which contains both a request to\
    \ audit\n   context attributes and a request to manipulate those attributes, the\n\
    \   response SHALL include the values of the attributes after processing\n   the\
    \ manipulation request.\n"
- title: 7.2.10   Generic Command Syntax
  contents:
  - "7.2.10   Generic Command Syntax\n   The protocol can be encoded in a binary format\
    \ or in a text format.\n   MGCs should support both encoding formats.  MGs may\
    \ support both\n   formats.\n   The protocol syntax for the binary format of the\
    \ protocol is defined\n   in Annex A.  Annex C specifies the encoding of the Local\
    \ and Remote\n   descriptors for use with the binary format.\n   A complete ABNF\
    \ of the text encoding of the protocol per RFC 2234 is\n   given in Annex B. \
    \ SDP is used as the encoding of the Local and\n   Remote descriptors for use\
    \ with the text encoding as modified in\n   7.1.8.\n"
- title: 7.3   Command Error Codes
  contents:
  - "7.3   Command Error Codes\n   Errors consist of an IANA registered error code\
    \ and an explanatory\n   string.  Sending the explanatory string is optional.\
    \  Implementations\n   are encouraged to append diagnostic information to the\
    \ end of the\n   string.\n   When a MG reports an error to a MGC, it does so in\
    \ an error\n   descriptor.  An error descriptor consists of an error code and\n\
    \   optionally the associated explanatory string.\n   H.248.8 contains the error\
    \ codes supported by Recommendations in the\n   H.248 sub-series.\n"
- title: 8  Transactions
  contents:
  - "8  Transactions\n   Commands between the Media Gateway Controller and the Media\
    \ Gateway\n   are grouped into Transactions, each of which is identified by a\n\
    \   TransactionID.  Transactions consist of one or more Actions.  An\n   Action\
    \ consists of a non-empty series of Commands, Context property\n   modifications,\
    \ or Context property audits that are limited to\n   operating within a single\
    \ Context.  Consequently, each Action\n   typically specifies a ContextID.  However,\
    \ there are two\n   circumstances where a specific ContextID is not provided with\
    \ an\n   Action.  One is the case of modification of a Termination outside of\n\
    \   a Context.  The other is where the controller requests the gateway to\n  \
    \ create a new Context.  Figure 8 is a graphic representation of the\n   Transaction,\
    \ Action and Command relationships.\n      +----------------------------------------------------------+\n\
    \      | Transaction x                                            |\n      | \
    \ +----------------------------------------------------+  |\n      |  | Action\
    \ 1                                           |  |\n      |  | +---------+  +---------+\
    \  +---------+  +---------+ |  |\n      |  | | Command |  | Command |  | Command\
    \ |  | Command | |  |\n      |  | |    1    |  |    2    |  |    3    |  |   \
    \ 4    | |  |\n      |  | +---------+  +---------+  +---------+  +---------+ |\
    \  |\n      |  +----------------------------------------------------+  |\n   \
    \   |                                                          |\n      |  +----------------------------------------------------+\
    \  |\n      |  | Action 2                                           |  |\n   \
    \   |  | +---------+                                        |  |\n      |  | |\
    \ Command |                                        |  |\n      |  | |    1   \
    \ |                                        |  |\n      |  | +---------+      \
    \                                  |  |\n      |  +----------------------------------------------------+\
    \  |\n      |                                                          |\n   \
    \   |  +----------------------------------------------------+  |\n      |  | Action\
    \ 3                                           |  |\n      |  | +---------+  +---------+\
    \  +---------+              |  |\n      |  | | Command |  | Command |  | Command\
    \ |              |  |\n      |  | |    1    |  |    2    |  |    3    |      \
    \        |  |\n      |  | +---------+  +---------+  +---------+              |\
    \  |\n      |  +----------------------------------------------------+  |\n   \
    \   +----------------------------------------------------------+\n           \
    \    Figure 8: Transactions, Actions and Commands\n   Transactions are presented\
    \ as TransactionRequests.  Corresponding\n   responses to a TransactionRequest\
    \ are received in a single reply,\n   possibly preceded by a number of TransactionPending\
    \ messages (see\n   8.2.3).\n   Transactions guarantee ordered Command processing.\
    \  That is, Commands\n   within a Transaction are executed sequentially.  Ordering\
    \ of\n   Transactions is NOT guaranteed - transactions may be executed in any\n\
    \   order, or simultaneously.\n   At the first failing Command in a Transaction,\
    \ processing of the\n   remaining Commands in that Transaction stops.  If a command\
    \ contains\n   a wildcarded TerminationID, the command is attempted with each\
    \ of the\n   actual TerminationIDs matching the wildcard.  A response within the\n\
    \   TransactionReply is included for each matching TerminationID, even if\n  \
    \ one or more instances generated an error.  If any TerminationID\n   matching\
    \ a wildcard results in an error when executed, any commands\n   following the\
    \ wildcarded command are not attempted.\n   Commands may be marked as \"Optional\"\
    \ which can override this\n   behaviour - if a command marked as Optional results\
    \ in an error,\n   subsequent commands in the Transaction will be executed.  If\
    \ a\n   command fails, the MG shall as far as possible restore the state that\n\
    \   existed prior to the attempted execution of the command before\n   continuing\
    \ with command processing.\n   A TransactionReply includes the results for all\
    \ of the Commands in\n   the corresponding TransactionRequest.  The TransactionReply\
    \ includes\n   the return values for the Commands that were executed successfully,\n\
    \   and the Command and error descriptor for any Command that failed.\n   TransactionPending\
    \ is used to periodically notify the receiver that a\n   Transaction has not completed\
    \ yet, but is actively being processed.\n   Applications SHOULD implement an application\
    \ level timer per\n   transaction.  Expiration of the timer should cause a retransmission\n\
    \   of the request.  Receipt of a Reply should cancel the timer.  Receipt\n  \
    \ of Pending should restart the timer.\n"
- title: 8.1   Common parameters
  contents:
  - '8.1   Common parameters

    '
- title: 8.1.1 Transaction Identifiers
  contents:
  - "8.1.1 Transaction Identifiers\n   Transactions are identified by a TransactionID,\
    \ which is assigned by\n   sender and is unique within the scope of the sender.\
    \  A response\n   containing an error descriptor to indicate that the TransactionID\
    \ is\n   missing in a request shall use TransactionID 0 in the corresponding\n\
    \   TransactionReply.\n"
- title: 8.1.2 Context Identifiers
  contents:
  - "8.1.2 Context Identifiers\n   Contexts are identified by a ContextID, which is\
    \ assigned by the\n   Media Gateway and is unique within the scope of the Media\
    \ Gateway.\n   The Media Gateway Controller shall use the ContextID supplied by\
    \ the\n   Media Gateway in all subsequent Transactions relating to that\n   Context.\
    \  The protocol makes reference to a distinguished value that\n   may be used\
    \ by the Media Gateway Controller when referring to a\n   Termination that is\
    \ currently not associated with a Context, namely\n   the null ContextID.\n  \
    \ The CHOOSE wildcard is used to request that the Media Gateway create\n   a new\
    \ Context.\n   The MGC may use the ALL wildcard to address all Contexts on the\
    \ MG.\n   The null Context is not included when the ALL wildcard is used.\n  \
    \ The MGC shall not use partially specified ContextIDs containing the\n   CHOOSE\
    \ or ALL wildcards.\n"
- title: 8.2   Transaction Application Programming Interface
  contents:
  - "8.2   Transaction Application Programming Interface\n   Following is an Application\
    \ Programming Interface (API) describing\n   the Transactions of the protocol.\
    \  This API is shown to illustrate\n   the Transactions and their parameters and\
    \ is not intended to specify\n   implementation (e.g., via use of blocking function\
    \ calls).  It will\n   describe the input parameters and return values expected\
    \ to be used\n   by the various Transactions of the protocol from a very high\
    \ level.\n   Transaction syntax and encodings are specified in later subclauses.\n"
- title: 8.2.1 TransactionRequest
  contents:
  - "8.2.1 TransactionRequest\n   The TransactionRequest is invoked by the sender.\
    \  There is one\n   Transaction per request invocation.  A request contains one\
    \ or more\n   Actions, each of which specifies its target Context and one or more\n\
    \   Commands per Context.\n     TransactionRequest(TransactionId {\n         ContextID\
    \ {Command ... Command},\n            . . .\n         ContextID {Command ... Command\
    \ } })\n   The TransactionID parameter must specify a value for later\n   correlation\
    \ with the TransactionReply or TransactionPending response\n   from the receiver.\n\
    \   The ContextID parameter must specify a value to pertain to all\n   Commands\
    \ that follow up to either the next specification of a\n   ContextID parameter\
    \ or the end of the TransactionRequest, whichever\n   comes first.\n   The Command\
    \ parameter represents one of the Commands mentioned in 7.2\n   (Command Application\
    \ Programming Interface).\n"
- title: 8.2.2 TransactionReply
  contents:
  - "8.2.2 TransactionReply\n   The TransactionReply is invoked by the receiver. \
    \ There is one reply\n   invocation per transaction.  A reply contains one or\
    \ more Actions,\n   each of which must specify its target Context and one or more\n\
    \   Responses per Context.  The TransactionReply is invoked by the\n   responder\
    \ when it has processed the TransactionRequest.\n   A TransactionRequest has been\
    \ processed:\n   -  when all actions in that TransactionRequest have been processed;\n\
    \      or\n   -  when an error is encountered in processing that\n      TransactionRequest,\
    \ except when the error is in an optional\n      command.\n   A command has been\
    \ processed when all descriptors in that command\n   have been processed.\n  \
    \ A SignalsDescriptor is considered to have been processed when it has\n   been\
    \ established that the descriptor is syntactically valid, the\n   requested signals\
    \ are supported and they have been queued to be\n   applied.\n   An EventsDescriptor\
    \ or EventBufferDescriptor is considered to have\n   been processed when it has\
    \ been established that the descriptor is\n   syntactically valid, the requested\
    \ events can be observed, any\n   embedded signals can be generated, any embedded\
    \ events can be\n   detected, and the MG has been brought into a state in which\
    \ the\n   events will be detected.\n     TransactionReply(TransactionID {\n  \
    \       ContextID { Response ... Response },\n            . . .\n         ContextID\
    \ { Response ... Response } })\n   The TransactionID parameter must be the same\
    \ as that of the\n   corresponding TransactionRequest.\n   The ContextID parameter\
    \ must specify a value to pertain to all\n   Responses for the action.  The ContextID\
    \ may be specific, all or\n   null.\n   Each of the Response parameters represents\
    \ a return value as\n   mentioned in 7.2, or an error descriptor if the command\
    \ execution\n   encountered an error.  Commands after the point of failure are\
    \ not\n   processed and, therefore, Responses are not issued for them.\n   An\
    \ exception to this occurs if a command has been marked as optional\n   in the\
    \ Transaction request.  If the optional command generates an\n   error, the transaction\
    \ still continues to execute, so the Reply\n   would, in this case, have Responses\
    \ after an Error.\n   Section 7.1.19 Error Descriptor specifies the generation\
    \ of error\n   descriptors.  The text below discusses several individual cases.\n\
    \   If the receiver encounters an error in processing a ContextID, the\n   requested\
    \ Action response will consist of the Context ID and a single\n   error descriptor,\
    \ 422 - Syntax Error in Action.\n   If the receiver encounters an error such that\
    \ it cannot determine a\n   legal Action, it will return a TransactionReply consisting\
    \ of the\n   TransactionID and a single error descriptor, 422 - Syntax Error in\n\
    \   Action.  If the end of an action cannot be reliably determined but\n   one\
    \ or more commands can be parsed, it will process them and then\n   send 422 -\
    \ Syntax Error in Action as the last action for the\n   transaction.  If the receiver\
    \ encounters an error such that is cannot\n   determine a legal Transaction, it\
    \ will return a TransactionReply with\n   a null TransactionID and a single error\
    \ descriptor (403 - Syntax\n   Error in TransactionRequest).\n   If the end of\
    \ a transaction cannot be reliably determined and one or\n   more Actions can\
    \ be parsed, it will process them and then return 403\n   - Syntax Error in Transaction\
    \ as the last action reply for the\n   transaction.  If no Actions can be parsed,\
    \ it will return 403 -\n   Syntax Error in TransactionRequest as the only reply.\n\
    \   If the terminationID cannot be reliably determined, it will send 442\n   -\
    \ Syntax Error in Command as the action reply.\n   If the end of a command cannot\
    \ be reliably determined, it will return\n   442 - Syntax Error in Command as\
    \ the reply to the last action it can\n   parse.\n"
- title: 8.2.3 TransactionPending
  contents:
  - "8.2.3 TransactionPending\n   The receiver invokes the TransactionPending.  A\
    \ TransactionPending\n   indicates that the Transaction is actively being processed,\
    \ but has\n   not been completed.  It is used to prevent the sender from assuming\n\
    \   the TransactionRequest was lost where the Transaction will take some\n   time\
    \ to complete.\n     TransactionPending(TransactionID { } )\n   The TransactionID\
    \ parameter must be the same as that of the\n   corresponding TransactionRequest.\
    \  A property of root\n   (normalMGExecutionTime) is settable by the MGC to indicate\
    \ the\n   interval within which the MGC expects a response to any transaction\n\
    \   from the MG.  Another property (normalMGCExecutionTime) is settable\n   by\
    \ the MGC to indicate the interval within which the MG should expect\n   a response\
    \ to any transaction from the MGC.  Senders may receive more\n   than one TransactionPending\
    \ for a command.  If a duplicate request is\n   received when pending, the responder\
    \ may send a duplicate pending\n   immediately, or continue waiting for its timer\
    \ to trigger another\n   TransactionPending.\n"
- title: 8.3   Messages
  contents:
  - "8.3   Messages\n   Multiple Transactions can be concatenated into a Message.\
    \  Messages\n   have a header, which includes the identity of the sender.  The\n\
    \   Message Identifier (MID) of a message is set to a provisioned name\n   (e.g.,\
    \ domain address/domain name/device name) of the entity\n   transmitting the message.\
    \  Domain name is a suggested default.  An\n   H.248.1 entity (MG/MGC) must consistently\
    \ use the same MID in all\n   messages it originates for the duration of control\
    \ association with\n   the peer (MGC/MG).\n   Every Message contains a Version\
    \ Number identifying the version of\n   the protocol the message conforms to.\
    \  Versions consist of one or two\n   digits, beginning with version 1 for the\
    \ present version of the\n   protocol.\n   The transactions in a message are treated\
    \ independently.  There is no\n   order implied; there is no application or protocol\
    \ acknowledgement of\n   a message.  A message is essentially a transport mechanism.\
    \  For\n   example, message X containing transaction requests A, B, and C may\
    \ be\n   responded to with message Y containing replies to A and C and message\n\
    \   Z containing the reply to B.  Likewise, message L containing request\n   D\
    \ and message M containing request E may be responded to with message\n   N containing\
    \ replies to both D and E.\n"
- title: 9  Transport
  contents:
  - "9  Transport\n   The transport mechanism for the protocol should allow the reliable\n\
    \   transport of transactions between a MGC and MG.  The transport shall\n   remain\
    \ independent of what particular commands are being sent and\n   shall be applicable\
    \ to all application states.  There are several\n   transports defined for the\
    \ protocol, which are defined in Annexes to\n   this RFC and other Recommendations\
    \ of the H.248\n   sub-series.  Additional Transports may be defined as additional\n\
    \   Recommendations of the H.248 sub-series.  For transport of the\n   protocol\
    \ over IP, MGCs shall implement both TCP and UDP/ALF, a MG\n   shall implement\
    \ TCP or UDP/ALF or both.\n   The MG is provisioned with a name or address (such\
    \ as DNS name or IP\n   address) of a primary and zero or more secondary MGCs\
    \ (see 7.2.8)\n   that is the address the MG uses to send messages to the MGC.\
    \  If TCP\n   or UDP is used as the protocol transport and the port to which the\n\
    \   initial ServiceChange request is to be sent is not otherwise known,\n   that\
    \ request should be sent to the default port number for the\n   protocol.  This\
    \ port number is 2944 for text-encoded operation or\n   2945 for binary-encoded\
    \ operation, for either UDP or TCP.  The MGC\n   receives the message containing\
    \ the ServiceChange request from the MG\n   and can determine the MG's address\
    \ from it.  As described in 7.2.8,\n   either the MG or the MGC may supply an\
    \ address in the\n   ServiceChangeAddress parameter to which subsequent transaction\n\
    \   requests must be addressed, but responses (including the response to\n   the\
    \ initial ServiceChange request) must always be sent back to the\n   address which\
    \ was the source of the corresponding request.  For\n   example, in IP networks,\
    \ this is the source address in the IP header\n   and the source port number in\
    \ the TCP/UDP/SCTP header.\n"
- title: 9.1   Ordering of Commands
  contents:
  - "9.1   Ordering of Commands\n   This RFC does not mandate that the underlying\
    \ transport protocol\n   guarantees the sequencing of transactions sent to an\
    \ entity.  This\n   property tends to maximize the timeliness of actions, but\
    \ it has a\n   few drawbacks.  For example:\n   -  Notify commands may be delayed\
    \ and arrive at the MGC after the\n      transmission of a new command changing\
    \ the EventsDescriptor.\n   -  If a new command is transmitted before a previous\
    \ one is\n      acknowledged, there is no guarantee that prior command will be\n\
    \      executed before the new one.\n   Media Gateway Controllers that want to\
    \ guarantee consistent operation\n   of the Media Gateway may use the following\
    \ rules.  These rules are\n   with respect to commands that are in different transactions.\n\
    \   Commands that are in the same transaction are executed in order (see\n   clause\
    \ 8).\n   1) When a Media Gateway handles several Terminations, commands\n   \
    \   pertaining to the different Terminations may be sent in parallel,\n      for\
    \ example following a model where each Termination (or group of\n      Terminations)\
    \ is controlled by its own process or its own thread.\n   2) On a Termination,\
    \ there should normally be at most one outstanding\n      command (Add or Modify\
    \ or Move), unless the outstanding commands\n      are in the same transaction.\
    \  However, a Subtract command may be\n      issued at any time.  In consequence,\
    \ a Media Gateway may sometimes\n      receive a Modify command that applies to\
    \ a previously subtracted\n      Termination.  Such commands should be ignored,\
    \ and an error code\n      should be returned.\n   3) For transports that do not\
    \ guarantee in-sequence delivery of\n      messages (i.e., UDP), there should\
    \ normally be on a given\n      Termination at most one outstanding Notify command\
    \ at any time.\n   4) In some cases, an implicitly or explicitly wildcarded Subtract\n\
    \      command that applies to a group of Terminations may step in front\n   \
    \   of a pending Add command.  The Media Gateway Controller should\n      individually\
    \ delete all Terminations for which an Add command was\n      pending at the time\
    \ of the global Subtract command.  Also, new Add\n      commands for Terminations\
    \ named by the wildcarding (or implied in\n      a Multiplex descriptor) should\
    \ not be sent until the wildcarded\n      Subtract command is acknowledged.\n\
    \   5) AuditValue and AuditCapability are not subject to any sequencing.\n   6)\
    \ ServiceChange shall always be the first command sent by a MG as\n      defined\
    \ by the restart procedure.  Any other command or response\n      must be delivered\
    \ after this ServiceChange command.\n   These rules do not affect the command\
    \ responder, which should always\n   respond to commands.\n"
- title: 9.2   Protection against Restart Avalanche
  contents:
  - "9.2   Protection against Restart Avalanche\n   In the event that a large number\
    \ of Media Gateways are powered on\n   simultaneously and they were to all initiate\
    \ a ServiceChange\n   transaction, the Media Gateway Controller would very likely\
    \ be\n   swamped, leading to message losses and network congestion during the\n\
    \   critical period of service restoration.  In order to prevent such\n   avalanches,\
    \ the following behaviour is suggested:\n   1) When a Media Gateway is powered\
    \ on, it should initiate a restart\n      timer to a random value, uniformly distributed\
    \ between 0 and a\n      maximum waiting delay (MWD).  Care should be taken to\
    \ avoid\n      synchronicity of the random number generation between multiple\n\
    \      Media Gateways that would use the same algorithm.\n   2) The Media Gateway\
    \ should then wait for either the end of this\n      timer or the detection of\
    \ a local user activity, such as for\n      example an off-hook transition on\
    \ a residential Media Gateway.\n   3) When the timer elapses, or when an activity\
    \ is detected, the Media\n      Gateway should initiate the restart procedure.\n\
    \   The restart procedure simply requires the MG to guarantee that the\n   first\
    \ message that the Media Gateway Controller sees from this MG is\n   a ServiceChange\
    \ message informing the Media Gateway Controller about\n   the restart.\n    \
    \ NOTE - The value of MWD is a configuration parameter that depends\n     on the\
    \ type of the Media Gateway.  The following reasoning may be\n     used to determine\
    \ the value of this delay on residential gateways.\n   Media Gateway Controllers\
    \ are typically dimensioned to handle the\n   peak hour traffic load, during which,\
    \ in average, 10% of the lines\n   will be busy, placing calls whose average duration\
    \ is typically 3\n   minutes.  The processing of a call typically involves 5 to\
    \ 6 Media\n   Gateway Controller transactions between each Media Gateway and the\n\
    \   Media Gateway Controller.  This simple calculation shows that the\n   Media\
    \ Gateway Controller is expected to handle 5 to 6 transactions\n   for each Termination,\
    \ every 30 minutes on average, or, to put it\n   otherwise, about one transaction\
    \ per Termination every 5 to 6 minutes\n   on average.  This suggests that a reasonable\
    \ value of MWD for a\n   residential gateway would be 10 to 12 minutes.  In the\
    \ absence of\n   explicit configuration, residential gateways should adopt a value\
    \ of\n   600 seconds for MWD.\n   The same reasoning suggests that the value of\
    \ MWD should be much\n   shorter for trunking gateways or for business gateways,\
    \ because they\n   handle a large number of Terminations, and also because the\
    \ usage\n   rate of these Terminations is much higher than 10% during the peak\n\
    \   busy hour, a typical value being 60%.  These Terminations, during the\n  \
    \ peak hour, are this expected to contribute about one transaction per\n   minute\
    \ to the Media Gateway Controller load.  A reasonable algorithm\n   is to make\
    \ the value of MWD per \"trunk\" Termination six times shorter\n   than the MWD\
    \ per residential gateway, and also inversely proportional\n   to the number of\
    \ Terminations that are being restarted.  For example\n   MWD should be set to\
    \ 2.5 seconds for a gateway that handles a T1\n   line, or to 60 milliseconds\
    \ for a gateway that handles a T3 line.\n"
- title: 10 Security Considerations
  contents:
  - "10 Security Considerations\n   This clause covers security when using the protocol\
    \ in an IP\n   environment.\n"
- title: 10.1  Protection of Protocol Connections
  contents:
  - "10.1  Protection of Protocol Connections\n   A security mechanism is clearly\
    \ needed to prevent unauthorized\n   entities from using the protocol defined\
    \ in this RFC for setting up\n   unauthorized calls or interfering with authorized\
    \ calls.  The\n   security mechanism for the protocol when transported over IP\
    \ networks\n   is IPsec [RFC 2401 to RFC 2411].\n   The AH header [RFC 2402] affords\
    \ data origin authentication,\n   connectionless integrity and optional anti-replay\
    \ protection of\n   messages passed between the MG and the MGC.  The ESP header\
    \ [RFC\n   2406] provides confidentiality of messages, if desired.  For\n   instance,\
    \ the ESP encryption service should be requested if the\n   session descriptions\
    \ are used to carry session keys, as defined in\n   SDP.\n   Implementations of\
    \ the protocol defined in this RFC employing the ESP\n   header SHALL comply with\
    \ section 5 of [RFC 2406], which defines a\n   minimum set of algorithms for integrity\
    \ checking and encryption.\n   Similarly, implementations employing the AH header\
    \ SHALL comply with\n   section 5 of [RFC 2402], which defines a minimum set of\
    \ algorithms\n   for integrity checking using manual keys.\n   Implementations\
    \ SHOULD use IKE [RFC 2409] to permit more robust\n   keying options.  Implementations\
    \ employing IKE SHOULD support\n   authentication with RSA signatures and RSA\
    \ public key encryption.\n"
- title: 10.2  Interim AH scheme
  contents:
  - "10.2  Interim AH scheme\n   Implementation of IPsec requires that the AH or ESP\
    \ header be\n   inserted immediately after the IP header.  This cannot be easily\
    \ done\n   at the application level.  Therefore, this presents a deployment\n\
    \   problem for the protocol defined in this RFC where the underlying\n   network\
    \ implementation does not support IPsec.\n   As an interim solution, an optional\
    \ AH header is defined within the\n   H.248.1 protocol header.  The header fields\
    \ are exactly those of the\n   SPI, SEQUENCE NUMBER and DATA fields as defined\
    \ in [RFC 2402].  The\n   semantics of the header fields are the same as the \"\
    transport mode\"\n   of [RFC 2402], except for the calculation of the Integrity\
    \ Check\n   Value (ICV).  In IPsec, the ICV is calculated over the entire IP\n\
    \   packet including the IP header.  This prevents spoofing of the IP\n   addresses.\
    \  To retain the same functionality, the ICV calculation\n   should be performed\
    \ across all the transactions (concatenated) in the\n   message prepended by a\
    \ synthesized IP header consisting of a 32-bit\n   source IP address, a 32-bit\
    \ destination address and a 16-bit UDP\n   destination port encoded as 20 hex\
    \ digits.  When the interim AH\n   mechanism is employed when TCP is the transport\
    \ Layer, the UDP Port\n   above becomes the TCP port, and all other operations\
    \ are the same.\n   Implementations of the H.248.1 protocol SHALL implement IPsec\
    \ where\n   the underlying operating system and the transport network supports\n\
    \   IPsec.  Implementations of the protocol using IPv4 SHALL implement\n   the\
    \ interim AH scheme.  However, this interim scheme SHALL NOT be\n   used when\
    \ the underlying network layer supports IPsec.  IPv6\n   implementations are assumed\
    \ to support IPsec and SHALL NOT use the\n   interim AH scheme.\n   All implementations\
    \ of the interim AH mechanism SHALL comply with\n   section 5 of RFC 2402 which\
    \ defines a minimum set of algorithms for\n   integrity checking using manual\
    \ keys.\n   The interim AH interim scheme does not provide protection against\n\
    \   eavesdropping, thus forbidding third parties from monitoring the\n   connections\
    \ set up by a given Termination.  Also, it does not provide\n   protection against\
    \ replay attacks.  These procedures do not\n   necessarily protect against denial\
    \ of service attacks by misbehaving\n   MGs or misbehaving MGCs.  However, they\
    \ will provide an\n   identification of these misbehaving entities, which should\
    \ then be\n   deprived of their authorization through maintenance procedures.\n"
- title: 10.3  Protection of Media Connections
  contents:
  - "10.3  Protection of Media Connections\n   The protocol allows the MGC to provide\
    \ MGs with \"session keys\" that\n   can be used to encrypt the audio messages,\
    \ protecting against\n   eavesdropping.\n   A specific problem of packet networks\
    \ is \"uncontrolled barge-in\".\n   This attack can be performed by directing\
    \ media packets to the IP\n   address and UDP port used by a connection.  If no\
    \ protection is\n   implemented, the packets must be decompressed and the signals\
    \ must be\n   played on the \"line side\".\n   A basic protection against this\
    \ attack is to only accept packets from\n   known sources, checking for example\
    \ that the IP source address and\n   UDP source port match the values announced\
    \ in the Remote descriptor.\n   This has two inconveniences: it slows down connection\
    \ establishment\n   and it can be fooled by source spoofing:\n   -  To enable\
    \ the address-based protection, the MGC must obtain the\n      remote session\
    \ description of the egress MG and pass it to the\n      ingress MG.  This requires\
    \ at least one network round trip, and\n      leaves us with a dilemma: either\
    \ allow the call to proceed without\n      waiting for the round trip to complete,\
    \ and risk for example,\n      \"clipping\" a remote announcement, or wait for\
    \ the full round trip\n      and settle for slower call-set up procedures.\n \
    \  -  Source spoofing is only effective if the attacker can obtain valid\n   \
    \   pairs of source destination addresses and ports, for example by\n      listening\
    \ to a fraction of the traffic.  To fight source spoofing,\n      one could try\
    \ to control all access points to the network.  But\n      this is in practice\
    \ very hard to achieve.\n   An alternative to checking the source address is to\
    \ encrypt and\n   authenticate the packets, using a secret key that is conveyed\
    \ during\n   the call set-up procedure.  This will not slow down the call set-up,\n\
    \   and provides strong protection against address spoofing.\n"
- title: 11 MG-MGC Control Interface
  contents:
  - "11 MG-MGC Control Interface\n   The control association between MG and MGC is\
    \ initiated at MG cold\n   start, and announced by a ServiceChange message, but\
    \ can be changed\n   by subsequent events, such as failures or manual service\
    \ events.\n   While the protocol does not have an explicit mechanism to support\n\
    \   multiple MGCs controlling a physical MG, it has been designed to\n   support\
    \ the multiple logical MG (within a single physical MG) that\n   can be associated\
    \ with different MGCs.\n"
- title: 11.1  Multiple Virtual MGs
  contents:
  - "11.1  Multiple Virtual MGs\n   A physical Media Gateway may be partitioned into\
    \ one or more Virtual\n   MGs.  A virtual MG consists of a set of statically partitioned\n\
    \   physical Terminations and/or sets of ephemeral Terminations.  A\n   physical\
    \ Termination is controlled by one MGC.  The model does not\n   require that other\
    \ resources be statically allocated, just\n   Terminations.  The mechanism for\
    \ allocating Terminations to virtual\n   MGs is a management method outside the\
    \ scope of the protocol.  Each\n   of the virtual MGs appears to the MGC as a\
    \ complete MG client.\n   A physical MG may have only one network interface, which\
    \ must be\n   shared across virtual MGs.  In such a case, the packet/cell side\n\
    \   Termination is shared.  It should be noted however, that in use, such\n  \
    \ interfaces require an ephemeral instance of the Termination to be\n   created\
    \ per flow, and thus sharing the Termination is\n   straightforward.  This mechanism\
    \ does lead to a complication, namely\n   that the MG must always know which of\
    \ its controlling MGCs should be\n   notified if an event occurs on the interface.\n\
    \   In normal operation, the Virtual MG will be instructed by the MGC to\n   create\
    \ network flows (if it is the originating side), or to expect\n   flow requests\
    \ (if it is the terminating side), and no confusion will\n   arise.  However,\
    \ if an unexpected event occurs, the Virtual MG must\n   know what to do with\
    \ respect to the physical resources it is\n   controlling.\n   If recovering from\
    \ the event requires manipulation of a physical\n   interface's state, only one\
    \ MGC should do so.  These issues are\n   resolved by allowing any of the MGCs\
    \ to create EventsDescriptors to\n   be notified of such events, but only one\
    \ MGC can have read/write\n   access to the physical interface properties; all\
    \ other MGCs have\n   read-only access.  The management mechanism is used to designate\n\
    \   which MGC has read/write capability, and is designated the Master\n   MGC.\n\
    \   Each virtual MG has its own Root Termination.  In most cases the\n   values\
    \ for the properties of the Root Termination are independently\n   settable by\
    \ each MGC.  Where there can only be one value, the\n   parameter is read-only\
    \ to all but the Master MGC.\n   ServiceChange may only be applied to a Termination\
    \ or set of\n   Terminations partitioned to the Virtual MG or created (in the\
    \ case of\n   ephemeral Terminations) by that Virtual MG.\n"
- title: 11.2  Cold start
  contents:
  - "11.2  Cold start\n   A MG is pre-provisioned by a management mechanism outside\
    \ the scope\n   of this protocol with a primary and (optionally) an ordered list\
    \ of\n   secondary MGCs.  Upon a cold start of the MG, it will issue a\n   ServiceChange\
    \ command with a \"Restart\" method, on the Root\n   Termination to its primary\
    \ MGC.  If the MGC accepts the MG, it sends\n   a Transaction Reply not including\
    \ a ServiceChangeMgcId parameter.  If\n   the MGC does not accept the MG's registration,\
    \ it sends a Transaction\n   Reply, providing the address of an alternate MGC\
    \ to be contacted by\n   including a ServiceChangeMgcId parameter.\n   If the\
    \ MG receives a Transaction Reply that includes a\n   ServiceChangeMgcId parameter,\
    \ it sends a ServiceChange to the MGC\n   specified in the ServiceChangeMgcId.\
    \  It continues this process until\n   it gets a controlling MGC to accept its\
    \ registration, or it fails to\n   get a reply.  Upon failure to obtain a reply,\
    \ either from the primary\n   MGC, or a designated successor, the MG tries its\
    \ pre-provisioned\n   secondary MGCs, in order.  If the MG is unable to establish\
    \ a control\n   relationship with any MGC, it shall wait a random amount of time\
    \ as\n   described in 9.2 and then start contacting its primary, and if\n   necessary,\
    \ its secondary MGCs again.\n   It is possible that the reply to a ServiceChange\
    \ with Restart will be\n   lost, and a command will be received by the MG prior\
    \ to the receipt\n   of the ServiceChange response.  The MG shall issue Error\
    \ 505 -\n   Command Received before a ServiceChange Reply has been received.\n"
- title: 11.3  Negotiation of protocol version
  contents:
  - "11.3  Negotiation of protocol version\n   The first ServiceChange command from\
    \ a MG shall contain the version\n   number of the protocol supported by the MG\
    \ in the\n   ServiceChangeVersion parameter.  Upon receiving such a message, if\n\
    \   the MGC supports only a lower version, then the MGC shall send a\n   ServiceChangeReply\
    \ with the lower version and thereafter all the\n   messages between MG and MGC\
    \ shall conform to the lower version of the\n   protocol.  If the MG is unable\
    \ to comply and it has established a\n   transport connection to the MGC, it should\
    \ close that connection.  In\n   any event, it should reject all subsequent requests\
    \ from the MGC with\n   error 406 - Version Not Supported.\n   If the MGC supports\
    \ a higher version than the MG but is able to\n   support the lower version proposed\
    \ by the MG, it shall send a\n   ServiceChangeReply with the lower version and\
    \ thereafter all the\n   messages between MG and MGC shall conform to the lower\
    \ version of the\n   protocol.  If the MGC is unable to comply, it shall reject\
    \ the\n   association, with error 406 - Version Not Supported.\n   Protocol version\
    \ negotiation may also occur at \"handoff\" and\n   \"failover\" ServiceChanges.\n\
    \   When extending the protocol with new versions, the following rules\n   should\
    \ be followed:\n   1) Existing protocol elements, i.e., procedures, parameters,\n\
    \      descriptor, property, values, should not be changed unless a\n      protocol\
    \ error needs to be corrected or it becomes necessary to\n      change the operation\
    \ of the service that is being supported by the\n      protocol.\n   2) The semantics\
    \ of a command, a parameter, a descriptor, a property,\n      or a value should\
    \ not be changed.\n   3) Established rules for formatting and encoding messages\
    \ and\n      parameters should not be modified.\n   4) When information elements\
    \ are found to be obsolete they can be\n      marked as not used.  However, the\
    \ identifier for that information\n      element will be marked as reserved. \
    \ In that way it can not be\n      used in future versions.\n"
- title: 11.4  Failure of a MG
  contents:
  - "11.4  Failure of a MG\n   If a MG fails, but is capable of sending a message\
    \ to the MGC, it\n   sends a ServiceChange with an appropriate method (graceful\
    \ or forced)\n   and specifies the Root TerminationID.  When it returns to service,\
    \ it\n   sends a ServiceChange with a \"Restart\" method.\n   Allowing the MGC\
    \ to send duplicate messages to both MGs accommodates\n   pairs of MGs that are\
    \ capable of redundant failover of one of the\n   MGs.  Only the Working MG shall\
    \ accept or reject transactions.  Upon\n   failover, the primary MG sends a ServiceChange\
    \ command with a\n   \"Failover\" method and a \"MG Impending Failure\" reason.\
    \  The MGC then\n   uses the secondary MG as the active MG.  When the error condition\
    \ is\n   repaired, the Working MG can send a \"ServiceChange\" with a \"Restart\"\
    \n   method.\n     Note: Redundant failover MGs require a reliable transport,\
    \ because\n     the protocol provides no means for a secondary MG running ALF\
    \ to\n     acknowledge messages sent from the MGC.\n"
- title: 11.5  Failure of an MGC
  contents:
  - "11.5  Failure of an MGC\n   If the MG detects a failure of its controlling MGC,\
    \ it attempts to\n   contact the next MGC on its pre-provisioned list.  It starts\
    \ its\n   attempts at the beginning (primary MGC), unless that was the MGC that\n\
    \   failed, in which case it starts at its first secondary MGC.  It sends\n  \
    \ a ServiceChange message with a \"Failover\" method and a \"MGC Impending\n \
    \  Failure\" reason.  If the MG is unable to establish a control\n   relationship\
    \ with any MGC, it shall wait a random amount of time as\n   described in section\
    \ 9.2 and then start again contacting its primary,\n   and (if necessary) its\
    \ secondary MGCs.  When contacting its\n   previously controlling MGC, the MG\
    \ sends the ServiceChange message\n   with \"Disconnected\" method.\n   In partial\
    \ failure, or for manual maintenance reasons, an MGC may\n   wish to direct its\
    \ controlled MGs to use a different MGC.  To do so,\n   it sends a ServiceChange\
    \ method to the MG with a \"HandOff\" method,\n   and its designated replacement\
    \ in ServiceChangeMgcId.  If \"HandOff\"\n   is supported, the MG shall send a\
    \ ServiceChange message with a\n   \"Handoff\" method and a \"MGC directed change\"\
    \ reason to the designated\n   MGC.  If it fails to get a reply from the designated\
    \ MGC, the MG\n   shall behave as if its MGC failed, and start contacting secondary\n\
    \   MGCs as specified in the previous paragraph.  If the MG is unable to\n   establish\
    \ a control relationship with any MGC, it shall wait a random\n   amount of time\
    \ as described in 9.2 and then start contacting its\n   primary, and if necessary,\
    \ its secondary MGCs again.\n   No recommendation is made on how the MGCs involved\
    \ in the Handoff\n   maintain state information; this is considered to be out\
    \ of scope of\n   this RFC.  The MGC and MG may take the following steps when\
    \ Handoff\n   occurs.  When the MGC initiates a HandOff, the handover should be\n\
    \   transparent to Operations on the Media Gateway.  Transactions can be\n   executed\
    \ in any order, and could be in progress when the\n   ServiceChange is executed.\
    \  Accordingly, commands in progress\n   continue and replies to all commands\
    \ from the original MGC must be\n   sent to the transport address from which they\
    \ were sent.  If the\n   service relationship with the sending MGC has ended,\
    \ the replies\n   should be discarded.  The MG may receive outstanding transaction\n\
    \   replies from the new MGC.  No new messages shall be sent to the new\n   MGC\
    \ until the control association is established.  Repeated\n   transaction requests\
    \ shall be directed to the new MGC.  The MG shall\n   maintain state on all Terminations\
    \ and Contexts.\n   It is possible that the MGC could be implemented in such a\
    \ way that a\n   failed MGC is replaced by a working MGC where the identity of\
    \ the new\n   MGC is the same as the failed one.  In such a case,\n   ServiceChangeMgcId\
    \ would be specified with the previous value and the\n   MG shall behave as if\
    \ the value was changed, and send a ServiceChange\n   message, as above.\n   Pairs\
    \ of MGCs that are capable of redundant failover can notify the\n   controlled\
    \ MGs of the failover by the above mechanism.\n"
- title: 12 Package definition
  contents:
  - "12 Package definition\n   The primary mechanism for extension is by means of\
    \ Packages.\n   Packages define additional Properties, Events, Signals and Statistics\n\
    \   that may occur on Terminations.\n   Packages defined by IETF will appear in\
    \ separate RFCs.\n   Packages defined by ITU-T may appear in the relevant Recommendations\n\
    \   (e.g., as Recommendations of the H.248 sub-series).\n   1) A public document\
    \ or a standard forum document, which can be\n      referenced as the document\
    \ that describes the package following\n      the guideline above, should be specified.\n\
    \   2) The document shall specify the version of the Package that it\n      describes.\n\
    \   3) The document should be available on a public web server and should\n  \
    \    have a stable URL.  The site should provide a mechanism to provide\n    \
    \  comments and appropriate responses should be returned.\n"
- title: 12.1  Guidelines for defining packages
  contents:
  - "12.1  Guidelines for defining packages\n   Packages define Properties, Events,\
    \ Signals, and Statistics.\n   Packages may also define new error codes according\
    \ to the guidelines\n   given in 13.2.  This is a matter of documentary convenience:\
    \ the\n   package documentation is submitted to IANA in support of the error\n\
    \   code registration.  If a package is modified, it is unnecessary to\n   provide\
    \ IANA with a new document reference in support of the error\n   code unless the\
    \ description of the error code itself is modified.\n   Names of all such defined\
    \ constructs shall consist of the PackageID\n   (which uniquely identifies the\
    \ package) and the ID of the item (which\n   uniquely identifies the item in that\
    \ package).  In the text encoding\n   the two shall be separated by a forward\
    \ slash (\"/\") character.\n   Example: togen/playtone is the text encoding to\
    \ refer to the play\n   tone signal in the tone generation package.\n   A Package\
    \ will contain the following sections:\n"
- title: 12.1.1   Package
  contents:
  - "12.1.1   Package\n   Overall description of the package, specifying:\n      Package\
    \ Name: only descriptive\n      PackageID: is an identifier\n      Description:\n\
    \      Version:\n         A new version of a package can only add additional Properties,\n\
    \         Events, Signals, Statistics and new possible values for an\n       \
    \  existing parameter described in the original package.  No\n         deletions\
    \ or modifications shall be allowed.  A version is an\n         integer in the\
    \ range from 1 to 99.\n      Designed to be extended only (Optional):\n      \
    \   This indicates that the package has been expressly designed to\n         be\
    \ extended by others, not to be directly referenced.  For\n         example, the\
    \ package may not have any function on its own or be\n         nonsensical on\
    \ its own.  The MG SHOULD NOT publish this\n         PackageID when reporting\
    \ packages.\n      Extends (Optional): existing package Descriptor\n         A\
    \ package may extend an existing package.  The version of the\n         original\
    \ package must be specified.  When a package extends\n         another package\
    \ it shall only add additional Properties,\n         Events, Signals, Statistics\
    \ and new possible values for an\n         existing parameter described in the\
    \ original package.  An\n         extended package shall not redefine or overload\
    \ an identifier\n         defined in the original package and packages it may\
    \ have\n         extended (multiple levels of extension).  Hence, if package B\n\
    \         version 1 extends package A version 1, version 2 of B will not\n   \
    \      be able to extend the A version 2 if A version 2 defines a name\n     \
    \    already in B version 1.\n"
- title: 12.1.2   Properties
  contents:
  - "12.1.2   Properties\n   Properties defined by the package, specifying:\n    \
    \  Property Name: only descriptive\n      PropertyID: is an identifier\n     \
    \ Description:\n      Type: One of:\n         Boolean\n         String: UTF-8\
    \ string\n         Octet String: A number of octets.  See Annex A and Annex B.3\n\
    \         for encoding\n         Integer: 4 byte signed integer\n         Double:\
    \ 8 byte signed integer\n         Character: unicode UTF-8 encoding of a single\
    \ letter.  Could be\n         more than one octet.\n         Enumeration: one\
    \ of a list of possible unique values (see 12.3)\n         Sub-list: a list of\
    \ several values from a list.  The type of\n         sub-list SHALL also be specified.\
    \  The type shall be chosen\n         from the types specified in this section\
    \ (with the exception of\n         sub-list).  For example, Type: sub-list of\
    \ enumeration.  The\n         encoding of sub-lists is specified in Annexes A\
    \ and B.3.\n      Possible values:\n         A package MUST specify either a specific\
    \ set of values or a\n         description of how values are determined.  A package\
    \ MUST also\n         specify a default value or the default behaviour when the\
    \ value\n         is omitted from its descriptor.  For example, a package may\n\
    \         specify that procedures related to the property are suspended\n    \
    \     when its value is omitted.  A default value (but not\n   procedures)\n \
    \        may be specified as provisionable.\n      Defined in:\n         Which\
    \ H.248.1 descriptor the property is defined in.\n         LocalControl is for\
    \ stream dependent properties.\n         TerminationState is for stream independent\
    \ properties.  These\n         are expected to be the most common cases, but it\
    \ is possible\n         for properties to be defined in other descriptors.\n \
    \     Characteristics: Read/Write or both, and (optionally), global:\n       \
    \  Indicates whether a property is read-only, or read-write, and\n         if\
    \ it is global.  If Global is omitted, the property is not\n         global. \
    \ If a property is declared as global, the value of the\n         property is\
    \ shared by all Terminations realizing the package.\n"
- title: 12.1.3   Events
  contents:
  - "12.1.3   Events\n   Events defined by the package, specifying:\n      Event name:\
    \ only descriptive\n      EventID: is an identifier\n      Description:\n    \
    \  EventsDescriptor Parameters:\n         Parameters used by the MGC to configure\
    \ the event, and found in\n         the EventsDescriptor.  See 12.2.\n      ObservedEventsDescriptor\
    \ Parameters:\n         Parameters returned to the MGC in Notify requests and\
    \ in\n         replies to command requests from the MGC that audit\n         ObservedEventsDescriptor,\
    \ and found in the\n         ObservedEventsDescriptor.  See 12.2.\n"
- title: 12.1.4   Signals
  contents:
  - "12.1.4   Signals\n   Signals defined by the package, specifying:\n      Signal\
    \ Name: only descriptive\n      SignalID: is an identifier.  SignalID is used\
    \ in a\n      SignalsDescriptor\n      Description\n      SignalType: one of:\n\
    \         OO (On/Off)\n         TO (TimeOut)\n         BR (Brief)\n      NOTE\
    \ - SignalType may be defined such that it is dependent on the\n      value of\
    \ one or more parameters.  The package MUST specify a\n      default signal type.\
    \  If the default type is TO, the package MUST\n      specify a default duration\
    \ which may be provisioned.  A default\n      duration is meaningless for BR.\n\
    \      Duration: in hundredths of seconds\n      Additional Parameters: see 12.2\n"
- title: 12.1.5   Statistics
  contents:
  - "12.1.5   Statistics\n   Statistics defined by the package, specifying:\n    \
    \  Statistic name: only descriptive\n      StatisticID: is an identifier\n   \
    \   StatisticID is used in a StatisticsDescriptor\n      Description:\n      Units:\
    \ unit of measure, e.g., milliseconds, packets\n"
- title: 12.1.6   Procedures
  contents:
  - "12.1.6   Procedures\n   Additional guidance on the use of the package.\n"
- title: 12.2  Guidelines to defining Parameters to Events and Signals
  contents:
  - "12.2  Guidelines to defining Parameters to Events and Signals\n   Parameter Name:\
    \ only descriptive\n   ParameterID: is an identifier.  The textual ParameterID\
    \ of parameters\n   to Events and Signals shall not start with \"EPA\" and \"\
    SPA\",\n   respectively.  The textual ParameterID shall also not be \"ST\",\n\
    \   \"Stream\", \"SY\", \"SignalType\", \"DR\", \"Duration\", \"NC\",\n   \"NotifyCompletion\"\
    , \"KA\", \"Keepactive\", \"EB\", \"Embed\", \"DM\" or\n   \"DigitMap\".\n   Type:\
    \ One of:\n      Boolean\n      String: UTF-8 octet string\n      Octet String:\
    \ A number of octets.  See Annex A and Annex B.3 for\n      encoding\n      Integer:\
    \ 4-octet signed integer\n      Double: 8-octet signed integer\n      Character:\
    \ unicode UTF-8 encoding of a single letter.  Could be\n      more than one octet.\n\
    \      Enumeration: one of a list of possible unique values (see 12.3)\n     \
    \ Sub-list: a list of several values from a list (not supported for\n      statistics).\
    \  The type of sub-list SHALL also be specified.  The\n      type shall be chosen\
    \ from the types specified in this section\n      (with the exception of sub-list).\
    \  For example, Type: sub-list of\n      enumeration.  The encoding of sub-lists\
    \ is specified in Annexes A\n      and B.3.\n   Possible values:\n      A package\
    \ MUST specify either a specific set of values or a\n      description of how\
    \ values are determined.  A package MUST also\n      specify a default value or\
    \ the default behavior when the value is\n      omitted from its descriptor. \
    \ For example, a package may specify\n      that procedures related to the parameter\
    \ are suspended when it\n      value is omitted.  A default value (but not procedures)\
    \ may be\n      specified as provisionable.\n   Description:\n"
- title: 12.3  Lists
  contents:
  - "12.3  Lists\n   Possible values for parameters include enumerations.  Enumerations\n\
    \   may be defined in a list.  It is recommended that the list be IANA\n   registered\
    \ so that packages that extend the list can be defined\n   without concern for\
    \ conflicting names.\n"
- title: 12.4  Identifiers
  contents:
  - "12.4  Identifiers\n   Identifiers in text encoding shall be strings of up to\
    \ 64 characters,\n   containing no spaces, starting with an alphabetic character\
    \ and\n   consisting of alphanumeric characters and/or digits, and possibly\n\
    \   including the special character underscore (\"_\").\n   Identifiers in binary\
    \ encoding are 2 octets long.\n   Both text and binary values shall be specified\
    \ for each identifier,\n   including identifiers used as values in enumerated\
    \ types.\n"
- title: 12.5  Package registration
  contents:
  - "12.5  Package registration\n   A package can be registered with IANA for interoperability\
    \ reasons.\n   See clause 13 for IANA Considerations.\n"
- title: 13 IANA Considerations
  contents:
  - '13 IANA Considerations

    '
- title: 13.1  Packages
  contents:
  - "13.1  Packages\n   The following considerations SHALL be met to register a package\
    \ with\n   IANA:\n   1) A unique string name, unique serial number and version\
    \ number is\n      registered for each package.  The string name is used with\
    \ text\n      encoding.  The serial number shall be used with binary encoding.\n\
    \      Serial Numbers 0x8000 to 0xFFFF are reserved for private use.\n      Serial\
    \ number 0 is reserved.\n   2) A contact name, email and postal addresses for\
    \ that contact shall\n      be specified.  The contact information shall be updated\
    \ by the\n      defining organization as necessary.\n   3) A reference to a document\
    \ that describes the package, which should\n      be public:\n      The document\
    \ shall specify the version of the Package that it\n      describes.\n      If\
    \ the document is public, it should be located on a public web\n      server and\
    \ should have a stable URL.  The site should provide a\n      mechanism to provide\
    \ comments and appropriate responses should be\n      returned.\n   4) Packages\
    \ registered by other than recognized standards bodies\n      shall have a minimum\
    \ package name length of 8 characters.\n   5) All other package names are first\
    \ come-first served if all other\n      conditions are met.\n"
- title: 13.2  Error codes
  contents:
  - "13.2  Error codes\n   The following considerations SHALL be met to register an\
    \ error code\n   with IANA:\n   1) An error number and a one-line (80-character\
    \ maximum) string is\n      registered for each error.\n   2) A complete description\
    \ of the conditions under which the error is\n      detected shall be included\
    \ in a publicly available document.  The\n      description shall be sufficiently\
    \ clear to differentiate the error\n      from all other existing error codes.\n\
    \   3) The document should be available on a public web server and should\n  \
    \    have a stable URL.\n   4) Error numbers registered by recognized standards\
    \ bodies shall have\n      3- or 4-character error numbers.\n   5) Error numbers\
    \ registered by all other organizations or individuals\n      shall have 4-character\
    \ error numbers.\n   6) An error number shall not be redefined nor modified except\
    \ by the\n      organization or individual that originally defined it, or their\n\
    \      successors or assigns.\n"
- title: 13.3  ServiceChange reasons
  contents:
  - "13.3  ServiceChange reasons\n   The following considerations SHALL be met to\
    \ register service change\n   reason with IANA:\n   1) A one-phrase, 80-character\
    \ maximum, unique reason code is\n      registered for each reason.\n   2) A complete\
    \ description of the conditions under which the reason is\n      used is detected\
    \ shall be included in a publicly available\n      document.  The description\
    \ shall be sufficiently clear to\n      differentiate the reason from all other\
    \ existing reasons.\n   3) The document should be available on a public web server\
    \ and should\n      have a stable URL.\n"
- title: ANNEX A - Binary encoding of the protocol
  contents:
  - "ANNEX A - Binary encoding of the protocol\n   This annex specifies the syntax\
    \ of messages using the notation\n   defined in Recommendation X.680; Information\
    \ technology - Abstract\n   Syntax Notation One (ASN.1): Specification of basic\
    \ notation.\n   Messages shall be encoded for transmission by applying the basic\n\
    \   encoding rules specified in Recommendation X.690, Information\n   Technology\
    \ - ASN.1 Encoding Rules: Specification of Basic Encoding\n   Rules (BER), Canonical\
    \ Encoding Rules (CER) and Distinguished\n   Encoding Rules.\n"
- title: A.1   Coding of wildcards
  contents:
  - "A.1   Coding of wildcards\n   The use of wildcards ALL and CHOOSE is allowed\
    \ in the protocol.  This\n   allows a MGC to partially specify Termination IDs\
    \ and to let the MG\n   choose from the values that conform to the partial specification.\n\
    \   Termination IDs may encode a hierarchy of names.  This hierarchy is\n   provisioned.\
    \  For instance, a TerminationID may consist of a trunk\n   group, a trunk within\
    \ the group and a circuit.  Wildcarding must be\n   possible at all levels.  The\
    \ following paragraphs explain how this is\n   achieved.\n   The ASN.1 description\
    \ uses octet strings of up to 8 octets in length\n   for Termination IDs.  This\
    \ means that Termination IDs consist of at\n   most 64 bits.  A fully specified\
    \ Termination ID may be preceded by a\n   sequence of wildcarding fields.  A wildcarding\
    \ field is one octet in\n   length.  Bit 7 (the most significant bit) of this\
    \ octet specifies\n   what type of wildcarding is invoked: if the bit value equals\
    \ 1, then\n   the ALL wildcard is used; if the bit value if 0, then the CHOOSE\n\
    \   wildcard is used.  Bit 6 of the wildcarding field specifies whether\n   the\
    \ wildcarding pertains to one level in the hierarchical naming\n   scheme (bit\
    \ value 0) or to the level of the hierarchy specified in\n   the wildcarding field\
    \ plus all lower levels (bit value 1).  Bits 0\n   through 5 of the wildcarding\
    \ field specify the bit position in the\n   Termination ID at which the wildcarding\
    \ starts.\n   We illustrate this scheme with some examples.  In these examples,\
    \ the\n   most significant bit in a string of bits appears on the left hand\n\
    \   side.\n   Assume that Termination IDs are three octets long and that each\
    \ octet\n   represents a level in a hierarchical naming scheme.  A valid\n   Termination\
    \ ID is:\n      00000001 00011110 01010101.\n   Addressing ALL names with prefix\
    \ 00000001 00011110 is done as\n   follows:\n      wildcarding field: 10000111\n\
    \      Termination ID: 00000001 00011110 xxxxxxxx.\n   The values of the bits\
    \ labeled \"x\" is irrelevant and shall be ignored\n   by the receiver.\n   Indicating\
    \ to the receiver that it must choose a name with 00011110\n   as the second octet\
    \ is done as follows:\n      wildcarding fields: 00010111 followed by 00000111\n\
    \      Termination ID: xxxxxxxx 00011110 xxxxxxxx.\n   The first wildcard field\
    \ indicates a CHOOSE wildcard for the level in\n   the naming hierarchy starting\
    \ at bit 23, the highest level in our\n   assumed naming scheme.  The second wildcard\
    \ field indicates a CHOOSE\n   wildcard for the level in the naming hierarchy\
    \ starting at bit 7, the\n   lowest level in our assumed naming scheme.\n   Finally,\
    \ a CHOOSE-wildcarded name with the highest level of the name\n   equal to 00000001\
    \ is specified as follows:\n      wildcard field: 01001111\n      Termination\
    \ ID: 0000001 xxxxxxxx xxxxxxxx .\n   Bit value 1 at bit position 6 of the first\
    \ octet of the wildcard\n   field indicates that the wildcarding pertains to the\
    \ specified level\n   in the naming hierarchy and all lower levels.\n   Context\
    \ IDs may also be wildcarded.  In the case of Context IDs,\n   however, specifying\
    \ partial names is not allowed.  Context ID 0x0\n   SHALL be used to indicate\
    \ the NULL Context, Context ID 0xFFFFFFFE\n   SHALL be used to indicate a CHOOSE\
    \ wildcard, and Context ID\n   0xFFFFFFFF SHALL be used to indicate an ALL wildcard.\n\
    \   TerminationID 0xFFFFFFFFFFFFFFFF SHALL be used to indicate the ROOT\n   Termination.\n"
- title: A.2   ASN.1 syntax specification
  contents:
  - "A.2   ASN.1 syntax specification\n   This subclause contains the ASN.1 specification\
    \ of the H.248.1\n   protocol syntax.\n     NOTE 1 - In case a transport mechanism\
    \ is used that employs\n     application level framing, the definition of Transaction\
    \ below\n     changes.  Refer to the annex or to the Recommendation of the H.248\n\
    \     sub-series defining the transport mechanism for the definition that\n  \
    \   applies in that case.\n     NOTE 2 - The ASN.1 specification below contains\
    \ a clause defining\n     TerminationIDList as a sequence of TerminationIDs. \
    \ The length of\n     this sequence SHALL be one, except possibly when used in\n\
    \     contextAuditResult.\n     NOTE 3 - This syntax specification does not enforce\
    \ all\n     restrictions on element inclusions and values.  Some additional\n\
    \     restrictions are stated in comments and other restrictions appear\n    \
    \ in the text of this RFC.  These additional restrictions\n     are part of the\
    \ protocol even though not enforced by this\n     specification.\n     NOTE 4\
    \ - The ASN.1 module in this Annex uses octet string types to\n     encode values\
    \ for property parameter, signal parameter and event\n     parameter values and\
    \ statistics.  The actual types of these values\n     vary and are specified in\
    \ Annex C or the relevant package\n     definition.\n   A value is first BER-encoded\
    \ based on its type using the table below.\n   The result of this BER-encoding\
    \ is then encoded as an ASN.1 octet\n   string, \"double wrapping\" the value.\
    \  The format specified in Annex C\n   or the package relates to BER encoding\
    \ according to the following\n   table:\n   Type Specified in Package   ASN.1\
    \ BER Type\n   String                      IA5String or UTF8String (Note 4)\n\
    \   Integer (4 Octet)           INTEGER\n   Double (8 octet signed int) INTEGER\
    \ (Note 3)\n   Character (UTF-8, Note 1)   IA5String\n   Enumeration         \
    \        ENUMERATED\n   Boolean                     BOOLEAN\n   Unsigned Integer\
    \ (Note 2)   INTEGER  (Note 3)\n   Octet (String)              OCTET STRING\n\
    \     Note 1: Can be more than one byte\n     Note 2: Unsigned integer is referenced\
    \ in Annex C\n     Note 3: The BER encoding of INTEGER does not imply the use\
    \ of 4\n     bytes.\n     Note 4: String should be encoded as IA5String when the\
    \ contents\n     are all ASCII characters, but as UTF8String if it contains any\n\
    \     Non-ASCII characters.\n   See ITU-T Rec.  X.690, 8.7, for the definition\
    \ of the encoding of an\n   octet string value.\n   MEDIA-GATEWAY-CONTROL DEFINITIONS\
    \ AUTOMATIC TAGS::=\n   BEGIN\n   MegacoMessage ::= SEQUENCE\n   {\n      authHeader\
    \     AuthenticationHeader OPTIONAL,\n      mess           Message\n   }\n   AuthenticationHeader\
    \ ::= SEQUENCE\n   {\n      secParmIndex   SecurityParmIndex,\n      seqNum  \
    \       SequenceNum,\n      ad             AuthData\n   }\n   SecurityParmIndex\
    \ ::= OCTET STRING(SIZE(4))\n   SequenceNum       ::= OCTET STRING(SIZE(4))\n\
    \   AuthData          ::= OCTET STRING (SIZE (12..32))\n   Message ::= SEQUENCE\n\
    \   {\n      version           INTEGER(0..99),\n      -- The version of the protocol\
    \ defined here is equal to 1.\n      mId               MId,  -- Name/address of\
    \ message originator\n      messageBody       CHOICE\n      {\n         messageError\
    \      ErrorDescriptor,\n         transactions      SEQUENCE OF Transaction\n\
    \      },\n      ...\n   }\n   MId ::= CHOICE\n   {\n      ip4Address        \
    \   IP4Address,\n      ip6Address           IP6Address,\n      domainName    \
    \       DomainName,\n      deviceName           PathName,\n      mtpAddress  \
    \         OCTET STRING(SIZE(2..4)),\n      -- Addressing structure of mtpAddress:\n\
    \      --     25 - 15           0\n      --        |  PC        | NI |\n     \
    \ --      24 - 14 bits    2 bits\n      -- Note: 14 bits are defined for international\
    \ use.\n      -- Two national options exist where the point code is 16 or 24\n\
    \      -- bits.\n      -- To octet align the mtpAddress, the MSBs shall be encoded\
    \ as 0s.\n             ...\n   }\n   DomainName ::= SEQUENCE\n   {\n      name\
    \        IA5String,\n      -- The name starts with an alphanumeric digit followed\
    \ by a\n      -- sequence of alphanumeric digits, hyphens and dots.  No two\n\
    \      -- dots shall occur consecutively.\n      portNumber     INTEGER(0..65535)\
    \ OPTIONAL\n   }\n   IP4Address ::= SEQUENCE\n   {\n      address        OCTET\
    \ STRING (SIZE(4)),\n      portNumber     INTEGER(0..65535) OPTIONAL\n   }\n \
    \  IP6Address ::= SEQUENCE\n   {\n      address        OCTET STRING (SIZE(16)),\n\
    \      portNumber     INTEGER(0..65535) OPTIONAL\n   }\n   PathName ::= IA5String(SIZE\
    \ (1..64))\n   -- See A.3\n   Transaction ::= CHOICE\n   {\n      transactionRequest\
    \   TransactionRequest,\n      transactionPending   TransactionPending,\n    \
    \  transactionReply     TransactionReply,\n      transactionResponseAck  TransactionResponseAck,\n\
    \          -- use of response acks is dependent on underlying transport\n    \
    \  ...\n   }\n   TransactionId ::= INTEGER(0..4294967295)  -- 32-bit unsigned\
    \ integer\n   TransactionRequest ::= SEQUENCE\n   {\n      transactionId     \
    \   TransactionId,\n      actions              SEQUENCE OF ActionRequest,\n  \
    \    ...\n   }\n   TransactionPending ::= SEQUENCE\n   {\n      transactionId\
    \        TransactionId,\n      ...\n   }\n   TransactionReply ::= SEQUENCE\n \
    \  {\n      transactionId        TransactionId,\n      immAckRequired       NULL\
    \ OPTIONAL,\n      transactionResult    CHOICE\n      {\n           transactionError\
    \   ErrorDescriptor,\n           actionReplies      SEQUENCE OF ActionReply\n\
    \      },\n      ...\n   }\n   TransactionResponseAck ::= SEQUENCE OF TransactionAck\n\
    \   TransactionAck ::= SEQUENCE\n   {\n      firstAck       TransactionId,\n \
    \     lastAck        TransactionId OPTIONAL\n   }\n   ErrorDescriptor ::= SEQUENCE\n\
    \   {\n      errorCode      ErrorCode,\n      errorText      ErrorText OPTIONAL\n\
    \   }\n   ErrorCode ::= INTEGER(0..65535)\n   -- See clause 13 for IANA Considerations\
    \ with respect to error codes\n   ErrorText ::= IA5String\n   ContextID ::= INTEGER(0..4294967295)\n\
    \   -- Context   NULL Value: 0\n   -- Context CHOOSE Value: 4294967294 (0xFFFFFFFE)\n\
    \   -- Context    ALL Value: 4294967295 (0xFFFFFFFF)\n   ActionRequest ::= SEQUENCE\n\
    \   {\n      contextId         ContextID,\n      contextRequest       ContextRequest\
    \ OPTIONAL,\n      contextAttrAuditReq  ContextAttrAuditRequest OPTIONAL,\n  \
    \    commandRequests   SEQUENCE OF CommandRequest\n   }\n   ActionReply ::= SEQUENCE\n\
    \   {\n      contextId         ContextID,\n      errorDescriptor   ErrorDescriptor\
    \ OPTIONAL,\n      contextReply      ContextRequest OPTIONAL,\n      commandReply\
    \      SEQUENCE OF CommandReply\n   }\n   ContextRequest ::= SEQUENCE\n   {\n\
    \      priority       INTEGER(0..15) OPTIONAL,\n      emergency      BOOLEAN OPTIONAL,\n\
    \      topologyReq    SEQUENCE OF TopologyRequest OPTIONAL,\n      ...\n   }\n\
    \   ContextAttrAuditRequest ::= SEQUENCE\n   {\n      topology    NULL OPTIONAL,\n\
    \      emergency   NULL OPTIONAL,\n      priority    NULL OPTIONAL,\n      ...\n\
    \   }\n   CommandRequest ::= SEQUENCE\n   {\n      command           Command,\n\
    \      optional          NULL OPTIONAL,\n      wildcardReturn    NULL OPTIONAL,\n\
    \      ...\n   }\n   Command ::= CHOICE\n   {\n      addReq               AmmRequest,\n\
    \      moveReq              AmmRequest,\n      modReq               AmmRequest,\n\
    \      -- Add, Move, Modify requests have the same parameters\n      subtractReq\
    \          SubtractRequest,\n      auditCapRequest      AuditRequest,\n      auditValueRequest\
    \    AuditRequest,\n      notifyReq            NotifyRequest,\n      serviceChangeReq\
    \     ServiceChangeRequest,\n      ...\n   }\n   CommandReply ::= CHOICE\n   {\n\
    \      addReply                AmmsReply,\n      moveReply               AmmsReply,\n\
    \      modReply                AmmsReply,\n      subtractReply           AmmsReply,\n\
    \      -- Add, Move, Modify, Subtract replies have the same parameters\n     \
    \ auditCapReply           AuditReply,\n      auditValueReply         AuditReply,\n\
    \      notifyReply             NotifyReply,\n      serviceChangeReply      ServiceChangeReply,\n\
    \      ...\n   }\n   TopologyRequest ::= SEQUENCE\n   {\n      terminationFrom\
    \         TerminationID,\n      terminationTo           TerminationID,\n     \
    \ topologyDirection       ENUMERATED\n      {\n         bothway(0),\n        \
    \ isolate(1),\n         oneway(2)\n      },\n      ...\n   }\n   AmmRequest ::=\
    \ SEQUENCE\n   {\n      terminationID        TerminationIDList,\n      descriptors\
    \          SEQUENCE OF AmmDescriptor,\n      -- At most one descriptor of each\
    \ type (see AmmDescriptor)\n      -- allowed in the sequence.\n      ...\n   }\n\
    \   AmmDescriptor ::= CHOICE\n   {\n      mediaDescriptor         MediaDescriptor,\n\
    \      modemDescriptor         ModemDescriptor,\n      muxDescriptor         \
    \  MuxDescriptor,\n      eventsDescriptor        EventsDescriptor,\n      eventBufferDescriptor\
    \   EventBufferDescriptor,\n      signalsDescriptor       SignalsDescriptor,\n\
    \      digitMapDescriptor      DigitMapDescriptor,\n      auditDescriptor    \
    \     AuditDescriptor,\n      ...\n   }\n   AmmsReply ::= SEQUENCE\n   {\n   \
    \   terminationID        TerminationIDList,\n      terminationAudit     TerminationAudit\
    \ OPTIONAL,\n      ...\n   }\n   SubtractRequest ::= SEQUENCE\n   {\n      terminationID\
    \        TerminationIDList,\n      auditDescriptor      AuditDescriptor OPTIONAL,\n\
    \      ...\n   }\n   AuditRequest ::= SEQUENCE\n   {\n      terminationID    \
    \    TerminationID,\n      auditDescriptor      AuditDescriptor,\n      ...\n\
    \   }\n   AuditReply ::= CHOICE\n   {\n      contextAuditResult   TerminationIDList,\n\
    \      error                ErrorDescriptor,\n      auditResult          AuditResult,\n\
    \      ...\n   }\n   AuditResult ::= SEQUENCE\n   {\n      terminationID     \
    \      TerminationID,\n      terminationAuditResult  TerminationAudit\n   }\n\
    \   TerminationAudit ::= SEQUENCE OF AuditReturnParameter\n   AuditReturnParameter\
    \ ::= CHOICE\n   {\n      errorDescriptor         ErrorDescriptor,\n      mediaDescriptor\
    \         MediaDescriptor,\n      modemDescriptor         ModemDescriptor,\n \
    \     muxDescriptor           MuxDescriptor,\n      eventsDescriptor        EventsDescriptor,\n\
    \      eventBufferDescriptor   EventBufferDescriptor,\n      signalsDescriptor\
    \       SignalsDescriptor,\n      digitMapDescriptor      DigitMapDescriptor,\n\
    \      observedEventsDescriptor   ObservedEventsDescriptor,\n      statisticsDescriptor\
    \    StatisticsDescriptor,\n      packagesDescriptor      PackagesDescriptor,\n\
    \      emptyDescriptors        AuditDescriptor,\n      ...\n   }\n   AuditDescriptor\
    \ ::= SEQUENCE\n   {\n      auditToken  BIT STRING\n         {\n            muxToken(0),\
    \ modemToken(1), mediaToken(2),\n            eventsToken(3), signalsToken(4),\n\
    \            digitMapToken(5), statsToken(6),\n            observedEventsToken(7),\n\
    \            packagesToken(8), eventBufferToken(9)\n         } OPTIONAL,\n   \
    \   ...\n   }\n   NotifyRequest ::= SEQUENCE\n   {\n      terminationID      \
    \        TerminationIDList,\n      observedEventsDescriptor   ObservedEventsDescriptor,\n\
    \      errorDescriptor            ErrorDescriptor OPTIONAL,\n      ...\n   }\n\
    \   NotifyReply ::= SEQUENCE\n   {\n      terminationID           TerminationIDList,\n\
    \      errorDescriptor         ErrorDescriptor OPTIONAL,\n      ...\n   }\n  \
    \ ObservedEventsDescriptor ::= SEQUENCE\n   {\n      requestId               RequestID,\n\
    \      observedEventLst        SEQUENCE OF ObservedEvent\n   }\n   ObservedEvent\
    \ ::= SEQUENCE\n   {\n      eventName            EventName,\n      streamID  \
    \           StreamID OPTIONAL,\n      eventParList         SEQUENCE OF EventParameter,\n\
    \      timeNotation         TimeNotation OPTIONAL,\n      ...\n   }\n   EventName\
    \ ::= PkgdName\n   EventParameter ::= SEQUENCE\n   {\n      eventParameterName\
    \      Name,\n      value                   Value,\n   -- For use of extraInfo\
    \ see the comment related to PropertyParm\n      extraInfo CHOICE\n      {\n \
    \        relation Relation,\n         range    BOOLEAN,\n         sublist  BOOLEAN\n\
    \      } OPTIONAL,\n      ...\n   }\n   ServiceChangeRequest ::= SEQUENCE\n  \
    \ {\n      terminationID           TerminationIDList,\n      serviceChangeParms\
    \      ServiceChangeParm,\n      ...\n   }\n   ServiceChangeReply ::= SEQUENCE\n\
    \   {\n      terminationID           TerminationIDList,\n      serviceChangeResult\
    \     ServiceChangeResult,\n      ...\n   }\n   -- For ServiceChangeResult, no\
    \ parameters are mandatory.  Hence the\n   -- distinction between ServiceChangeParm\
    \ and ServiceChangeResParm.\n   ServiceChangeResult ::= CHOICE\n   {\n      errorDescriptor\
    \            ErrorDescriptor,\n      serviceChangeResParms      ServiceChangeResParm\n\
    \   }\n   WildcardField ::= OCTET STRING(SIZE(1))\n   TerminationID ::= SEQUENCE\n\
    \   {\n      wildcard SEQUENCE OF WildcardField,\n      id    OCTET STRING(SIZE(1..8)),\n\
    \      ...\n   }\n   -- See A.1 for explanation of wildcarding mechanism.\n  \
    \ -- Termination ID 0xFFFFFFFFFFFFFFFF indicates the ROOT Termination.\n   TerminationIDList\
    \ ::= SEQUENCE OF TerminationID\n   MediaDescriptor ::= SEQUENCE\n   {\n     \
    \ termStateDescr TerminationStateDescriptor OPTIONAL,\n      streams     CHOICE\n\
    \      {\n         oneStream      StreamParms,\n         multiStream    SEQUENCE\
    \ OF StreamDescriptor\n      } OPTIONAL,\n      ...\n   }\n   StreamDescriptor\
    \ ::= SEQUENCE\n   {\n      streamID          StreamID,\n      streamParms   \
    \    StreamParms\n   }\n   StreamParms ::= SEQUENCE\n   {\n      localControlDescriptor\
    \     LocalControlDescriptor OPTIONAL,\n      localDescriptor            LocalRemoteDescriptor\
    \ OPTIONAL,\n      remoteDescriptor           LocalRemoteDescriptor OPTIONAL,\n\
    \      ...\n   }\n   LocalControlDescriptor ::= SEQUENCE\n   {\n      streamMode\
    \        StreamMode OPTIONAL,\n      reserveValue      BOOLEAN OPTIONAL,\n   \
    \   reserveGroup      BOOLEAN OPTIONAL,\n      propertyParms     SEQUENCE OF PropertyParm,\n\
    \      ...\n   }\n   StreamMode ::= ENUMERATED\n   {\n      sendOnly(0),\n   \
    \   recvOnly(1),\n      sendRecv(2),\n      inactive(3),\n      loopBack(4),\n\
    \         ...\n   }\n   -- In PropertyParm, value is a SEQUENCE OF octet string.\
    \  When sent\n   -- by an MGC the interpretation is as follows:\n   -- empty sequence\
    \ means CHOOSE\n   -- one element sequence specifies value\n   -- If the sublist\
    \ field is not selected, a longer sequence means\n   -- \"choose one of the values\"\
    \ (i.e., value1 OR value2 OR ...)\n   -- If the sublist field is selected,\n \
    \  -- a sequence with more than one element encodes the value of a\n   -- list-valued\
    \ property (i.e., value1 AND value2 AND ...).\n   -- The relation field may only\
    \ be selected if the value sequence\n   -- has length 1.  It indicates that the\
    \ MG has to choose a value\n   -- for the property.  E.g., x > 3 (using the greaterThan\n\
    \   -- value for relation) instructs the MG to choose any value larger\n   --\
    \ than 3 for property x.\n   -- The range field may only be selected if the value\
    \ sequence\n   -- has length 2.  It indicates that the MG has to choose a value\n\
    \   -- in the range between the first octet in the value sequence and\n   -- the\
    \ trailing octet in the value sequence, including the\n   -- boundary values.\n\
    \   -- When sent by the MG, only responses to an AuditCapability request\n   --\
    \ may contain multiple values, a range, or a relation field.\n   PropertyParm\
    \ ::= SEQUENCE\n   {\n      name        PkgdName,\n      value       SEQUENCE\
    \ OF OCTET STRING,\n      extraInfo   CHOICE\n      {\n         relation    Relation,\n\
    \         range       BOOLEAN,\n         sublist     BOOLEAN\n      } OPTIONAL,\n\
    \      ...\n   }\n   Name ::= OCTET STRING(SIZE(2))\n   PkgdName ::= OCTET STRING(SIZE(4))\n\
    \   -- represents Package Name (2 octets) plus Property, Event,\n   -- Signal\
    \ Names or Statistics ID. (2 octets)\n   -- To wildcard a package use 0xFFFF for\
    \ first two octets, choose\n   -- is not allowed.  To reference native property\
    \ tag specified in\n   -- Annex C, use 0x0000 as first two octets.\n   -- To wildcard\
    \ a Property, Event, Signal, or Statistics ID, use\n   -- 0xFFFF for last two\
    \ octets, choose is not allowed.\n   -- Wildcarding of Package Name is permitted\
    \ only if Property,\n   -- Event, Signal, or Statistics ID are\n   -- also wildcarded.\n\
    \   Relation ::= ENUMERATED\n   {\n      greaterThan(0),\n      smallerThan(1),\n\
    \      unequalTo(2),\n      ...\n   }\n   LocalRemoteDescriptor ::= SEQUENCE\n\
    \   {\n      propGrps SEQUENCE OF PropertyGroup,\n      ...\n   }\n   PropertyGroup\
    \ ::= SEQUENCE OF PropertyParm\n   TerminationStateDescriptor ::= SEQUENCE\n \
    \  {\n      propertyParms        SEQUENCE OF PropertyParm,\n      eventBufferControl\
    \   EventBufferControl OPTIONAL,\n      serviceState         ServiceState OPTIONAL,\n\
    \      ...\n   }\n   EventBufferControl ::= ENUMERATED\n   {\n      off(0),\n\
    \      lockStep(1),\n      ...\n   }\n   ServiceState ::= ENUMERATED\n   {\n \
    \     test(0),\n      outOfSvc(1),\n      inSvc(2),\n         ...\n   }\n   MuxDescriptor\
    \   ::= SEQUENCE\n   {\n      muxType           MuxType,\n      termList     \
    \     SEQUENCE OF TerminationID,\n      nonStandardData   NonStandardData OPTIONAL,\n\
    \      ...\n   }\n   MuxType ::= ENUMERATED\n   {\n      h221(0),\n      h223(1),\n\
    \      h226(2),\n      v76(3),\n      ...\n   }\n   StreamID ::= INTEGER(0..65535)\
    \   -- 16-bit unsigned integer\n   EventsDescriptor ::= SEQUENCE\n   {\n     \
    \ requestID      RequestID OPTIONAL,\n                  -- RequestID must be present\
    \ if eventList\n                  -- is non empty\n      eventList      SEQUENCE\
    \ OF RequestedEvent,\n      ...\n   }\n   RequestedEvent ::= SEQUENCE\n   {\n\
    \      pkgdName       PkgdName,\n      streamID       StreamID OPTIONAL,\n   \
    \   eventAction    RequestedActions OPTIONAL,\n      evParList      SEQUENCE OF\
    \ EventParameter,\n      ...\n   }\n   RequestedActions ::= SEQUENCE\n   {\n \
    \     keepActive        BOOLEAN OPTIONAL,\n      eventDM           EventDM OPTIONAL,\n\
    \      secondEvent          SecondEventsDescriptor OPTIONAL,\n      signalsDescriptor\
    \    SignalsDescriptor OPTIONAL,\n      ...\n   }\n   EventDM ::= CHOICE\n   {\
    \  digitMapName   DigitMapName,\n      digitMapValue  DigitMapValue\n   }\n  \
    \ SecondEventsDescriptor ::= SEQUENCE\n   {\n      requestID         RequestID\
    \ OPTIONAL,\n      eventList         SEQUENCE OF SecondRequestedEvent,\n     \
    \ ...\n   }\n   SecondRequestedEvent ::= SEQUENCE\n   {\n      pkgdName      \
    \    PkgdName,\n      streamID          StreamID OPTIONAL,\n      eventAction\
    \       SecondRequestedActions OPTIONAL,\n      evParList         SEQUENCE OF\
    \ EventParameter,\n      ...\n   }\n   SecondRequestedActions ::= SEQUENCE\n \
    \  {\n      keepActive           BOOLEAN OPTIONAL,\n      eventDM            \
    \  EventDM OPTIONAL,\n      signalsDescriptor    SignalsDescriptor OPTIONAL,\n\
    \      ...\n   }\n   EventBufferDescriptor ::= SEQUENCE OF EventSpec\n   EventSpec\
    \ ::= SEQUENCE\n   {\n      eventName      EventName,\n      streamID       StreamID\
    \ OPTIONAL,\n      eventParList   SEQUENCE OF EventParameter,\n      ...\n   }\n\
    \   SignalsDescriptor ::= SEQUENCE OF SignalRequest\n   SignalRequest ::=CHOICE\n\
    \   {\n      signal         Signal,\n      seqSigList     SeqSigList,\n      ...\n\
    \   }\n   SeqSigList ::= SEQUENCE\n   {\n      id                INTEGER(0..65535),\n\
    \      signalList        SEQUENCE OF Signal\n   }\n   Signal ::= SEQUENCE\n  \
    \ {\n      signalName        SignalName,\n      streamID          StreamID OPTIONAL,\n\
    \      sigType           SignalType OPTIONAL,\n      duration          INTEGER\
    \ (0..65535) OPTIONAL,\n      notifyCompletion  NotifyCompletion OPTIONAL,\n \
    \     keepActive        BOOLEAN OPTIONAL,\n      sigParList        SEQUENCE OF\
    \ SigParameter,\n      ...\n   }\n   SignalType ::= ENUMERATED\n   {\n      brief(0),\n\
    \      onOff(1),\n      timeOut(2),\n      ...\n   }\n   SignalName ::= PkgdName\n\
    \   NotifyCompletion ::= BIT STRING\n   {\n      onTimeOut(0), onInterruptByEvent(1),\n\
    \      onInterruptByNewSignalDescr(2), otherReason(3)\n   }\n   SigParameter ::=\
    \ SEQUENCE\n   {\n      sigParameterName     Name,\n      value              \
    \  Value,\n      -- For use of extraInfo see the comment related to PropertyParm\n\
    \      extraInfo CHOICE\n      {\n         relation Relation,\n         range\
    \    BOOLEAN,\n         sublist  BOOLEAN\n      } OPTIONAL,\n      ...\n   }\n\
    \   -- For an AuditCapReply with all events, the RequestID SHALL be ALL.\n   --\
    \ ALL is represented by 0xffffffff.\n   RequestID ::= INTEGER(0..4294967295) \
    \  -- 32-bit unsigned integer\n   ModemDescriptor ::= SEQUENCE\n   {\n      mtl\
    \               SEQUENCE OF ModemType,\n      mpl               SEQUENCE OF PropertyParm,\n\
    \      nonStandardData   NonStandardData OPTIONAL\n   }\n   ModemType ::= ENUMERATED\n\
    \   {\n      v18(0),\n      v22(1),\n      v22bis(2),\n      v32(3),\n      v32bis(4),\n\
    \      v34(5),\n      v90(6),\n      v91(7),\n      synchISDN(8),\n      ...\n\
    \   }\n   DigitMapDescriptor ::= SEQUENCE\n   {\n      digitMapName   DigitMapName\
    \   OPTIONAL,\n      digitMapValue  DigitMapValue  OPTIONAL\n   }\n   DigitMapName\
    \ ::= Name\n   DigitMapValue ::= SEQUENCE\n   {\n      startTimer     INTEGER(0..99)\
    \ OPTIONAL,\n      shortTimer     INTEGER(0..99) OPTIONAL,\n      longTimer  \
    \    INTEGER(0..99) OPTIONAL,\n      digitMapBody      IA5String,\n   -- Units\
    \ are seconds for start, short and long timers, and\n   -- hundreds of milliseconds\
    \ for duration timer.  Thus start,\n   -- short, and long range from 1 to 99 seconds\
    \ and duration\n   -- from 100 ms to 9.9 s\n      -- See A.3 for explanation of\
    \ digit map syntax\n      ...\n   }\n   ServiceChangeParm ::= SEQUENCE\n   {\n\
    \      serviceChangeMethod     ServiceChangeMethod,\n      serviceChangeAddress\
    \    ServiceChangeAddress OPTIONAL,\n      serviceChangeVersion    INTEGER(0..99)\
    \ OPTIONAL,\n      serviceChangeProfile    ServiceChangeProfile OPTIONAL,\n  \
    \    serviceChangeReason     Value,\n   -- A serviceChangeReason consists of a\
    \ numeric reason code\n   -- and an optional text description.\n   -- The serviceChangeReason\
    \ SHALL be a string consisting of\n   -- a decimal reason code, optionally followed\
    \ by a single\n   -- space character and a textual description string.\n   --\
    \ This string is first BER-encoded as an IA5String.\n   -- The result of this\
    \ BER-encoding is then encoded as\n   -- an ASN.1 OCTET STRING type, \"double\
    \ wrapping\" the\n   -- value as was done for package elements.\n      serviceChangeDelay\
    \      INTEGER(0..4294967295) OPTIONAL,\n                                    \
    \    -- 32-bit unsigned integer\n      serviceChangeMgcId      MId OPTIONAL,\n\
    \      timeStamp               TimeNotation OPTIONAL,\n      nonStandardData \
    \        NonStandardData OPTIONAL,\n      ...\n   }\n   ServiceChangeAddress ::=\
    \ CHOICE\n   {\n      portNumber        INTEGER(0..65535),    -- TCP/UDP port\
    \ number\n      ip4Address        IP4Address,\n      ip6Address        IP6Address,\n\
    \      domainName        DomainName,\n      deviceName        PathName,\n    \
    \  mtpAddress        OCTET STRING(SIZE(2..4)),\n      ...\n   }\n   ServiceChangeResParm\
    \ ::= SEQUENCE\n   {\n      serviceChangeMgcId      MId OPTIONAL,\n      serviceChangeAddress\
    \    ServiceChangeAddress OPTIONAL,\n      serviceChangeVersion    INTEGER(0..99)\
    \ OPTIONAL,\n      serviceChangeProfile    ServiceChangeProfile OPTIONAL,\n  \
    \    timestamp               TimeNotation OPTIONAL,\n      ...\n   }\n   ServiceChangeMethod\
    \ ::= ENUMERATED\n   {\n      failover(0),\n      forced(1),\n      graceful(2),\n\
    \      restart(3),\n      disconnected(4),\n      handOff(5),\n      ...\n   }\n\
    \   ServiceChangeProfile ::= SEQUENCE\n   {\n      profileName    IA5String(SIZE\
    \ (1..67))\n      -- 64 characters for name, 1 for \"/\", 2 for version to match\
    \ ABNF\n   }\n   PackagesDescriptor ::= SEQUENCE OF PackagesItem\n   PackagesItem\
    \ ::= SEQUENCE\n   {\n      packageName       Name,\n      packageVersion    INTEGER(0..99),\n\
    \      ...\n   }\n   StatisticsDescriptor ::= SEQUENCE OF StatisticsParameter\n\
    \   StatisticsParameter ::= SEQUENCE\n   {\n      statName       PkgdName,\n \
    \     statValue      Value OPTIONAL\n   }\n   NonStandardData ::= SEQUENCE\n \
    \  {\n      nonStandardIdentifier   NonStandardIdentifier,\n      data       \
    \             OCTET STRING\n   }\n   NonStandardIdentifier ::= CHOICE\n   {\n\
    \      object            OBJECT IDENTIFIER,\n      h221NonStandard   H221NonStandard,\n\
    \      experimental      IA5String(SIZE(8)),\n          -- first two characters\
    \ should be \"X-\" or \"X+\"\n      ...\n   }\n   H221NonStandard ::= SEQUENCE\n\
    \   {  t35CountryCode1   INTEGER(0..255),\n      t35CountryCode2   INTEGER(0..255),\
    \      -- country, as per T.35\n      t35Extension      INTEGER(0..255),     \
    \ -- assigned nationally\n      manufacturerCode     INTEGER(0..65535), -- assigned\
    \ nationally\n      ...\n   }\n   TimeNotation ::= SEQUENCE\n   {\n      date\
    \     IA5String(SIZE(8)),  -- yyyymmdd format\n      time     IA5String(SIZE(8))\
    \   -- hhmmssss format\n      -- per ISO 8601:1988\n   }\n   Value ::= SEQUENCE\
    \ OF OCTET STRING\n   END\n"
- title: A.3   Digit maps and path names
  contents:
  - "A.3   Digit maps and path names\n   From a syntactic viewpoint, digit maps are\
    \ strings with syntactic\n   restrictions imposed upon them.  The syntax of valid\
    \ digit maps is\n   specified in ABNF [RFC 2234].  The syntax for digit maps presented\
    \ in\n   this subclause is for illustrative purposes only.  The definition of\n\
    \   digitMap in Annex B takes precedence in the case of differences\n   between\
    \ the two.\n     digitMap = (digitString / LWSP \"(\" LWSP digitStringList LWSP\
    \ \")\"\n               LWSP)\n     digitStringList = digitString *( LWSP \"|\"\
    \ LWSP digitString )\n     digitString = 1*(digitStringElement)\n     digitStringElement\
    \ = digitPosition [DOT]\n     digitPosition = digitMapLetter / digitMapRange\n\
    \     digitMapRange = (\"x\" / (LWSP \"[\" LWSP digitLetter LWSP \"]\" LWSP))\n\
    \     digitLetter = *((DIGIT \"-\" DIGIT) /digitMapLetter)\n     digitMapLetter\
    \ = DIGIT           ;digits 0-9\n             / %x41-4B / %x61-6B    ;a-k and\
    \ A-K\n             / \"L\"/ \"S\"       ;Inter-event timers\n               \
    \                  ;(long, short)\n             / \"Z\"            ;Long duration\
    \ event\n     DOT = %x2E ; \".\"\n     LWSP = *(WSP / COMMENT / EOL)\n     WSP\
    \ = SP / HTAB\n     COMMENT = \";\" *(SafeChar / RestChar / WSP) EOL\n     EOL\
    \ = (CR [LF]) / LF\n     SP = %x20\n     HTAB = %x09\n     CR = %x0D\n     LF\
    \ = %x0A\n     SafeChar = DIGIT / ALPHA / \"+\" / \"-\" / \"&\" / \"!\" / \"_\"\
    \ / \"/\" /\n         \"'\" / \"?\" / \"@\" / \"^\" / \"`\" / \"~\" / \"*\" /\
    \ \"$\" / \"\\\" /\n         \"(\" / \")\" / \"%\" / \".\"\n     RestChar = \"\
    ;\" / \"[\" / \"]\" / \"{\" / \"}\" / \":\" / \",\" / \"#\" /\n         \"<\"\
    \ / \">\" / \"=\" / %x22\n     DIGIT = %x30-39       ; digits 0 through 9\n  \
    \   ALPHA = %x41-5A / %x61-7A; A-Z, a-z\n   A path name is also a string with\
    \ syntactic restrictions imposed upon\n   it.  The ABNF production defining it\
    \ is copied from Annex B.\n     ; Total length of pathNAME must not exceed 64\
    \ chars.\n     pathNAME = [\"*\"] NAME *(\"/\" / \"*\"/ ALPHA / DIGIT /\"_\" /\
    \ \"$\" )\n                            [\"@\" pathDomainName ]\n     ; ABNF allows\
    \ two or more consecutive \".\" although it is\n     ; meaningless in a path domain\
    \ name.\n     pathDomainName       = (ALPHA / DIGIT / \"*\" )\n              \
    \              *63(ALPHA / DIGIT / \"-\"\n     NAME = ALPHA *63(ALPHA / DIGIT\
    \ / \"_\" )\n"
- title: ANNEX B - Text encoding of the protocol
  contents:
  - 'ANNEX B - Text encoding of the protocol

    '
- title: B.1   Coding of wildcards
  contents:
  - "B.1   Coding of wildcards\n   In a text encoding of the protocol, while TerminationIDs\
    \ are\n   arbitrary, by judicious choice of names, the wildcard character, \"\
    *\"\n   may be made more useful.  When the wildcard character is encountered,\n\
    \   it will \"match\" all TerminationIDs having the same previous and\n   following\
    \ characters (if appropriate).  For example, if there were\n   TerminationIDs\
    \ of R13/3/1, R13/3/2 and R13/3/3, the TerminationID\n   R13/3/* would match all\
    \ of them.  There are some circumstances where\n   ALL Terminations must be referred\
    \ to.  The TerminationID \"*\"\n   suffices, and is referred to as ALL.  The CHOOSE\
    \ TerminationID \"$\"\n   may be used to signal to the MG that it has to create\
    \ an ephemeral\n   Termination or select an idle physical Termination.\n"
- title: B.2   ABNF specification
  contents:
  - "B.2   ABNF specification\n   The protocol syntax is presented in ABNF according\
    \ to RFC 2234.\n      Note 1 - This syntax specification does not enforce all\n\
    \      restrictions on element inclusions and values.  Some additional\n     \
    \ restrictions are stated in comments and other restrictions appear\n      in\
    \ the text of this RFC.  These additional restrictions are part\n      of the\
    \ protocol even though not enforced by this specification.\n      Note 2 - The\
    \ syntax is context-dependent.  For example, \"Add\" can\n      be the AddToken\
    \ or a NAME depending on the context in which it\n      occurs.\n   Everything\
    \ in the ABNF and text encoding is case insensitive.  This\n   includes TerminationIDs,\
    \ digitmap Ids etc.  SDP is case sensitive as\n   per RFC 2327.\n   ; NOTE --\
    \ The ABNF in this section uses the VALUE construct (or lists\n   ; of VALUE constructs)\
    \ to encode various package element values\n   ; (properties, signal parameters,\
    \ etc.).  The types of these values\n   ; vary and are specified the relevant\
    \ package definition.  Several\n   ; such types are described in section 12.2.\n\
    \   ;\n   ; The ABNF specification for VALUE allows a quotedString form or a\n\
    \   ; collection of SafeChars.  The encoding of package element values\n   ; into\
    \ ABNF VALUES is specified below.  If a type's encoding allows\n   ; characters\
    \ other than SafeChars, the quotedString form MUST be used\n   ; for all values\
    \ of that type, even for specific values that consist\n   ; only of SafeChars.\n\
    \   ;\n   ; String:  A string MUST use the quotedString form of VALUE and can\n\
    \   ; contain anything allowable in the quotedString form.\n   ;\n   ; Integer,\
    \ Double, and Unsigned Integer:  Decimal values can be\n   ; encoded using characters\
    \ 0-9.  Hexadecimal values must be prefixed\n   ; with '0x' and can use characters\
    \ 0-9,a-f,A-F.  An octal format is\n   ; not supported.  Negative integers start\
    \ with '-' and MUST be\n   ; Decimal.  The SafeChar form of VALUE MUST be used.\n\
    \   ;\n   ; Character:  A UTF-8 encoding of a single letter surrounded by\n  \
    \ ; double quotes.\n   ;\n   ; Enumeration:  An enumeration MUST use the SafeChar\
    \ form of VALUE\n   ; and can contain anything allowable in the SafeChar form.\n\
    \   ;\n   ; Boolean:  Boolean values are encoded as \"on\" and \"off\" and are\n\
    \   ; case insensitive.  The SafeChar form of VALUE MUST be used.\n   ;\n   ;\
    \ Future types:  Any defined types MUST fit within\n   ; the ABNF specification\
    \ of VALUE.  Specifically, if a type's\n   ; encoding allows characters other\
    \ than SafeChars, the quotedString\n   ; form MUST be used for all values of that\
    \ type, even for specific\n   ; values that consist only of SafeChars.\n   ;\n\
    \   ; Note that there is no way to use the double quote character within\n   ;\
    \ a value.\n   ;\n   ; Note that SDP disallows whitespace at the beginning of\
    \ a line,\n   ; Megaco ABNF allows whitespace before the beginning of the SDP\
    \ in\n   ; the Local/Remote descriptor.  Parsers should accept whitespace\n  \
    \ ; between the LBRKT following the Local/Remote token and the\n   ; beginning\
    \ of the SDP.\n   megacoMessage        = LWSP [authenticationHeader SEP ] message\n\
    \   authenticationHeader = AuthToken EQUAL SecurityParmIndex COLON\n         \
    \                 SequenceNum COLON AuthData\n   SecurityParmIndex    = \"0x\"\
    \ 8(HEXDIG)\n   SequenceNum          = \"0x\" 8(HEXDIG)\n   AuthData         \
    \    = \"0x\" 24*64(HEXDIG)\n   message            = MegacopToken SLASH Version\
    \ SEP mId SEP\n   messageBody\n   ; The version of the protocol defined here is\
    \ equal to 1.\n   messageBody          = ( errorDescriptor / transactionList )\n\
    \   transactionList      = 1*( transactionRequest / transactionReply /\n     \
    \                     transactionPending / transactionResponseAck )\n   ;Use of\
    \ response acks is dependent on underlying transport\n   transactionPending  \
    \ = PendingToken EQUAL TransactionID LBRKT\n   RBRKT\n   transactionResponseAck\
    \ = ResponseAckToken LBRKT transactionAck\n                  *(COMMA transactionAck)\
    \ RBRKT\n   transactionAck = transactionID / (transactionID \"-\" transactionID)\n\
    \   transactionRequest   = TransToken EQUAL TransactionID LBRKT\n            \
    \              actionRequest *(COMMA actionRequest) RBRKT\n   actionRequest  \
    \      = CtxToken EQUAL ContextID LBRKT ((\n                          contextRequest\
    \ [COMMA  commandRequestList])\n                          / commandRequestList)\
    \ RBRKT\n   contextRequest    = ((contextProperties [COMMA contextAudit])\n  \
    \             / contextAudit)\n   contextProperties    = contextProperty *(COMMA\
    \ contextProperty)\n   ; at-most-once\n   contextProperty    = (topologyDescriptor\
    \ / priority / EmergencyToken)\n   contextAudit   = ContextAuditToken LBRKT contextAuditProperties\n\
    \                         *(COMMA contextAuditProperties) RBRKT\n   ; at-most-once\n\
    \   contextAuditProperties = ( TopologyToken / EmergencyToken /\n            \
    \                  PriorityToken )\n   ; \"O-\" indicates an optional command\n\
    \   ; \"W-\" indicates a wildcarded response to a command\n   commandRequestList\
    \ = [\"O-\"] [\"W-\"] commandRequest\n                        *(COMMA [\"O-\"\
    ] [\"W-\"]commandRequest)\n   commandRequest      = ( ammRequest / subtractRequest\
    \ / auditRequest /\n                           notifyRequest / serviceChangeRequest)\n\
    \   transactionReply     = ReplyToken EQUAL TransactionID LBRKT\n            \
    \         [ ImmAckRequiredToken COMMA]\n                   ( errorDescriptor /\
    \ actionReplyList ) RBRKT\n   actionReplyList      = actionReply *(COMMA actionReply\
    \ )\n   actionReply          = CtxToken EQUAL ContextID LBRKT\n              \
    \       ( errorDescriptor / commandReply ) /\n            (commandReply COMMA\
    \ errorDescriptor) ) RBRKT\n   commandReply      = (( contextProperties [COMMA\
    \ commandReplyList] ) /\n                           commandReplyList )\n   commandReplyList\
    \     = commandReplys *(COMMA commandReplys )\n   commandReplys        = (serviceChangeReply\
    \ / auditReply / ammsReply /\n                           notifyReply )\n   ;Add\
    \ Move and Modify have the same request parameters\n   ammRequest           =\
    \ (AddToken / MoveToken / ModifyToken ) EQUAL\n                          TerminationID\
    \ [LBRKT ammParameter *(COMMA\n                          ammParameter) RBRKT]\n\
    \   ;at-most-once\n   ammParameter         = (mediaDescriptor / modemDescriptor\
    \ /\n                           muxDescriptor / eventsDescriptor /\n         \
    \                  signalsDescriptor / digitMapDescriptor /\n                \
    \           eventBufferDescriptor / auditDescriptor)\n   ammsReply           \
    \ = (AddToken / MoveToken / ModifyToken /\n                           SubtractToken\
    \ ) EQUAL TerminationID [ LBRKT\n                           terminationAudit RBRKT\
    \ ]\n   subtractRequest      =  SubtractToken EQUAL TerminationID\n          \
    \                 [ LBRKT auditDescriptor RBRKT]\n   auditRequest         =  (AuditValueToken\
    \ / AuditCapToken ) EQUAL\n                           TerminationID LBRKT auditDescriptor\
    \ RBRKT\n   auditReply           = (AuditValueToken / AuditCapToken )\n      \
    \                    ( contextTerminationAudit  / auditOther)\n   auditOther \
    \          = EQUAL TerminationID [LBRKT\n                          terminationAudit\
    \ RBRKT]\n   terminationAudit = auditReturnParameter *(COMMA auditReturnParameter)\n\
    \   contextTerminationAudit = EQUAL CtxToken ( terminationIDList /\n         \
    \                 LBRKT errorDescriptor RBRKT )\n   auditReturnParameter = (mediaDescriptor\
    \ / modemDescriptor /\n                           muxDescriptor / eventsDescriptor\
    \ /\n                           signalsDescriptor / digitMapDescriptor /\n   \
    \                   observedEventsDescriptor / eventBufferDescriptor /\n     \
    \                      statisticsDescriptor / packagesDescriptor /\n         \
    \                   errorDescriptor / auditItem)\n   auditDescriptor      = AuditToken\
    \ LBRKT [ auditItem\n                          *(COMMA auditItem) ] RBRKT\n  \
    \ notifyRequest        = NotifyToken EQUAL TerminationID\n                   \
    \       LBRKT ( observedEventsDescriptor\n                                [ COMMA\
    \ errorDescriptor ] ) RBRKT\n   notifyReply          = NotifyToken EQUAL TerminationID\n\
    \                          [ LBRKT errorDescriptor RBRKT ]\n   serviceChangeRequest\
    \ = ServiceChangeToken EQUAL TerminationID\n                          LBRKT serviceChangeDescriptor\
    \ RBRKT\n   serviceChangeReply   = ServiceChangeToken EQUAL TerminationID\n  \
    \                        [LBRKT (errorDescriptor /\n                         \
    \ serviceChangeReplyDescriptor) RBRKT]\n   errorDescriptor   = ErrorToken EQUAL\
    \ ErrorCode\n                       LBRKT [quotedString] RBRKT\n   ErrorCode \
    \           = 1*4(DIGIT) ; could be extended\n   TransactionID        = UINT32\n\
    \   mId                  = (( domainAddress / domainName )\n                 \
    \         [\":\" portNumber]) / mtpAddress / deviceName\n   ; ABNF allows two\
    \ or more consecutive \".\" although it is meaningless\n   ; in a domain name.\n\
    \   domainName           = \"<\" (ALPHA / DIGIT) *63(ALPHA / DIGIT / \"-\" /\n\
    \                          \".\") \">\"\n   deviceName           = pathNAME\n\
    \   ;The values 0x0, 0xFFFFFFFE and 0xFFFFFFFF are reserved.\n   ContextID   \
    \         = (UINT32 / \"*\" / \"-\" / \"$\")\n   domainAddress        = \"[\"\
    \ (IPv4address / IPv6address) \"]\"\n   ;RFC2373 contains the definition of IP6Addresses.\n\
    \   IPv6address          = hexpart [ \":\" IPv4address ]\n   IPv4address     \
    \     = V4hex DOT V4hex DOT V4hex DOT V4hex\n   V4hex                = 1*3(DIGIT)\
    \ ; \"0\"..\"255\"\n   ; this production, while occurring in RFC2373, is not referenced\n\
    \   ; IPv6prefix           = hexpart SLASH 1*2DIGIT\n   hexpart           = hexseq\
    \ \"::\" [ hexseq ] / \"::\" [ hexseq ] / hexseq\n   hexseq               = hex4\
    \ *( \":\" hex4)\n   hex4                 = 1*4HEXDIG\n   portNumber         \
    \  = UINT16\n   ; Addressing structure of mtpAddress:\n   ; 25 - 15          \
    \  0\n   ;    |  PC        | NI |\n   ;    24 - 14 bits    2 bits\n   ; Note:\
    \ 14 bits are defined for international use.\n   ; Two national options exist\
    \ where the point code is 16 or 24 bits.\n   ; To octet align the mtpAddress the\
    \ MSBs shall be encoded as 0s.\n   ; An octet shall be represented by 2 hex digits.\n\
    \   mtpAddress           = MTPToken LBRKT 4*8 (HEXDIG) RBRKT\n   terminationIDList\
    \  = LBRKT TerminationID *(COMMA TerminationID) RBRKT\n   ; Total length of pathNAME\
    \ must not exceed 64 chars.\n   pathNAME      = [\"*\"] NAME *(\"/\" / \"*\"/\
    \ ALPHA / DIGIT /\"_\" / \"$\" )\n                          [\"@\" pathDomainName\
    \ ]\n   ; ABNF allows two or more consecutive \".\" although it is meaningless\n\
    \   ; in a path domain name.\n   pathDomainName       = (ALPHA / DIGIT / \"*\"\
    \ )\n                          *63(ALPHA / DIGIT / \"-\" / \"*\" / \".\")\n  \
    \ TerminationID        = \"ROOT\" / pathNAME / \"$\" / \"*\"\n   mediaDescriptor\
    \ = MediaToken LBRKT mediaParm *(COMMA mediaParm) RBRKT\n   ; at-most one terminationStateDescriptor\n\
    \   ; and either streamParm(s) or streamDescriptor(s) but not both\n   mediaParm\
    \            = (streamParm / streamDescriptor /\n                           terminationStateDescriptor)\n\
    \   ; at-most-once per item\n   streamParm           = ( localDescriptor / remoteDescriptor\
    \ /\n                           localControlDescriptor )\n   streamDescriptor\
    \     = StreamToken EQUAL StreamID LBRKT streamParm\n                        \
    \  *(COMMA streamParm) RBRKT\n   localControlDescriptor = LocalControlToken LBRKT\
    \ localParm\n                            *(COMMA localParm) RBRKT\n   ; at-most-once\
    \ per item except for propertyParm\n   localParm = ( streamMode / propertyParm\
    \ / reservedValueMode\n                  / reservedGroupMode )\n   reservedValueMode\
    \    = ReservedValueToken EQUAL ( \"ON\" / \"OFF\" )\n   reservedGroupMode   \
    \ = ReservedGroupToken EQUAL ( \"ON\" / \"OFF\" )\n   streamMode           = ModeToken\
    \ EQUAL streamModes\n   streamModes     = (SendonlyToken / RecvonlyToken / SendrecvToken\
    \ /\n                          InactiveToken / LoopbackToken )\n   propertyParm\
    \         = pkgdName parmValue\n   parmValue            = (EQUAL alternativeValue/\
    \ INEQUAL VALUE)\n   alternativeValue     = ( VALUE\n                  / LSBRKT\
    \ VALUE *(COMMA VALUE) RSBRKT\n                   ; sublist (i.e., A AND B AND\
    \ ...)\n                  / LBRKT VALUE *(COMMA VALUE) RBRKT\n               \
    \    ; alternatives (i.e., A OR B OR ...)\n                  /  LSBRKT VALUE COLON\
    \ VALUE RSBRKT )\n                   ; range\n   INEQUAL              = LWSP (\"\
    >\" / \"<\" / \"#\" ) LWSP\n   LSBRKT               = LWSP \"[\" LWSP\n   RSBRKT\
    \               = LWSP \"]\" LWSP\n   ; Note - The octet zero is not among the\
    \ permitted characters in\n   ; octet string.  As the current definition is limited\
    \ to SDP, and a\n   ; zero octet would not be a legal character in SDP, this is\
    \ not a\n   ; concern.\n   localDescriptor      = LocalToken LBRKT octetString\
    \ RBRKT\n   remoteDescriptor     = RemoteToken LBRKT octetString RBRKT\n   eventBufferDescriptor=\
    \ EventBufferToken [ LBRKT eventSpec\n                          *( COMMA eventSpec)\
    \ RBRKT ]\n   eventSpec      = pkgdName [ LBRKT eventSpecParameter\n         \
    \       *(COMMA eventSpecParameter) RBRKT ]\n   eventSpecParameter   = (eventStream\
    \ / eventOther)\n   eventBufferControl     = BufferToken EQUAL ( \"OFF\" / LockStepToken\
    \ )\n   terminationStateDescriptor = TerminationStateToken LBRKT\n           \
    \   terminationStateParm *( COMMA terminationStateParm ) RBRKT\n   ; at-most-once\
    \ per item except for propertyParm\n   terminationStateParm = (propertyParm /\
    \ serviceStates /\n                           eventBufferControl )\n   serviceStates\
    \        = ServiceStatesToken EQUAL ( TestToken /\n                          OutOfSvcToken\
    \ / InSvcToken )\n   muxDescriptor        = MuxToken EQUAL MuxType  terminationIDList\n\
    \   MuxType              = ( H221Token / H223Token / H226Token / V76Token\n  \
    \                         / extensionParameter )\n   StreamID             = UINT16\n\
    \   pkgdName     = (PackageName SLASH ItemID) ;specific item\n               \
    \ / (PackageName SLASH \"*\") ;all items in package\n                / (\"*\"\
    \ SLASH \"*\") ; all items supported by the MG\n   PackageName          = NAME\n\
    \   ItemID               = NAME\n   eventsDescriptor     = EventsToken [ EQUAL\
    \ RequestID LBRKT\n                        requestedEvent *( COMMA requestedEvent\
    \ ) RBRKT ]\n   requestedEvent       = pkgdName [ LBRKT eventParameter\n     \
    \                     *( COMMA eventParameter ) RBRKT ]\n   ; at-most-once each\
    \ of KeepActiveToken , eventDM and eventStream\n   ;at most one of either embedWithSig\
    \ or embedNoSig but not both\n   ;KeepActiveToken and embedWithSig must not both\
    \ be present\n   eventParameter       = ( embedWithSig / embedNoSig / KeepActiveToken\n\
    \                            /eventDM / eventStream / eventOther )\n   embedWithSig\
    \         = EmbedToken LBRKT signalsDescriptor\n                            [COMMA\
    \ embedFirst ] RBRKT\n   embedNoSig        = EmbedToken LBRKT embedFirst RBRKT\n\
    \   ; at-most-once of each\n   embedFirst      = EventsToken [ EQUAL RequestID\
    \ LBRKT\n              secondRequestedEvent *(COMMA secondRequestedEvent) RBRKT\
    \ ]\n   secondRequestedEvent = pkgdName [ LBRKT secondEventParameter\n       \
    \                   *( COMMA secondEventParameter ) RBRKT ]\n   ; at-most-once\
    \ each of embedSig , KeepActiveToken, eventDM or\n   ; eventStream\n   ; KeepActiveToken\
    \ and embedSig must not both be present\n   secondEventParameter = ( embedSig\
    \ / KeepActiveToken / eventDM /\n                            eventStream / eventOther\
    \ )\n   embedSig  = EmbedToken LBRKT signalsDescriptor RBRKT\n   eventStream \
    \         = StreamToken EQUAL StreamID\n   eventOther           = eventParameterName\
    \ parmValue\n   eventParameterName   = NAME\n   eventDM              = DigitMapToken\
    \ EQUAL(( digitMapName ) /\n                          (LBRKT digitMapValue RBRKT\
    \ ))\n   signalsDescriptor    = SignalsToken LBRKT [ signalParm\n            \
    \              *(COMMA signalParm)] RBRKT\n   signalParm           = signalList\
    \ / signalRequest\n   signalRequest        = signalName [ LBRKT sigParameter\n\
    \                          *(COMMA sigParameter) RBRKT ]\n   signalList      \
    \     = SignalListToken EQUAL signalListId LBRKT\n                          signalListParm\
    \ *(COMMA signalListParm) RBRKT\n   signalListId         = UINT16\n   ;exactly\
    \ once signalType, at most once duration and every signal\n   ;parameter\n   signalListParm\
    \       = signalRequest\n   signalName           = pkgdName\n   ;at-most-once\
    \ sigStream, at-most-once sigSignalType,\n   ;at-most-once sigDuration, every\
    \ signalParameterName at most once\n   sigParameter = sigStream / sigSignalType\
    \ / sigDuration / sigOther\n               / notifyCompletion / KeepActiveToken\n\
    \   sigStream            = StreamToken EQUAL StreamID\n   sigOther           \
    \  = sigParameterName parmValue\n   sigParameterName     = NAME\n   sigSignalType\
    \        = SignalTypeToken EQUAL signalType\n   signalType           = (OnOffToken\
    \ / TimeOutToken / BriefToken)\n   sigDuration          = DurationToken EQUAL\
    \ UINT16\n   notifyCompletion     = NotifyCompletionToken EQUAL (LBRKT\n     \
    \       notificationReason *(COMMA notificationReason) RBRKT)\n   notificationReason\
    \   = ( TimeOutToken / InterruptByEventToken\n                        / InterruptByNewSignalsDescrToken\n\
    \                        / OtherReasonToken )\n   observedEventsDescriptor = ObservedEventsToken\
    \ EQUAL RequestID\n                      LBRKT observedEvent *(COMMA observedEvent)\
    \ RBRKT\n   ;time per event, because it might be buffered\n   observedEvent  \
    \      = [ TimeStamp LWSP COLON] LWSP\n                          pkgdName [ LBRKT\
    \ observedEventParameter\n                          *(COMMA observedEventParameter)\
    \ RBRKT ]\n   ;at-most-once eventStream, every eventParameterName at most once\n\
    \   observedEventParameter = eventStream / eventOther\n   ; For an AuditCapReply\
    \ with all events, the RequestID should be ALL.\n   RequestID            = ( UINT32\
    \ / \"*\" )\n   modemDescriptor      = ModemToken (( EQUAL modemType) /\n    \
    \                  (LSBRKT modemType *(COMMA modemType) RSBRKT))\n           \
    \          [ LBRKT propertyParm *(COMMA propertyParm) RBRKT ]\n   ; at-most-once\
    \ except for extensionParameter\n   modemType            = (V32bisToken / V22bisToken\
    \ / V18Token /\n                           V22Token / V32Token / V34Token / V90Token\
    \ /\n                         V91Token / SynchISDNToken / extensionParameter)\n\
    \   digitMapDescriptor  = DigitMapToken EQUAL\n                        ( ( LBRKT\
    \ digitMapValue RBRKT ) /\n                        (digitMapName [ LBRKT digitMapValue\
    \ RBRKT ]) )\n   digitMapName        = NAME\n   digitMapValue       = [\"T\" COLON\
    \ Timer COMMA] [\"S\" COLON Timer COMMA]\n                         [\"L\" COLON\
    \ Timer COMMA] digitMap\n   Timer               = 1*2DIGIT\n   ; Units are seconds\
    \ for T, S, and L timers, and hundreds of\n   ; milliseconds for Z timer.  Thus\
    \ T, S, and L range from 1 to 99\n   ; seconds and Z from 100 ms to 9.9 s\n  \
    \ digitMap = (digitString /\n               LWSP \"(\" LWSP digitStringList LWSP\
    \ \")\" LWSP)\n   digitStringList   = digitString *( LWSP \"|\" LWSP digitString\
    \ )\n   digitString       = 1*(digitStringElement)\n   digitStringElement = digitPosition\
    \ [DOT]\n   digitPosition     = digitMapLetter / digitMapRange\n   digitMapRange\
    \     = (\"x\" / (LWSP \"[\" LWSP digitLetter LWSP \"]\" LWSP))\n   digitLetter\
    \       = *((DIGIT \"-\" DIGIT ) / digitMapLetter)\n   digitMapLetter    = DIGIT\
    \   ;Basic event symbols\n               / %x41-4B / %x61-6B ; a-k, A-K\n    \
    \           / \"L\" / \"S\"   ;Inter-event timers (long, short)\n            \
    \   / \"Z\"         ;Long duration modifier\n   ;at-most-once, and DigitMapToken\
    \ and PackagesToken are not allowed\n   ;in AuditCapabilities command\n   auditItem\
    \            = ( MuxToken / ModemToken / MediaToken /\n                      \
    \     SignalsToken / EventBufferToken /\n                           DigitMapToken\
    \ / StatsToken / EventsToken /\n                           ObservedEventsToken\
    \ / PackagesToken )\n   serviceChangeDescriptor = ServicesToken LBRKT serviceChangeParm\n\
    \                            *(COMMA serviceChangeParm) RBRKT\n   ; each parameter\
    \ at-most-once\n   ; at most one of either serviceChangeAddress or serviceChangeMgcId\n\
    \   ; but not both\n   ; serviceChangeMethod and serviceChangeReason are REQUIRED\n\
    \   serviceChangeParm    = (serviceChangeMethod / serviceChangeReason /\n    \
    \                      serviceChangeDelay / serviceChangeAddress /\n         \
    \                 serviceChangeProfile / extension / TimeStamp /\n           \
    \               serviceChangeMgcId / serviceChangeVersion )\n   serviceChangeReplyDescriptor\
    \ = ServicesToken LBRKT\n                        servChgReplyParm *(COMMA servChgReplyParm)\
    \ RBRKT\n   ; at-most-once.  Version is REQUIRED on first ServiceChange response\n\
    \   ; at most one of either serviceChangeAddress or serviceChangeMgcId\n   ; but\
    \ not both\n   servChgReplyParm     = (serviceChangeAddress / serviceChangeMgcId\
    \ /\n                          serviceChangeProfile / serviceChangeVersion /\n\
    \                          TimeStamp)\n   serviceChangeMethod  = MethodToken EQUAL\
    \ (FailoverToken /\n                          ForcedToken / GracefulToken / RestartToken\
    \ /\n                          DisconnectedToken / HandOffToken /\n          \
    \                extensionParameter)\n   ; A serviceChangeReason consists of a\
    \ numeric reason code\n   ; and an optional text description.\n   ; A serviceChangeReason\
    \ MUST be encoded using the quotedString\n   ; form of VALUE.\n   ; The quotedString\
    \ SHALL contain a decimal reason code,\n   ; optionally followed by a single space\
    \ character and a\n   ; textual description string.\n   serviceChangeReason  =\
    \ ReasonToken  EQUAL VALUE\n   serviceChangeDelay   = DelayToken   EQUAL UINT32\n\
    \   serviceChangeAddress = ServiceChangeAddressToken EQUAL ( mId /\n         \
    \                 portNumber )\n   serviceChangeMgcId   = MgcIdToken   EQUAL mId\n\
    \   serviceChangeProfile = ProfileToken EQUAL NAME SLASH Version\n   serviceChangeVersion\
    \ = VersionToken EQUAL Version\n   extension            = extensionParameter parmValue\n\
    \   packagesDescriptor   = PackagesToken LBRKT packagesItem\n                \
    \          *(COMMA packagesItem) RBRKT\n   Version              = 1*2(DIGIT)\n\
    \   packagesItem         = NAME \"-\" UINT16\n   TimeStamp            = Date \"\
    T\" Time ; per ISO 8601:1988\n   ; Date = yyyymmdd\n   Date                 =\
    \ 8(DIGIT)\n   ; Time = hhmmssss\n   Time                 = 8(DIGIT)\n   statisticsDescriptor\
    \ = StatsToken LBRKT statisticsParameter\n                         *(COMMA statisticsParameter\
    \ ) RBRKT\n   ;at-most-once per item\n   statisticsParameter  = pkgdName [EQUAL\
    \ VALUE]\n   topologyDescriptor   = TopologyToken LBRKT topologyTriple\n     \
    \                     *(COMMA topologyTriple) RBRKT\n   topologyTriple       =\
    \ terminationA COMMA\n                          terminationB COMMA topologyDirection\n\
    \   terminationA         = TerminationID\n   terminationB         = TerminationID\n\
    \   topologyDirection    = BothwayToken / IsolateToken / OnewayToken\n   priority\
    \             = PriorityToken EQUAL UINT16\n   extensionParameter   = \"X\"  (\"\
    -\" / \"+\") 1*6(ALPHA / DIGIT)\n   ; octetString is used to describe SDP defined\
    \ in RFC2327.\n   ; Caution should be taken if CRLF in RFC2327 is used.\n   ;\
    \ To be safe, use EOL in this ABNF.\n   ; Whenever \"}\" appears in SDP, it is\
    \ escaped by \"\\\", e.g., \"\\}\"\n   octetString          = *(nonEscapeChar)\n\
    \   nonEscapeChar        = ( \"\\}\" / %x01-7C / %x7E-FF )\n   ; Note - The double-quote\
    \ character is not allowed in quotedString.\n   quotedString         = DQUOTE\
    \ *(SafeChar / RestChar/ WSP) DQUOTE\n   UINT16               = 1*5(DIGIT)  ;\
    \ %x0-FFFF\n   UINT32               = 1*10(DIGIT) ; %x0-FFFFFFFF\n   NAME    \
    \             = ALPHA *63(ALPHA / DIGIT / \"_\" )\n   VALUE                = quotedString\
    \ / 1*(SafeChar)\n   SafeChar             = DIGIT / ALPHA / \"+\" / \"-\" / \"\
    &\" /\n                          \"!\" / \"_\" / \"/\" / \"\\'\" / \"?\" / \"\
    @\" /\n                          \"^\" / \"`\" / \"~\" / \"*\" / \"$\" / \"\\\"\
    \ /\n                          \"(\" / \")\" / \"%\" / \"|\" / \".\"\n   EQUAL\
    \                = LWSP %x3D LWSP ; \"=\"\n   COLON                = %x3A    \
    \       ; \":\"\n   LBRKT                = LWSP %x7B LWSP ; \"{\"\n   RBRKT  \
    \              = LWSP %x7D LWSP ; \"}\"\n   COMMA                = LWSP %x2C LWSP\
    \ ; \",\"\n   DOT                  = %x2E           ; \".\"\n   SLASH        \
    \        = %x2F           ; \"/\"\n   ALPHA                = %x41-5A / %x61-7A\
    \ ; A-Z / a-z\n   DIGIT                = %x30-39         ; 0-9\n   DQUOTE    \
    \           = %x22            ; \" (Double Quote)\n   HEXDIG               = (\
    \ DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\" )\n   SP             \
    \      = %x20        ; space\n   HTAB                 = %x09        ; horizontal\
    \ tab\n   CR                   = %x0D        ; Carriage return\n   LF        \
    \           = %x0A        ; linefeed\n   LWSP                 = *( WSP / COMMENT\
    \ / EOL )\n   EOL                  = (CR [LF] / LF )\n   WSP                 \
    \ = SP / HTAB ; white space\n   SEP                  = ( WSP / EOL / COMMENT)\
    \ LWSP\n   COMMENT              = \";\" *(SafeChar/ RestChar / WSP / %x22) EOL\n\
    \   RestChar            = \";\" / \"[\" / \"]\" / \"{\" / \"}\" / \":\" / \",\"\
    \ / \"#\" /\n                          \"<\" / \">\" / \"=\"\n   ; New Tokens\
    \ added to sigParameter must take the format of SPA*\n   ; * may be of any form\
    \ i.e., SPAM\n   ; New Tokens added to eventParameter must take the form of EPA*\n\
    \   ; * may be of any form i.e., EPAD\n   AddToken                   = (\"Add\"\
    \                   / \"A\")\n   AuditToken                 = (\"Audit\"     \
    \            / \"AT\")\n   AuditCapToken              = (\"AuditCapability\" \
    \      / \"AC\")\n   AuditValueToken            = (\"AuditValue\"            /\
    \ \"AV\")\n   AuthToken                  = (\"Authentication\"        / \"AU\"\
    )\n   BothwayToken               = (\"Bothway\"               / \"BW\")\n   BriefToken\
    \                 = (\"Brief\"                 / \"BR\")\n   BufferToken     \
    \           = (\"Buffer\"                / \"BF\")\n   CtxToken              \
    \     = (\"Context\"               / \"C\")\n   ContextAuditToken       = (\"\
    ContextAudit\"    / \"CA\")\n   DigitMapToken              = (\"DigitMap\"   \
    \           / \"DM\")\n   DisconnectedToken          = (\"Disconnected\"     \
    \     / \"DC\")\n   DelayToken                 = (\"Delay\"                 /\
    \ \"DL\")\n   DurationToken              = (\"Duration\"              / \"DR\"\
    )\n   EmbedToken                 = (\"Embed\"                 / \"EM\")\n   EmergencyToken\
    \             = (\"Emergency\"             / \"EG\")\n   ErrorToken          \
    \       = (\"Error\"                 / \"ER\")\n   EventBufferToken          \
    \ = (\"EventBuffer\"           / \"EB\")\n   EventsToken                = (\"\
    Events\"                / \"E\")\n   FailoverToken              = (\"Failover\"\
    \              / \"FL\")\n   ForcedToken                = (\"Forced\"        \
    \        / \"FO\")\n   GracefulToken              = (\"Graceful\"            \
    \  / \"GR\")\n   H221Token                  = (\"H221\" )\n   H223Token      \
    \            = (\"H223\" )\n   H226Token                  = (\"H226\" )\n   HandOffToken\
    \               = (\"HandOff\"               / \"HO\")\n   ImmAckRequiredToken\
    \        = (\"ImmAckRequired\"        / \"IA\")\n   InactiveToken            \
    \  = (\"Inactive\"              / \"IN\")\n   IsolateToken               = (\"\
    Isolate\"               / \"IS\")\n   InSvcToken                 = (\"InService\"\
    \             / \"IV\")\n   InterruptByEventToken      = (\"IntByEvent\"     \
    \       / \"IBE\")\n   InterruptByNewSignalsDescrToken\n                     \
    \         = (\"IntBySigDescr\"         / \"IBS\")\n   KeepActiveToken        \
    \    = (\"KeepActive\"            / \"KA\")\n   LocalToken                 = (\"\
    Local\"                 / \"L\")\n   LocalControlToken          = (\"LocalControl\"\
    \          / \"O\")\n   LockStepToken              = (\"LockStep\"           \
    \   / \"SP\")\n   LoopbackToken              = (\"Loopback\"              / \"\
    LB\")\n   MediaToken                 = (\"Media\"                 / \"M\")\n \
    \  MegacopToken               = (\"MEGACO\"                / \"!\")\n   MethodToken\
    \                = (\"Method\"                / \"MT\")\n   MgcIdToken       \
    \          = (\"MgcIdToTry\"            / \"MG\")\n   ModeToken              \
    \    = (\"Mode\"                  / \"MO\")\n   ModifyToken                = (\"\
    Modify\"                / \"MF\")\n   ModemToken                 = (\"Modem\"\
    \                 / \"MD\")\n   MoveToken                  = (\"Move\"       \
    \           / \"MV\")\n   MTPToken                   = (\"MTP\")\n   MuxToken\
    \                   = (\"Mux\"                   / \"MX\")\n   NotifyToken   \
    \             = (\"Notify\"                / \"N\")\n   NotifyCompletionToken\
    \      = (\"NotifyCompletion\"      / \"NC\")\n   ObservedEventsToken        =\
    \ (\"ObservedEvents\"        / \"OE\")\n   OnewayToken                = (\"Oneway\"\
    \                / \"OW\")\n   OnOffToken                 = (\"OnOff\"       \
    \          / \"OO\")\n   OtherReasonToken           = (\"OtherReason\"       \
    \    / \"OR\")\n   OutOfSvcToken              = (\"OutOfService\"          / \"\
    OS\")\n   PackagesToken              = (\"Packages\"              / \"PG\")\n\
    \   PendingToken               = (\"Pending\"               / \"PN\")\n   PriorityToken\
    \              = (\"Priority\"              / \"PR\")\n   ProfileToken       \
    \        = (\"Profile\"               / \"PF\")\n   ReasonToken              \
    \  = (\"Reason\"                / \"RE\")\n   RecvonlyToken              = (\"\
    ReceiveOnly\"           / \"RC\")\n   ReplyToken                 = (\"Reply\"\
    \                 / \"P\")\n   RestartToken               = (\"Restart\"     \
    \          / \"RS\")\n   RemoteToken                = (\"Remote\"            \
    \    / \"R\")\n   ReservedGroupToken         = (\"ReservedGroup\"         / \"\
    RG\")\n   ReservedValueToken         = (\"ReservedValue\"         / \"RV\")\n\
    \   SendonlyToken              = (\"SendOnly\"              / \"SO\")\n   SendrecvToken\
    \              = (\"SendReceive\"           / \"SR\")\n   ServicesToken      \
    \        = (\"Services\"              / \"SV\")\n   ServiceStatesToken       \
    \  = (\"ServiceStates\"         / \"SI\")\n   ServiceChangeToken         = (\"\
    ServiceChange\"         / \"SC\")\n   ServiceChangeAddressToken  = (\"ServiceChangeAddress\"\
    \  / \"AD\")\n   SignalListToken            = (\"SignalList\"            / \"\
    SL\")\n   SignalsToken               = (\"Signals\"               / \"SG\")\n\
    \   SignalTypeToken            = (\"SignalType\"            / \"SY\")\n   StatsToken\
    \                 = (\"Statistics\"            / \"SA\")\n   StreamToken     \
    \           = (\"Stream\"                / \"ST\")\n   SubtractToken         \
    \     = (\"Subtract\"              / \"S\")\n   SynchISDNToken             = (\"\
    SynchISDN\"             / \"SN\")\n   TerminationStateToken      = (\"TerminationState\"\
    \      / \"TS\")\n   TestToken                  = (\"Test\"                  /\
    \ \"TE\")\n   TimeOutToken               = (\"TimeOut\"               / \"TO\"\
    )\n   TopologyToken              = (\"Topology\"              / \"TP\")\n   TransToken\
    \                 = (\"Transaction\"           / \"T\")\n   ResponseAckToken \
    \          = (\"TransactionResponseAck\" / \"K\")\n   V18Token               \
    \    = (\"V18\")\n   V22Token                   = (\"V22\")\n   V22bisToken  \
    \              = (\"V22b\")\n   V32Token                   = (\"V32\")\n   V32bisToken\
    \                = (\"V32b\")\n   V34Token                   = (\"V34\")\n   V76Token\
    \                   = (\"V76\")\n   V90Token                   = (\"V90\")\n \
    \  V91Token                   = (\"V91\")\n   VersionToken               = (\"\
    Version\"               / \"V\")\n"
- title: B.3   Hexadecimal octet coding
  contents:
  - "B.3   Hexadecimal octet coding\n   Hexadecimal octet coding is a means for representing\
    \ a string of\n   octets as a string of hexadecimal digits, with two digits\n\
    \   representing each octet.  This octet encoding should be used when\n   encoding\
    \ octet strings in the text version of the protocol.  For each\n   octet, the\
    \ 8-bit sequence is encoded as two hexadecimal digits.  Bit\n   0 is the first\
    \ transmitted; bit 7 is the last.  Bits 7-4 are encoded\n   as the first hexadecimal\
    \ digit, with Bit 7 as MSB and Bit 4 as LSB.\n   Bits 3-0 are encoded as the second\
    \ hexadecimal digit, with Bit 3 as\n   MSB and Bit 0 as LSB. Examples:\n     \
    \   Octet bit pattern                   Hexadecimal coding\n        00011011 \
    \                           D8\n        11100100                            27\n\
    \        10000011 10100010 11001000 00001001 C1451390\n"
- title: B.4   Hexadecimal octet sequence
  contents:
  - "B.4   Hexadecimal octet sequence\n   A hexadecimal octet sequence is an even\
    \ number of hexadecimal digits,\n   terminated by a <CR> character.\n"
- title: ANNEX C - Tags for media stream properties
  contents:
  - "ANNEX C - Tags for media stream properties\n   Parameters for Local, Remote and\
    \ LocalControl descriptors are\n   specified as tag-value pairs if binary encoding\
    \ is used for the\n   protocol.  This annex contains the property names (PropertyID),\
    \ the\n   tags (Property tag), type of the property (Type) and the values\n  \
    \ (Value).  Values presented in the Value field when the field contains\n   references\
    \ shall be regarded as \"information\".  The reference\n   contains the normative\
    \ values.  If a value field does not contain a\n   reference, then the values\
    \ in that field can be considered as\n   \"normative\".\n   Tags are given as\
    \ hexadecimal numbers in this annex.  When setting\n   the value of a property,\
    \ a MGC may underspecify the value according\n   to one of the mechanisms specified\
    \ in 7.1.1.\n   It is optional to support the properties in this Annex or any\
    \ of its\n   sub-sections.  For example, only three properties from C.3 and only\n\
    \   five properties from C.8 might be implemented.\n   For type \"enumeration\"\
    \ the value is represented by the value in\n   brackets, e.g., Send(0), Receive(1).\
    \  Annex C properties with the\n   types \"N bits\" or \"M Octets\" should be\
    \ treated as octet strings when\n   encoding the protocol.  Properties with \"\
    N bit integer\" shall be\n   treated as an integers.  \"String\" shall be treated\
    \ as an IA5String\n   when encoding the protocol.\n   When a type is smaller than\
    \ one octet, the value shall be stored in\n   the low-order bits of an octet string\
    \ of size 1.\n"
- title: C.1   General media attributes
  contents:
  - "C.1   General media attributes\n   PropertyID    Property Type          Value\n\
    \                 tag\n   Media         1001     Enumeration   Audio(0), Video(1),\
    \ Data(2)\n   Transmission  1002     Enumeration   Send(0), Receive(1),\n   mode\
    \                                 Send&Receive(2)\n   Number of     1003     Unsigned\
    \      0-255\n   Channels               integer\n   Sampling      1004     Unsigned\
    \      0-2^32\n   rate                   integer\n   Bitrate       1005     Integer\
    \       (0..4294967295)NOTE - Units of\n                                     \
    \   100 bit/s.\n   ACodec        1006     Octet string  Audio Codec Type:\n  \
    \                                      Ref.: ITU-T Q.765\n                   \
    \                     Non-ITU-T codecs are defined\n                         \
    \               with the appropriate standards\n                             \
    \           organization under a defined\n                                   \
    \     Organizational Identifier.\n   Samplepp      1007     Unsigned      Maximum\
    \ samples or frames per\n                          integer       packet: 0..65535\n\
    \   Silencesupp   1008     Boolean       Silence Suppression: True/False\n   Encrypttype\
    \   1009     Octet string  Ref.: ITU-T H.245\n   Encryptkey    100A     Octet\
    \ string  Encryption key\n                          size          Ref.: ITU-T\
    \ H.235\n                          (0..65535)\n   Echocanc      100B         \
    \           Not Used.  See H.248.1 E.13 for\n                                \
    \        an example of possible Echo\n                                       \
    \ Control properties.\n   Gain          100C     Unsigned      Gain in dB: 0..65535\n\
    \                          integer\n   Jitterbuff    100D     Unsigned      Jitter\
    \ buffer size in ms:\n                          integer       0..65535\n   PropDelay\
    \     100E     Unsigned      Propagation Delay: 0..65535\n                   \
    \       integer       Maximum propagation delay in\n                         \
    \               milliseconds for the bearer\n                                \
    \        connection between two media\n                                      \
    \  gateways.  The maximum delay\n                                        will\
    \ be dependent on the bearer\n                                        technology.\n\
    \   RTPpayload    100F     Integer       Payload type in RTP Profile for\n   \
    \                                     Audio and Video Conferences\n          \
    \                              with Minimal Control\n                        \
    \                Ref.: RFC 1890\n"
- title: C.2   Mux properties
  contents:
  - "C.2   Mux properties\n   PropertyID Property tag Type         Value\n   H222\
    \       2001         Octet string H222LogicalChannelParameters\n             \
    \                            Ref.: ITU-T H.245\n   H223       2002         Octet\
    \ string H223LogicalChannelParameters\n                                      \
    \   Ref.: ITU-T H.245\n   V76        2003         Octet string V76LogicalChannelParameters\n\
    \                                         Ref.: ITU-T H.245\n   H2250      2004\
    \         Octet string H2250LogicalChannelParameters\n                       \
    \                  Ref.: ITU-T H.245\n"
- title: C.3   General bearer properties
  contents:
  - "C.3   General bearer properties\n   PropertyID Property   Type        Value\n\
    \              tag\n   Mediatx    3001       Enumeration Media Transport TypeTDM\n\
    \                                      Circuit(0), ATM(1), FR(2),\n          \
    \                            Ipv4(3), Ipv6(4), ...\n   BIR        3002       4\
    \ octets    Value depends on transport\n                                     \
    \ technology\n   NSAP       3003       1-20 octets See NSAP.\n               \
    \                       Ref.: Annex A/X.213\n"
- title: C.4   General ATM properties
  contents:
  - "C.4   General ATM properties\n   PropertyID Property Type              Value\n\
    \              tag\n   AESA       4001     20 octets         ATM End System Address\n\
    \   VPVC       4002     4 octets: VPCI    VPCI/VCI\n                        in\
    \ first two\n                        least             Ref.: ITU-T Q.2931\n  \
    \                      significant\n                        octets, VCI in\n \
    \                       second two\n                        octets\n   SC    \
    \     4003     Enumeration       Service Category: CBR(0),\n                 \
    \                         nrt-VBR1(1), nrt  VBR2(2),\n                       \
    \                   nrt-VBR3(3), rt-VBR1(4),\n                               \
    \           rt  VBR2(5), rt-VBR3(6),\n                                       \
    \   UBR1(7), UBR2(8), ABR(9).\n                                          Ref.:\
    \ ATM Forum UNI 4.0\n   BCOB       4004     5-bit integer     Broadband Bearer\
    \ Class\n                                          Ref.: ITU-T Q.2961.2\n   BBTC\
    \       4005     7-bit integer     Broadband Transfer Capability\n           \
    \                               Ref.: ITU-T Q.2961.1\n   ATC        4006     Enumeration\
    \       I.371 ATM Traffic\n                                          CapabilityDBR(0),\
    \ SBR1(1),\n                                          SBR2(2), SBR3(3), ABT/IT(4),\n\
    \                                          ABT/DT(5), ABR(6)\n               \
    \                           Ref.: ITU-T I.371\n   STC        4007     2 bits \
    \           Susceptibility to clipping:\n                                    \
    \      Bits\n                                          2 1\n                 \
    \                         ---\n                                          0 0 \
    \    not susceptible to\n                                                  clipping\n\
    \                                          0 1     susceptible to\n          \
    \                                        clipping\n                          \
    \                Ref.: ITU-T Q.2931\n   UPCC       4008     2 bits           \
    \ User Plane Connection\n                                          configuration:\n\
    \                                          Bits\n                            \
    \              2 1\n                                          ---\n          \
    \                                0 0     point-to-point\n                    \
    \                      0 1     point-to-multipoint\n                         \
    \                 Ref.: ITU-T Q.2931\n   PCR0       4009     24-bit integer  \
    \  Peak Cell Rate (For CLP = 0)\n                                          Ref.:\
    \ ITU-T Q.2931\n   SCR0       400A     24-bit integer    Sustainable Cell Rate\
    \ (For\n                                          CLP = 0)\n                 \
    \                         Ref.: ITU-T Q.2961.1\n   MBS0       400B     24-bit\
    \ integer    Maximum Burst Size (For CLP =\n                                 \
    \         0)\n                                          Ref.: ITU-T Q.2961.1\n\
    \   PCR1       400C     24-bit integer    Peak Cell Rate (For CLP = 0 +\n    \
    \                                      1)\n                                  \
    \        Ref.: ITU-T Q.2931\n   SCR1       400D     24-bit integer    Sustainable\
    \ Cell Rate (For\n                                          CLP = 0 + 1)\n   \
    \                                       Ref.: ITU-T Q.2961.1\n   MBS1       400E\
    \     24-bit integer    Maximum Burst Size (For CLP =\n                      \
    \                    0 + 1)\n                                          Ref.: ITU-T\
    \ Q.2961.1\n   BEI        400F     Boolean           Best Effort Indicator\n \
    \                                         Value 1 indicates that BEI is\n    \
    \                                      to be included in the ATM\n           \
    \                               signaling; value 0 indicates\n               \
    \                           that BEI is not to be\n                          \
    \                included in the ATM\n                                       \
    \   signaling.\n                                          Ref.: ATM Forum UNI\
    \ 4.0\n   TI         4010     Boolean           Tagging Indicator\n          \
    \                                Value 0 indicates that\n                    \
    \                      tagging is not allowed; value\n                       \
    \                   1 indicates that tagging is\n                            \
    \              requested.\n                                          Ref.: ITU-T\
    \ Q.2961.1\n   FD         4011     Boolean           Frame Discard\n         \
    \                                 Value 0 indicates that no\n                \
    \                          frame discard is allowed;\n                       \
    \                   value 1 indicates that frame\n                           \
    \               discard is allowed.\n                                        \
    \  Ref.: ATM Forum UNI 4.0\n   A2PCDV     4012     24-bit integer    Acceptable\
    \ 2-point CDV\n                                          Ref.: ITU-T Q.2965.2\n\
    \   C2PCDV     4013     24-bit integer    Cumulative 2-point CDV\n           \
    \                               Ref.: ITU-T Q.2965.2\n   APPCDV     4014     24-bit\
    \ integer    Acceptable P-P CDV\n                                          Ref.:\
    \ ATM Forum UNI 4.0\n   CPPCDV     4015     24-bit integer    Cumulative P-P CDV\n\
    \                                          Ref.: ATM Forum UNI 4.0\n   ACLR  \
    \     4016     8-bit integer     Acceptable Cell Loss Ratio\n                \
    \                          Ref.: ITU-T Q.2965.2, ATM\n                       \
    \                   Forum UNI 4.0\n   MEETD      4017     16-bit integer    Maximum\
    \ End-to-end transit\n                                          delay\n      \
    \                                    Ref.: ITU-T Q.2965.2, ATM\n             \
    \                             Forum UNI 4.0\n   CEETD      4018     16-bit integer\
    \    Cumulative End-to-end transit\n                                         \
    \ delay\n                                          Ref.: ITU-T Q.2965.2, ATM\n\
    \                                          Forum UNI 4.0\n   QosClass   4019 \
    \    Integer 0-5          QoS Class\n                                        \
    \    QoS Class     Meaning\n                                            0    \
    \         Default QoS\n                                                      \
    \     associated\n                                                           with\
    \ the ATC\n                                                           as defined\n\
    \                                                           in ITU-T\n       \
    \                                                    Q.2961.2\n              \
    \                              1             Stringent\n                     \
    \                       2             Tolerant\n                             \
    \               3             Bi-level\n                                     \
    \       4             Unbounded\n                                            5\
    \             Stringent\n                                                    \
    \       Bi-level\n                                          Ref.: ITU-T Q.2965.1\n\
    \   AALtype    401A     1 octet           AAL Type\n                         \
    \                 Bits\n                                          8 7 6 5 4 3\
    \ 2 1\n                                          ---------------\n           \
    \                               0 0 0 0 0 0 0 0   AAL for\n                  \
    \                                          voice\n                           \
    \               0 0 0 0 0 0 0 1   AAL type 1\n                               \
    \           0 0 0 0 0 0 1 0   AAL type 2\n                                   \
    \       0 0 0 0 0 0 1 1   AAL type\n                                         \
    \                   3/4\n                                          0 0 0 0 0 1\
    \ 0 1   AAL type 5\n                                          0 0 0 1 0 0 0 0\
    \   user-\n                                                            defined\
    \ AAL\n                                          Ref.: ITU-T Q.2931\n"
- title: C.5   Frame Relay
  contents:
  - "C.5   Frame Relay\n   PropertyID         Property    Type          Value\n  \
    \                    tag\n   DLCI               5001        Unsigned      Data\
    \ link connection\n                                  integer       id\n   CID\
    \                5002        Unsigned      sub-channel id\n                  \
    \                integer\n   SID/Noiselevel     5003        Unsigned      silence\
    \ insertion\n                                  integer       descriptor\n   Primary\
    \ Payload    5004        Unsigned      Primary Payload Type\n   type         \
    \                  integer       Covers FAX and codecs\n"
- title: C.6   IP
  contents:
  - "C.6   IP\n   PropertyID Property tag Type                Value\n   IPv4     \
    \  6001         32 bits Ipv4Address Ipv4Address\n                            \
    \                    Ref.: IETF RFC 791\n   IPv6       6002         128 bits \
    \           IPv6 Address\n                                                Ref.:\
    \ IETF RFC 2460\n   Port       6003         Unsigned integer    0..65535\n   Porttype\
    \   6004         Enumerated          TCP(0), UDP(1), SCTP(2)\n"
- title: C.7   ATM AAL2
  contents:
  - "C.7   ATM AAL2\n   PropertyID Property Type                   Value\n       \
    \       tag\n   AESA       7001     20 octets              AAL2 service endpoint\n\
    \                                                address as defined in\n     \
    \                                           the referenced\n                 \
    \                               Recommendation.\n                            \
    \                    ESEANSEA\n                                              \
    \  Ref.: ITU-T Q.2630.1\n   BIR        See C.3  4 octets               Served\
    \ user generated\n                                                reference as\
    \ defined in\n                                                the referenced\n\
    \                                                Recommendation.\n           \
    \                                     SUGR\n                                 \
    \               Ref.: ITU-T Q.2630.1\n   ALC        7002     12 octets       \
    \       AAL2 link\n                                                characteristics\
    \ as\n                                                defined in the\n       \
    \                                         referenced\n                       \
    \                         Recommendation.\n                                  \
    \              Maximum/Average CPS-SDU\n                                     \
    \           bit rate;\n                                                Maximum/Average\
    \ CPS-SDU\n                                                size\n            \
    \                                    Ref.: ITU-T Q.2630.1\n   SSCS       7003\
    \     I.366.2: Audio (8      Service specific\n                        octets);\
    \ Multirate (3  convergence sublayer\n                        octets), or I.366.1:\
    \   information as defined\n                        SAR-assured (14        in:\n\
    \                        octets);SAR-unassured  - ITU-T Q.2630.1,and\n       \
    \                 (7 octets).            used in:\n                          \
    \                      - ITU-T I.366.2:\n                                    \
    \            Audio/Multirate;\n                                              \
    \  - ITU-T I.366.1: SAR-\n                                                assured/unassured.\n\
    \                                                Ref.: ITU-T Q.2630.1,\n     \
    \                                           I.366.1 and I.366.2\n   SUT      \
    \  7004     1..254 octets          Served user transport\n                   \
    \                             parameter as defined in\n                      \
    \                          the referenced\n                                  \
    \              Recommendation.\n                                             \
    \   Ref.: ITU-T Q.2630.1\n   TCI        7005     Boolean                Test connection\n\
    \                                                indicator as defined in\n   \
    \                                             the referenced\n               \
    \                                 Recommendation.\n                          \
    \                      Ref.: ITU-T Q.2630.1\n   Timer_CU   7006     32-bit integer\
    \         Timer-CU\n                                                Milliseconds\
    \ to hold\n                                                partially filled cell\n\
    \                                                before sending.\n   MaxCPSSDU\
    \  7007     8-bit integer          Maximum Common Part\n                     \
    \                           Sublayer Service Data\n                          \
    \                      Unit\n                                                Ref.:\
    \ ITU-T Q.2630.1\n   CID        7008     8 bits                 subchannel id:\
    \ 0-255\n                                                Ref.: ITU-T I.363.2\n"
- title: C.8   ATM AAL1
  contents:
  - "C.8   ATM AAL1\n   PropertyID Property   Type        Value\n              tag\n\
    \   BIR        See table  4-29 octets GIT (Generic Identifier\n              in\
    \ C.3                 Transport)\n                                      Ref.:\
    \ ITU-T Q.2941.1\n   AAL1ST     8001       1 octet     AAL1 Subtype\n        \
    \                              Bits\n                                      8 7\
    \ 6 5 4 3 2 1\n                                      ---------------\n       \
    \                               0 0 0 0 0 0 0 0     null\n                   \
    \                   0 0 0 0 0 0 0 1     voiceband\n                          \
    \            signal transport on 64 kbit/s\n                                 \
    \     0 0 0 0 0 0 1 0     circuit\n                                      transport\n\
    \                                      0 0 0 0 0 1 0 0     high-quality\n    \
    \                                  audio signal transport\n                  \
    \                    0 0 0 0 0 1 0 1     video signal\n                      \
    \                transport\n                                      Ref.: ITU-T\
    \ Q.2931\n   CBRR       8002       1 octet     CBR Rate\n                    \
    \                  Bits\n                                      8 7 6 5 4 3 2 1\n\
    \                                      ---------------\n                     \
    \                 0 0 0 0 0 0 0 1       64 kbit/s\n                          \
    \            0 0 0 0 0 1 0 0     1544 kbit/s\n                               \
    \       0 0 0 0 0 1 0 1     6312 kbit/s\n                                    \
    \  0 0 0 0 0 1 1 0   32 064 kbit/s\n                                      0 0\
    \ 0 0 0 1 1 1   44 736 kbit/s\n                                      0 0 0 0 1\
    \ 0 0 0   97 728 kbit/s\n                                      0 0 0 1 0 0 0 0\
    \     2048 kbit/s\n                                      0 0 0 1 0 0 0 1     8448\
    \ kbit/s\n                                      0 0 0 1 0 0 1 0   34 368 kbit/s\n\
    \                                      0 0 0 1 0 0 1 1  139 264 kbit/s\n     \
    \                                 0 1 0 0 0 0 0 0   n x 64 kbit/s\n          \
    \                            0 1 0 0 0 0 0 1    n x 8 kbit/s\n               \
    \                       Ref.: ITU-T Q.2931\n   MULT       See table          \
    \    Multiplier, or n x 64k/8k/300\n              in C.9                 Ref.:\
    \ ITU-T Q.2931\n   SCRI       8003       1 octet     Source Clock Frequency Recovery\n\
    \                                      Method\n                              \
    \        Bits\n                                      8 7 6 5 4 3 2 1\n       \
    \                               ---------------\n                            \
    \          0 0 0 0 0 0 0 0     null\n                                      0 0\
    \ 0 0 0 0 0 1     SRTS\n                                      0 0 0 0 0 0 1 0\
    \     ACM\n                                      Ref.: ITU-T Q.2931\n   ECM  \
    \      8004       1 octet     Error Correction Method\n                      \
    \                Bits\n                                      8 7 6 5 4 3 2 1\n\
    \                                      ---------------\n                     \
    \                 0 0 0 0 0 0 0 0     null\n                                 \
    \     0 0 0 0 0 0 0 1     FEC - Loss\n                                      0\
    \ 0 0 0 0 0 1 0     FEC - Delay\n                                      Ref.: ITU-T\
    \ Q.2931\n   SDTB       8005       16-bit      Structured Data Transfer\n    \
    \                     integer     Blocksize\n                                \
    \      Block size of SDT CBR service\n                                      Ref.:\
    \ ITU-T I.363.1\n   PFCI       8006       8-bit       Partially filled cells identifier\n\
    \                         integer     1-47\n                                 \
    \     Ref.: ITU-T I.363.1\n"
- title: C.9   Bearer capabilities
  contents:
  - "C.9   Bearer capabilities\n   The table entries referencing Recommendation Q.931\
    \ refer to the\n   encoding in the bearer capability information element of Q.931,\
    \ not\n   to the low layer information element.\n   PropertyID    Tag    Type\
    \      Value\n   TMR           9001   1 octet   Transmission Medium\n        \
    \                          Requirement (Q.763)\n                             \
    \     Bits\n                                  87654321\n                     \
    \             --------\n                                  00000000  speech\n \
    \                                 00000001  spare\n                          \
    \        00000010  64 kbit/s\n                                  unrestricted\n\
    \                                  00000011  3.1 kHz audio\n                 \
    \                 00000100  reserved for\n                                  alternate\
    \ speech (service\n                                  2)/64 kbit/s unrestricted\n\
    \                                  (service 1)\n                             \
    \     00000101  reserved for\n                                  alternate 64 kbit/s\n\
    \                                  unrestricted (service\n                   \
    \               1)/speech (service 2)\n                                  00000110\
    \  64 kbit/s preferred\n                                  The assigned codepoints\n\
    \                                  listed below are all for\n                \
    \                  unrestricted service.\n                                  00000111\
    \  2 x 64 kbit/s\n                                  00001000  384 kbit/s\n   \
    \                               00001001  1536 kbit/s\n                      \
    \            00001010  1920 kbit/s\n                                  00001011\n\
    \                                   through\n                                \
    \  00001111  spare\n                                  00010000\n             \
    \                      through\n                                  00101010:\n\
    \                                     3 x 64 kbit/s through\n                \
    \                    29 x 64 kbit/s\n                                  except\n\
    \                                  00010011  spare\n                         \
    \         00100101  spare\n                                  00101011\n      \
    \                             through\n                                  11111111\
    \  spare\n                                  Ref.: ITU-T Q.763\n   TMRSR      \
    \   9002   1 octet   Transmission Medium\n                                  Requirement\
    \ Subrate\n                                  0     unspecified\n             \
    \                     1      8 kbit/s\n                                  2   \
    \  16 kbit/s\n                                  3     32 kbit/s\n   Contcheck\
    \     9003   Boolean   Continuity Check\n                                  0 \
    \    continuity check not\n                                  required on this\
    \ circuit\n                                  1     continuity check\n        \
    \                          required on this circuit\n                        \
    \          Ref.: ITU-T Q.763\n   ITC           9004   5 bits    Information Transfer\n\
    \                                  Capability\n                              \
    \    Bits\n                                  5 4 3 2 1\n                     \
    \             ---------\n                                  0 0 0 0 0     Speech\n\
    \                                  0 1 0 0 0     Unrestricted\n              \
    \                    digital information\n                                  0\
    \ 1 0 0 1     Restricted\n                                  digital information\n\
    \                                  1 0 0 0 0     3.1 kHz audio\n             \
    \                     1 0 0 0 1     Unrestricted\n                           \
    \       digital information with\n                                  tones/announcements\n\
    \                                  1 1 0 0 0     Video\n                     \
    \             All other values are\n                                  reserved.\n\
    \                                  Ref.: ITU-T Q.763\n   TransMode     9005  \
    \ 2 bits    Transfer Mode\n                                  Bits\n          \
    \                        2 1\n                                  ---\n        \
    \                          0 0     Circuit mode\n                            \
    \      1 0     Packet mode\n                                  Ref.: ITU-T Q.931\n\
    \   TransRate     9006   5 bits    Transfer Rate\n                           \
    \       Bits\n                                  5 4 3 2 1\n                  \
    \                ---------\n                                  0 0 0 0 0     This\
    \ code shall\n                                  be used for packet mode calls\n\
    \                                  1 0 0 0 0      64 kbit/s\n                \
    \                  1 0 0 0 1  2 x 64 kbit/s\n                                \
    \  1 0 0 1 1     384 kbit/s\n                                  1 0 1 0 1    1536\
    \ kbit/s\n                                  1 0 1 1 1    1920 kbit/s\n       \
    \                           1 1 0 0 0  Multirate (64\n                       \
    \           kbit/s base rate)\n                                  Ref.: ITU-T Q.931\n\
    \   MULT          9007   7 bits    Rate Multiplier\n                         \
    \         Any value from 2 to n\n                                  (maximum number\
    \ of B-\n                                  channels)\n                       \
    \           Ref.: ITU-T Q.931\n   layer1prot    9008   5 bits    User Information\
    \ Layer 1\n                                  Protocol\n                      \
    \            Bits\n                                  5 4 3 2 1\n             \
    \                     ---------\n                                  0 0 0 0 1 \
    \    ITU-T\n                                  standardized rate adaption\n   \
    \                               V.110 and X.30.\n                            \
    \      0 0 0 1 0     Recommendation\n                                  G.711 m-law\n\
    \                                  0 0 0 1 1     Recommendation\n            \
    \                      G.711 A-law\n                                  0 0 1 0\
    \ 0     Recommendation\n                                  G.721 32 kbit/s ADPCM\
    \ and\n                                  Recommendation I.460\n              \
    \                    0 0 1 0 1     Recommendations\n                         \
    \         H.221 and H.242\n                                  0 0 1 1 0     Recommendations\n\
    \                                  H.223 and H.245\n                         \
    \         0 0 1 1 1     Non-ITU-T\n                                  standardized\
    \ rate adaption.\n                                  0 1 0 0 0     ITU-T\n    \
    \                              standardized rate adaption\n                  \
    \                V.120.\n                                  0 1 0 0 1     ITU-T\n\
    \                                  standardized rate adaption\n              \
    \                    X.31 HDLC flag stuffing\n                               \
    \   All other values are\n                                  reserved.\n      \
    \                            Ref.: ITU Recommendation\n                      \
    \            Q.931\n   syncasync     9009   Boolean   Synchronous/Asynchronous\n\
    \                                  0     Synchronous data\n                  \
    \                1     Asynchronous data\n                                  Ref.:\
    \ ITU-T Q.931\n   negotiation   900A   Boolean   Negotiation\n               \
    \                   0     In-band negotiation\n                              \
    \    possible\n                                  1     In-band negotiation not\n\
    \                                  possible\n                                \
    \  Ref.: ITU-T Q.931\n   Userrate      900B   5 bits    User Rate\n          \
    \                        Bits\n                                  5 4 3 2 1\n \
    \                                 ---------\n                                \
    \  0 0 0 0 0     Rate is\n                                  indicated by E-bits\
    \ specified\n                                  in Recommendation I.460 or\n  \
    \                                may be negotiated in-band\n                 \
    \                 0 0 0 0 1     0.6 kbit/s\n                                 \
    \ Recommendations V.6 and X.1\n                                  0 0 0 1 0   \
    \  1.2 kbit/s\n                                  Recommendation V.6\n        \
    \                          0 0 0 1 1     2.4 kbit/s\n                        \
    \          Recommendations V.6 and X.1\n                                  0 0\
    \ 1 0 0     3.6 kbit/s\n                                  Recommendation V.6\n\
    \                                  0 0 1 0 1     4.8 kbit/s\n                \
    \                  Recommendations V.6 and X.1\n                             \
    \     0 0 1 1 0     7.2 kbit/s\n                                  Recommendation\
    \ V.6\n                                  0 0 1 1 1     8 kbit/s\n            \
    \                      Recommendation I.460\n                                \
    \  0 1 0 0 0     9.6 kbit/s\n                                  Recommendations\
    \ V.6 and X.1\n                                  0 1 0 0 1     14.4 kbit/s\n \
    \                                 Recommendation V.6\n                       \
    \           0 1 0 1 0     16 kbit/s\n                                  Recommendation\
    \ I.460\n                                  0 1 0 1 1     19.2 kbit/s\n       \
    \                           Recommendation V.6\n                             \
    \     0 1 1 0 0     32 kbit/s\n                                  Recommendation\
    \ I.460\n                                  0 1 1 0 1     38.4 kbit/s\n       \
    \                           Recommendation V.110\n                           \
    \       0 1 1 1 0     48 kbit/s\n                                  Recommendations\
    \ V.6 and X.1\n                                  0 1 1 1 1     56 kbit/s\n   \
    \                               Recommendation V.6\n                         \
    \         1 0 0 1 0     57.6 kbit/s\n                                  Recommendation\
    \ V.14 extended\n                                  1 0 0 1 1     28.8 kbit/s\n\
    \                                  Recommendation V.110\n                    \
    \              1 0 1 0 0     24 kbit/s\n                                  Recommendation\
    \ V.110\n                                  1 0 1 0 1     0.1345 kbit/s\n     \
    \                             Recommendation X.1\n                           \
    \       1 0 1 1 0     0.100 kbit/s\n                                  Recommendation\
    \ X.1\n                                  1 0 1 1 1     0.075/1.2\n           \
    \                       kbit/s Recommendations V.6\n                         \
    \         and X.1\n                                  1 1 0 0 0     1.2/0.075\n\
    \                                  kbit/s Recommendations V.6\n              \
    \                    and X.1\n                                  1 1 0 0 1    \
    \ 0.050 kbit/s\n                                  Recommendations V.6 and X.1\n\
    \                                  1 1 0 1 0     0.075 kbit/s\n              \
    \                    Recommendations V.6 and X.1\n                           \
    \       1 1 0 1 1     0.110 kbit/s\n                                  Recommendations\
    \ V.6 and X.1\n                                  1 1 1 0 0     0.150 kbit/s\n\
    \                                  Recommendations V.6 and X.1\n             \
    \                     1 1 1 0 1     0.200 kbit/s\n                           \
    \       Recommendations V.6 and X.1\n                                  1 1 1 1\
    \ 0     0.300 kbit/s\n                                  Recommendations V.6 and\
    \ X.1\n                                  1 1 1 1 1     12 kbit/s\n           \
    \                       Recommendation V.6\n                                 \
    \ All other values are\n                                  reserved.\n        \
    \                          Ref.: ITU-T Q.931\n   INTRATE       900C   2 bits \
    \   Intermediate Rate\n                                  Bits\n              \
    \                    2 1\n                                  ---\n            \
    \                      0 0     Not used\n                                  0 1\
    \     8 kbit/s\n                                  1 0     16 kbit/s\n        \
    \                          1 1     32 kbit/s\n                               \
    \   Ref.: ITU-T Q.931\n   nictx         900D   Boolean   Network Independent Clock\n\
    \                                  (NIC) on transmission\n                   \
    \               0     Not required to send\n                                 \
    \ data with network independent\n                                  clock\n   \
    \                               1     Required to send data\n                \
    \                  with network independent\n                                \
    \  clock\n                                  Ref.: ITU-T Q.931\n   nicrx      \
    \   900E   Boolean   Network independent clock\n                             \
    \     (NIC) on reception\n                                  0     Cannot accept\
    \ data with\n                                  network independent clock\n   \
    \                               (i.e., sender does not support\n             \
    \                     this optional procedure)\n                             \
    \     1     Can accept data with\n                                  network independent\
    \ clock\n                                  (i.e., sender does support\n      \
    \                            this optional procedure)\n                      \
    \            Ref.: ITU-T Q.931\n   flowconttx    900F   Boolean   Flow Control\
    \ on transmission\n                                  (Tx)\n                  \
    \                0     Not required to send\n                                \
    \  data with flow control\n                                  mechanism\n     \
    \                             1     Required to send data\n                  \
    \                with flow control mechanism\n                               \
    \   Ref.: ITU-T Q.931\n   flowcontrx    9010   Boolean   Flow control on reception\n\
    \                                  (Rx)\n                                  0 \
    \    Cannot accept data with\n                                  flow control mechanism\
    \ (i.e.,\n                                  sender does not support this\n   \
    \                               optional procedure)\n                        \
    \          1     Can accept data with\n                                  flow\
    \ control mechanism (i.e.,\n                                  sender does support\
    \ this\n                                  optional procedure)\n              \
    \                    Ref.: ITU-T Q.931\n   rateadapthdr  9011   Boolean   Rate\
    \ adaption header/no\n                                  header\n             \
    \                     0     Rate adaption header\n                           \
    \       not included\n                                  1     Rate adaption header\n\
    \                                  included\n                                \
    \  Ref.: ITU-T Q.931\n   multiframe    9012   Boolean   Multiple frame establishment\n\
    \                                  support in data link\n                    \
    \              0     Multiple frame\n                                  establishment\
    \ not supported.\n                                  Only UI frames allowed\n \
    \                                 1     Multiple frame\n                     \
    \             establishment supported\n                                  Ref.:\
    \ ITU-T Q.931\n   OPMODE        9013   Boolean   Mode of operation\n         \
    \                         0     Bit transparent mode of\n                    \
    \              operation\n                                  1     Protocol sensitive\
    \ mode\n                                  of operation\n                     \
    \             Ref.: ITU-T Q.931\n   llidnegot     9014   Boolean   Logical link\
    \ identifier\n                                  negotiation\n                \
    \                  0     Default, LLI = 256 only\n                           \
    \       1     Full protocol\n                                  negotiation\n \
    \                                 Ref.: ITU-T Q.931\n   assign        9015   Boolean\
    \   Assignor/assignee\n                                  0     Message originator\
    \ is\n                                  \"default assignee\"\n               \
    \                   1     Message originator is\n                            \
    \      \"assignor only\"\n                                  Ref.: ITU-T Q.931\n\
    \   inbandneg     9016   Boolean   In-band/out-band negotiation\n            \
    \                      0     Negotiation is done\n                           \
    \       with USER INFORMATION\n                                  messages on a\
    \ temporary\n                                  signalling connection\n       \
    \                           1     Negotiation is done in-\n                  \
    \                band using logical link zero\n                              \
    \    Ref.: ITU-T Q.931\n   stopbits      9017   2 bits    Number of stop bits\n\
    \                                  Bits\n                                  2 1\n\
    \                                  ---\n                                  0 0\
    \     Not used\n                                  0 1     1 bit\n            \
    \                      1 0     1.5 bits\n                                  1 1\
    \     2 bits\n                                  Ref.: ITU-T Q.931\n   databits\
    \      9018   2 bits    Number of data bits excluding\n                      \
    \            parity bit if present\n                                  Bits\n \
    \                                 2 1\n                                  ---\n\
    \                                  0 0     Not used\n                        \
    \          0 1     5 bits\n                                  1 0     7 bits\n\
    \                                  1 1     8 bits\n                          \
    \        Ref.: ITU-T Q.931\n   parity        9019   3 bits    Parity information\n\
    \                                  Bits\n                                  3 2\
    \ 1\n                                  ------\n                              \
    \    0 0 0     Odd\n                                  0 1 0     Even\n       \
    \                           0 1 1     None\n                                 \
    \ 1 0 0     Forced to 0\n                                  1 0 1     Forced to\
    \ 1\n                                  All other values are\n                \
    \                  reserved.\n                                  Ref.: ITU-T Q.931\n\
    \   duplexmode    901A   Boolean   Mode duplex\n                             \
    \     0     Half duplex\n                                  1     Full duplex\n\
    \                                  Ref.: ITU-T Q.931\n   modem         901B  \
    \ 6 bits    Modem Type\n                                  Bits\n             \
    \                     6 5 4 3 2 1\n                                  -----------\n\
    \                                  0 0 0 0 0 0 through\n                     \
    \             0 0 0 1 0 1   National use\n                                  0\
    \ 1 0 0 0 1   Rec.  V.21\n                                  0 1 0 0 1 0     Rec.\
    \  V.22\n                                  0 1 0 0 1 1     Rec.  V.22 bis\n  \
    \                                0 1 0 1 0 0     Rec.  V.23\n                \
    \                  0 1 0 1 0 1     Rec.  V.26\n                              \
    \    0 1 1 0 0 1     Rec.  V.26 bis\n                                  0 1 0 1\
    \ 1 1     Rec.  V.26 ter\n                                  0 1 1 0 0 0     Rec.\
    \  V.27\n                                  0 1 1 0 0 1     Rec.  V.27 bis\n  \
    \                                0 1 1 0 1 0     Rec.  V.27 ter\n            \
    \                      0 1 1 0 1 1     Rec.  V.29\n                          \
    \        0 1 1 1 0 1     Rec.  V.32\n                                  0 1 1 1\
    \ 1 0     Rec.  V.34\n                                  1 0 0 0 0 0  through\n\
    \                                  1 0 1 1 1 1    National use\n             \
    \                     1 1 0 0 0 0  through\n                                 \
    \ 1 1 1 1 1 1    User specified\n                                  Ref.: ITU-T\
    \ Q.931\n   layer2prot    901C   5 bits    User information layer 2\n        \
    \                          protocol\n                                  Bits\n\
    \                                  5 4 3 2 1\n                               \
    \   ---------\n                                  0 0 0 1 0    Rec.  Q.921/I.441\n\
    \                                  0 0 1 1 0    Rec.  X.25, link\n           \
    \                       layer\n                                  0 1 1 0 0   \
    \ LAN logical link\n                                  control (ISO/IEC 8802  2)\n\
    \                                  All other values are\n                    \
    \              reserved.\n                                  Ref.: ITU-T Q.931\n\
    \   layer3prot    901D   5 bits    User information layer 3\n                \
    \                  protocol\n                                  Bits\n        \
    \                          5 4 3 2 1\n                                  ---------\n\
    \                                  0 0 0 1 0     ITU-T Q.931\n               \
    \                   0 0 1 1 0     ITU-T X.25,\n                              \
    \    packet layer\n                                  0 1 0 1 1     ISO/IEC TR\
    \ 9577\n                                  (Protocol identification in\n      \
    \                            the network layer)\n                            \
    \      All other values are\n                                  reserved.\n   \
    \                               Ref.: ITU-T Q.931\n   addlayer3prot 901E   Octet\
    \     Additional User Information\n                                  layer 3 protocol\n\
    \                                  Bits        Bits\n                        \
    \          4 3 2 1     4 3 2 1\n                                  -------    \
    \ -------\n                                  1 1 0 0     1 1 0 0\n           \
    \                       Internet Protocol (RFC 791)\n                        \
    \          (ISO/IEC TR 9577)\n                                  1 1 0 0     1\
    \ 1 1 1\n                                  Point-to-point Protocol (RFC\n    \
    \                              1661)\n                                  Ref.:\
    \ ITU-T Q.931\n   DialledN      901F   30        Dialled Number\n            \
    \            octets\n   DiallingN     9020   30        Dialling Number\n     \
    \                   octets\n   ECHOCI        9021             Not Used.  See H.248.1\
    \ E.13\n                                  for an example of possible\n       \
    \                           Echo Control properties.\n   NCI           9022  \
    \ 1 octet   Nature of Connection\n                                  Indicators\n\
    \                                  Bits\n                                  2 1\
    \     Satellite Indicator\n                                  ---\n           \
    \                       0 0     no satellite circuit\n                       \
    \           in the connection\n                                  0 1     one satellite\
    \ circuit\n                                  in the connection\n             \
    \                     1 0     two satellite\n                                \
    \  circuits in the connection\n                                  1 1     spare\n\
    \                                  Bits\n                                  4 3\
    \     Continuity check\n                                  ---     indicator\n\
    \                                  0 0     continuity check not\n            \
    \                      required\n                                  0 1     continuity\
    \ check\n                                  required on this circuit\n        \
    \                          1 0     continuity check\n                        \
    \          performed on a previous\n                                  circuit\n\
    \                                  1 1     spare\n                           \
    \       Bit\n                                  5     Echo control device\n   \
    \                               -     indicator\n                            \
    \      0     outgoing echo control\n                                  device not\
    \ included\n                                  1     outgoing echo control\n  \
    \                                device included\n                           \
    \       Bits\n                                  8 7 6     Spare\n            \
    \                      Ref.: ITU-T Q.763\n   USI           9023   Octet     User\
    \ Service Information\n                        string    Ref.: ITU-T Q.763 Clause\
    \ 3.57\n"
- title: C.10  AAL5 properties
  contents:
  - "C.10  AAL5 properties\n   PropertyID Property    Type       Value\n         \
    \     tag\n   FMSDU      A001        32-bit     Forward Maximum CPCS-SDU Size:\n\
    \                          integer    Maximum CPCS-SDU size sent in the\n    \
    \                                 direction from the calling user to\n       \
    \                              the called user.\n                            \
    \         Ref.: ITU-T Q.2931\n   BMSDU      A002        32-bit     Backwards Maximum\
    \ CPCS-SDU Size:\n                          integer    Maximum CPCS-SDU size sent\
    \ in the\n                                     direction from the called user\
    \ to\n                                     the calling user.\n               \
    \                      Ref.: ITU-T Q.2931\n   SSCS       See table   See table\
    \  See table in C.7\n              in C.7      in C.7     Additional values:\n\
    \                                     VPI/VCI\n"
- title: C.11  SDP equivalents
  contents:
  - "C.11  SDP equivalents\n   PropertyID Property    Type   Value\n             \
    \ tag\n   SDP_V      B001        String Protocol Version\n                   \
    \               Ref.: RFC 2327\n   SDP_O      B002        String Owner/creator\
    \ and session ID\n                                  Ref.: RFC 2327\n   SDP_S \
    \     B003        String Session name\n                                  Ref.:\
    \ RFC 2327\n   SDP_I      B004        String Session identifier\n            \
    \                      Ref.: RFC 2327\n   SDP_U      B005        String URI of\
    \ descriptor\n                                  Ref.: RFC 2327\n   SDC_E     \
    \ B006        String email address\n                                  Ref.: RFC\
    \ 2327\n   SDP_P      B007        String phone number\n                      \
    \            Ref.: RFC 2327\n   SDP_C      B008        String Connection information\n\
    \                                  Ref.: RFC 2327\n   SDP_B      B009        String\
    \ Bandwidth Information\n                                  Ref.: RFC 2327\n  \
    \ SDP_Z      B00A        String Time zone adjustment\n                       \
    \           Ref.: RFC 2327\n   SDP_K      B00B        String Encryption Key\n\
    \                                  Ref.: RFC 2327\n   SDP_A      B00C        String\
    \ Zero or more session attributes\n                                  Ref.: RFC\
    \ 2327\n   SDP_T      B00D        String Active Session Time\n               \
    \                   Ref.: RFC 2327\n   SDP_R      B00E        String Zero or more\
    \ repeat times\n                                  Reference: RFC 2327\n   SDP_M\
    \      B00F        String Media type, port, transport and format\n           \
    \                       Ref.: RFC 2327\n"
- title: C.12  H.245
  contents:
  - "C.12  H.245\n   PropertyID Property   Type     Value\n              tag\n   OLC\
    \        C001       Octet    The value of H.245\n                            \
    \       OpenLogicalChannel structure.\n                         string   Ref.:\
    \ ITU-T H.245\n   OLCack     C002       Octet    The value of H.245\n        \
    \                 string   OpenLogicalChannelAck structure.\n                \
    \                   Ref.: ITU-T H.245\n   OLCcnf     C003       Octet    The value\
    \ of H.245\n                         string   OpenLogicalChannelConfirm structure.\n\
    \                                   Ref.: ITU-T H.245\n   OLCrej     C004    \
    \   Octet    The value of H.245\n                         string   OpenLogicalChannelReject\
    \ structure.\n                                   Ref.: ITU-T H.245\n   CLC   \
    \     C005       Octet    The value of H.245\n                         string\
    \   CloseLogicalChannel structure.\n                                   Ref.: ITU-T\
    \ H.245\n   CLCack     C006       Octet    The value of H.245\n              \
    \           string   CloseLogicalChannelAck structure.\n                     \
    \              Ref.: ITU-T H.245\n"
- title: ANNEX D - Transport over IP
  contents:
  - 'ANNEX D - Transport over IP

    '
- title: D.1   Transport over IP/UDP using Application Level Framing (ALF)
  contents:
  - "D.1   Transport over IP/UDP using Application Level Framing (ALF)\n   Protocol\
    \ messages defined in this RFC may be transmitted over UDP.\n   When no port is\
    \ provided by the peer (see 7.2.8), commands should be\n   sent to the default\
    \ port number: 2944 for text-encoded operation, or\n   2945 for binary-encoded\
    \ operation.  Responses must be sent to the\n   address and port from which the\
    \ corresponding commands were sent.\n   ALF is a set of techniques that allows\
    \ an application, as opposed to\n   a stack, to affect how messages are sent to\
    \ the other side.  A\n   typical ALF technique is to allow an application to change\
    \ the order\n   of messages sent when there is a queue after it has queued them.\n\
    \   There is no formal specification for ALF.  The procedures in Annex\n   D.1\
    \ contain a minimum suggested set of ALF behaviours\n   Implementors using IP/UDP\
    \ with ALF should be aware of the\n   restrictions of the MTU on the maximum message\
    \ size.\n"
- title: D.1.1 Providing At-Most-Once functionality
  contents:
  - "D.1.1 Providing At-Most-Once functionality\n   Messages, being carried over UDP,\
    \ may be subject to losses.  In the\n   absence of a timely response, commands\
    \ are repeated.  Most commands\n   are not idempotent.  The state of the MG would\
    \ become unpredictable\n   if, for example, Add commands were executed several\
    \ times.  The\n   transmission procedures shall thus provide an \"At-Most-Once\"\
    \n   functionality.\n   Peer protocol entities are expected to keep in memory\
    \ a list of the\n   responses that they sent to recent transactions and a list\
    \ of the\n   transactions that are currently outstanding.  The transaction\n \
    \  identifier of each incoming message is compared to the transaction\n   identifiers\
    \ of the recent responses sent to the same MId.  If a match\n   is found, the\
    \ entity does not execute the transaction, but simply\n   repeats the response.\
    \  If no match is found, the message will be\n   compared to the list of currently\
    \ outstanding transactions.  If a\n   match is found in that list, indicating\
    \ a duplicate transaction, the\n   entity does not execute the transaction (see\
    \ D.1.4 for procedures on\n   sending TransactionPending).\n   The procedure uses\
    \ a long timer value, noted LONG-TIMER in the\n   following.  The timer should\
    \ be set larger than the maximum duration\n   of a transaction, which should take\
    \ into account the maximum number\n   of repetitions, the maximum value of the\
    \ repetition timer and the\n   maximum propagation delay of a packet in the network.\
    \  A suggested\n   value is 30 seconds.\n   The copy of the responses may be destroyed\
    \ either LONG-TIMER seconds\n   after the response is issued, or when the entity\
    \ receives a\n   confirmation that the response has been received, through the\n\
    \   \"Response Acknowledgement parameter\".  For transactions that are\n   acknowledged\
    \ through this parameter, the entity shall keep a copy of\n   the transaction-id\
    \ for LONG-TIMER seconds after the response is\n   issued, in order to detect\
    \ and ignore duplicate copies of the\n   transaction request that could be produced\
    \ by the network.\n"
- title: D.1.2 Transaction identifiers and three-way handshake
  contents:
  - 'D.1.2 Transaction identifiers and three-way handshake

    '
- title: D.1.2.1  Transaction identifiers
  contents:
  - "D.1.2.1  Transaction identifiers\n   Transaction identifiers are 32-bit integer\
    \ numbers.  A Media Gateway\n   Controller may decide to use a specific number\
    \ space for each of the\n   MGs that they manage, or to use the same number space\
    \ for all MGs\n   that belong to some arbitrary group.  MGCs may decide to share\
    \ the\n   load of managing a large MG between several independent processes.\n\
    \   These processes will share the same transaction number space.  There\n   are\
    \ multiple possible implementations of this sharing, such as having\n   a centralized\
    \ allocation of transaction identifiers, or\n   pre-allocating non-overlapping\
    \ ranges of identifiers to different\n   processes.  The implementations shall\
    \ guarantee that unique\n   transaction identifiers are allocated to all transactions\
    \ that\n   originate from a logical MGC (identical mId).  MGs can simply detect\n\
    \   duplicate transactions by looking at the transaction identifier and\n   mId\
    \ only.\n"
- title: D.1.2.2  Three-way handshake
  contents:
  - "D.1.2.2  Three-way handshake\n   The TransactionResponse Acknowledgement parameter\
    \ can be found in any\n   message.  It carries a set of \"confirmed transaction-id\
    \ ranges\".\n   Entities may choose to delete the copies of the responses to\n\
    \   transactions whose id is included in \"confirmed transaction-id\n   ranges\"\
    \ received in the transaction response messages.  They should\n   silently discard\
    \ further commands when the transaction-id falls\n   within these ranges.\n  \
    \ The \"confirmed transaction-id ranges\" values shall not be used if\n   more\
    \ than LONG-TIMER seconds have elapsed since the MG issued its\n   last response\
    \ to that MGC, or when a MG resumes operation.  In this\n   situation, transactions\
    \ should be accepted and processed, without any\n   test on the transaction-id.\n\
    \   Messages that carry the \"Transaction Response Acknowledgement\"\n   parameter\
    \ may be transmitted in any order.  The entity shall retain\n   the \"confirmed\
    \ transaction-id ranges\" received for LONG-TIMER\n   seconds.\n   In the binary\
    \ encoding, if only the firstAck is present in a response\n   acknowledgement\
    \ (see A.2), only one transaction is acknowledged.  If\n   both firstAck and lastAck\
    \ are present, then the range of transactions\n   from firstAck to lastAck is\
    \ acknowledged.  In the text encoding, a\n   horizontal dash is used to indicate\
    \ a range of transactions being\n   acknowledged (see B.2).\n"
- title: D.1.3 Computing retransmission timers
  contents:
  - "D.1.3 Computing retransmission timers\n   It is the responsibility of the requesting\
    \ entity to provide suitable\n   timeouts for all outstanding transactions, and\
    \ to retry transactions\n   when timeouts have been exceeded.  Furthermore, when\
    \ repeated\n   transactions fail to be acknowledged, it is the responsibility\
    \ of the\n   requesting entity to seek redundant services and/or clear existing\
    \ or\n   pending connections.\n   The specification purposely avoids specifying\
    \ any value for the\n   retransmission timers.  These values are typically network\
    \ dependent.\n   The retransmission timers should normally estimate the timer\
    \ value by\n   measuring the time spent between the sending of a command and the\n\
    \   return of a response.  Implementations SHALL ensure that the\n   algorithm\
    \ used to calculate retransmission timing performs an\n   exponentially increasing\
    \ backoff of the retransmission timeout for\n   each retransmission or repetition\
    \ after the first one.\n     NOTE - One possibility is to use the algorithm implemented\
    \ in\n     TCP-IP, which uses two variables:\n   -  The average acknowledgement\
    \ delay (AAD), estimated through an\n      exponentially smoothed average of the\
    \ observed delays.\n   -  The average deviation (ADEV), estimated through an exponentially\n\
    \      smoothed average of the absolute value of the difference between\n    \
    \  the observed delay and the current average.  The retransmission\n      timer,\
    \ in TCP, is set to the sum of the average delay plus N times\n      the average\
    \ deviation.  The maximum value of the timer should\n      however be bounded\
    \ for the protocol defined in this\n      RFC, in order to guarantee that no repeated\
    \ packet\n      would be received by the gateways after LONG-TIMER seconds.  A\n\
    \      suggested maximum value is 4 seconds.\n   After any retransmission, the\
    \ entity SHOULD do the following:\n   -  It should double the estimated value\
    \ of the average delay, AAD.\n   -  It should compute a random value, uniformly\
    \ distributed between\n      0.5 AAD and AAD.\n   -  It should set the retransmission\
    \ timer to the sum of that random\n      value and N times the average deviation.\n\
    \   This procedure has two effects.  Because it includes an exponentially\n  \
    \ increasing component, it will automatically slow down the stream of\n   messages\
    \ in case of congestion.  Because it includes a random\n   component, it will\
    \ break the potential synchronization between\n   notifications triggered by the\
    \ same external event.\n"
- title: D.1.4 Provisional responses
  contents:
  - "D.1.4 Provisional responses\n   Executing some transactions may require a long\
    \ time.  Long execution\n   times may interact with the timer-based retransmission\
    \ procedure.\n   This may result either in an inordinate number of retransmissions,\
    \ or\n   in timer values that become too long to be efficient.  Entities that\n\
    \   can predict that a transaction will require a long execution time may\n  \
    \ send a provisional response, \"Transaction Pending\".  They SHOULD send\n  \
    \ this response if they receive a repetition of a transaction that is\n   still\
    \ being executed.\n   Entities that receive a Transaction Pending shall switch\
    \ to a\n   different repetition timer for repeating requests.  The root\n   Termination\
    \ has a property (ProvisionalResponseTimerValue), which can\n   be set to the\
    \ requested maximum number of milliseconds between\n   receipt of a command and\
    \ transmission of the TransactionPending\n   response.  Upon receipt of a final\
    \ response following receipt of\n   provisional responses, an immediate confirmation\
    \ shall be sent, and\n   normal repetition timers shall be used thereafter.  An\
    \ entity that\n   sends a provisional response, SHALL include the immAckRequired\
    \ field\n   in the ensuing final response, indicating that an immediate\n   confirmation\
    \ is expected.  Receipt of a Transaction Pending after\n   receipt of a reply\
    \ shall be ignored.\n"
- title: D.1.5 Repeating Requests, Responses and Acknowledgements
  contents:
  - "D.1.5 Repeating Requests, Responses and Acknowledgements\n   The protocol is\
    \ organized as a set of transactions, each of which is\n   composed of a request\
    \ and a response, commonly referred to as an\n   acknowledgement.  The protocol\
    \ messages, being carried over UDP, may\n   be subject to losses.  In the absence\
    \ of a timely response,\n   transactions are repeated.  Entities are expected\
    \ to keep in memory a\n   list of the responses that they sent to recent transactions,\
    \ i.e., a\n   list of all the responses they sent over the last LONG-TIMER seconds,\n\
    \   and a list of the transactions that are currently being executed.\n   The\
    \ repetition mechanism is used to guard against three types of\n   possible errors:\n\
    \   -  transmission errors, when for example a packet is lost due to\n      noise\
    \ on a line or congestion in a queue;\n   -  component failure, when for example\
    \ an interface to a entity\n      becomes unavailable;\n   -  entity failure,\
    \ when for example an entire entity becomes\n      unavailable.\n   The entities\
    \ should be able to derive from the past history an\n   estimate of the packet\
    \ loss rate due to transmission errors.  In a\n   properly configured system,\
    \ this loss rate should be kept very low,\n   typically less than 1%.  If a Media\
    \ Gateway Controller or a Media\n   Gateway has to repeat a message more than\
    \ a few times, it is very\n   legitimate to assume that something else than a\
    \ transmission error is\n   occurring.   For example, given a loss rate of 1%,\
    \ the probability\n   that five consecutive transmission attempts fail is 1 in\
    \ 100 billion,\n   an event that should occur less than once every 10 days for\
    \ a Media\n   Gateway Controller that processes 1000 transactions per second.\n\
    \   (Indeed, the number of repetition that is considered excessive should\n  \
    \ be a function of the prevailing packet loss rate.)  We should note\n   that\
    \ the \"suspicion threshold\", which we will call \"Max1\", is\n   normally lower\
    \ than the \"disconnection threshold\", which should be\n   set to a larger value.\n\
    \   A classic retransmission algorithm would simply count the number of\n   successive\
    \ repetitions, and conclude that the association is broken\n   after retransmitting\
    \ the packet an excessive number of times\n   (typically between 7 and 11 times.)\
    \  In order to account for the\n   possibility of an undetected or in  progress\
    \ \"failover\", we modify\n   the classic algorithm so that if the Media Gateway\
    \ receives a valid\n   ServiceChange message announcing a failover, it will start\n\
    \   transmitting outstanding commands to that new MGC.  Responses to\n   commands\
    \ are still transmitted to the source address of the command.\n   In order to\
    \ automatically adapt to network load, this RFC specifies\n   exponentially increasing\
    \ timers.  If the initial timer is set to 200\n   milliseconds, the loss of a\
    \ fifth retransmission will be detected\n   after about 6 seconds.  This is probably\
    \ an acceptable waiting delay\n   to detect a failover.  The repetitions should\
    \ continue after that\n   delay not only in order to perhaps overcome a transient\
    \ connectivity\n   problem, but also in order to allow some more time for the\
    \ execution\n   of a failover  (waiting a total delay of 30 seconds is probably\n\
    \   acceptable).\n   It is, however, important that the maximum delay of retransmissions\n\
    \   be bounded.  Prior to any retransmission, it is checked that the time\n  \
    \ elapsed since the sending of the initial datagram is no greater than\n   T-MAX.\
    \  If more than T-MAX time has elapsed, the MG concludes that\n   the MGC has\
    \ failed, and it begins its recovery process as described\n   in section 11.5.\
    \  If the MG retries to connect to the current MGC it\n   shall use a ServiceChange\
    \ with ServiceChangeMethod set to\n   Disconnected so that the new MGC will be\
    \ aware that the MG lost one\n   or more transactions.  The value T-MAX is related\
    \ to the LONG-TIMER\n   value: the LONG-TIMER value is obtained by adding to T\
    \  MAX the\n   maximum propagation delay in the network.\n"
- title: D.2   Using TCP
  contents:
  - "D.2   Using TCP\n   Protocol messages as defined in this RFC may be transmitted\
    \ over TCP.\n   When no port is specified by the other side (see 7.2.8), the commands\n\
    \   should be sent to the default port.  The defined protocol has\n   messages\
    \ as the unit of transfer, while TCP is a stream-oriented\n   protocol.  TPKT,\
    \ according to RFC 1006, SHALL be used to delineate\n   messages within the TCP\
    \ stream.\n   In a transaction-oriented protocol, there are still ways for\n \
    \  transaction requests or responses to be lost.  As such, it is\n   recommended\
    \ that entities using TCP transport implement application\n   level timers for\
    \ each request and each response, similar to those\n   specified for application\
    \ level framing over UDP.\n"
- title: D.2.1 Providing the At-Most-Once functionality
  contents:
  - "D.2.1 Providing the At-Most-Once functionality\n   Messages, being carried over\
    \ TCP, are not subject to transport\n   losses, but loss of a transaction request\
    \ or its reply may\n   nonetheless be noted in real implementations.  In the absence\
    \ of a\n   timely response, commands are repeated.  Most commands are not\n  \
    \ idempotent.  The state of the MG would become unpredictable if, for\n   example,\
    \ Add commands were executed several times.\n   To guard against such losses,\
    \ it is recommended that entities follow\n   the procedures in D.1.1.\n"
- title: D.2.2 Transaction identifiers and three-way handshake
  contents:
  - "D.2.2 Transaction identifiers and three-way handshake\n   For the same reasons,\
    \ it is possible that transaction replies may be\n   lost even with a reliable\
    \ delivery protocol such as TCP.  It is\n   recommended that entities follow the\
    \ procedures in D.1.2.2.\n"
- title: D.2.3 Computing retransmission timers
  contents:
  - "D.2.3 Computing retransmission timers\n   With reliable delivery, the incidence\
    \ of loss of a transaction\n   request or reply is expected to be very low.  Therefore,\
    \ only simple\n   timer mechanisms are required.  Exponential back-off algorithms\n\
    \   should not be necessary, although they could be employed where, as in\n  \
    \ an MGC, the code to do so is already required, since MGCs must\n   implement\
    \ ALF/UDP as well as TCP.\n"
- title: D.2.4 Provisional responses
  contents:
  - "D.2.4 Provisional responses\n   As with UDP, executing some transactions may\
    \ require a long time.\n   Entities that can predict that a transaction will require\
    \ a long\n   execution time may send a provisional response, \"Transaction\n \
    \  Pending\".  They should send this response if they receive a\n   repetition\
    \ of a transaction that is still being executed.\n   Entities that receive a Transaction\
    \ Pending shall switch to a longer\n   repetition timer for that transaction.\n\
    \   Entities shall retain Transactions and replies until they are\n   confirmed.\
    \  The basic procedure of D.1.4 should be followed, but\n   simple timer values\
    \ should be sufficient.  There is no need to send\n   an immediate confirmation\
    \ upon receipt of a final response.\n"
- title: D.2.5 Ordering of commands
  contents:
  - "D.2.5 Ordering of commands\n   TCP provides ordered delivery of transactions.\
    \  No special procedures\n   are required.  It should be noted that ALF/UDP allows\
    \ sending entity\n   to modify its behaviour under congestion, and in particular,\
    \ could\n   reorder transactions when congestion is encountered.  TCP could not\n\
    \   achieve the same results.\n"
- title: ANNEX E - Basic packages
  contents:
  - "ANNEX E - Basic packages\n   This annex contains definitions of some packages\
    \ for use with\n   Recommendation H.248.1.\n"
- title: E.1   Generic
  contents:
  - "E.1   Generic\n   PackageID: g (0x0001)\n   Version: 1\n   Extends: None\n  \
    \ Description:\n      Generic package for commonly encountered items.\n"
- title: E.1.1 Properties
  contents:
  - "E.1.1 Properties\n   None.\n"
- title: E.1.2 Events
  contents:
  - "E.1.2 Events\n   Cause\n      EventID: cause (0x0001)\n      Generic error event\n\
    \      EventsDescriptor parameters:  None\n      ObservedEvents Descriptor Parameters:\n\
    \         General Cause\n         ParameterID: Generalcause (0x0001)\n       \
    \     This parameter groups the failures into six groups, which\n            the\
    \ MGC may act upon.\n            Type: enumeration\n            Possible values:\n\
    \                     \"NR\" Normal Release (0x0001)\n                     \"\
    UR\" Unavailable Resources (0x0002)\n                     \"FT\" Failure, Temporary\
    \ (0x0003)\n                     \"FP\" Failure, Permanent (0x0004)\n        \
    \             \"IW\" Interworking Error (0x0005)\n                     \"UN\"\
    \ Unsupported (0x0006)\n         Failure Cause\n         ParameterID: Failurecause\
    \ (0x0002)\n            Possible values:  OCTET STRING\n            Description:\
    \ The Failure Cause is the value generated by the\n            Released equipment,\
    \ i.e., a released network connection.\n            The concerned value is defined\
    \ in the appropriate bearer\n            control protocol.\n   Signal Completion\n\
    \      EventID: sc (0x0002)\n      Indicates the termination of a signal for which\
    \ the\n      notifyCompletion parameter was set to enable reporting of a\n   \
    \   completion event.  For further procedural description, see 7.1.1,\n      7.1.17\
    \ and 7.2.7.\n      EventsDescriptor parameters:  None\n      ObservedEvents Descriptor\
    \ parameters:\n         Signal Identity\n         ParameterID: SigID (0x0001)\n\
    \            This parameter identifies the signal which has terminated.\n    \
    \        For a signal that is contained in a signal list, the signal\n       \
    \     list identity parameter should also be returned indicating\n           \
    \ the appropriate list.\n            Type: Binary: octet (string), Text: string\n\
    \            Possible values: a signal which has terminated.  A signal\n     \
    \       shall be identified using the pkgdName syntax without\n            wildcarding.\n\
    \         Termination Method\n         ParameterID: Meth (0x0002)\n          \
    \  Indicates the means by which the signal terminated.\n            Type: enumeration\n\
    \            Possible values:\n               \"TO\" (0x0001) Signal timed out\
    \ or otherwise completed on\n               its own\n               \"EV\" (0x0002)\
    \ Interrupted by event\n               \"SD\" (0x0003) Halted by new Signals descriptor\n\
    \               \"NC\" (0x0004) Not completed, other cause\n         Signal List\
    \ ID\n         ParameterID:  SLID (0x0003)\n            Indicates to which signal\
    \ list a signal belongs.  The\n            SignalList ID is only returned in cases\
    \ where the signal\n            resides in a signal list.\n            Type: integer\n\
    \            Possible values: any integer\n"
- title: E.1.3 Signals
  contents:
  - "E.1.3 Signals\n   None.\n"
- title: E.1.4 Statistics
  contents:
  - "E.1.4 Statistics\n   None.\n"
- title: E.2   Base Root Package
  contents:
  - "E.2   Base Root Package\n   PackageID: root (0x0002)\n   Version: 1\n   Extends:\
    \ None\n   Description:\n      This package defines Gateway wide properties.\n"
- title: E.2.1 Properties
  contents:
  - "E.2.1 Properties\n   MaxNrOfContexts\n   PropertyID: maxNumberOfContexts (0x0001)\n\
    \      The value of this property gives the maximum number of contexts\n     \
    \ that can exist at any time.  The NULL context is not included in\n      this\
    \ number.\n      Type: double\n      Possible values: 1 and up\n      Defined\
    \ in: TerminationState\n      Characteristics: read only\n   MaxTerminationsPerContext\n\
    \   PropertyID: maxTerminationsPerContext (0x0002)\n      The maximum number of\
    \ allowed terminations in a context, see 6.1\n      Type: integer\n      Possible\
    \ values: any integer\n      Defined in: TerminationState\n      Characteristics:\
    \ read only\n   normalMGExecutionTime\n   PropertyId: normalMGExecutionTime (0x0003)\n\
    \      Settable by the MGC to indicate the interval within which the MGC\n   \
    \   expects a response to any transaction from the MG (exclusive of\n      network\
    \ delay)\n      Type: integer\n      Possible values: any integer, represents\
    \ milliseconds\n      Defined in: TerminationState\n      Characteristics: read\
    \ / write\n   normalMGCExecutionTime\n   PropertyId: normalMGCExecutionTime (0x0004)\n\
    \      Settable by the MGC to indicate the interval within which the MG\n    \
    \  should expects a response to any transaction from the MGC\n      (exclusive\
    \ of network delay)\n      Type: integer\n      Possible values: any integer,\
    \ represents milliseconds\n      Defined in: TerminationState\n      Characteristics:\
    \ read / write\n   MGProvisionalResponseTimerValue\n   PropertyId: MGProvisionalResponseTimerValue\
    \ (0x0005)\n      Indicates the time within which the MGC should expect a Pending\n\
    \      Response from the MG if a Transaction cannot be completed.\n      Initially\
    \ set to normalMGExecutionTime plus network delay, but may\n      be lowered.\n\
    \      Type: Integer\n      Possible Values: any integer, represents milliseconds\n\
    \      Defined in: TerminationState\n      Characteristics: read / write\n   MGCProvisionalResponseTimerValue\n\
    \   PropertyId: MGCProvisionalResponseTimerValue (0x0006)\n      Indicates the\
    \ time within which the MG should expect a Pending\n      Response from the MGC\
    \ if a Transaction cannot be completed.\n      Initially set to normalMGCExecutionTime\
    \ plus network delay, but\n      may be lowered.\n      Type: Integer\n      Possible\
    \ Values: any integer, represents milliseconds\n      Defined in: TerminationState\n\
    \      Characteristics: read / write\n"
- title: E.2.2 Events
  contents:
  - "E.2.2 Events\n   None.\n"
- title: E.2.3 Signals
  contents:
  - "E.2.3 Signals\n   None.\n"
- title: E.2.4 Statistics
  contents:
  - "E.2.4 Statistics\n   None.\n"
- title: E.2.5 Procedures
  contents:
  - "E.2.5 Procedures\n   None.\n"
- title: E.3   Tone Generator Package
  contents:
  - "E.3   Tone Generator Package\n   PackageID: tonegen (0x0003)\n   Version: 1\n\
    \   Extends: None\n   Description:\n      This package defines signals to generate\
    \ audio tones.  This\n      package does not specify parameter values.  It is\
    \ intended to be\n      extendable.  Generally, tones are defined as an individual\
    \ signal\n      with a parameter, ind, representing \"interdigit\" time delay,\
    \ and a\n      tone id to be used with playtones.  A tone id should be kept\n\
    \      consistent with any tone generation for the same tone.  MGs are\n     \
    \ expected to be provisioned with the characteristics of appropriate\n      tones\
    \ for the country in which the MG is located.\n   Designed to be extended only.\n"
- title: E.3.1 Properties
  contents:
  - "E.3.1 Properties\n   None.\n"
- title: E.3.2 Events
  contents:
  - "E.3.2 Events\n   None.\n"
- title: E.3.3 Signals
  contents:
  - "E.3.3 Signals\n   Play tone\n   SignalID: pt (0x0001)\n      Plays audio tone\
    \ over an audio channel\n      Signal Type: Brief\n      Duration: Provisioned\n\
    \      Additional parameters:\n         Tone id list\n         ParameterID: tl\
    \ (0x0001)\n            Type: list of tone ids\n            List of tones to be\
    \ played in sequence.  The list SHALL\n            contain one or more tone ids.\n\
    \         Inter signal duration\n         ParameterID: ind (0x0002)\n        \
    \    Type: integer\n            Timeout between two consecutive tones in milliseconds\n\
    \   No tone ids are specified in this package.  Packages that extend this\n  \
    \ package can add possible values for tone id as well as adding\n   individual\
    \ tone signals.\n"
- title: E.3.4 Statistics
  contents:
  - "E.3.4 Statistics\n   None.\n"
- title: E.3.5 Procedures
  contents:
  - "E.3.5 Procedures\n   None.\n"
- title: E.4   Tone Detection Package
  contents:
  - "E.4   Tone Detection Package\n   PackageID: tonedet (0x0004)\n   Version: 1\n\
    \   Extends: None\n   This Package defines events for audio tone detection.  Tones\
    \ are\n   selected by name (tone id).  MGs are expected to be provisioned with\n\
    \   the characteristics of appropriate tones for the country in which the\n  \
    \ MG is located.\n   Designed to be extended only:\n      This package does not\
    \ specify parameter values.  It is intended to\n      be extendable.\n"
- title: E.4.1 Properties
  contents:
  - "E.4.1 Properties\n   None.\n"
- title: E.4.2 Events
  contents:
  - "E.4.2 Events\n   Start tone detected\n   EventID: std, 0x0001\n      Detects\
    \ the start of a tone.  The characteristics of positive tone\n      detection\
    \ are implementation dependent.\n      EventsDescriptor parameters:\n        \
    \ Tone id list\n         ParameterID: tl (0x0001)\n            Type: list of tone\
    \ ids\n            Possible values: The only tone id defined in this package is\n\
    \            \"wild card\" which is \"*\" in text encoding and 0x0000 in\n   \
    \         binary.  Extensions to this package would add possible\n           \
    \ values for tone id.  If tl is \"wild card\", any tone id is\n            detected.\n\
    \         ObservedEventsDescriptor parameters:\n         Tone id\n         ParameterID:\
    \ tid (0x0003)\n            Type: enumeration\n            Possible values: \"\
    wildcard\" as defined above is the only\n            value defined in this package.\
    \  Extensions to this package\n            would add additional possible values\
    \ for tone id.\n         End tone detected\n         EventID: etd, 0x0002\n  \
    \       Detects the end of a tone.\n         EventDescriptor parameters:\n   \
    \         Tone id list\n            ParameterID: tl (0x0001)\n               Type:\
    \ enumeration or list of enumerated types\n               Possible values: No\
    \ possible values are specified in this\n               package.  Extensions to\
    \ this package would add possible\n               values for tone id.\n      \
    \   ObservedEventsDescriptor parameters:\n            Tone id\n            ParameterID:\
    \ tid (0x0003)\n               Type: enumeration\n               Possible values:\
    \ \"wildcard\" as defined above is the only\n               value defined in this\
    \ package.  Extensions to this\n               package would add possible values\
    \ for tone id.\n            Duration\n            ParameterId: dur (0x0002)\n\
    \               Type: integer, in milliseconds\n               This parameter\
    \ contains the duration of the tone from\n               first detection until\
    \ it stopped.\n   Long tone detected\n   EventID: ltd, 0x0003\n      Detects that\
    \ a tone has been playing for at least a certain amount\n      of time.\n    \
    \  EventDescriptor parameters:\n         Tone id list\n         ParameterID: tl\
    \ (0x0001)\n            Type: enumeration or list\n            Possible values:\
    \ \"wildcard\" as defined above is the only\n            value defined in this\
    \ package.  Extensions to this package\n            would add possible values\
    \ for tone id.\n         Duration\n         ParameterID: dur (0x0002)\n      \
    \      Type: integer, duration to test against\n            Possible values: any\
    \ legal integer, expressed in\n            milliseconds\n      ObservedEventsDescriptor\
    \ parameters:\n         Tone id\n         ParameterID: tid (0x0003)\n        \
    \    Type: Enumeration\n            Possible values: No possible values are specified\
    \ in this\n            package.  Extensions to this package would add possible\n\
    \            values for tone id.\n"
- title: E.4.3 Signals
  contents:
  - "E.4.3 Signals\n   None.\n"
- title: E.4.4 Statistics
  contents:
  - "E.4.4 Statistics\n   None.\n"
- title: E.4.5 Procedures
  contents:
  - "E.4.5 Procedures\n   None.\n"
- title: E.5   Basic DTMF Generator Package
  contents:
  - "E.5   Basic DTMF Generator Package\n   PackageID: dg (0x0005)\n   Version: 1\n\
    \   Extends: tonegen version 1\n   This package defines the basic DTMF tones as\
    \ signals and extends the\n   allowed values of parameter tl of playtone in tonegen.\n"
- title: E.5.1 Properties
  contents:
  - "E.5.1 Properties\n   None.\n"
- title: E.5.2 Events
  contents:
  - "E.5.2 Events\n   None.\n"
- title: E.5.3 Signals
  contents:
  - "E.5.3 Signals\n   DTMF character 0\n   SignalID: d0 (0x0010)\n      Generate\
    \ DTMF 0 tone.  The physical characteristic of DTMF 0 is\n      defined in the\
    \ gateway.\n      Signal Type: Brief\n      Duration: Provisioned\n      Additional\
    \ parameters:\n         None.\n   Additional values:\n      d0 (0x0010) is defined\
    \ as a tone id for playtone\n   The other DTMF characters are specified in exactly\
    \ the same way.  A\n   table with all signal names and signal IDs is included.\
    \  Note that\n   each DTMF character is defined as both a signal and a tone id,\
    \ thus\n   extending the basic tone generation package.  Also note that DTMF\n\
    \   SignalIds are different from the names used in a digit map.\n            \
    \         Signal name     Signal ID/Tone id\n                    DTMF character\
    \ 0    d0 (0x0010)\n                    DTMF character 1    d1 (0x0011)\n    \
    \                DTMF character 2    d2 (0x0012)\n                    DTMF character\
    \ 3    d3 (0x0013)\n                    DTMF character 4    d4 (0x0014)\n    \
    \                DTMF character 5    d5 (0x0015)\n                    DTMF character\
    \ 6    d6 (0x0016)\n                    DTMF character 7    d7 (0x0017)\n    \
    \                DTMF character 8    d8 (0x0018)\n                    DTMF character\
    \ 9    d9 (0x0019)\n                    DTMF character *    ds (0x0020)\n    \
    \                DTMF character #    do (0x0021)\n                    DTMF character\
    \ A    da (0x001a)\n                    DTMF character B    db (0x001b)\n    \
    \                DTMF character C    dc (0x001c)\n                    DTMF character\
    \ D    dd (0x001d)\n"
- title: E.5.4 Statistics
  contents:
  - "E.5.4 Statistics\n   None.\n"
- title: E.5.5 Procedures
  contents:
  - "E.5.5 Procedures\n   None.\n"
- title: E.6   DTMF detection Package
  contents:
  - "E.6   DTMF detection Package\n   PackageID: dd (0x0006)\n   Version: 1\n   Extends:\
    \ tonedet version 1\n   This package defines the basic DTMF tones detection. \
    \ This Package\n   extends the possible values of tone id in the \"start tone\
    \ detected\"\n   \"end tone detected\" and \"long tone detected\" events.\n  \
    \ Additional tone id values are all tone ids described in package dg\n   (basic\
    \ DTMF generator package).\n   The following table maps DTMF events to digit map\
    \ symbols as\n   described in 7.1.14.\n                           DTMF Event Symbol\n\
    \                           d0   \"0\"\n                           d1   \"1\"\n\
    \                           d2   \"2\"\n                           d3   \"3\"\n\
    \                           d4   \"4\"\n                           d5   \"5\"\n\
    \                           d6   \"6\"\n                           d7   \"7\"\n\
    \                           d8   \"8\"\n                           d9   \"9\"\n\
    \                           da   \"A\" or \"a\"\n                           db\
    \   \"B\" or \"b\"\n                           dc   \"C\" or \"c\"\n         \
    \                  dd   \"D\" or \"d\"\n                           ds   \"E\"\
    \ or \"e\"\n                           do   \"F\" or \"f\"\n"
- title: E.6.1 Properties
  contents:
  - "E.6.1 Properties\n   None.\n"
- title: E.6.2 Events
  contents:
  - "E.6.2 Events\n   DTMF digits\n      EventIds are defined with the same names\
    \ as the SignalIds defined\n      in the table found in E.5.3.\n   DigitMap Completion\
    \ Event\n   EventID: ce, 0x0004\n      Generated when a digit map completes as\
    \ described in 7.1.14.\n      EventsDescriptor parameters: None.\n      ObservedEventsDescriptor\
    \ parameters:\n         DigitString\n         ParameterID: ds (0x0001)\n     \
    \       Type: string of digit map symbols (possibly empty) returned\n        \
    \    as a quotedString\n            Possible values: a sequence of the characters\
    \ \"0\" through\n            \"9\", \"A\" through \"F\", and the long duration\
    \ modifier \"Z\".\n            Description: the portion of the current dial string\
    \ as\n            described in 7.1.14 which matched part or all of an\n      \
    \      alternative event sequence specified in the digit map.\n         Termination\
    \ Method\n         ParameterID: Meth (0x0003)\n            Type: enumeration\n\
    \            Possible values:\n               \"UM\" (0x0001) Unambiguous match\n\
    \               \"PM\" (0x0002) Partial match, completion by timer expiry\n  \
    \             or unmatched event\n               \"FM\" (0x0003) Full match, completion\
    \ by timer expiry or\n               unmatched event\n            Description:\
    \ indicates the reason for generation of the\n            event.  See the procedures\
    \ in 7.1.14.\n"
- title: E.6.3 Signals
  contents:
  - "E.6.3 Signals\n   None.\n"
- title: E.6.4 Statistics
  contents:
  - "E.6.4 Statistics\n   None.\n"
- title: E.6.5 Procedures
  contents:
  - "E.6.5 Procedures\n   Digit map processing is activated only if an events descriptor\
    \ is\n   activated that contains a digit map completion event as defined in\n\
    \   Section E.6.2 and that digit map completion event contains an eventDM\n  \
    \ field in the requested actions as defined in Section 7.1.9.  Other\n   parameters\
    \ such as KeepActive or embedded events of signals\n   descriptors may also be\
    \ present in the events descriptor and do not\n   affect the activation of digit\
    \ map processing.\n"
- title: E.7   Call Progress Tones Generator Package
  contents:
  - "E.7   Call Progress Tones Generator Package\n   PackageID: cg, 0x0007\n   Version:\
    \ 1\n   Extends: tonegen version 1\n   This package defines the basic call progress\
    \ tones as signals and\n   extends the allowed values of the tl parameter of playtone\
    \ in\n   tonegen.\n"
- title: E.7.1 Properties
  contents:
  - "E.7.1 Properties\n   None.\n"
- title: E.7.2 Events
  contents:
  - "E.7.2 Events\n   None.\n"
- title: E.7.3 Signals
  contents:
  - "E.7.3 Signals\n   Dial Tone\n   SignalID: dt (0x0030)\n      Generate dial tone.\
    \  The physical characteristic of dial tone is\n      available in the gateway.\n\
    \      Signal Type: TimeOut\n      Duration: Provisioned\n      Additional parameters:\n\
    \         None.\n   Additional values:\n      dt (0x0030) is defined as a tone\
    \ id for playtone\n   The other tones of this package are defined in exactly the\
    \ same way.\n   A table with all signal names and signal IDs is included.  Note\
    \ that\n   each tone is defined as both a signal and a tone id, thus extending\n\
    \   the basic tone generation package.\n     Signal Name                 Signal\
    \ ID/tone id\n     Dial Tone                   dt (0x0030)\n     Ringing Tone\
    \                rt (0x0031)\n     Busy Tone                   bt (0x0032)\n \
    \    Congestion Tone             ct (0x0033)\n     Special Information Tone  \
    \  sit(0x0034)\n     Warning Tone                wt (0x0035)\n     Payphone Recognition\
    \ Tone   prt (0x0036)\n     Call Waiting Tone           cw (0x0037)\n     Caller\
    \ Waiting Tone         cr (0x0038)\n"
- title: E.7.4 Statistics
  contents:
  - "E.7.4 Statistics\n   None.\n"
- title: E.7.5 Procedures
  contents:
  - "E.7.5 Procedures\n      NOTE - The required set of tone ids corresponds to those\
    \ defined\n      in Recommendation E.180/Q.35.  See Recommendation E.180/Q.35\
    \ for\n      definition of the meanings of these tones.\n"
- title: E.8   Call Progress Tones Detection Package
  contents:
  - "E.8   Call Progress Tones Detection Package\n   PackageID: cd (0x0008)\n   Version:\
    \ 1\n   Extends: tonedet version 1\n   This package defines the basic call progress\
    \ detection tones.  This\n   package extends the possible values of tone id in\
    \ the \"start tone\n   detected\", \"end tone detected\" and \"long tone detected\"\
    \ events.\n   Additional values\n      toneID values are defined for start tone\
    \ detected, end tone\n      detected and long tone detected with the same values\
    \ as those in\n      package cg (call progress tones generation package).\n  \
    \ The required set of tone ids corresponds to Recommendation\n   E.180/Q.35. \
    \ See Recommendation E.180/Q.35 for definition of the\n   meanings of these tones.\n"
- title: E.8.1 Properties
  contents:
  - "E.8.1 Properties\n   None.\n"
- title: E.8.2 Events
  contents:
  - "E.8.2 Events\n   Events are defined as in the call progress tones generator package\n\
    \   (cg) for the tones listed in the table of E.7.3.\n"
- title: E.8.3 Signals
  contents:
  - "E.8.3 Signals\n   None.\n"
- title: E.8.4 Statistics
  contents:
  - "E.8.4 Statistics\n   None.\n"
- title: E.8.5 Procedures
  contents:
  - "E.8.5 Procedures\n   None.\n"
- title: E.9   Analog Line Supervision Package
  contents:
  - "E.9   Analog Line Supervision Package\n   PackageID: al, 0x0009\n   Version:\
    \ 1\n   Extends: None\n   This package defines events and signals for an analog\
    \ line.\n   E.9.1 Properties\n   None.\n"
- title: E.9.2 Events
  contents:
  - "E.9.2 Events\n   onhook\n   EventID: on (0x0004)\n      Detects handset going\
    \ on hook.  Whenever an events descriptor is\n      activated that requests monitoring\
    \ for an on-hook event and the\n      line is already on-hook, then the MG shall\
    \ behave according to the\n      setting of the \"strict\" parameter.\n      EventDescriptor\
    \ parameters:\n         Strict Transition\n         ParameterID: strict (0x0001)\n\
    \            Type: enumeration\n            Possible values: \"exact\" (0x00),\
    \ \"state\" (0x01), \"failWrong\"\n            (0x02)\n              \"exact\"\
    \ means that only an actual hook state transition to\n              on-hook is\
    \ to be recognized;\n              \"state\" means that the event is to be recognized\
    \ either if\n              the hook state transition is detected or if the hook\
    \ state\n              is already on-hook;\n              \"failWrong\" means\
    \ that if the hook state is already\n              on-hook, the command fails\
    \ and an error is reported.\n      ObservedEventsDescriptor parameters:\n    \
    \     Initial State\n         ParameterID: init (0x0002)\n            Type: Boolean\n\
    \            Possible values:\n               \"True\" means that the event was\
    \ reported because the line\n               was already on-hook when the events\
    \ descriptor containing\n               this event was activated;\n          \
    \     \"False\" means that the event represents an actual state\n            \
    \   transition to on-hook.\n   offhook\n   EventID: of (0x0005)\n      Detects\
    \ handset going off hook.  Whenever an events descriptor is\n      activated that\
    \ requests monitoring for an off-hook event and the\n      line is already off-hook,\
    \ then the MG shall behave according to\n      the setting of the \"strict\" parameter.\n\
    \      EventDescriptor parameters:\n         Strict Transition\n         ParameterID:\
    \ strict (0x0001)\n            Type: enumeration\n            Possible values:\
    \ \"exact\" (0x00), \"state\" (0x01), \"failWrong\"\n            (0x02)\n    \
    \           \"exact\" means that only an actual hook state transition\n      \
    \         to off-hook is to be recognized;\n               \"state\" means that\
    \ the event is to be recognized either\n               if the hook state transition\
    \ is detected or if the hook\n               state is already off-hook;\n    \
    \           \"failWrong\" means that if the hook state is already off-\n     \
    \          hook, the command fails and an error is reported.\n      ObservedEventsDescriptor\
    \ parameters\n         Initial State\n         ParameterID: init (0x0002)\n  \
    \          Type: Boolean\n            Possible values:\n               \"True\"\
    \ means that the event was reported because the line\n               was already\
    \ off-hook when the events descriptor\n               containing this event was\
    \ activated;\n               \"False\" means that the event represents an actual\
    \ state\n               transition to off-hook.\n   flashhook\n   EventID: fl,\
    \ 0x0006\n      Detects handset flash.  A flash occurs when an onhook is followed\n\
    \      by an offhook between a minimum and maximum duration.\n      EventDescriptor\
    \ parameters:\n         Minimum duration\n         ParameterID: mindur (0x0004)\n\
    \            Type: integer in milliseconds\n            Default value is provisioned.\n\
    \         Maximum duration\n         ParameterID: maxdur (0x0005)\n          \
    \  Type: integer in milliseconds\n            Default value is provisioned.\n\
    \      ObservedEventsDescriptor parameters:\n         None\n"
- title: E.9.3 Signals
  contents:
  - "E.9.3 Signals\n   ring\n   SignalID: ri, 0x0002\n      Applies ringing on the\
    \ line\n      Signal Type: TimeOut\n      Duration: Provisioned\n      Additional\
    \ parameters:\n         Cadence\n         ParameterID: cad (0x0006)\n        \
    \    Type: list of integers representing durations of alternating\n          \
    \  on and off segments, constituting a complete ringing cycle\n            starting\
    \ with an on.  Units in milliseconds\n            Default is fixed or provisioned.\
    \  Restricted function MGs\n            may ignore cadence values they are incapable\
    \ of generating.\n         Frequency\n         ParameterID: freq (0x0007)\n  \
    \          Type: integer in Hz\n            Default is fixed or provisioned. \
    \ Restricted function MGs\n            may ignore frequency values they are incapable\
    \ of\n            generating.\n"
- title: E.9.4 Statistics
  contents:
  - "E.9.4 Statistics\n   None.\n"
- title: E.9.5 Procedures
  contents:
  - "E.9.5 Procedures\n   If the MGC sets an EventsDescriptor containing a hook state\n\
    \   transition event (on-hook or off-hook) with the \"strict\" (0x0001)\n   parameter\
    \ set to \"failWrong\", and the hook state is already what the\n   transition\
    \ implies, the execution of the command containing that\n   EventsDescriptor fails.\
    \  The MG SHALL include error code 540\n   \"Unexpected initial hook state\" in\
    \ its reponse.\n"
- title: E.9.6 Error code
  contents:
  - "E.9.6 Error code\n   This package defines a new error code:\n      540 - Unexpected\
    \ initial hook state\n   The procedure for use of this code is given in E.9.5.\n"
- title: E.10  Basic Continuity Package
  contents:
  - "E.10  Basic Continuity Package\n   PackageID: ct (0x000a)\n   Version: 1\n  \
    \ Extends: None\n   This package defines events and signals for continuity test.\
    \  The\n   continuity test includes provision of either a loopback or\n   transceiver\
    \ functionality.\n"
- title: E.10.1   Properties
  contents:
  - "E.10.1   Properties\n   None.\n"
- title: E.10.2   Events
  contents:
  - "E.10.2   Events\n   Completion\n   EventID: cmp, 0x0005\n      This event detects\
    \ test completion of continuity test.\n      EventDescriptor parameters\n    \
    \     None.\n      ObservedEventsDescriptor parameters\n         Result\n    \
    \     ParameterID: res (0x0008)\n            Type: enumeration\n            Possible\
    \ values: success (0x0001), failure (0x0000)\n"
- title: E.10.3   Signals
  contents:
  - "E.10.3   Signals\n   Continuity test\n   SignalID: ct (0x0003)\n      Initiates\
    \ sending of continuity test tone on the termination to\n      which it is applied.\n\
    \      Signal Type: TimeOut\n      Default value is provisioned\n      Additional\
    \ parameters:\n         None.\n   Respond\n   SignalID: rsp (0x0004)\n      The\
    \ signal is used to respond to a continuity test.  See E.10.5\n      for further\
    \ explanation.\n      Signal Type: On/Off\n      Default duration is provisioned\n\
    \      Additional parameters:\n         None.\n"
- title: E.10.4   Statistics
  contents:
  - "E.10.4   Statistics\n   None.\n"
- title: E.10.5   Procedures
  contents:
  - "E.10.5   Procedures\n   When a MGC wants to initiate a continuity test, it sends\
    \ a command to\n   the MG containing:\n   -  a signals descriptor with the ct\
    \ signal; and\n   -  an events descriptor containing the cmp event.\n   Upon reception\
    \ of a command containing the ct signal and cmp event,\n   the MG initiates the\
    \ continuity test tone for the specified\n   Termination.  If the return tone\
    \ is detected and any other required\n   conditions are satisfied before the signal\
    \ times out, the cmp event\n   shall be generated with the value of the result\
    \ parameter equal to\n   success.  In all other cases, the cmp event shall be\
    \ generated with\n   the value of the result parameter equal to failure.\n   When\
    \ a MGC wants the MG to respond to a continuity test, it sends a\n   command to\
    \ the MG containing a signals descriptor with the rsp\n   signal.  Upon reception\
    \ of a command with the rsp signal, the MG\n   either applies a loopback or (for\
    \ 2-wire circuits) awaits reception\n   of a continuity test tone.  In the loopback\
    \ case, any incoming\n   information shall be reflected back as outgoing information.\
    \  In the\n   2-wire case, any time the appropriate test tone is received, the\n\
    \   appropriate response tone should be sent.  The MGC determines when to\n  \
    \ remove the rsp signal.\n   When a continuity test is performed on a Termination,\
    \ no echo devices\n   or codecs shall be active on that Termination.\n   Performing\
    \ voice path assurance as part of continuity testing is\n   provisioned by bilateral\
    \ agreement between network operators.\n      (Informative Note) Example tones\
    \ and test procedure details are\n      given in Q.724 sections 7 and 8, Q.764\
    \ section 2.1.8 and Q.1902.4.\n"
- title: E.11  Network Package
  contents:
  - "E.11  Network Package\n   PackageID: nt (0x000b)\n   Version: 1\n   Extends:\
    \ None\n   This package defines properties of network terminations independent\n\
    \   of network type.\n"
- title: E.11.1   Properties
  contents:
  - "E.11.1   Properties\n   Maximum Jitter Buffer\n   PropertyID: jit (0x0007)\n\
    \      This property puts a maximum size on the jitter buffer.\n      Type: integer\
    \ in milliseconds\n      Possible values: This property is specified in milliseconds.\n\
    \      Defined in: LocalControlDescriptor\n      Characteristics: read/write\n"
- title: E.11.2   Events
  contents:
  - "E.11.2   Events\n   network failure\n   EventID: netfail, 0x0005\n      The termination\
    \ generates this event upon detection of a failure\n      due to external or internal\
    \ network reasons.\n      EventDescriptor parameters\n         None.\n      ObservedEventsDescriptor\
    \ parameters\n         cause\n         ParameterID: cs (0x0001)\n            Type:\
    \ string\n            Possible values: any text string\n            This parameter\
    \ may be included with the failure event to\n            provide diagnostic information\
    \ on the reason of failure.\n   quality alert\n   EventID: qualert, 0x0006\n \
    \     This property allows the MG to indicate a loss of quality of the\n     \
    \ network connection.  The MG may do this by measuring packet loss,\n      interarrival\
    \ jitter, propagation delay and then indicating this\n      using a percentage\
    \ of quality loss.\n      EventDescriptor parameters\n         Threshold\n   \
    \      ParameterId: th (0x0001)\n            Type: integer\n            Possible\
    \ values: 0 to 99\n            Description: threshold for percent of quality loss\
    \ measured,\n            calculated based on a provisioned method, that could\
    \ take\n            into consideration packet loss, jitter, and delay for\n  \
    \          example.  Event is triggered when calculation exceeds the\n       \
    \     threshold.\n      ObservedEventsDescriptor parameters\n         Threshold\n\
    \         ParameterId: th (0x0001)\n            Type: integer\n            Possible\
    \ values: 0 to 99\n            Description: percent of quality loss measured,\
    \ calculated\n            based on a provisioned method, that could take into\n\
    \            consideration packet loss, jitter, and delay for example.\n"
- title: E.11.3   Signals
  contents:
  - "E.11.3   Signals\n   None.\n"
- title: E.11.4   Statistics
  contents:
  - "E.11.4   Statistics\n   Duration\n   StatisticsID: dur (0x0001)\n      Description:\
    \ provides duration of time the termination has been in\n      the Context.\n\
    \      Type: double, in milliseconds\n   Octets Sent\n   StatisticID: os (0x0002)\n\
    \      Type: double\n      Possible values: any 64-bit integer\n   Octets Received\n\
    \   StatisticID: or (0x0003)\n      Type: double\n      Possible values: any 64-bit\
    \ integer\n"
- title: E.11.5   Procedures
  contents:
  - "E.11.5   Procedures\n   None.\n"
- title: E.12  RTP Package
  contents:
  - "E.12  RTP Package\n   PackageID: rtp (0x000c)\n   Version: 1\n   Extends: Network\
    \ Package version 1\n   This package is used to support packet-based multimedia\
    \ data transfer\n   by means of the Real-time Transport Protocol (RTP) [RFC 1889].\n"
- title: E.12.1   Properties
  contents:
  - "E.12.1   Properties\n   None.\n"
- title: E.12.2   Events
  contents:
  - "E.12.2   Events\n   Payload Transition\n   EventID: pltrans, 0x0001\n      This\
    \ event detects and notifies when there is a transition of the\n      RTP payload\
    \ format from one format to another.\n      EventDescriptor parameters\n     \
    \    None.\n      ObservedEventsDescriptor parameters\n         ParameterName:\
    \ rtppayload\n         ParameterID: rtppltype, 0x01\n         Type: list of enumerated\
    \ types.\n         Possible values: The encoding method shall be specified by\n\
    \         using one or several valid encoding names, as defined in the\n     \
    \    RTP AV Profile or registered with IANA.\n"
- title: E.12.3   Signals
  contents:
  - "E.12.3   Signals\n   None.\n"
- title: E.12.4   Statistics
  contents:
  - "E.12.4   Statistics\n   Packets Sent\n   StatisticID: ps (0x0004)\n      Type:\
    \ double\n      Possible values: any 64-bit integer\n   Packets Received\n   StatisticID:\
    \ pr (0x0005)\n      Type: double\n      Possible values: any 64-bit integer\n\
    \   Packet Loss\n   StatisticID: pl (0x0006)\n      Describes the current rate\
    \ of packet loss on an RTP stream, as\n      defined in IETF RFC 1889.  Packet\
    \ loss is expressed as percentage\n      value: number of packets lost in the\
    \ interval between two\n      reception reports, divided by the number of packets\
    \ expected\n      during that interval.\n      Type: double\n      Possible values:\
    \ a 32-bit whole number and a 32-bit fraction.\n   Jitter\n   StatisticID: jit\
    \ (0x0007)\n      Requests the current value of the interarrival jitter on an\
    \ RTP\n      stream as defined in IETF RFC 1889.  Jitter measures the variation\n\
    \      in interarrival time for RTP data packets.\n   Delay\n   StatisticID:delay\
    \ (0x0008)\n      Requests the current value of packet propagation delay expressed\n\
    \      in timestamp units.  Same as average latency.\n"
- title: E.12.5   Procedures
  contents:
  - "E.12.5   Procedures\n   None.\n"
- title: E.13  TDM Circuit Package
  contents:
  - "E.13  TDM Circuit Package\n      PackageID: tdmc (0x000d)\n      Version: 1\n\
    \      Extends: Network Package version 1\n      This package may be used by any\
    \ termination that supports gain and\n      echo control.  It was originally intended\
    \ for use on TDM circuits\n      but may be more widely used.\n      New versions\
    \ or extensions of this package should take non-TDM use\n      into account.\n"
- title: E.13.1   Properties
  contents:
  - "E.13.1   Properties\n      Echo Cancellation\n      PropertyID: ec (0x0008)\n\
    \         Type: boolean\n         Possible values:\n            \"on\" (when the\
    \ echo cancellation is requested) and\n            \"off\" (when it is turned\
    \ off.)\n            The default is provisioned.\n         Defined in: LocalControlDescriptor\n\
    \         Characteristics: read/write\n      Gain Control\n      PropertyID: gain\
    \ (0x000a)\n         Gain control, or usage of of signal level adaptation and\n\
    \         noise level reduction is used to adapt the level of the signal.\n  \
    \       However, it is necessary, for example for modem calls, to turn\n     \
    \    off this function.\n         Type: integer\n         Possible values:\n \
    \        The gain control parameter may either be specified as\n         \"automatic\"\
    \ (0xffffffff), or as an explicit number of decibels\n         of gain (any other\
    \ integer value).  The default is provisioned\n         in the MG.\n      Defined\
    \ in: LocalControlDescriptor\n      Characteristics: read/write\n"
- title: E.13.2   Events
  contents:
  - "E.13.2   Events\n   None.\n"
- title: E.13.3   Signals
  contents:
  - "E.13.3   Signals\n   None.\n"
- title: E.13.4   Statistics
  contents:
  - "E.13.4   Statistics\n   None.\n"
- title: E.13.5   Procedures
  contents:
  - "E.13.5   Procedures\n   None.\n"
- title: APPENDIX I  EXAMPLE CALL FLOWS (INFORMATIVE)
  contents:
  - "APPENDIX I  EXAMPLE CALL FLOWS (INFORMATIVE)\n   All H.248.1 implementors must\
    \ read the normative part of this RFC\n   carefully before implementing from it.\
    \  The examples in this appendix\n   should not be used as stand-alone explanations\
    \ of how to create\n   protocol messages.\n   The examples in this appendix use\
    \ SDP for encoding of the Local and\n   and Remote stream descriptors. SDP is\
    \ defined in RFC 2327. If there\n   is is any discrepancy between the SDP in the\
    \ examples, and RFC 2327,\n   the the RFC should be consulted for correctness.\
    \ Audio profiles used\n   are are those defined in IETF RFC 1890, and others registered\
    \ with\n   IANA.  For example, G.711 A-law is called PCMA in SDP, and is\n   assigned\
    \ profile 0. G.723.1 is called G723 and is profile 4; H.263 is\n   called H263\
    \ and is profile 34. See also\n   http://www.iana.org/assignments/rtp-parameters.\n"
- title: A.1   Residential Gateway to Residential Gateway Call
  contents:
  - "A.1   Residential Gateway to Residential Gateway Call\n   This example scenario\
    \ illustrates the use of the elements of the\n   protocol to set up a Residential\
    \ Gateway to Residential Gateway call\n   over an IP-based network.  For simplicity,\
    \ this example assumes that\n   both Residential Gateways involved in the call\
    \ are controlled by the\n   same Media Gateway Controller.\n"
- title: A.1.1 Programming Residential GW Analog Line Terminations for Idle
  contents:
  - "A.1.1 Programming Residential GW Analog Line Terminations for Idle\n   Behavior\n\
    \   The following illustrates the API invocations from the Media Gateway\n   Controller\
    \ and Media Gateways to get the Terminations in this\n   scenario programmed for\
    \ idle behavior.  Both the originating and\n   terminating Media Gateways have\
    \ idle AnalogLine Terminations\n   programmed to look for call initiation events\
    \ (i.e., -offhook) by\n   using the Modify Command with the appropriate parameters.\
    \  The null\n   Context is used to indicate that the Terminations are not yet\n\
    \   involved in a Context.  The ROOT termination is used to indicate the\n   entire\
    \ MG instead of a termination within the MG.\n   In this example, MG1 has the\
    \ IP address 124.124.124.222, MG2 is\n   125.125.125.111, and the MGC is 123.123.123.4.\
    \ The default Megaco\n   port is 55555 for all three.\n   1. An MG registers with\
    \ an MGC using the ServiceChange command:\n   MG1 to MGC:\n   MEGACO/1 [124.124.124.222]\
    \ Transaction = 9998 {\n       Context = - {\n           ServiceChange = ROOT\
    \ {Services {\n               Method=Restart,\n               ServiceChangeAddress=55555,\
    \ Profile=ResGW/1}\n           }\n       } }\n   2. The MGC sends a reply:\n \
    \  MGC to MG1:\n   MEGACO/1 [123.123.123.4]:55555 Reply = 9998 {\n      Context\
    \ = - {ServiceChange = ROOT {\n        Services {ServiceChangeAddress=55555, Profile=ResGW/1}\
    \ } } }\n   3. The MGC programs a Termination in the NULL context.  The\n   terminationId\
    \ is A4444, the streamId is 1, the requestId in the\n   Events descriptor is 2222.\
    \  The mId is the identifier of the sender\n   of this message, in this case,\
    \ it is the IP address and port\n   [123.123.123.4]:55555.  Mode for this stream\
    \ is set to SendReceive.\n   \"al\" is the analog line supervision package.  Local\
    \ and Remote are\n   assumed to be provisioned.\n   MGC to MG1:\n   MEGACO/1 [123.123.123.4]:55555\
    \ Transaction = 9999 {\n       Context = - {\n           Modify = A4444 {\n  \
    \             Media { Stream = 1 {\n                        LocalControl {\n \
    \                           Mode = SendReceive,\n                            tdmc/gain=2,\
    \  ; in dB,\n                            tdmc/ec=on\n                        },\n\
    \                    }\n               },\n               Events = 2222 {al/of(strict=state)}\n\
    \           }\n       } }\n   The dialplan script could have been loaded into\
    \ the MG previously.\n   Its function would be to wait for the OffHook, turn on\
    \ dialtone and\n   start collecting DTMF digits.  However in this example, we\
    \ use the\n   digit map, which is put into place after the offhook is detected\n\
    \   (step 5 below).\n   Note that the embedded EventsDescriptor could have been\
    \ used to\n   combine steps 3 and 4 with steps 8 and 9, eliminating steps 6 and\
    \ 7.\n   4. The MG1 accepts the Modify with this reply:\n   MG1 to MGC:\n   MEGACO/1\
    \ [124.124.124.222]:55555\n   Reply = 9999 {\n      Context = - {Modify = A4444}\
    \ }\n   5. A similar exchange happens between MG2 and the MGC, resulting in\n\
    \   an idle Termination called A5555.\n"
- title: A.1.2 Collecting Originator Digits and Initiating Termination
  contents:
  - "A.1.2 Collecting Originator Digits and Initiating Termination\n   The following\
    \ builds upon the previously shown conditions.  It\n   illustrates the transactions\
    \ from the Media Gateway Controller and\n   originating Media Gateway (MG1) to\
    \ get the originating Termination\n   (A4444) through the stages of digit collection\
    \ required to initiate a\n   connection to the terminating Media Gateway (MG2).\n\
    \   6. MG1 detects an offhook event from User 1 and reports it to the\n   Media\
    \ Gateway Controller via the Notify Command.\n   MG1 to MGC:\n   MEGACO/1 [124.124.124.222]:55555\
    \ Transaction = 10000 {\n      Context = - {\n          Notify = A4444 {ObservedEvents\
    \ =2222 {\n            19990729T22000000:al/of(init=false)}}\n      } }\n   7.\
    \ And the Notify is acknowledged.\n   MGC to MG1:\n   MEGACO/1 [123.123.123.4]:55555\
    \ Reply = 10000 {\n       Context = - {Notify = A4444} }\n   8. The MGC Modifies\
    \ the termination to play dial tone, to look for\n   digits according to Dialplan0\
    \ and to look for the on-hook event now.\n   MGC to MG1:\n   MEGACO/1 [123.123.123.4]:55555\
    \ Transaction = 10001 {\n       Context = - {\n           Modify = A4444 {\n \
    \              Events = 2223 {\n                   al/on(strict=state), dd/ce\
    \ {DigitMap=Dialplan0}\n               },\n               Signals {cg/dt},\n \
    \              DigitMap= Dialplan0{ (0| 00|[1-\n   7]xxx|8xxxxxxx|Fxxxxxxx|Exx|91xxxxxxxxxx|9011x.)}\n\
    \           }\n       } }\n   9. And the Modify is acknowledged.\n   MG1 to MGC:\n\
    \   MEGACO/1 [124.124.124.222]:55555 Reply = 10001 {\n       Context = - {Modify\
    \ = A4444} }\n   10.   Next, digits are accumulated by MG1 as they are dialed\
    \ by User\n   1.  Dialtone is stopped upon detection of the first digit.  When\
    \ an\n   appropriate match is made of collected digits against the currently\n\
    \   programmed Dialplan for A4444, another Notify is sent to the Media\n   Gateway\
    \ Controller.\n   MG1 to MGC:\n   MEGACO/1 [124.124.124.222]:55555 Transaction\
    \ = 10002 {\n      Context = - {\n          Notify = A4444 {ObservedEvents =2223\
    \ {\n            19990729T22010001:dd/ce{ds=\"916135551212\",Meth=UM}}}\n    \
    \  } }\n   11.   And the Notify is acknowledged.\n   MGC to MG1:\n   MEGACO/1\
    \ [123.123.123.4]:55555 Reply = 10002 {\n       Context = - {Notify = A4444} }\n\
    \   12.   The controller then analyses the digits and determines that a\n   connection\
    \ needs to be made from MG1 to MG2.  Both the TDM\n   termination A4444, and an\
    \ RTP termination are added to a new context\n   in MG1.  Mode is ReceiveOnly\
    \ since Remote descriptor values are not\n   yet specified.  Preferred codecs\
    \ are in the MGC's preferred order of\n   choice.\n   MGC to MG1:\n   MEGACO/1\
    \ [123.123.123.4]:55555 Transaction = 10003 {\n       Context = $ {\n        \
    \  Add = A4444,\n          Add = $ {\n              Media {\n                Stream\
    \ = 1 {\n                     LocalControl {\n                         Mode =\
    \ ReceiveOnly,\n                         nt/jit=40 ; in ms\n                 \
    \    },\n                     Local { v=0 c=IN IP4 $ m=audio $ RTP/AVP 4\n   a=ptime:30\
    \ v=0 c=IN IP4 $ m=audio $ RTP/AVP 0\n                     }\n               \
    \ }\n             }\n          }\n       } }\n      NOTE - The MGC states its\
    \ preferred parameter values as a series\n      of SDP blocks in  Local.  The\
    \ MG fills in the Local Descriptor in\n      the Reply.\n   13.   MG1 acknowledges\
    \ the new Termination and fills in the Local IP\n   address and UDP port.  It\
    \ also makes a choice for the codec based on\n   the MGC preferences in Local.\
    \  MG1 sets the RTP port to 2222.\n   MG1 -> MGC:\n   MEGACO/1 [124.124.124.222]:55555\
    \ Reply = 10003 {\n      Context = 2000 {\n         Add = A4444,\n         Add=A4445{\n\
    \            Media {\n                Stream = 1 {\n                    Local\
    \ { v=0 o=- 2890844526 2890842807 IN IP4\n   124.124.124.222 s=- t= 0 0 c=IN IP4\
    \ 124.124.124.222 m=audio 2222\n   RTP/AVP 4 a=ptime:30 a=recvonly\n         \
    \           } ; RTP profile for G.723.1 is 4\n                }\n            }\n\
    \         }\n      } }\n   14.   The MGC will now associate A5555 with a new Context\
    \ on MG2, and\n   establish an RTP Stream (i.e., A5556 will be assigned), SendReceive\n\
    \   connection through to the originating user, User 1.  The MGC also\n   sets\
    \ ring on A5555.\n   MGC to MG2:\n   MEGACO/1 [123.123.123.4]:55555 Transaction\
    \ = 50003 {\n       Context = $ {\n          Add = A5555  { Media {\n        \
    \       Stream = 1 {\n                    LocalControl {Mode = SendReceive} }},\n\
    \         Events=1234{al/of(strict=state)},\n               Signals {al/ri}\n\
    \               },\n          Add  = $ {Media {\n               Stream = 1 {\n\
    \                    LocalControl {\n                       Mode = SendReceive,\n\
    \                       nt/jit=40 ; in ms\n                    },\n          \
    \          Local { v=0 c=IN IP4 $ m=audio $ RTP/AVP 4\n   a=ptime:30\n       \
    \             },\n                    Remote { v=0 c=IN IP4 124.124.124.222 m=audio\
    \ 2222\n   RTP/AVP 4 a=ptime:30\n                    } ; RTP profile for G.723.1\
    \ is 4\n                }\n             }\n         }\n      } }\n   15.   This\
    \ is acknowledged.  The stream port number is different from\n   the control port\
    \ number.  In this case it is 1111 (in the SDP).\n   MG2 to MGC:\n   MEGACO/1\
    \ [125.125.125.111]:55555 Reply = 50003 {\n      Context = 5000 {\n      Add =\
    \ A5555,\n         Add = A5556{\n            Media {\n               Stream =\
    \ 1 {\n                   Local { v=0 o=- 7736844526 7736842807 IN IP4\n   125.125.125.111\
    \ s=- t= 0 0 c=IN IP4 125.125.125.111 m=audio 1111\n   RTP/AVP 4 }\n         \
    \      } ; RTP profile for G723.1 is 4\n            }\n          }\n      } }\n\
    \   16.   The above IPAddr and UDPport need to be given to MG1 now.\n   MGC to\
    \ MG1:\n   MEGACO/1 [123.123.123.4]:55555 Transaction = 10005 {\n     Context\
    \ = 2000 {\n       Modify = A4444 {\n         Signals {cg/rt}\n       },\n   \
    \    Modify = A4445 {\n          Media {\n               Stream = 1 {\n      \
    \             Remote { v=0 o=- 7736844526 7736842807 IN IP4\n   125.125.125.111\
    \ s=- t= 0 0 c=IN IP4 125.125.125.111 m=audio 1111\n   RTP/AVP 4\n           \
    \        }\n               } ; RTP profile for G723.1 is 4\n           }\n   \
    \    }\n     } }\n   MG1 to MGC:\n   MEGACO/1 [124.124.124.222]:55555 Reply =\
    \ 10005 {\n      Context = 2000 {Modify = A4444, Modify = A4445} }\n   17.   The\
    \ two gateways are now connected and User 1 hears the\n   RingBack.  The MG2 now\
    \ waits until User2 picks up the receiver and\n   then the two-way call is established.\n\
    \   From MG2 to MGC:\n   MEGACO/1 [125.125.125.111]:55555 Transaction = 50005\
    \ {\n      Context = 5000 {\n          Notify = A5555 {ObservedEvents =1234 {\n\
    \            19990729T22020002:al/of(init=false)}}\n      } }\n   From MGC to\
    \ MG2:\n   MEGACO/1 [123.123.123.4]:55555 Reply = 50005 {\n       Context = -\
    \ {Notify = A5555} }\n   From MGC to MG2:\n   MEGACO/1 [123.123.123.4]:55555 Transaction\
    \ = 50006 {\n      Context = 5000 {\n         Modify = A5555 {\n            Events\
    \ = 1235 {al/on(strict=state)},\n            Signals { } ; to turn off ringing\n\
    \         }\n      } }\n   From MG2 to MGC:\n   MEGACO/1 [125.125.125.111]:55555\
    \ Reply = 50006 {\n    Context = 5000 {Modify = A4445} }\n   18.   Change mode\
    \ on MG1 to SendReceive, and stop the ringback.\n   MGC to MG1:\n   MEGACO/1 [123.123.123.4]:55555\
    \ Transaction = 10006 {\n      Context = 2000 {\n         Modify = A4445 {\n \
    \           Media {\n               Stream = 1 {\n                  LocalControl\
    \ {\n                     Mode=SendReceive\n                  }\n            \
    \   }\n            }\n         },\n         Modify = A4444 {\n            Signals\
    \ { }\n         }\n      } }\n   from MG1 to MGC:\n   MEGACO/1 [124.124.124.222]:55555\
    \ Reply = 10006 {\n      Context = 2000 {Modify = A4445, Modify = A4444}}\n  \
    \ 19.   The MGC decides to Audit the RTP termination on MG2.\n   MGC -> MG2:\n\
    \   MEGACO/1 [123.123.123.4]:55555 Transaction = 50007 {\n      Context = - {AuditValue\
    \ = A5556{\n         Audit{Media, DigitMap, Events, Signals, Packages, Statistics\
    \ }}\n      } }\n   20.   The MG2 replies.\n   MG2 -> MGC:\n   MEGACO/1 [125.125.125.111]:55555\
    \ Reply = 50007 {\n      Context = - { AuditValue = A5556 {\n             Media\
    \ {\n                TerminationState { ServiceStates = InService,\n         \
    \   Buffer = OFF },\n          Stream = 1 {\n                    LocalControl\
    \ { Mode = SendReceive,\n                       nt/jit=40 },\n               \
    \     Local { v=0 o=- 7736844526 7736842807 IN IP4\n   125.125.125.111 s=- t=\
    \ 0 0 c=IN IP4 125.125.125.111 m=audio 1111\n   RTP/AVP  4 a=ptime:30\n      \
    \             },\n                    Remote { v=0 o=- 2890844526 2890842807 IN\
    \ IP4\n   124.124.124.222 s=- t= 0 0 c=IN IP4 124.124.124.222 m=audio 2222\n \
    \  RTP/AVP  4 a=ptime:30\n                    } } },\n              Events,\n\
    \           Signals,\n           DigitMap,\n          Packages {nt-1, rtp-1},\n\
    \             Statistics { rtp/ps=1200,  ; packets sent\n                    \
    \      nt/os=62300, ; octets sent\n                          rtp/pr=700, ; packets\
    \ received\n                          nt/or=45100, ; octets received\n       \
    \                   rtp/pl=0.2,  ; % packet loss\n                          rtp/jit=20,\n\
    \                          rtp/delay=40 } ; avg latency\n          }\n       }\
    \ }\n   21.   When the MGC receives an onhook signal from one of the MGs, it\n\
    \   brings down the call.  In this example, the user at MG2 hangs up\n   first.\n\
    \   From MG2 to MGC:\n   MEGACO/1 [125.125.125.111]:55555 Transaction = 50008\
    \ {\n      Context = 5000 {\n          Notify = A5555 {ObservedEvents =1235 {\n\
    \             19990729T24020002:al/on(init=false)}\n          }\n      } }\n \
    \  From MGC to MG2:\n   MEGACO/1 [123.123.123.4]:55555 Reply = 50008 {\n     \
    \  Context = - {Notify = A5555} }\n   22.   The MGC now sends both MGs a Subtract\
    \ to take down the call.\n   Only the subtracts to MG2 are shown here.  Each termination\
    \ has its\n   own set of statistics that it gathers.  An MGC may not need to\n\
    \   request both to be returned.  A5555 is a physical termination, and\n   A5556\
    \ is an RTP termination.\n   From MGC to MG2:\n   MEGACO/1 [123.123.123.4]:55555\
    \ Transaction = 50009 {\n      Context = 5000 {\n         Subtract = A5555 {Audit{Statistics}},\n\
    \         Subtract = A5556 {Audit{Statistics}}\n      } }\n   From MG2 to MGC:\n\
    \   MEGACO/1 [125.125.125.111]:55555 Reply = 50009 {\n      Context = 5000 {\n\
    \        Subtract = A5555 {\n             Statistics {\n                nt/os=45123,\
    \ ; Octets Sent\n                nt/dur=40 ; in seconds\n                }\n \
    \         },\n          Subtract = A5556 {\n             Statistics {\n      \
    \          rtp/ps=1245, ; packets sent\n                nt/os=62345, ; octets\
    \ sent\n                rtp/pr=780, ; packets received\n                nt/or=45123,\
    \ ; octets received\n                rtp/pl=10, ;  % packets lost\n          \
    \      rtp/jit=27,\n                rtp/delay=48 ; average latency\n         \
    \    }\n          }\n      } }\n   23.   The MGC now sets up both MG1 and MG2\
    \ to be ready to detect the\n   next off-hook event.  See step 1.  Note that this\
    \ could be the\n   default state of a termination in the null context, and if\
    \ this were\n   the case, no message need be sent from the MGC to the MG.  Once\
    \ a\n   termination returns to the null context, it goes back to the default\n\
    \   termination values for that termination.\n"
- title: APPENDIX II  Changes From RFC 3015
  contents:
  - "APPENDIX II  Changes From RFC 3015\n   In the following table, \"source\" indicates\
    \ when the change was first\n   approved.  It has the following values:\n   IG1100:\
    \ H.248 Implementor's Guide approved in November, 2000 (as TD\n   Plen-39, Christian\
    \ Groves, editor).\n   IG0601: H.248 Implementor's Guide approved in June, 2001\
    \ (as  TD\n   Plen-15, Christian Groves, editor).\n   IGDUB: Draft H.248 Implementor's\
    \ Guide approved at the Q.3\n   Rapporteur's meeting held near Dublin, October\
    \ 2001 (as TD-28, Terry\n   Anderson, editor).\n   GEN0202: added at the Geneva\
    \ meeting, February 2002, which consented\n   to H.248 v1 Amendment 1 (as TD Plen-36r1,\
    \ Marcello Pantaleo, editor).\n   ITUPOST: added in post-Geneva editing by the\
    \ ITU-T.\n   TTPOST: added in post-approval editing by the Megaco Chair, Tom\n\
    \   Taylor, who assembled this document for submission.\n   Section    Source\
    \                       Change\n   1          ITUPOST   Reference changed from\
    \ H.248 to H.248.1.\n   2.1        ITUPOST   Reference added for error codes,\
    \ changed from\n                        H.248 Annex L to H.248.8 (2002).\n   2.1\
    \        IG1100    Corrected Q.765 reference to Q.765.5.\n   2.1        GEN0202\
    \   Added reference to X.690.\n   2.2        GEN0202   Added reference to H.226.\n\
    \   2.2         IGDUB    Added informative references to Q.724, Q.764,\n     \
    \                   and Q.1902.4.\n   4          IG0601    Added expansion of\
    \ ALF.\n   5          TTPOST    Gave priority to IETF conventions (added at\n\
    \                        start of document).\n   6.1.1      IG0601    Added text\
    \ regarding use of wildcards for\n                        context identifiers.\
    \  (This information\n                        already appeared in section 8.1.2.\
    \  The IG\n                        change subsequently disappeared.)\n   6.1.1\
    \      IG1100    Added ranking of priority values.\n   6.2         IGDUB    Deleted\
    \ definition of signals.\n   6.2        GEN0202   Expanded text and diagrams describing\n\
    \                        multiplexing terminations.\n   6.2        TTPOST    Added\
    \ asterisks to multiplexing diagrams to\n                        indicate centre\
    \ of context.  Added Figure 6a\n                        showing cascading of multiplexes.\n\
    \   6.2.2      IG0601    Added text indicating that ALL does not\n           \
    \             include ROOT.\n   6.2.3      IG1100    Added text clarifying what\
    \ must be supported\n                        to claim support of a package.\n\
    \   6.2.3      IG1100    Added text indicating what packages a peer can\n    \
    \                    indicate support for, when some of them are\n           \
    \             extensions of others.\n   6.2.4      IG0601    Added text on ability\
    \ of provisioning to\n                        override default values, and need\
    \ for MGC to\n                        audit to learn the provisioned defaults.\n\
    \   6.2.4      IG0601    Added text indicating effect of omitting\n          \
    \              specific properties from Descriptors in\n                     \
    \   commands modifying a termination.\n                        Contradicted original\
    \ text saying that omitted\n                        properties retain their prior\
    \ values (still\n                        true for entirely-omitted Descriptors).\n\
    \   6.2.4      GEN0202   Modified above text to restrict it to\n             \
    \           read/write properties, allow for default\n                       \
    \ behaviour in place of default values if so\n                        specified\
    \ in the property definition.\n   6.2.4       IGDUB    Trimmed definition of signals\
    \ Descriptor in\n                        table and inserted cross-reference to\
    \ section\n                        7.1.11.\n   6.2.4      IG1100    Added Topology\
    \ and Error Descriptors to table.\n   6.2.5       IGDUB    Specified error code\
    \ to return if ROOT used\n                        inappropriately.\n   7.1.1 \
    \     IG1100    Added qualification to explanation of effect\n               \
    \         of missing Audit Descriptor, excepting\n                        Subtract.\n\
    \   7.1.3      GEN0202   Changed \"inputs\" to \"bearers\" to be consistent\n\
    \                        with terminology in 6.2.\n   7.1.4      IG0601    Small\
    \ change to make clear that more than one\n                        of Local, Remote,\
    \ and LocalControl can be\n                        included in the default streamId.\n\
    \   7.1.7      IG0601    Default value for Mode specified to be\n            \
    \            Inactive.\n   7.1.7      GEN0202   Added text requiring processing\
    \ of media in\n                        any of the reserved formats, where more\
    \ than\n                        one has been reserved in a given stream.\n   7.1.8\
    \       IGDUB    Added restriction to at most one m= line per\n              \
    \          session description.\n   7.1.9      IG0601    Text added to omit request\
    \ identifier if the\n                        EventsDescriptor is empty.  Further\
    \ text added\n                        at end to indicate the effects of an empty\n\
    \                        EventsDescriptor and an empty\n                     \
    \   EventBufferDescriptor.\n   7.1.9      IG0601    Fixed typo for destination\
    \ of a Notify.\n   7.1.9      IG1100    Added note to say event remains active\
    \ after\n                        it has been notified, so long as it is still\n\
    \                        present in the active Events Descriptor.\n   7.1.11 \
    \     IGDUB    Added definition of signals.\n   7.1.11     GEN0202   Modified\
    \ definition to include example of more\n                        complex signal,\
    \ and added role of signal in\n                        media preparation for future\
    \ signals.\n   7.1.11      IGDUB    The timeout completion reason was broadened\
    \ to\n                        include other circumstances where the signal\n \
    \                       completed on its own.  Text added to indicate\n      \
    \                  that if default signal type changed to TO,\n              \
    \          duration parameter must be provided.\n   7.1.11     GEN0202   Removed\
    \ reference to BR signal being \"so\n                        short\" it will stop\
    \ on its own.  Added text\n                        indicating that if the type\
    \ of a signal is\n                        changed to TO, the Duration parameter\
    \ must be\n                        supplied.\n   7.1.11     IG1100    Deleted\
    \ text discussing type of Signals List.\n   7.1.12     GEN0202   Improved wording\
    \ of introductory paragraph and\n                        added text making content\
    \ of returned\n                        Descriptor clear.\n   7.1.14.2   GEN0202\
    \   Added text indicating that when the start\n                        timer is\
    \ set to 0, initial digit timing is\n                        disabled and the\
    \ MG waits indefinitely for\n                        digits.\n   7.1.14.2   GEN0202\
    \   Added text pointing out that default digit\n                        timer\
    \ values should be provisioned, but can be\n                        overridden\
    \ in the digit map.\n   7.1.14.3   GEN0202   Changed result of long-short digit\
    \ timer\n                        conflict from undefined to long.\n   7.1.14.6\
    \   IG1100    Clarified that the digit map is provided by\n                  \
    \      the eventDM parameter, which must be present.\n   7.1.14.7   GEN0202  \
    \ Added text clarifying that events covered by\n                        the digit\
    \ map completion event have no side-\n                        effects unless separately\
    \ enabled.\n   7.1.14.8   IG0601    Added requirement that the event specification\n\
    \                        include the eventDM parameter.\n   7.1.17      IGDUB\
    \    Added text to indicate timestamp is optional\n                        and\
    \ to include observed event parameters in\n                        reported content.\n\
    \   7.1.17     GEN0202   Deleted provision that time is expressed in\n       \
    \                 UTC (since intention was to use format, not\n              \
    \          time zone).\n   7.1.18      IGDUB    Added text indicating error to\
    \ return if\n                        topology option not supported.\n   7.1.18\
    \     IG1100    Added text clarifying effect of not mentioning\n             \
    \ TTPOST    a termination in a topology Descriptor, and\n                    \
    \    default topology for a new termination.  (This\n                        text\
    \ got lost between the Dublin meeting and\n                        the production\
    \ of H.248 Amendment 1 out of the\n                        Geneva 02/02 meeting.\
    \  It has been added back\n                        to the present document.)\n\
    \   7.1.19     IG1100    New section to describe Error Descriptor.\n         \
    \     GEN0202   Slightly edited in Geneva 02/02 meeting.\n              ITUPOST\
    \   Reference for error code documentation updated\n                        to\
    \ H.248.8.\n   7.1.19     IG0601    Added paragraph giving guidance on level at\n\
    \                        which errors should be reported.\n   7.2        IG1100\
    \    Noted possibility of Error Descriptor in reply\n                        to\
    \ any command.\n   7.2.1      IG1100    Added EventBufferDescriptor as Add parameter.\n\
    \   7.2.1      IG1100    Removed restriction on use of CHOOSE wildcard.\n   7.2.2\
    \      IG1100    Added EventBufferDescriptor as Modify\n                     \
    \   parameter.\n   7.2.2      GEN0202   Added text on side-effects of Modify of\
    \ a\n                        multiplexing termination.\n   7.2.3      IG1100 \
    \   Added prohibition against subtracting from the\n                        NULL\
    \ context.\n   7.2.3      GEN0202   Added text on side-effects of Subtract of\
    \ a\n                        multiplexing termination.\n   7.2.3       IGDUB \
    \   Added text clarifying effect of empty\n                        AuditDescriptor\
    \ in Subtract.\n   7.2.4      IG1100    Added EventBufferDescriptor as Move parameter.\n\
    \   7.2.4      GEN0202   Removed misleading statement that Move acts as\n    \
    \                    subtract from original context.\n   7.2.4      IG1100   \
    \ Clarified effect of Move on properties of the\n                        moved\
    \ termination.\n   7.2.4      GEN0202   Added text on side-effects of Move of\
    \ a\n                        multiplexing termination.\n   7.2.5      IG1100 \
    \   Added examples showing W- wildcard usage.\n   7.2.5      IG1100    Noted that\
    \ returning a list of all contextIDs\n                        requires that they\
    \ be returned one per\n                        ActionReply.\n   7.2.5      IG1100\
    \    Added table entry (ALL, specific) to determine\n                        context\
    \ in which termination currently\n                        resides.\n   7.2.6 \
    \     GEN0202   Added table similar to that in 7.2.5.\n   7.2.7      IG0601  \
    \  Added TerminationID to API.\n   7.2.7       IGDUB    Indicated timestamp was\
    \ optional in Notify, to\n                        accord with syntax.\n   7.2.7\
    \      IG1100    Noted possibility of sending Error Descriptor\n             \
    \           in Notify.\n   7.2.8      IG0601    Added text to description of Forced\
    \ method to\n                        indicate that Forced on ROOT indicates a\
    \ cold\n                        restart (all context state lost).\n   7.2.8  \
    \     IGDUB    Amplified explanation of Disconnected method\n                \
    \        to emphasize return to the previously\n                        controlling\
    \ MGC.\n   7.2.8      IG0601    Added text for MG use of Failover method when\n\
    \                        it detects MGC failure.\n   7.2.8      IG1100    Added\
    \ notes discouraging use of\n                        ServiceChangeAddress and\
    \ warning that it could\n                        be either a full address or just\
    \ a port\n                        number.\n   7.2.8      IG0601    Added text\
    \ indicating that timestamp does not\n                        necessarily represent\
    \ absolute time, only\n                        local clock reading.\n   7.2.8\
    \       IGDUB    Corrected \"gateway\" to \"MGC\" in discussion of\n         \
    \               returned ServiceChangeMgcId parameter.\n   7.3        IG0601 \
    \   Removed error code documentation to Annex L\n              ITUPOST   (now\
    \ H.248.8).\n   8          IG1100    Added requirement that an Action be non-empty.\n\
    \   8          GEN0202   Added context properties and context property\n     \
    \                   audit requests to commands as potential\n                \
    \        contents of actions.\n   8.1.2      GEN0202   Added prohibition on using\
    \ partial contextIDs\n                        with ALL wildcards.\n   8.2.2  \
    \    IG1100    Added text clarifying when in transaction\n                   \
    \     processing the requested actions have been\n                        completed\
    \ and a reply can be sent.\n   8.2.2      IG1100    Added ALL as allowed contextID\
    \ in\n                        TransactionReply.\n   8.2.2      GEN0202   Provided\
    \ general reference to section 7.1.19\n                        for generation\
    \ of error Descriptors.\n   8.2.2      IG0601    Corrected Actions to Commands\
    \ when discussing\n                        partially-understood action.\n   8.3\
    \        IG0601    Added text specifying that the same MId value\n           \
    \             must be used by a given entity throughout the\n                \
    \        life of a control association.\n   8.3        IG0601    Added text expanding\
    \ on independence of\n                        transactions from messages.\n  \
    \ 9          ITUPOST   Indicated that additional transports may be\n         \
    \               defined in separate Recommendations as well as\n             \
    \           annexes to the primary specification.\n   9          IG0601    Gave\
    \ specific example of \"request source\n                        address\" for\
    \ IP.\n   9.1        IG1100    Deleted restriction to one outstanding Notify\n\
    \                        command on a termination at one time, since\n       \
    \                 this is transport-specific.\n   9.1        IG0601    Restored\
    \ restriction, but noted that it\n                        applied only to transport\
    \ not guaranteeing\n                        ordered delivery.\n   10.2       IG1100\
    \    Corrected length of synthesized address field\n                        from\
    \ 10 to 20 hex digits and indicated that\n                        calculation\
    \ should be over entire message, not\n                        just one transaction.\n\
    \   11.2       IG1100    Corrected text in first two paragraphs\n            \
    \            describing use of ServiceChangeMgcId\n                        parameter.\n\
    \   11.2       IG1100    Corrected \"Transaction Accept\" to \"Transaction\n \
    \                       Reply\".\n   11.4       IG0601    Noted that support of\
    \ redundant MGs requires\n              GEN0202   use of a reliable transport\
    \ and support in the\n                        MGC.  Added more explanation in\
    \ Geneva.\n   11.5       IG0601    Added text clarifying procedure if MG unable\n\
    \                        to establish a control relationship with any\n      \
    \                  of its eligible MGCs.\n   11.5        IGDUB    Added text indicating\
    \ that when trying to\n                        reestablish contact with the previously\n\
    \                        controlling MGC the MG uses the Disconnected\n      \
    \                  method.\n   11.5       IG1100    Clarified handoff procedure.\n\
    \   11.5       GEN0202   Changed text on replies to transactions in\n        \
    \                progress during handoff.  Replies now\n                     \
    \   discarded when the service relationship with\n                        the\
    \ old MGC has ended, rather than sent to the\n                        new MGC.\
    \  The new MGC could still send replies\n                        to requests sent\
    \ to the old MGC.\n   12.1.1     GEN0202   Added optional package designation\
    \ as\n                        \"designed to be extended only\".\n   12.1.1   \
    \  IG1100    Made prohibition on overloading of identifiers\n                \
    \        in extended packages transitive through all\n                       \
    \ ancestors of the extended package.\n   12.1.2      IGDUB    Clarified the set\
    \ of types allowed for\n                        properties.\n   12.1.2     GEN0202\
    \   Added requirement to specify the base type of\n                        a sub-list.\n\
    \   12.1.2     GEN0202   Provided requirements for content of the\n          \
    \              \"Possible Values\" template item, including\n                \
    \        specification of default values or behaviour.\n   12.1.4     GEN0202\
    \   Added requirement to specify the default\n                        signal type,\
    \ and specify a default duration\n                        for TO signals.  Also\
    \ noted that duration is\n                        meaningless for BR, and that\
    \ the signal type\n                        might be dependent on the values of\
    \ other\n                        signal parameters.\n   12.2       GEN0202   Fixed\
    \ section title (covers only event and\n                        signal parameters,\
    \ not properties or\n                        statistics).\n   12.2       IG1100\
    \    Reserved SPA and EPA prefixes, so they are not\n                        to\
    \ be used for signal and event parameter\n                        tokens.\n  \
    \ 12.2       IG0601    Expanded list of reserved prefixes.\n   12.2        IGDUB\
    \    Clarified the set of types allowed for signal\n                        and\
    \ event parameters.\n   12.2       GEN0202   Added requirement to specify the\
    \ base type of\n                        a sub-list.\n   12.2       GEN0202   Provided\
    \ requirements for content of the\n                        \"Possible Values\"\
    \ template item, including\n                        specification of default values\
    \ or behaviour.\n   12.4        IGDUB    Corrected to indicate identifiers must\
    \ start\n                        with alphabetic rather than alphanumeric\n  \
    \                      character.\n   13.1       IG0601    Changed private range\
    \ of binary package\n                        identifiers to convenient hex values.\n\
    \   A          GEN0202   Removed versions from X.680 and X.690\n             \
    \           references.\n   A.2         IGDUB    Added note warning that the syntax\
    \ alone does\n                        not provide a complete description of the\n\
    \                        constraints, but must be supplemented by a\n        \
    \                reading of the text and comments.\n   A.2        IG0601    Added\
    \ description of double wrapping of\n                        parameters declared\
    \ as OCTET STRING.\n   A.2        GEN0202   Some editing of double wrapping description\
    \ to\n                        use ASN.1, BER in their proper places.  Added\n\
    \                        possibility of encoding strings as UTF8String,\n    \
    \                    but only if they contain non-ASCII characters.\n   A.2  \
    \       IGDUB    Added line in table on double wrapping of true\n            \
    \            octet strings.\n   A.2        IG1100    Corrected and expanded comments\
    \ describing\n                        mtpAddress form of MId.  Fixed maximum length\n\
    \                        of mtpAddress both here and in\n                    \
    \    ServiceChangeAddress.\n   A.2        IG0601   Inserted missing lines in IP4Address\n\
    \                        production.\n   A.2        IG0601    Modified TransactionResponseAck\
    \ to allow\n                        acknowledgement of multiple ranges of\n  \
    \                      transactionIds.\n   A.2        IG0601    Corrected numerical\
    \ value of CHOOSE as a\n                        context identifier.\n   A.2  \
    \       IGDUB    Added missing extension marker in\n                        TopologyRequest.\n\
    \   A.2        IG1100    AuditReply and AuditResult modified to bring\n      \
    \                  binary functionality into line with text\n                \
    \        functionality.\n   A.2        IG0601    Removed OPTIONAL tag from terminationID\
    \ in\n                        NotifyReply.\n   A.2        IG0601    Added extraInfo\
    \ substructure to EventParameter\n                        and SigParameter.\n\
    \   A.2        IG0601    Modified MediaDescriptor to make it optional\n      \
    \                  to specify a stream.\n   A.2        IG0601    Added OPTIONAL\
    \ tags to reserveValue and\n                        reserveGroup.\n   A.2    \
    \     IGDUB    Added to comments for pkgdName to indicate\n                  \
    \      applicability to event names, signal names,\n                        and\
    \ statisticIds as well as property.\n   A.2        IG0601    RequestID made optional\
    \ in EventsDescriptor\n                        and SecondEventsDescriptor and\
    \ comment added\n                        saying it must be present if events are\n\
    \                        present.\n   A.2        IG1100    Added OPTIONAL tags\
    \ on RequestActions and\n                        SecondRequestedActions keepActive\
    \ BOOLEANs.\n   A.2        IG1100    Added comment to indicate requestID value\
    \ to\n                        use in an AuditCapReply.\n   A.2        GEN0202\
    \   Added comment to DigitMapValue indicating time\n                        units\
    \ for timers.\n   A.2        IG0601    Added comment indicating coding of Value\
    \ for\n              GEN0202   ServiceChangeReason.  Cleaned up in Geneva to\n\
    \                        use ASN.1 and BER in their proper places.\n   A.2   \
    \     IG0601    Inserted missing extension marker in\n                       \
    \ ServiceChangeParm production.\n   A.2        IG0601    Aligned definition of\
    \ mtpAddress in\n                        ServiceChangeAddress with that in MId.\n\
    \   A.2        IG0601    Added timestamp to ServiceChangeResParm.\n   A.2    \
    \     IGDUB    Changed type of profileName in\n                        ServiceChangeProfile\
    \ to IA5String.\n   A.2        IG0601    Made returned value optional in\n   \
    \                     statisticsParameter, to support\n                      \
    \  auditCapability result.\n   A.2        GEN0202   Added reference to ISO 8601:1988\
    \ for\n                        TimeNotation.\n   A.2        IG1100    Value production\
    \ modified to support the\n                        sublist parameter type.\n \
    \  A.3        IG1100    Corrected ABNF for digitStringlisT, replacing\n      \
    \                  \"/\" with \"|\".\n   A.3        IG1100    Added parentheses\
    \ to digitMapRange production.\n   A.3        IG1100    Replaced more abbreviated\
    \ syntax for pathName\n                        with fuller definition and constraints\
    \ copied\n                        from B.2.\n   B.2         IGDUB    Added note\
    \ warning that the syntax alone does\n                        not provide a complete\
    \ description of the\n                        constraints, but must be supplemented\
    \ by a\n                        reading of the text and comments.\n   B.2    \
    \    IG0601    Added note warning that the interpretation of\n               \
    \         symbols is context-dependent.\n   B.2        IG1100    Added comment\
    \ to indicate case insensitivity\n                        of protocol (excepting\
    \ SDP) and ABNF.\n   B.2        IG0601    Expanded upon and capitalized this comment.\n\
    \   B.2        IG0601    Lengthy note added on the coding of the VALUE\n     \
    \                   construct.\n   B.2         IGDUB    Deleted sentence in note\
    \ suggesting that\n                        packages could add new types for properties,\n\
    \                        parameters, or statistics.\n   B.2        IG0601    Added\
    \ note indicating that parsers should\n                        allow for white\
    \ space preceding the first line\n                        of SDP in Local or Remote.\n\
    \   B.2         IGDUB    Added comments identifying the O- and W- tags.\n   B.2\
    \        IG1100    Moved wildcard tag up from individual commands\n          \
    \              to commandRequestList.\n   B.2        GEN0202   Added additional\
    \ error case to actionReply.\n   B.2        IG0601    Modified syntax of auditOther\
    \ to allow return\n                        of terminationID only.\n   B.2    \
    \     IGDUB    Corrected upper limit for V4hex.\n   B.2        IG1100    Corrected\
    \ and expanded comments describing\n                        mtpAddress form of\
    \ MId.\n   B.2        IG0601    Modified comment to mediaParm to make\n      \
    \                  streamParms and StreamDescriptor mutually\n               \
    \         exclusive.\n   B.2        GEN0202   Modified comment further to indicate\
    \ at most\n                        one instance of terminationStateDescriptor.\n\
    \   B.2        GEN0202   Expanded comment for streamParm to indicate\n       \
    \                 the restriction on repetition is per item.\n   B.2        IG0601\
    \    Modified \"at most once\" comments to localParm,\n                      \
    \  terminationStateParm, and modemType, to allow\n                        multiple\
    \ instances of propertyParm in the\n                        first two cases and\
    \ extensionParameter in the\n                        last one.\n   B.2       \
    \ IG0601    Added note before description of Local and\n                     \
    \   Remote, pointing out that the octet value x00\n                        is\
    \ not allowed in octetString.\n   B.2        IG0601    Syntax for eventsDescriptor,\
    \ embedFirst, and\n                        eventBufferDescriptor modified to make\n\
    \                        contents beyond token optional.\n   B.2         IGDUB\
    \    Replaced \"event\" by \"item\" in comment to\n                        pkgdName\
    \ because pkgdName applies to\n                        properties, signals, and\
    \ statistics as well.\n   B.2        IG0601    Corrected placement of EQUAL in\
    \ eventDM\n                        production.\n   B.2        IG1100    Added\
    \ comment and syntax to indicate requestID\n                        value to use\
    \ in an AuditCapReply.\n   B.2        IG1100    Corrected Modem Descriptor to\
    \ allow package\n                        items as properties.\n   B.2        IG0601\
    \    Comment to modemType changed to allow multiple\n                        instances\
    \ of extensionParameter.\n   B.2        GEN0202   Comment added to indicate units\
    \ for Timer.\n   B.2        IG1100    Added parentheses to digitMapRange production.\n\
    \   B.2        IG1100    Added comment to serviceChangeParm,\n               \
    \         restricting each parameter to one appearance.\n   B.2        IG0601\
    \    Added comments making serviceChangeMgcId and\n                        serviceChangeAddress\
    \ mutually exclusive in\n                        ServiceChangeParm and servChgReplyParm.\n\
    \   B.2         IGDUB    Added comment to serviceChangeParm indicating\n     \
    \                   that ServiceChangeMethod and\n                        ServiceChangeReason\
    \ are required.\n   B.2        IG0601    Added Timestamp to servChgReplyParm.\n\
    \   B.2        IG0601    Added comment indicating coding of Value for\n      \
    \                  ServiceChangeReason.\n   B.2        IG0601    Modified ServiceChangeAddress\
    \ to use MId\n                        definition for full address.\n   B.2   \
    \     IG1100    Made returned value optional in\n                        statisticsParameter,\
    \ to support\n                        auditCapability result.\n   B.2        IG1100\
    \    Changed topologyDescriptor to allow multiple\n                        triples.\n\
    \   B.2        IG0601    Added comment forbidding use of a double quote\n    \
    \                    within a quotedString value.\n   B.2        IG1100    Reserved\
    \ prefixes for new tokens added to\n                        signalParameter and\
    \ eventParameter, to avoid\n                        collision with package names.\n\
    \   B.2        IG1100    EmbedToken and EmergencyToken changed to\n          \
    \              remove clash with EventBufferToken.\n   B.3        IG1100    New\
    \ section describing hexadecimal octet\n                        encoding.\n  \
    \ B.4        IG1100    New section describing hex octet sequence.\n   C      \
    \    IG1100    Added permission to use Annex C properties in\n               \
    \         LocalControl as well as in Local and Remote.\n   C          IG0601 \
    \   Added text making support of all properties of\n                        Annex\
    \ C optional.\n   C           IGDUB    Added directions to reconcile tabulated\n\
    \                        formats with allowed types for properties.\n   C.1  \
    \      IG1100    Corrected Q.765 reference to Q.765.5 for\n                  \
    \      ACodec.\n   C.1        IG1100    Deprecated Echocanc codepoint in favour\
    \ of\n                        package-defined property.\n   C.4        ITUPOST\
    \   Updated references from Q.2961 to Q.2961.1.\n   C.4         IGDUB    Added\
    \ details on format of VPVC.\n   C.9        IG1100    Renamed USI to layer1prot.\n\
    \   C.9        IG1100    Deprecated ECHOCI codepoint in favour of\n          \
    \              package-defined property.\n   C.9        IG1100    Added new USI\
    \ property.\n   C.11       IG1100    Added m= line tag.\n   D.1        IG0601\
    \    Added explanation of ALF.\n   D.1.5       IGDUB    Expanded text indicating\
    \ that when trying to\n                        reestablish contact with the previously\n\
    \                        controlling MGC the MG uses the Disconnected\n      \
    \                  method.\n   E.1.2      GEN0202   Added missing EventsDescriptor\
    \ parameters\n                        lines.\n   E.1.2      GEN0202   For the\
    \ Signal Completion event:\n                        - corrected the description\
    \ of how it is\n                        enabled\n                        - heavily\
    \ edited the description of the Signal\n                        Identity observed\
    \ event parameter and added a\n                        type.\n   E.1.2       IGDUB\
    \    The timeout completion reason for the Signal\n                        Completion\
    \ event was broadened to include\n                        other circumstances\
    \ where the signal completed\n                        on its own.\n   E.1.2  \
    \    IG1100    Added signal list ID observed event parameter\n               \
    \         to the Signal Completion event.\n   E.2.1      IG0601    Added missing\
    \ read only, read-write\n                        specifications.\n   E.2.1   \
    \   IG0601    Split ProvisionalResponseTimer properties into\n               \
    \         one for MG, one for MGC.\n   E.3        GEN0202   Added \"Designed to\
    \ be extended only\" to\n                        tonegen package description.\n\
    \   E.4        GEN0202   Added \"Designed to be extended only\" to\n         \
    \               tonedet package description.\n   E.4.2      GEN0202   Added type\
    \ for tone ID observed parameter for\n                        Long Tone Detected\
    \ event.\n   E.6.2      IG1100    Corrected binary identifier for digit map\n\
    \                        completion event to avoid clash with base\n         \
    \               package.\n   E.6.2      IG1100    Removed procedural text.\n \
    \  E.6.5      IG1100    Added procedural text indicating where to find\n     \
    \                   the applicable digit map and indicating the\n            \
    \            error to return if the parameter is missing.\n   E.6.5      IG0601\
    \    Further modified procedural text.\n   E.7.3      IG1100    Corrected text\
    \ identifier for payphone\n                        recognition tone to avoid clash\
    \ with base\n                        package.\n   E.10.5      IGDUB    Provided\
    \ informative references for tones and\n                        procedures for\
    \ continuity check.\n   E.13       GEN0202   Added note that TDM package could\
    \ also apply\n                        to other transports.\n   E.13.1     IG1100\
    \    Changed default for echo cancellation from\n                        \"on\"\
    \ to provisioned.\n   E.13.1     IG0601    Corrected type for gain property.\n\
    \   Appendix   TTPOST    Included a number of corrections which were\n      I\
    \                 not picked up in H.248.1 Amendment 1 but which\n           \
    \             do appear in H.248.1 v2.\n"
- title: Intellectual Property Rights
  contents:
  - "Intellectual Property Rights\n   The ITU draws attention to the possibility that\
    \ the practice or\n   implementation of this RFC may involve the use of a claimed\n\
    \   Intellectual Property Right.  The ITU takes no position concerning\n   the\
    \ evidence, validity or applicability of claimed Intellectual\n   Property Rights,\
    \ whether asserted by ITU members or others outside of\n   the Recommendation\
    \ development process.\n   As of the date of approval of this RFC, the ITU had\
    \ received notice\n   of intellectual property, protected by patents, which may\
    \ be required\n   to implement this RFC.  However, implementors are cautioned\
    \ that this\n   may not represent the latest information and are therefore strongly\n\
    \   urged to consult the TSB patent database.\n   The IETF has also received notice\
    \ of intellectual property claims\n   relating to Megaco/H.248.1.  Please consult\
    \ the IETF IPR\n   announcements at http://www.ietf.org/ipr.html.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Megaco/H.248.1 is the result of hard work by many people\
    \ in both the\n   IETF and in ITU-T Study Group 16.  This section records those\
    \ who\n   played a prominent role in ITU-T meetings, on the Megaco list, or\n\
    \   both.\n   Megaco/H.248 owes a large initial debt to the MGCP protocol (RFC\n\
    \   2705), and thus to its authors, Mauricio Arango, Andrew Dugan, Ike\n   Elliott,\
    \ Christian Huitema, and Scott Pickett.  Flemming Andreasen\n   does not appear\
    \ on this list of authors, but was a major contributor\n   to the development\
    \ of both MGCP and Megaco/H.248.1.  RFC 3435 has an\n   extensive acknowledgement\
    \ of many other people who worked on media\n   gateway control before Megaco got\
    \ started.\n   The authors of the first Megaco RFCs (2805, then 3015) were Fernando\n\
    \   Cuervo, Nancy Greene, Abdallah Rayhan, Christian Huitema, Brian\n   Rosen,\
    \ and John Segers.  Christian Groves conceived and was editor of\n   Annex C.\
    \  The people most active on the Megaco list in the period\n   leading up to the\
    \ completion of RFC 2885 were Brian Rosen, Tom\n   Taylor, Nancy Greene, Christian\
    \ Huitema, Matt Holdrege, Chip Sharp,\n   John Segers, Michael Thomas, Henry Sinnreich,\
    \ and Paul Sijben.  The\n   people who sacrificed sleep and meals to complete\
    \ the massive amount\n   of work required in the decisive Study Group 16 meeting\
    \ of February,\n   2000, were Michael Brown, Ranga Dendi, Larry Forni, Glen Freundlich,\n\
    \   Christian Groves, Alf Heidemark, Steve Magnell, Selvam Rengasami,\n   Rich\
    \ Rubin, Klaus Sambor, John Segers, Chip Sharp, Tom Taylor, and\n   Stephen Terrill.\n\
    \   The most active people on the Megaco list in the period since the\n   February\
    \ 2000 have been Tom Taylor, Brian Rosen, Christian Groves,\n   Madhu Babu Brahmanapally,\
    \ Troy Cauble, Terry Anderson, Chuong Nguyen,\n   and Kevin Boyle, but many other\
    \ people have been regular\n   contributors.  Brian Rosen did tremendous service\
    \ in putting together\n   the Megaco interoperability tests.  On the Study Group\
    \ 16 side, the\n   editorial team for the final revised document in February,\
    \ 2002\n   included Christian Groves, Marcello Pantaleo, Terry Anderson, Peter\n\
    \   Leis, Kevin Boyle, and Tom Taylor.\n   Tom Taylor as Megaco Chair managed\
    \ the day to day operation of the\n   Megaco list, with Brian Rosen taking an\
    \ equal share of the burden for\n   most of the last three years.  Glen Freundlich\
    \ as the Study Group 16\n   Rapporteur ran the ITU-T meetings and ensured that\
    \ all of the work at\n   hand was completed.  Without Glen's determination the\
    \ Megaco/H.248\n   standard would have taken at least half a year longer to produce.\n\
    \   Christian Groves filled in ably as Rapporteur when Glen could no\n   longer\
    \ take part.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Terry L. Anderson\n   24 Hill St\n   Bernardsville, NJ\
    \ 07924\n   USA\n   EMail: tlatla@verizon.net\n   Christian Groves\n   Ericsson\
    \ AsiaPacificLab Australia\n   37/360 Elizabeth St\n   Melbourne, Victoria 3000\n\
    \   Australia\n   EMail: Christian.Groves@ericsson.com.au\n   Marcello Pantaleo\n\
    \   Ericsson Eurolab Deuschland\n   Ericsson Allee 1\n   52134 Herzogenrath, Germany\n\
    \   EMail: Marcello.Pantaleo@eed.ericsson.se\n   Tom Taylor\n   Nortel Networks\n\
    \   1852 Lorraine Ave,\n   Ottawa, Ontario\n   Canada K1H 6Z8\n   Phone: +1 613\
    \ 736 0961\n   EMail: taylor@nortelnetworks.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
