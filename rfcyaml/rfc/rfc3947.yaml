- contents:
  - '                Negotiation of NAT-Traversal in the IKE

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes how to detect one or more network address\n
    \  translation devices (NATs) between IPsec hosts, and how to negotiate\n   the
    use of UDP encapsulation of IPsec packets through NAT boxes in\n   Internet Key
    Exchange (IKE).\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction. . . . . . . . . . . . . . . . . . . .
    . . . . . . 2\n   2.  Specification of Requirements . . . . . . . . . . . . .
    . . . . 3\n   3.  Phase 1 . . . . . . . . . . . . . . . . . . . . . . . . . .
    . . 3\n       3.1.  Detecting Support of NAT-Traversal. . . . . . . . . . . .
    4\n       3.2.  Detecting the Presence of NAT . . . . . . . . . . . . . . 4\n
    \  4.  Changing to New Ports . . . . . . . . . . . . . . . . . . . . . 6\n   5.
    \ Quick Mode. . . . . . . . . . . . . . . . . . . . . . . . . . . 8\n       5.1.
    \ Negotiation of the NAT-Traversal Encapsulation. . . . . . 9\n       5.2.  Sending
    the Original Source and Destination Addresses . . 9\n   6.  Initial Contact Notifications.
    . . . . . . . . . . . . . . . . 11\n   7.  Recovering from the Expiring NAT Mappings.
    . . . . . . . . . . 11\n   8.  Security Considerations. . . . . . . . . . . .
    . . . . . . . . 12\n   9.  IANA Considerations. . . . . . . . . . . . . . . .
    . . . . . . 13\n   10. IAB Considerations . . . . . . . . . . . . . . . . . .
    . . . . 14\n   11. Acknowledgments. . . . . . . . . . . . . . . . . . . . . .
    . . 14\n   12. References . . . . . . . . . . . . . . . . . . . . . . . . . .
    14\n       12.1. Normative References . . . . . . . . . . . . . . . . . . 14\n
    \      12.2. Informative References . . . . . . . . . . . . . . . . . 14\n   Authors'
    Addresses . . . . . . . . . . . . . . . . . . . . . . . . 15\n   Full Copyright
    Statement . . . . . . . . . . . . . . . . . . . . . 16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document is split into two parts.  The first describes
    what is\n   needed in IKE Phase 1 for NAT-Traversal support.  This includes\n
    \  detecting whether the other end supports NAT-Traversal, and detecting\n   whether
    there is one or more NATs between the peers.\n   The second part describes how
    to negotiate the use of UDP\n   encapsulated IPsec packets in IKE's Quick Mode.
    \ It also describes\n   how to transmit the original source and destination addresses
    to the\n   peer, if required.  These addresses are used in transport mode to\n
    \  update the TCP/IP checksums incrementally so that they will match\n   after
    the NAT transform.  (The NAT cannot do this, because the TCP/IP\n   checksum is
    inside the UDP encapsulated IPsec packet.)\n   The document [RFC3948] describes
    the details of UDP encapsulation,\n   and [RFC3715] provides background information
    and motivation of NAT-\n   Traversal in general.  In combination with [RFC3948],
    this document\n   represents an \"unconditionally compliant\" solution to the\n
    \  requirements as defined by [RFC3715].\n   In the basic scenario for this document,
    the initiator is behind\n   NA(P)T, and the responder has a fixed static IP address.\n
    \  This document defines a protocol that will work even if both ends are\n   behind
    NAT, but the process of how to locate the other end is out of\n   the scope of
    this document.  In one scenario, the responder is behind\n   a static host NAT
    (only one responder per IP, as there is no way to\n   use any destination ports
    other than 500/4500).  That is, it is known\n   by the configuration.\n"
  title: 1.  Introduction
- contents:
  - "2.  Specification of Requirements\n   This document shall use the keywords \"MUST\",
    \"MUST NOT\", \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD
    NOT\", \"RECOMMENDED, \"MAY\",\n   and \"OPTIONAL\" to describe requirements.
    \ They are to be interpreted\n   as described in [RFC2119].\n"
  title: 2.  Specification of Requirements
- contents:
  - "3.  Phase 1\n   The detection of support for NAT-Traversal and detection of NAT
    along\n   the path between the two IKE peers occurs in IKE [RFC2409] Phase 1.\n
    \  The NAT may change the IKE UDP source port, and recipients MUST be\n   able
    to process IKE packets whose source port is different from 500.\n   The NAT does
    not have to change the source port if:\n   o  only one IPsec host is behind the
    NAT, or\n   o  for the first IPsec host, the NAT can keep the port 500, and the\n
    \     NAT will only change the port number for later connections.\n   Recipients
    MUST reply back to the source address from the packet (see\n   [RFC3715], section
    2.1, case d).  This means that when the original\n   responder is doing rekeying
    or sending notifications to the original\n   initiator, it MUST send the packets
    using the same set of port and IP\n   numbers used when the IKE SA was last used.\n
    \  For example, when the initiator sends a packet with source and\n   destination
    port 500, the NAT may change it to a packet with source\n   port 12312 and destination
    port 500.  The responder must be able to\n   process the packet whose source port
    is 12312.  It must reply back\n   with a packet whose source port is 500 and destination
    port is 12312.\n   The NAT will then translate this packet to source port 500
    and\n   destination port 500.\n"
  - contents:
    - "3.1.  Detecting Support of NAT-Traversal\n   The NAT-Traversal capability of
      the remote host is determined by an\n   exchange of vendor ID payloads.  In
      the first two messages of Phase\n   1, the vendor id payload for this specification
      MUST be sent if\n   supported (and it MUST be received by both sides) for the
      NAT-\n   Traversal probe to continue. The content of the payload is the MD5\n
      \  hash of\n      RFC 3947\n   The exact content in hex for the payload is\n
      \     4a131c81070358455c5728f20e95452f\n"
    title: 3.1.  Detecting Support of NAT-Traversal
  - contents:
    - "3.2.  Detecting the Presence of NAT\n   The NAT-D payload not only detects
      the presence of NAT between the\n   two IKE peers, but also detects where the
      NAT is.  The location of\n   the NAT device is important, as the keepalives
      have to initiate from\n   the peer \"behind\" the NAT.\n   To detect NAT between
      the two hosts, we have to detect whether the IP\n   address or the port changes
      along the path.  This is done by sending\n   the hashes of the IP addresses
      and ports of both IKE peers from each\n   end to the other.  If both ends calculate
      those hashes and get same\n   result, they know there is no NAT between.  If
      the hashes do not\n   match, somebody has translated the address or port.  This
      means that\n   we have to do NAT-Traversal to get IPsec packets through.\n   If
      the sender of the packet does not know his own IP address (in case\n   of multiple
      interfaces, and the implementation does not know which IP\n   address is used
      to route the packet out), the sender can include\n   multiple local hashes to
      the packet (as separate NAT-D payloads).  In\n   this case, NAT is detected
      if and only if none of the hashes match.\n   The hashes are sent as a series
      of NAT-D (NAT discovery) payloads.\n   Each payload contains one hash, so in
      case of multiple hashes,\n   multiple NAT-D payloads are sent.  In the normal
      case there are only\n   two NAT-D payloads.\n   The NAT-D payloads are included
      in the third and fourth packets of\n   Main Mode, and in the second and third
      packets in the Aggressive\n   Mode.\n   The format of the NAT-D packet is\n
      \       1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8\n      +---------------+---------------+---------------+---------------+\n
      \     | Next Payload  | RESERVED      | Payload length                |\n      +---------------+---------------+---------------+---------------+\n
      \     ~                 HASH of the address and port                  ~\n      +---------------+---------------+---------------+---------------+\n
      \  The payload type for the NAT discovery payload is 20.\n   The HASH is calculated
      as follows:\n         HASH = HASH(CKY-I | CKY-R | IP | Port)\n   This uses the
      negotiated HASH algorithm.  All data inside the HASH is\n   in the network byte-order.
      \ The IP is 4 octets for an IPv4 address\n   and 16 octets for an IPv6 address.
      \ The port number is encoded as a 2\n   octet number in network byte-order.
      \ The first NAT-D payload contains\n   the remote end's IP address and port
      (i.e., the destination address\n   of the UDP packet).  The remaining NAT-D
      payloads contain possible\n   local-end IP addresses and ports (i.e., all possible
      source addresses\n   of the UDP packet).\n   If there is no NAT between the
      peers, the first NAT-D payload\n   received should match one of the local NAT-D
      payloads (i.e., the\n   local NAT-D payloads this host is sending out), and
      one of the other\n   NAT-D payloads must match the remote end's IP address and
      port.  If\n   the first check fails (i.e., first NAT-D payload does not match
      any\n   of the local IP addresses and ports), it means that there is dynamic\n
      \  NAT between the peers, and this end should start sending keepalives\n   as
      defined in the [RFC3948] (this end is behind the NAT).\n   The CKY-I and CKY-R
      are the initiator and responder cookies.  They\n   are added to the hash to
      make precomputation attacks for the IP\n   address and port impossible.\n   The
      following example is of a Phase 1 exchange using NAT-Traversal in\n   Main Mode
      (authentication with signatures):\n   Initiator                           Responder\n
      \  ------------                        ------------\n   HDR, SA, VID -->\n                                       <--
      HDR, SA, VID\n   HDR, KE, Ni, NAT-D, NAT-D -->\n                                       <--
      HDR, KE, Nr, NAT-D, NAT-D\n   HDR*#, IDii, [CERT, ] SIG_I -->\n                                       <--
      HDR*#, IDir, [CERT, ], SIG_R\n   The following example is of Phase 1 exchange
      using NAT-Traversal in\n   Aggressive Mode (authentication with signatures):\n
      \  Initiator                           Responder\n   ------------                        ------------\n
      \  HDR, SA, KE, Ni, IDii, VID -->\n                                       <--
      HDR, SA, KE, Nr, IDir,\n                                               [CERT,
      ], VID, NAT-D,\n                                               NAT-D, SIG_R\n
      \  HDR*#, [CERT, ], NAT-D, NAT-D,\n       SIG_I -->\n   The # sign indicates
      that those packets are sent to the changed port\n   if NAT is detected.\n"
    title: 3.2.  Detecting the Presence of NAT
  title: 3.  Phase 1
- contents:
  - "4.  Changing to New Ports\n   IPsec-aware NATs can cause problems (See [RFC3715],
    section 2.3).\n   Some NATs will not change IKE source port 500 even if there
    are\n   multiple clients behind the NAT (See [RFC3715], section 2.3, case n).\n
    \  They can also use IKE cookies to demultiplex traffic instead of using\n   the
    source port (See [RFC3715], section 2.3, case m).  Both of these\n   are problematic
    for generic NAT transparency, as it is difficult for\n   IKE to discover the capabilities
    of the NAT.  The best approach is\n   simply to move the IKE traffic off port
    500 as soon as possible to\n   avoid any IPsec-aware NAT special casing.\n   Take
    the common case of the initiator behind the NAT.  The initiator\n   must quickly
    change to port 4500 once the NAT has been detected to\n   minimize the window
    of IPsec-aware NAT problems.\n   In Main Mode, the initiator MUST change ports
    when sending the ID\n   payload if there is NAT between the hosts.  The initiator
    MUST set\n   both UDP source and destination ports to 4500.  All subsequent\n
    \  packets sent to this peer (including informational notifications)\n   MUST
    be sent on port 4500.  In addition, the IKE data MUST be\n   prepended with a
    non-ESP marker allowing for demultiplexing of\n   traffic, as defined in [RFC3948].\n
    \  Thus, the IKE packet now looks like this:\n         IP UDP(4500,4500) <non-ESP
    marker> HDR*, IDii, [CERT, ] SIG_I\n   This assumes authentication using signatures.
    \ The 4 bytes of non-ESP\n   marker are defined in the [RFC3948].\n   When the
    responder gets this packet, the usual decryption and\n   processing of the various
    payloads is performed.  If these are\n   successful, the responder MUST update
    local state so that all\n   subsequent packets (including informational notifications)
    to the\n   peer use the new port, and possibly the new IP address obtained from\n
    \  the incoming valid packet.  The port will generally be different, as\n   the
    NAT will map UDP(500,500) to UDP(X,500), and UDP(4500,4500) to\n   UDP(Y,4500).
    \ The IP address will seldom be different from the pre-\n   changed IP address.
    \ The responder MUST respond with all subsequent\n   IKE packets to this peer
    by using UDP(4500,Y).\n   Similarly, if the responder has to rekey the Phase 1
    SA, then the\n   rekey negotiation MUST be started by using UDP(4500,Y).  Any\n
    \  implementation that supports NAT traversal MUST support negotiations\n   that
    begin on port 4500.  If a negotiation starts on port 4500, then\n   it doesn't
    need to change anywhere else in the exchange.\n   Once port change has occurred,
    if a packet is received on port 500,\n   that packet is old.  If the packet is
    an informational packet, it MAY\n   be processed if local policy allows this.
    \ If the packet is a Main\n   Mode or an Aggressive Mode packet (with the same
    cookies as previous\n   packets), it SHOULD be discarded.  If the packet is a
    new Main Mode\n   or Aggressive exchange, then it is processed normally (the other
    end\n   might have rebooted, and this is starting new exchange).\n   Here is an
    example of a Phase 1 exchange using NAT-Traversal in Main\n   Mode (authentication
    with signatures) with changing port:\n   Initiator                           Responder\n
    \  ------------                        ------------\n   UDP(500,500) HDR, SA,
    VID -->\n                                       <-- UDP(500,X) HDR, SA, VID\n
    \  UDP(500,500) HDR, KE, Ni,\n       NAT-D, NAT-D -->\n                                       <--
    UDP(500,X) HDR, KE, Nr,\n                                               NAT-D,
    NAT-D\n   UDP(4500,4500) HDR*#, IDii,\n       [CERT, ]SIG_I -->\n                                       <--
    UDP(4500,Y) HDR*#, IDir,\n                                               [ CERT,
    ], SIG_R\n   The procedure for Aggressive Mode is very similar.  After the NAT
    has\n   been detected, the initiator sends IP UDP(4500,4500) <4 bytes of\n   non-ESP
    marker> HDR*, [CERT, ], NAT-D, NAT-D, and SIG_I.  The\n   responder does similar
    processing to the above, and if successful,\n   MUST update it's internal IKE
    ports.  The responder MUST respond with\n   all subsequent IKE packets to this
    peer by using UDP(4500,Y).\n   Initiator                           Responder\n
    \  ------------                        ------------\n   UDP(500,500) HDR, SA,
    KE,\n       Ni, IDii, VID -->\n                                       <-- UDP(500,X)
    HDR, SA, KE,\n                                               Nr, IDir, [CERT,
    ],\n                                               VID, NAT-D, NAT-D,\n                                               SIG_R\n
    \  UDP(4500,4500) HDR*#, [CERT, ],\n       NAT-D, NAT-D,\n       SIG_I -->\n                                       <--
    UDP(4500, Y) HDR*#, ...\n   If the support of the NAT-Traversal is enabled, the
    port in the ID\n   payload in Main Mode/Aggressive Mode MUST be set to 0.\n   The
    most common case for the responder behind the NAT is if the NAT\n   is simply
    doing 1:1 address translation.  In this case, the initiator\n   still changes
    both ports to 4500.  The responder uses an algorithm\n   identical to that above,
    although in this case Y will equal 4500, as\n   no port translation is happening.\n
    \  A different port change case involves out-of-band discovery of the\n   ports
    to use.  Those discovery methods are out of the scope of this\n   document.  For
    instance, if the responder is behind a port\n   translating NAT, and the initiator
    needs to contact it first, then\n   the initiator will have to determine which
    ports to use, usually by\n   contacting some other server.  Once the initiator
    knows which ports\n   to use to traverse the NAT, generally something like UDP(Z,4500),
    it\n   initiates using these ports.  This is similar to the responder rekey\n
    \  case above in that the ports to use are already known up front, and\n   no
    additional change has to take place.  Also, the first keepalive\n   timer starts
    after the change to the new port, and no keepalives are\n   sent to the port 500.\n"
  title: 4.  Changing to New Ports
- contents:
  - "5.  Quick Mode\n   After Phase 1, both ends know whether there is a NAT present
    between\n   them.  The final decision of using NAT-Traversal is left to Quick\n
    \  Mode.  The use of NAT-Traversal is negotiated inside the SA payloads\n   of
    Quick Mode.  In Quick Mode, both ends can also send the original\n   addresses
    of the IPsec packets (in case of the transport mode) to the\n   other end so that
    each can fix the TCP/IP checksum field after the\n   NAT transformation.\n"
  - contents:
    - "5.1.  Negotiation of the NAT-Traversal Encapsulation\n   The negotiation of
      the NAT-Traversal happens by adding two new\n   encapsulation modes.  These
      encapsulation modes are\n   UDP-Encapsulated-Tunnel         3\n   UDP-Encapsulated-Transport
      \     4\n   It is not normally useful to propose both normal tunnel or transport\n
      \  mode and UDP-Encapsulated modes.  UDP encapsulation is required to\n   fix
      the inability to handle non-UDP/TCP traffic by NATs (see\n   [RFC3715], section
      2.2, case i).\n   If there is a NAT box between hosts, normal tunnel or transport\n
      \  encapsulations may not work.  In this case, UDP-Encapsulation SHOULD\n   be
      used.\n   If there is no NAT box between, there is no point in wasting\n   bandwidth
      by adding UDP encapsulation of packets.  Thus, UDP-\n   Encapsulation SHOULD
      NOT be used.\n   Also, the initiator SHOULD NOT include both normal tunnel or\n
      \  transport mode and UDP-Encapsulated-Tunnel or UDP-Encapsulated-\n   Transport
      in its proposals.\n"
    title: 5.1.  Negotiation of the NAT-Traversal Encapsulation
  - contents:
    - "5.2.  Sending the Original Source and Destination Addresses\n   To perform
      incremental TCP checksum updates, both peers may need to\n   know the original
      IP addresses used by their peers when those peers\n   constructed the packet
      (see [RFC3715], section 2.1, case b).  For the\n   initiator, the original Initiator
      address is defined to be the\n   Initiator's IP address.  The original Responder
      address is defined to\n   be the perceived peer's IP address.  For the responder,
      the original\n   Initiator address is defined to be the perceived peer's address.
      \ The\n   original Responder address is defined to be the Responder's IP\n   address.\n
      \  The original addresses are sent by using NAT-OA (NAT Original\n   Address)
      payloads.\n   The Initiator NAT-OA payload is first.  The Responder NAT-OA payload\n
      \  is second.\n   Example 1:\n         Initiator <---------> NAT <--------->
      Responder\n                  ^               ^           ^\n                Iaddr
      \          NatPub      Raddr\n   The initiator is behind a NAT talking to the
      publicly available\n   responder.  Initiator and Responder have the IP addresses
      Iaddr and\n   Raddr.  NAT has public IP address NatPub.\n   Initiator:\n                     NAT-OAi
      = Iaddr\n                     NAT-OAr = Raddr\n   Responder:\n                     NAT-OAi
      = NATPub\n                     NAT-OAr = Raddr\n   Example 2:\n         Initiator
      <------> NAT1 <---------> NAT2 <-------> Responder\n                  ^             ^
      \          ^              ^\n                Iaddr        Nat1Pub     Nat2Pub
      \        Raddr\n   Here, NAT2 \"publishes\" Nat2Pub for Responder and forwards
      all traffic\n   to that address to Responder.\n   Initiator:\n                     NAT-OAi
      = Iaddr\n                     NAT-OAr = Nat2Pub\n   Responder:\n                     NAT-OAi
      = Nat1Pub\n                     NAT-OAr = Raddr\n   In the case of transport
      mode, both ends MUST send both original\n   Initiator and Responder addresses
      to the other end.  For tunnel mode,\n   both ends SHOULD NOT send original addresses
      to the other end.\n   The NAT-OA payloads are sent inside the first and second
      packets of\n   Quick Mode.  The initiator MUST send the payloads if it proposes
      any\n   UDP-Encapsulated-Transport mode, and the responder MUST send the\n   payload
      only if it selected UDP-Encapsulated-Transport mode.  It is\n   possible that
      the initiator sends the NAT-OA payload but proposes\n   both UDP-Encapsulated
      transport and tunnel mode.  Then the responder\n   selects the UDP-Encapsulated
      tunnel mode and does not send the NAT-OA\n   payload back.\n   The format of
      the NAT-OA packet is\n         1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7
      8 1 2 3 4 5 6 7 8\n       +---------------+---------------+---------------+---------------+\n
      \      | Next Payload  | RESERVED      | Payload length                |\n       +---------------+---------------+---------------+---------------+\n
      \      | ID Type       | RESERVED      | RESERVED                      |\n       +---------------+---------------+---------------+---------------+\n
      \      |           IPv4 (4 octets) or IPv6 address (16 octets)         |\n       +---------------+---------------+---------------+---------------+\n
      \  The payload type for the NAT original address payload is 21.\n   The ID type
      is defined in the [RFC2407].  Only ID_IPV4_ADDR and\n   ID_IPV6_ADDR types are
      allowed.  The two reserved fields after the ID\n   Type must be zero.\n   The
      following example is of Quick Mode using NAT-OA payloads:\n   Initiator                           Responder\n
      \  ------------                        ------------\n   HDR*, HASH(1), SA, Ni,
      [, KE]\n       [, IDci, IDcr ]\n       [, NAT-OAi, NAT-OAr] -->\n                                       <--
      HDR*, HASH(2), SA, Nr, [, KE]\n                                                 [,
      IDci, IDcr ]\n                                                 [, NAT-OAi, NAT-OAr]\n
      \  HDR*, HASH(3) -->\n"
    title: 5.2.  Sending the Original Source and Destination Addresses
  title: 5.  Quick Mode
- contents:
  - "6.  Initial Contact Notifications\n   The source IP and port address of the INITIAL-CONTACT
    notification\n   for the host behind NAT are not meaningful (as NAT can change
    them),\n   so the IP and port numbers MUST NOT be used to determine which\n   IKE/IPsec
    SAs to remove (see [RFC3715], section 2.1, case c).  The ID\n   payload sent from
    the other end SHOULD be used instead; i.e., when an\n   INITIAL-CONTACT notification
    is received from the other end, the\n   receiving end SHOULD remove all the SAs
    associated with the same ID\n   payload.\n"
  title: 6.  Initial Contact Notifications
- contents:
  - "7.  Recovering from the Expiring NAT Mappings\n   There are cases where NAT box
    decides to remove mappings that are\n   still alive (for example, when the keepalive
    interval is too long, or\n   when the NAT box is rebooted).  To recover from this,
    ends that are\n   NOT behind NAT SHOULD use the last valid UDP encapsulated IKE
    or\n   IPsec packet from the other end to determine which IP and port\n   addresses
    should be used.  The host behind dynamic NAT MUST NOT do\n   this, as otherwise
    it opens a DoS attack possibility because the IP\n   address or port of the other
    host will not change (it is not behind\n   NAT).\n   Keepalives cannot be used
    for these purposes, as they are not\n   authenticated, but any IKE authenticated
    IKE packet or ESP packet can\n   be used to detect whether the IP address or the
    port has changed.\n"
  title: 7.  Recovering from the Expiring NAT Mappings
- contents:
  - "8.  Security Considerations\n   Whenever changes to some fundamental parts of
    a security protocol are\n   proposed, the examination of security implications
    cannot be skipped.\n   Therefore, here are some observations about the effects,
    and about\n   whether or not these effects matter.\n   o  IKE probes reveal NAT-Traversal
    support to anyone watching the\n      traffic.  Disclosing that NAT-Traversal
    is supported does not\n      introduce new vulnerabilities.\n   o  The value of
    authentication mechanisms based on IP addresses\n      disappears once NATs are
    in the picture.  That is not necessarily\n      a bad thing (for any real security,
    authentication measures other\n      than IP addresses should be used).  This
    means that authentication\n      with pre-shared keys cannot be used in Main Mode
    without using\n      group-shared keys for everybody behind the NAT box.  Using
    group\n      shared keys is a huge risk because it allows anyone in the group\n
    \     to authenticate to any other party and claim to be anybody in the\n      group;
    e.g., a normal user could impersonate a vpn-gateway and act\n      as a man in
    the middle, and read/modify all traffic to/from others\n      in the group.  Use
    of group-shared keys is NOT RECOMMENDED.\n   o  As the internal address space
    is only 32 bits and is usually very\n      sparse, it might be possible for the
    attacker to find out the\n      internal address used behind the NAT box by trying
    all possible\n      IP-addresses to find the matching hash.  The port numbers
    are\n      normally fixed to 500, and the cookies can be extracted from the\n
    \     packet.  This limits the hash calculations to 2^32.  If an\n      educated
    guess of the private address space is made, then the\n      number of hash calculations
    needed to find out the internal IP\n      address goes down to 2^24 + 2 * (2^16).\n
    \  o  Neither NAT-D payloads nor Vendor ID payloads are authenticated in\n      Main
    Mode nor in Aggressive Mode.  This means that attacker can\n      remove those
    payloads, modify them, or add them.  By removing or\n      adding them, the attacker
    can cause Denial of Service attacks.  By\n      modifying the NAT-D packets, the
    attacker can cause both ends to\n      use UDP-Encapsulated modes instead of directly
    using tunnel or\n      transport mode, thus wasting some bandwidth.\n   o  Sending
    the original source address in the Quick Mode reveals the\n      internal IP address
    behind the NAT to the other end.  In this case\n      we have already authenticated
    the other end, and sending the\n      original source address is only needed in
    transport mode.\n   o  Updating the IKE SA/ESP UDP encapsulation IP addresses
    and ports\n      for each valid authenticated packet can cause DoS if an attacker\n
    \     can listen to all traffic in the network, change the order of the\n      packets,
    and inject new packets before the packet he has already\n      seen.  In other
    words, the attacker can take an authenticated\n      packet from the host behind
    NAT, change the packet UDP source or\n      destination ports or IP addresses
    and send it out to the other end\n      before the real packet reaches it.  The
    host not behind the NAT\n      will update its IP address and port mapping and
    send further\n      traffic to the wrong host or port.  This situation is fixed\n
    \     immediately when the attacker stops modifying the packets, as the\n      first
    real packet will fix the situation.  Implementations SHOULD\n      AUDIT the event
    every time the mapping is changed, as it should\n      not happen that often.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  IANA Considerations\n   This document contains two new \"magic numbers\"
    allocated from the\n   existing IANA registry for IPsec and renames existing registered
    port\n   4500.  This document also defines 2 new payload types for IKE.\n   The
    following are new items that have been added in the \"Internet\n   Security Association
    and Key Management Protocol (ISAKMP)\n   Identifiers\" Encapsulation Mode registry:\n
    \        Name                         Value Reference\n         ----                         -----
    ---------\n         UDP-Encapsulated-Tunnel       3    [RFC3947]\n         UDP-Encapsulated-Transport
    \   4    [RFC3947]\n   Change in the registered port registry:\n         Keyword
    \      Decimal    Description          Reference\n         -------       -------
    \   -----------          ---------\n         ipsec-nat-t   4500/tcp   IPsec NAT-Traversal
    \ [RFC3947]\n         ipsec-nat-t   4500/udp   IPsec NAT-Traversal  [RFC3947]\n
    \  New IKE payload numbers need to be added to the Next Payload Types\n   registry:\n
    \        NAT-D         20         NAT Discovery Payload\n         NAT-OA        21
    \        NAT Original Address Payload\n"
  title: 9.  IANA Considerations
- contents:
  - "10.  IAB Considerations\n   The UNSAF [RFC3424] questions are addressed by the
    IPsec-NAT\n   compatibility requirements document [RFC3715].\n"
  title: 10.  IAB Considerations
- contents:
  - "11.  Acknowledgments\n   Thanks to Markus Stenberg, Larry DiBurro, and William
    Dixon, who\n   contributed actively to this document.\n   Thanks to Tatu Ylonen,
    Santeri Paavolainen, and Joern Sierwald, who\n   contributed to the document used
    as the base for this document.\n"
  title: 11.  Acknowledgments
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [RFC2409] Harkins, D. and D. Carrel, \"The
      Internet Key Exchange\n             (IKE)\", RFC 2409, November 1998.\n   [RFC2407]
      Piper, D., \"The Internet IP Security Domain of\n             Interpretation
      for ISAKMP\", RFC 2407, November 1998.\n   [RFC3948] Huttunen, A., Swander,
      B., Volpe, V., DiBurro, L., and M.\n             Stenberg, \"UDP Encapsulation
      of IPsec Packets\", RFC 3948,\n             January 2005.\n   [RFC2119] Bradner,
      S., \"Key words for use in RFCs to Indicate\n             Requirement Levels\",
      BCP 14, RFC 2119, March 1997.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [RFC3715] Aboba, B. and W. Dixon, \"IPsec-Network
      Address Translation\n             (NAT) Compatibility Requirements\", RFC 3715,
      March 2004.\n   [RFC3424] Daigle, L. and IAB, \"IAB Considerations for UNilateral\n
      \            Self-Address Fixing (UNSAF) Across Network Address\n             Translation\",
      RFC 3424, November 2002.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Authors' Addresses\n   Tero Kivinen\n   SafeNet, Inc.\n   Fredrikinkatu 47\n
    \  FIN-00100 HELSINKI\n   Finland\n   EMail: kivinen@safenet-inc.com\n   Ari Huttunen\n
    \  F-Secure Corporation\n   Tammasaarenkatu 7,\n   FIN-00181 HELSINKI\n   Finland\n
    \  EMail: Ari.Huttunen@F-Secure.com\n   Brian Swander\n   Microsoft\n   One Microsoft
    Way\n   Redmond, WA 98052\n   USA\n   EMail: briansw@microsoft.com\n   Victor
    Volpe\n   Cisco Systems\n   124 Grove Street\n   Suite 205\n   Franklin, MA 02038\n
    \  USA\n   EMail: vvolpe@cisco.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the IETF's procedures with respect
    to rights in IETF Documents can\n   be found in BCP 78 and BCP 79.\n   Copies
    of IPR disclosures made to the IETF Secretariat and any\n   assurances of licenses
    to be made available, or the result of an\n   attempt made to obtain a general
    license or permission for the use of\n   such proprietary rights by implementers
    or users of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
