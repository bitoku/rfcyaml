- title: __initial_text__
  contents:
  - '   Mobile IP Version 6 Route Optimization Security Design Background

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is an account of the rationale behind the Mobile IPv6\n\
    \   (MIPv6) Route Optimization security design.  The purpose of this\n   document\
    \ is to present the thinking and to preserve the reasoning\n   behind the Mobile\
    \ IPv6 security design in 2001 - 2002.\n   The document has two target audiences:\
    \ (1) helping MIPv6 implementors\n   to better understand the design choices in\
    \ MIPv6 security procedures,\n   and (2) allowing people dealing with mobility\
    \ or multi-homing to\n   avoid a number of potential security pitfalls in their\
    \ designs.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Assumptions about the Existing IP Infrastructure ...........4\n  \
    \    1.2. The Mobility Problem and the Mobile IPv6 Solution ..........6\n    \
    \  1.3. Design Principles and Goals ................................8\n      \
    \   1.3.1. End-to-End Principle ..................................8\n        \
    \ 1.3.2. Trust Assumptions .....................................8\n         1.3.3.\
    \ Protection Level ......................................8\n      1.4. About Mobile\
    \ IPv6 Mobility and its Variations ..............9\n   2. Avenues of Attack ...............................................9\n\
    \      2.1. Target ....................................................10\n  \
    \    2.2. Timing ....................................................10\n    \
    \  2.3. Location ..................................................11\n   3. Threats\
    \ and Limitations ........................................11\n      3.1. Attacks\
    \ Against Address 'Owners' (\"Address Stealing\").. ...12\n         3.1.1. Basic\
    \ Address Stealing ...............................12\n         3.1.2. Stealing\
    \ Addresses of Stationary Nodes ...............13\n         3.1.3. Future Address\
    \ Sealing ...............................14\n         3.1.4. Attacks against Secrecy\
    \ and Integrity ................15\n         3.1.5. Basic Denial-of-Service Attacks\
    \ ......................16\n         3.1.6. Replaying and Blocking Binding Updates\
    \ ...............16\n      3.2. Attacks Against Other Nodes and Networks (Flooding)\
    \ .......16\n         3.2.1. Basic Flooding .......................................17\n\
    \         3.2.2. Return-to-Home Flooding ..............................18\n  \
    \    3.3. Attacks against Binding Update Protocols ..................18\n    \
    \     3.3.1. Inducing Unnecessary Binding Updates .................19\n      \
    \   3.3.2. Forcing Non-Optimized Routing ........................20\n        \
    \ 3.3.3. Reflection and Amplification .........................21\n      3.4.\
    \ Classification of Attacks .................................22\n      3.5. Problems\
    \ with Infrastructure-Based Authorization ..........23\n   4. Solution Selected\
    \ for Mobile IPv6 ..............................24\n      4.1. Return Routability\
    \ ........................................24\n         4.1.1. Home Address Check\
    \ ...................................26\n         4.1.2. Care-of-Address Check\
    \ ................................27\n         4.1.3. Forming the First Binding\
    \ Update .....................27\n      4.2. Creating State Safely .....................................28\n\
    \         4.2.1. Retransmissions and State Machine ....................29\n  \
    \    4.3. Quick expiration of the Binding Cache Entries .............29\n   5.\
    \ Security Considerations ........................................30\n      5.1.\
    \ Residual Threats as Compared to IPv4 ......................31\n      5.2. Interaction\
    \ with IPsec ....................................31\n      5.3. Pretending to\
    \ Be One's Neighbor ...........................32\n      5.4. Two Mobile Nodes\
    \ Talking to Each Other ....................33\n   6. Conclusions ....................................................33\n\
    \   7. Acknowledgements ...............................................34\n  \
    \ 8. Informative References .........................................34\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Mobile IPv4 is based on the idea of supporting mobility\
    \ on top of\n   existing IP infrastructure, without requiring any modifications\
    \ to\n   the routers, the applications, or the stationary end hosts.  However,\n\
    \   in Mobile IPv6 [6] (as opposed to Mobile IPv4), the stationary end\n   hosts\
    \ may provide support for mobility, i.e., route optimization.  In\n   route optimization,\
    \ a correspondent node (CN) (i.e., a peer for a\n   mobile node) learns a binding\
    \ between the mobile node's stationary\n   home address and its current temporary\
    \ care-of address.  This binding\n   is then used to modify the handling of outgoing\
    \ (as well as the\n   processing of incoming) packets, leading to security risks.\
    \  The\n   purpose of this document is to provide a relatively compact source\n\
    \   for the background assumptions, design choices, and other information\n  \
    \ needed to understand the route optimization security design.  This\n   document\
    \ does not seek to compare the relative security of Mobile\n   IPv6 and other\
    \ mobility protocols, or to list all the alternative\n   security mechanisms that\
    \ were discussed during the Mobile IPv6 design\n   process.  For a summary of\
    \ the latter, we refer the reader to [1].\n   Even though incidental implementation\
    \ suggestions are included for\n   illustrative purposes, the goal of this document\
    \ is not to provide a\n   guide to implementors.  Instead, it is to explain the\
    \ design choices\n   and rationale behind the current route optimization design.\
    \  The\n   authors participated in the design team that produced the design and\n\
    \   hope, via this note, to capture some of the lessons and reasoning\n   behind\
    \ that effort.\n   The authors' intent is to document the thinking behind that\
    \ design\n   effort as it was.  Even though this note may incorporate more recent\n\
    \   developments in order to illustrate the issues, it is not our intent\n   to\
    \ present a new design.  Rather, along with the lessons learned,\n   there is\
    \ some effort to clarify differing opinions, questionable\n   assumptions, or\
    \ newly discovered vulnerabilities, should such new\n   information be available\
    \ today.  This is also very important, because\n   it may benefit the working\
    \ group's hindsight as it revises or\n   improves the Mobile IPv6 specification.\n\
    \   To fully understand the security implications of the relevant design\n   constraints,\
    \ it is necessary to explore briefly the nature of the\n   existing IP infrastructure,\
    \ the problems Mobile IP aims to solve, and\n   the design principles applied.\
    \  In the light of this background, we\n   can then explore IP-based mobility\
    \ in more detail and have a brief\n   look at the security problems.  The background\
    \ is given in the rest\n   of this section, starting from Section 1.1.\n   Although\
    \ the introduction in Section 1.1 may appear redundant to\n   readers who are\
    \ already familiar with Mobile IPv6, it may be valuable\n   to read it anyway.\
    \  The approach taken in this document is very\n   different from that in the\
    \ Mobile IPv6 specification.  That is, we\n   have explicitly aimed to expose\
    \ the implicit assumptions and design\n   choices made in the base Mobile IPv6\
    \ design, while the Mobile IPv6\n   specification aims to state the result of\
    \ the design.  By\n   understanding the background, it is much easier to understand\
    \ the\n   source of some of the related security problems, and to understand\n\
    \   the limitations intrinsic to the provided solutions.\n   In particular, this\
    \ document explains how the adopted design for\n   \"Return Routability\" (RR)\
    \ protects against the identified threats\n   (Section 3).  This is true except\
    \ for attacks on the RR protocol\n   itself, which require other countermeasures\
    \ based on heuristics and\n   judicious implementation (Section 3.3).\n   The\
    \ rest of this document is organized as follows: after this\n   introductory section,\
    \ we start by considering the avenues of attack\n   in Section 2.  The security\
    \ problems and countermeasures are studied\n   in detail in Section 3.  Section\
    \ 4 explains the overall operation and\n   design choices behind the current security\
    \ design.  Section 5\n   analyzes the design and discuss the remaining threats.\
    \  Finally,\n   Section 6 concludes this document.\n"
- title: 1.1.  Assumptions about the Existing IP Infrastructure
  contents:
  - "1.1.  Assumptions about the Existing IP Infrastructure\n   One of the design\
    \ goals in the Mobile IP design was to make mobility\n   possible without changing\
    \ too much.  This was especially important\n   for IPv4, with its large installed\
    \ base, but the same design goals\n   were inherited by Mobile IPv6.  Some alternative\
    \ proposals take a\n   different approach and propose larger modifications to\
    \ the Internet\n   architecture (see Section 1.4).\n   To understand Mobile IPv6,\
    \ it is important to understand the MIPv6\n   design view of the base IPv6 protocol\
    \ and infrastructure.  The most\n   important base assumptions can be expressed\
    \ as follows:\n   1.  The routing prefixes available to a node are determined\
    \ by its\n       current location, and therefore the node must change its IP\n\
    \       address as it moves.\n   2.  The routing infrastructure is assumed to\
    \ be secure and well\n       functioning, delivering packets to their intended\
    \ destinations as\n       identified by destination address.\n   Although these\
    \ assumptions may appear to be trivial, let us explore\n   them a little further.\
    \  First, in current IPv6 operational practice\n   the IP address prefixes are\
    \ distributed in a hierarchical manner.\n   This limits the number of routing\
    \ table entries each individual\n   router needs to handle.  An important implication\
    \ is that the\n   topology determines what globally routable IP addresses are\
    \ available\n   at a given location.  That is, the nodes cannot freely decide\
    \ what\n   globally routable IP address to use; they must rely on the routing\n\
    \   prefixes served by the local routers via Router Advertisements or by\n   a\
    \ DHCP server.  In other words, IP addresses are just what the name\n   says,\
    \ addresses (i.e., locators).\n   Second, in the current Internet structure, the\
    \ routers collectively\n   maintain a distributed database of the network topology\
    \ and forward\n   each packet towards the location determined by the destination\n\
    \   address carried in the packet.  To maintain the topology information,\n  \
    \ the routers must trust each other, at least to a certain extent.  The\n   routers\
    \ learn the topology information from the other routers, and\n   they have no\
    \ option but to trust their neighbor routers about distant\n   topology.  At the\
    \ borders of administrative domains, policy rules are\n   used to limit the amount\
    \ of perhaps faulty routing table information\n   received from the peer domains.\
    \  While this is mostly used to weed\n   out administrative mistakes, it also\
    \ helps with security.  The aim is\n   to maintain a reasonably accurate idea\
    \ of the network topology even\n   if someone is feeding faulty information to\
    \ the routing system.\n   In the current Mobile IPv6 design, it is explicitly\
    \ assumed that the\n   routers and the policy rules are configured in a reasonable\
    \ way, and\n   that the resulting routing infrastructure is trustworthy enough.\n\
    \   That is, it is assumed that the routing system maintains accurate\n   information\
    \ of the network topology, and that it is therefore able to\n   route packets\
    \ to their destination locations.  If this assumption is\n   broken, the Internet\
    \ itself is broken in the sense that packets go to\n   wrong locations.  Such\
    \ a fundamental malfunction of the Internet\n   would render hopeless any other\
    \ effort to assure correct packet\n   delivery (e.g., any efforts due to Mobile\
    \ IP security\n   considerations).\n"
- title: 1.1.1.  A Note on Source Addresses and Ingress Filtering
  contents:
  - "1.1.1.  A Note on Source Addresses and Ingress Filtering\n   Some of the threats\
    \ and attacks discussed in this document take\n   advantage of the ease of source\
    \ address spoofing.  That is, in the\n   current Internet it is possible to send\
    \ packets with a false source\n   IP address.  The eventual introduction of ingress\
    \ filtering is\n   assumed to prevent this.  When ingress filtering is used, traffic\n\
    \   with spoofed addresses is not forwarded.  This filtering can be\n   applied\
    \ at different network borders, such as those between an\n   Internet service\
    \ provider (ISP) and its customers, between downstream\n   and upstream ISPs,\
    \ or between peer ISPs [5].  Obviously, the\n   granularity of ingress filters\
    \ specifies how much you can \"spoof\n   inside a prefix\".  For example, if an\
    \ ISP ingress filters a\n   customer's link but the customer does nothing, anything\
    \ inside the\n   customer's /48 prefix could be spoofed.  If the customer does\n\
    \   filtering at LAN subnets, anything inside the /64 prefixes could be\n   spoofed.\
    \  Despite the limitations imposed by such \"in-prefix\n   spoofing\", in general,\
    \ ingress filtering enables traffic to be\n   traceable to its real source network\
    \ [5].\n   However, ingress filtering helps if and only if a large part of the\n\
    \   Internet uses it.  Unfortunately, there are still some issues (e.g.,\n   in\
    \ the presence of site multi-homing) that, although not\n   insurmountable, do\
    \ require careful handling, and that are likely to\n   limit or delay its usefulness\
    \ [5].\n"
- title: 1.2.  The Mobility Problem and the Mobile IPv6 Solution
  contents:
  - "1.2.  The Mobility Problem and the Mobile IPv6 Solution\n   The Mobile IP design\
    \ aims to solve two problems at the same time.\n   First, it allows transport\
    \ layer sessions (TCP connections, UDP-\n   based transactions) to continue even\
    \ if the underlying host(s) move\n   and change their IP addresses.  Second, it\
    \ allows a node to be\n   reached through a static IP address, a home address\
    \ (HoA).\n   The latter design choice can also be stated in other words: Mobile\n\
    \   IPv6 aims to preserve the identifier nature of IP addresses.  That\n   is,\
    \ Mobile IPv6 takes the view that IP addresses can be used as\n   natural identifiers\
    \ of nodes, as they have been used since the\n   beginning of the Internet.  This\
    \ must be contrasted to proposed and\n   existing alternative designs where the\
    \ identifier and locator natures\n   of the IP addresses have been separated (see\
    \ Section 1.4).\n   The basic idea in Mobile IP is to allow a home agent (HA)\
    \ to work as\n   a stationary proxy for a mobile node (MN).  Whenever the mobile\
    \ node\n   is away from its home network, the home agent intercepts packets\n\
    \   destined to the node and forwards the packets by tunneling them to\n   the\
    \ node's current address, the care-of address (CoA).  The transport\n   layer\
    \ (e.g., TCP, UDP) uses the home address as a stationary\n   identifier for the\
    \ mobile node.  Figure 1 illustrates this basic\n   arrangement.\n   The basic\
    \ solution requires tunneling through the home agent, thereby\n   leading to longer\
    \ paths and degraded performance.  This tunneling is\n   sometimes called triangular\
    \ routing since it was originally planned\n   that the packets from the mobile\
    \ node to its peer could still\n   traverse directly, bypassing the home agent.\n\
    \    +----+                                       +----+\n    | MN |=#=#=#=#=#=#=#=#=tunnel=#=#=#=#=#=#=#=#|#HA\
    \ |\n    +----+         ____________                  +-#--+\n      | CoA    ___/\
    \            \\_____              # Home Link\n     -+-------/      Internet \
    \   * * *-*-*-*-#-#-#-#-----\n             |               * *      |    * Home\
    \ Address\n              \\___       * *    _____/   + * -+\n                \
    \  \\_____*______/         | MN |\n                        *                +\
    \ - -+\n                      +----+\n                      | CN |    Data path\
    \ as     * * * *\n                      +----+    it appears to correspondent\
    \ node\n                                Real data path   # # # #\n           \
    \  Figure 1.  Basic Mode of Operation in Mobile IPv6\n   To alleviate the performance\
    \ penalty, Mobile IPv6 includes a mode of\n   operation that allows the mobile\
    \ node and its peer, a correspondent\n   node (CN), to exchange packets directly,\
    \ bypassing the home agent\n   completely after the initial setup phase.  This\
    \ mode of operation is\n   called route optimization (RO).  When route optimization\
    \ is used, the\n   mobile node sends its current care-of address to the correspondent\n\
    \   node, using binding update (BU) messages.  The correspondent node\n   stores\
    \ the binding between the home address and care-of address into\n   its Binding\
    \ Cache.\n   Whenever MIPv6 route optimization is used, the correspondent node\n\
    \   effectively functions in two roles.  Firstly, it is the source of the\n  \
    \ packets it sends, as usual.  Secondly, it acts as the first router\n   for the\
    \ packets, effectively performing source routing.  That is,\n   when the correspondent\
    \ node is sending out packets, it consults its\n   MIPv6 route optimization data\
    \ structures and reroutes the packets, if\n   necessary.  A Binding Cache Entry\
    \ (BCE) contains the home address and\n   the care-of address of the mobile node,\
    \ and records the fact that\n   packets destined to the home address should now\
    \ be sent to the\n   destination address.  Thus, it represents a local routing\
    \ exception.\n   The packets leaving the correspondent node are source routed\
    \ to the\n   care-of address.  Each packet includes a routing header that contains\n\
    \   the home address of the mobile node.  Thus, logically, the packet is\n   first\
    \ routed to the care-of address and then, virtually, from the\n   care-of address\
    \ to the home address.  In practice, of course, the\n   packet is consumed by\
    \ the mobile node at the care-of address; the\n   header just allows the mobile\
    \ node to select a socket associated with\n   the home address instead of one\
    \ with the care-of address.  However,\n   the mechanism resembles source routing,\
    \ as there is routing state\n   involved at the correspondent node, and a routing\
    \ header is used.\n   Nevertheless, this routing header is special (type 2) to\
    \ avoid the\n   risks associated with using the more general (type 0) variant.\n"
- title: 1.3.  Design Principles and Goals
  contents:
  - "1.3.  Design Principles and Goals\n   The MIPv6 design and security design aimed\
    \ to follow the end-to-end\n   principle, to notice the differences in trust relationships\
    \ between\n   the nodes, and to be explicit about delivering a practical (instead\n\
    \   of an over-ambitious) level of protection.\n"
- title: 1.3.1.  End-to-End Principle
  contents:
  - "1.3.1.  End-to-End Principle\n   Perhaps the leading design principle for Internet\
    \ protocols is the\n   so-called end-to-end principle [4][11].  According to this\
    \ principle,\n   it is beneficial to avoid polluting the network with state, and\
    \ to\n   limit new state creation to the involved end nodes.\n   In the case of\
    \ Mobile IPv6, the end-to-end principle is applied by\n   restricting mobility-related\
    \ state primarily to the home agent.\n   Additionally, if route optimization is\
    \ used, the correspondent nodes\n   also maintain a soft state relating to the\
    \ mobile nodes' current\n   care-of addresses, the Binding Cache.  This can be\
    \ contrasted to an\n   approach that would use individual host routes within the\
    \ basic\n   routing system.  Such an approach would create state on a huge number\n\
    \   of routers around the network.  In Mobile IPv6, only the home agent\n   and\
    \ the communicating nodes need to create state.\n"
- title: 1.3.2.  Trust Assumptions
  contents:
  - "1.3.2.  Trust Assumptions\n   In the Mobile IPv6 security design, different approaches\
    \ were chosen\n   for securing the communication between the mobile node and its\
    \ home\n   agent and between the mobile node and its correspondent nodes.  In\n\
    \   the home agent case, it was assumed that the mobile node and the home\n  \
    \ agent know each other through a prior arrangement, e.g., due to a\n   business\
    \ relationship.  In contrast, it was strictly assumed that the\n   mobile node\
    \ and the correspondent node do not need to have any prior\n   arrangement, thereby\
    \ allowing Mobile IPv6 to function in a scalable\n   manner, without requiring\
    \ any configuration at the correspondent\n   nodes.\n"
- title: 1.3.3.  Protection Level
  contents:
  - "1.3.3.  Protection Level\n   As a security goal, Mobile IPv6 design aimed to\
    \ be \"as secure as the\n   (non-mobile) IPv4 Internet\" was at the time of the\
    \ design, in the\n   period 2001 - 2002.  In particular, that means that there\
    \ is little\n   protection against attackers that are able to attach themselves\n\
    \   between a correspondent node and a home agent.  The rationale is\n   simple:\
    \ in the 2001 Internet, if a node was able to attach itself to\n   the communication\
    \ path between two arbitrary nodes, it was able to\n   disrupt, modify, and eavesdrop\
    \ all the traffic between the two nodes,\n   unless IPsec protection was used.\
    \  Even when IPsec was used, the\n   attacker was still able to block communication\
    \ selectively by simply\n   dropping the packets.  The attacker in control of\
    \ a router between\n   the two nodes could also mount a flooding attack by redirecting\
    \ the\n   data flows between the two nodes (or, more practically, an equivalent\n\
    \   flow of bogus data) to a third party.\n"
- title: 1.4.  About Mobile IPv6 Mobility and its Variations
  contents:
  - "1.4.  About Mobile IPv6 Mobility and its Variations\n   Taking a more abstract\
    \ angle, IPv6 mobility can be defined as a\n   mechanism for managing local exceptions\
    \ to routing information in\n   order to direct packets that are sent to one address\
    \ (the home\n   address) to another address (the care-of address).  It is managing\
    \ in\n   the sense that the local routing exceptions (source routes) are\n   created\
    \ and deleted dynamically, according to instructions sent by\n   the mobile node.\
    \  It is local in the sense that the routing\n   exceptions are valid only at\
    \ the home agent, and in the correspondent\n   nodes if route optimization is\
    \ used.  The created pieces of state are\n   exceptions in the sense that they\
    \ override the normal topological\n   routing information carried collectively\
    \ by the routers.\n   Using the terminology introduced by J. Noel Chiappa [14],\
    \ we can say\n   that the home address functions in the dual role of being an\
    \ end-\n   point identifier (EID) and a permanent locator.  The care-of address\n\
    \   is a pure, temporary locator, which identifies the current location\n   of\
    \ the mobile node.  The correspondent nodes effectively perform\n   source routing,\
    \ redirecting traffic destined to the home address to\n   the care-of address.\
    \  This is even reflected in the packet structure:\n   the packets carry an explicit\
    \ routing header.\n   The relationship between EIDs and permanent locators has\
    \ been\n   exploited by other proposals.  Their technical merits and security\n\
    \   problems, however, are beyond the scope of this document.\n"
- title: 2.  Avenues of Attack
  contents:
  - "2.  Avenues of Attack\n   From the discussion above, it should now be clear that\
    \ the dangers\n   that Mobile IPv6 must protect from lie in creation (or deletion)\
    \ of\n   the local routing exceptions.  In Mobile IPv6 terms, the danger is in\n\
    \   the possibility of unauthorized creation of Binding Cache Entries\n   (BCE).\
    \  The effects of an attack differ depending on the target of\n   the attack,\
    \ the timing of the attack, and the location of the\n   attacker.\n"
- title: 2.1.  Target
  contents:
  - "2.1.  Target\n   Basically, the target of an attack can be any node or network\
    \ in the\n   Internet (stationary or mobile).  The basic differences lie in the\n\
    \   goals of the attack: does the attacker aim to divert (steal) the\n   traffic\
    \ destined to and/or sourced at the target node, or does it aim\n   to cause denial-of-service\
    \ to the target node or network?  The target\n   does not typically play much\
    \ of an active role attack.  As an\n   example, an attacker may launch a denial-of-service\
    \ attack on a given\n   node, A, by contacting a large number of nodes, claiming\
    \ to be A, and\n   subsequently diverting the traffic at these other nodes so\
    \ that A is\n   no longer able to receive packets from those nodes.  A itself\
    \ need\n   not be involved at all before its communications start to break.\n\
    \   Furthermore, A is not necessarily a mobile node; it may well be\n   stationary.\n\
    \   Mobile IPv6 uses the same class of IP addresses for both mobile nodes\n  \
    \ (i.e., home and care-of addresses) and stationary nodes.  That is,\n   mobile\
    \ and stationary addresses are indistinguishable from each\n   other.  Attackers\
    \ can take advantage of this by taking any IP address\n   and using it in a context\
    \ where, normally, only mobile (home or\n   care-of) addresses appear.  This means\
    \ that attacks that otherwise\n   would only concern mobile nodes are, in fact,\
    \ a threat to all IPv6\n   nodes.\n   In fact, a mobile node appears to be best\
    \ protected, since a mobile\n   node does not need to maintain state about the\
    \ whereabouts of some\n   remote nodes.  Conversely, the role of being a correspondent\
    \ node\n   appears to be the weakest, since there are very few assumptions upon\n\
    \   which it can base its state formation.  That is, an attacker has a\n   much\
    \ easier task in fooling a correspondent node to believe that a\n   presumably\
    \ mobile node is somewhere it is not, than in fooling a\n   mobile node itself\
    \ into believing something similar.  On the other\n   hand, since it is possible\
    \ to attack a node indirectly by first\n   targeting its peers, all nodes are\
    \ equally vulnerable in some sense.\n   Furthermore, a (usually) mobile node often\
    \ also plays the role of\n   being a correspondent node, since it can exchange\
    \ packets with other\n   mobile nodes (see also Section 5.4).\n"
- title: 2.2.  Timing
  contents:
  - "2.2.  Timing\n   An important aspect in understanding Mobile IPv6-related dangers\
    \ is\n   timing.  In a stationary IPv4 network, an attacker must be between\n\
    \   the communication nodes at the same time as the nodes communicate.\n   With\
    \ the Mobile IPv6 ability of creating binding cache entries, the\n   situation\
    \ changes.  A new danger is created.  Without proper\n   protection, an attacker\
    \ could attach itself between the home agent\n   and a correspondent node for\
    \ a while, create a BCE at the\n   correspondent node, leave the position, and\
    \ continuously update the\n   correspondent node about the mobile node's whereabouts.\
    \  This would\n   make the correspondent node send packets destined to the mobile\
    \ node\n   to an incorrect address as long as the BCE remained valid, i.e.,\n\
    \   typically until the correspondent node is rebooted.  The converse\n   would\
    \ also be possible: an attacker could also launch an attack by\n   first creating\
    \ a BCE and then letting it expire at a carefully\n   selected time.  If a large\
    \ number of active BCEs carrying large\n   amounts of traffic expired at the same\
    \ time, the result might be an\n   overload towards the home agent or the home\
    \ network.  (See Section\n   3.2.2 for a more detailed explanation.)\n"
- title: 2.3.  Location
  contents:
  - "2.3.  Location\n   In a static IPv4 Internet, an attacker can only receive packets\n\
    \   destined to a given address if it is able to attach itself to, or to\n   control,\
    \ a node on the topological path between the sender and the\n   recipient.  On\
    \ the other hand, an attacker can easily send spoofed\n   packets from almost\
    \ anywhere.  If Mobile IPv6 allowed sending\n   unprotected Binding Updates, an\
    \ attacker could create a BCE on any\n   correspondent node from anywhere in the\
    \ Internet, simply by sending a\n   fraudulent Binding Update to the correspondent\
    \ node.  Instead of\n   being required to be between the two target nodes, the\
    \ attacker could\n   act from anywhere in the Internet.\n   In summary, by introducing\
    \ the new routing exception (binding cache)\n   at the correspondent nodes, Mobile\
    \ IPv6 introduces the dangers of\n   time and space shifting.  Without proper\
    \ protection, Mobile IPv6\n   would allow an attacker to act from anywhere in\
    \ the Internet and well\n   before the time of the actual attack.  In contrast,\
    \ in the static\n   IPv4 Internet, the attacking nodes must be present at the\
    \ time of the\n   attack and they must be positioned in a suitable way, or the\
    \ attack\n   would not be possible in the first place.\n"
- title: 3.  Threats and Limitations
  contents:
  - "3.  Threats and Limitations\n   This section describes attacks against Mobile\
    \ IPv6 Route Optimization\n   and what protection mechanisms Mobile IPv6 applies\
    \ against them.  The\n   goal of the attacker can be to corrupt the correspondent\
    \ node's\n   binding cache and to cause packets to be delivered to a wrong\n \
    \  address.  This can compromise secrecy and integrity of communication\n   and\
    \ cause denial-of-service (DoS) both at the communicating parties\n   and at the\
    \ address that receives the unwanted packets.  The attacker\n   may also exploit\
    \ features of the Binding Update (BU) mechanism to\n   exhaust the resources of\
    \ the mobile node, the home agent, or the\n   correspondent nodes.  The aim of\
    \ this section is to provide an\n   overview of the various protocol mechanisms\
    \ and their limitations.\n   The details of the mechanisms are covered in Section\
    \ 4.\n   It is essential to understand that some of the threats are more\n   serious\
    \ than others, that some can be mitigated but not removed, that\n   some threats\
    \ may represent acceptable risk, and that some threats may\n   be considered too\
    \ expensive to the attacker to be worth preventing.\n   We consider only active\
    \ attackers.  The rationale behind this is that\n   in order to corrupt the binding\
    \ cache, the attacker must sooner or\n   later send one or more messages.  Thus,\
    \ it makes little sense to\n   consider attackers that only observe messages but\
    \ do not send any.\n   In fact, some active attacks are easier, for the average\
    \ attacker, to\n   launch than a passive one would be.  That is, in many active\
    \ attacks\n   the attacker can initiate binding update processing at any time,\n\
    \   while most passive attacks require the attacker to wait for suitable\n   messages\
    \ to be sent by the target nodes.\n   Nevertheless, an important class of passive\
    \ attacks remains:  attacks\n   on privacy.  It is well known that simply by examining\
    \ packets,\n   eavesdroppers can track the movements of individual nodes (and\n\
    \   potentially, users) [3].  Mobile IPv6 exacerbates the problem by\n   adding\
    \ more potentially sensitive information into the packets (e.g.,\n   Binding Updates,\
    \ routing headers or home address options).  This\n   document does not address\
    \ these attacks.\n   We first consider attacks against nodes that are supposed\
    \ to have a\n   specified address (Section 3.1), continuing with flooding attacks\n\
    \   (Section 3.2) and attacks against the basic Binding Update protocol\n   (Section\
    \ 3.3).  After that, we present a classification of the\n   attacks (Section 3.4).\
    \  Finally, we consider the applicability of\n   solutions relying on some kind\
    \ of a global security infrastructure\n   (Section 3.5).\n"
- title: 3.1.  Attacks Against Address 'Owners' ("Address Stealing")
  contents:
  - "3.1.  Attacks Against Address 'Owners' (\"Address Stealing\")\n   The most obvious\
    \ danger in Mobile IPv6 is address \"stealing\", when an\n   attacker illegitimately\
    \ claims to be a given node at a given address\n   and tries to \"steal\" traffic\
    \ destined to that address.  We first\n   describe the basic variant of this attack,\
    \ follow with a description\n   of how the situation is affected if the target\
    \ is a stationary node,\n   and continue with more complicated issues related\
    \ to timing (so\n   called \"future\" attacks), confidentiality and integrity,\
    \ and DoS\n   aspects.\n"
- title: 3.1.1.  Basic Address Stealing
  contents:
  - "3.1.1.  Basic Address Stealing\n   If Binding Updates were not authenticated\
    \ at all, an attacker could\n   fabricate and send spoofed binding updates from\
    \ anywhere in the\n   Internet.  All nodes that support the correspondent node\n\
    \   functionality would become unwitting accomplices to this attack.  As\n   explained\
    \ in Section 2.1, there is no way of telling which addresses\n   belong to mobile\
    \ nodes that really could send binding updates and\n   which addresses belong\
    \ to stationary nodes (see below), so\n   potentially any node (including \"static\"\
    \ nodes) is vulnerable.\n        +---+  original       +---+ new packet   +---+\n\
    \        | B |<----------------| A |- - - - - - ->| C |\n        +---+  packet\
    \ flow    +---+ flow         +---+\n                                ^\n      \
    \                          |\n                                | False BU: B ->\
    \ C\n                                |\n                            +----------+\n\
    \                            | Attacker |\n                            +----------+\n\
    \                       Figure 2.  Basic Address Stealing\n   Consider an IP node,\
    \ A, sending IP packets to another IP node, B.\n   The attacker could redirect\
    \ the packets to an arbitrary address, C,\n   by sending a Binding Update to A.\
    \  The home address (HoA) in the\n   binding update would be B and the care-of\
    \ address (CoA) would be C.\n   After receiving this binding update, A would send\
    \ all packets\n   intended for the node B to the address C.  See Figure 2.\n \
    \  The attacker might select the care-of address to be either its own\n   current\
    \ address, another address in its local network, or any other\n   IP address.\
    \  If the attacker selected a local care-of address\n   allowing it to receive\
    \ the packets, it would be able to send replies\n   to the correspondent node.\
    \  Ingress filtering at the attacker's\n   local+ network does not prevent the\
    \ spoofing of Binding Updates but\n   forces the attacker either to choose a care-of\
    \ address from inside\n   its own network or to use the Alternate care-of address\
    \ sub-option.\n   The binding update authorization mechanism used in the MIPv6\
    \ security\n   design is primarily intended to mitigate this threat, and to limit\n\
    \   the location of attackers to the path between a correspondent node\n   and\
    \ the home agent.\n"
- title: 3.1.2.  Stealing Addresses of Stationary Nodes
  contents:
  - "3.1.2.  Stealing Addresses of Stationary Nodes\n   The attacker needs to know\
    \ or guess the IP addresses of both the\n   source of the packets to be diverted\
    \ (A in the example above) and the\n   destination of the packets (B, above).\
    \  This means that it is\n   difficult to redirect all packets to or from a specific\
    \ node because\n   the attacker would need to know the IP addresses of all the\
    \ nodes\n   with which it is communicating.\n   Nodes with well-known addresses,\
    \ such as servers and those using\n   stateful configuration, are most vulnerable.\
    \  Nodes that are a part\n   of the network infrastructure, such as DNS servers,\
    \ are particularly\n   interesting targets for attackers and particularly easy\
    \ to identify.\n   Nodes that frequently change their address and use random addresses\n\
    \   are relatively safe.  However, if they register their address into\n   Dynamic\
    \ DNS, they become more exposed.  Similarly, nodes that visit\n   publicly accessible\
    \ networks such as airport wireless LANs risk\n   revealing their addresses. \
    \ IPv6 addressing privacy features [3]\n   mitigate these risks to an extent,\
    \ but note that addresses cannot be\n   completely recycled while there are still\
    \ open sessions that use\n   those addresses.\n   Thus, it is not the mobile nodes\
    \ that are most vulnerable to address\n   stealing attacks; it is the well-known\
    \ static servers.  Furthermore,\n   the servers often run old or heavily optimized\
    \ operating systems and\n   may not have any mobility related code at all.  Thus,\
    \ the security\n   design cannot be based on the idea that mobile nodes might\
    \ somehow be\n   able to detect whether someone has stolen their address, and\
    \ reset\n   the state at the correspondent node.  Instead, the security design\n\
    \   must make reasonable measures to prevent the creation of fraudulent\n   binding\
    \ cache entries in the first place.\n"
- title: 3.1.3.  Future Address Sealing
  contents:
  - "3.1.3.  Future Address Sealing\n   If an attacker knows an address that a node\
    \ is likely to select in\n   the future, it can launch a \"future\" address stealing\
    \ attack.  The\n   attacker creates a Binding Cache Entry with the home address\
    \ that it\n   anticipates the target node will use.  If the Home Agent allows\n\
    \   dynamic home addresses, the attacker may be able to do this\n   legitimately.\
    \  That is, if the attacker is a client of the Home Agent\n   and is able to acquire\
    \ the home address temporarily, it may be able\n   to do so and then to return\
    \ the home address to the Home Agent once\n   the BCE is in place.\n   Now, if\
    \ the BCE state had a long expiration time, the target node\n   would acquire\
    \ the same home address while the BCE is still effective,\n   and the attacker\
    \ would be able to launch a successful man-in-the-\n   middle or denial-of-service\
    \ attack.  The mechanism applied in the\n   MIPv6 security design is to limit\
    \ the lifetime of Binding Cache\n   Entries to a few minutes.\n   Note that this\
    \ attack applies only to fairly specific conditions.\n   There are also some variations\
    \ of this attack that are theoretically\n   possible under some other conditions.\
    \  However, all of these attacks\n   are limited by the Binding Cache Entry lifetime,\
    \ and therefore they\n   are not a real concern with the current design.\n"
- title: 3.1.4.  Attacks against Secrecy and Integrity
  contents:
  - "3.1.4.  Attacks against Secrecy and Integrity\n   By spoofing Binding Updates,\
    \ an attacker could redirect all packets\n   between two IP nodes to itself. \
    \ By sending a spoofed binding update\n   to A, it could capture the data intended\
    \ to B.  That is, it could\n   pretend to be B and highjack A's connections with\
    \ B, or it could\n   establish new spoofed connections.  The attacker could also\
    \ send\n   spoofed binding updates to both A and B and insert itself in the\n\
    \   middle of all connections between them (man-in-the-middle attack).\n   Consequently,\
    \ the attacker would be able to see and modify the\n   packets sent between A\
    \ and B.  See Figure 3.\n     Original data path, before man-in-the-middle attack\n\
    \          +---+                               +---+\n          | A |        \
    \                       | B |\n          +---+                               +---+\n\
    \            \\___________________________________/\n     Modified data path,\
    \ after the falsified binding updates\n          +---+                       \
    \        +---+\n          | A |                               | B |\n        \
    \  +---+                               +---+\n            \\                 \
    \                 /\n             \\                                /\n      \
    \        \\          +----------+        /\n               \\---------| Attacker\
    \ |-------/\n                         +----------+\n                       Figure\
    \ 3.  Man-in-the-Middle Attack\n   Strong end-to-end encryption and integrity\
    \ protection, such as\n   authenticated IPsec, can prevent all the attacks against\
    \ data secrecy\n   and integrity.  When the data is cryptographically protected,\
    \ spoofed\n   binding updates could result in denial of service (see below) but\
    \ not\n   in disclosure or corruption of sensitive data beyond revealing the\n\
    \   existence of the traffic flows.  Two fixed nodes could also protect\n   communication\
    \ between themselves by refusing to accept binding\n   updates from each other.\
    \  Ingress filtering, on the other hand, does\n   not help, as the attacker is\
    \ using its own address as the care-of\n   address and is not spoofing source\
    \ IP addresses.\n   The protection adopted in MIPv6 Security Design is to authenticate\n\
    \   (albeit weakly) the addresses by return routability (RR), which\n   limits\
    \ the topological locations from which the attack is possible\n   (see Section\
    \ 4.1).\n"
- title: 3.1.5.  Basic Denial-of-Service Attacks
  contents:
  - "3.1.5.  Basic Denial-of-Service Attacks\n   By sending spoofed binding updates,\
    \ the attacker could redirect all\n   packets sent between two IP nodes to a random\
    \ or nonexistent address\n   (or addresses).  As a result, it might be able to\
    \ stop or disrupt\n   communication between the nodes.  This attack is serious\
    \ because any\n   Internet node could be targeted, including fixed nodes belonging\
    \ to\n   the infrastructure (e.g., DNS servers) that are also vulnerable.\n  \
    \ Again, the selected protection mechanism is return routability (RR).\n"
- title: 3.1.6.  Replaying and Blocking Binding Updates
  contents:
  - "3.1.6.  Replaying and Blocking Binding Updates\n   Any protocol for authenticating\
    \ binding updates has to consider\n   replay attacks.  That is, an attacker may\
    \ be able to replay recently\n   authenticated binding updates to the correspondent\
    \ and, consequently,\n   to direct packets to the mobile node's previous location.\
    \  As with\n   spoofed binding updates, this could be used both for capturing\n\
    \   packets and for DoS.  The attacker could capture the packets and\n   impersonate\
    \ the mobile node if it reserved the mobile's previous\n   address after the mobile\
    \ node has moved away and then replayed the\n   previous binding update to redirect\
    \ packets back to the previous\n   location.\n   In a related attack, the attacker\
    \ blocks binding updates from the\n   mobile at its new location, e.g., by jamming\
    \ the radio link or by\n   mounting a flooding attack.  The attacker then takes\
    \ over the\n   mobile's connections at the old location.  The attacker will be\
    \ able\n   to capture the packets sent to the mobile and to impersonate the\n\
    \   mobile until the correspondent's Binding Cache entry expires.\n   Both of\
    \ the above attacks require that the attacker be on the same\n   local network\
    \ with the mobile, where it can relatively easily observe\n   packets and block\
    \ them even if the mobile does not move to a new\n   location.  Therefore, we\
    \ believe that these attacks are not as\n   serious as ones that can be mounted\
    \ from remote locations.  The\n   limited lifetime of the Binding Cache entry\
    \ and the associated nonces\n   limit the time frame within which the replay attacks\
    \ are possible.\n   Replay protection is provided by the sequence number and MAC\
    \ in the\n   Binding Update.  To not undermine this protection, correspondent\n\
    \   nodes must exercise care upon deleting a binding cache entry, as per\n   section\
    \ 5.2.8 (\"Preventing Replay Attacks\") in [6].\n"
- title: 3.2.  Attacks Against Other Nodes and Networks (Flooding)
  contents:
  - "3.2.  Attacks Against Other Nodes and Networks (Flooding)\n   By sending spoofed\
    \ binding updates, an attacker could redirect\n   traffic to an arbitrary IP address.\
    \  This could be used to overload\n   an arbitrary Internet address with an excessive\
    \ volume of packets\n   (known as a 'bombing attack').  The attacker could also\
    \ target a\n   network by redirecting data to one or more IP addresses within\
    \ the\n   network.  There are two main variations of flooding: basic flooding\n\
    \   and return-to-home flooding.  We consider them separately.\n"
- title: 3.2.1.  Basic Flooding
  contents:
  - "3.2.1.  Basic Flooding\n   In the simplest attack, the attacker knows that there\
    \ is a heavy data\n   stream from node A to B and redirects this to the target\
    \ address C.\n   However, A would soon stop sending the data because it is not\n\
    \   receiving acknowledgements from B.\n        (B is attacker)\n        +---+\
    \  original       +---+ flooding packet   +---+\n        | B |<================|\
    \ A |==================>| C |\n        +---+  packet flow    +---+ flow      \
    \        +---+\n         |                      ^\n          \\              \
    \      /\n           \\__________________/\n          False binding update + false\
    \ acknowledgements\n                 Figure 4.  Basic Flooding Attack\n   A more\
    \ sophisticated attacker would act itself as B; see Figure 4.\n   It would first\
    \ subscribe to a data stream (e.g., a video stream) and\n   redirect this stream\
    \ to the target address C.  The attacker would\n   even be able to spoof the acknowledgements.\
    \  For example, consider a\n   TCP stream.  The attacker would perform the TCP\
    \ handshake itself and\n   thus know the initial sequence numbers.  After redirecting\
    \ the data\n   to C, the attacker would continue to send spoofed acknowledgements.\n\
    \   It would even be able to accelerate the data rate by simulating a\n   fatter\
    \ pipe [12].\n   This attack might be even easier with UDP/RTP.  The attacker\
    \ could\n   create spoofed RTCP acknowledgements.  Either way, the attacker would\n\
    \   be able to redirect an increasing stream of unwanted data to the\n   target\
    \ address without doing much work itself.  It could carry on\n   opening more\
    \ streams and refreshing the Binding Cache entries by\n   sending a new binding\
    \ update every few minutes.  Thus, the limitation\n   of BCE lifetime to a few\
    \ minutes does not help here without\n   additional measures.\n   During the Mobile\
    \ IPv6 design process, the effectiveness of this\n   attack was debated.  It was\
    \ mistakenly assumed that the target node\n   would send a TCP Reset to the source\
    \ of the unwanted data stream,\n   which would then stop sending.  In reality,\
    \ all practical TCP/IP\n   implementations fail to send the Reset.  The target\
    \ node drops the\n   unwanted packets at the IP layer because it does not have\
    \ a Binding\n   Update List entry corresponding to the Routing Header on the incoming\n\
    \   packet.  Thus, the flooding data is never processed at the TCP layer\n   of\
    \ the target node, and no Reset is sent.  This means that the attack\n   using\
    \ TCP streams is more effective than was originally believed.\n   This attack\
    \ is serious because the target can be any node or network,\n   not only a mobile\
    \ one.  What makes it particularly serious compared\n   to the other attacks is\
    \ that the target itself cannot do anything to\n   prevent the attack.  For example,\
    \ it does not help if the target\n   network stops using Route Optimization. \
    \ The damage is compounded if\n   these techniques are used to amplify the effect\
    \ of other distributed\n   denial-of-service (DDoS) attacks.  Ingress filtering\
    \ in the\n   attacker's local network prevents the spoofing of source addresses\n\
    \   but the attack would still be possible by setting the Alternate\n   care-of\
    \ address sub-option to the target address.\n   Again, the protection mechanism\
    \ adopted for MIPv6 is return\n   routability.  This time it is necessary to check\
    \ that there is indeed\n   a node at the new care-of address, and that the node\
    \ is the one that\n   requested redirecting packets to that very address (see\
    \ Section\n   4.1.2).\n"
- title: 3.2.2.  Return-to-Home Flooding
  contents:
  - "3.2.2.  Return-to-Home Flooding\n   A variation of the bombing attack would target\
    \ the home address or\n   the home network instead of the care-of address or a\
    \ visited network.\n   The attacker would claim to be a mobile with the home address\
    \ equal\n   to the target address.  While claiming to be away from home, the\n\
    \   attacker would start downloading a data stream.  The attacker would\n   then\
    \ send a binding update cancellation (i.e., a request to delete\n   the binding\
    \ from the Binding Cache) or just allow the cache entry to\n   expire.  Either\
    \ would redirect the data stream to the home network.\n   As when bombing a care-of\
    \ address, the attacker can keep the stream\n   alive and even increase the data\
    \ rate by spoofing acknowledgements.\n   When successful, the bombing attack against\
    \ the home network is just\n   as serious as that against a care-of address.\n\
    \   The basic protection mechanism adopted is return routability.\n   However,\
    \ it is hard to fully protect against this attack; see Section\n   4.1.1.\n"
- title: 3.3.  Attacks against Binding Update Protocols
  contents:
  - "3.3.  Attacks against Binding Update Protocols\n   Security protocols that successfully\
    \ protect the secrecy and\n   integrity of data can sometimes make the participants\
    \ more vulnerable\n   to denial-of-service attacks.  In fact, the stronger the\n\
    \   authentication, the easier it may be for an attacker to use the\n   protocol\
    \ features to exhaust the mobile's or the correspondent's\n   resources.\n"
- title: 3.3.1.  Inducing Unnecessary Binding Updates
  contents:
  - "3.3.1.  Inducing Unnecessary Binding Updates\n   When a mobile node receives\
    \ an IP packet from a new correspondent via\n   the home agent, it may initiate\
    \ the binding update protocol.  An\n   attacker can exploit this by sending the\
    \ mobile node a spoofed IP\n   packet (e.g., ping or TCP SYN packet) that appears\
    \ to come from a new\n   correspondent node.  Since the packet arrives via the\
    \ home agent, the\n   mobile node may start the binding update protocol with the\n\
    \   correspondent node.  The decision as to whether to initiate the\n   binding\
    \ update procedure may depend on several factors (including\n   heuristics, cross\
    \ layer information, and configuration options) and\n   is not specified by Mobile\
    \ IPv6.  Not initiating the binding update\n   procedure automatically may alleviate\
    \ these attacks, but it will not,\n   in general, prevent them completely.\n \
    \  In a real attack the attacker would induce the mobile node to\n   initiate\
    \ binding update protocols with a large number of\n   correspondent nodes at the\
    \ same time.  If the correspondent addresses\n   are real addresses of existing\
    \ IP nodes, then most instances of the\n   binding update protocol might even\
    \ complete successfully.  The\n   entries created in the Binding Cache are correct\
    \ but useless.  In\n   this way, the attacker can induce the mobile to execute\
    \ the binding\n   update protocol unnecessarily, which can drain the mobile's\n\
    \   resources.\n   A correspondent node (i.e., any IP node) can also be attacked\
    \ in a\n   similar way.  The attacker sends spoofed IP packets to a large number\n\
    \   of mobiles, with the target node's address as the source address.\n   These\
    \ mobiles will initiate the binding update protocol with the\n   target node.\
    \  Again, most of the binding update protocol executions\n   will complete successfully.\
    \  By inducing a large number of\n   unnecessary binding updates, the attacker\
    \ is able to consume the\n   target node's resources.\n   This attack is possible\
    \ against any binding update authentication\n   protocol.  The more resources\
    \ the binding update protocol consumes,\n   the more serious the attack.  Therefore,\
    \ strong cryptographic\n   authentication protocol is more vulnerable to the attack\
    \ than a weak\n   one or unauthenticated binding updates.  Ingress filtering helps\
    \ a\n   little, since it makes it harder to forge the source address of the\n\
    \   spoofed packets, but it does not completely eliminate this threat.\n   A node\
    \ should protect itself from the attack by setting a limit on\n   the amount of\
    \ resources (i.e., processing time, memory, and\n   communications bandwidth)\
    \ that it uses for processing binding\n   updates.  When the limit is exceeded,\
    \ the node can simply stop\n   attempting route optimization.  Sometimes it is\
    \ possible to process\n   some binding updates even when a node is under the attack.\
    \  A mobile\n   node may have a local security policy listing a limited number\
    \ of\n   addresses to which binding updates will be sent even when the mobile\n\
    \   node is under DoS attack.  A correspondent node (i.e., any IP node)\n   may\
    \ similarly have a local security policy listing a limited set of\n   addresses\
    \ from which binding updates will be accepted even when the\n   correspondent\
    \ is under a binding update DoS attack.\n   The node may also recognize addresses\
    \ with it had meaningful\n   communication in the past and only send binding updates\
    \ to, or accept\n   them from, those addresses.  Since it may be impossible for\
    \ the IP\n   layer to know about the protocol state in higher protocol layers,\
    \ a\n   good measure of the meaningfulness of the past communication is\n   probably\
    \ per-address packet counts.  Alternatively, Neighbor\n   Discovery [2] (Section\
    \ 5.1, Conceptual Data Structures) defines the\n   Destination Cache as a set\
    \ of entries about destinations to which\n   traffic has been sent recently. \
    \ Thus, implementors may wish to use\n   the information in the Destination Cache.\n\
    \   Section 11.7.2 (\"Correspondent Registration\") in [6] does not specify\n\
    \   when such a route optimization procedure should be initiated.  It\n   does\
    \ indicate when it may justifiable to do so, but these hints are\n   not enough.\
    \  This remains an area where more work is needed.\n   Obviously, given that route\
    \ optimization is optional, any node that\n   finds the processing load excessive\
    \ or unjustified may simply turn it\n   off (either selectively or completely).\n"
- title: 3.3.2.  Forcing Non-Optimized Routing
  contents:
  - "3.3.2.  Forcing Non-Optimized Routing\n   As a variant of the previous attack,\
    \ the attacker can prevent a\n   correspondent node from using route optimization\
    \ by filling its\n   Binding Cache with unnecessary entries so that most entries\
    \ for real\n   mobiles are dropped.\n   Any successful DoS attack against a mobile\
    \ or correspondent node can\n   also prevent the processing of binding updates.\
    \  We have previously\n   suggested that the target of a DoS attack may respond\
    \ by stopping\n   route optimization for all or some communication.  Obviously,\
    \ an\n   attacker can exploit this fallback mechanism and force the target to\n\
    \   use the less efficient home agent-based routing.  The attacker only\n   needs\
    \ to mount a noticeable DoS attack against the mobile or\n   correspondent, and\
    \ the target will default to non-optimized routing.\n   The target node can mitigate\
    \ the effects of the attack by reserving\n   more space for the Binding Cache,\
    \ by reverting to non-optimized\n   routing only when it cannot otherwise cope\
    \ with the DoS attack, by\n   trying aggressively to return to optimized routing,\
    \ or by favoring\n   mobiles with which it has an established relationship.  This\
    \ attack\n   is not as serious as the ones described earlier, but applications\n\
    \   that rely on Route Optimization could still be affected.  For\n   instance,\
    \ conversational multimedia sessions can suffer drastically\n   from the additional\
    \ delays caused by triangle routing.\n"
- title: 3.3.3.  Reflection and Amplification
  contents:
  - "3.3.3.  Reflection and Amplification\n   Attackers sometimes try to hide the\
    \ source of a packet-flooding\n   attack by reflecting the traffic from other\
    \ nodes [1].  That is,\n   instead of sending the flood of packets directly to\
    \ the target, the\n   attacker sends data to other nodes, tricking them to send\
    \ the same\n   number, or more, packets to the target.  Such reflection can hide\
    \ the\n   attacker's address even when ingress filtering prevents source\n   address\
    \ spoofing.  Reflection is particularly dangerous if the\n   packets can be reflected\
    \ multiple times, if they can be sent into a\n   looping path, or if the nodes\
    \ can be tricked into sending many more\n   packets than they receive from the\
    \ attacker, because such features\n   can be used to amplify the traffic by a\
    \ significant factor.  When\n   designing protocols, one should avoid creating\
    \ services that can be\n   used for reflection and amplification.\n   Triangle\
    \ routing would easily create opportunities for reflection: a\n   correspondent\
    \ node receives packets (e.g., TCP SYN) from the mobile\n   node and replies to\
    \ the home address given by the mobile node in the\n   Home Address Option (HAO).\
    \  The mobile might not really be a mobile\n   and the home address could actually\
    \ be the target address.  The\n   target would only see the packets sent by the\
    \ correspondent and could\n   not see the attacker's address (even if ingress\
    \ filtering prevents\n   the attacker from spoofing its source address).\n   \
    \     +----------+ TCP SYN with HAO    +-----------+\n        | Attacker |-------------------->|\
    \ Reflector |\n        +----------+                     +-----------+\n      \
    \                                         |\n                                \
    \               | TCP SYN-ACK to HoA\n                                       \
    \        V\n                                         +-----------+\n         \
    \                                | Flooding  |\n                             \
    \            | target    |\n                                         +-----------+\n\
    \                          Figure 5.  Reflection Attack\n   A badly designed binding\
    \ update protocol could also be used for\n   reflection: the correspondent would\
    \ respond to a data packet by\n   initiating the binding update authentication\
    \ protocol, which usually\n   involves sending a packet to the home address. \
    \ In that case, the\n   reflection attack can be discouraged by copying the mobile's\
    \ address\n   into the messages sent by the mobile to the correspondent.  (The\n\
    \   mobile's source address is usually the same as the care-of address,\n   but\
    \ an Alternative Care-of Address sub-option can specify a different\n   care-of\
    \ address.)  Some of the early proposals for MIPv6 security\n   used this approach\
    \ and were prone to reflection attacks.\n   In some of the proposals for binding\
    \ update authentication protocols,\n   the correspondent node responded to an\
    \ initial message from the\n   mobile with two packets (one to the home address,\
    \ one to the care-of\n   address).  It would have been possible to use this to\
    \ amplify a\n   flooding attack by a factor of two.  Furthermore, with public-key\n\
    \   authentication, the packets sent by the correspondent might have been\n  \
    \ significantly larger than the one that triggers them.\n   These types of reflection\
    \ and amplification can be avoided by\n   ensuring that the correspondent only\
    \ responds to the same address\n   from which it received a packet, and only with\
    \ a single packet of the\n   same size.  These principles have been applied to\
    \ MIPv6 security\n   design.\n"
- title: 3.4.  Classification of Attacks
  contents:
  - "3.4.  Classification of Attacks\n   Sect. Attack name                       \
    \     Target Sev. Mitigation\n   ---------------------------------------------------------------------\n\
    \   3.1.1 Basic address stealing                 MN     Med. RR\n   3.1.2 Stealing\
    \ addresses of stationary nodes Any    High RR\n   3.1.3 Future address stealing\
    \                MN     Low  RR, lifetime\n   3.1.4 Attacks against secrecy and\
    \ integrity  MN     Low  RR, IPsec\n   3.1.5 Basic denial-of-service attacks \
    \       Any    Med. RR\n   3.1.6 Replaying and blocking binding updates MN   \
    \  Low  lifetime,\n                                                          \
    \  seq number,\n                                                            MAC\n\
    \   3.2.1 Basic flooding                         Any    High RR\n   3.2.2 Return-to-home\
    \ flooding                Any    High RR\n   3.3.1 Inducing unnecessary binding\
    \ updates   MN, CN Med. heuristics\n   3.3.2 Forcing non-optimized routing   \
    \       MN     Low  heuristics\n   3.3.3 Reflection and amplification        \
    \   N/A    Med. BU design\n                  Figure 6.  Summary of Discussed Attacks\n\
    \   Figure 6 gives a summary of the attacks discussed.  As it stands at\n   the\
    \ time of writing, the return-to-the-home flooding and the\n   induction of unnecessary\
    \ binding updates look like the threats\n   against which we have the least amount\
    \ of protection, compared to\n   their severity.\n"
- title: 3.5.  Problems with Infrastructure-Based Authorization
  contents:
  - "3.5.  Problems with Infrastructure-Based Authorization\n   Early in the MIPv6\
    \ design process, it was assumed that plain IPsec\n   could be the default way\
    \ to secure Binding Updates with arbitrary\n   correspondent nodes.  However,\
    \ this turned out to be impossible.\n   Plain IPsec relies on an infrastructure\
    \ for key management, which, to\n   be usable with any arbitrary pair of nodes,\
    \ would need to be global\n   in scope.  Such a \"global PKI\" does not exist,\
    \ nor is it expected to\n   come into existence any time soon.\n   More minor\
    \ issues that also surfaced at the time were: (1)\n   insufficient filtering granularity\
    \ for the state of IPsec at the\n   time, (2) cost to establish a security association\
    \ (in terms of CPU\n   and round trip times), and (3) expressing the proper authorization\n\
    \   (as opposed to just authentication) for binding updates [13].  These\n   issues\
    \ are solvable, and, in particular, (1) and (3) have been\n   addressed for IPsec\
    \ usage with binding updates between the mobile\n   node and the home agent [7].\n\
    \   However, the lack of a global PKI remains unsolved.\n   One way to provide\
    \ a global key infrastructure for mobile IP could be\n   DNSSEC.  Such a scheme\
    \ is not completely supported by the existing\n   specifications, as it constitutes\
    \ a new application of the KEY RR,\n   something explicitly limited to DNSSEC\
    \ [8] [9] [10].  Nevertheless,\n   if one were to define it, one could proceed\
    \ along the following\n   lines: A secure reverse DNS that provided a public key\
    \ for each IP\n   address could be used to verify that a binding update is indeed\n\
    \   signed by an authorized party.  However, in order to be secure, each\n   link\
    \ in such a system must be secure.  That is, there must be a chain\n   of keys\
    \ and signatures all the way down from the root (or at least\n   starting from\
    \ a trust anchor common to the mobile node and the\n   correspondent node) to\
    \ the given IP address.  Furthermore, it is not\n   enough that each key be signed\
    \ by the key above it in the chain.  It\n   is also necessary that each signature\
    \ explicitly authorize the lower\n   key to manage the corresponding address block\
    \ below.\n   Even though it would be theoretically possible to build a secure\n\
    \   reverse DNS infrastructure along the lines shown above, the practical\n  \
    \ problems would be daunting.  Whereas the delegation and key signing\n   might\
    \ work close to the root of the tree, it would probably break\n   down somewhere\
    \ along the path to the individual nodes.  Note that a\n   similar delegation\
    \ tree is currently being proposed for Secure\n   Neighbor Discovery [15], although\
    \ in this case only routers (not\n   necessarily every single potential mobile\
    \ node) need to secure such a\n   certificate.  Furthermore, checking all the\
    \ signatures on the tree\n   would place a considerable burden on the correspondent\
    \ nodes, making\n   route optimization prohibitive, or at least justifiable only\
    \ in very\n   particular circumstances.  Finally, it is not enough simply to check\n\
    \   whether the mobile node is authorized to send binding updates\n   containing\
    \ a given home address, because to protect against flooding\n   attacks, the care-of\
    \ address must also be verified.\n   Relying on this same secure DNS infrastructure\
    \ to verify care-of\n   addresses would be even harder than verifying home addresses.\n\
    \   Instead, a different method would be required, e.g., a return\n   routability\
    \ procedure.  If so, the obvious question is whether the\n   gargantuan cost of\
    \ deploying the global secure DNS infrastructure is\n   worth the additional protection\
    \ it affords, as compared to simply\n   using return routability for both home\
    \ address and care-of address\n   verification.\n"
- title: 4.  Solution Selected for Mobile IPv6
  contents:
  - "4.  Solution Selected for Mobile IPv6\n   The current Mobile IPv6 route optimization\
    \ security has been\n   carefully designed to prevent or mitigate the threats\
    \ that were\n   discussed in Section 3.  The goal has been to produce a design\
    \ with a\n   level of security close to that of a static IPv4-based Internet,\
    \ and\n   with an acceptable cost in terms of packets, delay, and processing.\n\
    \   The result is not what one would expect: it is definitely not a\n   traditional\
    \ cryptographic protocol.  Instead, the result relies\n   heavily on the assumption\
    \ of an uncorrupted routing infrastructure\n   and builds upon the idea of checking\
    \ that an alleged mobile node is\n   indeed reachable through both its home address\
    \ and its care-of\n   address.  Furthermore, the lifetime of the state created\
    \ at the\n   corresponded nodes is deliberately restricted to a few minutes, in\n\
    \   order to limit the potential threat from time shifting.\n   This section describes\
    \ the solution in reasonable detail (for further\n   details see the specification),\
    \ starting from Return Routability\n   (Section 4.1), continuing with a discussion\
    \ about state creation at\n   the correspondent node (Section 4.2), and completing\
    \ the description\n   with a discussion about the lifetime of Binding Cache Entries\n\
    \   (Section 4.3).\n"
- title: 4.1.  Return Routability
  contents:
  - "4.1.  Return Routability\n   Return Routability (RR) is the name of the basic\
    \ mechanism deployed\n   by Mobile IPv6 route optimization security design.  RR\
    \ is based on\n   the idea that a node should be able to verify that there is\
    \ a node\n   that is able to respond to packets sent to a given address.  The\n\
    \   check yields false positives if the routing infrastructure is\n   compromised\
    \ or if there is an attacker between the verifier and the\n   address to be verified.\
    \  With these exceptions, it is assumed that a\n   successful reply indicates\
    \ that there is indeed a node at the given\n   address, and that the node is willing\
    \ to reply to the probes sent to\n   it.\n   The basic return routability mechanism\
    \ consists of two checks, a Home\n   Address check (see Section 4.1.1) and a care-of-address\
    \ check (see\n   Section 4.1.2).  The packet flow is depicted in Figure 7.  First,\
    \ the\n   mobile node sends two packets to the correspondent node: a Home Test\n\
    \   Init (HoTI) packet is sent through the home agent, and a Care-of Test\n  \
    \ Init (CoTI) directly.  The correspondent node replies to both of\n   these independently\
    \ by sending a Home Test (HoT) in response to the\n   Home Test Init and a Care-of\
    \ Test (CoT) in response to the Care-of\n   Test Init.  Finally, once the mobile\
    \ node has received both the Home\n   Test and Care-of Test packets, it sends\
    \ a Binding Update to the\n   correspondent node.\n           +------+   1a) HoTI\
    \            +------+\n           |      |---------------------->|      |\n  \
    \         |  MN  |   2a) HoT             |  HA  |\n           |      |<----------------------|\
    \      |\n           +------+                       +------+\n   1b) CoTI | ^\
    \  |                        /  ^\n            | |2b| CoT                   / \
    \ /\n            | |  |                      /  /\n            | |  | 3) BU  \
    \             /  /\n            V |  V                    /  /\n           +------+\
    \   1a) HoTI       /  /\n           |      |<----------------/  /\n          \
    \ |  CN  |   2a) HoT         /\n           |      |------------------/\n     \
    \      +------+\n                 Figure 7.  Return Routability Packet Flow\n\
    \   It might appear that the actual design was somewhat convoluted.  That\n  \
    \ is, the real return routability checks are the message pairs < Home\n   Test,\
    \ Binding Update > and < Care-of Test, Binding Update >.  The\n   Home Test Init\
    \ and Care-of Test Init packets are only needed to\n   trigger the test packets,\
    \ and the Binding Update acts as a combined\n   routability response to both of\
    \ the tests.\n   There are two main reasons behind this design:\n   o  avoidance\
    \ of reflection and amplification (see Section 3.3.3), and\n   o  avoidance of\
    \ state exhaustion DoS attacks (see Section 4.2).\n   The reason for sending two\
    \ Init packets instead of one is to avoid\n   amplification.  The correspondent\
    \ node does not know anything about\n   the mobile node, and therefore it just\
    \ receives an unsolicited IP\n   packet from some arbitrary IP address.  In a\
    \ way, this is similar to\n   a server receiving a TCP SYN from a previously unknown\
    \ client.  If\n   the correspondent node were to send two packets in response\
    \ to an\n   initial trigger, that would provide the potential for a DoS\n   amplification\
    \ effect, as discussed in Section 3.3.3.\n   This scheme also avoids providing\
    \ for a potential reflection attack.\n   If the correspondent node were to reply\
    \ to an address other than the\n   source address of the packet, that would create\
    \ a reflection effect.\n   Thus, the only safe mechanism possible for a naive\
    \ correspondent is\n   to reply to each received packet with just one packet,\
    \ and to send\n   the reply to the source address of the received packet.  Hence,\
    \ two\n   initial triggers are needed instead of just one.\n   Let us now consider\
    \ the two return routability tests separately.  In\n   the following sections,\
    \ the derivation of cryptographic material from\n   each of these is shown in\
    \ a simplified manner.  For the real formulas\n   and more detail, please refer\
    \ to [6].\n"
- title: 4.1.1.  Home Address Check
  contents:
  - "4.1.1.  Home Address Check\n   The Home Address check consists of a Home Test\
    \ (HoT) packet and a\n   subsequent Binding Update (BU).  It is triggered by the\
    \ arrival of a\n   Home Test Init (HoTI).  A correspondent node replies to a Home\
    \ Test\n   Init by sending a Home Test to the source address of the Home Test\n\
    \   Init.  The source address is assumed to be the home address of a\n   mobile\
    \ node, and therefore the Home Test is assumed to be tunneled by\n   the Home\
    \ Agent to the mobile node.  The Home Test contains a\n   cryptographically generated\
    \ token, home keygen token, which is formed\n   by calculating a hash function\
    \ over the concatenation of a secret\n   key, Kcn, known only by the correspondent\
    \ node, the source address of\n   the Home Test Init packet, and a nonce.\n  \
    \    home keygen token = hash(Kcn | home address | nonce | 0)\n   An index to\
    \ the nonce is also included in the Home Test packet,\n   allowing the correspondent\
    \ node to find the appropriate nonce more\n   easily.\n   The token allows the\
    \ correspondent node to make sure that any binding\n   update received subsequently\
    \ has been created by a node that has seen\n   the Home Test packet; see Section\
    \ 4.2.\n   In most cases, the Home Test packet is forwarded over two different\n\
    \   segments of the Internet.  It first traverses from the correspondent\n   node\
    \ to the Home Agent.  On this trip, it is not protected and any\n   eavesdropper\
    \ on the path can learn its contents.  The Home Agent then\n   forwards the packet\
    \ to the mobile node.  This path is taken inside an\n   IPsec ESP protected tunnel,\
    \ making it impossible for the outsiders to\n   learn the contents of the packet.\n\
    \   At first, it may sound unnecessary to protect the packet between the\n   home\
    \ agent and the mobile node, since it travelled unprotected\n   between the correspondent\
    \ node and the mobile node.  If all links in\n   the Internet were equally insecure,\
    \ the additional protection would\n   be unnecessary.  However, in most practical\
    \ settings the network is\n   likely to be more secure near the home agent than\
    \ near the mobile\n   node.  For example, if the home agent hosts a virtual home\
    \ link and\n   the mobile nodes are never actually at home, an eavesdropper should\n\
    \   be close to the correspondent node or on the path between the\n   correspondent\
    \ node and the home agent, since it could not eavesdrop\n   at the home agent.\
    \  If the correspondent node is a major server, all\n   the links on the path\
    \ between it and the home agent are likely to be\n   fairly secure.  On the other\
    \ hand, the Mobile Node is probably using\n   wireless access technology, making\
    \ it sometimes trivial to eavesdrop\n   on its access link.  Thus, it is fairly\
    \ easy to eavesdrop on packets\n   that arrive at the mobile node.  Consequently,\
    \ protecting the HA-MN\n   path is likely to provide real security benefits even\
    \ when the CN-HA\n   path remains unprotected.\n"
- title: 4.1.2.  Care-of-Address Check
  contents:
  - "4.1.2.  Care-of-Address Check\n   From the correspondent node's point of view,\
    \ the Care-of-Address\n   check is very similar to the home check.  The only difference\
    \ is that\n   now the source address of the received Care-of Test Init packet\
    \ is\n   assumed to be the care-of address of the mobile node.  Furthermore,\n\
    \   the token is created in a slightly different manner in order to make\n   it\
    \ impossible to use home tokens for care-of tokens or vice versa.\n      care-of\
    \ keygen token = hash(Kcn | care-of address | nonce | 1)\n   The Care-of Test\
    \ traverses only one leg, directly from the\n   correspondent node to the mobile\
    \ node.  It remains unprotected all\n   along the way, making it vulnerable to\
    \ eavesdroppers near the\n   correspondent node, on the path from the correspondent\
    \ node to the\n   mobile node, or near the mobile node.\n"
- title: 4.1.3.  Forming the First Binding Update
  contents:
  - "4.1.3.  Forming the First Binding Update\n   When the mobile node has received\
    \ both the Home Test and Care-of Test\n   messages, it creates a binding key,\
    \ Kbm, by computing a hash function\n   over the concatenation of the tokens received.\n\
    \   This key is used to protect the first and the subsequent binding\n   updates,\
    \ as long as the key remains valid.\n   Note that the key Kbm is available to\
    \ anyone who is able to receive\n   both the Care-of Test and Home Test messages.\
    \  However, they are\n   normally routed by different routes through the network,\
    \ and the Home\n   Test is transmitted over an encrypted tunnel from the home\
    \ agent to\n   the mobile node (see also Section 5.4).\n"
- title: 4.2.  Creating State Safely
  contents:
  - "4.2.  Creating State Safely\n   The correspondent node may remain stateless until\
    \ it receives the\n   first Binding Update.  That is, it does not need to record\
    \ receiving\n   and replying to the Home Test Init and Care-of Test Init messages.\n\
    \   The Home Test Init/Home Test and Care-of Test Init/Care-of Test\n   exchanges\
    \ take place in parallel but independently of each other.\n   Thus, the correspondent\
    \ can respond to each message immediately, and\n   it does not need to remember\
    \ doing that.  This helps in potential\n   denial-of-service situations: no memory\
    \ needs to be reserved for\n   processing Home Test Init and Care-of Test Init\
    \ messages.\n   Furthermore, Home Test Init and Care-of Test Init processing is\n\
    \   designed to be lightweight, and it can be rate limited if necessary.\n   When\
    \ receiving a first binding update, the correspondent node goes\n   through a\
    \ rather complicated procedure.  The purpose of this\n   procedure is to ensure\
    \ that there is indeed a mobile node that has\n   recently received a Home Test\
    \ and a Care-of Test that were sent to\n   the claimed home and care-of addresses,\
    \ respectively, and to make\n   sure that the correspondent node does not unnecessarily\
    \ spend CPU or\n   other resources while performing this check.\n   Since the\
    \ correspondent node does not have any state when the binding\n   update arrives,\
    \ the binding update itself must contain enough\n   information so that relevant\
    \ state can be created.  To that end, the\n   binding update contains the following\
    \ pieces of information:\n   Source address:  The care-of address specified in\
    \ the Binding Update\n      must be equal to the source address used in the Care-of\
    \ Test Init\n      message.  Notice that this applies to the effective Care-of\n\
    \      Address of the Binding Update.  In particular, if the Binding\n      Update\
    \ includes an Alternate Care-of Address (AltCoA) [6], the\n      effective CoA\
    \ is, of course, this AltCoA.  Thus, the Care-of Test\n      Init must have originated\
    \ from the AltCoA.\n   Home address:  The home address specified in the Binding\
    \ Update must\n      be equal to the source address used in the Home Test Init\
    \ message.\n   Two nonce indices:  These are copied over from the Home Test and\n\
    \      Care-of Test messages, and together with the other information\n      they\
    \ allow the correspondent node to re-create the tokens sent in\n      the Home\
    \ Test and Care-of Test messages and used for creating Kbm.\n      Without them,\
    \ the correspondent node might need to try the 2-3\n      latest nonces, leading\
    \ to unnecessary resource consumption.\n   Message Authentication Code (MAC):\
    \  The binding update is\n      authenticated by computing a MAC function over\
    \ the care-of\n      address, the correspondent node's address and the binding\
    \ update\n      message itself.  The MAC is keyed with the key Kbm.\n   Given\
    \ the addresses, the nonce indices (and thereby the nonces) and\n   the key Kcn,\
    \ the correspondent node can re-create the home and care-\n   of tokens at the\
    \ cost of a few memory lookups and computation of one\n   MAC and one hash function.\n\
    \   Once the correspondent node has re-created the tokens, it hashes the\n   tokens\
    \ together, giving the key Kbm.  If the Binding Update is\n   authentic, Kbm is\
    \ cached together with the binding.  This key is then\n   used to verify the MAC\
    \ that protects integrity and origin of the\n   actual Binding Update.  Note that\
    \ the same Kbm may be used for a\n   while, until the mobile node moves (and needs\
    \ to get a new care-of-\n   address token), the care-of token expires, or the\
    \ home token expires.\n"
- title: 4.2.1.  Retransmissions and State Machine
  contents:
  - "4.2.1.  Retransmissions and State Machine\n   Note that since the correspondent\
    \ node may remain stateless until it\n   receives a valid binding update, the\
    \ mobile node is solely\n   responsible for retransmissions.  That is, the mobile\
    \ node should\n   keep sending the Home Test Init / Care-of Test Init messages\
    \ until it\n   receives a Home Test / Care-of Test, respectively.  Similarly,\
    \ it may\n   need to send the binding update a few times in the case it is lost\n\
    \   while in transit.\n"
- title: 4.3.  Quick expiration of the Binding Cache Entries
  contents:
  - "4.3.  Quick expiration of the Binding Cache Entries\n   A Binding Cache Entry,\
    \ along with the key Kbm, represents the return\n   routability state of the network\
    \ at the time when the Home Test and\n   Care-of Test messages were sent out.\
    \  It is possible that a specific\n   attacker is able to eavesdrop a Home Test\
    \ message at some point of\n   time, but not later.  If the Home Test had an infinite\
    \ or a long\n   lifetime, that would allow the attacker to perform a time shifting\n\
    \   attack (see Section 2.2).  That is, in the current IPv4 architecture\n   an\
    \ attacker on the path between the correspondent node and the home\n   agent is\
    \ able to perform attacks only as long as the attacker is able\n   to eavesdrop\
    \ (and possibly disrupt) communications on that particular\n   path.  A long living\
    \ Home Test, and consequently the ability to send\n   valid binding updates for\
    \ a long time, would allow the attacker to\n   continue its attack even after\
    \ the attacker is no longer able to\n   eavesdrop on the path.\n   To limit the\
    \ seriousness of this and other similar time shifting\n   threats, the validity\
    \ of the tokens is limited to a few minutes.\n   This effectively limits the validity\
    \ of the key Kbm and the lifetime\n   of the resulting binding updates and binding\
    \ cache entries.\n   Although short lifetimes are required by other aspects of\
    \ the\n   security design and the goals, they are clearly detrimental for\n  \
    \ efficiency and robustness.  That is, a Home Test Init / Home Test\n   message\
    \ pair must be exchanged through the home agent every few\n   minutes.  These\
    \ messages are unnecessary from a purely functional\n   point of view, thereby\
    \ representing overhead.  What is worse, though,\n   is that they make the home\
    \ agent a single point of failure.  That is,\n   if the Home Test Init / Home\
    \ Test messages were not needed, the\n   existing connections from a mobile node\
    \ to other nodes could continue\n   even when the home agent fails, but the current\
    \ design forces the\n   bindings to expire after a few minutes.\n   This concludes\
    \ our walk-through of the selected security design.  The\n   cornerstones of the\
    \ design were the employment of the return\n   routability idea in the Home Test,\
    \ Care-of Test, and binding update\n   messages, the ability to remain stateless\
    \ until a valid binding\n   update is received, and the limiting of the binding\
    \ lifetimes to a\n   few minutes.  Next we briefly discuss some of the remaining\
    \ threats\n   and other problems inherent to the design.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This section gives a brief analysis of the security\
    \ design, mostly in\n   the light of what was known when the design was completed\
    \ in Fall\n   2002.  It should be noted that this section does not present a proper\n\
    \   security analysis of the protocol; it merely discusses a few issues\n   that\
    \ were known at the time the design was completed.\n   It should be kept in mind\
    \ that the MIPv6 RO security design was never\n   intended to be fully secure.\
    \  Instead, as we stated earlier, the goal\n   was to be roughly as secure as\
    \ non-mobile IPv4 was known to be at the\n   time of the design.  As it turns\
    \ out, the result is slightly less\n   secure than IPv4, but the difference is\
    \ small and most likely\n   insignificant in real life.\n   The known residual\
    \ threats as compared with IPv4 are discussed in\n   Section 5.1.  Considerations\
    \ related to the application of IPsec to\n   authorize route optimization are\
    \ discussed in Section 5.2.  Section\n   5.3 discusses an attack against neighboring\
    \ nodes.  Finally, Section\n   5.4 deals with the special case of two mobile nodes\
    \ conversing and\n   performing the route optimization procedure with each other.\n"
- title: 5.1.  Residual Threats as Compared to IPv4
  contents:
  - "5.1.  Residual Threats as Compared to IPv4\n   As we mentioned in Section 4.2,\
    \ the lifetime of a binding represents\n   a potential time shift in an attack.\
    \  That is, an attacker that is\n   able to create a false binding is able to\
    \ reap the benefits of the\n   binding as long as the binding lasts.  Alternatively,\
    \ the attacker is\n   able to delay a return-to-home flooding attack (Section\
    \ 3.2.2) until\n   the binding expires.  This is different from IPv4, where an\
    \ attacker\n   may continue an attack only as long as it is on the path between\
    \ the\n   two hosts.\n   Since the binding lifetimes are severely restricted in\
    \ the current\n   design, the ability to do a time shifting attack is equivalently\n\
    \   restricted.\n   Threats possible because of the introduction of route optimization\n\
    \   are, of course, not present in a baseline IPv4 internet (Section\n   3.3).\
    \  In particular, inducing unnecessary binding updates could\n   potentially be\
    \ a severe attack, but this would be most likely due to\n   faulty implementations.\
    \  As an extreme measure, a correspondent node\n   can protect against these attacks\
    \ by turning off route optimization.\n   If so, it becomes obvious that the only\
    \ residual attack against which\n   there is no clear-cut prevention (other than\
    \ its severe limitation as\n   currently specified) is the time shifting attack\
    \ mentioned above.\n"
- title: 5.2.  Interaction with IPsec
  contents:
  - "5.2.  Interaction with IPsec\n   A major motivation behind the current binding\
    \ update design was\n   scalability, which implied the ability to run the protocol\
    \ without\n   any existing security infrastructure.  An alternative would have\
    \ been\n   to rely on existing trust relationships, perhaps in the form of a\n\
    \   special-purpose Public Key Infrastructure in conjunction with IPsec.\n   That\
    \ would have limited scalability, making route optimization\n   available only\
    \ in environments where it is possible to create\n   appropriate IPsec security\
    \ associations between the mobile nodes and\n   the corresponding nodes.\n   There\
    \ clearly are situations where there exists an appropriate\n   relationship between\
    \ a mobile node and the correspondent node.  For\n   example, if the correspondent\
    \ node is a server that has pre-\n   established keys with the mobile node, that\
    \ would be the case.\n   However, entity authentication or an authenticated session\
    \ key is not\n   necessarily sufficient for accepting Binding Updates.\n   Home\
    \ Address Check:  If one wants to replace the home address check\n      with cryptographic\
    \ credentials, these must carry proper\n      authorization for the specific home\
    \ address, and care must be\n      taken to make sure that the issuer of the certificate\
    \ is entitled\n      to express such authorization.  At the time of the design\
    \ work,\n      the route optimization security design team was not aware of\n\
    \      standardized certificate formats to do this, although more recent\n   \
    \   efforts within the IETF are addressing this issue.  Note that\n      there\
    \ is plenty of motivation to do so, as any pre-existing\n      relationship with\
    \ a correspondent node would involve the mobile\n      node's home address (instead\
    \ of any of its possible care-of\n      addresses).  Accordingly, the IKE exchange\
    \ would most naturally\n      run between the correspondent node and the mobile\
    \ node's home\n      address.  This still leaves open the issue of checking the\
    \ mobile\n      node's care-of address.\n   Care-of Address Check:  As for the\
    \ care-of-address check, in\n      practice, it seems highly unlikely that nodes\
    \ could completely\n      replace the care-of-address check with credentials.\
    \  Since the\n      care-of addresses are ephemeral, in general it is very difficult\n\
    \      for a mobile node to present credentials that taken at face value\n   \
    \   (by an arbitrary correspondent node) guarantee no misuse for, say,\n     \
    \ flooding attacks (Section 3.2).  As discussed before, a\n      reachability\
    \ check goes a long way to alleviate such attacks.\n      Notice that, as part\
    \ of the normal protocol exchange, establishing\n      IPsec security associations\
    \ via IKE includes one such reachability\n      test.  However, as per the previous\
    \ section, the natural IKE\n      protocol exchange runs between the correspondent\
    \ node and the\n      mobile node's home address.  Hence, another reachability\
    \ check is\n      needed to check the care-of address at which the node is currently\n\
    \      reachable.  If this address changes, such a reachability test is\n    \
    \  likewise necessary, and it is included in ongoing work aimed at\n      securely\
    \ updating the node's current address.\n   Nevertheless, the Mobile IPv6 base\
    \ specification [6] does not specify\n   how to use IPsec together with the mobility\
    \ procedures between the\n   mobile node and correspondent node.  On the other\
    \ hand, the\n   specification is carefully written to allow the creation of the\n\
    \   binding management key Kbm through some different means.\n   Accordingly,\
    \ where an appropriate relationship exists between a\n   mobile node and a correspondent\
    \ node, the use of IPsec is possible,\n   and is, in fact, being pursued in more\
    \ recent work.\n"
- title: 5.3.  Pretending to Be One's Neighbor
  contents:
  - "5.3.  Pretending to Be One's Neighbor\n   One possible attack against the security\
    \ design is to pretend to be a\n   neighboring node.  To launch this attack, the\
    \ mobile node establishes\n   route optimization with some arbitrary correspondent\
    \ node.  While\n   performing the return routability tests and creating the binding\n\
    \   management key Kbm, the attacker uses its real home address but a\n   faked\
    \ care-of address.  Indeed, the care-of address would be the\n   address of the\
    \ neighboring node on the local link.  The attacker is\n   able to create the\
    \ binding since it receives a valid Home Test\n   normally, and it is able to\
    \ eavesdrop on the Care-of Test, as it\n   appears on the local link.\n   This\
    \ attack would allow the mobile node to divert unwanted traffic\n   towards the\
    \ neighboring node, resulting in an flooding attack.\n   However, this attack\
    \ is not very serious in practice.  First, it is\n   limited in the terms of location,\
    \ since it is only possible against\n   neighbors.  Second, the attack works also\
    \ against the attacker, since\n   it shares the local link with the target.  Third,\
    \ a similar attack is\n   possible with Neighbor Discovery spoofing.\n"
- title: 5.4.  Two Mobile Nodes Talking to Each Other
  contents:
  - "5.4.  Two Mobile Nodes Talking to Each Other\n   When two mobile nodes want to\
    \ establish route optimization with each\n   other, some care must be exercised\
    \ in order not to reveal the reverse\n   tokens to an attacker.  In this situation,\
    \ both mobile nodes act\n   simultaneously in the mobile node and the correspondent\
    \ node roles.\n   In the correspondent node role, the nodes are vulnerable to\
    \ attackers\n   that are co-located at the same link.  Such an attacker is able\
    \ to\n   learn both the Home Test and Care-of Test sent by the mobile node,\n\
    \   and therefore it is able to spoof the location of the other mobile\n   host\
    \ to the neighboring one.  What is worse is that the attacker can\n   obtain a\
    \ valid Care-of Test itself, combine it with the Home Test,\n   and then claim\
    \ to the neighboring node that the other node has just\n   arrived at the same\
    \ link.\n   There is an easy way to avoid this attack.  In the correspondent node\n\
    \   role, the mobile node should tunnel the Home Test messages that it\n   sends\
    \ through its home agent.  This prevents the co-located attacker\n   from learning\
    \ any valid Home Test messages.\n"
- title: 6.  Conclusions
  contents:
  - "6.  Conclusions\n   This document discussed the security design rationale for\
    \ the Mobile\n   IPv6 Route Optimization.  We have tried to describe the dangers\n\
    \   created by Mobile IP Route Optimization, the security goals and\n   background\
    \ of the design, and the actual mechanisms employed.\n   We started the discussion\
    \ with a background tour to the IP routing\n   architecture the definition of\
    \ the mobility problem.  After that, we\n   covered the avenues of attack: the\
    \ targets, the time shifting\n   abilities, and the possible locations of an attacker.\
    \  We outlined a\n   number of identified threat scenarios, and discussed how\
    \ they are\n   mitigated in the current design.  Finally, in Section 4 we gave\
    \ an\n   overview of the actual mechanisms employed, and the rational behind\n\
    \   them.\n   As far as we know today, the only significant difference between\
    \ the\n   security of an IPv4 Internet and that of an Internet with Mobile IPv6\n\
    \   (and route optimization) concerns time shifting attacks.\n   Nevertheless,\
    \ these are severely restricted in the current design.\n   We have also briefly\
    \ covered some of the known subtleties and\n   shortcomings, but that discussion\
    \ cannot be exhaustive.  It is quite\n   probable that new subtle problems will\
    \ be discovered with the design.\n   As a consequence, it is most likely that\
    \ the design needs to be\n   revised in the light of experience and insight.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   We are grateful for: Hesham Soliman for reminding us\
    \ about the threat\n   explained in Section 5.3, Francis Dupont for first discussing\
    \ the\n   case of two mobile nodes talking to each other (Section 5.4) and for\n\
    \   sundry other comments, Pekka Savola for his help in Section 1.1.1,\n   and\
    \ Elwyn Davies for his thorough editorial review.\n"
- title: 8.  Informative References
  contents:
  - "8.  Informative References\n   [1]   Aura, T., Roe, M., and J. Arkko, \"Security\
    \ of Internet Location\n         Management\", Proc. 18th Annual Computer Security\
    \ Applications\n         Conference, pages 78-87, Las Vegas, NV, USA, IEEE Press,\n\
    \         December 2002.\n   [2]   Narten, T., Nordmark, E., and W. Simpson, \"\
    Neighbor Discovery\n         for IP Version 6 (IPv6)\", RFC 2461, December 1998.\n\
    \   [3]   Narten, T. and R. Draves, \"Privacy Extensions for Stateless\n     \
    \    Address Autoconfiguration in IPv6\", RFC 3041, January 2001.\n   [4]   Bush,\
    \ R. and D. Meyer, \"Some Internet Architectural Guidelines\n         and Philosophy\"\
    , RFC 3439, December 2002.\n   [5]   Baker, F. and P. Savola, \"Ingress Filtering\
    \ for Multihomed\n         Networks\", BCP 84, RFC 3704, March 2004.\n   [6] \
    \  Johnson, D., Perkins, C., and J. Arkko, \"Mobility Support in\n         IPv6\"\
    , RFC 3775, June 2004.\n   [7]   Arkko, J., Devarapalli, V., and F. Dupont, \"\
    Using IPsec to\n         Protect Mobile IPv6 Signaling Between Mobile Nodes and\
    \ Home\n         Agents\", RFC 3776, June 2004.\n   [8]   Arends, R., Austein,\
    \ R., Larson, M., Massey, D., and S. Rose,\n         \"DNS Security Introduction\
    \ and Requirements\", RFC 4033, March\n         2005.\n   [9]   Arends, R., Austein,\
    \ R., Larson, M., Massey, D., and S. Rose,\n         \"Resource Records for the\
    \ DNS Security Extensions\", RFC 4034,\n         March 2005.\n   [10]  Arends,\
    \ R., Austein, R., Larson, M., Massey, D., and S. Rose,\n         \"Protocol Modifications\
    \ for the DNS Security Extensions\", RFC\n         4035, March 2005.\n   [11]\
    \  Chiappa, J., \"Will The Real 'End-End Principle' Please Stand\n         Up?\"\
    , Private Communication, April 2002.\n   [12]  Savage, S., Cardwell, N., Wetherall,\
    \ D., and T. Anderson, \"TCP\n         Congestion Control with a Misbehaving Receiver\"\
    , ACM Computer\n         Communication Review, 29:5, October 1999.\n   [13]  Nikander,\
    \ P., \"Denial-of-Service, Address Ownership, and Early\n         Authentication\
    \ in the IPv6 World\", Security Protocols 9th\n         International Workshop,\
    \ Cambridge, UK, April 25-27 2001, LNCS\n         2467, pages 12-26, Springer,\
    \ 2002.\n   [14]  Chiappa, J., \"Endpoints and Endpoint Names: A Proposed\n  \
    \       Enhancement to the Internet Architecture\", Private\n         Communication,\
    \ 1999.\n   [15]  Arkko, J., Kempf, J., Zill, B., and P. Nikander, \"SEcure\n\
    \         Neighbor Discovery (SEND)\", RFC 3971, March 2005.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Pekka Nikander\n   Ericsson Research NomadicLab\n   JORVAS\
    \  FIN-02420\n   FINLAND\n   Phone: +358 9 299 1\n   EMail: pekka.nikander@nomadiclab.com\n\
    \   Jari Arkko\n   Ericsson Research NomadicLab\n   JORVAS  FIN-02420\n   FINLAND\n\
    \   EMail: jari.arkko@ericsson.com\n   Tuomas Aura\n   Microsoft Research Ltd.\n\
    \   Roger Needham Building\n   7  JJ Thomson Avenue\n   Cambridge CB3 0FB\n  \
    \ United Kingdom\n   EMail: Tuomaura@microsoft.com\n   Gabriel Montenegro\n  \
    \ Microsoft Corporation\n   One Microsoft Way\n   Redmond, WA  98052\n   USA\n\
    \   EMail: gabriel_montenegro_2000@yahoo.com\n   Erik Nordmark\n   Sun Microsystems\n\
    \   17 Network Circle\n   Menlo Park, CA 94025\n   USA\n   EMail: erik.nordmark@sun.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
