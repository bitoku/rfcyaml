This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
In particular, it describes managed objects which provide an inverted mapping of the interface stack table used for managing network interfaces.
The SNMP Network Management Framework
The SNMP Management Framework presently consists of five major components: An overall architecture, described in RFC 2571 [1].
Mechanisms for describing and naming objects and events for the purpose of management.
The first version of this Structure of Management Information (SMI) is called SMIv1 and described in STD 16, RFC 1155 [2], STD 16, RFC 1212 [3] and RFC 1215 [4].
The second version, called SMIv2, is described in STD 58, which consists of RFC 2578 [5], RFC 2579 [6] and RFC 2580 [7].
Message protocols for transferring management information.
The first version of the SNMP message protocol is called SNMPv1 and described in STD 15, RFC 1157 [8].
A second version of the SNMP message protocol, which is not an Internet standards track protocol, is called SNMPv2c and described in RFC 1901 [9] and RFC 1906 [10].
The third version of the message protocol is called SNMPv3 and described in RFC 1906 [10], RFC 2572 [11] and RFC 2574 [12].
Protocol operations for accessing management information.
The first set of protocol operations and associated PDU formats is described in STD 15, RFC 1157 [8].
A second set of protocol operations and associated PDU formats is described in RFC 1905 [13].
A set of fundamental applications described in RFC 2573 [14] and the view based access control mechanism described in RFC 2575 [15].
A more detailed introduction to the current SNMP Management Framework can be found in RFC 2570 [18].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
Objects in the MIB are defined using the mechanisms defined in the SMI.
This memo specifies a MIB module that is compliant to the SMIv2.
A MIB conforming to the SMIv1 can be produced through the appropriate translations.
The resulting translated MIB must be semantically equivalent, except where objects or events are omitted because no translation is possible (e.g., use of Counter64).
Some machine readable information in SMIv2 will be converted into textual descriptions in SMIv1 during the translation process.
However, this loss of machine readable information is not considered to change the semantics of the MIB.
3.  Interface Sub Layers and the ifStackTable MIB II [16] defines objects for managing network interfaces by providing a generic interface definition together with the ability to define media specific extensions.
The generic objects are known as the 'interfaces' group.
Experience in defining media specific extensions showed the need to distinguish between the multiple sub layers beneath the internetwork layer.
Consider, for example, an interface with PPP running over an HDLC link which uses a RS232 like connector.
Each of these sub layers has its own media specific MIB module.
The latest definition of the 'interfaces' group in the IF MIB [17] satisfies this need by having each sub layer be represented by its own conceptual row in the ifTable.
It also defines an additional MIB table, the ifStackTable, to identify the "superior" and "subordinate" sub layers through ifIndex "pointers" to the appropriate conceptual rows in the ifTable.
Each conceptual row in the ifStackTable represents a relationship between two interfaces, where this relationship is that the "higher  layer" interface runs "on top" of the "lower layer" interface.
For example, if a PPP module operated directly over a serial interface, the PPP module would be a "higher layer" to the serial interface, and the serial interface would be a "lower layer" to the PPP module.
This concept of "higher layer" and "lower layer" is the same as embodied in the definitions of the ifTable's packet counters.
The ifStackTable is INDEX ed by the ifIndex values of the two interfaces involved in the relationship.
By necessity, one of these ifIndex values must come first, and the IF MIB chose to have the higher layer interface first, and the lower layer interface second.
Due to this, it is straight forward for a Network Management application to read a subset of the ifStackTable and thereby determine the interfaces which run underneath a particular interface.
However, to determine which interfaces run on top of a particular interface, a Network Management application has no alternative but to read the whole table.
This is very inefficient when querying a device which has many interfaces, and many conceptual rows in its ifStackTable.
This MIB provides an inverted Interfaces Stack Table, the ifInvStackTable.
While it contains no additional information beyond that already contained in the ifStackTable, the ifInvStackTable has the ifIndex values in its INDEX clause in the reverse order, i.e., the lower layer interface first, and the higher layer interface second.
As a result, the ifInvStackTable is an inverted version of the same information contained in the ifStackTable.
Thus, the ifInvStackTable provides an efficient means for a Network Management application to read a subset of the ifStackTable and thereby determine which interfaces run on top of a particular interface.
IF INVERTED STACK MIB DEFINITIONS ::
IMPORTS MODULE IDENTITY, OBJECT TYPE, mib 2
West Tasman Drive San Jose, CA  95134 1706 US 408 526 5260 kzm@cisco.com" DESCRIPTION "The MIB module which provides the Inverted Stack Table for interface sub layers."
The Inverted Interface Stack Group   ifInvStackTable
A table containing information on the relationships between the multiple sub layers of network interfaces.
In particular, it contains information on which sub layers run 'underneath' which other sub layers, where each sub layer corresponds to a conceptual row in the ifTable.
For example, when the sub layer with ifIndex value x runs underneath the sub layer with ifIndex value
y, then this table contains:
ifInvStackStatus.x.y active For each ifIndex value, z, which identifies an active interface, there are always at least two instantiated rows in this table associated with z.
For one of these rows, z is the value of ifStackHigherLayer; for the other, z is the value of ifStackLowerLayer.
(If z is not involved in multiplexing, then these are the only two rows associated with z.)
For example, two rows exist even for an interface which has no others stacked on top or below it:
This table contains exactly the same number of rows as the ifStackTable, but the rows appear in a different order.
Each sub layer corresponds to a conceptual row in the ifTable.
The status of the relationship between two sub layers.
An instance of this object exists for each instance of the ifStackStatus object, and vice versa.
For example, if the variable ifStackStatus.
H.L exists, then the variable ifInvStackStatus.
L.H must also exist, and vice versa.
In addition, the two variables always have the same value.
However, unlike ifStackStatus, the ifInvStackStatus object is NOT write able.
A network management application wishing to change a relationship between sub layers H and L cannot do so by modifying the value of ifInvStackStatus.L.H, but must instead modify the value of ifStackStatus.
After the ifStackTable is modified, the change will be reflected in this table."
MODULE COMPLIANCE STATUS  current DESCRIPTION
"The compliance statement for SNMP entities which provide inverted information on the layering of network interfaces.
} DESCRIPTION "Support is only required for 'active'.
There are no management objects defined in this MIB that have a MAX  ACCESS clause of read write and/or read create.
So, if this MIB is implemented correctly, then there is no risk that an intruder can alter or create any management objects of this MIB via direct SNMP SET operations.
by itself is not a secure environment.
Even if the network itself is secure (for example by using IPSec), even then, there is no control as to who on the secure network is allowed to access and
the objects in this MIB.
It is recommended that the implementers consider the security features as provided by the SNMPv3 framework.
Specifically, the use of the User based Security Model RFC 2574 [12] and the View  based Access Control Model RFC 2575
It is then a customer/user responsibility to ensure that the SNMP entity giving access to an instance of this MIB, is properly configured to give access to the objects only to those principals (users) that have legitimate rights to indeed GET or SET
