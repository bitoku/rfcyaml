- title: __initial_text__
  contents:
  - '    Customizing DHCP Configuration on the Basis of Network Topology

    '
- title: Abstract
  contents:
  - "Abstract\n   DHCP servers have evolved over the years to provide significant\n\
    \   functionality beyond that described in the DHCP base specifications.\n   One\
    \ aspect of this functionality is support for context-specific\n   configuration\
    \ information.  This memo describes some such features\n   and explains their\
    \ operation.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7969.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Identifying Client's Location by DHCP Servers . . . . .\
    \ . . .   3\n     3.1.  DHCPv4-Specific Behavior  . . . . . . . . . . . . . .\
    \ . .   7\n     3.2.  DHCPv6-Specific Behavior  . . . . . . . . . . . . . . .\
    \ .   7\n   4.  Simple Subnetted Network  . . . . . . . . . . . . . . . . . .\
    \  10\n   5.  Relay Agent Running on a Host . . . . . . . . . . . . . . . .  12\n\
    \   6.  Cascaded Relays . . . . . . . . . . . . . . . . . . . . . . .  12\n  \
    \ 7.  Regional Configuration Example  . . . . . . . . . . . . . . .  13\n   8.\
    \  Multiple Subnets on the Same Link . . . . . . . . . . . . . .  15\n   9.  Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .  16\n   10. References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  17\n     10.1.  Normative\
    \ References . . . . . . . . . . . . . . . . . .  17\n     10.2.  Informative\
    \ References . . . . . . . . . . . . . . . . .  18\n   Acknowledgements  . . .\
    \ . . . . . . . . . . . . . . . . . . . . .  20\n   Authors' Addresses  . . .\
    \ . . . . . . . . . . . . . . . . . . . .  20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The DHCPv4 [RFC2131] and DHCPv6 [RFC3315] protocol specifications\n\
    \   describe how addresses can be allocated to clients based on network\n   topology\
    \ information provided by the DHCP relay infrastructure.\n   Address allocation\
    \ decisions are integral to the allocation of\n   addresses and prefixes in DHCP.\n\
    \   The DHCP protocol also describes mechanisms for provisioning devices\n   with\
    \ additional configuration information, for example, DNS [RFC1034]\n   server\
    \ addresses, default DNS search domains, and similar\n   information.\n   Although\
    \ it was the intent of the authors of these specifications\n   that DHCP servers\
    \ would provision devices with configuration\n   information appropriate to each\
    \ device's location on the network,\n   this practice was never documented, much\
    \ less described in detail.\n   Existing DHCP server implementations do in fact\
    \ provide such\n   capabilities; the goal of this document is to describe those\n\
    \   capabilities for the benefit of both operators and protocol designers\n  \
    \ who may wish to use DHCP as a means for configuring their own\n   services but\
    \ may not be aware of the capabilities provided by most\n   modern DHCP servers.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   o  CPE device: Customer Premise Equipment device.  Typically\
    \ a router\n      belonging to the customer that connects directly to the provider\n\
    \      link.\n   o  DHCP, DHCPv4, and DHCPv6: DHCP refers to the Dynamic Host\n\
    \      Configuration Protocol in general and applies to both DHCPv4 and\n    \
    \  DHCPv6.  The terms DHCPv4 and DHCPv6 are used in contexts where it\n      is\
    \ necessary to avoid ambiguity and explain differences.\n   o  PE router: Provider\
    \ Edge router.  The provider router closest to\n      the customer.\n   o  Routable\
    \ IP address: An IP address with a scope of use wider than\n      the local link.\n\
    \   o  Shared subnet: A case where two or more subnets of the same\n      protocol\
    \ family are available on the same link.  'Shared subnet'\n      terminology is\
    \ typically used in Unix environments.  It is\n      typically called 'multinet'\
    \ in the Windows environment.  The\n      administrative configuration inside\
    \ a Microsoft DHCP server is\n      called 'DHCP Superscope'.\n   o  Link or local\
    \ link: A layer 2 network link, as defined in\n      Section 1.2 of [RFC3297].\n\
    \   o  Link subset: A portion of a link containing a subset of all the\n     \
    \ connection points on that link, which may be used to finely\n      determine\
    \ the physical location of a set of clients or may be used\n      to determine\
    \ topology to a finer degree of detail than the set of\n      all locations at\
    \ which that particular link is available.  The\n      smallest link subset is\
    \ a single link attachment point, for\n      example, a port on a layer 2 switch.\n"
- title: 3.  Identifying Client's Location by DHCP Servers
  contents:
  - "3.  Identifying Client's Location by DHCP Servers\n   Figure 1 illustrates a\
    \ small hierarchy of network links with Link D\n   serving as a backbone to which\
    \ the DHCP server is attached.\n   Figure 2 illustrates a more complex case. \
    \ Although some of its\n   aspects are unlikely to be seen in actual production\
    \ networks, they\n   are beneficial for explaining finer aspects of the DHCP protocols.\n\
    \   Note that some nodes act as routers (which forward all IP traffic)\n   and\
    \ some are relay agents (i.e., they run DHCP-specific software that\n   forwards\
    \ only DHCP traffic).\n              Link A                   Link B\n       \
    \    |===+===========|    |===========+======|\n               |             \
    \               |\n               |                            |\n           +---+---+\
    \                    +---+---+\n           | relay |                    | relay\
    \ |\n           |   A   |                    |   B   |\n           +---+---+ \
    \                   +---+---+\n               |                            |\n\
    \               |       Link C               |\n           |===+==========+=================+======|\n\
    \                          |\n                          |\n                  \
    \   +----+---+        +--------+\n                     | router |        |  DHCP\
    \  |\n                     |    A   |        | Server |\n                    \
    \ +----+---+        +----+---+\n                          |                 |\n\
    \                          |                 |\n                          |  \
    \ Link D        |\n           |==============+=================+======|\n    \
    \                      |\n                          |\n                     +----+---+\n\
    \                     | router |\n                     |    B   |\n          \
    \           +----+---+\n                          |\n                        \
    \  |\n           |===+==========+=================+======|\n               | \
    \      Link E               |\n               |                            |\n\
    \           +---+---+                    +---+---+\n           | relay |     \
    \               | relay |\n           |   C   |                    |   D   |\n\
    \           +---+---+                    +---+---+\n               |         \
    \                   |\n               |                            |\n       \
    \    |===+===========|    |===========+======|\n              Link F         \
    \          Link G\n        Figure 1: A Simple Network with a Small Hierarchy of\
    \ Links\n              Link A                   Link B            Link H\n   \
    \        |===+==========|    |=========+======|  |======+======|\n           \
    \    |                         |                |\n               |          \
    \               |                |\n           +---+---+                 +---+---+\
    \        +---+---+\n           | relay |                 | relay |        | relay\
    \ |\n           |   A   |                 |   B   |        |   G   |\n       \
    \    +---+---+                 +---+---+        +---+---+\n               |  \
    \                       |                |\n               |       Link C    \
    \        |                | Link J\n           |===+==========+==============+======|\
    \  |======+======|\n                          |                              \
    \ |\n                          |                               |\n           \
    \          +----+---+        +--------+     +---+---+\n                     |\
    \ router |        |  DHCP  |     | relay |\n                     |    A   |  \
    \      | Server |     |   F   |\n                     +----+---+        +----+---+\
    \     +---+---+\n                          |                 |             |\n\
    \                          |                 |             |\n               \
    \           |   Link D        |             |\n           |==============+=========+=======+=============+======|\n\
    \                          |         |\n                          |         |\n\
    \                     +----+---+ +---+---+\n                     | router | |\
    \ relay |\n                     |    B   | |   E   |\n                     +----+---+\
    \ +---+---+\n                          |         |\n                         \
    \ |         |\n           |===+==========+=========+=======+======|\n        \
    \       |       Link E               |\n               |                     \
    \       |\n           +---+---+                    +---+---+\n           | relay\
    \ |                    | relay |\n           |   C   |                    |  \
    \ D   |\n           +---+---+                    +---+---+\n               | \
    \                           |\n               |                            |\n\
    \           |===+===========|    |===========+======|\n              Link F  \
    \                 Link G\n                         Figure 2: Complex Network\n\
    \   These diagrams allow us to represent a variety of different network\n   configurations\
    \ and illustrate how existing DHCP servers can provide\n   configuration information\
    \ customized to the particular location from\n   which a client is making its\
    \ request.\n   It is important to understand the background of how DHCP works\
    \ when\n   considering those diagrams.  It is assumed that the DHCP clients may\n\
    \   not have routable IP addresses when they are attempting to obtain\n   configuration\
    \ information.\n   The reason for making this assumption is that one of the functions\
    \ of\n   DHCP is to bootstrap the DHCP client's IP address configuration.  If\n\
    \   the client does not yet have an IP address configured, it cannot\n   route\
    \ packets to an off-link DHCP server; therefore, some kind of\n   relay mechanism\
    \ is required.\n   The details of how packet delivery between clients and servers\
    \ works\n   are different between DHCPv4 and DHCPv6, but the essence is the same:\n\
    \   whether or not the client actually has an IP configuration, it\n   generally\
    \ communicates with the DHCP server by sending its requests\n   to a DHCP relay\
    \ agent on the local link; this relay agent, which has\n   a routable IP address,\
    \ then forwards the DHCP requests to the DHCP\n   server (directly or via other\
    \ relays).  In later stages of the\n   configuration, when the client has acquired\
    \ an address and certain\n   conditions are met, it is possible for the client\
    \ to send packets\n   directly to the server, thus bypassing the relays.  The\
    \ conditions\n   for such behavior are different for DHCPv4 and DHCPv6 and are\n\
    \   discussed in Sections 3.1 and 3.2.\n   To determine the client's point of\
    \ attachment and link-specific\n   configuration, the server typically uses the\
    \ client-facing IP address\n   of the relay agent.  In some cases, the server\
    \ may use the routable\n   IP address of the client if the client has the routable\
    \ IP address\n   assigned to its interface and it is transmitted in the DHCP message.\n\
    \   The server is then able to determine the client's point of attachment\n  \
    \ and select the appropriate subnet- or link-specific configuration.\n   Sometimes\
    \ it is useful for the relay agents to provide additional\n   information about\
    \ the topology.  A number of extensions have been\n   defined for this purpose.\
    \  The specifics are different, but the core\n   principle remains the same: the\
    \ relay agent knows exactly where the\n   original request came from, so it provides\
    \ an identifier that will\n   help the server to choose appropriate address pool\
    \ and configuration\n   parameters.  Examples of such options are mentioned in\
    \ the following\n   sections.\n   Finally, clients may be connected to the same\
    \ link as the server, so\n   no relay agents are required.  In such cases, the\
    \ DHCPv4 server\n   typically uses the IPv4 address assigned to the network interface\n\
    \   over which the transmission was received to select an appropriate\n   subnet.\
    \  This is more complicated for DHCPv6, as the DHCPv6 server is\n   not required\
    \ to have any globally unique addresses.  In such cases,\n   additional configuration\
    \ information may need to be required.  Some\n   servers allow indicating that\
    \ a given subnet is directly reachable\n   over a specific local network interface.\n"
- title: 3.1.  DHCPv4-Specific Behavior
  contents:
  - "3.1.  DHCPv4-Specific Behavior\n   In some cases in DHCPv4, when a DHCPv4 client\
    \ has a routable IPv4\n   address, the message is unicast to the DHCPv4 server\
    \ rather than\n   going through a relay agent.  Examples of such transmissions\
    \ are\n   renewal (DHCPREQUEST) and address release (DHCPRELEASE).\n   The relay\
    \ agent that receives the client's message sets the giaddr\n   field to the address\
    \ of the network interface the message was\n   received on.  The relay agent may\
    \ insert a relay agent option\n   [RFC3046].\n   There are several options defined\
    \ that are useful for subnet\n   selection in DHCPv4.  [RFC3527] defines the Link\
    \ Selection sub-option\n   that is inserted by a relay agent.  This option is\
    \ particularly\n   useful when the relay agent needs to specify the subnet/link\
    \ on which\n   a DHCPv4 client resides, which is different from an IP address\
    \ that\n   can be used to communicate with the relay agent.  The Virtual Subnet\n\
    \   Selection (VSS) sub-option, specified in [RFC6607], can also be added\n  \
    \ by a relay agent to specify information in a VPN environment.  In\n   certain\
    \ cases, it is useful for the client itself to specify the\n   Virtual Subnet\
    \ Selection option, e.g., when there are no relay agents\n   involved during the\
    \ VPN setup process.\n   Another option that may influence the subnet selection\
    \ is the IPv4\n   Subnet Selection option, defined in [RFC3011], which allows\
    \ the\n   client to explicitly request allocation from a given subnet.\n"
- title: 3.2.  DHCPv6-Specific Behavior
  contents:
  - "3.2.  DHCPv6-Specific Behavior\n   In DHCPv6, unicast communication is possible\
    \ in cases where the\n   server is configured with a Server Unicast option (see\
    \ Section 22.12\n   in [RFC3315]) and clients are able to take advantage of it.\
    \  In such\n   cases, once a client is assigned a (presumably global) address,\
    \ it is\n   able to contact the server directly, bypassing any relays.  It should\n\
    \   be noted that such a mode is completely controllable by\n   administrators\
    \ in DHCPv6.  (They may simply choose to not configure\n   the Server Unicast\
    \ option, thus forcing clients to always send their\n   messages via relay agents\
    \ in every case).\n   The DHCPv6 protocol [RFC3315] defines two core mechanisms\
    \ that allow\n   a server to distinguish which link the relay agent is connected\
    \ to.\n   The first mechanism is the link-address field in the Relay-forward\n\
    \   and Relay-reply messages.  The link-address field uniquely identifies\n  \
    \ the link and should not be mistaken for a link-local address.  In\n   normal\
    \ circumstances, this is the solution that is easiest to\n   maintain, as existing\
    \ address assignments can be used and no\n   additional administrative actions\
    \ (like assigning dedicated\n   identifiers for each relay agent, making sure\
    \ they are unique, and\n   maintaining a list of such identifiers) are needed.\
    \  It requires,\n   however, for the relay agent to have an address with a scope\
    \ larger\n   than link-local configured on its client-facing interface.\n   The\
    \ second mechanism uses an Interface-ID option (see Section 22.18\n   of [RFC3315])\
    \ inserted by the relay agent, which identifies the link\n   that the client is\
    \ connected to.  This mechanism may be used when the\n   relay agent does not\
    \ have a globally unique address or Unique Local\n   Address (ULA) [RFC4193] configured\
    \ on its client-facing interface,\n   thus making the first mechanism not feasible.\
    \  If the interface-id is\n   unique within an administrative domain, the interface-id\
    \ value may be\n   used to select the appropriate subnet.  As there is no guarantee\
    \ for\n   the uniqueness ([RFC3315] only mandates the interface-id to be unique\n\
    \   within a single relay agent context), it is up to the administrator\n   to\
    \ check whether the relay agents deployed use unique interface-id\n   values.\
    \  If the interface-id values are not unique, the Interface-ID\n   option cannot\
    \ be used to determine the client's point of attachment.\n   It should be noted\
    \ that Relay-forward and Relay-reply messages are\n   exchanged between relays\
    \ and servers only.  Clients are never exposed\n   to those messages.  Also, servers\
    \ never receive Relay-reply messages.\n   Relay agents must be able to process\
    \ both Relay-forward (sending an\n   already relayed message further towards the\
    \ server when there is more\n   than one relay agent in a chain) and Relay-reply\
    \ (sending back the\n   response towards the client when there is more than one\
    \ relay agent\n   in a chain).\n   For completeness, we also mention an uncommon\
    \ but valid case where\n   relay agents use a link-local address in the link-address\
    \ field in\n   relayed Relay-forward messages.  This may happen if the relay agent\n\
    \   doesn't have any address with a larger scope on the interface\n   connected\
    \ to that specific link.  Even though link-local addresses\n   cannot be automatically\
    \ used to associate the relay agent with a\n   given link, with additional configuration\
    \ information, the server may\n   still be able to select the proper link.\n \
    \  This requires that the DHCP server has a way of associating a\n   particular\
    \ link-local address with a particular link.  The network\n   administrator can\
    \ then explicitly configure the DHCP server to\n   recognize that the particular\
    \ link-address field in a relay message\n   refers to that link.\n   There are\
    \ two ways that this can work.  One is that the DHCP server\n   can provide a\
    \ mechanism that explicitly associates the link-local\n   address with a link.\
    \  In this case, the network administrator simply\n   determines the link-local\
    \ address of the relay agent on a particular\n   link, which we are presuming\
    \ to be stable, and configures an\n   association between that address and the\
    \ link.\n   If the DHCP server doesn't explicitly provide such a mechanism, it\n\
    \   may still provide a \"shared subnet\" mechanism (see Section 8).  If it\n\
    \   does, the shared subnet mechanism can be used to explicitly associate\n  \
    \ a link-local address with a link.  To do this, the network\n   administrator\
    \ creates a shared subnet association for the link, if\n   one does not already\
    \ exist.  The network administrator then\n   configures a /128 subnet that contains\
    \ just the link-local address of\n   the relay agent.  The administrator then\
    \ adds this new /128 to the\n   shared subnet.  Now, when a DHCP message comes\
    \ in with that link-\n   layer address in the link-address field, the correct\
    \ shared network\n   will be selected.\n   DHCPv6 also has support for more finely\
    \ grained link identification\n   using Lightweight DHCPv6 Relay Agents (LDRAs)\
    \ [RFC6221].  In this\n   case, the link-address field is set to an unspecified\
    \ address (::),\n   but the DHCPv6 server also receives an Interface-ID option\
    \ from the\n   relay agent that can be used to more precisely identify the client's\n\
    \   location on the network.  It is possible to mix LDRA and regular\n   relay\
    \ agents in the same network.  See Sections 7.2 and 7.3 in\n   [RFC6221] for detailed\
    \ examples.\n   What this means in practice is that the DHCP server has sufficient\n\
    \   information in all cases to pinpoint the link to which the client is\n   connected.\
    \  In some cases, it may additionally be possible to\n   pinpoint the particular\
    \ link subset to which the client is connected.\n   In all cases, then, the DHCPv6\
    \ server will have a link-identifying IP\n   address, and in some cases, it may\
    \ also have a link-specific\n   identifier (e.g., the Interface-ID option or the\
    \ Link Address option\n   defined in Section 5 of [RFC6977]).  It should be noted\
    \ that the\n   link-specific identifier is unique only within the scope of the\
    \ link-\n   identifying IP address.  For example, the link-specific identifier\
    \ of\n   \"eth0\" assigned to a relay agent using IPv6 address 2001:db8::1 is\n\
    \   distinct from an \"eth0\" identifier used by a different relay agent\n   with\
    \ address 2001:db8::2.\n   It is also possible for link-specific identifiers to\
    \ be nested so\n   that the actual identifier that identifies the specific link\
    \ subset\n   is an aggregate of two or more identifiers sent by a set of LDRAs\
    \ in\n   a chain; in general, this functions exactly as if a single identifier\n\
    \   were received from a single LDRA, so we do not treat it specially in\n   the\
    \ discussion below, but sites that use chained LDRA configurations\n   will need\
    \ to be aware of this when configuring their DHCPv6 servers.\n   The Virtual Subnet\
    \ Selection options, present in DHCPv4, are also\n   defined for DHCPv6.  The\
    \ use case is the same as in DHCPv4: the relay\n   agent inserts VSS options that\
    \ can help the server to select the\n   appropriate subnet with its address pool\
    \ and associated configuration\n   options.  See [RFC6607] for details.\n"
- title: 4.  Simple Subnetted Network
  contents:
  - "4.  Simple Subnetted Network\n   Consider Figure 1 in the context of a simple\
    \ subnetted network.  In\n   this network, there are four leaf subnets on which\
    \ DHCP clients will\n   be configured: Links A, B, F, and G.  Relays A, B, C,\
    \ and D in this\n   example are represented in the diagram as IP routers with\
    \ an embedded\n   relay function, because this is a very typical configuration,\
    \ but the\n   relay function can also be provided in a separate node on each link.\n\
    \   In a simple network like this, there may be no need for link-specific\n  \
    \ configuration in DHCPv6, since local routing information is delivered\n   through\
    \ router advertisements.  However, in IPv4, it is very typical\n   to configure\
    \ the default route using DHCP; in this case, the default\n   route will be different\
    \ on each link.  In order to accomplish this,\n   the DHCP server will need link-specific\
    \ configuration for the default\n   route.\n   To illustrate, we will use an example\
    \ from a hypothetical DHCP server\n   that uses a simple JSON notation [RFC7159]\
    \ for configuration.\n   Although we know of no DHCP server that uses this specific\
    \ syntax,\n   most modern DHCP servers provide similar functionality.\n   {\n\
    \       \"prefixes\": {\n           \"192.0.2.0/26\": {\n               \"options\"\
    : {\n                   \"routers\": [\"192.0.2.1\"]\n               },\n    \
    \           \"on-link\": [\"A\"]\n           },\n           \"192.0.2.64/26\"\
    : {\n               \"options\": {\n                   \"routers\": [\"192.0.2.65\"\
    ]\n               },\n               \"on-link\": [\"B\"]\n           },\n   \
    \        \"192.0.2.128/26\": {\n               \"options\": {\n              \
    \     \"routers\": [\"192.0.2.129\"]\n               },\n               \"on-link\"\
    : [\"F\"]\n           },\n           \"192.0.2.192/26\": {\n               \"\
    options\": {\n                   \"routers\": [\"192.0.2.193\"]\n            \
    \   },\n               \"on-link\": [\"G\"]\n           }\n       }\n   }\n  \
    \                    Figure 3: Configuration Example\n   In Figure 3, we see a\
    \ configuration example for this scenario: a set\n   of prefixes, each of which\
    \ has a set of options and a list of links\n   for which it is on-link.  We have\
    \ defined one option for each prefix:\n   a routers option.  This option contains\
    \ a list of values; each list\n   only has one value, and that value is the IP\
    \ address of the router\n   specific to the prefix.\n   When the DHCP server receives\
    \ a request, it searches the list of\n   prefixes for one that encloses the link-identifying\
    \ IP address\n   provided by the client or relay agent.  The DHCP server then\
    \ examines\n   the options list associated with that prefix and returns those\n\
    \   options to the client.\n   So, for example, a client connected to Link A in\
    \ the example would\n   have a link-identifying IP address within the 192.0.2.0/26\
    \ prefix, so\n   the DHCP server would match it to that prefix.  Based on the\n\
    \   configuration, the DHCP server would then return a routers option\n   containing\
    \ a single IP address: 192.0.2.1.  A client on Link F would\n   have a link-identifying\
    \ address in the 192.0.2.128/26 prefix and\n   would receive a routers option\
    \ containing the IP address 192.0.2.129.\n"
- title: 5.  Relay Agent Running on a Host
  contents:
  - "5.  Relay Agent Running on a Host\n   A relay agent is DHCP software that may\
    \ be run on any IP node.\n   Although it is typically run on a router, this is\
    \ by no means\n   required by the DHCP protocol.  The relay agent is simply a\
    \ service\n   that operates on a link, receiving link-local multicasts (IPv6)\
    \ or\n   broadcasts (IPv4) and relaying them, using IP routing, to a DHCP\n  \
    \ server.  As long as the relay has an IP address on the link and a\n   default\
    \ route or a more specific route through which it can reach a\n   DHCP server,\
    \ it need not be a router or even have multiple\n   interfaces.\n   A relay agent\
    \ can be run on a host connected to two links.  That case\n   is presented in\
    \ Figure 2.  There is router B that is connected to\n   Links D and E.  At the\
    \ same time, there is also a host that is\n   connected to the same links.  The\
    \ relay agent software is running on\n   that host.  That is uncommon but is a\
    \ valid configuration.\n"
- title: 6.  Cascaded Relays
  contents:
  - "6.  Cascaded Relays\n   Let's observe another case, shown in Figure 2.  Note\
    \ that in this\n   configuration, the clients connected to Link G will send their\n\
    \   requests to relay D, which will forward its packets directly to the\n   DHCP\
    \ server.  That is typical but not the only possible\n   configuration.  It is\
    \ possible to configure relay agent D to forward\n   client messages to relay\
    \ E, which in turn will send them to the DHCP\n   server.  This configuration\
    \ is sometimes referred to as \"cascaded\n   relay agents\".\n   Note that the\
    \ relaying mechanism works differently in DHCPv4 and in\n   DHCPv6.  In DHCPv4,\
    \ only the first relay is able to set the giaddr\n   field in the DHCPv4 packet.\
    \  Any following relays that receive that\n   packet will not change it as the\
    \ server needs giaddr information from\n   the first relay (i.e., the closest\
    \ to the client).  The server will\n   send the response back to the giaddr address,\
    \ which is the address of\n   the first relay agent that saw the client's message.\
    \  That means that\n   the client messages travel on a different path than the\
    \ server's\n   responses.  A message from a client connected to Link G will pass\n\
    \   through relay D, then through relay E, to reach the server.  A\n   response\
    \ message will be sent from the server to relay D via router\n   B, and relay\
    \ D will send it to the client on Link G.\n   Relaying in DHCPv6 is more structured.\
    \  Each relay agent encapsulates\n   a packet that is destined to the server and\
    \ sends it towards the\n   server.  Depending on the configuration, that can be\
    \ a server's\n   unicast address, a multicast address, or the next relay agent\n\
    \   address.  The next relay repeats the encapsulation process.  Although\n  \
    \ the resulting packet is more complex (may have up to 32 levels of\n   encapsulation\
    \ if the packet traveled through 32 relays), every relay\n   may insert its own\
    \ options, and it is clear which relay agent\n   inserted which option.\n"
- title: 7.  Regional Configuration Example
  contents:
  - "7.  Regional Configuration Example\n   In the Figure 2 example, Link C is a regional\
    \ backbone for an ISP.\n   Link E is also a regional backbone for that ISP.  Relays\
    \ A, B, C, and\n   D are PE routers, and Links A, B, F, and G are actually link\n\
    \   aggregators with individual layer 2 circuits to each customer -- for\n   example,\
    \ the relays might be Digital Subscriber Line Access\n   Multiplexers (DSLAMs)\
    \ or cable head-end systems.  At each customer\n   site, we assume there is a\
    \ single CPE device attached to the link.\n   We further assume that Links A,\
    \ B, F, and G are each addressed by a\n   single prefix, although it would be\
    \ equally valid for each CPE device\n   to be numbered on a separate prefix.\n\
    \   In a real-world deployment, there would likely be many more than two\n   PE\
    \ routers connected to each regional backbone; we have kept the\n   number small\
    \ for simplicity.\n   In the example presented in Figure 4, the goal is to configure\
    \ all\n   the devices within a region with server addresses local to that\n  \
    \ region, so that service traffic does not have to be routed between\n   regions\
    \ unnecessarily.\n"
- title: '{'
  contents:
  - "{\n    \"prefixes\": {\n        \"2001:db8::/40\": {\n            \"on-link\"\
    : [\"A\"]\n        },\n        \"2001:db8:100::/40\": {\n            \"on-link\"\
    : [\"B\"]\n        },\n        \"2001:db8:200::/40\": {\n            \"on-link\"\
    : [\"F\"]\n        },\n        \"2001:db8:300::/40\": {\n            \"on-link\"\
    : [\"G\"]\n        }\n    },\n    \"links\": {\n        \"A\": {\"region\": \"\
    omashu\"},\n        \"B\": {\"region\": \"omashu\"},\n        \"F\": {\"region\"\
    : \"gaoling\"},\n        \"G\": {\"region\": \"gaoling\"}\n    },\n   \"regions\"\
    : {\n       \"omashu\": {\n           \"options\": {\n               \"SIP Server\"\
    : [\"sip.omashu.example.org\"],\n               \"DNS Recursive Name Server\"\
    : [\"dns1.omashu.example.org\",\n                               \"dns2.omashu.example.org\"\
    ]\n           }\n       },\n       \"gaoling\": {\n           \"options\": {\n\
    \               \"SIP Server\": [\"sip.gaoling.example.org\"],\n             \
    \  \"DNS Recursive Name Server\": [\"dns1.gaoling.example.org\",\n           \
    \                    \"dns2.gaoling.example.org\"]\n           }\n        }\n\
    \    }\n"
- title: '}'
  contents:
  - "}\n                 Figure 4: Regional Configuration Example\n   In this example,\
    \ when a request comes in to the DHCPv6 server with a\n   link-identifying IP\
    \ address in the 2001:db8::/40 prefix, it is\n   identified as being on Link A.\
    \  The DHCPv6 server then looks on the\n   list of links to see what region the\
    \ client is in.  Link A is\n   identified as being in omashu.  The DHCPv6 server\
    \ then looks up\n   omashu in the set of regions and discovers a list of region-specific\n\
    \   options.\n   The DHCPv6 server then resolves the domain names listed in the\n\
    \   options and sends a SIP Server option containing the IP addresses\n   that\
    \ the resolver returned for sip.omashu.example.org and a DNS\n   Recursive Name\
    \ Server option containing the IP addresses returned by\n   the resolver for dns1.omashu.example.org\
    \ and dns2.omashu.example.org.\n   Depending on the server capability and configuration,\
    \ it may cache\n   resolved responses for a specific period of time, repeat queries\n\
    \   every time, or even keep the response until reconfiguration or\n   shutdown.\
    \  For more detailed discussion, see Section 7 of [RFC7227].\n   Similarly, if\
    \ the DHCPv6 server receives a request from a DHCPv6\n   client where the link-identifying\
    \ IP address is contained by the\n   prefix 2001:db8:300::/40, then the DHCPv6\
    \ server identifies the\n   client as being connected to Link G.  The DHCPv6 server\
    \ then\n   identifies Link G as being in the gaoling region and returns the SIP\n\
    \   Server and DNS Recursive Name Server options specific to that region.\n  \
    \ As with the previous example, the exact configuration syntax and\n   structure\
    \ shown above does not precisely match what existing DHCPv6\n   servers do, but\
    \ the behavior illustrated in this example can be\n   accomplished with most existing\
    \ modern DHCPv6 servers.\n"
- title: 8.  Multiple Subnets on the Same Link
  contents:
  - "8.  Multiple Subnets on the Same Link\n   There are scenarios where there is\
    \ more than one subnet from the same\n   protocol family (i.e., two or more IPv4\
    \ subnets or two or more IPv6\n   subnets) configured on the same link.  Such\
    \ a configuration is often\n   referred to as 'shared subnets' in Unix environments\
    \ or 'multinet' in\n   Microsoft terminology.\n   The most frequently mentioned\
    \ use case is a network renumbering where\n   some services are migrated to the\
    \ new addressing scheme, but some\n   aren't yet.\n   A second example is expanding\
    \ the allocation space.  In DHCPv4 and\n   for DHCPv6 Prefix Delegation, there\
    \ could be cases where multiple\n   subnets are needed, because a single subnet\
    \ may be too small to\n   accommodate the client population.\n   The third use\
    \ case covers allocating addresses (or delegation\n   prefixes) that are not the\
    \ same as topological information.  For\n   example, the link-address is on prefix\
    \ X, and the addresses to be\n   assigned are on prefix Y.  This could be based\
    \ on differentiating\n   information (i.e., whether the device is a CPE or cable\
    \ modem in the\n   Data Over Cable Service Interface Specification (DOCSIS)) or\
    \ just\n   because the link-address/giaddr is different from the actual\n   allocation\
    \ space.\n   The fourth use case is a cable network, where cable modems and the\n\
    \   devices connected behind them are connected to the same layer 2 link.\n  \
    \ However, operators want the cable modems and user devices to get\n   addresses\
    \ from distinct address spaces, so users couldn't easily\n   access their modems'\
    \ management interfaces.\n   To support such a configuration, additional differentiating\n\
    \   information is required.  Many DHCP server implementations offer a\n   feature\
    \ that is typically called \"client classification\".  The server\n   segregates\
    \ incoming packets into one or more classes based on certain\n   packet characteristics,\
    \ e.g., the presence or value of certain\n   options or even a match between existing\
    \ options.  Servers require\n   additional information to handle such configuration,\
    \ as they cannot\n   use the topographical property of the relay addresses alone\
    \ to\n   properly choose a subnet.  Exact details of such an operation are not\n\
    \   part of the DHCPv4 or DHCPv6 protocols and are implementation\n   dependent.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This document explains existing practice with\
    \ respect to the use of\n   Dynamic Host Configuration Protocol [RFC2131] and\
    \ Dynamic Host\n   Configuration Protocol Version 6 [RFC3315].  The security\n\
    \   considerations for these protocols are described in their\n   specifications\
    \ and in related documents that extend these protocols.\n   The mechanisms described\
    \ in this document could possibly be exploited\n   by an attacker to misrepresent\
    \ its point of attachment in the\n   network.  This would cause the server to\
    \ assign addresses, prefixes,\n   and other configuration options, which can be\
    \ considered a leak of\n   information.  In particular, this could be used as\
    \ a preliminary\n   stage of an attack when the DHCP server leaks information\
    \ about\n   available services in parts of the network the attacker does not have\n\
    \   access to.\n   There are several ways that such an attack can be prevented.\
    \  First,\n   it is a common practice to filter DHCP traffic passing to clients\n\
    \   within a particular administrative domain from outside of that\n   domain,\
    \ and also to filter DHCP traffic to clients outside of a\n   particular administrative\
    \ domain from within that domain.  Second,\n   the DHCP servers can be configured\
    \ to not respond to traffic that is\n   coming from unknown subnets (i.e., those\
    \ subnets the server is not\n   configured to serve).  Third, some relays provide\
    \ the ability to\n   reject messages that do not fit expected characteristics.\
    \  For\n   example, the Cable Modem Termination System (CMTS) acting as a DHCP\n\
    \   relay detects if the Media Access Control (MAC) address specified in\n   chaddr\
    \ in incoming DHCP messages matches the MAC address of the cable\n   modem it\
    \ came from and can alter its behavior accordingly.  Also,\n   relay agents and\
    \ servers that are connected to clients directly can\n   reject traffic that looks\
    \ as if it has passed a relay (this could\n   indicate the client is attempting\
    \ to spoof a relay, possibly to\n   inject forged relay options).\n   There are\
    \ a number of general DHCP recommendations that should be\n   considered in all\
    \ DHCP deployments.  While not strictly related to\n   the mechanisms described\
    \ in this document, they may be useful in\n   certain deployment scenarios.  [RFC7819]\
    \ and [RFC7824] provide an\n   analysis of privacy problems in DHCPv4 and DHCPv6,\
    \ respectively.  If\n   those are of concern, [RFC7844] offers mitigation steps.\n\
    \   Current DHCPv4 and DHCPv6 standards lack strong cryptographic\n   protection.\
    \  There is an ongoing effort in the DHC working group to\n   address this.  [SECURE-DHCPv6]\
    \ attempts to provide a mechanism for\n   strong authentication and encryption\
    \ between DHCPv6 clients and\n   servers.  [SECURITY-MESSAGES] attempts to improve\
    \ security of\n   exchanges between DHCP relay agents and servers.\n   Another\
    \ possible attack vector is to set up a rogue DHCP server and\n   provide clients\
    \ with false information, either as a denial of service\n   or to execute a man-in-the-middle\
    \ type of attack.  This can be\n   mitigated by deploying DHCPv6-Shield [RFC7610].\n\
    \   Finally, there is an ongoing effort to update the DHCPv6\n   specification,\
    \ which is currently 13 years old.  Sections 21\n   (\"Security Considerations\"\
    ) and 22 (\"Privacy Considerations\") of\n   [DHCPv6bis] contain more recent analysis\
    \ of the security and privacy\n   considerations.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2131]  Droms, R., \"Dynamic Host Configuration\
    \ Protocol\",\n              RFC 2131, DOI 10.17487/RFC2131, March 1997,\n   \
    \           <http://www.rfc-editor.org/info/rfc2131>.\n   [RFC3315]  Droms, R.,\
    \ Ed., Bound, J., Volz, B., Lemon, T., Perkins,\n              C., and M. Carney,\
    \ \"Dynamic Host Configuration Protocol\n              for IPv6 (DHCPv6)\", RFC\
    \ 3315, DOI 10.17487/RFC3315, July\n              2003, <http://www.rfc-editor.org/info/rfc3315>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [DHCPv6bis]\n              Mrugalski, T., Siodelski,\
    \ M., Volz, B., Yourtchenko, A.,\n              Richardson, M., Jiang, S., Lemon,\
    \ T., and T. Winters,\n              \"Dynamic Host Configuration Protocol for\
    \ IPv6 (DHCPv6)\n              bis\", Work in Progress, draft-ietf-dhc-rfc3315bis-05,\
    \ June\n              2016.\n   [RFC1034]  Mockapetris, P., \"Domain names - concepts\
    \ and facilities\",\n              STD 13, RFC 1034, DOI 10.17487/RFC1034, November\
    \ 1987,\n              <http://www.rfc-editor.org/info/rfc1034>.\n   [RFC3011]\
    \  Waters, G., \"The IPv4 Subnet Selection Option for DHCP\",\n              RFC\
    \ 3011, DOI 10.17487/RFC3011, November 2000,\n              <http://www.rfc-editor.org/info/rfc3011>.\n\
    \   [RFC3046]  Patrick, M., \"DHCP Relay Agent Information Option\",\n       \
    \       RFC 3046, DOI 10.17487/RFC3046, January 2001,\n              <http://www.rfc-editor.org/info/rfc3046>.\n\
    \   [RFC3297]  Klyne, G., Iwazaki, R., and D. Crocker, \"Content\n           \
    \   Negotiation for Messaging Services based on Email\",\n              RFC 3297,\
    \ DOI 10.17487/RFC3297, July 2002,\n              <http://www.rfc-editor.org/info/rfc3297>.\n\
    \   [RFC3527]  Kinnear, K., Stapp, M., Johnson, R., and J. Kumarasamy,\n     \
    \         \"Link Selection sub-option for the Relay Agent Information\n      \
    \        Option for DHCPv4\", RFC 3527, DOI 10.17487/RFC3527, April\n        \
    \      2003, <http://www.rfc-editor.org/info/rfc3527>.\n   [RFC4193]  Hinden,\
    \ R. and B. Haberman, \"Unique Local IPv6 Unicast\n              Addresses\",\
    \ RFC 4193, DOI 10.17487/RFC4193, October 2005,\n              <http://www.rfc-editor.org/info/rfc4193>.\n\
    \   [RFC6221]  Miles, D., Ed., Ooghe, S., Dec, W., Krishnan, S., and A.\n    \
    \          Kavanagh, \"Lightweight DHCPv6 Relay Agent\", RFC 6221,\n         \
    \     DOI 10.17487/RFC6221, May 2011,\n              <http://www.rfc-editor.org/info/rfc6221>.\n\
    \   [RFC6607]  Kinnear, K., Johnson, R., and M. Stapp, \"Virtual Subnet\n    \
    \          Selection Options for DHCPv4 and DHCPv6\", RFC 6607,\n            \
    \  DOI 10.17487/RFC6607, April 2012,\n              <http://www.rfc-editor.org/info/rfc6607>.\n\
    \   [RFC6977]  Boucadair, M. and X. Pougnard, \"Triggering DHCPv6\n          \
    \    Reconfiguration from Relay Agents\", RFC 6977,\n              DOI 10.17487/RFC6977,\
    \ July 2013,\n              <http://www.rfc-editor.org/info/rfc6977>.\n   [RFC7159]\
    \  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n             \
    \ Interchange Format\", RFC 7159, DOI 10.17487/RFC7159, March\n              2014,\
    \ <http://www.rfc-editor.org/info/rfc7159>.\n   [RFC7227]  Hankins, D., Mrugalski,\
    \ T., Siodelski, M., Jiang, S., and\n              S. Krishnan, \"Guidelines for\
    \ Creating New DHCPv6 Options\",\n              BCP 187, RFC 7227, DOI 10.17487/RFC7227,\
    \ May 2014,\n              <http://www.rfc-editor.org/info/rfc7227>.\n   [RFC7610]\
    \  Gont, F., Liu, W., and G. Van de Velde, \"DHCPv6-Shield:\n              Protecting\
    \ against Rogue DHCPv6 Servers\", BCP 199,\n              RFC 7610, DOI 10.17487/RFC7610,\
    \ August 2015,\n              <http://www.rfc-editor.org/info/rfc7610>.\n   [RFC7819]\
    \  Jiang, S., Krishnan, S., and T. Mrugalski, \"Privacy\n              Considerations\
    \ for DHCP\", RFC 7819, DOI 10.17487/RFC7819,\n              April 2016, <http://www.rfc-editor.org/info/rfc7819>.\n\
    \   [RFC7824]  Krishnan, S., Mrugalski, T., and S. Jiang, \"Privacy\n        \
    \      Considerations for DHCPv6\", RFC 7824,\n              DOI 10.17487/RFC7824,\
    \ May 2016,\n              <http://www.rfc-editor.org/info/rfc7824>.\n   [RFC7844]\
    \  Huitema, C., Mrugalski, T., and S. Krishnan, \"Anonymity\n              Profiles\
    \ for DHCP Clients\", RFC 7844,\n              DOI 10.17487/RFC7844, May 2016,\n\
    \              <http://www.rfc-editor.org/info/rfc7844>.\n   [SECURE-DHCPv6]\n\
    \              Jiang, S., Li, L., Cui, Y., Jinmei, T., Lemon, T., and D.\n   \
    \           Zhang, \"Secure DHCPv6\", Work in Progress,\n              draft-ietf-dhc-sedhcpv6-14,\
    \ October 2016.\n   [SECURITY-MESSAGES]\n              Volz, B. and Y. Pal, \"\
    Security of Messages Exchanged\n              Between Servers and Relay Agents\"\
    , Work in Progress,\n              draft-volz-dhc-relay-server-security-02, September\
    \ 2016.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to Dave Thaler for suggesting that even though \"\
    everybody\n   knows\" how DHCP servers are deployed in the real world, it might\
    \ be\n   worthwhile to have an IETF document that explains what everybody\n  \
    \ knows, because in reality not everybody is an expert in how DHCP\n   servers\
    \ are administered.  Thanks to Andre Kostur, Carsten Strotmann,\n   Simon Perreault,\
    \ Jinmei Tatuya, Suresh Krishnan, Qi Sun,\n   Jean-Francois Tremblay, Marcin Siodelski,\
    \ Bernie Volz, and Yaron\n   Sheffer for their reviews, comments, and feedback.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ted Lemon\n   Nominum, Inc.\n   800 Bridge Parkway, Suite\
    \ 100\n   Redwood City, CA  94065\n   United States of America\n   Phone: +1-650-381-6000\n\
    \   Email: Ted.Lemon@nominum.com\n   Tomek Mrugalski\n   Internet Systems Consortium,\
    \ Inc.\n   950 Charter Street\n   Redwood City, CA  94063\n   United States of\
    \ America\n   Phone: +1-650-423-1345\n   Email: tomasz.mrugalski@gmail.com\n"
