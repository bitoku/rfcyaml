- title: __initial_text__
  contents:
  - '                 Notification and Subscription for SLP

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Service Location Protocol (SLP) provides mechanisms whereby\n\
    \   service agent clients can advertise and user agent clients can query\n   for\
    \ services.  The design is very much demand-driven, so that user\n   agents only\
    \ obtain service information when they specifically ask for\n   it.  There exists\
    \ another class of user agent applications, however,\n   that requires notification\
    \ when a new service appears or disappears.\n   In the RFC 2608 design, these\
    \ applications are forced to poll the\n   network to catch changes.  In this document,\
    \ we describe a protocol\n   for allowing such clients to be notified when a change\
    \ occurs,\n   removing the need for polling.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Service Location Protocol (SLP) [1] provides a mechanism\
    \ for\n   service agent (SA) clients to advertise network services and for user\n\
    \   agent (UA) clients to find them.  The mechanism is demand-driven.\n   UAs\
    \ obtain service information by actively querying for it, and do\n   not obtain\
    \ any information unless they do so.  While this design\n   satisfies the requirements\
    \ for most applications, there are some\n   applications that require more timely\
    \ information about the\n   appearance or disappearance in the services of interest.\n\
    \   Ideally, these applications would like to be notified when a new\n   service\
    \ comes up or when a service disappears.  In order to obtain\n   this information\
    \ with SLP as described in RFC 2608, such applications\n   must poll the network\
    \ to periodically refresh their local cache of\n   available service advertisements.\n\
    \   An example of such a client is a desktop GUI that wants to display\n   network\
    \ service icons as soon as they appear to provide users with an\n   accurate picture\
    \ of all services available to them.\n   Because polling is inefficient and wasteful\
    \ of network and processor\n   resources, we would like to provide these applications\
    \ a mechanism\n   whereby they can be explicitly notified of changes.  In this\n\
    \   document, we describe a scalable mechanism allowing UAs to be\n   notified\
    \ of changes in service availability.\n"
- title: 2. Notation Conventions
  contents:
  - "2. Notation Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [2].\n"
- title: 3. Terminology
  contents:
  - "3. Terminology\n   In this section, we present some additional terminology beyond\
    \ that\n   in [1] and [3].\n   Notification - A message sent to an interested\
    \ agent informing that\n                  agent that a service has appeared or\
    \ disappeared.\n   Subscription - A request to be informed about changes in service\n\
    \                  availability for a particular service type and scopes.\n"
- title: 4. Design Considerations
  contents:
  - "4. Design Considerations\n   The primary design consideration in a notification\
    \ protocol for SLP\n   is that we would like it to exhibit the same high degree\
    \ of\n   scalability and robustness that the base SLP protocol exhibits.\n   Notification\
    \ should work in small networks with only a few SAs, as\n   well as large enterprise\
    \ networks with thousands of SAs and hundreds\n   of DAs.  Small networks should\
    \ not be required to deploy DAs in order\n   to receive the benefits of notification.\
    \  We also want to assure that\n   notification in large networks does not cause\
    \ heavy processing loads\n   to fall on any one particular SLP agent.  This requires\
    \ that the task\n   of notification be distributed rather than centralized, to\
    \ avoid\n   loading down one agent with doing all the notification work.\n   Finally,\
    \ we would like the notification scheme to be robust in the\n   face of DA failures,\
    \ just as the base SLP design is.\n   An important consideration is that the UA\
    \ clients obtain\n   notifications of SA events in a timely fashion.  If a UA\
    \ has\n   subscribed to notification for a particular service type, the UA\n \
    \  should receive such notification regardless of the state of\n   intervening\
    \ DAs.  SLP is transparent with respect to DAs supporting a\n   particular scope;\
    \ that is, a UA can use any DA with a particular\n   scope and expect to get the\
    \ same service advertisements.\n   Notifications should exhibit the same property.\
    \  Whether or not a UA\n   receives a notification should not depend on the DA\
    \ to which they\n   happen to connect. This preserves the DAs' identity as a pure\
    \ cache.\n   Another goal is that the notification messages contain enough\n \
    \  information about the triggering event that the UA can determine\n   whether\
    \ or not it is of interest in the large majority of cases\n   without having to\
    \ issue another SLP request a priori.  The UA may, of\n   course, issue an SLP\
    \ request for related reasons, but it should not\n   have to issue a request to\
    \ obtain more information on the event that\n   triggered the notification in\
    \ most cases.  This reduces the amount of\n   network traffic related to the event.\n\
    \   In order to simplify implementation, we would like to use similar\n   mechanisms\
    \ for notification in large and small networks.  The\n   mechanisms are not identical,\
    \ obviously, but we want to avoid having\n   radically different mechanisms that\
    \ require completely separate\n   implementations.  Having similar mechanisms\
    \ reduces the amount of\n   code in UA and SA clients.\n   A minor goal is to\
    \ make use of existing SLP message types and\n   mechanisms wherever possible.\
    \  This reduces the amount of code\n   necessary to implement the notification\
    \ mechanism, because much code\n   can be reused between the base SLP and the\
    \ notification mechanism.\n   In particular, we expect to make use of the SLP\
    \ extension mechanism\n   in certain cases to support subscription.\n"
- title: 5. Notification Design Description
  contents:
  - "5. Notification Design Description\n   In order to support scalability, we split\
    \ the design into two parts.\n   A small network design is used when no DAs are\
    \ present in the\n   network.  A large network design is used in networks with\
    \ DAs.  The\n   following subsections describe the two designs.\n"
- title: 5.1 Small Network Design
  contents:
  - "5.1 Small Network Design\n   In networks without DAs, UAs are notified by an\
    \ SA when the SA\n   initially appears, and when the SA disappears.  This allows\
    \ UAs to\n   know about the list of service types the SA supports.  In small\n\
    \   networks, there is no centralized agent available to administer\n   subscriptions\
    \ for newly appearing SAs.  This rules out any kind of\n   subscription design\
    \ in which a UA subscribes to notifications for a\n   particular service type\
    \ in particular scopes of interest, because a\n   newly appearing SA can't tell\
    \ whether or not there are any\n   subscriptions without a centralizing agent\
    \ to tell it.\n   As a result, SAs perform notification when they come on line\
    \ and\n   prior to shutting down regardless of their scope or service type, if\n\
    \   they are capable of performing notification.  This means that a UA\n   receives\
    \ notification of all types of changes for all scopes and\n   service types, and\
    \ consequently must be prepared to filter out those\n   changes in which it is\
    \ not interested (other scopes, other service\n   types).\n   The design requires\
    \ SAs to perform notification by IP multicasting\n   (or broadcasting in IPv4\
    \ if multicast is not available) SLP SrvReg or\n   SrvDereg messages using the\
    \ multicast transmit algorithm described in\n   Section 9.0.  The port number\
    \ for notifications is not the default\n   SLP port, because that port is only\
    \ accessible to privileged users on\n   some operating systems, but rather the\
    \ port 1847, as assigned by\n   IANA.\n   In IPv4, the SA performs multicast on\
    \ the SLP multicast address\n   (239.255.255.253, default TTL 255) and is administratively\
    \ scoped in\n   the same manner as SLP [4].  IPv4 UAs interested in notification\
    \ join\n   the multicast group 239.255.255.253 and listen on port 1847.  In\n\
    \   IPv6, the multicast is performed to the scoped IPv6 addresses for the\n  \
    \ service type advertised, as described in [8].  The SA advertises on\n   all\
    \ addresses up to and including the largest multicast scope that it\n   supports.\
    \  IPv6 UAs interested in notification join the multicast\n   groups corresponding\
    \ to the multicast scopes and service type in\n   which they are interested and\
    \ listen on port 1847.  For example, an\n   IPv6 UA that has access to site local\
    \ scope and is interested in a\n   service type whose hash is 42, calculated according\
    \ to the algorithm\n   in [8], joins the groups FF01:0:0:0:0:0:10042 through\n\
    \   FF05:0:0:0:0:0:10042.\n"
- title: 5.2 Large Network Design
  contents:
  - "5.2 Large Network Design\n   In networks with DAs, a DA supporting a particular\
    \ scope can act as\n   an intermediary for administering UA subscriptions.  A\
    \ subscription\n   consists of a service type and a collection of scopes.  A UA\n\
    \   interested in being notified about changes in a particular service\n   type\
    \ attaches the Subscribe extension to a SrvRqst message sent to\n   the DA.  The\
    \ DA obtains multicast group addresses for notification\n   based on the algorithm\
    \ described in Section 8.0 and puts them into a\n   NotifyAt extension which it\
    \ attaches to the SrvRply.  The UA listens\n   on the group addresses in the reply\
    \ for notifications.\n   When a new subscription comes in, existing SAs are informed\
    \ about the\n   subscription using the following procedure.  The DA compares the\n\
    \   service type and scopes in the new subscription against a list of\n   existing\
    \ subscriptions.  If no previous subscription has the same\n   service type and\
    \ scopes, the DA MUST multicast a DAAdvert, using the\n   multicast transmit algorithm\
    \ described in Section 9.0, and MUST\n   include the NotifyAt extension with the\
    \ multicast group addresses for\n   notification.  If an existing subscription\
    \ covers the same service\n   type and scopes as the new subscription, the DA\
    \ MUST NOT multicast a\n   DAAdvert.\n   A DA MUST keep track of subscriptions\
    \ it has arranged as well as\n   subscriptions arranged by other DAs in any scopes\
    \ with which the DA\n   is configured.  To avoid multiple multicast NotifyAt messages,\
    \ a DA\n   MUST wait a random amount of time, uniformly distributed between 0\n\
    \   and 3 seconds before sending the multicast DAAdvert with NotifyAt.\n   During\
    \ this period, the DA MUST listen for NotifyAt messages that\n   match the one\
    \ from the new subscription.  If a matching NotifyAt is\n   detected, the DA MUST\
    \ not multicast.\n   When a new SA registers with a DA that has existing subscriptions,\n\
    \   the new SA is informed of notifications it should perform using the\n   following\
    \ procedure.  If the service type and scopes in the new SA's\n   SrvReg messages\
    \ match an existing subscription, a NotifyAt containing\n   the multicast addresses\
    \ for notification MUST be included in the\n   SrvAck.  If the SA doesn't support\
    \ notification, it simply ignores\n   the extension.  If the service type and\
    \ scopes in the new SA's SrvReg\n   do not match any existing subscriptions, the\
    \ DA MUST NOT include a\n   NotifyAt.\n   The DA itself MUST also perform notification,\
    \ according to the\n   multicast transmit algorithm, when a service advertisement\
    \ times out.\n   Time-out of a service advertisement results in the DA multicasting\
    \ a\n   SrvDereg for the deregistered URL.  This allows interested UAs to be\n\
    \   informed of the service advertisement's demise even if the SA has\n   disappeared\
    \ without deregistering.  A DA MUST NOT perform\n   notification when it receives\
    \ a SrvReg from an SA, however, that is\n   the job of the SA.\n   As in small\
    \ networks, notification is performed primarily by SAs.  If\n   an SA receives\
    \ a DAAdvert or SrvAck with a NotifyAt extension and the\n   following conditions\
    \ are met:\n           1. The SA supports notification.\n           2. The SA's\
    \ service type matches the service type in the\n              NotifyAt extension.\n\
    \           3. The SA's scopes match one of the scopes of the NotifyAt\n     \
    \         extension.\n   then the SA saves the multicast addresses that correspond\
    \ to the\n   scopes and service types it supports.  The SA MUST perform\n   notification\
    \ immediately after the SA has performed the SrvReg or\n   SrvDereg with the DA.\
    \  An SA that has detected a DA in its scopes\n   MUST NOT multicast any notifications\
    \ unless it receives a NotifyAt\n   extension in a SrvAck with service type and\
    \ scopes matching the SA's\n   service type and scopes.\n"
- title: 6. Subscribe Extension
  contents:
  - "6. Subscribe Extension\n   The Subscribe extension has the following format:\n\
    \     0                   1                   2                   3\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |    Extension Type = 0x0004    |        Extension Length       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | Ex. Len. (ct) | Abs. Type Fl. |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The scope list and service type of the extension are taken from the\n   accompanying\
    \ SrvRqst.  The abstract type flag indicates whether the\n   UA is interested\
    \ in hearing from all SAs advertising concrete\n   instances of an abstract type\
    \ [3], and is only of interest if the\n   service type in the SrvRqst is a concrete\
    \ type.  If the flag is 1,\n   the UA is interested in hearing from all SAs advertising\
    \ concrete\n   types having the same abstract type as the type of the SrvRqst.\
    \  If\n   the flag is 0, the UA is only interested in hearing from SAs\n   supporting\
    \ the particular concrete type in the SrvRqst.  If the\n   service type in the\
    \ accompanying SrvRqst is not a concrete type, the\n   flag is ignored.\n"
- title: 7. NotifyAt Extension
  contents:
  - "7. NotifyAt Extension\n     0                   1                   2       \
    \            3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |    Extension Type = 0x0005    |        Extension Length       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | Ext. Len (ct) |  Subscription Lifetime        |SGL List Len.  \\\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |SGL L. Len (ct)|       Scope/Group List                        \\\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Length of Service Type Name  |        Service Type Name      \\\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The service type name is in the same format as in the SrvRqst.  The\n   scope/group\
    \ list is a list of scope names and multicast group\n   addresses.  The following\
    \ ABNF [5] syntax describes the list:\n        sglist          = sgitem / sgitem\
    \ \",\" sglist\n        sgitem          = scope-name \":\" ip-addr\n        ip-addr\
    \         = ipv4-number | ipv6-number\n        scope-name      =  ; See RFC 2608\
    \ for the format of scope names.\n        ipv4-number     =  1*3DIGIT 3(\".\"\
    \ 1*3DIGIT)\n        ipv6-number     = ;See RFC 2373 [9] Section 2.2\n   An example\
    \ of a scope/group list for IPv4 is:\n        eng:239.255.255.42,corp:239.255.255.43\n\
    \   An example of a scope/group listfor IPv6 is:\n        eng:FF02:0:0:0:0:0:1:1042,corp:FF03:0:0:0:0:0:1:1042\n\
    \   The scope/group list gives the multicast addresses to use for\n   notifications\
    \ involving the service type for the given scopes.\n   The service type name can\
    \ be a simple type name, an abstract type\n   name, or a concrete type name. \
    \ If the name is an abstract type name,\n   all SAs advertising the abstract type\
    \ MUST notify.  If the name is a\n   concrete or simple type name, ONLY those\
    \ SAs advertising the simple\n   or concrete type MUST notify, others MUST NOT\
    \ notify.  A DA that\n   receives a subscription for a concrete type with the\
    \ abstract type\n   flag set, MUST include the abstract type name in all the NotifyAt\n\
    \   messages it sends.  If the DA receives a subscription for a concrete\n   type\
    \ with the abstract type flag not set, the DA MUST NOT include the\n   abstract\
    \ type, but rather MUST include the concrete type name.\n   There are three cases\
    \ in which an agent may receive a NotifyAt\n   extension: in a SrvRply returned\
    \ to a UA, in a multicast DAAdvert,\n   and in a SrvAck returned to an SA.  The\
    \ three subsections below\n   describe the response in each of these cases.\n"
- title: 7.1 NotifyAt received with SrvRply
  contents:
  - "7.1 NotifyAt received with SrvRply\n   When a UA sends a SrvRqst with a Subscribe\
    \ extension, the DA responds\n   with a SrvRply including a NotifyAt.  The DA\
    \ MUST NOT unicast a\n   NotifyAt to a UA with any other message and MUST NOT\
    \ send a NotifyAt\n   unless a SrvRqst with a Subscribe extension was received.\n\
    \   The UA responds by setting up a multicast listener to the group\n   addresses\
    \ included in the extension on the SLP notification port\n   1847.  The UA MAY\
    \ also want to note the expiration lifetime of the\n   subscription assigned by\
    \ the DA, and reissue a  subscription before\n   the lifetime expires.\n"
- title: 7.2 NotifyAt received with Multicast DAAdvert
  contents:
  - "7.2 NotifyAt received with Multicast DAAdvert\n   The DA multicasts a NotifyAt\
    \ with a DAAdvert using the multicast\n   transmit algorithm when a UA has requested\
    \ notification and the\n   scopes and service type in the subscription were not\
    \ previously seen.\n   This message informs existing SAs having the service type\
    \ and scopes\n   in the announcement that they should multicast notifications\
    \ when\n   they shut down.\n   A receiving SA participating in notification responds\
    \ by noting the\n   multicast address if the service type and scopes match.  When\
    \ the SA\n   is about to go down, the SA MUST first unicast a SrvDereg without\n\
    \   attribute tag list to its DAs (as per standard SLP), then it MUST\n   multicast\
    \ the same SrvDereg message according to the multicast\n   transmit algorithm.\
    \  The SA MUST cease performing notification when\n   the subscription lifetime\
    \ expires, unless a subsequent NotifyAt is\n   received prolonging the subscription.\n\
    \   A UA that is performing passive DA detection will naturally also\n   receive\
    \ the extension, but the UA SHOULD ignore the extension.\n"
- title: 7.3 NotifyAt received with SrvAck
  contents:
  - "7.3 NotifyAt received with SrvAck\n   An SA can receive a NotifyAt with a SrvAck\
    \ when it first comes up and\n   registers itself with a DA.  If the DA has any\
    \ subscriptions from UAs\n   for the service type and scopes represented by the\
    \ SA, it MUST return\n   a NotifyAt with the SrvAck.\n   The SA upon receiving\
    \ the NotifyAt immediately multicasts the same\n   SrvReg it sent to the DA, according\
    \ to the multicast transmit\n   algorithm.  The SA MUST only perform the multicast\
    \ algorithm once,\n   even if it registers with more than one DA and receives\
    \ the NotifyAt\n   in reply from more than one.  Prior to its demise and after\n\
    \   deregistering with a DA, the SA MUST notify with the same SrvDereg,\n   as\
    \ described in Section 7.2.\n"
- title: 8. Multicast Address Allocation
  contents:
  - "8. Multicast Address Allocation\n   Enterprise networks that allow SLP notification\
    \ SHOULD deploy the\n   Multicast Address Allocation Architecture (MAAA) including\n\
    \   administratively scoped multicast and Multicast Address Dynamic\n   Client\
    \ Allocation Protocol (MADCAP) [6].\n   If it is not possible to obtain a multicast\
    \ address for use in SLP\n   notifications, the SLP multicast address is used.\n\
    \   If the MAAA infrastructure is deployed, DAs and SAs obtain their\n   scope\
    \ configuration from MADCAP, because the SLP scopes are the same\n   as the MADCAP\
    \ scopes.  Each SLP scope MUST correspond to a multicast\n   scope name, in the\
    \ sense of [6].  In such a case, a DA allocates,\n   using MADCAP, a new multicast\
    \ group address for each new service\n   type/scope pair to which a UA subscribes.\
    \  The allocation is made by\n   MADCAP from the multicast address range for the\
    \ scope.  In this way,\n   only those UAs interested in the service type and scopes\
    \ in the\n   subscription receive the multicast notification.  The DA sets up\
    \ the\n   lease on the multicast address to correspond with the duration of the\n\
    \   subscription.  If the MADCAP server runs out of addresses, the SLP\n   multicast\
    \ group is used as a last resort.\n   For example, if the multicast scope has\
    \ an address range of 239.1.0.0\n   through 239.1.255.255, the notification group\
    \ address for service\n   type X in scope A could be 239.1.0.42 and for service\
    \ type Y in scope\n   B could be 239.1.42.42.\n"
- title: 9. Multicast Transmit Algorithm
  contents:
  - "9. Multicast Transmit Algorithm\n   The DA and SAs use a multicast transmit algorithm\
    \ similar to that\n   used for discovering services in SLP, described in RFC 2608\
    \ [1],\n   except the agent performing the notification doesn't wait for\n   replies.\
    \  The agent performing the notification transmits a\n   notification message\
    \ repeatedly over a period of 15 seconds, backing\n   off exponentially on the\
    \ duration of the time interval between the\n   multicasts.  The rationale for\
    \ this algorithm is to limit the\n   duration and scope of the multicast announcement\
    \ while still\n   repeating the announcement enough times to increase the probability\n\
    \   that one message gets through.\n   For an SA, a notification message is either\
    \ a SrvReg or a SrvDereg\n   message, depending on whether the SA is registering\
    \ a new service or\n   deregistering a service.  When a new service is registered,\
    \ the\n   SrvReg message MUST have the fresh bit set in the SLP header.  The\n\
    \   entire list of attributes for the service SHOULD be included.  The\n   SrvDereg\
    \ message MUST NOT include an attribute tag list.\n   Notifications MUST NOT be\
    \ transmitted at any other time, to minimize\n   multicast traffic.\n   Since\
    \ a SrvReg could contain attribute lists of arbitrary length, the\n   message\
    \ could potentially overflow the packet MTU for UDP.  If an\n   attribute list\
    \ causes a packet MTU overflow, the SA MUST set the\n   overflow bit in the SLP\
    \ header.  The attribute list in the\n   notification message MUST be formatted\
    \ so that a UA can use the\n   attributes even if an overflow occurs.  If a UA\
    \ needs more attributes\n   than are transmitted in the notification message,\
    \ it can contact the\n   SA (if no DA is present) or the DA for the attributes\
    \ it needs.\n   A DA multicasts a DAAdvert when a subscription comes in containing\
    \ a\n   service type and scopes that do not match any on the DA's list of\n  \
    \ known subscriptions.  The same algorithm MUST be used.  If the\n   combination\
    \ of the DA attributes and the NotifyAt message cause the\n   DAAdvert to overflow\
    \ a UDP packet, DA attributes MUST be truncated to\n   allow the NotifyAt to fit\
    \ and the overflow bit MUST be set in the\n   header.  An SA knows that the purpose\
    \ of the message is to inform it\n   of a new subscription rather than for passive\
    \ advertisement, because\n   of the extension, and it can therefore ignore the\
    \ DA attribute list\n   field if the overflow bit is set in the header.  A DA\
    \ also transmits\n   a SrvDereg message when a service advertisement is deregistered\
    \ due\n   to timeout, following the same rules as for an SA.\n"
- title: 10.0 DA Disappearance
  contents:
  - "10.0 DA Disappearance\n   Robustness to DA failure is an important goal of the\
    \ design.  When a\n   DA disappears due to unforeseen circumstances, subscription\n\
    \   information from UAs is lost.  UAs continue to get notifications from\n  \
    \ existing SAs.  However, new SAs will not be informed of the\n   subscription\
    \ unless other DAs also have the subscription information.\n   Because a UA may\
    \ not discover a new DA until it tries to perform an\n   active request, the UA\
    \ could potentially miss the appearance of new\n   services.  For this reason,\
    \ UAs that are concerned about receiving\n   notification of absolutely every\
    \ service that appears SHOULD issue\n   subscriptions to every newly discovered\
    \ DA that supports the scopes\n   it supports.  Similarly, if a DA disappears\
    \ through controlled\n   shutdown, a UA performing passive discovery can detect\
    \ the shutdown\n   and reissue the subscription to an alternate DA.\n   On the\
    \ SA side, when a DA goes down, existing SAs continue to notify\n   until the\
    \ subscription expires.  Before ceasing to notify, an SA MUST\n   determine whether\
    \ the DA is still active and, if not, verify with\n   another DA whether the subscription\
    \ has been extended.  If no other\n   DA is available, the SA MUST ignore the\
    \ subscription expiration time\n   and continue notifying until a new DA is discovered.\
    \  When a new DA\n   is discovered the SA must send a new SrvReg to the DA, according\
    \ to\n   RFC 2608 [1].  The replying SrvAck contains a NotifyAt extension if\n\
    \   the UA has renewed its subscription with the DA.  If the SrvAck does\n   not\
    \ contain a NotifyAt message the SA MUST continue to notify until\n   the subscription\
    \ expires.  If a UA is interested in continuing the\n   notification, it renews\
    \ the subscription with the new DA prior to the\n   expiration  of the old one,\
    \ and so the SA is informed to continue\n   notifying.\n   Note that this procedure\
    \ still does not inform SAs that come up\n   between the time a newly booted DA\
    \ comes up and the time the UA has\n   renewed its subscription with the newly\
    \ booted DA.  If this situation\n   is of concern, multiple DAs can be used to\
    \ assure that all\n   subscriptions are covered when a DA goes down.\n"
- title: 11.  Network Administration Considerations
  contents:
  - "11.  Network Administration Considerations\n   In SLP networks with DAs as described\
    \ in RFC 2608, the only multicast\n   is the SrvRqst for DAAdverts performed during\
    \ active DA discovery,\n   and unsolicited DAAdverts sent periodically by the\
    \ DA for passive\n   discovery.  There is no multicast involved in UA queries\
    \ or SA\n   registrations.  This allows network administrators to set up DAs for\n\
    \   a particular collection of IP subnets and confine all service\n   discovery\
    \ traffic to unicast between the SA and UA clients and the\n   DA.  Administratively\
    \ scoped multicast can additionally be used to\n   limit the extent of active\
    \ DA discovery and passive DA advertising.\n   The amount of multicast involved\
    \ is not high and DHCP DA and scope\n   configuration can be used to limit which\
    \ DAs a particular UA or SA\n   client sees, or to inhibit multicast entirely\
    \ so that UAs and SAs\n   only use configured DAs.\n   With notification, however,\
    \ multicast traffic involving events in SAs\n   becomes available.  Because DAs\
    \ request multicast addresses based on\n   scope and service type, the multicast\
    \ associated with particular\n   events should only propagate to those subnets\
    \ in which UAs and SAs of\n   the same scope are interacting.  Routers should\
    \ be configured with\n   administrative multicast scoping to limit multicast.\
    \  If DAs are not\n   deployed (or the MAAA is not deployed), however, the amount\
    \ of\n   multicast on the SLP multicast address when notifications are being\n\
    \   used could quickly become very large.  Therefore, it is crucial that\n   DAs\
    \ supporting notification be deployed in large networks where UA\n   clients are\
    \ interested in notification.\n"
- title: 12. Security Considerations
  contents:
  - "12. Security Considerations\n   The SrvReg and SrvDereg messages contain authentication\
    \ blocks for\n   all SLP SPIs supported by the DAs with which the SA registers.\
    \  Since\n   these SPIs are necessarily the same as those that UAs can verify,\
    \ a\n   UA receiving a multicast notification is in a position to verify the\n\
    \   notification.  It does so by selecting the authentication block or\n   blocks\
    \ that it can verify.  If authentication fails, either due to\n   lack of an authentication\
    \ block, or lack of the proper SPI, the UA\n   simply discards the notification.\
    \  In a network without DAs, the SPIs\n   of the UA and SA must also match.\n"
- title: 13. IANA Considerations
  contents:
  - "13. IANA Considerations\n   The SLP Notification services use the IANA-assigned\
    \ port number of\n   1847.  The SLP extension identifiers assigned by IANA are\
    \ 0x0004 for\n   Subscribe and 0x0005 for NotifyAt.\n"
- title: 14. Acknowledgements
  contents:
  - "14. Acknowledgements\n   The authors would like to thank Charles Perkins, of\
    \ Nokia, and Erik\n   Guttman and Jonathan Wood, of Sun Microsystems, for their\
    \ stimulating\n   discussion and suggestions during the initial phases of the\n\
    \   subscription/notification design.  We would also like to thank Erik\n   for\
    \ his intense scrutiny of the specification during the later\n   phases.  His\
    \ comments were instrumental in refining the design.\n   Shivaun Albright, of\
    \ HP, motivated simplification of the protocol to\n   focus on initial registration\
    \ and deregistration only.  Vaishali\n   Mithbaokar implemented the simplified\
    \ protocol.\n"
- title: 15. References
  contents:
  - "15. References\n   [1] Guttman, E., Perkins, C., Veizades, J. and M. Day, \"\
    Service\n       Location Protocol\", RFC 2608, July 1999.\n   [2] Bradner, S.,\
    \ \"Key Words for Use in RFCs to Indicate Requirement\n       Levels\", BCP 14,\
    \ RFC 2119, March 1997.\n   [3] Guttman, E., Perkins, C. and J. Kempf, \"Service\
    \ Templates and\n       service: Schemes\", RFC 2609, July 1999.\n   [4] Meyer,\
    \ D., \"Administratively Scoped IP Multicast\", RFC 2365, July\n       1998.\n\
    \   [5] Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n       Specifications:\
    \ ABNF\", RFC 2234, November 1997.\n   [6] Hanna, S., Patel,B. and M. Shah, \"\
    Multicast Address Dynamic\n       Client Allocation Protocol (MADCAP)\", RFC 2730,\
    \ December 1999.\n   [7] http://www.isi.edu/in-notes/iana/assignments/multicast-addresses\n\
    \   [8] Guttman, E., \"Service Location Protocol Modifications for IPv6\",\n \
    \      Work in Progress.\n   [9] Hinden, R. and S. Deering, \"IP Version 6 Addressing\n\
    \       Architecture\", RFC 2375, July 1997.\n"
- title: 16. Author's Addresses
  contents:
  - "16. Author's Addresses\n   James Kempf\n   Sun Microsystems\n   UMPK15-214\n\
    \   901 San Antonio Rd.\n   Palo Alto, CA 94040\n   USA\n   Phone:    +1 650 786\
    \ 5890\n   EMail:    james.kempf@sun.com\n   Jason Goldschmidt\n   Sun Microsystems\n\
    \   UMPK17-202\n   901 San Antonio Rd.\n   Palo Alto, CA 94040\n   USA\n   Phone:\
    \ +1 650 786 3502\n   EMail: jason.goldschmidt@sun.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
