- title: __initial_text__
  contents:
  - "          Use of Elliptic Curve Cryptography (ECC) Algorithms\n             \
    \    in Cryptographic Message Syntax (CMS)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes how to use Elliptic Curve Cryptography (ECC)\n\
    \   public-key algorithms in the Cryptographic Message Syntax (CMS).  The\n  \
    \ ECC algorithms support the creation of digital signatures and the\n   exchange\
    \ of keys to encrypt or authenticate content.  The definition\n   of the algorithm\
    \ processing is based on the ANSI X9.62 standard,\n   developed by the ANSI X9F1\
    \ working group, the IEEE 1363 standard, and\n   the SEC 1 standard.\n   The readers\
    \ attention is called to the Intellectual Property Rights\n   section at the end\
    \ of this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1  Introduction ...................................................\
    \ 2\n      1.1  Requirements terminology .................................. 3\n\
    \   2  SignedData using ECC ..........................................  3\n  \
    \    2.1  SignedData using ECDSA ...................................  3\n    \
    \       2.1.1  Fields of the SignedData ..........................  3\n      \
    \     2.1.2  Actions of the sending agent ......................  4\n        \
    \   2.1.3  Actions of the receiving agent ....................  4\n   3  EnvelopedData\
    \ using ECC .......................................  4\n      3.1  EnvelopedData\
    \ using ECDH .................................  5\n           3.1.1  Fields of\
    \ KeyAgreeRecipientInfo ...................  5\n           3.1.2  Actions of the\
    \ sending agent ......................  5\n           3.1.3  Actions of the receiving\
    \ agent ....................  6\n      3.2  EnvelopedData using 1-Pass ECMQV .........................\
    \  6\n           3.2.1  Fields of KeyAgreeRecipientInfo ...................  6\n\
    \           3.2.2  Actions of the sending agent ......................  7\n  \
    \         3.2.3  Actions of the receiving agent ....................  7\n   4\
    \  AuthenticatedData using ECC ............ ......................  8\n      4.1\
    \  AuthenticatedData using 1-pass ECMQV .....................  8\n           4.1.1\
    \  Fields of KeyAgreeRecipientInfo ...................  8\n           4.1.2  Actions\
    \ of the sending agent ......................  8\n           4.1.3  Actions of\
    \ the receiving agent ....................  8\n   5  Recommended Algorithms and\
    \ Elliptic Curves ....................  9\n   6  Certificates using ECC ........................................\
    \  9\n   7  SMIMECapabilities Attribute and ECC ...........................  9\n\
    \   8  ASN.1 Syntax .................................................. 10\n  \
    \    8.1  Algorithm identifiers .................................... 10\n    \
    \  8.2  Other syntax ............................................. 11\n   9  Summary\
    \ ....................................................... 12\n   References .......................................................\
    \ 13\n   Security Considerations .......................................... 14\n\
    \   Intellectual Property Rights ..................................... 14\n  \
    \ Acknowledgments .................................................. 15\n   Authors'\
    \ Addresses ............................................... 15\n   Full Copyright\
    \ Statement ......................................... 16\n"
- title: 1  Introduction
  contents:
  - "1  Introduction\n   The Cryptographic Message Syntax (CMS) is cryptographic algorithm\n\
    \   independent.  This specification defines a profile for the use of\n   Elliptic\
    \ Curve Cryptography (ECC) public key algorithms in the CMS.\n   The ECC algorithms\
    \ are incorporated into the following CMS content\n   types:\n      -  'SignedData'\
    \ to support ECC-based digital signature methods\n         (ECDSA) to sign content\n\
    \      -  'EnvelopedData' to support ECC-based public-key agreement\n        \
    \ methods (ECDH and ECMQV) to generate pairwise key-encryption\n         keys\
    \ to encrypt content-encryption keys used for content\n         encryption\n \
    \     -  'AuthenticatedData' to support ECC-based public-key agreement\n     \
    \    methods (ECMQV) to generate pairwise key-encryption keys to\n         encrypt\
    \ MAC keys used for content authentication and integrity\n   Certification of\
    \ EC public keys is also described to provide public-\n   key distribution in\
    \ support of the specified techniques.\n"
- title: 1.1  Requirements terminology
  contents:
  - "1.1  Requirements terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in BCP 14, RFC 2119\n   [MUST].\n"
- title: 2  SignedData using ECC
  contents:
  - "2  SignedData using ECC\n   This section describes how to use ECC algorithms\
    \ with the CMS\n   SignedData format to sign data.\n"
- title: 2.1  SignedData using ECDSA
  contents:
  - "2.1  SignedData using ECDSA\n   This section describes how to use the Elliptic\
    \ Curve Digital\n   Signature Algorithm (ECDSA) with SignedData.  ECDSA is specified\
    \ in\n   [X9.62].  The method is the elliptic curve analog of the Digital\n  \
    \ Signature Algorithm (DSA) [FIPS 186-2].\n   In an implementation that uses ECDSA\
    \ with CMS SignedData, the\n   following techniques and formats MUST be used.\n"
- title: 2.1.1  Fields of the SignedData
  contents:
  - "2.1.1  Fields of the SignedData\n   When using ECDSA with SignedData, the fields\
    \ of SignerInfo are as in\n   [CMS], but with the following restrictions:\n  \
    \    digestAlgorithm MUST contain the algorithm identifier sha-1 (see\n      Section\
    \ 8.1) which identifies the SHA-1 hash algorithm.\n      signatureAlgorithm contains\
    \ the algorithm identifier ecdsa-with-\n      SHA1 (see Section 8.1) which identifies\
    \ the ECDSA signature\n      algorithm.\n      signature MUST contain the DER\
    \ encoding (as an octet string) of a\n      value of the ASN.1 type ECDSA-Sig-Value\
    \ (see Section 8.2).\n   When using ECDSA, the SignedData certificates field MAY\
    \ include the\n   certificate(s) for the EC public key(s) used in the generation\
    \ of the\n   ECDSA signatures in SignedData.  ECC certificates are discussed in\n\
    \   Section 6.\n"
- title: 2.1.2  Actions of the sending agent
  contents:
  - "2.1.2  Actions of the sending agent\n   When using ECDSA with SignedData, the\
    \ sending agent uses the message\n   digest calculation process and signature\
    \ generation process for\n   SignedData that are specified in [CMS].  To sign\
    \ data, the sending\n   agent uses the signature method specified in [X9.62, Section\
    \ 5.3]\n   with the following exceptions:\n      -  In [X9.62, Section 5.3.1],\
    \ the integer \"e\" is instead\n         determined by converting the message\
    \ digest generated according\n         to [CMS, Section 5.4] to an integer using\
    \ the data conversion\n         method in [X9.62, Section 4.3.2].\n   The sending\
    \ agent encodes the resulting signature using the ECDSA-\n   Sig-Value syntax\
    \ (see Section 8.2) and places it in the SignerInfo\n   signature field.\n"
- title: 2.1.3  Actions of the receiving agent
  contents:
  - "2.1.3  Actions of the receiving agent\n   When using ECDSA with SignedData, the\
    \ receiving agent uses the\n   message digest calculation process and signature\
    \ verification process\n   for SignedData that are specified in [CMS].  To verify\
    \ SignedData,\n   the receiving agent uses the signature verification method specified\n\
    \   in [X9.62, Section 5.4] with the following exceptions:\n      -  In [X9.62,\
    \ Section 5.4.1] the integer \"e'\" is instead\n         determined by converting\
    \ the message digest generated according\n         to [CMS, Section 5.4] to an\
    \ integer using the data conversion\n         method in [X9.62, Section 4.3.2].\n\
    \   In order to verify the signature, the receiving agent retrieves the\n   integers\
    \ r and s from the SignerInfo signature field of the received\n   message.\n"
- title: 3  EnvelopedData using ECC Algorithms
  contents:
  - "3  EnvelopedData using ECC Algorithms\n   This section describes how to use ECC\
    \ algorithms with the CMS\n   EnvelopedData format.\n"
- title: 3.1  EnvelopedData using (ephemeral-static) ECDH
  contents:
  - "3.1  EnvelopedData using (ephemeral-static) ECDH\n   This section describes how\
    \ to use the ephemeral-static Elliptic Curve\n   Diffie-Hellman (ECDH) key agreement\
    \ algorithm with EnvelopedData.\n   Ephemeral-static ECDH is specified in [SEC1]\
    \ and [IEEE1363].\n   Ephemeral-static ECDH is the the elliptic curve analog of\
    \ the\n   ephemeral-static Diffie-Hellman key agreement algorithm specified\n\
    \   jointly in the documents [CMS, Section 12.3.1.1] and [CMS-DH].\n   In an implementation\
    \ that uses ECDH with CMS EnvelopedData with key\n   agreement, the following\
    \ techniques and formats MUST be used.\n"
- title: 3.1.1  Fields of KeyAgreeRecipientInfo
  contents:
  - "3.1.1  Fields of KeyAgreeRecipientInfo\n   When using ephemeral-static ECDH with\
    \ EnvelopedData, the fields of\n   KeyAgreeRecipientInfo are as in [CMS], but\
    \ with the following\n   restrictions:\n      originator MUST be the alternative\
    \ originatorKey.  The\n      originatorKey algorithm field MUST contain the id-ecPublicKey\n\
    \      object identifier (see Section 8.1) with NULL parameters.  The\n      originatorKey\
    \ publicKey field MUST contain the DER-encoding of a\n      value of the ASN.1\
    \ type ECPoint (see Section 8.2), which\n      represents the sending agent's\
    \ ephemeral EC public key.\n      keyEncryptionAlgorithm MUST contain the dhSinglePass-stdDH-\n\
    \      sha1kdf-scheme object identifier (see Section 8.1) if standard\n      ECDH\
    \ primitive is used, or the dhSinglePass-cofactorDH-sha1kdf-\n      scheme object\
    \ identifier (see Section 8.1) if the cofactor ECDH\n      primitive is used.\
    \  The parameters field contains\n      KeyWrapAlgorithm.  The KeyWrapAlgorithm\
    \ is the algorithm\n      identifier that indicates the symmetric encryption algorithm\
    \ used\n      to encrypt the content-encryption key (CEK) with the key-\n    \
    \  encryption key (KEK).\n"
- title: 3.1.2  Actions of the sending agent
  contents:
  - "3.1.2  Actions of the sending agent\n   When using ephemeral-static ECDH with\
    \ EnvelopedData, the sending\n   agent first obtains the recipient's EC public\
    \ key and domain\n   parameters (e.g. from the recipient's certificate).  The\
    \ sending\n   agent then determines an integer \"keydatalen\", which is the\n\
    \   KeyWrapAlgorithm symmetric key-size in bits, and also a bit string\n   \"\
    SharedInfo\", which is the DER encoding of ECC-CMS-SharedInfo (see\n   Section\
    \ 8.2).  The sending agent then performs the key deployment and\n   the key agreement\
    \ operation of the Elliptic Curve Diffie-Hellman\n   Scheme specified in [SEC1,\
    \ Section 6.1].  As a result the sending\n   agent obtains:\n      -  an ephemeral\
    \ public key, which is represented as a value of the\n         type ECPoint (see\
    \ Section 8.2), encapsulated in a bit string\n         and placed in the KeyAgreeRecipientInfo\
    \ originator field, and\n      -  a shared secret bit string \"K\", which is used\
    \ as the pairwise\n         key-encryption key for that recipient, as specified\
    \ in [CMS].\n"
- title: 3.1.3  Actions of the receiving agent
  contents:
  - "3.1.3  Actions of the receiving agent\n   When using ephemeral-static ECDH with\
    \ EnvelopedData, the receiving\n   agent determines the bit string \"SharedInfo\"\
    , which is the DER\n   encoding of ECC-CMS-SharedInfo (see Section 8.2), and the\
    \ integer\n   \"keydatalen\" from the key-size, in bits, of the KeyWrapAlgorithm.\n\
    \   The receiving agent retrieves the ephemeral EC public key from the\n   bit\
    \ string KeyAgreeRecipientInfo originator, with a value of the type\n   ECPoint\
    \ (see Section 8.2) encapsulated as a bit string.  The\n   receiving agent performs\
    \ the key agreement operation of the Elliptic\n   Curve Diffie-Hellman Scheme\
    \ specified in [SEC1, Section 6.1].  As a\n   result, the receiving agent obtains\
    \ a shared secret bit string \"K\",\n   which is used as the pairwise key-encryption\
    \ key to unwrap the CEK.\n"
- title: 3.2  EnvelopedData using 1-Pass ECMQV
  contents:
  - "3.2  EnvelopedData using 1-Pass ECMQV\n   This section describes how to use the\
    \ 1-Pass elliptic curve MQV\n   (ECMQV) key agreement algorithm with EnvelopedData.\
    \  ECMQV is\n   specified in [SEC1] and [IEEE1363].  Like the KEA algorithm [CMS-\n\
    \   KEA], 1-Pass ECMQV uses three key pairs: an ephemeral key pair, a\n   static\
    \ key pair of the sending agent, and a static key pair of the\n   receiving agent.\
    \  An advantage of using 1-Pass ECMQV is that it can\n   be used with both EnvelopedData\
    \ and AuthenticatedData.\n   In an implementation that uses 1-Pass ECMQV with\
    \ CMS EnvelopedData\n   with key agreement, the following techniques and formats\
    \ MUST be\n   used.\n"
- title: 3.2.1  Fields of KeyAgreeRecipientInfo
  contents:
  - "3.2.1  Fields of KeyAgreeRecipientInfo\n   When using 1-Pass ECMQV with EnvelopedData,\
    \ the fields of\n   KeyAgreeRecipientInfo are:\n      originator identifies the\
    \ static EC public key of the sender.  It\n      SHOULD be one of the alternatives,\
    \ issuerAndSerialNumber or\n      subjectKeyIdentifier, and point to one of the\
    \ sending agent's\n      certificates.\n      ukm MUST be present.  The ukm field\
    \ MUST contain an octet string\n      which is the DER encoding of the type MQVuserKeyingMaterial\
    \ (see\n      Section 8.2).  The MQVuserKeyingMaterial ephemeralPublicKey\n  \
    \    algorithm field MUST contain the id-ecPublicKey object identifier\n     \
    \ (see Section 8.1) with NULL parameters field.  The\n      MQVuserKeyingMaterial\
    \ ephemeralPublicKey publicKey field MUST\n      contain the DER-encoding of the\
    \ ASN.1 type ECPoint (see Section\n      8.2) representing sending agent's ephemeral\
    \ EC public key.  The\n      MQVuserKeyingMaterial addedukm field, if present,\
    \ SHOULD contain\n      an octet string of additional user keying material of\
    \ the sending\n      agent.\n      keyEncryptionAlgorithm MUST be the mqvSinglePass-sha1kdf-scheme\n\
    \      algorithm identifier (see Section 8.1), with the parameters field\n   \
    \   KeyWrapAlgorithm. The KeyWrapAlgorithm indicates the symmetric\n      encryption\
    \ algorithm used to encrypt the CEK with the KEK\n      generated using the 1-Pass\
    \ ECMQV algorithm.\n"
- title: 3.2.2  Actions of the sending agent
  contents:
  - "3.2.2  Actions of the sending agent\n   When using 1-Pass ECMQV with EnvelopedData,\
    \ the sending agent first\n   obtains the recipient's EC public key and domain\
    \ parameters, (e.g.\n   from the recipient's certificate) and checks that the\
    \ domain\n   parameters are the same.  The sending agent then determines an\n\
    \   integer \"keydatalen\", which is the KeyWrapAlgorithm symmetric key-\n   size\
    \ in bits, and also a bit string \"SharedInfo\", which is the DER\n   encoding\
    \ of ECC-CMS-SharedInfo (see Section 8.2).  The sending agent\n   then performs\
    \ the key deployment and key agreement operations of the\n   Elliptic Curve MQV\
    \ Scheme specified in [SEC1, Section 6.2].  As a\n   result, the sending agent\
    \ obtains:\n      -  an ephemeral public key, which is represented as a value\
    \ of\n         type ECPoint (see Section 8.2), encapsulated in a bit string,\n\
    \         placed in an MQVuserKeyingMaterial ephemeralPublicKey publicKey\n  \
    \       field (see Section 8.2), and\n      -  a shared secret bit string \"K\"\
    , which is used as the pairwise\n         key-encryption key for that recipient,\
    \ as specified in [CMS].\n   The ephemeral public key can be re-used with an AuthenticatedData\
    \ for\n   greater efficiency.\n"
- title: 3.2.3  Actions of the receiving agent
  contents:
  - "3.2.3  Actions of the receiving agent\n   When using 1-Pass ECMQV with EnvelopedData,\
    \ the receiving agent\n   determines the bit string \"SharedInfo\", which is the\
    \ DER encoding of\n   ECC-CMS-SharedInfo (see Section 8.2), and the integer \"\
    keydatalen\"\n   from the key-size, in bits, of the KeyWrapAlgorithm.  The receiving\n\
    \   agent then retrieves the static and ephemeral EC public keys of the\n   originator,\
    \ from the originator and ukm fields as described in\n   Section 3.2.1, and its\
    \ static EC public key identified in the rid\n   field and checks that the domain\
    \ parameters are the same.  The\n   receiving agent then performs the key agreement\
    \ operation of the\n   Elliptic Curve MQV Scheme [SEC1, Section 6.2].  As a result,\
    \ the\n   receiving agent obtains a shared secret bit string \"K\" which is used\n\
    \   as the pairwise key-encryption key to unwrap the CEK.\n"
- title: 4  AuthenticatedData using ECC
  contents:
  - "4  AuthenticatedData using ECC\n   This section describes how to use ECC algorithms\
    \ with the CMS\n   AuthenticatedData format.  AuthenticatedData lacks non-repudiation,\n\
    \   and so in some instances is preferable to SignedData.  (For example,\n   the\
    \ sending agent might not want the message to be authenticated when\n   forwarded.)\n"
- title: 4.1  AuthenticatedData using 1-pass ECMQV
  contents:
  - "4.1  AuthenticatedData using 1-pass ECMQV\n   This section describes how to use\
    \ the 1-Pass elliptic curve MQV\n   (ECMQV) key agreement algorithm with AuthenticatedData.\
    \  ECMQV is\n   specified in [SEC1].  An advantage of using 1-Pass ECMQV is that\
    \ it\n   can be used with both EnvelopedData and AuthenticatedData.\n"
- title: 4.1.1  Fields of the KeyAgreeRecipientInfo
  contents:
  - "4.1.1  Fields of the KeyAgreeRecipientInfo\n   The AuthenticatedData KeyAgreeRecipientInfo\
    \ fields are used in the\n   same manner as the fields for the corresponding EnvelopedData\n\
    \   KeyAgreeRecipientInfo fields of Section 3.2.1 of this document.\n"
- title: 4.1.2  Actions of the sending agent
  contents:
  - "4.1.2  Actions of the sending agent\n   The sending agent uses the same actions\
    \ as for EnvelopedData with 1-\n   Pass ECMQV, as specified in Section 3.2.2 of\
    \ this document.\n   The ephemeral public key can be re-used with an EnvelopedData\
    \ for\n   greater efficiency.\n   Note: if there are multiple recipients, an attack\
    \ is possible where\n   one recipient modifies the content without other recipients\
    \ noticing\n   [BON].  A sending agent who is concerned with such an attack SHOULD\n\
    \   use a separate AuthenticatedData for each recipient.\n"
- title: 4.1.3  Actions of the receiving agent
  contents:
  - "4.1.3  Actions of the receiving agent\n   The receiving agent uses the same actions\
    \ as for EnvelopedData with\n   1-Pass ECMQV, as specified in Section 3.2.3 of\
    \ this document.\n   Note: see Note in Section 4.1.2.\n"
- title: 5  Recommended Algorithms and Elliptic Curves
  contents:
  - "5  Recommended Algorithms and Elliptic Curves\n   Implementations of this specification\
    \ MUST implement either\n   SignedData with ECDSA or EnvelopedData with ephemeral-static\
    \ ECDH.\n   Implementations of this specification SHOULD implement both\n   SignedData\
    \ with ECDSA and EnvelopedData with ephemeral-static ECDH.\n   Implementations\
    \ MAY implement the other techniques specified, such as\n   AuthenticatedData\
    \ and 1-Pass ECMQV.\n   Furthermore, in order to encourage interoperability, implementations\n\
    \   SHOULD use the elliptic curve domain parameters specified by ANSI\n   [X9.62],\
    \ NIST [FIPS-186-2] and SECG [SEC2].\n"
- title: 6  Certificates using ECC
  contents:
  - "6  Certificates using ECC\n   Internet X.509 certificates [PKI] can be used in\
    \ conjunction with\n   this specification to distribute agents' public keys. \
    \ The use of ECC\n   algorithms and keys within X.509 certificates is specified\
    \ in [PKI-\n   ALG].\n"
- title: 7  SMIMECapabilities Attribute and ECC
  contents:
  - "7  SMIMECapabilities Attribute and ECC\n   A sending agent MAY announce to receiving\
    \ agents that it supports one\n   or more of the ECC algorithms in this document\
    \ by using the\n   SMIMECapabilities signed attribute [MSG, Section 2.5.2].\n\
    \   The SMIMECapability value to indicate support for the ECDSA signature\n  \
    \ algorithm is the SEQUENCE with the capabilityID field containing the\n   object\
    \ identifier ecdsa-with-SHA1 with NULL parameters.  The DER\n   encoding is:\n\
    \      30 0b 06 07  2a 86 48 ce   3d 04 01 05  00\n   The SMIMECapability capabilityID\
    \ object identifiers for the supported\n   key agreement algorithms in this document\
    \ are dhSinglePass-stdDH-\n   sha1kdf-scheme, dhSinglePass-cofactorDH-sha1kdf-scheme,\
    \ and\n   mqvSinglePass-sha1kdf-scheme.  For each of these SMIMECapability\n \
    \  SEQUENCEs, the parameters field is present and indicates the\n   supported\
    \ key-encryption algorithm with the KeyWrapAlgorithm\n   algorithm identifier.\
    \  The DER encodings that indicate capability of\n   the three key agreement algorithms\
    \ with CMS Triple-DES key wrap are:\n      30 1c 06 09  2b 81 05 10   86 48 3f\
    \ 00  02 30 0f 06\n      0b 2a 86 48  86 f7 0d 01   09 10 03 06  05 00\n   for\
    \ ephemeral-static ECDH,\n      30 1c 06 09  2b 81 05 10   86 48 3f 00  03 30\
    \ 0f 06\n      0b 2a 86 48  86 f7 0d 01   09 10 03 06  05 00\n   for ephemeral-static\
    \ ECDH with cofactor method, and\n      30 1c 06 09  2b 81 05 10   86 48 3f 00\
    \  10 30 0f 06\n      0b 2a 86 48  86 f7 0d 01   09 10 03 06  05 00\n   for ECMQV.\n"
- title: 8  ASN.1 Syntax
  contents:
  - "8  ASN.1 Syntax\n   The ASN.1 syntax used in this document is gathered in this\
    \ section\n   for reference purposes.\n"
- title: 8.1  Algorithm identifiers
  contents:
  - "8.1  Algorithm identifiers\n   The algorithm identifiers used in this document\
    \ are taken from\n   [X9.62], [SEC1] and [SEC2].\n   The following object identifier\
    \ indicates the hash algorithm used in\n   this document:\n      sha-1 OBJECT\
    \ IDENTIFIER ::= { iso(1) identified-organization(3)\n         oiw(14) secsig(3)\
    \ algorithm(2) 26 }\n   The following object identifier is used in this document\
    \ to indicate\n   an elliptic curve public key:\n      id-ecPublicKey OBJECT IDENTIFIER\
    \ ::= { ansi-x9-62 keyType(2) 1 }\n   where\n      ansi-x9-62 OBJECT IDENTIFIER\
    \ ::= { iso(1) member-body(2) us(840)\n        10045 }\n   When the object identifier\
    \ id-ecPublicKey is used here with an\n   algorithm identifier, the associated\
    \ parameters contain NULL.\n   The following object identifier indicates the digital\
    \ signature\n   algorithm used in this document:\n      ecdsa-with-SHA1 OBJECT\
    \ IDENTIFIER ::= { ansi-x9-62 signatures(4)\n         1 }\n   When the object\
    \ identifier ecdsa-with-SHA1 is used within an\n   algorithm identifier, the associated\
    \ parameters field contains NULL.\n   The following object identifiers indicate\
    \ the key agreement\n   algorithms used in this document:\n      dhSinglePass-stdDH-sha1kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n         x9-63-scheme 2}\n      dhSinglePass-cofactorDH-sha1kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n         x9-63-scheme 3}\n      mqvSinglePass-sha1kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n         x9-63-scheme 16}\n   where\n      x9-63-scheme\
    \ OBJECT IDENTIFIER ::= { iso(1)\n         identified-organization(3) tc68(133)\
    \ country(16) x9(840)\n         x9-63(63) schemes(0) }\n   When the object identifiers\
    \ are used here within an algorithm\n   identifier, the associated parameters\
    \ field contains the CMS\n   KeyWrapAlgorithm algorithm identifier.\n"
- title: 8.2  Other syntax
  contents:
  - "8.2  Other syntax\n   The following additional syntax is used here.\n   When\
    \ using ECDSA with SignedData, ECDSA signatures are encoded using\n   the type:\n\
    \      ECDSA-Sig-Value ::= SEQUENCE {\n         r INTEGER,\n         s INTEGER\
    \ }\n   ECDSA-Sig-Value is specified in [X9.62].  Within CMS, ECDSA-Sig-Value\n\
    \   is DER-encoded and placed within a signature field of SignedData.\n   When\
    \ using ECDH and ECMQV with EnvelopedData and AuthenticatedData,\n   ephemeral\
    \ and static public keys are encoded using the type ECPoint.\n      ECPoint ::=\
    \ OCTET STRING\n   When using ECMQV with EnvelopedData and AuthenticatedData,\
    \ the\n   sending agent's ephemeral public key and additional keying material\n\
    \   are encoded using the type:\n      MQVuserKeyingMaterial ::= SEQUENCE {\n\
    \         ephemeralPublicKey OriginatorPublicKey,\n         addedukm [0] EXPLICIT\
    \ UserKeyingMaterial OPTIONAL  }\n   The ECPoint syntax in used to represent the\
    \ ephemeral public key and\n   placed in the ephemeralPublicKey field.  The additional\
    \ user keying\n   material is placed in the addedukm field.  Then the\n   MQVuserKeyingMaterial\
    \ value is DER-encoded and placed within a ukm\n   field of EnvelopedData or AuthenticatedData.\n\
    \   When using ECDH or ECMQV with EnvelopedData or AuthenticatedData, the\n  \
    \ key-encryption keys are derived by using the type:\n      ECC-CMS-SharedInfo\
    \ ::= SEQUENCE {\n         keyInfo AlgorithmIdentifier,\n         entityUInfo\
    \ [0] EXPLICIT OCTET STRING OPTIONAL,\n         suppPubInfo [2] EXPLICIT OCTET\
    \ STRING   }\n   The fields of ECC-CMS-SharedInfo are as follows:\n      keyInfo\
    \ contains the object identifier of the key-encryption\n      algorithm (used\
    \ to wrap the CEK) and NULL parameters.\n      entityUInfo optionally contains\
    \ additional keying material\n      supplied by the sending agent.  When used\
    \ with ECDH and CMS, the\n      entityUInfo field contains the octet string ukm.\
    \  When used with\n      ECMQV and CMS, the entityUInfo contains the octet string\
    \ addedukm\n      (encoded in MQVuserKeyingMaterial).\n      suppPubInfo contains\
    \ the length of the generated KEK, in bits,\n      represented as a 32 bit number,\
    \ as in [CMS-DH].  (E.g. for 3DES it\n      would be 00 00 00 c0.)\n   Within\
    \ CMS, ECC-CMS-SharedInfo is DER-encoded and used as input to\n   the key derivation\
    \ function, as specified in [SEC1, Section 3.6.1].\n   Note that ECC-CMS-SharedInfo\
    \ differs from the OtherInfo specified in\n   [CMS-DH].  Here, a counter value\
    \ is not included in the keyInfo field\n   because the key derivation function\
    \ specified in [SEC1, Section\n   3.6.1] ensures that sufficient keying data is\
    \ provided.\n"
- title: 9  Summary
  contents:
  - "9  Summary\n   This document specifies how to use ECC algorithms with the S/MIME\n\
    \   CMS.  Use of ECC algorithm within CMS can result in reduced\n   processing\
    \ requirements for S/MIME agents, and reduced bandwidth for\n   CMS messages.\n"
- title: References
  contents:
  - "References\n   [X9.62]      ANSI X9.62-1998, \"Public Key Cryptography For The\n\
    \                Financial Services Industry: The Elliptic Curve Digital\n   \
    \             Signature Algorithm (ECDSA)\", American National\n             \
    \   Standards Institute, 1999.\n   [PKI-ALG]    Bassham, L., Housley R. and W.\
    \ Polk, \"Algorithms and\n                Identifiers for the Internet X.509 Public\
    \ Key\n                Infrastructure Certificate and CRL Profile\", RFC 3279,\n\
    \                April 2002.\n   [BON]        D. Boneh, \"The Security of Multicast\
    \ MAC\", Presentation\n                at Selected Areas of Cryptography 2000,\
    \ Center for\n                Applied Cryptographic Research, University of Waterloo,\n\
    \                2000.  Paper version available from\n                http://crypto.stanford.edu/~dabo/papers/mmac.ps\n\
    \   [MUST]       Bradner, S., \"Key Words for Use in RFCs to Indicate\n      \
    \          Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [FIPS-180]\
    \   FIPS 180-1, \"Secure Hash Standard\", National Institute\n               \
    \ of Standards and Technology, April 17, 1995.\n   [FIPS-186-2] FIPS 186-2, \"\
    Digital Signature Standard\", National\n                Institute of Standards\
    \ and Technology, 15 February 2000.\n   [PKI]        Housley, R., Polk, W., Ford,\
    \ W. and D. Solo, \"Internet\n                X.509 Public Key Infrastructure\
    \ Certificate and\n                Certificate Revocation List (CRL) Profile\"\
    , RFC 3280,\n                April 2002.\n   [CMS]        Housley, R., \"Cryptographic\
    \ Message Syntax\", RFC 2630,\n                June 1999.\n   [IEEE1363]   IEEE\
    \ P1363, \"Standard Specifications for Public Key\n                Cryptography\"\
    , Institute of Electrical and Electronics\n                Engineers, 2000.\n\
    \   [K]          B. Kaliski, \"MQV Vulnerabilty\", Posting to ANSI X9F1 and\n\
    \                IEEE P1363 newsgroups, 1998.\n   [LMQSV]      L. Law, A. Menezes,\
    \ M. Qu, J. Solinas and S. Vanstone,\n                \"An efficient protocol\
    \ for authenticated key agreement\",\n                Technical report CORR 98-05,\
    \ University of Waterloo,\n                1998.\n   [CMS-KEA]    Pawling, J.,\
    \ \"CMS KEA and SKIPJACK Conventions\", RFC\n                2876, July 2000.\n\
    \   [MSG]        Ramsdell, B., \"S/MIME Version 3 Message Specification\",\n \
    \               RFC 2633, June 1999.\n   [CMS-DH]     Rescorla, E., \"Diffie-Hellman\
    \ Key Agreement Method\", RFC\n                2631, June 1999.\n   [SEC1]   \
    \    SECG, \"Elliptic Curve Cryptography\", Standards for\n                Efficient\
    \ Cryptography Group, 2000. Available from\n                www.secg.org/collateral/sec1.pdf.\n\
    \   [SEC2]       SECG, \"Recommended Elliptic Curve Domain Parameters\",\n   \
    \             Standards for Efficient Cryptography Group, 2000.\n            \
    \    Available from www.secg.org/collateral/sec2.pdf.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   This specification is based on [CMS], [X9.62] and\
    \ [SEC1] and the\n   appropriate security considerations of those documents apply.\n\
    \   In addition, implementors of AuthenticatedData should be aware of the\n  \
    \ concerns expressed in [BON] when using AuthenticatedData to send\n   messages\
    \ to more than one recipient.  Also, users of MQV should be\n   aware of the vulnerability\
    \ in [K].\n   When 256, 384, and 512 bit hash functions succeed SHA-1 in future\n\
    \   revisions of [FIPS], [FIPS-186-2], [X9.62] and [SEC1], then they can\n   similarly\
    \ succeed SHA-1 in a future revision of this document.\n"
- title: Intellectual Property Rights
  contents:
  - "Intellectual Property Rights\n   The IETF has been notified of intellectual property\
    \ rights claimed in\n   regard to the specification contained in this document.\
    \  For more\n   information, consult the online list of claimed rights\n   (http://www.ietf.org/ipr.html).\n\
    \   The IETF takes no position regarding the validity or scope of any\n   intellectual\
    \ property or other rights that might be claimed to\n   pertain to the implementation\
    \ or use of the technology described in\n   this document or the extent to which\
    \ any license under such rights\n   might or might not be available; neither does\
    \ it represent that it\n   has made any effort to identify any such rights. Information\
    \ on the\n   IETF's procedures with respect to rights in standards-track and\n\
    \   standards-related documentation can be found in BCP 11. Copies of\n   claims\
    \ of rights made available for publication and any assurances of\n   licenses\
    \ to be made available, or the result of an attempt made to\n   obtain a general\
    \ license or permission for the use of such\n   proprietary rights by implementors\
    \ or users of this specification can\n   be obtained from the IETF Secretariat.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The methods described in this document are based on work\
    \ done by the\n   ANSI X9F1 working group.  The authors wish to extend their thanks\
    \ to\n   ANSI X9F1 for their assistance.  The authors also wish to thank Peter\n\
    \   de Rooij for his patient assistance.  The technical comments of\n   Francois\
    \ Rousseau were valuable contributions.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Simon Blake-Wilson\n   Certicom Corp\n   5520 Explorer\
    \ Drive #400\n   Mississauga, ON L4W 5L1\n   EMail: sblakewi@certicom.com\n  \
    \ Daniel R. L. Brown\n   pCerticom Corp\n   5520 Explorer Drive #400\n   Mississauga,\
    \ ON L4W 5L1\n   EMail: dbrown@certicom.com\n   Paul Lambert\n   EMail: plambert@sprintmail.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
