- title: __initial_text__
  contents:
  - "                           Helsinki Institute for Information Technology\n  \
    \     Using the Host Identity Protocol with Legacy Applications\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is an informative overview of how legacy applications\n\
    \   can be made to work with the Host Identity Protocol (HIP).  HIP\n   proposes\
    \ to add a cryptographic name space for network stack names.\n   From an application\
    \ viewpoint, HIP-enabled systems support a new\n   address family of host identifiers,\
    \ but it may be a long time until\n   such HIP-aware applications are widely deployed\
    \ even if host systems\n   are upgraded.  This informational document discusses\
    \ implementation\n   and Application Programming Interface (API) issues relating\
    \ to using\n   HIP in situations in which the system is HIP-aware but the\n  \
    \ applications are not, and is intended to aid implementors and early\n   adopters\
    \ in thinking about and locally solving systems issues\n   regarding the incremental\
    \ deployment of HIP.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Enabling HIP Transparently within the System ....................4\n    \
    \  3.1. Applying HIP to Cases in Which IP Addresses Are Used .......4\n      3.2.\
    \ Interposing a HIP-Aware Agent in the DNS Resolution ........6\n      3.3. Discussion\
    \ .................................................7\n   4. Users Invoking HIP\
    \ with a Legacy Application ....................8\n      4.1. Connecting to a\
    \ HIT or LSI .................................8\n      4.2. Using a Modified DNS\
    \ Name ..................................9\n      4.3. Other Techniques ...........................................9\n\
    \   5. Local Address Management ........................................9\n  \
    \ 6. Security Considerations ........................................11\n   7.\
    \ Acknowledgments ................................................12\n   8. Informative\
    \ References .........................................12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Host Identity Protocol (HIP) [RFC5201] is an experimental\
    \ effort\n   in the IETF and IRTF to study a new public-key-based name space for\n\
    \   use as host identifiers in Internet protocols.  Fully deployed, the\n   HIP\
    \ architecture would permit applications and users to explicitly\n   request the\
    \ system to send packets to another host by expressing a\n   location-independent\
    \ unique name of a peer host when the system call\n   to connect or send packets\
    \ is performed.  However, there will be a\n   transition period during which systems\
    \ become HIP-enabled but\n   applications are not.  This informational document\
    \ does not propose\n   normative specification or even suggest that different\
    \ HIP\n   implementations use more uniform methods for legacy application\n  \
    \ support, but is intended instead to aid implementors and early\n   adopters\
    \ in thinking about and solving systems issues regarding the\n   incremental deployment\
    \ of HIP.\n   When applications and systems are both HIP-aware, the coordination\n\
    \   between the application and the system can be straightforward.  For\n   example,\
    \ using the terminology of the widely used sockets Application\n   Programming\
    \ Interface (API), the application can issue a system call\n   to send packets\
    \ to another host by naming it explicitly, and the\n   system can perform the\
    \ necessary name-to-address mapping to assign\n   appropriate routable addresses\
    \ to the packets.  To enable this, a new\n   address family for hosts could be\
    \ defined, and additional API\n   extensions could be defined (such as allowing\
    \ IP addresses to be\n   passed in the system call, along with the host name,\
    \ as hints of\n   where to initially try to reach the host).\n   This document\
    \ does not define a native HIP API such as described\n   above.  Rather, this\
    \ document is concerned with the scenario in which\n   the application is not\
    \ HIP-aware and a traditional IP-address-based\n   API is used by the application.\n\
    \   The discussion so far assumes that applications are written directly\n   to\
    \ a sockets API.  However, many applications are built on top of\n   middleware\
    \ that exports a higher-level API to the application.  In\n   this case, for the\
    \ purpose of this document, we refer to the\n   combination of the middleware\
    \ and the middleware-based application as\n   an overall application, or client\
    \ of the sockets API.\n   When HIP is enabled on a system, but the applications\
    \ are not HIP-\n   aware, there are a few basic possibilities to use HIP, each\
    \ of which\n   may or may not be supported by a given HIP implementation.  We\
    \ report\n   here on techniques that have been used or considered by experimental\n\
    \   HIP implementations.  We organize the discussion around the policy\n   chosen\
    \ to use or expose HIP to the applications.  The first option is\n   that users\
    \ are completely unaware of HIP, or are unable to control\n   whether or not HIP\
    \ is invoked, but rather the system chooses to\n   enable HIP for some or all\
    \ sessions based on policy.  The second\n   option is that the user makes a decision\
    \ to try to use HIP by\n   conveying this information somehow within the constraints\
    \ of the\n   unmodified application.  We discuss both of these use cases in detail\n\
    \   below.\n   HIP was designed to work with unmodified applications, to ease\n\
    \   incremental deployment.  For instance, the HIT is the same size as\n   the\
    \ IPv6 address, and the design thinking was that, during initial\n   experiments\
    \ and transition periods, the HITs could substitute in data\n   structures where\
    \ IPv6 addresses were expected.  However, to a varying\n   degree depending on\
    \ the mechanism employed, such use of HIP can alter\n   the semantics of what\
    \ is considered to be an IP address by\n   applications.  Applications use IP\
    \ addresses as short-lived local\n   handles, long-lived application associations,\
    \ callbacks, referrals,\n   and identity comparisons [APP-REF].  The transition\
    \ techniques\n   described below have implications on these different uses of\
    \ IP\n   addresses by legacy applications, and we will try to clarify these\n\
    \   implications in the below discussions.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   Callback:   The application at one end retrieves the IP address\
    \ of\n      the peer and uses that to later communicate \"back\" to the peer.\n\
    \      An example is the FTP PORT command.\n   Host Identity:  An abstract concept\
    \ applied to a computing platform.\n   Host Identifier (HI):  A public key of\
    \ an asymmetric key pair used as\n      a name for a Host Identity.  More details\
    \ are available in\n      [RFC5201].\n   Host Identity Tag (HIT):  A 128-bit quantity\
    \ composed with the hash\n      of a Host Identity.  More details are available\
    \ in [RFC4843] and\n      [RFC5201].\n   Local Scope Identifier (LSI):  A 32-\
    \ or 128-bit quantity locally\n      representing the Host Identity at the IPv4\
    \ or IPv6 API.\n   Long-lived application associations:  The IP address is retained\
    \ by\n      the application for several instances of communication.\n   Referral:\
    \   In an application with more than two parties, party B\n      takes the IP\
    \ address of party A and passes that to party C.  After\n      this, party C uses\
    \ the IP address to communicate with A.\n   Resolver:  The system function used\
    \ by applications to resolve domain\n      names to IP addresses.\n   Short-lived\
    \ local handle:  The IP addresses is never retained by the\n      application.\
    \  The only usage is for the application to pass it\n      from the DNS APIs (e.g.,\
    \ getaddrinfo()) and the API to the\n      protocol stack (e.g., connect() or\
    \ sendto()).\n"
- title: 3.  Enabling HIP Transparently within the System
  contents:
  - "3.  Enabling HIP Transparently within the System\n   When both users and applications\
    \ are unaware of HIP, but the host\n   administrator chooses to use HIP between\
    \ hosts, a few options are\n   possible.  The first basic option is to perform\
    \ a mapping of the\n   application-provided IP address to a host identifier within\
    \ the\n   stack.  The second option, if DNS is used, is to interpose a local\n\
    \   agent in the DNS resolution process and to return to the application\n   a\
    \ HIT or a locally scoped handle, formatted like an IP address.\n"
- title: 3.1.  Applying HIP to Cases in Which IP Addresses Are Used
  contents:
  - "3.1.  Applying HIP to Cases in Which IP Addresses Are Used\n   Consider the case\
    \ in which an application issues a \"connect(ip)\"\n   system call to set the\
    \ default destination to a system named by\n   address \"ip\", but for which the\
    \ host administrator would like to\n   enable HIP to protect the communications.\
    \  The user or application\n   intends for the system to communicate with the\
    \ host reachable at that\n   IP address.  The decision to invoke HIP must be done\
    \ on the basis of\n   host policy.  For example, when an IPsec-based implementation\
    \ of HIP\n   is being used, a policy may be entered into the security policy\n\
    \   database that mandates to use or to try HIP based on a match on the\n   source\
    \ or destination IP address, port numbers, or other factors.\n   The mapping of\
    \ IP address to host identifier may be implemented by\n   modifying the host operating\
    \ system or by wrapping the existing\n   sockets API, such as in the TESLA approach\
    \ [TESLA].\n   There are a number of ways that HIP could be configured by the\
    \ host\n   administrator in such a scenario.\n   Manual configuration:\n     \
    \ Pre-existing Security Associations (SAs) may be available due to\n      previous\
    \ administrative action, or a binding between an IP address\n      and a HIT could\
    \ be stored in a configuration file or database.\n   Opportunistically:\n    \
    \  The system could send an I1 to the Responder with an empty value\n      for\
    \ Responder HIT.\n   Using DNS to map IP addresses to HIs:\n      If the Responder\
    \ has host identifiers registered in the forward\n      DNS zone and has a PTR\
    \ record in the reverse zone, the Initiator\n      could perform a reverse+forward\
    \ lookup to learn the HIT associated\n      with the address.  Although the approach\
    \ should work under normal\n      circumstances, it has not been tested to verify\
    \ that there are no\n      recursion or bootstrapping issues, particularly if\
    \ HIP is used to\n      secure the connection to the DNS servers.  Discussion\
    \ of the\n      security implications of the use or absence of DNS Security\n\
    \      (DNSSEC) is deferred to the Security Considerations section.\n   Using\
    \ HIP in the above fashion can cause additional setup delays\n   compared to using\
    \ plain IP.  For opportunistic mode, a host must wait\n   to learn whether the\
    \ peer is HIP-capable, although the delays may be\n   mitigated in some implementations\
    \ by sending initial packets (e.g.,\n   TCP SYN) in parallel to the HIP I1 packet\
    \ and waiting some time to\n   receive a HIP R1 before processing a TCP SYN/ACK.\
    \  Note that there\n   presently does not exist specification for how to invoke\
    \ such\n   connections in parallel.  Resolution latencies may also be incurred\n\
    \   when using DNS in the above fashion.\n   A possible way to reduce the above-noted\
    \ latencies, in the case that\n   the application uses DNS, would be for the system\
    \ to\n   opportunistically query for HIP records in parallel to other DNS\n  \
    \ resource records, and to temporarily cache the HITs returned with a\n   DNS\
    \ lookup, indexed by the IP addresses returned in the same entry,\n   and pass\
    \ the IP addresses up to the application as usual.  If an\n   application connects\
    \ to one of those IP addresses within a short time\n   after the lookup, the host\
    \ should initiate a base exchange using the\n   cached HITs.  The benefit is that\
    \ this removes the uncertainty/delay\n   associated with opportunistic HIP, because\
    \ the DNS record suggests\n   that the peer is HIP-capable.\n"
- title: 3.2.  Interposing a HIP-Aware Agent in the DNS Resolution
  contents:
  - "3.2.  Interposing a HIP-Aware Agent in the DNS Resolution\n   In the previous\
    \ section, it was noted that a HIP-unaware application\n   might typically use\
    \ the DNS to fetch IP addresses prior to invoking\n   socket calls.  A HIP-enabled\
    \ system might make use of DNS to\n   transparently fetch host identifiers for\
    \ such domain names prior to\n   the onset of communication.\n   A system with\
    \ a local DNS agent could alternately return a Local\n   Scope Identifier (LSI)\
    \ or HIT rather than an IP address, if HIP\n   information is available in the\
    \ DNS or other directory that binds a\n   particular domain name to a host identifier,\
    \ and otherwise to return\n   an IP address as usual.  The system can then maintain\
    \ a mapping\n   between LSI and host identifier and perform the appropriate\n\
    \   conversion at the system call interface or below.  The application\n   uses\
    \ the LSI or HIT as it would an IP address.  This technique has\n   been used\
    \ in overlay networking experiments such as the Internet\n   Indirection Infrastructure\
    \ (i3) and by at least one HIP\n   implementation.\n   In the case when resolvers\
    \ can return multiple destination\n   identifiers for an application, it may be\
    \ configured that some of the\n   identifiers can be HIP-based identifiers, and\
    \ the rest can be IPv4 or\n   IPv6 addresses.  The system resolver may return\
    \ HIP-based identifiers\n   in front of the list of identifiers when the underlying\
    \ system and\n   policies support HIP.  An application processing the identifiers\n\
    \   sequentially will then first try a HIP-based connection and only then\n  \
    \ other non-HIP based connections.  However, certain applications may\n   launch\
    \ the connections in parallel.  In such a case, the non-HIP\n   connections may\
    \ succeed before HIP connections.  Based on local\n   system policies, a system\
    \ may disallow such behavior and return only\n   HIP-based identifiers when they\
    \ are found from DNS.\n   If the application obtains LSIs or HITs that it treats\
    \ as IP\n   addresses, a few potential hazards arise.  First, applications that\n\
    \   perform referrals may pass the LSI to another system that has no\n   system\
    \ context to resolve the LSI back to a host identifier or an IP\n   address. \
    \ Note that these are the same type of applications that will\n   likely break\
    \ if used over certain types of network address\n   translators (NATs).  Second,\
    \ applications may cache the results of\n   DNS queries for a long time, and it\
    \ may be hard for a HIP system to\n   determine when to perform garbage collection\
    \ on the LSI bindings.\n   However, when using HITs, the security of using the\
    \ HITs for identity\n   comparison may be stronger than in the case of using IP\
    \ addresses.\n   Finally, applications may generate log files, and administrators\
    \ or\n   other consumers of these log files may become confused to find LSIs\n\
    \   or HITs instead of IP addresses.  Therefore, it is recommended that\n   the\
    \ HIP software logs the HITs, LSIs (if applicable), corresponding\n   IP addresses,\
    \ and Fully Qualified Domain Name (FQDN)-related\n   information so that administrators\
    \ can correlate other logs with HIP\n   identifiers.\n   It may be possible for\
    \ an LSI or HIT to be routable or resolvable,\n   either directly or through an\
    \ overlay, in which case it would be\n   preferable for applications to handle\
    \ such names instead of IP\n   addresses.  However, such networks are out of scope\
    \ of this document.\n"
- title: 3.3.  Discussion
  contents:
  - "3.3.  Discussion\n   Solutions preserving the use of IP addresses in the applications\
    \ have\n   the benefit of better support for applications that use IP addresses\n\
    \   for long-lived application associations, callbacks, and referrals,\n   although\
    \ it should be noted that applications are discouraged from\n   using IP addresses\
    \ in this manner due to the frequent presence of\n   NATs [RFC1958].  However,\
    \ they have weaker security properties than\n   the approaches outlined in Section\
    \ 3.2 and Section 4, because the\n   binding between host identifier and address\
    \ is weak and not visible\n   to the application or user.  In fact, the semantics\
    \ of the\n   application's \"connect(ip)\" call may be interpreted as \"connect\
    \ me to\n   the system reachable at IP address ip\" but perhaps no stronger\n\
    \   semantics than that.  HIP can be used in this case to provide perfect\n  \
    \ forward secrecy and authentication, but not to strongly authenticate\n   the\
    \ peer at the onset of communications.\n   Using IP addresses at the application\
    \ layer may not provide the full\n   potential benefits of HIP mobility support.\
    \  It allows for mobility\n   if the system is able to readdress long-lived, connected\
    \ sockets upon\n   a HIP readdress event.  However, as in current systems, mobility\
    \ will\n   break in the connectionless case, when an application caches the IP\n\
    \   address and repeatedly calls sendto(), or in the case of TCP when the\n  \
    \ system later opens additional sockets to the same destination.\n   Section 4.1.6\
    \ of the base HIP protocol specification [RFC5201] states\n   that implementations\
    \ that learn of HIT-to-IP address bindings through\n   the use of HIP opportunistic\
    \ mode must not enforce those bindings on\n   later communications sessions. \
    \ This implies that when IP addresses\n   are used by the applications, systems\
    \ that attempt to\n   opportunistically set up HIP must not assume that later\
    \ sessions to\n   the same address will communicate with the same host.\n   The\
    \ legacy application is unaware of HIP and therefore cannot notify\n   the user\
    \ when the application uses HIP.  However, the operating\n   system can notify\
    \ the user of the usage of HIP through a user agent.\n   Further, it is possible\
    \ for the user agent to name the network\n   application that caused a HIP-related\
    \ event.  This way, the user is\n   aware when he or she is using HIP even though\
    \ the legacy network\n   application is not.  Based on usability tests from initial\n\
    \   deployments, displaying the HITs and LSIs should be avoided in user\n   interfaces.\
    \  Instead, traditional security measures (lock pictures,\n   colored address\
    \ bars) should be used where possible.\n   One drawback to spoofing the DNS resolution\
    \ is that some\n   applications, or selected instances of an application, actually\
    \ may\n   want to fetch IP addresses (e.g., diagnostic applications such as\n\
    \   ping).  One way to provide finer granularity on whether the resolver\n   returns\
    \ an IP address or an LSI is to have the user form a modified\n   domain name\
    \ when he or she wants to invoke HIP.  This leads us to\n   consider, in the next\
    \ section, use cases for which the end user\n   explicitly and selectively chooses\
    \ to enable HIP.\n"
- title: 4.  Users Invoking HIP with a Legacy Application
  contents:
  - "4.  Users Invoking HIP with a Legacy Application\n   The previous section described\
    \ approaches for configuring HIP for\n   legacy applications that did not necessarily\
    \ involve the user.\n   However, there may be cases in which a legacy application\
    \ user wants\n   to use HIP for a given application instance by signaling to the\
    \ HIP-\n   enabled system in some way.  If the application user interface or\n\
    \   configuration file accepts IP addresses, there may be an opportunity\n   to\
    \ provide a HIT or an LSI in its place.  Furthermore, if the\n   application uses\
    \ DNS, a user may provide a specially crafted domain\n   name to signal to the\
    \ resolver to fetch HIP records and to signal to\n   the system to use HIP.  We\
    \ describe both of these approaches below.\n"
- title: 4.1.  Connecting to a HIT or LSI
  contents:
  - "4.1.  Connecting to a HIT or LSI\n   Section 3.2 above describes the use of HITs\
    \ or LSIs as spoofed return\n   values of the DNS resolution process.  A similar\
    \ approach that is\n   more explicit is to configure the application to connect\
    \ directly to\n   a HIT (e.g., \"connect(HIT)\" as a socket call).  This scenario\
    \ has\n   stronger security semantics, because the application is asking the\n\
    \   system to send packets specifically to the named peer system.  HITs\n   have\
    \ been defined as Overlay Routable Cryptographic Hash Identifiers\n   (ORCHIDs)\
    \ such that they cannot be confused with routable IP\n   addresses; see [RFC4843].\n\
    \   This approach also has a few challenges.  Using HITs can be more\n   cumbersome\
    \ for human users (due to the flat HIT name space) than\n   using either IPv6\
    \ addresses or domain names.  Another challenge with\n   this approach is in actually\
    \ finding the IP addresses to use, based\n   on the HIT.  Some type of HIT resolution\
    \ service would be needed in\n   this case.  A third challenge of this approach\
    \ is in supporting\n   callbacks and referrals to possibly non-HIP-aware hosts.\
    \  However,\n   since most communications in this case would likely be to other\
    \ HIP-\n   aware hosts (else the initial HIP associations would fail to\n   establish),\
    \ the resulting referral problem may be that the peer host\n   supports HIP but\
    \ is not able to perform HIT resolution for some\n   reason.\n"
- title: 4.2.  Using a Modified DNS Name
  contents:
  - "4.2.  Using a Modified DNS Name\n   Specifically, if the application requests\
    \ to resolve \"HIP-\n   www.example.com\" (or some similar prefix string), then\
    \ the system\n   returns an LSI, while if the application requests to resolve\n\
    \   \"www.example.com\", IP address(es) are returned as usual.  The use of\n \
    \  a prefix rather than suffix is recommended, and the use of a string\n   delimiter\
    \ that is not a dot (\".\") is also recommended, to reduce the\n   likelihood\
    \ that such modified DNS names are mistakenly treated as\n   names rooted at a\
    \ new top-level domain.  Limits of domain name length\n   or label length (255\
    \ or 63, respectively) should be considered when\n   prepending any prefixes.\n"
- title: 4.3.  Other Techniques
  contents:
  - "4.3.  Other Techniques\n   Alternatives to using a modified DNS name that have\
    \ been experimented\n   with include the following.  Command-line tools or tools\
    \ with a\n   graphical user interface (GUI) can be provided by the system to allow\n\
    \   a user to set the policy on which applications use HIP.  Another\n   common\
    \ technique, for dynamically linked applications, is to\n   dynamically link the\
    \ application to a modified library that wraps the\n   system calls and interposes\
    \ HIP layer communications on them; this\n   can be invoked by the user by running\
    \ commands through a special\n   shell, for example.\n"
- title: 5.  Local Address Management
  contents:
  - "5.  Local Address Management\n   The previous two sections focused mainly on\
    \ controlling client\n   behavior (HIP initiator).  We must also consider the\
    \ behavior for\n   servers.  Typically, a server binds to a wildcard IP address\
    \ and\n   well-known port.  In the case of HIP use with legacy server\n   implementations,\
    \ there are again a few options.  The system may be\n   configured manually to\
    \ always, optionally (depending on the client\n   behavior), or never use HIP\
    \ with a particular service, as a matter of\n   policy, when the server specifies\
    \ a wildcard (IP) address.\n   When a system API call such as getaddrinfo [RFC3493]\
    \ is used for\n   resolving local addresses, it may also return HITs or LSIs,\
    \ if the\n   system has assigned HITs or LSIs to internal virtual interfaces\n\
    \   (common in many HIP implementations).  The application may use such\n   identifiers\
    \ as addresses in subsequent socket calls.\n   Some applications may try to bind\
    \ a socket to a specific local\n   address, or may implement server-side access\
    \ control lists based on\n   socket calls such as getsockname() and getpeername()\
    \ in the C-based\n   socket APIs.  If the local address specified is an IP address,\
    \ again,\n   the underlying system may be configured to still use HIP.  If the\n\
    \   local address specified is a HIT (Section 4), the system should\n   enforce\
    \ that connections to the local application can only arrive to\n   the specified\
    \ HIT.  If a system has many HIs, an application that\n   binds to a single HIT\
    \ cannot accept connections to the other HIs but\n   the one corresponding to\
    \ the specified HIT.\n   When a host has multiple HIs and the socket behavior\
    \ does not\n   prescribe the use of any particular HI as a local identifier, it\
    \ is a\n   matter of local policy as to how to select a HI to serve as a local\n\
    \   identifier.  However, systems that bind to a wildcard may face\n   problems\
    \ when multiple HITs or LSIs are defined.  These problems are\n   not specific\
    \ to HIP per se, but are also encountered in non-HIP\n   multihoming scenarios\
    \ with applications not designed for multihoming.\n   As an example, consider\
    \ a client application that sends a UDP\n   datagram to a server that is bound\
    \ to a wildcard.  The server\n   application receives the packet using recvfrom()\
    \ and sends a response\n   using sendto().  The problem here is that sendto()\
    \ may actually use a\n   different server HIT than the client assumes.  The client\
    \ will drop\n   the response packet when the client implements access control\
    \ on the\n   UDP socket (e.g., using connect()).\n   Reimplementing the server\
    \ application using the sendmsg() and\n   recvmsg() to support multihoming (particularly\
    \ considering the\n   ancillary data) would be the ultimate solution to this problem,\
    \ but\n   with legacy applications is not an option.  As a workaround, we make\n\
    \   suggestion for servers providing UDP-based services with non-\n   multihoming-capable\
    \ services.  Such servers should announce only the\n   HIT or public key that\
    \ matches to the default outgoing HIT of the\n   host to avoid such problems.\n\
    \   Finally, some applications may create a connection to a local HIT.\n   In\
    \ such a case, the local system may use NULL encryption to avoid\n   unnecessary\
    \ encryption overhead, and may be otherwise more permissive\n   than usual such\
    \ as excluding authentication, Diffie-Hellman exchange,\n   and puzzle.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   In this section, we discuss the security of the\
    \ system in general\n   terms, outlining some of the security properties.  However,\
    \ this\n   section is not intended to provide a complete risk analysis.  Such\
    \ an\n   analysis would, in any case, be dependent on the actual application\n\
    \   using HIP, and is therefore considered out of scope.\n   The scenarios outlined\
    \ above differ considerably in their security\n   properties.  When the DNS is\
    \ used, there are further differences\n   related to whether or not DNSSEC [RFC4033]\
    \ is used, and whether the\n   DNS zones are considered trustworthy enough.  Here\
    \ we mean that there\n   should exist a delegation chain to whatever trust anchors\
    \ are\n   available in the respective trees, and the DNS zone administrators in\n\
    \   charge of the netblock should be trusted to put in the right\n   information.\n\
    \   When IP addresses are used by applications to name the peer system,\n   the\
    \ security properties depend on the configuration method.  With\n   manual configuration,\
    \ the security of the system is comparable to a\n   non-HIP system with similar\
    \ IPsec policies.  The security semantics\n   of an initial opportunistic key\
    \ exchange are roughly equal to non-\n   secured IP; the exchange is vulnerable\
    \ to man-in-the-middle attacks.\n   However, the system is less vulnerable to\
    \ connection hijacking\n   attacks.  If the DNS is used, if both zones are secured\
    \ (or the HITs\n   are stored in the reverse DNS record) and the client trusts\
    \ the\n   DNSSEC signatures, the system may provide a fairly high security\n \
    \  level.  However, much depends on the details of the implementation,\n   the\
    \ security and administrative practices used when signing the DNS\n   zones, and\
    \ other factors.\n   Using the forward DNS to map a domain name into an LSI is\
    \ a case that\n   is closest to the most typical use scenarios today.  If DNSSEC\
    \ is\n   used, the result is fairly similar to the current use of certificates\n\
    \   with Transport Layer Security (TLS).  If DNSSEC is not used, the\n   result\
    \ is fairly similar to the current use of plain IP, with the\n   additional protection\
    \ of data integrity, confidentiality, and\n   prevention of connection hijacking\
    \ that opportunistic HIP provides.\n   If DNSSEC is used, data integrity and data\
    \ origin authentication\n   services are added to the normal DNS query protocol,\
    \ thereby\n   providing more certainty that the desired host is being contacted,\
    \ if\n   the DNS records themselves are trustworthy.\n   If the application is\
    \ basing its operations on HITs, the connections\n   become automatically secured\
    \ due to the implicit channel bindings in\n   HIP.  That is, when the application\
    \ makes a connect(HIT) system call,\n   either the resulting packets will be sent\
    \ to a node possessing the\n   corresponding private key or the security association\
    \ will fail to be\n   established.\n   When the system provides (spoofs) LSIs\
    \ or HITs instead of IP\n   addresses as the result of name resolution, the resultant\
    \ fields may\n   inadvertently show up in user interfaces and system logs, which\
    \ may\n   cause operational concerns for some network administrators.\n   Therefore,\
    \ it is recommended that the HIP software logs the HITs,\n   LSIs (if applicable),\
    \ corresponding IP addresses, and FQDN-related\n   information so that administrators\
    \ can correlate other logs with HIP\n   identifiers.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   Jeff Ahrenholz, Gonzalo Camarillo, Alberto Garcia, Teemu\
    \ Koponen,\n   Julien Laganier, and Jukka Ylitalo have provided comments on\n\
    \   different versions of this document.  The document received\n   substantial\
    \ and useful comments during the review phase from David\n   Black, Lars Eggert,\
    \ Peter Koch, Thomas Narten, and Pekka Savola.\n"
- title: 8.  Informative References
  contents:
  - "8.  Informative References\n   [RFC5201]  Moskowitz, R., Nikander, P., Jokela,\
    \ P., Ed., and T.\n              Henderson, \"Host Identity Protocol\", RFC 5201,\
    \ April 2008.\n   [RFC4843]   Nikander, P., Laganier, J., and F. Dupont, \"An\
    \ IPv6\n              Prefix for Overlay Routable Cryptographic Hash Identifiers\n\
    \              (ORCHID)\", RFC 4843, April 2007.\n   [TESLA]     Salz, J., Balakrishnan,\
    \ H., and A. Snoeren, \"TESLA:  A\n              Transparent, Extensible Session-Layer\
    \ Architecture for\n              End-to-end Network Services\",  Proceedings\
    \ of USENIX\n              Symposium on Internet Technologies and Systems (USITS),\n\
    \              pages 211-224, March 2003.\n   [RFC1958]  Carpenter, B., Ed., \"\
    Architectural Principles of the\n              Internet\", RFC 1958, June 1996.\n\
    \   [RFC4033]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"DNS Security Introduction and Requirements\", RFC\n        \
    \      4033, March 2005.\n   [RFC3493]  Gilligan, R., Thomson, S., Bound, J.,\
    \ McCann, J., and W.\n              Stevens, \"Basic Socket Interface Extensions\
    \ for IPv6\", RFC\n              3493, February 2003.\n   [APP_REF]  Nordmark,\
    \ E., \"Shim6 Application Referral Issues\", Work in\n              Progress,\
    \ July 2005.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Thomas Henderson\n   The Boeing Company\n   P.O. Box 3707\n\
    \   Seattle, WA\n   USA\n   EMail: thomas.r.henderson@boeing.com\n   Pekka Nikander\n\
    \   Ericsson Research NomadicLab\n   JORVAS  FIN-02420\n   FINLAND\n   Phone:\
    \ +358 9 299 1\n   EMail: pekka.nikander@nomadiclab.com\n   Miika Komu\n   Helsinki\
    \ Institute for Information Technology\n   Metsaenneidonkuja 4\n   Helsinki  FIN-02420\n\
    \   FINLAND\n   Phone: +358503841531\n   EMail: miika@iki.fi\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
