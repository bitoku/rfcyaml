- title: __initial_text__
  contents:
  - '                         Scripting Media Types

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the registration of media types for the\n\
    \   ECMAScript and JavaScript programming languages and conformance\n   requirements\
    \ for implementations of these types.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Conformance and Document Conventions ............................2\n  \
    \ 3. Deployed Scripting Media Types and Compatibility ................2\n   4.\
    \ Character Encoding Scheme Handling ..............................4\n      4.1.\
    \ Charset Parameter ..........................................4\n      4.2. Character\
    \ Encoding Scheme Detection ........................4\n      4.3. Character Encoding\
    \ Scheme Error Handling ...................6\n   5. Security Considerations .........................................6\n\
    \   6. IANA Considerations .............................................8\n  \
    \ 7. JavaScript Media Types ..........................................9\n    \
    \  7.1. text/javascript (obsolete) .................................9\n      7.2.\
    \ application/javascript ....................................10\n   8. ECMAScript\
    \ Media Types .........................................11\n      8.1. text/ecmascript\
    \ (obsolete) ................................11\n      8.2. application/ecmascript\
    \ ....................................12\n   9. References .....................................................13\n\
    \      9.1. Normative References ......................................13\n  \
    \    9.2. Informative References ....................................13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo describes media types for the JavaScript and ECMAScript\n\
    \   programming languages.  Refer to \"Brief History\" and \"Overview\" in\n \
    \  [ECMA] for background information on these languages.\n   Programs written\
    \ in these programming languages have historically\n   been interchanged using\
    \ inapplicable, experimental, and unregistered\n   media types.  This document\
    \ defines four of the most commonly used\n   media types for such programs to\
    \ reflect this usage in the IANA media\n   type registry, to foster interoperability\
    \ by defining underspecified\n   aspects, and to provide general security considerations.\n"
- title: 2.  Conformance and Document Conventions
  contents:
  - "2.  Conformance and Document Conventions\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in BCP 14, [RFC2119] and\n   indicate requirement levels for compliant implementations.\n\
    \   Requirements apply to all implementations unless otherwise stated.\n   An\
    \ implementation is a software module that supports one of the media\n   types\
    \ defined in this document.  Software modules may support\n   multiple media types\
    \ but conformance is considered individually for\n   each type.\n   Implementations\
    \ that fail to satisfy one or more \"MUST\" requirements\n   are considered non-compliant.\
    \  Implementations that satisfy all\n   \"MUST\" requirements, but fail to satisfy\
    \ one or more \"SHOULD\"\n   requirements, are said to be \"conditionally compliant\"\
    .  All other\n   implementations are \"unconditionally compliant\".\n"
- title: 3.  Deployed Scripting Media Types and Compatibility
  contents:
  - "3.  Deployed Scripting Media Types and Compatibility\n   Various unregistered\
    \ media types have been used in an ad-hoc fashion\n   to label and exchange programs\
    \ written in ECMAScript and JavaScript.\n   These include:\n      +-----------------------------------------------------+\n\
    \      | text/javascript          | text/ecmascript          |\n      | text/javascript1.0\
    \       | text/javascript1.1       |\n      | text/javascript1.2       | text/javascript1.3\
    \       |\n      | text/javascript1.4       | text/javascript1.5       |\n   \
    \   | text/jscript             | text/livescript          |\n      | text/x-javascript\
    \        | text/x-ecmascript        |\n      | application/x-javascript | application/x-ecmascript\
    \ |\n      | application/javascript   | application/ecmascript   |\n      +-----------------------------------------------------+\n\
    \   Use of the \"text\" top-level type for this kind of content is known to\n\
    \   be problematic.  This document thus defines text/javascript and text/\n  \
    \ ecmascript but marks them as \"obsolete\".  Use of experimental and\n   unregistered\
    \ media types, as listed in part above, is discouraged.\n   The media types,\n\
    \      * application/javascript\n      * application/ecmascript\n   which are\
    \ also defined in this document, are intended for common use\n   and should be\
    \ used instead.\n   This document defines equivalent processing requirements for\
    \ the\n   types text/javascript, text/ecmascript, and application/javascript.\n\
    \   Use of and support for the media type application/ecmascript is\n   considerably\
    \ less widespread than for other media types defined in\n   this document.  Using\
    \ that to its advantage, this document defines\n   stricter processing rules for\
    \ this type to foster more interoperable\n   processing.\n   The types defined\
    \ in this document are applicable to scripts written\n   in [JS15] and [ECMA],\
    \ respectively, as well as to scripts written in\n   a compatible language or\
    \ profile such as [EcmaCompact].\n   This document does not address scripts written\
    \ in other languages.\n   In particular, future versions of JavaScript, future\
    \ editions of\n   [ECMA], and extensions to [ECMA], such as [E4X], are not directly\n\
    \   addressed.  This document may be updated to take other content into\n   account.\n\
    \   Updates of this document may introduce new optional parameters;\n   implementations\
    \ MUST consider the impact of such an update.  For the\n   application/ecmascript\
    \ media type, implementations MUST NOT process\n   content labeled with a \"version\"\
    \ parameter as if no such parameter\n   had been specified; this is typically\
    \ achieved by treating the\n   content as unsupported.  This error handling behavior\
    \ allows\n   extending the definition of the media type for content that cannot\
    \ be\n   processed by implementations of [ECMA].\n   The programming languages\
    \ defined in [JS15] and [ECMA] share a common\n   subset.  Choice of a type for\
    \ scripts compatible with both languages\n   is out of the scope of this document.\n\
    \   This document does not define how fragment identifiers in resource\n   identifiers\
    \ ([RFC3986], [RFC3987]) for documents labeled with one of\n   the media types\
    \ defined in this document are resolved.  An update of\n   this document may define\
    \ processing of fragment identifiers.\n"
- title: 4.  Character Encoding Scheme Handling
  contents:
  - "4.  Character Encoding Scheme Handling\n   Refer to [RFC3536] for a discussion\
    \ of terminology used in this\n   section.  Source text (as defined in [ECMA],\
    \ section 6) can be binary\n   source text.  Binary source text is a textual data\
    \ object that\n   represents source text encoded using a character encoding scheme.\
    \  A\n   textual data object is a whole text protocol message or a whole text\n\
    \   document, or a part of it, that is treated separately for purposes of\n  \
    \ external storage and retrieval.  An implementation's internal\n   representation\
    \ of source text and source text are not considered\n   binary source text.\n\
    \   Implementations need to determine a character encoding scheme in\n   order\
    \ to decode binary source text to source text.  The media types\n   defined in\
    \ this document allow an optional charset parameter to\n   explicitly specify\
    \ the character encoding scheme used to encode the\n   source text.\n   How implementations\
    \ determine the character encoding scheme can be\n   subject to processing rules\
    \ that are out of the scope of this\n   document.  For example, transport protocols\
    \ can require that a\n   specific character encoding scheme is to be assumed if\
    \ the optional\n   charset parameter is not specified, or they can require that\
    \ the\n   charset parameter is used in certain cases.  Such requirements are\n\
    \   not considered part of this document.\n   Implementations that support binary\
    \ source text MUST support binary\n   source text encoded using the UTF-8 [RFC3629]\
    \ character encoding\n   scheme.  Other character encoding schemes MAY be supported.\
    \  Use of\n   UTF-8 to encode binary source text is encouraged but not required.\n"
- title: 4.1.  Charset Parameter
  contents:
  - "4.1.  Charset Parameter\n   The charset parameter provides a means to specify\
    \ the character\n   encoding scheme of binary source text.  Its value MUST match\
    \ the\n   mime-charset production defined in [RFC2978], section 2.3, and SHOULD\n\
    \   be a registered charset [CHARSETS].  An illegal value is a value that\n  \
    \ does not match that production.\n"
- title: 4.2.  Character Encoding Scheme Detection
  contents:
  - "4.2.  Character Encoding Scheme Detection\n   It is possible that implementations\
    \ cannot interoperably determine a\n   single character encoding scheme simply\
    \ by complying with all\n   requirements of the applicable specifications.  To\
    \ foster\n   interoperability in such cases, the following algorithm is defined.\n\
    \   Implementations apply this algorithm until a single character\n   encoding\
    \ scheme is determined.\n   1.  If a charset parameter with a legal value is specified,\
    \ the value\n       determines the character encoding scheme.\n   2.  If the binary\
    \ source text starts with a Unicode encoding form\n       signature, the signature\
    \ determines the encoding.  The following\n       octet sequences, at the very\
    \ beginning of the binary source text,\n       are considered with their corresponding\
    \ character encoding\n       schemes:\n          +------------------+----------+\n\
    \          | Leading sequence | Encoding |\n          +------------------+----------+\n\
    \          | FF FE 00 00      | UTF-32LE |\n          | 00 00 FE FF      | UTF-32BE\
    \ |\n          | FF FE            | UTF-16LE |\n          | FE FF            |\
    \ UTF-16BE |\n          | EF BB BF         | UTF-8    |\n          +------------------+----------+\n\
    \       The longest matching octet sequence determines the encoding.\n       Implementations\
    \ of this step MUST use these octet sequences to\n       determine the character\
    \ encoding scheme, even if the determined\n       scheme is not supported.  If\
    \ this step determines the character\n       encoding scheme, the octet sequence\
    \ representing the Unicode\n       encoding form signature MUST be ignored when\
    \ decoding the binary\n       source text to source text.\n   3.  The character\
    \ encoding scheme is determined to be UTF-8.\n   If the character encoding scheme\
    \ is determined to be UTF-8 through\n   any means other than step 2 as defined\
    \ above and the binary source\n   text starts with the octet sequence EF BB BF,\
    \ the octet sequence is\n   ignored when decoding the binary source text to source\
    \ text.  (The\n   sequence will also be ignored if step 2 determines the character\n\
    \   encoding scheme per the requirements in step 2).\n   In the cited case, implementations\
    \ of the types text/javascript,\n   text/ecmascript, and application/javascript\
    \ SHOULD and\n   implementations of the type application/ecmascript MUST implement\
    \ the\n   requirements defined in this section.\n"
- title: 4.3.  Character Encoding Scheme Error Handling
  contents:
  - "4.3.  Character Encoding Scheme Error Handling\n   The following error processing\
    \ behavior is RECOMMENDED for the media\n   types text/javascript, text/ecmascript,\
    \ and application/javascript,\n   and REQUIRED for the media type application/ecmascript.\n\
    \   o  If the value of a charset parameter is illegal, implementations\n     \
    \ MUST either recover from the error by ignoring the parameter or\n      consider\
    \ the character encoding scheme unsupported.\n   o  If binary source text is determined\
    \ to have been encoded using a\n      certain character encoding scheme that the\
    \ implementation is\n      unable to process, implementations MUST consider the\
    \ resource\n      unsupported (i.e., they MUST NOT decode the binary source text\n\
    \      using a different character encoding scheme).\n   o  Binary source text\
    \ can be determined to have been encoded using a\n      certain character encoding\
    \ scheme but contain octet sequences that\n      are not legal according to that\
    \ scheme.  This is typically caused\n      by a lack of proper character encoding\
    \ scheme information; such\n      errors can pose a security risk, as discussed\
    \ in section 5.\n      Implementations SHOULD detect such errors as early as possible;\
    \ in\n      particular, they SHOULD detect them before interpreting any of the\n\
    \      source text.  Implementations MUST detect such errors and MUST NOT\n  \
    \    interpret any source text after detecting such an error.  Such\n      errors\
    \ MAY be reported, e.g., as syntax errors as defined in\n      [ECMA], section\
    \ 16.\n   This document does not define facilities that allow specification of\n\
    \   the character encoding scheme used to encode binary source text in a\n   conflicting\
    \ manner.  There are only two sources for character\n   encoding scheme information:\
    \ the charset parameter and the Unicode\n   encoding form signature.  If a charset\
    \ parameter is specified, binary\n   source text is processed as defined for that\
    \ character encoding\n   scheme.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Refer to [RFC3552] for a discussion of terminology\
    \ used in this\n   section.  Examples in this section and discussions of interactions\
    \ of\n   host environments with scripts and extensions to [ECMA] are to be\n \
    \  understood as non-exhaustive and of a purely illustrative nature.\n   The programming\
    \ language defined in [ECMA] is not intended to be\n   computationally self-sufficient,\
    \ rather it is expected that the\n   computational environment provides facilities\
    \ to programs to enable\n   specific functionality.  Such facilities constitute\
    \ unknown factors\n   and are thus considered out of the scope of this document.\n\
    \   Derived programming languages are permitted to include additional\n   functionality\
    \ that is not described in [ECMA]; such functionality\n   constitutes an unknown\
    \ factor and is thus considered out of the scope\n   of this document.  In particular,\
    \ extensions to [ECMA] defined for\n   the JavaScript programming language are\
    \ not discussed in this\n   document.\n   Uncontrolled execution of scripts can\
    \ be exceedingly dangerous.\n   Implementations that execute scripts MUST give\
    \ consideration to their\n   application's threat models and those of the individual\
    \ features they\n   implement; in particular, they MUST ensure that untrusted\
    \ content is\n   not executed in an unprotected environment.\n   Specifications\
    \ for host environment facilities and for derived\n   programming languages should\
    \ include security considerations.  If an\n   implementation supports such facilities,\
    \ the respective security\n   considerations apply.  In particular, if scripts\
    \ can be referenced\n   from or included in specific document formats, the considerations\
    \ for\n   the embedding or referencing document format apply.\n   For example,\
    \ scripts embedded in application/xhtml+xml [RFC3236]\n   documents could be enabled\
    \ through the host environment to manipulate\n   the document instance, which\
    \ could cause the retrieval of remote\n   resources; security considerations regarding\
    \ retrieval of remote\n   resources of the embedding document would apply in this\
    \ case.\n   This circumstance can further be used to make information, that is\n\
    \   normally only available to the script, available to a web server by\n   encoding\
    \ the information in the resource identifier of the resource,\n   which can further\
    \ enable eavesdropping attacks.  Implementation of\n   such facilities is subject\
    \ to the security considerations of the host\n   environment, as discussed above.\n\
    \   The facilities defined in [ECMA] do not include provisions for input\n   of\
    \ external data, output of computed results, or modification of\n   aspects of\
    \ the host environment.  An implementation of only the\n   facilities defined\
    \ in [ECMA] is not considered to support dangerous\n   operations.\n   The programming\
    \ language defined in [ECMA] does include facilities to\n   loop, cause computationally\
    \ complex operations, or consume large\n   amounts of memory; this includes, but\
    \ is not limited to, facilities\n   that allow dynamically generated source text\
    \ to be executed (e.g.,\n   the eval() function); uncontrolled execution of such\
    \ features can\n   cause denial of service, which implementations MUST protect\
    \ against.\n   A host environment can provide facilities to access external input.\n\
    \   Scripts that pass such input to the eval() function or similar\n   language\
    \ features can be vulnerable to code injection attacks.\n   Scripts are expected\
    \ to protect against such attacks.\n   A host environment can provide facilities\
    \ to output computed results\n   in a user-visible manner.  For example, host\
    \ environments supporting\n   a graphical user interface can provide facilities\
    \ that enable scripts\n   to present certain messages to the user.  Implementations\
    \ MUST take\n   steps to avoid confusion of the origin of such messages.  In general,\n\
    \   the security considerations for the host environment apply in such a\n   case\
    \ as discussed above.\n   Implementations are required to support the UTF-8 character\
    \ encoding\n   scheme; the security considerations of [RFC3629] apply.  Additional\n\
    \   character encoding schemes may be supported; support for such schemes\n  \
    \ is subject to the security considerations of those schemes.\n   Source text\
    \ is expected to be in Unicode Normalization Form C.\n   Scripts and implementations\
    \ MUST consider security implications of\n   unnormalized source text and data.\
    \  For a detailed discussion of such\n   implications refer to the security considerations\
    \ in [RFC3629].\n   Scripts can be executed in an environment that is vulnerable\
    \ to code\n   injection attacks.  For example, a CGI script [RFC3875] echoing\
    \ user\n   input could allow the inclusion of untrusted scripts that could be\n\
    \   executed in an otherwise trusted environment.  This threat scenario\n   is\
    \ subject to security considerations that are out of the scope of\n   this document.\n\
    \   The \"data\" resource identifier scheme [RFC2397], in combination with\n \
    \  the types defined in this document, could be used to cause execution\n   of\
    \ untrusted scripts through the inclusion of untrusted resource\n   identifiers\
    \ in otherwise trusted content.  Security considerations of\n   [RFC2397] apply.\n\
    \   Implementations can fail to implement a specific security model or\n   other\
    \ means to prevent possibly dangerous operations.  Such failure\n   could possibly\
    \ be exploited to gain unauthorized access to a system\n   or sensitive information;\
    \ such failure constitutes an unknown factor\n   and is thus considered out of\
    \ the scope of this document.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document registers four new media types as defined\
    \ in the\n   following sections.\n"
- title: 7.  JavaScript Media Types
  contents:
  - '7.  JavaScript Media Types

    '
- title: 7.1.  text/javascript (obsolete)
  contents:
  - "7.1.  text/javascript (obsolete)\n   Type name:               text\n   Subtype\
    \ name:            javascript\n   Required parameters:     none\n   Optional parameters:\
    \     charset, see section 4.1.\n   Encoding considerations:\n      The same as\
    \ the considerations in section 3.1 of [RFC3023].\n   Security considerations:\
    \ See section 5.\n   Interoperability considerations:\n      None, except as noted\
    \ in other sections of this document.\n   Published specification: [JS15]\n  \
    \ Applications which use this media type:\n      Script interpreters as discussed\
    \ in this document.\n   Additional information:\n      Magic number(s):      \
    \       n/a\n      File extension(s):           .js\n      Macintosh File Type\
    \ Code(s): TEXT\n   Person & email address to contact for further information:\n\
    \      See Author's Address section.\n   Intended usage:          OBSOLETE\n \
    \  Restrictions on usage:   n/a\n   Author:                  See Author's Address\
    \ section.\n   Change controller:       The IESG.\n"
- title: 7.2.  application/javascript
  contents:
  - "7.2.  application/javascript\n   Type name:               application\n   Subtype\
    \ name:            javascript\n   Required parameters:     none\n   Optional parameters:\
    \     charset, see section 4.1.\n   Encoding considerations:\n      The same as\
    \ the considerations in section 3.2 of [RFC3023].\n   Security considerations:\
    \ See section 5.\n   Interoperability considerations:\n      None, except as noted\
    \ in other sections of this document.\n   Published specification: [JS15]\n  \
    \ Applications which use this media type:\n      Script interpreters as discussed\
    \ in this document.\n   Additional information:\n      Magic number(s):      \
    \       n/a\n      File extension(s):           .js\n      Macintosh File Type\
    \ Code(s): TEXT\n   Person & email address to contact for further information:\n\
    \      See Author's Address section.\n   Intended usage:          COMMON\n   Restrictions\
    \ on usage:   n/a\n   Author:                  See Author's Address section.\n\
    \   Change controller:       The IESG.\n"
- title: 8.  ECMAScript Media Types
  contents:
  - '8.  ECMAScript Media Types

    '
- title: 8.1.  text/ecmascript (obsolete)
  contents:
  - "8.1.  text/ecmascript (obsolete)\n   Type name:               text\n   Subtype\
    \ name:            ecmascript\n   Required parameters:     none\n   Optional parameters:\
    \     charset, see section 4.1.\n   Encoding considerations:\n      The same as\
    \ the considerations in section 3.1 of [RFC3023].\n   Security considerations:\
    \ See section 5.\n   Interoperability considerations:\n      None, except as noted\
    \ in other sections of this document.\n   Published specification: [ECMA]\n  \
    \ Applications which use this media type:\n      Script interpreters as discussed\
    \ in this document.\n   Additional information:\n      Magic number(s):      \
    \       n/a\n      File extension(s):           .es\n      Macintosh File Type\
    \ Code(s): TEXT\n   Person & email address to contact for further information:\n\
    \      See Author's Address section.\n   Intended usage:          OBSOLETE\n \
    \  Restrictions on usage:   n/a\n   Author:                  See Author's Address\
    \ section.\n   Change controller:       The IESG.\n"
- title: 8.2.  application/ecmascript
  contents:
  - "8.2.  application/ecmascript\n   Type name:               application\n   Subtype\
    \ name:            ecmascript\n   Required parameters:     none\n   Optional parameters:\
    \     charset, see section 4.1.\n      Note: Section 3 defines error handling\
    \ behavior for content\n      labeled with a \"version\" parameter.\n   Encoding\
    \ considerations:\n      The same as the considerations in section 3.2 of [RFC3023].\n\
    \   Security considerations: See section 5.\n   Interoperability considerations:\n\
    \      None, except as noted in other sections of this document.\n   Published\
    \ specification: [ECMA]\n   Applications which use this media type:\n      Script\
    \ interpreters as discussed in this document.\n   Additional information:\n  \
    \    Magic number(s):             n/a\n      File extension(s):           .es\n\
    \      Macintosh File Type Code(s): TEXT\n   Person & email address to contact\
    \ for further information:\n      See Author's Address section.\n   Intended usage:\
    \          COMMON\n   Restrictions on usage:   n/a\n   Author:               \
    \   See Author's Address section.\n   Change controller:       The IESG.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [CHARSETS]     IANA, \"Assigned character sets\"\
    ,\n                  <http://www.iana.org/assignments/character-sets>.\n   [ECMA]\
    \         European Computer Manufacturers Association,\n                  \"ECMAScript\
    \ Language Specification 3rd Edition\",\n                  December 1999, <http://www.ecma-international.org/\n\
    \                  publications/standards/Ecma-262.htm>\n   [RFC2119]      Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n                  Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC2978]      Freed, N. and J. Postel, \"\
    IANA Charset Registration\n                  Procedures\", BCP 19, RFC 2978, October\
    \ 2000.\n   [RFC3023]      Murata, M., St. Laurent, S., and D. Kohn, \"XML Media\n\
    \                  Types\", RFC 3023, January 2001.\n   [RFC3536]      Hoffman,\
    \ P., \"Terminology Used in Internationalization\n                  in the IETF\"\
    , RFC 3536, May 2003.\n   [RFC3552]      Rescorla, E. and B. Korver, \"Guidelines\
    \ for Writing\n                  RFC Text on Security Considerations\", BCP 72,\
    \ RFC\n                  3552, July 2003.\n   [RFC3629]      Yergeau, F., \"UTF-8,\
    \ a transformation format of ISO\n                  10646\", STD 63, RFC 3629,\
    \ November 2003.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [E4X]          European Computer Manufacturers\
    \ Association,\n                  \"ECMAScript for XML (E4X)\", June 2004,\n \
    \                 <http://www.ecma-international.org/\n                  publications/standards/Ecma-357.htm>\n\
    \   [EcmaCompact]  European Computer Manufacturers Association,\n            \
    \      \"ECMAScript 3rd Edition Compact Profile\", June 2001,\n              \
    \    <http://www.ecma-international.org/\n                  publications/standards/Ecma-327.htm>\n\
    \   [JS15]         Netscape Communications Corp., \"Core JavaScript\n        \
    \          Reference 1.5\", September 2000,\n                  <http://web.archive.org/*/http://\n\
    \                  devedge.netscape.com/library/manuals/2000\n               \
    \   /javascript/1.5/reference/>.\n   [RFC2397]      Masinter, L., \"The \"data\"\
    \ URL scheme\", RFC 2397,\n                  August 1998.\n   [RFC3236]      Baker,\
    \ M. and P. Stark, \"The 'application/xhtml+xml'\n                  Media Type\"\
    , RFC 3236, January 2002.\n   [RFC3875]      Robinson, D. and K. Coar, \"The Common\
    \ Gateway\n                  Interface (CGI) Version 1.1\", RFC 3875, October\
    \ 2004.\n   [RFC3986]      Berners-Lee, T., Fielding, R., and L. Masinter,\n \
    \                 \"Uniform Resource Identifier (URI): Generic Syntax\",\n   \
    \               STD 66, RFC 3986, January 2005.\n   [RFC3987]      Duerst, M.\
    \ and M. Suignard, \"Internationalized\n                  Resource Identifiers\
    \ (IRIs)\", RFC 3987, January 2005.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Bjoern Hoehrmann\n   Weinheimer Strasse 22\n   Mannheim\
    \  D-68309\n   Germany\n   EMail: bjoern@hoehrmann.de\n   URI:   http://bjoern.hoehrmann.de\n\
    \   Note: Please write \"Bjoern Hoehrmann\" with o-umlaut (U+00F6) wherever\n\
    \   possible, e.g., as \"Bj&#246;rn H&#246;hrmann\" in HTML and XML.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
