- title: __initial_text__
  contents:
  - '                  Use of ISO CLNP in TUBA Environments

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo specifies a profile of the ISO/IEC 8473 Connectionless-mode\n\
    \   Network Layer Protocol (CLNP, [1]) for use in conjunction with RFC\n   1347,\
    \ TCP/UDP over Bigger Addresses (TUBA, [2]).  It describes the\n   use of CLNP\
    \ to provide the lower-level service expected by\n   Transmission Control Protocol\
    \ (TCP, [3]) and User Datagram Protocol\n   (UDP, [4]).  CLNP provides essentially\
    \ the same datagram service as\n   Internet Protocol (IP, [5]), but offers a means\
    \ of conveying bigger\n   network addresses (with additional structure, to aid\
    \ routing).\n   While the protocols offer nearly the same services, IP and CLNP\
    \ are\n   not identical. This document describes a means of preserving the\n \
    \  semantics of IP information that is absent from CLNP while preserving\n   consistency\
    \ between the use of CLNP in Internet and OSI environments.\n   This maximizes\
    \ the use of already-deployed CLNP implementations.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Many thanks to Ross Callon (Wellfleet Communications), John\
    \ Curran\n   (BBN), Cyndi Jung (3Com), Paul Brooks (UNSW), Brian Carpenter (CERN),\n\
    \   Keith Sklower (Cal Berkeley), Dino Farinacci and Dave Katz (Cisco\n   Systems),\
    \ Rich Colella (NIST/CSL) and David Oran (DEC) for their\n   assistance in composing\
    \ this text.\n"
- title: Conventions
  contents:
  - "Conventions\n   The following language conventions are used in the items of\n\
    \   specification in this document:\n         * MUST, SHALL, or MANDATORY -- the\
    \ item is an absolute\n           requirement of the specification.\n        \
    \ * SHOULD or RECOMMENDED -- the item should generally be\n           followed\
    \ for all but exceptional circumstances.\n         * MAY or OPTIONAL -- the item\
    \ is truly optional and may be\n           followed or ignored according to the\
    \ needs of the\n           implementor.\n"
- title: 1.  Terminology
  contents:
  - "1.  Terminology\n   To the extent possible, this document is written in the language\
    \ of\n   the Internet. For example, packet is used rather than \"protocol data\n\
    \   unit\", and \"fragment\" is used rather than \"segment\".  There are some\n\
    \   terms that carry over from OSI; these are, for the most part, used so\n  \
    \ that cross-reference between this document and RFC 994 [6] or ISO/IEC\n   8473\
    \ is not entirely painful.  OSI acronyms are for the most part\n   avoided.\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   The goal of this specification is to allow compatible and\n\
    \   interoperable implementations to encapsulate TCP and UDP packets in\n   CLNP\
    \ data units. In a sense, it is more of a \"hosts requirements\"\n   document\
    \ for the network layer of TUBA implementations than a\n   protocol specification.\
    \ It is assumed that readers are familiar with\n   STD 5, RFC 791, STD 5, RFC\
    \ 792 [7], STD 3, RFC 1122 [8], and, to a\n   lesser extent, RFC 994 and ISO/IEC\
    \ 8473.  This document is compatible\n   with (although more restrictive than)\
    \ ISO/IEC 8473; specifically, the\n   order, semantics, and processing of CLNP\
    \ header fields is consistent\n   between this and ISO/IEC 8473.\n   [Note: RFC\
    \ 994 contains the Draft International Standard version of\n   ISO CLNP, in ASCII\
    \ text. This is not the final version of the ISO/IEC\n   protocol specification;\
    \ however, it should provide sufficient\n   background for the purpose of understanding\
    \ the relationship of CLNP\n   to IP, and the means whereby IP information is\
    \ to be encoded in CLNP\n   header fields. Postscript versions of ISO CLNP and\
    \ associated routing\n   protocols are available via anonymous FTP from merit.edu,\
    \ and may be\n   found in the directory /pub/ISO/IEC.\n"
- title: 3.  Overview of CLNP
  contents:
  - "3.  Overview of CLNP\n   ISO CLNP is a datagram network protocol. It provides\
    \ fundamentally\n   the same underlying service to a transport layer as IP. CLNP\
    \ provides\n   essentially the same maximum datagram size, and for those\n   circumstances\
    \ where datagrams may need to traverse a network whose\n   maximum packet size\
    \ is smaller than the size of the datagram, CLNP\n   provides mechanisms for fragmentation\
    \ (data unit identification,\n   fragment/total length and offset). Like IP, a\
    \ checksum computed on\n   the CLNP header provides a verification that the information\
    \ used in\n   processing the CLNP datagram has been transmitted correctly, and\
    \ a\n   lifetime control mechanism (\"Time to Live\") imposes a limit on the\n\
    \   amount of time a datagram is allowed to remain in the internet\n   system.\
    \ As is the case in IP, a set of options provides control\n   functions needed\
    \ or useful in some situations but unnecessary for the\n   most common communications.\n\
    \   Note that the encoding of options differs between the two protocols,\n   as\
    \ do the means of higher level protocol identification. Note also\n   that CLNP\
    \ and IP differ in the way header and fragment lengths are\n   represented, and\
    \ that the granularity of lifetime control (time-to-\n   live) is finer in CLNP.\n\
    \   Some of these differences are not considered \"issues\", as CLNP\n   provides\
    \ flexibility in the way that certain options may be specified\n   and encoded\
    \ (this will facilitate the use and encoding of certain IP\n   options without\
    \ change in syntax); others, e.g., higher level\n   protocol identification and\
    \ timestamp, must be accommodated in a\n   transparent manner in this profile\
    \ for correct operation of TCP and\n   UDP, and continued interoperability with\
    \ OSI implementations. Section\n   4 describes how header fields of CLNP must\
    \ be populated to satisfy\n   the needs of TCP and UDP.\n   Errors detected during\
    \ the processing of a CLNP datagram MAY be\n   reported using CLNP Error Reports.\
    \ Implementations of CLNP for TUBA\n   environments MUST be capable of processing\
    \ Error Reports (this is\n   consistent with the 1992 edition (2)  of the ISO/IEC\
    \ 8473 standard).\n   Control messages (e.g., echo request/reply and redirect)\
    \ are\n   similarly handled in CLNP, i.e., identified as separate network layer\n\
    \   packet types.  The relationship between CLNP Error and Control\n   messages\
    \ and Internet Control Message Protocol (ICMP, [7]), and\n   issues relating to\
    \ the handling of these messages is described in\n   Section 5.\n   Table 1 provides\
    \ a high-level comparison of CLNP to IP:\n Function              | ISO CLNP  \
    \             | DOD IP\n ----------------------|------------------------|-----------------------\n\
    \ Header Length         | indicated in octets    | in 32-bit words\n Version Identifier\
    \    | 1 octet                | 4 bits\n Lifetime (TTL)        | 500 msec units\
    \         | 1 sec units\n Flags                 | Fragmentation allowed, | Don't\
    \ Fragment,\n                       | More Fragments         | More Fragments,\n\
    \                       | Suppress Error Reports | <not defined>\n Packet Type\
    \           | 5 bits                 | <not defined>\n Fragment Length       |\
    \ 16 bits, in octets     | 16 bits, in octets\n Header Checksum       | 16-bit\
    \ (Fletcher)      | 16-bit\n Total Length          | 16 bits, in octets     |\
    \ <not defined>\n Addressing            | Variable length        | 32-bit fixed\n\
    \ Data Unit Identifier  | 16 bits                | 16 bits\n Fragment offset \
    \      | 16 bits, in octets     | 13 bits, 8-octet units\n Higher Layer Protocol\
    \ | Selector in address    | Protocol\n Options               | Security     \
    \          | Security\n                       | Priority               | TOS Precedence\
    \ bits\n                       | Complete Source Route  | Strict Source Route\n\
    \                       | Quality of Service     | Type of Service\n         \
    \              | Partial Source Route   | Loose Source Route\n               \
    \        | Record Route           | Record Route\n                       | Padding\
    \                | Padding\n                       | <defined herein>       |\
    \ Timestamp\n                 Table 1. Comparison of IP to CLNP\n   The composition\
    \ and processing of a TCP pseudo-header when CLNP is\n   used to provide the lower-level\
    \ service expected by TCP and UDP is\n   described in Section 6.\n   [Note: This\
    \ experimental RFC does not discuss multicasting.\n   Presently, there are proposals\
    \ for multicast extensions for CLNP in\n   ISO/IEC/JTC1/SC6, and a parallel effort\
    \ within TUBA. A future\n   revision to this RFC will incorporate any extensions\
    \ to CLNP that may\n   be introduced as a result of the adoption of one of these\n\
    \   alternatives.]\n"
- title: 4.  Proposed Internet Header using CLNP
  contents:
  - "4.  Proposed Internet Header using CLNP\n   A summary of the contents of the\
    \ CLNP header, as it is proposed for\n   use in TUBA environments, is illustrated\
    \ in Figure 4-1:\n   0                   1                   2               \
    \    3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |     \
    \   ........Data Link Header........       | NLP ID        |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |Header Length  |     Version   | Lifetime (TTL)|Flags|  Type   |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |        Fragment Length        |           Checksum            |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  | Dest Addr Len |               Destination Address...          |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |               ... Destination Address...                      |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |               ... Destination Address...                      |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |               ... Destination Address...                      |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |               ... Destination Address...                      |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  | PROTO field   | Src  Addr Len |  Source  Address...           |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |               ... Source Address...                           |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |               ... Source Address...                           |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |               ... Source Address...                           |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |               ... Source Address...                           |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |Source Address |   Reserved    |       Data Unit Identifier    |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |         Fragment Offset       |   Total Length of packet      |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |                   Options  (see Table 1)                      |\n  |    \
    \                                                           |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  |                               Data                            |\n  |    \
    \                                                           |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         Note that each tick mark represents one bit position.\n            \
    \         Figure 4-1. CLNP for TUBA\n  Note 1: For illustrative purposes, Figure\
    \ 4-1 shows Destination\n          and Source Addresses having a length of 19\
    \ octets,\n          including the PROTO/reserved field. In general, addresses\n\
    \          can be variable length, up to a maximum of 20 octets,\n          including\
    \ the PROTO/reserved field.\n  Note 2: Due to differences in link layer protocols,\
    \ it is not\n          possible to ensure that the packet starts on an even\n\
    \          alignment. Note, however, that many link level protocols\n        \
    \  over which CLNP is operated use a odd length link\n          (e.g., IEEE 802.2).\
    \ (In Figure 4-1, the rest of the CLNP\n          packet is even-aligned.)\n \
    \  The encoding of CLNP fields for use in TUBA environments is as\n   follows.\n"
- title: 4.1  Network Layer Protocol Identification (NLP ID)
  contents:
  - "4.1  Network Layer Protocol Identification (NLP ID)\n   This one-octet field\
    \ identifies this as the ISO/IEC 8473 protocol; it\n   MUST set to binary 1000\
    \ 0001.\n"
- title: 4.2  Header Length Indication (Header Length)
  contents:
  - "4.2  Header Length Indication (Header Length)\n   Header Length is the length\
    \ of the CLNP header in octets, and thus\n   points to the beginning of the data.\
    \ The value 255 is reserved. The\n   header length is the same for all fragments\
    \ of the same (original)\n   CLNP packet.\n"
- title: 4.3  Version
  contents:
  - "4.3  Version\n   This one-octet field identifies the version of the protocol;\
    \ it MUST\n   be set to a binary value 0000 0001.\n"
- title: 4.4  Lifetime (TTL)
  contents:
  - "4.4  Lifetime (TTL)\n   Like the TTL field of IP, this field indicates the maximum\
    \ time the\n   datagram is allowed to remain in the internet system.  If this\
    \ field\n   contains the value zero, then the datagram MUST be destroyed; a host,\n\
    \   however, MUST NOT send a datagram with a lifetime value of zero.\n   This\
    \ field is modified in internet header processing.  The time is\n   measured in\
    \ units of 500 milliseconds, but since every module that\n   processes a datagram\
    \ MUST decrease the TTL by at least one even if it\n   process the datagram in\
    \ less than 500 millisecond, the TTL must be\n   thought of only as an upper bound\
    \ on the time a datagram may exist.\n   The intention is to cause undeliverable\
    \ datagrams to be discarded,\n   and to bound the maximum CLNP datagram lifetime.\
    \ [Like IP, the\n   colloquial usage of TTL in CLNP is as a coarse hop-count.]\n\
    \   Unless otherwise directed, a host SHOULD use a value of 255 as the\n   initial\
    \ lifetime value.\n"
- title: 4.5  Flags
  contents:
  - "4.5  Flags\n   Three flags are defined. These occupy bits 0, 1, and 2 of the\n\
    \   Flags/Type octet:\n                          0   1   2\n                 \
    \       +---+---+---+\n                        | F | M | E |\n               \
    \         | P | F | R |\n                        +---+---+---+\n   The Fragmentation\
    \ Permitted (FP) flag, when set to a value of one\n   (1), is semantically equivalent\
    \ to the \"may fragment\" value of the\n   Don't Fragment field of IP; similarly,\
    \ when set to zero (0), the\n   Fragmentation Permitted flag is semantically equivalent\
    \ to the \"Don't\n   Fragment\" value of the Don't Fragment Flag of IP.\n   [Note:\
    \ If the Fragmentation Permitted field is set to the value 0,\n   then the Data\
    \ Unit Identifier, Fragment Offset, and Total Length\n   fields are not present.\
    \ This denotes a single fragment datagram. In\n   such datagrams, the Fragment\
    \ Length field contains the total length\n   of the datagram.]\n   The More Fragments\
    \ flag of CLNP is semantically and syntactically the\n   same as the More Fragments\
    \ flag of IP; a value of one (1) indicates\n   that more segments/fragments are\
    \ forthcoming; a value of zero (0)\n   indicates that the last octet of the original\
    \ packet is present in\n   this segment.\n   The Error Report (ER) flag is used\
    \ to suppress the generation of an\n   error message by a host/router that detects\
    \ an error during the\n   processing of a CLNP datagram; a value of one (1) indicates\
    \ that the\n   host that originated this datagram thinks error reports are useful,\n\
    \   and would dearly love to receive one if a host/router finds it\n   necessary\
    \ to discard its datagram(s).\n"
- title: 4.6  Type field
  contents:
  - "4.6  Type field\n   The type field distinguishes data CLNP packets from Error\
    \ Reports\n   from Echo packets. The following values of the type field apply:\n\
    \     0   1   2   3   4   5   6   7\n   +---+---+---+---+---+---+---+---+\n  \
    \ |   flags   | 1 | 1 | 1 | 0 | 0 |  => Encoding of Type = data packet\n   +---+---+---+---+---+---+---+---+\n\
    \   |   flags   | 0 | 0 | 0 | 0 | 1 |  => Encoding of Type = error report\n  \
    \ +---+---+---+---+---+---+---+---+\n   |   flags   | 1 | 1 | 1 | 1 | 0 |  =>\
    \ Encoding of Type = echo request\n   +---+---+---+---+---+---+---+---+\n   |\
    \   flags   | 1 | 1 | 1 | 1 | 1 |  => Encoding of Type = echo reply\n   +---+---+---+---+---+---+---+---+\n\
    \   Error Report packets are described in Section 5.\n   Echo packets and their\
    \ use are described in RFC 1139 [9].\n"
- title: 4.7  Fragment Length
  contents:
  - "4.7  Fragment Length\n   Like the Total Length of the IP header, the Fragment\
    \ length field\n   contains the length in octets of the fragment (i.e., this datagram)\n\
    \   including both header and data.\n   [Note: CLNP also may also have a Total\
    \ Length field, that contains\n   the length of the original datagram; i.e., the\
    \ sum of the length of\n   the CLNP header plus the length of the data submitted\
    \ by the higher\n   level protocol, e.g., TCP or UDP. See Section 4.12.]\n"
- title: 4.8  Checksum
  contents:
  - "4.8  Checksum\n   A checksum is computed on the header only. It MUST be verified\
    \ at\n   each host/router that processes the packet; if header fields are\n  \
    \ changed during processing (e.g., the Lifetime), the checksum is\n   modified.\
    \ If the checksum is not used, this field MUST be coded with\n   a value of zero\
    \ (0). See Appendix A for algorithms used in the\n   computation and adjustment\
    \ of the checksum. Readers are encouraged to\n   see [10] for a description of\
    \ an efficient implementation of the\n   checksum algorithm.\n"
- title: 4.9  Addressing
  contents:
  - "4.9  Addressing\n   CLNP uses OSI network service access point addresses (NSAPAs);\
    \ NSAPAs\n   serve the same identification and location functions as an IP\n \
    \  address, plus the protocol selector value encoded in the IPv4\n   datagram\
    \ header, and  with additional hierarchy.  General purpose\n   CLNP implementations\
    \ MUST handle NSAP addresses of variable length up\n   to 20 octets, as defined\
    \ in ISO/IEC 8348 [11]. TUBA implementations,\n   especially routers, MUST accommodate\
    \ these as well. Thus, for\n   compatibility and interoperability with OSI use\
    \ of CLNP, the initial\n   octet of the Destination Address is assumed to be an\
    \ Authority and\n   Format Indicator, as defined in ISO/IEC 8348. NSAP addresses\
    \ may be\n   between 8 and 20 octets long (inclusive).\n   TUBA implementations\
    \ MUST support both ANSI and GOSIP style\n   addresses; these are described in\
    \ RFC 1237 [12], and illustrated in\n   Figure 4-2.  RFC 1237 describes the ANSI/GOSIP\
    \ initial domain parts\n   as well as the format and composition of the domain\
    \ specific part. It\n   is further recommended that TUBA implementations support\
    \ the\n   assignment of system identifiers for TUBA/CLNP hosts defined in [13]\n\
    \   for the purposes of host address autoconfiguration as described in\n   [14].\
    \ Additional considerations specific to the interpretation and\n   encoding of\
    \ the selector part are described in sections 4.9.2 and\n   4.9.4.\n         \
    \   +-------------+\n            | <-- IDP --> |\n            +----+--------+----------------------------------+\n\
    \            |AFI |  IDI   |           <-- DSP -->            |\n            +----+--------+----+---+-----+----+-----+---+----+\n\
    \            | 47 |  0005  |DFI |AA |Rsvd | RD |Area |ID |Sel |\n            +----+--------+----+---+-----+----+-----+---+----+\n\
    \     octets | 1  |   2    | 1  | 3 |  2  | 2  | 2   | 6 | 1  |\n            +----+--------+----+---+-----+----+-----+---+----+\n\
    \                 Figure 4-2 (a): GOSIP Version 2 NSAP structure.\n          \
    \  +-------------+\n            |<-- IDP -->  |\n            +----+--------+----------------------------------+\n\
    \            |AFI |  IDI   |          <-- DSP -->             |\n            +----+--------+----+---+-----+----+-----+---+----+\n\
    \            | 39 |  840   |DFI |ORG|Rsvd | RD |Area |ID |Sel |\n            +----+--------+----+---+-----+----+-----+---+----+\n\
    \     octets | 1  |   2    | 1  | 3 |  2  | 2  |  2  | 6 | 1  |\n            +----+--------+----+---+-----+----+-----+---+----+\n\
    \             Figure 4-2 (b): ANSI NSAP address format for DCC=840\n        Definitions:\n\
    \                     IDP   Initial Domain Part\n                     AFI   Authority\
    \ and Format Identifier\n                     IDI   Initial Domain Identifier\n\
    \                     DSP   Domain Specific Part\n                     DFI   DSP\
    \ Format Identifier\n                     AA    Administration Authority\n   \
    \                  ORG   Organization Name (numeric form)\n                  \
    \   Rsvd  Reserved\n                     RD    Routing Domain Identifier\n   \
    \                  Area  Area Identifier\n                     ID    System Identifier\n\
    \                     Sel   NSAP Selector\n"
- title: 4.9.1  Destination Address Length Indicator
  contents:
  - "4.9.1  Destination Address Length Indicator\n   This field indicates the length,\
    \ in octets, of the Destination\n   Address.\n"
- title: 4.9.2  Destination Address
  contents:
  - "4.9.2  Destination Address\n   This field contains an OSI NSAP address, as described\
    \ in Section 4.9.\n   It MUST always contain the address of the final destination.\
    \ (This is\n   true even for packets containing a source route option, see Section\n\
    \   4.13.4).\n   The final octet of the destination address MUST always contain\
    \ the\n   value of the PROTO field, as defined in IP.  The 8-bit PROTO field\n\
    \   indicates the next level protocol used in the data portion of the\n   CLNP\
    \ datagram.  The values for various protocols are specified in\n   \"Assigned\
    \ Numbers\" [15]. For the PROTO field, the value of zero (0)\n   is reserved.\n\
    \   TUBA implementations that support TCP/UDP as well as OSI MUST use the\n  \
    \ protocol value (1Dh, Internet decimal 29) reserved for ISO transport\n   protocol\
    \ class 4.\n"
- title: 4.9.3  Source Address Length Indicator
  contents:
  - "4.9.3  Source Address Length Indicator\n   This field indicates the length, in\
    \ octets, of the Source Address.\n"
- title: 4.9.4  Source Address
  contents:
  - "4.9.4  Source Address\n   This field contains an OSI NSAP address, as described\
    \ in Section 4.9.\n   The final octet of the source address is reserved. It MAY\
    \ be set to\n   the protocol field value on transmission, and shall be ignored\
    \ on\n   reception (the value of zero MUST not be used).\n"
- title: 4.10  Data Unit Identifier
  contents:
  - "4.10  Data Unit Identifier\n   Like the Identification field of IP, this 16-bit\
    \ field is used to\n   distinguish segments of the same (original) packet for\
    \ the purposes\n   of reassembly. This field is present when the fragmentation\
    \ permitted\n   flag is set to one.\n"
- title: 4.11  Fragment Offset
  contents:
  - "4.11  Fragment Offset\n   Like the Fragment Offset of IP, this 16-bit is used\
    \ to identify the\n   relative octet position of the data in this fragment with\
    \ respect to\n   the start of the data submitted to CLNP; i.e., it indicates where\
    \ in\n   the original datagram this fragment belongs.  The offset is measured\n\
    \   in octets; the value of this field shall always be a multiple of\n   eight\
    \ (8). This field is present when the fragmentation permitted\n   flag is set\
    \ to one.\n"
- title: 4.12  Total Length
  contents:
  - "4.12  Total Length\n   The total length of the CLNP packet in octets is determined\
    \ by the\n   originator and placed in the Total Length field of the header. The\n\
    \   Total Length field specifies the entire length of the original\n   datagram,\
    \ including both the header and data. This field MUST NOT be\n   changed in any\
    \ fragment of the original packet for the duration of\n   the packet lifetime.\
    \ This field is present when the fragmentation\n   permitted flag is set to one.\n"
- title: 4.13  Options
  contents:
  - "4.13  Options\n   All CLNP options are \"triplets\" of the form <parameter code>,\n\
    \   <parameter length>, and <parameter value>.  Both the parameter code\n   and\
    \ length fields are always one octet long; the length parameter\n   value, in\
    \ octets, is indicated in the parameter length field. The\n   following options\
    \ are defined for CLNP for TUBA.\n"
- title: 4.13.1  Security
  contents:
  - "4.13.1  Security\n   The value of the parameter code field is binary 1100 0101.\
    \ The length\n   field MUST be set to the length of a Basic (and Extended) Security\
    \ IP\n   option(s) as identified in RFC 1108 [16], plus 1.  Octet 1 of the\n \
    \  security parameter value field -- the CLNP Security Format Code -- is\n   set\
    \ to a binary value 0100 0000, indicating that the remaining octets\n   of the\
    \ security field contain either the Basic or Basic and Extended\n   Security options\
    \ as identified in RFC 1108. This encoding points to\n   the administration of\
    \ the source address (e.g., ISOC) as the\n   administration of the security option;\
    \ it is thus distinguished from\n   the globally unique format whose definition\
    \ is reserved for OSI use.\n   Implementations wishing to use a security option\
    \ MUST examine the\n   PROTO field in the source address; if the value of PROTO\
    \ indicates\n   the CLNP client is TCP or UDP, the security option described in\
    \ RFC\n   1108 is used.\n   [Note: If IP options change, TUBA implementations\
    \ MUST follow the new\n   recommendations. This RFC, or revisions thereof, must\
    \ document the\n   new recommendations to assure compatibility.]\n   The formats\
    \ of the Security option, encoded as a CLNP option, is as\n   follows. The CLNP\
    \ option will be used to convey the Basic and\n   Extended Security options as\
    \ sub-options; i.e., the exact encoding of\n   the Basic/Extended Security IP\
    \ Option is carried in a single CLNP\n   Security Option, with the length of the\
    \ CLNP Security option\n   reflecting the sum of the lengths of the Basic and\
    \ Extended Security\n   IP Option.\n   +--------+--------+--------+--------+--------+---//----+-\n\
    \   |11000100|XXXXXXXX|01000000|10000010|YYYYYYYY|         |      ...\n   +--------+--------+--------+--------+--------+---//----+----\n\
    \    CLNP       CLNP     CLNP     BASIC   BASIC    BASIC\n    OPTION    OPTION\
    \   FORMAT  SECURITY  OPTION   OPTION\n    TYPE      LENGTH    CODE    TYPE  \
    \   LENGTH   VALUE\n    (197)                       (130)\n                  \
    \        ---+------------+------------+----//-------+\n                     ...\
    \     |  10000101  |  000LLLLL  |             |\n                        -----+------------+------------+----//-------+\n\
    \                                EXTENDED     EXTENDED    EXTENDED OPTION\n  \
    \                              OPTION       OPTION          VALUE\n          \
    \                     TYPE (133)    LENGTH\n   The syntax, semantics and  processing\
    \ of the Basic and Extended IP\n   Security Options are defined in RFC 1108.\n"
- title: 4.13.2  Type of Service
  contents:
  - "4.13.2  Type of Service\n   [Note: Early drafts recommended the use of IP Type\
    \ of Service as\n   specified in RFC 1349. There now appears to be a broad consensus\
    \ that\n   this encoding is insufficient, and there is renewed interest in\n \
    \  exploring the utility of the \"congestion experienced\" flag available\n  \
    \ in the CLNP QOS Maintenance option. This RFC thus recommends the use\n   of\
    \ the QOS Maintenance option native to CLNP.]\n   The Quality of Service Maintenance\
    \ option allows the originator of a\n   CLNP datagram to convey information about\
    \ the quality of service\n   requested by the originating upper layer process.\
    \ Routers MAY use\n   this information as an aid in selecting a route when more\
    \ than one\n   route satisfying other routing criteria is available and the\n\
    \   available routes are know to differ with respect to the following\n   qualities\
    \ of service: ability to preserve sequence, transit delay,\n   cost, residual\
    \ error probability. Through this option, a router may\n   also indicate that\
    \ it is experiencing congestion.\n   The encoding of this option is as follows:\n\
    \      +-----------+-----------+----------+\n      | 1100 0011 | 0000 0001 | 110ABCDE\
    \ |\n      +-----------+-----------+----------+\n       CLNP QOS     OPTION  \
    \    QOS FLAGS\n       TYPE (195)   LENGTH\n   The value of the parameter code\
    \ field MUST be set to a value of\n   binary 1100 0011 (the CLNP Quality of Service\
    \ Option Code point).\n   The length field MUST be set to one (1).\n   Bits 8-6\
    \ MUST be set as indicated in the figure. The flags \"ABCDE\"\n   are interpreted\
    \ as follows:\n         A=1  choose path that maintains sequence over\n      \
    \        one that minimizes transit delay\n         A=0  choose path that minimizes\
    \ transit delay over\n              one that maintains sequence\n         B=1\
    \  congestion experienced\n         B=0  no congestion to report\n         C=1\
    \  choose path that minimizes transit delay over\n              over low cost\n\
    \         C=0  choose low cost over path that\n              minimizes transit\
    \ delay\n         D=1  choose pathe with low residual error probability over\n\
    \              one that minimizes transit delay\n         D=0  choose path that\
    \ minimizes transit delay over\n              one with low residual error probability\n\
    \         E=1  choose path with low residual error probability over\n        \
    \      low cost\n         E=0  choose path with low cost over one with low\n \
    \             residual error probability\n"
- title: 4.13.3  Padding
  contents:
  - "4.13.3  Padding\n   The padding field is used to lengthen the packet header to\
    \ a\n   convenient size. The parameter code field MUST be set to a value of\n\
    \   binary 1100 1100. The value of the  parameter length field is\n   variable.\
    \ The parameter value MAY contain any value; the contents of\n   padding fields\
    \ MUST be ignored by the receiver.\n      +----------+----------+-----------+\n\
    \      | 11001100 | LLLLLLLL | VVVV VVVV |\n      +----------+----------+-----------+\n"
- title: 4.13.4  Source Routing
  contents:
  - "4.13.4  Source Routing\n   Like the strict source route option of IP, the Complete\
    \ Source Route\n   option of CLNP is used to specify the exact and entire route\
    \ an\n   internet datagram MUST take. Similarly, the Partial Source Route\n  \
    \ option of CLNP provides the equivalent of the loose source route\n   option\
    \ of IP; i.e., a means for the source of an internet datagram to\n   supply (some)\
    \ routing information to be used by gateways in\n   forwarding the internet datagram\
    \ towards its destination. The\n   identifiers encoded in this option are network\
    \ entity titles, which\n   are semantically and syntactically the same as NSAPAs\
    \ and which can\n   be used to unambiguously identify a network entity in an intermediate\n\
    \   system (router).\n   The parameter code for Source Routing is binary 1100\
    \ 1000. The length\n   of the source routing parameter value is variable.\n  \
    \ The first octet of the parameter value is a type code, indicating\n   Complete\
    \ Source Routing (binary 0000 0001) or Partial Source Routing\n   (binary 0000\
    \ 0000). The second octet identifies the offset of the\n   next network entity\
    \ title to be processed in the list, relative to\n   the start of the parameter\
    \ (i.e., a value of 3 is used to identify\n   the first address in the list).\
    \ The offset value is modified by each\n   router using a complete source route\
    \ or by each listed router using a\n   partial source route to point to the next\
    \ NET.\n   The third octet begins the list of network entity titles. Only the\n\
    \   NETs of intermediate systems are included in the list; the source and\n  \
    \ destination addresses shall not be included.  The list consists of\n   variable\
    \ length network entity title entries; the first octet of each\n   entry gives\
    \ the length of the network entity title that comprises the\n   remainder of the\
    \ entry.\n"
- title: 4.13.5  Record Route
  contents:
  - "4.13.5  Record Route\n   Like the IP record route option, the Record route option\
    \ of CLNP is\n   used to trace the route a CLNP datagram takes.  A recorded route\n\
    \   consists of a list of network entity titles (see Source Routing). The\n  \
    \ list is constructed as the CLNP datagram is forwarded along a path\n   towards\
    \ its final destination. Only titles of intermediate systems\n   (routers) that\
    \ processed the datagram are included in the recorded\n   route; the network entity\
    \ title of the originator of the datagram\n   SHALL NOT be recorded in the list.\n\
    \   The parameter code for Record Route is binary 1100 1011. The length\n   of\
    \ the record route parameter value is variable.\n   The first octet of the parameter\
    \ value is a type code, indicating\n   Complete Recording of Route (0000 0001)\
    \ or Partial Recording of Route\n   (0000 0000). When complete recording of route\
    \ is selected, reassembly\n   at intermediate systems MAY be performed only when\
    \ all fragments of a\n   given datagram followed the same route; partial recording\
    \ of route\n   eliminates or \"loosens\" this constraint.\n   The second octet\
    \ identifies the offset where the next network entity\n   title entry (see Source\
    \ Routing) MAY be recorded (i.e., the end of\n   the current list), relative to\
    \ the start of the parameter.  A value\n   of 3 is used to identify the initial\
    \ recording position. The process\n   of recording a network entity title entry\
    \ is as follows. A router\n   adds the length of its network entity title entry\
    \ to the value of\n   record route offset and compares this new value to the record\
    \ route\n   list length indicator; if the value does not exceed the length of\
    \ the\n   list, entity title entry is recorded, and the offset value is\n   incremented\
    \ by the value of the length of the network entity title\n   entry. Otherwise,\
    \ the recording of route is terminated, and the\n   router MUST not record its\
    \ network entity title in the option. If\n   recording of route has been terminated,\
    \ this (second) octet has a\n   value 255.\n   The third octet begins the list\
    \ of network entity titles.\n"
- title: 4.13.6  Timestamp
  contents:
  - "4.13.6  Timestamp\n   [Note: There is no timestamp option in edition 1 of ISO/IEC\
    \ 8473, but\n   the option has been proposed and submitted to ISO/IEC JTC1/SC6.]\n\
    \   The parameter code value 1110 1110 is used to identify the Timestamp\n   option;\
    \ the syntax and semantics of Timestamp are identical to that\n   defined in IP.\n\
    \   The Timestamp Option is defined in STD 5, RFC 791. The CLNP parameter\n  \
    \ code 1110 1110 is used rather than the option type code 68 to\n   identify the\
    \ Timestamp option, and  the parameter value conveys the\n   option length. Octet\
    \ 1 of the Timestamp parameter value shall be\n   encoded as the pointer (octet\
    \ 3 of IP Timestamp); octet 2 of the\n   parameter value shall be encoded as the\
    \ overflow/format octet (octet\n   4 of IP Timestamp); the remaining octets shall\
    \ be used to encode the\n   timestamp list. The size is fixed by the source, and\
    \ cannot be\n   changed to accommodate additional timestamp information.\n   \
    \     +--------+--------+--------+--------+\n        |11101110| length | pointer|oflw|flg|\n\
    \        +--------+--------+--------+--------+\n        |         network entity\
    \ title      |\n        +--------+--------+--------+--------+\n        |     \
    \        timestamp             |\n        +--------+--------+--------+--------+\n\
    \        |                 .                 |\n                          .\n"
- title: 5.  Error Reporting and Control Message Handling
  contents:
  - "5.  Error Reporting and Control Message Handling\n   CLNP and IP  differ in the\
    \ way in which errors are reported to hosts.\n   In IP environments, the Internet\
    \ Control Message Protocol (ICMP, [7])\n   is used to return (error) messages\
    \ to hosts that originate packets\n   that cannot be processed. ICMP messages\
    \ are transmitted as user data\n   in IP datagrams. Unreachable destinations,\
    \ incorrectly composed IP\n   datagram headers, IP datagram discards due to congestion,\
    \ and\n   lifetime/reassembly time exceeded are reported; the complete internet\n\
    \   header that caused the error plus (at least) 8 octets of the segment\n   contained\
    \ in that IP datagram are returned to the sender as part of\n   the ICMP error\
    \ message. For certain errors, e.g., incorrectly\n   composed IP datagram headers,\
    \ the specific octet which caused the\n   problem is identified.\n   In CLNP environments,\
    \ an unique message type, the Error Report type,\n   is used in the network layer\
    \ protocol header to distinguish Error\n   Reports from CLNP datagrams. CLNP Error\
    \ Reports are generated on\n   detection of the same types of errors as with ICMP.\
    \  Like ICMP error\n   messages, the complete CLNP header that caused the error\
    \ is returned\n   to the sender in the data portion of the Error Report.\n   Implementations\
    \ SHOULD return at least 8 octets of the datagram\n   contained in the CLNP datagram\
    \ to the sender of the original CLNP\n   datagram. Here too, for certain errors,\
    \ the specific octet which\n   caused the problem is identified.\n   A summary\
    \ of the contents of the CLNP Error Report, as it is proposed\n   for use in TUBA\
    \ environments, is illustrated in Figure 5-1:\n    0                   1     \
    \              2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        ........Data Link Header........       | NLP ID        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Header Length  |     Version   | Lifetime (TTL)| 000 | Type=ER |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  TOTAL Length of Error Report |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Dest Addr Len |               Destination Address...          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               ... Destination Address...                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               ... Destination Address...                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               ... Destination Address...                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               ... Destination Address...                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | PROTO field   | Src  Addr Len |  Source  Address...           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               ... Source Address...                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               ... Source Address...                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               ... Source Address...                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               ... Source Address...                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       ... Source Address      | Reason for Discard (type/len) |\n   |  \
    \                             |   1100 0001   | 0000 0010     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Reason for Discard        |    Options...                 |\n   |  \
    \ code        |   pointer     |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Options                             |\n   :  \
    \                                                             :\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                            Data                               |\n   :  \
    \                                                             :\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Note that each tick mark represents one bit position.\n        \
    \              Figure 5-1. Error Report Format\n"
- title: 5.1  Rules for processing an Error Report
  contents:
  - "5.1  Rules for processing an Error Report\n   The following is a summary of the\
    \ rules for processing an Error\n   Report:\n         * An Error Report is not\
    \ generated to report a problem\n           encountered while processing an Error\
    \ Report.\n         * Error Reports MAY NOT be fragmented (hence, the\n      \
    \     fragmentation part is absent).\n         * The Reason for Discard Code field\
    \ is populated with one of\n           the values from Table 5-1.\n         *\
    \ The Pointer field is populated with number of the first\n           octet of\
    \ the field that caused the Error Report to be\n           generated. If it is\
    \ not possible to identify the offending\n           octet, this field MUST be\
    \ zeroed.\n         * If the Priority or Type of Service option is present in\
    \ the\n           errored datagram, the Error Report MUST specify the same\n \
    \          option, using the value specified in the original datagram.\n     \
    \    * If the Security option is present in the errored datagram,\n          \
    \ the Error Report MUST specify the same option, using the\n           value specified\
    \ in the original datagram; if the Security\n           option is not supported\
    \ by the intermediate system, no Error\n           Report is to be generated (i.e.,\
    \ \"silently discard\" the\n           received datagram).\n         * If the\
    \ Complete Source Route option is specified in the\n           errored datagram,\
    \ the Error Report MUST compose a reverse of\n           that route, and return\
    \ the datagram along the same path.\n"
- title: 5.2  Comparison of ICMP and CLNP Error Messages
  contents:
  - "5.2  Comparison of ICMP and CLNP Error Messages\n   Table 5-1 provides a loose\
    \ comparison of ICMP message types and codes\n   to CLNP Error Type Codes (values\
    \ in Internet decimal):\n CLNP Error Type  Codes            | ICMP Message   \
    \        (Type, Code)\n ----------------------------------|------------------------------------\n\
    \ Reason not specified          (0) | Parameter Problem           (12, 0)\n Protocol\
    \ Procedure Error      (1) | Parameter Problem           (12, 0)\n Incorrect Checksum\
    \            (2) | Parameter Problem           (12, 0)\n PDU Discarded--Congestion\
    \     (3) | Source Quench                (4, 0)\n Header Syntax Error        \
    \   (4) | Parameter problem           (12, 0)\n Need to Fragment could not   \
    \ (5) | Frag needed, DF set          (3, 4)\n Incomplete PDU received       (6)\
    \ | Parameter Problem           (12, 0)\n Duplicate Option              (7) |\
    \ Parameter Problem           (12, 0)\n Destination Unreachable     (128) | Dest\
    \ Unreachable,Net unknown (3, 0)\n Destination Unknown         (129) | Dest Unreachable,host\
    \ unknown(3, 1)\n Source Routing Error        (144) | Source Route failed    \
    \      (3, 5)\n Source Route Syntax Error   (145) | Source Route failed      \
    \    (3, 5)\n Unknown Address in Src Route(146) | Source Route failed        \
    \  (3, 5)\n Path not acceptable         (147) | Source Route failed          (3,\
    \ 5)\n Lifetime expired            (160) | TTL exceeded                (11, 0)\n\
    \ Reassembly Lifetime Expired (161) | Reassembly time exceeded    (11, 1)\n Unsupported\
    \ Option          (176) | Parameter Problem           (12, 0)\n Unsupported Protocol\
    \ Version(177) | Parameter problem           (12, 0)\n Unsupported Security Option\
    \ (178) | Parameter problem           (12, 0)\n Unsupported Src Rte Option  (179)\
    \ | Parameter problem           (12, 0)\n Unsupported Rcrd Rte        (180) |\
    \ Parameter problem           (12, 0)\n Reassembly interference     (192) | Reassembly\
    \ time exceeded    (11, 1)\n    Table 5-1. Comparison of CLNP Error Reports to\
    \ ICMP Error Messages\n Note 1: The current accepted practice for IP is that source\
    \ quench\n         should not be used; if it is used, implementations MUST\n \
    \        not return a source quench packet for every relevant packet.\n      \
    \   TUBA/CLNP implementations are encouraged to adhere to these\n         guidelines.\n\
    \ Note 2: There are no corresponding CLNP Error Report Codes for the\n       \
    \  following ICMP error message types:\n         - Protocol Unreachable  (3, 2)\n\
    \         - Port Unreachable      (3, 3)\n         [Note: Additional error code\
    \ points available in the ER type\n              code block can be used to identify\
    \ these message types.]\n"
- title: 6.  Pseudo-Header Considerations
  contents:
  - "6.  Pseudo-Header Considerations\n   A checksum is computed on UDP and TCP segments\
    \ to verify the\n   integrity of the UDP/TCP segment. To further verify that the\
    \ UDP/TCP\n   segment has arrived at its correct destination, a pseudo-header\n\
    \   consisting of information used in the delivery of the UDP/TCP segment\n  \
    \ is composed and included in the checksum computation.\n   To compute the checksum\
    \ on a UDP or TCP segment prior to\n   transmission, implementations MUST compose\
    \ a pseudo-header to the\n   UDP/TCP segment consisting of the following information\
    \ that will be\n   used when composing the CLNP datagram:\n         * Destination\
    \ Address Length Indicator\n         * Destination Address (including PROTO field)\n\
    \         * Source Address Length Indicator\n         * Source Address (including\
    \ Reserved field)\n         * A two-octet encoding of the Protocol value\n   \
    \      * TCP/UDP segment length\n   If the length of the {source address length\
    \ field + source address +\n   destination address field + destination address\
    \ } is not an integral\n   number of octets, a trailing 0x00 nibble is padded.\
    \ If GOSIP\n   compliant NSAP addresses are used, this never happens (this is\
    \ known\n   as the Farinacci uncertainty principle).  The last byte in the\n \
    \  Destination Address has the value 0x06 for TCP and 0x11 for UDP, and\n   the\
    \ Protocol field is encoded 0x0006 for TCP and 0x0011 for UDP.  If\n   needed,\
    \ an octet of zero is added to the end of the UDP/TCP segment\n   to pad the datagram\
    \ to a length that is a multiple of 16 bits.\n   [Note: the pseudoheader is encoded\
    \ in this manner to expedite\n   processing, as it allows implementations to grab\
    \ a contiguous stream\n   of octets beginning at the destination address length\
    \ indicator and\n   terminating at the final octet of the source address; the\
    \ PROTOCOL\n   field is present to have a consistent representation across IPv4\
    \ and\n   CLNP/TUBA implementations.]\n   Figure 6-1 illustrates the resulting\
    \ pseudo-header when both source\n   and destination addresses are maximum length.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Dest Addr Len |               Destination Address...          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               ... Destination Address...                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               ... Destination Address...                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               ... Destination Address...                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               ... Destination Address...                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    (PROTO)    | Src  Addr Len |  Source  Address...           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               ... Source Address...                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               ... Source Address...                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               ... Source Address...                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               ... Source Address...                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | ...           | (Reserved)    |    Protocol                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   UDP/TCP segment length      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                           Figure 6-1. Pseudo-header\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   ISO CLNP is an unreliable network datagram protocol,\
    \ and is subject\n   to the same security considerations as Internet Protocol\
    \ ([5], [8]);\n   methods for conveying the same security handling information\n\
    \   recommended for IP are described in Section 4.13.1, Security Option.\n"
- title: 8.  Author's Address
  contents:
  - "8.  Author's Address\n   David M. Piscitello\n   Core Competence\n   1620 Tuckerstown\
    \ Road\n   Dresher, PA 19025\n   Phone: 215-830-0692\n   EMail: wk04464@worldlink.com\n"
- title: 9.  References
  contents:
  - "9.  References\n   [1] ISO/IEC 8473-1992. International Standards Organization\
    \ -- Data\n       Communications -- Protocol for Providing the Connectionless\n\
    \       Network Service, Edition 2.\n   [2] Callon, R., \"TCP/UDP over Bigger\
    \ Addresses (TUBA)\", RFC 1347,\n       Internet Architecture Board, May 1992.\n\
    \   [3] Postel, J., \"Transmission Control Protocol (TCP)\", STD 7, RFC\n    \
    \   793, USC/Information Sciences Institute, September 1981.\n   [4] Postel, J.,\
    \ \"User Datagram Protocol (UDP)\", STD 6, RFC 768,\n       USC/Information Sciences\
    \ Institute, September 1981.\n   [5] Postel, J., \"Internet Protocol (IP)\", STD\
    \ 5, RFC 791,\n       USC/Information Sciences Institute, September 1981.\n  \
    \ [6] Chapin, L., \"ISO DIS 8473, Protocol for Providing the\n       Connectionless\
    \ Network Service\", RFC 994, March 1986.\n   [7] Postel, J., \"Internet Control\
    \ Message Protocol (ICMP)\", STD 5,\n       RFC 792, USC/Information Sciences\
    \ Institute, September 1981.\n   [8] Braden, R., Editor, \"Requirements for Internet\
    \ Hosts -\n       Communication Layers\", STD 3, RFC 1122, Internet Engineering\
    \ Task\n       Force, October 1989.\n   [9] Hagens, R., \"An Echo Function for\
    \ ISO 8473\", RFC 1139, IETF-OSI\n       Working Group, May 1993.\n  [10] Sklower,\
    \ K., \"Improving the Efficiency of the ISO Checksum\n       Calculation\" ACM\
    \ SIGCOMM CCR 18, no. 5 (October 1989):32-43.\n  [11] ISO/IEC 8348-1992. International\
    \ Standards Organization--Data\n       Communications--OSI Network Layer Service\
    \ and Addressing.\n  [12] Callon, R., Gardner, E., and R. Hagens, \"Guidelines\
    \ for OSI NSAP\n       Allocation in the Internet\", RFC 1237, NIST, Mitre, DEC,\
    \ July\n       1991.\n  [13] Piscitello, D., \"Assignment of System Identifiers\
    \ for TUBA/CLNP\n       Hosts\", RFC 1526, Bellcore, September 1993.\n  [14] ISO/IEC\
    \ 9542:1988/PDAM 1. Information Processing Systems -- Data\n       Communications\
    \ -- ES/IS Routeing Protocol for use with ISO CLNP\n       -- Amendment 1: Dynamic\
    \ Discovery of OSI NSAP Addresses by End\n       Systems.\n  [15] Reynolds, J.,\
    \ and J. Postel, \"Assigned Numbers\", STD 2, RFC 1340\n       USC/Information\
    \ Sciences Institute, July 1992.\n  [16] Kent, S., \"Security Option for IP\"\
    , RFC 1108, BBN Communications,\n       November 1991.\n"
- title: Appendix A. Checksum Algorithms (from ISO/IEC 8473)
  contents:
  - "Appendix A. Checksum Algorithms (from ISO/IEC 8473)\n       Symbols used in algorithms:\n\
    \        c0, c1          variables used in the algorithms\n        i         \
    \      position of octet in header (first\n                        octet is i=1)\n\
    \        Bi              value of octet i in the header\n        n           \
    \    position of first octet of checksum (n=8)\n        L               Length\
    \ of header in octets\n        X               Value of octet one of the checksum\
    \ parameter\n        Y               Value of octet two of the checksum parameter\n\
    \   Addition is performed in one of the two following modes:\n         * modulo\
    \ 255 arithmetic;\n         * eight-bit one's complement arithmetic;\n   The algorithm\
    \ for Generating the Checksum Parameter Value is as\n   follows:\n  A.  Construct\
    \ the complete header with the value of the\n      checksum parameter field set\
    \ to zero; i.e., c0 <- c1 <- 0;\n  B.  Process each octet of the header sequentially\
    \ from i=1 to L\n      by:\n         * c0 <- c0 + Bi\n         * c1 <- c1 + c0\n\
    \  C.  Calculate X, Y as follows:\n         * X <- (L - 8)(c0 - c1) modulo 255\n\
    \         * Y <- (L - 7)(-C0) + c1\n  D.  If X = 0, then X <- 255\n  E.  If Y\
    \ = 0, then Y <- 255\n  F.  place the values of X and Y in octets 8 and 9 of the\n\
    \      header, respectively\n   The algorithm for checking the value of the checksum\
    \ parameter is as\n   follows:\n  A.  If octets 8 and 9 of the header both contain\
    \ zero, then the\n      checksum calculation has succeeded; else if either but\
    \ not\n      both of these octets contains the value zero then the\n      checksum\
    \ is incorrect; otherwise, initialize: c0 <- c1 <- 0\n  B.  Process each octet\
    \ of the header sequentially from i = 1 to\n      L by:\n         * c0 <- c0 +\
    \ Bi\n         * c1 <- c1 + c0\n  C.  When all the octets have been processed,\
    \ if c0 = c1 = 0,\n      then the checksum calculation has succeeded, else it\
    \ has\n      failed.\n   There is a separate algorithm to adjust the checksum\
    \ parameter value\n   when a octet has been modified (such as the TTL). Suppose\
    \ the value\n   in octet k is changed by Z = newvalue - oldvalue. If X and Y denote\n\
    \   the checksum values held in octets n and n+1 respectively, then\n   adjust\
    \ X and Y as follows:\n   If X = 0 and Y = 0 then do nothing, else if X = 0 or\
    \ Y = 0 then the\n   checksum is incorrect, else:\n   X <- (k - n - 1)Z + X  \
    \ modulo 255\n   Y <- (n - k)Z + Y       modulo 255\n   If X = 0, then X <- 255;\
    \ if Y = 0, then Y <- 255.\n   In the example, n = 89; if the octet altered is\
    \ the TTL (octet 4),\n   then k = 4. For the case where the lifetime is decreased\
    \ by one unit\n   (Z = -1), the assignment statements for the new values of X\
    \ and Y in\n   the immediately preceeding algorithm simplify to:\n   X <- X +\
    \ 5      Modulo 255\n   Y <- Y - 4      Modulo 255\n"
