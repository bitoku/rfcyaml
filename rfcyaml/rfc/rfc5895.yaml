- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                        P. Resnick
  contents:
  - "Independent Submission                                        P. Resnick\n  \
    \                       Mapping Characters for\n       Internationalized Domain\
    \ Names in Applications (IDNA) 2008\n"
- title: Abstract
  contents:
  - "Abstract\n   In the original version of the Internationalized Domain Names in\n\
    \   Applications (IDNA) protocol, any Unicode code points taken from user\n  \
    \ input were mapped into a set of Unicode code points that \"made\n   sense\"\
    , and then encoded and passed to the domain name system (DNS).\n   The IDNA2008\
    \ protocol (described in RFCs 5890, 5891, 5892, and 5893)\n   presumes that the\
    \ input to the protocol comes from a set of\n   \"permitted\" code points, which\
    \ it then encodes and passes to the DNS,\n   but does not specify what to do with\
    \ the result of user input.  This\n   document describes the actions that can\
    \ be taken by an implementation\n   between receiving user input and passing permitted\
    \ code points to the\n   new IDNA protocol.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5895.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes the operations that can be applied\
    \ to user\n   input in order to get it into a form that is acceptable by the\n\
    \   Internationalized Domain Names in Applications (IDNA) protocol\n   [IDNA2008protocol].\
    \  It includes a general implementation procedure\n   for mapping.\n   It should\
    \ be noted that this document does not specify the behavior\n   of a protocol\
    \ that appears \"on the wire\".  It describes an operation\n   that is to be applied\
    \ to user input in order to prepare that user\n   input for use in an \"on the\
    \ network\" protocol.  As unusual as this\n   may be for a document concerning\
    \ Internet protocols, it is necessary\n   to describe this operation for implementors\
    \ who may have designed\n   around the original IDNA protocol (herein referred\
    \ to as IDNA2003),\n   which conflates this user-input operation into the protocol.\n\
    \   It is very important to note that there are many potential valid\n   mappings\
    \ of characters from user input.  The mapping described in\n   this document is\
    \ the basis for other mappings, and is not likely to\n   be useful without modification.\
    \  Any useful mapping will have\n   features designed to reduce the surprise for\
    \ users and is likely to\n   be slightly (or sometimes radically) different depending\
    \ on the\n   locale of the user, the type of input being used (such as typing,\n\
    \   copy-and-paste, voice, and so on), the type of application used, etc.\n  \
    \ Although most common mappings will probably produce similar results\n   for\
    \ the same input, there will be subtle differences between\n   applications.\n"
- title: 1.1.  The Dividing Line between User Interface and Protocol
  contents:
  - "1.1.  The Dividing Line between User Interface and Protocol\n   The user interface\
    \ to applications is much more complicated than most\n   network implementers\
    \ think.  When we say \"the user enters an\n   internationalized domain name in\
    \ the application\", we are talking\n   about a very complex process that encompasses\
    \ everything from the\n   user formulating the name and deciding which symbols\
    \ to use to\n   express that name, to the user entering the symbols into the computer\n\
    \   using some input method (be it a keyboard, a stylus, or even a voice\n   recognition\
    \ program), to the computer interpreting that input (be it\n   keyboard scan codes,\
    \ a graphical representation, or digitized sounds)\n   into some representation\
    \ of those symbols, through finally\n   normalizing those symbols into a particular\
    \ character repertoire in\n   an encoding recognizable to IDNA processes and the\
    \ domain name\n   system.\n   Considerations for a user interface for internationalized\
    \ domain\n   names involves taking into account culture, context, and locale for\n\
    \   any given user.  A simple and well-known example is the lowercasing\n   of\
    \ the letter LATIN CAPITAL LETTER I (U+0049) when it is used in the\n   Turkish\
    \ and other languages.  A capital \"I\" in Turkish is properly\n   lowercased\
    \ to a LATIN SMALL LETTER DOTLESS I (U+0131), not to a LATIN\n   SMALL LETTER\
    \ I (U+0069).  This lowercasing is clearly dependent on\n   the locale of the\
    \ system and/or the locale of the user.  Using a\n   single context-free mapping\
    \ without considering the user interface\n   properties has the potential of doing\
    \ exactly the wrong thing for the\n   user.\n   The original version of IDNA conflated\
    \ user interface processing and\n   protocol.  It took whatever characters the\
    \ user produced in whatever\n   encoding the application used, assumed some conversion\
    \ to Unicode\n   code points, and then without regard to context, locale, or anything\n\
    \   about the user's intentions, mapped them into a particular set of\n   other\
    \ characters, and then re-encoded them in Punycode, in order to\n   have the entire\
    \ operation be contained within the protocol.  Ignoring\n   context, locale, and\
    \ user preference in the IDNA protocol made life\n   significantly less complicated\
    \ for the application developer, but at\n   the expense of violating the principle\
    \ of \"least user surprise\" for\n   consumers and producers of domain names.\n\
    \   In IDNA2008, the dividing line between \"user interface\" and\n   \"protocol\"\
    \ is clear.  The IDNA2008 specification defines the protocol\n   part of IDNA:\
    \ it explicitly does not deal with the user interface.\n   Mappings such as the\
    \ one described in this document explicitly deal\n   with the user interface and\
    \ not the protocol.  That is, a mapping is\n   only to be applied before a string\
    \ of characters is treated as a\n   domain name (in the \"user interface\") and\
    \ is never to be applied\n   during domain name processing (in the \"protocol\"\
    ).\n"
- title: 1.2.  The Design of This Mapping
  contents:
  - "1.2.  The Design of This Mapping\n   The user interface mapping in this document\
    \ is a set of expansions to\n   IDNA2008 that are meant to be sensible and friendly\
    \ and mostly\n   obvious to people throughout the world when using typical\n \
    \  applications with domain names that are entered by hand.  It is also\n   designed\
    \ to let applications be mostly backwards compatible with\n   IDNA2003.  By definition,\
    \ it cannot meet all of those design goals\n   for all people, and in fact is\
    \ known to fail on some of those goals\n   for quite large populations of people.\n\
    \   A good mapping in the real world might use the \"sensible and friendly\n \
    \  and mostly obvious\" design goal but come up with a different\n   algorithm.\
    \  Many algorithms will have results that are close to what\n   is described here,\
    \ but will differ in assumptions about the users'\n   way of thinking or typing.\
    \  Having said that, it is likely that some\n   mappings will be significantly\
    \ different.  For example, a mapping\n   might apply to a spoken user interface\
    \ instead of a typed one.\n   Another example is that a mapping might be different\
    \ for users that\n   are typing than for users that are copying-and-pasting from\
    \ different\n   applications.  Yet another example is that a user interface that\n\
    \   allows typed input that is transliterated from Latin characters could\n  \
    \ have very different mappings than one that applies to typing in other\n   character\
    \ sets; this would be typical in a Pinyin input method for\n   Chinese characters.\n"
- title: 2.  The General Procedure
  contents:
  - "2.  The General Procedure\n   This section defines a general algorithm that applications\
    \ ought to\n   implement in order to produce Unicode code points that will be\
    \ valid\n   under the IDNA protocol.  An application might implement the full\n\
    \   mapping as described below, or it can choose a different mapping.\n   This\
    \ mapping is very general and was designed to be acceptable to the\n   widest\
    \ user community, but as stated above, it does not take into\n   account any particular\
    \ context, culture, or locale.\n   The general algorithm that an application (or\
    \ the input method\n   provided by an operating system) ought to use is relatively\n\
    \   straightforward:\n   1.  Uppercase characters are mapped to their lowercase\
    \ equivalents by\n       using the algorithm for mapping case in Unicode characters.\
    \  This\n       step was chosen because the output will behave more like ASCII\n\
    \       host names behave.\n   2.  Fullwidth and halfwidth characters (those defined\
    \ with\n       Decomposition Types <wide> and <narrow>) are mapped to their\n\
    \       decomposition mappings as shown in the Unicode character\n       database.\
    \  This step was chosen because many input mechanisms,\n       particularly in\
    \ Asia, do not allow you to easily enter characters\n       in the form used by\
    \ IDNA2008.  Even if they do allow the correct\n       character form, the user\
    \ might not know which form they are\n       entering.\n   3.  All characters\
    \ are mapped using Unicode Normalization Form C\n       (NFC).  This step was\
    \ chosen because it maps combinations of\n       combining characters into canonical\
    \ composed form.  As with the\n       fullwidth/halfwidth mapping, users are not\
    \ generally aware of the\n       particular form of characters that they are entering,\
    \ and\n       IDNA2008 requires that only the canonical composed forms from NFC\n\
    \       be used.\n   4.  [IDNA2008protocol] is specified such that the protocol\
    \ acts on\n       the individual labels of the domain name.  If an implementation\n\
    \       of this mapping is also performing the step of separation of the\n   \
    \    parts of a domain name into labels by using the FULL STOP\n       character\
    \ (U+002E), the IDEOGRAPHIC FULL STOP character (U+3002)\n       can be mapped\
    \ to the FULL STOP before label separation occurs.\n       There are other characters\
    \ that are used as \"full stops\" that one\n       could consider mapping as label\
    \ separators, but their use as such\n       has not been investigated thoroughly.\
    \  This step was chosen\n       because some input mechanisms do not allow the\
    \ user to easily\n       enter proper label separators.  Only the IDEOGRAPHIC\
    \ FULL STOP\n       character (U+3002) is added in this mapping because the authors\n\
    \       have not fully investigated the applicability of other characters\n  \
    \     and the environments where they should and should not be\n       considered\
    \ domain name label separators.\n   Note that the steps above are ordered.\n \
    \  Definitions for the rules in this algorithm can be found in\n   [Unicode52].\
    \  Specifically:\n   o  Unicode Normalization Form C can be found in Annex #15\
    \ of\n      [Unicode-UAX15].\n   o  In order to map uppercase characters to their\
    \ lowercase\n      equivalents (defined in Section 3.13 of [Unicode52]), first\
    \ map\n      characters to the \"Lowercase_Mapping\" property (the \"<lower>\"\
    \n      entry in the second column) in\n      <http://www.unicode.org/Public/UNIDATA/SpecialCasing.txt>,\
    \ if any.\n      Then, map characters to the \"Simple_Lowercase_Mapping\" property\n\
    \      (the fourteenth column) in\n      <http://www.unicode.org/Public/UNIDATA/UnicodeData.txt>,\
    \ if any.\n   o  In order to map fullwidth and halfwidth characters to their\n\
    \      decomposition mappings, map any character whose\n      \"Decomposition_Type\"\
    \ (contained in the first part of the sixth\n      column) in <http://www.unicode.org/Public/UNIDATA/UnicodeData.txt>\n\
    \      is either \"<wide>\" or \"<narrow>\" to the \"Decomposition_Mapping\" of\n\
    \      that character (contained in the second part of the sixth column)\n   \
    \   in <http://www.unicode.org/Public/UNIDATA/UnicodeData.txt>.\n   o  The Unicode\
    \ Character Database [TR44] has useful descriptions of\n      the contents of\
    \ these files.\n   If the mappings in this document are applied to versions of\
    \ Unicode\n   later than Unicode 5.2, the later versions of the Unicode Standard\n\
    \   should be consulted.\n   These form a minimal set of mappings that an application\
    \ should\n   strongly consider doing.  Of course, there are many others that might\n\
    \   be done.\n"
- title: 3.  Implementing This Mapping
  contents:
  - "3.  Implementing This Mapping\n   If you are implementing a mapping for an application\
    \ or operating\n   system by using exactly the four steps in Section 2, the authors\
    \ of\n   this document have a request: please don't.  We mean it.  Section 2\n\
    \   does not describe a universal mapping algorithm because, as we said,\n   there\
    \ is no universally-applicable mapping algorithm.\n   If you read the material\
    \ in Section 2 without reading Section 1, go\n   back and carefully read all of\
    \ Section 1; in many ways, Section 1 is\n   more important than Section 2.  Further,\
    \ you can probably think of\n   user interface considerations that we did not\
    \ list in Section 1.  If\n   you did read Section 1 but somehow decided that the\
    \ algorithm in\n   Section 2 is completely correct for the intended users of your\n\
    \   application or operating system, you are probably not thinking hard\n   enough\
    \ about your intended users.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This document suggests creating mappings that\
    \ might cause confusion\n   for some users while alleviating confusion in other\
    \ users.  Such\n   confusion is not covered in any depth in this document (nor\
    \ in the\n   other IDNA-related documents).\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   This document is the product of many contributions from\
    \ numerous\n   people in the IETF.\n"
- title: 6.  Normative References
  contents:
  - "6.  Normative References\n   [IDNA2008protocol]  Klensin, J., \"Internationalized\
    \ Domain Names in\n                       Applications (IDNA): Protocol\", RFC\
    \ 5891,\n                       August 2010.\n   [TR44]              The Unicode\
    \ Consortium, \"Unicode Technical Report\n                       #44: Unicode\
    \ Character Database\", September 2009,\n                       <http://www.unicode.org/reports/tr44/\n\
    \                       tr44-4.html>.\n   [Unicode-UAX15]     The Unicode Consortium,\
    \ \"Unicode Standard Annex\n                       #15: Unicode Normalization\
    \ Forms, Revision 31\",\n                       September 2009, <http://www.unicode.org/reports/\n\
    \                       tr15/tr15-31.html>.\n   [Unicode52]         The Unicode\
    \ Consortium.  The Unicode Standard,\n                       Version 5.2.0, defined\
    \ by: \"The Unicode Standard,\n                       Version 5.2.0\", (Mountain\
    \ View, CA: The Unicode\n                       Consortium, 2009. ISBN 978-1-936213-00-9).\n\
    \                       <http://www.unicode.org/versions/Unicode5.2.0/>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Peter W. Resnick\n   Qualcomm Incorporated\n   5775 Morehouse\
    \ Drive\n   San Diego, CA  92121-1714\n   US\n   Phone: +1 858 651 4478\n   EMail:\
    \ presnick@qualcomm.com\n   URI:   http://www.qualcomm.com/~presnick/\n   Paul\
    \ Hoffman\n   VPN Consortium\n   127 Segre Place\n   Santa Cruz, CA  95060\n \
    \  US\n   Phone: 1-831-426-9827\n   EMail: paul.hoffman@vpnc.org\n"
