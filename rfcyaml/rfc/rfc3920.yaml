- title: __initial_text__
  contents:
  - '        Extensible Messaging and Presence Protocol (XMPP): Core

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines the core features of the Extensible Messaging\
    \ and\n   Presence Protocol (XMPP), a protocol for streaming Extensible Markup\n\
    \   Language (XML) elements in order to exchange structured information\n   in\
    \ close to real time between any two network endpoints.  While XMPP\n   provides\
    \ a generalized, extensible framework for exchanging XML data,\n   it is used\
    \ mainly for the purpose of building instant messaging and\n   presence applications\
    \ that meet the requirements of RFC 2779.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.   Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.   Generalized Architecture . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.   Addressing Scheme  . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   4.   XML Streams  . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   7\n   5.   Use of TLS . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  19\n   6.   Use of SASL  . . . . . . . . . . . . . . . . . . . . . . . .\
    \  27\n   7.   Resource Binding . . . . . . . . . . . . . . . . . . . . . .  37\n\
    \   8.   Server Dialback  . . . . . . . . . . . . . . . . . . . . . .  41\n  \
    \ 9.   XML Stanzas  . . . . . . . . . . . . . . . . . . . . . . . .  48\n   10.\
    \  Server Rules for Handling XML Stanzas  . . . . . . . . . . .  58\n   11.  XML\
    \ Usage within XMPP  . . . . . . . . . . . . . . . . . . .  60\n   12.  Core Compliance\
    \ Requirements . . . . . . . . . . . . . . . .  62\n   13.  Internationalization\
    \ Considerations  . . . . . . . . . . . .  64\n   14.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . .  64\n   15.  IANA Considerations  . . .\
    \ . . . . . . . . . . . . . . . . .  69\n   16.  References . . . . . . . . .\
    \ . . . . . . . . . . . . . . . .  71\n   A.   Nodeprep . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  75\n   B.   Resourceprep . . . . . . . . . .\
    \ . . . . . . . . . . . . . .  76\n   C.   XML Schemas  . . . . . . . . . . .\
    \ . . . . . . . . . . . . .  78\n   D.   Differences Between Core Jabber Protocols\
    \ and XMPP . . . . .  87\n   Contributors. . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . .  89\n   Acknowledgements. . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  89\n   Author's Address. . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  89\n   Full Copyright Statement. . . . . . . . . . . . . . . .\
    \ . . . . .  90\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Overview
  contents:
  - "1.1.  Overview\n   The Extensible Messaging and Presence Protocol (XMPP) is an\
    \ open\n   Extensible Markup Language [XML] protocol for near-real-time\n   messaging,\
    \ presence, and request-response services.  The basic syntax\n   and semantics\
    \ were developed originally within the Jabber open-source\n   community, mainly\
    \ in 1999.  In 2002, the XMPP WG was chartered with\n   developing an adaptation\
    \ of the Jabber protocol that would be\n   suitable as an IETF instant messaging\
    \ (IM) and presence technology.\n   As a result of work by the XMPP WG, the current\
    \ memo defines the core\n   features of XMPP 1.0; the extensions required to provide\
    \ the instant\n   messaging and presence functionality defined in RFC 2779 [IMP-REQS]\n\
    \   are specified in the Extensible Messaging and Presence Protocol\n   (XMPP):\
    \ Instant Messaging and Presence [XMPP-IM].\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   The capitalized key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\",\n   \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \
    \ \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in BCP\n   14, RFC 2119 [TERMS].\n"
- title: 2.  Generalized Architecture
  contents:
  - '2.  Generalized Architecture

    '
- title: 2.1.  Overview
  contents:
  - "2.1.  Overview\n   Although XMPP is not wedded to any specific network architecture,\
    \ to\n   date it usually has been implemented via a client-server architecture\n\
    \   wherein a client utilizing XMPP accesses a server over a [TCP]\n   connection,\
    \ and servers also communicate with each other over TCP\n   connections.\n   The\
    \ following diagram provides a high-level overview of this\n   architecture (where\
    \ \"-\" represents communications that use XMPP and\n   \"=\" represents communications\
    \ that use any other protocol).\n   C1----S1---S2---C3\n         |\n   C2----+--G1===FN1===FC1\n\
    \   The symbols are as follows:\n   o  C1, C2, C3 = XMPP clients\n   o  S1, S2\
    \ = XMPP servers\n   o  G1 = A gateway that translates between XMPP and the protocol(s)\n\
    \      used on a foreign (non-XMPP) messaging network\n   o  FN1 = A foreign messaging\
    \ network\n   o  FC1 = A client on a foreign messaging network\n"
- title: 2.2.  Server
  contents:
  - "2.2.  Server\n   A server acts as an intelligent abstraction layer for XMPP\n\
    \   communications.  Its primary responsibilities are:\n   o  to manage connections\
    \ from or sessions for other entities, in the\n      form of XML streams (Section\
    \ 4) to and from authorized clients,\n      servers, and other entities\n   o\
    \  to route appropriately-addressed XML stanzas (Section 9) among\n      such\
    \ entities over XML streams\n   Most XMPP-compliant servers also assume responsibility\
    \ for the\n   storage of data that is used by clients (e.g., contact lists for\n\
    \   users of XMPP-based instant messaging and presence applications); in\n   this\
    \ case, the XML data is processed directly by the server itself on\n   behalf\
    \ of the client and is not routed to another entity.\n"
- title: 2.3.  Client
  contents:
  - "2.3.  Client\n   Most clients connect directly to a server over a [TCP] connection\
    \ and\n   use XMPP to take full advantage of the functionality provided by a\n\
    \   server and any associated services.  Multiple resources (e.g.,\n   devices\
    \ or locations) MAY connect simultaneously to a server on\n   behalf of each authorized\
    \ client, with each resource differentiated\n   by the resource identifier of\
    \ an XMPP address (e.g., <node@domain/\n   home> vs. <node@domain/work>) as defined\
    \ under Addressing Scheme\n   (Section 3).  The RECOMMENDED port for connections\
    \ between a client\n   and a server is 5222, as registered with the IANA (see\
    \ Port Numbers\n   (Section 15.9)).\n"
- title: 2.4.  Gateway
  contents:
  - "2.4.  Gateway\n   A gateway is a special-purpose server-side service whose primary\n\
    \   function is to translate XMPP into the protocol used by a foreign\n   (non-XMPP)\
    \ messaging system, as well as to translate the return data\n   back into XMPP.\
    \  Examples are gateways to email (see [SMTP]),\n   Internet Relay Chat (see [IRC]),\
    \ SIMPLE (see [SIMPLE]), Short Message\n   Service (SMS), and legacy instant messaging\
    \ services such as AIM,\n   ICQ, MSN Messenger, and Yahoo! Instant Messenger.\
    \  Communications\n   between gateways and servers, and between gateways and the\
    \ foreign\n   messaging system, are not defined in this document.\n"
- title: 2.5.  Network
  contents:
  - "2.5.  Network\n   Because each server is identified by a network address and\
    \ because\n   server-to-server communications are a straightforward extension\
    \ of\n   the client-to-server protocol, in practice, the system consists of a\n\
    \   network of servers that inter-communicate.  Thus, for example,\n   <juliet@example.com>\
    \ is able to exchange messages, presence, and\n   other information with <romeo@example.net>.\
    \  This pattern is familiar\n   from messaging protocols (such as [SMTP]) that\
    \ make use of network\n   addressing standards.  Communications between any two\
    \ servers are\n   OPTIONAL.  If enabled, such communications SHOULD occur over\
    \ XML\n   streams that are bound to [TCP] connections.  The RECOMMENDED port\n\
    \   for connections between servers is 5269, as registered with the IANA\n   (see\
    \ Port Numbers (Section 15.9)).\n"
- title: 3.  Addressing Scheme
  contents:
  - '3.  Addressing Scheme

    '
- title: 3.1.  Overview
  contents:
  - "3.1.  Overview\n   An entity is anything that can be considered a network endpoint\n\
    \   (i.e., an ID on the network) and that can communicate using XMPP.\n   All\
    \ such entities are uniquely addressable in a form that is\n   consistent with\
    \ RFC 2396 [URI].  For historical reasons, the address\n   of an XMPP entity is\
    \ called a Jabber Identifier or JID.  A valid JID\n   contains a set of ordered\
    \ elements formed of a domain identifier,\n   node identifier, and resource identifier.\n\
    \   The syntax for a JID is defined below using the Augmented Backus-Naur\n  \
    \ Form as defined in [ABNF].  (The IPv4address and IPv6address rules\n   are defined\
    \ in Appendix B of [IPv6]; the allowable character\n   sequences that conform\
    \ to the node rule are defined by the Nodeprep\n   profile of [STRINGPREP] as\
    \ documented in Appendix A of this memo; the\n   allowable character sequences\
    \ that conform to the resource rule are\n   defined by the Resourceprep profile\
    \ of [STRINGPREP] as documented in\n   Appendix B of this memo; and the sub-domain\
    \ rule makes reference to\n   the concept of an internationalized domain label\
    \ as described in\n   [IDNA].)\n      jid             = [ node \"@\" ] domain\
    \ [ \"/\" resource ]\n      domain          = fqdn / address-literal\n      fqdn\
    \            = (sub-domain 1*(\".\" sub-domain))\n      sub-domain      = (internationalized\
    \ domain label)\n      address-literal = IPv4address / IPv6address\n   All JIDs\
    \ are based on the foregoing structure.  The most common use\n   of this structure\
    \ is to identify an instant messaging user, the\n   server to which the user connects,\
    \ and the user's connected resource\n   (e.g., a specific client) in the form\
    \ of <user@host/resource>.\n   However, node types other than clients are possible;\
    \ for example, a\n   specific chat room offered by a multi-user chat service could\
    \ be\n   addressed as <room@service> (where \"room\" is the name of the chat\n\
    \   room and \"service\" is the hostname of the multi-user chat service)\n   and\
    \ a specific occupant of such a room could be addressed as\n   <room@service/nick>\
    \ (where \"nick\" is the occupant's room nickname).\n   Many other JID types are\
    \ possible (e.g., <domain/resource> could be a\n   server-side script or service).\n\
    \   Each allowable portion of a JID (node identifier, domain identifier,\n   and\
    \ resource identifier) MUST NOT be more than 1023 bytes in length,\n   resulting\
    \ in a maximum total size (including the '@' and '/'\n   separators) of 3071 bytes.\n"
- title: 3.2.  Domain Identifier
  contents:
  - "3.2.  Domain Identifier\n   The domain identifier is the primary identifier and\
    \ is the only\n   REQUIRED element of a JID (a mere domain identifier is a valid\
    \ JID).\n   It usually represents the network gateway or \"primary\" server to\n\
    \   which other entities connect for XML routing and data management\n   capabilities.\
    \  However, the entity referenced by a domain identifier\n   is not always a server,\
    \ and may be a service that is addressed as a\n   subdomain of a server that provides\
    \ functionality above and beyond\n   the capabilities of a server (e.g., a multi-user\
    \ chat service, a user\n   directory, or a gateway to a foreign messaging system).\n\
    \   The domain identifier for every server or service that will\n   communicate\
    \ over a network MAY be an IP address but SHOULD be a fully\n   qualified domain\
    \ name (see [DNS]).  A domain identifier MUST be an\n   \"internationalized domain\
    \ name\" as defined in [IDNA], to which the\n   Nameprep [NAMEPREP] profile of\
    \ stringprep [STRINGPREP] can be applied\n   without failing.  Before comparing\
    \ two domain identifiers, a server\n   MUST (and a client SHOULD) first apply\
    \ the Nameprep profile to the\n   labels (as defined in [IDNA]) that make up each\
    \ identifier.\n"
- title: 3.3.  Node Identifier
  contents:
  - "3.3.  Node Identifier\n   The node identifier is an optional secondary identifier\
    \ placed before\n   the domain identifier and separated from the latter by the\
    \ '@'\n   character.  It usually represents the entity requesting and using\n\
    \   network access provided by the server or gateway (i.e., a client),\n   although\
    \ it can also represent other kinds of entities (e.g., a chat\n   room associated\
    \ with a multi-user chat service).  The entity\n   represented by a node identifier\
    \ is addressed within the context of a\n   specific domain; within instant messaging\
    \ and presence applications\n   of XMPP, this address is called a \"bare JID\"\
    \ and is of the form\n   <node@domain>.\n   A node identifier MUST be formatted\
    \ such that the Nodeprep profile of\n   [STRINGPREP] can be applied to it without\
    \ failing.  Before comparing\n   two node identifiers, a server MUST (and a client\
    \ SHOULD) first apply\n   the Nodeprep profile to each identifier.\n"
- title: 3.4.  Resource Identifier
  contents:
  - "3.4.  Resource Identifier\n   The resource identifier is an optional tertiary\
    \ identifier placed\n   after the domain identifier and separated from the latter\
    \ by the '/'\n   character.  A resource identifier may modify either a <node@domain>\n\
    \   or a mere <domain> address.  It usually represents a specific\n   session,\
    \ connection (e.g., a device or location), or object (e.g., a\n   participant\
    \ in a multi-user chat room) belonging to the entity\n   associated with a node\
    \ identifier.  A resource identifier is opaque\n   to both servers and other clients,\
    \ and is typically defined by a\n   client implementation when it provides the\
    \ information necessary to\n   complete Resource Binding (Section 7) (although\
    \ it may be generated\n   by a server on behalf of a client), after which it is\
    \ referred to as\n   a \"connected resource\".  An entity MAY maintain multiple\
    \ connected\n   resources simultaneously, with each connected resource differentiated\n\
    \   by a distinct resource identifier.\n   A resource identifier MUST be formatted\
    \ such that the Resourceprep\n   profile of [STRINGPREP] can be applied without\
    \ failing.  Before\n   comparing two resource identifiers, a server MUST (and\
    \ a client\n   SHOULD) first apply the Resourceprep profile to each identifier.\n"
- title: 3.5.  Determination of Addresses
  contents:
  - "3.5.  Determination of Addresses\n   After SASL negotiation (Section 6) and,\
    \ if appropriate, Resource\n   Binding (Section 7), the receiving entity for a\
    \ stream MUST determine\n   the initiating entity's JID.\n   For server-to-server\
    \ communications, the initiating entity's JID\n   SHOULD be the authorization\
    \ identity, derived from the authentication\n   identity, as defined by the Simple\
    \ Authentication and Security Layer\n   (SASL) specification [SASL], if no authorization\
    \ identity was\n   specified during SASL negotiation (Section 6).\n   For client-to-server\
    \ communications, the \"bare JID\" (<node@domain>)\n   SHOULD be the authorization\
    \ identity, derived from the authentication\n   identity, as defined in [SASL],\
    \ if no authorization identity was\n   specified during SASL negotiation (Section\
    \ 6); the resource\n   identifier portion of the \"full JID\" (<node@domain/resource>)\
    \ SHOULD\n   be the resource identifier negotiated by the client and server during\n\
    \   Resource Binding (Section 7).\n   The receiving entity MUST ensure that the\
    \ resulting JID (including\n   node identifier, domain identifier, resource identifier,\
    \ and\n   separator characters) conforms to the rules and formats defined\n  \
    \ earlier in this section; to meet this restriction, the receiving\n   entity\
    \ may need to replace the JID sent by the initiating entity with\n   the canonicalized\
    \ JID as determined by the receiving entity.\n"
- title: 4.  XML Streams
  contents:
  - '4.  XML Streams

    '
- title: 4.1.  Overview
  contents:
  - "4.1.  Overview\n   Two fundamental concepts make possible the rapid, asynchronous\n\
    \   exchange of relatively small payloads of structured information\n   between\
    \ presence-aware entities: XML streams and XML stanzas.  These\n   terms are defined\
    \ as follows:\n   Definition of XML Stream: An XML stream is a container for the\n\
    \      exchange of XML elements between any two entities over a network.\n   \
    \   The start of an XML stream is denoted unambiguously by an opening\n      XML\
    \ <stream> tag (with appropriate attributes and namespace\n      declarations),\
    \ while the end of the XML stream is denoted\n      unambiguously by a closing\
    \ XML </stream> tag.  During the life of\n      the stream, the entity that initiated\
    \ it can send an unbounded\n      number of XML elements over the stream, either\
    \ elements used to\n      negotiate the stream (e.g., to negotiate Use of TLS\
    \ (Section 5) or\n      use of SASL (Section 6)) or XML stanzas (as defined herein,\n\
    \      <message/>, <presence/>, or <iq/> elements qualified by the\n      default\
    \ namespace).  The \"initial stream\" is negotiated from the\n      initiating\
    \ entity (usually a client or server) to the receiving\n      entity (usually\
    \ a server), and can be seen as corresponding to the\n      initiating entity's\
    \ \"session\" with the receiving entity.  The\n      initial stream enables unidirectional\
    \ communication from the\n      initiating entity to the receiving entity; in\
    \ order to enable\n      information exchange from the receiving entity to the\
    \ initiating\n      entity, the receiving entity MUST negotiate a stream in the\n\
    \      opposite direction (the \"response stream\").\n   Definition of XML Stanza:\
    \ An XML stanza is a discrete semantic unit\n      of structured information that\
    \ is sent from one entity to another\n      over an XML stream.  An XML stanza\
    \ exists at the direct child\n      level of the root <stream/> element and is\
    \ said to be\n      well-balanced if it matches the production [43] content of\
    \ [XML].\n      The start of any XML stanza is denoted unambiguously by the\n\
    \      element start tag at depth=1 of the XML stream (e.g., <presence>),\n  \
    \    and the end of any XML stanza is denoted unambiguously by the\n      corresponding\
    \ close tag at depth=1 (e.g., </presence>).  An XML\n      stanza MAY contain\
    \ child elements (with accompanying attributes,\n      elements, and XML character\
    \ data) as necessary in order to convey\n      the desired information.  The only\
    \ XML stanzas defined herein are\n      the <message/>, <presence/>, and <iq/>\
    \ elements qualified by the\n      default namespace for the stream, as described\
    \ under XML Stanzas\n      (Section 9); an XML element sent for the purpose of\
    \ Transport\n      Layer Security (TLS) negotiation (Section 5), Simple\n    \
    \  Authentication and Security Layer (SASL) negotiation (Section 6),\n      or\
    \ server dialback (Section 8) is not considered to be an XML\n      stanza.\n\
    \   Consider the example of a client's session with a server.  In order\n   to\
    \ connect to a server, a client MUST initiate an XML stream by\n   sending an\
    \ opening <stream> tag to the server, optionally preceded by\n   a text declaration\
    \ specifying the XML version and the character\n   encoding supported (see Inclusion\
    \ of Text Declaration (Section 11.4);\n   see also Character Encoding (Section\
    \ 11.5)).  Subject to local\n   policies and service provisioning, the server\
    \ SHOULD then reply with\n   a second XML stream back to the client, again optionally\
    \ preceded by\n   a text declaration.  Once the client has completed SASL negotiation\n\
    \   (Section 6), the client MAY send an unbounded number of XML stanzas\n   over\
    \ the stream to any recipient on the network.  When the client\n   desires to\
    \ close the stream, it simply sends a closing </stream> tag\n   to the server\
    \ (alternatively, the stream may be closed by the\n   server), after which both\
    \ the client and server SHOULD terminate the\n   underlying connection (usually\
    \ a TCP connection) as well.\n   Those who are accustomed to thinking of XML in\
    \ a document-centric\n   manner may wish to view a client's session with a server\
    \ as\n   consisting of two open-ended XML documents: one from the client to\n\
    \   the server and one from the server to the client.  From this\n   perspective,\
    \ the root <stream/> element can be considered the\n   document entity for each\
    \ \"document\", and the two \"documents\" are\n   built up through the accumulation\
    \ of XML stanzas sent over the two\n   XML streams.  However, this perspective\
    \ is a convenience only; XMPP\n   does not deal in documents but in XML streams\
    \ and XML stanzas.\n   In essence, then, an XML stream acts as an envelope for\
    \ all the XML\n   stanzas sent during a session.  We can represent this in a simplistic\n\
    \   fashion as follows:\n   |--------------------|\n   | <stream>           |\n\
    \   |--------------------|\n   | <presence>         |\n   |   <show/>        \
    \  |\n   | </presence>        |\n   |--------------------|\n   | <message to='foo'>\
    \ |\n   |   <body/>          |\n   | </message>         |\n   |--------------------|\n\
    \   | <iq to='bar'>      |\n   |   <query/>         |\n   | </iq>            \
    \  |\n   |--------------------|\n   | ...                |\n   |--------------------|\n\
    \   | </stream>          |\n   |--------------------|\n"
- title: 4.2.  Binding to TCP
  contents:
  - "4.2.  Binding to TCP\n   Although there is no necessary coupling of an XML stream\
    \ to a [TCP]\n   connection (e.g., two entities could connect to each other via\n\
    \   another mechanism such as polling over [HTTP]), this specification\n   defines\
    \ a binding of XMPP to TCP only.  In the context of\n   client-to-server communications,\
    \ a server MUST allow a client to\n   share a single TCP connection for XML stanzas\
    \ sent from client to\n   server and from server to client.  In the context of\
    \ server-to-server\n   communications, a server MUST use one TCP connection for\
    \ XML stanzas\n   sent from the server to the peer and another TCP connection\n\
    \   (initiated by the peer) for stanzas from the peer to the server, for\n   a\
    \ total of two TCP connections.\n"
- title: 4.3.  Stream Security
  contents:
  - "4.3.  Stream Security\n   When negotiating XML streams in XMPP 1.0, TLS SHOULD\
    \ be used as\n   defined under Use of TLS (Section 5) and SASL MUST be used as\
    \ defined\n   under Use of SASL (Section 6).  The \"initial stream\" (i.e., the\n\
    \   stream from the initiating entity to the receiving entity) and the\n   \"\
    response stream\" (i.e., the stream from the receiving entity to the\n   initiating\
    \ entity) MUST be secured separately, although security in\n   both directions\
    \ MAY be established via mechanisms that provide mutual\n   authentication.  An\
    \ entity SHOULD NOT attempt to send XML Stanzas\n   (Section 9) over the stream\
    \ before the stream has been authenticated,\n   but if it does, then the other\
    \ entity MUST NOT accept such stanzas\n   and SHOULD return a <not-authorized/>\
    \ stream error and then terminate\n   both the XML stream and the underlying TCP\
    \ connection; note well that\n   this applies to XML stanzas only (i.e., <message/>,\
    \ <presence/>, and\n   <iq/> elements scoped by the default namespace) and not\
    \ to XML\n   elements used for stream negotiation (e.g., elements used to\n  \
    \ negotiate Use of TLS (Section 5) or Use of SASL (Section 6)).\n"
- title: 4.4.  Stream Attributes
  contents:
  - "4.4.  Stream Attributes\n   The attributes of the stream element are as follows:\n\
    \   o  to -- The 'to' attribute SHOULD be used only in the XML stream\n      header\
    \ from the initiating entity to the receiving entity, and\n      MUST be set to\
    \ a hostname serviced by the receiving entity.  There\n      SHOULD NOT be a 'to'\
    \ attribute set in the XML stream header by\n      which the receiving entity\
    \ replies to the initiating entity;\n      however, if a 'to' attribute is included,\
    \ it SHOULD be silently\n      ignored by the initiating entity.\n   o  from --\
    \ The 'from' attribute SHOULD be used only in the XML stream\n      header from\
    \ the receiving entity to the initiating entity, and\n      MUST be set to a hostname\
    \ serviced by the receiving entity that is\n      granting access to the initiating\
    \ entity.  There SHOULD NOT be a\n      'from' attribute on the XML stream header\
    \ sent from the initiating\n      entity to the receiving entity; however, if\
    \ a 'from' attribute is\n      included, it SHOULD be silently ignored by the\
    \ receiving entity.\n   o  id -- The 'id' attribute SHOULD be used only in the\
    \ XML stream\n      header from the receiving entity to the initiating entity.\
    \  This\n      attribute is a unique identifier created by the receiving entity\n\
    \      to function as a session key for the initiating entity's streams\n    \
    \  with the receiving entity, and MUST be unique within the receiving\n      application\
    \ (normally a server).  Note well that the stream ID may\n      be security-critical\
    \ and therefore MUST be both unpredictable and\n      nonrepeating (see [RANDOM]\
    \ for recommendations regarding\n      randomness for security purposes).  There\
    \ SHOULD NOT be an 'id'\n      attribute on the XML stream header sent from the\
    \ initiating entity\n      to the receiving entity; however, if an 'id' attribute\
    \ is\n      included, it SHOULD be silently ignored by the receiving entity.\n\
    \   o  xml:lang -- An 'xml:lang' attribute (as defined in Section 2.12 of\n  \
    \    [XML]) SHOULD be included by the initiating entity on the header\n      for\
    \ the initial stream to specify the default language of any\n      human-readable\
    \ XML character data it sends over that stream.  If\n      the attribute is included,\
    \ the receiving entity SHOULD remember\n      that value as the default for both\
    \ the initial stream and the\n      response stream; if the attribute is not included,\
    \ the receiving\n      entity SHOULD use a configurable default value for both\
    \ streams,\n      which it MUST communicate in the header for the response stream.\n\
    \      For all stanzas sent over the initial stream, if the initiating\n     \
    \ entity does not include an 'xml:lang' attribute, the receiving\n      entity\
    \ SHOULD apply the default value; if the initiating entity\n      does include\
    \ an 'xml:lang' attribute, the receiving entity MUST\n      NOT modify or delete\
    \ it (see also xml:lang (Section 9.1.5)).  The\n      value of the 'xml:lang'\
    \ attribute MUST be an NMTOKEN (as defined\n      in Section 2.3 of [XML]) and\
    \ MUST conform to the format defined in\n      RFC 3066 [LANGTAGS].\n   o  version\
    \ -- The presence of the version attribute set to a value of\n      at least \"\
    1.0\" signals support for the stream-related protocols\n      (including stream\
    \ features) defined in this specification.\n      Detailed rules regarding the\
    \ generation and handling of this\n      attribute are defined below.\n   We can\
    \ summarize as follows:\n            |  initiating to receiving  |  receiving\
    \ to initiating\n   ---------+---------------------------+-----------------------\n\
    \   to       |  hostname of receiver     |  silently ignored\n   from     |  silently\
    \ ignored         |  hostname of receiver\n   id       |  silently ignored   \
    \      |  session key\n   xml:lang |  default language         |  default language\n\
    \   version  |  signals XMPP 1.0 support |  signals XMPP 1.0 support\n"
- title: 4.4.1.  Version Support
  contents:
  - "4.4.1.  Version Support\n   The version of XMPP specified herein is \"1.0\";\
    \ in particular, this\n   encapsulates the stream-related protocols (Use of TLS\
    \ (Section 5),\n   Use of SASL (Section 6), and Stream Errors (Section 4.7)),\
    \ as well as\n   the semantics of the three defined XML stanza types (<message/>,\n\
    \   <presence/>, and <iq/>).  The numbering scheme for XMPP versions is\n   \"\
    <major>.<minor>\".  The major and minor numbers MUST be treated as\n   separate\
    \ integers and each number MAY be incremented higher than a\n   single digit.\
    \  Thus, \"XMPP 2.4\" would be a lower version than \"XMPP\n   2.13\", which in\
    \ turn would be lower than \"XMPP 12.3\".  Leading zeros\n   (e.g., \"XMPP 6.01\"\
    ) MUST be ignored by recipients and MUST NOT be\n   sent.\n   The major version\
    \ number should be incremented only if the stream and\n   stanza formats or required\
    \ actions have changed so dramatically that\n   an older version entity would\
    \ not be able to interoperate with a\n   newer version entity if it simply ignored\
    \ the elements and attributes\n   it did not understand and took the actions specified\
    \ in the older\n   specification.  The minor version number indicates new capabilities,\n\
    \   and MUST be ignored by an entity with a smaller minor version number,\n  \
    \ but used for informational purposes by the entity with the larger\n   minor\
    \ version number.  For example, a minor version number might\n   indicate the\
    \ ability to process a newly defined value of the 'type'\n   attribute for message,\
    \ presence, or IQ stanzas; the entity with the\n   larger minor version number\
    \ would simply note that its correspondent\n   would not be able to understand\
    \ that value of the 'type' attribute\n   and therefore would not send it.\n  \
    \ The following rules apply to the generation and handling of the\n   'version'\
    \ attribute within stream headers by implementations:\n   1.  The initiating entity\
    \ MUST set the value of the 'version'\n       attribute on the initial stream\
    \ header to the highest version\n       number it supports (e.g., if the highest\
    \ version number it\n       supports is that defined in this specification, it\
    \ MUST set the\n       value to \"1.0\").\n   2.  The receiving entity MUST set\
    \ the value of the 'version'\n       attribute on the response stream header to\
    \ either the value\n       supplied by the initiating entity or the highest version\
    \ number\n       supported by the receiving entity, whichever is lower.  The\n\
    \       receiving entity MUST perform a numeric comparison on the major\n    \
    \   and minor version numbers, not a string match on\n       \"<major>.<minor>\"\
    .\n   3.  If the version number included in the response stream header is\n  \
    \     at least one major version lower than the version number included\n    \
    \   in the initial stream header and newer version entities cannot\n       interoperate\
    \ with older version entities as described above, the\n       initiating entity\
    \ SHOULD generate an <unsupported-version/>\n       stream error and terminate\
    \ the XML stream and underlying TCP\n       connection.\n   4.  If either entity\
    \ receives a stream header with no 'version'\n       attribute, the entity MUST\
    \ consider the version supported by the\n       other entity to be \"0.0\" and\
    \ SHOULD NOT include a 'version'\n       attribute in the stream header it sends\
    \ in reply.\n"
- title: 4.5.  Namespace Declarations
  contents:
  - "4.5.  Namespace Declarations\n   The stream element MUST possess both a streams\
    \ namespace declaration\n   and a default namespace declaration (as \"namespace\
    \ declaration\" is\n   defined in the XML namespaces specification [XML-NAMES]).\
    \  For\n   detailed information regarding the streams namespace and default\n\
    \   namespace, see Namespace Names and Prefixes (Section 11.2).\n"
- title: 4.6.  Stream Features
  contents:
  - "4.6.  Stream Features\n   If the initiating entity includes the 'version' attribute\
    \ set to a\n   value of at least \"1.0\" in the initial stream header, the receiving\n\
    \   entity MUST send a <features/> child element (prefixed by the streams\n  \
    \ namespace prefix) to the initiating entity in order to announce any\n   stream-level\
    \ features that can be negotiated (or capabilities that\n   otherwise need to\
    \ be advertised).  Currently, this is used only to\n   advertise Use of TLS (Section\
    \ 5), Use of SASL (Section 6), and\n   Resource Binding (Section 7) as defined\
    \ herein, and for Session\n   Establishment as defined in [XMPP-IM]; however,\
    \ the stream features\n   functionality could be used to advertise other negotiable\
    \ features in\n   the future.  If an entity does not understand or support some\n\
    \   features, it SHOULD silently ignore them.  If one or more security\n   features\
    \ (e.g., TLS and SASL) need to be successfully negotiated\n   before a non-security-related\
    \ feature (e.g., Resource Binding) can be\n   offered, the non-security-related\
    \ feature SHOULD NOT be included in\n   the stream features that are advertised\
    \ before the relevant security\n   features have been negotiated.\n"
- title: 4.7.  Stream Errors
  contents:
  - "4.7.  Stream Errors\n   The root stream element MAY contain an <error/> child\
    \ element that is\n   prefixed by the streams namespace prefix.  The error child\
    \ MUST be\n   sent by a compliant entity (usually a server rather than a client)\
    \ if\n   it perceives that a stream-level error has occurred.\n"
- title: 4.7.1.  Rules
  contents:
  - "4.7.1.  Rules\n   The following rules apply to stream-level errors:\n   o  It\
    \ is assumed that all stream-level errors are unrecoverable;\n      therefore,\
    \ if an error occurs at the level of the stream, the\n      entity that detects\
    \ the error MUST send a stream error to the\n      other entity, send a closing\
    \ </stream> tag, and terminate the\n      underlying TCP connection.\n   o  If\
    \ the error occurs while the stream is being set up, the\n      receiving entity\
    \ MUST still send the opening <stream> tag, include\n      the <error/> element\
    \ as a child of the stream element, send the\n      closing </stream> tag, and\
    \ terminate the underlying TCP\n      connection.  In this case, if the initiating\
    \ entity provides an\n      unknown host in the 'to' attribute (or provides no\
    \ 'to' attribute\n      at all), the server SHOULD provide the server's authoritative\n\
    \      hostname in the 'from' attribute of the stream header sent before\n   \
    \   termination.\n"
- title: 4.7.2.  Syntax
  contents:
  - "4.7.2.  Syntax\n   The syntax for stream errors is as follows:\n   <stream:error>\n\
    \     <defined-condition xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>\n     <text\
    \ xmlns='urn:ietf:params:xml:ns:xmpp-streams'\n           xml:lang='langcode'>\n\
    \       OPTIONAL descriptive text\n     </text>\n     [OPTIONAL application-specific\
    \ condition element]\n   </stream:error>\n   The <error/> element:\n   o  MUST\
    \ contain a child element corresponding to one of the defined\n      stanza error\
    \ conditions defined below; this element MUST be\n      qualified by the 'urn:ietf:params:xml:ns:xmpp-streams'\
    \ namespace\n   o  MAY contain a <text/> child containing XML character data that\n\
    \      describes the error in more detail; this element MUST be qualified\n  \
    \    by the 'urn:ietf:params:xml:ns:xmpp-streams' namespace and SHOULD\n     \
    \ possess an 'xml:lang' attribute specifying the natural language of\n      the\
    \ XML character data\n   o  MAY contain a child element for an application-specific\
    \ error\n      condition; this element MUST be qualified by an\n      application-defined\
    \ namespace, and its structure is defined by\n      that namespace\n   The <text/>\
    \ element is OPTIONAL.  If included, it SHOULD be used only\n   to provide descriptive\
    \ or diagnostic information that supplements the\n   meaning of a defined condition\
    \ or application-specific condition.  It\n   SHOULD NOT be interpreted programmatically\
    \ by an application.  It\n   SHOULD NOT be used as the error message presented\
    \ to a user, but MAY\n   be shown in addition to the error message associated\
    \ with the\n   included condition element (or elements).\n"
- title: 4.7.3.  Defined Conditions
  contents:
  - "4.7.3.  Defined Conditions\n   The following stream-level error conditions are\
    \ defined:\n   o  <bad-format/> -- the entity has sent XML that cannot be processed;\n\
    \      this error MAY be used instead of the more specific XML-related\n     \
    \ errors, such as <bad-namespace-prefix/>, <invalid-xml/>,\n      <restricted-xml/>,\
    \ <unsupported-encoding/>, and\n      <xml-not-well-formed/>, although the more\
    \ specific errors are\n      preferred.\n   o  <bad-namespace-prefix/> -- the\
    \ entity has sent a namespace prefix\n      that is unsupported, or has sent no\
    \ namespace prefix on an element\n      that requires such a prefix (see XML Namespace\
    \ Names and Prefixes\n      (Section 11.2)).\n   o  <conflict/> -- the server\
    \ is closing the active stream for this\n      entity because a new stream has\
    \ been initiated that conflicts with\n      the existing stream.\n   o  <connection-timeout/>\
    \ -- the entity has not generated any traffic\n      over the stream for some\
    \ period of time (configurable according to\n      a local service policy).\n\
    \   o  <host-gone/> -- the value of the 'to' attribute provided by the\n     \
    \ initiating entity in the stream header corresponds to a hostname\n      that\
    \ is no longer hosted by the server.\n   o  <host-unknown/> -- the value of the\
    \ 'to' attribute provided by the\n      initiating entity in the stream header\
    \ does not correspond to a\n      hostname that is hosted by the server.\n   o\
    \  <improper-addressing/> -- a stanza sent between two servers lacks\n      a\
    \ 'to' or 'from' attribute (or the attribute has no value).\n   o  <internal-server-error/>\
    \ -- the server has experienced a\n      misconfiguration or an otherwise-undefined\
    \ internal error that\n      prevents it from servicing the stream.\n   o  <invalid-from/>\
    \ -- the JID or hostname provided in a 'from'\n      address does not match an\
    \ authorized JID or validated domain\n      negotiated between servers via SASL\
    \ or dialback, or between a\n      client and a server via authentication and\
    \ resource binding.\n   o  <invalid-id/> -- the stream ID or dialback ID is invalid\
    \ or does\n      not match an ID previously provided.\n   o  <invalid-namespace/>\
    \ -- the streams namespace name is something\n      other than \"http://etherx.jabber.org/streams\"\
    \ or the dialback\n      namespace name is something other than \"jabber:server:dialback\"\
    \n      (see XML Namespace Names and Prefixes (Section 11.2)).\n   o  <invalid-xml/>\
    \ -- the entity has sent invalid XML over the stream\n      to a server that performs\
    \ validation (see Validation (Section\n      11.3)).\n   o  <not-authorized/>\
    \ -- the entity has attempted to send data before\n      the stream has been authenticated,\
    \ or otherwise is not authorized\n      to perform an action related to stream\
    \ negotiation; the receiving\n      entity MUST NOT process the offending stanza\
    \ before sending the\n      stream error.\n   o  <policy-violation/> -- the entity\
    \ has violated some local service\n      policy; the server MAY choose to specify\
    \ the policy in the <text/>\n      element or an application-specific condition\
    \ element.\n   o  <remote-connection-failed/> -- the server is unable to properly\n\
    \      connect to a remote entity that is required for authentication or\n   \
    \   authorization.\n   o  <resource-constraint/> -- the server lacks the system\
    \ resources\n      necessary to service the stream.\n   o  <restricted-xml/> --\
    \ the entity has attempted to send restricted\n      XML features such as a comment,\
    \ processing instruction, DTD,\n      entity reference, or unescaped character\
    \ (see Restrictions\n      (Section 11.1)).\n   o  <see-other-host/> -- the server\
    \ will not provide service to the\n      initiating entity but is redirecting\
    \ traffic to another host; the\n      server SHOULD specify the alternate hostname\
    \ or IP address (which\n      MUST be a valid domain identifier) as the XML character\
    \ data of\n      the <see-other-host/> element.\n   o  <system-shutdown/> -- the\
    \ server is being shut down and all active\n      streams are being closed.\n\
    \   o  <undefined-condition/> -- the error condition is not one of those\n   \
    \   defined by the other conditions in this list; this error condition\n     \
    \ SHOULD be used only in conjunction with an application-specific\n      condition.\n\
    \   o  <unsupported-encoding/> -- the initiating entity has encoded the\n    \
    \  stream in an encoding that is not supported by the server (see\n      Character\
    \ Encoding (Section 11.5)).\n   o  <unsupported-stanza-type/> -- the initiating\
    \ entity has sent a\n      first-level child of the stream that is not supported\
    \ by the\n      server.\n   o  <unsupported-version/> -- the value of the 'version'\
    \ attribute\n      provided by the initiating entity in the stream header specifies\
    \ a\n      version of XMPP that is not supported by the server; the server\n \
    \     MAY specify the version(s) it supports in the <text/> element.\n   o  <xml-not-well-formed/>\
    \ -- the initiating entity has sent XML that\n      is not well-formed as defined\
    \ by [XML].\n"
- title: 4.7.4.  Application-Specific Conditions
  contents:
  - "4.7.4.  Application-Specific Conditions\n   As noted, an application MAY provide\
    \ application-specific stream\n   error information by including a properly-namespaced\
    \ child in the\n   error element.  The application-specific element SHOULD supplement\
    \ or\n   further qualify a defined element.  Thus the <error/> element will\n\
    \   contain two or three child elements:\n   <stream:error>\n     <xml-not-well-formed\n\
    \         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>\n     <text xml:lang='en'\
    \ xmlns='urn:ietf:params:xml:ns:xmpp-streams'>\n       Some special application\
    \ diagnostic information!\n     </text>\n     <escape-your-data xmlns='application-ns'/>\n\
    \   </stream:error>\n   </stream:stream>\n"
- title: 4.8.  Simplified Stream Examples
  contents:
  - "4.8.  Simplified Stream Examples\n   This section contains two simplified examples\
    \ of a stream-based\n   \"session\" of a client on a server (where the \"C\" lines\
    \ are sent from\n   the client to the server, and the \"S\" lines are sent from\
    \ the server\n   to the client); these examples are included for the purpose of\n\
    \   illustrating the concepts introduced thus far.\n   A basic \"session\":\n\
    \   C: <?xml version='1.0'?>\n      <stream:stream\n          to='example.com'\n\
    \          xmlns='jabber:client'\n          xmlns:stream='http://etherx.jabber.org/streams'\n\
    \          version='1.0'>\n   S: <?xml version='1.0'?>\n      <stream:stream\n\
    \          from='example.com'\n          id='someid'\n          xmlns='jabber:client'\n\
    \          xmlns:stream='http://etherx.jabber.org/streams'\n          version='1.0'>\n\
    \   ...  encryption, authentication, and resource binding ...\n   C:   <message\
    \ from='juliet@example.com'\n                 to='romeo@example.net'\n       \
    \          xml:lang='en'>\n   C:     <body>Art thou not Romeo, and a Montague?</body>\n\
    \   C:   </message>\n   S:   <message from='romeo@example.net'\n             \
    \    to='juliet@example.com'\n                 xml:lang='en'>\n   S:     <body>Neither,\
    \ fair saint, if either thee dislike.</body>\n   S:   </message>\n   C: </stream:stream>\n\
    \   S: </stream:stream>\n   A \"session\" gone bad:\n   C: <?xml version='1.0'?>\n\
    \      <stream:stream\n          to='example.com'\n          xmlns='jabber:client'\n\
    \          xmlns:stream='http://etherx.jabber.org/streams'\n          version='1.0'>\n\
    \   S: <?xml version='1.0'?>\n      <stream:stream\n          from='example.com'\n\
    \          id='someid'\n          xmlns='jabber:client'\n          xmlns:stream='http://etherx.jabber.org/streams'\n\
    \          version='1.0'>\n   ...  encryption, authentication, and resource binding\
    \ ...\n   C: <message xml:lang='en'>\n        <body>Bad XML, no closing body tag!\n\
    \      </message>\n   S: <stream:error>\n       <xml-not-well-formed\n       \
    \    xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>\n      </stream:error>\n  \
    \ S: </stream:stream>\n"
- title: 5.  Use of TLS
  contents:
  - '5.  Use of TLS

    '
- title: 5.1.  Overview
  contents:
  - "5.1.  Overview\n   XMPP includes a method for securing the stream from tampering\
    \ and\n   eavesdropping.  This channel encryption method makes use of the\n  \
    \ Transport Layer Security (TLS) protocol [TLS], along with a\n   \"STARTTLS\"\
    \ extension that is modelled after similar extensions for\n   the IMAP [IMAP],\
    \ POP3 [POP3], and ACAP [ACAP] protocols as described\n   in RFC 2595 [USINGTLS].\
    \  The namespace name for the STARTTLS\n   extension is 'urn:ietf:params:xml:ns:xmpp-tls'.\n\
    \   An administrator of a given domain MAY require the use of TLS for\n   client-to-server\
    \ communications, server-to-server communications, or\n   both.  Clients SHOULD\
    \ use TLS to secure the streams prior to\n   attempting the completion of SASL\
    \ negotiation (Section 6), and\n   servers SHOULD use TLS between two domains\
    \ for the purpose of\n   securing server-to-server communications.\n   The following\
    \ rules apply:\n   1.  An initiating entity that complies with this specification\
    \ MUST\n       include the 'version' attribute set to a value of \"1.0\" in the\n\
    \       initial stream header.\n   2.  If the TLS negotiation occurs between two\
    \ servers, communications\n       MUST NOT proceed until the Domain Name System\
    \ (DNS) hostnames\n       asserted by the servers have been resolved (see Server-to-Server\n\
    \       Communications (Section 14.4)).\n   3.  When a receiving entity that complies\
    \ with this specification\n       receives an initial stream header that includes\
    \ the 'version'\n       attribute set to a value of at least \"1.0\", after sending\
    \ a\n       stream header in reply (including the version flag), it MUST\n   \
    \    include a <starttls/> element (qualified by the\n       'urn:ietf:params:xml:ns:xmpp-tls'\
    \ namespace) along with the list\n       of other stream features it supports.\n\
    \   4.  If the initiating entity chooses to use TLS, TLS negotiation MUST\n  \
    \     be completed before proceeding to SASL negotiation; this order of\n    \
    \   negotiation is required to help safeguard authentication\n       information\
    \ sent during SASL negotiation, as well as to make it\n       possible to base\
    \ the use of the SASL EXTERNAL mechanism on a\n       certificate provided during\
    \ prior TLS negotiation.\n   5.  During TLS negotiation, an entity MUST NOT send\
    \ any white space\n       characters (matching production [3] content of [XML])\
    \ within the\n       root stream element as separators between elements (any white\n\
    \       space characters shown in the TLS examples below are included for\n  \
    \     the sake of readability only); this prohibition helps to ensure\n      \
    \ proper security layer byte precision.\n   6.  The receiving entity MUST consider\
    \ the TLS negotiation to have\n       begun immediately after sending the closing\
    \ \">\" character of the\n       <proceed/> element.  The initiating entity MUST\
    \ consider the TLS\n       negotiation to have begun immediately after receiving\
    \ the closing\n       \">\" character of the <proceed/> element from the receiving\n\
    \       entity.\n   7.  The initiating entity MUST validate the certificate presented\
    \ by\n       the receiving entity; see Certificate Validation (Section 14.2)\n\
    \       regarding certificate validation procedures.\n   8.  Certificates MUST\
    \ be checked against the hostname as provided by\n       the initiating entity\
    \ (e.g., a user), not the hostname as\n       resolved via the Domain Name System;\
    \ e.g., if the user specifies\n       a hostname of \"example.com\" but a DNS\
    \ SRV [SRV] lookup returned\n       \"im.example.com\", the certificate MUST be\
    \ checked as\n       \"example.com\".  If a JID for any kind of XMPP entity (e.g.,\n\
    \       client or server) is represented in a certificate, it MUST be\n      \
    \ represented as a UTF8String within an otherName entity inside the\n       subjectAltName,\
    \ using the [ASN.1] Object Identifier\n       \"id-on-xmppAddr\" specified in\
    \ Section 5.1.1 of this document.\n   9.  If the TLS negotiation is successful,\
    \ the receiving entity MUST\n       discard any knowledge obtained in an insecure\
    \ manner from the\n       initiating entity before TLS takes effect.\n   10. If\
    \ the TLS negotiation is successful, the initiating entity MUST\n       discard\
    \ any knowledge obtained in an insecure manner from the\n       receiving entity\
    \ before TLS takes effect.\n   11. If the TLS negotiation is successful, the receiving\
    \ entity MUST\n       NOT offer the STARTTLS extension to the initiating entity\
    \ along\n       with the other stream features that are offered when the stream\n\
    \       is restarted.\n   12. If the TLS negotiation is successful, the initiating\
    \ entity MUST\n       continue with SASL negotiation.\n   13. If the TLS negotiation\
    \ results in failure, the receiving entity\n       MUST terminate both the XML\
    \ stream and the underlying TCP\n       connection.\n   14. See Mandatory-to-Implement\
    \ Technologies (Section 14.7) regarding\n       mechanisms that MUST be supported.\n"
- title: 5.1.1.  ASN.1 Object Identifier for XMPP Address
  contents:
  - "5.1.1.  ASN.1 Object Identifier for XMPP Address\n   The [ASN.1] Object Identifier\
    \ \"id-on-xmppAddr\" described above is\n   defined as follows:\n   id-pkix OBJECT\
    \ IDENTIFIER ::= { iso(1) identified-organization(3)\n           dod(6) internet(1)\
    \ security(5) mechanisms(5) pkix(7) }\n   id-on  OBJECT IDENTIFIER ::= { id-pkix\
    \ 8 }  -- other name forms\n   id-on-xmppAddr  OBJECT IDENTIFIER ::= { id-on 5\
    \ }\n   XmppAddr ::= UTF8String\n   This Object Identifier MAY also be represented\
    \ in the dotted display\n   format as \"1.3.6.1.5.5.7.8.5\".\n"
- title: 5.2.  Narrative
  contents:
  - "5.2.  Narrative\n   When an initiating entity secures a stream with a receiving\
    \ entity\n   using TLS, the steps involved are as follows:\n   1.  The initiating\
    \ entity opens a TCP connection and initiates the\n       stream by sending the\
    \ opening XML stream header to the receiving\n       entity, including the 'version'\
    \ attribute set to a value of at\n       least \"1.0\".\n   2.  The receiving\
    \ entity responds by opening a TCP connection and\n       sending an XML stream\
    \ header to the initiating entity, including\n       the 'version' attribute set\
    \ to a value of at least \"1.0\".\n   3.  The receiving entity offers the STARTTLS\
    \ extension to the\n       initiating entity by including it with the list of\
    \ other\n       supported stream features (if TLS is required for interaction\n\
    \       with the receiving entity, it SHOULD signal that fact by\n       including\
    \ a <required/> element as a child of the <starttls/>\n       element).\n   4.\
    \  The initiating entity issues the STARTTLS command (i.e., a\n       <starttls/>\
    \ element qualified by the\n       'urn:ietf:params:xml:ns:xmpp-tls' namespace)\
    \ to instruct the\n       receiving entity that it wishes to begin a TLS negotiation\
    \ to\n       secure the stream.\n   5.  The receiving entity MUST reply with either\
    \ a <proceed/> element\n       or a <failure/> element qualified by the\n    \
    \   'urn:ietf:params:xml:ns:xmpp-tls' namespace.  If the failure case\n      \
    \ occurs, the receiving entity MUST terminate both the XML stream\n       and\
    \ the underlying TCP connection.  If the proceed case occurs,\n       the entities\
    \ MUST attempt to complete the TLS negotiation over\n       the TCP connection\
    \ and MUST NOT send any further XML data until\n       the TLS negotiation is\
    \ complete.\n   6.  The initiating entity and receiving entity attempt to complete\
    \ a\n       TLS negotiation in accordance with [TLS].\n   7.  If the TLS negotiation\
    \ is unsuccessful, the receiving entity MUST\n       terminate the TCP connection.\
    \  If the TLS negotiation is\n       successful, the initiating entity MUST initiate\
    \ a new stream by\n       sending an opening XML stream header to the receiving\
    \ entity (it\n       is not necessary to send a closing </stream> tag first, since\
    \ the\n       receiving entity and initiating entity MUST consider the original\n\
    \       stream to be closed upon successful TLS negotiation).\n   8.  Upon receiving\
    \ the new stream header from the initiating entity,\n       the receiving entity\
    \ MUST respond by sending a new XML stream\n       header to the initiating entity\
    \ along with the available features\n       (but not including the STARTTLS feature).\n"
- title: 5.3.  Client-to-Server Example
  contents:
  - "5.3.  Client-to-Server Example\n   The following example shows the data flow\
    \ for a client securing a\n   stream using STARTTLS (note: the alternate steps\
    \ shown below are\n   provided to illustrate the protocol for failure cases; they\
    \ are not\n   exhaustive and would not necessarily be triggered by the data sent\
    \ in\n   the example).\n   Step 1: Client initiates stream to server:\n   <stream:stream\n\
    \       xmlns='jabber:client'\n       xmlns:stream='http://etherx.jabber.org/streams'\n\
    \       to='example.com'\n       version='1.0'>\n   Step 2: Server responds by\
    \ sending a stream tag to client:\n   <stream:stream\n       xmlns='jabber:client'\n\
    \       xmlns:stream='http://etherx.jabber.org/streams'\n       id='c2s_123'\n\
    \       from='example.com'\n       version='1.0'>\n   Step 3: Server sends the\
    \ STARTTLS extension to client along with\n   authentication mechanisms and any\
    \ other stream features:\n   <stream:features>\n     <starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'>\n\
    \       <required/>\n     </starttls>\n     <mechanisms xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n\
    \       <mechanism>DIGEST-MD5</mechanism>\n       <mechanism>PLAIN</mechanism>\n\
    \     </mechanisms>\n   </stream:features>\n   Step 4: Client sends the STARTTLS\
    \ command to server:\n   <starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>\n\
    \   Step 5: Server informs client that it is allowed to proceed:\n   <proceed\
    \ xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>\n   Step 5 (alt): Server informs client\
    \ that TLS negotiation has failed\n   and closes both stream and TCP connection:\n\
    \   <failure xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>\n   </stream:stream>\n\
    \   Step 6: Client and server attempt to complete TLS negotiation over\n   the\
    \ existing TCP connection.\n   Step 7: If TLS negotiation is successful, client\
    \ initiates a new\n   stream to server:\n   <stream:stream\n       xmlns='jabber:client'\n\
    \       xmlns:stream='http://etherx.jabber.org/streams'\n       to='example.com'\n\
    \       version='1.0'>\n   Step 7 (alt): If TLS negotiation is unsuccessful, server\
    \ closes TCP\n   connection.\n   Step 8: Server responds by sending a stream header\
    \ to client along\n   with any available stream features:\n   <stream:stream\n\
    \       xmlns='jabber:client'\n       xmlns:stream='http://etherx.jabber.org/streams'\n\
    \       from='example.com'\n       id='c2s_234'\n       version='1.0'>\n   <stream:features>\n\
    \     <mechanisms xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n       <mechanism>DIGEST-MD5</mechanism>\n\
    \       <mechanism>PLAIN</mechanism>\n       <mechanism>EXTERNAL</mechanism>\n\
    \     </mechanisms>\n   </stream:features>\n   Step 9: Client continues with SASL\
    \ negotiation (Section 6).\n"
- title: 5.4.  Server-to-Server Example
  contents:
  - "5.4.  Server-to-Server Example\n   The following example shows the data flow\
    \ for two servers securing a\n   stream using STARTTLS (note: the alternate steps\
    \ shown below are\n   provided to illustrate the protocol for failure cases; they\
    \ are not\n   exhaustive and would not necessarily be triggered by the data sent\
    \ in\n   the example).\n   Step 1: Server1 initiates stream to Server2:\n   <stream:stream\n\
    \       xmlns='jabber:server'\n       xmlns:stream='http://etherx.jabber.org/streams'\n\
    \       to='example.com'\n       version='1.0'>\n   Step 2: Server2 responds by\
    \ sending a stream tag to Server1:\n   <stream:stream\n       xmlns='jabber:server'\n\
    \       xmlns:stream='http://etherx.jabber.org/streams'\n       from='example.com'\n\
    \       id='s2s_123'\n       version='1.0'>\n   Step 3: Server2 sends the STARTTLS\
    \ extension to Server1 along with\n   authentication mechanisms and any other\
    \ stream features:\n   <stream:features>\n     <starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'>\n\
    \       <required/>\n     </starttls>\n     <mechanisms xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n\
    \       <mechanism>DIGEST-MD5</mechanism>\n       <mechanism>KERBEROS_V4</mechanism>\n\
    \     </mechanisms>\n   </stream:features>\n   Step 4: Server1 sends the STARTTLS\
    \ command to Server2:\n   <starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>\n\
    \   Step 5: Server2 informs Server1 that it is allowed to proceed:\n   <proceed\
    \ xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>\n   Step 5 (alt): Server2 informs\
    \ Server1 that TLS negotiation has failed\n   and closes stream:\n   <failure\
    \ xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>\n   </stream:stream>\n   Step 6: Server1\
    \ and Server2 attempt to complete TLS negotiation via\n   TCP.\n   Step 7: If\
    \ TLS negotiation is successful, Server1 initiates a new\n   stream to Server2:\n\
    \   <stream:stream\n       xmlns='jabber:server'\n       xmlns:stream='http://etherx.jabber.org/streams'\n\
    \       to='example.com'\n       version='1.0'>\n   Step 7 (alt): If TLS negotiation\
    \ is unsuccessful, Server2 closes TCP\n   connection.\n   Step 8: Server2 responds\
    \ by sending a stream header to Server1 along\n   with any available stream features:\n\
    \   <stream:stream\n       xmlns='jabber:server'\n       xmlns:stream='http://etherx.jabber.org/streams'\n\
    \       from='example.com'\n       id='s2s_234'\n       version='1.0'>\n   <stream:features>\n\
    \     <mechanisms xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n       <mechanism>DIGEST-MD5</mechanism>\n\
    \       <mechanism>KERBEROS_V4</mechanism>\n       <mechanism>EXTERNAL</mechanism>\n\
    \     </mechanisms>\n   </stream:features>\n   Step 9: Server1 continues with\
    \ SASL negotiation (Section 6).\n"
- title: 6.  Use of SASL
  contents:
  - '6.  Use of SASL

    '
- title: 6.1.  Overview
  contents:
  - "6.1.  Overview\n   XMPP includes a method for authenticating a stream by means\
    \ of an\n   XMPP-specific profile of the Simple Authentication and Security Layer\n\
    \   (SASL) protocol [SASL].  SASL provides a generalized method for\n   adding\
    \ authentication support to connection-based protocols, and XMPP\n   uses a generic\
    \ XML namespace profile for SASL that conforms to the\n   profiling requirements\
    \ of [SASL].\n   The following rules apply:\n   1.  If the SASL negotiation occurs\
    \ between two servers,\n       communications MUST NOT proceed until the Domain\
    \ Name System\n       (DNS) hostnames asserted by the servers have been resolved\
    \ (see\n       Server-to-Server Communications (Section 14.4)).\n   2.  If the\
    \ initiating entity is capable of SASL negotiation, it MUST\n       include the\
    \ 'version' attribute set to a value of at least \"1.0\"\n       in the initial\
    \ stream header.\n   3.  If the receiving entity is capable of SASL negotiation,\
    \ it MUST\n       advertise one or more authentication mechanisms within a\n \
    \      <mechanisms/> element qualified by the\n       'urn:ietf:params:xml:ns:xmpp-sasl'\
    \ namespace in reply to the\n       opening stream tag received from the initiating\
    \ entity (if the\n       opening stream tag included the 'version' attribute set\
    \ to a\n       value of at least \"1.0\").\n   4.  During SASL negotiation, an\
    \ entity MUST NOT send any white space\n       characters (matching production\
    \ [3] content of [XML]) within the\n       root stream element as separators between\
    \ elements (any white\n       space characters shown in the SASL examples below\
    \ are included\n       for the sake of readability only); this prohibition helps\
    \ to\n       ensure proper security layer byte precision.\n   5.  Any XML character\
    \ data contained within the XML elements used\n       during SASL negotiation\
    \ MUST be encoded using base64, where the\n       encoding adheres to the definition\
    \ in Section 3 of RFC 3548\n       [BASE64].\n   6.  If provision of a \"simple\
    \ username\" is supported by the selected\n       SASL mechanism (e.g., this is\
    \ supported by the DIGEST-MD5 and\n       CRAM-MD5 mechanisms but not by the EXTERNAL\
    \ and GSSAPI\n       mechanisms), during authentication the initiating entity\
    \ SHOULD\n       provide as the simple username its sending domain (IP address\
    \ or\n       fully qualified domain name as contained in a domain identifier)\n\
    \       in the case of server-to-server communications or its registered\n   \
    \    account name (user or node name as contained in an XMPP node\n       identifier)\
    \ in the case of client-to-server communications.\n   7.  If the initiating entity\
    \ wishes to act on behalf of another\n       entity and the selected SASL mechanism\
    \ supports transmission of\n       an authorization identity, the initiating entity\
    \ MUST provide an\n       authorization identity during SASL negotiation.  If\
    \ the\n       initiating entity does not wish to act on behalf of another\n  \
    \     entity, it MUST NOT provide an authorization identity.  As\n       specified\
    \ in [SASL], the initiating entity MUST NOT provide an\n       authorization identity\
    \ unless the authorization identity is\n       different from the default authorization\
    \ identity derived from\n       the authentication identity as described in [SASL].\
    \  If provided,\n       the value of the authorization identity MUST be of the\
    \ form\n       <domain> (i.e., a domain identifier only) for servers and of the\n\
    \       form <node@domain> (i.e., node identifier and domain identifier)\n   \
    \    for clients.\n   8.  Upon successful SASL negotiation that involves negotiation\
    \ of a\n       security layer, the receiving entity MUST discard any knowledge\n\
    \       obtained from the initiating entity which was not obtained from\n    \
    \   the SASL negotiation itself.\n   9.  Upon successful SASL negotiation that\
    \ involves negotiation of a\n       security layer, the initiating entity MUST\
    \ discard any knowledge\n       obtained from the receiving entity which was not\
    \ obtained from\n       the SASL negotiation itself.\n   10. See Mandatory-to-Implement\
    \ Technologies (Section 14.7) regarding\n       mechanisms that MUST be supported.\n"
- title: 6.2.  Narrative
  contents:
  - "6.2.  Narrative\n   When an initiating entity authenticates with a receiving\
    \ entity using\n   SASL, the steps involved are as follows:\n   1.  The initiating\
    \ entity requests SASL authentication by including\n       the 'version' attribute\
    \ in the opening XML stream header sent to\n       the receiving entity, with\
    \ the value set to \"1.0\".\n   2.  After sending an XML stream header in reply,\
    \ the receiving entity\n       advertises a list of available SASL authentication\
    \ mechanisms;\n       each of these is a <mechanism/> element included as a child\n\
    \       within a <mechanisms/> container element qualified by the\n       'urn:ietf:params:xml:ns:xmpp-sasl'\
    \ namespace, which in turn is a\n       child of a <features/> element in the\
    \ streams namespace.  If Use\n       of TLS (Section 5) needs to be established\
    \ before a particular\n       authentication mechanism may be used, the receiving\
    \ entity MUST\n       NOT provide that mechanism in the list of available SASL\n\
    \       authentication mechanisms prior to TLS negotiation.  If the\n       initiating\
    \ entity presents a valid certificate during prior TLS\n       negotiation, the\
    \ receiving entity SHOULD offer the SASL EXTERNAL\n       mechanism to the initiating\
    \ entity during SASL negotiation (refer\n       to [SASL]), although the EXTERNAL\
    \ mechanism MAY be offered under\n       other circumstances as well.\n   3. \
    \ The initiating entity selects a mechanism by sending an <auth/>\n       element\
    \ qualified by the 'urn:ietf:params:xml:ns:xmpp-sasl'\n       namespace to the\
    \ receiving entity and including an appropriate\n       value for the 'mechanism'\
    \ attribute.  This element MAY contain\n       XML character data (in SASL terminology,\
    \ the \"initial response\")\n       if the mechanism supports or requires it;\
    \ if the initiating\n       entity needs to send a zero-length initial response,\
    \ it MUST\n       transmit the response as a single equals sign (\"=\"), which\n\
    \       indicates that the response is present but contains no data.\n   4.  If\
    \ necessary, the receiving entity challenges the initiating\n       entity by\
    \ sending a <challenge/> element qualified by the\n       'urn:ietf:params:xml:ns:xmpp-sasl'\
    \ namespace to the initiating\n       entity; this element MAY contain XML character\
    \ data (which MUST\n       be computed in accordance with the definition of the\
    \ SASL\n       mechanism chosen by the initiating entity).\n   5.  The initiating\
    \ entity responds to the challenge by sending a\n       <response/> element qualified\
    \ by the\n       'urn:ietf:params:xml:ns:xmpp-sasl' namespace to the receiving\n\
    \       entity; this element MAY contain XML character data (which MUST\n    \
    \   be computed in accordance with the definition of the SASL\n       mechanism\
    \ chosen by the initiating entity).\n   6.  If necessary, the receiving entity\
    \ sends more challenges and the\n       initiating entity sends more responses.\n\
    \   This series of challenge/response pairs continues until one of three\n   things\
    \ happens:\n   1.  The initiating entity aborts the handshake by sending an <abort/>\n\
    \       element qualified by the 'urn:ietf:params:xml:ns:xmpp-sasl'\n       namespace\
    \ to the receiving entity.  Upon receiving an <abort/>\n       element, the receiving\
    \ entity SHOULD allow a configurable but\n       reasonable number of retries\
    \ (at least 2), after which it MUST\n       terminate the TCP connection; this\
    \ enables the initiating entity\n       (e.g., an end-user client) to tolerate\
    \ incorrectly-provided\n       credentials (e.g., a mistyped password) without\
    \ being forced to\n       reconnect.\n   2.  The receiving entity reports failure\
    \ of the handshake by sending\n       a <failure/> element qualified by the\n\
    \       'urn:ietf:params:xml:ns:xmpp-sasl' namespace to the initiating\n     \
    \  entity (the particular cause of failure SHOULD be communicated in\n       an\
    \ appropriate child element of the <failure/> element as defined\n       under\
    \ SASL Errors (Section 6.4)).  If the failure case occurs,\n       the receiving\
    \ entity SHOULD allow a configurable but reasonable\n       number of retries\
    \ (at least 2), after which it MUST terminate the\n       TCP connection; this\
    \ enables the initiating entity (e.g., an\n       end-user client) to tolerate\
    \ incorrectly-provided credentials\n       (e.g., a mistyped password) without\
    \ being forced to reconnect.\n   3.  The receiving entity reports success of the\
    \ handshake by sending\n       a <success/> element qualified by the\n       'urn:ietf:params:xml:ns:xmpp-sasl'\
    \ namespace to the initiating\n       entity; this element MAY contain XML character\
    \ data (in SASL\n       terminology, \"additional data with success\") if required\
    \ by the\n       chosen SASL mechanism.  Upon receiving the <success/> element,\n\
    \       the initiating entity MUST initiate a new stream by sending an\n     \
    \  opening XML stream header to the receiving entity (it is not\n       necessary\
    \ to send a closing </stream> tag first, since the\n       receiving entity and\
    \ initiating entity MUST consider the original\n       stream to be closed upon\
    \ sending or receiving the <success/>\n       element).  Upon receiving the new\
    \ stream header from the\n       initiating entity, the receiving entity MUST\
    \ respond by sending a\n       new XML stream header to the initiating entity,\
    \ along with any\n       available features (but not including the STARTTLS and\
    \ SASL\n       features) or an empty <features/> element (to signify that no\n\
    \       additional features are available); any such additional features\n   \
    \    not defined herein MUST be defined by the relevant extension to\n       XMPP.\n"
- title: 6.3.  SASL Definition
  contents:
  - "6.3.  SASL Definition\n   The profiling requirements of [SASL] require that the\
    \ following\n   information be supplied by a protocol definition:\n   service\
    \ name: \"xmpp\"\n   initiation sequence: After the initiating entity provides\
    \ an opening\n      XML stream header and the receiving entity replies in kind,\
    \ the\n      receiving entity provides a list of acceptable authentication\n \
    \     methods.  The initiating entity chooses one method from the list\n     \
    \ and sends it to the receiving entity as the value of the\n      'mechanism'\
    \ attribute possessed by an <auth/> element, optionally\n      including an initial\
    \ response to avoid a round trip.\n   exchange sequence: Challenges and responses\
    \ are carried through the\n      exchange of <challenge/> elements from receiving\
    \ entity to\n      initiating entity and <response/> elements from initiating\
    \ entity\n      to receiving entity.  The receiving entity reports failure by\n\
    \      sending a <failure/> element and success by sending a <success/>\n    \
    \  element; the initiating entity aborts the exchange by sending an\n      <abort/>\
    \ element.  Upon successful negotiation, both sides\n      consider the original\
    \ XML stream to be closed and new stream\n      headers are sent by both entities.\n\
    \   security layer negotiation: The security layer takes effect\n      immediately\
    \ after sending the closing \">\" character of the\n      <success/> element for\
    \ the receiving entity, and immediately after\n      receiving the closing \"\
    >\" character of the <success/> element for\n      the initiating entity.  The\
    \ order of layers is first [TCP], then\n      [TLS], then [SASL], then XMPP.\n\
    \   use of the authorization identity: The authorization identity may be\n   \
    \   used by xmpp to denote the non-default <node@domain> of a client\n      or\
    \ the sending <domain> of a server.\n"
- title: 6.4.  SASL Errors
  contents:
  - "6.4.  SASL Errors\n   The following SASL-related error conditions are defined:\n\
    \   o  <aborted/> -- The receiving entity acknowledges an <abort/>\n      element\
    \ sent by the initiating entity; sent in reply to the\n      <abort/> element.\n\
    \   o  <incorrect-encoding/> -- The data provided by the initiating\n      entity\
    \ could not be processed because the [BASE64] encoding is\n      incorrect (e.g.,\
    \ because the encoding does not adhere to the\n      definition in Section 3 of\
    \ [BASE64]); sent in reply to a\n      <response/> element or an <auth/> element\
    \ with initial response\n      data.\n   o  <invalid-authzid/> -- The authzid\
    \ provided by the initiating\n      entity is invalid, either because it is incorrectly\
    \ formatted or\n      because the initiating entity does not have permissions\
    \ to\n      authorize that ID; sent in reply to a <response/> element or an\n\
    \      <auth/> element with initial response data.\n   o  <invalid-mechanism/>\
    \ -- The initiating entity did not provide a\n      mechanism or requested a mechanism\
    \ that is not supported by the\n      receiving entity; sent in reply to an <auth/>\
    \ element.\n   o  <mechanism-too-weak/> -- The mechanism requested by the initiating\n\
    \      entity is weaker than server policy permits for that initiating\n     \
    \ entity; sent in reply to a <response/> element or an <auth/>\n      element\
    \ with initial response data.\n   o  <not-authorized/> -- The authentication failed\
    \ because the\n      initiating entity did not provide valid credentials (this\
    \ includes\n      but is not limited to the case of an unknown username); sent\
    \ in\n      reply to a <response/> element or an <auth/> element with initial\n\
    \      response data.\n   o  <temporary-auth-failure/> -- The authentication failed\
    \ because of\n      a temporary error condition within the receiving entity; sent\
    \ in\n      reply to an <auth/> element or <response/> element.\n"
- title: 6.5.  Client-to-Server Example
  contents:
  - "6.5.  Client-to-Server Example\n   The following example shows the data flow\
    \ for a client authenticating\n   with a server using SASL, normally after successful\
    \ TLS negotiation\n   (note: the alternate steps shown below are provided to illustrate\
    \ the\n   protocol for failure cases; they are not exhaustive and would not\n\
    \   necessarily be triggered by the data sent in the example).\n   Step 1: Client\
    \ initiates stream to server:\n   <stream:stream\n       xmlns='jabber:client'\n\
    \       xmlns:stream='http://etherx.jabber.org/streams'\n       to='example.com'\n\
    \       version='1.0'>\n   Step 2: Server responds with a stream tag sent to client:\n\
    \   <stream:stream\n       xmlns='jabber:client'\n       xmlns:stream='http://etherx.jabber.org/streams'\n\
    \       id='c2s_234'\n       from='example.com'\n       version='1.0'>\n   Step\
    \ 3: Server informs client of available authentication mechanisms:\n   <stream:features>\n\
    \     <mechanisms xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n       <mechanism>DIGEST-MD5</mechanism>\n\
    \       <mechanism>PLAIN</mechanism>\n     </mechanisms>\n   </stream:features>\n\
    \   Step 4: Client selects an authentication mechanism:\n   <auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl'\n\
    \         mechanism='DIGEST-MD5'/>\n   Step 5: Server sends a [BASE64] encoded\
    \ challenge to client:\n   <challenge xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n\
    \   cmVhbG09InNvbWVyZWFsbSIsbm9uY2U9Ik9BNk1HOXRFUUdtMmhoIixxb3A9ImF1dGgi\n   LGNoYXJzZXQ9dXRmLTgsYWxnb3JpdGhtPW1kNS1zZXNzCg==\n\
    \   </challenge>\n   The decoded challenge is:\n   realm=\"somerealm\",nonce=\"\
    OA6MG9tEQGm2hh\",\\\n   qop=\"auth\",charset=utf-8,algorithm=md5-sess\n   Step\
    \ 5 (alt): Server returns error to client:\n   <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n\
    \     <incorrect-encoding/>\n   </failure>\n   </stream:stream>\n   Step 6: Client\
    \ sends a [BASE64] encoded response to the challenge:\n   <response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n\
    \   dXNlcm5hbWU9InNvbWVub2RlIixyZWFsbT0ic29tZXJlYWxtIixub25jZT0i\n   T0E2TUc5dEVRR20yaGgiLGNub25jZT0iT0E2TUhYaDZWcVRyUmsiLG5jPTAw\n\
    \   MDAwMDAxLHFvcD1hdXRoLGRpZ2VzdC11cmk9InhtcHAvZXhhbXBsZS5jb20i\n   LHJlc3BvbnNlPWQzODhkYWQ5MGQ0YmJkNzYwYTE1MjMyMWYyMTQzYWY3LGNo\n\
    \   YXJzZXQ9dXRmLTgK\n   </response>\n   The decoded response is:\n   username=\"\
    somenode\",realm=\"somerealm\",\\\n   nonce=\"OA6MG9tEQGm2hh\",cnonce=\"OA6MHXh6VqTrRk\"\
    ,\\\n   nc=00000001,qop=auth,digest-uri=\"xmpp/example.com\",\\\n   response=d388dad90d4bbd760a152321f2143af7,charset=utf-8\n\
    \   Step 7: Server sends another [BASE64] encoded challenge to client:\n   <challenge\
    \ xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n   cnNwYXV0aD1lYTQwZjYwMzM1YzQyN2I1NTI3Yjg0ZGJhYmNkZmZmZAo=\n\
    \   </challenge>\n   The decoded challenge is:\n   rspauth=ea40f60335c427b5527b84dbabcdfffd\n\
    \   Step 7 (alt): Server returns error to client:\n   <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n\
    \     <temporary-auth-failure/>\n   </failure>\n   </stream:stream>\n   Step 8:\
    \ Client responds to the challenge:\n   <response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/>\n\
    \   Step 9: Server informs client of successful authentication:\n   <success xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/>\n\
    \   Step 9 (alt): Server informs client of failed authentication:\n   <failure\
    \ xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n     <temporary-auth-failure/>\n\
    \   </failure>\n   </stream:stream>\n   Step 10: Client initiates a new stream\
    \ to server:\n   <stream:stream\n       xmlns='jabber:client'\n       xmlns:stream='http://etherx.jabber.org/streams'\n\
    \       to='example.com'\n       version='1.0'>\n   Step 11: Server responds by\
    \ sending a stream header to client along\n   with any additional features (or\
    \ an empty features element):\n   <stream:stream\n       xmlns='jabber:client'\n\
    \       xmlns:stream='http://etherx.jabber.org/streams'\n       id='c2s_345'\n\
    \       from='example.com'\n       version='1.0'>\n   <stream:features>\n    \
    \ <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'/>\n     <session xmlns='urn:ietf:params:xml:ns:xmpp-session'/>\n\
    \   </stream:features>\n"
- title: 6.6.  Server-to-Server Example
  contents:
  - "6.6.  Server-to-Server Example\n   The following example shows the data flow\
    \ for a server authenticating\n   with another server using SASL, normally after\
    \ successful TLS\n   negotiation (note: the alternate steps shown below are provided\
    \ to\n   illustrate the protocol for failure cases; they are not exhaustive\n\
    \   and would not necessarily be triggered by the data sent in the\n   example).\n\
    \   Step 1: Server1 initiates stream to Server2:\n   <stream:stream\n       xmlns='jabber:server'\n\
    \       xmlns:stream='http://etherx.jabber.org/streams'\n       to='example.com'\n\
    \       version='1.0'>\n   Step 2: Server2 responds with a stream tag sent to\
    \ Server1:\n   <stream:stream\n       xmlns='jabber:server'\n       xmlns:stream='http://etherx.jabber.org/streams'\n\
    \       from='example.com'\n       id='s2s_234'\n       version='1.0'>\n   Step\
    \ 3: Server2 informs Server1 of available authentication\n   mechanisms:\n   <stream:features>\n\
    \     <mechanisms xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n       <mechanism>DIGEST-MD5</mechanism>\n\
    \       <mechanism>KERBEROS_V4</mechanism>\n     </mechanisms>\n   </stream:features>\n\
    \   Step 4: Server1 selects an authentication mechanism:\n   <auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl'\n\
    \         mechanism='DIGEST-MD5'/>\n   Step 5: Server2 sends a [BASE64] encoded\
    \ challenge to Server1:\n   <challenge xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n\
    \   cmVhbG09InNvbWVyZWFsbSIsbm9uY2U9Ik9BNk1HOXRFUUdtMmhoIixxb3A9\n   ImF1dGgiLGNoYXJzZXQ9dXRmLTgsYWxnb3JpdGhtPW1kNS1zZXNz\n\
    \   </challenge>\n   The decoded challenge is:\n   realm=\"somerealm\",nonce=\"\
    OA6MG9tEQGm2hh\",\\\n   qop=\"auth\",charset=utf-8,algorithm=md5-sess\n   Step\
    \ 5 (alt): Server2 returns error to Server1:\n   <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n\
    \     <incorrect-encoding/>\n   </failure>\n   </stream:stream>\n   Step 6: Server1\
    \ sends a [BASE64] encoded response to the challenge:\n   <response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n\
    \   dXNlcm5hbWU9ImV4YW1wbGUub3JnIixyZWFsbT0ic29tZXJlYWxtIixub25j\n   ZT0iT0E2TUc5dEVRR20yaGgiLGNub25jZT0iT0E2TUhYaDZWcVRyUmsiLG5j\n\
    \   PTAwMDAwMDAxLHFvcD1hdXRoLGRpZ2VzdC11cmk9InhtcHAvZXhhbXBsZS5v\n   cmciLHJlc3BvbnNlPWQzODhkYWQ5MGQ0YmJkNzYwYTE1MjMyMWYyMTQzYWY3\n\
    \   LGNoYXJzZXQ9dXRmLTgK\n   </response>\n   The decoded response is:\n   username=\"\
    example.org\",realm=\"somerealm\",\\\n   nonce=\"OA6MG9tEQGm2hh\",cnonce=\"OA6MHXh6VqTrRk\"\
    ,\\\n   nc=00000001,qop=auth,digest-uri=\"xmpp/example.org\",\\\n   response=d388dad90d4bbd760a152321f2143af7,charset=utf-8\n\
    \   Step 7: Server2 sends another [BASE64] encoded challenge to Server1:\n   <challenge\
    \ xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n   cnNwYXV0aD1lYTQwZjYwMzM1YzQyN2I1NTI3Yjg0ZGJhYmNkZmZmZAo=\n\
    \   </challenge>\n   The decoded challenge is:\n   rspauth=ea40f60335c427b5527b84dbabcdfffd\n\
    \   Step 7 (alt): Server2 returns error to Server1:\n   <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n\
    \     <invalid-authzid/>\n   </failure>\n   </stream:stream>\n   Step 8: Server1\
    \ responds to the challenge:\n   <response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/>\n\
    \   Step 8 (alt): Server1 aborts negotiation:\n   <abort xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/>\n\
    \   Step 9: Server2 informs Server1 of successful authentication:\n   <success\
    \ xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/>\n   Step 9 (alt): Server2 informs\
    \ Server1 of failed authentication:\n   <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n\
    \     <aborted/>\n   </failure>\n   </stream:stream>\n   Step 10: Server1 initiates\
    \ a new stream to Server2:\n   <stream:stream\n       xmlns='jabber:server'\n\
    \       xmlns:stream='http://etherx.jabber.org/streams'\n       to='example.com'\n\
    \       version='1.0'>\n   Step 11: Server2 responds by sending a stream header\
    \ to Server1 along\n   with any additional features (or an empty features element):\n\
    \   <stream:stream\n       xmlns='jabber:client'\n       xmlns:stream='http://etherx.jabber.org/streams'\n\
    \       from='example.com'\n       id='s2s_345'\n       version='1.0'>\n   <stream:features/>\n"
- title: 7.  Resource Binding
  contents:
  - "7.  Resource Binding\n   After SASL negotiation (Section 6) with the receiving\
    \ entity, the\n   initiating entity MAY want or need to bind a specific resource\
    \ to\n   that stream.  In general this applies only to clients: in order to\n\
    \   conform to the addressing format (Section 3) and stanza delivery\n   rules\
    \ (Section 10) specified herein, there MUST be a resource\n   identifier associated\
    \ with the <node@domain> of the client (which is\n   either generated by the server\
    \ or provided by the client\n   application); this ensures that the address for\
    \ use over that stream\n   is a \"full JID\" of the form <node@domain/resource>.\n\
    \   Upon receiving a success indication within the SASL negotiation, the\n   client\
    \ MUST send a new stream header to the server, to which the\n   server MUST respond\
    \ with a stream header as well as a list of\n   available stream features.  Specifically,\
    \ if the server requires the\n   client to bind a resource to the stream after\
    \ successful SASL\n   negotiation, it MUST include an empty <bind/> element qualified\
    \ by\n   the 'urn:ietf:params:xml:ns:xmpp-bind' namespace in the stream\n   features\
    \ list it presents to the client upon sending the header for\n   the response\
    \ stream sent after successful SASL negotiation (but not\n   before):\n   Server\
    \ advertises resource binding feature to client:\n   <stream:stream\n       xmlns='jabber:client'\n\
    \       xmlns:stream='http://etherx.jabber.org/streams'\n       id='c2s_345'\n\
    \       from='example.com'\n       version='1.0'>\n   <stream:features>\n    \
    \ <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'/>\n   </stream:features>\n  \
    \ Upon being so informed that resource binding is required, the client\n   MUST\
    \ bind a resource to the stream by sending to the server an IQ\n   stanza of type\
    \ \"set\" (see IQ Semantics (Section 9.2.3)) containing\n   data qualified by\
    \ the 'urn:ietf:params:xml:ns:xmpp-bind' namespace.\n   If the client wishes to\
    \ allow the server to generate the resource\n   identifier on its behalf, it sends\
    \ an IQ stanza of type \"set\" that\n   contains an empty <bind/> element:\n \
    \  Client asks server to bind a resource:\n   <iq type='set' id='bind_1'>\n  \
    \   <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'/>\n   </iq>\n   A server that\
    \ supports resource binding MUST be able to generate a\n   resource identifier\
    \ on behalf of a client.  A resource identifier\n   generated by the server MUST\
    \ be unique for that <node@domain>.\n   If the client wishes to specify the resource\
    \ identifier, it sends an\n   IQ stanza of type \"set\" that contains the desired\
    \ resource identifier\n   as the XML character data of a <resource/> element that\
    \ is a child of\n   the <bind/> element:\n   Client binds a resource:\n   <iq\
    \ type='set' id='bind_2'>\n     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>\n\
    \       <resource>someresource</resource>\n     </bind>\n   </iq>\n   Once the\
    \ server has generated a resource identifier for the client or\n   accepted the\
    \ resource identifier provided by the client, it MUST\n   return an IQ stanza\
    \ of type \"result\" to the client, which MUST\n   include a <jid/> child element\
    \ that specifies the full JID for the\n   connected resource as determined by\
    \ the server:\n   Server informs client of successful resource binding:\n   <iq\
    \ type='result' id='bind_2'>\n     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>\n\
    \       <jid>somenode@example.com/someresource</jid>\n     </bind>\n   </iq>\n\
    \   A server SHOULD accept the resource identifier provided by the\n   client,\
    \ but MAY override it with a resource identifier that the\n   server generates;\
    \ in this case, the server SHOULD NOT return a stanza\n   error (e.g., <forbidden/>)\
    \ to the client but instead SHOULD\n   communicate the generated resource identifier\
    \ to the client in the IQ\n   result as shown above.\n   When a client supplies\
    \ a resource identifier, the following stanza\n   error conditions are possible\
    \ (see Stanza Errors (Section 9.3)):\n   o  The provided resource identifier cannot\
    \ be processed by the server\n      in accordance with Resourceprep (Appendix\
    \ B).\n   o  The client is not allowed to bind a resource to the stream (e.g.,\n\
    \      because the node or user has reached a limit on the number of\n      connected\
    \ resources allowed).\n   o  The provided resource identifier is already in use\
    \ but the server\n      does not allow binding of multiple connected resources\
    \ with the\n      same identifier.\n   The protocol for these error conditions\
    \ is shown below.\n   Resource identifier cannot be processed:\n   <iq type='error'\
    \ id='bind_2'>\n     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>\n       <resource>someresource</resource>\n\
    \     </bind>\n     <error type='modify'>\n       <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n\
    \     </error>\n   </iq>\n   Client is not allowed to bind a resource:\n   <iq\
    \ type='error' id='bind_2'>\n     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>\n\
    \       <resource>someresource</resource>\n     </bind>\n     <error type='cancel'>\n\
    \       <not-allowed xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n     </error>\n\
    \   </iq>\n   Resource identifier is in use:\n   <iq type='error' id='bind_2'>\n\
    \     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>\n       <resource>someresource</resource>\n\
    \     </bind>\n     <error type='cancel'>\n       <conflict xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n\
    \     </error>\n   </iq>\n   If, before completing the resource binding step,\
    \ the client attempts\n   to send an XML stanza other than an IQ stanza with a\
    \ <bind/> child\n   qualified by the 'urn:ietf:params:xml:ns:xmpp-bind' namespace,\
    \ the\n   server MUST NOT process the stanza and SHOULD return a\n   <not-authorized/>\
    \ stanza error to the client.\n"
- title: 8.  Server Dialback
  contents:
  - '8.  Server Dialback

    '
- title: 8.1.  Overview
  contents:
  - "8.1.  Overview\n   The Jabber protocols from which XMPP was adapted include a\
    \ \"server\n   dialback\" method for protecting against domain spoofing, thus\
    \ making\n   it more difficult to spoof XML stanzas.  Server dialback is not a\n\
    \   security mechanism, and results in weak verification of server\n   identities\
    \ only (see Server-to-Server Communications (Section 14.4)\n   regarding this\
    \ method's security characteristics).  Domains requiring\n   robust security SHOULD\
    \ use TLS and SASL; see Server-to-Server\n   Communications (Section 14.4) for\
    \ details.  If SASL is used for\n   server-to-server authentication, dialback\
    \ SHOULD NOT be used since it\n   is unnecessary.  Documentation of dialback is\
    \ included mainly for the\n   sake of backward-compatibility with existing implementations\
    \ and\n   deployments.\n   The server dialback method is made possible by the\
    \ existence of the\n   Domain Name System (DNS), since one server can (normally)\
    \ discover\n   the authoritative server for a given domain.  Because dialback\n\
    \   depends on DNS, inter-domain communications MUST NOT proceed until\n   the\
    \ Domain Name System (DNS) hostnames asserted by the servers have\n   been resolved\
    \ (see Server-to-Server Communications (Section 14.4)).\n   Server dialback is\
    \ uni-directional, and results in (weak)\n   verification of identities for one\
    \ stream in one direction.  Because\n   server dialback is not an authentication\
    \ mechanism, mutual\n   authentication is not possible via dialback.  Therefore,\
    \ server\n   dialback MUST be completed in each direction in order to enable\n\
    \   bi-directional communications between two domains.\n   The method for generating\
    \ and verifying the keys used in server\n   dialback MUST take into account the\
    \ hostnames being used, the stream\n   ID generated by the receiving server, and\
    \ a secret known by the\n   authoritative server's network.  The stream ID is\
    \ security-critical\n   in server dialback and therefore MUST be both unpredictable\
    \ and\n   non-repeating (see [RANDOM] for recommendations regarding randomness\n\
    \   for security purposes).\n   Any error that occurs during dialback negotiation\
    \ MUST be considered\n   a stream error, resulting in termination of the stream\
    \ and of the\n   underlying TCP connection.  The possible error conditions are\n\
    \   specified in the protocol description below.\n   The following terminology\
    \ applies:\n   o  Originating Server -- the server that is attempting to establish\
    \ a\n      connection between two domains.\n   o  Receiving Server -- the server\
    \ that is trying to authenticate that\n      the Originating Server represents\
    \ the domain which it claims to\n      be.\n   o  Authoritative Server -- the\
    \ server that answers to the DNS\n      hostname asserted by the Originating Server;\
    \ for basic\n      environments this will be the Originating Server, but it could\
    \ be\n      a separate machine in the Originating Server's network.\n"
- title: 8.2.  Order of Events
  contents:
  - "8.2.  Order of Events\n   The following is a brief summary of the order of events\
    \ in dialback:\n   1.  The Originating Server establishes a connection to the\
    \ Receiving\n       Server.\n   2.  The Originating Server sends a 'key' value\
    \ over the connection to\n       the Receiving Server.\n   3.  The Receiving Server\
    \ establishes a connection to the\n       Authoritative Server.\n   4.  The Receiving\
    \ Server sends the same 'key' value to the\n       Authoritative Server.\n   5.\
    \  The Authoritative Server replies that key is valid or invalid.\n   6.  The\
    \ Receiving Server informs the Originating Server whether it is\n       authenticated\
    \ or not.\n   We can represent this flow of events graphically as follows:\n \
    \  Originating               Receiving\n     Server                    Server\n\
    \   -----------               ---------\n       |                         |\n\
    \       |   establish connection  |\n       | ----------------------> |\n    \
    \   |                         |\n       |   send stream header    |\n       |\
    \ ----------------------> |\n       |                         |\n       |   send\
    \ stream header    |\n       | <---------------------- |\n       |           \
    \              |                   Authoritative\n       |   send dialback key\
    \     |                       Server\n       | ----------------------> |     \
    \              -------------\n       |                         |             \
    \            |\n                                 |   establish connection  |\n\
    \                                 | ----------------------> |\n              \
    \                   |                         |\n                            \
    \     |   send stream header    |\n                                 | ---------------------->\
    \ |\n                                 |                         |\n          \
    \                       |   send stream header    |\n                        \
    \         | <---------------------- |\n                                 |    \
    \                     |\n                                 |   send verify request\
    \   |\n                                 | ----------------------> |\n        \
    \                         |                         |\n                      \
    \           |   send verify response  |\n                                 | <----------------------\
    \ |\n                                 |\n       |  report dialback result |\n\
    \       | <---------------------- |\n       |                         |\n"
- title: 8.3.  Protocol
  contents:
  - "8.3.  Protocol\n   The detailed protocol interaction between the servers is as\
    \ follows:\n   1.  The Originating Server establishes TCP connection to the\n\
    \       Receiving Server.\n   2.  The Originating Server sends a stream header\
    \ to the Receiving\n       Server:\n   <stream:stream\n       xmlns:stream='http://etherx.jabber.org/streams'\n\
    \       xmlns='jabber:server'\n       xmlns:db='jabber:server:dialback'>\n   Note:\
    \ The 'to' and 'from' attributes are OPTIONAL on the root stream\n   element.\
    \  The inclusion of the xmlns:db namespace declaration with\n   the name shown\
    \ indicates to the Receiving Server that the Originating\n   Server supports dialback.\
    \  If the namespace name is incorrect, then\n   the Receiving Server MUST generate\
    \ an <invalid-namespace/> stream\n   error condition and terminate both the XML\
    \ stream and the underlying\n   TCP connection.\n   3.  The Receiving Server SHOULD\
    \ send a stream header back to the\n       Originating Server, including a unique\
    \ ID for this interaction:\n   <stream:stream\n       xmlns:stream='http://etherx.jabber.org/streams'\n\
    \       xmlns='jabber:server'\n       xmlns:db='jabber:server:dialback'\n    \
    \   id='457F9224A0...'>\n   Note: The 'to' and 'from' attributes are OPTIONAL\
    \ on the root stream\n   element.  If the namespace name is incorrect, then the\
    \ Originating\n   Server MUST generate an <invalid-namespace/> stream error condition\n\
    \   and terminate both the XML stream and the underlying TCP connection.\n   Note\
    \ well that the Receiving Server SHOULD reply but MAY silently\n   terminate the\
    \ XML stream and underlying TCP connection depending on\n   security policies\
    \ in place; however, if the Receiving Server desires\n   to proceed, it MUST send\
    \ a stream header back to the Originating\n   Server.\n   4.  The Originating\
    \ Server sends a dialback key to the Receiving\n       Server:\n   <db:result\n\
    \       to='Receiving Server'\n       from='Originating Server'>\n     98AF014EDC0...\n\
    \   </db:result>\n   Note: This key is not examined by the Receiving Server, since\
    \ the\n   Receiving Server does not keep information about the Originating\n \
    \  Server between sessions.  The key generated by the Originating Server\n   MUST\
    \ be based in part on the value of the ID provided by the\n   Receiving Server\
    \ in the previous step, and in part on a secret shared\n   by the Originating\
    \ Server and Authoritative Server.  If the value of\n   the 'to' address does\
    \ not match a hostname recognized by the\n   Receiving Server, then the Receiving\
    \ Server MUST generate a\n   <host-unknown/> stream error condition and terminate\
    \ both the XML\n   stream and the underlying TCP connection.  If the value of\
    \ the 'from'\n   address matches a domain with which the Receiving Server already\
    \ has\n   an established connection, then the Receiving Server MUST maintain\n\
    \   the existing connection until it validates whether the new connection\n  \
    \ is legitimate; additionally, the Receiving Server MAY choose to\n   generate\
    \ a <not-authorized/> stream error condition for the new\n   connection and then\
    \ terminate both the XML stream and the underlying\n   TCP connection related\
    \ to the new request.\n   5.  The Receiving Server establishes a TCP connection\
    \ back to the\n       domain name asserted by the Originating Server, as a result\
    \ of\n       which it connects to the Authoritative Server.  (Note: As an\n  \
    \     optimization, an implementation MAY reuse an existing connection\n     \
    \  here.)\n   6.  The Receiving Server sends the Authoritative Server a stream\n\
    \       header:\n   <stream:stream\n       xmlns:stream='http://etherx.jabber.org/streams'\n\
    \       xmlns='jabber:server'\n       xmlns:db='jabber:server:dialback'>\n   Note:\
    \ The 'to' and 'from' attributes are OPTIONAL on the root stream\n   element.\
    \  If the namespace name is incorrect, then the Authoritative\n   Server MUST\
    \ generate an <invalid-namespace/> stream error condition\n   and terminate both\
    \ the XML stream and the underlying TCP connection.\n   7.  The Authoritative\
    \ Server sends the Receiving Server a stream\n       header:\n   <stream:stream\n\
    \       xmlns:stream='http://etherx.jabber.org/streams'\n       xmlns='jabber:server'\n\
    \       xmlns:db='jabber:server:dialback'\n       id='1251A342B...'>\n   Note:\
    \ If the namespace name is incorrect, then the Receiving Server\n   MUST generate\
    \ an <invalid-namespace/> stream error condition and\n   terminate both the XML\
    \ stream and the underlying TCP connection\n   between it and the Authoritative\
    \ Server.  If a stream error occurs\n   between the Receiving Server and the Authoritative\
    \ Server, then the\n   Receiving Server MUST generate a <remote-connection-failed/>\
    \ stream\n   error condition and terminate both the XML stream and the underlying\n\
    \   TCP connection between it and the Originating Server.\n   8.  The Receiving\
    \ Server sends the Authoritative Server a request for\n       verification of\
    \ a key:\n   <db:verify\n       from='Receiving Server'\n       to='Originating\
    \ Server'\n       id='457F9224A0...'>\n     98AF014EDC0...\n   </db:verify>\n\
    \   Note: Passed here are the hostnames, the original identifier from the\n  \
    \ Receiving Server's stream header to the Originating Server in Step 3,\n   and\
    \ the key that the Originating Server sent to the Receiving Server\n   in Step\
    \ 4.  Based on this information, as well as shared secret\n   information within\
    \ the Authoritative Server's network, the key is\n   verified.  Any verifiable\
    \ method MAY be used to generate the key.  If\n   the value of the 'to' address\
    \ does not match a hostname recognized by\n   the Authoritative Server, then the\
    \ Authoritative Server MUST generate\n   a <host-unknown/> stream error condition\
    \ and terminate both the XML\n   stream and the underlying TCP connection.  If\
    \ the value of the 'from'\n   address does not match the hostname represented\
    \ by the Receiving\n   Server when opening the TCP connection (or any validated\
    \ domain\n   thereof, such as a validated subdomain of the Receiving Server's\n\
    \   hostname or another validated domain hosted by the Receiving Server),\n  \
    \ then the Authoritative Server MUST generate an <invalid-from/> stream\n   error\
    \ condition and terminate both the XML stream and the underlying\n   TCP connection.\n\
    \   9.  The Authoritative Server verifies whether the key was valid or\n     \
    \  invalid:\n   <db:verify\n       from='Originating Server'\n       to='Receiving\
    \ Server'\n       type='valid'\n       id='457F9224A0...'/>\n   or\n   <db:verify\n\
    \       from='Originating Server'\n       to='Receiving Server'\n       type='invalid'\n\
    \       id='457F9224A0...'/>\n   Note: If the ID does not match that provided\
    \ by the Receiving Server\n   in Step 3, then the Receiving Server MUST generate\
    \ an <invalid-id/>\n   stream error condition and terminate both the XML stream\
    \ and the\n   underlying TCP connection.  If the value of the 'to' address does\
    \ not\n   match a hostname recognized by the Receiving Server, then the\n   Receiving\
    \ Server MUST generate a <host-unknown/> stream error\n   condition and terminate\
    \ both the XML stream and the underlying TCP\n   connection.  If the value of\
    \ the 'from' address does not match the\n   hostname represented by the Originating\
    \ Server when opening the TCP\n   connection (or any validated domain thereof,\
    \ such as a validated\n   subdomain of the Originating Server's hostname or another\
    \ validated\n   domain hosted by the Originating Server), then the Receiving Server\n\
    \   MUST generate an <invalid-from/> stream error condition and terminate\n  \
    \ both the XML stream and the underlying TCP connection.  After\n   returning\
    \ the verification to the Receiving Server, the Authoritative\n   Server SHOULD\
    \ terminate the stream between them.\n   10. The Receiving Server informs the\
    \ Originating Server of the\n       result:\n   <db:result\n       from='Receiving\
    \ Server'\n       to='Originating Server'\n       type='valid'/>\n   Note: At\
    \ this point, the connection has either been validated via a\n   type='valid',\
    \ or reported as invalid.  If the connection is invalid,\n   then the Receiving\
    \ Server MUST terminate both the XML stream and the\n   underlying TCP connection.\
    \  If the connection is validated, data can\n   be sent by the Originating Server\
    \ and read by the Receiving Server;\n   before that, all XML stanzas sent to the\
    \ Receiving Server SHOULD be\n   silently dropped.\n   The result of the foregoing\
    \ is that the Receiving Server has verified\n   the identity of the Originating\
    \ Server, so that the Originating\n   Server can send, and the Receiving Server\
    \ can accept, XML stanzas\n   over the \"initial stream\" (i.e., the stream from\
    \ the Originating\n   Server to the Receiving Server).  In order to verify the\
    \ identities\n   of the entities using the \"response stream\" (i.e., the stream\
    \ from\n   the Receiving Server to the Originating Server), dialback MUST be\n\
    \   completed in the opposite direction as well.\n   After successful dialback\
    \ negotiation, the Receiving Server SHOULD\n   accept subsequent <db:result/>\
    \ packets (e.g., validation requests\n   sent to a subdomain or other hostname\
    \ serviced by the Receiving\n   Server) from the Originating Server over the existing\
    \ validated\n   connection; this enables \"piggybacking\" of the original validated\n\
    \   connection in one direction.\n   Even if dialback negotiation is successful,\
    \ a server MUST verify that\n   all XML stanzas received from the other server\
    \ include a 'from'\n   attribute and a 'to' attribute; if a stanza does not meet\
    \ this\n   restriction, the server that receives the stanza MUST generate an\n\
    \   <improper-addressing/> stream error condition and terminate both the\n   XML\
    \ stream and the underlying TCP connection.  Furthermore, a server\n   MUST verify\
    \ that the 'from' attribute of stanzas received from the\n   other server includes\
    \ a validated domain for the stream; if a stanza\n   does not meet this restriction,\
    \ the server that receives the stanza\n   MUST generate an <invalid-from/> stream\
    \ error condition and terminate\n   both the XML stream and the underlying TCP\
    \ connection.  Both of these\n   checks help to prevent spoofing related to particular\
    \ stanzas.\n"
- title: 9.  XML Stanzas
  contents:
  - "9.  XML Stanzas\n   After TLS negotiation (Section 5) if desired, SASL negotiation\n\
    \   (Section 6), and Resource Binding (Section 7) if necessary, XML\n   stanzas\
    \ can be sent over the streams.  Three kinds of XML stanza are\n   defined for\
    \ the 'jabber:client' and 'jabber:server' namespaces:\n   <message/>, <presence/>,\
    \ and <iq/>.  In addition, there are five\n   common attributes for these kinds\
    \ of stanza.  These common\n   attributes, as well as the basic semantics of the\
    \ three stanza kinds,\n   are defined herein; more detailed information regarding\
    \ the syntax of\n   XML stanzas in relation to instant messaging and presence\n\
    \   applications is provided in [XMPP-IM].\n"
- title: 9.1.  Common Attributes
  contents:
  - "9.1.  Common Attributes\n   The following five attributes are common to message,\
    \ presence, and IQ\n   stanzas:\n"
- title: 9.1.1.  to
  contents:
  - "9.1.1.  to\n   The 'to' attribute specifies the JID of the intended recipient\
    \ for\n   the stanza.\n   In the 'jabber:client' namespace, a stanza SHOULD possess\
    \ a 'to'\n   attribute, although a stanza sent from a client to a server for\n\
    \   handling by that server (e.g., presence sent to the server for\n   broadcasting\
    \ to other entities) SHOULD NOT possess a 'to' attribute.\n   In the 'jabber:server'\
    \ namespace, a stanza MUST possess a 'to'\n   attribute; if a server receives\
    \ a stanza that does not meet this\n   restriction, it MUST generate an <improper-addressing/>\
    \ stream error\n   condition and terminate both the XML stream and the underlying\
    \ TCP\n   connection with the offending server.\n   If the value of the 'to' attribute\
    \ is invalid or cannot be contacted,\n   the entity discovering that fact (usually\
    \ the sender's or recipient's\n   server) MUST return an appropriate error to\
    \ the sender, setting the\n   'from' attribute of the error stanza to the value\
    \ provided in the\n   'to' attribute of the offending stanza.\n"
- title: 9.1.2.  from
  contents:
  - "9.1.2.  from\n   The 'from' attribute specifies the JID of the sender.\n   When\
    \ a server receives an XML stanza within the context of an\n   authenticated stream\
    \ qualified by the 'jabber:client' namespace, it\n   MUST do one of the following:\n\
    \   1.  validate that the value of the 'from' attribute provided by the\n    \
    \   client is that of a connected resource for the associated entity\n   2.  add\
    \ a 'from' address to the stanza whose value is the bare JID\n       (<node@domain>)\
    \ or the full JID (<node@domain/resource>)\n       determined by the server for\
    \ the connected resource that\n       generated the stanza (see Determination\
    \ of Addresses (Section\n       3.5))\n   If a client attempts to send an XML\
    \ stanza for which the value of the\n   'from' attribute does not match one of\
    \ the connected resources for\n   that entity, the server SHOULD return an <invalid-from/>\
    \ stream error\n   to the client.  If a client attempts to send an XML stanza\
    \ over a\n   stream that is not yet authenticated, the server SHOULD return a\n\
    \   <not-authorized/> stream error to the client.  If generated, both of\n   these\
    \ conditions MUST result in closure of the stream and termination\n   of the underlying\
    \ TCP connection; this helps to prevent a denial of\n   service attack launched\
    \ from a rogue client.\n   When a server generates a stanza from the server itself\
    \ for delivery\n   to a connected client (e.g., in the context of data storage\
    \ services\n   provided by the server on behalf of the client), the stanza MUST\n\
    \   either (1) not include a 'from' attribute or (2) include a 'from'\n   attribute\
    \ whose value is the account's bare JID (<node@domain>) or\n   client's full JID\
    \ (<node@domain/resource>).  A server MUST NOT send\n   to the client a stanza\
    \ without a 'from' attribute if the stanza was\n   not generated by the server\
    \ itself.  When a client receives a stanza\n   that does not include a 'from'\
    \ attribute, it MUST assume that the\n   stanza is from the server to which the\
    \ client is connected.\n   In the 'jabber:server' namespace, a stanza MUST possess\
    \ a 'from'\n   attribute; if a server receives a stanza that does not meet this\n\
    \   restriction, it MUST generate an <improper-addressing/> stream error\n   condition.\
    \  Furthermore, the domain identifier portion of the JID\n   contained in the\
    \ 'from' attribute MUST match the hostname of the\n   sending server (or any validated\
    \ domain thereof, such as a validated\n   subdomain of the sending server's hostname\
    \ or another validated\n   domain hosted by the sending server) as communicated\
    \ in the SASL\n   negotiation or dialback negotiation; if a server receives a\
    \ stanza\n   that does not meet this restriction, it MUST generate an\n   <invalid-from/>\
    \ stream error condition.  Both of these conditions\n   MUST result in closing\
    \ of the stream and termination of the\n   underlying TCP connection; this helps\
    \ to prevent a denial of service\n   attack launched from a rogue server.\n"
- title: 9.1.3.  id
  contents:
  - "9.1.3.  id\n   The optional 'id' attribute MAY be used by a sending entity for\n\
    \   internal tracking of stanzas that it sends and receives (especially\n   for\
    \ tracking the request-response interaction inherent in the\n   semantics of IQ\
    \ stanzas).  It is OPTIONAL for the value of the 'id'\n   attribute to be unique\
    \ globally, within a domain, or within a stream.\n   The semantics of IQ stanzas\
    \ impose additional restrictions; see IQ\n   Semantics (Section 9.2.3).\n"
- title: 9.1.4.  type
  contents:
  - "9.1.4.  type\n   The 'type' attribute specifies detailed information about the\
    \ purpose\n   or context of the message, presence, or IQ stanza.  The particular\n\
    \   allowable values for the 'type' attribute vary depending on whether\n   the\
    \ stanza is a message, presence, or IQ; the values for message and\n   presence\
    \ stanzas are specific to instant messaging and presence\n   applications and\
    \ therefore are defined in [XMPP-IM], whereas the\n   values for IQ stanzas specify\
    \ the role of an IQ stanza in a\n   structured request-response \"conversation\"\
    \ and thus are defined under\n   IQ Semantics (Section 9.2.3) below.  The only\
    \ 'type' value common to\n   all three stanzas is \"error\"; see Stanza Errors\
    \ (Section 9.3).\n"
- title: 9.1.5.  xml:lang
  contents:
  - "9.1.5.  xml:lang\n   A stanza SHOULD possess an 'xml:lang' attribute (as defined\
    \ in\n   Section 2.12 of [XML]) if the stanza contains XML character data that\n\
    \   is intended to be presented to a human user (as explained in RFC 2277\n  \
    \ [CHARSET], \"internationalization is for humans\").  The value of the\n   'xml:lang'\
    \ attribute specifies the default language of any such\n   human-readable XML\
    \ character data, which MAY be overridden by the\n   'xml:lang' attribute of a\
    \ specific child element.  If a stanza does\n   not possess an 'xml:lang' attribute,\
    \ an implementation MUST assume\n   that the default language is that specified\
    \ for the stream as defined\n   under Stream Attributes (Section 4.4) above. \
    \ The value of the\n   'xml:lang' attribute MUST be an NMTOKEN and MUST conform\
    \ to the\n   format defined in RFC 3066 [LANGTAGS].\n"
- title: 9.2.  Basic Semantics
  contents:
  - '9.2.  Basic Semantics

    '
- title: 9.2.1.  Message Semantics
  contents:
  - "9.2.1.  Message Semantics\n   The <message/> stanza kind can be seen as a \"\
    push\" mechanism whereby\n   one entity pushes information to another entity,\
    \ similar to the\n   communications that occur in a system such as email.  All\
    \ message\n   stanzas SHOULD possess a 'to' attribute that specifies the intended\n\
    \   recipient of the message; upon receiving such a stanza, a server\n   SHOULD\
    \ route or deliver it to the intended recipient (see Server\n   Rules for Handling\
    \ XML Stanzas (Section 10) for general routing and\n   delivery rules related\
    \ to XML stanzas).\n"
- title: 9.2.2.  Presence Semantics
  contents:
  - "9.2.2.  Presence Semantics\n   The <presence/> element can be seen as a basic\
    \ broadcast or\n   \"publish-subscribe\" mechanism, whereby multiple entities\
    \ receive\n   information about an entity to which they have subscribed (in this\n\
    \   case, network availability information).  In general, a publishing\n   entity\
    \ SHOULD send a presence stanza with no 'to' attribute, in which\n   case the\
    \ server to which the entity is connected SHOULD broadcast or\n   multiplex that\
    \ stanza to all subscribing entities.  However, a\n   publishing entity MAY also\
    \ send a presence stanza with a 'to'\n   attribute, in which case the server SHOULD\
    \ route or deliver that\n   stanza to the intended recipient.  See Server Rules\
    \ for Handling XML\n   Stanzas (Section 10) for general routing and delivery rules\
    \ related\n   to XML stanzas, and [XMPP-IM] for presence-specific rules in the\n\
    \   context of an instant messaging and presence application.\n"
- title: 9.2.3.  IQ Semantics
  contents:
  - "9.2.3.  IQ Semantics\n   Info/Query, or IQ, is a request-response mechanism,\
    \ similar in some\n   ways to [HTTP].  The semantics of IQ enable an entity to\
    \ make a\n   request of, and receive a response from, another entity.  The data\n\
    \   content of the request and response is defined by the namespace\n   declaration\
    \ of a direct child element of the IQ element, and the\n   interaction is tracked\
    \ by the requesting entity through use of the\n   'id' attribute.  Thus, IQ interactions\
    \ follow a common pattern of\n   structured data exchange such as get/result or\
    \ set/result (although\n   an error may be returned in reply to a request if appropriate):\n\
    \   Requesting                 Responding\n     Entity                     Entity\n\
    \   ----------                 ----------\n       |                          \
    \ |\n       | <iq type='get' id='1'>    |\n       | ------------------------>\
    \ |\n       |                           |\n       | <iq type='result' id='1'>\
    \ |\n       | <------------------------ |\n       |                          \
    \ |\n       | <iq type='set' id='2'>    |\n       | ------------------------>\
    \ |\n       |                           |\n       | <iq type='error' id='2'> \
    \ |\n       | <------------------------ |\n       |                          \
    \ |\n   In order to enforce these semantics, the following rules apply:\n   1.\
    \  The 'id' attribute is REQUIRED for IQ stanzas.\n   2.  The 'type' attribute\
    \ is REQUIRED for IQ stanzas.  The value MUST\n       be one of the following:\n\
    \       *  get -- The stanza is a request for information or\n          requirements.\n\
    \       *  set -- The stanza provides required data, sets new values, or\n   \
    \       replaces existing values.\n       *  result -- The stanza is a response\
    \ to a successful get or set\n          request.\n       *  error -- An error\
    \ has occurred regarding processing or\n          delivery of a previously-sent\
    \ get or set (see Stanza Errors\n          (Section 9.3)).\n   3.  An entity that\
    \ receives an IQ request of type \"get\" or \"set\" MUST\n       reply with an\
    \ IQ response of type \"result\" or \"error\" (the\n       response MUST preserve\
    \ the 'id' attribute of the request).\n   4.  An entity that receives a stanza\
    \ of type \"result\" or \"error\" MUST\n       NOT respond to the stanza by sending\
    \ a further IQ response of\n       type \"result\" or \"error\"; however, as shown\
    \ above, the requesting\n       entity MAY send another request (e.g., an IQ of\
    \ type \"set\" in\n       order to provide required information discovered through\
    \ a\n       get/result pair).\n   5.  An IQ stanza of type \"get\" or \"set\"\
    \ MUST contain one and only one\n       child element that specifies the semantics\
    \ of the particular\n       request or response.\n   6.  An IQ stanza of type\
    \ \"result\" MUST include zero or one child\n       elements.\n   7.  An IQ stanza\
    \ of type \"error\" SHOULD include the child element\n       contained in the\
    \ associated \"get\" or \"set\" and MUST include an\n       <error/> child; for\
    \ details, see Stanza Errors (Section 9.3).\n"
- title: 9.3.  Stanza Errors
  contents:
  - "9.3.  Stanza Errors\n   Stanza-related errors are handled in a manner similar\
    \ to stream\n   errors (Section 4.7).  However, unlike stream errors, stanza errors\n\
    \   are recoverable; therefore error stanzas include hints regarding\n   actions\
    \ that the original sender can take in order to remedy the\n   error.\n"
- title: 9.3.1.  Rules
  contents:
  - "9.3.1.  Rules\n   The following rules apply to stanza-related errors:\n   o \
    \ The receiving or processing entity that detects an error condition\n      in\
    \ relation to a stanza MUST return to the sending entity a stanza\n      of the\
    \ same kind (message, presence, or IQ), whose 'type'\n      attribute is set to\
    \ a value of \"error\" (such a stanza is called an\n      \"error stanza\" herein).\n\
    \   o  The entity that generates an error stanza SHOULD include the\n      original\
    \ XML sent so that the sender can inspect and, if\n      necessary, correct the\
    \ XML before attempting to resend.\n   o  An error stanza MUST contain an <error/>\
    \ child element.\n   o  An <error/> child MUST NOT be included if the 'type' attribute\
    \ has\n      a value other than \"error\" (or if there is no 'type' attribute).\n\
    \   o  An entity that receives an error stanza MUST NOT respond to the\n     \
    \ stanza with a further error stanza; this helps to prevent looping.\n"
- title: 9.3.2.  Syntax
  contents:
  - "9.3.2.  Syntax\n   The syntax for stanza-related errors is as follows:\n   <stanza-kind\
    \ to='sender' type='error'>\n     [RECOMMENDED to include sender XML here]\n \
    \    <error type='error-type'>\n       <defined-condition xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n\
    \       <text xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'\n             xml:lang='langcode'>\n\
    \         OPTIONAL descriptive text\n       </text>\n       [OPTIONAL application-specific\
    \ condition element]\n     </error>\n   </stanza-kind>\n   The stanza-kind is\
    \ one of message, presence, or iq.\n   The value of the <error/> element's 'type'\
    \ attribute MUST be one of\n   the following:\n   o  cancel -- do not retry (the\
    \ error is unrecoverable)\n   o  continue -- proceed (the condition was only a\
    \ warning)\n   o  modify -- retry after changing the data sent\n   o  auth --\
    \ retry after providing credentials\n   o  wait -- retry after waiting (the error\
    \ is temporary)\n   The <error/> element:\n   o  MUST contain a child element\
    \ corresponding to one of the defined\n      stanza error conditions specified\
    \ below; this element MUST be\n      qualified by the 'urn:ietf:params:xml:ns:xmpp-stanzas'\
    \ namespace.\n   o  MAY contain a <text/> child containing XML character data\
    \ that\n      describes the error in more detail; this element MUST be qualified\n\
    \      by the 'urn:ietf:params:xml:ns:xmpp-stanzas' namespace and SHOULD\n   \
    \   possess an 'xml:lang' attribute.\n   o  MAY contain a child element for an\
    \ application-specific error\n      condition; this element MUST be qualified\
    \ by an\n      application-defined namespace, and its structure is defined by\n\
    \      that namespace.\n   The <text/> element is OPTIONAL.  If included, it SHOULD\
    \ be used only\n   to provide descriptive or diagnostic information that supplements\
    \ the\n   meaning of a defined condition or application-specific condition.  It\n\
    \   SHOULD NOT be interpreted programmatically by an application.  It\n   SHOULD\
    \ NOT be used as the error message presented to a user, but MAY\n   be shown in\
    \ addition to the error message associated with the\n   included condition element\
    \ (or elements).\n   Finally, to maintain backward compatibility, the schema (specified\
    \ in\n   [XMPP-IM]) allows the optional inclusion of a 'code' attribute on the\n\
    \   <error/> element.\n"
- title: 9.3.3.  Defined Conditions
  contents:
  - "9.3.3.  Defined Conditions\n   The following conditions are defined for use in\
    \ stanza errors.\n   o  <bad-request/> -- the sender has sent XML that is malformed\
    \ or\n      that cannot be processed (e.g., an IQ stanza that includes an\n  \
    \    unrecognized value of the 'type' attribute); the associated error\n     \
    \ type SHOULD be \"modify\".\n   o  <conflict/> -- access cannot be granted because\
    \ an existing\n      resource or session exists with the same name or address;\
    \ the\n      associated error type SHOULD be \"cancel\".\n   o  <feature-not-implemented/>\
    \ -- the feature requested is not\n      implemented by the recipient or server\
    \ and therefore cannot be\n      processed; the associated error type SHOULD be\
    \ \"cancel\".\n   o  <forbidden/> -- the requesting entity does not possess the\n\
    \      required permissions to perform the action; the associated error\n    \
    \  type SHOULD be \"auth\".\n   o  <gone/> -- the recipient or server can no longer\
    \ be contacted at\n      this address (the error stanza MAY contain a new address\
    \ in the\n      XML character data of the <gone/> element); the associated error\n\
    \      type SHOULD be \"modify\".\n   o  <internal-server-error/> -- the server\
    \ could not process the\n      stanza because of a misconfiguration or an otherwise-undefined\n\
    \      internal server error; the associated error type SHOULD be \"wait\".\n\
    \   o  <item-not-found/> -- the addressed JID or item requested cannot be\n  \
    \    found; the associated error type SHOULD be \"cancel\".\n   o  <jid-malformed/>\
    \ -- the sending entity has provided or\n      communicated an XMPP address (e.g.,\
    \ a value of the 'to' attribute)\n      or aspect thereof (e.g., a resource identifier)\
    \ that does not\n      adhere to the syntax defined in Addressing Scheme (Section\
    \ 3); the\n      associated error type SHOULD be \"modify\".\n   o  <not-acceptable/>\
    \ -- the recipient or server understands the\n      request but is refusing to\
    \ process it because it does not meet\n      criteria defined by the recipient\
    \ or server (e.g., a local policy\n      regarding acceptable words in messages);\
    \ the associated error type\n      SHOULD be \"modify\".\n   o  <not-allowed/>\
    \ -- the recipient or server does not allow any\n      entity to perform the action;\
    \ the associated error type SHOULD be\n      \"cancel\".\n   o  <not-authorized/>\
    \ -- the sender must provide proper credentials\n      before being allowed to\
    \ perform the action, or has provided\n      improper credentials; the associated\
    \ error type SHOULD be \"auth\".\n   o  <payment-required/> -- the requesting\
    \ entity is not authorized to\n      access the requested service because payment\
    \ is required; the\n      associated error type SHOULD be \"auth\".\n   o  <recipient-unavailable/>\
    \ -- the intended recipient is temporarily\n      unavailable; the associated\
    \ error type SHOULD be \"wait\" (note: an\n      application MUST NOT return this\
    \ error if doing so would provide\n      information about the intended recipient's\
    \ network availability to\n      an entity that is not authorized to know such\
    \ information).\n   o  <redirect/> -- the recipient or server is redirecting requests\
    \ for\n      this information to another entity, usually temporarily (the error\n\
    \      stanza SHOULD contain the alternate address, which MUST be a valid\n  \
    \    JID, in the XML character data of the <redirect/> element); the\n      associated\
    \ error type SHOULD be \"modify\".\n   o  <registration-required/> -- the requesting\
    \ entity is not\n      authorized to access the requested service because registration\
    \ is\n      required; the associated error type SHOULD be \"auth\".\n   o  <remote-server-not-found/>\
    \ -- a remote server or service specified\n      as part or all of the JID of\
    \ the intended recipient does not\n      exist; the associated error type SHOULD\
    \ be \"cancel\".\n   o  <remote-server-timeout/> -- a remote server or service\
    \ specified\n      as part or all of the JID of the intended recipient (or required\n\
    \      to fulfill a request) could not be contacted within a reasonable\n    \
    \  amount of time; the associated error type SHOULD be \"wait\".\n   o  <resource-constraint/>\
    \ -- the server or recipient lacks the system\n      resources necessary to service\
    \ the request; the associated error\n      type SHOULD be \"wait\".\n   o  <service-unavailable/>\
    \ -- the server or recipient does not\n      currently provide the requested service;\
    \ the associated error type\n      SHOULD be \"cancel\".\n   o  <subscription-required/>\
    \ -- the requesting entity is not\n      authorized to access the requested service\
    \ because a subscription\n      is required; the associated error type SHOULD\
    \ be \"auth\".\n   o  <undefined-condition/> -- the error condition is not one\
    \ of those\n      defined by the other conditions in this list; any error type\
    \ may\n      be associated with this condition, and it SHOULD be used only in\n\
    \      conjunction with an application-specific condition.\n   o  <unexpected-request/>\
    \ -- the recipient or server understood the\n      request but was not expecting\
    \ it at this time (e.g., the request\n      was out of order); the associated\
    \ error type SHOULD be \"wait\".\n"
- title: 9.3.4.  Application-Specific Conditions
  contents:
  - "9.3.4.  Application-Specific Conditions\n   As noted, an application MAY provide\
    \ application-specific stanza\n   error information by including a properly-namespaced\
    \ child in the\n   error element.  The application-specific element SHOULD supplement\
    \ or\n   further qualify a defined element.  Thus, the <error/> element will\n\
    \   contain two or three child elements:\n   <iq type='error' id='some-id'>\n\
    \     <error type='modify'>\n       <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n\
    \       <too-many-parameters xmlns='application-ns'/>\n     </error>\n   </iq>\n\
    \   <message type='error' id='another-id'>\n     <error type='modify'>\n     \
    \  <undefined-condition\n             xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n\
    \       <text xml:lang='en'\n             xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'>\n\
    \         Some special application diagnostic information...\n       </text>\n\
    \       <special-application-condition xmlns='application-ns'/>\n     </error>\n\
    \   </message>\n"
- title: 10.  Server Rules for Handling XML Stanzas
  contents:
  - "10.  Server Rules for Handling XML Stanzas\n   Compliant server implementations\
    \ MUST ensure in-order processing of\n   XML stanzas between any two entities.\n\
    \   Beyond the requirement for in-order processing, each server\n   implementation\
    \ will contain its own \"delivery tree\" for handling\n   stanzas it receives.\
    \  Such a tree determines whether a stanza needs\n   to be routed to another domain,\
    \ processed internally, or delivered to\n   a resource associated with a connected\
    \ node.  The following rules\n   apply:\n"
- title: 10.1.  No 'to' Address
  contents:
  - "10.1.  No 'to' Address\n   If the stanza possesses no 'to' attribute, the server\
    \ SHOULD process\n   it on behalf of the entity that sent it.  Because all stanzas\n\
    \   received from other servers MUST possess a 'to' attribute, this rule\n   applies\
    \ only to stanzas received from a registered entity (such as a\n   client) that\
    \ is connected to the server.  If the server receives a\n   presence stanza with\
    \ no 'to' attribute, the server SHOULD broadcast\n   it to the entities that are\
    \ subscribed to the sending entity's\n   presence, if applicable (the semantics\
    \ of presence broadcast for\n   instant messaging and presence applications are\
    \ defined in\n   [XMPP-IM]).  If the server receives an IQ stanza of type \"get\"\
    \ or\n   \"set\" with no 'to' attribute and it understands the namespace that\n\
    \   qualifies the content of the stanza, it MUST either process the\n   stanza\
    \ on behalf of the sending entity (where the meaning of\n   \"process\" is determined\
    \ by the semantics of the qualifying namespace)\n   or return an error to the\
    \ sending entity.\n"
- title: 10.2.  Foreign Domain
  contents:
  - "10.2.  Foreign Domain\n   If the hostname of the domain identifier portion of\
    \ the JID contained\n   in the 'to' attribute does not match one of the configured\
    \ hostnames\n   of the server itself or a subdomain thereof, the server SHOULD\
    \ route\n   the stanza to the foreign domain (subject to local service\n   provisioning\
    \ and security policies regarding inter-domain\n   communication).  There are\
    \ two possible cases:\n   A server-to-server stream already exists between the\
    \ two domains: The\n      sender's server routes the stanza to the authoritative\
    \ server for\n      the foreign domain over the existing stream\n   There exists\
    \ no server-to-server stream between the two domains: The\n      sender's server\
    \ (1) resolves the hostname of the foreign domain\n      (as defined under Server-to-Server\
    \ Communications (Section 14.4)),\n      (2) negotiates a server-to-server stream\
    \ between the two domains\n      (as defined under Use of TLS (Section 5) and\
    \ Use of SASL (Section\n      6)), and (3) routes the stanza to the authoritative\
    \ server for the\n      foreign domain over the newly-established stream\n   If\
    \ routing to the recipient's server is unsuccessful, the sender's\n   server MUST\
    \ return an error to the sender; if the recipient's server\n   can be contacted\
    \ but delivery by the recipient's server to the\n   recipient is unsuccessful,\
    \ the recipient's server MUST return an\n   error to the sender by way of the\
    \ sender's server.\n"
- title: 10.3.  Subdomain
  contents:
  - "10.3.  Subdomain\n   If the hostname of the domain identifier portion of the\
    \ JID contained\n   in the 'to' attribute matches a subdomain of one of the configured\n\
    \   hostnames of the server itself, the server MUST either process the\n   stanza\
    \ itself or route the stanza to a specialized service that is\n   responsible\
    \ for that subdomain (if the subdomain is configured), or\n   return an error\
    \ to the sender (if the subdomain is not configured).\n"
- title: 10.4.  Mere Domain or Specific Resource
  contents:
  - "10.4.  Mere Domain or Specific Resource\n   If the hostname of the domain identifier\
    \ portion of the JID contained\n   in the 'to' attribute matches a configured\
    \ hostname of the server\n   itself and the JID contained in the 'to' attribute\
    \ is of the form\n   <domain> or <domain/resource>, the server (or a defined resource\n\
    \   thereof) MUST either process the stanza as appropriate for the stanza\n  \
    \ kind or return an error stanza to the sender.\n"
- title: 10.5.  Node in Same Domain
  contents:
  - "10.5.  Node in Same Domain\n   If the hostname of the domain identifier portion\
    \ of the JID contained\n   in the 'to' attribute matches a configured hostname\
    \ of the server\n   itself and the JID contained in the 'to' attribute is of the\
    \ form\n   <node@domain> or <node@domain/resource>, the server SHOULD deliver\n\
    \   the stanza to the intended recipient of the stanza as represented by\n   the\
    \ JID contained in the 'to' attribute.  The following rules apply:\n   1.  If\
    \ the JID contains a resource identifier (i.e., is of the form\n       <node@domain/resource>)\
    \ and there exists a connected resource\n       that matches the full JID, the\
    \ recipient's server SHOULD deliver\n       the stanza to the stream or session\
    \ that exactly matches the\n       resource identifier.\n   2.  If the JID contains\
    \ a resource identifier and there exists no\n       connected resource that matches\
    \ the full JID, the recipient's\n       server SHOULD return a <service-unavailable/>\
    \ stanza error to the\n       sender.\n   3.  If the JID is of the form <node@domain>\
    \ and there exists at least\n       one connected resource for the node, the recipient's\
    \ server\n       SHOULD deliver the stanza to at least one of the connected\n\
    \       resources, according to application-specific rules (a set of\n       delivery\
    \ rules for instant messaging and presence applications is\n       defined in\
    \ [XMPP-IM]).\n"
- title: 11.  XML Usage within XMPP
  contents:
  - '11.  XML Usage within XMPP

    '
- title: 11.1.  Restrictions
  contents:
  - "11.1.  Restrictions\n   XMPP is a simplified and specialized protocol for streaming\
    \ XML\n   elements in order to exchange structured information in close to real\n\
    \   time.  Because XMPP does not require the parsing of arbitrary and\n   complete\
    \ XML documents, there is no requirement that XMPP needs to\n   support the full\
    \ feature set of [XML].  In particular, the following\n   restrictions apply.\n\
    \   With regard to XML generation, an XMPP implementation MUST NOT inject\n  \
    \ into an XML stream any of the following:\n   o  comments (as defined in Section\
    \ 2.5 of [XML])\n   o  processing instructions (Section 2.6 therein)\n   o  internal\
    \ or external DTD subsets (Section 2.8 therein)\n   o  internal or external entity\
    \ references (Section 4.2 therein) with\n      the exception of predefined entities\
    \ (Section 4.6 therein)\n   o  character data or attribute values containing unescaped\
    \ characters\n      that map to the predefined entities (Section 4.6 therein);\
    \ such\n      characters MUST be escaped\n   With regard to XML processing, if\
    \ an XMPP implementation receives\n   such restricted XML data, it MUST ignore\
    \ the data.\n"
- title: 11.2.  XML Namespace Names and Prefixes
  contents:
  - "11.2.  XML Namespace Names and Prefixes\n   XML Namespaces [XML-NAMES] are used\
    \ within all XMPP-compliant XML to\n   create strict boundaries of data ownership.\
    \  The basic function of\n   namespaces is to separate different vocabularies\
    \ of XML elements that\n   are structurally mixed together.  Ensuring that XMPP-compliant\
    \ XML is\n   namespace-aware enables any allowable XML to be structurally mixed\n\
    \   with any data element within XMPP.  Rules for XML namespace names and\n  \
    \ prefixes are defined in the following subsections.\n"
- title: 11.2.1.  Streams Namespace
  contents:
  - "11.2.1.  Streams Namespace\n   A streams namespace declaration is REQUIRED in\
    \ all XML stream\n   headers.  The name of the streams namespace MUST be\n   'http://etherx.jabber.org/streams'.\
    \  The element names of the\n   <stream/> element and its <features/> and <error/>\
    \ children MUST be\n   qualified by the streams namespace prefix in all instances.\
    \  An\n   implementation SHOULD generate only the 'stream:' prefix for these\n\
    \   elements, and for historical reasons MAY accept only the 'stream:'\n   prefix.\n"
- title: 11.2.2.  Default Namespace
  contents:
  - "11.2.2.  Default Namespace\n   A default namespace declaration is REQUIRED and\
    \ is used in all XML\n   streams in order to define the allowable first-level\
    \ children of the\n   root stream element.  This namespace declaration MUST be\
    \ the same for\n   the initial stream and the response stream so that both streams\
    \ are\n   qualified consistently.  The default namespace declaration applies to\n\
    \   the stream and all stanzas sent within a stream (unless explicitly\n   qualified\
    \ by another namespace, or by the prefix of the streams\n   namespace or the dialback\
    \ namespace).\n   A server implementation MUST support the following two default\n\
    \   namespaces (for historical reasons, some implementations MAY support\n   only\
    \ these two default namespaces):\n   o  jabber:client -- this default namespace\
    \ is declared when the\n      stream is used for communications between a client\
    \ and a server\n   o  jabber:server -- this default namespace is declared when\
    \ the\n      stream is used for communications between two servers\n   A client\
    \ implementation MUST support the 'jabber:client' default\n   namespace, and for\
    \ historical reasons MAY support only that default\n   namespace.\n   An implementation\
    \ MUST NOT generate namespace prefixes for elements\n   in the default namespace\
    \ if the default namespace is 'jabber:client'\n   or 'jabber:server'.  An implementation\
    \ SHOULD NOT generate namespace\n   prefixes for elements qualified by content\
    \ (as opposed to stream)\n   namespaces other than 'jabber:client' and 'jabber:server'.\n\
    \   Note: The 'jabber:client' and 'jabber:server' namespaces are nearly\n   identical\
    \ but are used in different contexts (client-to-server\n   communications for\
    \ 'jabber:client' and server-to-server\n   communications for 'jabber:server').\
    \  The only difference between the\n   two is that the 'to' and 'from' attributes\
    \ are OPTIONAL on stanzas\n   sent within 'jabber:client', whereas they are REQUIRED\
    \ on stanzas\n   sent within 'jabber:server'.  If a compliant implementation accepts\
    \ a\n   stream that is qualified by the 'jabber:client' or 'jabber:server'\n \
    \  namespace, it MUST support the common attributes (Section 9.1) and\n   basic\
    \ semantics (Section 9.2) of all three core stanza kinds\n   (message, presence,\
    \ and IQ).\n"
- title: 11.2.3.  Dialback Namespace
  contents:
  - "11.2.3.  Dialback Namespace\n   A dialback namespace declaration is REQUIRED\
    \ for all elements used in\n   server dialback (Section 8).  The name of the dialback\
    \ namespace MUST\n   be 'jabber:server:dialback'.  All elements qualified by this\n\
    \   namespace MUST be prefixed.  An implementation SHOULD generate only\n   the\
    \ 'db:' prefix for such elements and MAY accept only the 'db:'\n   prefix.\n"
- title: 11.3.  Validation
  contents:
  - "11.3.  Validation\n   Except as noted with regard to 'to' and 'from' addresses\
    \ for stanzas\n   within the 'jabber:server' namespace, a server is not responsible\
    \ for\n   validating the XML elements forwarded to a client or another server;\n\
    \   an implementation MAY choose to provide only validated data elements\n   but\
    \ this is OPTIONAL (although an implementation MUST NOT accept XML\n   that is\
    \ not well-formed).  Clients SHOULD NOT rely on the ability to\n   send data which\
    \ does not conform to the schemas, and SHOULD ignore\n   any non-conformant elements\
    \ or attributes on the incoming XML stream.\n   Validation of XML streams and\
    \ stanzas is OPTIONAL, and schemas are\n   included herein for descriptive purposes\
    \ only.\n"
- title: 11.4.  Inclusion of Text Declaration
  contents:
  - "11.4.  Inclusion of Text Declaration\n   Implementations SHOULD send a text declaration\
    \ before sending a\n   stream header.  Applications MUST follow the rules in [XML]\
    \ regarding\n   the circumstances under which a text declaration is included.\n"
- title: 11.5.  Character Encoding
  contents:
  - "11.5.  Character Encoding\n   Implementations MUST support the UTF-8 (RFC 3629\
    \ [UTF-8])\n   transformation of Universal Character Set (ISO/IEC 10646-1 [UCS2])\n\
    \   characters, as required by RFC 2277 [CHARSET].  Implementations MUST\n   NOT\
    \ attempt to use any other encoding.\n"
- title: 12.  Core Compliance Requirements
  contents:
  - "12.  Core Compliance Requirements\n   This section summarizes the specific aspects\
    \ of the Extensible\n   Messaging and Presence Protocol that MUST be supported\
    \ by servers and\n   clients in order to be considered compliant implementations,\
    \ as well\n   as additional protocol aspects that SHOULD be supported.  For\n\
    \   compliance purposes, we draw a distinction between core protocols\n   (which\
    \ MUST be supported by any server or client, regardless of the\n   specific application)\
    \ and instant messaging protocols (which MUST be\n   supported only by instant\
    \ messaging and presence applications built\n   on top of the core protocols).\
    \  Compliance requirements that apply to\n   all servers and clients are specified\
    \ in this section; compliance\n   requirements for instant messaging servers and\
    \ clients are specified\n   in the corresponding section of [XMPP-IM].\n"
- title: 12.1.  Servers
  contents:
  - "12.1.  Servers\n   In addition to all defined requirements with regard to security,\
    \ XML\n   usage, and internationalization, a server MUST support the following\n\
    \   core protocols in order to be considered compliant:\n   o  Application of\
    \ the [NAMEPREP], Nodeprep (Appendix A), and\n      Resourceprep (Appendix B)\
    \ profiles of [STRINGPREP] to addresses\n      (including ensuring that domain\
    \ identifiers are internationalized\n      domain names as defined in [IDNA])\n\
    \   o  XML streams (Section 4), including Use of TLS (Section 5), Use of\n   \
    \   SASL (Section 6), and Resource Binding (Section 7)\n   o  The basic semantics\
    \ of the three defined stanza kinds (i.e.,\n      <message/>, <presence/>, and\
    \ <iq/>) as specified in stanza\n      semantics (Section 9.2)\n   o  Generation\
    \ (and, where appropriate, handling) of error syntax and\n      semantics related\
    \ to streams, TLS, SASL, and XML stanzas\n   In addition, a server MAY support\
    \ the following core protocol:\n   o  Server dialback (Section 8)\n"
- title: 12.2.  Clients
  contents:
  - "12.2.  Clients\n   A client MUST support the following core protocols in order\
    \ to be\n   considered compliant:\n   o  XML streams (Section 4), including Use\
    \ of TLS (Section 5), Use of\n      SASL (Section 6), and Resource Binding (Section\
    \ 7)\n   o  The basic semantics of the three defined stanza kinds (i.e.,\n   \
    \   <message/>, <presence/>, and <iq/>) as specified in stanza\n      semantics\
    \ (Section 9.2)\n   o  Handling (and, where appropriate, generation) of error\
    \ syntax and\n      semantics related to streams, TLS, SASL, and XML stanzas\n\
    \   In addition, a client SHOULD support the following core protocols:\n   o \
    \ Generation of addresses to which the [NAMEPREP], Nodeprep\n      (Appendix A),\
    \ and Resourceprep (Appendix B) profiles of\n      [STRINGPREP] can be applied\
    \ without failing\n"
- title: 13.  Internationalization Considerations
  contents:
  - "13.  Internationalization Considerations\n   XML streams MUST be encoded in UTF-8\
    \ as specified under Character\n   Encoding (Section 11.5).  As specified under\
    \ Stream Attributes\n   (Section 4.4), an XML stream SHOULD include an 'xml:lang'\
    \ attribute\n   that is treated as the default language for any XML character\
    \ data\n   sent over the stream that is intended to be presented to a human\n\
    \   user.  As specified under xml:lang (Section 9.1.5), an XML stanza\n   SHOULD\
    \ include an 'xml:lang' attribute if the stanza contains XML\n   character data\
    \ that is intended to be presented to a human user.  A\n   server SHOULD apply\
    \ the default 'xml:lang' attribute to stanzas it\n   routes or delivers on behalf\
    \ of connected entities, and MUST NOT\n   modify or delete 'xml:lang' attributes\
    \ from stanzas it receives from\n   other entities.\n"
- title: 14.  Security Considerations
  contents:
  - '14.  Security Considerations

    '
- title: 14.1.  High Security
  contents:
  - "14.1.  High Security\n   For the purposes of XMPP communications (client-to-server\
    \ and\n   server-to-server), the term \"high security\" refers to the use of\n\
    \   security technologies that provide both mutual authentication and\n   integrity-checking;\
    \ in particular, when using certificate-based\n   authentication to provide high\
    \ security, a chain-of-trust SHOULD be\n   established out-of-band, although a\
    \ shared certificate authority\n   signing certificates could allow a previously\
    \ unknown certificate to\n   establish trust in-band.  See Section 14.2 below\
    \ regarding\n   certificate validation procedures.\n   Implementations MUST support\
    \ high security.  Service provisioning\n   SHOULD use high security, subject to\
    \ local security policies.\n"
- title: 14.2.  Certificate Validation
  contents:
  - "14.2.  Certificate Validation\n   When an XMPP peer communicates with another\
    \ peer securely, it MUST\n   validate the peer's certificate.  There are three\
    \ possible cases:\n   Case #1: The peer contains an End Entity certificate which\
    \ appears to\n      be certified by a chain of certificates terminating in a trust\n\
    \      anchor (as described in Section 6.1 of [X509]).\n   Case #2: The peer certificate\
    \ is certified by a Certificate Authority\n      not known to the validating peer.\n\
    \   Case #3: The peer certificate is self-signed.\n   In Case #1, the validating\
    \ peer MUST do one of two things:\n   1.  Verify the peer certificate according\
    \ to the rules of [X509].\n       The certificate SHOULD then be checked against\
    \ the expected\n       identity of the peer following the rules described in [HTTP-TLS],\n\
    \       except that a subjectAltName extension of type \"xmpp\" MUST be\n    \
    \   used as the identity if present.  If one of these checks fails,\n       user-oriented\
    \ clients MUST either notify the user (clients MAY\n       give the user the opportunity\
    \ to continue with the connection in\n       any case) or terminate the connection\
    \ with a bad certificate\n       error.  Automated clients SHOULD terminate the\
    \ connection (with a\n       bad certificate error) and log the error to an appropriate\
    \ audit\n       log.  Automated clients MAY provide a configuration setting that\n\
    \       disables this check, but MUST provide a setting that enables it.\n   2.\
    \  The peer SHOULD show the certificate to a user for approval,\n       including\
    \ the entire certificate chain.  The peer MUST cache the\n       certificate (or\
    \ some non-forgeable representation such as a\n       hash).  In future connections,\
    \ the peer MUST verify that the same\n       certificate was presented and MUST\
    \ notify the user if it has\n       changed.\n   In Case #2 and Case #3, implementations\
    \ SHOULD act as in (2) above.\n"
- title: 14.3.  Client-to-Server Communications
  contents:
  - "14.3.  Client-to-Server Communications\n   A compliant client implementation\
    \ MUST support both TLS and SASL for\n   connections to a server.\n   The TLS\
    \ protocol for encrypting XML streams (defined under Use of TLS\n   (Section 5))\
    \ provides a reliable mechanism for helping to ensure the\n   confidentiality\
    \ and data integrity of data exchanged between two\n   entities.\n   The SASL\
    \ protocol for authenticating XML streams (defined under Use\n   of SASL (Section\
    \ 6)) provides a reliable mechanism for validating\n   that a client connecting\
    \ to a server is who it claims to be.\n   Client-to-server communications MUST\
    \ NOT proceed until the DNS\n   hostname asserted by the server has been resolved.\
    \  Such resolutions\n   SHOULD first attempt to resolve the hostname using an\
    \ [SRV] Service\n   of \"xmpp-client\" and Proto of \"tcp\", resulting in resource\
    \ records\n   such as \"_xmpp-client._tcp.example.com.\" (the use of the string\n\
    \   \"xmpp-client\" for the service identifier is consistent with the IANA\n \
    \  registration).  If the SRV lookup fails, the fallback is a normal\n   IPv4/IPv6\
    \ address record resolution to determine the IP address,\n   using the \"xmpp-client\"\
    \ port of 5222, registered with the IANA.\n   The IP address and method of access\
    \ of clients MUST NOT be made\n   public by a server, nor are any connections\
    \ other than the original\n   server connection required.  This helps to protect\
    \ the client's\n   server from direct attack or identification by third parties.\n"
- title: 14.4.  Server-to-Server Communications
  contents:
  - "14.4.  Server-to-Server Communications\n   A compliant server implementation\
    \ MUST support both TLS and SASL for\n   inter-domain communications.  For historical\
    \ reasons, a compliant\n   implementation SHOULD also support Server Dialback\
    \ (Section 8).\n   Because service provisioning is a matter of policy, it is OPTIONAL\n\
    \   for any given domain to communicate with other domains, and\n   server-to-server\
    \ communications MAY be disabled by the administrator\n   of any given deployment.\
    \  If a particular domain enables inter-domain\n   communications, it SHOULD enable\
    \ high security.\n   Administrators may want to require use of SASL for server-to-server\n\
    \   communications in order to ensure both authentication and\n   confidentiality\
    \ (e.g., on an organization's private network).\n   Compliant implementations\
    \ SHOULD support SASL for this purpose.\n   Inter-domain connections MUST NOT\
    \ proceed until the DNS hostnames\n   asserted by the servers have been resolved.\
    \  Such resolutions MUST\n   first attempt to resolve the hostname using an [SRV]\
    \ Service of\n   \"xmpp-server\" and Proto of \"tcp\", resulting in resource records\
    \ such\n   as \"_xmpp-server._tcp.example.com.\" (the use of the string\n   \"\
    xmpp-server\" for the service identifier is consistent with the IANA\n   registration;\
    \ note well that the \"xmpp-server\" service identifier\n   supersedes the earlier\
    \ use of a \"jabber\" service identifier, since\n   the earlier usage did not\
    \ conform to [SRV]; implementations desiring\n   to be backward compatible should\
    \ continue to look for or answer to\n   the \"jabber\" service identifier as well).\
    \  If the SRV lookup fails,\n   the fallback is a normal IPv4/IPv6 address record\
    \ resolution to\n   determine the IP address, using the \"xmpp-server\" port 5269,\n\
    \   registered with the IANA.\n   Server dialback helps protect against domain\
    \ spoofing, thus making it\n   more difficult to spoof XML stanzas.  It is not\
    \ a mechanism for\n   authenticating, securing, or encrypting streams between\
    \ servers as is\n   done via SASL and TLS, and results in weak verification of\
    \ server\n   identities only.  Furthermore, it is susceptible to DNS poisoning\n\
    \   attacks unless DNSSec [DNSSEC] is used, and even if the DNS\n   information\
    \ is accurate, dialback cannot protect from attacks where\n   the attacker is\
    \ capable of hijacking the IP address of the remote\n   domain.  Domains requiring\
    \ robust security SHOULD use TLS and SASL.\n   If SASL is used for server-to-server\
    \ authentication, dialback SHOULD\n   NOT be used since it is unnecessary.\n"
- title: 14.5.  Order of Layers
  contents:
  - "14.5.  Order of Layers\n   The order of layers in which protocols MUST be stacked\
    \ is as follows:\n   1.  TCP\n   2.  TLS\n   3.  SASL\n   4.  XMPP\n   The rationale\
    \ for this order is that [TCP] is the base connection\n   layer used by all of\
    \ the protocols stacked on top of TCP, [TLS] is\n   often provided at the operating\
    \ system layer, [SASL] is often\n   provided at the application layer, and XMPP\
    \ is the application\n   itself.\n"
- title: 14.6.  Lack of SASL Channel Binding to TLS
  contents:
  - "14.6.  Lack of SASL Channel Binding to TLS\n   The SASL framework does not provide\
    \ a mechanism to bind SASL\n   authentication to a security layer providing confidentiality\
    \ and\n   integrity protection that was negotiated at a lower layer.  This lack\n\
    \   of a \"channel binding\" prevents SASL from being able to verify that\n  \
    \ the source and destination end points to which the lower layer's\n   security\
    \ is bound are equivalent to the end points that SASL is\n   authenticating. \
    \ If the end points are not identical, the lower\n   layer's security cannot be\
    \ trusted to protect data transmitted\n   between the SASL authenticated entities.\
    \  In such a situation, a SASL\n   security layer should be negotiated that effectively\
    \ ignores the\n   presence of the lower layer security.\n"
- title: 14.7.  Mandatory-to-Implement Technologies
  contents:
  - "14.7.  Mandatory-to-Implement Technologies\n   At a minimum, all implementations\
    \ MUST support the following\n   mechanisms:\n   for authentication: the SASL\
    \ [DIGEST-MD5] mechanism\n   for confidentiality: TLS (using the TLS_RSA_WITH_3DES_EDE_CBC_SHA\n\
    \      cipher)\n   for both: TLS plus SASL EXTERNAL(using the\n      TLS_RSA_WITH_3DES_EDE_CBC_SHA\
    \ cipher supporting client-side\n      certificates)\n"
- title: 14.8.  Firewalls
  contents:
  - "14.8.  Firewalls\n   Communications using XMPP normally occur over [TCP] connections\
    \ on\n   port 5222 (client-to-server) or port 5269 (server-to-server), as\n  \
    \ registered with the IANA (see IANA Considerations (Section 15)).  Use\n   of\
    \ these well-known ports allows administrators to easily enable or\n   disable\
    \ XMPP activity through existing and commonly-deployed\n   firewalls.\n"
- title: 14.9.  Use of base64 in SASL
  contents:
  - "14.9.  Use of base64 in SASL\n   Both the client and the server MUST verify any\
    \ [BASE64] data received\n   during SASL negotiation.  An implementation MUST\
    \ reject (not ignore)\n   any characters that are not explicitly allowed by the\
    \ base64\n   alphabet; this helps to guard against creation of a covert channel\n\
    \   that could be used to \"leak\" information.  An implementation MUST NOT\n\
    \   break on invalid input and MUST reject any sequence of base64\n   characters\
    \ containing the pad ('=') character if that character is\n   included as something\
    \ other than the last character of the data\n   (e.g., \"=AAA\" or \"BBBB=CCC\"\
    ); this helps to guard against buffer\n   overflow attacks and other attacks on\
    \ the implementation.  Base 64\n   encoding visually hides otherwise easily recognized\
    \ information, such\n   as passwords, but does not provide any computational confidentiality.\n\
    \   Base 64 encoding MUST follow the definition in Section 3 of RFC 3548\n   [BASE64].\n"
- title: 14.10.  Stringprep Profiles
  contents:
  - "14.10.  Stringprep Profiles\n   XMPP makes use of the [NAMEPREP] profile of [STRINGPREP]\
    \ for the\n   processing of domain identifiers; for security considerations related\n\
    \   to Nameprep, refer to the appropriate section of [NAMEPREP].\n   In addition,\
    \ XMPP defines two profiles of [STRINGPREP]: Nodeprep\n   (Appendix A) for node\
    \ identifiers and Resourceprep (Appendix B) for\n   resource identifiers.\n  \
    \ The Unicode and ISO/IEC 10646 repertoires have many characters that\n   look\
    \ similar.  In many cases, users of security protocols might do\n   visual matching,\
    \ such as when comparing the names of trusted third\n   parties.  Because it is\
    \ impossible to map similar-looking characters\n   without a great deal of context,\
    \ such as knowing the fonts used,\n   stringprep does nothing to map similar-looking\
    \ characters together,\n   nor to prohibit some characters because they look like\
    \ others.\n   A node identifier can be employed as one part of an entity's address\n\
    \   in XMPP.  One common usage is as the username of an instant messaging\n  \
    \ user; another is as the name of a multi-user chat room; many other\n   kinds\
    \ of entities could use node identifiers as part of their\n   addresses.  The\
    \ security of such services could be compromised based\n   on different interpretations\
    \ of the internationalized node\n   identifier; for example, a user entering a\
    \ single internationalized\n   node identifier could access another user's account\
    \ information, or a\n   user could gain access to an otherwise restricted chat\
    \ room or\n   service.\n   A resource identifier can be employed as one part of\
    \ an entity's\n   address in XMPP.  One common usage is as the name for an instant\n\
    \   messaging user's connected resource (active session); another is as\n   the\
    \ nickname of a user in a multi-user chat room; many other kinds of\n   entities\
    \ could use resource identifiers as part of their addresses.\n   The security\
    \ of such services could be compromised based on different\n   interpretations\
    \ of the internationalized resource identifier; for\n   example, a user could\
    \ attempt to initiate multiple sessions with the\n   same name, or a user could\
    \ send a message to someone other than the\n   intended recipient in a multi-user\
    \ chat room.\n"
- title: 15.  IANA Considerations
  contents:
  - '15.  IANA Considerations

    '
- title: 15.1.  XML Namespace Name for TLS Data
  contents:
  - "15.1.  XML Namespace Name for TLS Data\n   A URN sub-namespace for TLS-related\
    \ data in the Extensible Messaging\n   and Presence Protocol (XMPP) is defined\
    \ as follows.  (This namespace\n   name adheres to the format defined in The IETF\
    \ XML Registry\n   [XML-REG].)\n   URI: urn:ietf:params:xml:ns:xmpp-tls\n   Specification:\
    \ RFC 3920\n   Description: This is the XML namespace name for TLS-related data\
    \ in\n      the Extensible Messaging and Presence Protocol (XMPP) as defined\n\
    \      by RFC 3920.\n   Registrant Contact: IETF, XMPP Working Group, <xmppwg@jabber.org>\n"
- title: 15.2.  XML Namespace Name for SASL Data
  contents:
  - "15.2.  XML Namespace Name for SASL Data\n   A URN sub-namespace for SASL-related\
    \ data in the Extensible Messaging\n   and Presence Protocol (XMPP) is defined\
    \ as follows.  (This namespace\n   name adheres to the format defined in [XML-REG].)\n\
    \   URI: urn:ietf:params:xml:ns:xmpp-sasl\n   Specification: RFC 3920\n   Description:\
    \ This is the XML namespace name for SASL-related data in\n      the Extensible\
    \ Messaging and Presence Protocol (XMPP) as defined\n      by RFC 3920.\n   Registrant\
    \ Contact: IETF, XMPP Working Group, <xmppwg@jabber.org>\n"
- title: 15.3.  XML Namespace Name for Stream Errors
  contents:
  - "15.3.  XML Namespace Name for Stream Errors\n   A URN sub-namespace for stream-related\
    \ error data in the Extensible\n   Messaging and Presence Protocol (XMPP) is defined\
    \ as follows.  (This\n   namespace name adheres to the format defined in [XML-REG].)\n\
    \   URI: urn:ietf:params:xml:ns:xmpp-streams\n   Specification: RFC 3920\n   Description:\
    \ This is the XML namespace name for stream-related error\n      data in the Extensible\
    \ Messaging and Presence Protocol (XMPP) as\n      defined by RFC 3920.\n   Registrant\
    \ Contact: IETF, XMPP Working Group, <xmppwg@jabber.org>\n"
- title: 15.4.  XML Namespace Name for Resource Binding
  contents:
  - "15.4.  XML Namespace Name for Resource Binding\n   A URN sub-namespace for resource\
    \ binding in the Extensible Messaging\n   and Presence Protocol (XMPP) is defined\
    \ as follows.  (This namespace\n   name adheres to the format defined in [XML-REG].)\n\
    \   URI: urn:ietf:params:xml:ns:xmpp-bind\n   Specification: RFC 3920\n   Description:\
    \ This is the XML namespace name for resource binding in\n      the Extensible\
    \ Messaging and Presence Protocol (XMPP) as defined\n      by RFC 3920.\n   Registrant\
    \ Contact: IETF, XMPP Working Group, <xmppwg@jabber.org>\n"
- title: 15.5.  XML Namespace Name for Stanza Errors
  contents:
  - "15.5.  XML Namespace Name for Stanza Errors\n   A URN sub-namespace for stanza-related\
    \ error data in the Extensible\n   Messaging and Presence Protocol (XMPP) is defined\
    \ as follows.  (This\n   namespace name adheres to the format defined in [XML-REG].)\n\
    \   URI: urn:ietf:params:xml:ns:xmpp-stanzas\n   Specification: RFC 3920\n   Description:\
    \ This is the XML namespace name for stanza-related error\n      data in the Extensible\
    \ Messaging and Presence Protocol (XMPP) as\n      defined by RFC 3920.\n   Registrant\
    \ Contact: IETF, XMPP Working Group, <xmppwg@jabber.org>\n"
- title: 15.6.  Nodeprep Profile of Stringprep
  contents:
  - "15.6.  Nodeprep Profile of Stringprep\n   The Nodeprep profile of stringprep\
    \ is defined under Nodeprep\n   (Appendix A).  The IANA has registered Nodeprep\
    \ in the stringprep\n   profile registry.\n   Name of this profile:\n      Nodeprep\n\
    \   RFC in which the profile is defined:\n      RFC 3920\n   Indicator whether\
    \ or not this is the newest version of the profile:\n      This is the first version\
    \ of Nodeprep\n"
- title: 15.7.  Resourceprep Profile of Stringprep
  contents:
  - "15.7.  Resourceprep Profile of Stringprep\n   The Resourceprep profile of stringprep\
    \ is defined under Resourceprep\n   (Appendix B).  The IANA has registered Resourceprep\
    \ in the stringprep\n   profile registry.\n   Name of this profile:\n      Resourceprep\n\
    \   RFC in which the profile is defined:\n      RFC 3920\n   Indicator whether\
    \ or not this is the newest version of the profile:\n      This is the first version\
    \ of Resourceprep\n"
- title: 15.8.  GSSAPI Service Name
  contents:
  - "15.8.  GSSAPI Service Name\n   The IANA has registered \"xmpp\" as a GSSAPI [GSS-API]\
    \ service name, as\n   defined under SASL Definition (Section 6.3).\n"
- title: 15.9.  Port Numbers
  contents:
  - "15.9.  Port Numbers\n   The IANA has registered \"xmpp-client\" and \"xmpp-server\"\
    \ as keywords\n   for [TCP] ports 5222 and 5269 respectively.\n   These ports\
    \ SHOULD be used for client-to-server and server-to-server\n   communications\
    \ respectively, but their use is OPTIONAL.\n"
- title: 16.  References
  contents:
  - '16.  References

    '
- title: 16.1.  Normative References
  contents:
  - "16.1.  Normative References\n   [ABNF]       Crocker, D. and P. Overell, \"Augmented\
    \ BNF for Syntax\n                Specifications: ABNF\", RFC 2234, November 1997.\n\
    \   [BASE64]     Josefsson, S., \"The Base16, Base32, and Base64 Data\n      \
    \          Encodings\", RFC 3548, July 2003.\n   [CHARSET]    Alvestrand, H.,\
    \ \"IETF Policy on Character Sets and\n                Languages\", BCP 18, RFC\
    \ 2277, January 1998.\n   [DIGEST-MD5] Leach, P. and C. Newman, \"Using Digest\
    \ Authentication as\n                a SASL Mechanism\", RFC 2831, May 2000.\n\
    \   [DNS]        Mockapetris, P., \"Domain names - implementation and\n      \
    \          specification\", STD 13, RFC 1035, November 1987.\n   [GSS-API]   \
    \ Linn, J., \"Generic Security Service Application Program\n                Interface\
    \ Version 2, Update 1\", RFC 2743, January 2000.\n   [HTTP-TLS]   Rescorla, E.,\
    \ \"HTTP Over TLS\", RFC 2818, May 2000.\n   [IDNA]       Faltstrom, P., Hoffman,\
    \ P., and A. Costello,\n                \"Internationalizing Domain Names in Applications\n\
    \                (IDNA)\", RFC 3490, March 2003.\n   [IPv6]       Hinden, R. and\
    \ S. Deering, \"Internet Protocol Version 6\n                (IPv6) Addressing\
    \ Architecture\", RFC 3513, April 2003.\n   [LANGTAGS]   Alvestrand, H., \"Tags\
    \ for the Identification of\n                Languages\", BCP 47, RFC 3066, January\
    \ 2001.\n   [NAMEPREP]   Hoffman, P. and M. Blanchet, \"Nameprep: A Stringprep\n\
    \                Profile for Internationalized Domain Names (IDN)\", RFC\n   \
    \             3491, March 2003.\n   [RANDOM]     Eastlake 3rd, D., Crocker, S.,\
    \ and J. Schiller,\n                \"Randomness Recommendations for Security\"\
    , RFC 1750,\n                December 1994.\n   [SASL]       Myers, J., \"Simple\
    \ Authentication and Security Layer\n                (SASL)\", RFC 2222, October\
    \ 1997.\n   [SRV]        Gulbrandsen, A., Vixie, P., and L. Esibov, \"A DNS RR\
    \ for\n                specifying the location of services (DNS SRV)\", RFC\n\
    \                2782, February 2000.\n   [STRINGPREP] Hoffman, P. and M. Blanchet,\
    \ \"Preparation of\n                Internationalized Strings (\"stringprep\"\
    )\", RFC 3454,\n                December 2002.\n   [TCP]        Postel, J., \"\
    Transmission Control Protocol\", STD 7, RFC\n                793, September 1981.\n\
    \   [TERMS]      Bradner, S., \"Key words for use in RFCs to Indicate\n      \
    \          Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [TLS]     \
    \   Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\",\n             \
    \   RFC 2246, January 1999.\n   [UCS2]       International Organization for Standardization,\n\
    \                \"Information Technology - Universal Multiple-octet coded\n \
    \               Character Set (UCS) - Amendment 2: UCS Transformation\n      \
    \          Format 8 (UTF-8)\", ISO Standard 10646-1 Addendum 2,\n            \
    \    October 1996.\n   [UTF-8]      Yergeau, F., \"UTF-8, a transformation format\
    \ of ISO\n                10646\", STD 63, RFC 3629, November 2003.\n   [X509]\
    \       Housley, R., Polk, W., Ford, W., and D. Solo, \"Internet\n           \
    \     X.509 Public Key Infrastructure Certificate and\n                Certificate\
    \ Revocation List (CRL) Profile\", RFC 3280,\n                April 2002.\n  \
    \ [XML]        Bray, T., Paoli, J., Sperberg-McQueen, C., and E. Maler,\n    \
    \            \"Extensible Markup Language (XML) 1.0 (2nd ed)\", W3C\n        \
    \        REC-xml, October 2000, <http://www.w3.org/TR/REC-xml>.\n   [XML-NAMES]\
    \  Bray, T., Hollander, D., and A. Layman, \"Namespaces in\n                XML\"\
    , W3C REC-xml-names, January 1999,\n                <http://www.w3.org/TR/REC-xml-names>.\n"
- title: 16.2.  Informative References
  contents:
  - "16.2.  Informative References\n   [ACAP]       Newman, C. and J. Myers, \"ACAP\
    \ -- Application\n                Configuration Access Protocol\", RFC 2244, November\
    \ 1997.\n   [ASN.1]      CCITT, \"Recommendation X.208: Specification of Abstract\n\
    \                Syntax Notation One (ASN.1)\", 1988.\n   [DNSSEC]     Eastlake\
    \ 3rd, D., \"Domain Name System Security\n                Extensions\", RFC 2535,\
    \ March 1999.\n   [HTTP]       Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n\
    \                Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n  \
    \              Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [IMAP]\
    \       Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n          \
    \      4rev1\", RFC 3501, March 2003.\n   [IMP-REQS]   Day, M., Aggarwal, S.,\
    \ Mohr, G., and J. Vincent,\n                \"Instant Messaging / Presence Protocol\
    \ Requirements\",\n                RFC 2779, February 2000.\n   [IRC]        Oikarinen,\
    \ J. and D. Reed, \"Internet Relay Chat\n                Protocol\", RFC 1459,\
    \ May 1993.\n   [JEP-0029]   Kaes, C., \"Definition of Jabber Identifiers (JIDs)\"\
    , JSF\n                JEP 0029, October 2003.\n   [JEP-0078]   Saint-Andre, P.,\
    \ \"Non-SASL Authentication\", JSF JEP\n                0078, July 2004.\n   [JEP-0086]\
    \   Norris, R. and P. Saint-Andre, \"Error Condition\n                Mappings\"\
    , JSF JEP 0086, February 2004.\n   [JSF]        Jabber Software Foundation, \"\
    Jabber Software\n                Foundation\", <http://www.jabber.org/>.\n   [POP3]\
    \       Myers, J. and M. Rose, \"Post Office Protocol - Version\n            \
    \    3\", STD 53, RFC 1939, May 1996.\n   [SIMPLE]     SIMPLE Working Group, \"\
    SIMPLE WG\",\n                <http://www.ietf.org/html.charters/simple-charter.html>.\n\
    \   [SMTP]       Klensin, J., \"Simple Mail Transfer Protocol\", RFC 2821,\n \
    \               April 2001.\n   [URI]        Berners-Lee, T., Fielding, R., and\
    \ L. Masinter, \"Uniform\n                Resource Identifiers (URI): Generic\
    \ Syntax\", RFC 2396,\n                August 1998.\n   [USINGTLS]   Newman, C.,\
    \ \"Using TLS with IMAP, POP3 and ACAP\", RFC\n                2595, June 1999.\n\
    \   [XML-REG]    Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n\
    \                January 2004.\n   [XMPP-IM]    Saint-Andre, P., Ed., \"Extensible\
    \ Messaging and Presence\n                Protocol (XMPP): Instant Messaging and\
    \ Presence\", RFC\n                3921, October 2004.\n"
- title: Appendix A.  Nodeprep
  contents:
  - 'Appendix A.  Nodeprep

    '
- title: A.1.  Introduction
  contents:
  - "A.1.  Introduction\n   This appendix defines the \"Nodeprep\" profile of [STRINGPREP].\
    \  As\n   such, it specifies processing rules that will enable users to enter\n\
    \   internationalized node identifiers in the Extensible Messaging and\n   Presence\
    \ Protocol (XMPP) and have the highest chance of getting the\n   content of the\
    \ strings correct.  (An XMPP node identifier is the\n   optional portion of an\
    \ XMPP address that precedes a domain identifier\n   and the '@' separator; it\
    \ is often but not exclusively associated\n   with an instant messaging username.)\
    \  These processing rules are\n   intended only for XMPP node identifiers and\
    \ are not intended for\n   arbitrary text or any other aspect of an XMPP address.\n\
    \   This profile defines the following, as required by [STRINGPREP]:\n   o  The\
    \ intended applicability of the profile: internationalized node\n      identifiers\
    \ within XMPP\n   o  The character repertoire that is the input and output to\n\
    \      stringprep: Unicode 3.2, specified in Section 2 of this Appendix\n   o\
    \  The mappings used: specified in Section 3\n   o  The Unicode normalization\
    \ used: specified in Section 4\n   o  The characters that are prohibited as output:\
    \ specified in Section\n      5\n   o  Bidirectional character handling: specified\
    \ in Section 6\n"
- title: A.2.  Character Repertoire
  contents:
  - "A.2.  Character Repertoire\n   This profile uses Unicode 3.2 with the list of\
    \ unassigned code points\n   being Table A.1, both defined in Appendix A of [STRINGPREP].\n"
- title: A.3.  Mapping
  contents:
  - "A.3.  Mapping\n   This profile specifies mapping using the following tables from\n\
    \   [STRINGPREP]:\n      Table B.1\n      Table B.2\n"
- title: A.4.  Normalization
  contents:
  - "A.4.  Normalization\n   This profile specifies the use of Unicode normalization\
    \ form KC, as\n   described in [STRINGPREP].\n"
- title: A.5.  Prohibited Output
  contents:
  - "A.5.  Prohibited Output\n   This profile specifies the prohibition of using the\
    \ following tables\n   from [STRINGPREP].\n      Table C.1.1\n      Table C.1.2\n\
    \      Table C.2.1\n      Table C.2.2\n      Table C.3\n      Table C.4\n    \
    \  Table C.5\n      Table C.6\n      Table C.7\n      Table C.8\n      Table C.9\n\
    \   In addition, the following Unicode characters are also prohibited:\n     \
    \ #x22 (\")\n      #x26 (&)\n      #x27 (')\n      #x2F (/)\n      #x3A (:)\n\
    \      #x3C (<)\n      #x3E (>)\n      #x40 (@)\n"
- title: A.6.  Bidirectional Characters
  contents:
  - "A.6.  Bidirectional Characters\n   This profile specifies the checking of bidirectional\
    \ strings, as\n   described in Section 6 of [STRINGPREP].\n"
- title: Appendix B.  Resourceprep
  contents:
  - 'Appendix B.  Resourceprep

    '
- title: B.1.  Introduction
  contents:
  - "B.1.  Introduction\n   This appendix defines the \"Resourceprep\" profile of\
    \ [STRINGPREP].  As\n   such, it specifies processing rules that will enable users\
    \ to enter\n   internationalized resource identifiers in the Extensible Messaging\n\
    \   and Presence Protocol (XMPP) and have the highest chance of getting\n   the\
    \ content of the strings correct.  (An XMPP resource identifier is\n   the optional\
    \ portion of an XMPP address that follows a domain\n   identifier and the '/'\
    \ separator; it is often but not exclusively\n   associated with an instant messaging\
    \ session name.)  These processing\n   rules are intended only for XMPP resource\
    \ identifiers and are not\n   intended for arbitrary text or any other aspect\
    \ of an XMPP address.\n   This profile defines the following, as required by [STRINGPREP]:\n\
    \   o  The intended applicability of the profile: internationalized\n      resource\
    \ identifiers within XMPP\n   o  The character repertoire that is the input and\
    \ output to\n      stringprep: Unicode 3.2, specified in Section 2 of this Appendix\n\
    \   o  The mappings used: specified in Section 3\n   o  The Unicode normalization\
    \ used: specified in Section 4\n   o  The characters that are prohibited as output:\
    \ specified in Section\n      5\n   o  Bidirectional character handling: specified\
    \ in Section 6\n"
- title: B.2.  Character Repertoire
  contents:
  - "B.2.  Character Repertoire\n   This profile uses Unicode 3.2 with the list of\
    \ unassigned code points\n   being Table A.1, both defined in Appendix A of [STRINGPREP].\n"
- title: B.3.  Mapping
  contents:
  - "B.3.  Mapping\n   This profile specifies mapping using the following tables from\n\
    \   [STRINGPREP]:\n      Table B.1\n"
- title: B.4.  Normalization
  contents:
  - "B.4.  Normalization\n   This profile specifies using Unicode normalization form\
    \ KC, as\n   described in [STRINGPREP].\n"
- title: B.5.  Prohibited Output
  contents:
  - "B.5.  Prohibited Output\n   This profile specifies prohibiting use of the following\
    \ tables from\n   [STRINGPREP].\n      Table C.1.2\n      Table C.2.1\n      Table\
    \ C.2.2\n      Table C.3\n      Table C.4\n      Table C.5\n      Table C.6\n\
    \      Table C.7\n      Table C.8\n      Table C.9\n"
- title: B.6.  Bidirectional Characters
  contents:
  - "B.6.  Bidirectional Characters\n   This profile specifies checking bidirectional\
    \ strings as described in\n   Section 6 of [STRINGPREP].\n"
- title: Appendix C.  XML Schemas
  contents:
  - "Appendix C.  XML Schemas\n   The following XML schemas are descriptive, not normative.\
    \  For\n   schemas defining the 'jabber:client' and 'jabber:server' namespaces,\n\
    \   refer to [XMPP-IM].\n"
- title: C.1.  Streams namespace
  contents:
  - "C.1.  Streams namespace\n   <?xml version='1.0' encoding='UTF-8'?>\n   <xs:schema\n\
    \       xmlns:xs='http://www.w3.org/2001/XMLSchema'\n       targetNamespace='http://etherx.jabber.org/streams'\n\
    \       xmlns='http://etherx.jabber.org/streams'\n       elementFormDefault='unqualified'>\n\
    \     <xs:element name='stream'>\n       <xs:complexType>\n         <xs:sequence\
    \ xmlns:client='jabber:client'\n                      xmlns:server='jabber:server'\n\
    \                      xmlns:db='jabber:server:dialback'>\n           <xs:element\
    \ ref='features' minOccurs='0' maxOccurs='1'/>\n           <xs:any namespace='urn:ietf:params:xml:ns:xmpp-tls'\n\
    \                   minOccurs='0'\n                   maxOccurs='unbounded'/>\n\
    \           <xs:any namespace='urn:ietf:params:xml:ns:xmpp-sasl'\n           \
    \        minOccurs='0'\n                   maxOccurs='unbounded'/>\n         \
    \  <xs:choice minOccurs='0' maxOccurs='1'>\n             <xs:choice minOccurs='0'\
    \ maxOccurs='unbounded'>\n               <xs:element ref='client:message'/>\n\
    \               <xs:element ref='client:presence'/>\n               <xs:element\
    \ ref='client:iq'/>\n             </xs:choice>\n             <xs:choice minOccurs='0'\
    \ maxOccurs='unbounded'>\n               <xs:element ref='server:message'/>\n\
    \               <xs:element ref='server:presence'/>\n               <xs:element\
    \ ref='server:iq'/>\n               <xs:element ref='db:result'/>\n          \
    \     <xs:element ref='db:verify'/>\n             </xs:choice>\n           </xs:choice>\n\
    \           <xs:element ref='error' minOccurs='0' maxOccurs='1'/>\n         </xs:sequence>\n\
    \         <xs:attribute name='from' type='xs:string' use='optional'/>\n      \
    \   <xs:attribute name='id' type='xs:NMTOKEN' use='optional'/>\n         <xs:attribute\
    \ name='to' type='xs:string' use='optional'/>\n         <xs:attribute name='version'\
    \ type='xs:decimal' use='optional'/>\n         <xs:attribute ref='xml:lang' use='optional'/>\n\
    \       </xs:complexType>\n     </xs:element>\n     <xs:element name='features'>\n\
    \       <xs:complexType>\n         <xs:all xmlns:tls='urn:ietf:params:xml:ns:xmpp-tls'\n\
    \                 xmlns:sasl='urn:ietf:params:xml:ns:xmpp-sasl'\n            \
    \     xmlns:bind='urn:ietf:params:xml:ns:xmpp-bind'\n                 xmlns:sess='urn:ietf:params:xml:ns:xmpp-session'>\n\
    \           <xs:element ref='tls:starttls' minOccurs='0'/>\n           <xs:element\
    \ ref='sasl:mechanisms' minOccurs='0'/>\n           <xs:element ref='bind:bind'\
    \ minOccurs='0'/>\n           <xs:element ref='sess:session' minOccurs='0'/>\n\
    \         </xs:all>\n       </xs:complexType>\n     </xs:element>\n     <xs:element\
    \ name='error'>\n       <xs:complexType>\n         <xs:sequence  xmlns:err='urn:ietf:params:xml:ns:xmpp-streams'>\n\
    \           <xs:group   ref='err:streamErrorGroup'/>\n           <xs:element ref='err:text'\n\
    \                       minOccurs='0'\n                       maxOccurs='1'/>\n\
    \         </xs:sequence>\n       </xs:complexType>\n     </xs:element>\n   </xs:schema>\n"
- title: C.2.  Stream error namespace
  contents:
  - "C.2.  Stream error namespace\n   <?xml version='1.0' encoding='UTF-8'?>\n   <xs:schema\n\
    \       xmlns:xs='http://www.w3.org/2001/XMLSchema'\n       targetNamespace='urn:ietf:params:xml:ns:xmpp-streams'\n\
    \       xmlns='urn:ietf:params:xml:ns:xmpp-streams'\n       elementFormDefault='qualified'>\n\
    \     <xs:element name='bad-format' type='empty'/>\n     <xs:element name='bad-namespace-prefix'\
    \ type='empty'/>\n     <xs:element name='conflict' type='empty'/>\n     <xs:element\
    \ name='connection-timeout' type='empty'/>\n     <xs:element name='host-gone'\
    \ type='empty'/>\n     <xs:element name='host-unknown' type='empty'/>\n     <xs:element\
    \ name='improper-addressing' type='empty'/>\n     <xs:element name='internal-server-error'\
    \ type='empty'/>\n     <xs:element name='invalid-from' type='empty'/>\n     <xs:element\
    \ name='invalid-id' type='empty'/>\n     <xs:element name='invalid-namespace'\
    \ type='empty'/>\n     <xs:element name='invalid-xml' type='empty'/>\n     <xs:element\
    \ name='not-authorized' type='empty'/>\n     <xs:element name='policy-violation'\
    \ type='empty'/>\n     <xs:element name='remote-connection-failed' type='empty'/>\n\
    \     <xs:element name='resource-constraint' type='empty'/>\n     <xs:element\
    \ name='restricted-xml' type='empty'/>\n     <xs:element name='see-other-host'\
    \ type='xs:string'/>\n     <xs:element name='system-shutdown' type='empty'/>\n\
    \     <xs:element name='undefined-condition' type='empty'/>\n     <xs:element\
    \ name='unsupported-encoding' type='empty'/>\n     <xs:element name='unsupported-stanza-type'\
    \ type='empty'/>\n     <xs:element name='unsupported-version' type='empty'/>\n\
    \     <xs:element name='xml-not-well-formed' type='empty'/>\n     <xs:group name='streamErrorGroup'>\n\
    \       <xs:choice>\n         <xs:element ref='bad-format'/>\n         <xs:element\
    \ ref='bad-namespace-prefix'/>\n         <xs:element ref='conflict'/>\n      \
    \   <xs:element ref='connection-timeout'/>\n         <xs:element ref='host-gone'/>\n\
    \         <xs:element ref='host-unknown'/>\n         <xs:element ref='improper-addressing'/>\n\
    \         <xs:element ref='internal-server-error'/>\n         <xs:element ref='invalid-from'/>\n\
    \         <xs:element ref='invalid-id'/>\n         <xs:element ref='invalid-namespace'/>\n\
    \         <xs:element ref='invalid-xml'/>\n         <xs:element ref='not-authorized'/>\n\
    \         <xs:element ref='policy-violation'/>\n         <xs:element ref='remote-connection-failed'/>\n\
    \         <xs:element ref='resource-constraint'/>\n         <xs:element ref='restricted-xml'/>\n\
    \         <xs:element ref='see-other-host'/>\n         <xs:element ref='system-shutdown'/>\n\
    \         <xs:element ref='undefined-condition'/>\n         <xs:element ref='unsupported-encoding'/>\n\
    \         <xs:element ref='unsupported-stanza-type'/>\n         <xs:element ref='unsupported-version'/>\n\
    \         <xs:element ref='xml-not-well-formed'/>\n       </xs:choice>\n     </xs:group>\n\
    \     <xs:element name='text'>\n       <xs:complexType>\n         <xs:simpleContent>\n\
    \           <xs:extension base='xs:string'>\n             <xs:attribute ref='xml:lang'\
    \ use='optional'/>\n           </xs:extension>\n         </xs:simpleContent>\n\
    \       </xs:complexType>\n     </xs:element>\n     <xs:simpleType name='empty'>\n\
    \       <xs:restriction base='xs:string'>\n         <xs:enumeration value=''/>\n\
    \       </xs:restriction>\n     </xs:simpleType>\n   </xs:schema>\n"
- title: C.3.  TLS namespace
  contents:
  - "C.3.  TLS namespace\n   <?xml version='1.0' encoding='UTF-8'?>\n   <xs:schema\n\
    \       xmlns:xs='http://www.w3.org/2001/XMLSchema'\n       targetNamespace='urn:ietf:params:xml:ns:xmpp-tls'\n\
    \       xmlns='urn:ietf:params:xml:ns:xmpp-tls'\n       elementFormDefault='qualified'>\n\
    \     <xs:element name='starttls'>\n       <xs:complexType>\n         <xs:sequence>\n\
    \           <xs:element\n               name='required'\n               minOccurs='0'\n\
    \               maxOccurs='1'\n               type='empty'/>\n         </xs:sequence>\n\
    \       </xs:complexType>\n     </xs:element>\n     <xs:element name='proceed'\
    \ type='empty'/>\n     <xs:element name='failure' type='empty'/>\n     <xs:simpleType\
    \ name='empty'>\n       <xs:restriction base='xs:string'>\n         <xs:enumeration\
    \ value=''/>\n       </xs:restriction>\n     </xs:simpleType>\n   </xs:schema>\n"
- title: C.4.  SASL namespace
  contents:
  - "C.4.  SASL namespace\n   <?xml version='1.0' encoding='UTF-8'?>\n   <xs:schema\n\
    \       xmlns:xs='http://www.w3.org/2001/XMLSchema'\n       targetNamespace='urn:ietf:params:xml:ns:xmpp-sasl'\n\
    \       xmlns='urn:ietf:params:xml:ns:xmpp-sasl'\n       elementFormDefault='qualified'>\n\
    \     <xs:element name='mechanisms'>\n       <xs:complexType>\n         <xs:sequence>\n\
    \           <xs:element name='mechanism'\n                       maxOccurs='unbounded'\n\
    \                       type='xs:string'/>\n         </xs:sequence>\n       </xs:complexType>\n\
    \     </xs:element>\n     <xs:element name='auth'>\n       <xs:complexType>\n\
    \         <xs:simpleContent>\n           <xs:extension base='empty'>\n       \
    \      <xs:attribute name='mechanism'\n                           type='xs:string'\n\
    \                           use='optional'/>\n           </xs:extension>\n   \
    \      </xs:simpleContent>\n       </xs:complexType>\n     </xs:element>\n   \
    \  <xs:element name='challenge' type='xs:string'/>\n     <xs:element name='response'\
    \ type='xs:string'/>\n     <xs:element name='abort' type='empty'/>\n     <xs:element\
    \ name='success' type='empty'/>\n     <xs:element name='failure'>\n       <xs:complexType>\n\
    \         <xs:choice minOccurs='0'>\n           <xs:element name='aborted' type='empty'/>\n\
    \           <xs:element name='incorrect-encoding' type='empty'/>\n           <xs:element\
    \ name='invalid-authzid' type='empty'/>\n           <xs:element name='invalid-mechanism'\
    \ type='empty'/>\n           <xs:element name='mechanism-too-weak' type='empty'/>\n\
    \           <xs:element name='not-authorized' type='empty'/>\n           <xs:element\
    \ name='temporary-auth-failure' type='empty'/>\n         </xs:choice>\n      \
    \ </xs:complexType>\n     </xs:element>\n     <xs:simpleType name='empty'>\n \
    \      <xs:restriction base='xs:string'>\n         <xs:enumeration value=''/>\n\
    \       </xs:restriction>\n     </xs:simpleType>\n   </xs:schema>\n"
- title: C.5.  Resource binding namespace
  contents:
  - "C.5.  Resource binding namespace\n   <?xml version='1.0' encoding='UTF-8'?>\n\
    \   <xs:schema\n       xmlns:xs='http://www.w3.org/2001/XMLSchema'\n       targetNamespace='urn:ietf:params:xml:ns:xmpp-bind'\n\
    \       xmlns='urn:ietf:params:xml:ns:xmpp-bind'\n       elementFormDefault='qualified'>\n\
    \     <xs:element name='bind'>\n       <xs:complexType>\n         <xs:choice minOccurs='0'\
    \ maxOccurs='1'>\n           <xs:element name='resource' type='xs:string'/>\n\
    \           <xs:element name='jid' type='xs:string'/>\n         </xs:choice>\n\
    \       </xs:complexType>\n     </xs:element>\n   </xs:schema>\n"
- title: C.6.  Dialback namespace
  contents:
  - "C.6.  Dialback namespace\n   <?xml version='1.0' encoding='UTF-8'?>\n   <xs:schema\n\
    \       xmlns:xs='http://www.w3.org/2001/XMLSchema'\n       targetNamespace='jabber:server:dialback'\n\
    \       xmlns='jabber:server:dialback'\n       elementFormDefault='qualified'>\n\
    \     <xs:element name='result'>\n       <xs:complexType>\n         <xs:simpleContent>\n\
    \           <xs:extension base='xs:token'>\n             <xs:attribute name='from'\
    \ type='xs:string' use='required'/>\n             <xs:attribute name='to' type='xs:string'\
    \ use='required'/>\n             <xs:attribute name='type' use='optional'>\n \
    \              <xs:simpleType>\n                 <xs:restriction base='xs:NCName'>\n\
    \                   <xs:enumeration value='invalid'/>\n                   <xs:enumeration\
    \ value='valid'/>\n                 </xs:restriction>\n               </xs:simpleType>\n\
    \             </xs:attribute>\n           </xs:extension>\n         </xs:simpleContent>\n\
    \       </xs:complexType>\n     </xs:element>\n     <xs:element name='verify'>\n\
    \       <xs:complexType>\n         <xs:simpleContent>\n           <xs:extension\
    \ base='xs:token'>\n             <xs:attribute name='from' type='xs:string' use='required'/>\n\
    \             <xs:attribute name='id' type='xs:NMTOKEN' use='required'/>\n   \
    \          <xs:attribute name='to' type='xs:string' use='required'/>\n       \
    \      <xs:attribute name='type' use='optional'>\n               <xs:simpleType>\n\
    \                 <xs:restriction base='xs:NCName'>\n                   <xs:enumeration\
    \ value='invalid'/>\n                   <xs:enumeration value='valid'/>\n    \
    \             </xs:restriction>\n               </xs:simpleType>\n           \
    \  </xs:attribute>\n           </xs:extension>\n         </xs:simpleContent>\n\
    \       </xs:complexType>\n     </xs:element>\n   </xs:schema>\n"
- title: C.7.  Stanza error namespace
  contents:
  - "C.7.  Stanza error namespace\n   <?xml version='1.0' encoding='UTF-8'?>\n   <xs:schema\n\
    \       xmlns:xs='http://www.w3.org/2001/XMLSchema'\n       targetNamespace='urn:ietf:params:xml:ns:xmpp-stanzas'\n\
    \       xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'\n       elementFormDefault='qualified'>\n\
    \     <xs:element name='bad-request' type='empty'/>\n     <xs:element name='conflict'\
    \ type='empty'/>\n     <xs:element name='feature-not-implemented' type='empty'/>\n\
    \     <xs:element name='forbidden' type='empty'/>\n     <xs:element name='gone'\
    \ type='xs:string'/>\n     <xs:element name='internal-server-error' type='empty'/>\n\
    \     <xs:element name='item-not-found' type='empty'/>\n     <xs:element name='jid-malformed'\
    \ type='empty'/>\n     <xs:element name='not-acceptable' type='empty'/>\n    \
    \ <xs:element name='not-allowed' type='empty'/>\n     <xs:element name='payment-required'\
    \ type='empty'/>\n     <xs:element name='recipient-unavailable' type='empty'/>\n\
    \     <xs:element name='redirect' type='xs:string'/>\n     <xs:element name='registration-required'\
    \ type='empty'/>\n     <xs:element name='remote-server-not-found' type='empty'/>\n\
    \     <xs:element name='remote-server-timeout' type='empty'/>\n     <xs:element\
    \ name='resource-constraint' type='empty'/>\n     <xs:element name='service-unavailable'\
    \ type='empty'/>\n     <xs:element name='subscription-required' type='empty'/>\n\
    \     <xs:element name='undefined-condition' type='empty'/>\n     <xs:element\
    \ name='unexpected-request' type='empty'/>\n     <xs:group name='stanzaErrorGroup'>\n\
    \       <xs:choice>\n         <xs:element ref='bad-request'/>\n         <xs:element\
    \ ref='conflict'/>\n         <xs:element ref='feature-not-implemented'/>\n   \
    \      <xs:element ref='forbidden'/>\n         <xs:element ref='gone'/>\n    \
    \     <xs:element ref='internal-server-error'/>\n         <xs:element ref='item-not-found'/>\n\
    \         <xs:element ref='jid-malformed'/>\n         <xs:element ref='not-acceptable'/>\n\
    \         <xs:element ref='not-allowed'/>\n         <xs:element ref='payment-required'/>\n\
    \         <xs:element ref='recipient-unavailable'/>\n         <xs:element ref='redirect'/>\n\
    \         <xs:element ref='registration-required'/>\n         <xs:element ref='remote-server-not-found'/>\n\
    \         <xs:element ref='remote-server-timeout'/>\n         <xs:element ref='resource-constraint'/>\n\
    \         <xs:element ref='service-unavailable'/>\n         <xs:element ref='subscription-required'/>\n\
    \         <xs:element ref='undefined-condition'/>\n         <xs:element ref='unexpected-request'/>\n\
    \       </xs:choice>\n     </xs:group>\n     <xs:element name='text'>\n      \
    \ <xs:complexType>\n         <xs:simpleContent>\n           <xs:extension base='xs:string'>\n\
    \             <xs:attribute ref='xml:lang' use='optional'/>\n           </xs:extension>\n\
    \         </xs:simpleContent>\n       </xs:complexType>\n     </xs:element>\n\
    \     <xs:simpleType name='empty'>\n       <xs:restriction base='xs:string'>\n\
    \         <xs:enumeration value=''/>\n       </xs:restriction>\n     </xs:simpleType>\n\
    \   </xs:schema>\n"
- title: Appendix D.  Differences Between Core Jabber Protocols and XMPP
  contents:
  - "Appendix D.  Differences Between Core Jabber Protocols and XMPP\n   This section\
    \ is non-normative.\n   XMPP has been adapted from the protocols originally developed\
    \ in the\n   Jabber open-source community, which can be thought of as \"XMPP 0.9\"\
    .\n   Because there exists a large installed base of Jabber implementations\n\
    \   and deployments, it may be helpful to specify the key differences\n   between\
    \ the relevant Jabber protocols and XMPP in order to expedite\n   and encourage\
    \ upgrades of those implementations and deployments to\n   XMPP.  This section\
    \ summarizes the core differences, while the\n   corresponding section of [XMPP-IM]\
    \ summarizes the differences that\n   relate specifically to instant messaging\
    \ and presence applications.\n"
- title: D.1.  Channel Encryption
  contents:
  - "D.1.  Channel Encryption\n   It was common practice in the Jabber community to\
    \ use SSL for channel\n   encryption on ports other than 5222 and 5269 (the convention\
    \ is to\n   use ports 5223 and 5270).  XMPP uses TLS over the IANA-registered\n\
    \   ports for channel encryption, as defined under Use of TLS (Section 5)\n  \
    \ herein.\n"
- title: D.2.  Authentication
  contents:
  - "D.2.  Authentication\n   The client-server authentication protocol developed\
    \ in the Jabber\n   community used a basic IQ interaction qualified by the\n \
    \  'jabber:iq:auth' namespace (documentation of this protocol is\n   contained\
    \ in [JEP-0078], published by the Jabber Software Foundation\n   [JSF]).  XMPP\
    \ uses SASL for authentication, as defined under Use of\n   SASL (Section 6) herein.\n\
    \   The Jabber community did not develop an authentication protocol for\n   server-to-server\
    \ communications, only the Server Dialback (Section 8)\n   protocol to prevent\
    \ server spoofing.  XMPP supersedes Server Dialback\n   with a true server-to-server\
    \ authentication protocol, as defined\n   under Use of SASL (Section 6) herein.\n"
- title: D.3.  Resource Binding
  contents:
  - "D.3.  Resource Binding\n   Resource binding in the Jabber community was handled\
    \ via the\n   'jabber:iq:auth' namespace (which was also used for client\n   authentication\
    \ with a server).  XMPP defines a dedicated namespace\n   for resource binding\
    \ as well as the ability for a server to generate\n   a resource identifier on\
    \ behalf of a client, as defined under\n   Resource Binding (Section 7).\n"
- title: D.4.  JID Processing
  contents:
  - "D.4.  JID Processing\n   JID processing was somewhat loosely defined by the Jabber\
    \ community\n   (documentation of forbidden characters and case handling is contained\n\
    \   in [JEP-0029], published by the Jabber Software Foundation [JSF]).\n   XMPP\
    \ specifies the use of [NAMEPREP] for domain identifiers and\n   supplements Nameprep\
    \ with two additional [STRINGPREP] profiles for\n   JID processing: Nodeprep (Appendix\
    \ A) for node identifiers and\n   Resourceprep (Appendix B) for resource identifiers.\n"
- title: D.5.  Error Handling
  contents:
  - "D.5.  Error Handling\n   Stream-related errors were handled in the Jabber community\
    \ via XML\n   character data text in a <stream:error/> element.  In XMPP,\n  \
    \ stream-related errors are handled via an extensible mechanism defined\n   under\
    \ Stream Errors (Section 4.7) herein.\n   Stanza-related errors were handled in\
    \ the Jabber community via\n   HTTP-style error codes.  In XMPP, stanza-related\
    \ errors are handled\n   via an extensible mechanism defined under Stanza Errors\
    \ (Section 9.3)\n   herein.  (Documentation of a mapping between Jabber and XMPP\
    \ error\n   handling mechanisms is contained in [JEP-0086], published by the\n\
    \   Jabber Software Foundation [JSF].)\n"
- title: D.6.  Internationalization
  contents:
  - "D.6.  Internationalization\n   Although use of UTF-8 has always been standard\
    \ practice within the\n   Jabber community, the community did not define mechanisms\
    \ for\n   specifying the language of human-readable text provided in XML\n   character\
    \ data.  XMPP specifies the use of the 'xml:lang' attribute\n   in such contexts,\
    \ as defined under Stream Attributes (Section 4.4)\n   and xml:lang (Section 9.1.5)\
    \ herein.\n"
- title: D.7.  Stream Version Attribute
  contents:
  - "D.7.  Stream Version Attribute\n   The Jabber community did not include a 'version'\
    \ attribute in stream\n   headers.  XMPP specifies inclusion of that attribute\
    \ as a way to\n   signal support for the stream features (authentication, encryption,\n\
    \   etc.) defined under Version Support (Section 4.4.1) herein.\n"
- title: Contributors
  contents:
  - "Contributors\n   Most of the core aspects of the Extensible Messaging and Presence\n\
    \   Protocol were developed originally within the Jabber open-source\n   community\
    \ in 1999.  This community was founded by Jeremie Miller, who\n   released source\
    \ code for the initial version of the jabber server in\n   January 1999.  Major\
    \ early contributors to the base protocol also\n   included Ryan Eatmon, Peter\
    \ Millard, Thomas Muldowney, and Dave\n   Smith.  Work by the XMPP Working Group\
    \ has concentrated especially on\n   security and internationalization; in these\
    \ areas, protocols for the\n   use of TLS and SASL were originally contributed\
    \ by Rob Norris, and\n   stringprep profiles were originally contributed by Joe\
    \ Hildebrand.\n   The error code syntax was suggested by Lisa Dusseault.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks are due to a number of individuals in addition to\
    \ the\n   contributors listed.  Although it is difficult to provide a complete\n\
    \   list, the following individuals were particularly helpful in defining\n  \
    \ the protocols or in commenting on the specifications in this memo:\n   Thomas\
    \ Charron, Richard Dobson, Sam Hartman, Schuyler Heath, Jonathan\n   Hogg, Cullen\
    \ Jennings, Craig Kaes, Jacek Konieczny, Alexey Melnikov,\n   Keith Minkler, Julian\
    \ Missig, Pete Resnick, Marshall Rose, Alexey\n   Shchepin, Jean-Louis Seguineau,\
    \ Iain Shigeoka, Greg Troxel, and David\n   Waite.  Thanks also to members of\
    \ the XMPP Working Group and the IETF\n   community for comments and feedback\
    \ provided throughout the life of\n   this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Peter Saint-Andre (editor)\n   Jabber Software Foundation\n\
    \   EMail: stpeter@jabber.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/S HE\n   REPRESENTS\
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE\n   INTERNET ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ IETF's procedures with respect to rights in IETF Documents can\n   be found\
    \ in BCP 78 and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat\
    \ and any\n   assurances of licenses to be made available, or the result of an\n\
    \   attempt made to obtain a general license or permission for the use of\n  \
    \ such proprietary rights by implementers or users of this\n   specification can\
    \ be obtained from the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n\
    \   The IETF invites any interested party to bring to its attention any\n   copyrights,\
    \ patents or patent applications, or other proprietary\n   rights that may cover\
    \ technology that may be required to implement\n   this standard.  Please address\
    \ the information to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
