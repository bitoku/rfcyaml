- title: __initial_text__
  contents:
  - '                    Security Considerations for 6to4

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   The IPv6 interim mechanism 6to4 (RFC3056) uses automatic\n   IPv6-over-IPv4\
    \ tunneling to interconnect IPv6 networks.  The\n   architecture includes 6to4\
    \ routers and 6to4 relay routers, which\n   accept and decapsulate IPv4 protocol-41\
    \ (\"IPv6-in-IPv4\") traffic from\n   any node in the IPv4 internet.  This characteristic\
    \ enables a number\n   of security threats, mainly Denial of Service.  It also\
    \ makes it\n   easier for nodes to spoof IPv6 addresses.  This document discusses\n\
    \   these issues in more detail and suggests enhancements to alleviate\n   the\
    \ problems.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Different 6to4 Forwarding Scenarios  . . . . . . . .\
    \ . . . . .  4\n       2.1.  From 6to4 to 6to4  . . . . . . . . . . . . . . .\
    \ . . . .  4\n       2.2.  From Native to 6to4  . . . . . . . . . . . . . . .\
    \ . . .  5\n       2.3.  From 6to4 to Native  . . . . . . . . . . . . . . . .\
    \ . .  5\n       2.4.  Other Models . . . . . . . . . . . . . . . . . . . . .\
    \ .  6\n             2.4.1.  BGP between 6to4 Routers and Relays  . . . . . .\
    \  6\n             2.4.2.  6to4 as an Optimization Method . . . . . . . . .  7\n\
    \             2.4.3.  6to4 as Tunnel End-Point Addressing Mechanism . . 8\n  \
    \ 3.  Functionalities of 6to4 Network Components . . . . . . . . . .  9\n    \
    \   3.1.  6to4 Routers . . . . . . . . . . . . . . . . . . . . . .  9\n      \
    \ 3.2.  6to4 Relay Routers . . . . . . . . . . . . . . . . . . . 10\n   4.  Threat\
    \ Analysis  . . . . . . . . . . . . . . . . . . . . . . . 11\n       4.1.  Attacks\
    \ on 6to4 Networks . . . . . . . . . . . . . . . . 12\n             4.1.1.  Attacks\
    \ with ND Messages . . . . . . . . . . . . 13\n             4.1.2.  Spoofing Traffic\
    \ to 6to4 Nodes . . . . . . . . . 14\n             4.1.3.  Reflecting Traffic\
    \ to 6to4 Nodes . . . . . . . . 17\n             4.1.4.  Local IPv4 Broadcast\
    \ Attack  . . . . . . . . . . 19\n       4.2.  Attacks on Native IPv6 Internet\
    \  . . . . . . . . . . . . 20\n             4.2.1.  Attacks with ND Messages .\
    \ . . . . . . . . . . . 21\n             4.2.2.  Spoofing Traffic to Native IPv6\
    \ Nodes. . . . . . 21\n             4.2.3.  Reflecting Traffic to Native IPv6\
    \ Nodes  . . . . 23\n             4.2.4.  Local IPv4 Broadcast Attack  . . . .\
    \ . . . . . . 24\n             4.2.5.  Theft of Service . . . . . . . . . . .\
    \ . . . . . 25\n             4.2.6.  Relay Operators Seen as Source of Abuse \
    \ . . . . 26\n       4.3.  Attacks on IPv4 Internet . . . . . . . . . . . . .\
    \ . . . 28\n       4.4.  Summary of the Attacks . . . . . . . . . . . . . . .\
    \ . . 28\n   5.  Implementing Proper Security Checks in 6to4  . . . . . . . .\
    \ . 30\n       5.1.  Encapsulating IPv6 into IPv4 . . . . . . . . . . . . . .\
    \ 31\n       5.2.  Decapsulating IPv4 into IPv6 . . . . . . . . . . . . . . 31\n\
    \       5.3.  IPv4 and IPv6 Sanity Checks  . . . . . . . . . . . . . . 32\n  \
    \           5.3.1.  IPv4 . . . . . . . . . . . . . . . . . . . . . . 32\n    \
    \         5.3.2.  IPv6 . . . . . . . . . . . . . . . . . . . . . . 33\n      \
    \       5.3.3.  Optional Ingress Filtering . . . . . . . . . . . 33\n        \
    \     5.3.4.  Notes about the Checks . . . . . . . . . . . . . 33\n   6.  Issues\
    \ in 6to4 Implementation and Use  . . . . . . . . . . . . 34\n       6.1.  Implementation\
    \ Considerations with Automatic Tunnels . . 34\n       6.2.  A Different Model\
    \ for 6to4 Deployment  . . . . . . . . . 35\n   7.  Security Considerations  .\
    \ . . . . . . . . . . . . . . . . . . 36\n   8.  Acknowledgments  . . . . . .\
    \ . . . . . . . . . . . . . . . . . 36\n   9.  References . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 37\n   A.  Some Trivial Attack Scenarios Outlined\
    \ . . . . . . . . . . . . 39\n   Authors' Addresses . . . . . . . . . . . . .\
    \ . . . . . . . . . . . 40\n   Full Copyright Statement . . . . . . . . . . .\
    \ . . . . . . . . . . 41\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The IPv6 interim mechanism \"6to4\" [1] specifies automatic\n\
    \   IPv6-over-IPv4 tunneling to interconnect isolated IPv6 clouds by\n   embedding\
    \ the tunnel IPv4 address in the IPv6 6to4 prefix.\n   Two characteristics of\
    \ the 6to4 mechanism introduce most of the\n   security considerations:\n   1.\
    \  All 6to4 routers must accept and decapsulate IPv4 packets from\n       every\
    \ other 6to4 router, and from 6to4 relays.\n   2.  6to4 relay routers must accept\
    \ traffic from any native IPv6 node.\n   As the 6to4 router must accept traffic\
    \ from any other 6to4 router or\n   relay, a certain requirement for trust is\
    \ implied, and there are no\n   strict constraints on what the IPv6 packet may\
    \ contain.  Thus,\n   addresses within the IPv4 and IPv6 headers may be spoofed,\
    \ and this\n   leads to various types of threats, including different flavors\
    \ of\n   Denial of Service attacks.\n   The 6to4 specification outlined a few\
    \ security considerations and\n   rules but was ambiguous as to their exact requirement\
    \ level.\n   Moreover, the description of the considerations was rather short,\
    \ and\n   some of them have proven difficult to understand or impossible to\n\
    \   implement.\n   This document analyzes the 6to4 security issues in more detail\
    \ and\n   outlines some enhancements and caveats.\n   Sections 2 and 3 are more\
    \ or less introductory, rehashing how 6to4 is\n   used today based on the 6to4\
    \ specification, so that it is easier to\n   understand how security could be\
    \ affected.  Section 4 provides a\n   threat analysis for implementations that\
    \ already implement most of\n   the security checks.  Section 5 describes the\
    \ optimal\n   decapsulation/encapsulation rules for 6to4 implementations, and\n\
    \   Section 6 provides further discussion on a few issues that have\n   proven\
    \ difficult to implement.  Appendix A outlines a few possible\n   trivial attack\
    \ scenarios in which very little or no security has been\n   implemented.\n  \
    \ For the sake of simplicity, in this document, the native Internet is\n   assumed\
    \ to encompass IPv6 networks formed by using other transition\n   mechanisms (e.g.,\
    \ RFC 2893 [4]), as these mechanisms cannot talk\n   directly to the 6to4 network.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in BCP 14, RFC 2119 [2].\n\
    \   Throughout this memo, IPv4 addresses from blocks 7.0.0.0/24,\n   8.0.0.0/24,\
    \ and 9.0.0.0/24 are used for demonstrative purposes, to\n   represent global\
    \ IPv4 addresses that have no relation to each other.\n   This approach was chosen\
    \ instead of just using addresses from\n   192.0.2.0/24 [5] for two reasons: to\
    \ use addresses whose 6to4 mapping\n   is glaringly obvious, and to make it obvious\
    \ that the IPv4 addresses\n   of different 6to4 gateways need not have any relation\
    \ to each other.\n"
- title: 2.  Different 6to4 Forwarding Scenarios
  contents:
  - "2.  Different 6to4 Forwarding Scenarios\n   Note that when one communicates between\
    \ 6to4 and native domains, the\n   6to4 relays that will be used in the two directions\
    \ are very likely\n   different; routing is highly asymmetric.  Because of this,\
    \ it is not\n   feasible to limit relays from which 6to4 routers may accept traffic.\n\
    \   The first three subsections introduce the most common forms of 6to4\n   operation.\
    \  Other models are presented in the fourth subsection.\n"
- title: 2.1.  From 6to4 to 6to4
  contents:
  - "2.1.  From 6to4 to 6to4\n   6to4 domains always exchange 6to4 traffic directly\
    \ via IPv4\n   tunneling; the endpoint address V4ADDR is derived from 6to4 prefix\n\
    \   2002:V4ADDR::/48 of the destination.\n    .--------.           _----_    \
    \      .--------.\n    |  6to4  |         _( IPv4 )_        |  6to4  |\n    |\
    \ router | <====> ( Internet ) <===> | router |\n    '--------'         (_   \
    \   _)        '--------'\n        ^                '----'              ^\n   \
    \     |      Direct tunneling over IPv4    |\n        V                      \
    \              V\n    .--------.                           .-------.\n    |  6to4\
    \  |                           |  6to4  |\n    |  host  |                    \
    \       |  host  |\n    '--------'                           '--------'\n    \
    \                   Figure 1\n   It is required that every 6to4 router consider\
    \ every other 6to4\n   router it wants to talk to be \"on-link\" (with IPv4 as\
    \ the\n   link-layer).\n"
- title: 2.2.  From Native to 6to4
  contents:
  - "2.2.  From Native to 6to4\n   When native domains send traffic to 6to4 prefix\
    \ 2002:V4ADDR::/48, it\n   will be routed to the topologically nearest advertising\
    \ 6to4 relay\n   (advertising route to 2002::/16).  The 6to4 relay will tunnel\
    \ the\n   traffic over IPv4 to the corresponding IPv4 address V4ADDR.\n   Note\
    \ that IPv4 address 9.0.0.1 here is just an example of a global\n   IPv4 address,\
    \ and it is assigned to the 6to4 router's\n   pseudo-interface.\n            \
    \                         Closest to\n                                 \"Native\
    \ IPv6 node\"\n    .--------.       _----_        .------------.            .--------.\n\
    \    | Native |     _( IPv6 )_      | 6to4 relay |  Tunneled  |  6to4  |\n   \
    \ | IPv6   | -> ( Internet ) --> | router     | =========> | router |\n    | node\
    \   |     (_      _)      '------------'   9.0.0.1  '--------'\n    '--------'\
    \       '----'  dst_v6=2002:0900:0001::1            |\n                      \
    \                                           V\n                              \
    \                               .-------.\n                                  \
    \                           |  6to4  |\n                                     \
    \                        |  host  |\n                                        \
    \                     '--------'\n                                 Figure 2\n"
- title: 2.3.  From 6to4 to Native
  contents:
  - "2.3.  From 6to4 to Native\n   6to4 domains send traffic to native domains by\
    \ tunneling it over IPv4\n   to their configured 6to4 relay router, or the closest\
    \ one found by\n   using 6to4 IPv4 Anycast [3].  The relay will decapsulate the\
    \ packet\n   and forward it to native IPv6 Internet, as would any other IPv6\n\
    \   packet.\n   Note that the destination IPv6 address in the packet is a non-6to4\n\
    \   address and is assumed to be 2001:db8::1 in the example.\n               \
    \                      Configured\n                                        -or-\n\
    \                                 found by IPv4 Anycast\n    .--------.      \
    \ _----_        .------------.            .--------.\n    | Native |     _( IPv6\
    \ )_      | 6to4 relay |  Tunneled  |  6to4  |\n    | Client | <- ( Internet )\
    \ <-- | router     | <========= | router |\n    '--------'     (_      _)    \
    \  '------------' 192.88.99.1'--------'\n   2001:db8::1       '----'         \
    \            (or configured)   ^\n                                           \
    \                       |\n                                                  \
    \           .-------.\n                                                      \
    \       |  6to4  |\n                                                         \
    \    | client |\n                                                            \
    \ '--------'\n                                 Figure 3\n"
- title: 2.4.  Other Models
  contents:
  - "2.4.  Other Models\n   These are more or less special cases of 6to4 operations.\
    \  In later\n   chapters, unless otherwise stated, only the most generally used\n\
    \   models (above) will be considered.\n"
- title: 2.4.1.  BGP between 6to4 Routers and Relays
  contents:
  - "2.4.1.  BGP between 6to4 Routers and Relays\n   Section 5.2.2.2 in [1] presents\
    \ a model where, instead of static\n   configuration, BGP [6] is used between\
    \ 6to4 relay routers and 6to4\n   routers (for outgoing relay selection only).\n\
    \   Going further than [1], if the 6to4 router established a BGP session\n   between\
    \ all the possible 6to4 relays and advertised its /48 prefix to\n   them, the\
    \ traffic from non-6to4 sites would always come from a\n   \"known\" relay.  Alternatively,\
    \ the 6to4 relays might advertise the\n   more specific 6to4 routes between 6to4\
    \ relays.\n   Both of these approaches are obviously infeasible due to scalability\n\
    \   issues.\n   Neither of these models are known to be used at the time of writing;\n\
    \   this is probably because parties that need 6to4 are not able to run\n   BGP,\
    \ and because setting up these sessions would be much more work\n   for relay\
    \ operators.\n"
- title: 2.4.2.  6to4 as an Optimization Method
  contents:
  - "2.4.2.  6to4 as an Optimization Method\n   Some sites seem to use 6to4 as an\
    \ IPv6 connectivity \"optimization\n   method\"; that is, they also have non-6to4\
    \ addresses on their nodes\n   and border routers but also employ 6to4 to reach\
    \ 6to4 sites.\n   This is typically done to be able to reach 6to4 destinations\
    \ by\n   direct tunneling without using relays at all.\n   These sites also publish\
    \ both 6to4 and non-6to4 addresses in DNS to\n   affect inbound connections. \
    \ If the source host's default address\n   selection [7] works properly, 6to4\
    \ sources will use 6to4 addresses to\n   reach the site and non-6to4 nodes use\
    \ non-6to4 addresses.  If this\n   behavior of foreign nodes can be assumed, the\
    \ security threats to\n   such sites can be significantly simplified.\n"
- title: 2.4.3.  6to4 as Tunnel End-Point Addressing Mechanism
  contents:
  - "2.4.3.  6to4 as Tunnel End-Point Addressing Mechanism\n   6to4 addresses can\
    \ also be used only as an IPv6-in-IPv4 tunnel\n   endpoint addressing and routing\
    \ mechanism.\n   An example of this is interconnecting 10 branch offices where\
    \ nodes\n   use non-6to4 addresses.  Only the offices' border routers need to\
    \ be\n   aware of 6to4, and use 6to4 addresses solely for addressing the\n   tunnels\
    \ between different branch offices.  An example is provided in\n   the figure\
    \ below.\n    2001:db8:0:10::/60                   2001:db8:0:20::/60\n      \
    \ .--------.                           .--------.\n      ( Branch 1 )        \
    \                 ( Branch 2 )\n       '--------'                           '--------'\n\
    \           |                                     |\n       .--------.       \
    \    _----_          .--------.\n       |  6to4  |         _( IPv4 )_        |\
    \  6to4  |\n       | router | <====> ( Internet ) <===> | router |\n       '--------'\
    \         (_      _)        '--------'\n        9.0.0.1             '----'   \
    \         8.0.0.2\n                              ^^\n                        \
    \      ||\n                              vv\n                          .--------.\n\
    \                          |  6to4  | 7.0.0.3\n                          | router\
    \ |\n                          '--------'\n                              |   \
    \     2001:db8::/48\n                        .-----------.\n                 \
    \      ( Main Office )\n                        '-----------'\n              \
    \                ^\n                              |\n                        \
    \      v\n                            _----_\n                          _( IPv6\
    \ )_\n                         ( Internet )\n                          (_    \
    \  _)\n                            '----'\n                                 Figure\
    \ 4\n   In the figure, the main office sets up two routes:\n      2001:db8:0:10::/60\
    \ -> 2002:0900:0001::1\n      2001:db8:0:20::/60 -> 2002:0800:0002::1\n   And\
    \ a branch office sets up two routes as well:\n      2001:db8:0:20::/60 -> 2002:0800:0002::1\n\
    \      default -> 2002:0700:0003::1\n   Thus, the IPv4 Internet is treated as\
    \ an NBMA link-layer for\n   interconnecting 6to4-enabled sites; with explicit\
    \ routes, 6to4\n   addressing need not be used in routers other than the 6to4\
    \ edge\n   routers.  However, note that if a branch office sends a packet to any\n\
    \   6to4 destination, it will not go through the main office, as the 6to4\n  \
    \ 2002::/16 route overrides the default route.\n   This approach may make addressing\
    \ and routing slightly easier in some\n   circumstances.\n"
- title: 3.  Functionalities of 6to4 Network Components
  contents:
  - "3.  Functionalities of 6to4 Network Components\n   This section summarizes the\
    \ main functionalities of the 6to4 network\n   components (6to4 routers, and 6to4\
    \ relays) and the security checks\n   they must do.  The pseudo-code for the security\
    \ checks is provided in\n   Section 5.\n   This section summarizes the main functions\
    \ of the various components\n   of a 6to4 network: 6to4 relay routers and 6to4\
    \ routers.  Refer to\n   Section 1.1 of RFC 3056 [1] for 6to4-related definitions.\n"
- title: 3.1.  6to4 Routers
  contents:
  - "3.1.  6to4 Routers\n   The 6to4 routers act as the border routers of a 6to4 domain.\
    \  It does\n   not have a native global IPv6 address except in certain special\n\
    \   cases.  Since the specification [1] uses the term \"6to4 router\", this\n\
    \   memo does the same; however, note that in this definition, we also\n   include\
    \ a single host with a 6to4 pseudo-interface, which doesn't\n   otherwise act\
    \ as a router.  The main functions of the 6to4 router are\n   as follows:\n  \
    \ o  Provide IPv6 connectivity to local clients and routers.\n   o  Tunnel packets\
    \ sent to foreign 6to4 addresses to the destination\n      6to4 router using IPv4.\n\
    \   o  Forward packets sent to locally configured 6to4 addresses to the\n    \
    \  6to4 network.\n   o  Tunnel packets sent to non-6to4 addresses to the configured/\n\
    \      closest-by-anycast 6to4 relay router.\n   o  Decapsulate directly received\
    \ IPv4 packets from foreign 6to4\n      addresses.\n   o  Decapsulate IPv4 packets\
    \ received via the relay closest to the\n      native IPv6 sources.  Note that\
    \ it is not easily distinguishable\n      whether the packet was received from\
    \ a 6to4 relay router or from a\n      spoofing third party.\n   The 6to4 router\
    \ should also perform security checks on traffic that\n   it receives from other\
    \ 6to4 relays, or 6to4 routers, or from within\n   the 6to4 site.  These checks\
    \ include the following:\n   o  Disallow traffic that has private, broadcast or\
    \ certain specific\n      reserved IPv4 addresses (see Section 5.3.1 for details)\
    \ in\n      tunnels, or the matching 6to4 prefixes.\n   o  Disallow traffic from\
    \ 6to4 routers in which the IPv4 tunnel source\n      address does not match the\
    \ 6to4 prefix.  (Note that the\n      pseudo-interface must pick the IPv4 address\
    \ corresponding to the\n      prefix when encapsulating, or problems may ensue,\
    \ e.g., on\n      multi-interface routers.)\n   o  Disallow traffic in which the\
    \ destination IPv6 address is not a\n      global address; in particular, link-local\
    \ addresses, mapped\n      addresses, and such should not be used.\n   o  Disallow\
    \ traffic transmission to other 6to4 domains through 6to4\n      relay router\
    \ or via some third party 6to4 router.  (To avoid\n      transmission to the relay\
    \ router, the pseudo-interface prefix\n      length must be configured correctly\
    \ to /16.  Further, to avoid the\n      traffic being discarded, 6to4 source addresses\
    \ must always\n      correspond to the IPv4 address encapsulating the traffic.)\n\
    \   o  Discard traffic received from other 6to4 domains via a 6to4 relay\n   \
    \   router.\n   o  Discard traffic received for prefixes other than one's own\
    \ 6to4\n      prefix(es).\n"
- title: 3.2.  6to4 Relay Routers
  contents:
  - "3.2.  6to4 Relay Routers\n   The 6to4 relay router acts as a relay between all\
    \ 6to4 domains and\n   native IPv6 networks; more specifically, it\n   o  advertises\
    \ the reachability of the 2002::/16 prefix to native IPv6\n      routing, thus\
    \ receiving traffic to all 6to4 addresses from the\n      closest native IPv6\
    \ nodes,\n   o  advertises (if RFC 3068 [3] is implemented) the reachability of\n\
    \      IPv4 \"6to4 relay anycast prefix\" (192.88.99.0/24) to IPv4 routing,\n\
    \      thus receiving some tunneled traffic to native IPv6 nodes from\n      6to4\
    \ routers.\n   o  decapsulates and forwards packets received from 6to4 addresses\n\
    \      through tunneling, by using normal IPv6 routing, and\n   o  tunnels packets\
    \ received through normal IPv6 routing from native\n      addresses that are destined\
    \ for 2002::/16 to the corresponding\n      6to4 router.\n   The 6to4 relay should\
    \ also perform security checks on traffic that it\n   receives from 6to4 routers,\
    \ or from native IPv6 nodes.  These checks\n   are as follows:\n   o  Disallow\
    \ traffic that has private, broadcast, or certain specific\n      reserved IPv4\
    \ addresses in tunnels, or in the matching 6to4\n      prefixes.\n   o  Disallow\
    \ traffic from 6to4 routers in which the IPv4 tunnel source\n      address does\
    \ not match the 6to4 prefix.  (Note that the\n      pseudo-interface must pick\
    \ the IPv4 address corresponding to the\n      prefix when encapsulating, or problems\
    \ may ensue, e.g., on\n      multi-interface routers.)\n   o  Disallow traffic\
    \ in which the destination IPv6 address is not a\n      global address; in particular,\
    \ link-local addresses, mapped\n      addresses, and such should not be used.\n\
    \   o  Discard traffic received from 6to4 routers with the destination as\n  \
    \    a 6to4 prefix.\n"
- title: 4.  Threat Analysis
  contents:
  - "4.  Threat Analysis\n    This section discusses attacks against the 6to4 network\
    \ or attacks\n    caused by the 6to4 network.  The threats are discussed in light\
    \ of\n    the 6to4 deployment models defined in Section 2.\n    There are three\
    \ general types of threats:\n   1.  Denial-of-Service (DoS) attacks, in which\
    \ a malicious node\n       prevents communication between the node under attack\
    \ and other\n       nodes.\n   2.  Reflection Denial-of-Service (DoS) attacks,\
    \ in which a malicious\n       node reflects the traffic off unsuspecting nodes\
    \ to a particular\n       node (node under attack) in order to prevent communication\n\
    \       between the node under attack and other nodes.\n   3.  Service theft,\
    \ in which a malicious node/site/operator may make\n       unauthorized use of\
    \ service.\n   6to4 also provides a means for a \"meta-threat\", traffic laundering,\n\
    \   in which some other attack is channeled through the third parties to\n   make\
    \ tracing the real origin of the attack more difficult.  This is\n   used in conjunction\
    \ with other threats, whether specific to 6to4 or\n   not.\n   At this point it\
    \ is important to reiterate that the attacks are\n   possible because\n   1. \
    \ 6to4 routers have to consider all 6to4 relays, and other 6to4\n       routers,\
    \ as \"on-link\",\n   2.  6to4 relays have to consider all 6to4 routers as \"\
    on-link\", and\n   3.  it has been discovered that at least a couple of major\
    \ 6to4\n       implementations do not implement all the security checks.\n   The\
    \ attacks' descriptions are classified based on the target of the\n   attack:\n\
    \   1.  Attacks on 6to4 networks.\n   2.  Attacks on IPv6 networks.\n   3.  Attacks\
    \ on IPv4 networks.\n   Note that one of the mitigation methods listed for various\
    \ attacks is\n   based on the premise that 6to4 relays could have a feature limiting\n\
    \   traffic to/from specific 6to4 sites.  At the time of this writing,\n   this\
    \ feature is speculative, and more work needs to be done to\n   determine the\
    \ logistics.\n"
- title: 4.1.  Attacks on 6to4 Networks
  contents:
  - "4.1.  Attacks on 6to4 Networks\n   This section describes attacks against 6to4\
    \ networks.  Attacks that\n   leverage 6to4 networks, but for which the ultimate\
    \ victim is\n   elsewhere (e.g., a native IPv6 user, an IPv4 user), are described\n\
    \   later in the memo.\n   6to4 relays and routers are IPv4 nodes, and there is\
    \ no way for any\n   6to4 router to confirm the identity of the IPv4 node from\
    \ which it\n   receives traffic -- whether from a legitimate 6to4 relay or some\n\
    \   other node.  A 6to4 router has to process traffic from all IPv4\n   nodes.\
    \  Malicious IPv4 nodes can exploit this property and attack\n   nodes within\
    \ the 6to4 network.\n   It is possible to conduct a variety of attacks on the\
    \ 6to4 nodes.\n   These attacks are as follows:\n   1.  Attacks with Neighbor\
    \ Discovery (ND) Messages\n   2.  Spoofing traffic to 6to4 nodes\n   3.  Reflecting\
    \ traffic from 6to4 nodes\n   4.  Local IPv4 broadcast attack\n"
- title: 4.1.1.  Attacks with ND Messages
  contents:
  - "4.1.1.  Attacks with ND Messages\n   ATTACK DESCRIPTION\n   Since the 6to4 router\
    \ assumes that all the other 6to4 routers and\n   6to4 relays are \"on-link\"\
    , it is possible to attack the 6to4 router\n   by using ND messages from any node\
    \ in the IPv4 network, unless a\n   prior trust relationship has been established.\n\
    \   The attacks target the 6to4 pseudo-interface.  As long as the 6to4\n   addresses\
    \ are not used in the source or destination address, the\n   security checks specified\
    \ by 6to4 take no stance on these packets.\n   Typically they use link-local addresses.\n\
    \   For example, an attack could be a Route Advertisement or Neighbor\n   Advertisement\
    \ message crafted specifically to cause havoc; the\n   addresses in such a packet\
    \ could resemble to the following:\n   src_v6 = fe80::2           (forged address)\n\
    \   dst_v6 = fe80::1           (valid or invalid address)\n   src_v4 = 8.0.0.1\
    \           (valid or forged address)\n   dst_v4 = 9.0.0.2           (valid address,\
    \ matches dst_v6)\n   These attacks are exacerbated if the implementation supports\
    \ more\n   tunneling mechanisms than 6to4 (or configured tunneling) because it\n\
    \   is impossible to disambiguate such mechanisms, making it difficult to\n  \
    \ enable strict security checks (see Section 6.1).\n   The Neighbor Discovery\
    \ threats (Redirect DoS, or DoS) are described\n   in [8].  Note that all attacks\
    \ may not be applicable, as the 6to4\n   pseudo-interface is assumed not to have\
    \ a link-layer address (Section\n   3.8 RFC 2893 [4]).  However, note that the\
    \ 6to4 router can be either\n   a router or host from the Neighbor Discovery perspective.\n\
    \   THREAT ANALYSIS AND MITIGATION METHODS\n   The attacks can be mitigated by\
    \ using any of the following methods:\n   o  The usage of ND messages could be\
    \ prohibited.  This implies that\n      all packets using addresses of scope link-local\
    \ will be silently\n      discarded.  Section 3.1 of RFC 3056 [1] leaves scope\
    \ for future\n      uses of link-local address.  This method has its pitfalls:\
    \ It\n      would prohibit any sort of ND message and thus close the doors on\n\
    \      development and use of other ND options.  Whether this is a\n      significant\
    \ problem is another thing.\n   o  The 6to4 pseudo-interface could be insulated\
    \ from the other\n      interfaces, particularly the other tunnel interfaces (if\
    \ any), for\n      example by using a separate neighbor cache.\n   o  If ND messages\
    \ are needed, either IPsec [4] or an extension of\n      SEND could be used [9]\
    \ to secure packet exchange using the\n      link-local address; vanilla SEND\
    \ would not work, as the link-layer\n      does not have an address -- and IPsec\
    \ would be rather complex.\n   COMPARISON TO SITUATION WITHOUT 6to4\n   Even though\
    \ rather simply fixed, this attack is not new as such; the\n   same is possible\
    \ by using automatic tunneling [4] or configured\n   tunneling (if one is able\
    \ to spoof source IPv4 address to that of the\n   tunnel end-point).\n   However,\
    \ as 6to4 provides open decapsulation, and automatic tunneling\n   is being deprecated\
    \ [10], 6to4 provides an easy means, which would\n   not exist without it.\n"
- title: 4.1.2.  Spoofing Traffic to 6to4 Nodes
  contents:
  - "4.1.2.  Spoofing Traffic to 6to4 Nodes\n   ATTACK DESCRIPTION\n   The attacker\
    \ - a malicious IPv4 or IPv6 node - can send packets that\n   are difficult to\
    \ trace (e.g., due to spoofing or going through a\n   relay) to a 6to4 node. \
    \ This can be used e.g., to accomplish a DoS\n   attack.\n   The IPv6 and IPv4\
    \ addresses of the packets will be similar to the\n   following:\n   src_v6 =\
    \ 2001:db8::1       (forged address)\n   dst_v6 = 2002:0900:0002::1 (valid address)\n\
    \   src_v4 = 8.0.0.1           (valid or forged address)\n   dst_v4 = 9.0.0.2\
    \           (valid address, matches dst_v6)\n   For attacks launched from a native\
    \ IPv6 node, the src_v4 will be the\n   address of the relay through which the\
    \ traffic will reach the 6to4\n   node.  From IPv4 nodes, src_v4 can be either\
    \ a spoofed source address\n   or the real one.\n   The 6to4 router receives these\
    \ packets from 8.0.0.1, decapsulates\n   them, discards the IPv4 header containing\
    \ the source address 8.0.0.1,\n   and processes them as normal (the attacker has\
    \ guessed or obtained\n   \"dst_v6\" by using one of a number of techniques).\n\
    \   This is a DoS attack on 6to4 nodes.\n   This attack is similar to those shown\
    \ in [11].\n   EXTENSIONS\n   Replies to the traffic will be directed to the src_v6\
    \ address,\n   resulting in 6to4 nodes participating in a reflection DoS.  This\n\
    \   attack is described in more detail in Section 4.2.3.  The replies\n   (e.g.,\
    \ TCP SYN ACK, TCP RST, ICMPv6 Echo Reply, input sent to UDP\n   echo service,\
    \ ICMPv6 Destination Unreachable) are sent to the victim\n   (src_v6), above.\
    \  All the traces from the original attacker (src_v4)\n   have been discarded.\
    \  These return packets will go through a relay.\n   Certain 6to4 networks may\
    \ have a trivial ACL (Access Control List)\n   based firewall that allows traffic\
    \ to pass through if it comes from\n   particular source(s).  Such a firewalling\
    \ mechanism can be bypassed\n   by address spoofing.  This attack can therefore\
    \ be used for trivial\n   ACL avoidance as well.  These attacks might be hampered\
    \ because the\n   replies from the 6to4 node to the spoofed address will be lost.\n\
    \   THREAT ANALYSIS AND SOLUTIONS/MITIGATION METHODS\n   The Denial-of-Service\
    \ attack based on traffic spoofing is not new;\n   the only twists come from the\
    \ fact that traces of an attack are more\n   easily lost, and that spoofing the\
    \ IPv6 address is possible even to\n   those who are unable to do so in their\
    \ current networks.  The 6to4\n   router typically does not log IPv4 addresses\
    \ (as they would be\n   treated as L2 addresses), and thus the source of the attack\
    \ (if\n   launched from an IPv4 node) is lost.  Because traces to the src_v4\n\
    \   address are easily lost, these attacks can also be launched from IPv4\n  \
    \ nodes whose connections are ingress-filtered.\n   However, often this is not\
    \ a real factor, as usually the attackers\n   are just zombies and real attackers\
    \ may not even care whether the\n   unspoofed source address is discovered.\n\
    \   Malicious native IPv6 nodes could be caught easily if ingress\n   filtering\
    \ was enabled everywhere in the IPv6 Internet.\n   These attacks are easy to perform,\
    \ but the extent of harm is limited:\n   o  For every packet sent, at most one\
    \ reply packet is generated:\n      there is no amplification factor.\n   o  Attack\
    \ packets, if initiated from an IPv6 node, will pass through\n      choke point(s),\
    \ namely a 6to4 relay; in addition to physical\n      limitations, these could\
    \ implement some form of 6to4-site-specific\n      traffic limiting.\n   On the\
    \ other hand, a variety of factors can make the attacks serious:\n   o  The attacker\
    \ may have the ability to choose the relay, and he\n      might employ the ones\
    \ best suited for the attacks.  Also, many\n      relays use 192.88.99.1 [3] as\
    \ the source address, making tracing\n      even more difficult (also see Section\
    \ 4.2.6).\n   o  The relay's IPv4 address may be used as a source address for\
    \ these\n      attacks, potentially causing a lot of complaints or other actions,\n\
    \      as the relay might seem to be the source of the attack (see\n      Section\
    \ 4.2.6 for more).\n   Some of the mitigation methods for such attacks are as\
    \ follows:\n   1.  Ingress filtering in the native IPv6 networks to prevent packets\n\
    \       with spoofed IPv6 sources from being transmitted.  This would,\n     \
    \  thus, make it easy to identify the source of the attack.\n       Unfortunately,\
    \ it would depend on significant (or even complete)\n       ingress filtering\
    \ everywhere in other networks; while this is\n       highly desirable, it may\
    \ not be feasible.\n   2.  Security checks in the 6to4 relay.  The 6to4 relay\
    \ must drop\n       traffic (from the IPv6 Internet) that has 6to4 addresses as\n\
    \       source address; see Section 5 for more detail.  This has very\n      \
    \ little cost.\n   However, these mitigation methods do not address the case of\
    \ an IPv4\n   node sending encapsulated IPv6 packets.\n   No simple way to prevent\
    \ such attacks exists, and longer-term\n   solutions, such as ingress filtering\
    \ [12] or itrace [13], would have\n   to be deployed in both IPv6 and IPv4 networks\
    \ to help identify the\n   source of the attacks.  A total penetration is likely\
    \ impossible.\n   (Note that itrace work has been discontinued, as of this writing\
    \ in\n   July 2004.)\n   COMPARISON TO SITUATION WITHOUT 6to4\n   Traffic spoofing\
    \ is not a new phenomenon in IPv4 or IPv6.  6to4 just\n   makes it easier: Anyone\
    \ can, regardless of ingress filtering, spoof a\n   native IPv6 address to a 6to4\
    \ node, even if \"maximal security\" would\n   be implemented and deployed.  Losing\
    \ trails is also easier.\n   Therefore, depending on how much one assumes ingress\
    \ filtering is\n   deployed for IPv4 and IPv6, this could be considered either\
    \ a very\n   serious issue or close to irrelevant compared to the IP spoofing\n\
    \   capabilities without 6to4.\n"
- title: 4.1.3.  Reflecting Traffic to 6to4 Nodes
  contents:
  - "4.1.3.  Reflecting Traffic to 6to4 Nodes\n   ATTACK DESCRIPTION\n   Spoofed traffic\
    \ (as described in Section 4.2.2) may be sent to native\n   IPv6 nodes to perform\
    \ a reflection attack against 6to4 nodes.\n   The spoofed traffic is sent to a\
    \ native IPv6 node, either from an\n   IPv4 node (through a 6to4 relay) or from\
    \ a native IPv6 node (unless\n   ingress filtering has been deployed).  With the\
    \ former, the sent\n   packets would resemble the following:\n   src_v6 = 2002:1234:1234::1\
    \ (forged address of the target 6to4 node)\n   dst_v6 = 2002:0900:0002::1 (valid\
    \ address)\n   src_v4 = 8.0.0.1           (valid or invalid address)\n   dst_v4\
    \ = 9.0.0.2           (valid address, matches dst_v6)\n   Note that an attack\
    \ through the relay is prevented if the relay\n   implements proper decapsulation\
    \ security checks (see Section 5 for\n   details) unless the IPv4 node can spoof\
    \ the source address to match\n   src_v6.  Similarly, the attack from native IPv6\
    \ nodes could be\n   prevented by global ingress filtering deployment.\n   These\
    \ attacks can be initiated by native IPv6, IPv4, or 6to4 nodes.\n   EXTENSIONS\n\
    \   A distributed Reflection DoS can be performed if a large number of\n   nodes\
    \ are involved in sending spoofed traffic with the same src_v6.\n   Malicious\
    \ 6to4 nodes can also (try to) initiate this attack by\n   bouncing traffic off\
    \ 6to4 nodes in other 6to4 sites.  However, this\n   attack may not be possible,\
    \ as the 6to4 router (in the site from\n   which the attack is launched) will\
    \ filter packets with forged source\n   addresses (with security checks mentioned\
    \ in Section 5).\n   THREAT ANALYSIS AND SOLUTIONS/MITIGATION METHODS\n   In this\
    \ case, the reverse traffic comprises replies to the messages\n   received by\
    \ the 6to4 nodes.  The attacker has less control on the\n   packet type, and this\
    \ would inhibit certain types of attacks.  For\n   example, flooding a 6to4 node\
    \ with TCP SYN packets will not be\n   possible (but e.g., a SYN-ACK or RST would\
    \ be).\n   These attacks may be mitigated in various ways:\n   o  Implementation\
    \ of ingress filtering by the IPv4 service providers.\n      This would prevent\
    \ forging of the src_v4 address and help in\n      closing down on the culprit\
    \ IPv4 nodes.  Note that it will be\n      difficult to shut down the attack if\
    \ a large number of IPv4 nodes\n      are involved.\n      These attacks may be\
    \ also be stopped at the 6to4 sites if the\n      culprit src_v4 address is identified,\
    \ and if it is constant, by\n      filtering traffic from this address.  Note\
    \ that it would be\n      difficult to implement this method if appropriate logging\
    \ were not\n      done by the 6to4 router or if a large number of 6to4 nodes,\
    \ and/or\n      a large number of IPv4 nodes were participating in the attack.\n\
    \      Unfortunately, because many IPv4 service providers don't implement\n  \
    \    ingress filtering, for whatever reasons, this may not be a\n      satisfactory\
    \ solution.\n   o  Implementation of ingress filtering by all IPv6 service providers\n\
    \      would eliminate this attack, because src_v6 could not be spoofed\n    \
    \  as a 6to4 address.  However, expecting this to happen may not be\n      practical.\n\
    \   o  Proper implementation of security checks (see Section 5) both at\n    \
    \  the 6to4 relays and routers would eliminate an attack launched\n      from\
    \ an IPv4 node, except when the IPv4 source address was also\n      spoofed --\
    \ but then the attacker would have been able to attack\n      the ultimate destination\
    \ directly.\n   o  Rate limiting traffic at the 6to4 relays.  In a scenario where\n\
    \      most of the traffic is passing through few 6to4 relays, these\n      relays\
    \ can implement traffic rate-limiting features and rate-limit\n      the traffic\
    \ from 6to4 sites.\n   COMPARISON TO SITUATION WITHOUT 6to4\n   This particular\
    \ attack can be mitigated by proper implementation of\n   security checks (which\
    \ is quite straightforward) and ingress\n   filtering; when ingress filtering\
    \ is not implemented, it is typically\n   easier to attack directly than through\
    \ reflection -- unless \"traffic\n   laundering\" is an explicit goal of the attack.\
    \  Therefore, this\n   attack does not seem very serious.\n"
- title: 4.1.4.  Local IPv4 Broadcast Attack
  contents:
  - "4.1.4.  Local IPv4 Broadcast Attack\n   ATTACK DESCRIPTION\n   This threat is\
    \ applicable if the 6to4 router does not check whether\n   the IPv4 address to\
    \ which it tries to send encapsulated IPv6 packets\n   is a local broadcast address\
    \ or a multicast address.\n   This threat is described in the specification [1],\
    \ and implementing\n   the checks eliminates this threat.  However, as checks\
    \ have not been\n   widely implemented, the threat is included here for completeness.\n\
    \   There practically two kinds of attacks: when a local 6to4 user tries\n   to\
    \ send packets to the address corresponding to the broadcast\n   address, and\
    \ when someone is able to do so remotely.\n   In the first option, assume that\
    \ 9.0.0.255 is the 6to4 router's\n   broadcast address.  After receiving the packet\
    \ with a destination\n   address like \"2002:0900:00ff::bbbb\" from a local 6to4\
    \ node, if the\n   router doesn't check the destination address for subnet broadcast,\
    \ it\n   would send the encapsulated protocol-41 packet to 9.0.0.255.  This\n\
    \   would be received by all nodes in the subnet, and the responses would\n  \
    \ be directed to the 6to4 router.\n   Malicious sites may also embed forged 6to4\
    \ addresses in the DNS, use\n   of which by a 6to4 node would result in a local\
    \ broadcast by the 6to4\n   router.  One way to perform this attack would be to\
    \ send an HTML mail\n   containing a link to an invalid URL (for example,\n  \
    \ http://[2002:0900:00ff::bbbb]/index.html) to all users in a 6to4\n   technology\
    \ based network.  Opening of the mail simultaneously would\n   result in a broadcast\
    \ storm.\n   The second kind of attack is more complex: The attack can be\n  \
    \ initiated by IPv4 nodes not belonging to the local network as long as\n   they\
    \ can send traffic with invalid (for example 2002:0900:00ff::bbbb)\n   source\
    \ address.  The 6to4 router has to respond to the traffic by\n   sending ICMPv6\
    \ packets back to the source, (e.g., Hop Limit Exceeded\n   or Destination Unreachable).\
    \  The packet would be as follows:\n   src_v6 = 2002:0800:00ff::bbbb (broadcast\
    \ address of the router)\n   dst_v6 = 2002:0800:0001::0001 (valid non-existent\
    \ address)\n   This is a DoS attack.\n   EXTENSIONS\n   The attacks could also\
    \ be directed at non-local broadcast addresses,\n   but these would be so-called\
    \ \"IPv4 directed broadcasts\", which have\n   (luckily enough) already been extensively\
    \ blocked in the Internet.\n   THREAT ANALYSIS AND SOLUTIONS/MITIGATION METHODS\n\
    \   The attack is based on the premise that the 6to4 router has to send a\n  \
    \ packet that embeds an invalid IPv4 address to an IPv6 address.  Such\n   an\
    \ attack is easily thwarted by ensuring that the 6to4 router does\n   not transmit\
    \ packets to invalid IPv4 addresses.  Specifically,\n   traffic should not be\
    \ sent to broadcast or multicast IPv4 addresses.\n   COMPARISON TO SITUATION WITHOUT\
    \ 6to4\n   The first threat is similar to what is already possible with IPv4,\n\
    \   but IPv6 does not have broadcast addresses.\n   The second, a more complex\
    \ threat, is, similarly, also available in\n   IPv4.\n   In consequence, the security\
    \ does not seem to be significantly worse\n   than with IPv4, and even that is\
    \ restricted to the site(s) with 6to4\n   implementations that haven't been secured\
    \ as described in Section 5.\n"
- title: 4.2.  Attacks on Native IPv6 Internet
  contents:
  - "4.2.  Attacks on Native IPv6 Internet\n   This section describes attacks against\
    \ native IPv6 Internet that\n   somehow leverage 6to4 architecture.  Attacks against\
    \ 6to4 nodes were\n   described in the previous section.\n   6to4 and IPv4 nodes\
    \ can access native IPv6 nodes through the 6to4\n   relay routers.  Thus, the\
    \ 6to4 relays play a crucial role in any\n   attack on native IPv6 nodes by IPv4\
    \ nodes or 6to4 nodes.\n   6to4 relays have only one significant security check\
    \ they must\n   perform for general safety: When decapsulating IPv4 packets, they\n\
    \   check that 2002:V4ADDR::/48 and V4ADDR match in the source address.\n   If\
    \ this is not done, several threats become more serious; in the\n   following\
    \ analysis, it is assumed that such checks are implemented.\n   6to4 relay should\
    \ not relay packets between 6to4 addresses.  In\n   particular, packets decapsulated\
    \ from 6to4 routers should not be\n   encapsulated toward 6to4 routers, as described\
    \ in Section 5.\n   Similarly, packets with 6to4 source and destination addresses\
    \ sent\n   from IPv6 nodes should not be relayed.  It is not clear whether this\n\
    \   kind of check is typically implemented.  The attacks described below\n   assume\
    \ that such checks are not implemented.\n"
- title: 4.2.1.  Attacks with ND Messages
  contents:
  - "4.2.1.  Attacks with ND Messages\n   These attacks are the same as those employed\
    \ against 6to4 routers, as\n   described in Section 4.1.1.\n"
- title: 4.2.2.  Spoofing Traffic to Native IPv6 Node
  contents:
  - "4.2.2.  Spoofing Traffic to Native IPv6 Node\n   ATTACK DESCRIPTION\n   The attacker\
    \ - a malicious IPv4 or 6to4 node - can send packets with\n   a spoofed (or not\
    \ spoofed) 6to4 source address to a native IPv6 node\n   to accomplish a DoS attack.\n\
    \   The threat is similar to that involving 6to4 routers, as described in\n  \
    \ Section 4.1.2.\n   The difference here is that the attack is initiated by IPv4\
    \ or 6to4\n   nodes.  The source IPv6 address may or may not be spoofed.  Note\n\
    \   that, as mentioned above, the relay is assumed to correlate the\n   source\
    \ IPv4 address with the address embedded in the source IPv6\n   address during\
    \ decapsulation.  A side effect is that all spoofed\n   traffic will have a 6to4\
    \ source address.\n   EXTENSIONS\n   Spoofed traffic may also be sent to native\
    \ IPv6 nodes either by other\n   native IPv6 nodes, by 6to4 nodes, or by malicious\
    \ IPv4 nodes to\n   conduct Reflection DoS on either native IPv6 nodes or 6to4\
    \ nodes.\n   Certain native IPv6 networks may have a trivial ACL (Access Control\n\
    \   List) based firewall that allows traffic to pass through if it comes\n   from\
    \ particular source(s).  Such a firewalling mechanism can be\n   bypassed by address\
    \ spoofing.  This attack can therefore be used for\n   trivial ACL avoidance as\
    \ well.  These attacks might be hampered by\n   lost replies from the 6to4 node\
    \ to the spoofed address.\n   THREAT ANALYSIS AND SOLUTIONS/MITIGATION METHODS\n\
    \   The Denial-of-Service attack based on traffic spoofing is not new;\n   the\
    \ only twist is that traces of an attack are more easily lost.  The\n   6to4 relay\
    \ typically does not log IPv4 addresses (as they would be\n   treated as L2 addresses),\
    \ and thus the source of the attack (if\n   launched from an IPv4 node) is lost.\
    \  Because traces to the src_v4\n   address are easily lost, these attacks can\
    \ also be launched from IPv4\n   nodes whose connections are ingress-filtered.\n\
    \   These attacks might not be easy to perform and might be hampered\n   because\
    \ of the following:\n   o  It might be difficult to launch such attacks from 6to4\
    \ nodes\n      because even if the 6to4 routers allow spoofing of the source IPv6\n\
    \      address, the 6to4 relay would check whether the source V4ADDR is\n    \
    \  the same as the one embedded in the source IPv6 address.  Thus,\n      6to4\
    \ nodes will be forced to use the correct IPv6 prefix while\n      launching an\
    \ attack, making it easy to close such attacks.\n   o  Packets may pass through\
    \ choke point(s), namely a 6to4 relay.  In\n      addition to physical limitations,\
    \ there could be some sort of\n      traffic rate limiting mechanisms that may\
    \ be implemented, and\n      these could tone down the attack.\n   o  For every\
    \ packet sent, at most one reply packet is generated:\n      There is no amplification\
    \ factor.\n   Some of the mitigation methods for such attacks are as follows:\n\
    \   1.  Ingress filtering in the IPv4 Internet to prevent packets with a\n   \
    \    spoofed IPv4 source from being transmitted.  As the relay checks\n      \
    \ that the 6to4 address embeds the IPv4 address, no spoofing can be\n       achieved\
    \ unless IPv4 addresses can be spoofed.  However, this\n       would probably\
    \ be an unfeasible requirement.\n   2.  Security checks in the 6to4 relay.  The\
    \ 6to4 relay must drop\n       traffic (from 6to4 nodes, or IPv4 nodes) with non-6to4\
    \ addresses\n       as the source address, or for which the source IPv4 address\
    \ does\n       not match the address embedded in the source IPv6 address.\n  \
    \ COMPARISON TO SITUATION WITHOUT 6to4\n   Compared to Section 4.1.2, which describes\
    \ more serious threats, this\n   threat appears to be slightly more manageable.\
    \  If the relays perform\n   proper decapsulation checks, the spoofing can only\
    \ be achieved, to a\n   6to4 source address, when the IPv4 address is spoofable\
    \ as well.\n"
- title: 4.2.3.  Reflecting Traffic to Native IPv6 Nodes
  contents:
  - "4.2.3.  Reflecting Traffic to Native IPv6 Nodes\n   ATTACK DESCRIPTION\n   These\
    \ reflection attacks are similar to that involving 6to4 routers,\n   as described\
    \ in Section 4.1.3.  Traffic may be reflected off native\n   IPv6 nodes, or off\
    \ 6to4 nodes.  The attack can be initiated by one of\n   the following:\n   o\
    \  Native IPv6 nodes.  These nodes can send invalid traffic with\n      spoofed\
    \ native IPv6 addresses to valid 6to4 nodes.  Replies from\n      the 6to4 nodes\
    \ are part of a reflection attack.\n   o  IPv4 nodes.  These nodes can send traffic\
    \ with native IPv6 source\n      addresses (encapsulated by the IPv4 node itself\
    \ into a protocol-41\n      packet) to 6to4 nodes.  Replies from the 6to4 nodes\
    \ are part of a\n      reflection attack.\n   o  6to4 nodes.  These nodes can\
    \ perform attacks similar to those by\n      IPv4 nodes, but this would require\
    \ spoofing of the source address\n      at the 6to4 site before encapsulation,\
    \ which is likely to be\n      difficult.\n   When launched from a native IPv6\
    \ node, the traffic goes through 6to4\n   relays twice, both before and after\
    \ the reflection; when launched\n   from a 6to4/IPv4 node, the traffic goes through\
    \ a relay only after\n   the reflection.\n   EXTENSIONS\n   A distributed reflection\
    \ DoS can be performed if a large number of\n   native IPv6 nodes or IPv4/6to4\
    \ nodes are involved in sending spoofed\n   traffic with the same source IPv6\
    \ address.\n   THREAT ANALYSIS AND SOLUTIONS/MITIGATION METHODS\n   Some of the\
    \ mitigation methods for such attacks are as follows:\n   1.  Attacks from the\
    \ native IPv6 nodes could be stopped by\n       implementing ingress filtering\
    \ in the IPv6 Internet; hopefully\n       this will become commonplace, but past\
    \ experience of IPv4 ingress\n       filtering deployment (or lack thereof) does\
    \ not promise much.\n   2.  Two measures are needed to stop or mitigate the attacks\
    \ from IPv4\n       nodes: 1) Implementing ingress filtering in the IPv4 internet,\n\
    \       and 2) logging IPv4 source addresses in the 6to4 router.\n   3.  Attacks\
    \ from 6to4 nodes in other sites can be stopped if the 6to4\n       routers in\
    \ those sites implement egress filtering.  This could be\n       done by those\
    \ sites, but the sites that are most likely to be\n       abused are typically\
    \ also those most likely to neglect installing\n       appropriate filtering at\
    \ their edges.\n   4.  The traffic passes through one or two relays, and traffic\
    \ rate\n       limiting in the 6to4 relays might help tone down the reflection\n\
    \       attack.\n   COMPARISON TO SITUATION WITHOUT 6to4\n   Even though there\
    \ are means to mitigate it, the attack is still\n   rather efficient, especially\
    \ when used by native IPv6 nodes with\n   spoofed addresses.  Using 6to4 relays\
    \ and routers could easily take\n   down the 6to4 relay system and/or provide\
    \ an easy means for traffic\n   laundering.  However, if the attack is intended\
    \ to DoS the victim,\n   this can be achieved more smoothly by doing it directly\
    \ (as the\n   source address spoofing was available as well).\n   Therefore, the\
    \ threat to the availability and stability of the 6to4\n   relay system itself\
    \ seems to be higher than to the native IPv6\n   Internet.\n"
- title: 4.2.4.  Local IPv4 Broadcast Attack
  contents:
  - "4.2.4.  Local IPv4 Broadcast Attack\n   This attack is similar to the ones employed\
    \ against 6to4 routers, as\n   described in Section 4.1.4.  There are slight differences\
    \ with regard\n   to the source of the attacks.  This attack can be initiated\
    \ by:\n   o  native IPv6 nodes that may send traffic to the relay's subnet\n \
    \     broadcast address, and\n   o  IPv4 nodes that may send traffic with a spoofed\
    \ source IP address\n      (to be the relay's broadcast address) to elicit replies\
    \ (e.g.,\n      ICMPv6 Hop Limit Exceeded) from the 6to4 relay to its local nodes.\n\
    \   The first approach is more dangerous than those in Section 4.1.4\n   because\
    \ it can be initiated by any IPv6 node (allowed to use the\n   relay); the approach\
    \ is not limited to local users.\n   The second approach is trickier and not really\
    \ useful.  For it to\n   succeed, the relay would have to accept native source\
    \ addresses over\n   the 6to4 pseudo-interface (we did not assume this check was\n\
    \   implemented), as if coming from another relay, triggering an ICMPv6\n   message\
    \ to the relay's local IPv4 subnet.  The former method is more\n   lucrative.\n\
    \   EXTENSIONS\n   None.\n   THREAT ANALYSIS AND SOLUTIONS/MITIGATION METHODS\n\
    \   The threat is restricted to the relay's local subnet and is fixed by\n   tightening\
    \ the 6to4 security checks.\n   COMPARISON TO SITUATION WITHOUT 6to4\n   This\
    \ scenario is caused by 6to4, but fortunately the issue is not\n   serious.\n"
- title: 4.2.5.  Theft of Service
  contents:
  - "4.2.5.  Theft of Service\n   ATTACK DESCRIPTION\n   The 6to4 relay administrators\
    \ would often want to use some policy to\n   limit the use of the relay to specific\
    \ 6to4 sites and/or specific\n   IPv6 sites.\n   The policy control is usually\
    \ enacted by applying restrictions to\n   where the routing information for 2002::/16\
    \ and/or 192.188.99.0/24\n   (if the anycast address used [3]) will spread.\n\
    \   Some users may be able to use the service regardless of these\n   controls,\
    \ by\n   o  configuring the address of the relay using its IPv4 address\n    \
    \  instead of 192.88.99.1, or\n   o  using the routing header to route IPv6 packets\
    \ to reach specific\n      6to4 relays.  (Other routing tricks, such as using\
    \ static routes,\n      may also be used.)\n   EXTENSIONS\n   None.\n   THREAT\
    \ ANALYSIS AND SOLUTIONS/MITIGATION METHODS\n   Attempts to use the relay's IPv4\
    \ address instead of 192.88.99.1 can\n   be mitigated in the following ways:\n\
    \   1.  IPv4 domains should prevent use of the actual IPv4 address of the\n  \
    \     relay instead of 192.88.99.1.\n   2.  Usage of access lists in the 6to4\
    \ relay to limit access.  This is\n       only feasible if the number of IP networks\
    \ the relay is supposed\n       to serve is relatively low.\n   3.  The 6to4 relay\
    \ should filter out arriving tunneled packets with\n       protocol 41 (IPv6)\
    \ that do not have 192.88.99.1 as the\n       destination address.\n   The other\
    \ threat, of using routing tricks in the IPv6 networks to\n   reach the 6to4 relay,\
    \ has similar solutions:\n   1.  Usage of access lists in the relay to limit access.\n\
    \   2.  Filtering out the packets with a routing header (although this\n     \
    \  may have other implications).\n   3.  Monitoring the source addresses going\
    \ through the relay to\n       detect, e.g., peers setting up static routes.\n\
    \   Routing Header is not specific to 6to4.  The main thing one could do\n   with\
    \ it here would be to select the relay.  Some generic threats\n   about routing\
    \ header use are described in [11].\n   As this threat does not have implications\
    \ for anything other than the\n   organization providing 6to4 relay, it is not\
    \ analyzed any further.\n   COMPARISON TO SITUATION WITHOUT 6to4\n   These threats\
    \ are specific to 6to4 relays (or in general anycast\n   services) and do not\
    \ exist in networks without 6to4.\n"
- title: 4.2.6.  Relay Operators Seen as Source of Abuse
  contents:
  - "4.2.6.  Relay Operators Seen as Source of Abuse\n   ATTACK DESCRIPTION\n   Several\
    \ attacks use 6to4 relays to anonymize the traffic; this often\n   results in\
    \ packets being tunneled from the relay to a supposedly-6to4\n   site.\n   However,\
    \ as was pointed out in Section 4.2, the IPv4 source address\n   used by the relay\
    \ could, on a cursory look, be seen as the source of\n   these \"protocol-41\"\
    \ attacks.\n   This could cause a number of concerns for the operators deploying\n\
    \   6to4 relay service, including the following:\n   o  being contacted a lot\
    \ (via email, phone, fax, or lawyers) on\n      suspected \"abuse\",\n   o  having\
    \ the whole IPv4 address range rejected as a source of abuse\n      or spam, causing\
    \ outage to other operations as well, or\n   o  causing the whole IPv4 address\
    \ range to be blacklisted in some\n      \"spammer databases\", if the relay were\
    \ used for those purposes.\n   This threat seems slightly similar to the outburst\
    \ of SMTP abuse\n   caused by open relays but is more generic.\n   EXTENSIONS\n\
    \   None.\n   THREAT ANALYSIS AND SOLUTIONS/MITIGATION METHODS\n   This problem\
    \ can be avoided (or, really, \"made someone else's\n   problem\") by using the\
    \ 6to4 anycast address in 192.88.99.0/24 as the\n   source address.  Blacklisting\
    \ or rejecting this should not cause\n   problems to the other operations.\n \
    \  Further, when someone files complaints to the owner of\n   192.88.99.0/24,\
    \ depending on which registry they are querying, they\n   might get, for example:\n\
    \   o  knowledge that this is a special IANA address block, with no real\n   \
    \   contact person,\n   o  knowledge that this is a special address block for\
    \ RFC 3068, or\n   o  knowledge that this is a special address block for RFC 3068,\
    \ and\n      that there are multiple entries by relay operators in the\n     \
    \ database.\n   Any of these, at least when processed by a human, should show\
    \ that\n   the 6to4 relay is in fact innocent.  Of course, this could result in\n\
    \   reports going to the closest anycast 6to4 relay as well, which had\n   nothing\
    \ to do with the incident.\n   However, the widespread usage of 192.88.99.1 as\
    \ the source address\n   may make it more difficult to disambiguate the relays,\
    \ which might be\n   a useful feature for debugging purposes.\n   COMPARISON TO\
    \ SITUATION WITHOUT 6to4\n   This threat is caused by 6to4 deployment but can\
    \ be avoided, at least\n   in the short-term, by using 192.88.99.1 as the source\
    \ address.\n"
- title: 4.3.  Attacks on IPv4 Internet
  contents:
  - "4.3.  Attacks on IPv4 Internet\n   There are two types of attacks on the IPv4\
    \ internet - spoofed\n   traffic, and reflection.  These can be initiated by native\
    \ IPv6\n   nodes, 6to4 nodes, and IPv4 nodes.\n   Attacks initiated by IPv4 nodes\
    \ that send spoofed traffic, which\n   would not use the 6to4 infrastructure,\
    \ are considered out of the\n   scope of this document.  6to4 infrastructure may\
    \ be used in\n   reflection attacks initiated by IPv4 nodes.\n   It is difficult\
    \ for these attacks to be effective, as the traffic\n   sent out will be IPv6-in-IPv4.\
    \  Such traffic will be rejected by most\n   IPv4 nodes unless they have implemented\
    \ some sort of IPv6-in-IPv4\n   tunneling.\n"
- title: 4.4.  Summary of the Attacks
  contents:
  - "4.4.  Summary of the Attacks\n   Columns:\n   o  Section number.  The section\
    \ that describes the attack.\n   o  Attack name.\n   o  Initiator.  The node that\
    \ initiates the attack.\n      *  I_4 - IPv4 node\n      *  I_6 - native IPv6\
    \ node\n      *  6to4 - 6to4 node\n      *  * - All of the above\n   o  Victim.\
    \  The victim node\n      *  I_4 - IPv4 node\n      *  I_6 - native IPv6 node\n\
    \      *  6to4 - 6to4 node\n      *  Relay - 6to4 relay\n      *  Router - 6to4\
    \ router\n   o  ToA.  Type of Attack\n      *  D - DoS\n      *  R - Reflection\
    \ DoS\n      *  T - Theft of Service\n   o  Fix.  Specified who is responsible\
    \ for fixing the attack.\n      *  6 - The 6to4 developer and/or operator can\
    \ completely mitigate\n         this attack.\n      *  6* - The 6to4 developer\
    \ and/or operator can partially mitigate\n         this attack.\n      *  E -\
    \ This threat cannot be fixed by the 6to4 developer or the\n         6to4 operator.\n\
    \   Summary of attacks on a 6to4 network:\n      +-------+----------------------+---------+----------+-----+-----+\n\
    \      | Sec   | Attack name          |Initiator| Victim   | ToA | Fix |\n   \
    \   +-------+----------------------+---------+----------+-----+-----+\n      |\
    \ 4.1.1 | Attacks with ND      |  I_4    |  Router  |  D  |  6  |\n      +-------+----------------------+---------+----------+-----+-----+\n\
    \      | 4.1.2 | Spoofing Traffic     | I_4,I_6 |   6to4   |  D  |  E  |\n   \
    \   +-------+----------------------+---------+----------+-----+-----+\n      |\
    \ 4.1.3 | Reflection Attacks   |   *     |   6to4   |  R  |  6* |\n      +-------+----------------------+---------+----------+-----+-----+\n\
    \      | 4.1.4 | Local IPv4 Broadcast |   *     |  Router  |  D  |  6  |\n   \
    \   +-------+----------------------+---------+----------+-----+-----+\n      \
    \                           Figure 9\n   Summary of attacks on the native IPv6\
    \ internet:\n      +-------+----------------------+---------+----------+-----+-----+\n\
    \      | Sec   | Attack name          |Initiator|  Victim  | ToA | Fix |\n   \
    \   +-------+----------------------+---------+----------+-----+-----+\n      |\
    \ 4.2.1 | Attacks with ND      |   I_4   |  Relay   |  D  |  6  |\n      +-------+----------------------+---------+----------+-----+-----+\n\
    \      | 4.2.2 | Spoofing Traffic     | I_4,6to4|    I_6   |  D  |  6* |\n   \
    \   +-------+----------------------+---------+----------+-----+-----+\n      |\
    \ 4.2.3 | Reflection Attacks   |    *    |    I_6   |  R  |  6* |\n      +-------+----------------------+---------+----------+-----+-----+\n\
    \      | 4.2.4 | Local IPv4 Broadcast |    *    |  Relay   |  D  |  6  |\n   \
    \   +-------+----------------------+---------+----------+-----+-----+\n      |\
    \ 4.2.5 | Theft of Service     |  6to4   |  Relay   |  T  |  6  |\n      +-------+----------------------+---------+----------+-----+-----+\n\
    \      | 4.2.6 | Relay Operators ...  |    -    |    -     |  D  |  1) |\n   \
    \   +-------+----------------------+---------+----------+-----+-----+\n      \
    \                           Figure 10\n   Notes:\n   1) This attack is a side-effect\
    \ of the other attacks and thus does\n   not have any Initiator, Victim, and Fix.\
    \  It is a Denial of Service\n   attack not on the network but on the organization\
    \ in-charge of the\n   relay.\n   Summary of attacks on IPv4 internet:\n     \
    \ +-------+----------------------+---------+----------+-----+-----+\n      | Sec\
    \   | Attack name          |Initiator|  Victim  | ToA | Fix |\n      +-------+----------------------+---------+----------+-----+-----+\n\
    \      |  4.3  | Spoofing Traffic     |    *    |    I_4   |  D  |  6* |\n   \
    \   +-------+----------------------+---------+----------+-----+-----+\n      |\
    \  4.3  | Reflection Attacks   |    *    |    I_4   |  R  |  6* |\n      +-------+----------------------+---------+----------+-----+-----+\n\
    \                                 Figure 11\n"
- title: 5.  Implementing Proper Security Checks in 6to4
  contents:
  - "5.  Implementing Proper Security Checks in 6to4\n   This section describes several\
    \ ways to implement the security checks\n   required or implied by the specification\
    \ [1] or augmented by this\n   memo.  These do not, in general, protect against\
    \ most of the threats\n   listed above in the \"Threat Analysis\" section.  They\
    \ are only\n   prerequisites for a relatively safe and simple 6to4 implementation.\n\
    \   Note that, in general, the 6to4 router or relay does not know whether\n  \
    \ it is acting as a router or relay.  It would be possible to include a\n   toggle\
    \ to specify the behaviour, to be used when, e.g., the interface\n   is brought\
    \ up, but as of February 2004, no implementations were known\n   to do that. \
    \ Therefore, the checks are described as that which works\n   independently of\
    \ whether the node is a router or relay.\n"
- title: 5.1.  Encapsulating IPv6 into IPv4
  contents:
  - "5.1.  Encapsulating IPv6 into IPv4\n   The checks described in this section are\
    \ to be performed when\n   encapsulating IPv6 into IPv4.\n   The encapsulation\
    \ rules are mainly designed to keep implementors from\n   \"shooting themselves\
    \ in the foot.\"  For example, the source address\n   check would verify that\
    \ the packet will be acceptable to the\n   decapsulator, or the sanity checks\
    \ would ensure that addresses\n   derived from private addresses are not used\
    \ (which would be equally\n   unacceptable).\n    src_v6 and dst_v6 MUST pass\
    \ ipv6-sanity checks (see below) else drop\n    if prefix (src_v6) == 2002::/16\n\
    \        ipv4 address embedded in src_v6 MUST match src_v4\n    else if prefix\
    \ (dst_v6) == 2002::/16\n            dst_v4 SHOULD NOT be assigned to the router\n\
    \    else\n        drop\n            /* we somehow got a native-native ipv6 packet\
    \ */\n    fi\n    accept\n"
- title: 5.2.  Decapsulating IPv4 into IPv6
  contents:
  - "5.2.  Decapsulating IPv4 into IPv6\n   The checks described in this section are\
    \ to be performed when\n   decapsulating IPv4 into IPv6.  They will be performed\
    \ in both the\n   6to4 router and relay.\n    src_v4 and dst_v4 MUST pass ipv4-sanity\
    \ checks, else drop\n    src_v6 and dst_v6 MUST pass ipv6-sanity checks, else\
    \ drop\n    if prefix (dst_v6) == 2002::/16\n        ipv4 address embedded in\
    \ dst_v6 MUST match dst_v4\n            if prefix (src_v6) == 2002::/16\n    \
    \            ipv4 address embedded in src_v6 MUST match src_v4\n             \
    \   dst_v4 SHOULD be assigned to the router\n            fi\n    elif prefix (src_v6)\
    \ == 2002::/16\n        ipv4 address embedded in src_v6 MUST match src_v4\n  \
    \      dst_v4 SHOULD be assigned to the router (see notes below)\n    else\n \
    \       drop\n            /* the we somehow got a native-native ipv6 packet */\n\
    \    fi\n    accept\n"
- title: 5.3.  IPv4 and IPv6 Sanity Checks
  contents:
  - "5.3.  IPv4 and IPv6 Sanity Checks\n   The encapsulation and decapsulation checks\
    \ include certain sanity\n   checks for both IPv4 and IPv6.  These are described\
    \ here in detail.\n"
- title: 5.3.1.  IPv4
  contents:
  - "5.3.1.  IPv4\n   IPv4 address MUST be a global unicast address, as required by\
    \ the\n   6to4 specification.  The disallowed addresses include those defined\n\
    \   in [14], and others widely used and known not to be global.  These\n   are\n\
    \   o  0.0.0.0/8 (the system has no address assigned yet)\n   o  10.0.0.0/8 (private)\n\
    \   o  127.0.0.0/8 (loopback)\n   o  172.16.0.0/12 (private)\n   o  192.168.0.0/16\
    \ (private)\n   o  169.254.0.0/16 (IANA Assigned DHCP link-local)\n   o  224.0.0.0/4\
    \ (multicast)\n   o  240.0.0.0/4 (reserved and broadcast)\n   In addition, the\
    \ address MUST NOT be any of the system's broadcast\n   addresses.  This is especially\
    \ important if the implementation is\n   made so that it can\n   o  receive and\
    \ process encapsulated IPv4 packets arriving at its\n      broadcast addresses,\
    \ or\n   o  send encapsulated IPv4 packets to one of its broadcast addresses.\n"
- title: 5.3.2.  IPv6
  contents:
  - "5.3.2.  IPv6\n   IPv6 address MUST NOT be\n   o  0::/16 (compatible, mapped addresses,\
    \ loopback, unspecified, ...)\n   o  fe80::/10 (link-local)\n   o  fec0::/10 (site-local)\n\
    \   o  ff00::/8 (any multicast)\n   Note: Only link-local multicast would be strictly\
    \ required, but it is\n   believed that multicast with 6to4 will not be feasible,\
    \ so it has\n   been disallowed as well.\n   In addition, it MUST be checked that\
    \ equivalent 2002:V4ADDR::/48\n   checks, where V4ADDR is any of the above IPv4\
    \ addresses, will not be\n   passed.\n"
- title: 5.3.3.  Optional Ingress Filtering
  contents:
  - "5.3.3.  Optional Ingress Filtering\n   In addition, the implementation in the\
    \ 6to4 router may perform some\n   form of ingress filtering (e.g., Unicast Reverse\
    \ Path Forwarding\n   checks).  For example, if the 6to4 router has multiple interfaces,\
    \ of\n   which some are \"internal\", receiving either IPv4 or IPv6 packets with\n\
    \   source address belonging to any of these internal networks from the\n   Internet\
    \ might be disallowed.\n   If these checks are implemented and enabled by default,\
    \ it's\n   recommended that there be a toggle to disable them if needed.\n"
- title: 5.3.4.  Notes about the Checks
  contents:
  - "5.3.4.  Notes about the Checks\n   The rule \"dst_v4 SHOULD be assigned to the\
    \ router\" is not needed if\n   the 6to4 router implementation only accepts and\
    \ processes\n   encapsulated IPv4 packets arriving to its unicast IPv4 addresses,\
    \ and\n   when the destination address is known to be a local broadcast\n   address,\
    \ it does not try to encapsulate and send packets to it.  (See\n   Sections 4.1.4\
    \ and  4.2.4 about this threat.)\n   Some checks, especially the IPv4/IPv6 Sanity\
    \ Checks, could be at\n   least partially implementable with system-level access\
    \ lists, if one\n   would like to avoid placing too many restrictions in the 6to4\n\
    \   implementation itself.  This depends on how many hooks are in place\n   for\
    \ the access lists.  In practice, it seems that this could not be\n   done effectively\
    \ enough unless the access list mechanism is able to\n   parse the encapsulated\
    \ packets.\n"
- title: 6.  Issues in 6to4 Implementation and Use
  contents:
  - "6.  Issues in 6to4 Implementation and Use\n   This section tries to give an overview\
    \ of some of the problems 6to4\n   implementations face, and the kind of generic\
    \ problems the 6to4 users\n   could come up with.\n"
- title: 6.1.  Implementation Considerations with Automatic Tunnels
  contents:
  - "6.1.  Implementation Considerations with Automatic Tunnels\n   There is a problem\
    \ with multiple transition mechanisms if strict\n   security checks are implemented.\
    \  This may vary a bit from\n   implementation to implementation.\n   Consider\
    \ three mechanisms using automatic tunneling: 6to4, ISATAP\n   [15], and Automatic\
    \ Tunneling using Compatible Addresses [4]\n   (currently removed [10] but typically\
    \ still supported).  All of these\n   use IP-IP (protocol 41) [16] IPv4 encapsulation\
    \ with, more or less, a\n   pseudo-interface.\n   When a router, which has any\
    \ two of these enabled, receives an IPv4\n   encapsulated IPv6 packet\n   src_v6\
    \ = 2001:db8::1\n   dst_v6 = 2002:1010:1010::2\n   src_v4 = 10.0.0.1\n   dst_v4\
    \ = 20.20.20.20\n   What can it do?  How should it decide which transition mechanism\
    \ this\n   belongs to; there is no \"transition mechanism number\" in the IPv6\
    \ or\n   IPv4 header to signify this.  (This can also be viewed as a\n   flexibility\
    \ benefit.)\n   Without any kind of security checks (in any of the implemented\n\
    \   methods), these often just \"work\", as the mechanisms aren't\n   differentiated\
    \ but handled in \"one big lump\".\n   Configured tunneling [4] does not suffer\
    \ from this, as it is\n   point-to-point and based on src_v6/dst_v6 pairs of both\
    \ IPv4 and IPv6\n   addresses, so the tunnel interface can be logically deduced.\n\
    \   Solutions for this include 1) not using more than one automatic\n   tunneling\
    \ mechanism in a node and 2) binding different mechanisms to\n   different IPv4\
    \ addresses.\n"
- title: 6.2.  A Different Model for 6to4 Deployment
  contents:
  - "6.2.  A Different Model for 6to4 Deployment\n   Even though this was already\
    \ discussed in Section 4.1.2, it bears\n   some additional elaboration, as it\
    \ was the only problem that cannot\n   be even partially solved using the current\
    \ deployment model.  There\n   are some mitigation methods.\n   6to4 routers receive\
    \ traffic from non-6to4 (\"native\") sources via\n   6to4 relays.  6to4 routers\
    \ have no way of matching the IPv4 source\n   address of the relay with the non-6to4\
    \ IPv6 address of the source.\n   Consequently, anyone can spoof any non-6to4\
    \ IPv6 address by sending\n   traffic, encapsulated, directly to 6to4 routers.\n\
    \   It could be possible to turn the deployment assumptions of 6to4\n   around\
    \ a bit to eliminate some threats caused by untrusted 6to4\n   relays:\n   o \
    \ Every dual-stack site (or even ISP) would be required to have its\n      own\
    \ 6to4 relay.  (This assumes that IPv6-only is so far away that\n      6to4 would\
    \ be retired by that point.)  That is, there would not be\n      third-party relays,\
    \ and 2002::/16 and 192.88.99.0/24 routes would\n      not need to be advertised\
    \ globally.\n   o  The security implications of 6to4 use could be pushed back\
    \ to the\n      level of trust inside the site or ISP (or their acceptable use\n\
    \      policies).  This is something that the sites and ISPs should\n      already\
    \ be familiar with already.\n   However, this presents a number of problems:\n\
    \   This model would shift most of the burden of supporting 6to4 to IPv6\n   sites\
    \ that don't employ or use 6to4 at all, i.e., \"those who deploy\n   proper native\
    \ dual-stack.\"  It could be argued that the deployment\n   pain should be borne\
    \ by 6to4 users, not by the others.\n   The main advantage of 6to4 is easy deployment\
    \ and free relays.  This\n   would require that everyone the 6to4 sites wish to\
    \ communicate with\n   implement these measures.\n   The model would not fix the\
    \ \"relay spoofing problem\", unless\n   everybody also deployed 6to4 addresses\
    \ on the nodes (alongside with\n   native addresses, if necessary), which would\
    \ in turn change 6to4 to\n   operate without relays completely.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document discusses security considerations\
    \ of 6to4.\n   Even if proper checks are implemented, there are a large number\
    \ of\n   different security threats; these threats are analyzed in Section 4.\n\
    \   There are mainly four classes of potential problem sources:\n   1.  6to4 routers\
    \ not being able to identify whether relays are\n       legitimate\n   2.  Wrong\
    \ or impartially implemented 6to4 router or relay security\n       checks\n  \
    \ 3.  6to4 architecture used to participate in DoS or reflected DoS\n       attacks\
    \ or made to participate in \"packet laundering\", i.e.,\n       making another\
    \ attack harder to trace\n   4.  6to4 relays being subject to \"administrative\
    \ abuse\" e.g., theft\n       of service or being seen as a source of abuse.\n\
    \   The first is the toughest problem, still under research.  The second\n   can\
    \ be fixed by ensuring the correctness of implementations; this is\n   important.\
    \  The third is also a very difficult problem, impossible to\n   solve completely;\
    \ therefore it is important to be able to analyze\n   whether this results in\
    \ a significant increase of threats.  The\n   fourth problem seems to have feasible\
    \ solutions.\n   These are analyzed in detail in \"Threat Analysis\", in Section\
    \ 4.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   Some issues were first brought up by Itojun Hagino in\
    \ [17], and Alain\n   Durand introduced one specific problem at IETF51 in August\
    \ 2001\n   (though there was some discussion on the list prior to that); these\n\
    \   two gave the authors the push to start looking into the details of\n   securing\
    \ 6to4.\n   Alexey Kuznetsov brought up the implementation problem with IPv6\n\
    \   martian checks.  Christian Huitema formulated the rules that rely on\n   6to4\
    \ relays using only anycast.  Keith Moore brought up the point\n   about reduced\
    \ flexibility.  Brian Carpenter, Tony Hain, and Vladislav\n   Yasevich are acknowledged\
    \ for lengthy discussions.  Alain Durand\n   reminded the authors about relay\
    \ spoofing problems.  Brian Carpenter\n   reminded the authors about the BGP-based\
    \ 6to4 router model.\n   Christian Huitema gave a push for a more complete threat\
    \ analysis.\n   Itojun Hagino spelled out the operators' fears about 6to4 relay\n\
    \   abuse.  Rob Austein brought up the idea of a different 6to4\n   deployment\
    \ model.\n   In the latter phase, discussions with Christian Huitema, Brian\n\
    \   Carpenter, and Alain Durand were helpful when improving the document.\n  \
    \ David Malone, Iljitsch van Beijnum, and Tim Chown gave feedback on\n   the document.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [1]  Carpenter, B. and K. Moore, \"Connection\
    \ of IPv6 Domains via IPv4\n        Clouds\", RFC 3056, February 2001.\n   [2]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [3]  Huitema, C., \"An Anycast Prefix for\
    \ 6to4 Relay Routers\", RFC\n        3068, June 2001.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [4]  Gilligan, R. and E. Nordmark, \"Transition\
    \ Mechanisms for IPv6\n        Hosts and Routers\", RFC 2893, August 2000.\n \
    \  [5]  IANA, \"Special-Use IPv4 Addresses\", RFC 3330, September 2002.\n   [6]\
    \  Rekhter, Y. and T. Li, \"A Border Gateway Protocol 4 (BGP-4)\",\n        RFC\
    \ 1771, March 1995.\n   [7]  Draves, R., \"Default Address Selection for Internet\
    \ Protocol\n        version 6 (IPv6)\", RFC 3484, February 2003.\n   [8]  Nikander,\
    \ P., Kempf, J., and E. Nordmark, \"IPv6 Neighbor\n        Discovery (ND) Trust\
    \ Models and Threats\", RFC 3756, May 2004.\n   [9]  Arkko, J., Kempf, J., Sommerfeld,\
    \ B., Zill, B., and P. Nikander,\n        \"SEcure Neighbor Discovery (SEND)\"\
    , Work in Progress, July 2004.\n   [10] Nordmark, E. and R. Gilligan, \"Basic\
    \ Transition Mechanisms for\n        IPv6 Hosts and Routers\", Work in Progress,\
    \ September 2004.\n   [11] Savola, P., \"Security of IPv6 Routing Header and Home\
    \ Address\n        Options\", Work in Progress, March 2002.\n   [12] Ferguson,\
    \ P. and D. Senie, \"Network Ingress Filtering: Defeating\n        Denial of Service\
    \ Attacks which employ IP Source Address\n        Spoofing\", BCP 38, RFC 2827,\
    \ May 2000.\n   [13] Bellovin, S., Leech, M. and T. Taylor, \"ICMP Traceback\n\
    \        Messages\", Work in Progress, February 2003.\n   [14] Baker, F., \"Requirements\
    \ for IP Version 4 Routers\", RFC 1812,\n        June 1995.\n   [15] Templin,\
    \ F., Gleeson, T., Talwar, M. and D. Thaler, \"Intra-Site\n        Automatic Tunnel\
    \ Addressing Protocol (ISATAP)\", Work in\n        Progress, May 2004.\n   [16]\
    \ Simpson, W., \"IP in IP Tunneling\", RFC 1853, October 1995.\n   [17] Hagino,\
    \ J., \"Possible abuse against IPv6 transition\n        technologies\", Work in\
    \ Progress, July 2000.\n"
- title: Appendix A.  Some Trivial Attack Scenarios Outlined
  contents:
  - "Appendix A.  Some Trivial Attack Scenarios Outlined\n   Here, a few trivial attack\
    \ scenarios are outlined -- ones that are\n   prevented by implementing checks\
    \ listed in [1] or in section 6.\n   When two 6to4 routers send traffic to each\
    \ others' domains, the\n   packet sent by RA to RB resembles the following:\n\
    \   src_v6 = 2002:0800:0001::aaaa\n   dst_v6 = 2002:0800:0002::bbbb\n   src_v4\
    \ = 8.0.0.1 (added when encapsulated to IPv4)\n   dst_v4 = 8.0.0.2 (added when\
    \ encapsulated to IPv4)\n   When the packet is received by IPv4 stack on RB, it\
    \ will be\n   decapsulated so that only src_v6 and dst_v6 remain, as originally\n\
    \   sent by RA:\n   src_v6 = 2002:0800:0001::aaaa\n   dst_v6 = 2002:0800:0002::bbbb\n\
    \   As every other node is just one hop away (IPv6-wise) and the\n   link-layer\
    \ (IPv4) addresses are lost, this may open many\n   possibilities for misuse.\n\
    \   As an example, unidirectional IPv6 spoofing is made trivial because\n   nobody\
    \ can check (without delving into IP-IP packets) whether the\n   encapsulated\
    \ IPv6 addresses were authentic.  (With native IPv6, this\n   can be done by,\
    \ e.g., RPF-like mechanisms or access lists in upstream\n   routers.)\n   src_v6\
    \ = 2002:1234:5678::aaaa (forged)\n   dst_v6 = 2002:0800:0002::bbbb\n   src_v4\
    \ = 8.0.0.1 (added when encapsulated to IPv4)\n   dst_v4 = 8.0.0.2 (added when\
    \ encapsulated to IPv4)\n   A similar attack with \"src\" being the native address\
    \ is made\n   possible, even with the security checks, by having the sender node\n\
    \   pretend to be a 6to4 relay router.\n   More worries come into the picture\
    \ if, e.g.,\n   src_v6 = ::ffff:[some trusted IPv4 in a private network]\n   src_v6/dst_v6\
    \ = ::ffff:127.0.0.1\n   src_v6/dst_v6 = ::1\n   src_v6/dst_v6 = ...\n   Some\
    \ implementations might have been careful enough to design the\n   stack so as\
    \ to avoid the incoming (or reply) packets going to IPv4\n   packet processing\
    \ through special addresses (e.g., IPv4-mapped\n   addresses), but who can say\
    \ for all ...\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Pekka Savola\n   CSC/FUNET\n   Espoo\n   Finland\n   EMail:\
    \ psavola@funet.fi\n   Chirayu Patel\n   All Play, No Work\n   185, Defence Colony\n\
    \   Bangalore, Karnataka  560038\n   India\n   Phone: +91-98452-88078\n   EMail:\
    \ chirayu@chirayu.org\n   URI:   http://www.chirayu.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ IETF's procedures with respect to rights in IETF Documents can\n   be found\
    \ in BCP 78 and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat\
    \ and any\n   assurances of licenses to be made available, or the result of an\n\
    \   attempt made to obtain a general license or permission for the use of\n  \
    \ such proprietary rights by implementers or users of this\n   specification can\
    \ be obtained from the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n\
    \   The IETF invites any interested party to bring to its attention any\n   copyrights,\
    \ patents or patent applications, or other proprietary\n   rights that may cover\
    \ technology that may be required to implement\n   this standard.  Please address\
    \ the information to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
