Abstract This specification defines "jCal", a JSON format for iCalendar data.
The iCalendar data format is a text format for capturing and exchanging information normally stored within a calendaring and scheduling application, for example, tasks and events.
JSON is a lightweight, text based, language independent data interchange format commonly used in Internet applications.
The iCalendar data format [RFC5545] is a widely deployed interchange format for calendaring and scheduling data.
While many applications and services consume and generate calendar data, iCalendar is a specialized format that requires its own parser/generator.
In contrast, JSON based formats as defined in [RFC7159] are the native format for JavaScript widgets and libraries, and it is appropriate to have a standard form of calendar data that is easier to work with than iCalendar.
The purpose of this specification is to define "jCal", a JSON format for iCalendar data.
jCal is defined as a straightforward mapping into JSON from iCalendar, so that iCalendar data can be converted to JSON, and then back to iCalendar, without losing any semantic meaning in the data.
Anyone creating jCal calendar data according to this specification will know that their data can be converted to a valid iCalendar representation as well.
The key design considerations are essentially the same as those for [RFC6321], that is:
Round tripping (converting an iCalendar instance to jCal and back) will give the same semantic result as the starting point.
For example, all components, properties, and property parameters are guaranteed to be preserved.
Ordering of elements and case of property and parameter names will not necessarily be preserved.
The iCalendar data semantics are to be preserved, allowing a simple consumer to easily browse the data in jCal.
A full understanding of iCalendar is still required in order to modify and/or fully comprehend the calendar data.
Extensions to the underlying iCalendar specification must not lead to requiring an update to jCal. 2.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
The underlying format used for jCal is JSON.
Consequently, the terms "object" and "array" as well as the four primitive types (strings, numbers, booleans, and null)
are to be interpreted as described in Section 1 of [RFC7159].
Some examples in this document contain "partial" JSON documents used for illustrative purposes.
Converting from iCalendar to jCal
This section describes how iCalendar data is converted to jCal using a simple mapping between the iCalendar data model and JSON elements.
Aside from the formal description in this section, an informative ABNF is specified in Appendix A.
In [RFC5545], an iCalendar object comprises a set of "components", "properties", "parameters", and "values".
The top level of iCalendar data typically contains a stream of iCalendar objects, each of which can be considered a "component".
A "component" can contain other "components" or "properties".
A "property" has a "value" and a set of zero or more "parameters".
Each of these entities have a representation in jCal, defined in the following sections.
The representation of an iCalendar object in JSON will be named "jCal object" throughout this document.
Pre processing iCalendar uses a line folding mechanism to limit lines of data to a maximum line length (typically 75 octets) to ensure the maximum likelihood of preserving data integrity as it is transported via various means (e.g., email)
see Section 3.1 of [RFC5545].
iCalendar data uses an "escape" character sequence for text values and property parameter values.
See Sections 3.1 and 3.3 of [RFC5545] as well as [RFC6868].
There is a subtle difference in the number representations between JSON and iCalendar.
While in iCalendar, a number may have leading zeros, as well as a leading plus sign; this is not the case in JSON.
Numbers should be represented in whatever way needed for the underlying format.
When converting from iCalendar to jCal: First, iCalendar lines MUST be unfolded.
Afterwards, any iCalendar escaping MUST be unescaped.
Finally, JSON escaping, as described in Section 7 of [RFC7159], MUST be applied.
The reverse order applies when converting from jCal to iCalendar, which is further described in Section 4.
iCalendar uses a base64 encoding for binary data.
However, it does not restrict the encoding from being applied to non binary value types.
So, the following rules are applied when processing a property with the "ENCODING" property parameter set to "BASE64":  If the property value type is "BINARY", the base64 encoding MUST be preserved.
If the value type is not "BINARY", the "ENCODING" property parameter MUST be removed, and the value MUST be base64 decoded.
When base64 encoding is used, it MUST conform to Section 4 of [RFC4648], which is the base64 method used in [RFC5545].
One key difference in the formatting of values used in iCalendar and jCal is that in jCal, the specification uses date/time values aligned with the extended format of [ISO.8601.2004], which is more commonly used in Internet applications that make use of the JSON format.
The sections of this document describing the various date and time formats contain more information on the use of the complete representation, reduced accuracy, or truncated representation.
At the top level of the iCalendar object model is an "iCalendar stream".
This stream encompasses multiple "iCalendar objects".
As the typical use case is transporting a single iCalendar object, there is no defined equivalent to an "iCalendar stream" in jCal.
To transport multiple jCal objects in a stream, a simple JSON array can be used.
Components (RFC 5545, Section 3.6)
Each iCalendar component, delimited by "BEGIN" and "END", will be converted to a fixed length array with three fields that have a specific structure:
A string with the name of the iCalendar component, but in lowercase.
An array of jCal properties as described in Section 3.4. 3.
An array of jCal components, representing the sub components of the component in question.
This mapping applies to the top level iCalendar objects, as well as individual sub components in the same way.
The iCalendar to jCal component mapping is valid for both current iCalendar components and any new iCalendar components added in the future.
Conversion is to be done in the same way.
While the grouping of properties and sub components does not retain the original order specified in the iCalendar data, the semantics of a component are preserved.
Properties (RFC 5545, Sections 3.7 and 3.8)
iCalendar properties, whether they apply to the "VCALENDAR" object or to a component, are handled in a consistent way in the jCal format.
In jCal, each individual iCalendar property MUST be represented by an array with three fixed elements, followed by one or more additional elements, depending on if the property is a multi valued property as described in Section 3.1.2 of [RFC5545].
The array consists of the following fixed elements: 1.
The name of the property, as a lowercase string.
The iCalendar format specifies that property names are case insensitive and recommends that they be rendered in uppercase.
In jCal, they MUST be in lowercase.
An object containing the parameters as described in Section 3.5.
If the property has no parameters, an empty object is used to represent that.
The type identifier string of the value, in lowercase.
Due to special casing of certain properties as described in Section 3.4.1, it is important that parsers check both the type identifier and the value data type and do not rely on assumptions based on the property name.
The remaining elements of the array are used for one or more values of the property.
For single valued properties, the array has exactly four elements; for multi valued properties, as described in Section 3.1.2 of [RFC5545], each value is another element, and there can be any number of additional elements.
In the following example, the "categories" property is multi valued and has two values, while the summary property is single valued:
This section describes some properties that have special handling when converting to jCal.
GEO Property (RFC 5545, Section 3.8.1.6)
In iCalendar, the "GEO" property value is defined as a semicolon  separated list of two "FLOAT" values, the first representing latitude and the second longitude.
In jCal, the value for the "geo" property value is represented as an array of two values.
The first value of the property represents the latitude; the second value represents the longitude.
When converting from jCal to iCalendar, be careful to use a semicolon as the separator between the two values as required by [RFC5545].
When converting from jCal to iCalendar, the two values MUST be converted using a semicolon as the separator character.
REQUEST STATUS Property (RFC 5545, Section 3.8.8.3)
In iCalendar, the "REQUEST STATUS" property value is defined as a semicolon separated list of two or three "TEXT" values.
The first represents a code, the second a description, and the third any additional data.
In jCal, the value for the "request status" property value is represented as an array with two or three values.
The first array element corresponds to the code, the second element corresponds to the description, and the third element corresponds to the additional data.
Each value is represented using a string value.
If there is no additional data in the iCalendar value, the last element of the array SHOULD NOT be present.
When converting from jCal to iCalendar, the two or three values MUST be converted using a semicolon as the separator character.
Parameters (RFC 5545, Section 3.2)
Property parameters are represented as a JSON object where each key  value pair represents the iCalendar parameter name and its value.
The name of the parameter MUST be in lowercase; the original case of the parameter value MUST be preserved.
For example, the "PARTSTAT" property parameter is represented in jCal by the "partstat" key.
Any new iCalendar parameters added in the future will be converted in the same way.
Parameter iCalendar defines a "VALUE" property parameter (Section 3.2.20 of [RFC5545]).
This property parameter MUST NOT be added to the parameters object.
Instead, the value type is signaled through the type identifier in the third element of the array describing the property.
When converting a property from iCalendar to jCal, the value type is determined as follows:
If the property has a "VALUE" parameter, that parameter's value is used as the value type.
If the property has no "VALUE" parameter but has a default value type, the default value type is used.
If the property has no "VALUE" parameter and has no default value type, "unknown" is used.
Converting from jCal into iCalendar is done as follows:
If the property's value type is "unknown", no "VALUE" parameter is included.
If the property's value type is the default type for that property, no "VALUE" parameter is included.
Otherwise, a "VALUE" parameter is included, and the value type is used as the parameter value.
See Section 5 for information on handling unknown value types.
In [RFC5545], some parameters allow using a COMMA separated list of values.
To ease processing in jCal, the value of such parameters MUST be represented in an array containing the separated values.
The array elements MUST be string values.
Single value parameters can be represented using either a single string value or an array with one string element.
A jCal parser MUST be able to understand both value data types.
Examples of such parameters are the iCalendar "DELEGATED FROM" and "DELEGATED TO" parameters; more such parameters may be added in extensions.
The iCalendar specification requires encapsulation between DQUOTE characters if a parameter value contains a colon, a semicolon, or a comma.
These extra DQUOTE characters do not belong to the actual parameter value, and hence are not included when the parameter is converted to jCal.
Values (RFC 5545, Section 3.3)
The following subsections specify how iCalendar property value data types, which are defined in the subsections of [RFC5545], Section 3.3, are represented in jCal.
Binary (RFC 5545, Section 3.3.1)
iCalendar "BINARY" property values are represented by a property with the type identifier "binary".
The value element is a JSON string, encoded with base64 encoding as specified in Section 4 of [RFC4648].
Boolean (RFC 5545, Section 3.3.2)
iCalendar "BOOLEAN" property values are represented by a property with the type identifier "boolean".
The value is a JSON boolean value.
Calendar User Address (RFC 5545, Section 3.3.3)
iCalendar "CAL ADDRESS" property values are represented by a property with the type identifier "cal address".
The value is a JSON string with the URI as described in [RFC3986].
(RFC 5545, Section 3.3.4) Description:
iCalendar "DATE" property values are represented by a property with the type identifier "date".
The value elements are JSON strings with the same date value specified by [RFC5545], but represented using the extended format of the complete representation specified in [ISO.8601.2004], Section 4.1.2.2.
Other variations, for example, representation with reduced accuracy, MUST NOT be used.
ABNF Schema: ; year, month, and day rules are ; defined in [ISO.8601.2004], Section 2.2.
" property values are represented by a property with the type identifier "date time".
The value elements are JSON strings with the same date value specified by [RFC5545], but represented using the extended format of the complete representation specified in [ISO.8601.2004], Section 4.3.2.
Other variations, for example, representation with reduced accuracy, MUST NOT be used.
The same restrictions apply with respect to leap seconds and time zone offsets as specified in [RFC5545], Section 3.3.5.
ABNF Schema: ; year, month, day, hour, minute, and second rules are ; defined in [ISO.8601.2004], Section 2.2. ; The zone identifier is described in [ISO.8601.2004], Section 4.3.2.
(RFC 5545, Section 3.3.6) Description:
iCalendar "DURATION" property values are represented by a property with the type identifier "duration".
The value elements are JSON strings with the same duration value specified by [RFC5545].
Float (RFC 5545, Section 3.3.7)
"FLOAT" property values are represented by a property with the type identifier "float".
The value elements are JSON primitive number values.
Integer (RFC 5545, Section 3.3.8)
"INTEGER" property values are represented by a property with the type identifier "integer".
The value elements are JSON primitive number values that MUST resolve to an integer value in the range specified in [RFC5545], Section 3.3.8.
Thus, a fractional and/or exponential part are only allowed under limited circumstances.
Period of Time (RFC 5545, Section 3.3.9)
iCalendar "PERIOD" property values are represented by a jCal property with the type identifier "period".
The value element is an array of JSON strings, with the first element representing the start of the period and the second element representing the end of the period.
As in [RFC5545], the start of the period is always formatted as a date time value, and the end of the period MUST be either a date time or duration value.
Any date, date time, or duration values contained in the period value MUST be formatted in accordance to the rules for date, date time, or duration values specified in this document.
Recurrence Rule (RFC 5545, Section 3.3.10)
"RECUR" property values are represented by a property with the type identifier "recur".
The value elements are objects describing the structured data as specified by [RFC5545].
Each rule part is described by the combination of key and value.
The key specifies the name of the rule part and MUST be converted to lowercase.
The value of the rule part MUST be mapped by the following rules:
The value of the "freq" and "wkst" rule parts MUST be a string as specified in [RFC5545], with case preserved.
The value of the "until" rule part MUST be a date or date time value formatted in accordance to the rules for date or date  time specified in this document.
The "count" and "interval" rule parts MUST be specified as a single JSON number value.
The following rule parts can have one or more numeric values: "bysecond", "byminute", "byhour", "bymonthday", "byyearday", "byweekno", "bymonth", and "bysetpos".
If a rule part contains multiple values, an array of numbers MUST be used for that rule part.
Single valued rule parts can be represented by either using a single number value, omitting the array completely, or using an array with one number element.
A jCal parser MUST be able to understand both data types.
Similarly, the "byday" rule part can have one or more string values.
If it contains multiple values, an array of strings MUST be used.
As before, a single valued rule part can be represented using either a single string value or an array with one string element, both of which a jCal parser MUST be able to understand.
Text (RFC 5545, Section 3.3.11)
iCalendar "TEXT" property values are represented by a property with the type identifier "text".
The value elements are JSON strings.
Time (RFC 5545, Section 3.3.12)
iCalendar "TIME" property values are represented by a property with the type identifier "time".
The value elements are JSON strings with the same time value specified by [RFC5545], but represented using the extended format of the complete representation specified in [ISO.8601.2004], Section 4.2.2.2.
Other variations, for example, representation with reduced accuracy, MUST NOT be used.
The same restrictions apply with respect to leap seconds, time fractions, and time zone offsets as specified in [RFC5545], Section 3.3.12.
ABNF Schema: ; hour, minute, and second rules are ; defined in [ISO.8601.2004], Section 2.2. ; The zone identifier is described in [ISO.8601.2004], Section 4.3.2.
URI (RFC 5545, Section 3.3.13)
iCalendar "URI" property values are represented by a property with the type identifier "uri".
The value elements are JSON strings representing the URI.
UTC Offset (RFC 5545, Section 3.3.14)
iCalendar "UTC OFFSET" property values are represented by a property with the type identifier "utc offset".
Extensions iCalendar extension properties and property parameters (those with an "X " prefix in their name) are handled in the same way as other properties and property parameters: the property is represented by an array, and the property parameter is represented by an object.
The property or parameter name uses the same name as for the iCalendar extension, but in lowercase.
For example, the "X FOO" property in iCalendar turns into the "x foo" jCal property.
See Section 5 for how to deal with default values for unrecognized extension properties or property parameters.
4.  Converting from jCal into iCalendar Converting jCal to iCalendar reverses the process described in Section 3.
This section describes a few additional requirements for conversion.
When converting component, property, and property parameter names, the names SHOULD be converted to uppercase.
Although iCalendar names are case insensitive, common practice is to keep them all uppercase following the actual definitions in [RFC5545].
During conversion, JSON escaping MUST be unescaped.
Afterwards, iCalendar escaping, as defined by [RFC5545] and [RFC6868], MUST be applied.
Finally, long lines SHOULD be folded as described in [RFC5545], Section 3.1.
Non binary value types MUST NOT be base64 encoded.
When converting to iCalendar, the VALUE parameter MUST be added to properties whose default value type is unknown, but do not have a jCal type identifier "unknown".
The VALUE parameter MAY be omitted for properties using the default value type.
The VALUE parameter MUST be omitted for properties that have the jCal type identifier "unknown".
5.  Handling Unrecognized Properties or Parameters
In iCalendar, properties can have one or more value types as specified by their definition, with one of those values being defined as the default.
When a property uses its default value type, the "VALUE" property parameter does not need to be specified on the property.
For example, the default value type for "DTSTART" is "DATE TIME", so "VALUE DATE TIME" need not be set as a property parameter.
However, "DTSTART" also allows a "DATE" value to be specified, and if that is used, "VALUE DATE" has to be set as a property parameter.
When new properties are defined or "X " properties used, an iCalendar to jCal converter might not recognize them, and not know what the appropriate default value types are, yet they need to be able to preserve the values.
A similar issue arises for unrecognized property parameters.
In jCal, a new "unknown" property value type is introduced.
Its purpose is to allow preserving unknown property values when round  tripping between jCal and iCalendar.
To avoid collisions, this specification reserves the UNKNOWN property value type in iCalendar.
It MUST NOT be used in any iCalendar as specified by [RFC5545], nor any extensions to it.
Thus, the type is registered to the iCalendar Value Data Types registry in Section 7.1.
Any property that does not include a "VALUE" property parameter and whose default value type is not known, MUST be converted to a primitive JSON string.
The content of that string is the unprocessed value text.
Also, value type MUST be set to "unknown".
To correctly implement this format, it is critical that the type "unknown" be used if the default type is not known.
If this requirement is ignored and, for example, "text" is used, additional escaping may occur, which breaks round tripping values.
Any unrecognized property parameter MUST be converted to a string value, with its content set to the property parameter value text, and treated as if it were a "TEXT" value.
In jCal, the value type is always explicitly specified.
It is converted to iCalendar using the iCalendar VALUE parameter, except in the following two cases:  If the value type specified in jCal matches the default value type in iCalendar, the VALUE parameter MAY be omitted.
If the value type specified in jCal is set to "unknown", the VALUE parameter MUST NOT be specified.
The value MUST be taken over in iCalendar without processing.
The following is an example of an unrecognized iCalendar property (that uses a "DATE TIME" value as its default), and the equivalent jCal representation of that property.
The following is an example of how to cope with jCal data where the parser was unable to identify the type.
Note how the "unknown" value type is not added to the iCalendar data and escaping, aside from standard JSON string escaping, is not processed.
The following is an example of a jCal property (where the corresponding iCalendar property uses an "INTEGER" value as its default) and the equivalent iCalendar representation of that property.
The following is an example of an unrecognized iCalendar property parameter (that uses a "FLOAT" value as its default) specified on a recognized iCalendar property and the equivalent jCal representation of that property and property parameter.
This specification defines how iCalendar data can be "translated" between two different data formats   the original text format and JSON   with a one to one mapping to ensure all the semantic data in one format (properties, parameters, and values) are preserved in the other.
It does not change the semantic meaning of the underlying data itself, or impose or remove any security considerations that apply to the underlying data.
The use of JSON as a format does have its own inherent security risks as discussed in Section 12 of [RFC7159].
Even though JSON is considered a safe subset of JavaScript, it should be kept in mind that a flaw in the parser processing JSON could still impose a threat, which doesn't arise with conventional iCalendar data.
With this in mind, a parser for JSON data should be used for jCal that is aware of the security implications.
For example, the use of JavaScript's eval() function is considered an unacceptable security risk, as described in Section 12 of [RFC7159].
A native parser with full awareness of the JSON format should be preferred.
In addition, it is expected that this new format will result in iCalendar data being more widely disseminated (e.g., with use in web applications rather than just dedicated calendaring applications).
In all cases, application developers have to conform to the semantics of the iCalendar data as defined by [RFC5545] and associated extensions, and all of the security considerations described in Section 7 of [RFC5545], or any associated extensions, are applicable.
This document defines a MIME media type for use with iCalendar in JSON data.
This media type SHOULD be used for the transfer of calendaring data in JSON.
Type name:  application Subtype name:  calendar json Required parameters:  none Optional parameters:  "method", "component", and "optinfo" as defined for the text/calendar media type in [RFC5545], Section 8.1.
Encoding considerations:  Same as encoding considerations of application/json as specified in [RFC7159], Section 11.
This media type provides an alternative format for iCalendar data based on JSON.
Applications that use this media type:  Applications that currently make use of the text/calendar media type can use this as an alternative.
Similarly, applications that use the application/ json media type to transfer calendaring data can use this to further specify the content.
Deprecated alias names for this type:  N/A Magic number(s):
N/A Macintosh file type code(s):  N/A Person & email address to contact for further information:
Intended usage:  COMMON Restrictions on usage:
There are no restrictions on where this media type can be used.
See the "Authors' Addresses" section of this document.
iCalendar Value Data Type IANA has added the following entry to the iCalendar Data Types registry: Value name:  UNKNOWN Purpose:  To allow preserving property values whose default value type is not known during round tripping between jCal and iCalendar.
The UNKNOWN value data type is reserved for the exclusive use of the jCal format.
Its use is described in Section 5 of this document.
As this registration serves as a reservation of the UNKNOWN type so that it is not used in iCalendar, there is no applicable iCalendar example.
Examples of its usage in jCal can be found in this document.
IANA has made the "Status" column for this entry in the registry say, "Reserved Do not use" and has made the "Reference" column refer to Section 5 of this document.
Schema Below is an ABNF schema as per [RFC5234] for iCalendar in JSON.
ABNF symbols not described here are taken from [RFC7159].
The schema is non normative and given for reference only.
Additional semantic restrictions apply, especially regarding the allowed properties and sub components per component.
Details on these restrictions can be found in this document and [RFC5545].
Additional schemas may be available on the Internet at [calconnect artifacts].
; A jCal object is a component with the component name "vcalendar".
; Restrictions to which properties and sub components may be ; specified are to be taken from [RFC5545].
jcalobject   component ; A jCal component consists of the name string, properties array, and ; component array component   begin array DQUOTE component name DQUOTE value separator properties array value separator components
array end array components array   begin array [ component  (value separator component) ]
end array ; A jCal property consists of the name string, parameters object, ; type string, and one or more values as specified in this document.
property   begin array DQUOTE property name DQUOTE value separator params object value separator DQUOTE type name DQUOTE property value  (value separator property value)
array properties array   begin array [ property  (value separator property) ]
end array ; Property values depend on the type name.
Aside from the value types ; mentioned here, extensions may make use of other JSON value types.
; The non terminal symbol structured prop value covers the special ; cases for GEO and REQUEST STATUS.
simple prop value / structured prop value simple prop value
string / number / true / false structured prop value   begin array [ structured element  (value separator structured element) ]
end array structured element   simple prop value ;
The jCal params object is a JSON object that follows the semantic ; guidelines described in this document.
(value separator params member) ]
end object params member   DQUOTE param name DQUOTE name separator param value param value
string / param multi param multi   begin array [ string  (value separator string) ]
end array ; The type MUST be a valid type as described by this document.
New ; value types can be added by extensions.
; Additional semantic restrictions apply as described by this ; document and [RFC5545].
component name   lowercase name property name
This section contains two examples of iCalendar objects with their jCal representation.
FREQ YEARLY;BYDAY 1SU;BYMONTH 4 TZNAME:EDT TZOFFSETFROM:
VEVENT DTSTAMP:20060206T001121Z DTSTART;TZID US/Eastern:20060102T120000 DURATION:
FREQ DAILY;COUNT 5 RDATE;TZID US/
Event #2 DESCRIPTION:We are having a meeting all this week at 12 pm fo r one hour\, with an additional meeting on the first day 2 h ours long.\nPlease bring your own lunch for the 12 pm meetin gs.
