- title: __initial_text__
  contents:
  - "         Remote Controlled Transmission & Echoing TELNET Option\n   Currently,\
    \ a terminal in character-at-a-time transmission and\n   foreign-host echo causes\
    \ four Network Messages for each character\n   struck.  (The character sent from\
    \ local to foreign host; its RFNM;\n   the echoed character sent from the foreign\
    \ to the local host; and its\n   RFNM.)\n   By eliminating most echoing (1/2 as\
    \ many messages) and packaging the\n   characters into useful units (assuming\
    \ an average of five character\n   per unit; therefore another 80 per cent reduction),\
    \ it is believed\n   that almost a 90 per cent reduction in character-mode interactive\n\
    \   Network terminal traffic can be attained.\n   The packaging of characters\
    \ and elimination of foreign echoing should\n   also lessen the load placed on\
    \ the foreign hosts.\n"
- title: '1. Command name and code:'
  contents:
  - "1. Command name and code:\n   RCTE\n"
- title: '2. Command meanings:'
  contents:
  - "2. Command meanings:\n   IAC WILL RCTE\n      The sender of this command REQUESTS\
    \ or AGREES to use the RCTE\n      option, and will send instructions for controlling\
    \ the other\n      side's terminal printer.\n   IAC WON'T RCTE\n      The sender\
    \ of this option REFUSES to send instructions for\n      controlling the other\
    \ side's terminal printer.\n   IAC DO RCTE\n      The sender REQUEST or AGREES\
    \ to have the other side (sender of\n      WILL RCTE) issue commands which will\
    \ control his (sender of the\n      DO) output to the terminal printer.\n   IAC\
    \ DON'T RCTE\n      The sender of this command REFUSES to allow the other side\
    \ to\n      control his (sender of DON'T) terminal printer.\n   IAC SB RCTE <cmd>\
    \ [BC1 BC2] [TC1 TC2]\n      where:\n         <cmd> is one 8-bit byte having the\
    \ following flags (bits are\n         counted from the right):\n         Bit \
    \  Meaning\n         0      0 = Ignore all other bits in this byte and repeat\
    \ the\n                    last <cmd> that was sent.  Equals a 'continue what\n\
    \                    you have been doing'.\n                1 = Perform actions\
    \ as indicated by other bits in this\n                    byte.\n         1  \
    \    0 = Print (echo) Break character\n                1 = Skip (don't echo) Break\
    \ character\n         2      0 = Print (echo) text up to Break character\n   \
    \             1 = Skip (don't echo) text up to Break character\n         3   \
    \   0 = Continue using same classes of Break characters.\n                1 =\
    \ The two 8-bit bytes following this byte contain\n                    flags for\
    \ the new Break classes.\n         4      0 = Continue using same classes of Transmit\
    \ characters.\n                1 = Reset Transmit classes according to the two\
    \ bytes\n                    following 1) the Break classes bytes, if the Break\n\
    \                    classes are also being reset, or 2) this byte, if\n     \
    \               the Break classes are NOT also being reset.\n      Value (decimal)\
    \ of the <cmd> byte and its meaning:\n                0 = Continue what you have\
    \ been doing\n                1 = Print (echo) up to AND INCLUDING Break character\n\
    \                3 = Print up to Break character and SKIP (don't echo)\n     \
    \               Break character\n                5 = Skip text (don't echo) up\
    \ to Break character, but\n                    PRINT Break character\n       \
    \         7 = Skip up to and including Break character\n                Add one\
    \ of the previous non-zero values to one of the\n                    following\
    \ values, to get the total decimal value for\n                    the byte (Note\
    \ that Classes may not be reset without\n                    also resetting the\
    \ printing action; so an odd number\n                    is guaranteed):\n   \
    \             8 = Set Break classes (using the next two bytes [BC1\n         \
    \           BC2])\n                16 = Set Transmission classes (using the next\
    \ two bytes\n                    [TC1 TC2])\n                24 = Set Break classes\
    \ (using the next two bytes [BC1\n                    BC2]) and the Transmission\
    \ classes (using the two\n                    bytes after that [TC1 TC2]).\n \
    \     Sub-commands (IAC SB RCTE...) are only sent by the Controlling\n      Host\
    \ and, in addition to other functions, functionally replace the\n      Go-Ahead\
    \ (IAC GA) Telnet Command.\n"
- title: '3. Default:'
  contents:
  - "3. Default:\n   WON'T RCTE -- DON'T RCTE\n      Neither host asserts special\
    \ control over the other host's\n      terminal printer.\n"
- title: '4. Motivation for the option:'
  contents:
  - "4. Motivation for the option:\n   RFC's 1, 5 and 51 discuss Network and process\
    \ efficiency and\n   smoothness.\n   RFC 357, by John Davidson, introduces the\
    \ problem of echoing delay\n   that occurs when a remote user accesses a full-duplex\
    \ host, thru a\n   satellite link.  In order to save the many thousands of miles\
    \ of\n   transit time for each echoed character, while still permitting full\n\
    \   server responsiveness and clean terminal output, an echo control\n   similar\
    \ to that used by some Time-sharing systems is suggested for\n   the entire Network.\n\
    \      In effect, the proposed option involves making a user host\n      carefully\
    \ regulate the local terminal printer according to\n      explicit instructions\
    \ from the foreign (serving) host.\n   An important additional issue is efficient\
    \ Network transmission.\n   Implementation of the Davidson Echoing Scheme will\
    \ eliminate almost\n   all server-to-user echoing.\n      The proposed option\
    \ also requests using hosts to buffer a\n      terminal's input to the foreign\
    \ host until it forms a useful unit\n      (with \"useful unit\" delimited by\
    \ Break or Transmission characters\n      as described below).  Therefore, fewer\
    \ messages are sent on the\n      user-to-server path.\n   N.B.: This option is\
    \ only intended for use with full-duplex hosts.\n   The Go-Ahead Telnet feature\
    \ is completely adequate for HALF-duplex\n   server hosts.\n"
- title: '5. Explicit description of control mechanism:'
  contents:
  - "5. Explicit description of control mechanism:\n   A. Overview of Interaction\n\
    \      (1) Agree to use RCTE option\n      (2) User holds echo printing until\
    \ instructed by server to do\n          otherwise\n      (3) Server may send output\
    \ to terminal printer.\n      (4) Network output is printed up to an RCTE command\n\
    \      (5) Server sends IAC SB RCTE <cmd>\n      (6) User acts upon the command\
    \ up to a Break character or until\n          receipt of output from the server\
    \ host.\n      (7) Go to (2)\n   Note: Output from the server host may occur at\
    \ any time, in which\n         case, the flow of control switches to (2) and then\
    \ proceeds to\n         (3), (4), etc.\n   B. Explanation:\n      (1) Both Hosts\
    \ agree to use the RCTE option.  After that, the\n          using host (IAC DO\
    \ RCTE) merely acts upon the Controlling\n          (serving) host's commands\
    \ and does not issue any RCTE commands\n          unless and until it (using host)\
    \ decides to stop allowing use\n          of the option (by sending IAC DON'T\
    \ RCTE).\n      (2) User host begins synchronization between the serving host\
    \ and\n          itself by suspending terminal echo printing until directed to\n\
    \          do otherwise by the controlling host, thru an IAC SB RCTE\n       \
    \   <cmd>.\n      (3) The server may send output to the terminal printer, either\
    \ in\n          response to input from the user (in which case it is already\n\
    \          synchronized with the terminal input) or spontaneously.  In\n     \
    \     the latter case, flow of control automatically switches to (2)\n       \
    \   and continues from there.  Output from the server is defined\n          as\
    \ completed when step (5) occurs.  That is, text from the\n          Server to\
    \ the terminal printer MUST end with an RCTE command.\n      (4) Any output from\
    \ the server is printed on the terminal\n          IMMEDIATELY.  Again note that\
    \ the end of such output is\n          defined to be the occurrence of an IAC\
    \ SB RCTE <cmd> command.\n      (5) Server sends an RCTE command.  The command\
    \ may redefine Break\n          and Transmission classes, Action to be performed\
    \ on Break\n          characters, and action to be performed on text.  Each of\
    \ these\n          independent functions is controlled by separate bits in the\n\
    \          <cmd> byte.\n          a. A Transmission character is one which REQUIRES\
    \ the User\n             Host to transmit all text accumulated up to and including\n\
    \             its occurrence.  (For Net efficiency, User hosts are\n         \
    \    DISCOURAGED from sending before the occurrence of a\n             Transmission\
    \ character).\n             If the Transmission Classes bit (Bit 4) is on, the\
    \ two\n                bytes following the two Break Classes bytes (or\n     \
    \           immediately following the <cmd> byte, if the Break\n             \
    \   Classes bit is not on) will indicate what classes are to\n               \
    \ be enabled.\n             If the Bit is OFF, the Transmission classes remain\n\
    \                unchanged.  When the RCTE option is first initiated, NO\n   \
    \             CLASSES are in effect.  That is, no character will be\n        \
    \        considered a Transmission character.  (As if both TC1\n             \
    \   and TC2 are zero.)\n          b. A Break character has the effect of a Transmission\n\
    \             character, but also causes the User host to stop its\n         \
    \    print/discard action upon the User's input text, until\n             directed\
    \ to do otherwise by another IAC SB RCTE <cmd>\n             command from the\
    \ Serving host.  Break characters therefore\n             define printing units.\
    \  \"Break character\" as used in this\n             document does NOT mean Telnet\
    \ Break character.\n             If the Break Classes bit (Bit 3) is on, the two\
    \ bytes\n                following <cmd> will indicate what classes are to be\n\
    \                enabled.  There are currently nine (9) classes defined,\n   \
    \             with room for expansion.\n             If the bit is OFF, the Break\
    \ classes remain unchanged.\n                When the RCTE option is initiated,\
    \ CLASSES 4, 5, and 9\n                are to be in effect.  That is, Format Effectors,\
    \ Non-\n                format effector Control Characters and DEL, and\n    \
    \            Punctuation characters are to be Break characters.\n          c.\
    \ The list of the character classes, used to define Break and\n             Transmission\
    \ classes are listed at the end of this\n             document, in the \"Tables\"\
    \ Section.\n          d. Because Break characters are special, the print/discard\n\
    \             action that should be performed upon them is not always the\n  \
    \           same as should be performed upon the rest of the input\n         \
    \    text.\n             For example, while typing a filename to TENEX, I want\
    \ the\n                text of the filename to be printed (echoed); but I do\n\
    \                not want the <escape> (if I use the name completion\n       \
    \         feature) to be printed.\n             If Bit 1 is ON The Break character\
    \ is NOT to be printed.\n          e. A separate bit (Bit 2) signals whether or\
    \ not the text\n             itself should be printed (echoed) to the terminal.\
    \  If Bit\n             2 = 0, then the text IS to be printed.\n          f. Yet\
    \ another bit (Bit 0 - right-most bit) signals whether or\n             not any\
    \ of the other bits of the command should be checked.\n             If this bit\
    \ is OFF, then the command should be interpreted\n             to mean \"continue\
    \ whatever echoing strategy you have been\n             following, using the same\
    \ Break and Transmission classes.\"\n             This is particularly useful\
    \ for the <cmd> command that\n                follows spontaneously generated\
    \ output from the Serving\n                host (such as \"System Going Down\"\
    ) which needs to signal\n                End-of-Message, but does not usually\
    \ want to reset any\n                other conditions.\n             The server\
    \ may, however, alter user action after a\n                spontaneous message,\
    \ but it is possible that text will\n                be lost, or printed when\
    \ it should not be, since there\n                is no guarantee that the RCTE\
    \ <cmd> from the serving\n                host will be properly synchronized with\
    \ the terminal\n                input.\n      (6) Input from the terminal is (hopefully)\
    \ buffered up to the\n          occurrence of a Transmission or Break character;\
    \ and the input\n          text is echoed or not echoed, up to the occurrence\
    \ of a Break\n          Character.  The most recent RCTE command determines the\
    \ echo,\n          Transmission and Break actions.\n      (7) When a Break character\
    \ is typed, the cycle of control is\n          complete and action re-commences\
    \ at (2).  Action also\n          automatically switches to (2) upon receipt of\
    \ any text from\n          the Server host.\n   C. Notes, Comments, Etc.:\n  \
    \    (1) Even-Numbered Commands, greater than zero, are in error, since\n    \
    \      they will have the low-order bit off.  The command should be\n        \
    \  interpreted as equal to zero, which means that any Classes\n          Reset\
    \ bytes ([TC1 TC2] [BC1 BC2]) will be in error.\n      (2) Servers will generally\
    \ instruct Users NOT to echo Break\n          Characters, even though it might\
    \ be alright to echo most Break\n          characters.  For example, <cr> is usually\
    \ a safe character to\n          echo but <esc> is not.  TENEX Exec is willing\
    \ to accept\n          either, during filename specification.  Therefore, the\
    \ user\n          must be instructed NOT to echo ANY Break Characters.\n     \
    \     This is generally a tolerable problem, since the server has to\n       \
    \   send an RCTE command at this point, anyhow.  Adding the Break\n          character\
    \ to the message (so that it appears to be echoed)\n          will not cause any\
    \ extra Network traffic.\n      (3) The RCTE Option entails a rather large overhead.\
    \  In a true\n          character-at-a-time situation, this overhead is not justified.\n\
    \          But on the average, it should result in significant savings,\n    \
    \      both in Network traffic and Host wake-ups.\n      (4) A severe (User) site-dependent\
    \ problem will be buffering\n          type-ahead input from the terminal.  It\
    \ is possible,\n          especially in the case of TIPS, that the input buffer\
    \ will\n          overflow often.  If the receiving (serving) host will permit,\n\
    \          the accumulated text should be transmitted at this point.  If\n   \
    \       the text cannot be transmitted and further typing by the user\n      \
    \    will result in lost text, the user should be notified.\n   D. Sample Interaction:\n\
    \      \"S:\" is sent from serving (WILL RCTE) host to Using host.\n      \"U:\"\
    \ is sent from Using (DO RCTE) host to Serving host.\n      \"T:\" is entered\
    \ by the terminal user.\n      \"P:\" is printed on the terminal.\n      Text\
    \ surrounded by square brackets ([]) is commentary.\n      Text surrounded by\
    \ angle brackets (<>) is to be taken as a single\n         unit.  E.G., carriage\
    \ return is <cr>, and the decimal value 27\n         is represented <27>.\n  \
    \    The following interaction shows a Logon to a Tenex, initiation of\n     \
    \ the DED editor, insertion of some text and return to the Exec\n      level.\
    \  A Telnet connection has already been opened, but the TENEX\n      prompt has\
    \ not yet been issued.  The hosts first discuss using the\n      RCTE option:\n\
    \      S: <IAC><WILL><RCTE>\n      U: <IAC><DO><RCTE>\n      S: TENEX 1.31.18,\
    \ TENEX EXEC 1.50.2 <cr><lf>@\n         <IAC><SB><RCTE><11><1><24>\n         [Print\
    \ the Herald and echo input text upto a Break character,\n         but do not\
    \ echo the Break Character.  Classes 4 (Format\n         Effectors), 5 (Non-format\
    \ effector Controls and <DEL>), and 9\n         (<space>) act as Break Characters.]\n\
    \      P: TENEX 1.31.18, TENEX EXEC 1.50.2 <cr><lf>@\n      T: LOGIN ARPA <cr>\n\
    \      P: LOGIN\n      U: LOGIN <space>\n      S: <space><IAC><SB><RCTE><0>\n\
    \      P: <space>ARPA\n      U: ARPA <cr>\n      S: <cr><lf> (PASSWORD) : <IAC><SB><RCTE><7>\n\
    \      P: <cr><lf> (PASSWORD) :\n      T: WASHINGTON 1000<cr>\n         [The password\
    \ \"WASHINGTON\" is not echoed.  Action on \"1000<cr>\"\n         is withheld]\n\
    \      U: WASHINGTON <space>\n      S: <space><IAC><SB><RCTE><3>\n      P: <space>\
    \ 1000\n      U: 1000<cr>\n      S: <cr><lf> JOB 17 ON TTY41 7-JUN-73 14:13 <cr><lf>@\n\
    \         <IAC><SB><RCTE><0>\n      P: <cr><lf> JOB 17 ON TTY41 7-JUN-73 14:13\
    \ <cr><lf>@\n      T: DED <esc><cr>\n      P: DED\n      U: DED<esc>\n      S:\
    \ .SAV;1 <IAC><SB><RCTE><0>\n      P: .SAV;1\n      U: <cr>\n      S: <cr><lf><lf>\
    \ Ded   3/14/73 DRO,KRK <cr><lf>:\n         <IAC><SB><RCTE><15><1><255>\n    \
    \     [The program is started and the DED prompt \":\" is sent.  At the\n    \
    \     command level, DED responds to every character.]\n      P: <cr><lf><lf>\
    \ DED   3/14/73 DRP,KRK <cr><lf>:\n      T: IThis is a text line.<cr> This is\
    \ another test line.<^Z> Q\n         [\"I\" means Insert Text.  The text follows,\
    \ terminated by a\n         Control-Z.  The \"Q\" instructs DED to Quit.]\n  \
    \    U: I\n      S: I<cr><lf>* <IAC><SB><RCTE><11><0><24>\n         [DED prompts\
    \ the user, during text input, with an asterisk at\n         the beginning of\
    \ every line.]\n      P: I<cr><lf> *This is a test line.\n      U: This is a test\
    \ line.<cr>\n      S: <cr><lf>* <IAC><SB><RCTE><O>\n      P: <cr><lf>* This is\
    \ another test line.\n      U: This is another test line.<^Z>\n      S: ^Z<cr>lf>:\
    \ <IAC><SB><RCTE><15><1><255>\n         [The returned \"^Z\" is two characters,\
    \ not the ASCII Control-Z.]\n      U: Q\n         [Note that the \"Q\" is not\
    \ yet printed on the terminal, since it\n         is a Break character.]\n   \
    \   S: Q<cr><lf>@ <IAC><SB><RCTE><11><1><24>\n      P: Q<cr><lf> @\n      And\
    \ the user is returned to the Exec level.\n   E. Tables:\n      (1) <cmd> is one\
    \ 8-bit byte having the following flags (bits are\n          counted from the\
    \ right):\n          Bit Meaning\n          0   0 = Ignore all other bits in this\
    \ byte and repeat the last\n                  <cmd> that was sent.  Equals a 'continue\
    \ what you have\n                  been doing'.\n                  1 = Perform\
    \ actions as indicated by other bits in this\n                  byte.\n      \
    \    1   0 = Print (echo) Break character\n              1 = Skip (don't echo)\
    \ Break character\n          2   0 = Print (echo) text up to Break character\n\
    \              1 = Skip (don't echo) text up to Break character\n          3 \
    \  0 = Continue using same classes of Break characters.\n              1 = The\
    \ two 8-bit bytes following this byte contain flags\n                  for the\
    \ new Break classes.\n          4   0 = Continue using same classes of Transmit\
    \ characters\n              1 = Reset Transmit classes according two the two bytes\n\
    \                  following 1) the Break classes bytes, if the Break\n      \
    \            classes are also being reset, or 2) this byte, if the\n         \
    \         Break classes are NOT also being reset.\n      Byte Value (decimal)\
    \ and its meaning:\n         0 = Continue what you have been doing\n         Even\
    \ numbers greater than zero (i.e., numbers with the right-\n             most\
    \ bit off) are in error and should be interpreted as\n             equal to zero.\
    \  When the <cmd> is an even number greater\n             than zero, Classes bytes\
    \ TC1 & TC2 and/or BC1 & BC2 must\n             not be sent.\n         1 = Print\
    \ (echo) up to AND INCLUDING Break character\n         3 = Print up to Break character\
    \ and SKIP (don't echo) Break\n             character\n         5 = Skip text\
    \ (don't echo) up to Break character, but PRINT\n             Break character\n\
    \         7 = Skip up to and including Break character\n         Add one of the\
    \ previous non-zero values to one of the following\n             values, to get\
    \ the total decimal value for the byte (Note\n             that Classes may not\
    \ be reset, without also resetting the\n             printing action; so an odd\
    \ number is guaranteed):\n         8 = Set Break classes (using the next two bytes\
    \ [BC1 BC2])\n         16 = Set Transmission classes (using the next two bytes\
    \ [TC1\n             TC2])\n         24 = Set Break classes (using the next two\
    \ bytes [BC1 BC2]) and\n             the Transmission classes (using the two bytes\
    \ after that\n             [TC1 TC2]).\n      (2) Classes for Break and Transmission\
    \ (The right-most bit of the\n          second byte (TC2 or BC2) represents Class\
    \ 1; the left-most bit\n          of the first byte (TC1 or BC1) represents the\
    \ currently\n          undefined Class 16):\n          1: Upper-Case Letter (A-Z)\n\
    \          2: Lower-case letters (a-z)\n          3: Numbers (0-9)\n         \
    \ 4: Format Effectors (<BS> <CR> <LF> <FF> <HT> <VT>)\n          5: Non-format\
    \ effectors Control Characters, <DEL> and <ESC>\n          6: . , ; : ? !\n  \
    \        7; - [ ( < > ) ] |\n          8: ' \"  / \\ % @ $ # + - * = ^ <- _ (square\
    \ box symbol)\n          9: <space>\n          And Telnet commands (IAC...) are\
    \ ALWAYS to have the effect of\n          a Break character.\n       [ This RFC\
    \ was put into machine readable form for entry ]\n             [ into the online\
    \ RFC archives by Via Genie ]\n"
