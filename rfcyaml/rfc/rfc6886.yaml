- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                       S. Cheshire
  contents:
  - "Independent Submission                                       S. Cheshire\n  \
    \                NAT Port Mapping Protocol (NAT-PMP)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a protocol for automating the process of\n\
    \   creating Network Address Translation (NAT) port mappings.  Included\n   in\
    \ the protocol is a method for retrieving the external IPv4 address\n   of a NAT\
    \ gateway, thus allowing a client to make its external IPv4\n   address and port\
    \ known to peers that may wish to communicate with it.\n   From 2005 onwards,\
    \ this protocol was implemented in Apple products\n   including Mac OS X, Bonjour\
    \ for Windows, and AirPort wireless base\n   stations.  In 2013, NAT Port Mapping\
    \ Protocol (NAT-PMP) was\n   superseded by the IETF Standards Track RFC \"Port\
    \ Control Protocol\n   (PCP)\", which builds on NAT-PMP and uses a compatible\
    \ packet format,\n   but adds a number of significant enhancements.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6886.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Transition to Port Control Protocol ........................4\n  \
    \ 2. Conventions and Terminology Used in This Document ...............5\n   3.\
    \ Protocol and Packet Format ......................................5\n      3.1.\
    \ Requests and Responses .....................................6\n      3.2. Determining\
    \ the External Address ...........................7\n      3.3. Requesting a Mapping\
    \ ......................................10\n      3.4. Destroying a Mapping ......................................13\n\
    \      3.5. Result Codes ..............................................14\n  \
    \    3.6. Seconds Since Start of Epoch ..............................16\n    \
    \  3.7. Recreating Mappings on NAT Gateway Reboot .................16\n      3.8.\
    \ NAT Gateways with NAT Function Disabled ...................18\n      3.9. All\
    \ Mappings Are Bidirectional ............................19\n   4. UNSAF Considerations\
    \ ...........................................20\n      4.1. Scope .....................................................20\n\
    \      4.2. Transition Plan ...........................................20\n  \
    \    4.3. Failure Cases .............................................21\n    \
    \  4.4. Long-Term Solution ........................................23\n      4.5.\
    \ Existing Deployed NATs ....................................23\n   5. Security\
    \ Considerations ........................................23\n   6. IANA Considerations\
    \ ............................................24\n   7. Acknowledgments ................................................24\n\
    \   8. Deployment History .............................................25\n  \
    \ 9. Noteworthy Features of NAT Port Mapping Protocol and PCP .......26\n    \
    \  9.1. Simplicity ................................................27\n      9.2.\
    \ Focused Scope .............................................27\n      9.3. Efficiency\
    \ ................................................27\n      9.4. Atomic Allocation\
    \ Operations ..............................29\n      9.5. Garbage Collection ........................................29\n\
    \      9.6. State Change Announcements ................................30\n  \
    \    9.7. Soft State Recovery .......................................31\n    \
    \  9.8. On-Path NAT Discovery .....................................31\n   10.\
    \ References ....................................................32\n      10.1.\
    \ Normative References .....................................32\n      10.2. Informative\
    \ References ...................................32\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Network Address Translation (NAT) is a method of sharing\
    \ one public\n   Internet address with a number of devices.  This document is\
    \ focused\n   on devices that are formally classified as \"NAPTs\" (Network\n\
    \   Address/Port Translators) [RFC2663].  A full description of NAT is\n   beyond\
    \ the scope of this document.  The following brief overview will\n   cover the\
    \ aspects relevant to this port mapping protocol.  For more\n   information on\
    \ NAT, see \"Traditional IP Network Address Translator\n   (Traditional NAT)\"\
    \ [RFC3022].\n   NATs have one or more external IP addresses.  A private network\
    \ is\n   set up behind the NAT.  Client devices on that private network behind\n\
    \   the NAT are assigned private addresses, and those client devices use\n   the\
    \ private address of the NAT device as their default gateway.\n   When a packet\
    \ from any device behind the NAT is sent to an address on\n   the public Internet,\
    \ the packet first passes through the NAT box.\n   The NAT box looks at the source\
    \ port and address.  In some cases, a\n   NAT will also keep track of the destination\
    \ port and address.  The\n   NAT then creates a mapping from the internal address\
    \ and internal\n   port to an external address and external port if a mapping\
    \ does not\n   already exist.\n   The NAT box replaces the internal address and\
    \ port in the packet with\n   the external entries from the mapping and sends\
    \ the packet on to the\n   next gateway.\n   When a packet from any address on\
    \ the Internet is received on the\n   NAT's external side, the NAT will look up\
    \ the destination address and\n   port (external address and port) in the list\
    \ of mappings.  If an\n   entry is found, it will contain the internal address\
    \ and port to\n   which the packet should be sent.  The NAT gateway will then\
    \ rewrite\n   the destination address and port with those from the mapping.  The\n\
    \   packet will then be forwarded to the new destination addresses.  If\n   the\
    \ packet did not match any mapping, the packet will most likely be\n   dropped.\
    \  Various NATs implement different strategies to handle this.\n   The important\
    \ thing to note is that if there is no mapping, the NAT\n   does not know to which\
    \ internal address the packet should be sent.\n   Mappings are usually created\
    \ automatically as a result of observing\n   outbound packets.  There are a few\
    \ exceptions.  Some NATs may allow\n   manually created permanent mappings that\
    \ map an external port to a\n   specific internal IP address and port.  Such a\
    \ mapping allows\n   incoming connections to the device with that internal address.\
    \  Some\n   NATs also implement a default mapping where any inbound packet that\n\
    \   does not match any other more specific mapping will be forwarded to a\n  \
    \ specified internal address.  Both types of mappings are usually set\n   up manually\
    \ through some configuration tool.  Such manual\n   configuration of port mappings\
    \ is unreasonably onerous for most\n   residential NAT users.\n   Without these\
    \ manually created inbound port mappings, clients behind\n   the NAT would be\
    \ unable to receive inbound connections, which\n   represents a loss of connectivity\
    \ when compared to the original\n   Internet architecture [ETEAISD].  For those\
    \ who view this loss of\n   connectivity as a bad thing, NAT-PMP allows clients\
    \ to operate more\n   like a host directly connected to the unrestricted public\
    \ Internet,\n   with an unrestricted public IPv4 address.  NAT-PMP allows client\n\
    \   hosts to communicate with the NAT gateway to request the creation of\n   inbound\
    \ mappings on demand.  Having created a NAT mapping to allow\n   inbound connections,\
    \ the client can then record its external IPv4\n   address and external port in\
    \ a public registry (e.g., the worldwide\n   Domain Name System) or otherwise\
    \ make it accessible to peers that\n   wish to communicate with it.\n"
- title: 1.1.  Transition to Port Control Protocol
  contents:
  - "1.1.  Transition to Port Control Protocol\n   NAT-PMP enjoyed almost a decade\
    \ of useful service, and operational\n   experience with NAT-PMP informed the\
    \ design of its IETF Standards\n   Track successor, Port Control Protocol (PCP)\
    \ [RFC6887].  PCP builds\n   on NAT-PMP, using the same UDP ports 5350 and 5351,\
    \ and a compatible\n   packet format.  PCP also adds significant enhancements,\
    \ including\n   IPv6 support, management of outbound mappings, management of firewall\n\
    \   rules, full compatibility with large-scale NATs with a pool of\n   external\
    \ addresses, error lifetimes, and an extension mechanism to\n   enable future\
    \ enhancements.\n   Because of the significant enhancements in PCP, all existing\
    \ NAT-PMP\n   implementations are encouraged to migrate to PCP.  The version number\n\
    \   in the packet header is 0 for NAT-PMP and 2 for PCP, so the packets\n   are\
    \ easily distinguished.  (Version number 1 was used by a vendor\n   that shipped\
    \ products that use a protocol that is incompatible with\n   the IETF Standard.\
    \  PCP implementations MUST NOT use version\n   number 1.)\n   For NAT-PMP servers,\
    \ adding PCP support is simple.  When packets are\n   received, if the version\
    \ number is 2, then the packet is interpreted\n   as a PCP request, the request\
    \ is handled, and replies and updates\n   pertaining to that mapping are sent\
    \ using PCP format.  If the version\n   number is 0, then the existing code handles\
    \ the request exactly as it\n   already does, and replies and updates pertaining\
    \ to that mapping are\n   sent using NAT-PMP format.  If the version number is\
    \ 1 or any other\n   unsupported version, then result code 1 (Unsupported Version)\
    \ is\n   returned.\n   NAT-PMP clients should add PCP support, and should default\
    \ to sending\n   requests using PCP format, which will cause clients to prefer\
    \ the\n   newer format when possible.  If a PCP request is sent to an old\n  \
    \ NAT-PMP server that doesn't understand the new PCP format, then it\n   will\
    \ return result code 1 (Unsupported Version), and the client\n   should then immediately\
    \ retry the same request using NAT-PMP format.\n   The presence of the Unsupported\
    \ Version reply allows fast fail-over\n   to NAT-PMP format, without waiting for\
    \ timeouts, retransmissions, or\n   other arbitrary delays.  It is recommended\
    \ that clients always try\n   PCP first for every new request, retransmission,\
    \ and renewal, and\n   only try NAT-PMP in response to an \"Unsupported Version\"\
    \ error.\n   Clients SHOULD NOT record that a given server only speaks NAT-PMP\
    \ and\n   subsequently default to NAT-PMP for that server, since NAT firmware\n\
    \   gets updated, and even a NAT gateway that speaks only NAT-PMP today,\n   may\
    \ be updated to speak PCP tomorrow.\n"
- title: 2.  Conventions and Terminology Used in This Document
  contents:
  - "2.  Conventions and Terminology Used in This Document\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to\
    \ be interpreted as described in \"Key words for use in\n   RFCs to Indicate Requirement\
    \ Levels\" [RFC2119].\n"
- title: 3.  Protocol and Packet Format
  contents:
  - "3.  Protocol and Packet Format\n   The NAT Port Mapping Protocol runs over UDP.\
    \  Every packet starts\n   with an 8-bit version followed by an 8-bit operation\
    \ code.\n   All numeric quantities in NAT-PMP larger than a single byte (e.g.,\n\
    \   error values, Seconds Since Start of Epoch, and mapping lifetime) are\n  \
    \ transmitted in the traditional IETF network byte order (i.e., most\n   significant\
    \ byte first).\n   Non-numeric quantities in NAT-PMP larger than a single byte\
    \ (e.g.,\n   the NAT gateway's external IP address) are transmitted in the natural\n\
    \   byte order, with no byte swapping.\n   This document specifies version 0 of\
    \ the protocol.  Any NAT-PMP\n   gateway implementing this version of the protocol,\
    \ receiving a\n   request with a version number other than 0, MUST return result\
    \ code 1\n   (Unsupported Version), indicating the highest version number it does\n\
    \   support (i.e., 0) in the version field of the response.\n   Opcodes between\
    \ 0 and 127 are client requests.  Opcodes from 128 to\n   255 are corresponding\
    \ server responses.  Responses always contain a\n   16-bit result code in network\
    \ byte order.  A result code of zero\n   indicates success.  Responses also contain\
    \ a 32-bit unsigned integer\n   corresponding to the number of seconds since the\
    \ NAT gateway was\n   rebooted or since its port mapping state was otherwise reset.\n\
    \   This protocol SHOULD only be used when the client determines that its\n  \
    \ primary IPv4 address is in one of the private IPv4 address ranges\n   defined\
    \ in \"Address Allocation for Private Internets\" [RFC1918].\n   This includes\
    \ the address ranges 10/8, 172.16/12, and 192.168/16.\n   Clients always send\
    \ their NAT-PMP requests to their default gateway,\n   as learned via DHCP [RFC2131],\
    \ or similar means.  This protocol is\n   designed for small home networks, with\
    \ a single logical link (subnet)\n   where the client's default gateway is also\
    \ the NAT for that network.\n   For more complicated networks where the NAT is\
    \ some device other than\n   the client's default gateway, this protocol is not\
    \ appropriate.\n"
- title: 3.1.  Requests and Responses
  contents:
  - "3.1.  Requests and Responses\n   NAT gateways are often low-cost devices, with\
    \ limited memory and CPU\n   speed.  For this reason, to avoid making excessive\
    \ demands on the NAT\n   gateway, clients SHOULD NOT issue multiple concurrent\
    \ requests.  If a\n   client needs to perform multiple requests (e.g., on boot,\
    \ wake from\n   sleep, network connection, etc.), it SHOULD queue them and issue\
    \ them\n   serially, one at a time.  Once the NAT gateway responds to one\n  \
    \ request the client machine may issue the next.  In the case of a fast\n   NAT\
    \ gateway, the client may be able to complete requests at a rate of\n   hundreds\
    \ per second.  In the case of a slow NAT gateway that takes\n   perhaps half a\
    \ second to respond to a NAT-PMP request, the client\n   SHOULD respect this and\
    \ allow the NAT gateway to operate at the pace\n   it can manage, and not overload\
    \ it by issuing requests faster than\n   the rate it's answering them.\n   To\
    \ determine the external IPv4 address, or to request a port mapping,\n   a NAT-PMP\
    \ client sends its request packet to port 5351 of its\n   configured gateway address,\
    \ and waits 250 ms for a response.  If no\n   NAT-PMP response is received from\
    \ the gateway after 250 ms, the\n   client retransmits its request and waits 500\
    \ ms.  The client SHOULD\n   repeat this process with the interval between attempts\
    \ doubling each\n   time.  If, after sending its ninth attempt (and then waiting\
    \ for 64\n   seconds), the client has still received no response, then it SHOULD\n\
    \   conclude that this gateway does not support NAT Port Mapping Protocol\n  \
    \ and MAY log an error message indicating this fact.  In addition, if\n   the\
    \ NAT-PMP client receives an \"ICMP Port Unreachable\" message from\n   the gateway\
    \ for port 5351, then it can skip any remaining\n   retransmissions and conclude\
    \ immediately that the gateway does not\n   support NAT-PMP.\n   As a performance\
    \ optimization the client MAY record this information\n   and use it to suppress\
    \ further attempts to use NAT-PMP, but the\n   client should not retain this information\
    \ for too long.  In\n   particular, any event that may indicate a potential change\
    \ of gateway\n   or a change in gateway configuration (hardware link change\n\
    \   indication, change of gateway MAC address, acquisition of new DHCP\n   lease,\
    \ receipt of NAT-PMP announcement packet from gateway, etc.)\n   should cause\
    \ the client to discard its previous information regarding\n   the gateway's lack\
    \ of NAT-PMP support, and send its next NAT-PMP\n   request packet normally.\n\
    \   When deleting a port mapping, the client uses the same initial 250 ms\n  \
    \ timeout, doubling on each successive interval, except that clients\n   may choose\
    \ not to try the full nine times before giving up.  This is\n   because mapping\
    \ deletion requests are in some sense advisory.  They\n   are useful for efficiency,\
    \ but not required for correctness; it is\n   always possible for client software\
    \ to crash, or for power to fail,\n   or for a client device to be physically\
    \ unplugged from the network\n   before it gets a chance to send its mapping deletion\
    \ request(s), so\n   NAT gateways already need to cope with this case.  Because\
    \ of this,\n   it may be acceptable for a client to retry only once or twice before\n\
    \   giving up on deleting its port mapping(s), but a client SHOULD always\n  \
    \ send at least one deletion request whenever possible, to reduce the\n   amount\
    \ of stale state that accumulates on NAT gateways.\n   A client need not continue\
    \ trying to delete a port mapping after the\n   time when that mapping would naturally\
    \ have expired anyway.\n"
- title: 3.2.  Determining the External Address
  contents:
  - "3.2.  Determining the External Address\n   To determine the external address,\
    \ the client behind the NAT sends\n   the following UDP payload to port 5351 of\
    \ the configured gateway\n   address:\n    0                   1\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   | Vers = 0\
    \      | OP = 0        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   A compatible\
    \ NAT gateway MUST generate a response with the following\n   format:\n    0 \
    \                  1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Vers = 0      | OP = 128 + 0  | Result Code (net byte order)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Seconds Since Start of Epoch (in network byte order)          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | External IPv4 Address (a.b.c.d)                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   This response indicates that the NAT gateway implements this version\n   of\
    \ the protocol, and returns the external IPv4 address of the NAT\n   gateway.\
    \  If the result code is non-zero, the value of the External\n   IPv4 Address\
    \ field is undefined (MUST be set to zero on transmission,\n   and MUST be ignored\
    \ on reception).\n   The NAT gateway MUST fill in the Seconds Since Start of Epoch\
    \ field\n   with the time elapsed since its port mapping table was initialized\
    \ on\n   startup, or reset for any other reason (see Section 3.6, \"Seconds\n\
    \   Since Start of Epoch\").\n   Upon receiving a response packet, the client\
    \ MUST check the source IP\n   address, and silently discard the packet if the\
    \ address is not the\n   address of the gateway to which the request was sent.\n"
- title: 3.2.1.  Announcing Address Changes
  contents:
  - "3.2.1.  Announcing Address Changes\n   Upon boot, acquisition of an external\
    \ IPv4 address, subsequent change\n   of the external IPv4 address, reboot, or\
    \ any other event that may\n   indicate possible loss or change of NAT mapping\
    \ state, the NAT\n   gateway MUST send a gratuitous response to the link-local\
    \ multicast\n   address 224.0.0.1, port 5350, with the packet format above, to\
    \ notify\n   clients of the external IPv4 address and Seconds Since Start of\n\
    \   Epoch.\n   To accommodate packet loss, the NAT gateway SHOULD multicast 10\n\
    \   address notifications.  The interval between the first two\n   notifications\
    \ SHOULD be 250 ms, and the interval between each\n   subsequent notification\
    \ SHOULD double.  The Seconds Since Start of\n   Epoch field in each transmission\
    \ MUST be updated appropriately to\n   reflect the passage of time, so as not\
    \ to trigger unnecessary\n   additional mapping renewals (see Section 3.7, \"\
    Recreating Mappings on\n   NAT Gateway Reboot\").\n   Upon receiving a gratuitous\
    \ address announcement packet, the client\n   MUST check the source IP address,\
    \ and silently discard the packet if\n   the address is not the address of the\
    \ client's current configured\n   gateway.  This is to guard against inadvertent\
    \ misconfigurations\n   where there may be more than one NAT gateway active on\
    \ the network.\n   If the source IP address is correct, then the Seconds Since\
    \ Start of\n   Epoch field is checked as described in Section 3.6, and if the\
    \ value\n   is outside the expected plausible range, indicating that a NAT\n \
    \  gateway state loss has occurred, then the NAT-PMP client promptly\n   recreates\
    \ all its active port mapping leases, as described in Section\n   3.7, \"Recreating\
    \ Mappings on NAT Gateway Reboot\".\n   IMPLEMENTATION NOTE: Earlier implementations\
    \ of NAT-PMP used UDP port\n   5351 as the destination both for client requests\
    \ (address and port\n   mapping) and for address announcements.  NAT-PMP servers\
    \ would listen\n   on UDP 5351 for client requests, and NAT-PMP clients would\
    \ listen on\n   UDP 5351 for server announcements.  However, implementers encountered\n\
    \   difficulties when a single device is acting in both roles, for\n   example,\
    \ a home computer with Internet Sharing enabled.  This\n   computer is acting\
    \ in the role of NAT-PMP server to its DHCP clients,\n   yet, at the same time,\
    \ it has to act in the role of NAT-PMP client in\n   order to determine whether\
    \ it is, itself, behind another NAT gateway.\n   While in principle it might be\
    \ possible on some operating systems for\n   two processes to coordinate sharing\
    \ of a single UDP port, on many\n   platforms this is difficult or even impossible,\
    \ so, for pragmatic\n   engineering reasons, it is convenient to have clients\
    \ listen on UDP\n   5350 and servers listen on UDP 5351.\n   IMPLEMENTATION NOTE:\
    \ A given host may have more than one independent\n   NAT-PMP client running at\
    \ the same time, and address announcements\n   need to be available to all of\
    \ them.  Clients should therefore set\n   the SO_REUSEPORT option or equivalent\
    \ in order to allow other\n   processes to also listen on port 5350.  Additionally,\
    \ implementers\n   have encountered issues when one or more processes on the same\
    \ device\n   listen to port 5350 on *all* addresses.  Clients should therefore\n\
    \   bind specifically to 224.0.0.1:5350, not to 0.0.0.0:5350.\n"
- title: 3.3.  Requesting a Mapping
  contents:
  - "3.3.  Requesting a Mapping\n   To create a mapping, the client sends a UDP packet\
    \ to port 5351 of\n   the gateway's internal IP address with the following format:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Vers = 0      | OP = x        | Reserved                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Internal Port                 | Suggested External Port       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Requested Port Mapping Lifetime in Seconds                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Opcodes supported:\n   1 - Map UDP\n   2 - Map TCP\n   The Reserved field\
    \ MUST be set to zero on transmission and MUST be\n   ignored on reception.\n\
    \   The Ports and Lifetime are transmitted in the traditional network\n   byte\
    \ order (i.e., most significant byte first).\n   The Internal Port is set to the\
    \ local port on which the client is\n   listening.\n   If the client would prefer\
    \ to have a high-numbered \"anonymous\"\n   external port assigned, then it should\
    \ set the Suggested External\n   Port to zero, which indicates to the gateway\
    \ that it should allocate\n   a high-numbered port of its choosing.  If the client\
    \ would prefer\n   instead to have the mapped external port be the same as its\
    \ local\n   internal port if possible (e.g., a web server listening on port 80\n\
    \   that would ideally like to have external port 80), then it should set\n  \
    \ the Suggested External Port to the desired value.  However, the\n   gateway\
    \ is not obliged to assign the port suggested, and may choose\n   not to, either\
    \ for policy reasons (e.g., port 80 is reserved and\n   clients may not request\
    \ it) or because that port has already been\n   assigned to some other client.\
    \  Because of this, some product\n   developers have questioned the value of having\
    \ the Suggested External\n   Port field at all.  The reason is for failure recovery.\
    \  Most low-\n   cost home NAT gateways do not record temporary port mappings\
    \ in\n   persistent storage, so if the gateway crashes or is rebooted, all the\n\
    \   mappings are lost.  A renewal packet is formatted identically to an\n   initial\
    \ mapping request packet, except that for renewals the client\n   sets the Suggested\
    \ External Port field to the port the gateway\n   actually assigned, rather than\
    \ the port the client originally wanted.\n   When a freshly rebooted NAT gateway\
    \ receives a renewal packet from a\n   client, it appears to the gateway just\
    \ like an ordinary initial\n   request for a port mapping, except that in this\
    \ case the Suggested\n   External Port is likely to be one that the NAT gateway\
    \ *is* willing\n   to allocate (it allocated it to this client right before the\
    \ reboot,\n   so it should presumably be willing to allocate it again).  This\n\
    \   improves the stability of external ports across NAT gateway restarts.\n  \
    \ The RECOMMENDED Port Mapping Lifetime is 7200 seconds (two hours).\n   After\
    \ sending the port mapping request, the client then waits for the\n   NAT gateway\
    \ to respond.  If after 250 ms the client hasn't received a\n   response from\
    \ the gateway, the client SHOULD reissue its request as\n   described above in\
    \ Section 3.1, \"Requests and Responses\".\n   The NAT gateway responds with the\
    \ following packet format:\n    0                   1                   2    \
    \               3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Vers = 0      | OP = 128 + x  | Result Code                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Seconds Since Start of Epoch                                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Internal Port                 | Mapped External Port          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Port Mapping Lifetime in Seconds                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The epoch time, ports, and lifetime are transmitted in the\n   traditional\
    \ network byte order (i.e., most significant byte first).\n   The 'x' in the OP\
    \ field MUST match what the client requested.  Some\n   NAT gateways are incapable\
    \ of creating a UDP port mapping without\n   also creating a corresponding TCP\
    \ port mapping, and vice versa, and\n   these gateways MUST NOT implement NAT\
    \ Port Mapping Protocol until\n   this deficiency is fixed.  A NAT gateway that\
    \ implements this\n   protocol MUST be able to create TCP-only and UDP-only port\
    \ mappings.\n   If a NAT gateway silently creates a pair of mappings for a client\n\
    \   that only requested one mapping, then it may expose that client to\n   receiving\
    \ inbound UDP packets or inbound TCP connection requests that\n   it did not ask\
    \ for and does not want.\n   While a NAT gateway MUST NOT automatically create\
    \ mappings for TCP\n   when the client requests UDP, and vice versa, the NAT gateway\
    \ MUST\n   reserve the companion port so the same client can choose to map it\
    \ in\n   the future.  For example, if a client requests to map TCP port 80,\n\
    \   as long as the client maintains the lease for that TCP port mapping,\n   another\
    \ client with a different internal IP address MUST NOT be able\n   to successfully\
    \ acquire the mapping for UDP port 80.\n   The client normally requests the external\
    \ port matching the internal\n   port.  If that external port is not available,\
    \ the NAT gateway MUST\n   return an available external port if possible, or return\
    \ an error\n   code if no external ports are available.\n   The source address\
    \ of the packet MUST be used for the internal\n   address in the mapping.  This\
    \ protocol is not intended to facilitate\n   one device behind a NAT creating\
    \ mappings for other devices.  If\n   there are legacy devices that require inbound\
    \ mappings, permanent\n   mappings can be created manually by the user through\
    \ an\n   administrative interface, just as they are today.\n   If a mapping already\
    \ exists for a given internal address and port\n   (whether that mapping was created\
    \ explicitly using NAT-PMP,\n   implicitly as a result of an outgoing TCP SYN\
    \ packet, or manually by\n   a human administrator) and that client requests another\
    \ mapping for\n   the same internal port (possibly requesting a different external\n\
    \   port), then the mapping request should succeed, returning the\n   already-assigned\
    \ external port.  This is necessary to handle the case\n   where a client requests\
    \ a mapping with suggested external port X, and\n   is granted a mapping with\
    \ actual external port Y, but the\n   acknowledgment packet gets lost.  When the\
    \ client retransmits its\n   mapping request, it should get back the same positive\
    \ acknowledgment\n   as was sent (and lost) the first time.\n   The NAT gateway\
    \ MUST NOT accept mapping requests destined to the NAT\n   gateway's external\
    \ IP address or received on its external network\n   interface.  Only packets\
    \ received on the internal interface(s) with a\n   destination address matching\
    \ the internal address(es) of the NAT\n   gateway should be allowed.\n   The NAT\
    \ gateway MUST fill in the Seconds Since Start of Epoch field\n   with the time\
    \ elapsed since its port mapping table was initialized on\n   startup or reset\
    \ for any other reason (see Section 3.6, \"Seconds\n   Since Start of Epoch\"\
    ).\n   The Port Mapping Lifetime is an unsigned integer in seconds.  The NAT\n\
    \   gateway MAY reduce the lifetime from what the client requested.  The\n   NAT\
    \ gateway SHOULD NOT offer a lease lifetime greater than that\n   requested by\
    \ the client.\n   Upon receiving the response packet, the client MUST check the\
    \ source\n   IP address, and silently discard the packet if the address is not\
    \ the\n   address of the gateway to which the request was sent.\n   The client\
    \ SHOULD begin trying to renew the mapping halfway to expiry\n   time, like DHCP.\
    \  The renewal packet should look exactly the same as\n   a request packet, except\
    \ that the client SHOULD set the Suggested\n   External Port to what the NAT gateway\
    \ previously mapped, not what the\n   client originally suggested.  As described\
    \ above, this enables the\n   gateway to automatically recover its mapping state\
    \ after a crash or\n   reboot.\n"
- title: 3.4.  Destroying a Mapping
  contents:
  - "3.4.  Destroying a Mapping\n   A mapping may be destroyed in a variety of ways.\
    \  If a client fails\n   to renew a mapping, then at the time its lifetime expires,\
    \ the\n   mapping MUST be automatically deleted.  In the common case where the\n\
    \   gateway device is a combined DHCP server and NAT gateway, when a\n   client's\
    \ DHCP address lease expires, the gateway device MAY\n   automatically delete\
    \ any mappings belonging to that client.\n   Otherwise, a new client being assigned\
    \ the same IP address could\n   receive unexpected inbound UDP packets or inbound\
    \ TCP connection\n   requests that it did not ask for and does not want.\n   A\
    \ client MAY also send an explicit packet to request deletion of a\n   mapping\
    \ that is no longer needed.  A client requests explicit\n   deletion of a mapping\
    \ by sending a message to the NAT gateway\n   requesting the mapping, with the\
    \ Requested Lifetime in Seconds set to\n   zero.  The Suggested External Port\
    \ MUST be set to zero by the client\n   on sending, and MUST be ignored by the\
    \ gateway on reception.\n   When a mapping is destroyed successfully as a result\
    \ of the client\n   explicitly requesting the deletion, the NAT gateway MUST send\
    \ a\n   response packet that is formatted as defined in Section 3.3,\n   \"Requesting\
    \ a Mapping\".  The response MUST contain a result code of\n   0, the internal\
    \ port as indicated in the deletion request, an\n   external port of 0, and a\
    \ lifetime of 0.  The NAT gateway MUST\n   respond to a request to destroy a mapping\
    \ that does not exist as if\n   the request were successful.  This is because\
    \ of the case where the\n   acknowledgment is lost, and the client retransmits\
    \ its request to\n   delete the mapping.  In this case, the second request to\
    \ delete the\n   mapping MUST return the same response packet as the first request.\n\
    \   If the deletion request was unsuccessful, the response MUST contain a\n  \
    \ non-zero result code and the requested mapping; the lifetime is\n   undefined\
    \ (MUST be set to zero on transmission, and MUST be ignored\n   on reception).\
    \  If the client attempts to delete a port mapping that\n   was manually assigned\
    \ by some kind of configuration tool, the NAT\n   gateway MUST respond with a\
    \ \"Not Authorized\" error, result code 2.\n   When a mapping is destroyed as\
    \ a result of its lifetime expiring or\n   for any other reason, if the NAT gateway's\
    \ internal state indicates\n   that there are still active TCP connections traversing\
    \ that now-\n   defunct mapping, then the NAT gateway SHOULD send appropriately\n\
    \   constructed TCP RST (reset) packets both to the local client and to\n   the\
    \ remote peer on the Internet to terminate that TCP connection.\n   A client can\
    \ request the explicit deletion of all its UDP or TCP\n   mappings by sending\
    \ the same deletion request to the NAT gateway with\n   the external port, internal\
    \ port, and lifetime set to zero.  A client\n   MAY choose to do this when it\
    \ first acquires a new IP address in\n   order to protect itself from port mappings\
    \ that were performed by a\n   previous owner of the IP address.  After receiving\
    \ such a deletion\n   request, the gateway MUST delete all its UDP or TCP port\
    \ mappings\n   (depending on the opcode).  The gateway responds to such a deletion\n\
    \   request with a response as described above, with the internal port\n   set\
    \ to zero.  If the gateway is unable to delete a port mapping, for\n   example,\
    \ because the mapping was manually configured by the\n   administrator, the gateway\
    \ MUST still delete as many port mappings as\n   possible, but respond with a\
    \ non-zero result code.  The exact result\n   code to return depends on the cause\
    \ of the failure.  If the gateway\n   is able to successfully delete all port\
    \ mappings as requested, it\n   MUST respond with a result code of zero.\n"
- title: 3.5.  Result Codes
  contents:
  - "3.5.  Result Codes\n   Currently defined result codes:\n   0 - Success\n   1\
    \ - Unsupported Version\n   2 - Not Authorized/Refused\n       (e.g., box supports\
    \ mapping, but user has turned feature off)\n   3 - Network Failure\n       (e.g.,\
    \ NAT box itself has not obtained a DHCP lease)\n   4 - Out of resources\n   \
    \    (NAT box cannot create any more mappings at this time)\n   5 - Unsupported\
    \ opcode\n   If the version in the request is not zero, then the NAT-PMP server\n\
    \   MUST return the following \"Unsupported Version\" error response to the\n\
    \   client:\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Vers = 0      | OP = 0        | Result Code = 1               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Seconds Since Start of Epoch (in network byte order)          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   If the opcode in the request is 128 or greater, then this is not a\n   request;\
    \ it's a response, and the NAT-PMP server MUST silently ignore\n   it.  Otherwise,\
    \ if the opcode in the request is less than 128, but is\n   not a supported opcode\
    \ (currently 0, 1, or 2), then the entire\n   request MUST be returned to the\
    \ sender, with the top bit of the\n   opcode set (to indicate that this is a response)\
    \ and the result code\n   set to 5 (Unsupported opcode).\n   For version 0 and\
    \ a supported opcode (0, 1, or 2), if the operation\n   fails for some reason\
    \ (Not Authorized, Network Failure, or Out of\n   resources), then a valid response\
    \ MUST be sent to the client, with\n   the top bit of the opcode set (to indicate\
    \ that this is a response)\n   and the result code set appropriately.  Other fields\
    \ in the response\n   MUST be set appropriately.  Specifically:\n   o Seconds\
    \ Since Start of Epoch MUST be set correctly\n   o The External IPv4 Address should\
    \ be set to the correct address, or\n     to 0.0.0.0, as appropriate.\n   o The\
    \ Internal Port MUST be set to the client's requested Internal\n     Port.  This\
    \ is particularly important, because the client needs\n     this information to\
    \ identify which request suffered the failure.\n   o The Mapped External Port\
    \ and Port Mapping Lifetime MUST be set\n     appropriately -- i.e., zero if no\
    \ successful port mapping was\n     created.\n   Should future NAT-PMP opcodes\
    \ be defined, their error responses MUST\n   similarly be specified to include\
    \ sufficient information to identify\n   which request suffered the failure. \
    \ By design, NAT-PMP messages do\n   not contain any transaction identifiers.\
    \  All NAT-PMP messages are\n   idempotent and self-describing; therefore, the\
    \ specifications of\n   future NAT-PMP messages need to include enough information\
    \ for their\n   responses to be self-describing.\n   Clients MUST be able to properly\
    \ handle result codes not defined in\n   this document.  Undefined results codes\
    \ MUST be treated as fatal\n   errors of the request.\n"
- title: 3.6.  Seconds Since Start of Epoch
  contents:
  - "3.6.  Seconds Since Start of Epoch\n   Every packet sent by the NAT gateway includes\
    \ a Seconds Since Start\n   of Epoch (SSSoE) field.  If the NAT gateway resets\
    \ or loses the state\n   of its port mapping table, due to reboot, power failure,\
    \ or any other\n   reason, it MUST reset its epoch time and begin counting SSSoE\
    \ from\n   zero again.  Whenever a client receives any packet from the NAT\n \
    \  gateway, either unsolicited or in response to a client request, the\n   client\
    \ computes its own conservative estimate of the expected SSSoE\n   value by taking\
    \ the SSSoE value in the last packet it received from\n   the gateway and adding\
    \ 7/8 (87.5%) of the time elapsed according to\n   the client's local clock since\
    \ that packet was received.  If the\n   SSSoE in the newly received packet is\
    \ less than the client's\n   conservative estimate by more than 2 seconds, then\
    \ the client\n   concludes that the NAT gateway has undergone a reboot or other\
    \ loss\n   of port mapping state, and the client MUST immediately renew all its\n\
    \   active port mapping leases as described in Section 3.7, \"Recreating\n   Mappings\
    \ on NAT Gateway Reboot\".\n"
- title: 3.7.  Recreating Mappings on NAT Gateway Reboot
  contents:
  - "3.7.  Recreating Mappings on NAT Gateway Reboot\n   The NAT gateway MAY store\
    \ mappings in persistent storage so that,\n   when it is powered off or rebooted,\
    \ it remembers the port mapping\n   state of the network.\n   However, maintaining\
    \ this state is not essential for correct\n   operation.  When the NAT gateway\
    \ powers on or clears its port mapping\n   state as the result of a configuration\
    \ change, it MUST reset the\n   epoch time and re-announce its IPv4 address as\
    \ described in Section\n   3.2.1, \"Announcing Address Changes\".  Reception of\
    \ this packet where\n   time has apparently gone backwards serves as a hint to\
    \ clients on the\n   network that they SHOULD immediately send renewal packets\
    \ (to\n   immediately recreate their mappings) instead of waiting until the\n\
    \   originally scheduled time for those renewals.  Clients who miss\n   receiving\
    \ those gateway announcement packets for any reason will\n   still renew their\
    \ mappings at the originally scheduled time and cause\n   their mappings to be\
    \ recreated; it will just take a little longer for\n   these clients.\n   A mapping\
    \ renewal packet is formatted identically to an original\n   mapping request;\
    \ from the point of view of the client, it is a\n   renewal of an existing mapping,\
    \ but from the point of view of the\n   freshly rebooted NAT gateway, it appears\
    \ as a new mapping request.\n   This self-healing property of the protocol is\
    \ very important.\n   The remarkable reliability of the Internet as a whole derives\
    \ in\n   large part from the fact that important state is held in the\n   endpoints,\
    \ not in the network itself [ETEAISD].  Power-cycling an\n   Ethernet switch results\
    \ only in a brief interruption in the flow of\n   packets; established TCP connections\
    \ through that switch are not\n   broken, merely delayed for a few seconds.  Indeed,\
    \ a failing Ethernet\n   switch can even be replaced with a new one, and as long\
    \ as the cables\n   are transferred over reasonably quickly, after the upgrade\
    \ all the\n   TCP connections that were previously going through the old switch\n\
    \   will be unbroken and now going through the new one.  The same is true\n  \
    \ of IP routers, wireless base stations, etc.  The one exception is NAT\n   gateways.\
    \  Because the port mapping state is required for the NAT\n   gateway to know\
    \ where to forward inbound packets, loss of that state\n   breaks connectivity\
    \ through the NAT gateway.  By allowing clients to\n   detect when this loss of\
    \ NAT gateway state has occurred, and recreate\n   it on demand, we turn hard\
    \ state in the network into soft state, and\n   allow it to be recovered automatically\
    \ when needed.\n   Without this automatic recreation of soft state in the NAT\
    \ gateway,\n   reliable long-term networking would not be achieved.  As mentioned\n\
    \   above, the reliability of the Internet does not come from trying to\n   build\
    \ a perfect network in which errors never happen, but from\n   accepting that\
    \ in any sufficiently large system there will always be\n   some component somewhere\
    \ that's failing, and designing mechanisms\n   that can handle those failures\
    \ and recover.  To illustrate this point\n   with an example, consider the following\
    \ scenario: Imagine a network\n   security camera that has a web interface and\
    \ accepts incoming\n   connections from web browser clients.  Imagine this network\
    \ security\n   camera uses NAT-PMP or a similar protocol to set up an inbound\
    \ port\n   mapping in the NAT gateway so that it can receive incoming\n   connections\
    \ from clients on the other side of the NAT gateway.  Now,\n   this camera may\
    \ well operate for weeks, months, or even years.\n   During that time, it's possible\
    \ that the NAT gateway could experience\n   a power failure or be rebooted.  The\
    \ user could upgrade the NAT\n   gateway's firmware, or even replace the entire\
    \ NAT gateway device\n   with a newer model.  The general point is that if the\
    \ camera operates\n   for a long enough period of time, some kind of disruption\
    \ to the NAT\n   gateway becomes inevitable.  The question is not whether the\
    \ NAT\n   gateway will lose its port mappings, but when, and how often.  If the\n\
    \   network camera and devices like it on the network can detect when the\n  \
    \ NAT gateway has lost its port mappings, and recreate them\n   automatically,\
    \ then these disruptions are self-correcting and largely\n   invisible to the\
    \ end user.  If, on the other hand, the disruptions\n   are not self-correcting,\
    \ and after a NAT gateway reboot the user has\n   to manually reset or reboot\
    \ all the other devices on the network too,\n   then these disruptions are *very*\
    \ visible to the end user.  This\n   aspect of the design is part of what makes\
    \ the difference between a\n   protocol that keeps on working indefinitely over\
    \ a time scale of\n   months or years, and a protocol that works in brief testing,\
    \ but in\n   the real world is continually failing and requiring manual\n   intervention\
    \ to get it going again.\n   When a client renews its port mappings as the result\
    \ of receiving a\n   packet where the Seconds Since Start of Epoch (SSSoE) field\
    \ indicates\n   that a reboot or similar loss of state has occurred, the client\
    \ MUST\n   first delay by a random amount of time selected with uniform random\n\
    \   distribution in the range 0 to 5 seconds, and then send its first\n   port\
    \ mapping request.  After that request is acknowledged by the\n   gateway, the\
    \ client may then send its second request, and so on, as\n   rapidly as the gateway\
    \ allows.  The requests SHOULD be issued\n   serially, one at a time; the client\
    \ SHOULD NOT issue multiple\n   concurrent requests.\n   The discussion in this\
    \ section focuses on recreating inbound port\n   mappings after loss of NAT gateway\
    \ state, because that is the more\n   serious problem.  Losing port mappings for\
    \ outgoing connections\n   destroys those currently active connections, but does\
    \ not prevent\n   clients from establishing new outgoing connections.  In contrast,\n\
    \   losing inbound port mappings not only destroys all existing inbound\n   connections,\
    \ but also prevents the reception of any new inbound\n   connections until the\
    \ port mapping is recreated.  Accordingly, we\n   consider recovery of inbound\
    \ port mappings more important.  However,\n   clients that want outgoing connections\
    \ to survive a NAT gateway\n   reboot can also achieve that using NAT-PMP, in\
    \ the common case of a\n   residential NAT gateway with a single, relatively stable,\
    \ external IP\n   address.  After initiating an outbound TCP connection (which\
    \ will\n   cause the NAT gateway to establish an implicit port mapping), the\n\
    \   client should send the NAT gateway a port mapping request for the\n   source\
    \ port of its TCP connection, which will cause the NAT gateway\n   to send a response\
    \ giving the external port it allocated for that\n   mapping.  The client can\
    \ then store this information, and use it\n   later to recreate the mapping if\
    \ it determines that the NAT gateway\n   has lost its mapping state.\n"
- title: 3.8.  NAT Gateways with NAT Function Disabled
  contents:
  - "3.8.  NAT Gateways with NAT Function Disabled\n   Note that only devices that\
    \ are *currently* acting in the role of NAT\n   gateway should participate in\
    \ NAT-PMP protocol exchanges with\n   clients.  A network device that is capable\
    \ of NAT (and NAT-PMP) but\n   is currently configured not to perform that function\
    \ (e.g., it is\n   acting as a traditional IP router, forwarding packets without\n\
    \   modifying them) MUST NOT respond to NAT-PMP requests from clients nor\n  \
    \ send spontaneous NAT-PMP address-change announcements.\n   In particular, a\
    \ network device not currently acting in the role of\n   NAT gateway should not\
    \ even respond to NAT-PMP requests by returning\n   an error code such as 2, \"\
    Not Authorized/Refused\", since to do so is\n   misleading to clients -- it suggests\
    \ that NAT port mapping is\n   necessary on this network for the client to successfully\
    \ receive\n   inbound connections, but is not available because the administrator\n\
    \   has chosen to disable that functionality.\n   Clients should also be careful\
    \ to avoid making unfounded assumptions,\n   such as the assumption that if the\
    \ client has an IPv4 address in one\n   of the private IPv4 address ranges [RFC1918],\
    \ then that means NAT\n   necessarily must be in use.  Net 10/8 has enough addresses\
    \ to build a\n   private network with millions of hosts and thousands of\n   interconnected\
    \ subnets, all without any use of NAT.  Many\n   organizations have built such\
    \ private networks that benefit from\n   using standard TCP/IP technology, but\
    \ by choice do not connect to the\n   public Internet.  The purpose of NAT-PMP\
    \ is to mitigate some of the\n   damage caused by NAT.  It would be an ironic\
    \ and unwanted side effect\n   of this protocol if it were to lead well-meaning\
    \ but misguided\n   developers to create products that refuse to work on a private\n\
    \   network *unless* they can find a NAT gateway to talk to.\n   Consequently,\
    \ a client finding that NAT-PMP is not available on its\n   network should not\
    \ give up, but should proceed on the assumption that\n   the network may be a\
    \ traditional routed IP network, with no address\n   translation being used. \
    \ This assumption may not always be true, but\n   it is better than the alternative\
    \ of falsely assuming the worst and\n   not even trying to use normal (non-NAT)\
    \ IP networking.\n   If a network device not currently acting in the role of NAT\
    \ gateway\n   receives UDP packets addressed to port 5351, it SHOULD respond\n\
    \   immediately with an \"ICMP Port Unreachable\" message to tell the\n   client\
    \ that it needn't continue with timeouts and retransmissions,\n   and it should\
    \ assume that NAT-PMP is not available and not needed on\n   this network.  Typically,\
    \ this behavior can be achieved merely by not\n   having an open socket listening\
    \ on UDP port 5351.\n"
- title: 3.9.  All Mappings Are Bidirectional
  contents:
  - "3.9.  All Mappings Are Bidirectional\n   All NAT mappings, whether created implicitly\
    \ by an outbound packet,\n   created explicitly using NAT-PMP, or configured statically,\
    \ are\n   bidirectional.  This means that when an outbound packet from a\n   particular\
    \ internal address and port is translated to an external\n   address and port,\
    \ replies addressed to that external address and port\n   need to be translated\
    \ back to the corresponding internal address and\n   port.\n   The converse is\
    \ also true.  When an inbound packet is received that\n   is addressed to an external\
    \ address and port that matches an existing\n   mapping (implicit, explicit, or\
    \ static), it is translated to the\n   corresponding internal address and port\
    \ and forwarded.  Outbound\n   replies from that internal address and port need\
    \ to be translated to\n   the correct external address and port so that they are\
    \ correctly\n   recognized by the remote peer.\n   In particular, if an outbound\
    \ UDP reply that matches an existing\n   explicit or static mapping is instead\
    \ treated like a \"new\" outbound\n   UDP packet, and a new dynamic mapping is\
    \ created (with a different\n   external address and port), then at the time that\
    \ packet arrives at\n   the remote peer it will not be recognized as a valid reply.\
    \  For TCP\n   this bug is quickly spotted because all TCP implementations will\n\
    \   ignore replies with the wrong apparent source address and port.  For\n   UDP\
    \ this bug can more easily go unnoticed because some UDP clients\n   neglect to\
    \ check the source address and port of replies; thus, they\n   will appear to\
    \ work some of the time with NAT gateways that put the\n   wrong source address\
    \ and port in outbound packets.  All NAT gateways\n   MUST ensure that mappings,\
    \ however created, are bidirectional.\n"
- title: 4.  UNSAF Considerations
  contents:
  - "4.  UNSAF Considerations\n   The document \"IAB Considerations for UNilateral\
    \ Self-Address Fixing\n   (UNSAF) Across Network Address Translation (NAT)\" [RFC3424]\
    \ covers a\n   number of issues when working with NATs.  It outlines some\n  \
    \ requirements for any document that attempts to work around problems\n   associated\
    \ with NATs.  This section addresses those requirements.\n"
- title: 4.1.  Scope
  contents:
  - "4.1.  Scope\n   This protocol addresses the needs of TCP and UDP transport peers\
    \ that\n   are separated from the public Internet by exactly one IPv4 NAT.  Such\n\
    \   peers must have access to some form of directory server for\n   registering\
    \ the public IPv4 address and port at which they can be\n   reached.\n"
- title: 4.2.  Transition Plan
  contents:
  - "4.2.  Transition Plan\n   Any client making use of this protocol SHOULD implement\
    \ IPv6 support.\n   If a client supports IPv6 and is running on a device with\
    \ a global\n   IPv6 address, that IPv6 address SHOULD be preferred to the IPv4\n\
    \   external address learned via this NAT mapping protocol.  In case\n   other\
    \ clients do not have IPv6 connectivity, both the IPv4 and IPv6\n   addresses\
    \ SHOULD be registered with whatever form of directory server\n   is used.  Preference\
    \ SHOULD be given to IPv6 addresses when\n   available.  By implementing support\
    \ for IPv6 and using this protocol\n   for IPv4, vendors can ship products today\
    \ that will work under both\n   scenarios.  As IPv6 becomes more widely deployed,\
    \ clients of this\n   protocol following these recommendations will transparently\
    \ make use\n   of IPv6.\n"
- title: 4.3.  Failure Cases
  contents:
  - "4.3.  Failure Cases\n   Aside from NATs that do not implement this protocol,\
    \ there are a\n   number of situations where this protocol may not work.\n"
- title: 4.3.1.  NAT behind NAT
  contents:
  - "4.3.1.  NAT behind NAT\n   Some people's primary IPv4 address, assigned by their\
    \ ISP, may itself\n   be a NAT address.  In addition, some people may have an\
    \ external IPv4\n   address, but may then double NAT themselves, perhaps by choice\
    \ or\n   perhaps by accident.  Although it might be possible in principle for\n\
    \   one NAT gateway to recursively request a mapping from the next one,\n   this\
    \ document does not advocate that and does not try to prescribe\n   how it would\
    \ be done.\n   It would be a lot of work to implement nested NAT port mapping\n\
    \   correctly, and there are a number of reasons why the end result might\n  \
    \ not be as useful as we might hope.  Consider the case of an ISP that\n   offers\
    \ each of its customers only a single NAT address.  This ISP\n   could instead\
    \ have chosen to provide each customer with a single\n   public IPv4 address,\
    \ or, if the ISP insists on running NAT, it could\n   have chosen to allow each\
    \ customer a reasonable number of addresses,\n   enough for each customer device\
    \ to have its own NAT address directly\n   from the ISP.  If, instead, this ISP\
    \ chooses to allow each customer\n   just one and only one NAT address, forcing\
    \ said customer to run\n   nested NAT in order to use more than one device, it\
    \ seems unlikely\n   that such an ISP would be so obliging as to provide a NAT\
    \ service\n   that supports NAT-PMP.  Supposing that such an ISP did wish to offer\n\
    \   its customers NAT service with NAT-PMP so as to give them the ability\n  \
    \ to receive inbound connections, this ISP could easily choose to allow\n   each\
    \ client to request a reasonable number of DHCP addresses from\n   that gateway.\
    \  Remember that Net 10/8 [RFC1918] allows for over 16\n   million addresses,\
    \ so NAT addresses are not in any way in short\n   supply.  A single NAT gateway\
    \ with 16 million available addresses is\n   likely to run out of packet forwarding\
    \ capacity before it runs out of\n   internal addresses to hand out.  In this\
    \ way, the ISP could offer\n   single-level NAT with NAT-PMP, obviating the need\
    \ to support nested\n   NAT-PMP.  In addition, an ISP that is motivated to provide\
    \ their\n   customers with unhindered access to the Internet by allowing incoming\n\
    \   as well as outgoing connections has better ways to offer this\n   service.\
    \  Such an ISP could offer its customers real public IPv4\n   addresses instead\
    \ of NAT addresses, or could choose to offer its\n   customers full IPv6 connectivity,\
    \ where no mapping or translation is\n   required at all.\n   Note: In the nine\
    \ years since NAT-PMP was designed, the pool of\n   available IPv4 addresses has\
    \ been exhausted, and many ISPs now offer\n   translated IPv4 addresses out of\
    \ necessity.  Such ISPs have indicated\n   a willingness to offer PCP service\
    \ to their customers.\n"
- title: 4.3.2.  NATs with Multiple External IPv4 Addresses
  contents:
  - "4.3.2.  NATs with Multiple External IPv4 Addresses\n   If a NAT maps internal\
    \ addresses to multiple external addresses, then\n   it SHOULD pick one of those\
    \ external addresses as the one it will\n   support for inbound connections, and\
    \ for the purposes of this\n   protocol it SHOULD act as if that address were\
    \ its only address.\n"
- title: 4.3.3.  NATs and Routed Private Networks
  contents:
  - "4.3.3.  NATs and Routed Private Networks\n   In some cases, a large network may\
    \ be subnetted.  Some sites may\n   install a NAT gateway and subnet the private\
    \ network.  Such\n   subnetting breaks this protocol because the router address\
    \ is not\n   necessarily the address of the device performing NAT.\n   Addressing\
    \ this problem is not a high priority.  Any site with the\n   resources to set\
    \ up such a configuration should have the resources to\n   add manual mappings\
    \ or attain a range of globally unique addresses.\n   Not all NATs will support\
    \ this protocol.  In the case where a client\n   is run behind a NAT that does\
    \ not support this protocol, the software\n   relying on the functionality of\
    \ this protocol may be unusable.\n"
- title: 4.3.4.  Communication between Hosts behind the Same NAT
  contents:
  - "4.3.4.  Communication between Hosts behind the Same NAT\n   NAT gateways supporting\
    \ NAT-PMP should also implement \"hairpin\n   translation\".  Hairpin translation\
    \ means supporting communication\n   between two local clients being served by\
    \ the same NAT gateway.\n   Suppose device A is listening on internal address\
    \ and port\n   10.0.0.2:80 for incoming connections.  Using NAT-PMP, device A\
    \ has\n   obtained a mapping to external address and port x.x.x.x:80, and has\n\
    \   recorded this external address and port in a public directory of some\n  \
    \ kind.  For example, it could have created a DNS SRV record containing\n   this\
    \ information, and recorded it, using DNS Dynamic Update\n   [RFC3007], in a publicly\
    \ accessible DNS server.  Suppose then that\n   device B, behind the same NAT\
    \ gateway as device A, but unknowing or\n   uncaring of this fact, retrieves device\
    \ A's DNS SRV record and\n   attempts to open a TCP connection to x.x.x.x:80.\
    \  The outgoing\n   packets addressed to this public Internet address will be\
    \ sent to the\n   NAT gateway for translation and forwarding.  Having translated\
    \ the\n   source address and port number on the outgoing packet, the NAT\n   gateway\
    \ needs to be smart enough to recognize that the destination\n   address is in\
    \ fact itself, and then feed this packet back into its\n   packet reception engine,\
    \ to perform the destination port mapping\n   lookup to translate and forward\
    \ this packet to device A at address\n   and port 10.0.0.2:80.\n"
- title: 4.3.5.  Non-UDP/TCP Transport Traffic
  contents:
  - "4.3.5.  Non-UDP/TCP Transport Traffic\n   Any communication over transport protocols\
    \ other than TCP and UDP\n   will not be served by this protocol.  Examples are\
    \ Generic Routing\n   Encapsulation (GRE), Authentication Header (AH), and Encapsulating\n\
    \   Security Payload (ESP).\n"
- title: 4.4.  Long-Term Solution
  contents:
  - "4.4.  Long-Term Solution\n   As IPv6 is deployed, clients of this protocol supporting\
    \ IPv6 will be\n   able to bypass this protocol and the NAT when communicating\
    \ with\n   other IPv6 devices.  In order to ensure this transition, any client\n\
    \   implementing this protocol SHOULD also implement IPv6 and use this\n   solution\
    \ only when IPv6 is not available to both peers.\n"
- title: 4.5.  Existing Deployed NATs
  contents:
  - "4.5.  Existing Deployed NATs\n   Existing deployed NATs will not support this\
    \ protocol.  This protocol\n   will only work with NATs that are upgraded to support\
    \ it.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   As discussed in Section 3.2, \"Determining the\
    \ External Address\", only\n   a client on the internal side of the NAT may create\
    \ port mappings,\n   and it may do so only on its own behalf.  By using IP address\n\
    \   spoofing, it's possible for one client to delete the port mappings of\n  \
    \ another client.  It's also possible for one client to create port\n   mappings\
    \ on behalf of another client.  In cases where this is a\n   concern, it can be\
    \ dealt with using IPsec [RFC4301].\n   The multicast announcements described\
    \ in Section 3.2.1, \"Announcing\n   Address Changes\", could be spoofed, facilitating\
    \ a denial-of-service\n   attack.  This makes NAT-PMP unsuitable for use on LANs\
    \ with large\n   numbers of hosts where one or more of the hosts may be untrustworthy.\n\
    \   Another concern is that rogue software running on a local host could\n   create\
    \ port mappings for unsuspecting hosts, thereby rendering them\n   vulnerable\
    \ to external attack.  However, it's not clear how realistic\n   this threat model\
    \ is, since rogue software on a local host could\n   attack such unsuspecting\
    \ hosts directly itself, without resorting to\n   such a convoluted indirect technique.\
    \  This concern is also a little\n   misguided because it is based on the assumption\
    \ that a NAT gateway\n   and a firewall are the same thing, which they are not.\n\
    \   Some people view the property of NATs blocking inbound connections as\n  \
    \ a security benefit that is undermined by this protocol.  The authors\n   of\
    \ this document have a different point of view.  In the days before\n   NAT became\
    \ prevalent, all hosts had unique public IP addresses, and\n   had unhindered\
    \ ability to communicate with any other host on the\n   Internet (a configuration\
    \ that is still surprisingly common).  Using\n   NAT breaks this unhindered connectivity,\
    \ relegating hosts to second-\n   class status, unable to receive inbound connections.\
    \  This protocol\n   goes some way to partially reverse that damage.  The purpose\
    \ of a NAT\n   gateway should be to allow several hosts to share a single address,\n\
    \   not to simultaneously impede those host's ability to communicate\n   freely.\
    \  Security is most properly provided by end-to-end\n   cryptographic security,\
    \ and/or by explicit firewall functionality, as\n   appropriate.  Blocking of\
    \ certain connections should occur only as a\n   result of explicit and intentional\
    \ firewall policy, not as an\n   accidental side effect of some other technology.\n\
    \   However, since many users do have an expectation that their NAT\n   gateways\
    \ can function as a kind of firewall, any NAT gateway\n   implementing this protocol\
    \ SHOULD have an administrative mechanism to\n   disable it, thereby restoring\
    \ the pre-NAT-PMP behavior.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   UDP ports 5350 and 5351 have been assigned for use\
    \ by NAT-PMP, and\n   subsequently by its successor, Port Control Protocol [RFC6887].\n\
    \   No further IANA services are required by this document.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   The concepts described in this document have been explored,\n\
    \   developed, and implemented with help from Mark Baugher, Bob Bradley,\n   Josh\
    \ Graessley, Rory McGuire, Rob Newberry, Roger Pantos, John\n   Saxton, Kiren\
    \ Sekar, Jessica Vazquez, and James Woodyatt.\n   Special credit goes to Mike\
    \ Bell, the Apple Vice President who\n   recognized the need for a clean, elegant,\
    \ reliable Port Mapping\n   Protocol, and made the decision early on that Apple's\
    \ AirPort base\n   stations would support NAT-PMP.\n"
- title: 8.  Deployment History
  contents:
  - "8.  Deployment History\n   In August 2004, NAT-PMP client software first became\
    \ available to the\n   public through Apple's Darwin Open Source code.  In April\
    \ 2005,\n   NAT-PMP implementations began shipping to end users with the launch\n\
    \   of Mac OS X 10.4 Tiger and Bonjour for Windows 1.0, and in June 2005\n   the\
    \ protocol was first publicly documented in the original draft\n   version of\
    \ this document.\n   The NAT-PMP client in Mac OS X 10.4 Tiger and Bonjour for\
    \ Windows\n   exists as part of the mDNSResponder/mdnsd system service.  When\
    \ a\n   client advertises a service using Wide Area Bonjour [RFC6763], and\n \
    \  the machine is behind a NAT-PMP-capable NAT gateway, and the machine\n   is\
    \ so configured, the mDNSResponder system service automatically uses\n   NAT-PMP\
    \ to set up an inbound port mapping, and then records the\n   external IPv4 address\
    \ and port in the global DNS.  Existing client\n   software using the Bonjour\
    \ programming APIs [Bonjour] got this new\n   NAT traversal functionality automatically.\
    \  The logic behind this\n   decision was that if client software publishes its\
    \ information into\n   the global DNS via Wide Area Bonjour service advertising,\
    \ then it's\n   reasonable to infer an expectation that this information should\n\
    \   actually be usable by the peers retrieving it.  Generally speaking,\n   recording\
    \ a private IPv4 address like 10.0.0.2 in the public DNS is\n   likely to be pointless\
    \ because that address is not reachable from\n   clients on the other side of\
    \ the NAT gateway.  In the case of a home\n   user with a single computer directly\
    \ connected to their Cable or DSL\n   modem, with a single global IPv4 address\
    \ and no NAT gateway (a common\n   configuration at that time), publishing the\
    \ machine's global IPv4\n   address into the global DNS is useful, because that\
    \ IPv4 address is\n   globally reachable.  In contrast, a home user using a NAT\
    \ gateway to\n   share a single global IPv4 address between several computers\
    \ loses\n   this ability to receive inbound connections.  This breaks many peer-\n\
    \   to-peer collaborative applications, like the multi-user text editor\n   SubEthaEdit\
    \ [SEE].  For many users, moving from one computer with a\n   global IPv4 address,\
    \ to two computers using NAT to share a single\n   global IPv4 address, loss of\
    \ inbound reachability was an unwanted\n   side effect of using NAT for address\
    \ sharing.  Automatically creating\n   the necessary inbound port mappings helped\
    \ remedy this unwanted side\n   effect of NAT.\n   The server side of the NAT-PMP\
    \ protocol is implemented in Apple's\n   AirPort Extreme, AirPort Express, and\
    \ Time Capsule wireless base\n   stations, and in the Internet Sharing feature\
    \ of Mac OS X 10.4 and\n   later.  Some third-party NAT vendors, such as Peplink,\
    \ also offer\n   NAT-PMP in their products.\n   In Mac OS X 10.4 Tiger, the NAT-PMP\
    \ client was invoked automatically\n   as a side effect of clients requesting\
    \ Wide Area Bonjour service\n   registrations.  Using NAT-PMP without an associated\
    \ Wide Area Bonjour\n   service registration required use of a third-party client\
    \ library.\n   In October 2007, Mac OS X 10.5 Leopard added the \"DNSServiceNATPort-\n\
    \   MappingCreate\" API, which made NAT-PMP client functionality directly\n  \
    \ available, so software could use it with other directory and\n   rendezvous\
    \ mechanisms in addition to Wide Area Bonjour DNS Updates.\n   In 2013, NAT-PMP\
    \ was superseded by the IETF Standards Track Port\n   Control Protocol [RFC6887].\
    \  PCP builds on NAT-PMP and uses a\n   compatible packet format, and adds a number\
    \ of significant\n   enhancements, including IPv6 support, management of outbound\n\
    \   mappings, management of firewall rules, full compatibility with\n   large-scale\
    \ NATs with a pool of external addresses, error lifetimes,\n   and an extension\
    \ mechanism to enable future enhancements.\n"
- title: 9.  Noteworthy Features of NAT Port Mapping Protocol and PCP
  contents:
  - "9.  Noteworthy Features of NAT Port Mapping Protocol and PCP\n   Some readers\
    \ have asked how NAT-PMP and PCP compare to other similar\n   solutions, particularly\
    \ the UPnP Forum's Internet Gateway Device\n   (IGD) Device Control Protocol [IGD].\n\
    \   The answer is that although the Universal Plug and Play (UPnP) IGD\n   protocol\
    \ is often used as a way for client devices to create port\n   mappings programmatically,\
    \ it's not ideal for that task.  Whereas\n   NAT-PMP was explicitly designed to\
    \ be used primarily by software\n   entities managing their own port mappings,\
    \ UPnP IGD is more tailored\n   towards being used by humans configuring all the\
    \ settings of their\n   gateway using some GUI tool.  This difference in emphasis\
    \ leads to\n   protocol differences.  For example, while it is reasonable and\n\
    \   sensible to require software entities to renew their mappings\n   periodically\
    \ to prove that they are still there (like a device\n   renewing its DHCP address\
    \ lease), it would be unreasonable to require\n   the same thing of a human user.\
    \  When a human user configures their\n   gateway, they expect it to stay configured\
    \ that way until they decide\n   to change it.  If they configure a port mapping,\
    \ they expect it to\n   stay configured until they decide to delete it.\n   Because\
    \ of this focus on being a general administration protocol for\n   all aspects\
    \ of home gateway configuration, UPnP IGD is a large and\n   complicated collection\
    \ of protocols (360 pages of specification\n   spread over 13 separate documents,\
    \ not counting supporting protocol\n   specifications like Simple Service Discovery\
    \ Protocol (SSDP) and\n   Extensible Markup Language (XML)).  While it may be\
    \ a fine way for\n   human users to configure their home gateways, it is not especially\n\
    \   suited to the task of programmatically creating dynamic port\n   mappings.\n\
    \   The requirements for a good port mapping protocol, requirements that\n   are\
    \ met by NAT-PMP, are outlined below.\n"
- title: 9.1.  Simplicity
  contents:
  - "9.1.  Simplicity\n   Many home gateways, and many of the devices that connect\
    \ to them, are\n   small, low-cost devices, with limited RAM, flash memory, and\
    \ CPU\n   resources.  Protocols they use should be considerate of this,\n   supporting\
    \ a small number of simple operations that can be\n   implemented easily with\
    \ a small amount of code.  A quick comparison,\n   based on page count of the\
    \ respective documents alone, suggests that\n   NAT-PMP is at least ten times\
    \ simpler than UPnP IGD.\n"
- title: 9.2.  Focused Scope
  contents:
  - "9.2.  Focused Scope\n   The more things a protocol can do, the more chance there\
    \ is that\n   something it does could be exploited for malicious purposes.  NAT-PMP\n\
    \   is tightly focused on the specific task of creating port mappings.\n   Were\
    \ the protocol to be misused in some way, this helps limit the\n   scope of what\
    \ mischief could be performed using the protocol.\n   Because UPnP IGD allows\
    \ control over all home gateway configuration\n   settings, the potential for\
    \ mischief is far greater.  For example, a\n   UPnP IGD home gateway allows messages\
    \ that tell it to change the DNS\n   server addresses that it sends to clients\
    \ in its DHCP packets.  Using\n   this mechanism, a single item of malicious web\
    \ content (e.g., a rogue\n   Flash banner advert on a web page) can make a persistent\
    \ change to\n   the home gateway's configuration without the user's knowledge,\
    \ such\n   that all future DNS requests by all local clients will be sent to a\n\
    \   rogue DNS server.  This allows criminals to perform a variety of\n   mischief,\
    \ such as hijacking connections to bank web sites and\n   redirecting them to\
    \ the criminals' web servers instead [VU347812].\n"
- title: 9.3.  Efficiency
  contents:
  - "9.3.  Efficiency\n   In addition to low-cost home gateways, many of the clients\
    \ will also\n   be similarly constrained low-cost devices with limited RAM resources.\n\
    \   When implementing a NAT-PMP client on a constrained device, it's\n   beneficial\
    \ to have well-defined bounds on RAM requirements that are\n   fixed and known\
    \ in advance.  For example, when requesting the\n   gateway's external IPv4 address,\
    \ a NAT-PMP client on Ethernet knows\n   that to receive the reply it will require\
    \ 14 bytes for the Ethernet\n   header, 20 bytes for the IPv4 header, 8 bytes\
    \ for the UDP header, and\n   12 bytes for the NAT-PMP payload, making a total\
    \ of 54 bytes.\n   In contrast, UPnP IGD uses an XML reply of unbounded size.\
    \  It is not\n   uncommon for a UPnP IGD device to return an XML document 4000\
    \ to 8000\n   bytes in size to communicate its 4-byte external IPv4 address, and\n\
    \   the protocol specification places no upper bound on how large the XML\n  \
    \ response may be, so there's nothing to stop the reply being even\n   larger.\
    \  This means that developers of UPnP client devices can only\n   guess at how\
    \ much memory they may need to receive the XML reply.\n   Operational experience\
    \ suggests that 10,000 bytes is usually enough\n   for most UPnP IGD home gateways\
    \ today, but that's no guarantee that\n   some future UPnP IGD home gateway might\
    \ not return a perfectly legal\n   XML reply much larger than that.\n   In addition,\
    \ because the XML reply is too large to fit in a single\n   UDP packet, UPnP IGD\
    \ has to use a TCP connection, thereby adding the\n   overhead of TCP connection\
    \ setup and teardown.\n   The process of discovering a UPnP IGD home gateway's\
    \ external IPv4\n   address consists of:\n   o SSDP transaction to discover the\
    \ TCP port to use, and the \"URL\" of\n     the XML document to fetch from the\
    \ gateway.  Following the SSDP\n     specification, this is 3 multicast requests,\
    \ eliciting 9 unicast\n     responses.\n   o HTTP \"GET\" request to get the device\
    \ description.  Typically, 16\n     packets: 3 for TCP connection setup, 9 packets\
    \ of data exchange,\n     and a 4-packet FIN-ACK-FIN-ACK sequence to close the\
    \ connection.\n   o HTTP \"POST\" to request the external IPv4 address.  Typically,\
    \ 14\n     packets: 3 for TCP connection setup, 7 packets of data exchange,\n\
    \     and a 4-packet FIN-ACK-FIN-ACK sequence to close the connection.\n   To\
    \ retrieve the external IPv4 address NAT-PMP takes a 2-packet UDP\n   exchange\
    \ (44-byte request, 54-byte response); the same thing using\n   UPnP IGD takes\
    \ 42 packets and thousands of bytes.\n   Similarly, UPnP IGD's HTTP \"POST\" request\
    \ for a port mapping is\n   typically a 14-packet exchange, compared with NAT-PMP's\
    \ 2-packet UDP\n   exchange.\n"
- title: 9.4.  Atomic Allocation Operations
  contents:
  - "9.4.  Atomic Allocation Operations\n   Some of the useful properties of NAT-PMP\
    \ were inspired by DHCP, a\n   reliable and successful protocol.  For example,\
    \ DHCP allows a client\n   to request a desired IP address, but if that address\
    \ is already in\n   use the DHCP server will instead assign some other available\
    \ address.\n   Correspondingly, NAT-PMP allows a client to request a desired\n\
    \   external port, and if that external port is already in use by some\n   other\
    \ client, the NAT-PMP server will instead assign some other\n   available external\
    \ port.\n   UPnP IGD does not do this.  If a UPnP IGD client requests an external\n\
    \   port that has already been allocated, then one of two things happens.\n  \
    \ Some UPnP IGD home gateways just silently overwrite the old mapping\n   with\
    \ the new one, causing the previous client to lose connectivity.\n   If the previous\
    \ client renews its port mapping, then it in turn\n   overwrites the new mapping,\
    \ and the two clients fight over the same\n   external port indefinitely, neither\
    \ achieving reliable connectivity.\n   Other IGD home gateways return a \"Conflict\"\
    \ error if the port is\n   already in use, which does at least tell the client\
    \ what happened,\n   but doesn't tell the client what to do.  Instead of the NAT\
    \ gateway\n   (which does know which ports are available) assigning one to the\n\
    \   client, the NAT gateway makes the client (which doesn't know) keep\n   guessing\
    \ until it gets lucky.  This problem remains mild as long as\n   not many clients\
    \ are using UPnP IGD, but gets progressively worse as\n   the number of clients\
    \ on the network requesting port mappings goes\n   up.  In addition, UPnP IGD\
    \ works particularly badly in conjunction\n   with the emerging policy of allocating\
    \ pre-assigned port ranges to\n   each client.  If a client is assigned TCP port\
    \ range 63488-64511, and\n   the UPnP IGD client requests TCP port 80, trying\
    \ successive\n   incrementing ports until it succeeds, then the UPnP IGD client\
    \ will\n   have to issue 63,409 requests before it succeeds.\n"
- title: 9.5.  Garbage Collection
  contents:
  - "9.5.  Garbage Collection\n   In any system that operates for a long period of\
    \ time (as a home\n   gateway should), it is important that garbage data does\
    \ not\n   accumulate indefinitely until the system runs out of memory and\n  \
    \ fails.\n   Similar to how DHCP leases an IP address to a client for a finite\n\
    \   length of time, NAT-PMP leases an external port to a client for a\n   finite\
    \ length of time.  The NAT-PMP client must renew the port\n   mapping before it\
    \ expires, or, like an unrenewed DHCP address, it\n   will be reclaimed.  If a\
    \ laptop computer is abruptly disconnected\n   from the network without the opportunity\
    \ to delete its port mappings,\n   the NAT gateway will reclaim those mappings\
    \ when they are not\n   renewed.\n   In principle, UPnP IGD should allow clients\
    \ to specify a lifetime on\n   port mappings.  However, a Google search for \"\
    UPnP NewLeaseDuration\"\n   shows that in practice pretty much every client uses\n\
    \   \"<NewLeaseDuration>0</NewLeaseDuration>\" to request an infinite\n   lease,\
    \ and the protocol has no way for the NAT gateway to decline\n   that infinite\
    \ lease request and require the client to renew it at\n   reasonable intervals.\
    \  Furthermore, anecdotal evidence is that if the\n   client requests a lease\
    \ other than zero, there are IGD home gateways\n   that will ignore the request,\
    \ fail in other ways, or even crash\n   completely.  As a client implementer then,\
    \ you would be well advised\n   not to attempt to request a lease other than zero,\
    \ unless you want to\n   suffer the support costs and bad publicity of lots of\
    \ people\n   complaining that your device brought down their entire network.\n\
    \   Because none of the early UPnP IGD clients requested port mapping\n   leases,\
    \ many UPnP IGD home gateway vendors never tested that\n   functionality, and\
    \ got away with shipping home gateways where that\n   functionality was buggy\
    \ or nonexistent.  Because there are so many\n   buggy UPnP IGD home gateways\
    \ already deployed, client writers wisely\n   stick to the well-trodden path of\
    \ only requesting infinite leases.\n   Because there are now few (if any) clients\
    \ attempting to request non-\n   zero leases, home gateway vendors have little\
    \ incentive to expend\n   resources implementing a feature no one uses.\n   This\
    \ unfortunate consequence of the way UPnP IGD was developed and\n   deployed means\
    \ that in practice it has no usable port mapping lease\n   facility today, and\
    \ therefore when run for a long period of time UPnP\n   IGD home gateways have\
    \ no good way to avoid accumulating an unbounded\n   number of stale port mappings.\n"
- title: 9.6.  State Change Announcements
  contents:
  - "9.6.  State Change Announcements\n   When using DHCP on the external interface,\
    \ as is the norm for home\n   gateways, there is no guarantee that a UPnP IGD\
    \ home gateway's\n   external IPv4 address will remain unchanged.  Indeed, some\
    \ ISPs\n   change their customer's IPv4 address every 24 hours (possibly in an\n\
    \   effort to make it harder for their customers to \"run a server\" at\n   home).\
    \  What this means is that if the home gateway's external IPv4\n   address changes,\
    \ it needs to inform its clients, so that they can\n   make any necessary updates\
    \ to global directory information (e.g.,\n   performing a Dynamic DNS update to\
    \ update their address record).\n   When a NAT-PMP gateway's external IPv4 address\
    \ changes, it broadcasts\n   announcement packets to inform clients of this. \
    \ UPnP IGD does not.\n"
- title: 9.7.  Soft State Recovery
  contents:
  - "9.7.  Soft State Recovery\n   When run for a long enough period of time, any\
    \ network will have\n   devices that fail, get rebooted, suffer power outages,\
    \ or lose state\n   for other reasons.  A home gateway that runs for long enough\
    \ is\n   likely to suffer some such incident eventually.  After losing state,\n\
    \   it has no record of the port mappings it created, and clients suffer\n   a\
    \ consequent loss of connectivity.\n   To handle this case, NAT-PMP has the \"\
    Seconds Since Start of Epoch\"\n   mechanism.  After a reboot or other loss of\
    \ state, a NAT-PMP gateway\n   broadcasts announcement packets giving its external\
    \ IPv4 address,\n   with the Seconds Since Start of Epoch field reset to begin\
    \ counting\n   from zero again.  When a NAT-PMP client observes packets from its\n\
    \   NAT-PMP gateway where the gateway's notion of time has apparently\n   gone\
    \ backwards compared to the client's, the client knows the gateway\n   has probably\
    \ lost state, and immediately recreates its mappings to\n   restore connectivity.\n\
    \   UPnP IGD has no equivalent mechanism.\n"
- title: 9.8.  On-Path NAT Discovery
  contents:
  - "9.8.  On-Path NAT Discovery\n   For any given host, it is only useful to request\
    \ NAT port mappings in\n   the NAT gateway through which that host's packets are\
    \ flowing.  A NAT\n   port mapping is a request for packets to be translated in\
    \ a certain\n   way; the NAT gateway can only perform that translation if it's\n\
    \   actually forwarding inbound and outbound packets for that host.\n   This is\
    \ why NAT-PMP sends its requests to the host's default router,\n   since this\
    \ is the device that is forwarding (and possibly\n   translating) inbound and\
    \ outbound packets for that host.  (In a\n   larger network with multiple hops\
    \ between a host and its NAT gateway,\n   some other mechanism would need to be\
    \ used to discover the correct\n   on-path NAT for a host; this is possible, but\
    \ outside the scope of\n   this document.)\n   In contrast, UPnP IGD does not\
    \ limit itself to using only on-path\n   NATs.  UPnP IGD uses a multicast SSDP\
    \ query, and uses any device it\n   finds on the local network claiming UPnP IGD\
    \ capability, regardless\n   of whether any inbound or outbound traffic is actually\
    \ flowing\n   through that device.  Over the past few years this led to many bug\n\
    \   reports being sent to Apple with the general form: \"Port Mapping\n   doesn't\
    \ work on my Mac and that's a bug because everything else on my\n   network says\
    \ UPnP IGD is working fine.\" Upon investigation it always\n   turned out that:\
    \ (i) these people had NAT gateways that either didn't\n   support port mapping\
    \ requests, or had that capability disabled, and\n   (ii) for some reason they\
    \ also had some other old NAT device still\n   connected to their network, and\
    \ those other NAT devices were\n   advertising UPnP IGD capability, even though\
    \ they were not the active\n   NAT gateway for the network.  This led to UPnP\
    \ IGD clients falsely\n   reporting that they were \"working fine\", and only\
    \ the Mac correctly\n   reporting that it was unable to make any useful port mappings.\
    \  In\n   many cases the people reporting this \"bug\" had devices like game\n\
    \   consoles on their home network that for many years had been reporting\n  \
    \ that UPnP IGD was \"working fine\", yet during those years they had\n   never\
    \ once successfully received any inbound network packet or\n   connection.  The\
    \ irony is that, for these people who were reporting\n   bugs to Apple, UPnP IGD\
    \ \"working fine\" had been indistinguishable\n   from UPnP IGD doing nothing\
    \ useful at all.  It was only when Back to\n   My Mac [RFC6281] started reporting\
    \ that it was unable to make any\n   functional port mappings that these people\
    \ discovered they'd never\n   had any working port mappings on their NAT gateway.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC1918]  Rekhter, Y., Moskowitz, B., Karrenberg,\
    \ D., de Groot, G.,\n              and E. Lear, \"Address Allocation for Private\
    \ Internets\",\n              BCP 5, RFC 1918, February 1996.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [Bonjour]  Apple \"Bonjour\" <http://developer.apple.com/bonjour/>.\n\
    \   [ETEAISD]  J. Saltzer, D. Reed and D. Clark: \"End-to-end arguments in\n \
    \             system design\", ACM Trans. Comp. Sys., 2(4):277-88,\n         \
    \     November 1984.\n   [IGD]      UPnP Standards \"Internet Gateway Device (IGD)\
    \ Standardized\n              Device Control Protocol V 1.0\", November 2001,\n\
    \              <http://www.upnp.org/standardizeddcps/igd.asp>.\n   [RFC2131] \
    \ Droms, R., \"Dynamic Host Configuration Protocol\", RFC\n              2131,\
    \ March 1997.\n   [RFC2663]  Srisuresh, P. and M. Holdrege, \"IP Network Address\n\
    \              Translator (NAT) Terminology and Considerations\", RFC\n      \
    \        2663, August 1999.\n   [RFC3007]  Wellington, B., \"Secure Domain Name\
    \ System (DNS) Dynamic\n              Update\", RFC 3007, November 2000.\n   [RFC3022]\
    \  Srisuresh, P. and K. Egevang, \"Traditional IP Network\n              Address\
    \ Translator (Traditional NAT)\", RFC 3022, January\n              2001.\n   [RFC3424]\
    \  Daigle, L., Ed., and IAB, \"IAB Considerations for\n              UNilateral\
    \ Self-Address Fixing (UNSAF) Across Network\n              Address Translation\"\
    , RFC 3424, November 2002.\n   [RFC4301]  Kent, S. and K. Seo, \"Security Architecture\
    \ for the\n              Internet Protocol\", RFC 4301, December 2005.\n   [RFC6281]\
    \  Cheshire, S., Zhu, Z., Wakikawa, R., and L. Zhang,\n              \"Understanding\
    \ Apple's Back to My Mac (BTMM) Service\", RFC\n              6281, June 2011.\n\
    \   [RFC6763]  Cheshire, S. and M. Krochmal, \"DNS-Based Service\n           \
    \   Discovery\", RFC 6763, February 2013.\n   [RFC6887]  Wing, D., Ed., Cheshire,\
    \ S., Boucadair, M., Penno, R., and\n              P. Selkirk, \"Port Control\
    \ Protocol (PCP)\", RFC 6887, April\n              2013.\n   [SEE]      SubEthaEdit,\
    \ <http://www.codingmonkeys.de/subethaedit/>.\n   [VU347812] United States Computer\
    \ Emergency Readiness Team\n              Vulnerability Note VU#347812,\n    \
    \          <http://www.kb.cert.org/vuls/id/347812>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Stuart Cheshire\n   Apple Inc.\n   1 Infinite Loop\n \
    \  Cupertino, CA 95014\n   USA\n   EMail: cheshire@apple.com\n   Marc Krochmal\n\
    \   Apple Inc.\n   1 Infinite Loop\n   Cupertino, CA 95014\n   USA\n   EMail:\
    \ marc@apple.com\n"
