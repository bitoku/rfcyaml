- title: __initial_text__
  contents:
  - ''
- title: Internet Architecture Board (IAB)                              D. Thaler
  contents:
  - "Internet Architecture Board (IAB)                              D. Thaler\n  \
    \                   Reflections on Host Firewalls\n"
- title: Abstract
  contents:
  - "Abstract\n   In today's Internet, the need for firewalls is generally accepted\
    \ in\n   the industry, and indeed firewalls are widely deployed in practice.\n\
    \   Unlike traditional firewalls that protect network links, host\n   firewalls\
    \ run in end-user systems.  Often the result is that software\n   may be running\
    \ and potentially consuming resources, but then\n   communication is blocked by\
    \ a host firewall.  It's taken for granted\n   that this end state is either desirable\
    \ or the best that can be\n   achieved in practice, rather than (for example)\
    \ an end state where\n   the relevant software is not running or is running in\
    \ a way that\n   would not result in unwanted communication.  In this document,\
    \ we\n   explore the issues behind these assumptions and provide suggestions\n\
    \   on improving the architecture going forward.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Architecture Board (IAB)\n   and represents information that\
    \ the IAB has deemed valuable to\n   provide for permanent record.  It represents\
    \ the consensus of the\n   Internet Architecture Board (IAB).  Documents approved\
    \ for\n   publication by the IAB are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7288.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Terminology . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   2.  Firewall Rules  . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   3.  Category 1: Attack Surface Reduction  . . . . . . . . . .\
    \ . .   6\n     3.1.  Discussion of Approaches  . . . . . . . . . . . . . . .\
    \ .   7\n       3.1.1.  Fix the Software  . . . . . . . . . . . . . . . . . .\
    \   7\n       3.1.2.  Don't Use the Software  . . . . . . . . . . . . . . .  \
    \ 8\n       3.1.3.  Run the Software behind a Host Firewall . . . . . . .   8\n\
    \   4.  Category 2: Security Policy . . . . . . . . . . . . . . . . .   9\n  \
    \   4.1.  Discussion of Approaches  . . . . . . . . . . . . . . . .   9\n    \
    \   4.1.1.  Security Policies in Applications . . . . . . . . . .   9\n      \
    \ 4.1.2.  Security Policies in Host Firewalls . . . . . . . . .   9\n       4.1.3.\
    \  Security Policies in a Service  . . . . . . . . . . .  10\n   5.  Stealth Mode\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  11\n   6.  Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .  11\n   7.  Acknowledgements  . . . .\
    \ . . . . . . . . . . . . . . . . . .  11\n   8.  IAB Members at the Time of Approval\
    \ . . . . . . . . . . . . .  12\n   9.  Informative References  . . . . . . .\
    \ . . . . . . . . . . . .  12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   [BLOCK-FILTER] discusses the issue of blocking or filtering\
    \ abusive\n   or objectionable content and communications, and the effects on\
    \ the\n   overall Internet architecture.  This document complements that\n   discussion\
    \ by focusing on the architectural effects of host firewalls\n   on hosts and\
    \ applications.\n   \"Behavior of and Requirements for Internet Firewalls\" [RFC2979]\n\
    \   provides an introduction to firewalls and the requirement for\n   transparency\
    \ in particular, stating:\n      The introduction of a firewall and any associated\
    \ tunneling or\n      access negotiation facilities MUST NOT cause unintended\
    \ failures\n      of legitimate and standards-compliant usage that would work\
    \ were\n      the firewall not present.\n   Many firewalls today do not follow\
    \ that guidance, such as by blocking\n   traffic containing IP options or IPv6\
    \ extension headers (see\n   [RFC7045] for more discussion).\n   In Section 2.1\
    \ of \"Reflections on Internet Transparency\" [RFC4924],\n   the IAB provided\
    \ additional thoughts on firewalls and their impact on\n   the Internet architecture,\
    \ including issues around disclosure\n   obligations and complexity as applications\
    \ evolve to circumvent\n   firewalls.  This document extends that discussion with\
    \ additional\n   considerations.\n   Traditionally, firewalls have been about\
    \ arming customers to protect\n   against bugs in applications and services. \
    \ This document discusses a\n   number of fundamental questions, such as who a\
    \ firewall is meant to\n   protect from what.  It does so primarily, though not\
    \ exclusively,\n   from an end system perspective with a focus on host firewalls\
    \ in\n   particular.\n   While the Internet Security Glossary [RFC4949] contains\
    \ an extended\n   definition of a firewall, informally, most people would tend\
    \ to think\n   of a firewall as simply \"something that blocks unwanted traffic\"\
    \ (see\n   [RFC4948] for a discussion on many types of unwanted traffic).  A\n\
    \   fundamental question is, however: \"unwanted by whom?\"\n   Possible answers\
    \ include end users, application developers, network\n   administrators, host\
    \ administrators, firewall vendors, and content\n   providers.  We will exclude\
    \ by definition the sender of the traffic\n   in question, since the sender would\
    \ generally want such traffic to be\n   delivered.  Still, the other entities\
    \ have different, and often\n   conflicting, desires which means that a type of\
    \ traffic might be\n   wanted by one entity and unwanted by another entity.  Thus,\
    \ not\n   surprisingly, there exist various types of firewalls, and various\n\
    \   types of \"arms race\" as we will discuss in Section 4.1.2.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   In this document we distinguish between a \"host firewall\"\
    , which\n   simply intends to protect the single computer on which it runs, and\
    \ a\n   \"network firewall\", which is located in the network and intends to\n\
    \   protect the network and any hosts behind it.\n   A Network Address Translator\
    \ (NAT) is also often viewed, or even\n   marketed, as a type of network firewall;\
    \ Section 2.2 of [RFC4864]\n   addresses this misconception, but nevertheless\
    \ some of the same\n   observations in the present document may also apply to\
    \ NATs.\n   Sandboxed environments, such as those provided by browsers, can also\n\
    \   be thought of as a type of host firewall in the more general sense.\n   For\
    \ example, a cross-site check in a browser can be thought of as a\n   mechanism\
    \ to block unwanted outbound traffic per a \"same origin\n   policy\" where a\
    \ script can only communicate with the \"site\" from\n   which the script was\
    \ obtained, for some definition of site such as\n   the scheme and authority in\
    \ a URI.\n   The term \"application\" is used in this document generically to\
    \ apply\n   to any component that can receive traffic.  In this sense, it could\n\
    \   refer to a process running on a computer (including a system service)\n  \
    \ or even to a portion of a TCP/IP stack itself, such as a component\n   that\
    \ responds to pings.\n"
- title: 2.  Firewall Rules
  contents:
  - "2.  Firewall Rules\n   Desires for wanted or unwanted traffic can be expressed\
    \ in terms of\n   \"allow\" vs. \"block\" rules, with some way to resolve conflicting\n\
    \   rules.  Many firewalls are actually implemented in terms of such\n   rules.\
    \  Figure 1 shows some typical sources of such rules.\n       Source    | Consumer\
    \   | Consumer    | Enterprise | Enterprise\n                 | Scenario   | Scenario\
    \    | Scenario   | Scenario\n                 | Host       | Network     | Host\
    \       | Network\n                 | Firewall   | Firewall    | Firewall   |\
    \ Firewall\n       ----------+------------+-------------+------------+------------\n\
    \       End user  | Sometimes  | Sometimes   |            |\n                \
    \ | (as host   | (as network |            |\n                 | admin)     | admin)\
    \      |            |\n       ----------+------------+-------------+------------+------------\n\
    \       App       |   Yes      | Sometimes   |            |\n       developer\
    \ |            | (via        |            |\n                 |            | protocols)\
    \  |            |\n       ----------+------------+-------------+------------+------------\n\
    \       Network   |            | Sometimes   |            |   Yes\n       admin\
    \     |            |             |            |\n       ----------+------------+-------------+------------+------------\n\
    \       Host      | Sometimes  |             |    Yes     |\n       admin    \
    \ |            |             |            |\n       ----------+------------+-------------+------------+------------\n\
    \       Firewall  |   Yes      |    Yes      |    Yes     |   Yes\n       vendor\
    \    |            |             |            |\n       ----------+------------+-------------+------------+------------\n\
    \                Figure 1: Common Sources of Firewall Rules\n   Figure 1 assumes\
    \ that network firewalls are administered by network\n   administrators (if any),\
    \ and host firewalls are administered by host\n   administrators (if any).  A\
    \ firewall may also have rules provided by\n   the firewall vendor itself.\n \
    \  End users typically cannot directly provide rules to firewalls that\n   affect\
    \ other users, unless the end user is a host or network\n   administrator.  Application\
    \ developers can, however, provide such\n   rules to some firewalls, such as providing\
    \ rules at installation\n   time.  They can do this, for example, by invoking\
    \ an API provided by\n   a host firewall included with the operating system, or\
    \ by providing\n   metadata to the operating system for use by firewalls, or by\
    \ using a\n   protocol such as Universal Plug and Play (UPnP) [UPNPWANIP] or the\n\
    \   Port Control Protocol (PCP) [RFC6887] to communicate with a network\n   firewall\
    \ (see Section 4.1.3 for a longer discussion).\n   Firewall rules generally fall\
    \ into two categories:\n   1.  Attack surface reduction: Rules intended to prevent\
    \ an\n       application from doing things the developer does not want it to\n\
    \       do.\n   2.  Security policy: Rules intended to prevent an application\
    \ from\n       doing things the developer might want it to do, but an\n      \
    \ administrator does not.\n   A firewall is unnecessary if both categories are\
    \ empty.  We will now\n   treat each category in turn, focusing specifically on\
    \ host firewalls\n   (although some points might be equally applicable to network\n\
    \   firewalls).\n"
- title: '3.  Category 1: Attack Surface Reduction'
  contents:
  - "3.  Category 1: Attack Surface Reduction\n   As noted above, this category of\
    \ firewall rule typically attempts to\n   prevent applications from doing things\
    \ the developer did not intend.\n   One might ask whether this category of rules\
    \ is typically empty, and\n   the answer is that it is not, at present.  One reason\
    \ stems from\n   mitigating the threat of vulnerability exploitation by putting\
    \ a\n   security barrier in a separate process, isolated from the potentially\n\
    \   compromised process.  Furthermore, there is also some desire for a\n   \"\
    stealth mode\" (see Section 5 below).\n   Hence, typically a firewall will have\
    \ rules to block everything by\n   default.  A one-time, privileged, application-install\
    \ step adds one\n   or more Allow rules, and then normal (unprivileged) application\n\
    \   execution is then constrained by the resulting rules.\n   A second reason\
    \ this category of rules is non-empty is where they are\n   used as workarounds\
    \ for cases the application developer found too\n   onerous to implement.  These\
    \ cases include:\n   1.  Simple policies that the developer would want but that\
    \ are\n       difficult to implement.  One example might be a policy that an\n\
    \       application should communicate only within the local network\n       (e.g.,\
    \ a home or enterprise), but not be reachable from the\n       global Internet\
    \ or while the device is moved to some public\n       network such as a hotspot.\
    \  A second example might be the\n       reverse, i.e., a policy to communicate\
    \ over the Internet but not\n       with local entities.  The need for this category\
    \ would be reduced\n       by better platform support for such policies, making\
    \ them easier\n       for developers to implement and use.\n   2.  Complex policies\
    \ where the developer cannot possibly be aware of\n       specifics.  One example\
    \ might be a policy to communicate only\n       during, or only outside of, normal\
    \ business hours, where the\n       exact hours may vary by location and time\
    \ of year.  Another\n       example might be a policy to avoid communication over\
    \ links that\n       cost too much, where the definition of \"too much\" may vary\
    \ by\n       customer, and indeed, the end host and application might not even\n\
    \       be aware of the costs.  The need for this category would be\n       reduced\
    \ by better platform support for such policies, allowing\n       the application\
    \ to communicate through some simple API with some\n       other library or service\
    \ that can deal with the specifics.\n"
- title: 3.1.  Discussion of Approaches
  contents:
  - "3.1.  Discussion of Approaches\n   When running an application would result in\
    \ unwanted behavior,\n   customers have three choices, which we will discuss in\
    \ turn:\n   a.  fix (or get the developer to fix) the software,\n   b.  not use\
    \ the software, or\n   c.  let the software run, but then use a firewall to thwart\
    \ it and\n       prevent it from working in unwanted ways.\n"
- title: 3.1.1.  Fix the Software
  contents:
  - "3.1.1.  Fix the Software\n   Firewall vendors point out that one can more quickly\
    \ and reliably\n   update firewall rules than application software.  Indeed, some\n\
    \   applications might have no way to update them, and support for other\n   applications\
    \ might no longer be available (e.g., if the developers\n   are no longer around).\
    \  Most modern operating systems (and any\n   applications that come with them)\
    \ have automatic updates, as do some\n   independent applications.  But until\
    \ all applications have automatic\n   updates, and automatic updates are actually\
    \ used, it will still be\n   the case that firewall rules can be updated more\
    \ quickly than\n   software patches.  Furthermore, in some contexts (e.g., within\
    \ some\n   enterprises), a possibly lengthy retesting and recertification\n  \
    \ process must be employed before applications can be updated.\n   In short, mechanisms\
    \ to encourage and ease the use of secure\n   automatic software updates are important\
    \ and would greatly reduce\n   overall complexity.  Such mechanisms should allow\
    \ scheduling updates\n   at appropriate times, taking into account operational\
    \ considerations\n   such as dependencies, compatibility, testing and maintenance\
    \ windows.\n"
- title: 3.1.2.  Don't Use the Software
  contents:
  - "3.1.2.  Don't Use the Software\n   A key question to ask is whether the application\
    \ could still do\n   something useful when firewalled.  If the answer is yes,\
    \ then not\n   using the software is probably unrealistic.  For example, a game\
    \ with\n   both single-player and multi-player capabilities could still be\n \
    \  useful in single-player mode when firewalled.  If instead the answer\n   is\
    \ no, it is better to not allow the application to run in the first\n   place,\
    \ and some host firewalls can indeed block applications from\n   running.\n"
- title: 3.1.3.  Run the Software behind a Host Firewall
  contents:
  - "3.1.3.  Run the Software behind a Host Firewall\n   As noted earlier, one disadvantage\
    \ of this approach is that resources\n   still get consumed.  For example, the\
    \ application can still consume\n   memory, CPU, bandwidth (up to the point of\
    \ blockage), ports in the\n   transport layer protocol, and possibly other resources\
    \ depending on\n   the application, for operations that provide no benefit while\n\
    \   firewalled.\n   A second important disadvantage of this approach is the bad\
    \ user\n   experience.  Typically the application and the end-user won't know\n\
    \   why the application doesn't work.  A poorly designed application\n   might\
    \ not cope well and consume even more resources (e.g., retrying\n   an operation\
    \ that continually fails).\n   A third disadvantage is that it is common for a\
    \ firewall rule to\n   block more that is appropriate for attack surface reduction,\n\
    \   impacting protocol operation and even having adverse effects on other\n  \
    \ endpoints.  For example, some firewalls that cannot perform full deep\n   packet\
    \ inspection at line speed have adopted a block by default\n   approach to anything\
    \ they don't understand from the first few bytes;\n   this is very harmful to\
    \ innovation as it interferes with the ability\n   to deploy new protocols and\
    \ features.\n   As another example, blocking ICMP adversely affects path MTU\n\
    \   discovery which can cause problems for other entities (see [RFC4890]\n   and\
    \ Section 3.1.1 of [RFC2979] for further discussion).  This can\n   happen due\
    \ to lack of understanding all the details of application\n   behavior, or due\
    \ to accidental misconfiguration.  Section 2.1 of\n   [RFC5505] states, \"Anything\
    \ that can be configured can be\n   misconfigured,\" and discusses this in more\
    \ detail.\n   In short, it is important to make applications more aware of the\n\
    \   constraints of their environment, and hence better able to behave\n   well\
    \ when constrained.\n"
- title: '4.  Category 2: Security Policy'
  contents:
  - "4.  Category 2: Security Policy\n   As noted in Section 2, this category of firewall\
    \ rule typically\n   attempts to prevent an application from doing things an administrator\n\
    \   does not want them to do, even if the application developer did.\n   One might\
    \ ask whether this category of rules is typically empty, and\n   the answer varies\
    \ somewhat.  For enterprise-scenario firewalls, it is\n   almost never empty,\
    \ and hence the problems discussed in Section 3.1.3\n   can be common here too.\
    \  Similarly, for consumer-scenario firewalls,\n   it is generally not empty but\
    \ there are some notable exceptions.  For\n   example, for the host firewall in\
    \ some operation systems, this\n   category always starts empty and most users\
    \ never change this.\n"
- title: 4.1.  Discussion of Approaches
  contents:
  - "4.1.  Discussion of Approaches\n   Security policy can be implemented in any\
    \ of three places, which we\n   will discuss in turn: the application, a firewall,\
    \ or a library/\n   service that the application explicitly uses.\n"
- title: 4.1.1.  Security Policies in Applications
  contents:
  - "4.1.1.  Security Policies in Applications\n   In this option, each application\
    \ must implement support for\n   potentially complex security policies, along\
    \ with ways for\n   administrators to configure them.  Although the explicit interaction\n\
    \   with applications avoids the problems discussed in Section 3.1.3,\n   this\
    \ approach is impractical for a number of reasons.  First, the\n   complexity\
    \ makes it difficult to implement and is error-prone,\n   especially for application\
    \ developers whose primary expertise is not\n   networking.  Second, the potentially\
    \ large number of applications\n   (and application developers) results in an\
    \ inconsistent experience\n   that makes it difficult for an administrator to\
    \ manage common\n   policies across applications, thus driving up training and\n\
    \   operational costs.\n"
- title: 4.1.2.  Security Policies in Host Firewalls
  contents:
  - "4.1.2.  Security Policies in Host Firewalls\n   Putting security policies in\
    \ firewalls without explicit interaction\n   with the applications results in\
    \ the problems discussed in\n   Section 3.1.3.  In addition, this leads to \"\
    arms races\" where the\n   applications are incented to evolve to get around the\
    \ security\n   policies, since the desires of the end user or developer can conflict\n\
    \   with the desires of an administrator.  As stated in Section 2.1 of\n   [RFC4924]:\n\
    \      In practice, filtering intended to block or restrict application\n    \
    \  usage is difficult to successfully implement without customer\n      consent,\
    \ since over time developers will tend to re-engineer\n      filtered protocols\
    \ so as to avoid the filters.  Thus, over time,\n      filtering is likely to\
    \ result in interoperability issues or\n      unnecessary complexity.  These costs\
    \ come without the benefit of\n      effective filtering since many application\
    \ protocols began to use\n      HTTP as a transport protocol after application\
    \ developers observed\n      that firewalls allow HTTP traffic while dropping\
    \ packets for\n      unknown protocols.\n   Such arms races stem from inherent\
    \ tussles between the desires of\n   different entities.  For example, the tussle\
    \ between end-user desires\n   and administrator desires leads to an arms race\
    \ between firewalls and\n   deep packet inspection on the one hand, vs. the use\
    \ of obfuscation or\n   tunnels on the other.\n   Although such arms races are\
    \ often thought of in the context of\n   network firewalls, they also occur with\
    \ host firewalls.  It is,\n   however, generally easier for a host firewall to\
    \ overcome, since it\n   may be more practical for a host firewall to establish\
    \ some form of\n   trust between the policy-desiring entities, and have a trusted\n\
    \   arbiter.\n"
- title: 4.1.3.  Security Policies in a Service
  contents:
  - "4.1.3.  Security Policies in a Service\n   In this approach, applications use\
    \ a library or other external\n   service whereby the applications have explicit\
    \ knowledge of the\n   impact of the security policies in order to avoid the problems\
    \ in\n   Section 3.1.3, and in a sandboxed environment, this might be the\n  \
    \ application's only way to interact with the network.\n   Thus, in this opt-in\
    \ approach, applications provide a description of\n   the network access requested,\
    \ and the library/service can ensure that\n   applications and/or users are informed\
    \ in a way they can understand\n   and that administrators can craft policy that\
    \ affects the\n   applications.\n   This approach is very difficult to do in a\
    \ firewall-vendor-specific\n   library/service when there can be multiple firewall\
    \ implementations\n   (including ones in the middle of the network), since it\
    \ is usually\n   impractical for an application developer to know about and develop\n\
    \   for many different firewall APIs.  It is, however, possible to employ\n  \
    \ this approach with a firewall-vendor-agnostic library/service that\n   can communicate\
    \ with both applications and firewalls.  Thus,\n   application developers and\
    \ firewall developers can use a common\n   platform.\n   We observe that this\
    \ approach is very different from the classic\n   firewall approach.  It is, however\
    \ the approach used by some host\n   operating system firewalls, and it is also\
    \ the approach used by PCP\n   in the IETF.  As such, we encourage the deployment\
    \ and use of this\n   model.\n   Furthermore, while this approach lessens the\
    \ incentive for arms races\n   as discussed above, one important issue still remains.\
    \  Namely, there\n   is no standard mechanism today for a library/service to learn\
    \ complex\n   policies from the network.  Further work in this area is needed.\n"
- title: 5.  Stealth Mode
  contents:
  - "5.  Stealth Mode\n   There is often a desire to hide from address and port scans\
    \ on a\n   public network.  However, compliance to many RFCs requires responding\n\
    \   to various messages.  For example, TCP [RFC0793] compliance requires\n   sending\
    \ a RST in response to a SYN when there is no listener, and\n   ICMPv6 [RFC4443]\
    \ compliance requires sending an Echo Reply in\n   response to an Echo Request.\n\
    \   Firewall rules can allow such stealth without changing the statement\n   of\
    \ compliance of the basic protocols.  However, stealth mode could\n   instead\
    \ be implemented as a configurable option used by the\n   applications themselves.\
    \  For example, rather than a firewall rule to\n   drop a certain outbound message\
    \ after an application generates it,\n   fewer resources would be consumed if\
    \ the application knew not to\n   generate it in the first place.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   There is a common misconception that firewalls\
    \ protect users from\n   malware on their computer, when in fact firewalls protect\
    \ users from\n   buggy software.  There is some concern that firewalls give users\
    \ a\n   false sense of security; firewalls are not invulnerable and will not\n\
    \   prevent malware from running if the user allows it.\n   This document has\
    \ focused primarily on host firewalls.  For\n   additional discussion (focused\
    \ more on network firewalls) see\n   [RFC2979] and [BLOCK-FILTER].\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   Stuart Cheshire provided the motivation for this document\
    \ by asking\n   the thought-provoking question of why one would want to firewall\
    \ an\n   application rather than simply stop running it.  The ensuing\n   discussion,\
    \ and subsequent IAB tech chat in November 2011, led to\n   this document.  Dan\
    \ Simon, Stephen Bensley, Gerardo Diaz Cuellar,\n   Brian Carpenter, and Paul\
    \ Hoffman also provided helpful suggestions.\n"
- title: 8.  IAB Members at the Time of Approval
  contents:
  - "8.  IAB Members at the Time of Approval\n   Bernard Aboba\n   Jari Arkko\n  \
    \ Marc Blanchet\n   Ross Callon\n   Alissa Cooper\n   Joel Halpern\n   Russ Housley\n\
    \   Eliot Lear\n   Xing Li\n   Erik Nordmark\n   Andrew Sullivan\n   Dave Thaler\n\
    \   Hannes Tschofenig\n"
- title: 9.  Informative References
  contents:
  - "9.  Informative References\n   [BLOCK-FILTER]\n              Barnes, R., Cooper,\
    \ A., and O. Kolkman, \"Technical\n              Considerations for Internet Service\
    \ Blocking and\n              Filtering\", Work in Progress, January 2014.\n \
    \  [RFC0793]  Postel, J., \"Transmission Control Protocol\", STD 7, RFC\n    \
    \          793, September 1981.\n   [RFC2979]  Freed, N., \"Behavior of and Requirements\
    \ for Internet\n              Firewalls\", RFC 2979, October 2000.\n   [RFC4443]\
    \  Conta, A., Deering, S., and M. Gupta, \"Internet Control\n              Message\
    \ Protocol (ICMPv6) for the Internet Protocol\n              Version 6 (IPv6)\
    \ Specification\", RFC 4443, March 2006.\n   [RFC4864]  Van de Velde, G., Hain,\
    \ T., Droms, R., Carpenter, B., and\n              E. Klein, \"Local Network Protection\
    \ for IPv6\", RFC 4864,\n              May 2007.\n   [RFC4890]  Davies, E. and\
    \ J. Mohacsi, \"Recommendations for Filtering\n              ICMPv6 Messages in\
    \ Firewalls\", RFC 4890, May 2007.\n   [RFC4924]  Aboba, B. and E. Davies, \"\
    Reflections on Internet\n              Transparency\", RFC 4924, July 2007.\n\
    \   [RFC4948]  Andersson, L., Davies, E., and L. Zhang, \"Report from the\n  \
    \            IAB workshop on Unwanted Traffic March 9-10, 2006\", RFC\n      \
    \        4948, August 2007.\n   [RFC4949]  Shirey, R., \"Internet Security Glossary,\
    \ Version 2\", RFC\n              4949, August 2007.\n   [RFC5505]  Aboba, B.,\
    \ Thaler, D., Andersson, L., and S. Cheshire,\n              \"Principles of Internet\
    \ Host Configuration\", RFC 5505, May\n              2009.\n   [RFC6887]  Wing,\
    \ D., Cheshire, S., Boucadair, M., Penno, R., and P.\n              Selkirk, \"\
    Port Control Protocol (PCP)\", RFC 6887, April\n              2013.\n   [RFC7045]\
    \  Carpenter, B. and S. Jiang, \"Transmission and Processing\n              of\
    \ IPv6 Extension Headers\", RFC 7045, December 2013.\n   [UPNPWANIP]\n       \
    \       UPnP Forum, \"WANIPConnection:2 Service\", September 2010,\n         \
    \     <http://upnp.org/specs/gw/\n              UPnP-gw-WANIPConnection-v2-Service.pdf>.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Dave Thaler\n   Microsoft Corporation\n   One Microsoft\
    \ Way\n   Redmond, WA  98052\n   USA\n   Phone: +1 425 703 8835\n   EMail: dthaler@microsoft.com\n"
