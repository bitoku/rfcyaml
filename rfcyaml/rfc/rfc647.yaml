- title: __initial_text__
  contents:
  - "         A PROPOSED PROTOCOL FOR CONNECTING HOST COMPUTERS TO\n             \
    \  ARPA-LIKE NETWORK VIA DIRECTLY-CONNECTED\n                          FRONT END\
    \ PROCESSORS\n                          by Michael Padlipsky\n               \
    \ with the advice and general agreement of\n     Jon Postel and Jim White (SRI-ARC),\
    \ Virginia Strazisar (MITRE)\n                      and the general agreement\
    \ of\n   Tom Boynton (ISI), Frank Brignoli (NSRDC), John Day (CAC), Bob Fink\n\
    \   (LBL), Carl Ellison (UTAH), Eric Harslem (RAND), Wayne Hataway\n   (AMES-67),\
    \ John McConnell (I4-TENEX), Ari Ollikainen (UCLA), Dave\n   Retz (SCRL), Al Rosenfeld\
    \ (CASE), Stan Taylor (BRL), Doug Wells\n   (MIT-MULTICS).\n   All affiliations\
    \ are shown only for identifying ARPANET involvement,\n   and do not necessarily\
    \ denote organizational approval of the\n   positions taken here.\n   No -- repeat\
    \ NO -- expression of general agreement should be taken to\n   apply to Appendix\
    \ 2, which is exclusively a personal viewpoint.\n"
- title: INTRODUCTION
  contents:
  - "INTRODUCTION\n   As this proposal is written, in the fall of 1974, the ARPA network\n\
    \   has achieved sufficient acceptance that a rather large number of\n   organizations\
    \ are currently planning either to attach their general\n   purpose computer systems\
    \ directly to the ARPANET or to interconnect\n   their systems employing \"ARPANET\
    \ technology\".  The authors have been\n   in touch with efforts sponsored by\
    \ the Air Force systems command, the\n   Naval Ship Research and Development Center,\
    \ the Defense\n   Communications Agency (\"PWIN\" -- the Prototype World-Wide\
    \ Military\n   command and Control system Intercomputer Network), ARPA (The National\n\
    \   Software Works), the AEC, and other government agencies.  A common\n   characteristic\
    \ of these networks and the sub-networks is the presence\n   of a number of systems\
    \ which have no counterparts on the current\n   ARPANET; thus, hardware \"special\
    \ interfaces\" (between the host and\n   the network Interface Message Processor)\
    \ and -- more important --\n   Network Control Programs cannot simply be copied\
    \ from working\n   versions.  (Systems include CDO 6600's, XDS Sigma 9's, Univac\
    \ 494's,\n   1107's, 1108's, 1110's, and IBM 370's running operating systems with\n\
    \   no current ARPANET counterparts.)  Because it is also widely accepted\n  \
    \ that the design and implementation of an NCP for a \"new\" system is a\n   major\
    \ undertaking, an immediate area of concern for networks which\n   employs as\
    \ much off-the-shelf hardware and software as is\n   practicable.  This paper\
    \ addresses two such approaches, one which\n   apparently is popularly assumed\
    \ as of now to be the way to go and\n   another which the authors feel is superior\
    \ to the more widely known\n   alternative.\n"
- title: FRONT-ENDING
  contents:
  - "FRONT-ENDING\n   In what might be thought of as the greater network community,\
    \ the\n   consensus is so broad that the front-ending is desirable that the\n\
    \   topic needs almost no discussion here.  Basically, a small machine (a\n  \
    \ PDP-11 is widely held to be most suitable) is interposed between the\n   IMP\
    \ and the host in order to shield the host from the complexities of\n   the NCP.\
    \  The advantages of this fundamental approach are apparent:\n   It is more economic\
    \ to develop a single NCP.  \"Outward\" (User Telnet)\n   network access is also\
    \ furnished by the front end acting as a mini-\n   Host.  The potentiality exists\
    \ for file manipulations on the mini-\n   Host.  Two operating systems are in\
    \ advanced stages of development on\n   the ARPANET for PDP-11's which will clearly\
    \ serve well as bases for\n   network front ends; thus, the hardware and software\
    \ are copiable.  So\n   if we consider a model along the following lines\n   Host\
    \ *** Front End --- IMP --- Network\n   everything to the right of the asterisks\
    \ may almost be taken as\n   given.\n   (Caveat: Note the \"almost\" well in last\
    \ sentence neither ANTS nor ELF\n   -- the two systems alluded to above -- is\
    \ a completely finished\n   product in the estimation of either their respective\
    \ developers or of\n   the knowledgeable ARPANET workers who have contributed\
    \ to this\n   report.  Both are capable of being brought to fruition, though,\
    \ and\n   in a reasonable amount of time.  We will assume ELF as the actual\n\
    \   front-end system here for two reasons: apparent consensus, and\n   current\
    \ activity level of the development team.  However, we have no\n   reason to believe\
    \ that readers who prefer ANTS would encounter\n   substantive difficulties in\
    \ implementing our proposal on it.)\n   (Explanatory notes: ANTS is an acronym\
    \ for ARPA Network Terminal\n   Support system; it was developed at the Center\
    \ for Advanced\n   Computation (CAC), University of Illinois.  ELF is not an acronym\
    \ (It\n   is said to be German for \"eleven\"); it was designed at the Speech\n\
    \   Communications Research Lab (SCRL), Santa Barbara, California.)\n"
- title: THE RIGID FRONT-END ALTERNATIVE
  contents:
  - "THE RIGID FRONT-END ALTERNATIVE\n   Referring back to the model above, the popular\
    \ view of the asterisks\n   is to have the front-end system simulate a well known\
    \ device for each\n   Host (typically a remote job entry station along the lines\
    \ of the\n   200UT on the CDC 6600), effectively requiring no software changes\
    \ on\n   the Host system.  We characterize this approach as \"rigid\" because\
    \ an\n   immediate implication is that the Host system is constrained to\n   handle\
    \ data to and from the network only in fashions which its system\n   already provides.\
    \  (E.g., if you simulate a card reader, your data\n   will necessarily be treated\
    \ as batch input if a terminal, necessarily\n   as time-sharing input.)  Now,\
    \ it may be argued that Host software\n   changes are only being shunned in order\
    \ to \"get on the air\" quickly,\n   and may be introduced at a later date in\
    \ order to allow unconstrained\n   channelling of network data within the Host;\
    \ but this reasoning may\n   surely be refuted if it can be shown that an alternative\
    \ exists which\n   is essentially as quick to implement and does not require the\
    \ waste\n   motion of constructing known-device simulation hardware and software\n\
    \   for each new Host, only to eventually avoid the simulation in the\n   Host.\n\
    \   The major advantage which might be claimed for the rigid front-end\n   approach\
    \ other than quickness to implement would be embarrassing if\n   true.  That is,\
    \ the possibility exists that either the \"new\" Host's\n   operating systems\
    \ or system programming staffs are so intractable\n   that avoiding Host software\
    \ changes is a necessity rather than a\n   desire.  We certainly hope neither\
    \ is the case and have no reason to\n   believe it to be so, but we must acknowledge\
    \ that such possibilities\n   exist as meta-issues to this report.\n"
- title: DISAVANTAGES OF THE RIGID FRONT-END ALTERNATIVE
  contents:
  - "DISAVANTAGES OF THE RIGID FRONT-END ALTERNATIVE\n   The rigidity argument sketched\
    \ above merits some amplification.  The\n   major disadvantage of interfacing\
    \ with the Host only in fixed ways\n   lies in a loss of functionality.  Granted\
    \ that \"Telnet\" and \"RJE\"\n   functions can be performed (though we have deep\
    \ reservations about\n   file transfer) by simulating a known device there are\
    \ more things in\n   practice and in theory than just using the Hosts' time-sharing\
    \ and\n   batch monitors.  \"Teleconferencing\" is an instance which comes\n \
    \  immediately to mind.  Graphics is another.  Neither fits naturally\n   into\
    \ the setting a typical operating system is likely to assume for a\n   Telnet\
    \ or RJE connection.  Further, the ARPANET is just beginning to\n   evolve a view\
    \ of \"process-to-process\" protocols where cooperating\n   programs on dissimilar\
    \ systems communicate over network sockets in a\n   true use of sockets as interprocess\
    \ communication media.  It is\n   difficult to conceive of viewing a (simulated)\
    \ line printer as an\n   abstract \"port\" without considerable contortion of\
    \ the extant\n   operating system.  To attempt to summarize this cluster of\n\
    \   objections, a simulation of a known device may be cheaper than a\n   large\
    \ enough number of phone calls, but it's not networking.\n   For that matter,\
    \ it is by no means clear that the goal of Host\n   software changes can even\
    \ met.  In the case of one particular system\n   on the ARPANET where a PDP-15\
    \ was employed as a front end to a PDP-\n   10, one of the authors discovered\
    \ that on attempting to login over\n   the net he was confronted by an interrogation\
    \ as to the type of\n   terminal he was at -- the front end having been attached\
    \ at the wrong\n   point in the PDP-10's terminal handling code.  (Being a battle-\n\
    \   scarred veteran of Telnet protocol development, he gave suitable\n   answers\
    \ for describing a \"Network Virtual Terminal\".  Unfortunately,\n   however,\
    \ the NVT apparently had no counterpart in the Hosts' normal\n   complement of\
    \ local terminals.  And when he tried such Telnet control\n   functions as \"\
    don't echo, I'm at a physically half-duplex terminal\"\n   things really got confused).\
    \  As it happens, he later found himself\n   in the neighbrohood of the Host in\
    \ question, and found himself\n   spending an afternoon attempting to explain\
    \ the philosophy and\n   importance to the Telnet protocol of the NVT.  The site\
    \ personnel\n   were both appreciative and cooperative, and although we have not\
    \ had\n   occasion to verify it, we assume that the site is probably now usable\n\
    \   from the ARPANET.  The important point, though, is that operating\n   systems\
    \ tend to make extensive, very often unconscious, assumptions\n   about their\
    \ operating environments.  This observation is particularly\n   true when it comes\
    \ to terminal types, and the problem is that there\n   is simply no guarantee\
    \ that the several systems in question could\n   even \"do the right thing\" if\
    \ they were front-ended by simulating a\n   known device -- unless, of course,\
    \ the simulation of the device in\n   the mini were so painstaking that all we'd\
    \ get would be an expensive\n   way of adding an RJE station, period.\n   Less\
    \ abstract considerations also apply.  For one thing, a mini-\n   computer --\
    \ even with \"third-generation\" software -- is not as free\n   and convenient\
    \ an environment to program in as a full-scale Host\n   therefore, implementing\
    \ the several simulations will not be trivial\n   pieces of software engineering.\
    \  Further, if the simulation software\n   is prepared by front-end experts, they\
    \ will encounter repeated\n   start-up transients in learning enough about the\
    \ expectations of the\n   several Host in order to perform their tasks.  For that\
    \ matter, it is\n   clear that if personnel from the several Host are barred from\
    \ active\n   participation in attaching to the network there will be natural (and\n\
    \   understandable) grounds for resentment of the \"intrusion\" the network\n\
    \   will appear to be; systems programmers also have territorial\n   emotions,\
    \ it may safely be assumed.\n   On a still more practical level, it should be\
    \ noted that the\n   potential need to simulate more than one known device --\
    \ and even the\n   potential complexity of any single device simulation -- may\
    \ well lead\n   to a requirement for a larger PDP-11 configuration than would\n\
    \   otherwise be reasonable.  And although there are other reasons for\n   arguing\
    \ that each front-end processor ought to be as big a\n   configuration as possible,\
    \ we must acknowledge that dollars do\n   matter.  Also on the topic of numbers,\
    \ it should be further noted\n   that the line speed available for known-device\
    \ simulations can be\n   quite low.  The 200UT, for example, is on a 4800 baud\
    \ line, which is\n   rather a mismatch with a 50,000 baud communication subnet.\
    \  (Of\n   course, there's always the 40,800 baud line into the 6600 -- but it\n\
    \   is'nt expected to have interactive devices on it, so the extant\n   software\
    \ won't send the data to the \"right place\"....)  And no\n   experienced ARPANET\
    \ protocol designer would be willing to overlook\n   the possibility that there\
    \ will probably have to be a flow control\n   discipline between the Host and\
    \ the front-end processor anyway, so\n   the no change to Host software goal becomes\
    \ rather dubious of\n   fulfillment.\n   After all that, it is perhaps gratuitously\
    \ cruel to point out still\n   another level of difficulty, but we feel quite\
    \ strongly that it\n   should be addressed.  For, it must be admitted, the question\
    \ must be\n   asked as to who will do the front-end implementations.  This sort\
    \ of\n   thing is scarcely within the purview of CAC of SCRL.  But, as will be\n\
    \   urged in Appendix 2, it is of the outmost importance that whoever\n   performs\
    \ the task already have ARPANET expertise, for we know of no\n   case where \"\
    outsiders\" have successfully come aboard without having\n   become \"insiders\"\
    \ in the process, which is neither an easy nor cost\n   effective way to proceed.\n\
    \   In light of the above, it is at least reasonable to consider an\n   alternative\
    \ to the rigid front-end approach, for regardless of the\n   weight the reader\
    \ may attach to any particular cited disadvantage, in\n   total they at least\
    \ suggest that the known-device simulation tactic\n   is not a panacea.\n"
- title: THE FLEXIBLE FRONT-END ALTERNATIVE
  contents:
  - "THE FLEXIBLE FRONT-END ALTERNATIVE\n   Our alternative approach is based on a\
    \ principle which actually has\n   been around since at least a month before the\
    \ ARPANET began running\n   User and Server Telnets on a regular basis.  The principle\
    \ is that it\n   would be nice to off-load as much as possible of the NCP from\
    \ the\n   Host, because Hosts are supposed to have better things to do with\n\
    \   their cpu cycles than field control messages from other Hosts --\n   especially\
    \ when 90% of the control messages are merely ALL(ocate)\n   commands.  This insight\
    \ led to the notion that all a Host \"really\"\n   has to do is associate sockets\
    \ with processes (and, of course, pass\n   data along socket connections).  And\
    \ the flexible front-end approach\n   is no more than an updating of these 1971\
    \ ideas to the following:\n   Drop the hard and fast goal that there will be NO\
    \ changes to Host\n   software in favor of the more realistic goal of making MINIMAL\n\
    \   changes to the Host attach the front-end processor to any convenient\n   high-speed\
    \ \"channel\" ( / \"port\" / \"multiplexer\" / \"line\" / \"cable\");\n   let\
    \ the fro nt-end processor handle the NCP; define an extremely\n   compact protocol\
    \ for the Host and front-end to follow (the H-FP); and\n   let the Host H-FP module\
    \ distribute the data appropriately within its\n   operating system, because the\
    \ H-FP will make it clear where the data\n   should go and if you have to ram\
    \ the data into the teletype buffers,\n   it's still cleaner than trying to do\
    \ interprocess communication over\n   a card reader.  (The H-FP is detailed in\
    \ less bald terms in Appendix\n   1).  Now that might sound rather uncompromising\
    \ -- and almost surely\n   sounds rather cryptic -- but between the advantages\
    \ it engenders and\n   the more comprehensive description which follows, we feel\
    \ that it\n   does represent a superior basis for solving the overriding problem\
    \ of\n   how best to attach \"new\" Hosts to an ARP-like net.\n"
- title: ADVANTAGES OF THE FLEXIBLE FRONT-END ALTERNATIVE
  contents:
  - "ADVANTAGES OF THE FLEXIBLE FRONT-END ALTERNATIVE\n   The primary advantage of\
    \ the flexible front-end alternative is\n   precisely its flexibility: Although\
    \ minimal implementations may be\n   envisioned on given Hosts, the most minimal\
    \ of the implementations is\n   still as powerful as the rigid front-end approach;\
    \ and as the need\n   for more functions is perceived, they may be coded for quite\
    \ easily\n   with our approach.  This is so because programs in the Host can \"\
    get\n   their hands on\" data from the net (and send data to the net) in a\n \
    \  natural fashion -- it is not the case that only those things done on\n   a\
    \ given system with the data from, say, a card reader, can\n   conveniently be\
    \ done here.  Thus, in contrast to the rigid front-end\n   approach, the flexible\
    \ front-end approach \"is networking\".  Indeed,\n   it should be noted that a\
    \ major \"real\" ARPANET server site has\n   expressed an interest in implementing\
    \ the H-FP based on some five\n   minutes' worth of the blackboard explanation\
    \ with two of the authors.\n   Another advantage of our new approach is that it\
    \ involves personnel\n   at the various new sites in the process of coming aboard\
    \ the network.\n   Not only does this involvement have merit psychologically (if\
    \ known-\n   device simulation were employed, the network could represent an alien\n\
    \   intrusion forced upon them, to site systems types), but it is also\n   technically\
    \ preferable to have per-site coding done by \"experts\",\n   which would not\
    \ be the case if the per-site tailoring were done\n   exclusively in the mini.\
    \  Recall the PDP-15 to PDP-10 attempt\n   discussed earlier.  That case may fairly\
    \ be viewed as one of the\n   front-ending's having been performed in ignorance\
    \ of the conventions\n   of both the Host's operating system and of the ARPANET?\
    \  Not only\n   should that sort of thing be avoided by the expedient of involving\n\
    \   experts on the target operating systems in the process of attaching\n   to\
    \ the network but there are practical considerations as well: we\n   estimate\
    \ that adding a minimal Host-Front End Protocol routine in a\n   given operating\
    \ system would require no longer than the same few man\n   months to develop than\
    \ would the adding of a new known-device\n   simulation package to the mini. \
    \ So that we foresee scheduling\n   advantages in addition to the more abstract\
    \ ones already asserted.\n   Further, it ought to be a more friendly environment\
    \ to program in on\n   the Host than in the mini.  (This is not to say the ELF\
    \ does not\n   appear to be good environment to program in; rather, it is to make\n\
    \   the \"obvious\" claim that if the big systems did not furnish\n   convenient\
    \ programming environments we wouldn't have them.)\n   As touched on earlier,\
    \ another point which bears further examination\n   is the area of flow control.\
    \  The known-device simulation approach\n   appears to assume that this too will\
    \ be handled by the mini, and that\n   the simulation will be aware of whatever\
    \ flow control discipline the\n   host and the physical device being simulated\
    \ follow.  However, when\n   the one device \"everybody knows\" will be simulated\
    \ (CDC 200UT)\n   operates on a 4800 bit-per-second line, and the IMP subnetwork\n\
    \   operates on a 50,000 bps lines, some attention must be paid to the\n   mismatch\
    \ -- especially in view of the fact that only one process in\n   the Host is typically\
    \ associated with a known device, but the network\n   actually transmits data\
    \ on behalf of many processes.  Our approach,\n   on the other hand, allows for\
    \ a very direct, simple flow control\n   discipline to be imposed, without getting\
    \ involved in per-Host\n   idiosyncrasies.  (The option to go more elaborate --\
    \ potentially more\n   efficient -- flow control disciplines is also provided.)\
    \  Thus, we\n   can simply pick the beat line speed available on a particular\
    \ Host,\n   and attach to it.\n   Notice one other level of practical advantages:\
    \ The min's H-FP module\n   can be furnished along with its operating system by\
    \ the same network\n   \"insiders\" who are furnishing the operating system itself.\
    \  Thus, a\n   critical task need not be subjected to the perils of subcontracting.\n\
    \   Indeed, this approach lends itself far more readily to subcontracting\n  \
    \ than other, if subcontracting must be done for the per-cost software\n   for\
    \ with the PDP-11 being almost always the same, network \"insiders\"\n   can be\
    \ used in conjunction with site personnel to build Host H-FP\n   modules either\
    \ through commercial consulting contracts or even from\n   within the ARPANET\
    \ community.  (The latter possibilities exists\n   because another fact about\
    \ system programmers is that -- although\n   they resent \"invasions\" -- they\
    \ tend to enjoy getting inside new and\n   different systems, if only to feel\
    \ superior to them in contrast with\n   their own.)\n   The strengths of the flexible\
    \ front-end approach, then, tend to arise\n   in exactly those areas of weakness\
    \ of the rigid front-end approach.\n   Perhaps most important of all, though,\
    \ is the fact that it \"makes\n   sense\" to almost every single experienced member\
    \ of the ARPANET\n   community with whom it has been discussed.  So, we might\
    \ reason, if\n   the ARPANET is desirable, it is desirable because efforts of\
    \ those\n   who made it work and if they have gained insights into networking\
    \ in\n   general in the process, their opinions deserve particular attention.\n"
- title: RECOMMENDATIONS
  contents:
  - "RECOMMENDATIONS\n   The protocol specified in Appendix 1 is felt to be around\
    \ 90%\n   complete.  We are aware that we have not specified all the codes that\n\
    \   will be needed to describe conditions of which the Host and Front-End\n  \
    \ must apprise each other, for example.  But we think that, in general\n   the\
    \ protocol \"Woks\".  We stand willing to discuss it with cognizant\n   decision\
    \ makers in the various interested organizations, and, for\n   that matter, to\
    \ continue to debate it with our technical peers.  At\n   this stage, however,\
    \ the dominant makers avert the apparent stampede\n   to the rigid front-end approach\
    \ and evaluate the flexible front-end\n   alternative in light of the preceding\
    \ arguments and the following\n   protocol specification.\n"
- title: APPENDIX 1. THE HOST-FRONT END PROTOCOL
  contents:
  - 'APPENDIX 1. THE HOST-FRONT END PROTOCOL

    '
- title: ASSUMPTIONS
  contents:
  - "ASSUMPTIONS\n   The physical connection of the front end (FE) to the Host is\
    \ assumed\n   to be made over the \"best\" port (or channel, line, etc.) available\
    \ on\n   the Host, where \"best\" covers both line speed and quality of software\n\
    \   available to physically manage the line.  The choice should be made\n   by\
    \ site personnel.  Hardware interfacing capability is assumed to be\n   straightforward;\
    \ it is, at least, no more complex for the H-FP than\n   for known-device simulation.\
    \  The connection is assumed to be\n   sufficiently closely coupled that a simple,\
    \ explicit acknowledgment\n   H-FP command will offer satisfactory flow control.\
    \  That is,\n   distances are assumed to be short and bit rates high; thus, the\
    \ same\n   assumptions are made here as are made in the case of Local IMP-Host\n\
    \   interfaces:  that error checking and flow control are not first-order\n  \
    \ problems.\n   On the software level, buffering is assumed to be adequate in\
    \ the\n   Host to accept at least a full (8096 bit) IMP-IMP message-- although\n\
    \   the FE could probably get around this constraint if it absolutely had\n  \
    \ to.  Given only a minimal H-FP module in the Host, the FE will allow\n   the\
    \ same level of Telnet and RJE functioning as would the known-\n   device simulation,\
    \ as follows: The FE will always shield the Host\n   from the NCP commands and\
    \ the simplex sockets they deal with, dealing\n   instead with a repertoire of\
    \ but five H-FP commands and conversing\n   over duplex data streams with the\
    \ appropriate management of Network\n   sockets left to the FE.  (The commands\
    \ are described below; we\n   continue with the discussion of assumptions here,\
    \ but some readers\n   may prefer to study the commands before continuing with\
    \ the balance\n   of this section.) For Telnet, although subsequent analysis may\
    \ lead\n   to a more sophisticated treatment, the present assumption is that the\n\
    \   FE will normally refuse all \"negotiated options\" and strip all Telnet\n\
    \   control codes from the data it passes to the Host (unless the Host\n   orders\
    \ it to pass an unaltered Telnet stream); on a pre-installation\n   basis, the\
    \ FE will also map from Telnet ASCII to the Host's desired\n   character set.\
    \  Telnet \"interrupt process\" controls are handled by an\n   H-FP command, discussed\
    \ below.\n   For RJE, because the ARPANET RJE Protocol is only known to have been\n\
    \   implemented on one Host in the ARPANET and is generally considered to\n  \
    \ be too cumbersome, the standard socket for RJE will be reserved for\n   future\
    \ use, and a special designator will indicate to the Host that\n   input on the\
    \ given connection is to be treated as data in the format\n   and job control\
    \ language of its own \"batch\" system.  Again, character\n   set mapping will\
    \ be available on a per-installation basis.\n   For file transfer, however, a\
    \ further assumption must be made about\n   Host software.  This is because the\
    \ FE cannot be expected to\n   manipulate  the Host's file system; therefore,\
    \ if the host whishes to\n   participate in file transfer activities its H-FP\
    \ module must be able\n   to access the Host's file system for both sending and\
    \ receiving\n   files.  Again, the FE will be able to shield the Host from the\n\
    \   details of the underlying protocols to a large extent; but the Host\n   must\
    \ be able to handle FTP \"stor\" and \"retr\" commands, which will be\n   passed\
    \ over the (single) connection opened between the FE and the\n   Host for file\
    \ transfer.  (FTP \"user\" and \"pass\" commands might also\n   be desirable.\
    \  As with Telnet, the FE will manage the Various Network\n   sockets involved\
    \ so as to allow the Host to operate on only the H-FP\n   connection, and will\
    \ again optionally perform character set mapping.\n   Note that Hosts may refuse\
    \ to open FTP connections until and unless\n   they choose to, with no impact\
    \ on the FE.\n   The Host's H-FP module, in short, will interpret the commands\
    \ of the\n   protocol, distribute Telnet data to and from the appropriate points\n\
    \   within its operating system where terminal I/O is expected,\n   distribute\
    \ RJE data like manner, and when it is able to do so handle\n   FTP as sketched\
    \ above and amplified on below.  It will, also on a\n   when-desired basis, support\
    \ calls from its system's user processes\n   for unspecified purposes I/O on ARPANET\
    \ sockets to allow for such\n   functions as teleconferencing and other process\
    \ exploitations of the\n   Net.  Our overriding assumption is that the initial\
    \ H-FP module for a\n   given Host (which does not require FTP or unspecified\
    \ socket\n   capability) will not be appreciably harder to implement than a\n\
    \   known-device simulation; that it will offer extensibility to more\n   interesting\
    \ uses of the network than the alternative has been\n   sketched here and will\
    \ be returned to after the H-FP commands are\n   described.\n"
- title: FORMAT OF THE COMMANDS
  contents:
  - "FORMAT OF THE COMMANDS\n   All communication between FE and Host is performed\
    \ in terms of H-FP\n   commands.  The fields of the several commands are one or\
    \ more\n   \"bytes\", where a byte is per-installation parameter of 8, 9, 12,\
    \ 16,\n   18, 32, 36, 48, 60 or 64 bits width, according to the coding\n   convenience\
    \ of the given Host's H-FP module implementers? (6 bit\n   bytes are not supported\
    \ because they do not offer enough room to\n   express all the values anticipated\
    \ for certain code fields machines\n   with 6 bit internal byte structure can\
    \ specify 12 bit H-FP bytes and\n   still be able to use their natural byte oriented\
    \ instructions.)\n   Values for fields will be right-justified within their (potentially\n\
    \   several) byte widths.  Note that the list of byte sizes is 1) not\n   meant\
    \ to be exhaustive, and 2) probably unnecessarily extensive -- as\n   8,9, and\
    \ 12 are probably the only \"reasonable\" sizes in actual\n   practice (but if\
    \ a particular machine is better suited for handling\n   whole words rather than\
    \ fractions thereof, the FE can certainly make\n   life more convenient for it.)\n\
    \   Although the commands are given names for documentation purposes, the\n  \
    \ value transmitted in the first byte of each command will be the\n   binary representation\
    \ of the number shown before its name in the next\n   section.  (i,e., the command\
    \ field is one byte wide.)\n"
- title: COMMANDS
  contents:
  - "COMMANDS\n   (Note that all commands may be sent by either the FE or the Host.)\n"
- title: 1. BEGIN INDEX HOST SOCKET TRANSLATION-TYPE CONNECTION-TYPE
  contents:
  - "1. BEGIN INDEX HOST SOCKET TRANSLATION-TYPE CONNECTION-TYPE\n   The begin command\
    \ establishes a \"connection\" between the Host and the\n   FE.  Regardless of\
    \ internal representation, the duplex data stream\n   the connection represents\
    \ will be referred to by the value specified\n   in the next (INDEX) field that\
    \ is, for example, the FE will send\n   input from and receive output for a given\
    \ Telnet connection \"on\" a\n   given INDEX, even though it is actually managing\
    \ two \"sockets\" for\n   the purpose in its dealings with the Network.\n   a)\
    \ INDEX is a two-byte field.  Both the Host and the FE may choose\n   arbitrary\
    \ values for it when opening connection with a BEGIN command\n   (H-FP implementations\
    \ will probably simply increment INDEX by 1\n   whenever they need a new connection);\
    \ however, the value of 0 is\n   reserved to apply to the \"global\" connection\
    \ between the Host and the\n   FE -- thus, when either machine \"come up\" the\
    \ first thing it does is\n   send a BEGIN for INDEX=0.  (The END and ACKNOWLEDGE\
    \ commands also\n   follow this convention; for that matter, there is no reason\
    \ why the\n   MESSAGE command could not also, should it be desired to extend the\n\
    \   FE's functions in the future.  At present, however, this is merely a\n   potential\
    \ extension.)  Note that all other fields should be set to 0\n   for INDEX 0 BEGINS.\n\
    \   b) HOST is a two-byte field.  It specifies the Host number associated\n  \
    \ with the socket in the next field.  On FE to Host BEGINS this is\n   purely\
    \ informational.  However, on Host to FE BEGINS it is necessary\n   to enable\
    \ the FE to identify the foreign Host with which to\n   communicate at the NCP\
    \ level.\n   c) SOCKET is a four-byte field.  If SOCKET=1, a Telnet connection\
    \ is\n   to be established.  If SOCKET=3, an FTP connection is to be\n   established.\
    \  If SOCKET=5, an ARPANET RJE Protocol connection is to\n   be established (no\
    \ known current utility).  If SOCKET=77, a Host-\n   specific connection is to\
    \ be established for RJE/batch.  All other\n   values are for connections for\
    \ unspecified purposes, to be opened at\n   the NCP level according to the CONNECTION-TYPE\
    \ field.  Note that\n   sockets 1, 3, 5 and 77 are \"known about\" and special-cased\
    \ by the FE.\n   d) TRANSLATION-TYPE is a one-byte field.  From FE Host, it is\n\
    \   informational.  From Host to FE, it specifies character set mapping\n   if\
    \ desired, or characterizes the data to be transmitted over the\n   connection.\
    \  0 request / specifies ASCII data 1; binary data (note\n   that this value will\
    \ not be sent from FE to Host under current\n   assumptions, and that word size\
    \ is to be a per-installation\n   parameter); 2, mapping of ASCII to/from local\
    \ character set.  Other\n   types will be defined if needs are identified.\n \
    \  e) CONNECTION-TYPE is a one-byte field.  For FE to Host BEGINS it is\n   informational.\
    \  For Host to FE BEGINS it instructs the FE as to which\n   kind of NCP connection\
    \ discipline to follow.  1 requests a duplex\n   connection (i.e., that the Initial\
    \ Connection Protocol of the ARPANET\n   be employed) 2, a simplex connection\
    \ (i.e., that the appropriate\n   ARPANET \"request for connection\" Host-Host\
    \ Protocol commmand be\n   employed for the gender of the socket at hand).  Note\
    \ that this\n   extended use of the H-FP will be of interest when (and if) User-level\n\
    \   programs on the Host begin to use the Network.  (The FE will open 8-\n   bit\
    \ connections at the Network level unless otherwise directed.)\n"
- title: 2. ACKNOLEDGE INDEX CODE
  contents:
  - "2. ACKNOLEDGE INDEX CODE\n   The ACKNOWLDEGE command is multi-purpose.  It must\
    \ be sent in\n   response to all commands from the other machine (other than\n\
    \   ACKNOWLEDGES, of course), and is primarily used to indicate the\n   success\
    \ or failure of the command just received on INDEX.  Note that\n   this implies\
    \ that each MESSAGE on a given INDEX must be ACKNOWLEDGEd\n   before the next\
    \ can be sent.\n   a) INDEX is as above.\n   b) CODE is a two-byte field.  CODE=0\
    \ indicates success / acceptance\n   of the command most recently received for\
    \ INDEX.  CODE=1 indicates\n   failure /rejection of the most recent command.\
    \  (E.g., if a MESSAGE,\n   buffering was unavailable so the other machine must\
    \ retransmit; if a\n   BEGIN, the indicated protocol / socket cannot be serviced.)\
    \  CODE=3\n   indicates an invalid or inactive INDEX has been used.  CODE=4\n\
    \   indicates (HOST to FE) that no mapping is to be performed on the\n   connection\
    \ just opened.  Other values (for such meanings as \"foreign\n   Host down\",\
    \ \"undefined type requested\" and the like) will be assigned\n   as identified.\n"
- title: 3. MESSAGE INDEX COUNT PAD TEXT
  contents:
  - "3. MESSAGE INDEX COUNT PAD TEXT\n   The MESSAGE command is employed for the transmission\
    \ of data.\n   a) INDEX is as above.\n   b) COUNT is a two-byte field which specifies\
    \ the number of bits of\n   data in the TEXT field.\n   c) PAD is a 1-to-n-byte\
    \ field.  Its width is a per-installation\n   parameter used to enable the TEXT\
    \ field to start on a word boundary\n   if the local H-FP implementers so desire.\
    \  (This is not only a\n   kindness, but it's also a placeholder if we decide\
    \ to go to a flow\n   control mechanism involving sequence numbers.)\n   d) TEXT\
    \ is a field wherein byte structure is coincidental.  It\n   consists of COUNT\
    \ bits of data to be sent to the process implicitly\n   associated with INDEX\
    \ by a BEGIN command (which has not been ENDed.)\n"
- title: 4. INTERRUPT INDEX
  contents:
  - "4. INTERRUPT INDEX\n   The INTERRUPT command, when sent from the FE to the Host,\
    \ indicates\n   that an FCP interrupt command (INS or INR) has been received for\
    \ the\n   process associated with INDEX; the Host should interrupt the\n   associated\
    \ process and whatever fashion is \"normal\" to it.  (The most\n   common use\
    \ of the NCP is in Telnet, where it is defined as being the\n   functional equivalent\
    \ of having struck a terminal's ATTN, INT, of\n   BREAK key, or input a \"control-c\"\
    \ on certain character-at-a-time\n   systems; essentially, it requests a \"quit\
    \ button\" push.  Note that\n   the FE will take care of the associated Telnet\
    \ control code in the\n   input stream.)  When sent from the Host to the FE (in\
    \ process to\n   process applications), it will indicate that an appropriate NCP\n\
    \   interrupt be sent, according to the gender of the socket associated\n   with\
    \ INDEX.\n"
- title: 5. END INDEX CODE
  contents:
  - "5. END INDEX CODE\n   The END command is used to terminate a connection.  It\
    \ may be sent\n   either because one system or the other is about to go down,\
    \ or\n   because the FE have received an NCP \"CLS\" command or because the\n\
    \   destination system or IMP has gone down, or at the behest of a Host\n   user\
    \ process.\n   a) INDEX is as above.  Note that if INDEX=0 the END refer to the\n\
    \   \"global\" connection between the Host and the FE in such case, the\n   high-order\
    \ bit of CODE will be set to 1 and the low-order bits will\n   specify the number\
    \ of the minutes to shutdown if this information is\n   available.  (Furnished\
    \ because the associated IMP often informs the\n   FE of such a condition.)\n\
    \   b) CODE is a two-byte field.  CODE=1 indicates the general \"close\"\n   case\
    \ (either received or ordered) 2, foreign systems has gone down;\n   3, foreign\
    \ IMP has gone down; 4, local IMP has gone down.  Other\n   values will be assigned\
    \ as identified.\n"
- title: EXTENSIBILITY
  contents:
  - "EXTENSIBILITY\n   Simplicity and compactness being major goals of the protocol,\
    \ the\n   small repertoire of commands just presented represent \"all there is\"\
    .\n   Recall that we are specifically omitting from consideration such\n   issues\
    \ as error and flow control, which could turn the H-FP into\n   another Host-Host\
    \ Protocol.  (should error and flow control prove\n   desirable in practice, we\
    \ have, of course, thought of some suitable\n   mechanism within the H-FP framework;\
    \ but they are not considered\n   germane in the present context.) The primary\
    \ intention here is to\n   specify a protocol, which lends itself to minimal initial\n\
    \   implementations in the Hosts, on the same time scale as would have\n   otherwise\
    \ been required for known-device simulations -- but which\n   offers great flexibility\
    \ in the use of the network than would be\n   achieved through known-device simulation.\n\
    \   The astute reader will have noticed that most of the commands have\n   been\
    \ specified with an eye toward the future.  Because the same\n   protocol, which\
    \ allows the Host and the FE to communicate can easily\n   allow user processes\
    \ on the Host to use the Network, we have tried to\n   encourage this desirable\
    \ end by furnishing all the necessary hoods\n   and handholds for it in the FE's\
    \ H-FP module through the broad\n   definitions of the commands.  A Hosts's H-FP\
    \ module can furnish a\n   trivial interface for user programs in terms of a very\
    \ few entry\n   points (open, read, write, and close appear to be the minimal\
    \ set)\n   and allow the user program considerable flexibility in its use of the\n\
    \   net.  For example, a \"User\" FTP program could be straightforwardly\n   created\
    \ even for a Host, which did not choose to field the BEGINs on\n   socket 3 (necessary\
    \ for \"Server\" FTP capability), and files could\n   still be \"pulled\" to the\
    \ Host even if they could not be \"pushed\" to\n   it.  (the FE will be required\
    \ to recognize and special-case BEGINs on\n   socket 3, but that's a small price\
    \ to pay).  So, if the specification\n   of the h-FP command repertoire seems\
    \ somewhat more complex than it\n   need be, remember that not all of it has to\
    \ coped with on any given\n   Host -- and that any give host ca take advantage\
    \ of more functions as\n   it desires.  (Although it's not really within the present\
    \ scope, we\n   stand willing to invent per-Host H-FP to user program interfaces\
    \ on\n   request.)\n"
- title: FTP
  contents:
  - "FTP\n   To amplify a bit on the problem of file transfer, it must be observed\n\
    \   that in general only a file system can manage its files.  This\n   borders\
    \ on tautology and is difficult to deny.  Therefore, although\n   the FE can shield\
    \ the Host from a great deal of the mechanism\n   included in the FTP for functions\
    \ not directly germane to the\n   transferring of files, Host's operating system\
    \ and place or extract a\n   given file, even though it \"has\" the file's name\
    \ available to it.\n   There is no in-principle reason why the H-FP module on\
    \ the Host can't\n   invoke an appropriate routine when it receives a BEGIN on\
    \ socket 3,\n   though.  (The FE will handle all the type and mode negotiations,\
    \ pass\n   the \"stor\" or \"retr\" line along, and be ready to transmit or receive\n\
    \   on the appropriate socket but \"somebody\" in the Host has to receive\n  \
    \ or transmit the MESSAGE to or from the right place.)  But if that\n   seems\
    \ hard to do on any particular Host, its H-FP module can merely\n   negatively\
    \ ACKNOWLEDGE any BEGINs for socket 3.  The real point to be\n   noted is that\
    \ the H-FP still allows in principle for User  FTP, as\n   explained above, even\
    \ so -- and that the simulation of known device\n   offers neither (User nor Server\
    \ FTP) function.\n   (Files could, of course, be transferred into the FE, then\
    \ somehow\n   gotten into the Host \"later\" -- perhaps by faxing up a batch job\
    \ --\n   but that route requires either an awful lot of buffering in the mini\n\
    \   or a very sophisticated file system there, or both.  It also requires\n  \
    \ an awful lot of per-Host information in each FE -- or perhaps human\n   intervention.\
    \  We're not saying it can't be done... eventually.  But\n   it's not going to\
    \ be clean, or quick, or easy, or cheap.)\n"
- title: SUMMATION
  contents:
  - "SUMMATION\n   Several important themes have unavoidably been dealt with piecemeal\n\
    \   in the foreign attempt to specify the H-FP in the abstract.  To\n   gather\
    \ the threads together, it might be useful to consider the\n   various ways in\
    \ which the protocol can be employed, in the context of\n   their ARPANET counterparts.\
    \  A. \"SERVER\" FUNCTIONS: There are, in\n   essence, three levels on which a\
    \ Host can use the H-FP to fulfill\n   ARPANET \"Server\" functions.  1) For Hosts\
    \ which choose to take FULL\n   advantage of the flexibility of the H-FP, all\
    \ \"fourth level\" (user\n   process to user process)  protocols can be managed\
    \ by the Host.  The\n   FE will perform NCP (Host-Host protocol) and IMP-Host\
    \ protocol\n   functions (the associated IMP will, of course, perform IMP-IMP\n\
    \   protocol functions), thus shielding the Host from the necessity of\n   implementing\
    \ a full-blown NCP with the attendant complexity of being\n   aware of the 11\
    \ to 14 \"states\" of a socket, flow control,\n   retransmission, and the like\
    \ (as well as shielding it from the IMP-\n   Host protocol, with the attendant\
    \ complexity of mapping \"links\"\n   to/from \"sockets\", dealing with message\
    \ types forming and parsing\n   \"leaders\", and the like).  This mode of use\
    \ is effected by giving the\n   \"no mapping\" code when the Host acknowledge\
    \ a BEGIN on socket 1 and 3\n   (and by simply accepting BEGINs on all other sockets).\
    \  2) For Hosts\n   which choose to take PARTIAL advantage of the flexibility\
    \ of the H-\n   FP, many aspects of the fourth level protocols (in particular\
    \ Telnet\n   and FTP) can be managed by the FE on the Host's behalf, by virtue\
    \ of\n   making assumptions about which Telnet and/or FTP \"commands\" are to\
    \ be\n   permitted and only referring search matter as the association of data\n\
    \   which processes and/or file names to the Host.  (Note that the CODE\n   field\
    \ of the ACKNOWLEDGE command furnishes the mechanism for\n   conveying such error\
    \ information as \"file not found\" from the Host to\n   the FE, which in turn\
    \ will send out appropriate FTP error messages.)\n   This mode of use is effected\
    \ by simply accepting (with code 0) BEGINs\n   on sockets 1 and/or 3 (and doing\
    \ as one chooses for all other\n   sockets); that is, fourth level shielding is\
    \ anticipated to be\n   commonplace, and is the FE's default case.  3) For Hosts\
    \ which choose\n   to take NO advantage of the flexibility of the H-FP, the \"\
    private\"\n   RJE/batch connection type will still provide for the desirable\n\
    \   functions of load sharing and transferring files even though other\n   fourth\
    \ level protocols were to be rejected by a given Host (by\n   refusing BEGINs\
    \ on all sockets other than 77).  Even in this most\n   restricted case, the ability\
    \ to upgrade to either of the broader base\n   is additively implicit in the H-FP,\
    \ with no changes required to the\n   FE's own H-FP module -- whereas it would\
    \ entail considerable\n   alteration of the Host's operating system had the first\
    \ step been a\n   known-device simulation.  B. \"USER\" FUNCTIONS: 1) On the \"\
    User\" side,\n   a Host could again elect to handle such fourth level protocols\
    \ as\n   Telnet and FTP itself.  However, particularly in the Telnet case,\n \
    \  there is no real need for this, as a User Telnet \"comes with\" the FE\n  \
    \ and it is unnecessary to burden the Host with such use unless so many\n   of\
    \ its local terminals are hardwired that it would be expensive to\n   access the\
    \ FE directly.  (Note that for a User FTP, the Host's H-FP\n   module would, as\
    \ discussed above, in all likelihood require a user\n   program callable interface.)\
    \ 2) On a less ambitious level, the FE\n   could be induced to perform the same\
    \ shielding as it offers the\n   Server FTP (cf. case A2, above), given an \"\
    FTP mapping\" TRANSLATION-\n   TYPE on the BEGIN command or the previously suggested\
    \ special casting\n   by the FE on socket 3.  3) Finally, \"User\" functions could\
    \ be\n   completely finessed, as per case A3.C. PROCESS TO PROCESS FUNCTIONS:\n\
    \   Irrespective of the positions taken in A and B, given only a user\n   program\
    \ callable interface to the Host's H-FP module, all other\n   fourth level protocols\
    \ which might evolve -- or, simply, general use\n   of sockets as interprocess\
    \ communication ports -- can be achieved\n   directly.  Again, this would fundamentally\
    \ be an \"add-on\" to the\n   system, not an alteration of existing software.\n"
- title: APPENDIX 2 - SOME NOTES ON IMPLEMENTERS
  contents:
  - 'APPENDIX 2 - SOME NOTES ON IMPLEMENTERS

    '
- title: INTRODUCTORY DISCLAIMER
  contents:
  - "INTRODUCTORY DISCLAIMER\n   This appendix represents strictly the personal views\
    \ of one of the\n   authors; I (now that I can admit to being Mike Padlipsky)\
    \ have not\n   even permitted the other authors to agree with the views expressed\n\
    \   here, much less disagree with them, for they are insights which I've\n   gained\
    \ the hard way during nearly four years of involvement with the\n   ARPANET and\
    \ I feel they need saying -- regardless of the polite\n   fiction of refraining\
    \ from finger pointing.  Please note at the\n   outset, however, that I am motivated\
    \ not by a sense of vindictiveness\n   -- nor even of righteous indignation --\
    \ but rather by a desire to\n   present some history in the hope that the reader\
    \ will not be\n   condemned to repeat it.  Note also that even though it makes\
    \ the\n   prose more convoluted than it might otherwise have been, the\n   convention\
    \ will be observed of \"naming no names\".  I am not, I\n   repeat, out to get\
    \ these guys; merely to get away from them and their\n   like in the future. \
    \ (The reader can stop here with no loss to the\n   main argument of the paper.)\n"
- title: SEVERAL HORROR STORIES FROM THE WONDERFUL WORLD OF NETWORKING
  contents:
  - "SEVERAL HORROR STORIES FROM THE WONDERFUL WORLD OF NETWORKING\n   Consider first\
    \ the tale already told of the PDP 15/PDP 10 front\n   ending effort.  Having\
    \ been involved in the writing of both the \"old\"\n   (1971) and the \"new\"\
    \ (1973) Telnet Protocols, I feel a certain sense\n   of shame by the association\
    \ that they were not so compellingly clear\n   that the power of the Network Virtual\
    \ Terminal / common intermediate\n   representation approach could not have been\
    \ missed, ever by system\n   programmers operating in pretty much of a vacuum\
    \ with respect to\n   contact with knowledgeable ARPANET workers.  Having said\
    \ that -- and\n   meant it -- I still feel we did a good enough job for average-plus\n\
    \   system types to cope with.  (The fact that numerous Hosts are on the\n   Net\
    \ is evidence of this.) Unfortunately, however, average-minus\n   system types\
    \ do exist and must also be contended with.  Therefore, if\n   we do not make\
    \ a concerted effort to \"idiot proof\" our protocols, we\n   may anticipate further\
    \ repetitions of the sad state the site under\n   discussion found itself in before\
    \ it happened upon them.  (And, it\n   must regretfully be observed, support of\
    \ the \"real\" ARPANET has\n   deteriorated to the point that the massive effort\
    \ required to over-\n   explain ourselves probably could not be launched in the\
    \ prevailing\n   climate.  More on this point later.)\n   Case in point number\
    \ two is potentially far graver than a mere\n   \"philosophical\" muddle over\
    \ bringing one site aboard.  It involves an\n   attempt by one of the Armed Services\
    \ to network a large number of\n   large machines using the ARPANET as a model.\
    \  The implementation of\n   the software house with no known ARPANET expertise.\
    \  The\n   communications subnet and the hardware interfacing to the Hosts was\n\
    \   subcontracted to a well-known hardware manufacturer with no known\n   ARPANET\
    \ expertise.  (As an aside, but because it's so startling I\n   can't forbear,\
    \ the \"system architect\" for the target network is still\n   another well-known\
    \ hardware manucfacturer (!), with, of course, no\n   known ARPANET expertise.)\
    \ To make a long, continuing story short, it\n   is currently the case that the\
    \ \"real\" ARPANET system whose hardware\n   corresponds most closely to the machines\
    \ being netted here (even\n   though it is benchmarked at a rather lower \"mips\"\
    \ (million\n   instructions per second) rate than the target net's machines) can\n\
    \   transfer files at rates in excess of 28,000 bits per second\n   (following\
    \ the rather cumbersome full ARPANET FTP) from a small\n   configuration developement\
    \ machine to a lightly loaded (but still\n   running in excess of 20 users) service\
    \ machine one Network \"hop\"\n   away, while the new system achieves rates which\
    \ I am apparently not\n   permitted to quantify but are very considerably lower\
    \ even though\n   only one process is being run on each machine -- also one \"\
    hop\" away\n   --  and the protocol for file transfer is nowhere near so general\
    \ as\n   in the ARPANET.  Given a year or two, the situation can presumably be\n\
    \   rectified, but at present it is fair --  if somewhat fanciful -- to\n   say\
    \ that if the Japanese were capable of only like level of\n   technology transfer\
    \ they'd still be trying to make up their balance\n   of trade with those cute\
    \ little parasols on matchsticks.\n   Yet what has gone amiss here in Horror Story\
    \ 2? I submit that the\n   choice of subcontractors was based upon a misapprehension\
    \ of the\n   level of technological sophistication associated with the ARPANET,\n\
    \   and that what was (is?) needed is a subcontract to a knowledgeable\n   ARPANET\
    \ source (and I don't mean to the usual, profit-marking place\n   -- though I\
    \ guess I trust them for the subnet), rather than to\n   \"outsiders\".  (I don't\
    \ even mean to any particular place on the Net;\n   maybe what's needed is to\
    \ form a meta-place out of the whole Net.\n   More on this, too, later.)  The\
    \ real point is that the model was\n   essentially ignored by the putative model-followers,\
    \ and --\n   demonstrably -- it shouldn't have been.\n   Case three should go\
    \ a long way toward dispelling any impressions\n   that might be building in the\
    \ reader's mind that I'm some sort of\n   hardcore ARPANET chauvinist.  For even\
    \ \"insiders\" have blown some.\n   This is actually a dual case, for it involves\
    \ two unsuccessful\n   attempts to furnish terminal support mini-Hosts for the\
    \ Net.  In one\n   case, the choice of machine was faulty; even with additional\
    \ core\n   memory field retrofitted, buffers cannot be furnished to support\n\
    \   reasonable data rates without imposing considerable unnecessary Host\n   overhead\
    \ in the processing of too frequent Host-Host Allocation\n   commands.  Nor is\
    \ there enough room to furnish more than a\n   rudimentary command language in\
    \ the mini.  Now these were\n   knowledgeable, reasonably well managed \"insiders\"\
    \ -- but they were\n   contractually not in a position to heed the technical intuitions\
    \ of\n   several of themselves and the technical intuitions of many of their\n\
    \   colleagues throughout the Network Working Group that they'd been\n   painted\
    \ into a corner.\n   In the second sub-case, the hardware and contractual obligations\n\
    \   appear to have been right, but ill-considered choice of\n   implementation\
    \ language and inadequate management have prevented the\n   project's full completion\
    \ to this time (some two years after its\n   inception).  Again, there was forewarnings\
    \ from the NWG, in that we\n   had tried to alert them quite early about the language\
    \ issue.  (On\n   the management level, we could only sympathize -- and in some\
    \ cases\n   empathize -- but it is at least a tentacle position to take that the\n\
    \   ARPANET as a whole happened despite, not because of, management.)  (I\n  \
    \ guess I am an ace system programmer chauvinist.)\n   The final case to be cited\
    \ here involves another military effort.\n   This one I'm not even sure I'm supposed\
    \ to know about, much less talk\n   about.  But I can say that it involves a subcontractor's\
    \ attempt to\n   attach several special purpose machines to a major ARPANET server\
    \ by\n   means of an internally invented set of machines and protocols.  My\n\
    \   information suggests that when asked why they failed to follow the\n   apparently\
    \ obvious course of using ARPANET technology (facilities for\n   which do, of\
    \ course, already exist on the target server), the\n   subcontractors essentially\
    \ replied that they hadn't felt like it.\n   They also made their approach work\
    \ yet, and it's been something like\n   a couple of years they've been trying.\n\
    \   Then three's the fad to simulate RJE terminals... but to use that as\n   Horror\
    \ Story 5 would be begging the question -- for now.\n"
- title: SOME MORALS
  contents:
  - "SOME MORALS\n   Rather than search out any more dirty linen, let's pause and\
    \ look for\n   the lessons to be learned.  In the first place, it borders on the\n\
    \   obvious that for any technical project the \"right\" technicians must\n  \
    \ be found and empowered to perform it.  Despite the generation of\n   over-sell\
    \ on the \"power of computers\", they still absolutely require\n   intelligent,\
    \ competent programming -- which in turn requires\n   intelligent, competent programmers.\
    \  And, at the risk of gilding the\n   ragweed, not all self-professed programmers\
    \ are intelligent and/or\n   competent.\n   In the second, and more interesting,\
    \ place, all unknowing the ARPANET\n   has attracted or engendered an \"in-group\"\
    \ of extremely good system\n   types -- who have learned through some sort of\
    \ natural selection\n   process to work well together despite the immense handicap\
    \ of the\n   heterogeneity of our various \"nome\" systems' assumptions.  We not\n\
    \   only have developed a common tongue, but some of us even like each\n   other.\
    \  (It should be noted that Appendix 1 was specified on a\n   Wednesday afternoon\
    \ and a little bit of a Thursday morning.  Jon and\n   Jim and I had been there\
    \ before.)  It seems quite clear to me that\n   the organizations for whom this\
    \ report is intended should avail\n   themselves of the expertise which exists\
    \ in the NWG; we've got a\n   reasonable track record, after all, especially in\
    \ comparison to\n   others who have attempting networking.  Many of us also feel\
    \ quite\n   strongly that we didn't get a chance to finish the job on the\n  \
    \ ARPANET, and would like to be given the chance to \"do it right\" --\n   especially\
    \ in view of the errors which have been committed in our\n   name.  (This is particularly\
    \ important because the old gang is\n   beginning to scatter.  For myself, I expect\
    \ this will be my last RFC.\n   Well, at least I've tried to make the most of\
    \ it.)  The ARPANET is no\n   more a finished product than ANTS or ELF -- but\
    \ all of them could and\n   should be.\n   In the final place now, a rather trite\
    \ moral must be drawn: Technical\n   competence is extremely difficult to assess\
    \ a priori.  (I'm\n   inordinately fond of saying \"Don't ask me what I'm going\
    \ to say, I\n   haven't said it yet\" myself.)  But \"track records\" ARE important,\
    \ and\n   competence CAN be demonstrated -- to a suitable jury of technical\n\
    \   peers.  Therefore, beware of plausible sounding subcontractors who\n   tell\
    \ you \"It's easy\".  In our field, and particularly in getting all\n   those\
    \ strange machines which were developed by people who by and\n   large didn't\
    \ talk to each other to \"talk\" to each other, it's NOT\n   easy.  I'm willing\
    \ to claim that it will be easier letting some NWG\n   types do it with the H-FP\
    \ approach, but it might never be really easy\n   -- where \"never\" means for\
    \ the next 10 years or so, until \"real\"\n   networking comes off the shelf with\
    \ the operating system (which\n   itself scarcely comes off the shelf today) --\
    \ but don't get me\n   started on The Manufacturers.\n"
- title: BEYOND THE PAIN PRINCIPLE
  contents:
  - "BEYOND THE PAIN PRINCIPLE\n   So it's not easy.  It's also not impossible.  Indeed,\
    \ the time\n   appears to be ripe right now avoiding generating a whole new\n\
    \   generation of horror stories, by sensitizing decision makers to\n   technical\
    \ realities and \"doing things right\" this time around.\n   Having seized this\
    \ occasion to say some things to that end which I\n   think are important, I must\
    \ in good conscience stand ready to defend\n   the assertions I've made of error\
    \ in some camps and of correctness in\n   what I might loosely call \"our\" camp.\
    \  I do so stand, with a right\n   good will.  If any reader desires more corroborative\
    \ detail -- or\n   merely to see if I rant like this in contexts other than RFCs\
    \ (or\n   even to have a go at my explanation of the common intermediate\n   representation\
    \ principle), well, I'm still in the ARPANET Directory\n   -- even though the\
    \ phone number's different (try 703-790-6375).  The\n   mailbox remains accurate\
    \ (even though there is no \"ARPANET mail\n   protocol\" it's marvelous how stopgaps\
    \ endure).\n          [This RFC was put into machine readable form for entry]\n\
    \          [into the online RFC by Helene Morin, Viagenie,12/1999]\n"
