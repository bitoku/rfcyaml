- contents:
  - "                     SACK-IMMEDIATELY Extension for\n                the Stream
    Control Transmission Protocol\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document updates RFC 4960 by defining a method for the sender
    of\n   a DATA chunk to indicate that the corresponding Selective\n   Acknowledgment
    (SACK) chunk should be sent back immediately and\n   should not be delayed.  It
    is done by specifying a bit in the DATA\n   chunk header, called the (I)mmediate
    bit, which can get set by either\n   the Stream Control Transmission Protocol
    (SCTP) implementation or the\n   application using an SCTP stack.  Since unknown
    flags in chunk\n   headers are ignored by SCTP implementations, this extension
    does not\n   introduce any interoperability problems.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7053.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . . . 2\n   2.  Conventions . . . . . . . . . . . . . . . . . . . . . .
    . . . . 3\n   3.  The (I)mmediate Bit in the DATA Chunk Header  . . . . . . .
    . . 3\n   4.  Use Cases . . . . . . . . . . . . . . . . . . . . . . . . . . .
    4\n     4.1.  Triggering at the Application Level . . . . . . . . . . . . 4\n
    \    4.2.  Triggering at the SCTP Level  . . . . . . . . . . . . . . . 4\n   5.
    \ Procedures  . . . . . . . . . . . . . . . . . . . . . . . . . . 5\n     5.1.
    \ Sender-Side Considerations  . . . . . . . . . . . . . . . . 5\n     5.2.  Receiver
    Side Considerations  . . . . . . . . . . . . . . . 5\n   6.  Interoperability
    Considerations . . . . . . . . . . . . . . . . 5\n   7.  Socket API Considerations
    . . . . . . . . . . . . . . . . . . . 5\n   8.  IANA Considerations . . . . .
    . . . . . . . . . . . . . . . . . 6\n   9.  Security Considerations . . . . .
    . . . . . . . . . . . . . . . 7\n   10. Acknowledgments . . . . . . . . . . .
    . . . . . . . . . . . . . 7\n   11. References  . . . . . . . . . . . . . . .
    . . . . . . . . . . . 7\n     11.1. Normative References  . . . . . . . . . .
    . . . . . . . . . 7\n     11.2. Informative References  . . . . . . . . . . .
    . . . . . . . 7\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   According to [RFC4960], the receiver of a DATA chunk should
    use\n   delayed SACKs.  This delay is completely controlled by the receiver\n
    \  of the DATA chunk and remains the default behavior.\n   In specific situations,
    the delaying of SACKs results in reduced\n   performance of the protocol:\n   1.
    \ If such a situation can be detected by the receiver, the\n       corresponding
    SACK can be sent immediately.  For example,\n       [RFC4960] recommends immediately
    sending the SACK if the receiver\n       has detected message loss or message
    duplication.\n   2.  However, if the situation can only be detected by the sender
    of\n       the DATA chunk, [RFC4960] provides no method of avoiding a delay\n
    \      in sending the SACK.  Examples of these situations include ones\n       that
    require interaction with the application (e.g., applications\n       using the
    SCTP_SENDER_DRY_EVENT, see Section 4.1) and ones that\n       can be detected
    by the SCTP stack itself (e.g., closing the\n       association, hitting window
    limits, or resetting streams, see\n       Section 4.2).\n   To overcome the limitation
    described in the second case, this\n   document describes a simple extension of
    the SCTP DATA chunk by\n   defining a new flag, the \"I bit\".  By setting this
    bit, the sender of\n   a DATA chunk indicates that the corresponding SACK chunk
    should not\n   be delayed.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Conventions
- contents:
  - "3.  The (I)mmediate Bit in the DATA Chunk Header\n   Figure 1 shows the extended
    DATA chunk.\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |   Type = 0    |  Res  |I|U|B|E|           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                              TSN                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |        Stream Identifier      |     Stream Sequence Number    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                  Payload Protocol Identifier                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  \\                                                               \\\n   /                           User
    Data                           /\n   \\                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                   Figure
    1: Extended DATA chunk format\n   The only difference between the DATA chunk in
    Figure 1 and the DATA\n   chunk defined in [RFC4960] is the addition of the I
    bit in the flags\n   field of the DATA chunk header.\n   [RFC4960] defines the
    Reserved field and specifies that these bits\n   should be set to 0 by the sender
    and ignored by the receiver.\n"
  title: 3.  The (I)mmediate Bit in the DATA Chunk Header
- contents:
  - "4.  Use Cases\n   The setting of the I bit can either be triggered by the application\n
    \  using SCTP or by the SCTP stack itself.  The following two\n   subsections
    provide a non-exhaustive list of examples of how the I\n   bit may be set.\n"
  - contents:
    - "4.1.  Triggering at the Application Level\n   One example of a situation in
      which it may be desirable for an\n   application to trigger the setting of the
      I bit involves the\n   SCTP_SENDER_DRY_EVENT in the SCTP socket API [RFC6458].
      \ Upper layers\n   of SCTP that use the socket API as defined in [RFC6458] may
      subscribe\n   to the SCTP_SENDER_DRY_EVENT to be notified as soon as no user
      data\n   is outstanding.  To avoid an unnecessary delay, the application can\n
      \  request that the I bit be set when sending the last user message\n   before
      waiting for the event.  This results in setting the I bit of\n   the last DATA
      chunk corresponding to the user message; this is\n   possible using the extension
      of the socket API described in\n   Section 7.\n"
    title: 4.1.  Triggering at the Application Level
  - contents:
    - "4.2.  Triggering at the SCTP Level\n   There are also situations in which the
      SCTP implementation can set\n   the I bit without interacting with the upper
      layer.\n   If the association is in the SHUTDOWN-PENDING state, setting the
      I\n   bit reduces the number of simultaneous associations for a busy server\n
      \  handling short-lived associations.\n   Another case is where the sending
      of a DATA chunk fills the\n   congestion or receiver window.  Setting the I
      bit in these cases\n   improves the throughput of the transfer.\n   If an SCTP
      association supports the SCTP Stream Reconfiguration\n   extension defined in
      [RFC6525], the performance can be improved by\n   setting the I bit when there
      are pending reconfiguration requests\n   that require that there be no outstanding
      DATA chunks.\n"
    title: 4.2.  Triggering at the SCTP Level
  title: 4.  Use Cases
- contents:
  - '5.  Procedures

    '
  - contents:
    - "5.1.  Sender-Side Considerations\n   Whenever the sender of a DATA chunk can
      benefit from the\n   corresponding SACK chunk being sent back without delay,
      the sender\n   MAY set the I bit in the DATA chunk header.  Please note that
      why the\n   sender has set the I bit is irrelevant to the receiver.\n   Reasons
      for setting the I bit include, but are not limited to (see\n   Section 4 for
      the benefits):\n   o  The application requests to set the I bit of the last
      DATA chunk\n      of a user message when providing the user message to the SCTP\n
      \     implementation (see Section 7).\n   o  The sender is in the SHUTDOWN-PENDING
      state.\n   o  The sending of a DATA chunk fills the congestion or receiver\n
      \     window.\n   o  The sending of an Outgoing SSN Reset Request Parameter
      or an SSN/\n      TSN Reset Request Parameter is pending, if the association\n
      \     supports the Stream Reconfiguration extension defined in\n      [RFC6525].\n"
    title: 5.1.  Sender-Side Considerations
  - contents:
    - "5.2.  Receiver Side Considerations\n   Upon receipt of an SCTP packet containing
      a DATA chunk with the I bit\n   set, the receiver SHOULD NOT delay the sending
      of the corresponding\n   SACK chunk, i.e., the receiver SHOULD immediately respond
      with the\n   corresponding SACK chunk.\n"
    title: 5.2.  Receiver Side Considerations
  title: 5.  Procedures
- contents:
  - "6.  Interoperability Considerations\n   According to [RFC4960], the receiver
    of a DATA chunk with the I bit\n   set should ignore this bit when it does not
    support the extension\n   described in this document.  Since the sender of the
    DATA chunk is\n   able to handle this case, there is no requirement for negotiating
    the\n   support of the feature described in this document.\n"
  title: 6.  Interoperability Considerations
- contents:
  - "7.  Socket API Considerations\n   This section describes how the socket API defined
    in [RFC6458] is\n   extended to provide a way for the application to set the I
    bit.\n   Please note that this section is informational only.\n   A socket API
    implementation based on [RFC6458] needs to be extended\n   to allow the application
    to set the I bit of the last DATA chunk when\n   sending each user message.\n
    \  This can be done by setting a flag called SCTP_SACK_IMMEDIATELY in\n   the
    snd_flags field of the struct sctp_sndinfo structure when using\n   sctp_sendv()
    or sendmsg().  If the deprecated struct sctp_sndrcvinfo\n   structure is used
    instead when calling sctp_send(), sctp_sendx(), or\n   sendmsg(), the SCTP_SACK_IMMEDIATELY
    flag can be set in the\n   sinfo_flags field.  When using the deprecated function\n
    \  sctp_sendmsg(), the SCTP_SACK_IMMEDIATELY flag can be in the flags\n   parameter.\n"
  title: 7.  Socket API Considerations
- contents:
  - "8.  IANA Considerations\n   Following the chunk flag registration procedure defined
    in [RFC6096],\n   IANA has registered a new bit, the I bit, for the DATA chunk.\n
    \  The \"Chunk Flags\" registry for SCTP has been updated as described in\n   the
    following table.\n                             DATA Chunk Flags\n            +------------------+-----------------+-----------+\n
    \           | Chunk Flag Value | Chunk Flag Name | Reference |\n            +------------------+-----------------+-----------+\n
    \           | 0x01             | E bit           | [RFC4960] |\n            |
    0x02             | B bit           | [RFC4960] |\n            | 0x04             |
    U bit           | [RFC4960] |\n            | 0x08             | I bit           |
    [RFC7053] |\n            | 0x10             | Unassigned      |           |\n
    \           | 0x20             | Unassigned      |           |\n            |
    0x40             | Unassigned      |           |\n            | 0x80             |
    Unassigned      |           |\n            +------------------+-----------------+-----------+\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Security Considerations\n   See [RFC4960] for general security considerations
    for SCTP.  In\n   addition, a malicious sender can force its peer to send packets\n
    \  containing a SACK chunk for each received packet containing DATA\n   chunks
    instead of every other received packet containing DATA chunks.\n   This could
    impact the network, resulting in more packets sent on the\n   network, or the
    peer, because the generating and sending of the\n   packets has some processing
    cost.  However, the additional packets\n   can only contain the simplest SACK
    chunk (no gap reports, no\n   duplicate TSNs), since in cases of packet drops
    or reordering in the\n   network a SACK chunk would be sent immediately anyway.
    \ Therefore,\n   this does not introduce a significant additional processing cost
    on\n   the receiver side.  This also does not result in more traffic in the\n
    \  network, because a receiver sending a SACK for every packet is\n   already
    permitted.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  Acknowledgments\n   The authors wish to thank Mark Allmann, Brian Bidulock,
    David Black,\n   Anna Brunstrom, Gorry Fairhurst, Janardhan Iyengar, Kacheong
    Poon,\n   and Michael Welzl for their invaluable comments.\n"
  title: 10.  Acknowledgments
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC4960]  Stewart, R., \"Stream Control Transmission Protocol\",\n
      \             RFC 4960, September 2007.\n   [RFC6096]  Tuexen, M. and R. Stewart,
      \"Stream Control Transmission\n              Protocol (SCTP) Chunk Flags Registration\",
      RFC 6096,\n              January 2011.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [RFC6458]  Stewart, R., Tuexen, M., Poon,
      K., Lei, P., and V.\n              Yasevich, \"Sockets API Extensions for the
      Stream Control\n              Transmission Protocol (SCTP)\", RFC 6458, December
      2011.\n   [RFC6525]  Stewart, R., Tuexen, M., and P. Lei, \"Stream Control\n
      \             Transmission Protocol (SCTP) Stream Reconfiguration\",\n              RFC
      6525, February 2012.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Authors' Addresses\n   Michael Tuexen\n   Muenster University of Applied Sciences\n
    \  Stegerwaldstr. 39\n   48565 Steinfurt\n   DE\n   EMail: tuexen@fh-muenster.de\n
    \  Irene Ruengeler\n   Muenster University of Applied Sciences\n   Stegerwaldstr.
    39\n   48565 Steinfurt\n   DE\n   EMail: i.ruengeler@fh-muenster.de\n   Randall
    R. Stewart\n   Adara Networks\n   Chapin, SC  29036\n   US\n   EMail: randall@lakerest.net\n"
  title: Authors' Addresses
