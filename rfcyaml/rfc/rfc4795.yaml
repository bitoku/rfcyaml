- title: __initial_text__
  contents:
  - '              Link-Local Multicast Name Resolution (LLMNR)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This document was originally intended for advancement as a Proposed\n\
    \   Standard, but the IETF did not achieve consensus on the approach.\n   The\
    \ document has had significant review and input.  At time of\n   publication,\
    \ early versions were implemented and deployed.\n"
- title: Abstract
  contents:
  - "Abstract\n   The goal of Link-Local Multicast Name Resolution (LLMNR) is to enable\n\
    \   name resolution in scenarios in which conventional DNS name\n   resolution\
    \ is not possible.  LLMNR supports all current and future\n   DNS formats, types,\
    \ and classes, while operating on a separate port\n   from DNS, and with a distinct\
    \ resolver cache.  Since LLMNR only\n   operates on the local link, it cannot\
    \ be considered a substitute for\n   DNS.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Requirements ...............................................3\n  \
    \    1.2. Terminology ................................................4\n   2.\
    \ Name Resolution Using LLMNR .....................................4\n      2.1.\
    \ LLMNR Packet Format ........................................5\n           2.1.1.\
    \ LLMNR Header Format .................................5\n      2.2. Sender Behavior\
    \ ............................................8\n      2.3. Responder Behavior\
    \ .........................................9\n      2.4. Unicast Queries and Responses\
    \ .............................11\n      2.5. \"Off-Link\" Detection ......................................11\n\
    \      2.6. Responder Responsibilities ................................12\n  \
    \    2.7. Retransmission and Jitter .................................13\n    \
    \  2.8. RR TTL ....................................................14\n      2.9.\
    \ Use of the Authority and Additional Sections ..............14\n   3. Usage Model\
    \ ....................................................15\n      3.1. LLMNR Configuration\
    \ .......................................17\n   4. Conflict Resolution ............................................18\n\
    \      4.1. Uniqueness Verification ...................................19\n  \
    \    4.2. Conflict Detection and Defense ............................20\n    \
    \  4.3. Considerations for Multiple Interfaces ....................21\n      4.4.\
    \ API Issues ................................................22\n   5. Security\
    \ Considerations ........................................23\n      5.1. Denial\
    \ of Service .........................................23\n      5.2. Spoofing\
    \ ..................................................24\n      5.3. Authentication\
    \ ............................................25\n      5.4. Cache and Port Separation\
    \ .................................25\n   6. IANA Considerations ............................................26\n\
    \   7. Constants ......................................................26\n  \
    \ 8. References .....................................................27\n    \
    \  8.1. Normative References ......................................27\n      8.2.\
    \ Informative References ....................................27\n   9. Acknowledgments\
    \ ................................................29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document discusses Link-Local Multicast Name Resolution\
    \ (LLMNR),\n   which is based on the DNS packet format and supports all current\
    \ and\n   future DNS formats, types, and classes.  LLMNR operates on a separate\n\
    \   port from the Domain Name System (DNS), with a distinct resolver\n   cache.\n\
    \   Since LLMNR only operates on the local link, it cannot be considered\n   a\
    \ substitute for DNS.  Link-scope multicast addresses are used to\n   prevent\
    \ propagation of LLMNR traffic across routers, potentially\n   flooding the network.\
    \  LLMNR queries can also be sent to a unicast\n   address, as described in Section\
    \ 2.4.\n   Propagation of LLMNR packets on the local link is considered\n   sufficient\
    \ to enable name resolution in small networks.  In such\n   networks, if a network\
    \ has a gateway, then typically the network is\n   able to provide DNS server\
    \ configuration.  Configuration issues are\n   discussed in Section 3.1.\n   In\
    \ the future, it may be desirable to consider use of multicast name\n   resolution\
    \ with multicast scopes beyond the link-scope.  This could\n   occur if LLMNR\
    \ deployment is successful, the need arises for\n   multicast name resolution\
    \ beyond the link-scope, or multicast routing\n   becomes ubiquitous.  For example,\
    \ expanded support for multicast name\n   resolution might be required for mobile\
    \ ad-hoc networks.\n   Once we have experience in LLMNR deployment in terms of\n\
    \   administrative issues, usability, and impact on the network, it will\n   be\
    \ possible to reevaluate which multicast scopes are appropriate for\n   use with\
    \ multicast name resolution.  IPv4 administratively scoped\n   multicast usage\
    \ is specified in \"Administratively Scoped IP\n   Multicast\" [RFC2365].\n  \
    \ Service discovery in general, as well as discovery of DNS servers\n   using\
    \ LLMNR in particular, is outside the scope of this document, as\n   is name resolution\
    \ over non-multicast capable media.\n"
- title: 1.1.  Requirements
  contents:
  - "1.1.  Requirements\n   In this document, several words are used to signify the\
    \ requirements\n   of the specification.  The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\",\n   and \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   [RFC2119].\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   This document assumes familiarity with DNS terminology\
    \ defined in\n   [RFC1035].  Other terminology used in this document includes:\n\
    \   Routable Address An address other than a link-local address.  This\n     \
    \               includes globally routable addresses, as well as\n           \
    \         private addresses.\n   Reachable        An LLMNR responder considers\
    \ one of its addresses\n                    reachable over a link if it will respond\
    \ to an\n                    Address Resolution Protocol (ARP) or Neighbor\n \
    \                   Discovery query for that address received on that\n      \
    \              link.\n   Responder        A host that listens to LLMNR queries,\
    \ and responds\n                    to those for which it is authoritative.\n\
    \   Sender           A host that sends an LLMNR query.\n   UNIQUE           There\
    \ are some scenarios when multiple responders\n                    may respond\
    \ to the same query.  There are other\n                    scenarios when only\
    \ one responder may respond to a\n                    query.  Names for which\
    \ only a single responder is\n                    anticipated are referred to\
    \ as UNIQUE.  Name\n                    uniqueness is configured on the responder,\
    \ and\n                    therefore uniqueness verification is the responder's\n\
    \                    responsibility.\n"
- title: 2.  Name Resolution Using LLMNR
  contents:
  - "2.  Name Resolution Using LLMNR\n   LLMNR queries are sent to and received on\
    \ port 5355.  The IPv4 link-\n   scope multicast address a given responder listens\
    \ to, and to which a\n   sender sends queries, is 224.0.0.252.  The IPv6 link-scope\
    \ multicast\n   address a given responder listens to, and to which a sender sends\
    \ all\n   queries, is FF02:0:0:0:0:0:1:3.\n   Typically, a host is configured\
    \ as both an LLMNR sender and a\n   responder.  A host MAY be configured as a\
    \ sender, but not a\n   responder.  However, a host configured as a responder\
    \ MUST act as a\n   sender, if only to verify the uniqueness of names as described\
    \ in\n   Section 4.  This document does not specify how names are chosen or\n\
    \   configured.  This may occur via any mechanism, including DHCPv4\n   [RFC2131]\
    \ or DHCPv6 [RFC3315].\n   A typical sequence of events for LLMNR usage is as\
    \ follows:\n   (a)  An LLMNR sender sends an LLMNR query to the link-scope multicast\n\
    \        address(es), unless a unicast query is indicated, as specified\n    \
    \    in Section 2.4.\n   (b)  A responder responds to this query only if it is\
    \ authoritative\n        for the name in the query.  A responder responds to a\
    \ multicast\n        query by sending a unicast UDP response to the sender.  Unicast\n\
    \        queries are responded to as indicated in Section 2.4.\n   (c)  Upon reception\
    \ of the response, the sender processes it.\n   The sections that follow provide\
    \ further details on sender and\n   responder behavior.\n"
- title: 2.1.  LLMNR Packet Format
  contents:
  - "2.1.  LLMNR Packet Format\n   LLMNR is based on the DNS packet format defined\
    \ in [RFC1035] Section\n   4 for both queries and responses.  LLMNR implementations\
    \ SHOULD send\n   UDP queries and responses only as large as are known to be\n\
    \   permissible without causing fragmentation.  When in doubt, a maximum\n   packet\
    \ size of 512 octets SHOULD be used.  LLMNR implementations MUST\n   accept UDP\
    \ queries and responses as large as the smaller of the link\n   MTU or 9194 octets\
    \ (Ethernet jumbo frame size of 9KB (9216) minus 22\n   octets for the header,\
    \ VLAN tag and Cyclic Redundancy Check (CRC)).\n"
- title: 2.1.1.  LLMNR Header Format
  contents:
  - "2.1.1.  LLMNR Header Format\n   LLMNR queries and responses utilize the DNS header\
    \ format defined in\n   [RFC1035] with exceptions noted below:\n             \
    \                         1  1  1  1  1  1\n        0  1  2  3  4  5  6  7  8\
    \  9  0  1  2  3  4  5\n      +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \      |                      ID                       |\n      +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \      |QR|   Opcode  | C|TC| T| Z| Z| Z| Z|   RCODE   |\n      +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \      |                    QDCOUNT                    |\n      +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \      |                    ANCOUNT                    |\n      +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \      |                    NSCOUNT                    |\n      +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \      |                    ARCOUNT                    |\n      +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \   where:\n   ID      A 16-bit identifier assigned by the program that generates\n\
    \           any kind of query.  This identifier is copied from the query\n   \
    \        to the response and can be used by the sender to match\n           responses\
    \ to outstanding queries.  The ID field in a query\n           SHOULD be set to\
    \ a pseudo-random value.  For advice on\n           generation of pseudo-random\
    \ values, please consult [RFC4086].\n   QR      Query/Response.  A 1-bit field,\
    \ which, if set, indicates that\n           the message is an LLMNR response;\
    \ if clear, then the message\n           is an LLMNR query.\n   OPCODE  A 4-bit\
    \ field that specifies the kind of query in this\n           message.  This value\
    \ is set by the originator of a query and\n           copied into the response.\
    \  This specification defines the\n           behavior of standard queries and\
    \ responses (opcode value of\n           zero).  Future specifications may define\
    \ the use of other\n           opcodes with LLMNR.  LLMNR senders and responders\
    \ MUST\n           support standard queries (opcode value of zero).  LLMNR\n \
    \          queries with unsupported OPCODE values MUST be silently\n         \
    \  discarded by responders.\n   C       Conflict.  When set within a query, the\
    \ 'C'onflict bit\n           indicates that a sender has received multiple LLMNR\
    \ responses\n           to this query.  In an LLMNR response, if the name is\n\
    \           considered UNIQUE, then the 'C' bit is clear; otherwise, it\n    \
    \       is set.  LLMNR senders do not retransmit queries with the 'C'\n      \
    \     bit set.  Responders MUST NOT respond to LLMNR queries with\n          \
    \ the 'C' bit set, but may start the uniqueness verification\n           process,\
    \ as described in Section 4.2.\n   TC      TrunCation.  The 'TC' bit specifies\
    \ that this message was\n           truncated due to length greater than that\
    \ permitted on the\n           transmission channel.  The 'TC' bit MUST NOT be\
    \ set in an\n           LLMNR query and, if set, is ignored by an LLMNR responder.\n\
    \           If the 'TC' bit is set in an LLMNR response, then the sender\n   \
    \        SHOULD resend the LLMNR query over TCP using the unicast\n          \
    \ address of the responder as the destination address.  If the\n           sender\
    \ receives a response to the TCP query, then it SHOULD\n           discard the\
    \ UDP response with the TC bit set.  See  [RFC2181]\n           and Section 2.4\
    \ of this specification for further discussion\n           of the 'TC' bit.\n\
    \   T       Tentative.  The 'T'entative bit is set in a response if the\n    \
    \       responder is authoritative for the name, but has not yet\n           verified\
    \ the uniqueness of the name.  A responder MUST ignore\n           the 'T' bit\
    \ in a query, if set.  A response with the 'T' bit\n           set is silently\
    \ discarded by the sender, except if it is a\n           uniqueness query, in\
    \ which case, a conflict has been detected\n           and a responder MUST resolve\
    \ the conflict as described in\n           Section 4.1.\n   Z       Reserved for\
    \ future use.  Implementations of this\n           specification MUST set these\
    \ bits to zero in both queries and\n           responses.  If these bits are set\
    \ in a LLMNR query or\n           response, implementations of this specification\
    \ MUST ignore\n           them.  Since reserved bits could conceivably be used\
    \ for\n           different purposes than in DNS, implementers are advised not\n\
    \           to enable processing of these bits in an LLMNR implementation\n  \
    \         starting from a DNS code base.\n   RCODE   Response code.  This 4-bit\
    \ field is set as part of LLMNR\n           responses.  In an LLMNR query, the\
    \ sender MUST set RCODE to\n           zero; the responder ignores the RCODE and\
    \ assumes it to be\n           zero.  The response to a multicast LLMNR query\
    \ MUST have\n           RCODE set to zero.  A sender MUST silently discard an\
    \ LLMNR\n           response with a non-zero RCODE sent in response to a\n   \
    \        multicast query.\n           If an LLMNR responder is authoritative for\
    \ the name in a\n           multicast query, but an error is encountered, the\
    \ responder\n           SHOULD send an LLMNR response with an RCODE of zero, no\
    \ RRs\n           in the answer section, and the TC bit set.  This will cause\n\
    \           the query to be resent using TCP, and allow the inclusion of\n   \
    \        a non-zero RCODE in the response to the TCP query.\n           Responding\
    \ with the TC bit set is preferable to not sending a\n           response, since\
    \ it enables errors to be diagnosed.  This may\n           be required, for example,\
    \ when an LLMNR query includes a TSIG\n           RR in the additional section,\
    \ and the responder encounters a\n           problem that requires returning a\
    \ non-zero RCODE.  TSIG error\n           conditions defined in [RFC2845] include\
    \ a TSIG RR in an\n           unacceptable position (RCODE=1) or a TSIG RR that\
    \ does not\n           validate (RCODE=9 with TSIG ERROR 17 (BADKEY) or 16\n \
    \          (BADSIG)).\n           Since LLMNR responders only respond to LLMNR\
    \ queries for\n           names for which they are authoritative, LLMNR responders\
    \ MUST\n           NOT respond with an RCODE of 3; instead, they should not\n\
    \           respond at all.\n           LLMNR implementations MUST support EDNS0\
    \ [RFC2671] and\n           extended RCODE values.\n   QDCOUNT An unsigned 16-bit\
    \ integer specifying the number of entries\n           in the question section.\
    \  A sender MUST place only one\n           question into the question section\
    \ of an LLMNR query.  LLMNR\n           responders MUST silently discard LLMNR\
    \ queries with QDCOUNT\n           not equal to one.  LLMNR senders MUST silently\
    \ discard LLMNR\n           responses with QDCOUNT not equal to one.\n   ANCOUNT\
    \ An unsigned 16-bit integer specifying the number of resource\n           records\
    \ in the answer section.  LLMNR responders MUST\n           silently discard LLMNR\
    \ queries with ANCOUNT not equal to\n           zero.\n   NSCOUNT An unsigned\
    \ 16-bit integer specifying the number of name\n           server resource records\
    \ in the authority records section.\n           Authority record section processing\
    \ is described in Section\n           2.9.  LLMNR responders MUST silently discard\
    \ LLMNR queries\n           with NSCOUNT not equal to zero.\n   ARCOUNT An unsigned\
    \ 16-bit integer specifying the number of resource\n           records in the\
    \ additional records section.  Additional record\n           section processing\
    \ is described in Section 2.9.\n"
- title: 2.2.  Sender Behavior
  contents:
  - "2.2.  Sender Behavior\n   A sender MAY send an LLMNR query for any legal resource\
    \ record type\n   (e.g., A, AAAA, PTR, SRV) to the link-scope multicast address.\
    \  As\n   described in Section 2.4, a sender MAY also send a unicast query.\n\
    \   The sender MUST anticipate receiving no responses to some LLMNR\n   queries,\
    \ in the event that no responders are available within the\n   link-scope.  If\
    \ no response is received, a resolver treats it as a\n   response that the name\
    \ does not exist (RCODE=3 is returned).  A\n   sender can handle duplicate responses\
    \ by discarding responses with a\n   source IP address and ID field that duplicate\
    \ a response already\n   received.\n   When multiple valid LLMNR responses are\
    \ received with the 'C' bit\n   set, they SHOULD be concatenated and treated in\
    \ the same manner that\n   multiple RRs received from the same DNS server would\
    \ be.  However,\n   responses with the 'C' bit set SHOULD NOT be concatenated\
    \ with\n   responses with the 'C' bit clear; instead, only the responses with\n\
    \   the 'C' bit set SHOULD be returned.  If valid LLMNR response(s) are\n   received\
    \ along with error response(s), then the error responses are\n   silently discarded.\n\
    \   Since the responder may order the RRs in the response so as to\n   indicate\
    \ preference, the sender SHOULD preserve ordering in the\n   response to the querying\
    \ application.\n"
- title: 2.3.  Responder Behavior
  contents:
  - "2.3.  Responder Behavior\n   An LLMNR response MUST be sent to the sender via\
    \ unicast.\n   Upon configuring an IP address, responders typically will synthesize\n\
    \   corresponding A, AAAA and PTR RRs so as to be able to respond to\n   LLMNR\
    \ queries for these RRs.  An SOA RR is synthesized only when a\n   responder has\
    \ another RR in addition to the SOA RR;  the SOA RR MUST\n   NOT be the only RR\
    \ that a responder has.  However, in general,\n   whether RRs are manually or\
    \ automatically created is an\n   implementation decision.\n   For example, a\
    \ host configured to have computer name \"host1\" and to\n   be a member of the\
    \ \"example.com\" domain, with IPv4 address 192.0.2.1\n   and IPv6 address 2001:0DB8::1:2:3:FF:FE:4:5:6,\
    \ might be authoritative\n   for the following records:\n   host1. IN A 192.0.2.1\n\
    \          IN AAAA 2001:0DB8::1:2:3:FF:FE:4:5:6\n   host1.example.com. IN A 192.0.2.1\n\
    \          IN AAAA 2001:0DB8::1:2:3:FF:FE:4:5:6\n   1.2.0.192.in-addr.arpa. IN\
    \ PTR host1.\n          IN PTR host1.example.com.\n   6.0.5.0.4.0.E.F.F.F.3.0.2.0.1.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.\n\
    \   ip6.arpa IN PTR host1.  (line split for formatting reasons)\n            IN\
    \ PTR host1.example.com.\n   An LLMNR responder might be further manually configured\
    \ with the name\n   of a local mail server with an MX RR included in the \"host1.\"\
    \ and\n   \"host1.example.com.\" records.\n   In responding to queries:\n   (a)\
    \  Responders MUST listen on UDP port 5355 on the link-scope\n        multicast\
    \ address(es) defined in Section 2, and on TCP port 5355\n        on the unicast\
    \ address(es) that could be set as the source\n        address(es) when the responder\
    \ responds to the LLMNR query.\n   (b)  Responders MUST direct responses to the\
    \ port from which the\n        query was sent.  When queries are received via\
    \ TCP, this is an\n        inherent part of the transport protocol.  For queries\
    \ received\n        by UDP, the responder MUST take note of the source port and\
    \ use\n        that as the destination port in the response.  Responses MUST\n\
    \        always be sent from the port to which they were directed.\n   (c)  Responders\
    \ MUST respond to LLMNR queries for names and addresses\n        for which they\
    \ are authoritative.  This applies to both forward\n        and reverse lookups,\
    \ with the exception of queries with the 'C'\n        bit set, which do not elicit\
    \ a response.\n   (d)  Responders MUST NOT respond to LLMNR queries for names\
    \ for which\n        they are not authoritative.\n   (e)  Responders MUST NOT\
    \ respond using data from the LLMNR or DNS\n        resolver cache.\n   (f)  If\
    \ a responder is authoritative for a name, it MUST respond with\n        RCODE=0\
    \ and an empty answer section, if the type of query does\n        not match an\
    \ RR that the responder has.\n   As an example, a host configured to respond to\
    \ LLMNR queries for the\n   name \"foo.example.com.\"  is authoritative for the\
    \ name\n   \"foo.example.com.\".  On receiving an LLMNR query for an A RR with\
    \ the\n   name \"foo.example.com.\", the host authoritatively responds with an\
    \ A\n   RR(s) that contain IP address(es) in the RDATA of the resource\n   record.\
    \  If the responder has an AAAA RR, but no A RR, and an A RR\n   query is received,\
    \ the responder would respond with RCODE=0 and an\n   empty answer section.\n\
    \   In conventional DNS terminology, a DNS server authoritative for a\n   zone\
    \ is authoritative for all the domain names under the zone apex\n   except for\
    \ the branches delegated into separate zones.  Contrary to\n   conventional DNS\
    \ terminology, an LLMNR responder is authoritative\n   only for the zone apex.\n\
    \   For example, the host \"foo.example.com.\" is not authoritative for the\n\
    \   name \"child.foo.example.com.\" unless the host is configured with\n   multiple\
    \ names, including \"foo.example.com.\"  and\n   \"child.foo.example.com.\". \
    \ As a result, \"foo.example.com.\" cannot\n   respond to an LLMNR query for \"\
    child.foo.example.com.\" with RCODE=3\n   (authoritative name error).  The purpose\
    \ of limiting the name\n   authority scope of a responder is to prevent complications\
    \ that could\n   be caused by coexistence of two or more hosts with the names\n\
    \   representing child and parent (or grandparent) nodes in the DNS tree,\n  \
    \ for example, \"foo.example.com.\" and \"child.foo.example.com.\".\n   Without\
    \ the restriction on authority, an LLMNR query for an A\n   resource record for\
    \ the name \"child.foo.example.com.\" would result in\n   two authoritative responses:\
    \ RCODE=3 (authoritative name error)\n   received from \"foo.example.com.\", and\
    \ a requested A record from\n   \"child.foo.example.com.\".  To prevent this ambiguity,\
    \ LLMNR-enabled\n   hosts could perform a dynamic update of the parent (or grandparent)\n\
    \   zone with a delegation to a child zone; for example, a host\n   \"child.foo.example.com.\"\
    \ could send a dynamic update for the NS and\n   glue A record to \"foo.example.com.\"\
    .  However, this approach\n   significantly complicates implementation of LLMNR\
    \ and would not be\n   acceptable for lightweight hosts.\n"
- title: 2.4.  Unicast Queries and Responses
  contents:
  - "2.4.  Unicast Queries and Responses\n   Unicast queries SHOULD be sent when:\n\
    \   (a) A sender repeats a query after it received a response with the TC\n  \
    \     bit set to the previous LLMNR multicast query, or\n   (b) The sender queries\
    \ for a PTR RR of a fully formed IP address\n       within the \"in-addr.arpa\"\
    \ or \"ip6.arpa\" zones.\n   Unicast LLMNR queries MUST be done using TCP and\
    \ the responses MUST\n   be sent using the same TCP connection as the query. \
    \ Senders MUST\n   support sending TCP queries, and responders MUST support listening\n\
    \   for TCP queries.  If the sender of a TCP query receives a response to\n  \
    \ that query not using TCP, the response MUST be silently discarded.\n   Unicast\
    \ UDP queries MUST be silently discarded.\n   A unicast PTR RR query for an off-link\
    \ address will not elicit a\n   response, but instead, an ICMP Time to Live (TTL)\
    \ or Hop Limit\n   exceeded message will be received.  An implementation receiving\
    \ an\n   ICMP message in response to a TCP connection setup attempt can return\n\
    \   immediately, treating this as a response that no such name exists\n   (RCODE=3\
    \ is returned).  An implementation that cannot process ICMP\n   messages MAY send\
    \ multicast UDP queries for PTR RRs.  Since TCP\n   implementations will not retransmit\
    \ prior to RTOmin, a considerable\n   period will elapse before TCP retransmits\
    \ multiple times, resulting\n   in a long timeout for TCP PTR RR queries sent\
    \ to an off-link\n   destination.\n"
- title: 2.5.  "Off-Link" Detection
  contents:
  - "2.5.  \"Off-Link\" Detection\n   A sender MUST select a source address for LLMNR\
    \ queries that is\n   assigned on the interface on which the query is sent.  The\n\
    \   destination address of an LLMNR query MUST be a link-scope multicast\n   address\
    \ or a unicast address.\n   A responder MUST select a source address for responses\
    \ that is\n   assigned on the interface on which the query was received.  The\n\
    \   destination address of an LLMNR response MUST be a unicast address.\n   On\
    \ receiving an LLMNR query, the responder MUST check whether it was\n   sent to\
    \ an LLMNR multicast addresses defined in Section 2.  If it was\n   sent to another\
    \ multicast address, then the query MUST be silently\n   discarded.\n   Section\
    \ 2.4 discusses use of TCP for LLMNR queries and responses.  In\n   composing\
    \ an LLMNR query using TCP, the sender MUST set the Hop Limit\n   field in the\
    \ IPv6 header and the TTL field in the IPv4 header of the\n   response to one\
    \ (1).  The responder SHOULD set the TTL or Hop Limit\n   settings on the TCP\
    \ listen socket to one (1) so that SYN-ACK packets\n   will have TTL (IPv4) or\
    \ Hop Limit (IPv6) set to one (1).  This\n   prevents an incoming connection from\
    \ off-link since the sender will\n   not receive a SYN-ACK from the responder.\n\
    \   For UDP queries and responses, the Hop Limit field in the IPv6 header\n  \
    \ and the TTL field in the IPV4 header MAY be set to any value.\n   However, it\
    \ is RECOMMENDED that the value 255 be used for\n   compatibility with early implementations\
    \ of [RFC3927].\n   Implementation note:\n      In the sockets API for IPv4 [POSIX],\
    \ the IP_TTL and\n      IP_MULTICAST_TTL socket options are used to set the TTL\
    \ of\n      outgoing unicast and multicast packets.  The IP_RECVTTL socket\n \
    \     option is available on some platforms to retrieve the IPv4 TTL of\n    \
    \  received packets with recvmsg().  [RFC3542] specifies similar\n      options\
    \ for setting and retrieving the IPv6 Hop Limit.\n"
- title: 2.6.  Responder Responsibilities
  contents:
  - "2.6.  Responder Responsibilities\n   It is the responsibility of the responder\
    \ to ensure that RRs returned\n   in LLMNR responses MUST only include values\
    \ that are valid on the\n   local interface, such as IPv4 or IPv6 addresses valid\
    \ on the local\n   link or names defended using the mechanism described in Section\
    \ 4.\n   IPv4 Link-Local addresses are defined in [RFC3927].  IPv6 Link-Local\n\
    \   addresses are defined in [RFC4291].  In particular:\n   (a) If a link-scope\
    \ IPv6 address is returned in a AAAA RR, that\n       address MUST be valid on\
    \ the local link over which LLMNR is used.\n   (b) If an IPv4 address is returned,\
    \ it MUST be reachable through the\n       link over which LLMNR is used.\n  \
    \ (c) If a name is returned (for example in a CNAME, MX, or SRV RR),\n       the\
    \ name MUST be resolvable on the local link over which LLMNR is\n       used.\n\
    \   Where multiple addresses represent valid responses to a query, the\n   order\
    \ in which the addresses are returned is as follows:\n   (d) If the source address\
    \ of the query is a link-scope address, then\n       the responder SHOULD include\
    \ a link-scope address first in the\n       response, if available.\n   (e) If\
    \ the source address of the query is a routable address, then\n       the responder\
    \ MUST include a routable address first in the\n       response, if available.\n"
- title: 2.7.  Retransmission and Jitter
  contents:
  - "2.7.  Retransmission and Jitter\n   An LLMNR sender uses the timeout interval\
    \ LLMNR_TIMEOUT to determine\n   when to retransmit an LLMNR query.  An LLMNR\
    \ sender SHOULD either\n   estimate the LLMNR_TIMEOUT for each interface or set\
    \ a reasonably\n   high initial timeout.  Suggested constants are described in\
    \ Section\n   7.\n   If an LLMNR query sent over UDP is not resolved within LLMNR_TIMEOUT,\n\
    \   then a sender SHOULD repeat the transmission of the query in order to\n  \
    \ ensure that it was received by a host capable of responding to it.\n   An LLMNR\
    \ query SHOULD NOT be sent more than three times.\n   Where LLMNR queries are\
    \ sent using TCP, retransmission is handled by\n   the transport layer.  Queries\
    \ with the 'C' bit set MUST be sent using\n   multicast UDP and MUST NOT be retransmitted.\n\
    \   An LLMNR sender cannot know in advance if a query sent using\n   multicast\
    \ will receive no response, one response, or more than one\n   response.  An LLMNR\
    \ sender MUST wait for LLMNR_TIMEOUT if no response\n   has been received, or\
    \ if it is necessary to collect all potential\n   responses, such as if a uniqueness\
    \ verification query is being made.\n   Otherwise, an LLMNR sender SHOULD consider\
    \ a multicast query answered\n   after the first response is received, if that\
    \ response has the 'C'\n   bit clear.\n   However, if the first response has the\
    \ 'C' bit set, then the sender\n   SHOULD wait for LLMNR_TIMEOUT + JITTER_INTERVAL\
    \ in order to collect\n   all possible responses.  When multiple valid answers\
    \ are received,\n   they may first be concatenated, and then treated in the same\
    \ manner\n   that multiple RRs received from the same DNS server would.  A unicast\n\
    \   query sender considers the query answered after the first response is\n  \
    \ received.\n   Since it is possible for a response with the 'C' bit clear to\
    \ be\n   followed by a response with the 'C' bit set, an LLMNR sender SHOULD\n\
    \   be prepared to process additional responses for the purposes of\n   conflict\
    \ detection, even after it has considered a query answered.\n   In order to avoid\
    \ synchronization, the transmission of each LLMNR\n   query and response SHOULD\
    \ be delayed by a time randomly selected from\n   the interval 0 to JITTER_INTERVAL.\
    \  This delay MAY be avoided by\n   responders responding with names that they\
    \ have previously determined\n   to be UNIQUE (see Section 4 for details).\n"
- title: 2.8.  RR TTL
  contents:
  - "2.8.  RR TTL\n   The responder should insert a pre-configured TTL value in the\
    \ records\n   returned in an LLMNR response.  A default value of 30 seconds is\n\
    \   RECOMMENDED.  In highly dynamic environments (such as mobile ad-hoc\n   networks),\
    \ the TTL value may need to be reduced.\n   Due to the TTL minimalization necessary\
    \ when caching an RRset, all\n   TTLs in an RRset MUST be set to the same value.\n"
- title: 2.9.  Use of the Authority and Additional Sections
  contents:
  - "2.9.  Use of the Authority and Additional Sections\n   Unlike the DNS, LLMNR\
    \ is a peer-to-peer protocol and does not have a\n   concept of delegation.  In\
    \ LLMNR, the NS resource record type may be\n   stored and queried for like any\
    \ other type, but it has no special\n   delegation semantics as it does in the\
    \ DNS.  Responders MAY have NS\n   records associated with the names for which\
    \ they are authoritative,\n   but they SHOULD NOT include these NS records in\
    \ the authority\n   sections of responses.\n   Responders SHOULD insert an SOA\
    \ record into the authority section of\n   a negative response, to facilitate\
    \ negative caching as specified in\n   [RFC2308].  The TTL of this record is set\
    \ from the minimum of the\n   MINIMUM field of the SOA record and the TTL of the\
    \ SOA itself, and\n   indicates how long a resolver may cache the negative answer.\
    \  The\n   owner name of the SOA record (MNAME) MUST be set to the query name.\n\
    \   The RNAME, SERIAL, REFRESH, RETRY, and EXPIRE values MUST be ignored\n   by\
    \ senders.  Negative responses without SOA records SHOULD NOT be\n   cached.\n\
    \   In LLMNR, the additional section is primarily intended for use by\n   EDNS0,\
    \ TSIG, and SIG(0).  As a result, unless the 'C' bit is set,\n   senders MAY only\
    \ include pseudo RR-types in the additional section of\n   a query; unless the\
    \ 'C' bit is set, responders MUST ignore the\n   additional section of queries\
    \ containing other RR types.\n   In queries where the 'C' bit is set, the sender\
    \ SHOULD include the\n   conflicting RRs in the additional section.  Since conflict\n\
    \   notifications are advisory, responders SHOULD log information from\n   the\
    \ additional section, but otherwise MUST ignore the additional\n   section.\n\
    \   Senders MUST NOT cache RRs from the authority or additional section\n   of\
    \ a response as answers, though they may be used for other purposes,\n   such\
    \ as negative caching.\n"
- title: 3.  Usage Model
  contents:
  - "3.  Usage Model\n   By default, an LLMNR sender SHOULD send LLMNR queries only\
    \ for\n   single-label names.  Stub resolvers supporting both DNS and LLMNR\n\
    \   SHOULD avoid sending DNS queries for single-label names, in order to\n   reduce\
    \ unnecessary DNS queries.  An LLMNR sender SHOULD NOT be\n   enabled to send\
    \ a query for any name, except where security\n   mechanisms (described in Section\
    \ 5.3) can be utilized.  An LLMNR\n   query SHOULD only be sent for the originally\
    \ requested name; a\n   searchlist is not used to form additional LLMNR queries.\n\
    \   LLMNR is a peer-to-peer name resolution protocol that is not intended\n  \
    \ as a replacement for DNS; rather, it enables name resolution in\n   scenarios\
    \ in which conventional DNS name resolution is not possible.\n   Where LLMNR security\
    \ is not enabled as described in Section 5.3, if\n   LLMNR is given higher priority\
    \ than DNS among the enabled name\n   resolution mechanisms, this would allow\
    \ the LLMNR cache, once\n   poisoned, to take precedence over the DNS cache. \
    \ As a result, use of\n   LLMNR as a primary name resolution mechanism is NOT\
    \ RECOMMENDED.\n   Instead, it is recommended that LLMNR be utilized as a secondary\
    \ name\n   resolution mechanism, for use in situations where hosts are not\n \
    \  configured with the address of a DNS server, where the DNS server is\n   unavailable\
    \ or unreachable, where there is no DNS server\n   authoritative for the name\
    \ of a host, or where the authoritative DNS\n   server does not have the desired\
    \ RRs.\n   When LLMNR is configured as a secondary name resolution mechanism,\n\
    \   LLMNR queries SHOULD only be sent when all of the following\n   conditions\
    \ are met:\n   (1) No manual or automatic DNS configuration has been performed.\
    \  If\n       DNS server address(es) have been configured, a host SHOULD\n   \
    \    attempt to reach DNS servers over all protocols on which DNS\n       server\
    \ address(es) are configured, prior to sending LLMNR\n       queries.  For dual-stack\
    \ hosts configured with DNS server\n       address(es) for one protocol but not\
    \ another, this implies that\n       DNS queries SHOULD be sent over the protocol\
    \ configured with a\n       DNS server, prior to sending LLMNR queries.\n   (2)\
    \ All attempts to resolve the name via DNS on all interfaces have\n       failed\
    \ after exhausting the searchlist.  This can occur because\n       DNS servers\
    \ did not respond, or because they responded to DNS\n       queries with RCODE=3\
    \ (Authoritative Name Error) or RCODE=0, and\n       an empty answer section.\
    \  Where a single resolver call generates\n       DNS queries for A and AAAA RRs,\
    \ an implementation MAY choose not\n       to send LLMNR queries if any of the\
    \ DNS queries is successful.\n   Where LLMNR is used as a secondary name resolution\
    \ mechanism, its\n   usage is in part determined by the behavior of DNS resolver\n\
    \   implementations; robust resolver implementations are more likely to\n   avoid\
    \ unnecessary LLMNR queries.\n   [RFC1536] describes common DNS implementation\
    \ errors and fixes.  If\n   the proposed fixes are implemented, unnecessary LLMNR\
    \ queries will be\n   reduced substantially, so implementation of [RFC1536] is\
    \ recommended.\n   For example, [RFC1536] Section 1 describes issues with retransmission\n\
    \   and recommends implementation of a retransmission policy based on\n   round\
    \ trip estimates, with exponential back-off.  [RFC1536] Section 4\n   describes\
    \ issues with failover, and recommends that resolvers try\n   another server when\
    \ they don't receive a response to a query.  These\n   policies are likely to\
    \ avoid unnecessary LLMNR queries.\n   [RFC1536] Section 3 describes zero answer\
    \ bugs, which if addressed\n   will also reduce unnecessary LLMNR queries.\n \
    \  [RFC1536] Section 6 describes name error bugs and recommended\n   searchlist\
    \ processing that will reduce unnecessary RCODE=3\n   (authoritative name) errors,\
    \ thereby also reducing unnecessary LLMNR\n   queries.\n   As noted in [DNSPerf],\
    \ a significant fraction of DNS queries do not\n   receive a response, or result\
    \ in negative responses due to missing\n   inverse mappings or NS records that\
    \ point to nonexistent or\n   inappropriate hosts.  Therefore, a reduction in\
    \ missing records can\n   prevent many unnecessary LLMNR queries.\n"
- title: 3.1.  LLMNR Configuration
  contents:
  - "3.1.  LLMNR Configuration\n   LLMNR usage MAY be configured manually or automatically\
    \ on a per-\n   interface basis.  By default, LLMNR responders SHOULD be enabled\
    \ on\n   all interfaces, at all times.  Where this is considered undesirable,\n\
    \   LLMNR SHOULD be disabled, so that hosts will neither listen on the\n   link-scope\
    \ multicast address, nor will they send queries to that\n   address.\n   Where\
    \ DHCPv4 or DHCPv6 is implemented, DHCP options can be used to\n   configure LLMNR\
    \ on an interface.  The LLMNR Enable Option, described\n   in [LLMNREnable], can\
    \ be used to explicitly enable or disable use of\n   LLMNR on an interface.  The\
    \ LLMNR Enable Option does not determine\n   whether, or in which order, DNS itself\
    \ is used for name resolution.\n   The order in which various name resolution\
    \ mechanisms should be used\n   can be specified using the Name Service Search\
    \ Option (NSSO) for DHCP\n   [RFC2937], using the LLMNR Enable Option code carried\
    \ in the NSSO\n   data.\n   In situations where LLMNR is configured as a secondary\
    \ name\n   resolution protocol on a dual-stack host, behavior will be governed\n\
    \   by both IPv4 and IPv6 configuration mechanisms.  Since IPv4 and IPv6\n   utilize\
    \ distinct configuration mechanisms, it is possible for a\n   dual-stack host\
    \ to be configured with the address of a DNS server\n   over IPv4, while remaining\
    \ unconfigured with a DNS server suitable\n   for use over IPv6.\n   In these\
    \ situations, a dual-stack host will send AAAA queries to the\n   configured DNS\
    \ server over IPv4.  However, an IPv6-only host\n   unconfigured with a DNS server\
    \ suitable for use over IPv6 will be\n   unable to resolve names using DNS.  Automatic\
    \ IPv6 DNS configuration\n   mechanisms (such as [RFC3315] and [DNSDisc]) are\
    \ not yet widely\n   deployed, and not all DNS servers support IPv6.  Therefore,\
    \ lack of\n   IPv6 DNS configuration may be a common problem in the short term,\
    \ and\n   LLMNR may prove useful in enabling link-local name resolution over\n\
    \   IPv6.\n   Where a DHCPv4 server is available but not a DHCPv6 server [RFC3315],\n\
    \   IPv6-only hosts may not be configured with a DNS server.  Where there\n  \
    \ is no DNS server authoritative for the name of a host or the\n   authoritative\
    \ DNS server does not support dynamic client update over\n   IPv6 or DHCPv6-based\
    \ dynamic update, then an IPv6-only host will not\n   be able to do DNS dynamic\
    \ update, and other hosts will not be able to\n   resolve its name.\n   For example,\
    \ if the configured DNS server responds to an AAAA RR\n   query sent over IPv4\
    \ or IPv6 with an authoritative name error\n   (RCODE=3) or RCODE=0 and an empty\
    \ answer section, then an AAAA RR\n   query sent using LLMNR over IPv6 may be\
    \ successful in resolving the\n   name of an IPv6-only host on the local link.\n\
    \   Similarly, if a DHCPv4 server is available providing DNS server\n   configuration,\
    \ and DNS server(s) exist which are authoritative for\n   the A RRs of local hosts\
    \ and support either dynamic client update\n   over IPv4 or DHCPv4-based dynamic\
    \ update, then the names of local\n   IPv4 hosts can be resolved over IPv4 without\
    \ LLMNR.  However, if no\n   DNS server is authoritative for the names of local\
    \ hosts, or the\n   authoritative DNS server(s) do not support dynamic update,\
    \ then LLMNR\n   enables link-local name resolution over IPv4.\n   It is possible\
    \ that DNS configuration mechanisms will go in and out\n   of service.  In these\
    \ circumstances, it is possible for hosts within\n   an administrative domain\
    \ to be inconsistent in their DNS\n   configuration.\n   For example, where DHCP\
    \ is used for configuring DNS servers, one or\n   more DHCP servers can fail.\
    \  As a result, hosts configured prior to\n   the outage will be configured with\
    \ a DNS server, while hosts\n   configured after the outage will not.  Alternatively,\
    \ it is possible\n   for the DNS configuration mechanism to continue functioning\
    \ while\n   configured DNS servers fail.\n   An outage in the DNS configuration\
    \ mechanism may result in hosts\n   continuing to use LLMNR even once the outage\
    \ is repaired.  Since\n   LLMNR only enables link-local name resolution, this\
    \ represents a\n   degradation in capabilities.  As a result, hosts without a\
    \ configured\n   DNS server may wish to periodically attempt to obtain DNS\n \
    \  configuration if permitted by the configuration mechanism in use.  In\n   the\
    \ absence of other guidance, a default retry interval of one (1)\n   minute is\
    \ RECOMMENDED.\n"
- title: 4.  Conflict Resolution
  contents:
  - "4.  Conflict Resolution\n   By default, a responder SHOULD be configured to behave\
    \ as though its\n   name is UNIQUE on each interface on which LLMNR is enabled.\
    \  However,\n   it is also possible to configure multiple responders to be\n \
    \  authoritative for the same name.  For example, multiple responders\n   MAY\
    \ respond to a query for an A or AAAA type record for a cluster\n   name (assigned\
    \ to multiple hosts in the cluster).\n   To detect duplicate use of a name, an\
    \ administrator can use a name\n   resolution utility that employs LLMNR and lists\
    \ both responses and\n   responders.  This would allow an administrator to diagnose\
    \ behavior\n   and potentially intervene and reconfigure LLMNR responders that\n\
    \   should not be configured to respond to the same name.\n"
- title: 4.1.  Uniqueness Verification
  contents:
  - "4.1.  Uniqueness Verification\n   Prior to sending an LLMNR response with the\
    \ 'T' bit clear, a\n   responder configured with a UNIQUE name MUST verify that\
    \ there is no\n   other host within the scope of LLMNR query propagation that\
    \ is\n   authoritative for the same name on that interface.\n   Once a responder\
    \ has verified that its name is UNIQUE, if it receives\n   an LLMNR query for\
    \ that name with the 'C' bit clear, it MUST respond\n   with the 'T' bit clear.\
    \  Prior to verifying that its name is UNIQUE,\n   a responder MUST set the 'T'\
    \ bit in responses.\n   Uniqueness verification is carried out when the host:\n\
    \     - starts up or is rebooted\n     - wakes from sleep (if the network interface\
    \ was inactive during\n       sleep)\n     - is configured to respond to LLMNR\
    \ queries on an interface enabled\n       for transmission and reception of IP\
    \ traffic\n     - is configured to respond to LLMNR queries using additional UNIQUE\n\
    \       resource records\n     - verifies the acquisition of a new IP address\
    \ and configuration on\n       an interface\n   To verify uniqueness, a responder\
    \ MUST send an LLMNR query with the\n   'C' bit clear, over all protocols on which\
    \ it responds to LLMNR\n   queries (IPv4 and/or IPv6).  It is RECOMMENDED that\
    \ responders verify\n   uniqueness of a name by sending a query for the name with\
    \ type='ANY'.\n   If no response is received, the sender retransmits the query,\
    \ as\n   specified in Section 2.7.  If a response is received, the sender MUST\n\
    \   check if the source address matches the address of any of its\n   interfaces;\
    \ if so, then the response is not considered a conflict,\n   since it originates\
    \ from the sender.  To avoid triggering conflict\n   detection, a responder that\
    \ detects that it is connected to the same\n   link on multiple interfaces SHOULD\
    \ set the 'C' bit in responses.\n   If a response is received with the 'T' bit\
    \ clear, the responder MUST\n   NOT use the name in response to LLMNR queries\
    \ received over any\n   protocol (IPv4 or IPv6).  If a response is received with\
    \ the 'T' bit\n   set, the responder MUST check if the source IP address in the\n\
    \   response is lexicographically smaller than the source IP address in\n   the\
    \ query.  If so, the responder MUST NOT use the name in response to\n   LLMNR\
    \ queries received over any protocol (IPv4 or IPv6).  For the\n   purpose of uniqueness\
    \ verification, the contents of the answer\n   section in a response is irrelevant.\n\
    \   Periodically carrying out uniqueness verification in an attempt to\n   detect\
    \ name conflicts is not necessary, wastes network bandwidth, and\n   may actually\
    \ be detrimental.  For example, if network links are\n   joined only briefly,\
    \ and are separated again before any new\n   communication is initiated, temporary\
    \ conflicts are benign and no\n   forced reconfiguration is required.  LLMNR responders\
    \ SHOULD NOT\n   periodically attempt uniqueness verification.\n"
- title: 4.2.  Conflict Detection and Defense
  contents:
  - "4.2.  Conflict Detection and Defense\n   Hosts on disjoint network links may\
    \ configure the same name for use\n   with LLMNR.  If these separate network links\
    \ are later joined or\n   bridged together, then there may be multiple hosts that\
    \ are now on\n   the same link, trying to use the same name.\n   In order to enable\
    \ ongoing detection of name conflicts, when an LLMNR\n   sender receives multiple\
    \ LLMNR responses to a query, it MUST check if\n   the 'C' bit is clear in any\
    \ of the responses.  If so, the sender\n   SHOULD send another query for the same\
    \ name, type, and class, this\n   time with the 'C' bit set, with the potentially\
    \ conflicting resource\n   records included in the additional section.\n   Queries\
    \ with the 'C' bit set are considered advisory, and responders\n   MUST verify\
    \ the existence of a conflict before acting on it.  A\n   responder receiving\
    \ a query with the 'C' bit set MUST NOT respond.\n   If the query is for a UNIQUE\
    \ name, then the responder MUST send its\n   own query for the same name, type,\
    \ and class, with the 'C' bit clear.\n   If a response is received, the sender\
    \ MUST check if the source\n   address matches the address of any of its interfaces;\
    \ if so, then the\n   response is not considered a conflict, since it originates\
    \ from the\n   sender.  To avoid triggering conflict detection, a responder that\n\
    \   detects that it is connected to the same link on multiple interfaces\n   SHOULD\
    \ set the 'C' bit in responses.\n   An LLMNR responder MUST NOT ignore conflicts\
    \ once detected, and\n   SHOULD log them.  Upon detecting a conflict, an LLMNR\
    \ responder MUST\n   immediately stop using the conflicting name in response to\
    \ LLMNR\n   queries received over any supported protocol, if the source IP\n \
    \  address in the response is lexicographically smaller than the source\n   IP\
    \ address in the uniqueness verification query.\n   After stopping the use of\
    \ a name, the responder MAY elect to\n   configure a new name.  However, since\
    \ name reconfiguration may be\n   disruptive, this is not required, and a responder\
    \ may have been\n   configured to respond to multiple names so that alternative\
    \ names may\n   already be available.  A host that has stopped the use of a name\
    \ may\n   attempt uniqueness verification again after the expiration of the TTL\n\
    \   of the conflicting response.\n"
- title: 4.3.  Considerations for Multiple Interfaces
  contents:
  - "4.3.  Considerations for Multiple Interfaces\n   A multi-homed host may elect\
    \ to configure LLMNR on only one of its\n   active interfaces.  In many situations,\
    \ this will be adequate.\n   However, should a host need to configure LLMNR on\
    \ more than one of\n   its active interfaces, there are some additional precautions\
    \ it MUST\n   take.  Implementers who are not planning to support LLMNR on multiple\n\
    \   interfaces simultaneously may skip this section.\n   Where a host is configured\
    \ to issue LLMNR queries on more than one\n   interface, each interface maintains\
    \ its own independent LLMNR\n   resolver cache, containing the responses to LLMNR\
    \ queries.\n   A multi-homed host checks the uniqueness of UNIQUE records as\n\
    \   described in Section 4.  The situation is illustrated in Figure 1.\n     \
    \                  ----------  ----------\n                        |      |  \
    \  |      |\n                       [A]    [myhost]   [myhost]\n             \
    \     Figure 1.  Link-scope name conflict\n   In this situation, the multi-homed\
    \ myhost will probe for, and defend,\n   its host name on both interfaces.  A\
    \ conflict will be detected on one\n   interface, but not the other.  The multi-homed\
    \ myhost will not be\n   able to respond with a host RR for \"myhost\" on the\
    \ interface on the\n   right (see Figure 1).  The multi-homed host may, however,\
    \ be\n   configured to use the \"myhost\" name on the interface on the left.\n\
    \   Since names are only unique per link, hosts on different links could\n   be\
    \ using the same name.  If an LLMNR client sends queries over\n   multiple interfaces,\
    \ and receives responses from more than one, the\n   result returned to the client\
    \ is defined by the implementation.  The\n   situation is illustrated in Figure\
    \ 2.\n                       ----------  ----------\n                        |\
    \      |    |     |\n                       [A]    [myhost]   [A]\n          \
    \     Figure 2.  Off-segment name conflict\n   If host myhost is configured to\
    \ use LLMNR on both interfaces, it will\n   send LLMNR queries on both interfaces.\
    \  When host myhost sends a\n   query for the host RR for name \"A\", it will\
    \ receive a response from\n   hosts on both interfaces.\n   Host myhost cannot\
    \ distinguish between the situation shown in Figure\n   2, and that shown in Figure\
    \ 3, where no conflict exists.\n                                [A]\n        \
    \                       |   |\n                           -----   -----\n    \
    \                           |   |\n                              [myhost]\n  \
    \             Figure 3.  Multiple paths to same host\n   This illustrates that\
    \ the proposed name conflict-resolution mechanism\n   does not support detection\
    \ or resolution of conflicts between hosts\n   on different links.  This problem\
    \ can also occur with DNS when a\n   multi-homed host is connected to two different\
    \ networks with\n   separated name spaces.  It is not the intent of this document\
    \ to\n   address the issue of uniqueness of names within DNS.\n"
- title: 4.4.  API Issues
  contents:
  - "4.4.  API Issues\n   [RFC3493] provides an API that can partially solve the name\
    \ ambiguity\n   problem for applications written to use this API, since the\n\
    \   sockaddr_in6 structure exposes the scope within which each scoped\n   address\
    \ exists, and this structure can be used for both IPv4 (using\n   v4-mapped IPv6\
    \ addresses) and IPv6 addresses.\n   Following the example in Figure 2, an application\
    \ on 'myhost' issues\n   the request getaddrinfo(\"A\", ...) with ai_family=AF_INET6\
    \ and\n   ai_flags=AI_ALL|AI_V4MAPPED.  LLMNR queries will be sent from both\n\
    \   interfaces, and the resolver library will return a list containing\n   multiple\
    \ addrinfo structures, each with an associated sockaddr_in6\n   structure.  This\
    \ list will thus contain the IPv4 and IPv6 addresses\n   of both hosts responding\
    \ to the name 'A'.  Link-local addresses will\n   have a sin6_scope_id value that\
    \ disambiguates which interface is used\n   to reach the address.  Of course,\
    \ to the application, Figures 2 and 3\n   are still indistinguishable, but this\
    \ API allows the application to\n   communicate successfully with any address\
    \ in the list.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   LLMNR is a peer-to-peer name resolution protocol\
    \ designed for use on\n   the local link.  While LLMNR limits the vulnerability\
    \ of responders\n   to off-link senders, it is possible for an off-link responder\
    \ to\n   reach a sender.\n   In scenarios such as public \"hotspots\", attackers\
    \ can be present on\n   the same link.  These threats are most serious in wireless\
    \ networks,\n   such as IEEE 802.11, since attackers on a wired network will require\n\
    \   physical access to the network, while wireless attackers may mount\n   attacks\
    \ from a distance.  Link-layer security, such as\n   [IEEE-802.11i], can be of\
    \ assistance against these threats if it is\n   available.\n   This section details\
    \ security measures available to mitigate threats\n   from on and off-link attackers.\n"
- title: 5.1.  Denial of Service
  contents:
  - "5.1.  Denial of Service\n   Attackers may take advantage of LLMNR conflict detection\
    \ by\n   allocating the same name, denying service to other LLMNR responders,\n\
    \   and possibly allowing an attacker to receive packets destined for\n   other\
    \ hosts.  By logging conflicts, LLMNR responders can provide\n   forensic evidence\
    \ of these attacks.\n   An attacker may spoof LLMNR queries from a victim's address\
    \ in order\n   to mount a denial of service attack.  Responders setting the IPv6\
    \ Hop\n   Limit or IPv4 TTL field to a value larger than one in an LLMNR UDP\n\
    \   response may be able to reach the victim across the Internet.\n   While LLMNR\
    \ responders only respond to queries for which they are\n   authoritative, and\
    \ LLMNR does not provide wildcard query support, an\n   LLMNR response may be\
    \ larger than the query, and an attacker can\n   generate multiple responses to\
    \ a query for a name used by multiple\n   responders.  A sender may protect itself\
    \ against unsolicited\n   responses by silently discarding them.\n"
- title: 5.2.  Spoofing
  contents:
  - "5.2.  Spoofing\n   LLMNR is designed to prevent reception of queries sent by\
    \ an off-link\n   attacker.  LLMNR requires that responders receiving UDP queries\
    \ check\n   that they are sent to a link-scope multicast address.  However, it\
    \ is\n   possible that some routers may not properly implement link-scope\n  \
    \ multicast, or that link-scope multicast addresses may leak into the\n   multicast\
    \ routing system.  To prevent successful setup of TCP\n   connections by an off-link\
    \ sender, responders receiving a TCP SYN\n   reply with a TCP SYN-ACK with TTL\
    \ set to one (1).\n   While it is difficult for an off-link attacker to send an\
    \ LLMNR query\n   to a responder, it is possible for an off-link attacker to spoof\
    \ a\n   response to a query (such as an A or AAAA query for a popular\n   Internet\
    \ host), and by using a TTL or Hop Limit field larger than one\n   (1), for the\
    \ forged response to reach the LLMNR sender.  Since the\n   forged response will\
    \ only be accepted if it contains a matching ID\n   field, choosing a pseudo-random\
    \ ID field within queries provides some\n   protection against off-link responders.\n\
    \   When LLMNR is utilized as a secondary name resolution service,\n   queries\
    \ can be sent when DNS server(s) do not respond.  An attacker\n   can execute\
    \ a denial of service attack on the DNS server(s), and then\n   poison the LLMNR\
    \ cache by responding to an LLMNR query with incorrect\n   information.  As noted\
    \ in \"Threat Analysis of the Domain Name System\n   (DNS)\" [RFC3833], these\
    \ threats also exist with DNS, since DNS-\n   response spoofing tools are available\
    \ that can allow an attacker to\n   respond to a query more quickly than a distant\
    \ DNS server.  However,\n   while switched networks or link-layer security may\
    \ make it difficult\n   for an on-link attacker to snoop unicast DNS queries,\
    \ multicast LLMNR\n   queries are propagated to all hosts on the link, making\
    \ it possible\n   for an on-link attacker to spoof LLMNR responses without having\
    \ to\n   guess the value of the ID field in the query.\n   Since LLMNR queries\
    \ are sent and responded to on the local link, an\n   attacker will need to respond\
    \ more quickly to provide its own\n   response prior to arrival of the response\
    \ from a legitimate\n   responder.  If an LLMNR query is sent for an off-link\
    \ host, spoofing\n   a response in a timely way is not difficult, since a legitimate\n\
    \   response will never be received.\n   This vulnerability can be reduced by\
    \ limiting use of LLMNR to\n   resolution of single-label names as described in\
    \ Section 3, or by\n   implementation of authentication (see Section 5.3).\n"
- title: 5.3.  Authentication
  contents:
  - "5.3.  Authentication\n   LLMNR is a peer-to-peer name resolution protocol and,\
    \ as a result, is\n   often deployed in situations where no trust model can be\
    \ assumed.\n   Where a pre-arranged security configuration is possible, the\n\
    \   following security mechanisms may be used:\n   (a)  LLMNR implementations\
    \ MAY support TSIG [RFC2845] and/or SIG(0)\n        [RFC2931] security mechanisms.\
    \  \"DNS Name Service based on\n        Secure Multicast DNS for IPv6 Mobile Ad\
    \ Hoc Networks\" [LLMNRSec]\n        describes the use of TSIG to secure LLMNR,\
    \ based on group keys.\n        While group keys can be used to demonstrate membership\
    \ in a\n        group, they do not protect against forgery by an attacker that\n\
    \        is a member of the group.\n   (b)  IPsec Encapsulating Security Payload\
    \ (ESP) with a NULL\n        encryption algorithm MAY be used to authenticate\
    \ unicast LLMNR\n        queries and responses, or LLMNR responses to multicast\
    \ queries.\n        In a small network without a certificate authority, this can\
    \ be\n        most easily accomplished through configuration of a group pre-\n\
    \        shared key for trusted hosts.  As with TSIG, this does not\n        protect\
    \ against forgery by an attacker with access to the group\n        pre-shared\
    \ key.\n   (c)  LLMNR implementations MAY support DNSSEC [RFC4033].  In order\
    \ to\n        support DNSSEC, LLMNR implementations MAY be configured with\n \
    \       trust anchors, or they MAY make use of keys obtained from DNS\n      \
    \  queries.  Since LLMNR does not support \"delegated trust\" (CD or\n       \
    \ AD bits), LLMNR implementations cannot make use of DNSSEC unless\n        they\
    \ are DNSSEC-aware and support validation.  Unlike approaches\n        [a] or\
    \ [b], DNSSEC permits a responder to demonstrate ownership\n        of a name,\
    \ not just membership within a trusted group.  As a\n        result, it enables\
    \ protection against forgery.\n"
- title: 5.4.  Cache and Port Separation
  contents:
  - "5.4.  Cache and Port Separation\n   In order to prevent responses to LLMNR queries\
    \ from polluting the DNS\n   cache, LLMNR implementations MUST use a distinct,\
    \ isolated cache for\n   LLMNR on each interface.  LLMNR operates on a separate\
    \ port from DNS,\n   reducing the likelihood that a DNS server will unintentionally\n\
    \   respond to an LLMNR query.\n   If a DNS server is running on a host that supports\
    \ LLMNR, the LLMNR\n   responder on that host MUST respond to LLMNR queries only\
    \ for the\n   RRSets relating to the host on which the server is running, but\
    \ MUST\n   NOT respond for other records for which the DNS server is\n   authoritative.\
    \  DNS servers MUST NOT send LLMNR queries in order to\n   resolve DNS queries.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This specification creates a new namespace: the LLMNR\
    \ namespace.\n   In order to avoid creating any new administrative procedures,\n\
    \   administration of the LLMNR namespace will piggyback on the\n   administration\
    \ of the DNS namespace.\n   The rights to use a fully qualified domain name (FQDN)\
    \ within LLMNR\n   are obtained by acquiring the rights to use that name within\
    \ DNS.\n   Those wishing to use an FQDN within LLMNR should first acquire the\n\
    \   rights to use the corresponding FQDN within DNS.  Using an FQDN\n   within\
    \ LLMNR without ownership of the corresponding name in DNS\n   creates the possibility\
    \ of conflict and therefore is discouraged.\n   LLMNR responders may self-allocate\
    \ a name within the single-label\n   namespace first defined in [RFC1001].  Since\
    \ single-label names are\n   not unique, no registration process is required.\n"
- title: 7.  Constants
  contents:
  - "7.  Constants\n   The following timing constants are used in this protocol; they\
    \ are\n   not intended to be user configurable.\n   JITTER_INTERVAL    100 ms\n\
    \   LLMNR_TIMEOUT      1 second (if set statically on all interfaces)\n      \
    \                100 ms (IEEE 802 media, including IEEE 802.11)\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC1001]      NetBIOS Working Group in the Defense\
    \ Advanced Research\n                  Projects Agency, Internet Activities Board,\
    \ and End-\n                  to-End Services Task Force, \"Protocol standard\
    \ for a\n                  NetBIOS service on a TCP/UDP transport: Concepts and\n\
    \                  methods\", STD 19, RFC 1001, March 1987.\n   [RFC1035]    \
    \  Mockapetris, P., \"Domain names - implementation and\n                  specification\"\
    , STD 13, RFC 1035, November 1987.\n   [RFC2119]      Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n                  Requirement Levels\", BCP 14,\
    \ RFC 2119, March 1997.\n   [RFC2181]      Elz, R. and R. Bush, \"Clarifications\
    \ to the DNS\n                  Specification\", RFC 2181, July 1997.\n   [RFC2308]\
    \      Andrews, M., \"Negative Caching of DNS Queries (DNS\n                 \
    \ NCACHE)\", RFC 2308, March 1998.\n   [RFC2671]      Vixie, P., \"Extension Mechanisms\
    \ for DNS (EDNS0)\", RFC\n                  2671, August 1999.\n   [RFC2845] \
    \     Vixie, P., Gudmundsson, O., Eastlake 3rd, D., and B.\n                 \
    \ Wellington, \"Secret Key Transaction Authentication for\n                  DNS\
    \ (TSIG)\", RFC 2845, May 2000.\n   [RFC2931]      Eastlake 3rd, D., \"DNS Request\
    \ and Transaction\n                  Signatures ( SIG(0)s )\", RFC 2931, September\
    \ 2000.\n   [RFC4291]      Hinden, R. and S. Deering, \"IP Version 6 Addressing\n\
    \                  Architecture\", RFC 4291, February 2006.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [DNSPerf]      Jung, J., et al., \"DNS Performance\
    \ and the\n                  Effectiveness of Caching\", IEEE/ACM Transactions\
    \ on\n                  Networking, Volume 10, Number 5, pp. 589, October\n  \
    \                2002.\n   [DNSDisc]      Durand, A., Hagino, I., and D. Thaler,\
    \ \"Well known\n                  site local unicast addresses to communicate\
    \ with\n                  recursive DNS servers\", Work in Progress, October\n\
    \                  2002.\n   [IEEE-802.11i] Institute of Electrical and Electronics\
    \ Engineers,\n                  \"Supplement to Standard for Telecommunications\
    \ and\n                  Information Exchange Between Systems - LAN/MAN\n    \
    \              Specific Requirements - Part 11: Wireless LAN Medium\n        \
    \          Access Control (MAC) and Physical Layer (PHY)\n                  Specifications:\
    \ Specification for Enhanced Security\",\n                  IEEE 802.11i, July\
    \ 2004.\n   [LLMNREnable]  Guttman, E., \"DHCP LLMNR Enable Option\", Work in\n\
    \                  Progress, April 2002.\n   [LLMNRSec]     Jeong, J., Park, J.\
    \ and H. Kim, \"DNS Name Service\n                  based on Secure Multicast\
    \ DNS for IPv6 Mobile Ad Hoc\n                  Networks\", ICACT 2004, Phoenix\
    \ Park, Korea, February\n                  9-11, 2004.\n   [POSIX]        IEEE\
    \ Std. 1003.1-2001 Standard for Information\n                  Technology -- Portable\
    \ Operating System Interface\n                  (POSIX). Open Group Technical\
    \ Standard: Base\n                  Specifications, Issue 6, December 2001.  ISO/IEC\n\
    \                  9945:2002.  http://www.opengroup.org/austin\n   [RFC1536] \
    \     Kumar, A., Postel, J., Neuman, C., Danzig, P., and S.\n                \
    \  Miller, \"Common DNS Implementation Errors and\n                  Suggested\
    \ Fixes\", RFC 1536, October 1993.\n   [RFC2131]      Droms, R., \"Dynamic Host\
    \ Configuration Protocol\", RFC\n                  2131, March 1997.\n   [RFC2365]\
    \      Meyer, D., \"Administratively Scoped IP Multicast\", BCP\n            \
    \      23, RFC 2365, July 1998.\n   [RFC2937]      Smith, C., \"The Name Service\
    \ Search Option for DHCP\",\n                  RFC 2937, September 2000.\n   [RFC3315]\
    \      Droms, R., Bound, J., Volz, B., Lemon, T., Perkins,\n                 \
    \ C., and M. Carney, \"Dynamic Host Configuration\n                  Protocol\
    \ for IPv6 (DHCPv6)\", RFC 3315, July 2003.\n   [RFC3493]      Gilligan, R., Thomson,\
    \ S., Bound, J., McCann, J., and\n                  W. Stevens, \"Basic Socket\
    \ Interface Extensions for\n                  IPv6\", RFC 3493, February 2003.\n\
    \   [RFC3542]      Stevens, W., Thomas, M., Nordmark, E., and T. Jinmei,\n   \
    \               \"Advanced Sockets Application Program Interface (API)\n     \
    \             for IPv6\", RFC 3542, May 2003.\n   [RFC3833]      Atkins, D. and\
    \ R. Austein, \"Threat Analysis of the\n                  Domain Name System (DNS)\"\
    , RFC 3833, August 2004.\n   [RFC3927]      Cheshire, S., Aboba, B., and E. Guttman,\
    \ \"Dynamic\n                  Configuration of IPv4 Link-Local Addresses\", RFC\
    \ 3927,\n                  May 2005.\n   [RFC4033]      Arends, R., Austein, R.,\
    \ Larson, M., Massey, D., and\n                  S. Rose, \"DNS Security Introduction\
    \ and Requirements\",\n                  RFC 4033, March 2005.\n   [RFC4086] \
    \     Eastlake, D., 3rd, Schiller, J., and S. Crocker,\n                  \"Randomness\
    \ Requirements for Security\", BCP 106, RFC\n                  4086, June 2005.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   This work builds upon original work done on multicast\
    \ DNS by Bill\n   Manning and Bill Woodcock.  Bill Manning's work was funded under\n\
    \   DARPA grant #F30602-99-1-0523.  The authors gratefully acknowledge\n   their\
    \ contribution to the current specification.  Constructive input\n   has also\
    \ been received from Mark Andrews, Rob Austein, Randy Bush,\n   Stuart Cheshire,\
    \ Ralph Droms, Robert Elz, James Gilroy, Olafur\n   Gudmundsson, Andreas Gustafsson,\
    \ Erik Guttman, Myron Hattig,\n   Christian Huitema, Olaf Kolkman, Mika Liljeberg,\
    \ Keith Moore,\n   Tomohide Nagashima, Thomas Narten, Erik Nordmark, Markku Savela,\
    \ Mike\n   St. Johns, Sander van Valkenburg, and Brian Zill.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Bernard Aboba\n   Microsoft Corporation\n   One Microsoft\
    \ Way\n   Redmond, WA 98052\n   Phone: +1 425 706 6605\n   EMail: bernarda@microsoft.com\n\
    \   Dave Thaler\n   Microsoft Corporation\n   One Microsoft Way\n   Redmond, WA\
    \ 98052\n   Phone: +1 425 703 8835\n   EMail: dthaler@microsoft.com\n   Levon\
    \ Esibov\n   Microsoft Corporation\n   One Microsoft Way\n   Redmond, WA 98052\n\
    \   EMail: levone@microsoft.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
