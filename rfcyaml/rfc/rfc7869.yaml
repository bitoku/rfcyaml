- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                         D. Warden
  contents:
  - "Independent Submission                                         D. Warden\n  \
    \                        The \"vnc\" URI Scheme\n"
- title: Abstract
  contents:
  - "Abstract\n   Virtual Network Computing (VNC) software provides remote desktop\n\
    \   functionality.  This document describes a Uniform Resource Identifier\n  \
    \ (URI) scheme enabling the launch of VNC clients from other\n   applications.\
    \  The scheme specifies parameters useful in securely\n   connecting clients with\
    \ remote hosts.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7869.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Requirements Language ......................................3\n  \
    \ 2. The \"vnc\" URI Scheme ............................................3\n  \
    \    2.1. URI Scheme Syntax ..........................................3\n    \
    \       2.1.1. URI Parameters ......................................4\n      \
    \     2.1.2. Data Types ..........................................9\n      2.2.\
    \ Processing URIs ...........................................11\n           2.2.1.\
    \ Error Handling .....................................12\n           2.2.2. Connection\
    \ Profile Matching ........................12\n      2.3. Connection Channel Types\
    \ ..................................12\n           2.3.1. The \"Integrated SSH\"\
    \ Channel Type ..................12\n           2.3.2. The \"Secure Tunnel\" Channel\
    \ Type ...................14\n   3. Security Considerations ........................................15\n\
    \      3.1. Application Trust .........................................16\n  \
    \    3.2. URI Handling ..............................................16\n    \
    \  3.3. Host Identification .......................................17\n      3.4.\
    \ Connection Database Integrity .............................18\n   4. IANA Considerations\
    \ ............................................18\n      4.1. \"vnc\" Scheme ..............................................18\n\
    \      4.2. Remote Framebuffer Security Types .........................18\n  \
    \    4.3. VNC URI Group .............................................19\n    \
    \  4.4. VNC URI Connection Channel Types ..........................19\n      4.5.\
    \ VNC URI ID Hash Algorithms ................................19\n      4.6. VNC\
    \ URI Parameters ........................................21\n   5. References\
    \ .....................................................22\n      5.1. Normative\
    \ References ......................................22\n      5.2. Informative\
    \ References ....................................23\n   Appendix A. \"vnc\" URI\
    \ Template ....................................24\n   Acknowledgments ...................................................25\n\
    \   Authors' Addresses ................................................25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Virtual Network Computing (VNC) clients are used to support\
    \ remote\n   desktop connectivity based on the Remote Framebuffer (RFB) Protocol\n\
    \   [RFC6143].  It is often desirable to integrate such functionality\n   with\
    \ other software.  However, the lack of a standard method for\n   specifying VNC\
    \ client parameters has limited such integration.\n   The \"vnc\" Uniform Resource\
    \ Identifier (URI) scheme specified in this\n   document facilitates the launch\
    \ of VNC clients from applications in\n   browser-based, desktop, and mobile environments.\
    \  Using this scheme,\n   users and application vendors will be able to integrate\
    \ remote\n   desktop capabilities without being tied to a particular client.\n\
    \   Remote desktop clients often store connection profiles in a local\n   connection\
    \ database.  By associating connections specified in a URI\n   with those stored\
    \ in a database, client-specific options can be\n   automatically applied to a\
    \ connection launched from another\n   application, even when that application\
    \ is unaware of those options.\n   Connections to VNC servers are often secured\
    \ using mechanisms\n   including Transport Layer Security / Secure Sockets Layer\
    \ (TLS/SSL)\n   tunneling [RFC5246] and Secure Shell (SSH) [RFC4251] tunneling,\
    \ which\n   are outside the scope of the RFB protocol.  Defining the behavior\
    \ of\n   these client-integrated security options enables their use with \"vnc\"\
    \n   URIs.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n   In this document, these words will appear with that\
    \ interpretation\n   only when in ALL CAPS.  Lowercase uses of these words are\
    \ not to be\n   interpreted as carrying the significance described in RFC 2119.\n"
- title: 2.  The "vnc" URI Scheme
  contents:
  - '2.  The "vnc" URI Scheme

    '
- title: 2.1.  URI Scheme Syntax
  contents:
  - "2.1.  URI Scheme Syntax\n   The normative syntax of the \"vnc\" URI is defined\
    \ in the <vnc-uri>\n   rule in the following syntax specification.  This specification\
    \ uses\n   the Augmented Backus-Naur Form (ABNF) as described in [RFC5234].  The\n\
    \   \"vnc\" URI conforms to the generic URI syntax specified in [RFC3986].\n \
    \  The <userinfo>, <host>, <port>, <unreserved>, and <pct-encoded> rules\n   are\
    \ defined in [RFC3986].\n   vnc-uri = \"vnc://\" [ userinfo \"@\" ] [ host [ \"\
    :\" port ] ]\n             [ \"?\" [ vnc-params ] ]\n   vnc-params = param \"\
    =\" value *(\"&\" param \"=\" value) [\"&\"]\n   param = 1*( param-char )\n  \
    \ value = *( param-char )\n   param-char = unreserved / pct-encoded / unreserved-symbols\n\
    \   unreserved-symbols = \":\" / \"/\" / \"@\" / \"!\" / \"$\" / \"'\"\n     \
    \                   / \"(\" / \")\" / \"*\" / \",\" / \";\"\n   The \"?\", \"\
    =\", and \"&\" characters are used to delimit VNC parameters\n   and must be percent-encoded\
    \ when representing a data octet as\n   specified in [RFC3986].  Within the <vnc-params>\
    \ portion of a \"vnc\"\n   URI, the <unreserved-symbols> do not have special meaning\
    \ and need\n   not be percent-encoded when representing a data octet.\n   A \"\
    vnc\" URI has the general form:\n      vnc://host:port?param1=value1&param2=value2...\n\
    \   The host information and each parameter value specify information\n   used\
    \ in establishing or operating the remote desktop session as\n   specified in\
    \ Section 2.1.1.\n   For example:\n      vnc://10.0.0.1:5901?VncPassword=secret&SecurityType=2\n\
    \   This example indicates a VNC connection to the host at IP \"10.0.0.1\"\n \
    \  on port \"5901\" with VNC password \"secret\" using the VNC\n   Authentication\
    \ security type.\n"
- title: 2.1.1.  URI Parameters
  contents:
  - "2.1.1.  URI Parameters\n   A description of host information and URI parameters\
    \ is provided in\n   this section.  Information on the constraints of various\
    \ data types\n   is provided in Section 2.1.2.  All parameters are considered\n\
    \   optional; however, a client will not be able to connect without\n   sufficient\
    \ information.\n   A parameter without a specified default value indicates that\
    \ no\n   default value is implied by this URI scheme; however, VNC clients can\n\
    \   apply implementation-dependent default behaviors otherwise consistent\n  \
    \ with this document.\n   The <userinfo> value is deprecated and processed only\
    \ in an\n   implementation-specific manner.  The <userinfo> component MUST NOT\
    \ be\n   generated in an environment where a client supporting an updated URI\n\
    \   format is expected to be available.  When processing a URI value from\n  \
    \ an untrusted source, VNC clients SHOULD alert the user in order to\n   mitigate\
    \ the risk that the URI is constructed to obscure the identity\n   of the remote\
    \ host unless the URI can be validated or backwards-\n   compatibility considerations\
    \ make an alert impractical.\n   The <host> and <port> values in the \"vnc\" URI\
    \ specify the address of\n   the VNC server on the remote host:\n   +------------+------------+-----------------------------+----------+\n\
    \   | Name       | Type       | Description                 | Default  |\n   +------------+------------+-----------------------------+----------+\n\
    \   | host       | string     | VNC server hostname or IP   | none     |\n   +------------+------------+-----------------------------+----------+\n\
    \   | port       | ushort     | VNC server port             | 5900     |\n   +------------+------------+-----------------------------+----------+\n\
    \   The \"vnc\" URI parameter values specify remote desktop connection or\n  \
    \ session properties, including aspects of client operation, usability,\n   and\
    \ security as specified in the table below:\n   +---------------+---------+-----------------------------+----------+\n\
    \   | Name          | Type    | Description                 | Default  |\n   +---------------+---------+-----------------------------+----------+\n\
    \   |ConnectionName | string  | Name of connection profile  | none     |\n   +---------------+---------+-----------------------------+----------+\n\
    \   |VncUsername    | string  | VNC server username         | none     |\n   +---------------+---------+-----------------------------+----------+\n\
    \   |VncPassword    | string  | VNC server password         | none     |\n   +---------------+---------+-----------------------------+----------+\n\
    \   |SecurityType   | enum    | RFB security type used      | none     |\n   |\
    \               | <rfbsec>|                             |          |\n   +---------------+---------+-----------------------------+----------+\n\
    \   |ChannelType    | enum    | Connection channel type     | none     |\n   |\
    \               | <chan>  |                             |          |\n   +---------------+---------+-----------------------------+----------+\n\
    \   |SshHost        | string  | SSH server hostname or IP   | <host>   |\n   +---------------+---------+-----------------------------+----------+\n\
    \   |SshPort        | ushort  | SSH server port             | 22       |\n   +---------------+---------+-----------------------------+----------+\n\
    \   |SshUsername    | string  | SSH username                | none     |\n   +---------------+---------+-----------------------------+----------+\n\
    \   |SshPassword    | string  | SSH password                | none     |\n   +---------------+---------+-----------------------------+----------+\n\
    \   |IdHashAlgorithm| enum    | Hash algorithm used with    | none     |\n   |\
    \               | <idhash>| \"IdHash\" parameter          |          |\n   +---------------+---------+-----------------------------+----------+\n\
    \   |IdHash         | string  | Expected hash of remote     | none     |\n   |\
    \               | <hex>   | public key or certificate   |          |\n   +---------------+---------+-----------------------------+----------+\n\
    \   |ColorLevel     | enum    | Client color depth/mode     | none     |\n   |\
    \               | <clevel>|                             |          |\n   +---------------+---------+-----------------------------+----------+\n\
    \   |ViewOnly       | boolean | Client is view only         | false    |\n   +---------------+---------+-----------------------------+----------+\n\
    \   |SaveConnection | boolean | Store connection info       | none     |\n   +---------------+---------+-----------------------------+----------+\n\
    \   o  ConnectionName, SaveConnection\n      \"ConnectionName\" is used to identify\
    \ a connection profile in both\n      the launching application and VNC client.\
    \  Profiles are applied as\n      described in Section 2.2.2.  If omitted, the\
    \ client MAY generate a\n      name based on the host, port, and/or other parameters.\
    \  The VNC\n      client MAY normalize the name as required.\n      If true, \"\
    SaveConnection\" indicates a connection profile should be\n      created or updated\
    \ and stored in the client connection database.\n      If false, no profile should\
    \ be updated or persisted.\n   o  VncUsername, VncPassword, SecurityType\n   \
    \   The \"SecurityType\" parameter indicates which RFB security type\n      applies\
    \ to the connection.  RFB security types are recorded in the\n      IANA \"Remote\
    \ Framebuffer Security Types\" registry created by\n      [RFC6143].  The VNC\
    \ client will use this information to determine\n      which parameters are required\
    \ and establish the connection.\n      VNC clients can sometimes automatically\
    \ negotiate a security type\n      with a server.  Specifying the security type\
    \ controls the security\n      negotiation.  Specifying the security type also\
    \ allows a client to\n      prompt for necessary security parameters prior to\
    \ establishing a\n      connection.  Parameters may take time to enter on mobile\
    \ clients\n      and could otherwise result in timeouts and/or security lockouts.\n\
    \      If the specified type is not supported by the server, an error\n      SHOULD\
    \ be indicated as described in Section 2.2.1.\n      \"VncUsername\" and \"VncPassword\"\
    \ are used when applicable to\n      authenticate to the VNC server using the\
    \ specified \"SecurityType\".\n      Since passwords often contain arbitrary characters,\
    \ they will\n      often require percent encoding.\n   o  ChannelType\n      \"\
    ChannelType\" specifies the transport stream used to carry\n      connection data.\
    \  This allows a client to initiate a connection\n      using a secure transport\
    \ protocol such as SSH prior to connecting\n      to the VNC server socket.  Use\
    \ of this value in the context of the\n      \"Integrated SSH\" and \"Secure Tunnel\"\
    \ channel types is provided in\n      Section 2.3.\n   o  SshHost, SshPort, SshUsername,\
    \ SshPassword\n      The SSH parameters are intended for use with the \"Integrated\
    \ SSH\"\n      channel type described in Section 2.3.1.  These parameters can\n\
    \      also be used with any future SSH-based channel types.  Since\n      passwords\
    \ often contain arbitrary characters, they will often\n      require percent encoding.\n\
    \   o  IdHashAlgorithm, IdHash\n      The \"IdHashAlgorithm\" and \"IdHash\" values\
    \ are used to verify the\n      expected identity of the remote system based on\
    \ its public key or\n      certificate.  Use of these values in the context of\
    \ the\n      \"Integrated SSH\" and \"Secure Tunnel\" channel types is provided\
    \ in\n      Section 2.3.\n   o  ColorLevel\n      The \"ColorLevel\" parameter\
    \ specifies the color model to use for\n      data transfer and display as specified\
    \ in Section 2.1.2.  If the\n      requested color model is unsupported, the behavior\
    \ is\n      implementation dependent.\n   o  ViewOnly\n      If \"ViewOnly\" is\
    \ true, the VNC client SHOULD operate in a display-\n      only mode and refrain\
    \ from sending input data including KeyEvent,\n      PointerEvent, and ClientCutText\
    \ messages specified in Section 7.5\n      of [RFC6143] unless this mode is unsupported\
    \ by the client.\n   Parameter names SHOULD be provided in the case specified\
    \ in this\n   document; however, for compatibility, clients SHOULD accept\n  \
    \ parameters in a case-insensitive manner.  Values SHALL be interpreted\n   in\
    \ a case-sensitive manner, unless otherwise noted.\n   Additional parameters likely\
    \ to be useful with multiple VNC clients\n   can be added to the \"VNC URI Parameters\"\
    \ registry as specified in\n   Section 4.6 of this document.  Individual clients\
    \ MAY support\n   parameters specific to that client.  VNC clients supporting\n\
    \   application-specific parameters SHOULD include a distinguishing\n   prefix\
    \ within the parameter name, such as the name of the application\n   package specified\
    \ in source code except when precluded by\n   compatibility constraints.  For\
    \ example:\n      vnc://?com.dell.vncclient.ScreenMode=2&\n   It can also be expected\
    \ that clients will maintain backward\n   compatibility with legacy URI formats\
    \ and parameters.\n   Legacy software applications respond to \"vnc\" URIs in\
    \ different ways\n   and may fail to behave as expected.  It is advisable to test\
    \ \"vnc\"\n   URIs with specific applications or consult application-specific\n\
    \   documentation.\n"
- title: 2.1.2.  Data Types
  contents:
  - "2.1.2.  Data Types\n   \"vnc\" URIs can be percent-encoded as specified in [RFC3986]\
    \ and MUST\n   be decoded.  After decoding, the following type constraints and\n\
    \   semantics apply:\n   o  string\n      Values of \"string\" type are UTF-encoded\
    \ strings as specified in\n      [RFC3629].\n      The \"string<hex>\" subtype\
    \ used in the \"IdHash\" consists of colon-\n      delimited \":\" octets displayed\
    \ in hexadecimal.  For example:\n         5D:D2:39:57\n      Comparison of \"\
    string<hex>\" values SHALL be case insensitive;\n      however, the uppercase\
    \ notation is preferred for readability.\n   o  enum\n      The \"enum\" types\
    \ consist of specific enumerated subtypes and are\n      represented by their\
    \ decimal value.\n      The \"enum<rfbsec>\" values represent an RFB security\
    \ type included\n      in the IANA \"Remote Framebuffer Security Types\" registry\
    \ created\n      by [RFC6143].\n      \"enum<chan>\" values represent connection\
    \ channel types listed in\n      the \"VNC URI Connection Channel Types\" registry\
    \ created by\n      Section 4.4 of this document.  Initial values are:\n     \
    \    Value     Description\n         --------  --------------\n         1    \
    \     Standard TCP\n         23        Secure Tunnel\n         24        Integrated\
    \ SSH\n      The \"Standard TCP\" channel type represents a generic TCP\n    \
    \  connection.  The \"Secure Tunnel\" and \"Integrated SSH\" [RFC4252]\n     \
    \ channel types are described in Section 2.3.\n      Values of the \"enum<idhash>\"\
    \ parameter represent secure hash\n      algorithms in the \"VNC URI Hash Algorithms\"\
    \ registry created by\n      Section 4.5 of this document.  The initial values\
    \ include:\n         Value     Description\n         --------  ------------\n\
    \         1         MD5\n         2         SHA1\n         4         SHA256\n\
    \      The MD5 algorithm is described in [RFC1321].  The SHA-1 and\n      SHA-256\
    \ algorithms are described in [SHS].\n      Values of the \"enum<clevel>\" subtype\
    \ represent a color level.  In\n      the table below, the columns have the meaning\
    \ specified in\n      Section 7.4 of [RFC6143]:\n         BPP = bits-per-pixel\n\
    \         TC = true-color-flag\n         RM = red-max\n         GM = green-max\n\
    \         BM = blue-max\n         RS = red-shift\n         GS = green-shift\n\
    \         BS = blue-shift\n      The values are:\n         Value  Description\
    \      BPP Depth TC RM   GM   BM   RS GS BS\n         -----  --------------- \
    \ --- ----- -- ---- ---- ---- -- -- --\n         1      Black and White  8   3\
    \     t  1    1    1    2  1  0\n         2      Grayscale        8   6     t\
    \  3    3    3    4  2  0\n         3      8 Colors         8   3     t  1   \
    \ 1    1    2  1  0\n         4      64 Colors        8   6     t  3    3    3\
    \    4  2  0\n         5      256 Colors       8   8     t  7    7    3    0 \
    \ 3  6\n         6      16-bit Color     16  16    t  31   63   31   11 5  0\n\
    \         7      24-bit Color     32  24    t  255  255  255  16 8  0\n      \
    \   8      30-bit Color     32  30    t  1023 1023 1023 0  10 20\n      A value\
    \ of \"t\" indicates the true-color-flag should be set.  The\n      big-endian-flag\
    \ (see Section 7.4 of [RFC6143]) should be set as\n      required for the system.\n\
    \   o  ushort\n      The \"ushort\" values represent unsigned 16-bit integers\
    \ expressed\n      in decimal digits with value between 0-65535 inclusive.\n \
    \  o  boolean\n      \"boolean\" values represent conditions that are true or\
    \ false and\n      are represented as either \"true\" or \"false\" respectively.\
    \  For\n      maximum compatibility, clients SHOULD accept the value 1 as\n  \
    \    representing true values and 0 as representing false values.\n      Clients\
    \ SHOULD perform parsing of \"boolean\" values in a case-\n      insensitive manner.\n\
    \      An example \"vnc\" URI including several of these data types is:\n    \
    \     vnc://localhost:5900?ConnectionName=Server&SecurityType=2&\n           \
    \ IdHash=0D:3A:72:08:57:EA:4D:30&SaveConnection=false&\n      Note the above example\
    \ should be considered to be a contiguous\n      string without line breaks or\
    \ whitespace and is broken into\n      multiple lines in this document for readability.\n"
- title: 2.2.  Processing URIs
  contents:
  - "2.2.  Processing URIs\n   Conceptually, a \"vnc\" URI supports only a \"VIEW\"\
    \ operation,\n   indicating the user wishes to view the remote desktop accessible\
    \ via\n   the URI reference.\n   In general, when a VNC client receives a \"vnc\"\
    \ URI, it will initiate\n   a remote desktop connection with the RFB protocol\
    \ using the specified\n   host information and parameter values.  Initiating the\
    \ connection\n   using a connection channel mechanism such as those specified\
    \ in\n   Section 2.3 might require processing prior to establishing the RFB\n\
    \   connection.  A client MAY attempt to automatically discover or\n   negotiate\
    \ appropriate connection channel, security, or other\n   parameter values.\n \
    \  The process for negotiating security types is specified in [RFC6143].\n   Supported\
    \ connection channels could be discovered by testing channel\n   types to detect\
    \ when a channel is successfully established.  To best\n   integrate with other\
    \ applications, the VNC client SHOULD initiate the\n   connection with minimal\
    \ or no user intervention, whenever sufficient\n   information is available and\
    \ adequate security is preserved.\n   Host information and parameter values may\
    \ be provided through\n   connection profiles.  When a parameter value is not\
    \ available from\n   either a URI or a connection profile described in Section\
    \ 2.2.2, the\n   default value specified in Section 2.1.1 SHOULD be applied. \
    \ If\n   available parameters are not sufficient to establish a connection,\n\
    \   the VNC client SHOULD present a session initiation data-entry screen.\n"
- title: 2.2.1.  Error Handling
  contents:
  - "2.2.1.  Error Handling\n   In a typical interactive environment, if an error\
    \ prevents a session\n   from being established, the VNC client presents an error\
    \ message to\n   the user.  When the message is acknowledged, the console application\n\
    \   can show a session initiation data-entry screen populated with\n   available\
    \ session parameters, or it can terminate.  If an error\n   occurs after a session\
    \ is successfully established that terminates\n   the connection, the VNC client\
    \ presents a termination notification to\n   the user.  When the termination notification\
    \ is acknowledged, the\n   client can present a reconnection prompt or terminate.\n\
    \   When an error occurs in a dedicated environment (such as a kiosk\n   system),\
    \ the system can transmit an alert to the remote operator,\n   record a log entry,\
    \ and execute appropriate fallback behavior such as\n   automatically attempting\
    \ to reestablish a session or displaying a\n   generic message requesting servicing.\n"
- title: 2.2.2.  Connection Profile Matching
  contents:
  - "2.2.2.  Connection Profile Matching\n   VNC clients MAY store remote desktop\
    \ session settings in connection\n   profiles.  If the client is able to uniquely\
    \ identify and associate a\n   connection request with a connection profile based\
    \ on the\n   \"ConnectionName\" parameter value, remote host IP address, or hostname\n\
    \   / fully qualified domain name, the VNC client SHOULD apply profile\n   values\
    \ for those settings that do not have values supplied in the\n   \"vnc\" URI.\
    \  When profile data is unavailable, the VNC client MAY\n   apply global application\
    \ defaults for settings not supplied in the\n   URI and for which the scheme does\
    \ not specify a default value.  The\n   VNC client MUST NOT override supplied\
    \ parameters with profile values\n   or global defaults.\n   When the \"SaveConnection\"\
    \ parameter value is true, within the VNC\n   client, a connection profile SHOULD\
    \ be created or updated with the\n   values supplied in the \"vnc\" URI.  Profile\
    \ updates and storage should\n   be consistent with the recommendations in Section\
    \ 3.4.\n"
- title: 2.3.  Connection Channel Types
  contents:
  - '2.3.  Connection Channel Types

    '
- title: 2.3.1.  The "Integrated SSH" Channel Type
  contents:
  - "2.3.1.  The \"Integrated SSH\" Channel Type\n   The \"Integrated SSH\" channel\
    \ type establishes an SSH connection to a\n   host, authenticates with SSH password\
    \ authentication, establishes a\n   secure tunnel to the VNC host/port, and then\
    \ connects to the VNC\n   server using a supported \"SecurityType\".  The secure\
    \ tunnel will\n   provide encryption and data integrity, while verifying the public\
    \ key\n   authenticates the server.  The SSH architecture is specified in\n  \
    \ [RFC4251].  The steps are detailed below:\n   1. The VNC client initiates a\
    \ transport-level connection to the\n      \"SshHost\" on the \"SshPort\" specified\
    \ in the parameter values with\n      a key exchange as described in [RFC4253].\n\
    \   2. When the VNC client receives the server key (or certificate), the\n   \
    \   hash of the key (or certificate) is computed using the algorithm\n      corresponding\
    \ to the \"IdHashAlgorithm\" parameter value and\n      compared with the expected\
    \ \"IdHash\" value (if available).  If the\n      certificate hash cannot be verified,\
    \ the client alerts the user or\n      operator.  In a typical interactive environment,\
    \ the alert\n      provides the remote system's identifying information including\
    \ the\n      hash value and allows the user to terminate the connection.  The\n\
    \      alert could allow the user to accept the key and continue\n      establishing\
    \ the connection.  In a dedicated environment (such as\n      a kiosk system),\
    \ the system can transmit an alert to the remote\n      operator, record a log\
    \ entry, and execute appropriate fallback\n      behavior such as displaying a\
    \ generic message requesting\n      servicing.\n   3. The SSH client authenticates\
    \ the user using the \"SshUsername\" and\n      \"SshPassword\" parameter values\
    \ according to the \"password\"\n      authentication mechanism described in [RFC4252].\n\
    \   4. The SSH client opens a TCP/IP channel as specified in [RFC4254]\n     \
    \ from the local system to the system indicated by the <host> and\n      <port>\
    \ information values.\n   5. The VNC client establishes an RFB connection to the\
    \ VNC server\n      over the channel and authenticates using the \"SecurityType\"\
    \ as\n      described in [RFC6143] or other reference.\n   The VNC client MAY\
    \ establish the connection described in this section\n   using an external SSH\
    \ client, by launching the client and then\n   connecting to a secure tunnel created\
    \ between a local port and the\n   VNC server.\n   If the VNC client is supplied\
    \ with additional parameters outside the\n   scope of this document, it MAY perform\
    \ a variation of these steps\n   consistent with the underlying protocols, for\
    \ example, by using\n   \"publickey\" SSH client authentication [RFC4252] or providing\
    \ another\n   form of authentication to the VNC server.  The specific negotiation\n\
    \   of SSH parameters such as cipher suite configuration is outside the\n   scope\
    \ of this document.\n   Many SSH clients present key hashes using MD5, and it\
    \ can be expected\n   that launching applications will specify the hash be displayed\
    \ in the\n   manner its users are familiar with.\n   For compatibility, when the\
    \ \"SecurityType\" parameter value is\n   \"Integrated SSH\" (24), a VNC client\
    \ MUST treat the value as a request\n   to use \"Integrated SSH\" as the \"ChannelType\"\
    .  However, this value\n   SHOULD NOT be supplied for the \"SecurityType\" parameter\
    \ unless\n   required for backward compatibility as the channel is established\n\
    \   prior to connecting to the server and is not consistent with the\n   negotiation\
    \ of other security types.\n"
- title: 2.3.2.  The "Secure Tunnel" Channel Type
  contents:
  - "2.3.2.  The \"Secure Tunnel\" Channel Type\n   The \"Secure Tunnel\" channel\
    \ type establishes a TLS connection with a\n   remote server using certificate\
    \ authentication, over which a\n   connection to the VNC server is established\
    \ using a supported\n   \"SecurityType\".  The secure tunnel will provide encryption\
    \ and data\n   integrity, while verifying the certificate authenticates the server.\n\
    \   The TLS protocol is specified in [RFC5246].  The steps are detailed\n   below:\n\
    \   1. The VNC client initiates the TLS Handshake Protocol with a system\n   \
    \   indicated by the <host> and <port> information values.\n   2. When the server\
    \ certificate is received, the hash of the key\n      certificate is computed\
    \ using the algorithm corresponding to the\n      \"IdHashAlgorithm\" parameter\
    \ value and compared with the expected\n      \"IdHash\" value (if available).\
    \  If the certificate hash cannot be\n      verified, the client alerts the user\
    \ or operator.  In a typical\n      interactive environment, the alert provides\
    \ the remote system's\n      identifying information and allows the user to terminate\
    \ the\n      connection.  The alert could allow the user to accept the key and\n\
    \      continue establishing the connection.  In a dedicated environment\n   \
    \   (such as a kiosk system), the system can transmit an alert to the\n      remote\
    \ operator, record a log entry, and execute appropriate\n      fallback behavior\
    \ such as displaying a generic message requesting\n      servicing.\n      When\
    \ providing identifying information of a host identified by an\n      X.509 certificate\
    \ [RFC5280] [X.509], the certificate subject,\n      issuer, validity period,\
    \ and certificate hash is typically\n      included.  The VNC client MAY verify\
    \ the validity of the\n      certificate.  If the validity of a certificate is\
    \ not confirmed,\n      the alert includes a statement indicating such information\
    \ has not\n      been verified.\n   3. The client finishes establishing the TLS\
    \ tunnel.\n   4. The VNC client establishes an RFB connection to the VNC server\n\
    \      over the channel and authenticates using the \"SecurityType\" as\n    \
    \  described in [RFC6143] or other reference.\n   If the VNC client is supplied\
    \ with additional parameters, it MAY\n   perform a variation of these steps consistent\
    \ with the underlying\n   protocols, for example, by providing another form of\
    \ authentication\n   to the VNC server.  The negotiation of specific TLS parameters\
    \ such\n   as cipher suite configuration is outside the scope of this document.\n\
    \   The TLS protocol provides backwards compatibility with SSLv3;\n   however,\
    \ due to known security flaws, it SHOULD NOT be used.\n   For compatibility, when\
    \ the \"SecurityType\" parameter value is \"Secure\n   Tunnel\" (23), a VNC client\
    \ MUST treat the value as a request to use\n   \"Secure Tunnel\" as the \"ChannelType\"\
    .  However, this value SHOULD NOT\n   be supplied for the \"SecurityType\" parameter\
    \ unless required for\n   backward compatibility as the channel must be established\
    \ prior to\n   connecting to the server and is not consistent with the negotiation\n\
    \   of other security types.\n"
- title: 3.  Security Considerations
  contents:
  - "3.  Security Considerations\n   General security concerns involving URI schemes\
    \ are discussed in\n   [RFC3986].  In implementing support for the \"vnc\" URI\
    \ scheme, areas\n   for particular consideration include application trust, URI\
    \ handling,\n   host identification, and connection database security.\n   Remote\
    \ desktop connectivity requires the transmission of security\n   credentials,\
    \ which could be included in a URI.  If those credentials\n   are not kept secure,\
    \ an attacker can gain access to any systems using\n   those credentials.  Host\
    \ addresses and connection parameters might\n   also be considered sensitive,\
    \ as such information can be used in\n   planning an attack.\n   URIs can also\
    \ contain host identification information.  It is\n   important to securely identify\
    \ the remote host system to which a\n   connection is established.  If a user\
    \ connects to an attacker's\n   system, user data, including credentials, can\
    \ be exposed.\n   Note that the RFB protocol itself may not encrypt data.  To\
    \ protect\n   data in transit, RFB should be tunneled over TLS [RFC5246], SSH\n\
    \   [RFC4251], or another secure protocol.\n   Some VNC systems can be used without\
    \ authentication.  To protect the\n   remote host, strong passwords or other authentication\
    \ mechanisms need\n   to be used.\n"
- title: 3.1.  Application Trust
  contents:
  - "3.1.  Application Trust\n   A malicious application receiving VNC credentials\
    \ via URI or other\n   means can obviously misuse those credentials.  To protect\
    \ against\n   this, users should only install applications from trusted sources.\n\
    \   The integrity of application packages can be verified through digital\n  \
    \ signatures.\n   Applications launching VNC clients can elect to launch only\n\
    \   particular trusted clients and can specify those clients through\n   platform-specific\
    \ mechanisms.  Package integrity can be verified\n   programmatically by querying\
    \ the package manager for digital\n   signatures or other platform-specific means.\n\
    \   The risk to a VNC client from a launching application is generally\n   much\
    \ lower, since the launching application will not receive\n   credentials or data\
    \ from the client.  A VNC client can verify its\n   caller thorough platform-specific\
    \ means.\n   VNC clients ought not to accept potentially destructive parameters\n\
    \   from untrusted launching applications without explicit user\n   confirmation.\
    \  For example, a client-specific parameter that runs an\n   arbitrary command\
    \ upon establishing an SSH connection used for VNC\n   tunneling is potentially\
    \ destructive and high risk.\n"
- title: 3.2.  URI Handling
  contents:
  - "3.2.  URI Handling\n   Within a mobile or desktop environment, application launch\
    \ will\n   typically involve in-memory URI data transmission facilitated and\n\
    \   secured by the operating system.\n   When \"vnc\" URIs are exchanged or used\
    \ within a system, their contents\n   might be exposed by process listings or\
    \ other instrumentation.  Users\n   need to avoid including sensitive information\
    \ in \"vnc\" URIs that\n   could be exposed to unauthorized observation.\n   If\
    \ sensitive URI information is exchanged across a network, for\n   example, by\
    \ providing a list of connection URIs in a web page, the\n   data needs to be\
    \ encrypted in transit and only be accessible to\n   authorized users.\n   When\
    \ an application detects potentially sensitive information in a\n   \"vnc\" URI,\
    \ it needs to be handled securely or discarded.  In\n   particular, URI data on\
    \ persistent storage needs to be encrypted as\n   described in Section 3.4.\n\
    \   Since \"vnc\" URIs may contain sensitive information, applications\n   should\
    \ avoid logging the URIs even when errors occur.  Users need to\n   avoid including\
    \ sensitive information in \"vnc\" URIs that are used\n   with applications where\
    \ logging is unavoidable.\n   Applications that process URIs in a generic way,\
    \ such as web\n   browsers, might not detect that sensitive information is contained\
    \ in\n   a URI and could cache or store that information insecurely.  It is\n\
    \   advisable to avoid including credentials and other sensitive\n   information\
    \ in URIs that are likely to be processed in a generic way\n   unless such caching\
    \ and storage is disabled or otherwise secured.\n"
- title: 3.3.  Host Identification
  contents:
  - "3.3.  Host Identification\n   In the absence of verifiable host identification,\
    \ a VNC client\n   application is vulnerable to spoofing and man-in-the-middle\
    \ attacks\n   that capture VNC or host OS credentials and user data.  To prevent\n\
    \   such attacks, administrators SHOULD secure their VNC communications\n   with\
    \ TLS [RFC5246] or SSH [RFC4251] tunnels or other connection\n   mechanisms identifying\
    \ remote hosts via certificate or public key.\n   VNC clients MUST verify the\
    \ respective certificates or public keys to\n   confirm the remote host's identity.\n\
    \   An application launching a VNC client via URI MAY provide a\n   certificate\
    \ hash or public key hash identifying the remote host.  VNC\n   clients maintaining\
    \ a connection database can also store certificate\n   or public key data suitable\
    \ for validating a host's identity.\n   If connecting to a system identified by\
    \ certificate or public key and\n   a remote system ID hash cannot be matched\
    \ to available identifying\n   data, the VNC client needs to alert the user or\
    \ operator.  In a\n   typical interactive environment, the alert will provide\
    \ the remote\n   system's identifying information and allow the user to terminate\
    \ the\n   connection.  The alert can allow the user to accept the information\n\
    \   and continue establishing the connection.  In a dedicated environment\n  \
    \ (such as a kiosk system), the system can transmit an alert to the\n   remote\
    \ operator, record a log entry, and execute appropriate fallback\n   behavior\
    \ such as displaying a generic message requesting servicing.\n   When providing\
    \ identifying information of a host identified by an\n   X.509 certificate [RFC5280]\
    \ [X.509], the certificate subject, issuer,\n   validity period, and certificate\
    \ hash need to be included.  The VNC\n   client can verify the certificate validity.\
    \  If the validity of a\n   certificate is not determined, the alert needs to\
    \ include a statement\n   indicating such information has not been verified.\n\
    \   Identifying information of a host identified by public key, such as\n   the\
    \ endpoint of an SSH connection using a raw key, needs to include a\n   hash of\
    \ the key.\n"
- title: 3.4.  Connection Database Integrity
  contents:
  - "3.4.  Connection Database Integrity\n   A VNC client application and/or launching\
    \ application can maintain a\n   connection database containing remote host information,\
    \ credentials,\n   and/or connection parameters.  Applications storing credentials\
    \ need\n   to ensure they are stored in an encrypted format with a decryption\n\
    \   process requiring user-supplied or device-specific data.  If\n   supported,\
    \ it is advisable for applications to have a setting\n   disabling storage of\
    \ credentials.\n   If available, the VNC client connection database can store\n\
    \   certificate or public key data used to verify host identification.\n   To\
    \ prevent a malicious URI from overriding the database, if\n   identification\
    \ information in the URI conflicts with information in\n   the database, the user\
    \ or operator needs to be alerted.  In a typical\n   interactive environment,\
    \ the user can be prompted to accept the new\n   information prior to updating\
    \ the database.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   The \"vnc\" scheme has been registered in the \"\
    Uniform Resource\n   Identifier (URI) Schemes\" registry.\n   The \"Remote Framebuffer\
    \ Security Types\", \"VNC URI Connection Channel\n   Types\", \"VNC URI ID Hash\
    \ Algorithms\", and \"VNC URI Parameters\"\n   registries support elements of\
    \ the scheme.\n"
- title: 4.1.  "vnc" Scheme
  contents:
  - "4.1.  \"vnc\" Scheme\n   IANA has added the \"vnc\" scheme to the \"Uniform Resource\
    \ Identifier\n   (URI) Schemes\" registry with description \"Remote Framebuffer\n\
    \   Protocol\" and reference to this document.  A registration template is\n \
    \  provided in Appendix A.\n   The IANA schemes registry is currently located\
    \ at\n   <http://www.iana.org/assignments/uri-schemes>.\n"
- title: 4.2.  Remote Framebuffer Security Types
  contents:
  - "4.2.  Remote Framebuffer Security Types\n   This document references the existing\
    \ IANA \"Remote Framebuffer\n   Security Types\" registry in specifying security\
    \ type options.  RFB\n   security types are supported in \"vnc\" URIs.\n   Security\
    \ mechanisms integrated with VNC clients might need to alter\n   the process by\
    \ which a connection is established prior to the\n   security handshake described\
    \ in Section 7.1.2 of [RFC6143].  Such\n   mechanisms should be reflected in the\
    \ \"VNC URI Connection Channel\n   Types\" registry described in Section 4.4 of\
    \ this document rather than\n   the \"Remote Framebuffer Security Types\" registry,\
    \ as their use cannot\n   be negotiated by the mechanism specified in [RFC6143].\n\
    \   Exceptions can be made for backwards compatibility.  IANA has updated\n  \
    \ the \"Secure Tunnel\" and \"Integrated SSH\" security types to refer to\n  \
    \ this document.\n"
- title: 4.3.  VNC URI Group
  contents:
  - "4.3.  VNC URI Group\n   IANA has created a \"Virtual Network Computing (VNC)\
    \ Uniform Resource\n   Identifier (URI)\" group.  This group contains application-level,\
    \ URI-\n   related registries distinct from those used by the RFB protocol\n \
    \  itself.\n"
- title: 4.4.  VNC URI Connection Channel Types
  contents:
  - "4.4.  VNC URI Connection Channel Types\n   IANA has created a \"VNC URI Connection\
    \ Channel Types\" registry within\n   the \"Virtual Network Computing (VNC) Uniform\
    \ Resource Identifier\n   (URI)\" group.  The registry includes Value, Description,\
    \ and\n   Reference columns.  The initial contents of the registry are\n   described\
    \ in this document.  The values of the \"Secure Tunnel\" and\n   \"Integrated\
    \ SSH\" types are copied from the RFB Security Types\n   registry.  They are:\n\
    \   Value     Description      Reference\n   --------  ---------------  --------------\n\
    \   0         Reserved         this document\n   1         Standard TCP     this\
    \ document\n   23        Secure Tunnel    this document\n   24        Integrated\
    \ SSH   this document\n   The maximum acceptable value is 2,147,483,647.\n   Future\
    \ assignments to this registry should be made through the \"First\n   Come First\
    \ Served\" process described in [RFC5226].\n"
- title: 4.5.  VNC URI ID Hash Algorithms
  contents:
  - "4.5.  VNC URI ID Hash Algorithms\n   IANA has created a \"VNC URI ID Hash Algorithms\"\
    \ registry within the\n   \"Virtual Network Computing (VNC) Uniform Resource Identifier\
    \ (URI)\"\n   group.  The registry includes Value, Description, and Reference\n\
    \   columns.\n   The initial hash algorithms specified are a subset of the algorithms\n\
    \   contained in the \"TLS HashAlgorithm Registry\".  The initial contents\n \
    \  of the registry are:\n   Value     Description   Reference\n   --------  ------------\
    \  --------------\n   0         Reserved      this document\n   1         MD5\
    \           this document\n   2         SHA1          this document\n   4    \
    \     SHA256        this document\n   The maximum acceptable value is 2,147,483,647.\n\
    \   Future assignments to this registry should be made through the \"First\n \
    \  Come First Served\" process described in [RFC5226].\n"
- title: 4.6.  VNC URI Parameters
  contents:
  - "4.6.  VNC URI Parameters\n   IANA has created a \"VNC URI Parameters\" registry\
    \ within the \"VNC URI\"\n   group.\n   The initial contents are described in\
    \ this document.  They are:\n   +-----------------+-----------------------------+-----------------+\n\
    \   | Name            | Description                 | Reference       |\n   +-----------------+-----------------------------+-----------------+\n\
    \   | ConnectionName  | Name of connection profile  | this document   |\n   +-----------------+-----------------------------+-----------------+\n\
    \   | VncUsername     | VNC server username         | this document   |\n   +-----------------+-----------------------------+-----------------+\n\
    \   | VncPassword     | VNC server password         | this document   |\n   +-----------------+-----------------------------+-----------------+\n\
    \   | SecurityType    | RFB security type used      | this document   |\n   +-----------------+-----------------------------+-----------------+\n\
    \   | ChannelType     | Connection channel type     | this document   |\n   +-----------------+-----------------------------+-----------------+\n\
    \   | SshHost         | SSH server hostname or IP   | this document   |\n   +-----------------+-----------------------------+-----------------+\n\
    \   | SshPort         | SSH server port             | this document   |\n   +-----------------+-----------------------------+-----------------+\n\
    \   | SshUsername     | SSH username                | this document   |\n   +-----------------+-----------------------------+-----------------+\n\
    \   | SshPassword     | SSH password                | this document   |\n   +-----------------+-----------------------------+-----------------+\n\
    \   | IdHashAlgorithm | Hash algorithm used with    | this document   |\n   |\
    \                 | \"IdHash\" parameter          |                 |\n   +-----------------+-----------------------------+-----------------+\n\
    \   | IdHash          | Expected hash of remote     | this document   |\n   |\
    \                 | public key or certificate   |                 |\n   +-----------------+-----------------------------+-----------------+\n\
    \   | ColorLevel      | Client color depth/mode     | this document   |\n   +-----------------+-----------------------------+-----------------+\n\
    \   | ViewOnly        | Client is view only         | this document   |\n   +-----------------+-----------------------------+-----------------+\n\
    \   | SaveConnection  | Store connection info       | this document   |\n   +-----------------+-----------------------------+-----------------+\n\
    \   Future assignments to this registry should be made through the \"First\n \
    \  Come First Served\" process described in [RFC5226].\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative References
  contents:
  - "5.1.  Normative References\n   [RFC1321] Rivest, R., \"The MD5 Message-Digest\
    \ Algorithm\", RFC 1321,\n             DOI 10.17487/RFC1321, April 1992,\n   \
    \          <http://www.rfc-editor.org/info/rfc1321>.\n   [RFC2119] Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate\n             Requirement Levels\",\
    \ BCP 14, RFC 2119,\n             DOI 10.17487/RFC2119, March 1997,\n        \
    \     <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3629] Yergeau, F., \"\
    UTF-8, a transformation format of ISO 10646\",\n             STD 63, RFC 3629,\
    \ DOI 10.17487/RFC3629, November 2003,\n             <http://www.rfc-editor.org/info/rfc3629>.\n\
    \   [RFC3986] Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n    \
    \         Resource Identifier (URI): Generic Syntax\", STD 66, RFC\n         \
    \    3986, DOI 10.17487/RFC3986, January 2005,\n             <http://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC4251] Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n     \
    \        Protocol Architecture\", RFC 4251, DOI 10.17487/RFC4251,\n          \
    \   January 2006, <http://www.rfc-editor.org/info/rfc4251>.\n   [RFC4252] Ylonen,\
    \ T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n             Authentication\
    \ Protocol\", RFC 4252, DOI 10.17487/RFC4252,\n             January 2006, <http://www.rfc-editor.org/info/rfc4252>.\n\
    \   [RFC4253] Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n     \
    \        Transport Layer Protocol\", RFC 4253, DOI 10.17487/RFC4253,\n       \
    \      January 2006, <http://www.rfc-editor.org/info/rfc4253>.\n   [RFC4254] Ylonen,\
    \ T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n             Connection Protocol\"\
    , RFC 4254, DOI 10.17487/RFC4254,\n             January 2006, <http://www.rfc-editor.org/info/rfc4254>.\n\
    \   [RFC5234] Crocker, D., Ed., and P. Overell, \"Augmented BNF for Syntax\n \
    \            Specifications: ABNF\", STD 68, RFC 5234,\n             DOI 10.17487/RFC5234,\
    \ January 2008,\n             <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5246]\
    \ Dierks, T. and E. Rescorla, \"The Transport Layer Security\n             (TLS)\
    \ Protocol Version 1.2\", RFC 5246,\n             DOI 10.17487/RFC5246, August\
    \ 2008,\n             <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5280]\
    \ Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n             Housley, R.,\
    \ and W. Polk, \"Internet X.509 Public Key\n             Infrastructure Certificate\
    \ and Certificate Revocation List\n             (CRL) Profile\", RFC 5280, DOI\
    \ 10.17487/RFC5280, May 2008,\n             <http://www.rfc-editor.org/info/rfc5280>.\n\
    \   [RFC6143] Richardson, T. and J. Levine, \"The Remote Framebuffer\n       \
    \      Protocol\", RFC 6143, DOI 10.17487/RFC6143, March 2011,\n             <http://www.rfc-editor.org/info/rfc6143>.\n\
    \   [SHS]     National Institute of Standards and Technology, \"Secure\n     \
    \        Hash Standard\", NIST FIPS PUB 180-4,\n             DOI 10.6028/NIST.FIPS.180-4,\
    \ August 2015.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [RFC5226] Narten, T. and H. Alvestrand, \"Guidelines\
    \ for Writing an\n             IANA Considerations Section in RFCs\", BCP 26,\
    \ RFC 5226,\n             DOI 10.17487/RFC5226, May 2008,\n             <http://www.rfc-editor.org/info/rfc5226>.\n\
    \   [RFC7595] Thaler, D., Ed., Hansen, T., and T. Hardie, \"Guidelines and\n \
    \            Registration Procedures for URI Schemes\", BCP 35, RFC 7595,\n  \
    \           DOI 10.17487/RFC7595, June 2015,\n             <http://www.rfc-editor.org/info/rfc7595>.\n\
    \   [X.509]   ITU-T, \"Information technology - Open Systems\n             Interconnection\
    \ - The Directory: Public-key and attribute\n             certificate frameworks\"\
    , ITU-T Recommendation X.509,\n             ISO/IEC 9594-8, 2005.\n"
- title: Appendix A.  "vnc" URI Template
  contents:
  - "Appendix A.  \"vnc\" URI Template\n   This template is provided for registration\
    \ of the \"vnc\" URI in the\n   IANA \"Uniform Resource Identifier (URI) Schemes\"\
    \ registry as\n   specified in [RFC7595].\n   Scheme name: vnc\n   Status: Permanent\n\
    \   Applications/protocols that use this scheme name: Virtual Network\n   Computing\
    \ (VNC) remote desktop applications use vnc URIs.  VNC\n   applications use the\
    \ Remote Framebuffer (RFB) protocol.\n   Contact: IESG <iesg@ietf.org>.\n   Change\
    \ Controller: See the authors of this document.  Change control\n   is through\
    \ the IESG on behalf of the IETF <iesg@ietf.org>.\n   References: This document.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Dominic Parkes and the staff of RealVNC Ltd. graciously reviewed\
    \ this\n   document and provided constructive comments.\n   RFB and VNC are registered\
    \ trademarks of RealVNC Ltd. in the United\n   States and in other countries.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   David Warden\n   Dell Products LP\n   200 Dell Way\n \
    \  Round Rock, TX 78682\n   United States\n   Phone: 512-728-0380\n   Email: David_Warden@dell.com\n\
    \   URI: http://www.dell.com\n   Iordan Iordanov\n   Undatech\n   260 Scarlet\
    \ Road, Apt. 503\n   Toronto, ON M6N 4X6\n   Canada\n   Email: iiordanov@gmail.com\n"
