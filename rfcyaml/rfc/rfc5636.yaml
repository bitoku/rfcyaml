- title: __initial_text__
  contents:
  - '                    Traceable Anonymous Certificate

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a practical architecture and protocols for\n\
    \   offering privacy for a user who requests and uses an X.509\n   certificate\
    \ containing a pseudonym, while still retaining the ability\n   to map such a\
    \ certificate to the real user who requested it.  The\n   architecture is compatible\
    \ with IETF certificate request formats such\n   as PKCS10 (RFC 2986) and CMC\
    \ (RFC 5272).  The architecture separates\n   the authorities involved in issuing\
    \ a certificate: one for verifying\n   ownership of a private key (Blind Issuer)\
    \ and the other for\n   validating the contents of a certificate (Anonymity Issuer).\
    \  The end\n   entity (EE) certificates issued under this model are called Traceable\n\
    \   Anonymous Certificates (TACs).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Conventions Used in This Document ..........................4\n  \
    \ 2. General Overview ................................................4\n   3.\
    \ Requirements ....................................................5\n   4. Traceable\
    \ Anonymous Certificate Model ...........................6\n   5. Issuing a TAC\
    \ ...................................................7\n      5.1. Steps in Issuing\
    \ a TAC .....................................8\n      5.2. Mapping a TAC to a\
    \ User's Real Identity ...................15\n      5.3. TAC Request Message Format\
    \ Profile ........................17\n           5.3.1. PKCS10 Profile .....................................17\n\
    \           5.3.2. CMC Profile ........................................18\n  \
    \ 6. Security Considerations ........................................19\n   7.\
    \ Acknowledgments ................................................21\n   8. References\
    \ .....................................................21\n      8.1. Normative\
    \ References ......................................21\n      8.2. Informative\
    \ References ....................................22\n   Appendix A. Traceable\
    \ Anonymous Certificate ASN.1 Modules .........24\n   Appendix B. TAC Message\
    \ Exchanges over Transport Layer Security ...26\n      B.1. Message Exchanges\
    \ between a User and the BI or the AI .....26\n      B.2. Message Exchanges between\
    \ the BI and the AI ...............27\n      B.3. Message Exchanges between the\
    \ Aggrieved Party and the AI\n           or the BI .................................................27\n\
    \   Appendix C. Cryptographic Message Syntax Profile for TAC Token ....28\n  \
    \    C.1. Signed-Data Content Type ..................................28\n    \
    \       C.1.1. encapContentInfo ...................................29\n      \
    \     C.1.2. signerInfos ........................................29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Public Key Infrastructure (PKI) provides a powerful means\
    \ of\n   authenticating individuals, organizations, and computers (e.g., web\n\
    \   servers).  However, when individuals use certificates to access\n   resources\
    \ on the public Internet, there are legitimate concerns about\n   personal privacy,\
    \ and thus there are increasing demands for privacy-\n   enhancing techniques\
    \ on the Internet.\n   In a PKI, an authorized entity such as a Certification\
    \ Authority (CA)\n   or a Registration Authority (RA) may be perceived, from a\
    \ privacy\n   perspective, as a \"big brother\", even when a CA issues a certificate\n\
    \   containing a Subject name that is a pseudonym.  This is because such\n   entities\
    \ can always map a pseudonym in a certificate they issued to\n   the name of the\
    \ real user to whom it was issued.  This document\n   defines a practical architecture\
    \ and protocols for offering privacy\n   for a user who requests and uses an X.509\
    \ certificate containing a\n   pseudonym, while still retaining the ability to\
    \ map such a\n   certificate to the real user who requested it.\n   A PKI typically\
    \ serves to identify the holder of a private key (to\n   the corresponding public\
    \ key in a certificate), in a standard\n   fashion.  The public key, identity,\
    \ and related information are\n   signed by an entity acting as a CA as specified\
    \ in X.509 [11] and as\n   profiled for use in the Internet [2].  During the past\
    \ decade, PKIs\n   have been widely deployed to support various types of communications\n\
    \   and transactions over the Internet.\n   However, with regard to privacy on\
    \ the Internet, a PKI is generally\n   not supportive of privacy, at least in\
    \ part because of the following\n   issues:\n   -  A certificate typically contains\
    \ in the Subject field the true\n      identity of the user to whom it was issued.\
    \  This identity is\n      disclosed to a relying party (e.g., a web site or the\
    \ recipient of\n      an S/MIME message [18]) whenever the certificate holder\
    \ presents\n      it in a security protocol that requires a user to present a\n\
    \      certificate.  In some protocols, e.g., TLS, a user's certificate\n    \
    \  is sent via an unencrypted channel prior to establishing a secure\n      communication\
    \ capability.\n   -  A certificate often is published by the CA, for example,\
    \ in a\n      directory system that may be widely accessible.\n   -  An anonymous\
    \ (end entity) certificate [9] is one that indicates\n      that the holder's\
    \ true identity is not represented in the subject\n      field.  (Such a certificate\
    \ might more accurately be called\n      \"pseudonymous\" since an X.509 certificate\
    \ must contain an\n      identifier to comply with PKI format standards, and a\
    \ CA must not\n      issue multiple certificates with the same Subject name to\n\
    \      different entities.  However, we use the more common term\n      \"anonymous\"\
    \ throughout this document to refer to such\n      certificates.)  Issuance of\
    \ anonymous certificates could enhance\n      user privacy.\n   There is however,\
    \ a need to balance privacy and accountability when\n   issuing anonymous certificates.\
    \  If a CA/RA is unable to map an\n   anonymous certificate to the real user to\
    \ whom it was issued, the\n   user might abuse the anonymity afforded by the certificate\
    \ because\n   there would be no recourse for relying parties.\n   A CA or RA generally\
    \ would be able to map an anonymous certificate to\n   the user to whom it was\
    \ issued, to avoid such problems.  To do so,\n   the CA/RA would initially identify\
    \ the user and maintain a database\n   that relates the user's true identity to\
    \ the pseudonym carried in the\n   certificate's Subject field.\n   In a traditional\
    \ PKI, there is a nominal separation of functions\n   between a RA and a CA, but\
    \ in practice these roles are often closely\n   coordinated.  Thus, either the\
    \ RA or CA could, in principle,\n   unilaterally map an autonomous certificate\
    \ to the real user identity.\n   The architecture, syntax, and protocol conventions\
    \ described in this\n   document allow anonymous certificates to be issued and\
    \ used in\n   existing PKIs in a way that provides a balance between privacy and\
    \ a\n   conditional ability to map an anonymous certificate to the individual\n\
    \   to whom it was issued.\n   An anonymous certificate (Traceable Anonymous Certificate)\
    \ in this\n   document is issued by a pair of entities that operate in a split\n\
    \   responsibility mode: a Blind Issuer (BI) and an Anonymity Issuer\n   (AI).\
    \  The conditional traceability offered by this model assumes\n   strong separation\
    \ between the RA and CA roles, and employs technical\n   means (threshold cryptography\
    \ and \"blinded\" signatures), to\n   facilitate that separation.  (A blinded\
    \ signature is one in which the\n   value being signed is not made visible to\
    \ the signer, via\n   cryptographic means.  Additional details are provided later.)\n\
    \   The AI has knowledge of the certificate issued to the user, but no\n   knowledge\
    \ of the user's real identity.  The BI knows the user's real\n   identity, but\
    \ has no knowledge of the certificate issued to that\n   user.  Only if the AI\
    \ and BI collaborate can they map the TAC issued\n   to a user to the real identity\
    \ of that user.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [1].\n"
- title: 2.  General Overview
  contents:
  - "2.  General Overview\n   This section defines the notion of a Traceable Anonymous\
    \ Certificate\n   (referred to as TAC or anonymous certificate in this document).\
    \  It\n   is distinguished from a conventional pseudonymous certificate [8, 9]\n\
    \   in that a TAC containing a pseudonym in the Subject field will be\n   conditionally\
    \ traceable (as defined that it is not trivial to design\n   a system that issues\
    \ anonymous certificates, consistent with Internet\n   PKI standards, when additional\
    \ constraints are imposed, as\n   illustrated by the following scenarios.\n  \
    \ -  If a CA issues an anonymous certificate without verifying a true\n      identity,\
    \ it is untraceable, which provides inadequate recourse if\n      the user to\
    \ whom the certificate was issued abuses the anonymity\n      it provides.  (Even\
    \ without the ability to trace an anonymous\n      certificate to the corresponding\
    \ user, the certificate can always\n      be revoked, but this may not be a sufficient\
    \ response to abuse.)\n   -  If a CA issues an anonymous certificate but verifies\
    \ the real\n      identity and maintains a record of that identity, the CA can\
    \ link\n      the pseudonym in the Subject field to the real identity, hence a\n\
    \      potential \"big brother\" problem [12].\n   -  If the CA issues a certificate\
    \ with a certificate containing a\n      user-selected Subject name, and does\
    \ not verify the user's\n      identity, the certificate is effectively untraceable.\n\
    \   -  If the CA issues an anonymous certificate using a blind signature\n   \
    \   (see below), the CA cannot verify the contents of the certificate,\n     \
    \ making the certificate untraceable and essentially forgeable.  (If\n      a\
    \ CA signs a certificate without examining its content, even after\n      verifying\
    \ a user's identity, certificates issued by the CA are\n      essentially forgeable.)\n\
    \   To address the issues described above, we extend the simple\n   separation-of-authority\
    \ concept already defined in the RA/CA PKI\n   model.  First we restate the requirements\
    \ in a more precise and\n   concise fashion, and introduce a basic model for achieving\
    \ the goals\n   from a more general perspective [16].\n"
- title: 3.  Requirements
  contents:
  - "3.  Requirements\n   This document describes a new separation-of-authority model\
    \ and\n   protocols for certificate issuance in a way that enables issuing\n \
    \  Traceable Anonymous Certificates, while maintaining compatibility\n   with\
    \ the standards used in existing PKIs.  To do this, the following\n   requirements\
    \ must be satisfied.\n   -  The Traceable Anonymous Certificate MUST be a syntactically\
    \ valid\n      X.509 certificate in which the Subject field contains a pseudonym.\n\
    \   -  There must be technical means to counter a claim by a malicious\n     \
    \ user who later denies having participated in the activities that\n      resulted\
    \ in issuing a TAC.  Specifically, when a user is\n      identified and requests\
    \ issuance of a TAC, the mechanisms employed\n      MUST ensure that the user\
    \ to whom the TAC is issued is the one who\n      requested the TAC (unless that\
    \ user transfers the private key to\n      another party, unknown to the RA/CA).\n\
    \   -  The traceability and revocation functions MUST support the linkage\n  \
    \    between a user's true identity and the pseudonym in a certificate\n     \
    \ issued to the user.  Thus, the solution MUST enable determining a\n      true\
    \ identity from the anonymous certificate, upon agreement among\n      the authorities\
    \ who collaborated to issue the certificate.\n"
- title: 4.  Traceable Anonymous Certificate Model
  contents:
  - "4.  Traceable Anonymous Certificate Model\n   A TAC is an end entity (EE) certificate\
    \ issued by a pair of entities\n   that operate in a split responsibility mode:\
    \ a Blind Issuer (BI) and\n   an Anonymity Issuer (AI).  The pair appear as a\
    \ single CA to the\n   outside world, e.g., they are represented by a single CA\
    \ certificate.\n   The public key in the CA certificate is used to verify certificates\n\
    \   issued by this CA in the normal fashion, i.e., a relying party\n   processes\
    \ a TAC just like any other EE certificates.\n   In this model, the BI acts as\
    \ a RA.  It interacts with a user to\n   verify the user's \"real\" identity,\
    \ just like a normal RA.  The BI\n   maintains a database that can be used to\
    \ map a TAC to the user to\n   whom it was issued, but only with the cooperation\
    \ of the AI.\n   This mapping will be initiated only if there is evidence that\
    \ the\n   user to whom the TAC was issued has abused the anonymity provided by\n\
    \   the TAC.\n   The AI acts as a CA.  It validates a certificate request submitted\
    \ by\n   the user, using a standard certificate request format such as PKCS10.\n\
    \   The AI performs the functions common to a CA, including a private-key\n  \
    \ proof-of-possession (PoP) check, a name uniqueness check among all\n   certificates\
    \ issued by it, assignment of a serial number, etc.  To\n   effect issuance of\
    \ the TAC, the AI interacts with the BI, over a\n   secure channel, to jointly\
    \ create the signature on the TAC, and sends\n   the signed TAC to the user.\n\
    \   The AI does this without learning the user's real identity (either\n   from\
    \ the user or from the BI).\n   The result of this split functionality between\
    \ the BI and the AI is\n   that neither can unilaterally act to reveal the real\
    \ user identity.\n   The AI has knowledge of the certificate issued to the user,\
    \ but no\n   knowledge of the user's real identity.  The BI knows the user's real\n\
    \   identity, but has no knowledge of the certificate issued to that\n   user.\
    \  Only if the AI and BI collaborate can they map the TAC issued\n   to a user\
    \ to the real identity of that user.\n   This system is not perfect.  For example,\
    \ it assumes that the AI and\n   BI collaborate to reveal a user's real identity\
    \ only under\n   appropriate circumstances.  The details of the procedural security\n\
    \   means by which this assurance is achieved are outside the scope of\n   this\
    \ document.  Nonetheless, there are security benefits to adopting\n   this model\
    \ described in this document, based on the technical\n   approach used to enable\
    \ separation of the BI and AI functions.\n   For example, the BI and AI can be\
    \ operated by different organizations\n   in geographically separate facilities,\
    \ and managed by different\n   staff.  As a result, one can have higher confidence\
    \ in the anonymity\n   offered to a user by the system, as opposed to a monolithic\
    \ CA\n   operating model that relies only on procedural security controls to\n\
    \   ensure anonymity.\n"
- title: 5.  Issuing a TAC
  contents:
  - "5.  Issuing a TAC\n   The follow subsections describe the procedures and the\
    \ protocols\n   employed to issue a TAC.  To begin, BI and AI collaborate to generate\n\
    \   a public key pair (that represents the CA as seen by relying parties)\n  \
    \ using a threshold signature scheme.  Such schemes have been defined\n   for\
    \ RSA.  The details of how this is accomplished depend on the\n   algorithm in\
    \ question, and thus are not described here.  The reader\n   is referred to [15]\
    \ where procedures for implementing RSA threshold\n   signatures are described.\
    \  A DSA-based threshold signature scheme\n   will be incorporated into a future\
    \ version of TAC [14].\n   Note that this split signing model for certificate\
    \ issuance is an\n   especially simple case of a threshold signature; the private\
    \ key used\n   to sign a TAC is divided into exactly two shares, one held by the\
    \ BI\n   and one held by the AI.  Both shares must be used, serially, to\n   create\
    \ a signature on a TAC.  After the key pair for the (nominal) CA\n   has been\
    \ generated and the private key split between the BI and the\n   AI, the public\
    \ key is published, e.g., in a self-signed certificate\n   that represents the\
    \ TAC CA.\n   Another public-key cryptographic function that is an essential part\n\
    \   of this system is called \"blind signing\".  To create a blind\n   signature,\
    \ one party encrypts a value to be signed, e.g., a hash\n   value of a certificate,\
    \ and passes it to the signer.  The signer\n   digitally signs the encrypted value,\
    \ and returns it to the first\n   party.  The first party inverts the encryption\
    \ it applied with the\n   random value in the first place, to yield a signature\
    \ on the\n   underlying data, e.g., a hash value.\n   This technique enables the\
    \ signer to digitally sign a message,\n   without seeing the content of the message.\
    \  This is the simplest\n   approach to blind signing; it requires that the public\
    \ key needed to\n   invert the encryption not be available to the blind signer.\
    \  Other\n   blind signing techniques avoid the need for this restriction, but\
    \ are\n   more complex.\n   The tricky part of a cryptographic blinding function\
    \ is that is must\n   be associative and commutative, with regard to a public-key\
    \ signature\n   function.  Let B be a blinding function, B-INV is its inverse,\
    \ and S\n   is a public-key signature.  The following relationship must hold:\n\
    \   B-INV( S (B (X) ) ) = B-INV( B( S (X) ) ) = S (X).  RSA can be used\n   to\
    \ blind a value with random value and to sign a blinded value\n   because the\
    \ modular exponentiation operation used by RSA for both\n   signature and for\
    \ encryption is associative and commutative.\n   The TAC issuance process described\
    \ below requires an ability for the\n   BI, the AI, and the user to employ secure\
    \ communication channels\n   between one another.\n   Use of TLS [17] is one suitable\
    \ means to establish such channels,\n   although other options also are acceptable.\
    \  To this end, this\n   document assumes TLS as the default secure communication\
    \ channel, and\n   thus requires that the BI and the AI have X.509 certificates\
    \ that\n   represent them.\n   These certificates are independent of the certificate\
    \ that represents\n   the CA (formed by the BI and the AI) and may be either self-signed\
    \ or\n   issued by other CA(s).\n   Appendix B provides a top-level description\
    \ of the application of TLS\n   to these message exchanges.\n"
- title: 5.1.  Steps in Issuing a TAC
  contents:
  - "5.1.  Steps in Issuing a TAC\n   Figure 1 depicts the procedures for issuing\
    \ a TAC.  The lines\n   represent steps in the issuance process, and the numbers\
    \ refer to\n   these steps.\n                                     1     +---------------+\n\
    \                                +<-------->|    Blind      |\n              \
    \                  |    2     |    Issuer (BI)|\n                            \
    \    |          +---------------+\n         +-------+              |         \
    \          ^\n         | user  |<------------>|                 4 | 5\n      \
    \   +-------+              |                   v\n                           \
    \     |    3     +----------------+\n                                +--------->|\
    \                |\n                                |          |    Anonymity\
    \   |\n                                |          |   Issuer (AI)  |\n       \
    \                         +<-------- |                |\n                    \
    \                 6     +----------------+\n                    Figure 1.  TAC\
    \ Issuance Procedures\n   Step 1:\n      A user authenticates himself to the BI.\
    \  This may be effected via\n      an in-person meeting or electronically.  The\
    \ same sorts of\n      procedures that RAs use for normal certificate issuance\
    \ are used\n      here.  Such procedures are not standardized, and thus they are\
    \ not\n      described here in detail.  For purposes of the TAC architecture,\n\
    \      we require the BI to establish a record in a database for the user\n  \
    \    and to generate a (locally) unique identifier, called the UserKey,\n    \
    \  that will serve as a (database) key for the record.  The UserKey\n      value\
    \ MUST NOT be generated in a fashion that permits any external\n      entity (including\
    \ the AI) to infer a user's real identity from its\n      value.  (For example,\
    \ if the user's name is used as an input to a\n      one-way hash algorithm to\
    \ generate the UserKey value, then\n      additional random data must be used\
    \ as an input to prevent simple\n      guessing attacks.) Associated with the\
    \ UserKey in this database is\n      an expiration time.  The expiration time\
    \ is used by the BI and AI\n      to reject session-level replay attacks in some\
    \ exchanges, and to\n      enable the BI and AI to garbage-collect database records\
    \ if a user\n      initiates but does not complete the certificate request process.\n\
    \      It is RECOMMENDED that the UserKey be a random or pseudo-random\n     \
    \ value.  Whenever the BI passes a UserKey to an external party, or\n      accepts\
    \ the UserKey from an external party (e.g., the AI), the\n      value is embedded\
    \ in a digitally signed CMS object called a Token,\n      accompanied by the timestamp\
    \ noted above.  The signature on a\n      Token is generated by the BI.  (Note\
    \ that the certificate used is\n      just a certificate suitable for use with\
    \ CMS, and is NOT the\n      split-key certificate used to verify TAC.)\n    \
    \  The following ASN.1 syntax represents the UserKey and an\n      expiration\
    \ time:\n         UserKey ::= OCTET STRING\n         Timeout ::= GeneralizedTime\n\
    \      In the context of this specification, the GeneralizedTime value\n     \
    \ MUST be expressed in Greenwich Mean Time (Zulu) and MUST include\n      seconds\
    \ (YYYYMMDDHHMMSSZ).\n   Step 2:\n      BI presents to the user a data structure\
    \ called a Token.  The\n      Token must be conveyed to the user via a secure\
    \ channel, e.g., in\n      person or via a secure communication channel.  The\
    \ secure channel\n      is required here to prevent a wiretapper from being able\
    \ to\n      acquire the Token.  For example, if the user establishes a one-way\n\
    \      authenticated TLS session to the BI in Step 1, this session could\n   \
    \   be used to pass the Token back to the user.\n      The Token serves two purposes.\
    \  During TAC issuance, the Token is\n      used to verify that a request to the\
    \ AI has been submitted by a\n      user who is registered with the BI (and thus\
    \ there is a record in\n      the BI's database with the real identity of the\
    \ user).  This is\n      necessary to ensure that the TAC can later be traced\
    \ to the user.\n      If there is a request to reveal the real identity of a user,\
    \ the\n      AI will release the Token to the entity requesting that a TAC be\n\
    \      traced, and that entity will pass the Token to the BI, to enable\n    \
    \  tracing the TAC.  If the BI does not perform its part of the\n      certificate\
    \ issuance procedure (in Step 6) before the Token\n      expires, the BI can delete\
    \ the Token from the database as a means\n      of garbage collection.  The timeout\
    \ value in a Token is selected\n      by the BI.\n      The Token is a ContentInfo\
    \ with a contentType of id-kisa-tac-token\n      and a content that holds a SignedData\
    \ of CMS SignedData object\n      [6], signed by the BI, where the eContent\n\
    \      (EncapsulatedContentInfo) is a SEQUENCE consisting of the UserKey\n   \
    \   and Timeout, and eContentType MUST be id-data.\n      EncapsulatedContentInfo\
    \ ::= SEQUENCE {\n         eContentType ContentType, -- OBJECT IDENTIFIER : id-data\n\
    \         eContent [0] EXPLICIT OCTET STRING OPTIONAL }\n      -- DER encoded\
    \ with the input of 'SEQUENCE of the UserKey and\n      -- Timeout'\n      id-data\
    \ OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n      rsadsi(113549)\
    \ pkcs(1) pkcs7(7) 1 }\n      The signature (SignatureValue of SignerInfo) is\
    \ generated using\n      the BI's private signature key, corresponding to the\
    \ public key\n      present in the BI's certificate.  (Note that this certificate\
    \ is\n      just a certificate suitable for use with TLS, and is NOT the\n   \
    \   split-key certificate used to verify a TAC.)  The certificate (or\n      certificates)\
    \ MUST be present.  Appendix A provides the ASN.1\n      syntax for the Token,\
    \ as a profiled CMS ContentInfo object.\n      Appendix C provides the CMS SignedData\
    \ object profile for wrapping\n      the Token.\n         Token ::= ContentInfo\n\
    \      Upon receipt of the Token, the user SHOULD verify the signature\n     \
    \ using the BI public key and note the Timeout value to ensure that\n      the\
    \ certificate request process is completed prior to that time.\n   Step 3:\n \
    \     The user prepares a certificate request in a standard format,\n      e.g.,\
    \ PKCS10 [3] or CMC [4].  The Subject field of the certificate\n      contains\
    \ a pseudonym generated by the user.  It is anticipated\n      that the CA (BI\
    \ + AI) may provide software for users to employ in\n      constructing certificate\
    \ requests.\n      If so, then this software can generate a candidate Subject\
    \ name to\n      minimize the likelihood of a collision.  If the user selects\
    \ a\n      candidate pseudonym without such support, the likelihood of a\n   \
    \   subject name collision probably will be greater, increasing the\n      likelihood\
    \ that the certificate request will be rejected or that\n      the AI will have\
    \ to generate a pseudonym for the user.\n      After constructing the certificate\
    \ request, the user sends it,\n      along with the Token from Step 2, to the\
    \ AI, via a secure channel.\n      This channel MUST be encrypted and one-way\
    \ authenticated, i.e.,\n      the user MUST be able to verify that it is communicating\
    \ with the\n      AI, but the AI MUST NOT be able to verify the real identity\
    \ of the\n      user.  Typical use of TLS for secure web site access satisfies\n\
    \      this requirement.  The certificate request of PKCS10 [3] or CMC\n     \
    \ [4] carries the Token from Step 2.\n      The Token is carried as an attribute\
    \ in a certificate request\n      (CertificationRequestInfo.attributes) where\
    \ the attrType MUST be\n      id-kisa-tac below in PKCS10 format.  The Token is\
    \ set to\n      attrValues (Certificate Request Controls) where the attrType MUST\n\
    \      be id-kisa-tac in CMC [4] format.  The TAC request message profile\n  \
    \    is described in the section 5.3.\n   Step 4:\n      The AI, upon receipt\
    \ of the certificate request containing a\n      Token, verifies that the request\
    \ is consistent with the processing\n      defined for the request format (PKCS10).\
    \  If a Subject name is\n      present, it verifies that the proposed pseudonym\
    \ is unique.  The\n      AI also verifies the signature on the Token and, if it\
    \ is valid,\n      checks the Timeout value to reject a replay attack based on\
    \ a\n      \"timed-out\" Token.\n      A Token with an old Timeout value is rejected\
    \ out-of-hand by the\n      AI.  (After a Token's Timeout time is reached, the\
    \ AI deletes the\n      Token from its cache.) Next, the AI compares the received\
    \ Token\n      against a cache of recent (i.e., not \"timed out\"), validated\n\
    \      Tokens.  The AI matches the resubmitted request to the original\n     \
    \ request, and responds accordingly.  For example, if a duplicate is\n      detected,\
    \ the certificate request can be rejected as a replay.\n      If the Subject field\
    \ contains a Subject name already issued by the\n      AI, the AI MUST either\
    \ reject the certificate request, or\n      substitute a pseudonym it generates,\
    \ depending on the policy of\n      the TAC CA.  If the certificate request is\
    \ acceptable, the AI\n      assigns a serial number and constructs a tbsCertificate\
    \ (i.e., the\n      final form of the certificate payload, ready to be signed).\n\
    \      The AI then computes a hash over this data structure and blinds\n     \
    \ the hash value.  (The AI blinds the hash value using a key from a\n      public-key\
    \ encryption pair where neither key is ever made public.\n      The other key\
    \ from this pair is used by the AI in Step 6 to \"un-\n      blind\" the signed\
    \ hash value.)\n      The AI sends the CMS ContentInfo object of TokenandBlindHash\
    \ to\n      the BI, via a two-way authenticated and encrypted channel.  The\n\
    \      two-way authentication and encryption is required to ensure that\n    \
    \  the AI is sending these values to the BI, to allow the BI to\n      verify\
    \ that the values were transmitted by the AI, and to prevent\n      a wiretapper\
    \ from acquiring the Token.  A TLS session in which\n      both parties employ\
    \ certificates to authenticate one another is\n      the RECOMMENDED way to achieve\
    \ this communication.\n      The TokenandBlindHash is a CMS ContentInfo with a\
    \ contentType of\n      id-kisa-tac-tokenandblindhash and a content that holds\
    \ a\n      SignedData of CMS SignedData object [6], signed by the AI, where\n\
    \      the eContent (EncapsulatedContentInfo) is a SEQUENCE consisting of\n  \
    \    the Token and BlindedCertificateHash, and eContentType MUST be\n      id-data.\n\
    \      EncapsulatedContentInfo ::= SEQUENCE {\n         eContentType ContentType,\
    \ -- OBJECT IDENTIFIER : id-data\n         eContent [0] EXPLICIT OCTET STRING\
    \ OPTIONAL }\n      -- DER encoded with the input of 'SEQUENCE of the Token and\n\
    \      -- BlindedCertificateHash'\n      The signature (SignatureValue of SignerInfo)\
    \ is generated using\n      the AI's private signature key, corresponding to the\
    \ public key\n      present in the AI's certificate.  (Note that this certificate\
    \ is\n      just a certificate suitable for use with TLS, and is NOT the\n   \
    \   split-key certificate used to issue a TAC.)  The certificate (or\n      certificates)\
    \ MUST be present.\n      The following ASN.1 syntax represents the Token and\n\
    \      BlindedCertificateHash:\n         Token ::= ContentInfo\n         BlinedCertificateHash\
    \ ::= OCTET STRING\n      Token is the value of ContentInfo in the certificate\
    \ request\n      message (CertificationRequestInfo.attributes) from Step 3.\n\
    \      BlindedCertificateHash is the blinded hash value for the\n      tbsCertificate.\n\
    \      Appendix A provides the ASN.1 syntax for the Token, as a profiled\n   \
    \   CMS ContentInfo object.  Appendix C provides the CMS SignedData\n      object\
    \ profile for wrapping the Token.\n         TokenandBlindHash ::= ContentInfo\n\
    \   Step 5:\n      The BI receives the Token and blinded certificate hash via\
    \ the\n      secure channel described above.  First the BI verifies the\n    \
    \  signature on the TokenandBlindHash generated by AI and then\n      verifies\
    \ the signature on the Token to ensure that it is a\n      legitimate Token generated\
    \ by the BI.  Next, the BI checks its\n      database to ensure that the UserKey\
    \ value from the Token is\n      present and that the Token has not been used\
    \ to authorize issuance\n      of a certificate previously.\n      This check\
    \ is performed to ensure that the BI has authenticated\n      the user and entered\
    \ the user's real identity into the BI's\n      database.  Each Token authorizes\
    \ issuance of only one certificate,\n      so the check also ensures that the\
    \ same Token has not been used to\n      authorize issuance of more than one certificate.\
    \  These checks\n      ensure that the certificate issued by the AI to this user\
    \ will be\n      traceable, if needed.\n      The BI uses its share of the threshold\
    \ private signature key to\n      sign the blinded certificate hash and returns\
    \ the CMS SignedData\n      back to the AI.  The eContent of the SignedData is\
    \ a SEQUENCE\n      consisting of the Token and PartiallySignedCertificateHash.\n\
    \      The following ASN.1 syntax represents the Token and\n      PartiallySignedCertificateHash:\n\
    \         Token ::= ContentInfo\n         PartiallySignedCertificateHash ::= OCTET\
    \ STRING\n      Token is the token value of the TokenandBlindHash (where the\n\
    \      eContent is a SEQUENCE consisting of the Token and\n      PartiallySignedCertificateHash)\
    \ from Step 4.\n      PartiallySignedCertificateHash is the signature value generated\
    \ by\n      BI's share of the threshold private signature key on\n      BlindedCertificateHash\
    \ from Step 4.\n      The TokenandPartiallySignedCertificateHash is a CMS ContentInfo\n\
    \      with a contentType of id-kisa-tac-tokenandpartially and a content\n   \
    \   that holds a SignedData of CMS SignedData object [6], signed by\n      the\
    \ BI, where the eContent (EncapsulatedContentInfo) is a SEQUENCE\n      consisting\
    \ of the Token and PartiallySignedCertificateHash, and\n      eContentType MUST\
    \ be id-data.\n      EncapsulatedContentInfo ::= SEQUENCE {\n         eContentType\
    \ ContentType, -- OBJECT IDENTIFIER : id-data\n         eContent [0] EXPLICIT\
    \ OCTET STRING OPTIONAL }\n      -- DER encoded with the input of 'SEQUENCE of\
    \ the Token and\n      -- PartiallySignedCertificateHash'\n      The signature\
    \ (SignatureValue of SignerInfo) is generated using\n      the BI's private signature\
    \ key, corresponding to the public key\n      present in the BI's certificate.\
    \  (Note that this certificate is\n      just a certificate suitable for use with\
    \ TLS, and is NOT the\n      split-key certificate used to issue a TAC.) The certificate\
    \ (or\n      certificates) MUST be present.  Appendix A provides the ASN.1\n \
    \     syntax for the Token, as a profiled CMS SignedData object.\n      Appendix\
    \ C provides the CMS SignedData object profile for wrapping\n      the Token.\n\
    \         TokenandPartiallySignedCertificateHash ::= ContentInfo\n   Step 6:\n\
    \      Upon receipt of the TokenandPartiallySignedCertificateHash, the AI\n  \
    \    verifies the signature on the PartiallySignedCertificateHash,\n      generated\
    \ by BI and then matches the Token against its list of\n      outstanding requests\
    \ to the BI.  The AI then \"un-blinds\" the\n      blindHashValue, using the other\
    \ key from the key pair employed in\n      Step 4.  This reveals the partially\
    \ signed certificate hash.  The\n      AI then applies its part of the split private\
    \ key to complete the\n      signature of the certificate for the user.\n    \
    \  It records the certificate and the Token value in its database, to\n      enable\
    \ later tracing of the certificate to the real user identity,\n      if needed.\
    \  The AI transmits the completed certificate to the\n      user, via the response\
    \ message from the request protocol employed\n      by the user in Step 3, PKCS10.\n\
    \      The user may now employ the certificate with any PKI-enabled\n      application\
    \ or protocol that makes use of X.509 certificates\n      (consistent with the\
    \ key usage, and Extended Key Usage (EKU)\n      values in the certificate). \
    \ Note that the user should be prepared\n      to accommodate delays in the certificate\
    \ issuance process.  For\n      example, a connection between the user and the\
    \ AI might fail\n      sometime after the user submits a certificate request at\
    \ the end\n      of Step 3 and before the AI returns the certificate at the end\
    \ of\n      Step 6.  If this happens, the user should resubmit the request.\n\
    \      The AI and BI retain sufficient state to be able to match the\n      resubmitted\
    \ request to the original request, and respond\n      accordingly.  If the process\
    \ failed in steps 5 or 6, the AI\n      returns an error indication to the user.\n"
- title: 5.2.  Mapping a TAC to a User's Real Identity
  contents:
  - "5.2.  Mapping a TAC to a User's Real Identity\n   If a user to whom a TAC has\
    \ been issued abuses the anonymity provided\n   by the TAC, the TAC can be traced\
    \ to the identity of that user.\n   Mapping a TAC to a user's real identity is\
    \ a four-step process,\n   described below and illustrated in Figure 2.\n    \
    \                                 C    +---------------+\n                   \
    \            +<-------->|    Blind      |\n                               |  \
    \   D    |    Issuer (BI)|\n                               |          +---------------+\n\
    \        +---------+            |\n        | Relying |<---------->|\n        |\
    \ Party   |            |\n        +---------+            |\n                 \
    \              |    A     +----------------+\n                               +<-------->|\
    \    Anonymity   |\n                                    B     |   Issuer (AI)\
    \  |\n                                          +----------------+\n         \
    \     Figure 2.  Revealing a TAC User's Real Identity\n   Step A:\n      The AI\
    \ verifies the assertion by an aggrieved party that a TAC\n      user has abused\
    \ the anonymity provided by his TAC.  The procedures\n      used by AI to verify\
    \ that such abuse has occurred are outside the\n      scope of this document.\
    \  No protocol is defined here for the\n      interaction between the aggrieved\
    \ party and AI.  The only\n      technical requirement is that the TAC of the\
    \ offending user be\n      provided to the AI.  If the AI determines that there\
    \ is sufficient\n      evidence of abuse to trace the TAC to the user, the AI\
    \ revokes the\n      TAC, by listing its serial number on the next Certificate\n\
    \      Revocation List (CRL) issued by the AI.\n      An AI unilaterally manages\
    \ the CRL for a TAC.  Because RFC 5280\n      implementations are not required\
    \ to process indirect CRLs, we\n      create a second certificate for the CA,\
    \ under the TAC CA.  Revoked\n      EE certificates issued by the TAC CA are recorded\
    \ on this CRL and\n      validated using this second CA certificate.\n      This\
    \ CA certificate will have the cRLSign bit set in the KeyUsage\n      extension,\
    \ but not the keyCertSign bit.  The private key for this\n      certificate will\
    \ be held by the AI, so that it can issue CRLs\n      unilaterally.\n      The\
    \ Subject DN (Distinguished Name) will be the same in both CA\n      certificates,\
    \ which reinforces the notion that the CRL issuer is\n      the same entity as\
    \ the TAC issuer, and that this CRL is not an\n      indirect CRL.  Because the\
    \ CRL issuer does not issue any\n      certificates itself, there is no possible\
    \ serial number conflict.\n      This will be the only CA certificate issued under\
    \ the TAC CA\n      certificate (and thus it will be signed jointly by the BI\
    \ and AI).\n      We recommend that the CRL for this CA certificate be similarly\n\
    \      long-lived, as it too needs to be signed by the BI and AI.  Each\n    \
    \  EE TAC certificate MUST contain a CRL Distribution Point that\n      points\
    \ to the CRL issued by this CA, to ensure that relying\n      parties know to\
    \ check this CRL vs. the CRL that covers only the\n      CRL CA.  (If the AI uses\
    \ the Online Certificate Status Protocol\n      (OCSP) [13] to convey the revocation\
    \ status of TACs, an equivalent\n      procedure is employed.) If it is later\
    \ determined that the\n      revocation was not warranted, a new TAC can be issued,\
    \ to preserve\n      the anonymity of the user in future transactions.\n   Step\
    \ B:\n      The AI searches its database, e.g., based on the serial number in\n\
    \      the TAC, to locate the Token that was passed between the AI and BI\n  \
    \    during the issuance process (Steps 5 and 6 above).  The AI passes\n     \
    \ this Token to the aggrieved party via an encrypted and two-way\n      authenticated\
    \ channel.  Encryption is required to prevent\n      disclosure of the Token,\
    \ and two-way authentication is required to\n      ensure that the aggrieved party\
    \ and the AI know that they are\n      communicating with each other.  Two-way\
    \ authenticated TLS is the\n      RECOMMENDED means of implementing this channel,\
    \ though other\n      approaches are allowed.\n   Steps C and D:\n      The aggrieved\
    \ party transits the Token to the BI, via an encrypted\n      and two-way authenticated\
    \ channel.  The channel MUST be encrypted\n      to prevent disclosure of the\
    \ Token, and two-way authentication is\n      required to ensure that the aggrieved\
    \ party and the BI know that\n      they are communicating with each other.  If\
    \ specified by the\n      Certificate Policy (CP) for the TAC CA, the BI will\
    \ independently\n      determine that there is sufficient evidence of abuse to\
    \ trace the\n      TAC to the user, before proceeding.  The BI verifies its signature\n\
    \      on the Token, to verify that this is a Token generated by it and\n    \
    \  presumably released to the aggrieved party by the AI.  Next, the\n      BI\
    \ searches its database using the UserKey value extracted from\n      the Token.\
    \  The BI retrieves the user's real identity and provides\n      it to the aggrieved\
    \ party.  (By requiring the aggrieved party to\n      interact with both the AI\
    \ and the BI, the BI can verify that it is\n      dealing with an aggrieved party,\
    \ not with the AI acting\n      unilaterally.)\n"
- title: 5.3.  TAC Request Message Format Profile
  contents:
  - "5.3.  TAC Request Message Format Profile\n   TAC request MAY use either PKCS10\
    \ or CMC.  An AI MUST support PKCS10\n   and MAY support CMC.\n"
- title: 5.3.1.  PKCS10 Profile
  contents:
  - "5.3.1.  PKCS10 Profile\n   This profile refines the specification in PKCS10 [3],\
    \ as it relates\n   to TAC.  A Certificate Request Message object, formatted according\
    \ to\n   PKCS10, is passed to the AI.\n   This profile applies the following additional\
    \ constraints to fields\n   that may appear in a CertificationRequestInfo:\n \
    \     Version\n         This field is mandatory and MUST have the value 0.\n \
    \     Subject\n         This field MUST be present.  If the value of this field\
    \ is\n         empty, the AI will generate a subject name that is unique in\n\
    \         the context of certificates issued by this issuer.  If the\n       \
    \  Subject field contains a Subject name already issued by the AI,\n         the\
    \ AI MUST either reject the certificate request, or\n         substitute a pseudonym\
    \ it generates, depending on the policy of\n         the TAC CA.\n      SubjectPublicKeyInfo\n\
    \         This field specifies the subject's public key and the algorithm\n  \
    \       with which the key is used.\n      Attributes\n         PKCS10 [3] defines\
    \ the attributes field as key-value pairs\n         where the key is an OID and\
    \ the value's structure depends on\n         the key.  The attribute field MUST\
    \ include the id-kisa-tac\n         attribute, which holds the Token and is defined\
    \ below.  The\n         Attributes field MAY also contain X509v3 Certificate Extensions\n\
    \         and any PKCS9 [7] extensionRequest attributes that the\n         subscriber\
    \ would like to have included in the certificate.  The\n         profile for extensions\
    \ in certificate requests is specified in\n         RFC 5280 [2].\n"
- title: 5.3.2.  CMC Profile
  contents:
  - "5.3.2.  CMC Profile\n   This profile refines the Certificate Request messages\
    \ in Certificate\n   Management over CMS in CMC [4], as they relate to TACs.\n\
    \   A Certificate Request message, formatted according to CMC [4], is\n   passed\
    \ to the AI.\n   With the exception of the public-key-related fields, the CA is\n\
    \   permitted to alter any requested field when issuing a corresponding\n   certificate.\n\
    \   This profile recommends the full PKI Request of the two types of PKI\n   requests\
    \ (Simple or Full PKI Request), and the PKI Request SHOULD be\n   encapsulated\
    \ in SignedData with an eContentType of id-cct-PKIData.\n   This profile applies\
    \ the following additional constraints to fields\n   that may appear in a Certificate\
    \ Request Template of Certificate\n   Request Message Format (CRMF) [5]:\n   \
    \   Version\n         This field MAY be absent, or MAY specify the request of\
    \ a\n         Version 3 Certificate.  It SHOULD be omitted.\n      SerialNumber\n\
    \         As per CRMF [5], this field is assigned by the CA and MUST be\n    \
    \     omitted in this profile.\n      SigningAlgorithm\n         As per CRMF [5],\
    \ this field is assigned by the CA and MUST be\n         omitted in this profile.\n\
    \      Issuer\n         This field is assigned by the CA and MUST be omitted in\
    \ this\n         profile.\n      Validity\n         This field MAY be omitted.\
    \  If omitted, the AI will issue a\n         Certificate with Validity dates as\
    \ determined by the TAC CA\n         policy.  If specified, then the CA MAY override\
    \ the requested\n         values with dates as determined by the TAC CA policy.\n\
    \      Subject\n         This field MUST be present.  If the value of this field\
    \ is\n         empty, the AI MUST generate a subject name that is unique in\n\
    \         the context of certificates issued by this issuer.  If the\n       \
    \  Subject field contains a Subject name already issued by the AI,\n         the\
    \ AI MUST either reject the certificate request, or\n         substitute a pseudonym\
    \ it generates, depending on the policy of\n         the TAC CA.\n      PublicKey\n\
    \         This field MUST be present.\n   This profile also refines constraints\
    \ that may appear in a\n   Certificate Request controls: The Token is set to attrValues\
    \ (in\n   CertRequest.controls) where the attrType MUST be id-kisa-tac.\n   See\
    \ Section 5.3.1, \"PKCS10 Profile\", for the certification request\n   formats\
    \ based on PKCS10.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The anonymity provided by the architecture and\
    \ protocols defined in\n   this document is conditional.  Moreover, if the user\
    \ employs the same\n   TAC for multiple transactions (with the same or different\
    \ parties),\n   the transactions can be linked through the use of the same TAC.\n\
    \   Thus, the anonymity guarantee is \"weak\" even though the user's real\n  \
    \ identity is still hidden.\n   To achieve stronger anonymity, a user may acquire\
    \ multiple TACs,\n   through distinct iterations of the protocol.  Since each\
    \ TAC is\n   generated independently, it should not be possible for a relying\n\
    \   party to discover a link between pseudonyms unless the tracing\n   feature\
    \ of this scheme is invoked.  If the TAC has a long validity\n   interval, this\
    \ increases the probability that the identity of a TAC\n   user will be discovered,\
    \ e.g., as a result of linking user\n   transactions across multiple servers.\
    \  Thus, we recommend that each\n   TAC CA consider carefully how long the validity\
    \ for a TAC certificate\n   should be.  In the course of issuing a TAC, the AI\
    \ and the user\n   interact directly.  Thus, the AI may have access to lower-layer\n\
    \   information (e.g., an IP address) that might reveal the user's\n   identity.\
    \  A user concerned about this sort of possible identity\n   compromise should\
    \ use appropriate measures to conceal such\n   information, e.g., a network anonymity\
    \ service such as Tor [10].\n   This document makes no provisions for certificate\
    \ renewal or rekey;\n   we recommend TAC users acquire new TACs periodically,\
    \ to further\n   reduce the likelihood of linkage.  It also may be possible to\n\
    \   determine the identity of a user via information carried by lower-\n   level\
    \ protocols, or by other, application-specific means.  For\n   example, the IP\
    \ address of the user might be used to identify him.\n   For this reason, we recommend\
    \ that a TAC be used primarily to access\n   web services with anonymity.  Note\
    \ that the TAC architecture\n   described in this document is not capable of using\
    \ certificates for\n   use with S/MIME, because there is no provision to issue\
    \ two\n   certificates (one for encryption and one for signatures) that contain\n\
    \   the same (anonymous) Subject name.  An analogous problem might arise\n   if\
    \ a user visits a site (and does not conceal his identity), the site\n   deposits\
    \ a \"cookie\" into the user's browser cache, and the user later\n   visits a\
    \ site and employs a TAC with the presumption of anonymity.\n   The use of a TAC\
    \ is a tool to help a user preserve anonymity, but it\n   is not, per se, a guarantee\
    \ of anonymity.  We recommend that each TAC\n   CA issue certificates with only\
    \ one lifetime, in order to avoid the\n   complexity that might arise otherwise.\
    \  If a TAC CA offered\n   certificates with different lifetimes, then it would\
    \ need to\n   communicate this information from the BI to AI in a way that does\
    \ not\n   unduly compromise the anonymity of the user.\n   This architecture uses\
    \ the UserKey to link a TAC to the corresponding\n   real user identity.  The\
    \ UserKey is generated in a fashion to ensure\n   that it cannot be examined to\
    \ determine a user's real identity.\n   UserKey values are maintained in two distinct\
    \ databases: the BI\n   database maps a UserKey to a real user identity, and the\
    \ AI database\n   maps a TAC to a UserKey.  The UserKey is always carried in a\
    \ signed\n   data object, a Token.  The Token is signed to allow the BI to verify\n\
    \   its authenticity, to prevent attacks based on guessing UserKey\n   values.\
    \  The Token also carries a Timeout value to allow the AI and\n   BI to reject\
    \ session-level replay attacks, and to facilitate garbage\n   collection of AI\
    \ and BI databases.\n   Threshold cryptography is employed to enable strong separation\
    \ of the\n   BI and AI functions, and to ensure that both must cooperate to issue\n\
    \   certificates under the aegis of a TAC CA.  (The AI and BI must ensure\n  \
    \ that the threshold cryptographic scheme they employ does not provide\n   an\
    \ advantage to either party based on the way the key-splitting is\n   effected.)\
    \ Blind signatures are used with threshold cryptography to\n   preserve the separation\
    \ of functions, i.e., to prevent the BI from\n   learning the hash value of the\
    \ TAC issued by the AI.\n   Message exchanges between a user and the BI or the\
    \ AI, between the AI\n   and BI, and between an aggrieved party and the AI and\
    \ BI all make use\n   of secure channels.  These channels are encrypted to prevent\n\
    \   disclosure of the Token value and of the pseudonym in the TAC request\n  \
    \ and response and in a tracing request.  The channels are two-way\n   authenticated\
    \ to allow the AI and BI to verify their respective\n   identities when communication\
    \ with one another, and one-way\n   authenticated to allow the user to verify\
    \ their identities when he\n   communicates with them.  Two-way authentication\
    \ is employed for\n   communication between an aggrieved party and the AI and\
    \ BI, to allow\n   all parties to verify the identity of one another.\n   There\
    \ is an opportunity for the AI to return the wrong UserKey to\n   an aggrieved\
    \ party, which will result in tracing a certificate to\n    the wrong real user\
    \ identity.  This appears to be unavoidable in\n   any scheme of this sort, since\
    \ the database maintained by the BI\n   is intentionally ignorant of any info\
    \ relating a UserKey to a TAC.\n   A TAC CA MUST describe in its CP how long it\
    \ will retain the data\n   about certificates it issued, beyond the lifetime of\
    \ these\n   certificates.  This will help a prospective TAC subject gauge the\n\
    \   likelihood of unauthorized use of his identity as a result of a\n   compromise\
    \ of this retained data.  It also alerts relying parties of\n   the timeframe\
    \ (after expiration of a certificate) in which an alleged\n   abuse must be brought\
    \ to the attention of the AI and BI, before the\n   data linking a certificate\
    \ to the real user identity is destroyed.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   Tim Polk (NIST), Stefan Santesson (ACC-sec.com), Jim\
    \ Schaad (Soaring\n   Hawk), David A.  Cooper (NIST), SeokLae Lee, JongHyun Baek,\
    \ SoonTae\n   Park (KISA), Taekyoung Kwon (Sejong University), JungHee Cheon (Seoul\n\
    \   National University), and YongDae Kim (Minnesota University) have\n   significantly\
    \ contributed to work on the concept of TAC and have\n   identified security issues.\
    \  Their comments enhanced the maturity of\n   the document.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n \
    \  [2]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S., Housley, R.,\n   \
    \     and W. Polk, \"Internet X.509 Public Key Infrastructure\n        Certificate\
    \ and Certificate Revocation List (CRL) Profile\", RFC\n        5280, May 2008.\n\
    \   [3]  Nystrom, M. and B. Kaliski, \"PKCS #10: Certification Request\n     \
    \   Syntax Specification Version 1.7\", RFC 2986, November 2000.\n   [4]  Schaad,\
    \ J. and M. Myers, \"Certificate Management over CMS\n        (CMC)\", RFC 5272,\
    \ June 2008.\n   [5]  Schaad, J., \"Internet X.509 Public Key Infrastructure\n\
    \        Certificate Request Message Format (CRMF)\", RFC 4211, September\n  \
    \      2005.\n   [6]  Housley, R., \"Cryptographic Message Syntax (CMS)\", RFC\
    \ 3852,\n        July 2004.\n   [7]  Nystrom, M. and B. Kaliski, \"PKCS #9: Selected\
    \ Object Classes\n        and Attribute Types Version 2.0\", RFC 2985, November\
    \ 2000.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [8]  S. Brands, \"Rethinking public key infrastructures\
    \ and digital\n        certificates - Building in Privacy\", PhD thesis, Eindhoven\n\
    \        Institute of Technology, Eindhoven, The Netherlands, 1999.\n   [9]  D.\
    \ Chaum, \"Blind signature system\", CRYPTO '83, Plenum Press,\n        page 153,\
    \ 1984.\n   [10] \"Tor: anonymity online\", http://www.torproject.org.\n   [11]\
    \ X.509, \"Information technology - Open Systems Interconnection -\n        The\
    \ Directory: Public-key and attribute certificate frameworks\",\n        ITU-T\
    \ Recommendation X.509, March 2000.  Also available as\n        ISO/IEC 9594-8,\
    \ 2001.\n   [12] S. Rafaeli, M. Rennhard, L. Mathy, B. Plattner, and D.\n    \
    \    Hutchison, \"An Architecture for Pseudonymous e-Commerce\",\n        AISB'01\
    \ Symposium on Information Agents for Electronic Commerce,\n        pp. 33-41,\
    \ 2001.\n   [13] Myers, M., Ankney, R., Malpani, A., Galperin, S., and C. Adams,\n\
    \        \"X.509 Internet Public Key Infrastructure Online Certificate\n     \
    \   Status Protocol - OCSP\", RFC 2560, June 1999.\n   [14] Philip MacKenzie and\
    \ Michael K. Reiter, \"Two-Party Generation of\n        DSA Signature\", Crypto\
    \ 2001.\n   [15] Shaohua Tang, \"Simple Threshold RSA Signature Scheme Based on\n\
    \        Simple Secret Sharing\", in \"Computational Intelligence and\n      \
    \  Security\", CIS 2005, Part II, Springer, pp. 186-191, 2005.\n   [16] Taekyoung\
    \ Kwon, Jung Hee Cheon, Yongdae Kim, Jae-Il Lee,\n        \"Privacy Protection\
    \ in PKIs: A Separation-of-Authority\n        Approach\", in \"Information Security\
    \ Applications\", WISA 2006,\n        Springer, pp. 297-311, 2007.\n   [17] Dierks,\
    \ T. and E. Rescorla, \"The Transport Layer Security (TLS)\n        Protocol Version\
    \ 1.2\", RFC 5246, August 2008.\n   [18] Ramsdell, B., Ed., \"Secure/Multipurpose\
    \ Internet Mail Extensions\n        (S/MIME) Version 3.1 Certificate Handling\"\
    , RFC 3850, July 2004.\n"
- title: Appendix A.  Traceable Anonymous Certificate ASN.1 Modules
  contents:
  - 'Appendix A.  Traceable Anonymous Certificate ASN.1 Modules

    '
- title: DEFINITIONS IMPLICIT TAGS ::=
  contents:
  - 'DEFINITIONS IMPLICIT TAGS ::=

    '
- title: --
  contents:
  - '--

    '
- title: --   Copyright (c) 2009 IETF Trust and the persons identified as
  contents:
  - '--   Copyright (c) 2009 IETF Trust and the persons identified as

    '
- title: --   authors of the code.  All rights reserved.
  contents:
  - '--   authors of the code.  All rights reserved.

    '
- title: --
  contents:
  - '--

    '
- title: --   Redistribution and use in source and binary forms, with or
  contents:
  - '--   Redistribution and use in source and binary forms, with or

    '
- title: --   without modification, are permitted provided that the following
  contents:
  - '--   without modification, are permitted provided that the following

    '
- title: '--   conditions are met:'
  contents:
  - '--   conditions are met:

    '
- title: --
  contents:
  - '--

    '
- title: --   - Redistributions of source code must retain the above
  contents:
  - '--   - Redistributions of source code must retain the above

    '
- title: --     copyright notice, this list of conditions and the following
  contents:
  - '--     copyright notice, this list of conditions and the following

    '
- title: --     disclaimer.
  contents:
  - '--     disclaimer.

    '
- title: --
  contents:
  - '--

    '
- title: --   - Redistributions in binary form must reproduce the above
  contents:
  - '--   - Redistributions in binary form must reproduce the above

    '
- title: --     copyright notice, this list of conditions and the following
  contents:
  - '--     copyright notice, this list of conditions and the following

    '
- title: --     disclaimer in the documentation and/or other materials provided
  contents:
  - '--     disclaimer in the documentation and/or other materials provided

    '
- title: --     with the distribution.
  contents:
  - '--     with the distribution.

    '
- title: --
  contents:
  - '--

    '
- title: --   - Neither the name of Internet Society, IETF or IETF Trust, nor
  contents:
  - '--   - Neither the name of Internet Society, IETF or IETF Trust, nor

    '
- title: --     the names of specific contributors, may be used to endorse or
  contents:
  - '--     the names of specific contributors, may be used to endorse or

    '
- title: --     promote products derived from this software without specific
  contents:
  - '--     promote products derived from this software without specific

    '
- title: --     prior written permission.
  contents:
  - '--     prior written permission.

    '
- title: --
  contents:
  - '--

    '
- title: --
  contents:
  - '--

    '
- title: --
  contents:
  - '--

    '
- title: --   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
  contents:
  - '--   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND

    '
- title: --   CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES,
  contents:
  - '--   CONTRIBUTORS ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,

    '
- title: --   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  contents:
  - '--   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF

    '
- title: --   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  contents:
  - '--   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE

    '
- title: --   DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
  contents:
  - '--   DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS

    '
- title: --   BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  contents:
  - '--   BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,

    '
- title: --   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
  contents:
  - '--   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED

    '
- title: --   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  contents:
  - '--   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,

    '
- title: --   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  contents:
  - '--   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON

    '
- title: --   ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  contents:
  - '--   ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,

    '
- title: --   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  contents:
  - '--   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

    '
- title: --   OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  contents:
  - '--   OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE

    '
- title: --   POSSIBILITY OF SUCH DAMAGE.
  contents:
  - '--   POSSIBILITY OF SUCH DAMAGE.

    '
- title: --
  contents:
  - '--

    '
- title: --   This version of the ASN.1 module is part of RFC 5636;
  contents:
  - '--   This version of the ASN.1 module is part of RFC 5636;

    '
- title: --   see the RFC itself for full legal notices.
  contents:
  - '--   see the RFC itself for full legal notices.

    '
- title: --
  contents:
  - '--

    '
- title: BEGIN
  contents:
  - "BEGIN\n   -- EXPORTS All\n   -- The types and values defined in this module are\
    \ exported for\n   -- use in the other ASN.1 modules.  Other applications may\
    \ use\n   -- them for their own purposes.\n   IMPORTS\n   -- Imports from RFC\
    \ 3280 [PROFILE], Appendix A.1\n              AlgorithmIdentifier, Certificate,\
    \ CertificateList,\n              CertificateSerialNumber, Name FROM PKIX1Explicit88\n\
    \                   { iso(1) identified-organization(3) dod(6)\n             \
    \        internet(1) security(5) mechanisms(5) pkix(7)\n                     \
    \ mod(0) pkix1-explicit(18) }\n   -- Imports from CMS\n            ContentInfo,\
    \ SignedData FROM\n            CryptographicMessageSyntax2004{ iso(1)\n      \
    \      member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n            smime(16)\
    \ modules(0) cms-2004(24)}\n"
- title: UserKey ::= OCTET STRING
  contents:
  - 'UserKey ::= OCTET STRING

    '
- title: Timeout ::= GeneralizedTime
  contents:
  - 'Timeout ::= GeneralizedTime

    '
- title: BlinedCertificateHash ::= OCTET STRING
  contents:
  - 'BlinedCertificateHash ::= OCTET STRING

    '
- title: PartiallySignedCertificateHash ::= OCTET STRING
  contents:
  - 'PartiallySignedCertificateHash ::= OCTET STRING

    '
- title: EncapsulatedContentInfo ::= SEQUENCE {
  contents:
  - "EncapsulatedContentInfo ::= SEQUENCE {\n       eContentType ContentType, -- OBJECT\
    \ IDENTIFIER : id-data\n       eContent [0] EXPLICIT OCTET STRING OPTIONAL }\n"
- title: id-data OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
  contents:
  - 'id-data OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)

    '
- title: rsadsi(113549) pkcs(1) pkcs7(7) 1 }
  contents:
  - 'rsadsi(113549) pkcs(1) pkcs7(7) 1 }

    '
- title: Token ::= ContentInfo
  contents:
  - 'Token ::= ContentInfo

    '
- title: TokenandBlindHash ::= ContentInfo
  contents:
  - 'TokenandBlindHash ::= ContentInfo

    '
- title: TokenandPartiallySignedCertificateHash ::= ContentInfo
  contents:
  - 'TokenandPartiallySignedCertificateHash ::= ContentInfo

    '
- title: id-KISA OBJECT IDENTIFIER ::= {iso(1) member-body(2) korea(410)
  contents:
  - 'id-KISA OBJECT IDENTIFIER ::= {iso(1) member-body(2) korea(410)

    '
- title: kisa(200004)}
  contents:
  - 'kisa(200004)}

    '
- title: id-npki OBJECT IDENTIFIER ::= {id-KISA 10}
  contents:
  - 'id-npki OBJECT IDENTIFIER ::= {id-KISA 10}

    '
- title: id-attribute OBJECT IDENTIFIER ::= {id-npki 1}
  contents:
  - 'id-attribute OBJECT IDENTIFIER ::= {id-npki 1}

    '
- title: id-kisa-tac OBJECT IDENTIFIER ::= {id-attribute 1}
  contents:
  - 'id-kisa-tac OBJECT IDENTIFIER ::= {id-attribute 1}

    '
- title: id-kisa-tac-token OBJECT IDENTIFIER ::= { id-kisa-tac 1}
  contents:
  - 'id-kisa-tac-token OBJECT IDENTIFIER ::= { id-kisa-tac 1}

    '
- title: id-kisa-tac-tokenandblindbash OBJECT IDENTIFIER ::= { id-kisa-tac 2}
  contents:
  - 'id-kisa-tac-tokenandblindbash OBJECT IDENTIFIER ::= { id-kisa-tac 2}

    '
- title: id-kisa-tac-tokenandpartially OBJECT IDENTIFIER ::= { id-kisa-tac 3}
  contents:
  - 'id-kisa-tac-tokenandpartially OBJECT IDENTIFIER ::= { id-kisa-tac 3}

    '
- title: END
  contents:
  - 'END

    '
- title: Appendix B.  TAC Message Exchanges over Transport Layer Security
  contents:
  - "Appendix B.  TAC Message Exchanges over Transport Layer Security\n   TAC message\
    \ exchanges between a user and the BI or the AI, between\n   the AI and BI, and\
    \ between an aggrieved party and the AI and BI all\n   make use of secure channels\
    \ to prevent disclosure of the Token value\n   and of the pseudonym in the TAC\
    \ request and response and in a tracing\n   request.  The Transport Layer Security\
    \ Protocol v1.2 (TLS) [17] is a\n   suitable security protocol to protect these\
    \ message exchanges, and\n   this document recommends use of TLS to protect these\
    \ exchanges.  The\n   following text describes how the handshake part of TLS should\
    \ be\n   employed to protect each type of exchange.  Note that no specific\n \
    \  cipher suites are specified for use here; the choice of suites is up\n   to\
    \ the client and servers, as is commonly the case.\n"
- title: B.1.  Message Exchanges between a User and the BI or the AI
  contents:
  - "B.1.  Message Exchanges between a User and the BI or the AI\n   The channels\
    \ between a User and the BI or the AI are one-way\n   authenticated to allow the\
    \ user to verify their identities when he\n   communicates with them.\n      \
    \         User                        BI or AI\n            ClientHello     -------->\n\
    \                                           ServerHello\n                    \
    \                       Certificate\n                            <--------   \
    \   ServerHelloDone\n      ClientKeyExchange\n      [ChangeCipherSpec]\n     \
    \           Finished    -------->\n                                          \
    \ [ChangeCipherSpec]\n                            <---------        Finished\n\
    \             TAC Message    <--------->     TAC Message\n   Figure 3.  TAC Message\
    \ exchanges between a User and the BI or the AI\n"
- title: B.2.  Message Exchanges between the BI and the AI
  contents:
  - "B.2.  Message Exchanges between the BI and the AI\n   The channels between the\
    \ BI and the AI are two-way authenticated to\n   allow the AI and BI to verify\
    \ their respective identities when\n   communication with one another.\n     \
    \           BI                            AI\n            ClientHello     -------->\n\
    \                                           ServerHello\n             Certificate\n\
    \      CertificateRequest\n                            <--------      ServerHelloDone\n\
    \      Certificate\n      ClientKeyExchange\n      CertificateVerify\n      [ChangeCipherSpec]\n\
    \                Finished        -------->\n                                 \
    \            [ChangeCipherSpec]\n                               <---------   \
    \     Finished\n             TAC Message       <--------->     TAC Message\n \
    \           Figure 4.  TAC Message exchanges between BI and AI\n"
- title: B.3.  Message Exchanges between the Aggrieved Party and the AI or the BI
  contents:
  - "B.3.  Message Exchanges between the Aggrieved Party and the AI or the BI\n  \
    \ The channels between a User and the BI or the AI are two-way\n   authenticated,\
    \ to allow both parties to verify the identity of one\n   another.\n         \
    \  User                        BI or AI\n         ClientHello     -------->\n\
    \                                        ServerHello\n          Certificate\n\
    \   CertificateRequest\n                         <--------      ServerHelloDone\n\
    \   Certificate\n   ClientKeyExchange\n   CertificateVerify\n   [ChangeCipherSpec]\n\
    \             Finished        -------->\n                                    \
    \      [ChangeCipherSpec]\n                            <---------        Finished\n\
    \          TAC Message       <--------->     TAC Message\n     Figure 5.  TAC\
    \ Message Exchanges between an Aggrieved Party and\n                         \
    \    the BI or the AI\n"
- title: Appendix C.  Cryptographic Message Syntax Profile for TAC Token
  contents:
  - "Appendix C.  Cryptographic Message Syntax Profile for TAC Token\n   Using the\
    \ Cryptographic Message Syntax(CMS)[6], TAC Token is a type\n   of signed-data\
    \ object.  The general format of a CMS object is:\n   ContentInfo ::= SEQUENCE\
    \ {\n              contentType ContentType,\n              content [0] EXPLICIT\
    \ ANY DEFINED BY contentType }\n            ContentType ::= OBJECT IDENTIFIER\n\
    \   As a TAC is a signed-data object, it uses the corresponding OID,\n   1.2.840.113549.1.1.2.\n"
- title: C.1.  Signed-Data Content Type
  contents:
  - "C.1.  Signed-Data Content Type\n   According to the CMS specification, the signed-data\
    \ content type\n   shall have ASN.1 type SignedData:\n      SignedData ::= SEQUENCE\
    \ {\n              version CMSVersion,\n              digestAlgorithms DigestAlgorithmIdentifiers,\n\
    \              encapContentInfo EncapsulatedContentInfo,\n              certificates\
    \ [0] IMPLICIT CertificateSet OPTIONAL,\n              crls [1] IMPLICIT RevocationInfoChoices\
    \ OPTIONAL,\n              signerInfos SignerInfos }\n      DigestAlgorithmIdentifiers\
    \ ::= SET OF DigestAlgorithmIdentifier\n      SignerInfos ::= SET OF SignerInfo\n\
    \   The elements of the signed-data content type are as follows:\n      Version\n\
    \         The version is the syntax version number.  It MUST be 3,\n         corresponding\
    \ to the signerInfo structure having version number\n         3.\n      digestAlgorithms\n\
    \         This field specifies digest Algorithms.\n      encapContentInfo\n  \
    \       This element is defined in Appendix C.1.1.\n      certificates\n     \
    \    The certificates element MUST be included and MUST contain only\n       \
    \  the single PKI EE certificate needed to validate this CMS\n         Object.\
    \  The CertificateSet type is defined in section 10 of\n         RFC3852 [6].\n\
    \      crls\n         The crls element MUST be omitted.\n      signerInfos\n \
    \        This element is defined in Appendix C.1.2.\n"
- title: C.1.1.  encapContentInfo
  contents:
  - "C.1.1.  encapContentInfo\n   encapContentInfo is the signed content, consisting\
    \ of a content type\n   identifier and the content itself.\n         EncapsulatedContentInfo\
    \ ::= SEQUENCE{\n             eContentType ContentType,\n              eContent\
    \ [0] EXPLICIT OCTET STRING OPTIONAL }\n         ContentType ::= OBJECT IDENTIFIER\n\
    \   The elements of this signed content type are as follows:\n      eContentType\n\
    \         The ContentType for an TAC Token is id-data and has the\n         numerical\
    \ value of 1.2.840.113549.1.7.1.\n      eContent\n         The content of a TAC\
    \ Token is the DER-encoded SEQUENCE of\n         UserKey and Timeout.\n"
- title: C.1.2.  signerInfos
  contents:
  - "C.1.2.  signerInfos\n   SignerInfo is defined under CMS as:\n      SignerInfo\
    \ ::= SEQUENCE {\n           version CMSVersion,\n           sid SignerIdentifier,\n\
    \           digestAlgorithm DigestAlgorithmIdentifier,\n           signedAttrs\
    \ [0] IMPLICIT SignedAttributes OPTIONAL,\n           signatureAlgorithm SignatureAlgorithmIdentifier,\n\
    \           signature SignatureValue,\n           unsignedAttrs [1] IMPLICIT UnsignedAttributes\
    \ OPTIONAL }\n   The contents of the SignerInfo element are as follows:\n    \
    \  Version\n         The version number MUST be 3, corresponding with the choice\
    \ of\n         SubjectKeyIdentifier for the sid.\n      sid\n         The sid\
    \ is defined as:\n            SignerIdentifier ::= CHOICE {\n            issuerAndSerialNumber\
    \ IssuerAndSerialNumber,\n            subjectKeyIdentifier [0] SubjectKeyIdentifier\
    \ }\n         For a TAC Token, the sid MUST be a SubjectKeyIdentifier.\n     \
    \ digestAlgorithm\n         This field specifies digest Algorithms.\n      signedAttrs\n\
    \         The signedAttr element MUST be omitted.\n      SignatureAlgorithm\n\
    \         This field specifies the signature Algorithm.\n      Signature\n   \
    \      The signature value is defined as:\n            SignatureValue ::= OCTET\
    \ STRING\n         The signature characteristics are defined by the digest and\n\
    \         signature algorithms.\n      UnsignedAttrs\n         unsignedAttrs MUST\
    \ be omitted.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   SangHwan Park\n   Korea Internet & Security Agency\n \
    \  78, Garak-Dong, Songpa-Gu, Seoul, Korea\n   EMail: shpark@kisa.or.kr\n   Haeryong\
    \ Park\n   Korea Internet & Security Agency\n   78, Garak-Dong, Songpa-Gu, Seoul,\
    \ Korea\n   EMail: hrpark@kisa.or.kr\n   YooJae Won\n   Korea Internet & Security\
    \ Agency\n   78, Garak-Dong, Songpa-Gu, Seoul, Korea\n   EMail: yjwon@kisa.or.kr\n\
    \   JaeIl Lee\n   Korea Internet & Security Agency\n   78, Garak-Dong, Songpa-Gu,\
    \ Seoul, Korea\n   EMail: jilee@kisa.or.kr\n   Stephen Kent\n   BBN Technologies\n\
    \   10 Moulton Street Cambridge, MA 02138\n   EMail: kent@bbn.com\n"
