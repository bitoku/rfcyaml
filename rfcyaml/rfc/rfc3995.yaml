- contents:
  - "                   Internet Printing Protocol (IPP):\n                 Event
    Notifications and Subscriptions\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes an OPTIONAL extension to the Internet\n
    \  Printing Protocol/1.1: Model and Semantics (RFC 2911, RFC 2910).\n   This extension
    allows a client to subscribe to printing related\n   Events.  Subscriptions are
    modeled as Subscription Objects.  The\n   Subscription Object specifies that when
    one of the specified Events\n   occurs, the Printer delivers an asynchronous Event
    Notification to\n   the specified Notification Recipient via the specified Push
    or Pull\n   Delivery Method (i.e., protocol).\n   A client associates Subscription
    Objects with a particular Job by\n   performing the Create-Job-Subscriptions operation
    or by submitting a\n   Job with subscription information.  A client associates
    Subscription\n   Objects with the Printer by performing a Create-Printer-Subscriptions\n
    \  operation.  Four other operations are defined for Subscription\n   Objects:
    Get-Subscriptions-Attributes, Get-Subscriptions, Renew-\n   Subscription, and
    Cancel-Subscription.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  5\n       1.1.  Notification Overview. . . . . . . . . . . . . .
    . . . .  5\n   2.  Models for Notification. . . . . . . . . . . . . . . . . .
    . .  8\n       2.1.  Model for Simple Notification (Normative). . . . . . . .
    \ 8\n       2.2.  Additional Models for Notification (Informative) . . . .  9\n
    \  3.  Terminology. . . . . . . . . . . . . . . . . . . . . . . . . .  9\n       3.1.
    \ Conformance Terminology. . . . . . . . . . . . . . . . .  9\n       3.2.  Other
    Terminology. . . . . . . . . . . . . . . . . . . . 10\n   4.  Object Relationships
    . . . . . . . . . . . . . . . . . . . . . 12\n       4.1.  Printer and Per-Printer
    Subscription Objects . . . . . . 13\n       4.2.  Printer, Job and Per-Job Subscription
    Objects. . . . . . 13\n   5.  Subscription Object. . . . . . . . . . . . . . .
    . . . . . . . 13\n       5.1.  Rules for Support of Subscription Template Attributes.
    . 14\n       5.2.  Rules for Processing Subscription Template Attributes. . 15\n
    \      5.3.  Subscription Template Attributes . . . . . . . . . . . . 18\n             5.3.1.
    \ notify-recipient-uri (uri) . . . . . . . . . . . 20\n             5.3.2.  notify-pull-method
    (type2 keyword) . . . . . . . 21\n             5.3.3.  notify-events (1setOf type2
    keyword) . . . . . . 22\n             5.3.4.  notify-attributes (1setOf type2
    keyword) . . . . 29\n             5.3.5.  notify-user-data (octetString(63)) .
    . . . . . . 30\n             5.3.6.  notify-charset (charset) . . . . . . . .
    . . . . 31\n             5.3.7.  notify-natural-language (naturalLanguage). .
    . . 31\n             5.3.8.  notify-lease-duration (integer(0:67108863)). . .
    32\n             5.3.9.  notify-time-interval (integer(0:MAX)). . . . . . 33\n
    \      5.4.  Subscription Description Attributes. . . . . . . . . . . 34\n             5.4.1.
    \ notify-subscription-id  (integer (1:MAX)). . . . 35\n             5.4.2.  notify-sequence-number
    (integer (0:MAX)) . . . . 35\n             5.4.3.  notify-lease-expiration-time
    (integer(0:MAX)). . 36\n             5.4.4.  notify-printer-up-time (integer(1:MAX)).
    . . . . 37\n             5.4.5.  notify-printer-uri (uri) . . . . . . . . . .
    . . 37\n             5.4.6.  notify-job-id (integer(1:MAX)) . . . . . . . . .
    37\n             5.4.7.  notify-subscriber-user-name (name(MAX)). . . . . 38\n
    \  6.  Printer Description Attributes Related to Notification . . . . 38\n       6.1.
    \ printer-state-change-time (integer(1:MAX)) . . . . . . . 39\n       6.2.  printer-state-change-date-time
    (dateTime). . . . . . . . 39\n   7.  New Values for Existing Printer Description
    Attributes . . . . 39\n       7.1.  operations-supported (1setOf type2 enum) .
    . . . . . . . 40\n   8.  Attributes Only in Event Notifications . . . . . . .
    . . . . . 40\n       8.1.  notify-subscribed-event (type2 keyword). . . . . .
    . . . 40\n       8.2.  notify-text (text(MAX)). . . . . . . . . . . . . . . .
    . 41\n   9.  Event Notification Content . . . . . . . . . . . . . . . . . . 41\n
    \      9.1.  Content of Machine Consumable Event Notifications. . . . 44\n             9.1.1.
    \ Event Notification Content Common to All Events. 44\n             9.1.2.  Additional
    Event Notification Content for Job\n                     Events . . . . . . .
    . . . . . . . . . . . . . . 45\n             9.1.3.  Additional Event Notification
    Content for\n                     Printer Events . . . . . . . . . . . . . . .
    . . 46\n       9.2.  Content of Human Consumable Event Notification . . . . .
    46\n             9.2.1.  Event Notification Content Common to All Events. 47\n
    \            9.2.2.  Additional Event Notification Content for Job\n                     Events
    . . . . . . . . . . . . . . . . . . . . . 49\n             9.2.3.  Additional
    Event Notification Content for\n                     Printer Events . . . . .
    . . . . . . . . . . . . 49\n   10. Delivery Methods . . . . . . . . . . . . .
    . . . . . . . . . . 50\n   11. Operations for Notification. . . . . . . . . .
    . . . . . . . . 52\n       11.1. Subscription Creation Operations . . . . . .
    . . . . . . 52\n             11.1.1. Create-Job-Subscriptions Operation . . .
    . . . . 52\n             11.1.2. Create-Printer-Subscriptions operation . . .
    . . 55\n             11.1.3. Job Creation Operations - Extensions for\n                     Notification
    . . . . . . . . . . . . . . . . . . 56\n       11.2 Other Operations. . . . .
    . . . . . . . . . . . . . . . . 58\n             11.2.1. Restart-Job Operation
    - Extensions for\n                     Notification . . . . . . . . . . . . .
    . . . . . 58\n             11.2.2. Validate-Job Operation - Extensions for\n                     Notification
    . . . . . . . . . . . . . . . . . . 59\n             11.2.3. Get-Printer-Attributes
    - Extensions for\n                     Notification . . . . . . . . . . . . .
    . . . . . 59\n             11.2.4. Get-Subscription-Attributes operation. . .
    . . . 60\n             11.2.5. Get-Subscriptions operation. . . . . . . . . .
    . 63\n             11.2.6. Renew-Subscription operation . . . . . . . . . . 66\n
    \            11.2.7. Cancel-Subscription operation. . . . . . . . . . 68\n   12.
    Status Codes . . . . . . . . . . . . . . . . . . . . . . . . . 70\n       12.1.
    successful-ok-ignored-subscriptions (0x0003) . . . . . . 70\n       12.2. client-error-ignored-all-subscriptions
    (0x0414). . . . . 71\n   13. Status Codes in Subscription Attributes Groups .
    . . . . . . . 71\n       13.1. client-error-uri-scheme-not-supported (0x040C)
    . . . . . 71\n       13.2. client-error-attributes-or-values-not-supported (0x040B)
    71\n       13.3. client-error-too-many-subscriptions (0x0415) . . . . . . 72\n
    \      13.4. successful-ok-too-many-events (0x0005) . . . . . . . . . 72\n       13.5.
    successful-ok-ignored-or-substituted-attributes (0x0001) 72\n   14. Encodings
    of Additional Attribute Tags . . . . . . . . . . . . 72\n   15. Conformance Requirements
    . . . . . . . . . . . . . . . . . . . 72\n       15.1. Conformance requirements
    for clients . . . . . . . . . . 73\n       15.2. Conformance requirements for
    Printers. . . . . . . . . . 73\n   16. Model for Notification with Cascading Printers
    (Informative) . 74\n   17. Distributed Model for Notification (Informative) .
    . . . . . . 75\n   18. Extended Notification Recipient (Informative). . . . .
    . . . . 76\n   19. Object Model for Notification (Normative). . . . . . . . .
    . . 77\n       19.1. Object relationships . . . . . . . . . . . . . . . . . .
    78\n       19.2. Printer Object and Per-Printer Subscription Objects. . . 79\n
    \      19.3. Job Object and Per-Job Subscription Objects. . . . . . . 79\n   20.
    Per-Job versus Per-Printer Subscription Objects (Normative). . 79\n   21. Normative
    References . . . . . . . . . . . . . . . . . . . . . 80\n   22. Informative References
    . . . . . . . . . . . . . . . . . . . . 80\n   23. IANA Considerations. . . .
    . . . . . . . . . . . . . . . . . . 81\n       23.1. Attribute Registrations.
    . . . . . . . . . . . . . . . . 82\n       23.2. Additional Enum Attribute Value
    Registrations within\n             the IPP registry . . . . . . . . . . . . .
    . . . . . . . 83\n       23.3. Operation Registrations. . . . . . . . . . . .
    . . . . . 83\n       23.4. Status code Registrations. . . . . . . . . . . . .
    . . . 83\n       23.5. Attribute Group tag Registrations. . . . . . . . . . .
    . 84\n       23.6. Registration of Events . . . . . . . . . . . . . . . . . 84\n
    \      23.7. Registration of Event Notification Delivery Methods. . . 85\n             23.7.1.
    Requirements for Registration of Event\n                     Notification Delivery
    Methods. . . . . . . . . . 85\n             23.7.2. Registration Procedure . .
    . . . . . . . . . . . 86\n             23.7.3. Delivery Method Document Registrations
    . . . . . 87\n             23.7.4. Registration Template. . . . . . . . . . .
    . . . 88\n   24. Internationalization Considerations. . . . . . . . . . . . .
    . 89\n   25. Security Considerations. . . . . . . . . . . . . . . . . . . . 89\n
    \      25.1. Client access rights . . . . . . . . . . . . . . . . . . 89\n       25.2.
    Printer security threats . . . . . . . . . . . . . . . . 91\n       25.3. Notification
    Recipient security threats. . . . . . . . . 91\n   26. Description of the base
    IPP documents (Informative). . . . . . 92\n   27. Contributors . . . . . . . .
    . . . . . . . . . . . . . . . . . 93\n   Authors' Addresses . . . . . . . . .
    . . . . . . . . . . . . . . . 94\n   Full Copyright Statement . . . . . . . .
    . . . . . . . . . . . . . 95\n"
  title: Table of Contents
- contents:
  - "Tables\n   Table 1  - Subscription Template Attributes. . . . . . . . . . . .
    20\n   Table 2  - Subscription Description Attributes . . . . . . . . . . 35\n
    \  Table 3  - Printer Description Attributes Associated with\n              Notification.
    . . . . . . . . . . . . . . . . . . . . . 39\n   Table 4  - Operation-id assignments.
    . . . . . . . . . . . . . . . 40\n   Table 5  - Attributes in Event Notification
    Content. . . . . . . . 45\n   Table 6  - Additional Event Notification Content
    for Job Events. . 46\n   Table 7  - Combinations of Events and Subscribed Events
    for\n              \"job-impressions-completed\" . . . . . . . . . . . . . . 46\n
    \  Table 8  - Additional Event Notification Content for Printer\n              Events.
    . . . . . . . . . . . . . . . . . . . . . . . . 46\n   Table 9  - Printer Name
    in Event Notification Content. . . . . . . 48\n   Table 10 - Event Name in Event
    Notification Content. . . . . . . . 48\n   Table 11 - Event Time in Event Notification
    Content. . . . . . . . 48\n   Table 12 - Job Name in Event Notification Content.
    . . . . . . . . 49\n   Table 13 - Job State in Event Notification Content . .
    . . . . . . 49\n   Table 14 - Printer State in Event Notification Content . .
    . . . . 50\n   Table 15 - Information about the Delivery Method . . . . . . .
    . . 51\n   Table 16 - Printer Conformance Requirements for Operations . . . .
    74\n"
  title: Tables
- contents:
  - "Figures\n   Figure 1 - Model for Notification. . . . . . . . . . . . . . . .
    .  9\n   Figure 2 - Model for Notification with Cascading Printers. . . . . 75\n
    \  Figure 3 - Opaque Use of a Notification Server Transparent to the\n              Client.
    . . . . . . . . . . . . . . . . . . . . . . . . 76\n   Figure 4 - Use of an Extended
    Notification Recipient transparent\n              to the Printer. . . . . . .
    . . . . . . . . . . . . . . 77\n   Figure 5 - Object Model for Notification .
    . . . . . . . . . . . . 78\n"
  title: Figures
- contents:
  - "1.  Introduction\n   This IPP notification specification is an OPTIONAL extension
    to\n   Internet Printing Protocol/1.1: Model and Semantics [RFC2911,\n   RFC2910].
    \ See Appendix 29 for a description of the base IPP\n   documents.  This document
    in combination with the following documents\n   is intended to meet the most important
    notification requirements\n   described in [RFC3997]:\n      Internet Printing
    Protocol (IPP):  \"Job Progress Attributes\"\n      [RFC3381]\n      Internet
    Printing Protocol (IPP):  \"The 'ippget' Delivery Method\n      for Event Notifications\"
    [RFC3996]\n   This specification REQUIRES that clients and Printers support the\n
    \  'ippget' Pull Delivery Method [RFC3996].  Conforming client and\n   Printer
    implementations MAY support additional Push or Pull Delivery\n   Methods as well.
    \ Note: this document does not define any Delivery\n   Methods itself, but it
    does define the rules for conformance for\n   Delivery Method Documents and their
    registration with IANA (see\n   section 23.7.3).\n   Refer to the Table of Contents
    for the layout of this document.\n"
  - contents:
    - "1.1.  Notification Overview\n   This document defines operations that a client
      can perform in order\n   to create Subscription Objects in a Printer and carry
      out other\n   operations on them.  A Subscription Object represents a Subscription\n
      \  abstraction.  The Subscription Object specifies that when one of the\n   specified
      Events occurs, the Printer delivers an asynchronous Event\n   Notification to
      the specified Notification Recipient via the\n   specified Delivery Method (i.e.,
      protocol).\n   When a client (called a Subscribing Client) performs an operation\n
      \  that creates a Subscription Object, the operation contains one or\n   more
      Subscription Template Attributes Groups.  Each such group holds\n   information
      used by the Printer to initialize a newly created\n   Subscription Object.  The
      Printer creates one Subscription Object for\n   each Subscription Template Attributes
      Group in the operation.  This\n   group is like the Job Template Attributes
      group defined in [RFC2911].\n   The following is an example of the information
      included in a\n   Subscription Template Attributes Group (see section 5 for
      details on\n   the Subscription Object attributes):\n   1. The names of Subscribed
      Events that are of interest to the\n      Notification Recipient.\n   2. The
      address (URL) of one Notification Recipient for a Push\n      Delivery Method
      or the method for a Pull Delivery Method.\n   3. The Delivery Method (i.e.,
      the protocol) which the Printer uses to\n      deliver the Event Notification.\n
      \  4. Some opaque data that the Printer delivers to the Notification\n      Recipient
      in the Event Notification.  For example, the\n      Notification Recipient might
      use this opaque data as a forwarding\n      address for the Event Notification.\n
      \  5. The charset to use in text fields within an Event Notification\n   6.
      The natural language to use in the text fields of the Event\n      Notification\n
      \  7. The requested lease time in seconds for the Subscription Object\n   An
      operation that creates a Subscription Object is called a\n   Subscription Creation
      Operation.  These operations include the\n   following operations (see section
      11.1 for further details):\n      -  Job Creation operation: When a client performs
      such an\n         operation (Print-Job, Print-URI, and Create-Job), a client
      can\n         include zero or more Subscription Template Attributes Groups in\n
      \        the request.  The Printer creates one Subscription Object for\n         each
      Subscription Template Attributes Group in the request, and\n         the Printer
      associates each such Subscription Object with the\n         newly created Job.
      \ This document extends these operations'\n         definitions in [RFC2911]
      by adding Subscription Template\n         Attributes Groups in the request and
      Subscription Attributes\n         Groups in the response.\n      -  Create-Job-Subscriptions
      operation: A client can include one or\n         more Subscription Template
      Attributes Groups in the request.\n         The Printer creates one Subscription
      Object for each\n         Subscription Template Attributes Group and associates
      each with\n         the job that is the target of this operation.\n      -  Create-Printer-Subscriptions
      operation: A client can include\n         one or more Subscription Template
      Attributes Groups in the\n         request.  The Printer creates one Subscription
      Object for each\n         Subscription Template Attributes Group and associates
      each with\n         the Printer that is the target of this operation.\n   For
      each of the above operations:\n      -  the Printer associates a Subscription
      Object with the Printer\n         or a specific Job.  When a Subscription Object
      is associated\n         with a Job Object, it is called a Per-Job Subscription
      Object.\n         When a Subscription Object is associated with a Printer Object,\n
      \        it is called a Per-Printer Subscription Object.\n      -  the response
      contains one Subscription Attributes Group for\n         each Subscription Template
      Attributes Group in the request and\n         in the same order.  When the Printer
      successfully creates a\n         Subscription Object, its corresponding Subscription
      Attributes\n         Group contains the \"notify-subscription-id\" attribute.
      \ This\n         attribute uniquely identifies the Subscription Object and is\n
      \        analogous to a \"job-id\" for a Job object.  Some operations\n         described
      below use the \"notify-subscription-id\" to identify\n         the target Subscription
      Object.\n   This document defines the following additional operations (see\n
      \  section 11.2 for further details):\n   -  Restart-Job operation: When a client
      performs the Restart-Job\n      operation [RFC2911], the Printer re-uses the
      same Job and its\n      Subscription Objects.\n   -  Validate-Job operation:
      When a client performs this operation, a\n      client can include zero or more
      Subscription Template Attributes\n      Groups in the request.  The Printer
      determines if it could create\n      one Subscription Object for each Subscription
      Template Attributes\n      Group in the request.  This document extends this
      operation's\n      definition in [RFC2911] by adding Subscription Template Attributes\n
      \     Groups in the request and Subscription Attributes Groups in the\n      response.\n
      \  -  Get-Subscription-Attributes operation: This operation allows a\n      client
      to obtain the specified attributes of a target Subscription\n      Object.\n
      \  -  Get-Subscriptions operation: This operation allows a client to\n      obtain
      the specified attributes of all Subscription Objects\n      associated with
      the Printer or a specified Job.\n   -  Renew-Subscription operation: This operation
      renews the lease on\n      the target Per-Printer Subscription Object before
      it expires.  A\n      newly created Per-Printer Subscription Object receives
      an initial\n      lease.  It is the duty of the client to use this operation\n
      \     frequently enough to preserve a Per-Printer Subscription Object.\n      The
      Printer deletes a Per-Printer Subscription Object when its\n      lease expires.
      \ A Per-Job Subscription Object last exactly as long\n      as its associated
      Job Object and thus doesn't have a lease.\n   -  Cancel-Subscription operation:
      This operation (1) cancels the\n      lease on the specified Per-Printer Subscription
      Object and thereby\n      deletes the Per-Printer Subscription Object or (2)
      deletes the\n      Per-Job Subscription Object.\n   When an Event occurs, the
      Printer finds all Subscription Objects\n   listening for the Event (see section
      9 for details on finding such\n   Subscription Objects).  For each such Subscription
      Object, the\n   Printer:\n   a) generates an Event Notification with information
      specified in\n      section 9, AND\n   b) either:\n      i)  If the Delivery
      Method is a Push Delivery Method as indicated\n          by the presence of
      the Subscription Object's \"notify-\n          recipient-uri\" attribute, delivers
      the Event Notification\n          using the Delivery Method and target address
      identified in the\n          Subscription Object's \"notify-recipient-uri\"
      attribute, OR\n      ii) If the Delivery Method is a Pull Delivery Method as
      indicated\n          by the presence of the Subscription Object's \"notify-pull-\n
      \         method\" attribute, saves Event Notification for a time period\n          called
      the Event Life defined by the Delivery Method, i.e.,\n          the Notification
      Recipient is expected to fetch the Event\n          Notifications.\n"
    title: 1.1.  Notification Overview
  title: 1.  Introduction
- contents:
  - '2.  Models for Notification

    '
  - contents:
    - "2.1.  Model for Simple Notification (Normative)\n   As part of a Subscription
      Creation Operation, an IPP Printer (i.e.,\n   located in an output device or
      a server) creates one or more\n   Subscription Objects.  In a Subscription Creation
      Operation, the\n   client specifies the Notification Recipient to which the
      Printer is\n   to deliver Event Notifications.  A Notification Recipient can
      be the\n   Subscribing Client or a third party.\n   Figure 1 shows the Notification
      model for a simple Client-Printer\n   relationship.\n   embedded printer:\n
      \                                       output device or server\n   PDA, desktop,
      or server                 +---------------+\n        +--------+                         |
      \ ###########  |\n        | client |-----Subscription ---------># Printer #
      \ |\n        +--------+  Creation Operation     |  # Object  #  |\n     +------------+
      \                       |  #####|#####  |\n     |Notification|                        +-------|-------+\n
      \    |Recipient   |<----IPP Event Notifications----+\n     +------------+    (Job
      and/or Printer Events)\n                  Figure 1 - Model for Notification\n"
    title: 2.1.  Model for Simple Notification (Normative)
  - contents:
    - "2.2.  Additional Models for Notification (Informative)\n   Additional models
      have been proposed (see Appendices 16, 17, and 18).\n"
    title: 2.2.  Additional Models for Notification (Informative)
  title: 2.  Models for Notification
- contents:
  - "3.  Terminology\n   This section defines terminology used throughout this document.\n
    \  Other terminology is defined in [RFC2911].\n"
  - contents:
    - "3.1.  Conformance Terminology\n   Capitalized terms, such as MUST, MUST NOT,
      REQUIRED, SHOULD, SHOULD\n   NOT, MAY, NEED NOT, and OPTIONAL, have special
      meaning relating to\n   conformance as defined in RFC 2119 [RFC2119] and [RFC2911]
      section\n   12.1.  If an implementation supports the extension defined in this\n
      \  document, then these terms apply; otherwise, they do not.  These\n   terms
      define conformance to this document only; they do not affect\n   conformance
      to other documents, unless explicitly stated otherwise.\n   Note: a feature
      that is OPTIONAL in this document becomes REQUIRED if\n   the Printer implements
      a Delivery Method that REQUIRES the feature.\n   READ-ONLY - an adjective used
      in an attribute definition to indicate\n   that an IPP Printer MUST NOT allow
      the attribute's value to be\n   modified.\n"
    title: 3.1.  Conformance Terminology
  - contents:
    - "3.2.  Other Terminology\n   This document uses the same terminology as [RFC2911],
      such as\n   \"client\", \"Printer\", \"attribute\", \"attribute value\", \"keyword\",\n
      \  \"operation\", \"request\", \"response\", \"administrator\", \"operator\",
      and\n   \"support\".  In addition, the following terms are defined for use in\n
      \  this document and the Delivery Method Documents:\n   Compound Event Notification
      - two or more Event Notifications that a\n   Printer delivers together as a
      single request or response.  The\n   Delivery Method Document specifies whether
      the Delivery Method\n   supports Compound Event Notifications.\n   Delivery
      Method - the mechanism by which the Printer delivers an\n   Event Notification.\n
      \  Delivery Method Document - a document, separate from this document,\n   that
      defines a Delivery Method.\n   Event - some occurrence (either expected or unexpected)
      within the\n   printing system of a change of state, condition, or configuration
      of\n   a Job or Printer object.  An Event occurs only at one instant in time\n
      \  and does not span the time the physical Event takes place.  For\n   example,
      jam-occurred and jam-cleared are two distinct, instantaneous\n   Events, even
      though the jam may last for a while.\n   Event Life - For a Pull Delivery Method,
      the length of time in\n   seconds after an Event occurs during which the Printer
      will retain\n   that Event for delivery in an Event Notification.  After the
      Event\n   Life expires, the Printer will no longer deliver an Event\n   Notification
      for that Event in such a response.\n   Event Notification - the information
      about an Event that the Printer\n   delivers when an Event occurs.\n   Event
      Notification Attributes Group - The attributes group which is\n   used to deliver
      an Event Notification in a request (Push Delivery\n   Methods) or a response
      (Pull Delivery Methods).\n   Human Consumable Event Notification - localized
      text for human\n   consumption only.  There is no standardized format and thus
      programs\n   should not try to parse this text.\n   Job Creation operation -
      One of the operations that creates a Job\n   object:  Print-Job, Print-URI and
      Create-Job.  The Restart-Job\n   operation [RFC2911] is not considered a Job
      Creation operation, since\n   the Printer re-uses the existing Job object.  The
      Validate-Job\n   operation is not considered a Job Creation operation because
      no Job\n   object is created.  Therefore, when a statement also applies to\n
      \  either the Restart-Job and/or the Validate-Job operation, they are\n   mentioned
      explicitly.\n   Job Event - an Event caused by some change in a particular job
      on the\n   Printer, e.g., 'job-completed'.\n   Machine Consumable Event Notification
      - bytes for program\n   consumption.  The bytes are formatted according to the
      Delivery\n   Method document.\n   Notification - when not in the phrases 'Event
      Notification' and\n   'Notification Recipient' - the concepts of this specification,
      i.e.,\n   Events, Subscription Objects, and Event Notifications.\n   Notification
      Recipient - the entity to which the Printer delivers an\n   Event Notification.
      \ For Push Delivery Methods, the IPP Printer sends\n   the Notifications to
      a Notification Recipient.  For Pull Delivery\n   Methods, the Notification Recipient
      is acting in the role of an IPP\n   client and requests Event Notifications
      and so the terms \"client\" and\n   \"Notification Recipient\" are used interchangeably
      with such Delivery\n   Methods.  For example, see [RFC3996].\n   Per-Job Subscription
      Object - A Subscription Object that is\n   associated with a single Job.  The
      Create-Job-Subscriptions operation\n   and Job Creation operations create such
      an object.\n   Per-Printer Subscription Object - A Subscription Object that
      is\n   associated with the Printer as a whole.  The Create-Printer-\n   Subscriptions
      operation creates such an object.\n   Printer Event - an Event caused by some
      change in the Printer that is\n   not specific to a job, e.g., 'printer-state-changed'.\n
      \  Pull Delivery Method - The Printer saves Event Notifications for some\n   event
      life time and expects the Notification Recipient to request\n   Event Notifications.
      \ The Printer delivers the Event Notifications in\n   a response to such a request.\n
      \  Push Delivery Method -The Printer delivers the Event Notification\n   shortly
      after an Event occurs.\n   Subscribed Event - an Event that the Subscribing
      Client expresses\n   interest in by making it a value of the \"notify-events\"
      attribute on\n   a Subscription Object.\n   Subscribed Job Event - a Subscribed
      Event that is a Job Event.\n   Subscribed Printer Event - a Subscribed Event
      that is a Printer\n   Event.\n   Subscribing Client - The client that creates
      the Subscription Object.\n   Subscription Attributes Group - The attributes
      group in a response\n   that contains Subscription Object attributes.\n   Subscription
      Creation Operation - An operation that creates a\n   Subscription Object:  Job
      Creation operations, Create-Job-\n   Subscriptions operation, Create-Printer-Subscriptions
      operation.  In\n   the context of a Job Creation operation, a Subscription Creation\n
      \  Operation is the part of the Job Creation operation that creates one\n   or
      more Subscription objects.  The Restart-Job operation [RFC2911] is\n   not considered
      a Subscription Creation Operation, since the Printer\n   re-uses the Job's existing
      Subscription Objects, rather than creating\n   any new Subscription Objects.\n
      \  Subscription Creation Request - The request portion of a Subscription\n   Creation
      Operation.\n   Subscription Description Attributes - Subscription Object attributes\n
      \  that a Printer supplies during a Subscription Creation Operation.\n   Subscription
      Object - An object containing a set of attributes that\n   indicate:  the Notification
      Recipient (for Push Delivery Method\n   only), the Delivery Method, the Subscribed
      Events that cause the\n   Printer to deliver an Event Notification, and the
      information to\n   include in an Event Notification.\n   Subscription Template
      Attributes - Subscription Object attributes\n   that a client can supply in
      a Subscription Creation Operation and\n   associated Printer Object attributes
      that specify supported and\n   default values for the Subscription Object attributes.\n
      \  Subscription Template Attributes Group - The attributes group in a\n   request
      that contains Subscription Object attributes that are\n   Subscription Template
      Attributes.\n"
    title: 3.2.  Other Terminology
  title: 3.  Terminology
- contents:
  - "4.  Object Relationships\n   This section defines the object relationships between
    the Printer,\n   Job, and Subscription Objects.  It does not define the\n   implementation.
    \ For an illustration of these relationships, see\n   Appendix 19.\n"
  - contents:
    - "4.1.  Printer and Per-Printer Subscription Objects\n   1. A Printer object
      can be associated with zero or more Per-Printer\n      Subscription Objects.\n
      \  2. Each Per-Printer Subscription Object is associated with exactly\n      one
      Printer object.\n"
    title: 4.1.  Printer and Per-Printer Subscription Objects
  - contents:
    - "4.2.  Printer, Job and Per-Job Subscription Objects\n   1. A Printer object
      is associated with zero or more Job objects.\n   2. Each Job object is associated
      with exactly one Printer object.\n   3. A Job object is associated with zero
      or more Per-Job Subscription\n      Objects.\n   4. Each Per-Job Subscription
      Object is associated with exactly one\n      Job object.\n"
    title: 4.2.  Printer, Job and Per-Job Subscription Objects
  title: 4.  Object Relationships
- contents:
  - "5.  Subscription Object\n   A Subscribing Client creates a Subscription Object
    with a\n   Subscription Creation Operation in order to indicate its interest in\n
    \  certain Events.  See section 11 for a description of these\n   operations.
    \ When an Event occurs, the Subscription Object specifies\n   to the Printer where
    to deliver Event Notifications for Push Delivery\n   Methods only, how to deliver
    them, and what to include in them.  See\n   section 9 for details on the contents
    of an Event Notification.\n   Using the IPP Job Template attributes as a model
    (see [RFC2911]\n   section 4.2), the attributes of a Subscription Object are divided\n
    \  into two categories: Subscription Template Attributes and\n   Subscription
    Description Attributes.\n   Subscription Template attributes are, in turn, like
    the Job Template\n   attributes, divided into\n   1. Subscription Object attributes
    that a client can supply in a\n      Subscription Creation Request and\n   2.
    their associated Printer Object attributes that specify supported\n      and default
    values for the Subscription Object attributes\n   The remainder of this section
    specifies general rules for\n   Subscription Template Attributes and describes
    each attribute in a\n   Subscription Object.\n"
  - contents:
    - "5.1.  Rules for Support of Subscription Template Attributes\n   Subscription
      Template Attributes are fundamental to the Notification\n   model described
      in this specification.  The client supplies these\n   attributes in Subscription
      Creation Operations and the Printer uses\n   these attributes to populate a
      newly created Subscription Object.\n   Subscription Objects attributes that
      are Subscription Template\n   Attributes conform to the following rules:\n   1.
      Each attribute's name starts with the prefix string \"notify-\" and\n      this
      document calls such attributes \"notify-xxx\".\n   2. For each \"notify-xxx\"
      Subscription Object attribute defined in\n      column 1 of Table 1 in section
      5.3, Table 1 specifies\n      corresponding Printer attributes: \"notify-xxx-default\",
      \"notify-\n      xxx-supported\", \"yyy-supported\" and \"notify-max-xxx-supported\"\n
      \     defined in column 2 of Table 1.  Note \"xxx\" stands for the same\n      string
      in each case and \"yyy\" stands for some other string.\n   3. If a Printer supports
      \"notify-xxx\" in column 1 of Table 1, then\n      the Printer MUST support
      all associated attributes specified in\n      column 2 of Table 1.  For example,
      Table 1 shows that if the\n      Printer supports \"notify-events\", it MUST
      support \"notify-events-\n      default\", \"notify-events-supported\" and \"notify-max-events-\n
      \     supported\".\n   4. If a Printer does not support \"notify-xxx\" in column
      1 of Table 1,\n      then the Printer MUST NOT support any associated \"notify-yyy\"\n
      \     attributes specified in column 2 of Table 1.  For example, Table 1\n      shows
      that if the Printer doesn't support \"notify-events\", it MUST\n      NOT support
      \"notify-events-default\", \"notify-events-supported\" and\n      \"notify-max-events-supported\".
      \ Note this rule does not apply to\n      attributes whose names do not start
      with the string \"notify-\" and\n      are thus defined in another object and
      used by other attributes.\n   5. Most \"notify-xxx\" attributes have a corresponding
      \"yyy-supported\"\n      attribute that specifies the supported values for \"notify-xxx\".\n
      \     Column 2 of Table 1 specifies the name of each \"yyy-supported\"\n      attribute.
      \ The naming rules of IPP/1.1 (see [RFC2911]) are used\n      when \"yyy-supported\"
      is \"notify-xxx-supported\".\n   6. Some \"notify-xxx\" attributes have a corresponding
      \"notify-xxx-\n      default\" attribute that specifies the value for \"notify-xxx\"
      if\n      the client does not supply it.  Column 2 of Table 1 specifies the\n
      \     name of each \"notify-xxx-default\" attribute.  The naming rules of\n
      \     IPP/1.1 (see [RFC2911]) are used.\n   If a client wishes to present an
      end user with a list of supported\n   values from which to choose, the client
      SHOULD query the Printer for\n   its supported value attributes.  The client
      SHOULD also query the\n   default value attributes.  If the client then limits
      selectable\n   values to only those values that are supported, the client can\n
      \  guarantee that the values supplied by the client in the create\n   request
      all fall within the set of supported values at the Printer.\n   When querying
      the Printer, the client MAY enumerate each attribute by\n   name in the Get-Printer-Attributes
      Request, or the client MAY just\n   supply the 'subscription-template' group
      name in order to get the\n   complete set of supported attributes (both supported
      and default\n   attributes - see section 11.2.3).\n"
    title: 5.1.  Rules for Support of Subscription Template Attributes
  - contents:
    - "5.2.  Rules for Processing Subscription Template Attributes\n   This section
      defines a detailed set of rules that a Printer follows\n   when it processes
      Subscription Template Attributes in a Subscription\n   Creation Request.  These
      rules are similar to the rules for\n   processing Operation attributes in [RFC2911].
      \ That is, the Printer\n   may or may not support an attribute and a client
      may or may not\n   supply the attribute.  Some combinations of these cases are
      OK.\n   Others return warnings or errors, and perhaps a list of unsupported\n
      \  attributes.\n   A Printer MUST implement the following behavior for processing\n
      \  Subscription Template Attributes in a Subscription Creation Request:\n   1.
      If a client supplies a \"notify-xxx\" attribute from column 1 of\n      Table
      1 and the Printer supports it and its value, the Printer\n      MUST populate
      the attribute on the created Subscription Object.\n   2. If a client supplies
      a \"notify-xxx\" attribute from column 1 of\n      Table 1 and the Printer doesn't
      support it or its value, the\n      Printer MUST NOT populate the attribute
      on the created\n      Subscription Object with it.  The Printer MUST do one
      of the\n      following:\n      a) If the value of the \"notify-xxx\" attribute
      is unsupported, the\n         Printer MUST return the attribute with its value
      in the\n         Subscription Attributes Group of the response.\n      b) If
      \"notify-xxx\" is an unsupported attribute, the Printer MUST\n         return
      the attribute in the Subscription Attributes Group of\n         the response
      with the 'unsupported' out-of-band value.\n      Note:  The rules of this step
      are the same as for Unsupported\n      Attributes [RFC2911] section 3.1.7.  except
      that the unsupported\n      attributes are returned in the Subscription Attributes
      Group\n      rather than the Unsupported Attributes Group because Subscription\n
      \     Creation Operations can create more than one Subscription Object).\n   3.
      If a client is REQUIRED to supply a \"notify-xxx\" attribute from\n      column
      1 of Table 1 and the Printer doesn't support the supplied\n      value, the
      Printer MUST NOT create a Subscription Object.  The\n      rules for Unsupported
      Attributes in step #2 still apply.\n   4. If a client does not supply a \"notify-xxx\"
      attribute from column 1\n      of Table 1 and the attribute is REQUIRED for
      the client to supply,\n      the Printer MUST reject the Subscription Creation
      Operation\n      (including Job Creation operations) without creating a\n      Subscription
      Object, and MUST return in the response:\n      a) the status code 'client-error-bad-request'
      AND\n      b) no Subscription Attribute Groups.\n   5. If a client does not
      supply a \"notify-xxx\" attribute from column 1\n      of Table 1 that is OPTIONAL
      for the client to supply, and column 2\n      of Table 1 either:\n      a) specifies
      a \"notify-xxx-default\" attribute, the Printer MUST\n         behave as if
      the client had supplied the \"notify-xxx-default\"\n         attribute (see
      step #1) and populate the Subscription object\n         with the value of the
      \"notify-xxx-default\" attribute as part of\n         the Subscription Creation
      operation (unlike Job Template\n         attributes where the Printer does not
      populate the Job object\n         with defaults - see [RFC2911]) OR\n      b)
      does not specify a \"notify-xxx-default\" attribute, the Printer\n         MUST
      populate the \"notify-xxx\" attribute on the Subscription\n         Object according
      to the definition of the \"notify-xxx\"\n         attribute in a section 5.3.
      \ For some attributes, the \"notify-\n         xxx\" is populated with the value
      of some other attribute, and\n         for others, the \"notify-xxx\" is NOT
      populated on the\n         Subscription object at all.\n   6. A Printer MUST
      create a Subscription Object for each Subscription\n      Template Attributes
      group in a request unless the Printer:\n      a) encounters some attributes
      in a Subscription Template\n         Attributes Group that require the Printer
      not to create the\n         Subscription Object OR\n      b) would create a
      Per-Job Subscription Object when it doesn't have\n         space for another
      Per-Job Subscription Object OR\n      c) would create a Per-Printer Subscription
      Object when it doesn't\n         have space for another Per-Printer Subscription
      Object.\n   7. A response MUST contain one Subscription Attributes Group for
      each\n      Subscription Template Attributes Group in the request (and in the\n
      \     same order) whether the Printer creates a Subscription Object from\n      the
      Subscription Template Attributes Group or not.  However, the\n      attributes
      in each Subscription Attributes Group can be in any\n      order.\n   8. The
      Printer MUST populate each Subscription Attributes Group of\n      the response
      such that each contains:\n      a) the \"notify-subscription-id\" attribute
      (see section 5.4.1), if\n         and only if the Printer creates a Subscription
      Object.\n      b) the \"notify-lease-duration\" attribute (see section 5.3.8),
      if\n         and only if the Printer creates a Per-Printer Subscription\n         Object.
      \ The value of this attribute is the value of the\n         Subscription Object's
      \"notify-lease-duration\" attribute.  This\n         value MAY be different
      from the client-supplied value (see\n         section 5.3.8).  If a client supplies
      this attribute in the\n         creation of a Per-Job Subscription Object, it
      MUST appear in\n         this group with the out-of-band value 'unsupported'
      to indicate\n         that the Printer doesn't support it in this context.\n
      \     c) all of the unsupported Subscription Template Attributes from\n         step
      #2.  Note, they are not returned in the Unsupported\n         Attributes Group
      in order to separate the unsupported\n         attributes for each Subscription
      Object.\n      d) the \"notify-status-code\" attribute if the Printer does not\n
      \        create the Subscription Object or if there are unsupported\n         attributes
      from step #2.  The possible values of the \"notify-\n         status-code\"
      attribute are shown below (see section 13 for more\n         details).  The
      Printer returns the first value in the list\n         below that describes the
      status.\n         'client-error-uri-scheme-not-supported':  the Subscription\n
      \           Object was not created because the scheme of the \"notify-\n            recipient-uri\"
      attribute is not supported.  See section 13.1\n            for more details
      about this status code.  See step #3 in\n            this section for the case
      that causes this error, and the\n            resulting step #6a) that causes
      the Printer not to create\n            the Subscription Object.\n         'client-error-attributes-or-values-not-supported':
      \ the\n            Subscription Object was not created because the method of\n
      \           the \"notify-pull-method\" attribute is not supported.  See\n            section
      13.1 for more details about this status code.  See\n            step #3 in this
      section for the case that causes this error,\n            and the resulting
      step #6a) that causes the Printer not to\n            create the Subscription
      Object.\n         'client-error-too-many-subscriptions':  the Subscription\n
      \           Object was not created because the Printer has no space for\n            additional
      Subscription Objects.  The client MAY try again\n            later.  See section
      13.3 for more details about this status\n            code.  See steps #6b) and
      #6c) in this section for the cases\n            that causes this error.\n         'successful-ok-too-many-events':
      \ the Subscription Object was\n            created without the \"notify-events\"
      values included in this\n            Subscription Attributes Group because the
      \"notify-events\"\n            attribute contains too many values.  See section
      13.4 for\n            more details about this status code.  See step #2 in this\n
      \           section and section 5.3.3 for the cases that cause this\n            status
      code.\n         'successful-ok-ignored-or-substituted-attributes':  the\n            Subscription
      Object was created but some supplied\n            Subscription Template Attributes
      are unsupported.  These\n            unsupported attributes are also in the
      Subscription\n            Attributes Group.  See section 13.5 for more details
      about\n            this status code.  See step #2 in this section for the cases\n
      \           that cause this status code.\n   9. The Printer MUST validate all
      Subscription Template Attributes and\n      MUST return all unsupported attributes
      and values in the\n      corresponding Subscription Attributes Group of the
      response (see\n      step #2) unless it determines that it could not create
      additional\n      Subscription Objects because of condition #6b) or condition
      #6c).\n      Then, the Printer NEED NOT validate these additional Subscription\n
      \     Template Attributes and the client MUST NOT expect to find\n      unsupported
      attributes from step #2 in such additional\n      Subscription Attribute Groups.\n"
    title: 5.2.  Rules for Processing Subscription Template Attributes
  - contents:
    - "5.3.  Subscription Template Attributes\n   This section contains the Subscription
      Template Attributes defined\n   for the Subscription and Printer objects.\n
      \  Table 1 below shows the Subscription Template Attributes and has two\n   columns:\n
      \  -  Attribute in Subscription Object: the name and attribute syntax of\n      each
      Subscription Object Attribute that is a Subscription Template\n      Attribute\n
      \  -  Default and Supported Printer Attributes: the default attribute\n      and
      supported Printer attributes that are associated with the\n      attribute in
      column 1.\n   The \"notify-recipient-uri\" attribute is for use with Push Delivery\n
      \  Methods.  The \"notify-pull-method\" attribute is for use with Pull\n   Delivery
      Methods.\n   For Push Delivery Methods, a Printer MUST support all attributes
      in\n   Table 1 below except for \"notify-pull-method\" and \"notify-attributes\"\n
      \  (and \"notify-pull-method-supported\" and \"notify-attributes-\n   supported\").
      \ For Pull Delivery Methods, a Printer MUST support all\n   attributes in Table
      1 below except for \"notify-recipient-uri\" and\n   \"notify-attributes\" (and
      \"notify-schemes-supported\" and \"notify-\n   attributes-supported\").  If
      a Printer supports both Push and Pull\n   Delivery Methods, then it MUST support
      both \"notify-recipient-uri\"\n   and \"notify-pull-method\" attributes.\n   For
      Pull Delivery Methods, a client MUST supply \"notify-recipient-\n   uri\" and
      MAY omit any of the rest of the attributes in column 1 of\n   Table 1 in a Subscription
      Creation Request.  For Push Delivery\n   Methods, a client MUST supply \"notify-pull-method\"
      and MAY omit any\n   of the rest of the attributes in column 1 of Table 1 in
      a\n   Subscription Creation Request.  A client MUST NOT supply both\n   \"notify-recipient-uri\"
      and \"notify-pull-method\" attributes in the\n   same Subscription Creation
      Request.\n   Note:  The Default and Supported Printer attributes listed in column\n
      \  2 of Table 1 do not have separate sections in this specification\n   defining
      their semantics.  Instead, the section for the corresponding\n   Subscription
      Object attribute (column 1 of Table 1) contains the\n   semantics of these Printer
      attributes.  This approach follows the\n   precedence of the Job Template attributes
      in section 4.2 of [RFC2911]\n   where the corresponding \"xxx-default\" and
      \"xxx-supported\" Printer\n   attributes are defined in the same section as
      the \"xxx\" Job\n   attribute.\n   Table 1 - Subscription Template Attributes\n
      \  Attribute in Subscription     Default and Supported Printer\n   Object                        Attributes\n
      \  notify-recipient-uri (uri) *  notify-schemes-supported  (1setOf\n                                 uriScheme)\n
      \  notify-pull-method (type2     notify-pull-method-supported (1setOf\n   keyword)
      **                   type2 keyword)\n   notify-events (1setOf type2   notify-events-default
      (1setOf type2\n   keyword)                      keyword)\n                                 notify-events-supported
      (1setOf type2\n                                 keyword)\n                                 notify-max-events-supported\n
      \                                (integer(2:MAX))\n   notify-attributes (1setOf
      \    notify-attributes-supported (1setOf\n   type2 keyword)                type2
      keyword)\n   notify-user-data\n   (octetString(63))\n   notify-charset (charset)
      \     charset-supported (1setOf charset)\n   notify-natural-language       generated-natural-language-supported\n
      \  (naturalLanguage)             (1setOf naturalLanguage)\n   notify-lease-duration
      \        notify-lease-duration-default\n   (integer(0:MAX))              (integer(0:67108863))\n
      \                                notify-lease-duration-supported\n                                 (1setOf
      (integer(0: 67108863) |\n                                 rangeOfInteger(0:67108863)))\n
      \  notify-time-interval\n   (integer(0:MAX))\n   * \"notify-recipient-uri\"
      is for Push Delivery Methods only.\n   ** \"notify-pull-method\" is for Pull
      Delivery Methods only.\n"
    - contents:
      - "5.3.1.  notify-recipient-uri (uri)\n   This attribute's value is a URL, which
        is a special case of a URI.\n   Its value consists of a scheme and an address.
        \ The address specifies\n   the Notification Recipient and the scheme specifies
        the Push Delivery\n   Method for each Event Notification associated with this
        Subscription\n   Object.\n   If a Printer supports any Push Delivery Methods,
        a Printer MUST\n   support this attribute and return the value as supplied
        by the client\n   (no case conversion or other canonicalization) in any operation\n
        \  response that includes this attribute.\n   For a Push Delivery Method,
        a client MUST supply this attribute in a\n   Subscription Creation Operation.
        \ Thus there is no need for a default\n   Printer attribute.\n   The URI scheme
        of the value of this attribute on a Subscription\n   object MUST be a value
        of the \"notify-schemes-supported (1setOf\n   uriScheme)\" Printer attribute
        (see section 5.3.1.1).  Note: According\n   to [RFC2396] the \":\" terminates
        the scheme and so is not part of the\n   scheme.  Therefore, values of the
        \"notify-schemes-supported\" Printer\n   attribute do not include the \":\"
        character.\n   If the client supplies an unsupported scheme in the value of
        this\n   attribute, then the Printer MUST NOT create the Subscription Object\n
        \  and MUST return the \"notify-status-code\" attribute with the 'client-\n
        \  error-uri-scheme-not-supported' value in the Subscription Attributes\n
        \  Group in the response.\n"
      - contents:
        - "5.3.1.1.  notify-schemes-supported  (1setOf uriScheme)\n   This attribute
          contains the URI schemes supported in the \"notify-\n   recipient-uri\"
          Subscription Template attribute.  See sections 5.1 and\n   5.2 for the behavior
          of \"xxx-supported\" Subscription Template Printer\n   attributes.\n"
        title: 5.3.1.1.  notify-schemes-supported  (1setOf uriScheme)
      title: 5.3.1.  notify-recipient-uri (uri)
    - contents:
      - "5.3.2.  notify-pull-method (type2 keyword)\n   This attribute's value is
        a type2 keyword indicating which Pull\n   Delivery Method is to be used.\n
        \  Since a Printer MUST support the 'ippget' Pull Delivery Method\n   [RFC3996]
        (see section 15), a Printer MUST support this attribute and\n   return the
        value as supplied by the client in any operation response\n   that includes
        this attribute.\n   For a Pull Delivery Method, a client MUST supply this
        attribute in a\n   Subscription Creation Operation.  Thus there is no need
        for a default\n   Printer attribute.\n   The keyword value of this attribute
        on a Subscription object MUST be\n   a value of the \"notify-pull-method-supported
        (1setOf type2 keyword)\"\n   Printer attribute.\n   If the client supplies
        an unsupported method in the value of this\n   attribute, then the Printer
        MUST NOT create the Subscription Object\n   and MUST return the \"notify-status-code\"
        attribute with the 'client-\n   error-attributes-or-values-not-supported'
        value in the Subscription\n   Attributes Group in the response.\n"
      - contents:
        - "5.3.2.1.  notify-pull-method-supported (1setOf type2 keyword)\n   See sections
          5.1 and 5.2 for the behavior of \"xxx-supported\"\n   Subscription Template
          Printer attributes.\n"
        title: 5.3.2.1.  notify-pull-method-supported (1setOf type2 keyword)
      title: 5.3.2.  notify-pull-method (type2 keyword)
    - contents:
      - "5.3.3.  notify-events (1setOf type2 keyword)\n   This attribute contains
        a set of Subscribed Events.  When an Event\n   occurs and it \"matches\" a
        value of this attribute, the Printer\n   delivers an Event Notification using
        information in the Subscription\n   Object.  The details of \"matching\" are
        described subsection 5.3.3.5.\n   A Printer MUST support this attribute.\n
        \  A client MAY supply this attribute in a Subscription Creation\n   Operation.
        \ If the client does not supply this attribute in\n   Subscription Creation
        Operation, the Printer MUST populate this\n   attribute on the Subscription
        Object with its \"notify-events-default\"\n   attribute value.\n   Each keyword
        value of this attribute on a Subscription Object MUST be\n   a value of the
        \ \"notify-events-supported (1setOf type2 keyword)\"\n   Printer attribute.\n
        \  The number of values of this attribute MUST NOT exceed the value of\n   the
        \"notify-max-events-supported\" attribute.  A Printer MUST support\n   at
        least 2 values per Subscription Object.  If the number of values\n   supplied
        by a client in a Subscription Creation Operation exceeds the\n   value of
        this attribute, the Printer MUST treat extra values as\n   unsupported values
        and MUST use the value of 'successful-ok-too-\n   many-events' for the \"notify-status-code\"
        attribute in the\n   Subscription Attributes Group of the response.\n"
      - contents:
        - "5.3.3.1.  notify-events-default (1setOf type2 keyword)\n   See sections
          5.1 and 5.2 for the behavior of \"xxx-default\"\n   Subscription Template
          Printer attributes.\n"
        title: 5.3.3.1.  notify-events-default (1setOf type2 keyword)
      - contents:
        - "5.3.3.2.  notify-events-supported (1setOf type2 keyword)\n   See sections
          5.1 and 5.2 for the behavior of \"xxx-supported\"\n   Subscription Template
          Printer attributes.\n"
        title: 5.3.3.2.  notify-events-supported (1setOf type2 keyword)
      - contents:
        - "5.3.3.3.  notify-max-events-supported (integer(2:MAX))\n   This attribute
          specified the maximum number of events that the\n   Printer supports for
          the \"notify-events\" Subscription Template\n   attribute.  See sections
          5.1 and 5.2 for the behavior of \"xxx-\n   supported\" Subscription Template
          Printer attributes.\n"
        title: 5.3.3.3.  notify-max-events-supported (integer(2:MAX))
      - contents:
        - "5.3.3.4.  Standard Values for Subscribed Events\n   Each value of this
          attribute is a keyword and it specifies a\n   Subscribed Event that represents
          certain changes.  Some keywords\n   represent a subset of changes of another
          keyword, e.g., 'job-\n   completed' is an Event value which is a sub-value
          of 'job-state-\n   change'.  See section 5.3.3.5 for the case where this
          attribute\n   contains both a value and a sub-value.\n   The values in this
          section are divided into three categories: No\n   Events, Job Events and
          Printer Events.\n   A Printer MUST support the Events indicated as \"REQUIRED\"
          and MAY\n   support the Events indicated as \"OPTIONAL\".\n"
        - contents:
          - "5.3.3.4.1.  No Events\n   The standard and only keyword value for No
            Events is:\n   'none':  REQUIRED - no Event Notifications for any Events.
            \ As the\n      sole value of \"notify-events-supported\", this value
            means that the\n      Printer does not support the delivery of Event Notifications.
            \ As\n      the sole value of \"notify-events-default\", this value means
            that a\n      client MUST specify the \"notify-events\" attribute in order
            for a\n      Subscription Creation Operation to succeed.  If the Printer\n
            \     receives this value as the sole value of a Subscription Creation\n
            \     Operation, it does not create a Subscription Object.  If a Printer\n
            \     receives this value with other values of a Subscription Creation\n
            \     Operation, the Printer MUST treat this value as an unsupported\n
            \     value.\n"
          title: 5.3.3.4.1.  No Events
        - contents:
          - "5.3.3.4.2.  Subscribed Printer Events\n   The standard keyword values
            for Subscribed Printer Events are:\n   'printer-state-changed':  REQUIRED
            - the Printer changed state from\n      any state to any other state.
            \ Specifically, the value of the\n      Printer's \"printer-state\", \"printer-state-reasons\"
            or \"printer-\n      is-accepting-jobs\" attributes changed.\n      This
            Subscribed Event value has the following sub-values:\n      'printer-restarted'
            and 'printer-shutdown'.  A client can listen\n      for any of these sub-values
            if it doesn't want to listen to all\n      printer-state changes:\n         'printer-restarted':
            \ OPTIONAL - when the printer is powered\n            up.\n         'printer-shutdown':
            \ OPTIONAL - when the device is being\n            powered down.\n         'printer-stopped:
            \ REQUIRED - when the printer stops printing,\n            i.e., the value
            of the \"printer-state\" Printer attribute\n            becomes 'stopped'.\n
            \  'printer-config-changed':  OPTIONAL - when the configuration of a\n
            \     Printer has changed, i.e., the value of the \"printer-message-\n
            \     from-operator\" or any \"configuration\" Printer attribute has\n
            \     changed.  A \"configuration\" Printer attribute is an attribute\n
            \     which can change value because of some human interaction either\n
            \     direct or indirect, and which is not covered by one of the other\n
            \     Events in this section.  Examples of \"configuration\" Printer\n
            \     attributes are any of the Job Template attributes, such as \"xxx-\n
            \     supported\", \"xxx-ready\" and \"xxx-default\".  The client has
            to\n      perform a Get-Printer-Attributes to find out the new values
            of\n      these changed attributes.  This Event is useful for GUI clients\n
            \     and drivers to update the available printer capabilities to the\n
            \     user.\n      This Event value has the following sub-values: 'printer-media-\n
            \     changed' and 'printer-finishings-changed'.  A client can listen\n
            \     for any of these sub-values if it doesn't want to listen to all\n
            \     printer-configuration changes:\n         'printer-media-changed':
            \ OPTIONAL - when the media loaded on\n            a printer has been
            changed, i.e., the \"media-ready\"\n            attribute has changed.
            \ This Event includes two cases: an\n            input tray that goes
            empty and an input tray that receives\n            additional media of
            the same type or of a different type.\n            The client must check
            the \"media-ready\" Printer attribute\n            (see [RFC2911] section
            4.2.11) separately to find out what\n            changed.\n         'printer-finishings-changed':
            \ OPTIONAL - when the finisher on\n            a printer has been changed,
            i.e., the \"finishings-ready\"\n            attribute has changed.  This
            Event includes two cases: a\n            finisher that goes empty and
            a finisher that is refilled\n            (even if it is not full).  The
            client must check the\n            \"finishings-ready\" Printer attribute
            separately to find out\n            what changed.\n   'printer-queue-order-changed':
            OPTIONAL - the order of jobs in the\n      Printer's queue has changed,
            so that an application that is\n      monitoring the queue can perform
            a Get-Jobs operation to determine\n      the new order.  This Event does
            not include when a job enters the\n      queue (the 'job-created' Event
            covers that) and does not include\n      when a job leaves the queue (the
            'job-completed' Event covers\n      that).\n"
          title: 5.3.3.4.2.  Subscribed Printer Events
        - contents:
          - "5.3.3.4.3.  Subscribed Job Events\n   The standard keyword values for
            Subscribed Job Events are:\n   'job-state-changed':  REQUIRED - the job
            has changed from any state\n      to any other state.  Specifically, the
            Printer delivers this Event\n      whenever the value of the \"job-state\"
            attribute or \"job-state-\n      reasons\" attribute changes.  When a
            Job is removed from the Job\n      Retention or Job History phases (see
            [RFC2911] section 4.3.7.1),\n      no Event is generated.\n      This
            Event value has the following sub-values: 'job-created',\n      'job-completed'
            and 'job-stopped'.  A client can listen for any of\n      these sub-values
            if it doesn't want to listen to all 'job-state\n      changes'.\n      'job-created':
            \ REQUIRED - the Printer has accepted a Job\n         Creation operation,
            a Restart-Job operation [RFC2911], or any\n         job operation that
            creates a Job object from an existing Job\n         object.  The Printer
            populates the job's \"time-at-creation\"\n         attribute value (see
            [RFC2911] section 4.3.14.1).  The Printer\n         puts the job in the
            'pending', 'pending-held' or 'processing'\n         states.\n      'job-completed':
            \ REQUIRED - the job has reached one of the\n         completed states,
            i.e., the value of the job's \"job-state\"\n         attribute has changed
            to: 'completed', 'aborted', or\n         'canceled'.  The Job's \"time-at-completed\"
            and \"date-time-at-\n         completed\" (if supported) attributes are
            set (see [RFC2911]\n         section 4.3.14).  When a Job completes, a
            Notification\n         Recipient MAY query the Job using the Get-Job-Attributes\n
            \        operation.  To allow such a query, the Printer retains the Job\n
            \        in the Job Retention and/or the Job History phases (see\n         [RFC2911]
            section 4.3.7.1) for a suitable amount of time that\n         depends
            on implementation and the Delivery Methods supported.\n         The Printer
            also delivers this Event when a Job is removed with\n         the Purge-Job
            operation (see [RFC2911] section 3.2.9).  In this\n         case, the
            Event Notification MUST report the 'job-state' as\n         'canceled'
            and the Job object is no longer present for query.\n      'job-stopped:
            \ OPTIONAL - when the job stops printing, i.e.,\n         the value of
            the \"job-state\" Job attribute becomes\n         'processing-stopped'.\n
            \  'job-config-changed':  OPTIONAL - when the configuration of a job has\n
            \     changed, i.e., the value of the \"job-message-from-operator\" or
            any\n      of the \"configuration\" Job attributes have changed.  A\n
            \     \"configuration\" Job attribute is an attribute that can change\n
            \     value because of some human interaction either direct or indirect.\n
            \     Examples of \"configuration\" Job attributes are any of the job\n
            \     template attributes and the \"job-name\" attribute.  The client\n
            \     performs a Get-Job-Attributes to find out the new values of the\n
            \     changed attributes.  This Event is useful for GUI clients and\n
            \     drivers to update the job information to the user.\n   'job-progress':
            OPTIONAL - when the Printer has completed Printing a\n      sheet.  See
            the separate [RFC3381] specification for additional\n      attributes
            that a Printer MAY deliver in an Event Notification\n      caused by this
            Event.  The \"notify-time-interval\" attribute\n      affects this Event
            by causing the Printer NOT to deliver an Event\n      Notification every
            time a 'job-progress' Events occurs.  See\n      section 5.3.9 for full
            details.\n"
          title: 5.3.3.4.3.  Subscribed Job Events
        title: 5.3.3.4.  Standard Values for Subscribed Events
      - contents:
        - "5.3.3.5.  Rules for Matching of Subscribed Events\n   When an Event occurs,
          the Printer MUST find each Subscription object\n   whose \"notify-events\"
          attribute \"matches\" the Event.  The rules for\n   \"matching\" of Subscribed
          Events are described separately for Printer\n   Events and for Job Events.
          \ This section also describes some special\n   cases.\n"
        - contents:
          - "5.3.3.5.1.  Rules for Matching of Printer Events\n   Given that the Printer
            causes Printer Event E to occur, for each\n   Per-Job or Per-Printer Subscription
            S in the Printer, if E equals a\n   value of this attribute in S or E
            is a sub-value of a value of this\n   attribute in S, the Printer MUST
            generate an Event Notification.\n   Consider the example.  There are three
            Subscription Objects each with\n   the Subscribed Printer Event 'printer-state-changed'.
            \ Subscription\n   Object A is a Per-Printer Subscription Object.  Subscription
            Object B\n   is a Per-Job Subscription Object for Job 1, and Subscription
            Object C\n   is a Per-Job Subscription Object for Job 2.  When the Printer
            enters\n   the 'stopped' state, the Printer delivers an Event Notification
            to\n   the Notification Recipients of Subscription Objects A, B, and C\n
            \  because this is a Printer Event.  Note if Job 1 has already\n   completed,
            the Printer would not deliver an Event Notification for\n   its Subscription
            Object, even if Job 1 is retained in the Job\n   Retention and/or the
            Job History phases (see [RFC2911] section\n   4.3.7.1).\n"
          title: 5.3.3.5.1.  Rules for Matching of Printer Events
        - contents:
          - "5.3.3.5.2.  Rules for Matching of Job Events\n   Given that Job J causes
            Job Event E to occur:\n   1. For each Per-Printer Subscription S in the
            Printer, if E equals a\n      value of this attribute in S or E is a sub-value
            of a value of\n      this attribute in S, the Printer MUST generate an
            Event\n      Notification.\n   2. For each Per-Job Subscription S associated
            with Job J, if E equals\n      a value of this attribute in S or E is
            a sub-value of a value of\n      this attribute in S, the Printer MUST
            generate an Event\n      Notification.\n   3. For each Per-Job Subscription
            S that is NOT associated Job J, if E\n      equals a value of this attribute
            in S or E is a sub-value of a\n      value of this attribute in, the Printer
            MUST NOT generate an Event\n      Notification from S.\n   Consider the
            example: There are three Subscription Objects listening\n   for the Job
            Event 'job-completed'.  Subscription Object A is a Per-\n   Printer Subscription
            Object.  Subscription Object B is a Per-Job\n   Subscription Object for
            Job 1, and Subscription Object C is a Per-Job\n   Subscription Object
            for Job 2.  In addition, Per-Printer Subscription\n   Object D is listening
            for the Job Event 'job-state-changed'.  When\n   Job 1 completes, the
            Printer delivers an Event Notification to the\n   Notification Recipient
            of Subscription Object A (because it is Per-\n   Printer) and Subscription
            Object B because it is a Per-Job\n   Subscription Object associated with
            the Job generating the Event.\n   The Printer also delivers an Event Notification
            to the Notification\n   Recipient of Subscription Object D because 'job-completed'
            is a sub-\n   value of 'job-state-changed' - the value that Subscription
            Object D\n   is listening for.  The Printer does not deliver an Event
            Notification\n   to the Notification Recipients of Subscription Object
            C because it is\n   a Per-Job Subscription Object associated with some
            Job other than the\n   Job generating the Event.\n"
          title: 5.3.3.5.2.  Rules for Matching of Job Events
        - contents:
          - "5.3.3.5.3.  Special Cases for Matching Rules\n   This section contains
            two rules for the special case where a single\n   Event produces multiple
            Event Notifications destined for the same\n   Notification Recipient.
            \ These two rules clarify whether a Printer\n   should send multiple Event
            Notifications or consolidate them into a\n   single Event Notification.\n
            \  If an Event matches Subscribed Events in two different Subscription\n
            \  Objects and the Printer would deliver two identical Event\n   Notifications
            (except for the \"notify-subscription-id\" attribute) to\n   the same
            Notification Recipient using the same Delivery Method, the\n   Printer
            MUST deliver both Event Notifications.  That is, the Printer\n   MUST
            NOT try to consolidate seemingly identical Event Notifications\n   that
            occur in separate Subscription objects.  Incidentally, the\n   Printer
            MUST NOT reject Subscription Creation Operations that would\n   create
            this scenario.\n   Consider the example: At the time a Job completes,
            there are two\n   Per-Printer Subscription Objects A and B with the same
            Notification\n   Recipient R.  Subscription Object A has the Subscribed
            Job Event\n   'job-state-changed'.  Subscription Object B has the Subscribed
            Job\n   Event 'job-completed'.  Both Subscription Objects match the Event\n
            \  'job-completed'.  The Printer delivers two Event Notifications to the\n
            \  Notification Recipient R.  One with the value of  'job-state-changed'\n
            \  for the \"notify-subscribed-event\" attribute and the other with the\n
            \  value of  'job-completed' for the \"notify-subscribed-event\"\n   attribute.\n
            \  If an Event matches two Subscribed Events in a single Subscription\n
            \  object (e.g., a value and its sub-value), a Printer MAY deliver one\n
            \  Event Notification for each matched value in the Subscription Object\n
            \  or it MAY deliver only a single Event Notification.  The rules in\n
            \  sections 5.3.3.5.1 and 5.3.3.5.2 are purposefully flexible about the\n
            \  number of Event Notifications sent when Event E matches two or more\n
            \  values in a Subscription Object.\n   Consider the example: At the time
            a Job completes, a Subscription\n   Object A has two Subscribed Job Events
            'job-state-changed' and 'job-\n   completed'.  Both Subscribed Job Events
            match the Event 'job-\n   completed'.  The Printer delivers either one
            or two Event\n   Notifications to the Notification Recipient of Subscription
            Object A,\n   depending on implementation.  If it delivers two Event Notifications,\n
            \  one has the value of  'job-state-changed' for the \"notify-\n   subscribed-event\"
            attribute, and the other has the value of 'job-\n   completed' for the
            \"notify-subscribed-event\" attribute.  If it\n   delivers one Event Notification,
            it has the value of either 'job-\n   state-changed' or 'job-completed'
            for the \"notify-subscribed-event\"\n   attribute, depending on implementation.
            \ The algorithm for choosing\n   such a value is implementation dependent.\n"
          title: 5.3.3.5.3.  Special Cases for Matching Rules
        title: 5.3.3.5.  Rules for Matching of Subscribed Events
      title: 5.3.3.  notify-events (1setOf type2 keyword)
    - contents:
      - "5.3.4.  notify-attributes (1setOf type2 keyword)\n   This attribute contains
        a set of attribute names.  When a Printer\n   delivers a Machine Consumable
        Event Notification, it includes a fixed\n   set of attributes (see section
        9.1).  If this attribute is present\n   and the Event Notification is Machine
        Consumable, the Printer also\n   includes the attributes specified by this
        attribute.\n   A Printer MAY support this attribute.\n   A client MAY supply
        this attribute in a Subscription Creation\n   Operation.  If the client does
        not supply this attribute in\n   Subscription Creation Operation or the Printer
        does not support this\n   attribute, the Subscription Object either (1) MAY
        contain the\n   \"notify-attributes\" attribute with a 'none' value or (2)
        NEED NOT\n   contain the attribute at all.  There is no \"notify-attributes-\n
        \  default\" Printer attribute.\n   Each keyword value of this attribute on
        a Subscription Object MUST be\n   a value of the \"notify-attributes-supported
        (1setOf type2 keyword)\"\n   Printer attribute (see section 5.3.4.1).  The
        \"notify-attributes-\n   supported\" MAY contain any Printer attribute, Job
        attribute or\n   Subscription Object attribute that the Printer supports in
        an Event\n   Notification.  It MUST NOT contain any of the attributes in Section\n
        \  9.1 that a Printer automatically puts in an Event Notification; it\n   would
        be redundant.  If a client supplies an attribute in Section\n   9.1, the Printer
        MUST treat it as an unsupported attribute value of\n   the \"notify-attributes\"
        attribute.\n   The following rules apply to each keyword value N of the \"notify-\n
        \  attributes\" attribute: If the value N names:\n   a) a Subscription attribute,
        the Printer MUST use the attribute N in\n      the Subscription Object that
        is being used to generate the Event\n      Notification.\n   b) a Job attribute
        and the Printer is generating an Event\n      Notification from a Per-Job
        Subscription Object S, the Printer\n      MUST use the attribute N in the
        Job object associated with S.\n   c) a Job attribute and the Printer is generating
        an Event\n      Notification from a Per-Printer Subscription Object and the
        Event\n      is:\n      -  a Job Event, the Printer MUST use the attribute
        N in the Job\n         object that caused the Event.\n      -  a Printer Event,
        the Printer MUST use the attribute N in the\n         active Job.\n   If a
        Printer supports this attribute and a Subscription Object\n   contains this
        attribute and the Delivery Method generates a Machine\n   Consumable Event
        Notification, the Printer MUST include in each Event\n   Notification:\n   a)
        the attributes specified in section 9.1 and\n   b) each attribute named by
        this attribute.\n   The Printer MUST NOT use this attribute to generate a
        Human\n   Consumable Event Notification.\n"
      - contents:
        - "5.3.4.1.  notify-attributes-supported (1setOf type2 keyword)\n   See sections
          5.1 and 5.2 for the behavior of \"xxx-supported\"\n   Subscription Template
          Printer attributes.\n"
        title: 5.3.4.1.  notify-attributes-supported (1setOf type2 keyword)
      title: 5.3.4.  notify-attributes (1setOf type2 keyword)
    - contents:
      - "5.3.5.  notify-user-data (octetString(63))\n   This attribute contains opaque
        data that some Delivery Methods\n   include in each Machine Consumable Event
        Notification.  The opaque\n   data might contain, for example:\n   -  the
        identity of the Subscriber\n   -  a path or index to some Subscriber information\n
        \  -  a key that identifies to the Notification Recipient the ultimate\n      recipient
        of the Event Notification\n   -  the id for a Notification Recipient that
        had previously registered\n      with an Instant Messaging Service\n   A Printer
        MUST support this attribute.\n   A client MAY supply this attribute in a Subscription
        Creation\n   Operation.  If the client does not supply this attribute in the\n
        \  Subscription Creation Operation, the Subscription Object either (1)\n   MAY
        contain the \"notify-user-data\" attribute with a zero length value\n   or
        (2) NEED NOT contain the attribute at all.  There is no \"notify-\n   user-data-default\"
        Printer attribute.\n   There is no \"notify-user-data-supported\" Printer
        attribute.  Rather,\n   any octetString whose length does not exceed 63 octets
        is a supported\n   value.  If the length exceeds 63 octets, the Printer MUST
        treat it as\n   an unsupported value.\n"
      title: 5.3.5.  notify-user-data (octetString(63))
    - contents:
      - "5.3.6.  notify-charset (charset)\n   This attribute specifies the charset
        to be used in the Event\n   Notification content sent to the Notification
        Recipient, whether the\n   Event Notification content is Machine Consumable
        or Human Consumable.\n   A Printer MUST support this attribute.\n   A client
        MAY supply this attribute in a Subscription Creation\n   Operation.  If the
        client does not supply this attribute in\n   Subscription Creation Operation
        or supplies an unsupported value, the\n   Printer MUST populate this attribute
        in the Subscription Object with\n   the value of the \"attributes-charset\"
        operation attribute, which is a\n   REQUIRED attribute in all IPP requests
        (see [RFC2911]).  If the value\n   of the \"attributes-charset\" attribute
        is unsupported, the Printer\n   MUST populate this attribute in the Subscription
        Object with the\n   value of the Printer's \"charset-configured\" attribute.
        \ There is no\n   \"notify-charset-default\" Printer attribute.\n   The value
        of this attribute on a Subscription Object MUST be a value\n   of the \"charset-supported
        (1setOf charset)\" Printer attribute.\n"
      title: 5.3.6.  notify-charset (charset)
    - contents:
      - "5.3.7.  notify-natural-language (naturalLanguage)\n   This attribute specifies
        the natural language to be used in any human\n   consumable text in the Event
        Notification content sent to the\n   Notification Recipient, whether the Event
        Notification content is\n   Machine Consumable or Human Consumable.\n   A
        Printer MUST support this attribute.\n   A client MAY supply this attribute
        in a Subscription Creation\n   Operation.  If the client does not supply this
        attribute in\n   Subscription Creation Operation or supplies an unsupported
        value, the\n   Printer MUST populate this attribute in the Subscription Object
        with\n   the value of the \"attributes-natural-language\" operation attribute,\n
        \  which is a REQUIRED attribute in all IPP requests (see [RFC2911]\n   section
        3.1.4).  If the value of the \"attributes-natural-language\"\n   attribute
        is unsupported, the Printer MUST populate this attribute in\n   the Subscription
        Object with the value of the Printer's \"natural-\n   language-configured\"
        attribute (see [RFC2911] section 4.4.19).  There\n   is no \"notify-natural-language-default\"
        Printer attribute.\n   The value of this attribute on a Subscription Object
        MUST be a value\n   of the \"generated-natural-language-supported (1setOf
        type2\n   naturalLanguage)\" Printer attribute (see [RFC2911] section 4.4.20).\n"
      title: 5.3.7.  notify-natural-language (naturalLanguage)
    - contents:
      - "5.3.8.  notify-lease-duration (integer(0:67108863))\n   This attribute specifies
        the duration of the lease (in seconds)\n   associated with the Per-Printer
        Subscription Object at the time the\n   Subscription Object was created or
        the lease was renewed.  The\n   duration of the lease is infinite if the value
        is 0, i.e., the lease\n   never expires.  See section 5.4.3 on \"notify-lease-expiration-time\n
        \  (integer(0:MAX))\" for more details.\n   This attribute is not present
        on a Per-Job Subscription Object\n   because the Subscription Object lasts
        exactly as long as the\n   associated Job object.  See discussion of the 'job-completed'
        event\n   in section 5.3.3.4.3 about retention of the Job object after\n   completion.\n
        \  A Printer MUST support this attribute.\n   For a Subscription Object Creation
        operation of a Per-Job\n   Subscription Object, the client MUST NOT supply
        this attribute.  If\n   the client does supply this attribute, the Printer
        MUST treat it as\n   an unsupported attribute.\n   For a Subscription Creation
        Operation of a Per-Printer Subscription\n   Object or a Renew-Subscription
        operation, a client MAY supply this\n   attribute.  If the client does not
        supply this attribute, the Printer\n   MUST populate this attribute with its
        \"notify-lease-duration-default\"\n   (0:67108863) attribute value.  If the
        client supplies this attribute\n   with an unsupported value, the Printer
        MUST populate this attribute\n   with a supported value, and this value SHOULD
        be as close as possible\n   to the value requested by the client.  Note: this
        rule implies that a\n   Printer doesn't assign the value of 0 (infinite) unless
        the client\n   requests it.\n   After the Printer has populated this attribute
        with a supported\n   value, the value represents the \"granted duration\"
        of the lease in\n   seconds and the Printer updates the value of the Subscription\n
        \  Object's \"notify-lease-expiration-time\" attribute as specified in\n   section
        5.4.3.\n   The value of this attribute on a Subscription Object MUST be a
        value\n   of the \"notify-lease-duration-supported\" (1setOf (integer(0:67108863)\n
        \  | rangeOfInteger(0:67108863))) Printer attribute.\n   A Printer MAY require
        authentication in order to return the value of\n   0 (the lease never expires)
        as one of the values of \"notify-lease-\n   duration-supported\", and to allow
        0 as a value of the \"notify-lease-\n   duration\" attribute.\n   Note:  The
        maximum value 67,108,863 is 2 raised to the 26 power minus\n   1 and is about
        2 years in seconds.  The value is considerably less\n   than MAX so that there
        is virtually no chance of an overflow when the\n   Printer adds it to the
        Printer's \"printer-up-time\" attribute value\n   (see [RFC2911] section 4.4.29)
        to produce the \"notify-lease-\n   expiration-time\" Subscription Description
        attribute value (see\n   section 5.4.3).\n"
      - contents:
        - "5.3.8.1.  notify-lease-duration-default (integer(0:67108863))\n   See sections
          5.1 and 5.2 for the behavior of \"xxx-default\"\n   Subscription Template
          Printer attributes.\n"
        title: 5.3.8.1.  notify-lease-duration-default (integer(0:67108863))
      - contents:
        - "5.3.8.2. notify-lease-duration-supported (1setOf (integer(0: 67108863)
          |\n         rangeOfInteger(0:67108863)))\n   See sections 5.1 and 5.2 for
          the behavior of \"xxx-supported\"\n   Subscription Template Printer attributes.\n"
        title: '5.3.8.2. notify-lease-duration-supported (1setOf (integer(0: 67108863)
          |'
      title: 5.3.8.  notify-lease-duration (integer(0:67108863))
    - contents:
      - "5.3.9.  notify-time-interval (integer(0:MAX))\n   The 'job-progress' Event
        occurs each time that a Printer completes a\n   sheet.  Some Notification
        Recipients do not want to receive an Event\n   Notification every time this
        Event occurs.  This attribute allows a\n   Subscribing Client to request how
        often it wants to receive Event\n   Notifications for 'job-progress' Events.
        \ The value of this attribute\n   MAY be any nonnegative integer (0,MAX) indicating
        the minimum number\n   of seconds between 'job-progress' Event Notifications.\n
        \  The Printer MUST support this attribute if and only if the Printer\n   supports
        the 'job-progress' Event.\n   A client MAY supply this attribute in a Subscription
        Creation\n   Operation.  If the client does not supply this attribute in the\n
        \  Subscription Creation Operation, the Subscription Object either (1)\n   MAY
        contain the \"notify-time-interval\" attribute with a '0' value or\n   (2)
        NEED NOT contain this attribute at all.  There is no \"notify-\n   time-interval-default\"
        Printer attribute.\n   There is no \"notify-time-interval-supported\" Printer
        attribute.\n   If the 'job-progress' Event occurs and a Subscription Object
        contains\n   the 'job-progress' Event as a value of the 'notify-events' attribute,\n
        \  there are two cases to consider:\n   1. This attribute is not present on
        the Subscription Object or has\n      the value of 0.  The Printer MUST generate
        and deliver an Event\n      Notification (as is the case with other Events).\n
        \  2. This attribute is present with a nonzero value of N:\n      a) If the
        Printer has not sent an Event Notification for the\n         'job-progress'
        Event for the associated Subscription Object\n         within the past N seconds,
        the Printer MUST deliver an Event\n         Notification for the Event that
        just occurred.  Note when the\n         Printer completes the first page of
        a Job, this rule implies\n         that the Printer delivers an Event Notification
        for a Per-Job\n         Subscription Object.\n      b) Otherwise, the Printer
        MUST NOT generate or deliver an Event\n         Notification for the associated
        Subscription Object.  The\n         Printer MUST NOT increase the value of
        the \"notify-sequence-\n         number\" Subscription Object attribute (i.e.,
        the sequence of\n         values of the \"notify-sequence-number\" attribute
        counts the\n         Event Notifications that the Printer sent and not the
        Events\n         that do not cause an Event Notification to be sent).\n   It
        is RECOMMENDED that a Subscribing Client use this attribute when\n   it subscribes
        to the 'job-progress' Event, and that the value be\n   sufficiently large
        to limit the frequency with which the Printer\n   delivers Event Notifications
        requests.\n   This attribute MUST NOT effect any Events other than 'job-progress'.\n"
      title: 5.3.9.  notify-time-interval (integer(0:MAX))
    title: 5.3.  Subscription Template Attributes
  - contents:
    - "5.4.  Subscription Description Attributes\n   Subscription Description Attributes
      are those attributes that a\n   Printer adds to a Subscription Object at the
      time of its creation.\n   A Printer MUST support all attributes in this Table
      2.\n   A client MUST NOT supply the attributes in Table 2 in a Subscription\n
      \  Template Attributes Group of a Subscription Creation Operation.\n   There
      are no corresponding default or supported attributes.\n   Table 2 - Subscription
      Description Attributes\n      Subscription Object attributes:\n      notify-subscription-id
      (integer(1:MAX))\n      notify-sequence-number (integer(0:MAX))\n      notify-lease-expiration-time
      (integer(0:MAX))\n      notify-printer-up-time (integer(1:MAX))\n      notify-printer-uri
      (uri)\n      notify-job-id (integer(1:MAX))\n      notify-subscriber-user-name
      (name(MAX))\n"
    - contents:
      - "5.4.1.  notify-subscription-id  (integer (1:MAX))\n   This attribute identifies
        a Subscription Object instance with a\n   number that is unique within the
        context of the Printer.  The Printer\n   generates this value at the time
        it creates the Subscription Object.\n   A Printer MUST support this attribute.\n
        \  The Printer MAY assign the value of this attribute sequentially as it\n
        \  creates Subscription Objects.  However, if there is no security on\n   Subscription
        objects, sequential assignment exposes the system to a\n   passive traffic
        monitoring threat.\n   The Printer SHOULD avoid re-using recent values of
        this attribute\n   during continuous operation of the Printer as well as across
        power\n   cycles.  Then a Subscribing Client is unlikely to find that a stale\n
        \  reference accesses a new Subscription Object.\n   The 0 value is not permitted
        in order to allow for compatibility with\n   \"job-id\" and with MIB table
        index values, which are recommended not\n   to be 0.\n"
      title: 5.4.1.  notify-subscription-id  (integer (1:MAX))
    - contents:
      - "5.4.2.  notify-sequence-number (integer (0:MAX))\n   The value of this attribute
        indicates the number of times that the\n   Printer has generated and attempted
        to deliver an Event Notification\n   for this Subscription object.  When an
        Event Notification contains\n   this attribute, the Notification Recipient
        can determine whether it\n   missed some Event Notifications (i.e., numbers
        skipped) or received\n   duplicates (i.e., same number twice).\n   A Printer
        MUST support this attribute.\n   When the Printer creates a Subscription Object,
        it MUST populate this\n   attribute with a value of 0.  This value indicates
        that the Printer\n   has not sent any Event Notifications for this Subscription
        Object.\n   Each time the Printer delivers a newly generated Event Notification,\n
        \  it MUST increase the value of this attribute by 1.  For some Delivery\n
        \  Methods, the Printer MUST include this attribute in each Event\n   Notification,
        and the value MUST be the value after it is increased\n   by 1.  That is,
        the value of this attribute in the first Event\n   Notification after Subscription
        object creation MUST be 1, the second\n   MUST be 2, etc.  If a Delivery Method
        is defined such that the\n   Notification Recipient returns a response, the
        Printer can re-try\n   delivering an Event Notification a certain number of
        times with the\n   same sequence number when the Notification Recipient fails
        to return\n   a response.\n   If a Subscription Object lasts long enough to
        reach the value of MAX,\n   its next value MUST be 0, i.e., it wraps.\n"
      title: 5.4.2.  notify-sequence-number (integer (0:MAX))
    - contents:
      - "5.4.3.  notify-lease-expiration-time (integer(0:MAX))\n   This attribute
        specifies the time in the future when the lease on the\n   Per-Printer Subscription
        Object will expire, i.e., the \"printer-up-\n   time\" value at which the
        lease will expire.  If the value is 0, the\n   lease never expires.\n   A
        Printer MUST support this attribute.\n   When the Printer creates a Per-Job
        Subscription Object, this\n   attribute MUST NOT be present - the Subscription
        Object lasts exactly\n   as long as the associated Job object.  See also the
        discussion of the\n   'job-completed' event in section 5.3.3.4.3 about retention
        of the Job\n   object after completion so that a Notification Recipient can
        query\n   the Job object after receiving the 'job-completed' Event\n   Notification.\n
        \  When the Printer creates a Per-Printer Subscription Object, it\n   populates
        this attribute with a value that is the sum of the values\n   of the Printer's
        \"printer-up-time\" attribute and the Subscription\n   Object's \"notify-lease-duration\"
        attribute with the following\n   exception.  If the value of the Subscription
        Object's \"notify-lease-\n   duration\" attribute is 0 (i.e., no expiration
        time), then the value\n   of this attribute MUST be set to 0 (i.e., no expiration
        time).\n   When the Printer powers up, it MUST populate this attribute in
        each\n   persistent Subscription Object with a value using the algorithm in\n
        \  the previous paragraph.\n   When the \"printer-up-time\" equals the value
        of this attribute, the\n   Printer MUST delete the Subscription Object.  A
        client can extend a\n   lease of a Per-Printer Subscription Object with the
        Renew-\n   Subscription operation (see section 11.2.6).\n   Note: In order
        to compute the number of seconds remaining in a lease\n   for a Per-Printer
        Subscription Object, a client can subtract the\n   Subscription's \"notify-printer-up-time\"
        attribute (see section 5.4.4)\n   from the Subscription's \"notify-lease-expiration-time\"
        attribute.\n"
      title: 5.4.3.  notify-lease-expiration-time (integer(0:MAX))
    - contents:
      - "5.4.4.  notify-printer-up-time (integer(1:MAX))\n   This attribute is an
        alias for the Printer's \"printer-up-time\"\n   attribute \" (see [RFC2911]
        section 4.4.29).  In other words, when\n   this attribute is queried with
        the Get-Subscriptions or Get-\n   Subscription-Attributes operations (see
        sections 11.2.4 and 11.2.5),\n   the value returned is the current value of
        the Printer's \"printer-\n   up-time\" attribute, rather than the time at
        which the Subscription\n   Object was created.\n   A Printer MUST support
        this attribute.\n   When the Printer creates a Per-Job Subscription Object,
        this\n   attribute MUST NOT be present.  When the Printer creates a Per-\n
        \  Printer Subscription Object, this attribute MUST be present.\n   Note:
        this attribute exists in a Per-Printer Subscription Object so\n   that a client
        using the Get-Subscription-Attributes or Get-\n   Subscription operations
        can convert the Per-Printer Subscription's\n   \"notify-lease-expiration-time\"
        attribute to wall clock time with one\n   request.  If the value of the \"notify-lease-expiration-time\"\n
        \  attribute is not 0 (i.e., no expiration time), then the difference\n   between
        the \"notify-lease-expiration-time\" attribute and the\n   \"notify-printer-up-time\"
        is the remaining number of seconds on the\n   lease from the current time.\n"
      title: 5.4.4.  notify-printer-up-time (integer(1:MAX))
    - contents:
      - "5.4.5.  notify-printer-uri (uri)\n   This attribute identifies the Printer
        object that created this\n   Subscription Object.\n   A Printer MUST support
        this attribute.\n   During a Subscription Creation Operation, the Printer
        MUST populate\n   this attribute with the value of the \"printer-uri\" operation\n
        \  attribute in the request.  From the Printer URI, the client can, for\n
        \  example, determine what security scheme was used.\n"
      title: 5.4.5.  notify-printer-uri (uri)
    - contents:
      - "5.4.6.  notify-job-id (integer(1:MAX))\n   This attribute specifies whether
        the containing Subscription Object\n   is a Per-Job or Per-Printer Subscription
        Object, and for Per-Job\n   Subscription Objects, it specifies the associated
        Job.\n   A Printer MUST support this attribute.\n   If this attribute is not
        present, the Subscription Object MUST be a\n   Per-Printer Subscription.  If
        this attribute is present, the\n   Subscription Object MUST be a Per-Job Subscription
        Object and this\n   attribute MUST identify the Job with which the Subscription
        Object is\n   associated.\n   Note: This attribute could be useful to a Notification
        Recipient that\n   receives an Event Notification generated from a Per-Job
        Subscription\n   Object and caused by a Printer Event.  The Event Notification
        gives\n   access to the Printer and the Subscription Object.  The Event\n
        \  Notification gives access to the associated Job only via this\n   attribute.
        \ See discussion of the 'job-completed' event in section\n   5.3.3.4.3 about
        retention of the Job object after completion so that\n   a Notification Recipient
        can query the Job object after receiving the\n   'job-completed' Event Notification.\n"
      title: 5.4.6.  notify-job-id (integer(1:MAX))
    - contents:
      - "5.4.7.  notify-subscriber-user-name (name(MAX))\n   This attribute contains
        the name of the user who performed the\n   Subscription Creation Operation.\n
        \  A Printer MUST support this attribute.\n   The Printer MUST populates this
        attribute with the most authenticated\n   printable name that it can obtain
        from the authentication service\n   over which the Subscription Creation Operation
        was received.  The\n   Printer uses the same mechanism for determining the
        value of this\n   attribute as it does for a Job's \"job-originating-user-name\"
        (see\n   [RFC2911] section 4.3.6).\n   Note:  To help with authentication,
        a Subscription Object may have\n   additional private attributes about the
        user, e.g., a credential of a\n   principal.  Such private attributes are
        implementation-dependent and\n   not defined in this document.\n"
      title: 5.4.7.  notify-subscriber-user-name (name(MAX))
    title: 5.4.  Subscription Description Attributes
  title: 5.  Subscription Object
- contents:
  - "6.  Printer Description Attributes Related to Notification\n   This section defines
    the Printer Description attributes that are\n   related to Notification.  Table
    3 lists the Printer Description\n   attributes, indicates the Printer support
    required for conformance,\n   and whether or not the attribute is READ-ONLY (see
    section 3.1):\n   Table 3 - Printer Description Attributes Associated with Notification\n
    \  Printer object attributes:                   REQUIRED     READ-ONLY\n   printer-state-change-time
    (integer(1:MAX))   No           Yes\n   printer-state-change-date-time (dateTime)
    \   No           Yes\n"
  - contents:
    - "6.1.  printer-state-change-time (integer(1:MAX))\n   This OPTIONAL attribute
      records the most recent time at which the\n   'printer-state-changed' Printer
      Event occurred whether or not any\n   Subscription objects were listening for
      this event.  This attribute\n   helps a client or operator to determine how
      long the Printer has been\n   in its current state.\n   A Printer MAY support
      this attribute and if so, the attribute MUST be\n   READ-ONLY.\n   On power-up,
      the Printer MUST populate this attribute with the value\n   of its \"printer-up-time\"
      attribute, so that it always has a value.\n   Whenever the 'printer-state-changed'
      Printer Event occurs, the\n   Printer MUST update this attribute with the value
      of the Printer's\n   \"printer-up-time\" attribute.\n"
    title: 6.1.  printer-state-change-time (integer(1:MAX))
  - contents:
    - "6.2.  printer-state-change-date-time (dateTime)\n   This OPTIONAL attribute
      records the most recent time at which the\n   'printer-state-changed' Printer
      Event occurred whether or not there\n   were any Subscription Objects listening
      for this event.  This\n   attribute helps a client or operator to determine
      how long the\n   Printer has been in its current state.\n   A Printer MAY support
      this attribute and if so, the attribute MUST be\n   READ-ONLY.\n   On power-up,
      the Printer MUST populate this attribute with the value\n   of its \"printer-current-time\"
      attribute, so that it always has a\n   value (see [RFC2911] section 4.4.30 on
      \"printer-current-time\").\n   Whenever the 'printer-state-changed' Printer
      Event occurs, the\n   Printer MUST update this attribute with the value of the
      Printer's\n   \"printer-current-time\" attribute.\n"
    title: 6.2.  printer-state-change-date-time (dateTime)
  title: 6.  Printer Description Attributes Related to Notification
- contents:
  - "7.  New Values for Existing Printer Description Attributes\n   This section contains
    those attributes for which additional values\n   are added.\n"
  - contents:
    - "7.1.  operations-supported (1setOf type2 enum)\n   The following \"operation-id\"
      values are added in order to support the\n   new operations defined in this
      document:\n   Table 4 - Operation-id assignments\n   Value       Operation Name\n
      \  0x0016      Create-Printer-Subscriptions\n   0x0017      Create-Job-Subscriptions\n
      \  0x0018      Get-Subscription-Attributes\n   0x0019      Get-Subscriptions\n
      \  0x001A      Renew-Subscription\n   0x001B      Cancel-Subscription\n"
    title: 7.1.  operations-supported (1setOf type2 enum)
  title: 7.  New Values for Existing Printer Description Attributes
- contents:
  - "8.  Attributes Only in Event Notifications\n   This section contains those attributes
    that exist only in Event\n   Notifications and do not exist in any objects.\n"
  - contents:
    - "8.1.  notify-subscribed-event (type2 keyword)\n   This attribute indicates
      the Subscribed Event that caused the Printer\n   to deliver this Event Notification.
      \ This attribute exists only in\n   Event Notifications.\n   This attribute
      MUST contain one of the values of the \"notify-events\"\n   attribute in the
      Subscription Object, i.e., one of the Subscribed\n   Event values.  Its value
      is the Subscribed Event that \"matches\" the\n   Event that caused the Printer
      to deliver this Event Notification.\n   This Subscribed Event value may be identical
      to the Event or the\n   Event may be a sub-value of the Subscribed Event.  For
      example, the\n   'job-completed' Event (which is a sub-event of the 'job-state-\n
      \  changed' event) would cause the Printer to deliver an Event\n   Notification
      for either the 'job-completed' or 'job-state-changed'\n   Subscribed Events
      and to deliver the 'job-completed' or 'job-state-\n   changed' value for this
      attribute, respectively.  See section 5.3.3.5\n   for the \"matching\" rules
      of Subscribed Events and for additional\n   examples.\n   The Delivery Method
      Document specifies whether the Printer includes\n   the value of this attribute
      in an Event Notification.\n"
    title: 8.1.  notify-subscribed-event (type2 keyword)
  - contents:
    - "8.2.  notify-text (text(MAX))\n   This attribute contains a Human Consumable
      text message (see section\n   9.2).  This message describes the Event and is
      encoded as plain text,\n   i.e., 'text/plain' with the charset specified by
      Subscription\n   Object's \"notify-charset\" attribute.\n   Note: this attribute
      contains a text message only and must not\n   contain any encoding information,
      such as 'text/plain'.  The\n   'text/plain' encoding is implicit and thus the
      charset must be\n   specified by an alternate mechanism, namely the \"notify-charset\"\n
      \  attribute.\n   The Delivery Method Document specifies whether the Printer
      includes\n   this attribute in an Event Notification.\n"
    title: 8.2.  notify-text (text(MAX))
  title: 8.  Attributes Only in Event Notifications
- contents:
  - "9.  Event Notification Content\n   This section defines the Event Notification
    content that the Printer\n   delivers when an Event occurs.\n   When an Event
    occurs, the Printer MUST find each Subscription object\n   whose \"notify-events\"
    attribute \"matches\" the Event.  See section\n   5.3.3.5 for details on \"matching\".
    \ For each matched Subscription\n   Object, the Printer MUST create an Event Notification
    with the\n   content and format that the Delivery Method Document specifies.  The\n
    \  content contains the value of attributes specified by the Delivery\n   Method
    Document.  The Printer obtains the values immediately after\n   the Event occurs.
    \ For example, if the \"printer-state\" attribute\n   changes from 'idle' to 'processing',
    the Event 'printer-state-\n   changed' occurs and the Printer puts various attributes
    into the\n   Event Notification, including \"printer-up-time\" and \"printer-state\"\n
    \  with the values that they have immediately after the Event occurs,\n   i.e.,
    the value of  \"printer-state\" is 'processing'.\n   Event Notification Ordering:\n
    \  When a Printer delivers Event Notifications, the Event Notifications\n   from
    any given Subscription Object MUST be in time stamp order, i.e.,\n   in order
    of increasing \"printer-up-time\" attribute value in the Event\n   Notification
    (see Table 5).  These Event Notifications MAY be\n   interleaved with those from
    other Subscription Objects, as long as\n   those others are also in time stamp
    order.  The Printer MUST observe\n   these ordering requirements whether delivering
    multiple pending\n   Events as multiple separate Event Notifications or together
    in a\n   single Compound Event Notification.\n   If a Subscribing Client wants
    the Printer to deliver certain Event\n   Notifications in time stamp order, the
    Subscribing Client uses a\n   single Subscription Object.  Even so, depending
    on the underlying\n   transport, the actual order that a Notification Recipient
    receives\n   separate Event Notifications may differ from the order sent by the\n
    \  Printer (e.g., email).\n   Example:  Consider two Per-Printer Subscription
    Objects: SO1 and SO2.\n   SO1 requests 'job-state-changed' events and SO2 requests
    'printer-\n   state-changed' events.  The number in parens is the time stamp.
    \ The\n   following Event Notification sequences are the only ones that conform\n
    \  to the ordering requirements for the Printer to deliver the Event\n   Notifications:\n
    \     (a) SO1: 'job-created' (1000), SO1: 'job-stopped' (1005), SO1:\n      'job-completed'
    (1009), SO2: 'printer-stopped' (1005)\n      (b) SO1: 'job-created' (1000), SO1:
    'job-stopped' (1005), SO2:\n      'printer-stopped' (1005), SO1: 'job-completed'
    (1009)\n      (c) SO1: 'job-created' (1000), SO2: 'printer-stopped' (1005), SO1:\n
    \     'job-stopped' (1005), SO1: 'job-completed' (1009)\n      (d) SO2: 'printer-stopped
    (1005), SO1: 'job-created' (1000), SO1:\n      'job-stopped' (1005), SO1: 'job-completed'
    (1009)\n   Examples (b) and (c) are interleaved; examples (a) and (d) are not\n
    \  interleaved and are not appropriate for some Delivery Methods.\n   If two different
    Events occur simultaneously, or nearly so (e.g.,\n   \"printer-up-time\" has the
    same value for both), the Printer MUST\n   create a separate Event Notification
    for each Event, even if the\n   associated Subscription Object is the same for
    both Events.  However,\n   the Printer MAY combine these distinct Event Notifications
    into a\n   single Compound Event Notification if the Delivery Method supports\n
    \  Compound Event Notifications.  For example, suppose that two nearly-\n   simultaneously
    Events represent two successive 'printer-state-\n   changed' Events, one from
    'idle' to 'processing' and another from\n   'processing' to 'stopped'.  These
    two Events have the same name but\n   are different instances of the Event.  Then
    the Printer MUST create a\n   separate Event Notification for each Event and SHOULD
    accurately\n   report the \"printer-state\" of the first Event as 'processing'
    and the\n   second Event as 'stopped'.\n   If a Subscription Object contains more
    than one Subscribed Event, and\n   several Events occur in quick succession each
    matching a different\n   Subscribed Event in the Subscription Object, the Printer
    MUST NOT\n   generate a single Event Notification from several of these Events,\n
    \  but MAY combine distinct Event Notifications into a single Compound\n   Event
    Notification if the Delivery Method supports Compound Event\n   Notifications.\n
    \  After the Printer has created the Event Notification, the Printer\n   delivers
    it via either a:\n      Push Delivery Method: The Printer delivers the Event Notification\n
    \     shortly after an Event occurs.  For some Push Delivery Methods,\n      the
    Notification Recipient MUST deliver a response; for others it\n      MUST NOT
    deliver a response.\n      Pull Delivery Method: The Printer saves Event Notifications
    for\n      some Event Life and expects the Notification Recipient to request\n
    \     Event Notifications.  The Printer returns the Event Notifications\n      in
    a response to such a request.\n   If an error that meets the following conditions
    occurs, the Printer\n   MUST cancel the Subscription Object.\n   a) the error
    occurs during the delivering of an Event Notification\n      generated from Subscription
    Object S AND\n   b) the error would continue to occur every time the Printer delivers\n
    \     an Event Notification generated from Subscription Object S in the\n      future.\n
    \  For example, if the address of the \"notify-recipient-uri\" of\n   Subscription
    Object A references a non-existent target and the\n   Printer determines this
    fact, it MUST delete Subscription Object A.\n   The next two sections describe
    the values that a Printer delivers in\n   the content of Machine Consumable and
    Human Consumable Event\n   Notifications, respectively.\n   The tables in the
    sub-sections of this section contain the following\n   columns:\n   a) Source
    Value: the name of the attribute that supplies the value\n      for the Event
    Notification.  Asterisks in this field refer to a\n      note below the table.\n
    \  b) Delivers: if the Printer supports the value (column 1) on the\n      Source
    Object (column 3) the Delivery Method MUST specify:\n         MUST: that the Printer
    MUST deliver the value.\n         SHOULD: either that the Printer MUST deliver
    the value or that\n         the value is incompatible with the Delivery Method.\n
    \        MAY: that the Printer MUST, SHOULD, MAY, MUST NOT, SHOULD NOT,\n         or
    NEED NOT deliver the value.  The Delivery Method specifies\n         the level
    of conformance for the Printer.\n   c) Source Object: the object from which the
    source value comes.  If\n      the object is \"Event Notification\", the Printer
    fabricates the\n      value when it delivers the Event Notification.  See section
    8.\n"
  - contents:
    - "9.1.  Content of Machine Consumable Event Notifications\n   This section defines
      the attributes that a Delivery Method MUST\n   mention in a Delivery Method
      Document when specifying the Machine\n   Consumable Event Notification's contents.\n
      \  This document does not define the order of attributes in Event\n   Notifications.
      \ However, Delivery Method Documents MAY define the\n   order of some or all
      of the attributes.\n   A Delivery Method Document MUST specify additional attributes
      (if\n   any) that a Printer implementation delivers in a Machine Consumable\n
      \  Event Notification.\n   Notification Recipients MUST be able to accept Event
      Notifications\n   containing attributes they do not recognize.  What a Notification\n
      \  Recipient does with an unrecognized attribute is implementation-\n   dependent.
      \ Notification Recipients MAY attempt to display\n   unrecognized attributes
      anyway or MAY ignore them.\n   The next three sections define the attributes
      in Event Notification\n   Contents that are:\n      1. for all Events\n      2.
      for Job Events only\n      3. for Printer Events only\n"
    - contents:
      - "9.1.1.  Event Notification Content Common to All Events\n   This section
        lists the attributes that a Delivery Method Document\n   MUST specify for
        all Events.\n   Table 5 lists potential values in each Event Notification.\n
        \  Table 5 - Attributes in Event Notification Content\n   Source Value                               Delivers
        \  Source Object\n   notify-subscription-id (integer(1:MAX))    MUST       Subscription\n
        \  notify-printer-uri (uri)                   MUST       Subscription\n   notify-subscribed-event
        (type2 keyword)    MUST       Event\n                                                         Notification\n
        \  printer-up-time (integer(MIN:MAX))         MUST       Printer\n   printer-current-time
        (dateTime) *          MUST       Printer\n   notify-sequence-number (integer
        (0:MAX))   SHOULD     Subscription\n   notify-charset (charset)                   SHOULD
        \    Subscription\n   notify-natural-language (naturalLanguage)  SHOULD     Subscription\n
        \  notify-user-data (octetString(63)) **      SHOULD     Subscription\n   notify-text
        (text)                         SHOULD     Event\n                                                         Notification\n
        \  attributes from the \"notify-attributes\"    MAY        Printer\n   attribute
        ***\n   attributes from the \"notify-attributes\"    MAY        Job\n   attribute
        ***\n   attributes from the \"notify-attributes\"    MAY        Subscription\n
        \  attribute ***\n   *A Printer MUST deliver this value only if and only if
        it supports\n   the Printer's \"printer-current-time\" attribute.\n   ** If
        the Subscription Object does not contain a \"notify-user-data\"\n   attribute
        and the Delivery Method Document REQUIRES the Printer to\n   deliver the \"notify-user-data\"
        source value in the Event\n   Notification, the Printer MUST deliver an octet-string
        of length 0.\n   *** The last three rows represent additional attributes that
        a client\n   MAY request via the  \"notify-attributes\" attribute.  A Printer
        MAY\n   support the \"notify-attributes\" attribute.  The Delivery Method
        MUST\n   say that the Printer MUST, SHOULD, MAY, MUST NOT, SHOULD NOT, or
        NEED\n   NOT support the \"notify-attributes\" attribute and specific values
        of\n   this attribute.  The Delivery Method MAY say that support for the\n
        \  \"notify-attributes\" is conditioned on support of the attribute by the\n
        \  Printer or it MAY say that Printer MUST support the \"notify-\n   attributes\"
        attribute if the Printer supports the Delivery Method.\n"
      title: 9.1.1.  Event Notification Content Common to All Events
    - contents:
      - "9.1.2.  Additional Event Notification Content for Job Events\n   This section
        lists the additional attributes that a Delivery Method\n   Document MUST specify
        for Job Events.  See Table 6.\n   Table 6 - Additional Event Notification
        Content for Job Events\n   Source Value                                  Delivers
        \ Source\n                                                            Object\n
        \  job-id (integer(1:MAX))                       MUST      Job\n   job-state
        (type1 enum)                        MUST      Job\n   job-state-reasons (1setOf
        type2 keyword)      MUST      Job\n   job-impressions-completed (integer(0:MAX))
        *  MUST      Job\n   *  The Printer MUST deliver the \"job-impressions-completed\"
        attribute\n   in an Event Notification only for the combinations of Events
        and\n   Subscribed Events shown in Table 7.\n   Table 7 - Combinations of
        Events and Subscribed Events for \"job-\n   impressions-completed\"\n   Job
        Event              Subscribed Job Event\n   'job-progress'         'job-progress'\n
        \  'job-completed'        'job-completed'\n   'job-completed'        'job-state-changed'\n"
      title: 9.1.2.  Additional Event Notification Content for Job Events
    - contents:
      - "9.1.3.  Additional Event Notification Content for Printer Events\n   This
        section lists the additional attributes that a Delivery Method\n   Document
        MUST specify for Printer Events.  See Table 8.\n   Table 8 - Additional Event
        Notification Content for Printer Events\n   Source Value                             Delivers
        \  Source Object\n   printer-state (type1 enum)               MUST       Printer\n
        \  printer-state-reasons (1setOf type2      MUST       Printer\n   keyword)\n
        \  printer-is-accepting-jobs (boolean)      MUST       Printer\n"
      title: 9.1.3.  Additional Event Notification Content for Printer Events
    title: 9.1.  Content of Machine Consumable Event Notifications
  - contents:
    - "9.2.  Content of Human Consumable Event Notification\n   This section defines
      the information that a Delivery Method MUST\n   mention in a Delivery Method
      Document when specifying the Human\n   Consumable Event Notifications contents
      or the value of the \"notify-\n   text\" attribute.\n   Such a Delivery Method
      MUST specify the following information and a\n   Printer SHOULD deliver it:\n
      \  a) the Printer name (see Table 9)\n   b) the time of the Event (see Table
      11)\n   c) for Printer Events only:\n      i) the Event (see Table 10) and/or
      Printer state information (see\n         Table 14)\n   d) for Job Events only:\n
      \     i) the job identity (see Table 12)\n      ii) the Event (see Table 10)
      and/or Job state information (see\n          Table 13)\n   The subsections of
      this section specify the attributes that a Printer\n   MUST use to obtain this
      information.\n   A Delivery Method Document MUST specify additional information
      (if\n   any) that a Printer implementation delivers in a Human Consumable\n
      \  Event Notification or in the \"notify-text\" attribute.\n   A client MUST
      NOT request additional attributes via the \"notify-\n   attributes\" attribute
      because this attribute works only for Machine\n   Consumable Event Notifications.\n
      \  Notification Recipients MUST NOT expect to be able to parse the Human\n   Consumable
      Event Notification contents or the value of the \"notify-\n   text\" attribute.\n
      \  The next three sections define the attributes in Event Notification\n   Contents
      that are:\n      a) for all Events\n      b) for Job Events only\n      c) for
      Printer Events only\n"
    - contents:
      - "9.2.1.  Event Notification Content Common to All Events\n   This section
        lists the source of the information that a Delivery\n   Method MUST specify
        for all Events.\n   There is a separate table for each piece of information.
        \ Each row in\n   the table represents a source value for the information
        and the\n   values are listed in order of preference, with the first one being\n
        \  the preferred one.  An implementation SHOULD use the source value\n   from
        the earliest row in each table.  It MAY use the source value\n   from another
        row instead, or it MAY combine the source values from\n   several rows.  An
        implementation is free to determine the best way to\n   present this information.\n
        \  In all tables of this section, all rows contain a \"MAY\" in order to\n
        \  state that the Delivery Method specifies the conformance.\n   Table 9 lists
        the source of the information for the Printer Name.\n   The \"printer-name\"
        is more user-friendly unless the Notification\n   Recipient is in a place
        where the Printer name is not meaningful.\n   For example, an implementation
        could have the intelligence to deliver\n   the value of the \"printer-name\"
        attribute to a Notification Recipient\n   that can access the Printer via
        value of the \"printer-name\" attribute\n   and otherwise deliver the value
        of the \"notify-printer-uri\"\n   attribute.\n   Table 9 - Printer Name in
        Event Notification Content\n   Source Value                            Delivers
        \  Source Object\n   printer-name (name(127))                MAY        Printer\n
        \  notify-printer-uri (uri)                MAY        Subscription\n   Table
        10 lists the source of the information for the Event name.  A\n   Printer
        MAY combine this information with state information described\n   for Jobs
        in Table 13 or for Printers in Table 14.\n   Table 10 - Event Name in Event
        Notification Content\n   Source Value                             Delivers
        \   Source Object\n   notify-subscribed-event (type2 keyword)  MAY         Subscription\n
        \  Table 11 lists the source of the information for the time that the\n   Event
        occurred.  A Printer can deliver this value only if it supports\n   the Printer's
        \"printer-current-time\" attribute.  If a Printer does\n   not support the
        \"printer-current-time\" attribute, it MUST NOT deliver\n   the \"printer-up-time\"
        value instead, since it is not an allowed\n   option for human consumable
        information.\n   Table 11 - Event Time in Event Notification Content\n   Source
        Value                            Delivers   Source Object\n   printer-current-time
        (dateTime)         MAY        Printer\n"
      title: 9.2.1.  Event Notification Content Common to All Events
    - contents:
      - "9.2.2.  Additional Event Notification Content for Job Events\n   This section
        lists the source of the additional information that a\n   Delivery Method
        MUST specify for Job Events.\n   Table 12 lists the source of the information
        for the job name.  The\n   \"job-name\" is likely more meaningful to a user
        than \"job-id\".\n   Table 12 - Job Name in Event Notification Content\n   Source
        Value                           Delivers    Source Object\n   job-name (name(MAX))
        \                  MAY         Job\n   job-id (integer(1:MAX))                MAY
        \        Job\n   Table 13 lists the source of the information for the job
        state.  If a\n   Printer supports the \"job-state-message\" and \"job-detailed-state-\n
        \  message\" attributes, it SHOULD use those attributes for the job state\n
        \  information, otherwise, it should fabricate such information from the\n
        \  \"job-state\" and \"job-state-reasons\".  For some Events, a Printer MAY\n
        \  combine this information with Event information.\n   Table 13 - Job State
        in Event Notification Content\n   Source Value                                     Delivers
        \ Source\n                                                               Object\n
        \  job-state-message (text(MAX))                    MAY       Job\n   job-detailed-status-messages
        (1setOf text(MAX))  MAY       Job\n   job-state (type1 enum)                           MAY
        \      Job\n   job-state-reasons (1setOf type2 keyword)         MAY       Job\n"
      title: 9.2.2.  Additional Event Notification Content for Job Events
    - contents:
      - "9.2.3.  Additional Event Notification Content for Printer Events\n   This
        section lists the source of the additional information that a\n   Delivery
        Method MUST specify for Printer Events.\n   Table 14 lists the source of the
        information for the printer state.\n   If a Printer supports the \"printer-state-message\",
        it SHOULD use that\n   attribute for the job state information, otherwise
        it SHOULD\n   fabricate such information from the \"printer-state\" and \"printer-\n
        \  state-reasons\".  For some Events, a Printer MAY combine this\n   information
        with Event information.\n   Table 14 - Printer State in Event Notification
        Content\n   Source Value                                    Delivers   Source\n
        \                                                              Object\n   printer-state-message
        (text(MAX))               MAY        Printer\n   printer-state (type1 enum)
        \                     MAY        Printer\n   printer-state-reasons (1setOf
        type2 keyword)    MAY        Printer\n   printer-is-accepting-jobs (boolean)
        \            MAY        Printer\n"
      title: 9.2.3.  Additional Event Notification Content for Printer Events
    title: 9.2.  Content of Human Consumable Event Notification
  title: 9.  Event Notification Content
- contents:
  - "10.  Delivery Methods\n   A Delivery Method is the mechanism, i.e., protocol,
    by which the\n   Printer delivers an Event Notification to a Notification Recipient.\n
    \  There are several potential Delivery Methods for Event Notifications,\n   standardized,
    as well as proprietary.  This specification REQUIRES\n   that the 'ippget' Pull
    Delivery Method [RFC3996] be supported.\n   Conforming implementations MAY support
    additional Push or Pull\n   Delivery Methods as well.  This document does not
    define any of these\n   delivery mechanisms.  Each Delivery Method MUST be defined
    in a\n   Delivery Method Document that is separate from this document.  New\n
    \  Delivery Methods will be created as needed using an extension to the\n   registration
    procedures defined in [RFC2911].  Such documents are\n   registered with IANA
    (see section 23.7.3).\n   The following sorts of Delivery Methods are possible:\n
    \  -  The Notification Recipient polls for Event Notifications at\n      intervals
    directed by the Printer\n   -  The Printer delivers Event Notifications to the
    Notification\n      Recipient using http as the transport.\n   -  The Printer
    delivers an email message.\n   This section specifies how to define a Delivery
    Method Document and\n   what to put in such a document.\n   A Delivery Method
    Document MUST contain an exact copy of the\n   following paragraph, caption and
    table.  In addition, column 2 of the\n   table in the Delivery Method Document
    MUST contain answers to\n   questions in column 1 for the Delivery Method.  Also,
    the Delivery\n   Method document MUST contain a reference to this document and
    call\n   that reference [RFC3995] because the table contains an [RFC3995]\n   reference.\n
    \  If a Printer supports this Delivery Method, the following are its\n   characteristics.\n
    \  Table 15 - Information about the Delivery Method\n   Document Method Conformance
    Requirement     Delivery Method\n                                               Realization\n
    \  1.  What is the URL scheme name for the Push Delivery Method or the\n       keyword
    method name for the Pull Delivery Method?\n   2.  Is the Delivery Method REQUIRED,
    RECOMMENDED, or OPTIONAL for an\n       IPP Printer to support?\n   3.  What transport
    and delivery protocols does the Printer use to\n       deliver the Event Notification
    Content, i.e., what is the entire\n       network stack?\n   4.  Can several Event
    Notifications be combined into a Compound Event\n       Notification?\n   5.  Is
    the Delivery Method initiated by the Notification Recipient\n       (pull), or
    by the Printer (push)?\n   6.  Is the Event Notification content Machine Consumable
    or Human\n       Consumable?\n   7.  What section in this document answers the
    following question?\n       For a Machine Consumable Event Notification, what
    is the\n       representation and encoding of values defined in section 9.1 of\n
    \      [RFC3995] and the conformance requirements thereof?  For a Human\n       Consumable
    Event Notification, what is the representation and\n       encoding of pieces
    of information defined in section 9.2 of\n       [RFC3995] and the conformance
    requirements thereof?\n   8.  What are the latency and reliability of the transport
    and\n       delivery protocol?\n   9.  What are the security aspects of the transport
    and delivery\n       protocol, e.g., how it is handled in firewalls?\n   10.  What
    are the content length restrictions?\n   11.  What are the additional values or
    pieces of information that a\n        Printer delivers in an Event Notification
    content and the\n        conformance requirements thereof?\n   12.  What are the
    additional Subscription Template and/or\n        Subscription Description attributes
    and the conformance\n        requirements thereof?\n   13.  What are the additional
    Printer Description attributes and the\n        conformance requirements thereof?\n"
  title: 10.  Delivery Methods
- contents:
  - "11.  Operations for Notification\n   This section defines all of the operations
    for Notification.  Section\n   7.1 assigns the \"operation-id\" for each operation.
    \ The following two\n   sub-sections define Subscription Creation Operations,
    and other\n   operations.\n"
  - contents:
    - "11.1.  Subscription Creation Operations\n   This section defines the Subscription
      Creation Operations.  The first\n   section on Create-Job-Subscriptions gives
      most of the information.\n   The other Subscription Creation Operations refer
      to the section on\n   Create-Job-Subscriptions, even though the Create-Job-Subscriptions\n
      \  operation is the only OPTIONAL operation in this document (see\n   section
      12).\n   A Printer MUST support Create-Printer-Subscriptions and the\n   Subscription
      Template Attributes Group in Job Creation operations.\n   It MAY support Create-Job-Subscriptions
      operations.\n"
    - contents:
      - "11.1.1.  Create-Job-Subscriptions Operation\n   The operation creates one
        or more Per-Job Subscription Objects.  The\n   client supplies one or more
        Subscription Template Attributes Groups\n   each containing one or more of
        Subscription Template Attributes\n   (defined in section 5.3).\n   Except
        for errors, the Printer MUST create exactly one Per-Job\n   Subscription Object
        from each Subscription Template Attributes Group\n   in the request, even
        if the newly created Subscription Object would\n   have identical behavior
        to some existing Subscription Object.  The\n   Printer MUST associate each
        newly created Per-Job Subscription Object\n   with the target Job, which is
        specified by the \"notify-job-id\"\n   operation attribute.\n   The Printer
        MUST accept the request in any of the target job's 'not-\n   completed' states,
        i.e., 'pending', 'pending-held', 'processing', or\n   'processing-stopped'.
        \ The Printer MUST NOT change the job's \"job-\n   state\" attribute because
        of this operation.  If the target job is in\n   any of the 'completed' states,
        i.e., 'completed', 'canceled', or\n   'aborted, then the Printer MUST reject
        the request and return the\n   'client-error-not-possible' status code; the
        response MUST NOT\n   contain any Subscription Attribute Groups.\n   Access
        Rights:  To create Per-Job Subscription Objects, the\n   authenticated user
        (see [RFC2911] section 8.3) performing this\n   operation MUST (1) be the
        job owner, (2) have Operator or\n   Administrator access rights for this Printer
        (see [RFC2911] sections\n   1 and 8.5), or (3) be otherwise authorized by
        the Printer's\n   administrator-configured security policy to create Per-Job\n
        \  Subscription Objects for the target job.  Otherwise the Printer MUST\n
        \  reject the operation and return: the 'client-error-forbidden',\n   'client-error-not-authenticated',
        or 'client-error-not-authorized'\n   status code as appropriate.\n"
      - contents:
        - "11.1.1.1.  Create-Job-Subscriptions Request\n   The following groups of
          attributes are part of the Create-Job-\n   Subscriptions Request:\n   Group
          1: Operation Attributes\n   Natural Language and Character Set:\n      The
          \"attributes-charset\" and \"attributes-natural-language\"\n      attributes
          as described in [RFC2911] section 3.1.4.1.\n   Target:\n      The \"printer-uri\"
          attribute which defines the target for this\n      operation as described
          in [RFC2911] section 3.1.5.\n   Requesting User Name:\n      The \"requesting-user-name\"
          attribute SHOULD be supplied by the\n      client as described in [RFC2911]
          section 8.3.\n"
        - contents:
          - "11.1.1.1.1.  notify-job-id (integer(1:MAX))\n   The client MUST supply
            this attribute and it MUST specify the Job\n   object to associate the
            Per-Job Subscription with.  The value of\n   \"notify-job-id\" MUST be
            the value of the \"job-id\" of the associated\n   Job object.  If the
            client does not supply this attribute, the\n   Printer MUST reject this
            request with a 'client-error-bad-request'\n   status code.\n   Group 2-N:
            Subscription Template Attributes\n      For each occurrence of this group:\n
            \        The client MUST supply one or more Subscription Template\n         Attributes
            in any order.  See section 5.3 for a description of\n         each such
            attribute.  See section 5.2 for details on processing\n         these
            attributes.\n"
          title: 11.1.1.1.1.  notify-job-id (integer(1:MAX))
        title: 11.1.1.1.  Create-Job-Subscriptions Request
      - contents:
        - "11.1.1.2.  Create-Job-Subscriptions Response\n   The Printer MUST return
          to the client the following sets of\n   attributes as part of a Create-Job-Subscriptions
          response:\n   Group 1: Operation Attributes\n   Status Message:\n      In
          addition to the REQUIRED status code returned in every\n      response,
          the response OPTIONALLY includes a \"status-message\"\n      (text(255))
          and/or a \"detailed-status-message\" (text(MAX))\n      operation attribute
          as described in [RFC2911] sections 13 and\n      3.1.6.\n      In this group,
          the Printer can return any status codes defined in\n      [RFC2911] and
          section 12.  The following is a description of the\n      important status
          codes:\n      successful-ok: the Printer created all Subscription Objects\n
          \        requested (see [RFC2911]).\n      successful-ok-ignored-subscriptions:
          the Printer created some\n         Subscription Objects requested but some
          failed.  The\n         Subscription Attributes Groups with a \"notify-status-code\"\n
          \        attribute are the ones that failed (see section 12.1).\n      client-error-ignored-all-subscriptions:
          the Printer created no\n         Subscription Objects requested and all
          failed.  The\n         Subscription Attributes Groups with a \"notify-status-code\"\n
          \        attribute are the ones that failed (see section 12.2).\n      client-error-not-possible:
          For this operation and other Per-Job\n         Subscription operations,
          this error can occur because the\n         specified Job has already completed
          (see [RFC2911], whether or\n         not the Job is retained in the Job
          Retention and/or Job History\n         phases (see [RFC2911] section 4.3.7.1).\n
          \  Natural Language and Character Set:\n      The \"attributes-charset\"
          and \"attributes-natural-language\"\n      attributes as described in [RFC2911]
          section 3.1.4.2.\n   Group 2: Unsupported Attributes\n      See [RFC2911]
          section 3.1.7 for details on returning Unsupported\n      Attributes.  This
          group does not contain any unsupported\n      Subscription Template Attributes;
          they are returned in the\n      Subscription Attributes Group (see below).\n
          \  Group 3-N: Subscription Attributes\n      These groups MUST be returned
          unless the Printer is unable to\n      interpret the entire request, e.g.,
          the \"status-code\" parameter\n      returned in Group 1 has the value:
          'client-error-bad-request'.\n      \"notify-status-code\" (type2 enum):\n
          \        Indicates the status of this subscription (see section 13 for\n
          \        the status code definitions).  Section 5.2 defines when this\n
          \        attribute MUST be present in this group.\n      See section 5.2
          for details on the contents of each occurrence of\n      this group.\n"
        title: 11.1.1.2.  Create-Job-Subscriptions Response
      title: 11.1.1.  Create-Job-Subscriptions Operation
    - contents:
      - "11.1.2.  Create-Printer-Subscriptions operation\n   The operation is identical
        to Create-Job-Subscriptions with\n   exceptions noted in this section.\n   The
        operation creates Per-Printer Subscription Objects instead of\n   Per-Job
        Subscription Objects, and associates each newly created Per-\n   Printer Subscription
        Object with the Printer specified by the\n   operation target rather than
        with a specific Job.\n   The Printer MUST accept the request in any of its
        states, i.e.,\n   'idle', 'processing', or 'stopped'.  The Printer MUST NOT
        change its\n   \"printer-state\" attribute because of this operation.\n   Access
        Rights:  To create Per-Printer Subscription Objects, the\n   authenticated
        user (see [RFC2911] section 8.3) performing this\n   operation MUST have (1)
        Operator or Administrator access rights for\n   this Printer (see [RFC2911]
        sections 1 and 8.5), or (2) be otherwise\n   authorized by the Printer's administrator-configured
        security policy\n   to create Per-Printer Subscription Objects for this Printer.\n
        \  Otherwise, the Printer MUST reject the operation and return: the\n   'client-error-forbidden',
        'client-error-not-authenticated', or\n   'client-error-not-authorized' status
        code as appropriate.\n"
      - contents:
        - "11.1.2.1.  Create-Printer-Subscriptions Request\n   The groups are identical
          to the Create-Job-Subscriptions (see section\n   11.1.1.1) except that the
          Operation Attributes group MUST NOT contain\n   the  \"notify-job-id\" attribute.
          \ If the client does supply the\n   \"notify-job-id\" attribute, then the
          Printer MUST treat it as any\n   other unsupported Operation attribute and
          MUST return it in the\n   Unsupported Attributes group.\n"
        title: 11.1.2.1.  Create-Printer-Subscriptions Request
      - contents:
        - "11.1.2.2.  Create-Printer-Subscriptions Response\n   The groups are identical
          to the Create-Job-Subscriptions (see section\n   11.1.1.2).\n"
        title: 11.1.2.2.  Create-Printer-Subscriptions Response
      title: 11.1.2.  Create-Printer-Subscriptions operation
    - contents:
      - "11.1.3.  Job Creation Operations - Extensions for Notification\n   This document
        extends the Job Creation operations (see section 3.2)\n   to create Subscription
        Objects as a part of the operation.\n   The Job Creation operations are identical
        to Create-Job-Subscriptions\n   operation with exceptions noted in this section.\n
        \  Unlike the Create-Job-Subscriptions operation, a Job Creation\n   operation
        associates the newly created Subscription Objects with the\n   Job object
        created by this operation.  The operation succeeds if and\n   only if the
        Job creation succeeds.  If the Printer does not create\n   some or all of
        the requested Subscription Objects, the Printer MUST\n   return a  'successful-ok-ignored-subscriptions'
        status-code instead\n   of a 'successful-ok' status-code, but the Printer
        MUST NOT reject the\n   operation because of a failure to create Subscription
        Objects.\n   If the Job Creation operation includes a Job Template group,
        the\n   client MUST supply it after the Operation Attributes group and before\n
        \  the first Subscription Template Attributes Group.\n   If a Printer does
        not support this Notification specification, then\n   it MUST treat the Subscription
        Attributes Group like an unknown group\n   and ignore it (see [RFC2911] section
        5.2.2).  Because the Printer\n   ignores the Subscription Attributes Group,
        it doesn't return them in\n   the response either, thus indicating to the
        client that the Printer\n   doesn't support Notification.\n   After completion
        of a successful Job Creation operation, the Printer\n   generates a 'job-created'
        event (see section 5.3.3.4.3).\n   Access Rights:  To create Per-Job Subscription
        Objects, the\n   authenticated user (see [RFC2911] section 8.3) performing
        this\n   operation MUST either have permission to create Jobs on the Printer\n
        \  or have Operator or Administrator access rights for this Printer (see\n
        \  [RFC2911] sections 1 and 8.5).  Otherwise the Printer MUST reject the\n
        \  operation and return: the 'client-error-forbidden', 'client-error-\n   not-authenticated',
        or 'client-error-not-authorized' status code as\n   appropriate.\n"
      - contents:
        - "11.1.3.1.  Job Creation Request\n   The groups for this operation are sufficiently
          different from the\n   Create-Job-Subscriptions operation that they are
          all presented here.\n   The following groups of attributes are supplied
          as part of a Job\n   Creation Request:\n   Group 1: Operation Attributes\n
          \     Same as defined in [RFC2911] for Print-Job, Print-URI, and\n      Create-Job
          requests.\n   Group 2: Job Template Attributes\n      The client OPTIONALLY
          supplies a set of Job Template attributes as\n      defined in [RFC2911]
          section 4.2.\n   Group 3 to N: Subscription Template Attributes\n      The
          same as Group 2-N in Create-Job-Subscriptions.  See section\n      11.1.1.1.\n
          \  Group N+1: Document Content  (Print-Job only)\n      The client MUST
          supply the document data to be processed.\n"
        title: 11.1.3.1.  Job Creation Request
      - contents:
        - "11.1.3.2.  Job Creation Response\n   The Printer MUST return to the client
          the following sets of\n   attributes as part of a Print-Job, Print-URI,
          and Create-Job\n   Response:\n   Group 1: Operation Attributes\n      Status
          Message:\n         As defined in [RFC2911] for Print-Job, Print-URI, and
          Create-\n         Job requests.\n         In this group, the Printer can
          return any status codes defined\n         in [RFC2911] and section 12.  The
          following is a description of\n         the important status codes:\n         successful-ok:
          the Printer created the Job and all\n            Subscription Objects requested
          (see [RFC2911].\n         successful-ok-ignored-subscriptions: the Printer
          created\n            the Job and not all of the Subscription Objects requested\n
          \           (see section 12.1).  This status-code hides 'successful-ok-\n
          \           xxx' status-codes that could reveal problems in Job\n            creation.
          \ The Printer MUST NOT return the 'client-error-\n            ignored-all-subscriptions'
          status code for Job Creation\n            operations because the Printer
          returns an error status-code\n            only when it fails to create a
          Job.\n         Natural Language and Character Set:\n            The \"attributes-charset\"
          and \"attributes-natural-language\"\n            attributes as described
          in [RFC2911] section 3.1.4.2.\n   Group 2: Unsupported Attributes\n      See
          [RFC2911] section 3.1.7 for details on returning Unsupported\n      Attributes.
          \ This group does not contain any unsupported\n      Subscription Template
          Attributes; they are returned in the\n      Subscription Attributes Group
          (see below).\n   Group 3: Job Object Attributes\n      The \"job-id\" of
          the Job Object just created, etc., as defined in\n      [RFC2911] for Print-Job,
          Print-URI, and Create-Job requests.\n   Group 4 to N: Subscription Attributes\n
          \     These groups MUST be returned if and only if the client supplied\n
          \     Subscription Template Attributes and the operation was accepted.\n
          \     See section 5.2 for details on the contents of each occurrence of\n
          \     this group.\n"
        title: 11.1.3.2.  Job Creation Response
      title: 11.1.3.  Job Creation Operations - Extensions for Notification
    title: 11.1.  Subscription Creation Operations
  - contents:
    - "11.2.  Other Operations\n   This section defines other operations on Subscription
      objects.\n"
    - contents:
      - "11.2.1.  Restart-Job Operation - Extensions for Notification\n   The Restart-Job
        operation [RFC2911] is neither a Job Creation\n   operation nor a Subscription
        Creation operation (see section 3.2).\n   For the Restart-Job operation, the
        client MUST NOT supply any Job\n   Subscription Attributes Groups.  The Printer
        MUST treat any supplied\n   Job Subscription Attributes as unsupported attributes.\n
        \  For this operation, the Printer does not return a job-id or any\n   Subscription
        Attributes groups because the Printer reuses the\n   existing Job object with
        the same job-id and the existing Per-Job\n   Subscription Objects with the
        same subscription-ids.  However, after\n   successful completion of this operation,
        the Printer generates a\n   'job-created' event (see section 5.3.3.4.3).\n"
      title: 11.2.1.  Restart-Job Operation - Extensions for Notification
    - contents:
      - "11.2.2.  Validate-Job Operation - Extensions for Notification\n   A client
        can test whether one or more Subscription Objects could be\n   created using
        the Validate-Job operation.  The client supplies one or\n   more Subscription
        Template Attributes Groups (defined in section\n   5.3), just as in a Job
        Creation request.\n   A Printer MUST support this extension to this operation.\n
        \  The Printer MUST accept requests that are identical to the Job\n   Creation
        request defined in section 11.1.3.1, except that the request\n   MUST NOT
        contain document data.\n   The Printer MUST return the same groups and attributes
        as the Print-\n   Job operation (section 11.1.3.1) with the following exceptions.
        \ The\n   Printer MUST NOT return a Job Object Attributes Group because no
        Job\n   is created.  The Printer MUST NOT return the \"notify-subscription-id\"\n
        \  attribute in any Subscription Attribute Group because no Subscription\n
        \  Object is created.\n   If the Printer would succeed in creating a Subscription
        Object, the\n   corresponding Subscription Attributes Group either has no
        'status-\n   code' attribute or a 'status-code' attribute with a value of\n
        \  'successful-ok-too-many-events' or 'successful-ok-ignored-or-\n   substituted-attributes'
        (see sections 5.2 and 13).  The status-codes\n   have the same meaning as
        in Job Creation except the results state\n   what \"would happen\".\n   The
        Printer MUST validate Subscription Template Attributes Groups in\n   the same
        manner as the Job Creation operations.\n"
      title: 11.2.2.  Validate-Job Operation - Extensions for Notification
    - contents:
      - "11.2.3.  Get-Printer-Attributes - Extensions for Notification\n   This operation
        is extended so that it returns Printer attributes\n   defined in this document.\n
        \  A Printer MUST support this extension to this operation.\n   In addition
        to the requirements of [RFC2911] section 3.2.5, a Printer\n   MUST support
        the following additional values for the \"requested-\n   attributes\" Operation
        attribute in this operation and return such\n   attributes in the Printer
        Object Attributes group of its response.\n   1. Subscription Template Attributes:
        Each supported attribute in\n      column 2 of Table 1.\n   2. New Printer
        Description Attributes: Each supported attribute in\n      section 6.\n   3.
        New Group Name: The 'subscription-template' group name, which\n      names
        all supported Subscription Template Attribute in column 2 of\n      Table
        1.  This group name is also used in the Get-Subscription-\n      Attributes
        and Get-Subscriptions operation with an analogous\n      meaning.\n   4. Extended
        Group Name: The 'all' group name, which names all Printer\n      attributes
        according to [RFC2911] section 3.2.5.  In this\n      extension 'all' names
        all attributes specified in [RFC2911] plus\n      those named in items 1 and
        2 of this list.\n"
      title: 11.2.3.  Get-Printer-Attributes - Extensions for Notification
    - contents:
      - "11.2.4.  Get-Subscription-Attributes operation\n   This operation allows
        a client to request the values of the\n   attributes of a Subscription Object.\n
        \  A Printer MUST support this operation.\n   This operation is almost identical
        to the Get-Job-Attributes\n   operation (see [RFC2911] section 3.3.4).  The
        only differences are\n   that the operation is directed at a Subscription
        Object rather than a\n   Job object, and the returned attribute group contains
        Subscription\n   Object attributes rather than Job object attributes.\n   Access
        Rights:  The authenticated user (see [RFC2911] section 8.3)\n   performing
        this operation MUST (1) be the Subscription Object owner,\n   (2) have Operator
        or Administrator access rights for this Printer\n   (see [RFC2911] sections
        1 and 8.5), or (3) be otherwise authorized by\n   the Printer's administrator-configured
        security policy to query the\n   Subscription Object for the target job.  Otherwise
        the Printer MUST\n   reject the operation and return: the 'client-error-forbidden',\n
        \  'client-error-not-authenticated', or 'client-error-not-authorized'\n   status
        code as appropriate.  Furthermore, the Printer's security\n   policy MAY limit
        which attributes are returned, in a manner similar\n   to the Get-Job-Attributes
        operation (see [RFC2911] end of section\n   3.3.4.2).\n"
      - contents:
        - "11.2.4.1.  Get-Subscription-Attributes Request\n   The following groups
          of attributes are part of the Get-Subscription-\n   Attributes request:\n
          \  Group 1: Operation Attributes\n   Natural Language and Character Set:\n
          \     The \"attributes-charset\" and \"attributes-natural-language\"\n      attributes
          as described in section [RFC2911] 3.1.4.1.\n   Target:\n      The \"printer-uri\"
          attribute which defines the target for this\n      operation as described
          in [RFC2911] section 3.1.5.\n   Requesting User Name:\n      The \"requesting-user-name\"
          attribute SHOULD be supplied by the\n      client as described in [RFC2911]
          section 8.3.\n"
        - contents:
          - "11.2.4.1.1.  \"notify-subscription-id\" (integer (1:MAX))\n   The client
            MUST supply this attribute.  The Printer MUST support this\n   attribute.
            \ This attribute specifies the Subscription Object from\n   which the
            client is requesting attributes.  If the client omits this\n   attribute,
            the Printer MUST reject this request with the 'client-\n   error-bad-request'
            status code.\n"
          title: 11.2.4.1.1.  "notify-subscription-id" (integer (1:MAX))
        - contents:
          - "11.2.4.1.2.  \"requested-attributes\" (1setOf keyword)\n   The client
            OPTIONALLY supplies this attribute.  The Printer MUST\n   support this
            attribute.  This attribute specifies the attributes of\n   the specified
            Subscription Object that the Printer MUST return in the\n   response.
            \ Each value of this attribute is either an attribute name\n   (defined
            in sections 5.3 and 5.4) or an attribute group name.  The\n   attribute
            group names are:\n   -  'subscription-template': all attributes that are
            both defined in\n      section 5.3 and present on the specified Subscription
            Object\n      (column 1 of Table 1).\n   -  'subscription-description':
            all attributes that are both defined\n      in section 5.4 and present
            on the specified Subscription Object\n      (Table 2).\n   -  'all': all
            attributes that are present on the specified\n      Subscription Object.\n
            \  A Printer MUST support all these group names.\n      If the client
            omits this attribute, the Printer MUST respond as if\n      this attribute
            had been supplied with a value of 'all'.\n"
          title: 11.2.4.1.2.  "requested-attributes" (1setOf keyword)
        title: 11.2.4.1.  Get-Subscription-Attributes Request
      - contents:
        - "11.2.4.2.  Get-Subscription-Attributes Response\n   The Printer returns
          the following sets of attributes as part of the\n   Get-Subscription-Attributes
          Response:\n   Group 1: Operation Attributes\n   Status Message:\n      Same
          as [RFC2911].\n   Natural Language and Character Set:\n      The \"attributes-charset\"
          and \"attributes-natural-language\"\n      attributes as described in [RFC2911]
          section 3.1.4.2.  The\n      \"attributes-natural-language\" MAY be the
          natural language of the\n      Subscription Object, rather than the one
          requested.\n   Group 2: Unsupported Attributes\n      See [RFC2911] section
          3.1.7 and section 3.2.5.2 for details on\n      returning Unsupported Attributes.\n
          \     The response NEED NOT contain the \"requested-attributes\" operation\n
          \     attribute with any supplied keyword values that were requested by\n
          \     the client but are not supported by the IPP object.  If the\n      Printer
          object does return unsupported attributes referenced in\n      the \"requested-attributes\"
          operation attribute, the values of the\n      \"requested-attributes\" attribute
          returned MUST include only the\n      unsupported keywords that were requested
          by the client.  If the\n      client had requested a group name, such as
          'all', the resulting\n      unsupported attributes returned MUST NOT include
          attribute keyword\n      names described in the standard but not supported
          by the\n      implementation.\n   Group 3: Subscription Attributes\n      This
          group contains a set of attributes with their current values.\n      Each
          attribute returned in this group:\n   a) MUST be specified by the \"requested-attributes\"
          attribute in the\n      request, AND\n   b) MUST be present on the specified
          Subscription Object AND\n   c) MUST  NOT be restricted by the security policy
          in force.  For\n      example, a Printer MAY prohibit a client who is not
          the creator of\n      a Subscription Object from seeing some or all of its
          attributes.\n      See [RFC2911] end of section 3.3.4.2 and section 8.\n
          \     The Printer can return the attributes of the Subscription Object\n
          \     in any order.  The client MUST accept the attributes in any order.\n"
        title: 11.2.4.2.  Get-Subscription-Attributes Response
      title: 11.2.4.  Get-Subscription-Attributes operation
    - contents:
      - "11.2.5.  Get-Subscriptions operation\n   This operation allows a client to
        retrieve the values of attributes\n   of all Subscription Objects belonging
        to a Job or Printer.\n   A Printer MUST supported this operation.\n   This
        operation is similar to the Get-Subscription-Attributes\n   operation, except
        that this Get-Subscriptions operation returns\n   attributes from possibly
        more than one object.\n   This operation is similar to the Get-Jobs operation
        (see [RFC2911]\n   section 3.2.6), except that the operation returns Subscription\n
        \  Objects rather than Job objects.\n   Access Rights:  To query Per-Job Subscription
        Objects of the\n   specified job (client supplied the \"notify-job-id\" operation\n
        \  attribute - see section 11.2.5.1.1), the authenticated user (see\n   [RFC2911]
        section 8.3) performing this operation MUST (1) be the\n   Subscription Object
        owner, (2) have Operator or Administrator access\n   rights for this Printer
        (see [RFC2911] sections 1 and 8.5), or (3) be\n   otherwise authorized by
        the Printer's administrator-configured\n   security policy to query the Subscription
        Object for the target job.\n   To query Per-Printer Subscription Objects of
        the Printer (client\n   omits the \"notify-job-id\" operation attribute -
        see section\n   11.2.5.1.1), the authenticated user (see [RFC2911] section
        8.3)\n   performing this operation MUST (1) have Operator or Administrator\n
        \  access rights for this Printer (see [RFC2911] sections 1 and 8.5), or\n
        \  (2) be otherwise authorized by the Printer's administrator-configured\n
        \  security policy to query Per-Printer Subscription Objects for the\n   target
        Printer.  Otherwise the Printer MUST reject the operation and\n   return:
        the 'client-error-forbidden', 'client-error-not-\n   authenticated', or 'client-error-not-authorized'
        status code as\n   appropriate.  Furthermore, the Printer's security policy
        MAY limit\n   which attributes are returned, in a manner similar to the Get-Jobs\n
        \  and Get-Printer-Attributes operations (see [RFC2911] end of sections\n
        \  3.2.6.2 and 3.2.5.2).\n"
      - contents:
        - "11.2.5.1.  Get-Subscriptions Request\n   The following groups of attributes
          are part of the Get-Subscriptions\n   request:\n   Group 1: Operation Attributes\n
          \  Natural Language and Character Set:\n      The \"attributes-charset\"
          and \"attributes-natural-language\"\n      attributes as described in [RFC2911]
          section 3.1.4.1.\n   Target:\n      The \"printer-uri\" attribute which
          defines the target for this\n      operation as described in [RFC2911] section
          3.1.5.\n   Requesting User Name:\n      The \"requesting-user-name\" attribute
          SHOULD be supplied by the\n      client as described in [RFC2911] section
          8.3.\n"
        - contents:
          - "11.2.5.1.1.  \"notify-job-id\" (integer(1:MAX))\n   If the client specifies
            this attribute, the Printer returns the\n   specified attributes of all
            Per-Job Subscription Objects associated\n   with the Job whose \"job-id\"
            attribute value equals the value of this\n   attribute.  If the client
            does not specify this attribute, the\n   Printer returns the specified
            attributes of all Per-Printer\n   Subscription Objects.  Note: there is
            no way to get all Per-Job\n   Subscriptions known to the Printer in a
            single operation.  A Get-Jobs\n   operation followed by a Get-Subscriptions
            operation for each Job will\n   return all Per-Job Subscriptions.\n"
          title: 11.2.5.1.1.  "notify-job-id" (integer(1:MAX))
        - contents:
          - "11.2.5.1.2.  \"limit\" (integer(1:MAX))\n   The client OPTIONALLY supplies
            this attribute.  The Printer MUST\n   support this attribute.  It is an
            integer value that determines the\n   maximum number of Subscription Objects
            that a client will receive\n   from the Printer even if the \"my-subscriptions\"
            attribute constrains\n   which Subscription Objects are returned.  The
            limit is a \"stateless\n   limit\" in that if the value supplied by the
            client is 'N', then only\n   the first 'N' Subscription Objects are returned
            in the Get-\n   Subscriptions Response.  There is no mechanism to allow
            for the next\n   'M' Subscription Objects after the first 'N' Subscription
            Objects.\n   If the client does not supply this attribute, the Printer
            responds\n   with all applicable Subscription Objects.\n"
          title: 11.2.5.1.2.  "limit" (integer(1:MAX))
        - contents:
          - "11.2.5.1.3.  \"requested-attributes\" (1setOf type2 keyword)\n   The
            client OPTIONALLY supplies this attribute.  The Printer MUST\n   support
            this attribute.  This attribute specifies the attributes of\n   the specified
            Subscription Objects that the Printer MUST return in\n   the response.
            \ Each value of this attribute is either an attribute\n   name (defined
            in sections 5.3 and 5.4) or an attribute group name\n   (defined in section
            11.2.4.1).  If the client omits this attribute,\n   the Printer MUST respond
            as if the client had supplied this attribute\n   with the one value: 'notify-subscription-id'.\n"
          title: 11.2.5.1.3.  "requested-attributes" (1setOf type2 keyword)
        - contents:
          - "11.2.5.1.4.  \"my-subscriptions\" (boolean)\n   The client OPTIONALLY
            supplies this attribute.  The Printer MUST\n   support this attribute.
            \ If the value is 'false', the Printer MUST\n   consider the Subscription
            Objects from all users as candidates.  If\n   the value is 'true', the
            Printer MUST return the Subscription Objects\n   created by the requesting
            user of this request.  If the client does\n   not supply this attribute,
            the Printer MUST respond as if the client\n   had supplied the attribute
            with a value of 'false'.  The means for\n   authenticating the requesting
            user and matching the Subscription\n   Objects is similar to that for
            Jobs which is described in [RFC2911]\n   section 8.\n"
          title: 11.2.5.1.4.  "my-subscriptions" (boolean)
        title: 11.2.5.1.  Get-Subscriptions Request
      - contents:
        - "11.2.5.2 Get-Subscriptions Response\n   The Printer returns the following
          sets of attributes as part of the\n   Get-Subscriptions Response:\n   Group
          1: Operation Attributes\n   Status Message:\n      Same as [RFC2911].\n
          \  Natural Language and Character Set:\n      The \"attributes-charset\"
          and \"attributes-natural-language\"\n      attributes as described in [RFC2911]
          section 3.1.4.2.\n   Group 2: Unsupported Attributes\n      Same as for
          Get-Subscription-Attributes.\n   Groups 3 to N: Subscription Attributes\n
          \     The Printer responds with one Subscription Attributes Group for\n
          \     each requested Subscription Object (see the \"notify-job-id\"\n      attribute
          in the Operation Attributes Group of this operation).\n      The Printer
          returns Subscription Objects in any order.\n      If the \"limit\" attribute
          is present in the Operation Attributes\n      group of the request, the
          number of Subscription Attributes Groups\n      in the response MUST NOT
          exceed the value of the \"limit\"\n      attribute.\n      It there are
          no Subscription Objects associated with the specified\n      Job or Printer,
          the Printer MUST return zero Subscription\n      Attributes Groups and it
          MUST NOT treat this case as an error,\n      i.e., the status-code MUST
          be 'successful-ok' unless something\n      else causes the status code to
          have some other value.\n      See the Group 3 response (Subscription Attributes
          Group) of the\n      Get-Subscription-Attributes operation (section 11.2.4.2)
          for the\n      attributes that a Printer returns in this group.\n"
        title: 11.2.5.2 Get-Subscriptions Response
      title: 11.2.5.  Get-Subscriptions operation
    - contents:
      - "11.2.6.  Renew-Subscription operation\n   This operation allows a client
        to request the Printer to extend the\n   lease on a Per-Printer Subscription
        Object.\n   The Printer MUST support this operation.\n   The Printer MUST
        accept this request for a Per-Printer Subscription\n   Object in any of the
        target Printer's states, i.e., 'idle',\n   'processing', or 'stopped', but
        MUST NOT change the Printer's\n   \"printer-state\" attribute.\n   The Printer
        MUST reject this request for a Per-Job Subscription\n   Object because it
        has no lease (see section 5.4.3).  The status code\n   returned MUST be 'client-error-not-possible'.\n
        \  Access Rights: The authenticated user (see [RFC2911] section 8.3)\n   performing
        this operation MUST (1) be the owner of the Per-Printer\n   Subscription Object,
        (2) have Operator or Administrator access rights\n   for the Printer (see
        [RFC2911] sections 1 and 8.5), or (3) be\n   otherwise authorized by the Printer's
        administrator-configured\n   security policy to renew Per-Printer Subscription
        Objects for the\n   target Printer.  Otherwise, the Printer MUST reject the
        operation and\n   return: the 'client-error-forbidden', 'client-error-not-\n
        \  authenticated', or 'client-error-not-authorized' status code as\n   appropriate.\n"
      - contents:
        - "11.2.6.1.  Renew-Subscription Request\n   The following groups of attributes
          are part of the Renew-Subscription\n   Request:\n   Group 1: Operation Attributes\n
          \  Natural Language and Character Set:\n      The \"attributes-charset\"
          and \"attributes-natural-language\"\n      attributes as described in [RFC2911]
          section 3.1.4.1.\n   Target:\n      The \"printer-uri\" attribute which
          defines the target for this\n      operation as described in [RFC2911] section
          3.1.5.\n   Requesting User Name:\n      The \"requesting-user-name\" (name(MAX))
          attribute SHOULD be\n      supplied by the client as described in [RFC2911]
          section 8.3.\n"
        - contents:
          - "11.2.6.1.1.  \"notify-subscription-id\" (integer (1:MAX))\n   The client
            MUST supply this attribute.  The Printer MUST support this\n   attribute.
            \ This attribute specifies the Per-Printer Subscription\n   Object whose
            lease the Printer MUST renew.  If the client omits this\n   attribute,
            the Printer MUST reject this request with the 'client-\n   error-bad-request'
            status code.\n   Group 2: Subscription Template Attributes\n"
          title: 11.2.6.1.1.  "notify-subscription-id" (integer (1:MAX))
        - contents:
          - "11.2.6.1.2.  \"notify-lease-duration\" (integer(0:MAX))\n   The client
            MAY supply this attribute.  It indicates the number of\n   seconds to
            renew the lease for the specified Subscription Object.  A\n   value of
            0 requests an infinite lease (which MAY require Operator\n   access rights).
            \ If the client omits this attribute, the Printer MUST\n   use the value
            of the Printer's \"notify-lease-duration-default\"\n   attribute.  See
            section 5.3.8 for more details.\n"
          title: 11.2.6.1.2.  "notify-lease-duration" (integer(0:MAX))
        title: 11.2.6.1.  Renew-Subscription Request
      - contents:
        - "11.2.6.2.  Renew-Subscription Response\n   The Printer returns the following
          sets of attributes as part of the\n   Renew-Subscription Response:\n   Group
          1: Operation Attributes\n   Status Message:\n      Same as [RFC2911].\n
          \     The following are some of the status codes returned (see\n      [RFC2911]:\n
          \        successful-ok: The operation successfully renewed the lease\n            on
          the Subscription Object for the requested duration.\n         successful-ok-ignored-or-substituted-attributes:
          The\n            operation successfully renewed the lease on the Subscription\n
          \           Object for some duration other than the amount requested.\n
          \        client-error-not-possible: The operation failed because the\n            \"notify-subscription-id\"
          Operation attribute identified a\n            Per-Job Subscription Object.\n
          \        client-error-not-found: The operation failed because the\n            \"notify-subscription-id\"
          Operation attribute identified a\n            non-existent Subscription
          Object.\n   Natural Language and Character Set:\n      The \"attributes-charset\"
          and \"attributes-natural-language\"\n      attributes as described in [RFC2911]
          section 3.1.4.2.  The\n      \"attributes-natural-language\" MAY be the
          natural language of the\n      Subscription Object, rather than the one
          requested.\n   Group 2: Unsupported Attributes\n      See [RFC2911] section
          3.1.7 for details on returning Unsupported\n      Attributes.\n   Group
          3: Subscription Attributes\n      The Printer MUST return the following
          Subscription Attribute:\n"
        - contents:
          - "11.2.6.2.1.  \"notify-lease-duration\" (integer(0:MAX))\n   The value
            of this attribute MUST be the number of seconds that the\n   Printer has
            granted for the lease of the Subscription Object (see\n   section 5.3.8
            for details, such as the value of this attribute when\n   the Printer
            doesn't support the requested value).\n"
          title: 11.2.6.2.1.  "notify-lease-duration" (integer(0:MAX))
        title: 11.2.6.2.  Renew-Subscription Response
      title: 11.2.6.  Renew-Subscription operation
    - contents:
      - "11.2.7.  Cancel-Subscription operation\n   This operation allows a client
        to delete a Subscription Object and\n   stop the Printer from delivering more
        Event Notifications.  Once\n   performed, there is no way to reference the
        Subscription Object.\n   A Printer MUST supported this operation.\n   The
        Printer MUST accept this request in any of the target Printer's\n   states,
        i.e., 'idle', 'processing', or 'stopped', but MUST NOT change\n   the Printer's
        \"printer-state\" attribute.\n   If the specified Subscription Object is a
        Per-Job Subscription\n   Object, the Printer MUST accept this request in any
        of the target\n   Job's states, but MUST NOT change the Job's \"job-state\"
        attribute or\n   affect the Job.\n   Note:  There is no way to change any
        attributes on a Subscription\n   Object, except the \"notify-lease-duration\"
        attribute (using the\n   Renew-Subscription operation).  In order to change
        other attributes,\n   a client performs a Subscription Creation Operation
        and Cancel-\n   Subscription operation on the old Subscription Object.  If
        the client\n   wants to avoid missing Event Notifications, it performs the\n
        \  Subscription Creation Operation first.  If this order would create\n   too
        many Subscription Objects on the Printer, the client reverses the\n   order.\n
        \  Access Rights: The authenticated user (see [RFC2911] section 8.3)\n   performing
        this operation MUST (1) be the owner of the Subscription\n   Object, (2) have
        Operator or Administrator access rights for the\n   Printer (see [RFC2911]
        sections 1 and 8.5), or (3) be otherwise\n   authorized by the Printer's administrator-configured
        security policy\n   to cancel the target Subscription Object.  Otherwise,
        the Printer\n   MUST reject the operation and return: the 'client-error-forbidden',\n
        \  'client-error-not-authenticated', or 'client-error-not-authorized'\n   status
        code as appropriate.\n"
      - contents:
        - "11.2.7.1.  Cancel-Subscription Request\n   The following groups of attributes
          are part of the Cancel-\n   Subscription Request:\n   Group 1: Operation
          Attributes\n   Natural Language and Character Set:\n      The \"attributes-charset\"
          and \"attributes-natural-language\"\n      attributes as described in [RFC2911]
          section 3.1.4.1.\n   Target:\n      The \"printer-uri\" attribute which
          defines the target for this\n      operation as described in [RFC2911] section
          3.1.5.\n   Requesting User Name:\n      The \"requesting-user-name\" attribute
          SHOULD be supplied by the\n      client as described in [RFC2911] section
          8.3.\n"
        - contents:
          - "11.2.7.1.1.  \"notify-subscription-id\" (integer (1:MAX))\n   The client
            MUST supply this attribute.  The Printer MUST support this\n   attribute.
            \ This attribute specifies the Subscription Object that the\n   Printer
            MUST cancel.  If the client omits this attribute, the Printer\n   MUST
            reject this request with the 'client-error-bad-request' status\n   code.\n"
          title: 11.2.7.1.1.  "notify-subscription-id" (integer (1:MAX))
        title: 11.2.7.1.  Cancel-Subscription Request
      - contents:
        - "11.2.7.2.  Cancel-Subscription Response\n   The Printer returns the following
          sets of attributes as part of the\n   Cancel-Subscription Response:\n   Group
          1: Operation Attributes\n   Status Message:\n      Same as [RFC2911].\n
          \        The following are some of the status codes returned (see\n         [RFC2911]:\n
          \        successful-ok: The operation successfully canceled\n            (deleted)
          the Subscription Object.\n         client-error-not-found: The operation
          failed because the\n            \"notify-subscription-id\" Operation attribute
          identified a\n            non-existent Subscription Object.\n   Natural
          Language and Character Set:\n      The \"attributes-charset\" and \"attributes-natural-language\"\n
          \     attributes as described in [RFC2911] section 3.1.4.2.  The\n      \"attributes-natural-language\"
          MAY be the natural language of the\n      Subscription Object, rather than
          the one requested.\n   Group 2: Unsupported Attributes\n      See [RFC2911]
          section 3.1.7 for details on returning Unsupported\n      Attributes.\n"
        title: 11.2.7.2.  Cancel-Subscription Response
      title: 11.2.7.  Cancel-Subscription operation
    title: 11.2.  Other Operations
  title: 11.  Operations for Notification
- contents:
  - "12.  Status Codes\n   The following status codes are defined as extensions for
    Notification\n   and are returned as the value of the \"status-code\" parameter
    in the\n   Operation Attributes Group of a response (see [RFC2911] section\n   3.1.6.1).
    \ Operations in this document can also return the status\n   codes defined in
    section 13 of [RFC2911].  The 'successful-ok' status\n   code is an example of
    such a status code.\n"
  - contents:
    - "12.1.  successful-ok-ignored-subscriptions (0x0003)\n   The Subscription Creation
      Operation was unable to create all\n   requested Subscription Objects.\n   For
      a Create-Job-Subscriptions or Create-Printer-Subscriptions\n   operation, this
      status code means that the Printer created one or\n   more Subscription Objects,
      but not all requested Subscription\n   Objects.\n   For a Job Creation operation,
      this status code means that the Printer\n   created the Job along with zero
      or more Subscription Objects.  The\n   Printer returns this status code even
      if other job attributes are\n   unsupported or in conflict.  That is, if an
      IPP Printer finds a\n   warning that would allow it to return 'successful-ok-ignored-\n
      \  subscriptions' and either 'successful-ok-ignored-or-substituted-\n   attributes'
      and/or 'successful-ok-conflicting-attributes', it MUST\n   return 'successful-ok-ignored-subscriptions'.\n"
    title: 12.1.  successful-ok-ignored-subscriptions (0x0003)
  - contents:
    - "12.2.  client-error-ignored-all-subscriptions (0x0414)\n   This status code
      is the same as 'successful-ok-ignored-subscriptions'\n   except that only the
      Create-Job-Subscriptions and Create-Printer-\n   Subscriptions operation return
      it.  They return this status code only\n   when the Printer creates zero Subscription
      Objects.\n"
    title: 12.2.  client-error-ignored-all-subscriptions (0x0414)
  title: 12.  Status Codes
- contents:
  - "13.  Status Codes in Subscription Attributes Groups\n   This section contains
    values of the \"notify-status-code\" (type2 enum)\n   attribute that the Printer
    returns in a Subscription Attributes Group\n   in a response when the corresponding
    Subscription Object:\n   1. is not created or\n   2. is created and some of the
    client-supplied attributes are not\n      supported.\n   The following sections
    are ordered in decreasing order of importance\n   of the status-codes.\n"
  - contents:
    - "13.1.  client-error-uri-scheme-not-supported (0x040C)\n   This status code
      is defined in [RFC2911].  This document extends its\n   meaning and allows it
      to be in a Subscription Attributes Group of a\n   response.\n   The scheme of
      the client-supplied URI in a \"notify-recipient-uri\"\n   Subscription Template
      Attribute in a Subscription Creation Operation\n   is not supported.  See section
      5.3.1.\n"
    title: 13.1.  client-error-uri-scheme-not-supported (0x040C)
  - contents:
    - "13.2.  client-error-attributes-or-values-not-supported (0x040B)\n   This status
      code is defined in [RFC2911].  This document extends its\n   meaning and allows
      it to be in a Subscription Attributes Group of a\n   response.\n   The method
      of the client-supplied keyword in a \"notify-pull-method\"\n   Subscription
      Template Attribute in a Subscription Creation Operation\n   is not supported.
      \ See section 5.3.2.\n"
    title: 13.2.  client-error-attributes-or-values-not-supported (0x040B)
  - contents:
    - "13.3.  client-error-too-many-subscriptions (0x0415)\n   The number of Subscription
      Objects supported by the Printer would be\n   exceeded if this Subscription
      Object were created (see section 5.2).\n"
    title: 13.3.  client-error-too-many-subscriptions (0x0415)
  - contents:
    - "13.4.  successful-ok-too-many-events (0x0005)\n   The client supplied more
      Events in the \"notify-events\" operation\n   attribute of a Subscription Creation
      Operation than the Printer\n   supports, as indicated in its \"notify-max-events-supported\"
      Printer\n   attribute (see section 5.3.3).\n"
    title: 13.4.  successful-ok-too-many-events (0x0005)
  - contents:
    - "13.5.  successful-ok-ignored-or-substituted-attributes (0x0001)\n   This status
      code is defined in [RFC2911].  This document extends its\n   meaning to include
      unsupported Subscription Template Attributes and\n   it can appear in a Subscription
      Attributes Group.\n"
    title: 13.5.  successful-ok-ignored-or-substituted-attributes (0x0001)
  title: 13.  Status Codes in Subscription Attributes Groups
- contents:
  - "14.  Encodings of Additional Attribute Tags\n   This section assigns values to
    two attributes tags as extensions to\n   the encoding defined in [RFC2910]).\n
    \  The \"subscription-attributes-tag\" delimits Subscription Template\n   Attributes
    Groups in requests and Subscription Attributes Groups in\n   responses.\n   The
    \"event-notification-attributes-tag\" delimits Event Notifications\n   in Delivery
    Methods that use an IPP-like encoding.\n   The following table specifies the values
    for the delimiter tags:\n      Tag Value (Hex)   Meaning\n      0x06              \"subscription-attributes-tag\"\n
    \     0x07              \"event-notification-attributes-tag\"\n"
  title: 14.  Encodings of Additional Attribute Tags
- contents:
  - "15.  Conformance Requirements\n   It is OPTIONAL for IPP clients and Printers
    to implement this Event\n   Notification specification.\n"
  - contents:
    - "15.1.  Conformance requirements for clients\n   If this Event Notification
      specification is implemented by a client,\n   the client MUST support the 'ippget'
      Pull Delivery Method and meet\n   the conformance requirements as defined in
      [RFC3996] for clients.  A\n   client MAY support additional Delivery Methods.\n"
    title: 15.1.  Conformance requirements for clients
  - contents:
    - "15.2.  Conformance requirements for Printers\n   If this Event Notification
      specification is implemented by a Printer,\n   the Printer MUST:\n   -  meet
      the Conformance Requirements detailed in section 5 of\n      [RFC2911].\n   -
      \ support the Subscription Template Attributes Group in requests and\n      the
      Subscription Attributes Group in responses.\n   -  support all of the following
      attributes:\n      a. REQUIRED Subscription Object attributes in section 5.\n
      \     b. REQUIRED Printer Description object attributes in section 6.\n      c.
      REQUIRED attributes in Event Notification content in section 8.\n   -  support
      the 'ippget' Pull Delivery Method and meet the conformance\n      requirements
      as defined in [RFC3996] for Printers.  The Printer\n      MAY support additional
      Push and Pull Delivery Methods.\n   -  deliver Event Notifications that conform
      to the requirements of\n      section 9 and the requirements of the Delivery
      Method Document for\n      each supported Delivery Method (the conformance requirements
      for\n      Delivery Method Documents is specified in section 10).\n   -  for
      all of the Job Creation Operations that the Printer supports,\n      MUST support
      the REQUIRED extensions for notification defined in\n      section 11.1.3.\n
      \  -  meet the conformance requirements for operations as described in\n      Table
      16 and meet the requirements for Printers as specified in\n      the indicated
      sub-sections of section 11:\n   Table 16 - Printer Conformance Requirements
      for Operations\n   Operation                                         Printer\n
      \                                                    Conformance\n                                                     Requirements\n
      \  Create-Printer-Subscriptions (section 11.1.2)     REQUIRED\n   Create-Job-Subscriptions
      (section 11.1.1)         OPTIONAL\n   Get-Subscription-Attributes (section 11.2.3)
      \     REQUIRED\n   Get-Subscriptions (section 11.2.5)                REQUIRED\n
      \  Renew-Subscription (section 11.2.6)               REQUIRED\n   Cancel-Subscription
      (section 11.2.7)              REQUIRED\n"
    title: 15.2.  Conformance requirements for Printers
  title: 15.  Conformance Requirements
- contents:
  - "16.  Model for Notification with Cascading Printers (Informative)\n   With this
    model (see Figure 2 below), there is an intervening Print\n   server between the
    human user and the output-device.  So the system\n   effectively has two Printer
    objects.  There are two cases to\n   consider.\n   1. When the Printer 1 (in the
    server) generates Events, the system\n      behaves like the client and Printer
    in Figure 1.  In this case,\n      Printer 1 delivers Event Notifications that
    are shown as Event\n      Notifications (A) of  Figure 2.\n   2. When the Printer
    2 (in the output-device) generates Events, there\n      are two possible system
    configurations:\n      a) Printer 1 forwards the client-supplied Subscription
    Creation\n         Operations to the downstream Printer 2 and lets Printer 2\n
    \        deliver the Event Notifications directly to the Notification\n         Recipients
    supplied by the Client (Event Notifications(C) in\n         the diagram).\n      b)
    Printer 1 performs the client-supplied Subscription Creation\n         Operations
    and also forwards the Subscription Creation\n         Operations to Printer 2
    with the Notification Recipient changed\n         to be the Printer 1.  When an
    Event occurs in Printer 2,\n         Printer 2 delivers the Event Notification
    (B) to Notification\n         Recipient of Printer 1, which relays the received
    Event\n         Notification (B) to the client-supplied Notification Recipient\n
    \        (as Event Notifications(A) in the diagram).  Note, when a\n         client
    performs a Subscription Creation Operation, Printer 1\n         need not forward
    the Subscription Creation Operation to Printer\n         2 if it would create
    a duplicate Subscription Object on Printer\n         2.\n   Note: when Printer
    1 is forwarding Subscription Creation Operations\n   to Printer 2, it may request
    Printer 2 to create additional\n   Subscription Objects (called \"piggy-backing\").
    \ Piggy-backing is\n   useful when:\n   -  Device A is configured to accept (IPP
    or non-IPP) requests from\n      other servers.\n   -  Server S wants to receive
    Job Events that the client didn't\n      request and Server S wants these Events
    for jobs it submits and\n      not for other jobs.\n                              server
    S                       device A\n                           +------------+                 +------------+\n
    \                          |            |                 |            |\n   +--------+
    Subscription | ###########|                 | ###########|\n   | client |--Creation
    ----># Printer #|  Subscription   | # Printer #|\n   +--------+  Operation   |
    # Object 1#|---Creation------|># Object 2#|\n                           | ###|#######|
    \  Operation     | ####|#|####|\n                           +----|---^---+                 +-----|-|----+\n
    \  +--------+     Event         |   |                           | |\n   |Notific-|<-Notifications(A)-+
    \  +-- Event Notifications(B)--+ |\n   |ation Re|<-------------Event Notifications(C)-----------------+\n
    \  |cipient |\n   +--------+\n         Figure 2 - Model for Notification with
    Cascading Printers\n"
  title: 16.  Model for Notification with Cascading Printers (Informative)
- contents:
  - "17.  Distributed Model for Notification (Informative)\n   A Printer implementation
    could use some other remote notification\n   server to provide some or most of
    the service.  For example, the\n   remote notification server could deliver Event
    Notifications using\n   Delivery Methods that are not directly supported by the
    output device\n   or Printer object.  Or, the remote notification server could
    store\n   Subscription Objects (passed to it from the output device in response\n
    \  to Subscription Creation requests), accept Events, format the Event\n   Notification
    in the natural language of the Notification Recipient,\n   and deliver the Event
    Notifications to the Notification Recipient(s).\n   Figure 3 shows this partitioning.
    \ The interface between the output\n   device (or Printer object) and the remote
    notification server is\n   outside the scope of this document and is intended
    to be transparent\n   to the client and this document.\n                                            ***********************\n
    \                                           *\n                                            *
    Printer in combination\n                                            * with the
    distributed\n                                            * Notification Server)\n
    \                                           *\n                                            *
    output device or server\n                                            * +---------------+\n
    \     PDA, desktop, or server               * +  ###########  +\n           +--------+
    \                      * |  #         #  |\n           | client |---IPP Subscription-------->#
    Printer #  |\n           +--------+   Creation operation  * |  # Object  #  |\n
    \                                           * |  #####|#####  |\n                                            *
    +-------|-------+\n                                            *         | Subscriptions\n
    \                                           *         | OR Event\n        +------------+
    \                     *         | Notifications\n        |Notification|   IPP-defined
    \       *  +------v--------+\n        |Recipient   |<--Event Notifications---|
    Notification  |\n        +------------+                      *  | Server        |\n
    \                                           *  +---------------+\n                                            *\n
    \                                           *************************\n   ***
    = Implementation configuration opaque boundary\n     Figure 3 - Opaque Use of
    a Notification Server Transparent to the\n                                  Client\n"
  title: 17.  Distributed Model for Notification (Informative)
- contents:
  - "18.  Extended Notification Recipient (Informative)\n   The model allows for an
    extended Notification Recipient that is\n   itself a notification server that
    forwards each Event Notification to\n   another recipient (called the Ultimate
    Notification Recipient in this\n   section).  The Delivery Method to the Ultimate
    Recipient is probably\n   different from the Delivery Method used by the Printer
    to the\n   extended Notification Recipient.\n   This extended Notification Recipient
    is transparent to the Printer\n   but not to the client.\n   When a client performs
    a Subscription Creation Operation, it\n   specifies the extended Notification
    Recipient as it would any\n   Notification Recipient.  In addition, the client
    specifies the\n   Ultimate Notification Recipient in the Subscription Creation\n
    \  Operation in a manner specified by the extended Notification\n   Recipient.
    \ Typically, it is either some bytes in the value of\n   \"notify-user-data\"
    or some additional parameter in the value of\n   \"notify-recipient-uri\".  The
    client also subscribes directly with the\n   extended Notification Recipient (by
    means outside this document),\n   since it is a notification server in its own
    right.\n   The IPP Printer treats the extended Notification Recipient like any\n
    \  other Notification Recipient and the IPP Printer is not aware of the\n   forwarding.
    \ The Delivery Method that the extended Notification\n   Recipient uses for delivering
    the Event Notification to the Ultimate\n   Notification Recipient is beyond the
    scope of this document and is\n   transparent to the IPP Printer.\n   Examples
    of this extended Notification Recipient are paging,\n   immediate messaging services,
    general notification services, and NOS\n   vendors' infrastructure.  Figure 4
    shows this approach.\n      PDA, desktop, or server                    server
    or output device\n                                                      +---------------+\n
    \         +--------+                                  |  ###########  |\n          |
    client |---Subscription Creation -----------># Printer #  |\n          +--------+
    \      Operation                  |  # Object  #  |\n                                                      |
    \ #####|#####  |\n   +------------+     +------------+   IPP-defined    +-------|-------+\n
    \  |Ultimate    | any |Notification|<--Event Notifications----+\n   |Notification|<----|Recipient
    \  |\n   |Recipient   |     +------------+\n   +------------+     (Notification
    Server)\n    Figure 4 - Use of an Extended Notification Recipient transparent
    to\n                                the Printer\n"
  title: 18.  Extended Notification Recipient (Informative)
- contents:
  - "19.  Object Model for Notification (Normative)\n   This section describes the
    Notification object model that adds a\n   Subscription Object which together with
    the Job and Printer object\n   provide the complete Notification semantics.\n
    \  The object relationships can be seen pictorially as:\n   Subscription Objects
    (Per-Printer Subscriptions)     Printer object\n   +----+                                               +------------+\n
    \  | s1 |<--------------------------------------------->|            |\n   +----++
    \                                             |            |\n    | s2 |<-------------------------------------------->|
    \    p1     |\n    +----++                                             |            |\n
    \    | s3 |<------------------------------------------->|            |\n     +----+
    \                                            +------------+\n                    Job
    objects\n                    +---------+\n                    |         |\n     +----+
    \        |   j1    |\n     | s4 |<------->|         |\n     +----+         |         |\n
    \                   |         |    s4 is a Per-Job Subscription Object\n                    ++--------++\n
    \                    |         |\n       +----+        |   j2    |\n       | s5
    |<------>|         |\n       +----++       |         |\n        | s6 |<----->|
    \        |    s5 and s6 are Per-Job Subscription\n        +----+       ++--------++
    \                 Objects\n                      |         |\n                      |
    \  j3    |\n                      |         |\n                      |         |
    \        <----> indicates association\n                      +---------+\n               Figure
    5 - Object Model for Notification\n   s1, s2, and s3 are Per-Printer Subscription
    Objects and can identify\n   Printer and/or Job Events.\n   s4, s5, and s6 are
    Per-Job Subscription Objects and can identify\n   Printer and/or Job Events.\n"
  - contents:
    - "19.1.  Object relationships\n   This sub-section defines the object relationships
      between the\n   Printer, Job, and Subscription Objects by example.  Whether
      Per-\n   Printer Subscription Objects are actually contained in a Printer\n
      \  object or are just bi-directionally associated with them in some way\n   is
      IMPLEMENTATION DEPENDENT and is transparent to the client.\n   Similarly, whether
      Per-Job Subscription Objects are actually\n   contained in a Job object or are
      just bi-directionally associated\n   with them in some way is IMPLEMENTATION
      DEPENDENT and is transparent\n   to the client.  The object relationships are
      defined as follows:\n"
    title: 19.1.  Object relationships
  - contents:
    - "19.2.  Printer Object and Per-Printer Subscription Objects\n   1. The Printer
      object contains (is associated with) zero or more\n      Per-Printer Subscription
      Objects (p1 contains s1-s3 Per-Printer\n      Subscription Objects).\n   2.
      Each Per-Printer Subscription Object (s1, s2, and s3) is contained\n      in
      (or is associated with) exactly one Printer object (p1).\n"
    title: 19.2.  Printer Object and Per-Printer Subscription Objects
  - contents:
    - "19.3.  Job Object and Per-Job Subscription Objects\n   1. A Job object (j1,
      j2, j3) is associated with zero or more Per-Job\n      Subscription Objects
      (s4-s6).  Job j1 is associated with Per-Job\n      Subscription Object s4, Job
      j2 is associated with Per-Job\n      Subscription Objects s5 and s6, and Job
      j3 is not associated with\n      any Per-Job Subscription Object.\n   2. Each
      Per-Job Subscription Object is associated with exactly one\n      Job object.\n"
    title: 19.3.  Job Object and Per-Job Subscription Objects
  title: 19.  Object Model for Notification (Normative)
- contents:
  - "20.  Per-Job versus Per-Printer Subscription Objects (Normative)\n   Per-Job
    and Per-Printer Subscription Objects are quite similar.\n   Either type of Subscription
    Object can subscribe to Job Events,\n   Printer Events, or both.  Both types of
    Subscription Objects can be\n   queried using the Get-Subscriptions and Get-Subscription-Attributes\n
    \  operations and canceled using the Cancel-Subscription operation.\n   Both types
    of Subscription Objects create Subscription Objects which\n   have the same Subscription
    Object attributes defined.  However, there\n   are some semantic differences between
    Per-Job Subscription Objects\n   and Per-Printer Subscription Objects.  A Per-Job
    Subscription Object\n   is established by the client when submitting a job and
    after creating\n   the job using the Create-Job-Subscriptions operation by specifying\n
    \  the \"job-id\" of the Job with the \"notify-job-id\" attribute.  A Per-\n   Printer
    Subscription Object is established between a client and a\n   Printer using the
    Create-Printer-Subscriptions operation.  Some\n   specific differences are:\n
    \  1. A client usually creates one or more Per-Job Subscription Objects\n      as
    part of the Job Creation operations (Create-Job, Print-Job, and\n      Print-URI),
    rather than using the OPTIONAL Create-Job-\n      Subscriptions operation, especially
    since Printer implementations\n      NEED NOT support the Create-Job-Subscriptions
    operation, since it\n      is OPTIONAL.\n   2. For Per-Job Subscription Objects,
    the Subscription Object is only\n      valid while the job is \"not-complete\"
    (see sections 5.4.3) while\n      for the Per-Printer Subscription Objects, the
    Subscription Object\n      is valid until the time (in seconds) that the Printer
    returned in\n      the \"notify-lease-expiration-time\" operation attribute.\n
    \  3. Job Events in a Per-Job Subscription Object apply only to \"one\n      job\"
    (the Job created by the Job Creation operation or references\n      by the Create-Job-Subscriptions
    operation) while Job Events in a\n      Per-Printer Subscription Object apply
    to ALL jobs contained in the\n      IPP Printer.\n"
  title: 20.  Per-Job versus Per-Printer Subscription Objects (Normative)
- contents:
  - "21.  Normative References\n   [RFC2119]         Bradner, S., \"Key words for
    use in RFCs to Indicate\n                     Requirement Levels\", BCP 14, RFC
    2119 , March 1997.\n   [RFC2396]         Berners-Lee, T., Fielding, R., and L.
    Masinter,\n                     \"Uniform Resource Identifiers (URI): Generic\n
    \                    Syntax\", RFC 2396, August 1998.\n   [RFC2717]         Petke,
    R. and I. King, \"Registration Procedures for\n                     URL Scheme
    Names\", RFC 2717, November 1999.\n   [RFC2910]         Herriot, R., Butler, S.,
    Moore, P., and R. Turner,\n                     \"Internet Printing Protocol/1.1:
    Encoding and\n                     Transport\", RFC 2910, September 2000.\n   [RFC2911]
    \        deBry, R., Hastings, T., Herriot, R., Isaacson, S.,\n                     and
    P. Powell, \"Internet Printing Protocol/1.1:\n                     Model and Semantics\",
    RFC 2911, September 2000.\n   [RFC3381]         Hastings, T., Lewis, H., and R.
    Bergman, \"IPP: Job\n                     Progress Attributes\", RFC 3381,  September
    2002.\n   [RFC3996]         Herriot, R., Hastings, T., and H. Lewis, \"Internet\n
    \                    Printing Protocol (IPP): The 'ippget' Delivery\n                     Method
    for Event Notifications\", RFC 3996, March\n                     2005.\n"
  title: 21.  Normative References
- contents:
  - "22.  Informative References\n   [IANA-CON]        Narten, T. and H. Alvestrand,
    \"Guidelines for\n                     Writing an IANA Considerations Section
    in RFCs\",\n                     BCP 26, RFC 2434, October 1998.\n   [RFC2565]
    \        Herriot, R., Butler, S., Moore, P., and R. Turner,\n                     \"Internet
    Printing Protocol/1.0: Encoding and\n                     Transport\", RFC 2565,
    April 1999.\n   [RFC2566]         deBry, R., Hastings, T., Herriot, R., Isaacson,
    S.,\n                     and P. Powell, \"Internet Printing Protocol/1.0:\n                     Model
    and Semantics\", RFC 2566, April 1999.\n   [RFC2567]         Wright, D., \"Design
    Goals for an Internet Printing\n                     Protocol\", RFC 2567, April
    1999.\n   [RFC2568]         Zilles, S., \"Rationale for the Structure and Model\n
    \                    and Protocol for the Internet Printing Protocol\",\n                     RFC
    2568, April 1999.\n   [RFC2569]         Herriot, R., Hastings, T., Jacobs, N.,
    and J.\n                     Martin, \"Mapping between LPD and IPP Protocols\",\n
    \                    RFC 2569, April 1999.\n   [RFC2616]         Fielding, R.,
    Gettys, J., Mogul, J., Frystyk, H.,\n                     Masinter, L., Leach,
    P., and T. Berners-Lee,\n                     \"Hypertext Transfer Protocol -
    HTTP/1.1\", RFC 2616,\n                     June 1999.\n   [RFC3196]         Hastings,
    T., Manros, C., Zehler, P., Kugler, C.,\n                     and H. Holst, \"Internet
    Printing Protocol/1.1:\n                     Implementer's Guide\", RFC 3196,
    November 2001.\n   [RFC3997]         Hastings, T., Editor, deBry, R., and H. Lewis,\n
    \                    \"Internet Printing Protocol (IPP): Requirements for\n                     IPP
    Notifications\", RFC 3997, March 2005.\n"
  title: 22.  Informative References
- contents:
  - "23.  IANA Considerations\n   This section contains the registration information
    that IANA added to\n   the IPP Registry according to the procedures defined in
    RFC 2911\n   [RFC2911] section 6 to cover the definitions in this document.  In\n
    \  addition, this section defines how Events and Delivery Methods will\n   be
    registered when they are defined in other documents.  The\n   resulting registrations
    have been published in the\n   http://www.iana.org/assignments/ipp-registrations
    registry.\n"
  - contents:
    - "23.1.  Attribute Registrations\n   The following table lists all the attributes
      defined in this\n   document.  These have been registered according to the procedures
      in\n   RFC 2911 [RFC2911] section 6.2.\n   Subscription Template attributes:
      \                Reference  Section\n   ---------------------------------                 ---------
      \ -------\n   notify-attributes (1setOf type2 keyword)          [RFC3995]  5.3.4\n
      \  notify-attributes-supported (1setOf type2 keyword)\n                                                     [RFC3995]
      \ 5.3.4.1\n   notify-charset (charset)                          [RFC3995]  5.3.6\n
      \  notify-events (1setOf type2 keyword)              [RFC3995]  5.3.3\n   notify-events-default
      (1setOf type2 keyword)      [RFC3995]  5.3.3.1\n   notify-events-supported (1setOf
      type2 keyword)    [RFC3995]  5.3.3.2\n   notify-lease-duration (integer(0:67108863))
      \      [RFC3995]  5.3.8\n   notify-lease-duration-default (integer(0:67108863))\n
      \                                                    [RFC3995]  5.3.8.1\n   notify-lease-duration-supported
      (1setOf (integer(0: 67108863) |\n          rangeOfInteger(0:67108863)))               [RFC3995]
      \ 5.3.8.2\n   notify-max-events-supported (integer(2:MAX))      [RFC3995]  5.3.3.3\n
      \  notify-natural-language (naturalLanguage)         [RFC3995]  5.3.7\n   notify-pull-method
      (type2 keyword)                [RFC3995]  5.3.2\n   notify-pull-method-supported
      (1setOf type2 keyword)\n                                                     [RFC3995]
      \ 5.3.2.1\n   notify-recipient-uri (uri)                        [RFC3995]  5.3.1\n
      \  notify-schemes-supported  (1setOf uriScheme)      [RFC3995]  5.3.1.1\n   notify-time-interval
      (integer(0:MAX))             [RFC3995]  5.3.9\n   notify-user-data (octetString(63))
      \               [RFC3995]  5.3.5\n   Subscription Description Attributes:\n
      \  notify-job-id (integer(1:MAX))                    [RFC3995]  5.4.6\n   notify-lease-expiration-time
      (integer(0:MAX))     [RFC3995]  5.4.3\n   notify-printer-up-time (integer(1:MAX))
      \          [RFC3995]  5.4.4\n   notify-printer-uri (uri)                          [RFC3995]
      \ 5.4.5\n   notify-sequence-number (integer (0:MAX))          [RFC3995]  5.4.2\n
      \  notify-subscriber-user-name (name(MAX))           [RFC3995]  5.4.7\n   notify-subscription-id
      \ (integer (1:MAX))         [RFC3995]  5.4.1\n   Printer Description Attributes:\n
      \  printer-state-change-date-time (dateTime)         [RFC3995]  6.2\n   printer-state-change-time
      (integer(1:MAX))        [RFC3995]  6.1\n   Attributes Only in Event Notifications\n
      \  notify-subscribed-event (type2 keyword)           [RFC3995]  8.1\n   notify-text
      (text(MAX))                           [RFC3995]  8.2\n"
    title: 23.1.  Attribute Registrations
  - contents:
    - "23.2.  Additional Enum Attribute Value Registrations within the IPP\n       registry\n
      \  The following table lists all the new enum attribute values defined\n   in
      this document.  These have been registered within the IPP registry\n   according
      to the procedures in RFC 2911 [RFC2911] section 6.1.\n   Attribute\n     Value
      \     Name                                 Reference   Section\n     ------
      \    -----------------------------        ---------   -------\n   operations-supported
      (1setOf type2 enum)          [RFC2911]   4.4.15\n     0x0016     Create-Printer-Subscriptions
      \        [RFC3995]   7.1\n     0x0017     Create-Job-Subscriptions             [RFC3995]
      \  7.1\n     0x0018     Get-Subscription-Attributes          [RFC3995]   7.1\n
      \    0x0019     Get-Subscriptions                    [RFC3995]   7.1\n     0x001A
      \    Renew-Subscription                   [RFC3995]   7.1\n     0x001B     Cancel-Subscription
      \                 [RFC3995]   7.1\n"
    title: 23.2.  Additional Enum Attribute Value Registrations within the IPP
  - contents:
    - "23.3.  Operation Registrations\n   The following table lists all of the operations
      defined in this\n   document.  These have been registered according to the procedures
      in\n   RFC 2911 [RFC2911] section 6.4.\n   Operation Name                                    Reference
      \  Section\n   ---------------------------------                 ---------   -------\n
      \  Cancel-Subscription                               [RFC3995]   11.2.7\n   Create-Job
      - Extensions                           [RFC3995]   11.1.3\n   Create-Job-Subscriptions
      \                         [RFC3995]   11.1.1\n   Create-Printer-Subscriptions
      \                     [RFC3995]   11.1.2\n   Get-Printer-Attributes - Extensions
      \              [RFC3995]   11.2.3\n   Get-Subscription-Attributes                       [RFC3995]
      \  11.2.4\n   Get-Subscriptions                                 [RFC3995]   11.2.5\n
      \  Print-Job - Extensions                            [RFC3995]   11.1.3\n   Print-URI
      - Extensions                            [RFC3995]   11.1.3\n   Renew-Subscription
      \                               [RFC3995]   11.2.6\n   Validate-Job Operation
      - Extensions               [RFC3995]   11.2.2\n"
    title: 23.3.  Operation Registrations
  - contents:
    - "23.4.  Status code Registrations\n   The following table lists all the status
      codes defined in this\n   document.  These have been registered according to
      the procedures in\n   RFC 2911 [RFC2911] section 6.6.\n   Value    Status Code
      Name                        Reference  Section\n   -----    ----------------------------
      \           ---------  -------\n   0x0000:0x00FF - Successful:\n   0x0003   successful-ok-ignored-subscriptions
      \    [RFC3995]  12.1\n   0x0005   successful-ok-too-many-events           [RFC3995]
      \ 13.4\n   0x0400:0x04FF - Client Error:\n   0x0414   client-error-ignored-all-subscriptions
      \ [RFC3995]  12.2\n   0x0415   client-error-too-many-subscriptions     [RFC3995]
      \ 13.3\n"
    title: 23.4.  Status code Registrations
  - contents:
    - "23.5.  Attribute Group tag Registrations\n   The following table lists all
      the attribute group tags defined in\n   this document.  These have been registered
      according to the\n   procedures in RFC 2911 [RFC2911] section 6.5.\n   Value
      \   Attribute Group Tag Name                 Reference  Section\n   -----    --------------------------------
      \        --------   -------\n   0x06     subscription-attributes-tag              [RFC3995]
      \ 14\n   0x07     event-notification-attributes-tag        [RFC3995]  14\n"
    title: 23.5.  Attribute Group tag Registrations
  - contents:
    - "23.6.  Registration of Events\n   The following table lists all the Events
      defined in this document as\n   type2 keywords to be used with the \"notify-events\",
      \"notify-events-\n   default\", and \"notify-events-supported\" Subscription
      Template\n   attributes (see section 5.3.3)).  Rather than creating a separate\n
      \  section in the IPP Registry for Events, these event keywords have\n   been
      registered according to the procedures of [RFC2911] section 7.1\n   as additional
      keyword attribute values for use with the \"notify-\n   events\" Subscription
      Template attribute (see section 5.3.3), i.e.,\n   registered as keyword values
      for the \"notify-events\", \"notify-\n   events-default\", and \"notify-events-supported\"
      attributes:\n   Attribute (attribute syntax)\n     Value                                          Reference
      \ Section\n     ---------------------                          ---------  -------\n
      \  notify-events (1setOf type2 keyword)             [RFC3995]  5.3.3\n   notify-events-default
      (1setOf type2 keyword)     [RFC3995]  5.3.3.1\n   notify-events-supported (1setOf
      type2 keyword)   [RFC3995]  5.3.3.2\n   notify-subscribed-event (type2 keyword)
      \         [RFC3995]  8.1\n     No Events:\n       none                                         [RFC3995]
      \ 5.3.3.4.1\n     Printer Events:\n       printer-state-changed                        [RFC3995]
      \ 5.3.3.4.2\n       printer-restarted                            [RFC3995]  5.3.3.4.2\n
      \      printer-shutdown                             [RFC3995]  5.3.3.4.2\n       printer-stopped
      \                             [RFC3995]  5.3.3.4.2\n       printer-config-changed
      \                      [RFC3995]  5.3.3.4.2\n       printer-media-changed                        [RFC3995]
      \ 5.3.3.4.2\n       printer-finishings-changed                   [RFC3995]  5.3.3.4.2\n
      \      printer-queue-order-changed                  [RFC3995]  5.3.3.4.2\n     Job
      Events:\n       job-state-changed                            [RFC3995]  5.3.3.4.3\n
      \      job-created                                  [RFC3995]  5.3.3.4.3\n       job-completed
      \                               [RFC3995]  5.3.3.4.3\n       job-stopped                                  [RFC3995]
      \ 5.3.3.4.3\n       job-config-changed                           [RFC3995]  5.3.3.4.3\n
      \      job-progress                                 [RFC3995]  5.3.3.4.3\n"
    title: 23.6.  Registration of Events
  - contents:
    - "23.7.  Registration of Event Notification Delivery Methods\n   This section
      describes the requirements and procedures for\n   registration and publication
      of Event Notification Delivery Methods\n   and for the submission of such proposals.\n"
    - contents:
      - "23.7.1.  Requirements for Registration of Event Notification Delivery\n         Methods\n
        \  Registered IPP Event Notification Delivery Methods are expected to\n   follow
        a number of requirements described below.\n"
      - contents:
        - "23.7.1.1.  Required Characteristics\n   A Delivery Method Document MUST
          either (1) contain all of the\n   semantics of the Delivery Method or (2)
          contain the IPP Delivery\n   Method registration requirements and a profile
          of some other protocol\n   that in combination is the Delivery Method (e.g.,
          mailto).  The\n   Delivery Method Document (and any documents it requires)
          MUST define\n   either (1) a URL for a Push Delivery Method that the meets
          the\n   requirements of [RFC2717].  or (2) a keyword for a Pull Delivery\n
          \  method.\n   IPP Event Notification Delivery Method Documents MUST meet
          the\n   requirements of this document (see sections 9 and 10).\n   In addition,
          a Delivery Method Document MUST contain the following\n   information:\n
          \     Type of registration:  IPP Event Notification Delivery Method\n      Name
          of this delivery method:\n      Proposed URL scheme name of this Push Delivery
          Method or the\n      keyword name of this Pull Delivery Method:\n      Name
          of proposer:\n      Address of proposer:\n      Email address of proposer:\n
          \     Is this delivery method REQUIRED or OPTIONAL for conformance to\n
          \     the IPP Event Notification and Subscriptions document:\n      Is this
          delivery method defining Machine Consumable and/or Human\n      Consumable
          content:\n"
        title: 23.7.1.1.  Required Characteristics
      - contents:
        - "23.7.1.2.  Naming Requirements\n   Exactly one (URL scheme or keyword)
          name MUST be assigned to each\n   Delivery Method.\n   Each assigned name
          MUST uniquely identify a single Delivery Method.\n   All Push Delivery Method
          names MUST conform to the rules for URL\n   scheme names, according to [RFC2396]
          and [RFC2717] for schemes in the\n   IETF tree.  All Pull Delivery Method
          names MUST conform to the rules\n   for keywords according to [RFC2911].\n"
        title: 23.7.1.2.  Naming Requirements
      - contents:
        - "23.7.1.3.  Functionality Requirements\n   Delivery Methods MUST function
          as a protocol that is capable of\n   delivering (push or pull) IPP Event
          Notifications to Notification\n   Recipients.\n"
        title: 23.7.1.3.  Functionality Requirements
      - contents:
        - "23.7.1.4.  Usage and Implementation Requirements\n   Use of a large number
          of Delivery Methods may hamper\n   interoperability.  However, the use of
          a large number of undocumented\n   and/or unlabeled Delivery Methods hampers
          interoperability even more.\n   A Delivery Method should therefore be registered
          ONLY if it adds\n   significant functionality that is valuable to a large
          community, OR\n   if it documents existing practice in a large community.
          \ Note that\n   Delivery Methods registered for the second reason should
          be\n   explicitly marked as being of limited or specialized use and should\n
          \  only be used with prior bilateral agreement.\n"
        title: 23.7.1.4.  Usage and Implementation Requirements
      - contents:
        - "23.7.1.5.  Publication Requirements\n   Delivery Method Documents MUST
          be published in a standards track,\n   informational, or experimental RFCs.\n"
        title: 23.7.1.5.  Publication Requirements
      title: 23.7.1.  Requirements for Registration of Event Notification Delivery
    - contents:
      - "23.7.2.  Registration Procedure\n   The IPP WG is developing a small number
        of Delivery Methods which are\n   intended to be published as standards track
        RFCs.  However, some\n   parties may wish to register additional Delivery
        Methods in the\n   future.  This section describes the procedures for these
        additional\n   Delivery Methods.\n"
      - contents:
        - "23.7.2.1.  Present the proposal to the Community\n   First the Delivery
          Method Document MUST be an Internet-Draft with a\n   target category of
          standards track, informational, or experimental.\n   The same MUST be true
          for any documents that it references.\n   Deliver the proposed Delivery
          Method Document proposal to the\n   \"ipp@pwg.org\" mailing list.  This
          mailing list has been established\n   by [RFC2911] for reviewing proposed
          registrations and discussing\n   other IPP matters.  Proposed Delivery Method
          Documents are not\n   formally registered and MUST NOT be used until approved.\n
          \  The intent of the public posting is to solicit comments and feedback\n
          \  on the definition and suitability of the Delivery Method and the name\n
          \  chosen for it over a four week period.\n"
        title: 23.7.2.1.  Present the proposal to the Community
      - contents:
        - "23.7.2.2.  Delivery Method Reviewer\n   The Delivery Method Reviewer is
          the same person who has been\n   appointed by the IETF Application Area
          Director(s) as the IPP\n   Designated Expert according to [RFC2911] and
          [IANA-CON].  When the\n   four week period is over and the IPP Designated
          Expert is convinced\n   that consensus has been achieved, the IPP Designated
          Expert either\n   approves the request for registration or rejects it.  Rejection
          may\n   occur because of significant objections raised on the list or\n
          \  objections raised externally.\n   Decisions made by the Reviewer must
          be posted to the ipp@pwg.org\n   mailing list within 14 days.  Decisions
          made by the Reviewer may be\n   appealed to the IESG.\n"
        title: 23.7.2.2.  Delivery Method Reviewer
      - contents:
        - "23.7.2.3.  IANA Registration\n   Provided that the Delivery Method registration
          proposal has either\n   passed review or has been successfully appealed
          to the IESG, the IANA\n   will be notified by the delivery method reviewer
          and asked to\n   register the Delivery Method and make it available to the
          community.\n"
        title: 23.7.2.3.  IANA Registration
      title: 23.7.2.  Registration Procedure
    - contents:
      - "23.7.3.  Delivery Method Document Registrations\n   Each Push Delivery Method
        Document defines a URI scheme.  Such a URI\n   scheme is used in a URI value
        of the \"notification-recipient\" (uri)\n   Subscription Template attribute
        (see section 5.3.1) and the uriScheme\n   value of the \"notify-schemes-supported\"
        (1setOf uriScheme 5.3.1.1)\n   Printer attribute(see section ).  Rather than
        creating a separate\n   section in the IPP Registry for Delivery Methods,
        Push Delivery\n   Methods will be registered as an additional value of the
        \"notify-\n   schemes-supported\" Printer attribute.  These uriScheme values
        will be\n   registered according to the procedures of [RFC2911] section 7.1
        for\n   additional attribute values.  Therefore, the IPP Registry entry for
        a\n   Push Delivery Method will be of the form:\n   Attribute\n     Value
        \                                       Ref.       Section\n     ---------------------
        \                       --------   -------\n   notify-schemes-supported (1setOf
        uriScheme)    [RFC3995]  5.3.1.1\n     <scheme name>                                RFC
        xxxx   m.n\n   Each Pull Delivery Method Document defines a keyword method
        which is\n   registered as an additional value of the \"notify-pull-method\"
        and\n   \"notify-pull-method-supported\" Printer attributes.  These keyword\n
        \  values will be registered according to the procedures of [RFC2911]\n   section
        7.1 for additional attribute values.  Therefore, the IPP\n   Registry entry
        for a Pull Delivery Method will be of the form:\n   Attribute\n     Value
        \                                       Ref.       Section\n     ---------------------
        \                       --------   -------\n   notify-pull-method (type2 keyword)
        \            [RFC3995]  5.3.2\n   notify-pull-method-supported (1setOf type2
        keyword)\n                                                  [RFC3995]  5.3.2.1\n
        \    <method keyword name>                        RFC xxxx    m.n\n"
      title: 23.7.3.  Delivery Method Document Registrations
    - contents:
      - "23.7.4.  Registration Template\n   To: ipp@pwg.org\n   Subject: Registration
        of a new Delivery Method\n   Delivery Method name:\n   (All Push Delivery
        Method names must be suitable for use as the value\n   of a URL scheme in
        the IETF tree and all Pull Delivery Method names\n   must be suitable IPP
        keywords according to [RFC2911])\n   Published specification(s):\n   (A specification
        for the Delivery Method must be openly available\n   that accurately describes
        what is being registered.)\n   Person & email address to contact for further
        information:\n"
      title: 23.7.4.  Registration Template
    title: 23.7.  Registration of Event Notification Delivery Methods
  title: 23.  IANA Considerations
- contents:
  - "24.  Internationalization Considerations\n   This IPP Notification specification
    continues support for the\n   internationalization of [RFC2911] of attributes
    containing text\n   strings and names.  Allowing a Subscribing Client to specify
    a\n   different natural language and charset for each Subscription Object\n   increases
    the internationalization support.\n   The Printer MUST be able to localize the
    content of Human Consumable\n   Event Notifications and to localize the value
    of \"notify-text\"\n   attribute in Machine Consumable Event Notifications that
    it delivers\n   to Notification Recipients.  For localization, the Printer MUST
    use\n   the value of the \"notify-charset\" attribute and the \"notify-natural-\n
    \  language\" attribute in the Subscription Object supplied by the\n   Subscribing
    Client.\n"
  title: 24.  Internationalization Considerations
- contents:
  - "25.  Security Considerations\n   Clients submitting Notification requests to
    the IPP Printer have the\n   same security issues as submitting an IPP/1.1 print
    job request (see\n   [RFC2911] section 3.2.1 and section 8).  The same mechanisms
    used by\n   IPP/1.1 can therefore be used by the client Notification submission.\n
    \  Operations that require authentication can use the HTTP\n   authentication.
    \ Operations that require privacy can use the HTTP/TLS\n   privacy.  As with IPP/1.1
    Print Job Objects, if there is no security\n   on Subscription Objects, sequential
    assignment of subscription-ids\n   exposes the system to a passive traffic monitoring
    threat.\n"
  - contents:
    - "25.1.  Client access rights\n   The Subscription Object access control model
      is the same as the\n   access control model for Job objects.  The client MUST
      have the\n   following access rights for the indicated Subscription operations:\n
      \  1. Create-Job-Subscriptions (see section 11.1.1):  A Per-Job\n      Subscription
      object is associated with a Job.  To create Per-Job\n      Subscription Objects,
      the authenticated user (see [RFC2911]\n      section 8.3) performing this operation
      MUST (1) be the job owner,\n      (2) have Operator or Administrator access
      rights for this Printer\n      (see [RFC2911] sections 1 and 8.5), or (3) be
      otherwise authorized\n      by the Printer's administrator-configured security
      policy to\n      create Per-Job Subscription Objects for the target job.\n   2.
      Create-Printer-Subscriptions (see section 11.1.2):  A Per-Printer\n      Subscription
      object is associated with the Printer.  To create\n      Per-Printer Subscription
      Objects, the authenticated user (see\n      [RFC2911] section 8.3) performing
      this operation MUST (1) have\n      Operator or Administrator access rights
      for this Printer (see\n      [RFC2911] sections 1 and 8.5) or (2) be otherwise
      authorized by\n      the Printer's administrator-configured security policy
      to create\n      Per-Printer Subscription Objects for this Printer.\n   3. Get-Subscription-Attributes
      (see section 11.2.4):  The access\n      control model for this operation is
      the same as that of the Get-\n      Job-Attributes operation (see [RFC2911]
      section 3.3.4).  The\n      primary difference is that a Get-Subscription-Attributes
      operation\n      is directed at a Subscription Object rather than at a Job object,\n
      \     and a returned attribute group contains Subscription Object\n      attributes
      rather than Job object attributes.  To query the\n      specified Subscription
      Object, the authenticated user (see\n      [RFC2911] section 8.3) performing
      this operation MUST (1) be the\n      Subscription Object owner, (2) have Operator
      or Administrator\n      access rights for this Printer (see [RFC2911] sections
      1 and 8.5),\n      or (3) be otherwise authorized by the Printer's administrator-\n
      \     configured security policy to query the Subscription Object for\n      the
      target job.  Furthermore, the Printer's security policy MAY\n      limit which
      attributes are returned, in a manner similar to the\n      Get-Job-Attributes
      operation (see [RFC2911] end of section\n      3.3.4.2).\n   4. Get-Subscriptions
      (see section 11.2.5):  The access control model\n      for this operation is
      the same as that of the Get-Jobs operation\n      (see [RFC2911] section 3.2.6).
      \ The primary difference is that the\n      operation is directed at Subscription
      Objects rather than at Job\n      objects, and the returned attribute groups
      contain Subscription\n      Object attributes rather than Job object attributes.
      \ To query\n      Per-Job Subscription Objects of the specified job (client
      supplied\n      the \"notify-job-id\" operation attribute - see section 11.2.5.1.1),\n
      \     the authenticated user (see [RFC2911] section 8.3) performing this\n      operation
      MUST (1) be the Subscription Object owner, (2) have\n      Operator or Administrator
      access rights for this Printer (see\n      [RFC2911] sections 1 and 8.5), or
      (3) be otherwise authorized by\n      the Printer's administrator-configured
      security policy to query\n      the Subscription Object for the target job.
      \ To query Per-Printer\n      Subscription Objects of the Printer (client omits
      the \"notify-\n      job-id\" operation attribute - see section 11.2.5.1.1),
      the\n      authenticated user (see [RFC2911] section 8.3) performing this\n
      \     operation MUST (1) have Operator or Administrator access rights\n      for
      this Printer (see [RFC2911] sections 1 and 8.5), or (2) be\n      otherwise
      authorized by the Printer's administrator-configured\n      security policy
      to query Per-Printer Subscription Objects for the\n      target Printer.  Furthermore,
      the Printer's security policy MAY\n      limit which attributes are returned,
      in a manner similar to the\n      Get-Job-Attributes operation (see [RFC2911]
      end of section\n      3.2.6.2).\n   5. Renew-Subscriptions (see section 11.2.6):
      \ The authenticated user\n      (see [RFC2911] section 8.3) performing this
      operation MUST (1) be\n      the owner of the Per-Printer Subscription Object,
      (2) have\n      Operator or Administrator access rights for the Printer (see\n
      \     [RFC2911] sections 1 and 8.5), or (3) be otherwise authorized by\n      the
      Printer's administrator-configured security policy to renew\n      Per-Printer
      Subscription Objects for the target Printer\n   6. Cancel-Subscription (see
      section 11.2.7):  The authenticated user\n      (see [RFC2911] section 8.3)
      performing this operation MUST (1) be\n      the owner of the Subscription Object,
      (2) have Operator or\n      Administrator access rights for the Printer (see
      [RFC2911]\n      sections 1 and 8.5), or (3) be otherwise authorized by the\n
      \     Printer's administrator-configured security policy to cancel the\n      target
      Subscription Object.\n   The standard security concerns (delivery to the right
      user, privacy\n   of content, tamper proof content) apply to each Delivery Method.\n
      \  Some Delivery Methods are more secure than others.  Each Delivery\n   Method
      Document MUST discuss its Security Considerations.\n"
    title: 25.1.  Client access rights
  - contents:
    - "25.2.  Printer security threats\n   Notification trap door:  If a Printer supports
      the OPTIONAL \"notify-\n   attributes\" Subscription Template attribute (see
      section 5.3.4) where\n   the client can request that the Printer return any
      specified Job,\n   Printer, and Subscription object attributes, the Printer
      MUST apply\n   the same security policy to these requested attributes in the
      Get-\n   Notifications request as it does for the Get-Jobs, Get-Job-\n   Attributes,
      Get-Printer-Attributes, and Get-Subscription-Attributes\n   requests.\n"
    title: 25.2.  Printer security threats
  - contents:
    - "25.3.  Notification Recipient security threats\n   Unwanted Events Notifications
      (spam):  For any Push Delivery Method,\n   by far the biggest security concern
      is the abuse of notification:\n   delivering unwanted Event Notifications to
      third parties (i.e.,\n   spam).  The problem is made worse by notification addresses
      that may\n   be redistributed to multiple parties.  There exist scenarios where\n
      \  third party notification is used (see Scenario #2 and #3 in\n   [RFC3997]).
      \ Any fully secure solution would require active agreement\n   of all recipients
      before delivering anything.\n"
    title: 25.3.  Notification Recipient security threats
  title: 25.  Security Considerations
- contents:
  - "26.  Description of the base IPP documents (Informative)\n   The base set of
    IPP documents includes:\n   Design Goals for an Internet Printing Protocol [RFC2567]\n
    \  Rationale for the Structure and Model and Protocol for the Internet\n      Printing
    Protocol [RFC2568]\n   Internet Printing Protocol/1.1: Model and Semantics [RFC2911]\n
    \  Internet Printing Protocol/1.1: Encoding and Transport [RFC2910]\n   Internet
    Printing Protocol/1.1: Implementer's Guide [RFC3196]\n   Mapping between LPD and
    IPP Protocols [RFC2569]\n   The \"Design Goals for an Internet Printing Protocol\"
    document takes a\n   broad look at distributed printing functionality, and it
    enumerates\n   real-life scenarios that help to clarify the features that need
    to be\n   included in a printing protocol for the Internet.  It identifies\n   requirements
    for three types of users: end users, operators, and\n   administrators.  It calls
    out a subset of end user requirements that\n   are satisfied in IPP/1.0 [RFC2566,
    RFC2565].  A few OPTIONAL operator\n   operations have been added to IPP/1.1 [RFC2911,
    RFC2910].\n   The \"Rationale for the Structure and Model and Protocol for the\n
    \  Internet Printing Protocol\" document describes IPP from a high level\n   view,
    defines a roadmap for the various documents that form the suite\n   of IPP specification
    documents, and gives background and rationale\n   for the IETF IPP working group's
    major decisions.\n   The \"Internet Printing Protocol/1.1: Model and Semantics\"
    document\n   describes a simplified model with abstract objects, their attributes,\n
    \  and their operations.  The model introduces a Printer and a Job.  The\n   Job
    supports multiple documents per Job.  The model document also\n   addresses how
    security, internationalization, and directory issues\n   are addressed.\n   The
    \"Internet Printing Protocol/1.1: Encoding and Transport\" document\n   is a formal
    mapping of the abstract operations and attributes defined\n   in the model document
    onto HTTP/1.1 [RFC2616].  It also defines the\n   encoding rules for a new Internet
    MIME media type called\n   \"application/ipp\".  This document also defines the
    rules for\n   transporting over HTTP a message body whose Content-Type is\n   \"application/ipp\".
    \ This document defines the 'ipp' scheme for\n   identifying IPP printers and
    jobs.\n   The \"Internet Printing Protocol/1.1: Implementer's Guide\" document\n
    \  gives insight and advice to implementers of IPP clients and IPP\n   objects.
    \ It is intended to help them understand IPP/1.1 and some of\n   the considerations
    that may assist them in the design of their client\n   and/or IPP object implementations.
    \ For example, a typical order of\n   processing requests is given, including
    error checking.  Motivation\n   for some of the specification decisions is also
    included.\n   The \"Mapping between LPD and IPP Protocols\" document gives some\n
    \  advice to implementers of gateways between IPP and LPD (Line Printer\n   Daemon)
    implementations.\n"
  title: 26.  Description of the base IPP documents (Informative)
- contents:
  - "27.  Contributors\n   The following people made significant contributions to
    the design and\n   review of this specification:\n   Scott A.  Isaacson\n   Novell,
    Inc.\n   122 E 1700 S\n   Provo, UT  84606\n   Phone: 801-861-7366\n   Fax:   801-861-2517\n
    \  EMail: sisaacson@novell.com\n   Roger deBry\n   Utah Valley State College\n
    \  Orem, UT 84058\n   Phone: 801-863-8848\n   EMail: debryro@uvsc.edu\n   Jay
    Martin\n   Underscore Inc.\n   9 Jacqueline St.\n   Hudson, NH 03051-5308\n   Phone:
    603-889-7000\n   Fax:   775-414-0245\n   EMail: jkm@underscore.com\n   Michael
    Shepherd\n   Xerox Corporation\n   800 Phillips Road  MS 128-51E\n   Webster,
    NY  14450\n   Phone: 716-422-2338\n   Fax:   716-265-8871\n   EMail: mshepherd@usa.xerox.com\n
    \  Ron Bergman\n   Ricoh Printing Systems America\n   1757 Tapo Canyon Road\n
    \  Simi Valley, CA 93063-3394\n   Phone: 805-578-4421\n   Fax:   805-578-4001\n
    \  EMail: ron.bergman@rpsa.ricoh.com\n"
  title: 27.  Contributors
- contents:
  - "Authors' Addresses\n   Robert Herriot\n   Global Workflow Solutions\n   706 Colorado
    Ave.\n   Palo Alto, CA 94303\n   Phone:  650-324-4000\n   EMail:  bob@herriot.com\n
    \  Tom Hastings\n   Xerox Corporation\n   701 S Aviation Blvd, ESAE 242\n   El
    Segundo, CA  90245\n   Phone: 310-333-6413\n   Fax:   310-333-6342\n   EMail:
    hastings@cp10.es.xerox.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
