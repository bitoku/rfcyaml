- title: __initial_text__
  contents:
  - '       Handling Long Lines in Content of Internet-Drafts and RFCs

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines two strategies for handling long lines in\n\
    \   width-bounded text content.  One strategy, called the \"single\n   backslash\"\
    \ strategy, is based on the historical use of a single\n   backslash ('\\') character\
    \ to indicate where line-folding has\n   occurred, with the continuation occurring\
    \ with the first character\n   that is not a space character (' ') on the next\
    \ line.  The second\n   strategy, called the \"double backslash\" strategy, extends\
    \ the first\n   strategy by adding a second backslash character to identify where\
    \ the\n   continuation begins and is thereby able to handle cases not supported\n\
    \   by the first strategy.  Both strategies use a self-describing header\n   enabling\
    \ automated reconstitution of the original content.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8792.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Applicability Statement\n   3.\
    \  Requirements Language\n   4.  Goals\n     4.1.  Automated Folding of Long Lines\
    \ in Text Content\n     4.2.  Automated Reconstitution of the Original Text Content\n\
    \   5.  Limitations\n     5.1.  Not Recommended for Graphical Artwork\n     5.2.\
    \  Doesn't Work as Well as Format-Specific Options\n   6.  Two Folding Strategies\n\
    \     6.1.  Comparison\n     6.2.  Recommendation\n   7.  The Single Backslash\
    \ Strategy ('\\')\n     7.1.  Folded Structure\n       7.1.1.  Header\n      \
    \ 7.1.2.  Body\n     7.2.  Algorithm\n       7.2.1.  Folding\n       7.2.2.  Unfolding\n\
    \   8.  The Double Backslash Strategy ('\\\\')\n     8.1.  Folded Structure\n\
    \       8.1.1.  Header\n       8.1.2.  Body\n     8.2.  Algorithm\n       8.2.1.\
    \  Folding\n       8.2.2.  Unfolding\n   9.  Examples\n     9.1.  Example Showing\
    \ Boundary Conditions\n       9.1.1.  Using '\\'\n       9.1.2.  Using '\\\\'\n\
    \     9.2.  Example Showing Multiple Wraps of a Single Line\n       9.2.1.  Using\
    \ '\\'\n       9.2.2.  Using '\\\\'\n     9.3.  Example Showing \"Smart\" Folding\n\
    \       9.3.1.  Using '\\'\n       9.3.2.  Using '\\\\'\n     9.4.  Example Showing\
    \ \"Forced\" Folding\n       9.4.1.  Using '\\'\n       9.4.2.  Using '\\\\'\n\
    \   10. Security Considerations\n   11. IANA Considerations\n   12. References\n\
    \     12.1.  Normative References\n     12.2.  Informative References\n   Appendix\
    \ A.  Bash Shell Script: rfcfold\n   Acknowledgements\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   [RFC7994] sets out the requirements for plain-text RFCs\
    \ and states\n   that each line of an RFC (and hence of an Internet-Draft) must\
    \ be\n   limited to 72 characters followed by the character sequence that\n  \
    \ denotes an end-of-line (EOL).\n   Internet-Drafts and RFCs often include example\
    \ text or code\n   fragments.  Many times, the example text or code exceeds the\n\
    \   72-character line-length limit.  The 'xml2rfc' utility [xml2rfc], at\n   the\
    \ time of this document's publication, does not attempt to wrap the\n   content\
    \ of such inclusions, simply issuing a warning whenever lines\n   exceed 69 characters.\
    \  Historically, there has been no convention\n   recommended by the RFC Editor\
    \ in place for how to handle long lines\n   in such inclusions, other than advising\
    \ authors to clearly indicate\n   what manipulation has occurred.\n   This document\
    \ defines two strategies for handling long lines in\n   width-bounded text content.\
    \  One strategy, called the \"single\n   backslash\" strategy, is based on the\
    \ historical use of a single\n   backslash ('\\') character to indicate where\
    \ line-folding has\n   occurred, with the continuation occurring with the first\
    \ character\n   that is not a space character (' ') on the next line.  The second\n\
    \   strategy, called the \"double backslash\" strategy, extends the first\n  \
    \ strategy by adding a second backslash character to identify where the\n   continuation\
    \ begins and is thereby able to handle cases not supported\n   by the first strategy.\
    \  Both strategies use a self-describing header\n   enabling automated reconstitution\
    \ of the original content.\n   The strategies defined in this document work on\
    \ any text content but\n   are primarily intended for a structured sequence of\
    \ lines, such as\n   would be referenced by the <sourcecode> element defined in\n\
    \   Section 2.48 of [RFC7991], rather than for two-dimensional imagery,\n   such\
    \ as would be referenced by the <artwork> element defined in\n   Section 2.5 of\
    \ [RFC7991].\n   Note that text files are represented as lines having their first\n\
    \   character in column 1, and a line length of N where the last\n   character\
    \ is in the Nth column and is immediately followed by an end-\n   of-line character\
    \ sequence.\n"
- title: 2.  Applicability Statement
  contents:
  - "2.  Applicability Statement\n   The formats and algorithms defined in this document\
    \ may be used in\n   any context, whether for IETF documents or in other situations\
    \ where\n   structured folding is desired.\n   Within the IETF, this work primarily\
    \ targets the xml2rfc v3\n   <sourcecode> element (Section 2.48 of [RFC7991])\
    \ and the xml2rfc v2\n   <artwork> element (Section 2.5 of [RFC7749]), which,\
    \ for lack of a\n   better option, is used in xml2rfc v2 for both source code\
    \ and\n   artwork.  This work may also be used for the xml2rfc v3 <artwork>\n\
    \   element (Section 2.5 of [RFC7991]), but as described in Section 5.1,\n   it\
    \ is generally not recommended.\n"
- title: 3.  Requirements Language
  contents:
  - "3.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 4.  Goals
  contents:
  - '4.  Goals

    '
- title: 4.1.  Automated Folding of Long Lines in Text Content
  contents:
  - "4.1.  Automated Folding of Long Lines in Text Content\n   Automated folding of\
    \ long lines is needed in order to support\n   documents that are dynamically\
    \ compiled to include content with\n   potentially unconstrained line lengths.\
    \  For instance, the build\n   process may wish to include content from other\
    \ local files or content\n   that is dynamically generated by some external process.\
    \  Both of\n   these cases are discussed next.\n   Many documents need to include\
    \ the content from local files (e.g.,\n   XML, JSON, ABNF, ASN.1).  Prior to including\
    \ a file's content, the\n   build process SHOULD first validate these source files\
    \ using format-\n   specific validators.  In order for such tooling to be able\
    \ to process\n   the files, the files must be in their original/natural state,\
    \ which\n   may entail them having some long lines.  Thus, these source files\n\
    \   need to be folded before inclusion into the XML document, in order to\n  \
    \ satisfy 'xml2rfc' line-length limits.\n   Similarly, documents sometimes contain\
    \ dynamically generated output,\n   typically from an external process operating\
    \ on the same source files\n   discussed in the previous paragraph.  For instance,\
    \ such processes\n   may translate the input format to another format, or they\
    \ may render\n   a report on, or a view of, the input file.  In some cases, the\n\
    \   dynamically generated output may contain lines exceeding the\n   'xml2rfc'\
    \ line-length limits.\n   In both cases, folding is required and SHOULD be automated\
    \ to reduce\n   effort and errors resulting from manual processing.\n"
- title: 4.2.  Automated Reconstitution of the Original Text Content
  contents:
  - "4.2.  Automated Reconstitution of the Original Text Content\n   Automated reconstitution\
    \ of the exact original text content is needed\n   to support validation of text-based\
    \ content extracted from documents.\n   For instance, YANG modules [RFC7950] are\
    \ already extracted from\n   Internet-Drafts and validated as part of the submission\
    \ process.\n   Additionally, the desire to validate instance examples (i.e., XML/\n\
    \   JSON documents) contained within Internet-Drafts has been discussed\n   [yang-doctors-thread].\n"
- title: 5.  Limitations
  contents:
  - '5.  Limitations

    '
- title: 5.1.  Not Recommended for Graphical Artwork
  contents:
  - "5.1.  Not Recommended for Graphical Artwork\n   While the solution presented\
    \ in this document works on any kind of\n   text-based content, it is most useful\
    \ on content that represents\n   source code (XML, JSON, etc.) or, more generally,\
    \ on content that has\n   not been laid out in two dimensions (e.g., diagrams).\n\
    \   Fundamentally, the issue is whether the text content remains readable\n  \
    \ once folded.  Text content that is unpredictable is especially\n   susceptible\
    \ to looking bad when folded; falling into this category\n   are most Unified\
    \ Modeling Language (UML) diagrams, YANG tree\n   diagrams, and ASCII art in general.\n\
    \   It is NOT RECOMMENDED to use the solution presented in this document\n   on\
    \ graphical artwork.\n"
- title: 5.2.  Doesn't Work as Well as Format-Specific Options
  contents:
  - "5.2.  Doesn't Work as Well as Format-Specific Options\n   The solution presented\
    \ in this document works generically for all\n   text-based content, as it only\
    \ views content as plain text.  However,\n   various formats sometimes have built-in\
    \ mechanisms that are better\n   suited to prevent long lines.\n   For instance,\
    \ both the 'pyang' and 'yanglint' utilities [pyang]\n   [yanglint] have the command-line\
    \ option \"tree-line-length\", which can\n   be used to indicate a desired maximum\
    \ line length when generating\n   YANG tree diagrams [RFC8340].\n   In another\
    \ example, some source formats (e.g., YANG [RFC7950]) allow\n   any quoted string\
    \ to be broken up into substrings separated by a\n   concatenation character (e.g.,\
    \ '+'), any of which can be on a\n   different line.\n   It is RECOMMENDED that\
    \ authors do as much as possible within the\n   selected format to avoid long\
    \ lines.\n"
- title: 6.  Two Folding Strategies
  contents:
  - "6.  Two Folding Strategies\n   This document defines two nearly identical strategies\
    \ for folding\n   text-based content.\n   The Single Backslash Strategy ('\\'):\n\
    \      Uses a backslash ('\\') character at the end of the line where\n      folding\
    \ occurs, and assumes that the continuation begins at the\n      first character\
    \ that is not a space character (' ') on the\n      following line.\n   The Double\
    \ Backslash Strategy ('\\\\'):\n      Uses a backslash ('\\') character at the\
    \ end of the line where\n      folding occurs, and assumes that the continuation\
    \ begins after a\n      second backslash ('\\') character on the following line.\n"
- title: 6.1.  Comparison
  contents:
  - "6.1.  Comparison\n   The first strategy produces output that is more readable.\
    \  However,\n   (1) it is significantly more likely to encounter unfoldable input\n\
    \   (e.g., a long line containing only space characters), and (2) for\n   long\
    \ lines that can be folded, automation implementations may\n   encounter scenarios\
    \ that, without special care, will produce errors.\n   The second strategy produces\
    \ output that is less readable, but it is\n   unlikely to encounter unfoldable\
    \ input, there are no long lines that\n   cannot be folded, and no special care\
    \ is required when folding a long\n   line.\n"
- title: 6.2.  Recommendation
  contents:
  - "6.2.  Recommendation\n   It is RECOMMENDED that implementations first attempt\
    \ to fold content\n   using the single backslash strategy and, only in the unlikely\
    \ event\n   that it cannot fold the input or the folding logic is unable to cope\n\
    \   with a contingency occurring on the desired folding column, then fall\n  \
    \ back to the double backslash strategy.\n"
- title: 7.  The Single Backslash Strategy ('\')
  contents:
  - '7.  The Single Backslash Strategy (''\'')

    '
- title: 7.1.  Folded Structure
  contents:
  - "7.1.  Folded Structure\n   Text content that has been folded as specified by\
    \ this strategy MUST\n   adhere to the following structure.\n"
- title: 7.1.1.  Header
  contents:
  - "7.1.1.  Header\n   The header is two lines long.\n   The first line is the following\
    \ 36-character string; this string MAY\n   be surrounded by any number of printable\
    \ characters.  This first line\n   cannot itself be folded.\n   NOTE: '\\' line\
    \ wrapping per RFC 8792\n   The second line is an empty line, containing only\
    \ the end-of-line\n   character sequence.  This line provides visual separation\
    \ for\n   readability.\n"
- title: 7.1.2.  Body
  contents:
  - "7.1.2.  Body\n   The character encoding is the same as the encoding described\
    \ in\n   Section 2 of [RFC7994], except that, per [RFC7991], tab characters\n\
    \   are prohibited.\n   Lines that have a backslash ('\\') occurring as the last\
    \ character in\n   a line are considered \"folded\".\n   Exceptionally long lines\
    \ MAY be folded multiple times.\n"
- title: 7.2.  Algorithm
  contents:
  - "7.2.  Algorithm\n   This section describes a process for folding and unfolding\
    \ long lines\n   when they are encountered in text content.\n   The steps are\
    \ complete, but implementations MAY achieve the same\n   result in other ways.\n\
    \   When a larger document contains multiple instances of text content\n   that\
    \ may need to be folded or unfolded, another process must\n   insert/extract the\
    \ individual text content instances to/from the\n   larger document prior to utilizing\
    \ the algorithms described in this\n   section.  For example, the 'xiax' utility\
    \ [xiax] does this.\n"
- title: 7.2.1.  Folding
  contents:
  - "7.2.1.  Folding\n   Determine the desired maximum line length from input to the\
    \ line-\n   wrapping process, such as from a command-line parameter.  If no value\n\
    \   is explicitly specified, the value \"69\" SHOULD be used.\n   Ensure that\
    \ the desired maximum line length is not less than the\n   minimum header, which\
    \ is 36 characters.  If the desired maximum line\n   length is less than this\
    \ minimum, exit (this text-based content\n   cannot be folded).\n   Scan the text\
    \ content for horizontal tab characters.  If any\n   horizontal tab characters\
    \ appear, either resolve them to space\n   characters or exit, forcing the input\
    \ provider to convert them to\n   space characters themselves first.\n   Scan\
    \ the text content to ensure that at least one line exceeds the\n   desired maximum.\
    \  If no line exceeds the desired maximum, exit (this\n   text content does not\
    \ need to be folded).\n   Scan the text content to ensure that no existing lines\
    \ already end\n   with a backslash ('\\') character, as this could lead to an\
    \ ambiguous\n   result.  If such a line is found, and its width is less than the\n\
    \   desired maximum, then it SHOULD be flagged for \"forced\" folding\n   (folding\
    \ even though unnecessary).  If the folding implementation\n   doesn't support\
    \ forced foldings, it MUST exit.\n   If this text content needs to, and can, be\
    \ folded, insert the header\n   described in Section 7.1.1, ensuring that any\
    \ additional printable\n   characters surrounding the header do not result in\
    \ a line exceeding\n   the desired maximum.\n   For each line in the text content,\
    \ from top to bottom, if the line\n   exceeds the desired maximum or requires\
    \ a forced folding, then fold\n   the line by performing the following steps:\n\
    \   1.  Determine where the fold will occur.  This location MUST be\n       before\
    \ or at the desired maximum column and MUST NOT be chosen\n       such that the\
    \ character immediately after the fold is a space\n       (' ') character.  For\
    \ forced foldings, the location is between\n       the '\\' and the end-of-line\
    \ sequence.  If no such location can be\n       found, then exit (this text content\
    \ cannot be folded).\n   2.  At the location where the fold is to occur, insert\
    \ a backslash\n       ('\\') character followed by the end-of-line character sequence.\n\
    \   3.  On the following line, insert any number of space (' ')\n       characters,\
    \ provided that the resulting line does not exceed the\n       desired maximum.\n\
    \   The result of the previous operation is that the next line starts\n   with\
    \ an arbitrary number of space (' ') characters, followed by the\n   character\
    \ that was previously occupying the position where the fold\n   occurred.\n  \
    \ Continue in this manner until reaching the end of the text content.\n   Note\
    \ that this algorithm naturally addresses the case where the\n   remainder of\
    \ a folded line is still longer than the desired maximum\n   and, hence, needs\
    \ to be folded again, ad infinitum.\n   The process described in this section\
    \ is illustrated by the\n   \"fold_it_1()\" function in Appendix A.\n"
- title: 7.2.2.  Unfolding
  contents:
  - "7.2.2.  Unfolding\n   Scan the beginning of the text content for the header described\
    \ in\n   Section 7.1.1.  If the header is not present, exit (this text content\n\
    \   does not need to be unfolded).\n   Remove the two-line header from the text\
    \ content.\n   For each line in the text content, from top to bottom, if the line\n\
    \   has a backslash ('\\') character immediately followed by the end-of-\n   line\
    \ character sequence, then the line can be unfolded.  Remove the\n   backslash\
    \ ('\\') character, the end-of-line character sequence, and\n   any leading space\
    \ (' ') characters, which will bring up the next\n   line.  Then continue to scan\
    \ each line in the text content starting\n   with the current line (in case it\
    \ was multiply folded).\n   Continue in this manner until reaching the end of\
    \ the text content.\n   The process described in this section is illustrated by\
    \ the\n   \"unfold_it_1()\" function in Appendix A.\n"
- title: 8.  The Double Backslash Strategy ('\\')
  contents:
  - '8.  The Double Backslash Strategy (''\\'')

    '
- title: 8.1.  Folded Structure
  contents:
  - "8.1.  Folded Structure\n   Text content that has been folded as specified by\
    \ this strategy MUST\n   adhere to the following structure.\n"
- title: 8.1.1.  Header
  contents:
  - "8.1.1.  Header\n   The header is two lines long.\n   The first line is the following\
    \ 37-character string; this string MAY\n   be surrounded by any number of printable\
    \ characters.  This first line\n   cannot itself be folded.\n   NOTE: '\\\\' line\
    \ wrapping per RFC 8792\n   The second line is an empty line, containing only\
    \ the end-of-line\n   character sequence.  This line provides visual separation\
    \ for\n   readability.\n"
- title: 8.1.2.  Body
  contents:
  - "8.1.2.  Body\n   The character encoding is the same as the encoding described\
    \ in\n   Section 2 of [RFC7994], except that, per [RFC7991], tab characters\n\
    \   are prohibited.\n   Lines that have a backslash ('\\') occurring as the last\
    \ character in\n   a line immediately followed by the end-of-line character sequence,\n\
    \   when the subsequent line starts with a backslash ('\\') as the first\n   character\
    \ that is not a space character (' '), are considered\n   \"folded\".\n   Exceptionally\
    \ long lines MAY be folded multiple times.\n"
- title: 8.2.  Algorithm
  contents:
  - "8.2.  Algorithm\n   This section describes a process for folding and unfolding\
    \ long lines\n   when they are encountered in text content.\n   The steps are\
    \ complete, but implementations MAY achieve the same\n   result in other ways.\n\
    \   When a larger document contains multiple instances of text content\n   that\
    \ may need to be folded or unfolded, another process must\n   insert/extract the\
    \ individual text content instances to/from the\n   larger document prior to utilizing\
    \ the algorithms described in this\n   section.  For example, the 'xiax' utility\
    \ [xiax] does this.\n"
- title: 8.2.1.  Folding
  contents:
  - "8.2.1.  Folding\n   Determine the desired maximum line length from input to the\
    \ line-\n   wrapping process, such as from a command-line parameter.  If no value\n\
    \   is explicitly specified, the value \"69\" SHOULD be used.\n   Ensure that\
    \ the desired maximum line length is not less than the\n   minimum header, which\
    \ is 37 characters.  If the desired maximum line\n   length is less than this\
    \ minimum, exit (this text-based content\n   cannot be folded).\n   Scan the text\
    \ content for horizontal tab characters.  If any\n   horizontal tab characters\
    \ appear, either resolve them to space\n   characters or exit, forcing the input\
    \ provider to convert them to\n   space characters themselves first.\n   Scan\
    \ the text content to see if any line exceeds the desired maximum.\n   If no line\
    \ exceeds the desired maximum, exit (this text content does\n   not need to be\
    \ folded).\n   Scan the text content to ensure that no existing lines already\
    \ end\n   with a backslash ('\\') character while the subsequent line starts\n\
    \   with a backslash ('\\') character as the first character that is not a\n \
    \  space character (' '), as this could lead to an ambiguous result.  If\n   such\
    \ a line is found and its width is less than the desired maximum,\n   then it\
    \ SHOULD be flagged for forced folding (folding even though\n   unnecessary).\
    \  If the folding implementation doesn't support forced\n   foldings, it MUST\
    \ exit.\n   If this text content needs to, and can, be folded, insert the header\n\
    \   described in Section 8.1.1, ensuring that any additional printable\n   characters\
    \ surrounding the header do not result in a line exceeding\n   the desired maximum.\n\
    \   For each line in the text content, from top to bottom, if the line\n   exceeds\
    \ the desired maximum or requires a forced folding, then fold\n   the line by\
    \ performing the following steps:\n   1.  Determine where the fold will occur.\
    \  This location MUST be\n       before or at the desired maximum column.  For\
    \ forced foldings,\n       the location is between the '\\' and the end-of-line\
    \ sequence on\n       the first line.\n   2.  At the location where the fold is\
    \ to occur, insert a first\n       backslash ('\\') character followed by the\
    \ end-of-line character\n       sequence.\n   3.  On the following line, insert\
    \ any number of space (' ')\n       characters, provided that the resulting line\
    \ does not exceed the\n       desired maximum, followed by a second backslash\
    \ ('\\') character.\n   The result of the previous operation is that the next\
    \ line starts\n   with an arbitrary number of space (' ') characters, followed\
    \ by a\n   backslash ('\\') character, immediately followed by the character that\n\
    \   was previously occupying the position where the fold occurred.\n   Continue\
    \ in this manner until reaching the end of the text content.\n   Note that this\
    \ algorithm naturally addresses the case where the\n   remainder of a folded line\
    \ is still longer than the desired maximum\n   and, hence, needs to be folded\
    \ again, ad infinitum.\n   The process described in this section is illustrated\
    \ by the\n   \"fold_it_2()\" function in Appendix A.\n"
- title: 8.2.2.  Unfolding
  contents:
  - "8.2.2.  Unfolding\n   Scan the beginning of the text content for the header described\
    \ in\n   Section 8.1.1.  If the header is not present, exit (this text content\n\
    \   does not need to be unfolded).\n   Remove the two-line header from the text\
    \ content.\n   For each line in the text content, from top to bottom, if the line\n\
    \   has a backslash ('\\') character immediately followed by the end-of-\n   line\
    \ character sequence and if the next line has a backslash ('\\')\n   character\
    \ as the first character that is not a space character (' '),\n   then the lines\
    \ can be unfolded.  Remove the first backslash ('\\')\n   character, the end-of-line\
    \ character sequence, any leading space\n   (' ') characters, and the second backslash\
    \ ('\\') character, which\n   will bring up the next line.  Then, continue to\
    \ scan each line in the\n   text content starting with the current line (in case\
    \ it was multiply\n   folded).\n   Continue in this manner until reaching the\
    \ end of the text content.\n   The process described in this section is illustrated\
    \ by the\n   \"unfold_it_2()\" function in Appendix A.\n"
- title: 9.  Examples
  contents:
  - "9.  Examples\n   The following self-documenting examples illustrate folded text-based\n\
    \   content.\n   The source text content cannot be presented here, as it would\
    \ again\n   be folded.  Alas, only the results can be provided.\n"
- title: 9.1.  Example Showing Boundary Conditions
  contents:
  - "9.1.  Example Showing Boundary Conditions\n   This example illustrates boundary\
    \ conditions.  The input contains\n   seven lines, each line one character longer\
    \ than the previous line.\n   Numbers are used for counting purposes.  The default\
    \ desired maximum\n   column value \"69\" is used.\n"
- title: 9.1.1.  Using '\'
  contents:
  - "9.1.1.  Using '\\'\n   ========== NOTE: '\\' line wrapping per RFC 8792 ===========\n\
    \   123456789012345678901234567890123456789012345678901234567890123456\n   1234567890123456789012345678901234567890123456789012345678901234567\n\
    \   12345678901234567890123456789012345678901234567890123456789012345678\n   123456789012345678901234567890123456789012345678901234567890123456789\n\
    \   12345678901234567890123456789012345678901234567890123456789012345678\\\n \
    \  90\n   12345678901234567890123456789012345678901234567890123456789012345678\\\
    \n   901\n   12345678901234567890123456789012345678901234567890123456789012345678\\\
    \n   9012\n"
- title: 9.1.2.  Using '\\'
  contents:
  - "9.1.2.  Using '\\\\'\n   ========== NOTE: '\\\\' line wrapping per RFC 8792 ==========\n\
    \   123456789012345678901234567890123456789012345678901234567890123456\n   1234567890123456789012345678901234567890123456789012345678901234567\n\
    \   12345678901234567890123456789012345678901234567890123456789012345678\n   123456789012345678901234567890123456789012345678901234567890123456789\n\
    \   12345678901234567890123456789012345678901234567890123456789012345678\\\n \
    \  \\90\n   12345678901234567890123456789012345678901234567890123456789012345678\\\
    \n   \\901\n   12345678901234567890123456789012345678901234567890123456789012345678\\\
    \n   \\9012\n"
- title: 9.2.  Example Showing Multiple Wraps of a Single Line
  contents:
  - "9.2.  Example Showing Multiple Wraps of a Single Line\n   This example illustrates\
    \ what happens when a very long line needs to\n   be folded multiple times.  The\
    \ input contains one line containing 280\n   characters.  Numbers are used for\
    \ counting purposes.  The default\n   desired maximum column value \"69\" is used.\n"
- title: 9.2.1.  Using '\'
  contents:
  - "9.2.1.  Using '\\'\n   ========== NOTE: '\\' line wrapping per RFC 8792 ===========\n\
    \   12345678901234567890123456789012345678901234567890123456789012345678\\\n \
    \  90123456789012345678901234567890123456789012345678901234567890123456\\\n  \
    \ 78901234567890123456789012345678901234567890123456789012345678901234\\\n   56789012345678901234567890123456789012345678901234567890123456789012\\\
    \n   34567890\n"
- title: 9.2.2.  Using '\\'
  contents:
  - "9.2.2.  Using '\\\\'\n   ========== NOTE: '\\\\' line wrapping per RFC 8792 ==========\n\
    \   12345678901234567890123456789012345678901234567890123456789012345678\\\n \
    \  \\9012345678901234567890123456789012345678901234567890123456789012345\\\n \
    \  \\6789012345678901234567890123456789012345678901234567890123456789012\\\n \
    \  \\3456789012345678901234567890123456789012345678901234567890123456789\\\n \
    \  \\01234567890\n"
- title: 9.3.  Example Showing "Smart" Folding
  contents:
  - "9.3.  Example Showing \"Smart\" Folding\n   This example illustrates how readability\
    \ can be improved via \"smart\"\n   folding, whereby folding occurs at format-specific\
    \ locations and\n   format-specific indentations are used.\n   The text content\
    \ was manually folded, since the script in Appendix A\n   does not implement smart\
    \ folding.\n   Note that the headers are surrounded by different printable\n \
    \  characters than those shown in the script-generated examples.\n"
- title: 9.3.1.  Using '\'
  contents:
  - "9.3.1.  Using '\\'\n   [NOTE: '\\' line wrapping per RFC 8792]\n   <yang-library\n\
    \       xmlns=\"urn:ietf:params:xml:ns:yang:ietf-yang-library\"\n       xmlns:ds=\"\
    urn:ietf:params:xml:ns:yang:ietf-datastores\">\n     <module-set>\n       <name>config-modules</name>\n\
    \       <module>\n         <name>ietf-interfaces</name>\n         <revision>2018-02-20</revision>\n\
    \         <namespace>\\\n           urn:ietf:params:xml:ns:yang:ietf-interfaces\\\
    \n         </namespace>\n       </module>\n       ...\n     </module-set>\n  \
    \   ...\n   </yang-library>\n   Below is the equivalent of the above, but it was\
    \ folded using the\n   script in Appendix A.\n   ========== NOTE: '\\' line wrapping\
    \ per RFC 8792 ===========\n   <yang-library\n       xmlns=\"urn:ietf:params:xml:ns:yang:ietf-yang-library\"\
    \n       xmlns:ds=\"urn:ietf:params:xml:ns:yang:ietf-datastores\">\n     <module-set>\n\
    \       <name>config-modules</name>\n       <module>\n         <name>ietf-interfaces</name>\n\
    \         <revision>2018-02-20</revision>\n         <namespace>urn:ietf:params:xml:ns:yang:ietf-interfaces</namesp\\\
    \n   ace>\n       </module>\n       ...\n     </module-set>\n     ...\n   </yang-library>\n"
- title: 9.3.2.  Using '\\'
  contents:
  - "9.3.2.  Using '\\\\'\n   [NOTE: '\\\\' line wrapping per RFC 8792]\n   <yang-library\n\
    \       xmlns=\"urn:ietf:params:xml:ns:yang:ietf-yang-library\"\n       xmlns:ds=\"\
    urn:ietf:params:xml:ns:yang:ietf-datastores\">\n     <module-set>\n       <name>config-modules</name>\n\
    \       <module>\n         <name>ietf-interfaces</name>\n         <revision>2018-02-20</revision>\n\
    \         <namespace>\\\n           \\urn:ietf:params:xml:ns:yang:ietf-interfaces\\\
    \n         \\</namespace>\n       </module>\n       ...\n     </module-set>\n\
    \     ...\n   </yang-library>\n   Below is the equivalent of the above, but it\
    \ was folded using the\n   script in Appendix A.\n   ========== NOTE: '\\\\' line\
    \ wrapping per RFC 8792 ==========\n   <yang-library\n       xmlns=\"urn:ietf:params:xml:ns:yang:ietf-yang-library\"\
    \n       xmlns:ds=\"urn:ietf:params:xml:ns:yang:ietf-datastores\">\n     <module-set>\n\
    \       <name>config-modules</name>\n       <module>\n         <name>ietf-interfaces</name>\n\
    \         <revision>2018-02-20</revision>\n         <namespace>urn:ietf:params:xml:ns:yang:ietf-interfaces</namesp\\\
    \n   \\ace>\n       </module>\n       ...\n     </module-set>\n     ...\n   </yang-library>\n"
- title: 9.4.  Example Showing "Forced" Folding
  contents:
  - "9.4.  Example Showing \"Forced\" Folding\n   This example illustrates how invalid\
    \ sequences in lines that do not\n   have to be folded can be handled via forced\
    \ folding, whereby the\n   folding occurs even though unnecessary.\n   The following\
    \ line exceeds a 68-char max and, thus, demands folding:\n   123456789012345678901234567890123456789012345678901234567890123456789\n\
    \   This line ends with a backslash \\\n   This line ends with a backslash \\\n\
    \   \\ This line begins with a backslash\n   The following is an indented 3x3\
    \ block of backslashes:\n      \\\\\\\n      \\\\\\\n      \\\\\\\n   The samples\
    \ below were manually folded, since the script in the\n   appendix does not implement\
    \ forced folding.\n   Note that the headers are prefixed by a pound ('#') character,\
    \ rather\n   than surrounded by 'equals' ('=') characters as shown in the script-\n\
    \   generated examples.\n"
- title: 9.4.1.  Using '\'
  contents:
  - "9.4.1.  Using '\\'\n   # NOTE: '\\' line wrapping per RFC 8792\n   The following\
    \ line exceeds a 68-char max and, thus, demands folding:\n   1234567890123456789012345678901234567890123456789012345678901234567\\\
    \n   89\n   This line ends with a backslash \\\\\n   This line ends with a backslash\
    \ \\\\\n   \\ This line begins with a backslash\n   The following is an indented\
    \ 3x3 block of backslashes:\n      \\\\\\\\\n      \\\\\\\\\n      \\\\\\\n"
- title: 9.4.2.  Using '\\'
  contents:
  - "9.4.2.  Using '\\\\'\n   # NOTE: '\\\\' line wrapping per RFC 8792\n   The following\
    \ line exceeds a 68-char max and, thus, demands folding:\n   1234567890123456789012345678901234567890123456789012345678901234567\\\
    \n   \\89\n   This line ends with a backslash \\\n   This line ends with a backslash\
    \ \\\\\n   \\\n   \\ This line begins with a backslash\n   The following is an\
    \ indented 3x3 block of backslashes:\n      \\\\\\\\\n      \\\n      \\\\\\\\\
    \n      \\\n      \\\\\\\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   This document has no security considerations.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC7991]  Hoffman, P., \"The \"xml2rfc\" Version 3 Vocabulary\",\n      \
    \        RFC 7991, DOI 10.17487/RFC7991, December 2016,\n              <https://www.rfc-editor.org/info/rfc7991>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [bash]     \"GNU Bash Manual\",\n         \
    \     <https://www.gnu.org/software/bash/manual>.\n   [pyang]    \"pyang\", <https://pypi.org/project/pyang/>.\n\
    \   [RFC7749]  Reschke, J., \"The \"xml2rfc\" Version 2 Vocabulary\",\n      \
    \        RFC 7749, DOI 10.17487/RFC7749, February 2016,\n              <https://www.rfc-editor.org/info/rfc7749>.\n\
    \   [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n\
    \              RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n\
    \   [RFC7994]  Flanagan, H., \"Requirements for Plain-Text RFCs\",\n         \
    \     RFC 7994, DOI 10.17487/RFC7994, December 2016,\n              <https://www.rfc-editor.org/info/rfc7994>.\n\
    \   [RFC8340]  Bjorklund, M. and L. Berger, Ed., \"YANG Tree Diagrams\",\n   \
    \           BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,\n           \
    \   <https://www.rfc-editor.org/info/rfc8340>.\n   [xiax]     \"The 'xiax' Python\
    \ Package\",\n              <https://pypi.org/project/xiax/>.\n   [xml2rfc]  \"\
    xml2rfc\", <https://pypi.org/project/xml2rfc/>.\n   [yang-doctors-thread]\n  \
    \            Watsen, K., \"[yang-doctors] automating yang doctor\n           \
    \   reviews\", message to the yang-doctors mailing list, 18\n              April\
    \ 2018, <https://mailarchive.ietf.org/arch/msg/yang-\n              doctors/DCfBqgfZPAD7afzeDFlQ1Xm2X3g>.\n\
    \   [yanglint] \"yanglint\", commit 1b7d73d, February 2020,\n              <https://github.com/CESNET/libyang#yanglint>.\n"
- title: 'Appendix A.  Bash Shell Script: rfcfold'
  contents:
  - "Appendix A.  Bash Shell Script: rfcfold\n   This non-normative appendix includes\
    \ a Bash shell script [bash] that\n   can both fold and unfold text content using\
    \ both the single and\n   double backslash strategies described in Sections 7\
    \ and 8,\n   respectively.  This shell script, called 'rfcfold', is maintained\
    \ at\n   <https://github.com/ietf-tools/rfcfold>.\n   This script is intended\
    \ to be applied to a single text content\n   instance.  If it is desired to fold\
    \ or unfold text content instances\n   within a larger document (e.g., an Internet-Draft\
    \ or RFC), then\n   another tool must be used to extract the content from the\
    \ larger\n   document before utilizing this script.\n   For readability purposes,\
    \ this script forces the minimum supported\n   line length to be eight characters\
    \ longer than the raw header text\n   defined in Sections 7.1.1 and 8.1.1 so as\
    \ to ensure that the header\n   can be wrapped by a space (' ') character and\
    \ three 'equals' ('=')\n   characters on each side of the raw header text.\n \
    \  When a tab character is detected in the input file, this script exits\n   with\
    \ the following error message:\n      Error: infile contains a tab character,\
    \ which is not allowed.\n   This script tests for the availability of GNU awk\
    \ (gawk), in order to\n   test for ASCII-based control characters and non-ASCII\
    \ characters in\n   the input file (see below).  Note that testing revealed flaws\
    \ in the\n   default version of 'awk' on some platforms.  As this script uses\n\
    \   'gawk' only to issue warning messages, if 'gawk' is not found, this\n   script\
    \ issues the following debug message:\n      Debug: no GNU awk; skipping checks\
    \ for special characters.\n   When 'gawk' is available (see above) and ASCII-based\
    \ control\n   characters are detected in the input file, this script issues the\n\
    \   following warning message:\n      Warning: infile contains ASCII control characters\
    \ (unsupported).\n   When 'gawk' is available (see above) and non-ASCII characters\
    \ are\n   detected in the input file, this script issues the following warning\n\
    \   message:\n      Warning: infile contains non-ASCII characters (unsupported).\n\
    \   This script does not implement the whitespace-avoidance logic\n   described\
    \ in Section 7.2.1.  In such a case, the script will exit\n   with the following\
    \ error message:\n      Error: infile has a space character occurring on the folding\n\
    \      column.  This file cannot be folded using the '\\' strategy.\n   While\
    \ this script can unfold input that contains forced foldings, it\n   is unable\
    \ to fold files that would require forced foldings.  Forced\n   folding is described\
    \ in Sections 7.2.1 and 8.2.1.  When being asked\n   to fold a file that would\
    \ require forced folding, the script will\n   instead exit with one of the following\
    \ error messages:\n   For '\\':\n      Error: infile has a line ending with a\
    \ '\\' character.  This file\n      cannot be folded using the '\\' strategy without\
    \ there being false\n      positives produced in the unfolding (i.e., this script\
    \ does not\n      force-fold such lines, as described in RFC 8792).\n   For '\\\
    \\':\n      Error: infile has a line ending with a '\\' character followed by\
    \ a\n      '\\' character as the first non-space character on the next line.\n\
    \      This script cannot fold this file using the '\\\\' strategy without\n \
    \     there being false positives produced in the unfolding (i.e., this\n    \
    \  script does not force-fold such lines, as described in RFC 8792).\n   Shell-level\
    \ end-of-line backslash ('\\') characters have been\n   purposely added to the\
    \ script so as to ensure that the script is\n   itself not folded in this document,\
    \ thus simplifying the ability to\n   copy/paste the script for local use.  As\
    \ should be evident by the\n   lack of the mandatory header described in Section\
    \ 7.1.1, these\n   backslashes do not designate a folded line (e.g., as described\
    \ in\n   Section 7).\n   <CODE BEGINS> file \"rfcfold\"\n   #!/bin/bash --posix\n\
    \   # This script may need some adjustments to work on a given system.\n   # For\
    \ instance, the utility 'gsed' may need to be installed.\n   # Also, please be\
    \ advised that 'bash' (not 'sh') must be used.\n   # Copyright (c) 2020 IETF Trust,\
    \ Kent Watsen, and Erik Auerswald.\n   # All rights reserved.\n   #\n   # Redistribution\
    \ and use in source and binary forms, with or without\n   # modification, are\
    \ permitted provided that the following conditions\n   # are met:\n   #\n   #\
    \   * Redistributions of source code must retain the above copyright\n   #   \
    \  notice, this list of conditions and the following disclaimer.\n   #\n   # \
    \  * Redistributions in binary form must reproduce the above\n   #     copyright\
    \ notice, this list of conditions and the following\n   #     disclaimer in the\
    \ documentation and/or other materials\n   #     provided with the distribution.\n\
    \   #\n   #   * Neither the name of Internet Society, IETF or IETF Trust, nor\n\
    \   #     the names of specific contributors, may be used to endorse or\n   #\
    \     promote products derived from this software without specific\n   #     prior\
    \ written permission.\n   #\n   # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS\
    \ AND CONTRIBUTORS\n   # \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,\
    \ BUT NOT\n   # LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n\
    \   # FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE\n   # COPYRIGHT\
    \ OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n   # INCIDENTAL,\
    \ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n   # (INCLUDING, BUT NOT LIMITED\
    \ TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n   # SERVICES; LOSS OF USE, DATA, OR\
    \ PROFITS; OR BUSINESS INTERRUPTION)\n   # HOWEVER CAUSED AND ON ANY THEORY OF\
    \ LIABILITY, WHETHER IN CONTRACT,\n   # STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\
    \ OR OTHERWISE)\n   # ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\
    \ IF\n   # ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   print_usage() {\n  \
    \   printf \"\\n\"\n     printf \"Folds or unfolds the input text file according\
    \ to\"\n     printf \" RFC 8792.\\n\"\n     printf \"\\n\"\n     printf \"Usage:\
    \ rfcfold [-h] [-d] [-q] [-s <strategy>] [-c <col>]\"\n     printf \" [-r] -i\
    \ <infile> -o <outfile>\\n\"\n     printf \"\\n\"\n     printf \"  -s: strategy\
    \ to use, '1' or '2' (default: try 1,\"\n     printf \" else 2)\\n\"\n     printf\
    \ \"  -c: column to fold on (default: 69)\\n\"\n     printf \"  -r: reverses the\
    \ operation\\n\"\n     printf \"  -i: the input filename\\n\"\n     printf \"\
    \  -o: the output filename\\n\"\n     printf \"  -d: show debug messages (unless\
    \ -q is given)\\n\"\n     printf \"  -q: quiet (suppress error and debug messages)\\\
    n\"\n     printf \"  -h: show this message\\n\"\n     printf \"\\n\"\n     printf\
    \ \"Exit status code: 1 on error, 0 on success, 255 on no-op.\"\n     printf \"\
    \\n\\n\"\n   }\n   # global vars, do not edit\n   strategy=0 # auto\n   debug=0\n\
    \   quiet=0\n   reversed=0\n   infile=\"\"\n   outfile=\"\"\n   maxcol=69  # default,\
    \ may be overridden by param\n   col_gvn=0  # maxcol overridden?\n   hdr_txt_1=\"\
    NOTE: '\\\\' line wrapping per RFC 8792\"\n   hdr_txt_2=\"NOTE: '\\\\\\\\' line\
    \ wrapping per RFC 8792\"\n   equal_chars=\"=======================================================\"\
    \n   space_chars=\"                                                       \"\n\
    \   temp_dir=\"\"\n   prog_name='rfcfold'\n   # functions for diagnostic messages\n\
    \   prog_msg() {\n     if [[ \"$quiet\" -eq 0 ]]; then\n       format_string=\"\
    ${prog_name}: $1: %s\\n\"\n       shift\n       printf -- \"$format_string\" \"\
    $*\" >&2\n     fi\n   }\n   err() {\n     prog_msg 'Error' \"$@\"\n   }\n   warn()\
    \ {\n     prog_msg 'Warning' \"$@\"\n   }\n   dbg() {\n     if [[ \"$debug\" -eq\
    \ 1 ]]; then\n       prog_msg 'Debug' \"$@\"\n     fi\n   }\n   # determine name\
    \ of [g]sed binary\n   type gsed > /dev/null 2>&1 && SED=gsed || SED=sed\n   #\
    \ warn if a non-GNU sed utility is used\n   \"$SED\" --version < /dev/null 2>\
    \ /dev/null | grep -q GNU || \\\n   warn 'not using GNU `sed` (likely cause if\
    \ an error occurs).'\n   cleanup() {\n     rm -rf \"$temp_dir\"\n   }\n   trap\
    \ 'cleanup' EXIT\n   fold_it_1() {\n     # ensure input file doesn't contain the\
    \ fold-sequence already\n     if [[ -n \"$(\"$SED\" -n '/\\\\$/p' \"$infile\"\
    )\" ]]; then\n       err \"infile '$infile' has a line ending with a '\\\\' character.\"\
    \\\n           \"This script cannot fold this file using the '\\\\' strategy\"\
    \\\n           \"without there being false positives produced in the\"\\\n   \
    \        \"unfolding.\"\n       return 1\n     fi\n     # where to fold\n    \
    \ foldcol=$(expr \"$maxcol\" - 1) # for the inserted '\\' char\n     # ensure\
    \ input file doesn't contain whitespace on the fold column\n     grep -q \"^\\\
    (.\\{$foldcol\\}\\)\\{1,\\} \" \"$infile\"\n     if [[ $? -eq 0 ]]; then\n   \
    \    err \"infile '$infile' has a space character occurring on the\"\\\n     \
    \      \"folding column.  This file cannot be folded using the\"\\\n         \
    \  \"'\\\\' strategy.\"\n       return 1\n     fi\n     # center header text\n\
    \     length=$(expr ${#hdr_txt_1} + 2)\n     left_sp=$(expr \\( \"$maxcol\" -\
    \ \"$length\" \\) / 2)\n     right_sp=$(expr \"$maxcol\" - \"$length\" - \"$left_sp\"\
    )\n     header=$(printf \"%.*s %s %.*s\" \"$left_sp\" \"$equal_chars\"\\\n   \
    \                   \"$hdr_txt_1\" \"$right_sp\" \"$equal_chars\")\n     # generate\
    \ outfile\n     echo \"$header\" > \"$outfile\"\n     echo \"\" >> \"$outfile\"\
    \n     \"$SED\" 's/\\(.\\{'\"$foldcol\"'\\}\\)\\(..\\)/\\1\\\\\\n\\2/;t M;b;:M;P;D;'\\\
    \n       < \"$infile\" >> \"$outfile\" 2> /dev/null\n     if [[ $? -ne 0 ]]; then\n\
    \       return 1\n     fi\n     return 0\n   }\n   fold_it_2() {\n     # where\
    \ to fold\n     foldcol=$(expr \"$maxcol\" - 1) # for the inserted '\\' char\n\
    \     # ensure input file doesn't contain the fold-sequence already\n     if [[\
    \ -n \"$(\"$SED\" -n '/\\\\$/{N;s/\\\\\\n[ ]*\\\\/&/p;D}' \"$infile\")\" ]]\n\
    \     then\n       err \"infile '$infile' has a line ending with a '\\\\' character\"\
    \\\n           \"followed by a '\\\\' character as the first non-space\"\\\n \
    \          \"character on the next line.  This script cannot fold\"\\\n      \
    \     \"this file using the '\\\\\\\\' strategy without there being\"\\\n    \
    \       \"false positives produced in the unfolding.\"\n       return 1\n    \
    \ fi\n     # center header text\n     length=$(expr ${#hdr_txt_2} + 2)\n     left_sp=$(expr\
    \ \\( \"$maxcol\" - \"$length\" \\) / 2)\n     right_sp=$(expr \"$maxcol\" - \"\
    $length\" - \"$left_sp\")\n     header=$(printf \"%.*s %s %.*s\" \"$left_sp\"\
    \ \"$equal_chars\"\\\n                      \"$hdr_txt_2\" \"$right_sp\" \"$equal_chars\"\
    )\n     # generate outfile\n     echo \"$header\" > \"$outfile\"\n     echo \"\
    \" >> \"$outfile\"\n     \"$SED\" 's/\\(.\\{'\"$foldcol\"'\\}\\)\\(..\\)/\\1\\\
    \\\\n\\\\\\2/;t M;b;:M;P;D;'\\\n       < \"$infile\" >> \"$outfile\" 2> /dev/null\n\
    \     if [[ $? -ne 0 ]]; then\n       return 1\n     fi\n     return 0\n   }\n\
    \   fold_it() {\n     # ensure input file doesn't contain a tab\n     grep -q\
    \ $'\\t' \"$infile\"\n     if [[ $? -eq 0 ]]; then\n       err \"infile '$infile'\
    \ contains a tab character, which is not\"\\\n           \"allowed.\"\n      \
    \ return 1\n     fi\n     # folding of input containing ASCII control or non-ASCII\
    \ characters\n     # may result in a wrong folding column and is not supported\n\
    \     if type gawk > /dev/null 2>&1; then\n       env LC_ALL=C gawk '/[\\000-\\\
    014\\016-\\037\\177]/{exit 1}' \"$infile\"\\\n       || warn \"infile '$infile'\
    \ contains ASCII control characters\"\\\n               \"(unsupported).\"\n \
    \      env LC_ALL=C gawk '/[^\\000-\\177]/{exit 1}' \"$infile\"\\\n       || warn\
    \ \"infile '$infile' contains non-ASCII characters\"\\\n               \"(unsupported).\"\
    \n     else\n       dbg \"no GNU awk; skipping checks for special characters.\"\
    \n     fi\n     # check if file needs folding\n     testcol=$(expr \"$maxcol\"\
    \ + 1)\n     grep -q \".\\{$testcol\\}\" \"$infile\"\n     if [[ $? -ne 0 ]];\
    \ then\n       dbg \"nothing to do; copying infile to outfile.\"\n       cp \"\
    $infile\" \"$outfile\"\n       return 255\n     fi\n     if [[ \"$strategy\" -eq\
    \ 1 ]]; then\n       fold_it_1\n       return $?\n     fi\n     if [[ \"$strategy\"\
    \ -eq 2 ]]; then\n       fold_it_2\n       return $?\n     fi\n     quiet_sav=\"\
    $quiet\"\n     quiet=1\n     fold_it_1\n     result=$?\n     quiet=\"$quiet_sav\"\
    \n     if [[ \"$result\" -ne 0 ]]; then\n       dbg \"Folding strategy '1' didn't\
    \ succeed; trying strategy '2'...\"\n       fold_it_2\n       return $?\n    \
    \ fi\n     return 0\n   }\n   unfold_it_1() {\n     temp_dir=$(mktemp -d)\n  \
    \   # output all but the first two lines (the header) to wip file\n     awk \"\
    NR>2\" \"$infile\" > \"$temp_dir/wip\"\n     # unfold wip file\n     \"$SED\"\
    \ '{H;$!d};x;s/^\\n//;s/\\\\\\n *//g' \"$temp_dir/wip\" > \"$outfile\"\n     return\
    \ 0\n   }\n   unfold_it_2() {\n     temp_dir=$(mktemp -d)\n     # output all but\
    \ the first two lines (the header) to wip file\n     awk \"NR>2\" \"$infile\"\
    \ > \"$temp_dir/wip\"\n     # unfold wip file\n     \"$SED\" '{H;$!d};x;s/^\\\
    n//;s/\\\\\\n *\\\\//g' \"$temp_dir/wip\"\\\n       > \"$outfile\"\n     return\
    \ 0\n   }\n   unfold_it() {\n     # check if file needs unfolding\n     line=$(head\
    \ -n 1 \"$infile\")\n     line2=$(\"$SED\" -n '2p' \"$infile\")\n     result=$(echo\
    \ \"$line\" | fgrep \"$hdr_txt_1\")\n     if [[ $? -eq 0 ]]; then\n       if [[\
    \ -n \"$line2\" ]]; then\n         err \"the second line in '$infile' is not empty.\"\
    \n         return 1\n       fi\n       unfold_it_1\n       return $?\n     fi\n\
    \     result=$(echo \"$line\" | fgrep \"$hdr_txt_2\")\n     if [[ $? -eq 0 ]];\
    \ then\n       if [[ -n \"$line2\" ]]; then\n         err \"the second line in\
    \ '$infile' is not empty.\"\n         return 1\n       fi\n       unfold_it_2\n\
    \       return $?\n     fi\n     dbg \"nothing to do; copying infile to outfile.\"\
    \n     cp \"$infile\" \"$outfile\"\n     return 255\n   }\n   process_input()\
    \ {\n     while [[ \"$1\" != \"\" ]]; do\n       if [[ \"$1\" == \"-h\" ]] ||\
    \ [[ \"$1\" == \"--help\" ]]; then\n         print_usage\n         exit 0\n  \
    \     elif [[ \"$1\" == \"-d\" ]]; then\n         debug=1\n       elif [[ \"$1\"\
    \ == \"-q\" ]]; then\n         quiet=1\n       elif [[ \"$1\" == \"-s\" ]]; then\n\
    \         if [[ \"$#\" -eq \"1\" ]]; then\n           err \"option '-s' needs\
    \ an argument (use -h for help).\"\n           exit 1\n         fi\n         strategy=\"\
    $2\"\n         shift\n       elif [[ \"$1\" == \"-c\" ]]; then\n         if [[\
    \ \"$#\" -eq \"1\" ]]; then\n           err \"option '-c' needs an argument (use\
    \ -h for help).\"\n           exit 1\n         fi\n         col_gvn=1\n      \
    \   maxcol=\"$2\"\n         shift\n       elif [[ \"$1\" == \"-r\" ]]; then\n\
    \         reversed=1\n       elif [[ \"$1\" == \"-i\" ]]; then\n         if [[\
    \ \"$#\" -eq \"1\" ]]; then\n           err \"option '-i' needs an argument (use\
    \ -h for help).\"\n           exit 1\n         fi\n         infile=\"$2\"\n  \
    \       shift\n       elif [[ \"$1\" == \"-o\" ]]; then\n         if [[ \"$#\"\
    \ -eq \"1\" ]]; then\n           err \"option '-o' needs an argument (use -h for\
    \ help).\"\n           exit 1\n         fi\n         outfile=\"$2\"\n        \
    \ shift\n       else\n         warn \"ignoring unknown option '$1'.\"\n      \
    \ fi\n       shift\n     done\n     if [[ -z \"$infile\" ]]; then\n       err\
    \ \"infile parameter missing (use -h for help).\"\n       exit 1\n     fi\n  \
    \   if [[ -z \"$outfile\" ]]; then\n       err \"outfile parameter missing (use\
    \ -h for help).\"\n       exit 1\n     fi\n     if [[ ! -f \"$infile\" ]]; then\n\
    \       err \"specified file '$infile' does not exist.\"\n       exit 1\n    \
    \ fi\n     if [[ \"$col_gvn\" -eq 1 ]] && [[ \"$reversed\" -eq 1 ]]; then\n  \
    \     warn \"'-c' option ignored when unfolding (option '-r').\"\n     fi\n  \
    \   if [[ \"$strategy\" -eq 0 ]] || [[ \"$strategy\" -eq 2 ]]; then\n       min_supported=$(expr\
    \ ${#hdr_txt_2} + 8)\n     else\n       min_supported=$(expr ${#hdr_txt_1} + 8)\n\
    \     fi\n     if [[ \"$maxcol\" -lt \"$min_supported\" ]]; then\n       err \"\
    the folding column cannot be less than $min_supported.\"\n       exit 1\n    \
    \ fi\n     # this is only because the code otherwise runs out of equal_chars\n\
    \     max_supported=$(expr ${#equal_chars} + 1 + ${#hdr_txt_1} + 1\\\n       \
    \   + ${#equal_chars})\n     if [[ \"$maxcol\" -gt \"$max_supported\" ]]; then\n\
    \       err \"the folding column cannot be more than $max_supported.\"\n     \
    \  exit 1\n     fi\n   }\n   main() {\n     if [[ \"$#\" -eq \"0\" ]]; then\n\
    \        print_usage\n        exit 1\n     fi\n     process_input \"$@\"\n   \
    \  if [[ \"$reversed\" -eq 0 ]]; then\n       fold_it\n       code=$?\n     else\n\
    \       unfold_it\n       code=$?\n     fi\n     exit \"$code\"\n   }\n   main\
    \ \"$@\"\n   <CODE ENDS>\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors thank the RFC Editor for confirming that there\
    \ was\n   previously no set convention, at the time of this document's\n   publication,\
    \ for handling long lines in source code inclusions, thus\n   instigating this\
    \ work.\n   The authors thank the following folks for their various contributions\n\
    \   while producing this document (sorted by first name): Ben Kaduk,\n   Benoit\
    \ Claise, Gianmarco Bruno, Italo Busi, Joel Jaeggli, Jonathan\n   Hansford, Lou\
    \ Berger, Martin Bjorklund, and Rob Wilton.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Kent Watsen\n   Watsen Networks\n   Email: kent+ietf@watsen.net\n\
    \   Erik Auerswald\n   Individual Contributor\n   Email: auerswal@unix-ag.uni-kl.de\n\
    \   Adrian Farrel\n   Old Dog Consulting\n   Email: adrian@olddog.co.uk\n   Qin\
    \ Wu\n"
