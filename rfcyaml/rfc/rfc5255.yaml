- contents:
  - '         Internet Message Access Protocol Internationalization

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   Internet Message Access Protocol (IMAP) version 4rev1 has basic\n
    \  support for non-ASCII characters in mailbox names and search\n   substrings.
    \ It also supports non-ASCII message headers and content\n   encoded as specified
    by Multipurpose Internet Mail Extensions (MIME).\n   This specification defines
    a collection of IMAP extensions that\n   improve international support including
    language negotiation for\n   international error text, translations for namespace
    prefixes, and\n   comparator negotiation for search, sort, and thread.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Conventions Used in This Document ...............................3\n   3.
    LANGUAGE Extension ..............................................3\n      3.1.
    LANGUAGE Extension Requirements ............................4\n      3.2. LANGUAGE
    Command ...........................................4\n      3.3. LANGUAGE Response
    ..........................................6\n      3.4. TRANSLATION Extension
    to the NAMESPACE Response ............7\n      3.5. Formal Syntax ..............................................8\n
    \  4. I18NLEVEL=1 and I18NLEVEL=2 Extensions ..........................9\n      4.1.
    Introduction and Overview ..................................9\n      4.2. Requirements
    Common to Both I18NLEVEL=1 and I18NLEVEL=2 ....9\n      4.3. I18NLEVEL=1 Extension
    Requirements ........................10\n      4.4. I18NLEVEL=2 Extension Requirements
    ........................10\n      4.5. Compatibility Notes .......................................11\n
    \     4.6. Comparators and Character Encodings .......................11\n      4.7.
    COMPARATOR Command ........................................13\n      4.8. COMPARATOR
    Response .......................................14\n      4.9. BADCOMPARATOR Response
    Code ...............................14\n      4.10. Formal Syntax ............................................14\n
    \  5. Other IMAP Internationalization Issues .........................15\n      5.1.
    Unicode Userids and Passwords .............................15\n      5.2. UTF-8
    Mailbox Names .......................................15\n      5.3. UTF-8 Domains,
    Addresses, and Mail Headers ................15\n   6. IANA Considerations ............................................16\n
    \  7. Security Considerations ........................................16\n   8.
    Acknowledgements ...............................................16\n   9. Relevant
    Sources of Documents for Internationalized IMAP\n      Implementations ................................................17\n
    \  10. Normative References ..........................................17\n   11.
    Informative References ........................................18\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This specification defines two IMAP4rev1 [RFC3501] extensions
    to\n   enhance international support.  These extensions can be advertised\n   and
    implemented separately.\n   The LANGUAGE extension allows the client to request
    a suitable\n   language for protocol error messages and in combination with the\n
    \  NAMESPACE extension [RFC2342] enables namespace translations.\n   The I18NLEVEL=2
    extension allows the client to request a suitable\n   collation that will modify
    the behavior of the base specification's\n   SEARCH command as well as the SORT
    and THREAD extensions [SORT].\n   This leverages the collation registry [RFC4790].
    \ The I18NLEVEL=1\n   extension updates SEARCH/SORT/THREAD to use i;unicode-casemap\n
    \  comparator, as defined in [UCM].  I18NLEVEL=1 is a simpler version of\n   I18NLEVEL=2
    with no ability to select a different collation.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in [RFC2119].\n   The formal syntax uses the Augmented Backus-Naur Form (ABNF)\n
    \  [RFC5234] notation including the core rules defined in Appendix A.\n   The
    UTF-8-related productions are defined in [RFC3629].\n   In examples, \"C:\" and
    \"S:\" indicate lines sent by the client and\n   server respectively.  If a single
    \"C:\" or \"S:\" label applies to\n   multiple lines, then the line breaks between
    those lines are for\n   editorial clarity only and are not part of the actual
    protocol\n   exchange.\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  LANGUAGE Extension\n   IMAP allows server responses to include human-readable
    text that in\n   many cases needs to be presented to the user.  But that text
    is\n   limited to US-ASCII by the IMAP specification [RFC3501] in order to\n   preserve
    backwards compatibility with deployed IMAP implementations.\n   This section specifies
    a way for an IMAP client to negotiate which\n   language the server should use
    when sending human-readable text.\n   The LANGUAGE extension only provides a mechanism
    for altering fixed\n   server strings such as response text and NAMESPACE folder
    names.\n   Assigning localized language aliases to shared mailboxes would be\n
    \  done with a separate mechanism such as the proposed METADATA\n   extension
    (see [METADATA]).\n"
  - contents:
    - "3.1.  LANGUAGE Extension Requirements\n   IMAP servers that support this extension
      MUST list the keyword\n   LANGUAGE in their CAPABILITY response as well as in
      the greeting\n   CAPABILITY data.\n   A server that advertises this extension
      MUST use the language\n   \"i-default\" as described in [RFC2277] as its default
      language until\n   another supported language is negotiated by the client.  A
      server\n   MUST include \"i-default\" as one of its supported languages.  IMAP\n
      \  servers SHOULD NOT advertise the LANGUAGE extension if they discover\n   that
      they only support \"i-default\".\n   Clients and servers that support this extension
      MUST also support the\n   NAMESPACE extension [RFC2342].\n   The LANGUAGE command
      is valid in all states.  Clients SHOULD issue\n   LANGUAGE before authentication,
      since some servers send valuable user\n   information as part of authentication
      (e.g., \"password is correct,\n   but expired\").  If a security layer (such
      as SASL or TLS) is\n   subsequently negotiated by the client, it MUST re-issue
      the LANGUAGE\n   command in order to make sure that no previous active attack
      (if any)\n   on LANGUAGE negotiation has effect on subsequent error messages.\n
      \  (See Section 7 for a more detailed explanation of the attack.)\n"
    title: 3.1.  LANGUAGE Extension Requirements
  - contents:
    - "3.2.  LANGUAGE Command\n   Arguments: Optional language range arguments.\n
      \  Response:  A possible LANGUAGE response (see Section 3.3).\n              A
      possible NAMESPACE response (see Section 3.4).\n   Result:    OK - Command completed\n
      \             NO - Could not complete command\n              BAD - Arguments
      invalid\n   The LANGUAGE command requests that human-readable text emitted by
      the\n   server be localized to a language matching one of the language range\n
      \  argument as described by Section 2 of [RFC4647].\n   If the command succeeds,
      the server will return human-readable\n   responses in the first supported language
      specified.  These responses\n   will be in UTF-8 [RFC3629].  The server MUST
      send a LANGUAGE response\n   specifying the language used, and the change takes
      effect immediately\n   after the LANGUAGE response.\n   If the command fails,
      the server continues to return human-readable\n   responses in the language
      it was previously using.\n   The special \"default\" language range argument
      indicates a request to\n   use a language designated as preferred by the server
      administrator.\n   The preferred language MAY vary based on the currently active
      user.\n   If a language range does not match a known language tag exactly but\n
      \  does match a language by the rules of [RFC4647], the server MUST send\n   an
      untagged LANGUAGE response indicating the language selected.\n   If there aren't
      any arguments, the server SHOULD send an untagged\n   LANGUAGE response listing
      the languages it supports.  If the server\n   is unable to enumerate the list
      of languages it supports it MAY\n   return a tagged NO response to the enumeration
      request.  If, after\n   receiving a LANGUAGE request, the server discovers that
      it doesn't\n   support any language other than i-default, it MUST return a tagged
      NO\n   response to the enumeration request.\n      < The server defaults to
      using English i-default responses until\n        the user explicitly changes
      the language. >\n      C: A001 LOGIN KAREN PASSWORD\n      S: A001 OK LOGIN
      completed\n      < Client requested MUL language, which no server supports.
      >\n      C: A002 LANGUAGE MUL\n      S: A002 NO Unsupported language MUL\n      <
      A LANGUAGE command with no arguments is a request to enumerate\n        the
      list of languages the server supports. >\n      C: A003 LANGUAGE\n      S: *
      LANGUAGE (EN DE IT i-default)\n      S: A003 OK Supported languages have been
      enumerated\n      C: B001 LANGUAGE\n      S: B001 NO Server is unable to enumerate
      supported languages\n      < Once the client changes the language, all responses
      will be in\n        that language starting after the LANGUAGE response.  Note
      that\n        this includes the NAMESPACE response.  Because RFCs are in US-\n
      \       ASCII, this document uses an ASCII transcription rather than\n        UTF-8
      text, e.g., \"ue\" in the word \"ausgefuehrt\" >\n      C: C001 LANGUAGE DE\n
      \     S: * LANGUAGE (DE)\n      S: * NAMESPACE ((\"\" \"/\")) ((\"Other Users/\"
      \"/\" \"TRANSLATION\"\n            (\"Andere Ben&APw-tzer/\"))) ((\"Public Folders/\"
      \"/\"\n            \"TRANSLATION\" (\"Gemeinsame Postf&AM8-cher/\")))\n      S:
      C001 OK Sprachwechsel durch LANGUAGE-Befehl ausgefuehrt\n      < If a server
      does not support the requested primary language,\n        responses will continue
      to be returned in the current language\n        the server is using. >\n      C:
      D001 LANGUAGE FR\n      S: D001 NO Diese Sprache ist nicht unterstuetzt\n      C:
      D002 LANGUAGE DE-IT\n      S: * LANGUAGE (DE-IT)\n      S: * NAMESPACE ((\"\"
      \"/\"))((\"Other Users/\" \"/\" \"TRANSLATION\"\n            (\"Andere Ben&APw-tzer/\")))
      ((\"Public Folders/\" \"/\"\n            \"TRANSLATION\" (\"Gemeinsame Postf&AM8-cher/\")))\n
      \     S: D002 OK Sprachwechsel durch LANGUAGE-Befehl ausgefuehrt\n      C: D003
      LANGUAGE \"default\"\n      S: * LANGUAGE (DE)\n      S: D003 OK Sprachwechsel
      durch LANGUAGE-Befehl ausgefuehrt\n      < Server does not speak French, but
      does speak English.  User\n        speaks Canadian French and Canadian English.
      >\n      C: E001 LANGUAGE FR-CA EN-CA\n      S: * LANGUAGE (EN)\n      S: E001
      OK Now speaking English\n"
    title: 3.2.  LANGUAGE Command
  - contents:
    - "3.3.  LANGUAGE Response\n   Contents:  A list of one or more language tags.\n
      \  The LANGUAGE response occurs as a result of a LANGUAGE command.  A\n   LANGUAGE
      response with a list containing a single language tag\n   indicates that the
      server is now using that language.  A LANGUAGE\n   response with a list containing
      multiple language tags indicates the\n   server is communicating a list of available
      languages to the client,\n   and no change in the active language has been made.\n"
    title: 3.3.  LANGUAGE Response
  - contents:
    - "3.4.  TRANSLATION Extension to the NAMESPACE Response\n   If localized representations
      of the namespace prefixes are available\n   in the selected language, the server
      SHOULD include these in the\n   TRANSLATION extension to the NAMESPACE response.\n
      \  The TRANSLATION extension to the NAMESPACE response returns a single\n   string,
      containing the modified UTF-7 [RFC3501] encoded translation\n   of the namespace
      prefix.  It is the responsibility of the client to\n   convert between the namespace
      prefix and the translation of the\n   namespace prefix when presenting mailbox
      names to the user.\n   In this example, a server supports the IMAP4 NAMESPACE
      command.  It\n   uses no prefix to the user's Personal Namespace, a prefix of
      \"Other\n   Users\" to its Other Users' Namespace, and a prefix of \"Public\n
      \  Folders\" to its only Shared Namespace.  Since a client will often\n   display
      these prefixes to the user, the server includes a translation\n   of them that
      can be presented to the user.\n      C: A001 LANGUAGE DE-IT\n      S: * NAMESPACE
      ((\"\" \"/\")) ((\"Other Users/\" \"/\" \"TRANSLATION\"\n            (\"Andere
      Ben&APw-tzer/\"))) ((\"Public Folders/\" \"/\"\n            \"TRANSLATION\"
      (\"Gemeinsame Postf&AM8-cher/\")))\n      S: A001 OK LANGUAGE-Befehl ausgefuehrt\n"
    title: 3.4.  TRANSLATION Extension to the NAMESPACE Response
  - contents:
    - "3.5.  Formal Syntax\n   The following syntax specification inherits ABNF [RFC5234]
      rules from\n   IMAP4rev1 [RFC3501], IMAP4 Namespace [RFC2342], Tags for the\n
      \  Identifying Languages [RFC4646], UTF-8 [RFC3629], and Collected\n   Extensions
      to IMAP4 ABNF [RFC4466].\n    command-any       =/ language-cmd\n        ; LANGUAGE
      command is valid in all states\n    language-cmd      = \"LANGUAGE\" *(SP lang-range-quoted)\n
      \   response-payload  =/ language-data\n    language-data     = \"LANGUAGE\"
      SP \"(\" lang-tag-quoted *(SP\n                      lang-tag-quoted) \")\"\n
      \   namespace-trans   = SP DQUOTE \"TRANSLATION\" DQUOTE SP \"(\" string \")\"\n
      \       ; the string is encoded in Modified UTF-7.\n        ; this is a subset
      of the syntax permitted by\n        ; the Namespace-Response-Extension rule
      in [RFC4466]\n    lang-range-quoted = astring\n        ; Once any literal wrapper
      or quoting is removed, this\n        ; follows the language-range rule in [RFC4647]\n
      \   lang-tag-quoted   = astring\n        ; Once any literal wrapper or quoting
      is removed, this follows\n        ; the Language-Tag rule in [RFC4646]\n    resp-text
      \        = [\"[\" resp-text-code \"]\" SP ] UTF8-TEXT-CHAR\n                        *(UTF8-TEXT-CHAR
      / \"[\")\n        ; After the server is changed to a language other than\n        ;
      i-default, this resp-text rule replaces the resp-text\n        ; rule from [RFC3501].\n
      \   UTF8-TEXT-CHAR    = %x20-5A / %x5C-7E / UTF8-2 / UTF8-3 / UTF8-4\n        ;
      UTF-8 excluding 7-bit control characters and \"[\"\n"
    title: 3.5.  Formal Syntax
  title: 3.  LANGUAGE Extension
- contents:
  - '4.  I18NLEVEL=1 and I18NLEVEL=2 Extensions

    '
  - contents:
    - "4.1.  Introduction and Overview\n   IMAP4rev1 [RFC3501] includes the SEARCH
      command that can be used to\n   locate messages matching criteria including
      human-readable text.  The\n   SORT extension [SORT] to IMAP allows the client
      to ask the server to\n   determine the order of messages based on criteria including
      human-\n   readable text.  These mechanisms require the ability to support non-\n
      \  English search and sort functions.\n   Section 4 defines two IMAP extensions
      for internationalizing IMAP\n   SEARCH, SORT, and THREAD [SORT] using the comparator
      framework\n   [RFC4790].\n   The I18NLEVEL=1 extension updates SEARCH/SORT/THREAD
      to use\n   i;unicode-casemap comparator, as defined in [UCM].  See Sections
      4.2\n   and 4.3 for more details.\n   The I18NLEVEL=2 extension is a superset
      of the I18NLEVEL=1 extension.\n   It adds to I18NLEVEL=1 extension the ability
      to determine the active\n   comparator (see definition below) and to negotiate
      use of comparators\n   using the COMPARATOR command.  It also adds the COMPARATOR
      response\n   that indicates the active comparator and possibly other available\n
      \  comparators.  See Sections 4.2 and 4.4 for more details.\n"
    title: 4.1.  Introduction and Overview
  - contents:
    - "4.2.  Requirements Common to Both I18NLEVEL=1 and I18NLEVEL=2\n   The term
      \"default comparator\" refers to the comparator that is used\n   by SEARCH and
      SORT absent any negotiation using the COMPARATOR\n   command (see Section 4.7).
      \ The term \"active comparator\" refers to\n   the comparator which will be
      used within a session, e.g., by SEARCH\n   and SORT.  The COMPARATOR command
      is used to change the active\n   comparator.\n   The active comparator applies
      to the following SEARCH keys: \"BCC\",\n   \"BODY\", \"CC\", \"FROM\", \"SUBJECT\",
      \"TEXT\", \"TO\", and \"HEADER\".  If the\n   server also advertises the \"SORT\"
      extension, then the active\n   comparator applies to the following SORT keys:
      \"CC\", \"FROM\",\n   \"SUBJECT\", and \"TO\".  If the server advertises THREAD=ORDEREDSUBJECT,\n
      \  then the active comparator applies to the ORDEREDSUBJECT threading\n   algorithm.
      \ If the server advertises THREAD=REFERENCES, then the\n   active comparator
      applies to the subject field comparisons done by\n   REFERENCES threading algorithm.
      \ Future extensions may choose to\n   apply the active comparator to their SEARCH
      keys.\n   For SORT and THREAD, the pre-processing necessary to extract the base\n
      \  subject text from a Subject header occurs prior to the application of\n   a
      comparator.\n   A server that advertises I18NLEVEL=1 or I18NLEVEL=2 extension
      MUST\n   implement the i;unicode-casemap comparator, as defined in [UCM].\n
      \  A server that advertises I18NLEVEL=1 or I18NLEVEL=2 extension MUST\n   support
      UTF-8 as a SEARCH charset.\n"
    title: 4.2.  Requirements Common to Both I18NLEVEL=1 and I18NLEVEL=2
  - contents:
    - "4.3.  I18NLEVEL=1 Extension Requirements\n   An IMAP server that satisfies
      all requirements specified in Sections\n   4.2 and 4.6 (and that doesn't support/advertise
      any other\n   I18NLEVEL=<n> extension, where n > 1) MUST list the keyword\n
      \  I18NLEVEL=1 in its CAPABILITY data once IMAP enters the authenticated\n   state,
      and MAY list that keyword in other states.\n"
    title: 4.3.  I18NLEVEL=1 Extension Requirements
  - contents:
    - "4.4.  I18NLEVEL=2 Extension Requirements\n   An IMAP server that satisfies
      all requirements specified in Sections\n   4.2, 4.4, and 4.6-4.10 (and that
      doesn't support/advertise any other\n   I18NLEVEL=<n> extension, where n > 2)
      MUST list the keyword\n   I18NLEVEL=2 in its CAPABILITY data once IMAP enters
      the authenticated\n   state, and MAY list that keyword in other states.\n   A
      server that advertises this extension MUST implement the\n   i;unicode-casemap
      comparator, as defined in [UCM].  It MAY implement\n   other comparators from
      the IANA registry established by [RFC4790].\n   See also Section 4.5 of this
      document.\n   A server that advertises this extension SHOULD use i;unicode-casemap\n
      \  as the default comparator.  (Note that i;unicode-casemap is the\n   default
      comparator for I18NLEVEL=1, but not necessarily the default\n   for I18NLEVEL=2.)
      The selection of the default comparator MAY be\n   adjustable by the server
      administrator, and MAY be sensitive to the\n   current user.  Once the IMAP
      connection enters authenticated state,\n   the default comparator MUST remain
      static for the remainder of that\n   connection.\n   Note that since SEARCH
      uses the substring operation, IMAP servers can\n   only implement collations
      that offer the substring operation (see\n   [RFC4790], Section 4.2.2).  Since
      SORT uses the ordering operation\n   (which in turn uses the equality operation),
      IMAP servers that\n   advertise the SORT extension can only implement collations
      that offer\n   all three operations (see [RFC4790], Sections 4.2.2-4.2.4).\n
      \  If the active collation does not provide the operations needed by an\n   IMAP
      command, the server MUST respond with a tagged BAD.\n"
    title: 4.4.  I18NLEVEL=2 Extension Requirements
  - contents:
    - "4.5.  Compatibility Notes\n   Several server implementations deployed prior
      to the publication of\n   this specification comply with I18NLEVEL=1 (see Section
      4.3), but do\n   not advertise that.  Other legacy servers use the i;ascii-casemap\n
      \  comparator (see [RFC4790]).\n   There is no good way for a client to know
      which comparator a legacy\n   server uses.  If the client has to assume the
      worst, it may end up\n   doing expensive local operations to obtain i;unicode-casemap\n
      \  comparisons even though the server implements it.\n   Legacy server implementations
      which comply with I18NLEVEL=1 should be\n   updated to advertise I18NLEVEL=1.
      \ All server implementations should\n   eventually be updated to comply with
      the I18NLEVEL=2 extension.\n"
    title: 4.5.  Compatibility Notes
  - contents:
    - "4.6.  Comparators and Character Encodings\n   RFC 3501, Section 6.4.4, says:\n
      \        In all search keys that use strings, a message matches the key\n         if
      the string is a substring of the field.  The matching is\n         case-insensitive.\n
      \  When performing the SEARCH operation, the active comparator is\n   applied
      instead of the case-insensitive matching specified above.\n   An IMAP server
      which performs collation operations (e.g., as part of\n   commands such as SEARCH,
      SORT, and THREAD) does so according to the\n   following procedure:\n   (a)
      MIME encoding (for example, see [RFC2047] for headers and\n       [RFC2045]
      for body parts) MUST be removed in the texts being\n       collated.\n       If
      MIME encoding removal fails for a message (e.g., a body part\n       of the
      message has an unsupported Content-Transfer-Encoding, uses\n       characters
      not allowed by the Content-Transfer-Encoding, etc.),\n       the collation of
      this message is undefined by this specification,\n       and is handled in an
      implementation-dependent manner.\n   (b) The decoded text from (a) MUST be converted
      to the charset\n       expected by the active comparator.\n   (c) For the substring
      operation:\n       If step (b) failed (e.g., the text is in an unknown charset,\n
      \      contains a sequence that is not valid according in that charset,\n       etc.),
      the original decoded text from (a) (i.e., before the\n       charset conversion
      attempt) is collated using the i;octet\n       comparator (see [RFC4790]).\n
      \      If step (b) was successful, the converted text from (b) is\n       collated
      according to the active comparator.\n       For the ordering operation:\n       All
      strings that were successfully converted by step (b) are\n       separated from
      all strings that failed step (b).  Strings in each\n       group are collated
      independently.  All strings successfully\n       converted by step (b) are then
      validated by the active\n       comparator.  Strings that pass validation are
      collated using the\n       active comparator.  All strings that either fail
      step (b) or fail\n       the active collation's validity operation are collated
      (after\n       applying step (a)) using the i;octet comparator (see [RFC4790]).\n
      \      The resulting sorted list is produced by appending all collated\n       \"failed\"
      strings after all strings collated using the active\n       comparator.\n       Example:
      The following example demonstrates ordering of 4\n       different strings using
      the i;unicode-casemap [UCM] comparator.\n       Strings are represented using
      hexadecimal notation used by ABNF\n       [RFC5234].\n       (1) %xD0 %xC0 %xD0
      %xBD %xD0 %xB4 %xD1 %x80 %xD0 %xB5\n           %xD0 %xB9 (labeled with charset=UTF-8)\n
      \      (2) %xD1 %x81 %xD0 %x95 %xD0 %xA0 %xD0 %x93 %xD0 %x95\n           %xD0
      %x99 (labeled with charset=UTF-8)\n       (3) %xD0 %x92 %xD0 %xB0 %xD1 %x81
      %xD0 %xB8 %xD0 %xBB\n           %xD0 %xB8 %xFF %xB9 (labeled with charset=UTF-8)\n
      \      (4) %xE1 %xCC %xC5 %xCB %xD3 %xC5 %xCA (labeled with\n           charset=KOI8-R)\n
      \      Step (b) will convert string (4) to the following sequence of\n       octets
      (in UTF-8):\n       %xD0 %x90 %xD0 %xBB %xD0 %xB5 %xD0 %xBA %xD1 %x81 %xD0\n
      \      %xB5 %xD0 %xB9\n       and will reject strings (1) and (3), as they contain
      octets not\n       allowed in charset=UTF-8.\n       After that, using the i;unicode-casemap
      collation, string (4)\n       will collate before string (2).  Using the i;octet
      collation on\n       the original strings, string (3) will collate before string
      (1).\n       So the final ordering is as follows: (4) (2) (3) (1).\n   If the
      substring operation (e.g., IMAP SEARCH) of the active\n   comparator returns
      the \"undefined\" result (see Section 4.2.3 of\n   [RFC4790]) for either the
      text specified in the SEARCH command or the\n   message text, then the operation
      is repeated on the result of step\n   (a) using the i;octet comparator.\n   The
      ordering operation (e.g., IMAP SORT and THREAD) SHOULD collate\n   the following
      together: strings encoded using unknown or invalid\n   character encodings,
      strings in unrecognized charsets, and invalid\n   input (as defined by the active
      collation).\n"
    title: 4.6.  Comparators and Character Encodings
  - contents:
    - "4.7.  COMPARATOR Command\n   Arguments: Optional comparator order arguments.\n
      \  Response:  A possible COMPARATOR response (see Section 4.8).\n   Result:
      \   OK - Command completed\n              NO - No matching comparator found\n
      \             BAD - Arguments invalid\n   The COMPARATOR command is valid in
      authenticated and selected states.\n   The COMPARATOR command is used to determine
      or change the active\n   comparator.  When issued with no arguments, it results
      in a\n   COMPARATOR response indicating the currently active comparator.\n   When
      issued with one or more comparator arguments, it changes the\n   active comparator
      as directed.  (If more than one installed\n   comparator is matched by an argument,
      the first argument wins.) The\n   COMPARATOR response lists all matching comparators
      if more than one\n   matches the specified patterns.\n   The argument \"default\"
      refers to the server's default comparator.\n   Otherwise, each argument is a
      collation specification as defined in\n   the Internet Application Protocol
      Comparator Registry [RFC4790].\n        < The client requests activating a Czech
      comparator if possible,\n          or else a generic international comparator
      which it considers\n          suitable for Czech.  The server picks the first
      supported\n          comparator. >\n        C: A001 COMPARATOR \"cz;*\" i;basic\n
      \       S: * COMPARATOR i;basic\n        S: A001 OK Will use i;basic for collation\n"
    title: 4.7.  COMPARATOR Command
  - contents:
    - "4.8.  COMPARATOR Response\n   Contents:  The active comparator.  An optional
      list of available\n               matching comparators\n   The COMPARATOR response
      occurs as a result of a COMPARATOR command.\n   The first argument in the comparator
      response is the name of the\n   active comparator.  The second argument is a
      list of comparators\n   which matched any of the arguments to the COMPARATOR
      command and is\n   present only if more than one match is found.\n"
    title: 4.8.  COMPARATOR Response
  - contents:
    - "4.9.  BADCOMPARATOR Response Code\n   This response code SHOULD be returned
      as a result of server failing\n   an IMAP command (returning NO), when the server
      knows that none of\n   the specified comparators match the requested comparator(s).\n"
    title: 4.9.  BADCOMPARATOR Response Code
  - contents:
    - "4.10.  Formal Syntax\n   The following syntax specification inherits ABNF [RFC5234]
      rules from\n   IMAP4rev1 [RFC3501] and the Internet Application Protocol Comparator\n
      \  Registry [RFC4790].\n    command-auth      =/ comparator-cmd\n    resp-text-code
      \   =/ \"BADCOMPARATOR\"\n    comparator-cmd    = \"COMPARATOR\" *(SP comp-order-quoted)\n
      \   response-payload  =/ comparator-data\n    comparator-data   = \"COMPARATOR\"
      SP comp-sel-quoted [SP \"(\"\n                        comp-id-quoted *(SP comp-id-quoted)
      \")\"]\n    comp-id-quoted    = astring\n        ; Once any literal wrapper
      or quoting is removed, this\n        ; follows the collation-id rule from [RFC4790]\n
      \   comp-order-quoted = astring\n        ; Once any literal wrapper or quoting
      is removed, this\n        ; follows the collation-order rule from [RFC4790]\n
      \   comp-sel-quoted   = astring\n        ; Once any literal wrapper or quoting
      is removed, this\n        ; follows the collation-selected rule from [RFC4790]\n"
    title: 4.10.  Formal Syntax
  title: 4.  I18NLEVEL=1 and I18NLEVEL=2 Extensions
- contents:
  - "5.  Other IMAP Internationalization Issues\n   The following sections provide
    an overview of various other IMAP\n   internationalization issues.  These issues
    are not resolved by this\n   specification, but could be resolved by other standards
    work, such as\n   that being done by the EAI working group (see [IMAP-EAI]).\n"
  - contents:
    - "5.1.  Unicode Userids and Passwords\n   IMAP4rev1 currently restricts the userid
      and password fields of the\n   LOGIN command to US-ASCII.  The \"userid\" and
      \"password\" fields of the\n   IMAP LOGIN command are restricted to US-ASCII
      only until a future\n   standards track RFC states otherwise.  Servers are encouraged
      to\n   validate both fields to make sure they conform to the formal syntax\n
      \  of UTF-8 and to reject the LOGIN command if that syntax is violated.\n   Servers
      MAY reject the LOGIN command if either the \"userid\" or\n   \"password\" field
      contains an octet with the highest bit set.\n   When AUTHENTICATE is used, some
      servers may support userids and\n   passwords in Unicode [RFC3490] since SASL
      (see [RFC4422]) allows\n   that.  However, such userids cannot be used as part
      of email\n   addresses.\n"
    title: 5.1.  Unicode Userids and Passwords
  - contents:
    - "5.2.  UTF-8 Mailbox Names\n   The modified UTF-7 mailbox naming convention
      described in Section\n   5.1.3 of RFC 3501 is best viewed as an transition from
      the status quo\n   in 1996 when modified UTF-7 was first specified.  At that
      time, there\n   was widespread unofficial use of local character sets such as
      ISO-\n   8859-1 and Shift-JIS for non-ASCII mailbox names, with resultant\n
      \  non-interoperability.\n   The requirements in Section 5.1 of RFC 3501 are
      very important if\n   we're ever going to be able to deploy UTF-8 mailbox names.
      \ Servers\n   are encouraged to enforce them.\n"
    title: 5.2.  UTF-8 Mailbox Names
  - contents:
    - "5.3.  UTF-8 Domains, Addresses, and Mail Headers\n   There is now an IETF standard
      for \"Internationalizing Domain Names in\n   Applications (IDNA)\" [RFC3490].
      \ While IMAP clients are free to\n   support this standard, an argument can
      be made that it would be\n   helpful to simple clients if the IMAP server could
      perform this\n   conversion (the same argument would apply to MIME header encoding\n
      \  [RFC2047]).  However, it would be unwise to move forward with such\n   work
      until the work in progress to define the format of international\n   email addresses
      is complete.\n"
    title: 5.3.  UTF-8 Domains, Addresses, and Mail Headers
  title: 5.  Other IMAP Internationalization Issues
- contents:
  - "6.  IANA Considerations\n   IANA added LANGUAGE, I18NLEVEL=1, and I18NLEVEL=2
    to the IMAP4\n   Capabilities Registry.\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Security Considerations\n   The LANGUAGE extension makes a new command available
    in \"Not\n   Authenticated\" state in IMAP.  Some IMAP implementations run with\n
    \  root privilege when the server is in \"Not Authenticated\" state and do\n   not
    revoke that privilege until after authentication is complete.\n   Such implementations
    are particularly vulnerable to buffer overflow\n   security errors at this stage
    and need to implement parsing of this\n   command with extra care.\n   A LANGUAGE
    command issued prior to activation of a security layer is\n   subject to an active
    attack that suppresses or modifies the\n   negotiation, and thus makes STARTTLS
    or authentication error messages\n   more difficult to interpret.  This is not
    a new attack as the error\n   messages themselves are subject to active attack.
    \ Clients MUST re-\n   issue the LANGUAGE command once a security layer is active,
    in order\n   to prevent this attack from impacting subsequent protocol operations.\n
    \  LANGUAGE, I18NLEVEL=1, and I18NLEVEL=2 extensions use the UTF-8\n   charset;
    thus, the security considerations for UTF-8 [RFC3629] are\n   relevant.  However,
    neither uses UTF-8 for identifiers, so the most\n   serious concerns do not apply.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Acknowledgements\n   The LANGUAGE extension is based on a previous document
    by Mike\n   Gahrns, a substantial portion of the text in that section was written\n
    \  by him.  Many people have participated in discussions about an IMAP\n   Language
    extension in the various fora of the IETF and Internet\n   working groups, so
    any list of contributors is bound to be\n   incomplete.  However, the authors
    would like to thank Andrew McCown\n   for early work on the original proposal,
    John Myers for suggestions\n   regarding the namespace issue, along with Jutta
    Degener, Mark\n   Crispin, Mark Pustilnik, Larry Osterman, Cyrus Daboo, Martin
    Duerst,\n   Timo Sirainen, Ben Campbell, and Magnus Nystrom for their many\n   suggestions
    that have been incorporated into this document.\n   Initial discussion of the
    I18NLEVEL=2 extension involved input from\n   Mark Crispin and other participants
    of the IMAP Extensions WG.\n"
  title: 8.  Acknowledgements
- contents:
  - "9.  Relevant Sources of Documents for Internationalized IMAP\n    Implementations\n
    \  This is a non-normative list of sources to consider when implementing\n   i18n-aware
    IMAP software.\n      o The LANGUAGE and I18NLEVEL=2 extensions to IMAP (this\n
    \       specification).\n      o The 8-bit rules for mailbox naming in Section
    5.1 of RFC 3501.\n      o The Mailbox International Naming Convention in Section
    5.1.3 of\n        RFC 3501.\n      o MIME [RFC2045] for message bodies.\n      o
    MIME header encoding [RFC2047] for message headers.\n      o The IETF EAI working
    group.\n      o MIME Parameter Value and Encoded Word Extensions [RFC2231] for\n
    \       filenames.  Quality IMAP server implementations will\n        automatically
    combine multipart parameters when generating the\n        BODYSTRUCTURE.  There
    is also some deployed non-standard use of\n        MIME header encoding inside
    double quotes for filenames.\n      o IDNA [RFC3490] and punycode [RFC3492] for
    domain names\n        (currently only relevant to IMAP clients).\n      o The
    UTF-8 charset [RFC3629].\n      o The IETF policy on Character Sets and Languages
    [RFC2277].\n"
  title: 9.  Relevant Sources of Documents for Internationalized IMAP
- contents:
  - "10.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in
    RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
    1997.\n   [RFC2277]  Alvestrand, H., \"IETF Policy on Character Sets and\n              Languages\",
    BCP 18, RFC 2277, January 1998.\n   [RFC2342]  Gahrns, M. and C. Newman, \"IMAP4
    Namespace\", RFC 2342, May\n              1998.\n   [RFC3501]  Crispin, M., \"INTERNET
    MESSAGE ACCESS PROTOCOL - VERSION\n              4rev1\", RFC 3501, March 2003.\n
    \  [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n              10646\",
    STD 63, RFC 3629, November 2003.\n   [RFC5234]  Crocker, D., Ed., and P. Overell,
    \"Augmented BNF for\n              Syntax Specifications: ABNF\", STD 68, RFC
    5234, January\n              2008.\n   [RFC4422]  Melnikov, A., Ed., and K. Zeilenga,
    Ed., \"Simple\n              Authentication and Security Layer (SASL)\", RFC 4422,
    June\n              2006.\n   [RFC4466]  Melnikov, A. and C. Daboo, \"Collected
    Extensions to IMAP4\n              ABNF\", RFC 4466, April 2006.\n   [RFC4646]
    \ Phillips, A. and M. Davis, \"Tags for Identifying\n              Languages\",
    BCP 47, RFC 4646, September 2006.\n   [RFC4647]  Phillips, A. and M. Davis, \"Matching
    of Language Tags\",\n              BCP 47, RFC 4647, September 2006.\n   [RFC4790]
    \ Newman, C., Duerst, M., and A. Gulbrandsen, \"Internet\n              Application
    Protocol Collation Registry\", RFC 4790, March\n              2007.\n   [SORT]
    \    Crispin, M. and K. Murchison, \"Internet Message Access\n              Protocol
    - SORT and THREAD Extensions\", RFC 5256, June\n              2008.\n   [UCM]
    \     Crispin, M., \"i;unicode-casemap - Simple Unicode Collation\n              Algorithm\",
    RFC 5051, October 2007.\n   [RFC2045]  Freed, N. and N. Borenstein, \"Multipurpose
    Internet Mail\n              Extensions (MIME) Part One: Format of Internet Message\n
    \             Bodies\", RFC 2045, November 1996.\n   [RFC2047]  Moore, K., \"MIME
    (Multipurpose Internet Mail Extensions)\n              Part Three: Message Header
    Extensions for Non-ASCII Text\",\n              RFC 2047, November 1996.\n"
  title: 10.  Normative References
- contents:
  - "11. Informative References\n   [RFC2231]  Freed, N. and K. Moore, \"MIME Parameter
    Value and Encoded\n              Word Extensions: Character Sets, Languages, and\n
    \             Continuations\", RFC 2231, November 1997.\n   [RFC3490]  Faltstrom,
    P., Hoffman, P., and A. Costello,\n              \"Internationalizing Domain Names
    in Applications (IDNA)\",\n              RFC 3490, March 2003.\n   [RFC3492]  Costello,
    A., \"Punycode: A Bootstring encoding of Unicode\n              for Internationalized
    Domain Names in Applications\n              (IDNA)\", RFC 3492, March 2003.\n
    \  [METADATA] Daboo, C., \"IMAP METADATA Extension\", Work in Progress,\n              April
    2008.\n   [IMAP-EAI] Resnick, P., and C. Newman, \"IMAP Support for UTF-8\", Work\n
    \             in Progress, November 2007.\n"
  title: 11. Informative References
- contents:
  - "Authors' Addresses\n   Chris Newman\n   Sun Microsystems\n   3401 Centrelake
    Dr., Suite 410\n   Ontario, CA 91761\n   US\n   EMail: chris.newman@sun.com\n
    \  Arnt Gulbrandsen\n   Oryx Mail Systems GmbH\n   Schweppermannstr. 8\n   D-81671
    Muenchen\n   Germany\n   EMail: arnt@oryx.com\n   Fax: +49 89 4502 9758\n   Alexey
    Melnikov\n   Isode Limited\n   5 Castle Business Village, 36 Station Road,\n   Hampton,
    Middlesex, TW12 2BX, UK\n   EMail: Alexey.Melnikov@isode.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
