- title: __initial_text__
  contents:
  - '      Guidelines for Writers of RTP Payload Format Specifications

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides general guidelines aimed at assisting the\n\
    \   authors of RTP Payload Format specifications in deciding on good\n   formats.\
    \  These guidelines attempt to capture some of the experience\n   gained with\
    \ RTP as it evolved during its development.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides general guidelines aimed at assisting\
    \ the\n   authors of RTP [9] Payload Format specifications in deciding on good\n\
    \   formats.  These guidelines attempt to capture some of the experience\n   gained\
    \ with RTP as it evolved during its development.\n   The principles outlined in\
    \ this document are applicable to almost all\n   data types, but are framed in\
    \ examples of audio and video codecs for\n   clarity.\n"
- title: 2.  Background
  contents:
  - "2.  Background\n   RTP was designed around the concept of Application Level Framing\n\
    \   (ALF), first described by Clark and Tennenhouse [2]. The key argument\n  \
    \ underlying ALF is that there are many different ways an application\n   might\
    \ be able to cope with misordered or lost packets.  These range\n   from ignoring\
    \ the loss, to re-sending the missing data (either from a\n   buffer or by regenerating\
    \ it), and to sending new data which\n   supersedes the missing data.  The application\
    \ only has this choice if\n   the transport protocol is dealing with data in \"\
    Application Data\n   Units\" (ADUs). An ADU contains data that can be processed\
    \ out-of-\n   order with respect to other ADUs.  Thus the ADU is the minimum unit\n\
    \   of error recovery.\n   The key property of a transport protocol for ADUs is\
    \ that each ADU\n   contains sufficient information to be processed by the receiver\n\
    \   immediately.  An example is a video stream, wherein the compressed\n   video\
    \ data in an ADU must be capable of being decompressed regardless\n   of whether\
    \ previous ADUs have been received.  Additionally the ADU\n   must contain \"\
    header\" information detailing its position in the video\n   image and the frame\
    \ from which it came.\n   Although an ADU need not be a packet, there are many\
    \ applications for\n   which a packet is a natural ADU.  Such ALF applications\
    \ have the\n   great advantage that all packets that are received can be processed\n\
    \   by the application immediately.\n   RTP was designed around an ALF philosophy.\
    \  In the context of a\n   stream of RTP data, an RTP packet header provides sufficient\n\
    \   information to be able to identify and decode the packet irrespective\n  \
    \ of whether it was received in order, or whether preceding packets\n   have been\
    \ lost. However, these arguments only hold good if the RTP\n   payload formats\
    \ are also designed using an ALF philosophy.\n   Note that this also implies smart,\
    \ network aware, end-points. An\n   application using RTP should be aware of the\
    \ limitations of the\n   underlying network, and should adapt its transmission\
    \ to match those\n   limitations.  Our experience is that a smart end-point implementation\n\
    \   can achieve significantly better performance on real IP-based\n   networks\
    \ than a naive implementation.\n"
- title: 3.  Channel Characteristics
  contents:
  - "3.  Channel Characteristics\n   We identify the following channel characteristics\
    \ that influence the\n   best-effort transport of RTP over UDP/IP in the Internet:\n\
    \   o  Packets may be lost\n   o  Packets may be duplicated\n   o  Packets may\
    \ be reordered in transit\n   o  Packets will be fragmented if they exceed the\
    \ MTU of the\n      underlying network\n   The loss characteristics of a link\
    \ may vary widely over short time\n   intervals.\n   Although fragmentation is\
    \ not a disastrous phenomenon if it is a rare\n   occurrence, relying on IP fragmentation\
    \ is a bad design strategy as\n   it significantly increases the effective loss\
    \ rate of a network and\n   decreases goodput.  This is because if one fragment\
    \ is lost, the\n   remaining fragments (which have used up bottleneck bandwidth)\
    \ will\n   then need to be discarded by the receiver.  It also puts additional\n\
    \   load on the routers performing fragmentation and on the end-systems\n   re-assembling\
    \ the fragments.\n   In addition, it is noted that the transit time between two\
    \ hosts on\n   the Internet will not be constant.  This is due to two effects\
    \ -\n   jitter caused by being queued behind cross-traffic, and routing\n   changes.\
    \  The former is possible to characterise and compensate for\n   by using a playout\
    \ buffer, but the latter is impossible to predict\n   and difficult to accommodate\
    \ gracefully.\n"
- title: 4.  Guidelines
  contents:
  - "4.  Guidelines\n   We identify the following requirements of RTP payload format\n\
    \   specifications:\n   +  A payload format should be devised so that the stream\
    \ being\n      transported is still useful even in the presence of a moderate\n\
    \      amount of packet loss.\n   +  Ideally all the contents of every packet\
    \ should be possible to be\n      decoded and played out irrespective of whether\
    \ preceding packets\n      have been lost or arrive late.\n   The first of these\
    \ requirements is based on the nature of the\n   Internet.  Although it may be\
    \ possible to engineer parts of the\n   Internet to produce low loss rates through\
    \ careful provisioning or\n   the use of non-best-effort services, as a rule payload\
    \ formats should\n   not be designed for these special purpose environments. \
    \ Payload\n   formats should be designed to be used in the public Internet with\n\
    \   best effort service, and thus should expect to see moderate loss\n   rates.\
    \  For example, a 5% loss rate is not uncommon.  We note that\n   TCP steady state\
    \ models [3][4][6] indicate that a 5% loss rate with a\n   1KByte packet size\
    \ and 200ms round-trip time will result in TCP\n   achieving a throughput of around\
    \ 180Kbit/s.  Higher loss rates,\n   smaller packet sizes, or a larger RTT are\
    \ required to constrain TCP\n   to lower data rates.  For the most part, it is\
    \ such TCP traffic that\n   is producing the background loss that many RTP flows\
    \ must co-exist\n   with.  Without explicit congestion notification (ECN) [8],\
    \ loss must\n   be considered an intrinsic property of best-effort parts of the\n\
    \   Internet.\n   When payload formats do not assume packet loss will occur, they\n\
    \   should state this explicitly up front, and they will be considered\n   special\
    \ purpose payload formats, unsuitable for use on the public\n   Internet without\
    \ special support from the network infrastructure.\n   The second of these requirements\
    \ is more explicit about how RTP\n   should cope with loss.  If an RTP payload\
    \ format is properly\n   designed, every packet that is actually received should\
    \ be useful.\n   Typically this implies the following guidelines are adhered to:\n\
    \   +  Packet boundaries should coincide with codec frame boundaries.\n      Thus\
    \ a packet should normally consist of one or more complete\n      codec frames.\n\
    \   +  A codec's minimum unit of data should never be packetised so that\n   \
    \   it crosses a packet boundary unless it is larger than the MTU.\n   +  If a\
    \ codec's frame size is larger than the MTU, the payload format\n      must not\
    \ rely on IP fragmentation.  Instead it must define its own\n      fragmentation\
    \ mechanism.  Such mechanisms may involve codec-\n      specific information that\
    \ allows decoding of fragments.\n      Alternatively they might allow codec-independent\
    \ packet-level\n      forward error correction [5] to be applied that cannot be\
    \ used\n      with IP-level fragmentation.\n   In the abstract, a codec frame\
    \ (i.e., the ADU or the minimum size\n   unit that has semantic meaning when handed\
    \ to the codec) can be of\n   arbitrary size.  For PCM audio, it is one byte.\
    \  For GSM audio, a\n   frame corresponds to 20ms of audio.  For H.261 video,\
    \ it is a Group\n   of Blocks (GOB), or one twelfth of a CIF video frame.\n  \
    \ For PCM, it does not matter how audio is packetised, as the ADU size\n   is\
    \ one byte.  For GSM audio, arbitrary packetisation would split a\n   20ms frame\
    \ over two packets, which would mean that if one packet were\n   lost, partial\
    \ frames in packets before and after the loss are\n   meaningless.  This means\
    \ that not only were the bits in the missing\n   packet lost, but also that additional\
    \ bits in neighboring packets\n   that used bottleneck bandwidth were effectively\
    \ also lost because the\n   receiver must throw them away.  Instead, we would\
    \ packetise GSM by\n   including several complete GSM frames in a packet; typically\
    \ four GSM\n   frames are included in current implementations.  Thus every packet\n\
    \   received can be decoded because even in the presence of loss, no\n   incomplete\
    \ frames are received.\n   The H.261 specification allows GOBs to be up to 3KBytes\
    \ long,\n   although most of the time they are smaller than this.  It might be\n\
    \   thought that we should insert a group of blocks into a packet when it\n  \
    \ fits, and arbitrarily split the GOB over two or more packets when a\n   GOB\
    \ is large.  In the first version of the H.261 payload format, this\n   is what\
    \ was done.  However, this still means that there are\n   circumstances where\
    \ H.261 packets arrive at the receiver and must be\n   discarded because other\
    \ packets were lost - a loss multiplier effect\n   that we wish to avoid.  In\
    \ fact there are smaller units than GOBs in\n   the H.261 bit-stream called macroblocks,\
    \ but they are not\n   identifiable without parsing from the start of the GOB.\
    \  However, if\n   we provide a little additional information at the start of\
    \ each\n   packet, we can reinstate information that would normally be found by\n\
    \   parsing from the start of the GOB, and we can packetise H.261 by\n   splitting\
    \ the data stream on macroblock boundaries.  This is a less\n   obvious packetisation\
    \ for H.261 than the GOB packetisation, but it\n   does mean that a slightly smarter\
    \ depacketiser at the receiver can\n   reconstruct a valid H.261 bitstream from\
    \ a stream of RTP packets that\n   has experienced loss, and not have to discard\
    \ any of the data that\n   arrived.\n   An additional guideline concerns codecs\
    \ that require the decoder\n   state machine to keep step with the encoder state\
    \ machine.  Many\n   audio codecs such as LPC or GSM are of this form.  Typically\
    \ they are\n   loss tolerant, in that after a loss, the predictor coefficients\n\
    \   decay, so that after a certain amount of time, the predictor error\n   induced\
    \ by the loss will disappear.  Most codecs designed for\n   telephony services\
    \ are of this form because they were designed to\n   cope with bit errors without\
    \ the decoder predictor state permanently\n   remaining incorrect.  Just packetising\
    \ these formats so that packets\n   consist of integer multiples of codec frames\
    \ may not be optimal, as\n   although the packet received immediately after a\
    \ packet loss can be\n   decoded, the start of the audio stream produced will\
    \ be incorrect\n   (and hence distort the signal) because the decoder predictor\
    \ is now\n   out of step with the encoder.  In principle, all of the decoder's\n\
    \   internal state could be added using a header attached to the start of\n  \
    \ every packet, but for lower bit-rate encodings, this state is so\n   substantial\
    \ that the bit rate is no longer low.  However, a\n   compromise can usually be\
    \ found, where a greatly reduced form of\n   decoder state is sent in every packet,\
    \ which does not recreate the\n   encoders predictor precisely, but does reduce\
    \ the magnitude and\n   duration of the distortion produced when the previous\
    \ packet is lost.\n   Such compressed state is, by definition, very dependent\
    \ on the codec\n   in question.  Thus we recommend:\n   +  Payload formats for\
    \ encodings where the decoder contains internal\n      data-driven state that\
    \ attempts to track encoder state should\n      normally consider including a\
    \ small additional header that conveys\n      the most critical elements of this\
    \ state to reduce distortion\n      after packet loss.\n   A similar issue arises\
    \ with codec parameters, and whether or not they\n   should be included in the\
    \ payload format. An example is with a codec\n   that has a choice of huffman\
    \ tables for compression.  The codec may\n   use either huffman table 1 or table\
    \ 2 for encoding and the receiver\n   needs to know this information for correct\
    \ decoding. There are a\n   number of ways in which this kind of information can\
    \ be conveyed:\n   o  Out of band signalling, prior to media transmission.\n \
    \  o  Out of band signalling, but the parameter can be changed mid-\n      session.\
    \  This requires synchronization of the change in the media\n      stream.\n \
    \  o  The change is signaled through a change in the RTP payload type\n      field.\
    \ This requires mapping the parameter space into particular\n      payload type\
    \ values and signalling this mapping out-of-band prior\n      to media transmission.\n\
    \   o  Including the parameter in the payload format. This allows for\n      adapting\
    \ the parameter in a robust manner, but makes the payload\n      format less efficient.\n\
    \   Which mechanism to use depends on the utility of changing the\n   parameter\
    \ in mid-session to support application layer adaptation.\n   However, using out-of-band\
    \ signalling to change a parameter in mid-\n   session is generally to be discouraged\
    \ due to the problem of\n   synchronizing the parameter change with the media\
    \ stream.\n"
- title: 4.1.  RTP Header Extensions
  contents:
  - "4.1.  RTP Header Extensions\n   Many RTP payload formats require some additional\
    \ header information\n   to be carried in addition to that included in the fixed\
    \ RTP packet\n   header.  The recommended way of conveying this information is\
    \ in the\n   payload section of the packet. The RTP header extension should not\
    \ be\n   used to convey payload specific information ([9], section 5.3) since\n\
    \   this is inefficient in its use of bandwidth; requires the definition\n   of\
    \ a new RTP profile or profile extension; and makes it difficult to\n   employ\
    \ FEC schemes such as, for example, [7].  Use of an RTP header\n   extension is\
    \ only appropriate for cases where the extension in\n   question applies across\
    \ a wide range of payload types.\n"
- title: 4.2.  Header Compression
  contents:
  - "4.2.  Header Compression\n   Designers of payload formats should also be aware\
    \ of the needs of RTP\n   header compression [1]. In particular, the compression\
    \ algorithm\n   functions best when the RTP timestamp increments by a constant\
    \ value\n   between consecutive packets. Payload formats which rely on sending\n\
    \   packets out of order, such that the timestamp increment is not\n   constant,\
    \ are likely to compress less well than those which send\n   packets in order.\
    \ This has most often been an issue when designing\n   payload formats for FEC\
    \ information, although some video codecs also\n   rely on out-of-order transmission\
    \ of packets at the expense of\n   reduced compression. Although in some cases\
    \ such out-of-order\n   transmission may be the best solution, payload format\
    \ designers are\n   encourage to look for alternative solutions where possible.\n"
- title: 5.  Summary
  contents:
  - "5.  Summary\n   Designing packet formats for RTP is not a trivial task.  Typically\
    \ a\n   detailed knowledge of the codec involved is required to be able to\n \
    \  design a format that is resilient to loss, does not introduce loss\n   magnification\
    \ effects due to inappropriate packetisation, and does\n   not introduce unnecessary\
    \ distortion after a packet loss.  We believe\n   that considerable effort should\
    \ be put into designing packet formats\n   that are well tailored to the codec\
    \ in question.  Typically this\n   requires a very small amount of processing\
    \ at the sender and\n   receiver, but the result can be greatly improved quality\
    \ when\n   operating in typical Internet environments.\n   Designers of new codecs\
    \ for use with RTP should consider making the\n   output of the codec \"naturally\
    \ packetizable\". This implies that the\n   codec should be designed to produce\
    \ a packet stream, rather than a\n   bit-stream; and that that packet stream contains\
    \ the minimal amount\n   of redundancy necessary to ensure that each packet is\
    \ independently\n   decodable with minimal loss of decoder predictor tracking.\
    \ It is\n   recognised that sacrificing some small amount of bandwidth to ensure\n\
    \   greater robustness to packet loss is often a worthwhile tradeoff.\n   It is\
    \ hoped that, in the long run, new codecs should be produced\n   which can be\
    \ directly packetised, without the trouble of designing a\n   codec-specific payload\
    \ format.\n   It is possible to design generic packetisation formats that do not\n\
    \   pay attention to the issues described in this document, but such\n   formats\
    \ are only suitable for special purpose networks where packet\n   loss can be\
    \ avoided by careful engineering at the network layer, and\n   are not suited\
    \ to current best-effort networks.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The guidelines in this document result in RTP\
    \ payload formats that\n   are robust in the presence of real world network conditions.\n\
    \   Designing payload formats for special purpose networks that assume\n   negligable\
    \ loss rates will normally result in slightly better\n   compression, but produce\
    \ formats that are more fragile, thus\n   rendering them easier targets for denial-of-service\
    \ attacks.\n   Designers of payload formats should pay close attention to possible\n\
    \   security issues that might arise from poor implementations of their\n   formats,\
    \ and should be careful to specify the correct behaviour when\n   anomalous conditions\
    \ arise.  Examples include how to process illegal\n   field values, and conditions\
    \ when there are mismatches between length\n   fields and actual data.  Whilst\
    \ the correct action will normally be\n   to discard the packet, possible such\
    \ conditions should be brought to\n   the attention of the implementor to ensure\
    \ that they are trapped\n   properly.\n   The RTP specification covers encryption\
    \ of the payload.  This issue\n   should not normally be dealt with by payload\
    \ formats themselves.\n   However, certain payload formats spread information\
    \ about a\n   particular application data unit over a number of packets, or rely\
    \ on\n   packets which relate to a number of application data units. Care must\n\
    \   be taken when changing the encryption of such streams, since such\n   payload\
    \ formats may constrain the places in a stream where it is\n   possible to change\
    \ the encryption key without exposing sensitive\n   data.\n   Designers of payload\
    \ formats which include FEC should be aware that\n   the automatic addition of\
    \ FEC in response to packet loss may increase\n   network congestion, leading\
    \ to a worsening of the problem which the\n   use of FEC was intended to solve.\
    \ Since this may, at its worst,\n   constitute a denial of service attack, designers\
    \ of such payload\n   formats should take care that appropriate safeguards are\
    \ in place to\n   prevent abuse.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mark Handley\n   AT&T Center for Internet Research at\
    \ ICSI,\n   International Computer Science Institute,\n   1947 Center Street,\
    \ Suite 600,\n   Berkeley, CA 94704, USA\n   EMail: mjh@aciri.org\n   Colin Perkins\n\
    \   Dept of Computer Science,\n   University College London,\n   Gower Street,\n\
    \   London WC1E 6BT, UK.\n   EMail: C.Perkins@cs.ucl.ac.uk\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This document is based on experience gained over several\
    \ years by\n   many people, including Van Jacobson, Steve McCanne, Steve Casner,\n\
    \   Henning Schulzrinne, Thierry Turletti, Jonathan Rosenberg and\n   Christian\
    \ Huitema amongst others.\n"
- title: References
  contents:
  - "References\n   [1]  Casner, S. and V. Jacobson, \"Compressing IP/UDP/RTP Headers\
    \ for\n        Low-Speed Serial Links\", RFC 2508, February 1999.\n   [2]  D.\
    \ Clark and  D. Tennenhouse, \"Architectural Considerations for\n        a New\
    \ Generation of Network Protocols\" Proc ACM Sigcomm 90.\n   [3]  J. Mahdavi and\
    \ S. Floyd. \"TCP-friendly unicast rate-based flow\n        control\". Note sent\
    \ to end2end-interest mailing list, Jan 1997.\n   [4]  M. Mathis, J. Semske, J.\
    \ Mahdavi, and T. Ott. \"The macro-scopic\n        behavior of the TCP congestion\
    \ avoidance algorithm\". Computer\n        Communication Review, 27(3), July 1997.\n\
    \   [5]  J. Nonnenmacher, E. Biersack, Don Towsley, \"Parity-Based Loss\n    \
    \    Recovery for Reliable Multicast Transmission\", Proc ACM Sigcomm\n   [6]\
    \  J. Padhye, V. Firoiu, D. Towsley, J.  Kurose, \"Modeling TCP\n        Throughput:\
    \ A Simple Model and its Empirical Validation\", Proc.\n        ACM Sigcomm 1998.\n\
    \   [7]  Perkins, C., Kouvelas, I., Hodson, O., Hardman, V., Handley, M.,\n  \
    \      Bolot, J.C., Vega-Garcia, A. and S. Fosse-Parisis, \"RTP Payload\n    \
    \    for Redundant Audio Data\", RFC 2198, September 1997.\n   [8]  Ramakrishnan,\
    \ K. and  S. Floyd, \"A Proposal to add Explicit\n        Congestion Notification\
    \ (ECN) to IP\", RFC 2481, January 1999.\n   [9]  Schulzrinne, H., Casner, S.,\
    \ Frederick, R. and V. Jacobson,\n        \"Real-Time Transport Protocol\", RFC\
    \ 1889, January 1996.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
