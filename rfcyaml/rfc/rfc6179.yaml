- title: __initial_text__
  contents:
  - ''
- title: Internet Research Task Force (IRTF)                      F. Templin, Ed.
  contents:
  - "Internet Research Task Force (IRTF)                      F. Templin, Ed.\n  \
    \            The Internet Routing Overlay Network (IRON)\n"
- title: Abstract
  contents:
  - "Abstract\n   Since the Internet must continue to support escalating growth due\
    \ to\n   increasing demand, it is clear that current routing architectures and\n\
    \   operational practices must be updated.  This document proposes an\n   Internet\
    \ Routing Overlay Network (IRON) that supports sustainable\n   growth while requiring\
    \ no changes to end systems and no changes to\n   the existing routing system.\
    \  IRON further addresses other important\n   issues including routing scaling,\
    \ mobility management, multihoming,\n   traffic engineering and NAT traversal.\
    \  While business considerations\n   are an important determining factor for widespread\
    \ adoption, they are\n   out of scope for this document.  This document is a product\
    \ of the\n   IRTF Routing Research Group.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Research Task\n   Force (IRTF).\
    \  The IRTF publishes the results of Internet-related\n   research and development\
    \ activities.  These results might not be\n   suitable for deployment.  This RFC\
    \ represents the individual\n   opinion(s) of one or more members of the Internet\
    \ Research Task Force\n   (IRTF) Research Group of the Internet Research Task\
    \ Force (IRTF).\n   Documents approved for publication by the IRSG are not a candidate\n\
    \   for any level of Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6179.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Terminology .....................................................5\n  \
    \ 3. The Internet Routing Overlay Network ............................7\n    \
    \  3.1. IRON Client ................................................9\n      3.2.\
    \ IRON Serving Router .......................................10\n      3.3. IRON\
    \ Relay Router .........................................10\n   4. IRON Organizational\
    \ Principles .................................11\n   5. IRON Initialization ............................................13\n\
    \      5.1. IRON Relay Router Initialization ..........................13\n  \
    \    5.2. IRON Serving Router Initialization ........................14\n    \
    \  5.3. IRON Client Initialization ................................15\n   6. IRON\
    \ Operation .................................................15\n      6.1. IRON\
    \ Client Operation .....................................16\n      6.2. IRON Serving\
    \ Router Operation .............................17\n      6.3. IRON Relay Router\
    \ Operation ...............................18\n      6.4. IRON Reference Operating\
    \ Scenarios ........................18\n           6.4.1. Both Hosts within IRON\
    \ EUNs ........................19\n           6.4.2. Mixed IRON and Non-IRON Hosts\
    \ ......................21\n      6.5. Mobility, Multihoming, and Traffic Engineering\n\
    \           Considerations ............................................24\n  \
    \         6.5.1. Mobility Management ................................24\n    \
    \       6.5.2. Multihoming ........................................25\n      \
    \     6.5.3. Inbound Traffic Engineering ........................25\n        \
    \   6.5.4. Outbound Traffic Engineering .......................25\n      6.6.\
    \ Renumbering Considerations ................................25\n      6.7. NAT\
    \ Traversal Considerations ..............................26\n      6.8. Multicast\
    \ Considerations ..................................26\n      6.9. Nested EUN Considerations\
    \ .................................26\n           6.9.1. Host A Sends Packets\
    \ to Host Z .....................28\n           6.9.2. Host Z Sends Packets to\
    \ Host A .....................28\n   7. Implications for the Internet ..................................29\n\
    \   8. Additional Considerations ......................................30\n  \
    \ 9. Related Initiatives ............................................30\n   10.\
    \ Security Considerations .......................................31\n   11. Acknowledgements\
    \ ..............................................31\n   12. References ....................................................32\n\
    \      12.1. Normative References .....................................32\n  \
    \    12.2. Informative References ...................................32\n   Appendix\
    \ A. IRON VPs over Internetworks with Different\n               Address Families\
    \ ......................................35\n   Appendix B. Scaling Considerations\
    \ ................................36\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Growth in the number of entries instantiated in the Internet\
    \ routing\n   system has led to concerns regarding unsustainable routing scaling\n\
    \   [RADIR].  Operational practices such as the increased use of\n   multihoming\
    \ with Provider-Independent (PI) addressing are resulting\n   in more and more\
    \ fine-grained prefixes being injected into the\n   routing system from more and\
    \ more end user networks.  Furthermore,\n   depletion of the public IPv4 address\
    \ space has raised concerns for\n   both increased address space fragmentation\
    \ (leading to yet further\n   routing table entries) and an impending address\
    \ space run-out\n   scenario.  At the same time, the IPv6 routing system is beginning\
    \ to\n   see growth [BGPMON] which must be managed in order to avoid the same\n\
    \   routing scaling issues the IPv4 Internet now faces.  Since the\n   Internet\
    \ must continue to scale to accommodate increasing demand, it\n   is clear that\
    \ new routing methodologies and operational practices are\n   needed.\n   Several\
    \ related works have investigated routing scaling issues.\n   Virtual Aggregation\
    \ (VA) [GROW-VA] and Aggregation in Increasing\n   Scopes (AIS) [EVOLUTION] are\
    \ global routing proposals that introduce\n   routing overlays with Virtual Prefixes\
    \ (VPs) to reduce the number of\n   entries required in each router's Forwarding\
    \ Information Base (FIB)\n   and Routing Information Base (RIB).  Routing and\
    \ Addressing in\n   Networks with Global Enterprise Recursion (RANGER) [RFC5720]\
    \ examines\n   recursive arrangements of enterprise networks that can apply to\
    \ a\n   very broad set of use-case scenarios [RFC6139].  IRON specifically\n \
    \  adopts the RANGER Non-Broadcast, Multiple Access (NBMA) tunnel\n   virtual-interface\
    \ model, and uses Virtual Enterprise Traversal (VET)\n   [INTAREA-VET] and the\
    \ Subnetwork Adaptation and Encapsulation Layer\n   (SEAL) [INTAREA-SEAL] as its\
    \ functional building blocks.\n   This document proposes an Internet Routing Overlay\
    \ Network (IRON)\n   with goals of supporting sustainable growth while requiring\
    \ no\n   changes to the existing routing system.  IRON borrows concepts from\n\
    \   VA and AIS, and further borrows concepts from the Internet Vastly\n   Improved\
    \ Plumbing (Ivip) [IVIP-ARCH] architecture proposal along with\n   its associated\
    \ Translating Tunnel Router (TTR) mobility extensions\n   [TTRMOB].  Indeed, the\
    \ TTR model to a great degree inspired the IRON\n   mobility architecture design\
    \ discussed in this document.  The Network\n   Address Translator (NAT) traversal\
    \ techniques adapted for IRON were\n   inspired by the Simple Address Mapping\
    \ for Premises Legacy Equipment\n   (SAMPLE) proposal [SAMPLE].\n   IRON supports\
    \ scalable addressing without changing the current BGP\n   [RFC4271] routing system.\
    \  IRON observes the Internet Protocol\n   standards [RFC0791][RFC2460].  Other\
    \ network-layer protocols that can\n   be encapsulated within IP packets (e.g.,\
    \ OSI/CLNP (Connectionless\n   Network Protocol) [RFC1070], etc.) are also within\
    \ scope.\n   The IRON is a global routing system comprising virtual overlay\n\
    \   networks managed by Virtual Prefix Companies (VPCs) that own and\n   manage\
    \ Virtual Prefixes (VPs) from which End User Network (EUN)\n   prefixes (EPs)\
    \ are delegated to customer sites.  The IRON is\n   motivated by a growing customer\
    \ demand for multihoming, mobility\n   management, and traffic engineering while\
    \ using stable addressing to\n   minimize dependence on network renumbering [RFC4192][RFC5887].\
    \  The\n   IRON uses the existing IPv4 and IPv6 global Internet routing systems\n\
    \   as virtual NBMA links for tunneling inner network protocol packets\n   within\
    \ outer IPv4 or IPv6 headers (see Section 3).  The IRON requires\n   deployment\
    \ of a small number of new BGP core routers and supporting\n   servers, as well\
    \ as IRON-aware routers/servers in customer EUNs.  No\n   modifications to hosts,\
    \ and no modifications to most routers, are\n   required.\n   Note: This document\
    \ is offered in compliance with Internet Research\n   Task Force (IRTF) document\
    \ stream procedures [RFC5743]; it is not an\n   IETF product and is not a standard.\
    \  The views in this document were\n   considered controversial by the IRTF Routing\
    \ Research Group (RRG),\n   but the RG reached a consensus that the document should\
    \ still be\n   published.  The document will undergo a period of review within\
    \ the\n   RRG and through selected expert reviewers prior to publication.  The\n\
    \   following sections discuss details of the IRON architecture.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document makes use of the following terms:\n   End User\
    \ Network (EUN):\n      an edge network that connects an organization's devices\
    \ (e.g.,\n      computers, routers, printers, etc.) to the Internet.\n   End User\
    \ Network Prefix (EP):\n      a more specific inner network-layer prefix derived\
    \ from a Virtual\n      Prefix (VP) (e.g., an IPv4 /28, an IPv6 /56, etc.) and\
    \ delegated\n      to an EUN by a Virtual Prefix Company (VPC).\n   End User Network\
    \ Prefix Address (EPA):\n      a network-layer address belonging to an EP and\
    \ assigned to the\n      interface of an end system in an EUN.\n   Forwarding\
    \ Information Base (FIB):\n      a data structure containing network prefixes\
    \ to next-hop mappings;\n      usually maintained in a router's fast-path processing\
    \ lookup\n      tables.\n   Internet Routing Overlay Network (IRON):\n      a\
    \ composite virtual overlay network that comprises the union of\n      all VPC\
    \ overlay networks configured over a common Internetwork.\n      The IRON supports\
    \ routing through encapsulation of inner packets\n      with EPA addresses within\
    \ outer headers that use locator\n      addresses.\n   IRON Client Router/Host\
    \ (\"Client\"):\n      a customer's router or host that logically connects the\
    \ customer's\n      EUNs and their associated EPs to the IRON via an NBMA tunnel\n\
    \      virtual interface.\n   IRON Serving Router (\"Server\"):\n      a VPC's\
    \ overlay network router that provides forwarding and\n      mapping services\
    \ for the EPs owned by customer Clients.\n   IRON Relay Router (\"Relay\"):\n\
    \      a VPC's overlay network router that acts as a relay between the\n     \
    \ IRON and the native Internet.\n   IRON Agent (IA):\n      generically refers\
    \ to any of an IRON Client/Server/Relay.\n   Internet Service Provider (ISP):\n\
    \      a service provider that connects customer EUNs to the underlying\n    \
    \  Internetwork.  In other words, an ISP is responsible for providing\n      basic\
    \ Internet connectivity for customer EUNs.\n   Locator\n      an IP address assigned\
    \ to the interface of a router or end system\n      within a public or private\
    \ network.  Locators taken from public IP\n      prefixes are routable on a global\
    \ basis, while locators taken from\n      private IP prefixes are made public\
    \ via Network Address\n      Translation (NAT).\n   Routing and Addressing in\
    \ Networks with Global Enterprise Recursion\n      (RANGER):\n      an architectural\
    \ examination of virtual overlay networks applied\n      to enterprise network\
    \ scenarios, with implications for a wider\n      variety of use cases.\n   Subnetwork\
    \ Encapsulation and Adaptation Layer (SEAL):\n      an encapsulation sublayer\
    \ that provides extended packet\n      identification and a Control Message Protocol\
    \ to ensure\n      deterministic network-layer feedback.\n   Virtual Enterprise\
    \ Traversal (VET):\n      a method for discovering border routers and forming\
    \ dynamic\n      tunnel-neighbor relationships over enterprise networks (or sites)\n\
    \      with varying properties.\n   Virtual Prefix (VP):\n      a prefix block\
    \ (e.g., an IPv4 /16, an IPv6 /20, an OSI Network\n      Service Access Protocol\
    \ (NSAP) prefix, etc.) that is owned and\n      managed by a Virtual Prefix Company\
    \ (VPC).\n   Virtual Prefix Company (VPC):\n      a company that owns and manages\
    \ a set of VPs from which it\n      delegates EPs to EUNs.\n   VPC Overlay Network\n\
    \      a specialized set of routers deployed by a VPC to service customer\n  \
    \    EUNs through a virtual overlay network configured over an\n      underlying\
    \ Internetwork (e.g., the global Internet).\n"
- title: 3.  The Internet Routing Overlay Network
  contents:
  - "3.  The Internet Routing Overlay Network\n   The Internet Routing Overlay Network\
    \ (IRON) is a system of virtual\n   overlay networks configured over a common\
    \ Internetwork.  While the\n   principles presented in this document are discussed\
    \ within the\n   context of the public global Internet, they can also be applied\
    \ to\n   any autonomous Internetwork.  The rest of this document therefore\n \
    \  refers to the terms \"Internet\" and \"Internetwork\" interchangeably\n   except\
    \ in cases where specific distinctions must be made.\n   The IRON consists of\
    \ IRON Agents (IAs) that automatically tunnel the\n   packets of end-to-end communication\
    \ sessions within encapsulating\n   headers used for Internet routing.  IAs use\
    \ the Virtual Enterprise\n   Traversal (VET) [INTAREA-VET] virtual NBMA link model\
    \ in conjunction\n   with the Subnetwork Encapsulation and Adaptation Layer (SEAL)\n\
    \   [INTAREA-SEAL] to encapsulate inner network-layer packets within\n   outer\
    \ headers, as shown in Figure 1.\n                                         +-------------------------+\n\
    \                                         |    Outer headers with   |\n      \
    \                                   ~     locator addresses   ~\n            \
    \                             |     (IPv4 or IPv6)      |\n                  \
    \                       +-------------------------+\n                        \
    \                 |       SEAL Header       |\n       +-------------------------+\
    \       +-------------------------+\n       |   Inner Packet Header   |  --> \
    \ |   Inner Packet Header   |\n       ~    with EP addresses    ~  -->  ~    with\
    \ EP addresses    ~\n       | (IPv4, IPv6, OSI, etc.) |  -->  | (IPv4, IPv6, OSI,\
    \ etc.) |\n       +-------------------------+       +-------------------------+\n\
    \       |                         |  -->  |                         |\n      \
    \ ~    Inner Packet Body    ~  -->  ~    Inner Packet Body    ~\n       |    \
    \                     |  -->  |                         |\n       +-------------------------+\
    \       +-------------------------+\n          Inner packet before           \
    \     Outer packet after\n           encapsulation                       encapsulation\n\
    \     Figure 1: Encapsulation of Inner Packets within Outer IP Headers\n   VET\
    \ specifies the automatic tunneling mechanisms used for\n   encapsulation, while\
    \ SEAL specifies the format and usage of the SEAL\n   header as well as a set\
    \ of control messages.  Most notably, IAs use\n   the SEAL Control Message Protocol\
    \ (SCMP) to deterministically\n   exchange and authenticate control messages such\
    \ as route\n   redirections, indications of Path Maximum Transmission Unit (PMTU)\n\
    \   limitations, destination unreachables, etc.  IAs appear as neighbors\n   on\
    \ an NBMA virtual link, and form bidirectional and/or unidirectional\n   tunnel-neighbor\
    \ relationships.\n   The IRON is the union of all virtual overlay networks that\
    \ are\n   configured over a common underlying Internet and are owned and\n   managed\
    \ by Virtual Prefix Companies (VPCs).  Each such virtual\n   overlay network comprises\
    \ a set of IAs distributed throughout the\n   Internet to serve highly aggregated\
    \ Virtual Prefixes (VPs).  VPCs\n   delegate sub-prefixes from their VPs, which\
    \ they lease to customers\n   as End User Network Prefixes (EPs).  In turn, the\
    \ customers assign\n   the EPs to their customer edge IAs, which connect their\
    \ End User\n   Networks (EUNs) to the IRON.\n   VPCs may have no affiliation with\
    \ the ISP networks from which\n   customers obtain their basic Internet connectivity.\
    \  Therefore, a\n   customer could procure its summary network services either\
    \ through a\n   common broker or through separate entities.  In that case, the\
    \ VPC\n   can open for business and begin serving its customers immediately\n\
    \   without the need to coordinate its activities with ISPs or other\n   VPCs.\
    \  Further details on business considerations are out of scope\n   for this document.\n\
    \   The IRON requires no changes to end systems or to most routers in the\n  \
    \ Internet.  Instead, the IRON comprises IAs that are deployed either\n   as new\
    \ platforms or as modifications to existing platforms.  IAs may\n   be deployed\
    \ incrementally without disturbing the existing Internet\n   routing system and\
    \ act as waypoints (or \"cairns\") for navigating the\n   IRON.  The functional\
    \ roles for IAs are described in the following\n   sections.\n"
- title: 3.1.  IRON Client
  contents:
  - "3.1.  IRON Client\n   An IRON client (or, simply, \"Client\") is a customer's\
    \ router or host\n   that logically connects the customer's EUNs and their associated\
    \ EPs\n   to the IRON via tunnels, as shown in Figure 2.  Client routers obtain\n\
    \   EPs from VPCs and use them to number subnets and interfaces within\n   their\
    \ EUNs.  A Client can be deployed on the same physical platform\n   that also\
    \ connects the customer's EUNs to its ISPs, but it may also\n   be a separate\
    \ router or even a standalone server system located\n   within the EUN.  (This\
    \ model applies even if the EUN connects to the\n   ISP via a Network Address\
    \ Translator (NAT) -- see Section 6.7).\n   Finally, a Client may also be a simple\
    \ end system that connects a\n   singleton EPA and exhibits the outward appearance\
    \ of a host.\n                           .-.\n                        ,-(  _)-.\n\
    \        +--------+   .-(_    (_  )-.\n        | Client |--(_     ISP      )\n\
    \        +---+----+     `-(______)-'\n            |   <= T         \\     .-.\n\
    \           .-.       u        \\ ,-(  _)-.\n        ,-(  _)-.       n     .-(_\
    \    (-  )-.\n     .-(_    (_  )-.      n  (_   Internet   )\n    (_     EUN \
    \     )       e   `-(______)-\n       `-(______)-'           l          ___\n\
    \            |                   s =>    (:::)-.\n       +----+---+          \
    \         .-(::::::::)\n       |  Host  |                .-(::::::::::::)-.\n\
    \       +--------+               (:::: The IRON ::::)\n                      \
    \           `-(::::::::::::)-'\n                                    `-(::::::)-'\n\
    \          Figure 2: IRON Client Router Connecting EUN to the IRON\n"
- title: 3.2.  IRON Serving Router
  contents:
  - "3.2.  IRON Serving Router\n   An IRON serving router (or, simply, \"Server\"\
    ) is a VPC's overlay\n   network router that provides forwarding and mapping services\
    \ for the\n   EPs owned by customer Client routers.  In typical deployments, a\
    \ VPC\n   will deploy many Servers around the IRON in a globally distributed\n\
    \   fashion (e.g., as depicted in Figure 3) so that Clients can discover\n   those\
    \ that are nearby.\n             +--------+    +--------+\n             | Boston\
    \ |    | Tokyo  |\n             | Server |    | Server |\n             +--+-----+\
    \    ++-------+\n     +--------+  \\         /\n     | Seattle|   \\   ___ /\n\
    \     | Server |    \\ (:::)-.       +--------+\n     +------+-+  .-(::::::::)------+\
    \ Paris  |\n             \\.-(::::::::::::)-.   | Server |\n             (::::\
    \ The IRON ::::)  +--------+\n              `-(::::::::::::)-'\n   +--------+\
    \ /  `-(::::::)-'  \\     +--------+\n   | Moscow +          |        \\--- +\
    \ Sydney |\n   | Server |     +----+---+         | Server |\n   +--------+   \
    \  | Cairo  |         +--------+\n                  | Server |\n             \
    \     +--------+\n         Figure 3: IRON Serving Router Global Distribution Example\n\
    \   Each Server acts as a tunnel-endpoint router that forms a\n   bidirectional\
    \ tunnel-neighbor relationship with each of its Client\n   customers.  Each Server\
    \ also associates with a set of Relays that can\n   forward packets from the IRON\
    \ out to the native Internet and vice\n   versa, as discussed in the next section.\n"
- title: 3.3.  IRON Relay Router
  contents:
  - "3.3.  IRON Relay Router\n   An IRON Relay Router (or, simply, \"Relay\") is a\
    \ VPC's overlay network\n   router that acts as a relay between the IRON and the\
    \ native Internet.\n   Therefore, it also serves as an Autonomous System Border\
    \ Router\n   (ASBR) that is owned and managed by the VPC.\n   Each VPC configures\
    \ one or more Relays that advertise the company's\n   VPs into the IPv4 and IPv6\
    \ global Internet BGP routing systems.  Each\n   Relay associates with all of\
    \ the VPC's overlay network Servers, e.g.,\n   via tunnels over the IRON, via\
    \ a direct interconnect such as an\n   Ethernet cable, etc.  The Relay role (as\
    \ well as its relationship\n   with overlay network Servers) is depicted in Figure\
    \ 4.\n                      .-.\n                   ,-(  _)-.\n              \
    \  .-(_    (_  )-.\n               (_   Internet   )\n                  `-(______)-'\
    \   |  +--------+\n                        |        |--| Server |\n          \
    \         +----+---+    |  +--------+\n                   | Relay  |----|  +--------+\n\
    \                   +--------+    |--| Server |\n                       _||  \
    \     |  +--------+\n                      (:::)-.  (Ethernet)\n             \
    \     .-(::::::::)\n   +--------+  .-(::::::::::::)-.  +--------+\n   | Server\
    \ |=(:::: The IRON ::::)=| Server |\n   +--------+  `-(::::::::::::)-'  +--------+\n\
    \                  `-(::::::)-'\n                       ||      (Tunnels)\n  \
    \                 +--------+\n                   | Server |\n                \
    \   +--------+\n      Figure 4: IRON Relay Router Connecting IRON to Native Internet\n"
- title: 4.  IRON Organizational Principles
  contents:
  - "4.  IRON Organizational Principles\n   The IRON consists of the union of all\
    \ VPC overlay networks configured\n   over a common Internetwork (e.g., the public\
    \ Internet).  Each such\n   overlay network represents a distinct \"patch\" on\
    \ the Internet\n   \"quilt\", where the patches are stitched together by tunnels\
    \ over the\n   links, routers, bridges, etc. that connect the underlying\n   Internetwork.\
    \  When a new VPC overlay network is deployed, it becomes\n   yet another patch\
    \ on the quilt.  The IRON is therefore a composite\n   overlay network consisting\
    \ of multiple individual patches, where each\n   patch coordinates its activities\
    \ independently of all others (with\n   the exception that the Servers of each\
    \ patch must be aware of all VPs\n   in the IRON).  In order to ensure mutual\
    \ cooperation between all VPC\n   overlay networks, sufficient address space portions\
    \ of the inner\n   network-layer protocol (e.g., IPv4, IPv6, etc.) should be set\
    \ aside\n   and designated as VP space.\n   Each VPC overlay network in the IRON\
    \ maintains a set of Relays and\n   Servers that provide services to their Client\
    \ customers.  In order to\n   ensure adequate customer service levels, the VPC\
    \ should conduct a\n   traffic scaling analysis and distribute sufficient Relays\
    \ and Servers\n   for the overlay network globally throughout the Internet.  Figure\
    \ 5\n   depicts the logical arrangement of Relays, Servers, and Clients in an\n\
    \   IRON virtual overlay network.\n                              .-.\n       \
    \                    ,-(  _)-.\n                        .-(_    (_  )-.\n    \
    \                   (__ Internet   _)\n                          `-(______)-'\n\
    \          <------------     Relays      ------------>\n                    ________________________\n\
    \                   (::::::::::::::::::::::::)-.\n               .-(:::::::::::::::::::::::::::::)\n\
    \            .-(:::::::::::::::::::::::::::::::::)-.\n           (:::::::::::\
    \   The IRON  :::::::::::::::)\n            `-(:::::::::::::::::::::::::::::::::)-'\n\
    \               `-(::::::::::::::::::::::::::::)-'\n          <------------  \
    \  Servers      ------------>\n          .-.                .-.              \
    \       .-.\n       ,-(  _)-.          ,-(  _)-.               ,-(  _)-.\n   \
    \ .-(_    (_  )-.    .-(_    (_  )-.         .-(_    (_  )-.\n   (__   ISP A \
    \   _)  (__   ISP B    _)  ...  (__   ISP x    _)\n      `-(______)-'       `-(______)-'\
    \            `-(______)-'\n           <-----------      NATs        ------------>\n\
    \           <----------- Clients and EUNs ----------->\n              Figure 5:\
    \ Virtual Overlay Network Organization\n   Each Relay in the VPC overlay network\
    \ connects the overlay directly\n   to the underlying IPv4 and IPv6 Internets.\
    \  It also advertises the\n   VPC overlay network's IPv4 VPs into the IPv4 BGP\
    \ routing system and\n   advertises the overlay network's IPv6 VPs into the IPv6\
    \ BGP routing\n   system.  Relays will therefore receive packets with EPA destination\n\
    \   addresses sent by end systems in the Internet and direct them toward\n   EPA-addressed\
    \ end systems connected to the VPC overlay network.\n   Each VPC overlay network\
    \ also manages a set of Servers that connect\n   their Clients and associated\
    \ EUNs to the IRON and to the IPv6 and\n   IPv4 Internets via their associations\
    \ with Relays.  IRON Servers\n   therefore need not be BGP routers themselves;\
    \ they can be simple\n   commodity hardware platforms.  Moreover, the Server and\
    \ Relay\n   functions can be deployed together on the same physical platform as\
    \ a\n   unified gateway, or they may be deployed on separate platforms (e.g.,\n\
    \   for load balancing purposes).\n   Each Server maintains a working set of Clients\
    \ for which it caches\n   EP-to-Client mappings in its Forwarding Information\
    \ Base (FIB).  Each\n   Server also, in turn, propagates the list of EPs in its\
    \ working set\n   to each of the Relays in the VPC overlay network via a dynamic\n\
    \   routing protocol (e.g., an overlay network internal BGP instance that\n  \
    \ carries only the EP-to-Server mappings and does not interact with the\n   external\
    \ BGP routing system).  Therefore, each Server only needs to\n   track the EPs\
    \ for its current working set of Clients, while each\n   Relay will maintain a\
    \ full EP-to-Server mapping table that represents\n   reachability information\
    \ for all EPs in the VPC overlay network.\n   Customers establish Clients that\
    \ obtain their basic Internet\n   connectivity from ISPs and connect to Servers\
    \ to attach their EUNs to\n   the IRON.  Each EUN can connect to the IRON via\
    \ one or multiple\n   Clients as long as the Clients coordinate with one another,\
    \ e.g., to\n   mitigate EUN partitions.  Unlike Relays and Servers, Clients may\
    \ use\n   private addresses behind one or several layers of NATs.  Each Client\n\
    \   initially discovers a list of nearby Servers through an anycast\n   discovery\
    \ process (described below).  It then selects one of these\n   nearby Servers\
    \ and forms a bidirectional tunnel-neighbor relationship\n   with the server through\
    \ an initial exchange followed by periodic\n   keepalives.\n   After the Client\
    \ selects a Server, it forwards initial outbound\n   packets from its EUNs by\
    \ tunneling them to the Server, which, in\n   turn, forwards them to the nearest\
    \ Relay within the IRON that serves\n   the final destination.  The Client will\
    \ subsequently receive redirect\n   messages informing it of a more direct route\
    \ through a Server that\n   serves the final destination EUN.\n   The IRON can\
    \ also be used to support VPs of network-layer address\n   families that cannot\
    \ be routed natively in the underlying\n   Internetwork (e.g., OSI/CLNP over the\
    \ public Internet, IPv6 over\n   IPv4-only Internetworks, IPv4 over IPv6-only\
    \ Internetworks, etc.).\n   Further details for the support of IRON VPs of one\
    \ address family\n   over Internetworks based on other address families are discussed\
    \ in\n   Appendix A.\n"
- title: 5.  IRON Initialization
  contents:
  - "5.  IRON Initialization\n   IRON initialization entails the startup actions of\
    \ IAs within the VPC\n   overlay network and customer EUNs.  The following sub-sections\n\
    \   discuss these startup procedures.\n"
- title: 5.1.  IRON Relay Router Initialization
  contents:
  - "5.1.  IRON Relay Router Initialization\n   Before its first operational use,\
    \ each Relay in a VPC overlay network\n   is provisioned with the list of VPs\
    \ that it will serve as well as the\n   locators for all Servers that belong to\
    \ the same overlay network.\n   The Relay is also provisioned with external BGP\
    \ interconnections --\n   the same as for any BGP router.\n   Upon startup, the\
    \ Relay engages in BGP routing exchanges with its\n   peers in the IPv4 and IPv6\
    \ Internets the same as for any BGP router.\n   It then connects to all of the\
    \ Servers in the overlay network (e.g.,\n   via a TCP connection over a bidirectional\
    \ tunnel, via an Internal BGP\n   (IBGP) route reflector, etc.) for the purpose\
    \ of discovering EP-to-\n   Server mappings.  After the Relay has fully populated\
    \ its EP-to-\n   Server mapping information database, it is said to be \"synchronized\"\
    \n   with regard to its VPs.\n   After this initial synchronization procedure,\
    \ the Relay then\n   advertises the overlay network's VPs externally.  In particular,\
    \ the\n   Relay advertises the IPv6 VPs into the IPv6 BGP routing system and\n\
    \   advertises the IPv4 VPs into the IPv4 BGP routing system.  The Relay\n   additionally\
    \ advertises an IPv4 /24 companion prefix (e.g.,\n   192.0.2.0/24) into the IPv4\
    \ routing system and an IPv6 ::/64\n   companion prefix (e.g., 2001:DB8::/64)\
    \ into the IPv6 routing system\n   (note that these may also be sub-prefixes taken\
    \ from a VP).  The\n   Relay then configures the host number '1' in the IPv4 companion\n\
    \   prefix (e.g., as 192.0.2.1) and the interface identifier '0' in the\n   IPv6\
    \ companion prefix (e.g., as 2001:DB8::0), and it assigns the\n   resulting addresses\
    \ as subnet-router anycast addresses\n   [RFC3068][RFC2526] for the VPC overlay\
    \ network.  (See Appendix A for\n   more information on the discovery and use\
    \ of companion prefixes.)\n   The Relay then engages in ordinary packet-forwarding\
    \ operations.\n"
- title: 5.2.  IRON Serving Router Initialization
  contents:
  - "5.2.  IRON Serving Router Initialization\n   Before its first operational use,\
    \ each Server in a VPC overlay\n   network is provisioned with the locators for\
    \ all Relays that\n   aggregate the overlay network's VPs.  In order to support\
    \ route\n   optimization, the Server must also be provisioned with the list of\n\
    \   all VPs in the IRON (i.e., not just the VPs of its own overlay\n   network)\
    \ so that it can discern EPA and non-EPA addresses.\n   (Therefore, the Server\
    \ could be greatly simplified if the list of VPs\n   could be covered within a\
    \ small number of very short prefixes, e.g.,\n   one or a few IPv6 ::/20's). \
    \ The Server must also discover the VP\n   companion prefix relationships discussed\
    \ in Section 5.1, e.g., via a\n   global database such as discussed in Appendix\
    \ A.\n   Upon startup, each Server must connect to all of the Relays within\n\
    \   its overlay network (e.g., via a TCP connection, via an IBGP route\n   reflector,\
    \ etc.) for the purpose of reporting its EP-to-Server\n   mappings.  The Server\
    \ then actively listens for Client customers that\n   register their EP prefixes\
    \ as part of establishing a bidirectional\n   tunnel-neighbor relationship.  When\
    \ a new Client registers its EP\n   prefixes, the Server announces the new EP\
    \ additions to all Relays;\n   when an existing Client unregisters its EP prefixes,\
    \ the Server\n   withdraws its announcements.\n"
- title: 5.3.  IRON Client Initialization
  contents:
  - "5.3.  IRON Client Initialization\n   Before its first operational use, each Client\
    \ must obtain one or more\n   EPs from its VPC as well as the companion prefixes\
    \ associated with\n   the VPC overlay network (see Section 5.1).  The Client must\
    \ also\n   obtain a certificate and a public/private key pair from the VPC that\n\
    \   it can later use to prove ownership of its EPs.  This implies that\n   each\
    \ VPC must run its own public key infrastructure to be used only\n   for the purpose\
    \ of verifying its customers' claimed right to use an\n   EP.  Hence, the VPC\
    \ need not coordinate its public key infrastructure\n   with any other organization.\n\
    \   Upon startup, the Client sends an SCMP Router Solicitation (SRS)\n   message\
    \ to the VPC overlay network subnet-router anycast address to\n   discover the\
    \ nearest Relay.  The Relay will return an SCMP Router\n   Advertisement (SRA)\
    \ message that lists the locator addresses of one\n   or more nearby Servers.\
    \  (This list is analogous to the Intra-Site\n   Automatic Tunnel Addressing Protocol\
    \ (ISATAP) Potential Router List\n   (PRL) [RFC5214].)\n   After the Client receives\
    \ an SRA message from the nearby Relay\n   listing the locator addresses of nearby\
    \ Servers, it initiates a short\n   transaction with one of the Servers carried\
    \ by a reliable transport\n   protocol such as TCP in order to establish a bidirectional\
    \ tunnel-\n   neighbor relationship.  The protocol details of the transaction\
    \ are\n   specific to the VPC, and hence out of scope for this document.\n   Note\
    \ that it is essential that the Client select one and only one\n   Server.  This\
    \ is to allow the VPC overlay network mapping system to\n   have one and only\
    \ one active EP-to-Server mapping at any point in\n   time, which shares fate\
    \ with the Server itself.  If this Server\n   fails, the Client can select a new\
    \ one that will automatically update\n   the VPC overlay network mapping system\
    \ with a new EP-to-Server\n   mapping.\n"
- title: 6.  IRON Operation
  contents:
  - "6.  IRON Operation\n   Following the IRON initialization detailed in Section\
    \ 5, IAs engage\n   in the steady-state process of receiving and forwarding packets.\
    \  All\n   IAs forward encapsulated packets over the IRON using the mechanisms\n\
    \   of VET [INTAREA-VET] and SEAL [INTAREA-SEAL], while Relays (and in\n   some\
    \ cases Servers) additionally forward packets to and from the\n   native IPv6\
    \ and IPv4 Internets.  IAs also use SCMP to coordinate with\n   other IAs, including\
    \ the process of sending and receiving redirect\n   messages, error messages,\
    \ etc.  (Note however that an IA must not\n   send an SCMP message in response\
    \ to an SCMP error message.)  Each IA\n   operates as specified in the following\
    \ sub-sections.\n"
- title: 6.1.  IRON Client Operation
  contents:
  - "6.1.  IRON Client Operation\n   After selecting its Server as specified in Section\
    \ 5.3, the Client\n   should register each of its ISP connections with the Server\
    \ for\n   multihoming purposes.  To do so, it sends periodic beacons (e.g., SRS\n\
    \   messages) to its Server via each of its ISPs to establish additional\n   tunnel-neighbor\
    \ state.  This implies that a single tunnel-neighbor\n   identifier (i.e., a \"\
    nonce\") is used to represent the set of all ISP\n   paths between the Client\
    \ and the Server.  Therefore, the nonce names\n   this \"bundle\" of ISP paths.\n\
    \   If the Client ceases to receive acknowledgements from its Server via\n   a\
    \ specific ISP connection, it marks the Server as unreachable from\n   that address\
    \ and therefore over that ISP connection.  (The Client\n   should also inform\
    \ its Server of this outage via one of its working\n   ISP connections.)  If the\
    \ Client ceases to receive acknowledgements\n   from its Server via multiple ISP\
    \ connections, it marks the Server as\n   unusable and quickly attempts to register\
    \ with a new Server.  The act\n   of registering with a new Server will automatically\
    \ purge the stale\n   mapping state associated with the old Server, since dynamic\
    \ routing\n   will propagate the new client/server relationship to the VPC overlay\n\
    \   network Relay Routers.\n   When an end system in an EUN sends a flow of packets\
    \ to a\n   correspondent, the packets are forwarded through the EUN via normal\n\
    \   routing until they reach the Client, which then tunnels the initial\n   packets\
    \ to its Server as the next hop.  In particular, the Client\n   encapsulates each\
    \ packet in an outer header with its locator as the\n   source address and the\
    \ locator of its Server as the destination\n   address.  Note that after sending\
    \ the initial packets of a flow, the\n   Client may receive important SCMP messages,\
    \ such as indications of\n   PMTU limitations, redirects that point to a better\
    \ next hop, etc.\n   The Client uses the mechanisms specified in VET and SEAL\
    \ to\n   encapsulate each forwarded packet.  The Client further uses the SCMP\n\
    \   protocol to coordinate with Servers, including accepting redirects\n   and\
    \ other SCMP messages.  When the Client receives an SCMP message,\n   it checks\
    \ the nonce field of the encapsulated packet-in-error to\n   verify that the message\
    \ corresponds to the tunnel-neighbor state for\n   its Server and accepts the\
    \ message if the nonce matches.  (Note\n   however that the outer source and destination\
    \ addresses of the\n   packet-in-error may be different than those in the original\
    \ packet\n   due to possible Server and/or Relay address rewritings.)\n"
- title: 6.2.  IRON Serving Router Operation
  contents:
  - "6.2.  IRON Serving Router Operation\n   After the Server is initialized, it responds\
    \ to SRSs from Clients by\n   sending SRAs.  When the Server receives a SEAL-encapsulated\
    \ packet\n   from one of its Client tunnel neighbors, it examines the inner\n\
    \   destination address.  If the inner destination address is not an EPA,\n  \
    \ the Server decapsulates the packet and forwards it unencapsulated\n   into the\
    \ Internet if it is able to do so without loss due to ingress\n   filtering. \
    \ Otherwise, the Server re-encapsulates the packet (i.e.,\n   it removes the outer\
    \ header and replaces it with a new outer header\n   of the same address family)\
    \ and sets the outer destination address to\n   the locator address of a Relay\
    \ within its VPC overlay network.  It\n   then forwards the re-encapsulated packet\
    \ to the Relay, which will, in\n   turn, decapsulate it and forward it into the\
    \ Internet.\n   If the inner destination address is an EPA, however, the Server\n\
    \   rewrites the outer source address to one of its own locator addresses\n  \
    \ and rewrites the outer destination address to the subnet-router\n   anycast\
    \ address taken from the companion prefix associated with the\n   inner destination\
    \ address (where the companion prefix of the same\n   address family as the outer\
    \ IP protocol is used).  The Server then\n   forwards the revised encapsulated\
    \ packet into the Internet via a\n   default or more specific route, where it\
    \ will be directed to the\n   closest Relay within the destination VPC overlay\
    \ network.  After\n   sending the packet, the Server may then receive an SCMP\
    \ error or\n   redirect message from a Relay/Server within the destination VPC\n\
    \   overlay network.  In that case, the Server verifies that the nonce in\n  \
    \ the message matches the Client that sent the original inner packet\n   and discards\
    \ the message if the nonce does not match.  Otherwise, the\n   Server re-encapsulates\
    \ the SCMP message in a new outer header that\n   uses the source address, destination\
    \ address, and nonce parameters\n   associated with the Client's tunnel-neighbor\
    \ state; it then forwards\n   the message to the Client.  This arrangement is\
    \ necessary to allow\n   SCMP messages to flow through any NATs on the path.\n\
    \   When a Server ('A') receives a SEAL-encapsulated packet from a Relay\n   or\
    \ from the Internet, if the inner destination address matches an EP\n   in its\
    \ FIB, 'A' re-encapsulates the packet in a new outer header and\n   forwards it\
    \ to a Client ('B'), which, in turn, decapsulates the\n   packet and forwards\
    \ it to the correct end system in the EUN.\n   However, if 'B' has left notice\
    \ with 'A' that it has moved to a new\n   Server ('C'), 'A' will instead forward\
    \ the packet to 'C' and also\n   send an SCMP redirect message back to the source\
    \ of the packet.  In\n   this way, 'B' can leave behind forwarding information\
    \ when changing\n   between Servers 'A' and 'C' (e.g., due to mobility events)\
    \ without\n   exposing packets to loss.\n"
- title: 6.3.  IRON Relay Router Operation
  contents:
  - "6.3.  IRON Relay Router Operation\n   After each Relay has synchronized its VPs\
    \ (see Section 5.1) it\n   advertises the full set of the company's VPs and companion\
    \ prefixes\n   into the IPv4 and IPv6 Internet BGP routing systems.  These prefixes\n\
    \   will be represented as ordinary routing information in the BGP, and\n   any\
    \ packets originating from the IPv4 or IPv6 Internet destined to an\n   address\
    \ covered by one of the prefixes will be forwarded to one of\n   the VPC overlay\
    \ network's Relays.\n   When a Relay receives a packet from the Internet destined\
    \ to an EPA\n   covered by one of its VPs, it behaves as an ordinary IP router.\
    \  In\n   particular, the Relay looks in its FIB to discover a locator of the\n\
    \   Server that serves the EP covering the destination address.  The\n   Relay\
    \ then simply encapsulates the packet with its own locator as the\n   outer source\
    \ address and the locator of the Server as the outer\n   destination address and\
    \ forwards the packet to the Server.\n   When a Relay receives a packet from the\
    \ Internet destined to one of\n   its subnet-router anycast addresses, it discards\
    \ the packet if it is\n   not SEAL encapsulated.  If the packet is an SCMP SRS\
    \ message, the\n   Relay instead sends an SRA message back to the source listing\
    \ the\n   locator addresses of nearby Servers then discards the message.  The\n\
    \   Relay otherwise discards all other SCMP messages.\n   If the packet is an\
    \ ordinary SEAL packet (i.e., one that encapsulates\n   an inner packet), the\
    \ Relay sends an SCMP redirect message of the\n   same address family back to\
    \ the source with the locator of the Server\n   that serves the EPA destination\
    \ in the inner packet as the redirected\n   target.  The source and destination\
    \ addresses of the SCMP redirect\n   message use the outer destination and source\
    \ addresses of the\n   original packet, respectively.  After sending the redirect\
    \ message,\n   the Relay then rewrites the outer destination address of the SEAL-\n\
    \   encapsulated packet to the locator of the Server and forwards the\n   revised\
    \ packet to the Server.  Note that in this arrangement, any\n   errors that occur\
    \ on the path between the Relay and the Server will\n   be delivered to the original\
    \ source but with a different destination\n   address due to this Relay address\
    \ rewriting.\n"
- title: 6.4.  IRON Reference Operating Scenarios
  contents:
  - "6.4.  IRON Reference Operating Scenarios\n   The IRON supports communications\
    \ when one or both hosts are located\n   within EP-addressed EUNs, regardless\
    \ of whether the EPs are\n   provisioned by the same VPC or by different VPCs.\
    \  When both hosts\n   are within IRON EUNs, route redirections that eliminate\
    \ unnecessary\n   Servers and Relays from the path are possible.  When only one\
    \ host is\n   within an IRON EUN, however, route optimization cannot be used.\
    \  The\n   following sections discuss the two scenarios.\n"
- title: 6.4.1.  Both Hosts within IRON EUNs
  contents:
  - "6.4.1.  Both Hosts within IRON EUNs\n   When both hosts are within IRON EUNs,\
    \ it is sufficient to consider\n   the scenario in a unidirectional fashion, i.e.,\
    \ by tracing packet\n   flows only in the forward direction from source host to\
    \ destination\n   host.  The reverse direction can be considered separately and\
    \ incurs\n   the same considerations as for the forward direction.\n   In this\
    \ scenario, the initial packets of a flow produced by a source\n   host within\
    \ an EUN connected to the IRON by a Client must flow\n   through both the Server\
    \ of the source host and a Relay of the\n   destination host, but route optimization\
    \ can eliminate these elements\n   from the path for subsequent packets in the\
    \ flow.  Figure 6 shows the\n   flow of initial packets from host A to host B\
    \ within two IRON EUNs\n   (the same scenario applies whether the two EUNs are\
    \ within the same\n   VPC overlay network or different overlay networks).\n  \
    \               ________________________________________\n              .-(  \
    \               .-.                    )-.\n           .-(                 ,-(\
    \  _)-.                    )-.\n        .-(          +========+(_    (_  +=====+\
    \               )-.\n      .(             ||    (_|| Internet ||_) ||        \
    \          ).\n    .(               ||      ||-(______)-||   vv              \
    \      ).\n  .(        +--------++--+   ||          ||   +------------+      \
    \    ).\n  (     +==>| Server(A)  |   vv          ||   | Server(B)  |====+   \
    \   )\n  (    //   +---------|\\-+   +--++----++--+   +------------+    \\\\ \
    \    )\n  (   //  .-.         | \\    |  Relay(B)  |                  .-. \\\\\
    \    )\n  (  //,-(  _)-.      |  \\   +-v----------+               ,-(  _)-\\\\\
    \   )\n  ( .||_    (_  )-.   |   \\____|                       .-(_    (_  ||.\
    \ )\n  ( _||  ISP A    .)  |                               (__   ISP B  ||_))\n\
    \  (  ||-(______)-'    | (redirect)                       `-(______)||  )\n  (\
    \  ||    |          |                                       |    vv  )\n   ( +-----+-----+\
    \    |                                 +-----+-----+ )\n     | Client(A) | <--+\
    \                                 | Client(B) |\n     +-----+-----+          \
    \    The IRON                +-----+-----+\n           |    (   (Overlaid on the\
    \ Native Internet)     )   |\n          .-.     .-(                          \
    \      .-)     .-.\n       ,-(  _)-.      .-(________________________)-.     \
    \ ,-(  _)-.\n    .-(_    (_  )-.                                    .-(_    (_\
    \  )-.\n   (_  IRON EUN A  )                                  (_  IRON EUN B \
    \ )\n      `-(______)-'                                       `-(______)-'\n \
    \          |                                                  |\n       +---+----+\
    \                                         +---+----+\n       | Host A |      \
    \                                   | Host B |\n       +--------+            \
    \                             +--------+\n              Figure 6: Initial Packet\
    \ Flow before Redirects\n   With reference to Figure 6, host A sends packets destined\
    \ to host B\n   via its network interface connected to EUN A.  Routing within\
    \ EUN A\n   will direct the packets to Client(A) as a default router for the EUN,\n\
    \   which then uses VET and SEAL to encapsulate them in outer headers\n   with\
    \ its locator address as the outer source address and the locator\n   address\
    \ of Server(A) as the outer destination address.  Client(A)\n   then simply forwards\
    \ the encapsulated packets into its ISP network\n   connection that provided its\
    \ locator.  The ISP will forward the\n   encapsulated packets into the Internet\
    \ without filtering since the\n   (outer) source address is topologically correct.\
    \  Once the packets\n   have been forwarded into the Internet, routing will direct\
    \ them to\n   Server(A).\n   Server(A) receives the encapsulated packets from\
    \ Client(A) then\n   rewrites the outer source address to one of its own locator\
    \ addresses\n   and rewrites the outer destination address to the subnet-router\n\
    \   anycast address of the appropriate address family associated with the\n  \
    \ inner destination address.  Server(A) then forwards the revised\n   encapsulated\
    \ packets into the Internet, where routing will direct\n   them to Relay(B), which\
    \ services the VPC overlay network associated\n   with host B.\n   Relay(B) will\
    \ intercept the encapsulated packets from Server(A) then\n   check its FIB to\
    \ discover an entry that covers inner destination\n   address B with Server(B)\
    \ as the next hop.  Relay(B) then returns SCMP\n   redirect messages to Server(A)\
    \ (*), rewrites the outer destination\n   address of the encapsulated packets\
    \ to the locator address of\n   Server(B), and forwards these revised packets\
    \ to Server(B).\n   Server(B) will receive the encapsulated packets from Relay(B)\
    \ then\n   check its FIB to discover an entry that covers destination address\
    \ B\n   with Client(B) as the next hop.  Server(B) then re-encapsulates the\n\
    \   packets in a new outer header that uses the source address,\n   destination\
    \ address, and nonce parameters associated with the tunnel-\n   neighbor state\
    \ for Client(B).  Server(B) then forwards these re-\n   encapsulated packets into\
    \ the Internet, where routing will direct\n   them to Client(B).  Client(B) will,\
    \ in turn, decapsulate the packets\n   and forward the inner packets to host B\
    \ via EUN B.\n   (*) Note that after the initial flow of packets, Server(A) will\
    \ have\n   received one or more SCMP redirect messages from Relay(B) listing\n\
    \   Server(B) as a better next hop.  Server(A) will, in turn, forward the\n  \
    \ redirects to Client(A), which will establish unidirectional tunnel-\n   neighbor\
    \ state and thereafter forward its encapsulated packets\n   directly to the locator\
    \ address of Server(B) without involving either\n   Server(A) or Relay(B), as\
    \ shown in Figure 7.\n                 ________________________________________\n\
    \              .-(                 .-.                    )-.\n           .-(\
    \                 ,-(  _)-.                    )-.\n        .-( +=============>\
    \ .-(_    (_  )-.======+             )-.\n      .(   //              (__ Internet\
    \   _)    ||                ).\n    .(    //                  `-(______)-'   \
    \   vv                  ).\n  .(     //                                   +------------+\
    \          ).\n  (     //                                    |  Server(B) |====+\
    \      )\n  (    //                                     +------------+    \\\\\
    \     )\n  (   //  .-.                                                .-. \\\\\
    \    )\n  (  //,-(  _)-.                                          ,-(  _)-\\\\\
    \   )\n  ( .||_    (_  )-.                                    .-(_    (_  ||.\
    \ )\n  ( _||  ISP A    .)                                  (__   ISP B  ||_))\n\
    \  (  ||-(______)-'                                       `-(______)||  )\n  (\
    \  ||    |                                                  |    vv  )\n   ( +-----+-----+\
    \              The IRON                +-----+-----+ )\n     | Client(A) |  (Overlaid\
    \ on the native Internet)   | Client(B) |\n     +-----+-----+                \
    \                      +-----+-----+\n           |    (                      \
    \                   )   |\n          .-.     .-(                             \
    \   .-)     .-.\n       ,-(  _)-.      .-(________________________)-.      ,-(\
    \  _)-.\n    .-(_    (_  )-.                                    .-(_    (_  )-.\n\
    \   (_  IRON EUN A  )                                  (_  IRON EUN B  )\n   \
    \   `-(______)-'                                       `-(______)-'\n        \
    \   |                                                  |\n       +---+----+  \
    \                                       +---+----+\n       | Host A |        \
    \                                 | Host B |\n       +--------+              \
    \                           +--------+\n              Figure 7: Sustained Packet\
    \ Flow after Redirects\n"
- title: 6.4.2.  Mixed IRON and Non-IRON Hosts
  contents:
  - "6.4.2.  Mixed IRON and Non-IRON Hosts\n   When one host is within an IRON EUN\
    \ and the other is in a non-IRON\n   EUN (i.e., one that connects to the native\
    \ Internet instead of the\n   IRON), the IA elements involved depend on the packet-flow\
    \ directions.\n   The cases are described in the following sub-sections.\n"
- title: 6.4.2.1.  From IRON Host A to Non-IRON Host B
  contents:
  - "6.4.2.1.  From IRON Host A to Non-IRON Host B\n   Figure 8 depicts the IRON reference\
    \ operating scenario for packets\n   flowing from host A in an IRON EUN to host\
    \ B in a non-IRON EUN.\n                  _________________________________________\n\
    \               .-(         )-.                             )-.\n            .-(\
    \      +-------)----+                           )-.\n         .-(         |  Relay(A)\
    \  |--------------+               )-.\n       .(            +------------+   \
    \            \\                ).\n     .(     +=======>|  Server(A) |       \
    \         \\                ).\n   .(     //         +--------)---+          \
    \       \\                 ).\n   (     //                   )               \
    \       \\                 )\n   (    //      The IRON      )                \
    \       \\                )\n   (   //  .-.                )                 \
    \       \\     .-.       )\n   (  //,-(  _)-.             )                  \
    \       \\ ,-(  _)-.    )\n   ( .||_    (_  )-.          ) The Native Internet\
    \    .-|_    (_  )-. )\n   ( _||  ISP A     )         )                      \
    \ (_ |  ISP B     ))\n   (  ||-(______)-'           )                        \
    \  |-(______)-'  )\n   (  ||    |             )-.                            v\
    \    |        )\n    ( +-----+ ----+    )-.                               +-----+-----+\
    \ )\n      | Client(A) |)-.                                   |  Router B |\n\
    \      +-----+-----+                                      +-----+-----+\n    \
    \        |  (                                            )  |\n           .-.\
    \   .-(____________________________________)-.   .-.\n        ,-(  _)-.      \
    \                                    ,-(  _)-.\n     .-(_    (_  )-.         \
    \                           .-(_    (_  )-.\n    (_  IRON EUN A  )           \
    \                       (_non-IRON EUN B)\n       `-(______)-'               \
    \                        `-(______)-'\n            |                         \
    \                         |\n        +---+----+                              \
    \           +---+----+\n        | Host A |                                   \
    \      | Host B |\n        +--------+                                        \
    \ +--------+\n               Figure 8: From IRON Host A to Non-IRON Host B\n \
    \  In this scenario, host A sends packets destined to host B via its\n   network\
    \ interface connected to IRON EUN A.  Routing within EUN A will\n   direct the\
    \ packets to Client(A) as a default router for the EUN,\n   which then uses VET\
    \ and SEAL to encapsulate them in outer headers\n   with its locator address as\
    \ the outer source address and the locator\n   address of Server(A) as the outer\
    \ destination address.  The ISP will\n   pass the packets without filtering since\
    \ the (outer) source address\n   is topologically correct.  Once the packets have\
    \ been released into\n   the native Internet, routing will direct them to Server(A).\n\
    \   Server(A) receives the encapsulated packets from Client(A) then re-\n   encapsulates\
    \ and forwards them to Relay(A), which simply decapsulates\n   them and forwards\
    \ the unencapsulated packets into the Internet.  Once\n   the packets are released\
    \ into the Internet, routing will direct them\n   to the final destination B.\
    \ (Note that Server(A) and Relay(A) are\n   depicted in Figure 8 as two halves\
    \ of a unified gateway.  In that\n   case, the \"forwarding\" between Server(A)\
    \ and Relay(A) is a zero-\n   instruction imaginary operation within the gateway.)\n\
    \   This scenario always involves a Server and Relay owned by the VPC\n   that\
    \ provides service to IRON EUN A. Therefore, it imparts a cost\n   that would\
    \ need to be borne by either the VPC or its customers.\n"
- title: 6.4.2.2.  From Non-IRON Host B to IRON Host A
  contents:
  - "6.4.2.2.  From Non-IRON Host B to IRON Host A\n   Figure 9 depicts the IRON reference\
    \ operating scenario for packets\n   flowing from host B in an Non-IRON EUN to\
    \ host A in an IRON EUN.\n                  _______________________________________\n\
    \               .-(         )-.                             )-.\n            .-(\
    \      +-------)----+                           )-.\n         .-(         |  Relay(A)\
    \  |<-------------+              )-.\n       .(            +------------+    \
    \           \\                ).\n     .(     +========|  Server(A) |        \
    \        \\                ).\n   .(     //         +--------)---+           \
    \      \\                 ).\n   (     //                   )                \
    \      \\                 )\n   (    //      The IRON      )                 \
    \      \\                )\n   (   //  .-.                )                  \
    \      \\     .-.       )\n   (  //,-(  _)-.             )                   \
    \      \\ ,-(  _)-.    )\n   ( .||_    (_  )-.          ) The Native Internet\
    \    .-|_    (_  )-. )\n   ( _||  ISP A     )         )                      \
    \ (_ |  ISP B     ))\n   (  ||-(______)-'           )                        \
    \  |-(______)-'  )\n   (  vv    |             )-.                            |\
    \     |       )\n    ( +-----+ ----+    )-.                               +-----+-----+\
    \ )\n      | Client(A) |)-.                                   |  Router B |\n\
    \      +-----+-----+                                      +-----+-----+\n    \
    \        |  (                                            )  |\n           .-.\
    \   .-(____________________________________)-.   .-.\n        ,-(  _)-.      \
    \                                    ,-(  _)-.\n     .-(_    (_  )-.         \
    \                           .-(_    (_  )-.\n    (_  IRON EUN A  )           \
    \                       (_non-IRON EUN B)\n       `-(______)-'               \
    \                        `-(_______)-'\n            |                        \
    \                          |\n        +---+----+                             \
    \            +---+----+\n        | Host A |                                  \
    \       | Host B |\n        +--------+                                       \
    \  +--------+\n               Figure 9: From Non-IRON Host B to IRON Host A\n\
    \   In this scenario, host B sends packets destined to host A via its\n   network\
    \ interface connected to non-IRON EUN B. Routing will direct\n   the packets to\
    \ Relay(A), which then forwards them to Server(A) using\n   encapsulation if necessary.\n\
    \   Server(A) will then check its FIB to discover an entry that covers\n   destination\
    \ address A with Client(A) as the next hop.  Server(A) then\n   (re-)encapsulates\
    \ the packets in an outer header that uses the source\n   address, destination\
    \ address, and nonce parameters associated with\n   the tunnel-neighbor state\
    \ for Client(A).  Next, Server(A) forwards\n   these (re-)encapsulated packets\
    \ into the Internet, where routing will\n   direct them to Client(A).  Client(A)\
    \ will, in turn, decapsulate the\n   packets and forward the inner packets to\
    \ host A via its network\n   interface connected to IRON EUN A.\n   This scenario\
    \ always involves a Server and Relay owned by the VPC\n   that provides service\
    \ to IRON EUN A. Therefore, it imparts a cost\n   that would need to be borne\
    \ by either the VPC or its customers.\n"
- title: 6.5.  Mobility, Multihoming, and Traffic Engineering Considerations
  contents:
  - "6.5.  Mobility, Multihoming, and Traffic Engineering Considerations\n   While\
    \ IRON Servers and Relays can be considered as fixed\n   infrastructure, Clients\
    \ may need to move between different network\n   points of attachment, connect\
    \ to multiple ISPs, or explicitly manage\n   their traffic flows.  The following\
    \ sections discuss mobility,\n   multihoming, and traffic engineering considerations\
    \ for IRON client\n   routers.\n"
- title: 6.5.1.  Mobility Management
  contents:
  - "6.5.1.  Mobility Management\n   When a Client changes its network point of attachment\
    \ (e.g., due to a\n   mobility event), it configures one or more new locators.\
    \  If the\n   Client has not moved far away from its previous network point of\n\
    \   attachment, it simply informs its Server of any locator additions or\n   deletions.\
    \  This operation is performance sensitive and should be\n   conducted immediately\
    \ to avoid packet loss.\n   If the Client has moved far away from its previous\
    \ network point of\n   attachment, however, it re-issues the anycast discovery\
    \ procedure\n   described in Section 6.1 to discover whether its candidate set\
    \ of\n   Servers has changed.  If the Client's current Server is also included\n\
    \   in the new list received from the VPC, this provides indication that\n   the\
    \ Client has not moved far enough to warrant changing to a new\n   Server.  Otherwise,\
    \ the Client may wish to move to a new Server in\n   order to reduce routing stretch.\
    \  This operation is not performance\n   critical, and therefore can be conducted\
    \ over a matter of seconds/\n   minutes instead of milliseconds/microseconds.\n\
    \   To move to a new Server, the Client first engages in the EP\n   registration\
    \ process with the new Server, as described in Section\n   5.3.  The Client then\
    \ informs its former Server that it has moved by\n   providing it with the locator\
    \ address of the new Server; again, via a\n   VPC-specific reliable transaction.\
    \  The former Server will then\n   garbage-collect the stale FIB entries when\
    \ their lifetime expires.\n   This will allow the former Server to redirect existing\
    \ correspondents\n   to the new Server so that no packets are lost.\n"
- title: 6.5.2.  Multihoming
  contents:
  - "6.5.2.  Multihoming\n   A Client may register multiple locators with its Server.\
    \  It can\n   assign metrics with its registrations to inform the Server of\n\
    \   preferred locators, and it can select outgoing locators according to\n   its\
    \ local preferences.  Therefore, multihoming is naturally\n   supported.\n"
- title: 6.5.3.  Inbound Traffic Engineering
  contents:
  - "6.5.3.  Inbound Traffic Engineering\n   A Client can dynamically adjust the priorities\
    \ of its prefix\n   registrations with its Server in order to influence inbound\
    \ traffic\n   flows.  It can also change between Servers when multiple Servers\
    \ are\n   available, but should strive for stability in its Server selection in\n\
    \   order to limit VPC network routing churn.\n"
- title: 6.5.4.  Outbound Traffic Engineering
  contents:
  - "6.5.4.  Outbound Traffic Engineering\n   A Client can select outgoing locators,\
    \ e.g., based on current\n   Quality-of-Service (QoS) considerations such as minimizing\
    \ one-way\n   delay or one-way delay variance.\n"
- title: 6.6.  Renumbering Considerations
  contents:
  - "6.6.  Renumbering Considerations\n   As new link-layer technologies and/or service\
    \ models emerge,\n   customers will be motivated to select their service providers\
    \ through\n   healthy competition between ISPs.  If a customer's EUN addresses\
    \ are\n   tied to a specific ISP, however, the customer may be forced to\n   undergo\
    \ a painstaking EUN renumbering process if it wishes to change\n   to a different\
    \ ISP [RFC4192][RFC5887].\n   When a customer obtains EP prefixes from a VPC,\
    \ it can change between\n   ISPs seamlessly and without need to renumber.  If\
    \ the VPC itself\n   applies unreasonable costing structures for use of the EPs,\
    \ however,\n   the customer may be compelled to seek a different VPC and would\
    \ again\n   be required to confront a renumbering scenario.  The IRON approach\
    \ to\n   renumbering avoidance therefore depends on VPCs conducting ethical\n\
    \   business practices and offering reasonable rates.\n"
- title: 6.7.  NAT Traversal Considerations
  contents:
  - "6.7.  NAT Traversal Considerations\n   The Internet today consists of a global\
    \ public IPv4 routing and\n   addressing system with non-IRON EUNs that use either\
    \ public or\n   private IPv4 addressing.  The latter class of EUNs connect to\
    \ the\n   public Internet via Network Address Translators (NATs).  When a\n  \
    \ Client is located behind a NAT, it selects Servers using the same\n   procedures\
    \ as for Clients with public addresses, e.g., it can send\n   SRS messages to\
    \ Servers in order to get SRA messages in return.  The\n   only requirement is\
    \ that the Client must configure its SEAL\n   encapsulation to use a transport\
    \ protocol that supports NAT\n   traversal, namely UDP.\n   Since the Server maintains\
    \ state about its Client customers, it can\n   discover locator information for\
    \ each Client by examining the UDP\n   port number and IP address in the outer\
    \ headers of the Client's\n   encapsulated packets.  When there is a NAT in the\
    \ path, the UDP port\n   number and IP address in each encapsulated packet will\
    \ correspond to\n   state in the NAT box and might not correspond to the actual\
    \ values\n   assigned to the Client.  The Server can then encapsulate packets\n\
    \   destined to hosts in the Client's EUN within outer headers that use\n   this\
    \ IP address and UDP port number.  The NAT box will receive the\n   packets, translate\
    \ the values in the outer headers, then forward the\n   packets to the Client.\
    \  In this sense, the Server's \"locator\" for the\n   Client consists of the\
    \ concatenation of the IP address and UDP port\n   number.\n   IRON does not introduce\
    \ any new issues to complications raised for\n   NAT traversal or for applications\
    \ embedding address referrals in\n   their payload.\n"
- title: 6.8.  Multicast Considerations
  contents:
  - "6.8.  Multicast Considerations\n   IRON Servers and Relays are topologically\
    \ positioned to provide\n   Internet Group Management Protocol (IGMP) / Multicast\
    \ Listener\n   Discovery (MLD) proxying for their Clients [RFC4605].  Further\n\
    \   multicast considerations for IRON (e.g., interactions with multicast\n   routing\
    \ protocols, traffic scaling, etc.) will be discussed in a\n   separate document.\n"
- title: 6.9.  Nested EUN Considerations
  contents:
  - "6.9.  Nested EUN Considerations\n   Each Client configures a locator that may\
    \ be taken from an ordinary\n   non-EPA address assigned by an ISP or from an\
    \ EPA address taken from\n   an EP assigned to another Client.  In that case,\
    \ the Client is said\n   to be \"nested\" within the EUN of another Client, and\
    \ recursive\n   nestings of multiple layers of encapsulations may be necessary.\n\
    \   For example, in the network scenario depicted in Figure 10, Client(A)\n  \
    \ configures a locator EPA(B) taken from the EP assigned to EUN(B).\n   Client(B)\
    \ in turn configures a locator EPA(C) taken from the EP\n   assigned to EUN(C).\
    \  Finally, Client(C) configures a locator ISP(D)\n   taken from a non-EPA address\
    \ delegated by an ordinary ISP(D).  Using\n   this example, the \"nested-IRON\"\
    \ case must be examined in which a host\n   A, which configures the address EPA(A)\
    \ within EUN(A), exchanges\n   packets with host Z located elsewhere in the Internet.\n\
    \                            .-.\n                 ISP(D)  ,-(  _)-.\n      +-----------+\
    \   .-(_    (_  )-.\n      | Client(C) |--(_    ISP(D)    )\n      +-----+-----+\
    \     `-(______)-'\n            |   <= T         \\     .-.\n           .-.  \
    \     u        \\ ,-(  _)-.\n        ,-(  _)-.       n     .-(_    (-  )-.\n \
    \    .-(_    (_  )-.      n  (_   Internet   )\n    (_    EUN(C)    )       e\
    \   `-(______)-'\n       `-(______)-'           l          ___\n            |\
    \ EPA(C)           s =>     (:::)-.\n      +-----+-----+                 .-(::::::::)\n\
    \      | Client(B) |              .-(::::::::::::)-.  +-----------+\n      +-----+-----+\
    \             (:::: The IRON ::::) |  Relay(Z) |\n            |              \
    \      `-(::::::::::::)-'  +-----------+\n           .-.                     \
    \ `-(::::::)-'        +-----------+\n        ,-(  _)-.                       \
    \                | Server(Z) |\n     .-(_    (_  )-.              +-----------+\
    \         +-----------+\n    (_    EUN(B)    )             | Server(C) |     \
    \       +-----------+\n       `-(______)-'               +-----------+       \
    \     | Client(Z) |\n            | EPA(B)                 +-----------+      \
    \   +-----------+\n      +-----+-----+                  | Server(B) |        \
    \    +--------+\n      | Client(A) |                  +-----------+          \
    \  | Host Z |\n      +-----------+                     +-----------+         +--------+\n\
    \            |                           | Server(A) |\n           .-.       \
    \                   +-----------+\n        ,-(  _)-.  EPA(A)\n     .-(_    (_\
    \  )-.    +--------+\n    (_    EUN(A)    )---| Host A |\n       `-(______)-'\
    \     +--------+\n                       Figure 10: Nested EUN Example\n   The\
    \ two cases of host A sending packets to host Z, and host Z sending\n   packets\
    \ to host A, must be considered separately, as described below.\n"
- title: 6.9.1.  Host A Sends Packets to Host Z
  contents:
  - "6.9.1.  Host A Sends Packets to Host Z\n   Host A first forwards a packet with\
    \ source address EPA(A) and\n   destination address Z into EUN(A).  Routing within\
    \ EUN(A) will direct\n   the packet to Client(A), which encapsulates it in an\
    \ outer header\n   with EPA(B) as the outer source address and Server(A) as the\
    \ outer\n   destination address then forwards the once-encapsulated packet into\n\
    \   EUN(B).  Routing within EUN(B) will direct the packet to Client(B),\n   which\
    \ encapsulates it in an outer header with EPA(C) as the outer\n   source address\
    \ and Server(B) as the outer destination address then\n   forwards the twice-encapsulated\
    \ packet into EUN(C).  Routing within\n   EUN(C) will direct the packet to Client(C),\
    \ which encapsulates it in\n   an outer header with ISP(D) as the outer source\
    \ address and Server(C)\n   as the outer destination address.  Client(C) then\
    \ sends this triple-\n   encapsulated packet into the ISP(D) network, where it\
    \ will be routed\n   into the Internet to Server(C).\n   When Server(C) receives\
    \ the triple-encapsulated packet, it removes\n   the outer layer of encapsulation\
    \ and forwards the resulting twice-\n   encapsulated packet into the Internet\
    \ to Server(B).  Next, Server(B)\n   removes the outer layer of encapsulation\
    \ and forwards the resulting\n   once-encapsulated packet into the Internet to\
    \ Server(A).  Next,\n   Server(A) checks the address type of the inner address\
    \ 'Z'.  If Z is\n   a non-EPA address, Server(A) simply decapsulates the packet\
    \ and\n   forwards it into the Internet.  Otherwise, Server(A) rewrites the\n\
    \   outer source and destination addresses of the once-encapsulated\n   packet\
    \ and forwards it to Relay(Z).  Relay(Z), in turn, rewrites the\n   outer destination\
    \ address of the packet to the locator for Server(Z),\n   then forwards the packet\
    \ and sends a redirect to Server(A) (which\n   forwards the redirect to Client(A)).\
    \  Server(Z) then re-encapsulates\n   the packet and forwards it to Client(Z),\
    \ which decapsulates it and\n   forwards the inner packet to host Z.  Subsequent\
    \ packets from\n   Client(A) will then use Server(Z) as the next hop toward host\
    \ Z,\n   which eliminates Server(A) and Relay(Z) from the path.\n"
- title: 6.9.2.  Host Z Sends Packets to Host A
  contents:
  - "6.9.2.  Host Z Sends Packets to Host A\n   Whether or not host Z configures an\
    \ EPA address, its packets destined\n   to host A will eventually reach Server(A).\
    \  Server(A) will have a\n   mapping that lists Client(A) as the next hop toward\
    \ EPA(A).\n   Server(A) will then encapsulate the packet with EPA(B) as the outer\n\
    \   destination address and forward the packet into the Internet.\n   Internet\
    \ routing will convey this once-encapsulated packet to\n   Server(B), which will\
    \ have a mapping that lists Client(B) as the next\n   hop toward EPA(B).  Server(B)\
    \ will then encapsulate the packet with\n   EPA(C) as the outer destination address\
    \ and forward the packet into\n   the Internet.  Internet routing will then convey\
    \ this twice-\n   encapsulated packet to Server(C), which will have a mapping\
    \ that\n   lists Client(C) as the next hop toward EPA(C).  Server(C) will then\n\
    \   encapsulate the packet with ISP(D) as the outer destination address\n   and\
    \ forward the packet into the Internet.  Internet routing will then\n   convey\
    \ this triple-encapsulated packet to Client(C).\n   When the triple-encapsulated\
    \ packet arrives at Client(C), it strips\n   the outer layer of encapsulation\
    \ and forwards the twice-encapsulated\n   packet to EPA(C), which is the locator\
    \ address of Client(B).  When\n   Client(B) receives the twice-encapsulated packet,\
    \ it strips the outer\n   layer of encapsulation and forwards the once-encapsulated\
    \ packet to\n   EPA(B), which is the locator address of Client(A).  When Client(A)\n\
    \   receives the once-encapsulated packet, it strips the outer layer of\n   encapsulation\
    \ and forwards the unencapsulated packet to EPA(A), which\n   is the host address\
    \ of host A.\n"
- title: 7.  Implications for the Internet
  contents:
  - "7.  Implications for the Internet\n   The IRON architecture envisions a hybrid\
    \ routing/mapping system that\n   benefits from both the shortest-path routing\
    \ afforded by pure dynamic\n   routing systems and the routing-scaling suppression\
    \ afforded by pure\n   mapping systems.  Therefore, IRON targets the elusive \"\
    sweet spot\"\n   that pure routing and pure mapping systems alone cannot satisfy.\n\
    \   The IRON system requires a deployment of new routers/servers\n   throughout\
    \ the Internet and/or provider networks to maintain well-\n   balanced virtual\
    \ overlay networks.  These routers/servers can be\n   deployed incrementally without\
    \ disruption to existing Internet\n   infrastructure and appropriately managed\
    \ to provide acceptable\n   service levels to customers.\n   End-to-end traffic\
    \ that traverses an IRON virtual overlay network may\n   experience delay variance\
    \ between the initial packets and subsequent\n   packets of a flow.  This is due\
    \ to the IRON system allowing a longer\n   path stretch for initial packets followed\
    \ by timely route\n   optimizations to utilize better next hop routers/servers\
    \ for\n   subsequent packets.\n   IRON virtual overlay networks also work seamlessly\
    \ with existing and\n   emerging services within the native Internet.  In particular,\n\
    \   customers serviced by IRON virtual overlay networks will receive the\n   same\
    \ service enjoyed by customers serviced by non-IRON service\n   providers.  Internet\
    \ services already deployed within the native\n   Internet also need not make\
    \ any changes to accommodate IRON virtual\n   overlay network customers.\n   The\
    \ IRON system operates between routers within provider networks and\n   end user\
    \ networks.  Within these networks, the underlying paths\n   traversed by the\
    \ virtual overlay networks may comprise links that\n   accommodate varying MTUs.\
    \  While the IRON system imposes an\n   additional per-packet overhead that may\
    \ cause the size of packets to\n   become slightly larger than the underlying\
    \ path can accommodate, IRON\n   routers have a method for naturally detecting\
    \ and tuning out all\n   instances of path MTU underruns.  In some cases, these\
    \ MTU underruns\n   may need to be reported back to the original hosts; however,\
    \ the\n   system will also allow for MTUs much larger than those typically\n \
    \  available in current Internet paths to be discovered and utilized as\n   more\
    \ links with larger MTUs are deployed.\n   Finally, and perhaps most importantly,\
    \ the IRON system provides an\n   in-built mobility management and multihoming\
    \ capability that allows\n   end user devices and networks to move about freely\
    \ while both\n   imparting minimal oscillations in the routing system and maintaining\n\
    \   generally shortest-path routes.  This mobility management is afforded\n  \
    \ through the very nature of the IRON customer/provider relationship,\n   and\
    \ therefore requires no adjunct mechanisms.  The mobility\n   management and multihoming\
    \ capabilities are further supported by\n   forward-path reachability detection\
    \ that provides \"hints of forward\n   progress\" in the same spirit as for IPv6\
    \ Neighbor Discovery (ND).\n"
- title: 8.  Additional Considerations
  contents:
  - "8.  Additional Considerations\n   Considerations for the scalability of Internet\
    \ Routing due to\n   multihoming, traffic engineering, and provider-independent\
    \ addressing\n   are discussed in [RADIR].  Other scaling considerations specific\
    \ to\n   IRON are discussed in Appendix B.\n   Route optimization considerations\
    \ for mobile networks are found in\n   [RFC5522].\n"
- title: 9.  Related Initiatives
  contents:
  - "9.  Related Initiatives\n   IRON builds upon the concepts of the RANGER architecture\
    \ [RFC5720]\n   [RFC6139], and therefore inherits the same set of related\n  \
    \ initiatives.  The Internet Research Task Force (IRTF) Routing\n   Research Group\
    \ (RRG) mentions IRON in its recommendation for a\n   routing architecture [RFC6115].\n\
    \   Virtual Aggregation (VA) [GROW-VA] and Aggregation in Increasing\n   Scopes\
    \ (AIS) [EVOLUTION] provide the basis for the Virtual Prefix\n   concepts.\n \
    \  Internet Vastly Improved Plumbing (Ivip) [IVIP-ARCH] has contributed\n   valuable\
    \ insights, including the use of real-time mapping.  The use\n   of Servers as\
    \ mobility anchor points is directly influenced by Ivip's\n   associated TTR mobility\
    \ extensions [TTRMOB].\n   [RO-CR] discusses a route optimization approach using\
    \ a Correspondent\n   Router (CR) model.  The IRON Server construct is similar\
    \ to the CR\n   concept described in this work; however, the manner in which customer\n\
    \   EUNs coordinate with Servers is different and based on the\n   redirection\
    \ model associated with NBMA links.\n   Numerous publications have proposed NAT\
    \ traversal techniques.  The\n   NAT traversal techniques adapted for IRON were\
    \ inspired by the Simple\n   Address Mapping for Premises Legacy Equipment (SAMPLE)\
    \ proposal\n   [SAMPLE].\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Security considerations that apply to tunneling\
    \ in general are\n   discussed in [V6OPS-TUN-SEC].  Additional considerations\
    \ that apply\n   also to IRON are discussed in RANGER [RFC5720] [RFC6139], VET\n\
    \   [INTAREA-VET] and SEAL [INTAREA-SEAL].\n   The IRON system further depends\
    \ on mutual authentication of IRON\n   Clients to Servers and Servers to Relays.\
    \  This is accomplished\n   through initial authentication exchanges followed\
    \ by tunnel-neighbor\n   nonces that can be used to detect off-path attacks. \
    \ As for all\n   Internet communications, the IRON system also depends on Relays\n\
    \   acting with integrity and not injecting false advertisements into the\n  \
    \ BGP (e.g., to mount traffic siphoning attacks).\n   Each VPC overlay network\
    \ requires a means for assuring the integrity\n   of the interior routing system\
    \ so that all Relays and Servers in the\n   overlay have a consistent view of\
    \ Client<->Server bindings.  Finally,\n   Denial-of-Service (DoS) attacks on IRON\
    \ Relays and Servers can occur\n   when packets with spoofed source addresses\
    \ arrive at high data rates.\n   However, this issue is no different than for\
    \ any border router in the\n   public Internet today.\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   The ideas behind this work have benefited greatly from\
    \ discussions\n   with colleagues; some of which appear on the RRG and other IRTF/IETF\n\
    \   mailing lists.  Robin Whittle and Steve Russert co-authored the TTR\n   mobility\
    \ architecture, which strongly influenced IRON.  Eric\n   Fleischman pointed out\
    \ the opportunity to leverage anycast for\n   discovering topologically close\
    \ Servers.  Thomas Henderson\n   recommended a quantitative analysis of scaling\
    \ properties.\n   The following individuals provided essential review input: Jari\n\
    \   Arkko, Mohamed Boucadair, Stewart Bryant, John Buford, Ralph Droms,\n   Wesley\
    \ Eddy, Adrian Farrel, Dae Young Kim, and Robin Whittle.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC0791]  Postel, J., \"Internet Protocol\"\
    , STD 5, RFC 791,\n              September 1981.\n   [RFC2460]  Deering, S. and\
    \ R. Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\"\
    , RFC 2460, December 1998.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [BGPMON]   net, B., \"BGPmon.net - Monitoring\
    \ Your Prefixes,\n              http://bgpmon.net/stat.php\", June 2010.\n   [EVOLUTION]\n\
    \              Zhang, B., Zhang, L., and L. Wang, \"Evolution Towards\n      \
    \        Global Routing Scalability\", Work in Progress,\n              October\
    \ 2009.\n   [GROW-VA]  Francis, P., Xu, X., Ballani, H., Jen, D., Raszuk, R.,\
    \ and\n              L. Zhang, \"FIB Suppression with Virtual Aggregation\", Work\n\
    \              in Progress, February 2011.\n   [INTAREA-SEAL]\n              Templin,\
    \ F., Ed., \"The Subnetwork Encapsulation and\n              Adaptation Layer\
    \ (SEAL)\", Work in Progress, February 2011.\n   [INTAREA-VET]\n             \
    \ Templin, F., Ed., \"Virtual Enterprise Traversal (VET)\",\n              Work\
    \ in Progress, January 2011.\n   [IVIP-ARCH]\n              Whittle, R., \"Ivip\
    \ (Internet Vastly Improved Plumbing)\n              Architecture\", Work in Progress,\
    \ March 2010.\n   [RADIR]    Narten, T., \"On the Scalability of Internet Routing\"\
    , Work\n              in Progress, February 2010.\n   [RFC1070]  Hagens, R., Hall,\
    \ N., and M. Rose, \"Use of the Internet as\n              a subnetwork for experimentation\
    \ with the OSI network\n              layer\", RFC 1070, February 1989.\n   [RFC2526]\
    \  Johnson, D. and S. Deering, \"Reserved IPv6 Subnet Anycast\n              Addresses\"\
    , RFC 2526, March 1999.\n   [RFC3068]  Huitema, C., \"An Anycast Prefix for 6to4\
    \ Relay Routers\",\n              RFC 3068, June 2001.\n   [RFC4192]  Baker, F.,\
    \ Lear, E., and R. Droms, \"Procedures for\n              Renumbering an IPv6\
    \ Network without a Flag Day\", RFC 4192,\n              September 2005.\n   [RFC4271]\
    \  Rekhter, Y., Li, T., and S. Hares, \"A Border Gateway\n              Protocol\
    \ 4 (BGP-4)\", RFC 4271, January 2006.\n   [RFC4548]  Gray, E., Rutemiller, J.,\
    \ and G. Swallow, \"Internet Code\n              Point (ICP) Assignments for NSAP\
    \ Addresses\", RFC 4548,\n              May 2006.\n   [RFC4605]  Fenner, B., He,\
    \ H., Haberman, B., and H. Sandick,\n              \"Internet Group Management\
    \ Protocol (IGMP) / Multicast\n              Listener Discovery (MLD)-Based Multicast\
    \ Forwarding\n              (\"IGMP/MLD Proxying\")\", RFC 4605, August 2006.\n\
    \   [RFC5214]  Templin, F., Gleeson, T., and D. Thaler, \"Intra-Site\n       \
    \       Automatic Tunnel Addressing Protocol (ISATAP)\", RFC 5214,\n         \
    \     March 2008.\n   [RFC5522]  Eddy, W., Ivancic, W., and T. Davis, \"Network\
    \ Mobility\n              Route Optimization Requirements for Operational Use\
    \ in\n              Aeronautics and Space Exploration Mobile Networks\",\n   \
    \           RFC 5522, October 2009.\n   [RFC5720]  Templin, F., \"Routing and\
    \ Addressing in Networks with\n              Global Enterprise Recursion (RANGER)\"\
    , RFC 5720,\n              February 2010.\n   [RFC5743]  Falk, A., \"Definition\
    \ of an Internet Research Task Force\n              (IRTF) Document Stream\",\
    \ RFC 5743, December 2009.\n   [RFC5887]  Carpenter, B., Atkinson, R., and H.\
    \ Flinck, \"Renumbering\n              Still Needs Work\", RFC 5887, May 2010.\n\
    \   [RFC6115]  Li, T., \"Recommendation for a Routing Architecture\",\n      \
    \        RFC 6115, February 2011.\n   [RFC6139]  Russert, S., Fleischman, E.,\
    \ and F. Templin, \"Routing and\n              Addressing in Networks with Global\
    \ Enterprise Recursion\n              (RANGER) Scenarios\", RFC 6139, February\
    \ 2011.\n   [RO-CR]    Bernardos, C., Calderon, M., and I. Soto, \"Correspondent\n\
    \              Router based Route Optimisation for NEMO (CRON)\", Work\n     \
    \         in Progress, July 2008.\n   [SAMPLE]   Carpenter, B. and S. Jiang, \"\
    Legacy NAT Traversal for\n              IPv6: Simple Address Mapping for Premises\
    \ Legacy Equipment\n              (SAMPLE)\", Work in Progress, June 2010.\n \
    \  [TTRMOB]   Whittle, R. and S. Russert, \"TTR Mobility Extensions for\n    \
    \          Core-Edge Separation Solutions to the Internet's Routing\n        \
    \      Scaling Problem,\n              http://www.firstpr.com.au/ip/ivip/TTR-Mobility.pdf\"\
    ,\n              August 2008.\n   [V6OPS-TUN-SEC]\n              Krishnan, S.,\
    \ Thaler, D., and J. Hoagland, \"Security\n              Concerns With IP Tunneling\"\
    , Work in Progress,\n              October 2010.\n"
- title: Appendix A.  IRON VPs over Internetworks with Different Address Families
  contents:
  - "Appendix A.  IRON VPs over Internetworks with Different Address Families\n  \
    \ The IRON architecture leverages the routing system by providing\n   generally\
    \ shortest-path routing for packets with EPA addresses from\n   VPs that match\
    \ the address family of the underlying Internetwork.\n   When the VPs are of an\
    \ address family that is not routable within the\n   underlying Internetwork,\
    \ however, (e.g., when OSI/NSAP [RFC4548] VPs\n   are used within an IPv4 Internetwork)\
    \ a global mapping database is\n   required to allow Servers to map VPs to companion\
    \ prefixes taken from\n   address families that are routable within the Internetwork.\
    \  For\n   example, an IPv6 VP (e.g., 2001:DB8::/32) could be paired with a\n\
    \   companion IPv4 prefix (e.g., 192.0.2.0/24) so that encapsulated IPv6\n   packets\
    \ can be forwarded over IPv4-only Internetworks.\n   Every VP in the IRON must\
    \ therefore be represented in a globally\n   distributed Master VP database (MVPd)\
    \ that maintains VP-to-companion\n   prefix mappings for all VPs in the IRON.\
    \  The MVPd is maintained by a\n   globally managed assigned numbers authority\
    \ in the same manner as the\n   Internet Assigned Numbers Authority (IANA) currently\
    \ maintains the\n   master list of all top-level IPv4 and IPv6 delegations.  The\
    \ database\n   can be replicated across multiple servers for load balancing, much\
    \ in\n   the same way that FTP mirror sites are used to manage software\n   distributions.\n\
    \   Upon startup, each Server discovers the full set of VPs for the IRON\n   by\
    \ reading the MVPd.  The Server reads the MVPd from a nearby server\n   and periodically\
    \ checks the server for deltas since the database was\n   last read.  After reading\
    \ the MVPd, the Server has a full list of VP-\n   to-companion prefix mappings.\n\
    \   The Server can then forward packets toward EPAs covered by a VP by\n   encapsulating\
    \ them in an outer header of the VP's companion prefix\n   address family and\
    \ using any address taken from the companion prefix\n   as the outer destination\
    \ address.  The companion prefix therefore\n   serves as an anycast prefix.\n\
    \   Possible encapsulations in this model include IPv6-in-IPv4, IPv4-in-\n   IPv6,\
    \ OSI/CLNP-in-IPv6, OSI/CLNP-in-IPv4, etc.\n"
- title: Appendix B.  Scaling Considerations
  contents:
  - "Appendix B.  Scaling Considerations\n   Scaling aspects of the IRON architecture\
    \ have strong implications for\n   its applicability in practical deployments.\
    \  Scaling must be\n   considered along multiple vectors, including Interdomain\
    \ core routing\n   scaling, scaling to accommodate large numbers of customer EUNs,\n\
    \   traffic scaling, state requirements, etc.\n   In terms of routing scaling,\
    \ each VPC will advertise one or more VPs\n   into the global Internet routing\
    \ system from which EPs are delegated\n   to customer EUNs.  Routing scaling will\
    \ therefore be minimized when\n   each VP covers many EPs.  For example, the IPv6\
    \ prefix 2001:DB8::/32\n   contains 2^24 ::/56 EP prefixes for assignment to EUNs;\
    \ therefore,\n   the IRON could accommodate 2^32 ::/56 EPs with only 2^8 ::/32\
    \ VPs\n   advertised in the interdomain routing core.  (When even longer EP\n\
    \   prefixes are used, e.g., /64s assigned to individual handsets in a\n   cellular\
    \ provider network, considerable numbers of EUNs can be\n   represented within\
    \ only a single VP.)  Each VP also has an associated\n   anycast companion prefix;\
    \ hence, there will be one anycast prefix\n   advertised into the global routing\
    \ system for each VP.\n   In terms of traffic scaling for Relays, each Relay represents\
    \ an ASBR\n   of a \"shell\" enterprise network that simply directs arriving traffic\n\
    \   packets with EPA destination addresses towards Servers that service\n   customer\
    \ EUNs.  Moreover, the Relay sheds traffic destined to EPAs\n   through redirection,\
    \ which removes it from the path for the vast\n   majority of traffic packets.\
    \  On the other hand, each Relay must\n   handle all traffic packets forwarded\
    \ between its customer EUNs and\n   the non-IRON Internet.  The scaling concerns\
    \ for this latter class of\n   traffic are no different than for ASBR routers\
    \ that connect large\n   enterprise networks to the Internet.  In terms of traffic\
    \ scaling for\n   Servers, each Server services a set of the VPC overlay network's\n\
    \   customer EUNs.  The Server services all traffic packets destined to\n   its\
    \ EUNs but only services the initial packets of flows initiated\n   from the EUNs\
    \ and destined to EPAs.  Therefore, traffic scaling for\n   EPA-addressed traffic\
    \ is an asymmetric consideration and is\n   proportional to the number of EUNs\
    \ each Server serves.\n   In terms of state requirements for Relays, each Relay\
    \ maintains a\n   list of all Servers in the VPC overlay network as well as FIB\
    \ entries\n   for all customer EUNs that each Server serves.  This state is\n\
    \   therefore dominated by the number of EUNs in the VPC overlay network.\n  \
    \ Sizing the Relay to accommodate state information for all EUNs is\n   therefore\
    \ required during VPC overlay network planning.  In terms of\n   state requirements\
    \ for Servers, each Server maintains tunnel-neighbor\n   state for each of the\
    \ customer EUNs it serves, but it need not keep\n   state for all EUNs in the\
    \ VPC overlay network.  Finally, neither\n   Relays nor Servers need keep state\
    \ for final destinations of outbound\n   traffic.\n   Clients source and sink\
    \ all traffic packets originating from or\n   destined to the customer EUN.  Therefore,\
    \ traffic scaling\n   considerations for Clients are the same as for any site\
    \ border\n   router.  Clients also retain state for the Servers for final\n  \
    \ destinations of outbound traffic flows.  This can be managed as soft\n   state,\
    \ since stale entries purged from the cache will be refreshed\n   when new traffic\
    \ packets are sent.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Fred L. Templin (editor)\n   Boeing Research & Technology\n\
    \   P.O. Box 3707 MC 7L-49\n   Seattle, WA  98124\n   USA\n   EMail: fltemplin@acm.org\n"
