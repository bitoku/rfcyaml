- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                         D. Worley
  contents:
  - "Independent Submission                                         D. Worley\n  \
    \           A Simpler Method for Resolving Alert-Info URNs\n"
- title: Abstract
  contents:
  - "Abstract\n   The \"alert\" namespace of Uniform Resource Names (URNs) can be\
    \ used in\n   the Alert-Info header field of Session Initiation Protocol (SIP)\n\
    \   requests and responses to inform a voice over IP (VoIP) telephone\n   (user\
    \ agent) of the characteristics of the call that the user agent\n   has originated\
    \ or terminated.  The user agent must resolve the URNs\n   into a signal; that\
    \ is, it must select the best available signal to\n   present to its user to indicate\
    \ the characteristics of the call.\n   RFC 7462 describes a non-normative algorithm\
    \ for signal selection.\n   This document describes a more efficient alternative\
    \ algorithm: a\n   user agent's designer can, based on the user agent's signals\
    \ and\n   their meanings, construct a finite state machine (FSM) to process the\n\
    \   URNs to select a signal in a way that obeys the restrictions given in\n  \
    \ the definition of the \"alert\" URN namespace.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not candidates for any level of Internet\
    \ Standard;\n   see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8433.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Requirements Governing Resolution Algorithms ...............4\n  \
    \    1.2. Summary of the New Resolution Algorithm ....................5\n    \
    \  1.3. Conventions Used in This Document ..........................7\n   2. Selecting\
    \ the Signals and Their Corresponding \"alert\" URNs ......7\n   3. General Considerations\
    \ for Processing Alert-Info ................9\n   4. Constructing the Finite State\
    \ Machine for a Very Simple\n      Example ........................................................10\n\
    \      4.1. Listing the Expressed URNs ................................11\n  \
    \    4.2. Constructing the Alphabet of Symbols ......................11\n    \
    \  4.3. Constructing the States and Transitions ...................13\n      4.4.\
    \ Summary ...................................................17\n      4.5. Examples\
    \ of Processing Alert-Info URNs ....................19\n   5. Further Examples\
    \ ...............................................20\n      5.1. Example with \"\
    source\" and \"priority\" URNs .................20\n      5.2. Example 1 of RFC\
    \ 7462 .....................................24\n      5.3. Examples 2, 3, and\
    \ 4 of RFC 7462 ..........................30\n      5.4. An Example That Subsets\
    \ Internal Sources ..................33\n      5.5. An Example of \"alert:service\"\
    \ URNs ........................34\n      5.6. An Example Using Country Codes ............................34\n\
    \   6. Prioritizing Signals ...........................................40\n  \
    \ 7. Dynamic Sets of Signals ........................................41\n   8.\
    \ Security Considerations ........................................43\n   9. IANA\
    \ Considerations ............................................43\n   10. References\
    \ ....................................................44\n      10.1. Normative\
    \ References .....................................44\n      10.2. Informative\
    \ References ...................................44\n   Acknowledgments ...................................................45\n\
    \   Author's Address ..................................................45\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   When a SIP user agent (UA) server receives an incoming INVITE\n\
    \   request, it chooses an alerting signal (the ring tone) to present to\n   its\
    \ user (the called user) by processing the Alert-Info header\n   field(s) in the\
    \ incoming INVITE request [RFC3261].  Similarly, a SIP\n   UA client determines\
    \ an alerting signal (the ringback tone) to\n   present to its user (the calling\
    \ user) by processing the Alert-Info\n   header field(s) in the incoming provisional\
    \ response(s) to its\n   outgoing INVITE request.\n   [RFC3261] envisioned that\
    \ the Alert-Info header field value would be\n   a URL that the UA could use to\
    \ retrieve the encoded media of the\n   signal.  This usage has security problems\
    \ and is inconvenient to\n   implement in practice.\n   [RFC7462] introduced an\
    \ alternative practice: the Alert-Info values\n   can be URNs in the \"alert\"\
    \ URN namespace that specify features of the\n   call or of the signal that should\
    \ be signaled to the user.  [RFC7462]\n   defined a large set of \"alert\" URNs\
    \ and procedures for extending\n   the set.\n   A UA is unlikely to provide more\
    \ than a small set of alerting\n   signals, and there are an infinite number of\
    \ possible combinations of\n   \"alert\" URNs.  Thus, a UA is often required to\
    \ select an alerting\n   signal that renders only a subset of the information\
    \ in the\n   Alert-Info header field(s) -- which is the resolution process for\n\
    \   \"alert\" URNs.  The requirements for resolving \"alert\" URNs are given\n\
    \   in Section 11.1 of [RFC7462].\n   Section 12 of [RFC7462] gives a (non-normative)\
    \ resolution algorithm\n   for selecting a signal that satisfies the requirements\
    \ of\n   Section 11.1 of that document.  That algorithm can be used regardless\n\
    \   of the set of alerting signals that the UA provides and their\n   specified\
    \ meanings.  The existence of the algorithm defined in\n   [RFC7462] demonstrates\
    \ that the resolution requirements can always be\n   satisfied.  However, the\
    \ algorithm is complex and slow.\n   The purpose of this document is to describe\
    \ an improved\n   implementation -- a more efficient resolution algorithm for\
    \ selecting\n   signals that conforms to the requirements of Section 11.1 of\n\
    \   [RFC7462].  (Of course, like any such algorithm, it is non-normative,\n  \
    \ and the implementation is free to use any algorithm that conforms to\n   the\
    \ requirements of Section 11.1 of [RFC7462].)\n   In the algorithm defined in\
    \ this document, once the UA designer has\n   chosen the set of signals that the\
    \ UA produces and the \"alert\" URNs\n   that they express, a finite state machine\
    \ (FSM) is constructed that\n   selects alerting signals based on the URNs in\
    \ the Alert-Info header\n   field(s) in a SIP message.  The incoming \"alert\"\
    \ URNs are\n   preprocessed in a straightforward manner into a sequence of \"\
    symbols\"\n   drawn from a fixed finite set; these symbols are then used as input\n\
    \   to the FSM.  After processing the input, the state of the FSM selects\n  \
    \ the correct alerting signal to present to the user.\n   Both the preprocessor\
    \ and the FSM are determined only by the selected\n   set of signals and the set\
    \ of \"alert\" URNs expressed by the signals,\n   so the processing machinery\
    \ can be fixed at the time of designing\n   the UA.\n"
- title: 1.1.  Requirements Governing Resolution Algorithms
  contents:
  - "1.1.  Requirements Governing Resolution Algorithms\n   The requirements for the\
    \ resolution of \"alert\" URNs are given in\n   Section 11.1 of [RFC7462] and\
    \ can be described as follows:\n   o  The \"alert\" URNs are processed from left\
    \ to right.  Each \"alert\"\n      URN has precedence over all URNs that follow\
    \ it, and its\n      interpretation is subordinate to all URNs that precede it.\n\
    \   o  As each URN is processed, one of the UA's signals is chosen that\n    \
    \  expresses that URN as far as can be done without reducing the\n      degree\
    \ to which any of the preceding URNs were expressed by the\n      signal chosen\
    \ for the preceding URN.  Thus, as processing\n      proceeds, the chosen signals\
    \ become increasingly specific and\n      contain more information, but all of\
    \ the information about a\n      particular URN that is expressed by the signal\
    \ chosen for that URN\n      is also expressed by the signals chosen for all following\
    \ URNs.\n   o  If the entirety of the current URN cannot be expressed by any\n\
    \      allowed signal, then each of the trailing alert-ind-parts (the\n      sections\
    \ separated by colons) is in turn removed until the reduced\n      URN can be\
    \ expressed by some signal that also expresses at least\n      the same reduced\
    \ versions of the preceding URNs that were\n      expressed by the signal chosen\
    \ for the preceding URN.  This can be\n      described as \"a signal that expresses\
    \ as much of the current URN\n      as possible while still expressing as much\
    \ of the previous URNs as\n      the preceding signal did.\"\n   So, for instance,\
    \ consider processing\n       Alert-Info: urn:alert:category-a:part-a1:part-a2,\n\
    \                   urn:alert:category-b:part-b1:part-b2\n   If the UA has no\
    \ signal for urn:alert:category-a:part-a1:part-a2, it\n   removes part-a2 from\
    \ the URN and checks whether it has a signal for\n   the less-specific URN urn:alert:category-a:part-a1.\
    \  If it has no\n   signal for that URN, it gives up on the URN entirely (since\n\
    \   urn:alert:category-a doesn't exist and can be considered to express\n   nothing\
    \ about the call), and the chosen signal is the default signal\n   of the UA,\
    \ i.e., the signal that is used when there is no Alert-Info.\n   But let us suppose\
    \ the UA has a signal for\n   urn:alert:category-a:part-a1 and chooses that signal\
    \ when processing\n   the first URN.  All processing after this point will be\
    \ restricted to\n   signals that express urn:alert:category-a:part-a1 or a more\
    \ specific\n   URN of the category \"category-a\".\n   The UA then goes on to\
    \ examine the next URN,\n   urn:alert:category-b:part-b1:part-b2.  If there is\
    \ a signal that\n   expresses both urn:alert:category-a:part-a1 and\n   urn:alert:category-b:part-b1:part-b2,\
    \ then the UA chooses that\n   signal.  If there is no such signal, the second\
    \ URN is reduced to\n   urn:alert:category-b:part-b1, and the UA checks for a\
    \ signal that\n   expresses that URN along with urn:alert:category-a:part-a1.\
    \  If there\n   is no such signal that matches that relaxed requirement, the second\n\
    \   URN is reduced to urn:alert:category-b, which is discarded, and the\n   chosen\
    \ signal for the first URN is chosen for the second URN.  In any\n   case, all\
    \ processing after this point will be restricted to signals\n   that express urn:alert:category-a:part-a1\
    \ or a more specific URN of\n   the category \"category-a\" and that also express\
    \ the chosen part of\n   urn:alert:category-b:part-b1:part-b2.\n   This process\
    \ is continued until the last \"alert\" URN is processed;\n   the signal chosen\
    \ for the last URN is the signal that the UA uses.\n"
- title: 1.2.  Summary of the New Resolution Algorithm
  contents:
  - "1.2.  Summary of the New Resolution Algorithm\n   The purpose of this document\
    \ is to describe a resolution algorithm\n   that conforms to Section 11.1 of [RFC7462]\
    \ but is simpler than the\n   algorithm described in Section 12 of [RFC7462]:\
    \ once the UA designer\n   has chosen a set of signals and the URNs that they\
    \ express, an FSM is\n   constructed that selects alerting signals based on the\
    \ URNs in the\n   Alert-Info header field(s) in a SIP message.\n   o  The designer\
    \ selects the set of signals that the UA produces,\n      matching each signal\
    \ to a set of \"alert\" URNs that together\n      specify the meaning that is\
    \ carried by the signal.  (If the signal\n      is a \"default\" signal that has\
    \ no specific meaning, the set is\n      empty.  If the signal carries the meaning\
    \ of one \"alert\" URN, the\n      set contains that URN.  If the signal carries\
    \ a meaning that is\n      the logical AND of two or more \"alert\" URNs, the\
    \ set contains\n      those URNs.)\n   o  Based on the UA's signals and their\
    \ meanings, the designer\n      constructs an \"alphabet\" containing a finite\
    \ number of symbols;\n      each possible \"alert\" URN is mapped into one particular\
    \ symbol.\n   o  The designer constructs an FSM whose input is the alphabet of\n\
    \      symbols and whose states describe the information extracted from\n    \
    \  the Alert-Info URNs.\n   o  Each state of the FSM has an associated signal.\
    \  Processing the\n      Alert-Info URNs will leave the FSM in some particular\
    \ state; the\n      UA renders the signal that is attached to that final state.\n\
    \   To select a ring tone or ringback tone based on a SIP message, the UA\n  \
    \ processes the \"alert\" URNs in the Alert-Info header field from left\n   to\
    \ right.  Initially, the FSM is in a designated initial state.  The\n   UA maps\
    \ each successive URN into the corresponding symbol and then\n   executes the\
    \ state transition of the FSM specified by the symbol.\n   The state of the FSM\
    \ after processing the URNs determines which\n   signal the UA will render to\
    \ the user.\n   Note that the UA generally has two FSMs, because a UA usually\
    \ wants\n   to signal different information in ring tones than it signals in\n\
    \   ringback tones.  One FSM is used to select the ring tone to render\n   for\
    \ an incoming INVITE request.  The other FSM is used to select the\n   ringback\
    \ tone to render based on an incoming provisional response to\n   an outgoing\
    \ INVITE request.  Both FSMs are constructed in the same\n   way, but the constructions\
    \ are based on different lists of signals\n   and corresponding URNs.\n   All\
    \ of the steps of the method after the designer has selected the\n   signals and\
    \ their URNs are algorithmic, and the algorithm of those\n   steps ensures that\
    \ the operation of the FSM will satisfy the\n   constraints of Section 11.1 of\
    \ [RFC7462].  A Python implementation of\n   the algorithmic steps is provided\
    \ in [code].\n   In simple situations, a suitable FSM or equivalent ad hoc code\
    \ can be\n   constructed by hand using ad hoc analysis.  Generally, this is only\n\
    \   practical in situations where a small number of alert-categories and\n   alert-indications\
    \ are signaled and the categories interact in a\n   simple, uniform way.  For\
    \ example, the examples in Sections 5.1 and\n   5.2 could be constructed by ad\
    \ hoc analysis.  But automatic\n   processing is valuable if the situation is\
    \ too complicated to\n   construct a correct FSM by ad hoc analysis, or if the\
    \ set of signals\n   will change too frequently for human production to be economical.\n"
- title: 1.3.  Conventions Used in This Document
  contents:
  - "1.3.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when,\
    \ they appear in all\n   capitals, as shown here.\n"
- title: 2.  Selecting the Signals and Their Corresponding "alert" URNs
  contents:
  - "2.  Selecting the Signals and Their Corresponding \"alert\" URNs\n   The designer\
    \ must select signals that the UA will generate and define\n   the meanings that\
    \ the signals will have to the user.  Based on this,\n   the designer determines\
    \ for each signal the \"alert\" URN or\n   combination of \"alert\" URNs that\
    \ (1) indicate that signal's meaning\n   in SIP messages and (2) consequently\
    \ should elicit that signal from\n   the UA.\n   For example, suppose the UA has\
    \ a particular ring tone for calls from\n   an external source.  A call from an\
    \ external source is marked with\n   the URN urn:alert:source:external (specified\
    \ in Section 9 of\n   [RFC7462]).  Thus, the table of signals includes:\n    \
    \   Signal                          URN(s)\n       ----------------------------\
    \    -------------------------------\n       external source                 urn:alert:source:external\n\
    \   Similarly, if the UA has a particular ring tone for calls from an\n   internal\
    \ source, the table includes:\n       Signal                          URN(s)\n\
    \       ----------------------------    -------------------------------\n    \
    \   internal source                 urn:alert:source:internal\n   If the UA has\
    \ ring tones for calls that are marked as having higher\n   or lower priority,\
    \ then the table includes:\n       Signal                          URN(s)\n  \
    \     ----------------------------    -------------------------------\n      \
    \ high priority                   urn:alert:priority:high\n       low priority\
    \                    urn:alert:priority:low\n   Note that the UA must be able\
    \ to signal for a message that has no\n   \"alert\" URNs in the Alert-Info header\
    \ field, which means that there\n   must always be a default signal that has zero\
    \ corresponding URNs:\n       Signal                          URN(s)\n       ----------------------------\
    \    -------------------------------\n       default                         (none)\n\
    \   A signal can be defined to indicate a combination of conditions.  For\n  \
    \ instance, a signal that is used only for high-priority, internal-\n   source\
    \ calls expresses two URNs and will only be used when both URNs\n   are present\
    \ in Alert-Info:\n       Signal                          URN(s)\n       ------------------------------\
    \  -------------------------------\n       high priority, internal source  urn:alert:priority:high,\n\
    \                                           urn:alert:source:internal\n   A signal\
    \ can be defined to cover a number of related conditions by\n   specifying a URN\
    \ that is the common prefix of the URNs for the\n   various conditions.  For instance,\
    \ the URNs for \"recall due to\n   callback\", \"recall due to call hold\", and\
    \ \"recall due to transfer\"\n   all start with urn:alert:service:recall, and\
    \ so one signal can be\n   provided for all of them by:\n       Signal       \
    \                   URN(s)\n       ----------------------------    -------------------------------\n\
    \       recall                          urn:alert:service:recall\n   But if a\
    \ specific signal is also provided for \"recall due to\n   callback\" by this\
    \ entry:\n       Signal                          URN(s)\n       ----------------------------\
    \    ---------------------------------\n       recall generally              \
    \  urn:alert:service:recall\n       recall due to callback          urn:alert:service:recall:callback\n\
    \   then if the message contains urn:alert:service:recall:callback, the\n   \"\
    recall due to callback\" signal will be chosen instead of \"recall\n   generally\"\
    \ because the UA chooses the signal that most completely\n   expresses the information\
    \ in the Alert-Info header field.\n   The designer may wish to define extension\
    \ URNs that provide more\n   specific information about a call than the standard\
    \ \"alert\" URNs do.\n   One method is to add additional components to standard\
    \ URNs.  For\n   instance, an extra-high priority could be indicated by the URN\n\
    \   urn:alert:priority:high:extra@example.  The final \"extra@example\" is\n \
    \  an \"alert-ind-part\" that is a private extension.  (See Sections 7 and\n \
    \  10.2 of [RFC7462] for a discussion of private extensions.)  In any\n   case,\
    \ adding an alert-ind-part to a URN makes its meaning more\n   specific, in that\
    \ any call to which the longer URN can be applied can\n   also have the shorter\
    \ URN applied.  In this case, \"extra-high-\n   priority calls\" are considered\
    \ a subset of \"high-priority calls\".\n       Signal                URN(s)\n\
    \       --------------------- -----------------------------------------\n    \
    \   high priority         urn:alert:priority:high\n       extra-high priority\
    \   urn:alert:priority:high:extra@example.com\n   Of course, for this extension\
    \ to be useful, the senders of SIP\n   messages (e.g., other UAs) must generate\
    \ the extension URN in\n   suitable circumstances.\n   In some circumstances,\
    \ the designer may want to create an entirely\n   new category of \"alert\" URNs\
    \ to indicate a type of information that\n   is not indicated by any standard\
    \ category of URNs.  In that case, the\n   designer uses a private extension as\
    \ the alert-category (the third\n   component of the URN), combined with whatever\
    \ alert-ind-part (fourth\n   component) values are desired.  For example, a simplified\
    \ version of\n   the U.S. military security designations could be:\n       Signal\
    \                    URN(s)\n       -----------------------   ---------------------------------------\n\
    \       unclassified              urn:alert:security@example:unclassified\n  \
    \     confidential              urn:alert:security@example:confidential\n    \
    \   secret                    urn:alert:security@example:secret\n       top secret\
    \                urn:alert:security@example:top-secret\n   The designer should\
    \ ensure that the new alert-category is orthogonal\n   to all defined standard\
    \ alert-categories, in that any combination of\n   one of the new URNs with one\
    \ of the standard URNs is meaningful in\n   that there could be a message carrying\
    \ both URNs.\n   In addition, the set of alert-ind-parts for the new alert-category\n\
    \   should be comprehensive and disjoint, in that every message can be\n   described\
    \ by exactly one of them.\n"
- title: 3.  General Considerations for Processing Alert-Info
  contents:
  - "3.  General Considerations for Processing Alert-Info\n   In this section, we\
    \ will discuss various considerations that arise\n   when processing Alert-Info.\
    \  These have to be taken care of properly\n   in order to conform to the standards,\
    \ as well as to ensure a good\n   user experience.  But since they are largely\
    \ independent of the\n   generated FSM and its processing, they are gathered here\
    \ in a\n   separate section.\n   The UA may have a number of different FSMs for\
    \ processing URNs.\n   Generally, there will be different FSMs for processing\
    \ Alert-Info in\n   incoming INVITE requests and for incoming provisional responses\
    \ to\n   outgoing INVITE requests.  But any situation that changes the set of\n\
    \   signals that the UA is willing to generate specifies a different set\n   of\
    \ signals and corresponding URNs and thus generates a different FSM.\n   For example,\
    \ if a call is active on the UA, all audible signals may\n   become unavailable,\
    \ or audible signals may be available only if\n   urn:alert:priority:high is specified.\n\
    \   Similarly, if the set of signals is customized by user action or\n   local\
    \ policy, the generated FSM must be updated.  This can be done by\n   (1) regenerating\
    \ it according to the method described here or\n   (2) generating a \"generic\"\
    \ FSM and instantiating it based on the\n   available signals.  (See Section 7\
    \ for a discussion of this.)\n   Note that the values in an Alert-Info header\
    \ field are allowed to be\n   URIs of any scheme and, within the \"urn\" scheme,\
    \ are allowed to have\n   any namespace [RFC3261].  The processing of URIs that\
    \ are not \"alert\"\n   URNs is not considered by this document, nor is that processing\n\
    \   specified by [RFC7462].  But the algorithm designer must consider\n   what\
    \ to do with such URIs if they are encountered.  The simplest\n   choice is to\
    \ ignore them.  Alternatively, the algorithm may examine\n   the URI to determine\
    \ if it names an alerting signal or describes how\n   to retrieve an alerting\
    \ signal, and, if so, choose to render that\n   signal rather than process the\
    \ \"alert\" URNs to select a signal.  In\n   any case, the remainder of this document\
    \ assumes that (1) the signal\n   is to be chosen based on the \"alert\" URNs\
    \ in Alert-Info and (2) all\n   Alert-Info URIs that are not \"alert\" URNs have\
    \ been removed.\n   The UA may also receive \"alert\" URNs that are semantically\
    \ invalid in\n   various ways.  For example, the URN may have only three components,\n\
    \   despite the fact that all valid \"alert\" URNs have at least one\n   alert-ind-part\
    \ and thus four components.  The only useful strategy is\n   to ignore such URNs\
    \ (and possibly log them for analysis).\n   The method described here is robust\
    \ in its handling of categories and\n   alert-ind-parts that are unknown to the\
    \ UA; as a consequence, it is\n   also robust if they are not valid standardized\
    \ URNs.  Thus, these\n   error conditions need not be handled specially.\n"
- title: 4.  Constructing the Finite State Machine for a Very Simple Example
  contents:
  - "4.  Constructing the Finite State Machine for a Very Simple Example\n   Constructing\
    \ the FSM involves:\n   1.  Listing the URNs that are expressed by the various\
    \ signals of\n       the UA.\n   2.  From the expressed URNs, constructing the\
    \ finite alphabet of\n       symbols into which input URNs are mapped and that\
    \ drive the state\n       transitions of the FSM.\n   3.  Constructing the states\
    \ of the FSM and the transitions between\n       them.\n   4.  Selecting a signal\
    \ to be associated with each FSM state.\n   We will explain the process using\
    \ a very simple example in which\n   there are two signals -- one expressing \"\
    internal source\" and one\n   expressing \"external source\" -- along with a default\
    \ signal (for when\n   there is no source information to signal).  The \"internal\
    \ source\"\n   signal expresses urn:alert:source:internal, and the \"external\
    \ source\"\n   signal expresses urn:alert:source:external.\n"
- title: 4.1.  Listing the Expressed URNs
  contents:
  - "4.1.  Listing the Expressed URNs\n   The first step is to establish for each\
    \ of the UA's signals what call\n   characteristics it represents, which is to\
    \ say, the set of \"alert\"\n   URNs that are its information content.\n     \
    \  Signal                          URN(s)\n       ----------------------------\
    \    -------------------------------\n       default                         (none)\n\
    \       internal source                 urn:alert:source:internal\n       external\
    \ source                 urn:alert:source:external\n   From the totality of these\
    \ expressed URNs, the designer can then\n   determine which sets of URNs must\
    \ be distinguished from each other.\n   In our simple example, the expressed URNs\
    \ are:\n       urn:alert:source:external\n       urn:alert:source:internal\n"
- title: 4.2.  Constructing the Alphabet of Symbols
  contents:
  - "4.2.  Constructing the Alphabet of Symbols\n   In order to reduce the infinite\
    \ set of possible \"alert\" URNs to a\n   finite alphabet of input symbols that\
    \ cause the FSM's transitions,\n   the designer must partition the \"alert\" URNs\
    \ into a finite set of\n   categories.\n   Once we've listed all the expressed\
    \ URNs, we can list all of the\n   alert-categories that are relevant to the UA's\
    \ signaling; \"alert\"\n   URNs in any other alert-category cannot affect the\
    \ signaling and can\n   be ignored.  (The easiest way to ignore the non-relevant\
    \ URNs is to\n   skip over them during Alert-Info processing.  A more formal method\
    \ is\n   to map all of them into one \"Other\" symbol and then, for each state\n\
    \   of the FSM, have the \"Other\" symbol transition to that same state.)\n  \
    \ Within each relevant alert-category, we now define a distinct\n   symbol for\
    \ every expressed URN and for all of their \"ancestor\" URNs\n   (those that can\
    \ be created by removing one or more trailing\n   alert-ind-parts).  In order\
    \ to name the symbols in a way that\n   distinguishes them from the corresponding\
    \ URNs, we remove the initial\n   \"urn:alert:\" and capitalize each alert-ind-part.\
    \  Thus, in our\n   example, we get these symbols:\n       Source\n       Source:External\n\
    \       Source:Internal\n   Note that there is a \"Source\" symbol even though\
    \ there is no\n   corresponding URN.  (urn:alert:source is not a valid URN --\
    \ see\n   Section 7 of [RFC7462] -- although the processing algorithm must be\n\
    \   prepared to screen out such a purported URN if it appears in the\n   Alert-Info\
    \ header field.)  However, its existence as a symbol will be\n   useful later\
    \ when we construct the FSM.\n   For each of these symbols, we add a symbol that\
    \ classifies URNs that\n   extend the symbol's corresponding URN with alert-ind-parts\
    \ that\n   cannot be expressed by signals:\n       Source:Other\n       Source:External:Other\n\
    \       Source:Internal:Other\n   The latter two classify URNs, such as\n   urn:alert:source:external:foo@example,\
    \ that extend URNs that we\n   already have symbols for.  The first is for classifying\
    \ URNs, such as\n   urn:alert:source:bar@example, that have first alert-ind-parts\
    \ that\n   contradict all the \"source\" URNs that the UA can signal.\n   These\
    \ steps give us this set of symbols:\n       Source\n       Source:External\n\
    \       Source:External:Other\n       Source:Internal\n       Source:Internal:Other\n\
    \       Source:Other\n   We can then simplify the set of symbols by removing the\
    \ ones like\n   Source:External:Other and Source:Internal:Other that consist of\n\
    \   adding \"Other\" to a symbol that corresponds to an expressed URN that\n \
    \  is not ancestral to any other expressed URNs.  This works because\n   adding\
    \ further alert-ind-parts to a URN that is a leaf in regard to\n   the set of\
    \ signals has no additional effect.  In this example,\n   urn:alert:source:external:foo@example\
    \ has the same effect as\n   urn:alert:source:external for both (1) causing a\
    \ signal to be chosen\n   and (2) suppressing the effect of later URNs.\n   This\
    \ leaves the following symbols for the \"source\" category:\n       Source\n \
    \      Source:External\n       Source:Internal\n       Source:Other\n   These\
    \ can be visually summarized by showing the infinite tree of\n   possible source\
    \ \"alert\" URNs and how it is partitioned into subtrees\n   that map to each\
    \ of these symbols.  We also mark with \"*\" the\n   expressed URNs.\n       \
    \                         urn:alert\n                                    |\n \
    \                               {   |    }\n                                {\
    \ source } --> 1\n                                {   |    }\n               \
    \                     |\n               +--------------------+------------------+\n\
    \               |                    |                  |\n          {    |  \
    \    }        {    |      }        {  |  }\n          { external* } --> 2  { internal*\
    \ } --> 3  { ... } --> 4\n          {    |      }        {    |      }       \
    \ {     }\n          {   ...     }        {   ...     }\n          {         \
    \  }        {           }\n       1 = Source\n       2 = Source:External\n   \
    \    3 = Source:Internal\n       4 = Source:Other\n"
- title: 4.3.  Constructing the States and Transitions
  contents:
  - "4.3.  Constructing the States and Transitions\n   The UA processes the Alert-Info\
    \ URNs from left to right using an FSM,\n   with each successive URN causing the\
    \ FSM to transition to a new\n   state.  Each state of the FSM records the information\
    \ that has so far\n   been extracted from the URNs.  The state of the FSM after\
    \ processing\n   all the URNs determines which signal the UA will render to the\
    \ user.\n   We label each state with a set of symbols, one from each relevant\n\
    \   category, that describe the information that's been extracted from\n   all\
    \ of the URNs that have so far been processed.  The initial state\n   is labeled\
    \ with the \"null\" symbols that are just the category names,\n   because no information\
    \ has yet been recorded.  In our simple example,\n   the initial state is labeled\
    \ \"Source\", since that's the only relevant\n   category.\n       State: Source\
    \ (initial state)\n   Each state has a corresponding alerting signal, which is\
    \ the signal\n   that the UA will produce when URN processing leaves the FSM in\
    \ that\n   state.  The signal is the one that best expresses the information\n\
    \   that has been extracted from the URNs.  Usually, the choice of signal\n  \
    \ is obvious to the designer, but there are certain constraints that\n   the choice\
    \ must satisfy.  The main constraint is that the signal's\n   expressed URNs must\
    \ be semantic supersets of (i.e., identical to or a\n   prefix of) the URNs corresponding\
    \ to the symbols in the state's\n   label.  In particular, if the expressed URN\
    \ of the signal in a\n   certain category is shorter than the state's label, we\
    \ show that in\n   the state's name by putting parentheses around the trailing\
    \ part of\n   the symbol that is not expressed by the signal.  For instance, if\
    \ the\n   symbol in the label is \"Source:External\" but the signal only\n   expresses\
    \ \"Source\" (i.e., no \"source\" URN at all), then the symbol in\n   the label\
    \ is modified to be \"Source:(External)\".\n   The reason for this nonintuitive\
    \ construction is that in some states,\n   the FSM has recorded information that\
    \ the chosen signal cannot\n   express.\n   Note that the parentheses are part\
    \ of the state name, so in some\n   circumstances there may be two or more distinct\
    \ states labeled with\n   the same symbols but with different placement of parentheses\
    \ within\n   the symbols.  These similar state names are relevant when the FSM\
    \ can\n   record information from multiple \"alert\" URNs but cannot express all\n\
    \   of them -- depending on the order in which the URNs appear, the UA\n   may\
    \ have to render different signals, so it needs states that record\n   the same\
    \ information but render different subsets of that\n   information.\n   The initial\
    \ state's label is the string of null symbols for the\n   relevant categories,\
    \ so the only allowed signal is the default\n   signal, which expresses no URNs:\n\
    \       State: Source (initial state)\n       Signal: default\n   From each state,\
    \ we must construct the transition for each possible\n   input symbol.  For a\
    \ particular current state and symbol, we\n   construct the label of the next\
    \ state by combining the input symbol\n   with the symbol in the current state's\
    \ label for the same category.\n   If one of the symbols is a prefix of the other,\
    \ we select the longer\n   one; if not, we select the symbol in the current state's\
    \ label.\n   Thus, in our simple example, the initial state has the following\n\
    \   transitions:\n       State: Source (initial state)\n       Signal: default\n\
    \       Transitions:\n           Source:External -> Source:External\n        \
    \   Source:Internal -> Source:Internal\n           Source:Other -> Source:Other\n\
    \   In all of these transitions, the input symbol is compatible with the\n   matching\
    \ label of the current state, \"Source\", so the next state's\n   label is the\
    \ full input symbol.\n   However, there is a further constraint on the next state:\
    \ its signal\n   must express URNs that at least contain the expressed URNs of\
    \ the\n   signal of the current state.  Within that constraint, and being\n  \
    \ compatible with the next state's label, for the category of the input\n   URN,\
    \ the next state's signal must express the longest URN that can be\n   expressed\
    \ by any signal.\n   In our example, this means that the next Source:External\
    \ state has\n   the \"external source\" signal, which expresses\n   urn:alert:source:external.\
    \  Since that signal expresses all of the\n   state's label, it is the chosen\
    \ state.  Similarly, the next\n   Source:Internal state has the \"internal source\"\
    \ signal.  But for the\n   transition on input Source:Other, the \"Source:Other\"\
    \ state must have\n   the default signal, as there is no signal that expresses\n\
    \   urn:alert:source:[some-unknown-alert-ind-part].  So the next state is\n  \
    \ \"Source:(Other)\", where the parentheses record that the \"Other\" part\n \
    \  of the label is not expressed by the state's signal.\n   Thus, the current\
    \ state and the next states that it can transition\n   to are:\n       State:\
    \ Source (initial state)\n       Signal: default\n       Transitions:\n      \
    \     Source:External -> Source:External\n           Source:Internal -> Source:Internal\n\
    \           Source:Other -> Source:(Other)\n       State: Source:External\n  \
    \     Signal: external source (urn:alert:source:external)\n       State: Source:Internal\n\
    \       Signal: internal source (urn:alert:source:internal)\n       State: Source:(Other)\n\
    \       Signal: default\n   Looking at the state Source:External, we see that\
    \ it is incompatible\n   with all input symbols other than Source:External, and\
    \ thus all of\n   its transitions are to itself:\n       State: Source:External\n\
    \       Signal: external source (urn:alert:source:external)\n       Transitions:\n\
    \           Source:External -> Source:External\n           Source:Internal ->\
    \ Source:External\n           Source:Other -> Source:External\n   and similarly:\n\
    \       State: Source:Internal\n       Signal: internal source (urn:alert:source:internal)\n\
    \       Transitions:\n           Source:External -> Source:Internal\n        \
    \   Source:Internal -> Source:Internal\n           Source:Other -> Source:Internal\n\
    \       State: Source:(Other)\n       Signal: default\n       Transitions:\n \
    \          Source:External -> Source:(Other)\n           Source:Internal -> Source:(Other)\n\
    \           Source:Other -> Source:(Other)\n"
- title: 4.4.  Summary
  contents:
  - "4.4.  Summary\n   The FSM can be constructed by processing the file \"very-simple.txt\"\
    \n   with the program \"alert-info-fsm.py\" in [code].  The program's output\n\
    \   shows the stages of the construction, which are as follows:\n   1.  The signals\
    \ have the meanings:\n       Signal                          URN(s)\n       ----------------------------\
    \    -------------------------------\n       default                         (none)\n\
    \       internal source                 urn:alert:source:internal\n       external\
    \ source                 urn:alert:source:external\n   2.  The expressed URNs\
    \ are:\n       urn:alert:source:external\n       urn:alert:source:internal\n \
    \  3.  The relevant categories of \"alert\" URNs are only:\n       source\n  \
    \ 4.  Thus, the infinite universe of possible \"alert\" URNs can be\n       reduced\
    \ to these symbols, which are the categories of URNs that\n       are different\
    \ in ways that are significant to the resolution\n       process:\n       Source\n\
    \       Source:External\n       Source:Internal\n       Source:Other\n   5.  The\
    \ FSM is:\n       State: Source (initial state)\n       Signal: default\n    \
    \   Transitions:\n           Source:External -> Source:External\n           Source:Internal\
    \ -> Source:Internal\n           Source:Other -> Source:(Other)\n       State:\
    \ Source:External\n       Signal: external source (urn:alert:source:external)\n\
    \       Transitions:\n           Source:External -> Source:External\n        \
    \   Source:Internal -> Source:External\n           Source:Other -> Source:External\n\
    \       State: Source:Internal\n       Signal: internal source (urn:alert:source:internal)\n\
    \       Transitions:\n           Source:External -> Source:Internal\n        \
    \   Source:Internal -> Source:Internal\n           Source:Other -> Source:Internal\n\
    \       State: Source:(Other)\n       Signal: default\n       Transitions:\n \
    \          Source:External -> Source:(Other)\n           Source:Internal -> Source:(Other)\n\
    \           Source:Other -> Source:(Other)\n       *  Each state is labeled by\
    \ a set of symbols that describe the\n          information that has been extracted\
    \ from the URNs so far.\n       *  Each state has a signal that is a semantic\
    \ superset of the\n          state's label, i.e., the signal's expressed URNs\
    \ match the\n          initial portion of the label symbols.  If Alert-Info\n\
    \          processing finishes with the FSM in a state, the UA will\n        \
    \  render the state's signal to the user.\n       *  The state's label is marked\
    \ to show what subset of the symbols\n          are expressed by the state's signal.\
    \  Two states can have the\n          same label but different signals.\n    \
    \   *  If a transition's input symbol is compatible with (is a\n          semantic\
    \ subset of) the current state's label for that\n          category, the next\
    \ state's label is updated with the input\n          symbol.  If not, the next\
    \ state is the current state.  This is\n          how the state's label records\
    \ what information has been\n          accumulated while processing the Alert-Info\
    \ URNs.\n       *  A transition's next state has a signal that semantically\n\
    \          subsets the current state's signal as much as possible in the\n   \
    \       category of the input symbol.  (In most cases, the choice of\n       \
    \   signal is unique.  In rare cases, there may be more than one\n          signal\
    \ that meets this criterion, so the designer may have\n          some flexibility.)\n"
- title: 4.5.  Examples of Processing Alert-Info URNs
  contents:
  - "4.5.  Examples of Processing Alert-Info URNs\n   In the trivial case where the\
    \ UA receives no Alert-Info URNs,\n   processing begins and ends with the FSM\
    \ in the initial state, and the\n   default signal is selected.\n   If the UA\
    \ receives\n       Alert-Info: <urn:alert:source:internal>\n   then processing\
    \ progresses:\n       State: Source\n           Process: Source:Internal (urn:alert:source:internal)\n\
    \       State: Source:Internal\n       Signal: internal source\n   If the UA receives\n\
    \       Alert-Info: <urn:alert:source:external>,\n           <urn:alert:source:internal>\n\
    \   then processing progresses:\n       State: Source\n           Process: Source:External\
    \ (urn:alert:source:external)\n       State: Source:External\n           Process:\
    \ Source:Internal (urn:alert:source:internal)\n       State: Source:External\n\
    \       Signal: external source\n   If the UA receives\n       Alert-Info: <urn:alert:source:unclassified>,\n\
    \           <urn:alert:source:internal>\n   then processing progresses:\n    \
    \   State: Source\n           Process: Source:Other (urn:alert:source:unclassified)\n\
    \       State: Source:(Other)\n           Process: Source:Internal (urn:alert:source:internal)\n\
    \       State: Source:(Other)\n       Signal: default\n   If the UA receives\n\
    \       Alert-Info: <urn:alert:priority:high>,\n           <urn:alert:source:internal>\n\
    \   then processing progresses:\n       State: Source\n           Ignore: urn:alert:priority:high\n\
    \       State: Source\n           Process: Source:Internal (urn:alert:source:internal)\n\
    \       State: Source:Internal\n       Signal: internal source\n"
- title: 5.  Further Examples
  contents:
  - '5.  Further Examples

    '
- title: 5.1.  Example with "source" and "priority" URNs
  contents:
  - "5.1.  Example with \"source\" and \"priority\" URNs\n   Now consider an example\
    \ where the UA can signal \"external source\",\n   \"internal source\", \"low\
    \ priority\", and \"high priority\" individually\n   or in any combination of\
    \ source and priority, along with a default\n   signal.  This example is essentially\
    \ the Cartesian product of two\n   copies of the example in Section 4: one dealing\
    \ with the call's\n   source and one dealing with the call's priority.  So there\
    \ are a\n   total of 9 signals:\n       Signal                          URN(s)\n\
    \       ----------------------------    -------------------------------\n    \
    \   default                         (none)\n       external source           \
    \      urn:alert:source:external\n       internal source                 urn:alert:source:internal\n\
    \       low priority                    urn:alert:priority:low\n       low priority/external\
    \ source    urn:alert:priority:low,\n                                        \
    \   urn:alert:source:external\n       low priority/internal source    urn:alert:priority:low,\n\
    \                                           urn:alert:source:internal\n      \
    \ high priority                   urn:alert:priority:high\n       high priority/external\
    \ source   urn:alert:priority:high,\n                                        \
    \   urn:alert:source:external\n       high priority/internal source   urn:alert:priority:high,\n\
    \                                           urn:alert:source:internal\n   The\
    \ expressed URNs are:\n       urn:alert:source:external\n       urn:alert:source:internal\n\
    \       urn:alert:priority:low\n       urn:alert:priority:high\n   The relevant\
    \ categories of \"alert\" URNs are only:\n       source\n       priority\n   The\
    \ alphabet of symbols is:\n       Source\n       Source:External\n       Source:Internal\n\
    \       Source:Other\n       Priority\n       Priority:Low\n       Priority:High\n\
    \       Priority:Other\n   The 16 states are as follows, where 9 states are \"\
    sink\" states from\n   which no further information can be recorded, as all transitions\
    \ from\n   the state lead to itself.\n       State: Priority/Source\n       Signal:\
    \ default\n       Transitions:\n           Priority:Other -> Priority:(Other)/Source\n\
    \           Priority:High -> Priority:High/Source\n           Priority:Low ->\
    \ Priority:Low/Source\n           Source:Other -> Priority/Source:(Other)\n  \
    \         Source:External -> Priority/Source:External\n           Source:Internal\
    \ -> Priority/Source:Internal\n       State: Priority:(Other)/Source\n       Signal:\
    \ default\n       Transitions:\n           Priority:Other -> Priority:(Other)/Source\n\
    \           Priority:High -> Priority:(Other)/Source\n           Priority:Low\
    \ -> Priority:(Other)/Source\n           Source:Other -> Priority:(Other)/Source:(Other)\n\
    \           Source:External -> Priority:(Other)/Source:External\n           Source:Internal\
    \ -> Priority:(Other)/Source:Internal\n       State: Priority:(Other)/Source:(Other)\n\
    \       Signal: default\n       Transitions:\n           any -> Priority:(Other)/Source:(Other)\n\
    \       State: Priority:(Other)/Source:External\n       Signal: external source\n\
    \       Transitions:\n           any -> Priority:(Other)/Source:External\n   \
    \    State: Priority:(Other)/Source:Internal\n       Signal: internal source\n\
    \       Transitions:\n           any -> Priority:(Other)/Source:Internal\n   \
    \    State: Priority:High/Source\n       Signal: high priority\n       Transitions:\n\
    \           Priority:Other -> Priority:High/Source\n           Priority:High ->\
    \ Priority:High/Source\n           Priority:Low -> Priority:High/Source\n    \
    \       Source:Other -> Priority:High/Source:(Other)\n           Source:External\
    \ -> Priority:High/Source:External\n           Source:Internal -> Priority:High/Source:Internal\n\
    \       State: Priority:High/Source:(Other)\n       Signal: high priority\n  \
    \     Transitions:\n           any -> Priority:High/Source:(Other)\n       State:\
    \ Priority:High/Source:External\n       Signal: high priority/external source\n\
    \       Transitions:\n           any -> Priority:High/Source:External\n      \
    \ State: Priority:High/Source:Internal\n       Signal: high priority/internal\
    \ source\n       Transitions:\n           any -> Priority:High/Source:Internal\n\
    \       State: Priority:Low/Source\n       Signal: low priority\n       Transitions:\n\
    \           Priority:Other -> Priority:Low/Source\n           Priority:High ->\
    \ Priority:Low/Source\n           Priority:Low -> Priority:Low/Source\n      \
    \     Source:Other -> Priority:Low/Source:(Other)\n           Source:External\
    \ -> Priority:Low/Source:External\n           Source:Internal -> Priority:Low/Source:Internal\n\
    \       State: Priority:Low/Source:(Other)\n       Signal: low priority\n    \
    \   Transitions:\n           any -> Priority:Low/Source:(Other)\n       State:\
    \ Priority:Low/Source:External\n       Signal: low priority/external source\n\
    \       Transitions:\n           any -> Priority:Low/Source:External\n       State:\
    \ Priority:Low/Source:Internal\n       Signal: low priority/internal source\n\
    \       Transitions:\n           any -> Priority:Low/Source:Internal\n       State:\
    \ Priority/Source:(Other)\n       Signal: default\n       Transitions:\n     \
    \      Priority:Other -> Priority:(Other)/Source:(Other)\n           Priority:High\
    \ -> Priority:High/Source:(Other)\n           Priority:Low -> Priority:Low/Source:(Other)\n\
    \           Source:Other -> Priority/Source:(Other)\n           Source:External\
    \ -> Priority/Source:(Other)\n           Source:Internal -> Priority/Source:(Other)\n\
    \       State: Priority/Source:External\n       Signal: external source\n    \
    \   Transitions:\n           Priority:Other -> Priority:(Other)/Source:External\n\
    \           Priority:High -> Priority:High/Source:External\n           Priority:Low\
    \ -> Priority:Low/Source:External\n           Source:Other -> Priority/Source:External\n\
    \           Source:External -> Priority/Source:External\n           Source:Internal\
    \ -> Priority/Source:External\n       State: Priority/Source:Internal\n      \
    \ Signal: internal source\n       Transitions:\n           Priority:Other -> Priority:(Other)/Source:Internal\n\
    \           Priority:High -> Priority:High/Source:Internal\n           Priority:Low\
    \ -> Priority:Low/Source:Internal\n           Source:Other -> Priority/Source:Internal\n\
    \           Source:External -> Priority/Source:Internal\n           Source:Internal\
    \ -> Priority/Source:Internal\n   An example of processing that involves multiple\
    \ \"source\" URNs and one\n   \"priority\" URN:\n       Alert-Info: <urn:alert:source:internal>,\n\
    \           <urn:alert:source:unclassified>,\n           <urn:alert:priority:high>\n\
    \   in which case processing progresses:\n       State: Source/Priority\n    \
    \       Process: Source:Internal (urn:alert:source:internal)\n       State: Source:Internal/Priority\n\
    \           Process: Source:(Other) (urn:alert:source:unclassified)\n       State:\
    \ Source:Internal/Priority\n           Process: Priority:High (urn:alert:priority:high)\n\
    \       State: Source:Internal/Priority:High\n       Signal: internal source/high\
    \ priority\n"
- title: 5.2.  Example 1 of RFC 7462
  contents:
  - "5.2.  Example 1 of RFC 7462\n   A more complicated example is provided in Section\
    \ 12.2.1 of\n   [RFC7462].  It is like the example in Section 5.1 of this document,\n\
    \   except that the UA can only signal \"external source\", \"internal\n   source\"\
    , \"low priority\", and \"high priority\" individually but not in\n   combination,\
    \ as well as a default signal:\n       Signal                          URN(s)\n\
    \       ----------------------------    -------------------------------\n    \
    \   default                         (none)\n       internal source           \
    \      urn:alert:source:external\n       external source                 urn:alert:source:internal\n\
    \       low priority                    urn:alert:priority:low\n       high priority\
    \                   urn:alert:priority:high\n   The signals can express the following\
    \ URNs:\n       urn:alert:source:external\n       urn:alert:source:internal\n\
    \       urn:alert:priority:low\n       urn:alert:priority:high\n   The relevant\
    \ categories of \"alert\" URNs are:\n       source\n       priority\n   The alphabet\
    \ of symbols is:\n       Source\n       Source:External\n       Source:Internal\n\
    \       Source:Other\n       Priority\n       Priority:Low\n       Priority:High\n\
    \       Priority:Other\n   In this example, the FSM has 20 states because both\
    \ \"source\" and\n   \"priority\" URNs are recorded, but the order in which the\
    \ two appear\n   affects the signal:\n       State: Priority/Source\n       Signal:\
    \ default\n       Transitions:\n           Priority:Other -> Priority:(Other)/Source\n\
    \           Priority:High -> Priority:High/Source\n           Priority:Low ->\
    \ Priority:Low/Source\n           Source:Other -> Priority/Source:(Other)\n  \
    \         Source:External -> Priority/Source:External\n           Source:Internal\
    \ -> Priority/Source:Internal\n   State Priority:(Other)/Source can transition\
    \ to states that can\n   signal the source, because the recorded priority can't\
    \ be signaled\n   and thus does not block the signaling of the source:\n     \
    \  State: Priority:(Other)/Source\n       Signal: default\n       Transitions:\n\
    \           Priority:Other -> Priority:(Other)/Source\n           Priority:High\
    \ -> Priority:(Other)/Source\n           Priority:Low -> Priority:(Other)/Source\n\
    \           Source:Other -> Priority:(Other)/Source:(Other)\n           Source:External\
    \ -> Priority:(Other)/Source:External\n           Source:Internal -> Priority:(Other)/Source:Internal\n\
    \       State: Priority:(Other)/Source:(Other)\n       Signal: default\n     \
    \  Transitions:\n           any -> Priority:(Other)/Source:(Other)\n       State:\
    \ Priority:(Other)/Source:External\n       Signal: external source\n       Transitions:\n\
    \           any -> Priority:(Other)/Source:External\n       State: Priority:(Other)/Source:Internal\n\
    \       Signal: internal source\n       Transitions:\n           any -> Priority:(Other)/Source:Internal\n\
    \   Because there are no signals for combinations of \"source\" and\n   \"priority\"\
    \ URNs, processing a \"source\" URN from the state\n   Priority:High/Source leads\
    \ to a state that records the priority\n   information but does not signal it:\n\
    \       State: Priority:High/Source\n       Signal: high priority\n       Transitions:\n\
    \           Priority:Other -> Priority:High/Source\n           Priority:High ->\
    \ Priority:High/Source\n           Priority:Low -> Priority:High/Source\n    \
    \       Source:Other -> Priority:High/Source:(Other)\n           Source:External\
    \ -> Priority:High/Source:(External)\n           Source:Internal -> Priority:High/Source:(Internal)\n\
    \       State: Priority:High/Source:(Other)\n       Signal: high priority\n  \
    \     Transitions:\n           any -> Priority:High/Source:(Other)\n   From the\
    \ state Priority:High/Source, \"source\" URNs transition to\n   states that record\
    \ both source and priority but signal only priority,\n   one of which is Priority:High/Source:(External).\
    \  But from\n   Priority/Source:External, the symbol Priority:High transitions\
    \ to the\n   state Priority:(High)/Source:External, which records the same\n \
    \  information but signals the source, not the priority.  One state is\n   reached\
    \ by processing a \"priority\" URN and then a \"source\" URN,\n   whereas the\
    \ other is reached by processing a \"source\" URN and then a\n   \"priority\"\
    \ URN.\n       State: Priority:High/Source:(External)\n       Signal: high priority\n\
    \       Transitions:\n           any -> Priority:High/Source:(External)\n    \
    \   State: Priority:High/Source:(Internal)\n       Signal: high priority\n   \
    \    Transitions:\n           any -> Priority:High/Source:(Internal)\n   and similarly\
    \ for Priority:Low/Source:\n       State: Priority:Low/Source\n       Signal:\
    \ low priority\n       Transitions:\n           Priority:Other -> Priority:Low/Source\n\
    \           Priority:High -> Priority:Low/Source\n           Priority:Low -> Priority:Low/Source\n\
    \           Source:Other -> Priority:Low/Source:(Other)\n           Source:External\
    \ -> Priority:Low/Source:(External)\n           Source:Internal -> Priority:Low/Source:(Internal)\n\
    \       State: Priority:Low/Source:(Other)\n       Signal: low priority\n    \
    \   Transitions:\n           any -> Priority:Low/Source:(Other)\n       State:\
    \ Priority:Low/Source:(External)\n       Signal: low priority\n       Transitions:\n\
    \           any -> Priority:Low/Source:(External)\n       State: Priority:Low/Source:(Internal)\n\
    \       Signal: low priority\n       Transitions:\n           any -> Priority:Low/Source:(Internal)\n\
    \       State: Priority/Source:(Other)\n       Signal: default\n       Transitions:\n\
    \           Priority:Other -> Priority:(Other)/Source:(Other)\n           Priority:High\
    \ -> Priority:High/Source:(Other)\n           Priority:Low -> Priority:Low/Source:(Other)\n\
    \           Source:Other -> Priority/Source:(Other)\n           Source:External\
    \ -> Priority/Source:(Other)\n           Source:Internal -> Priority/Source:(Other)\n\
    \       State: Priority/Source:External\n       Signal: external source\n    \
    \   Transitions:\n           Priority:Other -> Priority:(Other)/Source:External\n\
    \           Priority:High -> Priority:(High)/Source:External\n           Priority:Low\
    \ -> Priority:(Low)/Source:External\n           Source:Other -> Priority/Source:External\n\
    \           Source:External -> Priority/Source:External\n           Source:Internal\
    \ -> Priority/Source:External\n       State: Priority:(High)/Source:External\n\
    \       Signal: external source\n       Transitions:\n           any -> Priority:(High)/Source:External\n\
    \       State: Priority:(Low)/Source:External\n       Signal: external source\n\
    \       Transitions:\n           any -> Priority:(Low)/Source:External\n     \
    \  State: Priority/Source:Internal\n       Signal: internal source\n       Transitions:\n\
    \           Priority:Other -> Priority:(Other)/Source:Internal\n           Priority:High\
    \ -> Priority:(High)/Source:Internal\n           Priority:Low -> Priority:(Low)/Source:Internal\n\
    \           Source:Other -> Priority/Source:Internal\n           Source:External\
    \ -> Priority/Source:Internal\n           Source:Internal -> Priority/Source:Internal\n\
    \       State: Priority:(High)/Source:Internal\n       Signal: internal source\n\
    \       Transitions:\n           any -> Priority:(High)/Source:Internal\n    \
    \   State: Priority:(Low)/Source:Internal\n       Signal: internal source\n  \
    \     Transitions:\n           any -> Priority:(Low)/Source:Internal\n   As an\
    \ example of processing, if the UA receives\n       Alert-Info: <urn:alert:source:internal>\n\
    \   then processing progresses:\n       State: Priority/Source\n           Process:\
    \ Source:Internal (urn:alert:source:internal)\n       State: Priority/Source:Internal\n\
    \       Signal: internal source\n   A more complicated example involves multiple\
    \ \"source\" URNs that do\n   not select a non-default signal and one \"priority\"\
    \ URN that can be\n   signaled:\n       Alert-Info: <urn:alert:source:unclassified>,\n\
    \           <urn:alert:source:internal>,\n           <urn:alert:priority:high>\n\
    \   in which case processing progresses:\n       State: Priority/Source\n    \
    \       Process: Source:Other (urn:alert:source:unclassified)\n       State: Priority/Source:(Other)\n\
    \           Process: Source:Internal (urn:alert:source:internal)\n       State:\
    \ Priority/Source:(Other)\n           Process: Priority:High (urn:alert:priority:high)\n\
    \       State: Priority:High/Source:(Other)\n       Signal: high priority\n  \
    \ The only output of the FSM is the state's signal.  Based on this,\n   several\
    \ groups of states in this FSM can be merged using standard FSM\n   optimization\
    \ algorithms:\n       states with signal \"high priority\":\n           Priority:High/Source\n\
    \           Priority:High/Source:(Other)\n           Priority:High/Source:(External)\n\
    \           Priority:High/Source:(Internal)\n       states with signal \"low priority\"\
    :\n           Priority:Low/Source\n           Priority:Low/Source:(Other)\n  \
    \         Priority:Low/Source:(External)\n           Priority:Low/Source:(Internal)\n\
    \       states with signal \"external source\":\n           Priority/Source:External\n\
    \           Priority:(High)/Source:External\n           Priority:(Low)/Source:External\n\
    \           Priority:(Other)/Source:External\n       states with signal \"internal\
    \ source\":\n           Priority/Source:Internal\n           Priority:(High)/Source:Internal\n\
    \           Priority:(Low)/Source:Internal\n           Priority:(Other)/Source:Internal\n\
    \   This reduces the FSM to eight states:\n       Priority/Source\n       Priority:(Other)/Source\n\
    \       Priority:(Other)/Source:(Other)\n       Priority:High/Source  [aggregated]\n\
    \       Priority:Low/Source  [aggregated]\n       Priority/Source:(Other)\n  \
    \     Priority/Source:External  [aggregated]\n       Priority/Source:Internal\
    \  [aggregated]\n"
- title: 5.3.  Examples 2, 3, and 4 of RFC 7462
  contents:
  - "5.3.  Examples 2, 3, and 4 of RFC 7462\n   Examples 2, 3, and 4 of [RFC7462]\
    \ are similar to the example in\n   Section 5.1 of this document, but they do\
    \ not include a signal for\n   the combination \"internal source, low priority\"\
    \ to make resolution\n   examples work asymmetrically.\n   The FSM for this example\
    \ has the same alphabet as the FSM of\n   Section 5.1.  Most of the states of\
    \ this FSM are the same as the\n   states of the FSM of Section 5.1, but the state\n\
    \   Source:Internal/Priority:Low is missing because there is no signal\n   for\
    \ that combination.  It is replaced by two states:\n   1.  One state is Source:Internal/Priority:(Low);\
    \ it records that\n       Source:Internal was specified first (and is to be signaled)\
    \ and\n       that Priority:Low was specified later (and cannot be signaled --\n\
    \       but it still prevents any further \"priority\" URNs from having an\n \
    \      effect).\n   2.  The other state is Source:(Internal)/Priority:Low; it\
    \ records the\n       reverse sequence of events.\n   The changes in the FSM are:\n\
    \       State: Priority:Low/Source\n       Signal: low priority\n       Transitions:\n\
    \           Source:Internal -> Priority:Low/Source:(Internal)\n           (other\
    \ transitions unchanged)\n       State: Priority:Low/Source:(Internal)\n     \
    \  Signal: low priority\n       Transitions:\n           any -> Priority:Low/Source:(Internal)\n\
    \       State: Priority/Source:Internal\n       Signal: internal source\n    \
    \   Transitions:\n           Priority:Low -> Priority:(Low)/Source:Internal\n\
    \           (other transitions unchanged)\n       State: Priority:(Low)/Source:Internal\n\
    \       Signal: internal source\n       Transitions:\n           any -> Priority:(Low)/Source:Internal\n\
    \   An example of processing that involves multiple \"source\" URNs and one\n\
    \   \"priority\" URN:\n       Alert-Info: <urn:alert:source:internal>,\n     \
    \      <urn:alert:source:unclassified>,\n           <urn:alert:priority:high>\n\
    \   then processing progresses:\n       State: Priority/Source\n           Process:\
    \ Source:Internal (urn:alert:source:internal)\n       State: Priority/Source:Internal\n\
    \           Process: Source:Other (urn:alert:source:unclassified)\n       State:\
    \ Priority/Source:Internal\n           Process: Priority:High (urn:alert:priority:high)\n\
    \       State: Priority:High/Source:Internal\n       Signal: internal source/high\
    \ priority\n   If the UA receives\n       Alert-Info: <urn:alert:source:internal>\n\
    \   then processing progresses:\n       State: Priority/Source\n           Process:\
    \ Source:Internal (urn:alert:source:internal)\n       State: Priority/Source:Internal\n\
    \       Signal: internal source\n   If the UA receives\n       Alert-Info: <urn:alert:source:external>,\n\
    \           <urn:alert:priority:low>\n   then processing progresses:\n       State:\
    \ Priority/Source\n           Process: Source:External (urn:alert:source:external)\n\
    \       State: Priority/Source:External\n           Process: Priority:Low (urn:alert:priority:low)\n\
    \       State: Priority:Low/Source:External\n       Signal: external source/low\
    \ priority\n   Suppose the same UA receives\n       Alert-Info: <urn:alert:source:internal>,\n\
    \           <urn:alert:priority:low>\n   Note that there is no signal that corresponds\
    \ to this combination.\n   In that case, the processing is:\n       State: Priority/Source\n\
    \           Process: Source:Internal (urn:alert:source:internal)\n       State:\
    \ Priority/Source:Internal\n           Process: Priority:Low (urn:alert:priority:low)\n\
    \       State: Priority:(Low)/Source:Internal\n       Signal: internal source\n\
    \   If the order of the URNs is reversed, what is signaled is the meaning\n  \
    \ of the now-different first URN:\n       Alert-Info: <urn:alert:priority:low>,\n\
    \           <urn:alert:source:internal>\n       State: Priority/Source\n     \
    \      Process: Priority:Low (urn:alert:priority:low)\n       State: Priority:Low/Source\n\
    \           Process: Source:Internal (urn:alert:source:internal)\n       State:\
    \ Priority:Low/Source:(Internal)\n       Signal: low priority\n   Notice that\
    \ the existence of the new states prevents later URNs of a\n   category from overriding\
    \ earlier URNs of that category, even if the\n   earlier one was not itself signalable\
    \ and the later one would be\n   signalable in the absence of the earlier one:\n\
    \       Alert-Info: <urn:alert:priority:low>,\n           <urn:alert:source:internal>,\n\
    \           <urn:alert:source:external>\n       State: Priority/Source\n     \
    \      Process: Priority:Low (urn:alert:priority:low)\n       State: Priority:Low/Source\n\
    \           Process: Source:Internal (urn:alert:source:internal)\n       State:\
    \ Priority:Low/Source:(Internal)\n           Process: Source:External (urn:alert:source:external)\n\
    \       State: Priority:Low/Source:(Internal)\n       Signal: low priority\n \
    \  This situation shows the necessity of states whose labels contain\n   parentheses.\
    \  If the second transition had been to the state\n   Priority:Low/Source (on\
    \ the basis that there is no proper state\n   Priority:Low/Source:Internal), then\
    \ the third transition would have\n   been to the state Priority:Low/Source:External,\
    \ and the signal would\n   have been \"external source/low priority\".\n"
- title: 5.4.  An Example That Subsets Internal Sources
  contents:
  - "5.4.  An Example That Subsets Internal Sources\n   In the example of Section\
    \ 4, there are signals for \"external source\"\n   and \"internal source\".  Let\
    \ us add to that example a signal for\n   \"source internal from a VIP (Very Important\
    \ Person)\".  That last\n   signal expresses the private extension URN\n   urn:alert:source:internal:vip@example,\
    \ which is a subset of\n   urn:alert:source:internal, which is expressed by the\
    \ \"source\n   internal\" signal.  There are a total of three expressed URNs,\
    \ one of\n   which is a subset of another:\n       urn:alert:source:internal\n\
    \       urn:alert:source:internal:vip@example\n       urn:alert:source:external\n\
    \   This generates the following alphabet of symbols, which includes two\n   \"\
    Other\" symbols for the \"source\" category:\n       Source\n       Source:Internal\n\
    \       Source:Internal:Vip@example\n       Source:Internal:Other\n       Source:Other\n"
- title: 5.5.  An Example of "alert:service" URNs
  contents:
  - "5.5.  An Example of \"alert:service\" URNs\n   In this example, there are signals\
    \ for \"service forward\" (the call\n   has been forwarded) and \"source recall\
    \ callback\" (a recall due to a\n   callback).  This gives two expressed URNs:\n\
    \       urn:alert:service:forward\n       urn:alert:service:recall:callback\n\
    \   This generates the following alphabet of symbols.  Note that there\n   are\
    \ two \"Other\" symbols, because the \"alert:service\" URNs have an\n   additional\
    \ level of qualification.\n       Service\n       Service:Forward\n       Service:Recall\n\
    \       Service:Recall:Callback\n       Service:Recall:Other\n       Service:Other\n"
- title: 5.6.  An Example Using Country Codes
  contents:
  - "5.6.  An Example Using Country Codes\n   In this example, we consider how a UA\
    \ generates ringback signals when\n   the UA wishes to reproduce the traditional\
    \ behavior where the caller\n   hears the ringback signals defined by the telephone\
    \ service in the\n   callee's country rather than the ringback signals defined\
    \ by the\n   service in the caller's country.  In the Alert-Info header field\
    \ of\n   the 180 (Ringing) provisional response, we assume that the called UA\n\
    \   provides an \"alert:country\" URN [RFC7462] containing the ISO 3166-1\n  \
    \ [ISO-3166-1] alpha-2 country code of the callee's country.\n   The UA has a\
    \ default signal and a \"non-country\" signal for\n   urn:alert:service:call-waiting.\
    \  For the example country with code\n   \"XA\", the UA has a default signal and\
    \ signals for\n   urn:alert:service:call-waiting and urn:alert:service:forward.\
    \  For\n   the example country with code \"XB\", the UA has a default signal and\
    \ a\n   signal for urn:alert:service:forward.  These inconsistencies between\n\
    \   the non-country signals and the country signals are chosen to\n   demonstrate\
    \ the flexibility of the construction method, showing that\n   three systems of\
    \ signals can be combined correctly even when the\n   systems were established\
    \ without coordination between them.\n   The signals are:\n       Signal     \
    \                   URN(s)\n       --------------------------    ----------------------------------\n\
    \       default                       (none)\n       call-waiting            \
    \      urn:alert:service:call-waiting\n       XA default                    urn:alert:country:xa\n\
    \       XA call-waiting               urn:alert:country:xa,\n                \
    \                         urn:alert:service:call-waiting\n       XA forward  \
    \                  urn:alert:country:xa,\n                                   \
    \      urn:alert:service:forward\n       XB default                    urn:alert:country:xb\n\
    \       XB forward                    urn:alert:country:xb,\n                \
    \                        urn:alert:service:forward\n   The expressed URNs are:\n\
    \       urn:alert:country:xa\n       urn:alert:country:xb\n       urn:alert:service:call-waiting\n\
    \       urn:alert:service:forward\n   The relevant categories of \"alert\" URNs\
    \ are only:\n       country\n       service\n   The alphabet of symbols is:\n\
    \       Country\n       Country:[other]\n       Country:Xa\n       Country:Xb\n\
    \       Service\n       Service:[other]\n       Service:Call-waiting\n       Service:Forward\n\
    \   The 17 states are as follows:\n       State: 0 Country/Service\n       Signal:\
    \ default\n       Transitions:\n           Country:[other] -> 1 Country:([other])/Service\n\
    \           Country:Xa -> 5 Country:Xa/Service\n           Country:Xb -> 9 Country:Xb/Service\n\
    \           Service:[other] -> 13 Country/Service:([other])\n           Service:Call-waiting\
    \ -> 14 Country/Service:Call-waiting\n           Service:Forward -> 16 Country/Service:(Forward)\n\
    \    State: 1 Country:([other])/Service\n    Signal: default\n    Transitions:\n\
    \        Country:[other] -> 1 Country:([other])/Service\n        Country:Xa ->\
    \ 1 Country:([other])/Service\n        Country:Xb -> 1 Country:([other])/Service\n\
    \        Service:[other] -> 2 Country:([other])/Service:([other])\n        Service:Call-waiting\
    \ -> 3 Country:([other])/Service:Call-waiting\n        Service:Forward -> 4 Country:([other])/Service:(Forward)\n\
    \       State: 2 Country:([other])/Service:([other])\n       Signal: default\n\
    \       Transitions:\n           any -> 2 Country:([other])/Service:([other])\n\
    \       State: 3 Country:([other])/Service:Call-waiting\n       Signal: call-waiting\n\
    \       Transitions:\n           any -> 3 Country:([other])/Service:Call-waiting\n\
    \       State: 4 Country:([other])/Service:(Forward)\n       Signal: default\n\
    \       Transitions:\n           any -> 4 Country:([other])/Service:(Forward)\n\
    \       State: 5 Country:Xa/Service\n       Signal: XA default\n       Transitions:\n\
    \           Country:[other] -> 5 Country:Xa/Service\n           Country:Xa ->\
    \ 5 Country:Xa/Service\n           Country:Xb -> 5 Country:Xa/Service\n      \
    \     Service:[other] -> 6 Country:Xa/Service:([other])\n           Service:Call-waiting\
    \ -> 7 Country:Xa/Service:Call-waiting\n           Service:Forward -> 8 Country:Xa/Service:Forward\n\
    \       State: 6 Country:Xa/Service:([other])\n       Signal: XA default\n   \
    \    Transitions:\n           any -> 6 Country:Xa/Service:([other])\n       State:\
    \ 7 Country:Xa/Service:Call-waiting\n       Signal: XA call-waiting\n       Transitions:\n\
    \           any -> 7 Country:Xa/Service:Call-waiting\n       State: 8 Country:Xa/Service:Forward\n\
    \       Signal: XA forward\n       Transitions:\n           any -> 8 Country:Xa/Service:Forward\n\
    \       State: 9 Country:Xb/Service\n       Signal: XB default\n       Transitions:\n\
    \           Country:[other] -> 9 Country:Xb/Service\n           Country:Xa ->\
    \ 9 Country:Xb/Service\n           Country:Xb -> 9 Country:Xb/Service\n      \
    \     Service:[other] -> 10 Country:Xb/Service:([other])\n           Service:Call-waiting\
    \ -> 11 Country:Xb/Service:(Call-waiting)\n           Service:Forward -> 12 Country:Xb/Service:Forward\n\
    \       State: 10 Country:Xb/Service:([other])\n       Signal: XB default\n  \
    \     Transitions:\n           any -> 10 Country:Xb/Service:([other])\n      \
    \ State: 11 Country:Xb/Service:(Call-waiting)\n       Signal: XB default\n   \
    \    Transitions:\n           any -> 11 Country:Xb/Service:(Call-waiting)\n  \
    \     State: 12 Country:Xb/Service:Forward\n       Signal: XB forward\n      \
    \ Transitions:\n           any -> 12 Country:Xb/Service:Forward\n       State:\
    \ 13 Country/Service:([other])\n       Signal: default\n       Transitions:\n\
    \           Country:[other] -> 2 Country:([other])/Service:([other])\n       \
    \    Country:Xa -> 6 Country:Xa/Service:([other])\n           Country:Xb -> 10\
    \ Country:Xb/Service:([other])\n           Service:[other] -> 13 Country/Service:([other])\n\
    \           Service:Call-waiting -> 13 Country/Service:([other])\n           Service:Forward\
    \ -> 13 Country/Service:([other])\n       State: 14 Country/Service:Call-waiting\n\
    \       Signal: call-waiting\n       Transitions:\n           Country:[other]\
    \ -> 3 Country:([other])/Service:Call-waiting\n           Country:Xa -> 7 Country:Xa/Service:Call-waiting\n\
    \           Country:Xb -> 15 Country:(Xb)/Service:Call-waiting\n           Service:[other]\
    \ -> 14 Country/Service:Call-waiting\n           Service:Call-waiting -> 14 Country/Service:Call-waiting\n\
    \           Service:Forward -> 14 Country/Service:Call-waiting\n       State:\
    \ 15 Country:(Xb)/Service:Call-waiting\n       Signal: call-waiting\n       Transitions:\n\
    \           any -> 15 Country:(Xb)/Service:Call-waiting\n       State: 16 Country/Service:(Forward)\n\
    \       Signal: default\n       Transitions:\n           Country:[other] -> 4\
    \ Country:([other])/Service:(Forward)\n           Country:Xa -> 8 Country:Xa/Service:Forward\n\
    \           Country:Xb -> 12 Country:Xb/Service:Forward\n           Service:[other]\
    \ -> 16 Country/Service:(Forward)\n           Service:Call-waiting -> 16 Country/Service:(Forward)\n\
    \           Service:Forward -> 16 Country/Service:(Forward)\n   Call-waiting can\
    \ be signaled in conjunction with country XA but not\n   in conjunction with country\
    \ XB, as the UA does not have a signal to\n   present call-waiting alerts for\
    \ country XB.  Thus, the ordering of\n   urn:alert:service:call-waiting with urn:alert:country:xa\
    \ does not\n   matter, but if urn:alert:country:xb appears before\n   urn:alert:service:call-waiting,\
    \ call-waiting cannot be signaled.\n   On the other hand, if urn:alert:service:call-waiting\
    \ appears before\n   urn:alert:country:xb, then call-waiting is signaled, but\
    \ using the\n   non-country signal.\n      Alert-Info: urn:alert:country:xa,\n\
    \              urn:alert:service:call-waiting\n      State: 0 Country/Service\n\
    \          Process: Country:Xa (urn:alert:country:xa)\n      State: 5 Country:Xa/Service\n\
    \          Process: Service:Call-waiting (urn:alert:service:call-waiting)\n  \
    \    State: 7 Country:Xa/Service:Call-waiting\n      Signal: XA call-waiting\n\
    \      Alert-Info: urn:alert:service:call-waiting,\n              urn:alert:country:xa\n\
    \      State: 0 Country/Service\n          Process: Service:Call-waiting (urn:alert:service:call-waiting)\n\
    \      State: 14 Country/Service:Call-waiting\n          Process: Country:Xa (urn:alert:country:xa)\n\
    \      State: 7 Country:Xa/Service:Call-waiting\n      Signal: XA call-waiting\n\
    \      Alert-Info: urn:alert:country:xb,\n              urn:alert:service:call-waiting\n\
    \      State: 0 Country/Service\n          Process: Country:Xb (urn:alert:country:xb)\n\
    \      State: 9 Country:Xb/Service\n          Process: Service:Call-waiting (urn:alert:service:call-waiting)\n\
    \      State: 11 Country:Xb/Service:(Call-waiting)\n      Signal: XB default\n\
    \      Alert-Info: urn:alert:service:call-waiting,\n              urn:alert:country:xb\n\
    \      State: 0 Country/Service\n          Process: Service:Call-waiting (urn:alert:service:call-waiting)\n\
    \      State: 14 Country/Service:Call-waiting\n          Process: Country:Xb (urn:alert:country:xb)\n\
    \      State: 15 Country:(Xb)/Service:Call-waiting\n      Signal: call-waiting\n"
- title: 6.  Prioritizing Signals
  contents:
  - "6.  Prioritizing Signals\n   The specifications provided in [RFC7462] are oriented\
    \ toward giving\n   the sender of Alert-Info control over which of the \"alert\"\
    \ URNs are\n   most important.  But in some situations, the UA may prefer to\n\
    \   prioritize expressing one URN category over another regardless of the\n  \
    \ order in which their URNs appear in Alert-Info.  This section\n   describes\
    \ how that can be accommodated within the framework of\n   [RFC7462] and presents\
    \ an example FSM resulting from that approach.\n   This example uses the signals\
    \ of Section 5.2, viz., \"external\n   source\", \"internal source\", \"low priority\"\
    , and \"high priority\", but\n   this time, we want to signal \"high priority\"\
    \ in preference to any\n   other signal that might be applicable.\n   We accommodate\
    \ this within the framework of [RFC7462] by assigning\n   the signal \"high priority\"\
    \ for each of these combinations of URNs:\n       urn:alert:priority:high\n  \
    \     urn:alert:priority:high, urn:alert:source:internal\n       urn:alert:priority:high,\
    \ urn:alert:source:external\n   The result is that the signal \"high priority\"\
    \ is the \"best\" signal\n   for any combination of urn:alert:priority:high with\
    \ \"source\" URNs.\n   Constructing the symbols produces the same results as before.\
    \  The\n   signals can express the following URNs:\n       urn:alert:source:external\n\
    \       urn:alert:source:internal\n       urn:alert:priority:low\n       urn:alert:priority:high\n\
    \   The relevant categories of \"alert\" URNs are:\n       source\n       priority\n\
    \   The alphabet of symbols is:\n       Source\n       Source:External\n     \
    \  Source:Internal\n       Source:Other\n       Priority\n       Priority:Low\n\
    \       Priority:High\n       Priority:Other\n   When the FSM is constructed,\
    \ it is the same as the FSM of\n   Section 5.2, except that certain states are\
    \ effectively renamed and\n   merged, because any \"source\" is defined to be\
    \ expressed if high\n   priority is expressed:\n       Priority:(High)/Source:External\
    \ and\n       Priority:High/Source:(External) become:\n           State: Priority:High/Source:External\n\
    \           Signal: high priority\n       Priority:(High)/Source:Internal and\n\
    \       Priority:High/Source:(Internal) become:\n           State: Priority:High/Source:Internal\n\
    \           Signal: high priority\n   This reduces the FSM to 18 states.  In addition,\
    \ these two new\n   states, along with a number of other states, can be merged\
    \ by FSM\n   optimization, since all of them have the signal \"high priority\"\
    \ and\n   from them, there are no transitions to states outside this set.  The\n\
    \   optimized FSM has 10 states.\n"
- title: 7.  Dynamic Sets of Signals
  contents:
  - "7.  Dynamic Sets of Signals\n   This section discusses how to construct FSMs\
    \ for a UA that allows\n   variable sets of signals -- for example, if the user\
    \ can configure\n   the use of ring tones.  Several approaches can be used:\n\
    \   o  Whenever the set of ring tones is changed, re-execute the\n      processes\
    \ of Section 4.\n   o  Whenever the set of ring tones is changed, rebuild the\
    \ list of\n      expressed URNs (Section 4.1) and reconstruct the alphabet of\n\
    \      symbols (Section 4.2).  Then, use an algorithm for dynamically\n      constructing\
    \ the states of the FSM as needed during Alert-Info\n      processing.\n   o \
    \ If the sets of possible URNs expressed by the ring tones are\n      sufficiently\
    \ limited, the steps of Section 4 can be carried out\n      \"generically\", and\
    \ the generic FSM can be specialized for the\n      current ring tone configuration.\n\
    \   The remainder of this section gives an example of the third approach.\n  \
    \ For the example, we will use a set of ring tones that express the\n   identity\
    \ of the caller.  To signal this information, a private\n   extension \"alert\"\
    \ URN category, \"caller@example\", is used:\n       urn:alert:caller@example:alice@example.com\n\
    \       urn:alert:caller@example:bob@example.com\n       etc.\n   which we can\
    \ express by the generic pattern\n       urn:alert:caller@example:IDENTITY\n \
    \  where \"IDENTITY\" is replaced in succession by the set of caller\n   identities\
    \ that have their own ring tones to generate the set of\n   expressed URNs.\n\
    \   The alphabet is then:\n       Caller@example\n       Caller@example:IDENTITY\n\
    \       Caller@example:Other\n   where \"IDENTITY\" is replaced in succession\
    \ by the set of caller\n   identities.  The \"Caller@example:Other\" symbol includes\
    \ all URNs of\n   the category \"caller@example\" that are not included in any\
    \ of the\n   \"Caller@example:IDENTITY\" symbols, i.e, where the second\n   alert-ind-part\
    \ is not one of the known caller identities.\n   The states and transitions of\
    \ the FSM are:\n       State: Caller@example (initial state)\n       Signal: default\n\
    \       Transitions:\n           Caller@example:IDENTITY -> Caller@example:IDENTITY\n\
    \           Caller@example:Other -> Caller@example:(Other)\n       State: Caller@example:IDENTITY\n\
    \       Signal: signal for caller IDENTITY\n       Transitions:\n           any\
    \ -> Caller@example:IDENTITY\n       State: Caller@example:(Other)\n       Signal:\
    \ default\n       Transitions:\n           any -> Caller@example:(Other)\n   where\
    \ again, the second state is replicated once for each caller\n   identity that\
    \ has a ring tone, with \"IDENTITY\" replaced with the\n   caller identity.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The security considerations discussed in Section\
    \ 16 of [RFC7462]\n   regarding the use and processing of \"alert\" URNs MUST\
    \ be followed\n   when the algorithm described in this document is used.\n   Like\
    \ any implementation of [RFC7462], implementations of the\n   algorithm defined\
    \ in this document MUST take into account that the\n   value of a received Alert-Info\
    \ header field may contain URIs of any\n   scheme, may contain syntactically invalid\
    \ values, and may be\n   syntactically invalid overall.  The handling of syntactically\
    \ invalid\n   values is specified by [RFC3261].  The handling of URIs other than\n\
    \   \"alert\" URIs is outside the scope of this document (and outside the\n  \
    \ scope of [RFC7462]) and MAY be subject to local policy.\n   Like the algorithm\
    \ described in Section 12 of [RFC7462], the output\n   of the algorithm defined\
    \ in this document is limited to a choice\n   among the signals that it has been\
    \ configured for, limiting the\n   security issues regarding the processing of\
    \ its output.  This\n   algorithm will use at most linear time and constant space\
    \ to process\n   a sequence of \"alert\" URNs.  This is significantly more efficient\n\
    \   than the algorithm of [RFC7462] and minimizes the security\n   vulnerabilities\
    \ of this processing step that are due to resource\n   consumption.\n   However,\
    \ the process defined in this document for constructing an FSM\n   can use more\
    \ than linear time and constant space -- probably\n   exponential time and space\
    \ in the worst case.  This SHOULD be taken\n   into consideration whenever an\
    \ FSM is constructed using this\n   algorithm and MUST be taken into consideration\
    \ when it is done\n   dynamically by a UA.  Whenever an FSM is constructed by\
    \ a process\n   that is not under the direct supervision of a human user, procedures\n\
    \   MUST be used to ensure that (1) the processing and memory consumption\n  \
    \ are limited to acceptable amounts and (2) if the FSM construction is\n   aborted\
    \ due to excessive consumption, the designated consumers of the\n   FSM MUST have\
    \ appropriate fallback procedures.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [ISO-3166-1]\n              International Organization\
    \ for Standardization, \"Codes for\n              the representation of names\
    \ of countries and their\n              subdivisions -- Part 1: Country codes\"\
    , ISO\n              Standard 3166-1:2013, November 2013,\n              <https://www.iso.org/iso-3166-country-codes.html>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3261]\
    \  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n              A.,\
    \ Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler, \"SIP:\
    \ Session Initiation Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261,\
    \ June 2002,\n              <https://www.rfc-editor.org/info/rfc3261>.\n   [RFC7462]\
    \  Liess, L., Ed., Jesske, R., Johnston, A., Worley, D., and\n              P.\
    \ Kyzivat, \"URNs for the Alert-Info Header Field of the\n              Session\
    \ Initiation Protocol (SIP)\", RFC 7462,\n              DOI 10.17487/RFC7462,\
    \ March 2015,\n              <https://www.rfc-editor.org/info/rfc7462>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n              RFC 2119\
    \ Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174, May 2017,\n\
    \              <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [code]     Worley, D., \"draft-worley-alert-info-fsm.aux\"\
    ,\n              February 2017, <http://svn.resiprocate.org/rep/\n           \
    \   ietf-drafts/worley/draft-worley-alert-info-fsm.aux>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Thanks to Paul Kyzivat, whose relentless identification of\
    \ the\n   weaknesses of earlier versions made the final document much, much\n\
    \   better than it would have been, by changing it from the exposition of\n  \
    \ a concept into a practical tool.  Thanks to Rifaat Shekh-Yusef, Eric\n   Burger,\
    \ and Gonzalo Camarillo for their thorough reviews.  Thanks to\n   the earlier\
    \ Independent Submissions Editor, Nevil Brownlee, for his\n   work obtaining reviewers,\
    \ and the later Independent Submissions\n   Editor, Adrian Farrel, for prompting\
    \ me to write the Security\n   Considerations section (which I had expected to\
    \ be trivial but\n   was not).\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Dale R. Worley\n   Ariadne Internet Services\n   738 Main\
    \ St.\n   Waltham, MA  02451\n   United States of America\n   Email: worley@ariadne.com\n"
