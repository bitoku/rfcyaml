- title: __initial_text__
  contents:
  - "              Example Call Flows of Race Conditions in the\n                \
    \   Session Initiation Protocol (SIP)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2008 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ (http://trustee.ietf.org/\n   license-info) in effect on the date of publication\
    \ of this document.\n   Please review these documents carefully, as they describe\
    \ your rights\n   and restrictions with respect to this document.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document gives example call flows of race conditions in the\n\
    \   Session Initiation Protocol (SIP).  Race conditions are inherently\n   confusing\
    \ and difficult to thwart; this document shows the best\n   practices to handle\
    \ them.  The elements in these call flows include\n   SIP User Agents and SIP\
    \ Proxy Servers.  Call flow diagrams and\n   message details are given.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Overview . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  General Assumptions  . . . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2.  Legend for Message Flows . . . . . . . . . . . . .\
    \ . . . .  3\n     1.3.  SIP Protocol Assumptions . . . . . . . . . . . . . .\
    \ . . .  4\n   2.  The Dialog State Machine for INVITE Dialog Usage . . . . .\
    \ . .  5\n   3.  Race Conditions  . . . . . . . . . . . . . . . . . . . . . .\
    \ . 10\n     3.1.  Receiving Message in the Moratorium State  . . . . . . . .\
    \ 11\n       3.1.1.  Callee Receives Initial INVITE Retransmission\n         \
    \      (Preparative State) While in the Moratorium State  . . 11\n       3.1.2.\
    \  Callee Receives CANCEL (Early State) While in the\n               Moratorium\
    \ State . . . . . . . . . . . . . . . . . . . 13\n       3.1.3.  Callee Receives\
    \ BYE (Early State) While in the\n               Moratorium State . . . . . .\
    \ . . . . . . . . . . . . . 15\n       3.1.4.  Callee Receives re-INVITE (Established\
    \ State)\n               While in the Moratorium State (Case 1) . . . . . . .\
    \ . 17\n       3.1.5.  Callee Receives re-INVITE (Established State)\n       \
    \        While in the Moratorium State (Case 2) . . . . . . . . 22\n       3.1.6.\
    \  Callee Receives BYE (Established State) While in\n               the Moratorium\
    \ State . . . . . . . . . . . . . . . . . 26\n     3.2.  Receiving Message in\
    \ the Mortal State  . . . . . . . . . . 28\n       3.2.1.  UA Receives BYE (Established\
    \ State) While in the\n               Mortal State . . . . . . . . . . . . . .\
    \ . . . . . . . 28\n       3.2.2.  UA Receives re-INVITE (Established State) While\
    \ in\n               the Mortal State . . . . . . . . . . . . . . . . . . . 30\n\
    \       3.2.3.  UA Receives 200 OK for re-INVITE (Established\n              \
    \ State) While in the Mortal State . . . . . . . . . . . 32\n       3.2.4.  Callee\
    \ Receives ACK (Moratorium State) While in\n               the Mortal State .\
    \ . . . . . . . . . . . . . . . . . . 35\n     3.3.  Other Race Conditions  .\
    \ . . . . . . . . . . . . . . . . . 36\n       3.3.1.  Re-INVITE Crossover  .\
    \ . . . . . . . . . . . . . . . . 36\n       3.3.2.  UPDATE and re-INVITE Crossover\
    \ . . . . . . . . . . . . 40\n       3.3.3.  Receiving REFER (Established State)\
    \ While in the\n               Mortal State . . . . . . . . . . . . . . . . .\
    \ . . . . 45\n   4.  Security Considerations  . . . . . . . . . . . . . . . .\
    \ . . . 46\n   5.  Acknowledgements . . . . . . . . . . . . . . . . . . . . .\
    \ . . 46\n   6.  References . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . 47\n     6.1.  Normative References . . . . . . . . . . . . . . . . . . .\
    \ 47\n     6.2.  Informative References . . . . . . . . . . . . . . . . . . 47\n\
    \   Appendix A.  BYE in the Early Dialog . . . . . . . . . . . . . . . 48\n  \
    \ Appendix B.  BYE Request Overlapping with re-INVITE  . . . . . . . 49\n   Appendix\
    \ C.  UA's Behavior for CANCEL  . . . . . . . . . . . . . . 52\n   Appendix D.\
    \  Notes on the Request in the Mortal State  . . . . . . 54\n   Appendix E.  Forking\
    \ and Receiving New To Tags . . . . . . . . . . 54\n"
- title: 1.  Overview
  contents:
  - "1.  Overview\n   The call flows shown in this document were developed in the\
    \ design of\n   a SIP IP communications network.  These examples are of race\n\
    \   conditions, which stem from transitions in dialog states -- mainly\n   transitions\
    \ during session establishment after the sending of an\n   INVITE.\n   When implementing\
    \ SIP, various complex situations may arise.\n   Therefore, it is helpful to provide\
    \ implementors of the protocol with\n   examples of recommended terminal and server\
    \ behavior.\n   This document clarifies SIP User Agent (UA) behaviors when messages\n\
    \   cross each other as race conditions.  By clarifying the operation\n   under\
    \ race conditions, inconsistent interpretations between\n   implementations are\
    \ avoided and interoperability is expected to be\n   promoted.\n   It is the hope\
    \ of the authors that this document will be useful for\n   SIP implementors, designers,\
    \ and protocol researchers and will help\n   them achieve the goal of a standard\
    \ implementation of RFC 3261 [1].\n   These call flows are based on version 2.0\
    \ of SIP, defined in RFC 3261\n   [1], with SDP usage as described in RFC 3264\
    \ [2].\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL\
    \ NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"\
    \ in this\n   document are to be interpreted as described in BCP 14, RFC 2119\
    \ [3].\n"
- title: 1.1.  General Assumptions
  contents:
  - "1.1.  General Assumptions\n   A number of architectural, network, and protocol\
    \ assumptions underlie\n   the call flows in this document.  Note that these assumptions\
    \ are not\n   requirements.  They are outlined in this section so that they may\
    \ be\n   taken into consideration and help understanding of the call flow\n  \
    \ examples.\n   These flows do not assume specific underlying transport protocols\n\
    \   such as TCP, TLS, and UDP.  See the discussion in RFC 3261 [1] for\n   details\
    \ of the transport issues for SIP.\n"
- title: 1.2.  Legend for Message Flows
  contents:
  - "1.2.  Legend for Message Flows\n   Dashed lines (---) and slash lines (/, \\\
    ) represent signaling\n   messages that are mandatory to the call scenario.  (X)\
    \ represents the\n   crossover of signaling messages. (->x, x<-) indicate that\
    \ the packet\n   is lost.  The arrow indicates the direction of message flow.\
    \  Double\n   dashed lines (===) represent media paths between network elements.\n\
    \   Messages are identified in the figures as F1, F2, etc.  These numbers\n  \
    \ are used for references to the message details that follow the\n   figure. \
    \ Comments in the message details are shown in the following\n   form:\n   /*\
    \ Comments.  */\n"
- title: 1.3.  SIP Protocol Assumptions
  contents:
  - "1.3.  SIP Protocol Assumptions\n   This document does not prescribe the flows\
    \ precisely as they are\n   shown, but rather illustrates the principles for best\
    \ practice.  They\n   are best practice usages (orderings, syntax, selection of\
    \ features\n   for the purpose, or handling of errors) of SIP methods, headers,\
    \ and\n   parameters.  Note: The flows in this document must not be copied\n \
    \  as-is by implementors because additional annotations have been\n   incorporated\
    \ into this document for ease of explanation.  To sum up,\n   the procedures described\
    \ in this document represent well-reviewed\n   examples of SIP usage, which exemplify\
    \ best common practice according\n   to IETF consensus.\n   For reasons of simplicity\
    \ in reading and editing the document, there\n   are a number of differences between\
    \ some of the examples and actual\n   SIP messages.  For instance, Call-IDs are\
    \ often replicated, CSeq\n   often begins at 1, header fields are usually shown\
    \ in the same order,\n   usually only the minimum required header field set is\
    \ shown, and\n   other headers that would usually be included, such as Accept,\
    \ Allow,\n   etc., are not shown.\n   Actors:\n   Element     Display Name  URI\
    \                            IP Address\n   -------     ------------  ---    \
    \                        ----------\n   User Agent  Alice         sip:alice@atlanta.example.com\
    \  192.0.2.101\n   User Agent  Bob           sip:bob@biloxi.example.com     192.0.2.201\n\
    \   User Agent  Carol         sip:carol@chicago.example.com  192.0.2.202\n   Proxy\
    \ Server              ss.atlanta.example.com         192.0.2.111\n   The term\
    \ \"session\" is used in this document in the same way it is\n   used in Sections\
    \ 13-15 of RFC 3261 [1] (which differs somewhat from\n   the definition of the\
    \ term in RFC 3261).  RFC 5057 [6] introduces\n   another term, \"invite dialog\
    \ usage\", which is more precisely defined.\n   The term \"session\" used herein\
    \ is almost, but not quite, identical to\n   the term \"invite dialog usage\"\
    .  The two have differing definitions\n   of when the state ends -- the session\
    \ ends earlier, when BYE is sent\n   or received.\n"
- title: 2.  The Dialog State Machine for INVITE Dialog Usage
  contents:
  - "2.  The Dialog State Machine for INVITE Dialog Usage\n   Race conditions are\
    \ generated when the dialog state of the receiving\n   side differs from that\
    \ of the sending side.\n   For instance, a race condition occurs when a UAC (User\
    \ Agent Client)\n   sends a CANCEL in the Early state while the UAS (User Agent\
    \ Server)\n   is transitioning from the Early state to the Confirmed state by\n\
    \   sending a 200 OK to an initial INVITE (indicated as \"ini-INVITE\"\n   hereafter).\
    \  The DSM (dialog state machine) for the INVITE dialog\n   usage is presented\
    \ as follows to help understanding of the UA's\n   behavior in race conditions.\n\
    \   The DSM clarifies the UA's behavior by subdividing the dialog state\n   shown\
    \ in RFC 3261 [1] into various internal states.  We call the\n   state before\
    \ the establishment of a dialog the Preparative state.\n   The Confirmed state\
    \ is subdivided into two substates, the Moratorium\n   and the Established states,\
    \ and the Terminated state is subdivided\n   into the Mortal and Morgue states.\
    \  Messages that are the triggers\n   for the state transitions between these\
    \ states are indicated with\n   arrows.  In this figure, messages that are not\
    \ related to state\n   transition are omitted.\n   Below are the DSMs, first for\
    \ the caller and then for the callee.\n    INV +-----------------------------------------------+\n\
    \    --->|                 Preparative                   |\n        +-----------------------------------------------+\n\
    \          |                    |                      |\n          | 3xx-6xx\
    \            | 1xx-tag              | 2xx\n          |                    |  \
    \                    |\n          |                    |        1xx-tag      \
    \ |\n          |                    V        w/new tag     |\n          |    \
    \     +-----------------+  [new DSM]    |\n          | 3xx-6xx |             \
    \    |   | (new DSM  |\n          +<--------|      Early      |   |  instance\
    \ |\n          |         |                 |<--+  created) |\n          |    \
    \     +-----------------+               |\n          |            |          \
    \   |                |  2xx w/new tag\n          |            | BYE         |\
    \ 2xx            |   [new DSM]\n          |            |             +------------>+<-+\
    \      | (new DSM\n          |            |                           |      \
    \   |  instance\n    +-----C------------C-----+         +-----------C------+ \
    \ |  created)\n    |     | Terminated |     |         | Confirmed |      |  |\n\
    \    |     |            +<----C---------|           |      |  |\n    |     | \
    \           |     | BYE(sr) |           |      |  |\n    |     |            V\
    \     |         |           V      |  |\n    | 2xx |  +-----------+   |      \
    \   |   +-----------+  |  |\n    | +---C--|           |---C-+       |   |    \
    \       |  |  |\n    | |   |  |   Mortal  |   | | BYE(r)|   | Moratorium|<-C--+\n\
    \    | +---C->|           |<--C-+       |   |           |  |\n    | ACK |  +-----------+\
    \   |         |   +-----------+  |\n    |     |    |             |         | \
    \        |        |\n    |     |    | Timeout     |         |         | ACK  \
    \  |\n    |     |    |             |         |         |        |\n    |     V\
    \    V             |         |         V        |\n    |   +---------------+ \
    \   |         |   +-----------+  |\n    |   |               |    |         | \
    \  |           |--C-+\n    |   |     Morgue    |    |         |   |Established|\
    \  | | 2xx,ACK\n    |   |               |    |         |   |           |<-C-+\n\
    \    |   +---------------+    |         |   +-----------+  |\n    |          \
    \              |         |                  |\n    +------------------------+\
    \         +------------------+\n    (r): indicates that only reception is allowed.\n\
    \         Where (r) is not used as an indicator, \"response\" means\n        \
    \ receive, and \"request\" means send.\n    (sr): indicates that both sending\
    \ and reception are allowed.\n              Figure 1: DSM for INVITE dialog usage\
    \ (caller)\n   Figure 1 represents the caller's DSM for the INVITE dialog usage.\n\
    \   The caller MAY send a BYE in the Early state, even though this\n   behavior\
    \ is not recommended.  A BYE sent in the Early state\n   terminates the early\
    \ dialog using a specific To tag.  That is, when a\n   proxy is performing forking,\
    \ the BYE is only able to terminate the\n   early dialog with a particular UA.\
    \  If the caller wants to terminate\n   all early dialogs instead of that with\
    \ a particular UA, it needs to\n   send CANCEL, not BYE.  However, it is not illegal\
    \ to send BYE in the\n   Early state to terminate a specific early dialog if this\
    \ is the\n   caller's intent.  Moreover, until the caller receives a final\n \
    \  response and terminates the INVITE transaction, the caller MUST be\n   prepared\
    \ to establish a dialog by receiving a new response to the\n   INVITE even if\
    \ it has already sent a CANCEL or BYE and terminated the\n   dialog (see Appendix\
    \ A).\n    INV +-----------------------------------------------+\n    --->|  \
    \               Preparative                   |\n        +-----------------------------------------------+\n\
    \          |                         |                 |\n          | 3xx-6xx\
    \                 | 1xx-tag         | 2xx\n          |                       \
    \  |                 |\n          |                         V                \
    \ |\n          |         +------------------+              |\n          | 3xx-6xx\
    \ |                  |              |\n          +<--------|      Early      \
    \ |              |\n          |         |                  |              |\n\
    \          |         +------------------+              |\n          |        \
    \    |             |                |\n          |            |BYE/487(INV) |\
    \ 2xx            |\n          |            |             +------------>+<-+\n\
    \          |            |                           |\n    +-----C------------C-----+\
    \         +-----------C------+\n    |     | Terminated |     |         | Confirmed\
    \ |      |\n    |     |            +<----C---------|           |      |\n    |\
    \     |            |     | BYE(sr) |           |      |\n    |     |         \
    \   V     |         |           V      |\n    |     | +------------+   |     \
    \    |   +-----------+  |\n    |     | |            |---C-+       |   |      \
    \     |--C-+\n    |     | |   Mortal   |   | | BYE   |   | Moratorium|  | | 2xx\n\
    \    |     | |            |<--C-+       |   |           |<-C-+ if ACK not\n  \
    \  |     | +------------+   |         |   +-----------+  |   received\n    | \
    \    |   |              |         |         |        |\n    |     |   | Timeout\
    \      |         |         | ACK    |\n    |     |   |              |        \
    \ |         |        |\n    |     V   V              |         |         V   \
    \     |\n    |   +---------------+    |         |   +-----------+  |\n    |  \
    \ |               |    |         |   |           |  |\n    |   |     Morgue  \
    \  |    |         |   |Established|  |\n    |   |               |    |       \
    \  |   |           |  |\n    |   +---------------+    |         |   +-----------+\
    \  |\n    |                        |         |                  |\n    +------------------------+\
    \         +------------------+\n     (sr): indicates that both sending and reception\
    \ are allowed.\n          Where (sr) is not used as an indicator, \"response\"\
    \ means send,\n          and \"request\" means receive.\n              Figure\
    \ 2: DSM for INVITE dialog usage (callee)\n   Figure 2 represents the callee's\
    \ DSM for the INVITE dialog usage.\n   The figure does not illustrate the state\
    \ transition related to CANCEL\n   requests.  A CANCEL request does not cause\
    \ a dialog state transition.\n   However, the callee terminates the dialog and\
    \ triggers the dialog\n   transition by sending a 487 immediately after the reception\
    \ of the\n   CANCEL.  This behavior upon the reception of the CANCEL request is\n\
    \   further explained in Appendix C.\n   The UA's behavior in each state is as\
    \ follows.\n   Preparative (Pre):  The Preparative state is in effect until the\n\
    \      early dialog is established by sending or receiving a provisional\n   \
    \   response with a To tag after an ini-INVITE is sent or received.\n      The\
    \ dialog does not yet exist in the Preparative state.  If the UA\n      sends\
    \ or receives a 2xx response, the dialog state transitions\n      from the Preparative\
    \ state to the Moratorium state, which is a\n      substate of the Confirmed state.\
    \  In addition, if the UA sends or\n      receives a 3xx-6xx response, the dialog\
    \ state transitions to the\n      Morgue state, which is a substate of the Terminated\
    \ state.\n      Sending an ACK for a 3xx-6xx response and retransmissions of 3xx-\n\
    \      6xx are not shown on the DSMs because they are sent by the INVITE\n   \
    \   transaction.\n   Early (Ear):  The early dialog is established by sending\
    \ or receiving\n      a provisional response except 100 Trying.  The early dialog\
    \ exists\n      even though the dialog does not exist in this state yet.  The\n\
    \      dialog state transitions from the Early state to the Moratorium\n     \
    \ state, a substate of the Confirmed state, by sending or receiving\n      a 2xx\
    \ response.  In addition, the dialog state transitions to the\n      Morgue state,\
    \ a substate of the Terminated state, by sending or\n      receiving a 3xx-6xx\
    \ response.  Sending an ACK for a 3xx-6xx\n      response and retransmissions\
    \ of 3xx-6xx are not shown on this DSM\n      because they are automatically processed\
    \ on the transaction layer\n      and don't influence the dialog state.  The UAC\
    \ may send a CANCEL\n      in the Early state.  The UAC may also send a BYE (although\
    \ it is\n      not recommended).  The UAS may send a 1xx-6xx response.  The\n\
    \      sending or receiving of a CANCEL request does not have a direct\n     \
    \ influence on the dialog state.  The UA's behavior upon the\n      reception\
    \ of the CANCEL request is explained further in Appendix\n      C.\n   Confirmed\
    \ (Con):  The sending or receiving of a 2xx final response\n      establishes\
    \ a dialog.  The dialog starts in this state.  The\n      Confirmed state transitions\
    \ to the Mortal state, a substate of the\n      Terminated state, by sending or\
    \ receiving a BYE request.  The\n      Confirmed state has two substates, the\
    \ Moratorium and the\n      Established states, which are different with regard\
    \ to the\n      messages that UAs are allowed to send.\n   Moratorium (Mora):\
    \  The Moratorium state is a substate of the\n      Confirmed state and inherits\
    \ its behavior.  The Moratorium state\n      transitions to the Established state\
    \ by sending or receiving an\n      ACK request.  The UAC may send an ACK and\
    \ the UAS may send a 2xx\n      final response.\n   Established (Est):  The Established\
    \ state is a substate of the\n      Confirmed state and inherits its behavior.\
    \  Both caller and callee\n      may send various messages that influence a dialog.\
    \  The caller\n      supports the transmission of ACK to the retransmission of\
    \ a 2xx\n      response to an ini-INVITE.\n   Terminated (Ter):  The Terminated\
    \ state is subdivided into two\n      substates, the Mortal and Morgue states,\
    \ to cover the behavior\n      when a dialog is being terminated.  In this state,\
    \ the UA holds\n      information about the dialog that is being terminated.\n\
    \   Mortal (Mort):  The caller and callee enter the Mortal state by\n      sending\
    \ or receiving a BYE.  The UA MUST NOT send any new requests\n      within the\
    \ dialog because there is no dialog.  (Here, the new\n      requests do not include\
    \ ACK for 2xx and BYE for 401 or 407, as\n      further explained in Appendix\
    \ D below.)  In the Mortal state, BYE\n      can be accepted, and the other messages\
    \ in the INVITE dialog usage\n      are responded to with an error.  This addresses\
    \ the case where a\n      caller and a callee exchange reports about the session\
    \ when it is\n      being terminated.  Therefore, the UA possesses dialog information\n\
    \      for internal processing but the dialog shouldn't be externally\n      visible.\
    \  The UA stops managing its dialog state and changes it to\n      the Morgue\
    \ state when the BYE transaction is terminated.\n   Morgue (Morg):  The dialog\
    \ no longer exists in this state.  The\n      sending or receiving of signaling\
    \ that influences a dialog is not\n      performed.  (A dialog is literally terminated.)\
    \  The caller and\n      callee enter the Morgue state via the termination of\
    \ the BYE or\n      INVITE transaction.\n"
- title: 3.  Race Conditions
  contents:
  - "3.  Race Conditions\n   This section details a race condition between two SIP\
    \ UAs, Alice and\n   Bob.  Alice (sip:alice@atlanta.example.com) and Bob\n   (sip:bob@biloxi.example.com)\
    \ are assumed to be SIP phones or SIP-\n   enabled devices.  Only significant\
    \ signaling is illustrated.  Dialog\n   state transitions caused by the sending\
    \ or receiving of SIP messages\n   are shown, and race conditions are indicated\
    \ by '*race*'.  (For\n   abbreviations for the dialog state transitions, refer\
    \ to Section 2.)\n   '*race*' indicates the moment when a race condition occurs.\n\
    \   Examples of race conditions are described below.\n"
- title: 3.1.  Receiving Message in the Moratorium State
  contents:
  - "3.1.  Receiving Message in the Moratorium State\n   This section shows some examples\
    \ of call flow race conditions when\n   receiving messages from other states while\
    \ in the Moratorium state.\n"
- title: 3.1.1.  Callee Receives Initial INVITE Retransmission (Preparative
  contents:
  - "3.1.1.  Callee Receives Initial INVITE Retransmission (Preparative\n        State)\
    \ While in the Moratorium State\n   State  Alice                             \
    \  Bob  State\n          |                                     |\n          |\
    \            ini-INVITE F1            |\n          |------------------------------------>|\n\
    \     Pre  |         180 F2(Packet loss)         |  Pre\n          |         \
    \   x<-----------------------|\n          |                                  \
    \   |  Ear\n          | ini-INVITE F4(=F1)           200 F3 |\n          |------------------\
    \     --------------|\n          |                   \\ /               |  Mora\n\
    \          |                    X                |\n          |              \
    \     / \\               |\n          |<-----------------     ------------->|\
    \  *race*\n    Mora  |                ACK F5               |\n          |------------------------------------>|\n\
    \     Est  |                                     |  Est\n          |         \
    \                            |\n   This scenario illustrates the race condition\
    \ that occurs when the UAS\n   receives a Preparative message while in the Moratorium\
    \ state.  All\n   provisional responses to the initial INVITE (ini-INVITE F1)\
    \ are lost,\n   and the UAC retransmits an ini-INVITE (F4).  At the same time\
    \ as this\n   retransmission, the UAS generates a 200 OK (F3) to the ini-INVITE\
    \ and\n   terminates the INVITE server transaction, according to Section\n   13.3.1.4\
    \ of RFC 3261 [1].\n   However, it is reported that terminating an INVITE server\
    \ transaction\n   when sending a 200 OK is an essential correction to SIP [7].\n\
    \   Therefore, the INVITE server transaction is not terminated by F3, and\n  \
    \ F4 MUST be handled properly as a retransmission.\n   In RFC 3261 [1], it is\
    \ not specified whether the UAS retransmits 200\n   to the retransmission of ini-INVITE.\
    \  Considering the retransmission\n   of 200 triggered by a timer (the transaction\
    \ user (TU) keeps\n   retransmitting 200 based on T1 and T2 until it receives\
    \ an ACK),\n   according to Section 13.3.1.4 of RFC 3261 [1], it seems unnecessary\n\
    \   to retransmit 200 when the UAS receives the retransmission of the\n   ini-INVITE.\
    \  (For implementation, it does not matter if the UAS sends\n   the retransmission\
    \ of 200, since the 200 does not cause any problem.)\n   Message Details\n   F1\
    \ INVITE Alice -> Bob\n   F2 180 Ringing Bob -> Alice\n   /* 180 response is lost\
    \ and does not reach Alice.  */\n   F3 200 OK Bob -> Alice\n   /* According to\
    \ Section 13.3.1.4 of RFC 3261 [1], the INVITE server\n      transaction is terminated\
    \ at this point.  However, this has been\n      reported as an essential correction\
    \ to SIP, and the UAS MUST\n      correctly recognize the ini-INVITE (F4) as a\
    \ retransmission.  */\n   F4 INVITE (retransmission) Alice -> Bob\n   /* F4 is\
    \ a retransmission of F1.  They are exactly the same INVITE\n      request.  For\
    \ UAs that have not dealt with the correction [7] (an\n      INVITE server transaction\
    \ is terminated when sending 200 to\n      INVITE), this request does not match\
    \ the transaction as well as\n      the dialog since it does not have a To tag.\
    \  However, Bob must\n      recognize the retransmitted INVITE correctly, without\
    \ treating it\n      as a new INVITE.  */\n   F5 ACK Alice -> Bob\n"
- title: 3.1.2.  Callee Receives CANCEL (Early State) While in the Moratorium
  contents:
  - "3.1.2.  Callee Receives CANCEL (Early State) While in the Moratorium\n      \
    \  State\n   State  Alice                        Bob  State\n          |     \
    \                         |\n          |          INVITE F1           |\n    \
    \      |----------------------------->|\n     Pre  |       180 Ringing F2    \
    \     |  Pre\n          |<-----------------------------|\n     Ear  |        \
    \                      |  Ear\n          |CANCEL F3       200(INVITE) F4|\n  \
    \        |------------     -------------|\n          |             \\ /      \
    \        |  Mora\n          |              X               |\n          |    \
    \         / \\              |\n          |<-----------     ------------>|  *race*\n\
    \    Mora  |                              |\n          | ACK F6         200(CANCEL)\
    \ F5|\n          |------------     -------------|\n     Est  |             \\\
    \ /              |\n          |              X               |\n          |  \
    \           / \\              |\n          |<-----------     ------------>|\n\
    \          |                              |  Est\n          |       One Way RTP\
    \ Media      |\n          | (Two Way RTP Media possible) |\n          |<=============================|\n\
    \          |            BYE F7            |\n          |----------------------------->|\n\
    \    Mort  |            200 F8            |  Mort\n          |<-----------------------------|\n\
    \          | ^                          ^ |\n          | | Timer K           \
    \       | |\n          | V                          | |\n    Morg  |         \
    \           Timer J | |\n          |                            V |\n        \
    \  |                              |  Morg\n          |                       \
    \       |\n   This scenario illustrates the race condition that occurs when the\
    \ UAS\n   receives an Early message, CANCEL, while in the Moratorium state.\n\
    \   Alice sends a CANCEL, and Bob sends a 200 OK response to the initial\n   INVITE\
    \ message at the same time.  As described in the previous\n   section, according\
    \ to RFC 3261 [1], an INVITE server transaction is\n   supposed to be terminated\
    \ by a 200 response, but this has been\n   corrected in [7].\n   This section\
    \ describes a case in which an INVITE server transaction\n   is not terminated\
    \ by a 200 response to the INVITE request.  In this\n   case, there is an INVITE\
    \ transaction that the CANCEL request matches,\n   so a 200 response to the request\
    \ is sent.  This 200 response simply\n   means that the next hop receives the\
    \ CANCEL request (successful\n   CANCEL (200) does not mean the INVITE was actually\
    \ canceled).  When a\n   UAS has not dealt with the correction [7], the UAC MAY\
    \ receive a 481\n   response to the CANCEL since there is no transaction that\
    \ the CANCEL\n   request matches.  This 481 simply means that there is no matching\n\
    \   INVITE server transaction and CANCEL is not sent to the next hop.\n   Regardless\
    \ of the success/failure of the CANCEL, Alice checks the\n   final response to\
    \ the INVITE, and if she receives 200 to the INVITE\n   request she immediately\
    \ sends a BYE and terminates the dialog.  (See\n   Section 15, RFC 3261 [1].)\n\
    \   From the time F1 is received by Bob until the time that F8 is sent by\n  \
    \ Bob, media may be flowing one way from Bob to Alice.  From the time\n   that\
    \ an answer is received by Alice from Bob, there is the\n   possibility that media\
    \ may flow from Alice to Bob as well.  However,\n   once Alice has decided to\
    \ cancel the call, she presumably will not\n   send media, so practically speaking\
    \ the media stream will remain one\n   way.\n   Message Details\n   F1 INVITE\
    \ Alice -> Bob\n   F2 180 Ringing Bob -> Alice\n   F3 CANCEL Alice -> Bob\n  \
    \ /* Alice sends a CANCEL in the Early state.  */\n   F4 200 OK (INVITE) Bob ->\
    \ Alice\n   /* Alice receives a 200 to INVITE (F1) in the Moratorium state.\n\
    \      Alice has the potential to send as well as receive media, but in\n    \
    \  practice will not send because there is an intent to end the\n      call. \
    \ */\n   F5 200 OK (CANCEL) Bob -> Alice\n   /* 200 to CANCEL simply means that\
    \ the CANCEL was received.  The 200\n      response is sent, since this case assumes\
    \ the correction [7] has\n      been made.  If an INVITE server transaction is\
    \ terminated\n      according to the procedure stated in RFC 3261 [1], the UAC\
    \ MAY\n      receive a 481 response instead of 200.  */\n   F6 ACK Alice -> Bob\n\
    \   /* INVITE is successful, and the CANCEL becomes invalid.  Bob\n      establishes\
    \ RTP streams.  However, the next BYE request\n      immediately terminates the\
    \ dialog and session.  */\n   F7 BYE Alice -> Bob\n   F8 200 OK Bob -> Alice\n"
- title: 3.1.3.  Callee Receives BYE (Early State) While in the Moratorium State
  contents:
  - "3.1.3.  Callee Receives BYE (Early State) While in the Moratorium State\n   State\
    \  Alice                          Bob  State\n          |                    \
    \            |\n          |         ini-INVITE F1          |\n          |------------------------------->|\n\
    \     Pre  |            180 F2              |  Pre\n          |<-------------------------------|\n\
    \     Ear  |                                |  Ear\n          |    BYE F4    \
    \    200(INVITE) F3|\n          |-------------     --------------|\n    Mort \
    \ |              \\ /               |  Mora\n          |               X     \
    \           |\n          |              / \\               |\n          |<------------\
    \     ------------->|  *race*\n          |                                |  Mort\n\
    \          |    ACK F5         200(BYE) F6  |\n          |-------------     --------------|\n\
    \          |              \\ /            ^  |\n          |               X  \
    \           |  |\n          |              / \\            |  |\n          |<------------\
    \     ------------->|\n          | ^                           |  |\n        \
    \  | | Timer K                   |  |\n          | V                         \
    \  |  |\n    Morg  |                     Timer J |  |\n          |           \
    \                  V  |\n          |                                |  Morg\n\
    \          |                                |\n   This scenario illustrates the\
    \ race condition that occurs when the UAS\n   receives an Early message, BYE,\
    \ while in the Moratorium state.  Alice\n   sends a BYE in the Early state, and\
    \ Bob sends a 200 OK to the initial\n   INVITE request at the same time.  Bob\
    \ receives the BYE in the\n   Confirmed dialog state although Alice sent the request\
    \ in the Early\n   state (as explained in Section 2 and Appendix A, this behavior\
    \ is not\n   recommended).  When a proxy is performing forking, the BYE is only\n\
    \   able to terminate the early dialog with a particular UA.  If the\n   caller\
    \ wants to terminate all early dialogs instead of only that with\n   a particular\
    \ UA, it needs to send CANCEL, not BYE.  However, it is\n   not illegal to send\
    \ BYE in the Early state to terminate a specific\n   early dialog if that is the\
    \ caller's intent.\n   The BYE functions normally even if it is received after\
    \ the INVITE\n   transaction termination because BYE differs from CANCEL, and\
    \ is sent\n   not to the request but to the dialog.  Alice enters the Mortal state\n\
    \   on sending the BYE request, and remains Mortal until the Timer K\n   timeout\
    \ occurs.  In the Mortal state, the UAC does not establish a\n   session even\
    \ though it receives a 200 response to the INVITE.  Even\n   so, the UAC sends\
    \ an ACK to 200 in order to complete the INVITE\n   transaction.  The ACK is always\
    \ sent to complete the three-way\n   handshake of the INVITE transaction (further\
    \ explained in Appendix D\n   below).\n   Message Details\n   F1 INVITE Alice\
    \ -> Bob\n   F2 180 Ringing Bob -> Alice\n   F3 200 OK (ini-INVITE) Bob -> Alice\n\
    \   F4 BYE Alice -> Bob\n   /* Alice transitions to the Mortal state upon sending\
    \ BYE.\n      Therefore, after this, she does not begin a session even though\n\
    \      she receives a 200 response with an answer.  */\n   F5 ACK Alice -> Bob\n\
    \   F6 200 OK (BYE) Bob -> Alice\n"
- title: 3.1.4.  Callee Receives re-INVITE (Established State)  While in the
  contents:
  - "3.1.4.  Callee Receives re-INVITE (Established State)  While in the\n       \
    \ Moratorium State (Case 1)\n   State  Alice                          Bob  State\n\
    \          |                                |\n          |    ini-INVITE w/offer1\
    \ F1      |\n          |------------------------------->|\n     Pre  |       \
    \      180 F2             |  Pre\n          |<-------------------------------|\n\
    \     Ear  |                                |  Ear\n          |   200(ini-INV)\
    \ w/answer1 F3    |\n          |<-------------------------------|\n    Mora  |\
    \       ACK F4(packet loss)      |  Mora\n          |-------------------->x  \
    \        |\n     Est  |                                |\n          | re-INVITE\
    \ F6      200 F5(=F3)  |\n          |   w/offer2         w/answer1   |\n     \
    \     |-------------     --------------|\n          |              \\ /      \
    \         |\n          |               X                |\n          |       \
    \       / \\               |\n          |<------------     ------------->|  *race*\n\
    \          |                  200(re-INV) F8|\n          | ACK F7(=F4)       \
    \ w/answer2   |\n          |-------------     --------------|\n          |   \
    \           \\ /               |\n          |               X                |\n\
    \          |              / \\               |\n          |<------------     ------------->|\n\
    \          |         ACK (re-INV) F9        |  Est\n          |------------------------------->|\n\
    \          |                                |\n          |                   \
    \             |\n   This scenario illustrates the race condition that occurs when\
    \ a UAS\n   in the Moratorium state receives a re-INVITE sent by a UAC in the\n\
    \   Established state.\n   The UAS receives a re-INVITE (with offer2) before receiving\
    \ an ACK\n   for the ini-INVITE (with offer1).  The UAS sends a 200 OK (with\n\
    \   answer2) to the re-INVITE (F8) because it has sent a 200 OK (with\n   answer1)\
    \ to the ini-INVITE (F3, F5) and the dialog has already been\n   established.\
    \  (Because F5 is a retransmission of F3, SDP negotiation\n   is not performed\
    \ here.)\n   As can be seen in Section 3.3.2 below, the 491 response seems to\
    \ be\n   closely related to session establishment, even in cases other than\n\
    \   INVITE crossover.  This example recommends that 200 be sent instead\n   of\
    \ 491 because it does not have an influence on the session.\n   However, a 491\
    \ response can also lead to the same outcome, so either\n   response can be used.\n\
    \   Moreover, if the UAS doesn't receive an ACK for a long time, it\n   should\
    \ send a BYE and terminate the dialog.  Note that ACK F7 has the\n   same CSeq\
    \ number as ini-INVITE F1 (see Section 13.2.2.4 of RFC 3261\n   [1]).  The UA\
    \ should not reject or drop the ACK on grounds of the\n   CSeq number.\n   Note:\
    \ Implementation issues are outside the scope of this document,\n   but the following\
    \ tip is provided for avoiding race conditions of\n   this type.  The caller can\
    \ delay sending re-INVITE F6 for some period\n   of time (2 seconds, perhaps),\
    \ after which the caller can reasonably\n   assume that its ACK has been received.\
    \  Implementors can decouple the\n   actions of the user (e.g., pressing the hold\
    \ button) from the actions\n   of the protocol (the sending of re-INVITE F6),\
    \ so that the UA can\n   behave like this.  In this case, it is the implementor's\
    \ choice as to\n   how long to wait.  In most cases, such an implementation may\
    \ be\n   useful to prevent the type of race condition shown in this section.\n\
    \   This document expresses no preference about whether or not they\n   should\
    \ wait for an ACK to be delivered.  After considering the impact\n   on user experience,\
    \ implementors should decide whether or not to wait\n   for a while, because the\
    \ user experience depends on the\n   implementation and has no direct bearing\
    \ on protocol behavior.\n   Message Details\n   F1 INVITE Alice -> Bob\n   INVITE\
    \ sip:bob@biloxi.example.com SIP/2.0\n   Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bf9\n\
    \   Max-Forwards: 70\n   From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n\
    \   To: Bob <sip:bob@biloxi.example.com>\n   Call-ID: 3848276298220188511@atlanta.example.com\n\
    \   CSeq: 1 INVITE\n   Contact: <sip:alice@client.atlanta.example.com;transport=udp>\n\
    \   Content-Type: application/sdp\n   Content-Length: 137\n   v=0\n   o=alice\
    \ 2890844526 2890844526 IN IP4 client.atlanta.example.com\n   s=-\n   c=IN IP4\
    \ 192.0.2.101\n   t=0 0\n   m=audio 49172 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n\
    \   /* Detailed messages are shown for the sequence to illustrate the\n      offer\
    \ and answer examples.  */\n   F2 180 Ringing Bob -> Alice\n   SIP/2.0 180 Ringing\n\
    \   Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bf9\n   ;received=192.0.2.101\n\
    \   From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n   To: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n\
    \   Call-ID: 3848276298220188511@atlanta.example.com\n   CSeq: 1 INVITE\n   Contact:\
    \ <sip:bob@client.biloxi.example.com;transport=udp>\n   Content-Length: 0\n  \
    \ F3 200 OK Bob -> Alice\n   SIP/2.0 200 OK\n   Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bf9\n\
    \   ;received=192.0.2.101\n   From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n\
    \   To: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n   Call-ID: 3848276298220188511@atlanta.example.com\n\
    \   CSeq: 1 INVITE\n   Contact: <sip:bob@client.biloxi.example.com;transport=udp>\n\
    \   Content-Type: application/sdp\n   Content-Length: 133\n   v=0\n   o=bob 2890844527\
    \ 2890844527 IN IP4 client.biloxi.example.com\n   s=-\n   c=IN IP4 192.0.2.201\n\
    \   t=0 0\n   m=audio 3456 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   F4 ACK Alice\
    \ -> Bob\n   ACK sip:bob@client.biloxi.example.com SIP/2.0\n   Via: SIP/2.0/UDP\
    \ client.atlanta.example.com:5060;branch=z9hG4bKnashd8\n   Max-Forwards: 70\n\
    \   From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n   To: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n\
    \   Call-ID: 3848276298220188511@atlanta.example.com\n   CSeq: 1 ACK\n   Content-Length:\
    \ 0\n   /* The ACK request is lost.  */\n   F5(=F3) 200 OK Bob -> Alice (retransmission)\n\
    \   /* The UAS retransmits a 200 OK to the ini-INVITE since it has not\n     \
    \ received an ACK.  */\n   F6 re-INVITE Alice -> Bob\n   INVITE sip:sip:bob@client.biloxi.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bf91\n\
    \   Max-Forwards: 70\n   From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n\
    \   To: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n   Call-ID: 3848276298220188511@atlanta.example.com\n\
    \   CSeq: 2 INVITE\n   Content-Length: 147\n   v=0\n   o=alice 2890844526 2890844527\
    \ IN IP4 client.atlanta.example.com\n   s=-\n   c=IN IP4 192.0.2.101\n   t=0 0\n\
    \   m=audio 49172 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   a=sendonly\n   F7(=F4)\
    \ ACK Alice -> Bob (retransmission)\n   /* \"(=F4)\" of ACK F7 shows that it is\
    \ equivalent to F4 in that it is\n      an ACK for F3.  This doesn't mean that\
    \ F4 and F7 must be equal in\n      Via-branch value.  Although it is ambiguous\
    \ in RFC 3261 whether\n      the Via-branch of ACK F7 differs from that of F4,\
    \ it doesn't\n      affect the UAS's behavior. */\n   F8 200 OK (re-INVITE) Bob\
    \ -> Alice\n   SIP/2.0 200 OK\n   Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bf91\n\
    \   Max-Forwards: 70\n   From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n\
    \   To: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n   Call-ID: 3848276298220188511@atlanta.example.com\n\
    \   CSeq: 2 INVITE\n   Content-Length: 143\n   v=0\n   o=bob 2890844527 2890844528\
    \ IN IP4 client.biloxi.example.com\n   s=-\n   c=IN IP4 192.0.2.201\n   t=0 0\n\
    \   m=audio 3456 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   a=recvonly\n   F9 ACK\
    \ (re-INVITE) Alice -> Bob\n   ACK sip:sip:bob@client.biloxi.example.com SIP/2.0\n\
    \   Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK230f21\n  \
    \ Max-Forwards: 70\n   From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n\
    \   To: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n   Call-ID: 3848276298220188511@atlanta.example.com\n\
    \   CSeq: 2 ACK\n   Content-Length: 0\n"
- title: 3.1.5.  Callee Receives re-INVITE (Established State) While in the
  contents:
  - "3.1.5.  Callee Receives re-INVITE (Established State) While in the\n        Moratorium\
    \ State (Case 2)\n   State  Alice                          Bob  State\n      \
    \    |                                |\n          |    ini-INVITE (no offer)\
    \ F1    |\n          |------------------------------->|\n     Pre  |         \
    \    180 F2             |  Pre\n          |<-------------------------------|\n\
    \     Ear  |                                |  Ear\n          |    200(ini-INV)\
    \ w/offer1 F3    |\n          |<-------------------------------|\n    Mora  |\
    \  ACK w/answer1 F4(packet loss) |  Mora\n          |-------------------->x  \
    \        |\n     Est  |                                |\n          | re-INVITE\
    \ F6      200 F5(=F3)  |\n          |   w/offer2         w/offer1    |\n     \
    \     |-------------     --------------|\n          |              \\ /      \
    \         |\n          |               X                |\n          |       \
    \       / \\               |\n          |<------------     ------------->|\n \
    \         | ACK F7(=F4)      491(re-INV) F8|\n          |-------------     --------------|\n\
    \          |              \\ /               |\n          |               X  \
    \              |\n          |              / \\               |\n          |<------------\
    \     ------------->|\n          |        ACK (re-INV) F9         |  Est\n   \
    \       |------------------------------->|\n          |                      \
    \          |\n          |                                |\n   This scenario is\
    \ basically the same as that of Section 3.1.4, but\n   differs in sending an offer\
    \ in the 200 and an answer in the ACK.  In\n   contrast to the previous case,\
    \ the offer in the 200 (F3) and the\n   offer in the re-INVITE (F6) collide with\
    \ each other.\n   Bob sends a 491 to the re-INVITE (F6) since he is not able to\n\
    \   properly handle a new request until he receives an answer.  (Note:\n   500\
    \ with a Retry-After header may be returned if the 491 response is\n   understood\
    \ to indicate request collision.  However, 491 is\n   recommended here because\
    \ 500 applies to so many cases that it is\n   difficult to determine what the\
    \ real problem was.)  The same result\n   will be reached if F6 is an UPDATE with\
    \ offer.\n   Note: As noted in Section 3.1.4, the caller may delay sending a re-\n\
    \   INVITE F6 for some period of time (2 seconds, perhaps), after which\n   the\
    \ caller may reasonably assume that its ACK has been received, to\n   prevent\
    \ this type of race condition.  This document expresses no\n   preference about\
    \ whether or not they should wait for an ACK to be\n   delivered.  After considering\
    \ the impact on user experience,\n   implementors should decide whether or not\
    \ to wait for a while,\n   because the user experience depends on the implementation\
    \ and has no\n   direct bearing on protocol behavior.\n   Message Details\n  \
    \ F1 INVITE Alice -> Bob\n   INVITE sip:bob@biloxi.example.com SIP/2.0\n   Via:\
    \ SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bf9\n   Max-Forwards:\
    \ 70\n   From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n   To: Bob\
    \ <sip:bob@biloxi.example.com>\n   Call-ID: 3848276298220188511@atlanta.example.com\n\
    \   CSeq: 1 INVITE\n   Contact: <sip:alice@client.atlanta.example.com;transport=udp>\n\
    \   Content-Length: 0\n   /* The request does not contain an offer.  Detailed\
    \ messages are\n      shown for the sequence to illustrate offer and answer\n\
    \      examples.  */\n   F2 180 Ringing Bob -> Alice\n   F3 200 OK Bob -> Alice\n\
    \   SIP/2.0 200 OK\n   Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bf9\n\
    \   ;received=192.0.2.101\n   From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n\
    \   To: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n   Call-ID: 3848276298220188511@atlanta.example.com\n\
    \   CSeq: 1 INVITE\n   Contact: <sip:bob@client.biloxi.example.com;transport=udp>\n\
    \   Content-Type: application/sdp\n   Content-Length: 133\n   v=0\n   o=bob 2890844527\
    \ 2890844527 IN IP4 client.biloxi.example.com\n   s=-\n   c=IN IP4 192.0.2.201\n\
    \   t=0 0\n   m=audio 3456 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   /* An offer\
    \ is made in 200.  */\n   F4 ACK Alice -> Bob\n   ACK sip:bob@client.biloxi.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bKnashd8\n\
    \   Max-Forwards: 70\n   From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n\
    \   To: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n   Call-ID: 3848276298220188511@atlanta.example.com\n\
    \   CSeq: 1 ACK\n   Content-Type: application/sdp\n   Content-Length: 137\n  \
    \ v=0\n   o=alice 2890844526 2890844526 IN IP4 client.atlanta.example.com\n  \
    \ s=-\n   c=IN IP4 192.0.2.101\n   t=0 0\n   m=audio 49172 RTP/AVP 0\n   a=rtpmap:0\
    \ PCMU/8000\n   /* The request contains an answer, but the request is lost.  */\n\
    \   F5(=F3) 200 OK Bob -> Alice (retransmission)\n   /* The UAS retransmits a\
    \ 200 OK to the ini-INVITE since it has not\n      received an ACK.  */\n   F6\
    \ re-INVITE Alice -> Bob\n   INVITE sip:sip:bob@client.biloxi.example.com SIP/2.0\n\
    \   Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bf91\n  \
    \ Max-Forwards: 70\n   From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n\
    \   To: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n   Call-ID: 3848276298220188511@atlanta.example.com\n\
    \   CSeq: 2 INVITE\n   Content-Length: 147\n   v=0\n   o=alice 2890844526 2890844527\
    \ IN IP4 client.atlanta.example.com\n   s=-\n   c=IN IP4 192.0.2.101\n   t=0 0\n\
    \   m=audio 49172 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   a=sendonly\n   /* The\
    \ request contains an offer.  */\n   F7(=F4) ACK Alice -> Bob (retransmission)\n\
    \   /* A retransmission triggered by the reception of a retransmitted\n      200.\
    \ \"(=F4)\" of ACK F7 shows that it is equivalent to the F4 in\n      that it\
    \ is an ACK for F3.  This doesn't mean that F4 and F7 are\n      necessarily equal\
    \ in Via-branch value.  Although it is ambiguous\n      in RFC 3261 whether the\
    \ Via-branch of ACK F7 differs from that of\n      F4, it doesn't affect the UAS's\
    \ behavior.  */\n   F8 491 (re-INVITE) Bob -> Alice\n   /* Bob sends 491 (Request\
    \ Pending), since Bob has a pending\n      offer.  */\n   F9 ACK (re-INVITE) Alice\
    \ -> Bob\n"
- title: 3.1.6.  Callee Receives BYE (Established State) While in the Moratorium
  contents:
  - "3.1.6.  Callee Receives BYE (Established State) While in the Moratorium\n   \
    \     State\n   State  Alice                     Bob  State\n          |     \
    \                      |\n          |         INVITE F1         |\n          |-------------------------->|\n\
    \     Pre  |      180 Ringing F2       |  Pre\n          |<--------------------------|\n\
    \     Ear  |                           |  Ear\n          |         200 OK F3 \
    \        |\n          |<--------------------------|\n    Mora  |    ACK F4(packet\
    \ loss)    |  Mora\n          |--------------->x          |\n     Est  |   Both\
    \ Way RTP Media      |\n          |<=========================>|\n          | \
    \  BYE F6       200 F5(=F3)|\n          |-----------     -----------|\n    Mort\
    \  |            \\ /            |\n          |             X             |\n \
    \         |            / \\            |\n          |<----------     ---------->|\
    \  *race*\n          |ACK F7(=F4)     200(BYE) F8|  Mort\n          |-----------\
    \     -----------|\n          |            \\ /            |\n          |    \
    \         X             |\n          |            / \\            |\n        \
    \  |<----------     ---------->|\n          | ^                       ^ |\n  \
    \        | | Timer K               | |\n          | V                       |\
    \ |\n    Morg  |                 Timer J | |\n          |                    \
    \     V |\n          |                           |  Morg\n          |        \
    \                   |\n   This scenario illustrates the race condition that occurs\
    \ when the UAS\n   receives an Established message, BYE, while in the Moratorium\
    \ state.\n   An ACK request for a 200 OK response is lost (or delayed).  Bob\n\
    \   retransmits the 200 OK to the ini-INVITE, and at the same time Alice\n   sends\
    \ a BYE request and terminates the session.  Upon receipt of the\n   retransmitted\
    \ 200 OK, Alice's UA might be inclined to reestablish the\n   session.  But that\
    \ is wrong -- the session should not be\n   reestablished when the dialog is in\
    \ the Mortal state.  Moreover, in\n   the case where the UAS sends an offer in\
    \ a 200 OK, the UAS should not\n   start a session again, for the same reason,\
    \ if the UAS receives a\n   retransmitted ACK after receiving a BYE.\n   Note:\
    \ As noted in Section 3.1.4, implementation issues are outside\n   the scope of\
    \ this document, but the following tip is provided for\n   avoiding race conditions\
    \ of this type.  The caller can delay sending\n   BYE F6 for some period of time\
    \ (2 seconds, perhaps), after which the\n   caller can reasonably assume that\
    \ its ACK has been received.\n   Implementors can decouple the actions of the\
    \ user (e.g., hanging up)\n   from the actions of the protocol (the sending of\
    \ BYE F6), so that the\n   UA can behave like this.  In this case, it is the implementor's\n\
    \   choice as to how long to wait.  In most cases, such an implementation\n  \
    \ may be useful to prevent the type of race condition shown in this\n   section.\
    \  This document expresses no preference about whether or not\n   they should\
    \ wait for an ACK to be delivered.  After considering the\n   impact on user experience,\
    \ implementors should decide whether or not\n   to wait for a while, because the\
    \ user experience depends on the\n   implementation and has no direct bearing\
    \ on protocol behavior.\n   Message Details\n   F1 INVITE Alice -> Bob\n   F2\
    \ 180 Ringing Bob -> Alice\n   F3 200 OK Bob -> Alice\n   F4 ACK Alice -> Bob\n\
    \   /* ACK request is lost.  */\n   F5(=F3) 200 OK Bob -> Alice\n   /* The UAS\
    \ retransmits a 200 OK to the ini-INVITE since it has not\n      received an ACK.\
    \  */\n   F6 BYE Alice -> Bob\n   /* Bob retransmits a 200 OK and Alice sends\
    \ a BYE at the same time.\n      Alice transitions to the Mortal state, so she\
    \ does not begin a\n      session after this even though she receives a 200 response\
    \ to the\n      re-INVITE.  */\n   F7(=F4) ACK Alice -> Bob\n   /* \"(=F4)\" of\
    \ ACK F7 shows that it is equivalent to the F4 in that it\n      is an ACK for\
    \ F3.  This doesn't mean that F4 and F7 must be equal\n      in Via-branch value.\
    \  Although it is ambiguous in RFC 3261 whether\n      the Via-branch of ACK F7\
    \ differs from that of F4, it doesn't\n      affect the UAS's behavior.  */\n\
    \   F8 200 OK (BYE) Bob -> Alice\n   /* Bob sends a 200 OK to the BYE.  */\n"
- title: 3.2.  Receiving Message in the Mortal State
  contents:
  - "3.2.  Receiving Message in the Mortal State\n   This section shows some examples\
    \ of call flow race conditions when\n   receiving messages from other states while\
    \ in the Mortal state.\n"
- title: 3.2.1.  UA Receives BYE (Established State) While in the Mortal State
  contents:
  - "3.2.1.  UA Receives BYE (Established State) While in the Mortal State\n   State\
    \  Alice                  Bob  State\n          |                        |\n \
    \         |       INVITE F1        |\n          |----------------------->|\n \
    \    Pre  |    180 Ringing F2      |  Pre\n          |<-----------------------|\n\
    \     Ear  |                        |  Ear\n          |       200 OK F3      \
    \  |\n          |<-----------------------|\n    Mora  |         ACK F4       \
    \  |  Mora\n          |----------------------->|\n     Est  |   Both Way RTP Media\
    \   |  Est\n          |<======================>|\n          |                \
    \        |\n          | BYE F5         BYE F6  |\n          |---------     ----------|\n\
    \    Mort  |          \\ /           |  Mort\n          |           X        \
    \    |\n          |          / \\           |\n          |<--------     --------->|\
    \  *race*\n          |                        |\n          | 200 F8         200\
    \ F7  |\n          |---------     ----------|\n          |          \\ /     \
    \      |\n          |           X            |\n          |          / \\    \
    \       |\n          |<--------     --------->|\n          | ^               \
    \     ^ |\n          | | Timer K            | |\n          | V               \
    \     | |\n    Morg  |              Timer J | |\n          |                 \
    \     V |\n          |                        |  Morg\n          |           \
    \             |\n   This scenario illustrates the race condition that occurs when\
    \ the UAS\n   receives an Established message, BYE, while in the Mortal state.\n\
    \   Alice and Bob send a BYE at the same time.  A dialog and session are\n   ended\
    \ shortly after a BYE request is passed to a client transaction.\n   As shown\
    \ in Section 2, the UA remains in the Mortal state.\n   UAs in the Mortal state\
    \ return error responses to the requests that\n   operate within a dialog or session,\
    \ such as re-INVITE, UPDATE, or\n   REFER.  However, the UA shall return a 200\
    \ OK to the BYE taking the\n   use case into consideration where a caller and\
    \ a callee exchange\n   reports about the session when it is being terminated.\
    \  (Since the\n   dialog and the session both terminate when a BYE is sent, the\
    \ choice\n   of sending a 200 or an error response upon receiving a BYE while\
    \ in\n   the Mortal state does not affect the resulting termination.\n   Therefore,\
    \ even though this example uses a 200 response, other\n   responses can also be\
    \ used.)\n   Message Details\n   F1 INVITE Alice -> Bob\n   F2 180 Ringing Bob\
    \ -> Alice\n   F3 200 OK Bob -> Alice\n   F4 ACK Alice -> Bob\n   F5 BYE Alice\
    \ -> Bob\n   /* The session is terminated at the moment Alice sends a BYE.  The\n\
    \      dialog still exists then, but it is certain to be terminated in a\n   \
    \   short period of time.  The dialog is completely terminated when\n      the\
    \ timeout of the BYE request occurs.  */\n   F6 BYE Bob -> Alice\n   /* Bob has\
    \ also transmitted a BYE simultaneously with Alice.  Bob\n      terminates the\
    \ session and the dialog.  */\n   F7 200 OK Bob -> Alice\n   /* Since the dialog\
    \ is in the Moratorium state, Bob responds with a\n      200 to the BYE request.\
    \  */\n   F8 200 OK Alice -> Bob\n   /* Since Alice has transitioned from the\
    \ Established state to the\n      Mortal state by sending a BYE, Alice responds\
    \ with a 200 to the\n      BYE request.  */\n"
- title: 3.2.2.  UA Receives re-INVITE (Established State) While in the Mortal
  contents:
  - "3.2.2.  UA Receives re-INVITE (Established State) While in the Mortal\n     \
    \   State\n    State  Alice                  Bob  State\n           |        \
    \                |\n           |       INVITE F1        |\n           |----------------------->|\n\
    \      Pre  |    180 Ringing F2      |  Pre\n           |<-----------------------|\n\
    \      Ear  |                        |  Ear\n           |       200 OK F3    \
    \    |\n           |<-----------------------|\n     Mora  |         ACK F4   \
    \      |  Mora\n           |----------------------->|\n      Est  |   Both Way\
    \ RTP Media   |  Est\n           |<======================>|\n           |    \
    \                    |\n           | BYE F5     re-INVITE F6|\n           |---------\
    \     ----------|\n     Mort  |          \\ /           |\n           |      \
    \     X            |\n           |          / \\           |\n   *race*  |<--------\
    \     --------->|\n           |                        |  Mort\n           | 481\
    \ F8         200 F7  |\n           | (re-INV)       (BYE)   |\n           |---------\
    \     ----------|\n           |          \\ /           |^\n           |     \
    \      X            ||\n           |          / \\           ||Timer J\n     \
    \      |<--------     --------->||\n          ^|    ACK (re-INV) F9     ||\n \
    \         ||<-----------------------||\n   Timer K||                        ||\n\
    \          V|                        ||\n     Morg  |                        |V\n\
    \           |                        |  Morg\n           |                   \
    \     |\n   This scenario illustrates the race condition that occurs when the\
    \ UAS\n   receives an Established message, re-INVITE, while in the Mortal\n  \
    \ state.  Bob sends a re-INVITE, and Alice sends a BYE at the same\n   time. \
    \ The re-INVITE receives a 481 response since the TU of Alice\n   has transitioned\
    \ from the Established state to the Mortal state by\n   sending BYE.  Bob sends\
    \ an ACK for the 481 response because the ACK\n   for error responses is handled\
    \ by the transaction layer and, at the\n   point of receiving the 481, the INVITE\
    \ client transaction still\n   remains (even though the dialog has been terminated).\n\
    \   Message Details\n   F1 INVITE Alice -> Bob\n   F2 180 Ringing Bob -> Alice\n\
    \   F3 200 OK Bob -> Alice\n   F4 ACK Alice -> Bob\n   F5 BYE Alice -> Bob\n \
    \  /* Alice sends a BYE and terminates the session, and transitions from\n   \
    \   the Established state to the Mortal state.  */\n   F6 re-INVITE Bob -> Alice\n\
    \   /* Alice sends a BYE, and Bob sends a re-INVITE at the same time.\n      The\
    \ dialog state transitions to the Mortal state at the moment\n      Alice sends\
    \ the BYE, but Bob does not know this until he receives\n      the BYE.  Therefore,\
    \ the dialog is in the Terminated state from\n      Alice's point of view, but\
    \ in the Confirmed state from Bob's point\n      of view.  A race condition occurs.\
    \  */\n   F7 200 OK (BYE) Bob -> Alice\n   F8 481 Call/Transaction Does Not Exist\
    \ (re-INVITE) Alice -> Bob\n   /* Since Alice is in the Mortal state, she responds\
    \ with a 481 to the\n      re-INVITE.  */\n   F9 ACK (re-INVITE) Bob -> Alice\n\
    \   /* ACK for an error response is handled by Bob's INVITE client\n      transaction.\
    \  */\n"
- title: 3.2.3.  UA Receives 200 OK for re-INVITE (Established State) While in
  contents:
  - "3.2.3.  UA Receives 200 OK for re-INVITE (Established State) While in\n     \
    \   the Mortal State\n   State  Alice                  Bob  State\n          |\
    \                        |\n          |       INVITE F1        |\n          |----------------------->|\n\
    \     Pre  |    180 Ringing F2      |  Pre\n          |<-----------------------|\n\
    \     Ear  |                        |  Ear\n          |       200 OK F3      \
    \  |\n          |<-----------------------|\n    Mora  |         ACK F4       \
    \  |  Mora\n          |----------------------->|\n     Est  |   Both Way RTP Media\
    \   |  Est\n          |<======================>|\n          |                \
    \        |\n          |      re-INVITE F5      |\n          |<-----------------------|\n\
    \          | 200 F7         BYE F6  |\n          |---------     ----------|\n\
    \          |          \\ /           |  Mort\n          |           X        \
    \    |\n          |          / \\           |\n          |<--------     --------->|\
    \  *race*\n    Mort  | 200 F8         ACK F9  |\n          | (BYE)         (re-INV)\
    \ |\n          |---------     ----------|\n          | ^        \\ /         \
    \  |\n          | |         X            |\n          | |        / \\        \
    \   |\n          |<--------     --------->|\n          | |                   \
    \ ^ |\n          | |            Timer K | |\n          | |                   \
    \ V |\n          | | Timer J              |  Morg\n          | V             \
    \         |\n    Morg  |                        |\n          |               \
    \         |\n   This scenario illustrates the race condition that occurs when\
    \ the UAS\n   receives an Established message, 200 to a re-INVITE, while in the\n\
    \   Mortal state.  Bob sends a BYE immediately after sending a re-INVITE.\n  \
    \ (For example, in the case of a telephone application, it is possible\n   that\
    \ a user hangs up the phone immediately after refreshing the\n   session.)  Bob\
    \ sends an ACK for a 200 response to INVITE while in the\n   Mortal state, completing\
    \ the INVITE transaction.\n   Note: As noted in Section 3.1.4, implementation\
    \ issues are outside\n   the scope of this document, but the following tip is\
    \ provided for\n   avoiding race conditions of this type.  The UAC can delay sending\
    \ a\n   BYE F6 until the re-INVITE transaction F5 completes.  Implementors\n \
    \  can decouple the actions of the user (e.g., hanging up) from the\n   actions\
    \ of the protocol (the sending of BYE F6), so that the UA can\n   behave like\
    \ this.  In this case, it is the implementor's choice as to\n   how long to wait.\
    \  In most cases, such an implementation may be\n   useful in preventing the type\
    \ of race condition described in this\n   section.  This document expresses no\
    \ preference about whether or not\n   they should wait for an ACK to be delivered.\
    \  After considering the\n   impact on user experience, implementors should decide\
    \ whether or not\n   to wait for a while, because the user experience depends\
    \ on the\n   implementation and has no direct bearing on protocol behavior.\n\
    \   Message Details\n   F1 INVITE Alice -> Bob\n   F2 180 Ringing Bob -> Alice\n\
    \   F3 200 OK Bob -> Alice\n   F4 ACK Alice -> Bob\n   F5 re-INVITE Bob -> Alice\n\
    \   INVITE sip:alice@client.atlanta.example.com SIP/2.0\n   Via: SIP/2.0/UDP client.biloxi.example.com:5060;branch=z9hG4bKnashd7\n\
    \   Session-Expires: 300;refresher=uac\n   Supported: timer\n   Max-Forwards:\
    \ 70\n   From: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n   To: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n\
    \   Call-ID: 3848276298220188511@atlanta.example.com\n   CSeq: 1 INVITE\n   Content-Length:\
    \ 0\n   /* Some detailed messages are shown for the sequence to illustrate\n \
    \     that the re-INVITE is handled in the usual manner in the Mortal\n      state.\
    \  */\n   F6 BYE Bob -> Alice\n   /* Bob sends BYE immediately after sending the\
    \ re-INVITE.  Bob\n      terminates the session and transitions from the Established\
    \ state\n      to the Mortal state.  */\n   F7 200 OK (re-INVITE) Alice -> Bob\n\
    \   SIP/2.0 200 OK\n   Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bKnashd7\n\
    \   ;received=192.0.2.201\n   Require: timer\n   Session-Expires: 300;refresher=uac\n\
    \   From: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n   To: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n\
    \   Call-ID: 3848276298220188511@atlanta.example.com\n   CSeq: 1 INVITE\n   Content-Length:\
    \ 0\n   /* Bob sends BYE, and Alice responds with a 200 OK to the re-INVITE.\n\
    \      A race condition occurs.  */\n   F8 200 OK (BYE) Alice -> Bob\n   F9 ACK\
    \ (re-INVITE) Bob -> Alice\n   ACK sip:alice@client.atlanta.example.com SIP/2.0\n\
    \   Via: SIP/2.0/UDP client.biloxi.example.com:5060;branch=z9hG4bK74b44\n   Max-Forwards:\
    \ 70\n   From: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n   To: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n\
    \   Call-ID: 3848276298220188511@atlanta.example.com\n   CSeq: 2 ACK\n   Content-Length:\
    \ 0\n   /* Bob sends ACK in the Mortal state to complete the three-way\n     \
    \ handshake of the INVITE transaction.  */\n"
- title: 3.2.4.  Callee Receives ACK (Moratorium State) While in the Mortal State
  contents:
  - "3.2.4.  Callee Receives ACK (Moratorium State) While in the Mortal State\n  \
    \ State  Alice                          Bob  State\n          |              \
    \                  |\n          |         ini-INVITE F1          |\n         \
    \ |------------------------------->|\n     Pre  |            180 F2          \
    \    |  Pre\n          |<-------------------------------|\n     Ear  |       \
    \     200 F3              |  Ear\n          |<-------------------------------|\n\
    \    Mora  |                                |  Mora\n          |    ACK F4   \
    \         BYE F5    |\n          |-------------     --------------|\n     Est\
    \  |              \\ /               |  Mort\n          |               X    \
    \            |\n          |              / \\               |\n          |<------------\
    \     ------------->|  *race*\n    Mort  |            200 F6              |\n\
    \          |------------------------------->|\n          | ^                 \
    \           ^ |\n          | |                    Timer K | |\n          | | \
    \                           V |\n          | | Timer J                      |\
    \  Morg\n          | V                              |\n    Morg  |           \
    \                     |\n          |                                |\n   This\
    \ scenario illustrates the race condition that occurs when the UAS\n   receives\
    \ an Established message, ACK to 200, while in the Mortal\n   state.  Alice sends\
    \ an ACK and Bob sends a BYE at the same time.\n   When the offer is in a 2xx,\
    \ and the answer is in an ACK, there is a\n   race condition.  A session is not\
    \ started when the ACK is received\n   because Bob has already terminated the\
    \ session by sending a BYE.  The\n   answer in the ACK request is just ignored.\n\
    \   Note: As noted in Section 3.1.4, implementation issues are outside\n   the\
    \ scope of this document, but the following tip is provided for\n   avoiding race\
    \ conditions of this type.  Implementors can decouple the\n   actions of the user\
    \ (e.g., hanging up) from the actions of the\n   protocol (the sending of BYE\
    \ F5), so that the UA can behave like\n   this.  In this case, it is the implementor's\
    \ choice as to how long to\n   wait.  In most cases, such an implementation may\
    \ be useful in\n   preventing the type of race condition described in this section.\n\
    \   This document expresses no preference about whether or not they\n   should\
    \ wait for an ACK to be delivered.  After considering the impact\n   on user experience,\
    \ implementors should decide whether or not to wait\n   for a while, because the\
    \ user experience depends on the\n   implementation and has no direct bearing\
    \ on protocol behavior.\n   Message Details\n   F1 INVITE Alice -> Bob\n   F2\
    \ 180 Ringing Bob -> Alice\n   F3 200 OK Bob -> Alice\n   F4 ACK Alice -> Bob\n\
    \   /* RTP streams are established between Alice and Bob.  */\n   F5 BYE Alice\
    \ -> Bob\n   F6 200 OK Bob -> Alice\n   /* Alice sends a BYE and terminates the\
    \ session and dialog.  */\n"
- title: 3.3.  Other Race Conditions
  contents:
  - "3.3.  Other Race Conditions\n   This section shows examples of race conditions\
    \ that are not directly\n   related to dialog state transition.  In SIP, processing\
    \ functions are\n   deployed in three layers: dialog, session, and transaction.\
    \  They are\n   related to each other, but have to be treated separately.  Section\
    \ 17\n   of RFC 3261 [1] details the processing of transactions.  This\n   document\
    \ has tried so far to clarify the processing on dialogs.  This\n   section explains\
    \ race conditions that are related to sessions\n   established with SIP.\n"
- title: 3.3.1.  Re-INVITE Crossover
  contents:
  - "3.3.1.  Re-INVITE Crossover\n   Alice                         Bob\n     |   \
    \                         |\n     |         INVITE F1          |\n     |--------------------------->|\n\
    \     |      180 Ringing F2        |\n     |<---------------------------|\n  \
    \   |          200 OK F3         |\n     |<---------------------------|\n    \
    \ |           ACK F4           |\n     |--------------------------->|\n     |\
    \     Both Way RTP Media     |\n     |<==========================>|\n     |  \
    \                          |\n     |re-INVITE F5   re-INVITE F6 |\n     |------------\
    \   -------------|\n     |            \\ /             |\n     |             X\
    \              |\n     |            / \\             |\n     |<-----------   ------------>|\n\
    \     |   491 F8        491 F7     |\n     |------------   -------------|\n  \
    \   |            \\ /             |\n     |             X              |\n   \
    \  |            / \\             |\n     |<-----------   ------------>|\n    \
    \ |  ^ ACK F9         ^ ACK F10|\n     |--|---------   ----|--------|\n     |\
    \  |          \\ /   |        |\n     |  |           X    |        |\n     | \
    \ |          / \\   |        |\n     |<-|----------   ---|------->|\n     |  |\
    \                |        |\n     |  |0-2.0 sec       |        |\n     |  |  \
    \              |        |\n     |  v  re-INVITE F11(=F6)     |\n     |<------------------|--------|\n\
    \     |     200 OK F12    |        |\n     |-------------------|------->|\n  \
    \   |       ACK F13     |        |\n     |<------------------|--------|\n    \
    \ |                   |        |\n     |                   |2.1-4.0 sec\n    \
    \ |                   |        |\n     |re-INVITE F14(=F5) v        |\n     |--------------------------->|\n\
    \     |         200 OK F15         |\n     |<---------------------------|\n  \
    \   |          ACK F16           |\n     |--------------------------->|\n    \
    \ |                            |\n     |                            |\n   In this\
    \ scenario, Alice and Bob send re-INVITEs at the same time.\n   When two re-INVITEs\
    \ cross in the same dialog, they are retried, each\n   after a different interval,\
    \ according to Section 14.1 of RFC 3261\n   [1].  When Alice sends the re-INVITE\
    \ and it crosses with Bob's, the\n   re-INVITE will be retried after 2.1-4.0 seconds\
    \ because she owns the\n   Call-ID (she generated it).  Bob will retry his INVITE\
    \ again after\n   0.0-2.0 seconds, because Bob isn't the owner of the Call-ID.\n\
    \   Therefore, each User Agent must remember whether or not it has\n   generated\
    \ the Call-ID of the dialog, in case an INVITE may cross with\n   another INVITE.\n\
    \   In this example, Alice's re-INVITE is for session modification and\n   Bob's\
    \ re-INVITE is for session refresh.  In this case, after the 491\n   responses,\
    \ Bob retries the re-INVITE for session refresh earlier than\n   Alice.  If Alice\
    \ was to retry her re-INVITE (that is, if she was not\n   the owner of Call-ID),\
    \ the request would refresh and modify the\n   session at the same time.  Then\
    \ Bob would know that he does not need\n   to retry his re-INVITE to refresh the\
    \ session.\n   In another instance, where two re-INVITEs for session modification\n\
    \   cross over, retrying the same re-INVITE again after a 491 by the\n   Call-ID\
    \ owner (the UA that retries its re-INVITE after the other UA)\n   may result\
    \ in unintended behavior, so the UA must decide if the retry\n   of the re-INVITE\
    \ is necessary.  (For example, when a call hold and an\n   addition of video media\
    \ cross over, mere retry of the re-INVITE at\n   the firing of the timer may result\
    \ in the situation where the video\n   is transmitted immediately after the holding\
    \ of the audio.  This\n   behavior is probably not intended by the users.)\n \
    \  Message Details\n   F1 INVITE Alice -> Bob\n   F2 180 Ringing Bob -> Alice\n\
    \   F3 200 OK Bob -> Alice\n   F4 ACK Alice -> Bob\n   F5 re-INVITE Alice -> Bob\n\
    \   INVITE sip:sip:bob@client.biloxi.example.com SIP/2.0\n   Via: SIP/2.0/UDP\
    \ client.atlanta.example.com:5060;branch=z9hG4bK74bf9\n   Max-Forwards: 70\n \
    \  From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n   To: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n\
    \   Call-ID: 3848276298220188511@atlanta.example.com\n   CSeq: 2 INVITE\n   Content-Length:\
    \ 147\n   v=0\n   o=alice 2890844526 2890844527 IN IP4 client.atlanta.example.com\n\
    \   s=-\n   c=IN IP4 192.0.2.101\n   t=0 0\n   m=audio 49172 RTP/AVP 0\n   a=rtpmap:0\
    \ PCMU/8000\n   a=sendonly\n   /* Some detailed messages are shown for the sequence\
    \ to illustrate\n      what sort of INVITE requests crossed over each other. \
    \ */\n   F6 re-INVITE Bob -> Alice\n   INVITE sip:alice@client.atlanta.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/UDP client.biloxi.example.com:5060;branch=z9hG4bKnashd7\n\
    \   Session-Expires: 300;refresher=uac\n   Supported: timer\n   Max-Forwards:\
    \ 70\n   From: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n   To: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n\
    \   Call-ID: 3848276298220188511@atlanta.example.com\n   CSeq: 1 INVITE\n   Content-Length:\
    \ 0\n   /* A re-INVITE request for a session refresh and another for a call\n\
    \      hold are sent at the same time.  */\n   F7 491 Request Pending Bob -> Alice\n\
    \   /* Since a re-INVITE is in progress, a 491 response is returned.  */\n   F8\
    \ 491 Request Pending Alice -> Bob\n   F9 ACK (INVITE) Alice -> Bob\n   F10 ACK\
    \ (INVITE) Bob -> Alice\n   F11 re-INVITE Bob -> Alice\n   INVITE sip:alice@client.atlanta.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/UDP client.biloxi.example.com:5060;branch=z9hG4bKnashd71\n\
    \   Session-Expires: 300;refresher=uac\n   Supported: timer\n   Max-Forwards:\
    \ 70\n   From: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n   To: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n\
    \   Call-ID: 3848276298220188511@atlanta.example.com\n   CSeq: 2 INVITE\n   Content-Type:\
    \ application/sdp\n   Content-Length: 133\n   v=0\n   o=bob 2890844527 2890844527\
    \ IN IP4 client.biloxi.example.com\n   s=-\n   c=IN IP4 192.0.2.201\n   t=0 0\n\
    \   m=audio 3456 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   /* Since Bob is not the\
    \ owner of the Call-ID, he sends a re-INVITE\n      again after 0.0-2.0 seconds.\
    \  */\n   F12 200 OK Alice -> Bob\n   F13 ACK Bob -> Alice\n   F14 re-INVITE Alice\
    \ -> Bob\n   INVITE sip:sip:bob@client.biloxi.example.com SIP/2.0\n   Via: SIP/2.0/UDP\
    \ client.atlanta.example.com:5060;branch=z9hG4bK74bf91\n   Max-Forwards: 70\n\
    \   From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n   To: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n\
    \   Call-ID: 3848276298220188511@atlanta.example.com\n   CSeq: 3 INVITE\n   Content-Length:\
    \ 147\n   v=0\n   o=alice 2890844526 2890844527 IN IP4 client.atlanta.example.com\n\
    \   s=-\n   c=IN IP4 192.0.2.101\n   t=0 0\n   m=audio 49172 RTP/AVP 0\n   a=rtpmap:0\
    \ PCMU/8000\n   a=sendonly\n   /* Since Alice is the owner of the Call-ID, Alice\
    \ sends a re-INVITE\n      again after 2.1-4.0 seconds.  */\n   F15 200 OK Bob\
    \ -> Alice\n   F16 ACK Alice -> Bob\n"
- title: 3.3.2.  UPDATE and re-INVITE Crossover
  contents:
  - "3.3.2.  UPDATE and re-INVITE Crossover\n   Alice                         Bob\n\
    \     |                            |\n     |         INVITE F1          |\n  \
    \   |--------------------------->|\n     |      180 Ringing F2        |\n    \
    \ |<---------------------------|\n     |                            |\n     |\
    \          200 OK F3         |\n     |<---------------------------|\n     |  \
    \         ACK F4           |\n     |--------------------------->|\n     |    \
    \ Both Way RTP Media     |\n     |<==========================>|\n     |      \
    \                      |\n     |  UPDATE F5    re-INVITE F6 |\n     |------------\
    \   -------------|\n     |            \\ /             |\n     |             X\
    \              |\n     |            / \\             |\n     |<-----------   ------------>|\n\
    \     |   491 F8        491 F7     |\n     |   (re-INVITE)   (UPDATE)   |\n  \
    \   |------------   -------------|\n     |            \\ /             |\n   \
    \  |             X              |\n     |            / \\             |\n    \
    \ |<-----------   ------------>|\n     |  ^       ACK F9   ^        |\n     |<-|----------------|--------|\n\
    \     |  |                |        |\n     |  |0-2.0 sec       |        |\n  \
    \   |  |                |        |\n     |  v  re-INVITE F10 |        |\n    \
    \ |<------------------|--------|\n     |     200 OK F11    |        |\n     |-------------------|------->|\n\
    \     |       ACK F12     |        |\n     |<------------------|--------|\n  \
    \   |                   |        |\n     |                   |2.1-4.0 sec\n  \
    \   |                   |        |\n     |      UPDATE F13   v        |\n    \
    \ |--------------------------->|\n     |         200 OK F14         |\n     |<---------------------------|\n\
    \     |                            |\n     |                            |\n  \
    \ In this scenario, the UPDATE contains an SDP offer; therefore, the\n   UPDATE\
    \ and re-INVITE are both responded to with 491 as in the case of\n   \"re-INVITE\
    \ crossover\".  When an UPDATE for session refresh that\n   doesn't contain a\
    \ session description and a re-INVITE cross each\n   other, both requests succeed\
    \ with 200 (491 means that a UA has a\n   pending request).  The same is true\
    \ for UPDATE crossover.  In the\n   former case where either UPDATE contains a\
    \ session description, the\n   requests fail with 491; in the latter cases, they\
    \ succeed with 200.\n   Note: A 491 response is sent because an SDP offer is pending,\
    \ and 491\n   is an error that is related to matters that impact the session\n\
    \   established by SIP.\n   Message Details\n   F1 INVITE Alice -> Bob\n   F2\
    \ 180 Ringing Bob -> Alice\n   F3 200 OK Bob -> Alice\n   F4 ACK Alice -> Bob\n\
    \   F5 UPDATE Alice -> Bob\n   UPDATE sip:sip:bob@client.biloxi.example.com SIP/2.0\n\
    \   Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bf9\n   Max-Forwards:\
    \ 70\n   From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n   To: Bob\
    \ <sip:bob@biloxi.example.com>;tag=8321234356\n   Call-ID: 3848276298220188511@atlanta.example.com\n\
    \   CSeq: 2 UPDATE\n   Content-Length: 147\n   v=0\n   o=alice 2890844526 2890844527\
    \ IN IP4 client.atlanta.example.com\n   s=-\n   c=IN IP4 192.0.2.101\n   t=0 0\n\
    \   m=audio 49172 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   a=sendonly\n   /* Some\
    \ detailed messages are shown for the sequence to illustrate\n      messages crossing\
    \ over each other.  */\n   F6 re-INVITE Bob -> Alice\n   INVITE sip:alice@client.atlanta.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/UDP client.biloxi.example.com:5060;branch=z9hG4bKnashd7\n\
    \   Session-Expires: 300;refresher=uac\n   Supported: timer\n   Max-Forwards:\
    \ 70\n   From: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n   To: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n\
    \   Call-ID: 3848276298220188511@atlanta.example.com\n   CSeq: 1 INVITE\n   Content-Type:\
    \ application/sdp\n   Content-Length: 133\n   v=0\n   o=bob 2890844527 2890844527\
    \ IN IP4 client.biloxi.example.com\n   s=-\n   c=IN IP4 192.0.2.201\n   t=0 0\n\
    \   m=audio 3456 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   /* This is a case where\
    \ a re-INVITE for a session refresh and an\n      UPDATE for a call hold are sent\
    \ at the same time.  */\n   F7 491 Request Pending (UPDATE) Bob -> Alice\n   /*\
    \ Since a re-INVITE is in process, a 491 response is returned.  */\n   F8 491\
    \ Request Pending (re-INVITE) Alice -> Bob\n   F9 ACK (re-INVITE) Alice -> Bob\n\
    \   F10 re-INVITE Bob -> Alice\n   INVITE sip:alice@client.atlanta.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/UDP client.biloxi.example.com:5060;branch=z9hG4bKnashd71\n\
    \   Session-Expires: 300;refresher=uac\n   Supported: timer\n   Max-Forwards:\
    \ 70\n   From: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n   To: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n\
    \   Call-ID: 3848276298220188511@atlanta.example.com\n   CSeq: 2 INVITE\n   Content-Type:\
    \ application/sdp\n   Content-Length: 133\n   v=0\n   o=bob 2890844527 2890844527\
    \ IN IP4 client.biloxi.example.com\n   s=-\n   c=IN IP4 192.0.2.201\n   t=0 0\n\
    \   m=audio 3456 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   /* Since Bob is not the\
    \ owner of the Call-ID, Bob sends an INVITE\n      again after 0.0-2.0 seconds.\
    \  */\n   F11 200 OK Alice -> Bob\n   F12 ACK Bob -> Alice\n   F13 UPDATE Alice\
    \ -> Bob\n   UPDATE sip:sip:bob@client.biloxi.example.com SIP/2.0\n   Via: SIP/2.0/UDP\
    \ client.atlanta.example.com:5060;branch=z9hG4bK74bf91\n   Max-Forwards: 70\n\
    \   From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n   To: Bob <sip:bob@biloxi.example.com>;tag=8321234356\n\
    \   Call-ID: 3848276298220188511@atlanta.example.com\n   CSeq: 3 UPDATE\n   Content-Length:\
    \ 147\n   v=0\n   o=alice 2890844526 2890844527 IN IP4 client.atlanta.example.com\n\
    \   s=-\n   c=IN IP4 192.0.2.101\n   t=0 0\n   m=audio 49172 RTP/AVP 0\n   a=rtpmap:0\
    \ PCMU/8000\n   a=sendonly\n   /* Since Alice is the owner of the Call-ID, Alice\
    \ sends the UPDATE\n      again after 2.1-4.0 seconds.  */\n   F14 200 OK Bob\
    \ -> Alice\n"
- title: 3.3.3.  Receiving REFER (Established State) While in the Mortal State
  contents:
  - "3.3.3.  Receiving REFER (Established State) While in the Mortal State\n    State\
    \  Alice                  Bob  State\n           |                        |\n\
    \           |       INVITE F1        |\n           |----------------------->|\n\
    \      Pre  |    180 Ringing F2      |  Pre\n           |<-----------------------|\n\
    \      Ear  |                        |  Ear\n           |       200 OK F3    \
    \    |\n           |<-----------------------|\n     Mora  |         ACK F4   \
    \      |  Mora\n           |----------------------->|\n      Est  |   Both Way\
    \ RTP Media   |  Est\n           |<======================>|\n           |    \
    \                    |\n           | BYE F5        REFER F6 |\n           |---------\
    \     ----------|\n     Mort  |          \\ /           |\n           |      \
    \     X            |\n           |          / \\           |\n   *race*  |<--------\
    \     --------->|\n           |                        |  Mort\n           | 481\
    \ F8         200 F7  |\n           | (REFER)        (BYE)   |\n           |---------\
    \     ----------|\n           |          \\ /         ^ |\n           |      \
    \     X          | |\n           |          / \\         | |\n           |<--------\
    \     --------->|\n           | ^                    | |\n           | | Timer\
    \ K            | |\n           | V            Timer J | |\n     Morg  |      \
    \                V |\n           |                        |  Morg\n          \
    \ |                        |\n   This scenario illustrates the race condition\
    \ that occurs when the UAS\n   receives an Established message, REFER, while in\
    \ the Mortal state.\n   Bob sends a REFER, and Alice sends a BYE at the same time.\
    \  Bob sends\n   the REFER in the same dialog.  Alice's dialog state moves to\
    \ the\n   Mortal state at the point of sending BYE.  In the Mortal state, the\n\
    \   UA possesses dialog information for an internal process but the\n   dialog\
    \ shouldn't exist outwardly.  Therefore, the UA sends an error\n   response to\
    \ the REFER, which is transmitted as a mid-dialog request.\n   So Alice, in the\
    \ Mortal state, sends an error response to the REFER.\n   However, Bob has already\
    \ started the SUBSCRIBE usage with REFER, so\n   the dialog continues until the\
    \ SUBSCRIBE usage terminates, even\n   though the INVITE dialog usage terminates\
    \ by receiving BYE.  Bob's\n   behavior in this case needs to follow the procedures\
    \ in RFC 5057 [6].\n   Message Details\n   F1 INVITE Alice -> Bob\n   F2 180 Ringing\
    \ Bob -> Alice\n   F3 200 OK Bob -> Alice\n   F4 ACK Alice -> Bob\n   F5 BYE Alice\
    \ -> Bob\n   /* Alice sends a BYE request and terminates the session, and\n  \
    \    transitions from the Confirmed state to the Terminated state.  */\n   F6\
    \ REFER Bob -> Alice\n   /* Alice sends a BYE, and Bob sends a REFER at the same\
    \ time.  Bob\n      sends the REFER on the INVITE dialog.  The dialog state\n\
    \      transitions to the Mortal state at the moment Alice sends the BYE,\n  \
    \    but Bob doesn't know this until he receives the BYE.  A race\n      condition\
    \ occurs.  */\n   F7 200 OK (BYE) Bob -> Alice\n   F8 481 Call/Transaction Does\
    \ Not Exist (REFER) Alice -> Bob\n   /* Alice in the Mortal state sends a 481\
    \ to the REFER.  */\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This document contains clarifications of behavior\
    \ specified in RFC\n   3261 [1], RFC 3264 [2], and RFC 3515 [4].  The security\n\
    \   considerations of those documents continue to apply after the\n   application\
    \ of these clarifications.\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   The authors would like to thank Robert Sparks, Dean\
    \ Willis, Cullen\n   Jennings, James M. Polk, Gonzalo Camarillo, Kenichi Ogami,\
    \ Akihiro\n   Shimizu, Mayumi Munakata, Yasunori Inagaki, Tadaatsu Kidokoro,\n\
    \   Kenichi Hiragi, Dale Worley, Vijay K. Gurbani, and Anders Kristensen\n   for\
    \ their comments on this document.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [1]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston, A.,\n        Peterson, J., Sparks, R., Handley, M., and E. Schooler,\
    \ \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model with\n        Session\
    \ Description Protocol (SDP)\", RFC 3264, June 2002.\n   [3]  Bradner, S., \"\
    Key words for use in RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [4]  Sparks, R., \"The Session Initiation Protocol (SIP)\
    \ Refer\n        Method\", RFC 3515, April 2003.\n   [5]  Rosenberg, J. and H.\
    \ Schulzrinne, \"Reliability of Provisional\n        Responses in Session Initiation\
    \ Protocol (SIP)\", RFC 3262,\n        June 2002.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [6]  Sparks, R., \"Multiple Dialog Usages in\
    \ the Session Initiation\n        Protocol\", RFC 5057, November 2007.\n   [7]\
    \  Sparks, R., \"Correct transaction handling for 200 responses to\n        Session\
    \ Initiation Protocol INVITE requests\", Work in Progress,\n        July 2008.\n"
- title: Appendix A.  BYE in the Early Dialog
  contents:
  - "Appendix A.  BYE in the Early Dialog\n   This section, related to Section 3.1.3,\
    \ explains why BYE is not\n   recommended in the Early state, illustrating a case\
    \ in which a BYE in\n   the early dialog triggers confusion.\n   Alice       \
    \     Proxy               Bob   Carol\n     |                |               \
    \   |      |\n     |   INVITE F1    |                  |      |\n     |--------------->|\
    \    INVITE F2     |      |\n     |     100 F3     |----------------->|      |\n\
    \     |<---------------| 180(To tag=A) F4 |      |\n     |    180(A) F5   |<-----------------|\
    \      |\n     |<---------------|                  |      |\n     |          \
    \      |       INVITE(Fork) F6   |\n     |                |------------------------>|\n\
    \     |                |                100 F7   |\n     |    BYE(A) F8   |<------------------------|\n\
    \     |--------------->|    BYE(A) F9     |      |\n     |                |----------------->|\
    \      |\n     |                |  200(A,BYE) F10  |      |\n     | 200(A,BYE)\
    \ F11 |<-----------------|      |\n     |<---------------|  487(A,INV) F12  |\
    \      |\n     |                |<-----------------|      |\n     |          \
    \      |    ACK(A) F13    |      |\n     |                |----------------->|\
    \      |\n     |                |                  |      |\n     |          \
    \      |                         |\n     |                |     200(To tag=B)\
    \ F13   |\n     |   200(B) F14   |<------------------------|\n     |<---------------|\
    \                         |\n     |   ACK(B) F15   |                         |\n\
    \     |--------------->|            ACK(B) F16   |\n     |                |------------------------>|\n\
    \     |   BYE(B) F17   |                         |\n     |--------------->|  \
    \          BYE(B) F18   |\n     |                |------------------------>|\n\
    \     |                |            200(B) F19   |\n     |   200(B) F20   |<------------------------|\n\
    \     |<---------------|                         |\n     |                |  \
    \                       |\n     |                |                         |\n\
    \   Care is advised in sending BYE in the Early state when forking by a\n   proxy\
    \ is expected.  In this example, the BYE request progresses\n   normally, and\
    \ it succeeds in correctly terminating the dialog with\n   Bob.  After Bob terminates\
    \ the dialog by receiving the BYE, he sends\n   a 487 to the ini-INVITE.  According\
    \ to Section 15.1.2 of RFC 3261\n   [1], it is RECOMMENDED for the UAS to generate\
    \ a 487 to any pending\n   requests after receiving a BYE.  In this example, Bob\
    \ sends a 487 to\n   the ini-INVITE since he receives the BYE while the ini-INVITE\
    \ is in\n   pending state.\n   However, Alice receives a final response to the\
    \ INVITE (a 200 from\n   Carol) even though she has successfully terminated the\
    \ dialog with\n   Bob.  This means that, regardless of the success/failure of\
    \ the BYE\n   in the Early state, Alice MUST be prepared for the establishment\
    \ of a\n   new dialog until receiving the final response for the INVITE and\n\
    \   terminating the INVITE transaction.\n   It is not illegal to send a BYE in\
    \ the Early state to terminate a\n   specific early dialog -- it may satisfy the\
    \ intent of some callers.\n   However, the choice of BYE or CANCEL in the Early\
    \ state must be made\n   carefully.  CANCEL is appropriate when the goal is to\
    \ abandon the\n   call attempt entirely.  BYE is appropriate when the goal is\
    \ to\n   abandon a particular early dialog while allowing the call to be\n   completed\
    \ with other destinations.  When using either BYE or CANCEL,\n   the UAC must\
    \ be prepared for the possibility that a call may still be\n   established to\
    \ one or more destinations.\n"
- title: Appendix B.  BYE Request Overlapping with re-INVITE
  contents:
  - "Appendix B.  BYE Request Overlapping with re-INVITE\n     UAC               \
    \     UAS\n      |                      |\n   The session has been already established\n\
    \     ==========================\n      |   re-INVITE F1       |\n      |--------------------->|\n\
    \      |   BYE F2             |\n      |--------------------->|\n      |   200(BYE)\
    \ F3        |\n      |<---------------------|\n      |   INVITE F4(=F1)     |\n\
    \      |--------------------->|\n      |                      |\n      |     \
    \                 |\n   This case could look similar to the one in Section 3.2.3.\
    \  However,\n   it is not a race condition.  This case describes the behavior\
    \ when\n   there is no response to the INVITE for some reason.  The appendix\n\
    \   explains the behavior in this case and its rationale, since this case\n  \
    \ is likely to cause confusion.\n   First of all, it is important not to confuse\
    \ the behavior of the\n   transaction layer and that of the dialog layer.  RFC\
    \ 3261 [1] details\n   the transaction layer behavior.  The dialog layer behavior\
    \ is\n   explained in this document.  It has to be noted that these two\n   behaviors\
    \ are independent of each other, even though both layers may\n   be triggered\
    \ to change their states by sending or receiving the same\n   SIP messages.  (A\
    \ dialog can be terminated even though a transaction\n   still remains, and vice\
    \ versa.)\n   In the sequence above, there is no response to F1, and F2 (BYE)\
    \ is\n   sent immediately after F1.  (F1 is a mid-dialog request.  If F1 was\n\
    \   an ini-INVITE, BYE could not be sent before the UAC received a\n   provisional\
    \ response to the request with a To tag.)\n   Below is a figure that illustrates\
    \ the UAC's dialog state and the\n   transaction state.\n   BYE   INV  dialog\
    \ UAC                    UAS\n                :     |                      |\n\
    \                :     |                      |\n                |     |   re-INVITE\
    \ F1       |\n          o     |     |--------------------->|\n          |    \
    \ |     |   BYE F2             |\n    o     |  (Mortal) |--------------------->|\n\
    \    |     |     |     |   200(BYE) F3        |\n    |     |     |     |<---------------------|\n\
    \    |     |     |     |   INVITE F4(=F1)     |\n    |     |     |     |--------------------->|\n\
    \    |     |     |     |   481(INV) F5        |\n    |     |     |     |<---------------------|\n\
    \    |     |     |     |   ACK(INV) F6        |\n    |     |     |     |--------------------->|\n\
    \    |     |     |     |                      |\n    o     |     o     |     \
    \                 |\n          |           |                      |\n        \
    \  o           |                      |\n                      |             \
    \         |\n   For the UAC, the INVITE client transaction begins at the point\
    \ F1 is\n   sent.  The UAC sends BYE (F2) immediately after F1.  This is a\n \
    \  legitimate behavior.  (Usually, the usage of each SIP method is\n   independent,\
    \ for BYE and others.  However, it should be noted that it\n   is prohibited to\
    \ send a request with an SDP offer while the previous\n   offer is in progress.)\n\
    \   After that, F2 triggers the BYE client transaction.  At the same\n   time,\
    \ the dialog state transitions to the Mortal state and then only\n   a BYE or\
    \ a response to a BYE can be handled.\n   It is permitted to send F4 (a retransmission\
    \ of INVITE) in the Mortal\n   state because the retransmission of F1 is handled\
    \ by the transaction\n   layer, and the INVITE transaction has not yet transitioned\
    \ to the\n   Terminated state.  As is mentioned above, the dialog and the\n  \
    \ transaction behave independently each other.  Therefore, the\n   transaction\
    \ handling has to be continued even though the dialog has\n   moved to the Terminated\
    \ state.\n   Note: As noted in Section 3.1.4, implementation issues are outside\n\
    \   the scope of this document, but the following tip is provided for\n   avoiding\
    \ race conditions of this type.  The UAC can delay sending BYE\n   F2 until the\
    \ re-INVITE transaction F1 completes.  Implementors can\n   decouple the actions\
    \ of the user (e.g., hanging up) from the actions\n   of the protocol (the sending\
    \ of BYE F2), so that the UA can behave\n   like this.  In this case, it is the\
    \ implementor's choice as to how\n   long to wait.  In most cases, such an implementation\
    \ may be useful to\n   prevent this case.  This document expresses no preference\
    \ about\n   whether or not they should wait for an ACK to be delivered.  After\n\
    \   considering the impact on user experience, implementors should decide\n  \
    \ whether or not to wait for a while, because the user experience\n   depends\
    \ on the implementation and has no direct bearing on protocol\n   behavior.\n\
    \   Next, the UAS's state is shown below.\n   UAC                    UAS dialog\
    \  INV   BYE\n    |                      |     :\n    |                      |\
    \     :\n    |   re-INVITE F1       |     |\n    |-------------->x      |    \
    \ |\n    |   BYE F2             |     |\n    |--------------------->|     |  \
    \         o\n    |   200(BYE) F3        |  (Mortal)       |\n    |<---------------------|\
    \     |           |<-Start Timer J\n    |   INVITE F4(=F1)     |     |       \
    \    |\n    |--------------------->|     |     o     |\n    |   4xx/5xx(INV) F5\
    \    |     o     |     o\n    |<---------------------|           |\n    |   ACK(INV)\
    \ F6        |           |\n    |--------------------->|           |<-Start Timer\
    \ I\n    |                      |           |\n    |                      |  \
    \         |\n    |                      |           o\n    |                 \
    \     |\n   For the UAS, it can be considered that packet F1 is lost or delayed\n\
    \   (here, the behavior is explained for the case that the UAS receives\n   F2\
    \ BYE before F1 INVITE).  Therefore, F2 triggers the BYE transaction\n   for the\
    \ UAS, and simultaneously the dialog moves to the Mortal state.\n   Then, upon\
    \ the reception of F4, the INVITE server transaction begins.\n   (It is permitted\
    \ to start the INVITE server transaction in the Mortal\n   state.  The INVITE\
    \ server transaction begins to handle the received\n   SIP request regardless\
    \ of the dialog state.)  The UAS's TU sends an\n   appropriate error response\
    \ for the F4 INVITE, either 481 (because the\n   TU knows that the dialog that\
    \ matches the INVITE is in the Terminated\n   state) or 500 (because the re-sent\
    \ F4 has an out-of-order CSeq).  (It\n   is mentioned above that INVITE message\
    \ F4 (and F1) is a mid-dialog\n   request.  Mid-dialog requests have a To tag.\
    \  It should be noted that\n   the UAS's TU does not begin a new dialog upon the\
    \ reception of INVITE\n   with a To tag.)\n"
- title: Appendix C.  UA's Behavior for CANCEL
  contents:
  - "Appendix C.  UA's Behavior for CANCEL\n   This section explains the CANCEL behaviors\
    \ that indirectly impact the\n   dialog state transition in the Early state. \
    \ CANCEL does not have any\n   influence on the UAC's dialog state.  However,\
    \ the request has an\n   indirect influence on the dialog state transition because\
    \ it has a\n   significant effect on ini-INVITE.  For the UAS, the CANCEL request\n\
    \   has more direct effects on the dialog than on the sending of a CANCEL\n  \
    \ by the UAC, because it can be a trigger to send the 487 response.\n   Figure\
    \ 3 explains the UAS's behavior in the Early state.  This flow\n   diagram is\
    \ only an explanatory figure, and the actual dialog state\n   transition is as\
    \ illustrated in Figures 1 and 2.\n   In the flow, full lines are related to dialog\
    \ state transition, and\n   dotted lines are involved with CANCEL. (r) represents\
    \ the reception\n   of signaling, and (s) means sending.  There is no dialog state\
    \ for\n   CANCEL, but here the Cancelled state is handled virtually just for\n\
    \   the ease of understanding of the UA's behavior when it sends and\n   receives\
    \ CANCEL.\n                  +-------------+\n                  | Preparative\
    \ |---+\n                  +-------------+   |\n                    :   | 1xx(s)\
    \    |\n                    :   V           |\n                    : +-------+\
    \     | 2xx(s)\n                    : | Early |-----+------+\n               \
    \     : +-------+            |\n                    :     :                V\n\
    \                    :     :           +-----------+\n                    :  \
    \   :           | Confirmed |<...\n                    :.....:           +-----------+\
    \   :\n                       :                   |  :       :\n             \
    \          :             BYE(r)|  :       :\n                       : CANCEL(r)\
    \         |  :.......:\n                       V                   |    CANCEL(r)\n\
    \                   .............           |\n                   : Cancelled\
    \ :           |\n                   :...........:           |\n              \
    \        | 487(s)             |\n                      |                    |\n\
    \                      +--------------------+\n                              \
    \   |\n                                 V\n                           +------------+\n\
    \                           | Terminated |\n                           +------------+\n\
    \                   Figure 3: CANCEL flow diagram for UAS\n   There are two behaviors\
    \ for the UAS depending on the state when it\n   receives a CANCEL.\n   The first\
    \ behavior is when the UAS receives a CANCEL in the Early\n   state.  In this\
    \ case, the UAS immediately sends a 487 for the INVITE,\n   and the dialog transitions\
    \ to the Terminated state.\n   The other is the case in which the UAS receives\
    \ a CANCEL while in the\n   Confirmed state.  In this case, the dialog state transition\
    \ does not\n   occur, because the UAS has already sent a final response to the\n\
    \   INVITE to which the CANCEL is targeted.  (Note that, because of the\n   UAC's\
    \ behavior, a UAS that receives a CANCEL in the Confirmed state\n   can expect\
    \ to receive a BYE immediately and move to the Terminated\n   state.  However,\
    \ the UAS's state does not transition until it\n   actually receives a BYE.)\n"
- title: Appendix D.  Notes on the Request in the Mortal State
  contents:
  - "Appendix D.  Notes on the Request in the Mortal State\n   This section describes\
    \ the UA's behavior in the Mortal state, which\n   needs careful attention.  Note\
    \ that every transaction completes\n   independently of others, following the\
    \ principle of RFC 3261 [1].\n   In the Mortal state, only a BYE can be accepted,\
    \ and the other\n   messages in the INVITE dialog usage are responded to with\
    \ an error.\n   However, sending of ACK and the authentication procedure for BYE\
    \ are\n   conducted in this state.  (The handling of messages concerning\n   multiple\
    \ dialog usages is out of the scope of this document.  Refer\n   to RFC 5057 [6]\
    \ for further information.)\n   ACK for error responses is handled by the transaction\
    \ layer, so the\n   handling is not related to the dialog state.  Unlike the ACK\
    \ for\n   error responses, ACK for 2xx responses is a request newly generated\n\
    \   by a TU.  However, the ACK for 2xx and the ACK for error responses\n   are\
    \ both part of the INVITE transaction, even though their handling\n   differs\
    \ (Section 17.1.1.1, RFC 3261 [1]).  Therefore, the INVITE\n   transaction is\
    \ completed by the three-way handshake, which includes\n   ACK, even in the Mortal\
    \ state.\n   Considering actual implementation, the UA needs to keep the INVITE\n\
    \   dialog usage until the Mortal state finishes, so that it is able to\n   send\
    \ ACK for a 2xx response in the Mortal state.  If a 2xx to INVITE\n   is received\
    \ in the Mortal state, the duration of the INVITE dialog\n   usage will be extended\
    \ to 64*T1 seconds after the receipt of the 2xx,\n   to cope with the possible\
    \ 2xx retransmission.  (The duration of the\n   2xx retransmission is 64*T1, so\
    \ the UA needs to be prepared to handle\n   the retransmission for this duration.)\
    \  However, the UA shall send an\n   error response to other requests, since the\
    \ INVITE dialog usage in\n   the Mortal state is kept only for the sending of\
    \ ACK for 2xx.\n   The BYE authentication procedure shall be processed in the\
    \ Mortal\n   state.  When authentication is requested by a 401 or 407 response,\n\
    \   the UAC resends BYE with appropriate credentials.  Also, the UAS\n   handles\
    \ the retransmission of the BYE for which it requested\n   authentication.\n"
- title: Appendix E.  Forking and Receiving New To Tags
  contents:
  - "Appendix E.  Forking and Receiving New To Tags\n   This section details the behavior\
    \ of the TU when it receives multiple\n   responses with different To tags to\
    \ the ini-INVITE.\n   When an INVITE is forked inside a SIP network, there is\
    \ a possibility\n   that the TU receives multiple responses to the ini-INVITE\
    \ with\n   differing To tags (see Sections 12.1, 13.1, 13.2.2.4, 16.7, 19.3,\n\
    \   etc., of RFC 3261 [1]).  If the TU receives multiple 1xx responses\n   with\
    \ different To tags, the original DSM forks and a new DSM instance\n   is created.\
    \  As a consequence, multiple early dialogs are generated.\n   If one of the multiple\
    \ early dialogs receives a 2xx response, it\n   naturally transitions to the Confirmed\
    \ state.  No DSM state\n   transition occurs for the other early dialogs, and\
    \ their sessions\n   (early media) terminate.  The TU of the UAC terminates the\
    \ INVITE\n   transaction after 64*T1 seconds, starting at the point of receiving\n\
    \   the first 2xx response.  Moreover, all mortal early dialogs that do\n   not\
    \ transition to the Established state are terminated (see Section\n   13.2.2.4\
    \ of RFC 3261 [1]).  By \"mortal early dialog\", we mean any\n   early dialog\
    \ that the UA will terminate when another early dialog is\n   confirmed.\n   Below\
    \ is an example sequence in which two 180 responses with\n   different To tags\
    \ are received, and then a 200 response for one of\n   the early dialogs (dialog\
    \ A) is received.  Dotted lines (..) in the\n   sequences are auxiliary lines\
    \ to represent the influence on dialog B.\n                                  \
    \ UAC\n                    dialog(A)       |    INVITE F1\n                  \
    \   Pre o          |------------------------->\n                         |   \
    \       |    100 F2\n                         |          |<-------------------------\n\
    \                         |          |    180(To tag=A) F3\n                 \
    \    Ear |          |<-------------------------\n          dialog(B)      |  \
    \        |\n      forked new DSM     |          |    180(To tag=B) F4\n      \
    \    Ear o..........|..........|<-------------------------\n              |  \
    \        |          |\n              |          |          |    200(A) F5\n  \
    \ terminate->|.....Mora |..........|<-------------------------\n     early   \
    \ |          | ^        |    ACK(A) F6\n      media   |      Est | |        |------------------------->\n\
    \              |          | |        |\n              |          | |64*T1   |\n\
    \              |          | |(13.2.2.4 of RFC 3261 [1])\n              |     \
    \     | |        |\n              |          | |        |\n              |   \
    \       | V        |\n              o..........|.(terminate INVITE transaction)\n\
    \          terminated     |          |\n           dialog(B)     |          |\n\
    \                         |          |\n         Figure 4: Receiving 1xx responses\
    \ with different To tags\n   The figure above shows the DSM inside a SIP TU. \
    \ Triggered by the\n   reception of a provisional response with a different To\
    \ tag (F4\n   180(To tag=B)), the DSM forks and the early dialog B is generated.\n\
    \   64*T1 seconds later, dialog A receives a 200 OK response.  Dialog B,\n   which\
    \ does not transition to the Established state, terminates.\n   Next, the behavior\
    \ of a TU that receives multiple 2xx responses with\n   different To tags is explained.\
    \  When a mortal early dialog that did\n   not match the first 2xx response that\
    \ the TU received receives\n   another 2xx response that matches its To tag before\
    \ the 64*T1 INVITE\n   transaction timeout, its DSM transitions to the Confirmed\
    \ state.\n   However, the session on the mortal early dialog is terminated when\n\
    \   the TU receives the first 2xx to establish a dialog, so no session is\n  \
    \ established for the mortal early dialog.  Therefore, when the mortal\n   early\
    \ dialog receives a 2xx response, the TU sends an ACK and,\n   immediately after,\
    \ the TU usually sends a BYE to terminate the DSM.\n   (In special cases, e.g.,\
    \ if a UA intends to establish multiple\n   dialogs, the TU may not send the BYE.)\n\
    \   The handling of the second early dialog after receiving the 200 for\n   the\
    \ first dialog is quite appropriate for a typical device, such as a\n   phone.\
    \  It is important to note that what is being shown is a typical\n   useful action\
    \ and not the only valid one.  Some devices might want to\n   handle things differently.\
    \  For instance, a conference focus that has\n   sent out an INVITE that forks\
    \ may want to accept and mix all the\n   dialogs it gets.  In that case, no early\
    \ dialog is treated as mortal.\n   Below is an example sequence in which two 180\
    \ responses with a\n   different To tag are received and then a 200 response for\
    \ each of the\n   early dialogs is received.\n                               \
    \    UAC\n                    dialog(A)       |    INVITE F1\n               \
    \      Pre o          |----------------------->\n                         |  \
    \        |    100 F2\n                         |          |<-----------------------\n\
    \                         |          |    180(To tag=A) F3\n         dialog(B)\
    \   Ear |          |<-----------------------\n     forked new DSM      |     \
    \     |    180(To tag=B) F4\n          Ear o..........|..........|<-----------------------\n\
    \              |          |          |\n              |          |          |\
    \    200(A) F5\n   terminate->|.....Mora |..........|<-----------------------\n\
    \     early    |          | ^        |    ACK(A) F6\n      media   |      Est\
    \ | |        |----------------------->\n              |          | |64*T1   |\n\
    \              |          | |        |    200(B) F7\n         Mora |..........|.|........|<-----------------------\n\
    \              |          | |        |    ACK(B) F8\n          Est |..........|.|........|----------------------->\n\
    \              |          | |        |    BYE(B) F9\n         Mort |..........|.|........|----------------------->\n\
    \          ^   |          | |        |    200(B) F10\n          |   |        \
    \  | |        |<-----------------------\n          |Timer K       | |        |\n\
    \          |   |          | V        |\n          |   |          | (terminate\
    \ INVITE transaction)\n          V   |          |          |\n         Morg o\
    \          |          |\n                         |          |\n     Figure 5:\
    \ Receiving 1xx and 2xx responses with different To tags\n   Below is an example\
    \ sequence when a TU receives multiple 200\n   responses with different To tags\
    \ before the 64*T1 timeout of the\n   INVITE transaction in the absence of a provisional\
    \ response.  Even\n   though a TU does not receive a provisional response, the\
    \ TU needs to\n   process the 2xx responses (see Section 13.2.2.4 of RFC 3261\
    \ [1]).  In\n   that case, the DSM state is forked at the Confirmed state, and\
    \ then\n   the TU sends an ACK for the 2xx response and, immediately after, the\n\
    \   TU usually sends a BYE.  (In special cases, e.g., if a UA intends to\n   establish\
    \ multiple dialogs, the TU may not send the BYE.)\n                          \
    \       UAC\n                  dialog(A)       |    INVITE F1\n              \
    \     Pre o          |----------------------->\n                       |     \
    \     |    100 F2\n                       |          |<-----------------------\n\
    \                       |          |    180(To tag=A) F3\n                   Ear\
    \ |          |<-----------------------\n                       |          |\n\
    \                       |          |    200(A) F4\n                  Mora |..........|<-----------------------\n\
    \                       | ^        |    ACK(A) F5\n                   Est | |\
    \        |----------------------->\n                       | |        |\n    \
    \   dialog(B)       | |64*T1   |\n   forked new DSM      | |        |    200(To\
    \ tag=B) F6\n       Mora o..........|.|........|<-----------------------\n   \
    \         |          | |        |    ACK(B) F7\n        Est |..........|.|........|----------------------->\n\
    \            |          | |        |    BYE(B) F8\n       Mort |..........|.|........|----------------------->\n\
    \        ^   |          | |        |    200(B) F9\n        |   |          | |\
    \        |<-----------------------\n        |   |          | V        |\n    \
    \    |Timer K       | (terminate INVITE transaction)\n        |   |          |\
    \          |\n        V   |          |          |\n       Morg o          |  \
    \        |\n                       |          |\n         Figure 6: Receiving\
    \ 2xx responses with different To tags\n   Below is an example sequence in which\
    \ the option tag 100rel (RFC 3262\n   [5]) is required by a 180.\n   If a forking\
    \ proxy supports 100rel, it transparently transmits to the\n   UAC a provisional\
    \ response that contains a Require header with the\n   value of 100rel.  Upon\
    \ receiving a provisional response with 100rel,\n   the UAC establishes the early\
    \ dialog (B) and sends PRACK (Provisional\n   Response Acknowledgement).  (Here,\
    \ also, every transaction completes\n   independently of others.)\n   As in Figure\
    \ 4, the early dialog (B) terminates at the same time the\n   INVITE transaction\
    \ terminates.  In the case where a proxy does not\n   support 100rel, the provisional\
    \ response will be handled in the usual\n   way (a provisional response with 100rel\
    \ is discarded by the proxy,\n   not to be transmitted to the UAC).\n        \
    \                        UAC\n                 dialog(A)       |    INVITE F1\n\
    \                  Pre o          |------------------------->\n              \
    \        |          |    100 F2\n                      |          |<-------------------------\n\
    \                      |          |    180(To tag=A) F3\n                  Ear\
    \ |          |<-------------------------\n                      |          | \
    \   200(A) F4\n                 Mora |..........|<-------------------------\n\
    \                      | ^        |    ACK(A) F5\n                  Est | |  \
    \      |------------------------->\n       dialog(B)      | |        |\n   forked\
    \ new DSM     | |        |    180(To tag=B) w/100rel F6\n       Ear o..........|.|........|<-------------------------\n\
    \           |          | |        |    PRACK(B) F7\n           |          | |\
    \        |------------------------->\n           |          | |        |    200(B,PRACK)\
    \ F8\n           |          | |        |<-------------------------\n         \
    \  |          | |64*T1   |\n           |          | |(13.2.2.4 of RFC 3261 [1])\n\
    \           |          | |        |\n           |          | |        |\n    \
    \       |          | |        |\n           |          | V        |\n        \
    \   o..........|.(terminate INVITE transaction)\n       terminated     |     \
    \     |\n        dialog(B)     |          |\n                      |         \
    \ |\n         Figure 7: Receiving 1xx responses with different To tags\n   when\
    \ using the mechanism for reliable provisional responses (100rel)\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Miki Hasebe\n   NTT-east Corporation\n   19-2 Nishi-shinjuku\
    \ 3-chome\n   Shinjuku-ku, Tokyo  163-8019\n   JP\n   EMail: hasebe.miki@east.ntt.co.jp\n\
    \   Jun Koshiko\n   NTT-east Corporation\n   19-2 Nishi-shinjuku 3-chome\n   Shinjuku-ku,\
    \ Tokyo  163-8019\n   JP\n   EMail: j.koshiko@east.ntt.co.jp\n   Yasushi Suzuki\n\
    \   NTT Corporation\n   9-11, Midori-cho 3-Chome\n   Musashino-shi, Tokyo  180-8585\n\
    \   JP\n   EMail: suzuki.yasushi@lab.ntt.co.jp\n   Tomoyuki Yoshikawa\n   NTT-east\
    \ Corporation\n   19-2 Nishi-shinjuku 3-chome\n   Shinjuku-ku, Tokyo  163-8019\n\
    \   JP\n   EMail: tomoyuki.yoshikawa@east.ntt.co.jp\n   Paul H. Kyzivat\n   Cisco\
    \ Systems, Inc.\n   1414 Massachusetts Avenue\n   Boxborough, MA  01719\n   US\n\
    \   EMail: pkyzivat@cisco.com\n"
