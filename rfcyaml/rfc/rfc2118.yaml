- title: __initial_text__
  contents:
  - '          Microsoft Point-To-Point Compression (MPPC) Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method\
    \ for\n   transporting multi-protocol datagrams over point-to-point links.\n \
    \  The PPP Compression Control Protocol [2] provides a method to\n   negotiate\
    \ and utilize compression protocols over PPP encapsulated\n   links.\n   This\
    \ document describes the use of the Microsoft Point to Point\n   Compression protocol\
    \ (also referred to as MPPC in this document) for\n   compressing PPP encapsulated\
    \ packets.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.     Introduction ..........................................\
    \    2\n      1.1       Licensing .......................................    2\n\
    \      1.2.      Specification of Requirements ...................    2\n   2.\
    \     Configuration Option Format ...........................    3\n   3.    \
    \ MPPC Packets ..........................................    4\n      3.1    \
    \   Packet Format....................................    5\n   4. Description\
    \ of Compressor and Encoding ....................    6\n      4.1       Literal\
    \ Encoding ................................    7\n      4.2       Copy Tuple Encoding\
    \ .............................    7\n          4.2.1     Offset Encoding .............................\
    \    7\n          4.2.2     Length-of-Match Encoding ....................    7\n\
    \      4.3       Synchronization .................................    8\n   SECURITY\
    \ CONSIDERATIONS ......................................    8\n   REFERENCES ...................................................\
    \    9\n   ACKNOWLEDGEMENTS .............................................    9\n\
    \   CHAIR'S ADDRESS    ...........................................    9\n   AUTHORS'\
    \ ADDRESS .............................................    9\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Microsoft Point to Point Compression scheme is a means\
    \ of\n   representing arbitrary Point to Point Protocol (PPP) packets in a\n \
    \  compressed form. The MPPC algorithm is designed to optimize processor\n   utilization\
    \ and bandwidth utilization in order to support large\n   number of simultaneous\
    \ connections. The MPPC algorithm is also\n   optimized to work efficiently in\
    \ typical PPP scenarios\n   (1500 byte MTU, etc.).\n   The MPPC algorithm uses\
    \ an LZ [3] based algorithm with a sliding\n   window history buffer.\n   The\
    \ MPPC algorithm keeps a continous history so that after 8192 bytes\n   of data\
    \ has been transmitted compressed there is always 8192 bytes of\n   history to\
    \ use for compressing, except when the history is flushed.\n"
- title: 1.1.  Licensing
  contents:
  - "1.1.  Licensing\n   MPPC can only be used in products that implement the Point\
    \ to Point\n   Protocol AND for the sole purpose of interoperating with other\
    \ MPPC\n   and Point to Point Protocol implementations.\n   Source and object\
    \ licenses are available on a non-discriminatory\n   basis from Stac Electronics.\
    \ Please contact:\n         Cheryl Poland\n         Stac Electronics\n       \
    \  12636 High Bluff Drive,\n         San Deigo, CA 92130\n         Phone: (619)794-4534\n\
    \         Email: cherylp@stac.com\n"
- title: 1.2.  Specification of Requirements
  contents:
  - "1.2.  Specification of Requirements\n   In this document, several words are used\
    \ to signify the requirements\n   of the specification.  These words are often\
    \ capitalized.\n   MUST      This word, or the adjective \"required\", means that\
    \ the\n             definition is an absolute requirement of the specification.\n\
    \   MUST NOT  This phrase means that the definition is an absolute\n         \
    \    prohibition of the specification.\n   SHOULD    This word, or the adjective\
    \ \"recommended\", means that there\n             may exist valid reasons in particular\
    \ circumstances to\n             ignore this item, but the full implications MUST\
    \ be\n             understood and carefully weighed before choosing a\n      \
    \       different course.\n   MAY       This word, or the adjective \"optional\"\
    , means that this\n             item is one of an allowed set of alternatives.\
    \  An\n             implementation which does not include this option MUST be\n\
    \             prepared to interoperate with another implementation which\n   \
    \          does include the option.\n"
- title: 2.  Configuration Option Format
  contents:
  - "2.  Configuration Option Format\n   Description\n      The CCP Configuration\
    \ Option negotiates the use of MPPC on the\n      link.  By default or ultimate\
    \ disagreement, no compression is\n      used.\n   A summary of the CCP Configuration\
    \ Option format is shown below.\n   The fields are transmitted from left to right.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |        Supported Bits         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Supported Bits          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      18\n   Length\n      6\n   Supported Bits\n      This field is\
    \ 4 octets, most significant octet first. The least\n      significant bit in\
    \ the least significant octet set to 1 indicates\n      desire to negotiate MPPC.\n\
    \      All other bits MUST be set to 0.\n"
- title: 3.  MPPC Packets
  contents:
  - "3.  MPPC Packets\n   Before any MPPC packets may be communicated, PPP must reach\
    \ the\n   Network-Layer Protocol phase, and the CCP Control Protocol must reach\n\
    \   the Opened state.\n   Exactly one MPPC datagram is encapsulated in the PPP\
    \ Information\n   field. The PPP Protocol field indicates type hex 00FD for all\n\
    \   compressed datagrams.\n   The maximum length of the MPPC datagram transmitted\
    \ over a PPP link\n   is the same as the maximum length of the Information field\
    \ of a PPP\n   encapsulated packet. Since the history buffer is limited to 8192\n\
    \   bytes, this length cannot be greater than 8192 bytes.\n   Only packets with\
    \ PPP Protocol numbers in the range hex 0021 to hex\n   00FA are compressed. \
    \ Other packets are not passed thru the MPPC\n   processor and are sent with their\
    \ original PPP Protocol numbers.\n   Padding\n      It is recommended that padding\
    \ not be used with MPPC since it\n      defeats the purpose of compression. If\
    \ the sender must use padding\n      it MUST negotiate the Self-Describing-Padding\
    \ Configuration option\n      during LCP phase and use self-describing pads.\n\
    \   Reliability and Sequencing\n      The MPPC scheme does not require a reliable\
    \ link.  Instead, it\n      relies on a 12 bit coherency count in each packet\
    \ to keep the\n      history buffers synchronized.  If the receiver recognizes\
    \ that the\n      coherency count received in the packet does not match the count\
    \ it\n      is expecting, it sends a CCP Reset-Request packet to resynchronize\n\
    \      its history buffer with the sender's history buffer.\n      MPPC expects\
    \ the packets to be delivered in sequence, otherwise\n      history buffer re-synchronization\
    \ will not occur.\n      MPPC MAY be used over a reliable link, as described in\
    \ \"PPP\n      Reliable Transmision\" [5], but this typically just adds\n    \
    \  unnecessary overhead since only the coherency count is required.\n   Data Expansion\n\
    \      If compressing the data results in data expansion, the original\n     \
    \ data is sent as an uncompressed MPPC packet. The sender must flush\n      the\
    \ history before compressing any more data and set the FLUSHED\n      bit on the\
    \ next outgoing packet.\n"
- title: 3.1.  Packet Format
  contents:
  - "3.1.  Packet Format\n    0                   1                   2          \
    \         3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |         PPP Protocol          |A|B|C|D| Coherency Count       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        Compressed Data...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   PPP Protocol\n      The PPP Protocol field is described in the Point-to-Point\
    \ Protocol\n      Encapsulation [1].\n      When the MPPC compression protocol\
    \ is successfully negotiated by\n      the PPP Compression Control Protocol, the\
    \ value is hex 00FD. This\n      value MAY be compressed when Protocol-Field-Compression\
    \ is\n      negotiated.\n   Bit A\n      This bit indicates that the history buffer\
    \ has just been\n      initialized before this packet was generated.  This packet\
    \ can\n      ALWAYS be decompressed because it is not based on any previous\n\
    \      history. This bit is typically sent to inform the peer that the\n     \
    \ sender has initialized its history buffer before compressing the\n      packet\
    \ and that the receiving peer must initialize its history\n      buffer before\
    \ decompressing the packet. This bit is referred to as\n      FLUSHED bit in this\
    \ document.\n      Implementation Note: Compression and decompression histories\
    \ are\n      always initialized with all zeroes.\n   Bit B\n      This bit indicates\
    \ that the packet was moved to the front of the\n      history buffer typically\
    \ because there was no room at the end of\n      the history buffer.  This bit\
    \ is used to tell the decompressor to\n      set its history pointer to the beginning\
    \ of the history buffer.\n      Implementation Notes:\n      1. It is implied\
    \ that this bit must be set at least once for every\n         8192 bytes of data\
    \ that is sent compressed.\n      2. It is also implied that this bit can be set\
    \ even if the\n         sender's history buffer is not full. Initialized history\
    \ that\n         has not been used for compressing data must not be referred to\n\
    \         in the compressed packets.\n   Bit C\n      This bit (if set) is used\
    \ to indicate that the packet is\n      compressed.\n   Bit D\n      This bit\
    \ must be set to 0.\n   Coherency Count\n      The coherency count is used to\
    \ assure that the packets are sent in\n      proper order and that no packet has\
    \ been dropped.  This count\n      starts at 0 and is always increased by 1 and\
    \ NEVER decreases or\n      goes back. When all bits are 1, the count returns\
    \ to 0.\n   Compressed Data\n      The compressed data begins with the protocol\
    \ field.  For example,\n      in case of an IP packet (0021 followed by an IP\
    \ header), the\n      compressor will first try to compress the 0021 protocol\
    \ field and\n      then compress the IP header.\n      If the packet contains\
    \ header compression, the MPPC compressor is\n      applied AFTER header compression\
    \ is preformed and MUST be applied\n      to the compressed header as well.  For\
    \ example, if a packet\n      contained the protocol 002d for a compressed TCP/IP\
    \ header, the\n      compressor would first attempt to compress 002d and then\
    \ it\n      would attempt to compress the compressed Van-Jacobsen TCP/IP\n   \
    \   header.\n"
- title: 4. Description of Compressor and Encoding
  contents:
  - "4. Description of Compressor and Encoding\n   The compressor runs through the\
    \ length of the frame producing as\n   output a Literal (byte to be sent uncompressed)\
    \ or a <Offset,\n   Length-of-Match> Copy tuple, where Offset is the number of\
    \ bytes\n   before in the history where the match lies and Length-of-Match is\
    \ the\n   number of bytes to copy from the location indicated by Offset.\n   For\
    \ example, comsider the following string:\n   0         1         2         3\
    \         4\n   012345678901234567890123456789012345678901234567890\n   for whom\
    \ the bell tolls, the bell tolls for thee.\n   The compressor would produce:\n\
    \   for whom the bell tolls,<16,15> <40,4><19,3>e.\n   The Literal and Copy tuple\
    \ tokens are then encoded according to the\n   MPPC encoding scheme.\n"
- title: 4.1 Literal Encoding
  contents:
  - "4.1 Literal Encoding\n   Literals are bytes sent uncompressed. If the value of\
    \ the Literal is\n   below hex 80, it is encoded with its value itself. If the\
    \ Literal has\n   value greater than hex 7F it is sent as bits 10 followed by\
    \ the lower\n   7 bits of the Literal.\n   Example: Literal hex 56 is transmitted\
    \ as  01010110\n            Literal hex E7 is transmitted as 101100111\n"
- title: 4.2 Copy Tuple Encoding
  contents:
  - "4.2 Copy Tuple Encoding\n   Copy tuples represent compressed data. A tuple has\
    \ two elements: the\n   Offset and Length-of-Match. The Offset is encoded before\
    \ the Length-\n   of-Match.\n"
- title: 4.2.1 Offset Encoding
  contents:
  - "4.2.1 Offset Encoding\n   Offset values less than 64 are encoded as bits 1111\
    \ followed by the\n   lower 6 bits of the value.\n   Offset values between 64\
    \ and 320 are encoded as bits 1110 followed by\n   the lower 8 bits of the computation\
    \ (value - 64).\n   Offset values between 320 and 8191 are encoded as bits 110\
    \ followed\n   by the lower 13 bits of the computation (value - 320).\n   Examples:\
    \ Offset value of 3 is encoded as:     1111 000011\n             Offset value\
    \ of 128 is encoded as:   1110 01000000\n             Offset value of 1024 is\
    \ encoded as:   110 0001011000000\n"
- title: 4.2.2 Length-of-Match Encoding
  contents:
  - "4.2.2 Length-of-Match Encoding\n   Length of 3 is encoded with bit 0.\n   Length\
    \ values from 4 to 7 are encoded as 10 followed by lower 2 bits\n   of the value.\n\
    \   Length values from 8 to 15 are encoded as 110 followed by lower 3\n   bits\
    \ of the value.\n   Length values from 16 to 31 are encoded as 1110 followed by\
    \ lower 4\n   bits of the value.\n   Length values from 32 to 63 are encoded as\
    \ 11110 followed by lower 5\n   bits of the value.\n   Length values from 64 to\
    \ 127 are encoded as 111110 followed by lower\n   6 bits of the value.\n   Length\
    \ values from 128 to 255 are encoded as 1111110 followed by\n   lower 7 bits of\
    \ the value.\n   Length values from 256 to 511 are encoded as 11111110 followed\
    \ by\n   lower 8 bits of the value.\n   Length values from 512 to 1023 are encoded\
    \ as 111111110 followed by\n   lower 9 bits of the value.\n   Length values from\
    \ 1024 to 2047 are encoded as 1111111110 followed by\n   lower 10 bits of the\
    \ value.\n   Length values from 2048 to 4095 are encoded as 11111111110 followed\n\
    \   by lower 11 bits of the value.\n   Length values from 4096 to 8191 are encoded\
    \ as 111111111110 followed\n   by lower 12 bits of the value.\n   Examples: Length\
    \ of 15 is encoded as:           110 111\n             Length of 120 is encoded\
    \ as:       111110 111000\n             Length of 4097 is encoded as:111111111110\
    \ 000000000001\n   The largest Length value that can be encoded is 8191.\n"
- title: 4.3  Synchronization
  contents:
  - "4.3  Synchronization\n   Packets may be lost during transfer. If the decompressor\
    \ maintained\n   coherency count does not match the coherency count received in\
    \ the\n   compressed packet, the decompressor drops the packet and sends a CCP\n\
    \   Reset-Request packet. The compressor on receiving this packet flushes\n  \
    \ the history buffer and sets the FLUSHED bit in the next packet it\n   sends.\
    \ The decompressor on receiving a packet with its FLUSHED bit\n   set flushes\
    \ its history buffer and sets its coherency count to the\n   one transmitted by\
    \ the compressor in that packet. Thus\n   synchronization is achieved without\
    \ a CCP Reset-Ack packet.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: References
  contents:
  - "References\n   [1]   Simpson, W., Editor, \"The Point-to-Point Protocol (PPP)\"\
    , STD\n         51, RFC 1661, Daydreamer, July 1994.\n   [2]   Rand, D., \"The\
    \ PPP Compression Control Protocol (CCP)\", RFC\n         1962, Novell, June 1996.\n\
    \   [3]   Lempel, A. and Ziv, J., \"A Universal Algorithm for Sequential\n   \
    \      Data Compression\", IEEE Transactions On Information Theory,\n        \
    \ Vol. IT-23, No. 3, May 1977.\n   [4]   Rand, D., \"PPP Reliable Transmission\"\
    , RFC 1663, Novell, July\n         1994.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Thomas Dimitri made significant contributions towards the\
    \ design and\n   development of Microsoft Point-To-Point Compression Protocol.\
    \ Robert\n   Friend of Stac Technology provided editoral input.\n"
- title: Chair's Address
  contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n\
    \         Karl F. Fox\n         Ascend Communications\n         3518 Riverside\
    \ Dr., Suite 101\n         Columbus, Ohio  43221\n         (614) 451-1883\n  \
    \       EMail: karl@ascend.Com\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Questions about this memo can also be directed to:\n   \
    \      Gurdeep Singh Pall\n         1, Microsoft Way,\n         Redmond, WA 98052\n\
    \         (206) 882-8080\n         Email: gurdeep@microsoft.com\n"
