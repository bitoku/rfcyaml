- contents:
  - '                         PATCH Method for HTTP

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Several applications extending the Hypertext Transfer Protocol (HTTP)\n
    \  require a feature to do partial resource modification.  The existing\n   HTTP
    PUT method only allows a complete replacement of a document.\n   This proposal
    adds a new HTTP method, PATCH, to modify an existing\n   HTTP resource.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5789.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. The PATCH Method ................................................2\n      2.1.
    A Simple PATCH Example .....................................4\n      2.2. Error
    Handling .............................................5\n   3. Advertising Support
    in OPTIONS ..................................7\n      3.1. The Accept-Patch Header
    ....................................7\n      3.2. Example OPTIONS Request and
    Response .......................7\n   4. IANA Considerations .............................................8\n
    \     4.1. The Accept-Patch Response Header ...........................8\n   5.
    Security Considerations .........................................8\n   6. References
    ......................................................9\n      6.1. Normative
    References .......................................9\n      6.2. Informative References
    .....................................9\n   Appendix A.  Acknowledgements .....................................10\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This specification defines the new HTTP/1.1 [RFC2616] method,
    PATCH,\n   which is used to apply partial modifications to a resource.\n   A new
    method is necessary to improve interoperability and prevent\n   errors.  The PUT
    method is already defined to overwrite a resource\n   with a complete new body,
    and cannot be reused to do partial changes.\n   Otherwise, proxies and caches,
    and even clients and servers, may get\n   confused as to the result of the operation.
    \ POST is already used but\n   without broad interoperability (for one, there
    is no standard way to\n   discover patch format support).  PATCH was mentioned
    in earlier HTTP\n   specifications, but not completely defined.\n   In this document,
    the key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\",
    \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",\n   and \"OPTIONAL\" are
    to be interpreted as described in [RFC2119].\n   Furthermore, this document uses
    the ABNF syntax defined in Section\n   2.1 of [RFC2616].\n"
  title: 1.  Introduction
- contents:
  - "2.  The PATCH Method\n   The PATCH method requests that a set of changes described
    in the\n   request entity be applied to the resource identified by the Request-\n
    \  URI.  The set of changes is represented in a format called a \"patch\n   document\"
    identified by a media type.  If the Request-URI does not\n   point to an existing
    resource, the server MAY create a new resource,\n   depending on the patch document
    type (whether it can logically modify\n   a null resource) and permissions, etc.\n
    \  The difference between the PUT and PATCH requests is reflected in the\n   way
    the server processes the enclosed entity to modify the resource\n   identified
    by the Request-URI.  In a PUT request, the enclosed entity\n   is considered to
    be a modified version of the resource stored on the\n   origin server, and the
    client is requesting that the stored version\n   be replaced.  With PATCH, however,
    the enclosed entity contains a set\n   of instructions describing how a resource
    currently residing on the\n   origin server should be modified to produce a new
    version.  The PATCH\n   method affects the resource identified by the Request-URI,
    and it\n   also MAY have side effects on other resources; i.e., new resources\n
    \  may be created, or existing ones modified, by the application of a\n   PATCH.\n
    \  PATCH is neither safe nor idempotent as defined by [RFC2616], Section\n   9.1.\n
    \  A PATCH request can be issued in such a way as to be idempotent,\n   which
    also helps prevent bad outcomes from collisions between two\n   PATCH requests
    on the same resource in a similar time frame.\n   Collisions from multiple PATCH
    requests may be more dangerous than\n   PUT collisions because some patch formats
    need to operate from a\n   known base-point or else they will corrupt the resource.
    \ Clients\n   using this kind of patch application SHOULD use a conditional request\n
    \  such that the request will fail if the resource has been updated\n   since
    the client last accessed the resource.  For example, the client\n   can use a
    strong ETag [RFC2616] in an If-Match header on the PATCH\n   request.\n   There
    are also cases where patch formats do not need to operate from\n   a known base-point
    (e.g., appending text lines to log files, or non-\n   colliding rows to database
    tables), in which case the same care in\n   client requests is not needed.\n   The
    server MUST apply the entire set of changes atomically and never\n   provide (e.g.,
    in response to a GET during this operation) a\n   partially modified representation.
    \ If the entire patch document\n   cannot be successfully applied, then the server
    MUST NOT apply any of\n   the changes.  The determination of what constitutes
    a successful\n   PATCH can vary depending on the patch document and the type of\n
    \  resource(s) being modified.  For example, the common 'diff' utility\n   can
    generate a patch document that applies to multiple files in a\n   directory hierarchy.
    \ The atomicity requirement holds for all\n   directly affected files.  See \"Error
    Handling\", Section 2.2, for\n   details on status codes and possible error conditions.\n
    \  If the request passes through a cache and the Request-URI identifies\n   one
    or more currently cached entities, those entries SHOULD be\n   treated as stale.
    \ A response to this method is only cacheable if it\n   contains explicit freshness
    information (such as an Expires header or\n   \"Cache-Control: max-age\" directive)
    as well as the Content-Location\n   header matching the Request-URI, indicating
    that the PATCH response\n   body is a resource representation.  A cached PATCH
    response can only\n   be used to respond to subsequent GET and HEAD requests;
    it MUST NOT\n   be used to respond to other methods (in particular, PATCH).\n
    \  Note that entity-headers contained in the request apply only to the\n   contained
    patch document and MUST NOT be applied to the resource\n   being modified.  Thus,
    a Content-Language header could be present on\n   the request, but it would only
    mean (for whatever that's worth) that\n   the patch document had a language.  Servers
    SHOULD NOT store such\n   headers except as trace information, and SHOULD NOT
    use such header\n   values the same way they might be used on PUT requests.  Therefore,\n
    \  this document does not specify a way to modify a document's Content-\n   Type
    or Content-Language value through headers, though a mechanism\n   could well be
    designed to achieve this goal through a patch document.\n   There is no guarantee
    that a resource can be modified with PATCH.\n   Further, it is expected that different
    patch document formats will be\n   appropriate for different types of resources
    and that no single\n   format will be appropriate for all types of resources.
    \ Therefore,\n   there is no single default patch document format that implementations\n
    \  are required to support.  Servers MUST ensure that a received patch\n   document
    is appropriate for the type of resource identified by the\n   Request-URI.\n   Clients
    need to choose when to use PATCH rather than PUT.  For\n   example, if the patch
    document size is larger than the size of the\n   new resource data that would
    be used in a PUT, then it might make\n   sense to use PUT instead of PATCH.  A
    comparison to POST is even more\n   difficult, because POST is used in widely
    varying ways and can\n   encompass PUT and PATCH-like operations if the server
    chooses.  If\n   the operation does not modify the resource identified by the
    Request-\n   URI in a predictable way, POST should be considered instead of PATCH\n
    \  or PUT.\n"
  - contents:
    - "2.1.  A Simple PATCH Example\n   PATCH /file.txt HTTP/1.1\n   Host: www.example.com\n
      \  Content-Type: application/example\n   If-Match: \"e0023aa4e\"\n   Content-Length:
      100\n   [description of changes]\n   This example illustrates use of a hypothetical
      patch document on an\n   existing resource.\n   Successful PATCH response to
      existing text file:\n   HTTP/1.1 204 No Content\n   Content-Location: /file.txt\n
      \  ETag: \"e0023aa4f\"\n   The 204 response code is used because the response
      does not carry a\n   message body (which a response with the 200 code would
      have).  Note\n   that other success codes could be used as well.\n   Furthermore,
      the ETag response header field contains the ETag for the\n   entity created
      by applying the PATCH, available at\n   http://www.example.com/file.txt, as
      indicated by the Content-Location\n   response header field.\n"
    title: 2.1.  A Simple PATCH Example
  - contents:
    - "2.2.  Error Handling\n   There are several known conditions under which a PATCH
      request can\n   fail.\n   Malformed patch document:  When the server determines
      that the patch\n      document provided by the client is not properly formatted,
      it\n      SHOULD return a 400 (Bad Request) response.  The definition of\n      badly
      formatted depends on the patch document chosen.\n   Unsupported patch document:
      \ Can be specified using a 415\n      (Unsupported Media Type) response when
      the client sends a patch\n      document format that the server does not support
      for the resource\n      identified by the Request-URI.  Such a response SHOULD
      include an\n      Accept-Patch response header as described in Section 3.1 to
      notify\n      the client what patch document media types are supported.\n   Unprocessable
      request:  Can be specified with a 422 (Unprocessable\n      Entity) response
      ([RFC4918], Section 11.2) when the server\n      understands the patch document
      and the syntax of the patch\n      document appears to be valid, but the server
      is incapable of\n      processing the request.  This might include attempts
      to modify a\n      resource in a way that would cause the resource to become
      invalid;\n      for instance, a modification to a well-formed XML document that\n
      \     would cause it to no longer be well-formed.  There may also be\n      more
      specific errors like \"Conflicting State\" that could be\n      signaled with
      this status code, but the more specific error would\n      generally be more
      helpful.\n   Resource not found:  Can be specified with a 404 (Not Found) status\n
      \     code when the client attempted to apply a patch document to a non-\n      existent
      resource, but the patch document chosen cannot be applied\n      to a non-existent
      resource.\n   Conflicting state:  Can be specified with a 409 (Conflict) status\n
      \     code when the request cannot be applied given the state of the\n      resource.
      \ For example, if the client attempted to apply a\n      structural modification
      and the structures assumed to exist did\n      not exist (with XML, a patch
      might specify changing element 'foo'\n      to element 'bar' but element 'foo'
      might not exist).\n   Conflicting modification:  When a client uses either the
      If-Match or\n      If-Unmodified-Since header to define a precondition, and
      that\n      precondition failed, then the 412 (Precondition Failed) error is\n
      \     most helpful to the client.  However, that response makes no sense\n      if
      there was no precondition on the request.  In cases when the\n      server detects
      a possible conflicting modification and no\n      precondition was defined in
      the request, the server can return a\n      409 (Conflict) response.\n   Concurrent
      modification:  Some applications of PATCH might require\n      the server to
      process requests in the order in which they are\n      received.  If a server
      is operating under those restrictions, and\n      it receives concurrent requests
      to modify the same resource, but\n      is unable to queue those requests, the
      server can usefully\n      indicate this error by using a 409 (Conflict) response.\n
      \  Note that the 409 Conflict response gives reasonably consistent\n   information
      to clients.  Depending on the application and the nature\n   of the patch format,
      the client might be able to reissue the request\n   as is (e.g., an instruction
      to append a line to a log file), have to\n   retrieve the resource content to
      recalculate a patch, or have to fail\n   the operation.\n   Other HTTP status
      codes can also be used under the appropriate\n   circumstances.\n   The entity
      body of error responses SHOULD contain enough information\n   to communicate
      the nature of the error to the client.  The content-\n   type of the response
      entity can vary across implementations.\n"
    title: 2.2.  Error Handling
  title: 2.  The PATCH Method
- contents:
  - "3.  Advertising Support in OPTIONS\n   A server can advertise its support for
    the PATCH method by adding it\n   to the listing of allowed methods in the \"Allow\"
    OPTIONS response\n   header defined in HTTP/1.1.  The PATCH method MAY appear
    in the\n   \"Allow\" header even if the Accept-Patch header is absent, in which\n
    \  case the list of allowed patch documents is not advertised.\n"
  - contents:
    - "3.1.  The Accept-Patch Header\n   This specification introduces a new response
      header Accept-Patch used\n   to specify the patch document formats accepted
      by the server.\n   Accept-Patch SHOULD appear in the OPTIONS response for any
      resource\n   that supports the use of the PATCH method.  The presence of the\n
      \  Accept-Patch header in response to any method is an implicit\n   indication
      that PATCH is allowed on the resource identified by the\n   Request-URI.  The
      presence of a specific patch document format in\n   this header indicates that
      that specific format is allowed on the\n   resource identified by the Request-URI.\n
      \  Accept-Patch = \"Accept-Patch\" \":\" 1#media-type\n   The Accept-Patch header
      specifies a comma-separated listing of media-\n   types (with optional parameters)
      as defined by [RFC2616], Section\n   3.7.\n   Example:\n   Accept-Patch: text/example;charset=utf-8\n"
    title: 3.1.  The Accept-Patch Header
  - contents:
    - "3.2.  Example OPTIONS Request and Response\n   [request]\n   OPTIONS /example/buddies.xml
      HTTP/1.1\n   Host: www.example.com\n   [response]\n   HTTP/1.1 200 OK\n   Allow:
      GET, PUT, POST, OPTIONS, HEAD, DELETE, PATCH\n   Accept-Patch: application/example,
      text/example\n   The examples show a server that supports PATCH generally using
      two\n   hypothetical patch document formats.\n"
    title: 3.2.  Example OPTIONS Request and Response
  title: 3.  Advertising Support in OPTIONS
- contents:
  - '4.  IANA Considerations

    '
  - contents:
    - "4.1.  The Accept-Patch Response Header\n   The Accept-Patch response header
      has been added to the permanent\n   registry (see [RFC3864]).\n   Header field
      name:  Accept-Patch\n   Applicable Protocol:  HTTP\n   Author/Change controller:
      \ IETF\n   Specification document:  this specification\n"
    title: 4.1.  The Accept-Patch Response Header
  title: 4.  IANA Considerations
- contents:
  - "5.  Security Considerations\n   The security considerations for PATCH are nearly
    identical to the\n   security considerations for PUT ([RFC2616], Section 9.6).
    \ These\n   include authorizing requests (possibly through access control and/or\n
    \  authentication) and ensuring that data is not corrupted through\n   transport
    errors or through accidental overwrites.  Whatever\n   mechanisms are used for
    PUT can be used for PATCH as well.  The\n   following considerations apply especially
    to PATCH.\n   A document that is patched might be more likely to be corrupted
    than\n   a document that is overridden in entirety, but that concern can be\n
    \  addressed through the use of mechanisms such as conditional requests\n   using
    ETags and the If-Match request header as described in\n   Section 2.  If a PATCH
    request fails, the client can issue a GET\n   request to the resource to see what
    state it is in.  In some cases,\n   the client might be able to check the contents
    of the resource to see\n   if the PATCH request can be resent, but in other cases,
    the attempt\n   will just fail and/or a user will have to verify intent.  In the
    case\n   of a failure of the underlying transport channel, where a PATCH\n   response
    is not received before the channel fails or some other\n   timeout happens, the
    client might have to issue a GET request to see\n   whether the request was applied.
    \ The client might want to ensure\n   that the GET request bypasses caches using
    mechanisms described in\n   HTTP specifications (see, for example, Section 13.1.6
    of [RFC2616]).\n   Sometimes an HTTP intermediary might try to detect viruses
    being sent\n   via HTTP by checking the body of the PUT/POST request or GET\n
    \  response.  The PATCH method complicates such watch-keeping because\n   neither
    the source document nor the patch document might be a virus,\n   yet the result
    could be.  This security consideration is not\n   materially different from those
    already introduced by byte-range\n   downloads, downloading patch documents, uploading
    zipped (compressed)\n   files, and so on.\n   Individual patch documents will
    have their own specific security\n   considerations that will likely vary depending
    on the types of\n   resources being patched.  The considerations for patched binary\n
    \  resources, for instance, will be different than those for patched XML\n   documents.
    \ Servers MUST take adequate precautions to ensure that\n   malicious clients
    cannot consume excessive server resources (e.g.,\n   CPU, disk I/O) through the
    client's use of PATCH.\n"
  title: 5.  Security Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter,
      L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol
      -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC3864]  Klyne, G., Nottingham, M.,
      and J. Mogul, \"Registration\n              Procedures for Message Header Fields\",
      BCP 90, RFC 3864,\n              September 2004.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [RFC4918]  Dusseault, L., \"HTTP Extensions
      for Web Distributed\n              Authoring and Versioning (WebDAV)\", RFC
      4918, June 2007.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Appendix A.  Acknowledgements\n   PATCH is not a new concept, it first appeared
    in HTTP in drafts of\n   version 1.1 written by Roy Fielding and Henrik Frystyk
    and also\n   appears in Section 19.6.1.1 of RFC 2068.\n   Thanks to Adam Roach,
    Chris Sharp, Julian Reschke, Geoff Clemm, Scott\n   Lawrence, Jeffrey Mogul, Roy
    Fielding, Greg Stein, Jim Luther, Alex\n   Rousskov, Jamie Lokier, Joe Hildebrand,
    Mark Nottingham, Michael\n   Balloni, Cyrus Daboo, Brian Carpenter, John Klensin,
    Eliot Lear, SM,\n   and Bernie Hoeneisen for review and advice on this document.
    \ In\n   particular, Julian Reschke did repeated reviews, made many useful\n   suggestions,
    and was critical to the publication of this document.\n"
  title: Appendix A.  Acknowledgements
- contents:
  - "Authors' Addresses\n   Lisa Dusseault\n   Linden Lab\n   945 Battery Street\n
    \  San Francisco, CA  94111\n   USA\n   EMail: lisa.dusseault@gmail.com\n   James
    M. Snell\n   EMail: jasnell@gmail.com\n   URI:   http://www.snellspace.com\n"
  title: Authors' Addresses
