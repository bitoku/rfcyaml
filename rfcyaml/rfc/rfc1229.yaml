- title: __initial_text__
  contents:
  - '                Extensions to the Generic-Interface MIB

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC contains definitions of managed objects used\
    \ as experimental\n   extensions to the generic interfaces structure of MIB-II.\
    \  This memo\n   is a product of the SNMP Working Group of the Internet Engineering\n\
    \   Task Force (IETF).  This RFC specifies an IAB standards track\n   protocol\
    \ for the Internet community, and requests discussion and\n   suggestions for\
    \ improvements.  Please refer to the current edition of\n   the \"IAB Official\
    \ Protocol Standards\" for the standardization state\n   and status of this protocol.\
    \  Distribution of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Abstract ..............................................\
    \    1\n   2. The Network Management Framework.......................    1\n \
    \  3. Objects ...............................................    2\n   4. Overview\
    \ ..............................................    3\n   4.1 Generic Interface\
    \ Extension Table ....................    3\n   4.2 Generic Interface Test Table\
    \ .........................    3\n   4.3 Generic Receive Address Table ........................\
    \    4\n   5. Definitions ...........................................    5\n \
    \  6. Acknowledgements ......................................   14\n   7. References\
    \ ............................................   15\n   8. Security Considerations................................\
    \   15\n   9. Author's Address.......................................   16\n"
- title: 1.  Abstract
  contents:
  - "1.  Abstract\n   This memo defines an experimental portion of the Management\n\
    \   Information Base (MIB) for use with network management protocols in\n   TCP/IP-based\
    \ internets.  In particular, it defines managed object\n   types as experimental\
    \ extensions to the generic interfaces structure\n   of MIB-II.\n"
- title: 2.  The Network Management Framework
  contents:
  - "2.  The Network Management Framework\n   The Internet-standard Network Management\
    \ Framework consists of three\n   components.  They are:\n      RFC 1155 which\
    \ defines the SMI, the mechanisms used for describing\n      and naming objects\
    \ for the purpose of management.  RFC 1212\n      defines a more concise description\
    \ mechanism, which is wholly\n      consistent with the SMI.\n      RFC 1156 which\
    \ defines MIB-I, the core set of managed objects for\n      the Internet suite\
    \ of protocols.  RFC 1213, defines MIB-II, an\n      evolution of MIB-I based\
    \ on implementation experience and new\n      operational requirements.\n    \
    \  RFC 1157 which defines the SNMP, the protocol used for network\n      access\
    \ to managed objects.\n   The Framework permits new objects to be defined for\
    \ the purpose of\n   experimentation and evaluation.\n"
- title: 3.  Objects
  contents:
  - "3.  Objects\n   Managed objects are accessed via a virtual information store,\
    \ termed\n   the Management Information Base or MIB.  Objects in the MIB are\n\
    \   defined using the subset of Abstract Syntax Notation One (ASN.1) [7]\n   defined\
    \ in the SMI.  In particular, each object has a name, a syntax,\n   and an encoding.\
    \  The name is an object identifier, an\n   administratively assigned name, which\
    \ specifies an object type.  The\n   object type together with an object instance\
    \ serves to uniquely\n   identify a specific instantiation of the object.  For\
    \ human\n   convenience, we often use a textual string, termed the OBJECT\n  \
    \ DESCRIPTOR, to also refer to the object type.\n   The syntax of an object type\
    \ defines the abstract data structure\n   corresponding to that object type. \
    \ The ASN.1 language is used for\n   this purpose.  However, the SMI [3] purposely\
    \ restricts the ASN.1\n   constructs which may be used.  These restrictions are\
    \ explicitly made\n   for simplicity.\n   The encoding of an object type is simply\
    \ how that object type is\n   represented using the object type's syntax.  Implicitly\
    \ tied to the\n   notion of an object type's syntax and encoding is how the object\
    \ type\n   is represented when being transmitted on the network.\n   The SMI specifies\
    \ the use of the basic encoding rules of ASN.1 [8],\n   subject to the additional\
    \ requirements imposed by the SNMP.\n   Section 5 contains the specification of\
    \ all object types in this\n   section of the MIB.  The object types are defined\
    \ using the\n   conventions specified in the SMI, as amended by the extensions\n\
    \   specified in [9].\n"
- title: 4.  Overview
  contents:
  - "4.  Overview\n   The Internet Standard MIB [4,6] contains a group of management\n\
    \   objects pertaining to a network device's generic network\n   interface(s).\
    \  These objects are generic in the sense that they apply\n   to all network interfaces,\
    \ irrespective of the type of communication\n   media and protocols used on such\
    \ interfaces.  This has proved to be\n   necessary but not sufficient; there are\
    \ efforts underway to define\n   additional MIB objects which are specific to\
    \ particular media and\n   lower-level (subnetwork-layer and below) protocol stacks.\n\
    \   However, some of these efforts have identified objects which are\n   required\
    \ (or at least useful), but are not specific to the\n   interface-type on which\
    \ the effort is focusing.  In order to avoid\n   redundancy, it is better that\
    \ such objects be defined as extensions\n   to the generic interface group, rather\
    \ than defined in multiple\n   specific-interface-type MIBs.\n   This memo defines\
    \ the resultant extensions to the generic interface\n   group.  These extensions\
    \ are spread over three tables: the generic\n   Interface Extension table, the\
    \ generic Interface Test table, and the\n   generic Receive Address table.\n"
- title: 4.1.  Generic Interface Extension Table
  contents:
  - "4.1.  Generic Interface Extension Table\n   This table consists of new objects\
    \ applicable to all types of\n   subnetwork interface.\n"
- title: 4.2.  Generic Interface Test Table
  contents:
  - "4.2.  Generic Interface Test Table\n   This section defines objects which allow\
    \ a network manager to\n   instruct an agent to test an interface for various\
    \ faults.  A few\n   common types of tests are defined in this document but most\
    \ will be\n   defined elsewhere, dependent on the particular type of interface.\n\
    \   After testing, the object ifExtnsTestResult can be read to determine\n   the\
    \ outcome.  If an agent cannot perform the test, ifExtnsTestResult\n   is set\
    \ to so indicate.  The object ifExtnsTestCode can be used to\n   provide further\
    \ test-specific or interface-specific (or even\n   enterprise-specific) information\
    \ concerning the outcome of the test.\n   Only one test can be in progress on\
    \ each interface at any one time.\n   If one test is in progress when another\
    \ test is invoked, the second\n   test is rejected.  Some agents may reject a\
    \ test when a prior test is\n   active on another interface.\n   When a test is\
    \ invoked, the identity of the originator of the request\n   and the request-id\
    \ are saved by the agent in the objects\n   ifExtnsTestRequestId and ifExtnsTestCommunity.\
    \  These values remain\n   set until the next test is invoked.  In the (rare)\
    \ event that the\n   invocation of tests by two network managers were to overlap,\
    \ then\n   there would be a possibility that the first test's results might be\n\
    \   overwritten by the second test's results prior to the first results\n   being\
    \ read.  This unlikely circumstance can be detected by a network\n   manager retrieving\
    \ ifExtnsTestCommunity, and ifExtnsTestRequestId at\n   the same time as the test\
    \ results are retrieved, and ensuring that\n   the results are for the desired\
    \ request.\n   In general, a Management station must not retransmit a request\
    \ to\n   invoke a test for which it does not receive a response; instead, it\n\
    \   properly inspects an agent's MIB to determine if the invocation was\n   successful.\
    \  The invocation request is retransmitted only if the\n   invocation was unsuccessful.\n\
    \   Some tests may require the interface to be taken off-line or may even\n  \
    \ require the agent to be rebooted after completion of the test.  In\n   these\
    \ circumstances, communication with the management station\n   invoking the test\
    \ may be lost until after completion of the test.\n   The agent should make every\
    \ effort to transmit a response to the\n   request that invoked the test prior\
    \ to losing communication.  When\n   the agent is restored to normal service,\
    \ the results of the test are\n   properly made available in the appropriate objects.\
    \  Note that this\n   requires that the ifIndex value assigned to an interface\
    \ must be\n   unchanged even if the test causes a reboot.  An agent must reject\
    \ any\n   test for which it cannot, perhaps due to resource constraints, make\n\
    \   available at least the minimum amount of information after that test\n   completes.\n"
- title: 4.3.  Generic Receive Address Table
  contents:
  - "4.3.  Generic Receive Address Table\n   This table contains objects relating\
    \ to an interface's support for\n   receiving packets/frames at more than one\
    \ address on the same\n   interface.\n"
- title: 5.  Definitions
  contents:
  - "5.  Definitions\n          RFC1229-MIB DEFINITIONS ::= BEGIN\n          --  \
    \      Extensions to MIB-II's Generic Interface Table\n          IMPORTS\n   \
    \               experimental, Counter         FROM RFC1155-SMI\n             \
    \     DisplayString, PhysAddress    FROM RFC1213-MIB\n                  OBJECT-TYPE\
    \                   FROM RFC-1212;\n          ifExtensions  OBJECT IDENTIFIER\
    \ ::= { experimental 6 }\n          --   Generic Interface Extension Table\n \
    \         --\n          --  This group of objects is mandatory for all types of\n\
    \          --  subnetwork interface.\n          ifExtnsTable  OBJECT-TYPE\n  \
    \                SYNTAX SEQUENCE OF IfExtnsEntry\n                  ACCESS not-accessible\n\
    \                  STATUS mandatory\n                  DESCRIPTION\n         \
    \                \"A list of interfaces extension entries.\n                 \
    \         The number of entries is given by the value\n                      \
    \    of ifNumber, defined in [4,6].\"\n                  ::= { ifExtensions 1\
    \ }\n          ifExtnsEntry  OBJECT-TYPE\n                  SYNTAX IfExtnsEntry\n\
    \                  ACCESS not-accessible\n                  STATUS mandatory\n\
    \                  DESCRIPTION\n                         \"An extension to the\
    \ interfaces entry,\n                          defined in [4,6], containing additional\n\
    \                          objects at the subnetwork layer and below\n       \
    \                   for a particular interface.\"\n                  INDEX  {\
    \ ifExtnsIfIndex }\n                  ::= { ifExtnsTable 1 }\n          IfExtnsEntry\
    \ ::=\n                  SEQUENCE {\n                      ifExtnsIfIndex\n  \
    \                        INTEGER,\n                      ifExtnsChipSet\n    \
    \                      OBJECT IDENTIFIER,\n                      ifExtnsRevWare\n\
    \                          DisplayString,\n                      ifExtnsMulticastsTransmittedOks\n\
    \                          Counter,\n                      ifExtnsBroadcastsTransmittedOks\n\
    \                          Counter,\n                      ifExtnsMulticastsReceivedOks\n\
    \                          Counter,\n                      ifExtnsBroadcastsReceivedOks\n\
    \                          Counter,\n                      ifExtnsPromiscuous\n\
    \                          INTEGER\n                  }\n          ifExtnsIfIndex\
    \  OBJECT-TYPE\n                  SYNTAX INTEGER\n                  ACCESS read-only\n\
    \                  STATUS mandatory\n                  DESCRIPTION\n         \
    \                \"The value of this object identifies the\n                 \
    \         interface for which this entry contains\n                          extended\
    \ management information.  The value\n                          of this object\
    \ for a particular interface\n                          has the same value as\
    \ the ifIndex object,\n                          defined in [4,6], for the same\
    \ interface.\"\n                  ::= { ifExtnsEntry 1 }\n          ifExtnsChipSet\
    \  OBJECT-TYPE\n                  SYNTAX OBJECT IDENTIFIER\n                 \
    \ ACCESS read-only\n                  STATUS mandatory\n                  DESCRIPTION\n\
    \                         \"This object identifies the hardware chip\n       \
    \                   set being used in the interface.  The\n                  \
    \        assignment of OBJECT IDENTIFIERs to various\n                       \
    \   types of hardware chip sets is managed\n                          by the IANA.\
    \  If the hardware chip set is\n                          unknown, the object\
    \ identifier\n                          unknownChipSet OBJECT IDENTIFIER ::= {\
    \ 0 0 }\n                          is returned.  Note that unknownChipSet is a\n\
    \                          syntactically valid object identifier, and\n      \
    \                    any conformant implementation of ASN.1 and\n            \
    \              the BER must be able to generate and\n                        \
    \  recognize this value.\"\n                  ::= { ifExtnsEntry 2 }\n       \
    \   ifExtnsRevWare  OBJECT-TYPE\n                  SYNTAX DisplayString (SIZE\
    \ (0..255))\n                  ACCESS read-only\n                  STATUS mandatory\n\
    \                  DESCRIPTION\n                         \"An arbitrary octet\
    \ string that describes\n                          the firmware version of this\
    \ interface.\n                          It is intended that this should be human\n\
    \                          readable.  It must only contain ASCII\n           \
    \               printable characters.  Typically this\n                      \
    \    will be the firmware version of the main\n                          interface\
    \ software.\"\n                  ::= { ifExtnsEntry 3 }\n          ifExtnsMulticastsTransmittedOks\
    \ OBJECT-TYPE\n                  SYNTAX Counter\n                  ACCESS read-only\n\
    \                  STATUS mandatory\n                  DESCRIPTION\n         \
    \                \"The count of frames successfully\n                        \
    \  transmitted to a subnetwork or link-layer\n                          multicast\
    \ destination address other than a\n                          broadcast address.\
    \  For a MAC layer protocol,\n                          this includes both Group\
    \ and Functional\n                          addresses.\"\n                  ::=\
    \ { ifExtnsEntry 4 }\n          ifExtnsBroadcastsTransmittedOks OBJECT-TYPE\n\
    \                  SYNTAX Counter\n                  ACCESS read-only\n      \
    \            STATUS mandatory\n                  DESCRIPTION\n               \
    \          \"The count of frames successfully\n                          transmitted\
    \ to a subnetwork or link-layer\n                          broadcast addresses.\
    \  It does not include\n                          frames sent to a multicast address.\"\
    \n                  ::= { ifExtnsEntry 5 }\n          ifExtnsMulticastsReceivedOks\
    \ OBJECT-TYPE\n                  SYNTAX Counter\n                  ACCESS read-only\n\
    \                  STATUS mandatory\n                  DESCRIPTION\n         \
    \                \"The count of frames successfully received\n               \
    \           that are directed to an active subnetwork\n                      \
    \    or link-layer multicast address (for a MAC\n                          layer\
    \ protocol, this includes both Group and\n                          Functional\
    \ addresses). This does not include\n                          frames directed\
    \ to a broadcast address, nor\n                          frames received with\
    \ errors.\"\n                  ::= { ifExtnsEntry 6 }\n          ifExtnsBroadcastsReceivedOks\
    \ OBJECT-TYPE\n                  SYNTAX Counter\n                  ACCESS read-only\n\
    \                  STATUS mandatory\n                  DESCRIPTION\n         \
    \                \"The count of frames successfully received\n               \
    \           that are directed to a subnetwork or\n                          link-layer\
    \ broadcast address.  This does not\n                          include frames\
    \ received with errors.\"\n                  ::= { ifExtnsEntry 7 }\n        \
    \  ifExtnsPromiscuous  OBJECT-TYPE\n                  SYNTAX INTEGER {\n     \
    \                         true(1),\n                              false(2)\n \
    \                        }\n                  ACCESS read-only  -- Note: agent\
    \ implementors are\n                                    -- encouraged to extend\
    \ this\n                                    -- access to read-write if that\n\
    \                                    -- makes sense in their agent.\n        \
    \          STATUS mandatory\n                  DESCRIPTION\n                 \
    \        \"This object has a value of false(2) if\n                          this\
    \ interface only accepts packets/frames\n                          that are addressed\
    \ to this station. This\n                          object has a value of true(1)\
    \ when the\n                          station accepts all packets/frames\n   \
    \                       transmitted on the media.  The value\n               \
    \           true(1) is only legal on certain types of\n                      \
    \    media.  If legal, setting this object to a\n                          value\
    \ of true(1) may require the interface\n                          to be reset\
    \ before becoming effective.\"\n                  ::= { ifExtnsEntry 8 }\n   \
    \       --\n          --    Generic Interface Test Table\n          --\n     \
    \     -- This group of objects is optional, but if the table is\n          --\
    \ implemented, all objects in the table must be implemented.\n          ifExtnsTestTable\
    \   OBJECT-TYPE\n                  SYNTAX  SEQUENCE OF IfExtnsTestEntry\n    \
    \              ACCESS  not-accessible\n                  STATUS  mandatory\n \
    \                 DESCRIPTION\n                          \"This table contains\
    \ one entry per interface.\"\n                  ::= { ifExtensions 2 }\n     \
    \     ifExtnsTestEntry OBJECT-TYPE\n                  SYNTAX  IfExtnsTestEntry\n\
    \                  ACCESS  not-accessible\n                  STATUS  mandatory\n\
    \                  DESCRIPTION\n                          \"An entry containing\
    \ objects for invoking\n                           tests on an interface.\"\n\
    \                  INDEX   { ifExtnsTestIfIndex }\n                  ::= { ifExtnsTestTable\
    \ 1 }\n          IfExtnsTestEntry ::=\n                  SEQUENCE {\n        \
    \              ifExtnsTestIfIndex\n                          INTEGER,\n      \
    \                ifExtnsTestCommunity\n                          OCTET STRING,\n\
    \                      ifExtnsTestRequestId\n                          INTEGER,\n\
    \                      ifExtnsTestType\n                          OBJECT IDENTIFIER,\n\
    \                      ifExtnsTestResult\n                          INTEGER,\n\
    \                      ifExtnsTestCode\n                          OBJECT IDENTIFIER\n\
    \                  }\n          ifExtnsTestIfIndex  OBJECT-TYPE\n            \
    \      SYNTAX  INTEGER\n                  ACCESS  read-only\n                \
    \  STATUS  mandatory\n                  DESCRIPTION\n                        \
    \ \"The value of this object identifies the\n                          interface\
    \ for which this entry contains\n                          information on interface\
    \ tests.  The value\n                          of this object for a particular\
    \ interface\n                          has the same value as the ifIndex object,\n\
    \                          defined in [4,6], for the same interface.\"\n     \
    \             ::= { ifExtnsTestEntry 1 }\n          ifExtnsTestCommunity  OBJECT-TYPE\n\
    \                  SYNTAX  OCTET STRING\n                  ACCESS  read-only\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \                 \"This object contains the name of the SNMP\n              \
    \            authentication community [5] which was used\n                   \
    \       to authenticate the SNMP Message which invoked\n                     \
    \     the current or most recent test on this\n                          interface.\
    \  If the authentication community\n                          is unknown or undefined,\
    \ this value contains\n                          the zero-length string.\"\n \
    \                 ::= { ifExtnsTestEntry 2 }\n          ifExtnsTestRequestId \
    \ OBJECT-TYPE\n                  SYNTAX  INTEGER\n                  ACCESS  read-only\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \                 \"This object contains the value of the\n                  \
    \        request-id field in the SNMP PDU [5] which\n                        \
    \  invoked the current or most recent test on\n                          this\
    \ interface.  If the request-id is\n                          unknown or undefined,\
    \ this value contains\n                          the value zero.\"\n         \
    \         ::= { ifExtnsTestEntry 3 }\n          ifExtnsTestType  OBJECT-TYPE\n\
    \                  SYNTAX  OBJECT IDENTIFIER\n                  ACCESS  read-write\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \                 \"A control variable used to start and stop\n              \
    \            operator-initiated interface tests.\n                           \
    \   Most OBJECT IDENTIFIER values assigned\n                          to tests\
    \ are defined elsewhere, in associ-\n                          ation with specific\
    \ types of interface.\n                          However, this document assigns\
    \ a value for\n                          a full-duplex loopback test, and defines\
    \ the\n                          special meanings of the subject identifier:\n\
    \                            noTest  OBJECT IDENTIFIER ::= { 0 0 }\n         \
    \                 When the value noTest is written to this\n                 \
    \         object, no action is taken unless a test is\n                      \
    \    in progress, in which case the test is\n                          aborted.\
    \  Writing any other value to this\n                          object is only valid\
    \ when no test is\n                          currently in progress, in which case\
    \ the\n                          indicated test is initiated.\n              \
    \                Note that noTest is a syntactically valid\n                 \
    \         object identifier, and any conformant\n                          implementation\
    \ of ASN.1 and BER must be able\n                          to generate and recognize\
    \ this value.\n                              When read, this object always returns\n\
    \                          the most recent value that ifExtnsTestType\n      \
    \                    was set to.  If it has not been set since\n             \
    \             the last initialization of the network\n                       \
    \   management subsystem on the agent, a value\n                          of noTest\
    \ is returned.\"\n                  ::= { ifExtnsTestEntry 4 }\n          wellKnownTests\
    \ OBJECT IDENTIFIER ::= { ifExtensions 4 }\n          --  full-duplex loopback\
    \ test\n          testFullDuplexLoopBack OBJECT IDENTIFIER ::=\n             \
    \                                     { wellKnownTests 1 }\n          ifExtnsTestResult\
    \  OBJECT-TYPE\n                  SYNTAX  INTEGER {\n                        \
    \      none(1),        -- no test yet requested\n                            \
    \  success(2),\n                              inProgress(3),\n               \
    \               notSupported(4),\n                              unAbleToRun(5),\
    \ -- due to state of system\n                              aborted(6),\n     \
    \                         failed(7)\n                          }\n           \
    \       ACCESS  read-only\n                  STATUS  mandatory\n             \
    \     DESCRIPTION\n                         \"This object contains the result\
    \ of the most\n                          recently requested test, or the value\n\
    \                          none(1) if no tests have been requested since\n   \
    \                       the last reset.  Note that this facility\n           \
    \               provides no provision for saving the results\n               \
    \           of one test when starting another, as could\n                    \
    \      be required if used by multiple managers\n                          concurrently.\"\
    \n                  ::= { ifExtnsTestEntry 5 }\n          ifExtnsTestCode  OBJECT-TYPE\n\
    \                  SYNTAX  OBJECT IDENTIFIER\n                  ACCESS  read-only\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \                 \"This object contains a code which contains\n             \
    \             more specific information on the test result,\n                \
    \          for example an error-code after a failed\n                        \
    \  test.  Error codes and other values this\n                          object\
    \ may take are specific to the type of\n                          interface and/or\
    \ test.  However, one subject\n                          identifier:\n       \
    \                   testCodeUnknown  OBJECT IDENTIFIER ::= { 0 0 }\n         \
    \                 for use if no additional result code is\n                  \
    \        available.\n                              Note that testCodeUnknown is\
    \ a\n                          syntactically valid object identifier, and\n  \
    \                        any conformant implementation of ASN.1 and\n        \
    \                  the BER must be able to generate and\n                    \
    \      recognize this value.\"\n                  ::= { ifExtnsTestEntry 6 }\n\
    \          --   Generic Receive Address Table\n          --\n          -- This\
    \ group of objects is mandatory for all types of\n          -- interfaces which\
    \ can receive packets/frames addressed to\n          -- more than one address.\n\
    \          ifExtnsRcvAddrTable  OBJECT-TYPE\n                  SYNTAX SEQUENCE\
    \ OF IfExtnsRcvAddrEntry\n                  ACCESS not-accessible\n          \
    \        STATUS mandatory\n                  DESCRIPTION\n                   \
    \      \"This table contains an entry for each\n                          address\
    \ (broadcast, multicast, or uni-cast)\n                          for which the\
    \ system will receive packets/\n                          frames on a particular\
    \ interface.  When an\n                          interface is operating in promiscuous\
    \ mode,\n                          entries are only required for those addresses\n\
    \                          for which the system would receive frames\n       \
    \                   were it not operating in promiscuous mode.\"\n           \
    \       ::= { ifExtensions 3 }\n          ifExtnsRcvAddrEntry  OBJECT-TYPE\n \
    \                 SYNTAX IfExtnsRcvAddrEntry\n                  ACCESS not-accessible\n\
    \                  STATUS mandatory\n                  DESCRIPTION\n         \
    \                \"A list of objects identifying an address\n                \
    \          for which the system will accept packets/\n                       \
    \   frames on a particular interface.\"\n                  INDEX  { ifExtnsRcvAddrIfIndex,\
    \ ifExtnsRcvAddress }\n                  ::= { ifExtnsRcvAddrTable 1 }\n     \
    \     IfExtnsRcvAddrEntry ::=\n                  SEQUENCE {\n                \
    \      ifExtnsRcvAddrIfIndex\n                          INTEGER,\n           \
    \           ifExtnsRcvAddress\n                          PhysAddress,\n      \
    \                ifExtnsRcvAddrStatus\n                          INTEGER\n   \
    \               }\n          ifExtnsRcvAddrIfIndex  OBJECT-TYPE\n            \
    \      SYNTAX INTEGER\n                  ACCESS read-only\n                  STATUS\
    \ mandatory\n                  DESCRIPTION\n                         \"The value\
    \ of ifIndex, defined in [4,6], of an\n                          interface which\
    \ recognizes this entry's\n                          address.\"\n            \
    \      ::= { ifExtnsRcvAddrEntry 1 }\n          ifExtnsRcvAddress OBJECT-TYPE\n\
    \                  SYNTAX PhysAddress\n                  ACCESS read-only\n  \
    \                STATUS mandatory\n                  DESCRIPTION\n           \
    \              \"An address for which the system will accept\n               \
    \           packets/frames on this entry's interface.\"\n                  ::=\
    \ { ifExtnsRcvAddrEntry 2 }\n          ifExtnsRcvAddrStatus OBJECT-TYPE\n    \
    \              SYNTAX INTEGER {\n                             other(1),\n    \
    \                         invalid(2),\n                             volatile(3),\n\
    \                             nonVolatile(4)\n                         }\n   \
    \               ACCESS read-write\n                  STATUS mandatory\n      \
    \            DESCRIPTION\n                         \"This object has the value\
    \ nonVolatile(4)\n                          for those entries in the table which\
    \ are\n                          valid and will not be deleted by the next\n \
    \                         restart of the managed system.  Entries\n          \
    \                having the value volatile(3) are valid\n                    \
    \      and exist, but have not been saved, so\n                          that\
    \ will not exist after the next\n                          restart of the managed\
    \ system.  Entries\n                          having the value other(1) are valid\
    \ and\n                          exist but are not classified as to whether\n\
    \                          they will continue to exist after the next\n      \
    \                    restart.  Entries having the value invalid(2)\n         \
    \                 are invalid and do not represent an address\n              \
    \            for which an interface accepts frames.\n                        \
    \      Setting an object instance to one of\n                          the values\
    \ other(1), volatile(3), or\n                          nonVolatile(4) causes the\
    \ corresponding\n                          entry to exist or continue to exist,\
    \ and\n                          to take on the respective status as regards\n\
    \                          the next restart of the managed system.\n         \
    \                     Setting an object instance to the value\n              \
    \            invalid(2) causes the corresponding entry\n                     \
    \     to become invalid or cease to exist.\n                              It is\
    \ an implementation-specific matter\n                          as to whether the\
    \ agent removes an\n                          invalidated entry from the table.\n\
    \                          Accordingly, management stations must be\n        \
    \                  prepared to receive tabular information\n                 \
    \         from agents that corresponds to entries not\n                      \
    \    currently in use.  Proper interpretation of\n                          such\
    \ entries requires examination of the\n                          relevant ifExtnsRcvAddrStatus\
    \ object\n                          instance.\"\n                  DEFVAL  { volatile\
    \ }\n                  ::= { ifExtnsRcvAddrEntry 3 }\n          END\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   Most of the MIB objects defined in this document were\
    \ originally\n   proposed as a part of a MIB for management of IEEE 802.5 Token\
    \ Ring\n   networks, as prepared by:\n               Eric B. Decker, cisco Systems,\
    \ Inc., and\n               Richard Fox, Synoptics Inc.\n   In addition, the comments\
    \ of the following individuals are\n   acknowledged:\n               James R.\
    \ Davin, MIT-LCS\n               Stan Froyd, ACC\n               Frank Kastenholz,\
    \ Racal Interlan\n               Dave Perkins, 3Com\n               Marshall T.\
    \ Rose, PSI\n               Bob Stewart, Xyplex\n               David Waitzman,\
    \ BBN\n               Wengyik Yeong, PSI\n"
- title: 7.  References
  contents:
  - "7.  References\n   [1] Cerf, V., \"IAB Recommendations for the Development of\
    \ Internet\n       Network Management Standards\", RFC 1052, NRI, April 1988.\n\
    \   [2] Cerf, V., \"Report of the Second Ad Hoc Network Management Review\n  \
    \     Group\", RFC 1109, NRI, August 1989.\n   [3] Rose M., and K. McCloghrie,\
    \ \"Structure and Identification of\n       Management Information for TCP/IP-based\
    \ internets\", RFC 1155,\n       Performance Systems International, Hughes LAN\
    \ Systems, May 1990.\n   [4] McCloghrie K., and M. Rose, \"Management Information\
    \ Base for\n       Network Management of TCP/IP-based internets\", RFC 1156, Hughes\n\
    \       LAN Systems, Performance Systems International, May 1990.\n   [5] Case,\
    \ J., Fedor, M., Schoffstall, M., and J. Davin, \"Simple\n       Network Management\
    \ Protocol\", RFC 1157, SNMP Research,\n       Performance Systems International,\
    \ Performance Systems\n       International, MIT Laboratory for Computer Science,\
    \ May 1990.\n   [6] Rose M., Editor, \"Management Information Base for Network\n\
    \       Management of TCP/IP-based internets: MIB-II\", RFC 1213,\n       Performance\
    \ Systems International, March 1991.\n   [7] Information processing systems -\
    \ Open Systems Interconnection -\n       Specification of Abstract Syntax Notation\
    \ One (ASN.1),\n       International Organization for Standardization, International\n\
    \       Standard 8824, December 1987.\n   [8] Information processing systems -\
    \ Open Systems Interconnection -\n       Specification of Basic Encoding Rules\
    \ for Abstract Notation One\n       (ASN.1), International Organization for Standardization,\n\
    \       International Standard 8825, December 1987.\n   [9] Rose, M., and K. McCloghrie,\
    \ Editors, \"Concise MIB Definitions\",\n       RFC 1212, Performance Systems\
    \ International, Hughes LAN Systems,\n       March 1991.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 9.   Author's Address
  contents:
  - "9.   Author's Address\n   Keith McCloghrie\n   Hughes LAN Systems, Inc.\n   1225\
    \ Charleston Road\n   Mountain View, CA 94043\n   Phone:    (415) 966-7934\n \
    \  EMail: kzm@hls.com\n"
