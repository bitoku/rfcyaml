- title: __initial_text__
  contents:
  - '            Problem Statement for Service Function Chaining

    '
- title: Abstract
  contents:
  - "Abstract\n   This document provides an overview of the issues associated with\
    \ the\n   deployment of service functions (such as firewalls, load balancers,\n\
    \   etc.) in large-scale environments.  The term \"service function\n   chaining\"\
    \ is used to describe the definition and instantiation of an\n   ordered list\
    \ of instances of such service functions, and the\n   subsequent \"steering\"\
    \ of traffic flows through those service\n   functions.\n   The set of enabled\
    \ service function chains reflects operator service\n   offerings and is designed\
    \ in conjunction with application delivery\n   and service and network policy.\n\
    \   This document also identifies several key areas that the Service\n   Function\
    \ Chaining (SFC) working group will investigate to guide its\n   architectural\
    \ and protocol work and associated documents.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7498.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Definition of Terms . . . . . . . . . . . . . . .\
    \ . . . .   3\n   2.  Problem Space . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n     2.1.  Topological Dependencies  . . . . . . . . . . . . . .\
    \ . .   5\n     2.2.  Configuration Complexity  . . . . . . . . . . . . . . .\
    \ .   6\n     2.3.  Constrained High Availability . . . . . . . . . . . . . .\
    \   6\n     2.4.  Consistent Ordering of Service Functions  . . . . . . . .  \
    \ 6\n     2.5.  Application of Service Policy . . . . . . . . . . . . . .   6\n\
    \     2.6.  Transport Dependence  . . . . . . . . . . . . . . . . . .   7\n  \
    \   2.7.  Elastic Service Delivery  . . . . . . . . . . . . . . . .   7\n    \
    \ 2.8.  Traffic Selection Criteria  . . . . . . . . . . . . . . .   7\n     2.9.\
    \  Limited End-to-End Service Visibility . . . . . . . . . .   7\n     2.10. Classification/Reclassification\
    \ per Service Function  . .   7\n     2.11. Symmetric Traffic Flows . . . . .\
    \ . . . . . . . . . . . .   8\n     2.12. Multi-vendor Service Functions  . .\
    \ . . . . . . . . . . .   8\n   3.  Service Function Chaining . . . . . . . .\
    \ . . . . . . . . . .   8\n     3.1.  Service Overlay . . . . . . . . . . . .\
    \ . . . . . . . . .   8\n     3.2.  Service Classification  . . . . . . . . .\
    \ . . . . . . . .   9\n     3.3.  SFC Encapsulation . . . . . . . . . . . . .\
    \ . . . . . . .   9\n   4.  Security Considerations . . . . . . . . . . . . .\
    \ . . . . . .  10\n   5.  Informative References  . . . . . . . . . . . . . .\
    \ . . . . .  11\n   Acknowledgments . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  11\n   Contributors  . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  12\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . .\
    \ . .  13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The delivery of end-to-end services often requires various\
    \ service\n   functions including traditional network service functions (for\n\
    \   example, firewalls and server load balancers), as well as\n   application-specific\
    \ features such as HTTP header manipulation.\n   Service functions may be delivered\
    \ within the context of an isolated\n   user (e.g., a tenant) or shared amongst\
    \ many users or user groups.\n   Current deployment models for service functions\
    \ are often tightly\n   coupled to network topology and physical resources, thus\
    \ resulting in\n   relatively rigid and static deployments.  The static nature\
    \ of such\n   deployments greatly reduces and, in many cases, limits the ability\
    \ of\n   an operator to introduce new or modify existing services and/or\n   service\
    \ functions.  Furthermore there is a cascading effect: changing\n   one or more\
    \ elements of a service function chain often affects other\n   elements in the\
    \ chain and/or the network elements used to construct\n   the chain.\n   This\
    \ issue is particular acute in elastic service environments that\n   require relatively\
    \ rapid creation, destruction, or movement of\n   physical or virtual service\
    \ functions or network elements.\n   Additionally, the transition to virtual platforms\
    \ requires an agile\n   service insertion model that supports elastic and very\
    \ granular\n   service delivery, post facto modification, and the movement of\n\
    \   service functions and application workloads in the existing network.\n   The\
    \ service insertion model must also retain the network and service\n   policies\
    \ and the ability to easily bind service policy to granular\n   information such\
    \ as per-subscriber state.\n   This document outlines the problems encountered\
    \ with existing service\n   deployment models for Service Function Chaining (SFC),\
    \ which is often\n   referred to simply as \"service chaining\" (in this document,\
    \ the terms\n   will be used interchangeably).  Section 3 of this document highlights\n\
    \   three key areas of WG focus for investigating solutions that address\n   the\
    \ current problems.  The document highlights three key areas of WG\n   focus for\
    \ addressing the issues highlighted in this document that\n   will form the basis\
    \ for the possible WG solutions that address the\n   current problems.\n"
- title: 1.1.  Definition of Terms
  contents:
  - "1.1.  Definition of Terms\n   Classification:  Locally instantiated matching\
    \ of traffic flows\n      against policy for subsequent application of the required\
    \ set of\n      network service functions.  The policy may be customer, network,\n\
    \      or service specific.\n   Network Overlay:  A logical network built, via\
    \ virtual links or\n      packet encapsulation, over an existing network (the\
    \ underlay).\n   Network Service:  An offering provided by an operator that is\n\
    \      delivered using one or more service functions.  This may also be\n    \
    \  referred to as a composite service.  The term \"service\" is used to\n    \
    \  denote a \"network service\" in the context of this document.\n      Note:\
    \ Beyond this document, the term \"service\" is overloaded with\n      varying\
    \ definitions.  For example, to some a service is an\n      offering composed\
    \ of several elements within the operator's\n      network, whereas for others\
    \ a service, or more specifically a\n      network service, is a discrete element\
    \ such as a firewall.\n      Traditionally, such services (in the latter sense)\
    \ host a set of\n      service functions and have a network locator where the\
    \ service is\n      hosted.\n   Service Function:  A function that is responsible\
    \ for specific\n      treatment of received packets.  A service function can act\
    \ at\n      various layers of a protocol stack (e.g., at the network layer or\n\
    \      other OSI layers).  As a logical component, a service function can\n  \
    \    be realized as a virtual element or be embedded in a physical\n      network\
    \ element.  One or more service functions can be embedded in\n      the same network\
    \ element.  Multiple occurrences of the service\n      function can exist in the\
    \ same administrative domain.\n      A non-exhaustive list of service functions\
    \ includes: firewalls,\n      WAN and application acceleration, Deep Packet Inspection\
    \ (DPI),\n      server load balancers, NAT44 [RFC3022], NAT64 [RFC6146], HTTP\n\
    \      header enrichment functions, and TCP optimizers.\n      The generic term\
    \ \"L4-L7 services\" is often used to describe many\n      service functions.\n\
    \   Service Function Chain (SFC):  A service function chain defines an\n     \
    \ ordered or partially ordered set of abstract service functions\n      (SFs)\
    \ and ordering constraints that must be applied to packets,\n      frames, and/or\
    \ flows selected as a result of classification.  An\n      example of an abstract\
    \ service function is a firewall.  The\n      implied order may not be a linear\
    \ progression as the architecture\n      allows for SFCs that copy to more than\
    \ one branch, and also allows\n      for cases where there is flexibility in the\
    \ order in which service\n      functions need to be applied.  The term \"service\
    \ chain\" is often\n      used as shorthand for \"service function chain\".\n\
    \   Service Overlay:  An overlay network created for the purpose of\n      forwarding\
    \ data to required service functions.\n   Service Topology:  The service overlay\
    \ connectivity forms a service\n      topology.\n"
- title: 2.  Problem Space
  contents:
  - "2.  Problem Space\n   The following points describe aspects of existing service\
    \ deployments\n   that are problematic and that the SFC working group aims to\
    \ address.\n"
- title: 2.1.  Topological Dependencies
  contents:
  - "2.1.  Topological Dependencies\n   Network service deployments are often coupled\
    \ to network topology,\n   whether it be physical, virtualized, or a hybrid of\
    \ the two.  For\n   example, use of a firewall requires that traffic flow through\
    \ the\n   firewall, which means placing the firewall on the network path (often\n\
    \   via creation of VLANs) or architecting the network topology to steer\n   traffic\
    \ through the firewall.  Such dependency imposes constraints on\n   service delivery,\
    \ potentially inhibiting the network operator from\n   optimally utilizing service\
    \ resources, and reduces flexibility.  This\n   limits scale, capacity, and redundancy\
    \ across network resources.\n   These topologies serve only to \"insert\" the\
    \ service function (i.e.,\n   ensure that traffic traverses a service function);\
    \ they are not\n   required from a native packet delivery perspective.  For example,\n\
    \   firewalls often require an \"in\" and \"out\" Layer 2 segment and adding\n\
    \   a new firewall requires changing the topology (i.e., adding new Layer\n  \
    \ 2 segments and/or IP subnets).\n   As more service functions are required --\
    \ often with strict ordering\n   -- topology changes are needed in \"front\" and\
    \ \"behind\" each service\n   function, resulting in complex network changes and\
    \ device\n   configuration.  In such topologies, all traffic, whether a service\n\
    \   function needs to be applied or not, often passes through the same\n   strict\
    \ order.\n   The topological coupling limits placement and selection of service\n\
    \   functions: service functions are \"fixed\" in place by topology.\n   Therefore,\
    \ placement and service function selection that take into\n   account network\
    \ topology information such as load, new links, or\n   traffic engineering are\
    \ often not possible.\n   A common example is web servers using a server load\
    \ balancer as the\n   default gateway.  When the web service responds to non-load-balanced\n\
    \   traffic (e.g., administrative or backup operations), all traffic from\n  \
    \ the server must traverse the load balancer, forcing network\n   administrators\
    \ to create complex routing schemes or additional\n   interfaces to provide an\
    \ alternate topology.\n"
- title: 2.2.  Configuration Complexity
  contents:
  - "2.2.  Configuration Complexity\n   A direct consequence of topological dependencies\
    \ is the complexity of\n   the entire configuration, specifically in deploying\
    \ service function\n   chains.  Simple actions such as changing the order of the\
    \ service\n   functions in a service function chain require changes to the logical\n\
    \   and/or physical topology.  However, network operators are hesitant to\n  \
    \ make changes to the network once services are installed, configured,\n   and\
    \ deployed in production environments for fear of misconfiguration\n   and consequent\
    \ downtime.  All of this leads to very static service\n   delivery deployments.\
    \  Furthermore, the speed at which these\n   topological changes can be made is\
    \ not rapid or dynamic enough, as it\n   often requires manual intervention or\
    \ use of slow provisioning\n   systems.\n"
- title: 2.3.  Constrained High Availability
  contents:
  - "2.3.  Constrained High Availability\n   Since traffic reaches many service functions\
    \ based on network\n   topology, alternate or redundant service functions must\
    \ be placed in\n   the same topology as the primary service.\n   An effect of\
    \ topological dependency is that the availability of\n   service functions is\
    \ constrained.\n"
- title: 2.4.  Consistent Ordering of Service Functions
  contents:
  - "2.4.  Consistent Ordering of Service Functions\n   Service functions are typically\
    \ independent; service function_1\n   (SF1)...service function_n (SFn) are unrelated,\
    \ and there is no\n   notion at the service layer that SF1 occurs before SF2.\
    \  However, to\n   an administrator, many service functions have a strict ordering\
    \ that\n   must be in place, yet the administrator has no consistent way to\n\
    \   impose and verify the ordering of the service functions that are used\n  \
    \ to deliver a given service.  Furthermore, altering the order of a\n   deployed\
    \ chain is complex and cumbersome.\n"
- title: 2.5.  Application of Service Policy
  contents:
  - "2.5.  Application of Service Policy\n   Service functions rely on topology information\
    \ such as VLANs or\n   packet classification/reclassification to determine service\
    \ policy\n   selection, i.e., the service function specific action taken.\n  \
    \ Topology information is increasingly less viable due to scaling,\n   tenancy,\
    \ and complexity reasons.  Topology-centric information often\n   does not convey\
    \ adequate information to the service functions,\n   forcing functions to individually\
    \ perform more granular\n   classification.  In other words, the topology information\
    \ is not\n   granular enough, and its semantics is often overloaded.\n"
- title: 2.6.  Transport Dependence
  contents:
  - "2.6.  Transport Dependence\n   Service functions can and will be deployed in\
    \ networks with a range\n   of network transports, including network under and\
    \ overlays, such as\n   Ethernet, Generic Routing Encapsulation (GRE), Virtual\
    \ eXtensible\n   Local Area Network (VXLAN), MPLS, etc.  The coupling of service\n\
    \   functions to topology may require service functions to support many\n   transport\
    \ encapsulations or for a transport gateway function to be\n   present.\n"
- title: 2.7.  Elastic Service Delivery
  contents:
  - "2.7.  Elastic Service Delivery\n   Given that the current state of the art for\
    \ adding/removing service\n   functions largely centers around VLANs and routing\
    \ changes, rapid\n   changes to the deployed service capacity (increasing or decreasing)\n\
    \   can be hard to realize due to the risk and complexity of VLANs and/or\n  \
    \ routing modifications.\n"
- title: 2.8.  Traffic Selection Criteria
  contents:
  - "2.8.  Traffic Selection Criteria\n   Traffic selection is coarse; that is, all\
    \ traffic on a particular\n   segment traverses all service functions whether\
    \ or not the traffic\n   requires service enforcement.  This lack of traffic selection\
    \ is\n   largely due to the topological nature of service deployment since the\n\
    \   forwarding topology dictates how (and what) data traverses which\n   service\
    \ function(s).  In some deployments, more granular traffic\n   selection is achieved\
    \ using policy routing or access control\n   filtering.  This results in operationally\
    \ complex configurations and\n   is still relatively coarse and inflexible.\n"
- title: 2.9.  Limited End-to-End Service Visibility
  contents:
  - "2.9.  Limited End-to-End Service Visibility\n   Troubleshooting service-related\
    \ issues is a complex process that\n   involves both network-specific and service-specific\
    \ expertise.  This\n   is especially the case when service function chains span\
    \ multiple\n   data centers or cross administrative boundaries.  Furthermore,\
    \ the\n   physical and virtual environments (network and service) can be highly\n\
    \   divergent in terms of topology, and that topological variance adds to\n  \
    \ these challenges.\n"
- title: 2.10.  Classification/Reclassification per Service Function
  contents:
  - "2.10.  Classification/Reclassification per Service Function\n   Classification\
    \ occurs at each service function, independent from\n   previously applied service\
    \ functions since there are limited\n   mechanisms to share the detailed classification\
    \ information between\n   services.  The classification functionality often differs\
    \ between\n   service functions, and service functions may not leverage the\n\
    \   classification results from other service functions.\n"
- title: 2.11.  Symmetric Traffic Flows
  contents:
  - "2.11.  Symmetric Traffic Flows\n   Service function chains may be unidirectional\
    \ or bidirectional\n   depending on the state requirements of the service functions.\
    \  In a\n   unidirectional chain, traffic is passed through a set of service\n\
    \   functions in one forwarding direction only.  Bidirectional chains\n   require\
    \ traffic to be passed through a set of service functions in\n   both forwarding\
    \ directions.  Many common service functions such as\n   DPI and firewalls often\
    \ require bidirectional chaining in order to\n   ensure flow state is consistent.\n\
    \   Existing service deployment models provide a static approach to\n   realizing\
    \ forward and reverse associations of service function\n   chains, most often\
    \ requiring complex configuration of each network\n   device throughout the SFC.\
    \  In other words, the same complex network\n   configuration must be in place\
    \ for both \"directions\" of the traffic,\n   effectively doubling the configuration\
    \ and associated testing.\n   Further, if partial symmetry is required (i.e.,\
    \ only some of the\n   services in the chain required symmetry), the network configuration\n\
    \   complexity increases since the operator must ensure that the\n   exceptions\
    \ -- the services that do not need the symmetry flow -- are\n   handled correctly\
    \ via unique configuration to account for their\n   requirements.\n"
- title: 2.12.  Multi-vendor Service Functions
  contents:
  - "2.12.  Multi-vendor Service Functions\n   Deploying service functions from multiple\
    \ vendors often requires per-\n   vendor expertise (insertion models differ, common\
    \ attributes are few,\n   and inter-vendor service functions do not share information),\
    \ hence\n   standards are needed to ensure interoperability.\n"
- title: 3.  Service Function Chaining
  contents:
  - "3.  Service Function Chaining\n   Service function chaining aims to address the\
    \ aforementioned problems\n   associated with service deployment.  Concretely,\
    \ the SFC working\n   group will investigate solutions that address the following\
    \ elements.\n"
- title: 3.1.  Service Overlay
  contents:
  - "3.1.  Service Overlay\n   Service function chaining utilizes a service-specific\
    \ overlay that\n   creates the service topology.  The service overlay provides\
    \ service\n   function connectivity, built \"on top\" of the existing network\n\
    \   topology.  It allows operators to use whatever overlay or underlay\n   they\
    \ prefer to create a path between service functions and to locate\n   service\
    \ functions in the network as needed.\n   Within the service topology, service\
    \ functions can be viewed as\n   resources for consumption and an arbitrary topology\
    \ constructed to\n   connect those resources in a required order.  Adding new\
    \ service\n   functions to the topology is easily accomplished, and no underlying\n\
    \   network changes are required.\n   Lastly, the service overlay can provide\
    \ service-specific information\n   needed for troubleshooting service-related\
    \ issues.\n"
- title: 3.2.  Service Classification
  contents:
  - "3.2.  Service Classification\n   Classification is used to select which traffic\
    \ enters a service\n   overlay.  The granularity of the classification varies\
    \ based on\n   device capabilities, customer requirements, and services offered.\n\
    \   Initial classification determines the service function chain required\n  \
    \ to process the traffic.  Subsequent classification can be used within\n   a\
    \ given service function chain to alter the sequence of service\n   functions\
    \ applied.  Symmetric classification ensures that forward and\n   reverse chains\
    \ are in place.  Similarly, asymmetric -- relative to\n   required service function\
    \ -- chains can be achieved via service\n   classification.\n"
- title: 3.3.  SFC Encapsulation
  contents:
  - "3.3.  SFC Encapsulation\n   The SFC encapsulation enables the creation of a service\
    \ chain in the\n   data plane and can convey information about the chain such\
    \ as chain\n   identification and OAM status.\n   The SFC encapsulation also carries\
    \ data-plane metadata that provides\n   the ability to exchange information between\
    \ logical classification\n   points and service functions (and vice versa) and\
    \ between service\n   functions.  Metadata is not used as forwarding information\
    \ to deliver\n   packets along the service overlay.\n   Metadata can include the\
    \ result of antecedent classification and/or\n   information from external sources.\
    \  Service functions utilize\n   metadata, as required, for localized policy decisions.\n\
    \   In addition to sharing of information, the use of metadata addresses\n   several\
    \ of the issues raised in Section 2, most notably by decoupling\n   policy from\
    \ the network topology, and by removing the need for\n   classification (and reclassification)\
    \ per service function as\n   described in Section 2.10.\n   A common approach\
    \ to service metadata creates a foundation for\n   interoperability between service\
    \ functions, regardless of vendor.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Although this problem statement does not introduce\
    \ any protocols,\n   when considering service function chaining, the three main\
    \ areas\n   begin investigated (see Section 3) by the WG have security aspects\n\
    \   that warrant consideration.\n   Service Overlay:  The service overlay will\
    \ be constructed using\n      existing transport protocols (e.g., MPLS, VXLAN)\
    \ and as such is\n      subject to the security specifics of the transport selected.\
    \  If\n      an operator requires authenticity and/or confidentiality in the\n\
    \      service overlay, a transport (e.g., IPsec) that provides such\n      functionally\
    \ can be used.\n   Classification:  Since classification is used to select the\n\
    \      appropriate service overlay and the required service encapsulation\n  \
    \    details, classification policy must be both accurate and trusted.\n     \
    \ Conveying the policy to an SFC edge node (a node that forms the\n      logical\
    \ boundary of an SFC domain) may be done via a multitude of\n      methods depending\
    \ on an operator's existing provisioning practices\n      and security posture.\n\
    \      Additionally, traffic entering the SFC domain and being classified\n  \
    \    may be encrypted, thus limiting the granularity of classification.\n    \
    \  The use of pervasive encryption varies based on type of traffic,\n      environment,\
    \ and level of operator control.  For instance, a large\n      enterprise can\
    \ mandate how encryption is used by its users,\n      whereas a broadband provider\
    \ likely does not have the ability to\n      do so.\n      The use of encrypted\
    \ traffic, however, does not obviate the need\n      for SFC (nor the problems\
    \ associated with current deployment\n      models described herein); rather,\
    \ when encrypted traffic must be\n      classified, the granularity of such classification\
    \ must adapt.  In\n      such cases, service overlay selection might occur using\
    \ outer\n      (i.e., unencrypted) header information (in the presence of\n  \
    \    encryption) or external information about the packets.\n   SFC Encapsulation:\
    \  As described in Section 3, the SFC encapsulation\n      carries information\
    \ about the SFC and data-plane metadata.\n      Depending on the environment and\
    \ security posture, the SFC\n      encapsulation might need to be authenticated\
    \ and/or encrypted.\n      The use of an appropriate overlay transport (as described\
    \ above)\n      can provide data-plane confidentiality and authenticity.\n   \
    \   The exchange of SFC encapsulation data such as metadata must\n      originate\
    \ from trusted source(s).  Also, if needed, authentication\n      and confidentiality\
    \ protection should be provided during the\n      exchange to the various SFC\
    \ nodes.\n   SFC and Multi-tenancy:  If tenant isolation is required in an SFC\n\
    \      deployment, an appropriate network transport overlay that provides\n  \
    \    adequate isolation and identification can be used.  Additionally,\n     \
    \ tenancy might be used in the selection of the appropriate service\n      chain;\
    \ however, as stated, the network overlay is still required\n      to provide\
    \ transport isolation.  SF deployment and how specific\n      SFs might or might\
    \ not be allocated per tenant are outside the\n      scope of this document.\n\
    \   The SFC Architecture document [SFC-ARCH] presents a more complete\n   review\
    \ of the security implications of a complete SFC architecture.\n"
- title: 5.  Informative References
  contents:
  - "5.  Informative References\n   [RFC3022]  Srisuresh, P. and K. Egevang, \"Traditional\
    \ IP Network\n              Address Translator (Traditional NAT)\", RFC 3022,\
    \ January\n              2001, <http://www.rfc-editor.org/info/rfc3022>.\n   [RFC6146]\
    \  Bagnulo, M., Matthews, P., and I. van Beijnum, \"Stateful\n              NAT64:\
    \ Network Address and Protocol Translation from IPv6\n              Clients to\
    \ IPv4 Servers\", RFC 6146, April 2011,\n              <http://www.rfc-editor.org/info/rfc6146>.\n\
    \   [SFC-ARCH]\n              Halpern, J. and C. Pignataro, \"Service Function\
    \ Chaining\n              (SFC) Architecture\", Work in Progress, draft-ietf-sfc-\n\
    \              architecture-07, March 2015.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors would like to thank David Ward, Rex Fernando,\
    \ David\n   McDysan, Jamal Hadi Salim, Charles Perkins, Andre Beliveau, Joel\n\
    \   Halpern, and Jim French for their reviews and comments.\n   Additionally,\
    \ the authors would like to thank the IESG and Benjamin\n   Kaduk for their detailed\
    \ reviews and suggestions.\n"
- title: Contributors
  contents:
  - "Contributors\n   The following people are active contributors to this document\
    \ and\n   have provided review, content and concepts (listed alphabetically by\n\
    \   surname):\n   Puneet Agarwal\n   Broadcom\n   EMail: pagarwal@broadcom.com\n\
    \   Mohamed Boucadair\n   France Telecom\n   EMail: mohamed.boucadair@orange.com\n\
    \   Abhishek Chauhan\n   Citrix\n   EMail: Abhishek.Chauhan@citrix.com\n   Uri\
    \ Elzur\n   Intel\n   EMail: uri.elzur@intel.com\n   Kevin Glavin\n   Riverbed\n\
    \   EMail: Kevin.Glavin@riverbed.com\n   Ken Gray\n   Cisco Systems\n   EMail:\
    \ kegray@cisco.com\n   Jim Guichard\n   Cisco Systems\n   EMail:jguichar@cisco.com\n\
    \   Christian Jacquenet\n   France Telecom\n   EMail: christian.jacquenet@orange.com\n\
    \   Surendra Kumar\n   Cisco Systems\n   EMail: smkumar@cisco.com\n   Nic Leymann\n\
    \   Deutsche Telekom\n   EMail: n.leymann@telekom.de\n   Darrel Lewis\n   Cisco\
    \ Systems\n   EMail: darlewis@cisco.com\n   Rajeev Manur\n   Broadcom\n   EMail:rmanur@broadcom.com\n\
    \   Brad McConnell\n   Rackspace\n   EMail: bmcconne@rackspace.com\n   Carlos\
    \ Pignataro\n   Cisco Systems\n   EMail: cpignata@cisco.com\n   Michael Smith\n\
    \   Cisco Systems\n   EMail: michsmit@cisco.com\n   Navindra Yadav\n   Cisco Systems\n\
    \   EMail: nyadav@cisco.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Paul Quinn (editor)\n   Cisco Systems, Inc.\n   EMail:\
    \ paulq@cisco.com\n   Thomas Nadeau (editor)\n   Brocade\n   EMail: tnadeau@lucidvision.com\n"
