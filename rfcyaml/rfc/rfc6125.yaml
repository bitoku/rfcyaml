- contents:
  - "  Representation and Verification of Domain-Based Application Service\n Identity
    within Internet Public Key Infrastructure Using X.509 (PKIX)\n     Certificates
    in the Context of Transport Layer Security (TLS)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   Many application technologies enable secure communication between
    two\n   entities by means of Internet Public Key Infrastructure Using X.509\n
    \  (PKIX) certificates in the context of Transport Layer Security (TLS).\n   This
    document specifies procedures for representing and verifying the\n   identity
    of application services in such interactions.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6125.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n     1.1.  Motivation . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n     1.2.  Audience . . . . . . . . . . . . . . . . . . . . . . .
    . .  4\n     1.3.  How to Read This Document  . . . . . . . . . . . . . . . .
    \ 4\n     1.4.  Applicability  . . . . . . . . . . . . . . . . . . . . . .  5\n
    \    1.5.  Overview of Recommendations  . . . . . . . . . . . . . . .  5\n     1.6.
    \ Generalization from Current Technologies . . . . . . . . .  6\n     1.7.  Scope
    \ . . . . . . . . . . . . . . . . . . . . . . . . . .  7\n       1.7.1.  In Scope
    . . . . . . . . . . . . . . . . . . . . . . .  7\n       1.7.2.  Out of Scope
    . . . . . . . . . . . . . . . . . . . . .  7\n     1.8.  Terminology  . . . .
    . . . . . . . . . . . . . . . . . . .  9\n   2.  Naming of Application Services
    . . . . . . . . . . . . . . . . 13\n     2.1.  Naming Application Services  .
    . . . . . . . . . . . . . . 13\n     2.2.  DNS Domain Names . . . . . . . . .
    . . . . . . . . . . . . 14\n     2.3.  Subject Naming in PKIX Certificates  .
    . . . . . . . . . . 15\n       2.3.1.  Implementation Notes . . . . . . . . .
    . . . . . . . . 17\n   3.  Designing Application Protocols  . . . . . . . . .
    . . . . . . 18\n   4.  Representing Server Identity . . . . . . . . . . . . .
    . . . . 18\n     4.1.  Rules  . . . . . . . . . . . . . . . . . . . . . . . .
    . . 18\n     4.2.  Examples . . . . . . . . . . . . . . . . . . . . . . . . .
    20\n   5.  Requesting Server Certificates . . . . . . . . . . . . . . . . 21\n
    \  6.  Verifying Service Identity . . . . . . . . . . . . . . . . . . 21\n     6.1.
    \ Overview . . . . . . . . . . . . . . . . . . . . . . . . . 21\n     6.2.  Constructing
    a List of Reference Identifiers . . . . . . . 22\n       6.2.1.  Rules  . . .
    . . . . . . . . . . . . . . . . . . . . . 22\n       6.2.2.  Examples . . . .
    . . . . . . . . . . . . . . . . . . . 24\n     6.3.  Preparing to Seek a Match
    \ . . . . . . . . . . . . . . . . 25\n     6.4.  Matching the DNS Domain Name
    Portion . . . . . . . . . . . 26\n       6.4.1.  Checking of Traditional Domain
    Names . . . . . . . . . 27\n       6.4.2.  Checking of Internationalized Domain
    Names . . . . . . 27\n       6.4.3.  Checking of Wildcard Certificates  . . .
    . . . . . . . 27\n       6.4.4.  Checking of Common Names . . . . . . . . . .
    . . . . . 28\n     6.5.  Matching the Application Service Type Portion  . . .
    . . . 28\n       6.5.1.  SRV-ID . . . . . . . . . . . . . . . . . . . . . . .
    . 29\n       6.5.2.  URI-ID . . . . . . . . . . . . . . . . . . . . . . . . 29\n
    \    6.6.  Outcome  . . . . . . . . . . . . . . . . . . . . . . . . . 29\n       6.6.1.
    \ Case #1: Match Found . . . . . . . . . . . . . . . . . 29\n       6.6.2.  Case
    #2: No Match Found, Pinned Certificate  . . . . . 29\n       6.6.3.  Case #3:
    No Match Found, No Pinned Certificate . . . . 30\n       6.6.4.  Fallback . .
    . . . . . . . . . . . . . . . . . . . . . 30\n   7.  Security Considerations  .
    . . . . . . . . . . . . . . . . . . 30\n     7.1.  Pinned Certificates  . . .
    . . . . . . . . . . . . . . . . 30\n     7.2.  Wildcard Certificates  . . . .
    . . . . . . . . . . . . . . 31\n     7.3.  Internationalized Domain Names . .
    . . . . . . . . . . . . 32\n     7.4.  Multiple Identifiers . . . . . . . . .
    . . . . . . . . . . 32\n   8.  Contributors . . . . . . . . . . . . . . . . .
    . . . . . . . . 33\n   9.  Acknowledgements . . . . . . . . . . . . . . . . .
    . . . . . . 33\n   10. References . . . . . . . . . . . . . . . . . . . . . .
    . . . . 34\n     10.1. Normative References . . . . . . . . . . . . . . . . .
    . . 34\n     10.2. Informative References . . . . . . . . . . . . . . . . . .
    34\n   Appendix A.  Sample Text . . . . . . . . . . . . . . . . . . . . . 40\n
    \  Appendix B.  Prior Art . . . . . . . . . . . . . . . . . . . . . . 42\n     B.1.
    \ IMAP, POP3, and ACAP (1999)  . . . . . . . . . . . . . . . 42\n     B.2.  HTTP
    (2000)  . . . . . . . . . . . . . . . . . . . . . . . 43\n     B.3.  LDAP (2000/2006)
    . . . . . . . . . . . . . . . . . . . . . 44\n     B.4.  SMTP (2002/2007) . .
    . . . . . . . . . . . . . . . . . . . 47\n     B.5.  XMPP (2004)  . . . . . .
    . . . . . . . . . . . . . . . . . 49\n     B.6.  NNTP (2006)  . . . . . . . .
    . . . . . . . . . . . . . . . 50\n     B.7.  NETCONF (2006/2009)  . . . . . .
    . . . . . . . . . . . . . 51\n     B.8.  Syslog (2009)  . . . . . . . . . . .
    . . . . . . . . . . . 52\n     B.9.  SIP (2010) . . . . . . . . . . . . . . .
    . . . . . . . . . 54\n     B.10. SNMP (2010)  . . . . . . . . . . . . . . . .
    . . . . . . . 55\n     B.11. GIST (2010)  . . . . . . . . . . . . . . . . . .
    . . . . . 55\n"
  title: Table of Contents
- contents:
  - '1.  Introduction

    '
  - contents:
    - "1.1.  Motivation\n   The visible face of the Internet largely consists of services
      that\n   employ a client-server architecture in which an interactive or\n   automated
      client communicates with an application service in order to\n   retrieve or
      upload information, communicate with other entities, or\n   access a broader
      network of services.  When a client communicates\n   with an application service
      using Transport Layer Security [TLS] or\n   Datagram Transport Layer Security
      [DTLS], it references some notion\n   of the server's identity (e.g., \"the
      website at example.com\") while\n   attempting to establish secure communication.
      \ Likewise, during TLS\n   negotiation, the server presents its notion of the
      service's identity\n   in the form of a public-key certificate that was issued
      by a\n   certification authority (CA) in the context of the Internet Public\n
      \  Key Infrastructure using X.509 [PKIX].  Informally, we can think of\n   these
      identities as the client's \"reference identity\" and the\n   server's \"presented
      identity\" (these rough ideas are defined more\n   precisely later in this document
      through the concept of particular\n   identifiers).  In general, a client needs
      to verify that the server's\n   presented identity matches its reference identity
      so it can\n   authenticate the communication.\n   Many application technologies
      adhere to the pattern just outlined.\n   Such protocols have traditionally specified
      their own rules for\n   representing and verifying application service identity.\n
      \  Unfortunately, this divergence of approaches has caused some\n   confusion
      among certification authorities, application developers,\n   and protocol designers.\n
      \  Therefore, to codify secure procedures for the implementation and\n   deployment
      of PKIX-based authentication, this document specifies\n   recommended procedures
      for representing and verifying application\n   service identity in certificates
      intended for use in application\n   protocols employing TLS.\n"
    title: 1.1.  Motivation
  - contents:
    - "1.2.  Audience\n   The primary audience for this document consists of application\n
      \  protocol designers, who can reference this document instead of\n   defining
      their own rules for the representation and verification of\n   application service
      identity.  Secondarily, the audience consists of\n   certification authorities,
      service providers, and client developers\n   from technology communities that
      might reuse the recommendations in\n   this document when defining certificate
      issuance policies, generating\n   certificate signing requests, or writing software
      algorithms for\n   identity matching.\n"
    title: 1.2.  Audience
  - contents:
    - "1.3.  How to Read This Document\n   This document is longer than the authors
      would have liked because it\n   was necessary to carefully define terminology,
      explain the underlying\n   concepts, define the scope, and specify recommended
      behavior for both\n   certification authorities and application software implementations.\n
      \  The following sections are of special interest to various audiences:\n   o
      \ Protocol designers might want to first read the checklist in\n      Section
      3.\n   o  Certification authorities might want to first read the\n      recommendations
      for representation of server identity in\n      Section 4.\n   o  Service providers
      might want to first read the recommendations for\n      requesting of server
      certificates in Section 5.\n   o  Software implementers might want to first
      read the recommendations\n      for verification of server identity in Section
      6.\n   The sections on terminology (Section 1.8), naming of application\n   services
      (Section 2), document scope (Section 1.7), and the like\n   provide useful background
      information regarding the recommendations\n   and guidelines that are contained
      in the above-referenced sections,\n   but are not absolutely necessary for a
      first reading of this\n   document.\n"
    title: 1.3.  How to Read This Document
  - contents:
    - "1.4.  Applicability\n   This document does not supersede the rules for certificate
      issuance\n   or validation provided in [PKIX].  Therefore, [PKIX] is authoritative\n
      \  on any point that might also be discussed in this document.\n   Furthermore,
      [PKIX] also governs any certificate-related topic on\n   which this document
      is silent, including but not limited to\n   certificate syntax, certificate
      extensions such as name constraints\n   and extended key usage, and handling
      of certification paths.\n   This document addresses only name forms in the leaf
      \"end entity\"\n   server certificate, not any name forms in the chain of certificates\n
      \  used to validate the server certificate.  Therefore, in order to\n   ensure
      proper authentication, application clients need to verify the\n   entire certification
      path per [PKIX].\n   This document also does not supersede the rules for verifying
      service\n   identity provided in specifications for existing application\n   protocols
      published prior to this document, such as those excerpted\n   under Appendix
      B.  However, the procedures described here can be\n   referenced by future specifications,
      including updates to\n   specifications for existing application protocols if
      the relevant\n   technology communities agree to do so.\n"
    title: 1.4.  Applicability
  - contents:
    - "1.5.  Overview of Recommendations\n   To orient the reader, this section provides
      an informational overview\n   of the recommendations contained in this document.\n
      \  For the primary audience of application protocol designers, this\n   document
      provides recommended procedures for the representation and\n   verification
      of application service identity within PKIX certificates\n   used in the context
      of TLS.\n   For the secondary audiences, in essence this document encourages\n
      \  certification authorities, application service providers, and\n   application
      client developers to coalesce on the following practices:\n   o  Move away from
      including and checking strings that look like\n      domain names in the subject's
      Common Name.\n   o  Move toward including and checking DNS domain names via
      the\n      subjectAlternativeName extension designed for that purpose:\n      dNSName.\n
      \  o  Move toward including and checking even more specific\n      subjectAlternativeName
      extensions where appropriate for using the\n      protocol (e.g., uniformResourceIdentifier
      and the otherName form\n      SRVName).\n   o  Move away from the issuance of
      so-called wildcard certificates\n      (e.g., a certificate containing an identifier
      for\n      \"*.example.com\").\n   These suggestions are not entirely consistent
      with all practices that\n   are currently followed by certification authorities,
      client\n   developers, and service providers.  However, they reflect the best\n
      \  aspects of current practices and are expected to become more widely\n   adopted
      in the coming years.\n"
    title: 1.5.  Overview of Recommendations
  - contents:
    - "1.6.  Generalization from Current Technologies\n   This document attempts to
      generalize best practices from the many\n   application technologies that currently
      use PKIX certificates with\n   TLS.  Such technologies include, but are not
      limited to:\n   o  The Internet Message Access Protocol [IMAP] and the Post
      Office\n      Protocol [POP3]; see also [USINGTLS]\n   o  The Hypertext Transfer
      Protocol [HTTP]; see also [HTTP-TLS]\n   o  The Lightweight Directory Access
      Protocol [LDAP]; see also\n      [LDAP-AUTH] and its predecessor [LDAP-TLS]\n
      \  o  The Simple Mail Transfer Protocol [SMTP]; see also [SMTP-AUTH] and\n      [SMTP-TLS]\n
      \  o  The Extensible Messaging and Presence Protocol [XMPP]; see also\n      [XMPP-OLD]\n
      \  o  The Network News Transfer Protocol [NNTP]; see also [NNTP-TLS]\n   o  The
      NETCONF Configuration Protocol [NETCONF]; see also\n      [NETCONF-SSH] and
      [NETCONF-TLS]\n   o  The Syslog Protocol [SYSLOG]; see also [SYSLOG-TLS] and\n
      \     [SYSLOG-DTLS]\n   o  The Session Initiation Protocol [SIP]; see also [SIP-CERTS]\n
      \  o  The Simple Network Management Protocol [SNMP]; see also [SNMP-TLS]\n   o
      \ The General Internet Signalling Transport [GIST]\n   However, as noted, this
      document does not supersede the rules for\n   verifying service identity provided
      in specifications for those\n   application protocols.\n"
    title: 1.6.  Generalization from Current Technologies
  - contents:
    - '1.7.  Scope

      '
    - contents:
      - "1.7.1.  In Scope\n   This document applies only to service identities associated
        with\n   fully qualified DNS domain names, only to TLS and DTLS (or the older\n
        \  Secure Sockets Layer (SSL) technology), and only to PKIX-based\n   systems.
        \ As a result, the scenarios described in the following\n   section are out
        of scope for this specification (although they might\n   be addressed by future
        specifications).\n"
      title: 1.7.1.  In Scope
    - contents:
      - "1.7.2.  Out of Scope\n   The following topics are out of scope for this specification:\n
        \  o  Client or end-user identities.\n      Certificates representing client
        or end-user identities (e.g., the\n      rfc822Name identifier) can be used
        for mutual authentication\n      between a client and server or between two
        clients, thus enabling\n      stronger client-server security or end-to-end
        security.  However,\n      certification authorities, application developers,
        and service\n      operators have less experience with client certificates
        than with\n      server certificates, thus giving us fewer models from which
        to\n      generalize and a less solid basis for defining best practices.\n
        \  o  Identifiers other than fully qualified DNS domain names.\n      Some
        certification authorities issue server certificates based on\n      IP addresses,
        but preliminary evidence indicates that such\n      certificates are a very
        small percentage (less than 1%) of issued\n      certificates.  Furthermore,
        IP addresses are not necessarily\n      reliable identifiers for application
        services because of the\n      existence of private internets [PRIVATE], host
        mobility, multiple\n      interfaces on a given host, Network Address Translators
        (NATs)\n      resulting in different addresses for a host from different\n
        \     locations on the network, the practice of grouping many hosts\n      together
        behind a single IP address, etc.  Most fundamentally,\n      most users find
        DNS domain names much easier to work with than IP\n      addresses, which
        is why the domain name system was designed in the\n      first place.  We
        prefer to define best practices for the much more\n      common use case and
        not to complicate the rules in this\n      specification.\n      Furthermore,
        we focus here on application service identities, not\n      specific resources
        located at such services.  Therefore this\n      document discusses Uniform
        Resource Identifiers [URI] only as a\n      way to communicate a DNS domain
        name (via the URI \"host\" component\n      or its equivalent), not as a way
        to communicate other aspects of a\n      service such as a specific resource
        (via the URI \"path\" component)\n      or parameters (via the URI \"query\"
        component).\n      We also do not discuss attributes unrelated to DNS domain
        names,\n      such as those defined in [X.520] and other such specifications\n
        \     (e.g., organizational attributes, geographical attributes, company\n
        \     logos, and the like).\n   o  Security protocols other than [TLS], [DTLS],
        or the older Secure\n      Sockets Layer (SSL) technology.\n      Although
        other secure, lower-layer protocols exist and even employ\n      PKIX certificates
        at times (e.g., IPsec [IPSEC]), their use cases\n      can differ from those
        of TLS-based and DTLS-based application\n      technologies.  Furthermore,
        application technologies have less\n      experience with IPsec than with
        TLS, thus making it more difficult\n      to gather feedback on proposed best
        practices.\n   o  Keys or certificates employed outside the context of PKIX-based\n
        \     systems.\n      Some deployed application technologies use a web of
        trust model\n      based on or similar to OpenPGP [OPENPGP], or use self-signed\n
        \     certificates, or are deployed on networks that are not directly\n      connected
        to the public Internet and therefore cannot depend on\n      Certificate Revocation
        Lists (CRLs) or the Online Certificate\n      Status Protocol [OCSP] to check
        CA-issued certificates.  However,\n      the method for binding a public key
        to an identifier in OpenPGP\n      differs essentially from the method in
        X.509, the data in self-\n      signed certificates has not been certified
        by a third party in any\n      way, and checking of CA-issued certificates
        via CRLs or OCSP is\n      critically important to maintaining the security
        of PKIX-based\n      systems.  Attempting to define best practices for such\n
        \     technologies would unduly complicate the rules defined in this\n      specification.\n
        \  o  Certification authority policies, such as:\n      *  What types or \"classes\"
        of certificates to issue and whether to\n         apply different policies
        for them (e.g., allow the wildcard\n         character in certificates issued
        to individuals who have\n         provided proof of identity but do not allow
        the wildcard\n         character in \"Extended Validation\" certificates [EV-CERTS]).\n
        \     *  Whether to issue certificates based on IP addresses (or some\n         other
        form, such as relative domain names) in addition to fully\n         qualified
        DNS domain names.\n      *  Which identifiers to include (e.g., whether to
        include SRV-IDs\n         or URI-IDs as defined in the body of this specification).\n
        \     *  How to certify or validate fully qualified DNS domain names and\n
        \        application service types.\n      *  How to certify or validate other
        kinds of information that\n         might be included in a certificate (e.g.,
        organization name).\n   o  Resolution of DNS domain names.\n      Although
        the process whereby a client resolves the DNS domain name\n      of an application
        service can involve several steps (e.g., this is\n      true of resolutions
        that depend on DNS SRV resource records,\n      Naming Authority Pointer (NAPTR)
        DNS resource records [NAPTR], and\n      related technologies such as [S-NAPTR]),
        for our purposes we care\n      only about the fact that the client needs
        to verify the identity\n      of the entity with which it communicates as
        a result of the\n      resolution process.  Thus the resolution process itself
        is out of\n      scope for this specification.\n   o  User interface issues.\n
        \     In general, such issues are properly the responsibility of client\n
        \     software developers and standards development organizations\n      dedicated
        to particular application technologies (see, for\n      example, [WSC-UI]).\n"
      title: 1.7.2.  Out of Scope
    title: 1.7.  Scope
  - contents:
    - "1.8.  Terminology\n   Because many concepts related to \"identity\" are often
      too vague to be\n   actionable in application protocols, we define a set of
      more concrete\n   terms for use in this specification.\n   application service:
      \ A service on the Internet that enables\n      interactive and automated clients
      to connect for the purpose of\n      retrieving or uploading information, communicating
      with other\n      entities, or connecting to a broader network of services.\n
      \  application service provider:  An organization or individual that\n      hosts
      or deploys an application service.\n   application service type:  A formal identifier
      for the application\n      protocol used to provide a particular kind of application
      service\n      at a domain; the application service type typically takes the
      form\n      of a Uniform Resource Identifier scheme [URI] or a DNS SRV Service\n
      \     [DNS-SRV].\n   attribute-type-and-value pair:  A colloquial name for the
      ASN.1-based\n      construction comprising a Relative Distinguished Name (RDN),
      which\n      itself is a building-block component of Distinguished Names.  See\n
      \     Section 2 of [LDAP-DN].\n   automated client:  A software agent or device
      that is not directly\n      controlled by a human user.\n   delegated domain:
      \ A domain name or host name that is explicitly\n      configured for communicating
      with the source domain, by either (a)\n      the human user controlling an interactive
      client or (b) a trusted\n      administrator.  In case (a), one example of delegation
      is an\n      account setup that specifies the domain name of a particular host\n
      \     to be used for retrieving information or connecting to a network,\n      which
      might be different from the server portion of the user's\n      account name
      (e.g., a server at mailhost.example.com for\n      connecting to an IMAP server
      hosting an email address of\n      juliet@example.com).  In case (b), one example
      of delegation is an\n      admin-configured host-to-address/address-to-host
      lookup table.\n   derived domain:  A domain name or host name that a client
      has derived\n      from the source domain in an automated fashion (e.g., by
      means of\n      a [DNS-SRV] lookup).\n   identifier:  A particular instance
      of an identifier type that is\n      either presented by a server in a certificate
      or referenced by a\n      client for matching purposes.\n   identifier type:
      \ A formally defined category of identifier that can\n      be included in a
      certificate and therefore that can also be used\n      for matching purposes.
      \ For conciseness and convenience, we define\n      the following identifier
      types of interest, which are based on\n      those found in the PKIX specification
      [PKIX] and various PKIX\n      extensions.\n      *  CN-ID = a Relative Distinguished
      Name (RDN) in the certificate\n         subject field that contains one and
      only one attribute-type-\n         and-value pair of type Common Name (CN),
      where the value\n         matches the overall form of a domain name (informally,
      dot-\n         separated letter-digit-hyphen labels); see [PKIX] and also\n
      \        [LDAP-SCHEMA]\n      *  DNS-ID = a subjectAltName entry of type dNSName;
      see [PKIX]\n      *  SRV-ID = a subjectAltName entry of type otherName whose
      name\n         form is SRVName; see [SRVNAME]\n      *  URI-ID = a subjectAltName
      entry of type\n         uniformResourceIdentifier whose value includes both
      (i) a\n         \"scheme\" and (ii) a \"host\" component (or its equivalent)
      that\n         matches the \"reg-name\" rule (where the quoted terms represent\n
      \        the associated [ABNF] productions from [URI]); see [PKIX] and\n         [URI]\n
      \  interactive client:  A software agent or device that is directly\n      controlled
      by a human user.  (Other specifications related to\n      security and application
      protocols, such as [WSC-UI], often refer\n      to this entity as a \"user agent\".)\n
      \  pinning:  The act of establishing a cached name association between\n      the
      application service's certificate and one of the client's\n      reference identifiers,
      despite the fact that none of the presented\n      identifiers matches the given
      reference identifier.  Pinning is\n      accomplished by allowing a human user
      to positively accept the\n      mismatch during an attempt to communicate with
      the application\n      service.  Once a cached name association is established,
      the\n      certificate is said to be pinned to the reference identifier and\n
      \     in future communication attempts the client simply verifies that\n      the
      service's presented certificate matches the pinned\n      certificate, as described
      under Section 6.6.2.  (A similar\n      definition of \"pinning\" is provided
      in [WSC-UI].)\n   PKIX:  PKIX is a short name for the Internet Public Key\n
      \     Infrastructure using X.509 defined in RFC 5280 [PKIX], which\n      comprises
      a profile of the X.509v3 certificate specifications and\n      X.509v2 certificate
      revocation list (CRL) specifications for use\n      in the Internet.\n   PKIX-based
      system:  A software implementation or deployed service\n      that makes use
      of X.509v3 certificates and X.509v2 certificate\n      revocation lists (CRLs).\n
      \  PKIX certificate:  An X.509v3 certificate generated and employed in\n      the
      context of PKIX.\n   presented identifier:  An identifier that is presented
      by a server to\n      a client within a PKIX certificate when the client attempts
      to\n      establish secure communication with the server; the certificate\n
      \     can include one or more presented identifiers of different types,\n      and
      if the server hosts more than one domain then the certificate\n      might present
      distinct identifiers for each domain.\n   reference identifier:  An identifier,
      constructed from a source\n      domain and optionally an application service
      type, used by the\n      client for matching purposes when examining presented
      identifiers.\n   source domain:  The fully qualified DNS domain name that a
      client\n      expects an application service to present in the certificate\n
      \     (e.g., \"www.example.com\"), typically input by a human user,\n      configured
      into a client, or provided by reference such as in a\n      hyperlink.  The
      combination of a source domain and, optionally, an\n      application service
      type enables a client to construct one or more\n      reference identifiers.\n
      \  subjectAltName entry:  An identifier placed in a subjectAltName\n      extension.\n
      \  subjectAltName extension:  A standard PKIX certificate extension\n      [PKIX]
      enabling identifiers of various types to be bound to the\n      certificate
      subject -- in addition to, or in place of, identifiers\n      that may be embedded
      within or provided as a certificate's subject\n      field.\n   subject field:
      \ The subject field of a PKIX certificate identifies\n      the entity associated
      with the public key stored in the subject\n      public key field (see Section
      4.1.2.6 of [PKIX]).\n   subject name:  In an overall sense, a subject's name(s)
      can be\n      represented by or in the subject field, the subjectAltName\n      extension,
      or both (see [PKIX] for details).  More specifically,\n      the term often
      refers to the name of a PKIX certificate's subject,\n      encoded as the X.501
      type Name and conveyed in a certificate's\n      subject field (see Section
      4.1.2.6 of [PKIX]).\n   TLS client:  An entity that assumes the role of a client
      in a\n      Transport Layer Security [TLS] negotiation.  In this specification\n
      \     we generally assume that the TLS client is an (interactive or\n      automated)
      application client; however, in application protocols\n      that enable server-to-server
      communication, the TLS client could\n      be a peer application service.\n
      \  TLS server:  An entity that assumes the role of a server in a\n      Transport
      Layer Security [TLS] negotiation; in this specification\n      we assume that
      the TLS server is an application service.\n   Most security-related terms in
      this document are to be understood in\n   the sense defined in [SECTERMS]; such
      terms include, but are not\n   limited to, \"attack\", \"authentication\", \"authorization\",\n
      \  \"certification authority\", \"certification path\", \"certificate\",\n   \"credential\",
      \"identity\", \"self-signed certificate\", \"trust\", \"trust\n   anchor\",
      \"trust chain\", \"validate\", and \"verify\".\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this
      document are to be interpreted as described in RFC\n   2119 [KEYWORDS].\n"
    title: 1.8.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Naming of Application Services\n   This section discusses naming of application
    services on the\n   Internet, followed by a brief tutorial about subject naming
    in PKIX.\n"
  - contents:
    - "2.1.  Naming Application Services\n   This specification assumes that the name
      of an application service is\n   based on a DNS domain name (e.g., \"example.com\")
      -- supplemented in\n   some circumstances by an application service type (e.g.,
      \"the IMAP\n   server at example.com\").\n   From the perspective of the application
      client or user, some names\n   are direct because they are provided directly
      by a human user (e.g.,\n   via runtime input, prior configuration, or explicit
      acceptance of a\n   client communication attempt), whereas other names are indirect\n
      \  because they are automatically resolved by the client based on user\n   input
      (e.g., a target name resolved from a source name using DNS SRV\n   or NAPTR
      records).  This dimension matters most for certificate\n   consumption, specifically
      verification as discussed in this document.\n   From the perspective of the
      application service, some names are\n   unrestricted because they can be used
      in any type of service (e.g., a\n   certificate might be reused for both the
      HTTP service and the IMAP\n   service at example.com), whereas other names are
      restricted because\n   they can be used in only one type of service (e.g., a
      special-purpose\n   certificate that can be used only for an IMAP service).
      \ This\n   dimension matters most for certificate issuance.\n   Therefore, we
      can categorize the identifier types of interest as\n   follows:\n   o  A CN-ID
      is direct and unrestricted.\n   o  A DNS-ID is direct and unrestricted.\n   o
      \ An SRV-ID can be either direct or (more typically) indirect, and\n      is
      restricted.\n   o  A URI-ID is direct and restricted.\n   We summarize this
      taxonomy in the following table.\n   +-----------+-----------+---------------+\n
      \  |           |  Direct   |  Restricted   |\n   +-----------+-----------+---------------+\n
      \  |  CN-ID    |  Yes      |  No           |\n   +-----------+-----------+---------------+\n
      \  |  DNS-ID   |  Yes      |  No           |\n   +-----------+-----------+---------------+\n
      \  |  SRV-ID   |  Either   |  Yes          |\n   +-----------+-----------+---------------+\n
      \  |  URI-ID   |  Yes      |  Yes          |\n   +-----------+-----------+---------------+\n
      \  When implementing software, deploying services, and issuing\n   certificates
      for secure PKIX-based authentication, it is important to\n   keep these distinctions
      in mind.  In particular, best practices\n   differ somewhat for application
      server implementations, application\n   client implementations, application
      service providers, and\n   certification authorities.  Ideally, protocol specifications
      that\n   reference this document will specify which identifiers are mandatory-\n
      \  to-implement by servers and clients, which identifiers ought to be\n   supported
      by certificate issuers, and which identifiers ought to be\n   requested by application
      service providers.  Because these\n   requirements differ across applications,
      it is impossible to\n   categorically stipulate universal rules (e.g., that
      all software\n   implementations, service providers, and certification authorities
      for\n   all application protocols need to use or support DNS-IDs as a\n   baseline
      for the purpose of interoperability).\n   However, it is preferable that each
      application protocol will at\n   least define a baseline that applies to the
      community of software\n   developers, application service providers, and CAs
      actively using or\n   supporting that technology (one such community, the CA/Browser
      Forum,\n   has codified such a baseline for \"Extended Validation Certificates\"\n
      \  in [EV-CERTS]).\n"
    title: 2.1.  Naming Application Services
  - contents:
    - "2.2.  DNS Domain Names\n   For the purposes of this specification, the name
      of an application\n   service is (or is based on) a DNS domain name that conforms
      to one of\n   the following forms:\n   1.  A \"traditional domain name\", i.e.,
      a fully qualified DNS domain\n       name or \"FQDN\" (see [DNS-CONCEPTS]) all
      of whose labels are \"LDH\n       labels\" as described in [IDNA-DEFS].  Informally,
      such labels are\n       constrained to [US-ASCII] letters, digits, and the hyphen,
      with\n       the hyphen prohibited in the first character position.\n       Additional
      qualifications apply (please refer to the above-\n       referenced specifications
      for details), but they are not relevant\n       to this specification.\n   2.
      \ An \"internationalized domain name\", i.e., a DNS domain name that\n       conforms
      to the overall form of a domain name (informally, dot-\n       separated letter-digit-hyphen
      labels) but includes at least one\n       label containing appropriately encoded
      Unicode code points\n       outside the traditional US-ASCII range.  That is,
      it contains at\n       least one U-label or A-label, but otherwise may contain
      any\n       mixture of NR-LDH labels, A-labels, or U-labels, as described in\n
      \      [IDNA-DEFS] and the associated documents.\n"
    title: 2.2.  DNS Domain Names
  - contents:
    - "2.3.  Subject Naming in PKIX Certificates\n   In theory, the Internet Public
      Key Infrastructure using X.509 [PKIX]\n   employs the global directory service
      model defined in [X.500] and\n   [X.501].  Under that model, information is
      held in a directory\n   information base (DIB) and entries in the DIB are organized
      in a\n   hierarchy called the directory information tree (DIT).  An object or\n
      \  alias entry in that hierarchy consists of a set of attributes (each\n   of
      which has a defined type and one or more values) and is uniquely\n   identified
      by a Distinguished Name (DN).  The DN of an entry is\n   constructed by combining
      the Relative Distinguished Names of its\n   superior entries in the tree (all
      the way down to the root of the\n   DIT) with one or more specially nominated
      attributes of the entry\n   itself (which together comprise the Relative Distinguished
      Name (RDN)\n   of the entry, so-called because it is relative to the Distinguished\n
      \  Names of the superior entries in the tree).  The entry closest to the\n   root
      is sometimes referred to as the \"most significant\" entry, and\n   the entry
      farthest from the root is sometimes referred to as the\n   \"least significant\"
      entry.  An RDN is a set (i.e., an unordered\n   group) of attribute-type-and-value
      pairs (see also [LDAP-DN]), each\n   of which asserts some attribute about the
      entry.\n   In practice, the certificates used in [X.509] and [PKIX] borrow key\n
      \  concepts from X.500 and X.501 (e.g., DNs and RDNs) to identify\n   entities,
      but such certificates are not necessarily part of a global\n   directory information
      base.  Specifically, the subject field of a\n   PKIX certificate is an X.501
      type Name that \"identifies the entity\n   associated with the public key stored
      in the subject public key\n   field\" (see Section 4.1.2.6 of [PKIX]).  However,
      it is perfectly\n   acceptable for the subject field to be empty, as long as
      the\n   certificate contains a subject alternative name (\"subjectAltName\")\n
      \  extension that includes at least one subjectAltName entry, because\n   the
      subjectAltName extension allows various identities to be bound to\n   the subject
      (see Section 4.2.1.6 of [PKIX]).  The subjectAltName\n   extension itself is
      a sequence of typed entries, where each type is a\n   distinct kind of identifier.\n
      \  For our purposes, an application service can be identified by a name\n   or
      names carried in the subject field (i.e., a CN-ID) and/or in one\n   of the
      following identifier types within subjectAltName entries:\n   o  DNS-ID\n   o
      \ SRV-ID\n   o  URI-ID\n   Existing certificates often use a CN-ID in the subject
      field to\n   represent a fully qualified DNS domain name; for example, consider\n
      \  the following three subject names, where the attribute of type Common\n   Name
      contains a string whose form matches that of a fully qualified\n   DNS domain
      name (\"im.example.org\", \"mail.example.net\", and\n   \"www.example.com\",
      respectively):\n      CN=im.example.org,O=Example Org,C=GB\n      C=CA,O=Example
      Internetworking,CN=mail.example.net\n      O=Examples-R-Us,CN=www.example.com,C=US\n
      \  However, the Common Name is not strongly typed because a Common Name\n   might
      contain a human-friendly string for the service, rather than a\n   string whose
      form matches that of a fully qualified DNS domain name\n   (a certificate with
      such a single Common Name will typically have at\n   least one subjectAltName
      entry containing the fully qualified DNS\n   domain name):\n      CN=A Free
      Chat Service,O=Example Org,C=GB\n   Or, a certificate's subject might contain
      both a CN-ID as well as\n   another common name attribute containing a human-friendly
      string:\n      CN=A Free Chat Service,CN=im.example.org,O=Example Org,C=GB\n
      \  In general, this specification recommends and prefers use of\n   subjectAltName
      entries (DNS-ID, SRV-ID, URI-ID, etc.) over use of the\n   subject field (CN-ID)
      where possible, as more completely described in\n   the following sections.
      \ However, specifications that reuse this one\n   can legitimately encourage
      continued support for the CN-ID identifier\n   type if they have good reasons
      to do so, such as backward\n   compatibility with deployed infrastructure (see,
      for example,\n   [EV-CERTS]).\n"
    - contents:
      - "2.3.1.  Implementation Notes\n   Confusion sometimes arises from different
        renderings or encodings of\n   the hierarchical information contained in a
        certificate.\n   Certificates are binary objects and are encoded using the\n
        \  Distinguished Encoding Rules (DER) specified in [X.690].  However,\n   some
        implementations generate displayable (a.k.a. printable)\n   renderings of
        the certificate issuer, subject field, and\n   subjectAltName extension, and
        these renderings convert the DER-\n   encoded sequences into a \"string representation\"
        before being\n   displayed.  Because a certificate subject field (of type
        Name\n   [X.509], the same as for a Distinguished Name (DN) [X.501]) is an\n
        \  ordered sequence, order is typically preserved in subject string\n   representations,
        although the two most prevalent subject (and DN)\n   string representations
        differ in employing left-to-right vs. right-\n   to-left ordering.  However,
        because a Relative Distinguished Name\n   (RDN) is an unordered group of attribute-type-and-value
        pairs, the\n   string representation of an RDN can differ from the canonical
        DER\n   encoding (and the order of attribute-type-and-value pairs can differ\n
        \  in the RDN string representations or display orders provided by\n   various
        implementations).  Furthermore, various specifications refer\n   to the order
        of RDNs in DNs or certificate subject fields using\n   terminology that is
        implicitly related to an information hierarchy\n   (which may or may not actually
        exist), such as \"most specific\" vs.\n   \"least specific\", \"left-most\"
        vs. \"right-most\", \"first\" vs. \"last\",\n   or \"most significant\" vs.
        \"least significant\" (see, for example,\n   [LDAP-DN]).\n   To reduce confusion,
        in this specification we avoid such terms and\n   instead use the terms provided
        under Section 1.8; in particular, we\n   do not use the term \"(most specific)
        Common Name field in the subject\n   field\" from [HTTP-TLS] and instead state
        that a CN-ID is a Relative\n   Distinguished Name (RDN) in the certificate
        subject containing one\n   and only one attribute-type-and-value pair of type
        Common Name (thus\n   removing the possibility that an RDN might contain multiple
        AVAs\n   (Attribute Value Assertions) of type CN, one of which could be\n
        \  considered \"most specific\").\n   Finally, although theoretically some
        consider the order of RDNs\n   within a subject field to have meaning, in
        practice that rule is\n   often not observed.  An AVA of type CN is considered
        to be valid at\n   any position within the subject field.\n"
      title: 2.3.1.  Implementation Notes
    title: 2.3.  Subject Naming in PKIX Certificates
  title: 2.  Naming of Application Services
- contents:
  - "3.  Designing Application Protocols\n   This section provides guidelines for
    designers of application\n   protocols, in the form of a checklist to follow when
    reusing the\n   recommendations provided in this document.\n   o  Does your technology
    use DNS SRV records to resolve the DNS domain\n      names of application services?
    \ If so, consider recommending or\n      requiring support for the SRV-ID identifier
    type in PKIX\n      certificates issued and used in your technology community.
    \ (Note\n      that many existing application technologies use DNS SRV records
    to\n      resolve the DNS domain names of application services, but do not\n      rely
    on representations of those records in PKIX certificates by\n      means of SRV-IDs
    as defined in [SRVNAME].)\n   o  Does your technology use URIs to identify application
    services?\n      If so, consider recommending or requiring support for the URI-ID\n
    \     identifier type.  (Note that many existing application\n      technologies
    use URIs to identify application services, but do not\n      rely on representation
    of those URIs in PKIX certificates by means\n      of URI-IDs.)\n   o  Does your
    technology need to use DNS domain names in the Common\n      Name of certificates
    for the sake of backward compatibility?  If\n      so, consider recommending support
    for the CN-ID identifier type as\n      a fallback.\n   o  Does your technology
    need to allow the wildcard character in DNS\n      domain names?  If so, consider
    recommending support for wildcard\n      certificates, and specify exactly where
    the wildcard character is\n      allowed to occur (e.g., only the complete left-most
    label of a DNS\n      domain name).\n   Sample text is provided under Appendix
    A.\n"
  title: 3.  Designing Application Protocols
- contents:
  - "4.  Representing Server Identity\n   This section provides rules and guidelines
    for issuers of\n   certificates.\n"
  - contents:
    - "4.1.  Rules\n   When a certification authority issues a certificate based on
      the\n   fully qualified DNS domain name at which the application service\n   provider
      will provide the relevant application, the following rules\n   apply to the
      representation of application service identities.  The\n   reader needs to be
      aware that some of these rules are cumulative and\n   can interact in important
      ways that are illustrated later in this\n   document.\n   1.  The certificate
      SHOULD include a \"DNS-ID\" if possible as a\n       baseline for interoperability.\n
      \  2.  If the service using the certificate deploys a technology for\n       which
      the relevant specification stipulates that certificates\n       ought to include
      identifiers of type SRV-ID (e.g., this is true\n       of [XMPP]), then the
      certificate SHOULD include an SRV-ID.\n   3.  If the service using the certificate
      deploys a technology for\n       which the relevant specification stipulates
      that certificates\n       ought to include identifiers of type URI-ID (e.g.,
      this is true\n       of [SIP] as specified by [SIP-CERTS], but not true of [HTTP]\n
      \      since [HTTP-TLS] does not describe usage of a URI-ID for HTTP\n       services),
      then the certificate SHOULD include a URI-ID.  The\n       scheme SHALL be that
      of the protocol associated with the\n       application service type and the
      \"host\" component (or its\n       equivalent) SHALL be the fully qualified
      DNS domain name of the\n       service.  A specification that reuses this one
      MUST specify which\n       URI schemes are to be considered acceptable in URI-IDs
      contained\n       in PKIX certificates used for the application protocol (e.g.,\n
      \      \"sip\" but not \"sips\" or \"tel\" for SIP as described in [SIP-SIPS],\n
      \      or perhaps http and https for HTTP as might be described in a\n       future
      specification).\n   4.  The certificate MAY include other application-specific\n
      \      identifiers for types that were defined before publication of\n       [SRVNAME]
      (e.g., XmppAddr for [XMPP]) or for which service names\n       or URI schemes
      do not exist; however, such application-specific\n       identifiers are not
      applicable to all application technologies\n       and therefore are out of
      scope for this specification.\n   5.  Even though many deployed clients still
      check for the CN-ID\n       within the certificate subject field, certification
      authorities\n       are encouraged to migrate away from issuing certificates
      that\n       represent the server's fully qualified DNS domain name in a\n       CN-ID.
      \ Therefore, the certificate SHOULD NOT include a CN-ID\n       unless the certification
      authority issues the certificate in\n       accordance with a specification
      that reuses this one and that\n       explicitly encourages continued support
      for the CN-ID identifier\n       type in the context of a given application
      technology.\n   6.  The certificate MAY contain more than one DNS-ID, SRV-ID,
      or\n       URI-ID but SHOULD NOT contain more than one CN-ID, as further\n       explained
      under Section 7.4.\n   7.  Unless a specification that reuses this one allows
      continued\n       support for the wildcard character '*', the DNS domain name\n
      \      portion of a presented identifier SHOULD NOT contain the wildcard\n       character,
      whether as the complete left-most label within the\n       identifier (following
      the description of labels and domain names\n       in [DNS-CONCEPTS], e.g.,
      \"*.example.com\") or as a fragment\n       thereof (e.g., *oo.example.com,
      f*o.example.com, or\n       fo*.example.com).  A more detailed discussion of
      so-called\n       \"wildcard certificates\" is provided under Section 7.2.\n"
    title: 4.1.  Rules
  - contents:
    - "4.2.  Examples\n   Consider a simple website at \"www.example.com\", which
      is not\n   discoverable via DNS SRV lookups.  Because HTTP does not specify
      the\n   use of URIs in server certificates, a certificate for this service\n
      \  might include only a DNS-ID of \"www.example.com\".  It might also\n   include
      a CN-ID of \"www.example.com\" for backward compatibility with\n   deployed
      infrastructure.\n   Consider an IMAP-accessible email server at the host\n   \"mail.example.net\"
      servicing email addresses of the form\n   \"user@example.net\" and discoverable
      via DNS SRV lookups on the\n   application service name of \"example.net\".
      \ A certificate for this\n   service might include SRV-IDs of \"_imap.example.net\"
      and\n   \"_imaps.example.net\" (see [EMAIL-SRV]) along with DNS-IDs of\n   \"example.net\"
      and \"mail.example.net\".  It might also include CN-IDs\n   of \"example.net\"
      and \"mail.example.net\" for backward compatibility\n   with deployed infrastructure.\n
      \  Consider a SIP-accessible voice-over-IP (VoIP) server at the host\n   \"voice.example.edu\"
      servicing SIP addresses of the form\n   \"user@voice.example.edu\" and identified
      by a URI of <sip:\n   voice.example.edu>.  A certificate for this service would
      include a\n   URI-ID of \"sip:voice.example.edu\" (see [SIP-CERTS]) along with
      a\n   DNS-ID of \"voice.example.edu\".  It might also include a CN-ID of\n   \"voice.example.edu\"
      for backward compatibility with deployed\n   infrastructure.\n   Consider an
      XMPP-compatible instant messaging (IM) server at the host\n   \"im.example.org\"
      servicing IM addresses of the form\n   \"user@im.example.org\" and discoverable
      via DNS SRV lookups on the\n   \"im.example.org\" domain.  A certificate for
      this service might\n   include SRV-IDs of \"_xmpp-client.im.example.org\" and\n
      \  \"_xmpp-server.im.example.org\" (see [XMPP]), a DNS-ID of\n   \"im.example.org\",
      and an XMPP-specific \"XmppAddr\" of \"im.example.org\"\n   (see [XMPP]).  It
      might also include a CN-ID of \"im.example.org\" for\n   backward compatibility
      with deployed infrastructure.\n"
    title: 4.2.  Examples
  title: 4.  Representing Server Identity
- contents:
  - "5.  Requesting Server Certificates\n   This section provides rules and guidelines
    for service providers\n   regarding the information to include in certificate
    signing requests\n   (CSRs).\n   In general, service providers are encouraged
    to request certificates\n   that include all of the identifier types that are
    required or\n   recommended for the application service type that will be secured\n
    \  using the certificate to be issued.\n   If the certificate might be used for
    any type of application service,\n   then the service provider is encouraged to
    request a certificate that\n   includes only a DNS-ID.\n   If the certificate
    will be used for only a single type of application\n   service, then the service
    provider is encouraged to request a\n   certificate that includes a DNS-ID and,
    if appropriate for the\n   application service type, an SRV-ID or URI-ID that
    limits the\n   deployment scope of the certificate to only the defined application\n
    \  service type.\n   If a service provider offering multiple application service
    types\n   (e.g., a World Wide Web service, an email service, and an instant\n
    \  messaging service) wishes to limit the applicability of certificates\n   using
    SRV-IDs or URI-IDs, then the service provider is encouraged to\n   request multiple
    certificates, i.e., one certificate per application\n   service type.  Conversely,
    the service provider is discouraged from\n   requesting a single certificate containing
    multiple SRV-IDs or URI-\n   IDs identifying each different application service
    type.  This\n   guideline does not apply to application service type \"bundles\"
    that\n   are used to identify manifold distinct access methods to the same\n   underlying
    application (e.g., an email application with access\n   methods denoted by the
    application service types of \"imap\", \"imaps\",\n   \"pop3\", \"pop3s\", and
    \"submission\" as described in [EMAIL-SRV]).\n"
  title: 5.  Requesting Server Certificates
- contents:
  - "6.  Verifying Service Identity\n   This section provides rules and guidelines
    for implementers of\n   application client software regarding algorithms for verification
    of\n   application service identity.\n"
  - contents:
    - "6.1.  Overview\n   At a high level, the client verifies the application service's\n
      \  identity by performing the actions listed below (which are defined in\n   the
      following subsections of this document):\n   1.  The client constructs a list
      of acceptable reference identifiers\n       based on the source domain and,
      optionally, the type of service\n       to which the client is connecting.\n
      \  2.  The server provides its identifiers in the form of a PKIX\n       certificate.\n
      \  3.  The client checks each of its reference identifiers against the\n       presented
      identifiers for the purpose of finding a match.\n   4.  When checking a reference
      identifier against a presented\n       identifier, the client matches the source
      domain of the\n       identifiers and, optionally, their application service
      type.\n   Naturally, in addition to checking identifiers, a client might\n   complete
      further checks to ensure that the server is authorized to\n   provide the requested
      service.  However, such checking is not a\n   matter of verifying the application
      service identity presented in a\n   certificate, and therefore methods for doing
      so (e.g., consulting\n   local policy information) are out of scope for this
      document.\n"
    title: 6.1.  Overview
  - contents:
    - '6.2.  Constructing a List of Reference Identifiers

      '
    - contents:
      - "6.2.1.  Rules\n   The client MUST construct a list of acceptable reference
        identifiers,\n   and MUST do so independently of the identifiers presented
        by the\n   service.\n   The inputs used by the client to construct its list
        of reference\n   identifiers might be a URI that a user has typed into an
        interface\n   (e.g., an HTTPS URL for a website), configured account information\n
        \  (e.g., the domain name of a particular host or URI used for\n   retrieving
        information or connecting to a network, which might be\n   different from
        the DNS domain name portion of a username), a\n   hyperlink in a web page
        that triggers a browser to retrieve a media\n   object or script, or some
        other combination of information that can\n   yield a source domain and an
        application service type.\n   The client might need to extract the source
        domain and application\n   service type from the input(s) it has received.
        \ The extracted data\n   MUST include only information that can be securely
        parsed out of the\n   inputs (e.g., parsing the fully qualified DNS domain
        name out of the\n   \"host\" component (or its equivalent) of a URI or deriving
        the\n   application service type from the scheme of a URI) or information\n
        \  that is derived in a manner not subject to subversion by network\n   attackers
        (e.g., pulling the data from a delegated domain that is\n   explicitly established
        via client or system configuration, resolving\n   the data via [DNSSEC], or
        obtaining the data from a third-party\n   domain mapping service in which
        a human user has explicitly placed\n   trust and with which the client communicates
        over a connection or\n   association that provides both mutual authentication
        and integrity\n   checking).  These considerations apply only to extraction
        of the\n   source domain from the inputs; naturally, if the inputs themselves\n
        \  are invalid or corrupt (e.g., a user has clicked a link provided by a\n
        \  malicious entity in a phishing attack), then the client might end up\n
        \  communicating with an unexpected application service.\n      Example: Given
        an input URI of <sips:alice@example.net>, a client\n      would derive the
        application service type \"sip\" from the \"scheme\"\n      and parse the
        domain name \"example.net\" from the \"host\" component\n      (or its equivalent).\n
        \  Each reference identifier in the list SHOULD be based on the source\n   domain
        and SHOULD NOT be based on a derived domain (e.g., a host name\n   or domain
        name discovered through DNS resolution of the source\n   domain).  This rule
        is important because only a match between the\n   user inputs and a presented
        identifier enables the client to be sure\n   that the certificate can legitimately
        be used to secure the client's\n   communication with the server.  There is
        only one scenario in which\n   it is acceptable for an interactive client
        to override the\n   recommendation in this rule and therefore communicate
        with a domain\n   name other than the source domain: because a human user
        has \"pinned\"\n   the application service's certificate to the alternative
        domain name\n   as further discussed under Section 6.6.4 and Section 7.1.
        \ In this\n   case, the inputs used by the client to construct its list of\n
        \  reference identifiers might include more than one fully qualified DNS\n
        \  domain name, i.e., both (a) the source domain and (b) the alternative\n
        \  domain contained in the pinned certificate.\n   Using the combination of
        fully qualified DNS domain name(s) and\n   application service type, the client
        constructs a list of reference\n   identifiers in accordance with the following
        rules:\n   o  The list SHOULD include a DNS-ID.  A reference identifier of
        type\n      DNS-ID can be directly constructed from a fully qualified DNS\n
        \     domain name that is (a) contained in or securely derived from the\n
        \     inputs (i.e., the source domain), or (b) explicitly associated\n      with
        the source domain by means of user configuration (i.e., a\n      derived domain).\n
        \  o  If a server for the application service type is typically\n      discovered
        by means of DNS SRV records, then the list SHOULD\n      include an SRV-ID.\n
        \  o  If a server for the application service type is typically\n      associated
        with a URI for security purposes (i.e., a formal\n      protocol document
        specifies the use of URIs in server\n      certificates), then the list SHOULD
        include a URI-ID.\n   o  The list MAY include a CN-ID, mainly for the sake
        of backward\n      compatibility with deployed infrastructure.\n   Which identifier
        types a client includes in its list of reference\n   identifiers is a matter
        of local policy.  For example, in certain\n   deployment environments, a client
        that is built to connect only to a\n   particular kind of service (e.g., only
        IM services) might be\n   configured to accept as valid only certificates
        that include an\n   SRV-ID for that application service type; in this case,
        the client\n   would include only SRV-IDs matching the application service
        type in\n   its list of reference identifiers (not, for example, DNS-IDs).
        \ By\n   contrast, a more lenient client (even one built to connect only to
        a\n   particular kind of service) might include both SRV-IDs and DNS-IDs in\n
        \  its list of reference identifiers.\n      Implementation Note: It is highly
        likely that implementers of\n      client software will need to support CN-IDs
        for the foreseeable\n      future, because certificates containing CN-IDs
        are so widely\n      deployed.  Implementers are advised to monitor the state
        of the\n      art with regard to certificate issuance policies and migrate
        away\n      from support CN-IDs in the future if possible.\n      Implementation
        Note: The client does not need to construct the\n      foregoing identifiers
        in the actual formats found in a certificate\n      (e.g., as ASN.1 types);
        it only needs to construct the functional\n      equivalent of such identifiers
        for matching purposes.\n      Security Warning: A client MUST NOT construct
        a reference\n      identifier corresponding to Relative Distinguished Names
        (RDNs)\n      other than those of type Common Name and MUST NOT check for
        RDNs\n      other than those of type Common Name in the presented identifiers.\n"
      title: 6.2.1.  Rules
    - contents:
      - "6.2.2.  Examples\n   A web browser that is connecting via HTTPS to the website
        at\n   \"www.example.com\" might have two reference identifiers: a DNS-ID
        of\n   \"www.example.com\" and, as a fallback, a CN-ID of \"www.example.com\".\n
        \  A mail user agent that is connecting via IMAPS to the email service\n   at
        \"example.net\" (resolved as \"mail.example.net\") might have five\n   reference
        identifiers: an SRV-ID of \"_imaps.example.net\" (see\n   [EMAIL-SRV]), DNS-IDs
        of \"example.net\" and \"mail.example.net\", and,\n   as a fallback, CN-IDs
        of \"example.net\" and \"mail.example.net\".  (A\n   legacy email user agent
        would not support [EMAIL-SRV] and therefore\n   would probably be explicitly
        configured to connect to\n   \"mail.example.net\", whereas an SRV-aware user
        agent would derive\n   \"example.net\" from an email address of the form \"user@example.net\"\n
        \  but might also accept \"mail.example.net\" as the DNS domain name\n   portion
        of reference identifiers for the service.)\n   A voice-over-IP (VoIP) user
        agent that is connecting via SIP to the\n   voice service at \"voice.example.edu\"
        might have only one reference\n   identifier: a URI-ID of \"sip:voice.example.edu\"
        (see [SIP-CERTS]).\n   An instant messaging (IM) client that is connecting
        via XMPP to the\n   IM service at \"im.example.org\" might have three reference\n
        \  identifiers: an SRV-ID of \"_xmpp-client.im.example.org\" (see [XMPP]),\n
        \  a DNS-ID of \"im.example.org\", and an XMPP-specific \"XmppAddr\" of\n
        \  \"im.example.org\" (see [XMPP]).\n"
      title: 6.2.2.  Examples
    title: 6.2.  Constructing a List of Reference Identifiers
  - contents:
    - "6.3.  Preparing to Seek a Match\n   Once the client has constructed its list
      of reference identifiers and\n   has received the server's presented identifiers
      in the form of a PKIX\n   certificate, the client checks its reference identifiers
      against the\n   presented identifiers for the purpose of finding a match.  The
      search\n   fails if the client exhausts its list of reference identifiers\n
      \  without finding a match.  The search succeeds if any presented\n   identifier
      matches one of the reference identifiers, at which point\n   the client SHOULD
      stop the search.\n      Implementation Note: A client might be configured to
      perform\n      multiple searches, i.e., to match more than one reference\n      identifier.
      \ Although such behavior is not forbidden by this\n      specification, rules
      for matching multiple reference identifiers\n      are a matter for implementation
      or future specification.\n      Security Warning: A client MUST NOT seek a match
      for a reference\n      identifier of CN-ID if the presented identifiers include
      a DNS-ID,\n      SRV-ID, URI-ID, or any application-specific identifier types\n
      \     supported by the client.\n   Before applying the comparison rules provided
      in the following\n   sections, the client might need to split the reference
      identifier\n   into its DNS domain name portion and its application service
      type\n   portion, as follows:\n   o  A reference identifier of type DNS-ID does
      not include an\n      application service type portion and thus can be used
      directly as\n      the DNS domain name for comparison purposes.  As an example,
      a\n      DNS-ID of \"www.example.com\" would result in a DNS domain name\n      portion
      of \"www.example.com\".\n   o  A reference identifier of type CN-ID also does
      not include an\n      application service type portion and thus can be used
      directly as\n      the DNS domain name for comparison purposes.  As previously\n
      \     mentioned, this document specifies that a CN-ID always contains a\n      string
      whose form matches that of a DNS domain name (thus\n      differentiating a
      CN-ID from a Common Name containing a human-\n      friendly name).\n   o  For
      a reference identifier of type SRV-ID, the DNS domain name\n      portion is
      the Name and the application service type portion is\n      the Service.  As
      an example, an SRV-ID of \"_imaps.example.net\"\n      would be split into a
      DNS domain name portion of \"example.net\" and\n      an application service
      type portion of \"imaps\" (mapping to an\n      application protocol of IMAP
      as explained in [EMAIL-SRV]).\n   o  For a reference identifier of type URI-ID,
      the DNS domain name\n      portion is the \"reg-name\" part of the \"host\"
      component (or its\n      equivalent) and the application service type portion
      is the\n      application service type associated with the scheme name matching\n
      \     the [ABNF] \"scheme\" rule from [URI] (not including the ':'\n      separator).
      \ As previously mentioned, this document specifies that\n      a URI-ID always
      contains a \"host\" component (or its equivalent)\n      containing a \"reg-name\".
      \ (Matching only the \"reg-name\" rule from\n      [URI] limits verification
      to DNS domain names, thereby\n      differentiating a URI-ID from a uniformResourceIdentifier
      entry\n      that contains an IP address or a mere host name, or that does not\n
      \     contain a \"host\" component at all.)  Furthermore, note that\n      extraction
      of the \"reg-name\" might necessitate normalization of\n      the URI (as explained
      in [URI]).  As an example, a URI-ID of \"sip:\n      voice.example.edu\" would
      be split into a DNS domain name portion\n      of \"voice.example.edu\" and
      an application service type of \"sip\"\n      (associated with an application
      protocol of SIP as explained in\n      [SIP-CERTS]).\n   Detailed comparison
      rules for matching the DNS domain name portion\n   and application service type
      portion of the reference identifier are\n   provided in the following sections.\n"
    title: 6.3.  Preparing to Seek a Match
  - contents:
    - "6.4.  Matching the DNS Domain Name Portion\n   The client MUST match the DNS
      domain name portion of a reference\n   identifier according to the following
      rules (and SHOULD also check\n   the application service type as described under
      Section 6.5).  The\n   rules differ depending on whether the domain to be checked
      is a\n   \"traditional domain name\" or an \"internationalized domain name\"
      (as\n   defined under Section 2.2).  Furthermore, to meet the needs of\n   clients
      that support presented identifiers containing the wildcard\n   character '*',
      we define a supplemental rule for so-called \"wildcard\n   certificates\".  Finally,
      we also specify the circumstances under\n   which it is acceptable to check
      the \"CN-ID\" identifier type.\n"
    - contents:
      - "6.4.1.  Checking of Traditional Domain Names\n   If the DNS domain name portion
        of a reference identifier is a\n   \"traditional domain name\", then matching
        of the reference identifier\n   against the presented identifier is performed
        by comparing the set of\n   domain name labels using a case-insensitive ASCII
        comparison, as\n   clarified by [DNS-CASE] (e.g., \"WWW.Example.Com\" would
        be lower-cased\n   to \"www.example.com\" for comparison purposes).  Each
        label MUST match\n   in order for the names to be considered to match, except
        as\n   supplemented by the rule about checking of wildcard labels\n   (Section
        6.4.3).\n"
      title: 6.4.1.  Checking of Traditional Domain Names
    - contents:
      - "6.4.2.  Checking of Internationalized Domain Names\n   If the DNS domain
        name portion of a reference identifier is an\n   internationalized domain
        name, then an implementation MUST convert\n   any U-labels [IDNA-DEFS] in
        the domain name to A-labels before\n   checking the domain name.  In accordance
        with [IDNA-PROTO], A-labels\n   MUST be compared as case-insensitive ASCII.
        \ Each label MUST match in\n   order for the domain names to be considered
        to match, except as\n   supplemented by the rule about checking of wildcard
        labels\n   (Section 6.4.3; but see also Section 7.2 regarding wildcards in\n
        \  internationalized domain names).\n"
      title: 6.4.2.  Checking of Internationalized Domain Names
    - contents:
      - "6.4.3.  Checking of Wildcard Certificates\n   A client employing this specification's
        rules MAY match the reference\n   identifier against a presented identifier
        whose DNS domain name\n   portion contains the wildcard character '*' as part
        or all of a label\n   (following the description of labels and domain names
        in\n   [DNS-CONCEPTS]).\n   For information regarding the security characteristics
        of wildcard\n   certificates, see Section 7.2.\n   If a client matches the
        reference identifier against a presented\n   identifier whose DNS domain name
        portion contains the wildcard\n   character '*', the following rules apply:\n
        \  1.  The client SHOULD NOT attempt to match a presented identifier in\n
        \      which the wildcard character comprises a label other than the\n       left-most
        label (e.g., do not match bar.*.example.net).\n   2.  If the wildcard character
        is the only character of the left-most\n       label in the presented identifier,
        the client SHOULD NOT compare\n       against anything but the left-most label
        of the reference\n       identifier (e.g., *.example.com would match foo.example.com
        but\n       not bar.foo.example.com or example.com).\n   3.  The client MAY
        match a presented identifier in which the wildcard\n       character is not
        the only character of the label (e.g.,\n       baz*.example.net and *baz.example.net
        and b*z.example.net would\n       be taken to match baz1.example.net and foobaz.example.net
        and\n       buzz.example.net, respectively).  However, the client SHOULD NOT\n
        \      attempt to match a presented identifier where the wildcard\n       character
        is embedded within an A-label or U-label [IDNA-DEFS] of\n       an internationalized
        domain name [IDNA-PROTO].\n"
      title: 6.4.3.  Checking of Wildcard Certificates
    - contents:
      - "6.4.4.  Checking of Common Names\n   As noted, a client MUST NOT seek a match
        for a reference identifier\n   of CN-ID if the presented identifiers include
        a DNS-ID, SRV-ID,\n   URI-ID, or any application-specific identifier types
        supported by the\n   client.\n   Therefore, if and only if the presented identifiers
        do not include a\n   DNS-ID, SRV-ID, URI-ID, or any application-specific identifier
        types\n   supported by the client, then the client MAY as a last resort check\n
        \  for a string whose form matches that of a fully qualified DNS domain\n
        \  name in a Common Name field of the subject field (i.e., a CN-ID).  If\n
        \  the client chooses to compare a reference identifier of type CN-ID\n   against
        that string, it MUST follow the comparison rules for the DNS\n   domain name
        portion of an identifier of type DNS-ID, SRV-ID, or\n   URI-ID, as described
        under Section 6.4.1, Section 6.4.2, and\n   Section 6.4.3.\n"
      title: 6.4.4.  Checking of Common Names
    title: 6.4.  Matching the DNS Domain Name Portion
  - contents:
    - "6.5.  Matching the Application Service Type Portion\n   When a client checks
      identifiers of type SRV-ID and URI-ID, it MUST\n   check not only the DNS domain
      name portion of the identifier but also\n   the application service type portion.
      \ The client does this by\n   splitting the identifier into the DNS domain name
      portion and the\n   application service type portion (as described under Section
      6.3),\n   then checking both the DNS domain name portion (as described under\n
      \  Section 6.4) and the application service type portion as described in\n   the
      following subsections.\n      Implementation Note: An identifier of type SRV-ID
      or URI-ID\n      provides an application service type portion to be checked,
      but\n      that portion is combined only with the DNS domain name portion of\n
      \     the SRV-ID or URI-ID itself.  For example, if a client's list of\n      reference
      identifiers includes an SRV-ID of \"_xmpp-\n      client.im.example.org\" and
      a DNS-ID of \"apps.example.net\", the\n      client would check (a) the combination
      of an application service\n      type of \"xmpp-client\" and a DNS domain name
      of \"im.example.org\"\n      and (b) a DNS domain name of \"apps.example.net\".
      \ However, the\n      client would not check (c) the combination of an application\n
      \     service type of \"xmpp-client\" and a DNS domain name of\n      \"apps.example.net\"
      because it does not have an SRV-ID of \"_xmpp-\n      client.apps.example.net\"
      in its list of reference identifiers.\n"
    - contents:
      - "6.5.1.  SRV-ID\n   The application service name portion of an SRV-ID (e.g.,
        \"imaps\")\n   MUST be matched in a case-insensitive manner, in accordance
        with\n   [DNS-SRV].  Note that the \"_\" character is prepended to the service\n
        \  identifier in DNS SRV records and in SRV-IDs (per [SRVNAME]), and\n   thus
        does not need to be included in any comparison.\n"
      title: 6.5.1.  SRV-ID
    - contents:
      - "6.5.2.  URI-ID\n   The scheme name portion of a URI-ID (e.g., \"sip\") MUST
        be matched in\n   a case-insensitive manner, in accordance with [URI].  Note
        that the\n   \":\" character is a separator between the scheme name and the
        rest of\n   the URI, and thus does not need to be included in any comparison.\n"
      title: 6.5.2.  URI-ID
    title: 6.5.  Matching the Application Service Type Portion
  - contents:
    - "6.6.  Outcome\n   The outcome of the matching procedure is one of the following
      cases.\n"
    - contents:
      - "6.6.1.  Case #1: Match Found\n   If the client has found a presented identifier
        that matches a\n   reference identifier, then the service identity check has
        succeeded.\n   In this case, the client MUST use the matched reference identifier
        as\n   the validated identity of the application service.\n"
      title: '6.6.1.  Case #1: Match Found'
    - contents:
      - "6.6.2.  Case #2: No Match Found, Pinned Certificate\n   If the client does
        not find a presented identifier matching any of\n   the reference identifiers
        but the client has previously pinned the\n   application service's certificate
        to one of the reference identifiers\n   in the list it constructed for this
        communication attempt (as\n   \"pinning\" is explained under Section 1.8),
        and the presented\n   certificate matches the pinned certificate (including
        the context as\n   described under Section 7.1), then the service identity
        check has\n   succeeded.\n"
      title: '6.6.2.  Case #2: No Match Found, Pinned Certificate'
    - contents:
      - "6.6.3.  Case #3: No Match Found, No Pinned Certificate\n   If the client
        does not find a presented identifier matching any of\n   the reference identifiers
        and the client has not previously pinned\n   the certificate to one of the
        reference identifiers in the list it\n   constructed for this communication
        attempt, then the client MUST\n   proceed as described under Section 6.6.4.\n"
      title: '6.6.3.  Case #3: No Match Found, No Pinned Certificate'
    - contents:
      - "6.6.4.  Fallback\n   If the client is an interactive client that is directly
        controlled by\n   a human user, then it SHOULD inform the user of the identity
        mismatch\n   and automatically terminate the communication attempt with a
        bad\n   certificate error; this behavior is preferable because it prevents\n
        \  users from inadvertently bypassing security protections in hostile\n   situations.\n
        \     Security Warning: Some interactive clients give advanced users the\n
        \     option of proceeding with acceptance despite the identity\n      mismatch,
        thereby \"pinning\" the certificate to one of the\n      reference identifiers
        in the list constructed by the client for\n      this communication attempt.
        \ Although this behavior can be\n      appropriate in certain specialized
        circumstances, in general it\n      ought to be exposed only to advanced users.
        \ Even then it needs to\n      be handled with extreme caution, for example
        by first encouraging\n      even an advanced user to terminate the communication
        attempt and,\n      if the advanced user chooses to proceed anyway, by forcing
        the\n      user to view the entire certification path and only then allowing\n
        \     the user to pin the certificate (on a temporary or permanent\n      basis,
        at the user's option).\n   Otherwise, if the client is an automated application
        not directly\n   controlled by a human user, then it SHOULD terminate the\n
        \  communication attempt with a bad certificate error and log the error\n
        \  appropriately.  An automated application MAY provide a configuration\n
        \  setting that disables this behavior, but MUST enable the behavior by\n
        \  default.\n"
      title: 6.6.4.  Fallback
    title: 6.6.  Outcome
  title: 6.  Verifying Service Identity
- contents:
  - '7.  Security Considerations

    '
  - contents:
    - "7.1.  Pinned Certificates\n   As defined under Section 1.8, a certificate is
      said to be \"pinned\" to\n   a DNS domain name when a user has explicitly chosen
      to associate a\n   service's certificate with that DNS domain name despite the
      fact that\n   the certificate contains some other DNS domain name (e.g., the
      user\n   has explicitly approved \"apps.example.net\" as a domain associated\n
      \  with a source domain of \"example.com\").  The cached name association\n
      \  MUST take account of both the certificate presented and the context\n   in
      which it was accepted or configured (where the \"context\" includes\n   the
      chain of certificates from the presented certificate to the trust\n   anchor,
      the source domain, the application service type, the\n   service's derived domain
      and port number, and any other relevant\n   information provided by the user
      or associated by the client).\n"
    title: 7.1.  Pinned Certificates
  - contents:
    - "7.2.  Wildcard Certificates\n   This document states that the wildcard character
      '*' SHOULD NOT be\n   included in presented identifiers but MAY be checked by
      application\n   clients (mainly for the sake of backward compatibility with
      deployed\n   infrastructure).  As a result, the rules provided in this document\n
      \  are more restrictive than the rules for many existing application\n   technologies
      (such as those excerpted under Appendix B).  Several\n   security considerations
      justify tightening the rules:\n   o  Wildcard certificates automatically vouch
      for any and all host\n      names within their domain.  This can be convenient
      for\n      administrators but also poses the risk of vouching for rogue or\n
      \     buggy hosts.  See for example [Defeating-SSL] (beginning at slide\n      91)
      and [HTTPSbytes] (slides 38-40).\n   o  Specifications for existing application
      technologies are not clear\n      or consistent about the allowable location
      of the wildcard\n      character, such as whether it can be:\n      *  only
      the complete left-most label (e.g., *.example.com)\n      *  some fragment of
      the left-most label (e.g., fo*.example.com,\n         f*o.example.com, or *oo.example.com)\n
      \     *  all or part of a label other than the left-most label (e.g.,\n         www.*.example.com
      or www.foo*.example.com)\n      *  all or part of a label that identifies a
      so-called \"public\n         suffix\" (e.g., *.co.uk or *.com)\n      *  included
      more than once in a given label (e.g.,\n         f*b*r.example.com\n      *
      \ included as all or part of more than one label (e.g.,\n         *.*.example.com)\n
      \     These ambiguities might introduce exploitable differences in\n      identity
      checking behavior among client implementations and\n      necessitate overly
      complex and inefficient identity checking\n      algorithms.\n   o  There is
      no specification that defines how the wildcard character\n      may be embedded
      within the A-labels or U-labels [IDNA-DEFS] of an\n      internationalized domain
      name [IDNA-PROTO]; as a result,\n      implementations are strongly discouraged
      from including or\n      attempting to check for the wildcard character embedded
      within the\n      A-labels or U-labels of an internationalized domain name (e.g.,\n
      \     \"xn--kcry6tjko*.example.org\").  Note, however, that a presented\n      domain
      name identifier MAY contain the wildcard character as long\n      as that character
      occupies the entire left-most label position,\n      where all of the remaining
      labels are valid NR-LDH labels,\n      A-labels, or U-labels (e.g., \"*.xn--kcry6tjko.example.org\").\n
      \  Notwithstanding the foregoing security considerations, specifications\n   that
      reuse this one can legitimately encourage continued support for\n   the wildcard
      character if they have good reasons to do so, such as\n   backward compatibility
      with deployed infrastructure (see, for\n   example, [EV-CERTS]).\n"
    title: 7.2.  Wildcard Certificates
  - contents:
    - "7.3.  Internationalized Domain Names\n   Allowing internationalized domain
      names can lead to the inclusion of\n   visually similar (so-called \"confusable\")
      characters in certificates;\n   for discussion, see for example [IDNA-DEFS].\n"
    title: 7.3.  Internationalized Domain Names
  - contents:
    - "7.4.  Multiple Identifiers\n   A given application service might be addressed
      by multiple DNS domain\n   names for a variety of reasons, and a given deployment
      might service\n   multiple domains (e.g., in so-called \"virtual hosting\" environments).\n
      \  In the default TLS handshake exchange, the client is not able to\n   indicate
      the DNS domain name with which it wants to communicate, and\n   the TLS server
      returns only one certificate for itself.  Absent an\n   extension to TLS, a
      typical workaround used to facilitate mapping an\n   application service to
      multiple DNS domain names is to embed all of\n   the domain names into a single
      certificate.\n   A more recent approach, formally specified in [TLS-EXT], is
      for the\n   client to use the TLS \"Server Name Indication\" (SNI) extension
      when\n   sending the client_hello message, stipulating the DNS domain name it\n
      \  desires or expects of the service.  The service can then return the\n   appropriate
      certificate in its Certificate message, and that\n   certificate can represent
      a single DNS domain name.\n   To accommodate the workaround that was needed
      before the development\n   of the SNI extension, this specification allows multiple
      DNS-IDs,\n   SRV-IDs, or URI-IDs in a certificate; however, it explicitly\n
      \  discourages multiple CN-IDs.  Although it would be preferable to\n   forbid
      multiple CN-IDs entirely, there are several reasons at this\n   time why this
      specification states that they SHOULD NOT (instead of\n   MUST NOT) be included:\n
      \  o  At least one significant technology community of interest\n      explicitly
      allows multiple CN-IDs [EV-CERTS].\n   o  At least one significant certification
      authority is known to issue\n      certificates containing multiple CN-IDs.\n
      \  o  Many service providers often deem inclusion of multiple CN-IDs\n      necessary
      in virtual hosting environments because at least one\n      widely deployed
      operating system does not yet support the SNI\n      extension.\n   It is hoped
      that the recommendation regarding multiple CN-IDs can be\n   further tightened
      in the future.\n"
    title: 7.4.  Multiple Identifiers
  title: 7.  Security Considerations
- contents:
  - "8.  Contributors\n   The following individuals made important contributions to
    the text of\n   this document: Shumon Huque, RL 'Bob' Morgan, and Kurt Zeilenga.\n"
  title: 8.  Contributors
- contents:
  - "9.  Acknowledgements\n   The editors and contributors wish to thank the following
    individuals\n   for their feedback and suggestions: Bernard Aboba, Richard Barnes,\n
    \  Uri Blumenthal, Nelson Bolyard, Kaspar Brand, Anthony Bryan, Scott\n   Cantor,
    Wan-Teh Chang, Bil Corry, Dave Cridland, Dave Crocker, Cyrus\n   Daboo, Charles
    Gardiner, Philip Guenther, Phillip Hallam-Baker, Bruno\n   Harbulot, Wes Hardaker,
    David Harrington, Paul Hoffman, Love\n   Hornquist Astrand, Henry Hotz, Russ Housley,
    Jeffrey Hutzelman,\n   Cullen Jennings, Simon Josefsson, Geoff Keating, John Klensin,
    Scott\n   Lawrence, Matt McCutchen, Alexey Melnikov, Subramanian Moonesamy,\n
    \  Eddy Nigg, Ludwig Nussel, Joe Orton, Tom Petch, Yngve N. Pettersen,\n   Tim
    Polk, Robert Relyea, Eric Rescorla, Pete Resnick, Martin Rex, Joe\n   Salowey,
    Stefan Santesson, Jim Schaad, Rob Stradling, Michael\n   Stroeder, Andrew Sullivan,
    Peter Sylvester, Martin Thomson, Paul\n   Tiemann, Sean Turner, Nicolas Williams,
    Dan Wing, Dan Winship, and\n   Stefan Winter.\n   Thanks also to Barry Leiba and
    Ben Campbell for their reviews on\n   behalf of the Security Directorate and the
    General Area Review Team,\n   respectively.\n   The responsible Area Director
    was Alexey Melnikov.\n"
  title: 9.  Acknowledgements
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [DNS-CONCEPTS]   Mockapetris, P., \"Domain
      names - concepts and\n                    facilities\", STD 13, RFC 1034, November
      1987.\n   [DNS-SRV]        Gulbrandsen, A., Vixie, P., and L. Esibov, \"A DNS
      RR\n                    for specifying the location of services (DNS SRV)\",\n
      \                   RFC 2782, February 2000.\n   [IDNA-DEFS]      Klensin, J.,
      \"Internationalized Domain Names for\n                    Applications (IDNA):
      Definitions and Document\n                    Framework\", RFC 5890, August
      2010.\n   [IDNA-PROTO]     Klensin, J., \"Internationalized Domain Names in\n
      \                   Applications (IDNA): Protocol\", RFC 5891,\n                    August
      2010.\n   [KEYWORDS]       Bradner, S., \"Key words for use in RFCs to Indicate\n
      \                   Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [LDAP-DN]
      \       Zeilenga, K., Ed., \"Lightweight Directory Access\n                    Protocol
      (LDAP): String Representation of\n                    Distinguished Names\",
      RFC 4514, June 2006.\n   [PKIX]           Cooper, D., Santesson, S., Farrell,
      S., Boeyen, S.,\n                    Housley, R., and W. Polk, \"Internet X.509
      Public Key\n                    Infrastructure Certificate and Certificate\n
      \                   Revocation List (CRL) Profile\", RFC 5280, May 2008.\n   [SRVNAME]
      \       Santesson, S., \"Internet X.509 Public Key\n                    Infrastructure
      Subject Alternative Name for\n                    Expression of Service Name\",
      RFC 4985, August 2007.\n   [URI]            Berners-Lee, T., Fielding, R., and
      L. Masinter,\n                    \"Uniform Resource Identifier (URI): Generic
      Syntax\",\n                    STD 66, RFC 3986, January 2005.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [ABNF]           Crocker, D., Ed. and P.
      Overell, \"Augmented BNF for\n                    Syntax Specifications: ABNF\",
      STD 68, RFC 5234,\n                    January 2008.\n   [DNS-CASE]       Eastlake
      3rd, D., \"Domain Name System (DNS) Case\n                    Insensitivity
      Clarification\", RFC 4343,\n                    January 2006.\n   [DNSSEC]         Arends,
      R., Austein, R., Larson, M., Massey, D., and\n                    S. Rose, \"DNS
      Security Introduction and\n                    Requirements\", RFC 4033, March
      2005.\n   [DTLS]           Rescorla, E. and N. Modadugu, \"Datagram Transport\n
      \                   Layer Security\", RFC 4347, April 2006.\n   [Defeating-SSL]
      \ Marlinspike, M., \"New Tricks for Defeating SSL in\n                    Practice\",
      BlackHat DC, February 2009,\n                    <http://www.blackhat.com/presentations/\n
      \                   bh-dc-09/Marlinspike/ BlackHat-DC-09-Marlinspike-\n                    Defeating-SSL.pdf>.\n
      \  [EMAIL-SRV]      Daboo, C., \"Use of SRV Records for Locating Email\n                    Submission/Access
      Services\", RFC 6186, March 2011.\n   [EV-CERTS]       CA/Browser Forum, \"Guidelines
      For The Issuance And\n                    Management Of Extended Validation
      Certificates\",\n                    October 2009,\n                    <http://www.cabforum.org/Guidelines_v1_2.pdf>.\n
      \  [GIST]           Schulzrinne, H. and R. Hancock, \"GIST: General\n                    Internet
      Signalling Transport\", RFC 5971,\n                    October 2010.\n   [HTTP]
      \          Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n                    Masinter,
      L., Leach, P., and T. Berners-Lee,\n                    \"Hypertext Transfer
      Protocol -- HTTP/1.1\", RFC 2616,\n                    June 1999.\n   [HTTP-TLS]
      \      Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.\n   [HTTPSbytes]
      \    Sokol, J. and R. Hansen, \"HTTPS Can Byte Me\",\n                    BlackHat
      Abu Dhabi, November 2010,\n                    <https://media.blackhat.com/bh-ad-10/Hansen/\n
      \                   Blackhat-AD-2010-Hansen-Sokol-HTTPS-Can-Byte-Me-\n                    slides.pdf>.\n
      \  [IDNA2003]       Faltstrom, P., Hoffman, P., and A. Costello,\n                    \"Internationalizing
      Domain Names in Applications\n                    (IDNA)\", RFC 3490, March
      2003.\n   [IMAP]           Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL -\n
      \                   VERSION 4rev1\", RFC 3501, March 2003.\n   [IP]             Postel,
      J., \"Internet Protocol\", STD 5, RFC 791,\n                    September 1981.\n
      \  [IPSEC]          Kent, S. and K. Seo, \"Security Architecture for the\n                    Internet
      Protocol\", RFC 4301, December 2005.\n   [IPv6]           Deering, S. and R.
      Hinden, \"Internet Protocol,\n                    Version 6 (IPv6) Specification\",
      RFC 2460,\n                    December 1998.\n   [LDAP]           Sermersheim,
      J., \"Lightweight Directory Access\n                    Protocol (LDAP): The
      Protocol\", RFC 4511, June 2006.\n   [LDAP-AUTH]      Harrison, R., \"Lightweight
      Directory Access Protocol\n                    (LDAP): Authentication Methods
      and Security\n                    Mechanisms\", RFC 4513, June 2006.\n   [LDAP-SCHEMA]
      \   Sciberras, A., Ed., \"Lightweight Directory Access\n                    Protocol
      (LDAP): Schema for User Applications\",\n                    RFC 4519, June
      2006.\n   [LDAP-TLS]       Hodges, J., Morgan, R., and M. Wahl, \"Lightweight\n
      \                   Directory Access Protocol (v3): Extension for\n                    Transport
      Layer Security\", RFC 2830, May 2000.\n   [NAPTR]          Mealling, M., \"Dynamic
      Delegation Discovery System\n                    (DDDS) Part Three: The Domain
      Name System (DNS)\n                    Database\", RFC 3403, October 2002.\n
      \  [NETCONF]        Enns, R., Ed., \"NETCONF Configuration Protocol\",\n                    RFC
      4741, December 2006.\n   [NETCONF-SSH]    Wasserman, M. and T. Goddard, \"Using
      the NETCONF\n                    Configuration Protocol over Secure SHell (SSH)\",\n
      \                   RFC 4742, December 2006.\n   [NETCONF-TLS]    Badra, M.,
      \"NETCONF over Transport Layer Security\n                    (TLS)\", RFC 5539,
      May 2009.\n   [NNTP]           Feather, C., \"Network News Transfer Protocol\n
      \                   (NNTP)\", RFC 3977, October 2006.\n   [NNTP-TLS]       Murchison,
      K., Vinocur, J., and C. Newman, \"Using\n                    Transport Layer
      Security (TLS) with Network News\n                    Transfer Protocol (NNTP)\",
      RFC 4642, October 2006.\n   [OCSP]           Myers, M., Ankney, R., Malpani,
      A., Galperin, S.,\n                    and C. Adams, \"X.509 Internet Public
      Key\n                    Infrastructure Online Certificate Status Protocol -\n
      \                   OCSP\", RFC 2560, June 1999.\n   [OPENPGP]        Callas,
      J., Donnerhacke, L., Finney, H., Shaw, D.,\n                    and R. Thayer,
      \"OpenPGP Message Format\", RFC 4880,\n                    November 2007.\n
      \  [PKIX-OLD]       Housley, R., Ford, W., Polk, T., and D. Solo,\n                    \"Internet
      X.509 Public Key Infrastructure\n                    Certificate and CRL Profile\",
      RFC 2459,\n                    January 1999.\n   [POP3]           Myers, J.
      and M. Rose, \"Post Office Protocol -\n                    Version 3\", STD
      53, RFC 1939, May 1996.\n   [PRIVATE]        Rekhter, Y., Moskowitz, R., Karrenberg,
      D., Groot,\n                    G., and E. Lear, \"Address Allocation for Private\n
      \                   Internets\", BCP 5, RFC 1918, February 1996.\n   [S-NAPTR]
      \       Daigle, L. and A. Newton, \"Domain-Based Application\n                    Service
      Location Using SRV RRs and the Dynamic\n                    Delegation Discovery
      Service (DDDS)\", RFC 3958,\n                    January 2005.\n   [SECTERMS]
      \      Shirey, R., \"Internet Security Glossary, Version 2\",\n                    RFC
      4949, August 2007.\n   [SIP]            Rosenberg, J., Schulzrinne, H., Camarillo,
      G.,\n                    Johnston, A., Peterson, J., Sparks, R., Handley, M.,\n
      \                   and E. Schooler, \"SIP: Session Initiation Protocol\",\n
      \                   RFC 3261, June 2002.\n   [SIP-CERTS]      Gurbani, V., Lawrence,
      S., and A. Jeffrey, \"Domain\n                    Certificates in the Session
      Initiation Protocol\n                    (SIP)\", RFC 5922, June 2010.\n   [SIP-SIPS]
      \      Audet, F., \"The Use of the SIPS URI Scheme in the\n                    Session
      Initiation Protocol (SIP)\", RFC 5630,\n                    October 2009.\n
      \  [SMTP]           Klensin, J., \"Simple Mail Transfer Protocol\",\n                    RFC
      5321, October 2008.\n   [SMTP-AUTH]      Siemborski, R., Ed. and A. Melnikov,
      Ed., \"SMTP\n                    Service Extension for Authentication\", RFC
      4954,\n                    July 2007.\n   [SMTP-TLS]       Hoffman, P., \"SMTP
      Service Extension for Secure SMTP\n                    over Transport Layer
      Security\", RFC 3207,\n                    February 2002.\n   [SNMP]           Harrington,
      D., Presuhn, R., and B. Wijnen, \"An\n                    Architecture for Describing
      Simple Network\n                    Management Protocol (SNMP) Management Frameworks\",\n
      \                   STD 62, RFC 3411, December 2002.\n   [SNMP-TLS]       Hardaker,
      W., \"Transport Layer Security (TLS)\n                    Transport Model for
      the Simple Network Management\n                    Protocol (SNMP)\", RFC 5953,
      August 2010.\n   [SYSLOG]         Gerhards, R., \"The Syslog Protocol\", RFC
      5424,\n                    March 2009.\n   [SYSLOG-DTLS]    Salowey, J., Petch,
      T., Gerhards, R., and H. Feng,\n                    \"Datagram Transport Layer
      Security (DTLS) Transport\n                    Mapping for Syslog\", RFC 6012,
      October 2010.\n   [SYSLOG-TLS]     Miao, F., Ed., Ma, Y., Ed., and J. Salowey,
      Ed.,\n                    \"Transport Layer Security (TLS) Transport Mapping\n
      \                   for Syslog\", RFC 5425, March 2009.\n   [TLS]            Dierks,
      T. and E. Rescorla, \"The Transport Layer\n                    Security (TLS)
      Protocol Version 1.2\", RFC 5246,\n                    August 2008.\n   [TLS-EXT]
      \       Eastlake 3rd, D., \"Transport Layer Security (TLS)\n                    Extensions:
      Extension Definitions\", RFC 6066,\n                    January 2011.\n   [US-ASCII]
      \      American National Standards Institute, \"Coded\n                    Character
      Set - 7-bit American Standard Code for\n                    Information Interchange\",
      ANSI X3.4, 1986.\n   [USINGTLS]       Newman, C., \"Using TLS with IMAP, POP3
      and ACAP\",\n                    RFC 2595, June 1999.\n   [WSC-UI]         Saldhana,
      A. and T. Roessler, \"Web Security Context:\n                    User Interface
      Guidelines\", World Wide Web\n                    Consortium LastCall WD-wsc-ui-20100309,
      March 2010,\n                    <http://www.w3.org/TR/2010/WD-wsc-ui-20100309>.\n
      \  [X.500]          International Telecommunications Union, \"Information\n
      \                   Technology - Open Systems Interconnection - The\n                    Directory:
      Overview of concepts, models and\n                    services\", ITU-T Recommendation
      X.500, ISO Standard\n                    9594-1, August 2005.\n   [X.501]          International
      Telecommunications Union, \"Information\n                    Technology - Open
      Systems Interconnection - The\n                    Directory: Models\", ITU-T
      Recommendation X.501,\n                    ISO Standard 9594-2, August 2005.\n
      \  [X.509]          International Telecommunications Union, \"Information\n
      \                   Technology - Open Systems Interconnection - The\n                    Directory:
      Public-key and attribute certificate\n                    frameworks\", ITU-T
      Recommendation X.509,\n                    ISO Standard 9594-8, August 2005.\n
      \  [X.520]          International Telecommunications Union, \"Information\n
      \                   Technology - Open Systems Interconnection - The\n                    Directory:
      Selected attribute types\", ITU-\n                    T Recommendation X.509,
      ISO Standard 9594-6,\n                    August 2005.\n   [X.690]          International
      Telecommunications Union, \"Information\n                    Technology - ASN.1
      encoding rules: Specification of\n                    Basic Encoding Rules (BER),
      Canonical Encoding Rules\n                    (CER) and Distinguished Encoding
      Rules (DER)\", ITU-\n                    T Recommendation X.690, ISO Standard
      8825-1,\n                    August 2008.\n   [XMPP]           Saint-Andre,
      P., \"Extensible Messaging and Presence\n                    Protocol (XMPP):
      Core\", RFC 6120, March 2011.\n   [XMPP-OLD]       Saint-Andre, P., Ed., \"Extensible
      Messaging and\n                    Presence Protocol (XMPP): Core\", RFC 3920,\n
      \                   October 2004.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Sample Text\n   At the time of this writing, two application technologies
    reuse the\n   recommendations in this specification: email [EMAIL-SRV] and XMPP\n
    \  [XMPP].  Here we include the text from [XMPP] to illustrate the\n   thought
    process that might be followed by protocol designers for\n   other application
    technologies.  Specifically, because XMPP uses DNS\n   SRV records for resolution
    of the DNS domain names for application\n   services, the XMPP specification recommends
    the use of SRV-IDs.\n   The text regarding certificate issuance is as follows:\n
    \  ######\n   In a PKIX certificate to be presented by an XMPP server (i.e., a\n
    \  \"server certificate\"), the certificate MUST include one or more XMPP\n   addresses
    (i.e., domainparts) associated with XMPP services hosted at\n   the server.  The
    rules and guidelines defined in [this specification]\n   apply to XMPP server
    certificates, with the following XMPP-specific\n   considerations:\n   o  Support
    for the DNS-ID identifier type [PKIX] is REQUIRED in XMPP\n      client and server
    software implementations.  Certification\n      authorities that issue XMPP-specific
    certificates MUST support the\n      DNS-ID identifier type.  XMPP service providers
    SHOULD include the\n      DNS-ID identifier type in certificate requests.\n   o
    \ Support for the SRV-ID identifier type [SRVNAME] is REQUIRED for\n      XMPP
    client and server software implementations (for verification\n      purposes XMPP
    client implementations need to support only the\n      \"_xmpp-client\" application
    service type, whereas XMPP server\n      implementations need to support both
    the \"_xmpp-client\" and\n      \"_xmpp-server\" application service types).  Certification\n
    \     authorities that issue XMPP-specific certificates SHOULD support\n      the
    SRV-ID identifier type.  XMPP service providers SHOULD include\n      the SRV-ID
    identifier type in certificate requests.\n   o  Support for the XmppAddr identifier
    type is encouraged in XMPP\n      client and server software implementations for
    the sake of\n      backward-compatibility, but is no longer encouraged in\n      certificates
    issued by certification authorities or requested by\n      XMPP service providers.\n
    \  o  DNS domain names in server certificates MAY contain the wildcard\n      character
    '*' as the complete left-most label within the\n      identifier.\n   ######\n
    \  The text regarding certificate verification is as follows:\n   ######\n   For
    server certificates, the rules and guidelines defined in [this\n   specification]
    apply, with the proviso that the XmppAddr identifier\n   is allowed as a reference
    identifier.\n   The identities to be checked are set as follows:\n   o  The initiating
    entity sets its reference identifier to the 'to'\n      address it communicates
    in the initial stream header; i.e., this\n      is the identity it expects the
    receiving entity to provide in a\n      PKIX certificate.\n   o  The receiving
    entity sets its reference identifier to the 'from'\n      address communicated
    by the initiating entity in the initial\n      stream header; i.e., this is the
    identity that the initiating\n      entity is trying to assert.\n   ######\n"
  title: Appendix A.  Sample Text
- contents:
  - "Appendix B.  Prior Art\n   (This section is non-normative.)\n   The recommendations
    in this document are an abstraction from\n   recommendations in specifications
    for a wide range of application\n   protocols.  For the purpose of comparison
    and to delineate the\n   history of thinking about application service identity
    verification\n   within the IETF, this informative section gathers together prior
    art\n   by including the exact text from various RFCs (the only modifications\n
    \  are changes to the names of several references to maintain coherence\n   with
    the main body of this document, and the elision of irrelevant\n   text as marked
    by the characters \"[...]\").\n"
  - contents:
    - "B.1.  IMAP, POP3, and ACAP (1999)\n   In 1999, [USINGTLS] specified the following
      text regarding\n   application service identity verification in IMAP, POP3,
      and ACAP:\n   ######\n   2.4.  Server Identity Check\n   During the TLS negotiation,
      the client MUST check its understanding\n   of the server hostname against the
      server's identity as presented in\n   the server Certificate message, in order
      to prevent man-in-the-middle\n   attacks.  Matching is performed according to
      these rules:\n   o  The client MUST use the server hostname it used to open
      the\n      connection as the value to compare against the server name as\n      expressed
      in the server certificate.  The client MUST NOT use any\n      form of the server
      hostname derived from an insecure remote source\n      (e.g., insecure DNS lookup).
      \ CNAME canonicalization is not done.\n   o  If a subjectAltName extension of
      type dNSName is present in the\n      certificate, it SHOULD be used as the
      source of the server's\n      identity.\n   o  Matching is case-insensitive.\n
      \  o  A \"*\" wildcard character MAY be used as the left-most name\n      component
      in the certificate.  For example, *.example.com would\n      match a.example.com,
      foo.example.com, etc. but would not match\n      example.com.\n   o  If the
      certificate contains multiple names (e.g. more than one\n      dNSName field),
      then a match with any one of the fields is\n      considered acceptable.\n   If
      the match fails, the client SHOULD either ask for explicit user\n   confirmation,
      or terminate the connection and indicate the server's\n   identity is suspect.\n
      \  ######\n"
    title: B.1.  IMAP, POP3, and ACAP (1999)
  - contents:
    - "B.2.  HTTP (2000)\n   In 2000, [HTTP-TLS] specified the following text regarding\n
      \  application service identity verification in HTTP:\n   ######\n   3.1.  Server
      Identity\n   In general, HTTP/TLS requests are generated by dereferencing a
      URI.\n   As a consequence, the hostname for the server is known to the client.\n
      \  If the hostname is available, the client MUST check it against the\n   server's
      identity as presented in the server's Certificate message,\n   in order to prevent
      man-in-the-middle attacks.\n   If the client has external information as to
      the expected identity of\n   the server, the hostname check MAY be omitted.
      \ (For instance, a\n   client may be connecting to a machine whose address and
      hostname are\n   dynamic but the client knows the certificate that the server
      will\n   present.)  In such cases, it is important to narrow the scope of\n
      \  acceptable certificates as much as possible in order to prevent man\n   in
      the middle attacks.  In special cases, it may be appropriate for\n   the client
      to simply ignore the server's identity, but it must be\n   understood that this
      leaves the connection open to active attack.\n   If a subjectAltName extension
      of type dNSName is present, that MUST\n   be used as the identity.  Otherwise,
      the (most specific) Common Name\n   field in the Subject field of the certificate
      MUST be used.  Although\n   the use of the Common Name is existing practice,
      it is deprecated and\n   Certification Authorities are encouraged to use the
      dNSName instead.\n   Matching is performed using the matching rules specified
      by\n   [PKIX-OLD].  If more than one identity of a given type is present in\n
      \  the certificate (e.g., more than one dNSName name, a match in any one\n   of
      the set is considered acceptable.)  Names may contain the wildcard\n   character
      * which is considered to match any single domain name\n   component or component
      fragment.  E.g., *.a.com matches foo.a.com but\n   not bar.foo.a.com. f*.com
      matches foo.com but not bar.com.\n   In some cases, the URI is specified as
      an IP address rather than a\n   hostname.  In this case, the iPAddress subjectAltName
      must be present\n   in the certificate and must exactly match the IP in the
      URI.\n   If the hostname does not match the identity in the certificate, user\n
      \  oriented clients MUST either notify the user (clients MAY give the\n   user
      the opportunity to continue with the connection in any case) or\n   terminate
      the connection with a bad certificate error.  Automated\n   clients MUST log
      the error to an appropriate audit log (if available)\n   and SHOULD terminate
      the connection (with a bad certificate error).\n   Automated clients MAY provide
      a configuration setting that disables\n   this check, but MUST provide a setting
      which enables it.\n   Note that in many cases the URI itself comes from an untrusted\n
      \  source.  The above-described check provides no protection against\n   attacks
      where this source is compromised.  For example, if the URI\n   was obtained
      by clicking on an HTML page which was itself obtained\n   without using HTTP/TLS,
      a man in the middle could have replaced the\n   URI.  In order to prevent this
      form of attack, users should carefully\n   examine the certificate presented
      by the server to determine if it\n   meets their expectations.\n   ######\n"
    title: B.2.  HTTP (2000)
  - contents:
    - "B.3.  LDAP (2000/2006)\n   In 2000, [LDAP-TLS] specified the following text
      regarding\n   application service identity verification in LDAP:\n   ######\n
      \  3.6.  Server Identity Check\n   The client MUST check its understanding of
      the server's hostname\n   against the server's identity as presented in the
      server's\n   Certificate message, in order to prevent man-in-the-middle attacks.\n
      \  Matching is performed according to these rules:\n   o  The client MUST use
      the server hostname it used to open the LDAP\n      connection as the value
      to compare against the server name as\n      expressed in the server's certificate.
      \ The client MUST NOT use\n      the server's canonical DNS name or any other
      derived form of name.\n   o  If a subjectAltName extension of type dNSName is
      present in the\n      certificate, it SHOULD be used as the source of the server's\n
      \     identity.\n   o  Matching is case-insensitive.\n   o  The \"*\" wildcard
      character is allowed.  If present, it applies\n      only to the left-most name
      component.\n   E.g. *.bar.com would match a.bar.com, b.bar.com, etc. but not\n
      \  bar.com.  If more than one identity of a given type is present in the\n   certificate
      (e.g. more than one dNSName name), a match in any one of\n   the set is considered
      acceptable.\n   If the hostname does not match the dNSName-based identity in
      the\n   certificate per the above check, user-oriented clients SHOULD either\n
      \  notify the user (clients MAY give the user the opportunity to\n   continue
      with the connection in any case) or terminate the connection\n   and indicate
      that the server's identity is suspect.  Automated\n   clients SHOULD close the
      connection, returning and/or logging an\n   error indicating that the server's
      identity is suspect.\n   Beyond the server identity checks described in this
      section, clients\n   SHOULD be prepared to do further checking to ensure that
      the server\n   is authorized to provide the service it is observed to provide.
      \ The\n   client MAY need to make use of local policy information.\n   ######\n
      \  In 2006, [LDAP-AUTH] specified the following text regarding\n   application
      service identity verification in LDAP:\n   ######\n   3.1.3.  Server Identity
      Check\n   In order to prevent man-in-the-middle attacks, the client MUST verify\n
      \  the server's identity (as presented in the server's Certificate\n   message).
      \ In this section, the client's understanding of the\n   server's identity (typically
      the identity used to establish the\n   transport connection) is called the \"reference
      identity\".\n   The client determines the type (e.g., DNS name or IP address)
      of the\n   reference identity and performs a comparison between the reference\n
      \  identity and each subjectAltName value of the corresponding type\n   until
      a match is produced.  Once a match is produced, the server's\n   identity has
      been verified, and the server identity check is\n   complete.  Different subjectAltName
      types are matched in different\n   ways.  Sections 3.1.3.1 - 3.1.3.3 explain
      how to compare values of\n   various subjectAltName types.\n   The client may
      map the reference identity to a different type prior\n   to performing a comparison.
      \ Mappings may be performed for all\n   available subjectAltName types to which
      the reference identity can be\n   mapped; however, the reference identity should
      only be mapped to\n   types for which the mapping is either inherently secure
      (e.g.,\n   extracting the DNS name from a URI to compare with a subjectAltName\n
      \  of type dNSName) or for which the mapping is performed in a secure\n   manner
      (e.g., using [DNSSEC], or using user- or admin-configured\n   host-to-address/address-to-host
      lookup tables).\n   The server's identity may also be verified by comparing
      the reference\n   identity to the Common Name (CN) [LDAP-SCHEMA] value in the
      last\n   Relative Distinguished Name (RDN) of the subject field of the\n   server's
      certificate (where \"last\" refers to the DER-encoded order,\n   not the order
      of presentation in a string representation of DER-\n   encoded data).  This
      comparison is performed using the rules for\n   comparison of DNS names in Section
      3.1.3.1, below, with the exception\n   that no wildcard matching is allowed.
      \ Although the use of the Common\n   Name value is existing practice, it is
      deprecated, and Certification\n   Authorities are encouraged to provide subjectAltName
      values instead.\n   Note that the TLS implementation may represent DNs in certificates\n
      \  according to X.500 or other conventions.  For example, some X.500\n   implementations
      order the RDNs in a DN using a left-to-right (most\n   significant to least
      significant) convention instead of LDAP's right-\n   to-left convention.\n   If
      the server identity check fails, user-oriented clients SHOULD\n   either notify
      the user (clients may give the user the opportunity to\n   continue with the
      LDAP session in this case) or close the transport\n   connection and indicate
      that the server's identity is suspect.\n   Automated clients SHOULD close the
      transport connection and then\n   return or log an error indicating that the
      server's identity is\n   suspect or both.\n   Beyond the server identity check
      described in this section, clients\n   should be prepared to do further checking
      to ensure that the server\n   is authorized to provide the service it is requested
      to provide.  The\n   client may need to make use of local policy information
      in making\n   this determination.\n   3.1.3.1.  Comparison of DNS Names\n   If
      the reference identity is an internationalized domain name,\n   conforming implementations
      MUST convert it to the ASCII Compatible\n   Encoding (ACE) format as specified
      in Section 4 of RFC 3490\n   [IDNA2003] before comparison with subjectAltName
      values of type\n   dNSName.  Specifically, conforming implementations MUST perform
      the\n   conversion operation specified in Section 4 of RFC 3490 as follows:\n
      \  o  in step 1, the domain name SHALL be considered a \"stored string\";\n
      \  o  in step 3, set the flag called \"UseSTD3ASCIIRules\";\n   o  in step 4,
      process each label with the \"ToASCII\" operation; and\n   o  in step 5, change
      all label separators to U+002E (full stop).\n   After performing the \"to-ASCII\"
      conversion, the DNS labels and names\n   MUST be compared for equality according
      to the rules specified in\n   Section 3 of RFC3490.\n   The '*' (ASCII 42) wildcard
      character is allowed in subjectAltName\n   values of type dNSName, and then
      only as the left-most (least\n   significant) DNS label in that value.  This
      wildcard matches any\n   left-most DNS label in the server name.  That is, the
      subject\n   *.example.com matches the server names a.example.com and\n   b.example.com,
      but does not match example.com or a.b.example.com.\n   3.1.3.2.  Comparison
      of IP Addresses\n   When the reference identity is an IP address, the identity
      MUST be\n   converted to the \"network byte order\" octet string representation\n
      \  [IP] [IPv6].  For IP Version 4, as specified in RFC 791, the octet\n   string
      will contain exactly four octets.  For IP Version 6, as\n   specified in RFC
      2460, the octet string will contain exactly sixteen\n   octets.  This octet
      string is then compared against subjectAltName\n   values of type iPAddress.
      \ A match occurs if the reference identity\n   octet string and value octet
      strings are identical.\n   3.1.3.3.  Comparison of Other subjectName Types\n
      \  Client implementations MAY support matching against subjectAltName\n   values
      of other types as described in other documents.\n   ######\n"
    title: B.3.  LDAP (2000/2006)
  - contents:
    - "B.4.  SMTP (2002/2007)\n   In 2002, [SMTP-TLS] specified the following text
      regarding\n   application service identity verification in SMTP:\n   ######\n
      \  4.1 Processing After the STARTTLS Command\n   [...]\n   The decision of whether
      or not to believe the authenticity of the\n   other party in a TLS negotiation
      is a local matter.  However, some\n   general rules for the decisions are:\n
      \  o  A SMTP client would probably only want to authenticate an SMTP\n      server
      whose server certificate has a domain name that is the\n      domain name that
      the client thought it was connecting to.\n   [...]\n   ######\n   In 2006, [SMTP-AUTH]
      specified the following text regarding\n   application service identity verification
      in SMTP:\n   ######\n   14.  Additional Requirements When Using SASL PLAIN over
      TLS\n   [...]\n   After a successful [TLS] negotiation, the client MUST check
      its\n   understanding of the server hostname against the server's identity as\n
      \  presented in the server Certificate message, in order to prevent man-\n   in-the-middle
      attacks.  If the match fails, the client MUST NOT\n   attempt to authenticate
      using the SASL PLAIN mechanism.  Matching is\n   performed according to the
      following rules:\n      The client MUST use the server hostname it used to open
      the\n      connection as the value to compare against the server name as\n      expressed
      in the server certificate.  The client MUST NOT use any\n      form of the server
      hostname derived from an insecure remote source\n      (e.g., insecure DNS lookup).
      \ CNAME canonicalization is not done.\n      If a subjectAltName extension of
      type dNSName is present in the\n      certificate, it SHOULD be used as the
      source of the server's\n      identity.\n      Matching is case-insensitive.\n
      \     A \"*\" wildcard character MAY be used as the leftmost name\n      component
      in the certificate.  For example, *.example.com would\n      match a.example.com,
      foo.example.com, etc., but would not match\n      example.com.\n      If the
      certificate contains multiple names (e.g., more than one\n      dNSName field),
      then a match with any one of the fields is\n      considered acceptable.\n   ######\n"
    title: B.4.  SMTP (2002/2007)
  - contents:
    - "B.5.  XMPP (2004)\n   In 2004, [XMPP-OLD] specified the following text regarding\n
      \  application service identity verification in XMPP:\n   ######\n   14.2.  Certificate
      Validation\n   When an XMPP peer communicates with another peer securely, it
      MUST\n   validate the peer's certificate.  There are three possible cases:\n
      \  Case #1:  The peer contains an End Entity certificate which appears\n      to
      be certified by a certification path terminating in a trust\n      anchor (as
      described in Section 6.1 of [PKIX]).\n   Case #2:  The peer certificate is certified
      by a Certificate\n      Authority not known to the validating peer.\n   Case
      #3:  The peer certificate is self-signed.\n   In Case #1, the validating peer
      MUST do one of two things:\n   1.  Verify the peer certificate according to
      the rules of [PKIX].\n       The certificate SHOULD then be checked against
      the expected\n       identity of the peer following the rules described in [HTTP-TLS],\n
      \      except that a subjectAltName extension of type \"xmpp\" MUST be\n       used
      as the identity if present.  If one of these checks fails,\n       user-oriented
      clients MUST either notify the user (clients MAY\n       give the user the opportunity
      to continue with the connection in\n       any case) or terminate the connection
      with a bad certificate\n       error.  Automated clients SHOULD terminate the
      connection (with a\n       bad certificate error) and log the error to an appropriate
      audit\n       log.  Automated clients MAY provide a configuration setting that\n
      \      disables this check, but MUST provide a setting that enables it.\n   2.
      \ The peer SHOULD show the certificate to a user for approval,\n       including
      the entire certification path.  The peer MUST cache the\n       certificate
      (or some non-forgeable representation such as a\n       hash).  In future connections,
      the peer MUST verify that the same\n       certificate was presented and MUST
      notify the user if it has\n       changed.\n   In Case #2 and Case #3, implementations
      SHOULD act as in (2) above.\n   ######\n   Although [XMPP-OLD] defined its own
      rules, [XMPP] reuses the rules in\n   this document regarding application service
      identity verification in\n   XMPP.\n"
    title: B.5.  XMPP (2004)
  - contents:
    - "B.6.  NNTP (2006)\n   In 2006, [NNTP-TLS] specified the following text regarding\n
      \  application service identity verification in NNTP:\n   ######\n   5.  Security
      Considerations\n   [...]\n   During the TLS negotiation, the client MUST check
      its understanding\n   of the server hostname against the server's identity as
      presented in\n   the server Certificate message, in order to prevent man-in-the-middle\n
      \  attacks.  Matching is performed according to these rules:\n   o  The client
      MUST use the server hostname it used to open the\n      connection (or the hostname
      specified in TLS \"server_name\"\n      extension [TLS]) as the value to compare
      against the server name\n      as expressed in the server certificate.  The
      client MUST NOT use\n      any form of the server hostname derived from an insecure
      remote\n      source (e.g., insecure DNS lookup).  CNAME canonicalization is
      not\n      done.\n   o  If a subjectAltName extension of type dNSName is present
      in the\n      certificate, it SHOULD be used as the source of the server's\n
      \     identity.\n   o  Matching is case-insensitive.\n   o  A \"*\" wildcard
      character MAY be used as the left-most name\n      component in the certificate.
      \ For example, *.example.com would\n      match a.example.com, foo.example.com,
      etc., but would not match\n      example.com.\n   o  If the certificate contains
      multiple names (e.g., more than one\n      dNSName field), then a match with
      any one of the fields is\n      considered acceptable.\n   If the match fails,
      the client SHOULD either ask for explicit user\n   confirmation or terminate
      the connection with a QUIT command and\n   indicate the server's identity is
      suspect.\n   Additionally, clients MUST verify the binding between the identity
      of\n   the servers to which they connect and the public keys presented by\n
      \  those servers.  Clients SHOULD implement the algorithm in Section 6\n   of
      [PKIX] for general certificate validation, but MAY supplement that\n   algorithm
      with other validation methods that achieve equivalent\n   levels of verification
      (such as comparing the server certificate\n   against a local store of already-verified
      certificates and identity\n   bindings).\n   ######\n"
    title: B.6.  NNTP (2006)
  - contents:
    - "B.7.  NETCONF (2006/2009)\n   In 2006, [NETCONF-SSH] specified the following
      text regarding\n   application service identity verification in NETCONF:\n   ######\n
      \  6.  Security Considerations\n   The identity of the server MUST be verified
      and authenticated by the\n   client according to local policy before password-based
      authentication\n   data or any configuration or state data is sent to or received
      from\n   the server.  The identity of the client MUST also be verified and\n
      \  authenticated by the server according to local policy to ensure that\n   the
      incoming client request is legitimate before any configuration or\n   state
      data is sent to or received from the client.  Neither side\n   should establish
      a NETCONF over SSH connection with an unknown,\n   unexpected, or incorrect
      identity on the opposite side.\n   ######\n   In 2009, [NETCONF-TLS] specified
      the following text regarding\n   application service identity verification in
      NETCONF:\n   ######\n   3.1.  Server Identity\n   During the TLS negotiation,
      the client MUST carefully examine the\n   certificate presented by the server
      to determine if it meets the\n   client's expectations.  Particularly, the client
      MUST check its\n   understanding of the server hostname against the server's
      identity as\n   presented in the server Certificate message, in order to prevent
      man-\n   in-the-middle attacks.\n   Matching is performed according to the rules
      below (following the\n   example of [NNTP-TLS]):\n   o  The client MUST use
      the server hostname it used to open the\n      connection (or the hostname specified
      in the TLS \"server_name\"\n      extension [TLS]) as the value to compare against
      the server name\n      as expressed in the server certificate.  The client MUST
      NOT use\n      any form of the server hostname derived from an insecure remote\n
      \     source (e.g., insecure DNS lookup).  CNAME canonicalization is not\n      done.\n
      \  o  If a subjectAltName extension of type dNSName is present in the\n      certificate,
      it MUST be used as the source of the server's\n      identity.\n   o  Matching
      is case-insensitive.\n   o  A \"*\" wildcard character MAY be used as the leftmost
      name\n      component in the certificate.  For example, *.example.com would\n
      \     match a.example.com, foo.example.com, etc., but would not match\n      example.com.\n
      \  o  If the certificate contains multiple names (e.g., more than one\n      dNSName
      field), then a match with any one of the fields is\n      considered acceptable.\n
      \  If the match fails, the client MUST either ask for explicit user\n   confirmation
      or terminate the connection and indicate the server's\n   identity is suspect.\n
      \  Additionally, clients MUST verify the binding between the identity of\n   the
      servers to which they connect and the public keys presented by\n   those servers.
      \ Clients SHOULD implement the algorithm in Section 6\n   of [PKIX] for general
      certificate validation, but MAY supplement that\n   algorithm with other validation
      methods that achieve equivalent\n   levels of verification (such as comparing
      the server certificate\n   against a local store of already-verified certificates
      and identity\n   bindings).\n   If the client has external information as to
      the expected identity of\n   the server, the hostname check MAY be omitted.\n
      \  ######\n"
    title: B.7.  NETCONF (2006/2009)
  - contents:
    - "B.8.  Syslog (2009)\n   In 2009, [SYSLOG-TLS] specified the following text
      regarding\n   application service identity verification in Syslog:\n   ######\n
      \  5.2.  Subject Name Authorization\n   Implementations MUST support certification
      path validation [PKIX].\n   In addition, they MUST support specifying the authorized
      peers using\n   locally configured host names and matching the name against
      the\n   certificate as follows.\n   o  Implementations MUST support matching
      the locally configured host\n      name against a dNSName in the subjectAltName
      extension field and\n      SHOULD support checking the name against the common
      name portion\n      of the subject distinguished name.\n   o  The '*' (ASCII
      42) wildcard character is allowed in the dNSName of\n      the subjectAltName
      extension (and in common name, if used to store\n      the host name), but only
      as the left-most (least significant) DNS\n      label in that value.  This wildcard
      matches any left-most DNS\n      label in the server name.  That is, the subject
      *.example.com\n      matches the server names a.example.com and b.example.com,
      but does\n      not match example.com or a.b.example.com.  Implementations MUST\n
      \     support wildcards in certificates as specified above, but MAY\n      provide
      a configuration option to disable them.\n   o  Locally configured names MAY
      contain the wildcard character to\n      match a range of values.  The types
      of wildcards supported MAY be\n      more flexible than those allowed in subject
      names, making it\n      possible to support various policies for different environments.\n
      \     For example, a policy could allow for a trust-root-based\n      authorization
      where all credentials issued by a particular CA\n      trust root are authorized.\n
      \  o  If the locally configured name is an internationalized domain\n      name,
      conforming implementations MUST convert it to the ASCII\n      Compatible Encoding
      (ACE) format for performing comparisons, as\n      specified in Section 7 of
      [PKIX].\n   o  Implementations MAY support matching a locally configured IP\n
      \     address against an iPAddress stored in the subjectAltName\n      extension.
      \ In this case, the locally configured IP address is\n      converted to an
      octet string as specified in [PKIX], Section\n      4.2.1.6.  A match occurs
      if this octet string is equal to the\n      value of iPAddress in the subjectAltName
      extension.\n   ######\n"
    title: B.8.  Syslog (2009)
  - contents:
    - "B.9.  SIP (2010)\n   In 2010, [SIP-CERTS] specified the following text regarding\n
      \  application service identity verification in SIP:\n   ######\n   7.2.  Comparing
      SIP Identities\n   When an implementation (either client or server) compares
      two values\n   as SIP domain identities:\n      Implementations MUST compare
      only the DNS name component of each\n      SIP domain identifier; an implementation
      MUST NOT use any scheme\n      or parameters in the comparison.\n      Implementations
      MUST compare the values as DNS names, which means\n      that the comparison
      is case insensitive as specified by\n      [DNS-CASE].  Implementations MUST
      handle Internationalized Domain\n      Names (IDNs) in accordance with Section
      7.2 of [PKIX].\n      Implementations MUST match the values in their entirety:\n
      \        Implementations MUST NOT match suffixes.  For example,\n         \"foo.example.com\"
      does not match \"example.com\".\n         Implementations MUST NOT match any
      form of wildcard, such as a\n         leading \".\" or \"*.\" with any other
      DNS label or sequence of\n         labels.  For example, \"*.example.com\" matches
      only\n         \"*.example.com\" but not \"foo.example.com\".  Similarly,\n
      \        \".example.com\" matches only \".example.com\", and does not match\n
      \        \"foo.example.com.\"\n            [HTTP-TLS] allows the dNSName component
      to contain a\n            wildcard; e.g., \"DNS:*.example.com\".  [PKIX], while
      not\n            disallowing this explicitly, leaves the interpretation of\n
      \           wildcards to the individual specification.  [SIP] does not\n            provide
      any guidelines on the presence of wildcards in\n            certificates.  Through
      the rule above, this document\n            prohibits such wildcards in certificates
      for SIP domains.\n   ######\n"
    title: B.9.  SIP (2010)
  - contents:
    - "B.10.  SNMP (2010)\n   In 2010, [SNMP-TLS] specified the following text regarding\n
      \  application service identity verification in SNMP:\n   ######\n   If the
      server's presented certificate has passed certification path\n   validation
      [PKIX] to a configured trust anchor, and an active row\n   exists with a zero-length
      snmpTlstmAddrServerFingerprint value, then\n   the snmpTlstmAddrServerIdentity
      column contains the expected host\n   name.  This expected host name is then
      compared against the server's\n   certificate as follows:\n   o  Implementations
      MUST support matching the expected host name\n      against a dNSName in the
      subjectAltName extension field and MAY\n      support checking the name against
      the CommonName portion of the\n      subject distinguished name.\n   o  The
      '*' (ASCII 0x2a) wildcard character is allowed in the dNSName\n      of the
      subjectAltName extension (and in common name, if used to\n      store the host
      name), but only as the left-most (least\n      significant) DNS label in that
      value.  This wildcard matches any\n      left-most DNS label in the server name.
      \ That is, the subject\n      *.example.com matches the server names a.example.com
      and\n      b.example.com, but does not match example.com or a.b.example.com.\n
      \     Implementations MUST support wildcards in certificates as\n      specified
      above, but MAY provide a configuration option to disable\n      them.\n   o
      \ If the locally configured name is an internationalized domain\n      name,
      conforming implementations MUST convert it to the ASCII\n      Compatible Encoding
      (ACE) format for performing comparisons, as\n      specified in Section 7 of
      [PKIX].\n   If the expected host name fails these conditions then the connection\n
      \  MUST be closed.\n   ######\n"
    title: B.10.  SNMP (2010)
  - contents:
    - "B.11.  GIST (2010)\n   In 2010, [GIST] specified the following text regarding
      application\n   service identity verification in the General Internet Signalling\n
      \  Transport:\n   ######\n   5.7.3.1.  Identity Checking in TLS\n   After TLS
      authentication, a node MUST check the identity presented by\n   the peer in
      order to avoid man-in-the-middle attacks, and verify that\n   the peer is authorised
      to take part in signalling at the GIST layer.\n   The authorisation check is
      carried out by comparing the presented\n   identity with each Authorised Peer
      Database (APD) entry in turn, as\n   discussed in Section 4.4.2.  This section
      defines the identity\n   comparison algorithm for a single APD entry.\n   For
      TLS authentication with X.509 certificates, an identity from the\n   DNS namespace
      MUST be checked against each subjectAltName extension\n   of type dNSName present
      in the certificate.  If no such extension is\n   present, then the identity
      MUST be compared to the (most specific)\n   Common Name in the Subject field
      of the certificate.  When matching\n   DNS names against dNSName or Common Name
      fields, matching is case-\n   insensitive.  Also, a \"*\" wildcard character
      MAY be used as the left-\n   most name component in the certificate or identity
      in the APD.  For\n   example, *.example.com in the APD would match certificates
      for\n   a.example.com, foo.example.com, *.example.com, etc., but would not\n
      \  match example.com.  Similarly, a certificate for *.example.com would\n   be
      valid for APD identities of a.example.com, foo.example.com,\n   *.example.com,
      etc., but not example.com.\n   Additionally, a node MUST verify the binding
      between the identity of\n   the peer to which it connects and the public key
      presented by that\n   peer.  Nodes SHOULD implement the algorithm in Section
      6 of [PKIX]\n   for general certificate validation, but MAY supplement that
      algorithm\n   with other validation methods that achieve equivalent levels of\n
      \  verification (such as comparing the server certificate against a\n   local
      store of already-verified certificates and identity bindings).\n   For TLS authentication
      with pre-shared keys, the identity in the\n   psk_identity_hint (for the server
      identity, i.e. the Responding node)\n   or psk_identity (for the client identity,
      i.e. the Querying node)\n   MUST be compared to the identities in the APD.\n
      \  ######\n"
    title: B.11.  GIST (2010)
  title: Appendix B.  Prior Art
- contents:
  - "Authors' Addresses\n   Peter Saint-Andre\n   Cisco\n   1899 Wyknoop Street, Suite
    600\n   Denver, CO  80202\n   USA\n   Phone: +1-303-308-3282\n   EMail: psaintan@cisco.com\n
    \  Jeff Hodges\n   PayPal\n   2211 North First Street\n   San Jose, California
    \ 95131\n   US\n   EMail: Jeff.Hodges@PayPal.com\n"
  title: Authors' Addresses
